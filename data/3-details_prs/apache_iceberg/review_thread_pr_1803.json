{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI1MDQ2OTEx", "number": 1803, "reviewThreads": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMVQwMzoxMDozMFrOE7xY-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQwMDo1NjozNVrOE8dNFA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxMTEwNjQ5OnYy", "diffSide": "RIGHT", "path": "core/src/test/java/org/apache/iceberg/TestManifestReaderStats.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMVQwMzoxMDozMFrOH3mSyA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQwMjo0NzozNVrOH5hHiw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODA2MTEyOA==", "bodyText": "If I change this record_count to something else it will result in NPE due to InclusiveMetrisEvaluator.eval  needing record count, however STATS_COLUMNS in manifest reader doesn't have it. I know the reader normally will only be used internally so we don't expect to run into this often, but wonder if we want to ensure record_count is always added when populating stats.", "url": "https://github.com/apache/iceberg/pull/1803#discussion_r528061128", "createdAt": "2020-11-21T03:10:30Z", "author": {"login": "yyanyy"}, "path": "core/src/test/java/org/apache/iceberg/TestManifestReaderStats.java", "diffHunk": "@@ -0,0 +1,172 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg;\n+\n+import java.io.IOException;\n+import java.nio.ByteBuffer;\n+import java.util.Map;\n+import org.apache.iceberg.expressions.Expressions;\n+import org.apache.iceberg.io.CloseableIterable;\n+import org.apache.iceberg.relocated.com.google.common.collect.ImmutableMap;\n+import org.apache.iceberg.relocated.com.google.common.collect.ImmutableSet;\n+import org.apache.iceberg.types.Conversions;\n+import org.apache.iceberg.types.Types;\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n+\n+@RunWith(Parameterized.class)\n+public class TestManifestReaderStats extends TableTestBase {\n+  @Parameterized.Parameters(name = \"formatVersion = {0}\")\n+  public static Object[] parameters() {\n+    return new Object[] { 1, 2 };\n+  }\n+\n+  public TestManifestReaderStats(int formatVersion) {\n+    super(formatVersion);\n+  }\n+\n+  private static final Map<Integer, Long> VALUE_COUNT = ImmutableMap.of(3, 3L);\n+  private static final Map<Integer, Long> NULL_VALUE_COUNTS = ImmutableMap.of(3, 0L);\n+  private static final Map<Integer, Long> NAN_VALUE_COUNTS = ImmutableMap.of(3, 1L);\n+  private static final Map<Integer, ByteBuffer> LOWER_BOUNDS =\n+      ImmutableMap.of(3, Conversions.toByteBuffer(Types.IntegerType.get(), 2));\n+  private static final Map<Integer, ByteBuffer> UPPER_BOUNDS =\n+      ImmutableMap.of(3, Conversions.toByteBuffer(Types.IntegerType.get(), 4));\n+\n+  private static final Metrics METRICS = new Metrics(3L, null,\n+      VALUE_COUNT, NULL_VALUE_COUNTS, NAN_VALUE_COUNTS, LOWER_BOUNDS, UPPER_BOUNDS);\n+\n+  private static final DataFile FILE = DataFiles.builder(SPEC)\n+      .withPath(\"/path/to/data-a.parquet\")\n+      .withFileSizeInBytes(10)\n+      .withPartitionPath(\"data_bucket=0\") // easy way to set partition data for now\n+      .withRecordCount(3)\n+      .withMetrics(METRICS)\n+      .build();\n+\n+  @Test\n+  public void testReadIncludesFullStats() throws IOException {\n+    ManifestFile manifest = writeManifest(1000L, FILE);\n+    try (ManifestReader<DataFile> reader = ManifestFiles.read(manifest, FILE_IO)) {\n+      CloseableIterable<ManifestEntry<DataFile>> entries = reader.entries();\n+      ManifestEntry<DataFile> entry = entries.iterator().next();\n+      assertFullStats(entry.file());\n+    }\n+  }\n+\n+  @Test\n+  public void testReadWithFilterIncludesFullStats() throws IOException {\n+    ManifestFile manifest = writeManifest(1000L, FILE);\n+    try (ManifestReader<DataFile> reader = ManifestFiles.read(manifest, FILE_IO)\n+        .filterRows(Expressions.equal(\"id\", 3))) {\n+      CloseableIterable<ManifestEntry<DataFile>> entries = reader.entries();\n+      ManifestEntry<DataFile> entry = entries.iterator().next();\n+      assertFullStats(entry.file());\n+    }\n+  }\n+\n+  @Test\n+  public void testReadEntriesWithFilterAndSelectIncludesFullStats() throws IOException {\n+    ManifestFile manifest = writeManifest(1000L, FILE);\n+    try (ManifestReader<DataFile> reader = ManifestFiles.read(manifest, FILE_IO)\n+        .select(ImmutableSet.of(\"record_count\"))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d19cc51a5a2082777b9283208c4d030e9bcae5c8"}, "originalPosition": 91}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTA5MjA1Mg==", "bodyText": "Yes, I think we do. Maybe we should do that in a separate update, though.", "url": "https://github.com/apache/iceberg/pull/1803#discussion_r529092052", "createdAt": "2020-11-24T00:52:46Z", "author": {"login": "rdblue"}, "path": "core/src/test/java/org/apache/iceberg/TestManifestReaderStats.java", "diffHunk": "@@ -0,0 +1,172 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg;\n+\n+import java.io.IOException;\n+import java.nio.ByteBuffer;\n+import java.util.Map;\n+import org.apache.iceberg.expressions.Expressions;\n+import org.apache.iceberg.io.CloseableIterable;\n+import org.apache.iceberg.relocated.com.google.common.collect.ImmutableMap;\n+import org.apache.iceberg.relocated.com.google.common.collect.ImmutableSet;\n+import org.apache.iceberg.types.Conversions;\n+import org.apache.iceberg.types.Types;\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n+\n+@RunWith(Parameterized.class)\n+public class TestManifestReaderStats extends TableTestBase {\n+  @Parameterized.Parameters(name = \"formatVersion = {0}\")\n+  public static Object[] parameters() {\n+    return new Object[] { 1, 2 };\n+  }\n+\n+  public TestManifestReaderStats(int formatVersion) {\n+    super(formatVersion);\n+  }\n+\n+  private static final Map<Integer, Long> VALUE_COUNT = ImmutableMap.of(3, 3L);\n+  private static final Map<Integer, Long> NULL_VALUE_COUNTS = ImmutableMap.of(3, 0L);\n+  private static final Map<Integer, Long> NAN_VALUE_COUNTS = ImmutableMap.of(3, 1L);\n+  private static final Map<Integer, ByteBuffer> LOWER_BOUNDS =\n+      ImmutableMap.of(3, Conversions.toByteBuffer(Types.IntegerType.get(), 2));\n+  private static final Map<Integer, ByteBuffer> UPPER_BOUNDS =\n+      ImmutableMap.of(3, Conversions.toByteBuffer(Types.IntegerType.get(), 4));\n+\n+  private static final Metrics METRICS = new Metrics(3L, null,\n+      VALUE_COUNT, NULL_VALUE_COUNTS, NAN_VALUE_COUNTS, LOWER_BOUNDS, UPPER_BOUNDS);\n+\n+  private static final DataFile FILE = DataFiles.builder(SPEC)\n+      .withPath(\"/path/to/data-a.parquet\")\n+      .withFileSizeInBytes(10)\n+      .withPartitionPath(\"data_bucket=0\") // easy way to set partition data for now\n+      .withRecordCount(3)\n+      .withMetrics(METRICS)\n+      .build();\n+\n+  @Test\n+  public void testReadIncludesFullStats() throws IOException {\n+    ManifestFile manifest = writeManifest(1000L, FILE);\n+    try (ManifestReader<DataFile> reader = ManifestFiles.read(manifest, FILE_IO)) {\n+      CloseableIterable<ManifestEntry<DataFile>> entries = reader.entries();\n+      ManifestEntry<DataFile> entry = entries.iterator().next();\n+      assertFullStats(entry.file());\n+    }\n+  }\n+\n+  @Test\n+  public void testReadWithFilterIncludesFullStats() throws IOException {\n+    ManifestFile manifest = writeManifest(1000L, FILE);\n+    try (ManifestReader<DataFile> reader = ManifestFiles.read(manifest, FILE_IO)\n+        .filterRows(Expressions.equal(\"id\", 3))) {\n+      CloseableIterable<ManifestEntry<DataFile>> entries = reader.entries();\n+      ManifestEntry<DataFile> entry = entries.iterator().next();\n+      assertFullStats(entry.file());\n+    }\n+  }\n+\n+  @Test\n+  public void testReadEntriesWithFilterAndSelectIncludesFullStats() throws IOException {\n+    ManifestFile manifest = writeManifest(1000L, FILE);\n+    try (ManifestReader<DataFile> reader = ManifestFiles.read(manifest, FILE_IO)\n+        .select(ImmutableSet.of(\"record_count\"))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODA2MTEyOA=="}, "originalCommit": {"oid": "d19cc51a5a2082777b9283208c4d030e9bcae5c8"}, "originalPosition": 91}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTk5MDUzMQ==", "bodyText": "Sounds good, I'll create a separate pr for that", "url": "https://github.com/apache/iceberg/pull/1803#discussion_r529990531", "createdAt": "2020-11-24T23:15:41Z", "author": {"login": "yyanyy"}, "path": "core/src/test/java/org/apache/iceberg/TestManifestReaderStats.java", "diffHunk": "@@ -0,0 +1,172 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg;\n+\n+import java.io.IOException;\n+import java.nio.ByteBuffer;\n+import java.util.Map;\n+import org.apache.iceberg.expressions.Expressions;\n+import org.apache.iceberg.io.CloseableIterable;\n+import org.apache.iceberg.relocated.com.google.common.collect.ImmutableMap;\n+import org.apache.iceberg.relocated.com.google.common.collect.ImmutableSet;\n+import org.apache.iceberg.types.Conversions;\n+import org.apache.iceberg.types.Types;\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n+\n+@RunWith(Parameterized.class)\n+public class TestManifestReaderStats extends TableTestBase {\n+  @Parameterized.Parameters(name = \"formatVersion = {0}\")\n+  public static Object[] parameters() {\n+    return new Object[] { 1, 2 };\n+  }\n+\n+  public TestManifestReaderStats(int formatVersion) {\n+    super(formatVersion);\n+  }\n+\n+  private static final Map<Integer, Long> VALUE_COUNT = ImmutableMap.of(3, 3L);\n+  private static final Map<Integer, Long> NULL_VALUE_COUNTS = ImmutableMap.of(3, 0L);\n+  private static final Map<Integer, Long> NAN_VALUE_COUNTS = ImmutableMap.of(3, 1L);\n+  private static final Map<Integer, ByteBuffer> LOWER_BOUNDS =\n+      ImmutableMap.of(3, Conversions.toByteBuffer(Types.IntegerType.get(), 2));\n+  private static final Map<Integer, ByteBuffer> UPPER_BOUNDS =\n+      ImmutableMap.of(3, Conversions.toByteBuffer(Types.IntegerType.get(), 4));\n+\n+  private static final Metrics METRICS = new Metrics(3L, null,\n+      VALUE_COUNT, NULL_VALUE_COUNTS, NAN_VALUE_COUNTS, LOWER_BOUNDS, UPPER_BOUNDS);\n+\n+  private static final DataFile FILE = DataFiles.builder(SPEC)\n+      .withPath(\"/path/to/data-a.parquet\")\n+      .withFileSizeInBytes(10)\n+      .withPartitionPath(\"data_bucket=0\") // easy way to set partition data for now\n+      .withRecordCount(3)\n+      .withMetrics(METRICS)\n+      .build();\n+\n+  @Test\n+  public void testReadIncludesFullStats() throws IOException {\n+    ManifestFile manifest = writeManifest(1000L, FILE);\n+    try (ManifestReader<DataFile> reader = ManifestFiles.read(manifest, FILE_IO)) {\n+      CloseableIterable<ManifestEntry<DataFile>> entries = reader.entries();\n+      ManifestEntry<DataFile> entry = entries.iterator().next();\n+      assertFullStats(entry.file());\n+    }\n+  }\n+\n+  @Test\n+  public void testReadWithFilterIncludesFullStats() throws IOException {\n+    ManifestFile manifest = writeManifest(1000L, FILE);\n+    try (ManifestReader<DataFile> reader = ManifestFiles.read(manifest, FILE_IO)\n+        .filterRows(Expressions.equal(\"id\", 3))) {\n+      CloseableIterable<ManifestEntry<DataFile>> entries = reader.entries();\n+      ManifestEntry<DataFile> entry = entries.iterator().next();\n+      assertFullStats(entry.file());\n+    }\n+  }\n+\n+  @Test\n+  public void testReadEntriesWithFilterAndSelectIncludesFullStats() throws IOException {\n+    ManifestFile manifest = writeManifest(1000L, FILE);\n+    try (ManifestReader<DataFile> reader = ManifestFiles.read(manifest, FILE_IO)\n+        .select(ImmutableSet.of(\"record_count\"))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODA2MTEyOA=="}, "originalCommit": {"oid": "d19cc51a5a2082777b9283208c4d030e9bcae5c8"}, "originalPosition": 91}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDA3MzQ4Mw==", "bodyText": "PR: #1820", "url": "https://github.com/apache/iceberg/pull/1803#discussion_r530073483", "createdAt": "2020-11-25T02:47:35Z", "author": {"login": "yyanyy"}, "path": "core/src/test/java/org/apache/iceberg/TestManifestReaderStats.java", "diffHunk": "@@ -0,0 +1,172 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg;\n+\n+import java.io.IOException;\n+import java.nio.ByteBuffer;\n+import java.util.Map;\n+import org.apache.iceberg.expressions.Expressions;\n+import org.apache.iceberg.io.CloseableIterable;\n+import org.apache.iceberg.relocated.com.google.common.collect.ImmutableMap;\n+import org.apache.iceberg.relocated.com.google.common.collect.ImmutableSet;\n+import org.apache.iceberg.types.Conversions;\n+import org.apache.iceberg.types.Types;\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n+\n+@RunWith(Parameterized.class)\n+public class TestManifestReaderStats extends TableTestBase {\n+  @Parameterized.Parameters(name = \"formatVersion = {0}\")\n+  public static Object[] parameters() {\n+    return new Object[] { 1, 2 };\n+  }\n+\n+  public TestManifestReaderStats(int formatVersion) {\n+    super(formatVersion);\n+  }\n+\n+  private static final Map<Integer, Long> VALUE_COUNT = ImmutableMap.of(3, 3L);\n+  private static final Map<Integer, Long> NULL_VALUE_COUNTS = ImmutableMap.of(3, 0L);\n+  private static final Map<Integer, Long> NAN_VALUE_COUNTS = ImmutableMap.of(3, 1L);\n+  private static final Map<Integer, ByteBuffer> LOWER_BOUNDS =\n+      ImmutableMap.of(3, Conversions.toByteBuffer(Types.IntegerType.get(), 2));\n+  private static final Map<Integer, ByteBuffer> UPPER_BOUNDS =\n+      ImmutableMap.of(3, Conversions.toByteBuffer(Types.IntegerType.get(), 4));\n+\n+  private static final Metrics METRICS = new Metrics(3L, null,\n+      VALUE_COUNT, NULL_VALUE_COUNTS, NAN_VALUE_COUNTS, LOWER_BOUNDS, UPPER_BOUNDS);\n+\n+  private static final DataFile FILE = DataFiles.builder(SPEC)\n+      .withPath(\"/path/to/data-a.parquet\")\n+      .withFileSizeInBytes(10)\n+      .withPartitionPath(\"data_bucket=0\") // easy way to set partition data for now\n+      .withRecordCount(3)\n+      .withMetrics(METRICS)\n+      .build();\n+\n+  @Test\n+  public void testReadIncludesFullStats() throws IOException {\n+    ManifestFile manifest = writeManifest(1000L, FILE);\n+    try (ManifestReader<DataFile> reader = ManifestFiles.read(manifest, FILE_IO)) {\n+      CloseableIterable<ManifestEntry<DataFile>> entries = reader.entries();\n+      ManifestEntry<DataFile> entry = entries.iterator().next();\n+      assertFullStats(entry.file());\n+    }\n+  }\n+\n+  @Test\n+  public void testReadWithFilterIncludesFullStats() throws IOException {\n+    ManifestFile manifest = writeManifest(1000L, FILE);\n+    try (ManifestReader<DataFile> reader = ManifestFiles.read(manifest, FILE_IO)\n+        .filterRows(Expressions.equal(\"id\", 3))) {\n+      CloseableIterable<ManifestEntry<DataFile>> entries = reader.entries();\n+      ManifestEntry<DataFile> entry = entries.iterator().next();\n+      assertFullStats(entry.file());\n+    }\n+  }\n+\n+  @Test\n+  public void testReadEntriesWithFilterAndSelectIncludesFullStats() throws IOException {\n+    ManifestFile manifest = writeManifest(1000L, FILE);\n+    try (ManifestReader<DataFile> reader = ManifestFiles.read(manifest, FILE_IO)\n+        .select(ImmutableSet.of(\"record_count\"))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODA2MTEyOA=="}, "originalCommit": {"oid": "d19cc51a5a2082777b9283208c4d030e9bcae5c8"}, "originalPosition": 91}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxMzkzMjYwOnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/apache/iceberg/ContentFile.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QwMDo1OToyNlrOH39BXA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QwMDo1OToyNlrOH39BXA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODQzMzUwMA==", "bodyText": "nit: newline should start at the same place as last line", "url": "https://github.com/apache/iceberg/pull/1803#discussion_r528433500", "createdAt": "2020-11-23T00:59:26Z", "author": {"login": "jackye1995"}, "path": "api/src/main/java/org/apache/iceberg/ContentFile.java", "diffHunk": "@@ -132,7 +137,8 @@\n    * Copies this file without file stats. Manifest readers can reuse file instances; use\n    * this method to copy data without stats when collecting files.\n    *\n-   * @return a copy of this data file, without lower bounds, upper bounds, value counts, or null value counts\n+   * @return a copy of this data file, without lower bounds, upper bounds, value counts,\n+   * null value counts, or nan value counts", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d19cc51a5a2082777b9283208c4d030e9bcae5c8"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxMzkzNTM4OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/apache/iceberg/BaseFile.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QwMTowMTo0MlrOH39Cow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QwMTowMTo0MlrOH39Cow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODQzMzgyNw==", "bodyText": "nit: can we keep the existing lines the same?", "url": "https://github.com/apache/iceberg/pull/1803#discussion_r528433827", "createdAt": "2020-11-23T01:01:42Z", "author": {"login": "jackye1995"}, "path": "core/src/main/java/org/apache/iceberg/BaseFile.java", "diffHunk": "@@ -116,8 +117,8 @@ public PartitionData copy() {\n   }\n \n   BaseFile(int specId, FileContent content, String filePath, FileFormat format,\n-           PartitionData partition, long fileSizeInBytes, long recordCount,\n-           Map<Integer, Long> columnSizes, Map<Integer, Long> valueCounts, Map<Integer, Long> nullValueCounts,\n+           PartitionData partition, long fileSizeInBytes, long recordCount, Map<Integer, Long> columnSizes,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d19cc51a5a2082777b9283208c4d030e9bcae5c8"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxMzkzOTIwOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/apache/iceberg/V1Metadata.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QwMTowNToxMVrOH39Eew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQyMzoxNTo0OFrOH5cD7g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODQzNDI5OQ==", "bodyText": "what is this change for?", "url": "https://github.com/apache/iceberg/pull/1803#discussion_r528434299", "createdAt": "2020-11-23T01:05:11Z", "author": {"login": "jackye1995"}, "path": "core/src/main/java/org/apache/iceberg/V1Metadata.java", "diffHunk": "@@ -356,7 +356,7 @@ public Object get(int pos) {\n \n     @Override\n     public void put(int i, Object v) {\n-      throw new UnsupportedOperationException(\"Cannot read into IndexedDataFile\");\n+      throw new UnsupportedOperationException(\"Cannot write into IndexedDataFile\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d19cc51a5a2082777b9283208c4d030e9bcae5c8"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODkyMzcwMw==", "bodyText": "I think this read was a typo, unless I misunderstood this?", "url": "https://github.com/apache/iceberg/pull/1803#discussion_r528923703", "createdAt": "2020-11-23T18:50:49Z", "author": {"login": "yyanyy"}, "path": "core/src/main/java/org/apache/iceberg/V1Metadata.java", "diffHunk": "@@ -356,7 +356,7 @@ public Object get(int pos) {\n \n     @Override\n     public void put(int i, Object v) {\n-      throw new UnsupportedOperationException(\"Cannot read into IndexedDataFile\");\n+      throw new UnsupportedOperationException(\"Cannot write into IndexedDataFile\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODQzNDI5OQ=="}, "originalCommit": {"oid": "d19cc51a5a2082777b9283208c4d030e9bcae5c8"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTA5MDYyNw==", "bodyText": "This was correct before.\nThis class is only used to write v1 metadata files, not to read. So there is no need to implement the put method that is used when reading values from a file and putting them in the data file instance.", "url": "https://github.com/apache/iceberg/pull/1803#discussion_r529090627", "createdAt": "2020-11-24T00:48:33Z", "author": {"login": "rdblue"}, "path": "core/src/main/java/org/apache/iceberg/V1Metadata.java", "diffHunk": "@@ -356,7 +356,7 @@ public Object get(int pos) {\n \n     @Override\n     public void put(int i, Object v) {\n-      throw new UnsupportedOperationException(\"Cannot read into IndexedDataFile\");\n+      throw new UnsupportedOperationException(\"Cannot write into IndexedDataFile\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODQzNDI5OQ=="}, "originalCommit": {"oid": "d19cc51a5a2082777b9283208c4d030e9bcae5c8"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTk5MDYzOA==", "bodyText": "Ah I see, it was \"read into\" to populate IndexedDataFile, makes sense. I'll revert this back.", "url": "https://github.com/apache/iceberg/pull/1803#discussion_r529990638", "createdAt": "2020-11-24T23:15:48Z", "author": {"login": "yyanyy"}, "path": "core/src/main/java/org/apache/iceberg/V1Metadata.java", "diffHunk": "@@ -356,7 +356,7 @@ public Object get(int pos) {\n \n     @Override\n     public void put(int i, Object v) {\n-      throw new UnsupportedOperationException(\"Cannot read into IndexedDataFile\");\n+      throw new UnsupportedOperationException(\"Cannot write into IndexedDataFile\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODQzNDI5OQ=="}, "originalCommit": {"oid": "d19cc51a5a2082777b9283208c4d030e9bcae5c8"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxMzk0MjY1OnYy", "diffSide": "LEFT", "path": "spark/src/test/java/org/apache/iceberg/TestDataFileSerialization.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QwMTowODo1N1rOH39GKA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxODo1MTo1MVrOH4a-zA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODQzNDcyOA==", "bodyText": "why are we modifying this line instead of adding a new line?", "url": "https://github.com/apache/iceberg/pull/1803#discussion_r528434728", "createdAt": "2020-11-23T01:08:57Z", "author": {"login": "jackye1995"}, "path": "spark/src/test/java/org/apache/iceberg/TestDataFileSerialization.java", "diffHunk": "@@ -68,14 +69,16 @@\n \n   private static final Map<Integer, Long> VALUE_COUNTS = Maps.newHashMap();\n   private static final Map<Integer, Long> NULL_VALUE_COUNTS = Maps.newHashMap();\n+  private static final Map<Integer, Long> NAN_VALUE_COUNTS = Maps.newHashMap();\n   private static final Map<Integer, ByteBuffer> LOWER_BOUNDS = Maps.newHashMap();\n   private static final Map<Integer, ByteBuffer> UPPER_BOUNDS = Maps.newHashMap();\n \n   static {\n     VALUE_COUNTS.put(1, 5L);\n     VALUE_COUNTS.put(2, 3L);\n+    VALUE_COUNTS.put(4, 2L);\n     NULL_VALUE_COUNTS.put(1, 0L);\n-    NULL_VALUE_COUNTS.put(2, 2L);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d19cc51a5a2082777b9283208c4d030e9bcae5c8"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODkyNDM2NA==", "bodyText": "Oh good catch, I guess I thought I duplicated the line myself but seems like it was from the original code; I'll add it back", "url": "https://github.com/apache/iceberg/pull/1803#discussion_r528924364", "createdAt": "2020-11-23T18:51:51Z", "author": {"login": "yyanyy"}, "path": "spark/src/test/java/org/apache/iceberg/TestDataFileSerialization.java", "diffHunk": "@@ -68,14 +69,16 @@\n \n   private static final Map<Integer, Long> VALUE_COUNTS = Maps.newHashMap();\n   private static final Map<Integer, Long> NULL_VALUE_COUNTS = Maps.newHashMap();\n+  private static final Map<Integer, Long> NAN_VALUE_COUNTS = Maps.newHashMap();\n   private static final Map<Integer, ByteBuffer> LOWER_BOUNDS = Maps.newHashMap();\n   private static final Map<Integer, ByteBuffer> UPPER_BOUNDS = Maps.newHashMap();\n \n   static {\n     VALUE_COUNTS.put(1, 5L);\n     VALUE_COUNTS.put(2, 3L);\n+    VALUE_COUNTS.put(4, 2L);\n     NULL_VALUE_COUNTS.put(1, 0L);\n-    NULL_VALUE_COUNTS.put(2, 2L);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODQzNDcyOA=="}, "originalCommit": {"oid": "d19cc51a5a2082777b9283208c4d030e9bcae5c8"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxODI2MDQ4OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/apache/iceberg/DataFile.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQwMDo0NTowMVrOH4lDiA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQwMDo0NTowMVrOH4lDiA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTA4OTQxNg==", "bodyText": "Could you move this up by NULL_VALUE_COUNTS?", "url": "https://github.com/apache/iceberg/pull/1803#discussion_r529089416", "createdAt": "2020-11-24T00:45:01Z", "author": {"login": "rdblue"}, "path": "api/src/main/java/org/apache/iceberg/DataFile.java", "diffHunk": "@@ -59,10 +60,13 @@\n       \"Splittable offsets\");\n   Types.NestedField EQUALITY_IDS = optional(135, \"equality_ids\", ListType.ofRequired(136, IntegerType.get()),\n       \"Equality comparison field IDs\");\n+  Types.NestedField NAN_VALUE_COUNTS = optional(137, \"nan_value_counts\", MapType.ofRequired(138, 139,\n+      IntegerType.get(), LongType.get()), \"Map of column id to number of NaN values in the column\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c3298b41d9cd9d94701c7952d567091649d43764"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxODI2MjAxOnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/apache/iceberg/DataFile.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQwMDo0NTozN1rOH4lEbA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQwMDo0NTozN1rOH4lEbA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTA4OTY0NA==", "bodyText": "I think we should place this field just after null counts.", "url": "https://github.com/apache/iceberg/pull/1803#discussion_r529089644", "createdAt": "2020-11-24T00:45:37Z", "author": {"login": "rdblue"}, "path": "api/src/main/java/org/apache/iceberg/DataFile.java", "diffHunk": "@@ -80,7 +84,8 @@ static StructType getType(StructType partitionType) {\n         UPPER_BOUNDS,\n         KEY_METADATA,\n         SPLIT_OFFSETS,\n-        EQUALITY_IDS\n+        EQUALITY_IDS,\n+        NAN_VALUE_COUNTS", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c3298b41d9cd9d94701c7952d567091649d43764"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxODI2MzIzOnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/apache/iceberg/DataFile.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQwMDo0NjoxNFrOH4lFQw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQyMzoxNjozM1rOH5cHBQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTA4OTg1OQ==", "bodyText": "I think all of the implementations will provide this method, so there should be no need for the default, right?", "url": "https://github.com/apache/iceberg/pull/1803#discussion_r529089859", "createdAt": "2020-11-24T00:46:14Z", "author": {"login": "rdblue"}, "path": "api/src/main/java/org/apache/iceberg/DataFile.java", "diffHunk": "@@ -96,4 +101,9 @@ default FileContent content() {\n   default List<Integer> equalityFieldIds() {\n     return null;\n   }\n+\n+  @Override\n+  default Map<Integer, Long> nanValueCounts() {\n+    return null;\n+  }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c3298b41d9cd9d94701c7952d567091649d43764"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTk5MTQyOQ==", "bodyText": "Originally since V1 doesn't have this so it was used there, but as we are going to support it, I'll remove it.", "url": "https://github.com/apache/iceberg/pull/1803#discussion_r529991429", "createdAt": "2020-11-24T23:16:33Z", "author": {"login": "yyanyy"}, "path": "api/src/main/java/org/apache/iceberg/DataFile.java", "diffHunk": "@@ -96,4 +101,9 @@ default FileContent content() {\n   default List<Integer> equalityFieldIds() {\n     return null;\n   }\n+\n+  @Override\n+  default Map<Integer, Long> nanValueCounts() {\n+    return null;\n+  }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTA4OTg1OQ=="}, "originalCommit": {"oid": "c3298b41d9cd9d94701c7952d567091649d43764"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxODI2OTMzOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/apache/iceberg/V2Metadata.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQwMDo0OToxMlrOH4lJJQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQwMDo0OToxMlrOH4lJJQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTA5MDg1Mw==", "bodyText": "Similar to above, I think we should add NaN value counts just below null value counts. This will affect the ordinals in get so you'll have to update them.", "url": "https://github.com/apache/iceberg/pull/1803#discussion_r529090853", "createdAt": "2020-11-24T00:49:12Z", "author": {"login": "rdblue"}, "path": "core/src/main/java/org/apache/iceberg/V2Metadata.java", "diffHunk": "@@ -254,7 +254,8 @@ static Schema wrapFileSchema(Types.StructType fileSchema) {\n         DataFile.UPPER_BOUNDS,\n         DataFile.KEY_METADATA,\n         DataFile.SPLIT_OFFSETS,\n-        DataFile.EQUALITY_IDS\n+        DataFile.EQUALITY_IDS,\n+        DataFile.NAN_VALUE_COUNTS", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c3298b41d9cd9d94701c7952d567091649d43764"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxODI3NTAyOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/apache/iceberg/V1Metadata.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQwMDo1MTo1NVrOH4lMuA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQyMzoxNzo1NlrOH5cMGQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTA5MTc2OA==", "bodyText": "This doesn't add NaN counts to v1 metadata, but there's no reason why we can't. Adding a new column to v1 metadata files is forward compatible and is allowed, so we can go ahead and add it here. That way, even v1 benefits.\nThe reason why this is a v2 feature is that we are creating additional requirements for writers: NaN must not be written as a lower or upper bound in Iceberg metadata. Writers that want to write NaN counts in v1 should be able to do so.", "url": "https://github.com/apache/iceberg/pull/1803#discussion_r529091768", "createdAt": "2020-11-24T00:51:55Z", "author": {"login": "rdblue"}, "path": "core/src/main/java/org/apache/iceberg/V1Metadata.java", "diffHunk": "@@ -356,7 +356,7 @@ public Object get(int pos) {\n \n     @Override\n     public void put(int i, Object v) {\n-      throw new UnsupportedOperationException(\"Cannot read into IndexedDataFile\");\n+      throw new UnsupportedOperationException(\"Cannot write into IndexedDataFile\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c3298b41d9cd9d94701c7952d567091649d43764"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTk5MjcyOQ==", "bodyText": "Sure! I wasn't sure if I wanted to add it v1 since v1 was an established version, and I don't know if introducing new attributes would be considered as breaking people's assumption on the file contract (e.g. if some people have their own version of manifest entry parser). But I guess the chance of this happening would probably be rare, and should be easy to fix.", "url": "https://github.com/apache/iceberg/pull/1803#discussion_r529992729", "createdAt": "2020-11-24T23:17:56Z", "author": {"login": "yyanyy"}, "path": "core/src/main/java/org/apache/iceberg/V1Metadata.java", "diffHunk": "@@ -356,7 +356,7 @@ public Object get(int pos) {\n \n     @Override\n     public void put(int i, Object v) {\n-      throw new UnsupportedOperationException(\"Cannot read into IndexedDataFile\");\n+      throw new UnsupportedOperationException(\"Cannot write into IndexedDataFile\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTA5MTc2OA=="}, "originalCommit": {"oid": "c3298b41d9cd9d94701c7952d567091649d43764"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxODI4MTAzOnYy", "diffSide": "RIGHT", "path": "core/src/test/java/org/apache/iceberg/TestManifestWriterVersions.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQwMDo1NDo0MVrOH4lQTg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQyMzoxODowNFrOH5cMhQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTA5MjY4Ng==", "bodyText": "Typo: // NaN value counts", "url": "https://github.com/apache/iceberg/pull/1803#discussion_r529092686", "createdAt": "2020-11-24T00:54:41Z", "author": {"login": "rdblue"}, "path": "core/src/test/java/org/apache/iceberg/TestManifestWriterVersions.java", "diffHunk": "@@ -60,9 +61,10 @@\n   private static final PartitionData PARTITION = DataFiles.data(SPEC, \"category=cheesy/timestamp_hour=10/id_bucket=3\");\n   private static final Metrics METRICS = new Metrics(\n       1587L,\n-      ImmutableMap.of(1, 15L, 2, 122L, 3, 4021L, 4, 9411L), // sizes\n-      ImmutableMap.of(1, 100L, 2, 100L, 3, 100L, 4, 100L),  // value counts\n-      ImmutableMap.of(1, 0L, 2, 0L, 3, 0L, 4, 0L),          // null value counts\n+      ImmutableMap.of(1, 15L, 2, 122L, 3, 4021L, 4, 9411L, 5, 15L), // sizes\n+      ImmutableMap.of(1, 100L, 2, 100L, 3, 100L, 4, 100L, 5, 100L),  // value counts\n+      ImmutableMap.of(1, 0L, 2, 0L, 3, 0L, 4, 0L, 5, 0L), // null value counts\n+      ImmutableMap.of(5, 10L), // null value counts", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c3298b41d9cd9d94701c7952d567091649d43764"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTk5MjgzNw==", "bodyText": "Ah thanks for the catch!", "url": "https://github.com/apache/iceberg/pull/1803#discussion_r529992837", "createdAt": "2020-11-24T23:18:04Z", "author": {"login": "yyanyy"}, "path": "core/src/test/java/org/apache/iceberg/TestManifestWriterVersions.java", "diffHunk": "@@ -60,9 +61,10 @@\n   private static final PartitionData PARTITION = DataFiles.data(SPEC, \"category=cheesy/timestamp_hour=10/id_bucket=3\");\n   private static final Metrics METRICS = new Metrics(\n       1587L,\n-      ImmutableMap.of(1, 15L, 2, 122L, 3, 4021L, 4, 9411L), // sizes\n-      ImmutableMap.of(1, 100L, 2, 100L, 3, 100L, 4, 100L),  // value counts\n-      ImmutableMap.of(1, 0L, 2, 0L, 3, 0L, 4, 0L),          // null value counts\n+      ImmutableMap.of(1, 15L, 2, 122L, 3, 4021L, 4, 9411L, 5, 15L), // sizes\n+      ImmutableMap.of(1, 100L, 2, 100L, 3, 100L, 4, 100L, 5, 100L),  // value counts\n+      ImmutableMap.of(1, 0L, 2, 0L, 3, 0L, 4, 0L, 5, 0L), // null value counts\n+      ImmutableMap.of(5, 10L), // null value counts", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTA5MjY4Ng=="}, "originalCommit": {"oid": "c3298b41d9cd9d94701c7952d567091649d43764"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxODI4MjI3OnYy", "diffSide": "RIGHT", "path": "core/src/test/java/org/apache/iceberg/TestManifestWriterVersions.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQwMDo1NToxNFrOH4lRCQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQwMDo1NToxNFrOH4lRCQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTA5Mjg3Mw==", "bodyText": "I think writing NaN counts in v1 will probably simplify the test updates here.", "url": "https://github.com/apache/iceberg/pull/1803#discussion_r529092873", "createdAt": "2020-11-24T00:55:14Z", "author": {"login": "rdblue"}, "path": "core/src/test/java/org/apache/iceberg/TestManifestWriterVersions.java", "diffHunk": "@@ -203,6 +208,11 @@ void checkDataFile(ContentFile<?> dataFile, FileContent content) {\n     } else {\n       Assert.assertNull(dataFile.equalityFieldIds());\n     }\n+    if (hasNaNCount) {\n+      Assert.assertEquals(\"NaN\", METRICS.nanValueCounts(), dataFile.nanValueCounts());\n+    } else {\n+      Assert.assertNull(\"NaN\", dataFile.nanValueCounts());\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c3298b41d9cd9d94701c7952d567091649d43764"}, "originalPosition": 130}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxODI4NTAwOnYy", "diffSide": "RIGHT", "path": "core/src/test/java/org/apache/iceberg/TestMetrics.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQwMDo1NjozNVrOH4lSqw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQwMDo0OToxN1rOH5e6ng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTA5MzI5MQ==", "bodyText": "Why are NaN values getting into the lower and upper bounds?", "url": "https://github.com/apache/iceberg/pull/1803#discussion_r529093291", "createdAt": "2020-11-24T00:56:35Z", "author": {"login": "rdblue"}, "path": "core/src/test/java/org/apache/iceberg/TestMetrics.java", "diffHunk": "@@ -272,6 +273,8 @@ public void testMetricsForNestedStructFields() throws IOException {\n     assertCounts(6, 1L, 0L, metrics);\n     assertBounds(6, BinaryType.get(),\n         ByteBuffer.wrap(\"A\".getBytes()), ByteBuffer.wrap(\"A\".getBytes()), metrics);\n+    assertCounts(7, 1L, 0L, 1L, metrics);\n+    assertBounds(7, DoubleType.get(), Double.NaN, Double.NaN, metrics);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c3298b41d9cd9d94701c7952d567091649d43764"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTk5MzE2Mg==", "bodyText": "This was because I added NaN as the only value in this column during the creation of the record in buildNestedTestRecord, and currently this will result in upper and lower bound being both NaN (similar behavior as in this test. I added this extra column in order to test NaN handling in metrics modes, and change to this test was a side effect. Do you want me to remove the bound check in this test?", "url": "https://github.com/apache/iceberg/pull/1803#discussion_r529993162", "createdAt": "2020-11-24T23:18:23Z", "author": {"login": "yyanyy"}, "path": "core/src/test/java/org/apache/iceberg/TestMetrics.java", "diffHunk": "@@ -272,6 +273,8 @@ public void testMetricsForNestedStructFields() throws IOException {\n     assertCounts(6, 1L, 0L, metrics);\n     assertBounds(6, BinaryType.get(),\n         ByteBuffer.wrap(\"A\".getBytes()), ByteBuffer.wrap(\"A\".getBytes()), metrics);\n+    assertCounts(7, 1L, 0L, 1L, metrics);\n+    assertBounds(7, DoubleType.get(), Double.NaN, Double.NaN, metrics);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTA5MzI5MQ=="}, "originalCommit": {"oid": "c3298b41d9cd9d94701c7952d567091649d43764"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDAzNzQwNg==", "bodyText": "So I guess this will continue to happen until we ignore NaN values and keep track of the lower and upper bounds ourselves for Parquet and ORC?\nThis is fine for now, but I would want this to be correct eventually.", "url": "https://github.com/apache/iceberg/pull/1803#discussion_r530037406", "createdAt": "2020-11-25T00:49:17Z", "author": {"login": "rdblue"}, "path": "core/src/test/java/org/apache/iceberg/TestMetrics.java", "diffHunk": "@@ -272,6 +273,8 @@ public void testMetricsForNestedStructFields() throws IOException {\n     assertCounts(6, 1L, 0L, metrics);\n     assertBounds(6, BinaryType.get(),\n         ByteBuffer.wrap(\"A\".getBytes()), ByteBuffer.wrap(\"A\".getBytes()), metrics);\n+    assertCounts(7, 1L, 0L, 1L, metrics);\n+    assertBounds(7, DoubleType.get(), Double.NaN, Double.NaN, metrics);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTA5MzI5MQ=="}, "originalCommit": {"oid": "c3298b41d9cd9d94701c7952d567091649d43764"}, "originalPosition": 15}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3146, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}