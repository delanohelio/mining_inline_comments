{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTMxODAwMTI5", "number": 1867, "title": "Core: Add RollingEqDeleteWriter.", "bodyText": "This is a sub-PR for this issue: https://github.com/apache/iceberg/pull/1818/files#diff-fc9a9fd84d24c607fd85e053b08a559f56dd2dd2a46f1341c528e7a0269f873cR183.   It's mainly used for abstracting the BaseRollingWriter.  We've provided the RollingFileWriter to write data records and RollingEqDeleteWriter to write equality-delete records in this patch, and provide complete unit tests to cover those.", "createdAt": "2020-12-03T14:03:04Z", "url": "https://github.com/apache/iceberg/pull/1867", "merged": true, "mergeCommit": {"oid": "a5a7f1937a036bfbd7848b0009545d3cca700adc"}, "closed": true, "closedAt": "2020-12-07T19:30:38Z", "author": {"login": "openinx"}, "timelineItems": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdijmKIgH2gAyNTMxODAwMTI5OjQxNmE4NGYxZjZlNjkxNjU3Zjc1ZjM1YjkzYTMwMDI4Yjk3YjNhNTQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdjt5UNgH2gAyNTMxODAwMTI5OjdjNTNjZDMyOWZiZTgzNDgyNjk4Njg0NzQyNzIzMmMwMTI0ZmQwYWI=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "416a84f1f6e691657f75f35b93a30028b97b3a54", "author": {"user": {"login": "openinx", "name": "openinx"}}, "url": "https://github.com/apache/iceberg/commit/416a84f1f6e691657f75f35b93a30028b97b3a54", "committedDate": "2020-12-03T13:59:01Z", "message": "Core: Add RollingEqDeleteWriter."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ0NTk4NjI5", "url": "https://github.com/apache/iceberg/pull/1867#pullrequestreview-544598629", "createdAt": "2020-12-04T01:45:39Z", "commit": {"oid": "416a84f1f6e691657f75f35b93a30028b97b3a54"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQwMTo0NTozOVrOH-9F1Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQwMTo0NTozOVrOH-9F1Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTc3NDY3Nw==", "bodyText": "Just curious, is there a use case for wanting data/delete files after aborting the writer?", "url": "https://github.com/apache/iceberg/pull/1867#discussion_r535774677", "createdAt": "2020-12-04T01:45:39Z", "author": {"login": "yyanyy"}, "path": "data/src/test/java/org/apache/iceberg/io/TestBaseTaskWriter.java", "diffHunk": "@@ -0,0 +1,255 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.io;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.stream.Collectors;\n+import org.apache.iceberg.DataFile;\n+import org.apache.iceberg.DeleteFile;\n+import org.apache.iceberg.FileFormat;\n+import org.apache.iceberg.PartitionSpec;\n+import org.apache.iceberg.RowDelta;\n+import org.apache.iceberg.TableTestBase;\n+import org.apache.iceberg.data.GenericAppenderFactory;\n+import org.apache.iceberg.data.GenericRecord;\n+import org.apache.iceberg.data.IcebergGenerics;\n+import org.apache.iceberg.data.Record;\n+import org.apache.iceberg.relocated.com.google.common.collect.Lists;\n+import org.apache.iceberg.util.StructLikeSet;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n+\n+@RunWith(Parameterized.class)\n+public class TestBaseTaskWriter extends TableTestBase {\n+  private static final int FORMAT_V2 = 2;\n+\n+  private final FileFormat format;\n+  private final GenericRecord gRecord = GenericRecord.create(SCHEMA);\n+\n+  private OutputFileFactory fileFactory = null;\n+  private FileAppenderFactory<Record> appenderFactory = null;\n+\n+  @Parameterized.Parameters(name = \"FileFormat = {0}\")\n+  public static Object[][] parameters() {\n+    return new Object[][] {\n+        {\"avro\"},\n+        {\"parquet\"}\n+    };\n+  }\n+\n+  public TestBaseTaskWriter(String fileFormat) {\n+    super(FORMAT_V2);\n+    this.format = FileFormat.valueOf(fileFormat.toUpperCase(Locale.ENGLISH));\n+  }\n+\n+  @Before\n+  public void setupTable() throws IOException {\n+    this.tableDir = temp.newFolder();\n+    Assert.assertTrue(tableDir.delete()); // created by table create\n+\n+    this.metadataDir = new File(tableDir, \"metadata\");\n+\n+    this.table = create(SCHEMA, PartitionSpec.unpartitioned());\n+    this.fileFactory = new OutputFileFactory(table.spec(), format, table.locationProvider(), table.io(),\n+        table.encryption(), 1, 1);\n+\n+    int firstFieldId = table.schema().findField(\"id\").fieldId();\n+    int secondFieldId = table.schema().findField(\"data\").fieldId();\n+    this.appenderFactory = new GenericAppenderFactory(table.schema(), table.spec(),\n+        new int[] {firstFieldId, secondFieldId}, table.schema(), null);\n+\n+    table.updateProperties()\n+        .defaultFormat(format)\n+        .commit();\n+  }\n+\n+  private Record createRecord(Integer id, String data) {\n+    return gRecord.copy(\"id\", id, \"data\", data);\n+  }\n+\n+  @Test\n+  public void testWriteZeroRecord() throws IOException {\n+    try (TestTaskWriter writer = createTaskWriter(128 * 1024 * 1024)) {\n+      writer.close();\n+\n+      WriteResult result = writer.complete();\n+      Assert.assertEquals(0, result.dataFiles().length);\n+      Assert.assertEquals(0, result.deleteFiles().length);\n+\n+      writer.close();\n+      result = writer.complete();\n+      Assert.assertEquals(0, result.dataFiles().length);\n+      Assert.assertEquals(0, result.deleteFiles().length);\n+    }\n+  }\n+\n+  @Test\n+  public void testAbort() throws IOException {\n+    List<Record> records = Lists.newArrayList();\n+    for (int i = 0; i < 2000; i++) {\n+      records.add(createRecord(i, \"aaa\"));\n+    }\n+\n+    WriteResult result;\n+    try (TestTaskWriter taskWriter = createTaskWriter(4)) {\n+      for (Record record : records) {\n+        taskWriter.write(record);\n+        taskWriter.delete(record);\n+      }\n+\n+      // Close the current opened files.\n+      taskWriter.close();\n+\n+      // Assert the current data file count.\n+      List<Path> files = Files.list(Paths.get(tableDir.getPath(), \"data\"))\n+          .filter(p -> !p.toString().endsWith(\".crc\"))\n+          .collect(Collectors.toList());\n+      Assert.assertEquals(\"Should have 4 files but the files are: \" + files, 4, files.size());\n+\n+      // Abort to clean all delete files and data files.\n+      taskWriter.abort();\n+\n+      // Complete again to get all results.\n+      result = taskWriter.complete();\n+    }\n+    Assert.assertEquals(2, result.deleteFiles().length);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "416a84f1f6e691657f75f35b93a30028b97b3a54"}, "originalPosition": 142}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ1NjYwMzg0", "url": "https://github.com/apache/iceberg/pull/1867#pullrequestreview-545660384", "createdAt": "2020-12-06T00:42:29Z", "commit": {"oid": "416a84f1f6e691657f75f35b93a30028b97b3a54"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNlQwMDo0MjozMFrOIADLiQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNlQwMDo0MjozMFrOIADLiQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjkyMzAxNw==", "bodyText": "Until support is added to handle delete files, I think it would make sense to add a precondition to check that there are no delete files here.", "url": "https://github.com/apache/iceberg/pull/1867#discussion_r536923017", "createdAt": "2020-12-06T00:42:30Z", "author": {"login": "rdblue"}, "path": "flink/src/main/java/org/apache/iceberg/flink/sink/IcebergStreamWriter.java", "diffHunk": "@@ -62,7 +62,7 @@ public void open() {\n   @Override\n   public void prepareSnapshotPreBarrier(long checkpointId) throws Exception {\n     // close all open files and emit files to downstream committer operator\n-    for (DataFile dataFile : writer.complete()) {\n+    for (DataFile dataFile : writer.complete().dataFiles()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "416a84f1f6e691657f75f35b93a30028b97b3a54"}, "originalPosition": 5}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ1NjYwNjA4", "url": "https://github.com/apache/iceberg/pull/1867#pullrequestreview-545660608", "createdAt": "2020-12-06T00:48:10Z", "commit": {"oid": "416a84f1f6e691657f75f35b93a30028b97b3a54"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "323573a5f23fa15a87abf0ce2232f466abb47f4e", "author": {"user": {"login": "openinx", "name": "openinx"}}, "url": "https://github.com/apache/iceberg/commit/323573a5f23fa15a87abf0ce2232f466abb47f4e", "committedDate": "2020-12-07T04:08:42Z", "message": "Avoid calling complete after abort."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7c53cd329fbe834826986847427232c0124fd0ab", "author": {"user": {"login": "openinx", "name": "openinx"}}, "url": "https://github.com/apache/iceberg/commit/7c53cd329fbe834826986847427232c0124fd0ab", "committedDate": "2020-12-07T04:32:55Z", "message": "Addressing comments."}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3496, "cost": 1, "resetAt": "2021-10-29T19:57:52Z"}}}