{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY5OTU1NDgy", "number": 766, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wMlQyMjowNDoxNlrODcfcoA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQxOTozMTowMlrODddHKA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxMjAxOTUyOnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/apache/iceberg/expressions/ResidualEvaluator.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wMlQyMjowNDoxNlrOFkjw_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wMlQyMjowNDoxNlrOFkjw_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzg3OTAzNg==", "bodyText": "The literal set can handle all types, so this can use contains instead of checking each value individually.", "url": "https://github.com/apache/iceberg/pull/766#discussion_r373879036", "createdAt": "2020-02-02T22:04:16Z", "author": {"login": "rdblue"}, "path": "api/src/main/java/org/apache/iceberg/expressions/ResidualEvaluator.java", "diffHunk": "@@ -195,6 +196,26 @@ public Expression or(Expression leftResult, Expression rightResult) {\n       return (cmp.compare(ref.eval(struct), lit.value()) != 0) ? alwaysTrue() : alwaysFalse();\n     }\n \n+    @Override\n+    public <T> Expression in(BoundReference<T> ref, Set<T> literalSet) {\n+      T val = ref.eval(struct);\n+      if (literalSet.stream().anyMatch(lit -> ref.comparator().compare(val, lit) == 0)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6a66dcdad8b38d28c7cc23c02eaf3e37df47e013"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxMjAyMTM4OnYy", "diffSide": "RIGHT", "path": "api/src/test/java/org/apache/iceberg/transforms/TestResiduals.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wMlQyMjowNzo1MFrOFkjx8g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wMlQyMjowNzo1MFrOFkjx8g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzg3OTI4Mg==", "bodyText": "Can you also add cases to testUnpartitionedResiduals?", "url": "https://github.com/apache/iceberg/pull/766#discussion_r373879282", "createdAt": "2020-02-02T22:07:50Z", "author": {"login": "rdblue"}, "path": "api/src/test/java/org/apache/iceberg/transforms/TestResiduals.java", "diffHunk": "@@ -156,4 +158,46 @@ public void testUnpartitionedResiduals() {\n           expr, residualEvaluator.residualFor(Row.of()));\n     }\n   }\n+\n+  @Test", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6a66dcdad8b38d28c7cc23c02eaf3e37df47e013"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxMjAyNDYxOnYy", "diffSide": "RIGHT", "path": "api/src/test/java/org/apache/iceberg/transforms/TestResiduals.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wMlQyMjoxNDozMFrOFkjztQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wMlQyMjoxNDozMFrOFkjztQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzg3OTczMw==", "bodyText": "Can you also add tests for in and notIn with a timestamp (ts column) to date transform (day)?\nFor the in case, the residual for a date that contains one of the timestamps should be the original in predicate. If the date doesn't match one of the in predicate timestamp values, then it should be alwaysFalse. For notIn, if the date matches it should be the original notIn predicate and if it does not match, it should be alwaysTrue.", "url": "https://github.com/apache/iceberg/pull/766#discussion_r373879733", "createdAt": "2020-02-02T22:14:30Z", "author": {"login": "rdblue"}, "path": "api/src/test/java/org/apache/iceberg/transforms/TestResiduals.java", "diffHunk": "@@ -156,4 +158,46 @@ public void testUnpartitionedResiduals() {\n           expr, residualEvaluator.residualFor(Row.of()));\n     }\n   }\n+\n+  @Test\n+  public void testIn() {\n+    Schema schema = new Schema(\n+        Types.NestedField.optional(50, \"dateint\", Types.IntegerType.get()),\n+        Types.NestedField.optional(51, \"hour\", Types.IntegerType.get())\n+    );\n+\n+    PartitionSpec spec = PartitionSpec.builderFor(schema)\n+        .identity(\"dateint\")\n+        .build();\n+\n+    ResidualEvaluator resEval = ResidualEvaluator.of(spec,\n+        in(\"dateint\", 20170815, 20170816, 20170817), true);\n+\n+    Expression residual = resEval.residualFor(Row.of(20170815));\n+    Assert.assertEquals(\"Residual should be alwaysTrue\", alwaysTrue(), residual);\n+\n+    residual = resEval.residualFor(Row.of(20180815));\n+    Assert.assertEquals(\"Residual should be alwaysFalse\", alwaysFalse(), residual);\n+  }\n+\n+  @Test\n+  public void testNotIn() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6a66dcdad8b38d28c7cc23c02eaf3e37df47e013"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyMjEyMjY0OnYy", "diffSide": "RIGHT", "path": "api/src/test/java/org/apache/iceberg/transforms/TestResiduals.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQxOTozMTowMlrOFmEbkQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQxOTozMTowMlrOFmEbkQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTQ2MjgwMQ==", "bodyText": "Nit: This doesn't require a newline.", "url": "https://github.com/apache/iceberg/pull/766#discussion_r375462801", "createdAt": "2020-02-05T19:31:02Z", "author": {"login": "rdblue"}, "path": "api/src/test/java/org/apache/iceberg/transforms/TestResiduals.java", "diffHunk": "@@ -156,4 +162,106 @@ public void testUnpartitionedResiduals() {\n           expr, residualEvaluator.residualFor(Row.of()));\n     }\n   }\n+\n+  @Test\n+  public void testIn() {\n+    Schema schema = new Schema(\n+        Types.NestedField.optional(50, \"dateint\", Types.IntegerType.get()),\n+        Types.NestedField.optional(51, \"hour\", Types.IntegerType.get())\n+    );\n+\n+    PartitionSpec spec = PartitionSpec.builderFor(schema)\n+        .identity(\"dateint\")\n+        .build();\n+\n+    ResidualEvaluator resEval = ResidualEvaluator.of(spec,\n+        in(\"dateint\", 20170815, 20170816, 20170817), true);\n+\n+    Expression residual = resEval.residualFor(Row.of(20170815));\n+    Assert.assertEquals(\"Residual should be alwaysTrue\", alwaysTrue(), residual);\n+\n+    residual = resEval.residualFor(Row.of(20180815));\n+    Assert.assertEquals(\"Residual should be alwaysFalse\", alwaysFalse(), residual);\n+  }\n+\n+  @Test\n+  public void testInTimestamp() {\n+    Schema schema = new Schema(\n+        Types.NestedField.optional(50, \"ts\", Types.TimestampType.withoutZone()),\n+        Types.NestedField.optional(51, \"dateint\", Types.IntegerType.get())\n+    );\n+\n+    Long date20191201 = (Long) Literal.of(\"2019-12-01T00:00:00.00000\")\n+        .to(Types.TimestampType.withoutZone()).value();\n+    Long date20191202 = (Long) Literal.of(\"2019-12-02T00:00:00.00000\")\n+        .to(Types.TimestampType.withoutZone()).value();\n+\n+    PartitionSpec spec = PartitionSpec.builderFor(schema)\n+        .day(\"ts\")\n+        .build();\n+\n+    Transform day = spec.getFieldsBySourceId(50).get(0).transform();\n+    Integer tsDay = (Integer) day.apply(date20191201);\n+\n+    Predicate pred = in(\"ts\", date20191201, date20191202);\n+    ResidualEvaluator resEval = ResidualEvaluator.of(spec,\n+        pred, true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e586ad404bf298c2779f90015aa3e250be8f1c17"}, "originalPosition": 77}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3002, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}