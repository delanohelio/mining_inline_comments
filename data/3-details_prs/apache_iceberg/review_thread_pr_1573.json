{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTAwODYyMTIw", "number": 1573, "reviewThreads": {"totalCount": 32, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQyMzo1MjowNFrOEsObIw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQyMDowMDowNlrOE2OGBw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0ODA5MTIzOnYy", "diffSide": "RIGHT", "path": "aws/src/main/java/org/apache/iceberg/aws/s3/S3InputStream.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQyMzo1MjowNFrOHfbU_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMFQwNDoyNTo0MVrOHfdE1Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjcxNTY0NQ==", "bodyText": "I believe this is another of our shaded dependencies, so we'll need to swap it for the relocated version", "url": "https://github.com/apache/iceberg/pull/1573#discussion_r502715645", "createdAt": "2020-10-09T23:52:04Z", "author": {"login": "RussellSpitzer"}, "path": "aws/src/main/java/org/apache/iceberg/aws/s3/S3InputStream.java", "diffHunk": "@@ -0,0 +1,146 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.aws.s3;\n+\n+import com.amazonaws.services.s3.AmazonS3;\n+import com.amazonaws.services.s3.AmazonS3URI;\n+import com.amazonaws.services.s3.model.GetObjectRequest;\n+import com.amazonaws.services.s3.model.S3ObjectInputStream;\n+import java.io.IOException;\n+import java.util.Arrays;\n+import org.apache.commons.compress.utils.IOUtils;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3f17216d3d3f08148dd74f6f86efd659b4ec8e97"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjcxNjY2NQ==", "bodyText": "<property name=\"illegalPkgs\" value=\"org.elasticsearch.common.base, com.clearspring.analytics.util, org.spark_project.guava, org.sparkproject.guava, org.glassfish.jersey.internal.guava, org.apache.commons.compress.utils\"/>\n            <message key=\"import.illegal\" value=\"Must not import repackaged classes.\"/>\n        </module>\n\nI think our message here is a little wrong in check style, but I believe we are avoiding importing Spark packaged classes?", "url": "https://github.com/apache/iceberg/pull/1573#discussion_r502716665", "createdAt": "2020-10-09T23:58:13Z", "author": {"login": "RussellSpitzer"}, "path": "aws/src/main/java/org/apache/iceberg/aws/s3/S3InputStream.java", "diffHunk": "@@ -0,0 +1,146 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.aws.s3;\n+\n+import com.amazonaws.services.s3.AmazonS3;\n+import com.amazonaws.services.s3.AmazonS3URI;\n+import com.amazonaws.services.s3.model.GetObjectRequest;\n+import com.amazonaws.services.s3.model.S3ObjectInputStream;\n+import java.io.IOException;\n+import java.util.Arrays;\n+import org.apache.commons.compress.utils.IOUtils;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjcxNTY0NQ=="}, "originalCommit": {"oid": "3f17216d3d3f08148dd74f6f86efd659b4ec8e97"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjc0NDI3Nw==", "bodyText": "Thanks for pointing this out.  I actually removed this dependency.", "url": "https://github.com/apache/iceberg/pull/1573#discussion_r502744277", "createdAt": "2020-10-10T04:25:41Z", "author": {"login": "danielcweeks"}, "path": "aws/src/main/java/org/apache/iceberg/aws/s3/S3InputStream.java", "diffHunk": "@@ -0,0 +1,146 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.aws.s3;\n+\n+import com.amazonaws.services.s3.AmazonS3;\n+import com.amazonaws.services.s3.AmazonS3URI;\n+import com.amazonaws.services.s3.model.GetObjectRequest;\n+import com.amazonaws.services.s3.model.S3ObjectInputStream;\n+import java.io.IOException;\n+import java.util.Arrays;\n+import org.apache.commons.compress.utils.IOUtils;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjcxNTY0NQ=="}, "originalCommit": {"oid": "3f17216d3d3f08148dd74f6f86efd659b4ec8e97"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0ODEyODY4OnYy", "diffSide": "RIGHT", "path": "aws/src/main/java/org/apache/iceberg/aws/s3/S3FileIO.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMFQwMDoyNDo1MFrOHfbovw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMFQwNDo1MDoyN1rOHfdMFg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjcyMDcwMw==", "bodyText": "Should this be a lazy client?\n  private transient AmazonS3 client;\n  public AmazonS3 client() {\n    if (client == null) {\n      this.client = s3.get();\n    }\n    return client;\n  }", "url": "https://github.com/apache/iceberg/pull/1573#discussion_r502720703", "createdAt": "2020-10-10T00:24:50Z", "author": {"login": "rdblue"}, "path": "aws/src/main/java/org/apache/iceberg/aws/s3/S3FileIO.java", "diffHunk": "@@ -0,0 +1,156 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.aws.s3;\n+\n+import com.amazonaws.services.s3.AmazonS3;\n+import com.amazonaws.services.s3.AmazonS3URI;\n+import com.amazonaws.services.s3.model.AmazonS3Exception;\n+import com.amazonaws.services.s3.model.ObjectMetadata;\n+import java.io.IOException;\n+import java.io.Serializable;\n+import java.util.Objects;\n+import org.apache.http.HttpStatus;\n+import org.apache.iceberg.io.FileIO;\n+import org.apache.iceberg.io.InputFile;\n+import org.apache.iceberg.io.OutputFile;\n+import org.apache.iceberg.io.PositionOutputStream;\n+import org.apache.iceberg.io.SeekableInputStream;\n+import org.apache.iceberg.util.SerializableSupplier;\n+\n+/**\n+ * FileIO implementation backed by S3.  Locations used must follow the conventions\n+ * for AmazonS3URIs (e.g. s3://bucket/path/..).\n+ */\n+public class S3FileIO implements FileIO, Serializable {\n+  private final SerializableSupplier<AmazonS3> s3;\n+\n+  public S3FileIO(SerializableSupplier<AmazonS3> s3) {\n+    this.s3 = s3;\n+  }\n+\n+  @Override\n+  public InputFile newInputFile(String path) {\n+    return new S3InputFile(new AmazonS3URI(path));\n+  }\n+\n+  @Override\n+  public OutputFile newOutputFile(String path) {\n+    return new S3OutputFile(new AmazonS3URI(path));\n+  }\n+\n+  @Override\n+  public void deleteFile(String path) {\n+    AmazonS3URI location = new AmazonS3URI(path);\n+    s3.get().deleteObject(location.getBucket(), location.getKey());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3f17216d3d3f08148dd74f6f86efd659b4ec8e97"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjc0NDE4Nw==", "bodyText": "That's probably true in a sense, but I had expected that to be done by the supplier.  Something we should consider as you may want different clients for different sources/buckets/roles, etc.", "url": "https://github.com/apache/iceberg/pull/1573#discussion_r502744187", "createdAt": "2020-10-10T04:24:59Z", "author": {"login": "danielcweeks"}, "path": "aws/src/main/java/org/apache/iceberg/aws/s3/S3FileIO.java", "diffHunk": "@@ -0,0 +1,156 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.aws.s3;\n+\n+import com.amazonaws.services.s3.AmazonS3;\n+import com.amazonaws.services.s3.AmazonS3URI;\n+import com.amazonaws.services.s3.model.AmazonS3Exception;\n+import com.amazonaws.services.s3.model.ObjectMetadata;\n+import java.io.IOException;\n+import java.io.Serializable;\n+import java.util.Objects;\n+import org.apache.http.HttpStatus;\n+import org.apache.iceberg.io.FileIO;\n+import org.apache.iceberg.io.InputFile;\n+import org.apache.iceberg.io.OutputFile;\n+import org.apache.iceberg.io.PositionOutputStream;\n+import org.apache.iceberg.io.SeekableInputStream;\n+import org.apache.iceberg.util.SerializableSupplier;\n+\n+/**\n+ * FileIO implementation backed by S3.  Locations used must follow the conventions\n+ * for AmazonS3URIs (e.g. s3://bucket/path/..).\n+ */\n+public class S3FileIO implements FileIO, Serializable {\n+  private final SerializableSupplier<AmazonS3> s3;\n+\n+  public S3FileIO(SerializableSupplier<AmazonS3> s3) {\n+    this.s3 = s3;\n+  }\n+\n+  @Override\n+  public InputFile newInputFile(String path) {\n+    return new S3InputFile(new AmazonS3URI(path));\n+  }\n+\n+  @Override\n+  public OutputFile newOutputFile(String path) {\n+    return new S3OutputFile(new AmazonS3URI(path));\n+  }\n+\n+  @Override\n+  public void deleteFile(String path) {\n+    AmazonS3URI location = new AmazonS3URI(path);\n+    s3.get().deleteObject(location.getBucket(), location.getKey());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjcyMDcwMw=="}, "originalCommit": {"oid": "3f17216d3d3f08148dd74f6f86efd659b4ec8e97"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjc0NjEzNA==", "bodyText": "Never mind, that make total sense to do.  I added it.", "url": "https://github.com/apache/iceberg/pull/1573#discussion_r502746134", "createdAt": "2020-10-10T04:50:27Z", "author": {"login": "danielcweeks"}, "path": "aws/src/main/java/org/apache/iceberg/aws/s3/S3FileIO.java", "diffHunk": "@@ -0,0 +1,156 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.aws.s3;\n+\n+import com.amazonaws.services.s3.AmazonS3;\n+import com.amazonaws.services.s3.AmazonS3URI;\n+import com.amazonaws.services.s3.model.AmazonS3Exception;\n+import com.amazonaws.services.s3.model.ObjectMetadata;\n+import java.io.IOException;\n+import java.io.Serializable;\n+import java.util.Objects;\n+import org.apache.http.HttpStatus;\n+import org.apache.iceberg.io.FileIO;\n+import org.apache.iceberg.io.InputFile;\n+import org.apache.iceberg.io.OutputFile;\n+import org.apache.iceberg.io.PositionOutputStream;\n+import org.apache.iceberg.io.SeekableInputStream;\n+import org.apache.iceberg.util.SerializableSupplier;\n+\n+/**\n+ * FileIO implementation backed by S3.  Locations used must follow the conventions\n+ * for AmazonS3URIs (e.g. s3://bucket/path/..).\n+ */\n+public class S3FileIO implements FileIO, Serializable {\n+  private final SerializableSupplier<AmazonS3> s3;\n+\n+  public S3FileIO(SerializableSupplier<AmazonS3> s3) {\n+    this.s3 = s3;\n+  }\n+\n+  @Override\n+  public InputFile newInputFile(String path) {\n+    return new S3InputFile(new AmazonS3URI(path));\n+  }\n+\n+  @Override\n+  public OutputFile newOutputFile(String path) {\n+    return new S3OutputFile(new AmazonS3URI(path));\n+  }\n+\n+  @Override\n+  public void deleteFile(String path) {\n+    AmazonS3URI location = new AmazonS3URI(path);\n+    s3.get().deleteObject(location.getBucket(), location.getKey());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjcyMDcwMw=="}, "originalCommit": {"oid": "3f17216d3d3f08148dd74f6f86efd659b4ec8e97"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0ODEzMzU4OnYy", "diffSide": "RIGHT", "path": "aws/src/main/java/org/apache/iceberg/aws/s3/S3FileIO.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMFQwMDoyOToyN1rOHfbrLg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QyMjo0Mjo0MVrOHngTEg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjcyMTMyNg==", "bodyText": "We should probably implement this.", "url": "https://github.com/apache/iceberg/pull/1573#discussion_r502721326", "createdAt": "2020-10-10T00:29:27Z", "author": {"login": "rdblue"}, "path": "aws/src/main/java/org/apache/iceberg/aws/s3/S3FileIO.java", "diffHunk": "@@ -0,0 +1,156 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.aws.s3;\n+\n+import com.amazonaws.services.s3.AmazonS3;\n+import com.amazonaws.services.s3.AmazonS3URI;\n+import com.amazonaws.services.s3.model.AmazonS3Exception;\n+import com.amazonaws.services.s3.model.ObjectMetadata;\n+import java.io.IOException;\n+import java.io.Serializable;\n+import java.util.Objects;\n+import org.apache.http.HttpStatus;\n+import org.apache.iceberg.io.FileIO;\n+import org.apache.iceberg.io.InputFile;\n+import org.apache.iceberg.io.OutputFile;\n+import org.apache.iceberg.io.PositionOutputStream;\n+import org.apache.iceberg.io.SeekableInputStream;\n+import org.apache.iceberg.util.SerializableSupplier;\n+\n+/**\n+ * FileIO implementation backed by S3.  Locations used must follow the conventions\n+ * for AmazonS3URIs (e.g. s3://bucket/path/..).\n+ */\n+public class S3FileIO implements FileIO, Serializable {\n+  private final SerializableSupplier<AmazonS3> s3;\n+\n+  public S3FileIO(SerializableSupplier<AmazonS3> s3) {\n+    this.s3 = s3;\n+  }\n+\n+  @Override\n+  public InputFile newInputFile(String path) {\n+    return new S3InputFile(new AmazonS3URI(path));\n+  }\n+\n+  @Override\n+  public OutputFile newOutputFile(String path) {\n+    return new S3OutputFile(new AmazonS3URI(path));\n+  }\n+\n+  @Override\n+  public void deleteFile(String path) {\n+    AmazonS3URI location = new AmazonS3URI(path);\n+    s3.get().deleteObject(location.getBucket(), location.getKey());\n+  }\n+\n+  public class S3InputFile implements InputFile {\n+    private final AmazonS3URI location;\n+    private ObjectMetadata metadata;\n+\n+    public S3InputFile(AmazonS3URI location) {\n+      this.location = location;\n+    }\n+\n+    /**\n+     * Note: this may be stale if file was deleted since metadata is cached\n+     * for size/existence checks.\n+     *\n+     * @return content length\n+     */\n+    @Override\n+    public long getLength() {\n+      return Objects.requireNonNull(getObjectMetadata()).getContentLength();\n+    }\n+\n+    @Override\n+    public SeekableInputStream newStream() {\n+      return new S3InputStream(s3.get(), location);\n+    }\n+\n+    @Override\n+    public String location() {\n+      return location.toString();\n+    }\n+\n+    /**\n+     * Note: this may be stale if file was deleted since metadata is cached\n+     * for size/existence checks.\n+     *\n+     * @return flag\n+     */\n+    @Override\n+    public boolean exists() {\n+      return getObjectMetadata() != null;\n+    }\n+\n+    @Override\n+    public String toString() {\n+      return location.toString();\n+    }\n+\n+    private ObjectMetadata getObjectMetadata() {\n+      if (metadata == null) {\n+        try {\n+          metadata = s3.get().getObjectMetadata(location.getBucket(), location.getKey());\n+        } catch (AmazonS3Exception e) {\n+          if (e.getStatusCode() != HttpStatus.SC_NOT_FOUND) {\n+            throw e; // return null if 404 Not Found, otherwise rethrow\n+          }\n+        }\n+      }\n+\n+      return metadata;\n+    }\n+  }\n+\n+  public class S3OutputFile implements OutputFile {\n+    private final AmazonS3URI location;\n+\n+    public S3OutputFile(AmazonS3URI location) {\n+      this.location = location;\n+    }\n+\n+    @Override\n+    public PositionOutputStream create() {\n+      throw new UnsupportedOperationException();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3f17216d3d3f08148dd74f6f86efd659b4ec8e97"}, "originalPosition": 133}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjc0NjM2NA==", "bodyText": "A couple points on this.  I don't see this actually used anywhere except in some tests.\nSecond point is, I'm not sure we can implement the stated contract around this behavior.  With S3 we cannot guarantee an atomic create (there are both collisions as well as inconsistency).\nI feel like for now we should throw so if in the future there is an expectation around that behavior, it will break and we can address it then.", "url": "https://github.com/apache/iceberg/pull/1573#discussion_r502746364", "createdAt": "2020-10-10T04:53:51Z", "author": {"login": "danielcweeks"}, "path": "aws/src/main/java/org/apache/iceberg/aws/s3/S3FileIO.java", "diffHunk": "@@ -0,0 +1,156 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.aws.s3;\n+\n+import com.amazonaws.services.s3.AmazonS3;\n+import com.amazonaws.services.s3.AmazonS3URI;\n+import com.amazonaws.services.s3.model.AmazonS3Exception;\n+import com.amazonaws.services.s3.model.ObjectMetadata;\n+import java.io.IOException;\n+import java.io.Serializable;\n+import java.util.Objects;\n+import org.apache.http.HttpStatus;\n+import org.apache.iceberg.io.FileIO;\n+import org.apache.iceberg.io.InputFile;\n+import org.apache.iceberg.io.OutputFile;\n+import org.apache.iceberg.io.PositionOutputStream;\n+import org.apache.iceberg.io.SeekableInputStream;\n+import org.apache.iceberg.util.SerializableSupplier;\n+\n+/**\n+ * FileIO implementation backed by S3.  Locations used must follow the conventions\n+ * for AmazonS3URIs (e.g. s3://bucket/path/..).\n+ */\n+public class S3FileIO implements FileIO, Serializable {\n+  private final SerializableSupplier<AmazonS3> s3;\n+\n+  public S3FileIO(SerializableSupplier<AmazonS3> s3) {\n+    this.s3 = s3;\n+  }\n+\n+  @Override\n+  public InputFile newInputFile(String path) {\n+    return new S3InputFile(new AmazonS3URI(path));\n+  }\n+\n+  @Override\n+  public OutputFile newOutputFile(String path) {\n+    return new S3OutputFile(new AmazonS3URI(path));\n+  }\n+\n+  @Override\n+  public void deleteFile(String path) {\n+    AmazonS3URI location = new AmazonS3URI(path);\n+    s3.get().deleteObject(location.getBucket(), location.getKey());\n+  }\n+\n+  public class S3InputFile implements InputFile {\n+    private final AmazonS3URI location;\n+    private ObjectMetadata metadata;\n+\n+    public S3InputFile(AmazonS3URI location) {\n+      this.location = location;\n+    }\n+\n+    /**\n+     * Note: this may be stale if file was deleted since metadata is cached\n+     * for size/existence checks.\n+     *\n+     * @return content length\n+     */\n+    @Override\n+    public long getLength() {\n+      return Objects.requireNonNull(getObjectMetadata()).getContentLength();\n+    }\n+\n+    @Override\n+    public SeekableInputStream newStream() {\n+      return new S3InputStream(s3.get(), location);\n+    }\n+\n+    @Override\n+    public String location() {\n+      return location.toString();\n+    }\n+\n+    /**\n+     * Note: this may be stale if file was deleted since metadata is cached\n+     * for size/existence checks.\n+     *\n+     * @return flag\n+     */\n+    @Override\n+    public boolean exists() {\n+      return getObjectMetadata() != null;\n+    }\n+\n+    @Override\n+    public String toString() {\n+      return location.toString();\n+    }\n+\n+    private ObjectMetadata getObjectMetadata() {\n+      if (metadata == null) {\n+        try {\n+          metadata = s3.get().getObjectMetadata(location.getBucket(), location.getKey());\n+        } catch (AmazonS3Exception e) {\n+          if (e.getStatusCode() != HttpStatus.SC_NOT_FOUND) {\n+            throw e; // return null if 404 Not Found, otherwise rethrow\n+          }\n+        }\n+      }\n+\n+      return metadata;\n+    }\n+  }\n+\n+  public class S3OutputFile implements OutputFile {\n+    private final AmazonS3URI location;\n+\n+    public S3OutputFile(AmazonS3URI location) {\n+      this.location = location;\n+    }\n+\n+    @Override\n+    public PositionOutputStream create() {\n+      throw new UnsupportedOperationException();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjcyMTMyNg=="}, "originalCommit": {"oid": "3f17216d3d3f08148dd74f6f86efd659b4ec8e97"}, "originalPosition": 133}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTE4NTY4Mg==", "bodyText": "This is okay for now, but we should eventually add it. There isn't an atomicity guarantee about the final file here. It just creates an output stream for the file that will create the file on close. That close can fail if the file was created concurrently. I think the only guarantee here is that the file didn't exist when this method is called.", "url": "https://github.com/apache/iceberg/pull/1573#discussion_r511185682", "createdAt": "2020-10-23T22:42:41Z", "author": {"login": "rdblue"}, "path": "aws/src/main/java/org/apache/iceberg/aws/s3/S3FileIO.java", "diffHunk": "@@ -0,0 +1,156 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.aws.s3;\n+\n+import com.amazonaws.services.s3.AmazonS3;\n+import com.amazonaws.services.s3.AmazonS3URI;\n+import com.amazonaws.services.s3.model.AmazonS3Exception;\n+import com.amazonaws.services.s3.model.ObjectMetadata;\n+import java.io.IOException;\n+import java.io.Serializable;\n+import java.util.Objects;\n+import org.apache.http.HttpStatus;\n+import org.apache.iceberg.io.FileIO;\n+import org.apache.iceberg.io.InputFile;\n+import org.apache.iceberg.io.OutputFile;\n+import org.apache.iceberg.io.PositionOutputStream;\n+import org.apache.iceberg.io.SeekableInputStream;\n+import org.apache.iceberg.util.SerializableSupplier;\n+\n+/**\n+ * FileIO implementation backed by S3.  Locations used must follow the conventions\n+ * for AmazonS3URIs (e.g. s3://bucket/path/..).\n+ */\n+public class S3FileIO implements FileIO, Serializable {\n+  private final SerializableSupplier<AmazonS3> s3;\n+\n+  public S3FileIO(SerializableSupplier<AmazonS3> s3) {\n+    this.s3 = s3;\n+  }\n+\n+  @Override\n+  public InputFile newInputFile(String path) {\n+    return new S3InputFile(new AmazonS3URI(path));\n+  }\n+\n+  @Override\n+  public OutputFile newOutputFile(String path) {\n+    return new S3OutputFile(new AmazonS3URI(path));\n+  }\n+\n+  @Override\n+  public void deleteFile(String path) {\n+    AmazonS3URI location = new AmazonS3URI(path);\n+    s3.get().deleteObject(location.getBucket(), location.getKey());\n+  }\n+\n+  public class S3InputFile implements InputFile {\n+    private final AmazonS3URI location;\n+    private ObjectMetadata metadata;\n+\n+    public S3InputFile(AmazonS3URI location) {\n+      this.location = location;\n+    }\n+\n+    /**\n+     * Note: this may be stale if file was deleted since metadata is cached\n+     * for size/existence checks.\n+     *\n+     * @return content length\n+     */\n+    @Override\n+    public long getLength() {\n+      return Objects.requireNonNull(getObjectMetadata()).getContentLength();\n+    }\n+\n+    @Override\n+    public SeekableInputStream newStream() {\n+      return new S3InputStream(s3.get(), location);\n+    }\n+\n+    @Override\n+    public String location() {\n+      return location.toString();\n+    }\n+\n+    /**\n+     * Note: this may be stale if file was deleted since metadata is cached\n+     * for size/existence checks.\n+     *\n+     * @return flag\n+     */\n+    @Override\n+    public boolean exists() {\n+      return getObjectMetadata() != null;\n+    }\n+\n+    @Override\n+    public String toString() {\n+      return location.toString();\n+    }\n+\n+    private ObjectMetadata getObjectMetadata() {\n+      if (metadata == null) {\n+        try {\n+          metadata = s3.get().getObjectMetadata(location.getBucket(), location.getKey());\n+        } catch (AmazonS3Exception e) {\n+          if (e.getStatusCode() != HttpStatus.SC_NOT_FOUND) {\n+            throw e; // return null if 404 Not Found, otherwise rethrow\n+          }\n+        }\n+      }\n+\n+      return metadata;\n+    }\n+  }\n+\n+  public class S3OutputFile implements OutputFile {\n+    private final AmazonS3URI location;\n+\n+    public S3OutputFile(AmazonS3URI location) {\n+      this.location = location;\n+    }\n+\n+    @Override\n+    public PositionOutputStream create() {\n+      throw new UnsupportedOperationException();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjcyMTMyNg=="}, "originalCommit": {"oid": "3f17216d3d3f08148dd74f6f86efd659b4ec8e97"}, "originalPosition": 133}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0ODEzNjA1OnYy", "diffSide": "RIGHT", "path": "aws/src/main/java/org/apache/iceberg/aws/s3/S3InputStream.java", "isResolved": true, "comments": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMFQwMDozMTo0OVrOHfbsZw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQxNTo0Mjo0OVrOHhZdcA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjcyMTYzOQ==", "bodyText": "Why not implement it anyway? All we need to do is delegate to stream, right?", "url": "https://github.com/apache/iceberg/pull/1573#discussion_r502721639", "createdAt": "2020-10-10T00:31:49Z", "author": {"login": "rdblue"}, "path": "aws/src/main/java/org/apache/iceberg/aws/s3/S3InputStream.java", "diffHunk": "@@ -0,0 +1,146 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.aws.s3;\n+\n+import com.amazonaws.services.s3.AmazonS3;\n+import com.amazonaws.services.s3.AmazonS3URI;\n+import com.amazonaws.services.s3.model.GetObjectRequest;\n+import com.amazonaws.services.s3.model.S3ObjectInputStream;\n+import java.io.IOException;\n+import java.util.Arrays;\n+import org.apache.commons.compress.utils.IOUtils;\n+import org.apache.iceberg.io.SeekableInputStream;\n+import org.apache.iceberg.relocated.com.google.common.base.Joiner;\n+import org.apache.iceberg.relocated.com.google.common.base.Preconditions;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class S3InputStream extends SeekableInputStream {\n+  private static final Logger LOG = LoggerFactory.getLogger(S3InputStream.class);\n+\n+  private final StackTraceElement[] createStack;\n+  private final AmazonS3 s3;\n+  private final AmazonS3URI location;\n+\n+  private S3ObjectInputStream stream;\n+  private long pos = 0;\n+  private long next = 0;\n+  private boolean closed = false;\n+\n+  private int skipSize = 1024 * 1024;\n+\n+  public S3InputStream(AmazonS3 s3, AmazonS3URI location) {\n+    this.s3 = s3;\n+    this.location = location;\n+\n+    createStack = Thread.currentThread().getStackTrace();\n+  }\n+\n+  @Override\n+  public long getPos() {\n+    return pos;\n+  }\n+\n+  @Override\n+  public void seek(long newPos) {\n+    Preconditions.checkState(!closed, \"already closed\");\n+    Preconditions.checkArgument(newPos >= 0, \"position is negative: %s\", newPos);\n+\n+    // this allows a seek beyond the end of the stream but the next read will fail\n+    next = newPos;\n+  }\n+\n+  @Override\n+  public int read() {\n+    // This stream is wrapped with BufferedInputStream, so this method should never be called\n+    throw new UnsupportedOperationException();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3f17216d3d3f08148dd74f6f86efd659b4ec8e97"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjcyMTg1MA==", "bodyText": "One argument would be that if you're hitting this, you're doing something wrong (and risk poor performance). Throwing here is a form of defensive programming.", "url": "https://github.com/apache/iceberg/pull/1573#discussion_r502721850", "createdAt": "2020-10-10T00:33:40Z", "author": {"login": "jacques-n"}, "path": "aws/src/main/java/org/apache/iceberg/aws/s3/S3InputStream.java", "diffHunk": "@@ -0,0 +1,146 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.aws.s3;\n+\n+import com.amazonaws.services.s3.AmazonS3;\n+import com.amazonaws.services.s3.AmazonS3URI;\n+import com.amazonaws.services.s3.model.GetObjectRequest;\n+import com.amazonaws.services.s3.model.S3ObjectInputStream;\n+import java.io.IOException;\n+import java.util.Arrays;\n+import org.apache.commons.compress.utils.IOUtils;\n+import org.apache.iceberg.io.SeekableInputStream;\n+import org.apache.iceberg.relocated.com.google.common.base.Joiner;\n+import org.apache.iceberg.relocated.com.google.common.base.Preconditions;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class S3InputStream extends SeekableInputStream {\n+  private static final Logger LOG = LoggerFactory.getLogger(S3InputStream.class);\n+\n+  private final StackTraceElement[] createStack;\n+  private final AmazonS3 s3;\n+  private final AmazonS3URI location;\n+\n+  private S3ObjectInputStream stream;\n+  private long pos = 0;\n+  private long next = 0;\n+  private boolean closed = false;\n+\n+  private int skipSize = 1024 * 1024;\n+\n+  public S3InputStream(AmazonS3 s3, AmazonS3URI location) {\n+    this.s3 = s3;\n+    this.location = location;\n+\n+    createStack = Thread.currentThread().getStackTrace();\n+  }\n+\n+  @Override\n+  public long getPos() {\n+    return pos;\n+  }\n+\n+  @Override\n+  public void seek(long newPos) {\n+    Preconditions.checkState(!closed, \"already closed\");\n+    Preconditions.checkArgument(newPos >= 0, \"position is negative: %s\", newPos);\n+\n+    // this allows a seek beyond the end of the stream but the next read will fail\n+    next = newPos;\n+  }\n+\n+  @Override\n+  public int read() {\n+    // This stream is wrapped with BufferedInputStream, so this method should never be called\n+    throw new UnsupportedOperationException();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjcyMTYzOQ=="}, "originalCommit": {"oid": "3f17216d3d3f08148dd74f6f86efd659b4ec8e97"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjcyMzU4NA==", "bodyText": "@jacques-n, isn't the underlying stream buffered, though? Why require wrapping this one in a BufferedStream as well?\nThere are a few places where we use read() directly, assuming the data is buffered. Like in the vectorized reader base class: https://github.com/apache/iceberg/blob/master/arrow/src/main/java/org/apache/iceberg/arrow/vectorized/parquet/BaseVectorizedParquetValuesReader.java#L147\nA one significant speedup we saw when working on vectorization was avoiding code in Parquet that would read into a 4- or 8-byte buffer and then access each byte individual to reconstruct numeric values. Maybe there is a better way that what we're currently doing though?", "url": "https://github.com/apache/iceberg/pull/1573#discussion_r502723584", "createdAt": "2020-10-10T00:48:14Z", "author": {"login": "rdblue"}, "path": "aws/src/main/java/org/apache/iceberg/aws/s3/S3InputStream.java", "diffHunk": "@@ -0,0 +1,146 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.aws.s3;\n+\n+import com.amazonaws.services.s3.AmazonS3;\n+import com.amazonaws.services.s3.AmazonS3URI;\n+import com.amazonaws.services.s3.model.GetObjectRequest;\n+import com.amazonaws.services.s3.model.S3ObjectInputStream;\n+import java.io.IOException;\n+import java.util.Arrays;\n+import org.apache.commons.compress.utils.IOUtils;\n+import org.apache.iceberg.io.SeekableInputStream;\n+import org.apache.iceberg.relocated.com.google.common.base.Joiner;\n+import org.apache.iceberg.relocated.com.google.common.base.Preconditions;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class S3InputStream extends SeekableInputStream {\n+  private static final Logger LOG = LoggerFactory.getLogger(S3InputStream.class);\n+\n+  private final StackTraceElement[] createStack;\n+  private final AmazonS3 s3;\n+  private final AmazonS3URI location;\n+\n+  private S3ObjectInputStream stream;\n+  private long pos = 0;\n+  private long next = 0;\n+  private boolean closed = false;\n+\n+  private int skipSize = 1024 * 1024;\n+\n+  public S3InputStream(AmazonS3 s3, AmazonS3URI location) {\n+    this.s3 = s3;\n+    this.location = location;\n+\n+    createStack = Thread.currentThread().getStackTrace();\n+  }\n+\n+  @Override\n+  public long getPos() {\n+    return pos;\n+  }\n+\n+  @Override\n+  public void seek(long newPos) {\n+    Preconditions.checkState(!closed, \"already closed\");\n+    Preconditions.checkArgument(newPos >= 0, \"position is negative: %s\", newPos);\n+\n+    // this allows a seek beyond the end of the stream but the next read will fail\n+    next = newPos;\n+  }\n+\n+  @Override\n+  public int read() {\n+    // This stream is wrapped with BufferedInputStream, so this method should never be called\n+    throw new UnsupportedOperationException();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjcyMTYzOQ=="}, "originalCommit": {"oid": "3f17216d3d3f08148dd74f6f86efd659b4ec8e97"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjcyNTQ2NQ==", "bodyText": "Good questions. I haven't looked at the underlying reader to confirm so it may be a moot point.\nGenerally, in our other performance work we've tried to move away from InputStream entirely. For example, we expose this as the only input mechanism for streams.\nThen higher levels consumers should be preallocating space based on say, page size, do a bulk pull from the underlying system (say s3) and then do all byte reads using unsafe byte reads or similar (as opposed to an inputstream stack). In those cases, (hopefully) you can use the appropriate intrinsic operations.\nFor reference, the impl for S3 of the above are in these two classes: Using AWS Sync Client, Useing AWS Async Client\nFeel free to grab anything that seems useful. Unfortunately, we don't actually use the latter true async implementation because we've found the AWS Java SDk2 async api for S3 to be very buggy (or at least it was when were last testing it). In cases for Azure and similar, we actually chose to use the relatively strong AsyncHttpClient as you can find here.", "url": "https://github.com/apache/iceberg/pull/1573#discussion_r502725465", "createdAt": "2020-10-10T01:04:53Z", "author": {"login": "jacques-n"}, "path": "aws/src/main/java/org/apache/iceberg/aws/s3/S3InputStream.java", "diffHunk": "@@ -0,0 +1,146 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.aws.s3;\n+\n+import com.amazonaws.services.s3.AmazonS3;\n+import com.amazonaws.services.s3.AmazonS3URI;\n+import com.amazonaws.services.s3.model.GetObjectRequest;\n+import com.amazonaws.services.s3.model.S3ObjectInputStream;\n+import java.io.IOException;\n+import java.util.Arrays;\n+import org.apache.commons.compress.utils.IOUtils;\n+import org.apache.iceberg.io.SeekableInputStream;\n+import org.apache.iceberg.relocated.com.google.common.base.Joiner;\n+import org.apache.iceberg.relocated.com.google.common.base.Preconditions;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class S3InputStream extends SeekableInputStream {\n+  private static final Logger LOG = LoggerFactory.getLogger(S3InputStream.class);\n+\n+  private final StackTraceElement[] createStack;\n+  private final AmazonS3 s3;\n+  private final AmazonS3URI location;\n+\n+  private S3ObjectInputStream stream;\n+  private long pos = 0;\n+  private long next = 0;\n+  private boolean closed = false;\n+\n+  private int skipSize = 1024 * 1024;\n+\n+  public S3InputStream(AmazonS3 s3, AmazonS3URI location) {\n+    this.s3 = s3;\n+    this.location = location;\n+\n+    createStack = Thread.currentThread().getStackTrace();\n+  }\n+\n+  @Override\n+  public long getPos() {\n+    return pos;\n+  }\n+\n+  @Override\n+  public void seek(long newPos) {\n+    Preconditions.checkState(!closed, \"already closed\");\n+    Preconditions.checkArgument(newPos >= 0, \"position is negative: %s\", newPos);\n+\n+    // this allows a seek beyond the end of the stream but the next read will fail\n+    next = newPos;\n+  }\n+\n+  @Override\n+  public int read() {\n+    // This stream is wrapped with BufferedInputStream, so this method should never be called\n+    throw new UnsupportedOperationException();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjcyMTYzOQ=="}, "originalCommit": {"oid": "3f17216d3d3f08148dd74f6f86efd659b4ec8e97"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjc0NzAzNA==", "bodyText": "@jacques-n, we have some similar optimizations as well and I think they would be great follow ons to an initial implementation.  For example, we have a vectored-io implementation for Parquet that will only do bounded range gets from S3, which is more efficient for connections and limits any buffered reads by the sdk past the intended range.\nHowever, for now, I think we should keep this relatively straightforward so we have a working initial point.\nI'll definitely take a look at the sync and async clients, those look promising.", "url": "https://github.com/apache/iceberg/pull/1573#discussion_r502747034", "createdAt": "2020-10-10T05:02:27Z", "author": {"login": "danielcweeks"}, "path": "aws/src/main/java/org/apache/iceberg/aws/s3/S3InputStream.java", "diffHunk": "@@ -0,0 +1,146 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.aws.s3;\n+\n+import com.amazonaws.services.s3.AmazonS3;\n+import com.amazonaws.services.s3.AmazonS3URI;\n+import com.amazonaws.services.s3.model.GetObjectRequest;\n+import com.amazonaws.services.s3.model.S3ObjectInputStream;\n+import java.io.IOException;\n+import java.util.Arrays;\n+import org.apache.commons.compress.utils.IOUtils;\n+import org.apache.iceberg.io.SeekableInputStream;\n+import org.apache.iceberg.relocated.com.google.common.base.Joiner;\n+import org.apache.iceberg.relocated.com.google.common.base.Preconditions;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class S3InputStream extends SeekableInputStream {\n+  private static final Logger LOG = LoggerFactory.getLogger(S3InputStream.class);\n+\n+  private final StackTraceElement[] createStack;\n+  private final AmazonS3 s3;\n+  private final AmazonS3URI location;\n+\n+  private S3ObjectInputStream stream;\n+  private long pos = 0;\n+  private long next = 0;\n+  private boolean closed = false;\n+\n+  private int skipSize = 1024 * 1024;\n+\n+  public S3InputStream(AmazonS3 s3, AmazonS3URI location) {\n+    this.s3 = s3;\n+    this.location = location;\n+\n+    createStack = Thread.currentThread().getStackTrace();\n+  }\n+\n+  @Override\n+  public long getPos() {\n+    return pos;\n+  }\n+\n+  @Override\n+  public void seek(long newPos) {\n+    Preconditions.checkState(!closed, \"already closed\");\n+    Preconditions.checkArgument(newPos >= 0, \"position is negative: %s\", newPos);\n+\n+    // this allows a seek beyond the end of the stream but the next read will fail\n+    next = newPos;\n+  }\n+\n+  @Override\n+  public int read() {\n+    // This stream is wrapped with BufferedInputStream, so this method should never be called\n+    throw new UnsupportedOperationException();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjcyMTYzOQ=="}, "originalCommit": {"oid": "3f17216d3d3f08148dd74f6f86efd659b4ec8e97"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjc2MDk5OQ==", "bodyText": "I'm in agreement on getting a working initial implementation in and then optimizing it later. We use similar optimizations when reading / writing directly to S3 from plain old java programs.\nThis might somewhat go against the grain of how FileIO works, but if there were a filesystem concept like exists in some of the python code, we could make use of the multipart file upload manager and then upload based on the configured block size, which makes reads from S3 (when reading along the same block size) significantly more performant. It also means that all file uploads have a final commit operation (such that they all succeed or don't). I guess with Iceberg that final commit operation isn't really necessary though, as it's ok for tables to have files in them that don't belong as they will be filtered out by the metadata.\nBut I'm still hugely in favor of making multipart uploads work for us. As well as a more performant way to download only the portion of the file thats needed (e.g. the footer, etc).", "url": "https://github.com/apache/iceberg/pull/1573#discussion_r502760999", "createdAt": "2020-10-10T07:53:04Z", "author": {"login": "kbendick"}, "path": "aws/src/main/java/org/apache/iceberg/aws/s3/S3InputStream.java", "diffHunk": "@@ -0,0 +1,146 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.aws.s3;\n+\n+import com.amazonaws.services.s3.AmazonS3;\n+import com.amazonaws.services.s3.AmazonS3URI;\n+import com.amazonaws.services.s3.model.GetObjectRequest;\n+import com.amazonaws.services.s3.model.S3ObjectInputStream;\n+import java.io.IOException;\n+import java.util.Arrays;\n+import org.apache.commons.compress.utils.IOUtils;\n+import org.apache.iceberg.io.SeekableInputStream;\n+import org.apache.iceberg.relocated.com.google.common.base.Joiner;\n+import org.apache.iceberg.relocated.com.google.common.base.Preconditions;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class S3InputStream extends SeekableInputStream {\n+  private static final Logger LOG = LoggerFactory.getLogger(S3InputStream.class);\n+\n+  private final StackTraceElement[] createStack;\n+  private final AmazonS3 s3;\n+  private final AmazonS3URI location;\n+\n+  private S3ObjectInputStream stream;\n+  private long pos = 0;\n+  private long next = 0;\n+  private boolean closed = false;\n+\n+  private int skipSize = 1024 * 1024;\n+\n+  public S3InputStream(AmazonS3 s3, AmazonS3URI location) {\n+    this.s3 = s3;\n+    this.location = location;\n+\n+    createStack = Thread.currentThread().getStackTrace();\n+  }\n+\n+  @Override\n+  public long getPos() {\n+    return pos;\n+  }\n+\n+  @Override\n+  public void seek(long newPos) {\n+    Preconditions.checkState(!closed, \"already closed\");\n+    Preconditions.checkArgument(newPos >= 0, \"position is negative: %s\", newPos);\n+\n+    // this allows a seek beyond the end of the stream but the next read will fail\n+    next = newPos;\n+  }\n+\n+  @Override\n+  public int read() {\n+    // This stream is wrapped with BufferedInputStream, so this method should never be called\n+    throw new UnsupportedOperationException();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjcyMTYzOQ=="}, "originalCommit": {"oid": "3f17216d3d3f08148dd74f6f86efd659b4ec8e97"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjgyMTM3Mw==", "bodyText": "@danielcweeks, totally agreed on my comments around patterns not being important notes for this patch. I was only meaning to share some of the ways we've moved away from inputstream in our code.", "url": "https://github.com/apache/iceberg/pull/1573#discussion_r502821373", "createdAt": "2020-10-10T19:00:14Z", "author": {"login": "jacques-n"}, "path": "aws/src/main/java/org/apache/iceberg/aws/s3/S3InputStream.java", "diffHunk": "@@ -0,0 +1,146 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.aws.s3;\n+\n+import com.amazonaws.services.s3.AmazonS3;\n+import com.amazonaws.services.s3.AmazonS3URI;\n+import com.amazonaws.services.s3.model.GetObjectRequest;\n+import com.amazonaws.services.s3.model.S3ObjectInputStream;\n+import java.io.IOException;\n+import java.util.Arrays;\n+import org.apache.commons.compress.utils.IOUtils;\n+import org.apache.iceberg.io.SeekableInputStream;\n+import org.apache.iceberg.relocated.com.google.common.base.Joiner;\n+import org.apache.iceberg.relocated.com.google.common.base.Preconditions;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class S3InputStream extends SeekableInputStream {\n+  private static final Logger LOG = LoggerFactory.getLogger(S3InputStream.class);\n+\n+  private final StackTraceElement[] createStack;\n+  private final AmazonS3 s3;\n+  private final AmazonS3URI location;\n+\n+  private S3ObjectInputStream stream;\n+  private long pos = 0;\n+  private long next = 0;\n+  private boolean closed = false;\n+\n+  private int skipSize = 1024 * 1024;\n+\n+  public S3InputStream(AmazonS3 s3, AmazonS3URI location) {\n+    this.s3 = s3;\n+    this.location = location;\n+\n+    createStack = Thread.currentThread().getStackTrace();\n+  }\n+\n+  @Override\n+  public long getPos() {\n+    return pos;\n+  }\n+\n+  @Override\n+  public void seek(long newPos) {\n+    Preconditions.checkState(!closed, \"already closed\");\n+    Preconditions.checkArgument(newPos >= 0, \"position is negative: %s\", newPos);\n+\n+    // this allows a seek beyond the end of the stream but the next read will fail\n+    next = newPos;\n+  }\n+\n+  @Override\n+  public int read() {\n+    // This stream is wrapped with BufferedInputStream, so this method should never be called\n+    throw new UnsupportedOperationException();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjcyMTYzOQ=="}, "originalCommit": {"oid": "3f17216d3d3f08148dd74f6f86efd659b4ec8e97"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzM4NzA1OA==", "bodyText": "@kbendick I think a few other threads on here have touched on some of your points.  We do want to do progressive multipart upload as a follow up.\nFor the read, I think there a few different paths forward as well.  We've implemented a vectored-io to enable more performant reads, and as @jacques-n mentioned, there are other optimizations we can look into for the read path.  These get a little more complicated and may affect some upstream dependencies (like parquet), so I expect to evolve this initial approach.", "url": "https://github.com/apache/iceberg/pull/1573#discussion_r503387058", "createdAt": "2020-10-12T15:53:18Z", "author": {"login": "danielcweeks"}, "path": "aws/src/main/java/org/apache/iceberg/aws/s3/S3InputStream.java", "diffHunk": "@@ -0,0 +1,146 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.aws.s3;\n+\n+import com.amazonaws.services.s3.AmazonS3;\n+import com.amazonaws.services.s3.AmazonS3URI;\n+import com.amazonaws.services.s3.model.GetObjectRequest;\n+import com.amazonaws.services.s3.model.S3ObjectInputStream;\n+import java.io.IOException;\n+import java.util.Arrays;\n+import org.apache.commons.compress.utils.IOUtils;\n+import org.apache.iceberg.io.SeekableInputStream;\n+import org.apache.iceberg.relocated.com.google.common.base.Joiner;\n+import org.apache.iceberg.relocated.com.google.common.base.Preconditions;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class S3InputStream extends SeekableInputStream {\n+  private static final Logger LOG = LoggerFactory.getLogger(S3InputStream.class);\n+\n+  private final StackTraceElement[] createStack;\n+  private final AmazonS3 s3;\n+  private final AmazonS3URI location;\n+\n+  private S3ObjectInputStream stream;\n+  private long pos = 0;\n+  private long next = 0;\n+  private boolean closed = false;\n+\n+  private int skipSize = 1024 * 1024;\n+\n+  public S3InputStream(AmazonS3 s3, AmazonS3URI location) {\n+    this.s3 = s3;\n+    this.location = location;\n+\n+    createStack = Thread.currentThread().getStackTrace();\n+  }\n+\n+  @Override\n+  public long getPos() {\n+    return pos;\n+  }\n+\n+  @Override\n+  public void seek(long newPos) {\n+    Preconditions.checkState(!closed, \"already closed\");\n+    Preconditions.checkArgument(newPos >= 0, \"position is negative: %s\", newPos);\n+\n+    // this allows a seek beyond the end of the stream but the next read will fail\n+    next = newPos;\n+  }\n+\n+  @Override\n+  public int read() {\n+    // This stream is wrapped with BufferedInputStream, so this method should never be called\n+    throw new UnsupportedOperationException();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjcyMTYzOQ=="}, "originalCommit": {"oid": "3f17216d3d3f08148dd74f6f86efd659b4ec8e97"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDc4MjE5Mg==", "bodyText": "So, back to @rdblue's original comment, I did a little digging to see what is underlying the stream from the aws sdk and there is buffering happening via a SessionInputBuffer on the request.  I'm going to go ahead and implement the read, but I also agree with @jacques-n that it's probably an issue if this ends up being called for performance reasons.", "url": "https://github.com/apache/iceberg/pull/1573#discussion_r504782192", "createdAt": "2020-10-14T15:42:49Z", "author": {"login": "danielcweeks"}, "path": "aws/src/main/java/org/apache/iceberg/aws/s3/S3InputStream.java", "diffHunk": "@@ -0,0 +1,146 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.aws.s3;\n+\n+import com.amazonaws.services.s3.AmazonS3;\n+import com.amazonaws.services.s3.AmazonS3URI;\n+import com.amazonaws.services.s3.model.GetObjectRequest;\n+import com.amazonaws.services.s3.model.S3ObjectInputStream;\n+import java.io.IOException;\n+import java.util.Arrays;\n+import org.apache.commons.compress.utils.IOUtils;\n+import org.apache.iceberg.io.SeekableInputStream;\n+import org.apache.iceberg.relocated.com.google.common.base.Joiner;\n+import org.apache.iceberg.relocated.com.google.common.base.Preconditions;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class S3InputStream extends SeekableInputStream {\n+  private static final Logger LOG = LoggerFactory.getLogger(S3InputStream.class);\n+\n+  private final StackTraceElement[] createStack;\n+  private final AmazonS3 s3;\n+  private final AmazonS3URI location;\n+\n+  private S3ObjectInputStream stream;\n+  private long pos = 0;\n+  private long next = 0;\n+  private boolean closed = false;\n+\n+  private int skipSize = 1024 * 1024;\n+\n+  public S3InputStream(AmazonS3 s3, AmazonS3URI location) {\n+    this.s3 = s3;\n+    this.location = location;\n+\n+    createStack = Thread.currentThread().getStackTrace();\n+  }\n+\n+  @Override\n+  public long getPos() {\n+    return pos;\n+  }\n+\n+  @Override\n+  public void seek(long newPos) {\n+    Preconditions.checkState(!closed, \"already closed\");\n+    Preconditions.checkArgument(newPos >= 0, \"position is negative: %s\", newPos);\n+\n+    // this allows a seek beyond the end of the stream but the next read will fail\n+    next = newPos;\n+  }\n+\n+  @Override\n+  public int read() {\n+    // This stream is wrapped with BufferedInputStream, so this method should never be called\n+    throw new UnsupportedOperationException();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjcyMTYzOQ=="}, "originalCommit": {"oid": "3f17216d3d3f08148dd74f6f86efd659b4ec8e97"}, "originalPosition": 73}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0ODE0MDY1OnYy", "diffSide": "RIGHT", "path": "aws/src/main/java/org/apache/iceberg/aws/s3/S3InputStream.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMFQwMDozNjozMlrOHfburQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMFQwNDoyMzowOFrOHfdECA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjcyMjIyMQ==", "bodyText": "I'd prefer not to create a direct dependency on commons-compress just for IOUtils.skip. It should be easy enough to write a skipFully method.", "url": "https://github.com/apache/iceberg/pull/1573#discussion_r502722221", "createdAt": "2020-10-10T00:36:32Z", "author": {"login": "rdblue"}, "path": "aws/src/main/java/org/apache/iceberg/aws/s3/S3InputStream.java", "diffHunk": "@@ -0,0 +1,146 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.aws.s3;\n+\n+import com.amazonaws.services.s3.AmazonS3;\n+import com.amazonaws.services.s3.AmazonS3URI;\n+import com.amazonaws.services.s3.model.GetObjectRequest;\n+import com.amazonaws.services.s3.model.S3ObjectInputStream;\n+import java.io.IOException;\n+import java.util.Arrays;\n+import org.apache.commons.compress.utils.IOUtils;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3f17216d3d3f08148dd74f6f86efd659b4ec8e97"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjc0NDA3Mg==", "bodyText": "Yeah, I actually removed this and when back to what the original PrestoS3FileSystem implementation does (also added credit).", "url": "https://github.com/apache/iceberg/pull/1573#discussion_r502744072", "createdAt": "2020-10-10T04:23:08Z", "author": {"login": "danielcweeks"}, "path": "aws/src/main/java/org/apache/iceberg/aws/s3/S3InputStream.java", "diffHunk": "@@ -0,0 +1,146 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.aws.s3;\n+\n+import com.amazonaws.services.s3.AmazonS3;\n+import com.amazonaws.services.s3.AmazonS3URI;\n+import com.amazonaws.services.s3.model.GetObjectRequest;\n+import com.amazonaws.services.s3.model.S3ObjectInputStream;\n+import java.io.IOException;\n+import java.util.Arrays;\n+import org.apache.commons.compress.utils.IOUtils;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjcyMjIyMQ=="}, "originalCommit": {"oid": "3f17216d3d3f08148dd74f6f86efd659b4ec8e97"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0ODM3Mzk3OnYy", "diffSide": "RIGHT", "path": "versions.props", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMFQwNTo1Nzo0NFrOHfdgfQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxNTo0Mjo1M1rOHgD8Qg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjc1MTM1Nw==", "bodyText": "Should we version separately for S3 and future things that might be needed, like KMS etc?", "url": "https://github.com/apache/iceberg/pull/1573#discussion_r502751357", "createdAt": "2020-10-10T05:57:44Z", "author": {"login": "kbendick"}, "path": "versions.props", "diffHunk": "@@ -17,8 +17,10 @@ com.github.ben-manes.caffeine:caffeine = 2.7.0\n org.apache.arrow:arrow-vector = 1.0.0\n org.apache.arrow:arrow-memory-netty = 1.0.0\n com.github.stephenc.findbugs:findbugs-annotations = 1.3.9-1\n+com.amazonaws:aws-java-sdk-* = 1.11.749", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "200a8d7eec2947c115556cf2e1332de52d754bff"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzM4MTA1OA==", "bodyText": "I believe most projects keep the sdk package dependencies in sync to avoid any issues with some of the core/api packages evolving.  I feel like we should keep them in sync for now and diverge if the need arises in the future.", "url": "https://github.com/apache/iceberg/pull/1573#discussion_r503381058", "createdAt": "2020-10-12T15:42:53Z", "author": {"login": "danielcweeks"}, "path": "versions.props", "diffHunk": "@@ -17,8 +17,10 @@ com.github.ben-manes.caffeine:caffeine = 2.7.0\n org.apache.arrow:arrow-vector = 1.0.0\n org.apache.arrow:arrow-memory-netty = 1.0.0\n com.github.stephenc.findbugs:findbugs-annotations = 1.3.9-1\n+com.amazonaws:aws-java-sdk-* = 1.11.749", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjc1MTM1Nw=="}, "originalCommit": {"oid": "200a8d7eec2947c115556cf2e1332de52d754bff"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0ODM4ODc3OnYy", "diffSide": "RIGHT", "path": "aws/src/main/java/org/apache/iceberg/aws/s3/S3InputStream.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMFQwNjoyMDoyMVrOHfdnSg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMFQyMDozNjoxM1rOHfiS1g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjc1MzA5OA==", "bodyText": "This feels somewhat unnecessary just for the warning. In the linked examples from @jacques-n, they use thread name instead via Thread.currentThread().getName();. Would that be a cleaner approach? What value does having the stack trace from when the S3InputStream was instantiated bring?", "url": "https://github.com/apache/iceberg/pull/1573#discussion_r502753098", "createdAt": "2020-10-10T06:20:21Z", "author": {"login": "kbendick"}, "path": "aws/src/main/java/org/apache/iceberg/aws/s3/S3InputStream.java", "diffHunk": "@@ -0,0 +1,150 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.aws.s3;\n+\n+import com.amazonaws.services.s3.AmazonS3;\n+import com.amazonaws.services.s3.AmazonS3URI;\n+import com.amazonaws.services.s3.model.GetObjectRequest;\n+import com.amazonaws.services.s3.model.S3ObjectInputStream;\n+import java.io.IOException;\n+import java.util.Arrays;\n+import org.apache.iceberg.io.SeekableInputStream;\n+import org.apache.iceberg.relocated.com.google.common.base.Joiner;\n+import org.apache.iceberg.relocated.com.google.common.base.Preconditions;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class S3InputStream extends SeekableInputStream {\n+  private static final Logger LOG = LoggerFactory.getLogger(S3InputStream.class);\n+\n+  private final StackTraceElement[] createStack;\n+  private final AmazonS3 s3;\n+  private final AmazonS3URI location;\n+\n+  private S3ObjectInputStream stream;\n+  private long pos = 0;\n+  private long next = 0;\n+  private boolean closed = false;\n+\n+  private int skipSize = 1024 * 1024;\n+\n+  public S3InputStream(AmazonS3 s3, AmazonS3URI location) {\n+    this.s3 = s3;\n+    this.location = location;\n+\n+    createStack = Thread.currentThread().getStackTrace();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "200a8d7eec2947c115556cf2e1332de52d754bff"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjgyOTc4Mg==", "bodyText": "This is used to show you where a leaked stream was created. I've found it helpful for tracking down paths with missing close calls.", "url": "https://github.com/apache/iceberg/pull/1573#discussion_r502829782", "createdAt": "2020-10-10T20:36:13Z", "author": {"login": "rdblue"}, "path": "aws/src/main/java/org/apache/iceberg/aws/s3/S3InputStream.java", "diffHunk": "@@ -0,0 +1,150 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.aws.s3;\n+\n+import com.amazonaws.services.s3.AmazonS3;\n+import com.amazonaws.services.s3.AmazonS3URI;\n+import com.amazonaws.services.s3.model.GetObjectRequest;\n+import com.amazonaws.services.s3.model.S3ObjectInputStream;\n+import java.io.IOException;\n+import java.util.Arrays;\n+import org.apache.iceberg.io.SeekableInputStream;\n+import org.apache.iceberg.relocated.com.google.common.base.Joiner;\n+import org.apache.iceberg.relocated.com.google.common.base.Preconditions;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class S3InputStream extends SeekableInputStream {\n+  private static final Logger LOG = LoggerFactory.getLogger(S3InputStream.class);\n+\n+  private final StackTraceElement[] createStack;\n+  private final AmazonS3 s3;\n+  private final AmazonS3URI location;\n+\n+  private S3ObjectInputStream stream;\n+  private long pos = 0;\n+  private long next = 0;\n+  private boolean closed = false;\n+\n+  private int skipSize = 1024 * 1024;\n+\n+  public S3InputStream(AmazonS3 s3, AmazonS3URI location) {\n+    this.s3 = s3;\n+    this.location = location;\n+\n+    createStack = Thread.currentThread().getStackTrace();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjc1MzA5OA=="}, "originalCommit": {"oid": "200a8d7eec2947c115556cf2e1332de52d754bff"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0ODQwMjgzOnYy", "diffSide": "RIGHT", "path": "build.gradle", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMFQwNjo0MDozM1rOHfdt3Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxNTozOTo0NVrOHgD1Mg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjc1NDc4MQ==", "bodyText": "Are you sure that this is needed?\nI was able to open this PR, remove this line, run ./gradlew clean build, and everything passed just fine for me.\nAll of your imports are from com.amazonaws.services.s3.* so I really don't think that core is needed, but gradle isn't my primary build tool at work so maybe I'm missing something.", "url": "https://github.com/apache/iceberg/pull/1573#discussion_r502754781", "createdAt": "2020-10-10T06:40:33Z", "author": {"login": "kbendick"}, "path": "build.gradle", "diffHunk": "@@ -237,6 +237,21 @@ project(':iceberg-data') {\n   }\n }\n \n+project(':iceberg-aws') {\n+  dependencies {\n+    compile project(':iceberg-api')\n+    compile project(':iceberg-core')\n+\n+    compileOnly \"com.amazonaws:aws-java-sdk-core\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "200a8d7eec2947c115556cf2e1332de52d754bff"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzM3OTI1MA==", "bodyText": "Good point.  Core is actually a dependency of S3 anyway, so it is pulled transitively.  No need to depend on it directly.", "url": "https://github.com/apache/iceberg/pull/1573#discussion_r503379250", "createdAt": "2020-10-12T15:39:45Z", "author": {"login": "danielcweeks"}, "path": "build.gradle", "diffHunk": "@@ -237,6 +237,21 @@ project(':iceberg-data') {\n   }\n }\n \n+project(':iceberg-aws') {\n+  dependencies {\n+    compile project(':iceberg-api')\n+    compile project(':iceberg-core')\n+\n+    compileOnly \"com.amazonaws:aws-java-sdk-core\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjc1NDc4MQ=="}, "originalCommit": {"oid": "200a8d7eec2947c115556cf2e1332de52d754bff"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0ODQ2MDYwOnYy", "diffSide": "RIGHT", "path": "aws/src/main/java/org/apache/iceberg/aws/s3/S3InputStream.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMFQwODowMTozN1rOHfeJCg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxNTo0OToxOVrOHgEKaw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjc2MTczOA==", "bodyText": "Do you intend to call the helper function you've written closeStream here or otherwise close or abort the S3ObjectInputStream? Seems like the input stream and any on going http requests won't get appropriately aborted / closed otherwise.", "url": "https://github.com/apache/iceberg/pull/1573#discussion_r502761738", "createdAt": "2020-10-10T08:01:37Z", "author": {"login": "kbendick"}, "path": "aws/src/main/java/org/apache/iceberg/aws/s3/S3InputStream.java", "diffHunk": "@@ -0,0 +1,150 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.aws.s3;\n+\n+import com.amazonaws.services.s3.AmazonS3;\n+import com.amazonaws.services.s3.AmazonS3URI;\n+import com.amazonaws.services.s3.model.GetObjectRequest;\n+import com.amazonaws.services.s3.model.S3ObjectInputStream;\n+import java.io.IOException;\n+import java.util.Arrays;\n+import org.apache.iceberg.io.SeekableInputStream;\n+import org.apache.iceberg.relocated.com.google.common.base.Joiner;\n+import org.apache.iceberg.relocated.com.google.common.base.Preconditions;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class S3InputStream extends SeekableInputStream {\n+  private static final Logger LOG = LoggerFactory.getLogger(S3InputStream.class);\n+\n+  private final StackTraceElement[] createStack;\n+  private final AmazonS3 s3;\n+  private final AmazonS3URI location;\n+\n+  private S3ObjectInputStream stream;\n+  private long pos = 0;\n+  private long next = 0;\n+  private boolean closed = false;\n+\n+  private int skipSize = 1024 * 1024;\n+\n+  public S3InputStream(AmazonS3 s3, AmazonS3URI location) {\n+    this.s3 = s3;\n+    this.location = location;\n+\n+    createStack = Thread.currentThread().getStackTrace();\n+  }\n+\n+  @Override\n+  public long getPos() {\n+    return pos;\n+  }\n+\n+  @Override\n+  public void seek(long newPos) {\n+    Preconditions.checkState(!closed, \"already closed\");\n+    Preconditions.checkArgument(newPos >= 0, \"position is negative: %s\", newPos);\n+\n+    // this allows a seek beyond the end of the stream but the next read will fail\n+    next = newPos;\n+  }\n+\n+  @Override\n+  public int read() {\n+    // This stream is wrapped with BufferedInputStream, so this method should never be called\n+    throw new UnsupportedOperationException();\n+  }\n+\n+  @Override\n+  public int read(byte[] b, int off, int len) throws IOException {\n+    Preconditions.checkState(!closed, \"already closed\");\n+    positionStream();\n+\n+    int bytesRead = stream.read(b, off, len);\n+    pos += bytesRead;\n+    next += bytesRead;\n+\n+    return bytesRead;\n+  }\n+\n+  @Override\n+  public void close() throws IOException {\n+    super.close();\n+    closed = true;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "200a8d7eec2947c115556cf2e1332de52d754bff"}, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzM4NDY4Mw==", "bodyText": "Great catch.  Yes, it should be aborted in the close.", "url": "https://github.com/apache/iceberg/pull/1573#discussion_r503384683", "createdAt": "2020-10-12T15:49:19Z", "author": {"login": "danielcweeks"}, "path": "aws/src/main/java/org/apache/iceberg/aws/s3/S3InputStream.java", "diffHunk": "@@ -0,0 +1,150 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.aws.s3;\n+\n+import com.amazonaws.services.s3.AmazonS3;\n+import com.amazonaws.services.s3.AmazonS3URI;\n+import com.amazonaws.services.s3.model.GetObjectRequest;\n+import com.amazonaws.services.s3.model.S3ObjectInputStream;\n+import java.io.IOException;\n+import java.util.Arrays;\n+import org.apache.iceberg.io.SeekableInputStream;\n+import org.apache.iceberg.relocated.com.google.common.base.Joiner;\n+import org.apache.iceberg.relocated.com.google.common.base.Preconditions;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class S3InputStream extends SeekableInputStream {\n+  private static final Logger LOG = LoggerFactory.getLogger(S3InputStream.class);\n+\n+  private final StackTraceElement[] createStack;\n+  private final AmazonS3 s3;\n+  private final AmazonS3URI location;\n+\n+  private S3ObjectInputStream stream;\n+  private long pos = 0;\n+  private long next = 0;\n+  private boolean closed = false;\n+\n+  private int skipSize = 1024 * 1024;\n+\n+  public S3InputStream(AmazonS3 s3, AmazonS3URI location) {\n+    this.s3 = s3;\n+    this.location = location;\n+\n+    createStack = Thread.currentThread().getStackTrace();\n+  }\n+\n+  @Override\n+  public long getPos() {\n+    return pos;\n+  }\n+\n+  @Override\n+  public void seek(long newPos) {\n+    Preconditions.checkState(!closed, \"already closed\");\n+    Preconditions.checkArgument(newPos >= 0, \"position is negative: %s\", newPos);\n+\n+    // this allows a seek beyond the end of the stream but the next read will fail\n+    next = newPos;\n+  }\n+\n+  @Override\n+  public int read() {\n+    // This stream is wrapped with BufferedInputStream, so this method should never be called\n+    throw new UnsupportedOperationException();\n+  }\n+\n+  @Override\n+  public int read(byte[] b, int off, int len) throws IOException {\n+    Preconditions.checkState(!closed, \"already closed\");\n+    positionStream();\n+\n+    int bytesRead = stream.read(b, off, len);\n+    pos += bytesRead;\n+    next += bytesRead;\n+\n+    return bytesRead;\n+  }\n+\n+  @Override\n+  public void close() throws IOException {\n+    super.close();\n+    closed = true;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjc2MTczOA=="}, "originalCommit": {"oid": "200a8d7eec2947c115556cf2e1332de52d754bff"}, "originalPosition": 90}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0ODQ2NDgwOnYy", "diffSide": "RIGHT", "path": "aws/src/main/java/org/apache/iceberg/aws/s3/S3InputStream.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMFQwODowNzoxMVrOHfeLFg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQxNTo1NzoyN1rOHhaHBA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjc2MjI2Mg==", "bodyText": "Should a null check be added here to ensure that the previous stream was closed / aborted? I see that you're using this function immediately after calling closeStream, which has the null check. However, I worry that in a future refactor the null check between closeStream and openStream will be lost and then resources will be potentially leaked. But this is not a blocker since it does currently have the check between them.", "url": "https://github.com/apache/iceberg/pull/1573#discussion_r502762262", "createdAt": "2020-10-10T08:07:11Z", "author": {"login": "kbendick"}, "path": "aws/src/main/java/org/apache/iceberg/aws/s3/S3InputStream.java", "diffHunk": "@@ -0,0 +1,150 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.aws.s3;\n+\n+import com.amazonaws.services.s3.AmazonS3;\n+import com.amazonaws.services.s3.AmazonS3URI;\n+import com.amazonaws.services.s3.model.GetObjectRequest;\n+import com.amazonaws.services.s3.model.S3ObjectInputStream;\n+import java.io.IOException;\n+import java.util.Arrays;\n+import org.apache.iceberg.io.SeekableInputStream;\n+import org.apache.iceberg.relocated.com.google.common.base.Joiner;\n+import org.apache.iceberg.relocated.com.google.common.base.Preconditions;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class S3InputStream extends SeekableInputStream {\n+  private static final Logger LOG = LoggerFactory.getLogger(S3InputStream.class);\n+\n+  private final StackTraceElement[] createStack;\n+  private final AmazonS3 s3;\n+  private final AmazonS3URI location;\n+\n+  private S3ObjectInputStream stream;\n+  private long pos = 0;\n+  private long next = 0;\n+  private boolean closed = false;\n+\n+  private int skipSize = 1024 * 1024;\n+\n+  public S3InputStream(AmazonS3 s3, AmazonS3URI location) {\n+    this.s3 = s3;\n+    this.location = location;\n+\n+    createStack = Thread.currentThread().getStackTrace();\n+  }\n+\n+  @Override\n+  public long getPos() {\n+    return pos;\n+  }\n+\n+  @Override\n+  public void seek(long newPos) {\n+    Preconditions.checkState(!closed, \"already closed\");\n+    Preconditions.checkArgument(newPos >= 0, \"position is negative: %s\", newPos);\n+\n+    // this allows a seek beyond the end of the stream but the next read will fail\n+    next = newPos;\n+  }\n+\n+  @Override\n+  public int read() {\n+    // This stream is wrapped with BufferedInputStream, so this method should never be called\n+    throw new UnsupportedOperationException();\n+  }\n+\n+  @Override\n+  public int read(byte[] b, int off, int len) throws IOException {\n+    Preconditions.checkState(!closed, \"already closed\");\n+    positionStream();\n+\n+    int bytesRead = stream.read(b, off, len);\n+    pos += bytesRead;\n+    next += bytesRead;\n+\n+    return bytesRead;\n+  }\n+\n+  @Override\n+  public void close() throws IOException {\n+    super.close();\n+    closed = true;\n+  }\n+\n+  private void positionStream() throws IOException {\n+    if ((stream != null) && (next == pos)) {\n+      // already at specified position\n+      return;\n+    }\n+\n+    if ((stream != null) && (next > pos)) {\n+      // seeking forwards\n+      long skip = next - pos;\n+      if (skip <= Math.max(stream.available(), skipSize)) {\n+        // already buffered or seek is small enough\n+        LOG.debug(\"Read-through seek for {} to offset {}\", location, next);\n+        try {\n+          if (stream.skip(skip) == skip) {\n+            pos = next;\n+            return;\n+          }\n+        } catch (IOException ignored) {\n+          // will retry by re-opening the stream\n+        }\n+      }\n+    }\n+\n+    // close the stream and open at desired position\n+    LOG.debug(\"Seek with new stream for {} to offset {}\", location, next);\n+    pos = next;\n+    closeStream();\n+    openStream();\n+  }\n+\n+  private void openStream() {\n+    GetObjectRequest request = new GetObjectRequest(location.getBucket(), location.getKey())\n+        .withRange(pos, Long.MAX_VALUE);\n+    stream = s3.getObject(request).getObjectContent();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "200a8d7eec2947c115556cf2e1332de52d754bff"}, "originalPosition": 126}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDc5MjgzNg==", "bodyText": "So, I changed this a little bit so that the closing is handled just prior to opening the new stream, so that there's less chance it would be leaked in the future.  I also updated to not call the sream.abort() because that is actually handled by the underlying stream and will abort if necessary.  Now we are just calling close(), which is probably more standard.", "url": "https://github.com/apache/iceberg/pull/1573#discussion_r504792836", "createdAt": "2020-10-14T15:57:27Z", "author": {"login": "danielcweeks"}, "path": "aws/src/main/java/org/apache/iceberg/aws/s3/S3InputStream.java", "diffHunk": "@@ -0,0 +1,150 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.aws.s3;\n+\n+import com.amazonaws.services.s3.AmazonS3;\n+import com.amazonaws.services.s3.AmazonS3URI;\n+import com.amazonaws.services.s3.model.GetObjectRequest;\n+import com.amazonaws.services.s3.model.S3ObjectInputStream;\n+import java.io.IOException;\n+import java.util.Arrays;\n+import org.apache.iceberg.io.SeekableInputStream;\n+import org.apache.iceberg.relocated.com.google.common.base.Joiner;\n+import org.apache.iceberg.relocated.com.google.common.base.Preconditions;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class S3InputStream extends SeekableInputStream {\n+  private static final Logger LOG = LoggerFactory.getLogger(S3InputStream.class);\n+\n+  private final StackTraceElement[] createStack;\n+  private final AmazonS3 s3;\n+  private final AmazonS3URI location;\n+\n+  private S3ObjectInputStream stream;\n+  private long pos = 0;\n+  private long next = 0;\n+  private boolean closed = false;\n+\n+  private int skipSize = 1024 * 1024;\n+\n+  public S3InputStream(AmazonS3 s3, AmazonS3URI location) {\n+    this.s3 = s3;\n+    this.location = location;\n+\n+    createStack = Thread.currentThread().getStackTrace();\n+  }\n+\n+  @Override\n+  public long getPos() {\n+    return pos;\n+  }\n+\n+  @Override\n+  public void seek(long newPos) {\n+    Preconditions.checkState(!closed, \"already closed\");\n+    Preconditions.checkArgument(newPos >= 0, \"position is negative: %s\", newPos);\n+\n+    // this allows a seek beyond the end of the stream but the next read will fail\n+    next = newPos;\n+  }\n+\n+  @Override\n+  public int read() {\n+    // This stream is wrapped with BufferedInputStream, so this method should never be called\n+    throw new UnsupportedOperationException();\n+  }\n+\n+  @Override\n+  public int read(byte[] b, int off, int len) throws IOException {\n+    Preconditions.checkState(!closed, \"already closed\");\n+    positionStream();\n+\n+    int bytesRead = stream.read(b, off, len);\n+    pos += bytesRead;\n+    next += bytesRead;\n+\n+    return bytesRead;\n+  }\n+\n+  @Override\n+  public void close() throws IOException {\n+    super.close();\n+    closed = true;\n+  }\n+\n+  private void positionStream() throws IOException {\n+    if ((stream != null) && (next == pos)) {\n+      // already at specified position\n+      return;\n+    }\n+\n+    if ((stream != null) && (next > pos)) {\n+      // seeking forwards\n+      long skip = next - pos;\n+      if (skip <= Math.max(stream.available(), skipSize)) {\n+        // already buffered or seek is small enough\n+        LOG.debug(\"Read-through seek for {} to offset {}\", location, next);\n+        try {\n+          if (stream.skip(skip) == skip) {\n+            pos = next;\n+            return;\n+          }\n+        } catch (IOException ignored) {\n+          // will retry by re-opening the stream\n+        }\n+      }\n+    }\n+\n+    // close the stream and open at desired position\n+    LOG.debug(\"Seek with new stream for {} to offset {}\", location, next);\n+    pos = next;\n+    closeStream();\n+    openStream();\n+  }\n+\n+  private void openStream() {\n+    GetObjectRequest request = new GetObjectRequest(location.getBucket(), location.getKey())\n+        .withRange(pos, Long.MAX_VALUE);\n+    stream = s3.getObject(request).getObjectContent();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjc2MjI2Mg=="}, "originalCommit": {"oid": "200a8d7eec2947c115556cf2e1332de52d754bff"}, "originalPosition": 126}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwMjI3MTUxOnYy", "diffSide": "RIGHT", "path": "aws/src/main/java/org/apache/iceberg/aws/s3/S3FileIO.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QyMjozNDo0MFrOHngKzw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QyMjozNDo0MFrOHngKzw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTE4MzU2Nw==", "bodyText": "Minor: it's hard to follow the builders within builders within builders. Might be easier to separate them out into local variables.", "url": "https://github.com/apache/iceberg/pull/1573#discussion_r511183567", "createdAt": "2020-10-23T22:34:40Z", "author": {"login": "rdblue"}, "path": "aws/src/main/java/org/apache/iceberg/aws/s3/S3FileIO.java", "diffHunk": "@@ -0,0 +1,174 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.aws.s3;\n+\n+import com.amazonaws.services.s3.AmazonS3URI;\n+import java.io.IOException;\n+import java.io.Serializable;\n+import java.util.Objects;\n+import org.apache.http.HttpStatus;\n+import org.apache.iceberg.io.FileIO;\n+import org.apache.iceberg.io.InputFile;\n+import org.apache.iceberg.io.OutputFile;\n+import org.apache.iceberg.io.PositionOutputStream;\n+import org.apache.iceberg.io.SeekableInputStream;\n+import org.apache.iceberg.util.SerializableSupplier;\n+import software.amazon.awssdk.services.s3.S3Client;\n+import software.amazon.awssdk.services.s3.model.Delete;\n+import software.amazon.awssdk.services.s3.model.DeleteObjectsRequest;\n+import software.amazon.awssdk.services.s3.model.HeadObjectRequest;\n+import software.amazon.awssdk.services.s3.model.HeadObjectResponse;\n+import software.amazon.awssdk.services.s3.model.ObjectIdentifier;\n+import software.amazon.awssdk.services.s3.model.S3Exception;\n+\n+/**\n+ * FileIO implementation backed by S3.  Locations used must follow the conventions for URIs (e.g. s3://bucket/path/..).\n+ */\n+public class S3FileIO implements FileIO, Serializable {\n+  private final SerializableSupplier<S3Client> s3;\n+  private transient S3Client client;\n+\n+  public S3FileIO(SerializableSupplier<S3Client> s3) {\n+    this.s3 = s3;\n+  }\n+\n+  @Override\n+  public InputFile newInputFile(String path) {\n+    return new S3InputFile(new AmazonS3URI(path));\n+  }\n+\n+  @Override\n+  public OutputFile newOutputFile(String path) {\n+    return new S3OutputFile(new AmazonS3URI(path));\n+  }\n+\n+  @Override\n+  public void deleteFile(String path) {\n+    AmazonS3URI location = new AmazonS3URI(path);\n+    client().deleteObjects(DeleteObjectsRequest.builder()\n+        .bucket(location.getBucket())\n+        .delete(Delete.builder()\n+            .objects(ObjectIdentifier.builder()\n+                .key(location.getKey())\n+                .build())\n+            .build())\n+        .build());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3c948aa465c01dbe8159117b95725e3c36a7d76b"}, "originalPosition": 72}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwMjI3OTI2OnYy", "diffSide": "RIGHT", "path": "aws/src/main/java/org/apache/iceberg/aws/s3/S3FileIO.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QyMjozOTowMlrOHngPWw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNFQxNjoyODozMVrOHny1sg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTE4NDczMQ==", "bodyText": "This is going to throw a NullPointerException if the object doesn't exist because getObjectMetadata returns null when it receives a 404. I think it would be better for getObjectMetadata to throw NotFoundException with a friendly error message that includes the location.", "url": "https://github.com/apache/iceberg/pull/1573#discussion_r511184731", "createdAt": "2020-10-23T22:39:02Z", "author": {"login": "rdblue"}, "path": "aws/src/main/java/org/apache/iceberg/aws/s3/S3FileIO.java", "diffHunk": "@@ -0,0 +1,174 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.aws.s3;\n+\n+import com.amazonaws.services.s3.AmazonS3URI;\n+import java.io.IOException;\n+import java.io.Serializable;\n+import java.util.Objects;\n+import org.apache.http.HttpStatus;\n+import org.apache.iceberg.io.FileIO;\n+import org.apache.iceberg.io.InputFile;\n+import org.apache.iceberg.io.OutputFile;\n+import org.apache.iceberg.io.PositionOutputStream;\n+import org.apache.iceberg.io.SeekableInputStream;\n+import org.apache.iceberg.util.SerializableSupplier;\n+import software.amazon.awssdk.services.s3.S3Client;\n+import software.amazon.awssdk.services.s3.model.Delete;\n+import software.amazon.awssdk.services.s3.model.DeleteObjectsRequest;\n+import software.amazon.awssdk.services.s3.model.HeadObjectRequest;\n+import software.amazon.awssdk.services.s3.model.HeadObjectResponse;\n+import software.amazon.awssdk.services.s3.model.ObjectIdentifier;\n+import software.amazon.awssdk.services.s3.model.S3Exception;\n+\n+/**\n+ * FileIO implementation backed by S3.  Locations used must follow the conventions for URIs (e.g. s3://bucket/path/..).\n+ */\n+public class S3FileIO implements FileIO, Serializable {\n+  private final SerializableSupplier<S3Client> s3;\n+  private transient S3Client client;\n+\n+  public S3FileIO(SerializableSupplier<S3Client> s3) {\n+    this.s3 = s3;\n+  }\n+\n+  @Override\n+  public InputFile newInputFile(String path) {\n+    return new S3InputFile(new AmazonS3URI(path));\n+  }\n+\n+  @Override\n+  public OutputFile newOutputFile(String path) {\n+    return new S3OutputFile(new AmazonS3URI(path));\n+  }\n+\n+  @Override\n+  public void deleteFile(String path) {\n+    AmazonS3URI location = new AmazonS3URI(path);\n+    client().deleteObjects(DeleteObjectsRequest.builder()\n+        .bucket(location.getBucket())\n+        .delete(Delete.builder()\n+            .objects(ObjectIdentifier.builder()\n+                .key(location.getKey())\n+                .build())\n+            .build())\n+        .build());\n+  }\n+\n+  private S3Client client() {\n+    if (client == null) {\n+      client = s3.get();\n+    }\n+    return client;\n+  }\n+\n+  public class S3InputFile implements InputFile {\n+    private final AmazonS3URI location;\n+    private HeadObjectResponse metadata;\n+\n+    public S3InputFile(AmazonS3URI location) {\n+      this.location = location;\n+    }\n+\n+    /**\n+     * Note: this may be stale if file was deleted since metadata is cached for size/existence checks.\n+     *\n+     * @return content length\n+     */\n+    @Override\n+    public long getLength() {\n+      return Objects.requireNonNull(getObjectMetadata()).contentLength();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3c948aa465c01dbe8159117b95725e3c36a7d76b"}, "originalPosition": 97}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTQ4OTQ1OA==", "bodyText": "This is pretty much how presto does this, but I've reworked the error handling so that the underlying S3 exception will propagate for getLength() if it's called on something that doesn't exist (or there is some other error).", "url": "https://github.com/apache/iceberg/pull/1573#discussion_r511489458", "createdAt": "2020-10-24T16:28:31Z", "author": {"login": "danielcweeks"}, "path": "aws/src/main/java/org/apache/iceberg/aws/s3/S3FileIO.java", "diffHunk": "@@ -0,0 +1,174 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.aws.s3;\n+\n+import com.amazonaws.services.s3.AmazonS3URI;\n+import java.io.IOException;\n+import java.io.Serializable;\n+import java.util.Objects;\n+import org.apache.http.HttpStatus;\n+import org.apache.iceberg.io.FileIO;\n+import org.apache.iceberg.io.InputFile;\n+import org.apache.iceberg.io.OutputFile;\n+import org.apache.iceberg.io.PositionOutputStream;\n+import org.apache.iceberg.io.SeekableInputStream;\n+import org.apache.iceberg.util.SerializableSupplier;\n+import software.amazon.awssdk.services.s3.S3Client;\n+import software.amazon.awssdk.services.s3.model.Delete;\n+import software.amazon.awssdk.services.s3.model.DeleteObjectsRequest;\n+import software.amazon.awssdk.services.s3.model.HeadObjectRequest;\n+import software.amazon.awssdk.services.s3.model.HeadObjectResponse;\n+import software.amazon.awssdk.services.s3.model.ObjectIdentifier;\n+import software.amazon.awssdk.services.s3.model.S3Exception;\n+\n+/**\n+ * FileIO implementation backed by S3.  Locations used must follow the conventions for URIs (e.g. s3://bucket/path/..).\n+ */\n+public class S3FileIO implements FileIO, Serializable {\n+  private final SerializableSupplier<S3Client> s3;\n+  private transient S3Client client;\n+\n+  public S3FileIO(SerializableSupplier<S3Client> s3) {\n+    this.s3 = s3;\n+  }\n+\n+  @Override\n+  public InputFile newInputFile(String path) {\n+    return new S3InputFile(new AmazonS3URI(path));\n+  }\n+\n+  @Override\n+  public OutputFile newOutputFile(String path) {\n+    return new S3OutputFile(new AmazonS3URI(path));\n+  }\n+\n+  @Override\n+  public void deleteFile(String path) {\n+    AmazonS3URI location = new AmazonS3URI(path);\n+    client().deleteObjects(DeleteObjectsRequest.builder()\n+        .bucket(location.getBucket())\n+        .delete(Delete.builder()\n+            .objects(ObjectIdentifier.builder()\n+                .key(location.getKey())\n+                .build())\n+            .build())\n+        .build());\n+  }\n+\n+  private S3Client client() {\n+    if (client == null) {\n+      client = s3.get();\n+    }\n+    return client;\n+  }\n+\n+  public class S3InputFile implements InputFile {\n+    private final AmazonS3URI location;\n+    private HeadObjectResponse metadata;\n+\n+    public S3InputFile(AmazonS3URI location) {\n+      this.location = location;\n+    }\n+\n+    /**\n+     * Note: this may be stale if file was deleted since metadata is cached for size/existence checks.\n+     *\n+     * @return content length\n+     */\n+    @Override\n+    public long getLength() {\n+      return Objects.requireNonNull(getObjectMetadata()).contentLength();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTE4NDczMQ=="}, "originalCommit": {"oid": "3c948aa465c01dbe8159117b95725e3c36a7d76b"}, "originalPosition": 97}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwMjI4ODc5OnYy", "diffSide": "RIGHT", "path": "aws/src/main/java/org/apache/iceberg/aws/s3/S3InputStream.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QyMjo0NDozMlrOHngU3w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNFQxNjozMDoxOFrOHny2cw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTE4NjE0Mw==", "bodyText": "Later, we will probably want to pass in these configuration options.", "url": "https://github.com/apache/iceberg/pull/1573#discussion_r511186143", "createdAt": "2020-10-23T22:44:32Z", "author": {"login": "rdblue"}, "path": "aws/src/main/java/org/apache/iceberg/aws/s3/S3InputStream.java", "diffHunk": "@@ -0,0 +1,154 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.aws.s3;\n+\n+import com.amazonaws.services.s3.AmazonS3URI;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.util.Arrays;\n+import org.apache.iceberg.io.SeekableInputStream;\n+import org.apache.iceberg.relocated.com.google.common.base.Joiner;\n+import org.apache.iceberg.relocated.com.google.common.base.Preconditions;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import software.amazon.awssdk.core.sync.ResponseTransformer;\n+import software.amazon.awssdk.services.s3.S3Client;\n+import software.amazon.awssdk.services.s3.model.GetObjectRequest;\n+\n+public class S3InputStream extends SeekableInputStream {\n+  private static final Logger LOG = LoggerFactory.getLogger(S3InputStream.class);\n+\n+  private final StackTraceElement[] createStack;\n+  private final S3Client s3;\n+  private final AmazonS3URI location;\n+\n+  private InputStream stream;\n+  private long pos = 0;\n+  private long next = 0;\n+  private boolean closed = false;\n+\n+  private int skipSize = 1024 * 1024;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3c948aa465c01dbe8159117b95725e3c36a7d76b"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTQ4OTY1MQ==", "bodyText": "Yes, this was the only configurable property at this point, so I didn't want to introduce the configuration options, but as we address more functionality (e.g. progressive multipart upload) we will need to find a way to deal with the property configuration as there will be many more options.", "url": "https://github.com/apache/iceberg/pull/1573#discussion_r511489651", "createdAt": "2020-10-24T16:30:18Z", "author": {"login": "danielcweeks"}, "path": "aws/src/main/java/org/apache/iceberg/aws/s3/S3InputStream.java", "diffHunk": "@@ -0,0 +1,154 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.aws.s3;\n+\n+import com.amazonaws.services.s3.AmazonS3URI;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.util.Arrays;\n+import org.apache.iceberg.io.SeekableInputStream;\n+import org.apache.iceberg.relocated.com.google.common.base.Joiner;\n+import org.apache.iceberg.relocated.com.google.common.base.Preconditions;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import software.amazon.awssdk.core.sync.ResponseTransformer;\n+import software.amazon.awssdk.services.s3.S3Client;\n+import software.amazon.awssdk.services.s3.model.GetObjectRequest;\n+\n+public class S3InputStream extends SeekableInputStream {\n+  private static final Logger LOG = LoggerFactory.getLogger(S3InputStream.class);\n+\n+  private final StackTraceElement[] createStack;\n+  private final S3Client s3;\n+  private final AmazonS3URI location;\n+\n+  private InputStream stream;\n+  private long pos = 0;\n+  private long next = 0;\n+  private boolean closed = false;\n+\n+  private int skipSize = 1024 * 1024;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTE4NjE0Mw=="}, "originalCommit": {"oid": "3c948aa465c01dbe8159117b95725e3c36a7d76b"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwMjI5NDQ3OnYy", "diffSide": "RIGHT", "path": "aws/src/main/java/org/apache/iceberg/aws/s3/S3InputStream.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QyMjo0Nzo1MFrOHngYCQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNFQxNjozMzoyNFrOHny3fQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTE4Njk1Mw==", "bodyText": "This also needs to update pos and next.", "url": "https://github.com/apache/iceberg/pull/1573#discussion_r511186953", "createdAt": "2020-10-23T22:47:50Z", "author": {"login": "rdblue"}, "path": "aws/src/main/java/org/apache/iceberg/aws/s3/S3InputStream.java", "diffHunk": "@@ -0,0 +1,154 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.aws.s3;\n+\n+import com.amazonaws.services.s3.AmazonS3URI;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.util.Arrays;\n+import org.apache.iceberg.io.SeekableInputStream;\n+import org.apache.iceberg.relocated.com.google.common.base.Joiner;\n+import org.apache.iceberg.relocated.com.google.common.base.Preconditions;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import software.amazon.awssdk.core.sync.ResponseTransformer;\n+import software.amazon.awssdk.services.s3.S3Client;\n+import software.amazon.awssdk.services.s3.model.GetObjectRequest;\n+\n+public class S3InputStream extends SeekableInputStream {\n+  private static final Logger LOG = LoggerFactory.getLogger(S3InputStream.class);\n+\n+  private final StackTraceElement[] createStack;\n+  private final S3Client s3;\n+  private final AmazonS3URI location;\n+\n+  private InputStream stream;\n+  private long pos = 0;\n+  private long next = 0;\n+  private boolean closed = false;\n+\n+  private int skipSize = 1024 * 1024;\n+\n+  public S3InputStream(S3Client s3, AmazonS3URI location) {\n+    this.s3 = s3;\n+    this.location = location;\n+\n+    createStack = Thread.currentThread().getStackTrace();\n+  }\n+\n+  @Override\n+  public long getPos() {\n+    return pos;\n+  }\n+\n+  @Override\n+  public void seek(long newPos) {\n+    Preconditions.checkState(!closed, \"already closed\");\n+    Preconditions.checkArgument(newPos >= 0, \"position is negative: %s\", newPos);\n+\n+    // this allows a seek beyond the end of the stream but the next read will fail\n+    next = newPos;\n+  }\n+\n+  @Override\n+  public int read() throws IOException {\n+    return stream.read();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3c948aa465c01dbe8159117b95725e3c36a7d76b"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTQ4OTkxNw==", "bodyText": "Nice catch, clearly didn't look closely since we don't use this.  I'll add some tests as well just to make sure it's covered.", "url": "https://github.com/apache/iceberg/pull/1573#discussion_r511489917", "createdAt": "2020-10-24T16:33:24Z", "author": {"login": "danielcweeks"}, "path": "aws/src/main/java/org/apache/iceberg/aws/s3/S3InputStream.java", "diffHunk": "@@ -0,0 +1,154 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.aws.s3;\n+\n+import com.amazonaws.services.s3.AmazonS3URI;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.util.Arrays;\n+import org.apache.iceberg.io.SeekableInputStream;\n+import org.apache.iceberg.relocated.com.google.common.base.Joiner;\n+import org.apache.iceberg.relocated.com.google.common.base.Preconditions;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import software.amazon.awssdk.core.sync.ResponseTransformer;\n+import software.amazon.awssdk.services.s3.S3Client;\n+import software.amazon.awssdk.services.s3.model.GetObjectRequest;\n+\n+public class S3InputStream extends SeekableInputStream {\n+  private static final Logger LOG = LoggerFactory.getLogger(S3InputStream.class);\n+\n+  private final StackTraceElement[] createStack;\n+  private final S3Client s3;\n+  private final AmazonS3URI location;\n+\n+  private InputStream stream;\n+  private long pos = 0;\n+  private long next = 0;\n+  private boolean closed = false;\n+\n+  private int skipSize = 1024 * 1024;\n+\n+  public S3InputStream(S3Client s3, AmazonS3URI location) {\n+    this.s3 = s3;\n+    this.location = location;\n+\n+    createStack = Thread.currentThread().getStackTrace();\n+  }\n+\n+  @Override\n+  public long getPos() {\n+    return pos;\n+  }\n+\n+  @Override\n+  public void seek(long newPos) {\n+    Preconditions.checkState(!closed, \"already closed\");\n+    Preconditions.checkArgument(newPos >= 0, \"position is negative: %s\", newPos);\n+\n+    // this allows a seek beyond the end of the stream but the next read will fail\n+    next = newPos;\n+  }\n+\n+  @Override\n+  public int read() throws IOException {\n+    return stream.read();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTE4Njk1Mw=="}, "originalCommit": {"oid": "3c948aa465c01dbe8159117b95725e3c36a7d76b"}, "originalPosition": 72}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwMjI5NjE4OnYy", "diffSide": "RIGHT", "path": "aws/src/main/java/org/apache/iceberg/aws/s3/S3InputStream.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QyMjo0ODo1NVrOHngZDA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNFQxNjozNDozM1rOHny31g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTE4NzIxMg==", "bodyText": "Nit: we mostly use sentence case for error messages, and try to include the intent: \"Cannot read: already closed\"", "url": "https://github.com/apache/iceberg/pull/1573#discussion_r511187212", "createdAt": "2020-10-23T22:48:55Z", "author": {"login": "rdblue"}, "path": "aws/src/main/java/org/apache/iceberg/aws/s3/S3InputStream.java", "diffHunk": "@@ -0,0 +1,154 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.aws.s3;\n+\n+import com.amazonaws.services.s3.AmazonS3URI;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.util.Arrays;\n+import org.apache.iceberg.io.SeekableInputStream;\n+import org.apache.iceberg.relocated.com.google.common.base.Joiner;\n+import org.apache.iceberg.relocated.com.google.common.base.Preconditions;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import software.amazon.awssdk.core.sync.ResponseTransformer;\n+import software.amazon.awssdk.services.s3.S3Client;\n+import software.amazon.awssdk.services.s3.model.GetObjectRequest;\n+\n+public class S3InputStream extends SeekableInputStream {\n+  private static final Logger LOG = LoggerFactory.getLogger(S3InputStream.class);\n+\n+  private final StackTraceElement[] createStack;\n+  private final S3Client s3;\n+  private final AmazonS3URI location;\n+\n+  private InputStream stream;\n+  private long pos = 0;\n+  private long next = 0;\n+  private boolean closed = false;\n+\n+  private int skipSize = 1024 * 1024;\n+\n+  public S3InputStream(S3Client s3, AmazonS3URI location) {\n+    this.s3 = s3;\n+    this.location = location;\n+\n+    createStack = Thread.currentThread().getStackTrace();\n+  }\n+\n+  @Override\n+  public long getPos() {\n+    return pos;\n+  }\n+\n+  @Override\n+  public void seek(long newPos) {\n+    Preconditions.checkState(!closed, \"already closed\");\n+    Preconditions.checkArgument(newPos >= 0, \"position is negative: %s\", newPos);\n+\n+    // this allows a seek beyond the end of the stream but the next read will fail\n+    next = newPos;\n+  }\n+\n+  @Override\n+  public int read() throws IOException {\n+    return stream.read();\n+  }\n+\n+  @Override\n+  public int read(byte[] b, int off, int len) throws IOException {\n+    Preconditions.checkState(!closed, \"already closed\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3c948aa465c01dbe8159117b95725e3c36a7d76b"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTQ5MDAwNg==", "bodyText": "Updated message.", "url": "https://github.com/apache/iceberg/pull/1573#discussion_r511490006", "createdAt": "2020-10-24T16:34:33Z", "author": {"login": "danielcweeks"}, "path": "aws/src/main/java/org/apache/iceberg/aws/s3/S3InputStream.java", "diffHunk": "@@ -0,0 +1,154 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.aws.s3;\n+\n+import com.amazonaws.services.s3.AmazonS3URI;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.util.Arrays;\n+import org.apache.iceberg.io.SeekableInputStream;\n+import org.apache.iceberg.relocated.com.google.common.base.Joiner;\n+import org.apache.iceberg.relocated.com.google.common.base.Preconditions;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import software.amazon.awssdk.core.sync.ResponseTransformer;\n+import software.amazon.awssdk.services.s3.S3Client;\n+import software.amazon.awssdk.services.s3.model.GetObjectRequest;\n+\n+public class S3InputStream extends SeekableInputStream {\n+  private static final Logger LOG = LoggerFactory.getLogger(S3InputStream.class);\n+\n+  private final StackTraceElement[] createStack;\n+  private final S3Client s3;\n+  private final AmazonS3URI location;\n+\n+  private InputStream stream;\n+  private long pos = 0;\n+  private long next = 0;\n+  private boolean closed = false;\n+\n+  private int skipSize = 1024 * 1024;\n+\n+  public S3InputStream(S3Client s3, AmazonS3URI location) {\n+    this.s3 = s3;\n+    this.location = location;\n+\n+    createStack = Thread.currentThread().getStackTrace();\n+  }\n+\n+  @Override\n+  public long getPos() {\n+    return pos;\n+  }\n+\n+  @Override\n+  public void seek(long newPos) {\n+    Preconditions.checkState(!closed, \"already closed\");\n+    Preconditions.checkArgument(newPos >= 0, \"position is negative: %s\", newPos);\n+\n+    // this allows a seek beyond the end of the stream but the next read will fail\n+    next = newPos;\n+  }\n+\n+  @Override\n+  public int read() throws IOException {\n+    return stream.read();\n+  }\n+\n+  @Override\n+  public int read(byte[] b, int off, int len) throws IOException {\n+    Preconditions.checkState(!closed, \"already closed\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTE4NzIxMg=="}, "originalCommit": {"oid": "3c948aa465c01dbe8159117b95725e3c36a7d76b"}, "originalPosition": 77}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwMjMwMTIxOnYy", "diffSide": "RIGHT", "path": "aws/src/main/java/org/apache/iceberg/aws/s3/S3InputStream.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QyMjo1MTo0OVrOHngb9g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNFQxNjozOToxOFrOHny5cw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTE4Nzk1OA==", "bodyText": "Shouldn't this be Math.min? If the stream has 5MB left and the skip size is 1MB, then a 2MB skip should not read through.", "url": "https://github.com/apache/iceberg/pull/1573#discussion_r511187958", "createdAt": "2020-10-23T22:51:49Z", "author": {"login": "rdblue"}, "path": "aws/src/main/java/org/apache/iceberg/aws/s3/S3InputStream.java", "diffHunk": "@@ -0,0 +1,154 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.aws.s3;\n+\n+import com.amazonaws.services.s3.AmazonS3URI;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.util.Arrays;\n+import org.apache.iceberg.io.SeekableInputStream;\n+import org.apache.iceberg.relocated.com.google.common.base.Joiner;\n+import org.apache.iceberg.relocated.com.google.common.base.Preconditions;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import software.amazon.awssdk.core.sync.ResponseTransformer;\n+import software.amazon.awssdk.services.s3.S3Client;\n+import software.amazon.awssdk.services.s3.model.GetObjectRequest;\n+\n+public class S3InputStream extends SeekableInputStream {\n+  private static final Logger LOG = LoggerFactory.getLogger(S3InputStream.class);\n+\n+  private final StackTraceElement[] createStack;\n+  private final S3Client s3;\n+  private final AmazonS3URI location;\n+\n+  private InputStream stream;\n+  private long pos = 0;\n+  private long next = 0;\n+  private boolean closed = false;\n+\n+  private int skipSize = 1024 * 1024;\n+\n+  public S3InputStream(S3Client s3, AmazonS3URI location) {\n+    this.s3 = s3;\n+    this.location = location;\n+\n+    createStack = Thread.currentThread().getStackTrace();\n+  }\n+\n+  @Override\n+  public long getPos() {\n+    return pos;\n+  }\n+\n+  @Override\n+  public void seek(long newPos) {\n+    Preconditions.checkState(!closed, \"already closed\");\n+    Preconditions.checkArgument(newPos >= 0, \"position is negative: %s\", newPos);\n+\n+    // this allows a seek beyond the end of the stream but the next read will fail\n+    next = newPos;\n+  }\n+\n+  @Override\n+  public int read() throws IOException {\n+    return stream.read();\n+  }\n+\n+  @Override\n+  public int read(byte[] b, int off, int len) throws IOException {\n+    Preconditions.checkState(!closed, \"already closed\");\n+    positionStream();\n+\n+    int bytesRead = stream.read(b, off, len);\n+    pos += bytesRead;\n+    next += bytesRead;\n+\n+    return bytesRead;\n+  }\n+\n+  @Override\n+  public void close() throws IOException {\n+    super.close();\n+    closed = true;\n+    closeStream();\n+  }\n+\n+  private void positionStream() throws IOException {\n+    if ((stream != null) && (next == pos)) {\n+      // already at specified position\n+      return;\n+    }\n+\n+    if ((stream != null) && (next > pos)) {\n+      // seeking forwards\n+      long skip = next - pos;\n+      if (skip <= Math.max(stream.available(), skipSize)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3c948aa465c01dbe8159117b95725e3c36a7d76b"}, "originalPosition": 103}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTQ5MDQxOQ==", "bodyText": "I think you might be misinterpreting what stream.available() means here.  That should be the number of bytes that can be skipped or read without incurring another blocking io call (not how much is left in the stream).  In this context, that would likely mean that the aws sdk has already internally buffered more than the amount we want to skip, so it would be wasteful to close the current stream and initiate a new request.  In this case want to make sure that the skip is less than the max of buffered or skip limit.", "url": "https://github.com/apache/iceberg/pull/1573#discussion_r511490419", "createdAt": "2020-10-24T16:39:18Z", "author": {"login": "danielcweeks"}, "path": "aws/src/main/java/org/apache/iceberg/aws/s3/S3InputStream.java", "diffHunk": "@@ -0,0 +1,154 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.aws.s3;\n+\n+import com.amazonaws.services.s3.AmazonS3URI;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.util.Arrays;\n+import org.apache.iceberg.io.SeekableInputStream;\n+import org.apache.iceberg.relocated.com.google.common.base.Joiner;\n+import org.apache.iceberg.relocated.com.google.common.base.Preconditions;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import software.amazon.awssdk.core.sync.ResponseTransformer;\n+import software.amazon.awssdk.services.s3.S3Client;\n+import software.amazon.awssdk.services.s3.model.GetObjectRequest;\n+\n+public class S3InputStream extends SeekableInputStream {\n+  private static final Logger LOG = LoggerFactory.getLogger(S3InputStream.class);\n+\n+  private final StackTraceElement[] createStack;\n+  private final S3Client s3;\n+  private final AmazonS3URI location;\n+\n+  private InputStream stream;\n+  private long pos = 0;\n+  private long next = 0;\n+  private boolean closed = false;\n+\n+  private int skipSize = 1024 * 1024;\n+\n+  public S3InputStream(S3Client s3, AmazonS3URI location) {\n+    this.s3 = s3;\n+    this.location = location;\n+\n+    createStack = Thread.currentThread().getStackTrace();\n+  }\n+\n+  @Override\n+  public long getPos() {\n+    return pos;\n+  }\n+\n+  @Override\n+  public void seek(long newPos) {\n+    Preconditions.checkState(!closed, \"already closed\");\n+    Preconditions.checkArgument(newPos >= 0, \"position is negative: %s\", newPos);\n+\n+    // this allows a seek beyond the end of the stream but the next read will fail\n+    next = newPos;\n+  }\n+\n+  @Override\n+  public int read() throws IOException {\n+    return stream.read();\n+  }\n+\n+  @Override\n+  public int read(byte[] b, int off, int len) throws IOException {\n+    Preconditions.checkState(!closed, \"already closed\");\n+    positionStream();\n+\n+    int bytesRead = stream.read(b, off, len);\n+    pos += bytesRead;\n+    next += bytesRead;\n+\n+    return bytesRead;\n+  }\n+\n+  @Override\n+  public void close() throws IOException {\n+    super.close();\n+    closed = true;\n+    closeStream();\n+  }\n+\n+  private void positionStream() throws IOException {\n+    if ((stream != null) && (next == pos)) {\n+      // already at specified position\n+      return;\n+    }\n+\n+    if ((stream != null) && (next > pos)) {\n+      // seeking forwards\n+      long skip = next - pos;\n+      if (skip <= Math.max(stream.available(), skipSize)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTE4Nzk1OA=="}, "originalCommit": {"oid": "3c948aa465c01dbe8159117b95725e3c36a7d76b"}, "originalPosition": 103}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwMjMxMDI1OnYy", "diffSide": "RIGHT", "path": "aws/src/main/java/org/apache/iceberg/aws/s3/S3InputStream.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QyMjo1ODowMFrOHnghWQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNFQxNjo0MTozMFrOHny6Og==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTE4OTMzNw==", "bodyText": "InputStream.skip doesn't guarantee that the bytes skipped is equal to the request: \"The skip method may, for a variety of reasons, end up skipping over some smaller number of bytes, possibly 0.\"\nIn this case, if anything other than the expected number of bytes is skipped, then this will fall back to reconnecting.\nI don't think that's the desired behavior because S3 may already be sending bytes to the reader (and it will be faster to read through) but the skip returns early because not as many bytes as requested were immediately available. I think that this should probably use a skipFully method that loops and skips until there are no more bytes to read through.", "url": "https://github.com/apache/iceberg/pull/1573#discussion_r511189337", "createdAt": "2020-10-23T22:58:00Z", "author": {"login": "rdblue"}, "path": "aws/src/main/java/org/apache/iceberg/aws/s3/S3InputStream.java", "diffHunk": "@@ -0,0 +1,154 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.aws.s3;\n+\n+import com.amazonaws.services.s3.AmazonS3URI;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.util.Arrays;\n+import org.apache.iceberg.io.SeekableInputStream;\n+import org.apache.iceberg.relocated.com.google.common.base.Joiner;\n+import org.apache.iceberg.relocated.com.google.common.base.Preconditions;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import software.amazon.awssdk.core.sync.ResponseTransformer;\n+import software.amazon.awssdk.services.s3.S3Client;\n+import software.amazon.awssdk.services.s3.model.GetObjectRequest;\n+\n+public class S3InputStream extends SeekableInputStream {\n+  private static final Logger LOG = LoggerFactory.getLogger(S3InputStream.class);\n+\n+  private final StackTraceElement[] createStack;\n+  private final S3Client s3;\n+  private final AmazonS3URI location;\n+\n+  private InputStream stream;\n+  private long pos = 0;\n+  private long next = 0;\n+  private boolean closed = false;\n+\n+  private int skipSize = 1024 * 1024;\n+\n+  public S3InputStream(S3Client s3, AmazonS3URI location) {\n+    this.s3 = s3;\n+    this.location = location;\n+\n+    createStack = Thread.currentThread().getStackTrace();\n+  }\n+\n+  @Override\n+  public long getPos() {\n+    return pos;\n+  }\n+\n+  @Override\n+  public void seek(long newPos) {\n+    Preconditions.checkState(!closed, \"already closed\");\n+    Preconditions.checkArgument(newPos >= 0, \"position is negative: %s\", newPos);\n+\n+    // this allows a seek beyond the end of the stream but the next read will fail\n+    next = newPos;\n+  }\n+\n+  @Override\n+  public int read() throws IOException {\n+    return stream.read();\n+  }\n+\n+  @Override\n+  public int read(byte[] b, int off, int len) throws IOException {\n+    Preconditions.checkState(!closed, \"already closed\");\n+    positionStream();\n+\n+    int bytesRead = stream.read(b, off, len);\n+    pos += bytesRead;\n+    next += bytesRead;\n+\n+    return bytesRead;\n+  }\n+\n+  @Override\n+  public void close() throws IOException {\n+    super.close();\n+    closed = true;\n+    closeStream();\n+  }\n+\n+  private void positionStream() throws IOException {\n+    if ((stream != null) && (next == pos)) {\n+      // already at specified position\n+      return;\n+    }\n+\n+    if ((stream != null) && (next > pos)) {\n+      // seeking forwards\n+      long skip = next - pos;\n+      if (skip <= Math.max(stream.available(), skipSize)) {\n+        // already buffered or seek is small enough\n+        LOG.debug(\"Read-through seek for {} to offset {}\", location, next);\n+        try {\n+          if (stream.skip(skip) == skip) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3c948aa465c01dbe8159117b95725e3c36a7d76b"}, "originalPosition": 107}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTQ5MDYxOA==", "bodyText": "I actually agree with this and flagged it when I saw what presto was doing.  I believe the Presto implementation relies skip skipping correctly or it just falls back to closing the stream and opening a new one (which seems really wasteful).\nI'll update this to skip fully.", "url": "https://github.com/apache/iceberg/pull/1573#discussion_r511490618", "createdAt": "2020-10-24T16:41:30Z", "author": {"login": "danielcweeks"}, "path": "aws/src/main/java/org/apache/iceberg/aws/s3/S3InputStream.java", "diffHunk": "@@ -0,0 +1,154 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.aws.s3;\n+\n+import com.amazonaws.services.s3.AmazonS3URI;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.util.Arrays;\n+import org.apache.iceberg.io.SeekableInputStream;\n+import org.apache.iceberg.relocated.com.google.common.base.Joiner;\n+import org.apache.iceberg.relocated.com.google.common.base.Preconditions;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import software.amazon.awssdk.core.sync.ResponseTransformer;\n+import software.amazon.awssdk.services.s3.S3Client;\n+import software.amazon.awssdk.services.s3.model.GetObjectRequest;\n+\n+public class S3InputStream extends SeekableInputStream {\n+  private static final Logger LOG = LoggerFactory.getLogger(S3InputStream.class);\n+\n+  private final StackTraceElement[] createStack;\n+  private final S3Client s3;\n+  private final AmazonS3URI location;\n+\n+  private InputStream stream;\n+  private long pos = 0;\n+  private long next = 0;\n+  private boolean closed = false;\n+\n+  private int skipSize = 1024 * 1024;\n+\n+  public S3InputStream(S3Client s3, AmazonS3URI location) {\n+    this.s3 = s3;\n+    this.location = location;\n+\n+    createStack = Thread.currentThread().getStackTrace();\n+  }\n+\n+  @Override\n+  public long getPos() {\n+    return pos;\n+  }\n+\n+  @Override\n+  public void seek(long newPos) {\n+    Preconditions.checkState(!closed, \"already closed\");\n+    Preconditions.checkArgument(newPos >= 0, \"position is negative: %s\", newPos);\n+\n+    // this allows a seek beyond the end of the stream but the next read will fail\n+    next = newPos;\n+  }\n+\n+  @Override\n+  public int read() throws IOException {\n+    return stream.read();\n+  }\n+\n+  @Override\n+  public int read(byte[] b, int off, int len) throws IOException {\n+    Preconditions.checkState(!closed, \"already closed\");\n+    positionStream();\n+\n+    int bytesRead = stream.read(b, off, len);\n+    pos += bytesRead;\n+    next += bytesRead;\n+\n+    return bytesRead;\n+  }\n+\n+  @Override\n+  public void close() throws IOException {\n+    super.close();\n+    closed = true;\n+    closeStream();\n+  }\n+\n+  private void positionStream() throws IOException {\n+    if ((stream != null) && (next == pos)) {\n+      // already at specified position\n+      return;\n+    }\n+\n+    if ((stream != null) && (next > pos)) {\n+      // seeking forwards\n+      long skip = next - pos;\n+      if (skip <= Math.max(stream.available(), skipSize)) {\n+        // already buffered or seek is small enough\n+        LOG.debug(\"Read-through seek for {} to offset {}\", location, next);\n+        try {\n+          if (stream.skip(skip) == skip) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTE4OTMzNw=="}, "originalCommit": {"oid": "3c948aa465c01dbe8159117b95725e3c36a7d76b"}, "originalPosition": 107}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwMjMxMTk4OnYy", "diffSide": "RIGHT", "path": "aws/src/main/java/org/apache/iceberg/aws/s3/S3InputStream.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QyMjo1OTowNVrOHngiRQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNFQxNjo0NDozN1rOHny7LA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTE4OTU3Mw==", "bodyText": "This is weird. The format for this argument is \"bytes=(num)-\"?", "url": "https://github.com/apache/iceberg/pull/1573#discussion_r511189573", "createdAt": "2020-10-23T22:59:05Z", "author": {"login": "rdblue"}, "path": "aws/src/main/java/org/apache/iceberg/aws/s3/S3InputStream.java", "diffHunk": "@@ -0,0 +1,154 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.aws.s3;\n+\n+import com.amazonaws.services.s3.AmazonS3URI;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.util.Arrays;\n+import org.apache.iceberg.io.SeekableInputStream;\n+import org.apache.iceberg.relocated.com.google.common.base.Joiner;\n+import org.apache.iceberg.relocated.com.google.common.base.Preconditions;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import software.amazon.awssdk.core.sync.ResponseTransformer;\n+import software.amazon.awssdk.services.s3.S3Client;\n+import software.amazon.awssdk.services.s3.model.GetObjectRequest;\n+\n+public class S3InputStream extends SeekableInputStream {\n+  private static final Logger LOG = LoggerFactory.getLogger(S3InputStream.class);\n+\n+  private final StackTraceElement[] createStack;\n+  private final S3Client s3;\n+  private final AmazonS3URI location;\n+\n+  private InputStream stream;\n+  private long pos = 0;\n+  private long next = 0;\n+  private boolean closed = false;\n+\n+  private int skipSize = 1024 * 1024;\n+\n+  public S3InputStream(S3Client s3, AmazonS3URI location) {\n+    this.s3 = s3;\n+    this.location = location;\n+\n+    createStack = Thread.currentThread().getStackTrace();\n+  }\n+\n+  @Override\n+  public long getPos() {\n+    return pos;\n+  }\n+\n+  @Override\n+  public void seek(long newPos) {\n+    Preconditions.checkState(!closed, \"already closed\");\n+    Preconditions.checkArgument(newPos >= 0, \"position is negative: %s\", newPos);\n+\n+    // this allows a seek beyond the end of the stream but the next read will fail\n+    next = newPos;\n+  }\n+\n+  @Override\n+  public int read() throws IOException {\n+    return stream.read();\n+  }\n+\n+  @Override\n+  public int read(byte[] b, int off, int len) throws IOException {\n+    Preconditions.checkState(!closed, \"already closed\");\n+    positionStream();\n+\n+    int bytesRead = stream.read(b, off, len);\n+    pos += bytesRead;\n+    next += bytesRead;\n+\n+    return bytesRead;\n+  }\n+\n+  @Override\n+  public void close() throws IOException {\n+    super.close();\n+    closed = true;\n+    closeStream();\n+  }\n+\n+  private void positionStream() throws IOException {\n+    if ((stream != null) && (next == pos)) {\n+      // already at specified position\n+      return;\n+    }\n+\n+    if ((stream != null) && (next > pos)) {\n+      // seeking forwards\n+      long skip = next - pos;\n+      if (skip <= Math.max(stream.available(), skipSize)) {\n+        // already buffered or seek is small enough\n+        LOG.debug(\"Read-through seek for {} to offset {}\", location, next);\n+        try {\n+          if (stream.skip(skip) == skip) {\n+            pos = next;\n+            return;\n+          }\n+        } catch (IOException ignored) {\n+          // will retry by re-opening the stream\n+        }\n+      }\n+    }\n+\n+    // close the stream and open at desired position\n+    LOG.debug(\"Seek with new stream for {} to offset {}\", location, next);\n+    pos = next;\n+    openStream();\n+  }\n+\n+  private void openStream() throws IOException {\n+    GetObjectRequest request = GetObjectRequest.builder()\n+        .bucket(location.getBucket())\n+        .key(location.getKey())\n+        .range(String.format(\"bytes=%s-\", pos))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3c948aa465c01dbe8159117b95725e3c36a7d76b"}, "originalPosition": 127}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTQ5MDg2MA==", "bodyText": "Yeah, I made a comment about this above as well. The v2 way they handle range via the API is based off of rfc2616-sec14 and the API only exposes the ability to set this string.  It feels very awkward compared to the v1 API that exposes the range as long with options for start and end of range.  Weird, but I don't see a better option.", "url": "https://github.com/apache/iceberg/pull/1573#discussion_r511490860", "createdAt": "2020-10-24T16:44:37Z", "author": {"login": "danielcweeks"}, "path": "aws/src/main/java/org/apache/iceberg/aws/s3/S3InputStream.java", "diffHunk": "@@ -0,0 +1,154 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.aws.s3;\n+\n+import com.amazonaws.services.s3.AmazonS3URI;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.util.Arrays;\n+import org.apache.iceberg.io.SeekableInputStream;\n+import org.apache.iceberg.relocated.com.google.common.base.Joiner;\n+import org.apache.iceberg.relocated.com.google.common.base.Preconditions;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import software.amazon.awssdk.core.sync.ResponseTransformer;\n+import software.amazon.awssdk.services.s3.S3Client;\n+import software.amazon.awssdk.services.s3.model.GetObjectRequest;\n+\n+public class S3InputStream extends SeekableInputStream {\n+  private static final Logger LOG = LoggerFactory.getLogger(S3InputStream.class);\n+\n+  private final StackTraceElement[] createStack;\n+  private final S3Client s3;\n+  private final AmazonS3URI location;\n+\n+  private InputStream stream;\n+  private long pos = 0;\n+  private long next = 0;\n+  private boolean closed = false;\n+\n+  private int skipSize = 1024 * 1024;\n+\n+  public S3InputStream(S3Client s3, AmazonS3URI location) {\n+    this.s3 = s3;\n+    this.location = location;\n+\n+    createStack = Thread.currentThread().getStackTrace();\n+  }\n+\n+  @Override\n+  public long getPos() {\n+    return pos;\n+  }\n+\n+  @Override\n+  public void seek(long newPos) {\n+    Preconditions.checkState(!closed, \"already closed\");\n+    Preconditions.checkArgument(newPos >= 0, \"position is negative: %s\", newPos);\n+\n+    // this allows a seek beyond the end of the stream but the next read will fail\n+    next = newPos;\n+  }\n+\n+  @Override\n+  public int read() throws IOException {\n+    return stream.read();\n+  }\n+\n+  @Override\n+  public int read(byte[] b, int off, int len) throws IOException {\n+    Preconditions.checkState(!closed, \"already closed\");\n+    positionStream();\n+\n+    int bytesRead = stream.read(b, off, len);\n+    pos += bytesRead;\n+    next += bytesRead;\n+\n+    return bytesRead;\n+  }\n+\n+  @Override\n+  public void close() throws IOException {\n+    super.close();\n+    closed = true;\n+    closeStream();\n+  }\n+\n+  private void positionStream() throws IOException {\n+    if ((stream != null) && (next == pos)) {\n+      // already at specified position\n+      return;\n+    }\n+\n+    if ((stream != null) && (next > pos)) {\n+      // seeking forwards\n+      long skip = next - pos;\n+      if (skip <= Math.max(stream.available(), skipSize)) {\n+        // already buffered or seek is small enough\n+        LOG.debug(\"Read-through seek for {} to offset {}\", location, next);\n+        try {\n+          if (stream.skip(skip) == skip) {\n+            pos = next;\n+            return;\n+          }\n+        } catch (IOException ignored) {\n+          // will retry by re-opening the stream\n+        }\n+      }\n+    }\n+\n+    // close the stream and open at desired position\n+    LOG.debug(\"Seek with new stream for {} to offset {}\", location, next);\n+    pos = next;\n+    openStream();\n+  }\n+\n+  private void openStream() throws IOException {\n+    GetObjectRequest request = GetObjectRequest.builder()\n+        .bucket(location.getBucket())\n+        .key(location.getKey())\n+        .range(String.format(\"bytes=%s-\", pos))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTE4OTU3Mw=="}, "originalCommit": {"oid": "3c948aa465c01dbe8159117b95725e3c36a7d76b"}, "originalPosition": 127}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwMjMxNTYzOnYy", "diffSide": "RIGHT", "path": "aws/src/main/java/org/apache/iceberg/aws/s3/S3OutputStream.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QyMzowMToxNFrOHngkOw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxNTo1MjoyOVrOHoWPmw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTE5MDA3NQ==", "bodyText": "The stream is always non-null. Should we remove this check?", "url": "https://github.com/apache/iceberg/pull/1573#discussion_r511190075", "createdAt": "2020-10-23T23:01:14Z", "author": {"login": "rdblue"}, "path": "aws/src/main/java/org/apache/iceberg/aws/s3/S3OutputStream.java", "diffHunk": "@@ -0,0 +1,114 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.aws.s3;\n+\n+import com.amazonaws.services.s3.AmazonS3URI;\n+import java.io.BufferedOutputStream;\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.io.OutputStream;\n+import java.util.Arrays;\n+import org.apache.iceberg.io.PositionOutputStream;\n+import org.apache.iceberg.relocated.com.google.common.base.Joiner;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import software.amazon.awssdk.core.sync.RequestBody;\n+import software.amazon.awssdk.services.s3.S3Client;\n+import software.amazon.awssdk.services.s3.model.PutObjectRequest;\n+\n+public class S3OutputStream extends PositionOutputStream {\n+  private static final Logger LOG = LoggerFactory.getLogger(S3OutputStream.class);\n+\n+  private final StackTraceElement[] createStack;\n+  private final S3Client s3;\n+  private final AmazonS3URI location;\n+\n+  private final OutputStream stream;\n+  private final File stagingFile;\n+  private long pos = 0;\n+\n+  private boolean closed = false;\n+\n+  public S3OutputStream(S3Client s3, AmazonS3URI location) throws IOException {\n+    this.s3 = s3;\n+    this.location = location;\n+\n+    createStack = Thread.currentThread().getStackTrace();\n+    stagingFile = File.createTempFile(\"s3fileio-\", \".tmp\");\n+    stream = new BufferedOutputStream(new FileOutputStream(stagingFile));\n+\n+    stagingFile.deleteOnExit();\n+  }\n+\n+  @Override\n+  public long getPos() {\n+    return pos;\n+  }\n+\n+  @Override\n+  public void flush() throws IOException {\n+    stream.flush();\n+  }\n+\n+  @Override\n+  public void write(int b) throws IOException {\n+    stream.write(b);\n+    pos += 1;\n+  }\n+\n+  @Override\n+  public void write(byte[] b, int off, int len) throws IOException {\n+    stream.write(b, off, len);\n+    pos += len;\n+  }\n+\n+  @Override\n+  public void close() throws IOException {\n+    super.close();\n+    closed = true;\n+\n+    try {\n+      if (stream != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3c948aa465c01dbe8159117b95725e3c36a7d76b"}, "originalPosition": 89}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjA2OTUzMQ==", "bodyText": "yes, done", "url": "https://github.com/apache/iceberg/pull/1573#discussion_r512069531", "createdAt": "2020-10-26T15:52:29Z", "author": {"login": "danielcweeks"}, "path": "aws/src/main/java/org/apache/iceberg/aws/s3/S3OutputStream.java", "diffHunk": "@@ -0,0 +1,114 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.aws.s3;\n+\n+import com.amazonaws.services.s3.AmazonS3URI;\n+import java.io.BufferedOutputStream;\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.io.OutputStream;\n+import java.util.Arrays;\n+import org.apache.iceberg.io.PositionOutputStream;\n+import org.apache.iceberg.relocated.com.google.common.base.Joiner;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import software.amazon.awssdk.core.sync.RequestBody;\n+import software.amazon.awssdk.services.s3.S3Client;\n+import software.amazon.awssdk.services.s3.model.PutObjectRequest;\n+\n+public class S3OutputStream extends PositionOutputStream {\n+  private static final Logger LOG = LoggerFactory.getLogger(S3OutputStream.class);\n+\n+  private final StackTraceElement[] createStack;\n+  private final S3Client s3;\n+  private final AmazonS3URI location;\n+\n+  private final OutputStream stream;\n+  private final File stagingFile;\n+  private long pos = 0;\n+\n+  private boolean closed = false;\n+\n+  public S3OutputStream(S3Client s3, AmazonS3URI location) throws IOException {\n+    this.s3 = s3;\n+    this.location = location;\n+\n+    createStack = Thread.currentThread().getStackTrace();\n+    stagingFile = File.createTempFile(\"s3fileio-\", \".tmp\");\n+    stream = new BufferedOutputStream(new FileOutputStream(stagingFile));\n+\n+    stagingFile.deleteOnExit();\n+  }\n+\n+  @Override\n+  public long getPos() {\n+    return pos;\n+  }\n+\n+  @Override\n+  public void flush() throws IOException {\n+    stream.flush();\n+  }\n+\n+  @Override\n+  public void write(int b) throws IOException {\n+    stream.write(b);\n+    pos += 1;\n+  }\n+\n+  @Override\n+  public void write(byte[] b, int off, int len) throws IOException {\n+    stream.write(b, off, len);\n+    pos += len;\n+  }\n+\n+  @Override\n+  public void close() throws IOException {\n+    super.close();\n+    closed = true;\n+\n+    try {\n+      if (stream != null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTE5MDA3NQ=="}, "originalCommit": {"oid": "3c948aa465c01dbe8159117b95725e3c36a7d76b"}, "originalPosition": 89}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwMjMyOTE3OnYy", "diffSide": "RIGHT", "path": "aws/src/test/java/org/apache/iceberg/aws/s3/S3InputStreamTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QyMzowOToxM1rOHngrgg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxODoyMDo0OFrOHocrKQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTE5MTkzOA==", "bodyText": "I think this needs to test the different read methods, not just read with a buffer. It also should test the values returned by getPos because those are critical to skipping correctly for read-through seeks.", "url": "https://github.com/apache/iceberg/pull/1573#discussion_r511191938", "createdAt": "2020-10-23T23:09:13Z", "author": {"login": "rdblue"}, "path": "aws/src/test/java/org/apache/iceberg/aws/s3/S3InputStreamTest.java", "diffHunk": "@@ -0,0 +1,103 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.aws.s3;\n+\n+import com.adobe.testing.s3mock.junit4.S3MockRule;\n+import com.amazonaws.services.s3.AmazonS3URI;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.util.Arrays;\n+import java.util.Random;\n+import org.apache.commons.io.IOUtils;\n+import org.apache.iceberg.io.SeekableInputStream;\n+import org.junit.Before;\n+import org.junit.ClassRule;\n+import org.junit.Test;\n+import software.amazon.awssdk.core.sync.RequestBody;\n+import software.amazon.awssdk.services.s3.S3Client;\n+import software.amazon.awssdk.services.s3.model.CreateBucketRequest;\n+import software.amazon.awssdk.services.s3.model.PutObjectRequest;\n+\n+import static org.junit.Assert.assertArrayEquals;\n+import static org.junit.Assert.assertThrows;\n+\n+public class S3InputStreamTest {\n+  @ClassRule\n+  public static final S3MockRule S3_MOCK_RULE = S3MockRule.builder().silent().build();\n+\n+  private final S3Client s3 = S3_MOCK_RULE.createS3ClientV2();\n+  private final Random random = new Random(1);\n+\n+  @Before\n+  public void before() {\n+    s3.createBucket(CreateBucketRequest.builder().bucket(\"bucket\").build());\n+  }\n+\n+  @Test\n+  public void testRead() throws Exception {\n+    AmazonS3URI uri = new AmazonS3URI(\"s3://bucket/path/to/read.dat\");\n+    byte[] expected = randomData(1024 * 1024);\n+\n+    writeS3Data(uri, expected);\n+\n+    try (InputStream in = new S3InputStream(s3, uri)) {\n+      byte[] actual = IOUtils.readFully(in, expected.length);\n+      assertArrayEquals(expected, actual);\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3c948aa465c01dbe8159117b95725e3c36a7d76b"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjE3NDg4OQ==", "bodyText": "I added a number of additional tests including backseeks, read-through, and skip seeks and reads using both implemented paths.  This was actually good because it caught an issue with our lazy position updates for the streams.", "url": "https://github.com/apache/iceberg/pull/1573#discussion_r512174889", "createdAt": "2020-10-26T18:20:48Z", "author": {"login": "danielcweeks"}, "path": "aws/src/test/java/org/apache/iceberg/aws/s3/S3InputStreamTest.java", "diffHunk": "@@ -0,0 +1,103 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.aws.s3;\n+\n+import com.adobe.testing.s3mock.junit4.S3MockRule;\n+import com.amazonaws.services.s3.AmazonS3URI;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.util.Arrays;\n+import java.util.Random;\n+import org.apache.commons.io.IOUtils;\n+import org.apache.iceberg.io.SeekableInputStream;\n+import org.junit.Before;\n+import org.junit.ClassRule;\n+import org.junit.Test;\n+import software.amazon.awssdk.core.sync.RequestBody;\n+import software.amazon.awssdk.services.s3.S3Client;\n+import software.amazon.awssdk.services.s3.model.CreateBucketRequest;\n+import software.amazon.awssdk.services.s3.model.PutObjectRequest;\n+\n+import static org.junit.Assert.assertArrayEquals;\n+import static org.junit.Assert.assertThrows;\n+\n+public class S3InputStreamTest {\n+  @ClassRule\n+  public static final S3MockRule S3_MOCK_RULE = S3MockRule.builder().silent().build();\n+\n+  private final S3Client s3 = S3_MOCK_RULE.createS3ClientV2();\n+  private final Random random = new Random(1);\n+\n+  @Before\n+  public void before() {\n+    s3.createBucket(CreateBucketRequest.builder().bucket(\"bucket\").build());\n+  }\n+\n+  @Test\n+  public void testRead() throws Exception {\n+    AmazonS3URI uri = new AmazonS3URI(\"s3://bucket/path/to/read.dat\");\n+    byte[] expected = randomData(1024 * 1024);\n+\n+    writeS3Data(uri, expected);\n+\n+    try (InputStream in = new S3InputStream(s3, uri)) {\n+      byte[] actual = IOUtils.readFully(in, expected.length);\n+      assertArrayEquals(expected, actual);\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTE5MTkzOA=="}, "originalCommit": {"oid": "3c948aa465c01dbe8159117b95725e3c36a7d76b"}, "originalPosition": 63}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyNDQ1NzY4OnYy", "diffSide": "RIGHT", "path": "aws/src/main/java/org/apache/iceberg/aws/s3/S3FileIO.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQyMjo0Mzo0NlrOHqxP7w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QyMToxMzoxNFrOHtApwA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDYwOTEzNQ==", "bodyText": "What is the reasoning behind having a serializable S3Client supplier? Since you are already marking the s3 client as transient, why not just have:\npublic S3FileIO() {\n  client = S3Client.create();\n}\nAlso the AWS client is hard to serialize. You need to serialize things like credential information that might expire after encode and decode. It seems hard to use this constructor unless we also provide an actual implementation of SerializableSupplier<S3Client.", "url": "https://github.com/apache/iceberg/pull/1573#discussion_r514609135", "createdAt": "2020-10-29T22:43:46Z", "author": {"login": "jackye1995"}, "path": "aws/src/main/java/org/apache/iceberg/aws/s3/S3FileIO.java", "diffHunk": "@@ -0,0 +1,173 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.aws.s3;\n+\n+import com.amazonaws.services.s3.AmazonS3URI;\n+import java.io.IOException;\n+import java.io.Serializable;\n+import org.apache.http.HttpStatus;\n+import org.apache.iceberg.io.FileIO;\n+import org.apache.iceberg.io.InputFile;\n+import org.apache.iceberg.io.OutputFile;\n+import org.apache.iceberg.io.PositionOutputStream;\n+import org.apache.iceberg.io.SeekableInputStream;\n+import org.apache.iceberg.util.SerializableSupplier;\n+import software.amazon.awssdk.services.s3.S3Client;\n+import software.amazon.awssdk.services.s3.model.Delete;\n+import software.amazon.awssdk.services.s3.model.DeleteObjectsRequest;\n+import software.amazon.awssdk.services.s3.model.HeadObjectRequest;\n+import software.amazon.awssdk.services.s3.model.HeadObjectResponse;\n+import software.amazon.awssdk.services.s3.model.ObjectIdentifier;\n+import software.amazon.awssdk.services.s3.model.S3Exception;\n+\n+/**\n+ * FileIO implementation backed by S3.  Locations used must follow the conventions for URIs (e.g. s3://bucket/path/..).\n+ */\n+public class S3FileIO implements FileIO, Serializable {\n+  private final SerializableSupplier<S3Client> s3;\n+  private transient S3Client client;\n+\n+  public S3FileIO(SerializableSupplier<S3Client> s3) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "04bfdbfd7dc0f9fc2605898880384b12229c5c92"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDYyOTc5MA==", "bodyText": "The SerializableSupplier is there because the client is hard to serialize, as you mentioned. The supplier can carry information needed to create a client and is itself serializable instead.\nWe need to serialize the FileIO because it is sent to tasks in Spark and Flink. If the FileIO can be sent but then can't instantiate a configured client, then it won't work as intended.", "url": "https://github.com/apache/iceberg/pull/1573#discussion_r514629790", "createdAt": "2020-10-29T23:45:37Z", "author": {"login": "rdblue"}, "path": "aws/src/main/java/org/apache/iceberg/aws/s3/S3FileIO.java", "diffHunk": "@@ -0,0 +1,173 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.aws.s3;\n+\n+import com.amazonaws.services.s3.AmazonS3URI;\n+import java.io.IOException;\n+import java.io.Serializable;\n+import org.apache.http.HttpStatus;\n+import org.apache.iceberg.io.FileIO;\n+import org.apache.iceberg.io.InputFile;\n+import org.apache.iceberg.io.OutputFile;\n+import org.apache.iceberg.io.PositionOutputStream;\n+import org.apache.iceberg.io.SeekableInputStream;\n+import org.apache.iceberg.util.SerializableSupplier;\n+import software.amazon.awssdk.services.s3.S3Client;\n+import software.amazon.awssdk.services.s3.model.Delete;\n+import software.amazon.awssdk.services.s3.model.DeleteObjectsRequest;\n+import software.amazon.awssdk.services.s3.model.HeadObjectRequest;\n+import software.amazon.awssdk.services.s3.model.HeadObjectResponse;\n+import software.amazon.awssdk.services.s3.model.ObjectIdentifier;\n+import software.amazon.awssdk.services.s3.model.S3Exception;\n+\n+/**\n+ * FileIO implementation backed by S3.  Locations used must follow the conventions for URIs (e.g. s3://bucket/path/..).\n+ */\n+public class S3FileIO implements FileIO, Serializable {\n+  private final SerializableSupplier<S3Client> s3;\n+  private transient S3Client client;\n+\n+  public S3FileIO(SerializableSupplier<S3Client> s3) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDYwOTEzNQ=="}, "originalCommit": {"oid": "04bfdbfd7dc0f9fc2605898880384b12229c5c92"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDY1NTMwMA==", "bodyText": "Sorry I wasn't clear in the comment, I understand the serialization aspect of this, and what I am proposing is to have a default behavior that does not serialize the client, and simply recreate it if it is null:\n    private final SerializableSupplier<S3Client> s3;\n    private transient S3Client client;\n\n    public S3FileIO() {\n        this.s3 = null;\n    }\n\n    public S3FileIO(SerializableSupplier<S3Client> s3) {\n        this.s3 = s3;\n    }\n\n    private S3Client client() {\n        if (client == null) {\n            if (s3 != null) {\n                client = s3.get();\n            } else {\n                client = S3Client.create();\n            }\n        }\n        return client;\n    }\nThe reason is because the environment that deserializes the object is very likely to have the AWS configurations for the client to pick up and re-initialize itself. This is the situation for all AWS compute including EC2, EMR, ECS, Lambda. By having this default, most users can just use it as new S3FileIO() without the need to implement a serialization supplier.\nThe only situation left is the users with customized components such as a customized credential provider or HTTP client. In those cases, the current constructor can be used with a customized supplier.", "url": "https://github.com/apache/iceberg/pull/1573#discussion_r514655300", "createdAt": "2020-10-30T01:09:12Z", "author": {"login": "jackye1995"}, "path": "aws/src/main/java/org/apache/iceberg/aws/s3/S3FileIO.java", "diffHunk": "@@ -0,0 +1,173 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.aws.s3;\n+\n+import com.amazonaws.services.s3.AmazonS3URI;\n+import java.io.IOException;\n+import java.io.Serializable;\n+import org.apache.http.HttpStatus;\n+import org.apache.iceberg.io.FileIO;\n+import org.apache.iceberg.io.InputFile;\n+import org.apache.iceberg.io.OutputFile;\n+import org.apache.iceberg.io.PositionOutputStream;\n+import org.apache.iceberg.io.SeekableInputStream;\n+import org.apache.iceberg.util.SerializableSupplier;\n+import software.amazon.awssdk.services.s3.S3Client;\n+import software.amazon.awssdk.services.s3.model.Delete;\n+import software.amazon.awssdk.services.s3.model.DeleteObjectsRequest;\n+import software.amazon.awssdk.services.s3.model.HeadObjectRequest;\n+import software.amazon.awssdk.services.s3.model.HeadObjectResponse;\n+import software.amazon.awssdk.services.s3.model.ObjectIdentifier;\n+import software.amazon.awssdk.services.s3.model.S3Exception;\n+\n+/**\n+ * FileIO implementation backed by S3.  Locations used must follow the conventions for URIs (e.g. s3://bucket/path/..).\n+ */\n+public class S3FileIO implements FileIO, Serializable {\n+  private final SerializableSupplier<S3Client> s3;\n+  private transient S3Client client;\n+\n+  public S3FileIO(SerializableSupplier<S3Client> s3) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDYwOTEzNQ=="}, "originalCommit": {"oid": "04bfdbfd7dc0f9fc2605898880384b12229c5c92"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTIxNTcxOQ==", "bodyText": "It makes sense to me to have a constructor that doesn't require the client supplier.", "url": "https://github.com/apache/iceberg/pull/1573#discussion_r515215719", "createdAt": "2020-10-30T16:16:38Z", "author": {"login": "rdblue"}, "path": "aws/src/main/java/org/apache/iceberg/aws/s3/S3FileIO.java", "diffHunk": "@@ -0,0 +1,173 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.aws.s3;\n+\n+import com.amazonaws.services.s3.AmazonS3URI;\n+import java.io.IOException;\n+import java.io.Serializable;\n+import org.apache.http.HttpStatus;\n+import org.apache.iceberg.io.FileIO;\n+import org.apache.iceberg.io.InputFile;\n+import org.apache.iceberg.io.OutputFile;\n+import org.apache.iceberg.io.PositionOutputStream;\n+import org.apache.iceberg.io.SeekableInputStream;\n+import org.apache.iceberg.util.SerializableSupplier;\n+import software.amazon.awssdk.services.s3.S3Client;\n+import software.amazon.awssdk.services.s3.model.Delete;\n+import software.amazon.awssdk.services.s3.model.DeleteObjectsRequest;\n+import software.amazon.awssdk.services.s3.model.HeadObjectRequest;\n+import software.amazon.awssdk.services.s3.model.HeadObjectResponse;\n+import software.amazon.awssdk.services.s3.model.ObjectIdentifier;\n+import software.amazon.awssdk.services.s3.model.S3Exception;\n+\n+/**\n+ * FileIO implementation backed by S3.  Locations used must follow the conventions for URIs (e.g. s3://bucket/path/..).\n+ */\n+public class S3FileIO implements FileIO, Serializable {\n+  private final SerializableSupplier<S3Client> s3;\n+  private transient S3Client client;\n+\n+  public S3FileIO(SerializableSupplier<S3Client> s3) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDYwOTEzNQ=="}, "originalCommit": {"oid": "04bfdbfd7dc0f9fc2605898880384b12229c5c92"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjk1ODY1Ng==", "bodyText": "I'll add the default constructor.", "url": "https://github.com/apache/iceberg/pull/1573#discussion_r516958656", "createdAt": "2020-11-03T21:13:14Z", "author": {"login": "danielcweeks"}, "path": "aws/src/main/java/org/apache/iceberg/aws/s3/S3FileIO.java", "diffHunk": "@@ -0,0 +1,173 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.aws.s3;\n+\n+import com.amazonaws.services.s3.AmazonS3URI;\n+import java.io.IOException;\n+import java.io.Serializable;\n+import org.apache.http.HttpStatus;\n+import org.apache.iceberg.io.FileIO;\n+import org.apache.iceberg.io.InputFile;\n+import org.apache.iceberg.io.OutputFile;\n+import org.apache.iceberg.io.PositionOutputStream;\n+import org.apache.iceberg.io.SeekableInputStream;\n+import org.apache.iceberg.util.SerializableSupplier;\n+import software.amazon.awssdk.services.s3.S3Client;\n+import software.amazon.awssdk.services.s3.model.Delete;\n+import software.amazon.awssdk.services.s3.model.DeleteObjectsRequest;\n+import software.amazon.awssdk.services.s3.model.HeadObjectRequest;\n+import software.amazon.awssdk.services.s3.model.HeadObjectResponse;\n+import software.amazon.awssdk.services.s3.model.ObjectIdentifier;\n+import software.amazon.awssdk.services.s3.model.S3Exception;\n+\n+/**\n+ * FileIO implementation backed by S3.  Locations used must follow the conventions for URIs (e.g. s3://bucket/path/..).\n+ */\n+public class S3FileIO implements FileIO, Serializable {\n+  private final SerializableSupplier<S3Client> s3;\n+  private transient S3Client client;\n+\n+  public S3FileIO(SerializableSupplier<S3Client> s3) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDYwOTEzNQ=="}, "originalCommit": {"oid": "04bfdbfd7dc0f9fc2605898880384b12229c5c92"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyNDQ2MjQ1OnYy", "diffSide": "RIGHT", "path": "aws/src/main/java/org/apache/iceberg/aws/s3/S3FileIO.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQyMjo0NToyOVrOHqxSjw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QyMjo0Njo0MlrOHtDLdQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDYwOTgwNw==", "bodyText": "Is it better to not nest this class inside S3FileIO? In this way it is more consistent with HadoopInputFile", "url": "https://github.com/apache/iceberg/pull/1573#discussion_r514609807", "createdAt": "2020-10-29T22:45:29Z", "author": {"login": "jackye1995"}, "path": "aws/src/main/java/org/apache/iceberg/aws/s3/S3FileIO.java", "diffHunk": "@@ -0,0 +1,173 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.aws.s3;\n+\n+import com.amazonaws.services.s3.AmazonS3URI;\n+import java.io.IOException;\n+import java.io.Serializable;\n+import org.apache.http.HttpStatus;\n+import org.apache.iceberg.io.FileIO;\n+import org.apache.iceberg.io.InputFile;\n+import org.apache.iceberg.io.OutputFile;\n+import org.apache.iceberg.io.PositionOutputStream;\n+import org.apache.iceberg.io.SeekableInputStream;\n+import org.apache.iceberg.util.SerializableSupplier;\n+import software.amazon.awssdk.services.s3.S3Client;\n+import software.amazon.awssdk.services.s3.model.Delete;\n+import software.amazon.awssdk.services.s3.model.DeleteObjectsRequest;\n+import software.amazon.awssdk.services.s3.model.HeadObjectRequest;\n+import software.amazon.awssdk.services.s3.model.HeadObjectResponse;\n+import software.amazon.awssdk.services.s3.model.ObjectIdentifier;\n+import software.amazon.awssdk.services.s3.model.S3Exception;\n+\n+/**\n+ * FileIO implementation backed by S3.  Locations used must follow the conventions for URIs (e.g. s3://bucket/path/..).\n+ */\n+public class S3FileIO implements FileIO, Serializable {\n+  private final SerializableSupplier<S3Client> s3;\n+  private transient S3Client client;\n+\n+  public S3FileIO(SerializableSupplier<S3Client> s3) {\n+    this.s3 = s3;\n+  }\n+\n+  @Override\n+  public InputFile newInputFile(String path) {\n+    return new S3InputFile(new AmazonS3URI(path));\n+  }\n+\n+  @Override\n+  public OutputFile newOutputFile(String path) {\n+    return new S3OutputFile(new AmazonS3URI(path));\n+  }\n+\n+  @Override\n+  public void deleteFile(String path) {\n+    AmazonS3URI location = new AmazonS3URI(path);\n+    ObjectIdentifier objectIdentifier = ObjectIdentifier.builder().key(location.getKey()).build();\n+    Delete delete = Delete.builder().objects(objectIdentifier).build();\n+    DeleteObjectsRequest deleteRequest =\n+        DeleteObjectsRequest.builder().bucket(location.getBucket()).delete(delete).build();\n+\n+    client().deleteObjects(deleteRequest);\n+  }\n+\n+  private S3Client client() {\n+    if (client == null) {\n+      client = s3.get();\n+    }\n+    return client;\n+  }\n+\n+  public class S3InputFile implements InputFile {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "04bfdbfd7dc0f9fc2605898880384b12229c5c92"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDY1Njg1Mw==", "bodyText": "And same comment for S3OutputFile", "url": "https://github.com/apache/iceberg/pull/1573#discussion_r514656853", "createdAt": "2020-10-30T01:11:53Z", "author": {"login": "jackye1995"}, "path": "aws/src/main/java/org/apache/iceberg/aws/s3/S3FileIO.java", "diffHunk": "@@ -0,0 +1,173 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.aws.s3;\n+\n+import com.amazonaws.services.s3.AmazonS3URI;\n+import java.io.IOException;\n+import java.io.Serializable;\n+import org.apache.http.HttpStatus;\n+import org.apache.iceberg.io.FileIO;\n+import org.apache.iceberg.io.InputFile;\n+import org.apache.iceberg.io.OutputFile;\n+import org.apache.iceberg.io.PositionOutputStream;\n+import org.apache.iceberg.io.SeekableInputStream;\n+import org.apache.iceberg.util.SerializableSupplier;\n+import software.amazon.awssdk.services.s3.S3Client;\n+import software.amazon.awssdk.services.s3.model.Delete;\n+import software.amazon.awssdk.services.s3.model.DeleteObjectsRequest;\n+import software.amazon.awssdk.services.s3.model.HeadObjectRequest;\n+import software.amazon.awssdk.services.s3.model.HeadObjectResponse;\n+import software.amazon.awssdk.services.s3.model.ObjectIdentifier;\n+import software.amazon.awssdk.services.s3.model.S3Exception;\n+\n+/**\n+ * FileIO implementation backed by S3.  Locations used must follow the conventions for URIs (e.g. s3://bucket/path/..).\n+ */\n+public class S3FileIO implements FileIO, Serializable {\n+  private final SerializableSupplier<S3Client> s3;\n+  private transient S3Client client;\n+\n+  public S3FileIO(SerializableSupplier<S3Client> s3) {\n+    this.s3 = s3;\n+  }\n+\n+  @Override\n+  public InputFile newInputFile(String path) {\n+    return new S3InputFile(new AmazonS3URI(path));\n+  }\n+\n+  @Override\n+  public OutputFile newOutputFile(String path) {\n+    return new S3OutputFile(new AmazonS3URI(path));\n+  }\n+\n+  @Override\n+  public void deleteFile(String path) {\n+    AmazonS3URI location = new AmazonS3URI(path);\n+    ObjectIdentifier objectIdentifier = ObjectIdentifier.builder().key(location.getKey()).build();\n+    Delete delete = Delete.builder().objects(objectIdentifier).build();\n+    DeleteObjectsRequest deleteRequest =\n+        DeleteObjectsRequest.builder().bucket(location.getBucket()).delete(delete).build();\n+\n+    client().deleteObjects(deleteRequest);\n+  }\n+\n+  private S3Client client() {\n+    if (client == null) {\n+      client = s3.get();\n+    }\n+    return client;\n+  }\n+\n+  public class S3InputFile implements InputFile {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDYwOTgwNw=="}, "originalCommit": {"oid": "04bfdbfd7dc0f9fc2605898880384b12229c5c92"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjk1NTEwNg==", "bodyText": "I don't think there's any need to be consistent across these implementations.  Also in this case they share the client from S3FileIO, which would lend itself an inner class implementation.  I feel like this is more a stylistic difference and with how little code is involved in the inner classes, I find it more cohesive.", "url": "https://github.com/apache/iceberg/pull/1573#discussion_r516955106", "createdAt": "2020-11-03T21:05:51Z", "author": {"login": "danielcweeks"}, "path": "aws/src/main/java/org/apache/iceberg/aws/s3/S3FileIO.java", "diffHunk": "@@ -0,0 +1,173 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.aws.s3;\n+\n+import com.amazonaws.services.s3.AmazonS3URI;\n+import java.io.IOException;\n+import java.io.Serializable;\n+import org.apache.http.HttpStatus;\n+import org.apache.iceberg.io.FileIO;\n+import org.apache.iceberg.io.InputFile;\n+import org.apache.iceberg.io.OutputFile;\n+import org.apache.iceberg.io.PositionOutputStream;\n+import org.apache.iceberg.io.SeekableInputStream;\n+import org.apache.iceberg.util.SerializableSupplier;\n+import software.amazon.awssdk.services.s3.S3Client;\n+import software.amazon.awssdk.services.s3.model.Delete;\n+import software.amazon.awssdk.services.s3.model.DeleteObjectsRequest;\n+import software.amazon.awssdk.services.s3.model.HeadObjectRequest;\n+import software.amazon.awssdk.services.s3.model.HeadObjectResponse;\n+import software.amazon.awssdk.services.s3.model.ObjectIdentifier;\n+import software.amazon.awssdk.services.s3.model.S3Exception;\n+\n+/**\n+ * FileIO implementation backed by S3.  Locations used must follow the conventions for URIs (e.g. s3://bucket/path/..).\n+ */\n+public class S3FileIO implements FileIO, Serializable {\n+  private final SerializableSupplier<S3Client> s3;\n+  private transient S3Client client;\n+\n+  public S3FileIO(SerializableSupplier<S3Client> s3) {\n+    this.s3 = s3;\n+  }\n+\n+  @Override\n+  public InputFile newInputFile(String path) {\n+    return new S3InputFile(new AmazonS3URI(path));\n+  }\n+\n+  @Override\n+  public OutputFile newOutputFile(String path) {\n+    return new S3OutputFile(new AmazonS3URI(path));\n+  }\n+\n+  @Override\n+  public void deleteFile(String path) {\n+    AmazonS3URI location = new AmazonS3URI(path);\n+    ObjectIdentifier objectIdentifier = ObjectIdentifier.builder().key(location.getKey()).build();\n+    Delete delete = Delete.builder().objects(objectIdentifier).build();\n+    DeleteObjectsRequest deleteRequest =\n+        DeleteObjectsRequest.builder().bucket(location.getBucket()).delete(delete).build();\n+\n+    client().deleteObjects(deleteRequest);\n+  }\n+\n+  private S3Client client() {\n+    if (client == null) {\n+      client = s3.get();\n+    }\n+    return client;\n+  }\n+\n+  public class S3InputFile implements InputFile {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDYwOTgwNw=="}, "originalCommit": {"oid": "04bfdbfd7dc0f9fc2605898880384b12229c5c92"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzAwMDA1Mw==", "bodyText": "Ok, so after saying that, I did end up splitting it out due to implementing create causing me to rethink some of the shared functionality between input/output.  It got a bit more complicated and was probably more logic than should be embedded as inner classes.  They're now split out.", "url": "https://github.com/apache/iceberg/pull/1573#discussion_r517000053", "createdAt": "2020-11-03T22:46:42Z", "author": {"login": "danielcweeks"}, "path": "aws/src/main/java/org/apache/iceberg/aws/s3/S3FileIO.java", "diffHunk": "@@ -0,0 +1,173 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.aws.s3;\n+\n+import com.amazonaws.services.s3.AmazonS3URI;\n+import java.io.IOException;\n+import java.io.Serializable;\n+import org.apache.http.HttpStatus;\n+import org.apache.iceberg.io.FileIO;\n+import org.apache.iceberg.io.InputFile;\n+import org.apache.iceberg.io.OutputFile;\n+import org.apache.iceberg.io.PositionOutputStream;\n+import org.apache.iceberg.io.SeekableInputStream;\n+import org.apache.iceberg.util.SerializableSupplier;\n+import software.amazon.awssdk.services.s3.S3Client;\n+import software.amazon.awssdk.services.s3.model.Delete;\n+import software.amazon.awssdk.services.s3.model.DeleteObjectsRequest;\n+import software.amazon.awssdk.services.s3.model.HeadObjectRequest;\n+import software.amazon.awssdk.services.s3.model.HeadObjectResponse;\n+import software.amazon.awssdk.services.s3.model.ObjectIdentifier;\n+import software.amazon.awssdk.services.s3.model.S3Exception;\n+\n+/**\n+ * FileIO implementation backed by S3.  Locations used must follow the conventions for URIs (e.g. s3://bucket/path/..).\n+ */\n+public class S3FileIO implements FileIO, Serializable {\n+  private final SerializableSupplier<S3Client> s3;\n+  private transient S3Client client;\n+\n+  public S3FileIO(SerializableSupplier<S3Client> s3) {\n+    this.s3 = s3;\n+  }\n+\n+  @Override\n+  public InputFile newInputFile(String path) {\n+    return new S3InputFile(new AmazonS3URI(path));\n+  }\n+\n+  @Override\n+  public OutputFile newOutputFile(String path) {\n+    return new S3OutputFile(new AmazonS3URI(path));\n+  }\n+\n+  @Override\n+  public void deleteFile(String path) {\n+    AmazonS3URI location = new AmazonS3URI(path);\n+    ObjectIdentifier objectIdentifier = ObjectIdentifier.builder().key(location.getKey()).build();\n+    Delete delete = Delete.builder().objects(objectIdentifier).build();\n+    DeleteObjectsRequest deleteRequest =\n+        DeleteObjectsRequest.builder().bucket(location.getBucket()).delete(delete).build();\n+\n+    client().deleteObjects(deleteRequest);\n+  }\n+\n+  private S3Client client() {\n+    if (client == null) {\n+      client = s3.get();\n+    }\n+    return client;\n+  }\n+\n+  public class S3InputFile implements InputFile {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDYwOTgwNw=="}, "originalCommit": {"oid": "04bfdbfd7dc0f9fc2605898880384b12229c5c92"}, "originalPosition": 79}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyNDQ2ODg0OnYy", "diffSide": "RIGHT", "path": "aws/src/main/java/org/apache/iceberg/aws/s3/S3FileIO.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQyMjo0ODoxMlrOHqxWVA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QyMTowNTowNlrOHtAaUg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDYxMDc3Mg==", "bodyText": "FileIO already implements Serializable, no need to declare it again.", "url": "https://github.com/apache/iceberg/pull/1573#discussion_r514610772", "createdAt": "2020-10-29T22:48:12Z", "author": {"login": "jackye1995"}, "path": "aws/src/main/java/org/apache/iceberg/aws/s3/S3FileIO.java", "diffHunk": "@@ -0,0 +1,173 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.aws.s3;\n+\n+import com.amazonaws.services.s3.AmazonS3URI;\n+import java.io.IOException;\n+import java.io.Serializable;\n+import org.apache.http.HttpStatus;\n+import org.apache.iceberg.io.FileIO;\n+import org.apache.iceberg.io.InputFile;\n+import org.apache.iceberg.io.OutputFile;\n+import org.apache.iceberg.io.PositionOutputStream;\n+import org.apache.iceberg.io.SeekableInputStream;\n+import org.apache.iceberg.util.SerializableSupplier;\n+import software.amazon.awssdk.services.s3.S3Client;\n+import software.amazon.awssdk.services.s3.model.Delete;\n+import software.amazon.awssdk.services.s3.model.DeleteObjectsRequest;\n+import software.amazon.awssdk.services.s3.model.HeadObjectRequest;\n+import software.amazon.awssdk.services.s3.model.HeadObjectResponse;\n+import software.amazon.awssdk.services.s3.model.ObjectIdentifier;\n+import software.amazon.awssdk.services.s3.model.S3Exception;\n+\n+/**\n+ * FileIO implementation backed by S3.  Locations used must follow the conventions for URIs (e.g. s3://bucket/path/..).\n+ */\n+public class S3FileIO implements FileIO, Serializable {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "04bfdbfd7dc0f9fc2605898880384b12229c5c92"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjk1NDcwNg==", "bodyText": "While it is not required, there's some difference of opinion on this point.  In cases where we intend it to be serialized (as opposed to simply inheriting that property), some prefer to mark it explicitly for clarity.  Seems like Ryan agrees with your view, so I'll remove it.", "url": "https://github.com/apache/iceberg/pull/1573#discussion_r516954706", "createdAt": "2020-11-03T21:05:06Z", "author": {"login": "danielcweeks"}, "path": "aws/src/main/java/org/apache/iceberg/aws/s3/S3FileIO.java", "diffHunk": "@@ -0,0 +1,173 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.aws.s3;\n+\n+import com.amazonaws.services.s3.AmazonS3URI;\n+import java.io.IOException;\n+import java.io.Serializable;\n+import org.apache.http.HttpStatus;\n+import org.apache.iceberg.io.FileIO;\n+import org.apache.iceberg.io.InputFile;\n+import org.apache.iceberg.io.OutputFile;\n+import org.apache.iceberg.io.PositionOutputStream;\n+import org.apache.iceberg.io.SeekableInputStream;\n+import org.apache.iceberg.util.SerializableSupplier;\n+import software.amazon.awssdk.services.s3.S3Client;\n+import software.amazon.awssdk.services.s3.model.Delete;\n+import software.amazon.awssdk.services.s3.model.DeleteObjectsRequest;\n+import software.amazon.awssdk.services.s3.model.HeadObjectRequest;\n+import software.amazon.awssdk.services.s3.model.HeadObjectResponse;\n+import software.amazon.awssdk.services.s3.model.ObjectIdentifier;\n+import software.amazon.awssdk.services.s3.model.S3Exception;\n+\n+/**\n+ * FileIO implementation backed by S3.  Locations used must follow the conventions for URIs (e.g. s3://bucket/path/..).\n+ */\n+public class S3FileIO implements FileIO, Serializable {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDYxMDc3Mg=="}, "originalCommit": {"oid": "04bfdbfd7dc0f9fc2605898880384b12229c5c92"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0MDM2OTA1OnYy", "diffSide": "RIGHT", "path": "aws/src/main/java/org/apache/iceberg/aws/s3/S3OutputStream.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQwMDowNzoxOVrOHtEzoQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQxODoyMTowNVrOHu4teQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzAyNjcyMQ==", "bodyText": "Why throw IOException if the only place this constructor is called catches it and throws UncheckedIOException?", "url": "https://github.com/apache/iceberg/pull/1573#discussion_r517026721", "createdAt": "2020-11-04T00:07:19Z", "author": {"login": "rdblue"}, "path": "aws/src/main/java/org/apache/iceberg/aws/s3/S3OutputStream.java", "diffHunk": "@@ -0,0 +1,111 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.aws.s3;\n+\n+import java.io.BufferedOutputStream;\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.io.OutputStream;\n+import java.util.Arrays;\n+import org.apache.iceberg.io.PositionOutputStream;\n+import org.apache.iceberg.relocated.com.google.common.base.Joiner;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import software.amazon.awssdk.core.sync.RequestBody;\n+import software.amazon.awssdk.services.s3.S3Client;\n+import software.amazon.awssdk.services.s3.model.PutObjectRequest;\n+\n+public class S3OutputStream extends PositionOutputStream {\n+  private static final Logger LOG = LoggerFactory.getLogger(S3OutputStream.class);\n+\n+  private final StackTraceElement[] createStack;\n+  private final S3Client s3;\n+  private final S3URI location;\n+\n+  private final OutputStream stream;\n+  private final File stagingFile;\n+  private long pos = 0;\n+\n+  private boolean closed = false;\n+\n+  public S3OutputStream(S3Client s3, S3URI location) throws IOException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d2ae12190424e6822745b17d89f6396cde83f7ba"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODkyNTY4OQ==", "bodyText": "This is just more of a convention, which I think makes sense to leave this way.  IO Streams typically throw the IOException (which is why this does because we're wrapping the buffered streams).  However, the OutputFile interface is really what's forcing the change in behavior because create() and createAndOverwrite() do not throw IOException and expect the an unchecked exception.", "url": "https://github.com/apache/iceberg/pull/1573#discussion_r518925689", "createdAt": "2020-11-06T18:21:05Z", "author": {"login": "danielcweeks"}, "path": "aws/src/main/java/org/apache/iceberg/aws/s3/S3OutputStream.java", "diffHunk": "@@ -0,0 +1,111 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.aws.s3;\n+\n+import java.io.BufferedOutputStream;\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.io.OutputStream;\n+import java.util.Arrays;\n+import org.apache.iceberg.io.PositionOutputStream;\n+import org.apache.iceberg.relocated.com.google.common.base.Joiner;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import software.amazon.awssdk.core.sync.RequestBody;\n+import software.amazon.awssdk.services.s3.S3Client;\n+import software.amazon.awssdk.services.s3.model.PutObjectRequest;\n+\n+public class S3OutputStream extends PositionOutputStream {\n+  private static final Logger LOG = LoggerFactory.getLogger(S3OutputStream.class);\n+\n+  private final StackTraceElement[] createStack;\n+  private final S3Client s3;\n+  private final S3URI location;\n+\n+  private final OutputStream stream;\n+  private final File stagingFile;\n+  private long pos = 0;\n+\n+  private boolean closed = false;\n+\n+  public S3OutputStream(S3Client s3, S3URI location) throws IOException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzAyNjcyMQ=="}, "originalCommit": {"oid": "d2ae12190424e6822745b17d89f6396cde83f7ba"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0MDM3MDYzOnYy", "diffSide": "RIGHT", "path": "aws/src/main/java/org/apache/iceberg/aws/s3/S3OutputStream.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQwMDowODoyNVrOHtE0qg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQxODoyMTo0M1rOHu4uvw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzAyNjk4Ng==", "bodyText": "Is there any need to make this class public? If not, then I'd prefer to keep it package-private to avoid more breakable APIs than necessary.", "url": "https://github.com/apache/iceberg/pull/1573#discussion_r517026986", "createdAt": "2020-11-04T00:08:25Z", "author": {"login": "rdblue"}, "path": "aws/src/main/java/org/apache/iceberg/aws/s3/S3OutputStream.java", "diffHunk": "@@ -0,0 +1,111 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.aws.s3;\n+\n+import java.io.BufferedOutputStream;\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.io.OutputStream;\n+import java.util.Arrays;\n+import org.apache.iceberg.io.PositionOutputStream;\n+import org.apache.iceberg.relocated.com.google.common.base.Joiner;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import software.amazon.awssdk.core.sync.RequestBody;\n+import software.amazon.awssdk.services.s3.S3Client;\n+import software.amazon.awssdk.services.s3.model.PutObjectRequest;\n+\n+public class S3OutputStream extends PositionOutputStream {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d2ae12190424e6822745b17d89f6396cde83f7ba"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODkyNjAxNQ==", "bodyText": "I'll change the protection levels.", "url": "https://github.com/apache/iceberg/pull/1573#discussion_r518926015", "createdAt": "2020-11-06T18:21:43Z", "author": {"login": "danielcweeks"}, "path": "aws/src/main/java/org/apache/iceberg/aws/s3/S3OutputStream.java", "diffHunk": "@@ -0,0 +1,111 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.aws.s3;\n+\n+import java.io.BufferedOutputStream;\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.io.OutputStream;\n+import java.util.Arrays;\n+import org.apache.iceberg.io.PositionOutputStream;\n+import org.apache.iceberg.relocated.com.google.common.base.Joiner;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import software.amazon.awssdk.core.sync.RequestBody;\n+import software.amazon.awssdk.services.s3.S3Client;\n+import software.amazon.awssdk.services.s3.model.PutObjectRequest;\n+\n+public class S3OutputStream extends PositionOutputStream {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzAyNjk4Ng=="}, "originalCommit": {"oid": "d2ae12190424e6822745b17d89f6396cde83f7ba"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0MDM3MTgxOnYy", "diffSide": "RIGHT", "path": "aws/src/main/java/org/apache/iceberg/aws/s3/BaseS3File.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQwMDowOToxMVrOHtE1cw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQxODoyMjo1NFrOHu4xTw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzAyNzE4Nw==", "bodyText": "Similar to the comment on S3OutputFile, I'd like to make as much of the internals as possible package-private to avoid needing to support direct use.", "url": "https://github.com/apache/iceberg/pull/1573#discussion_r517027187", "createdAt": "2020-11-04T00:09:11Z", "author": {"login": "rdblue"}, "path": "aws/src/main/java/org/apache/iceberg/aws/s3/BaseS3File.java", "diffHunk": "@@ -0,0 +1,83 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.aws.s3;\n+\n+import software.amazon.awssdk.http.HttpStatusCode;\n+import software.amazon.awssdk.services.s3.S3Client;\n+import software.amazon.awssdk.services.s3.model.HeadObjectRequest;\n+import software.amazon.awssdk.services.s3.model.HeadObjectResponse;\n+import software.amazon.awssdk.services.s3.model.S3Exception;\n+\n+public abstract class BaseS3File {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d2ae12190424e6822745b17d89f6396cde83f7ba"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODkyNjY3MQ==", "bodyText": "done", "url": "https://github.com/apache/iceberg/pull/1573#discussion_r518926671", "createdAt": "2020-11-06T18:22:54Z", "author": {"login": "danielcweeks"}, "path": "aws/src/main/java/org/apache/iceberg/aws/s3/BaseS3File.java", "diffHunk": "@@ -0,0 +1,83 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.aws.s3;\n+\n+import software.amazon.awssdk.http.HttpStatusCode;\n+import software.amazon.awssdk.services.s3.S3Client;\n+import software.amazon.awssdk.services.s3.model.HeadObjectRequest;\n+import software.amazon.awssdk.services.s3.model.HeadObjectResponse;\n+import software.amazon.awssdk.services.s3.model.S3Exception;\n+\n+public abstract class BaseS3File {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzAyNzE4Nw=="}, "originalCommit": {"oid": "d2ae12190424e6822745b17d89f6396cde83f7ba"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0MDM3MzE1OnYy", "diffSide": "RIGHT", "path": "aws/src/main/java/org/apache/iceberg/aws/s3/BaseS3File.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQwMDowOTozOVrOHtE2LA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQxODo0NTo1OFrOHu5evQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzAyNzM3Mg==", "bodyText": "This class already has location() above. How about a package-private uri method?", "url": "https://github.com/apache/iceberg/pull/1573#discussion_r517027372", "createdAt": "2020-11-04T00:09:39Z", "author": {"login": "rdblue"}, "path": "aws/src/main/java/org/apache/iceberg/aws/s3/BaseS3File.java", "diffHunk": "@@ -0,0 +1,83 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.aws.s3;\n+\n+import software.amazon.awssdk.http.HttpStatusCode;\n+import software.amazon.awssdk.services.s3.S3Client;\n+import software.amazon.awssdk.services.s3.model.HeadObjectRequest;\n+import software.amazon.awssdk.services.s3.model.HeadObjectResponse;\n+import software.amazon.awssdk.services.s3.model.S3Exception;\n+\n+public abstract class BaseS3File {\n+  private final S3Client client;\n+  private final S3URI location;\n+  private HeadObjectResponse metadata;\n+\n+  public BaseS3File(S3Client client, S3URI location) {\n+    this.client = client;\n+    this.location = location;\n+  }\n+\n+  public String location() {\n+    return location.toString();\n+  }\n+\n+  public S3Client getClient() {\n+    return client;\n+  }\n+\n+  public S3URI getLocation() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d2ae12190424e6822745b17d89f6396cde83f7ba"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODkzODMwMQ==", "bodyText": "updated", "url": "https://github.com/apache/iceberg/pull/1573#discussion_r518938301", "createdAt": "2020-11-06T18:45:58Z", "author": {"login": "danielcweeks"}, "path": "aws/src/main/java/org/apache/iceberg/aws/s3/BaseS3File.java", "diffHunk": "@@ -0,0 +1,83 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.aws.s3;\n+\n+import software.amazon.awssdk.http.HttpStatusCode;\n+import software.amazon.awssdk.services.s3.S3Client;\n+import software.amazon.awssdk.services.s3.model.HeadObjectRequest;\n+import software.amazon.awssdk.services.s3.model.HeadObjectResponse;\n+import software.amazon.awssdk.services.s3.model.S3Exception;\n+\n+public abstract class BaseS3File {\n+  private final S3Client client;\n+  private final S3URI location;\n+  private HeadObjectResponse metadata;\n+\n+  public BaseS3File(S3Client client, S3URI location) {\n+    this.client = client;\n+    this.location = location;\n+  }\n+\n+  public String location() {\n+    return location.toString();\n+  }\n+\n+  public S3Client getClient() {\n+    return client;\n+  }\n+\n+  public S3URI getLocation() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzAyNzM3Mg=="}, "originalCommit": {"oid": "d2ae12190424e6822745b17d89f6396cde83f7ba"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0MDM3NDE1OnYy", "diffSide": "RIGHT", "path": "aws/src/main/java/org/apache/iceberg/aws/s3/BaseS3File.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQwMDoxMDoxNFrOHtE2vg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQxODo0NjoxNVrOHu5fMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzAyNzUxOA==", "bodyText": "Could this be package-private client()? (We avoid using get in names because it has little value and is only used in Java conventions.)", "url": "https://github.com/apache/iceberg/pull/1573#discussion_r517027518", "createdAt": "2020-11-04T00:10:14Z", "author": {"login": "rdblue"}, "path": "aws/src/main/java/org/apache/iceberg/aws/s3/BaseS3File.java", "diffHunk": "@@ -0,0 +1,83 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.aws.s3;\n+\n+import software.amazon.awssdk.http.HttpStatusCode;\n+import software.amazon.awssdk.services.s3.S3Client;\n+import software.amazon.awssdk.services.s3.model.HeadObjectRequest;\n+import software.amazon.awssdk.services.s3.model.HeadObjectResponse;\n+import software.amazon.awssdk.services.s3.model.S3Exception;\n+\n+public abstract class BaseS3File {\n+  private final S3Client client;\n+  private final S3URI location;\n+  private HeadObjectResponse metadata;\n+\n+  public BaseS3File(S3Client client, S3URI location) {\n+    this.client = client;\n+    this.location = location;\n+  }\n+\n+  public String location() {\n+    return location.toString();\n+  }\n+\n+  public S3Client getClient() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d2ae12190424e6822745b17d89f6396cde83f7ba"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODkzODQxNg==", "bodyText": "updated", "url": "https://github.com/apache/iceberg/pull/1573#discussion_r518938416", "createdAt": "2020-11-06T18:46:15Z", "author": {"login": "danielcweeks"}, "path": "aws/src/main/java/org/apache/iceberg/aws/s3/BaseS3File.java", "diffHunk": "@@ -0,0 +1,83 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.aws.s3;\n+\n+import software.amazon.awssdk.http.HttpStatusCode;\n+import software.amazon.awssdk.services.s3.S3Client;\n+import software.amazon.awssdk.services.s3.model.HeadObjectRequest;\n+import software.amazon.awssdk.services.s3.model.HeadObjectResponse;\n+import software.amazon.awssdk.services.s3.model.S3Exception;\n+\n+public abstract class BaseS3File {\n+  private final S3Client client;\n+  private final S3URI location;\n+  private HeadObjectResponse metadata;\n+\n+  public BaseS3File(S3Client client, S3URI location) {\n+    this.client = client;\n+    this.location = location;\n+  }\n+\n+  public String location() {\n+    return location.toString();\n+  }\n+\n+  public S3Client getClient() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzAyNzUxOA=="}, "originalCommit": {"oid": "d2ae12190424e6822745b17d89f6396cde83f7ba"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0MDM4NjY3OnYy", "diffSide": "RIGHT", "path": "aws/src/main/java/org/apache/iceberg/aws/s3/S3URI.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQwMDoxNjo1MlrOHtE9ww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQxODo0MTozMFrOHu5WWg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzAyOTMxNQ==", "bodyText": "Unfortunately, Java's URI has a lot of problems with character escaping. and it's really hard to reconstruct some or all of a URI from the getter methods that it exposes. The uriToString method that we use actually avoids calling URI#toString and instead uses new Path(uri).toString().\nI think it would be better to parse the URI without it. Since we expect a bucket in the URI authority, we can be fairly strict with parsing rules:\n\nSplit by :// to get scheme and bucket/key\nSplit bucket/key by the first / to get bucket and key\nValidate scheme is s3 or equivalent (s3n, s3a)", "url": "https://github.com/apache/iceberg/pull/1573#discussion_r517029315", "createdAt": "2020-11-04T00:16:52Z", "author": {"login": "rdblue"}, "path": "aws/src/main/java/org/apache/iceberg/aws/s3/S3URI.java", "diffHunk": "@@ -0,0 +1,47 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.aws.s3;\n+\n+import java.net.URI;\n+\n+public class S3URI {\n+  private final URI uri;\n+\n+  public S3URI(URI uri) {\n+    this.uri = uri;\n+  }\n+\n+  public S3URI(String uri) {\n+    this(URI.create(uri));\n+  }\n+\n+  public String bucket() {\n+    return uri.getAuthority();\n+  }\n+\n+  public String key() {\n+    return uri.getPath().startsWith(\"/\") ? uri.getPath().replaceFirst(\"/\", \"\") : uri.getPath();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d2ae12190424e6822745b17d89f6396cde83f7ba"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODkzNjE1NA==", "bodyText": "I'm changed this to a custom S3URI implementation that does not rely on URI.  It does basic validation for scheme with know supported types (https, s3, s3a, s3n).  It will also strip query and fragment (some patterns like externally signed urls or other services could leak those into the location).  Beyond that it does no actual validation since the S3 client will do that.", "url": "https://github.com/apache/iceberg/pull/1573#discussion_r518936154", "createdAt": "2020-11-06T18:41:30Z", "author": {"login": "danielcweeks"}, "path": "aws/src/main/java/org/apache/iceberg/aws/s3/S3URI.java", "diffHunk": "@@ -0,0 +1,47 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.aws.s3;\n+\n+import java.net.URI;\n+\n+public class S3URI {\n+  private final URI uri;\n+\n+  public S3URI(URI uri) {\n+    this.uri = uri;\n+  }\n+\n+  public S3URI(String uri) {\n+    this(URI.create(uri));\n+  }\n+\n+  public String bucket() {\n+    return uri.getAuthority();\n+  }\n+\n+  public String key() {\n+    return uri.getPath().startsWith(\"/\") ? uri.getPath().replaceFirst(\"/\", \"\") : uri.getPath();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzAyOTMxNQ=="}, "originalCommit": {"oid": "d2ae12190424e6822745b17d89f6396cde83f7ba"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0MDM5MzY1OnYy", "diffSide": "RIGHT", "path": "aws/src/test/java/org/apache/iceberg/aws/s3/S3OutputStreamTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQwMDoyMDoyNlrOHtFBhA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQxODo0MTo1OFrOHu5XOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzAzMDI3Ng==", "bodyText": "Should this also call write(int)?", "url": "https://github.com/apache/iceberg/pull/1573#discussion_r517030276", "createdAt": "2020-11-04T00:20:26Z", "author": {"login": "rdblue"}, "path": "aws/src/test/java/org/apache/iceberg/aws/s3/S3OutputStreamTest.java", "diffHunk": "@@ -0,0 +1,83 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.aws.s3;\n+\n+import com.adobe.testing.s3mock.junit4.S3MockRule;\n+import java.io.IOException;\n+import java.util.Random;\n+import org.junit.Before;\n+import org.junit.ClassRule;\n+import org.junit.Test;\n+import software.amazon.awssdk.core.ResponseBytes;\n+import software.amazon.awssdk.core.sync.ResponseTransformer;\n+import software.amazon.awssdk.services.s3.S3Client;\n+import software.amazon.awssdk.services.s3.model.CreateBucketRequest;\n+import software.amazon.awssdk.services.s3.model.GetObjectRequest;\n+import software.amazon.awssdk.services.s3.model.GetObjectResponse;\n+\n+import static org.junit.Assert.assertArrayEquals;\n+import static org.junit.Assert.assertEquals;\n+\n+public class S3OutputStreamTest {\n+  @ClassRule\n+  public static final S3MockRule S3_MOCK_RULE = S3MockRule.builder().silent().build();\n+\n+  private final S3Client s3 = S3_MOCK_RULE.createS3ClientV2();\n+  private final Random random = new Random(1);\n+\n+  @Before\n+  public void before() {\n+    s3.createBucket(CreateBucketRequest.builder().bucket(\"bucket\").build());\n+  }\n+\n+  @Test\n+  public void getPos() throws IOException {\n+    S3URI uri = new S3URI(\"s3://bucket/path/to/pos.dat\");\n+    int writeSize = 1024;\n+\n+    try (S3OutputStream stream = new S3OutputStream(s3, uri)) {\n+      stream.write(new byte[writeSize]);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d2ae12190424e6822745b17d89f6396cde83f7ba"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODkzNjM3Ng==", "bodyText": "Added a separate test for write(int)", "url": "https://github.com/apache/iceberg/pull/1573#discussion_r518936376", "createdAt": "2020-11-06T18:41:58Z", "author": {"login": "danielcweeks"}, "path": "aws/src/test/java/org/apache/iceberg/aws/s3/S3OutputStreamTest.java", "diffHunk": "@@ -0,0 +1,83 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.aws.s3;\n+\n+import com.adobe.testing.s3mock.junit4.S3MockRule;\n+import java.io.IOException;\n+import java.util.Random;\n+import org.junit.Before;\n+import org.junit.ClassRule;\n+import org.junit.Test;\n+import software.amazon.awssdk.core.ResponseBytes;\n+import software.amazon.awssdk.core.sync.ResponseTransformer;\n+import software.amazon.awssdk.services.s3.S3Client;\n+import software.amazon.awssdk.services.s3.model.CreateBucketRequest;\n+import software.amazon.awssdk.services.s3.model.GetObjectRequest;\n+import software.amazon.awssdk.services.s3.model.GetObjectResponse;\n+\n+import static org.junit.Assert.assertArrayEquals;\n+import static org.junit.Assert.assertEquals;\n+\n+public class S3OutputStreamTest {\n+  @ClassRule\n+  public static final S3MockRule S3_MOCK_RULE = S3MockRule.builder().silent().build();\n+\n+  private final S3Client s3 = S3_MOCK_RULE.createS3ClientV2();\n+  private final Random random = new Random(1);\n+\n+  @Before\n+  public void before() {\n+    s3.createBucket(CreateBucketRequest.builder().bucket(\"bucket\").build());\n+  }\n+\n+  @Test\n+  public void getPos() throws IOException {\n+    S3URI uri = new S3URI(\"s3://bucket/path/to/pos.dat\");\n+    int writeSize = 1024;\n+\n+    try (S3OutputStream stream = new S3OutputStream(s3, uri)) {\n+      stream.write(new byte[writeSize]);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzAzMDI3Ng=="}, "originalCommit": {"oid": "d2ae12190424e6822745b17d89f6396cde83f7ba"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0MDQwMDA1OnYy", "diffSide": "RIGHT", "path": "aws/src/test/java/org/apache/iceberg/aws/s3/S3InputStreamTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQwMDoyMzo0N1rOHtFFFQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQwMDoyNjowOVrOHtFHjg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzAzMTE4OQ==", "bodyText": "This only tests read-through seek. Can you add a test for close/open seek?", "url": "https://github.com/apache/iceberg/pull/1573#discussion_r517031189", "createdAt": "2020-11-04T00:23:47Z", "author": {"login": "rdblue"}, "path": "aws/src/test/java/org/apache/iceberg/aws/s3/S3InputStreamTest.java", "diffHunk": "@@ -0,0 +1,145 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.aws.s3;\n+\n+import com.adobe.testing.s3mock.junit4.S3MockRule;\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.Random;\n+import org.apache.commons.io.IOUtils;\n+import org.apache.iceberg.io.SeekableInputStream;\n+import org.junit.Before;\n+import org.junit.ClassRule;\n+import org.junit.Test;\n+import software.amazon.awssdk.core.sync.RequestBody;\n+import software.amazon.awssdk.services.s3.S3Client;\n+import software.amazon.awssdk.services.s3.model.CreateBucketRequest;\n+import software.amazon.awssdk.services.s3.model.PutObjectRequest;\n+\n+import static org.junit.Assert.assertArrayEquals;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertThrows;\n+\n+public class S3InputStreamTest {\n+  @ClassRule\n+  public static final S3MockRule S3_MOCK_RULE = S3MockRule.builder().silent().build();\n+\n+  private final S3Client s3 = S3_MOCK_RULE.createS3ClientV2();\n+  private final Random random = new Random(1);\n+\n+  @Before\n+  public void before() {\n+    s3.createBucket(CreateBucketRequest.builder().bucket(\"bucket\").build());\n+  }\n+\n+  @Test\n+  public void testRead() throws Exception {\n+    S3URI uri = new S3URI(\"s3://bucket/path/to/read.dat\");\n+    int dataSize = 1024 * 1024 * 10;\n+    byte[] data = randomData(dataSize);\n+\n+    writeS3Data(uri, data);\n+\n+    try (SeekableInputStream in = new S3InputStream(s3, uri)) {\n+      int readSize = 1024;\n+      byte [] actual = new byte[readSize];\n+\n+      readAndCheck(in, in.getPos(), readSize, data, false);\n+      readAndCheck(in, in.getPos(), readSize, data, true);\n+\n+      // Seek forward in current stream\n+      int seekSize = 1024;\n+      readAndCheck(in, in.getPos() + seekSize, readSize, data, false);\n+      readAndCheck(in, in.getPos() + seekSize, readSize, data, true);\n+\n+      // Buffered read\n+      readAndCheck(in, in.getPos(), readSize, data, true);\n+      readAndCheck(in, in.getPos(), readSize, data, false);\n+\n+      // Seek with new stream\n+      long seekNewStreamPosition = 2 * 1024 * 1024;\n+      readAndCheck(in, in.getPos() + seekNewStreamPosition, readSize, data, true);\n+      readAndCheck(in, in.getPos() + seekNewStreamPosition, readSize, data, false);\n+\n+      // Backseek and read\n+      readAndCheck(in, 0, readSize, data, true);\n+      readAndCheck(in, 0, readSize, data, false);\n+    }\n+  }\n+\n+  private void readAndCheck(SeekableInputStream in, long rangeStart, int size, byte [] original, boolean buffered)\n+      throws IOException {\n+    in.seek(rangeStart);\n+    assertEquals(rangeStart, in.getPos());\n+\n+    long rangeEnd = rangeStart + size;\n+    byte [] actual = new byte[size];\n+\n+    if (buffered) {\n+      IOUtils.readFully(in, actual);\n+    } else {\n+      int read = 0;\n+      while (read < size) {\n+        actual[read++] = (byte) in.read();\n+      }\n+    }\n+\n+    assertEquals(rangeEnd, in.getPos());\n+    assertArrayEquals(Arrays.copyOfRange(original, (int) rangeStart, (int) rangeEnd), actual);\n+  }\n+\n+  @Test\n+  public void testClose() throws Exception {\n+    S3URI uri = new S3URI(\"s3://bucket/path/to/closed.dat\");\n+    SeekableInputStream closed = new S3InputStream(s3, uri);\n+    closed.close();\n+    assertThrows(IllegalStateException.class, () -> closed.seek(0));\n+  }\n+\n+  @Test\n+  public void testSeek() throws Exception {\n+    S3URI uri = new S3URI(\"s3://bucket/path/to/seek.dat\");\n+    byte[] expected = randomData(1024 * 1024);\n+\n+    writeS3Data(uri, expected);\n+\n+    try (SeekableInputStream in = new S3InputStream(s3, uri)) {\n+      in.seek(expected.length / 2);\n+      byte[] actual = IOUtils.readFully(in, expected.length / 2);\n+      assertArrayEquals(Arrays.copyOfRange(expected, expected.length / 2, expected.length), actual);\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d2ae12190424e6822745b17d89f6396cde83f7ba"}, "originalPosition": 127}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzAzMTgyMg==", "bodyText": "Looks like this is done in the read test.", "url": "https://github.com/apache/iceberg/pull/1573#discussion_r517031822", "createdAt": "2020-11-04T00:26:09Z", "author": {"login": "rdblue"}, "path": "aws/src/test/java/org/apache/iceberg/aws/s3/S3InputStreamTest.java", "diffHunk": "@@ -0,0 +1,145 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.aws.s3;\n+\n+import com.adobe.testing.s3mock.junit4.S3MockRule;\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.Random;\n+import org.apache.commons.io.IOUtils;\n+import org.apache.iceberg.io.SeekableInputStream;\n+import org.junit.Before;\n+import org.junit.ClassRule;\n+import org.junit.Test;\n+import software.amazon.awssdk.core.sync.RequestBody;\n+import software.amazon.awssdk.services.s3.S3Client;\n+import software.amazon.awssdk.services.s3.model.CreateBucketRequest;\n+import software.amazon.awssdk.services.s3.model.PutObjectRequest;\n+\n+import static org.junit.Assert.assertArrayEquals;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertThrows;\n+\n+public class S3InputStreamTest {\n+  @ClassRule\n+  public static final S3MockRule S3_MOCK_RULE = S3MockRule.builder().silent().build();\n+\n+  private final S3Client s3 = S3_MOCK_RULE.createS3ClientV2();\n+  private final Random random = new Random(1);\n+\n+  @Before\n+  public void before() {\n+    s3.createBucket(CreateBucketRequest.builder().bucket(\"bucket\").build());\n+  }\n+\n+  @Test\n+  public void testRead() throws Exception {\n+    S3URI uri = new S3URI(\"s3://bucket/path/to/read.dat\");\n+    int dataSize = 1024 * 1024 * 10;\n+    byte[] data = randomData(dataSize);\n+\n+    writeS3Data(uri, data);\n+\n+    try (SeekableInputStream in = new S3InputStream(s3, uri)) {\n+      int readSize = 1024;\n+      byte [] actual = new byte[readSize];\n+\n+      readAndCheck(in, in.getPos(), readSize, data, false);\n+      readAndCheck(in, in.getPos(), readSize, data, true);\n+\n+      // Seek forward in current stream\n+      int seekSize = 1024;\n+      readAndCheck(in, in.getPos() + seekSize, readSize, data, false);\n+      readAndCheck(in, in.getPos() + seekSize, readSize, data, true);\n+\n+      // Buffered read\n+      readAndCheck(in, in.getPos(), readSize, data, true);\n+      readAndCheck(in, in.getPos(), readSize, data, false);\n+\n+      // Seek with new stream\n+      long seekNewStreamPosition = 2 * 1024 * 1024;\n+      readAndCheck(in, in.getPos() + seekNewStreamPosition, readSize, data, true);\n+      readAndCheck(in, in.getPos() + seekNewStreamPosition, readSize, data, false);\n+\n+      // Backseek and read\n+      readAndCheck(in, 0, readSize, data, true);\n+      readAndCheck(in, 0, readSize, data, false);\n+    }\n+  }\n+\n+  private void readAndCheck(SeekableInputStream in, long rangeStart, int size, byte [] original, boolean buffered)\n+      throws IOException {\n+    in.seek(rangeStart);\n+    assertEquals(rangeStart, in.getPos());\n+\n+    long rangeEnd = rangeStart + size;\n+    byte [] actual = new byte[size];\n+\n+    if (buffered) {\n+      IOUtils.readFully(in, actual);\n+    } else {\n+      int read = 0;\n+      while (read < size) {\n+        actual[read++] = (byte) in.read();\n+      }\n+    }\n+\n+    assertEquals(rangeEnd, in.getPos());\n+    assertArrayEquals(Arrays.copyOfRange(original, (int) rangeStart, (int) rangeEnd), actual);\n+  }\n+\n+  @Test\n+  public void testClose() throws Exception {\n+    S3URI uri = new S3URI(\"s3://bucket/path/to/closed.dat\");\n+    SeekableInputStream closed = new S3InputStream(s3, uri);\n+    closed.close();\n+    assertThrows(IllegalStateException.class, () -> closed.seek(0));\n+  }\n+\n+  @Test\n+  public void testSeek() throws Exception {\n+    S3URI uri = new S3URI(\"s3://bucket/path/to/seek.dat\");\n+    byte[] expected = randomData(1024 * 1024);\n+\n+    writeS3Data(uri, expected);\n+\n+    try (SeekableInputStream in = new S3InputStream(s3, uri)) {\n+      in.seek(expected.length / 2);\n+      byte[] actual = IOUtils.readFully(in, expected.length / 2);\n+      assertArrayEquals(Arrays.copyOfRange(expected, expected.length / 2, expected.length), actual);\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzAzMTE4OQ=="}, "originalCommit": {"oid": "d2ae12190424e6822745b17d89f6396cde83f7ba"}, "originalPosition": 127}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1Mjg5NDc5OnYy", "diffSide": "RIGHT", "path": "LICENSE", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQyMDowMDowNlrOHu7pxg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQyMDoxMDo0NFrOHu8CmA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODk3Mzg5NA==", "bodyText": "At this point of time, I don't see much similarity between the input and output stream of PrestoS3FileSystem and the ones here. Should we still have this line in license?", "url": "https://github.com/apache/iceberg/pull/1573#discussion_r518973894", "createdAt": "2020-11-06T20:00:06Z", "author": {"login": "jackye1995"}, "path": "LICENSE", "diffHunk": "@@ -248,6 +248,8 @@ License: http://www.apache.org/licenses/LICENSE-2.0\n This product includes code from Presto.\n \n * Retry wait and jitter logic in Tasks.java\n+* S3FileIO logic derived from PrestoS3FileSystem.java in S3InputStream.java", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bca7c8fffa139e0b6769082297141e6b5167cb55"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODk4MDI0OA==", "bodyText": "This was what we used as a reference, so even though the vast majority has changed, I feel it's still best to credit.", "url": "https://github.com/apache/iceberg/pull/1573#discussion_r518980248", "createdAt": "2020-11-06T20:10:44Z", "author": {"login": "danielcweeks"}, "path": "LICENSE", "diffHunk": "@@ -248,6 +248,8 @@ License: http://www.apache.org/licenses/LICENSE-2.0\n This product includes code from Presto.\n \n * Retry wait and jitter logic in Tasks.java\n+* S3FileIO logic derived from PrestoS3FileSystem.java in S3InputStream.java", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODk3Mzg5NA=="}, "originalCommit": {"oid": "bca7c8fffa139e0b6769082297141e6b5167cb55"}, "originalPosition": 4}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3583, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}