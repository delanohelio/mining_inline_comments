{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk1MjUxNTgy", "number": 1531, "title": "Allow impl for LocationProvider for to be created during runtime", "bodyText": "This PR allows users to supply implementation of LocationProvider to be created during runtime.\nThis is motivated from the proposal to solve data localization: https://docs.google.com/document/d/1ZluOiRZlmsfNnQJLSqTiBQg7-XeSE-gvEOn2e0y6E54\nFrom the community sync, the feedback is to make to leave implementation to users so other use cases outside data localization could make use of this too: https://lists.apache.org/list.html?dev@iceberg.apache.org", "createdAt": "2020-09-30T04:59:17Z", "url": "https://github.com/apache/iceberg/pull/1531", "merged": true, "mergeCommit": {"oid": "61aa67767511b9acf4534f4cffd795ae2d31ad99"}, "closed": true, "closedAt": "2020-10-06T02:38:49Z", "author": {"login": "mickjermsurawong-stripe"}, "timelineItems": {"totalCount": 35, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdNt67wgH2gAyNDk1MjUxNTgyOmRiN2YzZTUwYjMxN2VkNzMxOGNmNmU1NDFhMzJmMzMzOWIyMGUyNTA=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdPsaVOgH2gAyNDk1MjUxNTgyOjhjMzI0YzViMWM4NDJiZDY0ODIyMDQwOTNlODIyYWNmZDU2ZTUyN2Q=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "db7f3e50b317ed7318cf6e541a32f3339b20e250", "author": {"user": {"login": "mickjermsurawong-stripe", "name": null}}, "url": "https://github.com/apache/iceberg/commit/db7f3e50b317ed7318cf6e541a32f3339b20e250", "committedDate": "2020-09-29T20:08:21Z", "message": "new table properties"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4074a9489b5881c03557b570b592f2a6c15a9a39", "author": {"user": {"login": "mickjermsurawong-stripe", "name": null}}, "url": "https://github.com/apache/iceberg/commit/4074a9489b5881c03557b570b592f2a6c15a9a39", "committedDate": "2020-09-29T20:08:21Z", "message": "expose helper method to get class from partition field"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9412875711965cae28566482765e6b4ec8a9cbf0", "author": {"user": {"login": "mickjermsurawong-stripe", "name": null}}, "url": "https://github.com/apache/iceberg/commit/9412875711965cae28566482765e6b4ec8a9cbf0", "committedDate": "2020-09-29T20:08:21Z", "message": "localized location provider"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ad8b9c196263b1e87f21c067c368c0fec07d906f", "author": {"user": {"login": "mickjermsurawong-stripe", "name": null}}, "url": "https://github.com/apache/iceberg/commit/ad8b9c196263b1e87f21c067c368c0fec07d906f", "committedDate": "2020-09-30T04:58:49Z", "message": "test dataframe writes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9b5f96f08e89d2a04eed09106a7fb1cae125c130", "author": {"user": {"login": "mickjermsurawong-stripe", "name": null}}, "url": "https://github.com/apache/iceberg/commit/9b5f96f08e89d2a04eed09106a7fb1cae125c130", "committedDate": "2020-09-30T05:25:23Z", "message": "formatting"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "51ced5f39aecaf007ada49d6a6dceb3c0495875a", "author": {"user": {"login": "mickjermsurawong-stripe", "name": null}}, "url": "https://github.com/apache/iceberg/commit/51ced5f39aecaf007ada49d6a6dceb3c0495875a", "committedDate": "2020-09-30T05:49:34Z", "message": "format tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c0abcf635fecb77d1d973ea1a37f35d008a38fcd", "author": {"user": {"login": "mickjermsurawong-stripe", "name": null}}, "url": "https://github.com/apache/iceberg/commit/c0abcf635fecb77d1d973ea1a37f35d008a38fcd", "committedDate": "2020-10-01T04:54:13Z", "message": "dynamically load location provider"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bd2d8af93bee5a534e37fcf32e85ea430410393e", "author": {"user": {"login": "mickjermsurawong-stripe", "name": null}}, "url": "https://github.com/apache/iceberg/commit/bd2d8af93bee5a534e37fcf32e85ea430410393e", "committedDate": "2020-10-01T04:58:15Z", "message": "revert refactoring"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a5eff74e37e4ba142f0f16058117266d8e154969", "author": {"user": {"login": "mickjermsurawong-stripe", "name": null}}, "url": "https://github.com/apache/iceberg/commit/a5eff74e37e4ba142f0f16058117266d8e154969", "committedDate": "2020-10-01T04:58:56Z", "message": "remove extra line"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "706cfcbd00bdbe17101e8329be2d4e308552a6ac", "author": {"user": {"login": "mickjermsurawong-stripe", "name": null}}, "url": "https://github.com/apache/iceberg/commit/706cfcbd00bdbe17101e8329be2d4e308552a6ac", "committedDate": "2020-10-01T05:05:22Z", "message": "rename test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2c51cd7c679ca0bfb3a965ae562b99a57ea51e73", "author": {"user": {"login": "mickjermsurawong-stripe", "name": null}}, "url": "https://github.com/apache/iceberg/commit/2c51cd7c679ca0bfb3a965ae562b99a57ea51e73", "committedDate": "2020-10-03T03:57:58Z", "message": "address feedback: test location provider"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "34192da3d1cdad443e542f5711461097cd7abbc1", "author": {"user": {"login": "mickjermsurawong-stripe", "name": null}}, "url": "https://github.com/apache/iceberg/commit/34192da3d1cdad443e542f5711461097cd7abbc1", "committedDate": "2020-10-03T04:01:38Z", "message": "revert old test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "77210d38ea59fb1c6eda0ab9e5e530a8e6e0dd9e", "author": {"user": {"login": "mickjermsurawong-stripe", "name": null}}, "url": "https://github.com/apache/iceberg/commit/77210d38ea59fb1c6eda0ab9e5e530a8e6e0dd9e", "committedDate": "2020-10-03T04:22:03Z", "message": "improve error message"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "73fe85d87feda48cdee01d76e572ac1f2bcb8233", "author": {"user": {"login": "mickjermsurawong-stripe", "name": null}}, "url": "https://github.com/apache/iceberg/commit/73fe85d87feda48cdee01d76e572ac1f2bcb8233", "committedDate": "2020-10-03T04:25:09Z", "message": "format test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9b22a8c19d570dd7c6e7671b31dc704cf122b85c", "author": {"user": {"login": "mickjermsurawong-stripe", "name": null}}, "url": "https://github.com/apache/iceberg/commit/9b22a8c19d570dd7c6e7671b31dc704cf122b85c", "committedDate": "2020-10-03T04:30:44Z", "message": "propagate exception"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAyMjU4MzM1", "url": "https://github.com/apache/iceberg/pull/1531#pullrequestreview-502258335", "createdAt": "2020-10-05T17:11:43Z", "commit": {"oid": "9b22a8c19d570dd7c6e7671b31dc704cf122b85c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxNzoxMTo0M1rOHcmR8w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxNzoxMTo0M1rOHcmR8w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTc0OTM2Mw==", "bodyText": "Instead of exception rules, we like to use AssertHelpers.assertThrows. That way, the test doesn't need to end when the exception is thrown and you can run other validations.\nAlso, we don't typically use the prefix this. unless setting an instance field, unless it helps understanding what's going on. We always using when assigning, though.", "url": "https://github.com/apache/iceberg/pull/1531#discussion_r499749363", "createdAt": "2020-10-05T17:11:43Z", "author": {"login": "rdblue"}, "path": "core/src/test/java/org/apache/iceberg/TestLocationProvider.java", "diffHunk": "@@ -0,0 +1,164 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg;\n+\n+import java.util.Map;\n+import org.apache.iceberg.io.LocationProvider;\n+import org.junit.Assert;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.ExpectedException;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n+\n+@RunWith(Parameterized.class)\n+public class TestLocationProvider extends TableTestBase {\n+  @Parameterized.Parameters\n+  public static Object[][] parameters() {\n+    return new Object[][] {\n+        new Object[] { 1 },\n+        new Object[] { 2 },\n+    };\n+  }\n+\n+  public TestLocationProvider(int formatVersion) {\n+    super(formatVersion);\n+  }\n+\n+  @Rule\n+  public ExpectedException exceptionRule = ExpectedException.none();\n+\n+  // publicly visible for testing to be dynamically loaded\n+  public static class DynamicallyLoadedLocationProvider implements LocationProvider {\n+    String tableLocation;\n+    Map<String, String> properties;\n+\n+    public DynamicallyLoadedLocationProvider(String tableLocation, Map<String, String> properties) {\n+      this.tableLocation = tableLocation;\n+      this.properties = properties;\n+    }\n+\n+    @Override\n+    public String newDataLocation(String filename) {\n+      return String.format(\"%s/test_custom_provider/%s\", this.tableLocation, filename);\n+    }\n+\n+    @Override\n+    public String newDataLocation(PartitionSpec spec, StructLike partitionData, String filename) {\n+      throw new RuntimeException(\"Test custom provider does not expect any invocation\");\n+    }\n+  }\n+\n+  // publicly visible for testing to be dynamically loaded\n+  public static class InvalidDynamicallyLoadedLocationProvider implements LocationProvider {\n+    // No public constructor\n+\n+    @Override\n+    public String newDataLocation(String filename) {\n+      throw new IllegalStateException(\"Should have never been instantiated\");\n+    }\n+\n+    @Override\n+    public String newDataLocation(PartitionSpec spec, StructLike partitionData, String filename) {\n+      throw new IllegalStateException(\"Should have never been instantiated\");\n+    }\n+  }\n+\n+  @Test\n+  public void testDefaultLocationProvider() {\n+    this.table.updateProperties()\n+        .commit();\n+\n+    this.table.locationProvider().newDataLocation(\"my_file\");\n+    Assert.assertEquals(\n+        \"Default data path should have table location as root\",\n+        String.format(\"%s/data/%s\", this.table.location(), \"my_file\"),\n+        this.table.locationProvider().newDataLocation(\"my_file\")\n+    );\n+  }\n+\n+  @Test\n+  public void testDefaultLocationProviderWithCustomDataLocation() {\n+    this.table.updateProperties()\n+        .set(TableProperties.WRITE_NEW_DATA_LOCATION, \"new_location\")\n+        .commit();\n+\n+    this.table.locationProvider().newDataLocation(\"my_file\");\n+    Assert.assertEquals(\n+        \"Default location provider should allow custom path location\",\n+        \"new_location/my_file\",\n+        this.table.locationProvider().newDataLocation(\"my_file\")\n+    );\n+  }\n+\n+  @Test\n+  public void testDynamicallyLoadedLocationProvider() {\n+    this.table.updateProperties()\n+        .set(TableProperties.LOCATION_PROVIDER_IMPL,\n+            String.format(\"%s$%s\",\n+                this.getClass().getCanonicalName(),\n+                DynamicallyLoadedLocationProvider.class.getSimpleName()))\n+        .commit();\n+\n+    Assert.assertTrue(String.format(\"Table should load impl defined in its properties\"),\n+        this.table.locationProvider() instanceof DynamicallyLoadedLocationProvider\n+    );\n+\n+    Assert.assertEquals(\n+        \"Custom provider should take base table location\",\n+        String.format(\"%s/test_custom_provider/%s\", this.table.location(), \"my_file\"),\n+        this.table.locationProvider().newDataLocation(\"my_file\")\n+    );\n+  }\n+\n+  @Test\n+  public void testDynamicallyLoadedLocationProviderNotFound() {\n+    String nonExistentImpl = String.format(\"%s$NonExistent%s\",\n+        this.getClass().getCanonicalName(),\n+        DynamicallyLoadedLocationProvider.class.getSimpleName());\n+    this.table.updateProperties()\n+        .set(TableProperties.LOCATION_PROVIDER_IMPL, nonExistentImpl)\n+        .commit();\n+\n+    exceptionRule.expect(IllegalArgumentException.class);\n+    exceptionRule.expectMessage(\n+        String.format(\"Unable to instantiate the provided implementation %s for %s.\",\n+            nonExistentImpl,\n+            LocationProvider.class));\n+    this.table.locationProvider();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9b22a8c19d570dd7c6e7671b31dc704cf122b85c"}, "originalPosition": 145}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAyMjU5MTk3", "url": "https://github.com/apache/iceberg/pull/1531#pullrequestreview-502259197", "createdAt": "2020-10-05T17:12:54Z", "commit": {"oid": "9b22a8c19d570dd7c6e7671b31dc704cf122b85c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxNzoxMjo1NFrOHcmUkw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxNzoxMjo1NFrOHcmUkw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTc1MDAzNQ==", "bodyText": "Should we support a no-arg constructor as well as the one that passes the table location and properties?", "url": "https://github.com/apache/iceberg/pull/1531#discussion_r499750035", "createdAt": "2020-10-05T17:12:54Z", "author": {"login": "rdblue"}, "path": "core/src/test/java/org/apache/iceberg/TestLocationProvider.java", "diffHunk": "@@ -0,0 +1,164 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg;\n+\n+import java.util.Map;\n+import org.apache.iceberg.io.LocationProvider;\n+import org.junit.Assert;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.ExpectedException;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n+\n+@RunWith(Parameterized.class)\n+public class TestLocationProvider extends TableTestBase {\n+  @Parameterized.Parameters\n+  public static Object[][] parameters() {\n+    return new Object[][] {\n+        new Object[] { 1 },\n+        new Object[] { 2 },\n+    };\n+  }\n+\n+  public TestLocationProvider(int formatVersion) {\n+    super(formatVersion);\n+  }\n+\n+  @Rule\n+  public ExpectedException exceptionRule = ExpectedException.none();\n+\n+  // publicly visible for testing to be dynamically loaded\n+  public static class DynamicallyLoadedLocationProvider implements LocationProvider {\n+    String tableLocation;\n+    Map<String, String> properties;\n+\n+    public DynamicallyLoadedLocationProvider(String tableLocation, Map<String, String> properties) {\n+      this.tableLocation = tableLocation;\n+      this.properties = properties;\n+    }\n+\n+    @Override\n+    public String newDataLocation(String filename) {\n+      return String.format(\"%s/test_custom_provider/%s\", this.tableLocation, filename);\n+    }\n+\n+    @Override\n+    public String newDataLocation(PartitionSpec spec, StructLike partitionData, String filename) {\n+      throw new RuntimeException(\"Test custom provider does not expect any invocation\");\n+    }\n+  }\n+\n+  // publicly visible for testing to be dynamically loaded\n+  public static class InvalidDynamicallyLoadedLocationProvider implements LocationProvider {\n+    // No public constructor", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9b22a8c19d570dd7c6e7671b31dc704cf122b85c"}, "originalPosition": 71}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAyMjU5NDQ3", "url": "https://github.com/apache/iceberg/pull/1531#pullrequestreview-502259447", "createdAt": "2020-10-05T17:13:13Z", "commit": {"oid": "9b22a8c19d570dd7c6e7671b31dc704cf122b85c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxNzoxMzoxM1rOHcmVSw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxNzoxMzoxM1rOHcmVSw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTc1MDIxOQ==", "bodyText": "What happens if the class doesn't implement LocationProvider?\nCould you add a test case for that?", "url": "https://github.com/apache/iceberg/pull/1531#discussion_r499750219", "createdAt": "2020-10-05T17:13:13Z", "author": {"login": "rdblue"}, "path": "core/src/test/java/org/apache/iceberg/TestLocationProvider.java", "diffHunk": "@@ -0,0 +1,164 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg;\n+\n+import java.util.Map;\n+import org.apache.iceberg.io.LocationProvider;\n+import org.junit.Assert;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.ExpectedException;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n+\n+@RunWith(Parameterized.class)\n+public class TestLocationProvider extends TableTestBase {\n+  @Parameterized.Parameters\n+  public static Object[][] parameters() {\n+    return new Object[][] {\n+        new Object[] { 1 },\n+        new Object[] { 2 },\n+    };\n+  }\n+\n+  public TestLocationProvider(int formatVersion) {\n+    super(formatVersion);\n+  }\n+\n+  @Rule\n+  public ExpectedException exceptionRule = ExpectedException.none();\n+\n+  // publicly visible for testing to be dynamically loaded\n+  public static class DynamicallyLoadedLocationProvider implements LocationProvider {\n+    String tableLocation;\n+    Map<String, String> properties;\n+\n+    public DynamicallyLoadedLocationProvider(String tableLocation, Map<String, String> properties) {\n+      this.tableLocation = tableLocation;\n+      this.properties = properties;\n+    }\n+\n+    @Override\n+    public String newDataLocation(String filename) {\n+      return String.format(\"%s/test_custom_provider/%s\", this.tableLocation, filename);\n+    }\n+\n+    @Override\n+    public String newDataLocation(PartitionSpec spec, StructLike partitionData, String filename) {\n+      throw new RuntimeException(\"Test custom provider does not expect any invocation\");\n+    }\n+  }\n+\n+  // publicly visible for testing to be dynamically loaded\n+  public static class InvalidDynamicallyLoadedLocationProvider implements LocationProvider {\n+    // No public constructor\n+\n+    @Override\n+    public String newDataLocation(String filename) {\n+      throw new IllegalStateException(\"Should have never been instantiated\");\n+    }\n+\n+    @Override\n+    public String newDataLocation(PartitionSpec spec, StructLike partitionData, String filename) {\n+      throw new IllegalStateException(\"Should have never been instantiated\");\n+    }\n+  }\n+\n+  @Test\n+  public void testDefaultLocationProvider() {\n+    this.table.updateProperties()\n+        .commit();\n+\n+    this.table.locationProvider().newDataLocation(\"my_file\");\n+    Assert.assertEquals(\n+        \"Default data path should have table location as root\",\n+        String.format(\"%s/data/%s\", this.table.location(), \"my_file\"),\n+        this.table.locationProvider().newDataLocation(\"my_file\")\n+    );\n+  }\n+\n+  @Test\n+  public void testDefaultLocationProviderWithCustomDataLocation() {\n+    this.table.updateProperties()\n+        .set(TableProperties.WRITE_NEW_DATA_LOCATION, \"new_location\")\n+        .commit();\n+\n+    this.table.locationProvider().newDataLocation(\"my_file\");\n+    Assert.assertEquals(\n+        \"Default location provider should allow custom path location\",\n+        \"new_location/my_file\",\n+        this.table.locationProvider().newDataLocation(\"my_file\")\n+    );\n+  }\n+\n+  @Test\n+  public void testDynamicallyLoadedLocationProvider() {\n+    this.table.updateProperties()\n+        .set(TableProperties.LOCATION_PROVIDER_IMPL,\n+            String.format(\"%s$%s\",\n+                this.getClass().getCanonicalName(),\n+                DynamicallyLoadedLocationProvider.class.getSimpleName()))\n+        .commit();\n+\n+    Assert.assertTrue(String.format(\"Table should load impl defined in its properties\"),\n+        this.table.locationProvider() instanceof DynamicallyLoadedLocationProvider\n+    );\n+\n+    Assert.assertEquals(\n+        \"Custom provider should take base table location\",\n+        String.format(\"%s/test_custom_provider/%s\", this.table.location(), \"my_file\"),\n+        this.table.locationProvider().newDataLocation(\"my_file\")\n+    );\n+  }\n+\n+  @Test\n+  public void testDynamicallyLoadedLocationProviderNotFound() {\n+    String nonExistentImpl = String.format(\"%s$NonExistent%s\",\n+        this.getClass().getCanonicalName(),\n+        DynamicallyLoadedLocationProvider.class.getSimpleName());\n+    this.table.updateProperties()\n+        .set(TableProperties.LOCATION_PROVIDER_IMPL, nonExistentImpl)\n+        .commit();\n+\n+    exceptionRule.expect(IllegalArgumentException.class);\n+    exceptionRule.expectMessage(\n+        String.format(\"Unable to instantiate the provided implementation %s for %s.\",\n+            nonExistentImpl,\n+            LocationProvider.class));\n+    this.table.locationProvider();\n+  }\n+\n+  @Test\n+  public void testInvalidDynamicallyLoadedLocationProvider() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9b22a8c19d570dd7c6e7671b31dc704cf122b85c"}, "originalPosition": 149}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAyMjYwNDU2", "url": "https://github.com/apache/iceberg/pull/1531#pullrequestreview-502260456", "createdAt": "2020-10-05T17:14:37Z", "commit": {"oid": "9b22a8c19d570dd7c6e7671b31dc704cf122b85c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxNzoxNDozN1rOHcmYbg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxNzoxNDozN1rOHcmYbg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTc1MTAyMg==", "bodyText": "Do we want to add this to the docs?", "url": "https://github.com/apache/iceberg/pull/1531#discussion_r499751022", "createdAt": "2020-10-05T17:14:37Z", "author": {"login": "aokolnychyi"}, "path": "core/src/main/java/org/apache/iceberg/TableProperties.java", "diffHunk": "@@ -87,6 +87,8 @@ private TableProperties() {\n   public static final String OBJECT_STORE_ENABLED = \"write.object-storage.enabled\";\n   public static final boolean OBJECT_STORE_ENABLED_DEFAULT = false;\n \n+  public static final String LOCATION_PROVIDER_IMPL = \"write.location-provider.impl\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9b22a8c19d570dd7c6e7671b31dc704cf122b85c"}, "originalPosition": 4}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c0c25a251ced0038d1527eda303f34f64d1c632c", "author": {"user": {"login": "mickjermsurawong-stripe", "name": null}}, "url": "https://github.com/apache/iceberg/commit/c0c25a251ced0038d1527eda303f34f64d1c632c", "committedDate": "2020-10-05T19:00:34Z", "message": "support no-arg and write more negative tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6f60d5f77b6641a01638d75af2618940bbd9ded4", "author": {"user": {"login": "mickjermsurawong-stripe", "name": null}}, "url": "https://github.com/apache/iceberg/commit/6f60d5f77b6641a01638d75af2618940bbd9ded4", "committedDate": "2020-10-05T19:11:45Z", "message": "use assert helper for future test extension"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c14078a4efe51cadf2238bc2af131e8cbfb703f1", "author": {"user": {"login": "mickjermsurawong-stripe", "name": null}}, "url": "https://github.com/apache/iceberg/commit/c14078a4efe51cadf2238bc2af131e8cbfb703f1", "committedDate": "2020-10-05T19:14:57Z", "message": "order and update python props"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a34b5d206a29d92ef489c2a27ed96b7b06d31b10", "author": {"user": {"login": "mickjermsurawong-stripe", "name": null}}, "url": "https://github.com/apache/iceberg/commit/a34b5d206a29d92ef489c2a27ed96b7b06d31b10", "committedDate": "2020-10-05T19:19:36Z", "message": "prefix with new prop with WRITE"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "299ed00c6df9ff6b8628afd36fbeae4d18cc83e2", "author": {"user": {"login": "mickjermsurawong-stripe", "name": null}}, "url": "https://github.com/apache/iceberg/commit/299ed00c6df9ff6b8628afd36fbeae4d18cc83e2", "committedDate": "2020-10-05T19:42:02Z", "message": "update docs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0eee2886d3511362581f170aa0e9217740b1e472", "author": {"user": {"login": "mickjermsurawong-stripe", "name": null}}, "url": "https://github.com/apache/iceberg/commit/0eee2886d3511362581f170aa0e9217740b1e472", "committedDate": "2020-10-05T20:01:18Z", "message": "add doc stiring"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5906be082b4371947a784e239245c0c35d1928df", "author": {"user": {"login": "mickjermsurawong-stripe", "name": null}}, "url": "https://github.com/apache/iceberg/commit/5906be082b4371947a784e239245c0c35d1928df", "committedDate": "2020-10-05T21:01:37Z", "message": "fix formatting"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAyNDIxOTMx", "url": "https://github.com/apache/iceberg/pull/1531#pullrequestreview-502421931", "createdAt": "2020-10-05T21:08:10Z", "commit": {"oid": "5906be082b4371947a784e239245c0c35d1928df"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQyMTowODoxMFrOHct2xQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQyMTowODoxMFrOHct2xQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTg3MzQ3Nw==", "bodyText": "When the arguments passed to one constructor are a prefix of the args passed to the other, there is no need to use a different builder or call because the arguments actually passed are limited by the number of parameters defined by the constructor. That makes it possible to pass both arguments to either one, and any extras are ignored.\nThat helps simplify cases like this because you don't need the extra optional logic:\n  ctor = DynConstructors.builder(LocationProvider.class)\n      .impl(impl, String.class, Map.class)\n      .impl(impl) // fall back to no-arg constructor\n      .build()\n  return ctor.newInstance(location, properties);", "url": "https://github.com/apache/iceberg/pull/1531#discussion_r499873477", "createdAt": "2020-10-05T21:08:10Z", "author": {"login": "rdblue"}, "path": "core/src/main/java/org/apache/iceberg/LocationProviders.java", "diffHunk": "@@ -45,6 +50,53 @@ public static LocationProvider locationsFor(String location, Map<String, String>\n     }\n   }\n \n+  private static LocationProvider dynamicallyLoadLocationProvider(String location, Map<String, String> properties) {\n+    String impl = properties.get(TableProperties.WRITE_LOCATION_PROVIDER_IMPL);\n+    Optional<DynConstructors.Ctor<LocationProvider>> noArgConstructor = findConstructor(() ->\n+        DynConstructors.builder(LocationProvider.class)\n+            .impl(impl).build()\n+    );\n+    Optional<DynConstructors.Ctor<LocationProvider>> twoArgConstructor = Optional.empty();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5906be082b4371947a784e239245c0c35d1928df"}, "originalPosition": 32}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAyNDIyNjYz", "url": "https://github.com/apache/iceberg/pull/1531#pullrequestreview-502422663", "createdAt": "2020-10-05T21:09:19Z", "commit": {"oid": "5906be082b4371947a784e239245c0c35d1928df"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQyMTowOToxOVrOHct42g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQyMTowOToxOVrOHct42g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTg3NDAxMA==", "bodyText": "Can you remove the html changes please? The docs that @aokolnychyi was referring to are built from markdown source located in site/docs/configuration.md.", "url": "https://github.com/apache/iceberg/pull/1531#discussion_r499874010", "createdAt": "2020-10-05T21:09:19Z", "author": {"login": "rdblue"}, "path": "site/docs/javadoc/master/constant-values.html", "diffHunk": "@@ -535,13 +535,20 @@ <h2 title=\"org.apache\">org.apache.*</h2>\n <td class=\"colLast\"><code>134217728L</code></td>\n </tr>\n <tr class=\"rowColor\">\n+<td class=\"colFirst\"><a name=\"org.apache.iceberg.TableProperties.WRITE_LOCATION_PROVIDER_IMPL\">\n+    <!--   -->\n+</a><code>public&nbsp;static&nbsp;final&nbsp;java.lang.String</code></td>\n+<td><code><a href=\"org/apache/iceberg/TableProperties.html#WRITE_LOCATION_PROVIDER_IMPL\">WRITE_LOCATION_PROVIDER_IMPL</a></code></td>\n+<td class=\"colLast\"><code>\"write.location-provider.impl\"</code></td>\n+</tr>\n+<tr class=\"altColor\">\n <td class=\"colFirst\"><a name=\"org.apache.iceberg.TableProperties.WRITE_METADATA_LOCATION\">\n <!--   -->\n </a><code>public&nbsp;static&nbsp;final&nbsp;java.lang.String</code></td>\n <td><code><a href=\"org/apache/iceberg/TableProperties.html#WRITE_METADATA_LOCATION\">WRITE_METADATA_LOCATION</a></code></td>\n <td class=\"colLast\"><code>\"write.metadata.path\"</code></td>\n </tr>\n-<tr class=\"altColor\">\n+<tr class=\"rowColor\">", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5906be082b4371947a784e239245c0c35d1928df"}, "originalPosition": 18}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5f9be8ccb54af92fabfc147af2ab6261ade6a8ea", "author": {"user": {"login": "mickjermsurawong-stripe", "name": null}}, "url": "https://github.com/apache/iceberg/commit/5f9be8ccb54af92fabfc147af2ab6261ade6a8ea", "committedDate": "2020-10-05T21:35:16Z", "message": "simplify constructor"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3aeb9e51878350845a31561c8861720c5a2f6841", "author": {"user": {"login": "mickjermsurawong-stripe", "name": null}}, "url": "https://github.com/apache/iceberg/commit/3aeb9e51878350845a31561c8861720c5a2f6841", "committedDate": "2020-10-05T21:35:28Z", "message": "add doc to new property"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2729b79e2f28bc503514223680a03fce4d3eccb7", "author": {"user": {"login": "mickjermsurawong-stripe", "name": null}}, "url": "https://github.com/apache/iceberg/commit/2729b79e2f28bc503514223680a03fce4d3eccb7", "committedDate": "2020-10-05T21:36:03Z", "message": "revert manual html updates"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAyNDM5OTc0", "url": "https://github.com/apache/iceberg/pull/1531#pullrequestreview-502439974", "createdAt": "2020-10-05T21:38:54Z", "commit": {"oid": "2729b79e2f28bc503514223680a03fce4d3eccb7"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQyMTozODo1NVrOHcuseQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQyMTozODo1NVrOHcuseQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTg4NzIyNQ==", "bodyText": "If provided class has the specified constructor signature, but not implementing LocationProvider, it can still be loaded into the dynConstructor. The following block differentiates this missing interface more explicitly.\nMight be a bit more code churn, but it does give more signals to users.", "url": "https://github.com/apache/iceberg/pull/1531#discussion_r499887225", "createdAt": "2020-10-05T21:38:55Z", "author": {"login": "mickjermsurawong-stripe"}, "path": "core/src/main/java/org/apache/iceberg/LocationProviders.java", "diffHunk": "@@ -36,7 +37,29 @@ private LocationProviders() {\n   }\n \n   public static LocationProvider locationsFor(String location, Map<String, String> properties) {\n-    if (PropertyUtil.propertyAsBoolean(properties,\n+    if (properties.containsKey(TableProperties.WRITE_LOCATION_PROVIDER_IMPL)) {\n+      String impl = properties.get(TableProperties.WRITE_LOCATION_PROVIDER_IMPL);\n+      DynConstructors.Ctor<LocationProvider> ctor;\n+      try {\n+        ctor = DynConstructors.builder(LocationProvider.class)\n+            .impl(impl, String.class, Map.class)\n+            .impl(impl).build(); // fall back to no-arg constructor\n+      } catch (RuntimeException e) {\n+        throw new IllegalArgumentException(String.format(\n+            \"Unable to find a constructor for implementation %s of %s. \" +\n+                \"Make sure the implementation is in classpath, and that it either \" +\n+                \"has a public no-arg constructor or a two-arg constructor \" +\n+                \"taking in the string base table location and its property string map.\",\n+            impl, LocationProvider.class));\n+      }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2729b79e2f28bc503514223680a03fce4d3eccb7"}, "originalPosition": 27}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAyNDgwOTMw", "url": "https://github.com/apache/iceberg/pull/1531#pullrequestreview-502480930", "createdAt": "2020-10-05T23:08:48Z", "commit": {"oid": "2729b79e2f28bc503514223680a03fce4d3eccb7"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQyMzowODo0OFrOHcwrGA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQyMzowODo0OFrOHcwrGA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTkxOTY0MA==", "bodyText": "Dynamic constructor?", "url": "https://github.com/apache/iceberg/pull/1531#discussion_r499919640", "createdAt": "2020-10-05T23:08:48Z", "author": {"login": "rdblue"}, "path": "core/src/main/java/org/apache/iceberg/LocationProviders.java", "diffHunk": "@@ -36,7 +37,29 @@ private LocationProviders() {\n   }\n \n   public static LocationProvider locationsFor(String location, Map<String, String> properties) {\n-    if (PropertyUtil.propertyAsBoolean(properties,\n+    if (properties.containsKey(TableProperties.WRITE_LOCATION_PROVIDER_IMPL)) {\n+      String impl = properties.get(TableProperties.WRITE_LOCATION_PROVIDER_IMPL);\n+      DynConstructors.Ctor<LocationProvider> ctor;\n+      try {\n+        ctor = DynConstructors.builder(LocationProvider.class)\n+            .impl(impl, String.class, Map.class)\n+            .impl(impl).build(); // fall back to no-arg constructor\n+      } catch (RuntimeException e) {\n+        throw new IllegalArgumentException(String.format(\n+            \"Unable to find a constructor for implementation %s of %s. \" +\n+                \"Make sure the implementation is in classpath, and that it either \" +\n+                \"has a public no-arg constructor or a two-arg constructor \" +\n+                \"taking in the string base table location and its property string map.\",\n+            impl, LocationProvider.class));\n+      }\n+      try {\n+        return ctor.newInstance(location, properties);\n+      } catch (ClassCastException e) {\n+        throw new IllegalArgumentException(\n+            String.format(\"Provided implementation for dynamic instantiation should implement %s, \" +\n+                \"but found dynamic constructor %s.\", LocationProvider.class, ctor));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2729b79e2f28bc503514223680a03fce4d3eccb7"}, "originalPosition": 33}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAyNDgyMDMy", "url": "https://github.com/apache/iceberg/pull/1531#pullrequestreview-502482032", "createdAt": "2020-10-05T23:11:58Z", "commit": {"oid": "2729b79e2f28bc503514223680a03fce4d3eccb7"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQyMzoxMTo1OFrOHcwu_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQyMzoxMTo1OFrOHcwu_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTkyMDYzNw==", "bodyText": "Since you're catching the exception, it probably makes more sense to use buildChecked so the exception class isn't generic. That exception also has good information about why all of the implementations failed, so I would recommend adding that exception as a cause to this one that is thrown. I like throwing this one for context, though!", "url": "https://github.com/apache/iceberg/pull/1531#discussion_r499920637", "createdAt": "2020-10-05T23:11:58Z", "author": {"login": "rdblue"}, "path": "core/src/main/java/org/apache/iceberg/LocationProviders.java", "diffHunk": "@@ -36,7 +37,29 @@ private LocationProviders() {\n   }\n \n   public static LocationProvider locationsFor(String location, Map<String, String> properties) {\n-    if (PropertyUtil.propertyAsBoolean(properties,\n+    if (properties.containsKey(TableProperties.WRITE_LOCATION_PROVIDER_IMPL)) {\n+      String impl = properties.get(TableProperties.WRITE_LOCATION_PROVIDER_IMPL);\n+      DynConstructors.Ctor<LocationProvider> ctor;\n+      try {\n+        ctor = DynConstructors.builder(LocationProvider.class)\n+            .impl(impl, String.class, Map.class)\n+            .impl(impl).build(); // fall back to no-arg constructor\n+      } catch (RuntimeException e) {\n+        throw new IllegalArgumentException(String.format(\n+            \"Unable to find a constructor for implementation %s of %s. \" +\n+                \"Make sure the implementation is in classpath, and that it either \" +\n+                \"has a public no-arg constructor or a two-arg constructor \" +\n+                \"taking in the string base table location and its property string map.\",\n+            impl, LocationProvider.class));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2729b79e2f28bc503514223680a03fce4d3eccb7"}, "originalPosition": 26}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8c324c5b1c842bd6482204093e822acfd56e527d", "author": {"user": {"login": "mickjermsurawong-stripe", "name": null}}, "url": "https://github.com/apache/iceberg/commit/8c324c5b1c842bd6482204093e822acfd56e527d", "committedDate": "2020-10-05T23:30:41Z", "message": "propagate cause"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3882, "cost": 1, "resetAt": "2021-10-29T19:57:52Z"}}}