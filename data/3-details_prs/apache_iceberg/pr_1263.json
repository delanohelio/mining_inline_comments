{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU3NzU0Mjgz", "number": 1263, "title": "Add MicroBatch support in Iceberg Core", "bodyText": "This PR is separated out from #796 to support streaming read of Iceberg table. The main purpose of adding MicroBatch is to get the size limited batch in Snapshot, which can be used by streaming read either for Spark or Flink.", "createdAt": "2020-07-28T11:42:26Z", "url": "https://github.com/apache/iceberg/pull/1263", "merged": true, "mergeCommit": {"oid": "51d726235b0c1ee089772de12d299b6ab1cfb29c"}, "closed": true, "closedAt": "2020-07-28T17:22:45Z", "author": {"login": "jerryshao"}, "timelineItems": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc5U1TIgH2gAyNDU3NzU0MjgzOjZmYTBmYzIyYzkyYzVkZjBhY2RlNzU4YmIxNjNhMWI0YTFmMTVmZDI=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc5ZTFLAFqTQ1NjgyMjQ5Ng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "6fa0fc22c92c5df0acde758bb163a1b4a1f15fd2", "author": {"user": {"login": "jerryshao", "name": "Saisai Shao"}}, "url": "https://github.com/apache/iceberg/commit/6fa0fc22c92c5df0acde758bb163a1b4a1f15fd2", "committedDate": "2020-07-28T11:36:05Z", "message": "Add MicroBatch support"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU2ODIyNDk2", "url": "https://github.com/apache/iceberg/pull/1263#pullrequestreview-456822496", "createdAt": "2020-07-28T16:48:13Z", "commit": {"oid": "6fa0fc22c92c5df0acde758bb163a1b4a1f15fd2"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQxNjo0ODoxM1rOG4VhZg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQxNjo0ODoxM1rOG4VhZg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTcyNjA1NA==", "bodyText": "Nit: The language on condition failure should match the next precondition check. startFileIndex should be greater than or equal to zero or something would make much more sense to me.", "url": "https://github.com/apache/iceberg/pull/1263#discussion_r461726054", "createdAt": "2020-07-28T16:48:13Z", "author": {"login": "kbendick"}, "path": "core/src/main/java/org/apache/iceberg/MicroBatches.java", "diffHunk": "@@ -0,0 +1,255 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg;\n+\n+import java.io.IOException;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+import org.apache.iceberg.io.CloseableIterable;\n+import org.apache.iceberg.io.CloseableIterator;\n+import org.apache.iceberg.io.FileIO;\n+import org.apache.iceberg.relocated.com.google.common.base.Preconditions;\n+import org.apache.iceberg.relocated.com.google.common.collect.ImmutableList;\n+import org.apache.iceberg.relocated.com.google.common.collect.Lists;\n+import org.apache.iceberg.util.Pair;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class MicroBatches {\n+  private MicroBatches() {\n+  }\n+\n+  public static class MicroBatch {\n+    private final long snapshotId;\n+    private final int startFileIndex;\n+    private final int endFileIndex;\n+    private final long sizeInBytes;\n+    private final List<FileScanTask> tasks;\n+    private final boolean lastIndexOfSnapshot;\n+\n+    private MicroBatch(long snapshotId, int startFileIndex, int endFileIndex, long sizeInBytes,\n+               List<FileScanTask> tasks, boolean lastIndexOfSnapshot) {\n+      this.snapshotId = snapshotId;\n+      this.startFileIndex = startFileIndex;\n+      this.endFileIndex = endFileIndex;\n+      this.sizeInBytes = sizeInBytes;\n+      this.tasks = tasks;\n+      this.lastIndexOfSnapshot = lastIndexOfSnapshot;\n+    }\n+\n+    public long snapshotId() {\n+      return snapshotId;\n+    }\n+\n+    public int startFileIndex() {\n+      return startFileIndex;\n+    }\n+\n+    public int endFileIndex() {\n+      return endFileIndex;\n+    }\n+\n+    public long sizeInBytes() {\n+      return sizeInBytes;\n+    }\n+\n+    public List<FileScanTask> tasks() {\n+      return tasks;\n+    }\n+\n+    public boolean lastIndexOfSnapshot() {\n+      return lastIndexOfSnapshot;\n+    }\n+  }\n+\n+  public static MicroBatchBuilder from(Snapshot snapshot, FileIO io) {\n+    return new MicroBatchBuilder(snapshot, io);\n+  }\n+\n+  public static class MicroBatchBuilder {\n+    private static final Logger LOG = LoggerFactory.getLogger(MicroBatchBuilder.class);\n+\n+    private final Snapshot snapshot;\n+    private final FileIO io;\n+    private boolean caseSensitive;\n+    private Map<Integer, PartitionSpec> specsById;\n+\n+    private MicroBatchBuilder(Snapshot snapshot, FileIO io) {\n+      this.snapshot = snapshot;\n+      this.io = io;\n+      this.caseSensitive = true;\n+    }\n+\n+    public MicroBatchBuilder caseSensitive(boolean sensitive) {\n+      this.caseSensitive = sensitive;\n+      return this;\n+    }\n+\n+    public MicroBatchBuilder specsById(Map<Integer, PartitionSpec> specs) {\n+      this.specsById = specs;\n+      return this;\n+    }\n+\n+    public MicroBatch generate(int startFileIndex, long targetSizeInBytes, boolean isStarting) {\n+      Preconditions.checkArgument(startFileIndex >= 0, \"startFileIndex is unexpectedly smaller than 0\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6fa0fc22c92c5df0acde758bb163a1b4a1f15fd2"}, "originalPosition": 113}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4348, "cost": 1, "resetAt": "2021-10-29T19:57:52Z"}}}