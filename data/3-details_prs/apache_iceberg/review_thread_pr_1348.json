{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY4ODE1NTM4", "number": 1348, "reviewThreads": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMFQyMzo1NDowM1rOEeHgNQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQyMzoyMTo1MVrOEfwQYA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwMDE1NjY5OnYy", "diffSide": "RIGHT", "path": "flink/src/main/java/org/apache/iceberg/flink/sink/FlinkSink.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMFQyMzo1NDowM1rOHJmoeQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQwMjozODo1MVrOHJoTCg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTgzMjE4NQ==", "bodyText": "Since we are already returning the DataStream, would it make sense to avoid the discarding sink and possibly let people stream the iceberg commit files instead? Like what if I wanted to also feed them into kafka?", "url": "https://github.com/apache/iceberg/pull/1348#discussion_r479832185", "createdAt": "2020-08-30T23:54:03Z", "author": {"login": "kbendick"}, "path": "flink/src/main/java/org/apache/iceberg/flink/sink/FlinkSink.java", "diffHunk": "@@ -0,0 +1,192 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.flink.sink;\n+\n+import java.util.Locale;\n+import java.util.Map;\n+import org.apache.flink.api.common.typeinfo.TypeInformation;\n+import org.apache.flink.api.common.typeinfo.Types;\n+import org.apache.flink.streaming.api.datastream.DataStream;\n+import org.apache.flink.streaming.api.datastream.DataStreamSink;\n+import org.apache.flink.streaming.api.functions.sink.DiscardingSink;\n+import org.apache.flink.table.api.TableSchema;\n+import org.apache.flink.table.data.RowData;\n+import org.apache.flink.table.data.util.DataFormatConverters;\n+import org.apache.flink.table.runtime.typeutils.RowDataTypeInfo;\n+import org.apache.flink.table.types.DataType;\n+import org.apache.flink.table.types.logical.LogicalType;\n+import org.apache.flink.table.types.logical.RowType;\n+import org.apache.flink.table.types.utils.TypeConversions;\n+import org.apache.flink.types.Row;\n+import org.apache.hadoop.conf.Configuration;\n+import org.apache.iceberg.DataFile;\n+import org.apache.iceberg.FileFormat;\n+import org.apache.iceberg.Schema;\n+import org.apache.iceberg.Table;\n+import org.apache.iceberg.flink.FlinkSchemaUtil;\n+import org.apache.iceberg.flink.TableLoader;\n+import org.apache.iceberg.relocated.com.google.common.base.Preconditions;\n+import org.apache.iceberg.types.TypeUtil;\n+import org.apache.iceberg.util.PropertyUtil;\n+\n+import static org.apache.iceberg.TableProperties.DEFAULT_FILE_FORMAT;\n+import static org.apache.iceberg.TableProperties.DEFAULT_FILE_FORMAT_DEFAULT;\n+import static org.apache.iceberg.TableProperties.WRITE_TARGET_FILE_SIZE_BYTES;\n+import static org.apache.iceberg.TableProperties.WRITE_TARGET_FILE_SIZE_BYTES_DEFAULT;\n+\n+public class FlinkSink {\n+\n+  private static final String ICEBERG_STREAM_WRITER_NAME = IcebergStreamWriter.class.getSimpleName();\n+  private static final String ICEBERG_FILES_COMMITTER_NAME = IcebergFilesCommitter.class.getSimpleName();\n+\n+  private FlinkSink() {\n+  }\n+\n+  public static Builder forRow(DataStream<Row> input) {\n+    return new Builder().forRow(input);\n+  }\n+\n+  public static Builder forRowData(DataStream<RowData> input) {\n+    return new Builder().forRowData(input);\n+  }\n+\n+  public static class Builder {\n+    private DataStream<Row> rowInput = null;\n+    private DataStream<RowData> rowDataInput = null;\n+    private TableLoader tableLoader;\n+    private Configuration hadoopConf;\n+    private Table table;\n+    private TableSchema tableSchema;\n+\n+    private Builder forRow(DataStream<Row> newRowInput) {\n+      this.rowInput = newRowInput;\n+      return this;\n+    }\n+\n+    private Builder forRowData(DataStream<RowData> newRowDataInput) {\n+      this.rowDataInput = newRowDataInput;\n+      return this;\n+    }\n+\n+    public Builder table(Table newTable) {\n+      this.table = newTable;\n+      return this;\n+    }\n+\n+    public Builder tableLoader(TableLoader newTableLoader) {\n+      this.tableLoader = newTableLoader;\n+      return this;\n+    }\n+\n+    public Builder hadoopConf(Configuration newHadoopConf) {\n+      this.hadoopConf = newHadoopConf;\n+      return this;\n+    }\n+\n+    public Builder tableSchema(TableSchema newTableSchema) {\n+      this.tableSchema = newTableSchema;\n+      return this;\n+    }\n+\n+    private DataStream<RowData> convert() {\n+      Preconditions.checkArgument(rowInput != null, \"The DataStream<Row> to convert shouldn't be null\");\n+\n+      RowType rowType;\n+      DataType[] fieldDataTypes;\n+      if (tableSchema != null) {\n+        rowType = (RowType) tableSchema.toRowDataType().getLogicalType();\n+        fieldDataTypes = tableSchema.getFieldDataTypes();\n+      } else {\n+        rowType = FlinkSchemaUtil.convert(table.schema());\n+        fieldDataTypes = TypeConversions.fromLogicalToDataType(rowType.getChildren().toArray(new LogicalType[0]));\n+      }\n+\n+      DataFormatConverters.RowConverter rowConverter = new DataFormatConverters.RowConverter(fieldDataTypes);\n+\n+      return rowInput.map(rowConverter::toInternal, RowDataTypeInfo.of(rowType));\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    public DataStreamSink<RowData> build() {\n+      Preconditions.checkArgument(rowInput != null || rowDataInput != null,\n+          \"Should initialize input DataStream first with DataStream<Row> or DataStream<RowData>\");\n+      Preconditions.checkArgument(rowInput == null || rowDataInput == null,\n+          \"Could only initialize input DataStream with either DataStream<Row> or DataStream<RowData>\");\n+      Preconditions.checkNotNull(table, \"Table shouldn't be null\");\n+      Preconditions.checkNotNull(tableLoader, \"Table loader shouldn't be null\");\n+      Preconditions.checkNotNull(hadoopConf, \"Hadoop configuration shouldn't be null\");\n+\n+      DataStream<RowData> inputStream = rowInput != null ? convert() : rowDataInput;\n+\n+      IcebergStreamWriter<RowData> streamWriter = createStreamWriter(table, tableSchema);\n+      IcebergFilesCommitter filesCommitter = new IcebergFilesCommitter(tableLoader, hadoopConf);\n+\n+      DataStream<Void> returnStream = inputStream\n+          .transform(ICEBERG_STREAM_WRITER_NAME, TypeInformation.of(DataFile.class), streamWriter)\n+          .setParallelism(inputStream.getParallelism())\n+          .transform(ICEBERG_FILES_COMMITTER_NAME, Types.VOID, filesCommitter)\n+          .setParallelism(1)\n+          .setMaxParallelism(1);\n+\n+      return returnStream.addSink(new DiscardingSink())\n+          .name(String.format(\"IcebergSink %s\", table.toString()))\n+          .setParallelism(1);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0caf973eaf4e66dbf9a185cc98dfcb3053fdd870"}, "originalPosition": 150}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTg1OTQ2Ng==", "bodyText": "You mean you want to feed the committed data files to kafka ?  Is that meaningful for users ?  It will be better to understand if we have such user cases I guess.\nSome context\nin the first sink version,  I made the IcebergFilesCommitter implemented the SinkFucntion, then we could chain the function by addSink directly,  while we found that it did not work for bounded stream because there was no interface/method to indicate that this stream is a bounded one, then we have no way to commit those data files into iceberg table when the stream has reached its end.  So we have to turn to AbstractStreamOperator  and implemented a BoundedOneInput interface.   Finally, int this version,  we will transform the data stream twice (the first one:  rowdata -> dataFiles, the second one: datafiles -> void), and finally add a discarding sink.", "url": "https://github.com/apache/iceberg/pull/1348#discussion_r479859466", "createdAt": "2020-08-31T02:38:51Z", "author": {"login": "openinx"}, "path": "flink/src/main/java/org/apache/iceberg/flink/sink/FlinkSink.java", "diffHunk": "@@ -0,0 +1,192 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.flink.sink;\n+\n+import java.util.Locale;\n+import java.util.Map;\n+import org.apache.flink.api.common.typeinfo.TypeInformation;\n+import org.apache.flink.api.common.typeinfo.Types;\n+import org.apache.flink.streaming.api.datastream.DataStream;\n+import org.apache.flink.streaming.api.datastream.DataStreamSink;\n+import org.apache.flink.streaming.api.functions.sink.DiscardingSink;\n+import org.apache.flink.table.api.TableSchema;\n+import org.apache.flink.table.data.RowData;\n+import org.apache.flink.table.data.util.DataFormatConverters;\n+import org.apache.flink.table.runtime.typeutils.RowDataTypeInfo;\n+import org.apache.flink.table.types.DataType;\n+import org.apache.flink.table.types.logical.LogicalType;\n+import org.apache.flink.table.types.logical.RowType;\n+import org.apache.flink.table.types.utils.TypeConversions;\n+import org.apache.flink.types.Row;\n+import org.apache.hadoop.conf.Configuration;\n+import org.apache.iceberg.DataFile;\n+import org.apache.iceberg.FileFormat;\n+import org.apache.iceberg.Schema;\n+import org.apache.iceberg.Table;\n+import org.apache.iceberg.flink.FlinkSchemaUtil;\n+import org.apache.iceberg.flink.TableLoader;\n+import org.apache.iceberg.relocated.com.google.common.base.Preconditions;\n+import org.apache.iceberg.types.TypeUtil;\n+import org.apache.iceberg.util.PropertyUtil;\n+\n+import static org.apache.iceberg.TableProperties.DEFAULT_FILE_FORMAT;\n+import static org.apache.iceberg.TableProperties.DEFAULT_FILE_FORMAT_DEFAULT;\n+import static org.apache.iceberg.TableProperties.WRITE_TARGET_FILE_SIZE_BYTES;\n+import static org.apache.iceberg.TableProperties.WRITE_TARGET_FILE_SIZE_BYTES_DEFAULT;\n+\n+public class FlinkSink {\n+\n+  private static final String ICEBERG_STREAM_WRITER_NAME = IcebergStreamWriter.class.getSimpleName();\n+  private static final String ICEBERG_FILES_COMMITTER_NAME = IcebergFilesCommitter.class.getSimpleName();\n+\n+  private FlinkSink() {\n+  }\n+\n+  public static Builder forRow(DataStream<Row> input) {\n+    return new Builder().forRow(input);\n+  }\n+\n+  public static Builder forRowData(DataStream<RowData> input) {\n+    return new Builder().forRowData(input);\n+  }\n+\n+  public static class Builder {\n+    private DataStream<Row> rowInput = null;\n+    private DataStream<RowData> rowDataInput = null;\n+    private TableLoader tableLoader;\n+    private Configuration hadoopConf;\n+    private Table table;\n+    private TableSchema tableSchema;\n+\n+    private Builder forRow(DataStream<Row> newRowInput) {\n+      this.rowInput = newRowInput;\n+      return this;\n+    }\n+\n+    private Builder forRowData(DataStream<RowData> newRowDataInput) {\n+      this.rowDataInput = newRowDataInput;\n+      return this;\n+    }\n+\n+    public Builder table(Table newTable) {\n+      this.table = newTable;\n+      return this;\n+    }\n+\n+    public Builder tableLoader(TableLoader newTableLoader) {\n+      this.tableLoader = newTableLoader;\n+      return this;\n+    }\n+\n+    public Builder hadoopConf(Configuration newHadoopConf) {\n+      this.hadoopConf = newHadoopConf;\n+      return this;\n+    }\n+\n+    public Builder tableSchema(TableSchema newTableSchema) {\n+      this.tableSchema = newTableSchema;\n+      return this;\n+    }\n+\n+    private DataStream<RowData> convert() {\n+      Preconditions.checkArgument(rowInput != null, \"The DataStream<Row> to convert shouldn't be null\");\n+\n+      RowType rowType;\n+      DataType[] fieldDataTypes;\n+      if (tableSchema != null) {\n+        rowType = (RowType) tableSchema.toRowDataType().getLogicalType();\n+        fieldDataTypes = tableSchema.getFieldDataTypes();\n+      } else {\n+        rowType = FlinkSchemaUtil.convert(table.schema());\n+        fieldDataTypes = TypeConversions.fromLogicalToDataType(rowType.getChildren().toArray(new LogicalType[0]));\n+      }\n+\n+      DataFormatConverters.RowConverter rowConverter = new DataFormatConverters.RowConverter(fieldDataTypes);\n+\n+      return rowInput.map(rowConverter::toInternal, RowDataTypeInfo.of(rowType));\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    public DataStreamSink<RowData> build() {\n+      Preconditions.checkArgument(rowInput != null || rowDataInput != null,\n+          \"Should initialize input DataStream first with DataStream<Row> or DataStream<RowData>\");\n+      Preconditions.checkArgument(rowInput == null || rowDataInput == null,\n+          \"Could only initialize input DataStream with either DataStream<Row> or DataStream<RowData>\");\n+      Preconditions.checkNotNull(table, \"Table shouldn't be null\");\n+      Preconditions.checkNotNull(tableLoader, \"Table loader shouldn't be null\");\n+      Preconditions.checkNotNull(hadoopConf, \"Hadoop configuration shouldn't be null\");\n+\n+      DataStream<RowData> inputStream = rowInput != null ? convert() : rowDataInput;\n+\n+      IcebergStreamWriter<RowData> streamWriter = createStreamWriter(table, tableSchema);\n+      IcebergFilesCommitter filesCommitter = new IcebergFilesCommitter(tableLoader, hadoopConf);\n+\n+      DataStream<Void> returnStream = inputStream\n+          .transform(ICEBERG_STREAM_WRITER_NAME, TypeInformation.of(DataFile.class), streamWriter)\n+          .setParallelism(inputStream.getParallelism())\n+          .transform(ICEBERG_FILES_COMMITTER_NAME, Types.VOID, filesCommitter)\n+          .setParallelism(1)\n+          .setMaxParallelism(1);\n+\n+      return returnStream.addSink(new DiscardingSink())\n+          .name(String.format(\"IcebergSink %s\", table.toString()))\n+          .setParallelism(1);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTgzMjE4NQ=="}, "originalCommit": {"oid": "0caf973eaf4e66dbf9a185cc98dfcb3053fdd870"}, "originalPosition": 150}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxMTQ2MjE4OnYy", "diffSide": "RIGHT", "path": "flink/src/main/java/org/apache/iceberg/flink/FlinkTableFactory.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQwMzo0NzozMFrOHLUAyQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQwNjozMjozNlrOHLd7-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTYyNDI2NQ==", "bodyText": "I think it is better to just pass a table loader to sink, source and sink can reuse this loader creation function, just like in:\nhttps://github.com/apache/iceberg/pull/1293/files#diff-0ad7dfff9cfa32fbb760796d976fd650R61\nWhat do you think?", "url": "https://github.com/apache/iceberg/pull/1348#discussion_r481624265", "createdAt": "2020-09-02T03:47:30Z", "author": {"login": "JingsongLi"}, "path": "flink/src/main/java/org/apache/iceberg/flink/FlinkTableFactory.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.flink;\n+\n+import java.util.List;\n+import java.util.Map;\n+import org.apache.flink.table.api.ValidationException;\n+import org.apache.flink.table.catalog.ObjectIdentifier;\n+import org.apache.flink.table.catalog.ObjectPath;\n+import org.apache.flink.table.catalog.exceptions.TableNotExistException;\n+import org.apache.flink.table.data.RowData;\n+import org.apache.flink.table.factories.StreamTableSinkFactory;\n+import org.apache.flink.table.sinks.StreamTableSink;\n+import org.apache.iceberg.Table;\n+import org.apache.iceberg.catalog.TableIdentifier;\n+\n+public class FlinkTableFactory implements StreamTableSinkFactory<RowData> {\n+  private final FlinkCatalog catalog;\n+\n+  public FlinkTableFactory(FlinkCatalog catalog) {\n+    this.catalog = catalog;\n+  }\n+\n+  @Override\n+  public StreamTableSink<RowData> createTableSink(Context context) {\n+    ObjectIdentifier identifier = context.getObjectIdentifier();\n+    ObjectPath objectPath = new ObjectPath(identifier.getDatabaseName(), identifier.getObjectName());\n+    TableIdentifier icebergIdentifier = catalog.toIdentifier(objectPath);\n+    try {\n+      Table table = catalog.loadIcebergTable(objectPath);\n+      return new IcebergTableSink(icebergIdentifier, table,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "82f798700f2cb4c0b11ced1f6ec6e4d7fa5af141"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTc4Njg3NQ==", "bodyText": "Make sense to me,  we also don't need to pass the icebergIdentifier  to IcebergTableSink, that makes code more simplier.", "url": "https://github.com/apache/iceberg/pull/1348#discussion_r481786875", "createdAt": "2020-09-02T06:32:36Z", "author": {"login": "openinx"}, "path": "flink/src/main/java/org/apache/iceberg/flink/FlinkTableFactory.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.flink;\n+\n+import java.util.List;\n+import java.util.Map;\n+import org.apache.flink.table.api.ValidationException;\n+import org.apache.flink.table.catalog.ObjectIdentifier;\n+import org.apache.flink.table.catalog.ObjectPath;\n+import org.apache.flink.table.catalog.exceptions.TableNotExistException;\n+import org.apache.flink.table.data.RowData;\n+import org.apache.flink.table.factories.StreamTableSinkFactory;\n+import org.apache.flink.table.sinks.StreamTableSink;\n+import org.apache.iceberg.Table;\n+import org.apache.iceberg.catalog.TableIdentifier;\n+\n+public class FlinkTableFactory implements StreamTableSinkFactory<RowData> {\n+  private final FlinkCatalog catalog;\n+\n+  public FlinkTableFactory(FlinkCatalog catalog) {\n+    this.catalog = catalog;\n+  }\n+\n+  @Override\n+  public StreamTableSink<RowData> createTableSink(Context context) {\n+    ObjectIdentifier identifier = context.getObjectIdentifier();\n+    ObjectPath objectPath = new ObjectPath(identifier.getDatabaseName(), identifier.getObjectName());\n+    TableIdentifier icebergIdentifier = catalog.toIdentifier(objectPath);\n+    try {\n+      Table table = catalog.loadIcebergTable(objectPath);\n+      return new IcebergTableSink(icebergIdentifier, table,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTYyNDI2NQ=="}, "originalCommit": {"oid": "82f798700f2cb4c0b11ced1f6ec6e4d7fa5af141"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxMTQ3MTMxOnYy", "diffSide": "RIGHT", "path": "flink/src/main/java/org/apache/iceberg/flink/IcebergTableSink.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQwMzo0OToxMFrOHLUHDA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQwNjo1NDo0NVrOHLe8wg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTYyNTg2OA==", "bodyText": "This is a deprecated method, no one will call it, you can just return this.", "url": "https://github.com/apache/iceberg/pull/1348#discussion_r481625868", "createdAt": "2020-09-02T03:49:10Z", "author": {"login": "JingsongLi"}, "path": "flink/src/main/java/org/apache/iceberg/flink/IcebergTableSink.java", "diffHunk": "@@ -0,0 +1,90 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.flink;\n+\n+import java.util.Arrays;\n+import org.apache.flink.api.common.typeinfo.TypeInformation;\n+import org.apache.flink.streaming.api.datastream.DataStream;\n+import org.apache.flink.streaming.api.datastream.DataStreamSink;\n+import org.apache.flink.table.api.TableSchema;\n+import org.apache.flink.table.api.ValidationException;\n+import org.apache.flink.table.data.RowData;\n+import org.apache.flink.table.sinks.AppendStreamTableSink;\n+import org.apache.flink.table.sinks.TableSink;\n+import org.apache.flink.table.types.DataType;\n+import org.apache.hadoop.conf.Configuration;\n+import org.apache.iceberg.Table;\n+import org.apache.iceberg.catalog.TableIdentifier;\n+import org.apache.iceberg.flink.sink.FlinkSink;\n+\n+public class IcebergTableSink implements AppendStreamTableSink<RowData> {\n+  private final TableIdentifier tableIdentifier;\n+  private final Table table;\n+  private final CatalogLoader catalogLoader;\n+  private final TableSchema tableSchema;\n+  private final Configuration hadoopConf;\n+\n+  public IcebergTableSink(TableIdentifier tableIdentifier, Table table,\n+                          CatalogLoader catalogLoader, Configuration hadoopConf,\n+                          TableSchema tableSchema) {\n+    this.tableIdentifier = tableIdentifier;\n+    this.table = table;\n+    this.catalogLoader = catalogLoader;\n+    this.hadoopConf = hadoopConf;\n+    this.tableSchema = tableSchema;\n+  }\n+\n+  @Override\n+  public DataStreamSink<?> consumeDataStream(DataStream<RowData> dataStream) {\n+    return FlinkSink.forRowData(dataStream)\n+        .table(table)\n+        .tableLoader(TableLoader.fromCatalog(catalogLoader, tableIdentifier))\n+        .hadoopConf(hadoopConf)\n+        .tableSchema(tableSchema)\n+        .build();\n+  }\n+\n+  @Override\n+  public DataType getConsumedDataType() {\n+    return tableSchema.toRowDataType().bridgedTo(RowData.class);\n+  }\n+\n+  @Override\n+  public TableSchema getTableSchema() {\n+    return this.tableSchema;\n+  }\n+\n+  @Override\n+  public TableSink<RowData> configure(String[] fieldNames, TypeInformation<?>[] fieldTypes) {\n+    if (!Arrays.equals(tableSchema.getFieldNames(), fieldNames)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "82f798700f2cb4c0b11ced1f6ec6e4d7fa5af141"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTgwMzQ1OA==", "bodyText": "OK, I see.  will do .", "url": "https://github.com/apache/iceberg/pull/1348#discussion_r481803458", "createdAt": "2020-09-02T06:54:45Z", "author": {"login": "openinx"}, "path": "flink/src/main/java/org/apache/iceberg/flink/IcebergTableSink.java", "diffHunk": "@@ -0,0 +1,90 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.flink;\n+\n+import java.util.Arrays;\n+import org.apache.flink.api.common.typeinfo.TypeInformation;\n+import org.apache.flink.streaming.api.datastream.DataStream;\n+import org.apache.flink.streaming.api.datastream.DataStreamSink;\n+import org.apache.flink.table.api.TableSchema;\n+import org.apache.flink.table.api.ValidationException;\n+import org.apache.flink.table.data.RowData;\n+import org.apache.flink.table.sinks.AppendStreamTableSink;\n+import org.apache.flink.table.sinks.TableSink;\n+import org.apache.flink.table.types.DataType;\n+import org.apache.hadoop.conf.Configuration;\n+import org.apache.iceberg.Table;\n+import org.apache.iceberg.catalog.TableIdentifier;\n+import org.apache.iceberg.flink.sink.FlinkSink;\n+\n+public class IcebergTableSink implements AppendStreamTableSink<RowData> {\n+  private final TableIdentifier tableIdentifier;\n+  private final Table table;\n+  private final CatalogLoader catalogLoader;\n+  private final TableSchema tableSchema;\n+  private final Configuration hadoopConf;\n+\n+  public IcebergTableSink(TableIdentifier tableIdentifier, Table table,\n+                          CatalogLoader catalogLoader, Configuration hadoopConf,\n+                          TableSchema tableSchema) {\n+    this.tableIdentifier = tableIdentifier;\n+    this.table = table;\n+    this.catalogLoader = catalogLoader;\n+    this.hadoopConf = hadoopConf;\n+    this.tableSchema = tableSchema;\n+  }\n+\n+  @Override\n+  public DataStreamSink<?> consumeDataStream(DataStream<RowData> dataStream) {\n+    return FlinkSink.forRowData(dataStream)\n+        .table(table)\n+        .tableLoader(TableLoader.fromCatalog(catalogLoader, tableIdentifier))\n+        .hadoopConf(hadoopConf)\n+        .tableSchema(tableSchema)\n+        .build();\n+  }\n+\n+  @Override\n+  public DataType getConsumedDataType() {\n+    return tableSchema.toRowDataType().bridgedTo(RowData.class);\n+  }\n+\n+  @Override\n+  public TableSchema getTableSchema() {\n+    return this.tableSchema;\n+  }\n+\n+  @Override\n+  public TableSink<RowData> configure(String[] fieldNames, TypeInformation<?>[] fieldTypes) {\n+    if (!Arrays.equals(tableSchema.getFieldNames(), fieldNames)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTYyNTg2OA=="}, "originalCommit": {"oid": "82f798700f2cb4c0b11ced1f6ec6e4d7fa5af141"}, "originalPosition": 76}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxMTQ4NDgwOnYy", "diffSide": "RIGHT", "path": "flink/src/test/java/org/apache/iceberg/flink/TestFlinkTableSink.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQwMzo1MToyOVrOHLUPrQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQwNzoxMDoyMlrOHLfr2Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTYyODA3Nw==", "bodyText": "Can we use Parameterized for batch too?", "url": "https://github.com/apache/iceberg/pull/1348#discussion_r481628077", "createdAt": "2020-09-02T03:51:29Z", "author": {"login": "JingsongLi"}, "path": "flink/src/test/java/org/apache/iceberg/flink/TestFlinkTableSink.java", "diffHunk": "@@ -0,0 +1,215 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.flink;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.concurrent.ExecutionException;\n+import org.apache.flink.api.common.typeinfo.TypeInformation;\n+import org.apache.flink.api.java.typeutils.RowTypeInfo;\n+import org.apache.flink.streaming.api.TimeCharacteristic;\n+import org.apache.flink.streaming.api.datastream.DataStream;\n+import org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;\n+import org.apache.flink.streaming.util.FiniteTestSource;\n+import org.apache.flink.table.api.EnvironmentSettings;\n+import org.apache.flink.table.api.TableEnvironment;\n+import org.apache.flink.table.api.TableResult;\n+import org.apache.flink.table.api.bridge.java.StreamTableEnvironment;\n+import org.apache.flink.table.api.config.TableConfigOptions;\n+import org.apache.flink.table.data.RowData;\n+import org.apache.flink.table.data.util.DataFormatConverters;\n+import org.apache.flink.table.runtime.typeutils.RowDataTypeInfo;\n+import org.apache.flink.test.util.AbstractTestBase;\n+import org.apache.flink.types.Row;\n+import org.apache.hadoop.conf.Configuration;\n+import org.apache.iceberg.FileFormat;\n+import org.apache.iceberg.PartitionSpec;\n+import org.apache.iceberg.TableProperties;\n+import org.apache.iceberg.catalog.Catalog;\n+import org.apache.iceberg.catalog.TableIdentifier;\n+import org.apache.iceberg.data.Record;\n+import org.apache.iceberg.hadoop.HadoopCatalog;\n+import org.apache.iceberg.relocated.com.google.common.collect.ImmutableMap;\n+import org.apache.iceberg.relocated.com.google.common.collect.Lists;\n+import org.apache.iceberg.util.Pair;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.TemporaryFolder;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n+\n+import static org.apache.flink.table.api.Expressions.$;\n+\n+@RunWith(Parameterized.class)\n+public class TestFlinkTableSink extends AbstractTestBase {\n+  private static final Configuration CONF = new Configuration();\n+  private static final DataFormatConverters.RowConverter CONVERTER = new DataFormatConverters.RowConverter(\n+      SimpleDataUtil.FLINK_SCHEMA.getFieldDataTypes());\n+\n+  private static final String TABLE_NAME = \"flink_table\";\n+\n+  @Rule\n+  public TemporaryFolder tempFolder = new TemporaryFolder();\n+  private String tablePath;\n+  private String warehouse;\n+  private Map<String, String> properties;\n+  private Catalog catalog;\n+  private StreamExecutionEnvironment env;\n+  private StreamTableEnvironment tEnv;\n+\n+  private final FileFormat format;\n+  private final int parallelism;\n+\n+  @Parameterized.Parameters(name = \"{index}: format={0}, parallelism={2}\")\n+  public static Iterable<Object[]> data() {\n+    return Arrays.asList(\n+        new Object[] {\"avro\", 1},\n+        new Object[] {\"avro\", 2},\n+        new Object[] {\"orc\", 1},\n+        new Object[] {\"orc\", 2},\n+        new Object[] {\"parquet\", 1},\n+        new Object[] {\"parquet\", 2}\n+    );\n+  }\n+\n+  public TestFlinkTableSink(String format, int parallelism) {\n+    this.format = FileFormat.valueOf(format.toUpperCase(Locale.ENGLISH));\n+    this.parallelism = parallelism;\n+  }\n+\n+  @Before\n+  public void before() throws IOException {\n+    File folder = tempFolder.newFolder();\n+    warehouse = folder.getAbsolutePath();\n+\n+    tablePath = warehouse.concat(\"/default/\").concat(TABLE_NAME);\n+    Assert.assertTrue(\"Should create the table path correctly.\", new File(tablePath).mkdirs());\n+\n+    properties = ImmutableMap.of(TableProperties.DEFAULT_FILE_FORMAT, format.name());\n+    catalog = new HadoopCatalog(CONF, warehouse);\n+\n+    env = StreamExecutionEnvironment.getExecutionEnvironment();\n+    env.setStreamTimeCharacteristic(TimeCharacteristic.EventTime);\n+    env.enableCheckpointing(400);\n+    env.setParallelism(parallelism);\n+\n+    EnvironmentSettings settings = EnvironmentSettings\n+        .newInstance()\n+        .useBlinkPlanner()\n+        .inStreamingMode()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "82f798700f2cb4c0b11ced1f6ec6e4d7fa5af141"}, "originalPosition": 122}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTgxNTUxMw==", "bodyText": "That's a great idea, we could reuse almost all of the codes then.", "url": "https://github.com/apache/iceberg/pull/1348#discussion_r481815513", "createdAt": "2020-09-02T07:10:22Z", "author": {"login": "openinx"}, "path": "flink/src/test/java/org/apache/iceberg/flink/TestFlinkTableSink.java", "diffHunk": "@@ -0,0 +1,215 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.flink;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.concurrent.ExecutionException;\n+import org.apache.flink.api.common.typeinfo.TypeInformation;\n+import org.apache.flink.api.java.typeutils.RowTypeInfo;\n+import org.apache.flink.streaming.api.TimeCharacteristic;\n+import org.apache.flink.streaming.api.datastream.DataStream;\n+import org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;\n+import org.apache.flink.streaming.util.FiniteTestSource;\n+import org.apache.flink.table.api.EnvironmentSettings;\n+import org.apache.flink.table.api.TableEnvironment;\n+import org.apache.flink.table.api.TableResult;\n+import org.apache.flink.table.api.bridge.java.StreamTableEnvironment;\n+import org.apache.flink.table.api.config.TableConfigOptions;\n+import org.apache.flink.table.data.RowData;\n+import org.apache.flink.table.data.util.DataFormatConverters;\n+import org.apache.flink.table.runtime.typeutils.RowDataTypeInfo;\n+import org.apache.flink.test.util.AbstractTestBase;\n+import org.apache.flink.types.Row;\n+import org.apache.hadoop.conf.Configuration;\n+import org.apache.iceberg.FileFormat;\n+import org.apache.iceberg.PartitionSpec;\n+import org.apache.iceberg.TableProperties;\n+import org.apache.iceberg.catalog.Catalog;\n+import org.apache.iceberg.catalog.TableIdentifier;\n+import org.apache.iceberg.data.Record;\n+import org.apache.iceberg.hadoop.HadoopCatalog;\n+import org.apache.iceberg.relocated.com.google.common.collect.ImmutableMap;\n+import org.apache.iceberg.relocated.com.google.common.collect.Lists;\n+import org.apache.iceberg.util.Pair;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.TemporaryFolder;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n+\n+import static org.apache.flink.table.api.Expressions.$;\n+\n+@RunWith(Parameterized.class)\n+public class TestFlinkTableSink extends AbstractTestBase {\n+  private static final Configuration CONF = new Configuration();\n+  private static final DataFormatConverters.RowConverter CONVERTER = new DataFormatConverters.RowConverter(\n+      SimpleDataUtil.FLINK_SCHEMA.getFieldDataTypes());\n+\n+  private static final String TABLE_NAME = \"flink_table\";\n+\n+  @Rule\n+  public TemporaryFolder tempFolder = new TemporaryFolder();\n+  private String tablePath;\n+  private String warehouse;\n+  private Map<String, String> properties;\n+  private Catalog catalog;\n+  private StreamExecutionEnvironment env;\n+  private StreamTableEnvironment tEnv;\n+\n+  private final FileFormat format;\n+  private final int parallelism;\n+\n+  @Parameterized.Parameters(name = \"{index}: format={0}, parallelism={2}\")\n+  public static Iterable<Object[]> data() {\n+    return Arrays.asList(\n+        new Object[] {\"avro\", 1},\n+        new Object[] {\"avro\", 2},\n+        new Object[] {\"orc\", 1},\n+        new Object[] {\"orc\", 2},\n+        new Object[] {\"parquet\", 1},\n+        new Object[] {\"parquet\", 2}\n+    );\n+  }\n+\n+  public TestFlinkTableSink(String format, int parallelism) {\n+    this.format = FileFormat.valueOf(format.toUpperCase(Locale.ENGLISH));\n+    this.parallelism = parallelism;\n+  }\n+\n+  @Before\n+  public void before() throws IOException {\n+    File folder = tempFolder.newFolder();\n+    warehouse = folder.getAbsolutePath();\n+\n+    tablePath = warehouse.concat(\"/default/\").concat(TABLE_NAME);\n+    Assert.assertTrue(\"Should create the table path correctly.\", new File(tablePath).mkdirs());\n+\n+    properties = ImmutableMap.of(TableProperties.DEFAULT_FILE_FORMAT, format.name());\n+    catalog = new HadoopCatalog(CONF, warehouse);\n+\n+    env = StreamExecutionEnvironment.getExecutionEnvironment();\n+    env.setStreamTimeCharacteristic(TimeCharacteristic.EventTime);\n+    env.enableCheckpointing(400);\n+    env.setParallelism(parallelism);\n+\n+    EnvironmentSettings settings = EnvironmentSettings\n+        .newInstance()\n+        .useBlinkPlanner()\n+        .inStreamingMode()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTYyODA3Nw=="}, "originalCommit": {"oid": "82f798700f2cb4c0b11ced1f6ec6e4d7fa5af141"}, "originalPosition": 122}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxMTQ4OTU3OnYy", "diffSide": "RIGHT", "path": "flink/src/test/java/org/apache/iceberg/flink/TestFlinkTableSink.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQwMzo1MjoxMVrOHLUSwA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQwODoxMTo1NFrOHLi5ZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTYyODg2NA==", "bodyText": "Looks like there is no dynamic table options. (Table hints)", "url": "https://github.com/apache/iceberg/pull/1348#discussion_r481628864", "createdAt": "2020-09-02T03:52:11Z", "author": {"login": "JingsongLi"}, "path": "flink/src/test/java/org/apache/iceberg/flink/TestFlinkTableSink.java", "diffHunk": "@@ -0,0 +1,215 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.flink;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.concurrent.ExecutionException;\n+import org.apache.flink.api.common.typeinfo.TypeInformation;\n+import org.apache.flink.api.java.typeutils.RowTypeInfo;\n+import org.apache.flink.streaming.api.TimeCharacteristic;\n+import org.apache.flink.streaming.api.datastream.DataStream;\n+import org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;\n+import org.apache.flink.streaming.util.FiniteTestSource;\n+import org.apache.flink.table.api.EnvironmentSettings;\n+import org.apache.flink.table.api.TableEnvironment;\n+import org.apache.flink.table.api.TableResult;\n+import org.apache.flink.table.api.bridge.java.StreamTableEnvironment;\n+import org.apache.flink.table.api.config.TableConfigOptions;\n+import org.apache.flink.table.data.RowData;\n+import org.apache.flink.table.data.util.DataFormatConverters;\n+import org.apache.flink.table.runtime.typeutils.RowDataTypeInfo;\n+import org.apache.flink.test.util.AbstractTestBase;\n+import org.apache.flink.types.Row;\n+import org.apache.hadoop.conf.Configuration;\n+import org.apache.iceberg.FileFormat;\n+import org.apache.iceberg.PartitionSpec;\n+import org.apache.iceberg.TableProperties;\n+import org.apache.iceberg.catalog.Catalog;\n+import org.apache.iceberg.catalog.TableIdentifier;\n+import org.apache.iceberg.data.Record;\n+import org.apache.iceberg.hadoop.HadoopCatalog;\n+import org.apache.iceberg.relocated.com.google.common.collect.ImmutableMap;\n+import org.apache.iceberg.relocated.com.google.common.collect.Lists;\n+import org.apache.iceberg.util.Pair;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.TemporaryFolder;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n+\n+import static org.apache.flink.table.api.Expressions.$;\n+\n+@RunWith(Parameterized.class)\n+public class TestFlinkTableSink extends AbstractTestBase {\n+  private static final Configuration CONF = new Configuration();\n+  private static final DataFormatConverters.RowConverter CONVERTER = new DataFormatConverters.RowConverter(\n+      SimpleDataUtil.FLINK_SCHEMA.getFieldDataTypes());\n+\n+  private static final String TABLE_NAME = \"flink_table\";\n+\n+  @Rule\n+  public TemporaryFolder tempFolder = new TemporaryFolder();\n+  private String tablePath;\n+  private String warehouse;\n+  private Map<String, String> properties;\n+  private Catalog catalog;\n+  private StreamExecutionEnvironment env;\n+  private StreamTableEnvironment tEnv;\n+\n+  private final FileFormat format;\n+  private final int parallelism;\n+\n+  @Parameterized.Parameters(name = \"{index}: format={0}, parallelism={2}\")\n+  public static Iterable<Object[]> data() {\n+    return Arrays.asList(\n+        new Object[] {\"avro\", 1},\n+        new Object[] {\"avro\", 2},\n+        new Object[] {\"orc\", 1},\n+        new Object[] {\"orc\", 2},\n+        new Object[] {\"parquet\", 1},\n+        new Object[] {\"parquet\", 2}\n+    );\n+  }\n+\n+  public TestFlinkTableSink(String format, int parallelism) {\n+    this.format = FileFormat.valueOf(format.toUpperCase(Locale.ENGLISH));\n+    this.parallelism = parallelism;\n+  }\n+\n+  @Before\n+  public void before() throws IOException {\n+    File folder = tempFolder.newFolder();\n+    warehouse = folder.getAbsolutePath();\n+\n+    tablePath = warehouse.concat(\"/default/\").concat(TABLE_NAME);\n+    Assert.assertTrue(\"Should create the table path correctly.\", new File(tablePath).mkdirs());\n+\n+    properties = ImmutableMap.of(TableProperties.DEFAULT_FILE_FORMAT, format.name());\n+    catalog = new HadoopCatalog(CONF, warehouse);\n+\n+    env = StreamExecutionEnvironment.getExecutionEnvironment();\n+    env.setStreamTimeCharacteristic(TimeCharacteristic.EventTime);\n+    env.enableCheckpointing(400);\n+    env.setParallelism(parallelism);\n+\n+    EnvironmentSettings settings = EnvironmentSettings\n+        .newInstance()\n+        .useBlinkPlanner()\n+        .inStreamingMode()\n+        .build();\n+    tEnv = StreamTableEnvironment.create(env, settings);\n+    tEnv.executeSql(String.format(\"create catalog iceberg_catalog with (\" +\n+        \"'type'='iceberg', 'catalog-type'='hadoop', 'warehouse'='%s')\", warehouse));\n+    tEnv.executeSql(\"use catalog iceberg_catalog\");\n+    tEnv.getConfig().getConfiguration().set(TableConfigOptions.TABLE_DYNAMIC_TABLE_OPTIONS_ENABLED, true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "82f798700f2cb4c0b11ced1f6ec6e4d7fa5af141"}, "originalPosition": 128}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTg2ODEzMw==", "bodyText": "OK, it could be removed now.", "url": "https://github.com/apache/iceberg/pull/1348#discussion_r481868133", "createdAt": "2020-09-02T08:11:54Z", "author": {"login": "openinx"}, "path": "flink/src/test/java/org/apache/iceberg/flink/TestFlinkTableSink.java", "diffHunk": "@@ -0,0 +1,215 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.flink;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.concurrent.ExecutionException;\n+import org.apache.flink.api.common.typeinfo.TypeInformation;\n+import org.apache.flink.api.java.typeutils.RowTypeInfo;\n+import org.apache.flink.streaming.api.TimeCharacteristic;\n+import org.apache.flink.streaming.api.datastream.DataStream;\n+import org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;\n+import org.apache.flink.streaming.util.FiniteTestSource;\n+import org.apache.flink.table.api.EnvironmentSettings;\n+import org.apache.flink.table.api.TableEnvironment;\n+import org.apache.flink.table.api.TableResult;\n+import org.apache.flink.table.api.bridge.java.StreamTableEnvironment;\n+import org.apache.flink.table.api.config.TableConfigOptions;\n+import org.apache.flink.table.data.RowData;\n+import org.apache.flink.table.data.util.DataFormatConverters;\n+import org.apache.flink.table.runtime.typeutils.RowDataTypeInfo;\n+import org.apache.flink.test.util.AbstractTestBase;\n+import org.apache.flink.types.Row;\n+import org.apache.hadoop.conf.Configuration;\n+import org.apache.iceberg.FileFormat;\n+import org.apache.iceberg.PartitionSpec;\n+import org.apache.iceberg.TableProperties;\n+import org.apache.iceberg.catalog.Catalog;\n+import org.apache.iceberg.catalog.TableIdentifier;\n+import org.apache.iceberg.data.Record;\n+import org.apache.iceberg.hadoop.HadoopCatalog;\n+import org.apache.iceberg.relocated.com.google.common.collect.ImmutableMap;\n+import org.apache.iceberg.relocated.com.google.common.collect.Lists;\n+import org.apache.iceberg.util.Pair;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.TemporaryFolder;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n+\n+import static org.apache.flink.table.api.Expressions.$;\n+\n+@RunWith(Parameterized.class)\n+public class TestFlinkTableSink extends AbstractTestBase {\n+  private static final Configuration CONF = new Configuration();\n+  private static final DataFormatConverters.RowConverter CONVERTER = new DataFormatConverters.RowConverter(\n+      SimpleDataUtil.FLINK_SCHEMA.getFieldDataTypes());\n+\n+  private static final String TABLE_NAME = \"flink_table\";\n+\n+  @Rule\n+  public TemporaryFolder tempFolder = new TemporaryFolder();\n+  private String tablePath;\n+  private String warehouse;\n+  private Map<String, String> properties;\n+  private Catalog catalog;\n+  private StreamExecutionEnvironment env;\n+  private StreamTableEnvironment tEnv;\n+\n+  private final FileFormat format;\n+  private final int parallelism;\n+\n+  @Parameterized.Parameters(name = \"{index}: format={0}, parallelism={2}\")\n+  public static Iterable<Object[]> data() {\n+    return Arrays.asList(\n+        new Object[] {\"avro\", 1},\n+        new Object[] {\"avro\", 2},\n+        new Object[] {\"orc\", 1},\n+        new Object[] {\"orc\", 2},\n+        new Object[] {\"parquet\", 1},\n+        new Object[] {\"parquet\", 2}\n+    );\n+  }\n+\n+  public TestFlinkTableSink(String format, int parallelism) {\n+    this.format = FileFormat.valueOf(format.toUpperCase(Locale.ENGLISH));\n+    this.parallelism = parallelism;\n+  }\n+\n+  @Before\n+  public void before() throws IOException {\n+    File folder = tempFolder.newFolder();\n+    warehouse = folder.getAbsolutePath();\n+\n+    tablePath = warehouse.concat(\"/default/\").concat(TABLE_NAME);\n+    Assert.assertTrue(\"Should create the table path correctly.\", new File(tablePath).mkdirs());\n+\n+    properties = ImmutableMap.of(TableProperties.DEFAULT_FILE_FORMAT, format.name());\n+    catalog = new HadoopCatalog(CONF, warehouse);\n+\n+    env = StreamExecutionEnvironment.getExecutionEnvironment();\n+    env.setStreamTimeCharacteristic(TimeCharacteristic.EventTime);\n+    env.enableCheckpointing(400);\n+    env.setParallelism(parallelism);\n+\n+    EnvironmentSettings settings = EnvironmentSettings\n+        .newInstance()\n+        .useBlinkPlanner()\n+        .inStreamingMode()\n+        .build();\n+    tEnv = StreamTableEnvironment.create(env, settings);\n+    tEnv.executeSql(String.format(\"create catalog iceberg_catalog with (\" +\n+        \"'type'='iceberg', 'catalog-type'='hadoop', 'warehouse'='%s')\", warehouse));\n+    tEnv.executeSql(\"use catalog iceberg_catalog\");\n+    tEnv.getConfig().getConfiguration().set(TableConfigOptions.TABLE_DYNAMIC_TABLE_OPTIONS_ENABLED, true);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTYyODg2NA=="}, "originalCommit": {"oid": "82f798700f2cb4c0b11ced1f6ec6e4d7fa5af141"}, "originalPosition": 128}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxMTQ5NDk4OnYy", "diffSide": "RIGHT", "path": "flink/src/test/java/org/apache/iceberg/flink/TestFlinkTableSink.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQwMzo1MzowN1rOHLUWTg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQwMzo1MzowN1rOHLUWTg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTYyOTc3NA==", "bodyText": "Can we use TableEnvironment.fromValues?", "url": "https://github.com/apache/iceberg/pull/1348#discussion_r481629774", "createdAt": "2020-09-02T03:53:07Z", "author": {"login": "JingsongLi"}, "path": "flink/src/test/java/org/apache/iceberg/flink/TestFlinkTableSink.java", "diffHunk": "@@ -0,0 +1,215 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.flink;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.concurrent.ExecutionException;\n+import org.apache.flink.api.common.typeinfo.TypeInformation;\n+import org.apache.flink.api.java.typeutils.RowTypeInfo;\n+import org.apache.flink.streaming.api.TimeCharacteristic;\n+import org.apache.flink.streaming.api.datastream.DataStream;\n+import org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;\n+import org.apache.flink.streaming.util.FiniteTestSource;\n+import org.apache.flink.table.api.EnvironmentSettings;\n+import org.apache.flink.table.api.TableEnvironment;\n+import org.apache.flink.table.api.TableResult;\n+import org.apache.flink.table.api.bridge.java.StreamTableEnvironment;\n+import org.apache.flink.table.api.config.TableConfigOptions;\n+import org.apache.flink.table.data.RowData;\n+import org.apache.flink.table.data.util.DataFormatConverters;\n+import org.apache.flink.table.runtime.typeutils.RowDataTypeInfo;\n+import org.apache.flink.test.util.AbstractTestBase;\n+import org.apache.flink.types.Row;\n+import org.apache.hadoop.conf.Configuration;\n+import org.apache.iceberg.FileFormat;\n+import org.apache.iceberg.PartitionSpec;\n+import org.apache.iceberg.TableProperties;\n+import org.apache.iceberg.catalog.Catalog;\n+import org.apache.iceberg.catalog.TableIdentifier;\n+import org.apache.iceberg.data.Record;\n+import org.apache.iceberg.hadoop.HadoopCatalog;\n+import org.apache.iceberg.relocated.com.google.common.collect.ImmutableMap;\n+import org.apache.iceberg.relocated.com.google.common.collect.Lists;\n+import org.apache.iceberg.util.Pair;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.TemporaryFolder;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n+\n+import static org.apache.flink.table.api.Expressions.$;\n+\n+@RunWith(Parameterized.class)\n+public class TestFlinkTableSink extends AbstractTestBase {\n+  private static final Configuration CONF = new Configuration();\n+  private static final DataFormatConverters.RowConverter CONVERTER = new DataFormatConverters.RowConverter(\n+      SimpleDataUtil.FLINK_SCHEMA.getFieldDataTypes());\n+\n+  private static final String TABLE_NAME = \"flink_table\";\n+\n+  @Rule\n+  public TemporaryFolder tempFolder = new TemporaryFolder();\n+  private String tablePath;\n+  private String warehouse;\n+  private Map<String, String> properties;\n+  private Catalog catalog;\n+  private StreamExecutionEnvironment env;\n+  private StreamTableEnvironment tEnv;\n+\n+  private final FileFormat format;\n+  private final int parallelism;\n+\n+  @Parameterized.Parameters(name = \"{index}: format={0}, parallelism={2}\")\n+  public static Iterable<Object[]> data() {\n+    return Arrays.asList(\n+        new Object[] {\"avro\", 1},\n+        new Object[] {\"avro\", 2},\n+        new Object[] {\"orc\", 1},\n+        new Object[] {\"orc\", 2},\n+        new Object[] {\"parquet\", 1},\n+        new Object[] {\"parquet\", 2}\n+    );\n+  }\n+\n+  public TestFlinkTableSink(String format, int parallelism) {\n+    this.format = FileFormat.valueOf(format.toUpperCase(Locale.ENGLISH));\n+    this.parallelism = parallelism;\n+  }\n+\n+  @Before\n+  public void before() throws IOException {\n+    File folder = tempFolder.newFolder();\n+    warehouse = folder.getAbsolutePath();\n+\n+    tablePath = warehouse.concat(\"/default/\").concat(TABLE_NAME);\n+    Assert.assertTrue(\"Should create the table path correctly.\", new File(tablePath).mkdirs());\n+\n+    properties = ImmutableMap.of(TableProperties.DEFAULT_FILE_FORMAT, format.name());\n+    catalog = new HadoopCatalog(CONF, warehouse);\n+\n+    env = StreamExecutionEnvironment.getExecutionEnvironment();\n+    env.setStreamTimeCharacteristic(TimeCharacteristic.EventTime);\n+    env.enableCheckpointing(400);\n+    env.setParallelism(parallelism);\n+\n+    EnvironmentSettings settings = EnvironmentSettings\n+        .newInstance()\n+        .useBlinkPlanner()\n+        .inStreamingMode()\n+        .build();\n+    tEnv = StreamTableEnvironment.create(env, settings);\n+    tEnv.executeSql(String.format(\"create catalog iceberg_catalog with (\" +\n+        \"'type'='iceberg', 'catalog-type'='hadoop', 'warehouse'='%s')\", warehouse));\n+    tEnv.executeSql(\"use catalog iceberg_catalog\");\n+    tEnv.getConfig().getConfiguration().set(TableConfigOptions.TABLE_DYNAMIC_TABLE_OPTIONS_ENABLED, true);\n+\n+    catalog.createTable(TableIdentifier.parse(\"default.\" + TABLE_NAME),\n+        SimpleDataUtil.SCHEMA,\n+        PartitionSpec.unpartitioned(),\n+        properties);\n+  }\n+\n+  private DataStream<RowData> generateInputStream(List<Row> rows) {\n+    TypeInformation<Row> typeInformation = new RowTypeInfo(SimpleDataUtil.FLINK_SCHEMA.getFieldTypes());\n+    return env.addSource(new FiniteTestSource<>(rows), typeInformation)\n+        .map(CONVERTER::toInternal, RowDataTypeInfo.of(SimpleDataUtil.ROW_TYPE));\n+  }\n+\n+  private Pair<List<Row>, List<Record>> generateData() {\n+    String[] worlds = new String[] {\"hello\", \"world\", \"foo\", \"bar\", \"apache\", \"foundation\"};\n+    List<Row> rows = Lists.newArrayList();\n+    List<Record> expected = Lists.newArrayList();\n+    for (int i = 0; i < worlds.length; i++) {\n+      rows.add(Row.of(i + 1, worlds[i]));\n+      Record record = SimpleDataUtil.createRecord(i + 1, worlds[i]);\n+      expected.add(record);\n+      expected.add(record);\n+    }\n+    return Pair.of(rows, expected);\n+  }\n+\n+  @Test\n+  public void testStreamSQL() throws Exception {\n+    Pair<List<Row>, List<Record>> data = generateData();\n+    List<Row> rows = data.first();\n+    List<Record> expected = data.second();\n+    DataStream<RowData> stream = generateInputStream(rows);\n+\n+    // Register the rows into a temporary table named 'sourceTable'.\n+    tEnv.createTemporaryView(\"sourceTable\", tEnv.fromDataStream(stream, $(\"id\"), $(\"data\")));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "82f798700f2cb4c0b11ced1f6ec6e4d7fa5af141"}, "originalPosition": 163}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxMTUxNTc4OnYy", "diffSide": "RIGHT", "path": "flink/src/test/java/org/apache/iceberg/flink/TestFlinkTableSink.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQwMzo1Njo0MFrOHLUj1g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQwMzo1Njo0MFrOHLUj1g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTYzMzIzOA==", "bodyText": "You can just add a method like:\n  def execInsertSqlAndWaitResult(tEnv: TableEnvironment, insert: String): JobExecutionResult = {\n    tEnv.executeSql(insert).getJobClient.get\n      .getJobExecutionResult(Thread.currentThread.getContextClassLoader)\n      .get\n  }", "url": "https://github.com/apache/iceberg/pull/1348#discussion_r481633238", "createdAt": "2020-09-02T03:56:40Z", "author": {"login": "JingsongLi"}, "path": "flink/src/test/java/org/apache/iceberg/flink/TestFlinkTableSink.java", "diffHunk": "@@ -0,0 +1,215 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.flink;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.concurrent.ExecutionException;\n+import org.apache.flink.api.common.typeinfo.TypeInformation;\n+import org.apache.flink.api.java.typeutils.RowTypeInfo;\n+import org.apache.flink.streaming.api.TimeCharacteristic;\n+import org.apache.flink.streaming.api.datastream.DataStream;\n+import org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;\n+import org.apache.flink.streaming.util.FiniteTestSource;\n+import org.apache.flink.table.api.EnvironmentSettings;\n+import org.apache.flink.table.api.TableEnvironment;\n+import org.apache.flink.table.api.TableResult;\n+import org.apache.flink.table.api.bridge.java.StreamTableEnvironment;\n+import org.apache.flink.table.api.config.TableConfigOptions;\n+import org.apache.flink.table.data.RowData;\n+import org.apache.flink.table.data.util.DataFormatConverters;\n+import org.apache.flink.table.runtime.typeutils.RowDataTypeInfo;\n+import org.apache.flink.test.util.AbstractTestBase;\n+import org.apache.flink.types.Row;\n+import org.apache.hadoop.conf.Configuration;\n+import org.apache.iceberg.FileFormat;\n+import org.apache.iceberg.PartitionSpec;\n+import org.apache.iceberg.TableProperties;\n+import org.apache.iceberg.catalog.Catalog;\n+import org.apache.iceberg.catalog.TableIdentifier;\n+import org.apache.iceberg.data.Record;\n+import org.apache.iceberg.hadoop.HadoopCatalog;\n+import org.apache.iceberg.relocated.com.google.common.collect.ImmutableMap;\n+import org.apache.iceberg.relocated.com.google.common.collect.Lists;\n+import org.apache.iceberg.util.Pair;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.TemporaryFolder;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n+\n+import static org.apache.flink.table.api.Expressions.$;\n+\n+@RunWith(Parameterized.class)\n+public class TestFlinkTableSink extends AbstractTestBase {\n+  private static final Configuration CONF = new Configuration();\n+  private static final DataFormatConverters.RowConverter CONVERTER = new DataFormatConverters.RowConverter(\n+      SimpleDataUtil.FLINK_SCHEMA.getFieldDataTypes());\n+\n+  private static final String TABLE_NAME = \"flink_table\";\n+\n+  @Rule\n+  public TemporaryFolder tempFolder = new TemporaryFolder();\n+  private String tablePath;\n+  private String warehouse;\n+  private Map<String, String> properties;\n+  private Catalog catalog;\n+  private StreamExecutionEnvironment env;\n+  private StreamTableEnvironment tEnv;\n+\n+  private final FileFormat format;\n+  private final int parallelism;\n+\n+  @Parameterized.Parameters(name = \"{index}: format={0}, parallelism={2}\")\n+  public static Iterable<Object[]> data() {\n+    return Arrays.asList(\n+        new Object[] {\"avro\", 1},\n+        new Object[] {\"avro\", 2},\n+        new Object[] {\"orc\", 1},\n+        new Object[] {\"orc\", 2},\n+        new Object[] {\"parquet\", 1},\n+        new Object[] {\"parquet\", 2}\n+    );\n+  }\n+\n+  public TestFlinkTableSink(String format, int parallelism) {\n+    this.format = FileFormat.valueOf(format.toUpperCase(Locale.ENGLISH));\n+    this.parallelism = parallelism;\n+  }\n+\n+  @Before\n+  public void before() throws IOException {\n+    File folder = tempFolder.newFolder();\n+    warehouse = folder.getAbsolutePath();\n+\n+    tablePath = warehouse.concat(\"/default/\").concat(TABLE_NAME);\n+    Assert.assertTrue(\"Should create the table path correctly.\", new File(tablePath).mkdirs());\n+\n+    properties = ImmutableMap.of(TableProperties.DEFAULT_FILE_FORMAT, format.name());\n+    catalog = new HadoopCatalog(CONF, warehouse);\n+\n+    env = StreamExecutionEnvironment.getExecutionEnvironment();\n+    env.setStreamTimeCharacteristic(TimeCharacteristic.EventTime);\n+    env.enableCheckpointing(400);\n+    env.setParallelism(parallelism);\n+\n+    EnvironmentSettings settings = EnvironmentSettings\n+        .newInstance()\n+        .useBlinkPlanner()\n+        .inStreamingMode()\n+        .build();\n+    tEnv = StreamTableEnvironment.create(env, settings);\n+    tEnv.executeSql(String.format(\"create catalog iceberg_catalog with (\" +\n+        \"'type'='iceberg', 'catalog-type'='hadoop', 'warehouse'='%s')\", warehouse));\n+    tEnv.executeSql(\"use catalog iceberg_catalog\");\n+    tEnv.getConfig().getConfiguration().set(TableConfigOptions.TABLE_DYNAMIC_TABLE_OPTIONS_ENABLED, true);\n+\n+    catalog.createTable(TableIdentifier.parse(\"default.\" + TABLE_NAME),\n+        SimpleDataUtil.SCHEMA,\n+        PartitionSpec.unpartitioned(),\n+        properties);\n+  }\n+\n+  private DataStream<RowData> generateInputStream(List<Row> rows) {\n+    TypeInformation<Row> typeInformation = new RowTypeInfo(SimpleDataUtil.FLINK_SCHEMA.getFieldTypes());\n+    return env.addSource(new FiniteTestSource<>(rows), typeInformation)\n+        .map(CONVERTER::toInternal, RowDataTypeInfo.of(SimpleDataUtil.ROW_TYPE));\n+  }\n+\n+  private Pair<List<Row>, List<Record>> generateData() {\n+    String[] worlds = new String[] {\"hello\", \"world\", \"foo\", \"bar\", \"apache\", \"foundation\"};\n+    List<Row> rows = Lists.newArrayList();\n+    List<Record> expected = Lists.newArrayList();\n+    for (int i = 0; i < worlds.length; i++) {\n+      rows.add(Row.of(i + 1, worlds[i]));\n+      Record record = SimpleDataUtil.createRecord(i + 1, worlds[i]);\n+      expected.add(record);\n+      expected.add(record);\n+    }\n+    return Pair.of(rows, expected);\n+  }\n+\n+  @Test\n+  public void testStreamSQL() throws Exception {\n+    Pair<List<Row>, List<Record>> data = generateData();\n+    List<Row> rows = data.first();\n+    List<Record> expected = data.second();\n+    DataStream<RowData> stream = generateInputStream(rows);\n+\n+    // Register the rows into a temporary table named 'sourceTable'.\n+    tEnv.createTemporaryView(\"sourceTable\", tEnv.fromDataStream(stream, $(\"id\"), $(\"data\")));\n+\n+    // Redirect the records from source table to destination table.\n+    String insertSQL = String.format(\"INSERT INTO %s SELECT id,data from sourceTable\", TABLE_NAME);\n+    TableResult result = tEnv.executeSql(insertSQL);\n+    waitComplete(result);\n+\n+    // Assert the table records as expected.\n+    SimpleDataUtil.assertTableRecords(tablePath, expected);\n+  }\n+\n+  @Test\n+  public void testBatchSQL() throws Exception {\n+    EnvironmentSettings settings = EnvironmentSettings\n+        .newInstance()\n+        .inBatchMode()\n+        .useBlinkPlanner()\n+        .build();\n+    TableEnvironment batchEnv = TableEnvironment.create(settings);\n+    batchEnv.executeSql(String.format(\"create catalog batch_catalog with (\" +\n+        \"'type'='iceberg', 'catalog-type'='hadoop', 'warehouse'='%s')\", warehouse));\n+    batchEnv.executeSql(\"use catalog batch_catalog\");\n+    batchEnv.getConfig().getConfiguration().set(TableConfigOptions.TABLE_DYNAMIC_TABLE_OPTIONS_ENABLED, true);\n+\n+    // Create source table.\n+    catalog.createTable(TableIdentifier.parse(\"default.sourceTable\"),\n+        SimpleDataUtil.SCHEMA,\n+        PartitionSpec.unpartitioned(),\n+        properties);\n+\n+    TableResult result;\n+    String[] words = new String[] {\"hello\", \"world\", \"apache\"};\n+    List<Record> expected = Lists.newArrayList();\n+    for (int i = 0; i < words.length; i++) {\n+      expected.add(SimpleDataUtil.createRecord(i, words[i]));\n+      result = batchEnv.executeSql(String.format(\"INSERT INTO sourceTable SELECT %d, '%s'\", i, words[i]));\n+      waitComplete(result);\n+    }\n+\n+    // Assert the table records as expected.\n+    SimpleDataUtil.assertTableRecords(warehouse.concat(\"/default/sourceTable\"), expected);\n+  }\n+\n+  private static void waitComplete(TableResult result) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "82f798700f2cb4c0b11ced1f6ec6e4d7fa5af141"}, "originalPosition": 206}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxMTUzNDY2OnYy", "diffSide": "RIGHT", "path": "flink/src/main/java/org/apache/iceberg/flink/IcebergTableSink.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQwMzo1OTo1M1rOHLUwIg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQwNjo1MTozNFrOHLezDw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTYzNjM4Ng==", "bodyText": "We can add TODO for these interfaces:\nImplement OverwritableTableSink, so in the Flink SQL, user can write these SQLs:\nINSERT OVERWRITE t ...\nImplement PartitionableTableSink, user can write:\nINSERT OVERWRITE/INTO t PARTITION(...)", "url": "https://github.com/apache/iceberg/pull/1348#discussion_r481636386", "createdAt": "2020-09-02T03:59:53Z", "author": {"login": "JingsongLi"}, "path": "flink/src/main/java/org/apache/iceberg/flink/IcebergTableSink.java", "diffHunk": "@@ -0,0 +1,90 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.flink;\n+\n+import java.util.Arrays;\n+import org.apache.flink.api.common.typeinfo.TypeInformation;\n+import org.apache.flink.streaming.api.datastream.DataStream;\n+import org.apache.flink.streaming.api.datastream.DataStreamSink;\n+import org.apache.flink.table.api.TableSchema;\n+import org.apache.flink.table.api.ValidationException;\n+import org.apache.flink.table.data.RowData;\n+import org.apache.flink.table.sinks.AppendStreamTableSink;\n+import org.apache.flink.table.sinks.TableSink;\n+import org.apache.flink.table.types.DataType;\n+import org.apache.hadoop.conf.Configuration;\n+import org.apache.iceberg.Table;\n+import org.apache.iceberg.catalog.TableIdentifier;\n+import org.apache.iceberg.flink.sink.FlinkSink;\n+\n+public class IcebergTableSink implements AppendStreamTableSink<RowData> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "82f798700f2cb4c0b11ced1f6ec6e4d7fa5af141"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTgwMDk3NQ==", "bodyText": "Thanks for the remainding, before we add the TODO comment, I will try to implement those two interfaces in the next path.", "url": "https://github.com/apache/iceberg/pull/1348#discussion_r481800975", "createdAt": "2020-09-02T06:51:34Z", "author": {"login": "openinx"}, "path": "flink/src/main/java/org/apache/iceberg/flink/IcebergTableSink.java", "diffHunk": "@@ -0,0 +1,90 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.flink;\n+\n+import java.util.Arrays;\n+import org.apache.flink.api.common.typeinfo.TypeInformation;\n+import org.apache.flink.streaming.api.datastream.DataStream;\n+import org.apache.flink.streaming.api.datastream.DataStreamSink;\n+import org.apache.flink.table.api.TableSchema;\n+import org.apache.flink.table.api.ValidationException;\n+import org.apache.flink.table.data.RowData;\n+import org.apache.flink.table.sinks.AppendStreamTableSink;\n+import org.apache.flink.table.sinks.TableSink;\n+import org.apache.flink.table.types.DataType;\n+import org.apache.hadoop.conf.Configuration;\n+import org.apache.iceberg.Table;\n+import org.apache.iceberg.catalog.TableIdentifier;\n+import org.apache.iceberg.flink.sink.FlinkSink;\n+\n+public class IcebergTableSink implements AppendStreamTableSink<RowData> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTYzNjM4Ng=="}, "originalCommit": {"oid": "82f798700f2cb4c0b11ced1f6ec6e4d7fa5af141"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxMzczNjE5OnYy", "diffSide": "RIGHT", "path": "flink/src/test/java/org/apache/iceberg/flink/TestFlinkTableSink.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxMTozMjoxNVrOHLq5zg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxMTozMjoxNVrOHLq5zg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTk5OTMxMA==", "bodyText": "Think about this unit test again, we'd better to extend the FlinkCatalogTestBase  so that we could cover both hive and hadoop catalog cases.", "url": "https://github.com/apache/iceberg/pull/1348#discussion_r481999310", "createdAt": "2020-09-02T11:32:15Z", "author": {"login": "openinx"}, "path": "flink/src/test/java/org/apache/iceberg/flink/TestFlinkTableSink.java", "diffHunk": "@@ -0,0 +1,181 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.flink;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.concurrent.ExecutionException;\n+import org.apache.flink.streaming.api.TimeCharacteristic;\n+import org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;\n+import org.apache.flink.table.api.EnvironmentSettings;\n+import org.apache.flink.table.api.Expressions;\n+import org.apache.flink.table.api.Table;\n+import org.apache.flink.table.api.TableEnvironment;\n+import org.apache.flink.table.api.bridge.java.StreamTableEnvironment;\n+import org.apache.flink.table.data.RowData;\n+import org.apache.flink.test.util.AbstractTestBase;\n+import org.apache.hadoop.conf.Configuration;\n+import org.apache.iceberg.FileFormat;\n+import org.apache.iceberg.PartitionSpec;\n+import org.apache.iceberg.TableProperties;\n+import org.apache.iceberg.catalog.Catalog;\n+import org.apache.iceberg.catalog.TableIdentifier;\n+import org.apache.iceberg.hadoop.HadoopCatalog;\n+import org.apache.iceberg.hadoop.HadoopTables;\n+import org.apache.iceberg.relocated.com.google.common.collect.ImmutableMap;\n+import org.apache.iceberg.relocated.com.google.common.collect.Lists;\n+import org.junit.Assert;\n+import org.junit.Assume;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.TemporaryFolder;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n+\n+@RunWith(Parameterized.class)\n+public class TestFlinkTableSink extends AbstractTestBase {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ea63017d5efeb3964192c67903abb502ed53c1d2"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxNDI2OTI1OnYy", "diffSide": "RIGHT", "path": "flink/src/test/java/org/apache/iceberg/flink/TestFlinkTableSink.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxMzo0ODoxOVrOHLv_gA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQyMzoyMjowOFrOHMPOIw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjA4MjY4OA==", "bodyText": "We could use flink DDL to create table here if #1393 get merged.", "url": "https://github.com/apache/iceberg/pull/1348#discussion_r482082688", "createdAt": "2020-09-02T13:48:19Z", "author": {"login": "openinx"}, "path": "flink/src/test/java/org/apache/iceberg/flink/TestFlinkTableSink.java", "diffHunk": "@@ -0,0 +1,153 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.flink;\n+\n+import java.util.List;\n+import java.util.Map;\n+import org.apache.flink.streaming.api.TimeCharacteristic;\n+import org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;\n+import org.apache.flink.table.api.EnvironmentSettings;\n+import org.apache.flink.table.api.Expressions;\n+import org.apache.flink.table.api.Table;\n+import org.apache.flink.table.api.TableEnvironment;\n+import org.apache.flink.table.api.bridge.java.StreamTableEnvironment;\n+import org.apache.iceberg.FileFormat;\n+import org.apache.iceberg.PartitionSpec;\n+import org.apache.iceberg.TableProperties;\n+import org.apache.iceberg.catalog.TableIdentifier;\n+import org.apache.iceberg.relocated.com.google.common.collect.ImmutableMap;\n+import org.apache.iceberg.relocated.com.google.common.collect.Lists;\n+import org.junit.After;\n+import org.junit.Assume;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n+\n+@RunWith(Parameterized.class)\n+public class TestFlinkTableSink extends FlinkCatalogTestBase {\n+  private static final String TABLE_NAME = \"test_table\";\n+  private TableEnvironment tEnv;\n+  private org.apache.iceberg.Table icebergTable;\n+\n+  private final FileFormat format;\n+  private final boolean isStreamingJob;\n+\n+  @Parameterized.Parameters(name = \"{index}: format={0}, isStreaming={1}, catalogName={2}, baseNamespace={3}\")\n+  public static Iterable<Object[]> parameters() {\n+    List<Object[]> parameters = Lists.newArrayList();\n+    for (FileFormat format : new FileFormat[] {FileFormat.ORC, FileFormat.AVRO, FileFormat.PARQUET}) {\n+      for (Boolean isStreaming : new Boolean[] {true, false}) {\n+        for (Object[] catalogParams : FlinkCatalogTestBase.parameters()) {\n+          String catalogName = (String) catalogParams[0];\n+          String[] baseNamespace = (String[]) catalogParams[1];\n+          parameters.add(new Object[] {format, isStreaming, catalogName, baseNamespace});\n+        }\n+      }\n+    }\n+    return parameters;\n+  }\n+\n+  public TestFlinkTableSink(FileFormat format, Boolean isStreamingJob, String catalogName, String[] baseNamespace) {\n+    super(catalogName, baseNamespace);\n+    this.format = format;\n+    this.isStreamingJob = isStreamingJob;\n+  }\n+\n+  @Override\n+  protected TableEnvironment getTableEnv() {\n+    if (tEnv == null) {\n+      synchronized (this) {\n+        EnvironmentSettings.Builder settingsBuilder = EnvironmentSettings\n+            .newInstance()\n+            .useBlinkPlanner();\n+        if (isStreamingJob) {\n+          settingsBuilder.inStreamingMode();\n+          StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n+          env.setStreamTimeCharacteristic(TimeCharacteristic.EventTime);\n+          env.enableCheckpointing(400);\n+          tEnv = StreamTableEnvironment.create(env, settingsBuilder.build());\n+        } else {\n+          settingsBuilder.inBatchMode();\n+          tEnv = TableEnvironment.create(settingsBuilder.build());\n+        }\n+      }\n+    }\n+    return tEnv;\n+  }\n+\n+  @Before\n+  public void before() {\n+    sql(\"CREATE DATABASE %s\", flinkDatabase);\n+    sql(\"USE CATALOG %s\", catalogName);\n+    sql(\"USE %s\", DATABASE);\n+\n+    Map<String, String> properties = ImmutableMap.of(TableProperties.DEFAULT_FILE_FORMAT, format.name());\n+    this.icebergTable = validationCatalog", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d6e7c259184f19d6b611ebdfc19910335aa8bf3e"}, "originalPosition": 103}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjU5NDMzOQ==", "bodyText": "It was merged!", "url": "https://github.com/apache/iceberg/pull/1348#discussion_r482594339", "createdAt": "2020-09-02T23:22:08Z", "author": {"login": "rdblue"}, "path": "flink/src/test/java/org/apache/iceberg/flink/TestFlinkTableSink.java", "diffHunk": "@@ -0,0 +1,153 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.flink;\n+\n+import java.util.List;\n+import java.util.Map;\n+import org.apache.flink.streaming.api.TimeCharacteristic;\n+import org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;\n+import org.apache.flink.table.api.EnvironmentSettings;\n+import org.apache.flink.table.api.Expressions;\n+import org.apache.flink.table.api.Table;\n+import org.apache.flink.table.api.TableEnvironment;\n+import org.apache.flink.table.api.bridge.java.StreamTableEnvironment;\n+import org.apache.iceberg.FileFormat;\n+import org.apache.iceberg.PartitionSpec;\n+import org.apache.iceberg.TableProperties;\n+import org.apache.iceberg.catalog.TableIdentifier;\n+import org.apache.iceberg.relocated.com.google.common.collect.ImmutableMap;\n+import org.apache.iceberg.relocated.com.google.common.collect.Lists;\n+import org.junit.After;\n+import org.junit.Assume;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n+\n+@RunWith(Parameterized.class)\n+public class TestFlinkTableSink extends FlinkCatalogTestBase {\n+  private static final String TABLE_NAME = \"test_table\";\n+  private TableEnvironment tEnv;\n+  private org.apache.iceberg.Table icebergTable;\n+\n+  private final FileFormat format;\n+  private final boolean isStreamingJob;\n+\n+  @Parameterized.Parameters(name = \"{index}: format={0}, isStreaming={1}, catalogName={2}, baseNamespace={3}\")\n+  public static Iterable<Object[]> parameters() {\n+    List<Object[]> parameters = Lists.newArrayList();\n+    for (FileFormat format : new FileFormat[] {FileFormat.ORC, FileFormat.AVRO, FileFormat.PARQUET}) {\n+      for (Boolean isStreaming : new Boolean[] {true, false}) {\n+        for (Object[] catalogParams : FlinkCatalogTestBase.parameters()) {\n+          String catalogName = (String) catalogParams[0];\n+          String[] baseNamespace = (String[]) catalogParams[1];\n+          parameters.add(new Object[] {format, isStreaming, catalogName, baseNamespace});\n+        }\n+      }\n+    }\n+    return parameters;\n+  }\n+\n+  public TestFlinkTableSink(FileFormat format, Boolean isStreamingJob, String catalogName, String[] baseNamespace) {\n+    super(catalogName, baseNamespace);\n+    this.format = format;\n+    this.isStreamingJob = isStreamingJob;\n+  }\n+\n+  @Override\n+  protected TableEnvironment getTableEnv() {\n+    if (tEnv == null) {\n+      synchronized (this) {\n+        EnvironmentSettings.Builder settingsBuilder = EnvironmentSettings\n+            .newInstance()\n+            .useBlinkPlanner();\n+        if (isStreamingJob) {\n+          settingsBuilder.inStreamingMode();\n+          StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n+          env.setStreamTimeCharacteristic(TimeCharacteristic.EventTime);\n+          env.enableCheckpointing(400);\n+          tEnv = StreamTableEnvironment.create(env, settingsBuilder.build());\n+        } else {\n+          settingsBuilder.inBatchMode();\n+          tEnv = TableEnvironment.create(settingsBuilder.build());\n+        }\n+      }\n+    }\n+    return tEnv;\n+  }\n+\n+  @Before\n+  public void before() {\n+    sql(\"CREATE DATABASE %s\", flinkDatabase);\n+    sql(\"USE CATALOG %s\", catalogName);\n+    sql(\"USE %s\", DATABASE);\n+\n+    Map<String, String> properties = ImmutableMap.of(TableProperties.DEFAULT_FILE_FORMAT, format.name());\n+    this.icebergTable = validationCatalog", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjA4MjY4OA=="}, "originalCommit": {"oid": "d6e7c259184f19d6b611ebdfc19910335aa8bf3e"}, "originalPosition": 103}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxNzI5NDMyOnYy", "diffSide": "RIGHT", "path": "flink/src/main/java/org/apache/iceberg/flink/sink/FlinkSink.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQyMzoxNTozNVrOHMO8wQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QwMjoyNTo0NVrOHMTQxw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjU4OTg4OQ==", "bodyText": "Minor: it would be nice to have more context here. Maybe the table loader should define a toString that could be used in the error message here.", "url": "https://github.com/apache/iceberg/pull/1348#discussion_r482589889", "createdAt": "2020-09-02T23:15:35Z", "author": {"login": "rdblue"}, "path": "flink/src/main/java/org/apache/iceberg/flink/sink/FlinkSink.java", "diffHunk": "@@ -155,16 +158,29 @@ public Builder tableSchema(TableSchema newTableSchema) {\n       return this;\n     }\n \n+    public Builder overwrite(boolean newOverwrite) {\n+      this.overwrite = newOverwrite;\n+      return this;\n+    }\n+\n     @SuppressWarnings(\"unchecked\")\n     public DataStreamSink<RowData> build() {\n       Preconditions.checkArgument(rowDataInput != null,\n           \"Please use forRowData() to initialize the input DataStream.\");\n-      Preconditions.checkNotNull(table, \"Table shouldn't be null\");\n       Preconditions.checkNotNull(tableLoader, \"Table loader shouldn't be null\");\n       Preconditions.checkNotNull(hadoopConf, \"Hadoop configuration shouldn't be null\");\n \n+      if (table == null) {\n+        tableLoader.open(hadoopConf);\n+        try (TableLoader loader = tableLoader) {\n+          this.table = loader.loadTable();\n+        } catch (IOException e) {\n+          throw new UncheckedIOException(\"Failed to load iceberg table.\", e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2eec2057a685beab08d98a02efa46ed0eb86dfb5"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjY2MDU1MQ==", "bodyText": "Defining the toString sounds good to me.", "url": "https://github.com/apache/iceberg/pull/1348#discussion_r482660551", "createdAt": "2020-09-03T02:25:45Z", "author": {"login": "openinx"}, "path": "flink/src/main/java/org/apache/iceberg/flink/sink/FlinkSink.java", "diffHunk": "@@ -155,16 +158,29 @@ public Builder tableSchema(TableSchema newTableSchema) {\n       return this;\n     }\n \n+    public Builder overwrite(boolean newOverwrite) {\n+      this.overwrite = newOverwrite;\n+      return this;\n+    }\n+\n     @SuppressWarnings(\"unchecked\")\n     public DataStreamSink<RowData> build() {\n       Preconditions.checkArgument(rowDataInput != null,\n           \"Please use forRowData() to initialize the input DataStream.\");\n-      Preconditions.checkNotNull(table, \"Table shouldn't be null\");\n       Preconditions.checkNotNull(tableLoader, \"Table loader shouldn't be null\");\n       Preconditions.checkNotNull(hadoopConf, \"Hadoop configuration shouldn't be null\");\n \n+      if (table == null) {\n+        tableLoader.open(hadoopConf);\n+        try (TableLoader loader = tableLoader) {\n+          this.table = loader.loadTable();\n+        } catch (IOException e) {\n+          throw new UncheckedIOException(\"Failed to load iceberg table.\", e);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjU4OTg4OQ=="}, "originalCommit": {"oid": "2eec2057a685beab08d98a02efa46ed0eb86dfb5"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxNzMwNjM0OnYy", "diffSide": "RIGHT", "path": "flink/src/main/java/org/apache/iceberg/flink/sink/IcebergFilesCommitter.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQyMzoxODo0OFrOHMPFCg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QwMzo1ODo1MFrOHMU_fw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjU5MjAxMA==", "bodyText": "I just want to note that we don't encourage the use of ReplacePartitions because the data it deletes is implicit. It is better to specify what data should be overwritten, like in the new API for Spark:\ndf.writeTo(\"iceberg.db.table\").overwrite($\"date\" === \"2020-09-01\")\nIf Flink's semantics are to replace partitions for overwrite, then it should be okay. But I highly recommend being more explicit about data replacement.", "url": "https://github.com/apache/iceberg/pull/1348#discussion_r482592010", "createdAt": "2020-09-02T23:18:48Z", "author": {"login": "rdblue"}, "path": "flink/src/main/java/org/apache/iceberg/flink/sink/IcebergFilesCommitter.java", "diffHunk": "@@ -164,16 +168,51 @@ private void commitUpToCheckpoint(long checkpointId) {\n       pendingDataFiles.addAll(dataFiles);\n     }\n \n-    AppendFiles appendFiles = table.newAppend();\n-    pendingDataFiles.forEach(appendFiles::appendFile);\n-    appendFiles.set(MAX_COMMITTED_CHECKPOINT_ID, Long.toString(checkpointId));\n-    appendFiles.set(FLINK_JOB_ID, flinkJobId);\n-    appendFiles.commit();\n+    if (replacePartitions) {\n+      replacePartitions(pendingDataFiles, checkpointId);\n+    } else {\n+      append(pendingDataFiles, checkpointId);\n+    }\n \n     // Clear the committed data files from dataFilesPerCheckpoint.\n     pendingFileMap.clear();\n   }\n \n+  private void replacePartitions(List<DataFile> dataFiles, long checkpointId) {\n+    ReplacePartitions dynamicOverwrite = table.newReplacePartitions();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2eec2057a685beab08d98a02efa46ed0eb86dfb5"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjY4ODg5NQ==", "bodyText": "Yes, Flink's semantics are to replace partitions for overwrite, here is the 1, 2", "url": "https://github.com/apache/iceberg/pull/1348#discussion_r482688895", "createdAt": "2020-09-03T03:58:50Z", "author": {"login": "openinx"}, "path": "flink/src/main/java/org/apache/iceberg/flink/sink/IcebergFilesCommitter.java", "diffHunk": "@@ -164,16 +168,51 @@ private void commitUpToCheckpoint(long checkpointId) {\n       pendingDataFiles.addAll(dataFiles);\n     }\n \n-    AppendFiles appendFiles = table.newAppend();\n-    pendingDataFiles.forEach(appendFiles::appendFile);\n-    appendFiles.set(MAX_COMMITTED_CHECKPOINT_ID, Long.toString(checkpointId));\n-    appendFiles.set(FLINK_JOB_ID, flinkJobId);\n-    appendFiles.commit();\n+    if (replacePartitions) {\n+      replacePartitions(pendingDataFiles, checkpointId);\n+    } else {\n+      append(pendingDataFiles, checkpointId);\n+    }\n \n     // Clear the committed data files from dataFilesPerCheckpoint.\n     pendingFileMap.clear();\n   }\n \n+  private void replacePartitions(List<DataFile> dataFiles, long checkpointId) {\n+    ReplacePartitions dynamicOverwrite = table.newReplacePartitions();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjU5MjAxMA=="}, "originalCommit": {"oid": "2eec2057a685beab08d98a02efa46ed0eb86dfb5"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxNzMxMjIxOnYy", "diffSide": "RIGHT", "path": "flink/src/test/java/org/apache/iceberg/flink/SimpleDataUtil.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQyMzoyMDowOVrOHMPI0A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QwNDoxODowMVrOHMVSFQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjU5Mjk3Ng==", "bodyText": "Can this be done automatically when a write completes, or is this a completely separate copy of the table?", "url": "https://github.com/apache/iceberg/pull/1348#discussion_r482592976", "createdAt": "2020-09-02T23:20:09Z", "author": {"login": "rdblue"}, "path": "flink/src/test/java/org/apache/iceberg/flink/SimpleDataUtil.java", "diffHunk": "@@ -126,12 +126,16 @@ public static void assertTableRows(String tablePath, List<RowData> expected) thr\n     assertTableRecords(tablePath, expectedRecords);\n   }\n \n-  public static void assertTableRecords(String tablePath, List<Record> expected) throws IOException {\n-    Preconditions.checkArgument(expected != null, \"expected records shouldn't be null\");\n-    Table newTable = new HadoopTables().load(tablePath);\n-    try (CloseableIterable<Record> iterable = IcebergGenerics.read(newTable).build()) {\n+  public static void assertTableRecords(Table table, List<Record> expected) throws IOException {\n+    table.refresh();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2eec2057a685beab08d98a02efa46ed0eb86dfb5"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjY5MzY1Mw==", "bodyText": "Since we don't support to scan table by flink sql,   so we have to read records from iceberg table by iceberg Java API in unit tests.  In this test,  we get the icebergTable instance firstly, then the following test methods will commit the iceberg table by flink sql,  the icebergTable need a fresh to catch the latest changes.", "url": "https://github.com/apache/iceberg/pull/1348#discussion_r482693653", "createdAt": "2020-09-03T04:18:01Z", "author": {"login": "openinx"}, "path": "flink/src/test/java/org/apache/iceberg/flink/SimpleDataUtil.java", "diffHunk": "@@ -126,12 +126,16 @@ public static void assertTableRows(String tablePath, List<RowData> expected) thr\n     assertTableRecords(tablePath, expectedRecords);\n   }\n \n-  public static void assertTableRecords(String tablePath, List<Record> expected) throws IOException {\n-    Preconditions.checkArgument(expected != null, \"expected records shouldn't be null\");\n-    Table newTable = new HadoopTables().load(tablePath);\n-    try (CloseableIterable<Record> iterable = IcebergGenerics.read(newTable).build()) {\n+  public static void assertTableRecords(Table table, List<Record> expected) throws IOException {\n+    table.refresh();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjU5Mjk3Ng=="}, "originalCommit": {"oid": "2eec2057a685beab08d98a02efa46ed0eb86dfb5"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxNzMxOTM2OnYy", "diffSide": "RIGHT", "path": "flink/src/test/java/org/apache/iceberg/flink/TestFlinkTableSink.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQyMzoyMTo1MVrOHMPNkA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQyMzoyMTo1MVrOHMPNkA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjU5NDE5Mg==", "bodyText": "It would be good to also have a partitioned test.", "url": "https://github.com/apache/iceberg/pull/1348#discussion_r482594192", "createdAt": "2020-09-02T23:21:51Z", "author": {"login": "rdblue"}, "path": "flink/src/test/java/org/apache/iceberg/flink/TestFlinkTableSink.java", "diffHunk": "@@ -0,0 +1,153 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.flink;\n+\n+import java.util.List;\n+import java.util.Map;\n+import org.apache.flink.streaming.api.TimeCharacteristic;\n+import org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;\n+import org.apache.flink.table.api.EnvironmentSettings;\n+import org.apache.flink.table.api.Expressions;\n+import org.apache.flink.table.api.Table;\n+import org.apache.flink.table.api.TableEnvironment;\n+import org.apache.flink.table.api.bridge.java.StreamTableEnvironment;\n+import org.apache.iceberg.FileFormat;\n+import org.apache.iceberg.PartitionSpec;\n+import org.apache.iceberg.TableProperties;\n+import org.apache.iceberg.catalog.TableIdentifier;\n+import org.apache.iceberg.relocated.com.google.common.collect.ImmutableMap;\n+import org.apache.iceberg.relocated.com.google.common.collect.Lists;\n+import org.junit.After;\n+import org.junit.Assume;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n+\n+@RunWith(Parameterized.class)\n+public class TestFlinkTableSink extends FlinkCatalogTestBase {\n+  private static final String TABLE_NAME = \"test_table\";\n+  private TableEnvironment tEnv;\n+  private org.apache.iceberg.Table icebergTable;\n+\n+  private final FileFormat format;\n+  private final boolean isStreamingJob;\n+\n+  @Parameterized.Parameters(name = \"{index}: format={0}, isStreaming={1}, catalogName={2}, baseNamespace={3}\")\n+  public static Iterable<Object[]> parameters() {\n+    List<Object[]> parameters = Lists.newArrayList();\n+    for (FileFormat format : new FileFormat[] {FileFormat.ORC, FileFormat.AVRO, FileFormat.PARQUET}) {\n+      for (Boolean isStreaming : new Boolean[] {true, false}) {\n+        for (Object[] catalogParams : FlinkCatalogTestBase.parameters()) {\n+          String catalogName = (String) catalogParams[0];\n+          String[] baseNamespace = (String[]) catalogParams[1];\n+          parameters.add(new Object[] {format, isStreaming, catalogName, baseNamespace});\n+        }\n+      }\n+    }\n+    return parameters;\n+  }\n+\n+  public TestFlinkTableSink(FileFormat format, Boolean isStreamingJob, String catalogName, String[] baseNamespace) {\n+    super(catalogName, baseNamespace);\n+    this.format = format;\n+    this.isStreamingJob = isStreamingJob;\n+  }\n+\n+  @Override\n+  protected TableEnvironment getTableEnv() {\n+    if (tEnv == null) {\n+      synchronized (this) {\n+        EnvironmentSettings.Builder settingsBuilder = EnvironmentSettings\n+            .newInstance()\n+            .useBlinkPlanner();\n+        if (isStreamingJob) {\n+          settingsBuilder.inStreamingMode();\n+          StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n+          env.setStreamTimeCharacteristic(TimeCharacteristic.EventTime);\n+          env.enableCheckpointing(400);\n+          tEnv = StreamTableEnvironment.create(env, settingsBuilder.build());\n+        } else {\n+          settingsBuilder.inBatchMode();\n+          tEnv = TableEnvironment.create(settingsBuilder.build());\n+        }\n+      }\n+    }\n+    return tEnv;\n+  }\n+\n+  @Before\n+  public void before() {\n+    sql(\"CREATE DATABASE %s\", flinkDatabase);\n+    sql(\"USE CATALOG %s\", catalogName);\n+    sql(\"USE %s\", DATABASE);\n+\n+    Map<String, String> properties = ImmutableMap.of(TableProperties.DEFAULT_FILE_FORMAT, format.name());\n+    this.icebergTable = validationCatalog\n+        .createTable(TableIdentifier.of(icebergNamespace, TABLE_NAME),\n+            SimpleDataUtil.SCHEMA,\n+            PartitionSpec.unpartitioned(),\n+            properties);\n+  }\n+\n+  @After\n+  public void clean() {\n+    sql(\"DROP TABLE IF EXISTS %s.%s\", flinkDatabase, TABLE_NAME);\n+    sql(\"DROP DATABASE IF EXISTS %s\", flinkDatabase);\n+  }\n+\n+  @Test\n+  public void testStreamSQL() throws Exception {\n+    // Register the rows into a temporary table.\n+    Table sourceTable = getTableEnv().fromValues(SimpleDataUtil.FLINK_SCHEMA.toRowDataType(),\n+        Expressions.row(1, \"hello\"),\n+        Expressions.row(2, \"world\"),\n+        Expressions.row(3, (String) null),\n+        Expressions.row(null, \"bar\")\n+    );\n+    getTableEnv().createTemporaryView(\"sourceTable\", sourceTable);\n+\n+    // Redirect the records from source table to destination table.\n+    sql(\"INSERT INTO %s SELECT id,data from sourceTable\", TABLE_NAME);\n+\n+    // Assert the table records as expected.\n+    SimpleDataUtil.assertTableRecords(icebergTable, Lists.newArrayList(\n+        SimpleDataUtil.createRecord(1, \"hello\"),\n+        SimpleDataUtil.createRecord(2, \"world\"),\n+        SimpleDataUtil.createRecord(3, null),\n+        SimpleDataUtil.createRecord(null, \"bar\")\n+    ));\n+  }\n+\n+  @Test\n+  public void testOverwriteTable() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2eec2057a685beab08d98a02efa46ed0eb86dfb5"}, "originalPosition": 140}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3658, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}