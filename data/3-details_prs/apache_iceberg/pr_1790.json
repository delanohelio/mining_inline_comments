{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI0MTc1ODY2", "number": 1790, "title": "Core: Implement NaN counts in ORC", "bodyText": "Similar to #1641\nRenamed a few classes to be shared between Parquet and ORC\nAlso noticed an issue where the Spark implementation of TestMergingMetrics  didn't handle Date/Timestamp types as expected: they don't have matching type in StructInternalRow.get and the logic default the value to null, and this didn't trigger issue earlier since in the test case they were declared as optional fields. ORC Spark writer handles null values differently and revealed this problem.\n\nEdit: To reduce the size of this PR I separated some of the changes to #1829, and will rebase this on top of #1829 once that is merged. This PR still contains some of the changes in #1829 to ensure the code can compile and tests can run.", "createdAt": "2020-11-19T19:19:49Z", "url": "https://github.com/apache/iceberg/pull/1790", "merged": true, "mergeCommit": {"oid": "8e026f140b4e5d213083e57321d8bdc312650a6f"}, "closed": true, "closedAt": "2021-02-03T01:30:39Z", "author": {"login": "yyanyy"}, "timelineItems": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdfKT4LgFqTUzNjEzMzk0MQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABd2WCxUgFqTU4MTkxODU2OQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM2MTMzOTQx", "url": "https://github.com/apache/iceberg/pull/1790#pullrequestreview-536133941", "createdAt": "2020-11-23T00:25:06Z", "commit": {"oid": "a726847fb2603378ae88cb5fdd310601b00c83c3"}, "state": "COMMENTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QwMDoyNTowNlrOH38wiQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QwMDo0OTozMVrOH388WQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODQyOTE5Mw==", "bodyText": "I thought the reason for having ParquetFieldMetrics extending FieldMetrics is to allow ORC and parquet to diverge if needed. If we are moving them back to a common class, why not just move everything back to FieldMetrics?", "url": "https://github.com/apache/iceberg/pull/1790#discussion_r528429193", "createdAt": "2020-11-23T00:25:06Z", "author": {"login": "jackye1995"}, "path": "api/src/main/java/org/apache/iceberg/NaNOnlyFieldMetrics.java", "diffHunk": "@@ -17,51 +17,50 @@\n  * under the License.\n  */\n \n-package org.apache.iceberg.parquet;\n+package org.apache.iceberg;\n \n import java.nio.ByteBuffer;\n-import org.apache.iceberg.FieldMetrics;\n \n /**\n- * Iceberg internally tracked field level metrics, used by Parquet writer only.\n+ * Iceberg internally tracked field level metrics, used by Parquet and ORC writers only.\n  * <p>\n- * Parquet keeps track of most metrics in its footer, and only NaN counter is actually tracked by writers.\n- * This wrapper ensures that metrics not being updated by Parquet writers will not be incorrectly used, by throwing\n+ * Parquet/ORC keeps track of most metrics in file statistics, and only NaN counter is actually tracked by writers.\n+ * This wrapper ensures that metrics not being updated by those writers will not be incorrectly used, by throwing\n  * exceptions when they are accessed.\n  */\n-public class ParquetFieldMetrics extends FieldMetrics {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a726847fb2603378ae88cb5fdd310601b00c83c3"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODQzMDYzNw==", "bodyText": "Since we are having this util class, can we decompose this function into methods like metricsColumnName(FieldMetrics, Schema) and metricsMode(FieldMetrics, MetricsConfig)? They might be useful in other classes, and also make the lambda chain cleaner.", "url": "https://github.com/apache/iceberg/pull/1790#discussion_r528430637", "createdAt": "2020-11-23T00:36:29Z", "author": {"login": "jackye1995"}, "path": "core/src/main/java/org/apache/iceberg/MetricsUtil.java", "diffHunk": "@@ -0,0 +1,46 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg;\n+\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+import org.apache.iceberg.relocated.com.google.common.collect.Maps;\n+\n+public class MetricsUtil {\n+\n+  private MetricsUtil() {\n+  }\n+\n+  public static Map<Integer, Long> getNanValueCounts(\n+      Stream<FieldMetrics> fieldMetrics, MetricsConfig metricsConfig, Schema inputSchema) {\n+    if (fieldMetrics == null || inputSchema == null) {\n+      return Maps.newHashMap();\n+    }\n+\n+    return fieldMetrics\n+        .filter(metrics -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a726847fb2603378ae88cb5fdd310601b00c83c3"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODQzMDY4OA==", "bodyText": "nit: seems like iceberg prefers method names without get.", "url": "https://github.com/apache/iceberg/pull/1790#discussion_r528430688", "createdAt": "2020-11-23T00:36:58Z", "author": {"login": "jackye1995"}, "path": "core/src/main/java/org/apache/iceberg/MetricsUtil.java", "diffHunk": "@@ -0,0 +1,46 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg;\n+\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+import org.apache.iceberg.relocated.com.google.common.collect.Maps;\n+\n+public class MetricsUtil {\n+\n+  private MetricsUtil() {\n+  }\n+\n+  public static Map<Integer, Long> getNanValueCounts(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a726847fb2603378ae88cb5fdd310601b00c83c3"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODQzMDc4OQ==", "bodyText": "nit: the private method feels redundant since the body is also just one line", "url": "https://github.com/apache/iceberg/pull/1790#discussion_r528430789", "createdAt": "2020-11-23T00:37:53Z", "author": {"login": "jackye1995"}, "path": "data/src/main/java/org/apache/iceberg/data/orc/GenericOrcWriter.java", "diffHunk": "@@ -109,6 +112,10 @@ private WriteBuilder() {\n               iPrimitive, primitive));\n       }\n     }\n+\n+    private int getFieldId(TypeDescription typeDescription) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a726847fb2603378ae88cb5fdd310601b00c83c3"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODQzMTQ4OQ==", "bodyText": "nit:same comment as before, do we need this private method for the 1 line call?", "url": "https://github.com/apache/iceberg/pull/1790#discussion_r528431489", "createdAt": "2020-11-23T00:43:19Z", "author": {"login": "jackye1995"}, "path": "flink/src/main/java/org/apache/iceberg/flink/data/FlinkOrcWriter.java", "diffHunk": "@@ -129,5 +139,9 @@ private WriteBuilder() {\n               \"Invalid iceberg type %s corresponding to Flink logical type %s\", iPrimitive, flinkPrimitive));\n       }\n     }\n+\n+    private int getFieldId(TypeDescription typeDescription) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a726847fb2603378ae88cb5fdd310601b00c83c3"}, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODQzMTU1Mg==", "bodyText": "is it necesSary to pass in the type description? can we get id from the iceberg schema?", "url": "https://github.com/apache/iceberg/pull/1790#discussion_r528431552", "createdAt": "2020-11-23T00:43:59Z", "author": {"login": "jackye1995"}, "path": "flink/src/main/java/org/apache/iceberg/flink/data/FlinkOrcWriter.java", "diffHunk": "@@ -46,8 +50,8 @@ private FlinkOrcWriter(RowType rowType, Schema iSchema) {\n     }\n   }\n \n-  public static OrcRowWriter<RowData> buildWriter(RowType rowType, Schema iSchema) {\n-    return new FlinkOrcWriter(rowType, iSchema);\n+  public static OrcRowWriter<RowData> buildWriter(RowType rowType, Schema iSchema, TypeDescription schema) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a726847fb2603378ae88cb5fdd310601b00c83c3"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODQzMjIxNw==", "bodyText": "For this issue about handling date and timestamp, can it be a separated PR? This PR is already very big.", "url": "https://github.com/apache/iceberg/pull/1790#discussion_r528432217", "createdAt": "2020-11-23T00:49:31Z", "author": {"login": "jackye1995"}, "path": "spark/src/main/java/org/apache/iceberg/spark/source/StructInternalRow.java", "diffHunk": "@@ -115,12 +120,30 @@ public short getShort(int ordinal) {\n \n   @Override\n   public int getInt(int ordinal) {\n-    return struct.get(ordinal, Integer.class);\n+    Object integer = struct.get(ordinal, Object.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a726847fb2603378ae88cb5fdd310601b00c83c3"}, "originalPosition": 34}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQyMzI1NDA3", "url": "https://github.com/apache/iceberg/pull/1790#pullrequestreview-542325407", "createdAt": "2020-12-01T21:50:36Z", "commit": {"oid": "2f32f5f5dcb0aeb62921698905323e22ac8bc981"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQyMTo1MDozNlrOH9BKhg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQyMTo1MDozNlrOH9BKhg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzc0NDI2Mg==", "bodyText": "I would probably change this to NaNFieldMetrics instead because it is likely that we will be adding lower/upper bounds to this in the near future. That would avoid another rename, but it's up to you.", "url": "https://github.com/apache/iceberg/pull/1790#discussion_r533744262", "createdAt": "2020-12-01T21:50:36Z", "author": {"login": "rdblue"}, "path": "api/src/main/java/org/apache/iceberg/NaNOnlyFieldMetrics.java", "diffHunk": "@@ -17,51 +17,50 @@\n  * under the License.\n  */\n \n-package org.apache.iceberg.parquet;\n+package org.apache.iceberg;\n \n import java.nio.ByteBuffer;\n-import org.apache.iceberg.FieldMetrics;\n \n /**\n- * Iceberg internally tracked field level metrics, used by Parquet writer only.\n+ * Iceberg internally tracked field level metrics, used by Parquet and ORC writers only.\n  * <p>\n- * Parquet keeps track of most metrics in its footer, and only NaN counter is actually tracked by writers.\n- * This wrapper ensures that metrics not being updated by Parquet writers will not be incorrectly used, by throwing\n+ * Parquet/ORC keeps track of most metrics in file statistics, and only NaN counter is actually tracked by writers.\n+ * This wrapper ensures that metrics not being updated by those writers will not be incorrectly used, by throwing\n  * exceptions when they are accessed.\n  */\n-public class ParquetFieldMetrics extends FieldMetrics {\n+public class NaNOnlyFieldMetrics extends FieldMetrics {\n \n   /**\n-   * Constructor for creating a Parquet-specific FieldMetrics.\n+   * Constructor for creating a FieldMetrics with only NaN counter.\n    * @param id field id being tracked by the writer\n    * @param nanValueCount number of NaN values, will only be non-0 for double or float field.\n    */\n-  public ParquetFieldMetrics(int id,\n+  public NaNOnlyFieldMetrics(int id,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2f32f5f5dcb0aeb62921698905323e22ac8bc981"}, "originalPosition": 30}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQyMzI2NzI3", "url": "https://github.com/apache/iceberg/pull/1790#pullrequestreview-542326727", "createdAt": "2020-12-01T21:52:29Z", "commit": {"oid": "2f32f5f5dcb0aeb62921698905323e22ac8bc981"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQyMTo1MjozMFrOH9BOrw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQyMTo1MjozMFrOH9BOrw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzc0NTMyNw==", "bodyText": "Does this need to be in API or could it be in core instead?\nIf the class is never returned to users, then I would keep it in core. The classes in api are primarily those that users would interact with.", "url": "https://github.com/apache/iceberg/pull/1790#discussion_r533745327", "createdAt": "2020-12-01T21:52:30Z", "author": {"login": "rdblue"}, "path": "api/src/main/java/org/apache/iceberg/NaNOnlyFieldMetrics.java", "diffHunk": "@@ -17,51 +17,50 @@\n  * under the License.\n  */\n \n-package org.apache.iceberg.parquet;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2f32f5f5dcb0aeb62921698905323e22ac8bc981"}, "originalPosition": 4}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQyMzI4NjE3", "url": "https://github.com/apache/iceberg/pull/1790#pullrequestreview-542328617", "createdAt": "2020-12-01T21:55:30Z", "commit": {"oid": "2f32f5f5dcb0aeb62921698905323e22ac8bc981"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQyMTo1NTozMFrOH9BUxQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQyMTo1NTozMFrOH9BUxQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzc0Njg4NQ==", "bodyText": "The id is required, right? If so, then I think it could be int instead. It's an int in the constructor that gets called.\nThis could add a precondition to check that the id is non-null, but I think it would be better to do that before calling this method because the caller would probably know the field name rather than just ID. Using the field name would produce a better error message.", "url": "https://github.com/apache/iceberg/pull/1790#discussion_r533746885", "createdAt": "2020-12-01T21:55:30Z", "author": {"login": "rdblue"}, "path": "data/src/main/java/org/apache/iceberg/data/orc/GenericOrcWriters.java", "diffHunk": "@@ -77,12 +80,12 @@ private GenericOrcWriters() {\n     return LongWriter.INSTANCE;\n   }\n \n-  public static OrcValueWriter<Float> floats() {\n-    return FloatWriter.INSTANCE;\n+  public static OrcValueWriter<Float> floats(Integer id) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2f32f5f5dcb0aeb62921698905323e22ac8bc981"}, "originalPosition": 16}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQyMzM3MzEy", "url": "https://github.com/apache/iceberg/pull/1790#pullrequestreview-542337312", "createdAt": "2020-12-01T22:08:32Z", "commit": {"oid": "2f32f5f5dcb0aeb62921698905323e22ac8bc981"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQyMjowODozMlrOH9Bvig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQyMjowODozMlrOH9Bvig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzc1MzczOA==", "bodyText": "I think it would be cleaner to add the beforeField/afterField callbacks instead of the typeDesc.", "url": "https://github.com/apache/iceberg/pull/1790#discussion_r533753738", "createdAt": "2020-12-01T22:08:32Z", "author": {"login": "rdblue"}, "path": "flink/src/main/java/org/apache/iceberg/flink/data/FlinkSchemaVisitor.java", "diffHunk": "@@ -29,42 +29,43 @@\n import org.apache.iceberg.relocated.com.google.common.collect.Lists;\n import org.apache.iceberg.types.Type;\n import org.apache.iceberg.types.Types;\n+import org.apache.orc.TypeDescription;\n \n abstract class FlinkSchemaVisitor<T> {\n \n-  static <T> T visit(RowType flinkType, Schema schema, FlinkSchemaVisitor<T> visitor) {\n-    return visit(flinkType, schema.asStruct(), visitor);\n+  static <T> T visit(RowType flinkType, Schema schema, TypeDescription typeDesc, FlinkSchemaVisitor<T> visitor) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2f32f5f5dcb0aeb62921698905323e22ac8bc981"}, "originalPosition": 10}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQyMzM4NDAy", "url": "https://github.com/apache/iceberg/pull/1790#pullrequestreview-542338402", "createdAt": "2020-12-01T22:10:09Z", "commit": {"oid": "2f32f5f5dcb0aeb62921698905323e22ac8bc981"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQyMjoxMDoxMFrOH9By7w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQyMjoxMDoxMFrOH9By7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzc1NDYwNw==", "bodyText": "Why not use null when metrics are missing?", "url": "https://github.com/apache/iceberg/pull/1790#discussion_r533754607", "createdAt": "2020-12-01T22:10:10Z", "author": {"login": "rdblue"}, "path": "orc/src/main/java/org/apache/iceberg/orc/OrcMetrics.java", "diffHunk": "@@ -114,6 +120,7 @@ private static Metrics buildOrcMetrics(final long numOfRows, final TypeDescripti\n           columnSizes,\n           valueCounts,\n           nullCounts,\n+          Maps.newHashMap(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2f32f5f5dcb0aeb62921698905323e22ac8bc981"}, "originalPosition": 49}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQyMzM4ODk2", "url": "https://github.com/apache/iceberg/pull/1790#pullrequestreview-542338896", "createdAt": "2020-12-01T22:10:55Z", "commit": {"oid": "2f32f5f5dcb0aeb62921698905323e22ac8bc981"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQyMjoxMDo1NlrOH9B0dA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQyMjoxMDo1NlrOH9B0dA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzc1NDk5Ng==", "bodyText": "I don't think this paragraph needs to be here because it is a snapshot of how another component works. It could get stale really easily.", "url": "https://github.com/apache/iceberg/pull/1790#discussion_r533754996", "createdAt": "2020-12-01T22:10:56Z", "author": {"login": "rdblue"}, "path": "orc/src/main/java/org/apache/iceberg/orc/OrcRowWriter.java", "diffHunk": "@@ -35,4 +37,12 @@\n    * @throws IOException if there's any IO error while writing the data value.\n    */\n   void write(T row, VectorizedRowBatch output) throws IOException;\n+\n+  /**\n+   * Returns a stream of {@link FieldMetrics} that this OrcRowWriter keeps track of.\n+   * <p>\n+   * Since ORC keeps track of most metrics via column statistics, for now OrcRowWriter only keeps track of NaN\n+   * counters for double or float columns.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2f32f5f5dcb0aeb62921698905323e22ac8bc981"}, "originalPosition": 18}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQyMzM5NTYz", "url": "https://github.com/apache/iceberg/pull/1790#pullrequestreview-542339563", "createdAt": "2020-12-01T22:11:59Z", "commit": {"oid": "2f32f5f5dcb0aeb62921698905323e22ac8bc981"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQyMjoxMTo1OVrOH9B2mw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQyMjoxMTo1OVrOH9B2mw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzc1NTU0Nw==", "bodyText": "Can we avoid making this public with the other updates?", "url": "https://github.com/apache/iceberg/pull/1790#discussion_r533755547", "createdAt": "2020-12-01T22:11:59Z", "author": {"login": "rdblue"}, "path": "orc/src/main/java/org/apache/iceberg/orc/ORCSchemaUtil.java", "diffHunk": "@@ -383,7 +383,7 @@ private static boolean isSameType(TypeDescription orcType, Type icebergType) {\n         .map(Integer::parseInt);\n   }\n \n-  static int fieldId(TypeDescription orcType) {\n+  public static int fieldId(TypeDescription orcType) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2f32f5f5dcb0aeb62921698905323e22ac8bc981"}, "originalPosition": 5}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5a1b122ef4441174aae461779fdc801d2d27ff78", "author": {"user": {"login": "yyanyy", "name": null}}, "url": "https://github.com/apache/iceberg/commit/5a1b122ef4441174aae461779fdc801d2d27ff78", "committedDate": "2021-01-05T22:30:26Z", "message": "Core: Implement NaN counts in ORC"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e509e176beb52b01109b914575ce8ae440c974e5", "author": {"user": {"login": "yyanyy", "name": null}}, "url": "https://github.com/apache/iceberg/commit/e509e176beb52b01109b914575ce8ae440c974e5", "committedDate": "2020-12-16T06:20:16Z", "message": "fix timestamp type to use microseconds instead"}, "afterCommit": {"oid": "5a1b122ef4441174aae461779fdc801d2d27ff78", "author": {"user": {"login": "yyanyy", "name": null}}, "url": "https://github.com/apache/iceberg/commit/5a1b122ef4441174aae461779fdc801d2d27ff78", "committedDate": "2021-01-05T22:30:26Z", "message": "Core: Implement NaN counts in ORC"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTY1Nzc1MjQy", "url": "https://github.com/apache/iceberg/pull/1790#pullrequestreview-565775242", "createdAt": "2021-01-11T22:03:09Z", "commit": {"oid": "5a1b122ef4441174aae461779fdc801d2d27ff78"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMVQyMjowMzoxMFrOIRpB9w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMVQyMjoyMTowMFrOIRpiog==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTM2ODk1MQ==", "bodyText": "nit: getFieldId is not used anywhere else, why not just use ORCSchemaUtil.fieldId", "url": "https://github.com/apache/iceberg/pull/1790#discussion_r555368951", "createdAt": "2021-01-11T22:03:10Z", "author": {"login": "jackye1995"}, "path": "spark/src/main/java/org/apache/iceberg/spark/data/SparkOrcWriter.java", "diffHunk": "@@ -98,9 +106,9 @@ public SparkOrcValueWriter primitive(Type.PrimitiveType iPrimitive, TypeDescript\n         case LONG:\n           return SparkOrcValueWriters.longs();\n         case FLOAT:\n-          return SparkOrcValueWriters.floats();\n+          return SparkOrcValueWriters.floats(getFieldId(primitive));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5a1b122ef4441174aae461779fdc801d2d27ff78"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTM3MzAyOA==", "bodyText": "why some method signatures of metrics have default, but some others below do not?", "url": "https://github.com/apache/iceberg/pull/1790#discussion_r555373028", "createdAt": "2021-01-11T22:11:48Z", "author": {"login": "jackye1995"}, "path": "orc/src/main/java/org/apache/iceberg/orc/OrcRowWriter.java", "diffHunk": "@@ -35,4 +37,9 @@\n    * @throws IOException if there's any IO error while writing the data value.\n    */\n   void write(T row, VectorizedRowBatch output) throws IOException;\n+\n+  /**\n+   * Returns a stream of {@link FieldMetrics} that this OrcRowWriter keeps track of.\n+   */\n+  Stream<FieldMetrics> metrics();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5a1b122ef4441174aae461779fdc801d2d27ff78"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTM3NzMxNA==", "bodyText": "error should be logged if we catch anything. same for the try finally block above.", "url": "https://github.com/apache/iceberg/pull/1790#discussion_r555377314", "createdAt": "2021-01-11T22:21:00Z", "author": {"login": "jackye1995"}, "path": "flink/src/main/java/org/apache/iceberg/flink/data/FlinkSchemaVisitor.java", "diffHunk": "@@ -44,17 +44,39 @@\n       case MAP:\n         MapType mapType = (MapType) flinkType;\n         Types.MapType iMapType = iType.asMapType();\n-\n-        T key = visit(mapType.getKeyType(), iMapType.keyType(), visitor);\n-        T value = visit(mapType.getValueType(), iMapType.valueType(), visitor);\n+        T key;\n+        T value;\n+\n+        Types.NestedField keyField = iMapType.field(iMapType.keyId());\n+        visitor.beforeMapKey(keyField);\n+        try {\n+          key = visit(mapType.getKeyType(), iMapType.keyType(), visitor);\n+        } finally {\n+          visitor.afterMapKey(keyField);\n+        }\n+\n+        Types.NestedField valueField = iMapType.field(iMapType.valueId());\n+        visitor.beforeMapValue(valueField);\n+        try {\n+          value = visit(mapType.getValueType(), iMapType.valueType(), visitor);\n+        } finally {\n+          visitor.afterMapValue(valueField);\n+        }\n \n         return visitor.map(iMapType, key, value, mapType.getKeyType(), mapType.getValueType());\n \n       case LIST:\n         ArrayType listType = (ArrayType) flinkType;\n         Types.ListType iListType = iType.asListType();\n+        T element;\n \n-        T element = visit(listType.getElementType(), iListType.elementType(), visitor);\n+        Types.NestedField elementField = iListType.field(iListType.elementId());\n+        visitor.beforeListElement(elementField);\n+        try {\n+          element = visit(listType.getElementType(), iListType.elementType(), visitor);\n+        } finally {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5a1b122ef4441174aae461779fdc801d2d27ff78"}, "originalPosition": 38}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "376524e3dc10e7f1fbe2ead47b7116cbdbd707ba", "author": {"user": {"login": "yyanyy", "name": null}}, "url": "https://github.com/apache/iceberg/commit/376524e3dc10e7f1fbe2ead47b7116cbdbd707ba", "committedDate": "2021-01-12T01:48:30Z", "message": "address comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTY3NzcwNjQz", "url": "https://github.com/apache/iceberg/pull/1790#pullrequestreview-567770643", "createdAt": "2021-01-14T00:41:54Z", "commit": {"oid": "376524e3dc10e7f1fbe2ead47b7116cbdbd707ba"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTgxOTE4NTY5", "url": "https://github.com/apache/iceberg/pull/1790#pullrequestreview-581918569", "createdAt": "2021-02-03T01:30:05Z", "commit": {"oid": "376524e3dc10e7f1fbe2ead47b7116cbdbd707ba"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3369, "cost": 1, "resetAt": "2021-10-29T19:57:52Z"}}}