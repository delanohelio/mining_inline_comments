{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE2NDIxNzc3", "number": 1036, "title": "Refactor ManifestReader", "bodyText": "This PR merges FilteredManifest and ManifestReader, then extracts BaseManifestReader that will be used to create a reader for DeleteFile.\nOriginally, FitleredManifest was used to build the refinement pattern (like TableScan) so that the classes were immutable and a reader could be shared across threads then further configured if needed. This is useful for the TableScan API, but required unnecessary complexity for the ManifestReader API. ManifestReader is nearly always used immediately by ManifestGroup and never shared.\nThe purpose of removing FilteredManifest these now is to make it easier to build the base manifest reader that can be used with both delete manifests and data manifests.\nThe API for ManifestReader is now simpler to use because the caller can always work with ManifestReader instead of Filterable<FilteredManifest>, but this is a behavior change because the reader is no longer immutable. Configuring the reader using methods like filterRows will modify the behavior of the reader.", "createdAt": "2020-05-12T00:45:28Z", "url": "https://github.com/apache/iceberg/pull/1036", "merged": true, "mergeCommit": {"oid": "55a4e5725387ac618015cfa586e5c4e25ed8ba9a"}, "closed": true, "closedAt": "2020-05-14T18:00:44Z", "author": {"login": "rdblue"}, "timelineItems": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcgZS18AH2gAyNDE2NDIxNzc3OmJjMGI1YTE1YmJiYzNjNTdkNjAwYjM5NWM5M2UzZWYzZjYyM2ZlMWI=", "endCursor": "Y3Vyc29yOnYyOpPPAAABchP3A9gFqTQxMTk2NTEzNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "bc0b5a15bbbc3c57d600b395c93e3ef3f623fe1b", "author": {"user": {"login": "rdblue", "name": "Ryan Blue"}}, "url": "https://github.com/apache/iceberg/commit/bc0b5a15bbbc3c57d600b395c93e3ef3f623fe1b", "committedDate": "2020-05-12T00:39:52Z", "message": "Merge FilteredManifest into ManifestReader."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9262fd272c64506ed3bc121a18127ea71a917d0e", "author": {"user": {"login": "rdblue", "name": "Ryan Blue"}}, "url": "https://github.com/apache/iceberg/commit/9262fd272c64506ed3bc121a18127ea71a917d0e", "committedDate": "2020-05-12T16:53:09Z", "message": "Create BaseManifestReader from ManifestReader."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f35ecc37d66eeea57a5e22194efe6b1e329a8866", "author": {"user": {"login": "rdblue", "name": "Ryan Blue"}}, "url": "https://github.com/apache/iceberg/commit/f35ecc37d66eeea57a5e22194efe6b1e329a8866", "committedDate": "2020-05-12T23:09:26Z", "message": "Fixup BaseManifestReader."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDExOTMxMTc2", "url": "https://github.com/apache/iceberg/pull/1036#pullrequestreview-411931176", "createdAt": "2020-05-14T15:37:41Z", "commit": {"oid": "f35ecc37d66eeea57a5e22194efe6b1e329a8866"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxNTozNzo0MVrOGViNYQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxNTozNzo0MVrOGViNYQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTIzMzc2MQ==", "bodyText": "This seems to require a file class. I guess this is a placeholder?", "url": "https://github.com/apache/iceberg/pull/1036#discussion_r425233761", "createdAt": "2020-05-14T15:37:41Z", "author": {"login": "rdsr"}, "path": "core/src/main/java/org/apache/iceberg/BaseManifestReader.java", "diffHunk": "@@ -0,0 +1,294 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg;\n+\n+import com.google.common.base.Preconditions;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.Lists;\n+import com.google.common.collect.Sets;\n+import java.io.IOException;\n+import java.util.Collection;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import org.apache.iceberg.avro.Avro;\n+import org.apache.iceberg.avro.AvroIterable;\n+import org.apache.iceberg.exceptions.RuntimeIOException;\n+import org.apache.iceberg.expressions.Evaluator;\n+import org.apache.iceberg.expressions.Expression;\n+import org.apache.iceberg.expressions.Expressions;\n+import org.apache.iceberg.expressions.InclusiveMetricsEvaluator;\n+import org.apache.iceberg.expressions.Projections;\n+import org.apache.iceberg.io.CloseableGroup;\n+import org.apache.iceberg.io.CloseableIterable;\n+import org.apache.iceberg.io.InputFile;\n+import org.apache.iceberg.types.Types;\n+\n+import static org.apache.iceberg.expressions.Expressions.alwaysTrue;\n+\n+/**\n+ * Base reader for data and delete manifest files.\n+ *\n+ * @param <T> The Java class of files returned by this reader.\n+ * @param <ThisT> The Java class of this reader, returned by configuration methods.\n+ */\n+abstract class BaseManifestReader<T, ThisT> extends CloseableGroup implements CloseableIterable<T> {\n+  static final ImmutableList<String> ALL_COLUMNS = ImmutableList.of(\"*\");\n+  private static final Set<String> STATS_COLUMNS = Sets.newHashSet(\n+      \"value_counts\", \"null_value_counts\", \"lower_bounds\", \"upper_bounds\");\n+\n+  protected enum FileType {\n+    DATA_FILES(GenericDataFile.class.getName()),\n+    DELETE_FILES(\"...\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f35ecc37d66eeea57a5e22194efe6b1e329a8866"}, "originalPosition": 60}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDExOTYxMDM1", "url": "https://github.com/apache/iceberg/pull/1036#pullrequestreview-411961035", "createdAt": "2020-05-14T16:09:29Z", "commit": {"oid": "f35ecc37d66eeea57a5e22194efe6b1e329a8866"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxNjowOTozMFrOGVjoBw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxNjowOTozMFrOGVjoBw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTI1Njk2Nw==", "bodyText": "curious to know, why don't we simply return this in these situations?", "url": "https://github.com/apache/iceberg/pull/1036#discussion_r425256967", "createdAt": "2020-05-14T16:09:30Z", "author": {"login": "rdsr"}, "path": "core/src/main/java/org/apache/iceberg/BaseManifestReader.java", "diffHunk": "@@ -0,0 +1,294 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg;\n+\n+import com.google.common.base.Preconditions;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.Lists;\n+import com.google.common.collect.Sets;\n+import java.io.IOException;\n+import java.util.Collection;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import org.apache.iceberg.avro.Avro;\n+import org.apache.iceberg.avro.AvroIterable;\n+import org.apache.iceberg.exceptions.RuntimeIOException;\n+import org.apache.iceberg.expressions.Evaluator;\n+import org.apache.iceberg.expressions.Expression;\n+import org.apache.iceberg.expressions.Expressions;\n+import org.apache.iceberg.expressions.InclusiveMetricsEvaluator;\n+import org.apache.iceberg.expressions.Projections;\n+import org.apache.iceberg.io.CloseableGroup;\n+import org.apache.iceberg.io.CloseableIterable;\n+import org.apache.iceberg.io.InputFile;\n+import org.apache.iceberg.types.Types;\n+\n+import static org.apache.iceberg.expressions.Expressions.alwaysTrue;\n+\n+/**\n+ * Base reader for data and delete manifest files.\n+ *\n+ * @param <T> The Java class of files returned by this reader.\n+ * @param <ThisT> The Java class of this reader, returned by configuration methods.\n+ */\n+abstract class BaseManifestReader<T, ThisT> extends CloseableGroup implements CloseableIterable<T> {\n+  static final ImmutableList<String> ALL_COLUMNS = ImmutableList.of(\"*\");\n+  private static final Set<String> STATS_COLUMNS = Sets.newHashSet(\n+      \"value_counts\", \"null_value_counts\", \"lower_bounds\", \"upper_bounds\");\n+\n+  protected enum FileType {\n+    DATA_FILES(GenericDataFile.class.getName()),\n+    DELETE_FILES(\"...\");\n+\n+    private final String fileClass;\n+\n+    FileType(String fileClass) {\n+      this.fileClass = fileClass;\n+    }\n+\n+    private String fileClass() {\n+      return fileClass;\n+    }\n+  }\n+\n+  private final InputFile file;\n+  private final InheritableMetadata inheritableMetadata;\n+  private final FileType content;\n+  private final Map<String, String> metadata;\n+  private final PartitionSpec spec;\n+  private final Schema fileSchema;\n+\n+  // updated by configuration methods\n+  private Expression partFilter = alwaysTrue();\n+  private Expression rowFilter = alwaysTrue();\n+  private Schema fileProjection = null;\n+  private Collection<String> columns = null;\n+  private boolean caseSensitive = true;\n+\n+  // lazily initialized\n+  private Evaluator lazyEvaluator = null;\n+  private InclusiveMetricsEvaluator lazyMetricsEvaluator = null;\n+\n+  protected BaseManifestReader(InputFile file, Map<Integer, PartitionSpec> specsById,\n+                               InheritableMetadata inheritableMetadata, FileType content) {\n+    this.file = file;\n+    this.inheritableMetadata = inheritableMetadata;\n+    this.content = content;\n+\n+    try {\n+      try (AvroIterable<ManifestEntry> headerReader = Avro.read(file)\n+          .project(ManifestEntry.getSchema(Types.StructType.of()).select(\"status\"))\n+          .build()) {\n+        this.metadata = headerReader.getMetadata();\n+      }\n+    } catch (IOException e) {\n+      throw new RuntimeIOException(e);\n+    }\n+\n+    int specId = TableMetadata.INITIAL_SPEC_ID;\n+    String specProperty = metadata.get(\"partition-spec-id\");\n+    if (specProperty != null) {\n+      specId = Integer.parseInt(specProperty);\n+    }\n+\n+    if (specsById != null) {\n+      this.spec = specsById.get(specId);\n+    } else {\n+      Schema schema = SchemaParser.fromJson(metadata.get(\"schema\"));\n+      this.spec = PartitionSpecParser.fromJsonFields(schema, specId, metadata.get(\"partition-spec\"));\n+    }\n+\n+    this.fileSchema = new Schema(DataFile.getType(spec.partitionType()).fields());\n+  }\n+\n+  protected abstract ThisT self();\n+\n+  public InputFile file() {\n+    return file;\n+  }\n+\n+  public Schema schema() {\n+    return fileSchema;\n+  }\n+\n+  public PartitionSpec spec() {\n+    return spec;\n+  }\n+\n+  public ThisT select(Collection<String> newColumns) {\n+    Preconditions.checkState(fileProjection == null,\n+        \"Cannot select columns using both select(String...) and project(Schema)\");\n+    this.columns = newColumns;\n+    return self();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f35ecc37d66eeea57a5e22194efe6b1e329a8866"}, "originalPosition": 141}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDExOTY1MTM3", "url": "https://github.com/apache/iceberg/pull/1036#pullrequestreview-411965137", "createdAt": "2020-05-14T16:14:15Z", "commit": {"oid": "f35ecc37d66eeea57a5e22194efe6b1e329a8866"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4428, "cost": 1, "resetAt": "2021-10-29T19:57:52Z"}}}