{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg5MzkzNjE3", "number": 1478, "title": "Enable Hive3 builds for iceberg-mr and iceberg-hive-metastore", "bodyText": "This is a second iteration after an earlier, draft PR: #1455\nThe goal of this PR is to run the iceberg-mr tests with Hive3/Hadoop3 and enable the hive-runtime module to work with Hive3 dependencies as well in addition to Hive2.", "createdAt": "2020-09-18T15:37:34Z", "url": "https://github.com/apache/iceberg/pull/1478", "merged": true, "mergeCommit": {"oid": "ac5df85961ebb9d73e77d39a4442ee439e5e1bb6"}, "closed": true, "closedAt": "2020-10-07T16:53:49Z", "author": {"login": "marton-bod"}, "timelineItems": {"totalCount": 32, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdLBQHzgFqTQ5MjQyODYxMg==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdQMeA2AH2gAyNDg5MzkzNjE3OjFkN2RjNDk5OTgxMDA3NjVlNzNhOTdmNzM4NTZiNzk4N2RhY2U0ZmM=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkyNDI4NjEy", "url": "https://github.com/apache/iceberg/pull/1478#pullrequestreview-492428612", "createdAt": "2020-09-21T09:42:01Z", "commit": {"oid": "a771eacadfe982e258764298947b43cc8bd9a98c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQwOTo0MjowMVrOHVH4FA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQwOTo0MjowMVrOHVH4FA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTkxMTE4OA==", "bodyText": "Is this version not set in versions-hive3.props already? Or is there some reason you need to explicitly set it here?", "url": "https://github.com/apache/iceberg/pull/1478#discussion_r491911188", "createdAt": "2020-09-21T09:42:01Z", "author": {"login": "massdosage"}, "path": "build.gradle", "diffHunk": "@@ -458,14 +471,29 @@ project(':iceberg-mr') {\n     testCompile(\"org.apache.calcite:calcite-core\")\n     testCompile(\"com.esotericsoftware:kryo-shaded:4.0.2\")\n     testCompile(\"com.fasterxml.jackson.core:jackson-annotations:2.6.5\")\n-    testCompile(\"com.klarna:hiverunner:5.2.1\") {\n+    testCompile(\"com.klarna:hiverunner\") {\n       exclude group: 'javax.jms', module: 'jms'\n       exclude group: 'org.apache.hive', module: 'hive-exec'\n       exclude group: 'org.codehaus.jettison', module: 'jettison'\n       exclude group: 'org.apache.calcite.avatica'\n     }\n   }\n }\n+if (!gradle.ext.hive3Enabled) {\n+  project(':iceberg-mr-hive2') {\n+    dependencies {\n+      compile project(':iceberg-core')\n+      compileOnly(\"org.apache.hive:hive-serde\")\n+    }\n+  }\n+} else {\n+  project(':iceberg-mr-hive3') {\n+    dependencies {\n+      compile project(':iceberg-core')\n+      compileOnly(\"org.apache.hive:hive-serde:3.1.2\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a771eacadfe982e258764298947b43cc8bd9a98c"}, "originalPosition": 280}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkyOTU0MDM5", "url": "https://github.com/apache/iceberg/pull/1478#pullrequestreview-492954039", "createdAt": "2020-09-21T20:26:00Z", "commit": {"oid": "6b1df1329e0e9d36f3b998c0e9ec4effb1d14eb1"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQyMDoyNjowMFrOHVhLSg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQyMDoyNjowMFrOHVhLSg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjMyNTcwNg==", "bodyText": "Why use toEpochDay here, but daysFromDate in the other method? I think both should use daysFromDate since that's what we use elsewhere and trust the most.", "url": "https://github.com/apache/iceberg/pull/1478#discussion_r492325706", "createdAt": "2020-09-21T20:26:00Z", "author": {"login": "rdblue"}, "path": "mr-hive3/src/main/java/org/apache/iceberg/mr/hive/serde/objectinspector/IcebergDateObjectInspector.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.mr.hive.serde.objectinspector;\n+\n+import java.time.LocalDate;\n+import org.apache.hadoop.hive.common.type.Date;\n+import org.apache.hadoop.hive.serde2.io.DateWritableV2;\n+import org.apache.hadoop.hive.serde2.objectinspector.primitive.AbstractPrimitiveJavaObjectInspector;\n+import org.apache.hadoop.hive.serde2.objectinspector.primitive.DateObjectInspector;\n+import org.apache.hadoop.hive.serde2.typeinfo.TypeInfoFactory;\n+import org.apache.iceberg.util.DateTimeUtil;\n+\n+public final class IcebergDateObjectInspector extends AbstractPrimitiveJavaObjectInspector\n+                                              implements DateObjectInspector {\n+\n+  private static final IcebergDateObjectInspector INSTANCE = new IcebergDateObjectInspector();\n+\n+  public static IcebergDateObjectInspector get() {\n+    return INSTANCE;\n+  }\n+\n+  private IcebergDateObjectInspector() {\n+    super(TypeInfoFactory.dateTypeInfo);\n+  }\n+\n+  @Override\n+  public Date getPrimitiveJavaObject(Object o) {\n+    if (o == null) {\n+      return null;\n+    }\n+    LocalDate date = (LocalDate) o;\n+    return Date.ofEpochDay((int) date.toEpochDay());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6b1df1329e0e9d36f3b998c0e9ec4effb1d14eb1"}, "originalPosition": 49}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk0NzUxOTcy", "url": "https://github.com/apache/iceberg/pull/1478#pullrequestreview-494751972", "createdAt": "2020-09-23T14:56:11Z", "commit": {"oid": "0788e79f3f45566f99b34e5dbc687c39caed9716"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxNDo1NjoxMVrOHWytjg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxNTo0NjowMFrOHW1Bgw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzY2MTU4Mg==", "bodyText": "Why have we excluded these modules from the build? Seems like if the hive3 flag is used, none of these modules/artifacts will be published. Also, in the future, would we want to publish these modules compiled with hadoop3 artifacts if yes then it makes sense to build all modules, I think.\nWhat are your thoughts on the flag name, should it be hadoop3 or hive3. I feel like this flag is more general and affects Parquet, ORC, MR as you mentioned before.", "url": "https://github.com/apache/iceberg/pull/1478#discussion_r493661582", "createdAt": "2020-09-23T14:56:11Z", "author": {"login": "rdsr"}, "path": "settings.gradle", "diffHunk": "@@ -17,44 +17,64 @@\n  * under the License.\n  */\n \n+gradle.ext.hive3Enabled = false\n+if (System.getProperty(\"hive3\") != null) {\n+  if (JavaVersion.current() == JavaVersion.VERSION_1_8) {\n+    println \"*** 'hive3' flag detected - building with Hive3 / Hadoop3 ***\"\n+    gradle.ext.hive3Enabled = true\n+  } else {\n+    println \"*** 'hive3' flag detected, but with JDK version other than 1.8 - skipping Hive3 / Hadoop3 build. ***\"\n+  }\n+}\n+\n rootProject.name = 'iceberg'\n include 'api'\n include 'common'\n include 'core'\n include 'data'\n-include 'flink'\n-include 'flink-runtime'\n include 'mr'\n include 'hive-runtime'\n include 'orc'\n include 'arrow'\n include 'parquet'\n include 'bundled-guava'\n-include 'spark'\n-include 'spark3'\n-include 'spark3-runtime'\n include 'pig'\n include 'hive-metastore'\n+if (gradle.ext.hive3Enabled) {\n+  include 'mr-hive3'\n+} else {\n+  include 'mr-hive2'", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0788e79f3f45566f99b34e5dbc687c39caed9716"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzY5OTQ1OQ==", "bodyText": "nit: we can possibly make this a var which can be set  when we check hive3Enabled to either :iceberg-mr-hive2 or :iceberg-mr-hive3 . This would the  remove if/else branches, here and at line 441 also", "url": "https://github.com/apache/iceberg/pull/1478#discussion_r493699459", "createdAt": "2020-09-23T15:46:00Z", "author": {"login": "rdsr"}, "path": "build.gradle", "diffHunk": "@@ -458,14 +471,29 @@ project(':iceberg-mr') {\n     testCompile(\"org.apache.calcite:calcite-core\")\n     testCompile(\"com.esotericsoftware:kryo-shaded:4.0.2\")\n     testCompile(\"com.fasterxml.jackson.core:jackson-annotations:2.6.5\")\n-    testCompile(\"com.klarna:hiverunner:5.2.1\") {\n+    testCompile(\"com.klarna:hiverunner\") {\n       exclude group: 'javax.jms', module: 'jms'\n       exclude group: 'org.apache.hive', module: 'hive-exec'\n       exclude group: 'org.codehaus.jettison', module: 'jettison'\n       exclude group: 'org.apache.calcite.avatica'\n     }\n   }\n }\n+if (!gradle.ext.hive3Enabled) {\n+  project(':iceberg-mr-hive2') {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0788e79f3f45566f99b34e5dbc687c39caed9716"}, "originalPosition": 270}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "0788e79f3f45566f99b34e5dbc687c39caed9716", "author": {"user": {"login": "marton-bod", "name": "Marton Bod"}}, "url": "https://github.com/apache/iceberg/commit/0788e79f3f45566f99b34e5dbc687c39caed9716", "committedDate": "2020-09-22T07:32:48Z", "message": "Use util method for calculating number of days"}, "afterCommit": {"oid": "a88ae1409ce6a1dde09323364bd33086160f50d2", "author": {"user": {"login": "marton-bod", "name": "Marton Bod"}}, "url": "https://github.com/apache/iceberg/commit/a88ae1409ce6a1dde09323364bd33086160f50d2", "committedDate": "2020-09-28T16:06:27Z", "message": "Hive: Create new mr-hive3 module which builds with Hive3/Hadoop3"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk3OTg1MjE1", "url": "https://github.com/apache/iceberg/pull/1478#pullrequestreview-497985215", "createdAt": "2020-09-29T00:33:13Z", "commit": {"oid": "a88ae1409ce6a1dde09323364bd33086160f50d2"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQwMDozMzoxM1rOHZUQuQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQwMDozMzoxM1rOHZUQuQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjMwODQwOQ==", "bodyText": "Why only in Java 8?", "url": "https://github.com/apache/iceberg/pull/1478#discussion_r496308409", "createdAt": "2020-09-29T00:33:13Z", "author": {"login": "rdblue"}, "path": "build.gradle", "diffHunk": "@@ -468,6 +468,79 @@ project(':iceberg-mr') {\n   }\n }\n \n+if (jdkVersion == '8') {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a88ae1409ce6a1dde09323364bd33086160f50d2"}, "originalPosition": 4}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk3OTg3OTgy", "url": "https://github.com/apache/iceberg/pull/1478#pullrequestreview-497987982", "createdAt": "2020-09-29T00:42:44Z", "commit": {"oid": "a88ae1409ce6a1dde09323364bd33086160f50d2"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQwMDo0Mjo0NFrOHZUaXw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQwMDo0Mjo0NFrOHZUaXw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjMxMDg3OQ==", "bodyText": "Can you use DynCtors instead? I think this can be simpler:\n  private static final DynConstructors.Ctor<HiveMetaStoreClient> CLIENT_CTOR = DynConstructors.builder()\n      .impl(HiveMetaStoreClient.class, HiveConf.class)\n      .impl(HiveMetaStoreClient.class, Configuration.class)\n      .build();\n\n  protected HiveMetaStoreClient newClient()  {\n    try {\n      return CLIENT_CTOR.newInstance(hiveConf);\n    } catch (...) {\n      ...\n    }\n  }\nThis also exposes a bug with the reflection path: MetaException is no longer thrown in the try block. Since that's a checked exception, it will be wrapped in a RuntimeException. You'll need to replace that block with catch (RuntimeException e) { ... } and check the cause of the exception for a MetaException.", "url": "https://github.com/apache/iceberg/pull/1478#discussion_r496310879", "createdAt": "2020-09-29T00:42:44Z", "author": {"login": "rdblue"}, "path": "hive-metastore/src/main/java/org/apache/iceberg/hive/HiveClientPool.java", "diffHunk": "@@ -41,7 +41,16 @@ public HiveClientPool(int poolSize, Configuration conf) {\n   @Override\n   protected HiveMetaStoreClient newClient()  {\n     try {\n-      return new HiveMetaStoreClient(hiveConf);\n+      // create the metastore client based on whether we're working with Hive2 or Hive3 dependencies\n+      // we need to do this because there is a breaking API change between Hive2 and Hive3\n+      if (MetastoreUtil.hive3PresentOnClasspath()) {\n+        return (HiveMetaStoreClient) Class\n+                .forName(HiveMetaStoreClient.class.getName())\n+                .getConstructor(Configuration.class)\n+                .newInstance(hiveConf);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a88ae1409ce6a1dde09323364bd33086160f50d2"}, "originalPosition": 11}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk3OTg4MTYx", "url": "https://github.com/apache/iceberg/pull/1478#pullrequestreview-497988161", "createdAt": "2020-09-29T00:43:18Z", "commit": {"oid": "a88ae1409ce6a1dde09323364bd33086160f50d2"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQwMDo0MzoxOFrOHZUa9w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQwMDo0MzoxOFrOHZUa9w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjMxMTAzMQ==", "bodyText": "No need for this empty line. Could you remove it?", "url": "https://github.com/apache/iceberg/pull/1478#discussion_r496311031", "createdAt": "2020-09-29T00:43:18Z", "author": {"login": "rdblue"}, "path": "hive-metastore/src/main/java/org/apache/iceberg/hive/MetastoreUtil.java", "diffHunk": "@@ -0,0 +1,43 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.hive;\n+\n+public class MetastoreUtil {\n+\n+  // this class is unique to Hive3 and cannot be found in Hive2, therefore a good proxy to see if\n+  // we are working against Hive3 dependencies\n+  private static final String HIVE3_UNIQUE_CLASS = \"org.apache.hadoop.hive.serde2.io.DateWritableV2\";\n+\n+  private MetastoreUtil() {\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a88ae1409ce6a1dde09323364bd33086160f50d2"}, "originalPosition": 29}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk3OTg4MzM4", "url": "https://github.com/apache/iceberg/pull/1478#pullrequestreview-497988338", "createdAt": "2020-09-29T00:43:56Z", "commit": {"oid": "a88ae1409ce6a1dde09323364bd33086160f50d2"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQwMDo0Mzo1N1rOHZUbhg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQwMDo0Mzo1N1rOHZUbhg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjMxMTE3NA==", "bodyText": "Can this use a private static variable with the value? That way we don't need to attempt to load the class every time this is called.", "url": "https://github.com/apache/iceberg/pull/1478#discussion_r496311174", "createdAt": "2020-09-29T00:43:57Z", "author": {"login": "rdblue"}, "path": "hive-metastore/src/main/java/org/apache/iceberg/hive/MetastoreUtil.java", "diffHunk": "@@ -0,0 +1,43 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.hive;\n+\n+public class MetastoreUtil {\n+\n+  // this class is unique to Hive3 and cannot be found in Hive2, therefore a good proxy to see if\n+  // we are working against Hive3 dependencies\n+  private static final String HIVE3_UNIQUE_CLASS = \"org.apache.hadoop.hive.serde2.io.DateWritableV2\";\n+\n+  private MetastoreUtil() {\n+\n+  }\n+\n+  /**\n+   * @return true if Hive3 dependencies are found on classpath, false otherwise\n+   */\n+  public static boolean hive3PresentOnClasspath() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a88ae1409ce6a1dde09323364bd33086160f50d2"}, "originalPosition": 35}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk3OTg5MTIw", "url": "https://github.com/apache/iceberg/pull/1478#pullrequestreview-497989120", "createdAt": "2020-09-29T00:46:59Z", "commit": {"oid": "a88ae1409ce6a1dde09323364bd33086160f50d2"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQwMDo0Njo1OVrOHZUeVQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQwMDo0Njo1OVrOHZUeVQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjMxMTg5Mw==", "bodyText": "Could you also rewrite this one to use the DynMethods helpers?\n  private static final DynMethods.StaticMethod CLEAN_RAW_STORE = DynMethods.builder(\"cleanupRawStore\")\n      .hiddenImpl(HiveMetaStore.class)\n      .orNoop()\n      .buildStatic();\n\n    CLEAN_RAW_STORE.invoke();\nThat avoids needing a try/catch block since you can replace the method with a no-op if it isn't found. And hiddenImpl will make it accessible.", "url": "https://github.com/apache/iceberg/pull/1478#discussion_r496311893", "createdAt": "2020-09-29T00:46:59Z", "author": {"login": "rdblue"}, "path": "hive-metastore/src/test/java/org/apache/iceberg/hive/TestHiveMetastore.java", "diffHunk": "@@ -80,6 +81,15 @@ public void stop() {\n     if (hiveLocalDir != null) {\n       hiveLocalDir.delete();\n     }\n+\n+    // remove raw store if exists\n+    try {\n+      Method cleanupRawStore = HiveMetaStore.class.getDeclaredMethod(\"cleanupRawStore\");\n+      cleanupRawStore.setAccessible(true);\n+      cleanupRawStore.invoke(null);\n+    } catch (Exception e) {\n+      // no op\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a88ae1409ce6a1dde09323364bd33086160f50d2"}, "originalPosition": 20}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk3OTg5MzA1", "url": "https://github.com/apache/iceberg/pull/1478#pullrequestreview-497989305", "createdAt": "2020-09-29T00:47:40Z", "commit": {"oid": "a88ae1409ce6a1dde09323364bd33086160f50d2"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQwMDo0Nzo0MFrOHZUe_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQwMDo0Nzo0MFrOHZUe_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjMxMjA2Mw==", "bodyText": "This is also a good place to use the reflection helpers.", "url": "https://github.com/apache/iceberg/pull/1478#discussion_r496312063", "createdAt": "2020-09-29T00:47:40Z", "author": {"login": "rdblue"}, "path": "hive-metastore/src/test/java/org/apache/iceberg/hive/TestHiveMetastore.java", "diffHunk": "@@ -94,8 +104,24 @@ public String getDatabasePath(String dbName) {\n   private TServer newThriftServer(TServerSocket socket, HiveConf conf) throws Exception {\n     HiveConf serverConf = new HiveConf(conf);\n     serverConf.set(HiveConf.ConfVars.METASTORECONNECTURLKEY.varname, \"jdbc:derby:\" + getDerbyPath() + \";create=true\");\n-    HiveMetaStore.HMSHandler baseHandler = new HiveMetaStore.HMSHandler(\"new db based metaserver\", serverConf);\n-    IHMSHandler handler = RetryingHMSHandler.getProxy(serverConf, baseHandler, false);\n+\n+    // create the metastore handlers based on whether we're working with Hive2 or Hive3 dependencies\n+    // we need to do this because there is a breaking API change between Hive2 and Hive3\n+    HiveMetaStore.HMSHandler baseHandler;\n+    IHMSHandler handler;\n+    if (MetastoreUtil.hive3PresentOnClasspath()) {\n+      baseHandler = (HiveMetaStore.HMSHandler) Class\n+              .forName(HiveMetaStore.HMSHandler.class.getName())\n+              .getConstructor(String.class, Configuration.class)\n+              .newInstance(\"new db based metaserver\", serverConf);\n+      handler = (IHMSHandler) Class\n+              .forName(RetryingHMSHandler.class.getName())\n+              .getDeclaredMethod(\"getProxy\", Configuration.class, IHMSHandler.class, boolean.class)\n+              .invoke(null, serverConf, baseHandler, false);\n+    } else {\n+      baseHandler = new HiveMetaStore.HMSHandler(\"new db based metaserver\", serverConf);\n+      handler = RetryingHMSHandler.getProxy(serverConf, baseHandler, false);\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a88ae1409ce6a1dde09323364bd33086160f50d2"}, "originalPosition": 47}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk3OTg5NDU2", "url": "https://github.com/apache/iceberg/pull/1478#pullrequestreview-497989456", "createdAt": "2020-09-29T00:48:17Z", "commit": {"oid": "a88ae1409ce6a1dde09323364bd33086160f50d2"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQwMDo0ODoxN1rOHZUfew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQwMDo0ODoxN1rOHZUfew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjMxMjE4Nw==", "bodyText": "The continuation indent here should be 2 indents or 4 spaces from the start of the previous line.", "url": "https://github.com/apache/iceberg/pull/1478#discussion_r496312187", "createdAt": "2020-09-29T00:48:17Z", "author": {"login": "rdblue"}, "path": "mr-hive3/src/main/java/org/apache/iceberg/mr/hive/serde/objectinspector/IcebergDateObjectInspectorHive3.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.mr.hive.serde.objectinspector;\n+\n+import java.time.LocalDate;\n+import org.apache.hadoop.hive.common.type.Date;\n+import org.apache.hadoop.hive.serde2.io.DateWritableV2;\n+import org.apache.hadoop.hive.serde2.objectinspector.primitive.AbstractPrimitiveJavaObjectInspector;\n+import org.apache.hadoop.hive.serde2.objectinspector.primitive.DateObjectInspector;\n+import org.apache.hadoop.hive.serde2.typeinfo.TypeInfoFactory;\n+import org.apache.iceberg.util.DateTimeUtil;\n+\n+public final class IcebergDateObjectInspectorHive3 extends AbstractPrimitiveJavaObjectInspector\n+                                              implements DateObjectInspector {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a88ae1409ce6a1dde09323364bd33086160f50d2"}, "originalPosition": 31}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk3OTg5NjI5", "url": "https://github.com/apache/iceberg/pull/1478#pullrequestreview-497989629", "createdAt": "2020-09-29T00:48:55Z", "commit": {"oid": "a88ae1409ce6a1dde09323364bd33086160f50d2"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQwMDo0ODo1NVrOHZUgGQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQwMDo0ODo1NVrOHZUgGQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjMxMjM0NQ==", "bodyText": "This indentation might be off, since it corresponds to the new IcebergTimestampObjectInspectorHive3() { line.", "url": "https://github.com/apache/iceberg/pull/1478#discussion_r496312345", "createdAt": "2020-09-29T00:48:55Z", "author": {"login": "rdblue"}, "path": "mr-hive3/src/main/java/org/apache/iceberg/mr/hive/serde/objectinspector/IcebergTimestampObjectInspectorHive3.java", "diffHunk": "@@ -0,0 +1,90 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.mr.hive.serde.objectinspector;\n+\n+import java.time.LocalDateTime;\n+import java.time.OffsetDateTime;\n+import java.time.ZoneOffset;\n+import org.apache.hadoop.hive.common.type.Timestamp;\n+import org.apache.hadoop.hive.serde2.io.TimestampWritableV2;\n+import org.apache.hadoop.hive.serde2.objectinspector.primitive.AbstractPrimitiveJavaObjectInspector;\n+import org.apache.hadoop.hive.serde2.objectinspector.primitive.TimestampObjectInspector;\n+import org.apache.hadoop.hive.serde2.typeinfo.TypeInfoFactory;\n+\n+public abstract class IcebergTimestampObjectInspectorHive3 extends AbstractPrimitiveJavaObjectInspector\n+                                                      implements TimestampObjectInspector {\n+\n+  private static final IcebergTimestampObjectInspectorHive3 INSTANCE_WITH_ZONE =\n+      new IcebergTimestampObjectInspectorHive3() {\n+        @Override\n+        LocalDateTime toLocalDateTime(Object o) {\n+          return ((OffsetDateTime) o).toLocalDateTime();\n+        }\n+  };", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a88ae1409ce6a1dde09323364bd33086160f50d2"}, "originalPosition": 40}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk3OTkwNDYy", "url": "https://github.com/apache/iceberg/pull/1478#pullrequestreview-497990462", "createdAt": "2020-09-29T00:51:45Z", "commit": {"oid": "a88ae1409ce6a1dde09323364bd33086160f50d2"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQwMDo1MTo0NVrOHZUjEQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQwMDo1MTo0NVrOHZUjEQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjMxMzEwNQ==", "bodyText": "Because the object inspector is a singleton, this could be done just once to set a static field. Then all this would need to do is return the IcebergObjectInspector.DATE_INSPECTOR. I think that would be better than running reflect code every invocation.", "url": "https://github.com/apache/iceberg/pull/1478#discussion_r496313105", "createdAt": "2020-09-29T00:51:45Z", "author": {"login": "rdblue"}, "path": "mr/src/main/java/org/apache/iceberg/mr/hive/serde/objectinspector/IcebergObjectInspector.java", "diffHunk": "@@ -72,7 +75,20 @@ public ObjectInspector primitive(Type.PrimitiveType primitiveType) {\n         primitiveTypeInfo = TypeInfoFactory.booleanTypeInfo;\n         break;\n       case DATE:\n-        return IcebergDateObjectInspector.get();\n+        // create the correct inspector based on whether we're working with Hive2 or Hive3 dependencies\n+        // we need to do this because there is a breaking API change in DateObjectInspector between Hive2 and Hive3\n+        if (MetastoreUtil.hive3PresentOnClasspath()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a88ae1409ce6a1dde09323364bd33086160f50d2"}, "originalPosition": 21}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk3OTkxMTY2", "url": "https://github.com/apache/iceberg/pull/1478#pullrequestreview-497991166", "createdAt": "2020-09-29T00:54:11Z", "commit": {"oid": "a88ae1409ce6a1dde09323364bd33086160f50d2"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQwMDo1NDoxMlrOHZUlhw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQwMDo1NDoxMlrOHZUlhw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjMxMzczNQ==", "bodyText": "Can we rename this to :iceberg-hive3? I don't think that we need the mr part because this doesn't really contain MR classes.", "url": "https://github.com/apache/iceberg/pull/1478#discussion_r496313735", "createdAt": "2020-09-29T00:54:12Z", "author": {"login": "rdblue"}, "path": "build.gradle", "diffHunk": "@@ -468,6 +468,79 @@ project(':iceberg-mr') {\n   }\n }\n \n+if (jdkVersion == '8') {\n+  project(':iceberg-mr-hive3') {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a88ae1409ce6a1dde09323364bd33086160f50d2"}, "originalPosition": 5}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk3OTkxOTM3", "url": "https://github.com/apache/iceberg/pull/1478#pullrequestreview-497991937", "createdAt": "2020-09-29T00:56:54Z", "commit": {"oid": "a88ae1409ce6a1dde09323364bd33086160f50d2"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQwMDo1Njo1NFrOHZUoWw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQwMDo1Njo1NFrOHZUoWw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjMxNDQ1OQ==", "bodyText": "Is this block needed? I think we should be able to explicitly set dependency versions in the dependencies block, like this:\ncompileOnly(\"org.apache.hive:hive-exec:3.1.2:core\") {\n  ...\n}\n\ncompileOnly(\"org.apache.hadoop:hadoop-client:3.1.0\") {\n  ...\n}", "url": "https://github.com/apache/iceberg/pull/1478#discussion_r496314459", "createdAt": "2020-09-29T00:56:54Z", "author": {"login": "rdblue"}, "path": "build.gradle", "diffHunk": "@@ -468,6 +468,79 @@ project(':iceberg-mr') {\n   }\n }\n \n+if (jdkVersion == '8') {\n+  project(':iceberg-mr-hive3') {\n+\n+    // run the tests in iceberg-mr with Hive3 dependencies\n+    sourceSets {\n+      test {\n+        java.srcDirs = ['../mr/src/test/java', 'src/test/java']\n+        resources.srcDirs = ['../mr/src/test/resources', 'src/test/resources']\n+      }\n+    }\n+\n+    // exclude these Hive2-specific tests from iceberg-mr\n+    test {\n+      exclude '**/TestIcebergDateObjectInspector.class'\n+      exclude '**/TestIcebergTimestampObjectInspector.class'\n+    }\n+\n+    configurations.all {\n+      resolutionStrategy.eachDependency { dep ->\n+        if (dep.requested.group == 'org.apache.hive' && dep.requested.name != 'hive-storage-api') {\n+          dep.useVersion '3.1.2'\n+        } else if (dep.requested.group == 'org.apache.hadoop') {\n+          dep.useVersion '3.1.0'\n+        }\n+      }\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a88ae1409ce6a1dde09323364bd33086160f50d2"}, "originalPosition": 29}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk4NzU4MTc4", "url": "https://github.com/apache/iceberg/pull/1478#pullrequestreview-498758178", "createdAt": "2020-09-29T18:18:26Z", "commit": {"oid": "dc553a456a5611c7df26ab143490340ca6696e86"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxODoxODoyN1rOHZ7HgA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxODoxODoyN1rOHZ7HgA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njk0NTAyNA==", "bodyText": "This could be private static final if you used a private static method to set it initially, I think:\nprivate static final boolean HIVE3_PRESENT_ON_CLASSPATH = detectHive3();\n\npublic static boolean hive3PresentOnClasspath() {'\n  return HIVE3_PRESENT_ON_CLASSPATH;\n}\n\nprivate static boolean detectHive3() {\n  try {\n    Class.forName(...);\n    return true;\n  } catch (ClassNotFoundException e) {\n    return false;\n  }\n}", "url": "https://github.com/apache/iceberg/pull/1478#discussion_r496945024", "createdAt": "2020-09-29T18:18:27Z", "author": {"login": "rdblue"}, "path": "hive-metastore/src/main/java/org/apache/iceberg/hive/MetastoreUtil.java", "diffHunk": "@@ -0,0 +1,48 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.hive;\n+\n+public class MetastoreUtil {\n+\n+  // this class is unique to Hive3 and cannot be found in Hive2, therefore a good proxy to see if\n+  // we are working against Hive3 dependencies\n+  private static final String HIVE3_UNIQUE_CLASS = \"org.apache.hadoop.hive.serde2.io.DateWritableV2\";\n+\n+  private static Boolean hive3PresentOnClasspath = null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dc553a456a5611c7df26ab143490340ca6696e86"}, "originalPosition": 28}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk4NzYwNTAz", "url": "https://github.com/apache/iceberg/pull/1478#pullrequestreview-498760503", "createdAt": "2020-09-29T18:21:22Z", "commit": {"oid": "dc553a456a5611c7df26ab143490340ca6696e86"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxODoyMToyM1rOHZ7OmA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxODoyMToyM1rOHZ7OmA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njk0Njg0MA==", "bodyText": "It is safer to use the class name string instead of the class here, so that we know it won't be loaded and break at runtime. I think that the Hive 3 tests will exercise this case, but it would still be easier to be careful.", "url": "https://github.com/apache/iceberg/pull/1478#discussion_r496946840", "createdAt": "2020-09-29T18:21:23Z", "author": {"login": "rdblue"}, "path": "mr/src/main/java/org/apache/iceberg/mr/hive/serde/objectinspector/IcebergObjectInspector.java", "diffHunk": "@@ -27,12 +27,25 @@\n import org.apache.hadoop.hive.serde2.typeinfo.PrimitiveTypeInfo;\n import org.apache.hadoop.hive.serde2.typeinfo.TypeInfoFactory;\n import org.apache.iceberg.Schema;\n+import org.apache.iceberg.common.DynMethods;\n import org.apache.iceberg.types.Type;\n import org.apache.iceberg.types.TypeUtil;\n import org.apache.iceberg.types.Types;\n \n public final class IcebergObjectInspector extends TypeUtil.SchemaVisitor<ObjectInspector> {\n \n+  // get the correct inspectors depending on whether we're working with Hive2 or Hive3 dependencies\n+  // we need to do this because there is a breaking API change in Date/TimestampObjectInspector between Hive2 and Hive3\n+  private static final DynMethods.StaticMethod DATE_INSPECTOR = DynMethods.builder(\"get\")\n+      .impl(\"org.apache.iceberg.mr.hive.serde.objectinspector.IcebergDateObjectInspectorHive3\", null)\n+      .impl(IcebergDateObjectInspector.class, null)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dc553a456a5611c7df26ab143490340ca6696e86"}, "originalPosition": 15}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk4NzYxNjU5", "url": "https://github.com/apache/iceberg/pull/1478#pullrequestreview-498761659", "createdAt": "2020-09-29T18:22:56Z", "commit": {"oid": "dc553a456a5611c7df26ab143490340ca6696e86"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxODoyMjo1NlrOHZ7Saw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxODoyMjo1NlrOHZ7Saw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njk0NzgxOQ==", "bodyText": "Is null needed? I think before, I've always just omitted the classes.", "url": "https://github.com/apache/iceberg/pull/1478#discussion_r496947819", "createdAt": "2020-09-29T18:22:56Z", "author": {"login": "rdblue"}, "path": "mr/src/main/java/org/apache/iceberg/mr/hive/serde/objectinspector/IcebergObjectInspector.java", "diffHunk": "@@ -27,12 +27,25 @@\n import org.apache.hadoop.hive.serde2.typeinfo.PrimitiveTypeInfo;\n import org.apache.hadoop.hive.serde2.typeinfo.TypeInfoFactory;\n import org.apache.iceberg.Schema;\n+import org.apache.iceberg.common.DynMethods;\n import org.apache.iceberg.types.Type;\n import org.apache.iceberg.types.TypeUtil;\n import org.apache.iceberg.types.Types;\n \n public final class IcebergObjectInspector extends TypeUtil.SchemaVisitor<ObjectInspector> {\n \n+  // get the correct inspectors depending on whether we're working with Hive2 or Hive3 dependencies\n+  // we need to do this because there is a breaking API change in Date/TimestampObjectInspector between Hive2 and Hive3\n+  private static final DynMethods.StaticMethod DATE_INSPECTOR = DynMethods.builder(\"get\")\n+      .impl(\"org.apache.iceberg.mr.hive.serde.objectinspector.IcebergDateObjectInspectorHive3\", null)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dc553a456a5611c7df26ab143490340ca6696e86"}, "originalPosition": 14}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk4NzYyMzc3", "url": "https://github.com/apache/iceberg/pull/1478#pullrequestreview-498762377", "createdAt": "2020-09-29T18:23:53Z", "commit": {"oid": "dc553a456a5611c7df26ab143490340ca6696e86"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxODoyMzo1M1rOHZ7UrQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxODoyMzo1M1rOHZ7UrQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njk0ODM5Nw==", "bodyText": "I'd prefer using the same assertion, but with a different class name. But this is really minor if tests are passing.", "url": "https://github.com/apache/iceberg/pull/1478#discussion_r496948397", "createdAt": "2020-09-29T18:23:53Z", "author": {"login": "rdblue"}, "path": "mr/src/test/java/org/apache/iceberg/mr/hive/serde/objectinspector/TestIcebergObjectInspector.java", "diffHunk": "@@ -90,7 +91,13 @@ public void testIcebergObjectInspector() {\n     Assert.assertEquals(3, dateField.getFieldID());\n     Assert.assertEquals(\"date_field\", dateField.getFieldName());\n     Assert.assertEquals(\"date comment\", dateField.getFieldComment());\n-    Assert.assertEquals(IcebergDateObjectInspector.get(), dateField.getFieldObjectInspector());\n+    if (MetastoreUtil.hive3PresentOnClasspath()) {\n+      Assert.assertEquals(\n+              \"org.apache.iceberg.mr.hive.serde.objectinspector.IcebergDateObjectInspectorHive3\",\n+              dateField.getFieldObjectInspector().getClass().getName());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dc553a456a5611c7df26ab143490340ca6696e86"}, "originalPosition": 16}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk4NzYzNDM2", "url": "https://github.com/apache/iceberg/pull/1478#pullrequestreview-498763436", "createdAt": "2020-09-29T18:25:17Z", "commit": {"oid": "dc553a456a5611c7df26ab143490340ca6696e86"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxODoyNToxN1rOHZ7X7w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxODoyNToxN1rOHZ7X7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njk0OTIzMQ==", "bodyText": "Minor: we could invoke this just once and store it in a private static final field. Same with timestamps. We could store both in fields and choose one using adjustToUtc. Not a big deal to always call the reflection method here, though.", "url": "https://github.com/apache/iceberg/pull/1478#discussion_r496949231", "createdAt": "2020-09-29T18:25:17Z", "author": {"login": "rdblue"}, "path": "mr/src/main/java/org/apache/iceberg/mr/hive/serde/objectinspector/IcebergObjectInspector.java", "diffHunk": "@@ -72,7 +85,7 @@ public ObjectInspector primitive(Type.PrimitiveType primitiveType) {\n         primitiveTypeInfo = TypeInfoFactory.booleanTypeInfo;\n         break;\n       case DATE:\n-        return IcebergDateObjectInspector.get();\n+        return DATE_INSPECTOR.invoke();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dc553a456a5611c7df26ab143490340ca6696e86"}, "originalPosition": 31}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk4NzY2ODI3", "url": "https://github.com/apache/iceberg/pull/1478#pullrequestreview-498766827", "createdAt": "2020-09-29T18:29:53Z", "commit": {"oid": "dc553a456a5611c7df26ab143490340ca6696e86"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxODoyOTo1NFrOHZ7iXw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxODoyOTo1NFrOHZ7iXw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njk1MTkwMw==", "bodyText": "We should use instants to initialize all date/time values so that we are not hit by time zone bugs.", "url": "https://github.com/apache/iceberg/pull/1478#discussion_r496951903", "createdAt": "2020-09-29T18:29:54Z", "author": {"login": "rdblue"}, "path": "hive3/src/test/java/org/apache/iceberg/mr/hive/serde/objectinspector/TestIcebergTimestampObjectInspectorHive3.java", "diffHunk": "@@ -0,0 +1,99 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.mr.hive.serde.objectinspector;\n+\n+import java.time.LocalDateTime;\n+import java.time.OffsetDateTime;\n+import java.time.ZoneOffset;\n+import org.apache.hadoop.hive.common.type.Timestamp;\n+import org.apache.hadoop.hive.serde2.io.TimestampWritableV2;\n+import org.apache.hadoop.hive.serde2.objectinspector.ObjectInspector;\n+import org.apache.hadoop.hive.serde2.objectinspector.PrimitiveObjectInspector;\n+import org.apache.hadoop.hive.serde2.objectinspector.primitive.TimestampObjectInspector;\n+import org.apache.hadoop.hive.serde2.typeinfo.TypeInfoFactory;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+public class TestIcebergTimestampObjectInspectorHive3 {\n+\n+  @Test\n+  public void testIcebergTimestampObjectInspector() {\n+    TimestampObjectInspector oi = IcebergTimestampObjectInspectorHive3.get(false);\n+\n+    Assert.assertEquals(ObjectInspector.Category.PRIMITIVE, oi.getCategory());\n+    Assert.assertEquals(PrimitiveObjectInspector.PrimitiveCategory.TIMESTAMP, oi.getPrimitiveCategory());\n+\n+    Assert.assertEquals(TypeInfoFactory.timestampTypeInfo, oi.getTypeInfo());\n+    Assert.assertEquals(TypeInfoFactory.timestampTypeInfo.getTypeName(), oi.getTypeName());\n+\n+    Assert.assertEquals(Timestamp.class, oi.getJavaPrimitiveClass());\n+    Assert.assertEquals(TimestampWritableV2.class, oi.getPrimitiveWritableClass());\n+\n+    Assert.assertNull(oi.copyObject(null));\n+    Assert.assertNull(oi.getPrimitiveJavaObject(null));\n+    Assert.assertNull(oi.getPrimitiveWritableObject(null));\n+\n+    LocalDateTime local = LocalDateTime.of(2020, 1, 1, 0, 0, 1, 500);\n+    Timestamp ts = Timestamp.valueOf(\"2020-01-01 00:00:01.00000050\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dc553a456a5611c7df26ab143490340ca6696e86"}, "originalPosition": 54}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk4NzY3NDMx", "url": "https://github.com/apache/iceberg/pull/1478#pullrequestreview-498767431", "createdAt": "2020-09-29T18:30:46Z", "commit": {"oid": "dc553a456a5611c7df26ab143490340ca6696e86"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxODozMDo0NlrOHZ7kRA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxODozMDo0NlrOHZ7kRA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njk1MjM4OA==", "bodyText": "Is it possible to initialize these using days from epoch instead of parsing? I don't trust date/time objects that parse and translate.", "url": "https://github.com/apache/iceberg/pull/1478#discussion_r496952388", "createdAt": "2020-09-29T18:30:46Z", "author": {"login": "rdblue"}, "path": "hive3/src/test/java/org/apache/iceberg/mr/hive/serde/objectinspector/TestIcebergDateObjectInspectorHive3.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.mr.hive.serde.objectinspector;\n+\n+import java.time.LocalDate;\n+import org.apache.hadoop.hive.common.type.Date;\n+import org.apache.hadoop.hive.serde2.io.DateWritableV2;\n+import org.apache.hadoop.hive.serde2.objectinspector.ObjectInspector;\n+import org.apache.hadoop.hive.serde2.objectinspector.PrimitiveObjectInspector;\n+import org.apache.hadoop.hive.serde2.objectinspector.primitive.DateObjectInspector;\n+import org.apache.hadoop.hive.serde2.typeinfo.TypeInfoFactory;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+public class TestIcebergDateObjectInspectorHive3 {\n+\n+  @Test\n+  public void testIcebergDateObjectInspector() {\n+    DateObjectInspector oi = IcebergDateObjectInspectorHive3.get();\n+\n+    Assert.assertEquals(ObjectInspector.Category.PRIMITIVE, oi.getCategory());\n+    Assert.assertEquals(PrimitiveObjectInspector.PrimitiveCategory.DATE, oi.getPrimitiveCategory());\n+\n+    Assert.assertEquals(TypeInfoFactory.dateTypeInfo, oi.getTypeInfo());\n+    Assert.assertEquals(TypeInfoFactory.dateTypeInfo.getTypeName(), oi.getTypeName());\n+\n+    Assert.assertEquals(Date.class, oi.getJavaPrimitiveClass());\n+    Assert.assertEquals(DateWritableV2.class, oi.getPrimitiveWritableClass());\n+\n+    Assert.assertNull(oi.copyObject(null));\n+    Assert.assertNull(oi.getPrimitiveJavaObject(null));\n+    Assert.assertNull(oi.getPrimitiveWritableObject(null));\n+\n+    LocalDate local = LocalDate.of(2020, 1, 1);\n+    Date date = Date.valueOf(\"2020-01-01\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dc553a456a5611c7df26ab143490340ca6696e86"}, "originalPosition": 52}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fc8314c88a585c9b466a93acdedae7928d459106", "author": {"user": {"login": "marton-bod", "name": "Marton Bod"}}, "url": "https://github.com/apache/iceberg/commit/fc8314c88a585c9b466a93acdedae7928d459106", "committedDate": "2020-10-06T19:38:36Z", "message": "Hive: Create new mr-hive3 module which builds with Hive3/Hadoop3"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6b35a33b7a31999fdf9627fed8ce1b59d9e9126a", "author": {"user": {"login": "marton-bod", "name": "Marton Bod"}}, "url": "https://github.com/apache/iceberg/commit/6b35a33b7a31999fdf9627fed8ce1b59d9e9126a", "committedDate": "2020-10-06T19:38:36Z", "message": "Hive: Rename mr-hive3 to hive3; Use reflection helpers from iceberg-common to bridge Hive2/3 API differences; indentation fixes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4fc53d0c56ebe032681eba5846311d5ea82b2afc", "author": {"user": {"login": "marton-bod", "name": "Marton Bod"}}, "url": "https://github.com/apache/iceberg/commit/4fc53d0c56ebe032681eba5846311d5ea82b2afc", "committedDate": "2020-10-06T19:38:36Z", "message": "update comment"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6a4ea190c1543834aa419a4d5cfc2513676fff9f", "author": {"user": {"login": "marton-bod", "name": "Marton Bod"}}, "url": "https://github.com/apache/iceberg/commit/6a4ea190c1543834aa419a4d5cfc2513676fff9f", "committedDate": "2020-10-06T19:38:36Z", "message": "Use Instant/epoch days to create date/timestamp objects in tests; Reflection optimizations"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "880009a88cfa9d2d631e6dee8715e1519fb468af", "author": {"user": {"login": "marton-bod", "name": "Marton Bod"}}, "url": "https://github.com/apache/iceberg/commit/880009a88cfa9d2d631e6dee8715e1519fb468af", "committedDate": "2020-10-06T19:38:36Z", "message": "Extract epochDays and epochMillis"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "196e917a66f60f8b3e127b8af13604e6a3bb9fa0", "author": {"user": {"login": "marton-bod", "name": "Marton Bod"}}, "url": "https://github.com/apache/iceberg/commit/196e917a66f60f8b3e127b8af13604e6a3bb9fa0", "committedDate": "2020-10-06T19:38:36Z", "message": "Avoid concurrency issues between iceberg-mr and iceberg-hive3 tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7c055ad2e86d49a07fd5d62dfefd5cdaef8b4c46", "author": {"user": {"login": "marton-bod", "name": "Marton Bod"}}, "url": "https://github.com/apache/iceberg/commit/7c055ad2e86d49a07fd5d62dfefd5cdaef8b4c46", "committedDate": "2020-10-06T19:38:36Z", "message": "Shutdown HMSHandler directly instead of using reflective call"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "62da1a6fbd527849df0e85db43bc30c5dcc52a76", "author": {"user": {"login": "marton-bod", "name": "Marton Bod"}}, "url": "https://github.com/apache/iceberg/commit/62da1a6fbd527849df0e85db43bc30c5dcc52a76", "committedDate": "2020-10-06T19:38:36Z", "message": "Hive: Instantiate metastore once per test class for StorageHandler tests; Use flag to prevent persistence manager closure problem"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e572c23d70797eb524545b3b75bb595cec18b84c", "author": {"user": {"login": "marton-bod", "name": "Marton Bod"}}, "url": "https://github.com/apache/iceberg/commit/e572c23d70797eb524545b3b75bb595cec18b84c", "committedDate": "2020-10-01T15:28:42Z", "message": "Shutdown HMSHandler directly instead of using reflective call"}, "afterCommit": {"oid": "62da1a6fbd527849df0e85db43bc30c5dcc52a76", "author": {"user": {"login": "marton-bod", "name": "Marton Bod"}}, "url": "https://github.com/apache/iceberg/commit/62da1a6fbd527849df0e85db43bc30c5dcc52a76", "committedDate": "2020-10-06T19:38:36Z", "message": "Hive: Instantiate metastore once per test class for StorageHandler tests; Use flag to prevent persistence manager closure problem"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1d7dc49998100765e73a97f73856b7987dace4fc", "author": {"user": {"login": "marton-bod", "name": "Marton Bod"}}, "url": "https://github.com/apache/iceberg/commit/1d7dc49998100765e73a97f73856b7987dace4fc", "committedDate": "2020-10-07T12:51:40Z", "message": "Add metastore uris as system prop; Remove multiple metastores workaround"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3805, "cost": 1, "resetAt": "2021-10-29T19:57:52Z"}}}