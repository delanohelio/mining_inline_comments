{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTAwODYyMTIw", "number": 1573, "title": "Add AWS subproject and initial S3FileIO implementation", "bodyText": "This is a basic initial implementation of an S3 based FileIO implementation that includes the reading and writing objects using putObject and getObject.", "createdAt": "2020-10-09T23:17:15Z", "url": "https://github.com/apache/iceberg/pull/1573", "merged": true, "mergeCommit": {"oid": "2b9234f1e234d7c42c0887616bbf943aa73169bc"}, "closed": true, "closedAt": "2020-11-07T22:40:17Z", "author": {"login": "danielcweeks"}, "timelineItems": {"totalCount": 43, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdQ-ggzgH2gAyNTAwODYyMTIwOjNmMTcyMTZkM2QzZjA4MTQ4ZGQ3NGY2Zjg2ZWZkNjU5YjRlYzhlOTc=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdaBcpuAH2gAyNTAwODYyMTIwOjQyYmVkMWVhYzZjNDgyZTc4ZTA1YzZhMDkyODJmODNjNzFlODJiMTM=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "3f17216d3d3f08148dd74f6f86efd659b4ec8e97", "author": {"user": {"login": "danielcweeks", "name": "Daniel Weeks"}}, "url": "https://github.com/apache/iceberg/commit/3f17216d3d3f08148dd74f6f86efd659b4ec8e97", "committedDate": "2020-10-09T23:09:39Z", "message": "Add AWS subproject and initial S3FileIO implementation"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA2MDQwNjY5", "url": "https://github.com/apache/iceberg/pull/1573#pullrequestreview-506040669", "createdAt": "2020-10-09T23:52:04Z", "commit": {"oid": "3f17216d3d3f08148dd74f6f86efd659b4ec8e97"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQyMzo1MjowNFrOHfbU_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQyMzo1MjowNFrOHfbU_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjcxNTY0NQ==", "bodyText": "I believe this is another of our shaded dependencies, so we'll need to swap it for the relocated version", "url": "https://github.com/apache/iceberg/pull/1573#discussion_r502715645", "createdAt": "2020-10-09T23:52:04Z", "author": {"login": "RussellSpitzer"}, "path": "aws/src/main/java/org/apache/iceberg/aws/s3/S3InputStream.java", "diffHunk": "@@ -0,0 +1,146 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.aws.s3;\n+\n+import com.amazonaws.services.s3.AmazonS3;\n+import com.amazonaws.services.s3.AmazonS3URI;\n+import com.amazonaws.services.s3.model.GetObjectRequest;\n+import com.amazonaws.services.s3.model.S3ObjectInputStream;\n+import java.io.IOException;\n+import java.util.Arrays;\n+import org.apache.commons.compress.utils.IOUtils;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3f17216d3d3f08148dd74f6f86efd659b4ec8e97"}, "originalPosition": 28}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA2MDQ1NjU1", "url": "https://github.com/apache/iceberg/pull/1573#pullrequestreview-506045655", "createdAt": "2020-10-10T00:24:50Z", "commit": {"oid": "3f17216d3d3f08148dd74f6f86efd659b4ec8e97"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMFQwMDoyNDo1MFrOHfbovw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMFQwMDoyNDo1MFrOHfbovw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjcyMDcwMw==", "bodyText": "Should this be a lazy client?\n  private transient AmazonS3 client;\n  public AmazonS3 client() {\n    if (client == null) {\n      this.client = s3.get();\n    }\n    return client;\n  }", "url": "https://github.com/apache/iceberg/pull/1573#discussion_r502720703", "createdAt": "2020-10-10T00:24:50Z", "author": {"login": "rdblue"}, "path": "aws/src/main/java/org/apache/iceberg/aws/s3/S3FileIO.java", "diffHunk": "@@ -0,0 +1,156 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.aws.s3;\n+\n+import com.amazonaws.services.s3.AmazonS3;\n+import com.amazonaws.services.s3.AmazonS3URI;\n+import com.amazonaws.services.s3.model.AmazonS3Exception;\n+import com.amazonaws.services.s3.model.ObjectMetadata;\n+import java.io.IOException;\n+import java.io.Serializable;\n+import java.util.Objects;\n+import org.apache.http.HttpStatus;\n+import org.apache.iceberg.io.FileIO;\n+import org.apache.iceberg.io.InputFile;\n+import org.apache.iceberg.io.OutputFile;\n+import org.apache.iceberg.io.PositionOutputStream;\n+import org.apache.iceberg.io.SeekableInputStream;\n+import org.apache.iceberg.util.SerializableSupplier;\n+\n+/**\n+ * FileIO implementation backed by S3.  Locations used must follow the conventions\n+ * for AmazonS3URIs (e.g. s3://bucket/path/..).\n+ */\n+public class S3FileIO implements FileIO, Serializable {\n+  private final SerializableSupplier<AmazonS3> s3;\n+\n+  public S3FileIO(SerializableSupplier<AmazonS3> s3) {\n+    this.s3 = s3;\n+  }\n+\n+  @Override\n+  public InputFile newInputFile(String path) {\n+    return new S3InputFile(new AmazonS3URI(path));\n+  }\n+\n+  @Override\n+  public OutputFile newOutputFile(String path) {\n+    return new S3OutputFile(new AmazonS3URI(path));\n+  }\n+\n+  @Override\n+  public void deleteFile(String path) {\n+    AmazonS3URI location = new AmazonS3URI(path);\n+    s3.get().deleteObject(location.getBucket(), location.getKey());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3f17216d3d3f08148dd74f6f86efd659b4ec8e97"}, "originalPosition": 61}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA2MDQ2MjI0", "url": "https://github.com/apache/iceberg/pull/1573#pullrequestreview-506046224", "createdAt": "2020-10-10T00:29:27Z", "commit": {"oid": "3f17216d3d3f08148dd74f6f86efd659b4ec8e97"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMFQwMDoyOToyN1rOHfbrLg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMFQwMDoyOToyN1rOHfbrLg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjcyMTMyNg==", "bodyText": "We should probably implement this.", "url": "https://github.com/apache/iceberg/pull/1573#discussion_r502721326", "createdAt": "2020-10-10T00:29:27Z", "author": {"login": "rdblue"}, "path": "aws/src/main/java/org/apache/iceberg/aws/s3/S3FileIO.java", "diffHunk": "@@ -0,0 +1,156 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.aws.s3;\n+\n+import com.amazonaws.services.s3.AmazonS3;\n+import com.amazonaws.services.s3.AmazonS3URI;\n+import com.amazonaws.services.s3.model.AmazonS3Exception;\n+import com.amazonaws.services.s3.model.ObjectMetadata;\n+import java.io.IOException;\n+import java.io.Serializable;\n+import java.util.Objects;\n+import org.apache.http.HttpStatus;\n+import org.apache.iceberg.io.FileIO;\n+import org.apache.iceberg.io.InputFile;\n+import org.apache.iceberg.io.OutputFile;\n+import org.apache.iceberg.io.PositionOutputStream;\n+import org.apache.iceberg.io.SeekableInputStream;\n+import org.apache.iceberg.util.SerializableSupplier;\n+\n+/**\n+ * FileIO implementation backed by S3.  Locations used must follow the conventions\n+ * for AmazonS3URIs (e.g. s3://bucket/path/..).\n+ */\n+public class S3FileIO implements FileIO, Serializable {\n+  private final SerializableSupplier<AmazonS3> s3;\n+\n+  public S3FileIO(SerializableSupplier<AmazonS3> s3) {\n+    this.s3 = s3;\n+  }\n+\n+  @Override\n+  public InputFile newInputFile(String path) {\n+    return new S3InputFile(new AmazonS3URI(path));\n+  }\n+\n+  @Override\n+  public OutputFile newOutputFile(String path) {\n+    return new S3OutputFile(new AmazonS3URI(path));\n+  }\n+\n+  @Override\n+  public void deleteFile(String path) {\n+    AmazonS3URI location = new AmazonS3URI(path);\n+    s3.get().deleteObject(location.getBucket(), location.getKey());\n+  }\n+\n+  public class S3InputFile implements InputFile {\n+    private final AmazonS3URI location;\n+    private ObjectMetadata metadata;\n+\n+    public S3InputFile(AmazonS3URI location) {\n+      this.location = location;\n+    }\n+\n+    /**\n+     * Note: this may be stale if file was deleted since metadata is cached\n+     * for size/existence checks.\n+     *\n+     * @return content length\n+     */\n+    @Override\n+    public long getLength() {\n+      return Objects.requireNonNull(getObjectMetadata()).getContentLength();\n+    }\n+\n+    @Override\n+    public SeekableInputStream newStream() {\n+      return new S3InputStream(s3.get(), location);\n+    }\n+\n+    @Override\n+    public String location() {\n+      return location.toString();\n+    }\n+\n+    /**\n+     * Note: this may be stale if file was deleted since metadata is cached\n+     * for size/existence checks.\n+     *\n+     * @return flag\n+     */\n+    @Override\n+    public boolean exists() {\n+      return getObjectMetadata() != null;\n+    }\n+\n+    @Override\n+    public String toString() {\n+      return location.toString();\n+    }\n+\n+    private ObjectMetadata getObjectMetadata() {\n+      if (metadata == null) {\n+        try {\n+          metadata = s3.get().getObjectMetadata(location.getBucket(), location.getKey());\n+        } catch (AmazonS3Exception e) {\n+          if (e.getStatusCode() != HttpStatus.SC_NOT_FOUND) {\n+            throw e; // return null if 404 Not Found, otherwise rethrow\n+          }\n+        }\n+      }\n+\n+      return metadata;\n+    }\n+  }\n+\n+  public class S3OutputFile implements OutputFile {\n+    private final AmazonS3URI location;\n+\n+    public S3OutputFile(AmazonS3URI location) {\n+      this.location = location;\n+    }\n+\n+    @Override\n+    public PositionOutputStream create() {\n+      throw new UnsupportedOperationException();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3f17216d3d3f08148dd74f6f86efd659b4ec8e97"}, "originalPosition": 133}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA2MDQ2NDk5", "url": "https://github.com/apache/iceberg/pull/1573#pullrequestreview-506046499", "createdAt": "2020-10-10T00:31:49Z", "commit": {"oid": "3f17216d3d3f08148dd74f6f86efd659b4ec8e97"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMFQwMDozMTo0OVrOHfbsZw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMFQwMDozMTo0OVrOHfbsZw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjcyMTYzOQ==", "bodyText": "Why not implement it anyway? All we need to do is delegate to stream, right?", "url": "https://github.com/apache/iceberg/pull/1573#discussion_r502721639", "createdAt": "2020-10-10T00:31:49Z", "author": {"login": "rdblue"}, "path": "aws/src/main/java/org/apache/iceberg/aws/s3/S3InputStream.java", "diffHunk": "@@ -0,0 +1,146 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.aws.s3;\n+\n+import com.amazonaws.services.s3.AmazonS3;\n+import com.amazonaws.services.s3.AmazonS3URI;\n+import com.amazonaws.services.s3.model.GetObjectRequest;\n+import com.amazonaws.services.s3.model.S3ObjectInputStream;\n+import java.io.IOException;\n+import java.util.Arrays;\n+import org.apache.commons.compress.utils.IOUtils;\n+import org.apache.iceberg.io.SeekableInputStream;\n+import org.apache.iceberg.relocated.com.google.common.base.Joiner;\n+import org.apache.iceberg.relocated.com.google.common.base.Preconditions;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class S3InputStream extends SeekableInputStream {\n+  private static final Logger LOG = LoggerFactory.getLogger(S3InputStream.class);\n+\n+  private final StackTraceElement[] createStack;\n+  private final AmazonS3 s3;\n+  private final AmazonS3URI location;\n+\n+  private S3ObjectInputStream stream;\n+  private long pos = 0;\n+  private long next = 0;\n+  private boolean closed = false;\n+\n+  private int skipSize = 1024 * 1024;\n+\n+  public S3InputStream(AmazonS3 s3, AmazonS3URI location) {\n+    this.s3 = s3;\n+    this.location = location;\n+\n+    createStack = Thread.currentThread().getStackTrace();\n+  }\n+\n+  @Override\n+  public long getPos() {\n+    return pos;\n+  }\n+\n+  @Override\n+  public void seek(long newPos) {\n+    Preconditions.checkState(!closed, \"already closed\");\n+    Preconditions.checkArgument(newPos >= 0, \"position is negative: %s\", newPos);\n+\n+    // this allows a seek beyond the end of the stream but the next read will fail\n+    next = newPos;\n+  }\n+\n+  @Override\n+  public int read() {\n+    // This stream is wrapped with BufferedInputStream, so this method should never be called\n+    throw new UnsupportedOperationException();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3f17216d3d3f08148dd74f6f86efd659b4ec8e97"}, "originalPosition": 73}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA2MDQ3MDE4", "url": "https://github.com/apache/iceberg/pull/1573#pullrequestreview-506047018", "createdAt": "2020-10-10T00:36:31Z", "commit": {"oid": "3f17216d3d3f08148dd74f6f86efd659b4ec8e97"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMFQwMDozNjozMlrOHfburQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMFQwMDozNjozMlrOHfburQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjcyMjIyMQ==", "bodyText": "I'd prefer not to create a direct dependency on commons-compress just for IOUtils.skip. It should be easy enough to write a skipFully method.", "url": "https://github.com/apache/iceberg/pull/1573#discussion_r502722221", "createdAt": "2020-10-10T00:36:32Z", "author": {"login": "rdblue"}, "path": "aws/src/main/java/org/apache/iceberg/aws/s3/S3InputStream.java", "diffHunk": "@@ -0,0 +1,146 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.aws.s3;\n+\n+import com.amazonaws.services.s3.AmazonS3;\n+import com.amazonaws.services.s3.AmazonS3URI;\n+import com.amazonaws.services.s3.model.GetObjectRequest;\n+import com.amazonaws.services.s3.model.S3ObjectInputStream;\n+import java.io.IOException;\n+import java.util.Arrays;\n+import org.apache.commons.compress.utils.IOUtils;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3f17216d3d3f08148dd74f6f86efd659b4ec8e97"}, "originalPosition": 28}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA2MDY5Njcy", "url": "https://github.com/apache/iceberg/pull/1573#pullrequestreview-506069672", "createdAt": "2020-10-10T05:57:43Z", "commit": {"oid": "200a8d7eec2947c115556cf2e1332de52d754bff"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMFQwNTo1Nzo0NFrOHfdgfQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMFQwNTo1Nzo0NFrOHfdgfQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjc1MTM1Nw==", "bodyText": "Should we version separately for S3 and future things that might be needed, like KMS etc?", "url": "https://github.com/apache/iceberg/pull/1573#discussion_r502751357", "createdAt": "2020-10-10T05:57:44Z", "author": {"login": "kbendick"}, "path": "versions.props", "diffHunk": "@@ -17,8 +17,10 @@ com.github.ben-manes.caffeine:caffeine = 2.7.0\n org.apache.arrow:arrow-vector = 1.0.0\n org.apache.arrow:arrow-memory-netty = 1.0.0\n com.github.stephenc.findbugs:findbugs-annotations = 1.3.9-1\n+com.amazonaws:aws-java-sdk-* = 1.11.749", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "200a8d7eec2947c115556cf2e1332de52d754bff"}, "originalPosition": 4}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA2MDcwOTYx", "url": "https://github.com/apache/iceberg/pull/1573#pullrequestreview-506070961", "createdAt": "2020-10-10T06:20:21Z", "commit": {"oid": "200a8d7eec2947c115556cf2e1332de52d754bff"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMFQwNjoyMDoyMVrOHfdnSg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMFQwNjoyMDoyMVrOHfdnSg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjc1MzA5OA==", "bodyText": "This feels somewhat unnecessary just for the warning. In the linked examples from @jacques-n, they use thread name instead via Thread.currentThread().getName();. Would that be a cleaner approach? What value does having the stack trace from when the S3InputStream was instantiated bring?", "url": "https://github.com/apache/iceberg/pull/1573#discussion_r502753098", "createdAt": "2020-10-10T06:20:21Z", "author": {"login": "kbendick"}, "path": "aws/src/main/java/org/apache/iceberg/aws/s3/S3InputStream.java", "diffHunk": "@@ -0,0 +1,150 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.aws.s3;\n+\n+import com.amazonaws.services.s3.AmazonS3;\n+import com.amazonaws.services.s3.AmazonS3URI;\n+import com.amazonaws.services.s3.model.GetObjectRequest;\n+import com.amazonaws.services.s3.model.S3ObjectInputStream;\n+import java.io.IOException;\n+import java.util.Arrays;\n+import org.apache.iceberg.io.SeekableInputStream;\n+import org.apache.iceberg.relocated.com.google.common.base.Joiner;\n+import org.apache.iceberg.relocated.com.google.common.base.Preconditions;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class S3InputStream extends SeekableInputStream {\n+  private static final Logger LOG = LoggerFactory.getLogger(S3InputStream.class);\n+\n+  private final StackTraceElement[] createStack;\n+  private final AmazonS3 s3;\n+  private final AmazonS3URI location;\n+\n+  private S3ObjectInputStream stream;\n+  private long pos = 0;\n+  private long next = 0;\n+  private boolean closed = false;\n+\n+  private int skipSize = 1024 * 1024;\n+\n+  public S3InputStream(AmazonS3 s3, AmazonS3URI location) {\n+    this.s3 = s3;\n+    this.location = location;\n+\n+    createStack = Thread.currentThread().getStackTrace();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "200a8d7eec2947c115556cf2e1332de52d754bff"}, "originalPosition": 52}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA2MDcyMTcx", "url": "https://github.com/apache/iceberg/pull/1573#pullrequestreview-506072171", "createdAt": "2020-10-10T06:40:32Z", "commit": {"oid": "200a8d7eec2947c115556cf2e1332de52d754bff"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMFQwNjo0MDozM1rOHfdt3Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMFQwNjo0MDozM1rOHfdt3Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjc1NDc4MQ==", "bodyText": "Are you sure that this is needed?\nI was able to open this PR, remove this line, run ./gradlew clean build, and everything passed just fine for me.\nAll of your imports are from com.amazonaws.services.s3.* so I really don't think that core is needed, but gradle isn't my primary build tool at work so maybe I'm missing something.", "url": "https://github.com/apache/iceberg/pull/1573#discussion_r502754781", "createdAt": "2020-10-10T06:40:33Z", "author": {"login": "kbendick"}, "path": "build.gradle", "diffHunk": "@@ -237,6 +237,21 @@ project(':iceberg-data') {\n   }\n }\n \n+project(':iceberg-aws') {\n+  dependencies {\n+    compile project(':iceberg-api')\n+    compile project(':iceberg-core')\n+\n+    compileOnly \"com.amazonaws:aws-java-sdk-core\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "200a8d7eec2947c115556cf2e1332de52d754bff"}, "originalPosition": 9}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA2MDc3Mzk1", "url": "https://github.com/apache/iceberg/pull/1573#pullrequestreview-506077395", "createdAt": "2020-10-10T08:01:37Z", "commit": {"oid": "200a8d7eec2947c115556cf2e1332de52d754bff"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMFQwODowMTozN1rOHfeJCg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMFQwODowNzoxMVrOHfeLFg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjc2MTczOA==", "bodyText": "Do you intend to call the helper function you've written closeStream here or otherwise close or abort the S3ObjectInputStream? Seems like the input stream and any on going http requests won't get appropriately aborted / closed otherwise.", "url": "https://github.com/apache/iceberg/pull/1573#discussion_r502761738", "createdAt": "2020-10-10T08:01:37Z", "author": {"login": "kbendick"}, "path": "aws/src/main/java/org/apache/iceberg/aws/s3/S3InputStream.java", "diffHunk": "@@ -0,0 +1,150 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.aws.s3;\n+\n+import com.amazonaws.services.s3.AmazonS3;\n+import com.amazonaws.services.s3.AmazonS3URI;\n+import com.amazonaws.services.s3.model.GetObjectRequest;\n+import com.amazonaws.services.s3.model.S3ObjectInputStream;\n+import java.io.IOException;\n+import java.util.Arrays;\n+import org.apache.iceberg.io.SeekableInputStream;\n+import org.apache.iceberg.relocated.com.google.common.base.Joiner;\n+import org.apache.iceberg.relocated.com.google.common.base.Preconditions;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class S3InputStream extends SeekableInputStream {\n+  private static final Logger LOG = LoggerFactory.getLogger(S3InputStream.class);\n+\n+  private final StackTraceElement[] createStack;\n+  private final AmazonS3 s3;\n+  private final AmazonS3URI location;\n+\n+  private S3ObjectInputStream stream;\n+  private long pos = 0;\n+  private long next = 0;\n+  private boolean closed = false;\n+\n+  private int skipSize = 1024 * 1024;\n+\n+  public S3InputStream(AmazonS3 s3, AmazonS3URI location) {\n+    this.s3 = s3;\n+    this.location = location;\n+\n+    createStack = Thread.currentThread().getStackTrace();\n+  }\n+\n+  @Override\n+  public long getPos() {\n+    return pos;\n+  }\n+\n+  @Override\n+  public void seek(long newPos) {\n+    Preconditions.checkState(!closed, \"already closed\");\n+    Preconditions.checkArgument(newPos >= 0, \"position is negative: %s\", newPos);\n+\n+    // this allows a seek beyond the end of the stream but the next read will fail\n+    next = newPos;\n+  }\n+\n+  @Override\n+  public int read() {\n+    // This stream is wrapped with BufferedInputStream, so this method should never be called\n+    throw new UnsupportedOperationException();\n+  }\n+\n+  @Override\n+  public int read(byte[] b, int off, int len) throws IOException {\n+    Preconditions.checkState(!closed, \"already closed\");\n+    positionStream();\n+\n+    int bytesRead = stream.read(b, off, len);\n+    pos += bytesRead;\n+    next += bytesRead;\n+\n+    return bytesRead;\n+  }\n+\n+  @Override\n+  public void close() throws IOException {\n+    super.close();\n+    closed = true;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "200a8d7eec2947c115556cf2e1332de52d754bff"}, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjc2MjI2Mg==", "bodyText": "Should a null check be added here to ensure that the previous stream was closed / aborted? I see that you're using this function immediately after calling closeStream, which has the null check. However, I worry that in a future refactor the null check between closeStream and openStream will be lost and then resources will be potentially leaked. But this is not a blocker since it does currently have the check between them.", "url": "https://github.com/apache/iceberg/pull/1573#discussion_r502762262", "createdAt": "2020-10-10T08:07:11Z", "author": {"login": "kbendick"}, "path": "aws/src/main/java/org/apache/iceberg/aws/s3/S3InputStream.java", "diffHunk": "@@ -0,0 +1,150 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.aws.s3;\n+\n+import com.amazonaws.services.s3.AmazonS3;\n+import com.amazonaws.services.s3.AmazonS3URI;\n+import com.amazonaws.services.s3.model.GetObjectRequest;\n+import com.amazonaws.services.s3.model.S3ObjectInputStream;\n+import java.io.IOException;\n+import java.util.Arrays;\n+import org.apache.iceberg.io.SeekableInputStream;\n+import org.apache.iceberg.relocated.com.google.common.base.Joiner;\n+import org.apache.iceberg.relocated.com.google.common.base.Preconditions;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class S3InputStream extends SeekableInputStream {\n+  private static final Logger LOG = LoggerFactory.getLogger(S3InputStream.class);\n+\n+  private final StackTraceElement[] createStack;\n+  private final AmazonS3 s3;\n+  private final AmazonS3URI location;\n+\n+  private S3ObjectInputStream stream;\n+  private long pos = 0;\n+  private long next = 0;\n+  private boolean closed = false;\n+\n+  private int skipSize = 1024 * 1024;\n+\n+  public S3InputStream(AmazonS3 s3, AmazonS3URI location) {\n+    this.s3 = s3;\n+    this.location = location;\n+\n+    createStack = Thread.currentThread().getStackTrace();\n+  }\n+\n+  @Override\n+  public long getPos() {\n+    return pos;\n+  }\n+\n+  @Override\n+  public void seek(long newPos) {\n+    Preconditions.checkState(!closed, \"already closed\");\n+    Preconditions.checkArgument(newPos >= 0, \"position is negative: %s\", newPos);\n+\n+    // this allows a seek beyond the end of the stream but the next read will fail\n+    next = newPos;\n+  }\n+\n+  @Override\n+  public int read() {\n+    // This stream is wrapped with BufferedInputStream, so this method should never be called\n+    throw new UnsupportedOperationException();\n+  }\n+\n+  @Override\n+  public int read(byte[] b, int off, int len) throws IOException {\n+    Preconditions.checkState(!closed, \"already closed\");\n+    positionStream();\n+\n+    int bytesRead = stream.read(b, off, len);\n+    pos += bytesRead;\n+    next += bytesRead;\n+\n+    return bytesRead;\n+  }\n+\n+  @Override\n+  public void close() throws IOException {\n+    super.close();\n+    closed = true;\n+  }\n+\n+  private void positionStream() throws IOException {\n+    if ((stream != null) && (next == pos)) {\n+      // already at specified position\n+      return;\n+    }\n+\n+    if ((stream != null) && (next > pos)) {\n+      // seeking forwards\n+      long skip = next - pos;\n+      if (skip <= Math.max(stream.available(), skipSize)) {\n+        // already buffered or seek is small enough\n+        LOG.debug(\"Read-through seek for {} to offset {}\", location, next);\n+        try {\n+          if (stream.skip(skip) == skip) {\n+            pos = next;\n+            return;\n+          }\n+        } catch (IOException ignored) {\n+          // will retry by re-opening the stream\n+        }\n+      }\n+    }\n+\n+    // close the stream and open at desired position\n+    LOG.debug(\"Seek with new stream for {} to offset {}\", location, next);\n+    pos = next;\n+    closeStream();\n+    openStream();\n+  }\n+\n+  private void openStream() {\n+    GetObjectRequest request = new GetObjectRequest(location.getBucket(), location.getKey())\n+        .withRange(pos, Long.MAX_VALUE);\n+    stream = s3.getObject(request).getObjectContent();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "200a8d7eec2947c115556cf2e1332de52d754bff"}, "originalPosition": 126}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE2MDQ0OTE2", "url": "https://github.com/apache/iceberg/pull/1573#pullrequestreview-516044916", "createdAt": "2020-10-23T22:34:40Z", "commit": {"oid": "3c948aa465c01dbe8159117b95725e3c36a7d76b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QyMjozNDo0MFrOHngKzw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QyMjozNDo0MFrOHngKzw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTE4MzU2Nw==", "bodyText": "Minor: it's hard to follow the builders within builders within builders. Might be easier to separate them out into local variables.", "url": "https://github.com/apache/iceberg/pull/1573#discussion_r511183567", "createdAt": "2020-10-23T22:34:40Z", "author": {"login": "rdblue"}, "path": "aws/src/main/java/org/apache/iceberg/aws/s3/S3FileIO.java", "diffHunk": "@@ -0,0 +1,174 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.aws.s3;\n+\n+import com.amazonaws.services.s3.AmazonS3URI;\n+import java.io.IOException;\n+import java.io.Serializable;\n+import java.util.Objects;\n+import org.apache.http.HttpStatus;\n+import org.apache.iceberg.io.FileIO;\n+import org.apache.iceberg.io.InputFile;\n+import org.apache.iceberg.io.OutputFile;\n+import org.apache.iceberg.io.PositionOutputStream;\n+import org.apache.iceberg.io.SeekableInputStream;\n+import org.apache.iceberg.util.SerializableSupplier;\n+import software.amazon.awssdk.services.s3.S3Client;\n+import software.amazon.awssdk.services.s3.model.Delete;\n+import software.amazon.awssdk.services.s3.model.DeleteObjectsRequest;\n+import software.amazon.awssdk.services.s3.model.HeadObjectRequest;\n+import software.amazon.awssdk.services.s3.model.HeadObjectResponse;\n+import software.amazon.awssdk.services.s3.model.ObjectIdentifier;\n+import software.amazon.awssdk.services.s3.model.S3Exception;\n+\n+/**\n+ * FileIO implementation backed by S3.  Locations used must follow the conventions for URIs (e.g. s3://bucket/path/..).\n+ */\n+public class S3FileIO implements FileIO, Serializable {\n+  private final SerializableSupplier<S3Client> s3;\n+  private transient S3Client client;\n+\n+  public S3FileIO(SerializableSupplier<S3Client> s3) {\n+    this.s3 = s3;\n+  }\n+\n+  @Override\n+  public InputFile newInputFile(String path) {\n+    return new S3InputFile(new AmazonS3URI(path));\n+  }\n+\n+  @Override\n+  public OutputFile newOutputFile(String path) {\n+    return new S3OutputFile(new AmazonS3URI(path));\n+  }\n+\n+  @Override\n+  public void deleteFile(String path) {\n+    AmazonS3URI location = new AmazonS3URI(path);\n+    client().deleteObjects(DeleteObjectsRequest.builder()\n+        .bucket(location.getBucket())\n+        .delete(Delete.builder()\n+            .objects(ObjectIdentifier.builder()\n+                .key(location.getKey())\n+                .build())\n+            .build())\n+        .build());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3c948aa465c01dbe8159117b95725e3c36a7d76b"}, "originalPosition": 72}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE2MDQ2MTk1", "url": "https://github.com/apache/iceberg/pull/1573#pullrequestreview-516046195", "createdAt": "2020-10-23T22:39:02Z", "commit": {"oid": "3c948aa465c01dbe8159117b95725e3c36a7d76b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QyMjozOTowMlrOHngPWw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QyMjozOTowMlrOHngPWw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTE4NDczMQ==", "bodyText": "This is going to throw a NullPointerException if the object doesn't exist because getObjectMetadata returns null when it receives a 404. I think it would be better for getObjectMetadata to throw NotFoundException with a friendly error message that includes the location.", "url": "https://github.com/apache/iceberg/pull/1573#discussion_r511184731", "createdAt": "2020-10-23T22:39:02Z", "author": {"login": "rdblue"}, "path": "aws/src/main/java/org/apache/iceberg/aws/s3/S3FileIO.java", "diffHunk": "@@ -0,0 +1,174 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.aws.s3;\n+\n+import com.amazonaws.services.s3.AmazonS3URI;\n+import java.io.IOException;\n+import java.io.Serializable;\n+import java.util.Objects;\n+import org.apache.http.HttpStatus;\n+import org.apache.iceberg.io.FileIO;\n+import org.apache.iceberg.io.InputFile;\n+import org.apache.iceberg.io.OutputFile;\n+import org.apache.iceberg.io.PositionOutputStream;\n+import org.apache.iceberg.io.SeekableInputStream;\n+import org.apache.iceberg.util.SerializableSupplier;\n+import software.amazon.awssdk.services.s3.S3Client;\n+import software.amazon.awssdk.services.s3.model.Delete;\n+import software.amazon.awssdk.services.s3.model.DeleteObjectsRequest;\n+import software.amazon.awssdk.services.s3.model.HeadObjectRequest;\n+import software.amazon.awssdk.services.s3.model.HeadObjectResponse;\n+import software.amazon.awssdk.services.s3.model.ObjectIdentifier;\n+import software.amazon.awssdk.services.s3.model.S3Exception;\n+\n+/**\n+ * FileIO implementation backed by S3.  Locations used must follow the conventions for URIs (e.g. s3://bucket/path/..).\n+ */\n+public class S3FileIO implements FileIO, Serializable {\n+  private final SerializableSupplier<S3Client> s3;\n+  private transient S3Client client;\n+\n+  public S3FileIO(SerializableSupplier<S3Client> s3) {\n+    this.s3 = s3;\n+  }\n+\n+  @Override\n+  public InputFile newInputFile(String path) {\n+    return new S3InputFile(new AmazonS3URI(path));\n+  }\n+\n+  @Override\n+  public OutputFile newOutputFile(String path) {\n+    return new S3OutputFile(new AmazonS3URI(path));\n+  }\n+\n+  @Override\n+  public void deleteFile(String path) {\n+    AmazonS3URI location = new AmazonS3URI(path);\n+    client().deleteObjects(DeleteObjectsRequest.builder()\n+        .bucket(location.getBucket())\n+        .delete(Delete.builder()\n+            .objects(ObjectIdentifier.builder()\n+                .key(location.getKey())\n+                .build())\n+            .build())\n+        .build());\n+  }\n+\n+  private S3Client client() {\n+    if (client == null) {\n+      client = s3.get();\n+    }\n+    return client;\n+  }\n+\n+  public class S3InputFile implements InputFile {\n+    private final AmazonS3URI location;\n+    private HeadObjectResponse metadata;\n+\n+    public S3InputFile(AmazonS3URI location) {\n+      this.location = location;\n+    }\n+\n+    /**\n+     * Note: this may be stale if file was deleted since metadata is cached for size/existence checks.\n+     *\n+     * @return content length\n+     */\n+    @Override\n+    public long getLength() {\n+      return Objects.requireNonNull(getObjectMetadata()).contentLength();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3c948aa465c01dbe8159117b95725e3c36a7d76b"}, "originalPosition": 97}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE2MDQ3NzUw", "url": "https://github.com/apache/iceberg/pull/1573#pullrequestreview-516047750", "createdAt": "2020-10-23T22:44:31Z", "commit": {"oid": "3c948aa465c01dbe8159117b95725e3c36a7d76b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QyMjo0NDozMlrOHngU3w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QyMjo0NDozMlrOHngU3w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTE4NjE0Mw==", "bodyText": "Later, we will probably want to pass in these configuration options.", "url": "https://github.com/apache/iceberg/pull/1573#discussion_r511186143", "createdAt": "2020-10-23T22:44:32Z", "author": {"login": "rdblue"}, "path": "aws/src/main/java/org/apache/iceberg/aws/s3/S3InputStream.java", "diffHunk": "@@ -0,0 +1,154 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.aws.s3;\n+\n+import com.amazonaws.services.s3.AmazonS3URI;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.util.Arrays;\n+import org.apache.iceberg.io.SeekableInputStream;\n+import org.apache.iceberg.relocated.com.google.common.base.Joiner;\n+import org.apache.iceberg.relocated.com.google.common.base.Preconditions;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import software.amazon.awssdk.core.sync.ResponseTransformer;\n+import software.amazon.awssdk.services.s3.S3Client;\n+import software.amazon.awssdk.services.s3.model.GetObjectRequest;\n+\n+public class S3InputStream extends SeekableInputStream {\n+  private static final Logger LOG = LoggerFactory.getLogger(S3InputStream.class);\n+\n+  private final StackTraceElement[] createStack;\n+  private final S3Client s3;\n+  private final AmazonS3URI location;\n+\n+  private InputStream stream;\n+  private long pos = 0;\n+  private long next = 0;\n+  private boolean closed = false;\n+\n+  private int skipSize = 1024 * 1024;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3c948aa465c01dbe8159117b95725e3c36a7d76b"}, "originalPosition": 47}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE2MDQ4NjU5", "url": "https://github.com/apache/iceberg/pull/1573#pullrequestreview-516048659", "createdAt": "2020-10-23T22:47:50Z", "commit": {"oid": "3c948aa465c01dbe8159117b95725e3c36a7d76b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QyMjo0Nzo1MFrOHngYCQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QyMjo0Nzo1MFrOHngYCQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTE4Njk1Mw==", "bodyText": "This also needs to update pos and next.", "url": "https://github.com/apache/iceberg/pull/1573#discussion_r511186953", "createdAt": "2020-10-23T22:47:50Z", "author": {"login": "rdblue"}, "path": "aws/src/main/java/org/apache/iceberg/aws/s3/S3InputStream.java", "diffHunk": "@@ -0,0 +1,154 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.aws.s3;\n+\n+import com.amazonaws.services.s3.AmazonS3URI;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.util.Arrays;\n+import org.apache.iceberg.io.SeekableInputStream;\n+import org.apache.iceberg.relocated.com.google.common.base.Joiner;\n+import org.apache.iceberg.relocated.com.google.common.base.Preconditions;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import software.amazon.awssdk.core.sync.ResponseTransformer;\n+import software.amazon.awssdk.services.s3.S3Client;\n+import software.amazon.awssdk.services.s3.model.GetObjectRequest;\n+\n+public class S3InputStream extends SeekableInputStream {\n+  private static final Logger LOG = LoggerFactory.getLogger(S3InputStream.class);\n+\n+  private final StackTraceElement[] createStack;\n+  private final S3Client s3;\n+  private final AmazonS3URI location;\n+\n+  private InputStream stream;\n+  private long pos = 0;\n+  private long next = 0;\n+  private boolean closed = false;\n+\n+  private int skipSize = 1024 * 1024;\n+\n+  public S3InputStream(S3Client s3, AmazonS3URI location) {\n+    this.s3 = s3;\n+    this.location = location;\n+\n+    createStack = Thread.currentThread().getStackTrace();\n+  }\n+\n+  @Override\n+  public long getPos() {\n+    return pos;\n+  }\n+\n+  @Override\n+  public void seek(long newPos) {\n+    Preconditions.checkState(!closed, \"already closed\");\n+    Preconditions.checkArgument(newPos >= 0, \"position is negative: %s\", newPos);\n+\n+    // this allows a seek beyond the end of the stream but the next read will fail\n+    next = newPos;\n+  }\n+\n+  @Override\n+  public int read() throws IOException {\n+    return stream.read();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3c948aa465c01dbe8159117b95725e3c36a7d76b"}, "originalPosition": 72}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE2MDQ4OTQ4", "url": "https://github.com/apache/iceberg/pull/1573#pullrequestreview-516048948", "createdAt": "2020-10-23T22:48:54Z", "commit": {"oid": "3c948aa465c01dbe8159117b95725e3c36a7d76b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QyMjo0ODo1NVrOHngZDA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QyMjo0ODo1NVrOHngZDA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTE4NzIxMg==", "bodyText": "Nit: we mostly use sentence case for error messages, and try to include the intent: \"Cannot read: already closed\"", "url": "https://github.com/apache/iceberg/pull/1573#discussion_r511187212", "createdAt": "2020-10-23T22:48:55Z", "author": {"login": "rdblue"}, "path": "aws/src/main/java/org/apache/iceberg/aws/s3/S3InputStream.java", "diffHunk": "@@ -0,0 +1,154 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.aws.s3;\n+\n+import com.amazonaws.services.s3.AmazonS3URI;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.util.Arrays;\n+import org.apache.iceberg.io.SeekableInputStream;\n+import org.apache.iceberg.relocated.com.google.common.base.Joiner;\n+import org.apache.iceberg.relocated.com.google.common.base.Preconditions;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import software.amazon.awssdk.core.sync.ResponseTransformer;\n+import software.amazon.awssdk.services.s3.S3Client;\n+import software.amazon.awssdk.services.s3.model.GetObjectRequest;\n+\n+public class S3InputStream extends SeekableInputStream {\n+  private static final Logger LOG = LoggerFactory.getLogger(S3InputStream.class);\n+\n+  private final StackTraceElement[] createStack;\n+  private final S3Client s3;\n+  private final AmazonS3URI location;\n+\n+  private InputStream stream;\n+  private long pos = 0;\n+  private long next = 0;\n+  private boolean closed = false;\n+\n+  private int skipSize = 1024 * 1024;\n+\n+  public S3InputStream(S3Client s3, AmazonS3URI location) {\n+    this.s3 = s3;\n+    this.location = location;\n+\n+    createStack = Thread.currentThread().getStackTrace();\n+  }\n+\n+  @Override\n+  public long getPos() {\n+    return pos;\n+  }\n+\n+  @Override\n+  public void seek(long newPos) {\n+    Preconditions.checkState(!closed, \"already closed\");\n+    Preconditions.checkArgument(newPos >= 0, \"position is negative: %s\", newPos);\n+\n+    // this allows a seek beyond the end of the stream but the next read will fail\n+    next = newPos;\n+  }\n+\n+  @Override\n+  public int read() throws IOException {\n+    return stream.read();\n+  }\n+\n+  @Override\n+  public int read(byte[] b, int off, int len) throws IOException {\n+    Preconditions.checkState(!closed, \"already closed\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3c948aa465c01dbe8159117b95725e3c36a7d76b"}, "originalPosition": 77}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE2MDQ5NzQ2", "url": "https://github.com/apache/iceberg/pull/1573#pullrequestreview-516049746", "createdAt": "2020-10-23T22:51:49Z", "commit": {"oid": "3c948aa465c01dbe8159117b95725e3c36a7d76b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QyMjo1MTo0OVrOHngb9g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QyMjo1MTo0OVrOHngb9g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTE4Nzk1OA==", "bodyText": "Shouldn't this be Math.min? If the stream has 5MB left and the skip size is 1MB, then a 2MB skip should not read through.", "url": "https://github.com/apache/iceberg/pull/1573#discussion_r511187958", "createdAt": "2020-10-23T22:51:49Z", "author": {"login": "rdblue"}, "path": "aws/src/main/java/org/apache/iceberg/aws/s3/S3InputStream.java", "diffHunk": "@@ -0,0 +1,154 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.aws.s3;\n+\n+import com.amazonaws.services.s3.AmazonS3URI;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.util.Arrays;\n+import org.apache.iceberg.io.SeekableInputStream;\n+import org.apache.iceberg.relocated.com.google.common.base.Joiner;\n+import org.apache.iceberg.relocated.com.google.common.base.Preconditions;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import software.amazon.awssdk.core.sync.ResponseTransformer;\n+import software.amazon.awssdk.services.s3.S3Client;\n+import software.amazon.awssdk.services.s3.model.GetObjectRequest;\n+\n+public class S3InputStream extends SeekableInputStream {\n+  private static final Logger LOG = LoggerFactory.getLogger(S3InputStream.class);\n+\n+  private final StackTraceElement[] createStack;\n+  private final S3Client s3;\n+  private final AmazonS3URI location;\n+\n+  private InputStream stream;\n+  private long pos = 0;\n+  private long next = 0;\n+  private boolean closed = false;\n+\n+  private int skipSize = 1024 * 1024;\n+\n+  public S3InputStream(S3Client s3, AmazonS3URI location) {\n+    this.s3 = s3;\n+    this.location = location;\n+\n+    createStack = Thread.currentThread().getStackTrace();\n+  }\n+\n+  @Override\n+  public long getPos() {\n+    return pos;\n+  }\n+\n+  @Override\n+  public void seek(long newPos) {\n+    Preconditions.checkState(!closed, \"already closed\");\n+    Preconditions.checkArgument(newPos >= 0, \"position is negative: %s\", newPos);\n+\n+    // this allows a seek beyond the end of the stream but the next read will fail\n+    next = newPos;\n+  }\n+\n+  @Override\n+  public int read() throws IOException {\n+    return stream.read();\n+  }\n+\n+  @Override\n+  public int read(byte[] b, int off, int len) throws IOException {\n+    Preconditions.checkState(!closed, \"already closed\");\n+    positionStream();\n+\n+    int bytesRead = stream.read(b, off, len);\n+    pos += bytesRead;\n+    next += bytesRead;\n+\n+    return bytesRead;\n+  }\n+\n+  @Override\n+  public void close() throws IOException {\n+    super.close();\n+    closed = true;\n+    closeStream();\n+  }\n+\n+  private void positionStream() throws IOException {\n+    if ((stream != null) && (next == pos)) {\n+      // already at specified position\n+      return;\n+    }\n+\n+    if ((stream != null) && (next > pos)) {\n+      // seeking forwards\n+      long skip = next - pos;\n+      if (skip <= Math.max(stream.available(), skipSize)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3c948aa465c01dbe8159117b95725e3c36a7d76b"}, "originalPosition": 103}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE2MDUxMjcz", "url": "https://github.com/apache/iceberg/pull/1573#pullrequestreview-516051273", "createdAt": "2020-10-23T22:58:00Z", "commit": {"oid": "3c948aa465c01dbe8159117b95725e3c36a7d76b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QyMjo1ODowMFrOHnghWQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QyMjo1ODowMFrOHnghWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTE4OTMzNw==", "bodyText": "InputStream.skip doesn't guarantee that the bytes skipped is equal to the request: \"The skip method may, for a variety of reasons, end up skipping over some smaller number of bytes, possibly 0.\"\nIn this case, if anything other than the expected number of bytes is skipped, then this will fall back to reconnecting.\nI don't think that's the desired behavior because S3 may already be sending bytes to the reader (and it will be faster to read through) but the skip returns early because not as many bytes as requested were immediately available. I think that this should probably use a skipFully method that loops and skips until there are no more bytes to read through.", "url": "https://github.com/apache/iceberg/pull/1573#discussion_r511189337", "createdAt": "2020-10-23T22:58:00Z", "author": {"login": "rdblue"}, "path": "aws/src/main/java/org/apache/iceberg/aws/s3/S3InputStream.java", "diffHunk": "@@ -0,0 +1,154 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.aws.s3;\n+\n+import com.amazonaws.services.s3.AmazonS3URI;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.util.Arrays;\n+import org.apache.iceberg.io.SeekableInputStream;\n+import org.apache.iceberg.relocated.com.google.common.base.Joiner;\n+import org.apache.iceberg.relocated.com.google.common.base.Preconditions;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import software.amazon.awssdk.core.sync.ResponseTransformer;\n+import software.amazon.awssdk.services.s3.S3Client;\n+import software.amazon.awssdk.services.s3.model.GetObjectRequest;\n+\n+public class S3InputStream extends SeekableInputStream {\n+  private static final Logger LOG = LoggerFactory.getLogger(S3InputStream.class);\n+\n+  private final StackTraceElement[] createStack;\n+  private final S3Client s3;\n+  private final AmazonS3URI location;\n+\n+  private InputStream stream;\n+  private long pos = 0;\n+  private long next = 0;\n+  private boolean closed = false;\n+\n+  private int skipSize = 1024 * 1024;\n+\n+  public S3InputStream(S3Client s3, AmazonS3URI location) {\n+    this.s3 = s3;\n+    this.location = location;\n+\n+    createStack = Thread.currentThread().getStackTrace();\n+  }\n+\n+  @Override\n+  public long getPos() {\n+    return pos;\n+  }\n+\n+  @Override\n+  public void seek(long newPos) {\n+    Preconditions.checkState(!closed, \"already closed\");\n+    Preconditions.checkArgument(newPos >= 0, \"position is negative: %s\", newPos);\n+\n+    // this allows a seek beyond the end of the stream but the next read will fail\n+    next = newPos;\n+  }\n+\n+  @Override\n+  public int read() throws IOException {\n+    return stream.read();\n+  }\n+\n+  @Override\n+  public int read(byte[] b, int off, int len) throws IOException {\n+    Preconditions.checkState(!closed, \"already closed\");\n+    positionStream();\n+\n+    int bytesRead = stream.read(b, off, len);\n+    pos += bytesRead;\n+    next += bytesRead;\n+\n+    return bytesRead;\n+  }\n+\n+  @Override\n+  public void close() throws IOException {\n+    super.close();\n+    closed = true;\n+    closeStream();\n+  }\n+\n+  private void positionStream() throws IOException {\n+    if ((stream != null) && (next == pos)) {\n+      // already at specified position\n+      return;\n+    }\n+\n+    if ((stream != null) && (next > pos)) {\n+      // seeking forwards\n+      long skip = next - pos;\n+      if (skip <= Math.max(stream.available(), skipSize)) {\n+        // already buffered or seek is small enough\n+        LOG.debug(\"Read-through seek for {} to offset {}\", location, next);\n+        try {\n+          if (stream.skip(skip) == skip) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3c948aa465c01dbe8159117b95725e3c36a7d76b"}, "originalPosition": 107}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE2MDUxNTI4", "url": "https://github.com/apache/iceberg/pull/1573#pullrequestreview-516051528", "createdAt": "2020-10-23T22:59:05Z", "commit": {"oid": "3c948aa465c01dbe8159117b95725e3c36a7d76b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QyMjo1OTowNVrOHngiRQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QyMjo1OTowNVrOHngiRQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTE4OTU3Mw==", "bodyText": "This is weird. The format for this argument is \"bytes=(num)-\"?", "url": "https://github.com/apache/iceberg/pull/1573#discussion_r511189573", "createdAt": "2020-10-23T22:59:05Z", "author": {"login": "rdblue"}, "path": "aws/src/main/java/org/apache/iceberg/aws/s3/S3InputStream.java", "diffHunk": "@@ -0,0 +1,154 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.aws.s3;\n+\n+import com.amazonaws.services.s3.AmazonS3URI;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.util.Arrays;\n+import org.apache.iceberg.io.SeekableInputStream;\n+import org.apache.iceberg.relocated.com.google.common.base.Joiner;\n+import org.apache.iceberg.relocated.com.google.common.base.Preconditions;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import software.amazon.awssdk.core.sync.ResponseTransformer;\n+import software.amazon.awssdk.services.s3.S3Client;\n+import software.amazon.awssdk.services.s3.model.GetObjectRequest;\n+\n+public class S3InputStream extends SeekableInputStream {\n+  private static final Logger LOG = LoggerFactory.getLogger(S3InputStream.class);\n+\n+  private final StackTraceElement[] createStack;\n+  private final S3Client s3;\n+  private final AmazonS3URI location;\n+\n+  private InputStream stream;\n+  private long pos = 0;\n+  private long next = 0;\n+  private boolean closed = false;\n+\n+  private int skipSize = 1024 * 1024;\n+\n+  public S3InputStream(S3Client s3, AmazonS3URI location) {\n+    this.s3 = s3;\n+    this.location = location;\n+\n+    createStack = Thread.currentThread().getStackTrace();\n+  }\n+\n+  @Override\n+  public long getPos() {\n+    return pos;\n+  }\n+\n+  @Override\n+  public void seek(long newPos) {\n+    Preconditions.checkState(!closed, \"already closed\");\n+    Preconditions.checkArgument(newPos >= 0, \"position is negative: %s\", newPos);\n+\n+    // this allows a seek beyond the end of the stream but the next read will fail\n+    next = newPos;\n+  }\n+\n+  @Override\n+  public int read() throws IOException {\n+    return stream.read();\n+  }\n+\n+  @Override\n+  public int read(byte[] b, int off, int len) throws IOException {\n+    Preconditions.checkState(!closed, \"already closed\");\n+    positionStream();\n+\n+    int bytesRead = stream.read(b, off, len);\n+    pos += bytesRead;\n+    next += bytesRead;\n+\n+    return bytesRead;\n+  }\n+\n+  @Override\n+  public void close() throws IOException {\n+    super.close();\n+    closed = true;\n+    closeStream();\n+  }\n+\n+  private void positionStream() throws IOException {\n+    if ((stream != null) && (next == pos)) {\n+      // already at specified position\n+      return;\n+    }\n+\n+    if ((stream != null) && (next > pos)) {\n+      // seeking forwards\n+      long skip = next - pos;\n+      if (skip <= Math.max(stream.available(), skipSize)) {\n+        // already buffered or seek is small enough\n+        LOG.debug(\"Read-through seek for {} to offset {}\", location, next);\n+        try {\n+          if (stream.skip(skip) == skip) {\n+            pos = next;\n+            return;\n+          }\n+        } catch (IOException ignored) {\n+          // will retry by re-opening the stream\n+        }\n+      }\n+    }\n+\n+    // close the stream and open at desired position\n+    LOG.debug(\"Seek with new stream for {} to offset {}\", location, next);\n+    pos = next;\n+    openStream();\n+  }\n+\n+  private void openStream() throws IOException {\n+    GetObjectRequest request = GetObjectRequest.builder()\n+        .bucket(location.getBucket())\n+        .key(location.getKey())\n+        .range(String.format(\"bytes=%s-\", pos))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3c948aa465c01dbe8159117b95725e3c36a7d76b"}, "originalPosition": 127}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE2MDUyMDU1", "url": "https://github.com/apache/iceberg/pull/1573#pullrequestreview-516052055", "createdAt": "2020-10-23T23:01:14Z", "commit": {"oid": "3c948aa465c01dbe8159117b95725e3c36a7d76b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QyMzowMToxNFrOHngkOw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QyMzowMToxNFrOHngkOw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTE5MDA3NQ==", "bodyText": "The stream is always non-null. Should we remove this check?", "url": "https://github.com/apache/iceberg/pull/1573#discussion_r511190075", "createdAt": "2020-10-23T23:01:14Z", "author": {"login": "rdblue"}, "path": "aws/src/main/java/org/apache/iceberg/aws/s3/S3OutputStream.java", "diffHunk": "@@ -0,0 +1,114 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.aws.s3;\n+\n+import com.amazonaws.services.s3.AmazonS3URI;\n+import java.io.BufferedOutputStream;\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.io.OutputStream;\n+import java.util.Arrays;\n+import org.apache.iceberg.io.PositionOutputStream;\n+import org.apache.iceberg.relocated.com.google.common.base.Joiner;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import software.amazon.awssdk.core.sync.RequestBody;\n+import software.amazon.awssdk.services.s3.S3Client;\n+import software.amazon.awssdk.services.s3.model.PutObjectRequest;\n+\n+public class S3OutputStream extends PositionOutputStream {\n+  private static final Logger LOG = LoggerFactory.getLogger(S3OutputStream.class);\n+\n+  private final StackTraceElement[] createStack;\n+  private final S3Client s3;\n+  private final AmazonS3URI location;\n+\n+  private final OutputStream stream;\n+  private final File stagingFile;\n+  private long pos = 0;\n+\n+  private boolean closed = false;\n+\n+  public S3OutputStream(S3Client s3, AmazonS3URI location) throws IOException {\n+    this.s3 = s3;\n+    this.location = location;\n+\n+    createStack = Thread.currentThread().getStackTrace();\n+    stagingFile = File.createTempFile(\"s3fileio-\", \".tmp\");\n+    stream = new BufferedOutputStream(new FileOutputStream(stagingFile));\n+\n+    stagingFile.deleteOnExit();\n+  }\n+\n+  @Override\n+  public long getPos() {\n+    return pos;\n+  }\n+\n+  @Override\n+  public void flush() throws IOException {\n+    stream.flush();\n+  }\n+\n+  @Override\n+  public void write(int b) throws IOException {\n+    stream.write(b);\n+    pos += 1;\n+  }\n+\n+  @Override\n+  public void write(byte[] b, int off, int len) throws IOException {\n+    stream.write(b, off, len);\n+    pos += len;\n+  }\n+\n+  @Override\n+  public void close() throws IOException {\n+    super.close();\n+    closed = true;\n+\n+    try {\n+      if (stream != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3c948aa465c01dbe8159117b95725e3c36a7d76b"}, "originalPosition": 89}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE2MDU1NTY3", "url": "https://github.com/apache/iceberg/pull/1573#pullrequestreview-516055567", "createdAt": "2020-10-23T23:09:13Z", "commit": {"oid": "3c948aa465c01dbe8159117b95725e3c36a7d76b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QyMzowOToxM1rOHngrgg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QyMzowOToxM1rOHngrgg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTE5MTkzOA==", "bodyText": "I think this needs to test the different read methods, not just read with a buffer. It also should test the values returned by getPos because those are critical to skipping correctly for read-through seeks.", "url": "https://github.com/apache/iceberg/pull/1573#discussion_r511191938", "createdAt": "2020-10-23T23:09:13Z", "author": {"login": "rdblue"}, "path": "aws/src/test/java/org/apache/iceberg/aws/s3/S3InputStreamTest.java", "diffHunk": "@@ -0,0 +1,103 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.aws.s3;\n+\n+import com.adobe.testing.s3mock.junit4.S3MockRule;\n+import com.amazonaws.services.s3.AmazonS3URI;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.util.Arrays;\n+import java.util.Random;\n+import org.apache.commons.io.IOUtils;\n+import org.apache.iceberg.io.SeekableInputStream;\n+import org.junit.Before;\n+import org.junit.ClassRule;\n+import org.junit.Test;\n+import software.amazon.awssdk.core.sync.RequestBody;\n+import software.amazon.awssdk.services.s3.S3Client;\n+import software.amazon.awssdk.services.s3.model.CreateBucketRequest;\n+import software.amazon.awssdk.services.s3.model.PutObjectRequest;\n+\n+import static org.junit.Assert.assertArrayEquals;\n+import static org.junit.Assert.assertThrows;\n+\n+public class S3InputStreamTest {\n+  @ClassRule\n+  public static final S3MockRule S3_MOCK_RULE = S3MockRule.builder().silent().build();\n+\n+  private final S3Client s3 = S3_MOCK_RULE.createS3ClientV2();\n+  private final Random random = new Random(1);\n+\n+  @Before\n+  public void before() {\n+    s3.createBucket(CreateBucketRequest.builder().bucket(\"bucket\").build());\n+  }\n+\n+  @Test\n+  public void testRead() throws Exception {\n+    AmazonS3URI uri = new AmazonS3URI(\"s3://bucket/path/to/read.dat\");\n+    byte[] expected = randomData(1024 * 1024);\n+\n+    writeS3Data(uri, expected);\n+\n+    try (InputStream in = new S3InputStream(s3, uri)) {\n+      byte[] actual = IOUtils.readFully(in, expected.length);\n+      assertArrayEquals(expected, actual);\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3c948aa465c01dbe8159117b95725e3c36a7d76b"}, "originalPosition": 63}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ea2c8081d53fca3744b782d062a07767776fb50a", "author": {"user": {"login": "danielcweeks", "name": "Daniel Weeks"}}, "url": "https://github.com/apache/iceberg/commit/ea2c8081d53fca3744b782d062a07767776fb50a", "committedDate": "2020-10-24T16:32:08Z", "message": "Update next position on read()"}, "afterCommit": {"oid": "57744a815314b175145edac59519f119e0e50e0f", "author": {"user": {"login": "danielcweeks", "name": "Daniel Weeks"}}, "url": "https://github.com/apache/iceberg/commit/57744a815314b175145edac59519f119e0e50e0f", "committedDate": "2020-10-26T18:18:57Z", "message": "Squash changes for reviews"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "57744a815314b175145edac59519f119e0e50e0f", "author": {"user": {"login": "danielcweeks", "name": "Daniel Weeks"}}, "url": "https://github.com/apache/iceberg/commit/57744a815314b175145edac59519f119e0e50e0f", "committedDate": "2020-10-26T18:18:57Z", "message": "Squash changes for reviews"}, "afterCommit": {"oid": "146737b2dc1fce7f3029f65c0ab6a6a7617088d1", "author": {"user": {"login": "danielcweeks", "name": "Daniel Weeks"}}, "url": "https://github.com/apache/iceberg/commit/146737b2dc1fce7f3029f65c0ab6a6a7617088d1", "committedDate": "2020-10-26T19:40:18Z", "message": "Squash changes for reviews"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "146737b2dc1fce7f3029f65c0ab6a6a7617088d1", "author": {"user": {"login": "danielcweeks", "name": "Daniel Weeks"}}, "url": "https://github.com/apache/iceberg/commit/146737b2dc1fce7f3029f65c0ab6a6a7617088d1", "committedDate": "2020-10-26T19:40:18Z", "message": "Squash changes for reviews"}, "afterCommit": {"oid": "dece93ecfa9ec6ba47fc89096228c5ef88164756", "author": {"user": {"login": "danielcweeks", "name": "Daniel Weeks"}}, "url": "https://github.com/apache/iceberg/commit/dece93ecfa9ec6ba47fc89096228c5ef88164756", "committedDate": "2020-10-27T15:19:26Z", "message": "Squash changes for reviews"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "04bfdbfd7dc0f9fc2605898880384b12229c5c92", "author": {"user": {"login": "danielcweeks", "name": "Daniel Weeks"}}, "url": "https://github.com/apache/iceberg/commit/04bfdbfd7dc0f9fc2605898880384b12229c5c92", "committedDate": "2020-10-27T19:16:41Z", "message": "Squash changes for reviews"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "dece93ecfa9ec6ba47fc89096228c5ef88164756", "author": {"user": {"login": "danielcweeks", "name": "Daniel Weeks"}}, "url": "https://github.com/apache/iceberg/commit/dece93ecfa9ec6ba47fc89096228c5ef88164756", "committedDate": "2020-10-27T15:19:26Z", "message": "Squash changes for reviews"}, "afterCommit": {"oid": "04bfdbfd7dc0f9fc2605898880384b12229c5c92", "author": {"user": {"login": "danielcweeks", "name": "Daniel Weeks"}}, "url": "https://github.com/apache/iceberg/commit/04bfdbfd7dc0f9fc2605898880384b12229c5c92", "committedDate": "2020-10-27T19:16:41Z", "message": "Squash changes for reviews"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIwMTQwMjY4", "url": "https://github.com/apache/iceberg/pull/1573#pullrequestreview-520140268", "createdAt": "2020-10-29T22:43:46Z", "commit": {"oid": "04bfdbfd7dc0f9fc2605898880384b12229c5c92"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQyMjo0Mzo0NlrOHqxP7w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQyMjo0ODoxMlrOHqxWVA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDYwOTEzNQ==", "bodyText": "What is the reasoning behind having a serializable S3Client supplier? Since you are already marking the s3 client as transient, why not just have:\npublic S3FileIO() {\n  client = S3Client.create();\n}\nAlso the AWS client is hard to serialize. You need to serialize things like credential information that might expire after encode and decode. It seems hard to use this constructor unless we also provide an actual implementation of SerializableSupplier<S3Client.", "url": "https://github.com/apache/iceberg/pull/1573#discussion_r514609135", "createdAt": "2020-10-29T22:43:46Z", "author": {"login": "jackye1995"}, "path": "aws/src/main/java/org/apache/iceberg/aws/s3/S3FileIO.java", "diffHunk": "@@ -0,0 +1,173 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.aws.s3;\n+\n+import com.amazonaws.services.s3.AmazonS3URI;\n+import java.io.IOException;\n+import java.io.Serializable;\n+import org.apache.http.HttpStatus;\n+import org.apache.iceberg.io.FileIO;\n+import org.apache.iceberg.io.InputFile;\n+import org.apache.iceberg.io.OutputFile;\n+import org.apache.iceberg.io.PositionOutputStream;\n+import org.apache.iceberg.io.SeekableInputStream;\n+import org.apache.iceberg.util.SerializableSupplier;\n+import software.amazon.awssdk.services.s3.S3Client;\n+import software.amazon.awssdk.services.s3.model.Delete;\n+import software.amazon.awssdk.services.s3.model.DeleteObjectsRequest;\n+import software.amazon.awssdk.services.s3.model.HeadObjectRequest;\n+import software.amazon.awssdk.services.s3.model.HeadObjectResponse;\n+import software.amazon.awssdk.services.s3.model.ObjectIdentifier;\n+import software.amazon.awssdk.services.s3.model.S3Exception;\n+\n+/**\n+ * FileIO implementation backed by S3.  Locations used must follow the conventions for URIs (e.g. s3://bucket/path/..).\n+ */\n+public class S3FileIO implements FileIO, Serializable {\n+  private final SerializableSupplier<S3Client> s3;\n+  private transient S3Client client;\n+\n+  public S3FileIO(SerializableSupplier<S3Client> s3) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "04bfdbfd7dc0f9fc2605898880384b12229c5c92"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDYwOTgwNw==", "bodyText": "Is it better to not nest this class inside S3FileIO? In this way it is more consistent with HadoopInputFile", "url": "https://github.com/apache/iceberg/pull/1573#discussion_r514609807", "createdAt": "2020-10-29T22:45:29Z", "author": {"login": "jackye1995"}, "path": "aws/src/main/java/org/apache/iceberg/aws/s3/S3FileIO.java", "diffHunk": "@@ -0,0 +1,173 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.aws.s3;\n+\n+import com.amazonaws.services.s3.AmazonS3URI;\n+import java.io.IOException;\n+import java.io.Serializable;\n+import org.apache.http.HttpStatus;\n+import org.apache.iceberg.io.FileIO;\n+import org.apache.iceberg.io.InputFile;\n+import org.apache.iceberg.io.OutputFile;\n+import org.apache.iceberg.io.PositionOutputStream;\n+import org.apache.iceberg.io.SeekableInputStream;\n+import org.apache.iceberg.util.SerializableSupplier;\n+import software.amazon.awssdk.services.s3.S3Client;\n+import software.amazon.awssdk.services.s3.model.Delete;\n+import software.amazon.awssdk.services.s3.model.DeleteObjectsRequest;\n+import software.amazon.awssdk.services.s3.model.HeadObjectRequest;\n+import software.amazon.awssdk.services.s3.model.HeadObjectResponse;\n+import software.amazon.awssdk.services.s3.model.ObjectIdentifier;\n+import software.amazon.awssdk.services.s3.model.S3Exception;\n+\n+/**\n+ * FileIO implementation backed by S3.  Locations used must follow the conventions for URIs (e.g. s3://bucket/path/..).\n+ */\n+public class S3FileIO implements FileIO, Serializable {\n+  private final SerializableSupplier<S3Client> s3;\n+  private transient S3Client client;\n+\n+  public S3FileIO(SerializableSupplier<S3Client> s3) {\n+    this.s3 = s3;\n+  }\n+\n+  @Override\n+  public InputFile newInputFile(String path) {\n+    return new S3InputFile(new AmazonS3URI(path));\n+  }\n+\n+  @Override\n+  public OutputFile newOutputFile(String path) {\n+    return new S3OutputFile(new AmazonS3URI(path));\n+  }\n+\n+  @Override\n+  public void deleteFile(String path) {\n+    AmazonS3URI location = new AmazonS3URI(path);\n+    ObjectIdentifier objectIdentifier = ObjectIdentifier.builder().key(location.getKey()).build();\n+    Delete delete = Delete.builder().objects(objectIdentifier).build();\n+    DeleteObjectsRequest deleteRequest =\n+        DeleteObjectsRequest.builder().bucket(location.getBucket()).delete(delete).build();\n+\n+    client().deleteObjects(deleteRequest);\n+  }\n+\n+  private S3Client client() {\n+    if (client == null) {\n+      client = s3.get();\n+    }\n+    return client;\n+  }\n+\n+  public class S3InputFile implements InputFile {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "04bfdbfd7dc0f9fc2605898880384b12229c5c92"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDYxMDc3Mg==", "bodyText": "FileIO already implements Serializable, no need to declare it again.", "url": "https://github.com/apache/iceberg/pull/1573#discussion_r514610772", "createdAt": "2020-10-29T22:48:12Z", "author": {"login": "jackye1995"}, "path": "aws/src/main/java/org/apache/iceberg/aws/s3/S3FileIO.java", "diffHunk": "@@ -0,0 +1,173 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.aws.s3;\n+\n+import com.amazonaws.services.s3.AmazonS3URI;\n+import java.io.IOException;\n+import java.io.Serializable;\n+import org.apache.http.HttpStatus;\n+import org.apache.iceberg.io.FileIO;\n+import org.apache.iceberg.io.InputFile;\n+import org.apache.iceberg.io.OutputFile;\n+import org.apache.iceberg.io.PositionOutputStream;\n+import org.apache.iceberg.io.SeekableInputStream;\n+import org.apache.iceberg.util.SerializableSupplier;\n+import software.amazon.awssdk.services.s3.S3Client;\n+import software.amazon.awssdk.services.s3.model.Delete;\n+import software.amazon.awssdk.services.s3.model.DeleteObjectsRequest;\n+import software.amazon.awssdk.services.s3.model.HeadObjectRequest;\n+import software.amazon.awssdk.services.s3.model.HeadObjectResponse;\n+import software.amazon.awssdk.services.s3.model.ObjectIdentifier;\n+import software.amazon.awssdk.services.s3.model.S3Exception;\n+\n+/**\n+ * FileIO implementation backed by S3.  Locations used must follow the conventions for URIs (e.g. s3://bucket/path/..).\n+ */\n+public class S3FileIO implements FileIO, Serializable {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "04bfdbfd7dc0f9fc2605898880384b12229c5c92"}, "originalPosition": 43}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d2ae12190424e6822745b17d89f6396cde83f7ba", "author": {"user": {"login": "danielcweeks", "name": "Daniel Weeks"}}, "url": "https://github.com/apache/iceberg/commit/d2ae12190424e6822745b17d89f6396cde83f7ba", "committedDate": "2020-11-03T22:44:57Z", "message": "Add support for create.  Remove dependency on sdk v1."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIyOTYxMDE0", "url": "https://github.com/apache/iceberg/pull/1573#pullrequestreview-522961014", "createdAt": "2020-11-04T00:07:19Z", "commit": {"oid": "d2ae12190424e6822745b17d89f6396cde83f7ba"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQwMDowNzoxOVrOHtEzoQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQwMDowNzoxOVrOHtEzoQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzAyNjcyMQ==", "bodyText": "Why throw IOException if the only place this constructor is called catches it and throws UncheckedIOException?", "url": "https://github.com/apache/iceberg/pull/1573#discussion_r517026721", "createdAt": "2020-11-04T00:07:19Z", "author": {"login": "rdblue"}, "path": "aws/src/main/java/org/apache/iceberg/aws/s3/S3OutputStream.java", "diffHunk": "@@ -0,0 +1,111 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.aws.s3;\n+\n+import java.io.BufferedOutputStream;\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.io.OutputStream;\n+import java.util.Arrays;\n+import org.apache.iceberg.io.PositionOutputStream;\n+import org.apache.iceberg.relocated.com.google.common.base.Joiner;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import software.amazon.awssdk.core.sync.RequestBody;\n+import software.amazon.awssdk.services.s3.S3Client;\n+import software.amazon.awssdk.services.s3.model.PutObjectRequest;\n+\n+public class S3OutputStream extends PositionOutputStream {\n+  private static final Logger LOG = LoggerFactory.getLogger(S3OutputStream.class);\n+\n+  private final StackTraceElement[] createStack;\n+  private final S3Client s3;\n+  private final S3URI location;\n+\n+  private final OutputStream stream;\n+  private final File stagingFile;\n+  private long pos = 0;\n+\n+  private boolean closed = false;\n+\n+  public S3OutputStream(S3Client s3, S3URI location) throws IOException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d2ae12190424e6822745b17d89f6396cde83f7ba"}, "originalPosition": 49}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIyOTYxMzU3", "url": "https://github.com/apache/iceberg/pull/1573#pullrequestreview-522961357", "createdAt": "2020-11-04T00:08:25Z", "commit": {"oid": "d2ae12190424e6822745b17d89f6396cde83f7ba"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQwMDowODoyNVrOHtE0qg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQwMDowODoyNVrOHtE0qg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzAyNjk4Ng==", "bodyText": "Is there any need to make this class public? If not, then I'd prefer to keep it package-private to avoid more breakable APIs than necessary.", "url": "https://github.com/apache/iceberg/pull/1573#discussion_r517026986", "createdAt": "2020-11-04T00:08:25Z", "author": {"login": "rdblue"}, "path": "aws/src/main/java/org/apache/iceberg/aws/s3/S3OutputStream.java", "diffHunk": "@@ -0,0 +1,111 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.aws.s3;\n+\n+import java.io.BufferedOutputStream;\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.io.OutputStream;\n+import java.util.Arrays;\n+import org.apache.iceberg.io.PositionOutputStream;\n+import org.apache.iceberg.relocated.com.google.common.base.Joiner;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import software.amazon.awssdk.core.sync.RequestBody;\n+import software.amazon.awssdk.services.s3.S3Client;\n+import software.amazon.awssdk.services.s3.model.PutObjectRequest;\n+\n+public class S3OutputStream extends PositionOutputStream {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d2ae12190424e6822745b17d89f6396cde83f7ba"}, "originalPosition": 36}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIyOTYxNjAw", "url": "https://github.com/apache/iceberg/pull/1573#pullrequestreview-522961600", "createdAt": "2020-11-04T00:09:11Z", "commit": {"oid": "d2ae12190424e6822745b17d89f6396cde83f7ba"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQwMDowOToxMVrOHtE1cw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQwMDowOToxMVrOHtE1cw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzAyNzE4Nw==", "bodyText": "Similar to the comment on S3OutputFile, I'd like to make as much of the internals as possible package-private to avoid needing to support direct use.", "url": "https://github.com/apache/iceberg/pull/1573#discussion_r517027187", "createdAt": "2020-11-04T00:09:11Z", "author": {"login": "rdblue"}, "path": "aws/src/main/java/org/apache/iceberg/aws/s3/BaseS3File.java", "diffHunk": "@@ -0,0 +1,83 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.aws.s3;\n+\n+import software.amazon.awssdk.http.HttpStatusCode;\n+import software.amazon.awssdk.services.s3.S3Client;\n+import software.amazon.awssdk.services.s3.model.HeadObjectRequest;\n+import software.amazon.awssdk.services.s3.model.HeadObjectResponse;\n+import software.amazon.awssdk.services.s3.model.S3Exception;\n+\n+public abstract class BaseS3File {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d2ae12190424e6822745b17d89f6396cde83f7ba"}, "originalPosition": 28}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIyOTYxNzY5", "url": "https://github.com/apache/iceberg/pull/1573#pullrequestreview-522961769", "createdAt": "2020-11-04T00:09:39Z", "commit": {"oid": "d2ae12190424e6822745b17d89f6396cde83f7ba"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQwMDowOTozOVrOHtE2LA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQwMDowOTozOVrOHtE2LA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzAyNzM3Mg==", "bodyText": "This class already has location() above. How about a package-private uri method?", "url": "https://github.com/apache/iceberg/pull/1573#discussion_r517027372", "createdAt": "2020-11-04T00:09:39Z", "author": {"login": "rdblue"}, "path": "aws/src/main/java/org/apache/iceberg/aws/s3/BaseS3File.java", "diffHunk": "@@ -0,0 +1,83 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.aws.s3;\n+\n+import software.amazon.awssdk.http.HttpStatusCode;\n+import software.amazon.awssdk.services.s3.S3Client;\n+import software.amazon.awssdk.services.s3.model.HeadObjectRequest;\n+import software.amazon.awssdk.services.s3.model.HeadObjectResponse;\n+import software.amazon.awssdk.services.s3.model.S3Exception;\n+\n+public abstract class BaseS3File {\n+  private final S3Client client;\n+  private final S3URI location;\n+  private HeadObjectResponse metadata;\n+\n+  public BaseS3File(S3Client client, S3URI location) {\n+    this.client = client;\n+    this.location = location;\n+  }\n+\n+  public String location() {\n+    return location.toString();\n+  }\n+\n+  public S3Client getClient() {\n+    return client;\n+  }\n+\n+  public S3URI getLocation() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d2ae12190424e6822745b17d89f6396cde83f7ba"}, "originalPosition": 46}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIyOTYxOTIy", "url": "https://github.com/apache/iceberg/pull/1573#pullrequestreview-522961922", "createdAt": "2020-11-04T00:10:14Z", "commit": {"oid": "d2ae12190424e6822745b17d89f6396cde83f7ba"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQwMDoxMDoxNFrOHtE2vg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQwMDoxMDoxNFrOHtE2vg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzAyNzUxOA==", "bodyText": "Could this be package-private client()? (We avoid using get in names because it has little value and is only used in Java conventions.)", "url": "https://github.com/apache/iceberg/pull/1573#discussion_r517027518", "createdAt": "2020-11-04T00:10:14Z", "author": {"login": "rdblue"}, "path": "aws/src/main/java/org/apache/iceberg/aws/s3/BaseS3File.java", "diffHunk": "@@ -0,0 +1,83 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.aws.s3;\n+\n+import software.amazon.awssdk.http.HttpStatusCode;\n+import software.amazon.awssdk.services.s3.S3Client;\n+import software.amazon.awssdk.services.s3.model.HeadObjectRequest;\n+import software.amazon.awssdk.services.s3.model.HeadObjectResponse;\n+import software.amazon.awssdk.services.s3.model.S3Exception;\n+\n+public abstract class BaseS3File {\n+  private final S3Client client;\n+  private final S3URI location;\n+  private HeadObjectResponse metadata;\n+\n+  public BaseS3File(S3Client client, S3URI location) {\n+    this.client = client;\n+    this.location = location;\n+  }\n+\n+  public String location() {\n+    return location.toString();\n+  }\n+\n+  public S3Client getClient() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d2ae12190424e6822745b17d89f6396cde83f7ba"}, "originalPosition": 42}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIyOTY0MDE5", "url": "https://github.com/apache/iceberg/pull/1573#pullrequestreview-522964019", "createdAt": "2020-11-04T00:16:52Z", "commit": {"oid": "d2ae12190424e6822745b17d89f6396cde83f7ba"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQwMDoxNjo1MlrOHtE9ww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQwMDoxNjo1MlrOHtE9ww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzAyOTMxNQ==", "bodyText": "Unfortunately, Java's URI has a lot of problems with character escaping. and it's really hard to reconstruct some or all of a URI from the getter methods that it exposes. The uriToString method that we use actually avoids calling URI#toString and instead uses new Path(uri).toString().\nI think it would be better to parse the URI without it. Since we expect a bucket in the URI authority, we can be fairly strict with parsing rules:\n\nSplit by :// to get scheme and bucket/key\nSplit bucket/key by the first / to get bucket and key\nValidate scheme is s3 or equivalent (s3n, s3a)", "url": "https://github.com/apache/iceberg/pull/1573#discussion_r517029315", "createdAt": "2020-11-04T00:16:52Z", "author": {"login": "rdblue"}, "path": "aws/src/main/java/org/apache/iceberg/aws/s3/S3URI.java", "diffHunk": "@@ -0,0 +1,47 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.aws.s3;\n+\n+import java.net.URI;\n+\n+public class S3URI {\n+  private final URI uri;\n+\n+  public S3URI(URI uri) {\n+    this.uri = uri;\n+  }\n+\n+  public S3URI(String uri) {\n+    this(URI.create(uri));\n+  }\n+\n+  public String bucket() {\n+    return uri.getAuthority();\n+  }\n+\n+  public String key() {\n+    return uri.getPath().startsWith(\"/\") ? uri.getPath().replaceFirst(\"/\", \"\") : uri.getPath();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d2ae12190424e6822745b17d89f6396cde83f7ba"}, "originalPosition": 40}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIyOTY1MTMx", "url": "https://github.com/apache/iceberg/pull/1573#pullrequestreview-522965131", "createdAt": "2020-11-04T00:20:25Z", "commit": {"oid": "d2ae12190424e6822745b17d89f6396cde83f7ba"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQwMDoyMDoyNlrOHtFBhA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQwMDoyMDoyNlrOHtFBhA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzAzMDI3Ng==", "bodyText": "Should this also call write(int)?", "url": "https://github.com/apache/iceberg/pull/1573#discussion_r517030276", "createdAt": "2020-11-04T00:20:26Z", "author": {"login": "rdblue"}, "path": "aws/src/test/java/org/apache/iceberg/aws/s3/S3OutputStreamTest.java", "diffHunk": "@@ -0,0 +1,83 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.aws.s3;\n+\n+import com.adobe.testing.s3mock.junit4.S3MockRule;\n+import java.io.IOException;\n+import java.util.Random;\n+import org.junit.Before;\n+import org.junit.ClassRule;\n+import org.junit.Test;\n+import software.amazon.awssdk.core.ResponseBytes;\n+import software.amazon.awssdk.core.sync.ResponseTransformer;\n+import software.amazon.awssdk.services.s3.S3Client;\n+import software.amazon.awssdk.services.s3.model.CreateBucketRequest;\n+import software.amazon.awssdk.services.s3.model.GetObjectRequest;\n+import software.amazon.awssdk.services.s3.model.GetObjectResponse;\n+\n+import static org.junit.Assert.assertArrayEquals;\n+import static org.junit.Assert.assertEquals;\n+\n+public class S3OutputStreamTest {\n+  @ClassRule\n+  public static final S3MockRule S3_MOCK_RULE = S3MockRule.builder().silent().build();\n+\n+  private final S3Client s3 = S3_MOCK_RULE.createS3ClientV2();\n+  private final Random random = new Random(1);\n+\n+  @Before\n+  public void before() {\n+    s3.createBucket(CreateBucketRequest.builder().bucket(\"bucket\").build());\n+  }\n+\n+  @Test\n+  public void getPos() throws IOException {\n+    S3URI uri = new S3URI(\"s3://bucket/path/to/pos.dat\");\n+    int writeSize = 1024;\n+\n+    try (S3OutputStream stream = new S3OutputStream(s3, uri)) {\n+      stream.write(new byte[writeSize]);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d2ae12190424e6822745b17d89f6396cde83f7ba"}, "originalPosition": 56}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIyOTY2MTg4", "url": "https://github.com/apache/iceberg/pull/1573#pullrequestreview-522966188", "createdAt": "2020-11-04T00:23:47Z", "commit": {"oid": "d2ae12190424e6822745b17d89f6396cde83f7ba"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQwMDoyMzo0N1rOHtFFFQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQwMDoyMzo0N1rOHtFFFQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzAzMTE4OQ==", "bodyText": "This only tests read-through seek. Can you add a test for close/open seek?", "url": "https://github.com/apache/iceberg/pull/1573#discussion_r517031189", "createdAt": "2020-11-04T00:23:47Z", "author": {"login": "rdblue"}, "path": "aws/src/test/java/org/apache/iceberg/aws/s3/S3InputStreamTest.java", "diffHunk": "@@ -0,0 +1,145 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.aws.s3;\n+\n+import com.adobe.testing.s3mock.junit4.S3MockRule;\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.Random;\n+import org.apache.commons.io.IOUtils;\n+import org.apache.iceberg.io.SeekableInputStream;\n+import org.junit.Before;\n+import org.junit.ClassRule;\n+import org.junit.Test;\n+import software.amazon.awssdk.core.sync.RequestBody;\n+import software.amazon.awssdk.services.s3.S3Client;\n+import software.amazon.awssdk.services.s3.model.CreateBucketRequest;\n+import software.amazon.awssdk.services.s3.model.PutObjectRequest;\n+\n+import static org.junit.Assert.assertArrayEquals;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertThrows;\n+\n+public class S3InputStreamTest {\n+  @ClassRule\n+  public static final S3MockRule S3_MOCK_RULE = S3MockRule.builder().silent().build();\n+\n+  private final S3Client s3 = S3_MOCK_RULE.createS3ClientV2();\n+  private final Random random = new Random(1);\n+\n+  @Before\n+  public void before() {\n+    s3.createBucket(CreateBucketRequest.builder().bucket(\"bucket\").build());\n+  }\n+\n+  @Test\n+  public void testRead() throws Exception {\n+    S3URI uri = new S3URI(\"s3://bucket/path/to/read.dat\");\n+    int dataSize = 1024 * 1024 * 10;\n+    byte[] data = randomData(dataSize);\n+\n+    writeS3Data(uri, data);\n+\n+    try (SeekableInputStream in = new S3InputStream(s3, uri)) {\n+      int readSize = 1024;\n+      byte [] actual = new byte[readSize];\n+\n+      readAndCheck(in, in.getPos(), readSize, data, false);\n+      readAndCheck(in, in.getPos(), readSize, data, true);\n+\n+      // Seek forward in current stream\n+      int seekSize = 1024;\n+      readAndCheck(in, in.getPos() + seekSize, readSize, data, false);\n+      readAndCheck(in, in.getPos() + seekSize, readSize, data, true);\n+\n+      // Buffered read\n+      readAndCheck(in, in.getPos(), readSize, data, true);\n+      readAndCheck(in, in.getPos(), readSize, data, false);\n+\n+      // Seek with new stream\n+      long seekNewStreamPosition = 2 * 1024 * 1024;\n+      readAndCheck(in, in.getPos() + seekNewStreamPosition, readSize, data, true);\n+      readAndCheck(in, in.getPos() + seekNewStreamPosition, readSize, data, false);\n+\n+      // Backseek and read\n+      readAndCheck(in, 0, readSize, data, true);\n+      readAndCheck(in, 0, readSize, data, false);\n+    }\n+  }\n+\n+  private void readAndCheck(SeekableInputStream in, long rangeStart, int size, byte [] original, boolean buffered)\n+      throws IOException {\n+    in.seek(rangeStart);\n+    assertEquals(rangeStart, in.getPos());\n+\n+    long rangeEnd = rangeStart + size;\n+    byte [] actual = new byte[size];\n+\n+    if (buffered) {\n+      IOUtils.readFully(in, actual);\n+    } else {\n+      int read = 0;\n+      while (read < size) {\n+        actual[read++] = (byte) in.read();\n+      }\n+    }\n+\n+    assertEquals(rangeEnd, in.getPos());\n+    assertArrayEquals(Arrays.copyOfRange(original, (int) rangeStart, (int) rangeEnd), actual);\n+  }\n+\n+  @Test\n+  public void testClose() throws Exception {\n+    S3URI uri = new S3URI(\"s3://bucket/path/to/closed.dat\");\n+    SeekableInputStream closed = new S3InputStream(s3, uri);\n+    closed.close();\n+    assertThrows(IllegalStateException.class, () -> closed.seek(0));\n+  }\n+\n+  @Test\n+  public void testSeek() throws Exception {\n+    S3URI uri = new S3URI(\"s3://bucket/path/to/seek.dat\");\n+    byte[] expected = randomData(1024 * 1024);\n+\n+    writeS3Data(uri, expected);\n+\n+    try (SeekableInputStream in = new S3InputStream(s3, uri)) {\n+      in.seek(expected.length / 2);\n+      byte[] actual = IOUtils.readFully(in, expected.length / 2);\n+      assertArrayEquals(Arrays.copyOfRange(expected, expected.length / 2, expected.length), actual);\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d2ae12190424e6822745b17d89f6396cde83f7ba"}, "originalPosition": 127}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1ff6188660a75032b5446d8f549d21e20ede478f", "author": {"user": {"login": "danielcweeks", "name": "Daniel Weeks"}}, "url": "https://github.com/apache/iceberg/commit/1ff6188660a75032b5446d8f549d21e20ede478f", "committedDate": "2020-11-06T18:45:02Z", "message": "Update S3URI implementation and address comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bca7c8fffa139e0b6769082297141e6b5167cb55", "author": {"user": {"login": "rdblue", "name": "Ryan Blue"}}, "url": "https://github.com/apache/iceberg/commit/bca7c8fffa139e0b6769082297141e6b5167cb55", "committedDate": "2020-11-06T19:00:30Z", "message": "Merge branch 'master' into s3fileio"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI1NDUyNTg1", "url": "https://github.com/apache/iceberg/pull/1573#pullrequestreview-525452585", "createdAt": "2020-11-06T20:00:06Z", "commit": {"oid": "bca7c8fffa139e0b6769082297141e6b5167cb55"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQyMDowMDowNlrOHu7pxg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQyMDowMDowNlrOHu7pxg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODk3Mzg5NA==", "bodyText": "At this point of time, I don't see much similarity between the input and output stream of PrestoS3FileSystem and the ones here. Should we still have this line in license?", "url": "https://github.com/apache/iceberg/pull/1573#discussion_r518973894", "createdAt": "2020-11-06T20:00:06Z", "author": {"login": "jackye1995"}, "path": "LICENSE", "diffHunk": "@@ -248,6 +248,8 @@ License: http://www.apache.org/licenses/LICENSE-2.0\n This product includes code from Presto.\n \n * Retry wait and jitter logic in Tasks.java\n+* S3FileIO logic derived from PrestoS3FileSystem.java in S3InputStream.java", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bca7c8fffa139e0b6769082297141e6b5167cb55"}, "originalPosition": 4}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "91cc94971df5df6764ed131ea4069e57f47fe2a4", "author": {"user": {"login": "danielcweeks", "name": "Daniel Weeks"}}, "url": "https://github.com/apache/iceberg/commit/91cc94971df5df6764ed131ea4069e57f47fe2a4", "committedDate": "2020-11-06T20:08:50Z", "message": "Fix errorprone check"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0847d4c34e6314f67e99487f92fb7b69ca9f48ab", "author": {"user": {"login": "danielcweeks", "name": "Daniel Weeks"}}, "url": "https://github.com/apache/iceberg/commit/0847d4c34e6314f67e99487f92fb7b69ca9f48ab", "committedDate": "2020-11-06T21:40:45Z", "message": "Fix checkstyle"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8ba2796fd778f99d8b451e2ace696dc4cf68a31c", "author": {"user": {"login": "danielcweeks", "name": "Daniel Weeks"}}, "url": "https://github.com/apache/iceberg/commit/8ba2796fd778f99d8b451e2ace696dc4cf68a31c", "committedDate": "2020-11-06T23:42:27Z", "message": "Checkstyle fixes"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI1NTc5NTk2", "url": "https://github.com/apache/iceberg/pull/1573#pullrequestreview-525579596", "createdAt": "2020-11-07T01:39:39Z", "commit": {"oid": "8ba2796fd778f99d8b451e2ace696dc4cf68a31c"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "42bed1eac6c482e78e05c6a09282f83c71e82b13", "author": {"user": {"login": "rdblue", "name": "Ryan Blue"}}, "url": "https://github.com/apache/iceberg/commit/42bed1eac6c482e78e05c6a09282f83c71e82b13", "committedDate": "2020-11-07T01:40:28Z", "message": "Merge branch 'master' into s3fileio"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3930, "cost": 1, "resetAt": "2021-10-29T19:57:52Z"}}}