{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ1MTcxMjIx", "number": 1174, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxMDoyNTo1NFrOEM1fRA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxNzoxNDo0NVrOEOWjsQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxODk0NzI0OnYy", "diffSide": "RIGHT", "path": "flink/src/test/java/org/apache/iceberg/flink/TestFlinkSchemaUtil.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxMDoyNTo1NFrOGvLKmQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QwMjozODo0NlrOGwZrqw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjExOTE5Mw==", "bodyText": "I'd prefer to provide some separate unit tests to address the conversion differences ( so that we won't regress).", "url": "https://github.com/apache/iceberg/pull/1174#discussion_r452119193", "createdAt": "2020-07-09T10:25:54Z", "author": {"login": "openinx"}, "path": "flink/src/test/java/org/apache/iceberg/flink/TestFlinkSchemaUtil.java", "diffHunk": "@@ -218,6 +218,24 @@ public void testListField() {\n             ))\n     );\n \n-    Assert.assertEquals(expectedSchema.asStruct(), actualSchema.asStruct());\n+    checkSchema(flinkSchema, icebergSchema);\n+  }\n+\n+  private void checkSchema(TableSchema flinkSchema, Schema icebergSchema) {\n+    Assert.assertEquals(icebergSchema.asStruct(), FlinkSchemaUtil.convert(flinkSchema).asStruct());\n+    // The conversion is not a 1:1 mapping, so we just check iceberg types.\n+    Assert.assertEquals(\n+        icebergSchema.asStruct(),\n+        FlinkSchemaUtil.convert(FlinkSchemaUtil.toSchema(FlinkSchemaUtil.convert(icebergSchema))).asStruct());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "884e7b4b568a44f637e7d83d90125e0933c1a823"}, "originalPosition": 91}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzQwNTYxMQ==", "bodyText": "I'll add tests for the conversion differences.", "url": "https://github.com/apache/iceberg/pull/1174#discussion_r453405611", "createdAt": "2020-07-13T02:38:46Z", "author": {"login": "JingsongLi"}, "path": "flink/src/test/java/org/apache/iceberg/flink/TestFlinkSchemaUtil.java", "diffHunk": "@@ -218,6 +218,24 @@ public void testListField() {\n             ))\n     );\n \n-    Assert.assertEquals(expectedSchema.asStruct(), actualSchema.asStruct());\n+    checkSchema(flinkSchema, icebergSchema);\n+  }\n+\n+  private void checkSchema(TableSchema flinkSchema, Schema icebergSchema) {\n+    Assert.assertEquals(icebergSchema.asStruct(), FlinkSchemaUtil.convert(flinkSchema).asStruct());\n+    // The conversion is not a 1:1 mapping, so we just check iceberg types.\n+    Assert.assertEquals(\n+        icebergSchema.asStruct(),\n+        FlinkSchemaUtil.convert(FlinkSchemaUtil.toSchema(FlinkSchemaUtil.convert(icebergSchema))).asStruct());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjExOTE5Mw=="}, "originalCommit": {"oid": "884e7b4b568a44f637e7d83d90125e0933c1a823"}, "originalPosition": 91}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzNDg1MTA1OnYy", "diffSide": "RIGHT", "path": "flink/src/main/java/org/apache/iceberg/flink/FlinkSchemaUtil.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxNzoxNDo0NVrOGxdUiA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQwMjowMjoxMVrOGxrd7g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDUxMzgwMA==", "bodyText": "Precision isn't lost for date/time types. It is always microseconds.", "url": "https://github.com/apache/iceberg/pull/1174#discussion_r454513800", "createdAt": "2020-07-14T17:14:45Z", "author": {"login": "rdblue"}, "path": "flink/src/main/java/org/apache/iceberg/flink/FlinkSchemaUtil.java", "diffHunk": "@@ -21,10 +21,30 @@\n \n import org.apache.flink.table.api.TableSchema;\n import org.apache.flink.table.types.FieldsDataType;\n+import org.apache.flink.table.types.logical.LogicalType;\n+import org.apache.flink.table.types.logical.RowType;\n+import org.apache.flink.table.types.utils.TypeConversions;\n import org.apache.iceberg.Schema;\n import org.apache.iceberg.relocated.com.google.common.base.Preconditions;\n import org.apache.iceberg.types.Type;\n+import org.apache.iceberg.types.TypeUtil;\n \n+/**\n+ * Converter between Flink types and Iceberg type.\n+ * The conversion is not a 1:1 mapping that not allows back-and-forth conversion. So some information might get lost\n+ * during the back-and-forth conversion.\n+ * <p>\n+ * This inconsistent types:\n+ * <ul>\n+ *   <li>map Iceberg UUID type to Flink BinaryType(16)</li>\n+ *   <li>map Flink VarCharType and CharType to Iceberg String type (lost precision)</li>\n+ *   <li>map Flink VarBinaryType to Iceberg Binary type (lost precision)</li>\n+ *   <li>map Flink TimeType to Iceberg Time type (lost precision)</li>\n+ *   <li>map Flink TimestampType to Iceberg Timestamp without zone type (lost precision)</li>\n+ *   <li>map Flink LocalZonedTimestampType to Iceberg Timestamp with zone type (lost precision)</li>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab99a29617544dd3f21c961d69e6319361f39e4f"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDc0NTU4Mg==", "bodyText": "Yes, I'll modify comments.", "url": "https://github.com/apache/iceberg/pull/1174#discussion_r454745582", "createdAt": "2020-07-15T02:02:11Z", "author": {"login": "JingsongLi"}, "path": "flink/src/main/java/org/apache/iceberg/flink/FlinkSchemaUtil.java", "diffHunk": "@@ -21,10 +21,30 @@\n \n import org.apache.flink.table.api.TableSchema;\n import org.apache.flink.table.types.FieldsDataType;\n+import org.apache.flink.table.types.logical.LogicalType;\n+import org.apache.flink.table.types.logical.RowType;\n+import org.apache.flink.table.types.utils.TypeConversions;\n import org.apache.iceberg.Schema;\n import org.apache.iceberg.relocated.com.google.common.base.Preconditions;\n import org.apache.iceberg.types.Type;\n+import org.apache.iceberg.types.TypeUtil;\n \n+/**\n+ * Converter between Flink types and Iceberg type.\n+ * The conversion is not a 1:1 mapping that not allows back-and-forth conversion. So some information might get lost\n+ * during the back-and-forth conversion.\n+ * <p>\n+ * This inconsistent types:\n+ * <ul>\n+ *   <li>map Iceberg UUID type to Flink BinaryType(16)</li>\n+ *   <li>map Flink VarCharType and CharType to Iceberg String type (lost precision)</li>\n+ *   <li>map Flink VarBinaryType to Iceberg Binary type (lost precision)</li>\n+ *   <li>map Flink TimeType to Iceberg Time type (lost precision)</li>\n+ *   <li>map Flink TimestampType to Iceberg Timestamp without zone type (lost precision)</li>\n+ *   <li>map Flink LocalZonedTimestampType to Iceberg Timestamp with zone type (lost precision)</li>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDUxMzgwMA=="}, "originalCommit": {"oid": "ab99a29617544dd3f21c961d69e6319361f39e4f"}, "originalPosition": 24}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3955, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}