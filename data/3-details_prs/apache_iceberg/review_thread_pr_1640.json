{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA3OTM2MTgw", "number": 1640, "reviewThreads": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQyMDo1ODo1M1rOEw8SDg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QwMTo1MzoyN1rOE0ob6w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5NzU0NzY2OnYy", "diffSide": "RIGHT", "path": "flink/src/main/java/org/apache/iceberg/flink/FlinkCatalogFactory.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQyMDo1ODo1M1rOHmzl3Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QxODowMjowMFrOHnYGpA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDQ1MzIxMw==", "bodyText": "NIT: Avoid hard code it", "url": "https://github.com/apache/iceberg/pull/1640#discussion_r510453213", "createdAt": "2020-10-22T20:58:53Z", "author": {"login": "giovannifumarola"}, "path": "flink/src/main/java/org/apache/iceberg/flink/FlinkCatalogFactory.java", "diffHunk": "@@ -79,6 +80,10 @@ protected CatalogLoader createCatalogLoader(String name, Map<String, String> pro\n         String warehouseLocation = properties.get(HADOOP_WAREHOUSE_LOCATION);\n         return CatalogLoader.hadoop(name, hadoopConf, warehouseLocation);\n \n+      case \"custom\":", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "17f1c5c17b7789778599b2d9f499fc47837a7806"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDQ5ODk1MQ==", "bodyText": "This is trying to be consistent with the other cases which also use hard-coded strings, both in Spark and Flink.", "url": "https://github.com/apache/iceberg/pull/1640#discussion_r510498951", "createdAt": "2020-10-22T22:43:49Z", "author": {"login": "jackye1995"}, "path": "flink/src/main/java/org/apache/iceberg/flink/FlinkCatalogFactory.java", "diffHunk": "@@ -79,6 +80,10 @@ protected CatalogLoader createCatalogLoader(String name, Map<String, String> pro\n         String warehouseLocation = properties.get(HADOOP_WAREHOUSE_LOCATION);\n         return CatalogLoader.hadoop(name, hadoopConf, warehouseLocation);\n \n+      case \"custom\":", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDQ1MzIxMw=="}, "originalCommit": {"oid": "17f1c5c17b7789778599b2d9f499fc47837a7806"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTA1MTQyOA==", "bodyText": "Maybe we should make them an Enum, which in general are preferred for using in switch statements. Also, I'm not sure if we make sure properties are lower case for this switch.", "url": "https://github.com/apache/iceberg/pull/1640#discussion_r511051428", "createdAt": "2020-10-23T18:02:00Z", "author": {"login": "edgarRd"}, "path": "flink/src/main/java/org/apache/iceberg/flink/FlinkCatalogFactory.java", "diffHunk": "@@ -79,6 +80,10 @@ protected CatalogLoader createCatalogLoader(String name, Map<String, String> pro\n         String warehouseLocation = properties.get(HADOOP_WAREHOUSE_LOCATION);\n         return CatalogLoader.hadoop(name, hadoopConf, warehouseLocation);\n \n+      case \"custom\":", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDQ1MzIxMw=="}, "originalCommit": {"oid": "17f1c5c17b7789778599b2d9f499fc47837a7806"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5NzU1NTgyOnYy", "diffSide": "RIGHT", "path": "flink/src/main/java/org/apache/iceberg/flink/CatalogLoader.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQyMTowMToxNVrOHmzq6w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQwMDoxNTozNVrOHqCDyg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDQ1NDUwNw==", "bodyText": "Maybe this method can be static and be called from other places.", "url": "https://github.com/apache/iceberg/pull/1640#discussion_r510454507", "createdAt": "2020-10-22T21:01:15Z", "author": {"login": "giovannifumarola"}, "path": "flink/src/main/java/org/apache/iceberg/flink/CatalogLoader.java", "diffHunk": "@@ -94,4 +100,47 @@ public String toString() {\n           .toString();\n     }\n   }\n+\n+  class CustomCatalogLoader implements CatalogLoader {\n+\n+    private final SerializableConfiguration hadoopConf;\n+    private final String name;\n+    private final String impl;\n+\n+    private CustomCatalogLoader(String name, Configuration conf, String impl) {\n+      this.hadoopConf = new SerializableConfiguration(conf);\n+      this.name = name;\n+      this.impl = Preconditions.checkNotNull(impl,\n+          \"Cannot initialize custom Catalog because impl property is not set\");\n+    }\n+\n+    @Override\n+    public Catalog loadCatalog() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "17f1c5c17b7789778599b2d9f499fc47837a7806"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDQ5ODcwMg==", "bodyText": "It implements the CatalogLoader interface and cannot be changed to static.", "url": "https://github.com/apache/iceberg/pull/1640#discussion_r510498702", "createdAt": "2020-10-22T22:43:04Z", "author": {"login": "jackye1995"}, "path": "flink/src/main/java/org/apache/iceberg/flink/CatalogLoader.java", "diffHunk": "@@ -94,4 +100,47 @@ public String toString() {\n           .toString();\n     }\n   }\n+\n+  class CustomCatalogLoader implements CatalogLoader {\n+\n+    private final SerializableConfiguration hadoopConf;\n+    private final String name;\n+    private final String impl;\n+\n+    private CustomCatalogLoader(String name, Configuration conf, String impl) {\n+      this.hadoopConf = new SerializableConfiguration(conf);\n+      this.name = name;\n+      this.impl = Preconditions.checkNotNull(impl,\n+          \"Cannot initialize custom Catalog because impl property is not set\");\n+    }\n+\n+    @Override\n+    public Catalog loadCatalog() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDQ1NDUwNw=="}, "originalCommit": {"oid": "17f1c5c17b7789778599b2d9f499fc47837a7806"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzExNjY4MA==", "bodyText": "What about using a static method in some other class in core? Maybe CatalogUtil.loadCatalog?", "url": "https://github.com/apache/iceberg/pull/1640#discussion_r513116680", "createdAt": "2020-10-28T00:54:02Z", "author": {"login": "rdblue"}, "path": "flink/src/main/java/org/apache/iceberg/flink/CatalogLoader.java", "diffHunk": "@@ -94,4 +100,47 @@ public String toString() {\n           .toString();\n     }\n   }\n+\n+  class CustomCatalogLoader implements CatalogLoader {\n+\n+    private final SerializableConfiguration hadoopConf;\n+    private final String name;\n+    private final String impl;\n+\n+    private CustomCatalogLoader(String name, Configuration conf, String impl) {\n+      this.hadoopConf = new SerializableConfiguration(conf);\n+      this.name = name;\n+      this.impl = Preconditions.checkNotNull(impl,\n+          \"Cannot initialize custom Catalog because impl property is not set\");\n+    }\n+\n+    @Override\n+    public Catalog loadCatalog() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDQ1NDUwNw=="}, "originalCommit": {"oid": "17f1c5c17b7789778599b2d9f499fc47837a7806"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzgzNTk3OA==", "bodyText": "Yeah sounds like a good idea to move the logic to a common util, let me do that", "url": "https://github.com/apache/iceberg/pull/1640#discussion_r513835978", "createdAt": "2020-10-29T00:15:35Z", "author": {"login": "jackye1995"}, "path": "flink/src/main/java/org/apache/iceberg/flink/CatalogLoader.java", "diffHunk": "@@ -94,4 +100,47 @@ public String toString() {\n           .toString();\n     }\n   }\n+\n+  class CustomCatalogLoader implements CatalogLoader {\n+\n+    private final SerializableConfiguration hadoopConf;\n+    private final String name;\n+    private final String impl;\n+\n+    private CustomCatalogLoader(String name, Configuration conf, String impl) {\n+      this.hadoopConf = new SerializableConfiguration(conf);\n+      this.name = name;\n+      this.impl = Preconditions.checkNotNull(impl,\n+          \"Cannot initialize custom Catalog because impl property is not set\");\n+    }\n+\n+    @Override\n+    public Catalog loadCatalog() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDQ1NDUwNw=="}, "originalCommit": {"oid": "17f1c5c17b7789778599b2d9f499fc47837a7806"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxNTAyNTMwOnYy", "diffSide": "RIGHT", "path": "flink/src/main/java/org/apache/iceberg/flink/CatalogLoader.java", "isResolved": true, "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQwMDo1NzoyMlrOHpWNyw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQyMDoyMTozMVrOHp77-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzExNzY0Mw==", "bodyText": "We definitely need an option to create a catalog without passing Configuration but still passing config properties. I originally thought that it would make sense to use another constructor, but then I thought about how name is passed... and I think the number of possible constructors may get out of hand.\nInstead of adding a lot of constructors, I think we should do this:\n\nUse a no-arg constructor for all catalogs\nAdd an initialize method to catalogs that is called to pass the catalog name and a string map of config (this matches what Spark does)\nIf the catalog implements Hadoop's Configurable interface, also call setConf to set the Hadoop config.\n\nThat way, we avoid having Configuration in any of our APIs and minimize the number of constructors that we need to support. What do you think, @jackye1995?", "url": "https://github.com/apache/iceberg/pull/1640#discussion_r513117643", "createdAt": "2020-10-28T00:57:22Z", "author": {"login": "rdblue"}, "path": "flink/src/main/java/org/apache/iceberg/flink/CatalogLoader.java", "diffHunk": "@@ -105,4 +113,54 @@ public String toString() {\n           .toString();\n     }\n   }\n+\n+  class CustomCatalogLoader implements CatalogLoader {\n+\n+    private final SerializableConfiguration hadoopConf;\n+    private final Map<String, String> properties;\n+    private final String name;\n+    private final String impl;\n+\n+    private CustomCatalogLoader(\n+        String name,\n+        Map<String, String> properties,\n+        Configuration conf,\n+        String impl) {\n+      this.hadoopConf = new SerializableConfiguration(conf);\n+      this.properties = new HashMap<>(properties); // use hashmap for serialization\n+      this.name = name;\n+      this.impl = Preconditions.checkNotNull(impl,\n+          \"Cannot initialize custom Catalog because impl property is not set\");\n+    }\n+\n+    @Override\n+    public Catalog loadCatalog() {\n+      DynConstructors.Ctor<Catalog> ctor;\n+      try {\n+        ctor = DynConstructors.builder(Catalog.class)\n+            .impl(impl, Map.class, Configuration.class) // take in flink properties and hadoop configs\n+            .impl(impl) // fall back to no-arg constructor", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b3997450a142d951915aae70474cef63d6ba4f9"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzEyMTk0OQ==", "bodyText": "Yes I am also thinking about this issue. Another way I am considering is to use a constructor that only takes a string map. Becasue Hadoop configuration implements the Iterable<Map.Entry<String, String>> interface, we can merge Spark or Flink properties with Hadoop configurations together and pass into the constructor in a single map. We can use a wrapper class for the merged map to ensure the names of those properties and config keys do not conflict.", "url": "https://github.com/apache/iceberg/pull/1640#discussion_r513121949", "createdAt": "2020-10-28T01:13:30Z", "author": {"login": "jackye1995"}, "path": "flink/src/main/java/org/apache/iceberg/flink/CatalogLoader.java", "diffHunk": "@@ -105,4 +113,54 @@ public String toString() {\n           .toString();\n     }\n   }\n+\n+  class CustomCatalogLoader implements CatalogLoader {\n+\n+    private final SerializableConfiguration hadoopConf;\n+    private final Map<String, String> properties;\n+    private final String name;\n+    private final String impl;\n+\n+    private CustomCatalogLoader(\n+        String name,\n+        Map<String, String> properties,\n+        Configuration conf,\n+        String impl) {\n+      this.hadoopConf = new SerializableConfiguration(conf);\n+      this.properties = new HashMap<>(properties); // use hashmap for serialization\n+      this.name = name;\n+      this.impl = Preconditions.checkNotNull(impl,\n+          \"Cannot initialize custom Catalog because impl property is not set\");\n+    }\n+\n+    @Override\n+    public Catalog loadCatalog() {\n+      DynConstructors.Ctor<Catalog> ctor;\n+      try {\n+        ctor = DynConstructors.builder(Catalog.class)\n+            .impl(impl, Map.class, Configuration.class) // take in flink properties and hadoop configs\n+            .impl(impl) // fall back to no-arg constructor", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzExNzY0Mw=="}, "originalCommit": {"oid": "1b3997450a142d951915aae70474cef63d6ba4f9"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzY1NzY0MQ==", "bodyText": "I don't think it is a good idea to pass a Configuration as a flattened map. Then it isn't possible to reconstruct the original Configuration without everything being an override. I think we should keep Configuration separate and discourage its use where it isn't needed for Hadoop classes used by Iceberg.", "url": "https://github.com/apache/iceberg/pull/1640#discussion_r513657641", "createdAt": "2020-10-28T18:06:06Z", "author": {"login": "rdblue"}, "path": "flink/src/main/java/org/apache/iceberg/flink/CatalogLoader.java", "diffHunk": "@@ -105,4 +113,54 @@ public String toString() {\n           .toString();\n     }\n   }\n+\n+  class CustomCatalogLoader implements CatalogLoader {\n+\n+    private final SerializableConfiguration hadoopConf;\n+    private final Map<String, String> properties;\n+    private final String name;\n+    private final String impl;\n+\n+    private CustomCatalogLoader(\n+        String name,\n+        Map<String, String> properties,\n+        Configuration conf,\n+        String impl) {\n+      this.hadoopConf = new SerializableConfiguration(conf);\n+      this.properties = new HashMap<>(properties); // use hashmap for serialization\n+      this.name = name;\n+      this.impl = Preconditions.checkNotNull(impl,\n+          \"Cannot initialize custom Catalog because impl property is not set\");\n+    }\n+\n+    @Override\n+    public Catalog loadCatalog() {\n+      DynConstructors.Ctor<Catalog> ctor;\n+      try {\n+        ctor = DynConstructors.builder(Catalog.class)\n+            .impl(impl, Map.class, Configuration.class) // take in flink properties and hadoop configs\n+            .impl(impl) // fall back to no-arg constructor", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzExNzY0Mw=="}, "originalCommit": {"oid": "1b3997450a142d951915aae70474cef63d6ba4f9"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzY1Nzc4NQ==", "bodyText": "Actually, ignore the last comment, I overlooked the fact that the HadoopIO still needs the Hadoop configuration object. So the iceberg-hive-metastore already provides a way to solve this, that is to dynamically construct a CatalogLoader object, and call loader.load(conf). (link)\nThis provides maximum flexibility, and allow each engine to have a different loader interface that takes different arguments in constructor. Flink already has one, and I can add another one for Spark.", "url": "https://github.com/apache/iceberg/pull/1640#discussion_r513657785", "createdAt": "2020-10-28T18:06:19Z", "author": {"login": "jackye1995"}, "path": "flink/src/main/java/org/apache/iceberg/flink/CatalogLoader.java", "diffHunk": "@@ -105,4 +113,54 @@ public String toString() {\n           .toString();\n     }\n   }\n+\n+  class CustomCatalogLoader implements CatalogLoader {\n+\n+    private final SerializableConfiguration hadoopConf;\n+    private final Map<String, String> properties;\n+    private final String name;\n+    private final String impl;\n+\n+    private CustomCatalogLoader(\n+        String name,\n+        Map<String, String> properties,\n+        Configuration conf,\n+        String impl) {\n+      this.hadoopConf = new SerializableConfiguration(conf);\n+      this.properties = new HashMap<>(properties); // use hashmap for serialization\n+      this.name = name;\n+      this.impl = Preconditions.checkNotNull(impl,\n+          \"Cannot initialize custom Catalog because impl property is not set\");\n+    }\n+\n+    @Override\n+    public Catalog loadCatalog() {\n+      DynConstructors.Ctor<Catalog> ctor;\n+      try {\n+        ctor = DynConstructors.builder(Catalog.class)\n+            .impl(impl, Map.class, Configuration.class) // take in flink properties and hadoop configs\n+            .impl(impl) // fall back to no-arg constructor", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzExNzY0Mw=="}, "originalCommit": {"oid": "1b3997450a142d951915aae70474cef63d6ba4f9"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzY4MDYwMg==", "bodyText": "I don't think it is a good idea to pass a Configuration as a flattened map. Then it isn't possible to reconstruct the original Configuration without everything being an override. I think we should keep Configuration separate and discourage its use where it isn't needed for Hadoop classes used by Iceberg.\n\nyeah I replied at the same time lol. Please take a look at the latest reply", "url": "https://github.com/apache/iceberg/pull/1640#discussion_r513680602", "createdAt": "2020-10-28T18:43:44Z", "author": {"login": "jackye1995"}, "path": "flink/src/main/java/org/apache/iceberg/flink/CatalogLoader.java", "diffHunk": "@@ -105,4 +113,54 @@ public String toString() {\n           .toString();\n     }\n   }\n+\n+  class CustomCatalogLoader implements CatalogLoader {\n+\n+    private final SerializableConfiguration hadoopConf;\n+    private final Map<String, String> properties;\n+    private final String name;\n+    private final String impl;\n+\n+    private CustomCatalogLoader(\n+        String name,\n+        Map<String, String> properties,\n+        Configuration conf,\n+        String impl) {\n+      this.hadoopConf = new SerializableConfiguration(conf);\n+      this.properties = new HashMap<>(properties); // use hashmap for serialization\n+      this.name = name;\n+      this.impl = Preconditions.checkNotNull(impl,\n+          \"Cannot initialize custom Catalog because impl property is not set\");\n+    }\n+\n+    @Override\n+    public Catalog loadCatalog() {\n+      DynConstructors.Ctor<Catalog> ctor;\n+      try {\n+        ctor = DynConstructors.builder(Catalog.class)\n+            .impl(impl, Map.class, Configuration.class) // take in flink properties and hadoop configs\n+            .impl(impl) // fall back to no-arg constructor", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzExNzY0Mw=="}, "originalCommit": {"oid": "1b3997450a142d951915aae70474cef63d6ba4f9"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzY5MTAwNw==", "bodyText": "I don't think that we want to use CatalogLoader. The use case for that is a bit different: it is for Hive, where Configuration is the correct way to pass options. That loader should call whatever dynamic loader function we introduce in this PR. I also think that it shouldn't be located in the iceberg-hive-metastore module. That should be in iceberg-mr.", "url": "https://github.com/apache/iceberg/pull/1640#discussion_r513691007", "createdAt": "2020-10-28T19:01:02Z", "author": {"login": "rdblue"}, "path": "flink/src/main/java/org/apache/iceberg/flink/CatalogLoader.java", "diffHunk": "@@ -105,4 +113,54 @@ public String toString() {\n           .toString();\n     }\n   }\n+\n+  class CustomCatalogLoader implements CatalogLoader {\n+\n+    private final SerializableConfiguration hadoopConf;\n+    private final Map<String, String> properties;\n+    private final String name;\n+    private final String impl;\n+\n+    private CustomCatalogLoader(\n+        String name,\n+        Map<String, String> properties,\n+        Configuration conf,\n+        String impl) {\n+      this.hadoopConf = new SerializableConfiguration(conf);\n+      this.properties = new HashMap<>(properties); // use hashmap for serialization\n+      this.name = name;\n+      this.impl = Preconditions.checkNotNull(impl,\n+          \"Cannot initialize custom Catalog because impl property is not set\");\n+    }\n+\n+    @Override\n+    public Catalog loadCatalog() {\n+      DynConstructors.Ctor<Catalog> ctor;\n+      try {\n+        ctor = DynConstructors.builder(Catalog.class)\n+            .impl(impl, Map.class, Configuration.class) // take in flink properties and hadoop configs\n+            .impl(impl) // fall back to no-arg constructor", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzExNzY0Mw=="}, "originalCommit": {"oid": "1b3997450a142d951915aae70474cef63d6ba4f9"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzcxNDE0MQ==", "bodyText": "Oh yes my typo, it's in iceberg-mr. So if my understanding is correct, we will have something like:\npublic class MyCatalog implements Catalog, Configurable {\n  \n  private Configuration conf;\n\n  public MyCatalog() {\n  }\n  \n  // need to add a default in Catalog interface\n  @Override\n  public void initialize(Map<String, String> options) {\n      // initialize logic\n  }\n  \n  @Override\n  public void setConf(Configuration conf) {\n    this.conf = conf;\n  }\n}\n\n// in SparkCatalog\nString impl = options.get(\"impl\");\nDynConstructors.Ctor<Catalog> ctor = DynConstructors.builder(Catalog.class)\n    .impl(impl) // fall back to no-arg constructor\n    .buildChecked();\nCatalog customCatalog = ctor.newInstance();\nif (customCatalog instanceof Configurable) {\n  ((Configurable) customCatalog).setConf(conf);\n}\ncustomCatalog.initialize(options);\nDoes this look good to you?", "url": "https://github.com/apache/iceberg/pull/1640#discussion_r513714141", "createdAt": "2020-10-28T19:42:46Z", "author": {"login": "jackye1995"}, "path": "flink/src/main/java/org/apache/iceberg/flink/CatalogLoader.java", "diffHunk": "@@ -105,4 +113,54 @@ public String toString() {\n           .toString();\n     }\n   }\n+\n+  class CustomCatalogLoader implements CatalogLoader {\n+\n+    private final SerializableConfiguration hadoopConf;\n+    private final Map<String, String> properties;\n+    private final String name;\n+    private final String impl;\n+\n+    private CustomCatalogLoader(\n+        String name,\n+        Map<String, String> properties,\n+        Configuration conf,\n+        String impl) {\n+      this.hadoopConf = new SerializableConfiguration(conf);\n+      this.properties = new HashMap<>(properties); // use hashmap for serialization\n+      this.name = name;\n+      this.impl = Preconditions.checkNotNull(impl,\n+          \"Cannot initialize custom Catalog because impl property is not set\");\n+    }\n+\n+    @Override\n+    public Catalog loadCatalog() {\n+      DynConstructors.Ctor<Catalog> ctor;\n+      try {\n+        ctor = DynConstructors.builder(Catalog.class)\n+            .impl(impl, Map.class, Configuration.class) // take in flink properties and hadoop configs\n+            .impl(impl) // fall back to no-arg constructor", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzExNzY0Mw=="}, "originalCommit": {"oid": "1b3997450a142d951915aae70474cef63d6ba4f9"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzczNTY3Mg==", "bodyText": "Mainly, yes. I think initialize should be initialize(String name, Map<String, String> options) so that we can set the name the catalog is configured to use.", "url": "https://github.com/apache/iceberg/pull/1640#discussion_r513735672", "createdAt": "2020-10-28T20:21:31Z", "author": {"login": "rdblue"}, "path": "flink/src/main/java/org/apache/iceberg/flink/CatalogLoader.java", "diffHunk": "@@ -105,4 +113,54 @@ public String toString() {\n           .toString();\n     }\n   }\n+\n+  class CustomCatalogLoader implements CatalogLoader {\n+\n+    private final SerializableConfiguration hadoopConf;\n+    private final Map<String, String> properties;\n+    private final String name;\n+    private final String impl;\n+\n+    private CustomCatalogLoader(\n+        String name,\n+        Map<String, String> properties,\n+        Configuration conf,\n+        String impl) {\n+      this.hadoopConf = new SerializableConfiguration(conf);\n+      this.properties = new HashMap<>(properties); // use hashmap for serialization\n+      this.name = name;\n+      this.impl = Preconditions.checkNotNull(impl,\n+          \"Cannot initialize custom Catalog because impl property is not set\");\n+    }\n+\n+    @Override\n+    public Catalog loadCatalog() {\n+      DynConstructors.Ctor<Catalog> ctor;\n+      try {\n+        ctor = DynConstructors.builder(Catalog.class)\n+            .impl(impl, Map.class, Configuration.class) // take in flink properties and hadoop configs\n+            .impl(impl) // fall back to no-arg constructor", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzExNzY0Mw=="}, "originalCommit": {"oid": "1b3997450a142d951915aae70474cef63d6ba4f9"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzNjE1MjQxOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/apache/iceberg/CatalogUtil.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QwMTowNDozOFrOHsdJkQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QwMTowNDozOFrOHsdJkQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjM3Njk3Nw==", "bodyText": "Nit: I would expect impl to come first to keep the configuration (name, options) together.", "url": "https://github.com/apache/iceberg/pull/1640#discussion_r516376977", "createdAt": "2020-11-03T01:04:38Z", "author": {"login": "rdblue"}, "path": "core/src/main/java/org/apache/iceberg/CatalogUtil.java", "diffHunk": "@@ -117,4 +122,45 @@ private static void deleteFiles(FileIO io, Set<ManifestFile> allManifests) {\n           }\n         });\n   }\n+\n+  /**\n+   * Load a custom catalog implementation.\n+   * The catalog must have a no-arg constructor.\n+   * If the catalog implements {@link org.apache.hadoop.conf.Configurable},\n+   * {@code Configurable.setConf(org.apache.hadoop.conf.Configuration conf)} is called to set Hadoop configuration.\n+   * {@code Catalog.initialize(String name, Map<String, String> options)} is called to complete the initialization.\n+   * @param catalogName catalog name\n+   * @param impl catalog implementation full class name\n+   * @param engineOptions configuration options from a compute engine like Spark or Flink to initialize the catalog\n+   * @param hadoopConf hadoop configuration if needed\n+   * @return initialized catalog object\n+   * @throws IllegalArgumentException if no-arg constructor not found or error during initialization\n+   */\n+  public static Catalog loadCustomCatalog(\n+      String catalogName,\n+      String impl,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c427e9875a27c4e52dcafa8e53ea0561234786db"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzNjE1MzU0OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/apache/iceberg/CatalogUtil.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QwMTowNDo1N1rOHsdKOg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QwMTowNDo1N1rOHsdKOg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjM3NzE0Ng==", "bodyText": "This may all fit on one line now.", "url": "https://github.com/apache/iceberg/pull/1640#discussion_r516377146", "createdAt": "2020-11-03T01:04:57Z", "author": {"login": "rdblue"}, "path": "core/src/main/java/org/apache/iceberg/CatalogUtil.java", "diffHunk": "@@ -117,4 +122,45 @@ private static void deleteFiles(FileIO io, Set<ManifestFile> allManifests) {\n           }\n         });\n   }\n+\n+  /**\n+   * Load a custom catalog implementation.\n+   * The catalog must have a no-arg constructor.\n+   * If the catalog implements {@link org.apache.hadoop.conf.Configurable},\n+   * {@code Configurable.setConf(org.apache.hadoop.conf.Configuration conf)} is called to set Hadoop configuration.\n+   * {@code Catalog.initialize(String name, Map<String, String> options)} is called to complete the initialization.\n+   * @param catalogName catalog name\n+   * @param impl catalog implementation full class name\n+   * @param engineOptions configuration options from a compute engine like Spark or Flink to initialize the catalog\n+   * @param hadoopConf hadoop configuration if needed\n+   * @return initialized catalog object\n+   * @throws IllegalArgumentException if no-arg constructor not found or error during initialization\n+   */\n+  public static Catalog loadCustomCatalog(\n+      String catalogName,\n+      String impl,\n+      Map<String, String> engineOptions,\n+      Configuration hadoopConf) {\n+    Preconditions.checkNotNull(impl, \"Cannot initialize custom Catalog because impl property is not set\");\n+    DynConstructors.Ctor<Catalog> ctor;\n+    try {\n+      ctor = DynConstructors.builder(Catalog.class)\n+          .impl(impl)\n+          .buildChecked();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c427e9875a27c4e52dcafa8e53ea0561234786db"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzNjE1NTcxOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/apache/iceberg/CatalogUtil.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QwMTowNTo0NFrOHsdLkw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QwMTowNTo0NFrOHsdLkw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjM3NzQ5MQ==", "bodyText": "Can we move configuration out of the try/catch block? It doesn't need to be there.", "url": "https://github.com/apache/iceberg/pull/1640#discussion_r516377491", "createdAt": "2020-11-03T01:05:44Z", "author": {"login": "rdblue"}, "path": "core/src/main/java/org/apache/iceberg/CatalogUtil.java", "diffHunk": "@@ -117,4 +122,45 @@ private static void deleteFiles(FileIO io, Set<ManifestFile> allManifests) {\n           }\n         });\n   }\n+\n+  /**\n+   * Load a custom catalog implementation.\n+   * The catalog must have a no-arg constructor.\n+   * If the catalog implements {@link org.apache.hadoop.conf.Configurable},\n+   * {@code Configurable.setConf(org.apache.hadoop.conf.Configuration conf)} is called to set Hadoop configuration.\n+   * {@code Catalog.initialize(String name, Map<String, String> options)} is called to complete the initialization.\n+   * @param catalogName catalog name\n+   * @param impl catalog implementation full class name\n+   * @param engineOptions configuration options from a compute engine like Spark or Flink to initialize the catalog\n+   * @param hadoopConf hadoop configuration if needed\n+   * @return initialized catalog object\n+   * @throws IllegalArgumentException if no-arg constructor not found or error during initialization\n+   */\n+  public static Catalog loadCustomCatalog(\n+      String catalogName,\n+      String impl,\n+      Map<String, String> engineOptions,\n+      Configuration hadoopConf) {\n+    Preconditions.checkNotNull(impl, \"Cannot initialize custom Catalog because impl property is not set\");\n+    DynConstructors.Ctor<Catalog> ctor;\n+    try {\n+      ctor = DynConstructors.builder(Catalog.class)\n+          .impl(impl)\n+          .buildChecked();\n+    } catch (NoSuchMethodException e) {\n+      throw new IllegalArgumentException(String.format(\n+          \"Cannot initialize Catalog, please make sure %s has a no-arg constructor\", impl), e);\n+    }\n+    try {\n+      Catalog catalog = ctor.newInstance();\n+      if (catalog instanceof Configurable) {\n+        ((Configurable) catalog).setConf(hadoopConf);\n+      }\n+      catalog.initialize(catalogName, engineOptions);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c427e9875a27c4e52dcafa8e53ea0561234786db"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzNjIyOTk0OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/apache/iceberg/CatalogUtil.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QwMTo0ODozNVrOHsd0vQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QwMTo0ODozNVrOHsd0vQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjM4ODAyOQ==", "bodyText": "The name engineOptions seems too specific because it assumes that the caller is an engine. But it could be a user of the API that isn't an engine. I think config or properties would be a better name.", "url": "https://github.com/apache/iceberg/pull/1640#discussion_r516388029", "createdAt": "2020-11-03T01:48:35Z", "author": {"login": "rdblue"}, "path": "core/src/main/java/org/apache/iceberg/CatalogUtil.java", "diffHunk": "@@ -117,4 +122,45 @@ private static void deleteFiles(FileIO io, Set<ManifestFile> allManifests) {\n           }\n         });\n   }\n+\n+  /**\n+   * Load a custom catalog implementation.\n+   * The catalog must have a no-arg constructor.\n+   * If the catalog implements {@link org.apache.hadoop.conf.Configurable},\n+   * {@code Configurable.setConf(org.apache.hadoop.conf.Configuration conf)} is called to set Hadoop configuration.\n+   * {@code Catalog.initialize(String name, Map<String, String> options)} is called to complete the initialization.\n+   * @param catalogName catalog name\n+   * @param impl catalog implementation full class name\n+   * @param engineOptions configuration options from a compute engine like Spark or Flink to initialize the catalog\n+   * @param hadoopConf hadoop configuration if needed\n+   * @return initialized catalog object\n+   * @throws IllegalArgumentException if no-arg constructor not found or error during initialization\n+   */\n+  public static Catalog loadCustomCatalog(\n+      String catalogName,\n+      String impl,\n+      Map<String, String> engineOptions,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c427e9875a27c4e52dcafa8e53ea0561234786db"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzNjIzNDEyOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/apache/iceberg/CatalogUtil.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QwMTo1MDoyNVrOHsd2-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QwMTo1MDoyNVrOHsd2-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjM4ODYwMA==", "bodyText": "Minor: I tend to opt for removing words that aren't needed, so I would remove \"custom\" from here. I think that's pretty much implied by loading an implementation class.", "url": "https://github.com/apache/iceberg/pull/1640#discussion_r516388600", "createdAt": "2020-11-03T01:50:25Z", "author": {"login": "rdblue"}, "path": "core/src/main/java/org/apache/iceberg/CatalogUtil.java", "diffHunk": "@@ -117,4 +122,45 @@ private static void deleteFiles(FileIO io, Set<ManifestFile> allManifests) {\n           }\n         });\n   }\n+\n+  /**\n+   * Load a custom catalog implementation.\n+   * The catalog must have a no-arg constructor.\n+   * If the catalog implements {@link org.apache.hadoop.conf.Configurable},\n+   * {@code Configurable.setConf(org.apache.hadoop.conf.Configuration conf)} is called to set Hadoop configuration.\n+   * {@code Catalog.initialize(String name, Map<String, String> options)} is called to complete the initialization.\n+   * @param catalogName catalog name\n+   * @param impl catalog implementation full class name\n+   * @param engineOptions configuration options from a compute engine like Spark or Flink to initialize the catalog\n+   * @param hadoopConf hadoop configuration if needed\n+   * @return initialized catalog object\n+   * @throws IllegalArgumentException if no-arg constructor not found or error during initialization\n+   */\n+  public static Catalog loadCustomCatalog(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c427e9875a27c4e52dcafa8e53ea0561234786db"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzNjIzNjQ4OnYy", "diffSide": "RIGHT", "path": "flink/src/main/java/org/apache/iceberg/flink/FlinkCatalogFactory.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QwMTo1MTo1MFrOHsd4SQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QwMzo1MDoxMlrOHsfdnQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjM4ODkzNw==", "bodyText": "Instead of using type=custom and impl=com.example.Catalog, why not just combine them into type=com.example.Catalog. We can try to load the type as an implementation class if it isn't a well-known name like \"hive\".", "url": "https://github.com/apache/iceberg/pull/1640#discussion_r516388937", "createdAt": "2020-11-03T01:51:50Z", "author": {"login": "rdblue"}, "path": "flink/src/main/java/org/apache/iceberg/flink/FlinkCatalogFactory.java", "diffHunk": "@@ -58,13 +59,19 @@\n \n   // Can not just use \"type\", it conflicts with CATALOG_TYPE.\n   public static final String ICEBERG_CATALOG_TYPE = \"catalog-type\";\n+  public static final String ICEBERG_CATALOG_TYPE_HADOOP = \"hadoop\";\n+  public static final String ICEBERG_CATALOG_TYPE_HIVE = \"hive\";\n+  public static final String ICEBERG_CATALOG_TYPE_CUSTOM = \"custom\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c427e9875a27c4e52dcafa8e53ea0561234786db"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjM4OTQ5Ng==", "bodyText": "@aokolnychyi and @RussellSpitzer, do you have an opinion here?", "url": "https://github.com/apache/iceberg/pull/1640#discussion_r516389496", "createdAt": "2020-11-03T01:54:12Z", "author": {"login": "rdblue"}, "path": "flink/src/main/java/org/apache/iceberg/flink/FlinkCatalogFactory.java", "diffHunk": "@@ -58,13 +59,19 @@\n \n   // Can not just use \"type\", it conflicts with CATALOG_TYPE.\n   public static final String ICEBERG_CATALOG_TYPE = \"catalog-type\";\n+  public static final String ICEBERG_CATALOG_TYPE_HADOOP = \"hadoop\";\n+  public static final String ICEBERG_CATALOG_TYPE_HIVE = \"hive\";\n+  public static final String ICEBERG_CATALOG_TYPE_CUSTOM = \"custom\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjM4ODkzNw=="}, "originalCommit": {"oid": "c427e9875a27c4e52dcafa8e53ea0561234786db"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjQxNDg3Nw==", "bodyText": "Yeah this sounds like a cleaner way to go, the only disadvantage is that we are overloading the term type. I have updated the code.", "url": "https://github.com/apache/iceberg/pull/1640#discussion_r516414877", "createdAt": "2020-11-03T03:50:12Z", "author": {"login": "jackye1995"}, "path": "flink/src/main/java/org/apache/iceberg/flink/FlinkCatalogFactory.java", "diffHunk": "@@ -58,13 +59,19 @@\n \n   // Can not just use \"type\", it conflicts with CATALOG_TYPE.\n   public static final String ICEBERG_CATALOG_TYPE = \"catalog-type\";\n+  public static final String ICEBERG_CATALOG_TYPE_HADOOP = \"hadoop\";\n+  public static final String ICEBERG_CATALOG_TYPE_HIVE = \"hive\";\n+  public static final String ICEBERG_CATALOG_TYPE_CUSTOM = \"custom\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjM4ODkzNw=="}, "originalCommit": {"oid": "c427e9875a27c4e52dcafa8e53ea0561234786db"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzNjIzOTE1OnYy", "diffSide": "RIGHT", "path": "spark2/src/main/java/org/apache/iceberg/spark/source/IcebergSource.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QwMTo1MzoyN1rOHsd5tA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QwMTo1MzoyN1rOHsd5tA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjM4OTMwMA==", "bodyText": "I think we shouldn't change the behavior of IcebergSource in this PR. We want to change how this source works and route queries through a catalog, but I'm not sure that using impl is the right way to do it. Let's stick with HiveCatalogs for now and revisit this in a follow up.", "url": "https://github.com/apache/iceberg/pull/1640#discussion_r516389300", "createdAt": "2020-11-03T01:53:27Z", "author": {"login": "rdblue"}, "path": "spark2/src/main/java/org/apache/iceberg/spark/source/IcebergSource.java", "diffHunk": "@@ -137,9 +138,11 @@ protected Table findTable(DataSourceOptions options, Configuration conf) {\n       HadoopTables tables = new HadoopTables(conf);\n       return tables.load(path.get());\n     } else {\n-      HiveCatalog hiveCatalog = HiveCatalogs.loadCatalog(conf);\n+      Catalog catalog = options.get(\"impl\")\n+          .map(impl -> CatalogUtil.loadCustomCatalog(\"custom\", impl, options.asMap(), conf))\n+          .orElseGet(() -> HiveCatalogs.loadCatalog(conf));\n       TableIdentifier tableIdentifier = TableIdentifier.parse(path.get());\n-      return hiveCatalog.loadTable(tableIdentifier);\n+      return catalog.loadTable(tableIdentifier);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c427e9875a27c4e52dcafa8e53ea0561234786db"}, "originalPosition": 25}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3623, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}