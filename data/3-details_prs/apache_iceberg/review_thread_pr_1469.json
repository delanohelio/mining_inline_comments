{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg4MzM5NTE5", "number": 1469, "reviewThreads": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxNTo0MTo1OVrOEqYE-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxNjoxOTozNVrOEqZBAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyODcwMTM5OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/apache/iceberg/OverwriteFiles.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxNTo0MTo1OVrOHci8WA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQwMDo0MToyNFrOHcyQsw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTY5NDY4MA==", "bodyText": "What should be our long-term strategy for handling case sensitivity in APIs like this? The current way is not consistent and we use default values in a lot of cases. There are two methods in this API that accept expressions. Does it mean that each of them will have an extra parameter? Will it make sense to expose a method in a parent class/interface that would configure case sensitivity for all methods?", "url": "https://github.com/apache/iceberg/pull/1469#discussion_r499694680", "createdAt": "2020-10-05T15:41:59Z", "author": {"login": "aokolnychyi"}, "path": "api/src/main/java/org/apache/iceberg/OverwriteFiles.java", "diffHunk": "@@ -87,6 +87,36 @@\n    */\n   OverwriteFiles validateAddedFilesMatchOverwriteFilter();\n \n+  /**\n+   * Set the snapshot ID used in any reads for this operation.\n+   * <p>\n+   * Validations will check changes after this snapshot ID.\n+   *\n+   * @param snapshotId a snapshot ID\n+   * @return this for method chaining\n+   */\n+  OverwriteFiles validateFromSnapshot(long snapshotId);\n+\n+  /**\n+   * Enables validation that files added concurrently do not conflict with this commit's operation.\n+   * <p>\n+   * This method should be called when the table is queried to determine which files to delete/append.\n+   * If a concurrent operation commits a new file after the data was read and that file might\n+   * contain rows matching the specified conflict detection filter, the overwrite operation\n+   * will detect this during retries and fail.\n+   * <p>\n+   * Calling this method with a correct conflict detection filter is required to maintain\n+   * serializable isolation for eager update/delete operations. Otherwise, the isolation level\n+   * will be snapshot isolation.\n+   * <p>\n+   * Validation applies to files added to the table since the snapshot passed to {@link #validateFromSnapshot(long)}.\n+   *\n+   * @param conflictDetectionFilter an expression on rows in the table\n+   * @param isCaseSensitive whether conflict detection filter evaluation should be case sensitive\n+   * @return this for method chaining\n+   */\n+  OverwriteFiles validateNoConflictingAppends(Expression conflictDetectionFilter, boolean isCaseSensitive);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7a6c371b00fa8661cc4f268090f9ef690b12db4f"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTczMjk4Mw==", "bodyText": "Good catch. I think we should have a caseSensitive(boolean) method that is called separately. That should be configured once per operation, not for each validation option.", "url": "https://github.com/apache/iceberg/pull/1469#discussion_r499732983", "createdAt": "2020-10-05T16:42:39Z", "author": {"login": "rdblue"}, "path": "api/src/main/java/org/apache/iceberg/OverwriteFiles.java", "diffHunk": "@@ -87,6 +87,36 @@\n    */\n   OverwriteFiles validateAddedFilesMatchOverwriteFilter();\n \n+  /**\n+   * Set the snapshot ID used in any reads for this operation.\n+   * <p>\n+   * Validations will check changes after this snapshot ID.\n+   *\n+   * @param snapshotId a snapshot ID\n+   * @return this for method chaining\n+   */\n+  OverwriteFiles validateFromSnapshot(long snapshotId);\n+\n+  /**\n+   * Enables validation that files added concurrently do not conflict with this commit's operation.\n+   * <p>\n+   * This method should be called when the table is queried to determine which files to delete/append.\n+   * If a concurrent operation commits a new file after the data was read and that file might\n+   * contain rows matching the specified conflict detection filter, the overwrite operation\n+   * will detect this during retries and fail.\n+   * <p>\n+   * Calling this method with a correct conflict detection filter is required to maintain\n+   * serializable isolation for eager update/delete operations. Otherwise, the isolation level\n+   * will be snapshot isolation.\n+   * <p>\n+   * Validation applies to files added to the table since the snapshot passed to {@link #validateFromSnapshot(long)}.\n+   *\n+   * @param conflictDetectionFilter an expression on rows in the table\n+   * @param isCaseSensitive whether conflict detection filter evaluation should be case sensitive\n+   * @return this for method chaining\n+   */\n+  OverwriteFiles validateNoConflictingAppends(Expression conflictDetectionFilter, boolean isCaseSensitive);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTY5NDY4MA=="}, "originalCommit": {"oid": "7a6c371b00fa8661cc4f268090f9ef690b12db4f"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTk0NTY1MQ==", "bodyText": "Added caseSensitive(boolean).", "url": "https://github.com/apache/iceberg/pull/1469#discussion_r499945651", "createdAt": "2020-10-06T00:41:24Z", "author": {"login": "rdblue"}, "path": "api/src/main/java/org/apache/iceberg/OverwriteFiles.java", "diffHunk": "@@ -87,6 +87,36 @@\n    */\n   OverwriteFiles validateAddedFilesMatchOverwriteFilter();\n \n+  /**\n+   * Set the snapshot ID used in any reads for this operation.\n+   * <p>\n+   * Validations will check changes after this snapshot ID.\n+   *\n+   * @param snapshotId a snapshot ID\n+   * @return this for method chaining\n+   */\n+  OverwriteFiles validateFromSnapshot(long snapshotId);\n+\n+  /**\n+   * Enables validation that files added concurrently do not conflict with this commit's operation.\n+   * <p>\n+   * This method should be called when the table is queried to determine which files to delete/append.\n+   * If a concurrent operation commits a new file after the data was read and that file might\n+   * contain rows matching the specified conflict detection filter, the overwrite operation\n+   * will detect this during retries and fail.\n+   * <p>\n+   * Calling this method with a correct conflict detection filter is required to maintain\n+   * serializable isolation for eager update/delete operations. Otherwise, the isolation level\n+   * will be snapshot isolation.\n+   * <p>\n+   * Validation applies to files added to the table since the snapshot passed to {@link #validateFromSnapshot(long)}.\n+   *\n+   * @param conflictDetectionFilter an expression on rows in the table\n+   * @param isCaseSensitive whether conflict detection filter evaluation should be case sensitive\n+   * @return this for method chaining\n+   */\n+  OverwriteFiles validateNoConflictingAppends(Expression conflictDetectionFilter, boolean isCaseSensitive);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTY5NDY4MA=="}, "originalCommit": {"oid": "7a6c371b00fa8661cc4f268090f9ef690b12db4f"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyODcyMDczOnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/apache/iceberg/OverwriteFiles.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxNTo0NjozNlrOHcjIYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQwMDo0Mzo1NVrOHcyTSw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTY5Nzc2Mw==", "bodyText": "Should we document what happens if the user calls validateNoConflictingAppends without this one? Will we validate each snapshot in the table?", "url": "https://github.com/apache/iceberg/pull/1469#discussion_r499697763", "createdAt": "2020-10-05T15:46:36Z", "author": {"login": "aokolnychyi"}, "path": "api/src/main/java/org/apache/iceberg/OverwriteFiles.java", "diffHunk": "@@ -87,6 +87,36 @@\n    */\n   OverwriteFiles validateAddedFilesMatchOverwriteFilter();\n \n+  /**\n+   * Set the snapshot ID used in any reads for this operation.\n+   * <p>\n+   * Validations will check changes after this snapshot ID.\n+   *\n+   * @param snapshotId a snapshot ID\n+   * @return this for method chaining\n+   */\n+  OverwriteFiles validateFromSnapshot(long snapshotId);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7a6c371b00fa8661cc4f268090f9ef690b12db4f"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTczMTg2NQ==", "bodyText": "Yes, it would apply to the entire table history and fail if a snapshot is missing.", "url": "https://github.com/apache/iceberg/pull/1469#discussion_r499731865", "createdAt": "2020-10-05T16:40:44Z", "author": {"login": "rdblue"}, "path": "api/src/main/java/org/apache/iceberg/OverwriteFiles.java", "diffHunk": "@@ -87,6 +87,36 @@\n    */\n   OverwriteFiles validateAddedFilesMatchOverwriteFilter();\n \n+  /**\n+   * Set the snapshot ID used in any reads for this operation.\n+   * <p>\n+   * Validations will check changes after this snapshot ID.\n+   *\n+   * @param snapshotId a snapshot ID\n+   * @return this for method chaining\n+   */\n+  OverwriteFiles validateFromSnapshot(long snapshotId);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTY5Nzc2Mw=="}, "originalCommit": {"oid": "7a6c371b00fa8661cc4f268090f9ef690b12db4f"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTk0NjMxNQ==", "bodyText": "Added \"If the from snapshot is not set, all ancestor snapshots through the table's initial snapshot are validated.\"", "url": "https://github.com/apache/iceberg/pull/1469#discussion_r499946315", "createdAt": "2020-10-06T00:43:55Z", "author": {"login": "rdblue"}, "path": "api/src/main/java/org/apache/iceberg/OverwriteFiles.java", "diffHunk": "@@ -87,6 +87,36 @@\n    */\n   OverwriteFiles validateAddedFilesMatchOverwriteFilter();\n \n+  /**\n+   * Set the snapshot ID used in any reads for this operation.\n+   * <p>\n+   * Validations will check changes after this snapshot ID.\n+   *\n+   * @param snapshotId a snapshot ID\n+   * @return this for method chaining\n+   */\n+  OverwriteFiles validateFromSnapshot(long snapshotId);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTY5Nzc2Mw=="}, "originalCommit": {"oid": "7a6c371b00fa8661cc4f268090f9ef690b12db4f"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyODcyNDc0OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/apache/iceberg/RowDelta.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxNTo0NzozNFrOHcjK4A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxNTo0NzozNFrOHcjK4A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTY5ODQwMA==", "bodyText": "Here as well.", "url": "https://github.com/apache/iceberg/pull/1469#discussion_r499698400", "createdAt": "2020-10-05T15:47:34Z", "author": {"login": "aokolnychyi"}, "path": "api/src/main/java/org/apache/iceberg/RowDelta.java", "diffHunk": "@@ -44,4 +46,61 @@\n    * @return this for method chaining\n    */\n   RowDelta addDeletes(DeleteFile deletes);\n+\n+  /**\n+   * Set the snapshot ID used in any reads for this operation.\n+   * <p>\n+   * Validations will check changes after this snapshot ID.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7a6c371b00fa8661cc4f268090f9ef690b12db4f"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyODc0MjE5OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/apache/iceberg/MergingSnapshotProducer.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxNTo1MTo0M1rOHcjV8w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQwMDo0NjoyNFrOHcyVow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTcwMTIzNQ==", "bodyText": "Can currentSnapshot be null if we start on an empty table?", "url": "https://github.com/apache/iceberg/pull/1469#discussion_r499701235", "createdAt": "2020-10-05T15:51:43Z", "author": {"login": "aokolnychyi"}, "path": "core/src/main/java/org/apache/iceberg/MergingSnapshotProducer.java", "diffHunk": "@@ -202,6 +207,58 @@ private ManifestFile copyManifest(ManifestFile manifest) {\n         current.formatVersion(), toCopy, current.specsById(), newManifestPath, snapshotId(), appendedManifestsSummary);\n   }\n \n+  /**\n+   * Validates that no files matching a filter have been added to the table since a starting snapshot.\n+   *\n+   * @param base table metadata to validate\n+   * @param startingSnapshotId id of the snapshot current at the start of the operation\n+   * @param conflictDetectionFilter an expression used to find new conflicting data files\n+   * @param caseSensitive whether expression evaluation should be case sensitive\n+   */\n+  protected void validateAddedDataFiles(TableMetadata base, Long startingSnapshotId,\n+                                        Expression conflictDetectionFilter, boolean caseSensitive) {\n+    List<ManifestFile> manifests = Lists.newArrayList();\n+    Set<Long> newSnapshots = Sets.newHashSet();\n+\n+    Long currentSnapshotId = base.currentSnapshot().snapshotId();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7a6c371b00fa8661cc4f268090f9ef690b12db4f"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTcxMzYyMw==", "bodyText": "I think we validate this one level above.", "url": "https://github.com/apache/iceberg/pull/1469#discussion_r499713623", "createdAt": "2020-10-05T16:10:35Z", "author": {"login": "aokolnychyi"}, "path": "core/src/main/java/org/apache/iceberg/MergingSnapshotProducer.java", "diffHunk": "@@ -202,6 +207,58 @@ private ManifestFile copyManifest(ManifestFile manifest) {\n         current.formatVersion(), toCopy, current.specsById(), newManifestPath, snapshotId(), appendedManifestsSummary);\n   }\n \n+  /**\n+   * Validates that no files matching a filter have been added to the table since a starting snapshot.\n+   *\n+   * @param base table metadata to validate\n+   * @param startingSnapshotId id of the snapshot current at the start of the operation\n+   * @param conflictDetectionFilter an expression used to find new conflicting data files\n+   * @param caseSensitive whether expression evaluation should be case sensitive\n+   */\n+  protected void validateAddedDataFiles(TableMetadata base, Long startingSnapshotId,\n+                                        Expression conflictDetectionFilter, boolean caseSensitive) {\n+    List<ManifestFile> manifests = Lists.newArrayList();\n+    Set<Long> newSnapshots = Sets.newHashSet();\n+\n+    Long currentSnapshotId = base.currentSnapshot().snapshotId();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTcwMTIzNQ=="}, "originalCommit": {"oid": "7a6c371b00fa8661cc4f268090f9ef690b12db4f"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTczMTM1OQ==", "bodyText": "Yes, we do.", "url": "https://github.com/apache/iceberg/pull/1469#discussion_r499731359", "createdAt": "2020-10-05T16:39:53Z", "author": {"login": "rdblue"}, "path": "core/src/main/java/org/apache/iceberg/MergingSnapshotProducer.java", "diffHunk": "@@ -202,6 +207,58 @@ private ManifestFile copyManifest(ManifestFile manifest) {\n         current.formatVersion(), toCopy, current.specsById(), newManifestPath, snapshotId(), appendedManifestsSummary);\n   }\n \n+  /**\n+   * Validates that no files matching a filter have been added to the table since a starting snapshot.\n+   *\n+   * @param base table metadata to validate\n+   * @param startingSnapshotId id of the snapshot current at the start of the operation\n+   * @param conflictDetectionFilter an expression used to find new conflicting data files\n+   * @param caseSensitive whether expression evaluation should be case sensitive\n+   */\n+  protected void validateAddedDataFiles(TableMetadata base, Long startingSnapshotId,\n+                                        Expression conflictDetectionFilter, boolean caseSensitive) {\n+    List<ManifestFile> manifests = Lists.newArrayList();\n+    Set<Long> newSnapshots = Sets.newHashSet();\n+\n+    Long currentSnapshotId = base.currentSnapshot().snapshotId();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTcwMTIzNQ=="}, "originalCommit": {"oid": "7a6c371b00fa8661cc4f268090f9ef690b12db4f"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTk0NjkxNQ==", "bodyText": "I'm adding an additional check since this can return early instead of failing if the caller forgets to do this.", "url": "https://github.com/apache/iceberg/pull/1469#discussion_r499946915", "createdAt": "2020-10-06T00:46:24Z", "author": {"login": "rdblue"}, "path": "core/src/main/java/org/apache/iceberg/MergingSnapshotProducer.java", "diffHunk": "@@ -202,6 +207,58 @@ private ManifestFile copyManifest(ManifestFile manifest) {\n         current.formatVersion(), toCopy, current.specsById(), newManifestPath, snapshotId(), appendedManifestsSummary);\n   }\n \n+  /**\n+   * Validates that no files matching a filter have been added to the table since a starting snapshot.\n+   *\n+   * @param base table metadata to validate\n+   * @param startingSnapshotId id of the snapshot current at the start of the operation\n+   * @param conflictDetectionFilter an expression used to find new conflicting data files\n+   * @param caseSensitive whether expression evaluation should be case sensitive\n+   */\n+  protected void validateAddedDataFiles(TableMetadata base, Long startingSnapshotId,\n+                                        Expression conflictDetectionFilter, boolean caseSensitive) {\n+    List<ManifestFile> manifests = Lists.newArrayList();\n+    Set<Long> newSnapshots = Sets.newHashSet();\n+\n+    Long currentSnapshotId = base.currentSnapshot().snapshotId();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTcwMTIzNQ=="}, "originalCommit": {"oid": "7a6c371b00fa8661cc4f268090f9ef690b12db4f"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyODc1MTM5OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/apache/iceberg/MergingSnapshotProducer.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxNTo1Mzo1N1rOHcjbqw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQwMDo1NDoyNFrOHcyddg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTcwMjY5OQ==", "bodyText": "Not something we have to address in this PR but I've created #1547 recently. I think we should ignore rewrite snapshots during this validation.", "url": "https://github.com/apache/iceberg/pull/1469#discussion_r499702699", "createdAt": "2020-10-05T15:53:57Z", "author": {"login": "aokolnychyi"}, "path": "core/src/main/java/org/apache/iceberg/MergingSnapshotProducer.java", "diffHunk": "@@ -202,6 +207,58 @@ private ManifestFile copyManifest(ManifestFile manifest) {\n         current.formatVersion(), toCopy, current.specsById(), newManifestPath, snapshotId(), appendedManifestsSummary);\n   }\n \n+  /**\n+   * Validates that no files matching a filter have been added to the table since a starting snapshot.\n+   *\n+   * @param base table metadata to validate\n+   * @param startingSnapshotId id of the snapshot current at the start of the operation\n+   * @param conflictDetectionFilter an expression used to find new conflicting data files\n+   * @param caseSensitive whether expression evaluation should be case sensitive\n+   */\n+  protected void validateAddedDataFiles(TableMetadata base, Long startingSnapshotId,\n+                                        Expression conflictDetectionFilter, boolean caseSensitive) {\n+    List<ManifestFile> manifests = Lists.newArrayList();\n+    Set<Long> newSnapshots = Sets.newHashSet();\n+\n+    Long currentSnapshotId = base.currentSnapshot().snapshotId();\n+    while (currentSnapshotId != null && !currentSnapshotId.equals(startingSnapshotId)) {\n+      Snapshot currentSnapshot = ops.current().snapshot(currentSnapshotId);\n+\n+      ValidationException.check(currentSnapshot != null,\n+          \"Cannot determine history between starting snapshot %s and current %s\",\n+          startingSnapshotId, currentSnapshotId);\n+\n+      newSnapshots.add(currentSnapshotId);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7a6c371b00fa8661cc4f268090f9ef690b12db4f"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTcyODkyMg==", "bodyText": "Actually, we already have this extra logic while validating deletes, so may make sense to add in this PR if not too much trouble.", "url": "https://github.com/apache/iceberg/pull/1469#discussion_r499728922", "createdAt": "2020-10-05T16:35:36Z", "author": {"login": "aokolnychyi"}, "path": "core/src/main/java/org/apache/iceberg/MergingSnapshotProducer.java", "diffHunk": "@@ -202,6 +207,58 @@ private ManifestFile copyManifest(ManifestFile manifest) {\n         current.formatVersion(), toCopy, current.specsById(), newManifestPath, snapshotId(), appendedManifestsSummary);\n   }\n \n+  /**\n+   * Validates that no files matching a filter have been added to the table since a starting snapshot.\n+   *\n+   * @param base table metadata to validate\n+   * @param startingSnapshotId id of the snapshot current at the start of the operation\n+   * @param conflictDetectionFilter an expression used to find new conflicting data files\n+   * @param caseSensitive whether expression evaluation should be case sensitive\n+   */\n+  protected void validateAddedDataFiles(TableMetadata base, Long startingSnapshotId,\n+                                        Expression conflictDetectionFilter, boolean caseSensitive) {\n+    List<ManifestFile> manifests = Lists.newArrayList();\n+    Set<Long> newSnapshots = Sets.newHashSet();\n+\n+    Long currentSnapshotId = base.currentSnapshot().snapshotId();\n+    while (currentSnapshotId != null && !currentSnapshotId.equals(startingSnapshotId)) {\n+      Snapshot currentSnapshot = ops.current().snapshot(currentSnapshotId);\n+\n+      ValidationException.check(currentSnapshot != null,\n+          \"Cannot determine history between starting snapshot %s and current %s\",\n+          startingSnapshotId, currentSnapshotId);\n+\n+      newSnapshots.add(currentSnapshotId);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTcwMjY5OQ=="}, "originalCommit": {"oid": "7a6c371b00fa8661cc4f268090f9ef690b12db4f"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTk0ODkxOA==", "bodyText": "This was fairly easy to implement, but I had to change a test: https://github.com/apache/iceberg/blob/master/core/src/test/java/org/apache/iceberg/TestOverwriteWithValidation.java#L404-L406", "url": "https://github.com/apache/iceberg/pull/1469#discussion_r499948918", "createdAt": "2020-10-06T00:54:24Z", "author": {"login": "rdblue"}, "path": "core/src/main/java/org/apache/iceberg/MergingSnapshotProducer.java", "diffHunk": "@@ -202,6 +207,58 @@ private ManifestFile copyManifest(ManifestFile manifest) {\n         current.formatVersion(), toCopy, current.specsById(), newManifestPath, snapshotId(), appendedManifestsSummary);\n   }\n \n+  /**\n+   * Validates that no files matching a filter have been added to the table since a starting snapshot.\n+   *\n+   * @param base table metadata to validate\n+   * @param startingSnapshotId id of the snapshot current at the start of the operation\n+   * @param conflictDetectionFilter an expression used to find new conflicting data files\n+   * @param caseSensitive whether expression evaluation should be case sensitive\n+   */\n+  protected void validateAddedDataFiles(TableMetadata base, Long startingSnapshotId,\n+                                        Expression conflictDetectionFilter, boolean caseSensitive) {\n+    List<ManifestFile> manifests = Lists.newArrayList();\n+    Set<Long> newSnapshots = Sets.newHashSet();\n+\n+    Long currentSnapshotId = base.currentSnapshot().snapshotId();\n+    while (currentSnapshotId != null && !currentSnapshotId.equals(startingSnapshotId)) {\n+      Snapshot currentSnapshot = ops.current().snapshot(currentSnapshotId);\n+\n+      ValidationException.check(currentSnapshot != null,\n+          \"Cannot determine history between starting snapshot %s and current %s\",\n+          startingSnapshotId, currentSnapshotId);\n+\n+      newSnapshots.add(currentSnapshotId);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTcwMjY5OQ=="}, "originalCommit": {"oid": "7a6c371b00fa8661cc4f268090f9ef690b12db4f"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyODc3NjQ3OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/apache/iceberg/MergingSnapshotProducer.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxNjowMDowNFrOHcjsAw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQwMDo1NzowN1rOHcygGA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTcwNjg4Mw==", "bodyText": "Do we switch to ManifestGroup instead of Snapshot$addedFiles to avoid caching added files in memory?", "url": "https://github.com/apache/iceberg/pull/1469#discussion_r499706883", "createdAt": "2020-10-05T16:00:04Z", "author": {"login": "aokolnychyi"}, "path": "core/src/main/java/org/apache/iceberg/MergingSnapshotProducer.java", "diffHunk": "@@ -202,6 +207,58 @@ private ManifestFile copyManifest(ManifestFile manifest) {\n         current.formatVersion(), toCopy, current.specsById(), newManifestPath, snapshotId(), appendedManifestsSummary);\n   }\n \n+  /**\n+   * Validates that no files matching a filter have been added to the table since a starting snapshot.\n+   *\n+   * @param base table metadata to validate\n+   * @param startingSnapshotId id of the snapshot current at the start of the operation\n+   * @param conflictDetectionFilter an expression used to find new conflicting data files\n+   * @param caseSensitive whether expression evaluation should be case sensitive\n+   */\n+  protected void validateAddedDataFiles(TableMetadata base, Long startingSnapshotId,\n+                                        Expression conflictDetectionFilter, boolean caseSensitive) {\n+    List<ManifestFile> manifests = Lists.newArrayList();\n+    Set<Long> newSnapshots = Sets.newHashSet();\n+\n+    Long currentSnapshotId = base.currentSnapshot().snapshotId();\n+    while (currentSnapshotId != null && !currentSnapshotId.equals(startingSnapshotId)) {\n+      Snapshot currentSnapshot = ops.current().snapshot(currentSnapshotId);\n+\n+      ValidationException.check(currentSnapshot != null,\n+          \"Cannot determine history between starting snapshot %s and current %s\",\n+          startingSnapshotId, currentSnapshotId);\n+\n+      newSnapshots.add(currentSnapshotId);\n+      for (ManifestFile manifest : currentSnapshot.dataManifests()) {\n+        if (manifest.snapshotId() == (long) currentSnapshotId) {\n+          manifests.add(manifest);\n+        }\n+      }\n+\n+      currentSnapshotId = currentSnapshot.parentId();\n+    }\n+\n+    ManifestGroup conflictGroup = new ManifestGroup(ops.io(), manifests, ImmutableList.of())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7a6c371b00fa8661cc4f268090f9ef690b12db4f"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTcyMjg0Mw==", "bodyText": "I see that we use Snapshot$deletedFiles for row deltas. Why?", "url": "https://github.com/apache/iceberg/pull/1469#discussion_r499722843", "createdAt": "2020-10-05T16:25:17Z", "author": {"login": "aokolnychyi"}, "path": "core/src/main/java/org/apache/iceberg/MergingSnapshotProducer.java", "diffHunk": "@@ -202,6 +207,58 @@ private ManifestFile copyManifest(ManifestFile manifest) {\n         current.formatVersion(), toCopy, current.specsById(), newManifestPath, snapshotId(), appendedManifestsSummary);\n   }\n \n+  /**\n+   * Validates that no files matching a filter have been added to the table since a starting snapshot.\n+   *\n+   * @param base table metadata to validate\n+   * @param startingSnapshotId id of the snapshot current at the start of the operation\n+   * @param conflictDetectionFilter an expression used to find new conflicting data files\n+   * @param caseSensitive whether expression evaluation should be case sensitive\n+   */\n+  protected void validateAddedDataFiles(TableMetadata base, Long startingSnapshotId,\n+                                        Expression conflictDetectionFilter, boolean caseSensitive) {\n+    List<ManifestFile> manifests = Lists.newArrayList();\n+    Set<Long> newSnapshots = Sets.newHashSet();\n+\n+    Long currentSnapshotId = base.currentSnapshot().snapshotId();\n+    while (currentSnapshotId != null && !currentSnapshotId.equals(startingSnapshotId)) {\n+      Snapshot currentSnapshot = ops.current().snapshot(currentSnapshotId);\n+\n+      ValidationException.check(currentSnapshot != null,\n+          \"Cannot determine history between starting snapshot %s and current %s\",\n+          startingSnapshotId, currentSnapshotId);\n+\n+      newSnapshots.add(currentSnapshotId);\n+      for (ManifestFile manifest : currentSnapshot.dataManifests()) {\n+        if (manifest.snapshotId() == (long) currentSnapshotId) {\n+          manifests.add(manifest);\n+        }\n+      }\n+\n+      currentSnapshotId = currentSnapshot.parentId();\n+    }\n+\n+    ManifestGroup conflictGroup = new ManifestGroup(ops.io(), manifests, ImmutableList.of())", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTcwNjg4Mw=="}, "originalCommit": {"oid": "7a6c371b00fa8661cc4f268090f9ef690b12db4f"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTk0OTU5Mg==", "bodyText": "The biggest concern was correctness.\nThis was matching manifests without checking the manifest's partition spec. So the same evaluator was used for all file partitions regardless of whether it was correct. Using ManifestGroup avoids that problem. Note that it isn't a problem for the delete validation because we have a concrete set of files that must exist.\nThis will also have some benefit by not caching. That's a good motivation to change the implementation of the delete checks as well.", "url": "https://github.com/apache/iceberg/pull/1469#discussion_r499949592", "createdAt": "2020-10-06T00:57:07Z", "author": {"login": "rdblue"}, "path": "core/src/main/java/org/apache/iceberg/MergingSnapshotProducer.java", "diffHunk": "@@ -202,6 +207,58 @@ private ManifestFile copyManifest(ManifestFile manifest) {\n         current.formatVersion(), toCopy, current.specsById(), newManifestPath, snapshotId(), appendedManifestsSummary);\n   }\n \n+  /**\n+   * Validates that no files matching a filter have been added to the table since a starting snapshot.\n+   *\n+   * @param base table metadata to validate\n+   * @param startingSnapshotId id of the snapshot current at the start of the operation\n+   * @param conflictDetectionFilter an expression used to find new conflicting data files\n+   * @param caseSensitive whether expression evaluation should be case sensitive\n+   */\n+  protected void validateAddedDataFiles(TableMetadata base, Long startingSnapshotId,\n+                                        Expression conflictDetectionFilter, boolean caseSensitive) {\n+    List<ManifestFile> manifests = Lists.newArrayList();\n+    Set<Long> newSnapshots = Sets.newHashSet();\n+\n+    Long currentSnapshotId = base.currentSnapshot().snapshotId();\n+    while (currentSnapshotId != null && !currentSnapshotId.equals(startingSnapshotId)) {\n+      Snapshot currentSnapshot = ops.current().snapshot(currentSnapshotId);\n+\n+      ValidationException.check(currentSnapshot != null,\n+          \"Cannot determine history between starting snapshot %s and current %s\",\n+          startingSnapshotId, currentSnapshotId);\n+\n+      newSnapshots.add(currentSnapshotId);\n+      for (ManifestFile manifest : currentSnapshot.dataManifests()) {\n+        if (manifest.snapshotId() == (long) currentSnapshotId) {\n+          manifests.add(manifest);\n+        }\n+      }\n+\n+      currentSnapshotId = currentSnapshot.parentId();\n+    }\n+\n+    ManifestGroup conflictGroup = new ManifestGroup(ops.io(), manifests, ImmutableList.of())", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTcwNjg4Mw=="}, "originalCommit": {"oid": "7a6c371b00fa8661cc4f268090f9ef690b12db4f"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyODc4NTM1OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/apache/iceberg/MergingSnapshotProducer.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxNjowMjowM1rOHcjxhQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQwMDo1NzozOVrOHcygjA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTcwODI5Mw==", "bodyText": "Do we expect the number of manifests to be small enough so that we won't have to parallelize this?", "url": "https://github.com/apache/iceberg/pull/1469#discussion_r499708293", "createdAt": "2020-10-05T16:02:03Z", "author": {"login": "aokolnychyi"}, "path": "core/src/main/java/org/apache/iceberg/MergingSnapshotProducer.java", "diffHunk": "@@ -202,6 +207,58 @@ private ManifestFile copyManifest(ManifestFile manifest) {\n         current.formatVersion(), toCopy, current.specsById(), newManifestPath, snapshotId(), appendedManifestsSummary);\n   }\n \n+  /**\n+   * Validates that no files matching a filter have been added to the table since a starting snapshot.\n+   *\n+   * @param base table metadata to validate\n+   * @param startingSnapshotId id of the snapshot current at the start of the operation\n+   * @param conflictDetectionFilter an expression used to find new conflicting data files\n+   * @param caseSensitive whether expression evaluation should be case sensitive\n+   */\n+  protected void validateAddedDataFiles(TableMetadata base, Long startingSnapshotId,\n+                                        Expression conflictDetectionFilter, boolean caseSensitive) {\n+    List<ManifestFile> manifests = Lists.newArrayList();\n+    Set<Long> newSnapshots = Sets.newHashSet();\n+\n+    Long currentSnapshotId = base.currentSnapshot().snapshotId();\n+    while (currentSnapshotId != null && !currentSnapshotId.equals(startingSnapshotId)) {\n+      Snapshot currentSnapshot = ops.current().snapshot(currentSnapshotId);\n+\n+      ValidationException.check(currentSnapshot != null,\n+          \"Cannot determine history between starting snapshot %s and current %s\",\n+          startingSnapshotId, currentSnapshotId);\n+\n+      newSnapshots.add(currentSnapshotId);\n+      for (ManifestFile manifest : currentSnapshot.dataManifests()) {\n+        if (manifest.snapshotId() == (long) currentSnapshotId) {\n+          manifests.add(manifest);\n+        }\n+      }\n+\n+      currentSnapshotId = currentSnapshot.parentId();\n+    }\n+\n+    ManifestGroup conflictGroup = new ManifestGroup(ops.io(), manifests, ImmutableList.of())\n+        .caseSensitive(caseSensitive)\n+        .filterManifestEntries(entry -> newSnapshots.contains(entry.snapshotId()))\n+        .filterData(conflictDetectionFilter)\n+        .specsById(base.specsById())\n+        .ignoreDeleted()\n+        .ignoreExisting();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7a6c371b00fa8661cc4f268090f9ef690b12db4f"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTcwOTIzMw==", "bodyText": "It probably should be small if we ignore rewrite snapshots that may include metadata rewrites.", "url": "https://github.com/apache/iceberg/pull/1469#discussion_r499709233", "createdAt": "2020-10-05T16:03:34Z", "author": {"login": "aokolnychyi"}, "path": "core/src/main/java/org/apache/iceberg/MergingSnapshotProducer.java", "diffHunk": "@@ -202,6 +207,58 @@ private ManifestFile copyManifest(ManifestFile manifest) {\n         current.formatVersion(), toCopy, current.specsById(), newManifestPath, snapshotId(), appendedManifestsSummary);\n   }\n \n+  /**\n+   * Validates that no files matching a filter have been added to the table since a starting snapshot.\n+   *\n+   * @param base table metadata to validate\n+   * @param startingSnapshotId id of the snapshot current at the start of the operation\n+   * @param conflictDetectionFilter an expression used to find new conflicting data files\n+   * @param caseSensitive whether expression evaluation should be case sensitive\n+   */\n+  protected void validateAddedDataFiles(TableMetadata base, Long startingSnapshotId,\n+                                        Expression conflictDetectionFilter, boolean caseSensitive) {\n+    List<ManifestFile> manifests = Lists.newArrayList();\n+    Set<Long> newSnapshots = Sets.newHashSet();\n+\n+    Long currentSnapshotId = base.currentSnapshot().snapshotId();\n+    while (currentSnapshotId != null && !currentSnapshotId.equals(startingSnapshotId)) {\n+      Snapshot currentSnapshot = ops.current().snapshot(currentSnapshotId);\n+\n+      ValidationException.check(currentSnapshot != null,\n+          \"Cannot determine history between starting snapshot %s and current %s\",\n+          startingSnapshotId, currentSnapshotId);\n+\n+      newSnapshots.add(currentSnapshotId);\n+      for (ManifestFile manifest : currentSnapshot.dataManifests()) {\n+        if (manifest.snapshotId() == (long) currentSnapshotId) {\n+          manifests.add(manifest);\n+        }\n+      }\n+\n+      currentSnapshotId = currentSnapshot.parentId();\n+    }\n+\n+    ManifestGroup conflictGroup = new ManifestGroup(ops.io(), manifests, ImmutableList.of())\n+        .caseSensitive(caseSensitive)\n+        .filterManifestEntries(entry -> newSnapshots.contains(entry.snapshotId()))\n+        .filterData(conflictDetectionFilter)\n+        .specsById(base.specsById())\n+        .ignoreDeleted()\n+        .ignoreExisting();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTcwODI5Mw=="}, "originalCommit": {"oid": "7a6c371b00fa8661cc4f268090f9ef690b12db4f"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTczMTExMw==", "bodyText": "You're right, we can ignore rewrite snapshots. That would be helpful.", "url": "https://github.com/apache/iceberg/pull/1469#discussion_r499731113", "createdAt": "2020-10-05T16:39:26Z", "author": {"login": "rdblue"}, "path": "core/src/main/java/org/apache/iceberg/MergingSnapshotProducer.java", "diffHunk": "@@ -202,6 +207,58 @@ private ManifestFile copyManifest(ManifestFile manifest) {\n         current.formatVersion(), toCopy, current.specsById(), newManifestPath, snapshotId(), appendedManifestsSummary);\n   }\n \n+  /**\n+   * Validates that no files matching a filter have been added to the table since a starting snapshot.\n+   *\n+   * @param base table metadata to validate\n+   * @param startingSnapshotId id of the snapshot current at the start of the operation\n+   * @param conflictDetectionFilter an expression used to find new conflicting data files\n+   * @param caseSensitive whether expression evaluation should be case sensitive\n+   */\n+  protected void validateAddedDataFiles(TableMetadata base, Long startingSnapshotId,\n+                                        Expression conflictDetectionFilter, boolean caseSensitive) {\n+    List<ManifestFile> manifests = Lists.newArrayList();\n+    Set<Long> newSnapshots = Sets.newHashSet();\n+\n+    Long currentSnapshotId = base.currentSnapshot().snapshotId();\n+    while (currentSnapshotId != null && !currentSnapshotId.equals(startingSnapshotId)) {\n+      Snapshot currentSnapshot = ops.current().snapshot(currentSnapshotId);\n+\n+      ValidationException.check(currentSnapshot != null,\n+          \"Cannot determine history between starting snapshot %s and current %s\",\n+          startingSnapshotId, currentSnapshotId);\n+\n+      newSnapshots.add(currentSnapshotId);\n+      for (ManifestFile manifest : currentSnapshot.dataManifests()) {\n+        if (manifest.snapshotId() == (long) currentSnapshotId) {\n+          manifests.add(manifest);\n+        }\n+      }\n+\n+      currentSnapshotId = currentSnapshot.parentId();\n+    }\n+\n+    ManifestGroup conflictGroup = new ManifestGroup(ops.io(), manifests, ImmutableList.of())\n+        .caseSensitive(caseSensitive)\n+        .filterManifestEntries(entry -> newSnapshots.contains(entry.snapshotId()))\n+        .filterData(conflictDetectionFilter)\n+        .specsById(base.specsById())\n+        .ignoreDeleted()\n+        .ignoreExisting();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTcwODI5Mw=="}, "originalCommit": {"oid": "7a6c371b00fa8661cc4f268090f9ef690b12db4f"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTk0OTcwOA==", "bodyText": "Yes, the number of changes should be small, especially if we ignore rewrites.", "url": "https://github.com/apache/iceberg/pull/1469#discussion_r499949708", "createdAt": "2020-10-06T00:57:39Z", "author": {"login": "rdblue"}, "path": "core/src/main/java/org/apache/iceberg/MergingSnapshotProducer.java", "diffHunk": "@@ -202,6 +207,58 @@ private ManifestFile copyManifest(ManifestFile manifest) {\n         current.formatVersion(), toCopy, current.specsById(), newManifestPath, snapshotId(), appendedManifestsSummary);\n   }\n \n+  /**\n+   * Validates that no files matching a filter have been added to the table since a starting snapshot.\n+   *\n+   * @param base table metadata to validate\n+   * @param startingSnapshotId id of the snapshot current at the start of the operation\n+   * @param conflictDetectionFilter an expression used to find new conflicting data files\n+   * @param caseSensitive whether expression evaluation should be case sensitive\n+   */\n+  protected void validateAddedDataFiles(TableMetadata base, Long startingSnapshotId,\n+                                        Expression conflictDetectionFilter, boolean caseSensitive) {\n+    List<ManifestFile> manifests = Lists.newArrayList();\n+    Set<Long> newSnapshots = Sets.newHashSet();\n+\n+    Long currentSnapshotId = base.currentSnapshot().snapshotId();\n+    while (currentSnapshotId != null && !currentSnapshotId.equals(startingSnapshotId)) {\n+      Snapshot currentSnapshot = ops.current().snapshot(currentSnapshotId);\n+\n+      ValidationException.check(currentSnapshot != null,\n+          \"Cannot determine history between starting snapshot %s and current %s\",\n+          startingSnapshotId, currentSnapshotId);\n+\n+      newSnapshots.add(currentSnapshotId);\n+      for (ManifestFile manifest : currentSnapshot.dataManifests()) {\n+        if (manifest.snapshotId() == (long) currentSnapshotId) {\n+          manifests.add(manifest);\n+        }\n+      }\n+\n+      currentSnapshotId = currentSnapshot.parentId();\n+    }\n+\n+    ManifestGroup conflictGroup = new ManifestGroup(ops.io(), manifests, ImmutableList.of())\n+        .caseSensitive(caseSensitive)\n+        .filterManifestEntries(entry -> newSnapshots.contains(entry.snapshotId()))\n+        .filterData(conflictDetectionFilter)\n+        .specsById(base.specsById())\n+        .ignoreDeleted()\n+        .ignoreExisting();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTcwODI5Mw=="}, "originalCommit": {"oid": "7a6c371b00fa8661cc4f268090f9ef690b12db4f"}, "originalPosition": 67}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyODgwOTUyOnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/apache/iceberg/RowDelta.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxNjowODowOVrOHckAcQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxNjo0NDo1OVrOHclXWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTcxMjExMw==", "bodyText": "We mean Transaction in Iceberg here?", "url": "https://github.com/apache/iceberg/pull/1469#discussion_r499712113", "createdAt": "2020-10-05T16:08:09Z", "author": {"login": "aokolnychyi"}, "path": "api/src/main/java/org/apache/iceberg/RowDelta.java", "diffHunk": "@@ -44,4 +46,61 @@\n    * @return this for method chaining\n    */\n   RowDelta addDeletes(DeleteFile deletes);\n+\n+  /**\n+   * Set the snapshot ID used in any reads for this operation.\n+   * <p>\n+   * Validations will check changes after this snapshot ID.\n+   *\n+   * @param snapshotId a snapshot ID\n+   * @return this for method chaining\n+   */\n+  RowDelta validateFromSnapshot(long snapshotId);\n+\n+  /**\n+   * Add data file paths that must not be removed by conflicting commits for this RowDelta to succeed.\n+   * <p>\n+   * If any path has been removed by a conflicting commit in the table since the snapshot passed to\n+   * {@link #validateFromSnapshot(long)}, the operation will fail with a\n+   * {@link org.apache.iceberg.exceptions.ValidationException}.\n+   * <p>\n+   * By default, this validation checks only rewrite and overwrite commits. To apply validation to delete commits, call\n+   * {@link #validateDeletedFiles()}.\n+   *\n+   * @param referencedFiles file paths that are referenced by a position delete file\n+   * @return this for method chaining\n+   */\n+  RowDelta validateDataFilesExist(Iterable<? extends CharSequence> referencedFiles);\n+\n+  /**\n+   * Enable validation that referenced data files passed to {@link #validateDataFilesExist(Iterable)} have not been\n+   * removed by a delete operation.\n+   * <p>\n+   * If a data file has a row deleted using a position delete file, rewriting or overwriting the data file concurrently", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7a6c371b00fa8661cc4f268090f9ef690b12db4f"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTcyMzg4OQ==", "bodyText": "Wait, this is for UPDATE.", "url": "https://github.com/apache/iceberg/pull/1469#discussion_r499723889", "createdAt": "2020-10-05T16:26:57Z", "author": {"login": "aokolnychyi"}, "path": "api/src/main/java/org/apache/iceberg/RowDelta.java", "diffHunk": "@@ -44,4 +46,61 @@\n    * @return this for method chaining\n    */\n   RowDelta addDeletes(DeleteFile deletes);\n+\n+  /**\n+   * Set the snapshot ID used in any reads for this operation.\n+   * <p>\n+   * Validations will check changes after this snapshot ID.\n+   *\n+   * @param snapshotId a snapshot ID\n+   * @return this for method chaining\n+   */\n+  RowDelta validateFromSnapshot(long snapshotId);\n+\n+  /**\n+   * Add data file paths that must not be removed by conflicting commits for this RowDelta to succeed.\n+   * <p>\n+   * If any path has been removed by a conflicting commit in the table since the snapshot passed to\n+   * {@link #validateFromSnapshot(long)}, the operation will fail with a\n+   * {@link org.apache.iceberg.exceptions.ValidationException}.\n+   * <p>\n+   * By default, this validation checks only rewrite and overwrite commits. To apply validation to delete commits, call\n+   * {@link #validateDeletedFiles()}.\n+   *\n+   * @param referencedFiles file paths that are referenced by a position delete file\n+   * @return this for method chaining\n+   */\n+  RowDelta validateDataFilesExist(Iterable<? extends CharSequence> referencedFiles);\n+\n+  /**\n+   * Enable validation that referenced data files passed to {@link #validateDataFilesExist(Iterable)} have not been\n+   * removed by a delete operation.\n+   * <p>\n+   * If a data file has a row deleted using a position delete file, rewriting or overwriting the data file concurrently", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTcxMjExMw=="}, "originalCommit": {"oid": "7a6c371b00fa8661cc4f268090f9ef690b12db4f"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTczNDM2MQ==", "bodyText": "Yes, we mean a single-table transaction. Presto doesn't use INSERT OVERWRITE and recommends implementing an overwrite using a transaction with DELETE FROM and INSERT INTO. This allows Presto to validate the deleted files because they are actually overwritten, but appear in metadata to be deletes.", "url": "https://github.com/apache/iceberg/pull/1469#discussion_r499734361", "createdAt": "2020-10-05T16:44:59Z", "author": {"login": "rdblue"}, "path": "api/src/main/java/org/apache/iceberg/RowDelta.java", "diffHunk": "@@ -44,4 +46,61 @@\n    * @return this for method chaining\n    */\n   RowDelta addDeletes(DeleteFile deletes);\n+\n+  /**\n+   * Set the snapshot ID used in any reads for this operation.\n+   * <p>\n+   * Validations will check changes after this snapshot ID.\n+   *\n+   * @param snapshotId a snapshot ID\n+   * @return this for method chaining\n+   */\n+  RowDelta validateFromSnapshot(long snapshotId);\n+\n+  /**\n+   * Add data file paths that must not be removed by conflicting commits for this RowDelta to succeed.\n+   * <p>\n+   * If any path has been removed by a conflicting commit in the table since the snapshot passed to\n+   * {@link #validateFromSnapshot(long)}, the operation will fail with a\n+   * {@link org.apache.iceberg.exceptions.ValidationException}.\n+   * <p>\n+   * By default, this validation checks only rewrite and overwrite commits. To apply validation to delete commits, call\n+   * {@link #validateDeletedFiles()}.\n+   *\n+   * @param referencedFiles file paths that are referenced by a position delete file\n+   * @return this for method chaining\n+   */\n+  RowDelta validateDataFilesExist(Iterable<? extends CharSequence> referencedFiles);\n+\n+  /**\n+   * Enable validation that referenced data files passed to {@link #validateDataFilesExist(Iterable)} have not been\n+   * removed by a delete operation.\n+   * <p>\n+   * If a data file has a row deleted using a position delete file, rewriting or overwriting the data file concurrently", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTcxMjExMw=="}, "originalCommit": {"oid": "7a6c371b00fa8661cc4f268090f9ef690b12db4f"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyODgxNDM0OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/apache/iceberg/RowDelta.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxNjowOToyN1rOHckDow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQwMDo1OToxMFrOHcyh4Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTcxMjkzMQ==", "bodyText": "eager?", "url": "https://github.com/apache/iceberg/pull/1469#discussion_r499712931", "createdAt": "2020-10-05T16:09:27Z", "author": {"login": "aokolnychyi"}, "path": "api/src/main/java/org/apache/iceberg/RowDelta.java", "diffHunk": "@@ -44,4 +46,61 @@\n    * @return this for method chaining\n    */\n   RowDelta addDeletes(DeleteFile deletes);\n+\n+  /**\n+   * Set the snapshot ID used in any reads for this operation.\n+   * <p>\n+   * Validations will check changes after this snapshot ID.\n+   *\n+   * @param snapshotId a snapshot ID\n+   * @return this for method chaining\n+   */\n+  RowDelta validateFromSnapshot(long snapshotId);\n+\n+  /**\n+   * Add data file paths that must not be removed by conflicting commits for this RowDelta to succeed.\n+   * <p>\n+   * If any path has been removed by a conflicting commit in the table since the snapshot passed to\n+   * {@link #validateFromSnapshot(long)}, the operation will fail with a\n+   * {@link org.apache.iceberg.exceptions.ValidationException}.\n+   * <p>\n+   * By default, this validation checks only rewrite and overwrite commits. To apply validation to delete commits, call\n+   * {@link #validateDeletedFiles()}.\n+   *\n+   * @param referencedFiles file paths that are referenced by a position delete file\n+   * @return this for method chaining\n+   */\n+  RowDelta validateDataFilesExist(Iterable<? extends CharSequence> referencedFiles);\n+\n+  /**\n+   * Enable validation that referenced data files passed to {@link #validateDataFilesExist(Iterable)} have not been\n+   * removed by a delete operation.\n+   * <p>\n+   * If a data file has a row deleted using a position delete file, rewriting or overwriting the data file concurrently\n+   * would un-delete the row. Deleting the data file is normally allowed, but a delete may be part of a transaction\n+   * that reads and re-appends a row. This method is used to validate deletes for the transaction case.\n+   *\n+   * @return this for method chaining\n+   */\n+  RowDelta validateDeletedFiles();\n+\n+  /**\n+   * Enables validation that files added concurrently do not conflict with this commit's operation.\n+   * <p>\n+   * This method should be called when the table is queried to determine which files to delete/append.\n+   * If a concurrent operation commits a new file after the data was read and that file might\n+   * contain rows matching the specified conflict detection filter, the overwrite operation\n+   * will detect this during retries and fail.\n+   * <p>\n+   * Calling this method with a correct conflict detection filter is required to maintain\n+   * serializable isolation for eager update/delete operations. Otherwise, the isolation level", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7a6c371b00fa8661cc4f268090f9ef690b12db4f"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTczMDcxMA==", "bodyText": "No, I'll fix it.", "url": "https://github.com/apache/iceberg/pull/1469#discussion_r499730710", "createdAt": "2020-10-05T16:38:43Z", "author": {"login": "rdblue"}, "path": "api/src/main/java/org/apache/iceberg/RowDelta.java", "diffHunk": "@@ -44,4 +46,61 @@\n    * @return this for method chaining\n    */\n   RowDelta addDeletes(DeleteFile deletes);\n+\n+  /**\n+   * Set the snapshot ID used in any reads for this operation.\n+   * <p>\n+   * Validations will check changes after this snapshot ID.\n+   *\n+   * @param snapshotId a snapshot ID\n+   * @return this for method chaining\n+   */\n+  RowDelta validateFromSnapshot(long snapshotId);\n+\n+  /**\n+   * Add data file paths that must not be removed by conflicting commits for this RowDelta to succeed.\n+   * <p>\n+   * If any path has been removed by a conflicting commit in the table since the snapshot passed to\n+   * {@link #validateFromSnapshot(long)}, the operation will fail with a\n+   * {@link org.apache.iceberg.exceptions.ValidationException}.\n+   * <p>\n+   * By default, this validation checks only rewrite and overwrite commits. To apply validation to delete commits, call\n+   * {@link #validateDeletedFiles()}.\n+   *\n+   * @param referencedFiles file paths that are referenced by a position delete file\n+   * @return this for method chaining\n+   */\n+  RowDelta validateDataFilesExist(Iterable<? extends CharSequence> referencedFiles);\n+\n+  /**\n+   * Enable validation that referenced data files passed to {@link #validateDataFilesExist(Iterable)} have not been\n+   * removed by a delete operation.\n+   * <p>\n+   * If a data file has a row deleted using a position delete file, rewriting or overwriting the data file concurrently\n+   * would un-delete the row. Deleting the data file is normally allowed, but a delete may be part of a transaction\n+   * that reads and re-appends a row. This method is used to validate deletes for the transaction case.\n+   *\n+   * @return this for method chaining\n+   */\n+  RowDelta validateDeletedFiles();\n+\n+  /**\n+   * Enables validation that files added concurrently do not conflict with this commit's operation.\n+   * <p>\n+   * This method should be called when the table is queried to determine which files to delete/append.\n+   * If a concurrent operation commits a new file after the data was read and that file might\n+   * contain rows matching the specified conflict detection filter, the overwrite operation\n+   * will detect this during retries and fail.\n+   * <p>\n+   * Calling this method with a correct conflict detection filter is required to maintain\n+   * serializable isolation for eager update/delete operations. Otherwise, the isolation level", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTcxMjkzMQ=="}, "originalCommit": {"oid": "7a6c371b00fa8661cc4f268090f9ef690b12db4f"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTczMzc4MA==", "bodyText": "Shouldn't it be merge-on-read in RowDelta?", "url": "https://github.com/apache/iceberg/pull/1469#discussion_r499733780", "createdAt": "2020-10-05T16:43:59Z", "author": {"login": "aokolnychyi"}, "path": "api/src/main/java/org/apache/iceberg/RowDelta.java", "diffHunk": "@@ -44,4 +46,61 @@\n    * @return this for method chaining\n    */\n   RowDelta addDeletes(DeleteFile deletes);\n+\n+  /**\n+   * Set the snapshot ID used in any reads for this operation.\n+   * <p>\n+   * Validations will check changes after this snapshot ID.\n+   *\n+   * @param snapshotId a snapshot ID\n+   * @return this for method chaining\n+   */\n+  RowDelta validateFromSnapshot(long snapshotId);\n+\n+  /**\n+   * Add data file paths that must not be removed by conflicting commits for this RowDelta to succeed.\n+   * <p>\n+   * If any path has been removed by a conflicting commit in the table since the snapshot passed to\n+   * {@link #validateFromSnapshot(long)}, the operation will fail with a\n+   * {@link org.apache.iceberg.exceptions.ValidationException}.\n+   * <p>\n+   * By default, this validation checks only rewrite and overwrite commits. To apply validation to delete commits, call\n+   * {@link #validateDeletedFiles()}.\n+   *\n+   * @param referencedFiles file paths that are referenced by a position delete file\n+   * @return this for method chaining\n+   */\n+  RowDelta validateDataFilesExist(Iterable<? extends CharSequence> referencedFiles);\n+\n+  /**\n+   * Enable validation that referenced data files passed to {@link #validateDataFilesExist(Iterable)} have not been\n+   * removed by a delete operation.\n+   * <p>\n+   * If a data file has a row deleted using a position delete file, rewriting or overwriting the data file concurrently\n+   * would un-delete the row. Deleting the data file is normally allowed, but a delete may be part of a transaction\n+   * that reads and re-appends a row. This method is used to validate deletes for the transaction case.\n+   *\n+   * @return this for method chaining\n+   */\n+  RowDelta validateDeletedFiles();\n+\n+  /**\n+   * Enables validation that files added concurrently do not conflict with this commit's operation.\n+   * <p>\n+   * This method should be called when the table is queried to determine which files to delete/append.\n+   * If a concurrent operation commits a new file after the data was read and that file might\n+   * contain rows matching the specified conflict detection filter, the overwrite operation\n+   * will detect this during retries and fail.\n+   * <p>\n+   * Calling this method with a correct conflict detection filter is required to maintain\n+   * serializable isolation for eager update/delete operations. Otherwise, the isolation level", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTcxMjkzMQ=="}, "originalCommit": {"oid": "7a6c371b00fa8661cc4f268090f9ef690b12db4f"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTk1MDA0OQ==", "bodyText": "Merge on read is implied by using RowDelta, so I'm removing this and ending the sentence at \"serializable isolation\".", "url": "https://github.com/apache/iceberg/pull/1469#discussion_r499950049", "createdAt": "2020-10-06T00:59:10Z", "author": {"login": "rdblue"}, "path": "api/src/main/java/org/apache/iceberg/RowDelta.java", "diffHunk": "@@ -44,4 +46,61 @@\n    * @return this for method chaining\n    */\n   RowDelta addDeletes(DeleteFile deletes);\n+\n+  /**\n+   * Set the snapshot ID used in any reads for this operation.\n+   * <p>\n+   * Validations will check changes after this snapshot ID.\n+   *\n+   * @param snapshotId a snapshot ID\n+   * @return this for method chaining\n+   */\n+  RowDelta validateFromSnapshot(long snapshotId);\n+\n+  /**\n+   * Add data file paths that must not be removed by conflicting commits for this RowDelta to succeed.\n+   * <p>\n+   * If any path has been removed by a conflicting commit in the table since the snapshot passed to\n+   * {@link #validateFromSnapshot(long)}, the operation will fail with a\n+   * {@link org.apache.iceberg.exceptions.ValidationException}.\n+   * <p>\n+   * By default, this validation checks only rewrite and overwrite commits. To apply validation to delete commits, call\n+   * {@link #validateDeletedFiles()}.\n+   *\n+   * @param referencedFiles file paths that are referenced by a position delete file\n+   * @return this for method chaining\n+   */\n+  RowDelta validateDataFilesExist(Iterable<? extends CharSequence> referencedFiles);\n+\n+  /**\n+   * Enable validation that referenced data files passed to {@link #validateDataFilesExist(Iterable)} have not been\n+   * removed by a delete operation.\n+   * <p>\n+   * If a data file has a row deleted using a position delete file, rewriting or overwriting the data file concurrently\n+   * would un-delete the row. Deleting the data file is normally allowed, but a delete may be part of a transaction\n+   * that reads and re-appends a row. This method is used to validate deletes for the transaction case.\n+   *\n+   * @return this for method chaining\n+   */\n+  RowDelta validateDeletedFiles();\n+\n+  /**\n+   * Enables validation that files added concurrently do not conflict with this commit's operation.\n+   * <p>\n+   * This method should be called when the table is queried to determine which files to delete/append.\n+   * If a concurrent operation commits a new file after the data was read and that file might\n+   * contain rows matching the specified conflict detection filter, the overwrite operation\n+   * will detect this during retries and fail.\n+   * <p>\n+   * Calling this method with a correct conflict detection filter is required to maintain\n+   * serializable isolation for eager update/delete operations. Otherwise, the isolation level", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTcxMjkzMQ=="}, "originalCommit": {"oid": "7a6c371b00fa8661cc4f268090f9ef690b12db4f"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyODgyMjYyOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/apache/iceberg/BaseRowDelta.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxNjoxMTozMlrOHckIvA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQwMDo1OTo1MlrOHcyifw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTcxNDIzNg==", "bodyText": "Is this public on purpose?", "url": "https://github.com/apache/iceberg/pull/1469#discussion_r499714236", "createdAt": "2020-10-05T16:11:32Z", "author": {"login": "aokolnychyi"}, "path": "core/src/main/java/org/apache/iceberg/BaseRowDelta.java", "diffHunk": "@@ -45,4 +62,80 @@ public RowDelta addDeletes(DeleteFile deletes) {\n     add(deletes);\n     return this;\n   }\n+\n+  @Override\n+  public RowDelta validateFromSnapshot(long snapshotId) {\n+    this.startingSnapshotId = snapshotId;\n+    return this;\n+  }\n+\n+  @Override\n+  public RowDelta validateDeletedFiles() {\n+    return validateDeletedFiles(true);\n+  }\n+\n+  public RowDelta validateDeletedFiles(boolean shouldValidate) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7a6c371b00fa8661cc4f268090f9ef690b12db4f"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTczMDU2NQ==", "bodyText": "No. I was debating whether to add it to the public API, so it was initially public. But I decided to keep the public API minimal for now. We can always add it later. That's why I kept it here.", "url": "https://github.com/apache/iceberg/pull/1469#discussion_r499730565", "createdAt": "2020-10-05T16:38:28Z", "author": {"login": "rdblue"}, "path": "core/src/main/java/org/apache/iceberg/BaseRowDelta.java", "diffHunk": "@@ -45,4 +62,80 @@ public RowDelta addDeletes(DeleteFile deletes) {\n     add(deletes);\n     return this;\n   }\n+\n+  @Override\n+  public RowDelta validateFromSnapshot(long snapshotId) {\n+    this.startingSnapshotId = snapshotId;\n+    return this;\n+  }\n+\n+  @Override\n+  public RowDelta validateDeletedFiles() {\n+    return validateDeletedFiles(true);\n+  }\n+\n+  public RowDelta validateDeletedFiles(boolean shouldValidate) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTcxNDIzNg=="}, "originalCommit": {"oid": "7a6c371b00fa8661cc4f268090f9ef690b12db4f"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTk1MDIwNw==", "bodyText": "I'm just going to remove this. We get warnings if it is private.", "url": "https://github.com/apache/iceberg/pull/1469#discussion_r499950207", "createdAt": "2020-10-06T00:59:52Z", "author": {"login": "rdblue"}, "path": "core/src/main/java/org/apache/iceberg/BaseRowDelta.java", "diffHunk": "@@ -45,4 +62,80 @@ public RowDelta addDeletes(DeleteFile deletes) {\n     add(deletes);\n     return this;\n   }\n+\n+  @Override\n+  public RowDelta validateFromSnapshot(long snapshotId) {\n+    this.startingSnapshotId = snapshotId;\n+    return this;\n+  }\n+\n+  @Override\n+  public RowDelta validateDeletedFiles() {\n+    return validateDeletedFiles(true);\n+  }\n+\n+  public RowDelta validateDeletedFiles(boolean shouldValidate) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTcxNDIzNg=="}, "originalCommit": {"oid": "7a6c371b00fa8661cc4f268090f9ef690b12db4f"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyODg1NTA1OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/apache/iceberg/BaseRowDelta.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxNjoxOTozNVrOHckcrA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxNjo1MjoyNFrOHcloUw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTcxOTM0MA==", "bodyText": "Do we expect only file names in this API? Would it make sense to accept DataFIles in the future? So that we can filter out manifests based on the partition info as we do in ManifestFilterManager?", "url": "https://github.com/apache/iceberg/pull/1469#discussion_r499719340", "createdAt": "2020-10-05T16:19:35Z", "author": {"login": "aokolnychyi"}, "path": "core/src/main/java/org/apache/iceberg/BaseRowDelta.java", "diffHunk": "@@ -45,4 +62,80 @@ public RowDelta addDeletes(DeleteFile deletes) {\n     add(deletes);\n     return this;\n   }\n+\n+  @Override\n+  public RowDelta validateFromSnapshot(long snapshotId) {\n+    this.startingSnapshotId = snapshotId;\n+    return this;\n+  }\n+\n+  @Override\n+  public RowDelta validateDeletedFiles() {\n+    return validateDeletedFiles(true);\n+  }\n+\n+  public RowDelta validateDeletedFiles(boolean shouldValidate) {\n+    this.validateDeletes = shouldValidate;\n+    return this;\n+  }\n+\n+  @Override\n+  public RowDelta validateDataFilesExist(Iterable<? extends CharSequence> referencedFiles) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7a6c371b00fa8661cc4f268090f9ef690b12db4f"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTczODcwNw==", "bodyText": "We can support both if we need to later.\nMy expectation is that we won't have the DataFile information to pass back in many cases. A simple example is DELETE FROM. That would be implemented with a scan that also projects _file and _pos, then writes the results into delete files in parallel tasks. It would be some work to pass additional DataFile fields to the writer just so we could pass more information back in metadata. It could be worth it, but I think it is reasonable to start with the simpler option.", "url": "https://github.com/apache/iceberg/pull/1469#discussion_r499738707", "createdAt": "2020-10-05T16:52:24Z", "author": {"login": "rdblue"}, "path": "core/src/main/java/org/apache/iceberg/BaseRowDelta.java", "diffHunk": "@@ -45,4 +62,80 @@ public RowDelta addDeletes(DeleteFile deletes) {\n     add(deletes);\n     return this;\n   }\n+\n+  @Override\n+  public RowDelta validateFromSnapshot(long snapshotId) {\n+    this.startingSnapshotId = snapshotId;\n+    return this;\n+  }\n+\n+  @Override\n+  public RowDelta validateDeletedFiles() {\n+    return validateDeletedFiles(true);\n+  }\n+\n+  public RowDelta validateDeletedFiles(boolean shouldValidate) {\n+    this.validateDeletes = shouldValidate;\n+    return this;\n+  }\n+\n+  @Override\n+  public RowDelta validateDataFilesExist(Iterable<? extends CharSequence> referencedFiles) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTcxOTM0MA=="}, "originalCommit": {"oid": "7a6c371b00fa8661cc4f268090f9ef690b12db4f"}, "originalPosition": 50}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3741, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}