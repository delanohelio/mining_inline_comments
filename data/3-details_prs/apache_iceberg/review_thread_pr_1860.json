{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTMxMDMzMjIz", "number": 1860, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQxMzo1NToyOVrOE_oUOg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQxODozNDo1NVrOE_wX8A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM1MTU2MjgyOnYy", "diffSide": "LEFT", "path": "spark3-extensions/src/main/scala/org/apache/spark/sql/catalyst/analysis/ResolveProcedures.scala", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQxMzo1NToyOVrOH9cA0w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQxMzo1NToyOVrOH9cA0w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDE4NDE0Nw==", "bodyText": "We cannot call dataType as it may not be resolved yet (e.g. calls to functions).", "url": "https://github.com/apache/iceberg/pull/1860#discussion_r534184147", "createdAt": "2020-12-02T13:55:29Z", "author": {"login": "aokolnychyi"}, "path": "spark3-extensions/src/main/scala/org/apache/spark/sql/catalyst/analysis/ResolveProcedures.scala", "diffHunk": "@@ -79,19 +79,7 @@ case class ResolveProcedures(spark: SparkSession) extends Rule[LogicalPlan] with\n \n     nameToArgMap.foreach { case (name, arg) =>\n       val position = nameToPositionMap(name)\n-      val param = params(position)\n-      val paramType = param.dataType\n-      val argType = arg.expr.dataType", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c953560d49d425e7ce55fe2e8f11344fe341133a"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM1Mjg4MzA0OnYy", "diffSide": "RIGHT", "path": "spark3-extensions/src/main/scala/org/apache/spark/sql/catalyst/analysis/ProcedureArgumentCoercion.scala", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQxODozNDo1NVrOH9oxyA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQyMDo1MDowOVrOH9tlwA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDM5MzI4OA==", "bodyText": "Maybe \"Wrong arg type and cannot cast type x to type y\"?\nNot super important", "url": "https://github.com/apache/iceberg/pull/1860#discussion_r534393288", "createdAt": "2020-12-02T18:34:55Z", "author": {"login": "RussellSpitzer"}, "path": "spark3-extensions/src/main/scala/org/apache/spark/sql/catalyst/analysis/ProcedureArgumentCoercion.scala", "diffHunk": "@@ -0,0 +1,55 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.spark.sql.catalyst.analysis\n+\n+import org.apache.spark.sql.AnalysisException\n+import org.apache.spark.sql.catalyst.expressions.Cast\n+import org.apache.spark.sql.catalyst.plans.logical.{Call, LogicalPlan}\n+import org.apache.spark.sql.catalyst.rules.Rule\n+\n+object ProcedureArgumentCoercion extends Rule[LogicalPlan] {\n+  override def apply(plan: LogicalPlan): LogicalPlan = plan resolveOperators {\n+    case c @ Call(procedure, args) if c.resolved =>\n+      val params = procedure.parameters\n+\n+      val newArgs = args.zipWithIndex.map { case (arg, index) =>\n+        val param = params(index)\n+        val paramType = param.dataType\n+        val argType = arg.dataType\n+\n+        if (paramType != argType && !Cast.canUpCast(argType, paramType)) {\n+          throw new AnalysisException(\n+            s\"Wrong arg type for ${param.name}: expected $paramType but got $argType\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c953560d49d425e7ce55fe2e8f11344fe341133a"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDQ2MjIwMw==", "bodyText": "I like the \"cannot cast\" message better.", "url": "https://github.com/apache/iceberg/pull/1860#discussion_r534462203", "createdAt": "2020-12-02T20:31:49Z", "author": {"login": "rdblue"}, "path": "spark3-extensions/src/main/scala/org/apache/spark/sql/catalyst/analysis/ProcedureArgumentCoercion.scala", "diffHunk": "@@ -0,0 +1,55 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.spark.sql.catalyst.analysis\n+\n+import org.apache.spark.sql.AnalysisException\n+import org.apache.spark.sql.catalyst.expressions.Cast\n+import org.apache.spark.sql.catalyst.plans.logical.{Call, LogicalPlan}\n+import org.apache.spark.sql.catalyst.rules.Rule\n+\n+object ProcedureArgumentCoercion extends Rule[LogicalPlan] {\n+  override def apply(plan: LogicalPlan): LogicalPlan = plan resolveOperators {\n+    case c @ Call(procedure, args) if c.resolved =>\n+      val params = procedure.parameters\n+\n+      val newArgs = args.zipWithIndex.map { case (arg, index) =>\n+        val param = params(index)\n+        val paramType = param.dataType\n+        val argType = arg.dataType\n+\n+        if (paramType != argType && !Cast.canUpCast(argType, paramType)) {\n+          throw new AnalysisException(\n+            s\"Wrong arg type for ${param.name}: expected $paramType but got $argType\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDM5MzI4OA=="}, "originalCommit": {"oid": "c953560d49d425e7ce55fe2e8f11344fe341133a"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDQ3MjEyOA==", "bodyText": "Done.", "url": "https://github.com/apache/iceberg/pull/1860#discussion_r534472128", "createdAt": "2020-12-02T20:50:09Z", "author": {"login": "aokolnychyi"}, "path": "spark3-extensions/src/main/scala/org/apache/spark/sql/catalyst/analysis/ProcedureArgumentCoercion.scala", "diffHunk": "@@ -0,0 +1,55 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.spark.sql.catalyst.analysis\n+\n+import org.apache.spark.sql.AnalysisException\n+import org.apache.spark.sql.catalyst.expressions.Cast\n+import org.apache.spark.sql.catalyst.plans.logical.{Call, LogicalPlan}\n+import org.apache.spark.sql.catalyst.rules.Rule\n+\n+object ProcedureArgumentCoercion extends Rule[LogicalPlan] {\n+  override def apply(plan: LogicalPlan): LogicalPlan = plan resolveOperators {\n+    case c @ Call(procedure, args) if c.resolved =>\n+      val params = procedure.parameters\n+\n+      val newArgs = args.zipWithIndex.map { case (arg, index) =>\n+        val param = params(index)\n+        val paramType = param.dataType\n+        val argType = arg.dataType\n+\n+        if (paramType != argType && !Cast.canUpCast(argType, paramType)) {\n+          throw new AnalysisException(\n+            s\"Wrong arg type for ${param.name}: expected $paramType but got $argType\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDM5MzI4OA=="}, "originalCommit": {"oid": "c953560d49d425e7ce55fe2e8f11344fe341133a"}, "originalPosition": 39}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3213, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}