{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU1NDY5MzIx", "number": 1234, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwOToxMTo1NlrOERXiGQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwOToyMDoxMVrOERXscw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2NjQ2ODA5OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/apache/iceberg/avro/GenericAvroReader.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwOToxMTo1NlrOG2CYPQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwOToxMTo1NlrOG2CYPQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTMxNTI2MQ==", "bodyText": "This newResolver could also be removed ?", "url": "https://github.com/apache/iceberg/pull/1234#discussion_r459315261", "createdAt": "2020-07-23T09:11:56Z", "author": {"login": "openinx"}, "path": "core/src/main/java/org/apache/iceberg/avro/GenericAvroReader.java", "diffHunk": "@@ -66,28 +61,12 @@ public void setClassLoader(ClassLoader newClassLoader) {\n \n   @Override\n   public T read(T reuse, Decoder decoder) throws IOException {\n-    ResolvingDecoder resolver = resolve(decoder);\n+    ResolvingDecoder resolver = DecoderResolver.resolve(decoder, readSchema, fileSchema);\n     T value = reader.read(resolver, reuse);\n     resolver.drain();\n     return value;\n   }\n \n-  private ResolvingDecoder resolve(Decoder decoder) throws IOException {\n-    Map<Schema, Map<Schema, ResolvingDecoder>> cache = DECODER_CACHES.get();\n-    Map<Schema, ResolvingDecoder> fileSchemaToResolver = cache\n-        .computeIfAbsent(readSchema, k -> new HashMap<>());\n-\n-    ResolvingDecoder resolver = fileSchemaToResolver.get(fileSchema);\n-    if (resolver == null) {\n-      resolver = newResolver();\n-      fileSchemaToResolver.put(fileSchema, resolver);\n-    }\n-\n-    resolver.configure(decoder);\n-\n-    return resolver;\n-  }\n-\n   private ResolvingDecoder newResolver() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "13bc1ec98d0cb5448dbd14b1141ec50113e8244d"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2NjQ4MTE5OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/apache/iceberg/data/avro/DecoderResolver.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwOToxNTo1NlrOG2CgXQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwOToxNTo1NlrOG2CgXQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTMxNzM0MQ==", "bodyText": "Could simplify those lines as fileSchemaToResolver.computeIfAbsent  ?", "url": "https://github.com/apache/iceberg/pull/1234#discussion_r459317341", "createdAt": "2020-07-23T09:15:56Z", "author": {"login": "openinx"}, "path": "core/src/main/java/org/apache/iceberg/data/avro/DecoderResolver.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.data.avro;\n+\n+import java.io.IOException;\n+import java.util.HashMap;\n+import java.util.Map;\n+import org.apache.avro.Schema;\n+import org.apache.avro.io.Decoder;\n+import org.apache.avro.io.DecoderFactory;\n+import org.apache.avro.io.ResolvingDecoder;\n+import org.apache.iceberg.exceptions.RuntimeIOException;\n+import org.apache.iceberg.relocated.com.google.common.collect.MapMaker;\n+\n+/**\n+ * Resolver to resolve {@link Decoder} to a {@link ResolvingDecoder}.\n+ * This class uses a {@link ThreadLocal} for caching {@link ResolvingDecoder}.\n+ */\n+public class DecoderResolver {\n+\n+  private DecoderResolver() {}\n+\n+  private static final ThreadLocal<Map<Schema, Map<Schema, ResolvingDecoder>>> DECODER_CACHES =\n+      ThreadLocal.withInitial(() -> new MapMaker().weakKeys().makeMap());\n+\n+  public static ResolvingDecoder resolve(Decoder decoder, Schema readSchema, Schema fileSchema) throws IOException {\n+    Map<Schema, Map<Schema, ResolvingDecoder>> cache = DECODER_CACHES.get();\n+    Map<Schema, ResolvingDecoder> fileSchemaToResolver = cache\n+        .computeIfAbsent(readSchema, k -> new HashMap<>());\n+\n+    ResolvingDecoder resolver = fileSchemaToResolver.get(fileSchema);\n+    if (resolver == null) {\n+      resolver = newResolver(readSchema, fileSchema);\n+      fileSchemaToResolver.put(fileSchema, resolver);\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "13bc1ec98d0cb5448dbd14b1141ec50113e8244d"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2NjQ5NDU5OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/apache/iceberg/data/avro/DecoderResolver.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwOToyMDoxMVrOG2Co1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwOTo1NDoyMFrOG2DvVQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTMxOTUwOA==", "bodyText": "Q: Will it have problem when the  GenericAvroReader , DataReader, SparkAvroReader  share the same  cache ?", "url": "https://github.com/apache/iceberg/pull/1234#discussion_r459319508", "createdAt": "2020-07-23T09:20:11Z", "author": {"login": "openinx"}, "path": "core/src/main/java/org/apache/iceberg/data/avro/DecoderResolver.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.data.avro;\n+\n+import java.io.IOException;\n+import java.util.HashMap;\n+import java.util.Map;\n+import org.apache.avro.Schema;\n+import org.apache.avro.io.Decoder;\n+import org.apache.avro.io.DecoderFactory;\n+import org.apache.avro.io.ResolvingDecoder;\n+import org.apache.iceberg.exceptions.RuntimeIOException;\n+import org.apache.iceberg.relocated.com.google.common.collect.MapMaker;\n+\n+/**\n+ * Resolver to resolve {@link Decoder} to a {@link ResolvingDecoder}.\n+ * This class uses a {@link ThreadLocal} for caching {@link ResolvingDecoder}.\n+ */\n+public class DecoderResolver {\n+\n+  private DecoderResolver() {}\n+\n+  private static final ThreadLocal<Map<Schema, Map<Schema, ResolvingDecoder>>> DECODER_CACHES =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "13bc1ec98d0cb5448dbd14b1141ec50113e8244d"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTMzNzU1Nw==", "bodyText": "ResolvingDecoder is used by per record:\nresolver.configure(decoder);\nreader.read(resolver, reuse);\nresolver.drain();\n\nI think this pattern should be thread safe and can be shared.", "url": "https://github.com/apache/iceberg/pull/1234#discussion_r459337557", "createdAt": "2020-07-23T09:54:20Z", "author": {"login": "JingsongLi"}, "path": "core/src/main/java/org/apache/iceberg/data/avro/DecoderResolver.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.data.avro;\n+\n+import java.io.IOException;\n+import java.util.HashMap;\n+import java.util.Map;\n+import org.apache.avro.Schema;\n+import org.apache.avro.io.Decoder;\n+import org.apache.avro.io.DecoderFactory;\n+import org.apache.avro.io.ResolvingDecoder;\n+import org.apache.iceberg.exceptions.RuntimeIOException;\n+import org.apache.iceberg.relocated.com.google.common.collect.MapMaker;\n+\n+/**\n+ * Resolver to resolve {@link Decoder} to a {@link ResolvingDecoder}.\n+ * This class uses a {@link ThreadLocal} for caching {@link ResolvingDecoder}.\n+ */\n+public class DecoderResolver {\n+\n+  private DecoderResolver() {}\n+\n+  private static final ThreadLocal<Map<Schema, Map<Schema, ResolvingDecoder>>> DECODER_CACHES =", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTMxOTUwOA=="}, "originalCommit": {"oid": "13bc1ec98d0cb5448dbd14b1141ec50113e8244d"}, "originalPosition": 40}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3789, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}