{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc2OTA3NzEw", "number": 811, "title": "NameMapping: reassign already mapped names for new columns", "bodyText": "This updates the automatic changes to maintain name mappings when the table schema evolves. If a name was assigned to a different field, it should be reassigned to the new one. This can happen only when a column has been dropped or renamed, or else the schema update will reject the change because the name already exists.\nThis adds tests for the existing functionality that automatically updates name mappings, as well as tests for the 4 new cases:\n\nA column is dropped and a new one is added with the dropped name\nA column is dropped and an existing column is renamed to the dropped name\nA column is renamed and a new one is added with the previous name\nA column is renamed and an existing column is renamed to the previous name", "createdAt": "2020-02-19T00:44:46Z", "url": "https://github.com/apache/iceberg/pull/811", "merged": true, "mergeCommit": {"oid": "b307f40d4e89027c7bec897697afeee8943be014"}, "closed": true, "closedAt": "2020-02-20T22:08:51Z", "author": {"login": "rdblue"}, "timelineItems": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcFq2mKgH2gAyMzc2OTA3NzEwOjkwNzhhZWM5NGMxZGEzZTI0OWMzMDJlOTc1Mzg1Yzk3YTE2ZTk5ZTA=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcGFvEhAFqTM2MTYzOTg1OA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "9078aec94c1da3e249c302e975385c97a16e99e0", "author": {"user": {"login": "rdblue", "name": "Ryan Blue"}}, "url": "https://github.com/apache/iceberg/commit/9078aec94c1da3e249c302e975385c97a16e99e0", "committedDate": "2020-02-18T23:51:21Z", "message": "NameMapping: reassign already mapped names for new columns."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d459b3a26d2592c5952a5912ecc5ae47b78173c1", "author": {"user": {"login": "rdblue", "name": "Ryan Blue"}}, "url": "https://github.com/apache/iceberg/commit/d459b3a26d2592c5952a5912ecc5ae47b78173c1", "committedDate": "2020-02-19T00:38:22Z", "message": "Fix column rename."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2e3c42da84ceef2011efdb573bb5b4443ecf4b72", "author": {"user": {"login": "rdblue", "name": "Ryan Blue"}}, "url": "https://github.com/apache/iceberg/commit/2e3c42da84ceef2011efdb573bb5b4443ecf4b72", "committedDate": "2020-02-19T00:43:27Z", "message": "Add another test case."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "df424ab6c21531be5ac86ad4beaa929570b5e553", "author": {"user": {"login": "rdblue", "name": "Ryan Blue"}}, "url": "https://github.com/apache/iceberg/commit/df424ab6c21531be5ac86ad4beaa929570b5e553", "committedDate": "2020-02-19T00:51:28Z", "message": "Fix unused imports."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2108753a2a1e5afdb31dcac9c0a8959b9c0e966c", "author": {"user": {"login": "rdblue", "name": "Ryan Blue"}}, "url": "https://github.com/apache/iceberg/commit/2108753a2a1e5afdb31dcac9c0a8959b9c0e966c", "committedDate": "2020-02-19T01:00:42Z", "message": "Fix typo."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "68d12d6852d6fb9dc70882dea122ec943d4d99a1", "author": {"user": {"login": "rdblue", "name": "Ryan Blue"}}, "url": "https://github.com/apache/iceberg/commit/68d12d6852d6fb9dc70882dea122ec943d4d99a1", "committedDate": "2020-02-19T01:01:02Z", "message": "Remove failing test."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYwNzgwMzc5", "url": "https://github.com/apache/iceberg/pull/811#pullrequestreview-360780379", "createdAt": "2020-02-19T01:03:02Z", "commit": {"oid": "68d12d6852d6fb9dc70882dea122ec943d4d99a1"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQwMTowMzowM1rOFrX24Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQwMTowMzowM1rOFrX24Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTAyMzk2OQ==", "bodyText": "This test is no longer valid because there change that caused an exception while updating the mapping is now supported. Since there aren't changes that cause a failure and there isn't a good way to inject an implementation that fails, I'm just removing this test.", "url": "https://github.com/apache/iceberg/pull/811#discussion_r381023969", "createdAt": "2020-02-19T01:03:03Z", "author": {"login": "rdblue"}, "path": "core/src/test/java/org/apache/iceberg/mapping/TestMappingUpdates.java", "diffHunk": "@@ -216,34 +216,4 @@ public void testRenameComplexFieldMappingUpdate() {\n             ))),\n         pointUpdated.asMappedFields());\n   }\n-\n-  @Test\n-  public void testMappingUpdateFailureSkipsMappingUpdate() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "68d12d6852d6fb9dc70882dea122ec943d4d99a1"}, "originalPosition": 6}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYwODI4MzY3", "url": "https://github.com/apache/iceberg/pull/811#pullrequestreview-360828367", "createdAt": "2020-02-19T03:57:44Z", "commit": {"oid": "68d12d6852d6fb9dc70882dea122ec943d4d99a1"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQwMzo1Nzo0NFrOFraYmw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQwMzo1Nzo0NFrOFraYmw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTA2NTM3MQ==", "bodyText": "Why we don't want to remove deleted entry in mapping?", "url": "https://github.com/apache/iceberg/pull/811#discussion_r381065371", "createdAt": "2020-02-19T03:57:44Z", "author": {"login": "chenjunjiedada"}, "path": "core/src/test/java/org/apache/iceberg/TestSchemaAndMappingUpdate.java", "diffHunk": "@@ -0,0 +1,344 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.Iterables;\n+import com.google.common.collect.Sets;\n+import java.util.Objects;\n+import java.util.Set;\n+import org.apache.iceberg.mapping.MappedField;\n+import org.apache.iceberg.mapping.MappedFields;\n+import org.apache.iceberg.mapping.MappingUtil;\n+import org.apache.iceberg.mapping.NameMapping;\n+import org.apache.iceberg.mapping.NameMappingParser;\n+import org.apache.iceberg.types.Types;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+public class TestSchemaAndMappingUpdate extends TableTestBase {\n+  @Test\n+  public void testAddPrimitiveColumn() {\n+    NameMapping mapping = MappingUtil.create(table.schema());\n+    String mappingJson = NameMappingParser.toJson(mapping);\n+\n+    table.updateProperties()\n+        .set(TableProperties.DEFAULT_NAME_MAPPING, mappingJson)\n+        .commit();\n+\n+    table.updateSchema()\n+        .addColumn(\"count\", Types.LongType.get())\n+        .commit();\n+\n+    String updatedJson = table.properties().get(TableProperties.DEFAULT_NAME_MAPPING);\n+    NameMapping updated = NameMappingParser.fromJson(updatedJson);\n+\n+    validateUnchanged(mapping, updated);\n+\n+    MappedField newMapping = updated.find(\"count\");\n+    Assert.assertNotNull(\"Mapping for new column should be added\", newMapping);\n+    Assert.assertEquals(\"Mapping should use the assigned field ID\",\n+        (Integer) table.schema().findField(\"count\").fieldId(), updated.find(\"count\").id());\n+    Assert.assertNull(\"Should not contain a nested mapping\", updated.find(\"count\").nestedMapping());\n+  }\n+\n+  @Test\n+  public void testAddStructColumn() {\n+    NameMapping mapping = MappingUtil.create(table.schema());\n+    String mappingJson = NameMappingParser.toJson(mapping);\n+\n+    table.updateProperties()\n+        .set(TableProperties.DEFAULT_NAME_MAPPING, mappingJson)\n+        .commit();\n+\n+    table.updateSchema()\n+        .addColumn(\"location\", Types.StructType.of(\n+            Types.NestedField.optional(1, \"lat\", Types.DoubleType.get()),\n+            Types.NestedField.optional(2, \"long\", Types.DoubleType.get())))\n+        .commit();\n+\n+    String updatedJson = table.properties().get(TableProperties.DEFAULT_NAME_MAPPING);\n+    NameMapping updated = NameMappingParser.fromJson(updatedJson);\n+\n+    validateUnchanged(mapping, updated);\n+\n+    MappedField newMapping = updated.find(\"location\");\n+    Assert.assertNotNull(\"Mapping for new column should be added\", newMapping);\n+\n+    Assert.assertEquals(\"Mapping should use the assigned field ID\",\n+        (Integer) table.schema().findField(\"location\").fieldId(), updated.find(\"location\").id());\n+    Assert.assertNotNull(\"Should contain a nested mapping\", updated.find(\"location\").nestedMapping());\n+\n+    Assert.assertEquals(\"Mapping should use the assigned field ID\",\n+        (Integer) table.schema().findField(\"location.lat\").fieldId(), updated.find(\"location.lat\").id());\n+    Assert.assertNull(\"Should not contain a nested mapping\", updated.find(\"location.lat\").nestedMapping());\n+\n+    Assert.assertEquals(\"Mapping should use the assigned field ID\",\n+        (Integer) table.schema().findField(\"location.long\").fieldId(), updated.find(\"location.long\").id());\n+    Assert.assertNull(\"Should not contain a nested mapping\", updated.find(\"location.long\").nestedMapping());\n+  }\n+\n+  @Test\n+  public void testRenameColumn() {\n+    NameMapping mapping = MappingUtil.create(table.schema());\n+    String mappingJson = NameMappingParser.toJson(mapping);\n+\n+    table.updateProperties()\n+        .set(TableProperties.DEFAULT_NAME_MAPPING, mappingJson)\n+        .commit();\n+\n+    table.updateSchema()\n+        .renameColumn(\"id\", \"object_id\")\n+        .commit();\n+\n+    String updatedJson = table.properties().get(TableProperties.DEFAULT_NAME_MAPPING);\n+    NameMapping updated = NameMappingParser.fromJson(updatedJson);\n+\n+    int idColumnId = table.schema().findField(\"object_id\").fieldId();\n+    validateUnchanged(\n+        Iterables.filter(mapping.asMappedFields().fields(), field -> !Objects.equals(idColumnId, field.id())),\n+        updated);\n+\n+    MappedField updatedMapping = updated.find(idColumnId);\n+    Assert.assertNotNull(\"Mapping for id column should exist\", updatedMapping);\n+    Assert.assertEquals(\"Should add the new column name to the existing mapping\",\n+        MappedField.of(idColumnId, ImmutableList.of(\"id\", \"object_id\")),\n+        updatedMapping);\n+  }\n+\n+  @Test\n+  public void testDeleteColumn() {\n+    NameMapping mapping = MappingUtil.create(table.schema());\n+    String mappingJson = NameMappingParser.toJson(mapping);\n+\n+    table.updateProperties()\n+        .set(TableProperties.DEFAULT_NAME_MAPPING, mappingJson)\n+        .commit();\n+\n+    table.updateSchema()\n+        .deleteColumn(\"id\")\n+        .commit();\n+\n+    String updatedJson = table.properties().get(TableProperties.DEFAULT_NAME_MAPPING);\n+    NameMapping updated = NameMappingParser.fromJson(updatedJson);\n+\n+    // should not change the mapping", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "68d12d6852d6fb9dc70882dea122ec943d4d99a1"}, "originalPosition": 142}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYxNjM5ODU4", "url": "https://github.com/apache/iceberg/pull/811#pullrequestreview-361639858", "createdAt": "2020-02-20T05:23:51Z", "commit": {"oid": "68d12d6852d6fb9dc70882dea122ec943d4d99a1"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQwNToyMzo1MVrOFsFNUg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQwNzoxMDowMFrOFsIRtA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTc2Njk5NA==", "bodyText": "is this null check redundant?", "url": "https://github.com/apache/iceberg/pull/811#discussion_r381766994", "createdAt": "2020-02-20T05:23:51Z", "author": {"login": "rdsr"}, "path": "core/src/main/java/org/apache/iceberg/mapping/MappingUtil.java", "diffHunk": "@@ -91,7 +92,14 @@ public MappedFields mapping(NameMapping mapping, MappedFields result) {\n \n     @Override\n     public MappedFields fields(MappedFields fields, List<MappedField> fieldResults) {\n-      return MappedFields.of(fieldResults);\n+      ImmutableMap.Builder<String, Integer> builder = ImmutableMap.builder();\n+      fieldResults.stream()\n+          .map(MappedField::id).filter(Objects::nonNull)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "68d12d6852d6fb9dc70882dea122ec943d4d99a1"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTgxNzI2OA==", "bodyText": "Do you see issues  if a mappedField ends up having no names assigned?", "url": "https://github.com/apache/iceberg/pull/811#discussion_r381817268", "createdAt": "2020-02-20T07:10:00Z", "author": {"login": "rdsr"}, "path": "core/src/main/java/org/apache/iceberg/mapping/MappingUtil.java", "diffHunk": "@@ -114,18 +122,45 @@ private MappedFields addNewFields(MappedFields mapping, int parentId) {\n         return mapping;\n       }\n \n-      List<MappedField> fields = Lists.newArrayList();\n-      if (mapping != null) {\n-        fields.addAll(mapping.fields());\n-      }\n-\n+      List<MappedField> newFields = Lists.newArrayList();\n       for (Types.NestedField add : fieldsToAdd) {\n         MappedFields nestedMapping = TypeUtil.visit(add.type(), CreateMapping.INSTANCE);\n-        fields.add(MappedField.of(add.fieldId(), add.name(), nestedMapping));\n+        newFields.add(MappedField.of(add.fieldId(), add.name(), nestedMapping));\n+      }\n+\n+      if (mapping == null || mapping.fields().isEmpty()) {\n+        return MappedFields.of(newFields);\n+      }\n+\n+      ImmutableMap.Builder<String, Integer> builder = ImmutableMap.builder();\n+      fieldsToAdd.stream().forEach(field -> builder.put(field.name(), field.fieldId()));\n+      Map<String, Integer> assignments = builder.build();\n+\n+      // create a copy of fields that can be updated (append new fields, replace existing for reassignment)\n+      List<MappedField> fields = Lists.newArrayList();\n+      for (MappedField field : mapping.fields()) {\n+        fields.add(removeReassignedNames(field, assignments));\n       }\n \n+      fields.addAll(newFields);\n+\n       return MappedFields.of(fields);\n     }\n+\n+    private static MappedField removeReassignedNames(MappedField field, Map<String, Integer> assignments) {\n+      MappedField newField = field;\n+      for (String name : field.names()) {\n+        Integer assignedId = assignments.get(name);\n+        if (assignedId != null && !Objects.equals(assignedId, field.id())) {\n+          newField = removeName(field, name);\n+        }\n+      }\n+      return newField;\n+    }\n+\n+    private static MappedField removeName(MappedField field, String name) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "68d12d6852d6fb9dc70882dea122ec943d4d99a1"}, "originalPosition": 70}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4952, "cost": 1, "resetAt": "2021-10-29T19:57:52Z"}}}