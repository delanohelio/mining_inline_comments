{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ3MTczOTAy", "number": 1191, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQxNzowODowNVrOENWW0Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQyMzoxODoyNlrOENcOVw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyNDMzMjMzOnYy", "diffSide": "RIGHT", "path": "orc/src/main/java/org/apache/iceberg/orc/OrcValueReaders.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQxNzowODowNVrOGv-8Fw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQxOTozMDo0N1rOGwDVnQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjk2NzQ0Nw==", "bodyText": "Is ColumnVector still materialized? Is it possible to avoid reading that entirely?", "url": "https://github.com/apache/iceberg/pull/1191#discussion_r452967447", "createdAt": "2020-07-10T17:08:05Z", "author": {"login": "rdblue"}, "path": "orc/src/main/java/org/apache/iceberg/orc/OrcValueReaders.java", "diffHunk": "@@ -181,12 +173,25 @@ private T readInternal(T struct, ColumnVector[] columnVectors, int row) {\n       for (int c = 0; c < readers.length; ++c) {\n         set(struct, c, reader(c).read(columnVectors[c], row));\n       }\n+      return struct;\n+    }\n+  }\n \n-      for (int i = 0; i < positions.length; i += 1) {\n-        set(struct, positions[i], constants[i]);\n-      }\n+  private static class ConstantReader<C> implements OrcValueReader<C> {\n+    private final C constant;\n \n-      return struct;\n+    private ConstantReader(C constant) {\n+      this.constant = constant;\n+    }\n+\n+    @Override\n+    public C read(ColumnVector ignored, int ignoredRow) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c55c16e0b0f7d3778c3e04ef747f9e557f0718a7"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzAzNDU0Nw==", "bodyText": "Yes, I guess we can do that by not asking ORC to project these columns. Let me give it a try.", "url": "https://github.com/apache/iceberg/pull/1191#discussion_r453034547", "createdAt": "2020-07-10T19:19:01Z", "author": {"login": "shardulm94"}, "path": "orc/src/main/java/org/apache/iceberg/orc/OrcValueReaders.java", "diffHunk": "@@ -181,12 +173,25 @@ private T readInternal(T struct, ColumnVector[] columnVectors, int row) {\n       for (int c = 0; c < readers.length; ++c) {\n         set(struct, c, reader(c).read(columnVectors[c], row));\n       }\n+      return struct;\n+    }\n+  }\n \n-      for (int i = 0; i < positions.length; i += 1) {\n-        set(struct, positions[i], constants[i]);\n-      }\n+  private static class ConstantReader<C> implements OrcValueReader<C> {\n+    private final C constant;\n \n-      return struct;\n+    private ConstantReader(C constant) {\n+      this.constant = constant;\n+    }\n+\n+    @Override\n+    public C read(ColumnVector ignored, int ignoredRow) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjk2NzQ0Nw=="}, "originalCommit": {"oid": "c55c16e0b0f7d3778c3e04ef747f9e557f0718a7"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzAzOTUxNw==", "bodyText": "That's going to be a bigger time savings and that's what we do for Parquet. We just drop it from the projection we pass down to the format.", "url": "https://github.com/apache/iceberg/pull/1191#discussion_r453039517", "createdAt": "2020-07-10T19:30:47Z", "author": {"login": "rdblue"}, "path": "orc/src/main/java/org/apache/iceberg/orc/OrcValueReaders.java", "diffHunk": "@@ -181,12 +173,25 @@ private T readInternal(T struct, ColumnVector[] columnVectors, int row) {\n       for (int c = 0; c < readers.length; ++c) {\n         set(struct, c, reader(c).read(columnVectors[c], row));\n       }\n+      return struct;\n+    }\n+  }\n \n-      for (int i = 0; i < positions.length; i += 1) {\n-        set(struct, positions[i], constants[i]);\n-      }\n+  private static class ConstantReader<C> implements OrcValueReader<C> {\n+    private final C constant;\n \n-      return struct;\n+    private ConstantReader(C constant) {\n+      this.constant = constant;\n+    }\n+\n+    @Override\n+    public C read(ColumnVector ignored, int ignoredRow) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjk2NzQ0Nw=="}, "originalCommit": {"oid": "c55c16e0b0f7d3778c3e04ef747f9e557f0718a7"}, "originalPosition": 73}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyNTI5MzY3OnYy", "diffSide": "RIGHT", "path": "orc/src/main/java/org/apache/iceberg/orc/OrcValueReaders.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQyMzoxODoyNlrOGwIHPA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQyMzo0NTozNlrOGwId1w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzExNzc1Ng==", "bodyText": "Minor: we discourage using the return value of ++ expressions because it is error prone and makes code harder to read. Could you move the increment to a separate line?", "url": "https://github.com/apache/iceberg/pull/1191#discussion_r453117756", "createdAt": "2020-07-10T23:18:26Z", "author": {"login": "rdblue"}, "path": "orc/src/main/java/org/apache/iceberg/orc/OrcValueReaders.java", "diffHunk": "@@ -178,15 +171,29 @@ public T nonNullRead(ColumnVector vector, int row) {\n     }\n \n     private T readInternal(T struct, ColumnVector[] columnVectors, int row) {\n-      for (int c = 0; c < readers.length; ++c) {\n-        set(struct, c, reader(c).read(columnVectors[c], row));\n+      for (int c = 0, vectorIndex = 0; c < readers.length; ++c) {\n+        ColumnVector vector = isConstantField[c] ? null : columnVectors[vectorIndex++];", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "26cbff7a236fd0a06d7b34f8e97d8d0c5631b873"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzEyMzU0Mw==", "bodyText": "Done", "url": "https://github.com/apache/iceberg/pull/1191#discussion_r453123543", "createdAt": "2020-07-10T23:45:36Z", "author": {"login": "shardulm94"}, "path": "orc/src/main/java/org/apache/iceberg/orc/OrcValueReaders.java", "diffHunk": "@@ -178,15 +171,29 @@ public T nonNullRead(ColumnVector vector, int row) {\n     }\n \n     private T readInternal(T struct, ColumnVector[] columnVectors, int row) {\n-      for (int c = 0; c < readers.length; ++c) {\n-        set(struct, c, reader(c).read(columnVectors[c], row));\n+      for (int c = 0, vectorIndex = 0; c < readers.length; ++c) {\n+        ColumnVector vector = isConstantField[c] ? null : columnVectors[vectorIndex++];", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzExNzc1Ng=="}, "originalCommit": {"oid": "26cbff7a236fd0a06d7b34f8e97d8d0c5631b873"}, "originalPosition": 67}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3758, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}