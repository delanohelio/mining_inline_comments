{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDgyMDM0Mjg0", "number": 1433, "title": "Fix the bug that clientPool#close will block forever when newClient encountered an exception.", "bodyText": "When preparing demo for flink + hive metastore,   I created a hive catalog with a random port for metastore, for example:\ncreate catalog hive_catalog with(\n  'type'='iceberg',\n  'catalog-type'='hive',\n  'uri'='thrift://localhost:3234',\n  'clients'='1',\n  'property-version'='1'\n);\nThen I switch to use the hive_catalog and execute sql command show databases to show all the databases,  I found that the sql command was blocked.\nAfter digging into the code, I find that it's a bug in ClientPool, saying if encountering an exception when newClient,  the upper layer (Flink SQL client) will try to close all the resources from ClientPool by calling ClientPool#close, finally it will be blocked in close method like following:\n\"main\" #1 prio=5 os_prio=31 tid=0x00007fc853802800 nid=0x1d03 in Object.wait() [0x000070000ad92000]\n   java.lang.Thread.State: TIMED_WAITING (on object monitor)\n        at java.lang.Object.wait(Native Method)\n        at org.apache.iceberg.hive.ClientPool.close(ClientPool.java:110)\n        - locked <0x0000000771b203c8> (a java.lang.Object)\n        at org.apache.iceberg.hive.HiveCatalog.close(HiveCatalog.java:480)\n        at org.apache.iceberg.flink.FlinkCatalog.close(FlinkCatalog.java:120)\n        at org.apache.flink.table.client.gateway.local.ExecutionContext$$Lambda$503/1760443245.accept(Unknown Source)\n        at java.util.HashMap$Values.forEach(HashMap.java:981)\n        at org.apache.flink.table.client.gateway.local.ExecutionContext.lambda$close$2(ExecutionContext.java:307)\n        at org.apache.flink.table.client.gateway.local.ExecutionContext$$Lambda$500/1972628089.run(Unknown Source)\n        at org.apache.flink.table.client.gateway.local.ExecutionContext.wrapClassLoader(ExecutionContext.java:264)\n        at org.apache.flink.table.client.gateway.local.ExecutionContext.close(ExecutionContext.java:307)\n        at org.apache.flink.table.client.gateway.local.LocalExecutor.closeSession(LocalExecutor.java:244)\n        at org.apache.flink.table.client.SqlClient.start(SqlClient.java:116)\n        at org.apache.flink.table.client.SqlClient.main(SqlClient.java:201)\n\nThe patch fixed this bug and attached an unit test to reproduce the case.", "createdAt": "2020-09-08T13:14:16Z", "url": "https://github.com/apache/iceberg/pull/1433", "merged": true, "mergeCommit": {"oid": "58b2b70933f691a365b7e5f50642bea98f66fbe5"}, "closed": true, "closedAt": "2020-09-08T17:26:11Z", "author": {"login": "openinx"}, "timelineItems": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdG3QEvgH2gAyNDgyMDM0Mjg0OjA4N2FkYTg1OTA4MWI3ZjI3ZGI3Y2FiMmVkYjE2Nzc5NTIzNWIyNzA=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdG6-wIgFqTQ4NDM0ODA1OA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "087ada859081b7f27db7cab2edb167795235b270", "author": {"user": {"login": "openinx", "name": "openinx"}}, "url": "https://github.com/apache/iceberg/commit/087ada859081b7f27db7cab2edb167795235b270", "committedDate": "2020-09-08T13:03:07Z", "message": "Fix the bug that clientPool#close will block forever when newClient encountered an exception."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg0MjIwODMy", "url": "https://github.com/apache/iceberg/pull/1433#pullrequestreview-484220832", "createdAt": "2020-09-08T14:51:14Z", "commit": {"oid": "087ada859081b7f27db7cab2edb167795235b270"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxNDo1MToxNFrOHOg9rg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxNDo1MToxNFrOHOg9rg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDk4MjE5MA==", "bodyText": "This is real issue here right? We have the possibility of incrementing current size even if \"newClient\" failed in the old code? If so this seems like the right fix to me", "url": "https://github.com/apache/iceberg/pull/1433#discussion_r484982190", "createdAt": "2020-09-08T14:51:14Z", "author": {"login": "RussellSpitzer"}, "path": "hive-metastore/src/main/java/org/apache/iceberg/hive/ClientPool.java", "diffHunk": "@@ -114,8 +114,9 @@ private C get() throws InterruptedException {\n           if (!clients.isEmpty()) {\n             return clients.removeFirst();\n           } else if (currentSize < poolSize) {\n+            C client = newClient();\n             currentSize += 1;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "087ada859081b7f27db7cab2edb167795235b270"}, "originalPosition": 5}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg0MzQ4MDU4", "url": "https://github.com/apache/iceberg/pull/1433#pullrequestreview-484348058", "createdAt": "2020-09-08T17:23:49Z", "commit": {"oid": "087ada859081b7f27db7cab2edb167795235b270"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxNzoyMzo0OVrOHOm_cw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxNzoyMzo0OVrOHOm_cw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTA4MDk0Nw==", "bodyText": "Can we call this something other than MockClientPool? It injects a failure, so I think a name like FailNewClientPool would be better.", "url": "https://github.com/apache/iceberg/pull/1433#discussion_r485080947", "createdAt": "2020-09-08T17:23:49Z", "author": {"login": "rdblue"}, "path": "hive-metastore/src/test/java/org/apache/iceberg/hive/TestClientPool.java", "diffHunk": "@@ -0,0 +1,54 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.hive;\n+\n+import org.junit.Test;\n+\n+public class TestClientPool {\n+\n+  @Test(expected = RuntimeException.class)\n+  public void testNewClientFailure() throws Exception {\n+    try (MockClientPool pool = new MockClientPool(2, Exception.class)) {\n+      pool.run(Object::toString);\n+    }\n+  }\n+\n+  private static class MockClientPool extends ClientPool<Object, Exception> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "087ada859081b7f27db7cab2edb167795235b270"}, "originalPosition": 33}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4189, "cost": 1, "resetAt": "2021-10-29T19:57:52Z"}}}