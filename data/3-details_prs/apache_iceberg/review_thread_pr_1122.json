{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM2MTA3MzY4", "number": 1122, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QyMTozNDoyNlrOEGhnnw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxMTo1MjoxM1rOEGt5Cw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1Mjc3NzI3OnYy", "diffSide": "LEFT", "path": "spark2/src/main/java/org/apache/iceberg/spark/source/Reader.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QyMTozNDoyNlrOGlYOGQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QyMTozNDoyNlrOGlYOGQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTg0NzMyMQ==", "bodyText": "This class is not used, so I removed it.", "url": "https://github.com/apache/iceberg/pull/1122#discussion_r441847321", "createdAt": "2020-06-17T21:34:26Z", "author": {"login": "rdblue"}, "path": "spark2/src/main/java/org/apache/iceberg/spark/source/Reader.java", "diffHunk": "@@ -480,41 +479,21 @@ private InternalRowReaderFactory() {\n     public InputPartitionReader<ColumnarBatch> create(CombinedScanTask task, Schema tableSchema, Schema expectedSchema,\n                                                       String nameMapping, FileIO io,\n                                                       EncryptionManager encryptionManager, boolean caseSensitive) {\n-      return new BatchDataReader(task, expectedSchema, nameMapping, io, encryptionManager, caseSensitive, batchSize);\n+      return new BatchReader(task, expectedSchema, nameMapping, io, encryptionManager, caseSensitive, batchSize);\n     }\n   }\n \n-  private static class StructLikeInternalRow implements StructLike {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "167867cabd547951ee4e9e26c6ee15fb1904f5de"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1Mjc3ODMxOnYy", "diffSide": "LEFT", "path": "spark2/src/main/java/org/apache/iceberg/spark/source/Reader.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QyMTozNDo1MFrOGlYOww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QyMTozNDo1MFrOGlYOww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTg0NzQ5MQ==", "bodyText": "This wasn't used. The name mapping string is passed instead.", "url": "https://github.com/apache/iceberg/pull/1122#discussion_r441847491", "createdAt": "2020-06-17T21:34:50Z", "author": {"login": "rdblue"}, "path": "spark2/src/main/java/org/apache/iceberg/spark/source/Reader.java", "diffHunk": "@@ -396,8 +396,7 @@ public String toString() {\n \n     private transient Schema tableSchema = null;\n     private transient Schema expectedSchema = null;\n-    private transient NameMapping nameMapping = null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "167867cabd547951ee4e9e26c6ee15fb1904f5de"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1NDc4Nzk1OnYy", "diffSide": "RIGHT", "path": "spark/src/main/java/org/apache/iceberg/spark/source/BaseWriter.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxMTo1MjoxM1rOGlr19Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQxOTo1ODowMlrOGmf1ag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjE2ODgyMQ==", "bodyText": "IIUC, both spark2 and spark3 will rely on this code, and this code requires one specific Spark dependency about the InternalRow, will this potentially go into an issue that has two versions of spark dependencies in Spark3 module?\nAlso if the signature of InternalRow of Spark2 and Spark3 is different, will this lead to an issue?", "url": "https://github.com/apache/iceberg/pull/1122#discussion_r442168821", "createdAt": "2020-06-18T11:52:13Z", "author": {"login": "jerryshao"}, "path": "spark/src/main/java/org/apache/iceberg/spark/source/BaseWriter.java", "diffHunk": "@@ -0,0 +1,143 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.spark.source;\n+\n+import java.io.Closeable;\n+import java.io.IOException;\n+import java.util.List;\n+import org.apache.iceberg.DataFile;\n+import org.apache.iceberg.DataFiles;\n+import org.apache.iceberg.FileFormat;\n+import org.apache.iceberg.Metrics;\n+import org.apache.iceberg.PartitionSpec;\n+import org.apache.iceberg.encryption.EncryptedOutputFile;\n+import org.apache.iceberg.io.FileAppender;\n+import org.apache.iceberg.io.FileIO;\n+import org.apache.iceberg.relocated.com.google.common.collect.Lists;\n+import org.apache.iceberg.util.Tasks;\n+import org.apache.spark.sql.catalyst.InternalRow;\n+\n+abstract class BaseWriter implements Closeable {\n+  protected static final int ROWS_DIVISOR = 1000;\n+\n+  private final List<DataFile> completedFiles = Lists.newArrayList();\n+  private final PartitionSpec spec;\n+  private final FileFormat format;\n+  private final SparkAppenderFactory appenderFactory;\n+  private final OutputFileFactory fileFactory;\n+  private final FileIO io;\n+  private final long targetFileSize;\n+  private PartitionKey currentKey = null;\n+  private FileAppender<InternalRow> currentAppender = null;\n+  private EncryptedOutputFile currentFile = null;\n+  private long currentRows = 0;\n+\n+  BaseWriter(PartitionSpec spec, FileFormat format, SparkAppenderFactory appenderFactory,\n+             OutputFileFactory fileFactory, FileIO io, long targetFileSize) {\n+    this.spec = spec;\n+    this.format = format;\n+    this.appenderFactory = appenderFactory;\n+    this.fileFactory = fileFactory;\n+    this.io = io;\n+    this.targetFileSize = targetFileSize;\n+  }\n+\n+  public abstract void write(InternalRow row) throws IOException;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ea0c9a124718a97895fcc1a2feebeea1377beec0"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzAyMDY1MA==", "bodyText": "Yes. The alternative is to have two copies of everything, which I think isn't worth it. This API is unlikely to change between Spark versions because it is relied upon so heavily in Spark. I think it should be fine as long as we have thorough testing to catch any issues.", "url": "https://github.com/apache/iceberg/pull/1122#discussion_r443020650", "createdAt": "2020-06-19T19:58:02Z", "author": {"login": "rdblue"}, "path": "spark/src/main/java/org/apache/iceberg/spark/source/BaseWriter.java", "diffHunk": "@@ -0,0 +1,143 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.spark.source;\n+\n+import java.io.Closeable;\n+import java.io.IOException;\n+import java.util.List;\n+import org.apache.iceberg.DataFile;\n+import org.apache.iceberg.DataFiles;\n+import org.apache.iceberg.FileFormat;\n+import org.apache.iceberg.Metrics;\n+import org.apache.iceberg.PartitionSpec;\n+import org.apache.iceberg.encryption.EncryptedOutputFile;\n+import org.apache.iceberg.io.FileAppender;\n+import org.apache.iceberg.io.FileIO;\n+import org.apache.iceberg.relocated.com.google.common.collect.Lists;\n+import org.apache.iceberg.util.Tasks;\n+import org.apache.spark.sql.catalyst.InternalRow;\n+\n+abstract class BaseWriter implements Closeable {\n+  protected static final int ROWS_DIVISOR = 1000;\n+\n+  private final List<DataFile> completedFiles = Lists.newArrayList();\n+  private final PartitionSpec spec;\n+  private final FileFormat format;\n+  private final SparkAppenderFactory appenderFactory;\n+  private final OutputFileFactory fileFactory;\n+  private final FileIO io;\n+  private final long targetFileSize;\n+  private PartitionKey currentKey = null;\n+  private FileAppender<InternalRow> currentAppender = null;\n+  private EncryptedOutputFile currentFile = null;\n+  private long currentRows = 0;\n+\n+  BaseWriter(PartitionSpec spec, FileFormat format, SparkAppenderFactory appenderFactory,\n+             OutputFileFactory fileFactory, FileIO io, long targetFileSize) {\n+    this.spec = spec;\n+    this.format = format;\n+    this.appenderFactory = appenderFactory;\n+    this.fileFactory = fileFactory;\n+    this.io = io;\n+    this.targetFileSize = targetFileSize;\n+  }\n+\n+  public abstract void write(InternalRow row) throws IOException;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjE2ODgyMQ=="}, "originalCommit": {"oid": "ea0c9a124718a97895fcc1a2feebeea1377beec0"}, "originalPosition": 62}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3902, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}