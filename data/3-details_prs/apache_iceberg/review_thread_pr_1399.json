{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDc1NjkwOTA3", "number": 1399, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQwMDoxMDoyNFrOEi7PVQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQyMDoxODo0NVrOEnl2OQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1MDU3NjIxOnYy", "diffSide": "RIGHT", "path": "spark/src/main/java/org/apache/iceberg/spark/SparkTableUtil.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQwMDoxMDoyNFrOHRAhWQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQwMDoxMDoyNFrOHRAhWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzU5NjM3Nw==", "bodyText": "I think we should change to use a name mapping by default in a separate PR. For now, let's just support a name mapping when importing ORC data.\nMy rationale is that I think the two are independently useful. Someone might want to change the default, but not cherry-pick ORC changes. Similarly, someone might want to use a name mapping with ORC, but not want to default to name mapping.\nAlso, I think that we would want to default to name mapping slightly differently. It doesn't make sense to me to create a temporary mapping that is used for metrics here, unless that mapping is also used to read the data. So I would prefer to update tables when importing and add a mapping to table metadata by default, if it is not already there.", "url": "https://github.com/apache/iceberg/pull/1399#discussion_r487596377", "createdAt": "2020-09-14T00:10:24Z", "author": {"login": "rdblue"}, "path": "spark/src/main/java/org/apache/iceberg/spark/SparkTableUtil.java", "diffHunk": "@@ -540,7 +541,8 @@ private static void importUnpartitionedSparkTable(\n       Configuration conf = spark.sessionState().newHadoopConf();\n       MetricsConfig metricsConfig = MetricsConfig.fromProperties(targetTable.properties());\n       String nameMappingString = targetTable.properties().get(TableProperties.DEFAULT_NAME_MAPPING);\n-      NameMapping nameMapping = nameMappingString != null ? NameMappingParser.fromJson(nameMappingString) : null;\n+      NameMapping nameMapping = nameMappingString != null ?\n+          NameMappingParser.fromJson(nameMappingString) : MappingUtil.create(targetTable.schema());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "33433398940c3a60ba36b215b4b4063e8b41741f"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1MDYxMTA5OnYy", "diffSide": "RIGHT", "path": "spark2/src/test/java/org/apache/iceberg/spark/source/TestSparkTableUtil.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQwMDo0NjowMFrOHRAzaQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQyMDoxMTozN1rOHYRIrA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzYwMTAwMQ==", "bodyText": "While there are a lot of changes in this test, can you also move this to iceberg-spark instead of iceberg-spark2? I think it is in spark2 by accident, and moving it in IntelliJ produces no warnings. That way this also runs in the Java 11 test profile.", "url": "https://github.com/apache/iceberg/pull/1399#discussion_r487601001", "createdAt": "2020-09-14T00:46:00Z", "author": {"login": "rdblue"}, "path": "spark2/src/test/java/org/apache/iceberg/spark/source/TestSparkTableUtil.java", "diffHunk": "@@ -47,32 +47,31 @@\n import org.junit.After;\n import org.junit.AfterClass;\n import org.junit.Assert;\n+import org.junit.Assume;\n import org.junit.Before;\n import org.junit.BeforeClass;\n import org.junit.Rule;\n import org.junit.Test;\n+import org.junit.experimental.runners.Enclosed;\n import org.junit.rules.TemporaryFolder;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n \n import static org.apache.iceberg.TableProperties.DEFAULT_NAME_MAPPING;\n import static org.apache.iceberg.TableProperties.PARQUET_VECTORIZATION_ENABLED;\n import static org.apache.iceberg.types.Types.NestedField.optional;\n \n+@RunWith(Enclosed.class)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "33433398940c3a60ba36b215b4b4063e8b41741f"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDYwMDcxMw==", "bodyText": "I agree. I could work on another PR with that change, I was wondering if that'd minimize the diff in this PR and make it more clear. Thanks!", "url": "https://github.com/apache/iceberg/pull/1399#discussion_r494600713", "createdAt": "2020-09-24T20:46:37Z", "author": {"login": "edgarRd"}, "path": "spark2/src/test/java/org/apache/iceberg/spark/source/TestSparkTableUtil.java", "diffHunk": "@@ -47,32 +47,31 @@\n import org.junit.After;\n import org.junit.AfterClass;\n import org.junit.Assert;\n+import org.junit.Assume;\n import org.junit.Before;\n import org.junit.BeforeClass;\n import org.junit.Rule;\n import org.junit.Test;\n+import org.junit.experimental.runners.Enclosed;\n import org.junit.rules.TemporaryFolder;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n \n import static org.apache.iceberg.TableProperties.DEFAULT_NAME_MAPPING;\n import static org.apache.iceberg.TableProperties.PARQUET_VECTORIZATION_ENABLED;\n import static org.apache.iceberg.types.Types.NestedField.optional;\n \n+@RunWith(Enclosed.class)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzYwMTAwMQ=="}, "originalCommit": {"oid": "33433398940c3a60ba36b215b4b4063e8b41741f"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTIwODYyMA==", "bodyText": "Yeah, that's fine with me.", "url": "https://github.com/apache/iceberg/pull/1399#discussion_r495208620", "createdAt": "2020-09-25T20:11:37Z", "author": {"login": "rdblue"}, "path": "spark2/src/test/java/org/apache/iceberg/spark/source/TestSparkTableUtil.java", "diffHunk": "@@ -47,32 +47,31 @@\n import org.junit.After;\n import org.junit.AfterClass;\n import org.junit.Assert;\n+import org.junit.Assume;\n import org.junit.Before;\n import org.junit.BeforeClass;\n import org.junit.Rule;\n import org.junit.Test;\n+import org.junit.experimental.runners.Enclosed;\n import org.junit.rules.TemporaryFolder;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n \n import static org.apache.iceberg.TableProperties.DEFAULT_NAME_MAPPING;\n import static org.apache.iceberg.TableProperties.PARQUET_VECTORIZATION_ENABLED;\n import static org.apache.iceberg.types.Types.NestedField.optional;\n \n+@RunWith(Enclosed.class)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzYwMTAwMQ=="}, "originalCommit": {"oid": "33433398940c3a60ba36b215b4b4063e8b41741f"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5OTUwMDA5OnYy", "diffSide": "RIGHT", "path": "spark/src/main/java/org/apache/iceberg/spark/SparkTableUtil.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQyMDoxODo0NVrOHYRT_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQyMjowNToxN1rOHYU2HQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTIxMTUxOQ==", "bodyText": "This change needs to be reverted. The import process must create and store a mapping on the table. We should not use an ephemeral mapping that is immediately discarded.", "url": "https://github.com/apache/iceberg/pull/1399#discussion_r495211519", "createdAt": "2020-09-25T20:18:45Z", "author": {"login": "rdblue"}, "path": "spark/src/main/java/org/apache/iceberg/spark/SparkTableUtil.java", "diffHunk": "@@ -573,7 +574,8 @@ public static void importSparkPartitions(\n     int numShufflePartitions = spark.sessionState().conf().numShufflePartitions();\n     MetricsConfig metricsConfig = MetricsConfig.fromProperties(targetTable.properties());\n     String nameMappingString = targetTable.properties().get(TableProperties.DEFAULT_NAME_MAPPING);\n-    NameMapping nameMapping = nameMappingString != null ? NameMappingParser.fromJson(nameMappingString) : null;\n+    NameMapping nameMapping = nameMappingString != null ?\n+        NameMappingParser.fromJson(nameMappingString) : MappingUtil.create(targetTable.schema());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b9a9c4ec5bca134cdc730655be674d2022664bce"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTI1MTU4Mw==", "bodyText": "Yeah, somehow I missed this one but did it for the method of unpartitioned tables. Thanks for pointing this out. I've reverted the change.", "url": "https://github.com/apache/iceberg/pull/1399#discussion_r495251583", "createdAt": "2020-09-25T21:38:02Z", "author": {"login": "edgarRd"}, "path": "spark/src/main/java/org/apache/iceberg/spark/SparkTableUtil.java", "diffHunk": "@@ -573,7 +574,8 @@ public static void importSparkPartitions(\n     int numShufflePartitions = spark.sessionState().conf().numShufflePartitions();\n     MetricsConfig metricsConfig = MetricsConfig.fromProperties(targetTable.properties());\n     String nameMappingString = targetTable.properties().get(TableProperties.DEFAULT_NAME_MAPPING);\n-    NameMapping nameMapping = nameMappingString != null ? NameMappingParser.fromJson(nameMappingString) : null;\n+    NameMapping nameMapping = nameMappingString != null ?\n+        NameMappingParser.fromJson(nameMappingString) : MappingUtil.create(targetTable.schema());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTIxMTUxOQ=="}, "originalCommit": {"oid": "b9a9c4ec5bca134cdc730655be674d2022664bce"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTI2OTQwNQ==", "bodyText": "That explains it. I thought that you were going to, so I was surprised.", "url": "https://github.com/apache/iceberg/pull/1399#discussion_r495269405", "createdAt": "2020-09-25T22:05:17Z", "author": {"login": "rdblue"}, "path": "spark/src/main/java/org/apache/iceberg/spark/SparkTableUtil.java", "diffHunk": "@@ -573,7 +574,8 @@ public static void importSparkPartitions(\n     int numShufflePartitions = spark.sessionState().conf().numShufflePartitions();\n     MetricsConfig metricsConfig = MetricsConfig.fromProperties(targetTable.properties());\n     String nameMappingString = targetTable.properties().get(TableProperties.DEFAULT_NAME_MAPPING);\n-    NameMapping nameMapping = nameMappingString != null ? NameMappingParser.fromJson(nameMappingString) : null;\n+    NameMapping nameMapping = nameMappingString != null ?\n+        NameMappingParser.fromJson(nameMappingString) : MappingUtil.create(targetTable.schema());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTIxMTUxOQ=="}, "originalCommit": {"oid": "b9a9c4ec5bca134cdc730655be674d2022664bce"}, "originalPosition": 43}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3705, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}