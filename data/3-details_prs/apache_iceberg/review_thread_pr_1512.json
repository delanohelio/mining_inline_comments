{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDkzMzYwMjgz", "number": 1512, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQyMDo0ODoyMFrOEnmUPw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxODo1NTo1NlrOEoN8ag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5OTU3Njk1OnYy", "diffSide": "RIGHT", "path": "spark3/src/main/java/org/apache/iceberg/spark/source/SparkBatchScan.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQyMDo0ODoyMFrOHYSC7Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQyMjoyMDoxM1rOHYVZqg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTIyMzUzMw==", "bodyText": "if they aren't case sensitive aren't they equal if the lowercased names are equivelent?\nIe\n(insensitive) == (insenstive) && (TaBle).equals(table)?\nIf we just want to check the fields being equal I understand that too", "url": "https://github.com/apache/iceberg/pull/1512#discussion_r495223533", "createdAt": "2020-09-25T20:48:20Z", "author": {"login": "RussellSpitzer"}, "path": "spark3/src/main/java/org/apache/iceberg/spark/source/SparkBatchScan.java", "diffHunk": "@@ -208,6 +209,38 @@ public Statistics estimateStatistics() {\n     return new Stats(sizeInBytes, numRows);\n   }\n \n+  @Override\n+  public boolean equals(Object o) {\n+    if (this == o) {\n+      return true;\n+    }\n+\n+    if (o == null || getClass() != o.getClass()) {\n+      return false;\n+    }\n+\n+    SparkBatchScan that = (SparkBatchScan) o;\n+    // compare Spark schemas to ignore field ids\n+    StructType thisSchema = SparkSchemaUtil.convert(expectedSchema);\n+    StructType thatSchema = SparkSchemaUtil.convert(that.expectedSchema);\n+    return caseSensitive == that.caseSensitive &&", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "090eecde634aa8625c60b3ab8e70bf0e9cc60071"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTI3ODUwNg==", "bodyText": "My initial thought was that filter expression binding depends on whether this is case sensitive or not. But since we get this value from Spark and don't expect it to change (let alone in a single query), it seems unnecessary. I'm also not able to think of a case where a difference would matter without causing an exception.\nI'll remove this.", "url": "https://github.com/apache/iceberg/pull/1512#discussion_r495278506", "createdAt": "2020-09-25T22:20:13Z", "author": {"login": "rdblue"}, "path": "spark3/src/main/java/org/apache/iceberg/spark/source/SparkBatchScan.java", "diffHunk": "@@ -208,6 +209,38 @@ public Statistics estimateStatistics() {\n     return new Stats(sizeInBytes, numRows);\n   }\n \n+  @Override\n+  public boolean equals(Object o) {\n+    if (this == o) {\n+      return true;\n+    }\n+\n+    if (o == null || getClass() != o.getClass()) {\n+      return false;\n+    }\n+\n+    SparkBatchScan that = (SparkBatchScan) o;\n+    // compare Spark schemas to ignore field ids\n+    StructType thisSchema = SparkSchemaUtil.convert(expectedSchema);\n+    StructType thatSchema = SparkSchemaUtil.convert(that.expectedSchema);\n+    return caseSensitive == that.caseSensitive &&", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTIyMzUzMw=="}, "originalCommit": {"oid": "090eecde634aa8625c60b3ab8e70bf0e9cc60071"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5OTkxMTkwOnYy", "diffSide": "RIGHT", "path": "spark3/src/main/java/org/apache/iceberg/spark/source/SparkBatchScan.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQyMjoxODo0OVrOHYVWHg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQyMjoxODo0OVrOHYVWHg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTI3NzU5OA==", "bodyText": "Oops, I'm also missing an update that uses readSchema() and a lazy variable to avoid converting multiple times.", "url": "https://github.com/apache/iceberg/pull/1512#discussion_r495277598", "createdAt": "2020-09-25T22:18:49Z", "author": {"login": "rdblue"}, "path": "spark3/src/main/java/org/apache/iceberg/spark/source/SparkBatchScan.java", "diffHunk": "@@ -208,6 +209,38 @@ public Statistics estimateStatistics() {\n     return new Stats(sizeInBytes, numRows);\n   }\n \n+  @Override\n+  public boolean equals(Object o) {\n+    if (this == o) {\n+      return true;\n+    }\n+\n+    if (o == null || getClass() != o.getClass()) {\n+      return false;\n+    }\n+\n+    SparkBatchScan that = (SparkBatchScan) o;\n+    // compare Spark schemas to ignore field ids\n+    StructType thisSchema = SparkSchemaUtil.convert(expectedSchema);\n+    StructType thatSchema = SparkSchemaUtil.convert(that.expectedSchema);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "090eecde634aa8625c60b3ab8e70bf0e9cc60071"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwNjA2OTU0OnYy", "diffSide": "RIGHT", "path": "spark3/src/main/java/org/apache/iceberg/spark/source/SparkBatchScan.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxODo1NTo1NlrOHZLjEg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQyMTozMjowNVrOHZQXlA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjE2NTY1MA==", "bodyText": "would it make sense to use deepEquals here instead of constructing a string?", "url": "https://github.com/apache/iceberg/pull/1512#discussion_r496165650", "createdAt": "2020-09-28T18:55:56Z", "author": {"login": "holdenk"}, "path": "spark3/src/main/java/org/apache/iceberg/spark/source/SparkBatchScan.java", "diffHunk": "@@ -208,6 +213,33 @@ public Statistics estimateStatistics() {\n     return new Stats(sizeInBytes, numRows);\n   }\n \n+  @Override\n+  public boolean equals(Object o) {\n+    if (this == o) {\n+      return true;\n+    }\n+\n+    if (o == null || getClass() != o.getClass()) {\n+      return false;\n+    }\n+\n+    SparkBatchScan that = (SparkBatchScan) o;\n+    return table.toString().equals(that.table.toString()) &&\n+        readSchema().equals(that.readSchema()) && // compare Spark schemas to ignore field ids\n+        filterExpressions.toString().equals(that.filterExpressions.toString()) &&", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "38d865cec7e8cf098fd2ed6889b1f286c84376f0"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjI0NDYyOA==", "bodyText": "This is definitely something I think we should improve.\nRight now, we don't implement equals because we don't want people to use it to test semantic equivalence. Here, we actually want semantic equivalence, but with no utility to evaluate it the simplest way to check for identical structure is the string representation. A better first solution would be to build a comparison utility to test whether two expressions are structurally identical, and after that to introduce one for semantic equivalence.", "url": "https://github.com/apache/iceberg/pull/1512#discussion_r496244628", "createdAt": "2020-09-28T21:32:05Z", "author": {"login": "rdblue"}, "path": "spark3/src/main/java/org/apache/iceberg/spark/source/SparkBatchScan.java", "diffHunk": "@@ -208,6 +213,33 @@ public Statistics estimateStatistics() {\n     return new Stats(sizeInBytes, numRows);\n   }\n \n+  @Override\n+  public boolean equals(Object o) {\n+    if (this == o) {\n+      return true;\n+    }\n+\n+    if (o == null || getClass() != o.getClass()) {\n+      return false;\n+    }\n+\n+    SparkBatchScan that = (SparkBatchScan) o;\n+    return table.toString().equals(that.table.toString()) &&\n+        readSchema().equals(that.readSchema()) && // compare Spark schemas to ignore field ids\n+        filterExpressions.toString().equals(that.filterExpressions.toString()) &&", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjE2NTY1MA=="}, "originalCommit": {"oid": "38d865cec7e8cf098fd2ed6889b1f286c84376f0"}, "originalPosition": 45}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3537, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}