{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzcwMDk4MjE2", "number": 768, "title": "Metrics javadoc fixes #767", "bodyText": "Adding javadoc to Metrics following Parquet metrics implementation as proposal.", "createdAt": "2020-02-03T03:09:37Z", "url": "https://github.com/apache/iceberg/pull/768", "merged": true, "mergeCommit": {"oid": "e164f63550d69755391f449e5abb94b49267ac1f"}, "closed": true, "closedAt": "2020-02-17T21:17:00Z", "author": {"login": "edgarRd"}, "timelineItems": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcAkBiwgH2gAyMzcwMDk4MjE2OjY5Zjg1NjBiODU4NmMwNDJiNTIwNWIyZWNlNTUyNTRkMzFlMWQxNzY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcFTTMiAH2gAyMzcwMDk4MjE2OmNhMjg1OWEwOTk4ZTYwNTJhYTRiOGY3ZGY3NmMyYTZiMWZiNTI5NWQ=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "69f8560b8586c042b5205b2ece55254d31e1d176", "author": {"user": {"login": "edgarRd", "name": "Edgar Rodriguez"}}, "url": "https://github.com/apache/iceberg/commit/69f8560b8586c042b5205b2ece55254d31e1d176", "committedDate": "2020-02-03T03:04:21Z", "message": "Adding docs on Metrics"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUyMDAzMDMx", "url": "https://github.com/apache/iceberg/pull/768#pullrequestreview-352003031", "createdAt": "2020-02-03T03:11:36Z", "commit": {"oid": "be1968b8adb934da72735f59c9b0fe225db36325"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QwMzoxMTozNlrOFklg6A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QwMzoxMTozNlrOFklg6A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzkwNzY4OA==", "bodyText": "Note that in this case valueCounts == nullValueCounts and the count is the same as recordCount.", "url": "https://github.com/apache/iceberg/pull/768#discussion_r373907688", "createdAt": "2020-02-03T03:11:36Z", "author": {"login": "edgarRd"}, "path": "core/src/test/java/org/apache/iceberg/TestMetrics.java", "diffHunk": "@@ -114,6 +114,56 @@ public abstract File writeRecords(Schema schema, Map<String, String> properties,\n \n   public abstract int splitCount(File parquetFile) throws IOException;\n \n+  @Test\n+  public void testMetricsForRepeatedValues() throws IOException {\n+    Record firstRecord = new Record(AvroSchemaUtil.convert(SIMPLE_SCHEMA.asStruct()));\n+    firstRecord.put(\"booleanCol\", true);\n+    firstRecord.put(\"intCol\", 3);\n+    firstRecord.put(\"longCol\", null);\n+    firstRecord.put(\"floatCol\", 2.0F);\n+    firstRecord.put(\"doubleCol\", 2.0D);\n+    firstRecord.put(\"decimalCol\", new BigDecimal(\"3.50\"));\n+    firstRecord.put(\"stringCol\", \"AAA\");\n+    firstRecord.put(\"dateCol\", 1500);\n+    firstRecord.put(\"timeCol\", 2000L);\n+    firstRecord.put(\"timestampCol\", 0L);\n+    firstRecord.put(\"uuidCol\", uuid);\n+    firstRecord.put(\"fixedCol\", fixed);\n+    firstRecord.put(\"binaryCol\", \"S\".getBytes());\n+    Record secondRecord = new Record(AvroSchemaUtil.convert(SIMPLE_SCHEMA.asStruct()));\n+    secondRecord.put(\"booleanCol\", true);\n+    secondRecord.put(\"intCol\", 3);\n+    secondRecord.put(\"longCol\", null);\n+    secondRecord.put(\"floatCol\", 2.0F);\n+    secondRecord.put(\"doubleCol\", 2.0D);\n+    secondRecord.put(\"decimalCol\", new BigDecimal(\"3.50\"));\n+    secondRecord.put(\"stringCol\", \"AAA\");\n+    secondRecord.put(\"dateCol\", 1500);\n+    secondRecord.put(\"timeCol\", 2000L);\n+    secondRecord.put(\"timestampCol\", 0L);\n+    secondRecord.put(\"uuidCol\", uuid);\n+    secondRecord.put(\"fixedCol\", fixed);\n+    secondRecord.put(\"binaryCol\", \"S\".getBytes());\n+\n+    File recordsFile = writeRecords(SIMPLE_SCHEMA, firstRecord, secondRecord);\n+\n+    Metrics metrics = getMetrics(Files.localInput(recordsFile));\n+    Assert.assertEquals(2L, (long) metrics.recordCount());\n+    assertCounts(1, 2L, 0L, metrics);\n+    assertCounts(2, 2L, 0L, metrics);\n+    assertCounts(3, 2L, 2L, metrics);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "be1968b8adb934da72735f59c9b0fe225db36325"}, "originalPosition": 41}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c8d760daa457a15823aeaa7bd1b8a63be17597fd", "author": {"user": {"login": "edgarRd", "name": "Edgar Rodriguez"}}, "url": "https://github.com/apache/iceberg/commit/c8d760daa457a15823aeaa7bd1b8a63be17597fd", "committedDate": "2020-02-03T03:15:58Z", "message": "Adding test for repeated values count on metrics"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUyNDE5ODc4", "url": "https://github.com/apache/iceberg/pull/768#pullrequestreview-352419878", "createdAt": "2020-02-03T17:13:17Z", "commit": {"oid": "c8d760daa457a15823aeaa7bd1b8a63be17597fd"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QxNzoxMzoxN1rOFk5GPw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QxNzoxMzoxN1rOFk5GPw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDIyODU0Mw==", "bodyText": "Nit: should not be left blank or else we get javadoc warnings.", "url": "https://github.com/apache/iceberg/pull/768#discussion_r374228543", "createdAt": "2020-02-03T17:13:17Z", "author": {"login": "rdblue"}, "path": "api/src/main/java/org/apache/iceberg/Metrics.java", "diffHunk": "@@ -59,26 +62,56 @@ public Metrics(Long rowCount,\n     this.upperBounds = upperBounds;\n   }\n \n+  /**\n+   * Get the number of records (rows) in file.\n+   *\n+   * @return", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c8d760daa457a15823aeaa7bd1b8a63be17597fd"}, "originalPosition": 17}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUyNDIwMTQ2", "url": "https://github.com/apache/iceberg/pull/768#pullrequestreview-352420146", "createdAt": "2020-02-03T17:13:42Z", "commit": {"oid": "c8d760daa457a15823aeaa7bd1b8a63be17597fd"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QxNzoxMzo0MlrOFk5HFQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QxNzoxMzo0MlrOFk5HFQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDIyODc1Nw==", "bodyText": "All values including nulls and NaN?", "url": "https://github.com/apache/iceberg/pull/768#discussion_r374228757", "createdAt": "2020-02-03T17:13:42Z", "author": {"login": "rdblue"}, "path": "api/src/main/java/org/apache/iceberg/Metrics.java", "diffHunk": "@@ -59,26 +62,56 @@ public Metrics(Long rowCount,\n     this.upperBounds = upperBounds;\n   }\n \n+  /**\n+   * Get the number of records (rows) in file.\n+   *\n+   * @return\n+   */\n   public Long recordCount() {\n     return rowCount;\n   }\n \n+  /**\n+   * Get the number of bytes for all fields in a file.\n+   *\n+   * @return a Map of fieldId to the size in bytes\n+   */\n   public Map<Integer, Long> columnSizes() {\n     return columnSizes;\n   }\n \n+  /**\n+   * Get the number of all values, including null and repeated.\n+   *\n+   * @return a Map of fieldId to the number of all values", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c8d760daa457a15823aeaa7bd1b8a63be17597fd"}, "originalPosition": 35}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUyNDIwNDk4", "url": "https://github.com/apache/iceberg/pull/768#pullrequestreview-352420498", "createdAt": "2020-02-03T17:14:15Z", "commit": {"oid": "c8d760daa457a15823aeaa7bd1b8a63be17597fd"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QxNzoxNDoxNlrOFk5IHQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QxNzoxNDoxNlrOFk5IHQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDIyOTAyMQ==", "bodyText": "Can we also add a reference to the conversion back to a value? And maybe one to the spec for that conversion?", "url": "https://github.com/apache/iceberg/pull/768#discussion_r374229021", "createdAt": "2020-02-03T17:14:16Z", "author": {"login": "rdblue"}, "path": "api/src/main/java/org/apache/iceberg/Metrics.java", "diffHunk": "@@ -59,26 +62,56 @@ public Metrics(Long rowCount,\n     this.upperBounds = upperBounds;\n   }\n \n+  /**\n+   * Get the number of records (rows) in file.\n+   *\n+   * @return\n+   */\n   public Long recordCount() {\n     return rowCount;\n   }\n \n+  /**\n+   * Get the number of bytes for all fields in a file.\n+   *\n+   * @return a Map of fieldId to the size in bytes\n+   */\n   public Map<Integer, Long> columnSizes() {\n     return columnSizes;\n   }\n \n+  /**\n+   * Get the number of all values, including null and repeated.\n+   *\n+   * @return a Map of fieldId to the number of all values\n+   */\n   public Map<Integer, Long> valueCounts() {\n     return valueCounts;\n   }\n \n+  /**\n+   * Get the number of null values for all fields in a file.\n+   *\n+   * @return a Map of fieldId to the number of nulls\n+   */\n   public Map<Integer, Long> nullValueCounts() {\n     return nullValueCounts;\n   }\n \n+  /**\n+   * Get the non-null lower bound values for all fields in a file.\n+   *\n+   * @return a Map of fieldId to the lower bound value as a ByteBuffer", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c8d760daa457a15823aeaa7bd1b8a63be17597fd"}, "originalPosition": 53}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUyNDIxNDM3", "url": "https://github.com/apache/iceberg/pull/768#pullrequestreview-352421437", "createdAt": "2020-02-03T17:15:46Z", "commit": {"oid": "c8d760daa457a15823aeaa7bd1b8a63be17597fd"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QxNzoxNTo0N1rOFk5K_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QxNzoxNTo0N1rOFk5K_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDIyOTc1OQ==", "bodyText": "What do you want to test with this case?", "url": "https://github.com/apache/iceberg/pull/768#discussion_r374229759", "createdAt": "2020-02-03T17:15:47Z", "author": {"login": "rdblue"}, "path": "core/src/test/java/org/apache/iceberg/TestMetrics.java", "diffHunk": "@@ -114,6 +114,56 @@ public abstract File writeRecords(Schema schema, Map<String, String> properties,\n \n   public abstract int splitCount(File parquetFile) throws IOException;\n \n+  @Test\n+  public void testMetricsForRepeatedValues() throws IOException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c8d760daa457a15823aeaa7bd1b8a63be17597fd"}, "originalPosition": 5}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ca2859a0998e6052aa4b8f7df76c2a6b1fb5295d", "author": {"user": {"login": "edgarRd", "name": "Edgar Rodriguez"}}, "url": "https://github.com/apache/iceberg/commit/ca2859a0998e6052aa4b8f7df76c2a6b1fb5295d", "committedDate": "2020-02-17T20:24:52Z", "message": "PR comments"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4910, "cost": 1, "resetAt": "2021-10-29T19:57:52Z"}}}