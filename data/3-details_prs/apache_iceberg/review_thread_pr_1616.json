{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA0MjUyNTc3", "number": 1616, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQwMTowODo0NVrOEuPbew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQyMDoxOTo0N1rOEuq8lQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2OTIyNzQ3OnYy", "diffSide": "RIGHT", "path": "spark/src/main/java/org/apache/iceberg/actions/Actions.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQwMTowODo0NVrOHig_Kg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQxNzozMDozMFrOHjJsjA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTk1NDA5MA==", "bodyText": "Using our reflection helpers, this could be simpler:\n  try {\n    DynConstructors.Ctor<Actions> ctor = DynConstructors.builder()\n            .impl(SparkActions.class, SparkSession.class, Table.class)\n            .build();\n    return ctor;\n  } catch (NoSuchMethodException e) {\n    throw new UnsupportedOperationException(\"Cannot find Actions implementation on the classpath\");\n  }", "url": "https://github.com/apache/iceberg/pull/1616#discussion_r505954090", "createdAt": "2020-10-16T01:08:45Z", "author": {"login": "rdblue"}, "path": "spark/src/main/java/org/apache/iceberg/actions/Actions.java", "diffHunk": "@@ -19,25 +19,57 @@\n \n package org.apache.iceberg.actions;\n \n+import java.lang.reflect.Constructor;\n+import java.lang.reflect.InvocationTargetException;\n import org.apache.iceberg.Table;\n import org.apache.spark.sql.SparkSession;\n \n public class Actions {\n+  private static final String IMPL_NAME = \"SparkActions\";\n+\n+  private static Class<Actions> implClass;\n+  private static Constructor<Actions> implConstructor;\n \n   private SparkSession spark;\n   private Table table;\n \n-  private Actions(SparkSession spark, Table table) {\n+  protected Actions(SparkSession spark, Table table) {\n     this.spark = spark;\n     this.table = table;\n   }\n \n+  private static Constructor actionConstructor() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3f5fb2b76898a3fdc2e9bd6e4b96df0671e5180c"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjUyMzY5NQ==", "bodyText": "Unfortunately DynConstructor wraps up exceptions (no explicit throws) a bit differently so we can't just catch a NSME, let me see if I can do something similar.", "url": "https://github.com/apache/iceberg/pull/1616#discussion_r506523695", "createdAt": "2020-10-16T15:05:13Z", "author": {"login": "RussellSpitzer"}, "path": "spark/src/main/java/org/apache/iceberg/actions/Actions.java", "diffHunk": "@@ -19,25 +19,57 @@\n \n package org.apache.iceberg.actions;\n \n+import java.lang.reflect.Constructor;\n+import java.lang.reflect.InvocationTargetException;\n import org.apache.iceberg.Table;\n import org.apache.spark.sql.SparkSession;\n \n public class Actions {\n+  private static final String IMPL_NAME = \"SparkActions\";\n+\n+  private static Class<Actions> implClass;\n+  private static Constructor<Actions> implConstructor;\n \n   private SparkSession spark;\n   private Table table;\n \n-  private Actions(SparkSession spark, Table table) {\n+  protected Actions(SparkSession spark, Table table) {\n     this.spark = spark;\n     this.table = table;\n   }\n \n+  private static Constructor actionConstructor() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTk1NDA5MA=="}, "originalCommit": {"oid": "3f5fb2b76898a3fdc2e9bd6e4b96df0671e5180c"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjUyNTc3Nw==", "bodyText": "we need build checked :| which has this code which kinda makes me laugh a little\n    @SuppressWarnings(\"unchecked\")\n    public <C> Ctor<C> buildChecked() throws NoSuchMethodException {", "url": "https://github.com/apache/iceberg/pull/1616#discussion_r506525777", "createdAt": "2020-10-16T15:06:54Z", "author": {"login": "RussellSpitzer"}, "path": "spark/src/main/java/org/apache/iceberg/actions/Actions.java", "diffHunk": "@@ -19,25 +19,57 @@\n \n package org.apache.iceberg.actions;\n \n+import java.lang.reflect.Constructor;\n+import java.lang.reflect.InvocationTargetException;\n import org.apache.iceberg.Table;\n import org.apache.spark.sql.SparkSession;\n \n public class Actions {\n+  private static final String IMPL_NAME = \"SparkActions\";\n+\n+  private static Class<Actions> implClass;\n+  private static Constructor<Actions> implConstructor;\n \n   private SparkSession spark;\n   private Table table;\n \n-  private Actions(SparkSession spark, Table table) {\n+  protected Actions(SparkSession spark, Table table) {\n     this.spark = spark;\n     this.table = table;\n   }\n \n+  private static Constructor actionConstructor() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTk1NDA5MA=="}, "originalCommit": {"oid": "3f5fb2b76898a3fdc2e9bd6e4b96df0671e5180c"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjYyMTA2OA==", "bodyText": "Yeah, the API allows you to catch checked exceptions if you want to handle them, or the normal path will wrap them with error messages and unchecked exceptions.", "url": "https://github.com/apache/iceberg/pull/1616#discussion_r506621068", "createdAt": "2020-10-16T17:30:30Z", "author": {"login": "rdblue"}, "path": "spark/src/main/java/org/apache/iceberg/actions/Actions.java", "diffHunk": "@@ -19,25 +19,57 @@\n \n package org.apache.iceberg.actions;\n \n+import java.lang.reflect.Constructor;\n+import java.lang.reflect.InvocationTargetException;\n import org.apache.iceberg.Table;\n import org.apache.spark.sql.SparkSession;\n \n public class Actions {\n+  private static final String IMPL_NAME = \"SparkActions\";\n+\n+  private static Class<Actions> implClass;\n+  private static Constructor<Actions> implConstructor;\n \n   private SparkSession spark;\n   private Table table;\n \n-  private Actions(SparkSession spark, Table table) {\n+  protected Actions(SparkSession spark, Table table) {\n     this.spark = spark;\n     this.table = table;\n   }\n \n+  private static Constructor actionConstructor() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTk1NDA5MA=="}, "originalCommit": {"oid": "3f5fb2b76898a3fdc2e9bd6e4b96df0671e5180c"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE3MzczNTg5OnYy", "diffSide": "RIGHT", "path": "spark2/src/main/java/org/apache/iceberg/actions/SparkActions.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQyMDoxOTo0N1rOHjOpYQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQxNToxNjoyOVrOHkT30w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjcwMjE3Nw==", "bodyText": "Do we need to make these public?", "url": "https://github.com/apache/iceberg/pull/1616#discussion_r506702177", "createdAt": "2020-10-16T20:19:47Z", "author": {"login": "aokolnychyi"}, "path": "spark2/src/main/java/org/apache/iceberg/actions/SparkActions.java", "diffHunk": "@@ -0,0 +1,29 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.actions;\n+\n+import org.apache.iceberg.Table;\n+import org.apache.spark.sql.SparkSession;\n+\n+public class SparkActions extends Actions {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cdd4e8bd30329b13d364c5eea9c64663e482c2c5"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzgzNjM3MQ==", "bodyText": "I guess not, I'll close them", "url": "https://github.com/apache/iceberg/pull/1616#discussion_r507836371", "createdAt": "2020-10-19T15:16:29Z", "author": {"login": "RussellSpitzer"}, "path": "spark2/src/main/java/org/apache/iceberg/actions/SparkActions.java", "diffHunk": "@@ -0,0 +1,29 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.actions;\n+\n+import org.apache.iceberg.Table;\n+import org.apache.spark.sql.SparkSession;\n+\n+public class SparkActions extends Actions {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjcwMjE3Nw=="}, "originalCommit": {"oid": "cdd4e8bd30329b13d364c5eea9c64663e482c2c5"}, "originalPosition": 25}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3603, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}