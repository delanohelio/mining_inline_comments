{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE0Njc5NzYx", "number": 1011, "reviewThreads": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QxNTo1ODo0MVrOD6ULig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QwMDoxNjowNFrOD73ibA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyNDc0NjM0OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/apache/iceberg/io/CloseableIterable.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QxNTo1ODo0MVrOGSFaCg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQwMzozNjoyMFrOGSX2NQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTYxNjEzOA==", "bodyText": "This isn't correct. CloseableIterable#close will close all open iterators created by the Iterable. The purpose is to enable try-with-resources instead of relying on callers to remember to close:\ntry (CloseableIterable<T> iterable = open(...)) {\n  for (T item : iterable) {\n    process(item);\n  }\n}\nIf an iterator closed the iterable, then it would close other iterators that may be still used in other threads.\nInstead, this should check whether iterator is Closeable and call close on it.", "url": "https://github.com/apache/iceberg/pull/1011#discussion_r421616138", "createdAt": "2020-05-07T15:58:41Z", "author": {"login": "rdblue"}, "path": "api/src/main/java/org/apache/iceberg/io/CloseableIterable.java", "diffHunk": "@@ -32,6 +32,27 @@\n import org.apache.iceberg.exceptions.RuntimeIOException;\n \n public interface CloseableIterable<T> extends Iterable<T>, Closeable {\n+\n+  default CloseableIterator<T> closeableIterator() {\n+    Iterator<T> iterator = iterator();\n+    return new CloseableIterator<T>() {\n+      @Override\n+      public void close() throws IOException {\n+        CloseableIterable.this.close();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bae4917de65f739d1094e3162127f45620c465f3"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTkxODI2MQ==", "bodyText": "Thanks for pointing this out, I've fixed this in the new patch.", "url": "https://github.com/apache/iceberg/pull/1011#discussion_r421918261", "createdAt": "2020-05-08T03:36:20Z", "author": {"login": "openinx"}, "path": "api/src/main/java/org/apache/iceberg/io/CloseableIterable.java", "diffHunk": "@@ -32,6 +32,27 @@\n import org.apache.iceberg.exceptions.RuntimeIOException;\n \n public interface CloseableIterable<T> extends Iterable<T>, Closeable {\n+\n+  default CloseableIterator<T> closeableIterator() {\n+    Iterator<T> iterator = iterator();\n+    return new CloseableIterator<T>() {\n+      @Override\n+      public void close() throws IOException {\n+        CloseableIterable.this.close();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTYxNjEzOA=="}, "originalCommit": {"oid": "bae4917de65f739d1094e3162127f45620c465f3"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyNDc1NjIxOnYy", "diffSide": "RIGHT", "path": "mr/src/main/java/org/apache/iceberg/mr/mapreduce/IcebergInputFormat.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QxNjowMDo0NVrOGSFf6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QxNjowMDo0NVrOGSFf6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTYxNzY0Mg==", "bodyText": "Even if this is correct style, I don't think it is worth changing because it can cause commit conflicts.", "url": "https://github.com/apache/iceberg/pull/1011#discussion_r421617642", "createdAt": "2020-05-07T16:00:45Z", "author": {"login": "rdblue"}, "path": "mr/src/main/java/org/apache/iceberg/mr/mapreduce/IcebergInputFormat.java", "diffHunk": "@@ -359,25 +357,26 @@ public void close() throws IOException {\n       return nameToPos;\n     }\n \n-    private Iterator<T> open(FileScanTask currentTask) {\n+    private CloseableIterator<T> open(FileScanTask currentTask) {\n       DataFile file = currentTask.file();\n       // schema of rows returned by readers\n       PartitionSpec spec = currentTask.spec();\n-      Set<Integer> idColumns =  Sets.intersection(spec.identitySourceIds(), TypeUtil.getProjectedIds(expectedSchema));\n+      Set<Integer> idColumns = Sets.intersection(spec.identitySourceIds(), TypeUtil.getProjectedIds(expectedSchema));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bae4917de65f739d1094e3162127f45620c465f3"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzNTQwNDQxOnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/apache/iceberg/io/CloseableIterable.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQxNzoxODo0MVrOGTlz8A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwMzoyMDoxNVrOGT0o8Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzE5NTYzMg==", "bodyText": "Why doesn't this update iterator to return a CloseableIterator? I don't think it is a good idea to have two methods that do basically the same thing, but one provides a closeable version. Then we need to remember to call this variant.", "url": "https://github.com/apache/iceberg/pull/1011#discussion_r423195632", "createdAt": "2020-05-11T17:18:41Z", "author": {"login": "rdblue"}, "path": "api/src/main/java/org/apache/iceberg/io/CloseableIterable.java", "diffHunk": "@@ -32,6 +32,31 @@\n import org.apache.iceberg.exceptions.RuntimeIOException;\n \n public interface CloseableIterable<T> extends Iterable<T>, Closeable {\n+\n+  default CloseableIterator<T> closeableIterator() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8393933822410c3bbcd1e487892bd8236c742959"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzQzODU3Nw==", "bodyText": "Well,  sounds good to unify the closeableIterator and iterator methods into one, let me update the patch. Thanks.", "url": "https://github.com/apache/iceberg/pull/1011#discussion_r423438577", "createdAt": "2020-05-12T03:20:15Z", "author": {"login": "openinx"}, "path": "api/src/main/java/org/apache/iceberg/io/CloseableIterable.java", "diffHunk": "@@ -32,6 +32,31 @@\n import org.apache.iceberg.exceptions.RuntimeIOException;\n \n public interface CloseableIterable<T> extends Iterable<T>, Closeable {\n+\n+  default CloseableIterator<T> closeableIterator() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzE5NTYzMg=="}, "originalCommit": {"oid": "8393933822410c3bbcd1e487892bd8236c742959"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0MTAxMjgyOnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/apache/iceberg/io/CloseableIterable.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QwMDowODozMFrOGUdJlg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QwMTo0NjoyMVrOGUeqnQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDEwMjI5NA==", "bodyText": "This changes the semantics of the iterator. Before, the iterators returned by this could be Closeable, but the Iterable itself was not Closeable. I think it would be unlikely to have an Iterable without a close operation that produced an Iterator that could be closed (since it should be a CloseableGroup) but I still think it makes sense to preserve whether the Iterator is Closeable here.\nHow about using CloseableIterator.wrap that calls close on the wrapped Iterator if it is Closeable?", "url": "https://github.com/apache/iceberg/pull/1011#discussion_r424102294", "createdAt": "2020-05-13T00:08:30Z", "author": {"login": "rdblue"}, "path": "api/src/main/java/org/apache/iceberg/io/CloseableIterable.java", "diffHunk": "@@ -43,8 +52,8 @@ public void close() {\n       }\n \n       @Override\n-      public Iterator<E> iterator() {\n-        return iterable.iterator();\n+      public CloseableIterator<E> iterator() {\n+        return CloseableIterator.withNoopClose(iterable.iterator());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "272a019b327124bb400500d56335632190fefe0e"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDEwMjU4Nw==", "bodyText": "Actually, it looks like that's what withClose does. We should use that instead.", "url": "https://github.com/apache/iceberg/pull/1011#discussion_r424102587", "createdAt": "2020-05-13T00:09:43Z", "author": {"login": "rdblue"}, "path": "api/src/main/java/org/apache/iceberg/io/CloseableIterable.java", "diffHunk": "@@ -43,8 +52,8 @@ public void close() {\n       }\n \n       @Override\n-      public Iterator<E> iterator() {\n-        return iterable.iterator();\n+      public CloseableIterator<E> iterator() {\n+        return CloseableIterator.withNoopClose(iterable.iterator());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDEwMjI5NA=="}, "originalCommit": {"oid": "272a019b327124bb400500d56335632190fefe0e"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDEyNzEzMw==", "bodyText": "OK, I misunderstood that the Iterable without a close operation would never create a closeable iterator (sounds a bit strange here but seems possible to have a closeable iterator).", "url": "https://github.com/apache/iceberg/pull/1011#discussion_r424127133", "createdAt": "2020-05-13T01:46:21Z", "author": {"login": "openinx"}, "path": "api/src/main/java/org/apache/iceberg/io/CloseableIterable.java", "diffHunk": "@@ -43,8 +52,8 @@ public void close() {\n       }\n \n       @Override\n-      public Iterator<E> iterator() {\n-        return iterable.iterator();\n+      public CloseableIterator<E> iterator() {\n+        return CloseableIterator.withNoopClose(iterable.iterator());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDEwMjI5NA=="}, "originalCommit": {"oid": "272a019b327124bb400500d56335632190fefe0e"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0MTAxNzM3OnYy", "diffSide": "LEFT", "path": "api/src/main/java/org/apache/iceberg/io/CloseableIterable.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QwMDoxMToyNFrOGUdMVA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QwMTo0Nzo1N1rOGUesaQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDEwMjk5Ng==", "bodyText": "Nit: could you add this line back to avoid commit conflicts?", "url": "https://github.com/apache/iceberg/pull/1011#discussion_r424102996", "createdAt": "2020-05-13T00:11:24Z", "author": {"login": "rdblue"}, "path": "api/src/main/java/org/apache/iceberg/io/CloseableIterable.java", "diffHunk": "@@ -192,5 +206,4 @@ public E next() {\n       }\n     }\n   }\n-", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "272a019b327124bb400500d56335632190fefe0e"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDEyNzU5Mw==", "bodyText": "OK", "url": "https://github.com/apache/iceberg/pull/1011#discussion_r424127593", "createdAt": "2020-05-13T01:47:57Z", "author": {"login": "openinx"}, "path": "api/src/main/java/org/apache/iceberg/io/CloseableIterable.java", "diffHunk": "@@ -192,5 +206,4 @@ public E next() {\n       }\n     }\n   }\n-", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDEwMjk5Ng=="}, "originalCommit": {"oid": "272a019b327124bb400500d56335632190fefe0e"}, "originalPosition": 76}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0MTAxODEzOnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/apache/iceberg/io/CloseableIterator.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QwMDoxMTo1M1rOGUdMxQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QwMDoxMTo1M1rOGUdMxQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDEwMzEwOQ==", "bodyText": "Nit: Can you add a newline after this if block?", "url": "https://github.com/apache/iceberg/pull/1011#discussion_r424103109", "createdAt": "2020-05-13T00:11:53Z", "author": {"login": "rdblue"}, "path": "api/src/main/java/org/apache/iceberg/io/CloseableIterator.java", "diffHunk": "@@ -0,0 +1,73 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.io;\n+\n+import java.io.Closeable;\n+import java.io.IOException;\n+import java.util.Iterator;\n+\n+public interface CloseableIterator<T> extends Iterator<T>, Closeable {\n+\n+  static <E> CloseableIterator<E> withNoopClose(Iterator<E> iterator) {\n+    if (iterator instanceof CloseableIterator) {\n+      return (CloseableIterator<E>) iterator;\n+    }\n+    return new CloseableIterator<E>() {\n+      @Override\n+      public void close() throws IOException {\n+        // do nothing.\n+      }\n+\n+      @Override\n+      public boolean hasNext() {\n+        return iterator.hasNext();\n+      }\n+\n+      @Override\n+      public E next() {\n+        return iterator.next();\n+      }\n+    };\n+  }\n+\n+  static <E> CloseableIterator<E> withClose(Iterator<E> iterator) {\n+    if (iterator instanceof CloseableIterator) {\n+      return (CloseableIterator<E>) iterator;\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "272a019b327124bb400500d56335632190fefe0e"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0MTAxODUyOnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/apache/iceberg/io/CloseableIterator.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QwMDoxMjowNVrOGUdNAA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QwMTo1MTozNVrOGUewXg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDEwMzE2OA==", "bodyText": "I don't think this is needed after removing it above. The other class will work fine because it won't call close if the Iterator doesn't implement Closeable.", "url": "https://github.com/apache/iceberg/pull/1011#discussion_r424103168", "createdAt": "2020-05-13T00:12:05Z", "author": {"login": "rdblue"}, "path": "api/src/main/java/org/apache/iceberg/io/CloseableIterator.java", "diffHunk": "@@ -0,0 +1,73 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.io;\n+\n+import java.io.Closeable;\n+import java.io.IOException;\n+import java.util.Iterator;\n+\n+public interface CloseableIterator<T> extends Iterator<T>, Closeable {\n+\n+  static <E> CloseableIterator<E> withNoopClose(Iterator<E> iterator) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "272a019b327124bb400500d56335632190fefe0e"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDEyODYwNg==", "bodyText": "+1", "url": "https://github.com/apache/iceberg/pull/1011#discussion_r424128606", "createdAt": "2020-05-13T01:51:35Z", "author": {"login": "openinx"}, "path": "api/src/main/java/org/apache/iceberg/io/CloseableIterator.java", "diffHunk": "@@ -0,0 +1,73 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.io;\n+\n+import java.io.Closeable;\n+import java.io.IOException;\n+import java.util.Iterator;\n+\n+public interface CloseableIterator<T> extends Iterator<T>, Closeable {\n+\n+  static <E> CloseableIterator<E> withNoopClose(Iterator<E> iterator) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDEwMzE2OA=="}, "originalCommit": {"oid": "272a019b327124bb400500d56335632190fefe0e"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0MTAyMTc5OnYy", "diffSide": "RIGHT", "path": "mr/src/main/java/org/apache/iceberg/mr/mapreduce/IcebergInputFormat.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QwMDoxNDoxNFrOGUdPGQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QwMDoxNDoxNFrOGUdPGQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDEwMzcwNQ==", "bodyText": "Can you add a newline after the control flow block above?", "url": "https://github.com/apache/iceberg/pull/1011#discussion_r424103705", "createdAt": "2020-05-13T00:14:14Z", "author": {"login": "rdblue"}, "path": "mr/src/main/java/org/apache/iceberg/mr/mapreduce/IcebergInputFormat.java", "diffHunk": "@@ -359,25 +357,26 @@ public void close() throws IOException {\n       return nameToPos;\n     }\n \n-    private Iterator<T> open(FileScanTask currentTask) {\n+    private CloseableIterator<T> open(FileScanTask currentTask) {\n       DataFile file = currentTask.file();\n       // schema of rows returned by readers\n       PartitionSpec spec = currentTask.spec();\n       Set<Integer> idColumns =  Sets.intersection(spec.identitySourceIds(), TypeUtil.getProjectedIds(expectedSchema));\n       boolean hasJoinedPartitionColumns = !idColumns.isEmpty();\n \n+      CloseableIterable<T> iterable;\n       if (hasJoinedPartitionColumns) {\n         Schema readDataSchema = TypeUtil.selectNot(expectedSchema, idColumns);\n         Schema identityPartitionSchema = TypeUtil.select(expectedSchema, idColumns);\n-        return Iterators.transform(\n-            open(currentTask, readDataSchema),\n+        iterable = CloseableIterable.transform(open(currentTask, readDataSchema),\n             row -> withIdentityPartitionColumns(row, identityPartitionSchema, spec, file.partition()));\n       } else {\n-        return open(currentTask, expectedSchema);\n+        iterable = open(currentTask, expectedSchema);\n       }\n+      return iterable.iterator();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "272a019b327124bb400500d56335632190fefe0e"}, "originalPosition": 76}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0MTAyMjIwOnYy", "diffSide": "RIGHT", "path": "mr/src/main/java/org/apache/iceberg/mr/mapreduce/IcebergInputFormat.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QwMDoxNDozMFrOGUdPYg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQyMDo1ODoyOFrOGVt98Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDEwMzc3OA==", "bodyText": "Same here. Could you add a newline after the control flow block?", "url": "https://github.com/apache/iceberg/pull/1011#discussion_r424103778", "createdAt": "2020-05-13T00:14:30Z", "author": {"login": "rdblue"}, "path": "mr/src/main/java/org/apache/iceberg/mr/mapreduce/IcebergInputFormat.java", "diffHunk": "@@ -396,8 +395,7 @@ public void close() throws IOException {\n           throw new UnsupportedOperationException(\n               String.format(\"Cannot read %s file: %s\", file.format().name(), file.path()));\n       }\n-      currentCloseable = iterable;\n-      return iterable.iterator();\n+      return iterable;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "272a019b327124bb400500d56335632190fefe0e"}, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDEzMDM0Nw==", "bodyText": "Do we have some guide/document say that when it will be better to have a newline ?  Or could we put it in the checkstyle so that we contributors can notice that :-) .", "url": "https://github.com/apache/iceberg/pull/1011#discussion_r424130347", "createdAt": "2020-05-13T01:58:22Z", "author": {"login": "openinx"}, "path": "mr/src/main/java/org/apache/iceberg/mr/mapreduce/IcebergInputFormat.java", "diffHunk": "@@ -396,8 +395,7 @@ public void close() throws IOException {\n           throw new UnsupportedOperationException(\n               String.format(\"Cannot read %s file: %s\", file.format().name(), file.path()));\n       }\n-      currentCloseable = iterable;\n-      return iterable.iterator();\n+      return iterable;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDEwMzc3OA=="}, "originalCommit": {"oid": "272a019b327124bb400500d56335632190fefe0e"}, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTQyNjQxNw==", "bodyText": "We follow the general style of Hadoop projects that I think is based on a Google style doc somewhere. We also add the rules to checkstyle when it can enforce them.", "url": "https://github.com/apache/iceberg/pull/1011#discussion_r425426417", "createdAt": "2020-05-14T20:58:28Z", "author": {"login": "rdblue"}, "path": "mr/src/main/java/org/apache/iceberg/mr/mapreduce/IcebergInputFormat.java", "diffHunk": "@@ -396,8 +395,7 @@ public void close() throws IOException {\n           throw new UnsupportedOperationException(\n               String.format(\"Cannot read %s file: %s\", file.format().name(), file.path()));\n       }\n-      currentCloseable = iterable;\n-      return iterable.iterator();\n+      return iterable;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDEwMzc3OA=="}, "originalCommit": {"oid": "272a019b327124bb400500d56335632190fefe0e"}, "originalPosition": 90}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0MTAyNDIzOnYy", "diffSide": "RIGHT", "path": "spark/src/main/java/org/apache/iceberg/spark/source/BaseDataReader.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QwMDoxNToyOVrOGUdQkA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QwMDoxNToyOVrOGUdQkA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDEwNDA4MA==", "bodyText": "What about adding CloseableIterator.empty() to avoid this?", "url": "https://github.com/apache/iceberg/pull/1011#discussion_r424104080", "createdAt": "2020-05-13T00:15:29Z", "author": {"login": "rdblue"}, "path": "spark/src/main/java/org/apache/iceberg/spark/source/BaseDataReader.java", "diffHunk": "@@ -64,8 +61,7 @@\n     ImmutableMap.Builder<String, InputFile> inputFileBuilder = ImmutableMap.builder();\n     decryptedFiles.forEach(decrypted -> inputFileBuilder.put(decrypted.location(), decrypted));\n     this.inputFiles = inputFileBuilder.build();\n-    this.currentCloseable = CloseableIterable.empty();\n-    this.currentIterator = Collections.emptyIterator();\n+    this.currentIterator = CloseableIterable.<T>empty().iterator();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "272a019b327124bb400500d56335632190fefe0e"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0MTAyNTA4OnYy", "diffSide": "RIGHT", "path": "spark/src/main/java/org/apache/iceberg/spark/source/RowDataReader.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QwMDoxNjowNFrOGUdRGg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QwMjowMDoxNlrOGUe5DA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDEwNDIxOA==", "bodyText": "Here as well, it would be more readable to have a newline after the if/else block.", "url": "https://github.com/apache/iceberg/pull/1011#discussion_r424104218", "createdAt": "2020-05-13T00:16:04Z", "author": {"login": "rdblue"}, "path": "spark/src/main/java/org/apache/iceberg/spark/source/RowDataReader.java", "diffHunk": "@@ -150,10 +151,7 @@\n               \"Cannot read unknown format: \" + task.file().format());\n       }\n     }\n-\n-    this.currentCloseable = iter;\n-\n-    return iter.iterator();\n+    return iter;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "272a019b327124bb400500d56335632190fefe0e"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDEzMDgyOA==", "bodyText": "OK", "url": "https://github.com/apache/iceberg/pull/1011#discussion_r424130828", "createdAt": "2020-05-13T02:00:16Z", "author": {"login": "openinx"}, "path": "spark/src/main/java/org/apache/iceberg/spark/source/RowDataReader.java", "diffHunk": "@@ -150,10 +151,7 @@\n               \"Cannot read unknown format: \" + task.file().format());\n       }\n     }\n-\n-    this.currentCloseable = iter;\n-\n-    return iter.iterator();\n+    return iter;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDEwNDIxOA=="}, "originalCommit": {"oid": "272a019b327124bb400500d56335632190fefe0e"}, "originalPosition": 70}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3987, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}