{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU3NDczNDM2", "number": 1261, "reviewThreads": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQyMTo1MToxMFrOETAi1Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQwMDoxNTozN1rOET4xOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4MzY3MzE3OnYy", "diffSide": "RIGHT", "path": "site/docs/spark.md", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQyMTo1MToxMVrOG4gayg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQwMTowNToyN1rOG4k8Og==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTkwNDU4Ng==", "bodyText": "This looks specific to 2.4. Should we have a 3.0 example and a separate 2.4 example like the other sections?\nAn alternative is to create a new page for Spark Streaming and add the docs there. Then we could have a table like the one at the top of the Spark page that explains what is supported in different versions.", "url": "https://github.com/apache/iceberg/pull/1261#discussion_r461904586", "createdAt": "2020-07-28T21:51:11Z", "author": {"login": "rdblue"}, "path": "site/docs/spark.md", "diffHunk": "@@ -520,6 +520,28 @@ data.writeTo(\"prod.db.table\")\n     .createOrReplace()\n ```\n \n+### Writing from streaming query (Structured Streaming)\n+\n+To write values from streaming query to Iceberg table, use `writeStream`:\n+\n+```scala\n+data.writeStream\n+    .format(\"iceberg\")\n+    .outputMode(\"append\")\n+    .option(\"path\", pathToTable)\n+    .option(\"checkpointLocation\", checkpointPath)\n+    .start()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cba54a086110bc17cc18751ef21b0418d383b0f6"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTk3ODY4Mg==", "bodyText": "DSv2 still doesn't have table access for streaming. I see TODO in writeTo, but no one works on that. I'm planning to look into it. As of now, this is the only way across Spark versions.", "url": "https://github.com/apache/iceberg/pull/1261#discussion_r461978682", "createdAt": "2020-07-29T01:05:27Z", "author": {"login": "HeartSaVioR"}, "path": "site/docs/spark.md", "diffHunk": "@@ -520,6 +520,28 @@ data.writeTo(\"prod.db.table\")\n     .createOrReplace()\n ```\n \n+### Writing from streaming query (Structured Streaming)\n+\n+To write values from streaming query to Iceberg table, use `writeStream`:\n+\n+```scala\n+data.writeStream\n+    .format(\"iceberg\")\n+    .outputMode(\"append\")\n+    .option(\"path\", pathToTable)\n+    .option(\"checkpointLocation\", checkpointPath)\n+    .start()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTkwNDU4Ng=="}, "originalCommit": {"oid": "cba54a086110bc17cc18751ef21b0418d383b0f6"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4MzcyMzU0OnYy", "diffSide": "RIGHT", "path": "site/docs/spark.md", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQyMjowMDo0MVrOG4g4nA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQyMjowMDo0MVrOG4g4nA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTkxMjIyMA==", "bodyText": "I think this is worth a section, not just a note.\n\nStreaming queries can create new table versions quickly, which creates lots of table metadata to track those versions. Maintaining metadata by tuning the rate of commits, expiring old snapshots, and automatically cleaning up metadata files is highly recommended.\n\nThen you could give an overview of those options and links to further docs, like the table property docs for delete-after-commit.", "url": "https://github.com/apache/iceberg/pull/1261#discussion_r461912220", "createdAt": "2020-07-28T22:00:41Z", "author": {"login": "rdblue"}, "path": "site/docs/spark.md", "diffHunk": "@@ -520,6 +520,28 @@ data.writeTo(\"prod.db.table\")\n     .createOrReplace()\n ```\n \n+### Writing from streaming query (Structured Streaming)\n+\n+To write values from streaming query to Iceberg table, use `writeStream`:\n+\n+```scala\n+data.writeStream\n+    .format(\"iceberg\")\n+    .outputMode(\"append\")\n+    .option(\"path\", pathToTable)\n+    .option(\"checkpointLocation\", checkpointPath)\n+    .start()\n+```\n+\n+`append` and `complete` modes are supported. The table should be created in prior to start the streaming query.\n+ \n+!!! Note\n+    To avoid metadata growing too huge, there're several guides you may want to follow: ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cba54a086110bc17cc18751ef21b0418d383b0f6"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5MDg2MDMzOnYy", "diffSide": "RIGHT", "path": "site/docs/spark-structured-streaming.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxNDowNDozNVrOG5kiMg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxNDowNDozNVrOG5kiMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzAyMDU5NA==", "bodyText": "I just realized I should provide table identifier instead of path in HiveCatalog. I'll update the same.", "url": "https://github.com/apache/iceberg/pull/1261#discussion_r463020594", "createdAt": "2020-07-30T14:04:35Z", "author": {"login": "HeartSaVioR"}, "path": "site/docs/spark-structured-streaming.md", "diffHunk": "@@ -0,0 +1,184 @@\n+<!--\n+ - Licensed to the Apache Software Foundation (ASF) under one or more\n+ - contributor license agreements.  See the NOTICE file distributed with\n+ - this work for additional information regarding copyright ownership.\n+ - The ASF licenses this file to You under the Apache License, Version 2.0\n+ - (the \"License\"); you may not use this file except in compliance with\n+ - the License.  You may obtain a copy of the License at\n+ -\n+ -   http://www.apache.org/licenses/LICENSE-2.0\n+ -\n+ - Unless required by applicable law or agreed to in writing, software\n+ - distributed under the License is distributed on an \"AS IS\" BASIS,\n+ - WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ - See the License for the specific language governing permissions and\n+ - limitations under the License.\n+ -->\n+\n+# Spark Structured Streaming\n+\n+Iceberg uses Apache Spark's DataSourceV2 API for data source and catalog implementations. Spark DSv2 is an evolving API\n+with different levels of support in Spark versions.\n+\n+As of Spark 3.0, the new API on reading/writing table on table identifier is not yet added on streaming query.\n+\n+| Feature support                                  | Spark 3.0| Spark 2.4  | Notes                                          |\n+|--------------------------------------------------|----------|------------|------------------------------------------------|\n+| [DataFrame write](#writing-with-streaming-query) | \u2714        | \u2714          |                                                |\n+\n+## Writing with streaming query\n+\n+To write values from streaming query to Iceberg table, use `DataStreamWriter`:\n+\n+```scala\n+data.writeStream\n+    .format(\"iceberg\")\n+    .outputMode(\"append\")\n+    .trigger(Trigger.ProcessingTime(1, TimeUnit.MINUTES))\n+    .option(\"path\", pathToTable)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "88ea5b437b51ed16e73e8a40bf6039dc59825fc4"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5Mjg2ODgzOnYy", "diffSide": "RIGHT", "path": "site/docs/spark-structured-streaming.md", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQwMDowNjozMlrOG5314Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQwMDowNjozMlrOG5314Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzMzNjkyOQ==", "bodyText": "It would be great to document what these do:\n\nappend - appends the output of every micro-batch to the table\ncomplete - replaces the table contents every micro-batch", "url": "https://github.com/apache/iceberg/pull/1261#discussion_r463336929", "createdAt": "2020-07-31T00:06:32Z", "author": {"login": "rdblue"}, "path": "site/docs/spark-structured-streaming.md", "diffHunk": "@@ -0,0 +1,184 @@\n+<!--\n+ - Licensed to the Apache Software Foundation (ASF) under one or more\n+ - contributor license agreements.  See the NOTICE file distributed with\n+ - this work for additional information regarding copyright ownership.\n+ - The ASF licenses this file to You under the Apache License, Version 2.0\n+ - (the \"License\"); you may not use this file except in compliance with\n+ - the License.  You may obtain a copy of the License at\n+ -\n+ -   http://www.apache.org/licenses/LICENSE-2.0\n+ -\n+ - Unless required by applicable law or agreed to in writing, software\n+ - distributed under the License is distributed on an \"AS IS\" BASIS,\n+ - WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ - See the License for the specific language governing permissions and\n+ - limitations under the License.\n+ -->\n+\n+# Spark Structured Streaming\n+\n+Iceberg uses Apache Spark's DataSourceV2 API for data source and catalog implementations. Spark DSv2 is an evolving API\n+with different levels of support in Spark versions.\n+\n+As of Spark 3.0, the new API on reading/writing table on table identifier is not yet added on streaming query.\n+\n+| Feature support                                  | Spark 3.0| Spark 2.4  | Notes                                          |\n+|--------------------------------------------------|----------|------------|------------------------------------------------|\n+| [DataFrame write](#writing-with-streaming-query) | \u2714        | \u2714          |                                                |\n+\n+## Writing with streaming query\n+\n+To write values from streaming query to Iceberg table, use `DataStreamWriter`:\n+\n+```scala\n+data.writeStream\n+    .format(\"iceberg\")\n+    .outputMode(\"append\")\n+    .trigger(Trigger.ProcessingTime(1, TimeUnit.MINUTES))\n+    .option(\"path\", pathToTable)\n+    .option(\"checkpointLocation\", checkpointPath)\n+    .start()\n+```\n+\n+Iceberg supports below output modes:\n+\n+* append\n+* complete", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "88ea5b437b51ed16e73e8a40bf6039dc59825fc4"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5Mjg2OTMzOnYy", "diffSide": "RIGHT", "path": "site/docs/spark-structured-streaming.md", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQwMDowNjo0N1rOG532KA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQwMDowNjo0N1rOG532KA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzMzNzAwMA==", "bodyText": "Should this link to the CREATE TABLE docs on the Spark page?", "url": "https://github.com/apache/iceberg/pull/1261#discussion_r463337000", "createdAt": "2020-07-31T00:06:47Z", "author": {"login": "rdblue"}, "path": "site/docs/spark-structured-streaming.md", "diffHunk": "@@ -0,0 +1,184 @@\n+<!--\n+ - Licensed to the Apache Software Foundation (ASF) under one or more\n+ - contributor license agreements.  See the NOTICE file distributed with\n+ - this work for additional information regarding copyright ownership.\n+ - The ASF licenses this file to You under the Apache License, Version 2.0\n+ - (the \"License\"); you may not use this file except in compliance with\n+ - the License.  You may obtain a copy of the License at\n+ -\n+ -   http://www.apache.org/licenses/LICENSE-2.0\n+ -\n+ - Unless required by applicable law or agreed to in writing, software\n+ - distributed under the License is distributed on an \"AS IS\" BASIS,\n+ - WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ - See the License for the specific language governing permissions and\n+ - limitations under the License.\n+ -->\n+\n+# Spark Structured Streaming\n+\n+Iceberg uses Apache Spark's DataSourceV2 API for data source and catalog implementations. Spark DSv2 is an evolving API\n+with different levels of support in Spark versions.\n+\n+As of Spark 3.0, the new API on reading/writing table on table identifier is not yet added on streaming query.\n+\n+| Feature support                                  | Spark 3.0| Spark 2.4  | Notes                                          |\n+|--------------------------------------------------|----------|------------|------------------------------------------------|\n+| [DataFrame write](#writing-with-streaming-query) | \u2714        | \u2714          |                                                |\n+\n+## Writing with streaming query\n+\n+To write values from streaming query to Iceberg table, use `DataStreamWriter`:\n+\n+```scala\n+data.writeStream\n+    .format(\"iceberg\")\n+    .outputMode(\"append\")\n+    .trigger(Trigger.ProcessingTime(1, TimeUnit.MINUTES))\n+    .option(\"path\", pathToTable)\n+    .option(\"checkpointLocation\", checkpointPath)\n+    .start()\n+```\n+\n+Iceberg supports below output modes:\n+\n+* append\n+* complete\n+\n+The table should be created in prior to start the streaming query.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "88ea5b437b51ed16e73e8a40bf6039dc59825fc4"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5Mjg3MTI4OnYy", "diffSide": "RIGHT", "path": "site/docs/spark-structured-streaming.md", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQwMDowNzo1OFrOG533Uw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQwMDozNDo0NVrOG8fKmg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzMzNzI5OQ==", "bodyText": "How is this configured? A link to the relevant Spark docs and a quick summary would be really useful.", "url": "https://github.com/apache/iceberg/pull/1261#discussion_r463337299", "createdAt": "2020-07-31T00:07:58Z", "author": {"login": "rdblue"}, "path": "site/docs/spark-structured-streaming.md", "diffHunk": "@@ -0,0 +1,184 @@\n+<!--\n+ - Licensed to the Apache Software Foundation (ASF) under one or more\n+ - contributor license agreements.  See the NOTICE file distributed with\n+ - this work for additional information regarding copyright ownership.\n+ - The ASF licenses this file to You under the Apache License, Version 2.0\n+ - (the \"License\"); you may not use this file except in compliance with\n+ - the License.  You may obtain a copy of the License at\n+ -\n+ -   http://www.apache.org/licenses/LICENSE-2.0\n+ -\n+ - Unless required by applicable law or agreed to in writing, software\n+ - distributed under the License is distributed on an \"AS IS\" BASIS,\n+ - WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ - See the License for the specific language governing permissions and\n+ - limitations under the License.\n+ -->\n+\n+# Spark Structured Streaming\n+\n+Iceberg uses Apache Spark's DataSourceV2 API for data source and catalog implementations. Spark DSv2 is an evolving API\n+with different levels of support in Spark versions.\n+\n+As of Spark 3.0, the new API on reading/writing table on table identifier is not yet added on streaming query.\n+\n+| Feature support                                  | Spark 3.0| Spark 2.4  | Notes                                          |\n+|--------------------------------------------------|----------|------------|------------------------------------------------|\n+| [DataFrame write](#writing-with-streaming-query) | \u2714        | \u2714          |                                                |\n+\n+## Writing with streaming query\n+\n+To write values from streaming query to Iceberg table, use `DataStreamWriter`:\n+\n+```scala\n+data.writeStream\n+    .format(\"iceberg\")\n+    .outputMode(\"append\")\n+    .trigger(Trigger.ProcessingTime(1, TimeUnit.MINUTES))\n+    .option(\"path\", pathToTable)\n+    .option(\"checkpointLocation\", checkpointPath)\n+    .start()\n+```\n+\n+Iceberg supports below output modes:\n+\n+* append\n+* complete\n+\n+The table should be created in prior to start the streaming query.\n+\n+## Maintenance\n+\n+Streaming queries can create new table versions quickly, which creates lots of table metadata to track those versions.\n+Maintaining metadata by tuning the rate of commits, expiring old snapshots, and automatically cleaning up metadata files\n+is highly recommended.\n+\n+### Tune the rate of commits\n+\n+Having high rate of commits would produce lots of data files, manifests, and snapshots which leads the table hard\n+to maintain. We encourage having trigger interval 1 minute at minimum, and increase the interval if you encounter\n+issues.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "88ea5b437b51ed16e73e8a40bf6039dc59825fc4"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzM1NDA0Nw==", "bodyText": "It's already in the code example in above - .trigger(Trigger.ProcessingTime(1, TimeUnit.MINUTES)). It's an essential knowledge on structured streaming (and DStream) so I feel linking structured streaming guide doc would be sufficient. Please let me know if we still would like to provide some example for here as well.", "url": "https://github.com/apache/iceberg/pull/1261#discussion_r463354047", "createdAt": "2020-07-31T01:11:27Z", "author": {"login": "HeartSaVioR"}, "path": "site/docs/spark-structured-streaming.md", "diffHunk": "@@ -0,0 +1,184 @@\n+<!--\n+ - Licensed to the Apache Software Foundation (ASF) under one or more\n+ - contributor license agreements.  See the NOTICE file distributed with\n+ - this work for additional information regarding copyright ownership.\n+ - The ASF licenses this file to You under the Apache License, Version 2.0\n+ - (the \"License\"); you may not use this file except in compliance with\n+ - the License.  You may obtain a copy of the License at\n+ -\n+ -   http://www.apache.org/licenses/LICENSE-2.0\n+ -\n+ - Unless required by applicable law or agreed to in writing, software\n+ - distributed under the License is distributed on an \"AS IS\" BASIS,\n+ - WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ - See the License for the specific language governing permissions and\n+ - limitations under the License.\n+ -->\n+\n+# Spark Structured Streaming\n+\n+Iceberg uses Apache Spark's DataSourceV2 API for data source and catalog implementations. Spark DSv2 is an evolving API\n+with different levels of support in Spark versions.\n+\n+As of Spark 3.0, the new API on reading/writing table on table identifier is not yet added on streaming query.\n+\n+| Feature support                                  | Spark 3.0| Spark 2.4  | Notes                                          |\n+|--------------------------------------------------|----------|------------|------------------------------------------------|\n+| [DataFrame write](#writing-with-streaming-query) | \u2714        | \u2714          |                                                |\n+\n+## Writing with streaming query\n+\n+To write values from streaming query to Iceberg table, use `DataStreamWriter`:\n+\n+```scala\n+data.writeStream\n+    .format(\"iceberg\")\n+    .outputMode(\"append\")\n+    .trigger(Trigger.ProcessingTime(1, TimeUnit.MINUTES))\n+    .option(\"path\", pathToTable)\n+    .option(\"checkpointLocation\", checkpointPath)\n+    .start()\n+```\n+\n+Iceberg supports below output modes:\n+\n+* append\n+* complete\n+\n+The table should be created in prior to start the streaming query.\n+\n+## Maintenance\n+\n+Streaming queries can create new table versions quickly, which creates lots of table metadata to track those versions.\n+Maintaining metadata by tuning the rate of commits, expiring old snapshots, and automatically cleaning up metadata files\n+is highly recommended.\n+\n+### Tune the rate of commits\n+\n+Having high rate of commits would produce lots of data files, manifests, and snapshots which leads the table hard\n+to maintain. We encourage having trigger interval 1 minute at minimum, and increase the interval if you encounter\n+issues.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzMzNzI5OQ=="}, "originalCommit": {"oid": "88ea5b437b51ed16e73e8a40bf6039dc59825fc4"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjA1MzA4NA==", "bodyText": "I agree with @HeartSaVioR that this is essential knowledge on structured streaming. However, if you wanted to add a link to trigger intervals specifically, the latest (kept up to date) link would likely be https://spark.apache.org/docs/latest/structured-streaming-programming-guide.html#triggers", "url": "https://github.com/apache/iceberg/pull/1261#discussion_r466053084", "createdAt": "2020-08-05T23:09:23Z", "author": {"login": "kbendick"}, "path": "site/docs/spark-structured-streaming.md", "diffHunk": "@@ -0,0 +1,184 @@\n+<!--\n+ - Licensed to the Apache Software Foundation (ASF) under one or more\n+ - contributor license agreements.  See the NOTICE file distributed with\n+ - this work for additional information regarding copyright ownership.\n+ - The ASF licenses this file to You under the Apache License, Version 2.0\n+ - (the \"License\"); you may not use this file except in compliance with\n+ - the License.  You may obtain a copy of the License at\n+ -\n+ -   http://www.apache.org/licenses/LICENSE-2.0\n+ -\n+ - Unless required by applicable law or agreed to in writing, software\n+ - distributed under the License is distributed on an \"AS IS\" BASIS,\n+ - WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ - See the License for the specific language governing permissions and\n+ - limitations under the License.\n+ -->\n+\n+# Spark Structured Streaming\n+\n+Iceberg uses Apache Spark's DataSourceV2 API for data source and catalog implementations. Spark DSv2 is an evolving API\n+with different levels of support in Spark versions.\n+\n+As of Spark 3.0, the new API on reading/writing table on table identifier is not yet added on streaming query.\n+\n+| Feature support                                  | Spark 3.0| Spark 2.4  | Notes                                          |\n+|--------------------------------------------------|----------|------------|------------------------------------------------|\n+| [DataFrame write](#writing-with-streaming-query) | \u2714        | \u2714          |                                                |\n+\n+## Writing with streaming query\n+\n+To write values from streaming query to Iceberg table, use `DataStreamWriter`:\n+\n+```scala\n+data.writeStream\n+    .format(\"iceberg\")\n+    .outputMode(\"append\")\n+    .trigger(Trigger.ProcessingTime(1, TimeUnit.MINUTES))\n+    .option(\"path\", pathToTable)\n+    .option(\"checkpointLocation\", checkpointPath)\n+    .start()\n+```\n+\n+Iceberg supports below output modes:\n+\n+* append\n+* complete\n+\n+The table should be created in prior to start the streaming query.\n+\n+## Maintenance\n+\n+Streaming queries can create new table versions quickly, which creates lots of table metadata to track those versions.\n+Maintaining metadata by tuning the rate of commits, expiring old snapshots, and automatically cleaning up metadata files\n+is highly recommended.\n+\n+### Tune the rate of commits\n+\n+Having high rate of commits would produce lots of data files, manifests, and snapshots which leads the table hard\n+to maintain. We encourage having trigger interval 1 minute at minimum, and increase the interval if you encounter\n+issues.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzMzNzI5OQ=="}, "originalCommit": {"oid": "88ea5b437b51ed16e73e8a40bf6039dc59825fc4"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjA3ODM2Mg==", "bodyText": "Ah yes probably better to pick up anchor. Thanks :)", "url": "https://github.com/apache/iceberg/pull/1261#discussion_r466078362", "createdAt": "2020-08-06T00:34:45Z", "author": {"login": "HeartSaVioR"}, "path": "site/docs/spark-structured-streaming.md", "diffHunk": "@@ -0,0 +1,184 @@\n+<!--\n+ - Licensed to the Apache Software Foundation (ASF) under one or more\n+ - contributor license agreements.  See the NOTICE file distributed with\n+ - this work for additional information regarding copyright ownership.\n+ - The ASF licenses this file to You under the Apache License, Version 2.0\n+ - (the \"License\"); you may not use this file except in compliance with\n+ - the License.  You may obtain a copy of the License at\n+ -\n+ -   http://www.apache.org/licenses/LICENSE-2.0\n+ -\n+ - Unless required by applicable law or agreed to in writing, software\n+ - distributed under the License is distributed on an \"AS IS\" BASIS,\n+ - WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ - See the License for the specific language governing permissions and\n+ - limitations under the License.\n+ -->\n+\n+# Spark Structured Streaming\n+\n+Iceberg uses Apache Spark's DataSourceV2 API for data source and catalog implementations. Spark DSv2 is an evolving API\n+with different levels of support in Spark versions.\n+\n+As of Spark 3.0, the new API on reading/writing table on table identifier is not yet added on streaming query.\n+\n+| Feature support                                  | Spark 3.0| Spark 2.4  | Notes                                          |\n+|--------------------------------------------------|----------|------------|------------------------------------------------|\n+| [DataFrame write](#writing-with-streaming-query) | \u2714        | \u2714          |                                                |\n+\n+## Writing with streaming query\n+\n+To write values from streaming query to Iceberg table, use `DataStreamWriter`:\n+\n+```scala\n+data.writeStream\n+    .format(\"iceberg\")\n+    .outputMode(\"append\")\n+    .trigger(Trigger.ProcessingTime(1, TimeUnit.MINUTES))\n+    .option(\"path\", pathToTable)\n+    .option(\"checkpointLocation\", checkpointPath)\n+    .start()\n+```\n+\n+Iceberg supports below output modes:\n+\n+* append\n+* complete\n+\n+The table should be created in prior to start the streaming query.\n+\n+## Maintenance\n+\n+Streaming queries can create new table versions quickly, which creates lots of table metadata to track those versions.\n+Maintaining metadata by tuning the rate of commits, expiring old snapshots, and automatically cleaning up metadata files\n+is highly recommended.\n+\n+### Tune the rate of commits\n+\n+Having high rate of commits would produce lots of data files, manifests, and snapshots which leads the table hard\n+to maintain. We encourage having trigger interval 1 minute at minimum, and increase the interval if you encounter\n+issues.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzMzNzI5OQ=="}, "originalCommit": {"oid": "88ea5b437b51ed16e73e8a40bf6039dc59825fc4"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5Mjg3MTg2OnYy", "diffSide": "RIGHT", "path": "site/docs/spark-structured-streaming.md", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQwMDowODoyMFrOG533sw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wMlQxMTowMjoyNFrOG6kLqQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzMzNzM5NQ==", "bodyText": "This applies to all catalogs, not just Hadoop. I think you can simply remove that clause.", "url": "https://github.com/apache/iceberg/pull/1261#discussion_r463337395", "createdAt": "2020-07-31T00:08:20Z", "author": {"login": "rdblue"}, "path": "site/docs/spark-structured-streaming.md", "diffHunk": "@@ -0,0 +1,184 @@\n+<!--\n+ - Licensed to the Apache Software Foundation (ASF) under one or more\n+ - contributor license agreements.  See the NOTICE file distributed with\n+ - this work for additional information regarding copyright ownership.\n+ - The ASF licenses this file to You under the Apache License, Version 2.0\n+ - (the \"License\"); you may not use this file except in compliance with\n+ - the License.  You may obtain a copy of the License at\n+ -\n+ -   http://www.apache.org/licenses/LICENSE-2.0\n+ -\n+ - Unless required by applicable law or agreed to in writing, software\n+ - distributed under the License is distributed on an \"AS IS\" BASIS,\n+ - WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ - See the License for the specific language governing permissions and\n+ - limitations under the License.\n+ -->\n+\n+# Spark Structured Streaming\n+\n+Iceberg uses Apache Spark's DataSourceV2 API for data source and catalog implementations. Spark DSv2 is an evolving API\n+with different levels of support in Spark versions.\n+\n+As of Spark 3.0, the new API on reading/writing table on table identifier is not yet added on streaming query.\n+\n+| Feature support                                  | Spark 3.0| Spark 2.4  | Notes                                          |\n+|--------------------------------------------------|----------|------------|------------------------------------------------|\n+| [DataFrame write](#writing-with-streaming-query) | \u2714        | \u2714          |                                                |\n+\n+## Writing with streaming query\n+\n+To write values from streaming query to Iceberg table, use `DataStreamWriter`:\n+\n+```scala\n+data.writeStream\n+    .format(\"iceberg\")\n+    .outputMode(\"append\")\n+    .trigger(Trigger.ProcessingTime(1, TimeUnit.MINUTES))\n+    .option(\"path\", pathToTable)\n+    .option(\"checkpointLocation\", checkpointPath)\n+    .start()\n+```\n+\n+Iceberg supports below output modes:\n+\n+* append\n+* complete\n+\n+The table should be created in prior to start the streaming query.\n+\n+## Maintenance\n+\n+Streaming queries can create new table versions quickly, which creates lots of table metadata to track those versions.\n+Maintaining metadata by tuning the rate of commits, expiring old snapshots, and automatically cleaning up metadata files\n+is highly recommended.\n+\n+### Tune the rate of commits\n+\n+Having high rate of commits would produce lots of data files, manifests, and snapshots which leads the table hard\n+to maintain. We encourage having trigger interval 1 minute at minimum, and increase the interval if you encounter\n+issues.\n+\n+### Retain recent metadata files in Hadoop catalog\n+\n+If you are using HadoopCatalog, you may want to enable `write.metadata.delete-after-commit.enabled` in the table", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "88ea5b437b51ed16e73e8a40bf6039dc59825fc4"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzM1MDMxMQ==", "bodyText": "If I understand correctly, this option is cleaning up vXXXXX.metadata.json files, which doesn't seem to be in Hive catalog based metadata directory, because it is not needed - it only retains the latest one in Hive table information. I'm still learning, so please let me know if I'm missing something.", "url": "https://github.com/apache/iceberg/pull/1261#discussion_r463350311", "createdAt": "2020-07-31T00:56:30Z", "author": {"login": "HeartSaVioR"}, "path": "site/docs/spark-structured-streaming.md", "diffHunk": "@@ -0,0 +1,184 @@\n+<!--\n+ - Licensed to the Apache Software Foundation (ASF) under one or more\n+ - contributor license agreements.  See the NOTICE file distributed with\n+ - this work for additional information regarding copyright ownership.\n+ - The ASF licenses this file to You under the Apache License, Version 2.0\n+ - (the \"License\"); you may not use this file except in compliance with\n+ - the License.  You may obtain a copy of the License at\n+ -\n+ -   http://www.apache.org/licenses/LICENSE-2.0\n+ -\n+ - Unless required by applicable law or agreed to in writing, software\n+ - distributed under the License is distributed on an \"AS IS\" BASIS,\n+ - WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ - See the License for the specific language governing permissions and\n+ - limitations under the License.\n+ -->\n+\n+# Spark Structured Streaming\n+\n+Iceberg uses Apache Spark's DataSourceV2 API for data source and catalog implementations. Spark DSv2 is an evolving API\n+with different levels of support in Spark versions.\n+\n+As of Spark 3.0, the new API on reading/writing table on table identifier is not yet added on streaming query.\n+\n+| Feature support                                  | Spark 3.0| Spark 2.4  | Notes                                          |\n+|--------------------------------------------------|----------|------------|------------------------------------------------|\n+| [DataFrame write](#writing-with-streaming-query) | \u2714        | \u2714          |                                                |\n+\n+## Writing with streaming query\n+\n+To write values from streaming query to Iceberg table, use `DataStreamWriter`:\n+\n+```scala\n+data.writeStream\n+    .format(\"iceberg\")\n+    .outputMode(\"append\")\n+    .trigger(Trigger.ProcessingTime(1, TimeUnit.MINUTES))\n+    .option(\"path\", pathToTable)\n+    .option(\"checkpointLocation\", checkpointPath)\n+    .start()\n+```\n+\n+Iceberg supports below output modes:\n+\n+* append\n+* complete\n+\n+The table should be created in prior to start the streaming query.\n+\n+## Maintenance\n+\n+Streaming queries can create new table versions quickly, which creates lots of table metadata to track those versions.\n+Maintaining metadata by tuning the rate of commits, expiring old snapshots, and automatically cleaning up metadata files\n+is highly recommended.\n+\n+### Tune the rate of commits\n+\n+Having high rate of commits would produce lots of data files, manifests, and snapshots which leads the table hard\n+to maintain. We encourage having trigger interval 1 minute at minimum, and increase the interval if you encounter\n+issues.\n+\n+### Retain recent metadata files in Hadoop catalog\n+\n+If you are using HadoopCatalog, you may want to enable `write.metadata.delete-after-commit.enabled` in the table", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzMzNzM5NQ=="}, "originalCommit": {"oid": "88ea5b437b51ed16e73e8a40bf6039dc59825fc4"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDA2MzQwMQ==", "bodyText": "Somehow I need to look into details on Hive catalog, and realized I was wrong. It still creates the metadata file per version. I'll reflect the comment. Thanks for correcting me.", "url": "https://github.com/apache/iceberg/pull/1261#discussion_r464063401", "createdAt": "2020-08-02T11:02:24Z", "author": {"login": "HeartSaVioR"}, "path": "site/docs/spark-structured-streaming.md", "diffHunk": "@@ -0,0 +1,184 @@\n+<!--\n+ - Licensed to the Apache Software Foundation (ASF) under one or more\n+ - contributor license agreements.  See the NOTICE file distributed with\n+ - this work for additional information regarding copyright ownership.\n+ - The ASF licenses this file to You under the Apache License, Version 2.0\n+ - (the \"License\"); you may not use this file except in compliance with\n+ - the License.  You may obtain a copy of the License at\n+ -\n+ -   http://www.apache.org/licenses/LICENSE-2.0\n+ -\n+ - Unless required by applicable law or agreed to in writing, software\n+ - distributed under the License is distributed on an \"AS IS\" BASIS,\n+ - WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ - See the License for the specific language governing permissions and\n+ - limitations under the License.\n+ -->\n+\n+# Spark Structured Streaming\n+\n+Iceberg uses Apache Spark's DataSourceV2 API for data source and catalog implementations. Spark DSv2 is an evolving API\n+with different levels of support in Spark versions.\n+\n+As of Spark 3.0, the new API on reading/writing table on table identifier is not yet added on streaming query.\n+\n+| Feature support                                  | Spark 3.0| Spark 2.4  | Notes                                          |\n+|--------------------------------------------------|----------|------------|------------------------------------------------|\n+| [DataFrame write](#writing-with-streaming-query) | \u2714        | \u2714          |                                                |\n+\n+## Writing with streaming query\n+\n+To write values from streaming query to Iceberg table, use `DataStreamWriter`:\n+\n+```scala\n+data.writeStream\n+    .format(\"iceberg\")\n+    .outputMode(\"append\")\n+    .trigger(Trigger.ProcessingTime(1, TimeUnit.MINUTES))\n+    .option(\"path\", pathToTable)\n+    .option(\"checkpointLocation\", checkpointPath)\n+    .start()\n+```\n+\n+Iceberg supports below output modes:\n+\n+* append\n+* complete\n+\n+The table should be created in prior to start the streaming query.\n+\n+## Maintenance\n+\n+Streaming queries can create new table versions quickly, which creates lots of table metadata to track those versions.\n+Maintaining metadata by tuning the rate of commits, expiring old snapshots, and automatically cleaning up metadata files\n+is highly recommended.\n+\n+### Tune the rate of commits\n+\n+Having high rate of commits would produce lots of data files, manifests, and snapshots which leads the table hard\n+to maintain. We encourage having trigger interval 1 minute at minimum, and increase the interval if you encounter\n+issues.\n+\n+### Retain recent metadata files in Hadoop catalog\n+\n+If you are using HadoopCatalog, you may want to enable `write.metadata.delete-after-commit.enabled` in the table", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzMzNzM5NQ=="}, "originalCommit": {"oid": "88ea5b437b51ed16e73e8a40bf6039dc59825fc4"}, "originalPosition": 64}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5Mjg3OTI2OnYy", "diffSide": "RIGHT", "path": "site/docs/spark-structured-streaming.md", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQwMDoxMjoxN1rOG5377g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQwMDoxMjoxN1rOG5377g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzMzODQ3OA==", "bodyText": "How about \"Removed old metadata files\"? That matches the wording used for \"Expire old snapshots\".\nAlso, we should probably make these recommendations in order of importance, which would mean putting the expire snapshots section first. Those keep a lot more metadata and affect table performance; these don't affect table performance and are smaller if you clean up snapshots.", "url": "https://github.com/apache/iceberg/pull/1261#discussion_r463338478", "createdAt": "2020-07-31T00:12:17Z", "author": {"login": "rdblue"}, "path": "site/docs/spark-structured-streaming.md", "diffHunk": "@@ -0,0 +1,184 @@\n+<!--\n+ - Licensed to the Apache Software Foundation (ASF) under one or more\n+ - contributor license agreements.  See the NOTICE file distributed with\n+ - this work for additional information regarding copyright ownership.\n+ - The ASF licenses this file to You under the Apache License, Version 2.0\n+ - (the \"License\"); you may not use this file except in compliance with\n+ - the License.  You may obtain a copy of the License at\n+ -\n+ -   http://www.apache.org/licenses/LICENSE-2.0\n+ -\n+ - Unless required by applicable law or agreed to in writing, software\n+ - distributed under the License is distributed on an \"AS IS\" BASIS,\n+ - WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ - See the License for the specific language governing permissions and\n+ - limitations under the License.\n+ -->\n+\n+# Spark Structured Streaming\n+\n+Iceberg uses Apache Spark's DataSourceV2 API for data source and catalog implementations. Spark DSv2 is an evolving API\n+with different levels of support in Spark versions.\n+\n+As of Spark 3.0, the new API on reading/writing table on table identifier is not yet added on streaming query.\n+\n+| Feature support                                  | Spark 3.0| Spark 2.4  | Notes                                          |\n+|--------------------------------------------------|----------|------------|------------------------------------------------|\n+| [DataFrame write](#writing-with-streaming-query) | \u2714        | \u2714          |                                                |\n+\n+## Writing with streaming query\n+\n+To write values from streaming query to Iceberg table, use `DataStreamWriter`:\n+\n+```scala\n+data.writeStream\n+    .format(\"iceberg\")\n+    .outputMode(\"append\")\n+    .trigger(Trigger.ProcessingTime(1, TimeUnit.MINUTES))\n+    .option(\"path\", pathToTable)\n+    .option(\"checkpointLocation\", checkpointPath)\n+    .start()\n+```\n+\n+Iceberg supports below output modes:\n+\n+* append\n+* complete\n+\n+The table should be created in prior to start the streaming query.\n+\n+## Maintenance\n+\n+Streaming queries can create new table versions quickly, which creates lots of table metadata to track those versions.\n+Maintaining metadata by tuning the rate of commits, expiring old snapshots, and automatically cleaning up metadata files\n+is highly recommended.\n+\n+### Tune the rate of commits\n+\n+Having high rate of commits would produce lots of data files, manifests, and snapshots which leads the table hard\n+to maintain. We encourage having trigger interval 1 minute at minimum, and increase the interval if you encounter\n+issues.\n+\n+### Retain recent metadata files in Hadoop catalog", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "88ea5b437b51ed16e73e8a40bf6039dc59825fc4"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5Mjg4NTA0OnYy", "diffSide": "RIGHT", "path": "site/docs/spark-structured-streaming.md", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQwMDoxNTozN1rOG53_TQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQwMDoxNTozN1rOG53_TQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzMzOTM0MQ==", "bodyText": "How about \"Run expireSnapshots regularly to prune . . .\"?\nThat's more direct and avoids the natural question \"When may I not want to do this?\" Since the answer is you always want to clean snapshots, being direct is more clear.", "url": "https://github.com/apache/iceberg/pull/1261#discussion_r463339341", "createdAt": "2020-07-31T00:15:37Z", "author": {"login": "rdblue"}, "path": "site/docs/spark-structured-streaming.md", "diffHunk": "@@ -0,0 +1,184 @@\n+<!--\n+ - Licensed to the Apache Software Foundation (ASF) under one or more\n+ - contributor license agreements.  See the NOTICE file distributed with\n+ - this work for additional information regarding copyright ownership.\n+ - The ASF licenses this file to You under the Apache License, Version 2.0\n+ - (the \"License\"); you may not use this file except in compliance with\n+ - the License.  You may obtain a copy of the License at\n+ -\n+ -   http://www.apache.org/licenses/LICENSE-2.0\n+ -\n+ - Unless required by applicable law or agreed to in writing, software\n+ - distributed under the License is distributed on an \"AS IS\" BASIS,\n+ - WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ - See the License for the specific language governing permissions and\n+ - limitations under the License.\n+ -->\n+\n+# Spark Structured Streaming\n+\n+Iceberg uses Apache Spark's DataSourceV2 API for data source and catalog implementations. Spark DSv2 is an evolving API\n+with different levels of support in Spark versions.\n+\n+As of Spark 3.0, the new API on reading/writing table on table identifier is not yet added on streaming query.\n+\n+| Feature support                                  | Spark 3.0| Spark 2.4  | Notes                                          |\n+|--------------------------------------------------|----------|------------|------------------------------------------------|\n+| [DataFrame write](#writing-with-streaming-query) | \u2714        | \u2714          |                                                |\n+\n+## Writing with streaming query\n+\n+To write values from streaming query to Iceberg table, use `DataStreamWriter`:\n+\n+```scala\n+data.writeStream\n+    .format(\"iceberg\")\n+    .outputMode(\"append\")\n+    .trigger(Trigger.ProcessingTime(1, TimeUnit.MINUTES))\n+    .option(\"path\", pathToTable)\n+    .option(\"checkpointLocation\", checkpointPath)\n+    .start()\n+```\n+\n+Iceberg supports below output modes:\n+\n+* append\n+* complete\n+\n+The table should be created in prior to start the streaming query.\n+\n+## Maintenance\n+\n+Streaming queries can create new table versions quickly, which creates lots of table metadata to track those versions.\n+Maintaining metadata by tuning the rate of commits, expiring old snapshots, and automatically cleaning up metadata files\n+is highly recommended.\n+\n+### Tune the rate of commits\n+\n+Having high rate of commits would produce lots of data files, manifests, and snapshots which leads the table hard\n+to maintain. We encourage having trigger interval 1 minute at minimum, and increase the interval if you encounter\n+issues.\n+\n+### Retain recent metadata files in Hadoop catalog\n+\n+If you are using HadoopCatalog, you may want to enable `write.metadata.delete-after-commit.enabled` in the table\n+properties, and reduce `write.metadata.previous-versions-max` as well (if necessary) to retain only specific number of\n+metadata files.\n+\n+Please refer the [table write properties](/configuration/#write-properties) for more details.\n+\n+### Expire old snapshots\n+\n+You may want to run [expireSnapshots()](/javadoc/master/org/apache/iceberg/Table.html#expireSnapshots--) periodically", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "88ea5b437b51ed16e73e8a40bf6039dc59825fc4"}, "originalPosition": 72}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3808, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}