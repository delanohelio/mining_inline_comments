{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQyNDM1MzQ4", "number": 1149, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQyMjoyMjo0MlrOEKrg5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQyMjoyMjo0MlrOEKrg5Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5NjM0MTQ5OnYy", "diffSide": "RIGHT", "path": "spark3/src/main/java/org/apache/iceberg/spark/SparkCatalog.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQyMjoyMjo0MlrOGr3NFw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQyMjo0Mzo1OFrOGr3ooA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODY0NjQyMw==", "bodyText": "Maybe I'm missing something here, but doesn't this actually break for HadoopCatalog without the default set of keys (it'll drop through and be rejected in the else block)?", "url": "https://github.com/apache/iceberg/pull/1149#discussion_r448646423", "createdAt": "2020-07-01T22:22:42Z", "author": {"login": "danielcweeks"}, "path": "spark3/src/main/java/org/apache/iceberg/spark/SparkCatalog.java", "diffHunk": "@@ -228,13 +247,141 @@ public void invalidateTable(Identifier ident) {\n     }\n   }\n \n+  @Override\n+  public Identifier[] listTables(String[] namespace) {\n+    return icebergCatalog.listTables(Namespace.of(namespace)).stream()\n+        .map(ident -> Identifier.of(ident.namespace().levels(), ident.name()))\n+        .toArray(Identifier[]::new);\n+  }\n+\n+  @Override\n+  public String[] defaultNamespace() {\n+    if (defaultNamespace != null) {\n+      return defaultNamespace;\n+    }\n+\n+    return new String[0];\n+  }\n+\n+  @Override\n+  public String[][] listNamespaces() {\n+    if (asNamespaceCatalog != null) {\n+      return asNamespaceCatalog.listNamespaces().stream()\n+          .map(Namespace::levels)\n+          .toArray(String[][]::new);\n+    }\n+\n+    return new String[0][];\n+  }\n+\n+  @Override\n+  public String[][] listNamespaces(String[] namespace) throws NoSuchNamespaceException {\n+    if (asNamespaceCatalog != null) {\n+      try {\n+        return asNamespaceCatalog.listNamespaces(Namespace.of(namespace)).stream()\n+            .map(Namespace::levels)\n+            .toArray(String[][]::new);\n+      } catch (org.apache.iceberg.exceptions.NoSuchNamespaceException e) {\n+        throw new NoSuchNamespaceException(namespace);\n+      }\n+    }\n+\n+    throw new NoSuchNamespaceException(namespace);\n+  }\n+\n+  @Override\n+  public Map<String, String> loadNamespaceMetadata(String[] namespace) throws NoSuchNamespaceException {\n+    if (asNamespaceCatalog != null) {\n+      try {\n+        return asNamespaceCatalog.loadNamespaceMetadata(Namespace.of(namespace));\n+      } catch (org.apache.iceberg.exceptions.NoSuchNamespaceException e) {\n+        throw new NoSuchNamespaceException(namespace);\n+      }\n+    }\n+\n+    throw new NoSuchNamespaceException(namespace);\n+  }\n+\n+  @Override\n+  public void createNamespace(String[] namespace, Map<String, String> metadata) throws NamespaceAlreadyExistsException {\n+    if (asNamespaceCatalog != null) {\n+      try {\n+        if (asNamespaceCatalog instanceof HadoopCatalog && DEFAULT_NS_KEYS.equals(metadata.keySet())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b7c104ffa75a813b49e3943f92a4dfe79dbda07"}, "originalPosition": 143}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODY1MzQ3Mg==", "bodyText": "Yes, that is the expected behavior if you create a namespace with metadata properties in the Hadoop catalog because there is nowhere to store them.", "url": "https://github.com/apache/iceberg/pull/1149#discussion_r448653472", "createdAt": "2020-07-01T22:43:58Z", "author": {"login": "rdblue"}, "path": "spark3/src/main/java/org/apache/iceberg/spark/SparkCatalog.java", "diffHunk": "@@ -228,13 +247,141 @@ public void invalidateTable(Identifier ident) {\n     }\n   }\n \n+  @Override\n+  public Identifier[] listTables(String[] namespace) {\n+    return icebergCatalog.listTables(Namespace.of(namespace)).stream()\n+        .map(ident -> Identifier.of(ident.namespace().levels(), ident.name()))\n+        .toArray(Identifier[]::new);\n+  }\n+\n+  @Override\n+  public String[] defaultNamespace() {\n+    if (defaultNamespace != null) {\n+      return defaultNamespace;\n+    }\n+\n+    return new String[0];\n+  }\n+\n+  @Override\n+  public String[][] listNamespaces() {\n+    if (asNamespaceCatalog != null) {\n+      return asNamespaceCatalog.listNamespaces().stream()\n+          .map(Namespace::levels)\n+          .toArray(String[][]::new);\n+    }\n+\n+    return new String[0][];\n+  }\n+\n+  @Override\n+  public String[][] listNamespaces(String[] namespace) throws NoSuchNamespaceException {\n+    if (asNamespaceCatalog != null) {\n+      try {\n+        return asNamespaceCatalog.listNamespaces(Namespace.of(namespace)).stream()\n+            .map(Namespace::levels)\n+            .toArray(String[][]::new);\n+      } catch (org.apache.iceberg.exceptions.NoSuchNamespaceException e) {\n+        throw new NoSuchNamespaceException(namespace);\n+      }\n+    }\n+\n+    throw new NoSuchNamespaceException(namespace);\n+  }\n+\n+  @Override\n+  public Map<String, String> loadNamespaceMetadata(String[] namespace) throws NoSuchNamespaceException {\n+    if (asNamespaceCatalog != null) {\n+      try {\n+        return asNamespaceCatalog.loadNamespaceMetadata(Namespace.of(namespace));\n+      } catch (org.apache.iceberg.exceptions.NoSuchNamespaceException e) {\n+        throw new NoSuchNamespaceException(namespace);\n+      }\n+    }\n+\n+    throw new NoSuchNamespaceException(namespace);\n+  }\n+\n+  @Override\n+  public void createNamespace(String[] namespace, Map<String, String> metadata) throws NamespaceAlreadyExistsException {\n+    if (asNamespaceCatalog != null) {\n+      try {\n+        if (asNamespaceCatalog instanceof HadoopCatalog && DEFAULT_NS_KEYS.equals(metadata.keySet())) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODY0NjQyMw=="}, "originalCommit": {"oid": "1b7c104ffa75a813b49e3943f92a4dfe79dbda07"}, "originalPosition": 143}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3929, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}