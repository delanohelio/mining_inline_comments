{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY5MDg3Nzkw", "number": 1350, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQyMToyNzo1N1rOEatl6A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQyMTo0ODo1MVrOEat9Dw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2NDQ1NDE2OnYy", "diffSide": "RIGHT", "path": "spark2/src/main/java/org/apache/iceberg/spark/source/Reader.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQyMToyNzo1N1rOHET6gA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQyMTo0OTo1MFrOHEUfmQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDI4MjYyNA==", "bodyText": "Because schema is non-final we can't just switch this to a lambda", "url": "https://github.com/apache/iceberg/pull/1350#discussion_r474282624", "createdAt": "2020-08-20T21:27:57Z", "author": {"login": "RussellSpitzer"}, "path": "spark2/src/main/java/org/apache/iceberg/spark/source/Reader.java", "diffHunk": "@@ -143,8 +143,9 @@\n       } catch (IOException ioe) {\n         LOG.warn(\"Failed to get Hadoop Filesystem\", ioe);\n       }\n+      Boolean localityFallback = LOCALITY_WHITELIST_FS.contains(scheme);\n       this.localityPreferred = options.get(\"locality\").map(Boolean::parseBoolean)\n-          .orElse(LOCALITY_WHITELIST_FS.contains(scheme));\n+          .orElse(localityFallback);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b78acbcfec9e0fa5f41fd3eec2bced304c36e42e"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDI4Mzg5Ng==", "bodyText": "I think actually this would actually be fine, but to make the rules happy we would have to reassign Scheme anyway so I figured we may as well just put the result in a local var", "url": "https://github.com/apache/iceberg/pull/1350#discussion_r474283896", "createdAt": "2020-08-20T21:30:54Z", "author": {"login": "RussellSpitzer"}, "path": "spark2/src/main/java/org/apache/iceberg/spark/source/Reader.java", "diffHunk": "@@ -143,8 +143,9 @@\n       } catch (IOException ioe) {\n         LOG.warn(\"Failed to get Hadoop Filesystem\", ioe);\n       }\n+      Boolean localityFallback = LOCALITY_WHITELIST_FS.contains(scheme);\n       this.localityPreferred = options.get(\"locality\").map(Boolean::parseBoolean)\n-          .orElse(LOCALITY_WHITELIST_FS.contains(scheme));\n+          .orElse(localityFallback);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDI4MjYyNA=="}, "originalCommit": {"oid": "b78acbcfec9e0fa5f41fd3eec2bced304c36e42e"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDI5MjEyMQ==", "bodyText": "We could refactor scheme detection into a method to make scheme effectively final here.", "url": "https://github.com/apache/iceberg/pull/1350#discussion_r474292121", "createdAt": "2020-08-20T21:49:50Z", "author": {"login": "rdblue"}, "path": "spark2/src/main/java/org/apache/iceberg/spark/source/Reader.java", "diffHunk": "@@ -143,8 +143,9 @@\n       } catch (IOException ioe) {\n         LOG.warn(\"Failed to get Hadoop Filesystem\", ioe);\n       }\n+      Boolean localityFallback = LOCALITY_WHITELIST_FS.contains(scheme);\n       this.localityPreferred = options.get(\"locality\").map(Boolean::parseBoolean)\n-          .orElse(LOCALITY_WHITELIST_FS.contains(scheme));\n+          .orElse(localityFallback);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDI4MjYyNA=="}, "originalCommit": {"oid": "b78acbcfec9e0fa5f41fd3eec2bced304c36e42e"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2NDUxMTE2OnYy", "diffSide": "RIGHT", "path": ".baseline/checkstyle/checkstyle.xml", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQyMTo0Nzo1MVrOHEUcdQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQyMjowNTozMlrOHEU4hQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDI5MTMxNw==", "bodyText": "This seems more general than \"allowThrowsTagsForSubclasses\"? Are we sure it does the same thing?", "url": "https://github.com/apache/iceberg/pull/1350#discussion_r474291317", "createdAt": "2020-08-20T21:47:51Z", "author": {"login": "rdblue"}, "path": ".baseline/checkstyle/checkstyle.xml", "diffHunk": "@@ -409,11 +409,9 @@\n         <module name=\"JavadocMethod\"> <!-- Java Style Guide: Where Javadoc is used -->\n             <property name=\"scope\" value=\"public\"/>\n             <property name=\"allowMissingParamTags\" value=\"true\"/>\n-            <property name=\"allowMissingThrowsTags\" value=\"true\"/>\n             <property name=\"allowMissingReturnTag\" value=\"true\"/>\n-            <property name=\"minLineCount\" value=\"99999999\"/>\n             <property name=\"allowedAnnotations\" value=\"Override, Test\"/>\n-            <property name=\"allowThrowsTagsForSubclasses\" value=\"true\"/>\n+            <property name=\"validateThrows\" value=\"false\"/>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b78acbcfec9e0fa5f41fd3eec2bced304c36e42e"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDI5ODUwMQ==", "bodyText": "It's a bit of a complicated story\ncheckstyle/checkstyle#7329\nLong story short, the checks were basically broken in check style so they were removed and are no longer valid configs.  We actually don't need to set \"validateThrows\"  to false either since it is false by default. I just wanted to make sure we were aware that we weren't validating any throw related tags.", "url": "https://github.com/apache/iceberg/pull/1350#discussion_r474298501", "createdAt": "2020-08-20T22:05:32Z", "author": {"login": "RussellSpitzer"}, "path": ".baseline/checkstyle/checkstyle.xml", "diffHunk": "@@ -409,11 +409,9 @@\n         <module name=\"JavadocMethod\"> <!-- Java Style Guide: Where Javadoc is used -->\n             <property name=\"scope\" value=\"public\"/>\n             <property name=\"allowMissingParamTags\" value=\"true\"/>\n-            <property name=\"allowMissingThrowsTags\" value=\"true\"/>\n             <property name=\"allowMissingReturnTag\" value=\"true\"/>\n-            <property name=\"minLineCount\" value=\"99999999\"/>\n             <property name=\"allowedAnnotations\" value=\"Override, Test\"/>\n-            <property name=\"allowThrowsTagsForSubclasses\" value=\"true\"/>\n+            <property name=\"validateThrows\" value=\"false\"/>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDI5MTMxNw=="}, "originalCommit": {"oid": "b78acbcfec9e0fa5f41fd3eec2bced304c36e42e"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2NDUxMTc4OnYy", "diffSide": "RIGHT", "path": "arrow/src/main/java/org/apache/iceberg/arrow/vectorized/VectorizedArrowReader.java", "isResolved": false, "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQyMTo0ODowOFrOHEUc2Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxNzoyMTozM1rOHE1Nxw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDI5MTQxNw==", "bodyText": "Do we require the empty line?", "url": "https://github.com/apache/iceberg/pull/1350#discussion_r474291417", "createdAt": "2020-08-20T21:48:08Z", "author": {"login": "rdblue"}, "path": "arrow/src/main/java/org/apache/iceberg/arrow/vectorized/VectorizedArrowReader.java", "diffHunk": "@@ -347,7 +347,9 @@ public String toString() {\n     }\n \n     @Override\n-    public void setBatchSize(int batchSize) {}\n+    public void setBatchSize(int batchSize) {\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b78acbcfec9e0fa5f41fd3eec2bced304c36e42e"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDI5MzgxNQ==", "bodyText": "Yep, we actually did for the Private Constructors as well but we were ignoring that everywhere so I deleted that check\n        <module name=\"RightCurly\"> <!-- Java Style Guide: Nonempty blocks: K & R style -->\n            <property name=\"option\" value=\"alone\"/>\n            <property name=\"tokens\" value=\"CLASS_DEF, **METHOD_DEF**, CTOR_DEF, LITERAL_FOR, LITERAL_WHILE, STATIC_INIT, INSTANCE_INIT\"/>\n        </module>\n\nBasically Check-style was just broken before (see my comment on this PR) and didn't work correctly on empty blocks.", "url": "https://github.com/apache/iceberg/pull/1350#discussion_r474293815", "createdAt": "2020-08-20T21:53:53Z", "author": {"login": "RussellSpitzer"}, "path": "arrow/src/main/java/org/apache/iceberg/arrow/vectorized/VectorizedArrowReader.java", "diffHunk": "@@ -347,7 +347,9 @@ public String toString() {\n     }\n \n     @Override\n-    public void setBatchSize(int batchSize) {}\n+    public void setBatchSize(int batchSize) {\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDI5MTQxNw=="}, "originalCommit": {"oid": "b78acbcfec9e0fa5f41fd3eec2bced304c36e42e"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDMzMzkyMQ==", "bodyText": "I don't suppose it's possible to make it okay to have the right curly on the line just after the method definition?", "url": "https://github.com/apache/iceberg/pull/1350#discussion_r474333921", "createdAt": "2020-08-20T23:57:09Z", "author": {"login": "rdblue"}, "path": "arrow/src/main/java/org/apache/iceberg/arrow/vectorized/VectorizedArrowReader.java", "diffHunk": "@@ -347,7 +347,9 @@ public String toString() {\n     }\n \n     @Override\n-    public void setBatchSize(int batchSize) {}\n+    public void setBatchSize(int batchSize) {\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDI5MTQxNw=="}, "originalCommit": {"oid": "b78acbcfec9e0fa5f41fd3eec2bced304c36e42e"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDc1ODczOA==", "bodyText": "That is allowed, I'll change it", "url": "https://github.com/apache/iceberg/pull/1350#discussion_r474758738", "createdAt": "2020-08-21T15:08:55Z", "author": {"login": "RussellSpitzer"}, "path": "arrow/src/main/java/org/apache/iceberg/arrow/vectorized/VectorizedArrowReader.java", "diffHunk": "@@ -347,7 +347,9 @@ public String toString() {\n     }\n \n     @Override\n-    public void setBatchSize(int batchSize) {}\n+    public void setBatchSize(int batchSize) {\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDI5MTQxNw=="}, "originalCommit": {"oid": "b78acbcfec9e0fa5f41fd3eec2bced304c36e42e"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDgwMjcxNQ==", "bodyText": "Does that allow us to turn it back on for private constructors without too much trouble?", "url": "https://github.com/apache/iceberg/pull/1350#discussion_r474802715", "createdAt": "2020-08-21T16:29:16Z", "author": {"login": "rdblue"}, "path": "arrow/src/main/java/org/apache/iceberg/arrow/vectorized/VectorizedArrowReader.java", "diffHunk": "@@ -347,7 +347,9 @@ public String toString() {\n     }\n \n     @Override\n-    public void setBatchSize(int batchSize) {}\n+    public void setBatchSize(int batchSize) {\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDI5MTQxNw=="}, "originalCommit": {"oid": "b78acbcfec9e0fa5f41fd3eec2bced304c36e42e"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDgxOTEwMA==", "bodyText": "You want to have it on for private constructors and I can change all the references to\nprivate Constructor() {\n}\n\nBecause I can do that no problem", "url": "https://github.com/apache/iceberg/pull/1350#discussion_r474819100", "createdAt": "2020-08-21T17:02:29Z", "author": {"login": "RussellSpitzer"}, "path": "arrow/src/main/java/org/apache/iceberg/arrow/vectorized/VectorizedArrowReader.java", "diffHunk": "@@ -347,7 +347,9 @@ public String toString() {\n     }\n \n     @Override\n-    public void setBatchSize(int batchSize) {}\n+    public void setBatchSize(int batchSize) {\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDI5MTQxNw=="}, "originalCommit": {"oid": "b78acbcfec9e0fa5f41fd3eec2bced304c36e42e"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDgyODA4MQ==", "bodyText": "I think that's what we do in most places isn't it? I was hoping that with this update it wouldn't be too many places to change. Probably good to update them to all be standard, right?", "url": "https://github.com/apache/iceberg/pull/1350#discussion_r474828081", "createdAt": "2020-08-21T17:21:15Z", "author": {"login": "rdblue"}, "path": "arrow/src/main/java/org/apache/iceberg/arrow/vectorized/VectorizedArrowReader.java", "diffHunk": "@@ -347,7 +347,9 @@ public String toString() {\n     }\n \n     @Override\n-    public void setBatchSize(int batchSize) {}\n+    public void setBatchSize(int batchSize) {\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDI5MTQxNw=="}, "originalCommit": {"oid": "b78acbcfec9e0fa5f41fd3eec2bced304c36e42e"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDgyODIzMQ==", "bodyText": "But we can do that in a separate PR if you want to keep this one small.", "url": "https://github.com/apache/iceberg/pull/1350#discussion_r474828231", "createdAt": "2020-08-21T17:21:33Z", "author": {"login": "rdblue"}, "path": "arrow/src/main/java/org/apache/iceberg/arrow/vectorized/VectorizedArrowReader.java", "diffHunk": "@@ -347,7 +347,9 @@ public String toString() {\n     }\n \n     @Override\n-    public void setBatchSize(int batchSize) {}\n+    public void setBatchSize(int batchSize) {\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDI5MTQxNw=="}, "originalCommit": {"oid": "b78acbcfec9e0fa5f41fd3eec2bced304c36e42e"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2NDUxMzQzOnYy", "diffSide": "RIGHT", "path": "orc/src/main/java/org/apache/iceberg/orc/ORCSchemaUtil.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQyMTo0ODo1MVrOHEUd_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQyMTo0ODo1MVrOHEUd_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDI5MTcxMQ==", "bodyText": "Nice that it catches these.", "url": "https://github.com/apache/iceberg/pull/1350#discussion_r474291711", "createdAt": "2020-08-20T21:48:51Z", "author": {"login": "rdblue"}, "path": "orc/src/main/java/org/apache/iceberg/orc/ORCSchemaUtil.java", "diffHunk": "@@ -267,7 +267,7 @@ private static TypeDescription buildOrcProjection(Integer fieldId, Type type, bo\n           // e.g. renaming column c -> d and adding new column d\n           String name = Optional.ofNullable(mapping.get(nestedField.fieldId()))\n               .map(OrcField::name)\n-              .orElse(nestedField.name() + \"_r\" + nestedField.fieldId());\n+              .orElseGet(() -> nestedField.name() + \"_r\" + nestedField.fieldId());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b78acbcfec9e0fa5f41fd3eec2bced304c36e42e"}, "originalPosition": 5}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3660, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}