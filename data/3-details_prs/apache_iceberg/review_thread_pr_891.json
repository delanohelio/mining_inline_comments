{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk4NDA3OTk1", "number": 891, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQwNToxMToyNlrOD0j_4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNlQwNzo0ODowN1rOD2RXWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2NDQyMzM5OnYy", "diffSide": "RIGHT", "path": "data/src/main/java/org/apache/iceberg/data/parquet/GenericParquetWriter.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQwNToxMToyNlrOGJjpig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxNzozMDo1MVrOGKCYVA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjY3NDQ0Mg==", "bodyText": "In Parquet, LogicalTypeAnnotation.java, there is LogicalTypeAnnotation.IntLogicalTypeAnnotation. Do we need it here too?", "url": "https://github.com/apache/iceberg/pull/891#discussion_r412674442", "createdAt": "2020-04-22T05:11:26Z", "author": {"login": "wangmiao1981"}, "path": "data/src/main/java/org/apache/iceberg/data/parquet/GenericParquetWriter.java", "diffHunk": "@@ -200,6 +210,70 @@ private GenericParquetWriter() {\n     }\n   }\n \n+  private static class LogicalTypeWriterVisitor implements LogicalTypeAnnotationVisitor<PrimitiveWriter<?>> {\n+    private final ColumnDescriptor desc;\n+\n+    private LogicalTypeWriterVisitor(ColumnDescriptor desc) {\n+      this.desc = desc;\n+    }\n+\n+    @Override\n+    public Optional<PrimitiveWriter<?>> visit(LogicalTypeAnnotation.StringLogicalTypeAnnotation stringType) {\n+      return Optional.of(ParquetValueWriters.strings(desc));\n+    }\n+\n+    @Override\n+    public Optional<PrimitiveWriter<?>> visit(LogicalTypeAnnotation.EnumLogicalTypeAnnotation enumType) {\n+      return Optional.of(ParquetValueWriters.strings(desc));\n+    }\n+\n+    @Override\n+    public Optional<PrimitiveWriter<?>> visit(LogicalTypeAnnotation.DecimalLogicalTypeAnnotation decimalType) {\n+      switch (desc.getPrimitiveType().getPrimitiveTypeName()) {\n+        case INT32:\n+          return Optional.of(ParquetValueWriters.decimalAsInteger(\n+              desc, decimalType.getPrecision(), decimalType.getScale()));\n+        case INT64:\n+          return Optional.of(ParquetValueWriters.decimalAsLong(\n+              desc, decimalType.getPrecision(), decimalType.getScale()));\n+        case BINARY:\n+        case FIXED_LEN_BYTE_ARRAY:\n+          return Optional.of(ParquetValueWriters.decimalAsFixed(\n+              desc, decimalType.getPrecision(), decimalType.getScale()));\n+      }\n+      return Optional.empty();\n+    }\n+\n+    @Override\n+    public Optional<PrimitiveWriter<?>> visit(LogicalTypeAnnotation.DateLogicalTypeAnnotation dateType) {\n+      return Optional.of(new DateWriter(desc));\n+    }\n+\n+    @Override\n+    public Optional<PrimitiveWriter<?>> visit(LogicalTypeAnnotation.TimeLogicalTypeAnnotation timeType) {\n+      return Optional.of(new TimeWriter(desc));\n+    }\n+\n+    @Override\n+    public Optional<PrimitiveWriter<?>> visit(LogicalTypeAnnotation.TimestampLogicalTypeAnnotation timestampType) {\n+      if (timestampType.isAdjustedToUTC()) {\n+        return Optional.of(new TimestamptzWriter(desc));\n+      } else {\n+        return Optional.of(new TimestampWriter(desc));\n+      }\n+    }\n+\n+    @Override\n+    public Optional<PrimitiveWriter<?>> visit(LogicalTypeAnnotation.JsonLogicalTypeAnnotation jsonLogicalType) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d173d283bcf321715c34f0c5953c7ad86ecfc6cb"}, "originalPosition": 89}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzE3Nzk0MA==", "bodyText": "Methods that aren't implemented here use the superclass implementation, which returns Optional.empty. When that happens, we fall back to the old logic that uses just the primitive type.", "url": "https://github.com/apache/iceberg/pull/891#discussion_r413177940", "createdAt": "2020-04-22T17:30:51Z", "author": {"login": "rdblue"}, "path": "data/src/main/java/org/apache/iceberg/data/parquet/GenericParquetWriter.java", "diffHunk": "@@ -200,6 +210,70 @@ private GenericParquetWriter() {\n     }\n   }\n \n+  private static class LogicalTypeWriterVisitor implements LogicalTypeAnnotationVisitor<PrimitiveWriter<?>> {\n+    private final ColumnDescriptor desc;\n+\n+    private LogicalTypeWriterVisitor(ColumnDescriptor desc) {\n+      this.desc = desc;\n+    }\n+\n+    @Override\n+    public Optional<PrimitiveWriter<?>> visit(LogicalTypeAnnotation.StringLogicalTypeAnnotation stringType) {\n+      return Optional.of(ParquetValueWriters.strings(desc));\n+    }\n+\n+    @Override\n+    public Optional<PrimitiveWriter<?>> visit(LogicalTypeAnnotation.EnumLogicalTypeAnnotation enumType) {\n+      return Optional.of(ParquetValueWriters.strings(desc));\n+    }\n+\n+    @Override\n+    public Optional<PrimitiveWriter<?>> visit(LogicalTypeAnnotation.DecimalLogicalTypeAnnotation decimalType) {\n+      switch (desc.getPrimitiveType().getPrimitiveTypeName()) {\n+        case INT32:\n+          return Optional.of(ParquetValueWriters.decimalAsInteger(\n+              desc, decimalType.getPrecision(), decimalType.getScale()));\n+        case INT64:\n+          return Optional.of(ParquetValueWriters.decimalAsLong(\n+              desc, decimalType.getPrecision(), decimalType.getScale()));\n+        case BINARY:\n+        case FIXED_LEN_BYTE_ARRAY:\n+          return Optional.of(ParquetValueWriters.decimalAsFixed(\n+              desc, decimalType.getPrecision(), decimalType.getScale()));\n+      }\n+      return Optional.empty();\n+    }\n+\n+    @Override\n+    public Optional<PrimitiveWriter<?>> visit(LogicalTypeAnnotation.DateLogicalTypeAnnotation dateType) {\n+      return Optional.of(new DateWriter(desc));\n+    }\n+\n+    @Override\n+    public Optional<PrimitiveWriter<?>> visit(LogicalTypeAnnotation.TimeLogicalTypeAnnotation timeType) {\n+      return Optional.of(new TimeWriter(desc));\n+    }\n+\n+    @Override\n+    public Optional<PrimitiveWriter<?>> visit(LogicalTypeAnnotation.TimestampLogicalTypeAnnotation timestampType) {\n+      if (timestampType.isAdjustedToUTC()) {\n+        return Optional.of(new TimestamptzWriter(desc));\n+      } else {\n+        return Optional.of(new TimestampWriter(desc));\n+      }\n+    }\n+\n+    @Override\n+    public Optional<PrimitiveWriter<?>> visit(LogicalTypeAnnotation.JsonLogicalTypeAnnotation jsonLogicalType) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjY3NDQ0Mg=="}, "originalCommit": {"oid": "d173d283bcf321715c34f0c5953c7ad86ecfc6cb"}, "originalPosition": 89}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4MjM0MjAxOnYy", "diffSide": "RIGHT", "path": "data/src/main/java/org/apache/iceberg/data/parquet/GenericParquetWriter.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNlQwNzo0ODowN1rOGMAivw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNlQyMTozMzozM1rOGMKXew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTI0NDk5MQ==", "bodyText": "When writer.isPresent() == false, we falls back to the previous logic, right?", "url": "https://github.com/apache/iceberg/pull/891#discussion_r415244991", "createdAt": "2020-04-26T07:48:07Z", "author": {"login": "waterlx"}, "path": "data/src/main/java/org/apache/iceberg/data/parquet/GenericParquetWriter.java", "diffHunk": "@@ -117,6 +120,13 @@ private GenericParquetWriter() {\n     @Override\n     public ParquetValueWriter<?> primitive(PrimitiveType primitive) {\n       ColumnDescriptor desc = type.getColumnDescription(currentPath());\n+      LogicalTypeAnnotation logicalType = primitive.getLogicalTypeAnnotation();\n+      if (logicalType != null) {\n+        Optional<PrimitiveWriter<?>> writer = logicalType.accept(new LogicalTypeWriterVisitor(desc));\n+        if (writer.isPresent()) {\n+          return writer.get();\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d173d283bcf321715c34f0c5953c7ad86ecfc6cb"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTQwNTk0Nw==", "bodyText": "Correct.", "url": "https://github.com/apache/iceberg/pull/891#discussion_r415405947", "createdAt": "2020-04-26T21:33:33Z", "author": {"login": "rdblue"}, "path": "data/src/main/java/org/apache/iceberg/data/parquet/GenericParquetWriter.java", "diffHunk": "@@ -117,6 +120,13 @@ private GenericParquetWriter() {\n     @Override\n     public ParquetValueWriter<?> primitive(PrimitiveType primitive) {\n       ColumnDescriptor desc = type.getColumnDescription(currentPath());\n+      LogicalTypeAnnotation logicalType = primitive.getLogicalTypeAnnotation();\n+      if (logicalType != null) {\n+        Optional<PrimitiveWriter<?>> writer = logicalType.accept(new LogicalTypeWriterVisitor(desc));\n+        if (writer.isPresent()) {\n+          return writer.get();\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTI0NDk5MQ=="}, "originalCommit": {"oid": "d173d283bcf321715c34f0c5953c7ad86ecfc6cb"}, "originalPosition": 26}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2877, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}