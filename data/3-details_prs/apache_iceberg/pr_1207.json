{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ5MjQwOTIz", "number": 1207, "title": "ORC: Support row position as a metadata column", "bodyText": "Completes a part of #1021\nAdds support to output the row position within the file as a _pos column in the data record through ORC readers when the metadata column is provided in the expected schema\nMain changes:\n\nAdd a MetadataColumns class to iceberg-core which will define the metadata columns supported by Iceberg\nExpose row batch offset in the file to OrcValueReaders so that the we can create a new ValueReader which returns the row position\nAdd logic in the StructReader to check if a field is a metadata field and provide the correct reader for it", "createdAt": "2020-07-15T04:46:33Z", "url": "https://github.com/apache/iceberg/pull/1207", "merged": true, "mergeCommit": {"oid": "247d30622f20fcb63799992cea37733b663da8a5"}, "closed": true, "closedAt": "2020-07-20T20:43:29Z", "author": {"login": "shardulm94"}, "timelineItems": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc1Qu5BAFqTQ0OTMwOTA3Mg==", "endCursor": "Y3Vyc29yOnYyOpPPAAABc1SZlJAFqTQ0OTM4Nzg3Nw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ5MzA5MDcy", "url": "https://github.com/apache/iceberg/pull/1207#pullrequestreview-449309072", "createdAt": "2020-07-15T20:33:46Z", "commit": {"oid": "1bc55be9857af48730a6c740a9cbd27093b4b06d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQyMDozMzo0NlrOGyO1kQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQyMDozMzo0NlrOGyO1kQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTMyNTA3Mw==", "bodyText": "This seems to introduce a lot of code churn, when most implementations don't use batchOffsetInFile. What about a less intrusive way of passing this by using a context method that is called once for each batch?\nParquet has something similar, where each row group causes new context to be passed to the readers: https://github.com/apache/iceberg/blob/master/parquet/src/main/java/org/apache/iceberg/parquet/ParquetValueReader.java#L32\nThis could expose a method like setBatchContext(long batchOffsetInFile) with a no-op default. Then only a few implementations would need to change.", "url": "https://github.com/apache/iceberg/pull/1207#discussion_r455325073", "createdAt": "2020-07-15T20:33:46Z", "author": {"login": "rdblue"}, "path": "orc/src/main/java/org/apache/iceberg/orc/OrcRowReader.java", "diffHunk": "@@ -29,6 +29,6 @@\n   /**\n    * Reads a row.\n    */\n-  T read(VectorizedRowBatch batch, int row);\n+  T read(VectorizedRowBatch batch, long batchOffsetInFile, int rowOffsetInBatch);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1bc55be9857af48730a6c740a9cbd27093b4b06d"}, "originalPosition": 5}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1c5de07152fc60658b6de1a0b926ce10acdf121d", "author": {"user": {"login": "shardulm94", "name": "Shardul Mahadik"}}, "url": "https://github.com/apache/iceberg/commit/1c5de07152fc60658b6de1a0b926ce10acdf121d", "committedDate": "2020-07-15T22:22:34Z", "message": "ORC: Support row postition as a metadata column"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "1bc55be9857af48730a6c740a9cbd27093b4b06d", "author": {"user": {"login": "shardulm94", "name": "Shardul Mahadik"}}, "url": "https://github.com/apache/iceberg/commit/1bc55be9857af48730a6c740a9cbd27093b4b06d", "committedDate": "2020-07-15T03:48:25Z", "message": "ORC: Support row postition as a metadata column"}, "afterCommit": {"oid": "1c5de07152fc60658b6de1a0b926ce10acdf121d", "author": {"user": {"login": "shardulm94", "name": "Shardul Mahadik"}}, "url": "https://github.com/apache/iceberg/commit/1c5de07152fc60658b6de1a0b926ce10acdf121d", "committedDate": "2020-07-15T22:22:34Z", "message": "ORC: Support row postition as a metadata column"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ5Mzg3ODc3", "url": "https://github.com/apache/iceberg/pull/1207#pullrequestreview-449387877", "createdAt": "2020-07-15T22:29:59Z", "commit": {"oid": "1c5de07152fc60658b6de1a0b926ce10acdf121d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQyMjoyOTo1OVrOGyTiEg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQyMjoyOTo1OVrOGyTiEg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTQwMjAwMg==", "bodyText": "I am checking the current field with the ROW_POSITION field defined in MetadataColumns, we can probably check just the field ID though.", "url": "https://github.com/apache/iceberg/pull/1207#discussion_r455402002", "createdAt": "2020-07-15T22:29:59Z", "author": {"login": "shardulm94"}, "path": "spark/src/main/java/org/apache/iceberg/spark/data/vectorized/VectorizedSparkOrcReaders.java", "diffHunk": "@@ -378,16 +395,20 @@ private StructConverter(Types.StructType structType, List<Converter> fieldConver\n     }\n \n     @Override\n-    public ColumnVector convert(org.apache.orc.storage.ql.exec.vector.ColumnVector vector, int batchSize) {\n+    public ColumnVector convert(org.apache.orc.storage.ql.exec.vector.ColumnVector vector, int batchSize,\n+                                long batchOffsetInFile) {\n       StructColumnVector structVector = (StructColumnVector) vector;\n       List<Types.NestedField> fields = structType.fields();\n       List<ColumnVector> fieldVectors = Lists.newArrayListWithExpectedSize(fields.size());\n       for (int pos = 0, vectorIndex = 0; pos < fields.size(); pos += 1) {\n         Types.NestedField field = fields.get(pos);\n         if (idToConstant.containsKey(field.fieldId())) {\n           fieldVectors.add(new ConstantColumnVector(field.type(), batchSize, idToConstant.get(field.fieldId())));\n+        } else if (field.equals(MetadataColumns.ROW_POSITION)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1c5de07152fc60658b6de1a0b926ce10acdf121d"}, "originalPosition": 125}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4264, "cost": 1, "resetAt": "2021-10-29T19:57:52Z"}}}