{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTIwMzY1NTE0", "number": 1765, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QwOTozMjozOFrOE4l35Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QwOTozMjozOFrOE4l35Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI3Nzc2MjI5OnYy", "diffSide": "RIGHT", "path": "flink/src/test/java/org/apache/iceberg/flink/SimpleDataUtil.java", "isResolved": false, "comments": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QwOTozMjozOFrOHynENw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQwODo1NzozNFrOH2Syng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjgzMDkwMw==", "bodyText": "Using hashCode to sort this list is correct if we only want to check wether the two list is equal or not.  But it may not friend to debug the root cause when two list is not equal because those elements are disordered. I'd prefer to compare the fields in lexicographical order if possible.", "url": "https://github.com/apache/iceberg/pull/1765#discussion_r522830903", "createdAt": "2020-11-13T09:32:38Z", "author": {"login": "openinx"}, "path": "flink/src/test/java/org/apache/iceberg/flink/SimpleDataUtil.java", "diffHunk": "@@ -129,11 +129,25 @@ public static void assertTableRows(String tablePath, List<RowData> expected) thr\n   public static void assertTableRecords(Table table, List<Record> expected) throws IOException {\n     table.refresh();\n     try (CloseableIterable<Record> iterable = IcebergGenerics.read(table).build()) {\n-      Assert.assertEquals(\"Should produce the expected record\",\n-          Sets.newHashSet(expected), Sets.newHashSet(iterable));\n+      List<Record> iterList = Lists.newArrayList(iterable.iterator());\n+      sortRecordList(iterList);\n+      sortRecordList(expected);\n+      Assert.assertEquals(\"Should produce the expected record\", expected, iterList);\n     }\n   }\n \n+  private static void sortRecordList(List<Record> list) {\n+    Collections.sort(list, (o1, o2) -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e52aaa82372779b176c620e4104125ccf6f1ad41"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjg2NzYzOA==", "bodyText": "will there be some unknown data type in the Record that does not implement the compareTo interface?", "url": "https://github.com/apache/iceberg/pull/1765#discussion_r522867638", "createdAt": "2020-11-13T10:39:55Z", "author": {"login": "zhangjun0x01"}, "path": "flink/src/test/java/org/apache/iceberg/flink/SimpleDataUtil.java", "diffHunk": "@@ -129,11 +129,25 @@ public static void assertTableRows(String tablePath, List<RowData> expected) thr\n   public static void assertTableRecords(Table table, List<Record> expected) throws IOException {\n     table.refresh();\n     try (CloseableIterable<Record> iterable = IcebergGenerics.read(table).build()) {\n-      Assert.assertEquals(\"Should produce the expected record\",\n-          Sets.newHashSet(expected), Sets.newHashSet(iterable));\n+      List<Record> iterList = Lists.newArrayList(iterable.iterator());\n+      sortRecordList(iterList);\n+      sortRecordList(expected);\n+      Assert.assertEquals(\"Should produce the expected record\", expected, iterList);\n     }\n   }\n \n+  private static void sortRecordList(List<Record> list) {\n+    Collections.sort(list, (o1, o2) -> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjgzMDkwMw=="}, "originalCommit": {"oid": "e52aaa82372779b176c620e4104125ccf6f1ad41"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzI5NzgwNA==", "bodyText": "Yeah, if this is just for comparing two lists, then it would be better to use a set.", "url": "https://github.com/apache/iceberg/pull/1765#discussion_r523297804", "createdAt": "2020-11-14T00:21:17Z", "author": {"login": "rdblue"}, "path": "flink/src/test/java/org/apache/iceberg/flink/SimpleDataUtil.java", "diffHunk": "@@ -129,11 +129,25 @@ public static void assertTableRows(String tablePath, List<RowData> expected) thr\n   public static void assertTableRecords(Table table, List<Record> expected) throws IOException {\n     table.refresh();\n     try (CloseableIterable<Record> iterable = IcebergGenerics.read(table).build()) {\n-      Assert.assertEquals(\"Should produce the expected record\",\n-          Sets.newHashSet(expected), Sets.newHashSet(iterable));\n+      List<Record> iterList = Lists.newArrayList(iterable.iterator());\n+      sortRecordList(iterList);\n+      sortRecordList(expected);\n+      Assert.assertEquals(\"Should produce the expected record\", expected, iterList);\n     }\n   }\n \n+  private static void sortRecordList(List<Record> list) {\n+    Collections.sort(list, (o1, o2) -> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjgzMDkwMw=="}, "originalCommit": {"oid": "e52aaa82372779b176c620e4104125ccf6f1ad41"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzg1NTM4Mw==", "bodyText": "The assertTableRecords method provides a List parameter. For a new user  to  use this method, he may not know to use set when comparing data.\nWhether there is such a situation: the original data is (1,'a'),(1,'a'), but the actual running result is (1,'a'). This test case passed, but it is wrong.", "url": "https://github.com/apache/iceberg/pull/1765#discussion_r523855383", "createdAt": "2020-11-16T01:47:30Z", "author": {"login": "zhangjun0x01"}, "path": "flink/src/test/java/org/apache/iceberg/flink/SimpleDataUtil.java", "diffHunk": "@@ -129,11 +129,25 @@ public static void assertTableRows(String tablePath, List<RowData> expected) thr\n   public static void assertTableRecords(Table table, List<Record> expected) throws IOException {\n     table.refresh();\n     try (CloseableIterable<Record> iterable = IcebergGenerics.read(table).build()) {\n-      Assert.assertEquals(\"Should produce the expected record\",\n-          Sets.newHashSet(expected), Sets.newHashSet(iterable));\n+      List<Record> iterList = Lists.newArrayList(iterable.iterator());\n+      sortRecordList(iterList);\n+      sortRecordList(expected);\n+      Assert.assertEquals(\"Should produce the expected record\", expected, iterList);\n     }\n   }\n \n+  private static void sortRecordList(List<Record> list) {\n+    Collections.sort(list, (o1, o2) -> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjgzMDkwMw=="}, "originalCommit": {"oid": "e52aaa82372779b176c620e4104125ccf6f1ad41"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTUxNTk0Mg==", "bodyText": "Maybe we should remove the duplicate records from tests so that we can use a set?", "url": "https://github.com/apache/iceberg/pull/1765#discussion_r525515942", "createdAt": "2020-11-17T20:50:42Z", "author": {"login": "rdblue"}, "path": "flink/src/test/java/org/apache/iceberg/flink/SimpleDataUtil.java", "diffHunk": "@@ -129,11 +129,25 @@ public static void assertTableRows(String tablePath, List<RowData> expected) thr\n   public static void assertTableRecords(Table table, List<Record> expected) throws IOException {\n     table.refresh();\n     try (CloseableIterable<Record> iterable = IcebergGenerics.read(table).build()) {\n-      Assert.assertEquals(\"Should produce the expected record\",\n-          Sets.newHashSet(expected), Sets.newHashSet(iterable));\n+      List<Record> iterList = Lists.newArrayList(iterable.iterator());\n+      sortRecordList(iterList);\n+      sortRecordList(expected);\n+      Assert.assertEquals(\"Should produce the expected record\", expected, iterList);\n     }\n   }\n \n+  private static void sortRecordList(List<Record> list) {\n+    Collections.sort(list, (o1, o2) -> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjgzMDkwMw=="}, "originalCommit": {"oid": "e52aaa82372779b176c620e4104125ccf6f1ad41"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTg4NTA1Mg==", "bodyText": "We can generate non-repetitive test data when writing test cases, but there must be duplicate data in the production environment. Will there be test cases that pass but the production environment is incorrect?", "url": "https://github.com/apache/iceberg/pull/1765#discussion_r525885052", "createdAt": "2020-11-18T08:11:04Z", "author": {"login": "zhangjun0x01"}, "path": "flink/src/test/java/org/apache/iceberg/flink/SimpleDataUtil.java", "diffHunk": "@@ -129,11 +129,25 @@ public static void assertTableRows(String tablePath, List<RowData> expected) thr\n   public static void assertTableRecords(Table table, List<Record> expected) throws IOException {\n     table.refresh();\n     try (CloseableIterable<Record> iterable = IcebergGenerics.read(table).build()) {\n-      Assert.assertEquals(\"Should produce the expected record\",\n-          Sets.newHashSet(expected), Sets.newHashSet(iterable));\n+      List<Record> iterList = Lists.newArrayList(iterable.iterator());\n+      sortRecordList(iterList);\n+      sortRecordList(expected);\n+      Assert.assertEquals(\"Should produce the expected record\", expected, iterList);\n     }\n   }\n \n+  private static void sortRecordList(List<Record> list) {\n+    Collections.sort(list, (o1, o2) -> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjgzMDkwMw=="}, "originalCommit": {"oid": "e52aaa82372779b176c620e4104125ccf6f1ad41"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjU4Mjc2NQ==", "bodyText": "In this SimpleDataUtil, all Record should have the same schema (id and data  column), so  I think we could just compare those two fields directly.  Don't have to compare the hashCode.\nAbout using set to compare lists,  I'd prefer to compare sorted lists.  Because in future equality-delete test cases,  we may delete the same row several times to make sure that we've gurantteed the correct semantics.", "url": "https://github.com/apache/iceberg/pull/1765#discussion_r526582765", "createdAt": "2020-11-19T04:13:06Z", "author": {"login": "openinx"}, "path": "flink/src/test/java/org/apache/iceberg/flink/SimpleDataUtil.java", "diffHunk": "@@ -129,11 +129,25 @@ public static void assertTableRows(String tablePath, List<RowData> expected) thr\n   public static void assertTableRecords(Table table, List<Record> expected) throws IOException {\n     table.refresh();\n     try (CloseableIterable<Record> iterable = IcebergGenerics.read(table).build()) {\n-      Assert.assertEquals(\"Should produce the expected record\",\n-          Sets.newHashSet(expected), Sets.newHashSet(iterable));\n+      List<Record> iterList = Lists.newArrayList(iterable.iterator());\n+      sortRecordList(iterList);\n+      sortRecordList(expected);\n+      Assert.assertEquals(\"Should produce the expected record\", expected, iterList);\n     }\n   }\n \n+  private static void sortRecordList(List<Record> list) {\n+    Collections.sort(list, (o1, o2) -> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjgzMDkwMw=="}, "originalCommit": {"oid": "e52aaa82372779b176c620e4104125ccf6f1ad41"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjYxMDE2OA==", "bodyText": "In order to test the multi-level partition filter, I constructed a 2-level partition in this method : TestRewriteDataFilesAction#testRewriteDataFilesWithFilter , so each record has three fields. I don\u2019t know if there will be similar test cases in the future.", "url": "https://github.com/apache/iceberg/pull/1765#discussion_r526610168", "createdAt": "2020-11-19T05:51:43Z", "author": {"login": "zhangjun0x01"}, "path": "flink/src/test/java/org/apache/iceberg/flink/SimpleDataUtil.java", "diffHunk": "@@ -129,11 +129,25 @@ public static void assertTableRows(String tablePath, List<RowData> expected) thr\n   public static void assertTableRecords(Table table, List<Record> expected) throws IOException {\n     table.refresh();\n     try (CloseableIterable<Record> iterable = IcebergGenerics.read(table).build()) {\n-      Assert.assertEquals(\"Should produce the expected record\",\n-          Sets.newHashSet(expected), Sets.newHashSet(iterable));\n+      List<Record> iterList = Lists.newArrayList(iterable.iterator());\n+      sortRecordList(iterList);\n+      sortRecordList(expected);\n+      Assert.assertEquals(\"Should produce the expected record\", expected, iterList);\n     }\n   }\n \n+  private static void sortRecordList(List<Record> list) {\n+    Collections.sort(list, (o1, o2) -> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjgzMDkwMw=="}, "originalCommit": {"oid": "e52aaa82372779b176c620e4104125ccf6f1ad41"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjYyNjA0Mg==", "bodyText": "Well,  how about using the com.google.common.collect.Multiset  to assert those lists with duplicated records  ? Don't have to sort based on hashCode,  and it also allow to use more fields.", "url": "https://github.com/apache/iceberg/pull/1765#discussion_r526626042", "createdAt": "2020-11-19T06:39:10Z", "author": {"login": "openinx"}, "path": "flink/src/test/java/org/apache/iceberg/flink/SimpleDataUtil.java", "diffHunk": "@@ -129,11 +129,25 @@ public static void assertTableRows(String tablePath, List<RowData> expected) thr\n   public static void assertTableRecords(Table table, List<Record> expected) throws IOException {\n     table.refresh();\n     try (CloseableIterable<Record> iterable = IcebergGenerics.read(table).build()) {\n-      Assert.assertEquals(\"Should produce the expected record\",\n-          Sets.newHashSet(expected), Sets.newHashSet(iterable));\n+      List<Record> iterList = Lists.newArrayList(iterable.iterator());\n+      sortRecordList(iterList);\n+      sortRecordList(expected);\n+      Assert.assertEquals(\"Should produce the expected record\", expected, iterList);\n     }\n   }\n \n+  private static void sortRecordList(List<Record> list) {\n+    Collections.sort(list, (o1, o2) -> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjgzMDkwMw=="}, "originalCommit": {"oid": "e52aaa82372779b176c620e4104125ccf6f1ad41"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjY5MzAyMg==", "bodyText": "Yes,it is great ,I update the pr.", "url": "https://github.com/apache/iceberg/pull/1765#discussion_r526693022", "createdAt": "2020-11-19T08:57:34Z", "author": {"login": "zhangjun0x01"}, "path": "flink/src/test/java/org/apache/iceberg/flink/SimpleDataUtil.java", "diffHunk": "@@ -129,11 +129,25 @@ public static void assertTableRows(String tablePath, List<RowData> expected) thr\n   public static void assertTableRecords(Table table, List<Record> expected) throws IOException {\n     table.refresh();\n     try (CloseableIterable<Record> iterable = IcebergGenerics.read(table).build()) {\n-      Assert.assertEquals(\"Should produce the expected record\",\n-          Sets.newHashSet(expected), Sets.newHashSet(iterable));\n+      List<Record> iterList = Lists.newArrayList(iterable.iterator());\n+      sortRecordList(iterList);\n+      sortRecordList(expected);\n+      Assert.assertEquals(\"Should produce the expected record\", expected, iterList);\n     }\n   }\n \n+  private static void sortRecordList(List<Record> list) {\n+    Collections.sort(list, (o1, o2) -> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjgzMDkwMw=="}, "originalCommit": {"oid": "e52aaa82372779b176c620e4104125ccf6f1ad41"}, "originalPosition": 30}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3443, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}