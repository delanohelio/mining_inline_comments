{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA2MDgyMjUw", "number": 1633, "title": "AWS Glue catalog and table operations", "bodyText": "Add GlueCatalog and GlueTableOperations implementations\nFix bugs found in S3FileIO and add more tests\nadd :integrationTest task to run integration tests for the aws module.", "createdAt": "2020-10-19T15:42:04Z", "url": "https://github.com/apache/iceberg/pull/1633", "merged": true, "mergeCommit": {"oid": "0beb7d663694d78e6edecb241a008e9834c82d8c"}, "closed": true, "closedAt": "2020-11-19T18:23:35Z", "author": {"login": "jackye1995"}, "timelineItems": {"totalCount": 59, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdUGQ86AFqTUxMTkxNDAxOA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdd2iRmgH2gAyNTA2MDgyMjUwOmY0MTgyNjJiNzRmNmZhOTE2OWY1ZWE2OGI1MWFjZWZlZDVmOGVjOGU=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTExOTE0MDE4", "url": "https://github.com/apache/iceberg/pull/1633#pullrequestreview-511914018", "createdAt": "2020-10-19T15:53:40Z", "commit": {"oid": "0621754136976a9aa17c90858bed545e1c35a5f5"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQxNTo1Mzo0MFrOHkVo5A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQxNTo1Mzo0MFrOHkVo5A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzg2NTMxNg==", "bodyText": "nit: Javadoc style. Capitalization and such", "url": "https://github.com/apache/iceberg/pull/1633#discussion_r507865316", "createdAt": "2020-10-19T15:53:40Z", "author": {"login": "RussellSpitzer"}, "path": "aws/src/main/java/org/apache/iceberg/aws/glue/GlueCatalog.java", "diffHunk": "@@ -0,0 +1,312 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.aws.glue;\n+\n+import java.io.Closeable;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import org.apache.hadoop.conf.Configuration;\n+import org.apache.iceberg.BaseMetastoreCatalog;\n+import org.apache.iceberg.CatalogUtil;\n+import org.apache.iceberg.TableMetadata;\n+import org.apache.iceberg.TableOperations;\n+import org.apache.iceberg.catalog.Namespace;\n+import org.apache.iceberg.catalog.SupportsNamespaces;\n+import org.apache.iceberg.catalog.TableIdentifier;\n+import org.apache.iceberg.exceptions.NamespaceNotEmptyException;\n+import org.apache.iceberg.exceptions.NoSuchNamespaceException;\n+import org.apache.iceberg.relocated.com.google.common.base.Preconditions;\n+import org.apache.iceberg.relocated.com.google.common.collect.Lists;\n+import org.apache.iceberg.relocated.com.google.common.collect.Maps;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import software.amazon.awssdk.services.glue.GlueClient;\n+import software.amazon.awssdk.services.glue.model.CreateDatabaseRequest;\n+import software.amazon.awssdk.services.glue.model.DeleteDatabaseRequest;\n+import software.amazon.awssdk.services.glue.model.DeleteTableRequest;\n+import software.amazon.awssdk.services.glue.model.EntityNotFoundException;\n+import software.amazon.awssdk.services.glue.model.GetDatabaseRequest;\n+import software.amazon.awssdk.services.glue.model.GetDatabaseResponse;\n+import software.amazon.awssdk.services.glue.model.GetDatabasesRequest;\n+import software.amazon.awssdk.services.glue.model.GetDatabasesResponse;\n+import software.amazon.awssdk.services.glue.model.GetTablesRequest;\n+import software.amazon.awssdk.services.glue.model.GetTablesResponse;\n+import software.amazon.awssdk.services.glue.model.InvalidInputException;\n+import software.amazon.awssdk.services.glue.model.UpdateDatabaseRequest;\n+\n+public class GlueCatalog extends BaseMetastoreCatalog implements Closeable, SupportsNamespaces {\n+\n+  private static final Logger LOG = LoggerFactory.getLogger(GlueCatalog.class);\n+\n+  private final Configuration conf;\n+  private final GlueClient glue;\n+  // Catalog ID is the AWS account ID. When it is null, it uses the account of the Glue client.\n+  private final String catalogId;\n+  private final String warehousePath;\n+\n+  /**\n+   * constructor with default glue client", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0621754136976a9aa17c90858bed545e1c35a5f5"}, "originalPosition": 69}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTExOTE0NzQ2", "url": "https://github.com/apache/iceberg/pull/1633#pullrequestreview-511914746", "createdAt": "2020-10-19T15:54:26Z", "commit": {"oid": "0621754136976a9aa17c90858bed545e1c35a5f5"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQxNTo1NDoyNlrOHkVq8g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQxNTo1NDoyNlrOHkVq8g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzg2NTg0Mg==", "bodyText": "nit: Javadoc style. Capitalization and probably needs elaboration", "url": "https://github.com/apache/iceberg/pull/1633#discussion_r507865842", "createdAt": "2020-10-19T15:54:26Z", "author": {"login": "RussellSpitzer"}, "path": "aws/src/main/java/org/apache/iceberg/aws/glue/GlueCatalog.java", "diffHunk": "@@ -0,0 +1,312 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.aws.glue;\n+\n+import java.io.Closeable;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import org.apache.hadoop.conf.Configuration;\n+import org.apache.iceberg.BaseMetastoreCatalog;\n+import org.apache.iceberg.CatalogUtil;\n+import org.apache.iceberg.TableMetadata;\n+import org.apache.iceberg.TableOperations;\n+import org.apache.iceberg.catalog.Namespace;\n+import org.apache.iceberg.catalog.SupportsNamespaces;\n+import org.apache.iceberg.catalog.TableIdentifier;\n+import org.apache.iceberg.exceptions.NamespaceNotEmptyException;\n+import org.apache.iceberg.exceptions.NoSuchNamespaceException;\n+import org.apache.iceberg.relocated.com.google.common.base.Preconditions;\n+import org.apache.iceberg.relocated.com.google.common.collect.Lists;\n+import org.apache.iceberg.relocated.com.google.common.collect.Maps;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import software.amazon.awssdk.services.glue.GlueClient;\n+import software.amazon.awssdk.services.glue.model.CreateDatabaseRequest;\n+import software.amazon.awssdk.services.glue.model.DeleteDatabaseRequest;\n+import software.amazon.awssdk.services.glue.model.DeleteTableRequest;\n+import software.amazon.awssdk.services.glue.model.EntityNotFoundException;\n+import software.amazon.awssdk.services.glue.model.GetDatabaseRequest;\n+import software.amazon.awssdk.services.glue.model.GetDatabaseResponse;\n+import software.amazon.awssdk.services.glue.model.GetDatabasesRequest;\n+import software.amazon.awssdk.services.glue.model.GetDatabasesResponse;\n+import software.amazon.awssdk.services.glue.model.GetTablesRequest;\n+import software.amazon.awssdk.services.glue.model.GetTablesResponse;\n+import software.amazon.awssdk.services.glue.model.InvalidInputException;\n+import software.amazon.awssdk.services.glue.model.UpdateDatabaseRequest;\n+\n+public class GlueCatalog extends BaseMetastoreCatalog implements Closeable, SupportsNamespaces {\n+\n+  private static final Logger LOG = LoggerFactory.getLogger(GlueCatalog.class);\n+\n+  private final Configuration conf;\n+  private final GlueClient glue;\n+  // Catalog ID is the AWS account ID. When it is null, it uses the account of the Glue client.\n+  private final String catalogId;\n+  private final String warehousePath;\n+\n+  /**\n+   * constructor with default glue client\n+   * @param conf Hadoop config, passed in for users of HadoopIO\n+   * @param catalogId Glue catalog ID, which is the AWS account ID. When null, it uses the account of the Glue client.\n+   * @param warehousePath warehouse path, such as s3://my-iceberg-bucket/metadata_prod\n+   */\n+  public GlueCatalog(Configuration conf, String catalogId, String warehousePath) {\n+    this(conf, GlueClient.create(), catalogId, warehousePath);\n+  }\n+\n+  /**\n+   * constructor", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0621754136976a9aa17c90858bed545e1c35a5f5"}, "originalPosition": 79}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTExOTE1ODE2", "url": "https://github.com/apache/iceberg/pull/1633#pullrequestreview-511915816", "createdAt": "2020-10-19T15:55:33Z", "commit": {"oid": "0621754136976a9aa17c90858bed545e1c35a5f5"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQxNTo1NTozM1rOHkVuYQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQxNTo1NTozM1rOHkVuYQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzg2NjcyMQ==", "bodyText": "nit: Iceberg error messages are usually \"Cannot x because y. (Workaround or fix)\"", "url": "https://github.com/apache/iceberg/pull/1633#discussion_r507866721", "createdAt": "2020-10-19T15:55:33Z", "author": {"login": "RussellSpitzer"}, "path": "aws/src/main/java/org/apache/iceberg/aws/glue/GlueCatalog.java", "diffHunk": "@@ -0,0 +1,312 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.aws.glue;\n+\n+import java.io.Closeable;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import org.apache.hadoop.conf.Configuration;\n+import org.apache.iceberg.BaseMetastoreCatalog;\n+import org.apache.iceberg.CatalogUtil;\n+import org.apache.iceberg.TableMetadata;\n+import org.apache.iceberg.TableOperations;\n+import org.apache.iceberg.catalog.Namespace;\n+import org.apache.iceberg.catalog.SupportsNamespaces;\n+import org.apache.iceberg.catalog.TableIdentifier;\n+import org.apache.iceberg.exceptions.NamespaceNotEmptyException;\n+import org.apache.iceberg.exceptions.NoSuchNamespaceException;\n+import org.apache.iceberg.relocated.com.google.common.base.Preconditions;\n+import org.apache.iceberg.relocated.com.google.common.collect.Lists;\n+import org.apache.iceberg.relocated.com.google.common.collect.Maps;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import software.amazon.awssdk.services.glue.GlueClient;\n+import software.amazon.awssdk.services.glue.model.CreateDatabaseRequest;\n+import software.amazon.awssdk.services.glue.model.DeleteDatabaseRequest;\n+import software.amazon.awssdk.services.glue.model.DeleteTableRequest;\n+import software.amazon.awssdk.services.glue.model.EntityNotFoundException;\n+import software.amazon.awssdk.services.glue.model.GetDatabaseRequest;\n+import software.amazon.awssdk.services.glue.model.GetDatabaseResponse;\n+import software.amazon.awssdk.services.glue.model.GetDatabasesRequest;\n+import software.amazon.awssdk.services.glue.model.GetDatabasesResponse;\n+import software.amazon.awssdk.services.glue.model.GetTablesRequest;\n+import software.amazon.awssdk.services.glue.model.GetTablesResponse;\n+import software.amazon.awssdk.services.glue.model.InvalidInputException;\n+import software.amazon.awssdk.services.glue.model.UpdateDatabaseRequest;\n+\n+public class GlueCatalog extends BaseMetastoreCatalog implements Closeable, SupportsNamespaces {\n+\n+  private static final Logger LOG = LoggerFactory.getLogger(GlueCatalog.class);\n+\n+  private final Configuration conf;\n+  private final GlueClient glue;\n+  // Catalog ID is the AWS account ID. When it is null, it uses the account of the Glue client.\n+  private final String catalogId;\n+  private final String warehousePath;\n+\n+  /**\n+   * constructor with default glue client\n+   * @param conf Hadoop config, passed in for users of HadoopIO\n+   * @param catalogId Glue catalog ID, which is the AWS account ID. When null, it uses the account of the Glue client.\n+   * @param warehousePath warehouse path, such as s3://my-iceberg-bucket/metadata_prod\n+   */\n+  public GlueCatalog(Configuration conf, String catalogId, String warehousePath) {\n+    this(conf, GlueClient.create(), catalogId, warehousePath);\n+  }\n+\n+  /**\n+   * constructor\n+   * @param conf Hadoop config, passed in for users of HadoopIO\n+   * @param glue Glue client\n+   * @param catalogId Glue catalog ID, which is the AWS account ID. When null, it uses the account of the Glue client.\n+   * @param warehousePath warehouse path, such as s3://my-iceberg-bucket/metadata_prod\n+   */\n+  public GlueCatalog(Configuration conf, GlueClient glue, String catalogId, String warehousePath) {\n+    this.conf = conf;\n+    this.glue = glue;\n+    this.catalogId = catalogId;\n+    this.warehousePath = warehousePath;\n+    validateWarehousePath();\n+  }\n+\n+  private void validateWarehousePath() {\n+    Preconditions.checkArgument(warehousePath != null && warehousePath.length() > 0,\n+        \"Glue warehouse path must be set\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0621754136976a9aa17c90858bed545e1c35a5f5"}, "originalPosition": 95}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTExOTE5NjA5", "url": "https://github.com/apache/iceberg/pull/1633#pullrequestreview-511919609", "createdAt": "2020-10-19T15:59:30Z", "commit": {"oid": "0621754136976a9aa17c90858bed545e1c35a5f5"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQxNTo1OTozMVrOHkV52A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQxNTo1OTozMVrOHkV52A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzg2OTY1Ng==", "bodyText": "This java doc isn't clear to me. I think the summary here should describe what the method is doing \"Returns the default warehouse location as stored in the glue service (?). If not present, uses X .... \"\nThen under return \"default warehouse path as a string using Hive's formatting\"\nDoes that sound right?", "url": "https://github.com/apache/iceberg/pull/1633#discussion_r507869656", "createdAt": "2020-10-19T15:59:31Z", "author": {"login": "RussellSpitzer"}, "path": "aws/src/main/java/org/apache/iceberg/aws/glue/GlueCatalog.java", "diffHunk": "@@ -0,0 +1,312 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.aws.glue;\n+\n+import java.io.Closeable;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import org.apache.hadoop.conf.Configuration;\n+import org.apache.iceberg.BaseMetastoreCatalog;\n+import org.apache.iceberg.CatalogUtil;\n+import org.apache.iceberg.TableMetadata;\n+import org.apache.iceberg.TableOperations;\n+import org.apache.iceberg.catalog.Namespace;\n+import org.apache.iceberg.catalog.SupportsNamespaces;\n+import org.apache.iceberg.catalog.TableIdentifier;\n+import org.apache.iceberg.exceptions.NamespaceNotEmptyException;\n+import org.apache.iceberg.exceptions.NoSuchNamespaceException;\n+import org.apache.iceberg.relocated.com.google.common.base.Preconditions;\n+import org.apache.iceberg.relocated.com.google.common.collect.Lists;\n+import org.apache.iceberg.relocated.com.google.common.collect.Maps;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import software.amazon.awssdk.services.glue.GlueClient;\n+import software.amazon.awssdk.services.glue.model.CreateDatabaseRequest;\n+import software.amazon.awssdk.services.glue.model.DeleteDatabaseRequest;\n+import software.amazon.awssdk.services.glue.model.DeleteTableRequest;\n+import software.amazon.awssdk.services.glue.model.EntityNotFoundException;\n+import software.amazon.awssdk.services.glue.model.GetDatabaseRequest;\n+import software.amazon.awssdk.services.glue.model.GetDatabaseResponse;\n+import software.amazon.awssdk.services.glue.model.GetDatabasesRequest;\n+import software.amazon.awssdk.services.glue.model.GetDatabasesResponse;\n+import software.amazon.awssdk.services.glue.model.GetTablesRequest;\n+import software.amazon.awssdk.services.glue.model.GetTablesResponse;\n+import software.amazon.awssdk.services.glue.model.InvalidInputException;\n+import software.amazon.awssdk.services.glue.model.UpdateDatabaseRequest;\n+\n+public class GlueCatalog extends BaseMetastoreCatalog implements Closeable, SupportsNamespaces {\n+\n+  private static final Logger LOG = LoggerFactory.getLogger(GlueCatalog.class);\n+\n+  private final Configuration conf;\n+  private final GlueClient glue;\n+  // Catalog ID is the AWS account ID. When it is null, it uses the account of the Glue client.\n+  private final String catalogId;\n+  private final String warehousePath;\n+\n+  /**\n+   * constructor with default glue client\n+   * @param conf Hadoop config, passed in for users of HadoopIO\n+   * @param catalogId Glue catalog ID, which is the AWS account ID. When null, it uses the account of the Glue client.\n+   * @param warehousePath warehouse path, such as s3://my-iceberg-bucket/metadata_prod\n+   */\n+  public GlueCatalog(Configuration conf, String catalogId, String warehousePath) {\n+    this(conf, GlueClient.create(), catalogId, warehousePath);\n+  }\n+\n+  /**\n+   * constructor\n+   * @param conf Hadoop config, passed in for users of HadoopIO\n+   * @param glue Glue client\n+   * @param catalogId Glue catalog ID, which is the AWS account ID. When null, it uses the account of the Glue client.\n+   * @param warehousePath warehouse path, such as s3://my-iceberg-bucket/metadata_prod\n+   */\n+  public GlueCatalog(Configuration conf, GlueClient glue, String catalogId, String warehousePath) {\n+    this.conf = conf;\n+    this.glue = glue;\n+    this.catalogId = catalogId;\n+    this.warehousePath = warehousePath;\n+    validateWarehousePath();\n+  }\n+\n+  private void validateWarehousePath() {\n+    Preconditions.checkArgument(warehousePath != null && warehousePath.length() > 0,\n+        \"Glue warehouse path must be set\");\n+    Preconditions.checkArgument(warehousePath.charAt(warehousePath.length() - 1) != '/',\n+        \"Glue warehouse path %s must not end with /\", warehousePath);\n+  }\n+\n+  @Override\n+  public void close() throws IOException {\n+    glue.close();\n+  }\n+\n+  @Override\n+  protected TableOperations newTableOps(TableIdentifier tableIdentifier) {\n+    String dbName = IcebergToGlueConverter.toDatabaseName(tableIdentifier.namespace());\n+    String tableName = tableIdentifier.name();\n+    return new GlueTableOperations(conf, glue, catalogId, dbName, tableName);\n+  }\n+\n+  /**\n+   * Use the same format as Hive for default warehouse location", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0621754136976a9aa17c90858bed545e1c35a5f5"}, "originalPosition": 113}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTExOTI0MTQx", "url": "https://github.com/apache/iceberg/pull/1633#pullrequestreview-511924141", "createdAt": "2020-10-19T16:04:20Z", "commit": {"oid": "0621754136976a9aa17c90858bed545e1c35a5f5"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQxNjowNDoyMFrOHkWHLQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQxNjowNDoyMFrOHkWHLQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzg3MzA2OQ==", "bodyText": "I tend to be afraid of while(true) break, I would prefer this was written in a different style. One quick change here which wouldn't be that different would be a \"do while\" which would let you keep basically everything the same but you could drop the \"break\".\nIdeally I like to avoid \"break\" if at all possible and especially in loops, but ymmv.", "url": "https://github.com/apache/iceberg/pull/1633#discussion_r507873069", "createdAt": "2020-10-19T16:04:20Z", "author": {"login": "RussellSpitzer"}, "path": "aws/src/main/java/org/apache/iceberg/aws/glue/GlueCatalog.java", "diffHunk": "@@ -0,0 +1,312 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.aws.glue;\n+\n+import java.io.Closeable;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import org.apache.hadoop.conf.Configuration;\n+import org.apache.iceberg.BaseMetastoreCatalog;\n+import org.apache.iceberg.CatalogUtil;\n+import org.apache.iceberg.TableMetadata;\n+import org.apache.iceberg.TableOperations;\n+import org.apache.iceberg.catalog.Namespace;\n+import org.apache.iceberg.catalog.SupportsNamespaces;\n+import org.apache.iceberg.catalog.TableIdentifier;\n+import org.apache.iceberg.exceptions.NamespaceNotEmptyException;\n+import org.apache.iceberg.exceptions.NoSuchNamespaceException;\n+import org.apache.iceberg.relocated.com.google.common.base.Preconditions;\n+import org.apache.iceberg.relocated.com.google.common.collect.Lists;\n+import org.apache.iceberg.relocated.com.google.common.collect.Maps;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import software.amazon.awssdk.services.glue.GlueClient;\n+import software.amazon.awssdk.services.glue.model.CreateDatabaseRequest;\n+import software.amazon.awssdk.services.glue.model.DeleteDatabaseRequest;\n+import software.amazon.awssdk.services.glue.model.DeleteTableRequest;\n+import software.amazon.awssdk.services.glue.model.EntityNotFoundException;\n+import software.amazon.awssdk.services.glue.model.GetDatabaseRequest;\n+import software.amazon.awssdk.services.glue.model.GetDatabaseResponse;\n+import software.amazon.awssdk.services.glue.model.GetDatabasesRequest;\n+import software.amazon.awssdk.services.glue.model.GetDatabasesResponse;\n+import software.amazon.awssdk.services.glue.model.GetTablesRequest;\n+import software.amazon.awssdk.services.glue.model.GetTablesResponse;\n+import software.amazon.awssdk.services.glue.model.InvalidInputException;\n+import software.amazon.awssdk.services.glue.model.UpdateDatabaseRequest;\n+\n+public class GlueCatalog extends BaseMetastoreCatalog implements Closeable, SupportsNamespaces {\n+\n+  private static final Logger LOG = LoggerFactory.getLogger(GlueCatalog.class);\n+\n+  private final Configuration conf;\n+  private final GlueClient glue;\n+  // Catalog ID is the AWS account ID. When it is null, it uses the account of the Glue client.\n+  private final String catalogId;\n+  private final String warehousePath;\n+\n+  /**\n+   * constructor with default glue client\n+   * @param conf Hadoop config, passed in for users of HadoopIO\n+   * @param catalogId Glue catalog ID, which is the AWS account ID. When null, it uses the account of the Glue client.\n+   * @param warehousePath warehouse path, such as s3://my-iceberg-bucket/metadata_prod\n+   */\n+  public GlueCatalog(Configuration conf, String catalogId, String warehousePath) {\n+    this(conf, GlueClient.create(), catalogId, warehousePath);\n+  }\n+\n+  /**\n+   * constructor\n+   * @param conf Hadoop config, passed in for users of HadoopIO\n+   * @param glue Glue client\n+   * @param catalogId Glue catalog ID, which is the AWS account ID. When null, it uses the account of the Glue client.\n+   * @param warehousePath warehouse path, such as s3://my-iceberg-bucket/metadata_prod\n+   */\n+  public GlueCatalog(Configuration conf, GlueClient glue, String catalogId, String warehousePath) {\n+    this.conf = conf;\n+    this.glue = glue;\n+    this.catalogId = catalogId;\n+    this.warehousePath = warehousePath;\n+    validateWarehousePath();\n+  }\n+\n+  private void validateWarehousePath() {\n+    Preconditions.checkArgument(warehousePath != null && warehousePath.length() > 0,\n+        \"Glue warehouse path must be set\");\n+    Preconditions.checkArgument(warehousePath.charAt(warehousePath.length() - 1) != '/',\n+        \"Glue warehouse path %s must not end with /\", warehousePath);\n+  }\n+\n+  @Override\n+  public void close() throws IOException {\n+    glue.close();\n+  }\n+\n+  @Override\n+  protected TableOperations newTableOps(TableIdentifier tableIdentifier) {\n+    String dbName = IcebergToGlueConverter.toDatabaseName(tableIdentifier.namespace());\n+    String tableName = tableIdentifier.name();\n+    return new GlueTableOperations(conf, glue, catalogId, dbName, tableName);\n+  }\n+\n+  /**\n+   * Use the same format as Hive for default warehouse location\n+   * @param tableIdentifier table id\n+   * @return default warehouse path\n+   */\n+  @Override\n+  protected String defaultWarehouseLocation(TableIdentifier tableIdentifier) {\n+    // check if value is set in database\n+    GetDatabaseResponse response = glue.getDatabase(GetDatabaseRequest.builder()\n+        .name(IcebergToGlueConverter.toDatabaseName(tableIdentifier.namespace()))\n+        .build());\n+    String dbLocationUri = response.database().locationUri();\n+    if (dbLocationUri != null) {\n+      return String.format(\"%s/%s\", dbLocationUri, tableIdentifier.name());\n+    }\n+\n+    return String.format(\n+        \"%s/%s.db/%s\",\n+        warehousePath,\n+        IcebergToGlueConverter.toDatabaseName(tableIdentifier.namespace()),\n+        tableIdentifier.name());\n+  }\n+\n+  @Override\n+  public List<TableIdentifier> listTables(Namespace namespace) {\n+    namespaceExists(namespace);\n+    // should be safe to list all before returning the list, instead of dynamically load the list.\n+    String nextToken = null;\n+    List<TableIdentifier> results = new ArrayList<>();\n+    while (true) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0621754136976a9aa17c90858bed545e1c35a5f5"}, "originalPosition": 141}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTExOTI1MjE4", "url": "https://github.com/apache/iceberg/pull/1633#pullrequestreview-511925218", "createdAt": "2020-10-19T16:05:31Z", "commit": {"oid": "0621754136976a9aa17c90858bed545e1c35a5f5"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQxNjowNTozMVrOHkWKQA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQxNjowNTozMVrOHkWKQA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzg3Mzg1Ng==", "bodyText": "Is there any possibility we might want to log the contents of this Exception? Feel's like we may want to surface some classes of errors.", "url": "https://github.com/apache/iceberg/pull/1633#discussion_r507873856", "createdAt": "2020-10-19T16:05:31Z", "author": {"login": "RussellSpitzer"}, "path": "aws/src/main/java/org/apache/iceberg/aws/glue/GlueCatalog.java", "diffHunk": "@@ -0,0 +1,312 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.aws.glue;\n+\n+import java.io.Closeable;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import org.apache.hadoop.conf.Configuration;\n+import org.apache.iceberg.BaseMetastoreCatalog;\n+import org.apache.iceberg.CatalogUtil;\n+import org.apache.iceberg.TableMetadata;\n+import org.apache.iceberg.TableOperations;\n+import org.apache.iceberg.catalog.Namespace;\n+import org.apache.iceberg.catalog.SupportsNamespaces;\n+import org.apache.iceberg.catalog.TableIdentifier;\n+import org.apache.iceberg.exceptions.NamespaceNotEmptyException;\n+import org.apache.iceberg.exceptions.NoSuchNamespaceException;\n+import org.apache.iceberg.relocated.com.google.common.base.Preconditions;\n+import org.apache.iceberg.relocated.com.google.common.collect.Lists;\n+import org.apache.iceberg.relocated.com.google.common.collect.Maps;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import software.amazon.awssdk.services.glue.GlueClient;\n+import software.amazon.awssdk.services.glue.model.CreateDatabaseRequest;\n+import software.amazon.awssdk.services.glue.model.DeleteDatabaseRequest;\n+import software.amazon.awssdk.services.glue.model.DeleteTableRequest;\n+import software.amazon.awssdk.services.glue.model.EntityNotFoundException;\n+import software.amazon.awssdk.services.glue.model.GetDatabaseRequest;\n+import software.amazon.awssdk.services.glue.model.GetDatabaseResponse;\n+import software.amazon.awssdk.services.glue.model.GetDatabasesRequest;\n+import software.amazon.awssdk.services.glue.model.GetDatabasesResponse;\n+import software.amazon.awssdk.services.glue.model.GetTablesRequest;\n+import software.amazon.awssdk.services.glue.model.GetTablesResponse;\n+import software.amazon.awssdk.services.glue.model.InvalidInputException;\n+import software.amazon.awssdk.services.glue.model.UpdateDatabaseRequest;\n+\n+public class GlueCatalog extends BaseMetastoreCatalog implements Closeable, SupportsNamespaces {\n+\n+  private static final Logger LOG = LoggerFactory.getLogger(GlueCatalog.class);\n+\n+  private final Configuration conf;\n+  private final GlueClient glue;\n+  // Catalog ID is the AWS account ID. When it is null, it uses the account of the Glue client.\n+  private final String catalogId;\n+  private final String warehousePath;\n+\n+  /**\n+   * constructor with default glue client\n+   * @param conf Hadoop config, passed in for users of HadoopIO\n+   * @param catalogId Glue catalog ID, which is the AWS account ID. When null, it uses the account of the Glue client.\n+   * @param warehousePath warehouse path, such as s3://my-iceberg-bucket/metadata_prod\n+   */\n+  public GlueCatalog(Configuration conf, String catalogId, String warehousePath) {\n+    this(conf, GlueClient.create(), catalogId, warehousePath);\n+  }\n+\n+  /**\n+   * constructor\n+   * @param conf Hadoop config, passed in for users of HadoopIO\n+   * @param glue Glue client\n+   * @param catalogId Glue catalog ID, which is the AWS account ID. When null, it uses the account of the Glue client.\n+   * @param warehousePath warehouse path, such as s3://my-iceberg-bucket/metadata_prod\n+   */\n+  public GlueCatalog(Configuration conf, GlueClient glue, String catalogId, String warehousePath) {\n+    this.conf = conf;\n+    this.glue = glue;\n+    this.catalogId = catalogId;\n+    this.warehousePath = warehousePath;\n+    validateWarehousePath();\n+  }\n+\n+  private void validateWarehousePath() {\n+    Preconditions.checkArgument(warehousePath != null && warehousePath.length() > 0,\n+        \"Glue warehouse path must be set\");\n+    Preconditions.checkArgument(warehousePath.charAt(warehousePath.length() - 1) != '/',\n+        \"Glue warehouse path %s must not end with /\", warehousePath);\n+  }\n+\n+  @Override\n+  public void close() throws IOException {\n+    glue.close();\n+  }\n+\n+  @Override\n+  protected TableOperations newTableOps(TableIdentifier tableIdentifier) {\n+    String dbName = IcebergToGlueConverter.toDatabaseName(tableIdentifier.namespace());\n+    String tableName = tableIdentifier.name();\n+    return new GlueTableOperations(conf, glue, catalogId, dbName, tableName);\n+  }\n+\n+  /**\n+   * Use the same format as Hive for default warehouse location\n+   * @param tableIdentifier table id\n+   * @return default warehouse path\n+   */\n+  @Override\n+  protected String defaultWarehouseLocation(TableIdentifier tableIdentifier) {\n+    // check if value is set in database\n+    GetDatabaseResponse response = glue.getDatabase(GetDatabaseRequest.builder()\n+        .name(IcebergToGlueConverter.toDatabaseName(tableIdentifier.namespace()))\n+        .build());\n+    String dbLocationUri = response.database().locationUri();\n+    if (dbLocationUri != null) {\n+      return String.format(\"%s/%s\", dbLocationUri, tableIdentifier.name());\n+    }\n+\n+    return String.format(\n+        \"%s/%s.db/%s\",\n+        warehousePath,\n+        IcebergToGlueConverter.toDatabaseName(tableIdentifier.namespace()),\n+        tableIdentifier.name());\n+  }\n+\n+  @Override\n+  public List<TableIdentifier> listTables(Namespace namespace) {\n+    namespaceExists(namespace);\n+    // should be safe to list all before returning the list, instead of dynamically load the list.\n+    String nextToken = null;\n+    List<TableIdentifier> results = new ArrayList<>();\n+    while (true) {\n+      GetTablesResponse response = glue.getTables(GetTablesRequest.builder()\n+          .catalogId(catalogId)\n+          .databaseName(IcebergToGlueConverter.toDatabaseName(namespace))\n+          .nextToken(nextToken)\n+          .build());\n+      if (response.hasTableList()) {\n+        results.addAll(response.tableList().stream()\n+            .map(GlueToIcebergConverter::toTableId)\n+            .collect(Collectors.toList()));\n+        nextToken = response.nextToken();\n+      }\n+      if (nextToken == null) {\n+        break;\n+      }\n+    }\n+    return results;\n+  }\n+\n+  @Override\n+  public boolean dropTable(TableIdentifier identifier, boolean purge) {\n+    try {\n+      dropTable(newTableOps(identifier), identifier, purge);\n+      return true;\n+    } catch (Exception e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0621754136976a9aa17c90858bed545e1c35a5f5"}, "originalPosition": 165}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTExOTM3Mjc1", "url": "https://github.com/apache/iceberg/pull/1633#pullrequestreview-511937275", "createdAt": "2020-10-19T16:19:07Z", "commit": {"oid": "0621754136976a9aa17c90858bed545e1c35a5f5"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQxNjoxOTowOFrOHkWtwg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQxNjoxOTowOFrOHkWtwg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzg4Mjk0Ng==", "bodyText": "another maybe \"do while\" oppertunity", "url": "https://github.com/apache/iceberg/pull/1633#discussion_r507882946", "createdAt": "2020-10-19T16:19:08Z", "author": {"login": "RussellSpitzer"}, "path": "aws/src/main/java/org/apache/iceberg/aws/glue/GlueCatalog.java", "diffHunk": "@@ -0,0 +1,312 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.aws.glue;\n+\n+import java.io.Closeable;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import org.apache.hadoop.conf.Configuration;\n+import org.apache.iceberg.BaseMetastoreCatalog;\n+import org.apache.iceberg.CatalogUtil;\n+import org.apache.iceberg.TableMetadata;\n+import org.apache.iceberg.TableOperations;\n+import org.apache.iceberg.catalog.Namespace;\n+import org.apache.iceberg.catalog.SupportsNamespaces;\n+import org.apache.iceberg.catalog.TableIdentifier;\n+import org.apache.iceberg.exceptions.NamespaceNotEmptyException;\n+import org.apache.iceberg.exceptions.NoSuchNamespaceException;\n+import org.apache.iceberg.relocated.com.google.common.base.Preconditions;\n+import org.apache.iceberg.relocated.com.google.common.collect.Lists;\n+import org.apache.iceberg.relocated.com.google.common.collect.Maps;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import software.amazon.awssdk.services.glue.GlueClient;\n+import software.amazon.awssdk.services.glue.model.CreateDatabaseRequest;\n+import software.amazon.awssdk.services.glue.model.DeleteDatabaseRequest;\n+import software.amazon.awssdk.services.glue.model.DeleteTableRequest;\n+import software.amazon.awssdk.services.glue.model.EntityNotFoundException;\n+import software.amazon.awssdk.services.glue.model.GetDatabaseRequest;\n+import software.amazon.awssdk.services.glue.model.GetDatabaseResponse;\n+import software.amazon.awssdk.services.glue.model.GetDatabasesRequest;\n+import software.amazon.awssdk.services.glue.model.GetDatabasesResponse;\n+import software.amazon.awssdk.services.glue.model.GetTablesRequest;\n+import software.amazon.awssdk.services.glue.model.GetTablesResponse;\n+import software.amazon.awssdk.services.glue.model.InvalidInputException;\n+import software.amazon.awssdk.services.glue.model.UpdateDatabaseRequest;\n+\n+public class GlueCatalog extends BaseMetastoreCatalog implements Closeable, SupportsNamespaces {\n+\n+  private static final Logger LOG = LoggerFactory.getLogger(GlueCatalog.class);\n+\n+  private final Configuration conf;\n+  private final GlueClient glue;\n+  // Catalog ID is the AWS account ID. When it is null, it uses the account of the Glue client.\n+  private final String catalogId;\n+  private final String warehousePath;\n+\n+  /**\n+   * constructor with default glue client\n+   * @param conf Hadoop config, passed in for users of HadoopIO\n+   * @param catalogId Glue catalog ID, which is the AWS account ID. When null, it uses the account of the Glue client.\n+   * @param warehousePath warehouse path, such as s3://my-iceberg-bucket/metadata_prod\n+   */\n+  public GlueCatalog(Configuration conf, String catalogId, String warehousePath) {\n+    this(conf, GlueClient.create(), catalogId, warehousePath);\n+  }\n+\n+  /**\n+   * constructor\n+   * @param conf Hadoop config, passed in for users of HadoopIO\n+   * @param glue Glue client\n+   * @param catalogId Glue catalog ID, which is the AWS account ID. When null, it uses the account of the Glue client.\n+   * @param warehousePath warehouse path, such as s3://my-iceberg-bucket/metadata_prod\n+   */\n+  public GlueCatalog(Configuration conf, GlueClient glue, String catalogId, String warehousePath) {\n+    this.conf = conf;\n+    this.glue = glue;\n+    this.catalogId = catalogId;\n+    this.warehousePath = warehousePath;\n+    validateWarehousePath();\n+  }\n+\n+  private void validateWarehousePath() {\n+    Preconditions.checkArgument(warehousePath != null && warehousePath.length() > 0,\n+        \"Glue warehouse path must be set\");\n+    Preconditions.checkArgument(warehousePath.charAt(warehousePath.length() - 1) != '/',\n+        \"Glue warehouse path %s must not end with /\", warehousePath);\n+  }\n+\n+  @Override\n+  public void close() throws IOException {\n+    glue.close();\n+  }\n+\n+  @Override\n+  protected TableOperations newTableOps(TableIdentifier tableIdentifier) {\n+    String dbName = IcebergToGlueConverter.toDatabaseName(tableIdentifier.namespace());\n+    String tableName = tableIdentifier.name();\n+    return new GlueTableOperations(conf, glue, catalogId, dbName, tableName);\n+  }\n+\n+  /**\n+   * Use the same format as Hive for default warehouse location\n+   * @param tableIdentifier table id\n+   * @return default warehouse path\n+   */\n+  @Override\n+  protected String defaultWarehouseLocation(TableIdentifier tableIdentifier) {\n+    // check if value is set in database\n+    GetDatabaseResponse response = glue.getDatabase(GetDatabaseRequest.builder()\n+        .name(IcebergToGlueConverter.toDatabaseName(tableIdentifier.namespace()))\n+        .build());\n+    String dbLocationUri = response.database().locationUri();\n+    if (dbLocationUri != null) {\n+      return String.format(\"%s/%s\", dbLocationUri, tableIdentifier.name());\n+    }\n+\n+    return String.format(\n+        \"%s/%s.db/%s\",\n+        warehousePath,\n+        IcebergToGlueConverter.toDatabaseName(tableIdentifier.namespace()),\n+        tableIdentifier.name());\n+  }\n+\n+  @Override\n+  public List<TableIdentifier> listTables(Namespace namespace) {\n+    namespaceExists(namespace);\n+    // should be safe to list all before returning the list, instead of dynamically load the list.\n+    String nextToken = null;\n+    List<TableIdentifier> results = new ArrayList<>();\n+    while (true) {\n+      GetTablesResponse response = glue.getTables(GetTablesRequest.builder()\n+          .catalogId(catalogId)\n+          .databaseName(IcebergToGlueConverter.toDatabaseName(namespace))\n+          .nextToken(nextToken)\n+          .build());\n+      if (response.hasTableList()) {\n+        results.addAll(response.tableList().stream()\n+            .map(GlueToIcebergConverter::toTableId)\n+            .collect(Collectors.toList()));\n+        nextToken = response.nextToken();\n+      }\n+      if (nextToken == null) {\n+        break;\n+      }\n+    }\n+    return results;\n+  }\n+\n+  @Override\n+  public boolean dropTable(TableIdentifier identifier, boolean purge) {\n+    try {\n+      dropTable(newTableOps(identifier), identifier, purge);\n+      return true;\n+    } catch (Exception e) {\n+      return false;\n+    }\n+  }\n+\n+  private TableMetadata dropTable(TableOperations ops, TableIdentifier identifier, boolean purge) {\n+    TableMetadata lastMetadata = null;\n+    if (ops.current() != null) {\n+      lastMetadata = ops.current();\n+    }\n+\n+    glue.deleteTable(DeleteTableRequest.builder()\n+        .catalogId(catalogId)\n+        .databaseName(IcebergToGlueConverter.toDatabaseName(identifier.namespace()))\n+        .name(identifier.name())\n+        .build());\n+\n+    if (purge && lastMetadata != null) {\n+      CatalogUtil.dropTableData(ops.io(), lastMetadata);\n+    }\n+\n+    LOG.info(\"Dropped table: {}\", identifier);\n+    return lastMetadata;\n+  }\n+\n+  /**\n+   * Rename table in Glue is a drop table and create table.\n+   * @param from identifier of the table to rename\n+   * @param to new table name\n+   */\n+  @Override\n+  public void renameTable(TableIdentifier from, TableIdentifier to) {\n+    TableOperations ops = newTableOps(from);\n+    // keep metadata\n+    TableMetadata tableMetadata = dropTable(ops, from, false);\n+    // use the same info to create the new table\n+    createTable(to, tableMetadata.schema(), tableMetadata.spec(), tableMetadata.properties());\n+  }\n+\n+  @Override\n+  public void createNamespace(Namespace namespace, Map<String, String> metadata) {\n+    glue.createDatabase(CreateDatabaseRequest.builder()\n+        .catalogId(catalogId)\n+        .databaseInput(IcebergToGlueConverter.toDatabaseInput(namespace, metadata))\n+        .build());\n+  }\n+\n+  @Override\n+  public List<Namespace> listNamespaces(Namespace namespace) throws NoSuchNamespaceException {\n+    if (!namespace.isEmpty()) {\n+      // if it is not a list all op, just check if the namespace exists and return itself.\n+      if (namespaceExists(namespace)) {\n+        return Lists.newArrayList(namespace);\n+      }\n+      throw new NoSuchNamespaceException(\n+          \"Glue does not support nested namespace, cannot list namespaces under %s\", namespace);\n+    }\n+    // should be safe to list all before returning the list, instead of dynamically load the list.\n+    String nextToken = null;\n+    List<Namespace> results = new ArrayList<>();\n+    while (true) {\n+      GetDatabasesResponse response = glue.getDatabases(GetDatabasesRequest.builder()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0621754136976a9aa17c90858bed545e1c35a5f5"}, "originalPosition": 226}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTExOTQwNzM5", "url": "https://github.com/apache/iceberg/pull/1633#pullrequestreview-511940739", "createdAt": "2020-10-19T16:23:06Z", "commit": {"oid": "0621754136976a9aa17c90858bed545e1c35a5f5"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQxNjoyMzowN1rOHkW4tg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQxNjoyMzowN1rOHkW4tg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzg4NTc1MA==", "bodyText": "Nit: Can we add Preconditions.checkNotNull on anything that is nullable here so we can avoid nulll checks later?", "url": "https://github.com/apache/iceberg/pull/1633#discussion_r507885750", "createdAt": "2020-10-19T16:23:07Z", "author": {"login": "kbendick"}, "path": "aws/src/main/java/org/apache/iceberg/aws/glue/GlueCatalog.java", "diffHunk": "@@ -0,0 +1,312 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.aws.glue;\n+\n+import java.io.Closeable;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import org.apache.hadoop.conf.Configuration;\n+import org.apache.iceberg.BaseMetastoreCatalog;\n+import org.apache.iceberg.CatalogUtil;\n+import org.apache.iceberg.TableMetadata;\n+import org.apache.iceberg.TableOperations;\n+import org.apache.iceberg.catalog.Namespace;\n+import org.apache.iceberg.catalog.SupportsNamespaces;\n+import org.apache.iceberg.catalog.TableIdentifier;\n+import org.apache.iceberg.exceptions.NamespaceNotEmptyException;\n+import org.apache.iceberg.exceptions.NoSuchNamespaceException;\n+import org.apache.iceberg.relocated.com.google.common.base.Preconditions;\n+import org.apache.iceberg.relocated.com.google.common.collect.Lists;\n+import org.apache.iceberg.relocated.com.google.common.collect.Maps;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import software.amazon.awssdk.services.glue.GlueClient;\n+import software.amazon.awssdk.services.glue.model.CreateDatabaseRequest;\n+import software.amazon.awssdk.services.glue.model.DeleteDatabaseRequest;\n+import software.amazon.awssdk.services.glue.model.DeleteTableRequest;\n+import software.amazon.awssdk.services.glue.model.EntityNotFoundException;\n+import software.amazon.awssdk.services.glue.model.GetDatabaseRequest;\n+import software.amazon.awssdk.services.glue.model.GetDatabaseResponse;\n+import software.amazon.awssdk.services.glue.model.GetDatabasesRequest;\n+import software.amazon.awssdk.services.glue.model.GetDatabasesResponse;\n+import software.amazon.awssdk.services.glue.model.GetTablesRequest;\n+import software.amazon.awssdk.services.glue.model.GetTablesResponse;\n+import software.amazon.awssdk.services.glue.model.InvalidInputException;\n+import software.amazon.awssdk.services.glue.model.UpdateDatabaseRequest;\n+\n+public class GlueCatalog extends BaseMetastoreCatalog implements Closeable, SupportsNamespaces {\n+\n+  private static final Logger LOG = LoggerFactory.getLogger(GlueCatalog.class);\n+\n+  private final Configuration conf;\n+  private final GlueClient glue;\n+  // Catalog ID is the AWS account ID. When it is null, it uses the account of the Glue client.\n+  private final String catalogId;\n+  private final String warehousePath;\n+\n+  /**\n+   * constructor with default glue client\n+   * @param conf Hadoop config, passed in for users of HadoopIO\n+   * @param catalogId Glue catalog ID, which is the AWS account ID. When null, it uses the account of the Glue client.\n+   * @param warehousePath warehouse path, such as s3://my-iceberg-bucket/metadata_prod\n+   */\n+  public GlueCatalog(Configuration conf, String catalogId, String warehousePath) {\n+    this(conf, GlueClient.create(), catalogId, warehousePath);\n+  }\n+\n+  /**\n+   * constructor\n+   * @param conf Hadoop config, passed in for users of HadoopIO\n+   * @param glue Glue client\n+   * @param catalogId Glue catalog ID, which is the AWS account ID. When null, it uses the account of the Glue client.\n+   * @param warehousePath warehouse path, such as s3://my-iceberg-bucket/metadata_prod\n+   */\n+  public GlueCatalog(Configuration conf, GlueClient glue, String catalogId, String warehousePath) {\n+    this.conf = conf;\n+    this.glue = glue;\n+    this.catalogId = catalogId;\n+    this.warehousePath = warehousePath;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0621754136976a9aa17c90858bed545e1c35a5f5"}, "originalPosition": 89}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTExOTQxMTEx", "url": "https://github.com/apache/iceberg/pull/1633#pullrequestreview-511941111", "createdAt": "2020-10-19T16:23:34Z", "commit": {"oid": "0621754136976a9aa17c90858bed545e1c35a5f5"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQxNjoyMzozNVrOHkW58w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQxNjoyMzozNVrOHkW58w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzg4NjA2Nw==", "bodyText": "I'm a little nervous about this implementation not following the pattern of the other catalogs and refusing to drop if there is something in the namespace. Downstream code may be relying on this to prevent destructive operations ...", "url": "https://github.com/apache/iceberg/pull/1633#discussion_r507886067", "createdAt": "2020-10-19T16:23:35Z", "author": {"login": "RussellSpitzer"}, "path": "aws/src/main/java/org/apache/iceberg/aws/glue/GlueCatalog.java", "diffHunk": "@@ -0,0 +1,312 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.aws.glue;\n+\n+import java.io.Closeable;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import org.apache.hadoop.conf.Configuration;\n+import org.apache.iceberg.BaseMetastoreCatalog;\n+import org.apache.iceberg.CatalogUtil;\n+import org.apache.iceberg.TableMetadata;\n+import org.apache.iceberg.TableOperations;\n+import org.apache.iceberg.catalog.Namespace;\n+import org.apache.iceberg.catalog.SupportsNamespaces;\n+import org.apache.iceberg.catalog.TableIdentifier;\n+import org.apache.iceberg.exceptions.NamespaceNotEmptyException;\n+import org.apache.iceberg.exceptions.NoSuchNamespaceException;\n+import org.apache.iceberg.relocated.com.google.common.base.Preconditions;\n+import org.apache.iceberg.relocated.com.google.common.collect.Lists;\n+import org.apache.iceberg.relocated.com.google.common.collect.Maps;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import software.amazon.awssdk.services.glue.GlueClient;\n+import software.amazon.awssdk.services.glue.model.CreateDatabaseRequest;\n+import software.amazon.awssdk.services.glue.model.DeleteDatabaseRequest;\n+import software.amazon.awssdk.services.glue.model.DeleteTableRequest;\n+import software.amazon.awssdk.services.glue.model.EntityNotFoundException;\n+import software.amazon.awssdk.services.glue.model.GetDatabaseRequest;\n+import software.amazon.awssdk.services.glue.model.GetDatabaseResponse;\n+import software.amazon.awssdk.services.glue.model.GetDatabasesRequest;\n+import software.amazon.awssdk.services.glue.model.GetDatabasesResponse;\n+import software.amazon.awssdk.services.glue.model.GetTablesRequest;\n+import software.amazon.awssdk.services.glue.model.GetTablesResponse;\n+import software.amazon.awssdk.services.glue.model.InvalidInputException;\n+import software.amazon.awssdk.services.glue.model.UpdateDatabaseRequest;\n+\n+public class GlueCatalog extends BaseMetastoreCatalog implements Closeable, SupportsNamespaces {\n+\n+  private static final Logger LOG = LoggerFactory.getLogger(GlueCatalog.class);\n+\n+  private final Configuration conf;\n+  private final GlueClient glue;\n+  // Catalog ID is the AWS account ID. When it is null, it uses the account of the Glue client.\n+  private final String catalogId;\n+  private final String warehousePath;\n+\n+  /**\n+   * constructor with default glue client\n+   * @param conf Hadoop config, passed in for users of HadoopIO\n+   * @param catalogId Glue catalog ID, which is the AWS account ID. When null, it uses the account of the Glue client.\n+   * @param warehousePath warehouse path, such as s3://my-iceberg-bucket/metadata_prod\n+   */\n+  public GlueCatalog(Configuration conf, String catalogId, String warehousePath) {\n+    this(conf, GlueClient.create(), catalogId, warehousePath);\n+  }\n+\n+  /**\n+   * constructor\n+   * @param conf Hadoop config, passed in for users of HadoopIO\n+   * @param glue Glue client\n+   * @param catalogId Glue catalog ID, which is the AWS account ID. When null, it uses the account of the Glue client.\n+   * @param warehousePath warehouse path, such as s3://my-iceberg-bucket/metadata_prod\n+   */\n+  public GlueCatalog(Configuration conf, GlueClient glue, String catalogId, String warehousePath) {\n+    this.conf = conf;\n+    this.glue = glue;\n+    this.catalogId = catalogId;\n+    this.warehousePath = warehousePath;\n+    validateWarehousePath();\n+  }\n+\n+  private void validateWarehousePath() {\n+    Preconditions.checkArgument(warehousePath != null && warehousePath.length() > 0,\n+        \"Glue warehouse path must be set\");\n+    Preconditions.checkArgument(warehousePath.charAt(warehousePath.length() - 1) != '/',\n+        \"Glue warehouse path %s must not end with /\", warehousePath);\n+  }\n+\n+  @Override\n+  public void close() throws IOException {\n+    glue.close();\n+  }\n+\n+  @Override\n+  protected TableOperations newTableOps(TableIdentifier tableIdentifier) {\n+    String dbName = IcebergToGlueConverter.toDatabaseName(tableIdentifier.namespace());\n+    String tableName = tableIdentifier.name();\n+    return new GlueTableOperations(conf, glue, catalogId, dbName, tableName);\n+  }\n+\n+  /**\n+   * Use the same format as Hive for default warehouse location\n+   * @param tableIdentifier table id\n+   * @return default warehouse path\n+   */\n+  @Override\n+  protected String defaultWarehouseLocation(TableIdentifier tableIdentifier) {\n+    // check if value is set in database\n+    GetDatabaseResponse response = glue.getDatabase(GetDatabaseRequest.builder()\n+        .name(IcebergToGlueConverter.toDatabaseName(tableIdentifier.namespace()))\n+        .build());\n+    String dbLocationUri = response.database().locationUri();\n+    if (dbLocationUri != null) {\n+      return String.format(\"%s/%s\", dbLocationUri, tableIdentifier.name());\n+    }\n+\n+    return String.format(\n+        \"%s/%s.db/%s\",\n+        warehousePath,\n+        IcebergToGlueConverter.toDatabaseName(tableIdentifier.namespace()),\n+        tableIdentifier.name());\n+  }\n+\n+  @Override\n+  public List<TableIdentifier> listTables(Namespace namespace) {\n+    namespaceExists(namespace);\n+    // should be safe to list all before returning the list, instead of dynamically load the list.\n+    String nextToken = null;\n+    List<TableIdentifier> results = new ArrayList<>();\n+    while (true) {\n+      GetTablesResponse response = glue.getTables(GetTablesRequest.builder()\n+          .catalogId(catalogId)\n+          .databaseName(IcebergToGlueConverter.toDatabaseName(namespace))\n+          .nextToken(nextToken)\n+          .build());\n+      if (response.hasTableList()) {\n+        results.addAll(response.tableList().stream()\n+            .map(GlueToIcebergConverter::toTableId)\n+            .collect(Collectors.toList()));\n+        nextToken = response.nextToken();\n+      }\n+      if (nextToken == null) {\n+        break;\n+      }\n+    }\n+    return results;\n+  }\n+\n+  @Override\n+  public boolean dropTable(TableIdentifier identifier, boolean purge) {\n+    try {\n+      dropTable(newTableOps(identifier), identifier, purge);\n+      return true;\n+    } catch (Exception e) {\n+      return false;\n+    }\n+  }\n+\n+  private TableMetadata dropTable(TableOperations ops, TableIdentifier identifier, boolean purge) {\n+    TableMetadata lastMetadata = null;\n+    if (ops.current() != null) {\n+      lastMetadata = ops.current();\n+    }\n+\n+    glue.deleteTable(DeleteTableRequest.builder()\n+        .catalogId(catalogId)\n+        .databaseName(IcebergToGlueConverter.toDatabaseName(identifier.namespace()))\n+        .name(identifier.name())\n+        .build());\n+\n+    if (purge && lastMetadata != null) {\n+      CatalogUtil.dropTableData(ops.io(), lastMetadata);\n+    }\n+\n+    LOG.info(\"Dropped table: {}\", identifier);\n+    return lastMetadata;\n+  }\n+\n+  /**\n+   * Rename table in Glue is a drop table and create table.\n+   * @param from identifier of the table to rename\n+   * @param to new table name\n+   */\n+  @Override\n+  public void renameTable(TableIdentifier from, TableIdentifier to) {\n+    TableOperations ops = newTableOps(from);\n+    // keep metadata\n+    TableMetadata tableMetadata = dropTable(ops, from, false);\n+    // use the same info to create the new table\n+    createTable(to, tableMetadata.schema(), tableMetadata.spec(), tableMetadata.properties());\n+  }\n+\n+  @Override\n+  public void createNamespace(Namespace namespace, Map<String, String> metadata) {\n+    glue.createDatabase(CreateDatabaseRequest.builder()\n+        .catalogId(catalogId)\n+        .databaseInput(IcebergToGlueConverter.toDatabaseInput(namespace, metadata))\n+        .build());\n+  }\n+\n+  @Override\n+  public List<Namespace> listNamespaces(Namespace namespace) throws NoSuchNamespaceException {\n+    if (!namespace.isEmpty()) {\n+      // if it is not a list all op, just check if the namespace exists and return itself.\n+      if (namespaceExists(namespace)) {\n+        return Lists.newArrayList(namespace);\n+      }\n+      throw new NoSuchNamespaceException(\n+          \"Glue does not support nested namespace, cannot list namespaces under %s\", namespace);\n+    }\n+    // should be safe to list all before returning the list, instead of dynamically load the list.\n+    String nextToken = null;\n+    List<Namespace> results = new ArrayList<>();\n+    while (true) {\n+      GetDatabasesResponse response = glue.getDatabases(GetDatabasesRequest.builder()\n+          .catalogId(catalogId)\n+          .nextToken(nextToken)\n+          .build());\n+      if (response.hasDatabaseList()) {\n+        results.addAll(response.databaseList().stream()\n+            .map(GlueToIcebergConverter::toNamespace)\n+            .collect(Collectors.toList()));\n+        nextToken = response.nextToken();\n+      }\n+      if (nextToken == null) {\n+        break;\n+      }\n+    }\n+    return results;\n+  }\n+\n+  @Override\n+  public Map<String, String> loadNamespaceMetadata(Namespace namespace) throws NoSuchNamespaceException {\n+    String databaseName = IcebergToGlueConverter.toDatabaseName(namespace);\n+    try {\n+      GetDatabaseResponse response = glue.getDatabase(GetDatabaseRequest.builder()\n+          .catalogId(catalogId)\n+          .name(databaseName)\n+          .build());\n+      return response.database().parameters();\n+    } catch (InvalidInputException e) {\n+      throw new NoSuchNamespaceException(\"invalid input for namespace %s, error message: %s\",\n+          namespace, e.getMessage());\n+    } catch (EntityNotFoundException e) {\n+      throw new NoSuchNamespaceException(\"fail to find Glue database for namespace %s, error message: %s\",\n+          databaseName, e.getMessage());\n+    }\n+  }\n+\n+  /**\n+   * After completing this operation, you no longer have access to the tables\n+   * (and all table versions and partitions that might belong to the tables)\n+   * and the user-defined functions in the deleted database.\n+   * AWS Glue deletes these \"orphaned\" resources asynchronously in a timely manner, at the discretion of the service.\n+   * To ensure the immediate deletion of all related resources, before calling DeleteDatabase, use DeleteTableVersion\n+   * or BatchDeleteTableVersion, DeletePartition or BatchDeletePartition, DeleteUserDefinedFunction,\n+   * and DeleteTable or BatchDeleteTable, to delete any resources that belong to the database.\n+   * @param namespace a namespace. {@link Namespace}\n+   * @return always true\n+   * @throws NamespaceNotEmptyException never thrown", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0621754136976a9aa17c90858bed545e1c35a5f5"}, "originalPosition": 271}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTExOTQzNDk3", "url": "https://github.com/apache/iceberg/pull/1633#pullrequestreview-511943497", "createdAt": "2020-10-19T16:26:23Z", "commit": {"oid": "0621754136976a9aa17c90858bed545e1c35a5f5"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQxNjoyNjoyM1rOHkXBkg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQxNjoyNjoyM1rOHkXBkg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzg4ODAxOA==", "bodyText": "Nit: Java Doc style and summary need elaboration", "url": "https://github.com/apache/iceberg/pull/1633#discussion_r507888018", "createdAt": "2020-10-19T16:26:23Z", "author": {"login": "RussellSpitzer"}, "path": "aws/src/main/java/org/apache/iceberg/aws/glue/GlueTableOperations.java", "diffHunk": "@@ -0,0 +1,218 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.aws.glue;\n+\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Optional;\n+import org.apache.hadoop.conf.Configuration;\n+import org.apache.iceberg.BaseMetastoreTableOperations;\n+import org.apache.iceberg.TableMetadata;\n+import org.apache.iceberg.exceptions.AlreadyExistsException;\n+import org.apache.iceberg.exceptions.CommitFailedException;\n+import org.apache.iceberg.exceptions.NoSuchTableException;\n+import org.apache.iceberg.hadoop.HadoopFileIO;\n+import org.apache.iceberg.io.FileIO;\n+import org.apache.iceberg.relocated.com.google.common.collect.Maps;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import software.amazon.awssdk.services.glue.GlueClient;\n+import software.amazon.awssdk.services.glue.model.ConcurrentModificationException;\n+import software.amazon.awssdk.services.glue.model.CreateTableRequest;\n+import software.amazon.awssdk.services.glue.model.EntityNotFoundException;\n+import software.amazon.awssdk.services.glue.model.GetTableRequest;\n+import software.amazon.awssdk.services.glue.model.GetTableResponse;\n+import software.amazon.awssdk.services.glue.model.Table;\n+import software.amazon.awssdk.services.glue.model.TableInput;\n+import software.amazon.awssdk.services.glue.model.UpdateTableRequest;\n+\n+public class GlueTableOperations extends BaseMetastoreTableOperations {\n+\n+  private static final Logger LOG = LoggerFactory.getLogger(GlueTableOperations.class);\n+\n+  // same as org.apache.hadoop.hive.metastore.TableType.EXTERNAL_TABLE\n+  // more details: https://docs.aws.amazon.com/glue/latest/webapi/API_TableInput.html\n+  private static final String GLUE_EXTERNAL_TABLE_TYPE = \"EXTERNAL_TABLE\";\n+\n+  private final Configuration conf;\n+  private final GlueClient glue;\n+  private final String catalogId;\n+  private final String databaseName;\n+  private final String tableName;\n+  private final String fullName;\n+\n+  private FileIO fileIO;\n+\n+  /**\n+   * constructor", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0621754136976a9aa17c90858bed545e1c35a5f5"}, "originalPosition": 65}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTExOTQ1MTcw", "url": "https://github.com/apache/iceberg/pull/1633#pullrequestreview-511945170", "createdAt": "2020-10-19T16:28:18Z", "commit": {"oid": "0621754136976a9aa17c90858bed545e1c35a5f5"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQxNjoyODoxOFrOHkXGhQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQxNjoyODoxOFrOHkXGhQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzg4OTI4NQ==", "bodyText": "This could just be a one liner\n/**\n\nReturns table name in the form glue.catalogId.databaseName.tableName\n**/", "url": "https://github.com/apache/iceberg/pull/1633#discussion_r507889285", "createdAt": "2020-10-19T16:28:18Z", "author": {"login": "RussellSpitzer"}, "path": "aws/src/main/java/org/apache/iceberg/aws/glue/GlueTableOperations.java", "diffHunk": "@@ -0,0 +1,218 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.aws.glue;\n+\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Optional;\n+import org.apache.hadoop.conf.Configuration;\n+import org.apache.iceberg.BaseMetastoreTableOperations;\n+import org.apache.iceberg.TableMetadata;\n+import org.apache.iceberg.exceptions.AlreadyExistsException;\n+import org.apache.iceberg.exceptions.CommitFailedException;\n+import org.apache.iceberg.exceptions.NoSuchTableException;\n+import org.apache.iceberg.hadoop.HadoopFileIO;\n+import org.apache.iceberg.io.FileIO;\n+import org.apache.iceberg.relocated.com.google.common.collect.Maps;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import software.amazon.awssdk.services.glue.GlueClient;\n+import software.amazon.awssdk.services.glue.model.ConcurrentModificationException;\n+import software.amazon.awssdk.services.glue.model.CreateTableRequest;\n+import software.amazon.awssdk.services.glue.model.EntityNotFoundException;\n+import software.amazon.awssdk.services.glue.model.GetTableRequest;\n+import software.amazon.awssdk.services.glue.model.GetTableResponse;\n+import software.amazon.awssdk.services.glue.model.Table;\n+import software.amazon.awssdk.services.glue.model.TableInput;\n+import software.amazon.awssdk.services.glue.model.UpdateTableRequest;\n+\n+public class GlueTableOperations extends BaseMetastoreTableOperations {\n+\n+  private static final Logger LOG = LoggerFactory.getLogger(GlueTableOperations.class);\n+\n+  // same as org.apache.hadoop.hive.metastore.TableType.EXTERNAL_TABLE\n+  // more details: https://docs.aws.amazon.com/glue/latest/webapi/API_TableInput.html\n+  private static final String GLUE_EXTERNAL_TABLE_TYPE = \"EXTERNAL_TABLE\";\n+\n+  private final Configuration conf;\n+  private final GlueClient glue;\n+  private final String catalogId;\n+  private final String databaseName;\n+  private final String tableName;\n+  private final String fullName;\n+\n+  private FileIO fileIO;\n+\n+  /**\n+   * constructor\n+   * @param conf Hadoop config, passed in for users of HadoopIO\n+   * @param glue Glue client\n+   * @param catalogId Glue catalog ID, which is the AWS account ID. When null, it uses the account of the Glue client.\n+   * @param databaseName Glue database name\n+   * @param tableName Glue table name\n+   */\n+  public GlueTableOperations(\n+      Configuration conf,\n+      GlueClient glue,\n+      String catalogId,\n+      String databaseName,\n+      String tableName) {\n+    this.conf = conf;\n+    this.glue = glue;\n+    this.catalogId = catalogId;\n+    this.databaseName = databaseName;\n+    this.tableName = tableName;\n+    this.fullName = String.format(\"glue.%s.%s.%s\", catalogId, databaseName, tableName);\n+  }\n+\n+  @Override\n+  public FileIO io() {\n+    if (fileIO == null) {\n+      fileIO = new HadoopFileIO(conf);\n+    }\n+    return fileIO;\n+  }\n+\n+  /**\n+   * glue.catalogId.databaseName.tableName", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0621754136976a9aa17c90858bed545e1c35a5f5"}, "originalPosition": 95}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTExOTU0MzAw", "url": "https://github.com/apache/iceberg/pull/1633#pullrequestreview-511954300", "createdAt": "2020-10-19T16:39:18Z", "commit": {"oid": "0621754136976a9aa17c90858bed545e1c35a5f5"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQxNjozOToxOVrOHkXiMA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQxNjozOToxOVrOHkXiMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzg5NjM2OA==", "bodyText": "More error messages which should be in the form Cannot x because y. I think the concurrent update to table error should also include the information\n\"\"\"   * For users that need high frequency and high concurrency update,\n* please consider requesting rate increase for Glue UpdateTable API,\n* or use an external lock system such as DynamoDB lock.\"\"\"\nWhich an end user will usually not see", "url": "https://github.com/apache/iceberg/pull/1633#discussion_r507896368", "createdAt": "2020-10-19T16:39:19Z", "author": {"login": "RussellSpitzer"}, "path": "aws/src/main/java/org/apache/iceberg/aws/glue/GlueTableOperations.java", "diffHunk": "@@ -0,0 +1,218 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.aws.glue;\n+\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Optional;\n+import org.apache.hadoop.conf.Configuration;\n+import org.apache.iceberg.BaseMetastoreTableOperations;\n+import org.apache.iceberg.TableMetadata;\n+import org.apache.iceberg.exceptions.AlreadyExistsException;\n+import org.apache.iceberg.exceptions.CommitFailedException;\n+import org.apache.iceberg.exceptions.NoSuchTableException;\n+import org.apache.iceberg.hadoop.HadoopFileIO;\n+import org.apache.iceberg.io.FileIO;\n+import org.apache.iceberg.relocated.com.google.common.collect.Maps;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import software.amazon.awssdk.services.glue.GlueClient;\n+import software.amazon.awssdk.services.glue.model.ConcurrentModificationException;\n+import software.amazon.awssdk.services.glue.model.CreateTableRequest;\n+import software.amazon.awssdk.services.glue.model.EntityNotFoundException;\n+import software.amazon.awssdk.services.glue.model.GetTableRequest;\n+import software.amazon.awssdk.services.glue.model.GetTableResponse;\n+import software.amazon.awssdk.services.glue.model.Table;\n+import software.amazon.awssdk.services.glue.model.TableInput;\n+import software.amazon.awssdk.services.glue.model.UpdateTableRequest;\n+\n+public class GlueTableOperations extends BaseMetastoreTableOperations {\n+\n+  private static final Logger LOG = LoggerFactory.getLogger(GlueTableOperations.class);\n+\n+  // same as org.apache.hadoop.hive.metastore.TableType.EXTERNAL_TABLE\n+  // more details: https://docs.aws.amazon.com/glue/latest/webapi/API_TableInput.html\n+  private static final String GLUE_EXTERNAL_TABLE_TYPE = \"EXTERNAL_TABLE\";\n+\n+  private final Configuration conf;\n+  private final GlueClient glue;\n+  private final String catalogId;\n+  private final String databaseName;\n+  private final String tableName;\n+  private final String fullName;\n+\n+  private FileIO fileIO;\n+\n+  /**\n+   * constructor\n+   * @param conf Hadoop config, passed in for users of HadoopIO\n+   * @param glue Glue client\n+   * @param catalogId Glue catalog ID, which is the AWS account ID. When null, it uses the account of the Glue client.\n+   * @param databaseName Glue database name\n+   * @param tableName Glue table name\n+   */\n+  public GlueTableOperations(\n+      Configuration conf,\n+      GlueClient glue,\n+      String catalogId,\n+      String databaseName,\n+      String tableName) {\n+    this.conf = conf;\n+    this.glue = glue;\n+    this.catalogId = catalogId;\n+    this.databaseName = databaseName;\n+    this.tableName = tableName;\n+    this.fullName = String.format(\"glue.%s.%s.%s\", catalogId, databaseName, tableName);\n+  }\n+\n+  @Override\n+  public FileIO io() {\n+    if (fileIO == null) {\n+      fileIO = new HadoopFileIO(conf);\n+    }\n+    return fileIO;\n+  }\n+\n+  /**\n+   * glue.catalogId.databaseName.tableName\n+   * It's only for logging purpose, so it's okay for catalogId to be null.\n+   * @return table name\n+   */\n+  @Override\n+  protected String tableName() {\n+    return fullName;\n+  }\n+\n+  @Override\n+  protected void doRefresh() {\n+    Optional<Table> tableOptional = getGlueTable();\n+    if (tableOptional.isPresent()) {\n+      Table table = tableOptional.get();\n+      GlueToIcebergConverter.validateTable(table, tableName());\n+      String metadataLocation = table.parameters().get(METADATA_LOCATION_PROP);\n+      refreshFromMetadataLocation(metadataLocation);\n+    } else {\n+      if (currentMetadataLocation() != null) {\n+        throw new NoSuchTableException(\"Cannot find Glue table %s after refresh, \" +\n+            \"maybe another process deleted it or revoked your access permission\", tableName());\n+      }\n+    }\n+  }\n+\n+  /**\n+   * We rely on Glue's ConcurrentModificationException to detect commit conflicts.\n+   * For users that need high frequency and high concurrency update,\n+   * please consider requesting rate increase for Glue UpdateTable API,\n+   * or use an external lock system such as DynamoDB lock.\n+   * @param base old metadata\n+   * @param metadata new metadata\n+   */\n+  @Override\n+  protected void doCommit(TableMetadata base, TableMetadata metadata) {\n+    String newMetadataLocation = writeNewMetadata(metadata, currentVersion() + 1);\n+    boolean exceptionThrown = true;\n+    boolean isUpdate = false;\n+    Table glueTable = null;\n+    try {\n+      Optional<Table> glueTableOptional = getGlueTable();\n+      if (glueTableOptional.isPresent()) {\n+        glueTable = glueTableOptional.get();\n+        // If we try to create the table but the metadata location is already set, then we had a concurrent commit\n+        if (base == null && glueTable.parameters().get(METADATA_LOCATION_PROP) != null) {\n+          throw new AlreadyExistsException(\"Table already exists in Glue: %s\", tableName());\n+        }\n+        isUpdate = true;\n+        LOG.debug(\"Committing existing Glue table: {}\", tableName());\n+      } else {\n+        LOG.debug(\"Committing new Glue table: {}\", tableName());\n+      }\n+\n+      String glueMetadataLocation = isUpdate ? glueTable.parameters().get(METADATA_LOCATION_PROP) : null;\n+      String baseMetadataLocation = base != null ? base.metadataFileLocation() : null;\n+      if (!Objects.equals(baseMetadataLocation, glueMetadataLocation)) {\n+        throw new CommitFailedException(\n+            \"Base metadata location '%s' is not same as the current table metadata location '%s' for %s\",\n+            baseMetadataLocation, glueMetadataLocation, tableName());\n+      }\n+\n+      // set parameters\n+      Map<String, String> parameters = isUpdate ? Maps.newHashMap(glueTable.parameters()) : Maps.newHashMap();\n+      updateParameters(parameters, newMetadataLocation);\n+      persistGlueTable(isUpdate, parameters);\n+      exceptionThrown = false;\n+    } catch (ConcurrentModificationException e) {\n+      throw new CommitFailedException(e, \"Glue detected concurrent update to table %s\", tableName());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0621754136976a9aa17c90858bed545e1c35a5f5"}, "originalPosition": 162}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTExOTU1Nzg3", "url": "https://github.com/apache/iceberg/pull/1633#pullrequestreview-511955787", "createdAt": "2020-10-19T16:41:15Z", "commit": {"oid": "0621754136976a9aa17c90858bed545e1c35a5f5"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQxNjo0MToxNVrOHkXm6A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQxNjo0MToxNVrOHkXm6A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzg5NzU3Ng==", "bodyText": "Style on javadoc", "url": "https://github.com/apache/iceberg/pull/1633#discussion_r507897576", "createdAt": "2020-10-19T16:41:15Z", "author": {"login": "RussellSpitzer"}, "path": "aws/src/main/java/org/apache/iceberg/aws/glue/GlueToIcebergConverter.java", "diffHunk": "@@ -0,0 +1,53 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.aws.glue;\n+\n+import org.apache.iceberg.BaseMetastoreTableOperations;\n+import org.apache.iceberg.catalog.Namespace;\n+import org.apache.iceberg.catalog.TableIdentifier;\n+import org.apache.iceberg.exceptions.NoSuchIcebergTableException;\n+import software.amazon.awssdk.services.glue.model.Database;\n+import software.amazon.awssdk.services.glue.model.Table;\n+\n+public class GlueToIcebergConverter {\n+\n+  private GlueToIcebergConverter() {\n+  }\n+\n+  public static Namespace toNamespace(Database database) {\n+    return Namespace.of(database.name());\n+  }\n+\n+  public static TableIdentifier toTableId(Table table) {\n+    return TableIdentifier.of(table.databaseName(), table.name());\n+  }\n+\n+  /**\n+   * validate the Glue table is Iceberg table by checking its parameters", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0621754136976a9aa17c90858bed545e1c35a5f5"}, "originalPosition": 43}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTExOTU2Njc1", "url": "https://github.com/apache/iceberg/pull/1633#pullrequestreview-511956675", "createdAt": "2020-10-19T16:42:22Z", "commit": {"oid": "0621754136976a9aa17c90858bed545e1c35a5f5"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQxNjo0MjoyMlrOHkXpdg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQxNjo0MjoyMlrOHkXpdg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzg5ODIzMA==", "bodyText": "Exception message pattern", "url": "https://github.com/apache/iceberg/pull/1633#discussion_r507898230", "createdAt": "2020-10-19T16:42:22Z", "author": {"login": "RussellSpitzer"}, "path": "aws/src/main/java/org/apache/iceberg/aws/glue/IcebergToGlueConverter.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.aws.glue;\n+\n+import java.util.Map;\n+import java.util.regex.Pattern;\n+import org.apache.iceberg.catalog.Namespace;\n+import org.apache.iceberg.exceptions.NoSuchNamespaceException;\n+import software.amazon.awssdk.services.glue.model.DatabaseInput;\n+\n+public class IcebergToGlueConverter {\n+\n+  private IcebergToGlueConverter() {\n+  }\n+\n+  private static final Pattern GLUE_DB_PATTERN = Pattern.compile(\"^[a-z0-9_]{1,252}$\");\n+\n+\n+  private static boolean isValidNamespace(Namespace namespace) {\n+    if (namespace.levels().length != 1) {\n+      return false;\n+    }\n+    String dbName = namespace.level(0);\n+    return dbName != null && GLUE_DB_PATTERN.matcher(dbName).find();\n+  }\n+\n+  /**\n+   * A database name cannot be longer than 252 characters.\n+   * The only acceptable characters are lowercase letters, numbers, and the underscore character.\n+   * More details: https://docs.aws.amazon.com/athena/latest/ug/glue-best-practices.html\n+   * @param namespace namespace\n+   * @return if namespace can be accepted by Glue\n+   * @throws NoSuchNamespaceException no such namespace\n+   */\n+  public static String toDatabaseName(Namespace namespace) {\n+    if (!isValidNamespace(namespace)) {\n+      throw new NoSuchNamespaceException(\n+          \"Bad namespace name %s, must be 1-232 chars of lowercase letters, numbers, underscore\", namespace);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0621754136976a9aa17c90858bed545e1c35a5f5"}, "originalPosition": 55}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTEyMDY0ODQ1", "url": "https://github.com/apache/iceberg/pull/1633#pullrequestreview-512064845", "createdAt": "2020-10-19T18:52:05Z", "commit": {"oid": "0621754136976a9aa17c90858bed545e1c35a5f5"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQxODo1MjowNVrOHkdG1w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQxODo1MzoxMVrOHkdJXw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzk4NzY3MQ==", "bodyText": "Nit: could be the same line", "url": "https://github.com/apache/iceberg/pull/1633#discussion_r507987671", "createdAt": "2020-10-19T18:52:05Z", "author": {"login": "yyanyy"}, "path": "aws/src/main/java/org/apache/iceberg/aws/glue/GlueCatalog.java", "diffHunk": "@@ -0,0 +1,312 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.aws.glue;\n+\n+import java.io.Closeable;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import org.apache.hadoop.conf.Configuration;\n+import org.apache.iceberg.BaseMetastoreCatalog;\n+import org.apache.iceberg.CatalogUtil;\n+import org.apache.iceberg.TableMetadata;\n+import org.apache.iceberg.TableOperations;\n+import org.apache.iceberg.catalog.Namespace;\n+import org.apache.iceberg.catalog.SupportsNamespaces;\n+import org.apache.iceberg.catalog.TableIdentifier;\n+import org.apache.iceberg.exceptions.NamespaceNotEmptyException;\n+import org.apache.iceberg.exceptions.NoSuchNamespaceException;\n+import org.apache.iceberg.relocated.com.google.common.base.Preconditions;\n+import org.apache.iceberg.relocated.com.google.common.collect.Lists;\n+import org.apache.iceberg.relocated.com.google.common.collect.Maps;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import software.amazon.awssdk.services.glue.GlueClient;\n+import software.amazon.awssdk.services.glue.model.CreateDatabaseRequest;\n+import software.amazon.awssdk.services.glue.model.DeleteDatabaseRequest;\n+import software.amazon.awssdk.services.glue.model.DeleteTableRequest;\n+import software.amazon.awssdk.services.glue.model.EntityNotFoundException;\n+import software.amazon.awssdk.services.glue.model.GetDatabaseRequest;\n+import software.amazon.awssdk.services.glue.model.GetDatabaseResponse;\n+import software.amazon.awssdk.services.glue.model.GetDatabasesRequest;\n+import software.amazon.awssdk.services.glue.model.GetDatabasesResponse;\n+import software.amazon.awssdk.services.glue.model.GetTablesRequest;\n+import software.amazon.awssdk.services.glue.model.GetTablesResponse;\n+import software.amazon.awssdk.services.glue.model.InvalidInputException;\n+import software.amazon.awssdk.services.glue.model.UpdateDatabaseRequest;\n+\n+public class GlueCatalog extends BaseMetastoreCatalog implements Closeable, SupportsNamespaces {\n+\n+  private static final Logger LOG = LoggerFactory.getLogger(GlueCatalog.class);\n+\n+  private final Configuration conf;\n+  private final GlueClient glue;\n+  // Catalog ID is the AWS account ID. When it is null, it uses the account of the Glue client.\n+  private final String catalogId;\n+  private final String warehousePath;\n+\n+  /**\n+   * constructor with default glue client\n+   * @param conf Hadoop config, passed in for users of HadoopIO\n+   * @param catalogId Glue catalog ID, which is the AWS account ID. When null, it uses the account of the Glue client.\n+   * @param warehousePath warehouse path, such as s3://my-iceberg-bucket/metadata_prod\n+   */\n+  public GlueCatalog(Configuration conf, String catalogId, String warehousePath) {\n+    this(conf, GlueClient.create(), catalogId, warehousePath);\n+  }\n+\n+  /**\n+   * constructor\n+   * @param conf Hadoop config, passed in for users of HadoopIO\n+   * @param glue Glue client\n+   * @param catalogId Glue catalog ID, which is the AWS account ID. When null, it uses the account of the Glue client.\n+   * @param warehousePath warehouse path, such as s3://my-iceberg-bucket/metadata_prod\n+   */\n+  public GlueCatalog(Configuration conf, GlueClient glue, String catalogId, String warehousePath) {\n+    this.conf = conf;\n+    this.glue = glue;\n+    this.catalogId = catalogId;\n+    this.warehousePath = warehousePath;\n+    validateWarehousePath();\n+  }\n+\n+  private void validateWarehousePath() {\n+    Preconditions.checkArgument(warehousePath != null && warehousePath.length() > 0,\n+        \"Glue warehouse path must be set\");\n+    Preconditions.checkArgument(warehousePath.charAt(warehousePath.length() - 1) != '/',\n+        \"Glue warehouse path %s must not end with /\", warehousePath);\n+  }\n+\n+  @Override\n+  public void close() throws IOException {\n+    glue.close();\n+  }\n+\n+  @Override\n+  protected TableOperations newTableOps(TableIdentifier tableIdentifier) {\n+    String dbName = IcebergToGlueConverter.toDatabaseName(tableIdentifier.namespace());\n+    String tableName = tableIdentifier.name();\n+    return new GlueTableOperations(conf, glue, catalogId, dbName, tableName);\n+  }\n+\n+  /**\n+   * Use the same format as Hive for default warehouse location\n+   * @param tableIdentifier table id\n+   * @return default warehouse path\n+   */\n+  @Override\n+  protected String defaultWarehouseLocation(TableIdentifier tableIdentifier) {\n+    // check if value is set in database\n+    GetDatabaseResponse response = glue.getDatabase(GetDatabaseRequest.builder()\n+        .name(IcebergToGlueConverter.toDatabaseName(tableIdentifier.namespace()))\n+        .build());\n+    String dbLocationUri = response.database().locationUri();\n+    if (dbLocationUri != null) {\n+      return String.format(\"%s/%s\", dbLocationUri, tableIdentifier.name());\n+    }\n+\n+    return String.format(\n+        \"%s/%s.db/%s\",\n+        warehousePath,\n+        IcebergToGlueConverter.toDatabaseName(tableIdentifier.namespace()),\n+        tableIdentifier.name());\n+  }\n+\n+  @Override\n+  public List<TableIdentifier> listTables(Namespace namespace) {\n+    namespaceExists(namespace);\n+    // should be safe to list all before returning the list, instead of dynamically load the list.\n+    String nextToken = null;\n+    List<TableIdentifier> results = new ArrayList<>();\n+    while (true) {\n+      GetTablesResponse response = glue.getTables(GetTablesRequest.builder()\n+          .catalogId(catalogId)\n+          .databaseName(IcebergToGlueConverter.toDatabaseName(namespace))\n+          .nextToken(nextToken)\n+          .build());\n+      if (response.hasTableList()) {\n+        results.addAll(response.tableList().stream()\n+            .map(GlueToIcebergConverter::toTableId)\n+            .collect(Collectors.toList()));\n+        nextToken = response.nextToken();\n+      }\n+      if (nextToken == null) {\n+        break;\n+      }\n+    }\n+    return results;\n+  }\n+\n+  @Override\n+  public boolean dropTable(TableIdentifier identifier, boolean purge) {\n+    try {\n+      dropTable(newTableOps(identifier), identifier, purge);\n+      return true;\n+    } catch (Exception e) {\n+      return false;\n+    }\n+  }\n+\n+  private TableMetadata dropTable(TableOperations ops, TableIdentifier identifier, boolean purge) {\n+    TableMetadata lastMetadata = null;\n+    if (ops.current() != null) {\n+      lastMetadata = ops.current();\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0621754136976a9aa17c90858bed545e1c35a5f5"}, "originalPosition": 174}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzk4ODMxOQ==", "bodyText": "Do we want to validate to before dropping, so that we don't firstly drop table and then realize input was invalid?", "url": "https://github.com/apache/iceberg/pull/1633#discussion_r507988319", "createdAt": "2020-10-19T18:53:11Z", "author": {"login": "yyanyy"}, "path": "aws/src/main/java/org/apache/iceberg/aws/glue/GlueCatalog.java", "diffHunk": "@@ -0,0 +1,312 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.aws.glue;\n+\n+import java.io.Closeable;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import org.apache.hadoop.conf.Configuration;\n+import org.apache.iceberg.BaseMetastoreCatalog;\n+import org.apache.iceberg.CatalogUtil;\n+import org.apache.iceberg.TableMetadata;\n+import org.apache.iceberg.TableOperations;\n+import org.apache.iceberg.catalog.Namespace;\n+import org.apache.iceberg.catalog.SupportsNamespaces;\n+import org.apache.iceberg.catalog.TableIdentifier;\n+import org.apache.iceberg.exceptions.NamespaceNotEmptyException;\n+import org.apache.iceberg.exceptions.NoSuchNamespaceException;\n+import org.apache.iceberg.relocated.com.google.common.base.Preconditions;\n+import org.apache.iceberg.relocated.com.google.common.collect.Lists;\n+import org.apache.iceberg.relocated.com.google.common.collect.Maps;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import software.amazon.awssdk.services.glue.GlueClient;\n+import software.amazon.awssdk.services.glue.model.CreateDatabaseRequest;\n+import software.amazon.awssdk.services.glue.model.DeleteDatabaseRequest;\n+import software.amazon.awssdk.services.glue.model.DeleteTableRequest;\n+import software.amazon.awssdk.services.glue.model.EntityNotFoundException;\n+import software.amazon.awssdk.services.glue.model.GetDatabaseRequest;\n+import software.amazon.awssdk.services.glue.model.GetDatabaseResponse;\n+import software.amazon.awssdk.services.glue.model.GetDatabasesRequest;\n+import software.amazon.awssdk.services.glue.model.GetDatabasesResponse;\n+import software.amazon.awssdk.services.glue.model.GetTablesRequest;\n+import software.amazon.awssdk.services.glue.model.GetTablesResponse;\n+import software.amazon.awssdk.services.glue.model.InvalidInputException;\n+import software.amazon.awssdk.services.glue.model.UpdateDatabaseRequest;\n+\n+public class GlueCatalog extends BaseMetastoreCatalog implements Closeable, SupportsNamespaces {\n+\n+  private static final Logger LOG = LoggerFactory.getLogger(GlueCatalog.class);\n+\n+  private final Configuration conf;\n+  private final GlueClient glue;\n+  // Catalog ID is the AWS account ID. When it is null, it uses the account of the Glue client.\n+  private final String catalogId;\n+  private final String warehousePath;\n+\n+  /**\n+   * constructor with default glue client\n+   * @param conf Hadoop config, passed in for users of HadoopIO\n+   * @param catalogId Glue catalog ID, which is the AWS account ID. When null, it uses the account of the Glue client.\n+   * @param warehousePath warehouse path, such as s3://my-iceberg-bucket/metadata_prod\n+   */\n+  public GlueCatalog(Configuration conf, String catalogId, String warehousePath) {\n+    this(conf, GlueClient.create(), catalogId, warehousePath);\n+  }\n+\n+  /**\n+   * constructor\n+   * @param conf Hadoop config, passed in for users of HadoopIO\n+   * @param glue Glue client\n+   * @param catalogId Glue catalog ID, which is the AWS account ID. When null, it uses the account of the Glue client.\n+   * @param warehousePath warehouse path, such as s3://my-iceberg-bucket/metadata_prod\n+   */\n+  public GlueCatalog(Configuration conf, GlueClient glue, String catalogId, String warehousePath) {\n+    this.conf = conf;\n+    this.glue = glue;\n+    this.catalogId = catalogId;\n+    this.warehousePath = warehousePath;\n+    validateWarehousePath();\n+  }\n+\n+  private void validateWarehousePath() {\n+    Preconditions.checkArgument(warehousePath != null && warehousePath.length() > 0,\n+        \"Glue warehouse path must be set\");\n+    Preconditions.checkArgument(warehousePath.charAt(warehousePath.length() - 1) != '/',\n+        \"Glue warehouse path %s must not end with /\", warehousePath);\n+  }\n+\n+  @Override\n+  public void close() throws IOException {\n+    glue.close();\n+  }\n+\n+  @Override\n+  protected TableOperations newTableOps(TableIdentifier tableIdentifier) {\n+    String dbName = IcebergToGlueConverter.toDatabaseName(tableIdentifier.namespace());\n+    String tableName = tableIdentifier.name();\n+    return new GlueTableOperations(conf, glue, catalogId, dbName, tableName);\n+  }\n+\n+  /**\n+   * Use the same format as Hive for default warehouse location\n+   * @param tableIdentifier table id\n+   * @return default warehouse path\n+   */\n+  @Override\n+  protected String defaultWarehouseLocation(TableIdentifier tableIdentifier) {\n+    // check if value is set in database\n+    GetDatabaseResponse response = glue.getDatabase(GetDatabaseRequest.builder()\n+        .name(IcebergToGlueConverter.toDatabaseName(tableIdentifier.namespace()))\n+        .build());\n+    String dbLocationUri = response.database().locationUri();\n+    if (dbLocationUri != null) {\n+      return String.format(\"%s/%s\", dbLocationUri, tableIdentifier.name());\n+    }\n+\n+    return String.format(\n+        \"%s/%s.db/%s\",\n+        warehousePath,\n+        IcebergToGlueConverter.toDatabaseName(tableIdentifier.namespace()),\n+        tableIdentifier.name());\n+  }\n+\n+  @Override\n+  public List<TableIdentifier> listTables(Namespace namespace) {\n+    namespaceExists(namespace);\n+    // should be safe to list all before returning the list, instead of dynamically load the list.\n+    String nextToken = null;\n+    List<TableIdentifier> results = new ArrayList<>();\n+    while (true) {\n+      GetTablesResponse response = glue.getTables(GetTablesRequest.builder()\n+          .catalogId(catalogId)\n+          .databaseName(IcebergToGlueConverter.toDatabaseName(namespace))\n+          .nextToken(nextToken)\n+          .build());\n+      if (response.hasTableList()) {\n+        results.addAll(response.tableList().stream()\n+            .map(GlueToIcebergConverter::toTableId)\n+            .collect(Collectors.toList()));\n+        nextToken = response.nextToken();\n+      }\n+      if (nextToken == null) {\n+        break;\n+      }\n+    }\n+    return results;\n+  }\n+\n+  @Override\n+  public boolean dropTable(TableIdentifier identifier, boolean purge) {\n+    try {\n+      dropTable(newTableOps(identifier), identifier, purge);\n+      return true;\n+    } catch (Exception e) {\n+      return false;\n+    }\n+  }\n+\n+  private TableMetadata dropTable(TableOperations ops, TableIdentifier identifier, boolean purge) {\n+    TableMetadata lastMetadata = null;\n+    if (ops.current() != null) {\n+      lastMetadata = ops.current();\n+    }\n+\n+    glue.deleteTable(DeleteTableRequest.builder()\n+        .catalogId(catalogId)\n+        .databaseName(IcebergToGlueConverter.toDatabaseName(identifier.namespace()))\n+        .name(identifier.name())\n+        .build());\n+\n+    if (purge && lastMetadata != null) {\n+      CatalogUtil.dropTableData(ops.io(), lastMetadata);\n+    }\n+\n+    LOG.info(\"Dropped table: {}\", identifier);\n+    return lastMetadata;\n+  }\n+\n+  /**\n+   * Rename table in Glue is a drop table and create table.\n+   * @param from identifier of the table to rename\n+   * @param to new table name\n+   */\n+  @Override\n+  public void renameTable(TableIdentifier from, TableIdentifier to) {\n+    TableOperations ops = newTableOps(from);\n+    // keep metadata\n+    TableMetadata tableMetadata = dropTable(ops, from, false);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0621754136976a9aa17c90858bed545e1c35a5f5"}, "originalPosition": 199}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTEyMjAyOTQz", "url": "https://github.com/apache/iceberg/pull/1633#pullrequestreview-512202943", "createdAt": "2020-10-19T22:25:06Z", "commit": {"oid": "0621754136976a9aa17c90858bed545e1c35a5f5"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQyMjoyNTowNlrOHkj1ag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQyMjozMzoyOFrOHkkCGg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODA5Nzg5OA==", "bodyText": "You might need a try ... catch block here as the call to getTables can throw iirc.", "url": "https://github.com/apache/iceberg/pull/1633#discussion_r508097898", "createdAt": "2020-10-19T22:25:06Z", "author": {"login": "kbendick"}, "path": "aws/src/main/java/org/apache/iceberg/aws/glue/GlueCatalog.java", "diffHunk": "@@ -0,0 +1,312 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.aws.glue;\n+\n+import java.io.Closeable;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import org.apache.hadoop.conf.Configuration;\n+import org.apache.iceberg.BaseMetastoreCatalog;\n+import org.apache.iceberg.CatalogUtil;\n+import org.apache.iceberg.TableMetadata;\n+import org.apache.iceberg.TableOperations;\n+import org.apache.iceberg.catalog.Namespace;\n+import org.apache.iceberg.catalog.SupportsNamespaces;\n+import org.apache.iceberg.catalog.TableIdentifier;\n+import org.apache.iceberg.exceptions.NamespaceNotEmptyException;\n+import org.apache.iceberg.exceptions.NoSuchNamespaceException;\n+import org.apache.iceberg.relocated.com.google.common.base.Preconditions;\n+import org.apache.iceberg.relocated.com.google.common.collect.Lists;\n+import org.apache.iceberg.relocated.com.google.common.collect.Maps;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import software.amazon.awssdk.services.glue.GlueClient;\n+import software.amazon.awssdk.services.glue.model.CreateDatabaseRequest;\n+import software.amazon.awssdk.services.glue.model.DeleteDatabaseRequest;\n+import software.amazon.awssdk.services.glue.model.DeleteTableRequest;\n+import software.amazon.awssdk.services.glue.model.EntityNotFoundException;\n+import software.amazon.awssdk.services.glue.model.GetDatabaseRequest;\n+import software.amazon.awssdk.services.glue.model.GetDatabaseResponse;\n+import software.amazon.awssdk.services.glue.model.GetDatabasesRequest;\n+import software.amazon.awssdk.services.glue.model.GetDatabasesResponse;\n+import software.amazon.awssdk.services.glue.model.GetTablesRequest;\n+import software.amazon.awssdk.services.glue.model.GetTablesResponse;\n+import software.amazon.awssdk.services.glue.model.InvalidInputException;\n+import software.amazon.awssdk.services.glue.model.UpdateDatabaseRequest;\n+\n+public class GlueCatalog extends BaseMetastoreCatalog implements Closeable, SupportsNamespaces {\n+\n+  private static final Logger LOG = LoggerFactory.getLogger(GlueCatalog.class);\n+\n+  private final Configuration conf;\n+  private final GlueClient glue;\n+  // Catalog ID is the AWS account ID. When it is null, it uses the account of the Glue client.\n+  private final String catalogId;\n+  private final String warehousePath;\n+\n+  /**\n+   * constructor with default glue client\n+   * @param conf Hadoop config, passed in for users of HadoopIO\n+   * @param catalogId Glue catalog ID, which is the AWS account ID. When null, it uses the account of the Glue client.\n+   * @param warehousePath warehouse path, such as s3://my-iceberg-bucket/metadata_prod\n+   */\n+  public GlueCatalog(Configuration conf, String catalogId, String warehousePath) {\n+    this(conf, GlueClient.create(), catalogId, warehousePath);\n+  }\n+\n+  /**\n+   * constructor\n+   * @param conf Hadoop config, passed in for users of HadoopIO\n+   * @param glue Glue client\n+   * @param catalogId Glue catalog ID, which is the AWS account ID. When null, it uses the account of the Glue client.\n+   * @param warehousePath warehouse path, such as s3://my-iceberg-bucket/metadata_prod\n+   */\n+  public GlueCatalog(Configuration conf, GlueClient glue, String catalogId, String warehousePath) {\n+    this.conf = conf;\n+    this.glue = glue;\n+    this.catalogId = catalogId;\n+    this.warehousePath = warehousePath;\n+    validateWarehousePath();\n+  }\n+\n+  private void validateWarehousePath() {\n+    Preconditions.checkArgument(warehousePath != null && warehousePath.length() > 0,\n+        \"Glue warehouse path must be set\");\n+    Preconditions.checkArgument(warehousePath.charAt(warehousePath.length() - 1) != '/',\n+        \"Glue warehouse path %s must not end with /\", warehousePath);\n+  }\n+\n+  @Override\n+  public void close() throws IOException {\n+    glue.close();\n+  }\n+\n+  @Override\n+  protected TableOperations newTableOps(TableIdentifier tableIdentifier) {\n+    String dbName = IcebergToGlueConverter.toDatabaseName(tableIdentifier.namespace());\n+    String tableName = tableIdentifier.name();\n+    return new GlueTableOperations(conf, glue, catalogId, dbName, tableName);\n+  }\n+\n+  /**\n+   * Use the same format as Hive for default warehouse location\n+   * @param tableIdentifier table id\n+   * @return default warehouse path\n+   */\n+  @Override\n+  protected String defaultWarehouseLocation(TableIdentifier tableIdentifier) {\n+    // check if value is set in database\n+    GetDatabaseResponse response = glue.getDatabase(GetDatabaseRequest.builder()\n+        .name(IcebergToGlueConverter.toDatabaseName(tableIdentifier.namespace()))\n+        .build());\n+    String dbLocationUri = response.database().locationUri();\n+    if (dbLocationUri != null) {\n+      return String.format(\"%s/%s\", dbLocationUri, tableIdentifier.name());\n+    }\n+\n+    return String.format(\n+        \"%s/%s.db/%s\",\n+        warehousePath,\n+        IcebergToGlueConverter.toDatabaseName(tableIdentifier.namespace()),\n+        tableIdentifier.name());\n+  }\n+\n+  @Override\n+  public List<TableIdentifier> listTables(Namespace namespace) {\n+    namespaceExists(namespace);\n+    // should be safe to list all before returning the list, instead of dynamically load the list.\n+    String nextToken = null;\n+    List<TableIdentifier> results = new ArrayList<>();\n+    while (true) {\n+      GetTablesResponse response = glue.getTables(GetTablesRequest.builder()\n+          .catalogId(catalogId)\n+          .databaseName(IcebergToGlueConverter.toDatabaseName(namespace))\n+          .nextToken(nextToken)\n+          .build());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0621754136976a9aa17c90858bed545e1c35a5f5"}, "originalPosition": 146}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODA5ODc1NQ==", "bodyText": "Nit: Maybe add an info log above when the table is dropped from the catalog and then one here about whether or not the table was purged?", "url": "https://github.com/apache/iceberg/pull/1633#discussion_r508098755", "createdAt": "2020-10-19T22:27:14Z", "author": {"login": "kbendick"}, "path": "aws/src/main/java/org/apache/iceberg/aws/glue/GlueCatalog.java", "diffHunk": "@@ -0,0 +1,312 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.aws.glue;\n+\n+import java.io.Closeable;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import org.apache.hadoop.conf.Configuration;\n+import org.apache.iceberg.BaseMetastoreCatalog;\n+import org.apache.iceberg.CatalogUtil;\n+import org.apache.iceberg.TableMetadata;\n+import org.apache.iceberg.TableOperations;\n+import org.apache.iceberg.catalog.Namespace;\n+import org.apache.iceberg.catalog.SupportsNamespaces;\n+import org.apache.iceberg.catalog.TableIdentifier;\n+import org.apache.iceberg.exceptions.NamespaceNotEmptyException;\n+import org.apache.iceberg.exceptions.NoSuchNamespaceException;\n+import org.apache.iceberg.relocated.com.google.common.base.Preconditions;\n+import org.apache.iceberg.relocated.com.google.common.collect.Lists;\n+import org.apache.iceberg.relocated.com.google.common.collect.Maps;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import software.amazon.awssdk.services.glue.GlueClient;\n+import software.amazon.awssdk.services.glue.model.CreateDatabaseRequest;\n+import software.amazon.awssdk.services.glue.model.DeleteDatabaseRequest;\n+import software.amazon.awssdk.services.glue.model.DeleteTableRequest;\n+import software.amazon.awssdk.services.glue.model.EntityNotFoundException;\n+import software.amazon.awssdk.services.glue.model.GetDatabaseRequest;\n+import software.amazon.awssdk.services.glue.model.GetDatabaseResponse;\n+import software.amazon.awssdk.services.glue.model.GetDatabasesRequest;\n+import software.amazon.awssdk.services.glue.model.GetDatabasesResponse;\n+import software.amazon.awssdk.services.glue.model.GetTablesRequest;\n+import software.amazon.awssdk.services.glue.model.GetTablesResponse;\n+import software.amazon.awssdk.services.glue.model.InvalidInputException;\n+import software.amazon.awssdk.services.glue.model.UpdateDatabaseRequest;\n+\n+public class GlueCatalog extends BaseMetastoreCatalog implements Closeable, SupportsNamespaces {\n+\n+  private static final Logger LOG = LoggerFactory.getLogger(GlueCatalog.class);\n+\n+  private final Configuration conf;\n+  private final GlueClient glue;\n+  // Catalog ID is the AWS account ID. When it is null, it uses the account of the Glue client.\n+  private final String catalogId;\n+  private final String warehousePath;\n+\n+  /**\n+   * constructor with default glue client\n+   * @param conf Hadoop config, passed in for users of HadoopIO\n+   * @param catalogId Glue catalog ID, which is the AWS account ID. When null, it uses the account of the Glue client.\n+   * @param warehousePath warehouse path, such as s3://my-iceberg-bucket/metadata_prod\n+   */\n+  public GlueCatalog(Configuration conf, String catalogId, String warehousePath) {\n+    this(conf, GlueClient.create(), catalogId, warehousePath);\n+  }\n+\n+  /**\n+   * constructor\n+   * @param conf Hadoop config, passed in for users of HadoopIO\n+   * @param glue Glue client\n+   * @param catalogId Glue catalog ID, which is the AWS account ID. When null, it uses the account of the Glue client.\n+   * @param warehousePath warehouse path, such as s3://my-iceberg-bucket/metadata_prod\n+   */\n+  public GlueCatalog(Configuration conf, GlueClient glue, String catalogId, String warehousePath) {\n+    this.conf = conf;\n+    this.glue = glue;\n+    this.catalogId = catalogId;\n+    this.warehousePath = warehousePath;\n+    validateWarehousePath();\n+  }\n+\n+  private void validateWarehousePath() {\n+    Preconditions.checkArgument(warehousePath != null && warehousePath.length() > 0,\n+        \"Glue warehouse path must be set\");\n+    Preconditions.checkArgument(warehousePath.charAt(warehousePath.length() - 1) != '/',\n+        \"Glue warehouse path %s must not end with /\", warehousePath);\n+  }\n+\n+  @Override\n+  public void close() throws IOException {\n+    glue.close();\n+  }\n+\n+  @Override\n+  protected TableOperations newTableOps(TableIdentifier tableIdentifier) {\n+    String dbName = IcebergToGlueConverter.toDatabaseName(tableIdentifier.namespace());\n+    String tableName = tableIdentifier.name();\n+    return new GlueTableOperations(conf, glue, catalogId, dbName, tableName);\n+  }\n+\n+  /**\n+   * Use the same format as Hive for default warehouse location\n+   * @param tableIdentifier table id\n+   * @return default warehouse path\n+   */\n+  @Override\n+  protected String defaultWarehouseLocation(TableIdentifier tableIdentifier) {\n+    // check if value is set in database\n+    GetDatabaseResponse response = glue.getDatabase(GetDatabaseRequest.builder()\n+        .name(IcebergToGlueConverter.toDatabaseName(tableIdentifier.namespace()))\n+        .build());\n+    String dbLocationUri = response.database().locationUri();\n+    if (dbLocationUri != null) {\n+      return String.format(\"%s/%s\", dbLocationUri, tableIdentifier.name());\n+    }\n+\n+    return String.format(\n+        \"%s/%s.db/%s\",\n+        warehousePath,\n+        IcebergToGlueConverter.toDatabaseName(tableIdentifier.namespace()),\n+        tableIdentifier.name());\n+  }\n+\n+  @Override\n+  public List<TableIdentifier> listTables(Namespace namespace) {\n+    namespaceExists(namespace);\n+    // should be safe to list all before returning the list, instead of dynamically load the list.\n+    String nextToken = null;\n+    List<TableIdentifier> results = new ArrayList<>();\n+    while (true) {\n+      GetTablesResponse response = glue.getTables(GetTablesRequest.builder()\n+          .catalogId(catalogId)\n+          .databaseName(IcebergToGlueConverter.toDatabaseName(namespace))\n+          .nextToken(nextToken)\n+          .build());\n+      if (response.hasTableList()) {\n+        results.addAll(response.tableList().stream()\n+            .map(GlueToIcebergConverter::toTableId)\n+            .collect(Collectors.toList()));\n+        nextToken = response.nextToken();\n+      }\n+      if (nextToken == null) {\n+        break;\n+      }\n+    }\n+    return results;\n+  }\n+\n+  @Override\n+  public boolean dropTable(TableIdentifier identifier, boolean purge) {\n+    try {\n+      dropTable(newTableOps(identifier), identifier, purge);\n+      return true;\n+    } catch (Exception e) {\n+      return false;\n+    }\n+  }\n+\n+  private TableMetadata dropTable(TableOperations ops, TableIdentifier identifier, boolean purge) {\n+    TableMetadata lastMetadata = null;\n+    if (ops.current() != null) {\n+      lastMetadata = ops.current();\n+    }\n+\n+    glue.deleteTable(DeleteTableRequest.builder()\n+        .catalogId(catalogId)\n+        .databaseName(IcebergToGlueConverter.toDatabaseName(identifier.namespace()))\n+        .name(identifier.name())\n+        .build());\n+\n+    if (purge && lastMetadata != null) {\n+      CatalogUtil.dropTableData(ops.io(), lastMetadata);\n+    }\n+\n+    LOG.info(\"Dropped table: {}\", identifier);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0621754136976a9aa17c90858bed545e1c35a5f5"}, "originalPosition": 186}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODA5OTcwNw==", "bodyText": "Yeah I'd definitely like to log the contents of this exception. It would greatly help debug issues like whether or not the table drop failed due to invalid permissions, possibly the wrong role is being assumed at this point in time, etc.", "url": "https://github.com/apache/iceberg/pull/1633#discussion_r508099707", "createdAt": "2020-10-19T22:29:35Z", "author": {"login": "kbendick"}, "path": "aws/src/main/java/org/apache/iceberg/aws/glue/GlueCatalog.java", "diffHunk": "@@ -0,0 +1,312 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.aws.glue;\n+\n+import java.io.Closeable;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import org.apache.hadoop.conf.Configuration;\n+import org.apache.iceberg.BaseMetastoreCatalog;\n+import org.apache.iceberg.CatalogUtil;\n+import org.apache.iceberg.TableMetadata;\n+import org.apache.iceberg.TableOperations;\n+import org.apache.iceberg.catalog.Namespace;\n+import org.apache.iceberg.catalog.SupportsNamespaces;\n+import org.apache.iceberg.catalog.TableIdentifier;\n+import org.apache.iceberg.exceptions.NamespaceNotEmptyException;\n+import org.apache.iceberg.exceptions.NoSuchNamespaceException;\n+import org.apache.iceberg.relocated.com.google.common.base.Preconditions;\n+import org.apache.iceberg.relocated.com.google.common.collect.Lists;\n+import org.apache.iceberg.relocated.com.google.common.collect.Maps;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import software.amazon.awssdk.services.glue.GlueClient;\n+import software.amazon.awssdk.services.glue.model.CreateDatabaseRequest;\n+import software.amazon.awssdk.services.glue.model.DeleteDatabaseRequest;\n+import software.amazon.awssdk.services.glue.model.DeleteTableRequest;\n+import software.amazon.awssdk.services.glue.model.EntityNotFoundException;\n+import software.amazon.awssdk.services.glue.model.GetDatabaseRequest;\n+import software.amazon.awssdk.services.glue.model.GetDatabaseResponse;\n+import software.amazon.awssdk.services.glue.model.GetDatabasesRequest;\n+import software.amazon.awssdk.services.glue.model.GetDatabasesResponse;\n+import software.amazon.awssdk.services.glue.model.GetTablesRequest;\n+import software.amazon.awssdk.services.glue.model.GetTablesResponse;\n+import software.amazon.awssdk.services.glue.model.InvalidInputException;\n+import software.amazon.awssdk.services.glue.model.UpdateDatabaseRequest;\n+\n+public class GlueCatalog extends BaseMetastoreCatalog implements Closeable, SupportsNamespaces {\n+\n+  private static final Logger LOG = LoggerFactory.getLogger(GlueCatalog.class);\n+\n+  private final Configuration conf;\n+  private final GlueClient glue;\n+  // Catalog ID is the AWS account ID. When it is null, it uses the account of the Glue client.\n+  private final String catalogId;\n+  private final String warehousePath;\n+\n+  /**\n+   * constructor with default glue client\n+   * @param conf Hadoop config, passed in for users of HadoopIO\n+   * @param catalogId Glue catalog ID, which is the AWS account ID. When null, it uses the account of the Glue client.\n+   * @param warehousePath warehouse path, such as s3://my-iceberg-bucket/metadata_prod\n+   */\n+  public GlueCatalog(Configuration conf, String catalogId, String warehousePath) {\n+    this(conf, GlueClient.create(), catalogId, warehousePath);\n+  }\n+\n+  /**\n+   * constructor\n+   * @param conf Hadoop config, passed in for users of HadoopIO\n+   * @param glue Glue client\n+   * @param catalogId Glue catalog ID, which is the AWS account ID. When null, it uses the account of the Glue client.\n+   * @param warehousePath warehouse path, such as s3://my-iceberg-bucket/metadata_prod\n+   */\n+  public GlueCatalog(Configuration conf, GlueClient glue, String catalogId, String warehousePath) {\n+    this.conf = conf;\n+    this.glue = glue;\n+    this.catalogId = catalogId;\n+    this.warehousePath = warehousePath;\n+    validateWarehousePath();\n+  }\n+\n+  private void validateWarehousePath() {\n+    Preconditions.checkArgument(warehousePath != null && warehousePath.length() > 0,\n+        \"Glue warehouse path must be set\");\n+    Preconditions.checkArgument(warehousePath.charAt(warehousePath.length() - 1) != '/',\n+        \"Glue warehouse path %s must not end with /\", warehousePath);\n+  }\n+\n+  @Override\n+  public void close() throws IOException {\n+    glue.close();\n+  }\n+\n+  @Override\n+  protected TableOperations newTableOps(TableIdentifier tableIdentifier) {\n+    String dbName = IcebergToGlueConverter.toDatabaseName(tableIdentifier.namespace());\n+    String tableName = tableIdentifier.name();\n+    return new GlueTableOperations(conf, glue, catalogId, dbName, tableName);\n+  }\n+\n+  /**\n+   * Use the same format as Hive for default warehouse location\n+   * @param tableIdentifier table id\n+   * @return default warehouse path\n+   */\n+  @Override\n+  protected String defaultWarehouseLocation(TableIdentifier tableIdentifier) {\n+    // check if value is set in database\n+    GetDatabaseResponse response = glue.getDatabase(GetDatabaseRequest.builder()\n+        .name(IcebergToGlueConverter.toDatabaseName(tableIdentifier.namespace()))\n+        .build());\n+    String dbLocationUri = response.database().locationUri();\n+    if (dbLocationUri != null) {\n+      return String.format(\"%s/%s\", dbLocationUri, tableIdentifier.name());\n+    }\n+\n+    return String.format(\n+        \"%s/%s.db/%s\",\n+        warehousePath,\n+        IcebergToGlueConverter.toDatabaseName(tableIdentifier.namespace()),\n+        tableIdentifier.name());\n+  }\n+\n+  @Override\n+  public List<TableIdentifier> listTables(Namespace namespace) {\n+    namespaceExists(namespace);\n+    // should be safe to list all before returning the list, instead of dynamically load the list.\n+    String nextToken = null;\n+    List<TableIdentifier> results = new ArrayList<>();\n+    while (true) {\n+      GetTablesResponse response = glue.getTables(GetTablesRequest.builder()\n+          .catalogId(catalogId)\n+          .databaseName(IcebergToGlueConverter.toDatabaseName(namespace))\n+          .nextToken(nextToken)\n+          .build());\n+      if (response.hasTableList()) {\n+        results.addAll(response.tableList().stream()\n+            .map(GlueToIcebergConverter::toTableId)\n+            .collect(Collectors.toList()));\n+        nextToken = response.nextToken();\n+      }\n+      if (nextToken == null) {\n+        break;\n+      }\n+    }\n+    return results;\n+  }\n+\n+  @Override\n+  public boolean dropTable(TableIdentifier identifier, boolean purge) {\n+    try {\n+      dropTable(newTableOps(identifier), identifier, purge);\n+      return true;\n+    } catch (Exception e) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzg3Mzg1Ng=="}, "originalCommit": {"oid": "0621754136976a9aa17c90858bed545e1c35a5f5"}, "originalPosition": 165}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODEwMDE4Mw==", "bodyText": "Seems like this operation can throw as well. Since the BaseMetastoreCatalog doesn't declare thi with a checked exception, you might want to document what it can throw that you know of or wrap in try...catch (though arguably that could be up the calling code).", "url": "https://github.com/apache/iceberg/pull/1633#discussion_r508100183", "createdAt": "2020-10-19T22:30:55Z", "author": {"login": "kbendick"}, "path": "aws/src/main/java/org/apache/iceberg/aws/glue/GlueCatalog.java", "diffHunk": "@@ -0,0 +1,312 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.aws.glue;\n+\n+import java.io.Closeable;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import org.apache.hadoop.conf.Configuration;\n+import org.apache.iceberg.BaseMetastoreCatalog;\n+import org.apache.iceberg.CatalogUtil;\n+import org.apache.iceberg.TableMetadata;\n+import org.apache.iceberg.TableOperations;\n+import org.apache.iceberg.catalog.Namespace;\n+import org.apache.iceberg.catalog.SupportsNamespaces;\n+import org.apache.iceberg.catalog.TableIdentifier;\n+import org.apache.iceberg.exceptions.NamespaceNotEmptyException;\n+import org.apache.iceberg.exceptions.NoSuchNamespaceException;\n+import org.apache.iceberg.relocated.com.google.common.base.Preconditions;\n+import org.apache.iceberg.relocated.com.google.common.collect.Lists;\n+import org.apache.iceberg.relocated.com.google.common.collect.Maps;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import software.amazon.awssdk.services.glue.GlueClient;\n+import software.amazon.awssdk.services.glue.model.CreateDatabaseRequest;\n+import software.amazon.awssdk.services.glue.model.DeleteDatabaseRequest;\n+import software.amazon.awssdk.services.glue.model.DeleteTableRequest;\n+import software.amazon.awssdk.services.glue.model.EntityNotFoundException;\n+import software.amazon.awssdk.services.glue.model.GetDatabaseRequest;\n+import software.amazon.awssdk.services.glue.model.GetDatabaseResponse;\n+import software.amazon.awssdk.services.glue.model.GetDatabasesRequest;\n+import software.amazon.awssdk.services.glue.model.GetDatabasesResponse;\n+import software.amazon.awssdk.services.glue.model.GetTablesRequest;\n+import software.amazon.awssdk.services.glue.model.GetTablesResponse;\n+import software.amazon.awssdk.services.glue.model.InvalidInputException;\n+import software.amazon.awssdk.services.glue.model.UpdateDatabaseRequest;\n+\n+public class GlueCatalog extends BaseMetastoreCatalog implements Closeable, SupportsNamespaces {\n+\n+  private static final Logger LOG = LoggerFactory.getLogger(GlueCatalog.class);\n+\n+  private final Configuration conf;\n+  private final GlueClient glue;\n+  // Catalog ID is the AWS account ID. When it is null, it uses the account of the Glue client.\n+  private final String catalogId;\n+  private final String warehousePath;\n+\n+  /**\n+   * constructor with default glue client\n+   * @param conf Hadoop config, passed in for users of HadoopIO\n+   * @param catalogId Glue catalog ID, which is the AWS account ID. When null, it uses the account of the Glue client.\n+   * @param warehousePath warehouse path, such as s3://my-iceberg-bucket/metadata_prod\n+   */\n+  public GlueCatalog(Configuration conf, String catalogId, String warehousePath) {\n+    this(conf, GlueClient.create(), catalogId, warehousePath);\n+  }\n+\n+  /**\n+   * constructor\n+   * @param conf Hadoop config, passed in for users of HadoopIO\n+   * @param glue Glue client\n+   * @param catalogId Glue catalog ID, which is the AWS account ID. When null, it uses the account of the Glue client.\n+   * @param warehousePath warehouse path, such as s3://my-iceberg-bucket/metadata_prod\n+   */\n+  public GlueCatalog(Configuration conf, GlueClient glue, String catalogId, String warehousePath) {\n+    this.conf = conf;\n+    this.glue = glue;\n+    this.catalogId = catalogId;\n+    this.warehousePath = warehousePath;\n+    validateWarehousePath();\n+  }\n+\n+  private void validateWarehousePath() {\n+    Preconditions.checkArgument(warehousePath != null && warehousePath.length() > 0,\n+        \"Glue warehouse path must be set\");\n+    Preconditions.checkArgument(warehousePath.charAt(warehousePath.length() - 1) != '/',\n+        \"Glue warehouse path %s must not end with /\", warehousePath);\n+  }\n+\n+  @Override\n+  public void close() throws IOException {\n+    glue.close();\n+  }\n+\n+  @Override\n+  protected TableOperations newTableOps(TableIdentifier tableIdentifier) {\n+    String dbName = IcebergToGlueConverter.toDatabaseName(tableIdentifier.namespace());\n+    String tableName = tableIdentifier.name();\n+    return new GlueTableOperations(conf, glue, catalogId, dbName, tableName);\n+  }\n+\n+  /**\n+   * Use the same format as Hive for default warehouse location\n+   * @param tableIdentifier table id\n+   * @return default warehouse path\n+   */\n+  @Override\n+  protected String defaultWarehouseLocation(TableIdentifier tableIdentifier) {\n+    // check if value is set in database\n+    GetDatabaseResponse response = glue.getDatabase(GetDatabaseRequest.builder()\n+        .name(IcebergToGlueConverter.toDatabaseName(tableIdentifier.namespace()))\n+        .build());\n+    String dbLocationUri = response.database().locationUri();\n+    if (dbLocationUri != null) {\n+      return String.format(\"%s/%s\", dbLocationUri, tableIdentifier.name());\n+    }\n+\n+    return String.format(\n+        \"%s/%s.db/%s\",\n+        warehousePath,\n+        IcebergToGlueConverter.toDatabaseName(tableIdentifier.namespace()),\n+        tableIdentifier.name());\n+  }\n+\n+  @Override\n+  public List<TableIdentifier> listTables(Namespace namespace) {\n+    namespaceExists(namespace);\n+    // should be safe to list all before returning the list, instead of dynamically load the list.\n+    String nextToken = null;\n+    List<TableIdentifier> results = new ArrayList<>();\n+    while (true) {\n+      GetTablesResponse response = glue.getTables(GetTablesRequest.builder()\n+          .catalogId(catalogId)\n+          .databaseName(IcebergToGlueConverter.toDatabaseName(namespace))\n+          .nextToken(nextToken)\n+          .build());\n+      if (response.hasTableList()) {\n+        results.addAll(response.tableList().stream()\n+            .map(GlueToIcebergConverter::toTableId)\n+            .collect(Collectors.toList()));\n+        nextToken = response.nextToken();\n+      }\n+      if (nextToken == null) {\n+        break;\n+      }\n+    }\n+    return results;\n+  }\n+\n+  @Override\n+  public boolean dropTable(TableIdentifier identifier, boolean purge) {\n+    try {\n+      dropTable(newTableOps(identifier), identifier, purge);\n+      return true;\n+    } catch (Exception e) {\n+      return false;\n+    }\n+  }\n+\n+  private TableMetadata dropTable(TableOperations ops, TableIdentifier identifier, boolean purge) {\n+    TableMetadata lastMetadata = null;\n+    if (ops.current() != null) {\n+      lastMetadata = ops.current();\n+    }\n+\n+    glue.deleteTable(DeleteTableRequest.builder()\n+        .catalogId(catalogId)\n+        .databaseName(IcebergToGlueConverter.toDatabaseName(identifier.namespace()))\n+        .name(identifier.name())\n+        .build());\n+\n+    if (purge && lastMetadata != null) {\n+      CatalogUtil.dropTableData(ops.io(), lastMetadata);\n+    }\n+\n+    LOG.info(\"Dropped table: {}\", identifier);\n+    return lastMetadata;\n+  }\n+\n+  /**\n+   * Rename table in Glue is a drop table and create table.\n+   * @param from identifier of the table to rename\n+   * @param to new table name\n+   */\n+  @Override\n+  public void renameTable(TableIdentifier from, TableIdentifier to) {\n+    TableOperations ops = newTableOps(from);\n+    // keep metadata\n+    TableMetadata tableMetadata = dropTable(ops, from, false);\n+    // use the same info to create the new table\n+    createTable(to, tableMetadata.schema(), tableMetadata.spec(), tableMetadata.properties());\n+  }\n+\n+  @Override\n+  public void createNamespace(Namespace namespace, Map<String, String> metadata) {\n+    glue.createDatabase(CreateDatabaseRequest.builder()\n+        .catalogId(catalogId)\n+        .databaseInput(IcebergToGlueConverter.toDatabaseInput(namespace, metadata))\n+        .build());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0621754136976a9aa17c90858bed545e1c35a5f5"}, "originalPosition": 209}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODEwMTE0Ng==", "bodyText": "Maybe I'm just totally missing the obvious but I don't see where parameter is being used. Loks like it's built and then the database is updated directly via propeties.", "url": "https://github.com/apache/iceberg/pull/1633#discussion_r508101146", "createdAt": "2020-10-19T22:33:28Z", "author": {"login": "kbendick"}, "path": "aws/src/main/java/org/apache/iceberg/aws/glue/GlueCatalog.java", "diffHunk": "@@ -0,0 +1,312 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.aws.glue;\n+\n+import java.io.Closeable;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import org.apache.hadoop.conf.Configuration;\n+import org.apache.iceberg.BaseMetastoreCatalog;\n+import org.apache.iceberg.CatalogUtil;\n+import org.apache.iceberg.TableMetadata;\n+import org.apache.iceberg.TableOperations;\n+import org.apache.iceberg.catalog.Namespace;\n+import org.apache.iceberg.catalog.SupportsNamespaces;\n+import org.apache.iceberg.catalog.TableIdentifier;\n+import org.apache.iceberg.exceptions.NamespaceNotEmptyException;\n+import org.apache.iceberg.exceptions.NoSuchNamespaceException;\n+import org.apache.iceberg.relocated.com.google.common.base.Preconditions;\n+import org.apache.iceberg.relocated.com.google.common.collect.Lists;\n+import org.apache.iceberg.relocated.com.google.common.collect.Maps;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import software.amazon.awssdk.services.glue.GlueClient;\n+import software.amazon.awssdk.services.glue.model.CreateDatabaseRequest;\n+import software.amazon.awssdk.services.glue.model.DeleteDatabaseRequest;\n+import software.amazon.awssdk.services.glue.model.DeleteTableRequest;\n+import software.amazon.awssdk.services.glue.model.EntityNotFoundException;\n+import software.amazon.awssdk.services.glue.model.GetDatabaseRequest;\n+import software.amazon.awssdk.services.glue.model.GetDatabaseResponse;\n+import software.amazon.awssdk.services.glue.model.GetDatabasesRequest;\n+import software.amazon.awssdk.services.glue.model.GetDatabasesResponse;\n+import software.amazon.awssdk.services.glue.model.GetTablesRequest;\n+import software.amazon.awssdk.services.glue.model.GetTablesResponse;\n+import software.amazon.awssdk.services.glue.model.InvalidInputException;\n+import software.amazon.awssdk.services.glue.model.UpdateDatabaseRequest;\n+\n+public class GlueCatalog extends BaseMetastoreCatalog implements Closeable, SupportsNamespaces {\n+\n+  private static final Logger LOG = LoggerFactory.getLogger(GlueCatalog.class);\n+\n+  private final Configuration conf;\n+  private final GlueClient glue;\n+  // Catalog ID is the AWS account ID. When it is null, it uses the account of the Glue client.\n+  private final String catalogId;\n+  private final String warehousePath;\n+\n+  /**\n+   * constructor with default glue client\n+   * @param conf Hadoop config, passed in for users of HadoopIO\n+   * @param catalogId Glue catalog ID, which is the AWS account ID. When null, it uses the account of the Glue client.\n+   * @param warehousePath warehouse path, such as s3://my-iceberg-bucket/metadata_prod\n+   */\n+  public GlueCatalog(Configuration conf, String catalogId, String warehousePath) {\n+    this(conf, GlueClient.create(), catalogId, warehousePath);\n+  }\n+\n+  /**\n+   * constructor\n+   * @param conf Hadoop config, passed in for users of HadoopIO\n+   * @param glue Glue client\n+   * @param catalogId Glue catalog ID, which is the AWS account ID. When null, it uses the account of the Glue client.\n+   * @param warehousePath warehouse path, such as s3://my-iceberg-bucket/metadata_prod\n+   */\n+  public GlueCatalog(Configuration conf, GlueClient glue, String catalogId, String warehousePath) {\n+    this.conf = conf;\n+    this.glue = glue;\n+    this.catalogId = catalogId;\n+    this.warehousePath = warehousePath;\n+    validateWarehousePath();\n+  }\n+\n+  private void validateWarehousePath() {\n+    Preconditions.checkArgument(warehousePath != null && warehousePath.length() > 0,\n+        \"Glue warehouse path must be set\");\n+    Preconditions.checkArgument(warehousePath.charAt(warehousePath.length() - 1) != '/',\n+        \"Glue warehouse path %s must not end with /\", warehousePath);\n+  }\n+\n+  @Override\n+  public void close() throws IOException {\n+    glue.close();\n+  }\n+\n+  @Override\n+  protected TableOperations newTableOps(TableIdentifier tableIdentifier) {\n+    String dbName = IcebergToGlueConverter.toDatabaseName(tableIdentifier.namespace());\n+    String tableName = tableIdentifier.name();\n+    return new GlueTableOperations(conf, glue, catalogId, dbName, tableName);\n+  }\n+\n+  /**\n+   * Use the same format as Hive for default warehouse location\n+   * @param tableIdentifier table id\n+   * @return default warehouse path\n+   */\n+  @Override\n+  protected String defaultWarehouseLocation(TableIdentifier tableIdentifier) {\n+    // check if value is set in database\n+    GetDatabaseResponse response = glue.getDatabase(GetDatabaseRequest.builder()\n+        .name(IcebergToGlueConverter.toDatabaseName(tableIdentifier.namespace()))\n+        .build());\n+    String dbLocationUri = response.database().locationUri();\n+    if (dbLocationUri != null) {\n+      return String.format(\"%s/%s\", dbLocationUri, tableIdentifier.name());\n+    }\n+\n+    return String.format(\n+        \"%s/%s.db/%s\",\n+        warehousePath,\n+        IcebergToGlueConverter.toDatabaseName(tableIdentifier.namespace()),\n+        tableIdentifier.name());\n+  }\n+\n+  @Override\n+  public List<TableIdentifier> listTables(Namespace namespace) {\n+    namespaceExists(namespace);\n+    // should be safe to list all before returning the list, instead of dynamically load the list.\n+    String nextToken = null;\n+    List<TableIdentifier> results = new ArrayList<>();\n+    while (true) {\n+      GetTablesResponse response = glue.getTables(GetTablesRequest.builder()\n+          .catalogId(catalogId)\n+          .databaseName(IcebergToGlueConverter.toDatabaseName(namespace))\n+          .nextToken(nextToken)\n+          .build());\n+      if (response.hasTableList()) {\n+        results.addAll(response.tableList().stream()\n+            .map(GlueToIcebergConverter::toTableId)\n+            .collect(Collectors.toList()));\n+        nextToken = response.nextToken();\n+      }\n+      if (nextToken == null) {\n+        break;\n+      }\n+    }\n+    return results;\n+  }\n+\n+  @Override\n+  public boolean dropTable(TableIdentifier identifier, boolean purge) {\n+    try {\n+      dropTable(newTableOps(identifier), identifier, purge);\n+      return true;\n+    } catch (Exception e) {\n+      return false;\n+    }\n+  }\n+\n+  private TableMetadata dropTable(TableOperations ops, TableIdentifier identifier, boolean purge) {\n+    TableMetadata lastMetadata = null;\n+    if (ops.current() != null) {\n+      lastMetadata = ops.current();\n+    }\n+\n+    glue.deleteTable(DeleteTableRequest.builder()\n+        .catalogId(catalogId)\n+        .databaseName(IcebergToGlueConverter.toDatabaseName(identifier.namespace()))\n+        .name(identifier.name())\n+        .build());\n+\n+    if (purge && lastMetadata != null) {\n+      CatalogUtil.dropTableData(ops.io(), lastMetadata);\n+    }\n+\n+    LOG.info(\"Dropped table: {}\", identifier);\n+    return lastMetadata;\n+  }\n+\n+  /**\n+   * Rename table in Glue is a drop table and create table.\n+   * @param from identifier of the table to rename\n+   * @param to new table name\n+   */\n+  @Override\n+  public void renameTable(TableIdentifier from, TableIdentifier to) {\n+    TableOperations ops = newTableOps(from);\n+    // keep metadata\n+    TableMetadata tableMetadata = dropTable(ops, from, false);\n+    // use the same info to create the new table\n+    createTable(to, tableMetadata.schema(), tableMetadata.spec(), tableMetadata.properties());\n+  }\n+\n+  @Override\n+  public void createNamespace(Namespace namespace, Map<String, String> metadata) {\n+    glue.createDatabase(CreateDatabaseRequest.builder()\n+        .catalogId(catalogId)\n+        .databaseInput(IcebergToGlueConverter.toDatabaseInput(namespace, metadata))\n+        .build());\n+  }\n+\n+  @Override\n+  public List<Namespace> listNamespaces(Namespace namespace) throws NoSuchNamespaceException {\n+    if (!namespace.isEmpty()) {\n+      // if it is not a list all op, just check if the namespace exists and return itself.\n+      if (namespaceExists(namespace)) {\n+        return Lists.newArrayList(namespace);\n+      }\n+      throw new NoSuchNamespaceException(\n+          \"Glue does not support nested namespace, cannot list namespaces under %s\", namespace);\n+    }\n+    // should be safe to list all before returning the list, instead of dynamically load the list.\n+    String nextToken = null;\n+    List<Namespace> results = new ArrayList<>();\n+    while (true) {\n+      GetDatabasesResponse response = glue.getDatabases(GetDatabasesRequest.builder()\n+          .catalogId(catalogId)\n+          .nextToken(nextToken)\n+          .build());\n+      if (response.hasDatabaseList()) {\n+        results.addAll(response.databaseList().stream()\n+            .map(GlueToIcebergConverter::toNamespace)\n+            .collect(Collectors.toList()));\n+        nextToken = response.nextToken();\n+      }\n+      if (nextToken == null) {\n+        break;\n+      }\n+    }\n+    return results;\n+  }\n+\n+  @Override\n+  public Map<String, String> loadNamespaceMetadata(Namespace namespace) throws NoSuchNamespaceException {\n+    String databaseName = IcebergToGlueConverter.toDatabaseName(namespace);\n+    try {\n+      GetDatabaseResponse response = glue.getDatabase(GetDatabaseRequest.builder()\n+          .catalogId(catalogId)\n+          .name(databaseName)\n+          .build());\n+      return response.database().parameters();\n+    } catch (InvalidInputException e) {\n+      throw new NoSuchNamespaceException(\"invalid input for namespace %s, error message: %s\",\n+          namespace, e.getMessage());\n+    } catch (EntityNotFoundException e) {\n+      throw new NoSuchNamespaceException(\"fail to find Glue database for namespace %s, error message: %s\",\n+          databaseName, e.getMessage());\n+    }\n+  }\n+\n+  /**\n+   * After completing this operation, you no longer have access to the tables\n+   * (and all table versions and partitions that might belong to the tables)\n+   * and the user-defined functions in the deleted database.\n+   * AWS Glue deletes these \"orphaned\" resources asynchronously in a timely manner, at the discretion of the service.\n+   * To ensure the immediate deletion of all related resources, before calling DeleteDatabase, use DeleteTableVersion\n+   * or BatchDeleteTableVersion, DeletePartition or BatchDeletePartition, DeleteUserDefinedFunction,\n+   * and DeleteTable or BatchDeleteTable, to delete any resources that belong to the database.\n+   * @param namespace a namespace. {@link Namespace}\n+   * @return always true\n+   * @throws NamespaceNotEmptyException never thrown\n+   */\n+  @Override\n+  public boolean dropNamespace(Namespace namespace) throws NamespaceNotEmptyException {\n+    namespaceExists(namespace);\n+    glue.deleteDatabase(DeleteDatabaseRequest.builder()\n+        .catalogId(catalogId)\n+        .name(IcebergToGlueConverter.toDatabaseName(namespace))\n+        .build());\n+    // Always successful, otherwise exception is thrown\n+    return true;\n+  }\n+\n+  @Override\n+  public boolean setProperties(Namespace namespace, Map<String, String> properties) throws NoSuchNamespaceException {\n+    Map<String, String> parameter = Maps.newHashMap();\n+    parameter.putAll(loadNamespaceMetadata(namespace));\n+    parameter.putAll(properties);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0621754136976a9aa17c90858bed545e1c35a5f5"}, "originalPosition": 288}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTEyMjY0MzY1", "url": "https://github.com/apache/iceberg/pull/1633#pullrequestreview-512264365", "createdAt": "2020-10-20T01:17:47Z", "commit": {"oid": "0621754136976a9aa17c90858bed545e1c35a5f5"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQwMToxNzo0N1rOHknGyg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQwMToxNzo0N1rOHknGyg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODE1MTQ5OA==", "bodyText": "I don't really see much value in this test given how heavily mocked it is.", "url": "https://github.com/apache/iceberg/pull/1633#discussion_r508151498", "createdAt": "2020-10-20T01:17:47Z", "author": {"login": "kbendick"}, "path": "aws/src/test/java/org/apache/iceberg/aws/glue/TestGlueCatalog.java", "diffHunk": "@@ -0,0 +1,211 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.aws.glue;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import org.apache.hadoop.conf.Configuration;\n+import org.apache.iceberg.catalog.Namespace;\n+import org.apache.iceberg.catalog.TableIdentifier;\n+import org.apache.iceberg.exceptions.NoSuchNamespaceException;\n+import org.apache.iceberg.relocated.com.google.common.collect.Lists;\n+import org.apache.iceberg.relocated.com.google.common.collect.Sets;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.mockito.Mockito;\n+import software.amazon.awssdk.services.glue.GlueClient;\n+import software.amazon.awssdk.services.glue.model.CreateDatabaseRequest;\n+import software.amazon.awssdk.services.glue.model.CreateDatabaseResponse;\n+import software.amazon.awssdk.services.glue.model.CreateTableRequest;\n+import software.amazon.awssdk.services.glue.model.CreateTableResponse;\n+import software.amazon.awssdk.services.glue.model.Database;\n+import software.amazon.awssdk.services.glue.model.DeleteDatabaseRequest;\n+import software.amazon.awssdk.services.glue.model.DeleteDatabaseResponse;\n+import software.amazon.awssdk.services.glue.model.DeleteTableRequest;\n+import software.amazon.awssdk.services.glue.model.DeleteTableResponse;\n+import software.amazon.awssdk.services.glue.model.GetDatabaseRequest;\n+import software.amazon.awssdk.services.glue.model.GetDatabaseResponse;\n+import software.amazon.awssdk.services.glue.model.GetDatabasesRequest;\n+import software.amazon.awssdk.services.glue.model.GetDatabasesResponse;\n+import software.amazon.awssdk.services.glue.model.GetTablesRequest;\n+import software.amazon.awssdk.services.glue.model.GetTablesResponse;\n+import software.amazon.awssdk.services.glue.model.Table;\n+import software.amazon.awssdk.services.glue.model.UpdateDatabaseRequest;\n+import software.amazon.awssdk.services.glue.model.UpdateDatabaseResponse;\n+\n+public class TestGlueCatalog {\n+\n+  private static final String WAREHOUSE_PATH = \"s3://bucket\";\n+  private GlueClient glue;\n+  private GlueCatalog glueCatalog;\n+\n+  @Before\n+  public void before() {\n+    glue = Mockito.mock(GlueClient.class);\n+    glueCatalog = new GlueCatalog(\n+        new Configuration(),\n+        glue,\n+        null,\n+        WAREHOUSE_PATH\n+    );\n+  }\n+\n+  @Test\n+  public void defaultWarehouseLocation_noDbUri() {\n+    Mockito.doReturn(GetDatabaseResponse.builder()\n+        .database(Database.builder().name(\"db\").build()).build())\n+        .when(glue).getDatabase(Mockito.any(GetDatabaseRequest.class));\n+    String location = glueCatalog.defaultWarehouseLocation(TableIdentifier.of(\"db\", \"table\"));\n+    Assert.assertEquals(WAREHOUSE_PATH + \"/db.db/table\", location);\n+  }\n+\n+  @Test\n+  public void defaultWarehouseLocation_dbUri() {\n+    Mockito.doReturn(GetDatabaseResponse.builder()\n+        .database(Database.builder().name(\"db\").locationUri(\"s3://bucket2/db\").build()).build())\n+        .when(glue).getDatabase(Mockito.any(GetDatabaseRequest.class));\n+    String location = glueCatalog.defaultWarehouseLocation(TableIdentifier.of(\"db\", \"table\"));\n+    Assert.assertEquals(\"s3://bucket2/db/table\", location);\n+  }\n+\n+  @Test\n+  public void listTables() {\n+    Mockito.doReturn(GetDatabaseResponse.builder()\n+        .database(Database.builder().name(\"db1\").build()).build())\n+        .when(glue).getDatabase(Mockito.any(GetDatabaseRequest.class));\n+    Mockito.doReturn(GetTablesResponse.builder()\n+        .tableList(\n+            Table.builder().databaseName(\"db1\").name(\"t1\").build(),\n+            Table.builder().databaseName(\"db1\").name(\"t2\").build()\n+        ).build())\n+        .when(glue).getTables(Mockito.any(GetTablesRequest.class));\n+    Assert.assertEquals(\n+        Lists.newArrayList(\n+            TableIdentifier.of(\"db1\", \"t1\"),\n+            TableIdentifier.of(\"db1\", \"t2\")\n+        ),\n+        glueCatalog.listTables(Namespace.of(\"db1\"))\n+    );\n+  }\n+\n+  @Test\n+  public void dropTable() {\n+    Mockito.doReturn(GetDatabaseResponse.builder()\n+        .database(Database.builder().name(\"db1\").build()).build())\n+        .when(glue).getDatabase(Mockito.any(GetDatabaseRequest.class));\n+    Mockito.doReturn(DeleteTableResponse.builder().build())\n+        .when(glue).deleteTable(Mockito.any(DeleteTableRequest.class));\n+    glueCatalog.dropTable(TableIdentifier.of(\"db1\", \"t1\"));\n+  }\n+\n+  @Test\n+  public void renameTable() {\n+    Mockito.doReturn(GetDatabaseResponse.builder()\n+        .database(Database.builder().name(\"db1\").build()).build())\n+        .when(glue).getDatabase(Mockito.any(GetDatabaseRequest.class));\n+    Mockito.doReturn(DeleteTableResponse.builder().build())\n+        .when(glue).deleteTable(Mockito.any(DeleteTableRequest.class));\n+    Mockito.doReturn(CreateTableResponse.builder().build())\n+        .when(glue).createTable(Mockito.any(CreateTableRequest.class));\n+    glueCatalog.dropTable(TableIdentifier.of(\"db1\", \"t1\"));\n+  }\n+\n+  @Test\n+  public void createNamespace() {\n+    Mockito.doReturn(CreateDatabaseResponse.builder().build())\n+        .when(glue).createDatabase(Mockito.any(CreateDatabaseRequest.class));\n+    glueCatalog.createNamespace(Namespace.of(\"db\"));\n+  }\n+\n+  @Test(expected = NoSuchNamespaceException.class)\n+  public void createNamespace_badName() {\n+    Mockito.doReturn(CreateDatabaseResponse.builder().build())\n+        .when(glue).createDatabase(Mockito.any(CreateDatabaseRequest.class));\n+    glueCatalog.createNamespace(Namespace.of(\"db-1\"));\n+  }\n+\n+  @Test\n+  public void listNamespaces_all() {\n+    Mockito.doReturn(GetDatabasesResponse.builder()\n+        .databaseList(\n+            Database.builder().name(\"db1\").build(),\n+            Database.builder().name(\"db2\").build()\n+        ).build())\n+        .when(glue).getDatabases(Mockito.any(GetDatabasesRequest.class));\n+    Assert.assertEquals(\n+        Lists.newArrayList(\n+            Namespace.of(\"db1\"),\n+            Namespace.of(\"db2\")\n+        ),\n+        glueCatalog.listNamespaces()\n+    );", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0621754136976a9aa17c90858bed545e1c35a5f5"}, "originalPosition": 159}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE1MTEwMzU0", "url": "https://github.com/apache/iceberg/pull/1633#pullrequestreview-515110354", "createdAt": "2020-10-22T20:53:41Z", "commit": {"oid": "a90dfa07d4285f46993dfcb22777801a55d7c4de"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQyMDo1Mzo0MlrOHmza4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQyMDo1OTowMVrOHmzmLA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDQ1MDQwMw==", "bodyText": "Not a problem for now but wondering if we want to add a path/folder with random name to the warehouse location inside bucket to allow concurrent runs", "url": "https://github.com/apache/iceberg/pull/1633#discussion_r510450403", "createdAt": "2020-10-22T20:53:42Z", "author": {"login": "yyanyy"}, "path": "aws/src/test/java/org/apache/iceberg/aws/glue/TestGlueCatalogInteg.java", "diffHunk": "@@ -0,0 +1,271 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.aws.glue;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.UUID;\n+import java.util.stream.Collectors;\n+import org.apache.hadoop.conf.Configuration;\n+import org.apache.iceberg.AssertHelpers;\n+import org.apache.iceberg.BaseMetastoreTableOperations;\n+import org.apache.iceberg.DataFile;\n+import org.apache.iceberg.DataFiles;\n+import org.apache.iceberg.PartitionSpec;\n+import org.apache.iceberg.Schema;\n+import org.apache.iceberg.Table;\n+import org.apache.iceberg.TableMetadata;\n+import org.apache.iceberg.TableOperations;\n+import org.apache.iceberg.catalog.Namespace;\n+import org.apache.iceberg.catalog.TableIdentifier;\n+import org.apache.iceberg.exceptions.AlreadyExistsException;\n+import org.apache.iceberg.exceptions.NoSuchNamespaceException;\n+import org.apache.iceberg.exceptions.NoSuchTableException;\n+import org.apache.iceberg.relocated.com.google.common.collect.Sets;\n+import org.apache.iceberg.types.Types;\n+import org.junit.AfterClass;\n+import org.junit.Assert;\n+import org.junit.BeforeClass;\n+import org.junit.Ignore;\n+import org.junit.Test;\n+import software.amazon.awssdk.services.glue.GlueClient;\n+import software.amazon.awssdk.services.glue.model.Database;\n+import software.amazon.awssdk.services.glue.model.DeleteDatabaseRequest;\n+import software.amazon.awssdk.services.glue.model.EntityNotFoundException;\n+import software.amazon.awssdk.services.glue.model.GetDatabaseRequest;\n+import software.amazon.awssdk.services.glue.model.GetTableRequest;\n+import software.amazon.awssdk.services.glue.model.GetTableResponse;\n+import software.amazon.awssdk.services.s3.S3Client;\n+import software.amazon.awssdk.services.s3.model.Delete;\n+import software.amazon.awssdk.services.s3.model.DeleteObjectsRequest;\n+import software.amazon.awssdk.services.s3.model.HeadObjectRequest;\n+import software.amazon.awssdk.services.s3.model.ListObjectsV2Request;\n+import software.amazon.awssdk.services.s3.model.ListObjectsV2Response;\n+import software.amazon.awssdk.services.s3.model.ObjectIdentifier;\n+\n+@Ignore\n+public class TestGlueCatalogInteg {\n+\n+  private static final List<String> NAMESPACES = new ArrayList<>();\n+  private static final GlueClient GLUE = GlueClient.create();\n+  private static final S3Client S3 = S3Client.create();\n+  private static final String BUCKET = System.getenv(\"GLUE_BUCKET\");\n+  private static GlueCatalog glueCatalog;\n+\n+  @BeforeClass\n+  public static void beforeClass() {\n+    Configuration configuration = new Configuration();\n+    // Iceberg uses Hadoop 2.7.3, and the hadoop-aws module does not support reading environment variable yet\n+    configuration.set(\"fs.s3a.access.key\", System.getenv(\"AWS_ACCESS_KEY_ID\"));\n+    configuration.set(\"fs.s3a.secret.key\", System.getenv(\"AWS_SECRET_ACCESS_KEY\"));\n+    glueCatalog = new GlueCatalog(configuration, GLUE, null, \"s3a://\" + BUCKET);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a90dfa07d4285f46993dfcb22777801a55d7c4de"}, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDQ1MDg0Mg==", "bodyText": "Nit: could directly be ops.current()", "url": "https://github.com/apache/iceberg/pull/1633#discussion_r510450842", "createdAt": "2020-10-22T20:54:33Z", "author": {"login": "yyanyy"}, "path": "aws/src/main/java/org/apache/iceberg/aws/glue/GlueCatalog.java", "diffHunk": "@@ -0,0 +1,351 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.aws.glue;\n+\n+import java.io.Closeable;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import org.apache.commons.collections.CollectionUtils;\n+import org.apache.hadoop.conf.Configuration;\n+import org.apache.iceberg.BaseMetastoreCatalog;\n+import org.apache.iceberg.CatalogUtil;\n+import org.apache.iceberg.TableMetadata;\n+import org.apache.iceberg.TableOperations;\n+import org.apache.iceberg.catalog.Namespace;\n+import org.apache.iceberg.catalog.SupportsNamespaces;\n+import org.apache.iceberg.catalog.TableIdentifier;\n+import org.apache.iceberg.exceptions.AlreadyExistsException;\n+import org.apache.iceberg.exceptions.NamespaceNotEmptyException;\n+import org.apache.iceberg.exceptions.NoSuchNamespaceException;\n+import org.apache.iceberg.exceptions.NoSuchTableException;\n+import org.apache.iceberg.relocated.com.google.common.base.Preconditions;\n+import org.apache.iceberg.relocated.com.google.common.collect.Lists;\n+import org.apache.iceberg.relocated.com.google.common.collect.Maps;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import software.amazon.awssdk.services.glue.GlueClient;\n+import software.amazon.awssdk.services.glue.model.CreateDatabaseRequest;\n+import software.amazon.awssdk.services.glue.model.CreateTableRequest;\n+import software.amazon.awssdk.services.glue.model.DeleteDatabaseRequest;\n+import software.amazon.awssdk.services.glue.model.DeleteTableRequest;\n+import software.amazon.awssdk.services.glue.model.EntityNotFoundException;\n+import software.amazon.awssdk.services.glue.model.GetDatabaseRequest;\n+import software.amazon.awssdk.services.glue.model.GetDatabaseResponse;\n+import software.amazon.awssdk.services.glue.model.GetDatabasesRequest;\n+import software.amazon.awssdk.services.glue.model.GetDatabasesResponse;\n+import software.amazon.awssdk.services.glue.model.GetTableRequest;\n+import software.amazon.awssdk.services.glue.model.GetTableResponse;\n+import software.amazon.awssdk.services.glue.model.GetTablesRequest;\n+import software.amazon.awssdk.services.glue.model.GetTablesResponse;\n+import software.amazon.awssdk.services.glue.model.InvalidInputException;\n+import software.amazon.awssdk.services.glue.model.Table;\n+import software.amazon.awssdk.services.glue.model.TableInput;\n+import software.amazon.awssdk.services.glue.model.UpdateDatabaseRequest;\n+\n+public class GlueCatalog extends BaseMetastoreCatalog implements Closeable, SupportsNamespaces {\n+\n+  private static final Logger LOG = LoggerFactory.getLogger(GlueCatalog.class);\n+\n+  private final Configuration conf;\n+  private final GlueClient glue;\n+  private final String catalogId;\n+  private final String catalogName;\n+  private final String warehousePath;\n+\n+  /**\n+   * Constructor with default glue client\n+   * @param conf Hadoop config, passed in for users of HadoopIO\n+   * @param catalogId Glue catalog ID, which is the AWS account ID. When null, it uses the account of the Glue client.\n+   * @param warehousePath warehouse path, such as s3://my-iceberg-bucket/metadata_prod\n+   */\n+  public GlueCatalog(Configuration conf, String catalogId, String warehousePath) {\n+    this(conf, GlueClient.create(), catalogId, warehousePath);\n+  }\n+\n+  @Override\n+  public String name() {\n+    return catalogName;\n+  }\n+\n+  /**\n+   * All-arg constructor\n+   * @param conf Hadoop config, passed in for users of HadoopIO\n+   * @param glue Glue client\n+   * @param catalogId Glue catalog ID, which is the AWS account ID. When null, it uses the account of the Glue client.\n+   * @param warehousePath warehouse path, such as s3://my-iceberg-bucket/metadata_prod\n+   */\n+  public GlueCatalog(Configuration conf, GlueClient glue, String catalogId, String warehousePath) {\n+    this.conf = Preconditions.checkNotNull(conf, \"Cannot initialize GlueCatalog because Hadoop config is null\");\n+    this.glue = Preconditions.checkNotNull(glue, \"Cannot initialize GlueCatalog because GlueClient is null\");\n+    this.catalogId = catalogId;\n+    this.catalogName = \"glue.\" + catalogId; // for logging purpose\n+    this.warehousePath = warehousePath;\n+    validateWarehousePath();\n+  }\n+\n+  private void validateWarehousePath() {\n+    Preconditions.checkArgument(warehousePath != null && warehousePath.length() > 0,\n+        \"Cannot initialize GlueCatalog because warehousePath must not be null\");\n+    Preconditions.checkArgument(warehousePath.charAt(warehousePath.length() - 1) != '/',\n+        \"Cannot initialize GlueCatalog because warehousePath %s must not end with /\", warehousePath);\n+  }\n+\n+  @Override\n+  public void close() throws IOException {\n+    glue.close();\n+  }\n+\n+  @Override\n+  protected TableOperations newTableOps(TableIdentifier tableIdentifier) {\n+    return new GlueTableOperations(conf, glue, catalogId, tableIdentifier);\n+  }\n+\n+  /**\n+   * This method produces the same result as using a HiveCatalog.\n+   * If databaseUri exists for the Glue database URI, the default location is databaseUri/tableName.\n+   * If not, the default location is warehousePath/databaseName.db/tableName\n+   * @param tableIdentifier table id\n+   * @return default warehouse path\n+   */\n+  @Override\n+  protected String defaultWarehouseLocation(TableIdentifier tableIdentifier) {\n+    // check if value is set in database\n+    GetDatabaseResponse response = glue.getDatabase(GetDatabaseRequest.builder()\n+        .name(IcebergToGlueConverter.getDatabaseName(tableIdentifier))\n+        .build());\n+    String dbLocationUri = response.database().locationUri();\n+    if (dbLocationUri != null) {\n+      return String.format(\"%s/%s\", dbLocationUri, tableIdentifier.name());\n+    }\n+    return String.format(\n+        \"%s/%s.db/%s\",\n+        warehousePath,\n+        IcebergToGlueConverter.getDatabaseName(tableIdentifier),\n+        tableIdentifier.name());\n+  }\n+\n+  @Override\n+  public List<TableIdentifier> listTables(Namespace namespace) {\n+    namespaceExists(namespace);\n+    // should be safe to list all before returning the list, instead of dynamically load the list.\n+    String nextToken = null;\n+    List<TableIdentifier> results = new ArrayList<>();\n+    do {\n+      GetTablesResponse response = glue.getTables(GetTablesRequest.builder()\n+          .catalogId(catalogId)\n+          .databaseName(IcebergToGlueConverter.toDatabaseName(namespace))\n+          .nextToken(nextToken)\n+          .build());\n+      if (response.hasTableList()) {\n+        results.addAll(response.tableList().stream()\n+            .map(GlueToIcebergConverter::toTableId)\n+            .collect(Collectors.toList()));\n+        nextToken = response.nextToken();\n+      }\n+    } while (nextToken != null);\n+    LOG.debug(\"Listing of namespace: {} resulted in the following tables: {}\", namespace, results);\n+    return results;\n+  }\n+\n+  @Override\n+  public boolean dropTable(TableIdentifier identifier, boolean purge) {\n+    try {\n+      TableOperations ops = newTableOps(identifier);\n+      TableMetadata lastMetadata = ops.current() != null ? ops.current() : null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a90dfa07d4285f46993dfcb22777801a55d7c4de"}, "originalPosition": 175}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDQ1MjY5Mg==", "bodyText": "Sorry for coming back to this again, I wonder if it's worth adding a try catch block here and try recreating the old fromTable if this throws, so that for validation errors we didn't detect earlier or transient glue 5xx error we still could restore the table to the old state", "url": "https://github.com/apache/iceberg/pull/1633#discussion_r510452692", "createdAt": "2020-10-22T20:57:54Z", "author": {"login": "yyanyy"}, "path": "aws/src/main/java/org/apache/iceberg/aws/glue/GlueCatalog.java", "diffHunk": "@@ -0,0 +1,351 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.aws.glue;\n+\n+import java.io.Closeable;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import org.apache.commons.collections.CollectionUtils;\n+import org.apache.hadoop.conf.Configuration;\n+import org.apache.iceberg.BaseMetastoreCatalog;\n+import org.apache.iceberg.CatalogUtil;\n+import org.apache.iceberg.TableMetadata;\n+import org.apache.iceberg.TableOperations;\n+import org.apache.iceberg.catalog.Namespace;\n+import org.apache.iceberg.catalog.SupportsNamespaces;\n+import org.apache.iceberg.catalog.TableIdentifier;\n+import org.apache.iceberg.exceptions.AlreadyExistsException;\n+import org.apache.iceberg.exceptions.NamespaceNotEmptyException;\n+import org.apache.iceberg.exceptions.NoSuchNamespaceException;\n+import org.apache.iceberg.exceptions.NoSuchTableException;\n+import org.apache.iceberg.relocated.com.google.common.base.Preconditions;\n+import org.apache.iceberg.relocated.com.google.common.collect.Lists;\n+import org.apache.iceberg.relocated.com.google.common.collect.Maps;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import software.amazon.awssdk.services.glue.GlueClient;\n+import software.amazon.awssdk.services.glue.model.CreateDatabaseRequest;\n+import software.amazon.awssdk.services.glue.model.CreateTableRequest;\n+import software.amazon.awssdk.services.glue.model.DeleteDatabaseRequest;\n+import software.amazon.awssdk.services.glue.model.DeleteTableRequest;\n+import software.amazon.awssdk.services.glue.model.EntityNotFoundException;\n+import software.amazon.awssdk.services.glue.model.GetDatabaseRequest;\n+import software.amazon.awssdk.services.glue.model.GetDatabaseResponse;\n+import software.amazon.awssdk.services.glue.model.GetDatabasesRequest;\n+import software.amazon.awssdk.services.glue.model.GetDatabasesResponse;\n+import software.amazon.awssdk.services.glue.model.GetTableRequest;\n+import software.amazon.awssdk.services.glue.model.GetTableResponse;\n+import software.amazon.awssdk.services.glue.model.GetTablesRequest;\n+import software.amazon.awssdk.services.glue.model.GetTablesResponse;\n+import software.amazon.awssdk.services.glue.model.InvalidInputException;\n+import software.amazon.awssdk.services.glue.model.Table;\n+import software.amazon.awssdk.services.glue.model.TableInput;\n+import software.amazon.awssdk.services.glue.model.UpdateDatabaseRequest;\n+\n+public class GlueCatalog extends BaseMetastoreCatalog implements Closeable, SupportsNamespaces {\n+\n+  private static final Logger LOG = LoggerFactory.getLogger(GlueCatalog.class);\n+\n+  private final Configuration conf;\n+  private final GlueClient glue;\n+  private final String catalogId;\n+  private final String catalogName;\n+  private final String warehousePath;\n+\n+  /**\n+   * Constructor with default glue client\n+   * @param conf Hadoop config, passed in for users of HadoopIO\n+   * @param catalogId Glue catalog ID, which is the AWS account ID. When null, it uses the account of the Glue client.\n+   * @param warehousePath warehouse path, such as s3://my-iceberg-bucket/metadata_prod\n+   */\n+  public GlueCatalog(Configuration conf, String catalogId, String warehousePath) {\n+    this(conf, GlueClient.create(), catalogId, warehousePath);\n+  }\n+\n+  @Override\n+  public String name() {\n+    return catalogName;\n+  }\n+\n+  /**\n+   * All-arg constructor\n+   * @param conf Hadoop config, passed in for users of HadoopIO\n+   * @param glue Glue client\n+   * @param catalogId Glue catalog ID, which is the AWS account ID. When null, it uses the account of the Glue client.\n+   * @param warehousePath warehouse path, such as s3://my-iceberg-bucket/metadata_prod\n+   */\n+  public GlueCatalog(Configuration conf, GlueClient glue, String catalogId, String warehousePath) {\n+    this.conf = Preconditions.checkNotNull(conf, \"Cannot initialize GlueCatalog because Hadoop config is null\");\n+    this.glue = Preconditions.checkNotNull(glue, \"Cannot initialize GlueCatalog because GlueClient is null\");\n+    this.catalogId = catalogId;\n+    this.catalogName = \"glue.\" + catalogId; // for logging purpose\n+    this.warehousePath = warehousePath;\n+    validateWarehousePath();\n+  }\n+\n+  private void validateWarehousePath() {\n+    Preconditions.checkArgument(warehousePath != null && warehousePath.length() > 0,\n+        \"Cannot initialize GlueCatalog because warehousePath must not be null\");\n+    Preconditions.checkArgument(warehousePath.charAt(warehousePath.length() - 1) != '/',\n+        \"Cannot initialize GlueCatalog because warehousePath %s must not end with /\", warehousePath);\n+  }\n+\n+  @Override\n+  public void close() throws IOException {\n+    glue.close();\n+  }\n+\n+  @Override\n+  protected TableOperations newTableOps(TableIdentifier tableIdentifier) {\n+    return new GlueTableOperations(conf, glue, catalogId, tableIdentifier);\n+  }\n+\n+  /**\n+   * This method produces the same result as using a HiveCatalog.\n+   * If databaseUri exists for the Glue database URI, the default location is databaseUri/tableName.\n+   * If not, the default location is warehousePath/databaseName.db/tableName\n+   * @param tableIdentifier table id\n+   * @return default warehouse path\n+   */\n+  @Override\n+  protected String defaultWarehouseLocation(TableIdentifier tableIdentifier) {\n+    // check if value is set in database\n+    GetDatabaseResponse response = glue.getDatabase(GetDatabaseRequest.builder()\n+        .name(IcebergToGlueConverter.getDatabaseName(tableIdentifier))\n+        .build());\n+    String dbLocationUri = response.database().locationUri();\n+    if (dbLocationUri != null) {\n+      return String.format(\"%s/%s\", dbLocationUri, tableIdentifier.name());\n+    }\n+    return String.format(\n+        \"%s/%s.db/%s\",\n+        warehousePath,\n+        IcebergToGlueConverter.getDatabaseName(tableIdentifier),\n+        tableIdentifier.name());\n+  }\n+\n+  @Override\n+  public List<TableIdentifier> listTables(Namespace namespace) {\n+    namespaceExists(namespace);\n+    // should be safe to list all before returning the list, instead of dynamically load the list.\n+    String nextToken = null;\n+    List<TableIdentifier> results = new ArrayList<>();\n+    do {\n+      GetTablesResponse response = glue.getTables(GetTablesRequest.builder()\n+          .catalogId(catalogId)\n+          .databaseName(IcebergToGlueConverter.toDatabaseName(namespace))\n+          .nextToken(nextToken)\n+          .build());\n+      if (response.hasTableList()) {\n+        results.addAll(response.tableList().stream()\n+            .map(GlueToIcebergConverter::toTableId)\n+            .collect(Collectors.toList()));\n+        nextToken = response.nextToken();\n+      }\n+    } while (nextToken != null);\n+    LOG.debug(\"Listing of namespace: {} resulted in the following tables: {}\", namespace, results);\n+    return results;\n+  }\n+\n+  @Override\n+  public boolean dropTable(TableIdentifier identifier, boolean purge) {\n+    try {\n+      TableOperations ops = newTableOps(identifier);\n+      TableMetadata lastMetadata = ops.current() != null ? ops.current() : null;\n+      glue.deleteTable(DeleteTableRequest.builder()\n+          .catalogId(catalogId)\n+          .databaseName(IcebergToGlueConverter.getDatabaseName(identifier))\n+          .name(identifier.name())\n+          .build());\n+      LOG.info(\"Successfully dropped table {} from Glue\", identifier);\n+      if (purge && lastMetadata != null) {\n+        CatalogUtil.dropTableData(ops.io(), lastMetadata);\n+        LOG.info(\"Glue table {} data purged\", identifier);\n+      }\n+      LOG.info(\"Dropped table: {}\", identifier);\n+      return true;\n+    } catch (EntityNotFoundException e) {\n+      LOG.error(\"Cannot drop table {} because table not found or not accessible\", identifier, e);\n+      return false;\n+    } catch (Exception e) {\n+      LOG.error(\"Cannot complete drop table operation for {} due to unexpected exception\", identifier, e);\n+      throw e;\n+    }\n+  }\n+\n+  /**\n+   * Rename table in Glue is a drop table and create table.\n+   * @param from identifier of the table to rename\n+   * @param to new table name\n+   */\n+  @Override\n+  public void renameTable(TableIdentifier from, TableIdentifier to) {\n+    // check new namespace exists\n+    if (!namespaceExists(to.namespace())) {\n+      throw new NoSuchNamespaceException(\"Cannot rename %s to %s because namespace %s does not exist\",\n+          from, to, to.namespace());\n+    }\n+    // keep metadata\n+    Table fromTable = null;\n+    try {\n+      GetTableResponse response = glue.getTable(GetTableRequest.builder()\n+          .catalogId(catalogId)\n+          .databaseName(IcebergToGlueConverter.getDatabaseName(from))\n+          .name(IcebergToGlueConverter.getTableName(from))\n+          .build());\n+      fromTable = response.table();\n+    } catch (EntityNotFoundException e) {\n+      throw new NoSuchTableException(e, \"Cannot rename %s because the table does not exist in Glue\", from);\n+    }\n+    dropTable(from, false);\n+    // use the same Glue info to create the new table, pointing to the old metadata\n+    glue.createTable(CreateTableRequest.builder()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a90dfa07d4285f46993dfcb22777801a55d7c4de"}, "originalPosition": 223}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDQ1MzI5Mg==", "bodyText": "do we want to/is it easy to test the purge parameter?", "url": "https://github.com/apache/iceberg/pull/1633#discussion_r510453292", "createdAt": "2020-10-22T20:59:01Z", "author": {"login": "yyanyy"}, "path": "aws/src/test/java/org/apache/iceberg/aws/glue/TestGlueCatalogInteg.java", "diffHunk": "@@ -0,0 +1,271 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.aws.glue;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.UUID;\n+import java.util.stream.Collectors;\n+import org.apache.hadoop.conf.Configuration;\n+import org.apache.iceberg.AssertHelpers;\n+import org.apache.iceberg.BaseMetastoreTableOperations;\n+import org.apache.iceberg.DataFile;\n+import org.apache.iceberg.DataFiles;\n+import org.apache.iceberg.PartitionSpec;\n+import org.apache.iceberg.Schema;\n+import org.apache.iceberg.Table;\n+import org.apache.iceberg.TableMetadata;\n+import org.apache.iceberg.TableOperations;\n+import org.apache.iceberg.catalog.Namespace;\n+import org.apache.iceberg.catalog.TableIdentifier;\n+import org.apache.iceberg.exceptions.AlreadyExistsException;\n+import org.apache.iceberg.exceptions.NoSuchNamespaceException;\n+import org.apache.iceberg.exceptions.NoSuchTableException;\n+import org.apache.iceberg.relocated.com.google.common.collect.Sets;\n+import org.apache.iceberg.types.Types;\n+import org.junit.AfterClass;\n+import org.junit.Assert;\n+import org.junit.BeforeClass;\n+import org.junit.Ignore;\n+import org.junit.Test;\n+import software.amazon.awssdk.services.glue.GlueClient;\n+import software.amazon.awssdk.services.glue.model.Database;\n+import software.amazon.awssdk.services.glue.model.DeleteDatabaseRequest;\n+import software.amazon.awssdk.services.glue.model.EntityNotFoundException;\n+import software.amazon.awssdk.services.glue.model.GetDatabaseRequest;\n+import software.amazon.awssdk.services.glue.model.GetTableRequest;\n+import software.amazon.awssdk.services.glue.model.GetTableResponse;\n+import software.amazon.awssdk.services.s3.S3Client;\n+import software.amazon.awssdk.services.s3.model.Delete;\n+import software.amazon.awssdk.services.s3.model.DeleteObjectsRequest;\n+import software.amazon.awssdk.services.s3.model.HeadObjectRequest;\n+import software.amazon.awssdk.services.s3.model.ListObjectsV2Request;\n+import software.amazon.awssdk.services.s3.model.ListObjectsV2Response;\n+import software.amazon.awssdk.services.s3.model.ObjectIdentifier;\n+\n+@Ignore\n+public class TestGlueCatalogInteg {\n+\n+  private static final List<String> NAMESPACES = new ArrayList<>();\n+  private static final GlueClient GLUE = GlueClient.create();\n+  private static final S3Client S3 = S3Client.create();\n+  private static final String BUCKET = System.getenv(\"GLUE_BUCKET\");\n+  private static GlueCatalog glueCatalog;\n+\n+  @BeforeClass\n+  public static void beforeClass() {\n+    Configuration configuration = new Configuration();\n+    // Iceberg uses Hadoop 2.7.3, and the hadoop-aws module does not support reading environment variable yet\n+    configuration.set(\"fs.s3a.access.key\", System.getenv(\"AWS_ACCESS_KEY_ID\"));\n+    configuration.set(\"fs.s3a.secret.key\", System.getenv(\"AWS_SECRET_ACCESS_KEY\"));\n+    glueCatalog = new GlueCatalog(configuration, GLUE, null, \"s3a://\" + BUCKET);\n+  }\n+\n+  @AfterClass\n+  public static void afterClass() {\n+    for (String namespace : NAMESPACES) {\n+      try {\n+        // delete db also delete tables\n+        GLUE.deleteDatabase(DeleteDatabaseRequest.builder().name(namespace).build());\n+      } catch (Exception e) {\n+        // pass\n+      }\n+    }\n+    boolean hasContent = true;\n+    while (hasContent) {\n+      ListObjectsV2Response response = S3.listObjectsV2(ListObjectsV2Request.builder().bucket(BUCKET).build());\n+      hasContent = response.hasContents();\n+      if (hasContent) {\n+        S3.deleteObjects(DeleteObjectsRequest.builder().bucket(BUCKET).delete(Delete.builder().objects(\n+            response.contents().stream()\n+                .map(obj -> ObjectIdentifier.builder().key(obj.key()).build())\n+                .collect(Collectors.toList())\n+        ).build()).build());\n+      }\n+    }\n+  }\n+\n+  @Test\n+  public void testNamespace() {\n+    // create ns\n+    String namespace = getRandomName();\n+    NAMESPACES.add(namespace);\n+    glueCatalog.createNamespace(Namespace.of(namespace));\n+    Database database = GLUE.getDatabase(GetDatabaseRequest.builder().name(namespace).build()).database();\n+    Assert.assertEquals(namespace, database.name());\n+    // list all\n+    List<Namespace> namespaceList = glueCatalog.listNamespaces();\n+    Assert.assertTrue(namespaceList.size() > 0);\n+    Assert.assertTrue(namespaceList.contains(Namespace.of(namespace)));\n+    // list self\n+    namespaceList = glueCatalog.listNamespaces(Namespace.of(namespace));\n+    Assert.assertEquals(1, namespaceList.size());\n+    Assert.assertEquals(namespace, IcebergToGlueConverter.toDatabaseName(namespaceList.get(0)));\n+    Map<String, String> properties = new HashMap<>();\n+    properties.put(\"key\", \"val\");\n+    properties.put(\"key2\", \"val2\");\n+    // set properties\n+    glueCatalog.setProperties(Namespace.of(namespace), properties);\n+    database = GLUE.getDatabase(GetDatabaseRequest.builder().name(namespace).build()).database();\n+    Assert.assertTrue(database.parameters().containsKey(\"key\"));\n+    Assert.assertEquals(\"val\", database.parameters().get(\"key\"));\n+    Assert.assertTrue(database.parameters().containsKey(\"key2\"));\n+    Assert.assertEquals(\"val2\", database.parameters().get(\"key2\"));\n+    // remove properties\n+    glueCatalog.removeProperties(Namespace.of(namespace), Sets.newHashSet(\"key\"));\n+    database = GLUE.getDatabase(GetDatabaseRequest.builder().name(namespace).build()).database();\n+    Assert.assertFalse(database.parameters().containsKey(\"key\"));\n+    Assert.assertTrue(database.parameters().containsKey(\"key2\"));\n+    Assert.assertEquals(\"val2\", database.parameters().get(\"key2\"));\n+    // add back property\n+    properties = new HashMap<>();\n+    properties.put(\"key\", \"val\");\n+    glueCatalog.setProperties(Namespace.of(namespace), properties);\n+    database = GLUE.getDatabase(GetDatabaseRequest.builder().name(namespace).build()).database();\n+    Assert.assertTrue(database.parameters().containsKey(\"key\"));\n+    Assert.assertEquals(\"val\", database.parameters().get(\"key\"));\n+    Assert.assertTrue(database.parameters().containsKey(\"key2\"));\n+    Assert.assertEquals(\"val2\", database.parameters().get(\"key2\"));\n+    // duplicate\n+    AssertHelpers.assertThrows(\"should not create namespace with the same name\",\n+        AlreadyExistsException.class,\n+        () -> glueCatalog.createNamespace(Namespace.of(namespace)));\n+    // bad name\n+    AssertHelpers.assertThrows(\"should not create namespace with bad name\",\n+        NoSuchNamespaceException.class,\n+        () -> glueCatalog.createNamespace(Namespace.of(\"db-1\")));\n+    // drop namespace\n+    glueCatalog.dropNamespace(Namespace.of(namespace));\n+    AssertHelpers.assertThrows(\"namespace should not exist after deletion\",\n+        EntityNotFoundException.class,\n+        () -> GLUE.getDatabase(GetDatabaseRequest.builder().name(namespace).build()));\n+  }\n+\n+  @Test\n+  public void testCreateTable() {\n+    // create ns\n+    String namespace = getRandomName();\n+    NAMESPACES.add(namespace);\n+    glueCatalog.createNamespace(Namespace.of(namespace));\n+    // exists\n+    Assert.assertTrue(glueCatalog.namespaceExists(Namespace.of(namespace)));\n+    // list table should have nothing\n+    Assert.assertTrue(glueCatalog.listTables(Namespace.of(namespace)).isEmpty());\n+    // create table\n+    Schema schema = new Schema(Types.NestedField.required(1, \"c1\", Types.StringType.get(), \"c1\"));\n+    PartitionSpec partitionSpec = PartitionSpec.builderFor(schema).build();\n+    String tableName = getRandomName();\n+    glueCatalog.createTable(TableIdentifier.of(namespace, tableName), schema, partitionSpec);\n+    GetTableResponse response = GLUE.getTable(GetTableRequest.builder()\n+        .databaseName(namespace).name(tableName).build());\n+    Assert.assertEquals(namespace, response.table().databaseName());\n+    Assert.assertEquals(tableName, response.table().name());\n+    Assert.assertEquals(BaseMetastoreTableOperations.ICEBERG_TABLE_TYPE_VALUE.toUpperCase(Locale.ENGLISH),\n+        response.table().parameters().get(BaseMetastoreTableOperations.TABLE_TYPE_PROP));\n+    Assert.assertTrue(response.table().parameters().containsKey(BaseMetastoreTableOperations.METADATA_LOCATION_PROP));\n+    String metaLocation = response.table().parameters().get(BaseMetastoreTableOperations.METADATA_LOCATION_PROP);\n+    String key = metaLocation.split(BUCKET)[1].substring(1);\n+    S3.headObject(HeadObjectRequest.builder().bucket(BUCKET).key(key).build());\n+    // exists\n+    Assert.assertTrue(glueCatalog.tableExists(TableIdentifier.of(namespace, tableName)));\n+    // load\n+    Table table = glueCatalog.loadTable(TableIdentifier.of(namespace, tableName));\n+    Assert.assertEquals(partitionSpec, table.spec());\n+    Assert.assertEquals(schema.toString(), table.schema().toString());\n+    // list table should show\n+    List<TableIdentifier> tables = glueCatalog.listTables(Namespace.of(namespace));\n+    Assert.assertEquals(1, tables.size());\n+    Assert.assertEquals(TableIdentifier.of(namespace, tableName), tables.get(0));\n+    // duplicate\n+    AssertHelpers.assertThrows(\"should not create table with the same name\",\n+        AlreadyExistsException.class,\n+        () -> glueCatalog.createTable(TableIdentifier.of(namespace, tableName), schema, partitionSpec));\n+    // bad name\n+    AssertHelpers.assertThrows(\"should not create table with bad name\",\n+        IllegalArgumentException.class,\n+        () -> glueCatalog.createTable(TableIdentifier.of(namespace, \"table-1\"), schema, partitionSpec));\n+    // drop\n+    glueCatalog.dropTable(TableIdentifier.of(namespace, tableName));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a90dfa07d4285f46993dfcb22777801a55d7c4de"}, "originalPosition": 208}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE4ODczNTQz", "url": "https://github.com/apache/iceberg/pull/1633#pullrequestreview-518873543", "createdAt": "2020-10-28T16:44:27Z", "commit": {"oid": "bdb4dd597475c06cfc31080f01712ef6a9d8a7e6"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxNjo0NDoyN1rOHpznvg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxNjo0NDoyN1rOHpznvg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzU5OTQyMg==", "bodyText": "Why not just remove the trailing /?", "url": "https://github.com/apache/iceberg/pull/1633#discussion_r513599422", "createdAt": "2020-10-28T16:44:27Z", "author": {"login": "rdblue"}, "path": "aws/src/main/java/org/apache/iceberg/aws/glue/GlueCatalog.java", "diffHunk": "@@ -0,0 +1,398 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.aws.glue;\n+\n+import java.io.Closeable;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import org.apache.commons.collections.CollectionUtils;\n+import org.apache.hadoop.conf.Configuration;\n+import org.apache.iceberg.BaseMetastoreCatalog;\n+import org.apache.iceberg.CatalogUtil;\n+import org.apache.iceberg.TableMetadata;\n+import org.apache.iceberg.TableOperations;\n+import org.apache.iceberg.aws.IcebergAWSConfigs;\n+import org.apache.iceberg.catalog.Namespace;\n+import org.apache.iceberg.catalog.SupportsNamespaces;\n+import org.apache.iceberg.catalog.TableIdentifier;\n+import org.apache.iceberg.exceptions.AlreadyExistsException;\n+import org.apache.iceberg.exceptions.NamespaceNotEmptyException;\n+import org.apache.iceberg.exceptions.NoSuchNamespaceException;\n+import org.apache.iceberg.exceptions.NoSuchTableException;\n+import org.apache.iceberg.relocated.com.google.common.base.Preconditions;\n+import org.apache.iceberg.relocated.com.google.common.collect.Lists;\n+import org.apache.iceberg.relocated.com.google.common.collect.Maps;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import software.amazon.awssdk.awscore.exception.AwsServiceException;\n+import software.amazon.awssdk.services.glue.GlueClient;\n+import software.amazon.awssdk.services.glue.model.CreateDatabaseRequest;\n+import software.amazon.awssdk.services.glue.model.CreateTableRequest;\n+import software.amazon.awssdk.services.glue.model.DeleteDatabaseRequest;\n+import software.amazon.awssdk.services.glue.model.DeleteTableRequest;\n+import software.amazon.awssdk.services.glue.model.EntityNotFoundException;\n+import software.amazon.awssdk.services.glue.model.GetDatabaseRequest;\n+import software.amazon.awssdk.services.glue.model.GetDatabaseResponse;\n+import software.amazon.awssdk.services.glue.model.GetDatabasesRequest;\n+import software.amazon.awssdk.services.glue.model.GetDatabasesResponse;\n+import software.amazon.awssdk.services.glue.model.GetTableRequest;\n+import software.amazon.awssdk.services.glue.model.GetTableResponse;\n+import software.amazon.awssdk.services.glue.model.GetTablesRequest;\n+import software.amazon.awssdk.services.glue.model.GetTablesResponse;\n+import software.amazon.awssdk.services.glue.model.InvalidInputException;\n+import software.amazon.awssdk.services.glue.model.Table;\n+import software.amazon.awssdk.services.glue.model.TableInput;\n+import software.amazon.awssdk.services.glue.model.UpdateDatabaseRequest;\n+\n+public class GlueCatalog extends BaseMetastoreCatalog implements Closeable, SupportsNamespaces {\n+\n+  private static final Logger LOG = LoggerFactory.getLogger(GlueCatalog.class);\n+\n+  private final Configuration conf;\n+  private final GlueClient glue;\n+  private final String catalogId;\n+  private final String catalogName;\n+  private final String warehousePath;\n+  private final boolean skipArchive;\n+\n+  /**\n+   * Constructor that initializes all args from Hadoop configuration, used by engines like Spark and Flink\n+   * @param conf Hadoop config passed from engines\n+   */\n+  public GlueCatalog(Configuration conf) {\n+    this(\n+        conf,\n+        conf.get(IcebergAWSConfigs.ICEBERG_AWS_GLUE_CATALOG_ID),\n+        conf.get(IcebergAWSConfigs.ICEBERG_AWS_GLUE_WAREHOUSE_PATH),\n+        conf.getBoolean(IcebergAWSConfigs.ICEBERG_AWS_GLUE_SKIP_ARCHIVE,\n+            IcebergAWSConfigs.ICEBERG_AWS_GLUE_SKIP_ARCHIVE_DEFAULT)\n+    );\n+  }\n+\n+  /**\n+   * Constructor with default glue client\n+   * @param conf Hadoop config, passed in for users of HadoopIO\n+   * @param catalogId Glue catalog ID, which is the AWS account ID. When null, it uses the account of the Glue client.\n+   * @param warehousePath warehouse path, such as s3://my-iceberg-bucket/metadata_prod\n+   * @param skipArchive if Glue should skip an old table version when creating a new version in a commit.\n+   *                    By default Glue archives all old table versions after an UpdateTable call.\n+   *                    but Glue has a default max number of archived table versions (can be increased).\n+   *                    So for streaming use case with lots of commits, it is recommended to turn this feature off.\n+   */\n+  public GlueCatalog(\n+      Configuration conf,\n+      String catalogId,\n+      String warehousePath,\n+      boolean skipArchive) {\n+    this(conf, GlueClient.create(), catalogId, warehousePath, skipArchive);\n+  }\n+\n+  @Override\n+  public String name() {\n+    return catalogName;\n+  }\n+\n+  /**\n+   * All-arg constructor\n+   * @param conf Hadoop config, passed in for users of HadoopIO\n+   * @param glue Glue client\n+   * @param catalogId Glue catalog ID, which is the AWS account ID. When null, it uses the account of the Glue client.\n+   * @param warehousePath warehouse path, such as s3://my-iceberg-bucket/metadata_prod\n+   * @param skipArchive if Glue should skip an old table version when creating a new version in a commit.\n+   *                    By default Glue archives all old table versions after an UpdateTable call.\n+   *                    but Glue has a default max number of archived table versions (can be increased).\n+   *                    So for streaming use case with lots of commits, it is recommended to turn this feature off.\n+   */\n+  public GlueCatalog(\n+      Configuration conf,\n+      GlueClient glue,\n+      String catalogId,\n+      String warehousePath,\n+      boolean skipArchive) {\n+    this.conf = Preconditions.checkNotNull(conf, \"Cannot initialize GlueCatalog because Hadoop config is null\");\n+    this.glue = Preconditions.checkNotNull(glue, \"Cannot initialize GlueCatalog because GlueClient is null\");\n+    this.catalogId = catalogId;\n+    this.catalogName = \"glue.\" + catalogId; // for logging purpose\n+    this.warehousePath = warehousePath;\n+    this.skipArchive = skipArchive;\n+    validateWarehousePath();\n+  }\n+\n+  private void validateWarehousePath() {\n+    Preconditions.checkArgument(warehousePath != null && warehousePath.length() > 0,\n+        \"Cannot initialize GlueCatalog because warehousePath must not be null\");\n+    Preconditions.checkArgument(warehousePath.charAt(warehousePath.length() - 1) != '/',\n+        \"Cannot initialize GlueCatalog because warehousePath %s must not end with /\", warehousePath);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bdb4dd597475c06cfc31080f01712ef6a9d8a7e6"}, "originalPosition": 146}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE4ODc0NzE4", "url": "https://github.com/apache/iceberg/pull/1633#pullrequestreview-518874718", "createdAt": "2020-10-28T16:45:30Z", "commit": {"oid": "bdb4dd597475c06cfc31080f01712ef6a9d8a7e6"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxNjo0NTozMVrOHpzq2g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxNjo0NTozMVrOHpzq2g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzYwMDIxOA==", "bodyText": "Nit: we like to use an empty line after control flow statements to space out blocks a bit more.", "url": "https://github.com/apache/iceberg/pull/1633#discussion_r513600218", "createdAt": "2020-10-28T16:45:31Z", "author": {"login": "rdblue"}, "path": "aws/src/main/java/org/apache/iceberg/aws/glue/GlueCatalog.java", "diffHunk": "@@ -0,0 +1,398 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.aws.glue;\n+\n+import java.io.Closeable;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import org.apache.commons.collections.CollectionUtils;\n+import org.apache.hadoop.conf.Configuration;\n+import org.apache.iceberg.BaseMetastoreCatalog;\n+import org.apache.iceberg.CatalogUtil;\n+import org.apache.iceberg.TableMetadata;\n+import org.apache.iceberg.TableOperations;\n+import org.apache.iceberg.aws.IcebergAWSConfigs;\n+import org.apache.iceberg.catalog.Namespace;\n+import org.apache.iceberg.catalog.SupportsNamespaces;\n+import org.apache.iceberg.catalog.TableIdentifier;\n+import org.apache.iceberg.exceptions.AlreadyExistsException;\n+import org.apache.iceberg.exceptions.NamespaceNotEmptyException;\n+import org.apache.iceberg.exceptions.NoSuchNamespaceException;\n+import org.apache.iceberg.exceptions.NoSuchTableException;\n+import org.apache.iceberg.relocated.com.google.common.base.Preconditions;\n+import org.apache.iceberg.relocated.com.google.common.collect.Lists;\n+import org.apache.iceberg.relocated.com.google.common.collect.Maps;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import software.amazon.awssdk.awscore.exception.AwsServiceException;\n+import software.amazon.awssdk.services.glue.GlueClient;\n+import software.amazon.awssdk.services.glue.model.CreateDatabaseRequest;\n+import software.amazon.awssdk.services.glue.model.CreateTableRequest;\n+import software.amazon.awssdk.services.glue.model.DeleteDatabaseRequest;\n+import software.amazon.awssdk.services.glue.model.DeleteTableRequest;\n+import software.amazon.awssdk.services.glue.model.EntityNotFoundException;\n+import software.amazon.awssdk.services.glue.model.GetDatabaseRequest;\n+import software.amazon.awssdk.services.glue.model.GetDatabaseResponse;\n+import software.amazon.awssdk.services.glue.model.GetDatabasesRequest;\n+import software.amazon.awssdk.services.glue.model.GetDatabasesResponse;\n+import software.amazon.awssdk.services.glue.model.GetTableRequest;\n+import software.amazon.awssdk.services.glue.model.GetTableResponse;\n+import software.amazon.awssdk.services.glue.model.GetTablesRequest;\n+import software.amazon.awssdk.services.glue.model.GetTablesResponse;\n+import software.amazon.awssdk.services.glue.model.InvalidInputException;\n+import software.amazon.awssdk.services.glue.model.Table;\n+import software.amazon.awssdk.services.glue.model.TableInput;\n+import software.amazon.awssdk.services.glue.model.UpdateDatabaseRequest;\n+\n+public class GlueCatalog extends BaseMetastoreCatalog implements Closeable, SupportsNamespaces {\n+\n+  private static final Logger LOG = LoggerFactory.getLogger(GlueCatalog.class);\n+\n+  private final Configuration conf;\n+  private final GlueClient glue;\n+  private final String catalogId;\n+  private final String catalogName;\n+  private final String warehousePath;\n+  private final boolean skipArchive;\n+\n+  /**\n+   * Constructor that initializes all args from Hadoop configuration, used by engines like Spark and Flink\n+   * @param conf Hadoop config passed from engines\n+   */\n+  public GlueCatalog(Configuration conf) {\n+    this(\n+        conf,\n+        conf.get(IcebergAWSConfigs.ICEBERG_AWS_GLUE_CATALOG_ID),\n+        conf.get(IcebergAWSConfigs.ICEBERG_AWS_GLUE_WAREHOUSE_PATH),\n+        conf.getBoolean(IcebergAWSConfigs.ICEBERG_AWS_GLUE_SKIP_ARCHIVE,\n+            IcebergAWSConfigs.ICEBERG_AWS_GLUE_SKIP_ARCHIVE_DEFAULT)\n+    );\n+  }\n+\n+  /**\n+   * Constructor with default glue client\n+   * @param conf Hadoop config, passed in for users of HadoopIO\n+   * @param catalogId Glue catalog ID, which is the AWS account ID. When null, it uses the account of the Glue client.\n+   * @param warehousePath warehouse path, such as s3://my-iceberg-bucket/metadata_prod\n+   * @param skipArchive if Glue should skip an old table version when creating a new version in a commit.\n+   *                    By default Glue archives all old table versions after an UpdateTable call.\n+   *                    but Glue has a default max number of archived table versions (can be increased).\n+   *                    So for streaming use case with lots of commits, it is recommended to turn this feature off.\n+   */\n+  public GlueCatalog(\n+      Configuration conf,\n+      String catalogId,\n+      String warehousePath,\n+      boolean skipArchive) {\n+    this(conf, GlueClient.create(), catalogId, warehousePath, skipArchive);\n+  }\n+\n+  @Override\n+  public String name() {\n+    return catalogName;\n+  }\n+\n+  /**\n+   * All-arg constructor\n+   * @param conf Hadoop config, passed in for users of HadoopIO\n+   * @param glue Glue client\n+   * @param catalogId Glue catalog ID, which is the AWS account ID. When null, it uses the account of the Glue client.\n+   * @param warehousePath warehouse path, such as s3://my-iceberg-bucket/metadata_prod\n+   * @param skipArchive if Glue should skip an old table version when creating a new version in a commit.\n+   *                    By default Glue archives all old table versions after an UpdateTable call.\n+   *                    but Glue has a default max number of archived table versions (can be increased).\n+   *                    So for streaming use case with lots of commits, it is recommended to turn this feature off.\n+   */\n+  public GlueCatalog(\n+      Configuration conf,\n+      GlueClient glue,\n+      String catalogId,\n+      String warehousePath,\n+      boolean skipArchive) {\n+    this.conf = Preconditions.checkNotNull(conf, \"Cannot initialize GlueCatalog because Hadoop config is null\");\n+    this.glue = Preconditions.checkNotNull(glue, \"Cannot initialize GlueCatalog because GlueClient is null\");\n+    this.catalogId = catalogId;\n+    this.catalogName = \"glue.\" + catalogId; // for logging purpose\n+    this.warehousePath = warehousePath;\n+    this.skipArchive = skipArchive;\n+    validateWarehousePath();\n+  }\n+\n+  private void validateWarehousePath() {\n+    Preconditions.checkArgument(warehousePath != null && warehousePath.length() > 0,\n+        \"Cannot initialize GlueCatalog because warehousePath must not be null\");\n+    Preconditions.checkArgument(warehousePath.charAt(warehousePath.length() - 1) != '/',\n+        \"Cannot initialize GlueCatalog because warehousePath %s must not end with /\", warehousePath);\n+  }\n+\n+  @Override\n+  public void close() throws IOException {\n+    glue.close();\n+  }\n+\n+  @Override\n+  protected TableOperations newTableOps(TableIdentifier tableIdentifier) {\n+    return new GlueTableOperations(conf, glue, catalogId, skipArchive, tableIdentifier);\n+  }\n+\n+  /**\n+   * This method produces the same result as using a HiveCatalog.\n+   * If databaseUri exists for the Glue database URI, the default location is databaseUri/tableName.\n+   * If not, the default location is warehousePath/databaseName.db/tableName\n+   * @param tableIdentifier table id\n+   * @return default warehouse path\n+   */\n+  @Override\n+  protected String defaultWarehouseLocation(TableIdentifier tableIdentifier) {\n+    // check if value is set in database\n+    GetDatabaseResponse response = glue.getDatabase(GetDatabaseRequest.builder()\n+        .name(IcebergToGlueConverter.getDatabaseName(tableIdentifier))\n+        .build());\n+    String dbLocationUri = response.database().locationUri();\n+    if (dbLocationUri != null) {\n+      return String.format(\"%s/%s\", dbLocationUri, tableIdentifier.name());\n+    }\n+    return String.format(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bdb4dd597475c06cfc31080f01712ef6a9d8a7e6"}, "originalPosition": 176}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE4ODg4NTE4", "url": "https://github.com/apache/iceberg/pull/1633#pullrequestreview-518888518", "createdAt": "2020-10-28T16:59:27Z", "commit": {"oid": "bdb4dd597475c06cfc31080f01712ef6a9d8a7e6"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxNjo1OToyOFrOHp0Txw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxNjo1OToyOFrOHp0Txw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzYxMDY5NQ==", "bodyText": "Shouldn't this be an empty list? A namespace doesn't contain itself.", "url": "https://github.com/apache/iceberg/pull/1633#discussion_r513610695", "createdAt": "2020-10-28T16:59:28Z", "author": {"login": "rdblue"}, "path": "aws/src/main/java/org/apache/iceberg/aws/glue/GlueCatalog.java", "diffHunk": "@@ -0,0 +1,398 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.aws.glue;\n+\n+import java.io.Closeable;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import org.apache.commons.collections.CollectionUtils;\n+import org.apache.hadoop.conf.Configuration;\n+import org.apache.iceberg.BaseMetastoreCatalog;\n+import org.apache.iceberg.CatalogUtil;\n+import org.apache.iceberg.TableMetadata;\n+import org.apache.iceberg.TableOperations;\n+import org.apache.iceberg.aws.IcebergAWSConfigs;\n+import org.apache.iceberg.catalog.Namespace;\n+import org.apache.iceberg.catalog.SupportsNamespaces;\n+import org.apache.iceberg.catalog.TableIdentifier;\n+import org.apache.iceberg.exceptions.AlreadyExistsException;\n+import org.apache.iceberg.exceptions.NamespaceNotEmptyException;\n+import org.apache.iceberg.exceptions.NoSuchNamespaceException;\n+import org.apache.iceberg.exceptions.NoSuchTableException;\n+import org.apache.iceberg.relocated.com.google.common.base.Preconditions;\n+import org.apache.iceberg.relocated.com.google.common.collect.Lists;\n+import org.apache.iceberg.relocated.com.google.common.collect.Maps;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import software.amazon.awssdk.awscore.exception.AwsServiceException;\n+import software.amazon.awssdk.services.glue.GlueClient;\n+import software.amazon.awssdk.services.glue.model.CreateDatabaseRequest;\n+import software.amazon.awssdk.services.glue.model.CreateTableRequest;\n+import software.amazon.awssdk.services.glue.model.DeleteDatabaseRequest;\n+import software.amazon.awssdk.services.glue.model.DeleteTableRequest;\n+import software.amazon.awssdk.services.glue.model.EntityNotFoundException;\n+import software.amazon.awssdk.services.glue.model.GetDatabaseRequest;\n+import software.amazon.awssdk.services.glue.model.GetDatabaseResponse;\n+import software.amazon.awssdk.services.glue.model.GetDatabasesRequest;\n+import software.amazon.awssdk.services.glue.model.GetDatabasesResponse;\n+import software.amazon.awssdk.services.glue.model.GetTableRequest;\n+import software.amazon.awssdk.services.glue.model.GetTableResponse;\n+import software.amazon.awssdk.services.glue.model.GetTablesRequest;\n+import software.amazon.awssdk.services.glue.model.GetTablesResponse;\n+import software.amazon.awssdk.services.glue.model.InvalidInputException;\n+import software.amazon.awssdk.services.glue.model.Table;\n+import software.amazon.awssdk.services.glue.model.TableInput;\n+import software.amazon.awssdk.services.glue.model.UpdateDatabaseRequest;\n+\n+public class GlueCatalog extends BaseMetastoreCatalog implements Closeable, SupportsNamespaces {\n+\n+  private static final Logger LOG = LoggerFactory.getLogger(GlueCatalog.class);\n+\n+  private final Configuration conf;\n+  private final GlueClient glue;\n+  private final String catalogId;\n+  private final String catalogName;\n+  private final String warehousePath;\n+  private final boolean skipArchive;\n+\n+  /**\n+   * Constructor that initializes all args from Hadoop configuration, used by engines like Spark and Flink\n+   * @param conf Hadoop config passed from engines\n+   */\n+  public GlueCatalog(Configuration conf) {\n+    this(\n+        conf,\n+        conf.get(IcebergAWSConfigs.ICEBERG_AWS_GLUE_CATALOG_ID),\n+        conf.get(IcebergAWSConfigs.ICEBERG_AWS_GLUE_WAREHOUSE_PATH),\n+        conf.getBoolean(IcebergAWSConfigs.ICEBERG_AWS_GLUE_SKIP_ARCHIVE,\n+            IcebergAWSConfigs.ICEBERG_AWS_GLUE_SKIP_ARCHIVE_DEFAULT)\n+    );\n+  }\n+\n+  /**\n+   * Constructor with default glue client\n+   * @param conf Hadoop config, passed in for users of HadoopIO\n+   * @param catalogId Glue catalog ID, which is the AWS account ID. When null, it uses the account of the Glue client.\n+   * @param warehousePath warehouse path, such as s3://my-iceberg-bucket/metadata_prod\n+   * @param skipArchive if Glue should skip an old table version when creating a new version in a commit.\n+   *                    By default Glue archives all old table versions after an UpdateTable call.\n+   *                    but Glue has a default max number of archived table versions (can be increased).\n+   *                    So for streaming use case with lots of commits, it is recommended to turn this feature off.\n+   */\n+  public GlueCatalog(\n+      Configuration conf,\n+      String catalogId,\n+      String warehousePath,\n+      boolean skipArchive) {\n+    this(conf, GlueClient.create(), catalogId, warehousePath, skipArchive);\n+  }\n+\n+  @Override\n+  public String name() {\n+    return catalogName;\n+  }\n+\n+  /**\n+   * All-arg constructor\n+   * @param conf Hadoop config, passed in for users of HadoopIO\n+   * @param glue Glue client\n+   * @param catalogId Glue catalog ID, which is the AWS account ID. When null, it uses the account of the Glue client.\n+   * @param warehousePath warehouse path, such as s3://my-iceberg-bucket/metadata_prod\n+   * @param skipArchive if Glue should skip an old table version when creating a new version in a commit.\n+   *                    By default Glue archives all old table versions after an UpdateTable call.\n+   *                    but Glue has a default max number of archived table versions (can be increased).\n+   *                    So for streaming use case with lots of commits, it is recommended to turn this feature off.\n+   */\n+  public GlueCatalog(\n+      Configuration conf,\n+      GlueClient glue,\n+      String catalogId,\n+      String warehousePath,\n+      boolean skipArchive) {\n+    this.conf = Preconditions.checkNotNull(conf, \"Cannot initialize GlueCatalog because Hadoop config is null\");\n+    this.glue = Preconditions.checkNotNull(glue, \"Cannot initialize GlueCatalog because GlueClient is null\");\n+    this.catalogId = catalogId;\n+    this.catalogName = \"glue.\" + catalogId; // for logging purpose\n+    this.warehousePath = warehousePath;\n+    this.skipArchive = skipArchive;\n+    validateWarehousePath();\n+  }\n+\n+  private void validateWarehousePath() {\n+    Preconditions.checkArgument(warehousePath != null && warehousePath.length() > 0,\n+        \"Cannot initialize GlueCatalog because warehousePath must not be null\");\n+    Preconditions.checkArgument(warehousePath.charAt(warehousePath.length() - 1) != '/',\n+        \"Cannot initialize GlueCatalog because warehousePath %s must not end with /\", warehousePath);\n+  }\n+\n+  @Override\n+  public void close() throws IOException {\n+    glue.close();\n+  }\n+\n+  @Override\n+  protected TableOperations newTableOps(TableIdentifier tableIdentifier) {\n+    return new GlueTableOperations(conf, glue, catalogId, skipArchive, tableIdentifier);\n+  }\n+\n+  /**\n+   * This method produces the same result as using a HiveCatalog.\n+   * If databaseUri exists for the Glue database URI, the default location is databaseUri/tableName.\n+   * If not, the default location is warehousePath/databaseName.db/tableName\n+   * @param tableIdentifier table id\n+   * @return default warehouse path\n+   */\n+  @Override\n+  protected String defaultWarehouseLocation(TableIdentifier tableIdentifier) {\n+    // check if value is set in database\n+    GetDatabaseResponse response = glue.getDatabase(GetDatabaseRequest.builder()\n+        .name(IcebergToGlueConverter.getDatabaseName(tableIdentifier))\n+        .build());\n+    String dbLocationUri = response.database().locationUri();\n+    if (dbLocationUri != null) {\n+      return String.format(\"%s/%s\", dbLocationUri, tableIdentifier.name());\n+    }\n+    return String.format(\n+        \"%s/%s.db/%s\",\n+        warehousePath,\n+        IcebergToGlueConverter.getDatabaseName(tableIdentifier),\n+        tableIdentifier.name());\n+  }\n+\n+  @Override\n+  public List<TableIdentifier> listTables(Namespace namespace) {\n+    namespaceExists(namespace);\n+    // should be safe to list all before returning the list, instead of dynamically load the list.\n+    String nextToken = null;\n+    List<TableIdentifier> results = new ArrayList<>();\n+    do {\n+      GetTablesResponse response = glue.getTables(GetTablesRequest.builder()\n+          .catalogId(catalogId)\n+          .databaseName(IcebergToGlueConverter.toDatabaseName(namespace))\n+          .nextToken(nextToken)\n+          .build());\n+      if (response.hasTableList()) {\n+        results.addAll(response.tableList().stream()\n+            .map(GlueToIcebergConverter::toTableId)\n+            .collect(Collectors.toList()));\n+        nextToken = response.nextToken();\n+      }\n+    } while (nextToken != null);\n+    LOG.debug(\"Listing of namespace: {} resulted in the following tables: {}\", namespace, results);\n+    return results;\n+  }\n+\n+  @Override\n+  public boolean dropTable(TableIdentifier identifier, boolean purge) {\n+    try {\n+      TableOperations ops = newTableOps(identifier);\n+      TableMetadata lastMetadata = ops.current();\n+      glue.deleteTable(DeleteTableRequest.builder()\n+          .catalogId(catalogId)\n+          .databaseName(IcebergToGlueConverter.getDatabaseName(identifier))\n+          .name(identifier.name())\n+          .build());\n+      LOG.info(\"Successfully dropped table {} from Glue\", identifier);\n+      if (purge && lastMetadata != null) {\n+        CatalogUtil.dropTableData(ops.io(), lastMetadata);\n+        LOG.info(\"Glue table {} data purged\", identifier);\n+      }\n+      LOG.info(\"Dropped table: {}\", identifier);\n+      return true;\n+    } catch (EntityNotFoundException e) {\n+      LOG.error(\"Cannot drop table {} because table not found or not accessible\", identifier, e);\n+      return false;\n+    } catch (Exception e) {\n+      LOG.error(\"Cannot complete drop table operation for {} due to unexpected exception\", identifier, e);\n+      throw e;\n+    }\n+  }\n+\n+  /**\n+   * Rename table in Glue is a drop table and create table.\n+   * @param from identifier of the table to rename\n+   * @param to new table name\n+   */\n+  @Override\n+  public void renameTable(TableIdentifier from, TableIdentifier to) {\n+    // check new namespace exists\n+    if (!namespaceExists(to.namespace())) {\n+      throw new NoSuchNamespaceException(\"Cannot rename %s to %s because namespace %s does not exist\",\n+          from, to, to.namespace());\n+    }\n+    // keep metadata\n+    Table fromTable = null;\n+    String fromTableDbName = IcebergToGlueConverter.getDatabaseName(from);\n+    String fromTableName = IcebergToGlueConverter.getTableName(from);\n+    try {\n+      GetTableResponse response = glue.getTable(GetTableRequest.builder()\n+          .catalogId(catalogId)\n+          .databaseName(fromTableDbName)\n+          .name(fromTableName)\n+          .build());\n+      fromTable = response.table();\n+    } catch (EntityNotFoundException e) {\n+      throw new NoSuchTableException(e, \"Cannot rename %s because the table does not exist in Glue\", from);\n+    }\n+    dropTable(from, false);\n+    // use the same Glue info to create the new table, pointing to the old metadata\n+    TableInput.Builder tableInputBuilder = TableInput.builder()\n+        .owner(fromTable.owner())\n+        .tableType(fromTable.tableType())\n+        .parameters(fromTable.parameters());\n+    try {\n+      glue.createTable(CreateTableRequest.builder()\n+          .catalogId(catalogId)\n+          .databaseName(IcebergToGlueConverter.getDatabaseName(to))\n+          .tableInput(tableInputBuilder.name(IcebergToGlueConverter.getTableName(to)).build())\n+          .build());\n+      LOG.info(\"Renamed table from {} to {}\", from, to);\n+    } catch (AwsServiceException | NoSuchTableException e) {\n+      // rollback, recreate old table and rethrow exception\n+      LOG.error(\"Fail to rename table from {} to {}, rollback the old table\", from, to, e);\n+      glue.createTable(CreateTableRequest.builder()\n+          .catalogId(catalogId)\n+          .databaseName(fromTableDbName)\n+          .tableInput(tableInputBuilder.name(fromTableName).build())\n+          .build());\n+      throw e;\n+    }\n+  }\n+\n+  @Override\n+  public void createNamespace(Namespace namespace, Map<String, String> metadata) {\n+    try {\n+      glue.createDatabase(CreateDatabaseRequest.builder()\n+          .catalogId(catalogId)\n+          .databaseInput(IcebergToGlueConverter.toDatabaseInput(namespace, metadata))\n+          .build());\n+      LOG.info(\"Created namespace: {}\", namespace);\n+    } catch (software.amazon.awssdk.services.glue.model.AlreadyExistsException e) {\n+      throw new AlreadyExistsException(\"Cannot create namespace %s because it already exists in Glue\", namespace);\n+    }\n+  }\n+\n+  @Override\n+  public List<Namespace> listNamespaces(Namespace namespace) throws NoSuchNamespaceException {\n+    if (!namespace.isEmpty()) {\n+      // if it is not a list all op, just check if the namespace exists and return itself.\n+      if (namespaceExists(namespace)) {\n+        return Lists.newArrayList(namespace);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bdb4dd597475c06cfc31080f01712ef6a9d8a7e6"}, "originalPosition": 301}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE4ODg5MjI2", "url": "https://github.com/apache/iceberg/pull/1633#pullrequestreview-518889226", "createdAt": "2020-10-28T17:00:13Z", "commit": {"oid": "bdb4dd597475c06cfc31080f01712ef6a9d8a7e6"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxNzowMDoxM1rOHp0V7g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxNzowMDoxM1rOHp0V7g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzYxMTI0Ng==", "bodyText": "Nit: we generally prefer factory methods like Lists.newArrayList() over specific list type constructors.", "url": "https://github.com/apache/iceberg/pull/1633#discussion_r513611246", "createdAt": "2020-10-28T17:00:13Z", "author": {"login": "rdblue"}, "path": "aws/src/main/java/org/apache/iceberg/aws/glue/GlueCatalog.java", "diffHunk": "@@ -0,0 +1,398 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.aws.glue;\n+\n+import java.io.Closeable;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import org.apache.commons.collections.CollectionUtils;\n+import org.apache.hadoop.conf.Configuration;\n+import org.apache.iceberg.BaseMetastoreCatalog;\n+import org.apache.iceberg.CatalogUtil;\n+import org.apache.iceberg.TableMetadata;\n+import org.apache.iceberg.TableOperations;\n+import org.apache.iceberg.aws.IcebergAWSConfigs;\n+import org.apache.iceberg.catalog.Namespace;\n+import org.apache.iceberg.catalog.SupportsNamespaces;\n+import org.apache.iceberg.catalog.TableIdentifier;\n+import org.apache.iceberg.exceptions.AlreadyExistsException;\n+import org.apache.iceberg.exceptions.NamespaceNotEmptyException;\n+import org.apache.iceberg.exceptions.NoSuchNamespaceException;\n+import org.apache.iceberg.exceptions.NoSuchTableException;\n+import org.apache.iceberg.relocated.com.google.common.base.Preconditions;\n+import org.apache.iceberg.relocated.com.google.common.collect.Lists;\n+import org.apache.iceberg.relocated.com.google.common.collect.Maps;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import software.amazon.awssdk.awscore.exception.AwsServiceException;\n+import software.amazon.awssdk.services.glue.GlueClient;\n+import software.amazon.awssdk.services.glue.model.CreateDatabaseRequest;\n+import software.amazon.awssdk.services.glue.model.CreateTableRequest;\n+import software.amazon.awssdk.services.glue.model.DeleteDatabaseRequest;\n+import software.amazon.awssdk.services.glue.model.DeleteTableRequest;\n+import software.amazon.awssdk.services.glue.model.EntityNotFoundException;\n+import software.amazon.awssdk.services.glue.model.GetDatabaseRequest;\n+import software.amazon.awssdk.services.glue.model.GetDatabaseResponse;\n+import software.amazon.awssdk.services.glue.model.GetDatabasesRequest;\n+import software.amazon.awssdk.services.glue.model.GetDatabasesResponse;\n+import software.amazon.awssdk.services.glue.model.GetTableRequest;\n+import software.amazon.awssdk.services.glue.model.GetTableResponse;\n+import software.amazon.awssdk.services.glue.model.GetTablesRequest;\n+import software.amazon.awssdk.services.glue.model.GetTablesResponse;\n+import software.amazon.awssdk.services.glue.model.InvalidInputException;\n+import software.amazon.awssdk.services.glue.model.Table;\n+import software.amazon.awssdk.services.glue.model.TableInput;\n+import software.amazon.awssdk.services.glue.model.UpdateDatabaseRequest;\n+\n+public class GlueCatalog extends BaseMetastoreCatalog implements Closeable, SupportsNamespaces {\n+\n+  private static final Logger LOG = LoggerFactory.getLogger(GlueCatalog.class);\n+\n+  private final Configuration conf;\n+  private final GlueClient glue;\n+  private final String catalogId;\n+  private final String catalogName;\n+  private final String warehousePath;\n+  private final boolean skipArchive;\n+\n+  /**\n+   * Constructor that initializes all args from Hadoop configuration, used by engines like Spark and Flink\n+   * @param conf Hadoop config passed from engines\n+   */\n+  public GlueCatalog(Configuration conf) {\n+    this(\n+        conf,\n+        conf.get(IcebergAWSConfigs.ICEBERG_AWS_GLUE_CATALOG_ID),\n+        conf.get(IcebergAWSConfigs.ICEBERG_AWS_GLUE_WAREHOUSE_PATH),\n+        conf.getBoolean(IcebergAWSConfigs.ICEBERG_AWS_GLUE_SKIP_ARCHIVE,\n+            IcebergAWSConfigs.ICEBERG_AWS_GLUE_SKIP_ARCHIVE_DEFAULT)\n+    );\n+  }\n+\n+  /**\n+   * Constructor with default glue client\n+   * @param conf Hadoop config, passed in for users of HadoopIO\n+   * @param catalogId Glue catalog ID, which is the AWS account ID. When null, it uses the account of the Glue client.\n+   * @param warehousePath warehouse path, such as s3://my-iceberg-bucket/metadata_prod\n+   * @param skipArchive if Glue should skip an old table version when creating a new version in a commit.\n+   *                    By default Glue archives all old table versions after an UpdateTable call.\n+   *                    but Glue has a default max number of archived table versions (can be increased).\n+   *                    So for streaming use case with lots of commits, it is recommended to turn this feature off.\n+   */\n+  public GlueCatalog(\n+      Configuration conf,\n+      String catalogId,\n+      String warehousePath,\n+      boolean skipArchive) {\n+    this(conf, GlueClient.create(), catalogId, warehousePath, skipArchive);\n+  }\n+\n+  @Override\n+  public String name() {\n+    return catalogName;\n+  }\n+\n+  /**\n+   * All-arg constructor\n+   * @param conf Hadoop config, passed in for users of HadoopIO\n+   * @param glue Glue client\n+   * @param catalogId Glue catalog ID, which is the AWS account ID. When null, it uses the account of the Glue client.\n+   * @param warehousePath warehouse path, such as s3://my-iceberg-bucket/metadata_prod\n+   * @param skipArchive if Glue should skip an old table version when creating a new version in a commit.\n+   *                    By default Glue archives all old table versions after an UpdateTable call.\n+   *                    but Glue has a default max number of archived table versions (can be increased).\n+   *                    So for streaming use case with lots of commits, it is recommended to turn this feature off.\n+   */\n+  public GlueCatalog(\n+      Configuration conf,\n+      GlueClient glue,\n+      String catalogId,\n+      String warehousePath,\n+      boolean skipArchive) {\n+    this.conf = Preconditions.checkNotNull(conf, \"Cannot initialize GlueCatalog because Hadoop config is null\");\n+    this.glue = Preconditions.checkNotNull(glue, \"Cannot initialize GlueCatalog because GlueClient is null\");\n+    this.catalogId = catalogId;\n+    this.catalogName = \"glue.\" + catalogId; // for logging purpose\n+    this.warehousePath = warehousePath;\n+    this.skipArchive = skipArchive;\n+    validateWarehousePath();\n+  }\n+\n+  private void validateWarehousePath() {\n+    Preconditions.checkArgument(warehousePath != null && warehousePath.length() > 0,\n+        \"Cannot initialize GlueCatalog because warehousePath must not be null\");\n+    Preconditions.checkArgument(warehousePath.charAt(warehousePath.length() - 1) != '/',\n+        \"Cannot initialize GlueCatalog because warehousePath %s must not end with /\", warehousePath);\n+  }\n+\n+  @Override\n+  public void close() throws IOException {\n+    glue.close();\n+  }\n+\n+  @Override\n+  protected TableOperations newTableOps(TableIdentifier tableIdentifier) {\n+    return new GlueTableOperations(conf, glue, catalogId, skipArchive, tableIdentifier);\n+  }\n+\n+  /**\n+   * This method produces the same result as using a HiveCatalog.\n+   * If databaseUri exists for the Glue database URI, the default location is databaseUri/tableName.\n+   * If not, the default location is warehousePath/databaseName.db/tableName\n+   * @param tableIdentifier table id\n+   * @return default warehouse path\n+   */\n+  @Override\n+  protected String defaultWarehouseLocation(TableIdentifier tableIdentifier) {\n+    // check if value is set in database\n+    GetDatabaseResponse response = glue.getDatabase(GetDatabaseRequest.builder()\n+        .name(IcebergToGlueConverter.getDatabaseName(tableIdentifier))\n+        .build());\n+    String dbLocationUri = response.database().locationUri();\n+    if (dbLocationUri != null) {\n+      return String.format(\"%s/%s\", dbLocationUri, tableIdentifier.name());\n+    }\n+    return String.format(\n+        \"%s/%s.db/%s\",\n+        warehousePath,\n+        IcebergToGlueConverter.getDatabaseName(tableIdentifier),\n+        tableIdentifier.name());\n+  }\n+\n+  @Override\n+  public List<TableIdentifier> listTables(Namespace namespace) {\n+    namespaceExists(namespace);\n+    // should be safe to list all before returning the list, instead of dynamically load the list.\n+    String nextToken = null;\n+    List<TableIdentifier> results = new ArrayList<>();\n+    do {\n+      GetTablesResponse response = glue.getTables(GetTablesRequest.builder()\n+          .catalogId(catalogId)\n+          .databaseName(IcebergToGlueConverter.toDatabaseName(namespace))\n+          .nextToken(nextToken)\n+          .build());\n+      if (response.hasTableList()) {\n+        results.addAll(response.tableList().stream()\n+            .map(GlueToIcebergConverter::toTableId)\n+            .collect(Collectors.toList()));\n+        nextToken = response.nextToken();\n+      }\n+    } while (nextToken != null);\n+    LOG.debug(\"Listing of namespace: {} resulted in the following tables: {}\", namespace, results);\n+    return results;\n+  }\n+\n+  @Override\n+  public boolean dropTable(TableIdentifier identifier, boolean purge) {\n+    try {\n+      TableOperations ops = newTableOps(identifier);\n+      TableMetadata lastMetadata = ops.current();\n+      glue.deleteTable(DeleteTableRequest.builder()\n+          .catalogId(catalogId)\n+          .databaseName(IcebergToGlueConverter.getDatabaseName(identifier))\n+          .name(identifier.name())\n+          .build());\n+      LOG.info(\"Successfully dropped table {} from Glue\", identifier);\n+      if (purge && lastMetadata != null) {\n+        CatalogUtil.dropTableData(ops.io(), lastMetadata);\n+        LOG.info(\"Glue table {} data purged\", identifier);\n+      }\n+      LOG.info(\"Dropped table: {}\", identifier);\n+      return true;\n+    } catch (EntityNotFoundException e) {\n+      LOG.error(\"Cannot drop table {} because table not found or not accessible\", identifier, e);\n+      return false;\n+    } catch (Exception e) {\n+      LOG.error(\"Cannot complete drop table operation for {} due to unexpected exception\", identifier, e);\n+      throw e;\n+    }\n+  }\n+\n+  /**\n+   * Rename table in Glue is a drop table and create table.\n+   * @param from identifier of the table to rename\n+   * @param to new table name\n+   */\n+  @Override\n+  public void renameTable(TableIdentifier from, TableIdentifier to) {\n+    // check new namespace exists\n+    if (!namespaceExists(to.namespace())) {\n+      throw new NoSuchNamespaceException(\"Cannot rename %s to %s because namespace %s does not exist\",\n+          from, to, to.namespace());\n+    }\n+    // keep metadata\n+    Table fromTable = null;\n+    String fromTableDbName = IcebergToGlueConverter.getDatabaseName(from);\n+    String fromTableName = IcebergToGlueConverter.getTableName(from);\n+    try {\n+      GetTableResponse response = glue.getTable(GetTableRequest.builder()\n+          .catalogId(catalogId)\n+          .databaseName(fromTableDbName)\n+          .name(fromTableName)\n+          .build());\n+      fromTable = response.table();\n+    } catch (EntityNotFoundException e) {\n+      throw new NoSuchTableException(e, \"Cannot rename %s because the table does not exist in Glue\", from);\n+    }\n+    dropTable(from, false);\n+    // use the same Glue info to create the new table, pointing to the old metadata\n+    TableInput.Builder tableInputBuilder = TableInput.builder()\n+        .owner(fromTable.owner())\n+        .tableType(fromTable.tableType())\n+        .parameters(fromTable.parameters());\n+    try {\n+      glue.createTable(CreateTableRequest.builder()\n+          .catalogId(catalogId)\n+          .databaseName(IcebergToGlueConverter.getDatabaseName(to))\n+          .tableInput(tableInputBuilder.name(IcebergToGlueConverter.getTableName(to)).build())\n+          .build());\n+      LOG.info(\"Renamed table from {} to {}\", from, to);\n+    } catch (AwsServiceException | NoSuchTableException e) {\n+      // rollback, recreate old table and rethrow exception\n+      LOG.error(\"Fail to rename table from {} to {}, rollback the old table\", from, to, e);\n+      glue.createTable(CreateTableRequest.builder()\n+          .catalogId(catalogId)\n+          .databaseName(fromTableDbName)\n+          .tableInput(tableInputBuilder.name(fromTableName).build())\n+          .build());\n+      throw e;\n+    }\n+  }\n+\n+  @Override\n+  public void createNamespace(Namespace namespace, Map<String, String> metadata) {\n+    try {\n+      glue.createDatabase(CreateDatabaseRequest.builder()\n+          .catalogId(catalogId)\n+          .databaseInput(IcebergToGlueConverter.toDatabaseInput(namespace, metadata))\n+          .build());\n+      LOG.info(\"Created namespace: {}\", namespace);\n+    } catch (software.amazon.awssdk.services.glue.model.AlreadyExistsException e) {\n+      throw new AlreadyExistsException(\"Cannot create namespace %s because it already exists in Glue\", namespace);\n+    }\n+  }\n+\n+  @Override\n+  public List<Namespace> listNamespaces(Namespace namespace) throws NoSuchNamespaceException {\n+    if (!namespace.isEmpty()) {\n+      // if it is not a list all op, just check if the namespace exists and return itself.\n+      if (namespaceExists(namespace)) {\n+        return Lists.newArrayList(namespace);\n+      }\n+      throw new NoSuchNamespaceException(\n+          \"Glue does not support nested namespace, cannot list namespaces under %s\", namespace);\n+    }\n+    // should be safe to list all before returning the list, instead of dynamically load the list.\n+    String nextToken = null;\n+    List<Namespace> results = new ArrayList<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bdb4dd597475c06cfc31080f01712ef6a9d8a7e6"}, "originalPosition": 308}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE4ODkwNDI2", "url": "https://github.com/apache/iceberg/pull/1633#pullrequestreview-518890426", "createdAt": "2020-10-28T17:01:27Z", "commit": {"oid": "bdb4dd597475c06cfc31080f01712ef6a9d8a7e6"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxNzowMToyN1rOHp0ZZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxNzowMToyN1rOHp0ZZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzYxMjEzMg==", "bodyText": "I think this needs an else to set nextToken = null and exit the loop. Otherwise, a response with no database list for a non-null token would cause an infinite loop because the token never changes.", "url": "https://github.com/apache/iceberg/pull/1633#discussion_r513612132", "createdAt": "2020-10-28T17:01:27Z", "author": {"login": "rdblue"}, "path": "aws/src/main/java/org/apache/iceberg/aws/glue/GlueCatalog.java", "diffHunk": "@@ -0,0 +1,398 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.aws.glue;\n+\n+import java.io.Closeable;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import org.apache.commons.collections.CollectionUtils;\n+import org.apache.hadoop.conf.Configuration;\n+import org.apache.iceberg.BaseMetastoreCatalog;\n+import org.apache.iceberg.CatalogUtil;\n+import org.apache.iceberg.TableMetadata;\n+import org.apache.iceberg.TableOperations;\n+import org.apache.iceberg.aws.IcebergAWSConfigs;\n+import org.apache.iceberg.catalog.Namespace;\n+import org.apache.iceberg.catalog.SupportsNamespaces;\n+import org.apache.iceberg.catalog.TableIdentifier;\n+import org.apache.iceberg.exceptions.AlreadyExistsException;\n+import org.apache.iceberg.exceptions.NamespaceNotEmptyException;\n+import org.apache.iceberg.exceptions.NoSuchNamespaceException;\n+import org.apache.iceberg.exceptions.NoSuchTableException;\n+import org.apache.iceberg.relocated.com.google.common.base.Preconditions;\n+import org.apache.iceberg.relocated.com.google.common.collect.Lists;\n+import org.apache.iceberg.relocated.com.google.common.collect.Maps;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import software.amazon.awssdk.awscore.exception.AwsServiceException;\n+import software.amazon.awssdk.services.glue.GlueClient;\n+import software.amazon.awssdk.services.glue.model.CreateDatabaseRequest;\n+import software.amazon.awssdk.services.glue.model.CreateTableRequest;\n+import software.amazon.awssdk.services.glue.model.DeleteDatabaseRequest;\n+import software.amazon.awssdk.services.glue.model.DeleteTableRequest;\n+import software.amazon.awssdk.services.glue.model.EntityNotFoundException;\n+import software.amazon.awssdk.services.glue.model.GetDatabaseRequest;\n+import software.amazon.awssdk.services.glue.model.GetDatabaseResponse;\n+import software.amazon.awssdk.services.glue.model.GetDatabasesRequest;\n+import software.amazon.awssdk.services.glue.model.GetDatabasesResponse;\n+import software.amazon.awssdk.services.glue.model.GetTableRequest;\n+import software.amazon.awssdk.services.glue.model.GetTableResponse;\n+import software.amazon.awssdk.services.glue.model.GetTablesRequest;\n+import software.amazon.awssdk.services.glue.model.GetTablesResponse;\n+import software.amazon.awssdk.services.glue.model.InvalidInputException;\n+import software.amazon.awssdk.services.glue.model.Table;\n+import software.amazon.awssdk.services.glue.model.TableInput;\n+import software.amazon.awssdk.services.glue.model.UpdateDatabaseRequest;\n+\n+public class GlueCatalog extends BaseMetastoreCatalog implements Closeable, SupportsNamespaces {\n+\n+  private static final Logger LOG = LoggerFactory.getLogger(GlueCatalog.class);\n+\n+  private final Configuration conf;\n+  private final GlueClient glue;\n+  private final String catalogId;\n+  private final String catalogName;\n+  private final String warehousePath;\n+  private final boolean skipArchive;\n+\n+  /**\n+   * Constructor that initializes all args from Hadoop configuration, used by engines like Spark and Flink\n+   * @param conf Hadoop config passed from engines\n+   */\n+  public GlueCatalog(Configuration conf) {\n+    this(\n+        conf,\n+        conf.get(IcebergAWSConfigs.ICEBERG_AWS_GLUE_CATALOG_ID),\n+        conf.get(IcebergAWSConfigs.ICEBERG_AWS_GLUE_WAREHOUSE_PATH),\n+        conf.getBoolean(IcebergAWSConfigs.ICEBERG_AWS_GLUE_SKIP_ARCHIVE,\n+            IcebergAWSConfigs.ICEBERG_AWS_GLUE_SKIP_ARCHIVE_DEFAULT)\n+    );\n+  }\n+\n+  /**\n+   * Constructor with default glue client\n+   * @param conf Hadoop config, passed in for users of HadoopIO\n+   * @param catalogId Glue catalog ID, which is the AWS account ID. When null, it uses the account of the Glue client.\n+   * @param warehousePath warehouse path, such as s3://my-iceberg-bucket/metadata_prod\n+   * @param skipArchive if Glue should skip an old table version when creating a new version in a commit.\n+   *                    By default Glue archives all old table versions after an UpdateTable call.\n+   *                    but Glue has a default max number of archived table versions (can be increased).\n+   *                    So for streaming use case with lots of commits, it is recommended to turn this feature off.\n+   */\n+  public GlueCatalog(\n+      Configuration conf,\n+      String catalogId,\n+      String warehousePath,\n+      boolean skipArchive) {\n+    this(conf, GlueClient.create(), catalogId, warehousePath, skipArchive);\n+  }\n+\n+  @Override\n+  public String name() {\n+    return catalogName;\n+  }\n+\n+  /**\n+   * All-arg constructor\n+   * @param conf Hadoop config, passed in for users of HadoopIO\n+   * @param glue Glue client\n+   * @param catalogId Glue catalog ID, which is the AWS account ID. When null, it uses the account of the Glue client.\n+   * @param warehousePath warehouse path, such as s3://my-iceberg-bucket/metadata_prod\n+   * @param skipArchive if Glue should skip an old table version when creating a new version in a commit.\n+   *                    By default Glue archives all old table versions after an UpdateTable call.\n+   *                    but Glue has a default max number of archived table versions (can be increased).\n+   *                    So for streaming use case with lots of commits, it is recommended to turn this feature off.\n+   */\n+  public GlueCatalog(\n+      Configuration conf,\n+      GlueClient glue,\n+      String catalogId,\n+      String warehousePath,\n+      boolean skipArchive) {\n+    this.conf = Preconditions.checkNotNull(conf, \"Cannot initialize GlueCatalog because Hadoop config is null\");\n+    this.glue = Preconditions.checkNotNull(glue, \"Cannot initialize GlueCatalog because GlueClient is null\");\n+    this.catalogId = catalogId;\n+    this.catalogName = \"glue.\" + catalogId; // for logging purpose\n+    this.warehousePath = warehousePath;\n+    this.skipArchive = skipArchive;\n+    validateWarehousePath();\n+  }\n+\n+  private void validateWarehousePath() {\n+    Preconditions.checkArgument(warehousePath != null && warehousePath.length() > 0,\n+        \"Cannot initialize GlueCatalog because warehousePath must not be null\");\n+    Preconditions.checkArgument(warehousePath.charAt(warehousePath.length() - 1) != '/',\n+        \"Cannot initialize GlueCatalog because warehousePath %s must not end with /\", warehousePath);\n+  }\n+\n+  @Override\n+  public void close() throws IOException {\n+    glue.close();\n+  }\n+\n+  @Override\n+  protected TableOperations newTableOps(TableIdentifier tableIdentifier) {\n+    return new GlueTableOperations(conf, glue, catalogId, skipArchive, tableIdentifier);\n+  }\n+\n+  /**\n+   * This method produces the same result as using a HiveCatalog.\n+   * If databaseUri exists for the Glue database URI, the default location is databaseUri/tableName.\n+   * If not, the default location is warehousePath/databaseName.db/tableName\n+   * @param tableIdentifier table id\n+   * @return default warehouse path\n+   */\n+  @Override\n+  protected String defaultWarehouseLocation(TableIdentifier tableIdentifier) {\n+    // check if value is set in database\n+    GetDatabaseResponse response = glue.getDatabase(GetDatabaseRequest.builder()\n+        .name(IcebergToGlueConverter.getDatabaseName(tableIdentifier))\n+        .build());\n+    String dbLocationUri = response.database().locationUri();\n+    if (dbLocationUri != null) {\n+      return String.format(\"%s/%s\", dbLocationUri, tableIdentifier.name());\n+    }\n+    return String.format(\n+        \"%s/%s.db/%s\",\n+        warehousePath,\n+        IcebergToGlueConverter.getDatabaseName(tableIdentifier),\n+        tableIdentifier.name());\n+  }\n+\n+  @Override\n+  public List<TableIdentifier> listTables(Namespace namespace) {\n+    namespaceExists(namespace);\n+    // should be safe to list all before returning the list, instead of dynamically load the list.\n+    String nextToken = null;\n+    List<TableIdentifier> results = new ArrayList<>();\n+    do {\n+      GetTablesResponse response = glue.getTables(GetTablesRequest.builder()\n+          .catalogId(catalogId)\n+          .databaseName(IcebergToGlueConverter.toDatabaseName(namespace))\n+          .nextToken(nextToken)\n+          .build());\n+      if (response.hasTableList()) {\n+        results.addAll(response.tableList().stream()\n+            .map(GlueToIcebergConverter::toTableId)\n+            .collect(Collectors.toList()));\n+        nextToken = response.nextToken();\n+      }\n+    } while (nextToken != null);\n+    LOG.debug(\"Listing of namespace: {} resulted in the following tables: {}\", namespace, results);\n+    return results;\n+  }\n+\n+  @Override\n+  public boolean dropTable(TableIdentifier identifier, boolean purge) {\n+    try {\n+      TableOperations ops = newTableOps(identifier);\n+      TableMetadata lastMetadata = ops.current();\n+      glue.deleteTable(DeleteTableRequest.builder()\n+          .catalogId(catalogId)\n+          .databaseName(IcebergToGlueConverter.getDatabaseName(identifier))\n+          .name(identifier.name())\n+          .build());\n+      LOG.info(\"Successfully dropped table {} from Glue\", identifier);\n+      if (purge && lastMetadata != null) {\n+        CatalogUtil.dropTableData(ops.io(), lastMetadata);\n+        LOG.info(\"Glue table {} data purged\", identifier);\n+      }\n+      LOG.info(\"Dropped table: {}\", identifier);\n+      return true;\n+    } catch (EntityNotFoundException e) {\n+      LOG.error(\"Cannot drop table {} because table not found or not accessible\", identifier, e);\n+      return false;\n+    } catch (Exception e) {\n+      LOG.error(\"Cannot complete drop table operation for {} due to unexpected exception\", identifier, e);\n+      throw e;\n+    }\n+  }\n+\n+  /**\n+   * Rename table in Glue is a drop table and create table.\n+   * @param from identifier of the table to rename\n+   * @param to new table name\n+   */\n+  @Override\n+  public void renameTable(TableIdentifier from, TableIdentifier to) {\n+    // check new namespace exists\n+    if (!namespaceExists(to.namespace())) {\n+      throw new NoSuchNamespaceException(\"Cannot rename %s to %s because namespace %s does not exist\",\n+          from, to, to.namespace());\n+    }\n+    // keep metadata\n+    Table fromTable = null;\n+    String fromTableDbName = IcebergToGlueConverter.getDatabaseName(from);\n+    String fromTableName = IcebergToGlueConverter.getTableName(from);\n+    try {\n+      GetTableResponse response = glue.getTable(GetTableRequest.builder()\n+          .catalogId(catalogId)\n+          .databaseName(fromTableDbName)\n+          .name(fromTableName)\n+          .build());\n+      fromTable = response.table();\n+    } catch (EntityNotFoundException e) {\n+      throw new NoSuchTableException(e, \"Cannot rename %s because the table does not exist in Glue\", from);\n+    }\n+    dropTable(from, false);\n+    // use the same Glue info to create the new table, pointing to the old metadata\n+    TableInput.Builder tableInputBuilder = TableInput.builder()\n+        .owner(fromTable.owner())\n+        .tableType(fromTable.tableType())\n+        .parameters(fromTable.parameters());\n+    try {\n+      glue.createTable(CreateTableRequest.builder()\n+          .catalogId(catalogId)\n+          .databaseName(IcebergToGlueConverter.getDatabaseName(to))\n+          .tableInput(tableInputBuilder.name(IcebergToGlueConverter.getTableName(to)).build())\n+          .build());\n+      LOG.info(\"Renamed table from {} to {}\", from, to);\n+    } catch (AwsServiceException | NoSuchTableException e) {\n+      // rollback, recreate old table and rethrow exception\n+      LOG.error(\"Fail to rename table from {} to {}, rollback the old table\", from, to, e);\n+      glue.createTable(CreateTableRequest.builder()\n+          .catalogId(catalogId)\n+          .databaseName(fromTableDbName)\n+          .tableInput(tableInputBuilder.name(fromTableName).build())\n+          .build());\n+      throw e;\n+    }\n+  }\n+\n+  @Override\n+  public void createNamespace(Namespace namespace, Map<String, String> metadata) {\n+    try {\n+      glue.createDatabase(CreateDatabaseRequest.builder()\n+          .catalogId(catalogId)\n+          .databaseInput(IcebergToGlueConverter.toDatabaseInput(namespace, metadata))\n+          .build());\n+      LOG.info(\"Created namespace: {}\", namespace);\n+    } catch (software.amazon.awssdk.services.glue.model.AlreadyExistsException e) {\n+      throw new AlreadyExistsException(\"Cannot create namespace %s because it already exists in Glue\", namespace);\n+    }\n+  }\n+\n+  @Override\n+  public List<Namespace> listNamespaces(Namespace namespace) throws NoSuchNamespaceException {\n+    if (!namespace.isEmpty()) {\n+      // if it is not a list all op, just check if the namespace exists and return itself.\n+      if (namespaceExists(namespace)) {\n+        return Lists.newArrayList(namespace);\n+      }\n+      throw new NoSuchNamespaceException(\n+          \"Glue does not support nested namespace, cannot list namespaces under %s\", namespace);\n+    }\n+    // should be safe to list all before returning the list, instead of dynamically load the list.\n+    String nextToken = null;\n+    List<Namespace> results = new ArrayList<>();\n+    do {\n+      GetDatabasesResponse response = glue.getDatabases(GetDatabasesRequest.builder()\n+          .catalogId(catalogId)\n+          .nextToken(nextToken)\n+          .build());\n+      if (response.hasDatabaseList()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bdb4dd597475c06cfc31080f01712ef6a9d8a7e6"}, "originalPosition": 314}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE4ODkxNjUw", "url": "https://github.com/apache/iceberg/pull/1633#pullrequestreview-518891650", "createdAt": "2020-10-28T17:02:43Z", "commit": {"oid": "bdb4dd597475c06cfc31080f01712ef6a9d8a7e6"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxNzowMjo0M1rOHp0c0g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxNzowMjo0M1rOHp0c0g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzYxMzAxMA==", "bodyText": "Does this need to check whether the namespace is empty?", "url": "https://github.com/apache/iceberg/pull/1633#discussion_r513613010", "createdAt": "2020-10-28T17:02:43Z", "author": {"login": "rdblue"}, "path": "aws/src/main/java/org/apache/iceberg/aws/glue/GlueCatalog.java", "diffHunk": "@@ -0,0 +1,398 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.aws.glue;\n+\n+import java.io.Closeable;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import org.apache.commons.collections.CollectionUtils;\n+import org.apache.hadoop.conf.Configuration;\n+import org.apache.iceberg.BaseMetastoreCatalog;\n+import org.apache.iceberg.CatalogUtil;\n+import org.apache.iceberg.TableMetadata;\n+import org.apache.iceberg.TableOperations;\n+import org.apache.iceberg.aws.IcebergAWSConfigs;\n+import org.apache.iceberg.catalog.Namespace;\n+import org.apache.iceberg.catalog.SupportsNamespaces;\n+import org.apache.iceberg.catalog.TableIdentifier;\n+import org.apache.iceberg.exceptions.AlreadyExistsException;\n+import org.apache.iceberg.exceptions.NamespaceNotEmptyException;\n+import org.apache.iceberg.exceptions.NoSuchNamespaceException;\n+import org.apache.iceberg.exceptions.NoSuchTableException;\n+import org.apache.iceberg.relocated.com.google.common.base.Preconditions;\n+import org.apache.iceberg.relocated.com.google.common.collect.Lists;\n+import org.apache.iceberg.relocated.com.google.common.collect.Maps;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import software.amazon.awssdk.awscore.exception.AwsServiceException;\n+import software.amazon.awssdk.services.glue.GlueClient;\n+import software.amazon.awssdk.services.glue.model.CreateDatabaseRequest;\n+import software.amazon.awssdk.services.glue.model.CreateTableRequest;\n+import software.amazon.awssdk.services.glue.model.DeleteDatabaseRequest;\n+import software.amazon.awssdk.services.glue.model.DeleteTableRequest;\n+import software.amazon.awssdk.services.glue.model.EntityNotFoundException;\n+import software.amazon.awssdk.services.glue.model.GetDatabaseRequest;\n+import software.amazon.awssdk.services.glue.model.GetDatabaseResponse;\n+import software.amazon.awssdk.services.glue.model.GetDatabasesRequest;\n+import software.amazon.awssdk.services.glue.model.GetDatabasesResponse;\n+import software.amazon.awssdk.services.glue.model.GetTableRequest;\n+import software.amazon.awssdk.services.glue.model.GetTableResponse;\n+import software.amazon.awssdk.services.glue.model.GetTablesRequest;\n+import software.amazon.awssdk.services.glue.model.GetTablesResponse;\n+import software.amazon.awssdk.services.glue.model.InvalidInputException;\n+import software.amazon.awssdk.services.glue.model.Table;\n+import software.amazon.awssdk.services.glue.model.TableInput;\n+import software.amazon.awssdk.services.glue.model.UpdateDatabaseRequest;\n+\n+public class GlueCatalog extends BaseMetastoreCatalog implements Closeable, SupportsNamespaces {\n+\n+  private static final Logger LOG = LoggerFactory.getLogger(GlueCatalog.class);\n+\n+  private final Configuration conf;\n+  private final GlueClient glue;\n+  private final String catalogId;\n+  private final String catalogName;\n+  private final String warehousePath;\n+  private final boolean skipArchive;\n+\n+  /**\n+   * Constructor that initializes all args from Hadoop configuration, used by engines like Spark and Flink\n+   * @param conf Hadoop config passed from engines\n+   */\n+  public GlueCatalog(Configuration conf) {\n+    this(\n+        conf,\n+        conf.get(IcebergAWSConfigs.ICEBERG_AWS_GLUE_CATALOG_ID),\n+        conf.get(IcebergAWSConfigs.ICEBERG_AWS_GLUE_WAREHOUSE_PATH),\n+        conf.getBoolean(IcebergAWSConfigs.ICEBERG_AWS_GLUE_SKIP_ARCHIVE,\n+            IcebergAWSConfigs.ICEBERG_AWS_GLUE_SKIP_ARCHIVE_DEFAULT)\n+    );\n+  }\n+\n+  /**\n+   * Constructor with default glue client\n+   * @param conf Hadoop config, passed in for users of HadoopIO\n+   * @param catalogId Glue catalog ID, which is the AWS account ID. When null, it uses the account of the Glue client.\n+   * @param warehousePath warehouse path, such as s3://my-iceberg-bucket/metadata_prod\n+   * @param skipArchive if Glue should skip an old table version when creating a new version in a commit.\n+   *                    By default Glue archives all old table versions after an UpdateTable call.\n+   *                    but Glue has a default max number of archived table versions (can be increased).\n+   *                    So for streaming use case with lots of commits, it is recommended to turn this feature off.\n+   */\n+  public GlueCatalog(\n+      Configuration conf,\n+      String catalogId,\n+      String warehousePath,\n+      boolean skipArchive) {\n+    this(conf, GlueClient.create(), catalogId, warehousePath, skipArchive);\n+  }\n+\n+  @Override\n+  public String name() {\n+    return catalogName;\n+  }\n+\n+  /**\n+   * All-arg constructor\n+   * @param conf Hadoop config, passed in for users of HadoopIO\n+   * @param glue Glue client\n+   * @param catalogId Glue catalog ID, which is the AWS account ID. When null, it uses the account of the Glue client.\n+   * @param warehousePath warehouse path, such as s3://my-iceberg-bucket/metadata_prod\n+   * @param skipArchive if Glue should skip an old table version when creating a new version in a commit.\n+   *                    By default Glue archives all old table versions after an UpdateTable call.\n+   *                    but Glue has a default max number of archived table versions (can be increased).\n+   *                    So for streaming use case with lots of commits, it is recommended to turn this feature off.\n+   */\n+  public GlueCatalog(\n+      Configuration conf,\n+      GlueClient glue,\n+      String catalogId,\n+      String warehousePath,\n+      boolean skipArchive) {\n+    this.conf = Preconditions.checkNotNull(conf, \"Cannot initialize GlueCatalog because Hadoop config is null\");\n+    this.glue = Preconditions.checkNotNull(glue, \"Cannot initialize GlueCatalog because GlueClient is null\");\n+    this.catalogId = catalogId;\n+    this.catalogName = \"glue.\" + catalogId; // for logging purpose\n+    this.warehousePath = warehousePath;\n+    this.skipArchive = skipArchive;\n+    validateWarehousePath();\n+  }\n+\n+  private void validateWarehousePath() {\n+    Preconditions.checkArgument(warehousePath != null && warehousePath.length() > 0,\n+        \"Cannot initialize GlueCatalog because warehousePath must not be null\");\n+    Preconditions.checkArgument(warehousePath.charAt(warehousePath.length() - 1) != '/',\n+        \"Cannot initialize GlueCatalog because warehousePath %s must not end with /\", warehousePath);\n+  }\n+\n+  @Override\n+  public void close() throws IOException {\n+    glue.close();\n+  }\n+\n+  @Override\n+  protected TableOperations newTableOps(TableIdentifier tableIdentifier) {\n+    return new GlueTableOperations(conf, glue, catalogId, skipArchive, tableIdentifier);\n+  }\n+\n+  /**\n+   * This method produces the same result as using a HiveCatalog.\n+   * If databaseUri exists for the Glue database URI, the default location is databaseUri/tableName.\n+   * If not, the default location is warehousePath/databaseName.db/tableName\n+   * @param tableIdentifier table id\n+   * @return default warehouse path\n+   */\n+  @Override\n+  protected String defaultWarehouseLocation(TableIdentifier tableIdentifier) {\n+    // check if value is set in database\n+    GetDatabaseResponse response = glue.getDatabase(GetDatabaseRequest.builder()\n+        .name(IcebergToGlueConverter.getDatabaseName(tableIdentifier))\n+        .build());\n+    String dbLocationUri = response.database().locationUri();\n+    if (dbLocationUri != null) {\n+      return String.format(\"%s/%s\", dbLocationUri, tableIdentifier.name());\n+    }\n+    return String.format(\n+        \"%s/%s.db/%s\",\n+        warehousePath,\n+        IcebergToGlueConverter.getDatabaseName(tableIdentifier),\n+        tableIdentifier.name());\n+  }\n+\n+  @Override\n+  public List<TableIdentifier> listTables(Namespace namespace) {\n+    namespaceExists(namespace);\n+    // should be safe to list all before returning the list, instead of dynamically load the list.\n+    String nextToken = null;\n+    List<TableIdentifier> results = new ArrayList<>();\n+    do {\n+      GetTablesResponse response = glue.getTables(GetTablesRequest.builder()\n+          .catalogId(catalogId)\n+          .databaseName(IcebergToGlueConverter.toDatabaseName(namespace))\n+          .nextToken(nextToken)\n+          .build());\n+      if (response.hasTableList()) {\n+        results.addAll(response.tableList().stream()\n+            .map(GlueToIcebergConverter::toTableId)\n+            .collect(Collectors.toList()));\n+        nextToken = response.nextToken();\n+      }\n+    } while (nextToken != null);\n+    LOG.debug(\"Listing of namespace: {} resulted in the following tables: {}\", namespace, results);\n+    return results;\n+  }\n+\n+  @Override\n+  public boolean dropTable(TableIdentifier identifier, boolean purge) {\n+    try {\n+      TableOperations ops = newTableOps(identifier);\n+      TableMetadata lastMetadata = ops.current();\n+      glue.deleteTable(DeleteTableRequest.builder()\n+          .catalogId(catalogId)\n+          .databaseName(IcebergToGlueConverter.getDatabaseName(identifier))\n+          .name(identifier.name())\n+          .build());\n+      LOG.info(\"Successfully dropped table {} from Glue\", identifier);\n+      if (purge && lastMetadata != null) {\n+        CatalogUtil.dropTableData(ops.io(), lastMetadata);\n+        LOG.info(\"Glue table {} data purged\", identifier);\n+      }\n+      LOG.info(\"Dropped table: {}\", identifier);\n+      return true;\n+    } catch (EntityNotFoundException e) {\n+      LOG.error(\"Cannot drop table {} because table not found or not accessible\", identifier, e);\n+      return false;\n+    } catch (Exception e) {\n+      LOG.error(\"Cannot complete drop table operation for {} due to unexpected exception\", identifier, e);\n+      throw e;\n+    }\n+  }\n+\n+  /**\n+   * Rename table in Glue is a drop table and create table.\n+   * @param from identifier of the table to rename\n+   * @param to new table name\n+   */\n+  @Override\n+  public void renameTable(TableIdentifier from, TableIdentifier to) {\n+    // check new namespace exists\n+    if (!namespaceExists(to.namespace())) {\n+      throw new NoSuchNamespaceException(\"Cannot rename %s to %s because namespace %s does not exist\",\n+          from, to, to.namespace());\n+    }\n+    // keep metadata\n+    Table fromTable = null;\n+    String fromTableDbName = IcebergToGlueConverter.getDatabaseName(from);\n+    String fromTableName = IcebergToGlueConverter.getTableName(from);\n+    try {\n+      GetTableResponse response = glue.getTable(GetTableRequest.builder()\n+          .catalogId(catalogId)\n+          .databaseName(fromTableDbName)\n+          .name(fromTableName)\n+          .build());\n+      fromTable = response.table();\n+    } catch (EntityNotFoundException e) {\n+      throw new NoSuchTableException(e, \"Cannot rename %s because the table does not exist in Glue\", from);\n+    }\n+    dropTable(from, false);\n+    // use the same Glue info to create the new table, pointing to the old metadata\n+    TableInput.Builder tableInputBuilder = TableInput.builder()\n+        .owner(fromTable.owner())\n+        .tableType(fromTable.tableType())\n+        .parameters(fromTable.parameters());\n+    try {\n+      glue.createTable(CreateTableRequest.builder()\n+          .catalogId(catalogId)\n+          .databaseName(IcebergToGlueConverter.getDatabaseName(to))\n+          .tableInput(tableInputBuilder.name(IcebergToGlueConverter.getTableName(to)).build())\n+          .build());\n+      LOG.info(\"Renamed table from {} to {}\", from, to);\n+    } catch (AwsServiceException | NoSuchTableException e) {\n+      // rollback, recreate old table and rethrow exception\n+      LOG.error(\"Fail to rename table from {} to {}, rollback the old table\", from, to, e);\n+      glue.createTable(CreateTableRequest.builder()\n+          .catalogId(catalogId)\n+          .databaseName(fromTableDbName)\n+          .tableInput(tableInputBuilder.name(fromTableName).build())\n+          .build());\n+      throw e;\n+    }\n+  }\n+\n+  @Override\n+  public void createNamespace(Namespace namespace, Map<String, String> metadata) {\n+    try {\n+      glue.createDatabase(CreateDatabaseRequest.builder()\n+          .catalogId(catalogId)\n+          .databaseInput(IcebergToGlueConverter.toDatabaseInput(namespace, metadata))\n+          .build());\n+      LOG.info(\"Created namespace: {}\", namespace);\n+    } catch (software.amazon.awssdk.services.glue.model.AlreadyExistsException e) {\n+      throw new AlreadyExistsException(\"Cannot create namespace %s because it already exists in Glue\", namespace);\n+    }\n+  }\n+\n+  @Override\n+  public List<Namespace> listNamespaces(Namespace namespace) throws NoSuchNamespaceException {\n+    if (!namespace.isEmpty()) {\n+      // if it is not a list all op, just check if the namespace exists and return itself.\n+      if (namespaceExists(namespace)) {\n+        return Lists.newArrayList(namespace);\n+      }\n+      throw new NoSuchNamespaceException(\n+          \"Glue does not support nested namespace, cannot list namespaces under %s\", namespace);\n+    }\n+    // should be safe to list all before returning the list, instead of dynamically load the list.\n+    String nextToken = null;\n+    List<Namespace> results = new ArrayList<>();\n+    do {\n+      GetDatabasesResponse response = glue.getDatabases(GetDatabasesRequest.builder()\n+          .catalogId(catalogId)\n+          .nextToken(nextToken)\n+          .build());\n+      if (response.hasDatabaseList()) {\n+        results.addAll(response.databaseList().stream()\n+            .map(GlueToIcebergConverter::toNamespace)\n+            .collect(Collectors.toList()));\n+        nextToken = response.nextToken();\n+      }\n+    } while (nextToken != null);\n+    LOG.debug(\"Listing namespace {} returned namespaces: {}\", namespace, results);\n+    return results;\n+  }\n+\n+  @Override\n+  public Map<String, String> loadNamespaceMetadata(Namespace namespace) throws NoSuchNamespaceException {\n+    String databaseName = IcebergToGlueConverter.toDatabaseName(namespace);\n+    try {\n+      GetDatabaseResponse response = glue.getDatabase(GetDatabaseRequest.builder()\n+          .catalogId(catalogId)\n+          .name(databaseName)\n+          .build());\n+      Map<String, String> result = response.database().parameters();\n+      LOG.debug(\"Loaded metadata for namespace {} found {}\", namespace, result);\n+      return result;\n+    } catch (InvalidInputException e) {\n+      throw new NoSuchNamespaceException(\"invalid input for namespace %s, error message: %s\",\n+          namespace, e.getMessage());\n+    } catch (EntityNotFoundException e) {\n+      throw new NoSuchNamespaceException(\"fail to find Glue database for namespace %s, error message: %s\",\n+          databaseName, e.getMessage());\n+    }\n+  }\n+\n+  @Override\n+  public boolean dropNamespace(Namespace namespace) throws NamespaceNotEmptyException {\n+    namespaceExists(namespace);\n+    List<TableIdentifier> tableIdentifiers = listTables(namespace);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bdb4dd597475c06cfc31080f01712ef6a9d8a7e6"}, "originalPosition": 348}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE4ODkzODU0", "url": "https://github.com/apache/iceberg/pull/1633#pullrequestreview-518893854", "createdAt": "2020-10-28T17:04:59Z", "commit": {"oid": "bdb4dd597475c06cfc31080f01712ef6a9d8a7e6"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxNzowNTowMFrOHp0jRw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxNzowNTowMFrOHp0jRw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzYxNDY2Mw==", "bodyText": "This name isn't very descriptive. It seems to mean \"a parameter that will be passed somewhere\", but doesn't describe what the object is. I think a better name would be newProperties or similar. That fits the conventions we use elsewhere.", "url": "https://github.com/apache/iceberg/pull/1633#discussion_r513614663", "createdAt": "2020-10-28T17:05:00Z", "author": {"login": "rdblue"}, "path": "aws/src/main/java/org/apache/iceberg/aws/glue/GlueCatalog.java", "diffHunk": "@@ -0,0 +1,398 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.aws.glue;\n+\n+import java.io.Closeable;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import org.apache.commons.collections.CollectionUtils;\n+import org.apache.hadoop.conf.Configuration;\n+import org.apache.iceberg.BaseMetastoreCatalog;\n+import org.apache.iceberg.CatalogUtil;\n+import org.apache.iceberg.TableMetadata;\n+import org.apache.iceberg.TableOperations;\n+import org.apache.iceberg.aws.IcebergAWSConfigs;\n+import org.apache.iceberg.catalog.Namespace;\n+import org.apache.iceberg.catalog.SupportsNamespaces;\n+import org.apache.iceberg.catalog.TableIdentifier;\n+import org.apache.iceberg.exceptions.AlreadyExistsException;\n+import org.apache.iceberg.exceptions.NamespaceNotEmptyException;\n+import org.apache.iceberg.exceptions.NoSuchNamespaceException;\n+import org.apache.iceberg.exceptions.NoSuchTableException;\n+import org.apache.iceberg.relocated.com.google.common.base.Preconditions;\n+import org.apache.iceberg.relocated.com.google.common.collect.Lists;\n+import org.apache.iceberg.relocated.com.google.common.collect.Maps;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import software.amazon.awssdk.awscore.exception.AwsServiceException;\n+import software.amazon.awssdk.services.glue.GlueClient;\n+import software.amazon.awssdk.services.glue.model.CreateDatabaseRequest;\n+import software.amazon.awssdk.services.glue.model.CreateTableRequest;\n+import software.amazon.awssdk.services.glue.model.DeleteDatabaseRequest;\n+import software.amazon.awssdk.services.glue.model.DeleteTableRequest;\n+import software.amazon.awssdk.services.glue.model.EntityNotFoundException;\n+import software.amazon.awssdk.services.glue.model.GetDatabaseRequest;\n+import software.amazon.awssdk.services.glue.model.GetDatabaseResponse;\n+import software.amazon.awssdk.services.glue.model.GetDatabasesRequest;\n+import software.amazon.awssdk.services.glue.model.GetDatabasesResponse;\n+import software.amazon.awssdk.services.glue.model.GetTableRequest;\n+import software.amazon.awssdk.services.glue.model.GetTableResponse;\n+import software.amazon.awssdk.services.glue.model.GetTablesRequest;\n+import software.amazon.awssdk.services.glue.model.GetTablesResponse;\n+import software.amazon.awssdk.services.glue.model.InvalidInputException;\n+import software.amazon.awssdk.services.glue.model.Table;\n+import software.amazon.awssdk.services.glue.model.TableInput;\n+import software.amazon.awssdk.services.glue.model.UpdateDatabaseRequest;\n+\n+public class GlueCatalog extends BaseMetastoreCatalog implements Closeable, SupportsNamespaces {\n+\n+  private static final Logger LOG = LoggerFactory.getLogger(GlueCatalog.class);\n+\n+  private final Configuration conf;\n+  private final GlueClient glue;\n+  private final String catalogId;\n+  private final String catalogName;\n+  private final String warehousePath;\n+  private final boolean skipArchive;\n+\n+  /**\n+   * Constructor that initializes all args from Hadoop configuration, used by engines like Spark and Flink\n+   * @param conf Hadoop config passed from engines\n+   */\n+  public GlueCatalog(Configuration conf) {\n+    this(\n+        conf,\n+        conf.get(IcebergAWSConfigs.ICEBERG_AWS_GLUE_CATALOG_ID),\n+        conf.get(IcebergAWSConfigs.ICEBERG_AWS_GLUE_WAREHOUSE_PATH),\n+        conf.getBoolean(IcebergAWSConfigs.ICEBERG_AWS_GLUE_SKIP_ARCHIVE,\n+            IcebergAWSConfigs.ICEBERG_AWS_GLUE_SKIP_ARCHIVE_DEFAULT)\n+    );\n+  }\n+\n+  /**\n+   * Constructor with default glue client\n+   * @param conf Hadoop config, passed in for users of HadoopIO\n+   * @param catalogId Glue catalog ID, which is the AWS account ID. When null, it uses the account of the Glue client.\n+   * @param warehousePath warehouse path, such as s3://my-iceberg-bucket/metadata_prod\n+   * @param skipArchive if Glue should skip an old table version when creating a new version in a commit.\n+   *                    By default Glue archives all old table versions after an UpdateTable call.\n+   *                    but Glue has a default max number of archived table versions (can be increased).\n+   *                    So for streaming use case with lots of commits, it is recommended to turn this feature off.\n+   */\n+  public GlueCatalog(\n+      Configuration conf,\n+      String catalogId,\n+      String warehousePath,\n+      boolean skipArchive) {\n+    this(conf, GlueClient.create(), catalogId, warehousePath, skipArchive);\n+  }\n+\n+  @Override\n+  public String name() {\n+    return catalogName;\n+  }\n+\n+  /**\n+   * All-arg constructor\n+   * @param conf Hadoop config, passed in for users of HadoopIO\n+   * @param glue Glue client\n+   * @param catalogId Glue catalog ID, which is the AWS account ID. When null, it uses the account of the Glue client.\n+   * @param warehousePath warehouse path, such as s3://my-iceberg-bucket/metadata_prod\n+   * @param skipArchive if Glue should skip an old table version when creating a new version in a commit.\n+   *                    By default Glue archives all old table versions after an UpdateTable call.\n+   *                    but Glue has a default max number of archived table versions (can be increased).\n+   *                    So for streaming use case with lots of commits, it is recommended to turn this feature off.\n+   */\n+  public GlueCatalog(\n+      Configuration conf,\n+      GlueClient glue,\n+      String catalogId,\n+      String warehousePath,\n+      boolean skipArchive) {\n+    this.conf = Preconditions.checkNotNull(conf, \"Cannot initialize GlueCatalog because Hadoop config is null\");\n+    this.glue = Preconditions.checkNotNull(glue, \"Cannot initialize GlueCatalog because GlueClient is null\");\n+    this.catalogId = catalogId;\n+    this.catalogName = \"glue.\" + catalogId; // for logging purpose\n+    this.warehousePath = warehousePath;\n+    this.skipArchive = skipArchive;\n+    validateWarehousePath();\n+  }\n+\n+  private void validateWarehousePath() {\n+    Preconditions.checkArgument(warehousePath != null && warehousePath.length() > 0,\n+        \"Cannot initialize GlueCatalog because warehousePath must not be null\");\n+    Preconditions.checkArgument(warehousePath.charAt(warehousePath.length() - 1) != '/',\n+        \"Cannot initialize GlueCatalog because warehousePath %s must not end with /\", warehousePath);\n+  }\n+\n+  @Override\n+  public void close() throws IOException {\n+    glue.close();\n+  }\n+\n+  @Override\n+  protected TableOperations newTableOps(TableIdentifier tableIdentifier) {\n+    return new GlueTableOperations(conf, glue, catalogId, skipArchive, tableIdentifier);\n+  }\n+\n+  /**\n+   * This method produces the same result as using a HiveCatalog.\n+   * If databaseUri exists for the Glue database URI, the default location is databaseUri/tableName.\n+   * If not, the default location is warehousePath/databaseName.db/tableName\n+   * @param tableIdentifier table id\n+   * @return default warehouse path\n+   */\n+  @Override\n+  protected String defaultWarehouseLocation(TableIdentifier tableIdentifier) {\n+    // check if value is set in database\n+    GetDatabaseResponse response = glue.getDatabase(GetDatabaseRequest.builder()\n+        .name(IcebergToGlueConverter.getDatabaseName(tableIdentifier))\n+        .build());\n+    String dbLocationUri = response.database().locationUri();\n+    if (dbLocationUri != null) {\n+      return String.format(\"%s/%s\", dbLocationUri, tableIdentifier.name());\n+    }\n+    return String.format(\n+        \"%s/%s.db/%s\",\n+        warehousePath,\n+        IcebergToGlueConverter.getDatabaseName(tableIdentifier),\n+        tableIdentifier.name());\n+  }\n+\n+  @Override\n+  public List<TableIdentifier> listTables(Namespace namespace) {\n+    namespaceExists(namespace);\n+    // should be safe to list all before returning the list, instead of dynamically load the list.\n+    String nextToken = null;\n+    List<TableIdentifier> results = new ArrayList<>();\n+    do {\n+      GetTablesResponse response = glue.getTables(GetTablesRequest.builder()\n+          .catalogId(catalogId)\n+          .databaseName(IcebergToGlueConverter.toDatabaseName(namespace))\n+          .nextToken(nextToken)\n+          .build());\n+      if (response.hasTableList()) {\n+        results.addAll(response.tableList().stream()\n+            .map(GlueToIcebergConverter::toTableId)\n+            .collect(Collectors.toList()));\n+        nextToken = response.nextToken();\n+      }\n+    } while (nextToken != null);\n+    LOG.debug(\"Listing of namespace: {} resulted in the following tables: {}\", namespace, results);\n+    return results;\n+  }\n+\n+  @Override\n+  public boolean dropTable(TableIdentifier identifier, boolean purge) {\n+    try {\n+      TableOperations ops = newTableOps(identifier);\n+      TableMetadata lastMetadata = ops.current();\n+      glue.deleteTable(DeleteTableRequest.builder()\n+          .catalogId(catalogId)\n+          .databaseName(IcebergToGlueConverter.getDatabaseName(identifier))\n+          .name(identifier.name())\n+          .build());\n+      LOG.info(\"Successfully dropped table {} from Glue\", identifier);\n+      if (purge && lastMetadata != null) {\n+        CatalogUtil.dropTableData(ops.io(), lastMetadata);\n+        LOG.info(\"Glue table {} data purged\", identifier);\n+      }\n+      LOG.info(\"Dropped table: {}\", identifier);\n+      return true;\n+    } catch (EntityNotFoundException e) {\n+      LOG.error(\"Cannot drop table {} because table not found or not accessible\", identifier, e);\n+      return false;\n+    } catch (Exception e) {\n+      LOG.error(\"Cannot complete drop table operation for {} due to unexpected exception\", identifier, e);\n+      throw e;\n+    }\n+  }\n+\n+  /**\n+   * Rename table in Glue is a drop table and create table.\n+   * @param from identifier of the table to rename\n+   * @param to new table name\n+   */\n+  @Override\n+  public void renameTable(TableIdentifier from, TableIdentifier to) {\n+    // check new namespace exists\n+    if (!namespaceExists(to.namespace())) {\n+      throw new NoSuchNamespaceException(\"Cannot rename %s to %s because namespace %s does not exist\",\n+          from, to, to.namespace());\n+    }\n+    // keep metadata\n+    Table fromTable = null;\n+    String fromTableDbName = IcebergToGlueConverter.getDatabaseName(from);\n+    String fromTableName = IcebergToGlueConverter.getTableName(from);\n+    try {\n+      GetTableResponse response = glue.getTable(GetTableRequest.builder()\n+          .catalogId(catalogId)\n+          .databaseName(fromTableDbName)\n+          .name(fromTableName)\n+          .build());\n+      fromTable = response.table();\n+    } catch (EntityNotFoundException e) {\n+      throw new NoSuchTableException(e, \"Cannot rename %s because the table does not exist in Glue\", from);\n+    }\n+    dropTable(from, false);\n+    // use the same Glue info to create the new table, pointing to the old metadata\n+    TableInput.Builder tableInputBuilder = TableInput.builder()\n+        .owner(fromTable.owner())\n+        .tableType(fromTable.tableType())\n+        .parameters(fromTable.parameters());\n+    try {\n+      glue.createTable(CreateTableRequest.builder()\n+          .catalogId(catalogId)\n+          .databaseName(IcebergToGlueConverter.getDatabaseName(to))\n+          .tableInput(tableInputBuilder.name(IcebergToGlueConverter.getTableName(to)).build())\n+          .build());\n+      LOG.info(\"Renamed table from {} to {}\", from, to);\n+    } catch (AwsServiceException | NoSuchTableException e) {\n+      // rollback, recreate old table and rethrow exception\n+      LOG.error(\"Fail to rename table from {} to {}, rollback the old table\", from, to, e);\n+      glue.createTable(CreateTableRequest.builder()\n+          .catalogId(catalogId)\n+          .databaseName(fromTableDbName)\n+          .tableInput(tableInputBuilder.name(fromTableName).build())\n+          .build());\n+      throw e;\n+    }\n+  }\n+\n+  @Override\n+  public void createNamespace(Namespace namespace, Map<String, String> metadata) {\n+    try {\n+      glue.createDatabase(CreateDatabaseRequest.builder()\n+          .catalogId(catalogId)\n+          .databaseInput(IcebergToGlueConverter.toDatabaseInput(namespace, metadata))\n+          .build());\n+      LOG.info(\"Created namespace: {}\", namespace);\n+    } catch (software.amazon.awssdk.services.glue.model.AlreadyExistsException e) {\n+      throw new AlreadyExistsException(\"Cannot create namespace %s because it already exists in Glue\", namespace);\n+    }\n+  }\n+\n+  @Override\n+  public List<Namespace> listNamespaces(Namespace namespace) throws NoSuchNamespaceException {\n+    if (!namespace.isEmpty()) {\n+      // if it is not a list all op, just check if the namespace exists and return itself.\n+      if (namespaceExists(namespace)) {\n+        return Lists.newArrayList(namespace);\n+      }\n+      throw new NoSuchNamespaceException(\n+          \"Glue does not support nested namespace, cannot list namespaces under %s\", namespace);\n+    }\n+    // should be safe to list all before returning the list, instead of dynamically load the list.\n+    String nextToken = null;\n+    List<Namespace> results = new ArrayList<>();\n+    do {\n+      GetDatabasesResponse response = glue.getDatabases(GetDatabasesRequest.builder()\n+          .catalogId(catalogId)\n+          .nextToken(nextToken)\n+          .build());\n+      if (response.hasDatabaseList()) {\n+        results.addAll(response.databaseList().stream()\n+            .map(GlueToIcebergConverter::toNamespace)\n+            .collect(Collectors.toList()));\n+        nextToken = response.nextToken();\n+      }\n+    } while (nextToken != null);\n+    LOG.debug(\"Listing namespace {} returned namespaces: {}\", namespace, results);\n+    return results;\n+  }\n+\n+  @Override\n+  public Map<String, String> loadNamespaceMetadata(Namespace namespace) throws NoSuchNamespaceException {\n+    String databaseName = IcebergToGlueConverter.toDatabaseName(namespace);\n+    try {\n+      GetDatabaseResponse response = glue.getDatabase(GetDatabaseRequest.builder()\n+          .catalogId(catalogId)\n+          .name(databaseName)\n+          .build());\n+      Map<String, String> result = response.database().parameters();\n+      LOG.debug(\"Loaded metadata for namespace {} found {}\", namespace, result);\n+      return result;\n+    } catch (InvalidInputException e) {\n+      throw new NoSuchNamespaceException(\"invalid input for namespace %s, error message: %s\",\n+          namespace, e.getMessage());\n+    } catch (EntityNotFoundException e) {\n+      throw new NoSuchNamespaceException(\"fail to find Glue database for namespace %s, error message: %s\",\n+          databaseName, e.getMessage());\n+    }\n+  }\n+\n+  @Override\n+  public boolean dropNamespace(Namespace namespace) throws NamespaceNotEmptyException {\n+    namespaceExists(namespace);\n+    List<TableIdentifier> tableIdentifiers = listTables(namespace);\n+    if (!CollectionUtils.isEmpty(tableIdentifiers)) {\n+      throw new NamespaceNotEmptyException(\"Cannot drop namespace %s because it is not empty. \" +\n+          \"The following tables still exist under the namespace: %s\", namespace, tableIdentifiers);\n+    }\n+    glue.deleteDatabase(DeleteDatabaseRequest.builder()\n+        .catalogId(catalogId)\n+        .name(IcebergToGlueConverter.toDatabaseName(namespace))\n+        .build());\n+    LOG.info(\"Dropped namespace: {}\", namespace);\n+    // Always successful, otherwise exception is thrown\n+    return true;\n+  }\n+\n+  @Override\n+  public boolean setProperties(Namespace namespace, Map<String, String> properties) throws NoSuchNamespaceException {\n+    Map<String, String> parameter = Maps.newHashMap();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bdb4dd597475c06cfc31080f01712ef6a9d8a7e6"}, "originalPosition": 364}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE4ODk3NTI0", "url": "https://github.com/apache/iceberg/pull/1633#pullrequestreview-518897524", "createdAt": "2020-10-28T17:08:53Z", "commit": {"oid": "bdb4dd597475c06cfc31080f01712ef6a9d8a7e6"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxNzowODo1M1rOHp0uWg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxNzowODo1M1rOHp0uWg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzYxNzQ5OA==", "bodyText": "Can Glue only have one catalog per account? Saying that the catalog ID \"is\" the AWS account ID seems to imply that.\nAssuming that the account ID is a default catalog ID, I think that this should be more clear that the account ID is used by default, and that is the ID for the account's default catalog.", "url": "https://github.com/apache/iceberg/pull/1633#discussion_r513617498", "createdAt": "2020-10-28T17:08:53Z", "author": {"login": "rdblue"}, "path": "aws/src/main/java/org/apache/iceberg/aws/glue/GlueTableOperations.java", "diffHunk": "@@ -0,0 +1,228 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.aws.glue;\n+\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Optional;\n+import org.apache.hadoop.conf.Configuration;\n+import org.apache.iceberg.BaseMetastoreTableOperations;\n+import org.apache.iceberg.TableMetadata;\n+import org.apache.iceberg.catalog.TableIdentifier;\n+import org.apache.iceberg.exceptions.AlreadyExistsException;\n+import org.apache.iceberg.exceptions.CommitFailedException;\n+import org.apache.iceberg.exceptions.NoSuchTableException;\n+import org.apache.iceberg.hadoop.HadoopFileIO;\n+import org.apache.iceberg.io.FileIO;\n+import org.apache.iceberg.relocated.com.google.common.collect.Maps;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import software.amazon.awssdk.services.glue.GlueClient;\n+import software.amazon.awssdk.services.glue.model.ConcurrentModificationException;\n+import software.amazon.awssdk.services.glue.model.CreateTableRequest;\n+import software.amazon.awssdk.services.glue.model.EntityNotFoundException;\n+import software.amazon.awssdk.services.glue.model.GetTableRequest;\n+import software.amazon.awssdk.services.glue.model.GetTableResponse;\n+import software.amazon.awssdk.services.glue.model.OperationTimeoutException;\n+import software.amazon.awssdk.services.glue.model.ResourceNumberLimitExceededException;\n+import software.amazon.awssdk.services.glue.model.Table;\n+import software.amazon.awssdk.services.glue.model.TableInput;\n+import software.amazon.awssdk.services.glue.model.UpdateTableRequest;\n+\n+public class GlueTableOperations extends BaseMetastoreTableOperations {\n+\n+  private static final Logger LOG = LoggerFactory.getLogger(GlueTableOperations.class);\n+\n+  // same as org.apache.hadoop.hive.metastore.TableType.EXTERNAL_TABLE\n+  // more details: https://docs.aws.amazon.com/glue/latest/webapi/API_TableInput.html\n+  protected static final String GLUE_EXTERNAL_TABLE_TYPE = \"EXTERNAL_TABLE\";\n+\n+  private final Configuration conf;\n+  private final GlueClient glue;\n+  private final String catalogId;\n+  private final boolean skipArchive;\n+  private final String databaseName;\n+  private final String tableName;\n+  private final String fullName;\n+\n+  private FileIO fileIO;\n+\n+  /**\n+   * All-arg constructor\n+   * @param conf Hadoop config, passed in for users of HadoopIO\n+   * @param glue Glue client\n+   * @param catalogId Glue catalog ID, which is the AWS account ID. When null, it uses the account of the Glue client.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bdb4dd597475c06cfc31080f01712ef6a9d8a7e6"}, "originalPosition": 72}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE4ODk5NTkz", "url": "https://github.com/apache/iceberg/pull/1633#pullrequestreview-518899593", "createdAt": "2020-10-28T17:11:05Z", "commit": {"oid": "bdb4dd597475c06cfc31080f01712ef6a9d8a7e6"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxNzoxMTowNVrOHp00gg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxNzoxMTowNVrOHp00gg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzYxOTA3NA==", "bodyText": "The full name here should be the name of the catalog, then the db and table name. This view is good for debugging (and may be what you want for toString) but the name returned for the table should be the name used to load it. So if I've called my Glue catalog prodglue, then it would be something like prodglue.rdblue.test_table.", "url": "https://github.com/apache/iceberg/pull/1633#discussion_r513619074", "createdAt": "2020-10-28T17:11:05Z", "author": {"login": "rdblue"}, "path": "aws/src/main/java/org/apache/iceberg/aws/glue/GlueTableOperations.java", "diffHunk": "@@ -0,0 +1,228 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.aws.glue;\n+\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Optional;\n+import org.apache.hadoop.conf.Configuration;\n+import org.apache.iceberg.BaseMetastoreTableOperations;\n+import org.apache.iceberg.TableMetadata;\n+import org.apache.iceberg.catalog.TableIdentifier;\n+import org.apache.iceberg.exceptions.AlreadyExistsException;\n+import org.apache.iceberg.exceptions.CommitFailedException;\n+import org.apache.iceberg.exceptions.NoSuchTableException;\n+import org.apache.iceberg.hadoop.HadoopFileIO;\n+import org.apache.iceberg.io.FileIO;\n+import org.apache.iceberg.relocated.com.google.common.collect.Maps;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import software.amazon.awssdk.services.glue.GlueClient;\n+import software.amazon.awssdk.services.glue.model.ConcurrentModificationException;\n+import software.amazon.awssdk.services.glue.model.CreateTableRequest;\n+import software.amazon.awssdk.services.glue.model.EntityNotFoundException;\n+import software.amazon.awssdk.services.glue.model.GetTableRequest;\n+import software.amazon.awssdk.services.glue.model.GetTableResponse;\n+import software.amazon.awssdk.services.glue.model.OperationTimeoutException;\n+import software.amazon.awssdk.services.glue.model.ResourceNumberLimitExceededException;\n+import software.amazon.awssdk.services.glue.model.Table;\n+import software.amazon.awssdk.services.glue.model.TableInput;\n+import software.amazon.awssdk.services.glue.model.UpdateTableRequest;\n+\n+public class GlueTableOperations extends BaseMetastoreTableOperations {\n+\n+  private static final Logger LOG = LoggerFactory.getLogger(GlueTableOperations.class);\n+\n+  // same as org.apache.hadoop.hive.metastore.TableType.EXTERNAL_TABLE\n+  // more details: https://docs.aws.amazon.com/glue/latest/webapi/API_TableInput.html\n+  protected static final String GLUE_EXTERNAL_TABLE_TYPE = \"EXTERNAL_TABLE\";\n+\n+  private final Configuration conf;\n+  private final GlueClient glue;\n+  private final String catalogId;\n+  private final boolean skipArchive;\n+  private final String databaseName;\n+  private final String tableName;\n+  private final String fullName;\n+\n+  private FileIO fileIO;\n+\n+  /**\n+   * All-arg constructor\n+   * @param conf Hadoop config, passed in for users of HadoopIO\n+   * @param glue Glue client\n+   * @param catalogId Glue catalog ID, which is the AWS account ID. When null, it uses the account of the Glue client.\n+   * @param skipArchive if Glue should skip an old table version when creating a new version in a commit.\n+   *                    By default Glue archives all old table versions after an UpdateTable call.\n+   *                    but Glue has a default max number of archived table versions (can be increased).\n+   *                    So for streaming use case with lots of commits, it is recommended to turn this feature off.\n+   * @param tableIdentifier table identifier\n+   */\n+  public GlueTableOperations(\n+      Configuration conf,\n+      GlueClient glue,\n+      String catalogId,\n+      boolean skipArchive,\n+      TableIdentifier tableIdentifier) {\n+    this.conf = conf;\n+    this.glue = glue;\n+    this.catalogId = catalogId;\n+    this.skipArchive = skipArchive;\n+    this.databaseName = IcebergToGlueConverter.getDatabaseName(tableIdentifier);\n+    this.tableName = IcebergToGlueConverter.getTableName(tableIdentifier);\n+    this.fullName = String.format(\"glue.%s.%s.%s\", catalogId, databaseName, tableName);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bdb4dd597475c06cfc31080f01712ef6a9d8a7e6"}, "originalPosition": 91}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE4OTE3MDcx", "url": "https://github.com/apache/iceberg/pull/1633#pullrequestreview-518917071", "createdAt": "2020-10-28T17:29:04Z", "commit": {"oid": "bdb4dd597475c06cfc31080f01712ef6a9d8a7e6"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxNzoyOTowNFrOHp1nbg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxNzoyOTowNFrOHp1nbg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzYzMjExMA==", "bodyText": "Is this required? Using user.name doesn't seem like a very accurate way to determine the user.", "url": "https://github.com/apache/iceberg/pull/1633#discussion_r513632110", "createdAt": "2020-10-28T17:29:04Z", "author": {"login": "rdblue"}, "path": "aws/src/main/java/org/apache/iceberg/aws/glue/GlueTableOperations.java", "diffHunk": "@@ -0,0 +1,228 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.aws.glue;\n+\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Optional;\n+import org.apache.hadoop.conf.Configuration;\n+import org.apache.iceberg.BaseMetastoreTableOperations;\n+import org.apache.iceberg.TableMetadata;\n+import org.apache.iceberg.catalog.TableIdentifier;\n+import org.apache.iceberg.exceptions.AlreadyExistsException;\n+import org.apache.iceberg.exceptions.CommitFailedException;\n+import org.apache.iceberg.exceptions.NoSuchTableException;\n+import org.apache.iceberg.hadoop.HadoopFileIO;\n+import org.apache.iceberg.io.FileIO;\n+import org.apache.iceberg.relocated.com.google.common.collect.Maps;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import software.amazon.awssdk.services.glue.GlueClient;\n+import software.amazon.awssdk.services.glue.model.ConcurrentModificationException;\n+import software.amazon.awssdk.services.glue.model.CreateTableRequest;\n+import software.amazon.awssdk.services.glue.model.EntityNotFoundException;\n+import software.amazon.awssdk.services.glue.model.GetTableRequest;\n+import software.amazon.awssdk.services.glue.model.GetTableResponse;\n+import software.amazon.awssdk.services.glue.model.OperationTimeoutException;\n+import software.amazon.awssdk.services.glue.model.ResourceNumberLimitExceededException;\n+import software.amazon.awssdk.services.glue.model.Table;\n+import software.amazon.awssdk.services.glue.model.TableInput;\n+import software.amazon.awssdk.services.glue.model.UpdateTableRequest;\n+\n+public class GlueTableOperations extends BaseMetastoreTableOperations {\n+\n+  private static final Logger LOG = LoggerFactory.getLogger(GlueTableOperations.class);\n+\n+  // same as org.apache.hadoop.hive.metastore.TableType.EXTERNAL_TABLE\n+  // more details: https://docs.aws.amazon.com/glue/latest/webapi/API_TableInput.html\n+  protected static final String GLUE_EXTERNAL_TABLE_TYPE = \"EXTERNAL_TABLE\";\n+\n+  private final Configuration conf;\n+  private final GlueClient glue;\n+  private final String catalogId;\n+  private final boolean skipArchive;\n+  private final String databaseName;\n+  private final String tableName;\n+  private final String fullName;\n+\n+  private FileIO fileIO;\n+\n+  /**\n+   * All-arg constructor\n+   * @param conf Hadoop config, passed in for users of HadoopIO\n+   * @param glue Glue client\n+   * @param catalogId Glue catalog ID, which is the AWS account ID. When null, it uses the account of the Glue client.\n+   * @param skipArchive if Glue should skip an old table version when creating a new version in a commit.\n+   *                    By default Glue archives all old table versions after an UpdateTable call.\n+   *                    but Glue has a default max number of archived table versions (can be increased).\n+   *                    So for streaming use case with lots of commits, it is recommended to turn this feature off.\n+   * @param tableIdentifier table identifier\n+   */\n+  public GlueTableOperations(\n+      Configuration conf,\n+      GlueClient glue,\n+      String catalogId,\n+      boolean skipArchive,\n+      TableIdentifier tableIdentifier) {\n+    this.conf = conf;\n+    this.glue = glue;\n+    this.catalogId = catalogId;\n+    this.skipArchive = skipArchive;\n+    this.databaseName = IcebergToGlueConverter.getDatabaseName(tableIdentifier);\n+    this.tableName = IcebergToGlueConverter.getTableName(tableIdentifier);\n+    this.fullName = String.format(\"glue.%s.%s.%s\", catalogId, databaseName, tableName);\n+  }\n+\n+  @Override\n+  public FileIO io() {\n+    if (fileIO == null) {\n+      fileIO = new HadoopFileIO(conf);\n+    }\n+    return fileIO;\n+  }\n+\n+  /**\n+   * Returns table name in the form glue.catalogId.databaseName.tableName\n+   * @return table name\n+   */\n+  @Override\n+  protected String tableName() {\n+    return fullName;\n+  }\n+\n+  @Override\n+  protected void doRefresh() {\n+    String metadataLocation = null;\n+    Optional<Table> tableOptional = getGlueTable();\n+    if (tableOptional.isPresent()) {\n+      Table table = tableOptional.get();\n+      GlueToIcebergConverter.validateTable(table, tableName());\n+      metadataLocation = table.parameters().get(METADATA_LOCATION_PROP);\n+    } else {\n+      if (currentMetadataLocation() != null) {\n+        throw new NoSuchTableException(\"Cannot find Glue table %s after refresh, \" +\n+            \"maybe another process deleted it or revoked your access permission\", tableName());\n+      }\n+    }\n+    refreshFromMetadataLocation(metadataLocation);\n+  }\n+\n+  @Override\n+  protected void doCommit(TableMetadata base, TableMetadata metadata) {\n+    String newMetadataLocation = writeNewMetadata(metadata, currentVersion() + 1);\n+    boolean exceptionThrown = true;\n+    boolean isUpdate = false;\n+    Table glueTable = null;\n+    try {\n+      Optional<Table> glueTableOptional = getGlueTable();\n+      if (glueTableOptional.isPresent()) {\n+        glueTable = glueTableOptional.get();\n+        // If we try to create the table but the metadata location is already set, then we had a concurrent commit\n+        if (base == null && glueTable.parameters().get(METADATA_LOCATION_PROP) != null) {\n+          throw new AlreadyExistsException(\"Cannot commit because table %s already exists in Glue\", tableName());\n+        }\n+        isUpdate = true;\n+        LOG.debug(\"Committing existing Glue table: {}\", tableName());\n+      } else {\n+        LOG.debug(\"Committing new Glue table: {}\", tableName());\n+      }\n+      checkMetadataLocation(isUpdate, glueTable, base);\n+      Map<String, String> parameters = isUpdate ? Maps.newHashMap(glueTable.parameters()) : Maps.newHashMap();\n+      updateParameters(parameters, newMetadataLocation);\n+      persistGlueTable(isUpdate, parameters);\n+      exceptionThrown = false;\n+    } catch (CommitFailedException | AlreadyExistsException e) {\n+      throw e;\n+    } catch (ConcurrentModificationException e) {\n+      throw new CommitFailedException(e,\n+          \"Cannot commit %s because Glue detected concurrent update\", tableName());\n+    } catch (software.amazon.awssdk.services.glue.model.AlreadyExistsException e) {\n+      throw new AlreadyExistsException(e,\n+          \"Cannot commit %s because its Glue table already exists when trying to create one\", tableName());\n+    } catch (OperationTimeoutException | ResourceNumberLimitExceededException e) {\n+      throw new CommitFailedException(e,\n+          \"Cannot commit %s because Glue operation or resource limit exceeded, \" +\n+              \"please consider contact AWS to raise the limit\", tableName());\n+    } catch (Exception e) {\n+      throw new RuntimeException(\"Unexpected exception during commit for \" + tableName(), e);\n+    } finally {\n+      if (exceptionThrown) {\n+        io().deleteFile(newMetadataLocation);\n+      }\n+    }\n+  }\n+\n+  private void checkMetadataLocation(boolean isUpdate, Table glueTable, TableMetadata base) {\n+    String glueMetadataLocation = isUpdate ? glueTable.parameters().get(METADATA_LOCATION_PROP) : null;\n+    String baseMetadataLocation = base != null ? base.metadataFileLocation() : null;\n+    if (!Objects.equals(baseMetadataLocation, glueMetadataLocation)) {\n+      throw new CommitFailedException(\n+          \"Cannot commit %s because base metadata location '%s' is not same as the current Glue location '%s'\",\n+          tableName(), baseMetadataLocation, glueMetadataLocation);\n+    }\n+  }\n+\n+  private Optional<Table> getGlueTable() {\n+    try {\n+      GetTableResponse response = glue.getTable(GetTableRequest.builder()\n+          .catalogId(catalogId)\n+          .databaseName(databaseName)\n+          .name(tableName)\n+          .build());\n+      return Optional.ofNullable(response.table());\n+    } catch (EntityNotFoundException e) {\n+      return Optional.empty();\n+    }\n+  }\n+\n+  private void updateParameters(Map<String, String> parameters, String newMetadataLocation) {\n+    parameters.put(TABLE_TYPE_PROP, ICEBERG_TABLE_TYPE_VALUE.toUpperCase(Locale.ENGLISH));\n+    parameters.put(METADATA_LOCATION_PROP, newMetadataLocation);\n+    if (currentMetadataLocation() != null && !currentMetadataLocation().isEmpty()) {\n+      parameters.put(PREVIOUS_METADATA_LOCATION_PROP, currentMetadataLocation());\n+    }\n+  }\n+\n+  private void persistGlueTable(boolean isUpdate, Map<String, String> parameters) {\n+    if (isUpdate) {\n+      glue.updateTable(UpdateTableRequest.builder()\n+          .catalogId(catalogId)\n+          .databaseName(databaseName)\n+          .skipArchive(skipArchive)\n+          .tableInput(TableInput.builder()\n+              .name(tableName)\n+              .parameters(parameters)\n+              .build())\n+          .build());\n+    } else {\n+      glue.createTable(CreateTableRequest.builder()\n+          .catalogId(catalogId)\n+          .databaseName(databaseName)\n+          .tableInput(TableInput.builder()\n+              .name(tableName)\n+              .owner(System.getProperty(\"user.name\"))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bdb4dd597475c06cfc31080f01712ef6a9d8a7e6"}, "originalPosition": 221}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE4OTE4Mjc3", "url": "https://github.com/apache/iceberg/pull/1633#pullrequestreview-518918277", "createdAt": "2020-10-28T17:30:23Z", "commit": {"oid": "bdb4dd597475c06cfc31080f01712ef6a9d8a7e6"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxNzozMDoyNFrOHp1rNA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxNzozMDoyNFrOHp1rNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzYzMzA3Ng==", "bodyText": "A timeout doesn't seem like the same case as exceeding a resource limit. Should these be handled separately?", "url": "https://github.com/apache/iceberg/pull/1633#discussion_r513633076", "createdAt": "2020-10-28T17:30:24Z", "author": {"login": "rdblue"}, "path": "aws/src/main/java/org/apache/iceberg/aws/glue/GlueTableOperations.java", "diffHunk": "@@ -0,0 +1,228 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.aws.glue;\n+\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Optional;\n+import org.apache.hadoop.conf.Configuration;\n+import org.apache.iceberg.BaseMetastoreTableOperations;\n+import org.apache.iceberg.TableMetadata;\n+import org.apache.iceberg.catalog.TableIdentifier;\n+import org.apache.iceberg.exceptions.AlreadyExistsException;\n+import org.apache.iceberg.exceptions.CommitFailedException;\n+import org.apache.iceberg.exceptions.NoSuchTableException;\n+import org.apache.iceberg.hadoop.HadoopFileIO;\n+import org.apache.iceberg.io.FileIO;\n+import org.apache.iceberg.relocated.com.google.common.collect.Maps;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import software.amazon.awssdk.services.glue.GlueClient;\n+import software.amazon.awssdk.services.glue.model.ConcurrentModificationException;\n+import software.amazon.awssdk.services.glue.model.CreateTableRequest;\n+import software.amazon.awssdk.services.glue.model.EntityNotFoundException;\n+import software.amazon.awssdk.services.glue.model.GetTableRequest;\n+import software.amazon.awssdk.services.glue.model.GetTableResponse;\n+import software.amazon.awssdk.services.glue.model.OperationTimeoutException;\n+import software.amazon.awssdk.services.glue.model.ResourceNumberLimitExceededException;\n+import software.amazon.awssdk.services.glue.model.Table;\n+import software.amazon.awssdk.services.glue.model.TableInput;\n+import software.amazon.awssdk.services.glue.model.UpdateTableRequest;\n+\n+public class GlueTableOperations extends BaseMetastoreTableOperations {\n+\n+  private static final Logger LOG = LoggerFactory.getLogger(GlueTableOperations.class);\n+\n+  // same as org.apache.hadoop.hive.metastore.TableType.EXTERNAL_TABLE\n+  // more details: https://docs.aws.amazon.com/glue/latest/webapi/API_TableInput.html\n+  protected static final String GLUE_EXTERNAL_TABLE_TYPE = \"EXTERNAL_TABLE\";\n+\n+  private final Configuration conf;\n+  private final GlueClient glue;\n+  private final String catalogId;\n+  private final boolean skipArchive;\n+  private final String databaseName;\n+  private final String tableName;\n+  private final String fullName;\n+\n+  private FileIO fileIO;\n+\n+  /**\n+   * All-arg constructor\n+   * @param conf Hadoop config, passed in for users of HadoopIO\n+   * @param glue Glue client\n+   * @param catalogId Glue catalog ID, which is the AWS account ID. When null, it uses the account of the Glue client.\n+   * @param skipArchive if Glue should skip an old table version when creating a new version in a commit.\n+   *                    By default Glue archives all old table versions after an UpdateTable call.\n+   *                    but Glue has a default max number of archived table versions (can be increased).\n+   *                    So for streaming use case with lots of commits, it is recommended to turn this feature off.\n+   * @param tableIdentifier table identifier\n+   */\n+  public GlueTableOperations(\n+      Configuration conf,\n+      GlueClient glue,\n+      String catalogId,\n+      boolean skipArchive,\n+      TableIdentifier tableIdentifier) {\n+    this.conf = conf;\n+    this.glue = glue;\n+    this.catalogId = catalogId;\n+    this.skipArchive = skipArchive;\n+    this.databaseName = IcebergToGlueConverter.getDatabaseName(tableIdentifier);\n+    this.tableName = IcebergToGlueConverter.getTableName(tableIdentifier);\n+    this.fullName = String.format(\"glue.%s.%s.%s\", catalogId, databaseName, tableName);\n+  }\n+\n+  @Override\n+  public FileIO io() {\n+    if (fileIO == null) {\n+      fileIO = new HadoopFileIO(conf);\n+    }\n+    return fileIO;\n+  }\n+\n+  /**\n+   * Returns table name in the form glue.catalogId.databaseName.tableName\n+   * @return table name\n+   */\n+  @Override\n+  protected String tableName() {\n+    return fullName;\n+  }\n+\n+  @Override\n+  protected void doRefresh() {\n+    String metadataLocation = null;\n+    Optional<Table> tableOptional = getGlueTable();\n+    if (tableOptional.isPresent()) {\n+      Table table = tableOptional.get();\n+      GlueToIcebergConverter.validateTable(table, tableName());\n+      metadataLocation = table.parameters().get(METADATA_LOCATION_PROP);\n+    } else {\n+      if (currentMetadataLocation() != null) {\n+        throw new NoSuchTableException(\"Cannot find Glue table %s after refresh, \" +\n+            \"maybe another process deleted it or revoked your access permission\", tableName());\n+      }\n+    }\n+    refreshFromMetadataLocation(metadataLocation);\n+  }\n+\n+  @Override\n+  protected void doCommit(TableMetadata base, TableMetadata metadata) {\n+    String newMetadataLocation = writeNewMetadata(metadata, currentVersion() + 1);\n+    boolean exceptionThrown = true;\n+    boolean isUpdate = false;\n+    Table glueTable = null;\n+    try {\n+      Optional<Table> glueTableOptional = getGlueTable();\n+      if (glueTableOptional.isPresent()) {\n+        glueTable = glueTableOptional.get();\n+        // If we try to create the table but the metadata location is already set, then we had a concurrent commit\n+        if (base == null && glueTable.parameters().get(METADATA_LOCATION_PROP) != null) {\n+          throw new AlreadyExistsException(\"Cannot commit because table %s already exists in Glue\", tableName());\n+        }\n+        isUpdate = true;\n+        LOG.debug(\"Committing existing Glue table: {}\", tableName());\n+      } else {\n+        LOG.debug(\"Committing new Glue table: {}\", tableName());\n+      }\n+      checkMetadataLocation(isUpdate, glueTable, base);\n+      Map<String, String> parameters = isUpdate ? Maps.newHashMap(glueTable.parameters()) : Maps.newHashMap();\n+      updateParameters(parameters, newMetadataLocation);\n+      persistGlueTable(isUpdate, parameters);\n+      exceptionThrown = false;\n+    } catch (CommitFailedException | AlreadyExistsException e) {\n+      throw e;\n+    } catch (ConcurrentModificationException e) {\n+      throw new CommitFailedException(e,\n+          \"Cannot commit %s because Glue detected concurrent update\", tableName());\n+    } catch (software.amazon.awssdk.services.glue.model.AlreadyExistsException e) {\n+      throw new AlreadyExistsException(e,\n+          \"Cannot commit %s because its Glue table already exists when trying to create one\", tableName());\n+    } catch (OperationTimeoutException | ResourceNumberLimitExceededException e) {\n+      throw new CommitFailedException(e,\n+          \"Cannot commit %s because Glue operation or resource limit exceeded, \" +\n+              \"please consider contact AWS to raise the limit\", tableName());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bdb4dd597475c06cfc31080f01712ef6a9d8a7e6"}, "originalPosition": 163}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE4OTE5MTQ4", "url": "https://github.com/apache/iceberg/pull/1633#pullrequestreview-518919148", "createdAt": "2020-10-28T17:31:25Z", "commit": {"oid": "bdb4dd597475c06cfc31080f01712ef6a9d8a7e6"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxNzozMToyNVrOHp1t0g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxNzozMToyNVrOHp1t0g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzYzMzc0Ng==", "bodyText": "I think it would make more sense to move these into persistGlueTable since that's when the actual call is made.", "url": "https://github.com/apache/iceberg/pull/1633#discussion_r513633746", "createdAt": "2020-10-28T17:31:25Z", "author": {"login": "rdblue"}, "path": "aws/src/main/java/org/apache/iceberg/aws/glue/GlueTableOperations.java", "diffHunk": "@@ -0,0 +1,228 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.aws.glue;\n+\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Optional;\n+import org.apache.hadoop.conf.Configuration;\n+import org.apache.iceberg.BaseMetastoreTableOperations;\n+import org.apache.iceberg.TableMetadata;\n+import org.apache.iceberg.catalog.TableIdentifier;\n+import org.apache.iceberg.exceptions.AlreadyExistsException;\n+import org.apache.iceberg.exceptions.CommitFailedException;\n+import org.apache.iceberg.exceptions.NoSuchTableException;\n+import org.apache.iceberg.hadoop.HadoopFileIO;\n+import org.apache.iceberg.io.FileIO;\n+import org.apache.iceberg.relocated.com.google.common.collect.Maps;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import software.amazon.awssdk.services.glue.GlueClient;\n+import software.amazon.awssdk.services.glue.model.ConcurrentModificationException;\n+import software.amazon.awssdk.services.glue.model.CreateTableRequest;\n+import software.amazon.awssdk.services.glue.model.EntityNotFoundException;\n+import software.amazon.awssdk.services.glue.model.GetTableRequest;\n+import software.amazon.awssdk.services.glue.model.GetTableResponse;\n+import software.amazon.awssdk.services.glue.model.OperationTimeoutException;\n+import software.amazon.awssdk.services.glue.model.ResourceNumberLimitExceededException;\n+import software.amazon.awssdk.services.glue.model.Table;\n+import software.amazon.awssdk.services.glue.model.TableInput;\n+import software.amazon.awssdk.services.glue.model.UpdateTableRequest;\n+\n+public class GlueTableOperations extends BaseMetastoreTableOperations {\n+\n+  private static final Logger LOG = LoggerFactory.getLogger(GlueTableOperations.class);\n+\n+  // same as org.apache.hadoop.hive.metastore.TableType.EXTERNAL_TABLE\n+  // more details: https://docs.aws.amazon.com/glue/latest/webapi/API_TableInput.html\n+  protected static final String GLUE_EXTERNAL_TABLE_TYPE = \"EXTERNAL_TABLE\";\n+\n+  private final Configuration conf;\n+  private final GlueClient glue;\n+  private final String catalogId;\n+  private final boolean skipArchive;\n+  private final String databaseName;\n+  private final String tableName;\n+  private final String fullName;\n+\n+  private FileIO fileIO;\n+\n+  /**\n+   * All-arg constructor\n+   * @param conf Hadoop config, passed in for users of HadoopIO\n+   * @param glue Glue client\n+   * @param catalogId Glue catalog ID, which is the AWS account ID. When null, it uses the account of the Glue client.\n+   * @param skipArchive if Glue should skip an old table version when creating a new version in a commit.\n+   *                    By default Glue archives all old table versions after an UpdateTable call.\n+   *                    but Glue has a default max number of archived table versions (can be increased).\n+   *                    So for streaming use case with lots of commits, it is recommended to turn this feature off.\n+   * @param tableIdentifier table identifier\n+   */\n+  public GlueTableOperations(\n+      Configuration conf,\n+      GlueClient glue,\n+      String catalogId,\n+      boolean skipArchive,\n+      TableIdentifier tableIdentifier) {\n+    this.conf = conf;\n+    this.glue = glue;\n+    this.catalogId = catalogId;\n+    this.skipArchive = skipArchive;\n+    this.databaseName = IcebergToGlueConverter.getDatabaseName(tableIdentifier);\n+    this.tableName = IcebergToGlueConverter.getTableName(tableIdentifier);\n+    this.fullName = String.format(\"glue.%s.%s.%s\", catalogId, databaseName, tableName);\n+  }\n+\n+  @Override\n+  public FileIO io() {\n+    if (fileIO == null) {\n+      fileIO = new HadoopFileIO(conf);\n+    }\n+    return fileIO;\n+  }\n+\n+  /**\n+   * Returns table name in the form glue.catalogId.databaseName.tableName\n+   * @return table name\n+   */\n+  @Override\n+  protected String tableName() {\n+    return fullName;\n+  }\n+\n+  @Override\n+  protected void doRefresh() {\n+    String metadataLocation = null;\n+    Optional<Table> tableOptional = getGlueTable();\n+    if (tableOptional.isPresent()) {\n+      Table table = tableOptional.get();\n+      GlueToIcebergConverter.validateTable(table, tableName());\n+      metadataLocation = table.parameters().get(METADATA_LOCATION_PROP);\n+    } else {\n+      if (currentMetadataLocation() != null) {\n+        throw new NoSuchTableException(\"Cannot find Glue table %s after refresh, \" +\n+            \"maybe another process deleted it or revoked your access permission\", tableName());\n+      }\n+    }\n+    refreshFromMetadataLocation(metadataLocation);\n+  }\n+\n+  @Override\n+  protected void doCommit(TableMetadata base, TableMetadata metadata) {\n+    String newMetadataLocation = writeNewMetadata(metadata, currentVersion() + 1);\n+    boolean exceptionThrown = true;\n+    boolean isUpdate = false;\n+    Table glueTable = null;\n+    try {\n+      Optional<Table> glueTableOptional = getGlueTable();\n+      if (glueTableOptional.isPresent()) {\n+        glueTable = glueTableOptional.get();\n+        // If we try to create the table but the metadata location is already set, then we had a concurrent commit\n+        if (base == null && glueTable.parameters().get(METADATA_LOCATION_PROP) != null) {\n+          throw new AlreadyExistsException(\"Cannot commit because table %s already exists in Glue\", tableName());\n+        }\n+        isUpdate = true;\n+        LOG.debug(\"Committing existing Glue table: {}\", tableName());\n+      } else {\n+        LOG.debug(\"Committing new Glue table: {}\", tableName());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bdb4dd597475c06cfc31080f01712ef6a9d8a7e6"}, "originalPosition": 145}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE4OTIxNDI0", "url": "https://github.com/apache/iceberg/pull/1633#pullrequestreview-518921424", "createdAt": "2020-10-28T17:33:58Z", "commit": {"oid": "bdb4dd597475c06cfc31080f01712ef6a9d8a7e6"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxNzozMzo1OVrOHp10ng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxNzozMzo1OVrOHp10ng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzYzNTQ4Ng==", "bodyText": "This doesn't appear to verify that any of the above calls actually happened. Mock tests should validate that the expected RPC calls were actually made.", "url": "https://github.com/apache/iceberg/pull/1633#discussion_r513635486", "createdAt": "2020-10-28T17:33:59Z", "author": {"login": "rdblue"}, "path": "aws/src/test/java/org/apache/iceberg/aws/glue/TestGlueCatalog.java", "diffHunk": "@@ -0,0 +1,260 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.aws.glue;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import org.apache.hadoop.conf.Configuration;\n+import org.apache.iceberg.BaseMetastoreTableOperations;\n+import org.apache.iceberg.catalog.Namespace;\n+import org.apache.iceberg.catalog.TableIdentifier;\n+import org.apache.iceberg.exceptions.NamespaceNotEmptyException;\n+import org.apache.iceberg.exceptions.NoSuchNamespaceException;\n+import org.apache.iceberg.relocated.com.google.common.collect.Lists;\n+import org.apache.iceberg.relocated.com.google.common.collect.Sets;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.mockito.Mockito;\n+import software.amazon.awssdk.services.glue.GlueClient;\n+import software.amazon.awssdk.services.glue.model.CreateDatabaseRequest;\n+import software.amazon.awssdk.services.glue.model.CreateDatabaseResponse;\n+import software.amazon.awssdk.services.glue.model.CreateTableRequest;\n+import software.amazon.awssdk.services.glue.model.CreateTableResponse;\n+import software.amazon.awssdk.services.glue.model.Database;\n+import software.amazon.awssdk.services.glue.model.DeleteDatabaseRequest;\n+import software.amazon.awssdk.services.glue.model.DeleteDatabaseResponse;\n+import software.amazon.awssdk.services.glue.model.DeleteTableRequest;\n+import software.amazon.awssdk.services.glue.model.DeleteTableResponse;\n+import software.amazon.awssdk.services.glue.model.GetDatabaseRequest;\n+import software.amazon.awssdk.services.glue.model.GetDatabaseResponse;\n+import software.amazon.awssdk.services.glue.model.GetDatabasesRequest;\n+import software.amazon.awssdk.services.glue.model.GetDatabasesResponse;\n+import software.amazon.awssdk.services.glue.model.GetTableRequest;\n+import software.amazon.awssdk.services.glue.model.GetTableResponse;\n+import software.amazon.awssdk.services.glue.model.GetTablesRequest;\n+import software.amazon.awssdk.services.glue.model.GetTablesResponse;\n+import software.amazon.awssdk.services.glue.model.Table;\n+import software.amazon.awssdk.services.glue.model.UpdateDatabaseRequest;\n+import software.amazon.awssdk.services.glue.model.UpdateDatabaseResponse;\n+\n+public class TestGlueCatalog {\n+\n+  private static final String WAREHOUSE_PATH = \"s3a://bucket\";\n+  private GlueClient glue;\n+  private GlueCatalog glueCatalog;\n+\n+  @Before\n+  public void before() {\n+    glue = Mockito.mock(GlueClient.class);\n+    glueCatalog = new GlueCatalog(new Configuration(), glue, null, WAREHOUSE_PATH, false);\n+  }\n+\n+  @Test\n+  public void defaultWarehouseLocation_noDbUri() {\n+    Mockito.doReturn(GetDatabaseResponse.builder()\n+        .database(Database.builder().name(\"db\").build()).build())\n+        .when(glue).getDatabase(Mockito.any(GetDatabaseRequest.class));\n+    String location = glueCatalog.defaultWarehouseLocation(TableIdentifier.of(\"db\", \"table\"));\n+    Assert.assertEquals(WAREHOUSE_PATH + \"/db.db/table\", location);\n+  }\n+\n+  @Test\n+  public void defaultWarehouseLocation_dbUri() {\n+    Mockito.doReturn(GetDatabaseResponse.builder()\n+        .database(Database.builder().name(\"db\").locationUri(\"s3://bucket2/db\").build()).build())\n+        .when(glue).getDatabase(Mockito.any(GetDatabaseRequest.class));\n+    String location = glueCatalog.defaultWarehouseLocation(TableIdentifier.of(\"db\", \"table\"));\n+    Assert.assertEquals(\"s3://bucket2/db/table\", location);\n+  }\n+\n+  @Test\n+  public void listTables() {\n+    Mockito.doReturn(GetDatabaseResponse.builder()\n+        .database(Database.builder().name(\"db1\").build()).build())\n+        .when(glue).getDatabase(Mockito.any(GetDatabaseRequest.class));\n+    Mockito.doReturn(GetTablesResponse.builder()\n+        .tableList(\n+            Table.builder().databaseName(\"db1\").name(\"t1\").build(),\n+            Table.builder().databaseName(\"db1\").name(\"t2\").build()\n+        ).build())\n+        .when(glue).getTables(Mockito.any(GetTablesRequest.class));\n+    Assert.assertEquals(\n+        Lists.newArrayList(\n+            TableIdentifier.of(\"db1\", \"t1\"),\n+            TableIdentifier.of(\"db1\", \"t2\")\n+        ),\n+        glueCatalog.listTables(Namespace.of(\"db1\"))\n+    );\n+  }\n+\n+  @Test\n+  public void dropTable() {\n+    Map<String, String> properties = new HashMap<>();\n+    properties.put(BaseMetastoreTableOperations.TABLE_TYPE_PROP,\n+        BaseMetastoreTableOperations.ICEBERG_TABLE_TYPE_VALUE);\n+    Mockito.doReturn(GetTableResponse.builder()\n+        .table(Table.builder().databaseName(\"db1\").name(\"t1\").parameters(properties).build()).build())\n+        .when(glue).getTable(Mockito.any(GetTableRequest.class));\n+    Mockito.doReturn(GetDatabaseResponse.builder()\n+        .database(Database.builder().name(\"db1\").build()).build())\n+        .when(glue).getDatabase(Mockito.any(GetDatabaseRequest.class));\n+    Mockito.doReturn(DeleteTableResponse.builder().build())\n+        .when(glue).deleteTable(Mockito.any(DeleteTableRequest.class));\n+    glueCatalog.dropTable(TableIdentifier.of(\"db1\", \"t1\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bdb4dd597475c06cfc31080f01712ef6a9d8a7e6"}, "originalPosition": 121}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE4OTIyNzY2", "url": "https://github.com/apache/iceberg/pull/1633#pullrequestreview-518922766", "createdAt": "2020-10-28T17:35:31Z", "commit": {"oid": "bdb4dd597475c06cfc31080f01712ef6a9d8a7e6"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxNzozNTozMVrOHp14vA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxNzozNTozMVrOHp14vA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzYzNjU0MA==", "bodyText": "It is usually better to use AssertHelpers.assertThrows. That way, you can check the error message and run additional assertions after the exception. For example, if you're testing create when a table already exists, you can validate that the right exception is thrown and that the existing table was not modified.", "url": "https://github.com/apache/iceberg/pull/1633#discussion_r513636540", "createdAt": "2020-10-28T17:35:31Z", "author": {"login": "rdblue"}, "path": "aws/src/test/java/org/apache/iceberg/aws/glue/TestGlueCatalog.java", "diffHunk": "@@ -0,0 +1,260 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.aws.glue;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import org.apache.hadoop.conf.Configuration;\n+import org.apache.iceberg.BaseMetastoreTableOperations;\n+import org.apache.iceberg.catalog.Namespace;\n+import org.apache.iceberg.catalog.TableIdentifier;\n+import org.apache.iceberg.exceptions.NamespaceNotEmptyException;\n+import org.apache.iceberg.exceptions.NoSuchNamespaceException;\n+import org.apache.iceberg.relocated.com.google.common.collect.Lists;\n+import org.apache.iceberg.relocated.com.google.common.collect.Sets;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.mockito.Mockito;\n+import software.amazon.awssdk.services.glue.GlueClient;\n+import software.amazon.awssdk.services.glue.model.CreateDatabaseRequest;\n+import software.amazon.awssdk.services.glue.model.CreateDatabaseResponse;\n+import software.amazon.awssdk.services.glue.model.CreateTableRequest;\n+import software.amazon.awssdk.services.glue.model.CreateTableResponse;\n+import software.amazon.awssdk.services.glue.model.Database;\n+import software.amazon.awssdk.services.glue.model.DeleteDatabaseRequest;\n+import software.amazon.awssdk.services.glue.model.DeleteDatabaseResponse;\n+import software.amazon.awssdk.services.glue.model.DeleteTableRequest;\n+import software.amazon.awssdk.services.glue.model.DeleteTableResponse;\n+import software.amazon.awssdk.services.glue.model.GetDatabaseRequest;\n+import software.amazon.awssdk.services.glue.model.GetDatabaseResponse;\n+import software.amazon.awssdk.services.glue.model.GetDatabasesRequest;\n+import software.amazon.awssdk.services.glue.model.GetDatabasesResponse;\n+import software.amazon.awssdk.services.glue.model.GetTableRequest;\n+import software.amazon.awssdk.services.glue.model.GetTableResponse;\n+import software.amazon.awssdk.services.glue.model.GetTablesRequest;\n+import software.amazon.awssdk.services.glue.model.GetTablesResponse;\n+import software.amazon.awssdk.services.glue.model.Table;\n+import software.amazon.awssdk.services.glue.model.UpdateDatabaseRequest;\n+import software.amazon.awssdk.services.glue.model.UpdateDatabaseResponse;\n+\n+public class TestGlueCatalog {\n+\n+  private static final String WAREHOUSE_PATH = \"s3a://bucket\";\n+  private GlueClient glue;\n+  private GlueCatalog glueCatalog;\n+\n+  @Before\n+  public void before() {\n+    glue = Mockito.mock(GlueClient.class);\n+    glueCatalog = new GlueCatalog(new Configuration(), glue, null, WAREHOUSE_PATH, false);\n+  }\n+\n+  @Test\n+  public void defaultWarehouseLocation_noDbUri() {\n+    Mockito.doReturn(GetDatabaseResponse.builder()\n+        .database(Database.builder().name(\"db\").build()).build())\n+        .when(glue).getDatabase(Mockito.any(GetDatabaseRequest.class));\n+    String location = glueCatalog.defaultWarehouseLocation(TableIdentifier.of(\"db\", \"table\"));\n+    Assert.assertEquals(WAREHOUSE_PATH + \"/db.db/table\", location);\n+  }\n+\n+  @Test\n+  public void defaultWarehouseLocation_dbUri() {\n+    Mockito.doReturn(GetDatabaseResponse.builder()\n+        .database(Database.builder().name(\"db\").locationUri(\"s3://bucket2/db\").build()).build())\n+        .when(glue).getDatabase(Mockito.any(GetDatabaseRequest.class));\n+    String location = glueCatalog.defaultWarehouseLocation(TableIdentifier.of(\"db\", \"table\"));\n+    Assert.assertEquals(\"s3://bucket2/db/table\", location);\n+  }\n+\n+  @Test\n+  public void listTables() {\n+    Mockito.doReturn(GetDatabaseResponse.builder()\n+        .database(Database.builder().name(\"db1\").build()).build())\n+        .when(glue).getDatabase(Mockito.any(GetDatabaseRequest.class));\n+    Mockito.doReturn(GetTablesResponse.builder()\n+        .tableList(\n+            Table.builder().databaseName(\"db1\").name(\"t1\").build(),\n+            Table.builder().databaseName(\"db1\").name(\"t2\").build()\n+        ).build())\n+        .when(glue).getTables(Mockito.any(GetTablesRequest.class));\n+    Assert.assertEquals(\n+        Lists.newArrayList(\n+            TableIdentifier.of(\"db1\", \"t1\"),\n+            TableIdentifier.of(\"db1\", \"t2\")\n+        ),\n+        glueCatalog.listTables(Namespace.of(\"db1\"))\n+    );\n+  }\n+\n+  @Test\n+  public void dropTable() {\n+    Map<String, String> properties = new HashMap<>();\n+    properties.put(BaseMetastoreTableOperations.TABLE_TYPE_PROP,\n+        BaseMetastoreTableOperations.ICEBERG_TABLE_TYPE_VALUE);\n+    Mockito.doReturn(GetTableResponse.builder()\n+        .table(Table.builder().databaseName(\"db1\").name(\"t1\").parameters(properties).build()).build())\n+        .when(glue).getTable(Mockito.any(GetTableRequest.class));\n+    Mockito.doReturn(GetDatabaseResponse.builder()\n+        .database(Database.builder().name(\"db1\").build()).build())\n+        .when(glue).getDatabase(Mockito.any(GetDatabaseRequest.class));\n+    Mockito.doReturn(DeleteTableResponse.builder().build())\n+        .when(glue).deleteTable(Mockito.any(DeleteTableRequest.class));\n+    glueCatalog.dropTable(TableIdentifier.of(\"db1\", \"t1\"));\n+  }\n+\n+  @Test\n+  public void renameTable() {\n+    Map<String, String> properties = new HashMap<>();\n+    properties.put(BaseMetastoreTableOperations.TABLE_TYPE_PROP,\n+        BaseMetastoreTableOperations.ICEBERG_TABLE_TYPE_VALUE);\n+    Mockito.doReturn(GetTableResponse.builder()\n+        .table(Table.builder().databaseName(\"db1\").name(\"t1\").parameters(properties).build()).build())\n+        .when(glue).getTable(Mockito.any(GetTableRequest.class));\n+    Mockito.doReturn(GetTablesResponse.builder().build())\n+        .when(glue).getTables(Mockito.any(GetTablesRequest.class));\n+    Mockito.doReturn(GetDatabaseResponse.builder()\n+        .database(Database.builder().name(\"db1\").build()).build())\n+        .when(glue).getDatabase(Mockito.any(GetDatabaseRequest.class));\n+    Mockito.doReturn(DeleteTableResponse.builder().build())\n+        .when(glue).deleteTable(Mockito.any(DeleteTableRequest.class));\n+    Mockito.doReturn(CreateTableResponse.builder().build())\n+        .when(glue).createTable(Mockito.any(CreateTableRequest.class));\n+    glueCatalog.dropTable(TableIdentifier.of(\"db1\", \"t1\"));\n+  }\n+\n+  @Test\n+  public void createNamespace() {\n+    Mockito.doReturn(CreateDatabaseResponse.builder().build())\n+        .when(glue).createDatabase(Mockito.any(CreateDatabaseRequest.class));\n+    glueCatalog.createNamespace(Namespace.of(\"db\"));\n+  }\n+\n+  @Test(expected = NoSuchNamespaceException.class)\n+  public void createNamespace_badName() {\n+    Mockito.doReturn(CreateDatabaseResponse.builder().build())\n+        .when(glue).createDatabase(Mockito.any(CreateDatabaseRequest.class));\n+    glueCatalog.createNamespace(Namespace.of(\"db-1\"));\n+  }\n+\n+  @Test\n+  public void listNamespaces_all() {\n+    Mockito.doReturn(GetDatabasesResponse.builder()\n+        .databaseList(\n+            Database.builder().name(\"db1\").build(),\n+            Database.builder().name(\"db2\").build()\n+        ).build())\n+        .when(glue).getDatabases(Mockito.any(GetDatabasesRequest.class));\n+    Assert.assertEquals(\n+        Lists.newArrayList(\n+            Namespace.of(\"db1\"),\n+            Namespace.of(\"db2\")\n+        ),\n+        glueCatalog.listNamespaces()\n+    );\n+  }\n+\n+  @Test\n+  public void listNamespaces_self() {\n+    Mockito.doReturn(GetDatabaseResponse.builder()\n+        .database(Database.builder().name(\"db1\").build()).build())\n+        .when(glue).getDatabase(Mockito.any(GetDatabaseRequest.class));\n+    Assert.assertEquals(\n+        Lists.newArrayList(\n+            Namespace.of(\"db1\")\n+        ),\n+        glueCatalog.listNamespaces(Namespace.of(\"db1\"))\n+    );\n+  }\n+\n+  @Test(expected = NoSuchNamespaceException.class)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bdb4dd597475c06cfc31080f01712ef6a9d8a7e6"}, "originalPosition": 188}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE4OTI0MDEx", "url": "https://github.com/apache/iceberg/pull/1633#pullrequestreview-518924011", "createdAt": "2020-10-28T17:36:56Z", "commit": {"oid": "bdb4dd597475c06cfc31080f01712ef6a9d8a7e6"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxNzozNjo1NlrOHp18sg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxNzozNjo1NlrOHp18sg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzYzNzU1NA==", "bodyText": "Can you separate the different calls into test methods? Combining a lot of cases together makes it harder to see what's wrong because failures prevent other test cases from running.", "url": "https://github.com/apache/iceberg/pull/1633#discussion_r513637554", "createdAt": "2020-10-28T17:36:56Z", "author": {"login": "rdblue"}, "path": "aws/src/test/java/org/apache/iceberg/aws/glue/TestGlueCatalogInteg.java", "diffHunk": "@@ -0,0 +1,375 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.aws.glue;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.UUID;\n+import java.util.stream.Collectors;\n+import org.apache.hadoop.conf.Configuration;\n+import org.apache.iceberg.AssertHelpers;\n+import org.apache.iceberg.BaseMetastoreTableOperations;\n+import org.apache.iceberg.DataFile;\n+import org.apache.iceberg.DataFiles;\n+import org.apache.iceberg.PartitionSpec;\n+import org.apache.iceberg.Schema;\n+import org.apache.iceberg.Table;\n+import org.apache.iceberg.TableMetadata;\n+import org.apache.iceberg.TableOperations;\n+import org.apache.iceberg.catalog.Namespace;\n+import org.apache.iceberg.catalog.TableIdentifier;\n+import org.apache.iceberg.exceptions.AlreadyExistsException;\n+import org.apache.iceberg.exceptions.NoSuchNamespaceException;\n+import org.apache.iceberg.exceptions.NoSuchTableException;\n+import org.apache.iceberg.relocated.com.google.common.collect.Sets;\n+import org.apache.iceberg.types.Types;\n+import org.junit.AfterClass;\n+import org.junit.Assert;\n+import org.junit.BeforeClass;\n+import org.junit.Ignore;\n+import org.junit.Test;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import software.amazon.awssdk.services.glue.GlueClient;\n+import software.amazon.awssdk.services.glue.model.Database;\n+import software.amazon.awssdk.services.glue.model.DeleteDatabaseRequest;\n+import software.amazon.awssdk.services.glue.model.EntityNotFoundException;\n+import software.amazon.awssdk.services.glue.model.GetDatabaseRequest;\n+import software.amazon.awssdk.services.glue.model.GetTableRequest;\n+import software.amazon.awssdk.services.glue.model.GetTableResponse;\n+import software.amazon.awssdk.services.glue.model.GetTableVersionsRequest;\n+import software.amazon.awssdk.services.s3.S3Client;\n+import software.amazon.awssdk.services.s3.model.Delete;\n+import software.amazon.awssdk.services.s3.model.DeleteObjectsRequest;\n+import software.amazon.awssdk.services.s3.model.HeadObjectRequest;\n+import software.amazon.awssdk.services.s3.model.ListObjectsV2Request;\n+import software.amazon.awssdk.services.s3.model.ListObjectsV2Response;\n+import software.amazon.awssdk.services.s3.model.ObjectIdentifier;\n+import software.amazon.awssdk.services.s3.model.S3Object;\n+\n+@Ignore\n+public class TestGlueCatalogInteg {\n+\n+  private static final Logger LOG = LoggerFactory.getLogger(TestGlueCatalogInteg.class);\n+\n+  private static final List<String> NAMESPACES = new ArrayList<>();\n+  private static final GlueClient GLUE = GlueClient.create();\n+  private static final S3Client S3 = S3Client.create();\n+  private static final String PREFIX = getRandomName();\n+\n+  // the integration test requires the following env variables\n+  private static final String AWS_ACCESS_KEY_ID = System.getenv(\"AWS_ACCESS_KEY_ID\");\n+  private static final String AWS_SECRET_ACCESS_KEY = System.getenv(\"AWS_SECRET_ACCESS_KEY\");\n+  private static final String BUCKET = System.getenv(\"GLUE_BUCKET\");\n+\n+  private static GlueCatalog glueCatalog;\n+  private static GlueCatalog glueCatalogWithSkip;\n+\n+  @BeforeClass\n+  public static void beforeClass() {\n+    Configuration configuration = new Configuration();\n+    // Iceberg uses Hadoop 2.7.3, and the hadoop-aws module does not support reading environment variable yet\n+    configuration.set(\"fs.s3a.access.key\", AWS_ACCESS_KEY_ID);\n+    configuration.set(\"fs.s3a.secret.key\", AWS_SECRET_ACCESS_KEY);\n+    String testBucketPath = \"s3a://\" + BUCKET + \"/\" + PREFIX;\n+    glueCatalog = new GlueCatalog(configuration, GLUE, null, testBucketPath, false);\n+    glueCatalogWithSkip = new GlueCatalog(configuration, GLUE, null, testBucketPath, true);\n+  }\n+\n+  @AfterClass\n+  public static void afterClass() {\n+    for (String namespace : NAMESPACES) {\n+      try {\n+        // delete db also delete tables\n+        GLUE.deleteDatabase(DeleteDatabaseRequest.builder().name(namespace).build());\n+      } catch (Exception e) {\n+        // pass\n+      }\n+    }\n+    boolean hasContent = true;\n+    while (hasContent) {\n+      ListObjectsV2Response response = S3.listObjectsV2(ListObjectsV2Request.builder()\n+          .bucket(BUCKET).prefix(PREFIX).build());\n+      hasContent = response.hasContents();\n+      if (hasContent) {\n+        S3.deleteObjects(DeleteObjectsRequest.builder().bucket(BUCKET).delete(Delete.builder().objects(\n+            response.contents().stream()\n+                .map(obj -> ObjectIdentifier.builder().key(obj.key()).build())\n+                .collect(Collectors.toList())\n+        ).build()).build());\n+      }\n+    }\n+  }\n+\n+  @Test\n+  public void testNamespace() {\n+    // create ns\n+    String namespace = getRandomName();\n+    NAMESPACES.add(namespace);\n+    glueCatalog.createNamespace(Namespace.of(namespace));\n+    Database database = GLUE.getDatabase(GetDatabaseRequest.builder().name(namespace).build()).database();\n+    Assert.assertEquals(namespace, database.name());\n+    // list all", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bdb4dd597475c06cfc31080f01712ef6a9d8a7e6"}, "originalPosition": 133}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE4OTI0ODA5", "url": "https://github.com/apache/iceberg/pull/1633#pullrequestreview-518924809", "createdAt": "2020-10-28T17:37:50Z", "commit": {"oid": "bdb4dd597475c06cfc31080f01712ef6a9d8a7e6"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxNzozNzo1MVrOHp1_JQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxNzozNzo1MVrOHp1_JQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzYzODE4MQ==", "bodyText": "Why does this pull in S3? Is it needed?", "url": "https://github.com/apache/iceberg/pull/1633#discussion_r513638181", "createdAt": "2020-10-28T17:37:51Z", "author": {"login": "rdblue"}, "path": "build.gradle", "diffHunk": "@@ -967,6 +967,24 @@ project(':iceberg-pig') {\n   }\n }\n \n+project(':iceberg-aws') {\n+  dependencies {\n+    compile project(':iceberg-api')\n+    compile project(':iceberg-bundled-guava')\n+    compile project(':iceberg-core')\n+    compile 'software.amazon.awssdk:glue'\n+    compile 'software.amazon.awssdk:s3'", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bdb4dd597475c06cfc31080f01712ef6a9d8a7e6"}, "originalPosition": 10}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE4OTI2MTMx", "url": "https://github.com/apache/iceberg/pull/1633#pullrequestreview-518926131", "createdAt": "2020-10-28T17:39:23Z", "commit": {"oid": "bdb4dd597475c06cfc31080f01712ef6a9d8a7e6"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxNzozOToyM1rOHp2C7A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxNzozOToyM1rOHp2C7A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzYzOTE0OA==", "bodyText": "I think this should use a config map like we're discussing in the catalog loading PR. We'll probably want to wait on this one until the direction there is agreed, and then update this.", "url": "https://github.com/apache/iceberg/pull/1633#discussion_r513639148", "createdAt": "2020-10-28T17:39:23Z", "author": {"login": "rdblue"}, "path": "aws/src/main/java/org/apache/iceberg/aws/glue/GlueCatalog.java", "diffHunk": "@@ -0,0 +1,398 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.aws.glue;\n+\n+import java.io.Closeable;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import org.apache.commons.collections.CollectionUtils;\n+import org.apache.hadoop.conf.Configuration;\n+import org.apache.iceberg.BaseMetastoreCatalog;\n+import org.apache.iceberg.CatalogUtil;\n+import org.apache.iceberg.TableMetadata;\n+import org.apache.iceberg.TableOperations;\n+import org.apache.iceberg.aws.IcebergAWSConfigs;\n+import org.apache.iceberg.catalog.Namespace;\n+import org.apache.iceberg.catalog.SupportsNamespaces;\n+import org.apache.iceberg.catalog.TableIdentifier;\n+import org.apache.iceberg.exceptions.AlreadyExistsException;\n+import org.apache.iceberg.exceptions.NamespaceNotEmptyException;\n+import org.apache.iceberg.exceptions.NoSuchNamespaceException;\n+import org.apache.iceberg.exceptions.NoSuchTableException;\n+import org.apache.iceberg.relocated.com.google.common.base.Preconditions;\n+import org.apache.iceberg.relocated.com.google.common.collect.Lists;\n+import org.apache.iceberg.relocated.com.google.common.collect.Maps;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import software.amazon.awssdk.awscore.exception.AwsServiceException;\n+import software.amazon.awssdk.services.glue.GlueClient;\n+import software.amazon.awssdk.services.glue.model.CreateDatabaseRequest;\n+import software.amazon.awssdk.services.glue.model.CreateTableRequest;\n+import software.amazon.awssdk.services.glue.model.DeleteDatabaseRequest;\n+import software.amazon.awssdk.services.glue.model.DeleteTableRequest;\n+import software.amazon.awssdk.services.glue.model.EntityNotFoundException;\n+import software.amazon.awssdk.services.glue.model.GetDatabaseRequest;\n+import software.amazon.awssdk.services.glue.model.GetDatabaseResponse;\n+import software.amazon.awssdk.services.glue.model.GetDatabasesRequest;\n+import software.amazon.awssdk.services.glue.model.GetDatabasesResponse;\n+import software.amazon.awssdk.services.glue.model.GetTableRequest;\n+import software.amazon.awssdk.services.glue.model.GetTableResponse;\n+import software.amazon.awssdk.services.glue.model.GetTablesRequest;\n+import software.amazon.awssdk.services.glue.model.GetTablesResponse;\n+import software.amazon.awssdk.services.glue.model.InvalidInputException;\n+import software.amazon.awssdk.services.glue.model.Table;\n+import software.amazon.awssdk.services.glue.model.TableInput;\n+import software.amazon.awssdk.services.glue.model.UpdateDatabaseRequest;\n+\n+public class GlueCatalog extends BaseMetastoreCatalog implements Closeable, SupportsNamespaces {\n+\n+  private static final Logger LOG = LoggerFactory.getLogger(GlueCatalog.class);\n+\n+  private final Configuration conf;\n+  private final GlueClient glue;\n+  private final String catalogId;\n+  private final String catalogName;\n+  private final String warehousePath;\n+  private final boolean skipArchive;\n+\n+  /**\n+   * Constructor that initializes all args from Hadoop configuration, used by engines like Spark and Flink\n+   * @param conf Hadoop config passed from engines\n+   */\n+  public GlueCatalog(Configuration conf) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bdb4dd597475c06cfc31080f01712ef6a9d8a7e6"}, "originalPosition": 83}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "2b89a44f929462008c599d35b4ccf44e25c1b0de", "author": {"user": {"login": "jackye1995", "name": "Jack Ye"}}, "url": "https://github.com/apache/iceberg/commit/2b89a44f929462008c599d35b4ccf44e25c1b0de", "committedDate": "2020-10-29T19:38:20Z", "message": "update skipArchive doc"}, "afterCommit": {"oid": "5ec64d6132ca194f19a6e059929e29f101299200", "author": {"user": {"login": "jackye1995", "name": "Jack Ye"}}, "url": "https://github.com/apache/iceberg/commit/5ec64d6132ca194f19a6e059929e29f101299200", "committedDate": "2020-11-06T08:45:59Z", "message": "AWS Glue catalog and table operations"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "5ec64d6132ca194f19a6e059929e29f101299200", "author": {"user": {"login": "jackye1995", "name": "Jack Ye"}}, "url": "https://github.com/apache/iceberg/commit/5ec64d6132ca194f19a6e059929e29f101299200", "committedDate": "2020-11-06T08:45:59Z", "message": "AWS Glue catalog and table operations"}, "afterCommit": {"oid": "ac83e1eda2d5f578996096587cf02cbf30a280cd", "author": {"user": {"login": "jackye1995", "name": "Jack Ye"}}, "url": "https://github.com/apache/iceberg/commit/ac83e1eda2d5f578996096587cf02cbf30a280cd", "committedDate": "2020-11-11T01:25:43Z", "message": "AWS Glue catalog and table operations"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI4NTExNDQw", "url": "https://github.com/apache/iceberg/pull/1633#pullrequestreview-528511440", "createdAt": "2020-11-11T20:29:46Z", "commit": {"oid": "73bee5903e0bcaa1590973d7f4ef2409e26d6221"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQyMDoyOTo0NlrOHxdKeQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQyMDoyOTo0NlrOHxdKeQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTYyMDA4OQ==", "bodyText": "I don't think this should throw NoSuchNamespaceException. What about ValidationException?\nAlso, tests should generally check the error message as well.", "url": "https://github.com/apache/iceberg/pull/1633#discussion_r521620089", "createdAt": "2020-11-11T20:29:46Z", "author": {"login": "rdblue"}, "path": "aws/src/integration/java/org/apache/iceberg/aws/glue/GlueCatalogNamespaceTest.java", "diffHunk": "@@ -0,0 +1,127 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.aws.glue;\n+\n+import java.util.List;\n+import java.util.Map;\n+import org.apache.iceberg.AssertHelpers;\n+import org.apache.iceberg.catalog.Namespace;\n+import org.apache.iceberg.exceptions.AlreadyExistsException;\n+import org.apache.iceberg.exceptions.NamespaceNotEmptyException;\n+import org.apache.iceberg.exceptions.NoSuchNamespaceException;\n+import org.apache.iceberg.relocated.com.google.common.collect.Maps;\n+import org.apache.iceberg.relocated.com.google.common.collect.Sets;\n+import org.junit.Assert;\n+import org.junit.Test;\n+import software.amazon.awssdk.services.glue.model.Database;\n+import software.amazon.awssdk.services.glue.model.EntityNotFoundException;\n+import software.amazon.awssdk.services.glue.model.GetDatabaseRequest;\n+\n+public class GlueCatalogNamespaceTest extends GlueTestBase {\n+\n+  @Test\n+  public void testCreateNamespace() {\n+    String namespace = getRandomName();\n+    namespaces.add(namespace);\n+    glueCatalog.createNamespace(Namespace.of(namespace));\n+    Database database = glue.getDatabase(GetDatabaseRequest.builder().name(namespace).build()).database();\n+    Assert.assertEquals(namespace, database.name());\n+  }\n+\n+  @Test\n+  public void testCreateDuplicate() {\n+    String namespace = createNamespace();\n+    AssertHelpers.assertThrows(\"should not create namespace with the same name\",\n+        AlreadyExistsException.class,\n+        () -> glueCatalog.createNamespace(Namespace.of(namespace)));\n+  }\n+\n+  @Test\n+  public void testCreateBadName() {\n+    AssertHelpers.assertThrows(\"should not create namespace with bad name\",\n+        NoSuchNamespaceException.class,\n+        () -> glueCatalog.createNamespace(Namespace.of(\"db-1\")));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "73bee5903e0bcaa1590973d7f4ef2409e26d6221"}, "originalPosition": 60}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI4NTEzNjM2", "url": "https://github.com/apache/iceberg/pull/1633#pullrequestreview-528513636", "createdAt": "2020-11-11T20:33:21Z", "commit": {"oid": "73bee5903e0bcaa1590973d7f4ef2409e26d6221"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQyMDozMzoyMVrOHxdRbg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQyMDozMzoyMVrOHxdRbg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTYyMTg3MA==", "bodyText": "I usually like to check operations like create by checking the opposite state first, so asserting that the namespace does not exist using the glue client.\nI also think it is a best practice to provide context in most assertions, like assertEquals(\"Random name should match loaded when directly\", namespace, database.name()).", "url": "https://github.com/apache/iceberg/pull/1633#discussion_r521621870", "createdAt": "2020-11-11T20:33:21Z", "author": {"login": "rdblue"}, "path": "aws/src/integration/java/org/apache/iceberg/aws/glue/GlueCatalogNamespaceTest.java", "diffHunk": "@@ -0,0 +1,127 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.aws.glue;\n+\n+import java.util.List;\n+import java.util.Map;\n+import org.apache.iceberg.AssertHelpers;\n+import org.apache.iceberg.catalog.Namespace;\n+import org.apache.iceberg.exceptions.AlreadyExistsException;\n+import org.apache.iceberg.exceptions.NamespaceNotEmptyException;\n+import org.apache.iceberg.exceptions.NoSuchNamespaceException;\n+import org.apache.iceberg.relocated.com.google.common.collect.Maps;\n+import org.apache.iceberg.relocated.com.google.common.collect.Sets;\n+import org.junit.Assert;\n+import org.junit.Test;\n+import software.amazon.awssdk.services.glue.model.Database;\n+import software.amazon.awssdk.services.glue.model.EntityNotFoundException;\n+import software.amazon.awssdk.services.glue.model.GetDatabaseRequest;\n+\n+public class GlueCatalogNamespaceTest extends GlueTestBase {\n+\n+  @Test\n+  public void testCreateNamespace() {\n+    String namespace = getRandomName();\n+    namespaces.add(namespace);\n+    glueCatalog.createNamespace(Namespace.of(namespace));\n+    Database database = glue.getDatabase(GetDatabaseRequest.builder().name(namespace).build()).database();\n+    Assert.assertEquals(namespace, database.name());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "73bee5903e0bcaa1590973d7f4ef2409e26d6221"}, "originalPosition": 45}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI4NTE0NjI3", "url": "https://github.com/apache/iceberg/pull/1633#pullrequestreview-528514627", "createdAt": "2020-11-11T20:34:53Z", "commit": {"oid": "73bee5903e0bcaa1590973d7f4ef2409e26d6221"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQyMDozNDo1M1rOHxdUhg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQyMDozNDo1M1rOHxdUhg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTYyMjY2Mg==", "bodyText": "Can you add a bit more whitespace to break up sections of this test? It seems a bit dense.", "url": "https://github.com/apache/iceberg/pull/1633#discussion_r521622662", "createdAt": "2020-11-11T20:34:53Z", "author": {"login": "rdblue"}, "path": "aws/src/integration/java/org/apache/iceberg/aws/glue/GlueCatalogTableTest.java", "diffHunk": "@@ -0,0 +1,241 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.aws.glue;\n+\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.Optional;\n+import org.apache.iceberg.AssertHelpers;\n+import org.apache.iceberg.BaseMetastoreTableOperations;\n+import org.apache.iceberg.DataFile;\n+import org.apache.iceberg.DataFiles;\n+import org.apache.iceberg.PartitionSpec;\n+import org.apache.iceberg.Schema;\n+import org.apache.iceberg.Table;\n+import org.apache.iceberg.TableMetadata;\n+import org.apache.iceberg.TableOperations;\n+import org.apache.iceberg.catalog.Namespace;\n+import org.apache.iceberg.catalog.TableIdentifier;\n+import org.apache.iceberg.exceptions.AlreadyExistsException;\n+import org.apache.iceberg.exceptions.NoSuchTableException;\n+import org.apache.iceberg.types.Types;\n+import org.junit.Assert;\n+import org.junit.Test;\n+import software.amazon.awssdk.services.glue.model.GetTableRequest;\n+import software.amazon.awssdk.services.glue.model.GetTableResponse;\n+import software.amazon.awssdk.services.glue.model.GetTableVersionsRequest;\n+import software.amazon.awssdk.services.s3.model.HeadObjectRequest;\n+import software.amazon.awssdk.services.s3.model.ListObjectsV2Request;\n+import software.amazon.awssdk.services.s3.model.ListObjectsV2Response;\n+import software.amazon.awssdk.services.s3.model.S3Object;\n+\n+public class GlueCatalogTableTest extends GlueTestBase {\n+\n+  @Test\n+  public void testCreateTable() {\n+    String namespace = createNamespace();\n+    String tableName = getRandomName();\n+    glueCatalog.createTable(TableIdentifier.of(namespace, tableName), schema, partitionSpec);\n+    GetTableResponse response = glue.getTable(GetTableRequest.builder()\n+        .databaseName(namespace).name(tableName).build());\n+    Assert.assertEquals(namespace, response.table().databaseName());\n+    Assert.assertEquals(tableName, response.table().name());\n+    Assert.assertEquals(BaseMetastoreTableOperations.ICEBERG_TABLE_TYPE_VALUE.toUpperCase(Locale.ENGLISH),\n+        response.table().parameters().get(BaseMetastoreTableOperations.TABLE_TYPE_PROP));\n+    Assert.assertTrue(response.table().parameters().containsKey(BaseMetastoreTableOperations.METADATA_LOCATION_PROP));\n+    String metaLocation = response.table().parameters().get(BaseMetastoreTableOperations.METADATA_LOCATION_PROP);\n+    String key = metaLocation.split(testBucketName, -1)[1].substring(1);\n+    s3.headObject(HeadObjectRequest.builder().bucket(testBucketName).key(key).build());\n+    Table table = glueCatalog.loadTable(TableIdentifier.of(namespace, tableName));\n+    Assert.assertEquals(partitionSpec, table.spec());\n+    Assert.assertEquals(schema.toString(), table.schema().toString());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "73bee5903e0bcaa1590973d7f4ef2409e26d6221"}, "originalPosition": 68}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI4NTE0OTAy", "url": "https://github.com/apache/iceberg/pull/1633#pullrequestreview-528514902", "createdAt": "2020-11-11T20:35:23Z", "commit": {"oid": "73bee5903e0bcaa1590973d7f4ef2409e26d6221"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQyMDozNToyM1rOHxdVhw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQyMDozNToyM1rOHxdVhw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTYyMjkxOQ==", "bodyText": "This context is usually better if it is added to the assertion, so that when the test fails it is printed in the output.", "url": "https://github.com/apache/iceberg/pull/1633#discussion_r521622919", "createdAt": "2020-11-11T20:35:23Z", "author": {"login": "rdblue"}, "path": "aws/src/integration/java/org/apache/iceberg/aws/glue/GlueCatalogTableTest.java", "diffHunk": "@@ -0,0 +1,241 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.aws.glue;\n+\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.Optional;\n+import org.apache.iceberg.AssertHelpers;\n+import org.apache.iceberg.BaseMetastoreTableOperations;\n+import org.apache.iceberg.DataFile;\n+import org.apache.iceberg.DataFiles;\n+import org.apache.iceberg.PartitionSpec;\n+import org.apache.iceberg.Schema;\n+import org.apache.iceberg.Table;\n+import org.apache.iceberg.TableMetadata;\n+import org.apache.iceberg.TableOperations;\n+import org.apache.iceberg.catalog.Namespace;\n+import org.apache.iceberg.catalog.TableIdentifier;\n+import org.apache.iceberg.exceptions.AlreadyExistsException;\n+import org.apache.iceberg.exceptions.NoSuchTableException;\n+import org.apache.iceberg.types.Types;\n+import org.junit.Assert;\n+import org.junit.Test;\n+import software.amazon.awssdk.services.glue.model.GetTableRequest;\n+import software.amazon.awssdk.services.glue.model.GetTableResponse;\n+import software.amazon.awssdk.services.glue.model.GetTableVersionsRequest;\n+import software.amazon.awssdk.services.s3.model.HeadObjectRequest;\n+import software.amazon.awssdk.services.s3.model.ListObjectsV2Request;\n+import software.amazon.awssdk.services.s3.model.ListObjectsV2Response;\n+import software.amazon.awssdk.services.s3.model.S3Object;\n+\n+public class GlueCatalogTableTest extends GlueTestBase {\n+\n+  @Test\n+  public void testCreateTable() {\n+    String namespace = createNamespace();\n+    String tableName = getRandomName();\n+    glueCatalog.createTable(TableIdentifier.of(namespace, tableName), schema, partitionSpec);\n+    GetTableResponse response = glue.getTable(GetTableRequest.builder()\n+        .databaseName(namespace).name(tableName).build());\n+    Assert.assertEquals(namespace, response.table().databaseName());\n+    Assert.assertEquals(tableName, response.table().name());\n+    Assert.assertEquals(BaseMetastoreTableOperations.ICEBERG_TABLE_TYPE_VALUE.toUpperCase(Locale.ENGLISH),\n+        response.table().parameters().get(BaseMetastoreTableOperations.TABLE_TYPE_PROP));\n+    Assert.assertTrue(response.table().parameters().containsKey(BaseMetastoreTableOperations.METADATA_LOCATION_PROP));\n+    String metaLocation = response.table().parameters().get(BaseMetastoreTableOperations.METADATA_LOCATION_PROP);\n+    String key = metaLocation.split(testBucketName, -1)[1].substring(1);\n+    s3.headObject(HeadObjectRequest.builder().bucket(testBucketName).key(key).build());\n+    Table table = glueCatalog.loadTable(TableIdentifier.of(namespace, tableName));\n+    Assert.assertEquals(partitionSpec, table.spec());\n+    Assert.assertEquals(schema.toString(), table.schema().toString());\n+  }\n+\n+  @Test\n+  public void testCreateTableDuplicate() {\n+    String namespace = createNamespace();\n+    String tableName = createTable(namespace);\n+    AssertHelpers.assertThrows(\"should not create table with the same name\",\n+        AlreadyExistsException.class,\n+        () -> glueCatalog.createTable(TableIdentifier.of(namespace, tableName), schema, partitionSpec));\n+  }\n+\n+  @Test\n+  public void testCreateTableBadName() {\n+    String namespace = createNamespace();\n+    AssertHelpers.assertThrows(\"should not create table with bad name\",\n+        IllegalArgumentException.class,\n+        () -> glueCatalog.createTable(TableIdentifier.of(namespace, \"table-1\"), schema, partitionSpec));\n+  }\n+\n+  @Test\n+  public void testListTables() {\n+    String namespace = createNamespace();\n+    // list table should have nothing", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "73bee5903e0bcaa1590973d7f4ef2409e26d6221"}, "originalPosition": 91}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI4NTE2MzA4", "url": "https://github.com/apache/iceberg/pull/1633#pullrequestreview-528516308", "createdAt": "2020-11-11T20:37:40Z", "commit": {"oid": "73bee5903e0bcaa1590973d7f4ef2409e26d6221"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQyMDozNzo0MFrOHxdZrg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQyMDozNzo0MFrOHxdZrg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTYyMzk4Mg==", "bodyText": "What is a rename rollback? Why does this test fail? The table looks like it should exist.", "url": "https://github.com/apache/iceberg/pull/1633#discussion_r521623982", "createdAt": "2020-11-11T20:37:40Z", "author": {"login": "rdblue"}, "path": "aws/src/integration/java/org/apache/iceberg/aws/glue/GlueCatalogTableTest.java", "diffHunk": "@@ -0,0 +1,241 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.aws.glue;\n+\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.Optional;\n+import org.apache.iceberg.AssertHelpers;\n+import org.apache.iceberg.BaseMetastoreTableOperations;\n+import org.apache.iceberg.DataFile;\n+import org.apache.iceberg.DataFiles;\n+import org.apache.iceberg.PartitionSpec;\n+import org.apache.iceberg.Schema;\n+import org.apache.iceberg.Table;\n+import org.apache.iceberg.TableMetadata;\n+import org.apache.iceberg.TableOperations;\n+import org.apache.iceberg.catalog.Namespace;\n+import org.apache.iceberg.catalog.TableIdentifier;\n+import org.apache.iceberg.exceptions.AlreadyExistsException;\n+import org.apache.iceberg.exceptions.NoSuchTableException;\n+import org.apache.iceberg.types.Types;\n+import org.junit.Assert;\n+import org.junit.Test;\n+import software.amazon.awssdk.services.glue.model.GetTableRequest;\n+import software.amazon.awssdk.services.glue.model.GetTableResponse;\n+import software.amazon.awssdk.services.glue.model.GetTableVersionsRequest;\n+import software.amazon.awssdk.services.s3.model.HeadObjectRequest;\n+import software.amazon.awssdk.services.s3.model.ListObjectsV2Request;\n+import software.amazon.awssdk.services.s3.model.ListObjectsV2Response;\n+import software.amazon.awssdk.services.s3.model.S3Object;\n+\n+public class GlueCatalogTableTest extends GlueTestBase {\n+\n+  @Test\n+  public void testCreateTable() {\n+    String namespace = createNamespace();\n+    String tableName = getRandomName();\n+    glueCatalog.createTable(TableIdentifier.of(namespace, tableName), schema, partitionSpec);\n+    GetTableResponse response = glue.getTable(GetTableRequest.builder()\n+        .databaseName(namespace).name(tableName).build());\n+    Assert.assertEquals(namespace, response.table().databaseName());\n+    Assert.assertEquals(tableName, response.table().name());\n+    Assert.assertEquals(BaseMetastoreTableOperations.ICEBERG_TABLE_TYPE_VALUE.toUpperCase(Locale.ENGLISH),\n+        response.table().parameters().get(BaseMetastoreTableOperations.TABLE_TYPE_PROP));\n+    Assert.assertTrue(response.table().parameters().containsKey(BaseMetastoreTableOperations.METADATA_LOCATION_PROP));\n+    String metaLocation = response.table().parameters().get(BaseMetastoreTableOperations.METADATA_LOCATION_PROP);\n+    String key = metaLocation.split(testBucketName, -1)[1].substring(1);\n+    s3.headObject(HeadObjectRequest.builder().bucket(testBucketName).key(key).build());\n+    Table table = glueCatalog.loadTable(TableIdentifier.of(namespace, tableName));\n+    Assert.assertEquals(partitionSpec, table.spec());\n+    Assert.assertEquals(schema.toString(), table.schema().toString());\n+  }\n+\n+  @Test\n+  public void testCreateTableDuplicate() {\n+    String namespace = createNamespace();\n+    String tableName = createTable(namespace);\n+    AssertHelpers.assertThrows(\"should not create table with the same name\",\n+        AlreadyExistsException.class,\n+        () -> glueCatalog.createTable(TableIdentifier.of(namespace, tableName), schema, partitionSpec));\n+  }\n+\n+  @Test\n+  public void testCreateTableBadName() {\n+    String namespace = createNamespace();\n+    AssertHelpers.assertThrows(\"should not create table with bad name\",\n+        IllegalArgumentException.class,\n+        () -> glueCatalog.createTable(TableIdentifier.of(namespace, \"table-1\"), schema, partitionSpec));\n+  }\n+\n+  @Test\n+  public void testListTables() {\n+    String namespace = createNamespace();\n+    // list table should have nothing\n+    Assert.assertTrue(glueCatalog.listTables(Namespace.of(namespace)).isEmpty());\n+    String tableName = createTable(namespace);\n+    // list table should show\n+    List<TableIdentifier> tables = glueCatalog.listTables(Namespace.of(namespace));\n+    Assert.assertEquals(1, tables.size());\n+    Assert.assertEquals(TableIdentifier.of(namespace, tableName), tables.get(0));\n+  }\n+\n+  @Test\n+  public void testTableExists() {\n+    String namespace = createNamespace();\n+    String tableName = createTable(namespace);\n+    Assert.assertTrue(glueCatalog.tableExists(TableIdentifier.of(namespace, tableName)));\n+  }\n+\n+  @Test\n+  public void testUpdateTable() {\n+    String namespace = createNamespace();\n+    String tableName = getRandomName();\n+    // current should be null\n+    TableOperations ops = glueCatalog.newTableOps(TableIdentifier.of(namespace, tableName));\n+    TableMetadata current = ops.current();\n+    Assert.assertNull(current);\n+    // create table, refresh should update\n+    createTable(namespace, tableName);\n+    current = ops.refresh();\n+    Assert.assertEquals(schema.toString(), current.schema().toString());\n+    Assert.assertEquals(partitionSpec, current.spec());\n+    Table table = glueCatalog.loadTable(TableIdentifier.of(namespace, tableName));\n+    Assert.assertTrue(table.history().isEmpty());\n+    // commit new version, should create a new snapshot\n+    table = glueCatalog.loadTable(TableIdentifier.of(namespace, tableName));\n+    DataFile dataFile = DataFiles.builder(partitionSpec)\n+        .withPath(\"/path/to/data-a.parquet\")\n+        .withFileSizeInBytes(10)\n+        .withRecordCount(1)\n+        .build();\n+    table.newAppend().appendFile(dataFile).commit();\n+    table = glueCatalog.loadTable(TableIdentifier.of(namespace, tableName));\n+    Assert.assertEquals(1, table.history().size());\n+  }\n+\n+  @Test\n+  public void testRenameTable() {\n+    String namespace = createNamespace();\n+    String tableName = createTable(namespace);\n+    Table table = glueCatalog.loadTable(TableIdentifier.of(namespace, tableName));\n+    // rename table\n+    String newTableName = tableName + \"_2\";\n+    glueCatalog.renameTable(TableIdentifier.of(namespace, tableName), TableIdentifier.of(namespace, newTableName));\n+    Table renamedTable = glueCatalog.loadTable(TableIdentifier.of(namespace, newTableName));\n+    Assert.assertEquals(table.location(), renamedTable.location());\n+    Assert.assertEquals(table.schema().toString(), renamedTable.schema().toString());\n+    Assert.assertEquals(table.spec(), renamedTable.spec());\n+    Assert.assertEquals(table.currentSnapshot(), renamedTable.currentSnapshot());\n+  }\n+\n+  @Test\n+  public void testRenameTableRollback() {\n+    String namespace = createNamespace();\n+    String tableName = createTable(namespace);\n+    TableIdentifier id = TableIdentifier.of(namespace, tableName);\n+    Table table = glueCatalog.loadTable(id);\n+    // rename rollback\n+    AssertHelpers.assertThrows(\"should not have table\",\n+        NoSuchTableException.class,\n+        () -> glueCatalog.renameTable(\n+            TableIdentifier.of(namespace, tableName), TableIdentifier.of(namespace, tableName + \"-3\")));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "73bee5903e0bcaa1590973d7f4ef2409e26d6221"}, "originalPosition": 159}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI4NTI3OTEx", "url": "https://github.com/apache/iceberg/pull/1633#pullrequestreview-528527911", "createdAt": "2020-11-11T20:56:02Z", "commit": {"oid": "73bee5903e0bcaa1590973d7f4ef2409e26d6221"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQyMDo1NjowMlrOHxd-nQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQyMDo1NjowMlrOHxd-nQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTYzMzQzNw==", "bodyText": "Does this need to be public? It makes sense to have it for tests, but I would probably avoid public constructors that we need to support later.", "url": "https://github.com/apache/iceberg/pull/1633#discussion_r521633437", "createdAt": "2020-11-11T20:56:02Z", "author": {"login": "rdblue"}, "path": "aws/src/main/java/org/apache/iceberg/aws/glue/GlueCatalog.java", "diffHunk": "@@ -0,0 +1,423 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.aws.glue;\n+\n+import java.io.Closeable;\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import org.apache.hadoop.conf.Configurable;\n+import org.apache.hadoop.conf.Configuration;\n+import org.apache.iceberg.BaseMetastoreCatalog;\n+import org.apache.iceberg.CatalogProperties;\n+import org.apache.iceberg.CatalogUtil;\n+import org.apache.iceberg.TableMetadata;\n+import org.apache.iceberg.TableOperations;\n+import org.apache.iceberg.aws.AwsClientUtil;\n+import org.apache.iceberg.aws.s3.S3FileIO;\n+import org.apache.iceberg.catalog.Namespace;\n+import org.apache.iceberg.catalog.SupportsNamespaces;\n+import org.apache.iceberg.catalog.TableIdentifier;\n+import org.apache.iceberg.exceptions.AlreadyExistsException;\n+import org.apache.iceberg.exceptions.NamespaceNotEmptyException;\n+import org.apache.iceberg.exceptions.NoSuchNamespaceException;\n+import org.apache.iceberg.exceptions.NoSuchTableException;\n+import org.apache.iceberg.io.FileIO;\n+import org.apache.iceberg.relocated.com.google.common.base.Preconditions;\n+import org.apache.iceberg.relocated.com.google.common.collect.Lists;\n+import org.apache.iceberg.relocated.com.google.common.collect.Maps;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import software.amazon.awssdk.awscore.exception.AwsServiceException;\n+import software.amazon.awssdk.services.glue.GlueClient;\n+import software.amazon.awssdk.services.glue.model.CreateDatabaseRequest;\n+import software.amazon.awssdk.services.glue.model.CreateTableRequest;\n+import software.amazon.awssdk.services.glue.model.DeleteDatabaseRequest;\n+import software.amazon.awssdk.services.glue.model.DeleteTableRequest;\n+import software.amazon.awssdk.services.glue.model.EntityNotFoundException;\n+import software.amazon.awssdk.services.glue.model.GetDatabaseRequest;\n+import software.amazon.awssdk.services.glue.model.GetDatabaseResponse;\n+import software.amazon.awssdk.services.glue.model.GetDatabasesRequest;\n+import software.amazon.awssdk.services.glue.model.GetDatabasesResponse;\n+import software.amazon.awssdk.services.glue.model.GetTableRequest;\n+import software.amazon.awssdk.services.glue.model.GetTableResponse;\n+import software.amazon.awssdk.services.glue.model.GetTablesRequest;\n+import software.amazon.awssdk.services.glue.model.GetTablesResponse;\n+import software.amazon.awssdk.services.glue.model.InvalidInputException;\n+import software.amazon.awssdk.services.glue.model.Table;\n+import software.amazon.awssdk.services.glue.model.TableInput;\n+import software.amazon.awssdk.services.glue.model.UpdateDatabaseRequest;\n+\n+public class GlueCatalog extends BaseMetastoreCatalog implements Closeable, SupportsNamespaces, Configurable {\n+\n+  private static final Logger LOG = LoggerFactory.getLogger(GlueCatalog.class);\n+\n+  public static final String CONFIG_GLUE_CATALOG_ID = \"glue-catalog-id\";\n+  public static final String CONFIG_SKIP_ARCHIVE = \"skip-archive\";\n+  public static final boolean CONFIG_SKIP_ARCHIVE_DEFAULT = false;\n+\n+  private final GlueClient glue;\n+  private Configuration hadoopConf;\n+  private String catalogId;\n+  private String catalogName;\n+  private String warehousePath;\n+  private boolean skipArchive;\n+  private FileIO fileIO;\n+\n+  /**\n+   * No-arg constructor to load the catalog dynamically.\n+   * <p>\n+   * Only the AWS Glue client is initialized.\n+   * Other fields must be initialized by calling {@link GlueCatalog#initialize(String, Map)} later.\n+   */\n+  public GlueCatalog() {\n+    this.glue = AwsClientUtil.defaultGlueClient();\n+  }\n+\n+  /**\n+   * All-arg constructor to directly initialize the catalog.\n+   * <p>\n+   * All the fields are directly initialized.\n+   * There is no need to call {@link GlueCatalog#initialize(String, Map)} later.\n+   *\n+   * @param glue Glue client\n+   * @param catalogName a custom name for the catalog, usually obtained from a Spark or Flink session.\n+   * @param catalogId The ID of the Glue Data Catalog where the tables reside.\n+   *                  If none is provided, the AWS account ID is used by default.\n+   * @param warehousePath warehouse path, such as s3://my-iceberg-bucket/metadata_prod\n+   * @param skipArchive if Glue should skip archiving an old table version when creating a new version in a commit.\n+   *                    By default Glue archives all old table versions after an UpdateTable call.\n+   *                    but Glue has a default max number of archived table versions (can be increased).\n+   *                    So for streaming use case with lots of commits, it is recommended to set this value to true.\n+   * @param fileIO file IO to use.\n+   */\n+  public GlueCatalog(GlueClient glue, String catalogName, String catalogId, String warehousePath,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "73bee5903e0bcaa1590973d7f4ef2409e26d6221"}, "originalPosition": 113}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI4NTI4NDE5", "url": "https://github.com/apache/iceberg/pull/1633#pullrequestreview-528528419", "createdAt": "2020-11-11T20:56:53Z", "commit": {"oid": "73bee5903e0bcaa1590973d7f4ef2409e26d6221"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQyMDo1Njo1M1rOHxeAIA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQyMDo1Njo1M1rOHxeAIA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTYzMzgyNA==", "bodyText": "There's a helper for this: PropertyUtil.propertyAsBoolean.", "url": "https://github.com/apache/iceberg/pull/1633#discussion_r521633824", "createdAt": "2020-11-11T20:56:53Z", "author": {"login": "rdblue"}, "path": "aws/src/main/java/org/apache/iceberg/aws/glue/GlueCatalog.java", "diffHunk": "@@ -0,0 +1,423 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.aws.glue;\n+\n+import java.io.Closeable;\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import org.apache.hadoop.conf.Configurable;\n+import org.apache.hadoop.conf.Configuration;\n+import org.apache.iceberg.BaseMetastoreCatalog;\n+import org.apache.iceberg.CatalogProperties;\n+import org.apache.iceberg.CatalogUtil;\n+import org.apache.iceberg.TableMetadata;\n+import org.apache.iceberg.TableOperations;\n+import org.apache.iceberg.aws.AwsClientUtil;\n+import org.apache.iceberg.aws.s3.S3FileIO;\n+import org.apache.iceberg.catalog.Namespace;\n+import org.apache.iceberg.catalog.SupportsNamespaces;\n+import org.apache.iceberg.catalog.TableIdentifier;\n+import org.apache.iceberg.exceptions.AlreadyExistsException;\n+import org.apache.iceberg.exceptions.NamespaceNotEmptyException;\n+import org.apache.iceberg.exceptions.NoSuchNamespaceException;\n+import org.apache.iceberg.exceptions.NoSuchTableException;\n+import org.apache.iceberg.io.FileIO;\n+import org.apache.iceberg.relocated.com.google.common.base.Preconditions;\n+import org.apache.iceberg.relocated.com.google.common.collect.Lists;\n+import org.apache.iceberg.relocated.com.google.common.collect.Maps;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import software.amazon.awssdk.awscore.exception.AwsServiceException;\n+import software.amazon.awssdk.services.glue.GlueClient;\n+import software.amazon.awssdk.services.glue.model.CreateDatabaseRequest;\n+import software.amazon.awssdk.services.glue.model.CreateTableRequest;\n+import software.amazon.awssdk.services.glue.model.DeleteDatabaseRequest;\n+import software.amazon.awssdk.services.glue.model.DeleteTableRequest;\n+import software.amazon.awssdk.services.glue.model.EntityNotFoundException;\n+import software.amazon.awssdk.services.glue.model.GetDatabaseRequest;\n+import software.amazon.awssdk.services.glue.model.GetDatabaseResponse;\n+import software.amazon.awssdk.services.glue.model.GetDatabasesRequest;\n+import software.amazon.awssdk.services.glue.model.GetDatabasesResponse;\n+import software.amazon.awssdk.services.glue.model.GetTableRequest;\n+import software.amazon.awssdk.services.glue.model.GetTableResponse;\n+import software.amazon.awssdk.services.glue.model.GetTablesRequest;\n+import software.amazon.awssdk.services.glue.model.GetTablesResponse;\n+import software.amazon.awssdk.services.glue.model.InvalidInputException;\n+import software.amazon.awssdk.services.glue.model.Table;\n+import software.amazon.awssdk.services.glue.model.TableInput;\n+import software.amazon.awssdk.services.glue.model.UpdateDatabaseRequest;\n+\n+public class GlueCatalog extends BaseMetastoreCatalog implements Closeable, SupportsNamespaces, Configurable {\n+\n+  private static final Logger LOG = LoggerFactory.getLogger(GlueCatalog.class);\n+\n+  public static final String CONFIG_GLUE_CATALOG_ID = \"glue-catalog-id\";\n+  public static final String CONFIG_SKIP_ARCHIVE = \"skip-archive\";\n+  public static final boolean CONFIG_SKIP_ARCHIVE_DEFAULT = false;\n+\n+  private final GlueClient glue;\n+  private Configuration hadoopConf;\n+  private String catalogId;\n+  private String catalogName;\n+  private String warehousePath;\n+  private boolean skipArchive;\n+  private FileIO fileIO;\n+\n+  /**\n+   * No-arg constructor to load the catalog dynamically.\n+   * <p>\n+   * Only the AWS Glue client is initialized.\n+   * Other fields must be initialized by calling {@link GlueCatalog#initialize(String, Map)} later.\n+   */\n+  public GlueCatalog() {\n+    this.glue = AwsClientUtil.defaultGlueClient();\n+  }\n+\n+  /**\n+   * All-arg constructor to directly initialize the catalog.\n+   * <p>\n+   * All the fields are directly initialized.\n+   * There is no need to call {@link GlueCatalog#initialize(String, Map)} later.\n+   *\n+   * @param glue Glue client\n+   * @param catalogName a custom name for the catalog, usually obtained from a Spark or Flink session.\n+   * @param catalogId The ID of the Glue Data Catalog where the tables reside.\n+   *                  If none is provided, the AWS account ID is used by default.\n+   * @param warehousePath warehouse path, such as s3://my-iceberg-bucket/metadata_prod\n+   * @param skipArchive if Glue should skip archiving an old table version when creating a new version in a commit.\n+   *                    By default Glue archives all old table versions after an UpdateTable call.\n+   *                    but Glue has a default max number of archived table versions (can be increased).\n+   *                    So for streaming use case with lots of commits, it is recommended to set this value to true.\n+   * @param fileIO file IO to use.\n+   */\n+  public GlueCatalog(GlueClient glue, String catalogName, String catalogId, String warehousePath,\n+                     boolean skipArchive, FileIO fileIO) {\n+    this.glue = Preconditions.checkNotNull(glue, \"Cannot initialize GlueCatalog because GlueClient is null\");\n+    initialize(catalogName, catalogId, warehousePath, skipArchive, fileIO);\n+  }\n+\n+  @Override\n+  public void initialize(String name, Map<String, String> properties) {\n+    String skipArchiveValue = properties.get(CONFIG_SKIP_ARCHIVE);\n+    String fileIOImpl = properties.get(CatalogProperties.FILE_IO_IMPL);\n+    initialize(\n+        name,\n+        properties.get(CONFIG_GLUE_CATALOG_ID),\n+        properties.get(CatalogProperties.WAREHOUSE_LOCATION),\n+        skipArchiveValue == null ? CONFIG_SKIP_ARCHIVE_DEFAULT :\n+            Boolean.parseBoolean(properties.get(CONFIG_SKIP_ARCHIVE)),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "73bee5903e0bcaa1590973d7f4ef2409e26d6221"}, "originalPosition": 128}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI4NTMwNTE2", "url": "https://github.com/apache/iceberg/pull/1633#pullrequestreview-528530516", "createdAt": "2020-11-11T21:00:14Z", "commit": {"oid": "73bee5903e0bcaa1590973d7f4ef2409e26d6221"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQyMTowMDoxNFrOHxeGag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQyMTowMDoxNFrOHxeGag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTYzNTQzNA==", "bodyText": "I don't think this class needs to be public or have a public constructor.", "url": "https://github.com/apache/iceberg/pull/1633#discussion_r521635434", "createdAt": "2020-11-11T21:00:14Z", "author": {"login": "rdblue"}, "path": "aws/src/main/java/org/apache/iceberg/aws/glue/GlueTableOperations.java", "diffHunk": "@@ -0,0 +1,212 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.aws.glue;\n+\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Optional;\n+import org.apache.iceberg.BaseMetastoreTableOperations;\n+import org.apache.iceberg.TableMetadata;\n+import org.apache.iceberg.catalog.TableIdentifier;\n+import org.apache.iceberg.exceptions.AlreadyExistsException;\n+import org.apache.iceberg.exceptions.CommitFailedException;\n+import org.apache.iceberg.exceptions.NoSuchTableException;\n+import org.apache.iceberg.io.FileIO;\n+import org.apache.iceberg.relocated.com.google.common.collect.Maps;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import software.amazon.awssdk.core.exception.SdkException;\n+import software.amazon.awssdk.services.glue.GlueClient;\n+import software.amazon.awssdk.services.glue.model.ConcurrentModificationException;\n+import software.amazon.awssdk.services.glue.model.CreateTableRequest;\n+import software.amazon.awssdk.services.glue.model.EntityNotFoundException;\n+import software.amazon.awssdk.services.glue.model.GetTableRequest;\n+import software.amazon.awssdk.services.glue.model.GetTableResponse;\n+import software.amazon.awssdk.services.glue.model.Table;\n+import software.amazon.awssdk.services.glue.model.TableInput;\n+import software.amazon.awssdk.services.glue.model.UpdateTableRequest;\n+\n+public class GlueTableOperations extends BaseMetastoreTableOperations {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "73bee5903e0bcaa1590973d7f4ef2409e26d6221"}, "originalPosition": 47}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "73bee5903e0bcaa1590973d7f4ef2409e26d6221", "author": {"user": {"login": "jackye1995", "name": "Jack Ye"}}, "url": "https://github.com/apache/iceberg/commit/73bee5903e0bcaa1590973d7f4ef2409e26d6221", "committedDate": "2020-11-11T01:56:04Z", "message": "enable configurable for file io loading"}, "afterCommit": {"oid": "efa701d15d419e673d95a33c2f49610de30441fc", "author": {"user": {"login": "jackye1995", "name": "Jack Ye"}}, "url": "https://github.com/apache/iceberg/commit/efa701d15d419e673d95a33c2f49610de30441fc", "committedDate": "2020-11-12T06:19:02Z", "message": "AWS Glue catalog and table operations"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ecee35546e1bc8b30fb52d3ca11e8a02d92222fd", "author": {"user": {"login": "jackye1995", "name": "Jack Ye"}}, "url": "https://github.com/apache/iceberg/commit/ecee35546e1bc8b30fb52d3ca11e8a02d92222fd", "committedDate": "2020-11-17T05:34:25Z", "message": "AWS Glue catalog and table operations"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "773503a3bc4b43c0df10f5dfc9116011432924cb", "author": {"user": {"login": "jackye1995", "name": "Jack Ye"}}, "url": "https://github.com/apache/iceberg/commit/773503a3bc4b43c0df10f5dfc9116011432924cb", "committedDate": "2020-11-12T06:24:57Z", "message": "change order for constructors"}, "afterCommit": {"oid": "ecee35546e1bc8b30fb52d3ca11e8a02d92222fd", "author": {"user": {"login": "jackye1995", "name": "Jack Ye"}}, "url": "https://github.com/apache/iceberg/commit/ecee35546e1bc8b30fb52d3ca11e8a02d92222fd", "committedDate": "2020-11-17T05:34:25Z", "message": "AWS Glue catalog and table operations"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMyOTYwMDAw", "url": "https://github.com/apache/iceberg/pull/1633#pullrequestreview-532960000", "createdAt": "2020-11-18T01:49:42Z", "commit": {"oid": "ecee35546e1bc8b30fb52d3ca11e8a02d92222fd"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQwMTo0OTo0MlrOH1Sp6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQwMTo0OTo0MlrOH1Sp6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTY0MjIxOA==", "bodyText": "Not a blocker, but I wonder if we should choose the FileIO for a table based on the table location. Any s3 URI would use S3FileIO, but other URIs would still use the default HadoopFileIO.\nAnother thing I've been considering is using a delegating FileIO that checks whether S3FileIO is available and loads it. If it is available, then it is used for all s3 paths, but HadoopFileIO is used for the others. This may be over-complicated.", "url": "https://github.com/apache/iceberg/pull/1633#discussion_r525642218", "createdAt": "2020-11-18T01:49:42Z", "author": {"login": "rdblue"}, "path": "aws/src/main/java/org/apache/iceberg/aws/glue/GlueCatalog.java", "diffHunk": "@@ -0,0 +1,400 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.aws.glue;\n+\n+import java.io.Closeable;\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import org.apache.hadoop.conf.Configurable;\n+import org.apache.hadoop.conf.Configuration;\n+import org.apache.iceberg.BaseMetastoreCatalog;\n+import org.apache.iceberg.CatalogProperties;\n+import org.apache.iceberg.CatalogUtil;\n+import org.apache.iceberg.TableMetadata;\n+import org.apache.iceberg.TableOperations;\n+import org.apache.iceberg.aws.AwsClientUtil;\n+import org.apache.iceberg.aws.AwsProperties;\n+import org.apache.iceberg.aws.s3.S3FileIO;\n+import org.apache.iceberg.catalog.Namespace;\n+import org.apache.iceberg.catalog.SupportsNamespaces;\n+import org.apache.iceberg.catalog.TableIdentifier;\n+import org.apache.iceberg.exceptions.AlreadyExistsException;\n+import org.apache.iceberg.exceptions.NamespaceNotEmptyException;\n+import org.apache.iceberg.exceptions.NoSuchNamespaceException;\n+import org.apache.iceberg.exceptions.NoSuchTableException;\n+import org.apache.iceberg.io.FileIO;\n+import org.apache.iceberg.relocated.com.google.common.annotations.VisibleForTesting;\n+import org.apache.iceberg.relocated.com.google.common.base.Preconditions;\n+import org.apache.iceberg.relocated.com.google.common.collect.Lists;\n+import org.apache.iceberg.relocated.com.google.common.collect.Maps;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import software.amazon.awssdk.services.glue.GlueClient;\n+import software.amazon.awssdk.services.glue.model.CreateDatabaseRequest;\n+import software.amazon.awssdk.services.glue.model.CreateTableRequest;\n+import software.amazon.awssdk.services.glue.model.DeleteDatabaseRequest;\n+import software.amazon.awssdk.services.glue.model.DeleteTableRequest;\n+import software.amazon.awssdk.services.glue.model.EntityNotFoundException;\n+import software.amazon.awssdk.services.glue.model.GetDatabaseRequest;\n+import software.amazon.awssdk.services.glue.model.GetDatabaseResponse;\n+import software.amazon.awssdk.services.glue.model.GetDatabasesRequest;\n+import software.amazon.awssdk.services.glue.model.GetDatabasesResponse;\n+import software.amazon.awssdk.services.glue.model.GetTableRequest;\n+import software.amazon.awssdk.services.glue.model.GetTableResponse;\n+import software.amazon.awssdk.services.glue.model.GetTablesRequest;\n+import software.amazon.awssdk.services.glue.model.GetTablesResponse;\n+import software.amazon.awssdk.services.glue.model.GlueException;\n+import software.amazon.awssdk.services.glue.model.InvalidInputException;\n+import software.amazon.awssdk.services.glue.model.Table;\n+import software.amazon.awssdk.services.glue.model.TableInput;\n+import software.amazon.awssdk.services.glue.model.UpdateDatabaseRequest;\n+\n+public class GlueCatalog extends BaseMetastoreCatalog implements Closeable, SupportsNamespaces, Configurable {\n+\n+  private static final Logger LOG = LoggerFactory.getLogger(GlueCatalog.class);\n+\n+  private final GlueClient glue;\n+  private Configuration hadoopConf;\n+  private String catalogName;\n+  private String warehousePath;\n+  private AwsProperties awsProperties;\n+  private FileIO fileIO;\n+\n+  /**\n+   * No-arg constructor to load the catalog dynamically.\n+   * <p>\n+   * Only the AWS Glue client is initialized.\n+   * Other fields must be initialized by calling {@link GlueCatalog#initialize(String, Map)} later.\n+   */\n+  public GlueCatalog() {\n+    this(AwsClientUtil.defaultGlueClient());\n+  }\n+\n+  @VisibleForTesting\n+  GlueCatalog(GlueClient glue) {\n+    this.glue = glue;\n+  }\n+\n+  @Override\n+  public void initialize(String name, Map<String, String> properties) {\n+    String fileIOImpl = properties.get(CatalogProperties.FILE_IO_IMPL);\n+    initialize(\n+        name,\n+        properties.get(CatalogProperties.WAREHOUSE_LOCATION),\n+        new AwsProperties(properties),\n+        fileIOImpl == null ? new S3FileIO() : CatalogUtil.loadFileIO(fileIOImpl, properties, hadoopConf));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ecee35546e1bc8b30fb52d3ca11e8a02d92222fd"}, "originalPosition": 105}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMyOTY5MDE0", "url": "https://github.com/apache/iceberg/pull/1633#pullrequestreview-532969014", "createdAt": "2020-11-18T01:55:10Z", "commit": {"oid": "ecee35546e1bc8b30fb52d3ca11e8a02d92222fd"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQwMTo1NToxMVrOH1Sw1Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQwMTo1NToxMVrOH1Sw1Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTY0Mzk4OQ==", "bodyText": "Seems like it would be safer to do this in the opposite order: create the new table as a copy and then drop the existing table. That way, if anything goes wrong, you have at least one copy of the table no matter what. And if only half of the operation succeeds, then you can clean it up by running DROP TABLE.\nThis way, if you lose connectivity after dropping the table, you may not be able to recover.", "url": "https://github.com/apache/iceberg/pull/1633#discussion_r525643989", "createdAt": "2020-11-18T01:55:11Z", "author": {"login": "rdblue"}, "path": "aws/src/main/java/org/apache/iceberg/aws/glue/GlueCatalog.java", "diffHunk": "@@ -0,0 +1,400 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.aws.glue;\n+\n+import java.io.Closeable;\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import org.apache.hadoop.conf.Configurable;\n+import org.apache.hadoop.conf.Configuration;\n+import org.apache.iceberg.BaseMetastoreCatalog;\n+import org.apache.iceberg.CatalogProperties;\n+import org.apache.iceberg.CatalogUtil;\n+import org.apache.iceberg.TableMetadata;\n+import org.apache.iceberg.TableOperations;\n+import org.apache.iceberg.aws.AwsClientUtil;\n+import org.apache.iceberg.aws.AwsProperties;\n+import org.apache.iceberg.aws.s3.S3FileIO;\n+import org.apache.iceberg.catalog.Namespace;\n+import org.apache.iceberg.catalog.SupportsNamespaces;\n+import org.apache.iceberg.catalog.TableIdentifier;\n+import org.apache.iceberg.exceptions.AlreadyExistsException;\n+import org.apache.iceberg.exceptions.NamespaceNotEmptyException;\n+import org.apache.iceberg.exceptions.NoSuchNamespaceException;\n+import org.apache.iceberg.exceptions.NoSuchTableException;\n+import org.apache.iceberg.io.FileIO;\n+import org.apache.iceberg.relocated.com.google.common.annotations.VisibleForTesting;\n+import org.apache.iceberg.relocated.com.google.common.base.Preconditions;\n+import org.apache.iceberg.relocated.com.google.common.collect.Lists;\n+import org.apache.iceberg.relocated.com.google.common.collect.Maps;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import software.amazon.awssdk.services.glue.GlueClient;\n+import software.amazon.awssdk.services.glue.model.CreateDatabaseRequest;\n+import software.amazon.awssdk.services.glue.model.CreateTableRequest;\n+import software.amazon.awssdk.services.glue.model.DeleteDatabaseRequest;\n+import software.amazon.awssdk.services.glue.model.DeleteTableRequest;\n+import software.amazon.awssdk.services.glue.model.EntityNotFoundException;\n+import software.amazon.awssdk.services.glue.model.GetDatabaseRequest;\n+import software.amazon.awssdk.services.glue.model.GetDatabaseResponse;\n+import software.amazon.awssdk.services.glue.model.GetDatabasesRequest;\n+import software.amazon.awssdk.services.glue.model.GetDatabasesResponse;\n+import software.amazon.awssdk.services.glue.model.GetTableRequest;\n+import software.amazon.awssdk.services.glue.model.GetTableResponse;\n+import software.amazon.awssdk.services.glue.model.GetTablesRequest;\n+import software.amazon.awssdk.services.glue.model.GetTablesResponse;\n+import software.amazon.awssdk.services.glue.model.GlueException;\n+import software.amazon.awssdk.services.glue.model.InvalidInputException;\n+import software.amazon.awssdk.services.glue.model.Table;\n+import software.amazon.awssdk.services.glue.model.TableInput;\n+import software.amazon.awssdk.services.glue.model.UpdateDatabaseRequest;\n+\n+public class GlueCatalog extends BaseMetastoreCatalog implements Closeable, SupportsNamespaces, Configurable {\n+\n+  private static final Logger LOG = LoggerFactory.getLogger(GlueCatalog.class);\n+\n+  private final GlueClient glue;\n+  private Configuration hadoopConf;\n+  private String catalogName;\n+  private String warehousePath;\n+  private AwsProperties awsProperties;\n+  private FileIO fileIO;\n+\n+  /**\n+   * No-arg constructor to load the catalog dynamically.\n+   * <p>\n+   * Only the AWS Glue client is initialized.\n+   * Other fields must be initialized by calling {@link GlueCatalog#initialize(String, Map)} later.\n+   */\n+  public GlueCatalog() {\n+    this(AwsClientUtil.defaultGlueClient());\n+  }\n+\n+  @VisibleForTesting\n+  GlueCatalog(GlueClient glue) {\n+    this.glue = glue;\n+  }\n+\n+  @Override\n+  public void initialize(String name, Map<String, String> properties) {\n+    String fileIOImpl = properties.get(CatalogProperties.FILE_IO_IMPL);\n+    initialize(\n+        name,\n+        properties.get(CatalogProperties.WAREHOUSE_LOCATION),\n+        new AwsProperties(properties),\n+        fileIOImpl == null ? new S3FileIO() : CatalogUtil.loadFileIO(fileIOImpl, properties, hadoopConf));\n+  }\n+\n+  @VisibleForTesting\n+  void initialize(String name, String path, AwsProperties properties, FileIO io) {\n+    this.catalogName = name;\n+    this.awsProperties = properties;\n+    this.warehousePath = cleanWarehousePath(path);\n+    this.fileIO = io;\n+  }\n+\n+  private String cleanWarehousePath(String path) {\n+    Preconditions.checkArgument(path != null && path.length() > 0,\n+        \"Cannot initialize GlueCatalog because warehousePath must not be null\");\n+    int len = path.length();\n+    if (path.charAt(len - 1) == '/') {\n+      return path.substring(0, len - 1);\n+    } else {\n+      return path;\n+    }\n+  }\n+\n+  @Override\n+  protected TableOperations newTableOps(TableIdentifier tableIdentifier) {\n+    return new GlueTableOperations(glue, catalogName, awsProperties, fileIO, tableIdentifier);\n+  }\n+\n+  /**\n+   * This method produces the same result as using a HiveCatalog.\n+   * If databaseUri exists for the Glue database URI, the default location is databaseUri/tableName.\n+   * If not, the default location is warehousePath/databaseName.db/tableName\n+   * @param tableIdentifier table id\n+   * @return default warehouse path\n+   */\n+  @Override\n+  protected String defaultWarehouseLocation(TableIdentifier tableIdentifier) {\n+    // check if value is set in database\n+    GetDatabaseResponse response = glue.getDatabase(GetDatabaseRequest.builder()\n+        .name(IcebergToGlueConverter.getDatabaseName(tableIdentifier))\n+        .build());\n+    String dbLocationUri = response.database().locationUri();\n+    if (dbLocationUri != null) {\n+      return String.format(\"%s/%s\", dbLocationUri, tableIdentifier.name());\n+    }\n+\n+    return String.format(\n+        \"%s/%s.db/%s\",\n+        warehousePath,\n+        IcebergToGlueConverter.getDatabaseName(tableIdentifier),\n+        tableIdentifier.name());\n+  }\n+\n+  @Override\n+  public List<TableIdentifier> listTables(Namespace namespace) {\n+    namespaceExists(namespace);\n+    // should be safe to list all before returning the list, instead of dynamically load the list.\n+    String nextToken = null;\n+    List<TableIdentifier> results = Lists.newArrayList();\n+    do {\n+      GetTablesResponse response = glue.getTables(GetTablesRequest.builder()\n+          .catalogId(awsProperties.glueCatalogId())\n+          .databaseName(IcebergToGlueConverter.toDatabaseName(namespace))\n+          .nextToken(nextToken)\n+          .build());\n+      nextToken = response.nextToken();\n+      if (response.hasTableList()) {\n+        results.addAll(response.tableList().stream()\n+            .map(GlueToIcebergConverter::toTableId)\n+            .collect(Collectors.toList()));\n+      }\n+    } while (nextToken != null);\n+\n+    LOG.debug(\"Listing of namespace: {} resulted in the following tables: {}\", namespace, results);\n+    return results;\n+  }\n+\n+  @Override\n+  public boolean dropTable(TableIdentifier identifier, boolean purge) {\n+    try {\n+      TableOperations ops = newTableOps(identifier);\n+      TableMetadata lastMetadata = ops.current();\n+      glue.deleteTable(DeleteTableRequest.builder()\n+          .catalogId(awsProperties.glueCatalogId())\n+          .databaseName(IcebergToGlueConverter.getDatabaseName(identifier))\n+          .name(identifier.name())\n+          .build());\n+      LOG.info(\"Successfully dropped table {} from Glue\", identifier);\n+      if (purge && lastMetadata != null) {\n+        CatalogUtil.dropTableData(ops.io(), lastMetadata);\n+        LOG.info(\"Glue table {} data purged\", identifier);\n+      }\n+      LOG.info(\"Dropped table: {}\", identifier);\n+      return true;\n+    } catch (EntityNotFoundException e) {\n+      LOG.error(\"Cannot drop table {} because table not found or not accessible\", identifier, e);\n+      return false;\n+    } catch (Exception e) {\n+      LOG.error(\"Cannot complete drop table operation for {} due to unexpected exception\", identifier, e);\n+      throw e;\n+    }\n+  }\n+\n+  /**\n+   * Rename table in Glue is a drop table and create table.\n+   * @param from identifier of the table to rename\n+   * @param to new table name\n+   */\n+  @Override\n+  public void renameTable(TableIdentifier from, TableIdentifier to) {\n+    // check new namespace exists\n+    if (!namespaceExists(to.namespace())) {\n+      throw new NoSuchNamespaceException(\"Cannot rename %s to %s because namespace %s does not exist\",\n+          from, to, to.namespace());\n+    }\n+    // keep metadata\n+    Table fromTable = null;\n+    String fromTableDbName = IcebergToGlueConverter.getDatabaseName(from);\n+    String fromTableName = IcebergToGlueConverter.getTableName(from);\n+    String toTableDbName = IcebergToGlueConverter.getDatabaseName(to);\n+    String toTableName = IcebergToGlueConverter.getTableName(to);\n+    try {\n+      GetTableResponse response = glue.getTable(GetTableRequest.builder()\n+          .catalogId(awsProperties.glueCatalogId())\n+          .databaseName(fromTableDbName)\n+          .name(fromTableName)\n+          .build());\n+      fromTable = response.table();\n+    } catch (EntityNotFoundException e) {\n+      throw new NoSuchTableException(e, \"Cannot rename %s because the table does not exist in Glue\", from);\n+    }\n+\n+    dropTable(from, false);\n+    // use the same Glue info to create the new table, pointing to the old metadata\n+    TableInput.Builder tableInputBuilder = TableInput.builder()\n+        .owner(fromTable.owner())\n+        .tableType(fromTable.tableType())\n+        .parameters(fromTable.parameters());\n+    try {\n+      glue.createTable(CreateTableRequest.builder()\n+          .catalogId(awsProperties.glueCatalogId())\n+          .databaseName(toTableDbName)\n+          .tableInput(tableInputBuilder.name(toTableName).build())\n+          .build());\n+      LOG.info(\"Renamed table from {} to {}\", from, to);\n+    } catch (GlueException e) {\n+      // rollback, recreate old table and rethrow exception\n+      LOG.error(\"Fail to rename table from {} to {}, rollback the old table\", from, to, e);\n+      glue.createTable(CreateTableRequest.builder()\n+          .catalogId(awsProperties.glueCatalogId())\n+          .databaseName(fromTableDbName)\n+          .tableInput(tableInputBuilder.name(fromTableName).build())\n+          .build());\n+      throw e;\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ecee35546e1bc8b30fb52d3ca11e8a02d92222fd"}, "originalPosition": 258}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMyOTgyODY5", "url": "https://github.com/apache/iceberg/pull/1633#pullrequestreview-532982869", "createdAt": "2020-11-18T02:03:38Z", "commit": {"oid": "ecee35546e1bc8b30fb52d3ca11e8a02d92222fd"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQwMjowMzozOVrOH1S7DQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQwMjowMzozOVrOH1S7DQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTY0NjYwNQ==", "bodyText": "This logic is used in Hive because when running in Hive, HiveMetaHook is used to create the Iceberg table and by the time it runs the commit, Hive has already created the metadata in the HiveMetaStore.\nThis shouldn't be needed for Glue because we don't expect any other process to create the Glue table. Concurrent table creation should always call create, which may fail with an AlreadyExistsException.", "url": "https://github.com/apache/iceberg/pull/1633#discussion_r525646605", "createdAt": "2020-11-18T02:03:39Z", "author": {"login": "rdblue"}, "path": "aws/src/main/java/org/apache/iceberg/aws/glue/GlueTableOperations.java", "diffHunk": "@@ -0,0 +1,198 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.aws.glue;\n+\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Optional;\n+import org.apache.iceberg.BaseMetastoreTableOperations;\n+import org.apache.iceberg.TableMetadata;\n+import org.apache.iceberg.aws.AwsProperties;\n+import org.apache.iceberg.catalog.TableIdentifier;\n+import org.apache.iceberg.exceptions.AlreadyExistsException;\n+import org.apache.iceberg.exceptions.CommitFailedException;\n+import org.apache.iceberg.exceptions.NoSuchTableException;\n+import org.apache.iceberg.io.FileIO;\n+import org.apache.iceberg.relocated.com.google.common.collect.Maps;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import software.amazon.awssdk.core.exception.SdkException;\n+import software.amazon.awssdk.services.glue.GlueClient;\n+import software.amazon.awssdk.services.glue.model.ConcurrentModificationException;\n+import software.amazon.awssdk.services.glue.model.CreateTableRequest;\n+import software.amazon.awssdk.services.glue.model.EntityNotFoundException;\n+import software.amazon.awssdk.services.glue.model.GetTableRequest;\n+import software.amazon.awssdk.services.glue.model.GetTableResponse;\n+import software.amazon.awssdk.services.glue.model.Table;\n+import software.amazon.awssdk.services.glue.model.TableInput;\n+import software.amazon.awssdk.services.glue.model.UpdateTableRequest;\n+\n+class GlueTableOperations extends BaseMetastoreTableOperations {\n+\n+  private static final Logger LOG = LoggerFactory.getLogger(GlueTableOperations.class);\n+\n+  // same as org.apache.hadoop.hive.metastore.TableType.EXTERNAL_TABLE\n+  // more details: https://docs.aws.amazon.com/glue/latest/webapi/API_TableInput.html\n+  private static final String GLUE_EXTERNAL_TABLE_TYPE = \"EXTERNAL_TABLE\";\n+\n+  private final GlueClient glue;\n+  private final AwsProperties awsProperties;\n+  private final String databaseName;\n+  private final String tableName;\n+  private final String fullTableName;\n+  private final FileIO fileIO;\n+\n+  GlueTableOperations(GlueClient glue, String catalogName, AwsProperties awsProperties,\n+                      FileIO fileIO, TableIdentifier tableIdentifier) {\n+    this.glue = glue;\n+    this.awsProperties = awsProperties;\n+    this.databaseName = IcebergToGlueConverter.getDatabaseName(tableIdentifier);\n+    this.tableName = IcebergToGlueConverter.getTableName(tableIdentifier);\n+    this.fullTableName = String.format(\"%s.%s.%s\", catalogName, databaseName, tableName);\n+    this.fileIO = fileIO;\n+  }\n+\n+  @Override\n+  public FileIO io() {\n+    return fileIO;\n+  }\n+\n+  @Override\n+  protected String tableName() {\n+    return fullTableName;\n+  }\n+\n+  @Override\n+  protected void doRefresh() {\n+    String metadataLocation = null;\n+    Optional<Table> tableOptional = getGlueTable();\n+    if (tableOptional.isPresent()) {\n+      Table table = tableOptional.get();\n+      GlueToIcebergConverter.validateTable(table, tableName());\n+      metadataLocation = table.parameters().get(METADATA_LOCATION_PROP);\n+    } else {\n+      if (currentMetadataLocation() != null) {\n+        throw new NoSuchTableException(\"Cannot find Glue table %s after refresh, \" +\n+            \"maybe another process deleted it or revoked your access permission\", tableName());\n+      }\n+    }\n+\n+    refreshFromMetadataLocation(metadataLocation);\n+  }\n+\n+  @Override\n+  protected void doCommit(TableMetadata base, TableMetadata metadata) {\n+    String newMetadataLocation = writeNewMetadata(metadata, currentVersion() + 1);\n+    boolean exceptionThrown = true;\n+    boolean isUpdate = false;\n+    Table glueTable = null;\n+    try {\n+      Optional<Table> glueTableOptional = getGlueTable();\n+      if (glueTableOptional.isPresent()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ecee35546e1bc8b30fb52d3ca11e8a02d92222fd"}, "originalPosition": 109}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMyOTg1MDE3", "url": "https://github.com/apache/iceberg/pull/1633#pullrequestreview-532985017", "createdAt": "2020-11-18T02:04:58Z", "commit": {"oid": "ecee35546e1bc8b30fb52d3ca11e8a02d92222fd"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQwMjowNDo1OVrOH1S89g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQwMjowNDo1OVrOH1S89g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTY0NzA5NA==", "bodyText": "When would ConcurrentModificationException be thrown by Glue?", "url": "https://github.com/apache/iceberg/pull/1633#discussion_r525647094", "createdAt": "2020-11-18T02:04:59Z", "author": {"login": "rdblue"}, "path": "aws/src/main/java/org/apache/iceberg/aws/glue/GlueTableOperations.java", "diffHunk": "@@ -0,0 +1,198 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.aws.glue;\n+\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Optional;\n+import org.apache.iceberg.BaseMetastoreTableOperations;\n+import org.apache.iceberg.TableMetadata;\n+import org.apache.iceberg.aws.AwsProperties;\n+import org.apache.iceberg.catalog.TableIdentifier;\n+import org.apache.iceberg.exceptions.AlreadyExistsException;\n+import org.apache.iceberg.exceptions.CommitFailedException;\n+import org.apache.iceberg.exceptions.NoSuchTableException;\n+import org.apache.iceberg.io.FileIO;\n+import org.apache.iceberg.relocated.com.google.common.collect.Maps;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import software.amazon.awssdk.core.exception.SdkException;\n+import software.amazon.awssdk.services.glue.GlueClient;\n+import software.amazon.awssdk.services.glue.model.ConcurrentModificationException;\n+import software.amazon.awssdk.services.glue.model.CreateTableRequest;\n+import software.amazon.awssdk.services.glue.model.EntityNotFoundException;\n+import software.amazon.awssdk.services.glue.model.GetTableRequest;\n+import software.amazon.awssdk.services.glue.model.GetTableResponse;\n+import software.amazon.awssdk.services.glue.model.Table;\n+import software.amazon.awssdk.services.glue.model.TableInput;\n+import software.amazon.awssdk.services.glue.model.UpdateTableRequest;\n+\n+class GlueTableOperations extends BaseMetastoreTableOperations {\n+\n+  private static final Logger LOG = LoggerFactory.getLogger(GlueTableOperations.class);\n+\n+  // same as org.apache.hadoop.hive.metastore.TableType.EXTERNAL_TABLE\n+  // more details: https://docs.aws.amazon.com/glue/latest/webapi/API_TableInput.html\n+  private static final String GLUE_EXTERNAL_TABLE_TYPE = \"EXTERNAL_TABLE\";\n+\n+  private final GlueClient glue;\n+  private final AwsProperties awsProperties;\n+  private final String databaseName;\n+  private final String tableName;\n+  private final String fullTableName;\n+  private final FileIO fileIO;\n+\n+  GlueTableOperations(GlueClient glue, String catalogName, AwsProperties awsProperties,\n+                      FileIO fileIO, TableIdentifier tableIdentifier) {\n+    this.glue = glue;\n+    this.awsProperties = awsProperties;\n+    this.databaseName = IcebergToGlueConverter.getDatabaseName(tableIdentifier);\n+    this.tableName = IcebergToGlueConverter.getTableName(tableIdentifier);\n+    this.fullTableName = String.format(\"%s.%s.%s\", catalogName, databaseName, tableName);\n+    this.fileIO = fileIO;\n+  }\n+\n+  @Override\n+  public FileIO io() {\n+    return fileIO;\n+  }\n+\n+  @Override\n+  protected String tableName() {\n+    return fullTableName;\n+  }\n+\n+  @Override\n+  protected void doRefresh() {\n+    String metadataLocation = null;\n+    Optional<Table> tableOptional = getGlueTable();\n+    if (tableOptional.isPresent()) {\n+      Table table = tableOptional.get();\n+      GlueToIcebergConverter.validateTable(table, tableName());\n+      metadataLocation = table.parameters().get(METADATA_LOCATION_PROP);\n+    } else {\n+      if (currentMetadataLocation() != null) {\n+        throw new NoSuchTableException(\"Cannot find Glue table %s after refresh, \" +\n+            \"maybe another process deleted it or revoked your access permission\", tableName());\n+      }\n+    }\n+\n+    refreshFromMetadataLocation(metadataLocation);\n+  }\n+\n+  @Override\n+  protected void doCommit(TableMetadata base, TableMetadata metadata) {\n+    String newMetadataLocation = writeNewMetadata(metadata, currentVersion() + 1);\n+    boolean exceptionThrown = true;\n+    boolean isUpdate = false;\n+    Table glueTable = null;\n+    try {\n+      Optional<Table> glueTableOptional = getGlueTable();\n+      if (glueTableOptional.isPresent()) {\n+        glueTable = glueTableOptional.get();\n+        isUpdate = true;\n+        // If we try to create the table but the metadata location is already set, then we had a concurrent commit\n+        if (base == null && glueTable.parameters().get(METADATA_LOCATION_PROP) != null) {\n+          throw new AlreadyExistsException(\"Cannot commit because table %s already exists in Glue\", tableName());\n+        }\n+      }\n+\n+      checkMetadataLocation(isUpdate, glueTable, base);\n+      Map<String, String> properties = prepareProperties(isUpdate, glueTable, newMetadataLocation);\n+      persistGlueTable(isUpdate, properties);\n+      exceptionThrown = false;\n+    } catch (CommitFailedException | AlreadyExistsException e) {\n+      throw e;\n+    } catch (ConcurrentModificationException e) {\n+      throw new CommitFailedException(e,\n+          \"Cannot commit %s because Glue detected concurrent update\", tableName());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ecee35546e1bc8b30fb52d3ca11e8a02d92222fd"}, "originalPosition": 126}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMyOTg1NTM3", "url": "https://github.com/apache/iceberg/pull/1633#pullrequestreview-532985537", "createdAt": "2020-11-18T02:05:18Z", "commit": {"oid": "ecee35546e1bc8b30fb52d3ca11e8a02d92222fd"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQwMjowNToxOFrOH1S9Ww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQwMjowNToxOFrOH1S9Ww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTY0NzE5NQ==", "bodyText": "How does this block know that create was called?", "url": "https://github.com/apache/iceberg/pull/1633#discussion_r525647195", "createdAt": "2020-11-18T02:05:18Z", "author": {"login": "rdblue"}, "path": "aws/src/main/java/org/apache/iceberg/aws/glue/GlueTableOperations.java", "diffHunk": "@@ -0,0 +1,198 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.aws.glue;\n+\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Optional;\n+import org.apache.iceberg.BaseMetastoreTableOperations;\n+import org.apache.iceberg.TableMetadata;\n+import org.apache.iceberg.aws.AwsProperties;\n+import org.apache.iceberg.catalog.TableIdentifier;\n+import org.apache.iceberg.exceptions.AlreadyExistsException;\n+import org.apache.iceberg.exceptions.CommitFailedException;\n+import org.apache.iceberg.exceptions.NoSuchTableException;\n+import org.apache.iceberg.io.FileIO;\n+import org.apache.iceberg.relocated.com.google.common.collect.Maps;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import software.amazon.awssdk.core.exception.SdkException;\n+import software.amazon.awssdk.services.glue.GlueClient;\n+import software.amazon.awssdk.services.glue.model.ConcurrentModificationException;\n+import software.amazon.awssdk.services.glue.model.CreateTableRequest;\n+import software.amazon.awssdk.services.glue.model.EntityNotFoundException;\n+import software.amazon.awssdk.services.glue.model.GetTableRequest;\n+import software.amazon.awssdk.services.glue.model.GetTableResponse;\n+import software.amazon.awssdk.services.glue.model.Table;\n+import software.amazon.awssdk.services.glue.model.TableInput;\n+import software.amazon.awssdk.services.glue.model.UpdateTableRequest;\n+\n+class GlueTableOperations extends BaseMetastoreTableOperations {\n+\n+  private static final Logger LOG = LoggerFactory.getLogger(GlueTableOperations.class);\n+\n+  // same as org.apache.hadoop.hive.metastore.TableType.EXTERNAL_TABLE\n+  // more details: https://docs.aws.amazon.com/glue/latest/webapi/API_TableInput.html\n+  private static final String GLUE_EXTERNAL_TABLE_TYPE = \"EXTERNAL_TABLE\";\n+\n+  private final GlueClient glue;\n+  private final AwsProperties awsProperties;\n+  private final String databaseName;\n+  private final String tableName;\n+  private final String fullTableName;\n+  private final FileIO fileIO;\n+\n+  GlueTableOperations(GlueClient glue, String catalogName, AwsProperties awsProperties,\n+                      FileIO fileIO, TableIdentifier tableIdentifier) {\n+    this.glue = glue;\n+    this.awsProperties = awsProperties;\n+    this.databaseName = IcebergToGlueConverter.getDatabaseName(tableIdentifier);\n+    this.tableName = IcebergToGlueConverter.getTableName(tableIdentifier);\n+    this.fullTableName = String.format(\"%s.%s.%s\", catalogName, databaseName, tableName);\n+    this.fileIO = fileIO;\n+  }\n+\n+  @Override\n+  public FileIO io() {\n+    return fileIO;\n+  }\n+\n+  @Override\n+  protected String tableName() {\n+    return fullTableName;\n+  }\n+\n+  @Override\n+  protected void doRefresh() {\n+    String metadataLocation = null;\n+    Optional<Table> tableOptional = getGlueTable();\n+    if (tableOptional.isPresent()) {\n+      Table table = tableOptional.get();\n+      GlueToIcebergConverter.validateTable(table, tableName());\n+      metadataLocation = table.parameters().get(METADATA_LOCATION_PROP);\n+    } else {\n+      if (currentMetadataLocation() != null) {\n+        throw new NoSuchTableException(\"Cannot find Glue table %s after refresh, \" +\n+            \"maybe another process deleted it or revoked your access permission\", tableName());\n+      }\n+    }\n+\n+    refreshFromMetadataLocation(metadataLocation);\n+  }\n+\n+  @Override\n+  protected void doCommit(TableMetadata base, TableMetadata metadata) {\n+    String newMetadataLocation = writeNewMetadata(metadata, currentVersion() + 1);\n+    boolean exceptionThrown = true;\n+    boolean isUpdate = false;\n+    Table glueTable = null;\n+    try {\n+      Optional<Table> glueTableOptional = getGlueTable();\n+      if (glueTableOptional.isPresent()) {\n+        glueTable = glueTableOptional.get();\n+        isUpdate = true;\n+        // If we try to create the table but the metadata location is already set, then we had a concurrent commit\n+        if (base == null && glueTable.parameters().get(METADATA_LOCATION_PROP) != null) {\n+          throw new AlreadyExistsException(\"Cannot commit because table %s already exists in Glue\", tableName());\n+        }\n+      }\n+\n+      checkMetadataLocation(isUpdate, glueTable, base);\n+      Map<String, String> properties = prepareProperties(isUpdate, glueTable, newMetadataLocation);\n+      persistGlueTable(isUpdate, properties);\n+      exceptionThrown = false;\n+    } catch (CommitFailedException | AlreadyExistsException e) {\n+      throw e;\n+    } catch (ConcurrentModificationException e) {\n+      throw new CommitFailedException(e,\n+          \"Cannot commit %s because Glue detected concurrent update\", tableName());\n+    } catch (software.amazon.awssdk.services.glue.model.AlreadyExistsException e) {\n+      throw new AlreadyExistsException(e,\n+          \"Cannot commit %s because its Glue table already exists when trying to create one\", tableName());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ecee35546e1bc8b30fb52d3ca11e8a02d92222fd"}, "originalPosition": 129}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMyOTg3NjU5", "url": "https://github.com/apache/iceberg/pull/1633#pullrequestreview-532987659", "createdAt": "2020-11-18T02:06:36Z", "commit": {"oid": "ecee35546e1bc8b30fb52d3ca11e8a02d92222fd"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQwMjowNjozNlrOH1S-8Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQwMjowNjozNlrOH1S-8Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTY0NzYwMQ==", "bodyText": "If the above block is removed, then this no longer needs to be in the try block. I think that also means you can remove CommitFailedException from the catch.", "url": "https://github.com/apache/iceberg/pull/1633#discussion_r525647601", "createdAt": "2020-11-18T02:06:36Z", "author": {"login": "rdblue"}, "path": "aws/src/main/java/org/apache/iceberg/aws/glue/GlueTableOperations.java", "diffHunk": "@@ -0,0 +1,198 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.aws.glue;\n+\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Optional;\n+import org.apache.iceberg.BaseMetastoreTableOperations;\n+import org.apache.iceberg.TableMetadata;\n+import org.apache.iceberg.aws.AwsProperties;\n+import org.apache.iceberg.catalog.TableIdentifier;\n+import org.apache.iceberg.exceptions.AlreadyExistsException;\n+import org.apache.iceberg.exceptions.CommitFailedException;\n+import org.apache.iceberg.exceptions.NoSuchTableException;\n+import org.apache.iceberg.io.FileIO;\n+import org.apache.iceberg.relocated.com.google.common.collect.Maps;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import software.amazon.awssdk.core.exception.SdkException;\n+import software.amazon.awssdk.services.glue.GlueClient;\n+import software.amazon.awssdk.services.glue.model.ConcurrentModificationException;\n+import software.amazon.awssdk.services.glue.model.CreateTableRequest;\n+import software.amazon.awssdk.services.glue.model.EntityNotFoundException;\n+import software.amazon.awssdk.services.glue.model.GetTableRequest;\n+import software.amazon.awssdk.services.glue.model.GetTableResponse;\n+import software.amazon.awssdk.services.glue.model.Table;\n+import software.amazon.awssdk.services.glue.model.TableInput;\n+import software.amazon.awssdk.services.glue.model.UpdateTableRequest;\n+\n+class GlueTableOperations extends BaseMetastoreTableOperations {\n+\n+  private static final Logger LOG = LoggerFactory.getLogger(GlueTableOperations.class);\n+\n+  // same as org.apache.hadoop.hive.metastore.TableType.EXTERNAL_TABLE\n+  // more details: https://docs.aws.amazon.com/glue/latest/webapi/API_TableInput.html\n+  private static final String GLUE_EXTERNAL_TABLE_TYPE = \"EXTERNAL_TABLE\";\n+\n+  private final GlueClient glue;\n+  private final AwsProperties awsProperties;\n+  private final String databaseName;\n+  private final String tableName;\n+  private final String fullTableName;\n+  private final FileIO fileIO;\n+\n+  GlueTableOperations(GlueClient glue, String catalogName, AwsProperties awsProperties,\n+                      FileIO fileIO, TableIdentifier tableIdentifier) {\n+    this.glue = glue;\n+    this.awsProperties = awsProperties;\n+    this.databaseName = IcebergToGlueConverter.getDatabaseName(tableIdentifier);\n+    this.tableName = IcebergToGlueConverter.getTableName(tableIdentifier);\n+    this.fullTableName = String.format(\"%s.%s.%s\", catalogName, databaseName, tableName);\n+    this.fileIO = fileIO;\n+  }\n+\n+  @Override\n+  public FileIO io() {\n+    return fileIO;\n+  }\n+\n+  @Override\n+  protected String tableName() {\n+    return fullTableName;\n+  }\n+\n+  @Override\n+  protected void doRefresh() {\n+    String metadataLocation = null;\n+    Optional<Table> tableOptional = getGlueTable();\n+    if (tableOptional.isPresent()) {\n+      Table table = tableOptional.get();\n+      GlueToIcebergConverter.validateTable(table, tableName());\n+      metadataLocation = table.parameters().get(METADATA_LOCATION_PROP);\n+    } else {\n+      if (currentMetadataLocation() != null) {\n+        throw new NoSuchTableException(\"Cannot find Glue table %s after refresh, \" +\n+            \"maybe another process deleted it or revoked your access permission\", tableName());\n+      }\n+    }\n+\n+    refreshFromMetadataLocation(metadataLocation);\n+  }\n+\n+  @Override\n+  protected void doCommit(TableMetadata base, TableMetadata metadata) {\n+    String newMetadataLocation = writeNewMetadata(metadata, currentVersion() + 1);\n+    boolean exceptionThrown = true;\n+    boolean isUpdate = false;\n+    Table glueTable = null;\n+    try {\n+      Optional<Table> glueTableOptional = getGlueTable();\n+      if (glueTableOptional.isPresent()) {\n+        glueTable = glueTableOptional.get();\n+        isUpdate = true;\n+        // If we try to create the table but the metadata location is already set, then we had a concurrent commit\n+        if (base == null && glueTable.parameters().get(METADATA_LOCATION_PROP) != null) {\n+          throw new AlreadyExistsException(\"Cannot commit because table %s already exists in Glue\", tableName());\n+        }\n+      }\n+\n+      checkMetadataLocation(isUpdate, glueTable, base);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ecee35546e1bc8b30fb52d3ca11e8a02d92222fd"}, "originalPosition": 118}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMyOTg4OTE3", "url": "https://github.com/apache/iceberg/pull/1633#pullrequestreview-532988917", "createdAt": "2020-11-18T02:07:23Z", "commit": {"oid": "ecee35546e1bc8b30fb52d3ca11e8a02d92222fd"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQwMjowNzoyM1rOH1S_7g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQwMjowNzoyM1rOH1S_7g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTY0Nzg1NA==", "bodyText": "Why does this use ofNullable? Seems like the response returning a null table is an error.", "url": "https://github.com/apache/iceberg/pull/1633#discussion_r525647854", "createdAt": "2020-11-18T02:07:23Z", "author": {"login": "rdblue"}, "path": "aws/src/main/java/org/apache/iceberg/aws/glue/GlueTableOperations.java", "diffHunk": "@@ -0,0 +1,198 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.aws.glue;\n+\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Optional;\n+import org.apache.iceberg.BaseMetastoreTableOperations;\n+import org.apache.iceberg.TableMetadata;\n+import org.apache.iceberg.aws.AwsProperties;\n+import org.apache.iceberg.catalog.TableIdentifier;\n+import org.apache.iceberg.exceptions.AlreadyExistsException;\n+import org.apache.iceberg.exceptions.CommitFailedException;\n+import org.apache.iceberg.exceptions.NoSuchTableException;\n+import org.apache.iceberg.io.FileIO;\n+import org.apache.iceberg.relocated.com.google.common.collect.Maps;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import software.amazon.awssdk.core.exception.SdkException;\n+import software.amazon.awssdk.services.glue.GlueClient;\n+import software.amazon.awssdk.services.glue.model.ConcurrentModificationException;\n+import software.amazon.awssdk.services.glue.model.CreateTableRequest;\n+import software.amazon.awssdk.services.glue.model.EntityNotFoundException;\n+import software.amazon.awssdk.services.glue.model.GetTableRequest;\n+import software.amazon.awssdk.services.glue.model.GetTableResponse;\n+import software.amazon.awssdk.services.glue.model.Table;\n+import software.amazon.awssdk.services.glue.model.TableInput;\n+import software.amazon.awssdk.services.glue.model.UpdateTableRequest;\n+\n+class GlueTableOperations extends BaseMetastoreTableOperations {\n+\n+  private static final Logger LOG = LoggerFactory.getLogger(GlueTableOperations.class);\n+\n+  // same as org.apache.hadoop.hive.metastore.TableType.EXTERNAL_TABLE\n+  // more details: https://docs.aws.amazon.com/glue/latest/webapi/API_TableInput.html\n+  private static final String GLUE_EXTERNAL_TABLE_TYPE = \"EXTERNAL_TABLE\";\n+\n+  private final GlueClient glue;\n+  private final AwsProperties awsProperties;\n+  private final String databaseName;\n+  private final String tableName;\n+  private final String fullTableName;\n+  private final FileIO fileIO;\n+\n+  GlueTableOperations(GlueClient glue, String catalogName, AwsProperties awsProperties,\n+                      FileIO fileIO, TableIdentifier tableIdentifier) {\n+    this.glue = glue;\n+    this.awsProperties = awsProperties;\n+    this.databaseName = IcebergToGlueConverter.getDatabaseName(tableIdentifier);\n+    this.tableName = IcebergToGlueConverter.getTableName(tableIdentifier);\n+    this.fullTableName = String.format(\"%s.%s.%s\", catalogName, databaseName, tableName);\n+    this.fileIO = fileIO;\n+  }\n+\n+  @Override\n+  public FileIO io() {\n+    return fileIO;\n+  }\n+\n+  @Override\n+  protected String tableName() {\n+    return fullTableName;\n+  }\n+\n+  @Override\n+  protected void doRefresh() {\n+    String metadataLocation = null;\n+    Optional<Table> tableOptional = getGlueTable();\n+    if (tableOptional.isPresent()) {\n+      Table table = tableOptional.get();\n+      GlueToIcebergConverter.validateTable(table, tableName());\n+      metadataLocation = table.parameters().get(METADATA_LOCATION_PROP);\n+    } else {\n+      if (currentMetadataLocation() != null) {\n+        throw new NoSuchTableException(\"Cannot find Glue table %s after refresh, \" +\n+            \"maybe another process deleted it or revoked your access permission\", tableName());\n+      }\n+    }\n+\n+    refreshFromMetadataLocation(metadataLocation);\n+  }\n+\n+  @Override\n+  protected void doCommit(TableMetadata base, TableMetadata metadata) {\n+    String newMetadataLocation = writeNewMetadata(metadata, currentVersion() + 1);\n+    boolean exceptionThrown = true;\n+    boolean isUpdate = false;\n+    Table glueTable = null;\n+    try {\n+      Optional<Table> glueTableOptional = getGlueTable();\n+      if (glueTableOptional.isPresent()) {\n+        glueTable = glueTableOptional.get();\n+        isUpdate = true;\n+        // If we try to create the table but the metadata location is already set, then we had a concurrent commit\n+        if (base == null && glueTable.parameters().get(METADATA_LOCATION_PROP) != null) {\n+          throw new AlreadyExistsException(\"Cannot commit because table %s already exists in Glue\", tableName());\n+        }\n+      }\n+\n+      checkMetadataLocation(isUpdate, glueTable, base);\n+      Map<String, String> properties = prepareProperties(isUpdate, glueTable, newMetadataLocation);\n+      persistGlueTable(isUpdate, properties);\n+      exceptionThrown = false;\n+    } catch (CommitFailedException | AlreadyExistsException e) {\n+      throw e;\n+    } catch (ConcurrentModificationException e) {\n+      throw new CommitFailedException(e,\n+          \"Cannot commit %s because Glue detected concurrent update\", tableName());\n+    } catch (software.amazon.awssdk.services.glue.model.AlreadyExistsException e) {\n+      throw new AlreadyExistsException(e,\n+          \"Cannot commit %s because its Glue table already exists when trying to create one\", tableName());\n+    } catch (SdkException e) {\n+      throw new CommitFailedException(e, \"Cannot commit %s because unexpected exception contacting AWS\", tableName());\n+    } finally {\n+      if (exceptionThrown) {\n+        io().deleteFile(newMetadataLocation);\n+      }\n+    }\n+  }\n+\n+  private void checkMetadataLocation(boolean isUpdate, Table glueTable, TableMetadata base) {\n+    String glueMetadataLocation = isUpdate ? glueTable.parameters().get(METADATA_LOCATION_PROP) : null;\n+    String baseMetadataLocation = base != null ? base.metadataFileLocation() : null;\n+    if (!Objects.equals(baseMetadataLocation, glueMetadataLocation)) {\n+      throw new CommitFailedException(\n+          \"Cannot commit %s because base metadata location '%s' is not same as the current Glue location '%s'\",\n+          tableName(), baseMetadataLocation, glueMetadataLocation);\n+    }\n+  }\n+\n+  private Optional<Table> getGlueTable() {\n+    try {\n+      GetTableResponse response = glue.getTable(GetTableRequest.builder()\n+          .catalogId(awsProperties.glueCatalogId())\n+          .databaseName(databaseName)\n+          .name(tableName)\n+          .build());\n+      return Optional.ofNullable(response.table());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ecee35546e1bc8b30fb52d3ca11e8a02d92222fd"}, "originalPosition": 156}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMyOTkxMTI2", "url": "https://github.com/apache/iceberg/pull/1633#pullrequestreview-532991126", "createdAt": "2020-11-18T02:08:48Z", "commit": {"oid": "ecee35546e1bc8b30fb52d3ca11e8a02d92222fd"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQwMjowODo0OFrOH1TBaw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQwMjowODo0OFrOH1TBaw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTY0ODIzNQ==", "bodyText": "I don't think these exceptions are caught by other blocks, so you should be able to just remove this.", "url": "https://github.com/apache/iceberg/pull/1633#discussion_r525648235", "createdAt": "2020-11-18T02:08:48Z", "author": {"login": "rdblue"}, "path": "aws/src/main/java/org/apache/iceberg/aws/glue/GlueTableOperations.java", "diffHunk": "@@ -0,0 +1,198 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.aws.glue;\n+\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Optional;\n+import org.apache.iceberg.BaseMetastoreTableOperations;\n+import org.apache.iceberg.TableMetadata;\n+import org.apache.iceberg.aws.AwsProperties;\n+import org.apache.iceberg.catalog.TableIdentifier;\n+import org.apache.iceberg.exceptions.AlreadyExistsException;\n+import org.apache.iceberg.exceptions.CommitFailedException;\n+import org.apache.iceberg.exceptions.NoSuchTableException;\n+import org.apache.iceberg.io.FileIO;\n+import org.apache.iceberg.relocated.com.google.common.collect.Maps;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import software.amazon.awssdk.core.exception.SdkException;\n+import software.amazon.awssdk.services.glue.GlueClient;\n+import software.amazon.awssdk.services.glue.model.ConcurrentModificationException;\n+import software.amazon.awssdk.services.glue.model.CreateTableRequest;\n+import software.amazon.awssdk.services.glue.model.EntityNotFoundException;\n+import software.amazon.awssdk.services.glue.model.GetTableRequest;\n+import software.amazon.awssdk.services.glue.model.GetTableResponse;\n+import software.amazon.awssdk.services.glue.model.Table;\n+import software.amazon.awssdk.services.glue.model.TableInput;\n+import software.amazon.awssdk.services.glue.model.UpdateTableRequest;\n+\n+class GlueTableOperations extends BaseMetastoreTableOperations {\n+\n+  private static final Logger LOG = LoggerFactory.getLogger(GlueTableOperations.class);\n+\n+  // same as org.apache.hadoop.hive.metastore.TableType.EXTERNAL_TABLE\n+  // more details: https://docs.aws.amazon.com/glue/latest/webapi/API_TableInput.html\n+  private static final String GLUE_EXTERNAL_TABLE_TYPE = \"EXTERNAL_TABLE\";\n+\n+  private final GlueClient glue;\n+  private final AwsProperties awsProperties;\n+  private final String databaseName;\n+  private final String tableName;\n+  private final String fullTableName;\n+  private final FileIO fileIO;\n+\n+  GlueTableOperations(GlueClient glue, String catalogName, AwsProperties awsProperties,\n+                      FileIO fileIO, TableIdentifier tableIdentifier) {\n+    this.glue = glue;\n+    this.awsProperties = awsProperties;\n+    this.databaseName = IcebergToGlueConverter.getDatabaseName(tableIdentifier);\n+    this.tableName = IcebergToGlueConverter.getTableName(tableIdentifier);\n+    this.fullTableName = String.format(\"%s.%s.%s\", catalogName, databaseName, tableName);\n+    this.fileIO = fileIO;\n+  }\n+\n+  @Override\n+  public FileIO io() {\n+    return fileIO;\n+  }\n+\n+  @Override\n+  protected String tableName() {\n+    return fullTableName;\n+  }\n+\n+  @Override\n+  protected void doRefresh() {\n+    String metadataLocation = null;\n+    Optional<Table> tableOptional = getGlueTable();\n+    if (tableOptional.isPresent()) {\n+      Table table = tableOptional.get();\n+      GlueToIcebergConverter.validateTable(table, tableName());\n+      metadataLocation = table.parameters().get(METADATA_LOCATION_PROP);\n+    } else {\n+      if (currentMetadataLocation() != null) {\n+        throw new NoSuchTableException(\"Cannot find Glue table %s after refresh, \" +\n+            \"maybe another process deleted it or revoked your access permission\", tableName());\n+      }\n+    }\n+\n+    refreshFromMetadataLocation(metadataLocation);\n+  }\n+\n+  @Override\n+  protected void doCommit(TableMetadata base, TableMetadata metadata) {\n+    String newMetadataLocation = writeNewMetadata(metadata, currentVersion() + 1);\n+    boolean exceptionThrown = true;\n+    boolean isUpdate = false;\n+    Table glueTable = null;\n+    try {\n+      Optional<Table> glueTableOptional = getGlueTable();\n+      if (glueTableOptional.isPresent()) {\n+        glueTable = glueTableOptional.get();\n+        isUpdate = true;\n+        // If we try to create the table but the metadata location is already set, then we had a concurrent commit\n+        if (base == null && glueTable.parameters().get(METADATA_LOCATION_PROP) != null) {\n+          throw new AlreadyExistsException(\"Cannot commit because table %s already exists in Glue\", tableName());\n+        }\n+      }\n+\n+      checkMetadataLocation(isUpdate, glueTable, base);\n+      Map<String, String> properties = prepareProperties(isUpdate, glueTable, newMetadataLocation);\n+      persistGlueTable(isUpdate, properties);\n+      exceptionThrown = false;\n+    } catch (CommitFailedException | AlreadyExistsException e) {\n+      throw e;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ecee35546e1bc8b30fb52d3ca11e8a02d92222fd"}, "originalPosition": 123}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMyOTkzODY4", "url": "https://github.com/apache/iceberg/pull/1633#pullrequestreview-532993868", "createdAt": "2020-11-18T02:10:30Z", "commit": {"oid": "ecee35546e1bc8b30fb52d3ca11e8a02d92222fd"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQwMjoxMDozMVrOH1TDtQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQwMjoxMDozMVrOH1TDtQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTY0ODgyMQ==", "bodyText": "If currentMetadataLocation is an empty string, then there is a problem. Empty strings shouldn't be handles like null strings.", "url": "https://github.com/apache/iceberg/pull/1633#discussion_r525648821", "createdAt": "2020-11-18T02:10:31Z", "author": {"login": "rdblue"}, "path": "aws/src/main/java/org/apache/iceberg/aws/glue/GlueTableOperations.java", "diffHunk": "@@ -0,0 +1,198 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.aws.glue;\n+\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Optional;\n+import org.apache.iceberg.BaseMetastoreTableOperations;\n+import org.apache.iceberg.TableMetadata;\n+import org.apache.iceberg.aws.AwsProperties;\n+import org.apache.iceberg.catalog.TableIdentifier;\n+import org.apache.iceberg.exceptions.AlreadyExistsException;\n+import org.apache.iceberg.exceptions.CommitFailedException;\n+import org.apache.iceberg.exceptions.NoSuchTableException;\n+import org.apache.iceberg.io.FileIO;\n+import org.apache.iceberg.relocated.com.google.common.collect.Maps;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import software.amazon.awssdk.core.exception.SdkException;\n+import software.amazon.awssdk.services.glue.GlueClient;\n+import software.amazon.awssdk.services.glue.model.ConcurrentModificationException;\n+import software.amazon.awssdk.services.glue.model.CreateTableRequest;\n+import software.amazon.awssdk.services.glue.model.EntityNotFoundException;\n+import software.amazon.awssdk.services.glue.model.GetTableRequest;\n+import software.amazon.awssdk.services.glue.model.GetTableResponse;\n+import software.amazon.awssdk.services.glue.model.Table;\n+import software.amazon.awssdk.services.glue.model.TableInput;\n+import software.amazon.awssdk.services.glue.model.UpdateTableRequest;\n+\n+class GlueTableOperations extends BaseMetastoreTableOperations {\n+\n+  private static final Logger LOG = LoggerFactory.getLogger(GlueTableOperations.class);\n+\n+  // same as org.apache.hadoop.hive.metastore.TableType.EXTERNAL_TABLE\n+  // more details: https://docs.aws.amazon.com/glue/latest/webapi/API_TableInput.html\n+  private static final String GLUE_EXTERNAL_TABLE_TYPE = \"EXTERNAL_TABLE\";\n+\n+  private final GlueClient glue;\n+  private final AwsProperties awsProperties;\n+  private final String databaseName;\n+  private final String tableName;\n+  private final String fullTableName;\n+  private final FileIO fileIO;\n+\n+  GlueTableOperations(GlueClient glue, String catalogName, AwsProperties awsProperties,\n+                      FileIO fileIO, TableIdentifier tableIdentifier) {\n+    this.glue = glue;\n+    this.awsProperties = awsProperties;\n+    this.databaseName = IcebergToGlueConverter.getDatabaseName(tableIdentifier);\n+    this.tableName = IcebergToGlueConverter.getTableName(tableIdentifier);\n+    this.fullTableName = String.format(\"%s.%s.%s\", catalogName, databaseName, tableName);\n+    this.fileIO = fileIO;\n+  }\n+\n+  @Override\n+  public FileIO io() {\n+    return fileIO;\n+  }\n+\n+  @Override\n+  protected String tableName() {\n+    return fullTableName;\n+  }\n+\n+  @Override\n+  protected void doRefresh() {\n+    String metadataLocation = null;\n+    Optional<Table> tableOptional = getGlueTable();\n+    if (tableOptional.isPresent()) {\n+      Table table = tableOptional.get();\n+      GlueToIcebergConverter.validateTable(table, tableName());\n+      metadataLocation = table.parameters().get(METADATA_LOCATION_PROP);\n+    } else {\n+      if (currentMetadataLocation() != null) {\n+        throw new NoSuchTableException(\"Cannot find Glue table %s after refresh, \" +\n+            \"maybe another process deleted it or revoked your access permission\", tableName());\n+      }\n+    }\n+\n+    refreshFromMetadataLocation(metadataLocation);\n+  }\n+\n+  @Override\n+  protected void doCommit(TableMetadata base, TableMetadata metadata) {\n+    String newMetadataLocation = writeNewMetadata(metadata, currentVersion() + 1);\n+    boolean exceptionThrown = true;\n+    boolean isUpdate = false;\n+    Table glueTable = null;\n+    try {\n+      Optional<Table> glueTableOptional = getGlueTable();\n+      if (glueTableOptional.isPresent()) {\n+        glueTable = glueTableOptional.get();\n+        isUpdate = true;\n+        // If we try to create the table but the metadata location is already set, then we had a concurrent commit\n+        if (base == null && glueTable.parameters().get(METADATA_LOCATION_PROP) != null) {\n+          throw new AlreadyExistsException(\"Cannot commit because table %s already exists in Glue\", tableName());\n+        }\n+      }\n+\n+      checkMetadataLocation(isUpdate, glueTable, base);\n+      Map<String, String> properties = prepareProperties(isUpdate, glueTable, newMetadataLocation);\n+      persistGlueTable(isUpdate, properties);\n+      exceptionThrown = false;\n+    } catch (CommitFailedException | AlreadyExistsException e) {\n+      throw e;\n+    } catch (ConcurrentModificationException e) {\n+      throw new CommitFailedException(e,\n+          \"Cannot commit %s because Glue detected concurrent update\", tableName());\n+    } catch (software.amazon.awssdk.services.glue.model.AlreadyExistsException e) {\n+      throw new AlreadyExistsException(e,\n+          \"Cannot commit %s because its Glue table already exists when trying to create one\", tableName());\n+    } catch (SdkException e) {\n+      throw new CommitFailedException(e, \"Cannot commit %s because unexpected exception contacting AWS\", tableName());\n+    } finally {\n+      if (exceptionThrown) {\n+        io().deleteFile(newMetadataLocation);\n+      }\n+    }\n+  }\n+\n+  private void checkMetadataLocation(boolean isUpdate, Table glueTable, TableMetadata base) {\n+    String glueMetadataLocation = isUpdate ? glueTable.parameters().get(METADATA_LOCATION_PROP) : null;\n+    String baseMetadataLocation = base != null ? base.metadataFileLocation() : null;\n+    if (!Objects.equals(baseMetadataLocation, glueMetadataLocation)) {\n+      throw new CommitFailedException(\n+          \"Cannot commit %s because base metadata location '%s' is not same as the current Glue location '%s'\",\n+          tableName(), baseMetadataLocation, glueMetadataLocation);\n+    }\n+  }\n+\n+  private Optional<Table> getGlueTable() {\n+    try {\n+      GetTableResponse response = glue.getTable(GetTableRequest.builder()\n+          .catalogId(awsProperties.glueCatalogId())\n+          .databaseName(databaseName)\n+          .name(tableName)\n+          .build());\n+      return Optional.ofNullable(response.table());\n+    } catch (EntityNotFoundException e) {\n+      return Optional.empty();\n+    }\n+  }\n+\n+  private Map<String, String> prepareProperties(boolean isUpdate, Table glueTable, String newMetadataLocation) {\n+    Map<String, String> properties = isUpdate ? Maps.newHashMap(glueTable.parameters()) : Maps.newHashMap();\n+    properties.put(TABLE_TYPE_PROP, ICEBERG_TABLE_TYPE_VALUE.toUpperCase(Locale.ENGLISH));\n+    properties.put(METADATA_LOCATION_PROP, newMetadataLocation);\n+    if (currentMetadataLocation() != null && !currentMetadataLocation().isEmpty()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ecee35546e1bc8b30fb52d3ca11e8a02d92222fd"}, "originalPosition": 166}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMzMDAwMTg1", "url": "https://github.com/apache/iceberg/pull/1633#pullrequestreview-533000185", "createdAt": "2020-11-18T02:19:13Z", "commit": {"oid": "ecee35546e1bc8b30fb52d3ca11e8a02d92222fd"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQwMjoxOToxM1rOH1TcZg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQwMjoxOToxM1rOH1TcZg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTY1NTE0Mg==", "bodyText": "These tests are okay, but it still doesn't seem like this is testing much. Most of the tests are responding to Mockito.any(GetDatabaseRequest.class) or similar, so it doesn't really test what gets passed to Glue. Better mocking would be great, but I'm starting to think that it may just be easier to maintain an in-memory catalog and a Glue client implementation that updates it. I think that would work better to catch simple problems.", "url": "https://github.com/apache/iceberg/pull/1633#discussion_r525655142", "createdAt": "2020-11-18T02:19:13Z", "author": {"login": "rdblue"}, "path": "aws/src/test/java/org/apache/iceberg/aws/glue/GlueCatalogTest.java", "diffHunk": "@@ -0,0 +1,358 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.aws.glue;\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.UUID;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import org.apache.iceberg.AssertHelpers;\n+import org.apache.iceberg.BaseMetastoreTableOperations;\n+import org.apache.iceberg.aws.AwsProperties;\n+import org.apache.iceberg.catalog.Namespace;\n+import org.apache.iceberg.catalog.TableIdentifier;\n+import org.apache.iceberg.exceptions.NamespaceNotEmptyException;\n+import org.apache.iceberg.exceptions.ValidationException;\n+import org.apache.iceberg.relocated.com.google.common.collect.Lists;\n+import org.apache.iceberg.relocated.com.google.common.collect.Sets;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.mockito.Mockito;\n+import org.mockito.invocation.InvocationOnMock;\n+import org.mockito.stubbing.Answer;\n+import software.amazon.awssdk.services.glue.GlueClient;\n+import software.amazon.awssdk.services.glue.model.CreateDatabaseRequest;\n+import software.amazon.awssdk.services.glue.model.CreateDatabaseResponse;\n+import software.amazon.awssdk.services.glue.model.Database;\n+import software.amazon.awssdk.services.glue.model.DeleteDatabaseRequest;\n+import software.amazon.awssdk.services.glue.model.DeleteDatabaseResponse;\n+import software.amazon.awssdk.services.glue.model.DeleteTableRequest;\n+import software.amazon.awssdk.services.glue.model.DeleteTableResponse;\n+import software.amazon.awssdk.services.glue.model.GetDatabaseRequest;\n+import software.amazon.awssdk.services.glue.model.GetDatabaseResponse;\n+import software.amazon.awssdk.services.glue.model.GetDatabasesRequest;\n+import software.amazon.awssdk.services.glue.model.GetDatabasesResponse;\n+import software.amazon.awssdk.services.glue.model.GetTableRequest;\n+import software.amazon.awssdk.services.glue.model.GetTableResponse;\n+import software.amazon.awssdk.services.glue.model.GetTablesRequest;\n+import software.amazon.awssdk.services.glue.model.GetTablesResponse;\n+import software.amazon.awssdk.services.glue.model.Table;\n+import software.amazon.awssdk.services.glue.model.UpdateDatabaseRequest;\n+import software.amazon.awssdk.services.glue.model.UpdateDatabaseResponse;\n+\n+public class GlueCatalogTest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ecee35546e1bc8b30fb52d3ca11e8a02d92222fd"}, "originalPosition": 62}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f418262b74f6fa9169f5ea68b51acefed5f8ec8e", "author": {"user": {"login": "jackye1995", "name": "Jack Ye"}}, "url": "https://github.com/apache/iceberg/commit/f418262b74f6fa9169f5ea68b51acefed5f8ec8e", "committedDate": "2020-11-18T23:13:21Z", "message": "fix order in rename, simplify  commit"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3997, "cost": 1, "resetAt": "2021-10-29T19:57:52Z"}}}