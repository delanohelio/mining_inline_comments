{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTM1MjQ3NTYz", "number": 1897, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQwOToyMDo1NFrOFDXy5g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQyMTowNTozMVrOFEMqHw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5MDc5OTEwOnYy", "diffSide": "RIGHT", "path": "hive3/src/main/java/org/apache/iceberg/mr/hive/serde/objectinspector/IcebergTimestampObjectInspectorHive3.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQwOToyMDo1NFrOIC_NYg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQwOTo0ODo0NVrOIDAdqg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDAwMzY4Mg==", "bodyText": "You might want to rebase to master. We need to implement WriteObjectInspector.\nAlso we need to test for them as well", "url": "https://github.com/apache/iceberg/pull/1897#discussion_r540003682", "createdAt": "2020-12-10T09:20:54Z", "author": {"login": "pvary"}, "path": "hive3/src/main/java/org/apache/iceberg/mr/hive/serde/objectinspector/IcebergTimestampObjectInspectorHive3.java", "diffHunk": "@@ -20,50 +20,32 @@\n package org.apache.iceberg.mr.hive.serde.objectinspector;\n \n import java.time.LocalDateTime;\n-import java.time.OffsetDateTime;\n import java.time.ZoneOffset;\n import org.apache.hadoop.hive.common.type.Timestamp;\n import org.apache.hadoop.hive.serde2.io.TimestampWritableV2;\n import org.apache.hadoop.hive.serde2.objectinspector.primitive.AbstractPrimitiveJavaObjectInspector;\n import org.apache.hadoop.hive.serde2.objectinspector.primitive.TimestampObjectInspector;\n import org.apache.hadoop.hive.serde2.typeinfo.TypeInfoFactory;\n \n-public abstract class IcebergTimestampObjectInspectorHive3 extends AbstractPrimitiveJavaObjectInspector\n+public class IcebergTimestampObjectInspectorHive3 extends AbstractPrimitiveJavaObjectInspector", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cb1e011fef1091c4734718cb2481d9dc88baa81d"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDAyNDIzNA==", "bodyText": "I've done a merge with master, and this class IcebergTimestampObjectInspectorHive3 doesn't seem to implement WriteObjectInspector yet even on master. I can add a similar convert method that we have for IcebergTimestampObjectInspector.", "url": "https://github.com/apache/iceberg/pull/1897#discussion_r540024234", "createdAt": "2020-12-10T09:48:45Z", "author": {"login": "marton-bod"}, "path": "hive3/src/main/java/org/apache/iceberg/mr/hive/serde/objectinspector/IcebergTimestampObjectInspectorHive3.java", "diffHunk": "@@ -20,50 +20,32 @@\n package org.apache.iceberg.mr.hive.serde.objectinspector;\n \n import java.time.LocalDateTime;\n-import java.time.OffsetDateTime;\n import java.time.ZoneOffset;\n import org.apache.hadoop.hive.common.type.Timestamp;\n import org.apache.hadoop.hive.serde2.io.TimestampWritableV2;\n import org.apache.hadoop.hive.serde2.objectinspector.primitive.AbstractPrimitiveJavaObjectInspector;\n import org.apache.hadoop.hive.serde2.objectinspector.primitive.TimestampObjectInspector;\n import org.apache.hadoop.hive.serde2.typeinfo.TypeInfoFactory;\n \n-public abstract class IcebergTimestampObjectInspectorHive3 extends AbstractPrimitiveJavaObjectInspector\n+public class IcebergTimestampObjectInspectorHive3 extends AbstractPrimitiveJavaObjectInspector", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDAwMzY4Mg=="}, "originalCommit": {"oid": "cb1e011fef1091c4734718cb2481d9dc88baa81d"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5MDgxMTU4OnYy", "diffSide": "RIGHT", "path": "hive3/src/test/java/org/apache/iceberg/mr/hive/serde/objectinspector/TestIcebergTimestampWithZoneObjectInspectorHive3.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQwOToyMzoyNVrOIC_Uyw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQwOTo0OToyN1rOIDAfeA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDAwNTU3OQ==", "bodyText": "Could we test that the same instant with different offset will result in the same TimestampTZ?", "url": "https://github.com/apache/iceberg/pull/1897#discussion_r540005579", "createdAt": "2020-12-10T09:23:25Z", "author": {"login": "pvary"}, "path": "hive3/src/test/java/org/apache/iceberg/mr/hive/serde/objectinspector/TestIcebergTimestampWithZoneObjectInspectorHive3.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.mr.hive.serde.objectinspector;\n+\n+import java.time.LocalDateTime;\n+import java.time.OffsetDateTime;\n+import java.time.ZoneOffset;\n+import org.apache.hadoop.hive.common.type.TimestampTZ;\n+import org.apache.hadoop.hive.serde2.io.TimestampLocalTZWritable;\n+import org.apache.hadoop.hive.serde2.objectinspector.ObjectInspector;\n+import org.apache.hadoop.hive.serde2.objectinspector.PrimitiveObjectInspector;\n+import org.apache.hadoop.hive.serde2.objectinspector.primitive.TimestampLocalTZObjectInspector;\n+import org.apache.hadoop.hive.serde2.typeinfo.TypeInfoFactory;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+public class TestIcebergTimestampWithZoneObjectInspectorHive3 {\n+\n+  @Test\n+  public void testIcebergTimestampLocalTZObjectInspector() {\n+    TimestampLocalTZObjectInspector oi = IcebergTimestampWithZoneObjectInspectorHive3.get();\n+\n+    Assert.assertEquals(ObjectInspector.Category.PRIMITIVE, oi.getCategory());\n+    Assert.assertEquals(PrimitiveObjectInspector.PrimitiveCategory.TIMESTAMPLOCALTZ, oi.getPrimitiveCategory());\n+\n+    Assert.assertEquals(TypeInfoFactory.timestampLocalTZTypeInfo, oi.getTypeInfo());\n+    Assert.assertEquals(TypeInfoFactory.timestampLocalTZTypeInfo.getTypeName(), oi.getTypeName());\n+\n+    Assert.assertEquals(TimestampTZ.class, oi.getJavaPrimitiveClass());\n+    Assert.assertEquals(TimestampLocalTZWritable.class, oi.getPrimitiveWritableClass());\n+\n+    Assert.assertNull(oi.copyObject(null));\n+    Assert.assertNull(oi.getPrimitiveJavaObject(null));\n+    Assert.assertNull(oi.getPrimitiveWritableObject(null));\n+\n+    long epochSeconds = 1601471970L;\n+    OffsetDateTime offsetDateTime = OffsetDateTime.of(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cb1e011fef1091c4734718cb2481d9dc88baa81d"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDAyNDY5Ng==", "bodyText": "Yes, that's a good idea.", "url": "https://github.com/apache/iceberg/pull/1897#discussion_r540024696", "createdAt": "2020-12-10T09:49:27Z", "author": {"login": "marton-bod"}, "path": "hive3/src/test/java/org/apache/iceberg/mr/hive/serde/objectinspector/TestIcebergTimestampWithZoneObjectInspectorHive3.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.mr.hive.serde.objectinspector;\n+\n+import java.time.LocalDateTime;\n+import java.time.OffsetDateTime;\n+import java.time.ZoneOffset;\n+import org.apache.hadoop.hive.common.type.TimestampTZ;\n+import org.apache.hadoop.hive.serde2.io.TimestampLocalTZWritable;\n+import org.apache.hadoop.hive.serde2.objectinspector.ObjectInspector;\n+import org.apache.hadoop.hive.serde2.objectinspector.PrimitiveObjectInspector;\n+import org.apache.hadoop.hive.serde2.objectinspector.primitive.TimestampLocalTZObjectInspector;\n+import org.apache.hadoop.hive.serde2.typeinfo.TypeInfoFactory;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+public class TestIcebergTimestampWithZoneObjectInspectorHive3 {\n+\n+  @Test\n+  public void testIcebergTimestampLocalTZObjectInspector() {\n+    TimestampLocalTZObjectInspector oi = IcebergTimestampWithZoneObjectInspectorHive3.get();\n+\n+    Assert.assertEquals(ObjectInspector.Category.PRIMITIVE, oi.getCategory());\n+    Assert.assertEquals(PrimitiveObjectInspector.PrimitiveCategory.TIMESTAMPLOCALTZ, oi.getPrimitiveCategory());\n+\n+    Assert.assertEquals(TypeInfoFactory.timestampLocalTZTypeInfo, oi.getTypeInfo());\n+    Assert.assertEquals(TypeInfoFactory.timestampLocalTZTypeInfo.getTypeName(), oi.getTypeName());\n+\n+    Assert.assertEquals(TimestampTZ.class, oi.getJavaPrimitiveClass());\n+    Assert.assertEquals(TimestampLocalTZWritable.class, oi.getPrimitiveWritableClass());\n+\n+    Assert.assertNull(oi.copyObject(null));\n+    Assert.assertNull(oi.getPrimitiveJavaObject(null));\n+    Assert.assertNull(oi.getPrimitiveWritableObject(null));\n+\n+    long epochSeconds = 1601471970L;\n+    OffsetDateTime offsetDateTime = OffsetDateTime.of(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDAwNTU3OQ=="}, "originalCommit": {"oid": "cb1e011fef1091c4734718cb2481d9dc88baa81d"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5MDgxNTMwOnYy", "diffSide": "RIGHT", "path": "hive3/src/test/java/org/apache/iceberg/mr/hive/serde/objectinspector/TestIcebergTimestampWithZoneObjectInspectorHive3.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQwOToyNDoxNVrOIC_W-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxNToxMjo1M1rOIDOJOw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDAwNjEzNg==", "bodyText": "How can we be sure that this epoch seconds really result in the expected TZ?", "url": "https://github.com/apache/iceberg/pull/1897#discussion_r540006136", "createdAt": "2020-12-10T09:24:15Z", "author": {"login": "pvary"}, "path": "hive3/src/test/java/org/apache/iceberg/mr/hive/serde/objectinspector/TestIcebergTimestampWithZoneObjectInspectorHive3.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.mr.hive.serde.objectinspector;\n+\n+import java.time.LocalDateTime;\n+import java.time.OffsetDateTime;\n+import java.time.ZoneOffset;\n+import org.apache.hadoop.hive.common.type.TimestampTZ;\n+import org.apache.hadoop.hive.serde2.io.TimestampLocalTZWritable;\n+import org.apache.hadoop.hive.serde2.objectinspector.ObjectInspector;\n+import org.apache.hadoop.hive.serde2.objectinspector.PrimitiveObjectInspector;\n+import org.apache.hadoop.hive.serde2.objectinspector.primitive.TimestampLocalTZObjectInspector;\n+import org.apache.hadoop.hive.serde2.typeinfo.TypeInfoFactory;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+public class TestIcebergTimestampWithZoneObjectInspectorHive3 {\n+\n+  @Test\n+  public void testIcebergTimestampLocalTZObjectInspector() {\n+    TimestampLocalTZObjectInspector oi = IcebergTimestampWithZoneObjectInspectorHive3.get();\n+\n+    Assert.assertEquals(ObjectInspector.Category.PRIMITIVE, oi.getCategory());\n+    Assert.assertEquals(PrimitiveObjectInspector.PrimitiveCategory.TIMESTAMPLOCALTZ, oi.getPrimitiveCategory());\n+\n+    Assert.assertEquals(TypeInfoFactory.timestampLocalTZTypeInfo, oi.getTypeInfo());\n+    Assert.assertEquals(TypeInfoFactory.timestampLocalTZTypeInfo.getTypeName(), oi.getTypeName());\n+\n+    Assert.assertEquals(TimestampTZ.class, oi.getJavaPrimitiveClass());\n+    Assert.assertEquals(TimestampLocalTZWritable.class, oi.getPrimitiveWritableClass());\n+\n+    Assert.assertNull(oi.copyObject(null));\n+    Assert.assertNull(oi.getPrimitiveJavaObject(null));\n+    Assert.assertNull(oi.getPrimitiveWritableObject(null));\n+\n+    long epochSeconds = 1601471970L;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cb1e011fef1091c4734718cb2481d9dc88baa81d"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDI0ODM3OQ==", "bodyText": "Refactored this to use LocalDateTime instead", "url": "https://github.com/apache/iceberg/pull/1897#discussion_r540248379", "createdAt": "2020-12-10T15:12:53Z", "author": {"login": "marton-bod"}, "path": "hive3/src/test/java/org/apache/iceberg/mr/hive/serde/objectinspector/TestIcebergTimestampWithZoneObjectInspectorHive3.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.mr.hive.serde.objectinspector;\n+\n+import java.time.LocalDateTime;\n+import java.time.OffsetDateTime;\n+import java.time.ZoneOffset;\n+import org.apache.hadoop.hive.common.type.TimestampTZ;\n+import org.apache.hadoop.hive.serde2.io.TimestampLocalTZWritable;\n+import org.apache.hadoop.hive.serde2.objectinspector.ObjectInspector;\n+import org.apache.hadoop.hive.serde2.objectinspector.PrimitiveObjectInspector;\n+import org.apache.hadoop.hive.serde2.objectinspector.primitive.TimestampLocalTZObjectInspector;\n+import org.apache.hadoop.hive.serde2.typeinfo.TypeInfoFactory;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+public class TestIcebergTimestampWithZoneObjectInspectorHive3 {\n+\n+  @Test\n+  public void testIcebergTimestampLocalTZObjectInspector() {\n+    TimestampLocalTZObjectInspector oi = IcebergTimestampWithZoneObjectInspectorHive3.get();\n+\n+    Assert.assertEquals(ObjectInspector.Category.PRIMITIVE, oi.getCategory());\n+    Assert.assertEquals(PrimitiveObjectInspector.PrimitiveCategory.TIMESTAMPLOCALTZ, oi.getPrimitiveCategory());\n+\n+    Assert.assertEquals(TypeInfoFactory.timestampLocalTZTypeInfo, oi.getTypeInfo());\n+    Assert.assertEquals(TypeInfoFactory.timestampLocalTZTypeInfo.getTypeName(), oi.getTypeName());\n+\n+    Assert.assertEquals(TimestampTZ.class, oi.getJavaPrimitiveClass());\n+    Assert.assertEquals(TimestampLocalTZWritable.class, oi.getPrimitiveWritableClass());\n+\n+    Assert.assertNull(oi.copyObject(null));\n+    Assert.assertNull(oi.getPrimitiveJavaObject(null));\n+    Assert.assertNull(oi.getPrimitiveWritableObject(null));\n+\n+    long epochSeconds = 1601471970L;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDAwNjEzNg=="}, "originalCommit": {"oid": "cb1e011fef1091c4734718cb2481d9dc88baa81d"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5MDgyMTA1OnYy", "diffSide": "LEFT", "path": "mr/src/main/java/org/apache/iceberg/mr/hive/serde/objectinspector/IcebergTimestampObjectInspector.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQwOToyNToyNlrOIC_aUg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxNToxNDo0MlrOIDOO_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDAwNjk5NA==", "bodyText": "Why did we remove this?", "url": "https://github.com/apache/iceberg/pull/1897#discussion_r540006994", "createdAt": "2020-12-10T09:25:26Z", "author": {"login": "pvary"}, "path": "mr/src/main/java/org/apache/iceberg/mr/hive/serde/objectinspector/IcebergTimestampObjectInspector.java", "diffHunk": "@@ -80,22 +57,16 @@ public TimestampWritable getPrimitiveWritableObject(Object o) {\n \n   @Override\n   public Object copyObject(Object o) {\n-    if (o == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cb1e011fef1091c4734718cb2481d9dc88baa81d"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDI0OTg1Mw==", "bodyText": "this null check is handled in the else branch", "url": "https://github.com/apache/iceberg/pull/1897#discussion_r540249853", "createdAt": "2020-12-10T15:14:42Z", "author": {"login": "marton-bod"}, "path": "mr/src/main/java/org/apache/iceberg/mr/hive/serde/objectinspector/IcebergTimestampObjectInspector.java", "diffHunk": "@@ -80,22 +57,16 @@ public TimestampWritable getPrimitiveWritableObject(Object o) {\n \n   @Override\n   public Object copyObject(Object o) {\n-    if (o == null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDAwNjk5NA=="}, "originalCommit": {"oid": "cb1e011fef1091c4734718cb2481d9dc88baa81d"}, "originalPosition": 69}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5NzU1NTI0OnYy", "diffSide": "RIGHT", "path": "hive3/src/main/java/org/apache/iceberg/mr/hive/serde/objectinspector/IcebergTimestampObjectInspectorHive3.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxNDo0MDoxNlrOID7qzA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxNDo1OTowOVrOID8cvA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDk5NDI1Mg==", "bodyText": "Do we lose nanos here?", "url": "https://github.com/apache/iceberg/pull/1897#discussion_r540994252", "createdAt": "2020-12-11T14:40:16Z", "author": {"login": "pvary"}, "path": "hive3/src/main/java/org/apache/iceberg/mr/hive/serde/objectinspector/IcebergTimestampObjectInspectorHive3.java", "diffHunk": "@@ -20,50 +20,38 @@\n package org.apache.iceberg.mr.hive.serde.objectinspector;\n \n import java.time.LocalDateTime;\n-import java.time.OffsetDateTime;\n import java.time.ZoneOffset;\n import org.apache.hadoop.hive.common.type.Timestamp;\n import org.apache.hadoop.hive.serde2.io.TimestampWritableV2;\n import org.apache.hadoop.hive.serde2.objectinspector.primitive.AbstractPrimitiveJavaObjectInspector;\n import org.apache.hadoop.hive.serde2.objectinspector.primitive.TimestampObjectInspector;\n import org.apache.hadoop.hive.serde2.typeinfo.TypeInfoFactory;\n \n-public abstract class IcebergTimestampObjectInspectorHive3 extends AbstractPrimitiveJavaObjectInspector\n-    implements TimestampObjectInspector {\n+public class IcebergTimestampObjectInspectorHive3 extends AbstractPrimitiveJavaObjectInspector\n+    implements TimestampObjectInspector, WriteObjectInspector {\n \n-  private static final IcebergTimestampObjectInspectorHive3 INSTANCE_WITH_ZONE =\n-      new IcebergTimestampObjectInspectorHive3() {\n-        @Override\n-        LocalDateTime toLocalDateTime(Object o) {\n-          return ((OffsetDateTime) o).toLocalDateTime();\n-        }\n-      };\n+  private static final IcebergTimestampObjectInspectorHive3 INSTANCE = new IcebergTimestampObjectInspectorHive3();\n \n-  private static final IcebergTimestampObjectInspectorHive3 INSTANCE_WITHOUT_ZONE =\n-      new IcebergTimestampObjectInspectorHive3() {\n-        @Override\n-        LocalDateTime toLocalDateTime(Object o) {\n-          return (LocalDateTime) o;\n-        }\n-      };\n-\n-  public static IcebergTimestampObjectInspectorHive3 get(boolean adjustToUTC) {\n-    return adjustToUTC ? INSTANCE_WITH_ZONE : INSTANCE_WITHOUT_ZONE;\n+  public static IcebergTimestampObjectInspectorHive3 get() {\n+    return INSTANCE;\n   }\n \n   private IcebergTimestampObjectInspectorHive3() {\n     super(TypeInfoFactory.timestampTypeInfo);\n   }\n \n-\n-  abstract LocalDateTime toLocalDateTime(Object object);\n+  @Override\n+  public LocalDateTime convert(Object o) {\n+    return o == null ? null : LocalDateTime.ofEpochSecond(\n+        ((TimestampWritableV2) o).getTimestamp().toEpochSecond(), 0, ZoneOffset.UTC);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "400ada5fb23b9f89c152642237cfb73038f9d50e"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTAwNzAzNg==", "bodyText": "we did, but we shouldn't :) fixed", "url": "https://github.com/apache/iceberg/pull/1897#discussion_r541007036", "createdAt": "2020-12-11T14:59:09Z", "author": {"login": "marton-bod"}, "path": "hive3/src/main/java/org/apache/iceberg/mr/hive/serde/objectinspector/IcebergTimestampObjectInspectorHive3.java", "diffHunk": "@@ -20,50 +20,38 @@\n package org.apache.iceberg.mr.hive.serde.objectinspector;\n \n import java.time.LocalDateTime;\n-import java.time.OffsetDateTime;\n import java.time.ZoneOffset;\n import org.apache.hadoop.hive.common.type.Timestamp;\n import org.apache.hadoop.hive.serde2.io.TimestampWritableV2;\n import org.apache.hadoop.hive.serde2.objectinspector.primitive.AbstractPrimitiveJavaObjectInspector;\n import org.apache.hadoop.hive.serde2.objectinspector.primitive.TimestampObjectInspector;\n import org.apache.hadoop.hive.serde2.typeinfo.TypeInfoFactory;\n \n-public abstract class IcebergTimestampObjectInspectorHive3 extends AbstractPrimitiveJavaObjectInspector\n-    implements TimestampObjectInspector {\n+public class IcebergTimestampObjectInspectorHive3 extends AbstractPrimitiveJavaObjectInspector\n+    implements TimestampObjectInspector, WriteObjectInspector {\n \n-  private static final IcebergTimestampObjectInspectorHive3 INSTANCE_WITH_ZONE =\n-      new IcebergTimestampObjectInspectorHive3() {\n-        @Override\n-        LocalDateTime toLocalDateTime(Object o) {\n-          return ((OffsetDateTime) o).toLocalDateTime();\n-        }\n-      };\n+  private static final IcebergTimestampObjectInspectorHive3 INSTANCE = new IcebergTimestampObjectInspectorHive3();\n \n-  private static final IcebergTimestampObjectInspectorHive3 INSTANCE_WITHOUT_ZONE =\n-      new IcebergTimestampObjectInspectorHive3() {\n-        @Override\n-        LocalDateTime toLocalDateTime(Object o) {\n-          return (LocalDateTime) o;\n-        }\n-      };\n-\n-  public static IcebergTimestampObjectInspectorHive3 get(boolean adjustToUTC) {\n-    return adjustToUTC ? INSTANCE_WITH_ZONE : INSTANCE_WITHOUT_ZONE;\n+  public static IcebergTimestampObjectInspectorHive3 get() {\n+    return INSTANCE;\n   }\n \n   private IcebergTimestampObjectInspectorHive3() {\n     super(TypeInfoFactory.timestampTypeInfo);\n   }\n \n-\n-  abstract LocalDateTime toLocalDateTime(Object object);\n+  @Override\n+  public LocalDateTime convert(Object o) {\n+    return o == null ? null : LocalDateTime.ofEpochSecond(\n+        ((TimestampWritableV2) o).getTimestamp().toEpochSecond(), 0, ZoneOffset.UTC);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDk5NDI1Mg=="}, "originalCommit": {"oid": "400ada5fb23b9f89c152642237cfb73038f9d50e"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5ODQ1OTE2OnYy", "diffSide": "RIGHT", "path": "hive-metastore/src/main/java/org/apache/iceberg/hive/HiveSchemaConverter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxODowNDoxOFrOIED8_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMlQwOTo1NToyNFrOIEdQug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTEyOTk4MA==", "bodyText": "equalsIgnoreCase?", "url": "https://github.com/apache/iceberg/pull/1897#discussion_r541129980", "createdAt": "2020-12-11T18:04:18Z", "author": {"login": "rdblue"}, "path": "hive-metastore/src/main/java/org/apache/iceberg/hive/HiveSchemaConverter.java", "diffHunk": "@@ -99,6 +99,10 @@ Type convertType(TypeInfo typeInfo) {\n           case INTERVAL_YEAR_MONTH:\n           case INTERVAL_DAY_TIME:\n           default:\n+            // special case for Timestamp with Local TZ which is only available in Hive3\n+            if (\"TIMESTAMPLOCALTZ\".equals(((PrimitiveTypeInfo) typeInfo).getPrimitiveCategory().name())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "203631a2c44ff65410df56a91aaaf3ffe30ccc4b"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTU0NDYzNA==", "bodyText": "I think it should always be all uppercase, but I've changed it just to be safe.", "url": "https://github.com/apache/iceberg/pull/1897#discussion_r541544634", "createdAt": "2020-12-12T09:55:24Z", "author": {"login": "marton-bod"}, "path": "hive-metastore/src/main/java/org/apache/iceberg/hive/HiveSchemaConverter.java", "diffHunk": "@@ -99,6 +99,10 @@ Type convertType(TypeInfo typeInfo) {\n           case INTERVAL_YEAR_MONTH:\n           case INTERVAL_DAY_TIME:\n           default:\n+            // special case for Timestamp with Local TZ which is only available in Hive3\n+            if (\"TIMESTAMPLOCALTZ\".equals(((PrimitiveTypeInfo) typeInfo).getPrimitiveCategory().name())) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTEyOTk4MA=="}, "originalCommit": {"oid": "203631a2c44ff65410df56a91aaaf3ffe30ccc4b"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5OTQ0MTIyOnYy", "diffSide": "RIGHT", "path": "hive3/src/test/java/org/apache/iceberg/mr/hive/TestHiveSchemaUtilHive3.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQyMTowMjoyN1rOIENjQg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMlQwOTo1Mzo0MVrOIEdPug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTI4NzIzNA==", "bodyText": "Is it possible to use super and add only specific fields?", "url": "https://github.com/apache/iceberg/pull/1897#discussion_r541287234", "createdAt": "2020-12-11T21:02:27Z", "author": {"login": "pvary"}, "path": "hive3/src/test/java/org/apache/iceberg/mr/hive/TestHiveSchemaUtilHive3.java", "diffHunk": "@@ -0,0 +1,68 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.mr.hive;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import org.apache.hadoop.hive.metastore.api.FieldSchema;\n+import org.apache.hadoop.hive.serde.serdeConstants;\n+import org.apache.iceberg.Schema;\n+import org.apache.iceberg.hive.TestHiveSchemaUtil;\n+import org.apache.iceberg.types.Types;\n+\n+import static org.apache.iceberg.types.Types.NestedField.optional;\n+\n+public class TestHiveSchemaUtilHive3 extends TestHiveSchemaUtil {\n+\n+  @Override\n+  protected List<FieldSchema> getSupportedFieldSchemas() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "203631a2c44ff65410df56a91aaaf3ffe30ccc4b"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTU0NDM3OA==", "bodyText": "yes, changed it to use super", "url": "https://github.com/apache/iceberg/pull/1897#discussion_r541544378", "createdAt": "2020-12-12T09:53:41Z", "author": {"login": "marton-bod"}, "path": "hive3/src/test/java/org/apache/iceberg/mr/hive/TestHiveSchemaUtilHive3.java", "diffHunk": "@@ -0,0 +1,68 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.mr.hive;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import org.apache.hadoop.hive.metastore.api.FieldSchema;\n+import org.apache.hadoop.hive.serde.serdeConstants;\n+import org.apache.iceberg.Schema;\n+import org.apache.iceberg.hive.TestHiveSchemaUtil;\n+import org.apache.iceberg.types.Types;\n+\n+import static org.apache.iceberg.types.Types.NestedField.optional;\n+\n+public class TestHiveSchemaUtilHive3 extends TestHiveSchemaUtil {\n+\n+  @Override\n+  protected List<FieldSchema> getSupportedFieldSchemas() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTI4NzIzNA=="}, "originalCommit": {"oid": "203631a2c44ff65410df56a91aaaf3ffe30ccc4b"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5OTQ2MDE1OnYy", "diffSide": "RIGHT", "path": "hive3/src/test/java/org/apache/iceberg/mr/hive/serde/objectinspector/TestIcebergTimestampObjectInspectorHive3.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQyMTowNTozMVrOIENu6w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMlQwOTo1MzoyOFrOIEdPmA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTI5MDIxOQ==", "bodyText": "We do not check nanos. Do we want to do it?", "url": "https://github.com/apache/iceberg/pull/1897#discussion_r541290219", "createdAt": "2020-12-11T21:05:31Z", "author": {"login": "pvary"}, "path": "hive3/src/test/java/org/apache/iceberg/mr/hive/serde/objectinspector/TestIcebergTimestampObjectInspectorHive3.java", "diffHunk": "@@ -51,6 +48,7 @@ public void testIcebergTimestampObjectInspector() {\n     Assert.assertNull(oi.copyObject(null));\n     Assert.assertNull(oi.getPrimitiveJavaObject(null));\n     Assert.assertNull(oi.getPrimitiveWritableObject(null));\n+    Assert.assertNull(oi.convert(null));\n \n     long epochMilli = 1601471970000L;\n     LocalDateTime local = LocalDateTime.ofInstant(Instant.ofEpochMilli(epochMilli), ZoneId.of(\"UTC\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "203631a2c44ff65410df56a91aaaf3ffe30ccc4b"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTMwOTA2NA==", "bodyText": "Yes!", "url": "https://github.com/apache/iceberg/pull/1897#discussion_r541309064", "createdAt": "2020-12-11T21:26:43Z", "author": {"login": "rdblue"}, "path": "hive3/src/test/java/org/apache/iceberg/mr/hive/serde/objectinspector/TestIcebergTimestampObjectInspectorHive3.java", "diffHunk": "@@ -51,6 +48,7 @@ public void testIcebergTimestampObjectInspector() {\n     Assert.assertNull(oi.copyObject(null));\n     Assert.assertNull(oi.getPrimitiveJavaObject(null));\n     Assert.assertNull(oi.getPrimitiveWritableObject(null));\n+    Assert.assertNull(oi.convert(null));\n \n     long epochMilli = 1601471970000L;\n     LocalDateTime local = LocalDateTime.ofInstant(Instant.ofEpochMilli(epochMilli), ZoneId.of(\"UTC\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTI5MDIxOQ=="}, "originalCommit": {"oid": "203631a2c44ff65410df56a91aaaf3ffe30ccc4b"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTU0NDM0NA==", "bodyText": "Done!", "url": "https://github.com/apache/iceberg/pull/1897#discussion_r541544344", "createdAt": "2020-12-12T09:53:28Z", "author": {"login": "marton-bod"}, "path": "hive3/src/test/java/org/apache/iceberg/mr/hive/serde/objectinspector/TestIcebergTimestampObjectInspectorHive3.java", "diffHunk": "@@ -51,6 +48,7 @@ public void testIcebergTimestampObjectInspector() {\n     Assert.assertNull(oi.copyObject(null));\n     Assert.assertNull(oi.getPrimitiveJavaObject(null));\n     Assert.assertNull(oi.getPrimitiveWritableObject(null));\n+    Assert.assertNull(oi.convert(null));\n \n     long epochMilli = 1601471970000L;\n     LocalDateTime local = LocalDateTime.ofInstant(Instant.ofEpochMilli(epochMilli), ZoneId.of(\"UTC\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTI5MDIxOQ=="}, "originalCommit": {"oid": "203631a2c44ff65410df56a91aaaf3ffe30ccc4b"}, "originalPosition": 31}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3305, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}