{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTExODUwMzMz", "number": 1675, "title": "API: Extend partitioning and sort order", "bodyText": "This updates the partitioning and sort order API with utilities needed for required distribution and ordering.\n\nAdds Expressions.transform to create an UnboundTransform term from an existing Transform and a field name\nAdds SortField.satisfies and Transform.satisfiesOrderOf to implement satisfies between compatible fields, like days and hours. Hours satisfies the ordering of days\nUpdates PartitionSpecVisitor to pass partition field IDs and adds unknown and alwaysNull visitor methods.\nAdds SortOrderVisitor to visit a sort order\nAdds Partitioning helper methods hasBucketField(PartitionSpec) and sortOrderFor(PartitionSpec)\nAdds CopySortOrderFields visitor to copy a sort order fields to a sort order builder", "createdAt": "2020-10-28T21:32:22Z", "url": "https://github.com/apache/iceberg/pull/1675", "merged": true, "mergeCommit": {"oid": "4996d5b81cd15a8c85fa56d4ec748cc113e9366b"}, "closed": true, "closedAt": "2020-11-04T21:49:45Z", "author": {"login": "rdblue"}, "timelineItems": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdXEXgFgH2gAyNTExODUwMzMzOjI0YjhjY2ZkMTg2MTQyZmExOTEzZTg0MGVjYzllOWVlYTY0NTRiNGY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdZRjTGgH2gAyNTExODUwMzMzOmNlNDI3YTk5MWQ5ZWY5YTRlYjQ4YjlhNjAzYTFmZDUyY2VkZTZhMmU=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "24b8ccfd186142fa1913e840ecc9e9eea6454b4f", "author": {"user": {"login": "rdblue", "name": "Ryan Blue"}}, "url": "https://github.com/apache/iceberg/commit/24b8ccfd186142fa1913e840ecc9e9eea6454b4f", "committedDate": "2020-10-28T21:22:47Z", "message": "API: Extend partitioning and sort order."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "375e1bc9a4ae4ae810e65ab36af837d66ca0e041", "author": {"user": {"login": "rdblue", "name": "Ryan Blue"}}, "url": "https://github.com/apache/iceberg/commit/375e1bc9a4ae4ae810e65ab36af837d66ca0e041", "committedDate": "2020-10-28T21:41:24Z", "message": "Minor updates."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ac8ed68cf8db134bd20a61bb0e051ff19b23f933", "author": {"user": {"login": "rdblue", "name": "Ryan Blue"}}, "url": "https://github.com/apache/iceberg/commit/ac8ed68cf8db134bd20a61bb0e051ff19b23f933", "committedDate": "2020-10-28T21:45:57Z", "message": "Add CopySortOrderFields."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "441b7d7e7c748cc81a7d9622bae1565b17e5e8b4", "author": {"user": {"login": "rdblue", "name": "Ryan Blue"}}, "url": "https://github.com/apache/iceberg/commit/441b7d7e7c748cc81a7d9622bae1565b17e5e8b4", "committedDate": "2020-10-28T23:09:20Z", "message": "Fix checkstyle."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7b4cab8ee53042ec922f1f16fe2d25c5307f514f", "author": {"user": {"login": "rdblue", "name": "Ryan Blue"}}, "url": "https://github.com/apache/iceberg/commit/7b4cab8ee53042ec922f1f16fe2d25c5307f514f", "committedDate": "2020-10-29T18:47:21Z", "message": "Fix copyright."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "04654991f73ae40dbae82b8f1109fdacbb656e97", "author": {"user": {"login": "rdblue", "name": "Ryan Blue"}}, "url": "https://github.com/apache/iceberg/commit/04654991f73ae40dbae82b8f1109fdacbb656e97", "committedDate": "2020-11-01T19:58:43Z", "message": "Fix TestForwardCompatibility."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cbf104c81a5909fa96f5a9690bd6ccd55e97ca8e", "author": {"user": {"login": "rdblue", "name": "Ryan Blue"}}, "url": "https://github.com/apache/iceberg/commit/cbf104c81a5909fa96f5a9690bd6ccd55e97ca8e", "committedDate": "2020-11-03T00:54:19Z", "message": "Fix checkstyle."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIyOTMyNTAw", "url": "https://github.com/apache/iceberg/pull/1675#pullrequestreview-522932500", "createdAt": "2020-11-03T22:53:01Z", "commit": {"oid": "cbf104c81a5909fa96f5a9690bd6ccd55e97ca8e"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QyMjo1MzowMVrOHtDU0w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QyMjo1NTo0OFrOHtDZlQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzAwMjQ1MQ==", "bodyText": "I'm not familiar with this; I think in SortOrderVisitor L75 both Dates.YEAR and Timestamps.YEAR will end up in here, but Expressions.year will only produce Timestamp transform (from here). Would this cause compatibility issue?", "url": "https://github.com/apache/iceberg/pull/1675#discussion_r517002451", "createdAt": "2020-11-03T22:53:01Z", "author": {"login": "yyanyy"}, "path": "core/src/main/java/org/apache/iceberg/CopySortOrderFields.java", "diffHunk": "@@ -0,0 +1,101 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg;\n+\n+import org.apache.iceberg.expressions.Expressions;\n+import org.apache.iceberg.transforms.SortOrderVisitor;\n+\n+class CopySortOrderFields implements SortOrderVisitor<Void> {\n+  private final SortOrder.Builder builder;\n+\n+  CopySortOrderFields(SortOrder.Builder builder) {\n+    this.builder = builder;\n+  }\n+\n+  @Override\n+  public Void field(String sourceName, int sourceId, SortDirection direction, NullOrder nullOrder) {\n+    if (direction == SortDirection.ASC) {\n+      builder.asc(sourceName, nullOrder);\n+    } else {\n+      builder.desc(sourceName, nullOrder);\n+    }\n+    return null;\n+  }\n+\n+  @Override\n+  public Void bucket(String sourceName, int sourceId, int numBuckets, SortDirection direction, NullOrder nullOrder) {\n+    if (direction == SortDirection.ASC) {\n+      builder.asc(Expressions.bucket(sourceName, numBuckets), nullOrder);\n+    } else {\n+      builder.desc(Expressions.bucket(sourceName, numBuckets), nullOrder);\n+    }\n+    return null;\n+  }\n+\n+  @Override\n+  public Void truncate(String sourceName, int sourceId, int width, SortDirection direction, NullOrder nullOrder) {\n+    if (direction == SortDirection.ASC) {\n+      builder.asc(Expressions.truncate(sourceName, width), nullOrder);\n+    } else {\n+      builder.desc(Expressions.truncate(sourceName, width), nullOrder);\n+    }\n+    return null;\n+  }\n+\n+  @Override\n+  public Void year(String sourceName, int sourceId, SortDirection direction, NullOrder nullOrder) {\n+    if (direction == SortDirection.ASC) {\n+      builder.asc(Expressions.year(sourceName), nullOrder);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cbf104c81a5909fa96f5a9690bd6ccd55e97ca8e"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzAwMjY3MA==", "bodyText": "width -> numBuckets? Same as in SortOrderVisitorL34", "url": "https://github.com/apache/iceberg/pull/1675#discussion_r517002670", "createdAt": "2020-11-03T22:53:29Z", "author": {"login": "yyanyy"}, "path": "api/src/main/java/org/apache/iceberg/transforms/PartitionSpecVisitor.java", "diffHunk": "@@ -26,20 +26,94 @@\n import org.apache.iceberg.relocated.com.google.common.collect.Lists;\n \n public interface PartitionSpecVisitor<T> {\n-  T identity(String sourceName, int sourceId);\n+  default T identity(int fieldId, String sourceName, int sourceId) {\n+    return identity(sourceName, sourceId);\n+  }\n+\n+  default T identity(String sourceName, int sourceId) {\n+    throw new UnsupportedOperationException(\"Identity transform is not supported\");\n+  }\n+\n+  default T bucket(int fieldId, String sourceName, int sourceId, int width) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cbf104c81a5909fa96f5a9690bd6ccd55e97ca8e"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzAwMzY2OQ==", "bodyText": "\"equivalent to\" -> I thought it would be \"satisfies\"?", "url": "https://github.com/apache/iceberg/pull/1675#discussion_r517003669", "createdAt": "2020-11-03T22:55:48Z", "author": {"login": "yyanyy"}, "path": "api/src/main/java/org/apache/iceberg/transforms/Transform.java", "diffHunk": "@@ -58,6 +58,29 @@\n    */\n   Type getResultType(Type sourceType);\n \n+  /**\n+   * Whether the transform preserves the order of values (is monotonic).\n+   * <p>\n+   * A transform preserves order for values when for any given a and b, if a &lt; b then apply(a) &lt;= apply(b).\n+   *\n+   * @return true if the transform preserves the order of values\n+   */\n+  default boolean preservesOrder() {\n+    return false;\n+  }\n+\n+  /**\n+   * Whether ordering by this transform's result satisfies the ordering of another transform's result.\n+   * <p>\n+   * For example, sorting by day(ts) will produce an ordering that is also by month(ts) or year(ts). However, sorting\n+   * by day(ts) will not satisfy the order of hour(ts) or identity(ts).\n+   *\n+   * @return true if ordering by this transform is equivalent to ordering by the other transform", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cbf104c81a5909fa96f5a9690bd6ccd55e97ca8e"}, "originalPosition": 21}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIyOTUxNjU1", "url": "https://github.com/apache/iceberg/pull/1675#pullrequestreview-522951655", "createdAt": "2020-11-03T23:40:13Z", "commit": {"oid": "cbf104c81a5909fa96f5a9690bd6ccd55e97ca8e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QyMzo0MDoxM1rOHtEUUQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QyMzo0MDoxM1rOHtEUUQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzAxODcwNQ==", "bodyText": "Wouldn't it also be the case that a = b; then apply(a) = apply(b)?", "url": "https://github.com/apache/iceberg/pull/1675#discussion_r517018705", "createdAt": "2020-11-03T23:40:13Z", "author": {"login": "danielcweeks"}, "path": "api/src/main/java/org/apache/iceberg/transforms/Transform.java", "diffHunk": "@@ -58,6 +58,29 @@\n    */\n   Type getResultType(Type sourceType);\n \n+  /**\n+   * Whether the transform preserves the order of values (is monotonic).\n+   * <p>\n+   * A transform preserves order for values when for any given a and b, if a &lt; b then apply(a) &lt;= apply(b).", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cbf104c81a5909fa96f5a9690bd6ccd55e97ca8e"}, "originalPosition": 7}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIyOTYyMjMz", "url": "https://github.com/apache/iceberg/pull/1675#pullrequestreview-522962233", "createdAt": "2020-11-04T00:11:13Z", "commit": {"oid": "cbf104c81a5909fa96f5a9690bd6ccd55e97ca8e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQwMDoxMToxM1rOHtE3yQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQwMDoxMToxM1rOHtE3yQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzAyNzc4NQ==", "bodyText": "I feel like should be able to really reduce the amount of boilerplate if/else for asc/desc by exposing sort direction directly from the builder.  Seems like you could just add a Builder::addSort(term, direction, nullOrder) and make this much cleaner.", "url": "https://github.com/apache/iceberg/pull/1675#discussion_r517027785", "createdAt": "2020-11-04T00:11:13Z", "author": {"login": "danielcweeks"}, "path": "core/src/main/java/org/apache/iceberg/CopySortOrderFields.java", "diffHunk": "@@ -0,0 +1,101 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg;\n+\n+import org.apache.iceberg.expressions.Expressions;\n+import org.apache.iceberg.transforms.SortOrderVisitor;\n+\n+class CopySortOrderFields implements SortOrderVisitor<Void> {\n+  private final SortOrder.Builder builder;\n+\n+  CopySortOrderFields(SortOrder.Builder builder) {\n+    this.builder = builder;\n+  }\n+\n+  @Override\n+  public Void field(String sourceName, int sourceId, SortDirection direction, NullOrder nullOrder) {\n+    if (direction == SortDirection.ASC) {\n+      builder.asc(sourceName, nullOrder);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cbf104c81a5909fa96f5a9690bd6ccd55e97ca8e"}, "originalPosition": 35}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIyOTY2NTgx", "url": "https://github.com/apache/iceberg/pull/1675#pullrequestreview-522966581", "createdAt": "2020-11-04T00:25:02Z", "commit": {"oid": "cbf104c81a5909fa96f5a9690bd6ccd55e97ca8e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQwMDoyNTowMlrOHtFGYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQwMDoyNTowMlrOHtFGYw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzAzMTUyMw==", "bodyText": "Are we guaranteed to have only one bucket column?  I actually didn't think of this until now, but Hive allows for bucketing on multiple columns (though those are combined and hashed I believe).  However, I didn't immedaitely see anything that prevents someone from defining multiple bucket columns.", "url": "https://github.com/apache/iceberg/pull/1675#discussion_r517031523", "createdAt": "2020-11-04T00:25:02Z", "author": {"login": "danielcweeks"}, "path": "core/src/main/java/org/apache/iceberg/Partitioning.java", "diffHunk": "@@ -0,0 +1,180 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg;\n+\n+import java.util.List;\n+import org.apache.iceberg.expressions.Expressions;\n+import org.apache.iceberg.transforms.PartitionSpecVisitor;\n+\n+public class Partitioning {\n+  private Partitioning() {\n+  }\n+\n+  /**\n+   * Check whether the spec contains a bucketed partition field.\n+   *\n+   * @param spec a partition spec\n+   * @return true if the spec has field with a bucket transform\n+   */\n+  public static boolean hasBucketField(PartitionSpec spec) {\n+    List<Boolean> bucketList = PartitionSpecVisitor.visit(spec, new PartitionSpecVisitor<Boolean>() {\n+      @Override\n+      public Boolean identity(int fieldId, String sourceName, int sourceId) {\n+        return false;\n+      }\n+\n+      @Override\n+      public Boolean bucket(int fieldId, String sourceName, int sourceId, int width) {\n+        return true;\n+      }\n+\n+      @Override\n+      public Boolean truncate(int fieldId, String sourceName, int sourceId, int width) {\n+        return false;\n+      }\n+\n+      @Override\n+      public Boolean year(int fieldId, String sourceName, int sourceId) {\n+        return false;\n+      }\n+\n+      @Override\n+      public Boolean month(int fieldId, String sourceName, int sourceId) {\n+        return false;\n+      }\n+\n+      @Override\n+      public Boolean day(int fieldId, String sourceName, int sourceId) {\n+        return false;\n+      }\n+\n+      @Override\n+      public Boolean hour(int fieldId, String sourceName, int sourceId) {\n+        return false;\n+      }\n+\n+      @Override\n+      public Boolean alwaysNull(int fieldId, String sourceName, int sourceId) {\n+        return false;\n+      }\n+\n+      @Override\n+      public Boolean unknown(int fieldId, String sourceName, int sourceId, String transform) {\n+        return false;\n+      }\n+    });\n+\n+    return bucketList.stream().anyMatch(Boolean::booleanValue);\n+  }\n+\n+  /**\n+   * Create a sort order that will group data for a partition spec.\n+   * <p>\n+   * If the partition spec contains bucket columns, the sort order will also have a field to sort by a column that is\n+   * bucketed in the spec. The column is selected by the highest number of buckets in the transform.\n+   *\n+   * @param spec a partition spec\n+   * @return a sort order that will cluster data for the spec\n+   */\n+  public static SortOrder sortOrderFor(PartitionSpec spec) {\n+    if (spec.isUnpartitioned()) {\n+      return SortOrder.unsorted();\n+    }\n+\n+    SortOrder.Builder builder = SortOrder.builderFor(spec.schema());\n+    SpecToOrderVisitor converter = new SpecToOrderVisitor(builder);\n+    PartitionSpecVisitor.visit(spec, converter);\n+\n+    // columns used for bucketing are high cardinality; add one to the sort at the end\n+    String bucketColumn = converter.bucketColumn();\n+    if (bucketColumn != null) {\n+      builder.asc(bucketColumn);\n+    }\n+\n+    return builder.build();\n+  }\n+\n+  private static class SpecToOrderVisitor implements PartitionSpecVisitor<Void> {\n+    private final SortOrder.Builder builder;\n+    private String bucketColumn = null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cbf104c81a5909fa96f5a9690bd6ccd55e97ca8e"}, "originalPosition": 116}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIzNTMzMTE2", "url": "https://github.com/apache/iceberg/pull/1675#pullrequestreview-523533116", "createdAt": "2020-11-04T16:32:21Z", "commit": {"oid": "cbf104c81a5909fa96f5a9690bd6ccd55e97ca8e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQxNjozMjoyMlrOHtgHgw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQxNjozMjoyMlrOHtgHgw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzQ3NDE3OQ==", "bodyText": "nit: should we add default T alwaysNull(String sourceName, int sourceId) as well?", "url": "https://github.com/apache/iceberg/pull/1675#discussion_r517474179", "createdAt": "2020-11-04T16:32:22Z", "author": {"login": "jun-he"}, "path": "api/src/main/java/org/apache/iceberg/transforms/PartitionSpecVisitor.java", "diffHunk": "@@ -26,20 +26,94 @@\n import org.apache.iceberg.relocated.com.google.common.collect.Lists;\n \n public interface PartitionSpecVisitor<T> {\n-  T identity(String sourceName, int sourceId);\n+  default T identity(int fieldId, String sourceName, int sourceId) {\n+    return identity(sourceName, sourceId);\n+  }\n+\n+  default T identity(String sourceName, int sourceId) {\n+    throw new UnsupportedOperationException(\"Identity transform is not supported\");\n+  }\n+\n+  default T bucket(int fieldId, String sourceName, int sourceId, int width) {\n+    return bucket(sourceName, sourceId, width);\n+  }\n+\n+  default T bucket(String sourceName, int sourceId, int width) {\n+    throw new UnsupportedOperationException(\"Bucket transform is not supported\");\n+  }\n \n-  T bucket(String sourceName, int sourceId, int width);\n+  default T truncate(int fieldId, String sourceName, int sourceId, int width) {\n+    return truncate(sourceName, sourceId, width);\n+  }\n \n-  T truncate(String sourceName, int sourceId, int width);\n+  default T truncate(String sourceName, int sourceId, int width) {\n+    throw new UnsupportedOperationException(\"Truncate transform is not supported\");\n+  }\n \n-  T year(String sourceName, int sourceId);\n+  default T year(int fieldId, String sourceName, int sourceId) {\n+    return year(sourceName, sourceId);\n+  }\n \n-  T month(String sourceName, int sourceId);\n+  default T year(String sourceName, int sourceId) {\n+    throw new UnsupportedOperationException(\"Year transform is not supported\");\n+  }\n \n-  T day(String sourceName, int sourceId);\n+  default T month(int fieldId, String sourceName, int sourceId) {\n+    return month(sourceName, sourceId);\n+  }\n+\n+  default T month(String sourceName, int sourceId) {\n+    throw new UnsupportedOperationException(\"Month transform is not supported\");\n+  }\n \n-  T hour(String sourceName, int sourceId);\n+  default T day(int fieldId, String sourceName, int sourceId) {\n+    return day(sourceName, sourceId);\n+  }\n+\n+  default T day(String sourceName, int sourceId) {\n+    throw new UnsupportedOperationException(\"Day transform is not supported\");\n+  }\n+\n+  default T hour(int fieldId, String sourceName, int sourceId) {\n+    return hour(sourceName, sourceId);\n+  }\n+\n+  default T hour(String sourceName, int sourceId) {\n+    throw new UnsupportedOperationException(\"Hour transform is not supported\");\n+  }\n+\n+  default T alwaysNull(int fieldId, String sourceName, int sourceId) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cbf104c81a5909fa96f5a9690bd6ccd55e97ca8e"}, "originalPosition": 67}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9b3f6459ac1cf32b8e8562ad68f9883913b2dacb", "author": {"user": {"login": "rdblue", "name": "Ryan Blue"}}, "url": "https://github.com/apache/iceberg/commit/9b3f6459ac1cf32b8e8562ad68f9883913b2dacb", "committedDate": "2020-11-04T17:49:02Z", "message": "Add sortBy to SortOrder.Builder."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ce427a991d9ef9a4eb48b9a603a1fd52cede6a2e", "author": {"user": {"login": "rdblue", "name": "Ryan Blue"}}, "url": "https://github.com/apache/iceberg/commit/ce427a991d9ef9a4eb48b9a603a1fd52cede6a2e", "committedDate": "2020-11-04T17:52:17Z", "message": "Rename bucket width to numBuckets."}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3640, "cost": 1, "resetAt": "2021-10-29T19:57:52Z"}}}