{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk0NDA5Nzcy", "number": 1525, "reviewThreads": {"totalCount": 108, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxNjoxNjozMFrOFDj1gw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxNjo0MTo1NFrOFDku6A==", "hasNextPage": false, "hasPreviousPage": true}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5Mjc3MTg3OnYy", "diffSide": "RIGHT", "path": "spark3/src/main/java/org/apache/iceberg/actions/Spark3CreateAction.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxNjoxNjozMFrOIDRUBQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxNjo0MzowNlrOIDSzTA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDMwMDI5Mw==", "bodyText": "Do we also exclude Iceberg related props? WRITE_NEW_DATA_LOCATION and WRITE_METADATA_LOCATION?", "url": "https://github.com/apache/iceberg/pull/1525#discussion_r540300293", "createdAt": "2020-12-10T16:16:30Z", "author": {"login": "aokolnychyi"}, "path": "spark3/src/main/java/org/apache/iceberg/actions/Spark3CreateAction.java", "diffHunk": "@@ -0,0 +1,187 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.actions;\n+\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Set;\n+import org.apache.iceberg.Table;\n+import org.apache.iceberg.TableProperties;\n+import org.apache.iceberg.exceptions.AlreadyExistsException;\n+import org.apache.iceberg.exceptions.NoSuchNamespaceException;\n+import org.apache.iceberg.exceptions.NoSuchTableException;\n+import org.apache.iceberg.mapping.MappingUtil;\n+import org.apache.iceberg.mapping.NameMapping;\n+import org.apache.iceberg.mapping.NameMappingParser;\n+import org.apache.iceberg.relocated.com.google.common.base.Preconditions;\n+import org.apache.iceberg.relocated.com.google.common.collect.ImmutableList;\n+import org.apache.iceberg.relocated.com.google.common.collect.ImmutableSet;\n+import org.apache.iceberg.relocated.com.google.common.collect.Maps;\n+import org.apache.iceberg.spark.SparkCatalog;\n+import org.apache.iceberg.spark.SparkSessionCatalog;\n+import org.apache.spark.sql.SparkSession;\n+import org.apache.spark.sql.catalyst.catalog.CatalogTable;\n+import org.apache.spark.sql.catalyst.catalog.CatalogUtils;\n+import org.apache.spark.sql.connector.catalog.CatalogPlugin;\n+import org.apache.spark.sql.connector.catalog.Identifier;\n+import org.apache.spark.sql.connector.catalog.StagedTable;\n+import org.apache.spark.sql.connector.catalog.StagingTableCatalog;\n+import org.apache.spark.sql.connector.catalog.TableCatalog;\n+import org.apache.spark.sql.connector.catalog.V1Table;\n+import org.apache.spark.sql.connector.expressions.Transform;\n+import org.apache.spark.sql.types.StructType;\n+\n+abstract class Spark3CreateAction implements CreateAction {\n+  private static final Set<String> ALLOWED_SOURCES = ImmutableSet.of(\"parquet\", \"avro\", \"orc\", \"hive\");\n+  protected static final String LOCATION = \"location\";\n+  protected static final String ICEBERG_METADATA_FOLDER = \"metadata\";\n+  protected static final List<String> EXCLUDED_PROPERTIES =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a99c8216da0f2adc74bc8b2498599fd4228bee63"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDMwMTQ0OQ==", "bodyText": "Only for Snapshot, these are specifically the excluded properties from the original table metadata", "url": "https://github.com/apache/iceberg/pull/1525#discussion_r540301449", "createdAt": "2020-12-10T16:17:42Z", "author": {"login": "RussellSpitzer"}, "path": "spark3/src/main/java/org/apache/iceberg/actions/Spark3CreateAction.java", "diffHunk": "@@ -0,0 +1,187 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.actions;\n+\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Set;\n+import org.apache.iceberg.Table;\n+import org.apache.iceberg.TableProperties;\n+import org.apache.iceberg.exceptions.AlreadyExistsException;\n+import org.apache.iceberg.exceptions.NoSuchNamespaceException;\n+import org.apache.iceberg.exceptions.NoSuchTableException;\n+import org.apache.iceberg.mapping.MappingUtil;\n+import org.apache.iceberg.mapping.NameMapping;\n+import org.apache.iceberg.mapping.NameMappingParser;\n+import org.apache.iceberg.relocated.com.google.common.base.Preconditions;\n+import org.apache.iceberg.relocated.com.google.common.collect.ImmutableList;\n+import org.apache.iceberg.relocated.com.google.common.collect.ImmutableSet;\n+import org.apache.iceberg.relocated.com.google.common.collect.Maps;\n+import org.apache.iceberg.spark.SparkCatalog;\n+import org.apache.iceberg.spark.SparkSessionCatalog;\n+import org.apache.spark.sql.SparkSession;\n+import org.apache.spark.sql.catalyst.catalog.CatalogTable;\n+import org.apache.spark.sql.catalyst.catalog.CatalogUtils;\n+import org.apache.spark.sql.connector.catalog.CatalogPlugin;\n+import org.apache.spark.sql.connector.catalog.Identifier;\n+import org.apache.spark.sql.connector.catalog.StagedTable;\n+import org.apache.spark.sql.connector.catalog.StagingTableCatalog;\n+import org.apache.spark.sql.connector.catalog.TableCatalog;\n+import org.apache.spark.sql.connector.catalog.V1Table;\n+import org.apache.spark.sql.connector.expressions.Transform;\n+import org.apache.spark.sql.types.StructType;\n+\n+abstract class Spark3CreateAction implements CreateAction {\n+  private static final Set<String> ALLOWED_SOURCES = ImmutableSet.of(\"parquet\", \"avro\", \"orc\", \"hive\");\n+  protected static final String LOCATION = \"location\";\n+  protected static final String ICEBERG_METADATA_FOLDER = \"metadata\";\n+  protected static final List<String> EXCLUDED_PROPERTIES =", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDMwMDI5Mw=="}, "originalCommit": {"oid": "a99c8216da0f2adc74bc8b2498599fd4228bee63"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDMyNDY4NA==", "bodyText": "+1", "url": "https://github.com/apache/iceberg/pull/1525#discussion_r540324684", "createdAt": "2020-12-10T16:43:06Z", "author": {"login": "aokolnychyi"}, "path": "spark3/src/main/java/org/apache/iceberg/actions/Spark3CreateAction.java", "diffHunk": "@@ -0,0 +1,187 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.actions;\n+\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Set;\n+import org.apache.iceberg.Table;\n+import org.apache.iceberg.TableProperties;\n+import org.apache.iceberg.exceptions.AlreadyExistsException;\n+import org.apache.iceberg.exceptions.NoSuchNamespaceException;\n+import org.apache.iceberg.exceptions.NoSuchTableException;\n+import org.apache.iceberg.mapping.MappingUtil;\n+import org.apache.iceberg.mapping.NameMapping;\n+import org.apache.iceberg.mapping.NameMappingParser;\n+import org.apache.iceberg.relocated.com.google.common.base.Preconditions;\n+import org.apache.iceberg.relocated.com.google.common.collect.ImmutableList;\n+import org.apache.iceberg.relocated.com.google.common.collect.ImmutableSet;\n+import org.apache.iceberg.relocated.com.google.common.collect.Maps;\n+import org.apache.iceberg.spark.SparkCatalog;\n+import org.apache.iceberg.spark.SparkSessionCatalog;\n+import org.apache.spark.sql.SparkSession;\n+import org.apache.spark.sql.catalyst.catalog.CatalogTable;\n+import org.apache.spark.sql.catalyst.catalog.CatalogUtils;\n+import org.apache.spark.sql.connector.catalog.CatalogPlugin;\n+import org.apache.spark.sql.connector.catalog.Identifier;\n+import org.apache.spark.sql.connector.catalog.StagedTable;\n+import org.apache.spark.sql.connector.catalog.StagingTableCatalog;\n+import org.apache.spark.sql.connector.catalog.TableCatalog;\n+import org.apache.spark.sql.connector.catalog.V1Table;\n+import org.apache.spark.sql.connector.expressions.Transform;\n+import org.apache.spark.sql.types.StructType;\n+\n+abstract class Spark3CreateAction implements CreateAction {\n+  private static final Set<String> ALLOWED_SOURCES = ImmutableSet.of(\"parquet\", \"avro\", \"orc\", \"hive\");\n+  protected static final String LOCATION = \"location\";\n+  protected static final String ICEBERG_METADATA_FOLDER = \"metadata\";\n+  protected static final List<String> EXCLUDED_PROPERTIES =", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDMwMDI5Mw=="}, "originalCommit": {"oid": "a99c8216da0f2adc74bc8b2498599fd4228bee63"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5MjgwNzI5OnYy", "diffSide": "RIGHT", "path": "spark3/src/main/java/org/apache/iceberg/actions/Spark3CreateAction.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxNjoyMjo0MFrOIDRpXA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxNzozMzozOVrOIDVFyg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDMwNTc1Ng==", "bodyText": "nit: Do we add quotes around names or no? I am fine either way but having it consistent is good.", "url": "https://github.com/apache/iceberg/pull/1525#discussion_r540305756", "createdAt": "2020-12-10T16:22:40Z", "author": {"login": "aokolnychyi"}, "path": "spark3/src/main/java/org/apache/iceberg/actions/Spark3CreateAction.java", "diffHunk": "@@ -0,0 +1,187 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.actions;\n+\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Set;\n+import org.apache.iceberg.Table;\n+import org.apache.iceberg.TableProperties;\n+import org.apache.iceberg.exceptions.AlreadyExistsException;\n+import org.apache.iceberg.exceptions.NoSuchNamespaceException;\n+import org.apache.iceberg.exceptions.NoSuchTableException;\n+import org.apache.iceberg.mapping.MappingUtil;\n+import org.apache.iceberg.mapping.NameMapping;\n+import org.apache.iceberg.mapping.NameMappingParser;\n+import org.apache.iceberg.relocated.com.google.common.base.Preconditions;\n+import org.apache.iceberg.relocated.com.google.common.collect.ImmutableList;\n+import org.apache.iceberg.relocated.com.google.common.collect.ImmutableSet;\n+import org.apache.iceberg.relocated.com.google.common.collect.Maps;\n+import org.apache.iceberg.spark.SparkCatalog;\n+import org.apache.iceberg.spark.SparkSessionCatalog;\n+import org.apache.iceberg.spark.source.StagedSparkTable;\n+import org.apache.spark.sql.SparkSession;\n+import org.apache.spark.sql.catalyst.catalog.CatalogTable;\n+import org.apache.spark.sql.catalyst.catalog.CatalogUtils;\n+import org.apache.spark.sql.connector.catalog.CatalogPlugin;\n+import org.apache.spark.sql.connector.catalog.Identifier;\n+import org.apache.spark.sql.connector.catalog.StagingTableCatalog;\n+import org.apache.spark.sql.connector.catalog.TableCatalog;\n+import org.apache.spark.sql.connector.catalog.V1Table;\n+import org.apache.spark.sql.connector.expressions.Transform;\n+import org.apache.spark.sql.types.StructType;\n+\n+abstract class Spark3CreateAction implements CreateAction {\n+  private static final Set<String> ALLOWED_SOURCES = ImmutableSet.of(\"parquet\", \"avro\", \"orc\", \"hive\");\n+  protected static final String LOCATION = \"location\";\n+  protected static final String ICEBERG_METADATA_FOLDER = \"metadata\";\n+  protected static final List<String> EXCLUDED_PROPERTIES =\n+      ImmutableList.of(\"path\", \"transient_lastDdlTime\", \"serialization.format\");\n+\n+  private final SparkSession spark;\n+\n+  // Source Fields\n+  private final V1Table sourceTable;\n+  private final CatalogTable sourceCatalogTable;\n+  private final String sourceTableLocation;\n+  private final TableCatalog sourceCatalog;\n+  private final Identifier sourceTableIdent;\n+\n+  // Destination Fields\n+  private final StagingTableCatalog destCatalog;\n+  private final Identifier destTableIdent;\n+\n+  // Optional Parameters for destination\n+  private final Map<String, String> additionalProperties = Maps.newHashMap();\n+\n+  Spark3CreateAction(SparkSession spark, CatalogPlugin sourceCatalog, Identifier sourceTableIdent,\n+                     CatalogPlugin destCatalog, Identifier destTableIdent) {\n+\n+    this.spark = spark;\n+    this.sourceCatalog = checkSourceCatalog(sourceCatalog);\n+    this.sourceTableIdent = sourceTableIdent;\n+    this.destCatalog = checkDestinationCatalog(destCatalog);\n+    this.destTableIdent = destTableIdent;\n+\n+    try {\n+      this.sourceTable = (V1Table) this.sourceCatalog.loadTable(sourceTableIdent);\n+      this.sourceCatalogTable = sourceTable.v1Table();\n+    } catch (org.apache.spark.sql.catalyst.analysis.NoSuchTableException e) {\n+      throw new NoSuchTableException(\"Cannot not find source table %s\", sourceTableIdent);\n+    } catch (ClassCastException e) {\n+      throw new IllegalArgumentException(String.format(\"Cannot use non-v1 table %s as a source\", sourceTableIdent), e);\n+    }\n+    validateSourceTable();\n+\n+    this.sourceTableLocation = CatalogUtils.URIToString(sourceCatalogTable.storage().locationUri().get());\n+  }\n+\n+  @Override\n+  public CreateAction withProperties(Map<String, String> properties) {\n+    this.additionalProperties.putAll(properties);\n+    return this;\n+  }\n+\n+  @Override\n+  public CreateAction withProperty(String key, String value) {\n+    this.additionalProperties.put(key, value);\n+    return this;\n+  }\n+\n+  protected SparkSession spark() {\n+    return spark;\n+  }\n+\n+  protected String sourceTableLocation() {\n+    return sourceTableLocation;\n+  }\n+\n+  protected CatalogTable v1SourceTable() {\n+    return sourceCatalogTable;\n+  }\n+\n+  protected TableCatalog sourceCatalog() {\n+    return sourceCatalog;\n+  }\n+\n+  protected Identifier sourceTableIdent() {\n+    return sourceTableIdent;\n+  }\n+\n+  protected StagingTableCatalog destCatalog() {\n+    return destCatalog;\n+  }\n+\n+  protected Identifier destTableIdent() {\n+    return destTableIdent;\n+  }\n+\n+  protected Map<String, String> additionalProperties() {\n+    return additionalProperties;\n+  }\n+\n+  private void validateSourceTable() {\n+    String sourceTableProvider = sourceCatalogTable.provider().get().toLowerCase(Locale.ROOT);\n+    Preconditions.checkArgument(ALLOWED_SOURCES.contains(sourceTableProvider),\n+        \"Cannot create an Iceberg table from source provider: %s\", sourceTableProvider);\n+    Preconditions.checkArgument(!sourceCatalogTable.storage().locationUri().isEmpty(),\n+        \"Cannot create an Iceberg table from a source without an explicit location\");\n+  }\n+\n+  private StagingTableCatalog checkDestinationCatalog(CatalogPlugin catalog) {\n+    Preconditions.checkArgument(catalog instanceof SparkSessionCatalog || catalog instanceof SparkCatalog,\n+        \"Cannot create Iceberg table in non Iceberg Catalog. Catalog %s was of class %s but %s or %s are required\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c746b86385bae9f8ecfb847bf87612e377672978"}, "originalPosition": 151}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDMxNzExMw==", "bodyText": "we definitely add them in other places, I wasn't consistent in my reapplication though (I also think we aren't doing it consistently throughout the codebase but that's another story)", "url": "https://github.com/apache/iceberg/pull/1525#discussion_r540317113", "createdAt": "2020-12-10T16:35:20Z", "author": {"login": "RussellSpitzer"}, "path": "spark3/src/main/java/org/apache/iceberg/actions/Spark3CreateAction.java", "diffHunk": "@@ -0,0 +1,187 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.actions;\n+\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Set;\n+import org.apache.iceberg.Table;\n+import org.apache.iceberg.TableProperties;\n+import org.apache.iceberg.exceptions.AlreadyExistsException;\n+import org.apache.iceberg.exceptions.NoSuchNamespaceException;\n+import org.apache.iceberg.exceptions.NoSuchTableException;\n+import org.apache.iceberg.mapping.MappingUtil;\n+import org.apache.iceberg.mapping.NameMapping;\n+import org.apache.iceberg.mapping.NameMappingParser;\n+import org.apache.iceberg.relocated.com.google.common.base.Preconditions;\n+import org.apache.iceberg.relocated.com.google.common.collect.ImmutableList;\n+import org.apache.iceberg.relocated.com.google.common.collect.ImmutableSet;\n+import org.apache.iceberg.relocated.com.google.common.collect.Maps;\n+import org.apache.iceberg.spark.SparkCatalog;\n+import org.apache.iceberg.spark.SparkSessionCatalog;\n+import org.apache.iceberg.spark.source.StagedSparkTable;\n+import org.apache.spark.sql.SparkSession;\n+import org.apache.spark.sql.catalyst.catalog.CatalogTable;\n+import org.apache.spark.sql.catalyst.catalog.CatalogUtils;\n+import org.apache.spark.sql.connector.catalog.CatalogPlugin;\n+import org.apache.spark.sql.connector.catalog.Identifier;\n+import org.apache.spark.sql.connector.catalog.StagingTableCatalog;\n+import org.apache.spark.sql.connector.catalog.TableCatalog;\n+import org.apache.spark.sql.connector.catalog.V1Table;\n+import org.apache.spark.sql.connector.expressions.Transform;\n+import org.apache.spark.sql.types.StructType;\n+\n+abstract class Spark3CreateAction implements CreateAction {\n+  private static final Set<String> ALLOWED_SOURCES = ImmutableSet.of(\"parquet\", \"avro\", \"orc\", \"hive\");\n+  protected static final String LOCATION = \"location\";\n+  protected static final String ICEBERG_METADATA_FOLDER = \"metadata\";\n+  protected static final List<String> EXCLUDED_PROPERTIES =\n+      ImmutableList.of(\"path\", \"transient_lastDdlTime\", \"serialization.format\");\n+\n+  private final SparkSession spark;\n+\n+  // Source Fields\n+  private final V1Table sourceTable;\n+  private final CatalogTable sourceCatalogTable;\n+  private final String sourceTableLocation;\n+  private final TableCatalog sourceCatalog;\n+  private final Identifier sourceTableIdent;\n+\n+  // Destination Fields\n+  private final StagingTableCatalog destCatalog;\n+  private final Identifier destTableIdent;\n+\n+  // Optional Parameters for destination\n+  private final Map<String, String> additionalProperties = Maps.newHashMap();\n+\n+  Spark3CreateAction(SparkSession spark, CatalogPlugin sourceCatalog, Identifier sourceTableIdent,\n+                     CatalogPlugin destCatalog, Identifier destTableIdent) {\n+\n+    this.spark = spark;\n+    this.sourceCatalog = checkSourceCatalog(sourceCatalog);\n+    this.sourceTableIdent = sourceTableIdent;\n+    this.destCatalog = checkDestinationCatalog(destCatalog);\n+    this.destTableIdent = destTableIdent;\n+\n+    try {\n+      this.sourceTable = (V1Table) this.sourceCatalog.loadTable(sourceTableIdent);\n+      this.sourceCatalogTable = sourceTable.v1Table();\n+    } catch (org.apache.spark.sql.catalyst.analysis.NoSuchTableException e) {\n+      throw new NoSuchTableException(\"Cannot not find source table %s\", sourceTableIdent);\n+    } catch (ClassCastException e) {\n+      throw new IllegalArgumentException(String.format(\"Cannot use non-v1 table %s as a source\", sourceTableIdent), e);\n+    }\n+    validateSourceTable();\n+\n+    this.sourceTableLocation = CatalogUtils.URIToString(sourceCatalogTable.storage().locationUri().get());\n+  }\n+\n+  @Override\n+  public CreateAction withProperties(Map<String, String> properties) {\n+    this.additionalProperties.putAll(properties);\n+    return this;\n+  }\n+\n+  @Override\n+  public CreateAction withProperty(String key, String value) {\n+    this.additionalProperties.put(key, value);\n+    return this;\n+  }\n+\n+  protected SparkSession spark() {\n+    return spark;\n+  }\n+\n+  protected String sourceTableLocation() {\n+    return sourceTableLocation;\n+  }\n+\n+  protected CatalogTable v1SourceTable() {\n+    return sourceCatalogTable;\n+  }\n+\n+  protected TableCatalog sourceCatalog() {\n+    return sourceCatalog;\n+  }\n+\n+  protected Identifier sourceTableIdent() {\n+    return sourceTableIdent;\n+  }\n+\n+  protected StagingTableCatalog destCatalog() {\n+    return destCatalog;\n+  }\n+\n+  protected Identifier destTableIdent() {\n+    return destTableIdent;\n+  }\n+\n+  protected Map<String, String> additionalProperties() {\n+    return additionalProperties;\n+  }\n+\n+  private void validateSourceTable() {\n+    String sourceTableProvider = sourceCatalogTable.provider().get().toLowerCase(Locale.ROOT);\n+    Preconditions.checkArgument(ALLOWED_SOURCES.contains(sourceTableProvider),\n+        \"Cannot create an Iceberg table from source provider: %s\", sourceTableProvider);\n+    Preconditions.checkArgument(!sourceCatalogTable.storage().locationUri().isEmpty(),\n+        \"Cannot create an Iceberg table from a source without an explicit location\");\n+  }\n+\n+  private StagingTableCatalog checkDestinationCatalog(CatalogPlugin catalog) {\n+    Preconditions.checkArgument(catalog instanceof SparkSessionCatalog || catalog instanceof SparkCatalog,\n+        \"Cannot create Iceberg table in non Iceberg Catalog. Catalog %s was of class %s but %s or %s are required\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDMwNTc1Ng=="}, "originalCommit": {"oid": "c746b86385bae9f8ecfb847bf87612e377672978"}, "originalPosition": 151}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDM2MjE4Ng==", "bodyText": "I think that names should be internally quoted, not externally. So [\"a\", \" \", \"b\"] should be a.` `.b.", "url": "https://github.com/apache/iceberg/pull/1525#discussion_r540362186", "createdAt": "2020-12-10T17:33:39Z", "author": {"login": "rdblue"}, "path": "spark3/src/main/java/org/apache/iceberg/actions/Spark3CreateAction.java", "diffHunk": "@@ -0,0 +1,187 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.actions;\n+\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Set;\n+import org.apache.iceberg.Table;\n+import org.apache.iceberg.TableProperties;\n+import org.apache.iceberg.exceptions.AlreadyExistsException;\n+import org.apache.iceberg.exceptions.NoSuchNamespaceException;\n+import org.apache.iceberg.exceptions.NoSuchTableException;\n+import org.apache.iceberg.mapping.MappingUtil;\n+import org.apache.iceberg.mapping.NameMapping;\n+import org.apache.iceberg.mapping.NameMappingParser;\n+import org.apache.iceberg.relocated.com.google.common.base.Preconditions;\n+import org.apache.iceberg.relocated.com.google.common.collect.ImmutableList;\n+import org.apache.iceberg.relocated.com.google.common.collect.ImmutableSet;\n+import org.apache.iceberg.relocated.com.google.common.collect.Maps;\n+import org.apache.iceberg.spark.SparkCatalog;\n+import org.apache.iceberg.spark.SparkSessionCatalog;\n+import org.apache.iceberg.spark.source.StagedSparkTable;\n+import org.apache.spark.sql.SparkSession;\n+import org.apache.spark.sql.catalyst.catalog.CatalogTable;\n+import org.apache.spark.sql.catalyst.catalog.CatalogUtils;\n+import org.apache.spark.sql.connector.catalog.CatalogPlugin;\n+import org.apache.spark.sql.connector.catalog.Identifier;\n+import org.apache.spark.sql.connector.catalog.StagingTableCatalog;\n+import org.apache.spark.sql.connector.catalog.TableCatalog;\n+import org.apache.spark.sql.connector.catalog.V1Table;\n+import org.apache.spark.sql.connector.expressions.Transform;\n+import org.apache.spark.sql.types.StructType;\n+\n+abstract class Spark3CreateAction implements CreateAction {\n+  private static final Set<String> ALLOWED_SOURCES = ImmutableSet.of(\"parquet\", \"avro\", \"orc\", \"hive\");\n+  protected static final String LOCATION = \"location\";\n+  protected static final String ICEBERG_METADATA_FOLDER = \"metadata\";\n+  protected static final List<String> EXCLUDED_PROPERTIES =\n+      ImmutableList.of(\"path\", \"transient_lastDdlTime\", \"serialization.format\");\n+\n+  private final SparkSession spark;\n+\n+  // Source Fields\n+  private final V1Table sourceTable;\n+  private final CatalogTable sourceCatalogTable;\n+  private final String sourceTableLocation;\n+  private final TableCatalog sourceCatalog;\n+  private final Identifier sourceTableIdent;\n+\n+  // Destination Fields\n+  private final StagingTableCatalog destCatalog;\n+  private final Identifier destTableIdent;\n+\n+  // Optional Parameters for destination\n+  private final Map<String, String> additionalProperties = Maps.newHashMap();\n+\n+  Spark3CreateAction(SparkSession spark, CatalogPlugin sourceCatalog, Identifier sourceTableIdent,\n+                     CatalogPlugin destCatalog, Identifier destTableIdent) {\n+\n+    this.spark = spark;\n+    this.sourceCatalog = checkSourceCatalog(sourceCatalog);\n+    this.sourceTableIdent = sourceTableIdent;\n+    this.destCatalog = checkDestinationCatalog(destCatalog);\n+    this.destTableIdent = destTableIdent;\n+\n+    try {\n+      this.sourceTable = (V1Table) this.sourceCatalog.loadTable(sourceTableIdent);\n+      this.sourceCatalogTable = sourceTable.v1Table();\n+    } catch (org.apache.spark.sql.catalyst.analysis.NoSuchTableException e) {\n+      throw new NoSuchTableException(\"Cannot not find source table %s\", sourceTableIdent);\n+    } catch (ClassCastException e) {\n+      throw new IllegalArgumentException(String.format(\"Cannot use non-v1 table %s as a source\", sourceTableIdent), e);\n+    }\n+    validateSourceTable();\n+\n+    this.sourceTableLocation = CatalogUtils.URIToString(sourceCatalogTable.storage().locationUri().get());\n+  }\n+\n+  @Override\n+  public CreateAction withProperties(Map<String, String> properties) {\n+    this.additionalProperties.putAll(properties);\n+    return this;\n+  }\n+\n+  @Override\n+  public CreateAction withProperty(String key, String value) {\n+    this.additionalProperties.put(key, value);\n+    return this;\n+  }\n+\n+  protected SparkSession spark() {\n+    return spark;\n+  }\n+\n+  protected String sourceTableLocation() {\n+    return sourceTableLocation;\n+  }\n+\n+  protected CatalogTable v1SourceTable() {\n+    return sourceCatalogTable;\n+  }\n+\n+  protected TableCatalog sourceCatalog() {\n+    return sourceCatalog;\n+  }\n+\n+  protected Identifier sourceTableIdent() {\n+    return sourceTableIdent;\n+  }\n+\n+  protected StagingTableCatalog destCatalog() {\n+    return destCatalog;\n+  }\n+\n+  protected Identifier destTableIdent() {\n+    return destTableIdent;\n+  }\n+\n+  protected Map<String, String> additionalProperties() {\n+    return additionalProperties;\n+  }\n+\n+  private void validateSourceTable() {\n+    String sourceTableProvider = sourceCatalogTable.provider().get().toLowerCase(Locale.ROOT);\n+    Preconditions.checkArgument(ALLOWED_SOURCES.contains(sourceTableProvider),\n+        \"Cannot create an Iceberg table from source provider: %s\", sourceTableProvider);\n+    Preconditions.checkArgument(!sourceCatalogTable.storage().locationUri().isEmpty(),\n+        \"Cannot create an Iceberg table from a source without an explicit location\");\n+  }\n+\n+  private StagingTableCatalog checkDestinationCatalog(CatalogPlugin catalog) {\n+    Preconditions.checkArgument(catalog instanceof SparkSessionCatalog || catalog instanceof SparkCatalog,\n+        \"Cannot create Iceberg table in non Iceberg Catalog. Catalog %s was of class %s but %s or %s are required\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDMwNTc1Ng=="}, "originalCommit": {"oid": "c746b86385bae9f8ecfb847bf87612e377672978"}, "originalPosition": 151}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5MjgzMTQ2OnYy", "diffSide": "RIGHT", "path": "spark3/src/main/java/org/apache/iceberg/actions/Spark3CreateAction.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxNjoyNjo0M1rOIDR4rQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxNjoyNjo0M1rOIDR4rQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDMwOTY3Nw==", "bodyText": "nit: catalog.getClass() seems to be missing getName", "url": "https://github.com/apache/iceberg/pull/1525#discussion_r540309677", "createdAt": "2020-12-10T16:26:43Z", "author": {"login": "aokolnychyi"}, "path": "spark3/src/main/java/org/apache/iceberg/actions/Spark3CreateAction.java", "diffHunk": "@@ -0,0 +1,187 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.actions;\n+\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Set;\n+import org.apache.iceberg.Table;\n+import org.apache.iceberg.TableProperties;\n+import org.apache.iceberg.exceptions.AlreadyExistsException;\n+import org.apache.iceberg.exceptions.NoSuchNamespaceException;\n+import org.apache.iceberg.exceptions.NoSuchTableException;\n+import org.apache.iceberg.mapping.MappingUtil;\n+import org.apache.iceberg.mapping.NameMapping;\n+import org.apache.iceberg.mapping.NameMappingParser;\n+import org.apache.iceberg.relocated.com.google.common.base.Preconditions;\n+import org.apache.iceberg.relocated.com.google.common.collect.ImmutableList;\n+import org.apache.iceberg.relocated.com.google.common.collect.ImmutableSet;\n+import org.apache.iceberg.relocated.com.google.common.collect.Maps;\n+import org.apache.iceberg.spark.SparkCatalog;\n+import org.apache.iceberg.spark.SparkSessionCatalog;\n+import org.apache.iceberg.spark.source.StagedSparkTable;\n+import org.apache.spark.sql.SparkSession;\n+import org.apache.spark.sql.catalyst.catalog.CatalogTable;\n+import org.apache.spark.sql.catalyst.catalog.CatalogUtils;\n+import org.apache.spark.sql.connector.catalog.CatalogPlugin;\n+import org.apache.spark.sql.connector.catalog.Identifier;\n+import org.apache.spark.sql.connector.catalog.StagingTableCatalog;\n+import org.apache.spark.sql.connector.catalog.TableCatalog;\n+import org.apache.spark.sql.connector.catalog.V1Table;\n+import org.apache.spark.sql.connector.expressions.Transform;\n+import org.apache.spark.sql.types.StructType;\n+\n+abstract class Spark3CreateAction implements CreateAction {\n+  private static final Set<String> ALLOWED_SOURCES = ImmutableSet.of(\"parquet\", \"avro\", \"orc\", \"hive\");\n+  protected static final String LOCATION = \"location\";\n+  protected static final String ICEBERG_METADATA_FOLDER = \"metadata\";\n+  protected static final List<String> EXCLUDED_PROPERTIES =\n+      ImmutableList.of(\"path\", \"transient_lastDdlTime\", \"serialization.format\");\n+\n+  private final SparkSession spark;\n+\n+  // Source Fields\n+  private final V1Table sourceTable;\n+  private final CatalogTable sourceCatalogTable;\n+  private final String sourceTableLocation;\n+  private final TableCatalog sourceCatalog;\n+  private final Identifier sourceTableIdent;\n+\n+  // Destination Fields\n+  private final StagingTableCatalog destCatalog;\n+  private final Identifier destTableIdent;\n+\n+  // Optional Parameters for destination\n+  private final Map<String, String> additionalProperties = Maps.newHashMap();\n+\n+  Spark3CreateAction(SparkSession spark, CatalogPlugin sourceCatalog, Identifier sourceTableIdent,\n+                     CatalogPlugin destCatalog, Identifier destTableIdent) {\n+\n+    this.spark = spark;\n+    this.sourceCatalog = checkSourceCatalog(sourceCatalog);\n+    this.sourceTableIdent = sourceTableIdent;\n+    this.destCatalog = checkDestinationCatalog(destCatalog);\n+    this.destTableIdent = destTableIdent;\n+\n+    try {\n+      this.sourceTable = (V1Table) this.sourceCatalog.loadTable(sourceTableIdent);\n+      this.sourceCatalogTable = sourceTable.v1Table();\n+    } catch (org.apache.spark.sql.catalyst.analysis.NoSuchTableException e) {\n+      throw new NoSuchTableException(\"Cannot not find source table %s\", sourceTableIdent);\n+    } catch (ClassCastException e) {\n+      throw new IllegalArgumentException(String.format(\"Cannot use non-v1 table %s as a source\", sourceTableIdent), e);\n+    }\n+    validateSourceTable();\n+\n+    this.sourceTableLocation = CatalogUtils.URIToString(sourceCatalogTable.storage().locationUri().get());\n+  }\n+\n+  @Override\n+  public CreateAction withProperties(Map<String, String> properties) {\n+    this.additionalProperties.putAll(properties);\n+    return this;\n+  }\n+\n+  @Override\n+  public CreateAction withProperty(String key, String value) {\n+    this.additionalProperties.put(key, value);\n+    return this;\n+  }\n+\n+  protected SparkSession spark() {\n+    return spark;\n+  }\n+\n+  protected String sourceTableLocation() {\n+    return sourceTableLocation;\n+  }\n+\n+  protected CatalogTable v1SourceTable() {\n+    return sourceCatalogTable;\n+  }\n+\n+  protected TableCatalog sourceCatalog() {\n+    return sourceCatalog;\n+  }\n+\n+  protected Identifier sourceTableIdent() {\n+    return sourceTableIdent;\n+  }\n+\n+  protected StagingTableCatalog destCatalog() {\n+    return destCatalog;\n+  }\n+\n+  protected Identifier destTableIdent() {\n+    return destTableIdent;\n+  }\n+\n+  protected Map<String, String> additionalProperties() {\n+    return additionalProperties;\n+  }\n+\n+  private void validateSourceTable() {\n+    String sourceTableProvider = sourceCatalogTable.provider().get().toLowerCase(Locale.ROOT);\n+    Preconditions.checkArgument(ALLOWED_SOURCES.contains(sourceTableProvider),\n+        \"Cannot create an Iceberg table from source provider: %s\", sourceTableProvider);\n+    Preconditions.checkArgument(!sourceCatalogTable.storage().locationUri().isEmpty(),\n+        \"Cannot create an Iceberg table from a source without an explicit location\");\n+  }\n+\n+  private StagingTableCatalog checkDestinationCatalog(CatalogPlugin catalog) {\n+    Preconditions.checkArgument(catalog instanceof SparkSessionCatalog || catalog instanceof SparkCatalog,\n+        \"Cannot create Iceberg table in non Iceberg Catalog. Catalog %s was of class %s but %s or %s are required\",\n+        catalog.name(), catalog.getClass(), SparkSessionCatalog.class.getName(), SparkCatalog.class.getName());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c746b86385bae9f8ecfb847bf87612e377672978"}, "originalPosition": 152}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5Mjg1NDYyOnYy", "diffSide": "RIGHT", "path": "spark3/src/main/java/org/apache/iceberg/actions/Spark3MigrateAction.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxNjozMDo1M1rOIDSHRg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxNjozMDo1M1rOIDSHRg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDMxMzQxNA==", "bodyText": "nit: should we define this one closer to the block where it is used? Like next to stagedTable?", "url": "https://github.com/apache/iceberg/pull/1525#discussion_r540313414", "createdAt": "2020-12-10T16:30:53Z", "author": {"login": "aokolnychyi"}, "path": "spark3/src/main/java/org/apache/iceberg/actions/Spark3MigrateAction.java", "diffHunk": "@@ -0,0 +1,138 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.actions;\n+\n+import java.util.Map;\n+import org.apache.iceberg.Snapshot;\n+import org.apache.iceberg.SnapshotSummary;\n+import org.apache.iceberg.Table;\n+import org.apache.iceberg.exceptions.AlreadyExistsException;\n+import org.apache.iceberg.exceptions.NoSuchTableException;\n+import org.apache.iceberg.relocated.com.google.common.base.Preconditions;\n+import org.apache.iceberg.relocated.com.google.common.collect.Maps;\n+import org.apache.iceberg.spark.SparkSessionCatalog;\n+import org.apache.iceberg.spark.SparkTableUtil;\n+import org.apache.iceberg.spark.source.StagedSparkTable;\n+import org.apache.spark.sql.SparkSession;\n+import org.apache.spark.sql.catalyst.TableIdentifier;\n+import org.apache.spark.sql.connector.catalog.CatalogPlugin;\n+import org.apache.spark.sql.connector.catalog.Identifier;\n+import org.apache.spark.sql.connector.catalog.TableCatalog;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import scala.Some;\n+import scala.collection.JavaConverters;\n+\n+/**\n+ * Takes a Spark table in the sourceCatalog and attempts to transform it into an Iceberg\n+ * Table in the same location with the same identifier. Once complete the identifier which\n+ * previously referred to a non-iceberg table will refer to the newly migrated iceberg\n+ * table.\n+ */\n+class Spark3MigrateAction extends Spark3CreateAction {\n+  private static final Logger LOG = LoggerFactory.getLogger(Spark3MigrateAction.class);\n+  private static final String BACKUP_SUFFIX = \"_BACKUP_\";\n+\n+  Spark3MigrateAction(SparkSession spark, CatalogPlugin sourceCatalog, Identifier sourceTableName) {\n+    super(spark, sourceCatalog, sourceTableName, sourceCatalog, sourceTableName);\n+  }\n+\n+  @Override\n+  public Long execute() {\n+    Table icebergTable;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c746b86385bae9f8ecfb847bf87612e377672978"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5Mjg2NjA0OnYy", "diffSide": "RIGHT", "path": "spark3/src/main/java/org/apache/iceberg/actions/Spark3MigrateAction.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxNjozMzoxNVrOIDSOMw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxNjozMzoxNVrOIDSOMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDMxNTE4Nw==", "bodyText": "nit: missing quotes", "url": "https://github.com/apache/iceberg/pull/1525#discussion_r540315187", "createdAt": "2020-12-10T16:33:15Z", "author": {"login": "aokolnychyi"}, "path": "spark3/src/main/java/org/apache/iceberg/actions/Spark3MigrateAction.java", "diffHunk": "@@ -0,0 +1,138 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.actions;\n+\n+import java.util.Map;\n+import org.apache.iceberg.Snapshot;\n+import org.apache.iceberg.SnapshotSummary;\n+import org.apache.iceberg.Table;\n+import org.apache.iceberg.exceptions.AlreadyExistsException;\n+import org.apache.iceberg.exceptions.NoSuchTableException;\n+import org.apache.iceberg.relocated.com.google.common.base.Preconditions;\n+import org.apache.iceberg.relocated.com.google.common.collect.Maps;\n+import org.apache.iceberg.spark.SparkSessionCatalog;\n+import org.apache.iceberg.spark.SparkTableUtil;\n+import org.apache.iceberg.spark.source.StagedSparkTable;\n+import org.apache.spark.sql.SparkSession;\n+import org.apache.spark.sql.catalyst.TableIdentifier;\n+import org.apache.spark.sql.connector.catalog.CatalogPlugin;\n+import org.apache.spark.sql.connector.catalog.Identifier;\n+import org.apache.spark.sql.connector.catalog.TableCatalog;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import scala.Some;\n+import scala.collection.JavaConverters;\n+\n+/**\n+ * Takes a Spark table in the sourceCatalog and attempts to transform it into an Iceberg\n+ * Table in the same location with the same identifier. Once complete the identifier which\n+ * previously referred to a non-iceberg table will refer to the newly migrated iceberg\n+ * table.\n+ */\n+class Spark3MigrateAction extends Spark3CreateAction {\n+  private static final Logger LOG = LoggerFactory.getLogger(Spark3MigrateAction.class);\n+  private static final String BACKUP_SUFFIX = \"_BACKUP_\";\n+\n+  Spark3MigrateAction(SparkSession spark, CatalogPlugin sourceCatalog, Identifier sourceTableName) {\n+    super(spark, sourceCatalog, sourceTableName, sourceCatalog, sourceTableName);\n+  }\n+\n+  @Override\n+  public Long execute() {\n+    Table icebergTable;\n+\n+    // Move source table to a new name, halting all modifications and allowing us to stage\n+    // the creation of a new Iceberg table in its place\n+    String backupName = sourceTableIdent().name() + BACKUP_SUFFIX;\n+    Identifier backupIdentifier = Identifier.of(sourceTableIdent().namespace(), backupName);\n+    try {\n+      destCatalog().renameTable(sourceTableIdent(), backupIdentifier);\n+    } catch (org.apache.spark.sql.catalyst.analysis.NoSuchTableException e) {\n+      throw new NoSuchTableException(\"Cannot find table '%s' to migrate\", sourceTableIdent());\n+    } catch (org.apache.spark.sql.catalyst.analysis.TableAlreadyExistsException e) {\n+      throw new AlreadyExistsException(\"Cannot rename migration source '%s' to backup name '%s'.\" +\n+          \" Backup table already exists.\", sourceTableIdent(), backupIdentifier);\n+    }\n+\n+    StagedSparkTable stagedTable = null;\n+    boolean threw = true;\n+    try {\n+      stagedTable = stageDestTable();\n+      icebergTable = stagedTable.table();\n+\n+      ensureNameMappingPresent(icebergTable);\n+\n+      String stagingLocation = getMetadataLocation(icebergTable);\n+\n+      LOG.info(\"Beginning migration of {} using metadata location {}\", sourceTableIdent(), stagingLocation);\n+      Some<String> backupNamespace = Some.apply(backupIdentifier.namespace()[0]);\n+      TableIdentifier v1BackupIdentifier = new TableIdentifier(backupIdentifier.name(), backupNamespace);\n+      SparkTableUtil.importSparkTable(spark(), v1BackupIdentifier, icebergTable, stagingLocation);\n+\n+      stagedTable.commitStagedChanges();\n+      threw = false;\n+    } finally {\n+      if (threw) {\n+        LOG.error(\"Error when attempting perform migration changes, aborting table creation and restoring backup.\");\n+\n+        try {\n+          stagedTable.abortStagedChanges();\n+        } catch (Exception abortException) {\n+          LOG.error(\"Cannot abort staged changes\", abortException);\n+        }\n+\n+        try {\n+          destCatalog().renameTable(backupIdentifier, sourceTableIdent());\n+        } catch (org.apache.spark.sql.catalyst.analysis.NoSuchTableException nstException) {\n+          throw new NoSuchTableException(\"Cannot restore backup '%s', the backup cannot be found\", backupIdentifier);\n+        } catch (org.apache.spark.sql.catalyst.analysis.TableAlreadyExistsException taeException) {\n+          throw new AlreadyExistsException(\"Cannot restore backup, a table with the original name \" +\n+              \"exists. The backup can be found with the name %s\", backupIdentifier);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c746b86385bae9f8ecfb847bf87612e377672978"}, "originalPosition": 107}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5Mjg4MzQ3OnYy", "diffSide": "RIGHT", "path": "spark3/src/main/java/org/apache/iceberg/actions/Spark3MigrateAction.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxNjozNjoxOFrOIDSZfw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxNjo0MDowN1rOIDSo9w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDMxODA3OQ==", "bodyText": "Why use threw and finally instead of catch? Do we also re-throw the original exception?", "url": "https://github.com/apache/iceberg/pull/1525#discussion_r540318079", "createdAt": "2020-12-10T16:36:18Z", "author": {"login": "aokolnychyi"}, "path": "spark3/src/main/java/org/apache/iceberg/actions/Spark3MigrateAction.java", "diffHunk": "@@ -0,0 +1,138 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.actions;\n+\n+import java.util.Map;\n+import org.apache.iceberg.Snapshot;\n+import org.apache.iceberg.SnapshotSummary;\n+import org.apache.iceberg.Table;\n+import org.apache.iceberg.exceptions.AlreadyExistsException;\n+import org.apache.iceberg.exceptions.NoSuchTableException;\n+import org.apache.iceberg.relocated.com.google.common.base.Preconditions;\n+import org.apache.iceberg.relocated.com.google.common.collect.Maps;\n+import org.apache.iceberg.spark.SparkSessionCatalog;\n+import org.apache.iceberg.spark.SparkTableUtil;\n+import org.apache.iceberg.spark.source.StagedSparkTable;\n+import org.apache.spark.sql.SparkSession;\n+import org.apache.spark.sql.catalyst.TableIdentifier;\n+import org.apache.spark.sql.connector.catalog.CatalogPlugin;\n+import org.apache.spark.sql.connector.catalog.Identifier;\n+import org.apache.spark.sql.connector.catalog.TableCatalog;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import scala.Some;\n+import scala.collection.JavaConverters;\n+\n+/**\n+ * Takes a Spark table in the sourceCatalog and attempts to transform it into an Iceberg\n+ * Table in the same location with the same identifier. Once complete the identifier which\n+ * previously referred to a non-iceberg table will refer to the newly migrated iceberg\n+ * table.\n+ */\n+class Spark3MigrateAction extends Spark3CreateAction {\n+  private static final Logger LOG = LoggerFactory.getLogger(Spark3MigrateAction.class);\n+  private static final String BACKUP_SUFFIX = \"_BACKUP_\";\n+\n+  Spark3MigrateAction(SparkSession spark, CatalogPlugin sourceCatalog, Identifier sourceTableName) {\n+    super(spark, sourceCatalog, sourceTableName, sourceCatalog, sourceTableName);\n+  }\n+\n+  @Override\n+  public Long execute() {\n+    Table icebergTable;\n+\n+    // Move source table to a new name, halting all modifications and allowing us to stage\n+    // the creation of a new Iceberg table in its place\n+    String backupName = sourceTableIdent().name() + BACKUP_SUFFIX;\n+    Identifier backupIdentifier = Identifier.of(sourceTableIdent().namespace(), backupName);\n+    try {\n+      destCatalog().renameTable(sourceTableIdent(), backupIdentifier);\n+    } catch (org.apache.spark.sql.catalyst.analysis.NoSuchTableException e) {\n+      throw new NoSuchTableException(\"Cannot find table '%s' to migrate\", sourceTableIdent());\n+    } catch (org.apache.spark.sql.catalyst.analysis.TableAlreadyExistsException e) {\n+      throw new AlreadyExistsException(\"Cannot rename migration source '%s' to backup name '%s'.\" +\n+          \" Backup table already exists.\", sourceTableIdent(), backupIdentifier);\n+    }\n+\n+    StagedSparkTable stagedTable = null;\n+    boolean threw = true;\n+    try {\n+      stagedTable = stageDestTable();\n+      icebergTable = stagedTable.table();\n+\n+      ensureNameMappingPresent(icebergTable);\n+\n+      String stagingLocation = getMetadataLocation(icebergTable);\n+\n+      LOG.info(\"Beginning migration of {} using metadata location {}\", sourceTableIdent(), stagingLocation);\n+      Some<String> backupNamespace = Some.apply(backupIdentifier.namespace()[0]);\n+      TableIdentifier v1BackupIdentifier = new TableIdentifier(backupIdentifier.name(), backupNamespace);\n+      SparkTableUtil.importSparkTable(spark(), v1BackupIdentifier, icebergTable, stagingLocation);\n+\n+      stagedTable.commitStagedChanges();\n+      threw = false;\n+    } finally {\n+      if (threw) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c746b86385bae9f8ecfb847bf87612e377672978"}, "originalPosition": 92}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDMyMjAzOQ==", "bodyText": "Well, it is finally, never mind.", "url": "https://github.com/apache/iceberg/pull/1525#discussion_r540322039", "createdAt": "2020-12-10T16:40:07Z", "author": {"login": "aokolnychyi"}, "path": "spark3/src/main/java/org/apache/iceberg/actions/Spark3MigrateAction.java", "diffHunk": "@@ -0,0 +1,138 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.actions;\n+\n+import java.util.Map;\n+import org.apache.iceberg.Snapshot;\n+import org.apache.iceberg.SnapshotSummary;\n+import org.apache.iceberg.Table;\n+import org.apache.iceberg.exceptions.AlreadyExistsException;\n+import org.apache.iceberg.exceptions.NoSuchTableException;\n+import org.apache.iceberg.relocated.com.google.common.base.Preconditions;\n+import org.apache.iceberg.relocated.com.google.common.collect.Maps;\n+import org.apache.iceberg.spark.SparkSessionCatalog;\n+import org.apache.iceberg.spark.SparkTableUtil;\n+import org.apache.iceberg.spark.source.StagedSparkTable;\n+import org.apache.spark.sql.SparkSession;\n+import org.apache.spark.sql.catalyst.TableIdentifier;\n+import org.apache.spark.sql.connector.catalog.CatalogPlugin;\n+import org.apache.spark.sql.connector.catalog.Identifier;\n+import org.apache.spark.sql.connector.catalog.TableCatalog;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import scala.Some;\n+import scala.collection.JavaConverters;\n+\n+/**\n+ * Takes a Spark table in the sourceCatalog and attempts to transform it into an Iceberg\n+ * Table in the same location with the same identifier. Once complete the identifier which\n+ * previously referred to a non-iceberg table will refer to the newly migrated iceberg\n+ * table.\n+ */\n+class Spark3MigrateAction extends Spark3CreateAction {\n+  private static final Logger LOG = LoggerFactory.getLogger(Spark3MigrateAction.class);\n+  private static final String BACKUP_SUFFIX = \"_BACKUP_\";\n+\n+  Spark3MigrateAction(SparkSession spark, CatalogPlugin sourceCatalog, Identifier sourceTableName) {\n+    super(spark, sourceCatalog, sourceTableName, sourceCatalog, sourceTableName);\n+  }\n+\n+  @Override\n+  public Long execute() {\n+    Table icebergTable;\n+\n+    // Move source table to a new name, halting all modifications and allowing us to stage\n+    // the creation of a new Iceberg table in its place\n+    String backupName = sourceTableIdent().name() + BACKUP_SUFFIX;\n+    Identifier backupIdentifier = Identifier.of(sourceTableIdent().namespace(), backupName);\n+    try {\n+      destCatalog().renameTable(sourceTableIdent(), backupIdentifier);\n+    } catch (org.apache.spark.sql.catalyst.analysis.NoSuchTableException e) {\n+      throw new NoSuchTableException(\"Cannot find table '%s' to migrate\", sourceTableIdent());\n+    } catch (org.apache.spark.sql.catalyst.analysis.TableAlreadyExistsException e) {\n+      throw new AlreadyExistsException(\"Cannot rename migration source '%s' to backup name '%s'.\" +\n+          \" Backup table already exists.\", sourceTableIdent(), backupIdentifier);\n+    }\n+\n+    StagedSparkTable stagedTable = null;\n+    boolean threw = true;\n+    try {\n+      stagedTable = stageDestTable();\n+      icebergTable = stagedTable.table();\n+\n+      ensureNameMappingPresent(icebergTable);\n+\n+      String stagingLocation = getMetadataLocation(icebergTable);\n+\n+      LOG.info(\"Beginning migration of {} using metadata location {}\", sourceTableIdent(), stagingLocation);\n+      Some<String> backupNamespace = Some.apply(backupIdentifier.namespace()[0]);\n+      TableIdentifier v1BackupIdentifier = new TableIdentifier(backupIdentifier.name(), backupNamespace);\n+      SparkTableUtil.importSparkTable(spark(), v1BackupIdentifier, icebergTable, stagingLocation);\n+\n+      stagedTable.commitStagedChanges();\n+      threw = false;\n+    } finally {\n+      if (threw) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDMxODA3OQ=="}, "originalCommit": {"oid": "c746b86385bae9f8ecfb847bf87612e377672978"}, "originalPosition": 92}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5Mjg5ODA2OnYy", "diffSide": "RIGHT", "path": "spark3/src/main/java/org/apache/iceberg/actions/Spark3MigrateAction.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxNjozODozM1rOIDSijw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxNjozODozM1rOIDSijw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDMyMDM5OQ==", "bodyText": "nit: quotes?", "url": "https://github.com/apache/iceberg/pull/1525#discussion_r540320399", "createdAt": "2020-12-10T16:38:33Z", "author": {"login": "aokolnychyi"}, "path": "spark3/src/main/java/org/apache/iceberg/actions/Spark3MigrateAction.java", "diffHunk": "@@ -0,0 +1,138 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.actions;\n+\n+import java.util.Map;\n+import org.apache.iceberg.Snapshot;\n+import org.apache.iceberg.SnapshotSummary;\n+import org.apache.iceberg.Table;\n+import org.apache.iceberg.exceptions.AlreadyExistsException;\n+import org.apache.iceberg.exceptions.NoSuchTableException;\n+import org.apache.iceberg.relocated.com.google.common.base.Preconditions;\n+import org.apache.iceberg.relocated.com.google.common.collect.Maps;\n+import org.apache.iceberg.spark.SparkSessionCatalog;\n+import org.apache.iceberg.spark.SparkTableUtil;\n+import org.apache.iceberg.spark.source.StagedSparkTable;\n+import org.apache.spark.sql.SparkSession;\n+import org.apache.spark.sql.catalyst.TableIdentifier;\n+import org.apache.spark.sql.connector.catalog.CatalogPlugin;\n+import org.apache.spark.sql.connector.catalog.Identifier;\n+import org.apache.spark.sql.connector.catalog.TableCatalog;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import scala.Some;\n+import scala.collection.JavaConverters;\n+\n+/**\n+ * Takes a Spark table in the sourceCatalog and attempts to transform it into an Iceberg\n+ * Table in the same location with the same identifier. Once complete the identifier which\n+ * previously referred to a non-iceberg table will refer to the newly migrated iceberg\n+ * table.\n+ */\n+class Spark3MigrateAction extends Spark3CreateAction {\n+  private static final Logger LOG = LoggerFactory.getLogger(Spark3MigrateAction.class);\n+  private static final String BACKUP_SUFFIX = \"_BACKUP_\";\n+\n+  Spark3MigrateAction(SparkSession spark, CatalogPlugin sourceCatalog, Identifier sourceTableName) {\n+    super(spark, sourceCatalog, sourceTableName, sourceCatalog, sourceTableName);\n+  }\n+\n+  @Override\n+  public Long execute() {\n+    Table icebergTable;\n+\n+    // Move source table to a new name, halting all modifications and allowing us to stage\n+    // the creation of a new Iceberg table in its place\n+    String backupName = sourceTableIdent().name() + BACKUP_SUFFIX;\n+    Identifier backupIdentifier = Identifier.of(sourceTableIdent().namespace(), backupName);\n+    try {\n+      destCatalog().renameTable(sourceTableIdent(), backupIdentifier);\n+    } catch (org.apache.spark.sql.catalyst.analysis.NoSuchTableException e) {\n+      throw new NoSuchTableException(\"Cannot find table '%s' to migrate\", sourceTableIdent());\n+    } catch (org.apache.spark.sql.catalyst.analysis.TableAlreadyExistsException e) {\n+      throw new AlreadyExistsException(\"Cannot rename migration source '%s' to backup name '%s'.\" +\n+          \" Backup table already exists.\", sourceTableIdent(), backupIdentifier);\n+    }\n+\n+    StagedSparkTable stagedTable = null;\n+    boolean threw = true;\n+    try {\n+      stagedTable = stageDestTable();\n+      icebergTable = stagedTable.table();\n+\n+      ensureNameMappingPresent(icebergTable);\n+\n+      String stagingLocation = getMetadataLocation(icebergTable);\n+\n+      LOG.info(\"Beginning migration of {} using metadata location {}\", sourceTableIdent(), stagingLocation);\n+      Some<String> backupNamespace = Some.apply(backupIdentifier.namespace()[0]);\n+      TableIdentifier v1BackupIdentifier = new TableIdentifier(backupIdentifier.name(), backupNamespace);\n+      SparkTableUtil.importSparkTable(spark(), v1BackupIdentifier, icebergTable, stagingLocation);\n+\n+      stagedTable.commitStagedChanges();\n+      threw = false;\n+    } finally {\n+      if (threw) {\n+        LOG.error(\"Error when attempting perform migration changes, aborting table creation and restoring backup.\");\n+\n+        try {\n+          stagedTable.abortStagedChanges();\n+        } catch (Exception abortException) {\n+          LOG.error(\"Cannot abort staged changes\", abortException);\n+        }\n+\n+        try {\n+          destCatalog().renameTable(backupIdentifier, sourceTableIdent());\n+        } catch (org.apache.spark.sql.catalyst.analysis.NoSuchTableException nstException) {\n+          throw new NoSuchTableException(\"Cannot restore backup '%s', the backup cannot be found\", backupIdentifier);\n+        } catch (org.apache.spark.sql.catalyst.analysis.TableAlreadyExistsException taeException) {\n+          throw new AlreadyExistsException(\"Cannot restore backup, a table with the original name \" +\n+              \"exists. The backup can be found with the name %s\", backupIdentifier);\n+        }\n+      }\n+    }\n+\n+    Snapshot snapshot = icebergTable.currentSnapshot();\n+    long numMigratedFiles = Long.parseLong(snapshot.summary().get(SnapshotSummary.TOTAL_DATA_FILES_PROP));\n+    LOG.info(\"Successfully loaded Iceberg metadata for {} files\", numMigratedFiles);\n+    return numMigratedFiles;\n+  }\n+\n+  @Override\n+  protected Map<String, String> targetTableProps() {\n+    Map<String, String> properties = Maps.newHashMap();\n+    properties.putAll(JavaConverters.mapAsJavaMapConverter(v1SourceTable().properties()).asJava());\n+    EXCLUDED_PROPERTIES.forEach(properties::remove);\n+    properties.put(TableCatalog.PROP_PROVIDER, \"iceberg\");\n+    properties.put(\"migrated\", \"true\");\n+    properties.putAll(additionalProperties());\n+    return properties;\n+  }\n+\n+  @Override\n+  protected TableCatalog checkSourceCatalog(CatalogPlugin catalog) {\n+    // Currently the Import code relies on being able to look up the table in the session code\n+    Preconditions.checkArgument(catalog instanceof SparkSessionCatalog,\n+        \"Cannot migrate a table from a non-Iceberg Spark Session Catalog. Found %s of class %s as the source catalog.\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c746b86385bae9f8ecfb847bf87612e377672978"}, "originalPosition": 133}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5MjkxODgwOnYy", "diffSide": "RIGHT", "path": "spark3/src/main/java/org/apache/iceberg/actions/Spark3SnapshotAction.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxNjo0MTo1NFrOIDSvng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxNjo0MTo1NFrOIDSvng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDMyMzc0Mg==", "bodyText": "+1", "url": "https://github.com/apache/iceberg/pull/1525#discussion_r540323742", "createdAt": "2020-12-10T16:41:54Z", "author": {"login": "aokolnychyi"}, "path": "spark3/src/main/java/org/apache/iceberg/actions/Spark3SnapshotAction.java", "diffHunk": "@@ -0,0 +1,138 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.actions;\n+\n+import java.util.Map;\n+import org.apache.iceberg.Snapshot;\n+import org.apache.iceberg.SnapshotSummary;\n+import org.apache.iceberg.Table;\n+import org.apache.iceberg.TableProperties;\n+import org.apache.iceberg.relocated.com.google.common.base.Preconditions;\n+import org.apache.iceberg.relocated.com.google.common.collect.Maps;\n+import org.apache.iceberg.spark.SparkTableUtil;\n+import org.apache.iceberg.spark.source.StagedSparkTable;\n+import org.apache.spark.sql.SparkSession;\n+import org.apache.spark.sql.catalyst.TableIdentifier;\n+import org.apache.spark.sql.connector.catalog.CatalogPlugin;\n+import org.apache.spark.sql.connector.catalog.Identifier;\n+import org.apache.spark.sql.connector.catalog.TableCatalog;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import scala.collection.JavaConverters;\n+\n+/**\n+ * Creates a new Iceberg table based on a source Spark table. The new Iceberg table will\n+ * have a different data and metadata directory allowing it to exist independently of the\n+ * source table.\n+ */\n+class Spark3SnapshotAction extends Spark3CreateAction implements SnapshotAction {\n+  private static final Logger LOG = LoggerFactory.getLogger(Spark3SnapshotAction.class);\n+\n+  private String destTableLocation = null;\n+\n+  Spark3SnapshotAction(SparkSession spark, CatalogPlugin sourceCatalog,\n+                       Identifier sourceTableIdent, CatalogPlugin destCatalog,\n+                       Identifier destTableIdent) {\n+    super(spark, sourceCatalog, sourceTableIdent, destCatalog, destTableIdent);\n+  }\n+\n+  @Override\n+  public Long execute() {\n+    StagedSparkTable stagedTable = stageDestTable();\n+    Table icebergTable = stagedTable.table();\n+    // TODO Check table location here against source location\n+\n+    ensureNameMappingPresent(icebergTable);\n+\n+    boolean threw = true;\n+    try {\n+      String stagingLocation = getMetadataLocation(icebergTable);\n+      LOG.info(\"Beginning snapshot of {} to {} using metadata location {}\", sourceTableIdent(), destTableIdent(),\n+          stagingLocation);\n+\n+      TableIdentifier v1TableIdentifier = v1SourceTable().identifier();\n+      SparkTableUtil.importSparkTable(spark(), v1TableIdentifier, icebergTable, stagingLocation);\n+      stagedTable.commitStagedChanges();\n+      threw = false;\n+    } finally {\n+      if (threw) {\n+        LOG.error(\"Error when attempting to commit snapshot changes, rolling back\");\n+\n+        try {\n+          stagedTable.abortStagedChanges();\n+        } catch (Exception abortException) {\n+          LOG.error(\"Cannot abort staged changes\", abortException);\n+        }\n+      }\n+    }\n+\n+    Snapshot snapshot = icebergTable.currentSnapshot();\n+    long numMigratedFiles = Long.parseLong(snapshot.summary().get(SnapshotSummary.TOTAL_DATA_FILES_PROP));\n+    LOG.info(\"Successfully loaded Iceberg metadata for {} files\", numMigratedFiles);\n+    return numMigratedFiles;\n+  }\n+\n+  @Override\n+  protected Map<String, String> targetTableProps() {\n+    Map<String, String> properties = Maps.newHashMap();\n+\n+    // Remove any possible location properties from origin properties\n+    properties.putAll(JavaConverters.mapAsJavaMapConverter(v1SourceTable().properties()).asJava());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c746b86385bae9f8ecfb847bf87612e377672978"}, "originalPosition": 97}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwNzMxMTM5OnYy", "diffSide": "RIGHT", "path": "spark/src/main/java/org/apache/iceberg/spark/SparkSchemaUtil.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQwMzoyNzo0MlrOHZXMSQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQyMzoxNToxNFrOHaGTCA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjM1NjQyNQ==", "bodyText": "EDIT: I goofed. We're creating iceberg tables from Spark tables. So my 1st suggestion should be ignored entirely. Of course spark tables won't have hidden partition specs as that's an iceberg concept and we're using this to convert tables from spark to iceberg \ud83e\udd26 . Is it possible to re-use a spark table's bucket based partitioning? I've never personally used it due to the small files problem it can generate, but are our hash functions for bucketing so different from the Spark bucketing (or some other issue) that we can't make it work - like, in a follow up PR?\n--- Original ---\nMy understanding is that we're only searching for non-hidden partitions here because that's all that's possible to create from a table derived from catalyst's TableIdentifier which has no knowledge of hidden partitions and uses Hive style partitioning instead. That being said, I do still think that the JavaDoc could use an update emphasizing this. How about something like this...\n/**\n * Given a Spark table identifier, determine the PartitionSpec, which will be either\n * an identity or unpartitioned PartitionSpec based on the original table's hive-style\n * partition columns.\n */\n\nI'd love to hear other suggestions, but to me the JavaDoc seems ... somehow missing something. But I'm not quite sure what it is. \ud83e\udd14", "url": "https://github.com/apache/iceberg/pull/1525#discussion_r496356425", "createdAt": "2020-09-29T03:27:42Z", "author": {"login": "kbendick"}, "path": "spark/src/main/java/org/apache/iceberg/spark/SparkSchemaUtil.java", "diffHunk": "@@ -63,6 +65,21 @@ public static Schema schemaForTable(SparkSession spark, String name) {\n     return new Schema(converted.asNestedType().asStructType().fields());\n   }\n \n+  /**\n+   * Given a Spark table identifier, determine the PartitionSpec.\n+   * @param spark the SparkSession which contains the identifier\n+   * @param table a TableIdentifier, if the namespace is left blank the catalog().currentDatabase() will be used\n+   * @return a IcebergPartitionSpec representing the partitioning of the Spark table\n+   * @throws AnalysisException if thrown by the Spark catalog\n+   */\n+  public static PartitionSpec specForTable(SparkSession spark, TableIdentifier table) throws AnalysisException {\n+    String db = table.database().nonEmpty() ? table.database().get() : spark.catalog().currentDatabase();\n+    PartitionSpec spec = identitySpec(\n+        schemaForTable(spark, table.unquotedString()),\n+        spark.catalog().listColumns(db, table.table()).collectAsList());\n+    return spec == null ? PartitionSpec.unpartitioned() : spec;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a23fa89b2d5a2be61af72836656e4bf3322c9c39"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njc2NDU0OQ==", "bodyText": "Definitely want this to be more clear, I think your documentation is correct, either the table is already partitioned with identity transforms, if so we need to know which, or it has no partitioning information.", "url": "https://github.com/apache/iceberg/pull/1525#discussion_r496764549", "createdAt": "2020-09-29T14:28:52Z", "author": {"login": "RussellSpitzer"}, "path": "spark/src/main/java/org/apache/iceberg/spark/SparkSchemaUtil.java", "diffHunk": "@@ -63,6 +65,21 @@ public static Schema schemaForTable(SparkSession spark, String name) {\n     return new Schema(converted.asNestedType().asStructType().fields());\n   }\n \n+  /**\n+   * Given a Spark table identifier, determine the PartitionSpec.\n+   * @param spark the SparkSession which contains the identifier\n+   * @param table a TableIdentifier, if the namespace is left blank the catalog().currentDatabase() will be used\n+   * @return a IcebergPartitionSpec representing the partitioning of the Spark table\n+   * @throws AnalysisException if thrown by the Spark catalog\n+   */\n+  public static PartitionSpec specForTable(SparkSession spark, TableIdentifier table) throws AnalysisException {\n+    String db = table.database().nonEmpty() ? table.database().get() : spark.catalog().currentDatabase();\n+    PartitionSpec spec = identitySpec(\n+        schemaForTable(spark, table.unquotedString()),\n+        spark.catalog().listColumns(db, table.table()).collectAsList());\n+    return spec == null ? PartitionSpec.unpartitioned() : spec;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjM1NjQyNQ=="}, "originalCommit": {"oid": "a23fa89b2d5a2be61af72836656e4bf3322c9c39"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzEyODIwMA==", "bodyText": "So I've thought about this more, and I think that what might be missing / what is bothering me is honestly just an empty line between the doc comment and the section for params. \ud83d\ude05\nSo definitely file that one under nits.", "url": "https://github.com/apache/iceberg/pull/1525#discussion_r497128200", "createdAt": "2020-09-29T23:15:14Z", "author": {"login": "kbendick"}, "path": "spark/src/main/java/org/apache/iceberg/spark/SparkSchemaUtil.java", "diffHunk": "@@ -63,6 +65,21 @@ public static Schema schemaForTable(SparkSession spark, String name) {\n     return new Schema(converted.asNestedType().asStructType().fields());\n   }\n \n+  /**\n+   * Given a Spark table identifier, determine the PartitionSpec.\n+   * @param spark the SparkSession which contains the identifier\n+   * @param table a TableIdentifier, if the namespace is left blank the catalog().currentDatabase() will be used\n+   * @return a IcebergPartitionSpec representing the partitioning of the Spark table\n+   * @throws AnalysisException if thrown by the Spark catalog\n+   */\n+  public static PartitionSpec specForTable(SparkSession spark, TableIdentifier table) throws AnalysisException {\n+    String db = table.database().nonEmpty() ? table.database().get() : spark.catalog().currentDatabase();\n+    PartitionSpec spec = identitySpec(\n+        schemaForTable(spark, table.unquotedString()),\n+        spark.catalog().listColumns(db, table.table()).collectAsList());\n+    return spec == null ? PartitionSpec.unpartitioned() : spec;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjM1NjQyNQ=="}, "originalCommit": {"oid": "a23fa89b2d5a2be61af72836656e4bf3322c9c39"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwNzM2NzcwOnYy", "diffSide": "RIGHT", "path": "spark/src/main/java/org/apache/iceberg/spark/SparkSchemaUtil.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQwNDowMjozMFrOHZXsxA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQyMzoxNDoxNFrOHaGQMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjM2NDc0MA==", "bodyText": "I think that you can get the table DDL via a utility function in catalyst, and then there's a function that returns a schema from DDL. However, if this is returning an Iceberg schema then do please ignore me :)", "url": "https://github.com/apache/iceberg/pull/1525#discussion_r496364740", "createdAt": "2020-09-29T04:02:30Z", "author": {"login": "kbendick"}, "path": "spark/src/main/java/org/apache/iceberg/spark/SparkSchemaUtil.java", "diffHunk": "@@ -63,6 +65,21 @@ public static Schema schemaForTable(SparkSession spark, String name) {\n     return new Schema(converted.asNestedType().asStructType().fields());\n   }\n \n+  /**\n+   * Given a Spark table identifier, determine the PartitionSpec.\n+   * @param spark the SparkSession which contains the identifier\n+   * @param table a TableIdentifier, if the namespace is left blank the catalog().currentDatabase() will be used\n+   * @return a IcebergPartitionSpec representing the partitioning of the Spark table\n+   * @throws AnalysisException if thrown by the Spark catalog\n+   */\n+  public static PartitionSpec specForTable(SparkSession spark, TableIdentifier table) throws AnalysisException {\n+    String db = table.database().nonEmpty() ? table.database().get() : spark.catalog().currentDatabase();\n+    PartitionSpec spec = identitySpec(\n+        schemaForTable(spark, table.unquotedString()),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a23fa89b2d5a2be61af72836656e4bf3322c9c39"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njc2NDkyNw==", "bodyText": "Yeah this is the IcebergSchema :)", "url": "https://github.com/apache/iceberg/pull/1525#discussion_r496764927", "createdAt": "2020-09-29T14:29:19Z", "author": {"login": "RussellSpitzer"}, "path": "spark/src/main/java/org/apache/iceberg/spark/SparkSchemaUtil.java", "diffHunk": "@@ -63,6 +65,21 @@ public static Schema schemaForTable(SparkSession spark, String name) {\n     return new Schema(converted.asNestedType().asStructType().fields());\n   }\n \n+  /**\n+   * Given a Spark table identifier, determine the PartitionSpec.\n+   * @param spark the SparkSession which contains the identifier\n+   * @param table a TableIdentifier, if the namespace is left blank the catalog().currentDatabase() will be used\n+   * @return a IcebergPartitionSpec representing the partitioning of the Spark table\n+   * @throws AnalysisException if thrown by the Spark catalog\n+   */\n+  public static PartitionSpec specForTable(SparkSession spark, TableIdentifier table) throws AnalysisException {\n+    String db = table.database().nonEmpty() ? table.database().get() : spark.catalog().currentDatabase();\n+    PartitionSpec spec = identitySpec(\n+        schemaForTable(spark, table.unquotedString()),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjM2NDc0MA=="}, "originalCommit": {"oid": "a23fa89b2d5a2be61af72836656e4bf3322c9c39"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzEyNzQ3NQ==", "bodyText": "I figured once I typed it out. I should really start deleting my comments once I come to the answer rubber duck debugging with myself in the github comments \ud83d\ude05 .", "url": "https://github.com/apache/iceberg/pull/1525#discussion_r497127475", "createdAt": "2020-09-29T23:14:14Z", "author": {"login": "kbendick"}, "path": "spark/src/main/java/org/apache/iceberg/spark/SparkSchemaUtil.java", "diffHunk": "@@ -63,6 +65,21 @@ public static Schema schemaForTable(SparkSession spark, String name) {\n     return new Schema(converted.asNestedType().asStructType().fields());\n   }\n \n+  /**\n+   * Given a Spark table identifier, determine the PartitionSpec.\n+   * @param spark the SparkSession which contains the identifier\n+   * @param table a TableIdentifier, if the namespace is left blank the catalog().currentDatabase() will be used\n+   * @return a IcebergPartitionSpec representing the partitioning of the Spark table\n+   * @throws AnalysisException if thrown by the Spark catalog\n+   */\n+  public static PartitionSpec specForTable(SparkSession spark, TableIdentifier table) throws AnalysisException {\n+    String db = table.database().nonEmpty() ? table.database().get() : spark.catalog().currentDatabase();\n+    PartitionSpec spec = identitySpec(\n+        schemaForTable(spark, table.unquotedString()),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjM2NDc0MA=="}, "originalCommit": {"oid": "a23fa89b2d5a2be61af72836656e4bf3322c9c39"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwNzQzNTYxOnYy", "diffSide": "RIGHT", "path": "spark/src/test/java/org/apache/iceberg/spark/SparkTestBase.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQwNDoyMzo0MFrOHZYawA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QwMDoyOTo0OVrOHdeeIA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjM3NjUxMg==", "bodyText": "Can we create a separate PR for this and merge it in sooner? I imagine this PR will take longer to merge because of its large scope, but this seems useful now.", "url": "https://github.com/apache/iceberg/pull/1525#discussion_r496376512", "createdAt": "2020-09-29T04:23:40Z", "author": {"login": "kbendick"}, "path": "spark/src/test/java/org/apache/iceberg/spark/SparkTestBase.java", "diffHunk": "@@ -63,7 +63,9 @@ public static void startMetastoreAndSpark() {\n \n   @AfterClass\n   public static void stopMetastoreAndSpark() {\n-    catalog.close();\n+    if (catalog != null) {\n+      catalog.close();\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a23fa89b2d5a2be61af72836656e4bf3322c9c39"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njc2NTQ4Ng==", "bodyText": "Sure, I just added this in because my tests were yelling at me all the time because I like to throw random kill codes around when debugging. I decided to just make sure it would stop bothering me.", "url": "https://github.com/apache/iceberg/pull/1525#discussion_r496765486", "createdAt": "2020-09-29T14:30:00Z", "author": {"login": "RussellSpitzer"}, "path": "spark/src/test/java/org/apache/iceberg/spark/SparkTestBase.java", "diffHunk": "@@ -63,7 +63,9 @@ public static void startMetastoreAndSpark() {\n \n   @AfterClass\n   public static void stopMetastoreAndSpark() {\n-    catalog.close();\n+    if (catalog != null) {\n+      catalog.close();\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjM3NjUxMg=="}, "originalCommit": {"oid": "a23fa89b2d5a2be61af72836656e4bf3322c9c39"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzEyOTI0Ng==", "bodyText": "I can create a separate PR to handle this now if you don't mind.", "url": "https://github.com/apache/iceberg/pull/1525#discussion_r497129246", "createdAt": "2020-09-29T23:16:45Z", "author": {"login": "kbendick"}, "path": "spark/src/test/java/org/apache/iceberg/spark/SparkTestBase.java", "diffHunk": "@@ -63,7 +63,9 @@ public static void startMetastoreAndSpark() {\n \n   @AfterClass\n   public static void stopMetastoreAndSpark() {\n-    catalog.close();\n+    if (catalog != null) {\n+      catalog.close();\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjM3NjUxMg=="}, "originalCommit": {"oid": "a23fa89b2d5a2be61af72836656e4bf3322c9c39"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzEzNDgwOQ==", "bodyText": "@RussellSpitzer I created a PR that cherry picks just this change as this PR's scope is pretty large and this small change can be merged in much more quickly: #1529", "url": "https://github.com/apache/iceberg/pull/1525#discussion_r497134809", "createdAt": "2020-09-29T23:24:24Z", "author": {"login": "kbendick"}, "path": "spark/src/test/java/org/apache/iceberg/spark/SparkTestBase.java", "diffHunk": "@@ -63,7 +63,9 @@ public static void startMetastoreAndSpark() {\n \n   @AfterClass\n   public static void stopMetastoreAndSpark() {\n-    catalog.close();\n+    if (catalog != null) {\n+      catalog.close();\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjM3NjUxMg=="}, "originalCommit": {"oid": "a23fa89b2d5a2be61af72836656e4bf3322c9c39"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDY2OTk4NA==", "bodyText": "#1529 was merged.", "url": "https://github.com/apache/iceberg/pull/1525#discussion_r500669984", "createdAt": "2020-10-07T00:29:49Z", "author": {"login": "rdblue"}, "path": "spark/src/test/java/org/apache/iceberg/spark/SparkTestBase.java", "diffHunk": "@@ -63,7 +63,9 @@ public static void startMetastoreAndSpark() {\n \n   @AfterClass\n   public static void stopMetastoreAndSpark() {\n-    catalog.close();\n+    if (catalog != null) {\n+      catalog.close();\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjM3NjUxMg=="}, "originalCommit": {"oid": "a23fa89b2d5a2be61af72836656e4bf3322c9c39"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzNDg5OTc0OnYy", "diffSide": "RIGHT", "path": "spark/src/main/java/org/apache/iceberg/spark/SparkSchemaUtil.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QwMDoyODowNlrOHdecVA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxOTozODo1NlrOHgK5KA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDY2OTUyNA==", "bodyText": "I don't think that we should leak the v1 Spark API (TableIdentifier) in a util class like this. What about passing database and name separately? Then the caller is responsible for adding database, which avoids the need to use v1 spark.catalog() to default it.", "url": "https://github.com/apache/iceberg/pull/1525#discussion_r500669524", "createdAt": "2020-10-07T00:28:06Z", "author": {"login": "rdblue"}, "path": "spark/src/main/java/org/apache/iceberg/spark/SparkSchemaUtil.java", "diffHunk": "@@ -63,6 +65,21 @@ public static Schema schemaForTable(SparkSession spark, String name) {\n     return new Schema(converted.asNestedType().asStructType().fields());\n   }\n \n+  /**\n+   * Given a Spark table identifier, determine the PartitionSpec.\n+   * @param spark the SparkSession which contains the identifier\n+   * @param table a TableIdentifier, if the namespace is left blank the catalog().currentDatabase() will be used\n+   * @return a IcebergPartitionSpec representing the partitioning of the Spark table\n+   * @throws AnalysisException if thrown by the Spark catalog\n+   */\n+  public static PartitionSpec specForTable(SparkSession spark, TableIdentifier table) throws AnalysisException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a23fa89b2d5a2be61af72836656e4bf3322c9c39"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQ5MzAwMg==", "bodyText": "Sure, the main issue is that the old version just always used the string literal \"default\" no matter what. Which I don't think is the right thing to do.", "url": "https://github.com/apache/iceberg/pull/1525#discussion_r503493002", "createdAt": "2020-10-12T19:34:11Z", "author": {"login": "RussellSpitzer"}, "path": "spark/src/main/java/org/apache/iceberg/spark/SparkSchemaUtil.java", "diffHunk": "@@ -63,6 +65,21 @@ public static Schema schemaForTable(SparkSession spark, String name) {\n     return new Schema(converted.asNestedType().asStructType().fields());\n   }\n \n+  /**\n+   * Given a Spark table identifier, determine the PartitionSpec.\n+   * @param spark the SparkSession which contains the identifier\n+   * @param table a TableIdentifier, if the namespace is left blank the catalog().currentDatabase() will be used\n+   * @return a IcebergPartitionSpec representing the partitioning of the Spark table\n+   * @throws AnalysisException if thrown by the Spark catalog\n+   */\n+  public static PartitionSpec specForTable(SparkSession spark, TableIdentifier table) throws AnalysisException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDY2OTUyNA=="}, "originalCommit": {"oid": "a23fa89b2d5a2be61af72836656e4bf3322c9c39"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQ5NDk1Mg==", "bodyText": "I actually am not using this method any more so I'll drop it and revert back to \"default in the base specForTable", "url": "https://github.com/apache/iceberg/pull/1525#discussion_r503494952", "createdAt": "2020-10-12T19:38:56Z", "author": {"login": "RussellSpitzer"}, "path": "spark/src/main/java/org/apache/iceberg/spark/SparkSchemaUtil.java", "diffHunk": "@@ -63,6 +65,21 @@ public static Schema schemaForTable(SparkSession spark, String name) {\n     return new Schema(converted.asNestedType().asStructType().fields());\n   }\n \n+  /**\n+   * Given a Spark table identifier, determine the PartitionSpec.\n+   * @param spark the SparkSession which contains the identifier\n+   * @param table a TableIdentifier, if the namespace is left blank the catalog().currentDatabase() will be used\n+   * @return a IcebergPartitionSpec representing the partitioning of the Spark table\n+   * @throws AnalysisException if thrown by the Spark catalog\n+   */\n+  public static PartitionSpec specForTable(SparkSession spark, TableIdentifier table) throws AnalysisException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDY2OTUyNA=="}, "originalCommit": {"oid": "a23fa89b2d5a2be61af72836656e4bf3322c9c39"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzNDkwNjY5OnYy", "diffSide": "RIGHT", "path": "spark3/src/main/java/org/apache/iceberg/spark/CreateActions.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QwMDozMTo0N1rOHdegVg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QyMjozNTo1MFrOHg74DA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDY3MDU1MA==", "bodyText": "I don't think that spark.catalog().currentDatabase() is correct. I thought that spark.catalog() always returns the built-in v1 catalog.", "url": "https://github.com/apache/iceberg/pull/1525#discussion_r500670550", "createdAt": "2020-10-07T00:31:47Z", "author": {"login": "rdblue"}, "path": "spark3/src/main/java/org/apache/iceberg/spark/CreateActions.java", "diffHunk": "@@ -0,0 +1,79 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.spark;\n+\n+import org.apache.spark.sql.SparkSession;\n+import org.apache.spark.sql.connector.catalog.Identifier;\n+\n+public class CreateActions {\n+  private final Identifier newTableName;\n+  private final SparkSession spark;\n+\n+  private CreateActions(SparkSession spark, Identifier newTableName) {\n+    this.spark = spark;\n+    this.newTableName = newTableName;\n+  }\n+\n+  /**\n+   * Create a new Iceberg table in the Iceberg SparkSession catalog based on an\n+   * existing non-iceberg table.\n+   * @param spark the session to use for interacting with Spark\n+   * @param newTableName the string representation of the multipart identifier for new table's name\n+   */\n+  public static CreateActions createIcebergTable(SparkSession spark, String newTableName) {\n+    Identifier identifier = Spark3Util.parseIdentifier(spark, newTableName);\n+    if (identifier.namespace() == null || identifier.namespace().length == 0) {\n+      identifier = Identifier.of(new String[] {spark.catalog().currentDatabase()}, identifier.name());\n+    }\n+    return createIcebergTable(spark, identifier);\n+  }\n+\n+  /**\n+   * Create a new Iceberg table in the Iceberg SparkSession catalog based on an\n+   * existing non-iceberg table.\n+   * @param spark the session to use for interacting with Spark\n+   * @param newTableName the Spark catalog Identifier for new table's name\n+   */\n+  public static CreateActions createIcebergTable(SparkSession spark, Identifier newTableName) {\n+    return new CreateActions(spark, newTableName);\n+  }\n+\n+  /**\n+   * Existing table to be used for creating the Iceberg Table\n+   * @param existingTable the string representation of an existing table\n+   * @return a Spark Action to perform the migration\n+   */\n+  public MigrateAction fromSourceTable(String existingTable) {\n+    Identifier identifier = Spark3Util.parseIdentifier(spark, existingTable);\n+    if (identifier.namespace() == null || identifier.namespace().length == 0) {\n+      identifier = Identifier.of(new String[] {spark.catalog().currentDatabase()}, identifier.name());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a23fa89b2d5a2be61af72836656e4bf3322c9c39"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDI5NzQ4NA==", "bodyText": "Removed this entirely, we now require a Catalog and Identifier to remove any ambiguity here. We parse this pair from the name as a multipart identifier, see new utility methods.", "url": "https://github.com/apache/iceberg/pull/1525#discussion_r504297484", "createdAt": "2020-10-13T22:35:50Z", "author": {"login": "RussellSpitzer"}, "path": "spark3/src/main/java/org/apache/iceberg/spark/CreateActions.java", "diffHunk": "@@ -0,0 +1,79 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.spark;\n+\n+import org.apache.spark.sql.SparkSession;\n+import org.apache.spark.sql.connector.catalog.Identifier;\n+\n+public class CreateActions {\n+  private final Identifier newTableName;\n+  private final SparkSession spark;\n+\n+  private CreateActions(SparkSession spark, Identifier newTableName) {\n+    this.spark = spark;\n+    this.newTableName = newTableName;\n+  }\n+\n+  /**\n+   * Create a new Iceberg table in the Iceberg SparkSession catalog based on an\n+   * existing non-iceberg table.\n+   * @param spark the session to use for interacting with Spark\n+   * @param newTableName the string representation of the multipart identifier for new table's name\n+   */\n+  public static CreateActions createIcebergTable(SparkSession spark, String newTableName) {\n+    Identifier identifier = Spark3Util.parseIdentifier(spark, newTableName);\n+    if (identifier.namespace() == null || identifier.namespace().length == 0) {\n+      identifier = Identifier.of(new String[] {spark.catalog().currentDatabase()}, identifier.name());\n+    }\n+    return createIcebergTable(spark, identifier);\n+  }\n+\n+  /**\n+   * Create a new Iceberg table in the Iceberg SparkSession catalog based on an\n+   * existing non-iceberg table.\n+   * @param spark the session to use for interacting with Spark\n+   * @param newTableName the Spark catalog Identifier for new table's name\n+   */\n+  public static CreateActions createIcebergTable(SparkSession spark, Identifier newTableName) {\n+    return new CreateActions(spark, newTableName);\n+  }\n+\n+  /**\n+   * Existing table to be used for creating the Iceberg Table\n+   * @param existingTable the string representation of an existing table\n+   * @return a Spark Action to perform the migration\n+   */\n+  public MigrateAction fromSourceTable(String existingTable) {\n+    Identifier identifier = Spark3Util.parseIdentifier(spark, existingTable);\n+    if (identifier.namespace() == null || identifier.namespace().length == 0) {\n+      identifier = Identifier.of(new String[] {spark.catalog().currentDatabase()}, identifier.name());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDY3MDU1MA=="}, "originalCommit": {"oid": "a23fa89b2d5a2be61af72836656e4bf3322c9c39"}, "originalPosition": 66}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzNDkxMTA0OnYy", "diffSide": "RIGHT", "path": "spark3/src/test/java/org/apache/iceberg/spark/actions/TestCreateActions.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QwMDozNDoyMlrOHdei_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QyMjozNDo0MlrOHg72JA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDY3MTIyOQ==", "bodyText": "Is it possible to use the default V2SessionCatalog and Iceberg's non-session catalog?", "url": "https://github.com/apache/iceberg/pull/1525#discussion_r500671229", "createdAt": "2020-10-07T00:34:22Z", "author": {"login": "rdblue"}, "path": "spark3/src/test/java/org/apache/iceberg/spark/actions/TestCreateActions.java", "diffHunk": "@@ -0,0 +1,268 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.spark.actions;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.function.Supplier;\n+import org.apache.iceberg.relocated.com.google.common.collect.ImmutableMap;\n+import org.apache.iceberg.relocated.com.google.common.collect.Lists;\n+import org.apache.iceberg.relocated.com.google.common.collect.Maps;\n+import org.apache.iceberg.spark.CreateActions;\n+import org.apache.iceberg.spark.MigrateAction;\n+import org.apache.iceberg.spark.SparkCatalogTestBase;\n+import org.apache.iceberg.spark.SparkSessionCatalog;\n+import org.apache.iceberg.spark.source.SimpleRecord;\n+import org.apache.iceberg.spark.source.SparkTable;\n+import org.apache.spark.sql.Dataset;\n+import org.apache.spark.sql.Row;\n+import org.apache.spark.sql.catalyst.analysis.NoSuchTableException;\n+import org.apache.spark.sql.connector.catalog.Identifier;\n+import org.apache.spark.sql.connector.catalog.TableCatalog;\n+import org.junit.After;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.TemporaryFolder;\n+import org.junit.runners.Parameterized;\n+\n+public class TestCreateActions extends SparkCatalogTestBase {\n+\n+  // Only valid for IcebergV2Catalog\n+  @Parameterized.Parameters\n+  public static Object[][] parameters() {\n+    return new Object[][] {\n+        new Object[] {\"spark_catalog\", SparkSessionCatalog.class.getName(), ImmutableMap.of(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a23fa89b2d5a2be61af72836656e4bf3322c9c39"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDI5Njk5Ng==", "bodyText": "Yes added in test for this, but removed the Hadoop one which I think may not work for either Snapshot or Migrate because of directory requirements. I believe this was passing previously because some of the names were colliding.", "url": "https://github.com/apache/iceberg/pull/1525#discussion_r504296996", "createdAt": "2020-10-13T22:34:42Z", "author": {"login": "RussellSpitzer"}, "path": "spark3/src/test/java/org/apache/iceberg/spark/actions/TestCreateActions.java", "diffHunk": "@@ -0,0 +1,268 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.spark.actions;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.function.Supplier;\n+import org.apache.iceberg.relocated.com.google.common.collect.ImmutableMap;\n+import org.apache.iceberg.relocated.com.google.common.collect.Lists;\n+import org.apache.iceberg.relocated.com.google.common.collect.Maps;\n+import org.apache.iceberg.spark.CreateActions;\n+import org.apache.iceberg.spark.MigrateAction;\n+import org.apache.iceberg.spark.SparkCatalogTestBase;\n+import org.apache.iceberg.spark.SparkSessionCatalog;\n+import org.apache.iceberg.spark.source.SimpleRecord;\n+import org.apache.iceberg.spark.source.SparkTable;\n+import org.apache.spark.sql.Dataset;\n+import org.apache.spark.sql.Row;\n+import org.apache.spark.sql.catalyst.analysis.NoSuchTableException;\n+import org.apache.spark.sql.connector.catalog.Identifier;\n+import org.apache.spark.sql.connector.catalog.TableCatalog;\n+import org.junit.After;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.TemporaryFolder;\n+import org.junit.runners.Parameterized;\n+\n+public class TestCreateActions extends SparkCatalogTestBase {\n+\n+  // Only valid for IcebergV2Catalog\n+  @Parameterized.Parameters\n+  public static Object[][] parameters() {\n+    return new Object[][] {\n+        new Object[] {\"spark_catalog\", SparkSessionCatalog.class.getName(), ImmutableMap.of(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDY3MTIyOQ=="}, "originalCommit": {"oid": "a23fa89b2d5a2be61af72836656e4bf3322c9c39"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzNDkxMjIyOnYy", "diffSide": "RIGHT", "path": "spark3/src/test/java/org/apache/iceberg/spark/actions/TestCreateActions.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QwMDozNDo1N1rOHdejrA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QyMjozNDo1N1rOHg72bA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDY3MTQwNA==", "bodyText": "This doesn't look qualified?", "url": "https://github.com/apache/iceberg/pull/1525#discussion_r500671404", "createdAt": "2020-10-07T00:34:57Z", "author": {"login": "rdblue"}, "path": "spark3/src/test/java/org/apache/iceberg/spark/actions/TestCreateActions.java", "diffHunk": "@@ -0,0 +1,268 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.spark.actions;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.function.Supplier;\n+import org.apache.iceberg.relocated.com.google.common.collect.ImmutableMap;\n+import org.apache.iceberg.relocated.com.google.common.collect.Lists;\n+import org.apache.iceberg.relocated.com.google.common.collect.Maps;\n+import org.apache.iceberg.spark.CreateActions;\n+import org.apache.iceberg.spark.MigrateAction;\n+import org.apache.iceberg.spark.SparkCatalogTestBase;\n+import org.apache.iceberg.spark.SparkSessionCatalog;\n+import org.apache.iceberg.spark.source.SimpleRecord;\n+import org.apache.iceberg.spark.source.SparkTable;\n+import org.apache.spark.sql.Dataset;\n+import org.apache.spark.sql.Row;\n+import org.apache.spark.sql.catalyst.analysis.NoSuchTableException;\n+import org.apache.spark.sql.connector.catalog.Identifier;\n+import org.apache.spark.sql.connector.catalog.TableCatalog;\n+import org.junit.After;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.TemporaryFolder;\n+import org.junit.runners.Parameterized;\n+\n+public class TestCreateActions extends SparkCatalogTestBase {\n+\n+  // Only valid for IcebergV2Catalog\n+  @Parameterized.Parameters\n+  public static Object[][] parameters() {\n+    return new Object[][] {\n+        new Object[] {\"spark_catalog\", SparkSessionCatalog.class.getName(), ImmutableMap.of(\n+            \"type\", \"hive\",\n+            \"default-namespace\", \"default\",\n+            \"parquet-enabled\", \"true\",\n+            \"cache-enabled\", \"false\" // Spark will delete tables using v1, leaving the cache out of sync\n+        )},\n+        new Object[] {\"spark_catalog\", SparkSessionCatalog.class.getName(), ImmutableMap.of(\n+            \"type\", \"hadoop\",\n+            \"default-namespace\", \"default\",\n+            \"parquet-enabled\", \"true\",\n+            \"cache-enabled\", \"false\" // Spark will delete tables using v1, leaving the cache out of sync\n+        )}\n+    };\n+  }\n+\n+  @Rule\n+  public TemporaryFolder temp = new TemporaryFolder();\n+\n+  String qualifiedTableName = \"baseTable\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a23fa89b2d5a2be61af72836656e4bf3322c9c39"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDI5NzA2OA==", "bodyText": "It was once :P, renamed", "url": "https://github.com/apache/iceberg/pull/1525#discussion_r504297068", "createdAt": "2020-10-13T22:34:57Z", "author": {"login": "RussellSpitzer"}, "path": "spark3/src/test/java/org/apache/iceberg/spark/actions/TestCreateActions.java", "diffHunk": "@@ -0,0 +1,268 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.spark.actions;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.function.Supplier;\n+import org.apache.iceberg.relocated.com.google.common.collect.ImmutableMap;\n+import org.apache.iceberg.relocated.com.google.common.collect.Lists;\n+import org.apache.iceberg.relocated.com.google.common.collect.Maps;\n+import org.apache.iceberg.spark.CreateActions;\n+import org.apache.iceberg.spark.MigrateAction;\n+import org.apache.iceberg.spark.SparkCatalogTestBase;\n+import org.apache.iceberg.spark.SparkSessionCatalog;\n+import org.apache.iceberg.spark.source.SimpleRecord;\n+import org.apache.iceberg.spark.source.SparkTable;\n+import org.apache.spark.sql.Dataset;\n+import org.apache.spark.sql.Row;\n+import org.apache.spark.sql.catalyst.analysis.NoSuchTableException;\n+import org.apache.spark.sql.connector.catalog.Identifier;\n+import org.apache.spark.sql.connector.catalog.TableCatalog;\n+import org.junit.After;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.TemporaryFolder;\n+import org.junit.runners.Parameterized;\n+\n+public class TestCreateActions extends SparkCatalogTestBase {\n+\n+  // Only valid for IcebergV2Catalog\n+  @Parameterized.Parameters\n+  public static Object[][] parameters() {\n+    return new Object[][] {\n+        new Object[] {\"spark_catalog\", SparkSessionCatalog.class.getName(), ImmutableMap.of(\n+            \"type\", \"hive\",\n+            \"default-namespace\", \"default\",\n+            \"parquet-enabled\", \"true\",\n+            \"cache-enabled\", \"false\" // Spark will delete tables using v1, leaving the cache out of sync\n+        )},\n+        new Object[] {\"spark_catalog\", SparkSessionCatalog.class.getName(), ImmutableMap.of(\n+            \"type\", \"hadoop\",\n+            \"default-namespace\", \"default\",\n+            \"parquet-enabled\", \"true\",\n+            \"cache-enabled\", \"false\" // Spark will delete tables using v1, leaving the cache out of sync\n+        )}\n+    };\n+  }\n+\n+  @Rule\n+  public TemporaryFolder temp = new TemporaryFolder();\n+\n+  String qualifiedTableName = \"baseTable\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDY3MTQwNA=="}, "originalCommit": {"oid": "a23fa89b2d5a2be61af72836656e4bf3322c9c39"}, "originalPosition": 73}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzNDkyNjM1OnYy", "diffSide": "RIGHT", "path": "spark3/src/main/java/org/apache/iceberg/spark/MigrateAction.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QwMDo0MzoyMFrOHdesEQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxOTo0ODowN1rOHgLHGQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDY3MzU1Mw==", "bodyText": "I think this is referred to as \"snapshot\" in the tests, right? (From the SNAPSHOT TABLE command?)\nAnd the other one is a \"migrate\"?", "url": "https://github.com/apache/iceberg/pull/1525#discussion_r500673553", "createdAt": "2020-10-07T00:43:20Z", "author": {"login": "rdblue"}, "path": "spark3/src/main/java/org/apache/iceberg/spark/MigrateAction.java", "diffHunk": "@@ -0,0 +1,272 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.spark;\n+\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Set;\n+import jline.internal.Log;\n+import org.apache.iceberg.PartitionSpec;\n+import org.apache.iceberg.Snapshot;\n+import org.apache.iceberg.SnapshotSummary;\n+import org.apache.iceberg.Table;\n+import org.apache.iceberg.TableProperties;\n+import org.apache.iceberg.actions.Action;\n+import org.apache.iceberg.actions.ExpireSnapshotsAction;\n+import org.apache.iceberg.relocated.com.google.common.collect.ImmutableMap;\n+import org.apache.iceberg.relocated.com.google.common.collect.ImmutableSet;\n+import org.apache.iceberg.relocated.com.google.common.collect.Maps;\n+import org.apache.iceberg.spark.source.SparkTable;\n+import org.apache.spark.sql.AnalysisException;\n+import org.apache.spark.sql.SparkSession;\n+import org.apache.spark.sql.catalyst.analysis.NoSuchDatabaseException;\n+import org.apache.spark.sql.catalyst.analysis.NoSuchNamespaceException;\n+import org.apache.spark.sql.catalyst.analysis.NoSuchTableException;\n+import org.apache.spark.sql.catalyst.analysis.TableAlreadyExistsException;\n+import org.apache.spark.sql.catalyst.catalog.CatalogTable;\n+import org.apache.spark.sql.catalyst.catalog.CatalogUtils;\n+import org.apache.spark.sql.connector.catalog.CatalogManager;\n+import org.apache.spark.sql.connector.catalog.CatalogPlugin;\n+import org.apache.spark.sql.connector.catalog.Identifier;\n+import org.apache.spark.sql.connector.catalog.StagedTable;\n+import org.apache.spark.sql.connector.catalog.TableCatalog;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import scala.collection.JavaConverters;\n+\n+/**\n+ * This action will migrate a known table in a Spark Catalog that is not an Iceberg table into an Iceberg table.\n+ * The created new table will be able to interact with and modify files in the original table.\n+ *\n+ * There are two main code paths\n+ *   - Creating a brand new iceberg table or replacing an existing Iceberg table\n+ *   This pathway will use a staged table to stage the creation or replacement, only committing after\n+ *   import has succeeded.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a23fa89b2d5a2be61af72836656e4bf3322c9c39"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDY3NDMyOA==", "bodyText": "How does the user know which one is going to happen? Table names are passed into all of the methods in CreateActions.", "url": "https://github.com/apache/iceberg/pull/1525#discussion_r500674328", "createdAt": "2020-10-07T00:46:10Z", "author": {"login": "rdblue"}, "path": "spark3/src/main/java/org/apache/iceberg/spark/MigrateAction.java", "diffHunk": "@@ -0,0 +1,272 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.spark;\n+\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Set;\n+import jline.internal.Log;\n+import org.apache.iceberg.PartitionSpec;\n+import org.apache.iceberg.Snapshot;\n+import org.apache.iceberg.SnapshotSummary;\n+import org.apache.iceberg.Table;\n+import org.apache.iceberg.TableProperties;\n+import org.apache.iceberg.actions.Action;\n+import org.apache.iceberg.actions.ExpireSnapshotsAction;\n+import org.apache.iceberg.relocated.com.google.common.collect.ImmutableMap;\n+import org.apache.iceberg.relocated.com.google.common.collect.ImmutableSet;\n+import org.apache.iceberg.relocated.com.google.common.collect.Maps;\n+import org.apache.iceberg.spark.source.SparkTable;\n+import org.apache.spark.sql.AnalysisException;\n+import org.apache.spark.sql.SparkSession;\n+import org.apache.spark.sql.catalyst.analysis.NoSuchDatabaseException;\n+import org.apache.spark.sql.catalyst.analysis.NoSuchNamespaceException;\n+import org.apache.spark.sql.catalyst.analysis.NoSuchTableException;\n+import org.apache.spark.sql.catalyst.analysis.TableAlreadyExistsException;\n+import org.apache.spark.sql.catalyst.catalog.CatalogTable;\n+import org.apache.spark.sql.catalyst.catalog.CatalogUtils;\n+import org.apache.spark.sql.connector.catalog.CatalogManager;\n+import org.apache.spark.sql.connector.catalog.CatalogPlugin;\n+import org.apache.spark.sql.connector.catalog.Identifier;\n+import org.apache.spark.sql.connector.catalog.StagedTable;\n+import org.apache.spark.sql.connector.catalog.TableCatalog;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import scala.collection.JavaConverters;\n+\n+/**\n+ * This action will migrate a known table in a Spark Catalog that is not an Iceberg table into an Iceberg table.\n+ * The created new table will be able to interact with and modify files in the original table.\n+ *\n+ * There are two main code paths\n+ *   - Creating a brand new iceberg table or replacing an existing Iceberg table\n+ *   This pathway will use a staged table to stage the creation or replacement, only committing after\n+ *   import has succeeded.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDY3MzU1Mw=="}, "originalCommit": {"oid": "a23fa89b2d5a2be61af72836656e4bf3322c9c39"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQ5ODUyMQ==", "bodyText": "Changed up the api to be much more explicit about what is happening.", "url": "https://github.com/apache/iceberg/pull/1525#discussion_r503498521", "createdAt": "2020-10-12T19:48:07Z", "author": {"login": "RussellSpitzer"}, "path": "spark3/src/main/java/org/apache/iceberg/spark/MigrateAction.java", "diffHunk": "@@ -0,0 +1,272 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.spark;\n+\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Set;\n+import jline.internal.Log;\n+import org.apache.iceberg.PartitionSpec;\n+import org.apache.iceberg.Snapshot;\n+import org.apache.iceberg.SnapshotSummary;\n+import org.apache.iceberg.Table;\n+import org.apache.iceberg.TableProperties;\n+import org.apache.iceberg.actions.Action;\n+import org.apache.iceberg.actions.ExpireSnapshotsAction;\n+import org.apache.iceberg.relocated.com.google.common.collect.ImmutableMap;\n+import org.apache.iceberg.relocated.com.google.common.collect.ImmutableSet;\n+import org.apache.iceberg.relocated.com.google.common.collect.Maps;\n+import org.apache.iceberg.spark.source.SparkTable;\n+import org.apache.spark.sql.AnalysisException;\n+import org.apache.spark.sql.SparkSession;\n+import org.apache.spark.sql.catalyst.analysis.NoSuchDatabaseException;\n+import org.apache.spark.sql.catalyst.analysis.NoSuchNamespaceException;\n+import org.apache.spark.sql.catalyst.analysis.NoSuchTableException;\n+import org.apache.spark.sql.catalyst.analysis.TableAlreadyExistsException;\n+import org.apache.spark.sql.catalyst.catalog.CatalogTable;\n+import org.apache.spark.sql.catalyst.catalog.CatalogUtils;\n+import org.apache.spark.sql.connector.catalog.CatalogManager;\n+import org.apache.spark.sql.connector.catalog.CatalogPlugin;\n+import org.apache.spark.sql.connector.catalog.Identifier;\n+import org.apache.spark.sql.connector.catalog.StagedTable;\n+import org.apache.spark.sql.connector.catalog.TableCatalog;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import scala.collection.JavaConverters;\n+\n+/**\n+ * This action will migrate a known table in a Spark Catalog that is not an Iceberg table into an Iceberg table.\n+ * The created new table will be able to interact with and modify files in the original table.\n+ *\n+ * There are two main code paths\n+ *   - Creating a brand new iceberg table or replacing an existing Iceberg table\n+ *   This pathway will use a staged table to stage the creation or replacement, only committing after\n+ *   import has succeeded.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDY3MzU1Mw=="}, "originalCommit": {"oid": "a23fa89b2d5a2be61af72836656e4bf3322c9c39"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzNDkyODE0OnYy", "diffSide": "RIGHT", "path": "spark3/src/main/java/org/apache/iceberg/spark/MigrateAction.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QwMDo0NDoyNlrOHdetKg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QwMDo0NDoyNlrOHdetKg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDY3MzgzNA==", "bodyText": "We normally put constructors before public methods. Minor, but this was harder to find than needed.", "url": "https://github.com/apache/iceberg/pull/1525#discussion_r500673834", "createdAt": "2020-10-07T00:44:26Z", "author": {"login": "rdblue"}, "path": "spark3/src/main/java/org/apache/iceberg/spark/MigrateAction.java", "diffHunk": "@@ -0,0 +1,272 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.spark;\n+\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Set;\n+import jline.internal.Log;\n+import org.apache.iceberg.PartitionSpec;\n+import org.apache.iceberg.Snapshot;\n+import org.apache.iceberg.SnapshotSummary;\n+import org.apache.iceberg.Table;\n+import org.apache.iceberg.TableProperties;\n+import org.apache.iceberg.actions.Action;\n+import org.apache.iceberg.actions.ExpireSnapshotsAction;\n+import org.apache.iceberg.relocated.com.google.common.collect.ImmutableMap;\n+import org.apache.iceberg.relocated.com.google.common.collect.ImmutableSet;\n+import org.apache.iceberg.relocated.com.google.common.collect.Maps;\n+import org.apache.iceberg.spark.source.SparkTable;\n+import org.apache.spark.sql.AnalysisException;\n+import org.apache.spark.sql.SparkSession;\n+import org.apache.spark.sql.catalyst.analysis.NoSuchDatabaseException;\n+import org.apache.spark.sql.catalyst.analysis.NoSuchNamespaceException;\n+import org.apache.spark.sql.catalyst.analysis.NoSuchTableException;\n+import org.apache.spark.sql.catalyst.analysis.TableAlreadyExistsException;\n+import org.apache.spark.sql.catalyst.catalog.CatalogTable;\n+import org.apache.spark.sql.catalyst.catalog.CatalogUtils;\n+import org.apache.spark.sql.connector.catalog.CatalogManager;\n+import org.apache.spark.sql.connector.catalog.CatalogPlugin;\n+import org.apache.spark.sql.connector.catalog.Identifier;\n+import org.apache.spark.sql.connector.catalog.StagedTable;\n+import org.apache.spark.sql.connector.catalog.TableCatalog;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import scala.collection.JavaConverters;\n+\n+/**\n+ * This action will migrate a known table in a Spark Catalog that is not an Iceberg table into an Iceberg table.\n+ * The created new table will be able to interact with and modify files in the original table.\n+ *\n+ * There are two main code paths\n+ *   - Creating a brand new iceberg table or replacing an existing Iceberg table\n+ *   This pathway will use a staged table to stage the creation or replacement, only committing after\n+ *   import has succeeded.\n+ *\n+ *   - Replacing a table in the Session Catalog with an Iceberg Table with the same name\n+ *   This pathway will create a temporary table with a different name. This replacement table will\n+ *   be committed upon a successful import. Then the original session catalog entry will be dropped\n+ *   and the new replacement table renamed to take its place.\n+ */\n+public class MigrateAction implements Action<Long> {\n+  private static final Logger LOG = LoggerFactory.getLogger(ExpireSnapshotsAction.class);\n+  private static final Set<String> ALLOWED_SOURCES = ImmutableSet.of(\"parquet\", \"avro\", \"orc\", \"hive\");\n+  private static final String ICEBERG_METADATA_FOLDER = \"metadata\";\n+  private static final String REPLACEMENT_NAME = \"_REPLACEMENT_\";\n+\n+\n+  private final SparkSession spark;\n+\n+  // Source Fields\n+  private final CatalogTable sourceTable;\n+  private final String sourceTableLocation;\n+  private final Identifier sourceTableName;\n+  private final PartitionSpec sourcePartitionSpec;\n+\n+  // Destination Fields\n+  private final Boolean sessionCatalogReplacement;\n+  private final SparkSessionCatalog destCatalog;\n+  private final Identifier destTableName;\n+\n+  // Optional Parameters for destination\n+  private String destDataLocation;\n+  private String destMetadataLocation;\n+  private Map<String, String> additionalProperties = Maps.newHashMap();\n+\n+  /**\n+   * Creates an Iceberg Location at a given location instead of using the location\n+   * provided by the source table. New metadata and data files will be added to this\n+   * new location and further operations will not effect the source table.\n+   *\n+   * Use this if you would like to experiment with Iceberg without changing\n+   * your original files.\n+   * @param newLocation the base directory for the new Iceberg Table\n+   * @return this for chaining\n+   */\n+  public MigrateAction withNewTableLocation(String newLocation) {\n+    this.destDataLocation = newLocation;\n+    this.destMetadataLocation = newLocation + \"/\" + ICEBERG_METADATA_FOLDER;\n+    return this;\n+  }\n+\n+  /**\n+   * Adds additional properties to the newly created Iceberg Table. Any properties with\n+   * the same key name will be overwritten.\n+   * @param properties a map of properties to be included\n+   * @return this for chaining\n+   */\n+  public MigrateAction withAdditionalProperties(Map<String, String> properties) {\n+    this.additionalProperties.putAll(properties);\n+    return this;\n+  }\n+\n+  /**\n+   * Adds an additional property to the newly created Iceberg Table. Any properties\n+   * with the same key name will be overwritten.\n+   * @param key the key of the property to add\n+   * @param value the value of the property to add\n+   */\n+  public MigrateAction withAdditionalProperty(String key, String value) {\n+    this.additionalProperties.put(key, value);\n+    return this;\n+  }\n+\n+  public MigrateAction(SparkSession spark, Identifier destTableName, Identifier sourceTableName) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a23fa89b2d5a2be61af72836656e4bf3322c9c39"}, "originalPosition": 131}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzNDkzOTU4OnYy", "diffSide": "RIGHT", "path": "spark3/src/main/java/org/apache/iceberg/spark/CreateActions.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QwMDo1MDo0N1rOHdezpw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxOTo0MTo0N1rOHgK9lg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDY3NTQ5NQ==", "bodyText": "I'm finding it hard to follow when this would migrate a table vs snapshot a table, and it also requires a separate class.\nDid you consider an API using verbs directly? I'm imagining something like this:\nActions.migrate(\"db.table\").execute();\nActions.snapshot(\"db.table\").as(\"db.table_iceberg\").execute();\n\n// maybe even create like?\nActions.createTable(\"db.table\").like(\"db.table_hive\").execute()\nWe could add methods as well, but those verbs correspond to the SQL that we expose and we haven't needed anything more complicated than that.", "url": "https://github.com/apache/iceberg/pull/1525#discussion_r500675495", "createdAt": "2020-10-07T00:50:47Z", "author": {"login": "rdblue"}, "path": "spark3/src/main/java/org/apache/iceberg/spark/CreateActions.java", "diffHunk": "@@ -0,0 +1,79 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.spark;\n+\n+import org.apache.spark.sql.SparkSession;\n+import org.apache.spark.sql.connector.catalog.Identifier;\n+\n+public class CreateActions {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a23fa89b2d5a2be61af72836656e4bf3322c9c39"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzM2Mjk2NA==", "bodyText": "If we wanted the most limited api I think we want\nMigrate - Takes one arg (identifier)\nSnapshot - Takes two args (identifier source, identifier dest, location)\nI'm a little worried about having a \"snapshot\" verb with  \"as\" since I feel like it also requires an \"at\" for a location and then I have to do a runtime check to make sure they are both used unless I make a series of chaining classes.\nSnapshotStart ---  .as(identifier) -->  SnapshotWithDest --- at(location) --> CreateAction\nAlthough I'm ok with that too, that's probably more complicated for us, but more difficult for an end user to use incorrectly or get an unexpected result from.\nThis would be the minimal setup then, I'm not sure what createTable like would do?", "url": "https://github.com/apache/iceberg/pull/1525#discussion_r503362964", "createdAt": "2020-10-12T15:12:40Z", "author": {"login": "RussellSpitzer"}, "path": "spark3/src/main/java/org/apache/iceberg/spark/CreateActions.java", "diffHunk": "@@ -0,0 +1,79 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.spark;\n+\n+import org.apache.spark.sql.SparkSession;\n+import org.apache.spark.sql.connector.catalog.Identifier;\n+\n+public class CreateActions {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDY3NTQ5NQ=="}, "originalCommit": {"oid": "a23fa89b2d5a2be61af72836656e4bf3322c9c39"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQ5NjA4Ng==", "bodyText": "I took a more locked down approach to this for the mean time. We only expose a\nActions.migrate\nActions.snapshot\nTo the public, this class instead becomes package protected with a few public methods,\nThose inherited from Action\nwithProperty/ies : for adding table properties\nas : for changing the destination", "url": "https://github.com/apache/iceberg/pull/1525#discussion_r503496086", "createdAt": "2020-10-12T19:41:47Z", "author": {"login": "RussellSpitzer"}, "path": "spark3/src/main/java/org/apache/iceberg/spark/CreateActions.java", "diffHunk": "@@ -0,0 +1,79 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.spark;\n+\n+import org.apache.spark.sql.SparkSession;\n+import org.apache.spark.sql.connector.catalog.Identifier;\n+\n+public class CreateActions {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDY3NTQ5NQ=="}, "originalCommit": {"oid": "a23fa89b2d5a2be61af72836656e4bf3322c9c39"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzNDk0NTMxOnYy", "diffSide": "RIGHT", "path": "spark3/src/main/java/org/apache/iceberg/spark/MigrateAction.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QwMDo1NDoxN1rOHde3Dg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQyMjoxOTo0MlrOHgPBNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDY3NjM2Ng==", "bodyText": "Does this mean that only Spark tables are supported and not Hive tables? I don't think that Hive tables have providers.", "url": "https://github.com/apache/iceberg/pull/1525#discussion_r500676366", "createdAt": "2020-10-07T00:54:17Z", "author": {"login": "rdblue"}, "path": "spark3/src/main/java/org/apache/iceberg/spark/MigrateAction.java", "diffHunk": "@@ -0,0 +1,272 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.spark;\n+\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Set;\n+import jline.internal.Log;\n+import org.apache.iceberg.PartitionSpec;\n+import org.apache.iceberg.Snapshot;\n+import org.apache.iceberg.SnapshotSummary;\n+import org.apache.iceberg.Table;\n+import org.apache.iceberg.TableProperties;\n+import org.apache.iceberg.actions.Action;\n+import org.apache.iceberg.actions.ExpireSnapshotsAction;\n+import org.apache.iceberg.relocated.com.google.common.collect.ImmutableMap;\n+import org.apache.iceberg.relocated.com.google.common.collect.ImmutableSet;\n+import org.apache.iceberg.relocated.com.google.common.collect.Maps;\n+import org.apache.iceberg.spark.source.SparkTable;\n+import org.apache.spark.sql.AnalysisException;\n+import org.apache.spark.sql.SparkSession;\n+import org.apache.spark.sql.catalyst.analysis.NoSuchDatabaseException;\n+import org.apache.spark.sql.catalyst.analysis.NoSuchNamespaceException;\n+import org.apache.spark.sql.catalyst.analysis.NoSuchTableException;\n+import org.apache.spark.sql.catalyst.analysis.TableAlreadyExistsException;\n+import org.apache.spark.sql.catalyst.catalog.CatalogTable;\n+import org.apache.spark.sql.catalyst.catalog.CatalogUtils;\n+import org.apache.spark.sql.connector.catalog.CatalogManager;\n+import org.apache.spark.sql.connector.catalog.CatalogPlugin;\n+import org.apache.spark.sql.connector.catalog.Identifier;\n+import org.apache.spark.sql.connector.catalog.StagedTable;\n+import org.apache.spark.sql.connector.catalog.TableCatalog;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import scala.collection.JavaConverters;\n+\n+/**\n+ * This action will migrate a known table in a Spark Catalog that is not an Iceberg table into an Iceberg table.\n+ * The created new table will be able to interact with and modify files in the original table.\n+ *\n+ * There are two main code paths\n+ *   - Creating a brand new iceberg table or replacing an existing Iceberg table\n+ *   This pathway will use a staged table to stage the creation or replacement, only committing after\n+ *   import has succeeded.\n+ *\n+ *   - Replacing a table in the Session Catalog with an Iceberg Table with the same name\n+ *   This pathway will create a temporary table with a different name. This replacement table will\n+ *   be committed upon a successful import. Then the original session catalog entry will be dropped\n+ *   and the new replacement table renamed to take its place.\n+ */\n+public class MigrateAction implements Action<Long> {\n+  private static final Logger LOG = LoggerFactory.getLogger(ExpireSnapshotsAction.class);\n+  private static final Set<String> ALLOWED_SOURCES = ImmutableSet.of(\"parquet\", \"avro\", \"orc\", \"hive\");\n+  private static final String ICEBERG_METADATA_FOLDER = \"metadata\";\n+  private static final String REPLACEMENT_NAME = \"_REPLACEMENT_\";\n+\n+\n+  private final SparkSession spark;\n+\n+  // Source Fields\n+  private final CatalogTable sourceTable;\n+  private final String sourceTableLocation;\n+  private final Identifier sourceTableName;\n+  private final PartitionSpec sourcePartitionSpec;\n+\n+  // Destination Fields\n+  private final Boolean sessionCatalogReplacement;\n+  private final SparkSessionCatalog destCatalog;\n+  private final Identifier destTableName;\n+\n+  // Optional Parameters for destination\n+  private String destDataLocation;\n+  private String destMetadataLocation;\n+  private Map<String, String> additionalProperties = Maps.newHashMap();\n+\n+  /**\n+   * Creates an Iceberg Location at a given location instead of using the location\n+   * provided by the source table. New metadata and data files will be added to this\n+   * new location and further operations will not effect the source table.\n+   *\n+   * Use this if you would like to experiment with Iceberg without changing\n+   * your original files.\n+   * @param newLocation the base directory for the new Iceberg Table\n+   * @return this for chaining\n+   */\n+  public MigrateAction withNewTableLocation(String newLocation) {\n+    this.destDataLocation = newLocation;\n+    this.destMetadataLocation = newLocation + \"/\" + ICEBERG_METADATA_FOLDER;\n+    return this;\n+  }\n+\n+  /**\n+   * Adds additional properties to the newly created Iceberg Table. Any properties with\n+   * the same key name will be overwritten.\n+   * @param properties a map of properties to be included\n+   * @return this for chaining\n+   */\n+  public MigrateAction withAdditionalProperties(Map<String, String> properties) {\n+    this.additionalProperties.putAll(properties);\n+    return this;\n+  }\n+\n+  /**\n+   * Adds an additional property to the newly created Iceberg Table. Any properties\n+   * with the same key name will be overwritten.\n+   * @param key the key of the property to add\n+   * @param value the value of the property to add\n+   */\n+  public MigrateAction withAdditionalProperty(String key, String value) {\n+    this.additionalProperties.put(key, value);\n+    return this;\n+  }\n+\n+  public MigrateAction(SparkSession spark, Identifier destTableName, Identifier sourceTableName) {\n+    this.spark = spark;\n+    this.sourceTableName = sourceTableName;\n+    this.destTableName = destTableName;\n+    this.destCatalog = getSparkSessionCatalogOrFail(spark, destTableName);\n+\n+    try {\n+      sourcePartitionSpec = SparkSchemaUtil.specForTable(spark, Spark3Util.toTableIdentifier(sourceTableName));\n+    } catch (AnalysisException e) {\n+      throw new IllegalArgumentException(\"Cannot determining partitioning of \" + sourceTableName.toString(), e);\n+    }\n+\n+    try {\n+      this.sourceTable =\n+        spark.sessionState().catalog().getTableMetadata(Spark3Util.toTableIdentifier(sourceTableName));\n+    } catch (NoSuchTableException | NoSuchDatabaseException e) {\n+      throw new IllegalArgumentException(String.format(\"Could not find source table %s\", sourceTableName), e);\n+    }\n+    validateSourceTable(sourceTable, ALLOWED_SOURCES);\n+\n+    String sourceTableProvider = sourceTable.provider().get().toLowerCase(Locale.ROOT);\n+    this.sessionCatalogReplacement = !sourceTableProvider.equals(\"iceberg\") && sourceTableName.equals(destTableName);\n+\n+    this.sourceTableLocation = CatalogUtils.URIToString(sourceTable.storage().locationUri().get());\n+    this.destDataLocation = sourceTableLocation;\n+    this.destMetadataLocation = sourceTableLocation + \"/\" + ICEBERG_METADATA_FOLDER;\n+  }\n+\n+  private static void validateSourceTable(CatalogTable sourceTable, Set<String> supportedSourceTableProviders) {\n+    String sourceTableProvider = sourceTable.provider().get().toLowerCase(Locale.ROOT);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a23fa89b2d5a2be61af72836656e4bf3322c9c39"}, "originalPosition": 160}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzUwNjA1NA==", "bodyText": "Added in a Hive test (at least I think so, used CREATE EXTERNAL TABLE LOCATION ....) which I though triggered the hive path, works for this.", "url": "https://github.com/apache/iceberg/pull/1525#discussion_r503506054", "createdAt": "2020-10-12T20:01:52Z", "author": {"login": "RussellSpitzer"}, "path": "spark3/src/main/java/org/apache/iceberg/spark/MigrateAction.java", "diffHunk": "@@ -0,0 +1,272 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.spark;\n+\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Set;\n+import jline.internal.Log;\n+import org.apache.iceberg.PartitionSpec;\n+import org.apache.iceberg.Snapshot;\n+import org.apache.iceberg.SnapshotSummary;\n+import org.apache.iceberg.Table;\n+import org.apache.iceberg.TableProperties;\n+import org.apache.iceberg.actions.Action;\n+import org.apache.iceberg.actions.ExpireSnapshotsAction;\n+import org.apache.iceberg.relocated.com.google.common.collect.ImmutableMap;\n+import org.apache.iceberg.relocated.com.google.common.collect.ImmutableSet;\n+import org.apache.iceberg.relocated.com.google.common.collect.Maps;\n+import org.apache.iceberg.spark.source.SparkTable;\n+import org.apache.spark.sql.AnalysisException;\n+import org.apache.spark.sql.SparkSession;\n+import org.apache.spark.sql.catalyst.analysis.NoSuchDatabaseException;\n+import org.apache.spark.sql.catalyst.analysis.NoSuchNamespaceException;\n+import org.apache.spark.sql.catalyst.analysis.NoSuchTableException;\n+import org.apache.spark.sql.catalyst.analysis.TableAlreadyExistsException;\n+import org.apache.spark.sql.catalyst.catalog.CatalogTable;\n+import org.apache.spark.sql.catalyst.catalog.CatalogUtils;\n+import org.apache.spark.sql.connector.catalog.CatalogManager;\n+import org.apache.spark.sql.connector.catalog.CatalogPlugin;\n+import org.apache.spark.sql.connector.catalog.Identifier;\n+import org.apache.spark.sql.connector.catalog.StagedTable;\n+import org.apache.spark.sql.connector.catalog.TableCatalog;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import scala.collection.JavaConverters;\n+\n+/**\n+ * This action will migrate a known table in a Spark Catalog that is not an Iceberg table into an Iceberg table.\n+ * The created new table will be able to interact with and modify files in the original table.\n+ *\n+ * There are two main code paths\n+ *   - Creating a brand new iceberg table or replacing an existing Iceberg table\n+ *   This pathway will use a staged table to stage the creation or replacement, only committing after\n+ *   import has succeeded.\n+ *\n+ *   - Replacing a table in the Session Catalog with an Iceberg Table with the same name\n+ *   This pathway will create a temporary table with a different name. This replacement table will\n+ *   be committed upon a successful import. Then the original session catalog entry will be dropped\n+ *   and the new replacement table renamed to take its place.\n+ */\n+public class MigrateAction implements Action<Long> {\n+  private static final Logger LOG = LoggerFactory.getLogger(ExpireSnapshotsAction.class);\n+  private static final Set<String> ALLOWED_SOURCES = ImmutableSet.of(\"parquet\", \"avro\", \"orc\", \"hive\");\n+  private static final String ICEBERG_METADATA_FOLDER = \"metadata\";\n+  private static final String REPLACEMENT_NAME = \"_REPLACEMENT_\";\n+\n+\n+  private final SparkSession spark;\n+\n+  // Source Fields\n+  private final CatalogTable sourceTable;\n+  private final String sourceTableLocation;\n+  private final Identifier sourceTableName;\n+  private final PartitionSpec sourcePartitionSpec;\n+\n+  // Destination Fields\n+  private final Boolean sessionCatalogReplacement;\n+  private final SparkSessionCatalog destCatalog;\n+  private final Identifier destTableName;\n+\n+  // Optional Parameters for destination\n+  private String destDataLocation;\n+  private String destMetadataLocation;\n+  private Map<String, String> additionalProperties = Maps.newHashMap();\n+\n+  /**\n+   * Creates an Iceberg Location at a given location instead of using the location\n+   * provided by the source table. New metadata and data files will be added to this\n+   * new location and further operations will not effect the source table.\n+   *\n+   * Use this if you would like to experiment with Iceberg without changing\n+   * your original files.\n+   * @param newLocation the base directory for the new Iceberg Table\n+   * @return this for chaining\n+   */\n+  public MigrateAction withNewTableLocation(String newLocation) {\n+    this.destDataLocation = newLocation;\n+    this.destMetadataLocation = newLocation + \"/\" + ICEBERG_METADATA_FOLDER;\n+    return this;\n+  }\n+\n+  /**\n+   * Adds additional properties to the newly created Iceberg Table. Any properties with\n+   * the same key name will be overwritten.\n+   * @param properties a map of properties to be included\n+   * @return this for chaining\n+   */\n+  public MigrateAction withAdditionalProperties(Map<String, String> properties) {\n+    this.additionalProperties.putAll(properties);\n+    return this;\n+  }\n+\n+  /**\n+   * Adds an additional property to the newly created Iceberg Table. Any properties\n+   * with the same key name will be overwritten.\n+   * @param key the key of the property to add\n+   * @param value the value of the property to add\n+   */\n+  public MigrateAction withAdditionalProperty(String key, String value) {\n+    this.additionalProperties.put(key, value);\n+    return this;\n+  }\n+\n+  public MigrateAction(SparkSession spark, Identifier destTableName, Identifier sourceTableName) {\n+    this.spark = spark;\n+    this.sourceTableName = sourceTableName;\n+    this.destTableName = destTableName;\n+    this.destCatalog = getSparkSessionCatalogOrFail(spark, destTableName);\n+\n+    try {\n+      sourcePartitionSpec = SparkSchemaUtil.specForTable(spark, Spark3Util.toTableIdentifier(sourceTableName));\n+    } catch (AnalysisException e) {\n+      throw new IllegalArgumentException(\"Cannot determining partitioning of \" + sourceTableName.toString(), e);\n+    }\n+\n+    try {\n+      this.sourceTable =\n+        spark.sessionState().catalog().getTableMetadata(Spark3Util.toTableIdentifier(sourceTableName));\n+    } catch (NoSuchTableException | NoSuchDatabaseException e) {\n+      throw new IllegalArgumentException(String.format(\"Could not find source table %s\", sourceTableName), e);\n+    }\n+    validateSourceTable(sourceTable, ALLOWED_SOURCES);\n+\n+    String sourceTableProvider = sourceTable.provider().get().toLowerCase(Locale.ROOT);\n+    this.sessionCatalogReplacement = !sourceTableProvider.equals(\"iceberg\") && sourceTableName.equals(destTableName);\n+\n+    this.sourceTableLocation = CatalogUtils.URIToString(sourceTable.storage().locationUri().get());\n+    this.destDataLocation = sourceTableLocation;\n+    this.destMetadataLocation = sourceTableLocation + \"/\" + ICEBERG_METADATA_FOLDER;\n+  }\n+\n+  private static void validateSourceTable(CatalogTable sourceTable, Set<String> supportedSourceTableProviders) {\n+    String sourceTableProvider = sourceTable.provider().get().toLowerCase(Locale.ROOT);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDY3NjM2Ng=="}, "originalCommit": {"oid": "a23fa89b2d5a2be61af72836656e4bf3322c9c39"}, "originalPosition": 160}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzU2MjU1MQ==", "bodyText": "The provider for hive tables is \"hive\", doublechecked", "url": "https://github.com/apache/iceberg/pull/1525#discussion_r503562551", "createdAt": "2020-10-12T22:19:42Z", "author": {"login": "RussellSpitzer"}, "path": "spark3/src/main/java/org/apache/iceberg/spark/MigrateAction.java", "diffHunk": "@@ -0,0 +1,272 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.spark;\n+\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Set;\n+import jline.internal.Log;\n+import org.apache.iceberg.PartitionSpec;\n+import org.apache.iceberg.Snapshot;\n+import org.apache.iceberg.SnapshotSummary;\n+import org.apache.iceberg.Table;\n+import org.apache.iceberg.TableProperties;\n+import org.apache.iceberg.actions.Action;\n+import org.apache.iceberg.actions.ExpireSnapshotsAction;\n+import org.apache.iceberg.relocated.com.google.common.collect.ImmutableMap;\n+import org.apache.iceberg.relocated.com.google.common.collect.ImmutableSet;\n+import org.apache.iceberg.relocated.com.google.common.collect.Maps;\n+import org.apache.iceberg.spark.source.SparkTable;\n+import org.apache.spark.sql.AnalysisException;\n+import org.apache.spark.sql.SparkSession;\n+import org.apache.spark.sql.catalyst.analysis.NoSuchDatabaseException;\n+import org.apache.spark.sql.catalyst.analysis.NoSuchNamespaceException;\n+import org.apache.spark.sql.catalyst.analysis.NoSuchTableException;\n+import org.apache.spark.sql.catalyst.analysis.TableAlreadyExistsException;\n+import org.apache.spark.sql.catalyst.catalog.CatalogTable;\n+import org.apache.spark.sql.catalyst.catalog.CatalogUtils;\n+import org.apache.spark.sql.connector.catalog.CatalogManager;\n+import org.apache.spark.sql.connector.catalog.CatalogPlugin;\n+import org.apache.spark.sql.connector.catalog.Identifier;\n+import org.apache.spark.sql.connector.catalog.StagedTable;\n+import org.apache.spark.sql.connector.catalog.TableCatalog;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import scala.collection.JavaConverters;\n+\n+/**\n+ * This action will migrate a known table in a Spark Catalog that is not an Iceberg table into an Iceberg table.\n+ * The created new table will be able to interact with and modify files in the original table.\n+ *\n+ * There are two main code paths\n+ *   - Creating a brand new iceberg table or replacing an existing Iceberg table\n+ *   This pathway will use a staged table to stage the creation or replacement, only committing after\n+ *   import has succeeded.\n+ *\n+ *   - Replacing a table in the Session Catalog with an Iceberg Table with the same name\n+ *   This pathway will create a temporary table with a different name. This replacement table will\n+ *   be committed upon a successful import. Then the original session catalog entry will be dropped\n+ *   and the new replacement table renamed to take its place.\n+ */\n+public class MigrateAction implements Action<Long> {\n+  private static final Logger LOG = LoggerFactory.getLogger(ExpireSnapshotsAction.class);\n+  private static final Set<String> ALLOWED_SOURCES = ImmutableSet.of(\"parquet\", \"avro\", \"orc\", \"hive\");\n+  private static final String ICEBERG_METADATA_FOLDER = \"metadata\";\n+  private static final String REPLACEMENT_NAME = \"_REPLACEMENT_\";\n+\n+\n+  private final SparkSession spark;\n+\n+  // Source Fields\n+  private final CatalogTable sourceTable;\n+  private final String sourceTableLocation;\n+  private final Identifier sourceTableName;\n+  private final PartitionSpec sourcePartitionSpec;\n+\n+  // Destination Fields\n+  private final Boolean sessionCatalogReplacement;\n+  private final SparkSessionCatalog destCatalog;\n+  private final Identifier destTableName;\n+\n+  // Optional Parameters for destination\n+  private String destDataLocation;\n+  private String destMetadataLocation;\n+  private Map<String, String> additionalProperties = Maps.newHashMap();\n+\n+  /**\n+   * Creates an Iceberg Location at a given location instead of using the location\n+   * provided by the source table. New metadata and data files will be added to this\n+   * new location and further operations will not effect the source table.\n+   *\n+   * Use this if you would like to experiment with Iceberg without changing\n+   * your original files.\n+   * @param newLocation the base directory for the new Iceberg Table\n+   * @return this for chaining\n+   */\n+  public MigrateAction withNewTableLocation(String newLocation) {\n+    this.destDataLocation = newLocation;\n+    this.destMetadataLocation = newLocation + \"/\" + ICEBERG_METADATA_FOLDER;\n+    return this;\n+  }\n+\n+  /**\n+   * Adds additional properties to the newly created Iceberg Table. Any properties with\n+   * the same key name will be overwritten.\n+   * @param properties a map of properties to be included\n+   * @return this for chaining\n+   */\n+  public MigrateAction withAdditionalProperties(Map<String, String> properties) {\n+    this.additionalProperties.putAll(properties);\n+    return this;\n+  }\n+\n+  /**\n+   * Adds an additional property to the newly created Iceberg Table. Any properties\n+   * with the same key name will be overwritten.\n+   * @param key the key of the property to add\n+   * @param value the value of the property to add\n+   */\n+  public MigrateAction withAdditionalProperty(String key, String value) {\n+    this.additionalProperties.put(key, value);\n+    return this;\n+  }\n+\n+  public MigrateAction(SparkSession spark, Identifier destTableName, Identifier sourceTableName) {\n+    this.spark = spark;\n+    this.sourceTableName = sourceTableName;\n+    this.destTableName = destTableName;\n+    this.destCatalog = getSparkSessionCatalogOrFail(spark, destTableName);\n+\n+    try {\n+      sourcePartitionSpec = SparkSchemaUtil.specForTable(spark, Spark3Util.toTableIdentifier(sourceTableName));\n+    } catch (AnalysisException e) {\n+      throw new IllegalArgumentException(\"Cannot determining partitioning of \" + sourceTableName.toString(), e);\n+    }\n+\n+    try {\n+      this.sourceTable =\n+        spark.sessionState().catalog().getTableMetadata(Spark3Util.toTableIdentifier(sourceTableName));\n+    } catch (NoSuchTableException | NoSuchDatabaseException e) {\n+      throw new IllegalArgumentException(String.format(\"Could not find source table %s\", sourceTableName), e);\n+    }\n+    validateSourceTable(sourceTable, ALLOWED_SOURCES);\n+\n+    String sourceTableProvider = sourceTable.provider().get().toLowerCase(Locale.ROOT);\n+    this.sessionCatalogReplacement = !sourceTableProvider.equals(\"iceberg\") && sourceTableName.equals(destTableName);\n+\n+    this.sourceTableLocation = CatalogUtils.URIToString(sourceTable.storage().locationUri().get());\n+    this.destDataLocation = sourceTableLocation;\n+    this.destMetadataLocation = sourceTableLocation + \"/\" + ICEBERG_METADATA_FOLDER;\n+  }\n+\n+  private static void validateSourceTable(CatalogTable sourceTable, Set<String> supportedSourceTableProviders) {\n+    String sourceTableProvider = sourceTable.provider().get().toLowerCase(Locale.ROOT);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDY3NjM2Ng=="}, "originalCommit": {"oid": "a23fa89b2d5a2be61af72836656e4bf3322c9c39"}, "originalPosition": 160}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzNDk1MDA0OnYy", "diffSide": "RIGHT", "path": "spark3/src/main/java/org/apache/iceberg/spark/MigrateAction.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QwMDo1Njo1OFrOHde5vA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QwMDo1Njo1OFrOHde5vA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDY3NzA1Mg==", "bodyText": "Style nit: Both \"Spark\" and \"OrFail\" are implied, so I think they are just making this method name longer. It could be getSessionCatalog.", "url": "https://github.com/apache/iceberg/pull/1525#discussion_r500677052", "createdAt": "2020-10-07T00:56:58Z", "author": {"login": "rdblue"}, "path": "spark3/src/main/java/org/apache/iceberg/spark/MigrateAction.java", "diffHunk": "@@ -0,0 +1,272 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.spark;\n+\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Set;\n+import jline.internal.Log;\n+import org.apache.iceberg.PartitionSpec;\n+import org.apache.iceberg.Snapshot;\n+import org.apache.iceberg.SnapshotSummary;\n+import org.apache.iceberg.Table;\n+import org.apache.iceberg.TableProperties;\n+import org.apache.iceberg.actions.Action;\n+import org.apache.iceberg.actions.ExpireSnapshotsAction;\n+import org.apache.iceberg.relocated.com.google.common.collect.ImmutableMap;\n+import org.apache.iceberg.relocated.com.google.common.collect.ImmutableSet;\n+import org.apache.iceberg.relocated.com.google.common.collect.Maps;\n+import org.apache.iceberg.spark.source.SparkTable;\n+import org.apache.spark.sql.AnalysisException;\n+import org.apache.spark.sql.SparkSession;\n+import org.apache.spark.sql.catalyst.analysis.NoSuchDatabaseException;\n+import org.apache.spark.sql.catalyst.analysis.NoSuchNamespaceException;\n+import org.apache.spark.sql.catalyst.analysis.NoSuchTableException;\n+import org.apache.spark.sql.catalyst.analysis.TableAlreadyExistsException;\n+import org.apache.spark.sql.catalyst.catalog.CatalogTable;\n+import org.apache.spark.sql.catalyst.catalog.CatalogUtils;\n+import org.apache.spark.sql.connector.catalog.CatalogManager;\n+import org.apache.spark.sql.connector.catalog.CatalogPlugin;\n+import org.apache.spark.sql.connector.catalog.Identifier;\n+import org.apache.spark.sql.connector.catalog.StagedTable;\n+import org.apache.spark.sql.connector.catalog.TableCatalog;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import scala.collection.JavaConverters;\n+\n+/**\n+ * This action will migrate a known table in a Spark Catalog that is not an Iceberg table into an Iceberg table.\n+ * The created new table will be able to interact with and modify files in the original table.\n+ *\n+ * There are two main code paths\n+ *   - Creating a brand new iceberg table or replacing an existing Iceberg table\n+ *   This pathway will use a staged table to stage the creation or replacement, only committing after\n+ *   import has succeeded.\n+ *\n+ *   - Replacing a table in the Session Catalog with an Iceberg Table with the same name\n+ *   This pathway will create a temporary table with a different name. This replacement table will\n+ *   be committed upon a successful import. Then the original session catalog entry will be dropped\n+ *   and the new replacement table renamed to take its place.\n+ */\n+public class MigrateAction implements Action<Long> {\n+  private static final Logger LOG = LoggerFactory.getLogger(ExpireSnapshotsAction.class);\n+  private static final Set<String> ALLOWED_SOURCES = ImmutableSet.of(\"parquet\", \"avro\", \"orc\", \"hive\");\n+  private static final String ICEBERG_METADATA_FOLDER = \"metadata\";\n+  private static final String REPLACEMENT_NAME = \"_REPLACEMENT_\";\n+\n+\n+  private final SparkSession spark;\n+\n+  // Source Fields\n+  private final CatalogTable sourceTable;\n+  private final String sourceTableLocation;\n+  private final Identifier sourceTableName;\n+  private final PartitionSpec sourcePartitionSpec;\n+\n+  // Destination Fields\n+  private final Boolean sessionCatalogReplacement;\n+  private final SparkSessionCatalog destCatalog;\n+  private final Identifier destTableName;\n+\n+  // Optional Parameters for destination\n+  private String destDataLocation;\n+  private String destMetadataLocation;\n+  private Map<String, String> additionalProperties = Maps.newHashMap();\n+\n+  /**\n+   * Creates an Iceberg Location at a given location instead of using the location\n+   * provided by the source table. New metadata and data files will be added to this\n+   * new location and further operations will not effect the source table.\n+   *\n+   * Use this if you would like to experiment with Iceberg without changing\n+   * your original files.\n+   * @param newLocation the base directory for the new Iceberg Table\n+   * @return this for chaining\n+   */\n+  public MigrateAction withNewTableLocation(String newLocation) {\n+    this.destDataLocation = newLocation;\n+    this.destMetadataLocation = newLocation + \"/\" + ICEBERG_METADATA_FOLDER;\n+    return this;\n+  }\n+\n+  /**\n+   * Adds additional properties to the newly created Iceberg Table. Any properties with\n+   * the same key name will be overwritten.\n+   * @param properties a map of properties to be included\n+   * @return this for chaining\n+   */\n+  public MigrateAction withAdditionalProperties(Map<String, String> properties) {\n+    this.additionalProperties.putAll(properties);\n+    return this;\n+  }\n+\n+  /**\n+   * Adds an additional property to the newly created Iceberg Table. Any properties\n+   * with the same key name will be overwritten.\n+   * @param key the key of the property to add\n+   * @param value the value of the property to add\n+   */\n+  public MigrateAction withAdditionalProperty(String key, String value) {\n+    this.additionalProperties.put(key, value);\n+    return this;\n+  }\n+\n+  public MigrateAction(SparkSession spark, Identifier destTableName, Identifier sourceTableName) {\n+    this.spark = spark;\n+    this.sourceTableName = sourceTableName;\n+    this.destTableName = destTableName;\n+    this.destCatalog = getSparkSessionCatalogOrFail(spark, destTableName);\n+\n+    try {\n+      sourcePartitionSpec = SparkSchemaUtil.specForTable(spark, Spark3Util.toTableIdentifier(sourceTableName));\n+    } catch (AnalysisException e) {\n+      throw new IllegalArgumentException(\"Cannot determining partitioning of \" + sourceTableName.toString(), e);\n+    }\n+\n+    try {\n+      this.sourceTable =\n+        spark.sessionState().catalog().getTableMetadata(Spark3Util.toTableIdentifier(sourceTableName));\n+    } catch (NoSuchTableException | NoSuchDatabaseException e) {\n+      throw new IllegalArgumentException(String.format(\"Could not find source table %s\", sourceTableName), e);\n+    }\n+    validateSourceTable(sourceTable, ALLOWED_SOURCES);\n+\n+    String sourceTableProvider = sourceTable.provider().get().toLowerCase(Locale.ROOT);\n+    this.sessionCatalogReplacement = !sourceTableProvider.equals(\"iceberg\") && sourceTableName.equals(destTableName);\n+\n+    this.sourceTableLocation = CatalogUtils.URIToString(sourceTable.storage().locationUri().get());\n+    this.destDataLocation = sourceTableLocation;\n+    this.destMetadataLocation = sourceTableLocation + \"/\" + ICEBERG_METADATA_FOLDER;\n+  }\n+\n+  private static void validateSourceTable(CatalogTable sourceTable, Set<String> supportedSourceTableProviders) {\n+    String sourceTableProvider = sourceTable.provider().get().toLowerCase(Locale.ROOT);\n+\n+    if (!supportedSourceTableProviders.contains(sourceTableProvider)) {\n+      throw new IllegalArgumentException(\n+          String.format(\"Cannot create an Iceberg table from source provider: %s\", sourceTableProvider));\n+    }\n+    if (sourceTable.storage().locationUri().isEmpty()) {\n+      throw new IllegalArgumentException(\"Cannot create an Iceberg table from a source without an explicit location\");\n+    }\n+  }\n+\n+  private static Map<String, String> extraIcebergTableProps(String tableLocation, String metadataLocation) {\n+    return ImmutableMap.of(\n+        TableProperties.WRITE_METADATA_LOCATION, metadataLocation,\n+        TableProperties.WRITE_NEW_DATA_LOCATION, tableLocation,\n+        \"migrated\", \"true\");\n+  }\n+\n+  private static SparkSessionCatalog getSparkSessionCatalogOrFail(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a23fa89b2d5a2be61af72836656e4bf3322c9c39"}, "originalPosition": 178}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzNDk1MjQ2OnYy", "diffSide": "RIGHT", "path": "spark3/src/main/java/org/apache/iceberg/spark/MigrateAction.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QwMDo1ODozNFrOHde7Ng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QyMjozMzozOVrOHg70qQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDY3NzQzMA==", "bodyText": "I think everything after the staged table is created should be in the try block so that any exception thrown will roll back any changes that were made.", "url": "https://github.com/apache/iceberg/pull/1525#discussion_r500677430", "createdAt": "2020-10-07T00:58:34Z", "author": {"login": "rdblue"}, "path": "spark3/src/main/java/org/apache/iceberg/spark/MigrateAction.java", "diffHunk": "@@ -0,0 +1,272 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.spark;\n+\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Set;\n+import jline.internal.Log;\n+import org.apache.iceberg.PartitionSpec;\n+import org.apache.iceberg.Snapshot;\n+import org.apache.iceberg.SnapshotSummary;\n+import org.apache.iceberg.Table;\n+import org.apache.iceberg.TableProperties;\n+import org.apache.iceberg.actions.Action;\n+import org.apache.iceberg.actions.ExpireSnapshotsAction;\n+import org.apache.iceberg.relocated.com.google.common.collect.ImmutableMap;\n+import org.apache.iceberg.relocated.com.google.common.collect.ImmutableSet;\n+import org.apache.iceberg.relocated.com.google.common.collect.Maps;\n+import org.apache.iceberg.spark.source.SparkTable;\n+import org.apache.spark.sql.AnalysisException;\n+import org.apache.spark.sql.SparkSession;\n+import org.apache.spark.sql.catalyst.analysis.NoSuchDatabaseException;\n+import org.apache.spark.sql.catalyst.analysis.NoSuchNamespaceException;\n+import org.apache.spark.sql.catalyst.analysis.NoSuchTableException;\n+import org.apache.spark.sql.catalyst.analysis.TableAlreadyExistsException;\n+import org.apache.spark.sql.catalyst.catalog.CatalogTable;\n+import org.apache.spark.sql.catalyst.catalog.CatalogUtils;\n+import org.apache.spark.sql.connector.catalog.CatalogManager;\n+import org.apache.spark.sql.connector.catalog.CatalogPlugin;\n+import org.apache.spark.sql.connector.catalog.Identifier;\n+import org.apache.spark.sql.connector.catalog.StagedTable;\n+import org.apache.spark.sql.connector.catalog.TableCatalog;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import scala.collection.JavaConverters;\n+\n+/**\n+ * This action will migrate a known table in a Spark Catalog that is not an Iceberg table into an Iceberg table.\n+ * The created new table will be able to interact with and modify files in the original table.\n+ *\n+ * There are two main code paths\n+ *   - Creating a brand new iceberg table or replacing an existing Iceberg table\n+ *   This pathway will use a staged table to stage the creation or replacement, only committing after\n+ *   import has succeeded.\n+ *\n+ *   - Replacing a table in the Session Catalog with an Iceberg Table with the same name\n+ *   This pathway will create a temporary table with a different name. This replacement table will\n+ *   be committed upon a successful import. Then the original session catalog entry will be dropped\n+ *   and the new replacement table renamed to take its place.\n+ */\n+public class MigrateAction implements Action<Long> {\n+  private static final Logger LOG = LoggerFactory.getLogger(ExpireSnapshotsAction.class);\n+  private static final Set<String> ALLOWED_SOURCES = ImmutableSet.of(\"parquet\", \"avro\", \"orc\", \"hive\");\n+  private static final String ICEBERG_METADATA_FOLDER = \"metadata\";\n+  private static final String REPLACEMENT_NAME = \"_REPLACEMENT_\";\n+\n+\n+  private final SparkSession spark;\n+\n+  // Source Fields\n+  private final CatalogTable sourceTable;\n+  private final String sourceTableLocation;\n+  private final Identifier sourceTableName;\n+  private final PartitionSpec sourcePartitionSpec;\n+\n+  // Destination Fields\n+  private final Boolean sessionCatalogReplacement;\n+  private final SparkSessionCatalog destCatalog;\n+  private final Identifier destTableName;\n+\n+  // Optional Parameters for destination\n+  private String destDataLocation;\n+  private String destMetadataLocation;\n+  private Map<String, String> additionalProperties = Maps.newHashMap();\n+\n+  /**\n+   * Creates an Iceberg Location at a given location instead of using the location\n+   * provided by the source table. New metadata and data files will be added to this\n+   * new location and further operations will not effect the source table.\n+   *\n+   * Use this if you would like to experiment with Iceberg without changing\n+   * your original files.\n+   * @param newLocation the base directory for the new Iceberg Table\n+   * @return this for chaining\n+   */\n+  public MigrateAction withNewTableLocation(String newLocation) {\n+    this.destDataLocation = newLocation;\n+    this.destMetadataLocation = newLocation + \"/\" + ICEBERG_METADATA_FOLDER;\n+    return this;\n+  }\n+\n+  /**\n+   * Adds additional properties to the newly created Iceberg Table. Any properties with\n+   * the same key name will be overwritten.\n+   * @param properties a map of properties to be included\n+   * @return this for chaining\n+   */\n+  public MigrateAction withAdditionalProperties(Map<String, String> properties) {\n+    this.additionalProperties.putAll(properties);\n+    return this;\n+  }\n+\n+  /**\n+   * Adds an additional property to the newly created Iceberg Table. Any properties\n+   * with the same key name will be overwritten.\n+   * @param key the key of the property to add\n+   * @param value the value of the property to add\n+   */\n+  public MigrateAction withAdditionalProperty(String key, String value) {\n+    this.additionalProperties.put(key, value);\n+    return this;\n+  }\n+\n+  public MigrateAction(SparkSession spark, Identifier destTableName, Identifier sourceTableName) {\n+    this.spark = spark;\n+    this.sourceTableName = sourceTableName;\n+    this.destTableName = destTableName;\n+    this.destCatalog = getSparkSessionCatalogOrFail(spark, destTableName);\n+\n+    try {\n+      sourcePartitionSpec = SparkSchemaUtil.specForTable(spark, Spark3Util.toTableIdentifier(sourceTableName));\n+    } catch (AnalysisException e) {\n+      throw new IllegalArgumentException(\"Cannot determining partitioning of \" + sourceTableName.toString(), e);\n+    }\n+\n+    try {\n+      this.sourceTable =\n+        spark.sessionState().catalog().getTableMetadata(Spark3Util.toTableIdentifier(sourceTableName));\n+    } catch (NoSuchTableException | NoSuchDatabaseException e) {\n+      throw new IllegalArgumentException(String.format(\"Could not find source table %s\", sourceTableName), e);\n+    }\n+    validateSourceTable(sourceTable, ALLOWED_SOURCES);\n+\n+    String sourceTableProvider = sourceTable.provider().get().toLowerCase(Locale.ROOT);\n+    this.sessionCatalogReplacement = !sourceTableProvider.equals(\"iceberg\") && sourceTableName.equals(destTableName);\n+\n+    this.sourceTableLocation = CatalogUtils.URIToString(sourceTable.storage().locationUri().get());\n+    this.destDataLocation = sourceTableLocation;\n+    this.destMetadataLocation = sourceTableLocation + \"/\" + ICEBERG_METADATA_FOLDER;\n+  }\n+\n+  private static void validateSourceTable(CatalogTable sourceTable, Set<String> supportedSourceTableProviders) {\n+    String sourceTableProvider = sourceTable.provider().get().toLowerCase(Locale.ROOT);\n+\n+    if (!supportedSourceTableProviders.contains(sourceTableProvider)) {\n+      throw new IllegalArgumentException(\n+          String.format(\"Cannot create an Iceberg table from source provider: %s\", sourceTableProvider));\n+    }\n+    if (sourceTable.storage().locationUri().isEmpty()) {\n+      throw new IllegalArgumentException(\"Cannot create an Iceberg table from a source without an explicit location\");\n+    }\n+  }\n+\n+  private static Map<String, String> extraIcebergTableProps(String tableLocation, String metadataLocation) {\n+    return ImmutableMap.of(\n+        TableProperties.WRITE_METADATA_LOCATION, metadataLocation,\n+        TableProperties.WRITE_NEW_DATA_LOCATION, tableLocation,\n+        \"migrated\", \"true\");\n+  }\n+\n+  private static SparkSessionCatalog getSparkSessionCatalogOrFail(\n+      SparkSession spark,\n+      Identifier destTableName) {\n+    CatalogPlugin sessionCat;\n+    String[] destNamespace = destTableName.namespace();\n+    if (destNamespace != null && destNamespace.length > 0 &&\n+        spark.sessionState().catalogManager().isCatalogRegistered(destNamespace[0])) {\n+      sessionCat = spark.sessionState().catalogManager().catalog(destTableName.namespace()[0]);\n+    } else {\n+      sessionCat = spark.sessionState().catalogManager().catalog(CatalogManager.SESSION_CATALOG_NAME());\n+    }\n+    if (!(sessionCat instanceof SparkSessionCatalog)) {\n+      throw new IllegalArgumentException(String.format(\"Cannot use non Iceberg Catalog. Catalog %s was of class\" +\n+          \" %s but %s is required\", sessionCat.name(), sessionCat.getClass(), SparkSessionCatalog.class.getName()));\n+    }\n+    return (SparkSessionCatalog) sessionCat;\n+  }\n+\n+  @Override\n+  public Long execute() {\n+    Map<String, String> newTableProperties = new ImmutableMap.Builder<String, String>()\n+        .put(TableCatalog.PROP_PROVIDER, \"iceberg\")\n+        .putAll(JavaConverters.mapAsJavaMapConverter(sourceTable.properties()).asJava())\n+        .putAll(extraIcebergTableProps(destDataLocation, destMetadataLocation))\n+        .putAll(additionalProperties)\n+        .build();\n+\n+    StagedTable stagedTable;\n+    try {\n+      if (sessionCatalogReplacement) {\n+        /*\n+         * Spark Session Catalog cannot stage a replacement of a Session table with an Iceberg Table.\n+         * To workaround this we create a replcamement table which is renamed after it\n+         * is successfully constructed.\n+         */\n+        stagedTable = destCatalog.stageCreateOrReplace(Identifier.of(\n+            destTableName.namespace(),\n+            destTableName.name() + REPLACEMENT_NAME),\n+            sourceTable.schema(),\n+            Spark3Util.toTransforms(sourcePartitionSpec), newTableProperties);\n+      } else {\n+        stagedTable = destCatalog.stageCreateOrReplace(destTableName, sourceTable.schema(),\n+            Spark3Util.toTransforms(sourcePartitionSpec), newTableProperties);\n+      }\n+    } catch (NoSuchNamespaceException e) {\n+      throw new IllegalArgumentException(\"Cannot create a new table in a namespace which does not exist\", e);\n+    }\n+\n+    String stagingLocation = destMetadataLocation;\n+    Table icebergTable = ((SparkTable) stagedTable).table();\n+\n+    LOG.info(\"Beginning migration of {} to {}\", sourceTableName, destTableName);\n+    SparkTableUtil.importSparkTable(spark, Spark3Util.toTableIdentifier(sourceTableName), icebergTable,\n+        stagingLocation);\n+\n+    Snapshot snapshot = icebergTable.currentSnapshot();\n+    long numMigratedFiles = Long.valueOf(snapshot.summary().get(SnapshotSummary.TOTAL_DATA_FILES_PROP));\n+\n+    try {\n+      stagedTable.commitStagedChanges();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a23fa89b2d5a2be61af72836656e4bf3322c9c39"}, "originalPosition": 237}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDI5NjYxNw==", "bodyText": "Sounds good, fixed", "url": "https://github.com/apache/iceberg/pull/1525#discussion_r504296617", "createdAt": "2020-10-13T22:33:39Z", "author": {"login": "RussellSpitzer"}, "path": "spark3/src/main/java/org/apache/iceberg/spark/MigrateAction.java", "diffHunk": "@@ -0,0 +1,272 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.spark;\n+\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Set;\n+import jline.internal.Log;\n+import org.apache.iceberg.PartitionSpec;\n+import org.apache.iceberg.Snapshot;\n+import org.apache.iceberg.SnapshotSummary;\n+import org.apache.iceberg.Table;\n+import org.apache.iceberg.TableProperties;\n+import org.apache.iceberg.actions.Action;\n+import org.apache.iceberg.actions.ExpireSnapshotsAction;\n+import org.apache.iceberg.relocated.com.google.common.collect.ImmutableMap;\n+import org.apache.iceberg.relocated.com.google.common.collect.ImmutableSet;\n+import org.apache.iceberg.relocated.com.google.common.collect.Maps;\n+import org.apache.iceberg.spark.source.SparkTable;\n+import org.apache.spark.sql.AnalysisException;\n+import org.apache.spark.sql.SparkSession;\n+import org.apache.spark.sql.catalyst.analysis.NoSuchDatabaseException;\n+import org.apache.spark.sql.catalyst.analysis.NoSuchNamespaceException;\n+import org.apache.spark.sql.catalyst.analysis.NoSuchTableException;\n+import org.apache.spark.sql.catalyst.analysis.TableAlreadyExistsException;\n+import org.apache.spark.sql.catalyst.catalog.CatalogTable;\n+import org.apache.spark.sql.catalyst.catalog.CatalogUtils;\n+import org.apache.spark.sql.connector.catalog.CatalogManager;\n+import org.apache.spark.sql.connector.catalog.CatalogPlugin;\n+import org.apache.spark.sql.connector.catalog.Identifier;\n+import org.apache.spark.sql.connector.catalog.StagedTable;\n+import org.apache.spark.sql.connector.catalog.TableCatalog;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import scala.collection.JavaConverters;\n+\n+/**\n+ * This action will migrate a known table in a Spark Catalog that is not an Iceberg table into an Iceberg table.\n+ * The created new table will be able to interact with and modify files in the original table.\n+ *\n+ * There are two main code paths\n+ *   - Creating a brand new iceberg table or replacing an existing Iceberg table\n+ *   This pathway will use a staged table to stage the creation or replacement, only committing after\n+ *   import has succeeded.\n+ *\n+ *   - Replacing a table in the Session Catalog with an Iceberg Table with the same name\n+ *   This pathway will create a temporary table with a different name. This replacement table will\n+ *   be committed upon a successful import. Then the original session catalog entry will be dropped\n+ *   and the new replacement table renamed to take its place.\n+ */\n+public class MigrateAction implements Action<Long> {\n+  private static final Logger LOG = LoggerFactory.getLogger(ExpireSnapshotsAction.class);\n+  private static final Set<String> ALLOWED_SOURCES = ImmutableSet.of(\"parquet\", \"avro\", \"orc\", \"hive\");\n+  private static final String ICEBERG_METADATA_FOLDER = \"metadata\";\n+  private static final String REPLACEMENT_NAME = \"_REPLACEMENT_\";\n+\n+\n+  private final SparkSession spark;\n+\n+  // Source Fields\n+  private final CatalogTable sourceTable;\n+  private final String sourceTableLocation;\n+  private final Identifier sourceTableName;\n+  private final PartitionSpec sourcePartitionSpec;\n+\n+  // Destination Fields\n+  private final Boolean sessionCatalogReplacement;\n+  private final SparkSessionCatalog destCatalog;\n+  private final Identifier destTableName;\n+\n+  // Optional Parameters for destination\n+  private String destDataLocation;\n+  private String destMetadataLocation;\n+  private Map<String, String> additionalProperties = Maps.newHashMap();\n+\n+  /**\n+   * Creates an Iceberg Location at a given location instead of using the location\n+   * provided by the source table. New metadata and data files will be added to this\n+   * new location and further operations will not effect the source table.\n+   *\n+   * Use this if you would like to experiment with Iceberg without changing\n+   * your original files.\n+   * @param newLocation the base directory for the new Iceberg Table\n+   * @return this for chaining\n+   */\n+  public MigrateAction withNewTableLocation(String newLocation) {\n+    this.destDataLocation = newLocation;\n+    this.destMetadataLocation = newLocation + \"/\" + ICEBERG_METADATA_FOLDER;\n+    return this;\n+  }\n+\n+  /**\n+   * Adds additional properties to the newly created Iceberg Table. Any properties with\n+   * the same key name will be overwritten.\n+   * @param properties a map of properties to be included\n+   * @return this for chaining\n+   */\n+  public MigrateAction withAdditionalProperties(Map<String, String> properties) {\n+    this.additionalProperties.putAll(properties);\n+    return this;\n+  }\n+\n+  /**\n+   * Adds an additional property to the newly created Iceberg Table. Any properties\n+   * with the same key name will be overwritten.\n+   * @param key the key of the property to add\n+   * @param value the value of the property to add\n+   */\n+  public MigrateAction withAdditionalProperty(String key, String value) {\n+    this.additionalProperties.put(key, value);\n+    return this;\n+  }\n+\n+  public MigrateAction(SparkSession spark, Identifier destTableName, Identifier sourceTableName) {\n+    this.spark = spark;\n+    this.sourceTableName = sourceTableName;\n+    this.destTableName = destTableName;\n+    this.destCatalog = getSparkSessionCatalogOrFail(spark, destTableName);\n+\n+    try {\n+      sourcePartitionSpec = SparkSchemaUtil.specForTable(spark, Spark3Util.toTableIdentifier(sourceTableName));\n+    } catch (AnalysisException e) {\n+      throw new IllegalArgumentException(\"Cannot determining partitioning of \" + sourceTableName.toString(), e);\n+    }\n+\n+    try {\n+      this.sourceTable =\n+        spark.sessionState().catalog().getTableMetadata(Spark3Util.toTableIdentifier(sourceTableName));\n+    } catch (NoSuchTableException | NoSuchDatabaseException e) {\n+      throw new IllegalArgumentException(String.format(\"Could not find source table %s\", sourceTableName), e);\n+    }\n+    validateSourceTable(sourceTable, ALLOWED_SOURCES);\n+\n+    String sourceTableProvider = sourceTable.provider().get().toLowerCase(Locale.ROOT);\n+    this.sessionCatalogReplacement = !sourceTableProvider.equals(\"iceberg\") && sourceTableName.equals(destTableName);\n+\n+    this.sourceTableLocation = CatalogUtils.URIToString(sourceTable.storage().locationUri().get());\n+    this.destDataLocation = sourceTableLocation;\n+    this.destMetadataLocation = sourceTableLocation + \"/\" + ICEBERG_METADATA_FOLDER;\n+  }\n+\n+  private static void validateSourceTable(CatalogTable sourceTable, Set<String> supportedSourceTableProviders) {\n+    String sourceTableProvider = sourceTable.provider().get().toLowerCase(Locale.ROOT);\n+\n+    if (!supportedSourceTableProviders.contains(sourceTableProvider)) {\n+      throw new IllegalArgumentException(\n+          String.format(\"Cannot create an Iceberg table from source provider: %s\", sourceTableProvider));\n+    }\n+    if (sourceTable.storage().locationUri().isEmpty()) {\n+      throw new IllegalArgumentException(\"Cannot create an Iceberg table from a source without an explicit location\");\n+    }\n+  }\n+\n+  private static Map<String, String> extraIcebergTableProps(String tableLocation, String metadataLocation) {\n+    return ImmutableMap.of(\n+        TableProperties.WRITE_METADATA_LOCATION, metadataLocation,\n+        TableProperties.WRITE_NEW_DATA_LOCATION, tableLocation,\n+        \"migrated\", \"true\");\n+  }\n+\n+  private static SparkSessionCatalog getSparkSessionCatalogOrFail(\n+      SparkSession spark,\n+      Identifier destTableName) {\n+    CatalogPlugin sessionCat;\n+    String[] destNamespace = destTableName.namespace();\n+    if (destNamespace != null && destNamespace.length > 0 &&\n+        spark.sessionState().catalogManager().isCatalogRegistered(destNamespace[0])) {\n+      sessionCat = spark.sessionState().catalogManager().catalog(destTableName.namespace()[0]);\n+    } else {\n+      sessionCat = spark.sessionState().catalogManager().catalog(CatalogManager.SESSION_CATALOG_NAME());\n+    }\n+    if (!(sessionCat instanceof SparkSessionCatalog)) {\n+      throw new IllegalArgumentException(String.format(\"Cannot use non Iceberg Catalog. Catalog %s was of class\" +\n+          \" %s but %s is required\", sessionCat.name(), sessionCat.getClass(), SparkSessionCatalog.class.getName()));\n+    }\n+    return (SparkSessionCatalog) sessionCat;\n+  }\n+\n+  @Override\n+  public Long execute() {\n+    Map<String, String> newTableProperties = new ImmutableMap.Builder<String, String>()\n+        .put(TableCatalog.PROP_PROVIDER, \"iceberg\")\n+        .putAll(JavaConverters.mapAsJavaMapConverter(sourceTable.properties()).asJava())\n+        .putAll(extraIcebergTableProps(destDataLocation, destMetadataLocation))\n+        .putAll(additionalProperties)\n+        .build();\n+\n+    StagedTable stagedTable;\n+    try {\n+      if (sessionCatalogReplacement) {\n+        /*\n+         * Spark Session Catalog cannot stage a replacement of a Session table with an Iceberg Table.\n+         * To workaround this we create a replcamement table which is renamed after it\n+         * is successfully constructed.\n+         */\n+        stagedTable = destCatalog.stageCreateOrReplace(Identifier.of(\n+            destTableName.namespace(),\n+            destTableName.name() + REPLACEMENT_NAME),\n+            sourceTable.schema(),\n+            Spark3Util.toTransforms(sourcePartitionSpec), newTableProperties);\n+      } else {\n+        stagedTable = destCatalog.stageCreateOrReplace(destTableName, sourceTable.schema(),\n+            Spark3Util.toTransforms(sourcePartitionSpec), newTableProperties);\n+      }\n+    } catch (NoSuchNamespaceException e) {\n+      throw new IllegalArgumentException(\"Cannot create a new table in a namespace which does not exist\", e);\n+    }\n+\n+    String stagingLocation = destMetadataLocation;\n+    Table icebergTable = ((SparkTable) stagedTable).table();\n+\n+    LOG.info(\"Beginning migration of {} to {}\", sourceTableName, destTableName);\n+    SparkTableUtil.importSparkTable(spark, Spark3Util.toTableIdentifier(sourceTableName), icebergTable,\n+        stagingLocation);\n+\n+    Snapshot snapshot = icebergTable.currentSnapshot();\n+    long numMigratedFiles = Long.valueOf(snapshot.summary().get(SnapshotSummary.TOTAL_DATA_FILES_PROP));\n+\n+    try {\n+      stagedTable.commitStagedChanges();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDY3NzQzMA=="}, "originalCommit": {"oid": "a23fa89b2d5a2be61af72836656e4bf3322c9c39"}, "originalPosition": 237}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1ODgyNzc3OnYy", "diffSide": "RIGHT", "path": "spark/src/main/java/org/apache/iceberg/actions/CommonActions.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QyMjozODozM1rOHg77lQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QyMjo0MjowMlrOHg8AXA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDI5ODM4OQ==", "bodyText": "Base class for Actions that are common to both Spark 2 and 3", "url": "https://github.com/apache/iceberg/pull/1525#discussion_r504298389", "createdAt": "2020-10-13T22:38:33Z", "author": {"login": "RussellSpitzer"}, "path": "spark/src/main/java/org/apache/iceberg/actions/CommonActions.java", "diffHunk": "@@ -0,0 +1,45 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.iceberg.actions;\n+\n+import org.apache.iceberg.Table;\n+import org.apache.spark.sql.SparkSession;\n+\n+public abstract class CommonActions {\n+\n+  private SparkSession spark;\n+  private Table table;\n+\n+  protected CommonActions(SparkSession spark, Table table) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "85112ca46e2439b586b5970eb2f4bf09079eec24"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDI5OTYxMg==", "bodyText": "This change has the unfortunate consequence that there is now an Actions in both Spark2 and Spark3 modules, which means that our abstract tests which use both have to delegate their \"Actions.forTable\" method to their implementations.", "url": "https://github.com/apache/iceberg/pull/1525#discussion_r504299612", "createdAt": "2020-10-13T22:42:02Z", "author": {"login": "RussellSpitzer"}, "path": "spark/src/main/java/org/apache/iceberg/actions/CommonActions.java", "diffHunk": "@@ -0,0 +1,45 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.iceberg.actions;\n+\n+import org.apache.iceberg.Table;\n+import org.apache.spark.sql.SparkSession;\n+\n+public abstract class CommonActions {\n+\n+  private SparkSession spark;\n+  private Table table;\n+\n+  protected CommonActions(SparkSession spark, Table table) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDI5ODM4OQ=="}, "originalCommit": {"oid": "85112ca46e2439b586b5970eb2f4bf09079eec24"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzMTY4MTkwOnYy", "diffSide": "RIGHT", "path": "spark/src/main/java/org/apache/iceberg/actions/Actions.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMVQyMzo0NjoxOFrOHrzMqQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMVQyMzo0NjoxOFrOHrzMqQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTY4OTY0MQ==", "bodyText": "Typo: Should be \"migrate\" not \"snapshot\".", "url": "https://github.com/apache/iceberg/pull/1525#discussion_r515689641", "createdAt": "2020-11-01T23:46:18Z", "author": {"login": "rdblue"}, "path": "spark/src/main/java/org/apache/iceberg/actions/Actions.java", "diffHunk": "@@ -77,6 +82,81 @@ public ExpireSnapshotsAction expireSnapshots() {\n     return new ExpireSnapshotsAction(spark, table);\n   }\n \n+  /**\n+   * Converts the provided table into an Iceberg table in place. The table will no longer be represented by it's\n+   * previous provider in the session catalog and a new metadata directory will be created at the table's location.\n+   *\n+   * @param tableName Table to be converted\n+   * @return Action to perform migration\n+   */\n+  public static CreateAction migrate(String tableName) {\n+    try {\n+      return DynMethods.builder(\"migrate\")\n+          .impl(implClass(), String.class).buildStaticChecked()\n+          .invoke(tableName);\n+    } catch (NoSuchMethodException ex) {\n+      throw new UnsupportedOperationException(\"Snapshot is not implemented for this version of Spark\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "216eb56a60a7ea3b4bdd9465ae92116ab44ef8b8"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzMTY4NDMzOnYy", "diffSide": "RIGHT", "path": "spark/src/main/java/org/apache/iceberg/actions/Actions.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMVQyMzo0OTozN1rOHrzN5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQxNzowMjozMFrOH_ZxhQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTY4OTk1Nw==", "bodyText": "The doc here is really specific to Spark, but I don't think there is a need for it. How about something like \"The table will no longer be accessible using the previous implementation\"?\nAlso, new data will be written to the data directory to avoid breaking any copies of the table. When we migrate, we leave a db.table_hive copy that can be renamed back in place to roll back the operation. The user is responsible for dropping the _hive copy or doing renames to rollback. Not sure how much of that applies to this PR though.", "url": "https://github.com/apache/iceberg/pull/1525#discussion_r515689957", "createdAt": "2020-11-01T23:49:37Z", "author": {"login": "rdblue"}, "path": "spark/src/main/java/org/apache/iceberg/actions/Actions.java", "diffHunk": "@@ -77,6 +82,81 @@ public ExpireSnapshotsAction expireSnapshots() {\n     return new ExpireSnapshotsAction(spark, table);\n   }\n \n+  /**\n+   * Converts the provided table into an Iceberg table in place. The table will no longer be represented by it's\n+   * previous provider in the session catalog and a new metadata directory will be created at the table's location.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "216eb56a60a7ea3b4bdd9465ae92116ab44ef8b8"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDczOTEyMQ==", "bodyText": "I'll consider the fall back behavior in the action itself, I think we could leave another copy behind but I think that probably should be a user operation rather than a automatic part of migrate. I could be convinced otherwise though \ud83e\udd37", "url": "https://github.com/apache/iceberg/pull/1525#discussion_r520739121", "createdAt": "2020-11-10T17:25:36Z", "author": {"login": "RussellSpitzer"}, "path": "spark/src/main/java/org/apache/iceberg/actions/Actions.java", "diffHunk": "@@ -77,6 +82,81 @@ public ExpireSnapshotsAction expireSnapshots() {\n     return new ExpireSnapshotsAction(spark, table);\n   }\n \n+  /**\n+   * Converts the provided table into an Iceberg table in place. The table will no longer be represented by it's\n+   * previous provider in the session catalog and a new metadata directory will be created at the table's location.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTY4OTk1Nw=="}, "originalCommit": {"oid": "216eb56a60a7ea3b4bdd9465ae92116ab44ef8b8"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjIzNzIzMw==", "bodyText": "This seems to be still open.", "url": "https://github.com/apache/iceberg/pull/1525#discussion_r536237233", "createdAt": "2020-12-04T16:51:06Z", "author": {"login": "aokolnychyi"}, "path": "spark/src/main/java/org/apache/iceberg/actions/Actions.java", "diffHunk": "@@ -77,6 +82,81 @@ public ExpireSnapshotsAction expireSnapshots() {\n     return new ExpireSnapshotsAction(spark, table);\n   }\n \n+  /**\n+   * Converts the provided table into an Iceberg table in place. The table will no longer be represented by it's\n+   * previous provider in the session catalog and a new metadata directory will be created at the table's location.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTY4OTk1Nw=="}, "originalCommit": {"oid": "216eb56a60a7ea3b4bdd9465ae92116ab44ef8b8"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjI0NDYxMw==", "bodyText": "woops only converted the lower one, this one is fixed too now", "url": "https://github.com/apache/iceberg/pull/1525#discussion_r536244613", "createdAt": "2020-12-04T17:02:30Z", "author": {"login": "RussellSpitzer"}, "path": "spark/src/main/java/org/apache/iceberg/actions/Actions.java", "diffHunk": "@@ -77,6 +82,81 @@ public ExpireSnapshotsAction expireSnapshots() {\n     return new ExpireSnapshotsAction(spark, table);\n   }\n \n+  /**\n+   * Converts the provided table into an Iceberg table in place. The table will no longer be represented by it's\n+   * previous provider in the session catalog and a new metadata directory will be created at the table's location.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTY4OTk1Nw=="}, "originalCommit": {"oid": "216eb56a60a7ea3b4bdd9465ae92116ab44ef8b8"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzMTY4NTI4OnYy", "diffSide": "RIGHT", "path": "spark/src/main/java/org/apache/iceberg/actions/Actions.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMVQyMzo1MDoyOFrOHrzOWA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMVQyMzo1MDoyOFrOHrzOWA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTY5MDA3Mg==", "bodyText": "Same here, should be \"migrate\".", "url": "https://github.com/apache/iceberg/pull/1525#discussion_r515690072", "createdAt": "2020-11-01T23:50:28Z", "author": {"login": "rdblue"}, "path": "spark/src/main/java/org/apache/iceberg/actions/Actions.java", "diffHunk": "@@ -77,6 +82,81 @@ public ExpireSnapshotsAction expireSnapshots() {\n     return new ExpireSnapshotsAction(spark, table);\n   }\n \n+  /**\n+   * Converts the provided table into an Iceberg table in place. The table will no longer be represented by it's\n+   * previous provider in the session catalog and a new metadata directory will be created at the table's location.\n+   *\n+   * @param tableName Table to be converted\n+   * @return Action to perform migration\n+   */\n+  public static CreateAction migrate(String tableName) {\n+    try {\n+      return DynMethods.builder(\"migrate\")\n+          .impl(implClass(), String.class).buildStaticChecked()\n+          .invoke(tableName);\n+    } catch (NoSuchMethodException ex) {\n+      throw new UnsupportedOperationException(\"Snapshot is not implemented for this version of Spark\");\n+    }\n+  }\n+\n+  /**\n+   * Converts the provided table into an Iceberg table in place. The table will no longer be represented by it's\n+   * previous provider in the session catalog and a new metadata directory will be created at the table's location.\n+   *\n+   * @param tableName Table to be converted\n+   * @param spark     Spark session to use for looking up table\n+   * @return Action to perform migration\n+   */\n+  public static CreateAction migrate(SparkSession spark, String tableName) {\n+    try {\n+      return DynMethods.builder(\"migrate\")\n+          .impl(implClass(), SparkSession.class, String.class).buildStaticChecked()\n+          .invoke(spark, tableName);\n+    } catch (NoSuchMethodException ex) {\n+      throw new UnsupportedOperationException(\"Snapshot is not implemented for this version of Spark\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "216eb56a60a7ea3b4bdd9465ae92116ab44ef8b8"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzMTY4ODAyOnYy", "diffSide": "RIGHT", "path": "spark/src/main/java/org/apache/iceberg/actions/Actions.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMVQyMzo1NDowNVrOHrzPrA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMVQyMzo1NDowNVrOHrzPrA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTY5MDQxMg==", "bodyText": "The wording in this Javadoc and the argument names seem a little confusing to me. I think it should be \"Creates a new Iceberg table that is a snapshot of the given source table\", then \"The new table can be altered, . . .\". Referring to the table that gets created as a table should help users understand what is happening a bit better than referring to it as a \"snapshot\", which has a conflicting meaning when used as a noun. Here, I think we want to stick to using it as a verb.\nSince the \"source\" and \"dest\" are tables, I'd use \"sourceName\" or \"sourceTable\" and \"destName\" or \"destTable\".", "url": "https://github.com/apache/iceberg/pull/1525#discussion_r515690412", "createdAt": "2020-11-01T23:54:05Z", "author": {"login": "rdblue"}, "path": "spark/src/main/java/org/apache/iceberg/actions/Actions.java", "diffHunk": "@@ -77,6 +82,81 @@ public ExpireSnapshotsAction expireSnapshots() {\n     return new ExpireSnapshotsAction(spark, table);\n   }\n \n+  /**\n+   * Converts the provided table into an Iceberg table in place. The table will no longer be represented by it's\n+   * previous provider in the session catalog and a new metadata directory will be created at the table's location.\n+   *\n+   * @param tableName Table to be converted\n+   * @return Action to perform migration\n+   */\n+  public static CreateAction migrate(String tableName) {\n+    try {\n+      return DynMethods.builder(\"migrate\")\n+          .impl(implClass(), String.class).buildStaticChecked()\n+          .invoke(tableName);\n+    } catch (NoSuchMethodException ex) {\n+      throw new UnsupportedOperationException(\"Snapshot is not implemented for this version of Spark\");\n+    }\n+  }\n+\n+  /**\n+   * Converts the provided table into an Iceberg table in place. The table will no longer be represented by it's\n+   * previous provider in the session catalog and a new metadata directory will be created at the table's location.\n+   *\n+   * @param tableName Table to be converted\n+   * @param spark     Spark session to use for looking up table\n+   * @return Action to perform migration\n+   */\n+  public static CreateAction migrate(SparkSession spark, String tableName) {\n+    try {\n+      return DynMethods.builder(\"migrate\")\n+          .impl(implClass(), SparkSession.class, String.class).buildStaticChecked()\n+          .invoke(spark, tableName);\n+    } catch (NoSuchMethodException ex) {\n+      throw new UnsupportedOperationException(\"Snapshot is not implemented for this version of Spark\");\n+    }\n+  }\n+\n+  /**\n+   * Creates an independent Iceberg snapshot of a given table. The Snapshot can be altered, appended or deleted without\n+   * causing any change to the original table the snapshot is based on. New data and metadata will be created in the\n+   * location passed to this method.\n+   *\n+   * @param sourceId Snapshot's source data\n+   * @param destId   Name of the new snapshot", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "216eb56a60a7ea3b4bdd9465ae92116ab44ef8b8"}, "originalPosition": 68}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzMTY4ODcxOnYy", "diffSide": "RIGHT", "path": "spark/src/main/java/org/apache/iceberg/actions/Actions.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMVQyMzo1NDozNVrOHrzP9w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMVQyMzo1NDozNVrOHrzP9w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTY5MDQ4Nw==", "bodyText": "It may be helpful to link to the CreateAction API rather than just calling out that it is an Action.", "url": "https://github.com/apache/iceberg/pull/1525#discussion_r515690487", "createdAt": "2020-11-01T23:54:35Z", "author": {"login": "rdblue"}, "path": "spark/src/main/java/org/apache/iceberg/actions/Actions.java", "diffHunk": "@@ -77,6 +82,81 @@ public ExpireSnapshotsAction expireSnapshots() {\n     return new ExpireSnapshotsAction(spark, table);\n   }\n \n+  /**\n+   * Converts the provided table into an Iceberg table in place. The table will no longer be represented by it's\n+   * previous provider in the session catalog and a new metadata directory will be created at the table's location.\n+   *\n+   * @param tableName Table to be converted\n+   * @return Action to perform migration\n+   */\n+  public static CreateAction migrate(String tableName) {\n+    try {\n+      return DynMethods.builder(\"migrate\")\n+          .impl(implClass(), String.class).buildStaticChecked()\n+          .invoke(tableName);\n+    } catch (NoSuchMethodException ex) {\n+      throw new UnsupportedOperationException(\"Snapshot is not implemented for this version of Spark\");\n+    }\n+  }\n+\n+  /**\n+   * Converts the provided table into an Iceberg table in place. The table will no longer be represented by it's\n+   * previous provider in the session catalog and a new metadata directory will be created at the table's location.\n+   *\n+   * @param tableName Table to be converted\n+   * @param spark     Spark session to use for looking up table\n+   * @return Action to perform migration\n+   */\n+  public static CreateAction migrate(SparkSession spark, String tableName) {\n+    try {\n+      return DynMethods.builder(\"migrate\")\n+          .impl(implClass(), SparkSession.class, String.class).buildStaticChecked()\n+          .invoke(spark, tableName);\n+    } catch (NoSuchMethodException ex) {\n+      throw new UnsupportedOperationException(\"Snapshot is not implemented for this version of Spark\");\n+    }\n+  }\n+\n+  /**\n+   * Creates an independent Iceberg snapshot of a given table. The Snapshot can be altered, appended or deleted without\n+   * causing any change to the original table the snapshot is based on. New data and metadata will be created in the\n+   * location passed to this method.\n+   *\n+   * @param sourceId Snapshot's source data\n+   * @param destId   Name of the new snapshot\n+   * @param location Location for metadata and new data for the Snapshot\n+   * @return Action to perform snapshot", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "216eb56a60a7ea3b4bdd9465ae92116ab44ef8b8"}, "originalPosition": 70}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzMTY5MTQ1OnYy", "diffSide": "RIGHT", "path": "spark/src/main/java/org/apache/iceberg/actions/CreateAction.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMVQyMzo1Nzo0NlrOHrzRTg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxNzo0MDozMFrOHwn_8g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTY5MDgzMA==", "bodyText": "Actions.migrate returns a CreateAction, but as seems to change the operation from an in-place migration to something unclear. Is the original table retained if the name doesn't conflict?\nSimilarly, I don't think there is a need for this with Actions.snapshot because snapshot accepts a destination table name. When I suggested as, my intent was to use it as a way to pass the destination table name for snapshot. But if you can't create a SnapshotAction without a table name we don't need this.", "url": "https://github.com/apache/iceberg/pull/1525#discussion_r515690830", "createdAt": "2020-11-01T23:57:46Z", "author": {"login": "rdblue"}, "path": "spark/src/main/java/org/apache/iceberg/actions/CreateAction.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.actions;\n+\n+import java.util.Map;\n+\n+interface CreateAction extends Action<Long> {\n+\n+  /**\n+   * Adds additional properties to the newly created Iceberg Table. Any properties with\n+   * the same key name will be overwritten.\n+   * @param properties a map of properties to be included\n+   * @return this for chaining\n+   */\n+  CreateAction withAdditionalProperties(Map<String, String> properties);\n+\n+  /**\n+   * Adds an additional property to the newly created Iceberg Table. Any properties\n+   * with the same key name will be overwritten.\n+   * @param key the key of the property to add\n+   * @param value the value of the property to add\n+   * @return this for chaining\n+   */\n+  CreateAction withAdditionalProperty(String key, String value);\n+\n+  /**\n+   * Changes the name of the new Iceberg table we are making to the name passed\n+   * to this method.\n+   * @param newName The new name of the table to be made\n+   * @return this for chaining\n+   */\n+  CreateAction as(String newName);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "216eb56a60a7ea3b4bdd9465ae92116ab44ef8b8"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDc0OTA0Mg==", "bodyText": "I can remove it, for snapshot it doesn't make sense but for Migrate it allowed you to use the same location for data as the original table but using a different catalog identifier, it wouldn't remove the old identifier if it didn't match. That may be of limited utility so I'll drop it.", "url": "https://github.com/apache/iceberg/pull/1525#discussion_r520749042", "createdAt": "2020-11-10T17:40:30Z", "author": {"login": "RussellSpitzer"}, "path": "spark/src/main/java/org/apache/iceberg/actions/CreateAction.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.actions;\n+\n+import java.util.Map;\n+\n+interface CreateAction extends Action<Long> {\n+\n+  /**\n+   * Adds additional properties to the newly created Iceberg Table. Any properties with\n+   * the same key name will be overwritten.\n+   * @param properties a map of properties to be included\n+   * @return this for chaining\n+   */\n+  CreateAction withAdditionalProperties(Map<String, String> properties);\n+\n+  /**\n+   * Adds an additional property to the newly created Iceberg Table. Any properties\n+   * with the same key name will be overwritten.\n+   * @param key the key of the property to add\n+   * @param value the value of the property to add\n+   * @return this for chaining\n+   */\n+  CreateAction withAdditionalProperty(String key, String value);\n+\n+  /**\n+   * Changes the name of the new Iceberg table we are making to the name passed\n+   * to this method.\n+   * @param newName The new name of the table to be made\n+   * @return this for chaining\n+   */\n+  CreateAction as(String newName);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTY5MDgzMA=="}, "originalCommit": {"oid": "216eb56a60a7ea3b4bdd9465ae92116ab44ef8b8"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzMTY5MjEzOnYy", "diffSide": "RIGHT", "path": "spark/src/main/java/org/apache/iceberg/actions/CreateAction.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMVQyMzo1ODo0NlrOHrzRqQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQxOTozOToxMlrOHsS_0A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTY5MDkyMQ==", "bodyText": "Why not set and setAll? Is \"additional\" more clear?", "url": "https://github.com/apache/iceberg/pull/1525#discussion_r515690921", "createdAt": "2020-11-01T23:58:46Z", "author": {"login": "rdblue"}, "path": "spark/src/main/java/org/apache/iceberg/actions/CreateAction.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.actions;\n+\n+import java.util.Map;\n+\n+interface CreateAction extends Action<Long> {\n+\n+  /**\n+   * Adds additional properties to the newly created Iceberg Table. Any properties with\n+   * the same key name will be overwritten.\n+   * @param properties a map of properties to be included\n+   * @return this for chaining\n+   */\n+  CreateAction withAdditionalProperties(Map<String, String> properties);\n+\n+  /**\n+   * Adds an additional property to the newly created Iceberg Table. Any properties\n+   * with the same key name will be overwritten.\n+   * @param key the key of the property to add\n+   * @param value the value of the property to add\n+   * @return this for chaining\n+   */\n+  CreateAction withAdditionalProperty(String key, String value);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "216eb56a60a7ea3b4bdd9465ae92116ab44ef8b8"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjEyNDQ4Mw==", "bodyText": "This was actually part of an earlier discussion I had with @aokolnychyi, We were discussing whether we should be preserving the properties set in the origin table for the operation. I had \"additional\" here because I settled on a behavior we had previously be using internally which copied over whatever properties the original source originally had.\nI can go back to \"set and setAll\" but I would like to hear your opinion on copying properties from the origins.", "url": "https://github.com/apache/iceberg/pull/1525#discussion_r516124483", "createdAt": "2020-11-02T17:10:16Z", "author": {"login": "RussellSpitzer"}, "path": "spark/src/main/java/org/apache/iceberg/actions/CreateAction.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.actions;\n+\n+import java.util.Map;\n+\n+interface CreateAction extends Action<Long> {\n+\n+  /**\n+   * Adds additional properties to the newly created Iceberg Table. Any properties with\n+   * the same key name will be overwritten.\n+   * @param properties a map of properties to be included\n+   * @return this for chaining\n+   */\n+  CreateAction withAdditionalProperties(Map<String, String> properties);\n+\n+  /**\n+   * Adds an additional property to the newly created Iceberg Table. Any properties\n+   * with the same key name will be overwritten.\n+   * @param key the key of the property to add\n+   * @param value the value of the property to add\n+   * @return this for chaining\n+   */\n+  CreateAction withAdditionalProperty(String key, String value);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTY5MDkyMQ=="}, "originalCommit": {"oid": "216eb56a60a7ea3b4bdd9465ae92116ab44ef8b8"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjIxMDY0MA==", "bodyText": "I think both migrate and snapshot should copy everything from the original table, including properties. That's one reason why I like set: it makes no guarantees about the other table's properties, only that the given key/value will be set in the new table.", "url": "https://github.com/apache/iceberg/pull/1525#discussion_r516210640", "createdAt": "2020-11-02T19:39:12Z", "author": {"login": "rdblue"}, "path": "spark/src/main/java/org/apache/iceberg/actions/CreateAction.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.actions;\n+\n+import java.util.Map;\n+\n+interface CreateAction extends Action<Long> {\n+\n+  /**\n+   * Adds additional properties to the newly created Iceberg Table. Any properties with\n+   * the same key name will be overwritten.\n+   * @param properties a map of properties to be included\n+   * @return this for chaining\n+   */\n+  CreateAction withAdditionalProperties(Map<String, String> properties);\n+\n+  /**\n+   * Adds an additional property to the newly created Iceberg Table. Any properties\n+   * with the same key name will be overwritten.\n+   * @param key the key of the property to add\n+   * @param value the value of the property to add\n+   * @return this for chaining\n+   */\n+  CreateAction withAdditionalProperty(String key, String value);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTY5MDkyMQ=="}, "originalCommit": {"oid": "216eb56a60a7ea3b4bdd9465ae92116ab44ef8b8"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzMTY5NTI1OnYy", "diffSide": "RIGHT", "path": "spark3/src/main/java/org/apache/iceberg/spark/Spark3Util.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQwMDowMjowM1rOHrzTNw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQxNzoxMToxMFrOHsNxpA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTY5MTMxOQ==", "bodyText": "Can we avoid Scala in this API to avoid breaking changes? I think converting to List immediately and then calling this method is going to be better.", "url": "https://github.com/apache/iceberg/pull/1525#discussion_r515691319", "createdAt": "2020-11-02T00:02:03Z", "author": {"login": "rdblue"}, "path": "spark3/src/main/java/org/apache/iceberg/spark/Spark3Util.java", "diffHunk": "@@ -543,4 +550,63 @@ private static String sqlString(org.apache.iceberg.expressions.Literal<?> lit) {\n       }\n     }\n   }\n+\n+  public static CatalogAndIdentifier catalogAndIdentifier(SparkSession spark, String name) {\n+    try {\n+      return catalogAndIdentifier(spark, spark.sessionState().sqlParser().parseMultipartIdentifier(name));\n+    } catch (ParseException e) {\n+      throw new IllegalArgumentException(String.format(\"Cannot parse identifier %s\", name), e);\n+    }\n+  }\n+\n+  /**\n+   * A modified version of Spark's LookupCatalog.CatalogAndIdentifier.unapply\n+   * Attempts to find the catalog and identifier a multipart identifier represents\n+   * @param spark Spark session to use for resolution\n+   * @param nameParts Multipart identifier representing a table\n+   * @return The CatalogPlugin and Identifier for the table\n+   */\n+  public static CatalogAndIdentifier catalogAndIdentifier(SparkSession spark, Seq<String> nameParts) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "216eb56a60a7ea3b4bdd9465ae92116ab44ef8b8"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjEyNTA5Mg==", "bodyText": "Already upset about that Scala 2.13 change :) Yeah no problem, I'll stay Java only in message signatures with the exception of Spark Specific classes.", "url": "https://github.com/apache/iceberg/pull/1525#discussion_r516125092", "createdAt": "2020-11-02T17:11:10Z", "author": {"login": "RussellSpitzer"}, "path": "spark3/src/main/java/org/apache/iceberg/spark/Spark3Util.java", "diffHunk": "@@ -543,4 +550,63 @@ private static String sqlString(org.apache.iceberg.expressions.Literal<?> lit) {\n       }\n     }\n   }\n+\n+  public static CatalogAndIdentifier catalogAndIdentifier(SparkSession spark, String name) {\n+    try {\n+      return catalogAndIdentifier(spark, spark.sessionState().sqlParser().parseMultipartIdentifier(name));\n+    } catch (ParseException e) {\n+      throw new IllegalArgumentException(String.format(\"Cannot parse identifier %s\", name), e);\n+    }\n+  }\n+\n+  /**\n+   * A modified version of Spark's LookupCatalog.CatalogAndIdentifier.unapply\n+   * Attempts to find the catalog and identifier a multipart identifier represents\n+   * @param spark Spark session to use for resolution\n+   * @param nameParts Multipart identifier representing a table\n+   * @return The CatalogPlugin and Identifier for the table\n+   */\n+  public static CatalogAndIdentifier catalogAndIdentifier(SparkSession spark, Seq<String> nameParts) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTY5MTMxOQ=="}, "originalCommit": {"oid": "216eb56a60a7ea3b4bdd9465ae92116ab44ef8b8"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzMTY5NzEzOnYy", "diffSide": "RIGHT", "path": "spark3/src/test/java/org/apache/iceberg/actions/TestCreateActions.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQwMDowNDoyNVrOHrzULg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQxOTozNzoyNVrOHsS8fQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTY5MTU2Ng==", "bodyText": "Why is this needed?", "url": "https://github.com/apache/iceberg/pull/1525#discussion_r515691566", "createdAt": "2020-11-02T00:04:25Z", "author": {"login": "rdblue"}, "path": "spark3/src/test/java/org/apache/iceberg/actions/TestCreateActions.java", "diffHunk": "@@ -0,0 +1,272 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.actions;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.function.Supplier;\n+import org.apache.iceberg.relocated.com.google.common.collect.ImmutableMap;\n+import org.apache.iceberg.relocated.com.google.common.collect.Lists;\n+import org.apache.iceberg.relocated.com.google.common.collect.Maps;\n+import org.apache.iceberg.spark.Spark3Util;\n+import org.apache.iceberg.spark.SparkCatalog;\n+import org.apache.iceberg.spark.SparkCatalogTestBase;\n+import org.apache.iceberg.spark.SparkSessionCatalog;\n+import org.apache.iceberg.spark.source.SimpleRecord;\n+import org.apache.iceberg.spark.source.SparkTable;\n+import org.apache.spark.sql.Dataset;\n+import org.apache.spark.sql.Row;\n+import org.apache.spark.sql.catalyst.analysis.NoSuchTableException;\n+import org.apache.spark.sql.connector.catalog.TableCatalog;\n+import org.junit.After;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.TemporaryFolder;\n+import org.junit.runners.Parameterized;\n+\n+public class TestCreateActions extends SparkCatalogTestBase {\n+\n+  // Only valid for IcebergV2Catalog - Hadoop Catalog does not support Staged Tables\n+  @Parameterized.Parameters(name = \"Catalog Name {0} - Options {2}\")\n+  public static Object[][] parameters() {\n+    return new Object[][] {\n+        new Object[] {\"spark_catalog\", SparkSessionCatalog.class.getName(), ImmutableMap.of(\n+            \"type\", \"hive\",\n+            \"default-namespace\", \"default\",\n+            \"parquet-enabled\", \"true\",\n+            \"cache-enabled\", \"false\" // Spark will delete tables using v1, leaving the cache out of sync\n+        )},\n+        new Object[] { \"testhive\", SparkCatalog.class.getName(), ImmutableMap.of(\n+            \"type\", \"hive\",\n+            \"default-namespace\", \"default\"\n+        )}\n+    };\n+  }\n+\n+  @Rule\n+  public TemporaryFolder temp = new TemporaryFolder();\n+\n+  String baseTableName = \"baseTable\";\n+  File tableDir;\n+  String tableLocation;\n+  final String implementation;\n+  final String type;\n+  final TableCatalog catalog;\n+\n+  public TestCreateActions(\n+      String catalogName,\n+      String implementation,\n+      Map<String, String> config) {\n+    super(catalogName, implementation, config);\n+    this.catalog = (TableCatalog) spark.sessionState().catalogManager().catalog(catalogName);\n+    this.implementation = implementation;\n+    this.type = config.get(\"type\");\n+  }\n+\n+  @Before\n+  public void before() {\n+    try {\n+      this.tableDir = temp.newFolder();\n+    } catch (IOException e) {\n+      throw new RuntimeException(e);\n+    }\n+    this.tableLocation = tableDir.toURI().toString();\n+\n+    spark.conf().set(\"hive.exec.dynamic.partition\", \"true\");\n+    spark.conf().set(\"hive.exec.dynamic.partition.mode\", \"nonstrict\");\n+    spark.sql(String.format(\"DROP TABLE IF EXISTS %s\", baseTableName));\n+\n+\n+    List<SimpleRecord> expected = Lists.newArrayList(\n+        new SimpleRecord(1, \"a\"),\n+        new SimpleRecord(2, \"b\"),\n+        new SimpleRecord(3, \"c\")\n+    );\n+\n+    Dataset<Row> df = spark.createDataFrame(expected, SimpleRecord.class);\n+\n+    df.select(\"id\", \"data\").orderBy(\"data\").write()\n+        .mode(\"append\")\n+        .option(\"path\", tableLocation)\n+        .saveAsTable(baseTableName);\n+  }\n+\n+  @After\n+  public void after() throws IOException {\n+    // Drop the hive table.\n+    spark.sql(String.format(\"DROP TABLE IF EXISTS %s\", baseTableName));\n+  }\n+\n+\n+  @Test\n+  public void testMigratePartitioned() throws Exception {\n+    String dest = uniqueName(\"iceberg_migrate_partitioned\");\n+    String source = uniqueName(\"test_migrate_partitioned_table\");\n+    testCreate(source,\n+        dest,\n+        \"CREATE TABLE %s using parquet PARTITIONED BY (id) location '%s' AS SELECT * FROM %s\",\n+        () -> Actions.migrate(source).as(dest),\n+        3);\n+  }\n+\n+  @Test\n+  public void testMigrateUnpartitioned() throws Exception {\n+    String dest = uniqueName(\"iceberg_migrate_unpartitioned\");\n+    String source = uniqueName(\"test_migrate_unpartitioned_table\");\n+    testCreate(source,\n+        dest,\n+        \"CREATE TABLE %s using parquet location '%s' AS SELECT * FROM %s\",\n+        () -> Actions.migrate(source).as(dest),\n+        2);\n+  }\n+\n+  @Test\n+  public void testMigrateReplace() throws Exception {\n+    // We can't do a replacement unless we have overridden the spark_catalog\n+    if (catalog.name().equals(\"spark_catalog\")) {\n+      String source = uniqueName(uniqueName(\"iceberg_migrate_replace\"));\n+      testCreate(source,\n+          source,\n+          \"CREATE TABLE %s using parquet PARTITIONED BY (id) location '%s' AS SELECT * FROM %s\",\n+          () -> Actions.migrate(source),\n+          3);\n+    }\n+  }\n+\n+  @Test\n+  public void testSnapshotPartitioned() throws Exception {\n+    File location = temp.newFolder();\n+    String dest = uniqueName(\"iceberg_snapshot_partitioned\");\n+    String source = uniqueName(\"test_snapshot_partitioned_table\");\n+    testCreate(source,\n+        dest,\n+        \"CREATE TABLE %s using parquet PARTITIONED BY (id) location '%s' AS SELECT * FROM %s\",\n+        () -> Actions.snapshot(source, dest, location.toString()),\n+        3);\n+    testIsolatedSnapshot(source, dest);\n+  }\n+\n+  @Test\n+  public void testSnapshotUnpartitioned() throws Exception {\n+    File location = temp.newFolder();\n+    String dest = uniqueName(\"iceberg_snapshot_unpartitioned\");\n+    String source = uniqueName(\"test_snapshot_unpartitioned_table\");\n+    testCreate(source,\n+        dest,\n+        \"CREATE TABLE %s using parquet location '%s' AS SELECT * FROM %s\",\n+        () -> Actions.snapshot(source, dest, location.toString()),\n+        2);\n+    testIsolatedSnapshot(source, dest);\n+  }\n+\n+  @Test\n+  public void testSnapshotHiveTable() throws Exception {\n+    File location = temp.newFolder();\n+    String dest = uniqueName(\"iceberg_snapshot_hive_table\");\n+    String source = uniqueName(\"snapshot_hive_table\");\n+    testCreate(source,\n+        dest,\n+        String.format(\"CREATE EXTERNAL TABLE %s (id Int, data String) STORED AS parquet LOCATION '%s'\", source,\n+            tableLocation),\n+        () -> Actions.snapshot(source, dest, location.toString()),\n+        3);\n+    testIsolatedSnapshot(source, dest);\n+  }\n+\n+  @Test\n+  public void testProperties() throws Exception {\n+    String dest = uniqueName(\"iceberg_properties\");\n+    String source = uniqueName(\"test_properties_table\");\n+    Map<String, String> props = Maps.newHashMap();\n+    props.put(\"city\", \"New Orleans\");\n+    props.put(\"note\", \"Jazz\");\n+    testCreate(source,\n+        dest,\n+        \"CREATE TABLE %s using parquet location '%s' AS SELECT * FROM %s\",\n+        () -> Actions.migrate(source).as(dest)\n+        .withAdditionalProperty(\"dogs\", \"sundance\")\n+        .withAdditionalProperties(props),\n+        2);\n+\n+    SparkTable table = loadTable(dest);\n+\n+\n+    Map<String, String> expectedProps = Maps.newHashMap();\n+    expectedProps.putAll(props);\n+    expectedProps.put(\"dogs\", \"sundance\");\n+\n+    for (Map.Entry<String, String> entry : expectedProps.entrySet()) {\n+      Assert.assertTrue(\n+          \"Created table missing property \" + entry.getKey(),\n+          table.properties().containsKey(entry.getKey()));\n+      Assert.assertEquals(\"Property value is not the expected value\",\n+          entry.getValue(), table.properties().get(entry.getKey()));\n+    }\n+  }\n+\n+  private SparkTable loadTable(String name) throws NoSuchTableException {\n+    return (SparkTable) catalog.loadTable(Spark3Util.catalogAndIdentifier(spark, name).identifier());\n+  }\n+\n+  // Creates a table, runs the migration command and checks the results.\n+  private void testCreate(String source, String dest, String sqlCreate, Supplier<CreateAction> action,\n+      long expectedMigratedFiles) throws\n+      Exception {\n+\n+    File location = temp.newFolder();\n+\n+    spark.sql(String.format(sqlCreate, source, location, baseTableName));\n+\n+    long migratedFiles = action.get().execute();\n+\n+    SparkTable table = loadTable(dest);\n+\n+    Assert.assertEquals(\"Provider should be iceberg\", \"iceberg\",\n+        table.properties().get(TableCatalog.PROP_PROVIDER));\n+    Assert.assertEquals(\"Expected number of migrated files\", expectedMigratedFiles, migratedFiles);\n+    Assert.assertEquals(\"Expected rows in table \", 3, spark.table(dest).count());\n+  }\n+\n+  // Inserts records into the destination, makes sure those records exist and source table is unchanged\n+  private void testIsolatedSnapshot(String source, String dest) {\n+    List<Row> expected = spark.sql(String.format(\"SELECT * FROM %s\", source)).collectAsList();\n+\n+    List<SimpleRecord> extraData = Lists.newArrayList(\n+        new SimpleRecord(4, \"d\")\n+    );\n+    Dataset<Row> df = spark.createDataFrame(extraData, SimpleRecord.class);\n+    df.write().format(\"iceberg\").mode(\"append\").saveAsTable(dest);\n+\n+    List<Row> result = spark.sql(String.format(\"SELECT * FROM %s\", source)).collectAsList();\n+    Assert.assertEquals(\"No additional rows should be added to the original table\", expected.size(),\n+        result.size());\n+\n+    List<Row> snapshot = spark.sql(String.format(\"SELECT * FROM %s WHERE id = 4 AND data = 'd'\", dest)).collectAsList();\n+    Assert.assertEquals(\"Added row not found in snapshot\", 1, snapshot.size());\n+  }\n+\n+  private String uniqueName(String source) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "216eb56a60a7ea3b4bdd9465ae92116ab44ef8b8"}, "originalPosition": 269}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjEzNDczNg==", "bodyText": "This is mostly because the tests take way too long when I was running them locally because of HiveMetastore retries. When every test had a unique name I didn't have to drop tables and I wouldn't have to wait for the metastore to check for 2 minutes to see whether the table existed when I called DROP IF EXISTS.\nThis is one of the reasons I brought up the retry length a while back, I just couldn't efficiently test this code on my local machine.", "url": "https://github.com/apache/iceberg/pull/1525#discussion_r516134736", "createdAt": "2020-11-02T17:22:59Z", "author": {"login": "RussellSpitzer"}, "path": "spark3/src/test/java/org/apache/iceberg/actions/TestCreateActions.java", "diffHunk": "@@ -0,0 +1,272 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.actions;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.function.Supplier;\n+import org.apache.iceberg.relocated.com.google.common.collect.ImmutableMap;\n+import org.apache.iceberg.relocated.com.google.common.collect.Lists;\n+import org.apache.iceberg.relocated.com.google.common.collect.Maps;\n+import org.apache.iceberg.spark.Spark3Util;\n+import org.apache.iceberg.spark.SparkCatalog;\n+import org.apache.iceberg.spark.SparkCatalogTestBase;\n+import org.apache.iceberg.spark.SparkSessionCatalog;\n+import org.apache.iceberg.spark.source.SimpleRecord;\n+import org.apache.iceberg.spark.source.SparkTable;\n+import org.apache.spark.sql.Dataset;\n+import org.apache.spark.sql.Row;\n+import org.apache.spark.sql.catalyst.analysis.NoSuchTableException;\n+import org.apache.spark.sql.connector.catalog.TableCatalog;\n+import org.junit.After;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.TemporaryFolder;\n+import org.junit.runners.Parameterized;\n+\n+public class TestCreateActions extends SparkCatalogTestBase {\n+\n+  // Only valid for IcebergV2Catalog - Hadoop Catalog does not support Staged Tables\n+  @Parameterized.Parameters(name = \"Catalog Name {0} - Options {2}\")\n+  public static Object[][] parameters() {\n+    return new Object[][] {\n+        new Object[] {\"spark_catalog\", SparkSessionCatalog.class.getName(), ImmutableMap.of(\n+            \"type\", \"hive\",\n+            \"default-namespace\", \"default\",\n+            \"parquet-enabled\", \"true\",\n+            \"cache-enabled\", \"false\" // Spark will delete tables using v1, leaving the cache out of sync\n+        )},\n+        new Object[] { \"testhive\", SparkCatalog.class.getName(), ImmutableMap.of(\n+            \"type\", \"hive\",\n+            \"default-namespace\", \"default\"\n+        )}\n+    };\n+  }\n+\n+  @Rule\n+  public TemporaryFolder temp = new TemporaryFolder();\n+\n+  String baseTableName = \"baseTable\";\n+  File tableDir;\n+  String tableLocation;\n+  final String implementation;\n+  final String type;\n+  final TableCatalog catalog;\n+\n+  public TestCreateActions(\n+      String catalogName,\n+      String implementation,\n+      Map<String, String> config) {\n+    super(catalogName, implementation, config);\n+    this.catalog = (TableCatalog) spark.sessionState().catalogManager().catalog(catalogName);\n+    this.implementation = implementation;\n+    this.type = config.get(\"type\");\n+  }\n+\n+  @Before\n+  public void before() {\n+    try {\n+      this.tableDir = temp.newFolder();\n+    } catch (IOException e) {\n+      throw new RuntimeException(e);\n+    }\n+    this.tableLocation = tableDir.toURI().toString();\n+\n+    spark.conf().set(\"hive.exec.dynamic.partition\", \"true\");\n+    spark.conf().set(\"hive.exec.dynamic.partition.mode\", \"nonstrict\");\n+    spark.sql(String.format(\"DROP TABLE IF EXISTS %s\", baseTableName));\n+\n+\n+    List<SimpleRecord> expected = Lists.newArrayList(\n+        new SimpleRecord(1, \"a\"),\n+        new SimpleRecord(2, \"b\"),\n+        new SimpleRecord(3, \"c\")\n+    );\n+\n+    Dataset<Row> df = spark.createDataFrame(expected, SimpleRecord.class);\n+\n+    df.select(\"id\", \"data\").orderBy(\"data\").write()\n+        .mode(\"append\")\n+        .option(\"path\", tableLocation)\n+        .saveAsTable(baseTableName);\n+  }\n+\n+  @After\n+  public void after() throws IOException {\n+    // Drop the hive table.\n+    spark.sql(String.format(\"DROP TABLE IF EXISTS %s\", baseTableName));\n+  }\n+\n+\n+  @Test\n+  public void testMigratePartitioned() throws Exception {\n+    String dest = uniqueName(\"iceberg_migrate_partitioned\");\n+    String source = uniqueName(\"test_migrate_partitioned_table\");\n+    testCreate(source,\n+        dest,\n+        \"CREATE TABLE %s using parquet PARTITIONED BY (id) location '%s' AS SELECT * FROM %s\",\n+        () -> Actions.migrate(source).as(dest),\n+        3);\n+  }\n+\n+  @Test\n+  public void testMigrateUnpartitioned() throws Exception {\n+    String dest = uniqueName(\"iceberg_migrate_unpartitioned\");\n+    String source = uniqueName(\"test_migrate_unpartitioned_table\");\n+    testCreate(source,\n+        dest,\n+        \"CREATE TABLE %s using parquet location '%s' AS SELECT * FROM %s\",\n+        () -> Actions.migrate(source).as(dest),\n+        2);\n+  }\n+\n+  @Test\n+  public void testMigrateReplace() throws Exception {\n+    // We can't do a replacement unless we have overridden the spark_catalog\n+    if (catalog.name().equals(\"spark_catalog\")) {\n+      String source = uniqueName(uniqueName(\"iceberg_migrate_replace\"));\n+      testCreate(source,\n+          source,\n+          \"CREATE TABLE %s using parquet PARTITIONED BY (id) location '%s' AS SELECT * FROM %s\",\n+          () -> Actions.migrate(source),\n+          3);\n+    }\n+  }\n+\n+  @Test\n+  public void testSnapshotPartitioned() throws Exception {\n+    File location = temp.newFolder();\n+    String dest = uniqueName(\"iceberg_snapshot_partitioned\");\n+    String source = uniqueName(\"test_snapshot_partitioned_table\");\n+    testCreate(source,\n+        dest,\n+        \"CREATE TABLE %s using parquet PARTITIONED BY (id) location '%s' AS SELECT * FROM %s\",\n+        () -> Actions.snapshot(source, dest, location.toString()),\n+        3);\n+    testIsolatedSnapshot(source, dest);\n+  }\n+\n+  @Test\n+  public void testSnapshotUnpartitioned() throws Exception {\n+    File location = temp.newFolder();\n+    String dest = uniqueName(\"iceberg_snapshot_unpartitioned\");\n+    String source = uniqueName(\"test_snapshot_unpartitioned_table\");\n+    testCreate(source,\n+        dest,\n+        \"CREATE TABLE %s using parquet location '%s' AS SELECT * FROM %s\",\n+        () -> Actions.snapshot(source, dest, location.toString()),\n+        2);\n+    testIsolatedSnapshot(source, dest);\n+  }\n+\n+  @Test\n+  public void testSnapshotHiveTable() throws Exception {\n+    File location = temp.newFolder();\n+    String dest = uniqueName(\"iceberg_snapshot_hive_table\");\n+    String source = uniqueName(\"snapshot_hive_table\");\n+    testCreate(source,\n+        dest,\n+        String.format(\"CREATE EXTERNAL TABLE %s (id Int, data String) STORED AS parquet LOCATION '%s'\", source,\n+            tableLocation),\n+        () -> Actions.snapshot(source, dest, location.toString()),\n+        3);\n+    testIsolatedSnapshot(source, dest);\n+  }\n+\n+  @Test\n+  public void testProperties() throws Exception {\n+    String dest = uniqueName(\"iceberg_properties\");\n+    String source = uniqueName(\"test_properties_table\");\n+    Map<String, String> props = Maps.newHashMap();\n+    props.put(\"city\", \"New Orleans\");\n+    props.put(\"note\", \"Jazz\");\n+    testCreate(source,\n+        dest,\n+        \"CREATE TABLE %s using parquet location '%s' AS SELECT * FROM %s\",\n+        () -> Actions.migrate(source).as(dest)\n+        .withAdditionalProperty(\"dogs\", \"sundance\")\n+        .withAdditionalProperties(props),\n+        2);\n+\n+    SparkTable table = loadTable(dest);\n+\n+\n+    Map<String, String> expectedProps = Maps.newHashMap();\n+    expectedProps.putAll(props);\n+    expectedProps.put(\"dogs\", \"sundance\");\n+\n+    for (Map.Entry<String, String> entry : expectedProps.entrySet()) {\n+      Assert.assertTrue(\n+          \"Created table missing property \" + entry.getKey(),\n+          table.properties().containsKey(entry.getKey()));\n+      Assert.assertEquals(\"Property value is not the expected value\",\n+          entry.getValue(), table.properties().get(entry.getKey()));\n+    }\n+  }\n+\n+  private SparkTable loadTable(String name) throws NoSuchTableException {\n+    return (SparkTable) catalog.loadTable(Spark3Util.catalogAndIdentifier(spark, name).identifier());\n+  }\n+\n+  // Creates a table, runs the migration command and checks the results.\n+  private void testCreate(String source, String dest, String sqlCreate, Supplier<CreateAction> action,\n+      long expectedMigratedFiles) throws\n+      Exception {\n+\n+    File location = temp.newFolder();\n+\n+    spark.sql(String.format(sqlCreate, source, location, baseTableName));\n+\n+    long migratedFiles = action.get().execute();\n+\n+    SparkTable table = loadTable(dest);\n+\n+    Assert.assertEquals(\"Provider should be iceberg\", \"iceberg\",\n+        table.properties().get(TableCatalog.PROP_PROVIDER));\n+    Assert.assertEquals(\"Expected number of migrated files\", expectedMigratedFiles, migratedFiles);\n+    Assert.assertEquals(\"Expected rows in table \", 3, spark.table(dest).count());\n+  }\n+\n+  // Inserts records into the destination, makes sure those records exist and source table is unchanged\n+  private void testIsolatedSnapshot(String source, String dest) {\n+    List<Row> expected = spark.sql(String.format(\"SELECT * FROM %s\", source)).collectAsList();\n+\n+    List<SimpleRecord> extraData = Lists.newArrayList(\n+        new SimpleRecord(4, \"d\")\n+    );\n+    Dataset<Row> df = spark.createDataFrame(extraData, SimpleRecord.class);\n+    df.write().format(\"iceberg\").mode(\"append\").saveAsTable(dest);\n+\n+    List<Row> result = spark.sql(String.format(\"SELECT * FROM %s\", source)).collectAsList();\n+    Assert.assertEquals(\"No additional rows should be added to the original table\", expected.size(),\n+        result.size());\n+\n+    List<Row> snapshot = spark.sql(String.format(\"SELECT * FROM %s WHERE id = 4 AND data = 'd'\", dest)).collectAsList();\n+    Assert.assertEquals(\"Added row not found in snapshot\", 1, snapshot.size());\n+  }\n+\n+  private String uniqueName(String source) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTY5MTU2Ng=="}, "originalCommit": {"oid": "216eb56a60a7ea3b4bdd9465ae92116ab44ef8b8"}, "originalPosition": 269}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjIwOTc4OQ==", "bodyText": "I don't think a DROP IF EXISTS should take 2 minutes with the retry. That sounds like something in the catalog is broken. The retry should only happen if the metadata file is known, but can't be loaded. In that case, the table does exist.\nMaybe the test before/after methods are dropping the temporary files before dropping the table?", "url": "https://github.com/apache/iceberg/pull/1525#discussion_r516209789", "createdAt": "2020-11-02T19:37:25Z", "author": {"login": "rdblue"}, "path": "spark3/src/test/java/org/apache/iceberg/actions/TestCreateActions.java", "diffHunk": "@@ -0,0 +1,272 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.actions;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.function.Supplier;\n+import org.apache.iceberg.relocated.com.google.common.collect.ImmutableMap;\n+import org.apache.iceberg.relocated.com.google.common.collect.Lists;\n+import org.apache.iceberg.relocated.com.google.common.collect.Maps;\n+import org.apache.iceberg.spark.Spark3Util;\n+import org.apache.iceberg.spark.SparkCatalog;\n+import org.apache.iceberg.spark.SparkCatalogTestBase;\n+import org.apache.iceberg.spark.SparkSessionCatalog;\n+import org.apache.iceberg.spark.source.SimpleRecord;\n+import org.apache.iceberg.spark.source.SparkTable;\n+import org.apache.spark.sql.Dataset;\n+import org.apache.spark.sql.Row;\n+import org.apache.spark.sql.catalyst.analysis.NoSuchTableException;\n+import org.apache.spark.sql.connector.catalog.TableCatalog;\n+import org.junit.After;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.TemporaryFolder;\n+import org.junit.runners.Parameterized;\n+\n+public class TestCreateActions extends SparkCatalogTestBase {\n+\n+  // Only valid for IcebergV2Catalog - Hadoop Catalog does not support Staged Tables\n+  @Parameterized.Parameters(name = \"Catalog Name {0} - Options {2}\")\n+  public static Object[][] parameters() {\n+    return new Object[][] {\n+        new Object[] {\"spark_catalog\", SparkSessionCatalog.class.getName(), ImmutableMap.of(\n+            \"type\", \"hive\",\n+            \"default-namespace\", \"default\",\n+            \"parquet-enabled\", \"true\",\n+            \"cache-enabled\", \"false\" // Spark will delete tables using v1, leaving the cache out of sync\n+        )},\n+        new Object[] { \"testhive\", SparkCatalog.class.getName(), ImmutableMap.of(\n+            \"type\", \"hive\",\n+            \"default-namespace\", \"default\"\n+        )}\n+    };\n+  }\n+\n+  @Rule\n+  public TemporaryFolder temp = new TemporaryFolder();\n+\n+  String baseTableName = \"baseTable\";\n+  File tableDir;\n+  String tableLocation;\n+  final String implementation;\n+  final String type;\n+  final TableCatalog catalog;\n+\n+  public TestCreateActions(\n+      String catalogName,\n+      String implementation,\n+      Map<String, String> config) {\n+    super(catalogName, implementation, config);\n+    this.catalog = (TableCatalog) spark.sessionState().catalogManager().catalog(catalogName);\n+    this.implementation = implementation;\n+    this.type = config.get(\"type\");\n+  }\n+\n+  @Before\n+  public void before() {\n+    try {\n+      this.tableDir = temp.newFolder();\n+    } catch (IOException e) {\n+      throw new RuntimeException(e);\n+    }\n+    this.tableLocation = tableDir.toURI().toString();\n+\n+    spark.conf().set(\"hive.exec.dynamic.partition\", \"true\");\n+    spark.conf().set(\"hive.exec.dynamic.partition.mode\", \"nonstrict\");\n+    spark.sql(String.format(\"DROP TABLE IF EXISTS %s\", baseTableName));\n+\n+\n+    List<SimpleRecord> expected = Lists.newArrayList(\n+        new SimpleRecord(1, \"a\"),\n+        new SimpleRecord(2, \"b\"),\n+        new SimpleRecord(3, \"c\")\n+    );\n+\n+    Dataset<Row> df = spark.createDataFrame(expected, SimpleRecord.class);\n+\n+    df.select(\"id\", \"data\").orderBy(\"data\").write()\n+        .mode(\"append\")\n+        .option(\"path\", tableLocation)\n+        .saveAsTable(baseTableName);\n+  }\n+\n+  @After\n+  public void after() throws IOException {\n+    // Drop the hive table.\n+    spark.sql(String.format(\"DROP TABLE IF EXISTS %s\", baseTableName));\n+  }\n+\n+\n+  @Test\n+  public void testMigratePartitioned() throws Exception {\n+    String dest = uniqueName(\"iceberg_migrate_partitioned\");\n+    String source = uniqueName(\"test_migrate_partitioned_table\");\n+    testCreate(source,\n+        dest,\n+        \"CREATE TABLE %s using parquet PARTITIONED BY (id) location '%s' AS SELECT * FROM %s\",\n+        () -> Actions.migrate(source).as(dest),\n+        3);\n+  }\n+\n+  @Test\n+  public void testMigrateUnpartitioned() throws Exception {\n+    String dest = uniqueName(\"iceberg_migrate_unpartitioned\");\n+    String source = uniqueName(\"test_migrate_unpartitioned_table\");\n+    testCreate(source,\n+        dest,\n+        \"CREATE TABLE %s using parquet location '%s' AS SELECT * FROM %s\",\n+        () -> Actions.migrate(source).as(dest),\n+        2);\n+  }\n+\n+  @Test\n+  public void testMigrateReplace() throws Exception {\n+    // We can't do a replacement unless we have overridden the spark_catalog\n+    if (catalog.name().equals(\"spark_catalog\")) {\n+      String source = uniqueName(uniqueName(\"iceberg_migrate_replace\"));\n+      testCreate(source,\n+          source,\n+          \"CREATE TABLE %s using parquet PARTITIONED BY (id) location '%s' AS SELECT * FROM %s\",\n+          () -> Actions.migrate(source),\n+          3);\n+    }\n+  }\n+\n+  @Test\n+  public void testSnapshotPartitioned() throws Exception {\n+    File location = temp.newFolder();\n+    String dest = uniqueName(\"iceberg_snapshot_partitioned\");\n+    String source = uniqueName(\"test_snapshot_partitioned_table\");\n+    testCreate(source,\n+        dest,\n+        \"CREATE TABLE %s using parquet PARTITIONED BY (id) location '%s' AS SELECT * FROM %s\",\n+        () -> Actions.snapshot(source, dest, location.toString()),\n+        3);\n+    testIsolatedSnapshot(source, dest);\n+  }\n+\n+  @Test\n+  public void testSnapshotUnpartitioned() throws Exception {\n+    File location = temp.newFolder();\n+    String dest = uniqueName(\"iceberg_snapshot_unpartitioned\");\n+    String source = uniqueName(\"test_snapshot_unpartitioned_table\");\n+    testCreate(source,\n+        dest,\n+        \"CREATE TABLE %s using parquet location '%s' AS SELECT * FROM %s\",\n+        () -> Actions.snapshot(source, dest, location.toString()),\n+        2);\n+    testIsolatedSnapshot(source, dest);\n+  }\n+\n+  @Test\n+  public void testSnapshotHiveTable() throws Exception {\n+    File location = temp.newFolder();\n+    String dest = uniqueName(\"iceberg_snapshot_hive_table\");\n+    String source = uniqueName(\"snapshot_hive_table\");\n+    testCreate(source,\n+        dest,\n+        String.format(\"CREATE EXTERNAL TABLE %s (id Int, data String) STORED AS parquet LOCATION '%s'\", source,\n+            tableLocation),\n+        () -> Actions.snapshot(source, dest, location.toString()),\n+        3);\n+    testIsolatedSnapshot(source, dest);\n+  }\n+\n+  @Test\n+  public void testProperties() throws Exception {\n+    String dest = uniqueName(\"iceberg_properties\");\n+    String source = uniqueName(\"test_properties_table\");\n+    Map<String, String> props = Maps.newHashMap();\n+    props.put(\"city\", \"New Orleans\");\n+    props.put(\"note\", \"Jazz\");\n+    testCreate(source,\n+        dest,\n+        \"CREATE TABLE %s using parquet location '%s' AS SELECT * FROM %s\",\n+        () -> Actions.migrate(source).as(dest)\n+        .withAdditionalProperty(\"dogs\", \"sundance\")\n+        .withAdditionalProperties(props),\n+        2);\n+\n+    SparkTable table = loadTable(dest);\n+\n+\n+    Map<String, String> expectedProps = Maps.newHashMap();\n+    expectedProps.putAll(props);\n+    expectedProps.put(\"dogs\", \"sundance\");\n+\n+    for (Map.Entry<String, String> entry : expectedProps.entrySet()) {\n+      Assert.assertTrue(\n+          \"Created table missing property \" + entry.getKey(),\n+          table.properties().containsKey(entry.getKey()));\n+      Assert.assertEquals(\"Property value is not the expected value\",\n+          entry.getValue(), table.properties().get(entry.getKey()));\n+    }\n+  }\n+\n+  private SparkTable loadTable(String name) throws NoSuchTableException {\n+    return (SparkTable) catalog.loadTable(Spark3Util.catalogAndIdentifier(spark, name).identifier());\n+  }\n+\n+  // Creates a table, runs the migration command and checks the results.\n+  private void testCreate(String source, String dest, String sqlCreate, Supplier<CreateAction> action,\n+      long expectedMigratedFiles) throws\n+      Exception {\n+\n+    File location = temp.newFolder();\n+\n+    spark.sql(String.format(sqlCreate, source, location, baseTableName));\n+\n+    long migratedFiles = action.get().execute();\n+\n+    SparkTable table = loadTable(dest);\n+\n+    Assert.assertEquals(\"Provider should be iceberg\", \"iceberg\",\n+        table.properties().get(TableCatalog.PROP_PROVIDER));\n+    Assert.assertEquals(\"Expected number of migrated files\", expectedMigratedFiles, migratedFiles);\n+    Assert.assertEquals(\"Expected rows in table \", 3, spark.table(dest).count());\n+  }\n+\n+  // Inserts records into the destination, makes sure those records exist and source table is unchanged\n+  private void testIsolatedSnapshot(String source, String dest) {\n+    List<Row> expected = spark.sql(String.format(\"SELECT * FROM %s\", source)).collectAsList();\n+\n+    List<SimpleRecord> extraData = Lists.newArrayList(\n+        new SimpleRecord(4, \"d\")\n+    );\n+    Dataset<Row> df = spark.createDataFrame(extraData, SimpleRecord.class);\n+    df.write().format(\"iceberg\").mode(\"append\").saveAsTable(dest);\n+\n+    List<Row> result = spark.sql(String.format(\"SELECT * FROM %s\", source)).collectAsList();\n+    Assert.assertEquals(\"No additional rows should be added to the original table\", expected.size(),\n+        result.size());\n+\n+    List<Row> snapshot = spark.sql(String.format(\"SELECT * FROM %s WHERE id = 4 AND data = 'd'\", dest)).collectAsList();\n+    Assert.assertEquals(\"Added row not found in snapshot\", 1, snapshot.size());\n+  }\n+\n+  private String uniqueName(String source) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTY5MTU2Ng=="}, "originalCommit": {"oid": "216eb56a60a7ea3b4bdd9465ae92116ab44ef8b8"}, "originalPosition": 269}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzMTY5ODgxOnYy", "diffSide": "RIGHT", "path": "spark3/src/test/java/org/apache/iceberg/actions/TestCreateActions.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQwMDowNjozMlrOHrzU_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQyMDoyODo1N1rOH0QJEQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTY5MTc3NQ==", "bodyText": "What is IcebergV2Catalog? It looks like SparkCatalog supports staged tables with both Hadoop and Hive catalogs.", "url": "https://github.com/apache/iceberg/pull/1525#discussion_r515691775", "createdAt": "2020-11-02T00:06:32Z", "author": {"login": "rdblue"}, "path": "spark3/src/test/java/org/apache/iceberg/actions/TestCreateActions.java", "diffHunk": "@@ -0,0 +1,272 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.actions;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.function.Supplier;\n+import org.apache.iceberg.relocated.com.google.common.collect.ImmutableMap;\n+import org.apache.iceberg.relocated.com.google.common.collect.Lists;\n+import org.apache.iceberg.relocated.com.google.common.collect.Maps;\n+import org.apache.iceberg.spark.Spark3Util;\n+import org.apache.iceberg.spark.SparkCatalog;\n+import org.apache.iceberg.spark.SparkCatalogTestBase;\n+import org.apache.iceberg.spark.SparkSessionCatalog;\n+import org.apache.iceberg.spark.source.SimpleRecord;\n+import org.apache.iceberg.spark.source.SparkTable;\n+import org.apache.spark.sql.Dataset;\n+import org.apache.spark.sql.Row;\n+import org.apache.spark.sql.catalyst.analysis.NoSuchTableException;\n+import org.apache.spark.sql.connector.catalog.TableCatalog;\n+import org.junit.After;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.TemporaryFolder;\n+import org.junit.runners.Parameterized;\n+\n+public class TestCreateActions extends SparkCatalogTestBase {\n+\n+  // Only valid for IcebergV2Catalog - Hadoop Catalog does not support Staged Tables", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "216eb56a60a7ea3b4bdd9465ae92116ab44ef8b8"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjEzMTM4OQ==", "bodyText": "Yeah I can probably allow this and test it better. I was running into issues because the HadoopOps fails if you manually specify a location for metadata or data since that violates the table structure. Since the current implementation always manually specifies these locations it breaks with the Hadoop Catalog if you don't pick out the exact right location when snapshotting.\nLet me go back and see if I can make that less confusing and support the Hadoop backed Catalog better", "url": "https://github.com/apache/iceberg/pull/1525#discussion_r516131389", "createdAt": "2020-11-02T17:18:51Z", "author": {"login": "RussellSpitzer"}, "path": "spark3/src/test/java/org/apache/iceberg/actions/TestCreateActions.java", "diffHunk": "@@ -0,0 +1,272 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.actions;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.function.Supplier;\n+import org.apache.iceberg.relocated.com.google.common.collect.ImmutableMap;\n+import org.apache.iceberg.relocated.com.google.common.collect.Lists;\n+import org.apache.iceberg.relocated.com.google.common.collect.Maps;\n+import org.apache.iceberg.spark.Spark3Util;\n+import org.apache.iceberg.spark.SparkCatalog;\n+import org.apache.iceberg.spark.SparkCatalogTestBase;\n+import org.apache.iceberg.spark.SparkSessionCatalog;\n+import org.apache.iceberg.spark.source.SimpleRecord;\n+import org.apache.iceberg.spark.source.SparkTable;\n+import org.apache.spark.sql.Dataset;\n+import org.apache.spark.sql.Row;\n+import org.apache.spark.sql.catalyst.analysis.NoSuchTableException;\n+import org.apache.spark.sql.connector.catalog.TableCatalog;\n+import org.junit.After;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.TemporaryFolder;\n+import org.junit.runners.Parameterized;\n+\n+public class TestCreateActions extends SparkCatalogTestBase {\n+\n+  // Only valid for IcebergV2Catalog - Hadoop Catalog does not support Staged Tables", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTY5MTc3NQ=="}, "originalCommit": {"oid": "216eb56a60a7ea3b4bdd9465ae92116ab44ef8b8"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjIwOTE0Mw==", "bodyText": "It sounds like creating a snapshot table should just use the new table's default location rather than requiring a location. Why did you choose to require a location?", "url": "https://github.com/apache/iceberg/pull/1525#discussion_r516209143", "createdAt": "2020-11-02T19:36:06Z", "author": {"login": "rdblue"}, "path": "spark3/src/test/java/org/apache/iceberg/actions/TestCreateActions.java", "diffHunk": "@@ -0,0 +1,272 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.actions;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.function.Supplier;\n+import org.apache.iceberg.relocated.com.google.common.collect.ImmutableMap;\n+import org.apache.iceberg.relocated.com.google.common.collect.Lists;\n+import org.apache.iceberg.relocated.com.google.common.collect.Maps;\n+import org.apache.iceberg.spark.Spark3Util;\n+import org.apache.iceberg.spark.SparkCatalog;\n+import org.apache.iceberg.spark.SparkCatalogTestBase;\n+import org.apache.iceberg.spark.SparkSessionCatalog;\n+import org.apache.iceberg.spark.source.SimpleRecord;\n+import org.apache.iceberg.spark.source.SparkTable;\n+import org.apache.spark.sql.Dataset;\n+import org.apache.spark.sql.Row;\n+import org.apache.spark.sql.catalyst.analysis.NoSuchTableException;\n+import org.apache.spark.sql.connector.catalog.TableCatalog;\n+import org.junit.After;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.TemporaryFolder;\n+import org.junit.runners.Parameterized;\n+\n+public class TestCreateActions extends SparkCatalogTestBase {\n+\n+  // Only valid for IcebergV2Catalog - Hadoop Catalog does not support Staged Tables", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTY5MTc3NQ=="}, "originalCommit": {"oid": "216eb56a60a7ea3b4bdd9465ae92116ab44ef8b8"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDU1MjQ2NQ==", "bodyText": "Just had an internal user asking the same thing, gonna allow both.", "url": "https://github.com/apache/iceberg/pull/1525#discussion_r524552465", "createdAt": "2020-11-16T20:28:57Z", "author": {"login": "RussellSpitzer"}, "path": "spark3/src/test/java/org/apache/iceberg/actions/TestCreateActions.java", "diffHunk": "@@ -0,0 +1,272 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.actions;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.function.Supplier;\n+import org.apache.iceberg.relocated.com.google.common.collect.ImmutableMap;\n+import org.apache.iceberg.relocated.com.google.common.collect.Lists;\n+import org.apache.iceberg.relocated.com.google.common.collect.Maps;\n+import org.apache.iceberg.spark.Spark3Util;\n+import org.apache.iceberg.spark.SparkCatalog;\n+import org.apache.iceberg.spark.SparkCatalogTestBase;\n+import org.apache.iceberg.spark.SparkSessionCatalog;\n+import org.apache.iceberg.spark.source.SimpleRecord;\n+import org.apache.iceberg.spark.source.SparkTable;\n+import org.apache.spark.sql.Dataset;\n+import org.apache.spark.sql.Row;\n+import org.apache.spark.sql.catalyst.analysis.NoSuchTableException;\n+import org.apache.spark.sql.connector.catalog.TableCatalog;\n+import org.junit.After;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.TemporaryFolder;\n+import org.junit.runners.Parameterized;\n+\n+public class TestCreateActions extends SparkCatalogTestBase {\n+\n+  // Only valid for IcebergV2Catalog - Hadoop Catalog does not support Staged Tables", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTY5MTc3NQ=="}, "originalCommit": {"oid": "216eb56a60a7ea3b4bdd9465ae92116ab44ef8b8"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzMTY5OTA0OnYy", "diffSide": "RIGHT", "path": "spark3/src/test/java/org/apache/iceberg/actions/TestCreateActions.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQwMDowNjo0M1rOHrzVGw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQwMDowNjo0M1rOHrzVGw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTY5MTgwMw==", "bodyText": "Are these private?", "url": "https://github.com/apache/iceberg/pull/1525#discussion_r515691803", "createdAt": "2020-11-02T00:06:43Z", "author": {"login": "rdblue"}, "path": "spark3/src/test/java/org/apache/iceberg/actions/TestCreateActions.java", "diffHunk": "@@ -0,0 +1,272 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.actions;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.function.Supplier;\n+import org.apache.iceberg.relocated.com.google.common.collect.ImmutableMap;\n+import org.apache.iceberg.relocated.com.google.common.collect.Lists;\n+import org.apache.iceberg.relocated.com.google.common.collect.Maps;\n+import org.apache.iceberg.spark.Spark3Util;\n+import org.apache.iceberg.spark.SparkCatalog;\n+import org.apache.iceberg.spark.SparkCatalogTestBase;\n+import org.apache.iceberg.spark.SparkSessionCatalog;\n+import org.apache.iceberg.spark.source.SimpleRecord;\n+import org.apache.iceberg.spark.source.SparkTable;\n+import org.apache.spark.sql.Dataset;\n+import org.apache.spark.sql.Row;\n+import org.apache.spark.sql.catalyst.analysis.NoSuchTableException;\n+import org.apache.spark.sql.connector.catalog.TableCatalog;\n+import org.junit.After;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.TemporaryFolder;\n+import org.junit.runners.Parameterized;\n+\n+public class TestCreateActions extends SparkCatalogTestBase {\n+\n+  // Only valid for IcebergV2Catalog - Hadoop Catalog does not support Staged Tables\n+  @Parameterized.Parameters(name = \"Catalog Name {0} - Options {2}\")\n+  public static Object[][] parameters() {\n+    return new Object[][] {\n+        new Object[] {\"spark_catalog\", SparkSessionCatalog.class.getName(), ImmutableMap.of(\n+            \"type\", \"hive\",\n+            \"default-namespace\", \"default\",\n+            \"parquet-enabled\", \"true\",\n+            \"cache-enabled\", \"false\" // Spark will delete tables using v1, leaving the cache out of sync\n+        )},\n+        new Object[] { \"testhive\", SparkCatalog.class.getName(), ImmutableMap.of(\n+            \"type\", \"hive\",\n+            \"default-namespace\", \"default\"\n+        )}\n+    };\n+  }\n+\n+  @Rule\n+  public TemporaryFolder temp = new TemporaryFolder();\n+\n+  String baseTableName = \"baseTable\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "216eb56a60a7ea3b4bdd9465ae92116ab44ef8b8"}, "originalPosition": 70}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzMTY5OTM2OnYy", "diffSide": "RIGHT", "path": "spark3/src/test/java/org/apache/iceberg/actions/TestCreateActions.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQwMDowNzowM1rOHrzVSw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQwMDowNzowM1rOHrzVSw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTY5MTg1MQ==", "bodyText": "Nit: extra newline", "url": "https://github.com/apache/iceberg/pull/1525#discussion_r515691851", "createdAt": "2020-11-02T00:07:03Z", "author": {"login": "rdblue"}, "path": "spark3/src/test/java/org/apache/iceberg/actions/TestCreateActions.java", "diffHunk": "@@ -0,0 +1,272 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.actions;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.function.Supplier;\n+import org.apache.iceberg.relocated.com.google.common.collect.ImmutableMap;\n+import org.apache.iceberg.relocated.com.google.common.collect.Lists;\n+import org.apache.iceberg.relocated.com.google.common.collect.Maps;\n+import org.apache.iceberg.spark.Spark3Util;\n+import org.apache.iceberg.spark.SparkCatalog;\n+import org.apache.iceberg.spark.SparkCatalogTestBase;\n+import org.apache.iceberg.spark.SparkSessionCatalog;\n+import org.apache.iceberg.spark.source.SimpleRecord;\n+import org.apache.iceberg.spark.source.SparkTable;\n+import org.apache.spark.sql.Dataset;\n+import org.apache.spark.sql.Row;\n+import org.apache.spark.sql.catalyst.analysis.NoSuchTableException;\n+import org.apache.spark.sql.connector.catalog.TableCatalog;\n+import org.junit.After;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.TemporaryFolder;\n+import org.junit.runners.Parameterized;\n+\n+public class TestCreateActions extends SparkCatalogTestBase {\n+\n+  // Only valid for IcebergV2Catalog - Hadoop Catalog does not support Staged Tables\n+  @Parameterized.Parameters(name = \"Catalog Name {0} - Options {2}\")\n+  public static Object[][] parameters() {\n+    return new Object[][] {\n+        new Object[] {\"spark_catalog\", SparkSessionCatalog.class.getName(), ImmutableMap.of(\n+            \"type\", \"hive\",\n+            \"default-namespace\", \"default\",\n+            \"parquet-enabled\", \"true\",\n+            \"cache-enabled\", \"false\" // Spark will delete tables using v1, leaving the cache out of sync\n+        )},\n+        new Object[] { \"testhive\", SparkCatalog.class.getName(), ImmutableMap.of(\n+            \"type\", \"hive\",\n+            \"default-namespace\", \"default\"\n+        )}\n+    };\n+  }\n+\n+  @Rule\n+  public TemporaryFolder temp = new TemporaryFolder();\n+\n+  String baseTableName = \"baseTable\";\n+  File tableDir;\n+  String tableLocation;\n+  final String implementation;\n+  final String type;\n+  final TableCatalog catalog;\n+\n+  public TestCreateActions(\n+      String catalogName,\n+      String implementation,\n+      Map<String, String> config) {\n+    super(catalogName, implementation, config);\n+    this.catalog = (TableCatalog) spark.sessionState().catalogManager().catalog(catalogName);\n+    this.implementation = implementation;\n+    this.type = config.get(\"type\");\n+  }\n+\n+  @Before\n+  public void before() {\n+    try {\n+      this.tableDir = temp.newFolder();\n+    } catch (IOException e) {\n+      throw new RuntimeException(e);\n+    }\n+    this.tableLocation = tableDir.toURI().toString();\n+\n+    spark.conf().set(\"hive.exec.dynamic.partition\", \"true\");\n+    spark.conf().set(\"hive.exec.dynamic.partition.mode\", \"nonstrict\");\n+    spark.sql(String.format(\"DROP TABLE IF EXISTS %s\", baseTableName));\n+\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "216eb56a60a7ea3b4bdd9465ae92116ab44ef8b8"}, "originalPosition": 100}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzMTcwMDA2OnYy", "diffSide": "RIGHT", "path": "spark3/src/test/java/org/apache/iceberg/actions/TestCreateActions.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQwMDowODoxN1rOHrzVrw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQxNzoxOTozNFrOHsOMmQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTY5MTk1MQ==", "bodyText": "Can you use Assume for this instead of if? That way it shows up as a skipped case.", "url": "https://github.com/apache/iceberg/pull/1525#discussion_r515691951", "createdAt": "2020-11-02T00:08:17Z", "author": {"login": "rdblue"}, "path": "spark3/src/test/java/org/apache/iceberg/actions/TestCreateActions.java", "diffHunk": "@@ -0,0 +1,272 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.actions;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.function.Supplier;\n+import org.apache.iceberg.relocated.com.google.common.collect.ImmutableMap;\n+import org.apache.iceberg.relocated.com.google.common.collect.Lists;\n+import org.apache.iceberg.relocated.com.google.common.collect.Maps;\n+import org.apache.iceberg.spark.Spark3Util;\n+import org.apache.iceberg.spark.SparkCatalog;\n+import org.apache.iceberg.spark.SparkCatalogTestBase;\n+import org.apache.iceberg.spark.SparkSessionCatalog;\n+import org.apache.iceberg.spark.source.SimpleRecord;\n+import org.apache.iceberg.spark.source.SparkTable;\n+import org.apache.spark.sql.Dataset;\n+import org.apache.spark.sql.Row;\n+import org.apache.spark.sql.catalyst.analysis.NoSuchTableException;\n+import org.apache.spark.sql.connector.catalog.TableCatalog;\n+import org.junit.After;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.TemporaryFolder;\n+import org.junit.runners.Parameterized;\n+\n+public class TestCreateActions extends SparkCatalogTestBase {\n+\n+  // Only valid for IcebergV2Catalog - Hadoop Catalog does not support Staged Tables\n+  @Parameterized.Parameters(name = \"Catalog Name {0} - Options {2}\")\n+  public static Object[][] parameters() {\n+    return new Object[][] {\n+        new Object[] {\"spark_catalog\", SparkSessionCatalog.class.getName(), ImmutableMap.of(\n+            \"type\", \"hive\",\n+            \"default-namespace\", \"default\",\n+            \"parquet-enabled\", \"true\",\n+            \"cache-enabled\", \"false\" // Spark will delete tables using v1, leaving the cache out of sync\n+        )},\n+        new Object[] { \"testhive\", SparkCatalog.class.getName(), ImmutableMap.of(\n+            \"type\", \"hive\",\n+            \"default-namespace\", \"default\"\n+        )}\n+    };\n+  }\n+\n+  @Rule\n+  public TemporaryFolder temp = new TemporaryFolder();\n+\n+  String baseTableName = \"baseTable\";\n+  File tableDir;\n+  String tableLocation;\n+  final String implementation;\n+  final String type;\n+  final TableCatalog catalog;\n+\n+  public TestCreateActions(\n+      String catalogName,\n+      String implementation,\n+      Map<String, String> config) {\n+    super(catalogName, implementation, config);\n+    this.catalog = (TableCatalog) spark.sessionState().catalogManager().catalog(catalogName);\n+    this.implementation = implementation;\n+    this.type = config.get(\"type\");\n+  }\n+\n+  @Before\n+  public void before() {\n+    try {\n+      this.tableDir = temp.newFolder();\n+    } catch (IOException e) {\n+      throw new RuntimeException(e);\n+    }\n+    this.tableLocation = tableDir.toURI().toString();\n+\n+    spark.conf().set(\"hive.exec.dynamic.partition\", \"true\");\n+    spark.conf().set(\"hive.exec.dynamic.partition.mode\", \"nonstrict\");\n+    spark.sql(String.format(\"DROP TABLE IF EXISTS %s\", baseTableName));\n+\n+\n+    List<SimpleRecord> expected = Lists.newArrayList(\n+        new SimpleRecord(1, \"a\"),\n+        new SimpleRecord(2, \"b\"),\n+        new SimpleRecord(3, \"c\")\n+    );\n+\n+    Dataset<Row> df = spark.createDataFrame(expected, SimpleRecord.class);\n+\n+    df.select(\"id\", \"data\").orderBy(\"data\").write()\n+        .mode(\"append\")\n+        .option(\"path\", tableLocation)\n+        .saveAsTable(baseTableName);\n+  }\n+\n+  @After\n+  public void after() throws IOException {\n+    // Drop the hive table.\n+    spark.sql(String.format(\"DROP TABLE IF EXISTS %s\", baseTableName));\n+  }\n+\n+\n+  @Test\n+  public void testMigratePartitioned() throws Exception {\n+    String dest = uniqueName(\"iceberg_migrate_partitioned\");\n+    String source = uniqueName(\"test_migrate_partitioned_table\");\n+    testCreate(source,\n+        dest,\n+        \"CREATE TABLE %s using parquet PARTITIONED BY (id) location '%s' AS SELECT * FROM %s\",\n+        () -> Actions.migrate(source).as(dest),\n+        3);\n+  }\n+\n+  @Test\n+  public void testMigrateUnpartitioned() throws Exception {\n+    String dest = uniqueName(\"iceberg_migrate_unpartitioned\");\n+    String source = uniqueName(\"test_migrate_unpartitioned_table\");\n+    testCreate(source,\n+        dest,\n+        \"CREATE TABLE %s using parquet location '%s' AS SELECT * FROM %s\",\n+        () -> Actions.migrate(source).as(dest),\n+        2);\n+  }\n+\n+  @Test\n+  public void testMigrateReplace() throws Exception {\n+    // We can't do a replacement unless we have overridden the spark_catalog\n+    if (catalog.name().equals(\"spark_catalog\")) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "216eb56a60a7ea3b4bdd9465ae92116ab44ef8b8"}, "originalPosition": 147}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjEzMTk5Mw==", "bodyText": "Yep, just learned about Assume last week. Will implement it here!", "url": "https://github.com/apache/iceberg/pull/1525#discussion_r516131993", "createdAt": "2020-11-02T17:19:34Z", "author": {"login": "RussellSpitzer"}, "path": "spark3/src/test/java/org/apache/iceberg/actions/TestCreateActions.java", "diffHunk": "@@ -0,0 +1,272 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.actions;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.function.Supplier;\n+import org.apache.iceberg.relocated.com.google.common.collect.ImmutableMap;\n+import org.apache.iceberg.relocated.com.google.common.collect.Lists;\n+import org.apache.iceberg.relocated.com.google.common.collect.Maps;\n+import org.apache.iceberg.spark.Spark3Util;\n+import org.apache.iceberg.spark.SparkCatalog;\n+import org.apache.iceberg.spark.SparkCatalogTestBase;\n+import org.apache.iceberg.spark.SparkSessionCatalog;\n+import org.apache.iceberg.spark.source.SimpleRecord;\n+import org.apache.iceberg.spark.source.SparkTable;\n+import org.apache.spark.sql.Dataset;\n+import org.apache.spark.sql.Row;\n+import org.apache.spark.sql.catalyst.analysis.NoSuchTableException;\n+import org.apache.spark.sql.connector.catalog.TableCatalog;\n+import org.junit.After;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.TemporaryFolder;\n+import org.junit.runners.Parameterized;\n+\n+public class TestCreateActions extends SparkCatalogTestBase {\n+\n+  // Only valid for IcebergV2Catalog - Hadoop Catalog does not support Staged Tables\n+  @Parameterized.Parameters(name = \"Catalog Name {0} - Options {2}\")\n+  public static Object[][] parameters() {\n+    return new Object[][] {\n+        new Object[] {\"spark_catalog\", SparkSessionCatalog.class.getName(), ImmutableMap.of(\n+            \"type\", \"hive\",\n+            \"default-namespace\", \"default\",\n+            \"parquet-enabled\", \"true\",\n+            \"cache-enabled\", \"false\" // Spark will delete tables using v1, leaving the cache out of sync\n+        )},\n+        new Object[] { \"testhive\", SparkCatalog.class.getName(), ImmutableMap.of(\n+            \"type\", \"hive\",\n+            \"default-namespace\", \"default\"\n+        )}\n+    };\n+  }\n+\n+  @Rule\n+  public TemporaryFolder temp = new TemporaryFolder();\n+\n+  String baseTableName = \"baseTable\";\n+  File tableDir;\n+  String tableLocation;\n+  final String implementation;\n+  final String type;\n+  final TableCatalog catalog;\n+\n+  public TestCreateActions(\n+      String catalogName,\n+      String implementation,\n+      Map<String, String> config) {\n+    super(catalogName, implementation, config);\n+    this.catalog = (TableCatalog) spark.sessionState().catalogManager().catalog(catalogName);\n+    this.implementation = implementation;\n+    this.type = config.get(\"type\");\n+  }\n+\n+  @Before\n+  public void before() {\n+    try {\n+      this.tableDir = temp.newFolder();\n+    } catch (IOException e) {\n+      throw new RuntimeException(e);\n+    }\n+    this.tableLocation = tableDir.toURI().toString();\n+\n+    spark.conf().set(\"hive.exec.dynamic.partition\", \"true\");\n+    spark.conf().set(\"hive.exec.dynamic.partition.mode\", \"nonstrict\");\n+    spark.sql(String.format(\"DROP TABLE IF EXISTS %s\", baseTableName));\n+\n+\n+    List<SimpleRecord> expected = Lists.newArrayList(\n+        new SimpleRecord(1, \"a\"),\n+        new SimpleRecord(2, \"b\"),\n+        new SimpleRecord(3, \"c\")\n+    );\n+\n+    Dataset<Row> df = spark.createDataFrame(expected, SimpleRecord.class);\n+\n+    df.select(\"id\", \"data\").orderBy(\"data\").write()\n+        .mode(\"append\")\n+        .option(\"path\", tableLocation)\n+        .saveAsTable(baseTableName);\n+  }\n+\n+  @After\n+  public void after() throws IOException {\n+    // Drop the hive table.\n+    spark.sql(String.format(\"DROP TABLE IF EXISTS %s\", baseTableName));\n+  }\n+\n+\n+  @Test\n+  public void testMigratePartitioned() throws Exception {\n+    String dest = uniqueName(\"iceberg_migrate_partitioned\");\n+    String source = uniqueName(\"test_migrate_partitioned_table\");\n+    testCreate(source,\n+        dest,\n+        \"CREATE TABLE %s using parquet PARTITIONED BY (id) location '%s' AS SELECT * FROM %s\",\n+        () -> Actions.migrate(source).as(dest),\n+        3);\n+  }\n+\n+  @Test\n+  public void testMigrateUnpartitioned() throws Exception {\n+    String dest = uniqueName(\"iceberg_migrate_unpartitioned\");\n+    String source = uniqueName(\"test_migrate_unpartitioned_table\");\n+    testCreate(source,\n+        dest,\n+        \"CREATE TABLE %s using parquet location '%s' AS SELECT * FROM %s\",\n+        () -> Actions.migrate(source).as(dest),\n+        2);\n+  }\n+\n+  @Test\n+  public void testMigrateReplace() throws Exception {\n+    // We can't do a replacement unless we have overridden the spark_catalog\n+    if (catalog.name().equals(\"spark_catalog\")) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTY5MTk1MQ=="}, "originalCommit": {"oid": "216eb56a60a7ea3b4bdd9465ae92116ab44ef8b8"}, "originalPosition": 147}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzMTcwNjkzOnYy", "diffSide": "RIGHT", "path": "spark3/src/test/java/org/apache/iceberg/actions/TestCreateActions.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQwMDoxNTo0MVrOHrzZGQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQxNzoyMDoyMVrOHsOPPg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTY5MjgyNQ==", "bodyText": "I like the code reuse that these tests have, but I don't think that the pattern of a single method like this is very readable. For example, it isn't clear what expectedMigratedFiles is until you read this, but it differs between test cases.\nI think a better pattern for reuse is to use separate methods that are well named. These tests have a great example of what I'm talking about with testIsolatedSnapshot. You could add a boolean to testCreate for whether this method should call testIsolatedSnapshot, but it is more readable to simply put the call in the test case directly.\nI think a similar option, assertMigratedFileCount, would be an improvement over passing an unlabelled number. Similarly, building a method to create and initialize the source table with a name rather than passing a create statement would help readability in the tests.", "url": "https://github.com/apache/iceberg/pull/1525#discussion_r515692825", "createdAt": "2020-11-02T00:15:41Z", "author": {"login": "rdblue"}, "path": "spark3/src/test/java/org/apache/iceberg/actions/TestCreateActions.java", "diffHunk": "@@ -0,0 +1,272 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.actions;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.function.Supplier;\n+import org.apache.iceberg.relocated.com.google.common.collect.ImmutableMap;\n+import org.apache.iceberg.relocated.com.google.common.collect.Lists;\n+import org.apache.iceberg.relocated.com.google.common.collect.Maps;\n+import org.apache.iceberg.spark.Spark3Util;\n+import org.apache.iceberg.spark.SparkCatalog;\n+import org.apache.iceberg.spark.SparkCatalogTestBase;\n+import org.apache.iceberg.spark.SparkSessionCatalog;\n+import org.apache.iceberg.spark.source.SimpleRecord;\n+import org.apache.iceberg.spark.source.SparkTable;\n+import org.apache.spark.sql.Dataset;\n+import org.apache.spark.sql.Row;\n+import org.apache.spark.sql.catalyst.analysis.NoSuchTableException;\n+import org.apache.spark.sql.connector.catalog.TableCatalog;\n+import org.junit.After;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.TemporaryFolder;\n+import org.junit.runners.Parameterized;\n+\n+public class TestCreateActions extends SparkCatalogTestBase {\n+\n+  // Only valid for IcebergV2Catalog - Hadoop Catalog does not support Staged Tables\n+  @Parameterized.Parameters(name = \"Catalog Name {0} - Options {2}\")\n+  public static Object[][] parameters() {\n+    return new Object[][] {\n+        new Object[] {\"spark_catalog\", SparkSessionCatalog.class.getName(), ImmutableMap.of(\n+            \"type\", \"hive\",\n+            \"default-namespace\", \"default\",\n+            \"parquet-enabled\", \"true\",\n+            \"cache-enabled\", \"false\" // Spark will delete tables using v1, leaving the cache out of sync\n+        )},\n+        new Object[] { \"testhive\", SparkCatalog.class.getName(), ImmutableMap.of(\n+            \"type\", \"hive\",\n+            \"default-namespace\", \"default\"\n+        )}\n+    };\n+  }\n+\n+  @Rule\n+  public TemporaryFolder temp = new TemporaryFolder();\n+\n+  String baseTableName = \"baseTable\";\n+  File tableDir;\n+  String tableLocation;\n+  final String implementation;\n+  final String type;\n+  final TableCatalog catalog;\n+\n+  public TestCreateActions(\n+      String catalogName,\n+      String implementation,\n+      Map<String, String> config) {\n+    super(catalogName, implementation, config);\n+    this.catalog = (TableCatalog) spark.sessionState().catalogManager().catalog(catalogName);\n+    this.implementation = implementation;\n+    this.type = config.get(\"type\");\n+  }\n+\n+  @Before\n+  public void before() {\n+    try {\n+      this.tableDir = temp.newFolder();\n+    } catch (IOException e) {\n+      throw new RuntimeException(e);\n+    }\n+    this.tableLocation = tableDir.toURI().toString();\n+\n+    spark.conf().set(\"hive.exec.dynamic.partition\", \"true\");\n+    spark.conf().set(\"hive.exec.dynamic.partition.mode\", \"nonstrict\");\n+    spark.sql(String.format(\"DROP TABLE IF EXISTS %s\", baseTableName));\n+\n+\n+    List<SimpleRecord> expected = Lists.newArrayList(\n+        new SimpleRecord(1, \"a\"),\n+        new SimpleRecord(2, \"b\"),\n+        new SimpleRecord(3, \"c\")\n+    );\n+\n+    Dataset<Row> df = spark.createDataFrame(expected, SimpleRecord.class);\n+\n+    df.select(\"id\", \"data\").orderBy(\"data\").write()\n+        .mode(\"append\")\n+        .option(\"path\", tableLocation)\n+        .saveAsTable(baseTableName);\n+  }\n+\n+  @After\n+  public void after() throws IOException {\n+    // Drop the hive table.\n+    spark.sql(String.format(\"DROP TABLE IF EXISTS %s\", baseTableName));\n+  }\n+\n+\n+  @Test\n+  public void testMigratePartitioned() throws Exception {\n+    String dest = uniqueName(\"iceberg_migrate_partitioned\");\n+    String source = uniqueName(\"test_migrate_partitioned_table\");\n+    testCreate(source,\n+        dest,\n+        \"CREATE TABLE %s using parquet PARTITIONED BY (id) location '%s' AS SELECT * FROM %s\",\n+        () -> Actions.migrate(source).as(dest),\n+        3);\n+  }\n+\n+  @Test\n+  public void testMigrateUnpartitioned() throws Exception {\n+    String dest = uniqueName(\"iceberg_migrate_unpartitioned\");\n+    String source = uniqueName(\"test_migrate_unpartitioned_table\");\n+    testCreate(source,\n+        dest,\n+        \"CREATE TABLE %s using parquet location '%s' AS SELECT * FROM %s\",\n+        () -> Actions.migrate(source).as(dest),\n+        2);\n+  }\n+\n+  @Test\n+  public void testMigrateReplace() throws Exception {\n+    // We can't do a replacement unless we have overridden the spark_catalog\n+    if (catalog.name().equals(\"spark_catalog\")) {\n+      String source = uniqueName(uniqueName(\"iceberg_migrate_replace\"));\n+      testCreate(source,\n+          source,\n+          \"CREATE TABLE %s using parquet PARTITIONED BY (id) location '%s' AS SELECT * FROM %s\",\n+          () -> Actions.migrate(source),\n+          3);\n+    }\n+  }\n+\n+  @Test\n+  public void testSnapshotPartitioned() throws Exception {\n+    File location = temp.newFolder();\n+    String dest = uniqueName(\"iceberg_snapshot_partitioned\");\n+    String source = uniqueName(\"test_snapshot_partitioned_table\");\n+    testCreate(source,\n+        dest,\n+        \"CREATE TABLE %s using parquet PARTITIONED BY (id) location '%s' AS SELECT * FROM %s\",\n+        () -> Actions.snapshot(source, dest, location.toString()),\n+        3);\n+    testIsolatedSnapshot(source, dest);\n+  }\n+\n+  @Test\n+  public void testSnapshotUnpartitioned() throws Exception {\n+    File location = temp.newFolder();\n+    String dest = uniqueName(\"iceberg_snapshot_unpartitioned\");\n+    String source = uniqueName(\"test_snapshot_unpartitioned_table\");\n+    testCreate(source,\n+        dest,\n+        \"CREATE TABLE %s using parquet location '%s' AS SELECT * FROM %s\",\n+        () -> Actions.snapshot(source, dest, location.toString()),\n+        2);\n+    testIsolatedSnapshot(source, dest);\n+  }\n+\n+  @Test\n+  public void testSnapshotHiveTable() throws Exception {\n+    File location = temp.newFolder();\n+    String dest = uniqueName(\"iceberg_snapshot_hive_table\");\n+    String source = uniqueName(\"snapshot_hive_table\");\n+    testCreate(source,\n+        dest,\n+        String.format(\"CREATE EXTERNAL TABLE %s (id Int, data String) STORED AS parquet LOCATION '%s'\", source,\n+            tableLocation),\n+        () -> Actions.snapshot(source, dest, location.toString()),\n+        3);\n+    testIsolatedSnapshot(source, dest);\n+  }\n+\n+  @Test\n+  public void testProperties() throws Exception {\n+    String dest = uniqueName(\"iceberg_properties\");\n+    String source = uniqueName(\"test_properties_table\");\n+    Map<String, String> props = Maps.newHashMap();\n+    props.put(\"city\", \"New Orleans\");\n+    props.put(\"note\", \"Jazz\");\n+    testCreate(source,\n+        dest,\n+        \"CREATE TABLE %s using parquet location '%s' AS SELECT * FROM %s\",\n+        () -> Actions.migrate(source).as(dest)\n+        .withAdditionalProperty(\"dogs\", \"sundance\")\n+        .withAdditionalProperties(props),\n+        2);\n+\n+    SparkTable table = loadTable(dest);\n+\n+\n+    Map<String, String> expectedProps = Maps.newHashMap();\n+    expectedProps.putAll(props);\n+    expectedProps.put(\"dogs\", \"sundance\");\n+\n+    for (Map.Entry<String, String> entry : expectedProps.entrySet()) {\n+      Assert.assertTrue(\n+          \"Created table missing property \" + entry.getKey(),\n+          table.properties().containsKey(entry.getKey()));\n+      Assert.assertEquals(\"Property value is not the expected value\",\n+          entry.getValue(), table.properties().get(entry.getKey()));\n+    }\n+  }\n+\n+  private SparkTable loadTable(String name) throws NoSuchTableException {\n+    return (SparkTable) catalog.loadTable(Spark3Util.catalogAndIdentifier(spark, name).identifier());\n+  }\n+\n+  // Creates a table, runs the migration command and checks the results.\n+  private void testCreate(String source, String dest, String sqlCreate, Supplier<CreateAction> action,\n+      long expectedMigratedFiles) throws", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "216eb56a60a7ea3b4bdd9465ae92116ab44ef8b8"}, "originalPosition": 234}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjEzMjY3MA==", "bodyText": "Sgtm", "url": "https://github.com/apache/iceberg/pull/1525#discussion_r516132670", "createdAt": "2020-11-02T17:20:21Z", "author": {"login": "RussellSpitzer"}, "path": "spark3/src/test/java/org/apache/iceberg/actions/TestCreateActions.java", "diffHunk": "@@ -0,0 +1,272 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.actions;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.function.Supplier;\n+import org.apache.iceberg.relocated.com.google.common.collect.ImmutableMap;\n+import org.apache.iceberg.relocated.com.google.common.collect.Lists;\n+import org.apache.iceberg.relocated.com.google.common.collect.Maps;\n+import org.apache.iceberg.spark.Spark3Util;\n+import org.apache.iceberg.spark.SparkCatalog;\n+import org.apache.iceberg.spark.SparkCatalogTestBase;\n+import org.apache.iceberg.spark.SparkSessionCatalog;\n+import org.apache.iceberg.spark.source.SimpleRecord;\n+import org.apache.iceberg.spark.source.SparkTable;\n+import org.apache.spark.sql.Dataset;\n+import org.apache.spark.sql.Row;\n+import org.apache.spark.sql.catalyst.analysis.NoSuchTableException;\n+import org.apache.spark.sql.connector.catalog.TableCatalog;\n+import org.junit.After;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.TemporaryFolder;\n+import org.junit.runners.Parameterized;\n+\n+public class TestCreateActions extends SparkCatalogTestBase {\n+\n+  // Only valid for IcebergV2Catalog - Hadoop Catalog does not support Staged Tables\n+  @Parameterized.Parameters(name = \"Catalog Name {0} - Options {2}\")\n+  public static Object[][] parameters() {\n+    return new Object[][] {\n+        new Object[] {\"spark_catalog\", SparkSessionCatalog.class.getName(), ImmutableMap.of(\n+            \"type\", \"hive\",\n+            \"default-namespace\", \"default\",\n+            \"parquet-enabled\", \"true\",\n+            \"cache-enabled\", \"false\" // Spark will delete tables using v1, leaving the cache out of sync\n+        )},\n+        new Object[] { \"testhive\", SparkCatalog.class.getName(), ImmutableMap.of(\n+            \"type\", \"hive\",\n+            \"default-namespace\", \"default\"\n+        )}\n+    };\n+  }\n+\n+  @Rule\n+  public TemporaryFolder temp = new TemporaryFolder();\n+\n+  String baseTableName = \"baseTable\";\n+  File tableDir;\n+  String tableLocation;\n+  final String implementation;\n+  final String type;\n+  final TableCatalog catalog;\n+\n+  public TestCreateActions(\n+      String catalogName,\n+      String implementation,\n+      Map<String, String> config) {\n+    super(catalogName, implementation, config);\n+    this.catalog = (TableCatalog) spark.sessionState().catalogManager().catalog(catalogName);\n+    this.implementation = implementation;\n+    this.type = config.get(\"type\");\n+  }\n+\n+  @Before\n+  public void before() {\n+    try {\n+      this.tableDir = temp.newFolder();\n+    } catch (IOException e) {\n+      throw new RuntimeException(e);\n+    }\n+    this.tableLocation = tableDir.toURI().toString();\n+\n+    spark.conf().set(\"hive.exec.dynamic.partition\", \"true\");\n+    spark.conf().set(\"hive.exec.dynamic.partition.mode\", \"nonstrict\");\n+    spark.sql(String.format(\"DROP TABLE IF EXISTS %s\", baseTableName));\n+\n+\n+    List<SimpleRecord> expected = Lists.newArrayList(\n+        new SimpleRecord(1, \"a\"),\n+        new SimpleRecord(2, \"b\"),\n+        new SimpleRecord(3, \"c\")\n+    );\n+\n+    Dataset<Row> df = spark.createDataFrame(expected, SimpleRecord.class);\n+\n+    df.select(\"id\", \"data\").orderBy(\"data\").write()\n+        .mode(\"append\")\n+        .option(\"path\", tableLocation)\n+        .saveAsTable(baseTableName);\n+  }\n+\n+  @After\n+  public void after() throws IOException {\n+    // Drop the hive table.\n+    spark.sql(String.format(\"DROP TABLE IF EXISTS %s\", baseTableName));\n+  }\n+\n+\n+  @Test\n+  public void testMigratePartitioned() throws Exception {\n+    String dest = uniqueName(\"iceberg_migrate_partitioned\");\n+    String source = uniqueName(\"test_migrate_partitioned_table\");\n+    testCreate(source,\n+        dest,\n+        \"CREATE TABLE %s using parquet PARTITIONED BY (id) location '%s' AS SELECT * FROM %s\",\n+        () -> Actions.migrate(source).as(dest),\n+        3);\n+  }\n+\n+  @Test\n+  public void testMigrateUnpartitioned() throws Exception {\n+    String dest = uniqueName(\"iceberg_migrate_unpartitioned\");\n+    String source = uniqueName(\"test_migrate_unpartitioned_table\");\n+    testCreate(source,\n+        dest,\n+        \"CREATE TABLE %s using parquet location '%s' AS SELECT * FROM %s\",\n+        () -> Actions.migrate(source).as(dest),\n+        2);\n+  }\n+\n+  @Test\n+  public void testMigrateReplace() throws Exception {\n+    // We can't do a replacement unless we have overridden the spark_catalog\n+    if (catalog.name().equals(\"spark_catalog\")) {\n+      String source = uniqueName(uniqueName(\"iceberg_migrate_replace\"));\n+      testCreate(source,\n+          source,\n+          \"CREATE TABLE %s using parquet PARTITIONED BY (id) location '%s' AS SELECT * FROM %s\",\n+          () -> Actions.migrate(source),\n+          3);\n+    }\n+  }\n+\n+  @Test\n+  public void testSnapshotPartitioned() throws Exception {\n+    File location = temp.newFolder();\n+    String dest = uniqueName(\"iceberg_snapshot_partitioned\");\n+    String source = uniqueName(\"test_snapshot_partitioned_table\");\n+    testCreate(source,\n+        dest,\n+        \"CREATE TABLE %s using parquet PARTITIONED BY (id) location '%s' AS SELECT * FROM %s\",\n+        () -> Actions.snapshot(source, dest, location.toString()),\n+        3);\n+    testIsolatedSnapshot(source, dest);\n+  }\n+\n+  @Test\n+  public void testSnapshotUnpartitioned() throws Exception {\n+    File location = temp.newFolder();\n+    String dest = uniqueName(\"iceberg_snapshot_unpartitioned\");\n+    String source = uniqueName(\"test_snapshot_unpartitioned_table\");\n+    testCreate(source,\n+        dest,\n+        \"CREATE TABLE %s using parquet location '%s' AS SELECT * FROM %s\",\n+        () -> Actions.snapshot(source, dest, location.toString()),\n+        2);\n+    testIsolatedSnapshot(source, dest);\n+  }\n+\n+  @Test\n+  public void testSnapshotHiveTable() throws Exception {\n+    File location = temp.newFolder();\n+    String dest = uniqueName(\"iceberg_snapshot_hive_table\");\n+    String source = uniqueName(\"snapshot_hive_table\");\n+    testCreate(source,\n+        dest,\n+        String.format(\"CREATE EXTERNAL TABLE %s (id Int, data String) STORED AS parquet LOCATION '%s'\", source,\n+            tableLocation),\n+        () -> Actions.snapshot(source, dest, location.toString()),\n+        3);\n+    testIsolatedSnapshot(source, dest);\n+  }\n+\n+  @Test\n+  public void testProperties() throws Exception {\n+    String dest = uniqueName(\"iceberg_properties\");\n+    String source = uniqueName(\"test_properties_table\");\n+    Map<String, String> props = Maps.newHashMap();\n+    props.put(\"city\", \"New Orleans\");\n+    props.put(\"note\", \"Jazz\");\n+    testCreate(source,\n+        dest,\n+        \"CREATE TABLE %s using parquet location '%s' AS SELECT * FROM %s\",\n+        () -> Actions.migrate(source).as(dest)\n+        .withAdditionalProperty(\"dogs\", \"sundance\")\n+        .withAdditionalProperties(props),\n+        2);\n+\n+    SparkTable table = loadTable(dest);\n+\n+\n+    Map<String, String> expectedProps = Maps.newHashMap();\n+    expectedProps.putAll(props);\n+    expectedProps.put(\"dogs\", \"sundance\");\n+\n+    for (Map.Entry<String, String> entry : expectedProps.entrySet()) {\n+      Assert.assertTrue(\n+          \"Created table missing property \" + entry.getKey(),\n+          table.properties().containsKey(entry.getKey()));\n+      Assert.assertEquals(\"Property value is not the expected value\",\n+          entry.getValue(), table.properties().get(entry.getKey()));\n+    }\n+  }\n+\n+  private SparkTable loadTable(String name) throws NoSuchTableException {\n+    return (SparkTable) catalog.loadTable(Spark3Util.catalogAndIdentifier(spark, name).identifier());\n+  }\n+\n+  // Creates a table, runs the migration command and checks the results.\n+  private void testCreate(String source, String dest, String sqlCreate, Supplier<CreateAction> action,\n+      long expectedMigratedFiles) throws", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTY5MjgyNQ=="}, "originalCommit": {"oid": "216eb56a60a7ea3b4bdd9465ae92116ab44ef8b8"}, "originalPosition": 234}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzMTcxMTI3OnYy", "diffSide": "RIGHT", "path": "spark3/src/main/java/org/apache/iceberg/actions/Spark3CreateAction.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQwMDoyMDowOFrOHrzbPA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQyMzo1OToxMFrOH2HJoA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTY5MzM3Mg==", "bodyText": "Session catalog?\nDo we have a way around this restriction? In our implementation, we load the source table using our Hive or Spark table implementation and check that it is what we expect. Then we use that implementation to load the partitions. Would we similarly require a v2 table implementation to make this catalog agnostic?\n(This isn't a blocker, just curious to hear your ideas.)", "url": "https://github.com/apache/iceberg/pull/1525#discussion_r515693372", "createdAt": "2020-11-02T00:20:08Z", "author": {"login": "rdblue"}, "path": "spark3/src/main/java/org/apache/iceberg/actions/Spark3CreateAction.java", "diffHunk": "@@ -0,0 +1,290 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.actions;\n+\n+import java.util.Arrays;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Set;\n+import jline.internal.Log;\n+import org.apache.iceberg.PartitionSpec;\n+import org.apache.iceberg.Snapshot;\n+import org.apache.iceberg.SnapshotSummary;\n+import org.apache.iceberg.Table;\n+import org.apache.iceberg.TableProperties;\n+import org.apache.iceberg.relocated.com.google.common.collect.ImmutableMap;\n+import org.apache.iceberg.relocated.com.google.common.collect.ImmutableSet;\n+import org.apache.iceberg.relocated.com.google.common.collect.Maps;\n+import org.apache.iceberg.spark.Spark3Util;\n+import org.apache.iceberg.spark.SparkCatalog;\n+import org.apache.iceberg.spark.SparkSchemaUtil;\n+import org.apache.iceberg.spark.SparkSessionCatalog;\n+import org.apache.iceberg.spark.SparkTableUtil;\n+import org.apache.iceberg.spark.source.SparkTable;\n+import org.apache.spark.sql.AnalysisException;\n+import org.apache.spark.sql.SparkSession;\n+import org.apache.spark.sql.catalyst.analysis.NoSuchDatabaseException;\n+import org.apache.spark.sql.catalyst.analysis.NoSuchNamespaceException;\n+import org.apache.spark.sql.catalyst.analysis.NoSuchTableException;\n+import org.apache.spark.sql.catalyst.analysis.TableAlreadyExistsException;\n+import org.apache.spark.sql.catalyst.catalog.CatalogTable;\n+import org.apache.spark.sql.catalyst.catalog.CatalogUtils;\n+import org.apache.spark.sql.connector.catalog.CatalogPlugin;\n+import org.apache.spark.sql.connector.catalog.Identifier;\n+import org.apache.spark.sql.connector.catalog.StagedTable;\n+import org.apache.spark.sql.connector.catalog.StagingTableCatalog;\n+import org.apache.spark.sql.connector.catalog.TableCatalog;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import scala.collection.JavaConverters;\n+\n+/**\n+ * This action will migrate a known table in a Spark Catalog that is not an Iceberg table into an Iceberg table.\n+ * The created new table will be able to interact with and modify files in the original table.\n+ *\n+ * There are two main code paths\n+ *   - Creating a brand new iceberg table or replacing an existing Iceberg table\n+ *   This pathway will use a staged table to stage the creation or replacement, only committing after\n+ *   import has succeeded.\n+ *\n+ *   - Replacing a table in the Session Catalog with an Iceberg Table with the same name\n+ *   This pathway will create a temporary table with a different name. This replacement table will\n+ *   be committed upon a successful import. Then the original session catalog entry will be dropped\n+ *   and the new replacement table renamed to take its place.\n+ */\n+class Spark3CreateAction implements CreateAction {\n+  private static final Logger LOG = LoggerFactory.getLogger(Spark3CreateAction.class);\n+  private static final Set<String> ALLOWED_SOURCES = ImmutableSet.of(\"parquet\", \"avro\", \"orc\", \"hive\");\n+  private static final String ICEBERG_METADATA_FOLDER = \"metadata\";\n+  private static final String REPLACEMENT_NAME = \"_REPLACEMENT_\";\n+\n+  private final SparkSession spark;\n+\n+  // Source Fields\n+  private final CatalogTable sourceTable;\n+  private final String sourceTableLocation;\n+  private final CatalogPlugin sourceCatalog;\n+  private final Identifier sourceTableName;\n+  private final PartitionSpec sourcePartitionSpec;\n+\n+  // Destination Fields\n+  private final Boolean sessionCatalogReplacement;\n+  private final CatalogPlugin destCatalog;\n+  private final Identifier destTableName;\n+\n+  // Optional Parameters for destination\n+  private String destDataLocation;\n+  private String destMetadataLocation;\n+  private Map<String, String> additionalProperties = Maps.newHashMap();\n+\n+  Spark3CreateAction(SparkSession spark, CatalogPlugin sourceCatalog, Identifier sourceTableName,\n+                       CatalogPlugin destCatalog,  Identifier destTableName) {\n+\n+    this.spark = spark;\n+    this.sourceCatalog = checkSourceCatalog(sourceCatalog);\n+    this.sourceTableName = sourceTableName;\n+    this.destCatalog = destCatalog;\n+    this.destTableName = destTableName;\n+\n+    try {\n+      String sourceString = String.join(\".\", sourceTableName.namespace()) + \".\" + sourceTableName.name();\n+      sourcePartitionSpec = SparkSchemaUtil.specForTable(spark, sourceString);\n+    } catch (AnalysisException e) {\n+      throw new IllegalArgumentException(\"Cannot determining partitioning of \" + sourceTableName.toString(), e);\n+    }\n+\n+    try {\n+      this.sourceTable = spark.sessionState().catalog().getTableMetadata(Spark3Util.toTableIdentifier(sourceTableName));\n+    } catch (NoSuchTableException | NoSuchDatabaseException e) {\n+      throw new IllegalArgumentException(String.format(\"Could not find source table %s\", sourceTableName), e);\n+    }\n+    validateSourceTable(sourceTable, ALLOWED_SOURCES);\n+\n+    this.sessionCatalogReplacement = isSessionCatalogReplacement();\n+\n+    this.sourceTableLocation = CatalogUtils.URIToString(sourceTable.storage().locationUri().get());\n+    this.destDataLocation = sourceTableLocation;\n+    this.destMetadataLocation = sourceTableLocation + \"/\" + ICEBERG_METADATA_FOLDER;\n+  }\n+\n+  private boolean isSessionCatalogReplacement() {\n+    boolean sourceIceberg = sourceTable.provider().get().toLowerCase(Locale.ROOT).equals(\"iceberg\");\n+    boolean sameCatalog = sourceCatalog == destCatalog;\n+    boolean sameIdentifier = sourceTableName.name().equals(destTableName.name()) &&\n+        Arrays.equals(sourceTableName.namespace(), destTableName.namespace());\n+    return !sourceIceberg && sameCatalog && sameIdentifier;\n+  }\n+\n+\n+  /**\n+   * Creates the Iceberg data and metadata at a given location instead of the source table\n+   * location. New metadata and data files will be added to this\n+   * new location and further operations will not effect the source table.\n+   *\n+   * Use this if you would like to experiment with Iceberg without changing\n+   * your original files.\n+   * @param newLocation the base directory for the new Iceberg Table\n+   * @return this for chaining\n+   */\n+  CreateAction asSnapshotAtLocation(String newLocation) {\n+    this.destDataLocation = newLocation;\n+    this.destMetadataLocation = newLocation + \"/\" + ICEBERG_METADATA_FOLDER;\n+    return this;\n+  }\n+\n+  @Override\n+  public Long execute() {\n+    StagingTableCatalog stagingCatalog = checkDestinationCatalog(destCatalog);\n+    Map<String, String> newTableProperties = new ImmutableMap.Builder<String, String>()\n+        .put(TableCatalog.PROP_PROVIDER, \"iceberg\")\n+        .putAll(JavaConverters.mapAsJavaMapConverter(sourceTable.properties()).asJava())\n+        .putAll(extraIcebergTableProps(destDataLocation, destMetadataLocation))\n+        .putAll(additionalProperties)\n+        .build();\n+\n+    StagedTable stagedTable;\n+    try {\n+      if (sessionCatalogReplacement) {\n+        /*\n+         * Spark Session Catalog cannot stage a replacement of a Session table with an Iceberg Table.\n+         * To workaround this we create a replacement table which is renamed after it\n+         * is successfully constructed.\n+         */\n+        stagedTable = stagingCatalog.stageCreate(Identifier.of(\n+            destTableName.namespace(),\n+            destTableName.name() + REPLACEMENT_NAME),\n+            sourceTable.schema(),\n+            Spark3Util.toTransforms(sourcePartitionSpec), newTableProperties);\n+      } else {\n+        stagedTable = stagingCatalog.stageCreate(destTableName, sourceTable.schema(),\n+            Spark3Util.toTransforms(sourcePartitionSpec), newTableProperties);\n+      }\n+    } catch (NoSuchNamespaceException e) {\n+      throw new IllegalArgumentException(\"Cannot create a new table in a namespace which does not exist\", e);\n+    } catch (TableAlreadyExistsException e) {\n+      throw new IllegalArgumentException(\"Destination table already exists\", e);\n+    }\n+\n+    String stagingLocation = destMetadataLocation;\n+    Table icebergTable = ((SparkTable) stagedTable).table();\n+\n+    LOG.info(\"Beginning migration of {} to {}\", sourceTableName, destTableName);\n+    long numMigratedFiles = 0;\n+    try {\n+      SparkTableUtil.importSparkTable(spark, Spark3Util.toTableIdentifier(sourceTableName), icebergTable,\n+          stagingLocation);\n+\n+      Snapshot snapshot = icebergTable.currentSnapshot();\n+      numMigratedFiles = Long.valueOf(snapshot.summary().get(SnapshotSummary.TOTAL_DATA_FILES_PROP));\n+\n+      stagedTable.commitStagedChanges();\n+      LOG.info(\"Successfully loaded Iceberg metadata for {} files\", numMigratedFiles);\n+    } catch (Exception e) {\n+      LOG.error(\"Error when attempting to commit migration changes, rolling back\", e);\n+      stagedTable.abortStagedChanges();\n+      throw e;\n+    }\n+\n+    if (sessionCatalogReplacement) {\n+      Identifier replacementTable = Identifier.of(destTableName.namespace(), destTableName.name() + REPLACEMENT_NAME);\n+      try {\n+        stagingCatalog.dropTable(destTableName);\n+        stagingCatalog.renameTable(replacementTable, destTableName);\n+      } catch (NoSuchTableException e) {\n+        LOG.error(\"Cannot migrate, replacement table is missing. Attempting to recreate source table\", e);\n+        try {\n+          stagingCatalog.createTable(sourceTableName, sourceTable.schema(),\n+              Spark3Util.toTransforms(sourcePartitionSpec), JavaConverters.mapAsJavaMap(sourceTable.properties()));\n+        } catch (TableAlreadyExistsException tableAlreadyExistsException) {\n+          Log.error(\"Cannot recreate source table. Source table has already been recreated\", e);\n+          throw new RuntimeException(e);\n+        } catch (NoSuchNamespaceException noSuchNamespaceException) {\n+          Log.error(\"Cannot recreate source table. Source namespace has been removed, cannot recreate\", e);\n+          throw new RuntimeException(e);\n+        }\n+      } catch (TableAlreadyExistsException e) {\n+        Log.error(\"Cannot migrate, Source table was recreated before replacement could be moved. \" +\n+            \"Attempting to remove replacement table.\", e);\n+        stagingCatalog.dropTable(replacementTable);\n+        stagedTable.abortStagedChanges();\n+      }\n+    }\n+\n+    return numMigratedFiles;\n+  }\n+\n+  @Override\n+  public CreateAction withAdditionalProperties(Map<String, String> properties) {\n+    this.additionalProperties.putAll(properties);\n+    return this;\n+  }\n+\n+  @Override\n+  public CreateAction withAdditionalProperty(String key, String value) {\n+    this.additionalProperties.put(key, value);\n+    return this;\n+  }\n+\n+  @Override\n+  public CreateAction as(String newName) {\n+    Spark3Util.CatalogAndIdentifier newDest = Spark3Util.catalogAndIdentifier(spark, newName);\n+    return new Spark3CreateAction(spark, sourceCatalog, sourceTableName, newDest.catalog(), newDest.identifier())\n+        .withAdditionalProperties(this.additionalProperties);\n+  }\n+\n+  private static void validateSourceTable(CatalogTable sourceTable, Set<String> supportedSourceTableProviders) {\n+    String sourceTableProvider = sourceTable.provider().get().toLowerCase(Locale.ROOT);\n+\n+    if (!supportedSourceTableProviders.contains(sourceTableProvider)) {\n+      throw new IllegalArgumentException(\n+          String.format(\"Cannot create an Iceberg table from source provider: %s\", sourceTableProvider));\n+    }\n+    if (sourceTable.storage().locationUri().isEmpty()) {\n+      throw new IllegalArgumentException(\"Cannot create an Iceberg table from a source without an explicit location\");\n+    }\n+  }\n+\n+  private static Map<String, String> extraIcebergTableProps(String tableLocation, String metadataLocation) {\n+    return ImmutableMap.of(\n+        TableProperties.WRITE_METADATA_LOCATION, metadataLocation,\n+        TableProperties.WRITE_NEW_DATA_LOCATION, tableLocation,\n+        \"migrated\", \"true\");\n+  }\n+\n+  private static StagingTableCatalog checkDestinationCatalog(CatalogPlugin catalog) {\n+    if (!(catalog instanceof SparkSessionCatalog) && !(catalog instanceof SparkCatalog)) {\n+      throw new IllegalArgumentException(String.format(\"Cannot create Iceberg table in non Iceberg Catalog. \" +\n+              \"Catalog %s was of class %s but %s or %s are required\", catalog.name(), catalog.getClass(),\n+          SparkSessionCatalog.class.getName(), SparkCatalog.class.getName()));\n+    }\n+    return (StagingTableCatalog) catalog;\n+  }\n+\n+  private CatalogPlugin checkSourceCatalog(CatalogPlugin catalog) {\n+    // Currently the Import code relies on being able to look up the table in the session code", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "216eb56a60a7ea3b4bdd9465ae92116ab44ef8b8"}, "originalPosition": 281}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjEyODY4OQ==", "bodyText": "The limitation here is based on how the current SparkUtil.import code is written. It can't handle DSV2 catalogs or things like that so I thought this would be the easiest approach for now.\nI think what we should do is modify that utility function to be less SparkCatalog specific, or at least have ways of calling it that describe a table based on partitions (like in your code) and other properties directly rather than assuming it is a \"table name\" that can be looked up in the catalog.\nThere other approach I was thinking about was writing a version of the function which is just all in on Spark3 and uses the CatalogV2 table api. We already have a few discussions going on in issues about how we are going to deal with this for other Actions which all have similar limitations at the moment.", "url": "https://github.com/apache/iceberg/pull/1525#discussion_r516128689", "createdAt": "2020-11-02T17:15:22Z", "author": {"login": "RussellSpitzer"}, "path": "spark3/src/main/java/org/apache/iceberg/actions/Spark3CreateAction.java", "diffHunk": "@@ -0,0 +1,290 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.actions;\n+\n+import java.util.Arrays;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Set;\n+import jline.internal.Log;\n+import org.apache.iceberg.PartitionSpec;\n+import org.apache.iceberg.Snapshot;\n+import org.apache.iceberg.SnapshotSummary;\n+import org.apache.iceberg.Table;\n+import org.apache.iceberg.TableProperties;\n+import org.apache.iceberg.relocated.com.google.common.collect.ImmutableMap;\n+import org.apache.iceberg.relocated.com.google.common.collect.ImmutableSet;\n+import org.apache.iceberg.relocated.com.google.common.collect.Maps;\n+import org.apache.iceberg.spark.Spark3Util;\n+import org.apache.iceberg.spark.SparkCatalog;\n+import org.apache.iceberg.spark.SparkSchemaUtil;\n+import org.apache.iceberg.spark.SparkSessionCatalog;\n+import org.apache.iceberg.spark.SparkTableUtil;\n+import org.apache.iceberg.spark.source.SparkTable;\n+import org.apache.spark.sql.AnalysisException;\n+import org.apache.spark.sql.SparkSession;\n+import org.apache.spark.sql.catalyst.analysis.NoSuchDatabaseException;\n+import org.apache.spark.sql.catalyst.analysis.NoSuchNamespaceException;\n+import org.apache.spark.sql.catalyst.analysis.NoSuchTableException;\n+import org.apache.spark.sql.catalyst.analysis.TableAlreadyExistsException;\n+import org.apache.spark.sql.catalyst.catalog.CatalogTable;\n+import org.apache.spark.sql.catalyst.catalog.CatalogUtils;\n+import org.apache.spark.sql.connector.catalog.CatalogPlugin;\n+import org.apache.spark.sql.connector.catalog.Identifier;\n+import org.apache.spark.sql.connector.catalog.StagedTable;\n+import org.apache.spark.sql.connector.catalog.StagingTableCatalog;\n+import org.apache.spark.sql.connector.catalog.TableCatalog;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import scala.collection.JavaConverters;\n+\n+/**\n+ * This action will migrate a known table in a Spark Catalog that is not an Iceberg table into an Iceberg table.\n+ * The created new table will be able to interact with and modify files in the original table.\n+ *\n+ * There are two main code paths\n+ *   - Creating a brand new iceberg table or replacing an existing Iceberg table\n+ *   This pathway will use a staged table to stage the creation or replacement, only committing after\n+ *   import has succeeded.\n+ *\n+ *   - Replacing a table in the Session Catalog with an Iceberg Table with the same name\n+ *   This pathway will create a temporary table with a different name. This replacement table will\n+ *   be committed upon a successful import. Then the original session catalog entry will be dropped\n+ *   and the new replacement table renamed to take its place.\n+ */\n+class Spark3CreateAction implements CreateAction {\n+  private static final Logger LOG = LoggerFactory.getLogger(Spark3CreateAction.class);\n+  private static final Set<String> ALLOWED_SOURCES = ImmutableSet.of(\"parquet\", \"avro\", \"orc\", \"hive\");\n+  private static final String ICEBERG_METADATA_FOLDER = \"metadata\";\n+  private static final String REPLACEMENT_NAME = \"_REPLACEMENT_\";\n+\n+  private final SparkSession spark;\n+\n+  // Source Fields\n+  private final CatalogTable sourceTable;\n+  private final String sourceTableLocation;\n+  private final CatalogPlugin sourceCatalog;\n+  private final Identifier sourceTableName;\n+  private final PartitionSpec sourcePartitionSpec;\n+\n+  // Destination Fields\n+  private final Boolean sessionCatalogReplacement;\n+  private final CatalogPlugin destCatalog;\n+  private final Identifier destTableName;\n+\n+  // Optional Parameters for destination\n+  private String destDataLocation;\n+  private String destMetadataLocation;\n+  private Map<String, String> additionalProperties = Maps.newHashMap();\n+\n+  Spark3CreateAction(SparkSession spark, CatalogPlugin sourceCatalog, Identifier sourceTableName,\n+                       CatalogPlugin destCatalog,  Identifier destTableName) {\n+\n+    this.spark = spark;\n+    this.sourceCatalog = checkSourceCatalog(sourceCatalog);\n+    this.sourceTableName = sourceTableName;\n+    this.destCatalog = destCatalog;\n+    this.destTableName = destTableName;\n+\n+    try {\n+      String sourceString = String.join(\".\", sourceTableName.namespace()) + \".\" + sourceTableName.name();\n+      sourcePartitionSpec = SparkSchemaUtil.specForTable(spark, sourceString);\n+    } catch (AnalysisException e) {\n+      throw new IllegalArgumentException(\"Cannot determining partitioning of \" + sourceTableName.toString(), e);\n+    }\n+\n+    try {\n+      this.sourceTable = spark.sessionState().catalog().getTableMetadata(Spark3Util.toTableIdentifier(sourceTableName));\n+    } catch (NoSuchTableException | NoSuchDatabaseException e) {\n+      throw new IllegalArgumentException(String.format(\"Could not find source table %s\", sourceTableName), e);\n+    }\n+    validateSourceTable(sourceTable, ALLOWED_SOURCES);\n+\n+    this.sessionCatalogReplacement = isSessionCatalogReplacement();\n+\n+    this.sourceTableLocation = CatalogUtils.URIToString(sourceTable.storage().locationUri().get());\n+    this.destDataLocation = sourceTableLocation;\n+    this.destMetadataLocation = sourceTableLocation + \"/\" + ICEBERG_METADATA_FOLDER;\n+  }\n+\n+  private boolean isSessionCatalogReplacement() {\n+    boolean sourceIceberg = sourceTable.provider().get().toLowerCase(Locale.ROOT).equals(\"iceberg\");\n+    boolean sameCatalog = sourceCatalog == destCatalog;\n+    boolean sameIdentifier = sourceTableName.name().equals(destTableName.name()) &&\n+        Arrays.equals(sourceTableName.namespace(), destTableName.namespace());\n+    return !sourceIceberg && sameCatalog && sameIdentifier;\n+  }\n+\n+\n+  /**\n+   * Creates the Iceberg data and metadata at a given location instead of the source table\n+   * location. New metadata and data files will be added to this\n+   * new location and further operations will not effect the source table.\n+   *\n+   * Use this if you would like to experiment with Iceberg without changing\n+   * your original files.\n+   * @param newLocation the base directory for the new Iceberg Table\n+   * @return this for chaining\n+   */\n+  CreateAction asSnapshotAtLocation(String newLocation) {\n+    this.destDataLocation = newLocation;\n+    this.destMetadataLocation = newLocation + \"/\" + ICEBERG_METADATA_FOLDER;\n+    return this;\n+  }\n+\n+  @Override\n+  public Long execute() {\n+    StagingTableCatalog stagingCatalog = checkDestinationCatalog(destCatalog);\n+    Map<String, String> newTableProperties = new ImmutableMap.Builder<String, String>()\n+        .put(TableCatalog.PROP_PROVIDER, \"iceberg\")\n+        .putAll(JavaConverters.mapAsJavaMapConverter(sourceTable.properties()).asJava())\n+        .putAll(extraIcebergTableProps(destDataLocation, destMetadataLocation))\n+        .putAll(additionalProperties)\n+        .build();\n+\n+    StagedTable stagedTable;\n+    try {\n+      if (sessionCatalogReplacement) {\n+        /*\n+         * Spark Session Catalog cannot stage a replacement of a Session table with an Iceberg Table.\n+         * To workaround this we create a replacement table which is renamed after it\n+         * is successfully constructed.\n+         */\n+        stagedTable = stagingCatalog.stageCreate(Identifier.of(\n+            destTableName.namespace(),\n+            destTableName.name() + REPLACEMENT_NAME),\n+            sourceTable.schema(),\n+            Spark3Util.toTransforms(sourcePartitionSpec), newTableProperties);\n+      } else {\n+        stagedTable = stagingCatalog.stageCreate(destTableName, sourceTable.schema(),\n+            Spark3Util.toTransforms(sourcePartitionSpec), newTableProperties);\n+      }\n+    } catch (NoSuchNamespaceException e) {\n+      throw new IllegalArgumentException(\"Cannot create a new table in a namespace which does not exist\", e);\n+    } catch (TableAlreadyExistsException e) {\n+      throw new IllegalArgumentException(\"Destination table already exists\", e);\n+    }\n+\n+    String stagingLocation = destMetadataLocation;\n+    Table icebergTable = ((SparkTable) stagedTable).table();\n+\n+    LOG.info(\"Beginning migration of {} to {}\", sourceTableName, destTableName);\n+    long numMigratedFiles = 0;\n+    try {\n+      SparkTableUtil.importSparkTable(spark, Spark3Util.toTableIdentifier(sourceTableName), icebergTable,\n+          stagingLocation);\n+\n+      Snapshot snapshot = icebergTable.currentSnapshot();\n+      numMigratedFiles = Long.valueOf(snapshot.summary().get(SnapshotSummary.TOTAL_DATA_FILES_PROP));\n+\n+      stagedTable.commitStagedChanges();\n+      LOG.info(\"Successfully loaded Iceberg metadata for {} files\", numMigratedFiles);\n+    } catch (Exception e) {\n+      LOG.error(\"Error when attempting to commit migration changes, rolling back\", e);\n+      stagedTable.abortStagedChanges();\n+      throw e;\n+    }\n+\n+    if (sessionCatalogReplacement) {\n+      Identifier replacementTable = Identifier.of(destTableName.namespace(), destTableName.name() + REPLACEMENT_NAME);\n+      try {\n+        stagingCatalog.dropTable(destTableName);\n+        stagingCatalog.renameTable(replacementTable, destTableName);\n+      } catch (NoSuchTableException e) {\n+        LOG.error(\"Cannot migrate, replacement table is missing. Attempting to recreate source table\", e);\n+        try {\n+          stagingCatalog.createTable(sourceTableName, sourceTable.schema(),\n+              Spark3Util.toTransforms(sourcePartitionSpec), JavaConverters.mapAsJavaMap(sourceTable.properties()));\n+        } catch (TableAlreadyExistsException tableAlreadyExistsException) {\n+          Log.error(\"Cannot recreate source table. Source table has already been recreated\", e);\n+          throw new RuntimeException(e);\n+        } catch (NoSuchNamespaceException noSuchNamespaceException) {\n+          Log.error(\"Cannot recreate source table. Source namespace has been removed, cannot recreate\", e);\n+          throw new RuntimeException(e);\n+        }\n+      } catch (TableAlreadyExistsException e) {\n+        Log.error(\"Cannot migrate, Source table was recreated before replacement could be moved. \" +\n+            \"Attempting to remove replacement table.\", e);\n+        stagingCatalog.dropTable(replacementTable);\n+        stagedTable.abortStagedChanges();\n+      }\n+    }\n+\n+    return numMigratedFiles;\n+  }\n+\n+  @Override\n+  public CreateAction withAdditionalProperties(Map<String, String> properties) {\n+    this.additionalProperties.putAll(properties);\n+    return this;\n+  }\n+\n+  @Override\n+  public CreateAction withAdditionalProperty(String key, String value) {\n+    this.additionalProperties.put(key, value);\n+    return this;\n+  }\n+\n+  @Override\n+  public CreateAction as(String newName) {\n+    Spark3Util.CatalogAndIdentifier newDest = Spark3Util.catalogAndIdentifier(spark, newName);\n+    return new Spark3CreateAction(spark, sourceCatalog, sourceTableName, newDest.catalog(), newDest.identifier())\n+        .withAdditionalProperties(this.additionalProperties);\n+  }\n+\n+  private static void validateSourceTable(CatalogTable sourceTable, Set<String> supportedSourceTableProviders) {\n+    String sourceTableProvider = sourceTable.provider().get().toLowerCase(Locale.ROOT);\n+\n+    if (!supportedSourceTableProviders.contains(sourceTableProvider)) {\n+      throw new IllegalArgumentException(\n+          String.format(\"Cannot create an Iceberg table from source provider: %s\", sourceTableProvider));\n+    }\n+    if (sourceTable.storage().locationUri().isEmpty()) {\n+      throw new IllegalArgumentException(\"Cannot create an Iceberg table from a source without an explicit location\");\n+    }\n+  }\n+\n+  private static Map<String, String> extraIcebergTableProps(String tableLocation, String metadataLocation) {\n+    return ImmutableMap.of(\n+        TableProperties.WRITE_METADATA_LOCATION, metadataLocation,\n+        TableProperties.WRITE_NEW_DATA_LOCATION, tableLocation,\n+        \"migrated\", \"true\");\n+  }\n+\n+  private static StagingTableCatalog checkDestinationCatalog(CatalogPlugin catalog) {\n+    if (!(catalog instanceof SparkSessionCatalog) && !(catalog instanceof SparkCatalog)) {\n+      throw new IllegalArgumentException(String.format(\"Cannot create Iceberg table in non Iceberg Catalog. \" +\n+              \"Catalog %s was of class %s but %s or %s are required\", catalog.name(), catalog.getClass(),\n+          SparkSessionCatalog.class.getName(), SparkCatalog.class.getName()));\n+    }\n+    return (StagingTableCatalog) catalog;\n+  }\n+\n+  private CatalogPlugin checkSourceCatalog(CatalogPlugin catalog) {\n+    // Currently the Import code relies on being able to look up the table in the session code", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTY5MzM3Mg=="}, "originalCommit": {"oid": "216eb56a60a7ea3b4bdd9465ae92116ab44ef8b8"}, "originalPosition": 281}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjUwMjMwNA==", "bodyText": "I think we can change SparkTableUtil if we need to. Can be done later, though.", "url": "https://github.com/apache/iceberg/pull/1525#discussion_r526502304", "createdAt": "2020-11-18T23:59:10Z", "author": {"login": "aokolnychyi"}, "path": "spark3/src/main/java/org/apache/iceberg/actions/Spark3CreateAction.java", "diffHunk": "@@ -0,0 +1,290 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.actions;\n+\n+import java.util.Arrays;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Set;\n+import jline.internal.Log;\n+import org.apache.iceberg.PartitionSpec;\n+import org.apache.iceberg.Snapshot;\n+import org.apache.iceberg.SnapshotSummary;\n+import org.apache.iceberg.Table;\n+import org.apache.iceberg.TableProperties;\n+import org.apache.iceberg.relocated.com.google.common.collect.ImmutableMap;\n+import org.apache.iceberg.relocated.com.google.common.collect.ImmutableSet;\n+import org.apache.iceberg.relocated.com.google.common.collect.Maps;\n+import org.apache.iceberg.spark.Spark3Util;\n+import org.apache.iceberg.spark.SparkCatalog;\n+import org.apache.iceberg.spark.SparkSchemaUtil;\n+import org.apache.iceberg.spark.SparkSessionCatalog;\n+import org.apache.iceberg.spark.SparkTableUtil;\n+import org.apache.iceberg.spark.source.SparkTable;\n+import org.apache.spark.sql.AnalysisException;\n+import org.apache.spark.sql.SparkSession;\n+import org.apache.spark.sql.catalyst.analysis.NoSuchDatabaseException;\n+import org.apache.spark.sql.catalyst.analysis.NoSuchNamespaceException;\n+import org.apache.spark.sql.catalyst.analysis.NoSuchTableException;\n+import org.apache.spark.sql.catalyst.analysis.TableAlreadyExistsException;\n+import org.apache.spark.sql.catalyst.catalog.CatalogTable;\n+import org.apache.spark.sql.catalyst.catalog.CatalogUtils;\n+import org.apache.spark.sql.connector.catalog.CatalogPlugin;\n+import org.apache.spark.sql.connector.catalog.Identifier;\n+import org.apache.spark.sql.connector.catalog.StagedTable;\n+import org.apache.spark.sql.connector.catalog.StagingTableCatalog;\n+import org.apache.spark.sql.connector.catalog.TableCatalog;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import scala.collection.JavaConverters;\n+\n+/**\n+ * This action will migrate a known table in a Spark Catalog that is not an Iceberg table into an Iceberg table.\n+ * The created new table will be able to interact with and modify files in the original table.\n+ *\n+ * There are two main code paths\n+ *   - Creating a brand new iceberg table or replacing an existing Iceberg table\n+ *   This pathway will use a staged table to stage the creation or replacement, only committing after\n+ *   import has succeeded.\n+ *\n+ *   - Replacing a table in the Session Catalog with an Iceberg Table with the same name\n+ *   This pathway will create a temporary table with a different name. This replacement table will\n+ *   be committed upon a successful import. Then the original session catalog entry will be dropped\n+ *   and the new replacement table renamed to take its place.\n+ */\n+class Spark3CreateAction implements CreateAction {\n+  private static final Logger LOG = LoggerFactory.getLogger(Spark3CreateAction.class);\n+  private static final Set<String> ALLOWED_SOURCES = ImmutableSet.of(\"parquet\", \"avro\", \"orc\", \"hive\");\n+  private static final String ICEBERG_METADATA_FOLDER = \"metadata\";\n+  private static final String REPLACEMENT_NAME = \"_REPLACEMENT_\";\n+\n+  private final SparkSession spark;\n+\n+  // Source Fields\n+  private final CatalogTable sourceTable;\n+  private final String sourceTableLocation;\n+  private final CatalogPlugin sourceCatalog;\n+  private final Identifier sourceTableName;\n+  private final PartitionSpec sourcePartitionSpec;\n+\n+  // Destination Fields\n+  private final Boolean sessionCatalogReplacement;\n+  private final CatalogPlugin destCatalog;\n+  private final Identifier destTableName;\n+\n+  // Optional Parameters for destination\n+  private String destDataLocation;\n+  private String destMetadataLocation;\n+  private Map<String, String> additionalProperties = Maps.newHashMap();\n+\n+  Spark3CreateAction(SparkSession spark, CatalogPlugin sourceCatalog, Identifier sourceTableName,\n+                       CatalogPlugin destCatalog,  Identifier destTableName) {\n+\n+    this.spark = spark;\n+    this.sourceCatalog = checkSourceCatalog(sourceCatalog);\n+    this.sourceTableName = sourceTableName;\n+    this.destCatalog = destCatalog;\n+    this.destTableName = destTableName;\n+\n+    try {\n+      String sourceString = String.join(\".\", sourceTableName.namespace()) + \".\" + sourceTableName.name();\n+      sourcePartitionSpec = SparkSchemaUtil.specForTable(spark, sourceString);\n+    } catch (AnalysisException e) {\n+      throw new IllegalArgumentException(\"Cannot determining partitioning of \" + sourceTableName.toString(), e);\n+    }\n+\n+    try {\n+      this.sourceTable = spark.sessionState().catalog().getTableMetadata(Spark3Util.toTableIdentifier(sourceTableName));\n+    } catch (NoSuchTableException | NoSuchDatabaseException e) {\n+      throw new IllegalArgumentException(String.format(\"Could not find source table %s\", sourceTableName), e);\n+    }\n+    validateSourceTable(sourceTable, ALLOWED_SOURCES);\n+\n+    this.sessionCatalogReplacement = isSessionCatalogReplacement();\n+\n+    this.sourceTableLocation = CatalogUtils.URIToString(sourceTable.storage().locationUri().get());\n+    this.destDataLocation = sourceTableLocation;\n+    this.destMetadataLocation = sourceTableLocation + \"/\" + ICEBERG_METADATA_FOLDER;\n+  }\n+\n+  private boolean isSessionCatalogReplacement() {\n+    boolean sourceIceberg = sourceTable.provider().get().toLowerCase(Locale.ROOT).equals(\"iceberg\");\n+    boolean sameCatalog = sourceCatalog == destCatalog;\n+    boolean sameIdentifier = sourceTableName.name().equals(destTableName.name()) &&\n+        Arrays.equals(sourceTableName.namespace(), destTableName.namespace());\n+    return !sourceIceberg && sameCatalog && sameIdentifier;\n+  }\n+\n+\n+  /**\n+   * Creates the Iceberg data and metadata at a given location instead of the source table\n+   * location. New metadata and data files will be added to this\n+   * new location and further operations will not effect the source table.\n+   *\n+   * Use this if you would like to experiment with Iceberg without changing\n+   * your original files.\n+   * @param newLocation the base directory for the new Iceberg Table\n+   * @return this for chaining\n+   */\n+  CreateAction asSnapshotAtLocation(String newLocation) {\n+    this.destDataLocation = newLocation;\n+    this.destMetadataLocation = newLocation + \"/\" + ICEBERG_METADATA_FOLDER;\n+    return this;\n+  }\n+\n+  @Override\n+  public Long execute() {\n+    StagingTableCatalog stagingCatalog = checkDestinationCatalog(destCatalog);\n+    Map<String, String> newTableProperties = new ImmutableMap.Builder<String, String>()\n+        .put(TableCatalog.PROP_PROVIDER, \"iceberg\")\n+        .putAll(JavaConverters.mapAsJavaMapConverter(sourceTable.properties()).asJava())\n+        .putAll(extraIcebergTableProps(destDataLocation, destMetadataLocation))\n+        .putAll(additionalProperties)\n+        .build();\n+\n+    StagedTable stagedTable;\n+    try {\n+      if (sessionCatalogReplacement) {\n+        /*\n+         * Spark Session Catalog cannot stage a replacement of a Session table with an Iceberg Table.\n+         * To workaround this we create a replacement table which is renamed after it\n+         * is successfully constructed.\n+         */\n+        stagedTable = stagingCatalog.stageCreate(Identifier.of(\n+            destTableName.namespace(),\n+            destTableName.name() + REPLACEMENT_NAME),\n+            sourceTable.schema(),\n+            Spark3Util.toTransforms(sourcePartitionSpec), newTableProperties);\n+      } else {\n+        stagedTable = stagingCatalog.stageCreate(destTableName, sourceTable.schema(),\n+            Spark3Util.toTransforms(sourcePartitionSpec), newTableProperties);\n+      }\n+    } catch (NoSuchNamespaceException e) {\n+      throw new IllegalArgumentException(\"Cannot create a new table in a namespace which does not exist\", e);\n+    } catch (TableAlreadyExistsException e) {\n+      throw new IllegalArgumentException(\"Destination table already exists\", e);\n+    }\n+\n+    String stagingLocation = destMetadataLocation;\n+    Table icebergTable = ((SparkTable) stagedTable).table();\n+\n+    LOG.info(\"Beginning migration of {} to {}\", sourceTableName, destTableName);\n+    long numMigratedFiles = 0;\n+    try {\n+      SparkTableUtil.importSparkTable(spark, Spark3Util.toTableIdentifier(sourceTableName), icebergTable,\n+          stagingLocation);\n+\n+      Snapshot snapshot = icebergTable.currentSnapshot();\n+      numMigratedFiles = Long.valueOf(snapshot.summary().get(SnapshotSummary.TOTAL_DATA_FILES_PROP));\n+\n+      stagedTable.commitStagedChanges();\n+      LOG.info(\"Successfully loaded Iceberg metadata for {} files\", numMigratedFiles);\n+    } catch (Exception e) {\n+      LOG.error(\"Error when attempting to commit migration changes, rolling back\", e);\n+      stagedTable.abortStagedChanges();\n+      throw e;\n+    }\n+\n+    if (sessionCatalogReplacement) {\n+      Identifier replacementTable = Identifier.of(destTableName.namespace(), destTableName.name() + REPLACEMENT_NAME);\n+      try {\n+        stagingCatalog.dropTable(destTableName);\n+        stagingCatalog.renameTable(replacementTable, destTableName);\n+      } catch (NoSuchTableException e) {\n+        LOG.error(\"Cannot migrate, replacement table is missing. Attempting to recreate source table\", e);\n+        try {\n+          stagingCatalog.createTable(sourceTableName, sourceTable.schema(),\n+              Spark3Util.toTransforms(sourcePartitionSpec), JavaConverters.mapAsJavaMap(sourceTable.properties()));\n+        } catch (TableAlreadyExistsException tableAlreadyExistsException) {\n+          Log.error(\"Cannot recreate source table. Source table has already been recreated\", e);\n+          throw new RuntimeException(e);\n+        } catch (NoSuchNamespaceException noSuchNamespaceException) {\n+          Log.error(\"Cannot recreate source table. Source namespace has been removed, cannot recreate\", e);\n+          throw new RuntimeException(e);\n+        }\n+      } catch (TableAlreadyExistsException e) {\n+        Log.error(\"Cannot migrate, Source table was recreated before replacement could be moved. \" +\n+            \"Attempting to remove replacement table.\", e);\n+        stagingCatalog.dropTable(replacementTable);\n+        stagedTable.abortStagedChanges();\n+      }\n+    }\n+\n+    return numMigratedFiles;\n+  }\n+\n+  @Override\n+  public CreateAction withAdditionalProperties(Map<String, String> properties) {\n+    this.additionalProperties.putAll(properties);\n+    return this;\n+  }\n+\n+  @Override\n+  public CreateAction withAdditionalProperty(String key, String value) {\n+    this.additionalProperties.put(key, value);\n+    return this;\n+  }\n+\n+  @Override\n+  public CreateAction as(String newName) {\n+    Spark3Util.CatalogAndIdentifier newDest = Spark3Util.catalogAndIdentifier(spark, newName);\n+    return new Spark3CreateAction(spark, sourceCatalog, sourceTableName, newDest.catalog(), newDest.identifier())\n+        .withAdditionalProperties(this.additionalProperties);\n+  }\n+\n+  private static void validateSourceTable(CatalogTable sourceTable, Set<String> supportedSourceTableProviders) {\n+    String sourceTableProvider = sourceTable.provider().get().toLowerCase(Locale.ROOT);\n+\n+    if (!supportedSourceTableProviders.contains(sourceTableProvider)) {\n+      throw new IllegalArgumentException(\n+          String.format(\"Cannot create an Iceberg table from source provider: %s\", sourceTableProvider));\n+    }\n+    if (sourceTable.storage().locationUri().isEmpty()) {\n+      throw new IllegalArgumentException(\"Cannot create an Iceberg table from a source without an explicit location\");\n+    }\n+  }\n+\n+  private static Map<String, String> extraIcebergTableProps(String tableLocation, String metadataLocation) {\n+    return ImmutableMap.of(\n+        TableProperties.WRITE_METADATA_LOCATION, metadataLocation,\n+        TableProperties.WRITE_NEW_DATA_LOCATION, tableLocation,\n+        \"migrated\", \"true\");\n+  }\n+\n+  private static StagingTableCatalog checkDestinationCatalog(CatalogPlugin catalog) {\n+    if (!(catalog instanceof SparkSessionCatalog) && !(catalog instanceof SparkCatalog)) {\n+      throw new IllegalArgumentException(String.format(\"Cannot create Iceberg table in non Iceberg Catalog. \" +\n+              \"Catalog %s was of class %s but %s or %s are required\", catalog.name(), catalog.getClass(),\n+          SparkSessionCatalog.class.getName(), SparkCatalog.class.getName()));\n+    }\n+    return (StagingTableCatalog) catalog;\n+  }\n+\n+  private CatalogPlugin checkSourceCatalog(CatalogPlugin catalog) {\n+    // Currently the Import code relies on being able to look up the table in the session code", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTY5MzM3Mg=="}, "originalCommit": {"oid": "216eb56a60a7ea3b4bdd9465ae92116ab44ef8b8"}, "originalPosition": 281}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzMTcxNDE4OnYy", "diffSide": "RIGHT", "path": "spark3/src/main/java/org/apache/iceberg/actions/Spark3CreateAction.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQwMDoyMzo1M1rOHrzczQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQyMDozMDoxNVrOH0QLww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTY5Mzc3Mw==", "bodyText": "This excludes Hive tables that don't use Spark's provider, including those created with STORED AS parquet instead of USING parquet. I don't think that is necessary. Isn't the only requirement that all of the partitions are a supported format?", "url": "https://github.com/apache/iceberg/pull/1525#discussion_r515693773", "createdAt": "2020-11-02T00:23:53Z", "author": {"login": "rdblue"}, "path": "spark3/src/main/java/org/apache/iceberg/actions/Spark3CreateAction.java", "diffHunk": "@@ -0,0 +1,290 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.actions;\n+\n+import java.util.Arrays;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Set;\n+import jline.internal.Log;\n+import org.apache.iceberg.PartitionSpec;\n+import org.apache.iceberg.Snapshot;\n+import org.apache.iceberg.SnapshotSummary;\n+import org.apache.iceberg.Table;\n+import org.apache.iceberg.TableProperties;\n+import org.apache.iceberg.relocated.com.google.common.collect.ImmutableMap;\n+import org.apache.iceberg.relocated.com.google.common.collect.ImmutableSet;\n+import org.apache.iceberg.relocated.com.google.common.collect.Maps;\n+import org.apache.iceberg.spark.Spark3Util;\n+import org.apache.iceberg.spark.SparkCatalog;\n+import org.apache.iceberg.spark.SparkSchemaUtil;\n+import org.apache.iceberg.spark.SparkSessionCatalog;\n+import org.apache.iceberg.spark.SparkTableUtil;\n+import org.apache.iceberg.spark.source.SparkTable;\n+import org.apache.spark.sql.AnalysisException;\n+import org.apache.spark.sql.SparkSession;\n+import org.apache.spark.sql.catalyst.analysis.NoSuchDatabaseException;\n+import org.apache.spark.sql.catalyst.analysis.NoSuchNamespaceException;\n+import org.apache.spark.sql.catalyst.analysis.NoSuchTableException;\n+import org.apache.spark.sql.catalyst.analysis.TableAlreadyExistsException;\n+import org.apache.spark.sql.catalyst.catalog.CatalogTable;\n+import org.apache.spark.sql.catalyst.catalog.CatalogUtils;\n+import org.apache.spark.sql.connector.catalog.CatalogPlugin;\n+import org.apache.spark.sql.connector.catalog.Identifier;\n+import org.apache.spark.sql.connector.catalog.StagedTable;\n+import org.apache.spark.sql.connector.catalog.StagingTableCatalog;\n+import org.apache.spark.sql.connector.catalog.TableCatalog;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import scala.collection.JavaConverters;\n+\n+/**\n+ * This action will migrate a known table in a Spark Catalog that is not an Iceberg table into an Iceberg table.\n+ * The created new table will be able to interact with and modify files in the original table.\n+ *\n+ * There are two main code paths\n+ *   - Creating a brand new iceberg table or replacing an existing Iceberg table\n+ *   This pathway will use a staged table to stage the creation or replacement, only committing after\n+ *   import has succeeded.\n+ *\n+ *   - Replacing a table in the Session Catalog with an Iceberg Table with the same name\n+ *   This pathway will create a temporary table with a different name. This replacement table will\n+ *   be committed upon a successful import. Then the original session catalog entry will be dropped\n+ *   and the new replacement table renamed to take its place.\n+ */\n+class Spark3CreateAction implements CreateAction {\n+  private static final Logger LOG = LoggerFactory.getLogger(Spark3CreateAction.class);\n+  private static final Set<String> ALLOWED_SOURCES = ImmutableSet.of(\"parquet\", \"avro\", \"orc\", \"hive\");\n+  private static final String ICEBERG_METADATA_FOLDER = \"metadata\";\n+  private static final String REPLACEMENT_NAME = \"_REPLACEMENT_\";\n+\n+  private final SparkSession spark;\n+\n+  // Source Fields\n+  private final CatalogTable sourceTable;\n+  private final String sourceTableLocation;\n+  private final CatalogPlugin sourceCatalog;\n+  private final Identifier sourceTableName;\n+  private final PartitionSpec sourcePartitionSpec;\n+\n+  // Destination Fields\n+  private final Boolean sessionCatalogReplacement;\n+  private final CatalogPlugin destCatalog;\n+  private final Identifier destTableName;\n+\n+  // Optional Parameters for destination\n+  private String destDataLocation;\n+  private String destMetadataLocation;\n+  private Map<String, String> additionalProperties = Maps.newHashMap();\n+\n+  Spark3CreateAction(SparkSession spark, CatalogPlugin sourceCatalog, Identifier sourceTableName,\n+                       CatalogPlugin destCatalog,  Identifier destTableName) {\n+\n+    this.spark = spark;\n+    this.sourceCatalog = checkSourceCatalog(sourceCatalog);\n+    this.sourceTableName = sourceTableName;\n+    this.destCatalog = destCatalog;\n+    this.destTableName = destTableName;\n+\n+    try {\n+      String sourceString = String.join(\".\", sourceTableName.namespace()) + \".\" + sourceTableName.name();\n+      sourcePartitionSpec = SparkSchemaUtil.specForTable(spark, sourceString);\n+    } catch (AnalysisException e) {\n+      throw new IllegalArgumentException(\"Cannot determining partitioning of \" + sourceTableName.toString(), e);\n+    }\n+\n+    try {\n+      this.sourceTable = spark.sessionState().catalog().getTableMetadata(Spark3Util.toTableIdentifier(sourceTableName));\n+    } catch (NoSuchTableException | NoSuchDatabaseException e) {\n+      throw new IllegalArgumentException(String.format(\"Could not find source table %s\", sourceTableName), e);\n+    }\n+    validateSourceTable(sourceTable, ALLOWED_SOURCES);\n+\n+    this.sessionCatalogReplacement = isSessionCatalogReplacement();\n+\n+    this.sourceTableLocation = CatalogUtils.URIToString(sourceTable.storage().locationUri().get());\n+    this.destDataLocation = sourceTableLocation;\n+    this.destMetadataLocation = sourceTableLocation + \"/\" + ICEBERG_METADATA_FOLDER;\n+  }\n+\n+  private boolean isSessionCatalogReplacement() {\n+    boolean sourceIceberg = sourceTable.provider().get().toLowerCase(Locale.ROOT).equals(\"iceberg\");\n+    boolean sameCatalog = sourceCatalog == destCatalog;\n+    boolean sameIdentifier = sourceTableName.name().equals(destTableName.name()) &&\n+        Arrays.equals(sourceTableName.namespace(), destTableName.namespace());\n+    return !sourceIceberg && sameCatalog && sameIdentifier;\n+  }\n+\n+\n+  /**\n+   * Creates the Iceberg data and metadata at a given location instead of the source table\n+   * location. New metadata and data files will be added to this\n+   * new location and further operations will not effect the source table.\n+   *\n+   * Use this if you would like to experiment with Iceberg without changing\n+   * your original files.\n+   * @param newLocation the base directory for the new Iceberg Table\n+   * @return this for chaining\n+   */\n+  CreateAction asSnapshotAtLocation(String newLocation) {\n+    this.destDataLocation = newLocation;\n+    this.destMetadataLocation = newLocation + \"/\" + ICEBERG_METADATA_FOLDER;\n+    return this;\n+  }\n+\n+  @Override\n+  public Long execute() {\n+    StagingTableCatalog stagingCatalog = checkDestinationCatalog(destCatalog);\n+    Map<String, String> newTableProperties = new ImmutableMap.Builder<String, String>()\n+        .put(TableCatalog.PROP_PROVIDER, \"iceberg\")\n+        .putAll(JavaConverters.mapAsJavaMapConverter(sourceTable.properties()).asJava())\n+        .putAll(extraIcebergTableProps(destDataLocation, destMetadataLocation))\n+        .putAll(additionalProperties)\n+        .build();\n+\n+    StagedTable stagedTable;\n+    try {\n+      if (sessionCatalogReplacement) {\n+        /*\n+         * Spark Session Catalog cannot stage a replacement of a Session table with an Iceberg Table.\n+         * To workaround this we create a replacement table which is renamed after it\n+         * is successfully constructed.\n+         */\n+        stagedTable = stagingCatalog.stageCreate(Identifier.of(\n+            destTableName.namespace(),\n+            destTableName.name() + REPLACEMENT_NAME),\n+            sourceTable.schema(),\n+            Spark3Util.toTransforms(sourcePartitionSpec), newTableProperties);\n+      } else {\n+        stagedTable = stagingCatalog.stageCreate(destTableName, sourceTable.schema(),\n+            Spark3Util.toTransforms(sourcePartitionSpec), newTableProperties);\n+      }\n+    } catch (NoSuchNamespaceException e) {\n+      throw new IllegalArgumentException(\"Cannot create a new table in a namespace which does not exist\", e);\n+    } catch (TableAlreadyExistsException e) {\n+      throw new IllegalArgumentException(\"Destination table already exists\", e);\n+    }\n+\n+    String stagingLocation = destMetadataLocation;\n+    Table icebergTable = ((SparkTable) stagedTable).table();\n+\n+    LOG.info(\"Beginning migration of {} to {}\", sourceTableName, destTableName);\n+    long numMigratedFiles = 0;\n+    try {\n+      SparkTableUtil.importSparkTable(spark, Spark3Util.toTableIdentifier(sourceTableName), icebergTable,\n+          stagingLocation);\n+\n+      Snapshot snapshot = icebergTable.currentSnapshot();\n+      numMigratedFiles = Long.valueOf(snapshot.summary().get(SnapshotSummary.TOTAL_DATA_FILES_PROP));\n+\n+      stagedTable.commitStagedChanges();\n+      LOG.info(\"Successfully loaded Iceberg metadata for {} files\", numMigratedFiles);\n+    } catch (Exception e) {\n+      LOG.error(\"Error when attempting to commit migration changes, rolling back\", e);\n+      stagedTable.abortStagedChanges();\n+      throw e;\n+    }\n+\n+    if (sessionCatalogReplacement) {\n+      Identifier replacementTable = Identifier.of(destTableName.namespace(), destTableName.name() + REPLACEMENT_NAME);\n+      try {\n+        stagingCatalog.dropTable(destTableName);\n+        stagingCatalog.renameTable(replacementTable, destTableName);\n+      } catch (NoSuchTableException e) {\n+        LOG.error(\"Cannot migrate, replacement table is missing. Attempting to recreate source table\", e);\n+        try {\n+          stagingCatalog.createTable(sourceTableName, sourceTable.schema(),\n+              Spark3Util.toTransforms(sourcePartitionSpec), JavaConverters.mapAsJavaMap(sourceTable.properties()));\n+        } catch (TableAlreadyExistsException tableAlreadyExistsException) {\n+          Log.error(\"Cannot recreate source table. Source table has already been recreated\", e);\n+          throw new RuntimeException(e);\n+        } catch (NoSuchNamespaceException noSuchNamespaceException) {\n+          Log.error(\"Cannot recreate source table. Source namespace has been removed, cannot recreate\", e);\n+          throw new RuntimeException(e);\n+        }\n+      } catch (TableAlreadyExistsException e) {\n+        Log.error(\"Cannot migrate, Source table was recreated before replacement could be moved. \" +\n+            \"Attempting to remove replacement table.\", e);\n+        stagingCatalog.dropTable(replacementTable);\n+        stagedTable.abortStagedChanges();\n+      }\n+    }\n+\n+    return numMigratedFiles;\n+  }\n+\n+  @Override\n+  public CreateAction withAdditionalProperties(Map<String, String> properties) {\n+    this.additionalProperties.putAll(properties);\n+    return this;\n+  }\n+\n+  @Override\n+  public CreateAction withAdditionalProperty(String key, String value) {\n+    this.additionalProperties.put(key, value);\n+    return this;\n+  }\n+\n+  @Override\n+  public CreateAction as(String newName) {\n+    Spark3Util.CatalogAndIdentifier newDest = Spark3Util.catalogAndIdentifier(spark, newName);\n+    return new Spark3CreateAction(spark, sourceCatalog, sourceTableName, newDest.catalog(), newDest.identifier())\n+        .withAdditionalProperties(this.additionalProperties);\n+  }\n+\n+  private static void validateSourceTable(CatalogTable sourceTable, Set<String> supportedSourceTableProviders) {\n+    String sourceTableProvider = sourceTable.provider().get().toLowerCase(Locale.ROOT);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "216eb56a60a7ea3b4bdd9465ae92116ab44ef8b8"}, "originalPosition": 253}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDM4NzkxOA==", "bodyText": "Yeah let me double check this.", "url": "https://github.com/apache/iceberg/pull/1525#discussion_r524387918", "createdAt": "2020-11-16T16:13:33Z", "author": {"login": "RussellSpitzer"}, "path": "spark3/src/main/java/org/apache/iceberg/actions/Spark3CreateAction.java", "diffHunk": "@@ -0,0 +1,290 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.actions;\n+\n+import java.util.Arrays;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Set;\n+import jline.internal.Log;\n+import org.apache.iceberg.PartitionSpec;\n+import org.apache.iceberg.Snapshot;\n+import org.apache.iceberg.SnapshotSummary;\n+import org.apache.iceberg.Table;\n+import org.apache.iceberg.TableProperties;\n+import org.apache.iceberg.relocated.com.google.common.collect.ImmutableMap;\n+import org.apache.iceberg.relocated.com.google.common.collect.ImmutableSet;\n+import org.apache.iceberg.relocated.com.google.common.collect.Maps;\n+import org.apache.iceberg.spark.Spark3Util;\n+import org.apache.iceberg.spark.SparkCatalog;\n+import org.apache.iceberg.spark.SparkSchemaUtil;\n+import org.apache.iceberg.spark.SparkSessionCatalog;\n+import org.apache.iceberg.spark.SparkTableUtil;\n+import org.apache.iceberg.spark.source.SparkTable;\n+import org.apache.spark.sql.AnalysisException;\n+import org.apache.spark.sql.SparkSession;\n+import org.apache.spark.sql.catalyst.analysis.NoSuchDatabaseException;\n+import org.apache.spark.sql.catalyst.analysis.NoSuchNamespaceException;\n+import org.apache.spark.sql.catalyst.analysis.NoSuchTableException;\n+import org.apache.spark.sql.catalyst.analysis.TableAlreadyExistsException;\n+import org.apache.spark.sql.catalyst.catalog.CatalogTable;\n+import org.apache.spark.sql.catalyst.catalog.CatalogUtils;\n+import org.apache.spark.sql.connector.catalog.CatalogPlugin;\n+import org.apache.spark.sql.connector.catalog.Identifier;\n+import org.apache.spark.sql.connector.catalog.StagedTable;\n+import org.apache.spark.sql.connector.catalog.StagingTableCatalog;\n+import org.apache.spark.sql.connector.catalog.TableCatalog;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import scala.collection.JavaConverters;\n+\n+/**\n+ * This action will migrate a known table in a Spark Catalog that is not an Iceberg table into an Iceberg table.\n+ * The created new table will be able to interact with and modify files in the original table.\n+ *\n+ * There are two main code paths\n+ *   - Creating a brand new iceberg table or replacing an existing Iceberg table\n+ *   This pathway will use a staged table to stage the creation or replacement, only committing after\n+ *   import has succeeded.\n+ *\n+ *   - Replacing a table in the Session Catalog with an Iceberg Table with the same name\n+ *   This pathway will create a temporary table with a different name. This replacement table will\n+ *   be committed upon a successful import. Then the original session catalog entry will be dropped\n+ *   and the new replacement table renamed to take its place.\n+ */\n+class Spark3CreateAction implements CreateAction {\n+  private static final Logger LOG = LoggerFactory.getLogger(Spark3CreateAction.class);\n+  private static final Set<String> ALLOWED_SOURCES = ImmutableSet.of(\"parquet\", \"avro\", \"orc\", \"hive\");\n+  private static final String ICEBERG_METADATA_FOLDER = \"metadata\";\n+  private static final String REPLACEMENT_NAME = \"_REPLACEMENT_\";\n+\n+  private final SparkSession spark;\n+\n+  // Source Fields\n+  private final CatalogTable sourceTable;\n+  private final String sourceTableLocation;\n+  private final CatalogPlugin sourceCatalog;\n+  private final Identifier sourceTableName;\n+  private final PartitionSpec sourcePartitionSpec;\n+\n+  // Destination Fields\n+  private final Boolean sessionCatalogReplacement;\n+  private final CatalogPlugin destCatalog;\n+  private final Identifier destTableName;\n+\n+  // Optional Parameters for destination\n+  private String destDataLocation;\n+  private String destMetadataLocation;\n+  private Map<String, String> additionalProperties = Maps.newHashMap();\n+\n+  Spark3CreateAction(SparkSession spark, CatalogPlugin sourceCatalog, Identifier sourceTableName,\n+                       CatalogPlugin destCatalog,  Identifier destTableName) {\n+\n+    this.spark = spark;\n+    this.sourceCatalog = checkSourceCatalog(sourceCatalog);\n+    this.sourceTableName = sourceTableName;\n+    this.destCatalog = destCatalog;\n+    this.destTableName = destTableName;\n+\n+    try {\n+      String sourceString = String.join(\".\", sourceTableName.namespace()) + \".\" + sourceTableName.name();\n+      sourcePartitionSpec = SparkSchemaUtil.specForTable(spark, sourceString);\n+    } catch (AnalysisException e) {\n+      throw new IllegalArgumentException(\"Cannot determining partitioning of \" + sourceTableName.toString(), e);\n+    }\n+\n+    try {\n+      this.sourceTable = spark.sessionState().catalog().getTableMetadata(Spark3Util.toTableIdentifier(sourceTableName));\n+    } catch (NoSuchTableException | NoSuchDatabaseException e) {\n+      throw new IllegalArgumentException(String.format(\"Could not find source table %s\", sourceTableName), e);\n+    }\n+    validateSourceTable(sourceTable, ALLOWED_SOURCES);\n+\n+    this.sessionCatalogReplacement = isSessionCatalogReplacement();\n+\n+    this.sourceTableLocation = CatalogUtils.URIToString(sourceTable.storage().locationUri().get());\n+    this.destDataLocation = sourceTableLocation;\n+    this.destMetadataLocation = sourceTableLocation + \"/\" + ICEBERG_METADATA_FOLDER;\n+  }\n+\n+  private boolean isSessionCatalogReplacement() {\n+    boolean sourceIceberg = sourceTable.provider().get().toLowerCase(Locale.ROOT).equals(\"iceberg\");\n+    boolean sameCatalog = sourceCatalog == destCatalog;\n+    boolean sameIdentifier = sourceTableName.name().equals(destTableName.name()) &&\n+        Arrays.equals(sourceTableName.namespace(), destTableName.namespace());\n+    return !sourceIceberg && sameCatalog && sameIdentifier;\n+  }\n+\n+\n+  /**\n+   * Creates the Iceberg data and metadata at a given location instead of the source table\n+   * location. New metadata and data files will be added to this\n+   * new location and further operations will not effect the source table.\n+   *\n+   * Use this if you would like to experiment with Iceberg without changing\n+   * your original files.\n+   * @param newLocation the base directory for the new Iceberg Table\n+   * @return this for chaining\n+   */\n+  CreateAction asSnapshotAtLocation(String newLocation) {\n+    this.destDataLocation = newLocation;\n+    this.destMetadataLocation = newLocation + \"/\" + ICEBERG_METADATA_FOLDER;\n+    return this;\n+  }\n+\n+  @Override\n+  public Long execute() {\n+    StagingTableCatalog stagingCatalog = checkDestinationCatalog(destCatalog);\n+    Map<String, String> newTableProperties = new ImmutableMap.Builder<String, String>()\n+        .put(TableCatalog.PROP_PROVIDER, \"iceberg\")\n+        .putAll(JavaConverters.mapAsJavaMapConverter(sourceTable.properties()).asJava())\n+        .putAll(extraIcebergTableProps(destDataLocation, destMetadataLocation))\n+        .putAll(additionalProperties)\n+        .build();\n+\n+    StagedTable stagedTable;\n+    try {\n+      if (sessionCatalogReplacement) {\n+        /*\n+         * Spark Session Catalog cannot stage a replacement of a Session table with an Iceberg Table.\n+         * To workaround this we create a replacement table which is renamed after it\n+         * is successfully constructed.\n+         */\n+        stagedTable = stagingCatalog.stageCreate(Identifier.of(\n+            destTableName.namespace(),\n+            destTableName.name() + REPLACEMENT_NAME),\n+            sourceTable.schema(),\n+            Spark3Util.toTransforms(sourcePartitionSpec), newTableProperties);\n+      } else {\n+        stagedTable = stagingCatalog.stageCreate(destTableName, sourceTable.schema(),\n+            Spark3Util.toTransforms(sourcePartitionSpec), newTableProperties);\n+      }\n+    } catch (NoSuchNamespaceException e) {\n+      throw new IllegalArgumentException(\"Cannot create a new table in a namespace which does not exist\", e);\n+    } catch (TableAlreadyExistsException e) {\n+      throw new IllegalArgumentException(\"Destination table already exists\", e);\n+    }\n+\n+    String stagingLocation = destMetadataLocation;\n+    Table icebergTable = ((SparkTable) stagedTable).table();\n+\n+    LOG.info(\"Beginning migration of {} to {}\", sourceTableName, destTableName);\n+    long numMigratedFiles = 0;\n+    try {\n+      SparkTableUtil.importSparkTable(spark, Spark3Util.toTableIdentifier(sourceTableName), icebergTable,\n+          stagingLocation);\n+\n+      Snapshot snapshot = icebergTable.currentSnapshot();\n+      numMigratedFiles = Long.valueOf(snapshot.summary().get(SnapshotSummary.TOTAL_DATA_FILES_PROP));\n+\n+      stagedTable.commitStagedChanges();\n+      LOG.info(\"Successfully loaded Iceberg metadata for {} files\", numMigratedFiles);\n+    } catch (Exception e) {\n+      LOG.error(\"Error when attempting to commit migration changes, rolling back\", e);\n+      stagedTable.abortStagedChanges();\n+      throw e;\n+    }\n+\n+    if (sessionCatalogReplacement) {\n+      Identifier replacementTable = Identifier.of(destTableName.namespace(), destTableName.name() + REPLACEMENT_NAME);\n+      try {\n+        stagingCatalog.dropTable(destTableName);\n+        stagingCatalog.renameTable(replacementTable, destTableName);\n+      } catch (NoSuchTableException e) {\n+        LOG.error(\"Cannot migrate, replacement table is missing. Attempting to recreate source table\", e);\n+        try {\n+          stagingCatalog.createTable(sourceTableName, sourceTable.schema(),\n+              Spark3Util.toTransforms(sourcePartitionSpec), JavaConverters.mapAsJavaMap(sourceTable.properties()));\n+        } catch (TableAlreadyExistsException tableAlreadyExistsException) {\n+          Log.error(\"Cannot recreate source table. Source table has already been recreated\", e);\n+          throw new RuntimeException(e);\n+        } catch (NoSuchNamespaceException noSuchNamespaceException) {\n+          Log.error(\"Cannot recreate source table. Source namespace has been removed, cannot recreate\", e);\n+          throw new RuntimeException(e);\n+        }\n+      } catch (TableAlreadyExistsException e) {\n+        Log.error(\"Cannot migrate, Source table was recreated before replacement could be moved. \" +\n+            \"Attempting to remove replacement table.\", e);\n+        stagingCatalog.dropTable(replacementTable);\n+        stagedTable.abortStagedChanges();\n+      }\n+    }\n+\n+    return numMigratedFiles;\n+  }\n+\n+  @Override\n+  public CreateAction withAdditionalProperties(Map<String, String> properties) {\n+    this.additionalProperties.putAll(properties);\n+    return this;\n+  }\n+\n+  @Override\n+  public CreateAction withAdditionalProperty(String key, String value) {\n+    this.additionalProperties.put(key, value);\n+    return this;\n+  }\n+\n+  @Override\n+  public CreateAction as(String newName) {\n+    Spark3Util.CatalogAndIdentifier newDest = Spark3Util.catalogAndIdentifier(spark, newName);\n+    return new Spark3CreateAction(spark, sourceCatalog, sourceTableName, newDest.catalog(), newDest.identifier())\n+        .withAdditionalProperties(this.additionalProperties);\n+  }\n+\n+  private static void validateSourceTable(CatalogTable sourceTable, Set<String> supportedSourceTableProviders) {\n+    String sourceTableProvider = sourceTable.provider().get().toLowerCase(Locale.ROOT);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTY5Mzc3Mw=="}, "originalCommit": {"oid": "216eb56a60a7ea3b4bdd9465ae92116ab44ef8b8"}, "originalPosition": 253}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDU1MzA0MQ==", "bodyText": "So this is ok, Managed tables return a provider of hive.", "url": "https://github.com/apache/iceberg/pull/1525#discussion_r524553041", "createdAt": "2020-11-16T20:30:01Z", "author": {"login": "RussellSpitzer"}, "path": "spark3/src/main/java/org/apache/iceberg/actions/Spark3CreateAction.java", "diffHunk": "@@ -0,0 +1,290 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.actions;\n+\n+import java.util.Arrays;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Set;\n+import jline.internal.Log;\n+import org.apache.iceberg.PartitionSpec;\n+import org.apache.iceberg.Snapshot;\n+import org.apache.iceberg.SnapshotSummary;\n+import org.apache.iceberg.Table;\n+import org.apache.iceberg.TableProperties;\n+import org.apache.iceberg.relocated.com.google.common.collect.ImmutableMap;\n+import org.apache.iceberg.relocated.com.google.common.collect.ImmutableSet;\n+import org.apache.iceberg.relocated.com.google.common.collect.Maps;\n+import org.apache.iceberg.spark.Spark3Util;\n+import org.apache.iceberg.spark.SparkCatalog;\n+import org.apache.iceberg.spark.SparkSchemaUtil;\n+import org.apache.iceberg.spark.SparkSessionCatalog;\n+import org.apache.iceberg.spark.SparkTableUtil;\n+import org.apache.iceberg.spark.source.SparkTable;\n+import org.apache.spark.sql.AnalysisException;\n+import org.apache.spark.sql.SparkSession;\n+import org.apache.spark.sql.catalyst.analysis.NoSuchDatabaseException;\n+import org.apache.spark.sql.catalyst.analysis.NoSuchNamespaceException;\n+import org.apache.spark.sql.catalyst.analysis.NoSuchTableException;\n+import org.apache.spark.sql.catalyst.analysis.TableAlreadyExistsException;\n+import org.apache.spark.sql.catalyst.catalog.CatalogTable;\n+import org.apache.spark.sql.catalyst.catalog.CatalogUtils;\n+import org.apache.spark.sql.connector.catalog.CatalogPlugin;\n+import org.apache.spark.sql.connector.catalog.Identifier;\n+import org.apache.spark.sql.connector.catalog.StagedTable;\n+import org.apache.spark.sql.connector.catalog.StagingTableCatalog;\n+import org.apache.spark.sql.connector.catalog.TableCatalog;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import scala.collection.JavaConverters;\n+\n+/**\n+ * This action will migrate a known table in a Spark Catalog that is not an Iceberg table into an Iceberg table.\n+ * The created new table will be able to interact with and modify files in the original table.\n+ *\n+ * There are two main code paths\n+ *   - Creating a brand new iceberg table or replacing an existing Iceberg table\n+ *   This pathway will use a staged table to stage the creation or replacement, only committing after\n+ *   import has succeeded.\n+ *\n+ *   - Replacing a table in the Session Catalog with an Iceberg Table with the same name\n+ *   This pathway will create a temporary table with a different name. This replacement table will\n+ *   be committed upon a successful import. Then the original session catalog entry will be dropped\n+ *   and the new replacement table renamed to take its place.\n+ */\n+class Spark3CreateAction implements CreateAction {\n+  private static final Logger LOG = LoggerFactory.getLogger(Spark3CreateAction.class);\n+  private static final Set<String> ALLOWED_SOURCES = ImmutableSet.of(\"parquet\", \"avro\", \"orc\", \"hive\");\n+  private static final String ICEBERG_METADATA_FOLDER = \"metadata\";\n+  private static final String REPLACEMENT_NAME = \"_REPLACEMENT_\";\n+\n+  private final SparkSession spark;\n+\n+  // Source Fields\n+  private final CatalogTable sourceTable;\n+  private final String sourceTableLocation;\n+  private final CatalogPlugin sourceCatalog;\n+  private final Identifier sourceTableName;\n+  private final PartitionSpec sourcePartitionSpec;\n+\n+  // Destination Fields\n+  private final Boolean sessionCatalogReplacement;\n+  private final CatalogPlugin destCatalog;\n+  private final Identifier destTableName;\n+\n+  // Optional Parameters for destination\n+  private String destDataLocation;\n+  private String destMetadataLocation;\n+  private Map<String, String> additionalProperties = Maps.newHashMap();\n+\n+  Spark3CreateAction(SparkSession spark, CatalogPlugin sourceCatalog, Identifier sourceTableName,\n+                       CatalogPlugin destCatalog,  Identifier destTableName) {\n+\n+    this.spark = spark;\n+    this.sourceCatalog = checkSourceCatalog(sourceCatalog);\n+    this.sourceTableName = sourceTableName;\n+    this.destCatalog = destCatalog;\n+    this.destTableName = destTableName;\n+\n+    try {\n+      String sourceString = String.join(\".\", sourceTableName.namespace()) + \".\" + sourceTableName.name();\n+      sourcePartitionSpec = SparkSchemaUtil.specForTable(spark, sourceString);\n+    } catch (AnalysisException e) {\n+      throw new IllegalArgumentException(\"Cannot determining partitioning of \" + sourceTableName.toString(), e);\n+    }\n+\n+    try {\n+      this.sourceTable = spark.sessionState().catalog().getTableMetadata(Spark3Util.toTableIdentifier(sourceTableName));\n+    } catch (NoSuchTableException | NoSuchDatabaseException e) {\n+      throw new IllegalArgumentException(String.format(\"Could not find source table %s\", sourceTableName), e);\n+    }\n+    validateSourceTable(sourceTable, ALLOWED_SOURCES);\n+\n+    this.sessionCatalogReplacement = isSessionCatalogReplacement();\n+\n+    this.sourceTableLocation = CatalogUtils.URIToString(sourceTable.storage().locationUri().get());\n+    this.destDataLocation = sourceTableLocation;\n+    this.destMetadataLocation = sourceTableLocation + \"/\" + ICEBERG_METADATA_FOLDER;\n+  }\n+\n+  private boolean isSessionCatalogReplacement() {\n+    boolean sourceIceberg = sourceTable.provider().get().toLowerCase(Locale.ROOT).equals(\"iceberg\");\n+    boolean sameCatalog = sourceCatalog == destCatalog;\n+    boolean sameIdentifier = sourceTableName.name().equals(destTableName.name()) &&\n+        Arrays.equals(sourceTableName.namespace(), destTableName.namespace());\n+    return !sourceIceberg && sameCatalog && sameIdentifier;\n+  }\n+\n+\n+  /**\n+   * Creates the Iceberg data and metadata at a given location instead of the source table\n+   * location. New metadata and data files will be added to this\n+   * new location and further operations will not effect the source table.\n+   *\n+   * Use this if you would like to experiment with Iceberg without changing\n+   * your original files.\n+   * @param newLocation the base directory for the new Iceberg Table\n+   * @return this for chaining\n+   */\n+  CreateAction asSnapshotAtLocation(String newLocation) {\n+    this.destDataLocation = newLocation;\n+    this.destMetadataLocation = newLocation + \"/\" + ICEBERG_METADATA_FOLDER;\n+    return this;\n+  }\n+\n+  @Override\n+  public Long execute() {\n+    StagingTableCatalog stagingCatalog = checkDestinationCatalog(destCatalog);\n+    Map<String, String> newTableProperties = new ImmutableMap.Builder<String, String>()\n+        .put(TableCatalog.PROP_PROVIDER, \"iceberg\")\n+        .putAll(JavaConverters.mapAsJavaMapConverter(sourceTable.properties()).asJava())\n+        .putAll(extraIcebergTableProps(destDataLocation, destMetadataLocation))\n+        .putAll(additionalProperties)\n+        .build();\n+\n+    StagedTable stagedTable;\n+    try {\n+      if (sessionCatalogReplacement) {\n+        /*\n+         * Spark Session Catalog cannot stage a replacement of a Session table with an Iceberg Table.\n+         * To workaround this we create a replacement table which is renamed after it\n+         * is successfully constructed.\n+         */\n+        stagedTable = stagingCatalog.stageCreate(Identifier.of(\n+            destTableName.namespace(),\n+            destTableName.name() + REPLACEMENT_NAME),\n+            sourceTable.schema(),\n+            Spark3Util.toTransforms(sourcePartitionSpec), newTableProperties);\n+      } else {\n+        stagedTable = stagingCatalog.stageCreate(destTableName, sourceTable.schema(),\n+            Spark3Util.toTransforms(sourcePartitionSpec), newTableProperties);\n+      }\n+    } catch (NoSuchNamespaceException e) {\n+      throw new IllegalArgumentException(\"Cannot create a new table in a namespace which does not exist\", e);\n+    } catch (TableAlreadyExistsException e) {\n+      throw new IllegalArgumentException(\"Destination table already exists\", e);\n+    }\n+\n+    String stagingLocation = destMetadataLocation;\n+    Table icebergTable = ((SparkTable) stagedTable).table();\n+\n+    LOG.info(\"Beginning migration of {} to {}\", sourceTableName, destTableName);\n+    long numMigratedFiles = 0;\n+    try {\n+      SparkTableUtil.importSparkTable(spark, Spark3Util.toTableIdentifier(sourceTableName), icebergTable,\n+          stagingLocation);\n+\n+      Snapshot snapshot = icebergTable.currentSnapshot();\n+      numMigratedFiles = Long.valueOf(snapshot.summary().get(SnapshotSummary.TOTAL_DATA_FILES_PROP));\n+\n+      stagedTable.commitStagedChanges();\n+      LOG.info(\"Successfully loaded Iceberg metadata for {} files\", numMigratedFiles);\n+    } catch (Exception e) {\n+      LOG.error(\"Error when attempting to commit migration changes, rolling back\", e);\n+      stagedTable.abortStagedChanges();\n+      throw e;\n+    }\n+\n+    if (sessionCatalogReplacement) {\n+      Identifier replacementTable = Identifier.of(destTableName.namespace(), destTableName.name() + REPLACEMENT_NAME);\n+      try {\n+        stagingCatalog.dropTable(destTableName);\n+        stagingCatalog.renameTable(replacementTable, destTableName);\n+      } catch (NoSuchTableException e) {\n+        LOG.error(\"Cannot migrate, replacement table is missing. Attempting to recreate source table\", e);\n+        try {\n+          stagingCatalog.createTable(sourceTableName, sourceTable.schema(),\n+              Spark3Util.toTransforms(sourcePartitionSpec), JavaConverters.mapAsJavaMap(sourceTable.properties()));\n+        } catch (TableAlreadyExistsException tableAlreadyExistsException) {\n+          Log.error(\"Cannot recreate source table. Source table has already been recreated\", e);\n+          throw new RuntimeException(e);\n+        } catch (NoSuchNamespaceException noSuchNamespaceException) {\n+          Log.error(\"Cannot recreate source table. Source namespace has been removed, cannot recreate\", e);\n+          throw new RuntimeException(e);\n+        }\n+      } catch (TableAlreadyExistsException e) {\n+        Log.error(\"Cannot migrate, Source table was recreated before replacement could be moved. \" +\n+            \"Attempting to remove replacement table.\", e);\n+        stagingCatalog.dropTable(replacementTable);\n+        stagedTable.abortStagedChanges();\n+      }\n+    }\n+\n+    return numMigratedFiles;\n+  }\n+\n+  @Override\n+  public CreateAction withAdditionalProperties(Map<String, String> properties) {\n+    this.additionalProperties.putAll(properties);\n+    return this;\n+  }\n+\n+  @Override\n+  public CreateAction withAdditionalProperty(String key, String value) {\n+    this.additionalProperties.put(key, value);\n+    return this;\n+  }\n+\n+  @Override\n+  public CreateAction as(String newName) {\n+    Spark3Util.CatalogAndIdentifier newDest = Spark3Util.catalogAndIdentifier(spark, newName);\n+    return new Spark3CreateAction(spark, sourceCatalog, sourceTableName, newDest.catalog(), newDest.identifier())\n+        .withAdditionalProperties(this.additionalProperties);\n+  }\n+\n+  private static void validateSourceTable(CatalogTable sourceTable, Set<String> supportedSourceTableProviders) {\n+    String sourceTableProvider = sourceTable.provider().get().toLowerCase(Locale.ROOT);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTY5Mzc3Mw=="}, "originalCommit": {"oid": "216eb56a60a7ea3b4bdd9465ae92116ab44ef8b8"}, "originalPosition": 253}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDU1MzE1NQ==", "bodyText": "Also added managed hive table tests", "url": "https://github.com/apache/iceberg/pull/1525#discussion_r524553155", "createdAt": "2020-11-16T20:30:15Z", "author": {"login": "RussellSpitzer"}, "path": "spark3/src/main/java/org/apache/iceberg/actions/Spark3CreateAction.java", "diffHunk": "@@ -0,0 +1,290 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.actions;\n+\n+import java.util.Arrays;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Set;\n+import jline.internal.Log;\n+import org.apache.iceberg.PartitionSpec;\n+import org.apache.iceberg.Snapshot;\n+import org.apache.iceberg.SnapshotSummary;\n+import org.apache.iceberg.Table;\n+import org.apache.iceberg.TableProperties;\n+import org.apache.iceberg.relocated.com.google.common.collect.ImmutableMap;\n+import org.apache.iceberg.relocated.com.google.common.collect.ImmutableSet;\n+import org.apache.iceberg.relocated.com.google.common.collect.Maps;\n+import org.apache.iceberg.spark.Spark3Util;\n+import org.apache.iceberg.spark.SparkCatalog;\n+import org.apache.iceberg.spark.SparkSchemaUtil;\n+import org.apache.iceberg.spark.SparkSessionCatalog;\n+import org.apache.iceberg.spark.SparkTableUtil;\n+import org.apache.iceberg.spark.source.SparkTable;\n+import org.apache.spark.sql.AnalysisException;\n+import org.apache.spark.sql.SparkSession;\n+import org.apache.spark.sql.catalyst.analysis.NoSuchDatabaseException;\n+import org.apache.spark.sql.catalyst.analysis.NoSuchNamespaceException;\n+import org.apache.spark.sql.catalyst.analysis.NoSuchTableException;\n+import org.apache.spark.sql.catalyst.analysis.TableAlreadyExistsException;\n+import org.apache.spark.sql.catalyst.catalog.CatalogTable;\n+import org.apache.spark.sql.catalyst.catalog.CatalogUtils;\n+import org.apache.spark.sql.connector.catalog.CatalogPlugin;\n+import org.apache.spark.sql.connector.catalog.Identifier;\n+import org.apache.spark.sql.connector.catalog.StagedTable;\n+import org.apache.spark.sql.connector.catalog.StagingTableCatalog;\n+import org.apache.spark.sql.connector.catalog.TableCatalog;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import scala.collection.JavaConverters;\n+\n+/**\n+ * This action will migrate a known table in a Spark Catalog that is not an Iceberg table into an Iceberg table.\n+ * The created new table will be able to interact with and modify files in the original table.\n+ *\n+ * There are two main code paths\n+ *   - Creating a brand new iceberg table or replacing an existing Iceberg table\n+ *   This pathway will use a staged table to stage the creation or replacement, only committing after\n+ *   import has succeeded.\n+ *\n+ *   - Replacing a table in the Session Catalog with an Iceberg Table with the same name\n+ *   This pathway will create a temporary table with a different name. This replacement table will\n+ *   be committed upon a successful import. Then the original session catalog entry will be dropped\n+ *   and the new replacement table renamed to take its place.\n+ */\n+class Spark3CreateAction implements CreateAction {\n+  private static final Logger LOG = LoggerFactory.getLogger(Spark3CreateAction.class);\n+  private static final Set<String> ALLOWED_SOURCES = ImmutableSet.of(\"parquet\", \"avro\", \"orc\", \"hive\");\n+  private static final String ICEBERG_METADATA_FOLDER = \"metadata\";\n+  private static final String REPLACEMENT_NAME = \"_REPLACEMENT_\";\n+\n+  private final SparkSession spark;\n+\n+  // Source Fields\n+  private final CatalogTable sourceTable;\n+  private final String sourceTableLocation;\n+  private final CatalogPlugin sourceCatalog;\n+  private final Identifier sourceTableName;\n+  private final PartitionSpec sourcePartitionSpec;\n+\n+  // Destination Fields\n+  private final Boolean sessionCatalogReplacement;\n+  private final CatalogPlugin destCatalog;\n+  private final Identifier destTableName;\n+\n+  // Optional Parameters for destination\n+  private String destDataLocation;\n+  private String destMetadataLocation;\n+  private Map<String, String> additionalProperties = Maps.newHashMap();\n+\n+  Spark3CreateAction(SparkSession spark, CatalogPlugin sourceCatalog, Identifier sourceTableName,\n+                       CatalogPlugin destCatalog,  Identifier destTableName) {\n+\n+    this.spark = spark;\n+    this.sourceCatalog = checkSourceCatalog(sourceCatalog);\n+    this.sourceTableName = sourceTableName;\n+    this.destCatalog = destCatalog;\n+    this.destTableName = destTableName;\n+\n+    try {\n+      String sourceString = String.join(\".\", sourceTableName.namespace()) + \".\" + sourceTableName.name();\n+      sourcePartitionSpec = SparkSchemaUtil.specForTable(spark, sourceString);\n+    } catch (AnalysisException e) {\n+      throw new IllegalArgumentException(\"Cannot determining partitioning of \" + sourceTableName.toString(), e);\n+    }\n+\n+    try {\n+      this.sourceTable = spark.sessionState().catalog().getTableMetadata(Spark3Util.toTableIdentifier(sourceTableName));\n+    } catch (NoSuchTableException | NoSuchDatabaseException e) {\n+      throw new IllegalArgumentException(String.format(\"Could not find source table %s\", sourceTableName), e);\n+    }\n+    validateSourceTable(sourceTable, ALLOWED_SOURCES);\n+\n+    this.sessionCatalogReplacement = isSessionCatalogReplacement();\n+\n+    this.sourceTableLocation = CatalogUtils.URIToString(sourceTable.storage().locationUri().get());\n+    this.destDataLocation = sourceTableLocation;\n+    this.destMetadataLocation = sourceTableLocation + \"/\" + ICEBERG_METADATA_FOLDER;\n+  }\n+\n+  private boolean isSessionCatalogReplacement() {\n+    boolean sourceIceberg = sourceTable.provider().get().toLowerCase(Locale.ROOT).equals(\"iceberg\");\n+    boolean sameCatalog = sourceCatalog == destCatalog;\n+    boolean sameIdentifier = sourceTableName.name().equals(destTableName.name()) &&\n+        Arrays.equals(sourceTableName.namespace(), destTableName.namespace());\n+    return !sourceIceberg && sameCatalog && sameIdentifier;\n+  }\n+\n+\n+  /**\n+   * Creates the Iceberg data and metadata at a given location instead of the source table\n+   * location. New metadata and data files will be added to this\n+   * new location and further operations will not effect the source table.\n+   *\n+   * Use this if you would like to experiment with Iceberg without changing\n+   * your original files.\n+   * @param newLocation the base directory for the new Iceberg Table\n+   * @return this for chaining\n+   */\n+  CreateAction asSnapshotAtLocation(String newLocation) {\n+    this.destDataLocation = newLocation;\n+    this.destMetadataLocation = newLocation + \"/\" + ICEBERG_METADATA_FOLDER;\n+    return this;\n+  }\n+\n+  @Override\n+  public Long execute() {\n+    StagingTableCatalog stagingCatalog = checkDestinationCatalog(destCatalog);\n+    Map<String, String> newTableProperties = new ImmutableMap.Builder<String, String>()\n+        .put(TableCatalog.PROP_PROVIDER, \"iceberg\")\n+        .putAll(JavaConverters.mapAsJavaMapConverter(sourceTable.properties()).asJava())\n+        .putAll(extraIcebergTableProps(destDataLocation, destMetadataLocation))\n+        .putAll(additionalProperties)\n+        .build();\n+\n+    StagedTable stagedTable;\n+    try {\n+      if (sessionCatalogReplacement) {\n+        /*\n+         * Spark Session Catalog cannot stage a replacement of a Session table with an Iceberg Table.\n+         * To workaround this we create a replacement table which is renamed after it\n+         * is successfully constructed.\n+         */\n+        stagedTable = stagingCatalog.stageCreate(Identifier.of(\n+            destTableName.namespace(),\n+            destTableName.name() + REPLACEMENT_NAME),\n+            sourceTable.schema(),\n+            Spark3Util.toTransforms(sourcePartitionSpec), newTableProperties);\n+      } else {\n+        stagedTable = stagingCatalog.stageCreate(destTableName, sourceTable.schema(),\n+            Spark3Util.toTransforms(sourcePartitionSpec), newTableProperties);\n+      }\n+    } catch (NoSuchNamespaceException e) {\n+      throw new IllegalArgumentException(\"Cannot create a new table in a namespace which does not exist\", e);\n+    } catch (TableAlreadyExistsException e) {\n+      throw new IllegalArgumentException(\"Destination table already exists\", e);\n+    }\n+\n+    String stagingLocation = destMetadataLocation;\n+    Table icebergTable = ((SparkTable) stagedTable).table();\n+\n+    LOG.info(\"Beginning migration of {} to {}\", sourceTableName, destTableName);\n+    long numMigratedFiles = 0;\n+    try {\n+      SparkTableUtil.importSparkTable(spark, Spark3Util.toTableIdentifier(sourceTableName), icebergTable,\n+          stagingLocation);\n+\n+      Snapshot snapshot = icebergTable.currentSnapshot();\n+      numMigratedFiles = Long.valueOf(snapshot.summary().get(SnapshotSummary.TOTAL_DATA_FILES_PROP));\n+\n+      stagedTable.commitStagedChanges();\n+      LOG.info(\"Successfully loaded Iceberg metadata for {} files\", numMigratedFiles);\n+    } catch (Exception e) {\n+      LOG.error(\"Error when attempting to commit migration changes, rolling back\", e);\n+      stagedTable.abortStagedChanges();\n+      throw e;\n+    }\n+\n+    if (sessionCatalogReplacement) {\n+      Identifier replacementTable = Identifier.of(destTableName.namespace(), destTableName.name() + REPLACEMENT_NAME);\n+      try {\n+        stagingCatalog.dropTable(destTableName);\n+        stagingCatalog.renameTable(replacementTable, destTableName);\n+      } catch (NoSuchTableException e) {\n+        LOG.error(\"Cannot migrate, replacement table is missing. Attempting to recreate source table\", e);\n+        try {\n+          stagingCatalog.createTable(sourceTableName, sourceTable.schema(),\n+              Spark3Util.toTransforms(sourcePartitionSpec), JavaConverters.mapAsJavaMap(sourceTable.properties()));\n+        } catch (TableAlreadyExistsException tableAlreadyExistsException) {\n+          Log.error(\"Cannot recreate source table. Source table has already been recreated\", e);\n+          throw new RuntimeException(e);\n+        } catch (NoSuchNamespaceException noSuchNamespaceException) {\n+          Log.error(\"Cannot recreate source table. Source namespace has been removed, cannot recreate\", e);\n+          throw new RuntimeException(e);\n+        }\n+      } catch (TableAlreadyExistsException e) {\n+        Log.error(\"Cannot migrate, Source table was recreated before replacement could be moved. \" +\n+            \"Attempting to remove replacement table.\", e);\n+        stagingCatalog.dropTable(replacementTable);\n+        stagedTable.abortStagedChanges();\n+      }\n+    }\n+\n+    return numMigratedFiles;\n+  }\n+\n+  @Override\n+  public CreateAction withAdditionalProperties(Map<String, String> properties) {\n+    this.additionalProperties.putAll(properties);\n+    return this;\n+  }\n+\n+  @Override\n+  public CreateAction withAdditionalProperty(String key, String value) {\n+    this.additionalProperties.put(key, value);\n+    return this;\n+  }\n+\n+  @Override\n+  public CreateAction as(String newName) {\n+    Spark3Util.CatalogAndIdentifier newDest = Spark3Util.catalogAndIdentifier(spark, newName);\n+    return new Spark3CreateAction(spark, sourceCatalog, sourceTableName, newDest.catalog(), newDest.identifier())\n+        .withAdditionalProperties(this.additionalProperties);\n+  }\n+\n+  private static void validateSourceTable(CatalogTable sourceTable, Set<String> supportedSourceTableProviders) {\n+    String sourceTableProvider = sourceTable.provider().get().toLowerCase(Locale.ROOT);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTY5Mzc3Mw=="}, "originalCommit": {"oid": "216eb56a60a7ea3b4bdd9465ae92116ab44ef8b8"}, "originalPosition": 253}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzMTcxNTkyOnYy", "diffSide": "RIGHT", "path": "spark3/src/main/java/org/apache/iceberg/actions/Spark3CreateAction.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQwMDoyNTozM1rOHrzdsw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQxNjoxMjo1N1rOH0GEcg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTY5NDAwMw==", "bodyText": "Should this use a static set of table providers instead of passing them in?", "url": "https://github.com/apache/iceberg/pull/1525#discussion_r515694003", "createdAt": "2020-11-02T00:25:33Z", "author": {"login": "rdblue"}, "path": "spark3/src/main/java/org/apache/iceberg/actions/Spark3CreateAction.java", "diffHunk": "@@ -0,0 +1,290 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.actions;\n+\n+import java.util.Arrays;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Set;\n+import jline.internal.Log;\n+import org.apache.iceberg.PartitionSpec;\n+import org.apache.iceberg.Snapshot;\n+import org.apache.iceberg.SnapshotSummary;\n+import org.apache.iceberg.Table;\n+import org.apache.iceberg.TableProperties;\n+import org.apache.iceberg.relocated.com.google.common.collect.ImmutableMap;\n+import org.apache.iceberg.relocated.com.google.common.collect.ImmutableSet;\n+import org.apache.iceberg.relocated.com.google.common.collect.Maps;\n+import org.apache.iceberg.spark.Spark3Util;\n+import org.apache.iceberg.spark.SparkCatalog;\n+import org.apache.iceberg.spark.SparkSchemaUtil;\n+import org.apache.iceberg.spark.SparkSessionCatalog;\n+import org.apache.iceberg.spark.SparkTableUtil;\n+import org.apache.iceberg.spark.source.SparkTable;\n+import org.apache.spark.sql.AnalysisException;\n+import org.apache.spark.sql.SparkSession;\n+import org.apache.spark.sql.catalyst.analysis.NoSuchDatabaseException;\n+import org.apache.spark.sql.catalyst.analysis.NoSuchNamespaceException;\n+import org.apache.spark.sql.catalyst.analysis.NoSuchTableException;\n+import org.apache.spark.sql.catalyst.analysis.TableAlreadyExistsException;\n+import org.apache.spark.sql.catalyst.catalog.CatalogTable;\n+import org.apache.spark.sql.catalyst.catalog.CatalogUtils;\n+import org.apache.spark.sql.connector.catalog.CatalogPlugin;\n+import org.apache.spark.sql.connector.catalog.Identifier;\n+import org.apache.spark.sql.connector.catalog.StagedTable;\n+import org.apache.spark.sql.connector.catalog.StagingTableCatalog;\n+import org.apache.spark.sql.connector.catalog.TableCatalog;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import scala.collection.JavaConverters;\n+\n+/**\n+ * This action will migrate a known table in a Spark Catalog that is not an Iceberg table into an Iceberg table.\n+ * The created new table will be able to interact with and modify files in the original table.\n+ *\n+ * There are two main code paths\n+ *   - Creating a brand new iceberg table or replacing an existing Iceberg table\n+ *   This pathway will use a staged table to stage the creation or replacement, only committing after\n+ *   import has succeeded.\n+ *\n+ *   - Replacing a table in the Session Catalog with an Iceberg Table with the same name\n+ *   This pathway will create a temporary table with a different name. This replacement table will\n+ *   be committed upon a successful import. Then the original session catalog entry will be dropped\n+ *   and the new replacement table renamed to take its place.\n+ */\n+class Spark3CreateAction implements CreateAction {\n+  private static final Logger LOG = LoggerFactory.getLogger(Spark3CreateAction.class);\n+  private static final Set<String> ALLOWED_SOURCES = ImmutableSet.of(\"parquet\", \"avro\", \"orc\", \"hive\");\n+  private static final String ICEBERG_METADATA_FOLDER = \"metadata\";\n+  private static final String REPLACEMENT_NAME = \"_REPLACEMENT_\";\n+\n+  private final SparkSession spark;\n+\n+  // Source Fields\n+  private final CatalogTable sourceTable;\n+  private final String sourceTableLocation;\n+  private final CatalogPlugin sourceCatalog;\n+  private final Identifier sourceTableName;\n+  private final PartitionSpec sourcePartitionSpec;\n+\n+  // Destination Fields\n+  private final Boolean sessionCatalogReplacement;\n+  private final CatalogPlugin destCatalog;\n+  private final Identifier destTableName;\n+\n+  // Optional Parameters for destination\n+  private String destDataLocation;\n+  private String destMetadataLocation;\n+  private Map<String, String> additionalProperties = Maps.newHashMap();\n+\n+  Spark3CreateAction(SparkSession spark, CatalogPlugin sourceCatalog, Identifier sourceTableName,\n+                       CatalogPlugin destCatalog,  Identifier destTableName) {\n+\n+    this.spark = spark;\n+    this.sourceCatalog = checkSourceCatalog(sourceCatalog);\n+    this.sourceTableName = sourceTableName;\n+    this.destCatalog = destCatalog;\n+    this.destTableName = destTableName;\n+\n+    try {\n+      String sourceString = String.join(\".\", sourceTableName.namespace()) + \".\" + sourceTableName.name();\n+      sourcePartitionSpec = SparkSchemaUtil.specForTable(spark, sourceString);\n+    } catch (AnalysisException e) {\n+      throw new IllegalArgumentException(\"Cannot determining partitioning of \" + sourceTableName.toString(), e);\n+    }\n+\n+    try {\n+      this.sourceTable = spark.sessionState().catalog().getTableMetadata(Spark3Util.toTableIdentifier(sourceTableName));\n+    } catch (NoSuchTableException | NoSuchDatabaseException e) {\n+      throw new IllegalArgumentException(String.format(\"Could not find source table %s\", sourceTableName), e);\n+    }\n+    validateSourceTable(sourceTable, ALLOWED_SOURCES);\n+\n+    this.sessionCatalogReplacement = isSessionCatalogReplacement();\n+\n+    this.sourceTableLocation = CatalogUtils.URIToString(sourceTable.storage().locationUri().get());\n+    this.destDataLocation = sourceTableLocation;\n+    this.destMetadataLocation = sourceTableLocation + \"/\" + ICEBERG_METADATA_FOLDER;\n+  }\n+\n+  private boolean isSessionCatalogReplacement() {\n+    boolean sourceIceberg = sourceTable.provider().get().toLowerCase(Locale.ROOT).equals(\"iceberg\");\n+    boolean sameCatalog = sourceCatalog == destCatalog;\n+    boolean sameIdentifier = sourceTableName.name().equals(destTableName.name()) &&\n+        Arrays.equals(sourceTableName.namespace(), destTableName.namespace());\n+    return !sourceIceberg && sameCatalog && sameIdentifier;\n+  }\n+\n+\n+  /**\n+   * Creates the Iceberg data and metadata at a given location instead of the source table\n+   * location. New metadata and data files will be added to this\n+   * new location and further operations will not effect the source table.\n+   *\n+   * Use this if you would like to experiment with Iceberg without changing\n+   * your original files.\n+   * @param newLocation the base directory for the new Iceberg Table\n+   * @return this for chaining\n+   */\n+  CreateAction asSnapshotAtLocation(String newLocation) {\n+    this.destDataLocation = newLocation;\n+    this.destMetadataLocation = newLocation + \"/\" + ICEBERG_METADATA_FOLDER;\n+    return this;\n+  }\n+\n+  @Override\n+  public Long execute() {\n+    StagingTableCatalog stagingCatalog = checkDestinationCatalog(destCatalog);\n+    Map<String, String> newTableProperties = new ImmutableMap.Builder<String, String>()\n+        .put(TableCatalog.PROP_PROVIDER, \"iceberg\")\n+        .putAll(JavaConverters.mapAsJavaMapConverter(sourceTable.properties()).asJava())\n+        .putAll(extraIcebergTableProps(destDataLocation, destMetadataLocation))\n+        .putAll(additionalProperties)\n+        .build();\n+\n+    StagedTable stagedTable;\n+    try {\n+      if (sessionCatalogReplacement) {\n+        /*\n+         * Spark Session Catalog cannot stage a replacement of a Session table with an Iceberg Table.\n+         * To workaround this we create a replacement table which is renamed after it\n+         * is successfully constructed.\n+         */\n+        stagedTable = stagingCatalog.stageCreate(Identifier.of(\n+            destTableName.namespace(),\n+            destTableName.name() + REPLACEMENT_NAME),\n+            sourceTable.schema(),\n+            Spark3Util.toTransforms(sourcePartitionSpec), newTableProperties);\n+      } else {\n+        stagedTable = stagingCatalog.stageCreate(destTableName, sourceTable.schema(),\n+            Spark3Util.toTransforms(sourcePartitionSpec), newTableProperties);\n+      }\n+    } catch (NoSuchNamespaceException e) {\n+      throw new IllegalArgumentException(\"Cannot create a new table in a namespace which does not exist\", e);\n+    } catch (TableAlreadyExistsException e) {\n+      throw new IllegalArgumentException(\"Destination table already exists\", e);\n+    }\n+\n+    String stagingLocation = destMetadataLocation;\n+    Table icebergTable = ((SparkTable) stagedTable).table();\n+\n+    LOG.info(\"Beginning migration of {} to {}\", sourceTableName, destTableName);\n+    long numMigratedFiles = 0;\n+    try {\n+      SparkTableUtil.importSparkTable(spark, Spark3Util.toTableIdentifier(sourceTableName), icebergTable,\n+          stagingLocation);\n+\n+      Snapshot snapshot = icebergTable.currentSnapshot();\n+      numMigratedFiles = Long.valueOf(snapshot.summary().get(SnapshotSummary.TOTAL_DATA_FILES_PROP));\n+\n+      stagedTable.commitStagedChanges();\n+      LOG.info(\"Successfully loaded Iceberg metadata for {} files\", numMigratedFiles);\n+    } catch (Exception e) {\n+      LOG.error(\"Error when attempting to commit migration changes, rolling back\", e);\n+      stagedTable.abortStagedChanges();\n+      throw e;\n+    }\n+\n+    if (sessionCatalogReplacement) {\n+      Identifier replacementTable = Identifier.of(destTableName.namespace(), destTableName.name() + REPLACEMENT_NAME);\n+      try {\n+        stagingCatalog.dropTable(destTableName);\n+        stagingCatalog.renameTable(replacementTable, destTableName);\n+      } catch (NoSuchTableException e) {\n+        LOG.error(\"Cannot migrate, replacement table is missing. Attempting to recreate source table\", e);\n+        try {\n+          stagingCatalog.createTable(sourceTableName, sourceTable.schema(),\n+              Spark3Util.toTransforms(sourcePartitionSpec), JavaConverters.mapAsJavaMap(sourceTable.properties()));\n+        } catch (TableAlreadyExistsException tableAlreadyExistsException) {\n+          Log.error(\"Cannot recreate source table. Source table has already been recreated\", e);\n+          throw new RuntimeException(e);\n+        } catch (NoSuchNamespaceException noSuchNamespaceException) {\n+          Log.error(\"Cannot recreate source table. Source namespace has been removed, cannot recreate\", e);\n+          throw new RuntimeException(e);\n+        }\n+      } catch (TableAlreadyExistsException e) {\n+        Log.error(\"Cannot migrate, Source table was recreated before replacement could be moved. \" +\n+            \"Attempting to remove replacement table.\", e);\n+        stagingCatalog.dropTable(replacementTable);\n+        stagedTable.abortStagedChanges();\n+      }\n+    }\n+\n+    return numMigratedFiles;\n+  }\n+\n+  @Override\n+  public CreateAction withAdditionalProperties(Map<String, String> properties) {\n+    this.additionalProperties.putAll(properties);\n+    return this;\n+  }\n+\n+  @Override\n+  public CreateAction withAdditionalProperty(String key, String value) {\n+    this.additionalProperties.put(key, value);\n+    return this;\n+  }\n+\n+  @Override\n+  public CreateAction as(String newName) {\n+    Spark3Util.CatalogAndIdentifier newDest = Spark3Util.catalogAndIdentifier(spark, newName);\n+    return new Spark3CreateAction(spark, sourceCatalog, sourceTableName, newDest.catalog(), newDest.identifier())\n+        .withAdditionalProperties(this.additionalProperties);\n+  }\n+\n+  private static void validateSourceTable(CatalogTable sourceTable, Set<String> supportedSourceTableProviders) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "216eb56a60a7ea3b4bdd9465ae92116ab44ef8b8"}, "originalPosition": 252}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDM4NzQ0Mg==", "bodyText": "Yep, switching.", "url": "https://github.com/apache/iceberg/pull/1525#discussion_r524387442", "createdAt": "2020-11-16T16:12:57Z", "author": {"login": "RussellSpitzer"}, "path": "spark3/src/main/java/org/apache/iceberg/actions/Spark3CreateAction.java", "diffHunk": "@@ -0,0 +1,290 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.actions;\n+\n+import java.util.Arrays;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Set;\n+import jline.internal.Log;\n+import org.apache.iceberg.PartitionSpec;\n+import org.apache.iceberg.Snapshot;\n+import org.apache.iceberg.SnapshotSummary;\n+import org.apache.iceberg.Table;\n+import org.apache.iceberg.TableProperties;\n+import org.apache.iceberg.relocated.com.google.common.collect.ImmutableMap;\n+import org.apache.iceberg.relocated.com.google.common.collect.ImmutableSet;\n+import org.apache.iceberg.relocated.com.google.common.collect.Maps;\n+import org.apache.iceberg.spark.Spark3Util;\n+import org.apache.iceberg.spark.SparkCatalog;\n+import org.apache.iceberg.spark.SparkSchemaUtil;\n+import org.apache.iceberg.spark.SparkSessionCatalog;\n+import org.apache.iceberg.spark.SparkTableUtil;\n+import org.apache.iceberg.spark.source.SparkTable;\n+import org.apache.spark.sql.AnalysisException;\n+import org.apache.spark.sql.SparkSession;\n+import org.apache.spark.sql.catalyst.analysis.NoSuchDatabaseException;\n+import org.apache.spark.sql.catalyst.analysis.NoSuchNamespaceException;\n+import org.apache.spark.sql.catalyst.analysis.NoSuchTableException;\n+import org.apache.spark.sql.catalyst.analysis.TableAlreadyExistsException;\n+import org.apache.spark.sql.catalyst.catalog.CatalogTable;\n+import org.apache.spark.sql.catalyst.catalog.CatalogUtils;\n+import org.apache.spark.sql.connector.catalog.CatalogPlugin;\n+import org.apache.spark.sql.connector.catalog.Identifier;\n+import org.apache.spark.sql.connector.catalog.StagedTable;\n+import org.apache.spark.sql.connector.catalog.StagingTableCatalog;\n+import org.apache.spark.sql.connector.catalog.TableCatalog;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import scala.collection.JavaConverters;\n+\n+/**\n+ * This action will migrate a known table in a Spark Catalog that is not an Iceberg table into an Iceberg table.\n+ * The created new table will be able to interact with and modify files in the original table.\n+ *\n+ * There are two main code paths\n+ *   - Creating a brand new iceberg table or replacing an existing Iceberg table\n+ *   This pathway will use a staged table to stage the creation or replacement, only committing after\n+ *   import has succeeded.\n+ *\n+ *   - Replacing a table in the Session Catalog with an Iceberg Table with the same name\n+ *   This pathway will create a temporary table with a different name. This replacement table will\n+ *   be committed upon a successful import. Then the original session catalog entry will be dropped\n+ *   and the new replacement table renamed to take its place.\n+ */\n+class Spark3CreateAction implements CreateAction {\n+  private static final Logger LOG = LoggerFactory.getLogger(Spark3CreateAction.class);\n+  private static final Set<String> ALLOWED_SOURCES = ImmutableSet.of(\"parquet\", \"avro\", \"orc\", \"hive\");\n+  private static final String ICEBERG_METADATA_FOLDER = \"metadata\";\n+  private static final String REPLACEMENT_NAME = \"_REPLACEMENT_\";\n+\n+  private final SparkSession spark;\n+\n+  // Source Fields\n+  private final CatalogTable sourceTable;\n+  private final String sourceTableLocation;\n+  private final CatalogPlugin sourceCatalog;\n+  private final Identifier sourceTableName;\n+  private final PartitionSpec sourcePartitionSpec;\n+\n+  // Destination Fields\n+  private final Boolean sessionCatalogReplacement;\n+  private final CatalogPlugin destCatalog;\n+  private final Identifier destTableName;\n+\n+  // Optional Parameters for destination\n+  private String destDataLocation;\n+  private String destMetadataLocation;\n+  private Map<String, String> additionalProperties = Maps.newHashMap();\n+\n+  Spark3CreateAction(SparkSession spark, CatalogPlugin sourceCatalog, Identifier sourceTableName,\n+                       CatalogPlugin destCatalog,  Identifier destTableName) {\n+\n+    this.spark = spark;\n+    this.sourceCatalog = checkSourceCatalog(sourceCatalog);\n+    this.sourceTableName = sourceTableName;\n+    this.destCatalog = destCatalog;\n+    this.destTableName = destTableName;\n+\n+    try {\n+      String sourceString = String.join(\".\", sourceTableName.namespace()) + \".\" + sourceTableName.name();\n+      sourcePartitionSpec = SparkSchemaUtil.specForTable(spark, sourceString);\n+    } catch (AnalysisException e) {\n+      throw new IllegalArgumentException(\"Cannot determining partitioning of \" + sourceTableName.toString(), e);\n+    }\n+\n+    try {\n+      this.sourceTable = spark.sessionState().catalog().getTableMetadata(Spark3Util.toTableIdentifier(sourceTableName));\n+    } catch (NoSuchTableException | NoSuchDatabaseException e) {\n+      throw new IllegalArgumentException(String.format(\"Could not find source table %s\", sourceTableName), e);\n+    }\n+    validateSourceTable(sourceTable, ALLOWED_SOURCES);\n+\n+    this.sessionCatalogReplacement = isSessionCatalogReplacement();\n+\n+    this.sourceTableLocation = CatalogUtils.URIToString(sourceTable.storage().locationUri().get());\n+    this.destDataLocation = sourceTableLocation;\n+    this.destMetadataLocation = sourceTableLocation + \"/\" + ICEBERG_METADATA_FOLDER;\n+  }\n+\n+  private boolean isSessionCatalogReplacement() {\n+    boolean sourceIceberg = sourceTable.provider().get().toLowerCase(Locale.ROOT).equals(\"iceberg\");\n+    boolean sameCatalog = sourceCatalog == destCatalog;\n+    boolean sameIdentifier = sourceTableName.name().equals(destTableName.name()) &&\n+        Arrays.equals(sourceTableName.namespace(), destTableName.namespace());\n+    return !sourceIceberg && sameCatalog && sameIdentifier;\n+  }\n+\n+\n+  /**\n+   * Creates the Iceberg data and metadata at a given location instead of the source table\n+   * location. New metadata and data files will be added to this\n+   * new location and further operations will not effect the source table.\n+   *\n+   * Use this if you would like to experiment with Iceberg without changing\n+   * your original files.\n+   * @param newLocation the base directory for the new Iceberg Table\n+   * @return this for chaining\n+   */\n+  CreateAction asSnapshotAtLocation(String newLocation) {\n+    this.destDataLocation = newLocation;\n+    this.destMetadataLocation = newLocation + \"/\" + ICEBERG_METADATA_FOLDER;\n+    return this;\n+  }\n+\n+  @Override\n+  public Long execute() {\n+    StagingTableCatalog stagingCatalog = checkDestinationCatalog(destCatalog);\n+    Map<String, String> newTableProperties = new ImmutableMap.Builder<String, String>()\n+        .put(TableCatalog.PROP_PROVIDER, \"iceberg\")\n+        .putAll(JavaConverters.mapAsJavaMapConverter(sourceTable.properties()).asJava())\n+        .putAll(extraIcebergTableProps(destDataLocation, destMetadataLocation))\n+        .putAll(additionalProperties)\n+        .build();\n+\n+    StagedTable stagedTable;\n+    try {\n+      if (sessionCatalogReplacement) {\n+        /*\n+         * Spark Session Catalog cannot stage a replacement of a Session table with an Iceberg Table.\n+         * To workaround this we create a replacement table which is renamed after it\n+         * is successfully constructed.\n+         */\n+        stagedTable = stagingCatalog.stageCreate(Identifier.of(\n+            destTableName.namespace(),\n+            destTableName.name() + REPLACEMENT_NAME),\n+            sourceTable.schema(),\n+            Spark3Util.toTransforms(sourcePartitionSpec), newTableProperties);\n+      } else {\n+        stagedTable = stagingCatalog.stageCreate(destTableName, sourceTable.schema(),\n+            Spark3Util.toTransforms(sourcePartitionSpec), newTableProperties);\n+      }\n+    } catch (NoSuchNamespaceException e) {\n+      throw new IllegalArgumentException(\"Cannot create a new table in a namespace which does not exist\", e);\n+    } catch (TableAlreadyExistsException e) {\n+      throw new IllegalArgumentException(\"Destination table already exists\", e);\n+    }\n+\n+    String stagingLocation = destMetadataLocation;\n+    Table icebergTable = ((SparkTable) stagedTable).table();\n+\n+    LOG.info(\"Beginning migration of {} to {}\", sourceTableName, destTableName);\n+    long numMigratedFiles = 0;\n+    try {\n+      SparkTableUtil.importSparkTable(spark, Spark3Util.toTableIdentifier(sourceTableName), icebergTable,\n+          stagingLocation);\n+\n+      Snapshot snapshot = icebergTable.currentSnapshot();\n+      numMigratedFiles = Long.valueOf(snapshot.summary().get(SnapshotSummary.TOTAL_DATA_FILES_PROP));\n+\n+      stagedTable.commitStagedChanges();\n+      LOG.info(\"Successfully loaded Iceberg metadata for {} files\", numMigratedFiles);\n+    } catch (Exception e) {\n+      LOG.error(\"Error when attempting to commit migration changes, rolling back\", e);\n+      stagedTable.abortStagedChanges();\n+      throw e;\n+    }\n+\n+    if (sessionCatalogReplacement) {\n+      Identifier replacementTable = Identifier.of(destTableName.namespace(), destTableName.name() + REPLACEMENT_NAME);\n+      try {\n+        stagingCatalog.dropTable(destTableName);\n+        stagingCatalog.renameTable(replacementTable, destTableName);\n+      } catch (NoSuchTableException e) {\n+        LOG.error(\"Cannot migrate, replacement table is missing. Attempting to recreate source table\", e);\n+        try {\n+          stagingCatalog.createTable(sourceTableName, sourceTable.schema(),\n+              Spark3Util.toTransforms(sourcePartitionSpec), JavaConverters.mapAsJavaMap(sourceTable.properties()));\n+        } catch (TableAlreadyExistsException tableAlreadyExistsException) {\n+          Log.error(\"Cannot recreate source table. Source table has already been recreated\", e);\n+          throw new RuntimeException(e);\n+        } catch (NoSuchNamespaceException noSuchNamespaceException) {\n+          Log.error(\"Cannot recreate source table. Source namespace has been removed, cannot recreate\", e);\n+          throw new RuntimeException(e);\n+        }\n+      } catch (TableAlreadyExistsException e) {\n+        Log.error(\"Cannot migrate, Source table was recreated before replacement could be moved. \" +\n+            \"Attempting to remove replacement table.\", e);\n+        stagingCatalog.dropTable(replacementTable);\n+        stagedTable.abortStagedChanges();\n+      }\n+    }\n+\n+    return numMigratedFiles;\n+  }\n+\n+  @Override\n+  public CreateAction withAdditionalProperties(Map<String, String> properties) {\n+    this.additionalProperties.putAll(properties);\n+    return this;\n+  }\n+\n+  @Override\n+  public CreateAction withAdditionalProperty(String key, String value) {\n+    this.additionalProperties.put(key, value);\n+    return this;\n+  }\n+\n+  @Override\n+  public CreateAction as(String newName) {\n+    Spark3Util.CatalogAndIdentifier newDest = Spark3Util.catalogAndIdentifier(spark, newName);\n+    return new Spark3CreateAction(spark, sourceCatalog, sourceTableName, newDest.catalog(), newDest.identifier())\n+        .withAdditionalProperties(this.additionalProperties);\n+  }\n+\n+  private static void validateSourceTable(CatalogTable sourceTable, Set<String> supportedSourceTableProviders) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTY5NDAwMw=="}, "originalCommit": {"oid": "216eb56a60a7ea3b4bdd9465ae92116ab44ef8b8"}, "originalPosition": 252}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwMDc5ODg1OnYy", "diffSide": "RIGHT", "path": "spark/src/main/java/org/apache/iceberg/actions/Actions.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQyMjoxMjo1M1rOH2EbMw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQxNjo1MzozNVrOH_ZbRg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjQ1NzY1MQ==", "bodyText": "Well, it seems we rely too much on reflection here. When we decided to use reflection to split actions, we did not have these static methods and it was reasonable since the scope of the change was smaller compared to introducing BaseActions. I am no longer sure reflection is a good idea here as making these methods work with reflection is more complicated than having BaseActions. On top, we don't have compile time checks. Users will call these methods in Spark 2 and will get runtime exceptions. I'd prefer to not expose those methods at all.", "url": "https://github.com/apache/iceberg/pull/1525#discussion_r526457651", "createdAt": "2020-11-18T22:12:53Z", "author": {"login": "aokolnychyi"}, "path": "spark/src/main/java/org/apache/iceberg/actions/Actions.java", "diffHunk": "@@ -77,6 +82,120 @@ public ExpireSnapshotsAction expireSnapshots() {\n     return new ExpireSnapshotsAction(spark, table);\n   }\n \n+  /**\n+   * Converts the provided table into an Iceberg table in place. The table will no longer be represented by it's\n+   * previous provider in the session catalog and a new metadata directory will be created at the table's location.\n+   *\n+   * @param tableName Table to be converted\n+   * @return {@link CreateAction} to perform migration\n+   */\n+  public static CreateAction migrate(String tableName) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "683b7e5265adf67b1e24a25c008e2f289f1d97ad"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjQ1ODUxMg==", "bodyText": "What are your thoughts on this, @RussellSpitzer @rdblue?\nI think it is not too late to reconsider this.", "url": "https://github.com/apache/iceberg/pull/1525#discussion_r526458512", "createdAt": "2020-11-18T22:14:41Z", "author": {"login": "aokolnychyi"}, "path": "spark/src/main/java/org/apache/iceberg/actions/Actions.java", "diffHunk": "@@ -77,6 +82,120 @@ public ExpireSnapshotsAction expireSnapshots() {\n     return new ExpireSnapshotsAction(spark, table);\n   }\n \n+  /**\n+   * Converts the provided table into an Iceberg table in place. The table will no longer be represented by it's\n+   * previous provider in the session catalog and a new metadata directory will be created at the table's location.\n+   *\n+   * @param tableName Table to be converted\n+   * @return {@link CreateAction} to perform migration\n+   */\n+  public static CreateAction migrate(String tableName) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjQ1NzY1MQ=="}, "originalCommit": {"oid": "683b7e5265adf67b1e24a25c008e2f289f1d97ad"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjQ2NTYxNQ==", "bodyText": "I think not implementing these in Spark 2 is definitely a reason to reconsider this.\nWhat about somewhere in the middle? We could introduce an API that isn't static, then call its methods from the static ones here. Then we just need an implementation class, which we could load dynamically.", "url": "https://github.com/apache/iceberg/pull/1525#discussion_r526465615", "createdAt": "2020-11-18T22:28:23Z", "author": {"login": "rdblue"}, "path": "spark/src/main/java/org/apache/iceberg/actions/Actions.java", "diffHunk": "@@ -77,6 +82,120 @@ public ExpireSnapshotsAction expireSnapshots() {\n     return new ExpireSnapshotsAction(spark, table);\n   }\n \n+  /**\n+   * Converts the provided table into an Iceberg table in place. The table will no longer be represented by it's\n+   * previous provider in the session catalog and a new metadata directory will be created at the table's location.\n+   *\n+   * @param tableName Table to be converted\n+   * @return {@link CreateAction} to perform migration\n+   */\n+  public static CreateAction migrate(String tableName) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjQ1NzY1MQ=="}, "originalCommit": {"oid": "683b7e5265adf67b1e24a25c008e2f289f1d97ad"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjQ3ODQ1Mg==", "bodyText": "I still prefer having BaseActions with an Actions per module. I think having two classes each which determine their implementation at runtime is not much better than all the static method reflection currently in the PR. The user experience would be worse, since there is a weird middle method to call, and we still would have runtime exceptions for bad method calls.\nMaybe I don't understand the API that isn't static plan.", "url": "https://github.com/apache/iceberg/pull/1525#discussion_r526478452", "createdAt": "2020-11-18T22:56:08Z", "author": {"login": "RussellSpitzer"}, "path": "spark/src/main/java/org/apache/iceberg/actions/Actions.java", "diffHunk": "@@ -77,6 +82,120 @@ public ExpireSnapshotsAction expireSnapshots() {\n     return new ExpireSnapshotsAction(spark, table);\n   }\n \n+  /**\n+   * Converts the provided table into an Iceberg table in place. The table will no longer be represented by it's\n+   * previous provider in the session catalog and a new metadata directory will be created at the table's location.\n+   *\n+   * @param tableName Table to be converted\n+   * @return {@link CreateAction} to perform migration\n+   */\n+  public static CreateAction migrate(String tableName) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjQ1NzY1MQ=="}, "originalCommit": {"oid": "683b7e5265adf67b1e24a25c008e2f289f1d97ad"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjIzODkxOA==", "bodyText": "I think the last time we chatted having SparkActions or moving current actions to org.apache.iceberg.spark was one of the most promising ideas due to its simplicity.\nI agree it is not something we should address in this PR but I'd try to solve it before 0.11.", "url": "https://github.com/apache/iceberg/pull/1525#discussion_r536238918", "createdAt": "2020-12-04T16:53:35Z", "author": {"login": "aokolnychyi"}, "path": "spark/src/main/java/org/apache/iceberg/actions/Actions.java", "diffHunk": "@@ -77,6 +82,120 @@ public ExpireSnapshotsAction expireSnapshots() {\n     return new ExpireSnapshotsAction(spark, table);\n   }\n \n+  /**\n+   * Converts the provided table into an Iceberg table in place. The table will no longer be represented by it's\n+   * previous provider in the session catalog and a new metadata directory will be created at the table's location.\n+   *\n+   * @param tableName Table to be converted\n+   * @return {@link CreateAction} to perform migration\n+   */\n+  public static CreateAction migrate(String tableName) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjQ1NzY1MQ=="}, "originalCommit": {"oid": "683b7e5265adf67b1e24a25c008e2f289f1d97ad"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwMDkzNjY4OnYy", "diffSide": "RIGHT", "path": "spark3/src/main/java/org/apache/iceberg/actions/Spark3CreateAction.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQyMjo1NzoxNFrOH2Fueg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQwMjozMjo0MlrOH2KPpQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjQ3ODk3MA==", "bodyText": "If we don't assign an explicit location while snapshotting, how are we going to validate the new location is different compared to the existing table location?", "url": "https://github.com/apache/iceberg/pull/1525#discussion_r526478970", "createdAt": "2020-11-18T22:57:14Z", "author": {"login": "aokolnychyi"}, "path": "spark3/src/main/java/org/apache/iceberg/actions/Spark3CreateAction.java", "diffHunk": "@@ -0,0 +1,310 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.actions;\n+\n+import java.util.Arrays;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Set;\n+import jline.internal.Log;\n+import org.apache.iceberg.PartitionSpec;\n+import org.apache.iceberg.Snapshot;\n+import org.apache.iceberg.SnapshotSummary;\n+import org.apache.iceberg.Table;\n+import org.apache.iceberg.TableProperties;\n+import org.apache.iceberg.relocated.com.google.common.base.Preconditions;\n+import org.apache.iceberg.relocated.com.google.common.collect.ImmutableMap;\n+import org.apache.iceberg.relocated.com.google.common.collect.ImmutableSet;\n+import org.apache.iceberg.relocated.com.google.common.collect.Maps;\n+import org.apache.iceberg.spark.Spark3Util;\n+import org.apache.iceberg.spark.SparkCatalog;\n+import org.apache.iceberg.spark.SparkSchemaUtil;\n+import org.apache.iceberg.spark.SparkSessionCatalog;\n+import org.apache.iceberg.spark.SparkTableUtil;\n+import org.apache.iceberg.spark.source.SparkTable;\n+import org.apache.spark.sql.AnalysisException;\n+import org.apache.spark.sql.SparkSession;\n+import org.apache.spark.sql.catalyst.analysis.NoSuchDatabaseException;\n+import org.apache.spark.sql.catalyst.analysis.NoSuchNamespaceException;\n+import org.apache.spark.sql.catalyst.analysis.NoSuchTableException;\n+import org.apache.spark.sql.catalyst.analysis.TableAlreadyExistsException;\n+import org.apache.spark.sql.catalyst.catalog.CatalogTable;\n+import org.apache.spark.sql.catalyst.catalog.CatalogUtils;\n+import org.apache.spark.sql.connector.catalog.CatalogPlugin;\n+import org.apache.spark.sql.connector.catalog.Identifier;\n+import org.apache.spark.sql.connector.catalog.StagedTable;\n+import org.apache.spark.sql.connector.catalog.StagingTableCatalog;\n+import org.apache.spark.sql.connector.catalog.TableCatalog;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import scala.collection.JavaConverters;\n+\n+/**\n+ * This action will migrate a known table in a Spark Catalog that is not an Iceberg table into an Iceberg table.\n+ * The created new table will be able to interact with and modify files in the original table.\n+ *\n+ * There are two main code paths\n+ *   - Creating a brand new iceberg table or replacing an existing Iceberg table\n+ *   This pathway will use a staged table to stage the creation or replacement, only committing after\n+ *   import has succeeded.\n+ *\n+ *   - Replacing a table in the Session Catalog with an Iceberg Table of the same name.\n+ *   This pathway will first create a temporary table with a different name. This replacement table will\n+ *   be committed upon a successful import. Then the original session catalog entry will be dropped\n+ *   and the new replacement table renamed to take its place.\n+ */\n+class Spark3CreateAction implements CreateAction {\n+  private static final Logger LOG = LoggerFactory.getLogger(Spark3CreateAction.class);\n+  private static final Set<String> ALLOWED_SOURCES = ImmutableSet.of(\"parquet\", \"avro\", \"orc\", \"hive\");\n+  private static final String ICEBERG_METADATA_FOLDER = \"metadata\";\n+  private static final String REPLACEMENT_NAME = \"_REPLACEMENT_\";\n+\n+  private final SparkSession spark;\n+\n+  // Source Fields\n+  private final CatalogTable sourceTable;\n+  private final String sourceTableLocation;\n+  private final CatalogPlugin sourceCatalog;\n+  private final Identifier sourceTableName;\n+  private final PartitionSpec sourcePartitionSpec;\n+\n+  // Destination Fields\n+  private final Boolean sessionCatalogReplacement;\n+  private final CatalogPlugin destCatalog;\n+  private final Identifier destTableName;\n+\n+  // Optional Parameters for destination\n+  private String destDataLocation;\n+  private String destMetadataLocation;\n+  private Map<String, String> additionalProperties = Maps.newHashMap();\n+\n+  Spark3CreateAction(SparkSession spark, CatalogPlugin sourceCatalog, Identifier sourceTableName,\n+                       CatalogPlugin destCatalog,  Identifier destTableName) {\n+\n+    this.spark = spark;\n+    this.sourceCatalog = checkSourceCatalog(sourceCatalog);\n+    this.sourceTableName = sourceTableName;\n+    this.destCatalog = destCatalog;\n+    this.destTableName = destTableName;\n+\n+    try {\n+      String sourceString = String.join(\".\", sourceTableName.namespace()) + \".\" + sourceTableName.name();\n+      sourcePartitionSpec = SparkSchemaUtil.specForTable(spark, sourceString);\n+    } catch (AnalysisException e) {\n+      throw new IllegalArgumentException(\"Cannot determining partitioning of \" + sourceTableName.toString(), e);\n+    }\n+\n+    try {\n+      this.sourceTable = spark.sessionState().catalog().getTableMetadata(Spark3Util.toTableIdentifier(sourceTableName));\n+    } catch (NoSuchTableException | NoSuchDatabaseException e) {\n+      throw new IllegalArgumentException(String.format(\"Could not find source table %s\", sourceTableName), e);\n+    }\n+    validateSourceTable(sourceTable);\n+\n+    this.sessionCatalogReplacement = isSessionCatalogReplacement();\n+\n+    this.sourceTableLocation = CatalogUtils.URIToString(sourceTable.storage().locationUri().get());\n+    this.destDataLocation = sourceTableLocation;\n+    this.destMetadataLocation = sourceTableLocation + \"/\" + ICEBERG_METADATA_FOLDER;\n+  }\n+\n+  private boolean isSessionCatalogReplacement() {\n+    boolean sourceIceberg = sourceTable.provider().get().toLowerCase(Locale.ROOT).equals(\"iceberg\");\n+    boolean sameCatalog = sourceCatalog == destCatalog;\n+    boolean sameIdentifier = sourceTableName.name().equals(destTableName.name()) &&\n+        Arrays.equals(sourceTableName.namespace(), destTableName.namespace());\n+    return !sourceIceberg && sameCatalog && sameIdentifier;\n+  }\n+\n+\n+  /**\n+   * Creates the Iceberg data and metadata at a given location instead of the source table\n+   * location. New metadata and data files will be added to this\n+   * new location and further operations will not effect the source table.\n+   *\n+   * @param newLocation the base directory for the new Iceberg Table\n+   * @return this for chaining\n+   */\n+  CreateAction asSnapshotAtLocation(String newLocation) {\n+    Preconditions.checkArgument(!newLocation.equals(sourceTableLocation), \"Cannot create a snapshot with the\" +\n+        \"same data location as the source table. To place new files in the source table directory use the migrate \" +\n+        \"command.\");\n+    this.destDataLocation = newLocation;\n+    this.destMetadataLocation = newLocation + \"/\" + ICEBERG_METADATA_FOLDER;\n+    return this;\n+  }\n+\n+  /**\n+   * Creates the Iceberg data and metadata at the catalog default location for the\n+   * new table.\n+   *\n+   * @return this for chaining\n+   */\n+  CreateAction asSnapshotAtDefaultLocation() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "683b7e5265adf67b1e24a25c008e2f289f1d97ad"}, "originalPosition": 160}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjQ5MTc1Mw==", "bodyText": "I don't think there is a way we can actually know what the Metastore does, so there is a possibility that a user's default location could be the same", "url": "https://github.com/apache/iceberg/pull/1525#discussion_r526491753", "createdAt": "2020-11-18T23:31:29Z", "author": {"login": "RussellSpitzer"}, "path": "spark3/src/main/java/org/apache/iceberg/actions/Spark3CreateAction.java", "diffHunk": "@@ -0,0 +1,310 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.actions;\n+\n+import java.util.Arrays;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Set;\n+import jline.internal.Log;\n+import org.apache.iceberg.PartitionSpec;\n+import org.apache.iceberg.Snapshot;\n+import org.apache.iceberg.SnapshotSummary;\n+import org.apache.iceberg.Table;\n+import org.apache.iceberg.TableProperties;\n+import org.apache.iceberg.relocated.com.google.common.base.Preconditions;\n+import org.apache.iceberg.relocated.com.google.common.collect.ImmutableMap;\n+import org.apache.iceberg.relocated.com.google.common.collect.ImmutableSet;\n+import org.apache.iceberg.relocated.com.google.common.collect.Maps;\n+import org.apache.iceberg.spark.Spark3Util;\n+import org.apache.iceberg.spark.SparkCatalog;\n+import org.apache.iceberg.spark.SparkSchemaUtil;\n+import org.apache.iceberg.spark.SparkSessionCatalog;\n+import org.apache.iceberg.spark.SparkTableUtil;\n+import org.apache.iceberg.spark.source.SparkTable;\n+import org.apache.spark.sql.AnalysisException;\n+import org.apache.spark.sql.SparkSession;\n+import org.apache.spark.sql.catalyst.analysis.NoSuchDatabaseException;\n+import org.apache.spark.sql.catalyst.analysis.NoSuchNamespaceException;\n+import org.apache.spark.sql.catalyst.analysis.NoSuchTableException;\n+import org.apache.spark.sql.catalyst.analysis.TableAlreadyExistsException;\n+import org.apache.spark.sql.catalyst.catalog.CatalogTable;\n+import org.apache.spark.sql.catalyst.catalog.CatalogUtils;\n+import org.apache.spark.sql.connector.catalog.CatalogPlugin;\n+import org.apache.spark.sql.connector.catalog.Identifier;\n+import org.apache.spark.sql.connector.catalog.StagedTable;\n+import org.apache.spark.sql.connector.catalog.StagingTableCatalog;\n+import org.apache.spark.sql.connector.catalog.TableCatalog;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import scala.collection.JavaConverters;\n+\n+/**\n+ * This action will migrate a known table in a Spark Catalog that is not an Iceberg table into an Iceberg table.\n+ * The created new table will be able to interact with and modify files in the original table.\n+ *\n+ * There are two main code paths\n+ *   - Creating a brand new iceberg table or replacing an existing Iceberg table\n+ *   This pathway will use a staged table to stage the creation or replacement, only committing after\n+ *   import has succeeded.\n+ *\n+ *   - Replacing a table in the Session Catalog with an Iceberg Table of the same name.\n+ *   This pathway will first create a temporary table with a different name. This replacement table will\n+ *   be committed upon a successful import. Then the original session catalog entry will be dropped\n+ *   and the new replacement table renamed to take its place.\n+ */\n+class Spark3CreateAction implements CreateAction {\n+  private static final Logger LOG = LoggerFactory.getLogger(Spark3CreateAction.class);\n+  private static final Set<String> ALLOWED_SOURCES = ImmutableSet.of(\"parquet\", \"avro\", \"orc\", \"hive\");\n+  private static final String ICEBERG_METADATA_FOLDER = \"metadata\";\n+  private static final String REPLACEMENT_NAME = \"_REPLACEMENT_\";\n+\n+  private final SparkSession spark;\n+\n+  // Source Fields\n+  private final CatalogTable sourceTable;\n+  private final String sourceTableLocation;\n+  private final CatalogPlugin sourceCatalog;\n+  private final Identifier sourceTableName;\n+  private final PartitionSpec sourcePartitionSpec;\n+\n+  // Destination Fields\n+  private final Boolean sessionCatalogReplacement;\n+  private final CatalogPlugin destCatalog;\n+  private final Identifier destTableName;\n+\n+  // Optional Parameters for destination\n+  private String destDataLocation;\n+  private String destMetadataLocation;\n+  private Map<String, String> additionalProperties = Maps.newHashMap();\n+\n+  Spark3CreateAction(SparkSession spark, CatalogPlugin sourceCatalog, Identifier sourceTableName,\n+                       CatalogPlugin destCatalog,  Identifier destTableName) {\n+\n+    this.spark = spark;\n+    this.sourceCatalog = checkSourceCatalog(sourceCatalog);\n+    this.sourceTableName = sourceTableName;\n+    this.destCatalog = destCatalog;\n+    this.destTableName = destTableName;\n+\n+    try {\n+      String sourceString = String.join(\".\", sourceTableName.namespace()) + \".\" + sourceTableName.name();\n+      sourcePartitionSpec = SparkSchemaUtil.specForTable(spark, sourceString);\n+    } catch (AnalysisException e) {\n+      throw new IllegalArgumentException(\"Cannot determining partitioning of \" + sourceTableName.toString(), e);\n+    }\n+\n+    try {\n+      this.sourceTable = spark.sessionState().catalog().getTableMetadata(Spark3Util.toTableIdentifier(sourceTableName));\n+    } catch (NoSuchTableException | NoSuchDatabaseException e) {\n+      throw new IllegalArgumentException(String.format(\"Could not find source table %s\", sourceTableName), e);\n+    }\n+    validateSourceTable(sourceTable);\n+\n+    this.sessionCatalogReplacement = isSessionCatalogReplacement();\n+\n+    this.sourceTableLocation = CatalogUtils.URIToString(sourceTable.storage().locationUri().get());\n+    this.destDataLocation = sourceTableLocation;\n+    this.destMetadataLocation = sourceTableLocation + \"/\" + ICEBERG_METADATA_FOLDER;\n+  }\n+\n+  private boolean isSessionCatalogReplacement() {\n+    boolean sourceIceberg = sourceTable.provider().get().toLowerCase(Locale.ROOT).equals(\"iceberg\");\n+    boolean sameCatalog = sourceCatalog == destCatalog;\n+    boolean sameIdentifier = sourceTableName.name().equals(destTableName.name()) &&\n+        Arrays.equals(sourceTableName.namespace(), destTableName.namespace());\n+    return !sourceIceberg && sameCatalog && sameIdentifier;\n+  }\n+\n+\n+  /**\n+   * Creates the Iceberg data and metadata at a given location instead of the source table\n+   * location. New metadata and data files will be added to this\n+   * new location and further operations will not effect the source table.\n+   *\n+   * @param newLocation the base directory for the new Iceberg Table\n+   * @return this for chaining\n+   */\n+  CreateAction asSnapshotAtLocation(String newLocation) {\n+    Preconditions.checkArgument(!newLocation.equals(sourceTableLocation), \"Cannot create a snapshot with the\" +\n+        \"same data location as the source table. To place new files in the source table directory use the migrate \" +\n+        \"command.\");\n+    this.destDataLocation = newLocation;\n+    this.destMetadataLocation = newLocation + \"/\" + ICEBERG_METADATA_FOLDER;\n+    return this;\n+  }\n+\n+  /**\n+   * Creates the Iceberg data and metadata at the catalog default location for the\n+   * new table.\n+   *\n+   * @return this for chaining\n+   */\n+  CreateAction asSnapshotAtDefaultLocation() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjQ3ODk3MA=="}, "originalCommit": {"oid": "683b7e5265adf67b1e24a25c008e2f289f1d97ad"}, "originalPosition": 160}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjU1Mjk5Nw==", "bodyText": "I feel like asking for an explicit location in case of snapshot is safer but I can be convinced otherwise.", "url": "https://github.com/apache/iceberg/pull/1525#discussion_r526552997", "createdAt": "2020-11-19T02:32:42Z", "author": {"login": "aokolnychyi"}, "path": "spark3/src/main/java/org/apache/iceberg/actions/Spark3CreateAction.java", "diffHunk": "@@ -0,0 +1,310 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.actions;\n+\n+import java.util.Arrays;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Set;\n+import jline.internal.Log;\n+import org.apache.iceberg.PartitionSpec;\n+import org.apache.iceberg.Snapshot;\n+import org.apache.iceberg.SnapshotSummary;\n+import org.apache.iceberg.Table;\n+import org.apache.iceberg.TableProperties;\n+import org.apache.iceberg.relocated.com.google.common.base.Preconditions;\n+import org.apache.iceberg.relocated.com.google.common.collect.ImmutableMap;\n+import org.apache.iceberg.relocated.com.google.common.collect.ImmutableSet;\n+import org.apache.iceberg.relocated.com.google.common.collect.Maps;\n+import org.apache.iceberg.spark.Spark3Util;\n+import org.apache.iceberg.spark.SparkCatalog;\n+import org.apache.iceberg.spark.SparkSchemaUtil;\n+import org.apache.iceberg.spark.SparkSessionCatalog;\n+import org.apache.iceberg.spark.SparkTableUtil;\n+import org.apache.iceberg.spark.source.SparkTable;\n+import org.apache.spark.sql.AnalysisException;\n+import org.apache.spark.sql.SparkSession;\n+import org.apache.spark.sql.catalyst.analysis.NoSuchDatabaseException;\n+import org.apache.spark.sql.catalyst.analysis.NoSuchNamespaceException;\n+import org.apache.spark.sql.catalyst.analysis.NoSuchTableException;\n+import org.apache.spark.sql.catalyst.analysis.TableAlreadyExistsException;\n+import org.apache.spark.sql.catalyst.catalog.CatalogTable;\n+import org.apache.spark.sql.catalyst.catalog.CatalogUtils;\n+import org.apache.spark.sql.connector.catalog.CatalogPlugin;\n+import org.apache.spark.sql.connector.catalog.Identifier;\n+import org.apache.spark.sql.connector.catalog.StagedTable;\n+import org.apache.spark.sql.connector.catalog.StagingTableCatalog;\n+import org.apache.spark.sql.connector.catalog.TableCatalog;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import scala.collection.JavaConverters;\n+\n+/**\n+ * This action will migrate a known table in a Spark Catalog that is not an Iceberg table into an Iceberg table.\n+ * The created new table will be able to interact with and modify files in the original table.\n+ *\n+ * There are two main code paths\n+ *   - Creating a brand new iceberg table or replacing an existing Iceberg table\n+ *   This pathway will use a staged table to stage the creation or replacement, only committing after\n+ *   import has succeeded.\n+ *\n+ *   - Replacing a table in the Session Catalog with an Iceberg Table of the same name.\n+ *   This pathway will first create a temporary table with a different name. This replacement table will\n+ *   be committed upon a successful import. Then the original session catalog entry will be dropped\n+ *   and the new replacement table renamed to take its place.\n+ */\n+class Spark3CreateAction implements CreateAction {\n+  private static final Logger LOG = LoggerFactory.getLogger(Spark3CreateAction.class);\n+  private static final Set<String> ALLOWED_SOURCES = ImmutableSet.of(\"parquet\", \"avro\", \"orc\", \"hive\");\n+  private static final String ICEBERG_METADATA_FOLDER = \"metadata\";\n+  private static final String REPLACEMENT_NAME = \"_REPLACEMENT_\";\n+\n+  private final SparkSession spark;\n+\n+  // Source Fields\n+  private final CatalogTable sourceTable;\n+  private final String sourceTableLocation;\n+  private final CatalogPlugin sourceCatalog;\n+  private final Identifier sourceTableName;\n+  private final PartitionSpec sourcePartitionSpec;\n+\n+  // Destination Fields\n+  private final Boolean sessionCatalogReplacement;\n+  private final CatalogPlugin destCatalog;\n+  private final Identifier destTableName;\n+\n+  // Optional Parameters for destination\n+  private String destDataLocation;\n+  private String destMetadataLocation;\n+  private Map<String, String> additionalProperties = Maps.newHashMap();\n+\n+  Spark3CreateAction(SparkSession spark, CatalogPlugin sourceCatalog, Identifier sourceTableName,\n+                       CatalogPlugin destCatalog,  Identifier destTableName) {\n+\n+    this.spark = spark;\n+    this.sourceCatalog = checkSourceCatalog(sourceCatalog);\n+    this.sourceTableName = sourceTableName;\n+    this.destCatalog = destCatalog;\n+    this.destTableName = destTableName;\n+\n+    try {\n+      String sourceString = String.join(\".\", sourceTableName.namespace()) + \".\" + sourceTableName.name();\n+      sourcePartitionSpec = SparkSchemaUtil.specForTable(spark, sourceString);\n+    } catch (AnalysisException e) {\n+      throw new IllegalArgumentException(\"Cannot determining partitioning of \" + sourceTableName.toString(), e);\n+    }\n+\n+    try {\n+      this.sourceTable = spark.sessionState().catalog().getTableMetadata(Spark3Util.toTableIdentifier(sourceTableName));\n+    } catch (NoSuchTableException | NoSuchDatabaseException e) {\n+      throw new IllegalArgumentException(String.format(\"Could not find source table %s\", sourceTableName), e);\n+    }\n+    validateSourceTable(sourceTable);\n+\n+    this.sessionCatalogReplacement = isSessionCatalogReplacement();\n+\n+    this.sourceTableLocation = CatalogUtils.URIToString(sourceTable.storage().locationUri().get());\n+    this.destDataLocation = sourceTableLocation;\n+    this.destMetadataLocation = sourceTableLocation + \"/\" + ICEBERG_METADATA_FOLDER;\n+  }\n+\n+  private boolean isSessionCatalogReplacement() {\n+    boolean sourceIceberg = sourceTable.provider().get().toLowerCase(Locale.ROOT).equals(\"iceberg\");\n+    boolean sameCatalog = sourceCatalog == destCatalog;\n+    boolean sameIdentifier = sourceTableName.name().equals(destTableName.name()) &&\n+        Arrays.equals(sourceTableName.namespace(), destTableName.namespace());\n+    return !sourceIceberg && sameCatalog && sameIdentifier;\n+  }\n+\n+\n+  /**\n+   * Creates the Iceberg data and metadata at a given location instead of the source table\n+   * location. New metadata and data files will be added to this\n+   * new location and further operations will not effect the source table.\n+   *\n+   * @param newLocation the base directory for the new Iceberg Table\n+   * @return this for chaining\n+   */\n+  CreateAction asSnapshotAtLocation(String newLocation) {\n+    Preconditions.checkArgument(!newLocation.equals(sourceTableLocation), \"Cannot create a snapshot with the\" +\n+        \"same data location as the source table. To place new files in the source table directory use the migrate \" +\n+        \"command.\");\n+    this.destDataLocation = newLocation;\n+    this.destMetadataLocation = newLocation + \"/\" + ICEBERG_METADATA_FOLDER;\n+    return this;\n+  }\n+\n+  /**\n+   * Creates the Iceberg data and metadata at the catalog default location for the\n+   * new table.\n+   *\n+   * @return this for chaining\n+   */\n+  CreateAction asSnapshotAtDefaultLocation() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjQ3ODk3MA=="}, "originalCommit": {"oid": "683b7e5265adf67b1e24a25c008e2f289f1d97ad"}, "originalPosition": 160}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwMDkzOTA5OnYy", "diffSide": "RIGHT", "path": "spark3/src/main/java/org/apache/iceberg/actions/Spark3CreateAction.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQyMjo1ODowOFrOH2Fv_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQyMzo1NjoxOVrOH2HFmA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjQ3OTM1OQ==", "bodyText": "I am not sure this is correct. Shouldn't we be assigning the table location, not data location?", "url": "https://github.com/apache/iceberg/pull/1525#discussion_r526479359", "createdAt": "2020-11-18T22:58:08Z", "author": {"login": "aokolnychyi"}, "path": "spark3/src/main/java/org/apache/iceberg/actions/Spark3CreateAction.java", "diffHunk": "@@ -0,0 +1,310 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.actions;\n+\n+import java.util.Arrays;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Set;\n+import jline.internal.Log;\n+import org.apache.iceberg.PartitionSpec;\n+import org.apache.iceberg.Snapshot;\n+import org.apache.iceberg.SnapshotSummary;\n+import org.apache.iceberg.Table;\n+import org.apache.iceberg.TableProperties;\n+import org.apache.iceberg.relocated.com.google.common.base.Preconditions;\n+import org.apache.iceberg.relocated.com.google.common.collect.ImmutableMap;\n+import org.apache.iceberg.relocated.com.google.common.collect.ImmutableSet;\n+import org.apache.iceberg.relocated.com.google.common.collect.Maps;\n+import org.apache.iceberg.spark.Spark3Util;\n+import org.apache.iceberg.spark.SparkCatalog;\n+import org.apache.iceberg.spark.SparkSchemaUtil;\n+import org.apache.iceberg.spark.SparkSessionCatalog;\n+import org.apache.iceberg.spark.SparkTableUtil;\n+import org.apache.iceberg.spark.source.SparkTable;\n+import org.apache.spark.sql.AnalysisException;\n+import org.apache.spark.sql.SparkSession;\n+import org.apache.spark.sql.catalyst.analysis.NoSuchDatabaseException;\n+import org.apache.spark.sql.catalyst.analysis.NoSuchNamespaceException;\n+import org.apache.spark.sql.catalyst.analysis.NoSuchTableException;\n+import org.apache.spark.sql.catalyst.analysis.TableAlreadyExistsException;\n+import org.apache.spark.sql.catalyst.catalog.CatalogTable;\n+import org.apache.spark.sql.catalyst.catalog.CatalogUtils;\n+import org.apache.spark.sql.connector.catalog.CatalogPlugin;\n+import org.apache.spark.sql.connector.catalog.Identifier;\n+import org.apache.spark.sql.connector.catalog.StagedTable;\n+import org.apache.spark.sql.connector.catalog.StagingTableCatalog;\n+import org.apache.spark.sql.connector.catalog.TableCatalog;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import scala.collection.JavaConverters;\n+\n+/**\n+ * This action will migrate a known table in a Spark Catalog that is not an Iceberg table into an Iceberg table.\n+ * The created new table will be able to interact with and modify files in the original table.\n+ *\n+ * There are two main code paths\n+ *   - Creating a brand new iceberg table or replacing an existing Iceberg table\n+ *   This pathway will use a staged table to stage the creation or replacement, only committing after\n+ *   import has succeeded.\n+ *\n+ *   - Replacing a table in the Session Catalog with an Iceberg Table of the same name.\n+ *   This pathway will first create a temporary table with a different name. This replacement table will\n+ *   be committed upon a successful import. Then the original session catalog entry will be dropped\n+ *   and the new replacement table renamed to take its place.\n+ */\n+class Spark3CreateAction implements CreateAction {\n+  private static final Logger LOG = LoggerFactory.getLogger(Spark3CreateAction.class);\n+  private static final Set<String> ALLOWED_SOURCES = ImmutableSet.of(\"parquet\", \"avro\", \"orc\", \"hive\");\n+  private static final String ICEBERG_METADATA_FOLDER = \"metadata\";\n+  private static final String REPLACEMENT_NAME = \"_REPLACEMENT_\";\n+\n+  private final SparkSession spark;\n+\n+  // Source Fields\n+  private final CatalogTable sourceTable;\n+  private final String sourceTableLocation;\n+  private final CatalogPlugin sourceCatalog;\n+  private final Identifier sourceTableName;\n+  private final PartitionSpec sourcePartitionSpec;\n+\n+  // Destination Fields\n+  private final Boolean sessionCatalogReplacement;\n+  private final CatalogPlugin destCatalog;\n+  private final Identifier destTableName;\n+\n+  // Optional Parameters for destination\n+  private String destDataLocation;\n+  private String destMetadataLocation;\n+  private Map<String, String> additionalProperties = Maps.newHashMap();\n+\n+  Spark3CreateAction(SparkSession spark, CatalogPlugin sourceCatalog, Identifier sourceTableName,\n+                       CatalogPlugin destCatalog,  Identifier destTableName) {\n+\n+    this.spark = spark;\n+    this.sourceCatalog = checkSourceCatalog(sourceCatalog);\n+    this.sourceTableName = sourceTableName;\n+    this.destCatalog = destCatalog;\n+    this.destTableName = destTableName;\n+\n+    try {\n+      String sourceString = String.join(\".\", sourceTableName.namespace()) + \".\" + sourceTableName.name();\n+      sourcePartitionSpec = SparkSchemaUtil.specForTable(spark, sourceString);\n+    } catch (AnalysisException e) {\n+      throw new IllegalArgumentException(\"Cannot determining partitioning of \" + sourceTableName.toString(), e);\n+    }\n+\n+    try {\n+      this.sourceTable = spark.sessionState().catalog().getTableMetadata(Spark3Util.toTableIdentifier(sourceTableName));\n+    } catch (NoSuchTableException | NoSuchDatabaseException e) {\n+      throw new IllegalArgumentException(String.format(\"Could not find source table %s\", sourceTableName), e);\n+    }\n+    validateSourceTable(sourceTable);\n+\n+    this.sessionCatalogReplacement = isSessionCatalogReplacement();\n+\n+    this.sourceTableLocation = CatalogUtils.URIToString(sourceTable.storage().locationUri().get());\n+    this.destDataLocation = sourceTableLocation;\n+    this.destMetadataLocation = sourceTableLocation + \"/\" + ICEBERG_METADATA_FOLDER;\n+  }\n+\n+  private boolean isSessionCatalogReplacement() {\n+    boolean sourceIceberg = sourceTable.provider().get().toLowerCase(Locale.ROOT).equals(\"iceberg\");\n+    boolean sameCatalog = sourceCatalog == destCatalog;\n+    boolean sameIdentifier = sourceTableName.name().equals(destTableName.name()) &&\n+        Arrays.equals(sourceTableName.namespace(), destTableName.namespace());\n+    return !sourceIceberg && sameCatalog && sameIdentifier;\n+  }\n+\n+\n+  /**\n+   * Creates the Iceberg data and metadata at a given location instead of the source table\n+   * location. New metadata and data files will be added to this\n+   * new location and further operations will not effect the source table.\n+   *\n+   * @param newLocation the base directory for the new Iceberg Table\n+   * @return this for chaining\n+   */\n+  CreateAction asSnapshotAtLocation(String newLocation) {\n+    Preconditions.checkArgument(!newLocation.equals(sourceTableLocation), \"Cannot create a snapshot with the\" +\n+        \"same data location as the source table. To place new files in the source table directory use the migrate \" +\n+        \"command.\");\n+    this.destDataLocation = newLocation;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "683b7e5265adf67b1e24a25c008e2f289f1d97ad"}, "originalPosition": 149}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjUwMTI3Mg==", "bodyText": "We have to check both the data and metadata locations eventually to ensure users are not changing it through table properties.", "url": "https://github.com/apache/iceberg/pull/1525#discussion_r526501272", "createdAt": "2020-11-18T23:56:19Z", "author": {"login": "aokolnychyi"}, "path": "spark3/src/main/java/org/apache/iceberg/actions/Spark3CreateAction.java", "diffHunk": "@@ -0,0 +1,310 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.actions;\n+\n+import java.util.Arrays;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Set;\n+import jline.internal.Log;\n+import org.apache.iceberg.PartitionSpec;\n+import org.apache.iceberg.Snapshot;\n+import org.apache.iceberg.SnapshotSummary;\n+import org.apache.iceberg.Table;\n+import org.apache.iceberg.TableProperties;\n+import org.apache.iceberg.relocated.com.google.common.base.Preconditions;\n+import org.apache.iceberg.relocated.com.google.common.collect.ImmutableMap;\n+import org.apache.iceberg.relocated.com.google.common.collect.ImmutableSet;\n+import org.apache.iceberg.relocated.com.google.common.collect.Maps;\n+import org.apache.iceberg.spark.Spark3Util;\n+import org.apache.iceberg.spark.SparkCatalog;\n+import org.apache.iceberg.spark.SparkSchemaUtil;\n+import org.apache.iceberg.spark.SparkSessionCatalog;\n+import org.apache.iceberg.spark.SparkTableUtil;\n+import org.apache.iceberg.spark.source.SparkTable;\n+import org.apache.spark.sql.AnalysisException;\n+import org.apache.spark.sql.SparkSession;\n+import org.apache.spark.sql.catalyst.analysis.NoSuchDatabaseException;\n+import org.apache.spark.sql.catalyst.analysis.NoSuchNamespaceException;\n+import org.apache.spark.sql.catalyst.analysis.NoSuchTableException;\n+import org.apache.spark.sql.catalyst.analysis.TableAlreadyExistsException;\n+import org.apache.spark.sql.catalyst.catalog.CatalogTable;\n+import org.apache.spark.sql.catalyst.catalog.CatalogUtils;\n+import org.apache.spark.sql.connector.catalog.CatalogPlugin;\n+import org.apache.spark.sql.connector.catalog.Identifier;\n+import org.apache.spark.sql.connector.catalog.StagedTable;\n+import org.apache.spark.sql.connector.catalog.StagingTableCatalog;\n+import org.apache.spark.sql.connector.catalog.TableCatalog;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import scala.collection.JavaConverters;\n+\n+/**\n+ * This action will migrate a known table in a Spark Catalog that is not an Iceberg table into an Iceberg table.\n+ * The created new table will be able to interact with and modify files in the original table.\n+ *\n+ * There are two main code paths\n+ *   - Creating a brand new iceberg table or replacing an existing Iceberg table\n+ *   This pathway will use a staged table to stage the creation or replacement, only committing after\n+ *   import has succeeded.\n+ *\n+ *   - Replacing a table in the Session Catalog with an Iceberg Table of the same name.\n+ *   This pathway will first create a temporary table with a different name. This replacement table will\n+ *   be committed upon a successful import. Then the original session catalog entry will be dropped\n+ *   and the new replacement table renamed to take its place.\n+ */\n+class Spark3CreateAction implements CreateAction {\n+  private static final Logger LOG = LoggerFactory.getLogger(Spark3CreateAction.class);\n+  private static final Set<String> ALLOWED_SOURCES = ImmutableSet.of(\"parquet\", \"avro\", \"orc\", \"hive\");\n+  private static final String ICEBERG_METADATA_FOLDER = \"metadata\";\n+  private static final String REPLACEMENT_NAME = \"_REPLACEMENT_\";\n+\n+  private final SparkSession spark;\n+\n+  // Source Fields\n+  private final CatalogTable sourceTable;\n+  private final String sourceTableLocation;\n+  private final CatalogPlugin sourceCatalog;\n+  private final Identifier sourceTableName;\n+  private final PartitionSpec sourcePartitionSpec;\n+\n+  // Destination Fields\n+  private final Boolean sessionCatalogReplacement;\n+  private final CatalogPlugin destCatalog;\n+  private final Identifier destTableName;\n+\n+  // Optional Parameters for destination\n+  private String destDataLocation;\n+  private String destMetadataLocation;\n+  private Map<String, String> additionalProperties = Maps.newHashMap();\n+\n+  Spark3CreateAction(SparkSession spark, CatalogPlugin sourceCatalog, Identifier sourceTableName,\n+                       CatalogPlugin destCatalog,  Identifier destTableName) {\n+\n+    this.spark = spark;\n+    this.sourceCatalog = checkSourceCatalog(sourceCatalog);\n+    this.sourceTableName = sourceTableName;\n+    this.destCatalog = destCatalog;\n+    this.destTableName = destTableName;\n+\n+    try {\n+      String sourceString = String.join(\".\", sourceTableName.namespace()) + \".\" + sourceTableName.name();\n+      sourcePartitionSpec = SparkSchemaUtil.specForTable(spark, sourceString);\n+    } catch (AnalysisException e) {\n+      throw new IllegalArgumentException(\"Cannot determining partitioning of \" + sourceTableName.toString(), e);\n+    }\n+\n+    try {\n+      this.sourceTable = spark.sessionState().catalog().getTableMetadata(Spark3Util.toTableIdentifier(sourceTableName));\n+    } catch (NoSuchTableException | NoSuchDatabaseException e) {\n+      throw new IllegalArgumentException(String.format(\"Could not find source table %s\", sourceTableName), e);\n+    }\n+    validateSourceTable(sourceTable);\n+\n+    this.sessionCatalogReplacement = isSessionCatalogReplacement();\n+\n+    this.sourceTableLocation = CatalogUtils.URIToString(sourceTable.storage().locationUri().get());\n+    this.destDataLocation = sourceTableLocation;\n+    this.destMetadataLocation = sourceTableLocation + \"/\" + ICEBERG_METADATA_FOLDER;\n+  }\n+\n+  private boolean isSessionCatalogReplacement() {\n+    boolean sourceIceberg = sourceTable.provider().get().toLowerCase(Locale.ROOT).equals(\"iceberg\");\n+    boolean sameCatalog = sourceCatalog == destCatalog;\n+    boolean sameIdentifier = sourceTableName.name().equals(destTableName.name()) &&\n+        Arrays.equals(sourceTableName.namespace(), destTableName.namespace());\n+    return !sourceIceberg && sameCatalog && sameIdentifier;\n+  }\n+\n+\n+  /**\n+   * Creates the Iceberg data and metadata at a given location instead of the source table\n+   * location. New metadata and data files will be added to this\n+   * new location and further operations will not effect the source table.\n+   *\n+   * @param newLocation the base directory for the new Iceberg Table\n+   * @return this for chaining\n+   */\n+  CreateAction asSnapshotAtLocation(String newLocation) {\n+    Preconditions.checkArgument(!newLocation.equals(sourceTableLocation), \"Cannot create a snapshot with the\" +\n+        \"same data location as the source table. To place new files in the source table directory use the migrate \" +\n+        \"command.\");\n+    this.destDataLocation = newLocation;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjQ3OTM1OQ=="}, "originalCommit": {"oid": "683b7e5265adf67b1e24a25c008e2f289f1d97ad"}, "originalPosition": 149}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwMTAzNjM4OnYy", "diffSide": "RIGHT", "path": "spark/src/main/java/org/apache/iceberg/actions/CreateAction.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQyMzozNzozNVrOH2Gp_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQyMzozNzozNVrOH2Gp_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjQ5NDIwNw==", "bodyText": "setAll?", "url": "https://github.com/apache/iceberg/pull/1525#discussion_r526494207", "createdAt": "2020-11-18T23:37:35Z", "author": {"login": "aokolnychyi"}, "path": "spark/src/main/java/org/apache/iceberg/actions/CreateAction.java", "diffHunk": "@@ -0,0 +1,43 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.actions;\n+\n+import java.util.Map;\n+\n+interface CreateAction extends Action<Long> {\n+\n+  /**\n+   * Adds additional properties to the newly created Iceberg Table. Any properties with\n+   * the same key name will be overwritten.\n+   * @param properties a map of properties to be included\n+   * @return this for chaining\n+   */\n+  CreateAction set(Map<String, String> properties);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "683b7e5265adf67b1e24a25c008e2f289f1d97ad"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwMTA4NTU3OnYy", "diffSide": "RIGHT", "path": "spark3/src/main/java/org/apache/iceberg/actions/Spark3CreateAction.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQyMzo1Nzo1NlrOH2HH5g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QxNDoyNDoxMVrOH7AJTw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjUwMTg2Mg==", "bodyText": "Is it enough to check if it is instance of BaseCatalog we introduced recently?", "url": "https://github.com/apache/iceberg/pull/1525#discussion_r526501862", "createdAt": "2020-11-18T23:57:56Z", "author": {"login": "aokolnychyi"}, "path": "spark3/src/main/java/org/apache/iceberg/actions/Spark3CreateAction.java", "diffHunk": "@@ -0,0 +1,310 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.actions;\n+\n+import java.util.Arrays;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Set;\n+import jline.internal.Log;\n+import org.apache.iceberg.PartitionSpec;\n+import org.apache.iceberg.Snapshot;\n+import org.apache.iceberg.SnapshotSummary;\n+import org.apache.iceberg.Table;\n+import org.apache.iceberg.TableProperties;\n+import org.apache.iceberg.relocated.com.google.common.base.Preconditions;\n+import org.apache.iceberg.relocated.com.google.common.collect.ImmutableMap;\n+import org.apache.iceberg.relocated.com.google.common.collect.ImmutableSet;\n+import org.apache.iceberg.relocated.com.google.common.collect.Maps;\n+import org.apache.iceberg.spark.Spark3Util;\n+import org.apache.iceberg.spark.SparkCatalog;\n+import org.apache.iceberg.spark.SparkSchemaUtil;\n+import org.apache.iceberg.spark.SparkSessionCatalog;\n+import org.apache.iceberg.spark.SparkTableUtil;\n+import org.apache.iceberg.spark.source.SparkTable;\n+import org.apache.spark.sql.AnalysisException;\n+import org.apache.spark.sql.SparkSession;\n+import org.apache.spark.sql.catalyst.analysis.NoSuchDatabaseException;\n+import org.apache.spark.sql.catalyst.analysis.NoSuchNamespaceException;\n+import org.apache.spark.sql.catalyst.analysis.NoSuchTableException;\n+import org.apache.spark.sql.catalyst.analysis.TableAlreadyExistsException;\n+import org.apache.spark.sql.catalyst.catalog.CatalogTable;\n+import org.apache.spark.sql.catalyst.catalog.CatalogUtils;\n+import org.apache.spark.sql.connector.catalog.CatalogPlugin;\n+import org.apache.spark.sql.connector.catalog.Identifier;\n+import org.apache.spark.sql.connector.catalog.StagedTable;\n+import org.apache.spark.sql.connector.catalog.StagingTableCatalog;\n+import org.apache.spark.sql.connector.catalog.TableCatalog;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import scala.collection.JavaConverters;\n+\n+/**\n+ * This action will migrate a known table in a Spark Catalog that is not an Iceberg table into an Iceberg table.\n+ * The created new table will be able to interact with and modify files in the original table.\n+ *\n+ * There are two main code paths\n+ *   - Creating a brand new iceberg table or replacing an existing Iceberg table\n+ *   This pathway will use a staged table to stage the creation or replacement, only committing after\n+ *   import has succeeded.\n+ *\n+ *   - Replacing a table in the Session Catalog with an Iceberg Table of the same name.\n+ *   This pathway will first create a temporary table with a different name. This replacement table will\n+ *   be committed upon a successful import. Then the original session catalog entry will be dropped\n+ *   and the new replacement table renamed to take its place.\n+ */\n+class Spark3CreateAction implements CreateAction {\n+  private static final Logger LOG = LoggerFactory.getLogger(Spark3CreateAction.class);\n+  private static final Set<String> ALLOWED_SOURCES = ImmutableSet.of(\"parquet\", \"avro\", \"orc\", \"hive\");\n+  private static final String ICEBERG_METADATA_FOLDER = \"metadata\";\n+  private static final String REPLACEMENT_NAME = \"_REPLACEMENT_\";\n+\n+  private final SparkSession spark;\n+\n+  // Source Fields\n+  private final CatalogTable sourceTable;\n+  private final String sourceTableLocation;\n+  private final CatalogPlugin sourceCatalog;\n+  private final Identifier sourceTableName;\n+  private final PartitionSpec sourcePartitionSpec;\n+\n+  // Destination Fields\n+  private final Boolean sessionCatalogReplacement;\n+  private final CatalogPlugin destCatalog;\n+  private final Identifier destTableName;\n+\n+  // Optional Parameters for destination\n+  private String destDataLocation;\n+  private String destMetadataLocation;\n+  private Map<String, String> additionalProperties = Maps.newHashMap();\n+\n+  Spark3CreateAction(SparkSession spark, CatalogPlugin sourceCatalog, Identifier sourceTableName,\n+                       CatalogPlugin destCatalog,  Identifier destTableName) {\n+\n+    this.spark = spark;\n+    this.sourceCatalog = checkSourceCatalog(sourceCatalog);\n+    this.sourceTableName = sourceTableName;\n+    this.destCatalog = destCatalog;\n+    this.destTableName = destTableName;\n+\n+    try {\n+      String sourceString = String.join(\".\", sourceTableName.namespace()) + \".\" + sourceTableName.name();\n+      sourcePartitionSpec = SparkSchemaUtil.specForTable(spark, sourceString);\n+    } catch (AnalysisException e) {\n+      throw new IllegalArgumentException(\"Cannot determining partitioning of \" + sourceTableName.toString(), e);\n+    }\n+\n+    try {\n+      this.sourceTable = spark.sessionState().catalog().getTableMetadata(Spark3Util.toTableIdentifier(sourceTableName));\n+    } catch (NoSuchTableException | NoSuchDatabaseException e) {\n+      throw new IllegalArgumentException(String.format(\"Could not find source table %s\", sourceTableName), e);\n+    }\n+    validateSourceTable(sourceTable);\n+\n+    this.sessionCatalogReplacement = isSessionCatalogReplacement();\n+\n+    this.sourceTableLocation = CatalogUtils.URIToString(sourceTable.storage().locationUri().get());\n+    this.destDataLocation = sourceTableLocation;\n+    this.destMetadataLocation = sourceTableLocation + \"/\" + ICEBERG_METADATA_FOLDER;\n+  }\n+\n+  private boolean isSessionCatalogReplacement() {\n+    boolean sourceIceberg = sourceTable.provider().get().toLowerCase(Locale.ROOT).equals(\"iceberg\");\n+    boolean sameCatalog = sourceCatalog == destCatalog;\n+    boolean sameIdentifier = sourceTableName.name().equals(destTableName.name()) &&\n+        Arrays.equals(sourceTableName.namespace(), destTableName.namespace());\n+    return !sourceIceberg && sameCatalog && sameIdentifier;\n+  }\n+\n+\n+  /**\n+   * Creates the Iceberg data and metadata at a given location instead of the source table\n+   * location. New metadata and data files will be added to this\n+   * new location and further operations will not effect the source table.\n+   *\n+   * @param newLocation the base directory for the new Iceberg Table\n+   * @return this for chaining\n+   */\n+  CreateAction asSnapshotAtLocation(String newLocation) {\n+    Preconditions.checkArgument(!newLocation.equals(sourceTableLocation), \"Cannot create a snapshot with the\" +\n+        \"same data location as the source table. To place new files in the source table directory use the migrate \" +\n+        \"command.\");\n+    this.destDataLocation = newLocation;\n+    this.destMetadataLocation = newLocation + \"/\" + ICEBERG_METADATA_FOLDER;\n+    return this;\n+  }\n+\n+  /**\n+   * Creates the Iceberg data and metadata at the catalog default location for the\n+   * new table.\n+   *\n+   * @return this for chaining\n+   */\n+  CreateAction asSnapshotAtDefaultLocation() {\n+    this.destDataLocation = null;\n+    this.destMetadataLocation = null;\n+    return this;\n+  }\n+\n+  @Override\n+  public Long execute() {\n+    StagingTableCatalog stagingCatalog = checkDestinationCatalog(destCatalog);\n+    Map<String, String> newTableProperties = new ImmutableMap.Builder<String, String>()\n+        .put(TableCatalog.PROP_PROVIDER, \"iceberg\")\n+        .putAll(JavaConverters.mapAsJavaMapConverter(sourceTable.properties()).asJava())\n+        .putAll(extraIcebergTableProps(destDataLocation, destMetadataLocation))\n+        .putAll(additionalProperties)\n+        .build();\n+\n+    StagedTable stagedTable;\n+    try {\n+      if (sessionCatalogReplacement) {\n+        /*\n+         * Spark Session Catalog cannot stage a replacement of a Session table with an Iceberg Table.\n+         * To workaround this we create a replacement table which is renamed after it\n+         * is successfully constructed.\n+         */\n+        stagedTable = stagingCatalog.stageCreate(Identifier.of(\n+            destTableName.namespace(),\n+            destTableName.name() + REPLACEMENT_NAME),\n+            sourceTable.schema(),\n+            Spark3Util.toTransforms(sourcePartitionSpec), newTableProperties);\n+      } else {\n+        stagedTable = stagingCatalog.stageCreate(destTableName, sourceTable.schema(),\n+            Spark3Util.toTransforms(sourcePartitionSpec), newTableProperties);\n+      }\n+    } catch (NoSuchNamespaceException e) {\n+      throw new IllegalArgumentException(\"Cannot create a new table in a namespace which does not exist\", e);\n+    } catch (TableAlreadyExistsException e) {\n+      throw new IllegalArgumentException(\"Destination table already exists\", e);\n+    }\n+\n+    Table icebergTable = ((SparkTable) stagedTable).table();\n+\n+    String stagingLocation;\n+    if (destMetadataLocation != null) {\n+      stagingLocation = destMetadataLocation;\n+    } else {\n+      stagingLocation = ((SparkTable) stagedTable).table().location() + \"/\" + ICEBERG_METADATA_FOLDER;\n+    }\n+\n+    LOG.info(\"Beginning migration of {} to {} using metadata location {}\", sourceTableName, destTableName,\n+        stagingLocation);\n+\n+    long numMigratedFiles;\n+    try {\n+      SparkTableUtil.importSparkTable(spark, Spark3Util.toTableIdentifier(sourceTableName), icebergTable,\n+          stagingLocation);\n+\n+      Snapshot snapshot = icebergTable.currentSnapshot();\n+      numMigratedFiles = Long.valueOf(snapshot.summary().get(SnapshotSummary.TOTAL_DATA_FILES_PROP));\n+\n+      stagedTable.commitStagedChanges();\n+      LOG.info(\"Successfully loaded Iceberg metadata for {} files\", numMigratedFiles);\n+    } catch (Exception e) {\n+      LOG.error(\"Error when attempting to commit migration changes, rolling back\", e);\n+      stagedTable.abortStagedChanges();\n+      throw e;\n+    }\n+\n+    if (sessionCatalogReplacement) {\n+      Identifier replacementTable = Identifier.of(destTableName.namespace(), destTableName.name() + REPLACEMENT_NAME);\n+      try {\n+        stagingCatalog.dropTable(destTableName);\n+        stagingCatalog.renameTable(replacementTable, destTableName);\n+      } catch (NoSuchTableException e) {\n+        LOG.error(\"Cannot migrate, replacement table is missing. Attempting to recreate source table\", e);\n+        try {\n+          stagingCatalog.createTable(sourceTableName, sourceTable.schema(),\n+              Spark3Util.toTransforms(sourcePartitionSpec), JavaConverters.mapAsJavaMap(sourceTable.properties()));\n+        } catch (TableAlreadyExistsException tableAlreadyExistsException) {\n+          Log.error(\"Cannot recreate source table. Source table has already been recreated\", e);\n+          throw new RuntimeException(e);\n+        } catch (NoSuchNamespaceException noSuchNamespaceException) {\n+          Log.error(\"Cannot recreate source table. Source namespace has been removed, cannot recreate\", e);\n+          throw new RuntimeException(e);\n+        }\n+      } catch (TableAlreadyExistsException e) {\n+        Log.error(\"Cannot migrate, Source table was recreated before replacement could be moved. \" +\n+            \"Attempting to remove replacement table.\", e);\n+        stagingCatalog.dropTable(replacementTable);\n+        stagedTable.abortStagedChanges();\n+      }\n+    }\n+\n+    return numMigratedFiles;\n+  }\n+\n+  @Override\n+  public CreateAction set(Map<String, String> properties) {\n+    this.additionalProperties.putAll(properties);\n+    return this;\n+  }\n+\n+  @Override\n+  public CreateAction set(String key, String value) {\n+    this.additionalProperties.put(key, value);\n+    return this;\n+  }\n+\n+  private static void validateSourceTable(CatalogTable sourceTable) {\n+    String sourceTableProvider = sourceTable.provider().get().toLowerCase(Locale.ROOT);\n+\n+    if (!ALLOWED_SOURCES.contains(sourceTableProvider)) {\n+      throw new IllegalArgumentException(\n+          String.format(\"Cannot create an Iceberg table from source provider: %s\", sourceTableProvider));\n+    }\n+    if (sourceTable.storage().locationUri().isEmpty()) {\n+      throw new IllegalArgumentException(\"Cannot create an Iceberg table from a source without an explicit location\");\n+    }\n+  }\n+\n+  private static Map<String, String> extraIcebergTableProps(String tableLocation, String metadataLocation) {\n+    if (tableLocation != null && metadataLocation != null) {\n+      return ImmutableMap.of(\n+          TableProperties.WRITE_METADATA_LOCATION, metadataLocation,\n+          TableProperties.WRITE_NEW_DATA_LOCATION, tableLocation,\n+          \"migrated\", \"true\"\n+      );\n+    } else {\n+      return ImmutableMap.of(\"migrated\", \"true\");\n+    }\n+  }\n+\n+  private static StagingTableCatalog checkDestinationCatalog(CatalogPlugin catalog) {\n+    if (!(catalog instanceof SparkSessionCatalog) && !(catalog instanceof SparkCatalog)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "683b7e5265adf67b1e24a25c008e2f289f1d97ad"}, "originalPosition": 292}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjUwMjIxNQ==", "bodyText": "Yep, Sorry this PR has been in progress for a very long time, I haven't kept up with all the other changes.", "url": "https://github.com/apache/iceberg/pull/1525#discussion_r526502215", "createdAt": "2020-11-18T23:58:55Z", "author": {"login": "RussellSpitzer"}, "path": "spark3/src/main/java/org/apache/iceberg/actions/Spark3CreateAction.java", "diffHunk": "@@ -0,0 +1,310 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.actions;\n+\n+import java.util.Arrays;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Set;\n+import jline.internal.Log;\n+import org.apache.iceberg.PartitionSpec;\n+import org.apache.iceberg.Snapshot;\n+import org.apache.iceberg.SnapshotSummary;\n+import org.apache.iceberg.Table;\n+import org.apache.iceberg.TableProperties;\n+import org.apache.iceberg.relocated.com.google.common.base.Preconditions;\n+import org.apache.iceberg.relocated.com.google.common.collect.ImmutableMap;\n+import org.apache.iceberg.relocated.com.google.common.collect.ImmutableSet;\n+import org.apache.iceberg.relocated.com.google.common.collect.Maps;\n+import org.apache.iceberg.spark.Spark3Util;\n+import org.apache.iceberg.spark.SparkCatalog;\n+import org.apache.iceberg.spark.SparkSchemaUtil;\n+import org.apache.iceberg.spark.SparkSessionCatalog;\n+import org.apache.iceberg.spark.SparkTableUtil;\n+import org.apache.iceberg.spark.source.SparkTable;\n+import org.apache.spark.sql.AnalysisException;\n+import org.apache.spark.sql.SparkSession;\n+import org.apache.spark.sql.catalyst.analysis.NoSuchDatabaseException;\n+import org.apache.spark.sql.catalyst.analysis.NoSuchNamespaceException;\n+import org.apache.spark.sql.catalyst.analysis.NoSuchTableException;\n+import org.apache.spark.sql.catalyst.analysis.TableAlreadyExistsException;\n+import org.apache.spark.sql.catalyst.catalog.CatalogTable;\n+import org.apache.spark.sql.catalyst.catalog.CatalogUtils;\n+import org.apache.spark.sql.connector.catalog.CatalogPlugin;\n+import org.apache.spark.sql.connector.catalog.Identifier;\n+import org.apache.spark.sql.connector.catalog.StagedTable;\n+import org.apache.spark.sql.connector.catalog.StagingTableCatalog;\n+import org.apache.spark.sql.connector.catalog.TableCatalog;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import scala.collection.JavaConverters;\n+\n+/**\n+ * This action will migrate a known table in a Spark Catalog that is not an Iceberg table into an Iceberg table.\n+ * The created new table will be able to interact with and modify files in the original table.\n+ *\n+ * There are two main code paths\n+ *   - Creating a brand new iceberg table or replacing an existing Iceberg table\n+ *   This pathway will use a staged table to stage the creation or replacement, only committing after\n+ *   import has succeeded.\n+ *\n+ *   - Replacing a table in the Session Catalog with an Iceberg Table of the same name.\n+ *   This pathway will first create a temporary table with a different name. This replacement table will\n+ *   be committed upon a successful import. Then the original session catalog entry will be dropped\n+ *   and the new replacement table renamed to take its place.\n+ */\n+class Spark3CreateAction implements CreateAction {\n+  private static final Logger LOG = LoggerFactory.getLogger(Spark3CreateAction.class);\n+  private static final Set<String> ALLOWED_SOURCES = ImmutableSet.of(\"parquet\", \"avro\", \"orc\", \"hive\");\n+  private static final String ICEBERG_METADATA_FOLDER = \"metadata\";\n+  private static final String REPLACEMENT_NAME = \"_REPLACEMENT_\";\n+\n+  private final SparkSession spark;\n+\n+  // Source Fields\n+  private final CatalogTable sourceTable;\n+  private final String sourceTableLocation;\n+  private final CatalogPlugin sourceCatalog;\n+  private final Identifier sourceTableName;\n+  private final PartitionSpec sourcePartitionSpec;\n+\n+  // Destination Fields\n+  private final Boolean sessionCatalogReplacement;\n+  private final CatalogPlugin destCatalog;\n+  private final Identifier destTableName;\n+\n+  // Optional Parameters for destination\n+  private String destDataLocation;\n+  private String destMetadataLocation;\n+  private Map<String, String> additionalProperties = Maps.newHashMap();\n+\n+  Spark3CreateAction(SparkSession spark, CatalogPlugin sourceCatalog, Identifier sourceTableName,\n+                       CatalogPlugin destCatalog,  Identifier destTableName) {\n+\n+    this.spark = spark;\n+    this.sourceCatalog = checkSourceCatalog(sourceCatalog);\n+    this.sourceTableName = sourceTableName;\n+    this.destCatalog = destCatalog;\n+    this.destTableName = destTableName;\n+\n+    try {\n+      String sourceString = String.join(\".\", sourceTableName.namespace()) + \".\" + sourceTableName.name();\n+      sourcePartitionSpec = SparkSchemaUtil.specForTable(spark, sourceString);\n+    } catch (AnalysisException e) {\n+      throw new IllegalArgumentException(\"Cannot determining partitioning of \" + sourceTableName.toString(), e);\n+    }\n+\n+    try {\n+      this.sourceTable = spark.sessionState().catalog().getTableMetadata(Spark3Util.toTableIdentifier(sourceTableName));\n+    } catch (NoSuchTableException | NoSuchDatabaseException e) {\n+      throw new IllegalArgumentException(String.format(\"Could not find source table %s\", sourceTableName), e);\n+    }\n+    validateSourceTable(sourceTable);\n+\n+    this.sessionCatalogReplacement = isSessionCatalogReplacement();\n+\n+    this.sourceTableLocation = CatalogUtils.URIToString(sourceTable.storage().locationUri().get());\n+    this.destDataLocation = sourceTableLocation;\n+    this.destMetadataLocation = sourceTableLocation + \"/\" + ICEBERG_METADATA_FOLDER;\n+  }\n+\n+  private boolean isSessionCatalogReplacement() {\n+    boolean sourceIceberg = sourceTable.provider().get().toLowerCase(Locale.ROOT).equals(\"iceberg\");\n+    boolean sameCatalog = sourceCatalog == destCatalog;\n+    boolean sameIdentifier = sourceTableName.name().equals(destTableName.name()) &&\n+        Arrays.equals(sourceTableName.namespace(), destTableName.namespace());\n+    return !sourceIceberg && sameCatalog && sameIdentifier;\n+  }\n+\n+\n+  /**\n+   * Creates the Iceberg data and metadata at a given location instead of the source table\n+   * location. New metadata and data files will be added to this\n+   * new location and further operations will not effect the source table.\n+   *\n+   * @param newLocation the base directory for the new Iceberg Table\n+   * @return this for chaining\n+   */\n+  CreateAction asSnapshotAtLocation(String newLocation) {\n+    Preconditions.checkArgument(!newLocation.equals(sourceTableLocation), \"Cannot create a snapshot with the\" +\n+        \"same data location as the source table. To place new files in the source table directory use the migrate \" +\n+        \"command.\");\n+    this.destDataLocation = newLocation;\n+    this.destMetadataLocation = newLocation + \"/\" + ICEBERG_METADATA_FOLDER;\n+    return this;\n+  }\n+\n+  /**\n+   * Creates the Iceberg data and metadata at the catalog default location for the\n+   * new table.\n+   *\n+   * @return this for chaining\n+   */\n+  CreateAction asSnapshotAtDefaultLocation() {\n+    this.destDataLocation = null;\n+    this.destMetadataLocation = null;\n+    return this;\n+  }\n+\n+  @Override\n+  public Long execute() {\n+    StagingTableCatalog stagingCatalog = checkDestinationCatalog(destCatalog);\n+    Map<String, String> newTableProperties = new ImmutableMap.Builder<String, String>()\n+        .put(TableCatalog.PROP_PROVIDER, \"iceberg\")\n+        .putAll(JavaConverters.mapAsJavaMapConverter(sourceTable.properties()).asJava())\n+        .putAll(extraIcebergTableProps(destDataLocation, destMetadataLocation))\n+        .putAll(additionalProperties)\n+        .build();\n+\n+    StagedTable stagedTable;\n+    try {\n+      if (sessionCatalogReplacement) {\n+        /*\n+         * Spark Session Catalog cannot stage a replacement of a Session table with an Iceberg Table.\n+         * To workaround this we create a replacement table which is renamed after it\n+         * is successfully constructed.\n+         */\n+        stagedTable = stagingCatalog.stageCreate(Identifier.of(\n+            destTableName.namespace(),\n+            destTableName.name() + REPLACEMENT_NAME),\n+            sourceTable.schema(),\n+            Spark3Util.toTransforms(sourcePartitionSpec), newTableProperties);\n+      } else {\n+        stagedTable = stagingCatalog.stageCreate(destTableName, sourceTable.schema(),\n+            Spark3Util.toTransforms(sourcePartitionSpec), newTableProperties);\n+      }\n+    } catch (NoSuchNamespaceException e) {\n+      throw new IllegalArgumentException(\"Cannot create a new table in a namespace which does not exist\", e);\n+    } catch (TableAlreadyExistsException e) {\n+      throw new IllegalArgumentException(\"Destination table already exists\", e);\n+    }\n+\n+    Table icebergTable = ((SparkTable) stagedTable).table();\n+\n+    String stagingLocation;\n+    if (destMetadataLocation != null) {\n+      stagingLocation = destMetadataLocation;\n+    } else {\n+      stagingLocation = ((SparkTable) stagedTable).table().location() + \"/\" + ICEBERG_METADATA_FOLDER;\n+    }\n+\n+    LOG.info(\"Beginning migration of {} to {} using metadata location {}\", sourceTableName, destTableName,\n+        stagingLocation);\n+\n+    long numMigratedFiles;\n+    try {\n+      SparkTableUtil.importSparkTable(spark, Spark3Util.toTableIdentifier(sourceTableName), icebergTable,\n+          stagingLocation);\n+\n+      Snapshot snapshot = icebergTable.currentSnapshot();\n+      numMigratedFiles = Long.valueOf(snapshot.summary().get(SnapshotSummary.TOTAL_DATA_FILES_PROP));\n+\n+      stagedTable.commitStagedChanges();\n+      LOG.info(\"Successfully loaded Iceberg metadata for {} files\", numMigratedFiles);\n+    } catch (Exception e) {\n+      LOG.error(\"Error when attempting to commit migration changes, rolling back\", e);\n+      stagedTable.abortStagedChanges();\n+      throw e;\n+    }\n+\n+    if (sessionCatalogReplacement) {\n+      Identifier replacementTable = Identifier.of(destTableName.namespace(), destTableName.name() + REPLACEMENT_NAME);\n+      try {\n+        stagingCatalog.dropTable(destTableName);\n+        stagingCatalog.renameTable(replacementTable, destTableName);\n+      } catch (NoSuchTableException e) {\n+        LOG.error(\"Cannot migrate, replacement table is missing. Attempting to recreate source table\", e);\n+        try {\n+          stagingCatalog.createTable(sourceTableName, sourceTable.schema(),\n+              Spark3Util.toTransforms(sourcePartitionSpec), JavaConverters.mapAsJavaMap(sourceTable.properties()));\n+        } catch (TableAlreadyExistsException tableAlreadyExistsException) {\n+          Log.error(\"Cannot recreate source table. Source table has already been recreated\", e);\n+          throw new RuntimeException(e);\n+        } catch (NoSuchNamespaceException noSuchNamespaceException) {\n+          Log.error(\"Cannot recreate source table. Source namespace has been removed, cannot recreate\", e);\n+          throw new RuntimeException(e);\n+        }\n+      } catch (TableAlreadyExistsException e) {\n+        Log.error(\"Cannot migrate, Source table was recreated before replacement could be moved. \" +\n+            \"Attempting to remove replacement table.\", e);\n+        stagingCatalog.dropTable(replacementTable);\n+        stagedTable.abortStagedChanges();\n+      }\n+    }\n+\n+    return numMigratedFiles;\n+  }\n+\n+  @Override\n+  public CreateAction set(Map<String, String> properties) {\n+    this.additionalProperties.putAll(properties);\n+    return this;\n+  }\n+\n+  @Override\n+  public CreateAction set(String key, String value) {\n+    this.additionalProperties.put(key, value);\n+    return this;\n+  }\n+\n+  private static void validateSourceTable(CatalogTable sourceTable) {\n+    String sourceTableProvider = sourceTable.provider().get().toLowerCase(Locale.ROOT);\n+\n+    if (!ALLOWED_SOURCES.contains(sourceTableProvider)) {\n+      throw new IllegalArgumentException(\n+          String.format(\"Cannot create an Iceberg table from source provider: %s\", sourceTableProvider));\n+    }\n+    if (sourceTable.storage().locationUri().isEmpty()) {\n+      throw new IllegalArgumentException(\"Cannot create an Iceberg table from a source without an explicit location\");\n+    }\n+  }\n+\n+  private static Map<String, String> extraIcebergTableProps(String tableLocation, String metadataLocation) {\n+    if (tableLocation != null && metadataLocation != null) {\n+      return ImmutableMap.of(\n+          TableProperties.WRITE_METADATA_LOCATION, metadataLocation,\n+          TableProperties.WRITE_NEW_DATA_LOCATION, tableLocation,\n+          \"migrated\", \"true\"\n+      );\n+    } else {\n+      return ImmutableMap.of(\"migrated\", \"true\");\n+    }\n+  }\n+\n+  private static StagingTableCatalog checkDestinationCatalog(CatalogPlugin catalog) {\n+    if (!(catalog instanceof SparkSessionCatalog) && !(catalog instanceof SparkCatalog)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjUwMTg2Mg=="}, "originalCommit": {"oid": "683b7e5265adf67b1e24a25c008e2f289f1d97ad"}, "originalPosition": 292}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTYzMDQxNQ==", "bodyText": "We can't actually do this with the current package structure since baseCatalog is package private in Spark and this is in Actions. We could always move spark's action package though", "url": "https://github.com/apache/iceberg/pull/1525#discussion_r531630415", "createdAt": "2020-11-27T14:24:11Z", "author": {"login": "RussellSpitzer"}, "path": "spark3/src/main/java/org/apache/iceberg/actions/Spark3CreateAction.java", "diffHunk": "@@ -0,0 +1,310 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.actions;\n+\n+import java.util.Arrays;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Set;\n+import jline.internal.Log;\n+import org.apache.iceberg.PartitionSpec;\n+import org.apache.iceberg.Snapshot;\n+import org.apache.iceberg.SnapshotSummary;\n+import org.apache.iceberg.Table;\n+import org.apache.iceberg.TableProperties;\n+import org.apache.iceberg.relocated.com.google.common.base.Preconditions;\n+import org.apache.iceberg.relocated.com.google.common.collect.ImmutableMap;\n+import org.apache.iceberg.relocated.com.google.common.collect.ImmutableSet;\n+import org.apache.iceberg.relocated.com.google.common.collect.Maps;\n+import org.apache.iceberg.spark.Spark3Util;\n+import org.apache.iceberg.spark.SparkCatalog;\n+import org.apache.iceberg.spark.SparkSchemaUtil;\n+import org.apache.iceberg.spark.SparkSessionCatalog;\n+import org.apache.iceberg.spark.SparkTableUtil;\n+import org.apache.iceberg.spark.source.SparkTable;\n+import org.apache.spark.sql.AnalysisException;\n+import org.apache.spark.sql.SparkSession;\n+import org.apache.spark.sql.catalyst.analysis.NoSuchDatabaseException;\n+import org.apache.spark.sql.catalyst.analysis.NoSuchNamespaceException;\n+import org.apache.spark.sql.catalyst.analysis.NoSuchTableException;\n+import org.apache.spark.sql.catalyst.analysis.TableAlreadyExistsException;\n+import org.apache.spark.sql.catalyst.catalog.CatalogTable;\n+import org.apache.spark.sql.catalyst.catalog.CatalogUtils;\n+import org.apache.spark.sql.connector.catalog.CatalogPlugin;\n+import org.apache.spark.sql.connector.catalog.Identifier;\n+import org.apache.spark.sql.connector.catalog.StagedTable;\n+import org.apache.spark.sql.connector.catalog.StagingTableCatalog;\n+import org.apache.spark.sql.connector.catalog.TableCatalog;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import scala.collection.JavaConverters;\n+\n+/**\n+ * This action will migrate a known table in a Spark Catalog that is not an Iceberg table into an Iceberg table.\n+ * The created new table will be able to interact with and modify files in the original table.\n+ *\n+ * There are two main code paths\n+ *   - Creating a brand new iceberg table or replacing an existing Iceberg table\n+ *   This pathway will use a staged table to stage the creation or replacement, only committing after\n+ *   import has succeeded.\n+ *\n+ *   - Replacing a table in the Session Catalog with an Iceberg Table of the same name.\n+ *   This pathway will first create a temporary table with a different name. This replacement table will\n+ *   be committed upon a successful import. Then the original session catalog entry will be dropped\n+ *   and the new replacement table renamed to take its place.\n+ */\n+class Spark3CreateAction implements CreateAction {\n+  private static final Logger LOG = LoggerFactory.getLogger(Spark3CreateAction.class);\n+  private static final Set<String> ALLOWED_SOURCES = ImmutableSet.of(\"parquet\", \"avro\", \"orc\", \"hive\");\n+  private static final String ICEBERG_METADATA_FOLDER = \"metadata\";\n+  private static final String REPLACEMENT_NAME = \"_REPLACEMENT_\";\n+\n+  private final SparkSession spark;\n+\n+  // Source Fields\n+  private final CatalogTable sourceTable;\n+  private final String sourceTableLocation;\n+  private final CatalogPlugin sourceCatalog;\n+  private final Identifier sourceTableName;\n+  private final PartitionSpec sourcePartitionSpec;\n+\n+  // Destination Fields\n+  private final Boolean sessionCatalogReplacement;\n+  private final CatalogPlugin destCatalog;\n+  private final Identifier destTableName;\n+\n+  // Optional Parameters for destination\n+  private String destDataLocation;\n+  private String destMetadataLocation;\n+  private Map<String, String> additionalProperties = Maps.newHashMap();\n+\n+  Spark3CreateAction(SparkSession spark, CatalogPlugin sourceCatalog, Identifier sourceTableName,\n+                       CatalogPlugin destCatalog,  Identifier destTableName) {\n+\n+    this.spark = spark;\n+    this.sourceCatalog = checkSourceCatalog(sourceCatalog);\n+    this.sourceTableName = sourceTableName;\n+    this.destCatalog = destCatalog;\n+    this.destTableName = destTableName;\n+\n+    try {\n+      String sourceString = String.join(\".\", sourceTableName.namespace()) + \".\" + sourceTableName.name();\n+      sourcePartitionSpec = SparkSchemaUtil.specForTable(spark, sourceString);\n+    } catch (AnalysisException e) {\n+      throw new IllegalArgumentException(\"Cannot determining partitioning of \" + sourceTableName.toString(), e);\n+    }\n+\n+    try {\n+      this.sourceTable = spark.sessionState().catalog().getTableMetadata(Spark3Util.toTableIdentifier(sourceTableName));\n+    } catch (NoSuchTableException | NoSuchDatabaseException e) {\n+      throw new IllegalArgumentException(String.format(\"Could not find source table %s\", sourceTableName), e);\n+    }\n+    validateSourceTable(sourceTable);\n+\n+    this.sessionCatalogReplacement = isSessionCatalogReplacement();\n+\n+    this.sourceTableLocation = CatalogUtils.URIToString(sourceTable.storage().locationUri().get());\n+    this.destDataLocation = sourceTableLocation;\n+    this.destMetadataLocation = sourceTableLocation + \"/\" + ICEBERG_METADATA_FOLDER;\n+  }\n+\n+  private boolean isSessionCatalogReplacement() {\n+    boolean sourceIceberg = sourceTable.provider().get().toLowerCase(Locale.ROOT).equals(\"iceberg\");\n+    boolean sameCatalog = sourceCatalog == destCatalog;\n+    boolean sameIdentifier = sourceTableName.name().equals(destTableName.name()) &&\n+        Arrays.equals(sourceTableName.namespace(), destTableName.namespace());\n+    return !sourceIceberg && sameCatalog && sameIdentifier;\n+  }\n+\n+\n+  /**\n+   * Creates the Iceberg data and metadata at a given location instead of the source table\n+   * location. New metadata and data files will be added to this\n+   * new location and further operations will not effect the source table.\n+   *\n+   * @param newLocation the base directory for the new Iceberg Table\n+   * @return this for chaining\n+   */\n+  CreateAction asSnapshotAtLocation(String newLocation) {\n+    Preconditions.checkArgument(!newLocation.equals(sourceTableLocation), \"Cannot create a snapshot with the\" +\n+        \"same data location as the source table. To place new files in the source table directory use the migrate \" +\n+        \"command.\");\n+    this.destDataLocation = newLocation;\n+    this.destMetadataLocation = newLocation + \"/\" + ICEBERG_METADATA_FOLDER;\n+    return this;\n+  }\n+\n+  /**\n+   * Creates the Iceberg data and metadata at the catalog default location for the\n+   * new table.\n+   *\n+   * @return this for chaining\n+   */\n+  CreateAction asSnapshotAtDefaultLocation() {\n+    this.destDataLocation = null;\n+    this.destMetadataLocation = null;\n+    return this;\n+  }\n+\n+  @Override\n+  public Long execute() {\n+    StagingTableCatalog stagingCatalog = checkDestinationCatalog(destCatalog);\n+    Map<String, String> newTableProperties = new ImmutableMap.Builder<String, String>()\n+        .put(TableCatalog.PROP_PROVIDER, \"iceberg\")\n+        .putAll(JavaConverters.mapAsJavaMapConverter(sourceTable.properties()).asJava())\n+        .putAll(extraIcebergTableProps(destDataLocation, destMetadataLocation))\n+        .putAll(additionalProperties)\n+        .build();\n+\n+    StagedTable stagedTable;\n+    try {\n+      if (sessionCatalogReplacement) {\n+        /*\n+         * Spark Session Catalog cannot stage a replacement of a Session table with an Iceberg Table.\n+         * To workaround this we create a replacement table which is renamed after it\n+         * is successfully constructed.\n+         */\n+        stagedTable = stagingCatalog.stageCreate(Identifier.of(\n+            destTableName.namespace(),\n+            destTableName.name() + REPLACEMENT_NAME),\n+            sourceTable.schema(),\n+            Spark3Util.toTransforms(sourcePartitionSpec), newTableProperties);\n+      } else {\n+        stagedTable = stagingCatalog.stageCreate(destTableName, sourceTable.schema(),\n+            Spark3Util.toTransforms(sourcePartitionSpec), newTableProperties);\n+      }\n+    } catch (NoSuchNamespaceException e) {\n+      throw new IllegalArgumentException(\"Cannot create a new table in a namespace which does not exist\", e);\n+    } catch (TableAlreadyExistsException e) {\n+      throw new IllegalArgumentException(\"Destination table already exists\", e);\n+    }\n+\n+    Table icebergTable = ((SparkTable) stagedTable).table();\n+\n+    String stagingLocation;\n+    if (destMetadataLocation != null) {\n+      stagingLocation = destMetadataLocation;\n+    } else {\n+      stagingLocation = ((SparkTable) stagedTable).table().location() + \"/\" + ICEBERG_METADATA_FOLDER;\n+    }\n+\n+    LOG.info(\"Beginning migration of {} to {} using metadata location {}\", sourceTableName, destTableName,\n+        stagingLocation);\n+\n+    long numMigratedFiles;\n+    try {\n+      SparkTableUtil.importSparkTable(spark, Spark3Util.toTableIdentifier(sourceTableName), icebergTable,\n+          stagingLocation);\n+\n+      Snapshot snapshot = icebergTable.currentSnapshot();\n+      numMigratedFiles = Long.valueOf(snapshot.summary().get(SnapshotSummary.TOTAL_DATA_FILES_PROP));\n+\n+      stagedTable.commitStagedChanges();\n+      LOG.info(\"Successfully loaded Iceberg metadata for {} files\", numMigratedFiles);\n+    } catch (Exception e) {\n+      LOG.error(\"Error when attempting to commit migration changes, rolling back\", e);\n+      stagedTable.abortStagedChanges();\n+      throw e;\n+    }\n+\n+    if (sessionCatalogReplacement) {\n+      Identifier replacementTable = Identifier.of(destTableName.namespace(), destTableName.name() + REPLACEMENT_NAME);\n+      try {\n+        stagingCatalog.dropTable(destTableName);\n+        stagingCatalog.renameTable(replacementTable, destTableName);\n+      } catch (NoSuchTableException e) {\n+        LOG.error(\"Cannot migrate, replacement table is missing. Attempting to recreate source table\", e);\n+        try {\n+          stagingCatalog.createTable(sourceTableName, sourceTable.schema(),\n+              Spark3Util.toTransforms(sourcePartitionSpec), JavaConverters.mapAsJavaMap(sourceTable.properties()));\n+        } catch (TableAlreadyExistsException tableAlreadyExistsException) {\n+          Log.error(\"Cannot recreate source table. Source table has already been recreated\", e);\n+          throw new RuntimeException(e);\n+        } catch (NoSuchNamespaceException noSuchNamespaceException) {\n+          Log.error(\"Cannot recreate source table. Source namespace has been removed, cannot recreate\", e);\n+          throw new RuntimeException(e);\n+        }\n+      } catch (TableAlreadyExistsException e) {\n+        Log.error(\"Cannot migrate, Source table was recreated before replacement could be moved. \" +\n+            \"Attempting to remove replacement table.\", e);\n+        stagingCatalog.dropTable(replacementTable);\n+        stagedTable.abortStagedChanges();\n+      }\n+    }\n+\n+    return numMigratedFiles;\n+  }\n+\n+  @Override\n+  public CreateAction set(Map<String, String> properties) {\n+    this.additionalProperties.putAll(properties);\n+    return this;\n+  }\n+\n+  @Override\n+  public CreateAction set(String key, String value) {\n+    this.additionalProperties.put(key, value);\n+    return this;\n+  }\n+\n+  private static void validateSourceTable(CatalogTable sourceTable) {\n+    String sourceTableProvider = sourceTable.provider().get().toLowerCase(Locale.ROOT);\n+\n+    if (!ALLOWED_SOURCES.contains(sourceTableProvider)) {\n+      throw new IllegalArgumentException(\n+          String.format(\"Cannot create an Iceberg table from source provider: %s\", sourceTableProvider));\n+    }\n+    if (sourceTable.storage().locationUri().isEmpty()) {\n+      throw new IllegalArgumentException(\"Cannot create an Iceberg table from a source without an explicit location\");\n+    }\n+  }\n+\n+  private static Map<String, String> extraIcebergTableProps(String tableLocation, String metadataLocation) {\n+    if (tableLocation != null && metadataLocation != null) {\n+      return ImmutableMap.of(\n+          TableProperties.WRITE_METADATA_LOCATION, metadataLocation,\n+          TableProperties.WRITE_NEW_DATA_LOCATION, tableLocation,\n+          \"migrated\", \"true\"\n+      );\n+    } else {\n+      return ImmutableMap.of(\"migrated\", \"true\");\n+    }\n+  }\n+\n+  private static StagingTableCatalog checkDestinationCatalog(CatalogPlugin catalog) {\n+    if (!(catalog instanceof SparkSessionCatalog) && !(catalog instanceof SparkCatalog)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjUwMTg2Mg=="}, "originalCommit": {"oid": "683b7e5265adf67b1e24a25c008e2f289f1d97ad"}, "originalPosition": 292}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2MTU3NTY3OnYy", "diffSide": "RIGHT", "path": "spark3/src/main/java/org/apache/iceberg/actions/Spark3CreateAction.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQwMTo1NDowNVrOH-9RwA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQxNzoxMDoxM1rOH_Z_cQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTc3NzcyOA==", "bodyText": "specForTable is a bit hacky. At a minimum, it seems strange that this would create a string table name just for specForTable to split on . immediately.\nSince the source table is loaded as a v1 table just after this, why not use the schema and partition fields from the CatalogTable instead?\nWe should probably also deprecate specForTable if we are going to maintain this, since this can be a much better utility for conversion.", "url": "https://github.com/apache/iceberg/pull/1525#discussion_r535777728", "createdAt": "2020-12-04T01:54:05Z", "author": {"login": "rdblue"}, "path": "spark3/src/main/java/org/apache/iceberg/actions/Spark3CreateAction.java", "diffHunk": "@@ -0,0 +1,183 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.actions;\n+\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Set;\n+import org.apache.iceberg.PartitionSpec;\n+import org.apache.iceberg.Table;\n+import org.apache.iceberg.TableProperties;\n+import org.apache.iceberg.mapping.MappingUtil;\n+import org.apache.iceberg.mapping.NameMapping;\n+import org.apache.iceberg.mapping.NameMappingParser;\n+import org.apache.iceberg.relocated.com.google.common.collect.ImmutableMap;\n+import org.apache.iceberg.relocated.com.google.common.collect.ImmutableSet;\n+import org.apache.iceberg.relocated.com.google.common.collect.Maps;\n+import org.apache.iceberg.spark.SparkCatalog;\n+import org.apache.iceberg.spark.SparkSchemaUtil;\n+import org.apache.iceberg.spark.SparkSessionCatalog;\n+import org.apache.spark.sql.AnalysisException;\n+import org.apache.spark.sql.SparkSession;\n+import org.apache.spark.sql.catalyst.analysis.NoSuchTableException;\n+import org.apache.spark.sql.catalyst.catalog.CatalogTable;\n+import org.apache.spark.sql.catalyst.catalog.CatalogUtils;\n+import org.apache.spark.sql.connector.catalog.CatalogPlugin;\n+import org.apache.spark.sql.connector.catalog.Identifier;\n+import org.apache.spark.sql.connector.catalog.StagingTableCatalog;\n+import org.apache.spark.sql.connector.catalog.TableCatalog;\n+import org.apache.spark.sql.connector.catalog.V1Table;\n+import org.apache.spark.sql.connector.expressions.Transform;\n+\n+abstract class Spark3CreateAction implements CreateAction {\n+  private static final Set<String> ALLOWED_SOURCES = ImmutableSet.of(\"parquet\", \"avro\", \"orc\", \"hive\");\n+  protected static final String ICEBERG_METADATA_FOLDER = \"metadata\";\n+\n+  private final SparkSession spark;\n+\n+  // Source Fields\n+  private final V1Table sourceTable;\n+  private final CatalogTable sourceCatalogTable;\n+  private final String sourceTableLocation;\n+  private final CatalogPlugin sourceCatalog;\n+  private final Identifier sourceTableName;\n+  private final PartitionSpec sourcePartitionSpec;\n+\n+  // Destination Fields\n+  private final StagingTableCatalog destCatalog;\n+  private final Identifier destTableName;\n+\n+  // Optional Parameters for destination\n+  private Map<String, String> additionalProperties = Maps.newHashMap();\n+\n+  Spark3CreateAction(SparkSession spark, CatalogPlugin sourceCatalog, Identifier sourceTableName,\n+                       CatalogPlugin destCatalog,  Identifier destTableName) {\n+\n+    this.spark = spark;\n+    this.sourceCatalog = checkSourceCatalog(sourceCatalog);\n+    this.sourceTableName = sourceTableName;\n+    this.destCatalog = checkDestinationCatalog(destCatalog);\n+    this.destTableName = destTableName;\n+\n+    try {\n+      String sourceString = String.join(\".\", sourceTableName.namespace()) + \".\" + sourceTableName.name();\n+      sourcePartitionSpec = SparkSchemaUtil.specForTable(spark, sourceString);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "09f329bc39e8a2a1b2b5f925c580a2177833510b"}, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjI0ODE3Nw==", "bodyText": "This isn't actually used, I forgot to remove it, we now use the Transforms out of the V1Table representation", "url": "https://github.com/apache/iceberg/pull/1525#discussion_r536248177", "createdAt": "2020-12-04T17:10:13Z", "author": {"login": "RussellSpitzer"}, "path": "spark3/src/main/java/org/apache/iceberg/actions/Spark3CreateAction.java", "diffHunk": "@@ -0,0 +1,183 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.actions;\n+\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Set;\n+import org.apache.iceberg.PartitionSpec;\n+import org.apache.iceberg.Table;\n+import org.apache.iceberg.TableProperties;\n+import org.apache.iceberg.mapping.MappingUtil;\n+import org.apache.iceberg.mapping.NameMapping;\n+import org.apache.iceberg.mapping.NameMappingParser;\n+import org.apache.iceberg.relocated.com.google.common.collect.ImmutableMap;\n+import org.apache.iceberg.relocated.com.google.common.collect.ImmutableSet;\n+import org.apache.iceberg.relocated.com.google.common.collect.Maps;\n+import org.apache.iceberg.spark.SparkCatalog;\n+import org.apache.iceberg.spark.SparkSchemaUtil;\n+import org.apache.iceberg.spark.SparkSessionCatalog;\n+import org.apache.spark.sql.AnalysisException;\n+import org.apache.spark.sql.SparkSession;\n+import org.apache.spark.sql.catalyst.analysis.NoSuchTableException;\n+import org.apache.spark.sql.catalyst.catalog.CatalogTable;\n+import org.apache.spark.sql.catalyst.catalog.CatalogUtils;\n+import org.apache.spark.sql.connector.catalog.CatalogPlugin;\n+import org.apache.spark.sql.connector.catalog.Identifier;\n+import org.apache.spark.sql.connector.catalog.StagingTableCatalog;\n+import org.apache.spark.sql.connector.catalog.TableCatalog;\n+import org.apache.spark.sql.connector.catalog.V1Table;\n+import org.apache.spark.sql.connector.expressions.Transform;\n+\n+abstract class Spark3CreateAction implements CreateAction {\n+  private static final Set<String> ALLOWED_SOURCES = ImmutableSet.of(\"parquet\", \"avro\", \"orc\", \"hive\");\n+  protected static final String ICEBERG_METADATA_FOLDER = \"metadata\";\n+\n+  private final SparkSession spark;\n+\n+  // Source Fields\n+  private final V1Table sourceTable;\n+  private final CatalogTable sourceCatalogTable;\n+  private final String sourceTableLocation;\n+  private final CatalogPlugin sourceCatalog;\n+  private final Identifier sourceTableName;\n+  private final PartitionSpec sourcePartitionSpec;\n+\n+  // Destination Fields\n+  private final StagingTableCatalog destCatalog;\n+  private final Identifier destTableName;\n+\n+  // Optional Parameters for destination\n+  private Map<String, String> additionalProperties = Maps.newHashMap();\n+\n+  Spark3CreateAction(SparkSession spark, CatalogPlugin sourceCatalog, Identifier sourceTableName,\n+                       CatalogPlugin destCatalog,  Identifier destTableName) {\n+\n+    this.spark = spark;\n+    this.sourceCatalog = checkSourceCatalog(sourceCatalog);\n+    this.sourceTableName = sourceTableName;\n+    this.destCatalog = checkDestinationCatalog(destCatalog);\n+    this.destTableName = destTableName;\n+\n+    try {\n+      String sourceString = String.join(\".\", sourceTableName.namespace()) + \".\" + sourceTableName.name();\n+      sourcePartitionSpec = SparkSchemaUtil.specForTable(spark, sourceString);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTc3NzcyOA=="}, "originalCommit": {"oid": "09f329bc39e8a2a1b2b5f925c580a2177833510b"}, "originalPosition": 81}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2MTU4MTQwOnYy", "diffSide": "RIGHT", "path": "spark3/src/main/java/org/apache/iceberg/actions/Spark3CreateAction.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQwMTo1NjoyNFrOH-9U5A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQxNzo0NzoyOFrOH_bYDA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTc3ODUzMg==", "bodyText": "Why not use TableCatalog?", "url": "https://github.com/apache/iceberg/pull/1525#discussion_r535778532", "createdAt": "2020-12-04T01:56:24Z", "author": {"login": "rdblue"}, "path": "spark3/src/main/java/org/apache/iceberg/actions/Spark3CreateAction.java", "diffHunk": "@@ -0,0 +1,183 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.actions;\n+\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Set;\n+import org.apache.iceberg.PartitionSpec;\n+import org.apache.iceberg.Table;\n+import org.apache.iceberg.TableProperties;\n+import org.apache.iceberg.mapping.MappingUtil;\n+import org.apache.iceberg.mapping.NameMapping;\n+import org.apache.iceberg.mapping.NameMappingParser;\n+import org.apache.iceberg.relocated.com.google.common.collect.ImmutableMap;\n+import org.apache.iceberg.relocated.com.google.common.collect.ImmutableSet;\n+import org.apache.iceberg.relocated.com.google.common.collect.Maps;\n+import org.apache.iceberg.spark.SparkCatalog;\n+import org.apache.iceberg.spark.SparkSchemaUtil;\n+import org.apache.iceberg.spark.SparkSessionCatalog;\n+import org.apache.spark.sql.AnalysisException;\n+import org.apache.spark.sql.SparkSession;\n+import org.apache.spark.sql.catalyst.analysis.NoSuchTableException;\n+import org.apache.spark.sql.catalyst.catalog.CatalogTable;\n+import org.apache.spark.sql.catalyst.catalog.CatalogUtils;\n+import org.apache.spark.sql.connector.catalog.CatalogPlugin;\n+import org.apache.spark.sql.connector.catalog.Identifier;\n+import org.apache.spark.sql.connector.catalog.StagingTableCatalog;\n+import org.apache.spark.sql.connector.catalog.TableCatalog;\n+import org.apache.spark.sql.connector.catalog.V1Table;\n+import org.apache.spark.sql.connector.expressions.Transform;\n+\n+abstract class Spark3CreateAction implements CreateAction {\n+  private static final Set<String> ALLOWED_SOURCES = ImmutableSet.of(\"parquet\", \"avro\", \"orc\", \"hive\");\n+  protected static final String ICEBERG_METADATA_FOLDER = \"metadata\";\n+\n+  private final SparkSession spark;\n+\n+  // Source Fields\n+  private final V1Table sourceTable;\n+  private final CatalogTable sourceCatalogTable;\n+  private final String sourceTableLocation;\n+  private final CatalogPlugin sourceCatalog;\n+  private final Identifier sourceTableName;\n+  private final PartitionSpec sourcePartitionSpec;\n+\n+  // Destination Fields\n+  private final StagingTableCatalog destCatalog;\n+  private final Identifier destTableName;\n+\n+  // Optional Parameters for destination\n+  private Map<String, String> additionalProperties = Maps.newHashMap();\n+\n+  Spark3CreateAction(SparkSession spark, CatalogPlugin sourceCatalog, Identifier sourceTableName,\n+                       CatalogPlugin destCatalog,  Identifier destTableName) {\n+\n+    this.spark = spark;\n+    this.sourceCatalog = checkSourceCatalog(sourceCatalog);\n+    this.sourceTableName = sourceTableName;\n+    this.destCatalog = checkDestinationCatalog(destCatalog);\n+    this.destTableName = destTableName;\n+\n+    try {\n+      String sourceString = String.join(\".\", sourceTableName.namespace()) + \".\" + sourceTableName.name();\n+      sourcePartitionSpec = SparkSchemaUtil.specForTable(spark, sourceString);\n+    } catch (AnalysisException e) {\n+      throw new IllegalArgumentException(\"Cannot determining partitioning of \" + sourceTableName.toString(), e);\n+    }\n+\n+    try {\n+      this.sourceTable = (V1Table) ((TableCatalog) sourceCatalog).loadTable(sourceTableName);\n+      this.sourceCatalogTable = sourceTable.v1Table();\n+    } catch (NoSuchTableException e) {\n+      throw new IllegalArgumentException(String.format(\"Cannot not find source table %s\", sourceTableName), e);\n+    } catch (ClassCastException e) {\n+      throw new IllegalArgumentException(String.format(\"Cannot use a non-v1 table %s as a source\", sourceTableName), e);\n+    }\n+    validateSourceTable(sourceCatalogTable);\n+\n+    this.sourceTableLocation = CatalogUtils.URIToString(sourceCatalogTable.storage().locationUri().get());\n+  }\n+\n+  @Override\n+  public CreateAction setAll(Map<String, String> properties) {\n+    this.additionalProperties.putAll(properties);\n+    return this;\n+  }\n+\n+  @Override\n+  public CreateAction set(String key, String value) {\n+    this.additionalProperties.put(key, value);\n+    return this;\n+  }\n+\n+  protected SparkSession spark() {\n+    return spark;\n+  }\n+\n+  protected String sourceTableLocation() {\n+    return sourceTableLocation;\n+  }\n+\n+  protected CatalogTable v1SourceTable() {\n+    return sourceCatalogTable;\n+  }\n+\n+  protected CatalogPlugin sourceCatalog() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "09f329bc39e8a2a1b2b5f925c580a2177833510b"}, "originalPosition": 123}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjI1MDU1Ng==", "bodyText": "Sure we can do that", "url": "https://github.com/apache/iceberg/pull/1525#discussion_r536250556", "createdAt": "2020-12-04T17:14:51Z", "author": {"login": "RussellSpitzer"}, "path": "spark3/src/main/java/org/apache/iceberg/actions/Spark3CreateAction.java", "diffHunk": "@@ -0,0 +1,183 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.actions;\n+\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Set;\n+import org.apache.iceberg.PartitionSpec;\n+import org.apache.iceberg.Table;\n+import org.apache.iceberg.TableProperties;\n+import org.apache.iceberg.mapping.MappingUtil;\n+import org.apache.iceberg.mapping.NameMapping;\n+import org.apache.iceberg.mapping.NameMappingParser;\n+import org.apache.iceberg.relocated.com.google.common.collect.ImmutableMap;\n+import org.apache.iceberg.relocated.com.google.common.collect.ImmutableSet;\n+import org.apache.iceberg.relocated.com.google.common.collect.Maps;\n+import org.apache.iceberg.spark.SparkCatalog;\n+import org.apache.iceberg.spark.SparkSchemaUtil;\n+import org.apache.iceberg.spark.SparkSessionCatalog;\n+import org.apache.spark.sql.AnalysisException;\n+import org.apache.spark.sql.SparkSession;\n+import org.apache.spark.sql.catalyst.analysis.NoSuchTableException;\n+import org.apache.spark.sql.catalyst.catalog.CatalogTable;\n+import org.apache.spark.sql.catalyst.catalog.CatalogUtils;\n+import org.apache.spark.sql.connector.catalog.CatalogPlugin;\n+import org.apache.spark.sql.connector.catalog.Identifier;\n+import org.apache.spark.sql.connector.catalog.StagingTableCatalog;\n+import org.apache.spark.sql.connector.catalog.TableCatalog;\n+import org.apache.spark.sql.connector.catalog.V1Table;\n+import org.apache.spark.sql.connector.expressions.Transform;\n+\n+abstract class Spark3CreateAction implements CreateAction {\n+  private static final Set<String> ALLOWED_SOURCES = ImmutableSet.of(\"parquet\", \"avro\", \"orc\", \"hive\");\n+  protected static final String ICEBERG_METADATA_FOLDER = \"metadata\";\n+\n+  private final SparkSession spark;\n+\n+  // Source Fields\n+  private final V1Table sourceTable;\n+  private final CatalogTable sourceCatalogTable;\n+  private final String sourceTableLocation;\n+  private final CatalogPlugin sourceCatalog;\n+  private final Identifier sourceTableName;\n+  private final PartitionSpec sourcePartitionSpec;\n+\n+  // Destination Fields\n+  private final StagingTableCatalog destCatalog;\n+  private final Identifier destTableName;\n+\n+  // Optional Parameters for destination\n+  private Map<String, String> additionalProperties = Maps.newHashMap();\n+\n+  Spark3CreateAction(SparkSession spark, CatalogPlugin sourceCatalog, Identifier sourceTableName,\n+                       CatalogPlugin destCatalog,  Identifier destTableName) {\n+\n+    this.spark = spark;\n+    this.sourceCatalog = checkSourceCatalog(sourceCatalog);\n+    this.sourceTableName = sourceTableName;\n+    this.destCatalog = checkDestinationCatalog(destCatalog);\n+    this.destTableName = destTableName;\n+\n+    try {\n+      String sourceString = String.join(\".\", sourceTableName.namespace()) + \".\" + sourceTableName.name();\n+      sourcePartitionSpec = SparkSchemaUtil.specForTable(spark, sourceString);\n+    } catch (AnalysisException e) {\n+      throw new IllegalArgumentException(\"Cannot determining partitioning of \" + sourceTableName.toString(), e);\n+    }\n+\n+    try {\n+      this.sourceTable = (V1Table) ((TableCatalog) sourceCatalog).loadTable(sourceTableName);\n+      this.sourceCatalogTable = sourceTable.v1Table();\n+    } catch (NoSuchTableException e) {\n+      throw new IllegalArgumentException(String.format(\"Cannot not find source table %s\", sourceTableName), e);\n+    } catch (ClassCastException e) {\n+      throw new IllegalArgumentException(String.format(\"Cannot use a non-v1 table %s as a source\", sourceTableName), e);\n+    }\n+    validateSourceTable(sourceCatalogTable);\n+\n+    this.sourceTableLocation = CatalogUtils.URIToString(sourceCatalogTable.storage().locationUri().get());\n+  }\n+\n+  @Override\n+  public CreateAction setAll(Map<String, String> properties) {\n+    this.additionalProperties.putAll(properties);\n+    return this;\n+  }\n+\n+  @Override\n+  public CreateAction set(String key, String value) {\n+    this.additionalProperties.put(key, value);\n+    return this;\n+  }\n+\n+  protected SparkSession spark() {\n+    return spark;\n+  }\n+\n+  protected String sourceTableLocation() {\n+    return sourceTableLocation;\n+  }\n+\n+  protected CatalogTable v1SourceTable() {\n+    return sourceCatalogTable;\n+  }\n+\n+  protected CatalogPlugin sourceCatalog() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTc3ODUzMg=="}, "originalCommit": {"oid": "09f329bc39e8a2a1b2b5f925c580a2177833510b"}, "originalPosition": 123}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjI3MDg2MA==", "bodyText": "+1", "url": "https://github.com/apache/iceberg/pull/1525#discussion_r536270860", "createdAt": "2020-12-04T17:47:28Z", "author": {"login": "aokolnychyi"}, "path": "spark3/src/main/java/org/apache/iceberg/actions/Spark3CreateAction.java", "diffHunk": "@@ -0,0 +1,183 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.actions;\n+\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Set;\n+import org.apache.iceberg.PartitionSpec;\n+import org.apache.iceberg.Table;\n+import org.apache.iceberg.TableProperties;\n+import org.apache.iceberg.mapping.MappingUtil;\n+import org.apache.iceberg.mapping.NameMapping;\n+import org.apache.iceberg.mapping.NameMappingParser;\n+import org.apache.iceberg.relocated.com.google.common.collect.ImmutableMap;\n+import org.apache.iceberg.relocated.com.google.common.collect.ImmutableSet;\n+import org.apache.iceberg.relocated.com.google.common.collect.Maps;\n+import org.apache.iceberg.spark.SparkCatalog;\n+import org.apache.iceberg.spark.SparkSchemaUtil;\n+import org.apache.iceberg.spark.SparkSessionCatalog;\n+import org.apache.spark.sql.AnalysisException;\n+import org.apache.spark.sql.SparkSession;\n+import org.apache.spark.sql.catalyst.analysis.NoSuchTableException;\n+import org.apache.spark.sql.catalyst.catalog.CatalogTable;\n+import org.apache.spark.sql.catalyst.catalog.CatalogUtils;\n+import org.apache.spark.sql.connector.catalog.CatalogPlugin;\n+import org.apache.spark.sql.connector.catalog.Identifier;\n+import org.apache.spark.sql.connector.catalog.StagingTableCatalog;\n+import org.apache.spark.sql.connector.catalog.TableCatalog;\n+import org.apache.spark.sql.connector.catalog.V1Table;\n+import org.apache.spark.sql.connector.expressions.Transform;\n+\n+abstract class Spark3CreateAction implements CreateAction {\n+  private static final Set<String> ALLOWED_SOURCES = ImmutableSet.of(\"parquet\", \"avro\", \"orc\", \"hive\");\n+  protected static final String ICEBERG_METADATA_FOLDER = \"metadata\";\n+\n+  private final SparkSession spark;\n+\n+  // Source Fields\n+  private final V1Table sourceTable;\n+  private final CatalogTable sourceCatalogTable;\n+  private final String sourceTableLocation;\n+  private final CatalogPlugin sourceCatalog;\n+  private final Identifier sourceTableName;\n+  private final PartitionSpec sourcePartitionSpec;\n+\n+  // Destination Fields\n+  private final StagingTableCatalog destCatalog;\n+  private final Identifier destTableName;\n+\n+  // Optional Parameters for destination\n+  private Map<String, String> additionalProperties = Maps.newHashMap();\n+\n+  Spark3CreateAction(SparkSession spark, CatalogPlugin sourceCatalog, Identifier sourceTableName,\n+                       CatalogPlugin destCatalog,  Identifier destTableName) {\n+\n+    this.spark = spark;\n+    this.sourceCatalog = checkSourceCatalog(sourceCatalog);\n+    this.sourceTableName = sourceTableName;\n+    this.destCatalog = checkDestinationCatalog(destCatalog);\n+    this.destTableName = destTableName;\n+\n+    try {\n+      String sourceString = String.join(\".\", sourceTableName.namespace()) + \".\" + sourceTableName.name();\n+      sourcePartitionSpec = SparkSchemaUtil.specForTable(spark, sourceString);\n+    } catch (AnalysisException e) {\n+      throw new IllegalArgumentException(\"Cannot determining partitioning of \" + sourceTableName.toString(), e);\n+    }\n+\n+    try {\n+      this.sourceTable = (V1Table) ((TableCatalog) sourceCatalog).loadTable(sourceTableName);\n+      this.sourceCatalogTable = sourceTable.v1Table();\n+    } catch (NoSuchTableException e) {\n+      throw new IllegalArgumentException(String.format(\"Cannot not find source table %s\", sourceTableName), e);\n+    } catch (ClassCastException e) {\n+      throw new IllegalArgumentException(String.format(\"Cannot use a non-v1 table %s as a source\", sourceTableName), e);\n+    }\n+    validateSourceTable(sourceCatalogTable);\n+\n+    this.sourceTableLocation = CatalogUtils.URIToString(sourceCatalogTable.storage().locationUri().get());\n+  }\n+\n+  @Override\n+  public CreateAction setAll(Map<String, String> properties) {\n+    this.additionalProperties.putAll(properties);\n+    return this;\n+  }\n+\n+  @Override\n+  public CreateAction set(String key, String value) {\n+    this.additionalProperties.put(key, value);\n+    return this;\n+  }\n+\n+  protected SparkSession spark() {\n+    return spark;\n+  }\n+\n+  protected String sourceTableLocation() {\n+    return sourceTableLocation;\n+  }\n+\n+  protected CatalogTable v1SourceTable() {\n+    return sourceCatalogTable;\n+  }\n+\n+  protected CatalogPlugin sourceCatalog() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTc3ODUzMg=="}, "originalCommit": {"oid": "09f329bc39e8a2a1b2b5f925c580a2177833510b"}, "originalPosition": 123}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2MTU4NDg4OnYy", "diffSide": "RIGHT", "path": "spark3/src/main/java/org/apache/iceberg/actions/Spark3CreateAction.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQwMTo1NzozOFrOH-9WvA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxMzozNjoyN1rOIBb5YQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTc3OTAwNA==", "bodyText": "How is hive handled? Do we just assume that the partitions are a supported format?", "url": "https://github.com/apache/iceberg/pull/1525#discussion_r535779004", "createdAt": "2020-12-04T01:57:38Z", "author": {"login": "rdblue"}, "path": "spark3/src/main/java/org/apache/iceberg/actions/Spark3CreateAction.java", "diffHunk": "@@ -0,0 +1,183 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.actions;\n+\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Set;\n+import org.apache.iceberg.PartitionSpec;\n+import org.apache.iceberg.Table;\n+import org.apache.iceberg.TableProperties;\n+import org.apache.iceberg.mapping.MappingUtil;\n+import org.apache.iceberg.mapping.NameMapping;\n+import org.apache.iceberg.mapping.NameMappingParser;\n+import org.apache.iceberg.relocated.com.google.common.collect.ImmutableMap;\n+import org.apache.iceberg.relocated.com.google.common.collect.ImmutableSet;\n+import org.apache.iceberg.relocated.com.google.common.collect.Maps;\n+import org.apache.iceberg.spark.SparkCatalog;\n+import org.apache.iceberg.spark.SparkSchemaUtil;\n+import org.apache.iceberg.spark.SparkSessionCatalog;\n+import org.apache.spark.sql.AnalysisException;\n+import org.apache.spark.sql.SparkSession;\n+import org.apache.spark.sql.catalyst.analysis.NoSuchTableException;\n+import org.apache.spark.sql.catalyst.catalog.CatalogTable;\n+import org.apache.spark.sql.catalyst.catalog.CatalogUtils;\n+import org.apache.spark.sql.connector.catalog.CatalogPlugin;\n+import org.apache.spark.sql.connector.catalog.Identifier;\n+import org.apache.spark.sql.connector.catalog.StagingTableCatalog;\n+import org.apache.spark.sql.connector.catalog.TableCatalog;\n+import org.apache.spark.sql.connector.catalog.V1Table;\n+import org.apache.spark.sql.connector.expressions.Transform;\n+\n+abstract class Spark3CreateAction implements CreateAction {\n+  private static final Set<String> ALLOWED_SOURCES = ImmutableSet.of(\"parquet\", \"avro\", \"orc\", \"hive\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "09f329bc39e8a2a1b2b5f925c580a2177833510b"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjI2OTc2Mw==", "bodyText": "I think our SparkUtil handles it while getting partitions.\n    Preconditions.checkArgument(locationUri.nonEmpty(), \"Partition URI should be defined\");\n    Preconditions.checkArgument(serde.nonEmpty() || table.provider().nonEmpty(),\n        \"Partition format should be defined\");\n\n    String uri = Util.uriToString(locationUri.get());\n    String format = serde.nonEmpty() ? serde.get() : table.provider().get();", "url": "https://github.com/apache/iceberg/pull/1525#discussion_r536269763", "createdAt": "2020-12-04T17:45:46Z", "author": {"login": "aokolnychyi"}, "path": "spark3/src/main/java/org/apache/iceberg/actions/Spark3CreateAction.java", "diffHunk": "@@ -0,0 +1,183 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.actions;\n+\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Set;\n+import org.apache.iceberg.PartitionSpec;\n+import org.apache.iceberg.Table;\n+import org.apache.iceberg.TableProperties;\n+import org.apache.iceberg.mapping.MappingUtil;\n+import org.apache.iceberg.mapping.NameMapping;\n+import org.apache.iceberg.mapping.NameMappingParser;\n+import org.apache.iceberg.relocated.com.google.common.collect.ImmutableMap;\n+import org.apache.iceberg.relocated.com.google.common.collect.ImmutableSet;\n+import org.apache.iceberg.relocated.com.google.common.collect.Maps;\n+import org.apache.iceberg.spark.SparkCatalog;\n+import org.apache.iceberg.spark.SparkSchemaUtil;\n+import org.apache.iceberg.spark.SparkSessionCatalog;\n+import org.apache.spark.sql.AnalysisException;\n+import org.apache.spark.sql.SparkSession;\n+import org.apache.spark.sql.catalyst.analysis.NoSuchTableException;\n+import org.apache.spark.sql.catalyst.catalog.CatalogTable;\n+import org.apache.spark.sql.catalyst.catalog.CatalogUtils;\n+import org.apache.spark.sql.connector.catalog.CatalogPlugin;\n+import org.apache.spark.sql.connector.catalog.Identifier;\n+import org.apache.spark.sql.connector.catalog.StagingTableCatalog;\n+import org.apache.spark.sql.connector.catalog.TableCatalog;\n+import org.apache.spark.sql.connector.catalog.V1Table;\n+import org.apache.spark.sql.connector.expressions.Transform;\n+\n+abstract class Spark3CreateAction implements CreateAction {\n+  private static final Set<String> ALLOWED_SOURCES = ImmutableSet.of(\"parquet\", \"avro\", \"orc\", \"hive\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTc3OTAwNA=="}, "originalCommit": {"oid": "09f329bc39e8a2a1b2b5f925c580a2177833510b"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjI3MDA3Mw==", "bodyText": "@RussellSpitzer, do we have a test for this?\nWe used to have one internally.\n        withSQLConf(\n          \"hive.exec.dynamic.partition\" -> \"true\",\n          \"hive.exec.dynamic.partition.mode\" -> \"nonstrict\") {\n\n          sql(\n            s\"\"\"CREATE TABLE t (\n               |  id integer,\n               |  name string\n               |)\n               |PARTITIONED BY (dept string, subdept string)\n               |STORED AS PARQUET\n               |LOCATION '$dir'\"\"\".stripMargin)", "url": "https://github.com/apache/iceberg/pull/1525#discussion_r536270073", "createdAt": "2020-12-04T17:46:19Z", "author": {"login": "aokolnychyi"}, "path": "spark3/src/main/java/org/apache/iceberg/actions/Spark3CreateAction.java", "diffHunk": "@@ -0,0 +1,183 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.actions;\n+\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Set;\n+import org.apache.iceberg.PartitionSpec;\n+import org.apache.iceberg.Table;\n+import org.apache.iceberg.TableProperties;\n+import org.apache.iceberg.mapping.MappingUtil;\n+import org.apache.iceberg.mapping.NameMapping;\n+import org.apache.iceberg.mapping.NameMappingParser;\n+import org.apache.iceberg.relocated.com.google.common.collect.ImmutableMap;\n+import org.apache.iceberg.relocated.com.google.common.collect.ImmutableSet;\n+import org.apache.iceberg.relocated.com.google.common.collect.Maps;\n+import org.apache.iceberg.spark.SparkCatalog;\n+import org.apache.iceberg.spark.SparkSchemaUtil;\n+import org.apache.iceberg.spark.SparkSessionCatalog;\n+import org.apache.spark.sql.AnalysisException;\n+import org.apache.spark.sql.SparkSession;\n+import org.apache.spark.sql.catalyst.analysis.NoSuchTableException;\n+import org.apache.spark.sql.catalyst.catalog.CatalogTable;\n+import org.apache.spark.sql.catalyst.catalog.CatalogUtils;\n+import org.apache.spark.sql.connector.catalog.CatalogPlugin;\n+import org.apache.spark.sql.connector.catalog.Identifier;\n+import org.apache.spark.sql.connector.catalog.StagingTableCatalog;\n+import org.apache.spark.sql.connector.catalog.TableCatalog;\n+import org.apache.spark.sql.connector.catalog.V1Table;\n+import org.apache.spark.sql.connector.expressions.Transform;\n+\n+abstract class Spark3CreateAction implements CreateAction {\n+  private static final Set<String> ALLOWED_SOURCES = ImmutableSet.of(\"parquet\", \"avro\", \"orc\", \"hive\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTc3OTAwNA=="}, "originalCommit": {"oid": "09f329bc39e8a2a1b2b5f925c580a2177833510b"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODM3NjU0NQ==", "bodyText": "I see a test for this one. It looks correct to me.", "url": "https://github.com/apache/iceberg/pull/1525#discussion_r538376545", "createdAt": "2020-12-08T13:36:27Z", "author": {"login": "aokolnychyi"}, "path": "spark3/src/main/java/org/apache/iceberg/actions/Spark3CreateAction.java", "diffHunk": "@@ -0,0 +1,183 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.actions;\n+\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Set;\n+import org.apache.iceberg.PartitionSpec;\n+import org.apache.iceberg.Table;\n+import org.apache.iceberg.TableProperties;\n+import org.apache.iceberg.mapping.MappingUtil;\n+import org.apache.iceberg.mapping.NameMapping;\n+import org.apache.iceberg.mapping.NameMappingParser;\n+import org.apache.iceberg.relocated.com.google.common.collect.ImmutableMap;\n+import org.apache.iceberg.relocated.com.google.common.collect.ImmutableSet;\n+import org.apache.iceberg.relocated.com.google.common.collect.Maps;\n+import org.apache.iceberg.spark.SparkCatalog;\n+import org.apache.iceberg.spark.SparkSchemaUtil;\n+import org.apache.iceberg.spark.SparkSessionCatalog;\n+import org.apache.spark.sql.AnalysisException;\n+import org.apache.spark.sql.SparkSession;\n+import org.apache.spark.sql.catalyst.analysis.NoSuchTableException;\n+import org.apache.spark.sql.catalyst.catalog.CatalogTable;\n+import org.apache.spark.sql.catalyst.catalog.CatalogUtils;\n+import org.apache.spark.sql.connector.catalog.CatalogPlugin;\n+import org.apache.spark.sql.connector.catalog.Identifier;\n+import org.apache.spark.sql.connector.catalog.StagingTableCatalog;\n+import org.apache.spark.sql.connector.catalog.TableCatalog;\n+import org.apache.spark.sql.connector.catalog.V1Table;\n+import org.apache.spark.sql.connector.expressions.Transform;\n+\n+abstract class Spark3CreateAction implements CreateAction {\n+  private static final Set<String> ALLOWED_SOURCES = ImmutableSet.of(\"parquet\", \"avro\", \"orc\", \"hive\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTc3OTAwNA=="}, "originalCommit": {"oid": "09f329bc39e8a2a1b2b5f925c580a2177833510b"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2MTU5Mjg1OnYy", "diffSide": "RIGHT", "path": "spark3/src/main/java/org/apache/iceberg/actions/Spark3MigrateAction.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQwMjowMDo1MFrOH-9bAw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQxNzoxODo0MVrOH_aRcg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTc4MDA5OQ==", "bodyText": "It would probably be better to use a mutable map because this one will reject duplicate properties instead of overwriting.\nYou can also use ImmutableMap.builder() instead of supplying the key and value types.", "url": "https://github.com/apache/iceberg/pull/1525#discussion_r535780099", "createdAt": "2020-12-04T02:00:50Z", "author": {"login": "rdblue"}, "path": "spark3/src/main/java/org/apache/iceberg/actions/Spark3MigrateAction.java", "diffHunk": "@@ -0,0 +1,144 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.actions;\n+\n+import java.util.Map;\n+import org.apache.iceberg.Snapshot;\n+import org.apache.iceberg.SnapshotSummary;\n+import org.apache.iceberg.Table;\n+import org.apache.iceberg.TableProperties;\n+import org.apache.iceberg.relocated.com.google.common.collect.ImmutableMap;\n+import org.apache.iceberg.spark.SparkSessionCatalog;\n+import org.apache.iceberg.spark.SparkTableUtil;\n+import org.apache.iceberg.spark.source.SparkTable;\n+import org.apache.spark.sql.SparkSession;\n+import org.apache.spark.sql.catalyst.TableIdentifier;\n+import org.apache.spark.sql.catalyst.analysis.NoSuchTableException;\n+import org.apache.spark.sql.catalyst.analysis.TableAlreadyExistsException;\n+import org.apache.spark.sql.connector.catalog.CatalogPlugin;\n+import org.apache.spark.sql.connector.catalog.Identifier;\n+import org.apache.spark.sql.connector.catalog.StagedTable;\n+import org.apache.spark.sql.connector.catalog.TableCatalog;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import scala.Some;\n+import scala.collection.JavaConverters;\n+\n+/**\n+ * Takes a Spark table in the sourceCatalog and attempts to transform it into an Iceberg\n+ * Table in the same location with the same identifier. Once complete the identifier which\n+ * previously referred to a non-iceberg table will refer to the newly migrated iceberg\n+ * table.\n+ */\n+class Spark3MigrateAction extends Spark3CreateAction {\n+  private static final Logger LOG = LoggerFactory.getLogger(Spark3MigrateAction.class);\n+  private static final String BACKUP_SUFFIX = \"_BACKUP_\";\n+\n+  Spark3MigrateAction(SparkSession spark, CatalogPlugin sourceCatalog, Identifier sourceTableName) {\n+    super(spark, sourceCatalog, sourceTableName, sourceCatalog, sourceTableName);\n+  }\n+\n+  @Override\n+  public Long execute() {\n+    Table icebergTable;\n+\n+    // Move source table to a new name, halting all modifications and allowing us to stage\n+    // the creation of a new Iceberg table in its place\n+    String backupName = sourceTableName().name() + BACKUP_SUFFIX;\n+    Identifier backupIdentifier = Identifier.of(sourceTableName().namespace(), backupName);\n+    try {\n+      destCatalog().renameTable(sourceTableName(), backupIdentifier);\n+    } catch (NoSuchTableException e) {\n+      throw new IllegalArgumentException(\"Cannot find table to migrate\", e);\n+    } catch (TableAlreadyExistsException e) {\n+      throw new IllegalArgumentException(\"Cannot rename migration source to backup name\", e);\n+    }\n+\n+    StagedTable stagedTable = null;\n+    try {\n+      Map<String, String> newTableProperties = new ImmutableMap.Builder<String, String>()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "09f329bc39e8a2a1b2b5f925c580a2177833510b"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjI1Mjc4Ng==", "bodyText": "Switched to mutable map", "url": "https://github.com/apache/iceberg/pull/1525#discussion_r536252786", "createdAt": "2020-12-04T17:18:41Z", "author": {"login": "RussellSpitzer"}, "path": "spark3/src/main/java/org/apache/iceberg/actions/Spark3MigrateAction.java", "diffHunk": "@@ -0,0 +1,144 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.actions;\n+\n+import java.util.Map;\n+import org.apache.iceberg.Snapshot;\n+import org.apache.iceberg.SnapshotSummary;\n+import org.apache.iceberg.Table;\n+import org.apache.iceberg.TableProperties;\n+import org.apache.iceberg.relocated.com.google.common.collect.ImmutableMap;\n+import org.apache.iceberg.spark.SparkSessionCatalog;\n+import org.apache.iceberg.spark.SparkTableUtil;\n+import org.apache.iceberg.spark.source.SparkTable;\n+import org.apache.spark.sql.SparkSession;\n+import org.apache.spark.sql.catalyst.TableIdentifier;\n+import org.apache.spark.sql.catalyst.analysis.NoSuchTableException;\n+import org.apache.spark.sql.catalyst.analysis.TableAlreadyExistsException;\n+import org.apache.spark.sql.connector.catalog.CatalogPlugin;\n+import org.apache.spark.sql.connector.catalog.Identifier;\n+import org.apache.spark.sql.connector.catalog.StagedTable;\n+import org.apache.spark.sql.connector.catalog.TableCatalog;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import scala.Some;\n+import scala.collection.JavaConverters;\n+\n+/**\n+ * Takes a Spark table in the sourceCatalog and attempts to transform it into an Iceberg\n+ * Table in the same location with the same identifier. Once complete the identifier which\n+ * previously referred to a non-iceberg table will refer to the newly migrated iceberg\n+ * table.\n+ */\n+class Spark3MigrateAction extends Spark3CreateAction {\n+  private static final Logger LOG = LoggerFactory.getLogger(Spark3MigrateAction.class);\n+  private static final String BACKUP_SUFFIX = \"_BACKUP_\";\n+\n+  Spark3MigrateAction(SparkSession spark, CatalogPlugin sourceCatalog, Identifier sourceTableName) {\n+    super(spark, sourceCatalog, sourceTableName, sourceCatalog, sourceTableName);\n+  }\n+\n+  @Override\n+  public Long execute() {\n+    Table icebergTable;\n+\n+    // Move source table to a new name, halting all modifications and allowing us to stage\n+    // the creation of a new Iceberg table in its place\n+    String backupName = sourceTableName().name() + BACKUP_SUFFIX;\n+    Identifier backupIdentifier = Identifier.of(sourceTableName().namespace(), backupName);\n+    try {\n+      destCatalog().renameTable(sourceTableName(), backupIdentifier);\n+    } catch (NoSuchTableException e) {\n+      throw new IllegalArgumentException(\"Cannot find table to migrate\", e);\n+    } catch (TableAlreadyExistsException e) {\n+      throw new IllegalArgumentException(\"Cannot rename migration source to backup name\", e);\n+    }\n+\n+    StagedTable stagedTable = null;\n+    try {\n+      Map<String, String> newTableProperties = new ImmutableMap.Builder<String, String>()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTc4MDA5OQ=="}, "originalCommit": {"oid": "09f329bc39e8a2a1b2b5f925c580a2177833510b"}, "originalPosition": 76}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2MTU5NDUxOnYy", "diffSide": "RIGHT", "path": "spark3/src/main/java/org/apache/iceberg/actions/Spark3MigrateAction.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQwMjowMToyN1rOH-9b5A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQxNzo0NzoyNFrOH_bX6A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTc4MDMyNA==", "bodyText": "Can't this use stagedTable properties instead?", "url": "https://github.com/apache/iceberg/pull/1525#discussion_r535780324", "createdAt": "2020-12-04T02:01:27Z", "author": {"login": "rdblue"}, "path": "spark3/src/main/java/org/apache/iceberg/actions/Spark3MigrateAction.java", "diffHunk": "@@ -0,0 +1,144 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.actions;\n+\n+import java.util.Map;\n+import org.apache.iceberg.Snapshot;\n+import org.apache.iceberg.SnapshotSummary;\n+import org.apache.iceberg.Table;\n+import org.apache.iceberg.TableProperties;\n+import org.apache.iceberg.relocated.com.google.common.collect.ImmutableMap;\n+import org.apache.iceberg.spark.SparkSessionCatalog;\n+import org.apache.iceberg.spark.SparkTableUtil;\n+import org.apache.iceberg.spark.source.SparkTable;\n+import org.apache.spark.sql.SparkSession;\n+import org.apache.spark.sql.catalyst.TableIdentifier;\n+import org.apache.spark.sql.catalyst.analysis.NoSuchTableException;\n+import org.apache.spark.sql.catalyst.analysis.TableAlreadyExistsException;\n+import org.apache.spark.sql.connector.catalog.CatalogPlugin;\n+import org.apache.spark.sql.connector.catalog.Identifier;\n+import org.apache.spark.sql.connector.catalog.StagedTable;\n+import org.apache.spark.sql.connector.catalog.TableCatalog;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import scala.Some;\n+import scala.collection.JavaConverters;\n+\n+/**\n+ * Takes a Spark table in the sourceCatalog and attempts to transform it into an Iceberg\n+ * Table in the same location with the same identifier. Once complete the identifier which\n+ * previously referred to a non-iceberg table will refer to the newly migrated iceberg\n+ * table.\n+ */\n+class Spark3MigrateAction extends Spark3CreateAction {\n+  private static final Logger LOG = LoggerFactory.getLogger(Spark3MigrateAction.class);\n+  private static final String BACKUP_SUFFIX = \"_BACKUP_\";\n+\n+  Spark3MigrateAction(SparkSession spark, CatalogPlugin sourceCatalog, Identifier sourceTableName) {\n+    super(spark, sourceCatalog, sourceTableName, sourceCatalog, sourceTableName);\n+  }\n+\n+  @Override\n+  public Long execute() {\n+    Table icebergTable;\n+\n+    // Move source table to a new name, halting all modifications and allowing us to stage\n+    // the creation of a new Iceberg table in its place\n+    String backupName = sourceTableName().name() + BACKUP_SUFFIX;\n+    Identifier backupIdentifier = Identifier.of(sourceTableName().namespace(), backupName);\n+    try {\n+      destCatalog().renameTable(sourceTableName(), backupIdentifier);\n+    } catch (NoSuchTableException e) {\n+      throw new IllegalArgumentException(\"Cannot find table to migrate\", e);\n+    } catch (TableAlreadyExistsException e) {\n+      throw new IllegalArgumentException(\"Cannot rename migration source to backup name\", e);\n+    }\n+\n+    StagedTable stagedTable = null;\n+    try {\n+      Map<String, String> newTableProperties = new ImmutableMap.Builder<String, String>()\n+          .put(TableCatalog.PROP_PROVIDER, \"iceberg\")\n+          .putAll(JavaConverters.mapAsJavaMapConverter(v1SourceTable().properties()).asJava())\n+          .putAll(tableLocationProperties(sourceTableLocation()))\n+          .putAll(additionalProperties())\n+          .build();\n+\n+      stagedTable = destCatalog().stageCreate(Identifier.of(\n+          destTableName().namespace(),\n+          destTableName().name()),\n+          v1SourceTable().schema(),\n+          sourcePartitionSpec(),\n+          newTableProperties);\n+\n+      icebergTable = ((SparkTable) stagedTable).table();\n+\n+      if (!icebergTable.properties().containsKey(TableProperties.DEFAULT_NAME_MAPPING)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "09f329bc39e8a2a1b2b5f925c580a2177833510b"}, "originalPosition": 92}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjI3MDgyNA==", "bodyText": "Sure will change", "url": "https://github.com/apache/iceberg/pull/1525#discussion_r536270824", "createdAt": "2020-12-04T17:47:24Z", "author": {"login": "RussellSpitzer"}, "path": "spark3/src/main/java/org/apache/iceberg/actions/Spark3MigrateAction.java", "diffHunk": "@@ -0,0 +1,144 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.actions;\n+\n+import java.util.Map;\n+import org.apache.iceberg.Snapshot;\n+import org.apache.iceberg.SnapshotSummary;\n+import org.apache.iceberg.Table;\n+import org.apache.iceberg.TableProperties;\n+import org.apache.iceberg.relocated.com.google.common.collect.ImmutableMap;\n+import org.apache.iceberg.spark.SparkSessionCatalog;\n+import org.apache.iceberg.spark.SparkTableUtil;\n+import org.apache.iceberg.spark.source.SparkTable;\n+import org.apache.spark.sql.SparkSession;\n+import org.apache.spark.sql.catalyst.TableIdentifier;\n+import org.apache.spark.sql.catalyst.analysis.NoSuchTableException;\n+import org.apache.spark.sql.catalyst.analysis.TableAlreadyExistsException;\n+import org.apache.spark.sql.connector.catalog.CatalogPlugin;\n+import org.apache.spark.sql.connector.catalog.Identifier;\n+import org.apache.spark.sql.connector.catalog.StagedTable;\n+import org.apache.spark.sql.connector.catalog.TableCatalog;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import scala.Some;\n+import scala.collection.JavaConverters;\n+\n+/**\n+ * Takes a Spark table in the sourceCatalog and attempts to transform it into an Iceberg\n+ * Table in the same location with the same identifier. Once complete the identifier which\n+ * previously referred to a non-iceberg table will refer to the newly migrated iceberg\n+ * table.\n+ */\n+class Spark3MigrateAction extends Spark3CreateAction {\n+  private static final Logger LOG = LoggerFactory.getLogger(Spark3MigrateAction.class);\n+  private static final String BACKUP_SUFFIX = \"_BACKUP_\";\n+\n+  Spark3MigrateAction(SparkSession spark, CatalogPlugin sourceCatalog, Identifier sourceTableName) {\n+    super(spark, sourceCatalog, sourceTableName, sourceCatalog, sourceTableName);\n+  }\n+\n+  @Override\n+  public Long execute() {\n+    Table icebergTable;\n+\n+    // Move source table to a new name, halting all modifications and allowing us to stage\n+    // the creation of a new Iceberg table in its place\n+    String backupName = sourceTableName().name() + BACKUP_SUFFIX;\n+    Identifier backupIdentifier = Identifier.of(sourceTableName().namespace(), backupName);\n+    try {\n+      destCatalog().renameTable(sourceTableName(), backupIdentifier);\n+    } catch (NoSuchTableException e) {\n+      throw new IllegalArgumentException(\"Cannot find table to migrate\", e);\n+    } catch (TableAlreadyExistsException e) {\n+      throw new IllegalArgumentException(\"Cannot rename migration source to backup name\", e);\n+    }\n+\n+    StagedTable stagedTable = null;\n+    try {\n+      Map<String, String> newTableProperties = new ImmutableMap.Builder<String, String>()\n+          .put(TableCatalog.PROP_PROVIDER, \"iceberg\")\n+          .putAll(JavaConverters.mapAsJavaMapConverter(v1SourceTable().properties()).asJava())\n+          .putAll(tableLocationProperties(sourceTableLocation()))\n+          .putAll(additionalProperties())\n+          .build();\n+\n+      stagedTable = destCatalog().stageCreate(Identifier.of(\n+          destTableName().namespace(),\n+          destTableName().name()),\n+          v1SourceTable().schema(),\n+          sourcePartitionSpec(),\n+          newTableProperties);\n+\n+      icebergTable = ((SparkTable) stagedTable).table();\n+\n+      if (!icebergTable.properties().containsKey(TableProperties.DEFAULT_NAME_MAPPING)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTc4MDMyNA=="}, "originalCommit": {"oid": "09f329bc39e8a2a1b2b5f925c580a2177833510b"}, "originalPosition": 92}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2MTU5NTcyOnYy", "diffSide": "RIGHT", "path": "spark3/src/main/java/org/apache/iceberg/actions/Spark3MigrateAction.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQwMjowMTo1MlrOH-9ckA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQxNzo1MzoxNVrOH_blUQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTc4MDQ5Ng==", "bodyText": "Since we know the properties are in the table, should we look up this location from properties?", "url": "https://github.com/apache/iceberg/pull/1525#discussion_r535780496", "createdAt": "2020-12-04T02:01:52Z", "author": {"login": "rdblue"}, "path": "spark3/src/main/java/org/apache/iceberg/actions/Spark3MigrateAction.java", "diffHunk": "@@ -0,0 +1,144 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.actions;\n+\n+import java.util.Map;\n+import org.apache.iceberg.Snapshot;\n+import org.apache.iceberg.SnapshotSummary;\n+import org.apache.iceberg.Table;\n+import org.apache.iceberg.TableProperties;\n+import org.apache.iceberg.relocated.com.google.common.collect.ImmutableMap;\n+import org.apache.iceberg.spark.SparkSessionCatalog;\n+import org.apache.iceberg.spark.SparkTableUtil;\n+import org.apache.iceberg.spark.source.SparkTable;\n+import org.apache.spark.sql.SparkSession;\n+import org.apache.spark.sql.catalyst.TableIdentifier;\n+import org.apache.spark.sql.catalyst.analysis.NoSuchTableException;\n+import org.apache.spark.sql.catalyst.analysis.TableAlreadyExistsException;\n+import org.apache.spark.sql.connector.catalog.CatalogPlugin;\n+import org.apache.spark.sql.connector.catalog.Identifier;\n+import org.apache.spark.sql.connector.catalog.StagedTable;\n+import org.apache.spark.sql.connector.catalog.TableCatalog;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import scala.Some;\n+import scala.collection.JavaConverters;\n+\n+/**\n+ * Takes a Spark table in the sourceCatalog and attempts to transform it into an Iceberg\n+ * Table in the same location with the same identifier. Once complete the identifier which\n+ * previously referred to a non-iceberg table will refer to the newly migrated iceberg\n+ * table.\n+ */\n+class Spark3MigrateAction extends Spark3CreateAction {\n+  private static final Logger LOG = LoggerFactory.getLogger(Spark3MigrateAction.class);\n+  private static final String BACKUP_SUFFIX = \"_BACKUP_\";\n+\n+  Spark3MigrateAction(SparkSession spark, CatalogPlugin sourceCatalog, Identifier sourceTableName) {\n+    super(spark, sourceCatalog, sourceTableName, sourceCatalog, sourceTableName);\n+  }\n+\n+  @Override\n+  public Long execute() {\n+    Table icebergTable;\n+\n+    // Move source table to a new name, halting all modifications and allowing us to stage\n+    // the creation of a new Iceberg table in its place\n+    String backupName = sourceTableName().name() + BACKUP_SUFFIX;\n+    Identifier backupIdentifier = Identifier.of(sourceTableName().namespace(), backupName);\n+    try {\n+      destCatalog().renameTable(sourceTableName(), backupIdentifier);\n+    } catch (NoSuchTableException e) {\n+      throw new IllegalArgumentException(\"Cannot find table to migrate\", e);\n+    } catch (TableAlreadyExistsException e) {\n+      throw new IllegalArgumentException(\"Cannot rename migration source to backup name\", e);\n+    }\n+\n+    StagedTable stagedTable = null;\n+    try {\n+      Map<String, String> newTableProperties = new ImmutableMap.Builder<String, String>()\n+          .put(TableCatalog.PROP_PROVIDER, \"iceberg\")\n+          .putAll(JavaConverters.mapAsJavaMapConverter(v1SourceTable().properties()).asJava())\n+          .putAll(tableLocationProperties(sourceTableLocation()))\n+          .putAll(additionalProperties())\n+          .build();\n+\n+      stagedTable = destCatalog().stageCreate(Identifier.of(\n+          destTableName().namespace(),\n+          destTableName().name()),\n+          v1SourceTable().schema(),\n+          sourcePartitionSpec(),\n+          newTableProperties);\n+\n+      icebergTable = ((SparkTable) stagedTable).table();\n+\n+      if (!icebergTable.properties().containsKey(TableProperties.DEFAULT_NAME_MAPPING)) {\n+        applyDefaultTableNameMapping(icebergTable);\n+      }\n+\n+      String stagingLocation = icebergTable.location() + \"/\" + ICEBERG_METADATA_FOLDER;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "09f329bc39e8a2a1b2b5f925c580a2177833510b"}, "originalPosition": 96}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjI3NDI1Nw==", "bodyText": "Sure we can do that here, but not in Snapshot Action where it might not be set", "url": "https://github.com/apache/iceberg/pull/1525#discussion_r536274257", "createdAt": "2020-12-04T17:53:15Z", "author": {"login": "RussellSpitzer"}, "path": "spark3/src/main/java/org/apache/iceberg/actions/Spark3MigrateAction.java", "diffHunk": "@@ -0,0 +1,144 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.actions;\n+\n+import java.util.Map;\n+import org.apache.iceberg.Snapshot;\n+import org.apache.iceberg.SnapshotSummary;\n+import org.apache.iceberg.Table;\n+import org.apache.iceberg.TableProperties;\n+import org.apache.iceberg.relocated.com.google.common.collect.ImmutableMap;\n+import org.apache.iceberg.spark.SparkSessionCatalog;\n+import org.apache.iceberg.spark.SparkTableUtil;\n+import org.apache.iceberg.spark.source.SparkTable;\n+import org.apache.spark.sql.SparkSession;\n+import org.apache.spark.sql.catalyst.TableIdentifier;\n+import org.apache.spark.sql.catalyst.analysis.NoSuchTableException;\n+import org.apache.spark.sql.catalyst.analysis.TableAlreadyExistsException;\n+import org.apache.spark.sql.connector.catalog.CatalogPlugin;\n+import org.apache.spark.sql.connector.catalog.Identifier;\n+import org.apache.spark.sql.connector.catalog.StagedTable;\n+import org.apache.spark.sql.connector.catalog.TableCatalog;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import scala.Some;\n+import scala.collection.JavaConverters;\n+\n+/**\n+ * Takes a Spark table in the sourceCatalog and attempts to transform it into an Iceberg\n+ * Table in the same location with the same identifier. Once complete the identifier which\n+ * previously referred to a non-iceberg table will refer to the newly migrated iceberg\n+ * table.\n+ */\n+class Spark3MigrateAction extends Spark3CreateAction {\n+  private static final Logger LOG = LoggerFactory.getLogger(Spark3MigrateAction.class);\n+  private static final String BACKUP_SUFFIX = \"_BACKUP_\";\n+\n+  Spark3MigrateAction(SparkSession spark, CatalogPlugin sourceCatalog, Identifier sourceTableName) {\n+    super(spark, sourceCatalog, sourceTableName, sourceCatalog, sourceTableName);\n+  }\n+\n+  @Override\n+  public Long execute() {\n+    Table icebergTable;\n+\n+    // Move source table to a new name, halting all modifications and allowing us to stage\n+    // the creation of a new Iceberg table in its place\n+    String backupName = sourceTableName().name() + BACKUP_SUFFIX;\n+    Identifier backupIdentifier = Identifier.of(sourceTableName().namespace(), backupName);\n+    try {\n+      destCatalog().renameTable(sourceTableName(), backupIdentifier);\n+    } catch (NoSuchTableException e) {\n+      throw new IllegalArgumentException(\"Cannot find table to migrate\", e);\n+    } catch (TableAlreadyExistsException e) {\n+      throw new IllegalArgumentException(\"Cannot rename migration source to backup name\", e);\n+    }\n+\n+    StagedTable stagedTable = null;\n+    try {\n+      Map<String, String> newTableProperties = new ImmutableMap.Builder<String, String>()\n+          .put(TableCatalog.PROP_PROVIDER, \"iceberg\")\n+          .putAll(JavaConverters.mapAsJavaMapConverter(v1SourceTable().properties()).asJava())\n+          .putAll(tableLocationProperties(sourceTableLocation()))\n+          .putAll(additionalProperties())\n+          .build();\n+\n+      stagedTable = destCatalog().stageCreate(Identifier.of(\n+          destTableName().namespace(),\n+          destTableName().name()),\n+          v1SourceTable().schema(),\n+          sourcePartitionSpec(),\n+          newTableProperties);\n+\n+      icebergTable = ((SparkTable) stagedTable).table();\n+\n+      if (!icebergTable.properties().containsKey(TableProperties.DEFAULT_NAME_MAPPING)) {\n+        applyDefaultTableNameMapping(icebergTable);\n+      }\n+\n+      String stagingLocation = icebergTable.location() + \"/\" + ICEBERG_METADATA_FOLDER;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTc4MDQ5Ng=="}, "originalCommit": {"oid": "09f329bc39e8a2a1b2b5f925c580a2177833510b"}, "originalPosition": 96}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2MTU5Nzk5OnYy", "diffSide": "RIGHT", "path": "spark3/src/main/java/org/apache/iceberg/actions/Spark3MigrateAction.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQwMjowMjo0MlrOH-9dtw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQwMjowMjo0MlrOH-9dtw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTc4MDc5MQ==", "bodyText": "This is another place where we might want to update our own API rather than creating a special instance (v2BackupIdentifier) to pass through.", "url": "https://github.com/apache/iceberg/pull/1525#discussion_r535780791", "createdAt": "2020-12-04T02:02:42Z", "author": {"login": "rdblue"}, "path": "spark3/src/main/java/org/apache/iceberg/actions/Spark3MigrateAction.java", "diffHunk": "@@ -0,0 +1,144 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.actions;\n+\n+import java.util.Map;\n+import org.apache.iceberg.Snapshot;\n+import org.apache.iceberg.SnapshotSummary;\n+import org.apache.iceberg.Table;\n+import org.apache.iceberg.TableProperties;\n+import org.apache.iceberg.relocated.com.google.common.collect.ImmutableMap;\n+import org.apache.iceberg.spark.SparkSessionCatalog;\n+import org.apache.iceberg.spark.SparkTableUtil;\n+import org.apache.iceberg.spark.source.SparkTable;\n+import org.apache.spark.sql.SparkSession;\n+import org.apache.spark.sql.catalyst.TableIdentifier;\n+import org.apache.spark.sql.catalyst.analysis.NoSuchTableException;\n+import org.apache.spark.sql.catalyst.analysis.TableAlreadyExistsException;\n+import org.apache.spark.sql.connector.catalog.CatalogPlugin;\n+import org.apache.spark.sql.connector.catalog.Identifier;\n+import org.apache.spark.sql.connector.catalog.StagedTable;\n+import org.apache.spark.sql.connector.catalog.TableCatalog;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import scala.Some;\n+import scala.collection.JavaConverters;\n+\n+/**\n+ * Takes a Spark table in the sourceCatalog and attempts to transform it into an Iceberg\n+ * Table in the same location with the same identifier. Once complete the identifier which\n+ * previously referred to a non-iceberg table will refer to the newly migrated iceberg\n+ * table.\n+ */\n+class Spark3MigrateAction extends Spark3CreateAction {\n+  private static final Logger LOG = LoggerFactory.getLogger(Spark3MigrateAction.class);\n+  private static final String BACKUP_SUFFIX = \"_BACKUP_\";\n+\n+  Spark3MigrateAction(SparkSession spark, CatalogPlugin sourceCatalog, Identifier sourceTableName) {\n+    super(spark, sourceCatalog, sourceTableName, sourceCatalog, sourceTableName);\n+  }\n+\n+  @Override\n+  public Long execute() {\n+    Table icebergTable;\n+\n+    // Move source table to a new name, halting all modifications and allowing us to stage\n+    // the creation of a new Iceberg table in its place\n+    String backupName = sourceTableName().name() + BACKUP_SUFFIX;\n+    Identifier backupIdentifier = Identifier.of(sourceTableName().namespace(), backupName);\n+    try {\n+      destCatalog().renameTable(sourceTableName(), backupIdentifier);\n+    } catch (NoSuchTableException e) {\n+      throw new IllegalArgumentException(\"Cannot find table to migrate\", e);\n+    } catch (TableAlreadyExistsException e) {\n+      throw new IllegalArgumentException(\"Cannot rename migration source to backup name\", e);\n+    }\n+\n+    StagedTable stagedTable = null;\n+    try {\n+      Map<String, String> newTableProperties = new ImmutableMap.Builder<String, String>()\n+          .put(TableCatalog.PROP_PROVIDER, \"iceberg\")\n+          .putAll(JavaConverters.mapAsJavaMapConverter(v1SourceTable().properties()).asJava())\n+          .putAll(tableLocationProperties(sourceTableLocation()))\n+          .putAll(additionalProperties())\n+          .build();\n+\n+      stagedTable = destCatalog().stageCreate(Identifier.of(\n+          destTableName().namespace(),\n+          destTableName().name()),\n+          v1SourceTable().schema(),\n+          sourcePartitionSpec(),\n+          newTableProperties);\n+\n+      icebergTable = ((SparkTable) stagedTable).table();\n+\n+      if (!icebergTable.properties().containsKey(TableProperties.DEFAULT_NAME_MAPPING)) {\n+        applyDefaultTableNameMapping(icebergTable);\n+      }\n+\n+      String stagingLocation = icebergTable.location() + \"/\" + ICEBERG_METADATA_FOLDER;\n+\n+      LOG.info(\"Beginning migration of {} using metadata location {}\", sourceTableName(), stagingLocation);\n+\n+      Some<String> backupNamespace = Some.apply(backupIdentifier.namespace()[0]);\n+      TableIdentifier v1BackupIdentifier = new TableIdentifier(backupIdentifier.name(), backupNamespace);\n+      SparkTableUtil.importSparkTable(spark(), v1BackupIdentifier, icebergTable, stagingLocation);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "09f329bc39e8a2a1b2b5f925c580a2177833510b"}, "originalPosition": 102}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2MTY4MDc1OnYy", "diffSide": "RIGHT", "path": "spark3/src/main/java/org/apache/iceberg/actions/Spark3MigrateAction.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQwMjozNzowMVrOH--K0w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQxODoyMzowN1rOH_cq1g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTc5MjMzOQ==", "bodyText": "I think it is usually better to do work like this in a finally block using a threw boolean:\nboolean threw = true;\ntry {\n  // something that might fail\n  threw = false;\n} finally {\n  if (threw) {\n    // clean up\n  }\n}\nThat has the advantage that whatever happened in the block, you get the correct exception rather than needing to throw a generic RuntimeException which would make it difficult to use this action in a higher-level application. Also, there are technically throwables that are not Exception.", "url": "https://github.com/apache/iceberg/pull/1525#discussion_r535792339", "createdAt": "2020-12-04T02:37:01Z", "author": {"login": "rdblue"}, "path": "spark3/src/main/java/org/apache/iceberg/actions/Spark3MigrateAction.java", "diffHunk": "@@ -0,0 +1,144 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.actions;\n+\n+import java.util.Map;\n+import org.apache.iceberg.Snapshot;\n+import org.apache.iceberg.SnapshotSummary;\n+import org.apache.iceberg.Table;\n+import org.apache.iceberg.TableProperties;\n+import org.apache.iceberg.relocated.com.google.common.collect.ImmutableMap;\n+import org.apache.iceberg.spark.SparkSessionCatalog;\n+import org.apache.iceberg.spark.SparkTableUtil;\n+import org.apache.iceberg.spark.source.SparkTable;\n+import org.apache.spark.sql.SparkSession;\n+import org.apache.spark.sql.catalyst.TableIdentifier;\n+import org.apache.spark.sql.catalyst.analysis.NoSuchTableException;\n+import org.apache.spark.sql.catalyst.analysis.TableAlreadyExistsException;\n+import org.apache.spark.sql.connector.catalog.CatalogPlugin;\n+import org.apache.spark.sql.connector.catalog.Identifier;\n+import org.apache.spark.sql.connector.catalog.StagedTable;\n+import org.apache.spark.sql.connector.catalog.TableCatalog;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import scala.Some;\n+import scala.collection.JavaConverters;\n+\n+/**\n+ * Takes a Spark table in the sourceCatalog and attempts to transform it into an Iceberg\n+ * Table in the same location with the same identifier. Once complete the identifier which\n+ * previously referred to a non-iceberg table will refer to the newly migrated iceberg\n+ * table.\n+ */\n+class Spark3MigrateAction extends Spark3CreateAction {\n+  private static final Logger LOG = LoggerFactory.getLogger(Spark3MigrateAction.class);\n+  private static final String BACKUP_SUFFIX = \"_BACKUP_\";\n+\n+  Spark3MigrateAction(SparkSession spark, CatalogPlugin sourceCatalog, Identifier sourceTableName) {\n+    super(spark, sourceCatalog, sourceTableName, sourceCatalog, sourceTableName);\n+  }\n+\n+  @Override\n+  public Long execute() {\n+    Table icebergTable;\n+\n+    // Move source table to a new name, halting all modifications and allowing us to stage\n+    // the creation of a new Iceberg table in its place\n+    String backupName = sourceTableName().name() + BACKUP_SUFFIX;\n+    Identifier backupIdentifier = Identifier.of(sourceTableName().namespace(), backupName);\n+    try {\n+      destCatalog().renameTable(sourceTableName(), backupIdentifier);\n+    } catch (NoSuchTableException e) {\n+      throw new IllegalArgumentException(\"Cannot find table to migrate\", e);\n+    } catch (TableAlreadyExistsException e) {\n+      throw new IllegalArgumentException(\"Cannot rename migration source to backup name\", e);\n+    }\n+\n+    StagedTable stagedTable = null;\n+    try {\n+      Map<String, String> newTableProperties = new ImmutableMap.Builder<String, String>()\n+          .put(TableCatalog.PROP_PROVIDER, \"iceberg\")\n+          .putAll(JavaConverters.mapAsJavaMapConverter(v1SourceTable().properties()).asJava())\n+          .putAll(tableLocationProperties(sourceTableLocation()))\n+          .putAll(additionalProperties())\n+          .build();\n+\n+      stagedTable = destCatalog().stageCreate(Identifier.of(\n+          destTableName().namespace(),\n+          destTableName().name()),\n+          v1SourceTable().schema(),\n+          sourcePartitionSpec(),\n+          newTableProperties);\n+\n+      icebergTable = ((SparkTable) stagedTable).table();\n+\n+      if (!icebergTable.properties().containsKey(TableProperties.DEFAULT_NAME_MAPPING)) {\n+        applyDefaultTableNameMapping(icebergTable);\n+      }\n+\n+      String stagingLocation = icebergTable.location() + \"/\" + ICEBERG_METADATA_FOLDER;\n+\n+      LOG.info(\"Beginning migration of {} using metadata location {}\", sourceTableName(), stagingLocation);\n+\n+      Some<String> backupNamespace = Some.apply(backupIdentifier.namespace()[0]);\n+      TableIdentifier v1BackupIdentifier = new TableIdentifier(backupIdentifier.name(), backupNamespace);\n+      SparkTableUtil.importSparkTable(spark(), v1BackupIdentifier, icebergTable, stagingLocation);\n+\n+      stagedTable.commitStagedChanges();\n+    } catch (Exception e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "09f329bc39e8a2a1b2b5f925c580a2177833510b"}, "originalPosition": 105}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjI5MjA1NA==", "bodyText": "Sounds good, i'll change it around", "url": "https://github.com/apache/iceberg/pull/1525#discussion_r536292054", "createdAt": "2020-12-04T18:23:07Z", "author": {"login": "RussellSpitzer"}, "path": "spark3/src/main/java/org/apache/iceberg/actions/Spark3MigrateAction.java", "diffHunk": "@@ -0,0 +1,144 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.actions;\n+\n+import java.util.Map;\n+import org.apache.iceberg.Snapshot;\n+import org.apache.iceberg.SnapshotSummary;\n+import org.apache.iceberg.Table;\n+import org.apache.iceberg.TableProperties;\n+import org.apache.iceberg.relocated.com.google.common.collect.ImmutableMap;\n+import org.apache.iceberg.spark.SparkSessionCatalog;\n+import org.apache.iceberg.spark.SparkTableUtil;\n+import org.apache.iceberg.spark.source.SparkTable;\n+import org.apache.spark.sql.SparkSession;\n+import org.apache.spark.sql.catalyst.TableIdentifier;\n+import org.apache.spark.sql.catalyst.analysis.NoSuchTableException;\n+import org.apache.spark.sql.catalyst.analysis.TableAlreadyExistsException;\n+import org.apache.spark.sql.connector.catalog.CatalogPlugin;\n+import org.apache.spark.sql.connector.catalog.Identifier;\n+import org.apache.spark.sql.connector.catalog.StagedTable;\n+import org.apache.spark.sql.connector.catalog.TableCatalog;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import scala.Some;\n+import scala.collection.JavaConverters;\n+\n+/**\n+ * Takes a Spark table in the sourceCatalog and attempts to transform it into an Iceberg\n+ * Table in the same location with the same identifier. Once complete the identifier which\n+ * previously referred to a non-iceberg table will refer to the newly migrated iceberg\n+ * table.\n+ */\n+class Spark3MigrateAction extends Spark3CreateAction {\n+  private static final Logger LOG = LoggerFactory.getLogger(Spark3MigrateAction.class);\n+  private static final String BACKUP_SUFFIX = \"_BACKUP_\";\n+\n+  Spark3MigrateAction(SparkSession spark, CatalogPlugin sourceCatalog, Identifier sourceTableName) {\n+    super(spark, sourceCatalog, sourceTableName, sourceCatalog, sourceTableName);\n+  }\n+\n+  @Override\n+  public Long execute() {\n+    Table icebergTable;\n+\n+    // Move source table to a new name, halting all modifications and allowing us to stage\n+    // the creation of a new Iceberg table in its place\n+    String backupName = sourceTableName().name() + BACKUP_SUFFIX;\n+    Identifier backupIdentifier = Identifier.of(sourceTableName().namespace(), backupName);\n+    try {\n+      destCatalog().renameTable(sourceTableName(), backupIdentifier);\n+    } catch (NoSuchTableException e) {\n+      throw new IllegalArgumentException(\"Cannot find table to migrate\", e);\n+    } catch (TableAlreadyExistsException e) {\n+      throw new IllegalArgumentException(\"Cannot rename migration source to backup name\", e);\n+    }\n+\n+    StagedTable stagedTable = null;\n+    try {\n+      Map<String, String> newTableProperties = new ImmutableMap.Builder<String, String>()\n+          .put(TableCatalog.PROP_PROVIDER, \"iceberg\")\n+          .putAll(JavaConverters.mapAsJavaMapConverter(v1SourceTable().properties()).asJava())\n+          .putAll(tableLocationProperties(sourceTableLocation()))\n+          .putAll(additionalProperties())\n+          .build();\n+\n+      stagedTable = destCatalog().stageCreate(Identifier.of(\n+          destTableName().namespace(),\n+          destTableName().name()),\n+          v1SourceTable().schema(),\n+          sourcePartitionSpec(),\n+          newTableProperties);\n+\n+      icebergTable = ((SparkTable) stagedTable).table();\n+\n+      if (!icebergTable.properties().containsKey(TableProperties.DEFAULT_NAME_MAPPING)) {\n+        applyDefaultTableNameMapping(icebergTable);\n+      }\n+\n+      String stagingLocation = icebergTable.location() + \"/\" + ICEBERG_METADATA_FOLDER;\n+\n+      LOG.info(\"Beginning migration of {} using metadata location {}\", sourceTableName(), stagingLocation);\n+\n+      Some<String> backupNamespace = Some.apply(backupIdentifier.namespace()[0]);\n+      TableIdentifier v1BackupIdentifier = new TableIdentifier(backupIdentifier.name(), backupNamespace);\n+      SparkTableUtil.importSparkTable(spark(), v1BackupIdentifier, icebergTable, stagingLocation);\n+\n+      stagedTable.commitStagedChanges();\n+    } catch (Exception e) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTc5MjMzOQ=="}, "originalCommit": {"oid": "09f329bc39e8a2a1b2b5f925c580a2177833510b"}, "originalPosition": 105}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2MTY4MjIzOnYy", "diffSide": "RIGHT", "path": "spark3/src/main/java/org/apache/iceberg/actions/Spark3MigrateAction.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQwMjozNzozNFrOH--LiA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxNjozNzo0OVrOIDSfmw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTc5MjUyMA==", "bodyText": "Since the changes are only staged, this should happen after restoring the backup table, in case there is a failure in the abort.", "url": "https://github.com/apache/iceberg/pull/1525#discussion_r535792520", "createdAt": "2020-12-04T02:37:34Z", "author": {"login": "rdblue"}, "path": "spark3/src/main/java/org/apache/iceberg/actions/Spark3MigrateAction.java", "diffHunk": "@@ -0,0 +1,144 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.actions;\n+\n+import java.util.Map;\n+import org.apache.iceberg.Snapshot;\n+import org.apache.iceberg.SnapshotSummary;\n+import org.apache.iceberg.Table;\n+import org.apache.iceberg.TableProperties;\n+import org.apache.iceberg.relocated.com.google.common.collect.ImmutableMap;\n+import org.apache.iceberg.spark.SparkSessionCatalog;\n+import org.apache.iceberg.spark.SparkTableUtil;\n+import org.apache.iceberg.spark.source.SparkTable;\n+import org.apache.spark.sql.SparkSession;\n+import org.apache.spark.sql.catalyst.TableIdentifier;\n+import org.apache.spark.sql.catalyst.analysis.NoSuchTableException;\n+import org.apache.spark.sql.catalyst.analysis.TableAlreadyExistsException;\n+import org.apache.spark.sql.connector.catalog.CatalogPlugin;\n+import org.apache.spark.sql.connector.catalog.Identifier;\n+import org.apache.spark.sql.connector.catalog.StagedTable;\n+import org.apache.spark.sql.connector.catalog.TableCatalog;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import scala.Some;\n+import scala.collection.JavaConverters;\n+\n+/**\n+ * Takes a Spark table in the sourceCatalog and attempts to transform it into an Iceberg\n+ * Table in the same location with the same identifier. Once complete the identifier which\n+ * previously referred to a non-iceberg table will refer to the newly migrated iceberg\n+ * table.\n+ */\n+class Spark3MigrateAction extends Spark3CreateAction {\n+  private static final Logger LOG = LoggerFactory.getLogger(Spark3MigrateAction.class);\n+  private static final String BACKUP_SUFFIX = \"_BACKUP_\";\n+\n+  Spark3MigrateAction(SparkSession spark, CatalogPlugin sourceCatalog, Identifier sourceTableName) {\n+    super(spark, sourceCatalog, sourceTableName, sourceCatalog, sourceTableName);\n+  }\n+\n+  @Override\n+  public Long execute() {\n+    Table icebergTable;\n+\n+    // Move source table to a new name, halting all modifications and allowing us to stage\n+    // the creation of a new Iceberg table in its place\n+    String backupName = sourceTableName().name() + BACKUP_SUFFIX;\n+    Identifier backupIdentifier = Identifier.of(sourceTableName().namespace(), backupName);\n+    try {\n+      destCatalog().renameTable(sourceTableName(), backupIdentifier);\n+    } catch (NoSuchTableException e) {\n+      throw new IllegalArgumentException(\"Cannot find table to migrate\", e);\n+    } catch (TableAlreadyExistsException e) {\n+      throw new IllegalArgumentException(\"Cannot rename migration source to backup name\", e);\n+    }\n+\n+    StagedTable stagedTable = null;\n+    try {\n+      Map<String, String> newTableProperties = new ImmutableMap.Builder<String, String>()\n+          .put(TableCatalog.PROP_PROVIDER, \"iceberg\")\n+          .putAll(JavaConverters.mapAsJavaMapConverter(v1SourceTable().properties()).asJava())\n+          .putAll(tableLocationProperties(sourceTableLocation()))\n+          .putAll(additionalProperties())\n+          .build();\n+\n+      stagedTable = destCatalog().stageCreate(Identifier.of(\n+          destTableName().namespace(),\n+          destTableName().name()),\n+          v1SourceTable().schema(),\n+          sourcePartitionSpec(),\n+          newTableProperties);\n+\n+      icebergTable = ((SparkTable) stagedTable).table();\n+\n+      if (!icebergTable.properties().containsKey(TableProperties.DEFAULT_NAME_MAPPING)) {\n+        applyDefaultTableNameMapping(icebergTable);\n+      }\n+\n+      String stagingLocation = icebergTable.location() + \"/\" + ICEBERG_METADATA_FOLDER;\n+\n+      LOG.info(\"Beginning migration of {} using metadata location {}\", sourceTableName(), stagingLocation);\n+\n+      Some<String> backupNamespace = Some.apply(backupIdentifier.namespace()[0]);\n+      TableIdentifier v1BackupIdentifier = new TableIdentifier(backupIdentifier.name(), backupNamespace);\n+      SparkTableUtil.importSparkTable(spark(), v1BackupIdentifier, icebergTable, stagingLocation);\n+\n+      stagedTable.commitStagedChanges();\n+    } catch (Exception e) {\n+      LOG.error(\"Error when attempting perform migration changes, aborting table creation and restoring backup\", e);\n+\n+      try {\n+        if (stagedTable != null) {\n+          stagedTable.abortStagedChanges();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "09f329bc39e8a2a1b2b5f925c580a2177833510b"}, "originalPosition": 110}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjI5MjczNg==", "bodyText": "Sure, that order does make more sense", "url": "https://github.com/apache/iceberg/pull/1525#discussion_r536292736", "createdAt": "2020-12-04T18:24:25Z", "author": {"login": "RussellSpitzer"}, "path": "spark3/src/main/java/org/apache/iceberg/actions/Spark3MigrateAction.java", "diffHunk": "@@ -0,0 +1,144 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.actions;\n+\n+import java.util.Map;\n+import org.apache.iceberg.Snapshot;\n+import org.apache.iceberg.SnapshotSummary;\n+import org.apache.iceberg.Table;\n+import org.apache.iceberg.TableProperties;\n+import org.apache.iceberg.relocated.com.google.common.collect.ImmutableMap;\n+import org.apache.iceberg.spark.SparkSessionCatalog;\n+import org.apache.iceberg.spark.SparkTableUtil;\n+import org.apache.iceberg.spark.source.SparkTable;\n+import org.apache.spark.sql.SparkSession;\n+import org.apache.spark.sql.catalyst.TableIdentifier;\n+import org.apache.spark.sql.catalyst.analysis.NoSuchTableException;\n+import org.apache.spark.sql.catalyst.analysis.TableAlreadyExistsException;\n+import org.apache.spark.sql.connector.catalog.CatalogPlugin;\n+import org.apache.spark.sql.connector.catalog.Identifier;\n+import org.apache.spark.sql.connector.catalog.StagedTable;\n+import org.apache.spark.sql.connector.catalog.TableCatalog;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import scala.Some;\n+import scala.collection.JavaConverters;\n+\n+/**\n+ * Takes a Spark table in the sourceCatalog and attempts to transform it into an Iceberg\n+ * Table in the same location with the same identifier. Once complete the identifier which\n+ * previously referred to a non-iceberg table will refer to the newly migrated iceberg\n+ * table.\n+ */\n+class Spark3MigrateAction extends Spark3CreateAction {\n+  private static final Logger LOG = LoggerFactory.getLogger(Spark3MigrateAction.class);\n+  private static final String BACKUP_SUFFIX = \"_BACKUP_\";\n+\n+  Spark3MigrateAction(SparkSession spark, CatalogPlugin sourceCatalog, Identifier sourceTableName) {\n+    super(spark, sourceCatalog, sourceTableName, sourceCatalog, sourceTableName);\n+  }\n+\n+  @Override\n+  public Long execute() {\n+    Table icebergTable;\n+\n+    // Move source table to a new name, halting all modifications and allowing us to stage\n+    // the creation of a new Iceberg table in its place\n+    String backupName = sourceTableName().name() + BACKUP_SUFFIX;\n+    Identifier backupIdentifier = Identifier.of(sourceTableName().namespace(), backupName);\n+    try {\n+      destCatalog().renameTable(sourceTableName(), backupIdentifier);\n+    } catch (NoSuchTableException e) {\n+      throw new IllegalArgumentException(\"Cannot find table to migrate\", e);\n+    } catch (TableAlreadyExistsException e) {\n+      throw new IllegalArgumentException(\"Cannot rename migration source to backup name\", e);\n+    }\n+\n+    StagedTable stagedTable = null;\n+    try {\n+      Map<String, String> newTableProperties = new ImmutableMap.Builder<String, String>()\n+          .put(TableCatalog.PROP_PROVIDER, \"iceberg\")\n+          .putAll(JavaConverters.mapAsJavaMapConverter(v1SourceTable().properties()).asJava())\n+          .putAll(tableLocationProperties(sourceTableLocation()))\n+          .putAll(additionalProperties())\n+          .build();\n+\n+      stagedTable = destCatalog().stageCreate(Identifier.of(\n+          destTableName().namespace(),\n+          destTableName().name()),\n+          v1SourceTable().schema(),\n+          sourcePartitionSpec(),\n+          newTableProperties);\n+\n+      icebergTable = ((SparkTable) stagedTable).table();\n+\n+      if (!icebergTable.properties().containsKey(TableProperties.DEFAULT_NAME_MAPPING)) {\n+        applyDefaultTableNameMapping(icebergTable);\n+      }\n+\n+      String stagingLocation = icebergTable.location() + \"/\" + ICEBERG_METADATA_FOLDER;\n+\n+      LOG.info(\"Beginning migration of {} using metadata location {}\", sourceTableName(), stagingLocation);\n+\n+      Some<String> backupNamespace = Some.apply(backupIdentifier.namespace()[0]);\n+      TableIdentifier v1BackupIdentifier = new TableIdentifier(backupIdentifier.name(), backupNamespace);\n+      SparkTableUtil.importSparkTable(spark(), v1BackupIdentifier, icebergTable, stagingLocation);\n+\n+      stagedTable.commitStagedChanges();\n+    } catch (Exception e) {\n+      LOG.error(\"Error when attempting perform migration changes, aborting table creation and restoring backup\", e);\n+\n+      try {\n+        if (stagedTable != null) {\n+          stagedTable.abortStagedChanges();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTc5MjUyMA=="}, "originalCommit": {"oid": "09f329bc39e8a2a1b2b5f925c580a2177833510b"}, "originalPosition": 110}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDMxNDQyOA==", "bodyText": "Is this one actually resolved?", "url": "https://github.com/apache/iceberg/pull/1525#discussion_r540314428", "createdAt": "2020-12-10T16:32:16Z", "author": {"login": "aokolnychyi"}, "path": "spark3/src/main/java/org/apache/iceberg/actions/Spark3MigrateAction.java", "diffHunk": "@@ -0,0 +1,144 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.actions;\n+\n+import java.util.Map;\n+import org.apache.iceberg.Snapshot;\n+import org.apache.iceberg.SnapshotSummary;\n+import org.apache.iceberg.Table;\n+import org.apache.iceberg.TableProperties;\n+import org.apache.iceberg.relocated.com.google.common.collect.ImmutableMap;\n+import org.apache.iceberg.spark.SparkSessionCatalog;\n+import org.apache.iceberg.spark.SparkTableUtil;\n+import org.apache.iceberg.spark.source.SparkTable;\n+import org.apache.spark.sql.SparkSession;\n+import org.apache.spark.sql.catalyst.TableIdentifier;\n+import org.apache.spark.sql.catalyst.analysis.NoSuchTableException;\n+import org.apache.spark.sql.catalyst.analysis.TableAlreadyExistsException;\n+import org.apache.spark.sql.connector.catalog.CatalogPlugin;\n+import org.apache.spark.sql.connector.catalog.Identifier;\n+import org.apache.spark.sql.connector.catalog.StagedTable;\n+import org.apache.spark.sql.connector.catalog.TableCatalog;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import scala.Some;\n+import scala.collection.JavaConverters;\n+\n+/**\n+ * Takes a Spark table in the sourceCatalog and attempts to transform it into an Iceberg\n+ * Table in the same location with the same identifier. Once complete the identifier which\n+ * previously referred to a non-iceberg table will refer to the newly migrated iceberg\n+ * table.\n+ */\n+class Spark3MigrateAction extends Spark3CreateAction {\n+  private static final Logger LOG = LoggerFactory.getLogger(Spark3MigrateAction.class);\n+  private static final String BACKUP_SUFFIX = \"_BACKUP_\";\n+\n+  Spark3MigrateAction(SparkSession spark, CatalogPlugin sourceCatalog, Identifier sourceTableName) {\n+    super(spark, sourceCatalog, sourceTableName, sourceCatalog, sourceTableName);\n+  }\n+\n+  @Override\n+  public Long execute() {\n+    Table icebergTable;\n+\n+    // Move source table to a new name, halting all modifications and allowing us to stage\n+    // the creation of a new Iceberg table in its place\n+    String backupName = sourceTableName().name() + BACKUP_SUFFIX;\n+    Identifier backupIdentifier = Identifier.of(sourceTableName().namespace(), backupName);\n+    try {\n+      destCatalog().renameTable(sourceTableName(), backupIdentifier);\n+    } catch (NoSuchTableException e) {\n+      throw new IllegalArgumentException(\"Cannot find table to migrate\", e);\n+    } catch (TableAlreadyExistsException e) {\n+      throw new IllegalArgumentException(\"Cannot rename migration source to backup name\", e);\n+    }\n+\n+    StagedTable stagedTable = null;\n+    try {\n+      Map<String, String> newTableProperties = new ImmutableMap.Builder<String, String>()\n+          .put(TableCatalog.PROP_PROVIDER, \"iceberg\")\n+          .putAll(JavaConverters.mapAsJavaMapConverter(v1SourceTable().properties()).asJava())\n+          .putAll(tableLocationProperties(sourceTableLocation()))\n+          .putAll(additionalProperties())\n+          .build();\n+\n+      stagedTable = destCatalog().stageCreate(Identifier.of(\n+          destTableName().namespace(),\n+          destTableName().name()),\n+          v1SourceTable().schema(),\n+          sourcePartitionSpec(),\n+          newTableProperties);\n+\n+      icebergTable = ((SparkTable) stagedTable).table();\n+\n+      if (!icebergTable.properties().containsKey(TableProperties.DEFAULT_NAME_MAPPING)) {\n+        applyDefaultTableNameMapping(icebergTable);\n+      }\n+\n+      String stagingLocation = icebergTable.location() + \"/\" + ICEBERG_METADATA_FOLDER;\n+\n+      LOG.info(\"Beginning migration of {} using metadata location {}\", sourceTableName(), stagingLocation);\n+\n+      Some<String> backupNamespace = Some.apply(backupIdentifier.namespace()[0]);\n+      TableIdentifier v1BackupIdentifier = new TableIdentifier(backupIdentifier.name(), backupNamespace);\n+      SparkTableUtil.importSparkTable(spark(), v1BackupIdentifier, icebergTable, stagingLocation);\n+\n+      stagedTable.commitStagedChanges();\n+    } catch (Exception e) {\n+      LOG.error(\"Error when attempting perform migration changes, aborting table creation and restoring backup\", e);\n+\n+      try {\n+        if (stagedTable != null) {\n+          stagedTable.abortStagedChanges();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTc5MjUyMA=="}, "originalCommit": {"oid": "09f329bc39e8a2a1b2b5f925c580a2177833510b"}, "originalPosition": 110}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDMxNDY4MA==", "bodyText": "Well, it is in try block, never mind.", "url": "https://github.com/apache/iceberg/pull/1525#discussion_r540314680", "createdAt": "2020-12-10T16:32:33Z", "author": {"login": "aokolnychyi"}, "path": "spark3/src/main/java/org/apache/iceberg/actions/Spark3MigrateAction.java", "diffHunk": "@@ -0,0 +1,144 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.actions;\n+\n+import java.util.Map;\n+import org.apache.iceberg.Snapshot;\n+import org.apache.iceberg.SnapshotSummary;\n+import org.apache.iceberg.Table;\n+import org.apache.iceberg.TableProperties;\n+import org.apache.iceberg.relocated.com.google.common.collect.ImmutableMap;\n+import org.apache.iceberg.spark.SparkSessionCatalog;\n+import org.apache.iceberg.spark.SparkTableUtil;\n+import org.apache.iceberg.spark.source.SparkTable;\n+import org.apache.spark.sql.SparkSession;\n+import org.apache.spark.sql.catalyst.TableIdentifier;\n+import org.apache.spark.sql.catalyst.analysis.NoSuchTableException;\n+import org.apache.spark.sql.catalyst.analysis.TableAlreadyExistsException;\n+import org.apache.spark.sql.connector.catalog.CatalogPlugin;\n+import org.apache.spark.sql.connector.catalog.Identifier;\n+import org.apache.spark.sql.connector.catalog.StagedTable;\n+import org.apache.spark.sql.connector.catalog.TableCatalog;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import scala.Some;\n+import scala.collection.JavaConverters;\n+\n+/**\n+ * Takes a Spark table in the sourceCatalog and attempts to transform it into an Iceberg\n+ * Table in the same location with the same identifier. Once complete the identifier which\n+ * previously referred to a non-iceberg table will refer to the newly migrated iceberg\n+ * table.\n+ */\n+class Spark3MigrateAction extends Spark3CreateAction {\n+  private static final Logger LOG = LoggerFactory.getLogger(Spark3MigrateAction.class);\n+  private static final String BACKUP_SUFFIX = \"_BACKUP_\";\n+\n+  Spark3MigrateAction(SparkSession spark, CatalogPlugin sourceCatalog, Identifier sourceTableName) {\n+    super(spark, sourceCatalog, sourceTableName, sourceCatalog, sourceTableName);\n+  }\n+\n+  @Override\n+  public Long execute() {\n+    Table icebergTable;\n+\n+    // Move source table to a new name, halting all modifications and allowing us to stage\n+    // the creation of a new Iceberg table in its place\n+    String backupName = sourceTableName().name() + BACKUP_SUFFIX;\n+    Identifier backupIdentifier = Identifier.of(sourceTableName().namespace(), backupName);\n+    try {\n+      destCatalog().renameTable(sourceTableName(), backupIdentifier);\n+    } catch (NoSuchTableException e) {\n+      throw new IllegalArgumentException(\"Cannot find table to migrate\", e);\n+    } catch (TableAlreadyExistsException e) {\n+      throw new IllegalArgumentException(\"Cannot rename migration source to backup name\", e);\n+    }\n+\n+    StagedTable stagedTable = null;\n+    try {\n+      Map<String, String> newTableProperties = new ImmutableMap.Builder<String, String>()\n+          .put(TableCatalog.PROP_PROVIDER, \"iceberg\")\n+          .putAll(JavaConverters.mapAsJavaMapConverter(v1SourceTable().properties()).asJava())\n+          .putAll(tableLocationProperties(sourceTableLocation()))\n+          .putAll(additionalProperties())\n+          .build();\n+\n+      stagedTable = destCatalog().stageCreate(Identifier.of(\n+          destTableName().namespace(),\n+          destTableName().name()),\n+          v1SourceTable().schema(),\n+          sourcePartitionSpec(),\n+          newTableProperties);\n+\n+      icebergTable = ((SparkTable) stagedTable).table();\n+\n+      if (!icebergTable.properties().containsKey(TableProperties.DEFAULT_NAME_MAPPING)) {\n+        applyDefaultTableNameMapping(icebergTable);\n+      }\n+\n+      String stagingLocation = icebergTable.location() + \"/\" + ICEBERG_METADATA_FOLDER;\n+\n+      LOG.info(\"Beginning migration of {} using metadata location {}\", sourceTableName(), stagingLocation);\n+\n+      Some<String> backupNamespace = Some.apply(backupIdentifier.namespace()[0]);\n+      TableIdentifier v1BackupIdentifier = new TableIdentifier(backupIdentifier.name(), backupNamespace);\n+      SparkTableUtil.importSparkTable(spark(), v1BackupIdentifier, icebergTable, stagingLocation);\n+\n+      stagedTable.commitStagedChanges();\n+    } catch (Exception e) {\n+      LOG.error(\"Error when attempting perform migration changes, aborting table creation and restoring backup\", e);\n+\n+      try {\n+        if (stagedTable != null) {\n+          stagedTable.abortStagedChanges();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTc5MjUyMA=="}, "originalCommit": {"oid": "09f329bc39e8a2a1b2b5f925c580a2177833510b"}, "originalPosition": 110}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDMxOTY0Mw==", "bodyText": "I switched it back after we decided we catch the exception and just log it. But we can move it back", "url": "https://github.com/apache/iceberg/pull/1525#discussion_r540319643", "createdAt": "2020-12-10T16:37:49Z", "author": {"login": "RussellSpitzer"}, "path": "spark3/src/main/java/org/apache/iceberg/actions/Spark3MigrateAction.java", "diffHunk": "@@ -0,0 +1,144 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.actions;\n+\n+import java.util.Map;\n+import org.apache.iceberg.Snapshot;\n+import org.apache.iceberg.SnapshotSummary;\n+import org.apache.iceberg.Table;\n+import org.apache.iceberg.TableProperties;\n+import org.apache.iceberg.relocated.com.google.common.collect.ImmutableMap;\n+import org.apache.iceberg.spark.SparkSessionCatalog;\n+import org.apache.iceberg.spark.SparkTableUtil;\n+import org.apache.iceberg.spark.source.SparkTable;\n+import org.apache.spark.sql.SparkSession;\n+import org.apache.spark.sql.catalyst.TableIdentifier;\n+import org.apache.spark.sql.catalyst.analysis.NoSuchTableException;\n+import org.apache.spark.sql.catalyst.analysis.TableAlreadyExistsException;\n+import org.apache.spark.sql.connector.catalog.CatalogPlugin;\n+import org.apache.spark.sql.connector.catalog.Identifier;\n+import org.apache.spark.sql.connector.catalog.StagedTable;\n+import org.apache.spark.sql.connector.catalog.TableCatalog;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import scala.Some;\n+import scala.collection.JavaConverters;\n+\n+/**\n+ * Takes a Spark table in the sourceCatalog and attempts to transform it into an Iceberg\n+ * Table in the same location with the same identifier. Once complete the identifier which\n+ * previously referred to a non-iceberg table will refer to the newly migrated iceberg\n+ * table.\n+ */\n+class Spark3MigrateAction extends Spark3CreateAction {\n+  private static final Logger LOG = LoggerFactory.getLogger(Spark3MigrateAction.class);\n+  private static final String BACKUP_SUFFIX = \"_BACKUP_\";\n+\n+  Spark3MigrateAction(SparkSession spark, CatalogPlugin sourceCatalog, Identifier sourceTableName) {\n+    super(spark, sourceCatalog, sourceTableName, sourceCatalog, sourceTableName);\n+  }\n+\n+  @Override\n+  public Long execute() {\n+    Table icebergTable;\n+\n+    // Move source table to a new name, halting all modifications and allowing us to stage\n+    // the creation of a new Iceberg table in its place\n+    String backupName = sourceTableName().name() + BACKUP_SUFFIX;\n+    Identifier backupIdentifier = Identifier.of(sourceTableName().namespace(), backupName);\n+    try {\n+      destCatalog().renameTable(sourceTableName(), backupIdentifier);\n+    } catch (NoSuchTableException e) {\n+      throw new IllegalArgumentException(\"Cannot find table to migrate\", e);\n+    } catch (TableAlreadyExistsException e) {\n+      throw new IllegalArgumentException(\"Cannot rename migration source to backup name\", e);\n+    }\n+\n+    StagedTable stagedTable = null;\n+    try {\n+      Map<String, String> newTableProperties = new ImmutableMap.Builder<String, String>()\n+          .put(TableCatalog.PROP_PROVIDER, \"iceberg\")\n+          .putAll(JavaConverters.mapAsJavaMapConverter(v1SourceTable().properties()).asJava())\n+          .putAll(tableLocationProperties(sourceTableLocation()))\n+          .putAll(additionalProperties())\n+          .build();\n+\n+      stagedTable = destCatalog().stageCreate(Identifier.of(\n+          destTableName().namespace(),\n+          destTableName().name()),\n+          v1SourceTable().schema(),\n+          sourcePartitionSpec(),\n+          newTableProperties);\n+\n+      icebergTable = ((SparkTable) stagedTable).table();\n+\n+      if (!icebergTable.properties().containsKey(TableProperties.DEFAULT_NAME_MAPPING)) {\n+        applyDefaultTableNameMapping(icebergTable);\n+      }\n+\n+      String stagingLocation = icebergTable.location() + \"/\" + ICEBERG_METADATA_FOLDER;\n+\n+      LOG.info(\"Beginning migration of {} using metadata location {}\", sourceTableName(), stagingLocation);\n+\n+      Some<String> backupNamespace = Some.apply(backupIdentifier.namespace()[0]);\n+      TableIdentifier v1BackupIdentifier = new TableIdentifier(backupIdentifier.name(), backupNamespace);\n+      SparkTableUtil.importSparkTable(spark(), v1BackupIdentifier, icebergTable, stagingLocation);\n+\n+      stagedTable.commitStagedChanges();\n+    } catch (Exception e) {\n+      LOG.error(\"Error when attempting perform migration changes, aborting table creation and restoring backup\", e);\n+\n+      try {\n+        if (stagedTable != null) {\n+          stagedTable.abortStagedChanges();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTc5MjUyMA=="}, "originalCommit": {"oid": "09f329bc39e8a2a1b2b5f925c580a2177833510b"}, "originalPosition": 110}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2MTY4NTI4OnYy", "diffSide": "RIGHT", "path": "spark3/src/main/java/org/apache/iceberg/actions/Spark3CreateAction.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQwMjozODo1NFrOH--NKg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQxODozNjo1M1rOH_dIcw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTc5MjkzOA==", "bodyText": "I think of \"apply\" as using the name mapping. What about \"add\" instead because this creates it and adds it to the table?", "url": "https://github.com/apache/iceberg/pull/1525#discussion_r535792938", "createdAt": "2020-12-04T02:38:54Z", "author": {"login": "rdblue"}, "path": "spark3/src/main/java/org/apache/iceberg/actions/Spark3CreateAction.java", "diffHunk": "@@ -0,0 +1,183 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.actions;\n+\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Set;\n+import org.apache.iceberg.PartitionSpec;\n+import org.apache.iceberg.Table;\n+import org.apache.iceberg.TableProperties;\n+import org.apache.iceberg.mapping.MappingUtil;\n+import org.apache.iceberg.mapping.NameMapping;\n+import org.apache.iceberg.mapping.NameMappingParser;\n+import org.apache.iceberg.relocated.com.google.common.collect.ImmutableMap;\n+import org.apache.iceberg.relocated.com.google.common.collect.ImmutableSet;\n+import org.apache.iceberg.relocated.com.google.common.collect.Maps;\n+import org.apache.iceberg.spark.SparkCatalog;\n+import org.apache.iceberg.spark.SparkSchemaUtil;\n+import org.apache.iceberg.spark.SparkSessionCatalog;\n+import org.apache.spark.sql.AnalysisException;\n+import org.apache.spark.sql.SparkSession;\n+import org.apache.spark.sql.catalyst.analysis.NoSuchTableException;\n+import org.apache.spark.sql.catalyst.catalog.CatalogTable;\n+import org.apache.spark.sql.catalyst.catalog.CatalogUtils;\n+import org.apache.spark.sql.connector.catalog.CatalogPlugin;\n+import org.apache.spark.sql.connector.catalog.Identifier;\n+import org.apache.spark.sql.connector.catalog.StagingTableCatalog;\n+import org.apache.spark.sql.connector.catalog.TableCatalog;\n+import org.apache.spark.sql.connector.catalog.V1Table;\n+import org.apache.spark.sql.connector.expressions.Transform;\n+\n+abstract class Spark3CreateAction implements CreateAction {\n+  private static final Set<String> ALLOWED_SOURCES = ImmutableSet.of(\"parquet\", \"avro\", \"orc\", \"hive\");\n+  protected static final String ICEBERG_METADATA_FOLDER = \"metadata\";\n+\n+  private final SparkSession spark;\n+\n+  // Source Fields\n+  private final V1Table sourceTable;\n+  private final CatalogTable sourceCatalogTable;\n+  private final String sourceTableLocation;\n+  private final CatalogPlugin sourceCatalog;\n+  private final Identifier sourceTableName;\n+  private final PartitionSpec sourcePartitionSpec;\n+\n+  // Destination Fields\n+  private final StagingTableCatalog destCatalog;\n+  private final Identifier destTableName;\n+\n+  // Optional Parameters for destination\n+  private Map<String, String> additionalProperties = Maps.newHashMap();\n+\n+  Spark3CreateAction(SparkSession spark, CatalogPlugin sourceCatalog, Identifier sourceTableName,\n+                       CatalogPlugin destCatalog,  Identifier destTableName) {\n+\n+    this.spark = spark;\n+    this.sourceCatalog = checkSourceCatalog(sourceCatalog);\n+    this.sourceTableName = sourceTableName;\n+    this.destCatalog = checkDestinationCatalog(destCatalog);\n+    this.destTableName = destTableName;\n+\n+    try {\n+      String sourceString = String.join(\".\", sourceTableName.namespace()) + \".\" + sourceTableName.name();\n+      sourcePartitionSpec = SparkSchemaUtil.specForTable(spark, sourceString);\n+    } catch (AnalysisException e) {\n+      throw new IllegalArgumentException(\"Cannot determining partitioning of \" + sourceTableName.toString(), e);\n+    }\n+\n+    try {\n+      this.sourceTable = (V1Table) ((TableCatalog) sourceCatalog).loadTable(sourceTableName);\n+      this.sourceCatalogTable = sourceTable.v1Table();\n+    } catch (NoSuchTableException e) {\n+      throw new IllegalArgumentException(String.format(\"Cannot not find source table %s\", sourceTableName), e);\n+    } catch (ClassCastException e) {\n+      throw new IllegalArgumentException(String.format(\"Cannot use a non-v1 table %s as a source\", sourceTableName), e);\n+    }\n+    validateSourceTable(sourceCatalogTable);\n+\n+    this.sourceTableLocation = CatalogUtils.URIToString(sourceCatalogTable.storage().locationUri().get());\n+  }\n+\n+  @Override\n+  public CreateAction setAll(Map<String, String> properties) {\n+    this.additionalProperties.putAll(properties);\n+    return this;\n+  }\n+\n+  @Override\n+  public CreateAction set(String key, String value) {\n+    this.additionalProperties.put(key, value);\n+    return this;\n+  }\n+\n+  protected SparkSession spark() {\n+    return spark;\n+  }\n+\n+  protected String sourceTableLocation() {\n+    return sourceTableLocation;\n+  }\n+\n+  protected CatalogTable v1SourceTable() {\n+    return sourceCatalogTable;\n+  }\n+\n+  protected CatalogPlugin sourceCatalog() {\n+    return sourceCatalog;\n+  }\n+\n+  protected Identifier sourceTableName() {\n+    return sourceTableName;\n+  }\n+\n+  protected Transform[] sourcePartitionSpec() {\n+    return sourceTable.partitioning();\n+  }\n+\n+  protected StagingTableCatalog destCatalog() {\n+    return destCatalog;\n+  }\n+\n+  protected Identifier destTableName() {\n+    return destTableName;\n+  }\n+\n+  protected Map<String, String> additionalProperties() {\n+    return additionalProperties;\n+  }\n+\n+  private static void validateSourceTable(CatalogTable sourceTable) {\n+    String sourceTableProvider = sourceTable.provider().get().toLowerCase(Locale.ROOT);\n+\n+    if (!ALLOWED_SOURCES.contains(sourceTableProvider)) {\n+      throw new IllegalArgumentException(\n+          String.format(\"Cannot create an Iceberg table from source provider: %s\", sourceTableProvider));\n+    }\n+\n+    if (sourceTable.storage().locationUri().isEmpty()) {\n+      throw new IllegalArgumentException(\"Cannot create an Iceberg table from a source without an explicit location\");\n+    }\n+  }\n+\n+  protected static Map<String, String> tableLocationProperties(String tableLocation) {\n+    return ImmutableMap.of(\n+        TableProperties.WRITE_METADATA_LOCATION, tableLocation + \"/\" + ICEBERG_METADATA_FOLDER,\n+        TableProperties.WRITE_NEW_DATA_LOCATION, tableLocation\n+    );\n+  }\n+\n+  protected static void applyDefaultTableNameMapping(Table table) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "09f329bc39e8a2a1b2b5f925c580a2177833510b"}, "originalPosition": 167}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjI1MTUyNQ==", "bodyText": "sounds good to me", "url": "https://github.com/apache/iceberg/pull/1525#discussion_r536251525", "createdAt": "2020-12-04T17:16:26Z", "author": {"login": "RussellSpitzer"}, "path": "spark3/src/main/java/org/apache/iceberg/actions/Spark3CreateAction.java", "diffHunk": "@@ -0,0 +1,183 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.actions;\n+\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Set;\n+import org.apache.iceberg.PartitionSpec;\n+import org.apache.iceberg.Table;\n+import org.apache.iceberg.TableProperties;\n+import org.apache.iceberg.mapping.MappingUtil;\n+import org.apache.iceberg.mapping.NameMapping;\n+import org.apache.iceberg.mapping.NameMappingParser;\n+import org.apache.iceberg.relocated.com.google.common.collect.ImmutableMap;\n+import org.apache.iceberg.relocated.com.google.common.collect.ImmutableSet;\n+import org.apache.iceberg.relocated.com.google.common.collect.Maps;\n+import org.apache.iceberg.spark.SparkCatalog;\n+import org.apache.iceberg.spark.SparkSchemaUtil;\n+import org.apache.iceberg.spark.SparkSessionCatalog;\n+import org.apache.spark.sql.AnalysisException;\n+import org.apache.spark.sql.SparkSession;\n+import org.apache.spark.sql.catalyst.analysis.NoSuchTableException;\n+import org.apache.spark.sql.catalyst.catalog.CatalogTable;\n+import org.apache.spark.sql.catalyst.catalog.CatalogUtils;\n+import org.apache.spark.sql.connector.catalog.CatalogPlugin;\n+import org.apache.spark.sql.connector.catalog.Identifier;\n+import org.apache.spark.sql.connector.catalog.StagingTableCatalog;\n+import org.apache.spark.sql.connector.catalog.TableCatalog;\n+import org.apache.spark.sql.connector.catalog.V1Table;\n+import org.apache.spark.sql.connector.expressions.Transform;\n+\n+abstract class Spark3CreateAction implements CreateAction {\n+  private static final Set<String> ALLOWED_SOURCES = ImmutableSet.of(\"parquet\", \"avro\", \"orc\", \"hive\");\n+  protected static final String ICEBERG_METADATA_FOLDER = \"metadata\";\n+\n+  private final SparkSession spark;\n+\n+  // Source Fields\n+  private final V1Table sourceTable;\n+  private final CatalogTable sourceCatalogTable;\n+  private final String sourceTableLocation;\n+  private final CatalogPlugin sourceCatalog;\n+  private final Identifier sourceTableName;\n+  private final PartitionSpec sourcePartitionSpec;\n+\n+  // Destination Fields\n+  private final StagingTableCatalog destCatalog;\n+  private final Identifier destTableName;\n+\n+  // Optional Parameters for destination\n+  private Map<String, String> additionalProperties = Maps.newHashMap();\n+\n+  Spark3CreateAction(SparkSession spark, CatalogPlugin sourceCatalog, Identifier sourceTableName,\n+                       CatalogPlugin destCatalog,  Identifier destTableName) {\n+\n+    this.spark = spark;\n+    this.sourceCatalog = checkSourceCatalog(sourceCatalog);\n+    this.sourceTableName = sourceTableName;\n+    this.destCatalog = checkDestinationCatalog(destCatalog);\n+    this.destTableName = destTableName;\n+\n+    try {\n+      String sourceString = String.join(\".\", sourceTableName.namespace()) + \".\" + sourceTableName.name();\n+      sourcePartitionSpec = SparkSchemaUtil.specForTable(spark, sourceString);\n+    } catch (AnalysisException e) {\n+      throw new IllegalArgumentException(\"Cannot determining partitioning of \" + sourceTableName.toString(), e);\n+    }\n+\n+    try {\n+      this.sourceTable = (V1Table) ((TableCatalog) sourceCatalog).loadTable(sourceTableName);\n+      this.sourceCatalogTable = sourceTable.v1Table();\n+    } catch (NoSuchTableException e) {\n+      throw new IllegalArgumentException(String.format(\"Cannot not find source table %s\", sourceTableName), e);\n+    } catch (ClassCastException e) {\n+      throw new IllegalArgumentException(String.format(\"Cannot use a non-v1 table %s as a source\", sourceTableName), e);\n+    }\n+    validateSourceTable(sourceCatalogTable);\n+\n+    this.sourceTableLocation = CatalogUtils.URIToString(sourceCatalogTable.storage().locationUri().get());\n+  }\n+\n+  @Override\n+  public CreateAction setAll(Map<String, String> properties) {\n+    this.additionalProperties.putAll(properties);\n+    return this;\n+  }\n+\n+  @Override\n+  public CreateAction set(String key, String value) {\n+    this.additionalProperties.put(key, value);\n+    return this;\n+  }\n+\n+  protected SparkSession spark() {\n+    return spark;\n+  }\n+\n+  protected String sourceTableLocation() {\n+    return sourceTableLocation;\n+  }\n+\n+  protected CatalogTable v1SourceTable() {\n+    return sourceCatalogTable;\n+  }\n+\n+  protected CatalogPlugin sourceCatalog() {\n+    return sourceCatalog;\n+  }\n+\n+  protected Identifier sourceTableName() {\n+    return sourceTableName;\n+  }\n+\n+  protected Transform[] sourcePartitionSpec() {\n+    return sourceTable.partitioning();\n+  }\n+\n+  protected StagingTableCatalog destCatalog() {\n+    return destCatalog;\n+  }\n+\n+  protected Identifier destTableName() {\n+    return destTableName;\n+  }\n+\n+  protected Map<String, String> additionalProperties() {\n+    return additionalProperties;\n+  }\n+\n+  private static void validateSourceTable(CatalogTable sourceTable) {\n+    String sourceTableProvider = sourceTable.provider().get().toLowerCase(Locale.ROOT);\n+\n+    if (!ALLOWED_SOURCES.contains(sourceTableProvider)) {\n+      throw new IllegalArgumentException(\n+          String.format(\"Cannot create an Iceberg table from source provider: %s\", sourceTableProvider));\n+    }\n+\n+    if (sourceTable.storage().locationUri().isEmpty()) {\n+      throw new IllegalArgumentException(\"Cannot create an Iceberg table from a source without an explicit location\");\n+    }\n+  }\n+\n+  protected static Map<String, String> tableLocationProperties(String tableLocation) {\n+    return ImmutableMap.of(\n+        TableProperties.WRITE_METADATA_LOCATION, tableLocation + \"/\" + ICEBERG_METADATA_FOLDER,\n+        TableProperties.WRITE_NEW_DATA_LOCATION, tableLocation\n+    );\n+  }\n+\n+  protected static void applyDefaultTableNameMapping(Table table) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTc5MjkzOA=="}, "originalCommit": {"oid": "09f329bc39e8a2a1b2b5f925c580a2177833510b"}, "originalPosition": 167}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjI5NjI4Ng==", "bodyText": "I think assign would also fit here.", "url": "https://github.com/apache/iceberg/pull/1525#discussion_r536296286", "createdAt": "2020-12-04T18:30:48Z", "author": {"login": "aokolnychyi"}, "path": "spark3/src/main/java/org/apache/iceberg/actions/Spark3CreateAction.java", "diffHunk": "@@ -0,0 +1,183 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.actions;\n+\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Set;\n+import org.apache.iceberg.PartitionSpec;\n+import org.apache.iceberg.Table;\n+import org.apache.iceberg.TableProperties;\n+import org.apache.iceberg.mapping.MappingUtil;\n+import org.apache.iceberg.mapping.NameMapping;\n+import org.apache.iceberg.mapping.NameMappingParser;\n+import org.apache.iceberg.relocated.com.google.common.collect.ImmutableMap;\n+import org.apache.iceberg.relocated.com.google.common.collect.ImmutableSet;\n+import org.apache.iceberg.relocated.com.google.common.collect.Maps;\n+import org.apache.iceberg.spark.SparkCatalog;\n+import org.apache.iceberg.spark.SparkSchemaUtil;\n+import org.apache.iceberg.spark.SparkSessionCatalog;\n+import org.apache.spark.sql.AnalysisException;\n+import org.apache.spark.sql.SparkSession;\n+import org.apache.spark.sql.catalyst.analysis.NoSuchTableException;\n+import org.apache.spark.sql.catalyst.catalog.CatalogTable;\n+import org.apache.spark.sql.catalyst.catalog.CatalogUtils;\n+import org.apache.spark.sql.connector.catalog.CatalogPlugin;\n+import org.apache.spark.sql.connector.catalog.Identifier;\n+import org.apache.spark.sql.connector.catalog.StagingTableCatalog;\n+import org.apache.spark.sql.connector.catalog.TableCatalog;\n+import org.apache.spark.sql.connector.catalog.V1Table;\n+import org.apache.spark.sql.connector.expressions.Transform;\n+\n+abstract class Spark3CreateAction implements CreateAction {\n+  private static final Set<String> ALLOWED_SOURCES = ImmutableSet.of(\"parquet\", \"avro\", \"orc\", \"hive\");\n+  protected static final String ICEBERG_METADATA_FOLDER = \"metadata\";\n+\n+  private final SparkSession spark;\n+\n+  // Source Fields\n+  private final V1Table sourceTable;\n+  private final CatalogTable sourceCatalogTable;\n+  private final String sourceTableLocation;\n+  private final CatalogPlugin sourceCatalog;\n+  private final Identifier sourceTableName;\n+  private final PartitionSpec sourcePartitionSpec;\n+\n+  // Destination Fields\n+  private final StagingTableCatalog destCatalog;\n+  private final Identifier destTableName;\n+\n+  // Optional Parameters for destination\n+  private Map<String, String> additionalProperties = Maps.newHashMap();\n+\n+  Spark3CreateAction(SparkSession spark, CatalogPlugin sourceCatalog, Identifier sourceTableName,\n+                       CatalogPlugin destCatalog,  Identifier destTableName) {\n+\n+    this.spark = spark;\n+    this.sourceCatalog = checkSourceCatalog(sourceCatalog);\n+    this.sourceTableName = sourceTableName;\n+    this.destCatalog = checkDestinationCatalog(destCatalog);\n+    this.destTableName = destTableName;\n+\n+    try {\n+      String sourceString = String.join(\".\", sourceTableName.namespace()) + \".\" + sourceTableName.name();\n+      sourcePartitionSpec = SparkSchemaUtil.specForTable(spark, sourceString);\n+    } catch (AnalysisException e) {\n+      throw new IllegalArgumentException(\"Cannot determining partitioning of \" + sourceTableName.toString(), e);\n+    }\n+\n+    try {\n+      this.sourceTable = (V1Table) ((TableCatalog) sourceCatalog).loadTable(sourceTableName);\n+      this.sourceCatalogTable = sourceTable.v1Table();\n+    } catch (NoSuchTableException e) {\n+      throw new IllegalArgumentException(String.format(\"Cannot not find source table %s\", sourceTableName), e);\n+    } catch (ClassCastException e) {\n+      throw new IllegalArgumentException(String.format(\"Cannot use a non-v1 table %s as a source\", sourceTableName), e);\n+    }\n+    validateSourceTable(sourceCatalogTable);\n+\n+    this.sourceTableLocation = CatalogUtils.URIToString(sourceCatalogTable.storage().locationUri().get());\n+  }\n+\n+  @Override\n+  public CreateAction setAll(Map<String, String> properties) {\n+    this.additionalProperties.putAll(properties);\n+    return this;\n+  }\n+\n+  @Override\n+  public CreateAction set(String key, String value) {\n+    this.additionalProperties.put(key, value);\n+    return this;\n+  }\n+\n+  protected SparkSession spark() {\n+    return spark;\n+  }\n+\n+  protected String sourceTableLocation() {\n+    return sourceTableLocation;\n+  }\n+\n+  protected CatalogTable v1SourceTable() {\n+    return sourceCatalogTable;\n+  }\n+\n+  protected CatalogPlugin sourceCatalog() {\n+    return sourceCatalog;\n+  }\n+\n+  protected Identifier sourceTableName() {\n+    return sourceTableName;\n+  }\n+\n+  protected Transform[] sourcePartitionSpec() {\n+    return sourceTable.partitioning();\n+  }\n+\n+  protected StagingTableCatalog destCatalog() {\n+    return destCatalog;\n+  }\n+\n+  protected Identifier destTableName() {\n+    return destTableName;\n+  }\n+\n+  protected Map<String, String> additionalProperties() {\n+    return additionalProperties;\n+  }\n+\n+  private static void validateSourceTable(CatalogTable sourceTable) {\n+    String sourceTableProvider = sourceTable.provider().get().toLowerCase(Locale.ROOT);\n+\n+    if (!ALLOWED_SOURCES.contains(sourceTableProvider)) {\n+      throw new IllegalArgumentException(\n+          String.format(\"Cannot create an Iceberg table from source provider: %s\", sourceTableProvider));\n+    }\n+\n+    if (sourceTable.storage().locationUri().isEmpty()) {\n+      throw new IllegalArgumentException(\"Cannot create an Iceberg table from a source without an explicit location\");\n+    }\n+  }\n+\n+  protected static Map<String, String> tableLocationProperties(String tableLocation) {\n+    return ImmutableMap.of(\n+        TableProperties.WRITE_METADATA_LOCATION, tableLocation + \"/\" + ICEBERG_METADATA_FOLDER,\n+        TableProperties.WRITE_NEW_DATA_LOCATION, tableLocation\n+    );\n+  }\n+\n+  protected static void applyDefaultTableNameMapping(Table table) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTc5MjkzOA=="}, "originalCommit": {"oid": "09f329bc39e8a2a1b2b5f925c580a2177833510b"}, "originalPosition": 167}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjI5OTYzNQ==", "bodyText": "I like assign better, i'm gonna go with that", "url": "https://github.com/apache/iceberg/pull/1525#discussion_r536299635", "createdAt": "2020-12-04T18:36:53Z", "author": {"login": "RussellSpitzer"}, "path": "spark3/src/main/java/org/apache/iceberg/actions/Spark3CreateAction.java", "diffHunk": "@@ -0,0 +1,183 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.actions;\n+\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Set;\n+import org.apache.iceberg.PartitionSpec;\n+import org.apache.iceberg.Table;\n+import org.apache.iceberg.TableProperties;\n+import org.apache.iceberg.mapping.MappingUtil;\n+import org.apache.iceberg.mapping.NameMapping;\n+import org.apache.iceberg.mapping.NameMappingParser;\n+import org.apache.iceberg.relocated.com.google.common.collect.ImmutableMap;\n+import org.apache.iceberg.relocated.com.google.common.collect.ImmutableSet;\n+import org.apache.iceberg.relocated.com.google.common.collect.Maps;\n+import org.apache.iceberg.spark.SparkCatalog;\n+import org.apache.iceberg.spark.SparkSchemaUtil;\n+import org.apache.iceberg.spark.SparkSessionCatalog;\n+import org.apache.spark.sql.AnalysisException;\n+import org.apache.spark.sql.SparkSession;\n+import org.apache.spark.sql.catalyst.analysis.NoSuchTableException;\n+import org.apache.spark.sql.catalyst.catalog.CatalogTable;\n+import org.apache.spark.sql.catalyst.catalog.CatalogUtils;\n+import org.apache.spark.sql.connector.catalog.CatalogPlugin;\n+import org.apache.spark.sql.connector.catalog.Identifier;\n+import org.apache.spark.sql.connector.catalog.StagingTableCatalog;\n+import org.apache.spark.sql.connector.catalog.TableCatalog;\n+import org.apache.spark.sql.connector.catalog.V1Table;\n+import org.apache.spark.sql.connector.expressions.Transform;\n+\n+abstract class Spark3CreateAction implements CreateAction {\n+  private static final Set<String> ALLOWED_SOURCES = ImmutableSet.of(\"parquet\", \"avro\", \"orc\", \"hive\");\n+  protected static final String ICEBERG_METADATA_FOLDER = \"metadata\";\n+\n+  private final SparkSession spark;\n+\n+  // Source Fields\n+  private final V1Table sourceTable;\n+  private final CatalogTable sourceCatalogTable;\n+  private final String sourceTableLocation;\n+  private final CatalogPlugin sourceCatalog;\n+  private final Identifier sourceTableName;\n+  private final PartitionSpec sourcePartitionSpec;\n+\n+  // Destination Fields\n+  private final StagingTableCatalog destCatalog;\n+  private final Identifier destTableName;\n+\n+  // Optional Parameters for destination\n+  private Map<String, String> additionalProperties = Maps.newHashMap();\n+\n+  Spark3CreateAction(SparkSession spark, CatalogPlugin sourceCatalog, Identifier sourceTableName,\n+                       CatalogPlugin destCatalog,  Identifier destTableName) {\n+\n+    this.spark = spark;\n+    this.sourceCatalog = checkSourceCatalog(sourceCatalog);\n+    this.sourceTableName = sourceTableName;\n+    this.destCatalog = checkDestinationCatalog(destCatalog);\n+    this.destTableName = destTableName;\n+\n+    try {\n+      String sourceString = String.join(\".\", sourceTableName.namespace()) + \".\" + sourceTableName.name();\n+      sourcePartitionSpec = SparkSchemaUtil.specForTable(spark, sourceString);\n+    } catch (AnalysisException e) {\n+      throw new IllegalArgumentException(\"Cannot determining partitioning of \" + sourceTableName.toString(), e);\n+    }\n+\n+    try {\n+      this.sourceTable = (V1Table) ((TableCatalog) sourceCatalog).loadTable(sourceTableName);\n+      this.sourceCatalogTable = sourceTable.v1Table();\n+    } catch (NoSuchTableException e) {\n+      throw new IllegalArgumentException(String.format(\"Cannot not find source table %s\", sourceTableName), e);\n+    } catch (ClassCastException e) {\n+      throw new IllegalArgumentException(String.format(\"Cannot use a non-v1 table %s as a source\", sourceTableName), e);\n+    }\n+    validateSourceTable(sourceCatalogTable);\n+\n+    this.sourceTableLocation = CatalogUtils.URIToString(sourceCatalogTable.storage().locationUri().get());\n+  }\n+\n+  @Override\n+  public CreateAction setAll(Map<String, String> properties) {\n+    this.additionalProperties.putAll(properties);\n+    return this;\n+  }\n+\n+  @Override\n+  public CreateAction set(String key, String value) {\n+    this.additionalProperties.put(key, value);\n+    return this;\n+  }\n+\n+  protected SparkSession spark() {\n+    return spark;\n+  }\n+\n+  protected String sourceTableLocation() {\n+    return sourceTableLocation;\n+  }\n+\n+  protected CatalogTable v1SourceTable() {\n+    return sourceCatalogTable;\n+  }\n+\n+  protected CatalogPlugin sourceCatalog() {\n+    return sourceCatalog;\n+  }\n+\n+  protected Identifier sourceTableName() {\n+    return sourceTableName;\n+  }\n+\n+  protected Transform[] sourcePartitionSpec() {\n+    return sourceTable.partitioning();\n+  }\n+\n+  protected StagingTableCatalog destCatalog() {\n+    return destCatalog;\n+  }\n+\n+  protected Identifier destTableName() {\n+    return destTableName;\n+  }\n+\n+  protected Map<String, String> additionalProperties() {\n+    return additionalProperties;\n+  }\n+\n+  private static void validateSourceTable(CatalogTable sourceTable) {\n+    String sourceTableProvider = sourceTable.provider().get().toLowerCase(Locale.ROOT);\n+\n+    if (!ALLOWED_SOURCES.contains(sourceTableProvider)) {\n+      throw new IllegalArgumentException(\n+          String.format(\"Cannot create an Iceberg table from source provider: %s\", sourceTableProvider));\n+    }\n+\n+    if (sourceTable.storage().locationUri().isEmpty()) {\n+      throw new IllegalArgumentException(\"Cannot create an Iceberg table from a source without an explicit location\");\n+    }\n+  }\n+\n+  protected static Map<String, String> tableLocationProperties(String tableLocation) {\n+    return ImmutableMap.of(\n+        TableProperties.WRITE_METADATA_LOCATION, tableLocation + \"/\" + ICEBERG_METADATA_FOLDER,\n+        TableProperties.WRITE_NEW_DATA_LOCATION, tableLocation\n+    );\n+  }\n+\n+  protected static void applyDefaultTableNameMapping(Table table) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTc5MjkzOA=="}, "originalCommit": {"oid": "09f329bc39e8a2a1b2b5f925c580a2177833510b"}, "originalPosition": 167}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2MTY4NzE3OnYy", "diffSide": "RIGHT", "path": "spark3/src/main/java/org/apache/iceberg/actions/Spark3SnapshotAction.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQwMjozOTo0MlrOH--OLw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQxODozMDozOVrOH_c7BA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTc5MzE5OQ==", "bodyText": "Here as well, this will fail if the properties conflict. Since we know that Iceberg won't modify them it is safe to use a mutable map.", "url": "https://github.com/apache/iceberg/pull/1525#discussion_r535793199", "createdAt": "2020-12-04T02:39:42Z", "author": {"login": "rdblue"}, "path": "spark3/src/main/java/org/apache/iceberg/actions/Spark3SnapshotAction.java", "diffHunk": "@@ -0,0 +1,141 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.actions;\n+\n+import java.util.Map;\n+import org.apache.iceberg.Snapshot;\n+import org.apache.iceberg.SnapshotSummary;\n+import org.apache.iceberg.Table;\n+import org.apache.iceberg.TableProperties;\n+import org.apache.iceberg.relocated.com.google.common.base.Preconditions;\n+import org.apache.iceberg.relocated.com.google.common.collect.ImmutableMap;\n+import org.apache.iceberg.spark.SparkTableUtil;\n+import org.apache.iceberg.spark.source.SparkTable;\n+import org.apache.spark.sql.SparkSession;\n+import org.apache.spark.sql.catalyst.TableIdentifier;\n+import org.apache.spark.sql.catalyst.analysis.NoSuchNamespaceException;\n+import org.apache.spark.sql.catalyst.analysis.TableAlreadyExistsException;\n+import org.apache.spark.sql.connector.catalog.CatalogPlugin;\n+import org.apache.spark.sql.connector.catalog.Identifier;\n+import org.apache.spark.sql.connector.catalog.StagedTable;\n+import org.apache.spark.sql.connector.catalog.TableCatalog;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import scala.collection.JavaConverters;\n+\n+/**\n+ * Creates a new Iceberg table based on a source Spark table. The new Iceberg table will\n+ * have a different data and metadata directory allowing it to exist independently of the\n+ * source table.\n+ */\n+class Spark3SnapshotAction extends Spark3CreateAction {\n+  private static final Logger LOG = LoggerFactory.getLogger(Spark3SnapshotAction.class);\n+\n+  private final String destTableLocation;\n+\n+  Spark3SnapshotAction(SparkSession spark, CatalogPlugin sourceCatalog,\n+                       Identifier sourceTableName, CatalogPlugin destCatalog,\n+                       Identifier destTableName) {\n+    super(spark, sourceCatalog, sourceTableName, destCatalog, destTableName);\n+    // Cannot check if the table location that would be generated by the catalog will match the source\n+    this.destTableLocation = null;\n+  }\n+\n+  Spark3SnapshotAction(SparkSession spark, CatalogPlugin sourceCatalog,\n+                       Identifier sourceTableName, CatalogPlugin destCatalog,\n+                       Identifier destTableName, String destTableLocation) {\n+    super(spark, sourceCatalog, sourceTableName, destCatalog, destTableName);\n+    Preconditions.checkArgument(!sourceTableLocation().equals(destTableLocation),\n+        \"Cannot create snapshot where destination location is the same as the source location. This\" +\n+            \"would cause a mixing of original table created and snapshot created files.\");\n+    this.destTableLocation = destTableLocation;\n+  }\n+\n+  @Override\n+  public Long execute() {\n+    StagedTable stagedTable;\n+    Table icebergTable;\n+\n+    try {\n+      stagedTable = destCatalog().stageCreate(destTableName(), v1SourceTable().schema(),\n+          sourcePartitionSpec(), buildPropertyMap());\n+      icebergTable = ((SparkTable) stagedTable).table();\n+\n+      if (!icebergTable.properties().containsKey(TableProperties.DEFAULT_NAME_MAPPING)) {\n+        applyDefaultTableNameMapping(icebergTable);\n+      }\n+    } catch (TableAlreadyExistsException taeException) {\n+      throw new IllegalArgumentException(\"Cannot create snapshot because a table already exists with that name\",\n+          taeException);\n+    } catch (NoSuchNamespaceException nsnException) {\n+      throw new IllegalArgumentException(\"Cannot create snapshot because the namespace given does not exist\",\n+          nsnException);\n+    }\n+\n+    try {\n+      String stagingLocation = icebergTable.location() + \"/\" + ICEBERG_METADATA_FOLDER;\n+      LOG.info(\"Beginning snapshot of {} to {} using metadata location {}\", sourceTableName(), destTableName(),\n+          stagingLocation);\n+\n+      TableIdentifier v1TableIdentifier = v1SourceTable().identifier();\n+      SparkTableUtil.importSparkTable(spark(), v1TableIdentifier, icebergTable, stagingLocation);\n+      stagedTable.commitStagedChanges();\n+\n+    } catch (Exception e) {\n+      LOG.error(\"Error when attempting to commit snapshot changes, rolling back\", e);\n+      if (stagedTable != null) {\n+        stagedTable.abortStagedChanges();\n+      }\n+      throw e;\n+    }\n+\n+    long numMigratedFiles;\n+    Snapshot snapshot = icebergTable.currentSnapshot();\n+    numMigratedFiles = Long.valueOf(snapshot.summary().get(SnapshotSummary.TOTAL_DATA_FILES_PROP));\n+    LOG.info(\"Successfully loaded Iceberg metadata for {} files\", numMigratedFiles);\n+    return numMigratedFiles;\n+  }\n+\n+  private Map<String, String> buildPropertyMap() {\n+    ImmutableMap.Builder<String, String> propBuilder = ImmutableMap.<String, String>builder()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "09f329bc39e8a2a1b2b5f925c580a2177833510b"}, "originalPosition": 117}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjI5NjE5Ng==", "bodyText": "Sounds good to me", "url": "https://github.com/apache/iceberg/pull/1525#discussion_r536296196", "createdAt": "2020-12-04T18:30:39Z", "author": {"login": "RussellSpitzer"}, "path": "spark3/src/main/java/org/apache/iceberg/actions/Spark3SnapshotAction.java", "diffHunk": "@@ -0,0 +1,141 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.actions;\n+\n+import java.util.Map;\n+import org.apache.iceberg.Snapshot;\n+import org.apache.iceberg.SnapshotSummary;\n+import org.apache.iceberg.Table;\n+import org.apache.iceberg.TableProperties;\n+import org.apache.iceberg.relocated.com.google.common.base.Preconditions;\n+import org.apache.iceberg.relocated.com.google.common.collect.ImmutableMap;\n+import org.apache.iceberg.spark.SparkTableUtil;\n+import org.apache.iceberg.spark.source.SparkTable;\n+import org.apache.spark.sql.SparkSession;\n+import org.apache.spark.sql.catalyst.TableIdentifier;\n+import org.apache.spark.sql.catalyst.analysis.NoSuchNamespaceException;\n+import org.apache.spark.sql.catalyst.analysis.TableAlreadyExistsException;\n+import org.apache.spark.sql.connector.catalog.CatalogPlugin;\n+import org.apache.spark.sql.connector.catalog.Identifier;\n+import org.apache.spark.sql.connector.catalog.StagedTable;\n+import org.apache.spark.sql.connector.catalog.TableCatalog;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import scala.collection.JavaConverters;\n+\n+/**\n+ * Creates a new Iceberg table based on a source Spark table. The new Iceberg table will\n+ * have a different data and metadata directory allowing it to exist independently of the\n+ * source table.\n+ */\n+class Spark3SnapshotAction extends Spark3CreateAction {\n+  private static final Logger LOG = LoggerFactory.getLogger(Spark3SnapshotAction.class);\n+\n+  private final String destTableLocation;\n+\n+  Spark3SnapshotAction(SparkSession spark, CatalogPlugin sourceCatalog,\n+                       Identifier sourceTableName, CatalogPlugin destCatalog,\n+                       Identifier destTableName) {\n+    super(spark, sourceCatalog, sourceTableName, destCatalog, destTableName);\n+    // Cannot check if the table location that would be generated by the catalog will match the source\n+    this.destTableLocation = null;\n+  }\n+\n+  Spark3SnapshotAction(SparkSession spark, CatalogPlugin sourceCatalog,\n+                       Identifier sourceTableName, CatalogPlugin destCatalog,\n+                       Identifier destTableName, String destTableLocation) {\n+    super(spark, sourceCatalog, sourceTableName, destCatalog, destTableName);\n+    Preconditions.checkArgument(!sourceTableLocation().equals(destTableLocation),\n+        \"Cannot create snapshot where destination location is the same as the source location. This\" +\n+            \"would cause a mixing of original table created and snapshot created files.\");\n+    this.destTableLocation = destTableLocation;\n+  }\n+\n+  @Override\n+  public Long execute() {\n+    StagedTable stagedTable;\n+    Table icebergTable;\n+\n+    try {\n+      stagedTable = destCatalog().stageCreate(destTableName(), v1SourceTable().schema(),\n+          sourcePartitionSpec(), buildPropertyMap());\n+      icebergTable = ((SparkTable) stagedTable).table();\n+\n+      if (!icebergTable.properties().containsKey(TableProperties.DEFAULT_NAME_MAPPING)) {\n+        applyDefaultTableNameMapping(icebergTable);\n+      }\n+    } catch (TableAlreadyExistsException taeException) {\n+      throw new IllegalArgumentException(\"Cannot create snapshot because a table already exists with that name\",\n+          taeException);\n+    } catch (NoSuchNamespaceException nsnException) {\n+      throw new IllegalArgumentException(\"Cannot create snapshot because the namespace given does not exist\",\n+          nsnException);\n+    }\n+\n+    try {\n+      String stagingLocation = icebergTable.location() + \"/\" + ICEBERG_METADATA_FOLDER;\n+      LOG.info(\"Beginning snapshot of {} to {} using metadata location {}\", sourceTableName(), destTableName(),\n+          stagingLocation);\n+\n+      TableIdentifier v1TableIdentifier = v1SourceTable().identifier();\n+      SparkTableUtil.importSparkTable(spark(), v1TableIdentifier, icebergTable, stagingLocation);\n+      stagedTable.commitStagedChanges();\n+\n+    } catch (Exception e) {\n+      LOG.error(\"Error when attempting to commit snapshot changes, rolling back\", e);\n+      if (stagedTable != null) {\n+        stagedTable.abortStagedChanges();\n+      }\n+      throw e;\n+    }\n+\n+    long numMigratedFiles;\n+    Snapshot snapshot = icebergTable.currentSnapshot();\n+    numMigratedFiles = Long.valueOf(snapshot.summary().get(SnapshotSummary.TOTAL_DATA_FILES_PROP));\n+    LOG.info(\"Successfully loaded Iceberg metadata for {} files\", numMigratedFiles);\n+    return numMigratedFiles;\n+  }\n+\n+  private Map<String, String> buildPropertyMap() {\n+    ImmutableMap.Builder<String, String> propBuilder = ImmutableMap.<String, String>builder()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTc5MzE5OQ=="}, "originalCommit": {"oid": "09f329bc39e8a2a1b2b5f925c580a2177833510b"}, "originalPosition": 117}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2MTY4OTIwOnYy", "diffSide": "RIGHT", "path": "spark3/src/main/java/org/apache/iceberg/actions/SparkActions.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQwMjo0MDozMlrOH--POQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQwMjo0MDozMlrOH--POQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTc5MzQ2NQ==", "bodyText": "Can you add more whitespace between control flow blocks in this PR?", "url": "https://github.com/apache/iceberg/pull/1525#discussion_r535793465", "createdAt": "2020-12-04T02:40:32Z", "author": {"login": "rdblue"}, "path": "spark3/src/main/java/org/apache/iceberg/actions/SparkActions.java", "diffHunk": "@@ -20,10 +20,75 @@\n package org.apache.iceberg.actions;\n \n import org.apache.iceberg.Table;\n+import org.apache.iceberg.relocated.com.google.common.base.Preconditions;\n+import org.apache.iceberg.spark.Spark3Util;\n import org.apache.spark.sql.SparkSession;\n+import org.apache.spark.sql.catalyst.parser.ParseException;\n \n-class SparkActions extends Actions {\n+public class SparkActions extends Actions {\n   protected SparkActions(SparkSession spark, Table table) {\n     super(spark, table);\n   }\n+\n+  public static CreateAction migrate(String tableName) {\n+    return migrate(SparkSession.active(), tableName);\n+  }\n+\n+  public static CreateAction migrate(SparkSession spark, String tableName) {\n+    Spark3Util.CatalogAndIdentifier catalogAndIdentifier;\n+    try {\n+      catalogAndIdentifier = Spark3Util.catalogAndIdentifier(spark, tableName);\n+    } catch (ParseException e) {\n+      throw new IllegalArgumentException(\"Cannot parse migrate target\", e);\n+    }\n+\n+    return new Spark3MigrateAction(spark, catalogAndIdentifier.catalog(), catalogAndIdentifier.identifier());\n+  }\n+\n+  public static CreateAction snapshot(String sourceId, String destId) {\n+    return snapshot(SparkSession.active(), sourceId, destId);\n+  }\n+\n+  public static CreateAction snapshot(SparkSession spark, String sourceId, String destId) {\n+    Spark3Util.CatalogAndIdentifier sourceIdent;\n+    try {\n+      sourceIdent = Spark3Util.catalogAndIdentifier(spark, sourceId);\n+    } catch (ParseException e) {\n+      throw new IllegalArgumentException(\"Cannot parse snapshot source\", e);\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "09f329bc39e8a2a1b2b5f925c580a2177833510b"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2MTY5NDU5OnYy", "diffSide": "RIGHT", "path": "spark3/src/test/java/org/apache/iceberg/actions/TestCreateActions.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQwMjo0Mjo0MFrOH--SDg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQxODozMjowNlrOH_c-ew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTc5NDE5MA==", "bodyText": "Why is the location passed to snapshot? That seems like something that should be set on the action instead because it isn't required.", "url": "https://github.com/apache/iceberg/pull/1525#discussion_r535794190", "createdAt": "2020-12-04T02:42:40Z", "author": {"login": "rdblue"}, "path": "spark3/src/test/java/org/apache/iceberg/actions/TestCreateActions.java", "diffHunk": "@@ -0,0 +1,347 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.actions;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+import org.apache.commons.io.FileUtils;\n+import org.apache.commons.io.filefilter.TrueFileFilter;\n+import org.apache.iceberg.relocated.com.google.common.collect.ImmutableMap;\n+import org.apache.iceberg.relocated.com.google.common.collect.Lists;\n+import org.apache.iceberg.relocated.com.google.common.collect.Maps;\n+import org.apache.iceberg.spark.Spark3Util;\n+import org.apache.iceberg.spark.SparkCatalog;\n+import org.apache.iceberg.spark.SparkCatalogTestBase;\n+import org.apache.iceberg.spark.SparkSessionCatalog;\n+import org.apache.iceberg.spark.source.SimpleRecord;\n+import org.apache.iceberg.spark.source.SparkTable;\n+import org.apache.spark.sql.Dataset;\n+import org.apache.spark.sql.Row;\n+import org.apache.spark.sql.SaveMode;\n+import org.apache.spark.sql.catalyst.TableIdentifier;\n+import org.apache.spark.sql.catalyst.analysis.NoSuchDatabaseException;\n+import org.apache.spark.sql.catalyst.analysis.NoSuchTableException;\n+import org.apache.spark.sql.catalyst.catalog.CatalogTable;\n+import org.apache.spark.sql.catalyst.parser.ParseException;\n+import org.apache.spark.sql.connector.catalog.Identifier;\n+import org.apache.spark.sql.connector.catalog.TableCatalog;\n+import org.junit.After;\n+import org.junit.Assert;\n+import org.junit.Assume;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.TemporaryFolder;\n+import org.junit.runners.Parameterized;\n+import scala.Some;\n+import scala.collection.Seq;\n+\n+public class TestCreateActions extends SparkCatalogTestBase {\n+  private static final String CREATE_PARTITIONED_PARQUET = \"CREATE TABLE %s (id INT, data STRING) \" +\n+      \"using parquet PARTITIONED BY (id) LOCATION '%s'\";\n+  private static final String CREATE_PARQUET = \"CREATE TABLE %s (id INT, data STRING) \" +\n+      \"using parquet LOCATION '%s'\";\n+  private static final String CREATE_HIVE_EXTERNAL_PARQUET = \"CREATE EXTERNAL TABLE %s (data STRING) \" +\n+      \"PARTITIONED BY (id INT) STORED AS parquet LOCATION '%s'\";\n+  private static final String CREATE_HIVE_PARQUET = \"CREATE TABLE %s (data STRING) \" +\n+      \"PARTITIONED BY (id INT) STORED AS parquet\";\n+\n+  private static final String NAMESPACE = \"default\";\n+\n+  @Parameterized.Parameters(name = \"Catalog Name {0} - Options {2}\")\n+  public static Object[][] parameters() {\n+    return new Object[][] {\n+        new Object[] {\"spark_catalog\", SparkSessionCatalog.class.getName(), ImmutableMap.of(\n+            \"type\", \"hive\",\n+            \"default-namespace\", \"default\",\n+            \"parquet-enabled\", \"true\",\n+            \"cache-enabled\", \"false\" // Spark will delete tables using v1, leaving the cache out of sync\n+        )},\n+        new Object[] {\"spark_catalog\", SparkSessionCatalog.class.getName(), ImmutableMap.of(\n+            \"type\", \"hadoop\",\n+            \"default-namespace\", \"default\",\n+            \"parquet-enabled\", \"true\",\n+            \"cache-enabled\", \"false\" // Spark will delete tables using v1, leaving the cache out of sync\n+        )},\n+        new Object[] { \"testhive\", SparkCatalog.class.getName(), ImmutableMap.of(\n+            \"type\", \"hive\",\n+            \"default-namespace\", \"default\"\n+        )},\n+        new Object[] { \"testhadoop\", SparkCatalog.class.getName(), ImmutableMap.of(\n+            \"type\", \"hadoop\",\n+            \"default-namespace\", \"default\"\n+        )}\n+    };\n+  }\n+\n+  @Rule\n+  public TemporaryFolder temp = new TemporaryFolder();\n+\n+  private String baseTableName = \"baseTable\";\n+  private File tableDir;\n+  private String tableLocation;\n+  private final String type;\n+  private final TableCatalog catalog;\n+\n+  public TestCreateActions(\n+      String catalogName,\n+      String implementation,\n+      Map<String, String> config) {\n+    super(catalogName, implementation, config);\n+    this.catalog = (TableCatalog) spark.sessionState().catalogManager().catalog(catalogName);\n+    this.type = config.get(\"type\");\n+  }\n+\n+  @Before\n+  public void before() {\n+    try {\n+      this.tableDir = temp.newFolder();\n+    } catch (IOException e) {\n+      throw new RuntimeException(e);\n+    }\n+    this.tableLocation = tableDir.toURI().toString();\n+\n+    spark.conf().set(\"hive.exec.dynamic.partition\", \"true\");\n+    spark.conf().set(\"hive.exec.dynamic.partition.mode\", \"nonstrict\");\n+    spark.sql(String.format(\"DROP TABLE IF EXISTS %s\", baseTableName));\n+\n+    List<SimpleRecord> expected = Lists.newArrayList(\n+        new SimpleRecord(1, \"a\"),\n+        new SimpleRecord(2, \"b\"),\n+        new SimpleRecord(3, \"c\")\n+    );\n+\n+    Dataset<Row> df = spark.createDataFrame(expected, SimpleRecord.class);\n+\n+    df.select(\"id\", \"data\").orderBy(\"data\").write()\n+        .mode(\"append\")\n+        .option(\"path\", tableLocation)\n+        .saveAsTable(baseTableName);\n+  }\n+\n+  @After\n+  public void after() throws IOException {\n+    // Drop the hive table.\n+    spark.sql(String.format(\"DROP TABLE IF EXISTS %s\", baseTableName));\n+  }\n+\n+  @Test\n+  public void testMigratePartitioned() throws Exception {\n+    Assume.assumeTrue(\"Cannot migrate to a hadoop based catalog\", !type.equals(\"hadoop\"));\n+    Assume.assumeTrue(\"Can only migrate from Spark Session Catalog\", catalog.name().equals(\"spark_catalog\"));\n+    String source = sourceName(\"test_migrate_partitioned_table\");\n+    String dest = source;\n+    createSourceTable(CREATE_PARTITIONED_PARQUET, source);\n+    assertMigratedFileCount(Actions.migrate(source), source, dest);\n+  }\n+\n+  @Test\n+  public void testMigrateUnpartitioned() throws Exception {\n+    Assume.assumeTrue(\"Cannot migrate to a hadoop based catalog\", !type.equals(\"hadoop\"));\n+    Assume.assumeTrue(\"Can only migrate from Spark Session Catalog\", catalog.name().equals(\"spark_catalog\"));\n+    String source = sourceName(\"test_migrate_unpartitioned_table\");\n+    String dest = source;\n+    createSourceTable(CREATE_PARQUET, source);\n+    assertMigratedFileCount(Actions.migrate(source), source, dest);\n+  }\n+\n+  @Test\n+  public void testSnapshotPartitioned() throws Exception {\n+    Assume.assumeTrue(\"Cannot snapshot with arbitrary location in a hadoop based catalog\",\n+        !type.equals(\"hadoop\"));\n+    File location = temp.newFolder();\n+    String source = sourceName(\"test_snapshot_partitioned_table\");\n+    String dest = destName(\"iceberg_snapshot_partitioned\");\n+    createSourceTable(CREATE_PARTITIONED_PARQUET, source);\n+    assertMigratedFileCount(Actions.snapshot(source, dest, location.toString()), source, dest);\n+    assertIsolatedSnapshot(source, dest);\n+  }\n+\n+  @Test\n+  public void testSnapshotUnpartitioned() throws Exception {\n+    Assume.assumeTrue(\"Cannot snapshot with arbitrary location in a hadoop based catalog\",\n+        !type.equals(\"hadoop\"));\n+    File location = temp.newFolder();\n+    String source = sourceName(\"test_snapshot_unpartitioned_table\");\n+    String dest = destName(\"iceberg_snapshot_unpartitioned\");\n+    createSourceTable(CREATE_PARQUET, source);\n+    assertMigratedFileCount(Actions.snapshot(source, dest, location.toString()), source, dest);\n+    assertIsolatedSnapshot(source, dest);\n+  }\n+\n+  @Test\n+  public void testSnapshotHiveTable() throws Exception {\n+    Assume.assumeTrue(\"Cannot snapshot with arbitrary location in a hadoop based catalog\",\n+        !type.equals(\"hadoop\"));\n+    File location = temp.newFolder();\n+    String source = sourceName(\"snapshot_hive_table\");\n+    String dest = destName(\"iceberg_snapshot_hive_table\");\n+    createSourceTable(CREATE_HIVE_EXTERNAL_PARQUET, source);\n+    assertMigratedFileCount(Actions.snapshot(source, dest, location.toString()), source, dest);\n+    assertIsolatedSnapshot(source, dest);\n+  }\n+\n+  @Test\n+  public void testMigrateHiveTable() throws Exception {\n+    Assume.assumeTrue(\"Cannot migrate to a hadoop based catalog\", !type.equals(\"hadoop\"));\n+    String source = sourceName(\"migrate_hive_table\");\n+    String dest = source;\n+    createSourceTable(CREATE_HIVE_EXTERNAL_PARQUET, source);\n+    assertMigratedFileCount(Actions.migrate(source), source, dest);\n+  }\n+\n+  @Test\n+  public void testSnapshotManagedHiveTable() throws Exception {\n+    Assume.assumeTrue(\"Cannot migrate to a hadoop based catalog\", !type.equals(\"hadoop\"));\n+    File location = temp.newFolder();\n+    String source = sourceName(\"snapshot_managed_hive_table\");\n+    String dest = destName(\"iceberg_snapshot_managed_hive_table\");\n+    createSourceTable(CREATE_HIVE_PARQUET, source);\n+    assertMigratedFileCount(Actions.snapshot(source, dest, location.toString()), source, dest);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "09f329bc39e8a2a1b2b5f925c580a2177833510b"}, "originalPosition": 222}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjI5NzA4Mw==", "bodyText": "Changed the interfaces around so it is no longer part of the static method", "url": "https://github.com/apache/iceberg/pull/1525#discussion_r536297083", "createdAt": "2020-12-04T18:32:06Z", "author": {"login": "RussellSpitzer"}, "path": "spark3/src/test/java/org/apache/iceberg/actions/TestCreateActions.java", "diffHunk": "@@ -0,0 +1,347 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.actions;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+import org.apache.commons.io.FileUtils;\n+import org.apache.commons.io.filefilter.TrueFileFilter;\n+import org.apache.iceberg.relocated.com.google.common.collect.ImmutableMap;\n+import org.apache.iceberg.relocated.com.google.common.collect.Lists;\n+import org.apache.iceberg.relocated.com.google.common.collect.Maps;\n+import org.apache.iceberg.spark.Spark3Util;\n+import org.apache.iceberg.spark.SparkCatalog;\n+import org.apache.iceberg.spark.SparkCatalogTestBase;\n+import org.apache.iceberg.spark.SparkSessionCatalog;\n+import org.apache.iceberg.spark.source.SimpleRecord;\n+import org.apache.iceberg.spark.source.SparkTable;\n+import org.apache.spark.sql.Dataset;\n+import org.apache.spark.sql.Row;\n+import org.apache.spark.sql.SaveMode;\n+import org.apache.spark.sql.catalyst.TableIdentifier;\n+import org.apache.spark.sql.catalyst.analysis.NoSuchDatabaseException;\n+import org.apache.spark.sql.catalyst.analysis.NoSuchTableException;\n+import org.apache.spark.sql.catalyst.catalog.CatalogTable;\n+import org.apache.spark.sql.catalyst.parser.ParseException;\n+import org.apache.spark.sql.connector.catalog.Identifier;\n+import org.apache.spark.sql.connector.catalog.TableCatalog;\n+import org.junit.After;\n+import org.junit.Assert;\n+import org.junit.Assume;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.TemporaryFolder;\n+import org.junit.runners.Parameterized;\n+import scala.Some;\n+import scala.collection.Seq;\n+\n+public class TestCreateActions extends SparkCatalogTestBase {\n+  private static final String CREATE_PARTITIONED_PARQUET = \"CREATE TABLE %s (id INT, data STRING) \" +\n+      \"using parquet PARTITIONED BY (id) LOCATION '%s'\";\n+  private static final String CREATE_PARQUET = \"CREATE TABLE %s (id INT, data STRING) \" +\n+      \"using parquet LOCATION '%s'\";\n+  private static final String CREATE_HIVE_EXTERNAL_PARQUET = \"CREATE EXTERNAL TABLE %s (data STRING) \" +\n+      \"PARTITIONED BY (id INT) STORED AS parquet LOCATION '%s'\";\n+  private static final String CREATE_HIVE_PARQUET = \"CREATE TABLE %s (data STRING) \" +\n+      \"PARTITIONED BY (id INT) STORED AS parquet\";\n+\n+  private static final String NAMESPACE = \"default\";\n+\n+  @Parameterized.Parameters(name = \"Catalog Name {0} - Options {2}\")\n+  public static Object[][] parameters() {\n+    return new Object[][] {\n+        new Object[] {\"spark_catalog\", SparkSessionCatalog.class.getName(), ImmutableMap.of(\n+            \"type\", \"hive\",\n+            \"default-namespace\", \"default\",\n+            \"parquet-enabled\", \"true\",\n+            \"cache-enabled\", \"false\" // Spark will delete tables using v1, leaving the cache out of sync\n+        )},\n+        new Object[] {\"spark_catalog\", SparkSessionCatalog.class.getName(), ImmutableMap.of(\n+            \"type\", \"hadoop\",\n+            \"default-namespace\", \"default\",\n+            \"parquet-enabled\", \"true\",\n+            \"cache-enabled\", \"false\" // Spark will delete tables using v1, leaving the cache out of sync\n+        )},\n+        new Object[] { \"testhive\", SparkCatalog.class.getName(), ImmutableMap.of(\n+            \"type\", \"hive\",\n+            \"default-namespace\", \"default\"\n+        )},\n+        new Object[] { \"testhadoop\", SparkCatalog.class.getName(), ImmutableMap.of(\n+            \"type\", \"hadoop\",\n+            \"default-namespace\", \"default\"\n+        )}\n+    };\n+  }\n+\n+  @Rule\n+  public TemporaryFolder temp = new TemporaryFolder();\n+\n+  private String baseTableName = \"baseTable\";\n+  private File tableDir;\n+  private String tableLocation;\n+  private final String type;\n+  private final TableCatalog catalog;\n+\n+  public TestCreateActions(\n+      String catalogName,\n+      String implementation,\n+      Map<String, String> config) {\n+    super(catalogName, implementation, config);\n+    this.catalog = (TableCatalog) spark.sessionState().catalogManager().catalog(catalogName);\n+    this.type = config.get(\"type\");\n+  }\n+\n+  @Before\n+  public void before() {\n+    try {\n+      this.tableDir = temp.newFolder();\n+    } catch (IOException e) {\n+      throw new RuntimeException(e);\n+    }\n+    this.tableLocation = tableDir.toURI().toString();\n+\n+    spark.conf().set(\"hive.exec.dynamic.partition\", \"true\");\n+    spark.conf().set(\"hive.exec.dynamic.partition.mode\", \"nonstrict\");\n+    spark.sql(String.format(\"DROP TABLE IF EXISTS %s\", baseTableName));\n+\n+    List<SimpleRecord> expected = Lists.newArrayList(\n+        new SimpleRecord(1, \"a\"),\n+        new SimpleRecord(2, \"b\"),\n+        new SimpleRecord(3, \"c\")\n+    );\n+\n+    Dataset<Row> df = spark.createDataFrame(expected, SimpleRecord.class);\n+\n+    df.select(\"id\", \"data\").orderBy(\"data\").write()\n+        .mode(\"append\")\n+        .option(\"path\", tableLocation)\n+        .saveAsTable(baseTableName);\n+  }\n+\n+  @After\n+  public void after() throws IOException {\n+    // Drop the hive table.\n+    spark.sql(String.format(\"DROP TABLE IF EXISTS %s\", baseTableName));\n+  }\n+\n+  @Test\n+  public void testMigratePartitioned() throws Exception {\n+    Assume.assumeTrue(\"Cannot migrate to a hadoop based catalog\", !type.equals(\"hadoop\"));\n+    Assume.assumeTrue(\"Can only migrate from Spark Session Catalog\", catalog.name().equals(\"spark_catalog\"));\n+    String source = sourceName(\"test_migrate_partitioned_table\");\n+    String dest = source;\n+    createSourceTable(CREATE_PARTITIONED_PARQUET, source);\n+    assertMigratedFileCount(Actions.migrate(source), source, dest);\n+  }\n+\n+  @Test\n+  public void testMigrateUnpartitioned() throws Exception {\n+    Assume.assumeTrue(\"Cannot migrate to a hadoop based catalog\", !type.equals(\"hadoop\"));\n+    Assume.assumeTrue(\"Can only migrate from Spark Session Catalog\", catalog.name().equals(\"spark_catalog\"));\n+    String source = sourceName(\"test_migrate_unpartitioned_table\");\n+    String dest = source;\n+    createSourceTable(CREATE_PARQUET, source);\n+    assertMigratedFileCount(Actions.migrate(source), source, dest);\n+  }\n+\n+  @Test\n+  public void testSnapshotPartitioned() throws Exception {\n+    Assume.assumeTrue(\"Cannot snapshot with arbitrary location in a hadoop based catalog\",\n+        !type.equals(\"hadoop\"));\n+    File location = temp.newFolder();\n+    String source = sourceName(\"test_snapshot_partitioned_table\");\n+    String dest = destName(\"iceberg_snapshot_partitioned\");\n+    createSourceTable(CREATE_PARTITIONED_PARQUET, source);\n+    assertMigratedFileCount(Actions.snapshot(source, dest, location.toString()), source, dest);\n+    assertIsolatedSnapshot(source, dest);\n+  }\n+\n+  @Test\n+  public void testSnapshotUnpartitioned() throws Exception {\n+    Assume.assumeTrue(\"Cannot snapshot with arbitrary location in a hadoop based catalog\",\n+        !type.equals(\"hadoop\"));\n+    File location = temp.newFolder();\n+    String source = sourceName(\"test_snapshot_unpartitioned_table\");\n+    String dest = destName(\"iceberg_snapshot_unpartitioned\");\n+    createSourceTable(CREATE_PARQUET, source);\n+    assertMigratedFileCount(Actions.snapshot(source, dest, location.toString()), source, dest);\n+    assertIsolatedSnapshot(source, dest);\n+  }\n+\n+  @Test\n+  public void testSnapshotHiveTable() throws Exception {\n+    Assume.assumeTrue(\"Cannot snapshot with arbitrary location in a hadoop based catalog\",\n+        !type.equals(\"hadoop\"));\n+    File location = temp.newFolder();\n+    String source = sourceName(\"snapshot_hive_table\");\n+    String dest = destName(\"iceberg_snapshot_hive_table\");\n+    createSourceTable(CREATE_HIVE_EXTERNAL_PARQUET, source);\n+    assertMigratedFileCount(Actions.snapshot(source, dest, location.toString()), source, dest);\n+    assertIsolatedSnapshot(source, dest);\n+  }\n+\n+  @Test\n+  public void testMigrateHiveTable() throws Exception {\n+    Assume.assumeTrue(\"Cannot migrate to a hadoop based catalog\", !type.equals(\"hadoop\"));\n+    String source = sourceName(\"migrate_hive_table\");\n+    String dest = source;\n+    createSourceTable(CREATE_HIVE_EXTERNAL_PARQUET, source);\n+    assertMigratedFileCount(Actions.migrate(source), source, dest);\n+  }\n+\n+  @Test\n+  public void testSnapshotManagedHiveTable() throws Exception {\n+    Assume.assumeTrue(\"Cannot migrate to a hadoop based catalog\", !type.equals(\"hadoop\"));\n+    File location = temp.newFolder();\n+    String source = sourceName(\"snapshot_managed_hive_table\");\n+    String dest = destName(\"iceberg_snapshot_managed_hive_table\");\n+    createSourceTable(CREATE_HIVE_PARQUET, source);\n+    assertMigratedFileCount(Actions.snapshot(source, dest, location.toString()), source, dest);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTc5NDE5MA=="}, "originalCommit": {"oid": "09f329bc39e8a2a1b2b5f925c580a2177833510b"}, "originalPosition": 222}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2MTY5Njc3OnYy", "diffSide": "RIGHT", "path": "spark/src/main/java/org/apache/iceberg/actions/Actions.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQwMjo0MzozN1rOH--TUQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQxNzowMzoxNlrOH_Zy6Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTc5NDUxMw==", "bodyText": "I would probably remove this. I don't see a need to supply location this way and it adds complexity with an additional dynamic method call.", "url": "https://github.com/apache/iceberg/pull/1525#discussion_r535794513", "createdAt": "2020-12-04T02:43:37Z", "author": {"login": "rdblue"}, "path": "spark/src/main/java/org/apache/iceberg/actions/Actions.java", "diffHunk": "@@ -77,6 +82,120 @@ public ExpireSnapshotsAction expireSnapshots() {\n     return new ExpireSnapshotsAction(spark, table);\n   }\n \n+  /**\n+   * Converts the provided table into an Iceberg table in place. The table will no longer be represented by it's\n+   * previous provider in the session catalog and a new metadata directory will be created at the table's location.\n+   *\n+   * @param tableName Table to be converted\n+   * @return {@link CreateAction} to perform migration\n+   */\n+  public static CreateAction migrate(String tableName) {\n+    try {\n+      return DynMethods.builder(\"migrate\")\n+          .impl(implClass(), String.class).buildStaticChecked()\n+          .invoke(tableName);\n+    } catch (NoSuchMethodException ex) {\n+      throw new UnsupportedOperationException(\"Migrate is not implemented for this version of Spark\");\n+    }\n+  }\n+\n+  /**\n+   * Converts the provided table into an Iceberg table in place. The table will no longer be accesible by it's\n+   * previous implementation\n+   *\n+   * @param tableName Table to be converted\n+   * @param spark     Spark session to use for looking up table\n+   * @return {@link CreateAction} to perform migration\n+   */\n+  public static CreateAction migrate(SparkSession spark, String tableName) {\n+    try {\n+      return DynMethods.builder(\"migrate\")\n+          .impl(implClass(), SparkSession.class, String.class).buildStaticChecked()\n+          .invoke(spark, tableName);\n+    } catch (NoSuchMethodException ex) {\n+      throw new UnsupportedOperationException(\"Migrate is not implemented for this version of Spark\");\n+    }\n+  }\n+\n+  /**\n+   * Creates an independent Iceberg table based on a given table. The new Iceberg table can be altered, appended or\n+   * deleted without causing any change to the original. New data and metadata will be created in the default\n+   * location for tables of this name in the destination catalog.\n+   *\n+   * @param sourceTable Original table which is the basis for the new Iceberg table\n+   * @param destTable   New Iceberg table being created\n+   * @return {@link CreateAction} to perform snapshot\n+   */\n+  public static CreateAction snapshot(SparkSession spark, String sourceTable, String destTable) {\n+    try {\n+      return DynMethods.builder(\"snapshot\")\n+          .impl(implClass(), SparkSession.class, String.class, String.class).buildStaticChecked()\n+          .invoke(spark, sourceTable, destTable);\n+    } catch (NoSuchMethodException ex) {\n+      throw new UnsupportedOperationException(\"Snapshot is not implemented for this version of Spark\");\n+    }\n+  }\n+\n+  /**\n+   * Creates an independent Iceberg table based on a given table. The new Iceberg table can be altered, appended or\n+   * deleted without causing any change to the original. New data and metadata will be created in the default\n+   * location for tables of this name in the destination catalog.\n+   *\n+   * @param sourceTable Original table which is the basis for the new Iceberg table\n+   * @param destTable   New Iceberg table being created\n+   * @return {@link CreateAction} to perform snapshot\n+   */\n+  public static CreateAction snapshot(String sourceTable, String destTable) {\n+    try {\n+      return DynMethods.builder(\"snapshot\")\n+          .impl(implClass(), String.class, String.class).buildStaticChecked()\n+          .invoke(sourceTable, destTable);\n+    } catch (NoSuchMethodException ex) {\n+      throw new UnsupportedOperationException(\"Snapshot is not implemented for this version of Spark\");\n+    }\n+  }\n+\n+  /**\n+   * Creates an independent Iceberg table based on a given table. The new Iceberg table can be altered, appended or\n+   * deleted without causing any change to the original. New data and metadata will be created in the\n+   * new location passed to this method.\n+   *\n+   * @param sourceTable Original table which is the basis for the new Iceberg table\n+   * @param destTable   New Iceberg table being created\n+   * @param location Location for metadata and new data for the new table\n+   * @return {@link CreateAction} to perform snapshot\n+   */\n+  public static CreateAction snapshot(String sourceTable, String destTable, String location) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "09f329bc39e8a2a1b2b5f925c580a2177833510b"}, "originalPosition": 110}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjI0NDk2OQ==", "bodyText": "Removed, added another Interface SnapshotAction, with \"withLocation\" method for supplying location", "url": "https://github.com/apache/iceberg/pull/1525#discussion_r536244969", "createdAt": "2020-12-04T17:03:16Z", "author": {"login": "RussellSpitzer"}, "path": "spark/src/main/java/org/apache/iceberg/actions/Actions.java", "diffHunk": "@@ -77,6 +82,120 @@ public ExpireSnapshotsAction expireSnapshots() {\n     return new ExpireSnapshotsAction(spark, table);\n   }\n \n+  /**\n+   * Converts the provided table into an Iceberg table in place. The table will no longer be represented by it's\n+   * previous provider in the session catalog and a new metadata directory will be created at the table's location.\n+   *\n+   * @param tableName Table to be converted\n+   * @return {@link CreateAction} to perform migration\n+   */\n+  public static CreateAction migrate(String tableName) {\n+    try {\n+      return DynMethods.builder(\"migrate\")\n+          .impl(implClass(), String.class).buildStaticChecked()\n+          .invoke(tableName);\n+    } catch (NoSuchMethodException ex) {\n+      throw new UnsupportedOperationException(\"Migrate is not implemented for this version of Spark\");\n+    }\n+  }\n+\n+  /**\n+   * Converts the provided table into an Iceberg table in place. The table will no longer be accesible by it's\n+   * previous implementation\n+   *\n+   * @param tableName Table to be converted\n+   * @param spark     Spark session to use for looking up table\n+   * @return {@link CreateAction} to perform migration\n+   */\n+  public static CreateAction migrate(SparkSession spark, String tableName) {\n+    try {\n+      return DynMethods.builder(\"migrate\")\n+          .impl(implClass(), SparkSession.class, String.class).buildStaticChecked()\n+          .invoke(spark, tableName);\n+    } catch (NoSuchMethodException ex) {\n+      throw new UnsupportedOperationException(\"Migrate is not implemented for this version of Spark\");\n+    }\n+  }\n+\n+  /**\n+   * Creates an independent Iceberg table based on a given table. The new Iceberg table can be altered, appended or\n+   * deleted without causing any change to the original. New data and metadata will be created in the default\n+   * location for tables of this name in the destination catalog.\n+   *\n+   * @param sourceTable Original table which is the basis for the new Iceberg table\n+   * @param destTable   New Iceberg table being created\n+   * @return {@link CreateAction} to perform snapshot\n+   */\n+  public static CreateAction snapshot(SparkSession spark, String sourceTable, String destTable) {\n+    try {\n+      return DynMethods.builder(\"snapshot\")\n+          .impl(implClass(), SparkSession.class, String.class, String.class).buildStaticChecked()\n+          .invoke(spark, sourceTable, destTable);\n+    } catch (NoSuchMethodException ex) {\n+      throw new UnsupportedOperationException(\"Snapshot is not implemented for this version of Spark\");\n+    }\n+  }\n+\n+  /**\n+   * Creates an independent Iceberg table based on a given table. The new Iceberg table can be altered, appended or\n+   * deleted without causing any change to the original. New data and metadata will be created in the default\n+   * location for tables of this name in the destination catalog.\n+   *\n+   * @param sourceTable Original table which is the basis for the new Iceberg table\n+   * @param destTable   New Iceberg table being created\n+   * @return {@link CreateAction} to perform snapshot\n+   */\n+  public static CreateAction snapshot(String sourceTable, String destTable) {\n+    try {\n+      return DynMethods.builder(\"snapshot\")\n+          .impl(implClass(), String.class, String.class).buildStaticChecked()\n+          .invoke(sourceTable, destTable);\n+    } catch (NoSuchMethodException ex) {\n+      throw new UnsupportedOperationException(\"Snapshot is not implemented for this version of Spark\");\n+    }\n+  }\n+\n+  /**\n+   * Creates an independent Iceberg table based on a given table. The new Iceberg table can be altered, appended or\n+   * deleted without causing any change to the original. New data and metadata will be created in the\n+   * new location passed to this method.\n+   *\n+   * @param sourceTable Original table which is the basis for the new Iceberg table\n+   * @param destTable   New Iceberg table being created\n+   * @param location Location for metadata and new data for the new table\n+   * @return {@link CreateAction} to perform snapshot\n+   */\n+  public static CreateAction snapshot(String sourceTable, String destTable, String location) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTc5NDUxMw=="}, "originalCommit": {"oid": "09f329bc39e8a2a1b2b5f925c580a2177833510b"}, "originalPosition": 110}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2NDkxNzE4OnYy", "diffSide": "RIGHT", "path": "spark/src/main/java/org/apache/iceberg/actions/CreateAction.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQxNzozNDoxNFrOH_a4cw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQxNzozNDoxNFrOH_a4cw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjI2Mjc3MQ==", "bodyText": "Should it be withProperties like we have in Catalog.Builder?", "url": "https://github.com/apache/iceberg/pull/1525#discussion_r536262771", "createdAt": "2020-12-04T17:34:14Z", "author": {"login": "aokolnychyi"}, "path": "spark/src/main/java/org/apache/iceberg/actions/CreateAction.java", "diffHunk": "@@ -0,0 +1,43 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.actions;\n+\n+import java.util.Map;\n+\n+interface CreateAction extends Action<Long> {\n+\n+  /**\n+   * Adds additional properties to the newly created Iceberg Table. Any properties with\n+   * the same key name will be overwritten.\n+   * @param properties a map of properties to be included\n+   * @return this for chaining\n+   */\n+  CreateAction setAll(Map<String, String> properties);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "09f329bc39e8a2a1b2b5f925c580a2177833510b"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2NDkxODY5OnYy", "diffSide": "RIGHT", "path": "spark/src/main/java/org/apache/iceberg/actions/CreateAction.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQxNzozNDozMlrOH_a5Qw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQxNzozNDozMlrOH_a5Qw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjI2Mjk3OQ==", "bodyText": "And withProperty here?", "url": "https://github.com/apache/iceberg/pull/1525#discussion_r536262979", "createdAt": "2020-12-04T17:34:32Z", "author": {"login": "aokolnychyi"}, "path": "spark/src/main/java/org/apache/iceberg/actions/CreateAction.java", "diffHunk": "@@ -0,0 +1,43 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.actions;\n+\n+import java.util.Map;\n+\n+interface CreateAction extends Action<Long> {\n+\n+  /**\n+   * Adds additional properties to the newly created Iceberg Table. Any properties with\n+   * the same key name will be overwritten.\n+   * @param properties a map of properties to be included\n+   * @return this for chaining\n+   */\n+  CreateAction setAll(Map<String, String> properties);\n+\n+  /**\n+   * Adds an additional property to the newly created Iceberg Table. Any properties\n+   * with the same key name will be overwritten.\n+   * @param key the key of the property to add\n+   * @param value the value of the property to add\n+   * @return this for chaining\n+   */\n+  CreateAction set(String key, String value);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "09f329bc39e8a2a1b2b5f925c580a2177833510b"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2NDk3ODQ5OnYy", "diffSide": "RIGHT", "path": "spark3/src/main/java/org/apache/iceberg/actions/Spark3CreateAction.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQxNzo0OToxNFrOH_bcDw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQxNzo0OToxNFrOH_bcDw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjI3MTg4Nw==", "bodyText": "nit: formatting is off", "url": "https://github.com/apache/iceberg/pull/1525#discussion_r536271887", "createdAt": "2020-12-04T17:49:14Z", "author": {"login": "aokolnychyi"}, "path": "spark3/src/main/java/org/apache/iceberg/actions/Spark3CreateAction.java", "diffHunk": "@@ -0,0 +1,183 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.actions;\n+\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Set;\n+import org.apache.iceberg.PartitionSpec;\n+import org.apache.iceberg.Table;\n+import org.apache.iceberg.TableProperties;\n+import org.apache.iceberg.mapping.MappingUtil;\n+import org.apache.iceberg.mapping.NameMapping;\n+import org.apache.iceberg.mapping.NameMappingParser;\n+import org.apache.iceberg.relocated.com.google.common.collect.ImmutableMap;\n+import org.apache.iceberg.relocated.com.google.common.collect.ImmutableSet;\n+import org.apache.iceberg.relocated.com.google.common.collect.Maps;\n+import org.apache.iceberg.spark.SparkCatalog;\n+import org.apache.iceberg.spark.SparkSchemaUtil;\n+import org.apache.iceberg.spark.SparkSessionCatalog;\n+import org.apache.spark.sql.AnalysisException;\n+import org.apache.spark.sql.SparkSession;\n+import org.apache.spark.sql.catalyst.analysis.NoSuchTableException;\n+import org.apache.spark.sql.catalyst.catalog.CatalogTable;\n+import org.apache.spark.sql.catalyst.catalog.CatalogUtils;\n+import org.apache.spark.sql.connector.catalog.CatalogPlugin;\n+import org.apache.spark.sql.connector.catalog.Identifier;\n+import org.apache.spark.sql.connector.catalog.StagingTableCatalog;\n+import org.apache.spark.sql.connector.catalog.TableCatalog;\n+import org.apache.spark.sql.connector.catalog.V1Table;\n+import org.apache.spark.sql.connector.expressions.Transform;\n+\n+abstract class Spark3CreateAction implements CreateAction {\n+  private static final Set<String> ALLOWED_SOURCES = ImmutableSet.of(\"parquet\", \"avro\", \"orc\", \"hive\");\n+  protected static final String ICEBERG_METADATA_FOLDER = \"metadata\";\n+\n+  private final SparkSession spark;\n+\n+  // Source Fields\n+  private final V1Table sourceTable;\n+  private final CatalogTable sourceCatalogTable;\n+  private final String sourceTableLocation;\n+  private final CatalogPlugin sourceCatalog;\n+  private final Identifier sourceTableName;\n+  private final PartitionSpec sourcePartitionSpec;\n+\n+  // Destination Fields\n+  private final StagingTableCatalog destCatalog;\n+  private final Identifier destTableName;\n+\n+  // Optional Parameters for destination\n+  private Map<String, String> additionalProperties = Maps.newHashMap();\n+\n+  Spark3CreateAction(SparkSession spark, CatalogPlugin sourceCatalog, Identifier sourceTableName,\n+                       CatalogPlugin destCatalog,  Identifier destTableName) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "09f329bc39e8a2a1b2b5f925c580a2177833510b"}, "originalPosition": 71}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2NTA2MzU1OnYy", "diffSide": "RIGHT", "path": "spark3/src/main/java/org/apache/iceberg/actions/Spark3CreateAction.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQxODoxMDozMVrOH_cOQA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQxODoxMDozMVrOH_cOQA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjI4NDczNg==", "bodyText": "Seems like it will be possible to snapshot a non-Iceberg Hive table as Iceberg Hadoop table. I thought for a sec we should disable such cases but there is probably no good reason. We can snapshot tables from other catalogs.", "url": "https://github.com/apache/iceberg/pull/1525#discussion_r536284736", "createdAt": "2020-12-04T18:10:31Z", "author": {"login": "aokolnychyi"}, "path": "spark3/src/main/java/org/apache/iceberg/actions/Spark3CreateAction.java", "diffHunk": "@@ -0,0 +1,183 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.actions;\n+\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Set;\n+import org.apache.iceberg.PartitionSpec;\n+import org.apache.iceberg.Table;\n+import org.apache.iceberg.TableProperties;\n+import org.apache.iceberg.mapping.MappingUtil;\n+import org.apache.iceberg.mapping.NameMapping;\n+import org.apache.iceberg.mapping.NameMappingParser;\n+import org.apache.iceberg.relocated.com.google.common.collect.ImmutableMap;\n+import org.apache.iceberg.relocated.com.google.common.collect.ImmutableSet;\n+import org.apache.iceberg.relocated.com.google.common.collect.Maps;\n+import org.apache.iceberg.spark.SparkCatalog;\n+import org.apache.iceberg.spark.SparkSchemaUtil;\n+import org.apache.iceberg.spark.SparkSessionCatalog;\n+import org.apache.spark.sql.AnalysisException;\n+import org.apache.spark.sql.SparkSession;\n+import org.apache.spark.sql.catalyst.analysis.NoSuchTableException;\n+import org.apache.spark.sql.catalyst.catalog.CatalogTable;\n+import org.apache.spark.sql.catalyst.catalog.CatalogUtils;\n+import org.apache.spark.sql.connector.catalog.CatalogPlugin;\n+import org.apache.spark.sql.connector.catalog.Identifier;\n+import org.apache.spark.sql.connector.catalog.StagingTableCatalog;\n+import org.apache.spark.sql.connector.catalog.TableCatalog;\n+import org.apache.spark.sql.connector.catalog.V1Table;\n+import org.apache.spark.sql.connector.expressions.Transform;\n+\n+abstract class Spark3CreateAction implements CreateAction {\n+  private static final Set<String> ALLOWED_SOURCES = ImmutableSet.of(\"parquet\", \"avro\", \"orc\", \"hive\");\n+  protected static final String ICEBERG_METADATA_FOLDER = \"metadata\";\n+\n+  private final SparkSession spark;\n+\n+  // Source Fields\n+  private final V1Table sourceTable;\n+  private final CatalogTable sourceCatalogTable;\n+  private final String sourceTableLocation;\n+  private final CatalogPlugin sourceCatalog;\n+  private final Identifier sourceTableName;\n+  private final PartitionSpec sourcePartitionSpec;\n+\n+  // Destination Fields\n+  private final StagingTableCatalog destCatalog;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "09f329bc39e8a2a1b2b5f925c580a2177833510b"}, "originalPosition": 64}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2NTEwNDcyOnYy", "diffSide": "RIGHT", "path": "spark3/src/main/java/org/apache/iceberg/actions/Spark3CreateAction.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQxODoyMToxMlrOH_cmXg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxNTozNToyNlrOICa6Pg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjI5MDkxMA==", "bodyText": "This must always be TableCatalog, right? Should we validate this early and call checkSourceCatalog on it? The validation method can be void and can operate on TableCatalog.", "url": "https://github.com/apache/iceberg/pull/1525#discussion_r536290910", "createdAt": "2020-12-04T18:21:12Z", "author": {"login": "aokolnychyi"}, "path": "spark3/src/main/java/org/apache/iceberg/actions/Spark3CreateAction.java", "diffHunk": "@@ -0,0 +1,183 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.actions;\n+\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Set;\n+import org.apache.iceberg.PartitionSpec;\n+import org.apache.iceberg.Table;\n+import org.apache.iceberg.TableProperties;\n+import org.apache.iceberg.mapping.MappingUtil;\n+import org.apache.iceberg.mapping.NameMapping;\n+import org.apache.iceberg.mapping.NameMappingParser;\n+import org.apache.iceberg.relocated.com.google.common.collect.ImmutableMap;\n+import org.apache.iceberg.relocated.com.google.common.collect.ImmutableSet;\n+import org.apache.iceberg.relocated.com.google.common.collect.Maps;\n+import org.apache.iceberg.spark.SparkCatalog;\n+import org.apache.iceberg.spark.SparkSchemaUtil;\n+import org.apache.iceberg.spark.SparkSessionCatalog;\n+import org.apache.spark.sql.AnalysisException;\n+import org.apache.spark.sql.SparkSession;\n+import org.apache.spark.sql.catalyst.analysis.NoSuchTableException;\n+import org.apache.spark.sql.catalyst.catalog.CatalogTable;\n+import org.apache.spark.sql.catalyst.catalog.CatalogUtils;\n+import org.apache.spark.sql.connector.catalog.CatalogPlugin;\n+import org.apache.spark.sql.connector.catalog.Identifier;\n+import org.apache.spark.sql.connector.catalog.StagingTableCatalog;\n+import org.apache.spark.sql.connector.catalog.TableCatalog;\n+import org.apache.spark.sql.connector.catalog.V1Table;\n+import org.apache.spark.sql.connector.expressions.Transform;\n+\n+abstract class Spark3CreateAction implements CreateAction {\n+  private static final Set<String> ALLOWED_SOURCES = ImmutableSet.of(\"parquet\", \"avro\", \"orc\", \"hive\");\n+  protected static final String ICEBERG_METADATA_FOLDER = \"metadata\";\n+\n+  private final SparkSession spark;\n+\n+  // Source Fields\n+  private final V1Table sourceTable;\n+  private final CatalogTable sourceCatalogTable;\n+  private final String sourceTableLocation;\n+  private final CatalogPlugin sourceCatalog;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "09f329bc39e8a2a1b2b5f925c580a2177833510b"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjI5ODEzMQ==", "bodyText": "Ryan also suggested this, I changed it", "url": "https://github.com/apache/iceberg/pull/1525#discussion_r536298131", "createdAt": "2020-12-04T18:34:01Z", "author": {"login": "RussellSpitzer"}, "path": "spark3/src/main/java/org/apache/iceberg/actions/Spark3CreateAction.java", "diffHunk": "@@ -0,0 +1,183 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.actions;\n+\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Set;\n+import org.apache.iceberg.PartitionSpec;\n+import org.apache.iceberg.Table;\n+import org.apache.iceberg.TableProperties;\n+import org.apache.iceberg.mapping.MappingUtil;\n+import org.apache.iceberg.mapping.NameMapping;\n+import org.apache.iceberg.mapping.NameMappingParser;\n+import org.apache.iceberg.relocated.com.google.common.collect.ImmutableMap;\n+import org.apache.iceberg.relocated.com.google.common.collect.ImmutableSet;\n+import org.apache.iceberg.relocated.com.google.common.collect.Maps;\n+import org.apache.iceberg.spark.SparkCatalog;\n+import org.apache.iceberg.spark.SparkSchemaUtil;\n+import org.apache.iceberg.spark.SparkSessionCatalog;\n+import org.apache.spark.sql.AnalysisException;\n+import org.apache.spark.sql.SparkSession;\n+import org.apache.spark.sql.catalyst.analysis.NoSuchTableException;\n+import org.apache.spark.sql.catalyst.catalog.CatalogTable;\n+import org.apache.spark.sql.catalyst.catalog.CatalogUtils;\n+import org.apache.spark.sql.connector.catalog.CatalogPlugin;\n+import org.apache.spark.sql.connector.catalog.Identifier;\n+import org.apache.spark.sql.connector.catalog.StagingTableCatalog;\n+import org.apache.spark.sql.connector.catalog.TableCatalog;\n+import org.apache.spark.sql.connector.catalog.V1Table;\n+import org.apache.spark.sql.connector.expressions.Transform;\n+\n+abstract class Spark3CreateAction implements CreateAction {\n+  private static final Set<String> ALLOWED_SOURCES = ImmutableSet.of(\"parquet\", \"avro\", \"orc\", \"hive\");\n+  protected static final String ICEBERG_METADATA_FOLDER = \"metadata\";\n+\n+  private final SparkSession spark;\n+\n+  // Source Fields\n+  private final V1Table sourceTable;\n+  private final CatalogTable sourceCatalogTable;\n+  private final String sourceTableLocation;\n+  private final CatalogPlugin sourceCatalog;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjI5MDkxMA=="}, "originalCommit": {"oid": "09f329bc39e8a2a1b2b5f925c580a2177833510b"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODM3NzkzMA==", "bodyText": "@RussellSpitzer, this is yet to be updated? I see we changed the return type of the method but not the field.", "url": "https://github.com/apache/iceberg/pull/1525#discussion_r538377930", "createdAt": "2020-12-08T13:37:46Z", "author": {"login": "aokolnychyi"}, "path": "spark3/src/main/java/org/apache/iceberg/actions/Spark3CreateAction.java", "diffHunk": "@@ -0,0 +1,183 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.actions;\n+\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Set;\n+import org.apache.iceberg.PartitionSpec;\n+import org.apache.iceberg.Table;\n+import org.apache.iceberg.TableProperties;\n+import org.apache.iceberg.mapping.MappingUtil;\n+import org.apache.iceberg.mapping.NameMapping;\n+import org.apache.iceberg.mapping.NameMappingParser;\n+import org.apache.iceberg.relocated.com.google.common.collect.ImmutableMap;\n+import org.apache.iceberg.relocated.com.google.common.collect.ImmutableSet;\n+import org.apache.iceberg.relocated.com.google.common.collect.Maps;\n+import org.apache.iceberg.spark.SparkCatalog;\n+import org.apache.iceberg.spark.SparkSchemaUtil;\n+import org.apache.iceberg.spark.SparkSessionCatalog;\n+import org.apache.spark.sql.AnalysisException;\n+import org.apache.spark.sql.SparkSession;\n+import org.apache.spark.sql.catalyst.analysis.NoSuchTableException;\n+import org.apache.spark.sql.catalyst.catalog.CatalogTable;\n+import org.apache.spark.sql.catalyst.catalog.CatalogUtils;\n+import org.apache.spark.sql.connector.catalog.CatalogPlugin;\n+import org.apache.spark.sql.connector.catalog.Identifier;\n+import org.apache.spark.sql.connector.catalog.StagingTableCatalog;\n+import org.apache.spark.sql.connector.catalog.TableCatalog;\n+import org.apache.spark.sql.connector.catalog.V1Table;\n+import org.apache.spark.sql.connector.expressions.Transform;\n+\n+abstract class Spark3CreateAction implements CreateAction {\n+  private static final Set<String> ALLOWED_SOURCES = ImmutableSet.of(\"parquet\", \"avro\", \"orc\", \"hive\");\n+  protected static final String ICEBERG_METADATA_FOLDER = \"metadata\";\n+\n+  private final SparkSession spark;\n+\n+  // Source Fields\n+  private final V1Table sourceTable;\n+  private final CatalogTable sourceCatalogTable;\n+  private final String sourceTableLocation;\n+  private final CatalogPlugin sourceCatalog;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjI5MDkxMA=="}, "originalCommit": {"oid": "09f329bc39e8a2a1b2b5f925c580a2177833510b"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTQwODk1OA==", "bodyText": "Missed the field here", "url": "https://github.com/apache/iceberg/pull/1525#discussion_r539408958", "createdAt": "2020-12-09T15:35:26Z", "author": {"login": "RussellSpitzer"}, "path": "spark3/src/main/java/org/apache/iceberg/actions/Spark3CreateAction.java", "diffHunk": "@@ -0,0 +1,183 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.actions;\n+\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Set;\n+import org.apache.iceberg.PartitionSpec;\n+import org.apache.iceberg.Table;\n+import org.apache.iceberg.TableProperties;\n+import org.apache.iceberg.mapping.MappingUtil;\n+import org.apache.iceberg.mapping.NameMapping;\n+import org.apache.iceberg.mapping.NameMappingParser;\n+import org.apache.iceberg.relocated.com.google.common.collect.ImmutableMap;\n+import org.apache.iceberg.relocated.com.google.common.collect.ImmutableSet;\n+import org.apache.iceberg.relocated.com.google.common.collect.Maps;\n+import org.apache.iceberg.spark.SparkCatalog;\n+import org.apache.iceberg.spark.SparkSchemaUtil;\n+import org.apache.iceberg.spark.SparkSessionCatalog;\n+import org.apache.spark.sql.AnalysisException;\n+import org.apache.spark.sql.SparkSession;\n+import org.apache.spark.sql.catalyst.analysis.NoSuchTableException;\n+import org.apache.spark.sql.catalyst.catalog.CatalogTable;\n+import org.apache.spark.sql.catalyst.catalog.CatalogUtils;\n+import org.apache.spark.sql.connector.catalog.CatalogPlugin;\n+import org.apache.spark.sql.connector.catalog.Identifier;\n+import org.apache.spark.sql.connector.catalog.StagingTableCatalog;\n+import org.apache.spark.sql.connector.catalog.TableCatalog;\n+import org.apache.spark.sql.connector.catalog.V1Table;\n+import org.apache.spark.sql.connector.expressions.Transform;\n+\n+abstract class Spark3CreateAction implements CreateAction {\n+  private static final Set<String> ALLOWED_SOURCES = ImmutableSet.of(\"parquet\", \"avro\", \"orc\", \"hive\");\n+  protected static final String ICEBERG_METADATA_FOLDER = \"metadata\";\n+\n+  private final SparkSession spark;\n+\n+  // Source Fields\n+  private final V1Table sourceTable;\n+  private final CatalogTable sourceCatalogTable;\n+  private final String sourceTableLocation;\n+  private final CatalogPlugin sourceCatalog;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjI5MDkxMA=="}, "originalCommit": {"oid": "09f329bc39e8a2a1b2b5f925c580a2177833510b"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2NTExNTQwOnYy", "diffSide": "RIGHT", "path": "spark3/src/main/java/org/apache/iceberg/actions/Spark3CreateAction.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQxODoyMzo1OVrOH_csiw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQxODoyMzo1OVrOH_csiw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjI5MjQ5MQ==", "bodyText": "nit: sourceTableIdent?", "url": "https://github.com/apache/iceberg/pull/1525#discussion_r536292491", "createdAt": "2020-12-04T18:23:59Z", "author": {"login": "aokolnychyi"}, "path": "spark3/src/main/java/org/apache/iceberg/actions/Spark3CreateAction.java", "diffHunk": "@@ -0,0 +1,183 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.actions;\n+\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Set;\n+import org.apache.iceberg.PartitionSpec;\n+import org.apache.iceberg.Table;\n+import org.apache.iceberg.TableProperties;\n+import org.apache.iceberg.mapping.MappingUtil;\n+import org.apache.iceberg.mapping.NameMapping;\n+import org.apache.iceberg.mapping.NameMappingParser;\n+import org.apache.iceberg.relocated.com.google.common.collect.ImmutableMap;\n+import org.apache.iceberg.relocated.com.google.common.collect.ImmutableSet;\n+import org.apache.iceberg.relocated.com.google.common.collect.Maps;\n+import org.apache.iceberg.spark.SparkCatalog;\n+import org.apache.iceberg.spark.SparkSchemaUtil;\n+import org.apache.iceberg.spark.SparkSessionCatalog;\n+import org.apache.spark.sql.AnalysisException;\n+import org.apache.spark.sql.SparkSession;\n+import org.apache.spark.sql.catalyst.analysis.NoSuchTableException;\n+import org.apache.spark.sql.catalyst.catalog.CatalogTable;\n+import org.apache.spark.sql.catalyst.catalog.CatalogUtils;\n+import org.apache.spark.sql.connector.catalog.CatalogPlugin;\n+import org.apache.spark.sql.connector.catalog.Identifier;\n+import org.apache.spark.sql.connector.catalog.StagingTableCatalog;\n+import org.apache.spark.sql.connector.catalog.TableCatalog;\n+import org.apache.spark.sql.connector.catalog.V1Table;\n+import org.apache.spark.sql.connector.expressions.Transform;\n+\n+abstract class Spark3CreateAction implements CreateAction {\n+  private static final Set<String> ALLOWED_SOURCES = ImmutableSet.of(\"parquet\", \"avro\", \"orc\", \"hive\");\n+  protected static final String ICEBERG_METADATA_FOLDER = \"metadata\";\n+\n+  private final SparkSession spark;\n+\n+  // Source Fields\n+  private final V1Table sourceTable;\n+  private final CatalogTable sourceCatalogTable;\n+  private final String sourceTableLocation;\n+  private final CatalogPlugin sourceCatalog;\n+  private final Identifier sourceTableName;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "09f329bc39e8a2a1b2b5f925c580a2177833510b"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2NTEyMzI4OnYy", "diffSide": "RIGHT", "path": "spark3/src/main/java/org/apache/iceberg/actions/Spark3CreateAction.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQxODoyNjoxMlrOH_cxOg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQxODoyNjoxMlrOH_cxOg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjI5MzY5MA==", "bodyText": "nit: destTableIdent?", "url": "https://github.com/apache/iceberg/pull/1525#discussion_r536293690", "createdAt": "2020-12-04T18:26:12Z", "author": {"login": "aokolnychyi"}, "path": "spark3/src/main/java/org/apache/iceberg/actions/Spark3CreateAction.java", "diffHunk": "@@ -0,0 +1,183 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.actions;\n+\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Set;\n+import org.apache.iceberg.PartitionSpec;\n+import org.apache.iceberg.Table;\n+import org.apache.iceberg.TableProperties;\n+import org.apache.iceberg.mapping.MappingUtil;\n+import org.apache.iceberg.mapping.NameMapping;\n+import org.apache.iceberg.mapping.NameMappingParser;\n+import org.apache.iceberg.relocated.com.google.common.collect.ImmutableMap;\n+import org.apache.iceberg.relocated.com.google.common.collect.ImmutableSet;\n+import org.apache.iceberg.relocated.com.google.common.collect.Maps;\n+import org.apache.iceberg.spark.SparkCatalog;\n+import org.apache.iceberg.spark.SparkSchemaUtil;\n+import org.apache.iceberg.spark.SparkSessionCatalog;\n+import org.apache.spark.sql.AnalysisException;\n+import org.apache.spark.sql.SparkSession;\n+import org.apache.spark.sql.catalyst.analysis.NoSuchTableException;\n+import org.apache.spark.sql.catalyst.catalog.CatalogTable;\n+import org.apache.spark.sql.catalyst.catalog.CatalogUtils;\n+import org.apache.spark.sql.connector.catalog.CatalogPlugin;\n+import org.apache.spark.sql.connector.catalog.Identifier;\n+import org.apache.spark.sql.connector.catalog.StagingTableCatalog;\n+import org.apache.spark.sql.connector.catalog.TableCatalog;\n+import org.apache.spark.sql.connector.catalog.V1Table;\n+import org.apache.spark.sql.connector.expressions.Transform;\n+\n+abstract class Spark3CreateAction implements CreateAction {\n+  private static final Set<String> ALLOWED_SOURCES = ImmutableSet.of(\"parquet\", \"avro\", \"orc\", \"hive\");\n+  protected static final String ICEBERG_METADATA_FOLDER = \"metadata\";\n+\n+  private final SparkSession spark;\n+\n+  // Source Fields\n+  private final V1Table sourceTable;\n+  private final CatalogTable sourceCatalogTable;\n+  private final String sourceTableLocation;\n+  private final CatalogPlugin sourceCatalog;\n+  private final Identifier sourceTableName;\n+  private final PartitionSpec sourcePartitionSpec;\n+\n+  // Destination Fields\n+  private final StagingTableCatalog destCatalog;\n+  private final Identifier destTableName;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "09f329bc39e8a2a1b2b5f925c580a2177833510b"}, "originalPosition": 65}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2NTI2NDUwOnYy", "diffSide": "RIGHT", "path": "spark3/src/main/java/org/apache/iceberg/actions/Spark3CreateAction.java", "isResolved": false, "comments": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQxOTowMzozMlrOH_eDdQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQyMTozNTo1N1rOIB3RSA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjMxNDc0MQ==", "bodyText": "Why do we have this method in parent class? Isn't the location config specific to the operation type? We have to set the data location to the table location only in MIGRATE.", "url": "https://github.com/apache/iceberg/pull/1525#discussion_r536314741", "createdAt": "2020-12-04T19:03:32Z", "author": {"login": "aokolnychyi"}, "path": "spark3/src/main/java/org/apache/iceberg/actions/Spark3CreateAction.java", "diffHunk": "@@ -0,0 +1,183 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.actions;\n+\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Set;\n+import org.apache.iceberg.PartitionSpec;\n+import org.apache.iceberg.Table;\n+import org.apache.iceberg.TableProperties;\n+import org.apache.iceberg.mapping.MappingUtil;\n+import org.apache.iceberg.mapping.NameMapping;\n+import org.apache.iceberg.mapping.NameMappingParser;\n+import org.apache.iceberg.relocated.com.google.common.collect.ImmutableMap;\n+import org.apache.iceberg.relocated.com.google.common.collect.ImmutableSet;\n+import org.apache.iceberg.relocated.com.google.common.collect.Maps;\n+import org.apache.iceberg.spark.SparkCatalog;\n+import org.apache.iceberg.spark.SparkSchemaUtil;\n+import org.apache.iceberg.spark.SparkSessionCatalog;\n+import org.apache.spark.sql.AnalysisException;\n+import org.apache.spark.sql.SparkSession;\n+import org.apache.spark.sql.catalyst.analysis.NoSuchTableException;\n+import org.apache.spark.sql.catalyst.catalog.CatalogTable;\n+import org.apache.spark.sql.catalyst.catalog.CatalogUtils;\n+import org.apache.spark.sql.connector.catalog.CatalogPlugin;\n+import org.apache.spark.sql.connector.catalog.Identifier;\n+import org.apache.spark.sql.connector.catalog.StagingTableCatalog;\n+import org.apache.spark.sql.connector.catalog.TableCatalog;\n+import org.apache.spark.sql.connector.catalog.V1Table;\n+import org.apache.spark.sql.connector.expressions.Transform;\n+\n+abstract class Spark3CreateAction implements CreateAction {\n+  private static final Set<String> ALLOWED_SOURCES = ImmutableSet.of(\"parquet\", \"avro\", \"orc\", \"hive\");\n+  protected static final String ICEBERG_METADATA_FOLDER = \"metadata\";\n+\n+  private final SparkSession spark;\n+\n+  // Source Fields\n+  private final V1Table sourceTable;\n+  private final CatalogTable sourceCatalogTable;\n+  private final String sourceTableLocation;\n+  private final CatalogPlugin sourceCatalog;\n+  private final Identifier sourceTableName;\n+  private final PartitionSpec sourcePartitionSpec;\n+\n+  // Destination Fields\n+  private final StagingTableCatalog destCatalog;\n+  private final Identifier destTableName;\n+\n+  // Optional Parameters for destination\n+  private Map<String, String> additionalProperties = Maps.newHashMap();\n+\n+  Spark3CreateAction(SparkSession spark, CatalogPlugin sourceCatalog, Identifier sourceTableName,\n+                       CatalogPlugin destCatalog,  Identifier destTableName) {\n+\n+    this.spark = spark;\n+    this.sourceCatalog = checkSourceCatalog(sourceCatalog);\n+    this.sourceTableName = sourceTableName;\n+    this.destCatalog = checkDestinationCatalog(destCatalog);\n+    this.destTableName = destTableName;\n+\n+    try {\n+      String sourceString = String.join(\".\", sourceTableName.namespace()) + \".\" + sourceTableName.name();\n+      sourcePartitionSpec = SparkSchemaUtil.specForTable(spark, sourceString);\n+    } catch (AnalysisException e) {\n+      throw new IllegalArgumentException(\"Cannot determining partitioning of \" + sourceTableName.toString(), e);\n+    }\n+\n+    try {\n+      this.sourceTable = (V1Table) ((TableCatalog) sourceCatalog).loadTable(sourceTableName);\n+      this.sourceCatalogTable = sourceTable.v1Table();\n+    } catch (NoSuchTableException e) {\n+      throw new IllegalArgumentException(String.format(\"Cannot not find source table %s\", sourceTableName), e);\n+    } catch (ClassCastException e) {\n+      throw new IllegalArgumentException(String.format(\"Cannot use a non-v1 table %s as a source\", sourceTableName), e);\n+    }\n+    validateSourceTable(sourceCatalogTable);\n+\n+    this.sourceTableLocation = CatalogUtils.URIToString(sourceCatalogTable.storage().locationUri().get());\n+  }\n+\n+  @Override\n+  public CreateAction setAll(Map<String, String> properties) {\n+    this.additionalProperties.putAll(properties);\n+    return this;\n+  }\n+\n+  @Override\n+  public CreateAction set(String key, String value) {\n+    this.additionalProperties.put(key, value);\n+    return this;\n+  }\n+\n+  protected SparkSession spark() {\n+    return spark;\n+  }\n+\n+  protected String sourceTableLocation() {\n+    return sourceTableLocation;\n+  }\n+\n+  protected CatalogTable v1SourceTable() {\n+    return sourceCatalogTable;\n+  }\n+\n+  protected CatalogPlugin sourceCatalog() {\n+    return sourceCatalog;\n+  }\n+\n+  protected Identifier sourceTableName() {\n+    return sourceTableName;\n+  }\n+\n+  protected Transform[] sourcePartitionSpec() {\n+    return sourceTable.partitioning();\n+  }\n+\n+  protected StagingTableCatalog destCatalog() {\n+    return destCatalog;\n+  }\n+\n+  protected Identifier destTableName() {\n+    return destTableName;\n+  }\n+\n+  protected Map<String, String> additionalProperties() {\n+    return additionalProperties;\n+  }\n+\n+  private static void validateSourceTable(CatalogTable sourceTable) {\n+    String sourceTableProvider = sourceTable.provider().get().toLowerCase(Locale.ROOT);\n+\n+    if (!ALLOWED_SOURCES.contains(sourceTableProvider)) {\n+      throw new IllegalArgumentException(\n+          String.format(\"Cannot create an Iceberg table from source provider: %s\", sourceTableProvider));\n+    }\n+\n+    if (sourceTable.storage().locationUri().isEmpty()) {\n+      throw new IllegalArgumentException(\"Cannot create an Iceberg table from a source without an explicit location\");\n+    }\n+  }\n+\n+  protected static Map<String, String> tableLocationProperties(String tableLocation) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "09f329bc39e8a2a1b2b5f925c580a2177833510b"}, "originalPosition": 160}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjM1NjgzOA==", "bodyText": "And with Snapshot with a manually specified location", "url": "https://github.com/apache/iceberg/pull/1525#discussion_r536356838", "createdAt": "2020-12-04T20:19:24Z", "author": {"login": "RussellSpitzer"}, "path": "spark3/src/main/java/org/apache/iceberg/actions/Spark3CreateAction.java", "diffHunk": "@@ -0,0 +1,183 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.actions;\n+\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Set;\n+import org.apache.iceberg.PartitionSpec;\n+import org.apache.iceberg.Table;\n+import org.apache.iceberg.TableProperties;\n+import org.apache.iceberg.mapping.MappingUtil;\n+import org.apache.iceberg.mapping.NameMapping;\n+import org.apache.iceberg.mapping.NameMappingParser;\n+import org.apache.iceberg.relocated.com.google.common.collect.ImmutableMap;\n+import org.apache.iceberg.relocated.com.google.common.collect.ImmutableSet;\n+import org.apache.iceberg.relocated.com.google.common.collect.Maps;\n+import org.apache.iceberg.spark.SparkCatalog;\n+import org.apache.iceberg.spark.SparkSchemaUtil;\n+import org.apache.iceberg.spark.SparkSessionCatalog;\n+import org.apache.spark.sql.AnalysisException;\n+import org.apache.spark.sql.SparkSession;\n+import org.apache.spark.sql.catalyst.analysis.NoSuchTableException;\n+import org.apache.spark.sql.catalyst.catalog.CatalogTable;\n+import org.apache.spark.sql.catalyst.catalog.CatalogUtils;\n+import org.apache.spark.sql.connector.catalog.CatalogPlugin;\n+import org.apache.spark.sql.connector.catalog.Identifier;\n+import org.apache.spark.sql.connector.catalog.StagingTableCatalog;\n+import org.apache.spark.sql.connector.catalog.TableCatalog;\n+import org.apache.spark.sql.connector.catalog.V1Table;\n+import org.apache.spark.sql.connector.expressions.Transform;\n+\n+abstract class Spark3CreateAction implements CreateAction {\n+  private static final Set<String> ALLOWED_SOURCES = ImmutableSet.of(\"parquet\", \"avro\", \"orc\", \"hive\");\n+  protected static final String ICEBERG_METADATA_FOLDER = \"metadata\";\n+\n+  private final SparkSession spark;\n+\n+  // Source Fields\n+  private final V1Table sourceTable;\n+  private final CatalogTable sourceCatalogTable;\n+  private final String sourceTableLocation;\n+  private final CatalogPlugin sourceCatalog;\n+  private final Identifier sourceTableName;\n+  private final PartitionSpec sourcePartitionSpec;\n+\n+  // Destination Fields\n+  private final StagingTableCatalog destCatalog;\n+  private final Identifier destTableName;\n+\n+  // Optional Parameters for destination\n+  private Map<String, String> additionalProperties = Maps.newHashMap();\n+\n+  Spark3CreateAction(SparkSession spark, CatalogPlugin sourceCatalog, Identifier sourceTableName,\n+                       CatalogPlugin destCatalog,  Identifier destTableName) {\n+\n+    this.spark = spark;\n+    this.sourceCatalog = checkSourceCatalog(sourceCatalog);\n+    this.sourceTableName = sourceTableName;\n+    this.destCatalog = checkDestinationCatalog(destCatalog);\n+    this.destTableName = destTableName;\n+\n+    try {\n+      String sourceString = String.join(\".\", sourceTableName.namespace()) + \".\" + sourceTableName.name();\n+      sourcePartitionSpec = SparkSchemaUtil.specForTable(spark, sourceString);\n+    } catch (AnalysisException e) {\n+      throw new IllegalArgumentException(\"Cannot determining partitioning of \" + sourceTableName.toString(), e);\n+    }\n+\n+    try {\n+      this.sourceTable = (V1Table) ((TableCatalog) sourceCatalog).loadTable(sourceTableName);\n+      this.sourceCatalogTable = sourceTable.v1Table();\n+    } catch (NoSuchTableException e) {\n+      throw new IllegalArgumentException(String.format(\"Cannot not find source table %s\", sourceTableName), e);\n+    } catch (ClassCastException e) {\n+      throw new IllegalArgumentException(String.format(\"Cannot use a non-v1 table %s as a source\", sourceTableName), e);\n+    }\n+    validateSourceTable(sourceCatalogTable);\n+\n+    this.sourceTableLocation = CatalogUtils.URIToString(sourceCatalogTable.storage().locationUri().get());\n+  }\n+\n+  @Override\n+  public CreateAction setAll(Map<String, String> properties) {\n+    this.additionalProperties.putAll(properties);\n+    return this;\n+  }\n+\n+  @Override\n+  public CreateAction set(String key, String value) {\n+    this.additionalProperties.put(key, value);\n+    return this;\n+  }\n+\n+  protected SparkSession spark() {\n+    return spark;\n+  }\n+\n+  protected String sourceTableLocation() {\n+    return sourceTableLocation;\n+  }\n+\n+  protected CatalogTable v1SourceTable() {\n+    return sourceCatalogTable;\n+  }\n+\n+  protected CatalogPlugin sourceCatalog() {\n+    return sourceCatalog;\n+  }\n+\n+  protected Identifier sourceTableName() {\n+    return sourceTableName;\n+  }\n+\n+  protected Transform[] sourcePartitionSpec() {\n+    return sourceTable.partitioning();\n+  }\n+\n+  protected StagingTableCatalog destCatalog() {\n+    return destCatalog;\n+  }\n+\n+  protected Identifier destTableName() {\n+    return destTableName;\n+  }\n+\n+  protected Map<String, String> additionalProperties() {\n+    return additionalProperties;\n+  }\n+\n+  private static void validateSourceTable(CatalogTable sourceTable) {\n+    String sourceTableProvider = sourceTable.provider().get().toLowerCase(Locale.ROOT);\n+\n+    if (!ALLOWED_SOURCES.contains(sourceTableProvider)) {\n+      throw new IllegalArgumentException(\n+          String.format(\"Cannot create an Iceberg table from source provider: %s\", sourceTableProvider));\n+    }\n+\n+    if (sourceTable.storage().locationUri().isEmpty()) {\n+      throw new IllegalArgumentException(\"Cannot create an Iceberg table from a source without an explicit location\");\n+    }\n+  }\n+\n+  protected static Map<String, String> tableLocationProperties(String tableLocation) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjMxNDc0MQ=="}, "originalCommit": {"oid": "09f329bc39e8a2a1b2b5f925c580a2177833510b"}, "originalPosition": 160}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODQxMjg5Mg==", "bodyText": "I am not sure I follow. Why do we have to force a specific layout if the user specifies a location in SNAPSHOT?\nIt should be OK to specify a custom metadata and data location in the SNAPSHOT command but we are forcing the layout here. In my view, this should only apply to MIGRATE where we must keep the old layout.", "url": "https://github.com/apache/iceberg/pull/1525#discussion_r538412892", "createdAt": "2020-12-08T14:09:37Z", "author": {"login": "aokolnychyi"}, "path": "spark3/src/main/java/org/apache/iceberg/actions/Spark3CreateAction.java", "diffHunk": "@@ -0,0 +1,183 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.actions;\n+\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Set;\n+import org.apache.iceberg.PartitionSpec;\n+import org.apache.iceberg.Table;\n+import org.apache.iceberg.TableProperties;\n+import org.apache.iceberg.mapping.MappingUtil;\n+import org.apache.iceberg.mapping.NameMapping;\n+import org.apache.iceberg.mapping.NameMappingParser;\n+import org.apache.iceberg.relocated.com.google.common.collect.ImmutableMap;\n+import org.apache.iceberg.relocated.com.google.common.collect.ImmutableSet;\n+import org.apache.iceberg.relocated.com.google.common.collect.Maps;\n+import org.apache.iceberg.spark.SparkCatalog;\n+import org.apache.iceberg.spark.SparkSchemaUtil;\n+import org.apache.iceberg.spark.SparkSessionCatalog;\n+import org.apache.spark.sql.AnalysisException;\n+import org.apache.spark.sql.SparkSession;\n+import org.apache.spark.sql.catalyst.analysis.NoSuchTableException;\n+import org.apache.spark.sql.catalyst.catalog.CatalogTable;\n+import org.apache.spark.sql.catalyst.catalog.CatalogUtils;\n+import org.apache.spark.sql.connector.catalog.CatalogPlugin;\n+import org.apache.spark.sql.connector.catalog.Identifier;\n+import org.apache.spark.sql.connector.catalog.StagingTableCatalog;\n+import org.apache.spark.sql.connector.catalog.TableCatalog;\n+import org.apache.spark.sql.connector.catalog.V1Table;\n+import org.apache.spark.sql.connector.expressions.Transform;\n+\n+abstract class Spark3CreateAction implements CreateAction {\n+  private static final Set<String> ALLOWED_SOURCES = ImmutableSet.of(\"parquet\", \"avro\", \"orc\", \"hive\");\n+  protected static final String ICEBERG_METADATA_FOLDER = \"metadata\";\n+\n+  private final SparkSession spark;\n+\n+  // Source Fields\n+  private final V1Table sourceTable;\n+  private final CatalogTable sourceCatalogTable;\n+  private final String sourceTableLocation;\n+  private final CatalogPlugin sourceCatalog;\n+  private final Identifier sourceTableName;\n+  private final PartitionSpec sourcePartitionSpec;\n+\n+  // Destination Fields\n+  private final StagingTableCatalog destCatalog;\n+  private final Identifier destTableName;\n+\n+  // Optional Parameters for destination\n+  private Map<String, String> additionalProperties = Maps.newHashMap();\n+\n+  Spark3CreateAction(SparkSession spark, CatalogPlugin sourceCatalog, Identifier sourceTableName,\n+                       CatalogPlugin destCatalog,  Identifier destTableName) {\n+\n+    this.spark = spark;\n+    this.sourceCatalog = checkSourceCatalog(sourceCatalog);\n+    this.sourceTableName = sourceTableName;\n+    this.destCatalog = checkDestinationCatalog(destCatalog);\n+    this.destTableName = destTableName;\n+\n+    try {\n+      String sourceString = String.join(\".\", sourceTableName.namespace()) + \".\" + sourceTableName.name();\n+      sourcePartitionSpec = SparkSchemaUtil.specForTable(spark, sourceString);\n+    } catch (AnalysisException e) {\n+      throw new IllegalArgumentException(\"Cannot determining partitioning of \" + sourceTableName.toString(), e);\n+    }\n+\n+    try {\n+      this.sourceTable = (V1Table) ((TableCatalog) sourceCatalog).loadTable(sourceTableName);\n+      this.sourceCatalogTable = sourceTable.v1Table();\n+    } catch (NoSuchTableException e) {\n+      throw new IllegalArgumentException(String.format(\"Cannot not find source table %s\", sourceTableName), e);\n+    } catch (ClassCastException e) {\n+      throw new IllegalArgumentException(String.format(\"Cannot use a non-v1 table %s as a source\", sourceTableName), e);\n+    }\n+    validateSourceTable(sourceCatalogTable);\n+\n+    this.sourceTableLocation = CatalogUtils.URIToString(sourceCatalogTable.storage().locationUri().get());\n+  }\n+\n+  @Override\n+  public CreateAction setAll(Map<String, String> properties) {\n+    this.additionalProperties.putAll(properties);\n+    return this;\n+  }\n+\n+  @Override\n+  public CreateAction set(String key, String value) {\n+    this.additionalProperties.put(key, value);\n+    return this;\n+  }\n+\n+  protected SparkSession spark() {\n+    return spark;\n+  }\n+\n+  protected String sourceTableLocation() {\n+    return sourceTableLocation;\n+  }\n+\n+  protected CatalogTable v1SourceTable() {\n+    return sourceCatalogTable;\n+  }\n+\n+  protected CatalogPlugin sourceCatalog() {\n+    return sourceCatalog;\n+  }\n+\n+  protected Identifier sourceTableName() {\n+    return sourceTableName;\n+  }\n+\n+  protected Transform[] sourcePartitionSpec() {\n+    return sourceTable.partitioning();\n+  }\n+\n+  protected StagingTableCatalog destCatalog() {\n+    return destCatalog;\n+  }\n+\n+  protected Identifier destTableName() {\n+    return destTableName;\n+  }\n+\n+  protected Map<String, String> additionalProperties() {\n+    return additionalProperties;\n+  }\n+\n+  private static void validateSourceTable(CatalogTable sourceTable) {\n+    String sourceTableProvider = sourceTable.provider().get().toLowerCase(Locale.ROOT);\n+\n+    if (!ALLOWED_SOURCES.contains(sourceTableProvider)) {\n+      throw new IllegalArgumentException(\n+          String.format(\"Cannot create an Iceberg table from source provider: %s\", sourceTableProvider));\n+    }\n+\n+    if (sourceTable.storage().locationUri().isEmpty()) {\n+      throw new IllegalArgumentException(\"Cannot create an Iceberg table from a source without an explicit location\");\n+    }\n+  }\n+\n+  protected static Map<String, String> tableLocationProperties(String tableLocation) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjMxNDc0MQ=="}, "originalCommit": {"oid": "09f329bc39e8a2a1b2b5f925c580a2177833510b"}, "originalPosition": 160}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODQzNTk5Ng==", "bodyText": "This only applies if the user also uses .withLocation in SnapshotAction, if \"destLocation\" is not set then these properties are not set.", "url": "https://github.com/apache/iceberg/pull/1525#discussion_r538435996", "createdAt": "2020-12-08T14:31:44Z", "author": {"login": "RussellSpitzer"}, "path": "spark3/src/main/java/org/apache/iceberg/actions/Spark3CreateAction.java", "diffHunk": "@@ -0,0 +1,183 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.actions;\n+\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Set;\n+import org.apache.iceberg.PartitionSpec;\n+import org.apache.iceberg.Table;\n+import org.apache.iceberg.TableProperties;\n+import org.apache.iceberg.mapping.MappingUtil;\n+import org.apache.iceberg.mapping.NameMapping;\n+import org.apache.iceberg.mapping.NameMappingParser;\n+import org.apache.iceberg.relocated.com.google.common.collect.ImmutableMap;\n+import org.apache.iceberg.relocated.com.google.common.collect.ImmutableSet;\n+import org.apache.iceberg.relocated.com.google.common.collect.Maps;\n+import org.apache.iceberg.spark.SparkCatalog;\n+import org.apache.iceberg.spark.SparkSchemaUtil;\n+import org.apache.iceberg.spark.SparkSessionCatalog;\n+import org.apache.spark.sql.AnalysisException;\n+import org.apache.spark.sql.SparkSession;\n+import org.apache.spark.sql.catalyst.analysis.NoSuchTableException;\n+import org.apache.spark.sql.catalyst.catalog.CatalogTable;\n+import org.apache.spark.sql.catalyst.catalog.CatalogUtils;\n+import org.apache.spark.sql.connector.catalog.CatalogPlugin;\n+import org.apache.spark.sql.connector.catalog.Identifier;\n+import org.apache.spark.sql.connector.catalog.StagingTableCatalog;\n+import org.apache.spark.sql.connector.catalog.TableCatalog;\n+import org.apache.spark.sql.connector.catalog.V1Table;\n+import org.apache.spark.sql.connector.expressions.Transform;\n+\n+abstract class Spark3CreateAction implements CreateAction {\n+  private static final Set<String> ALLOWED_SOURCES = ImmutableSet.of(\"parquet\", \"avro\", \"orc\", \"hive\");\n+  protected static final String ICEBERG_METADATA_FOLDER = \"metadata\";\n+\n+  private final SparkSession spark;\n+\n+  // Source Fields\n+  private final V1Table sourceTable;\n+  private final CatalogTable sourceCatalogTable;\n+  private final String sourceTableLocation;\n+  private final CatalogPlugin sourceCatalog;\n+  private final Identifier sourceTableName;\n+  private final PartitionSpec sourcePartitionSpec;\n+\n+  // Destination Fields\n+  private final StagingTableCatalog destCatalog;\n+  private final Identifier destTableName;\n+\n+  // Optional Parameters for destination\n+  private Map<String, String> additionalProperties = Maps.newHashMap();\n+\n+  Spark3CreateAction(SparkSession spark, CatalogPlugin sourceCatalog, Identifier sourceTableName,\n+                       CatalogPlugin destCatalog,  Identifier destTableName) {\n+\n+    this.spark = spark;\n+    this.sourceCatalog = checkSourceCatalog(sourceCatalog);\n+    this.sourceTableName = sourceTableName;\n+    this.destCatalog = checkDestinationCatalog(destCatalog);\n+    this.destTableName = destTableName;\n+\n+    try {\n+      String sourceString = String.join(\".\", sourceTableName.namespace()) + \".\" + sourceTableName.name();\n+      sourcePartitionSpec = SparkSchemaUtil.specForTable(spark, sourceString);\n+    } catch (AnalysisException e) {\n+      throw new IllegalArgumentException(\"Cannot determining partitioning of \" + sourceTableName.toString(), e);\n+    }\n+\n+    try {\n+      this.sourceTable = (V1Table) ((TableCatalog) sourceCatalog).loadTable(sourceTableName);\n+      this.sourceCatalogTable = sourceTable.v1Table();\n+    } catch (NoSuchTableException e) {\n+      throw new IllegalArgumentException(String.format(\"Cannot not find source table %s\", sourceTableName), e);\n+    } catch (ClassCastException e) {\n+      throw new IllegalArgumentException(String.format(\"Cannot use a non-v1 table %s as a source\", sourceTableName), e);\n+    }\n+    validateSourceTable(sourceCatalogTable);\n+\n+    this.sourceTableLocation = CatalogUtils.URIToString(sourceCatalogTable.storage().locationUri().get());\n+  }\n+\n+  @Override\n+  public CreateAction setAll(Map<String, String> properties) {\n+    this.additionalProperties.putAll(properties);\n+    return this;\n+  }\n+\n+  @Override\n+  public CreateAction set(String key, String value) {\n+    this.additionalProperties.put(key, value);\n+    return this;\n+  }\n+\n+  protected SparkSession spark() {\n+    return spark;\n+  }\n+\n+  protected String sourceTableLocation() {\n+    return sourceTableLocation;\n+  }\n+\n+  protected CatalogTable v1SourceTable() {\n+    return sourceCatalogTable;\n+  }\n+\n+  protected CatalogPlugin sourceCatalog() {\n+    return sourceCatalog;\n+  }\n+\n+  protected Identifier sourceTableName() {\n+    return sourceTableName;\n+  }\n+\n+  protected Transform[] sourcePartitionSpec() {\n+    return sourceTable.partitioning();\n+  }\n+\n+  protected StagingTableCatalog destCatalog() {\n+    return destCatalog;\n+  }\n+\n+  protected Identifier destTableName() {\n+    return destTableName;\n+  }\n+\n+  protected Map<String, String> additionalProperties() {\n+    return additionalProperties;\n+  }\n+\n+  private static void validateSourceTable(CatalogTable sourceTable) {\n+    String sourceTableProvider = sourceTable.provider().get().toLowerCase(Locale.ROOT);\n+\n+    if (!ALLOWED_SOURCES.contains(sourceTableProvider)) {\n+      throw new IllegalArgumentException(\n+          String.format(\"Cannot create an Iceberg table from source provider: %s\", sourceTableProvider));\n+    }\n+\n+    if (sourceTable.storage().locationUri().isEmpty()) {\n+      throw new IllegalArgumentException(\"Cannot create an Iceberg table from a source without an explicit location\");\n+    }\n+  }\n+\n+  protected static Map<String, String> tableLocationProperties(String tableLocation) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjMxNDc0MQ=="}, "originalCommit": {"oid": "09f329bc39e8a2a1b2b5f925c580a2177833510b"}, "originalPosition": 160}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODUyODQ3MA==", "bodyText": "Correct but why? Why cannot we set a location and the data and metadata folder in SNAPSHOT?", "url": "https://github.com/apache/iceberg/pull/1525#discussion_r538528470", "createdAt": "2020-12-08T15:54:34Z", "author": {"login": "aokolnychyi"}, "path": "spark3/src/main/java/org/apache/iceberg/actions/Spark3CreateAction.java", "diffHunk": "@@ -0,0 +1,183 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.actions;\n+\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Set;\n+import org.apache.iceberg.PartitionSpec;\n+import org.apache.iceberg.Table;\n+import org.apache.iceberg.TableProperties;\n+import org.apache.iceberg.mapping.MappingUtil;\n+import org.apache.iceberg.mapping.NameMapping;\n+import org.apache.iceberg.mapping.NameMappingParser;\n+import org.apache.iceberg.relocated.com.google.common.collect.ImmutableMap;\n+import org.apache.iceberg.relocated.com.google.common.collect.ImmutableSet;\n+import org.apache.iceberg.relocated.com.google.common.collect.Maps;\n+import org.apache.iceberg.spark.SparkCatalog;\n+import org.apache.iceberg.spark.SparkSchemaUtil;\n+import org.apache.iceberg.spark.SparkSessionCatalog;\n+import org.apache.spark.sql.AnalysisException;\n+import org.apache.spark.sql.SparkSession;\n+import org.apache.spark.sql.catalyst.analysis.NoSuchTableException;\n+import org.apache.spark.sql.catalyst.catalog.CatalogTable;\n+import org.apache.spark.sql.catalyst.catalog.CatalogUtils;\n+import org.apache.spark.sql.connector.catalog.CatalogPlugin;\n+import org.apache.spark.sql.connector.catalog.Identifier;\n+import org.apache.spark.sql.connector.catalog.StagingTableCatalog;\n+import org.apache.spark.sql.connector.catalog.TableCatalog;\n+import org.apache.spark.sql.connector.catalog.V1Table;\n+import org.apache.spark.sql.connector.expressions.Transform;\n+\n+abstract class Spark3CreateAction implements CreateAction {\n+  private static final Set<String> ALLOWED_SOURCES = ImmutableSet.of(\"parquet\", \"avro\", \"orc\", \"hive\");\n+  protected static final String ICEBERG_METADATA_FOLDER = \"metadata\";\n+\n+  private final SparkSession spark;\n+\n+  // Source Fields\n+  private final V1Table sourceTable;\n+  private final CatalogTable sourceCatalogTable;\n+  private final String sourceTableLocation;\n+  private final CatalogPlugin sourceCatalog;\n+  private final Identifier sourceTableName;\n+  private final PartitionSpec sourcePartitionSpec;\n+\n+  // Destination Fields\n+  private final StagingTableCatalog destCatalog;\n+  private final Identifier destTableName;\n+\n+  // Optional Parameters for destination\n+  private Map<String, String> additionalProperties = Maps.newHashMap();\n+\n+  Spark3CreateAction(SparkSession spark, CatalogPlugin sourceCatalog, Identifier sourceTableName,\n+                       CatalogPlugin destCatalog,  Identifier destTableName) {\n+\n+    this.spark = spark;\n+    this.sourceCatalog = checkSourceCatalog(sourceCatalog);\n+    this.sourceTableName = sourceTableName;\n+    this.destCatalog = checkDestinationCatalog(destCatalog);\n+    this.destTableName = destTableName;\n+\n+    try {\n+      String sourceString = String.join(\".\", sourceTableName.namespace()) + \".\" + sourceTableName.name();\n+      sourcePartitionSpec = SparkSchemaUtil.specForTable(spark, sourceString);\n+    } catch (AnalysisException e) {\n+      throw new IllegalArgumentException(\"Cannot determining partitioning of \" + sourceTableName.toString(), e);\n+    }\n+\n+    try {\n+      this.sourceTable = (V1Table) ((TableCatalog) sourceCatalog).loadTable(sourceTableName);\n+      this.sourceCatalogTable = sourceTable.v1Table();\n+    } catch (NoSuchTableException e) {\n+      throw new IllegalArgumentException(String.format(\"Cannot not find source table %s\", sourceTableName), e);\n+    } catch (ClassCastException e) {\n+      throw new IllegalArgumentException(String.format(\"Cannot use a non-v1 table %s as a source\", sourceTableName), e);\n+    }\n+    validateSourceTable(sourceCatalogTable);\n+\n+    this.sourceTableLocation = CatalogUtils.URIToString(sourceCatalogTable.storage().locationUri().get());\n+  }\n+\n+  @Override\n+  public CreateAction setAll(Map<String, String> properties) {\n+    this.additionalProperties.putAll(properties);\n+    return this;\n+  }\n+\n+  @Override\n+  public CreateAction set(String key, String value) {\n+    this.additionalProperties.put(key, value);\n+    return this;\n+  }\n+\n+  protected SparkSession spark() {\n+    return spark;\n+  }\n+\n+  protected String sourceTableLocation() {\n+    return sourceTableLocation;\n+  }\n+\n+  protected CatalogTable v1SourceTable() {\n+    return sourceCatalogTable;\n+  }\n+\n+  protected CatalogPlugin sourceCatalog() {\n+    return sourceCatalog;\n+  }\n+\n+  protected Identifier sourceTableName() {\n+    return sourceTableName;\n+  }\n+\n+  protected Transform[] sourcePartitionSpec() {\n+    return sourceTable.partitioning();\n+  }\n+\n+  protected StagingTableCatalog destCatalog() {\n+    return destCatalog;\n+  }\n+\n+  protected Identifier destTableName() {\n+    return destTableName;\n+  }\n+\n+  protected Map<String, String> additionalProperties() {\n+    return additionalProperties;\n+  }\n+\n+  private static void validateSourceTable(CatalogTable sourceTable) {\n+    String sourceTableProvider = sourceTable.provider().get().toLowerCase(Locale.ROOT);\n+\n+    if (!ALLOWED_SOURCES.contains(sourceTableProvider)) {\n+      throw new IllegalArgumentException(\n+          String.format(\"Cannot create an Iceberg table from source provider: %s\", sourceTableProvider));\n+    }\n+\n+    if (sourceTable.storage().locationUri().isEmpty()) {\n+      throw new IllegalArgumentException(\"Cannot create an Iceberg table from a source without an explicit location\");\n+    }\n+  }\n+\n+  protected static Map<String, String> tableLocationProperties(String tableLocation) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjMxNDc0MQ=="}, "originalCommit": {"oid": "09f329bc39e8a2a1b2b5f925c580a2177833510b"}, "originalPosition": 160}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODc0NTY3Nw==", "bodyText": "I don't think this is needed either way.\nIn our MIGRATE command, we set the metadata location so that we can create the Iceberg table and then rename it into place. Because it doesn't have the correct name to begin with, its location would be different so we set the metadata location to ensure the metadata is created under the correct location. I think we also didn't support custom table locations at the time I wrote it.\nNow, tables support custom table locations in create and this is going to use a staged table created to create in place. I think as long as the table is created from the exiting table's location for MIGRATE, or created with the requested location for SNAPSHOT, everything should work fine without the additional table properties.", "url": "https://github.com/apache/iceberg/pull/1525#discussion_r538745677", "createdAt": "2020-12-08T19:27:37Z", "author": {"login": "rdblue"}, "path": "spark3/src/main/java/org/apache/iceberg/actions/Spark3CreateAction.java", "diffHunk": "@@ -0,0 +1,183 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.actions;\n+\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Set;\n+import org.apache.iceberg.PartitionSpec;\n+import org.apache.iceberg.Table;\n+import org.apache.iceberg.TableProperties;\n+import org.apache.iceberg.mapping.MappingUtil;\n+import org.apache.iceberg.mapping.NameMapping;\n+import org.apache.iceberg.mapping.NameMappingParser;\n+import org.apache.iceberg.relocated.com.google.common.collect.ImmutableMap;\n+import org.apache.iceberg.relocated.com.google.common.collect.ImmutableSet;\n+import org.apache.iceberg.relocated.com.google.common.collect.Maps;\n+import org.apache.iceberg.spark.SparkCatalog;\n+import org.apache.iceberg.spark.SparkSchemaUtil;\n+import org.apache.iceberg.spark.SparkSessionCatalog;\n+import org.apache.spark.sql.AnalysisException;\n+import org.apache.spark.sql.SparkSession;\n+import org.apache.spark.sql.catalyst.analysis.NoSuchTableException;\n+import org.apache.spark.sql.catalyst.catalog.CatalogTable;\n+import org.apache.spark.sql.catalyst.catalog.CatalogUtils;\n+import org.apache.spark.sql.connector.catalog.CatalogPlugin;\n+import org.apache.spark.sql.connector.catalog.Identifier;\n+import org.apache.spark.sql.connector.catalog.StagingTableCatalog;\n+import org.apache.spark.sql.connector.catalog.TableCatalog;\n+import org.apache.spark.sql.connector.catalog.V1Table;\n+import org.apache.spark.sql.connector.expressions.Transform;\n+\n+abstract class Spark3CreateAction implements CreateAction {\n+  private static final Set<String> ALLOWED_SOURCES = ImmutableSet.of(\"parquet\", \"avro\", \"orc\", \"hive\");\n+  protected static final String ICEBERG_METADATA_FOLDER = \"metadata\";\n+\n+  private final SparkSession spark;\n+\n+  // Source Fields\n+  private final V1Table sourceTable;\n+  private final CatalogTable sourceCatalogTable;\n+  private final String sourceTableLocation;\n+  private final CatalogPlugin sourceCatalog;\n+  private final Identifier sourceTableName;\n+  private final PartitionSpec sourcePartitionSpec;\n+\n+  // Destination Fields\n+  private final StagingTableCatalog destCatalog;\n+  private final Identifier destTableName;\n+\n+  // Optional Parameters for destination\n+  private Map<String, String> additionalProperties = Maps.newHashMap();\n+\n+  Spark3CreateAction(SparkSession spark, CatalogPlugin sourceCatalog, Identifier sourceTableName,\n+                       CatalogPlugin destCatalog,  Identifier destTableName) {\n+\n+    this.spark = spark;\n+    this.sourceCatalog = checkSourceCatalog(sourceCatalog);\n+    this.sourceTableName = sourceTableName;\n+    this.destCatalog = checkDestinationCatalog(destCatalog);\n+    this.destTableName = destTableName;\n+\n+    try {\n+      String sourceString = String.join(\".\", sourceTableName.namespace()) + \".\" + sourceTableName.name();\n+      sourcePartitionSpec = SparkSchemaUtil.specForTable(spark, sourceString);\n+    } catch (AnalysisException e) {\n+      throw new IllegalArgumentException(\"Cannot determining partitioning of \" + sourceTableName.toString(), e);\n+    }\n+\n+    try {\n+      this.sourceTable = (V1Table) ((TableCatalog) sourceCatalog).loadTable(sourceTableName);\n+      this.sourceCatalogTable = sourceTable.v1Table();\n+    } catch (NoSuchTableException e) {\n+      throw new IllegalArgumentException(String.format(\"Cannot not find source table %s\", sourceTableName), e);\n+    } catch (ClassCastException e) {\n+      throw new IllegalArgumentException(String.format(\"Cannot use a non-v1 table %s as a source\", sourceTableName), e);\n+    }\n+    validateSourceTable(sourceCatalogTable);\n+\n+    this.sourceTableLocation = CatalogUtils.URIToString(sourceCatalogTable.storage().locationUri().get());\n+  }\n+\n+  @Override\n+  public CreateAction setAll(Map<String, String> properties) {\n+    this.additionalProperties.putAll(properties);\n+    return this;\n+  }\n+\n+  @Override\n+  public CreateAction set(String key, String value) {\n+    this.additionalProperties.put(key, value);\n+    return this;\n+  }\n+\n+  protected SparkSession spark() {\n+    return spark;\n+  }\n+\n+  protected String sourceTableLocation() {\n+    return sourceTableLocation;\n+  }\n+\n+  protected CatalogTable v1SourceTable() {\n+    return sourceCatalogTable;\n+  }\n+\n+  protected CatalogPlugin sourceCatalog() {\n+    return sourceCatalog;\n+  }\n+\n+  protected Identifier sourceTableName() {\n+    return sourceTableName;\n+  }\n+\n+  protected Transform[] sourcePartitionSpec() {\n+    return sourceTable.partitioning();\n+  }\n+\n+  protected StagingTableCatalog destCatalog() {\n+    return destCatalog;\n+  }\n+\n+  protected Identifier destTableName() {\n+    return destTableName;\n+  }\n+\n+  protected Map<String, String> additionalProperties() {\n+    return additionalProperties;\n+  }\n+\n+  private static void validateSourceTable(CatalogTable sourceTable) {\n+    String sourceTableProvider = sourceTable.provider().get().toLowerCase(Locale.ROOT);\n+\n+    if (!ALLOWED_SOURCES.contains(sourceTableProvider)) {\n+      throw new IllegalArgumentException(\n+          String.format(\"Cannot create an Iceberg table from source provider: %s\", sourceTableProvider));\n+    }\n+\n+    if (sourceTable.storage().locationUri().isEmpty()) {\n+      throw new IllegalArgumentException(\"Cannot create an Iceberg table from a source without an explicit location\");\n+    }\n+  }\n+\n+  protected static Map<String, String> tableLocationProperties(String tableLocation) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjMxNDc0MQ=="}, "originalCommit": {"oid": "09f329bc39e8a2a1b2b5f925c580a2177833510b"}, "originalPosition": 160}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODgwNzQ4NA==", "bodyText": "@rdblue, what about keeping the old layout after migration? I agree nothing is required for SNAPSHOT but I think we should keep the existing layout of data after migration (i.e. data location for new data should point to the root table location).", "url": "https://github.com/apache/iceberg/pull/1525#discussion_r538807484", "createdAt": "2020-12-08T21:06:26Z", "author": {"login": "aokolnychyi"}, "path": "spark3/src/main/java/org/apache/iceberg/actions/Spark3CreateAction.java", "diffHunk": "@@ -0,0 +1,183 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.actions;\n+\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Set;\n+import org.apache.iceberg.PartitionSpec;\n+import org.apache.iceberg.Table;\n+import org.apache.iceberg.TableProperties;\n+import org.apache.iceberg.mapping.MappingUtil;\n+import org.apache.iceberg.mapping.NameMapping;\n+import org.apache.iceberg.mapping.NameMappingParser;\n+import org.apache.iceberg.relocated.com.google.common.collect.ImmutableMap;\n+import org.apache.iceberg.relocated.com.google.common.collect.ImmutableSet;\n+import org.apache.iceberg.relocated.com.google.common.collect.Maps;\n+import org.apache.iceberg.spark.SparkCatalog;\n+import org.apache.iceberg.spark.SparkSchemaUtil;\n+import org.apache.iceberg.spark.SparkSessionCatalog;\n+import org.apache.spark.sql.AnalysisException;\n+import org.apache.spark.sql.SparkSession;\n+import org.apache.spark.sql.catalyst.analysis.NoSuchTableException;\n+import org.apache.spark.sql.catalyst.catalog.CatalogTable;\n+import org.apache.spark.sql.catalyst.catalog.CatalogUtils;\n+import org.apache.spark.sql.connector.catalog.CatalogPlugin;\n+import org.apache.spark.sql.connector.catalog.Identifier;\n+import org.apache.spark.sql.connector.catalog.StagingTableCatalog;\n+import org.apache.spark.sql.connector.catalog.TableCatalog;\n+import org.apache.spark.sql.connector.catalog.V1Table;\n+import org.apache.spark.sql.connector.expressions.Transform;\n+\n+abstract class Spark3CreateAction implements CreateAction {\n+  private static final Set<String> ALLOWED_SOURCES = ImmutableSet.of(\"parquet\", \"avro\", \"orc\", \"hive\");\n+  protected static final String ICEBERG_METADATA_FOLDER = \"metadata\";\n+\n+  private final SparkSession spark;\n+\n+  // Source Fields\n+  private final V1Table sourceTable;\n+  private final CatalogTable sourceCatalogTable;\n+  private final String sourceTableLocation;\n+  private final CatalogPlugin sourceCatalog;\n+  private final Identifier sourceTableName;\n+  private final PartitionSpec sourcePartitionSpec;\n+\n+  // Destination Fields\n+  private final StagingTableCatalog destCatalog;\n+  private final Identifier destTableName;\n+\n+  // Optional Parameters for destination\n+  private Map<String, String> additionalProperties = Maps.newHashMap();\n+\n+  Spark3CreateAction(SparkSession spark, CatalogPlugin sourceCatalog, Identifier sourceTableName,\n+                       CatalogPlugin destCatalog,  Identifier destTableName) {\n+\n+    this.spark = spark;\n+    this.sourceCatalog = checkSourceCatalog(sourceCatalog);\n+    this.sourceTableName = sourceTableName;\n+    this.destCatalog = checkDestinationCatalog(destCatalog);\n+    this.destTableName = destTableName;\n+\n+    try {\n+      String sourceString = String.join(\".\", sourceTableName.namespace()) + \".\" + sourceTableName.name();\n+      sourcePartitionSpec = SparkSchemaUtil.specForTable(spark, sourceString);\n+    } catch (AnalysisException e) {\n+      throw new IllegalArgumentException(\"Cannot determining partitioning of \" + sourceTableName.toString(), e);\n+    }\n+\n+    try {\n+      this.sourceTable = (V1Table) ((TableCatalog) sourceCatalog).loadTable(sourceTableName);\n+      this.sourceCatalogTable = sourceTable.v1Table();\n+    } catch (NoSuchTableException e) {\n+      throw new IllegalArgumentException(String.format(\"Cannot not find source table %s\", sourceTableName), e);\n+    } catch (ClassCastException e) {\n+      throw new IllegalArgumentException(String.format(\"Cannot use a non-v1 table %s as a source\", sourceTableName), e);\n+    }\n+    validateSourceTable(sourceCatalogTable);\n+\n+    this.sourceTableLocation = CatalogUtils.URIToString(sourceCatalogTable.storage().locationUri().get());\n+  }\n+\n+  @Override\n+  public CreateAction setAll(Map<String, String> properties) {\n+    this.additionalProperties.putAll(properties);\n+    return this;\n+  }\n+\n+  @Override\n+  public CreateAction set(String key, String value) {\n+    this.additionalProperties.put(key, value);\n+    return this;\n+  }\n+\n+  protected SparkSession spark() {\n+    return spark;\n+  }\n+\n+  protected String sourceTableLocation() {\n+    return sourceTableLocation;\n+  }\n+\n+  protected CatalogTable v1SourceTable() {\n+    return sourceCatalogTable;\n+  }\n+\n+  protected CatalogPlugin sourceCatalog() {\n+    return sourceCatalog;\n+  }\n+\n+  protected Identifier sourceTableName() {\n+    return sourceTableName;\n+  }\n+\n+  protected Transform[] sourcePartitionSpec() {\n+    return sourceTable.partitioning();\n+  }\n+\n+  protected StagingTableCatalog destCatalog() {\n+    return destCatalog;\n+  }\n+\n+  protected Identifier destTableName() {\n+    return destTableName;\n+  }\n+\n+  protected Map<String, String> additionalProperties() {\n+    return additionalProperties;\n+  }\n+\n+  private static void validateSourceTable(CatalogTable sourceTable) {\n+    String sourceTableProvider = sourceTable.provider().get().toLowerCase(Locale.ROOT);\n+\n+    if (!ALLOWED_SOURCES.contains(sourceTableProvider)) {\n+      throw new IllegalArgumentException(\n+          String.format(\"Cannot create an Iceberg table from source provider: %s\", sourceTableProvider));\n+    }\n+\n+    if (sourceTable.storage().locationUri().isEmpty()) {\n+      throw new IllegalArgumentException(\"Cannot create an Iceberg table from a source without an explicit location\");\n+    }\n+  }\n+\n+  protected static Map<String, String> tableLocationProperties(String tableLocation) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjMxNDc0MQ=="}, "originalCommit": {"oid": "09f329bc39e8a2a1b2b5f925c580a2177833510b"}, "originalPosition": 160}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODgxNzA3NA==", "bodyText": "I would recommend against that because it modifies the state of the partitions in the old table. We use the data prefix so that the old table can be kept unmodified in case the operation needs to be rolled back, even after a write. Writing data into the old folders makes it live in the old table.", "url": "https://github.com/apache/iceberg/pull/1525#discussion_r538817074", "createdAt": "2020-12-08T21:22:46Z", "author": {"login": "rdblue"}, "path": "spark3/src/main/java/org/apache/iceberg/actions/Spark3CreateAction.java", "diffHunk": "@@ -0,0 +1,183 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.actions;\n+\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Set;\n+import org.apache.iceberg.PartitionSpec;\n+import org.apache.iceberg.Table;\n+import org.apache.iceberg.TableProperties;\n+import org.apache.iceberg.mapping.MappingUtil;\n+import org.apache.iceberg.mapping.NameMapping;\n+import org.apache.iceberg.mapping.NameMappingParser;\n+import org.apache.iceberg.relocated.com.google.common.collect.ImmutableMap;\n+import org.apache.iceberg.relocated.com.google.common.collect.ImmutableSet;\n+import org.apache.iceberg.relocated.com.google.common.collect.Maps;\n+import org.apache.iceberg.spark.SparkCatalog;\n+import org.apache.iceberg.spark.SparkSchemaUtil;\n+import org.apache.iceberg.spark.SparkSessionCatalog;\n+import org.apache.spark.sql.AnalysisException;\n+import org.apache.spark.sql.SparkSession;\n+import org.apache.spark.sql.catalyst.analysis.NoSuchTableException;\n+import org.apache.spark.sql.catalyst.catalog.CatalogTable;\n+import org.apache.spark.sql.catalyst.catalog.CatalogUtils;\n+import org.apache.spark.sql.connector.catalog.CatalogPlugin;\n+import org.apache.spark.sql.connector.catalog.Identifier;\n+import org.apache.spark.sql.connector.catalog.StagingTableCatalog;\n+import org.apache.spark.sql.connector.catalog.TableCatalog;\n+import org.apache.spark.sql.connector.catalog.V1Table;\n+import org.apache.spark.sql.connector.expressions.Transform;\n+\n+abstract class Spark3CreateAction implements CreateAction {\n+  private static final Set<String> ALLOWED_SOURCES = ImmutableSet.of(\"parquet\", \"avro\", \"orc\", \"hive\");\n+  protected static final String ICEBERG_METADATA_FOLDER = \"metadata\";\n+\n+  private final SparkSession spark;\n+\n+  // Source Fields\n+  private final V1Table sourceTable;\n+  private final CatalogTable sourceCatalogTable;\n+  private final String sourceTableLocation;\n+  private final CatalogPlugin sourceCatalog;\n+  private final Identifier sourceTableName;\n+  private final PartitionSpec sourcePartitionSpec;\n+\n+  // Destination Fields\n+  private final StagingTableCatalog destCatalog;\n+  private final Identifier destTableName;\n+\n+  // Optional Parameters for destination\n+  private Map<String, String> additionalProperties = Maps.newHashMap();\n+\n+  Spark3CreateAction(SparkSession spark, CatalogPlugin sourceCatalog, Identifier sourceTableName,\n+                       CatalogPlugin destCatalog,  Identifier destTableName) {\n+\n+    this.spark = spark;\n+    this.sourceCatalog = checkSourceCatalog(sourceCatalog);\n+    this.sourceTableName = sourceTableName;\n+    this.destCatalog = checkDestinationCatalog(destCatalog);\n+    this.destTableName = destTableName;\n+\n+    try {\n+      String sourceString = String.join(\".\", sourceTableName.namespace()) + \".\" + sourceTableName.name();\n+      sourcePartitionSpec = SparkSchemaUtil.specForTable(spark, sourceString);\n+    } catch (AnalysisException e) {\n+      throw new IllegalArgumentException(\"Cannot determining partitioning of \" + sourceTableName.toString(), e);\n+    }\n+\n+    try {\n+      this.sourceTable = (V1Table) ((TableCatalog) sourceCatalog).loadTable(sourceTableName);\n+      this.sourceCatalogTable = sourceTable.v1Table();\n+    } catch (NoSuchTableException e) {\n+      throw new IllegalArgumentException(String.format(\"Cannot not find source table %s\", sourceTableName), e);\n+    } catch (ClassCastException e) {\n+      throw new IllegalArgumentException(String.format(\"Cannot use a non-v1 table %s as a source\", sourceTableName), e);\n+    }\n+    validateSourceTable(sourceCatalogTable);\n+\n+    this.sourceTableLocation = CatalogUtils.URIToString(sourceCatalogTable.storage().locationUri().get());\n+  }\n+\n+  @Override\n+  public CreateAction setAll(Map<String, String> properties) {\n+    this.additionalProperties.putAll(properties);\n+    return this;\n+  }\n+\n+  @Override\n+  public CreateAction set(String key, String value) {\n+    this.additionalProperties.put(key, value);\n+    return this;\n+  }\n+\n+  protected SparkSession spark() {\n+    return spark;\n+  }\n+\n+  protected String sourceTableLocation() {\n+    return sourceTableLocation;\n+  }\n+\n+  protected CatalogTable v1SourceTable() {\n+    return sourceCatalogTable;\n+  }\n+\n+  protected CatalogPlugin sourceCatalog() {\n+    return sourceCatalog;\n+  }\n+\n+  protected Identifier sourceTableName() {\n+    return sourceTableName;\n+  }\n+\n+  protected Transform[] sourcePartitionSpec() {\n+    return sourceTable.partitioning();\n+  }\n+\n+  protected StagingTableCatalog destCatalog() {\n+    return destCatalog;\n+  }\n+\n+  protected Identifier destTableName() {\n+    return destTableName;\n+  }\n+\n+  protected Map<String, String> additionalProperties() {\n+    return additionalProperties;\n+  }\n+\n+  private static void validateSourceTable(CatalogTable sourceTable) {\n+    String sourceTableProvider = sourceTable.provider().get().toLowerCase(Locale.ROOT);\n+\n+    if (!ALLOWED_SOURCES.contains(sourceTableProvider)) {\n+      throw new IllegalArgumentException(\n+          String.format(\"Cannot create an Iceberg table from source provider: %s\", sourceTableProvider));\n+    }\n+\n+    if (sourceTable.storage().locationUri().isEmpty()) {\n+      throw new IllegalArgumentException(\"Cannot create an Iceberg table from a source without an explicit location\");\n+    }\n+  }\n+\n+  protected static Map<String, String> tableLocationProperties(String tableLocation) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjMxNDc0MQ=="}, "originalCommit": {"oid": "09f329bc39e8a2a1b2b5f925c580a2177833510b"}, "originalPosition": 160}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODgyMzQyMA==", "bodyText": "Well, it probably depends on the use case. Some people may actually need a way to move back without loosing writes after all snapshots are expired. Also, it is a bit surprising for folks less familiar with Iceberg that the data is written to data folder by default.", "url": "https://github.com/apache/iceberg/pull/1525#discussion_r538823420", "createdAt": "2020-12-08T21:33:05Z", "author": {"login": "aokolnychyi"}, "path": "spark3/src/main/java/org/apache/iceberg/actions/Spark3CreateAction.java", "diffHunk": "@@ -0,0 +1,183 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.actions;\n+\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Set;\n+import org.apache.iceberg.PartitionSpec;\n+import org.apache.iceberg.Table;\n+import org.apache.iceberg.TableProperties;\n+import org.apache.iceberg.mapping.MappingUtil;\n+import org.apache.iceberg.mapping.NameMapping;\n+import org.apache.iceberg.mapping.NameMappingParser;\n+import org.apache.iceberg.relocated.com.google.common.collect.ImmutableMap;\n+import org.apache.iceberg.relocated.com.google.common.collect.ImmutableSet;\n+import org.apache.iceberg.relocated.com.google.common.collect.Maps;\n+import org.apache.iceberg.spark.SparkCatalog;\n+import org.apache.iceberg.spark.SparkSchemaUtil;\n+import org.apache.iceberg.spark.SparkSessionCatalog;\n+import org.apache.spark.sql.AnalysisException;\n+import org.apache.spark.sql.SparkSession;\n+import org.apache.spark.sql.catalyst.analysis.NoSuchTableException;\n+import org.apache.spark.sql.catalyst.catalog.CatalogTable;\n+import org.apache.spark.sql.catalyst.catalog.CatalogUtils;\n+import org.apache.spark.sql.connector.catalog.CatalogPlugin;\n+import org.apache.spark.sql.connector.catalog.Identifier;\n+import org.apache.spark.sql.connector.catalog.StagingTableCatalog;\n+import org.apache.spark.sql.connector.catalog.TableCatalog;\n+import org.apache.spark.sql.connector.catalog.V1Table;\n+import org.apache.spark.sql.connector.expressions.Transform;\n+\n+abstract class Spark3CreateAction implements CreateAction {\n+  private static final Set<String> ALLOWED_SOURCES = ImmutableSet.of(\"parquet\", \"avro\", \"orc\", \"hive\");\n+  protected static final String ICEBERG_METADATA_FOLDER = \"metadata\";\n+\n+  private final SparkSession spark;\n+\n+  // Source Fields\n+  private final V1Table sourceTable;\n+  private final CatalogTable sourceCatalogTable;\n+  private final String sourceTableLocation;\n+  private final CatalogPlugin sourceCatalog;\n+  private final Identifier sourceTableName;\n+  private final PartitionSpec sourcePartitionSpec;\n+\n+  // Destination Fields\n+  private final StagingTableCatalog destCatalog;\n+  private final Identifier destTableName;\n+\n+  // Optional Parameters for destination\n+  private Map<String, String> additionalProperties = Maps.newHashMap();\n+\n+  Spark3CreateAction(SparkSession spark, CatalogPlugin sourceCatalog, Identifier sourceTableName,\n+                       CatalogPlugin destCatalog,  Identifier destTableName) {\n+\n+    this.spark = spark;\n+    this.sourceCatalog = checkSourceCatalog(sourceCatalog);\n+    this.sourceTableName = sourceTableName;\n+    this.destCatalog = checkDestinationCatalog(destCatalog);\n+    this.destTableName = destTableName;\n+\n+    try {\n+      String sourceString = String.join(\".\", sourceTableName.namespace()) + \".\" + sourceTableName.name();\n+      sourcePartitionSpec = SparkSchemaUtil.specForTable(spark, sourceString);\n+    } catch (AnalysisException e) {\n+      throw new IllegalArgumentException(\"Cannot determining partitioning of \" + sourceTableName.toString(), e);\n+    }\n+\n+    try {\n+      this.sourceTable = (V1Table) ((TableCatalog) sourceCatalog).loadTable(sourceTableName);\n+      this.sourceCatalogTable = sourceTable.v1Table();\n+    } catch (NoSuchTableException e) {\n+      throw new IllegalArgumentException(String.format(\"Cannot not find source table %s\", sourceTableName), e);\n+    } catch (ClassCastException e) {\n+      throw new IllegalArgumentException(String.format(\"Cannot use a non-v1 table %s as a source\", sourceTableName), e);\n+    }\n+    validateSourceTable(sourceCatalogTable);\n+\n+    this.sourceTableLocation = CatalogUtils.URIToString(sourceCatalogTable.storage().locationUri().get());\n+  }\n+\n+  @Override\n+  public CreateAction setAll(Map<String, String> properties) {\n+    this.additionalProperties.putAll(properties);\n+    return this;\n+  }\n+\n+  @Override\n+  public CreateAction set(String key, String value) {\n+    this.additionalProperties.put(key, value);\n+    return this;\n+  }\n+\n+  protected SparkSession spark() {\n+    return spark;\n+  }\n+\n+  protected String sourceTableLocation() {\n+    return sourceTableLocation;\n+  }\n+\n+  protected CatalogTable v1SourceTable() {\n+    return sourceCatalogTable;\n+  }\n+\n+  protected CatalogPlugin sourceCatalog() {\n+    return sourceCatalog;\n+  }\n+\n+  protected Identifier sourceTableName() {\n+    return sourceTableName;\n+  }\n+\n+  protected Transform[] sourcePartitionSpec() {\n+    return sourceTable.partitioning();\n+  }\n+\n+  protected StagingTableCatalog destCatalog() {\n+    return destCatalog;\n+  }\n+\n+  protected Identifier destTableName() {\n+    return destTableName;\n+  }\n+\n+  protected Map<String, String> additionalProperties() {\n+    return additionalProperties;\n+  }\n+\n+  private static void validateSourceTable(CatalogTable sourceTable) {\n+    String sourceTableProvider = sourceTable.provider().get().toLowerCase(Locale.ROOT);\n+\n+    if (!ALLOWED_SOURCES.contains(sourceTableProvider)) {\n+      throw new IllegalArgumentException(\n+          String.format(\"Cannot create an Iceberg table from source provider: %s\", sourceTableProvider));\n+    }\n+\n+    if (sourceTable.storage().locationUri().isEmpty()) {\n+      throw new IllegalArgumentException(\"Cannot create an Iceberg table from a source without an explicit location\");\n+    }\n+  }\n+\n+  protected static Map<String, String> tableLocationProperties(String tableLocation) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjMxNDc0MQ=="}, "originalCommit": {"oid": "09f329bc39e8a2a1b2b5f925c580a2177833510b"}, "originalPosition": 160}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODgyNTAzMg==", "bodyText": "Rolling back the table should be also possible even if we write the data to the same location. We can call rollback and then expire/remove orphan files. That said, I will be okay if we allow extra properties to be set during MIGRATE and document this properly.", "url": "https://github.com/apache/iceberg/pull/1525#discussion_r538825032", "createdAt": "2020-12-08T21:35:57Z", "author": {"login": "aokolnychyi"}, "path": "spark3/src/main/java/org/apache/iceberg/actions/Spark3CreateAction.java", "diffHunk": "@@ -0,0 +1,183 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.actions;\n+\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Set;\n+import org.apache.iceberg.PartitionSpec;\n+import org.apache.iceberg.Table;\n+import org.apache.iceberg.TableProperties;\n+import org.apache.iceberg.mapping.MappingUtil;\n+import org.apache.iceberg.mapping.NameMapping;\n+import org.apache.iceberg.mapping.NameMappingParser;\n+import org.apache.iceberg.relocated.com.google.common.collect.ImmutableMap;\n+import org.apache.iceberg.relocated.com.google.common.collect.ImmutableSet;\n+import org.apache.iceberg.relocated.com.google.common.collect.Maps;\n+import org.apache.iceberg.spark.SparkCatalog;\n+import org.apache.iceberg.spark.SparkSchemaUtil;\n+import org.apache.iceberg.spark.SparkSessionCatalog;\n+import org.apache.spark.sql.AnalysisException;\n+import org.apache.spark.sql.SparkSession;\n+import org.apache.spark.sql.catalyst.analysis.NoSuchTableException;\n+import org.apache.spark.sql.catalyst.catalog.CatalogTable;\n+import org.apache.spark.sql.catalyst.catalog.CatalogUtils;\n+import org.apache.spark.sql.connector.catalog.CatalogPlugin;\n+import org.apache.spark.sql.connector.catalog.Identifier;\n+import org.apache.spark.sql.connector.catalog.StagingTableCatalog;\n+import org.apache.spark.sql.connector.catalog.TableCatalog;\n+import org.apache.spark.sql.connector.catalog.V1Table;\n+import org.apache.spark.sql.connector.expressions.Transform;\n+\n+abstract class Spark3CreateAction implements CreateAction {\n+  private static final Set<String> ALLOWED_SOURCES = ImmutableSet.of(\"parquet\", \"avro\", \"orc\", \"hive\");\n+  protected static final String ICEBERG_METADATA_FOLDER = \"metadata\";\n+\n+  private final SparkSession spark;\n+\n+  // Source Fields\n+  private final V1Table sourceTable;\n+  private final CatalogTable sourceCatalogTable;\n+  private final String sourceTableLocation;\n+  private final CatalogPlugin sourceCatalog;\n+  private final Identifier sourceTableName;\n+  private final PartitionSpec sourcePartitionSpec;\n+\n+  // Destination Fields\n+  private final StagingTableCatalog destCatalog;\n+  private final Identifier destTableName;\n+\n+  // Optional Parameters for destination\n+  private Map<String, String> additionalProperties = Maps.newHashMap();\n+\n+  Spark3CreateAction(SparkSession spark, CatalogPlugin sourceCatalog, Identifier sourceTableName,\n+                       CatalogPlugin destCatalog,  Identifier destTableName) {\n+\n+    this.spark = spark;\n+    this.sourceCatalog = checkSourceCatalog(sourceCatalog);\n+    this.sourceTableName = sourceTableName;\n+    this.destCatalog = checkDestinationCatalog(destCatalog);\n+    this.destTableName = destTableName;\n+\n+    try {\n+      String sourceString = String.join(\".\", sourceTableName.namespace()) + \".\" + sourceTableName.name();\n+      sourcePartitionSpec = SparkSchemaUtil.specForTable(spark, sourceString);\n+    } catch (AnalysisException e) {\n+      throw new IllegalArgumentException(\"Cannot determining partitioning of \" + sourceTableName.toString(), e);\n+    }\n+\n+    try {\n+      this.sourceTable = (V1Table) ((TableCatalog) sourceCatalog).loadTable(sourceTableName);\n+      this.sourceCatalogTable = sourceTable.v1Table();\n+    } catch (NoSuchTableException e) {\n+      throw new IllegalArgumentException(String.format(\"Cannot not find source table %s\", sourceTableName), e);\n+    } catch (ClassCastException e) {\n+      throw new IllegalArgumentException(String.format(\"Cannot use a non-v1 table %s as a source\", sourceTableName), e);\n+    }\n+    validateSourceTable(sourceCatalogTable);\n+\n+    this.sourceTableLocation = CatalogUtils.URIToString(sourceCatalogTable.storage().locationUri().get());\n+  }\n+\n+  @Override\n+  public CreateAction setAll(Map<String, String> properties) {\n+    this.additionalProperties.putAll(properties);\n+    return this;\n+  }\n+\n+  @Override\n+  public CreateAction set(String key, String value) {\n+    this.additionalProperties.put(key, value);\n+    return this;\n+  }\n+\n+  protected SparkSession spark() {\n+    return spark;\n+  }\n+\n+  protected String sourceTableLocation() {\n+    return sourceTableLocation;\n+  }\n+\n+  protected CatalogTable v1SourceTable() {\n+    return sourceCatalogTable;\n+  }\n+\n+  protected CatalogPlugin sourceCatalog() {\n+    return sourceCatalog;\n+  }\n+\n+  protected Identifier sourceTableName() {\n+    return sourceTableName;\n+  }\n+\n+  protected Transform[] sourcePartitionSpec() {\n+    return sourceTable.partitioning();\n+  }\n+\n+  protected StagingTableCatalog destCatalog() {\n+    return destCatalog;\n+  }\n+\n+  protected Identifier destTableName() {\n+    return destTableName;\n+  }\n+\n+  protected Map<String, String> additionalProperties() {\n+    return additionalProperties;\n+  }\n+\n+  private static void validateSourceTable(CatalogTable sourceTable) {\n+    String sourceTableProvider = sourceTable.provider().get().toLowerCase(Locale.ROOT);\n+\n+    if (!ALLOWED_SOURCES.contains(sourceTableProvider)) {\n+      throw new IllegalArgumentException(\n+          String.format(\"Cannot create an Iceberg table from source provider: %s\", sourceTableProvider));\n+    }\n+\n+    if (sourceTable.storage().locationUri().isEmpty()) {\n+      throw new IllegalArgumentException(\"Cannot create an Iceberg table from a source without an explicit location\");\n+    }\n+  }\n+\n+  protected static Map<String, String> tableLocationProperties(String tableLocation) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjMxNDc0MQ=="}, "originalCommit": {"oid": "09f329bc39e8a2a1b2b5f925c580a2177833510b"}, "originalPosition": 160}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3OTkzNzEyOnYy", "diffSide": "RIGHT", "path": "spark/src/main/java/org/apache/iceberg/actions/CreateAction.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxMzozMDoyM1rOIBbgrA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxMzozMToxNFrOIBbj8Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODM3MDIyMA==", "bodyText": "I am fine with returning a number of imported files but if someone has any ideas about other useful info, we may consider adding a result class.", "url": "https://github.com/apache/iceberg/pull/1525#discussion_r538370220", "createdAt": "2020-12-08T13:30:23Z", "author": {"login": "aokolnychyi"}, "path": "spark/src/main/java/org/apache/iceberg/actions/CreateAction.java", "diffHunk": "@@ -0,0 +1,43 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.actions;\n+\n+import java.util.Map;\n+\n+interface CreateAction extends Action<Long> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e5636c7804ffd321253aa0d3a775e0c2a7c10e68"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODM3MTA1Nw==", "bodyText": "We used to return the number of imported partitions but we cannot compute it easily if snapshot id inheritance is enabled.", "url": "https://github.com/apache/iceberg/pull/1525#discussion_r538371057", "createdAt": "2020-12-08T13:31:14Z", "author": {"login": "aokolnychyi"}, "path": "spark/src/main/java/org/apache/iceberg/actions/CreateAction.java", "diffHunk": "@@ -0,0 +1,43 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.actions;\n+\n+import java.util.Map;\n+\n+interface CreateAction extends Action<Long> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODM3MDIyMA=="}, "originalCommit": {"oid": "e5636c7804ffd321253aa0d3a775e0c2a7c10e68"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3OTk0OTQ4OnYy", "diffSide": "RIGHT", "path": "spark/src/main/java/org/apache/iceberg/actions/CreateAction.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxMzozMjoyNVrOIBboww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxMzozMjoyNVrOIBboww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODM3MjI5MQ==", "bodyText": "nit: extra line", "url": "https://github.com/apache/iceberg/pull/1525#discussion_r538372291", "createdAt": "2020-12-08T13:32:25Z", "author": {"login": "aokolnychyi"}, "path": "spark/src/main/java/org/apache/iceberg/actions/CreateAction.java", "diffHunk": "@@ -0,0 +1,43 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.actions;\n+\n+import java.util.Map;\n+\n+interface CreateAction extends Action<Long> {\n+\n+  /**\n+   * Adds additional properties to the newly created Iceberg Table. Any properties with\n+   * the same key name will be overwritten.\n+   * @param properties a map of properties to be included\n+   * @return this for chaining\n+   */\n+  CreateAction withProperties(Map<String, String> properties);\n+\n+  /**\n+   * Adds an additional property to the newly created Iceberg Table. Any properties\n+   * with the same key name will be overwritten.\n+   * @param key the key of the property to add\n+   * @param value the value of the property to add\n+   * @return this for chaining\n+   */\n+  CreateAction withProperty(String key, String value);\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e5636c7804ffd321253aa0d3a775e0c2a7c10e68"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3OTk2ODI1OnYy", "diffSide": "RIGHT", "path": "spark/src/main/java/org/apache/iceberg/actions/CreateAction.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxMzozNToyOVrOIBb06A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxMzozNToyOVrOIBb06A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODM3NTQwMA==", "bodyText": "nit: Table -> table", "url": "https://github.com/apache/iceberg/pull/1525#discussion_r538375400", "createdAt": "2020-12-08T13:35:29Z", "author": {"login": "aokolnychyi"}, "path": "spark/src/main/java/org/apache/iceberg/actions/CreateAction.java", "diffHunk": "@@ -0,0 +1,43 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.actions;\n+\n+import java.util.Map;\n+\n+interface CreateAction extends Action<Long> {\n+\n+  /**\n+   * Adds additional properties to the newly created Iceberg Table. Any properties with", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e5636c7804ffd321253aa0d3a775e0c2a7c10e68"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3OTk2ODgzOnYy", "diffSide": "RIGHT", "path": "spark/src/main/java/org/apache/iceberg/actions/CreateAction.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxMzozNTozNFrOIBb1TA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxMzozNTozNFrOIBb1TA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODM3NTUwMA==", "bodyText": "nit: Table -> table", "url": "https://github.com/apache/iceberg/pull/1525#discussion_r538375500", "createdAt": "2020-12-08T13:35:34Z", "author": {"login": "aokolnychyi"}, "path": "spark/src/main/java/org/apache/iceberg/actions/CreateAction.java", "diffHunk": "@@ -0,0 +1,43 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.actions;\n+\n+import java.util.Map;\n+\n+interface CreateAction extends Action<Long> {\n+\n+  /**\n+   * Adds additional properties to the newly created Iceberg Table. Any properties with\n+   * the same key name will be overwritten.\n+   * @param properties a map of properties to be included\n+   * @return this for chaining\n+   */\n+  CreateAction withProperties(Map<String, String> properties);\n+\n+  /**\n+   * Adds an additional property to the newly created Iceberg Table. Any properties", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e5636c7804ffd321253aa0d3a775e0c2a7c10e68"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3OTk4ODYzOnYy", "diffSide": "RIGHT", "path": "spark3/src/main/java/org/apache/iceberg/actions/Spark3CreateAction.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxMzozODozMVrOIBcBig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxMzozODozMVrOIBcBig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODM3ODYzNA==", "bodyText": "nit: formatting is off", "url": "https://github.com/apache/iceberg/pull/1525#discussion_r538378634", "createdAt": "2020-12-08T13:38:31Z", "author": {"login": "aokolnychyi"}, "path": "spark3/src/main/java/org/apache/iceberg/actions/Spark3CreateAction.java", "diffHunk": "@@ -0,0 +1,172 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.actions;\n+\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Set;\n+import org.apache.iceberg.Table;\n+import org.apache.iceberg.TableProperties;\n+import org.apache.iceberg.mapping.MappingUtil;\n+import org.apache.iceberg.mapping.NameMapping;\n+import org.apache.iceberg.mapping.NameMappingParser;\n+import org.apache.iceberg.relocated.com.google.common.collect.ImmutableMap;\n+import org.apache.iceberg.relocated.com.google.common.collect.ImmutableSet;\n+import org.apache.iceberg.relocated.com.google.common.collect.Maps;\n+import org.apache.iceberg.spark.SparkCatalog;\n+import org.apache.iceberg.spark.SparkSessionCatalog;\n+import org.apache.spark.sql.SparkSession;\n+import org.apache.spark.sql.catalyst.analysis.NoSuchTableException;\n+import org.apache.spark.sql.catalyst.catalog.CatalogTable;\n+import org.apache.spark.sql.catalyst.catalog.CatalogUtils;\n+import org.apache.spark.sql.connector.catalog.CatalogPlugin;\n+import org.apache.spark.sql.connector.catalog.Identifier;\n+import org.apache.spark.sql.connector.catalog.StagingTableCatalog;\n+import org.apache.spark.sql.connector.catalog.TableCatalog;\n+import org.apache.spark.sql.connector.catalog.V1Table;\n+import org.apache.spark.sql.connector.expressions.Transform;\n+\n+abstract class Spark3CreateAction implements CreateAction {\n+  private static final Set<String> ALLOWED_SOURCES = ImmutableSet.of(\"parquet\", \"avro\", \"orc\", \"hive\");\n+  protected static final String ICEBERG_METADATA_FOLDER = \"metadata\";\n+\n+  private final SparkSession spark;\n+\n+  // Source Fields\n+  private final V1Table sourceTable;\n+  private final CatalogTable sourceCatalogTable;\n+  private final String sourceTableLocation;\n+  private final CatalogPlugin sourceCatalog;\n+  private final Identifier sourceTableIdent;\n+\n+  // Destination Fields\n+  private final StagingTableCatalog destCatalog;\n+  private final Identifier destTableIdent;\n+\n+  // Optional Parameters for destination\n+  private Map<String, String> additionalProperties = Maps.newHashMap();\n+\n+  Spark3CreateAction(SparkSession spark, CatalogPlugin sourceCatalog, Identifier sourceTableIdent,\n+                       CatalogPlugin destCatalog, Identifier destTableIdent) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e5636c7804ffd321253aa0d3a775e0c2a7c10e68"}, "originalPosition": 67}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4MDAxNzk2OnYy", "diffSide": "RIGHT", "path": "spark3/src/main/java/org/apache/iceberg/actions/Spark3CreateAction.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxMzo0MzoxOFrOIBcUjw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxMzo0MzoxOFrOIBcUjw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODM4MzUwMw==", "bodyText": "Can we mark it final?", "url": "https://github.com/apache/iceberg/pull/1525#discussion_r538383503", "createdAt": "2020-12-08T13:43:18Z", "author": {"login": "aokolnychyi"}, "path": "spark3/src/main/java/org/apache/iceberg/actions/Spark3CreateAction.java", "diffHunk": "@@ -0,0 +1,172 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.actions;\n+\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Set;\n+import org.apache.iceberg.Table;\n+import org.apache.iceberg.TableProperties;\n+import org.apache.iceberg.mapping.MappingUtil;\n+import org.apache.iceberg.mapping.NameMapping;\n+import org.apache.iceberg.mapping.NameMappingParser;\n+import org.apache.iceberg.relocated.com.google.common.collect.ImmutableMap;\n+import org.apache.iceberg.relocated.com.google.common.collect.ImmutableSet;\n+import org.apache.iceberg.relocated.com.google.common.collect.Maps;\n+import org.apache.iceberg.spark.SparkCatalog;\n+import org.apache.iceberg.spark.SparkSessionCatalog;\n+import org.apache.spark.sql.SparkSession;\n+import org.apache.spark.sql.catalyst.analysis.NoSuchTableException;\n+import org.apache.spark.sql.catalyst.catalog.CatalogTable;\n+import org.apache.spark.sql.catalyst.catalog.CatalogUtils;\n+import org.apache.spark.sql.connector.catalog.CatalogPlugin;\n+import org.apache.spark.sql.connector.catalog.Identifier;\n+import org.apache.spark.sql.connector.catalog.StagingTableCatalog;\n+import org.apache.spark.sql.connector.catalog.TableCatalog;\n+import org.apache.spark.sql.connector.catalog.V1Table;\n+import org.apache.spark.sql.connector.expressions.Transform;\n+\n+abstract class Spark3CreateAction implements CreateAction {\n+  private static final Set<String> ALLOWED_SOURCES = ImmutableSet.of(\"parquet\", \"avro\", \"orc\", \"hive\");\n+  protected static final String ICEBERG_METADATA_FOLDER = \"metadata\";\n+\n+  private final SparkSession spark;\n+\n+  // Source Fields\n+  private final V1Table sourceTable;\n+  private final CatalogTable sourceCatalogTable;\n+  private final String sourceTableLocation;\n+  private final CatalogPlugin sourceCatalog;\n+  private final Identifier sourceTableIdent;\n+\n+  // Destination Fields\n+  private final StagingTableCatalog destCatalog;\n+  private final Identifier destTableIdent;\n+\n+  // Optional Parameters for destination\n+  private Map<String, String> additionalProperties = Maps.newHashMap();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e5636c7804ffd321253aa0d3a775e0c2a7c10e68"}, "originalPosition": 64}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4MDExMjE2OnYy", "diffSide": "RIGHT", "path": "spark3/src/main/java/org/apache/iceberg/actions/Spark3CreateAction.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxMzo1NjoyMVrOIBdRFA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxNDowMDoxNlrOIBdi4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODM5ODk5Ng==", "bodyText": "It looks like having a separate method to check if it is an Iceberg catalog would make it more readable than having two negations.\nOr we could use ValidationException. It also gives formatting for free.\n    ValidationException.check(\n        catalog instanceof SparkSessionCatalog || catalog instanceof SparkCatalog,\n        \"Unsupported destination catalog. Catalog %s is %s but must be either %s or %s\",\n        catalog.name(), catalog.getClass().getName(), SparkSessionCatalog.class.getName(), SparkCatalog.class.getName());", "url": "https://github.com/apache/iceberg/pull/1525#discussion_r538398996", "createdAt": "2020-12-08T13:56:21Z", "author": {"login": "aokolnychyi"}, "path": "spark3/src/main/java/org/apache/iceberg/actions/Spark3CreateAction.java", "diffHunk": "@@ -0,0 +1,172 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.actions;\n+\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Set;\n+import org.apache.iceberg.Table;\n+import org.apache.iceberg.TableProperties;\n+import org.apache.iceberg.mapping.MappingUtil;\n+import org.apache.iceberg.mapping.NameMapping;\n+import org.apache.iceberg.mapping.NameMappingParser;\n+import org.apache.iceberg.relocated.com.google.common.collect.ImmutableMap;\n+import org.apache.iceberg.relocated.com.google.common.collect.ImmutableSet;\n+import org.apache.iceberg.relocated.com.google.common.collect.Maps;\n+import org.apache.iceberg.spark.SparkCatalog;\n+import org.apache.iceberg.spark.SparkSessionCatalog;\n+import org.apache.spark.sql.SparkSession;\n+import org.apache.spark.sql.catalyst.analysis.NoSuchTableException;\n+import org.apache.spark.sql.catalyst.catalog.CatalogTable;\n+import org.apache.spark.sql.catalyst.catalog.CatalogUtils;\n+import org.apache.spark.sql.connector.catalog.CatalogPlugin;\n+import org.apache.spark.sql.connector.catalog.Identifier;\n+import org.apache.spark.sql.connector.catalog.StagingTableCatalog;\n+import org.apache.spark.sql.connector.catalog.TableCatalog;\n+import org.apache.spark.sql.connector.catalog.V1Table;\n+import org.apache.spark.sql.connector.expressions.Transform;\n+\n+abstract class Spark3CreateAction implements CreateAction {\n+  private static final Set<String> ALLOWED_SOURCES = ImmutableSet.of(\"parquet\", \"avro\", \"orc\", \"hive\");\n+  protected static final String ICEBERG_METADATA_FOLDER = \"metadata\";\n+\n+  private final SparkSession spark;\n+\n+  // Source Fields\n+  private final V1Table sourceTable;\n+  private final CatalogTable sourceCatalogTable;\n+  private final String sourceTableLocation;\n+  private final CatalogPlugin sourceCatalog;\n+  private final Identifier sourceTableIdent;\n+\n+  // Destination Fields\n+  private final StagingTableCatalog destCatalog;\n+  private final Identifier destTableIdent;\n+\n+  // Optional Parameters for destination\n+  private Map<String, String> additionalProperties = Maps.newHashMap();\n+\n+  Spark3CreateAction(SparkSession spark, CatalogPlugin sourceCatalog, Identifier sourceTableIdent,\n+                       CatalogPlugin destCatalog, Identifier destTableIdent) {\n+\n+    this.spark = spark;\n+    this.sourceCatalog = checkSourceCatalog(sourceCatalog);\n+    this.sourceTableIdent = sourceTableIdent;\n+    this.destCatalog = checkDestinationCatalog(destCatalog);\n+    this.destTableIdent = destTableIdent;\n+\n+    try {\n+      this.sourceTable = (V1Table) ((TableCatalog) sourceCatalog).loadTable(sourceTableIdent);\n+      this.sourceCatalogTable = sourceTable.v1Table();\n+    } catch (NoSuchTableException e) {\n+      throw new IllegalArgumentException(String.format(\"Cannot not find source table %s\", sourceTableIdent), e);\n+    } catch (ClassCastException e) {\n+      throw new IllegalArgumentException(String.format(\"Cannot use non-v1 table %s as a source\", sourceTableIdent), e);\n+    }\n+    validateSourceTable(sourceCatalogTable);\n+\n+    this.sourceTableLocation = CatalogUtils.URIToString(sourceCatalogTable.storage().locationUri().get());\n+  }\n+\n+  @Override\n+  public CreateAction withProperties(Map<String, String> properties) {\n+    this.additionalProperties.putAll(properties);\n+    return this;\n+  }\n+\n+  @Override\n+  public CreateAction withProperty(String key, String value) {\n+    this.additionalProperties.put(key, value);\n+    return this;\n+  }\n+\n+  protected SparkSession spark() {\n+    return spark;\n+  }\n+\n+  protected String sourceTableLocation() {\n+    return sourceTableLocation;\n+  }\n+\n+  protected CatalogTable v1SourceTable() {\n+    return sourceCatalogTable;\n+  }\n+\n+  protected CatalogPlugin sourceCatalog() {\n+    return sourceCatalog;\n+  }\n+\n+  protected Identifier sourceTableName() {\n+    return sourceTableIdent;\n+  }\n+\n+  protected Transform[] sourcePartitionSpec() {\n+    return sourceTable.partitioning();\n+  }\n+\n+  protected StagingTableCatalog destCatalog() {\n+    return destCatalog;\n+  }\n+\n+  protected Identifier destTableName() {\n+    return destTableIdent;\n+  }\n+\n+  protected Map<String, String> additionalProperties() {\n+    return additionalProperties;\n+  }\n+\n+  private static void validateSourceTable(CatalogTable sourceTable) {\n+    String sourceTableProvider = sourceTable.provider().get().toLowerCase(Locale.ROOT);\n+\n+    if (!ALLOWED_SOURCES.contains(sourceTableProvider)) {\n+      throw new IllegalArgumentException(\n+          String.format(\"Cannot create an Iceberg table from source provider: %s\", sourceTableProvider));\n+    }\n+\n+    if (sourceTable.storage().locationUri().isEmpty()) {\n+      throw new IllegalArgumentException(\"Cannot create an Iceberg table from a source without an explicit location\");\n+    }\n+  }\n+\n+  protected static Map<String, String> tableLocationProperties(String tableLocation) {\n+    return ImmutableMap.of(\n+        TableProperties.WRITE_METADATA_LOCATION, tableLocation + \"/\" + ICEBERG_METADATA_FOLDER,\n+        TableProperties.WRITE_NEW_DATA_LOCATION, tableLocation\n+    );\n+  }\n+\n+  protected static void assignDefaultTableNameMapping(Table table) {\n+    NameMapping nameMapping = MappingUtil.create(table.schema());\n+    String nameMappingJson = NameMappingParser.toJson(nameMapping);\n+    table.updateProperties().set(TableProperties.DEFAULT_NAME_MAPPING, nameMappingJson).commit();\n+  }\n+\n+  private static StagingTableCatalog checkDestinationCatalog(CatalogPlugin catalog) {\n+    if (!(catalog instanceof SparkSessionCatalog) && !(catalog instanceof SparkCatalog)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e5636c7804ffd321253aa0d3a775e0c2a7c10e68"}, "originalPosition": 163}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODQwMDA1Ng==", "bodyText": "Using ValidationException seems pretty clean. What do you think, @RussellSpitzer?", "url": "https://github.com/apache/iceberg/pull/1525#discussion_r538400056", "createdAt": "2020-12-08T13:57:07Z", "author": {"login": "aokolnychyi"}, "path": "spark3/src/main/java/org/apache/iceberg/actions/Spark3CreateAction.java", "diffHunk": "@@ -0,0 +1,172 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.actions;\n+\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Set;\n+import org.apache.iceberg.Table;\n+import org.apache.iceberg.TableProperties;\n+import org.apache.iceberg.mapping.MappingUtil;\n+import org.apache.iceberg.mapping.NameMapping;\n+import org.apache.iceberg.mapping.NameMappingParser;\n+import org.apache.iceberg.relocated.com.google.common.collect.ImmutableMap;\n+import org.apache.iceberg.relocated.com.google.common.collect.ImmutableSet;\n+import org.apache.iceberg.relocated.com.google.common.collect.Maps;\n+import org.apache.iceberg.spark.SparkCatalog;\n+import org.apache.iceberg.spark.SparkSessionCatalog;\n+import org.apache.spark.sql.SparkSession;\n+import org.apache.spark.sql.catalyst.analysis.NoSuchTableException;\n+import org.apache.spark.sql.catalyst.catalog.CatalogTable;\n+import org.apache.spark.sql.catalyst.catalog.CatalogUtils;\n+import org.apache.spark.sql.connector.catalog.CatalogPlugin;\n+import org.apache.spark.sql.connector.catalog.Identifier;\n+import org.apache.spark.sql.connector.catalog.StagingTableCatalog;\n+import org.apache.spark.sql.connector.catalog.TableCatalog;\n+import org.apache.spark.sql.connector.catalog.V1Table;\n+import org.apache.spark.sql.connector.expressions.Transform;\n+\n+abstract class Spark3CreateAction implements CreateAction {\n+  private static final Set<String> ALLOWED_SOURCES = ImmutableSet.of(\"parquet\", \"avro\", \"orc\", \"hive\");\n+  protected static final String ICEBERG_METADATA_FOLDER = \"metadata\";\n+\n+  private final SparkSession spark;\n+\n+  // Source Fields\n+  private final V1Table sourceTable;\n+  private final CatalogTable sourceCatalogTable;\n+  private final String sourceTableLocation;\n+  private final CatalogPlugin sourceCatalog;\n+  private final Identifier sourceTableIdent;\n+\n+  // Destination Fields\n+  private final StagingTableCatalog destCatalog;\n+  private final Identifier destTableIdent;\n+\n+  // Optional Parameters for destination\n+  private Map<String, String> additionalProperties = Maps.newHashMap();\n+\n+  Spark3CreateAction(SparkSession spark, CatalogPlugin sourceCatalog, Identifier sourceTableIdent,\n+                       CatalogPlugin destCatalog, Identifier destTableIdent) {\n+\n+    this.spark = spark;\n+    this.sourceCatalog = checkSourceCatalog(sourceCatalog);\n+    this.sourceTableIdent = sourceTableIdent;\n+    this.destCatalog = checkDestinationCatalog(destCatalog);\n+    this.destTableIdent = destTableIdent;\n+\n+    try {\n+      this.sourceTable = (V1Table) ((TableCatalog) sourceCatalog).loadTable(sourceTableIdent);\n+      this.sourceCatalogTable = sourceTable.v1Table();\n+    } catch (NoSuchTableException e) {\n+      throw new IllegalArgumentException(String.format(\"Cannot not find source table %s\", sourceTableIdent), e);\n+    } catch (ClassCastException e) {\n+      throw new IllegalArgumentException(String.format(\"Cannot use non-v1 table %s as a source\", sourceTableIdent), e);\n+    }\n+    validateSourceTable(sourceCatalogTable);\n+\n+    this.sourceTableLocation = CatalogUtils.URIToString(sourceCatalogTable.storage().locationUri().get());\n+  }\n+\n+  @Override\n+  public CreateAction withProperties(Map<String, String> properties) {\n+    this.additionalProperties.putAll(properties);\n+    return this;\n+  }\n+\n+  @Override\n+  public CreateAction withProperty(String key, String value) {\n+    this.additionalProperties.put(key, value);\n+    return this;\n+  }\n+\n+  protected SparkSession spark() {\n+    return spark;\n+  }\n+\n+  protected String sourceTableLocation() {\n+    return sourceTableLocation;\n+  }\n+\n+  protected CatalogTable v1SourceTable() {\n+    return sourceCatalogTable;\n+  }\n+\n+  protected CatalogPlugin sourceCatalog() {\n+    return sourceCatalog;\n+  }\n+\n+  protected Identifier sourceTableName() {\n+    return sourceTableIdent;\n+  }\n+\n+  protected Transform[] sourcePartitionSpec() {\n+    return sourceTable.partitioning();\n+  }\n+\n+  protected StagingTableCatalog destCatalog() {\n+    return destCatalog;\n+  }\n+\n+  protected Identifier destTableName() {\n+    return destTableIdent;\n+  }\n+\n+  protected Map<String, String> additionalProperties() {\n+    return additionalProperties;\n+  }\n+\n+  private static void validateSourceTable(CatalogTable sourceTable) {\n+    String sourceTableProvider = sourceTable.provider().get().toLowerCase(Locale.ROOT);\n+\n+    if (!ALLOWED_SOURCES.contains(sourceTableProvider)) {\n+      throw new IllegalArgumentException(\n+          String.format(\"Cannot create an Iceberg table from source provider: %s\", sourceTableProvider));\n+    }\n+\n+    if (sourceTable.storage().locationUri().isEmpty()) {\n+      throw new IllegalArgumentException(\"Cannot create an Iceberg table from a source without an explicit location\");\n+    }\n+  }\n+\n+  protected static Map<String, String> tableLocationProperties(String tableLocation) {\n+    return ImmutableMap.of(\n+        TableProperties.WRITE_METADATA_LOCATION, tableLocation + \"/\" + ICEBERG_METADATA_FOLDER,\n+        TableProperties.WRITE_NEW_DATA_LOCATION, tableLocation\n+    );\n+  }\n+\n+  protected static void assignDefaultTableNameMapping(Table table) {\n+    NameMapping nameMapping = MappingUtil.create(table.schema());\n+    String nameMappingJson = NameMappingParser.toJson(nameMapping);\n+    table.updateProperties().set(TableProperties.DEFAULT_NAME_MAPPING, nameMappingJson).commit();\n+  }\n+\n+  private static StagingTableCatalog checkDestinationCatalog(CatalogPlugin catalog) {\n+    if (!(catalog instanceof SparkSessionCatalog) && !(catalog instanceof SparkCatalog)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODM5ODk5Ng=="}, "originalCommit": {"oid": "e5636c7804ffd321253aa0d3a775e0c2a7c10e68"}, "originalPosition": 163}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODQwMzU1NA==", "bodyText": "Or shall we even use Preconditions.checkArgument? I think that would be better.", "url": "https://github.com/apache/iceberg/pull/1525#discussion_r538403554", "createdAt": "2020-12-08T14:00:16Z", "author": {"login": "aokolnychyi"}, "path": "spark3/src/main/java/org/apache/iceberg/actions/Spark3CreateAction.java", "diffHunk": "@@ -0,0 +1,172 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.actions;\n+\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Set;\n+import org.apache.iceberg.Table;\n+import org.apache.iceberg.TableProperties;\n+import org.apache.iceberg.mapping.MappingUtil;\n+import org.apache.iceberg.mapping.NameMapping;\n+import org.apache.iceberg.mapping.NameMappingParser;\n+import org.apache.iceberg.relocated.com.google.common.collect.ImmutableMap;\n+import org.apache.iceberg.relocated.com.google.common.collect.ImmutableSet;\n+import org.apache.iceberg.relocated.com.google.common.collect.Maps;\n+import org.apache.iceberg.spark.SparkCatalog;\n+import org.apache.iceberg.spark.SparkSessionCatalog;\n+import org.apache.spark.sql.SparkSession;\n+import org.apache.spark.sql.catalyst.analysis.NoSuchTableException;\n+import org.apache.spark.sql.catalyst.catalog.CatalogTable;\n+import org.apache.spark.sql.catalyst.catalog.CatalogUtils;\n+import org.apache.spark.sql.connector.catalog.CatalogPlugin;\n+import org.apache.spark.sql.connector.catalog.Identifier;\n+import org.apache.spark.sql.connector.catalog.StagingTableCatalog;\n+import org.apache.spark.sql.connector.catalog.TableCatalog;\n+import org.apache.spark.sql.connector.catalog.V1Table;\n+import org.apache.spark.sql.connector.expressions.Transform;\n+\n+abstract class Spark3CreateAction implements CreateAction {\n+  private static final Set<String> ALLOWED_SOURCES = ImmutableSet.of(\"parquet\", \"avro\", \"orc\", \"hive\");\n+  protected static final String ICEBERG_METADATA_FOLDER = \"metadata\";\n+\n+  private final SparkSession spark;\n+\n+  // Source Fields\n+  private final V1Table sourceTable;\n+  private final CatalogTable sourceCatalogTable;\n+  private final String sourceTableLocation;\n+  private final CatalogPlugin sourceCatalog;\n+  private final Identifier sourceTableIdent;\n+\n+  // Destination Fields\n+  private final StagingTableCatalog destCatalog;\n+  private final Identifier destTableIdent;\n+\n+  // Optional Parameters for destination\n+  private Map<String, String> additionalProperties = Maps.newHashMap();\n+\n+  Spark3CreateAction(SparkSession spark, CatalogPlugin sourceCatalog, Identifier sourceTableIdent,\n+                       CatalogPlugin destCatalog, Identifier destTableIdent) {\n+\n+    this.spark = spark;\n+    this.sourceCatalog = checkSourceCatalog(sourceCatalog);\n+    this.sourceTableIdent = sourceTableIdent;\n+    this.destCatalog = checkDestinationCatalog(destCatalog);\n+    this.destTableIdent = destTableIdent;\n+\n+    try {\n+      this.sourceTable = (V1Table) ((TableCatalog) sourceCatalog).loadTable(sourceTableIdent);\n+      this.sourceCatalogTable = sourceTable.v1Table();\n+    } catch (NoSuchTableException e) {\n+      throw new IllegalArgumentException(String.format(\"Cannot not find source table %s\", sourceTableIdent), e);\n+    } catch (ClassCastException e) {\n+      throw new IllegalArgumentException(String.format(\"Cannot use non-v1 table %s as a source\", sourceTableIdent), e);\n+    }\n+    validateSourceTable(sourceCatalogTable);\n+\n+    this.sourceTableLocation = CatalogUtils.URIToString(sourceCatalogTable.storage().locationUri().get());\n+  }\n+\n+  @Override\n+  public CreateAction withProperties(Map<String, String> properties) {\n+    this.additionalProperties.putAll(properties);\n+    return this;\n+  }\n+\n+  @Override\n+  public CreateAction withProperty(String key, String value) {\n+    this.additionalProperties.put(key, value);\n+    return this;\n+  }\n+\n+  protected SparkSession spark() {\n+    return spark;\n+  }\n+\n+  protected String sourceTableLocation() {\n+    return sourceTableLocation;\n+  }\n+\n+  protected CatalogTable v1SourceTable() {\n+    return sourceCatalogTable;\n+  }\n+\n+  protected CatalogPlugin sourceCatalog() {\n+    return sourceCatalog;\n+  }\n+\n+  protected Identifier sourceTableName() {\n+    return sourceTableIdent;\n+  }\n+\n+  protected Transform[] sourcePartitionSpec() {\n+    return sourceTable.partitioning();\n+  }\n+\n+  protected StagingTableCatalog destCatalog() {\n+    return destCatalog;\n+  }\n+\n+  protected Identifier destTableName() {\n+    return destTableIdent;\n+  }\n+\n+  protected Map<String, String> additionalProperties() {\n+    return additionalProperties;\n+  }\n+\n+  private static void validateSourceTable(CatalogTable sourceTable) {\n+    String sourceTableProvider = sourceTable.provider().get().toLowerCase(Locale.ROOT);\n+\n+    if (!ALLOWED_SOURCES.contains(sourceTableProvider)) {\n+      throw new IllegalArgumentException(\n+          String.format(\"Cannot create an Iceberg table from source provider: %s\", sourceTableProvider));\n+    }\n+\n+    if (sourceTable.storage().locationUri().isEmpty()) {\n+      throw new IllegalArgumentException(\"Cannot create an Iceberg table from a source without an explicit location\");\n+    }\n+  }\n+\n+  protected static Map<String, String> tableLocationProperties(String tableLocation) {\n+    return ImmutableMap.of(\n+        TableProperties.WRITE_METADATA_LOCATION, tableLocation + \"/\" + ICEBERG_METADATA_FOLDER,\n+        TableProperties.WRITE_NEW_DATA_LOCATION, tableLocation\n+    );\n+  }\n+\n+  protected static void assignDefaultTableNameMapping(Table table) {\n+    NameMapping nameMapping = MappingUtil.create(table.schema());\n+    String nameMappingJson = NameMappingParser.toJson(nameMapping);\n+    table.updateProperties().set(TableProperties.DEFAULT_NAME_MAPPING, nameMappingJson).commit();\n+  }\n+\n+  private static StagingTableCatalog checkDestinationCatalog(CatalogPlugin catalog) {\n+    if (!(catalog instanceof SparkSessionCatalog) && !(catalog instanceof SparkCatalog)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODM5ODk5Ng=="}, "originalCommit": {"oid": "e5636c7804ffd321253aa0d3a775e0c2a7c10e68"}, "originalPosition": 163}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4MDEyMzg0OnYy", "diffSide": "RIGHT", "path": "spark3/src/main/java/org/apache/iceberg/actions/Spark3CreateAction.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxMzo1Nzo0NlrOIBdYSg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQyMTowODozN1rOIB2RoA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODQwMDg0Mg==", "bodyText": "Why static?", "url": "https://github.com/apache/iceberg/pull/1525#discussion_r538400842", "createdAt": "2020-12-08T13:57:46Z", "author": {"login": "aokolnychyi"}, "path": "spark3/src/main/java/org/apache/iceberg/actions/Spark3CreateAction.java", "diffHunk": "@@ -0,0 +1,172 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.actions;\n+\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Set;\n+import org.apache.iceberg.Table;\n+import org.apache.iceberg.TableProperties;\n+import org.apache.iceberg.mapping.MappingUtil;\n+import org.apache.iceberg.mapping.NameMapping;\n+import org.apache.iceberg.mapping.NameMappingParser;\n+import org.apache.iceberg.relocated.com.google.common.collect.ImmutableMap;\n+import org.apache.iceberg.relocated.com.google.common.collect.ImmutableSet;\n+import org.apache.iceberg.relocated.com.google.common.collect.Maps;\n+import org.apache.iceberg.spark.SparkCatalog;\n+import org.apache.iceberg.spark.SparkSessionCatalog;\n+import org.apache.spark.sql.SparkSession;\n+import org.apache.spark.sql.catalyst.analysis.NoSuchTableException;\n+import org.apache.spark.sql.catalyst.catalog.CatalogTable;\n+import org.apache.spark.sql.catalyst.catalog.CatalogUtils;\n+import org.apache.spark.sql.connector.catalog.CatalogPlugin;\n+import org.apache.spark.sql.connector.catalog.Identifier;\n+import org.apache.spark.sql.connector.catalog.StagingTableCatalog;\n+import org.apache.spark.sql.connector.catalog.TableCatalog;\n+import org.apache.spark.sql.connector.catalog.V1Table;\n+import org.apache.spark.sql.connector.expressions.Transform;\n+\n+abstract class Spark3CreateAction implements CreateAction {\n+  private static final Set<String> ALLOWED_SOURCES = ImmutableSet.of(\"parquet\", \"avro\", \"orc\", \"hive\");\n+  protected static final String ICEBERG_METADATA_FOLDER = \"metadata\";\n+\n+  private final SparkSession spark;\n+\n+  // Source Fields\n+  private final V1Table sourceTable;\n+  private final CatalogTable sourceCatalogTable;\n+  private final String sourceTableLocation;\n+  private final CatalogPlugin sourceCatalog;\n+  private final Identifier sourceTableIdent;\n+\n+  // Destination Fields\n+  private final StagingTableCatalog destCatalog;\n+  private final Identifier destTableIdent;\n+\n+  // Optional Parameters for destination\n+  private Map<String, String> additionalProperties = Maps.newHashMap();\n+\n+  Spark3CreateAction(SparkSession spark, CatalogPlugin sourceCatalog, Identifier sourceTableIdent,\n+                       CatalogPlugin destCatalog, Identifier destTableIdent) {\n+\n+    this.spark = spark;\n+    this.sourceCatalog = checkSourceCatalog(sourceCatalog);\n+    this.sourceTableIdent = sourceTableIdent;\n+    this.destCatalog = checkDestinationCatalog(destCatalog);\n+    this.destTableIdent = destTableIdent;\n+\n+    try {\n+      this.sourceTable = (V1Table) ((TableCatalog) sourceCatalog).loadTable(sourceTableIdent);\n+      this.sourceCatalogTable = sourceTable.v1Table();\n+    } catch (NoSuchTableException e) {\n+      throw new IllegalArgumentException(String.format(\"Cannot not find source table %s\", sourceTableIdent), e);\n+    } catch (ClassCastException e) {\n+      throw new IllegalArgumentException(String.format(\"Cannot use non-v1 table %s as a source\", sourceTableIdent), e);\n+    }\n+    validateSourceTable(sourceCatalogTable);\n+\n+    this.sourceTableLocation = CatalogUtils.URIToString(sourceCatalogTable.storage().locationUri().get());\n+  }\n+\n+  @Override\n+  public CreateAction withProperties(Map<String, String> properties) {\n+    this.additionalProperties.putAll(properties);\n+    return this;\n+  }\n+\n+  @Override\n+  public CreateAction withProperty(String key, String value) {\n+    this.additionalProperties.put(key, value);\n+    return this;\n+  }\n+\n+  protected SparkSession spark() {\n+    return spark;\n+  }\n+\n+  protected String sourceTableLocation() {\n+    return sourceTableLocation;\n+  }\n+\n+  protected CatalogTable v1SourceTable() {\n+    return sourceCatalogTable;\n+  }\n+\n+  protected CatalogPlugin sourceCatalog() {\n+    return sourceCatalog;\n+  }\n+\n+  protected Identifier sourceTableName() {\n+    return sourceTableIdent;\n+  }\n+\n+  protected Transform[] sourcePartitionSpec() {\n+    return sourceTable.partitioning();\n+  }\n+\n+  protected StagingTableCatalog destCatalog() {\n+    return destCatalog;\n+  }\n+\n+  protected Identifier destTableName() {\n+    return destTableIdent;\n+  }\n+\n+  protected Map<String, String> additionalProperties() {\n+    return additionalProperties;\n+  }\n+\n+  private static void validateSourceTable(CatalogTable sourceTable) {\n+    String sourceTableProvider = sourceTable.provider().get().toLowerCase(Locale.ROOT);\n+\n+    if (!ALLOWED_SOURCES.contains(sourceTableProvider)) {\n+      throw new IllegalArgumentException(\n+          String.format(\"Cannot create an Iceberg table from source provider: %s\", sourceTableProvider));\n+    }\n+\n+    if (sourceTable.storage().locationUri().isEmpty()) {\n+      throw new IllegalArgumentException(\"Cannot create an Iceberg table from a source without an explicit location\");\n+    }\n+  }\n+\n+  protected static Map<String, String> tableLocationProperties(String tableLocation) {\n+    return ImmutableMap.of(\n+        TableProperties.WRITE_METADATA_LOCATION, tableLocation + \"/\" + ICEBERG_METADATA_FOLDER,\n+        TableProperties.WRITE_NEW_DATA_LOCATION, tableLocation\n+    );\n+  }\n+\n+  protected static void assignDefaultTableNameMapping(Table table) {\n+    NameMapping nameMapping = MappingUtil.create(table.schema());\n+    String nameMappingJson = NameMappingParser.toJson(nameMapping);\n+    table.updateProperties().set(TableProperties.DEFAULT_NAME_MAPPING, nameMappingJson).commit();\n+  }\n+\n+  private static StagingTableCatalog checkDestinationCatalog(CatalogPlugin catalog) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e5636c7804ffd321253aa0d3a775e0c2a7c10e68"}, "originalPosition": 162}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODc0NjYxNA==", "bodyText": "I think it makes sense to keep the API for child implementations small. We can always refactor to expose it, but if we don't need to then private static makes sense to me.", "url": "https://github.com/apache/iceberg/pull/1525#discussion_r538746614", "createdAt": "2020-12-08T19:29:05Z", "author": {"login": "rdblue"}, "path": "spark3/src/main/java/org/apache/iceberg/actions/Spark3CreateAction.java", "diffHunk": "@@ -0,0 +1,172 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.actions;\n+\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Set;\n+import org.apache.iceberg.Table;\n+import org.apache.iceberg.TableProperties;\n+import org.apache.iceberg.mapping.MappingUtil;\n+import org.apache.iceberg.mapping.NameMapping;\n+import org.apache.iceberg.mapping.NameMappingParser;\n+import org.apache.iceberg.relocated.com.google.common.collect.ImmutableMap;\n+import org.apache.iceberg.relocated.com.google.common.collect.ImmutableSet;\n+import org.apache.iceberg.relocated.com.google.common.collect.Maps;\n+import org.apache.iceberg.spark.SparkCatalog;\n+import org.apache.iceberg.spark.SparkSessionCatalog;\n+import org.apache.spark.sql.SparkSession;\n+import org.apache.spark.sql.catalyst.analysis.NoSuchTableException;\n+import org.apache.spark.sql.catalyst.catalog.CatalogTable;\n+import org.apache.spark.sql.catalyst.catalog.CatalogUtils;\n+import org.apache.spark.sql.connector.catalog.CatalogPlugin;\n+import org.apache.spark.sql.connector.catalog.Identifier;\n+import org.apache.spark.sql.connector.catalog.StagingTableCatalog;\n+import org.apache.spark.sql.connector.catalog.TableCatalog;\n+import org.apache.spark.sql.connector.catalog.V1Table;\n+import org.apache.spark.sql.connector.expressions.Transform;\n+\n+abstract class Spark3CreateAction implements CreateAction {\n+  private static final Set<String> ALLOWED_SOURCES = ImmutableSet.of(\"parquet\", \"avro\", \"orc\", \"hive\");\n+  protected static final String ICEBERG_METADATA_FOLDER = \"metadata\";\n+\n+  private final SparkSession spark;\n+\n+  // Source Fields\n+  private final V1Table sourceTable;\n+  private final CatalogTable sourceCatalogTable;\n+  private final String sourceTableLocation;\n+  private final CatalogPlugin sourceCatalog;\n+  private final Identifier sourceTableIdent;\n+\n+  // Destination Fields\n+  private final StagingTableCatalog destCatalog;\n+  private final Identifier destTableIdent;\n+\n+  // Optional Parameters for destination\n+  private Map<String, String> additionalProperties = Maps.newHashMap();\n+\n+  Spark3CreateAction(SparkSession spark, CatalogPlugin sourceCatalog, Identifier sourceTableIdent,\n+                       CatalogPlugin destCatalog, Identifier destTableIdent) {\n+\n+    this.spark = spark;\n+    this.sourceCatalog = checkSourceCatalog(sourceCatalog);\n+    this.sourceTableIdent = sourceTableIdent;\n+    this.destCatalog = checkDestinationCatalog(destCatalog);\n+    this.destTableIdent = destTableIdent;\n+\n+    try {\n+      this.sourceTable = (V1Table) ((TableCatalog) sourceCatalog).loadTable(sourceTableIdent);\n+      this.sourceCatalogTable = sourceTable.v1Table();\n+    } catch (NoSuchTableException e) {\n+      throw new IllegalArgumentException(String.format(\"Cannot not find source table %s\", sourceTableIdent), e);\n+    } catch (ClassCastException e) {\n+      throw new IllegalArgumentException(String.format(\"Cannot use non-v1 table %s as a source\", sourceTableIdent), e);\n+    }\n+    validateSourceTable(sourceCatalogTable);\n+\n+    this.sourceTableLocation = CatalogUtils.URIToString(sourceCatalogTable.storage().locationUri().get());\n+  }\n+\n+  @Override\n+  public CreateAction withProperties(Map<String, String> properties) {\n+    this.additionalProperties.putAll(properties);\n+    return this;\n+  }\n+\n+  @Override\n+  public CreateAction withProperty(String key, String value) {\n+    this.additionalProperties.put(key, value);\n+    return this;\n+  }\n+\n+  protected SparkSession spark() {\n+    return spark;\n+  }\n+\n+  protected String sourceTableLocation() {\n+    return sourceTableLocation;\n+  }\n+\n+  protected CatalogTable v1SourceTable() {\n+    return sourceCatalogTable;\n+  }\n+\n+  protected CatalogPlugin sourceCatalog() {\n+    return sourceCatalog;\n+  }\n+\n+  protected Identifier sourceTableName() {\n+    return sourceTableIdent;\n+  }\n+\n+  protected Transform[] sourcePartitionSpec() {\n+    return sourceTable.partitioning();\n+  }\n+\n+  protected StagingTableCatalog destCatalog() {\n+    return destCatalog;\n+  }\n+\n+  protected Identifier destTableName() {\n+    return destTableIdent;\n+  }\n+\n+  protected Map<String, String> additionalProperties() {\n+    return additionalProperties;\n+  }\n+\n+  private static void validateSourceTable(CatalogTable sourceTable) {\n+    String sourceTableProvider = sourceTable.provider().get().toLowerCase(Locale.ROOT);\n+\n+    if (!ALLOWED_SOURCES.contains(sourceTableProvider)) {\n+      throw new IllegalArgumentException(\n+          String.format(\"Cannot create an Iceberg table from source provider: %s\", sourceTableProvider));\n+    }\n+\n+    if (sourceTable.storage().locationUri().isEmpty()) {\n+      throw new IllegalArgumentException(\"Cannot create an Iceberg table from a source without an explicit location\");\n+    }\n+  }\n+\n+  protected static Map<String, String> tableLocationProperties(String tableLocation) {\n+    return ImmutableMap.of(\n+        TableProperties.WRITE_METADATA_LOCATION, tableLocation + \"/\" + ICEBERG_METADATA_FOLDER,\n+        TableProperties.WRITE_NEW_DATA_LOCATION, tableLocation\n+    );\n+  }\n+\n+  protected static void assignDefaultTableNameMapping(Table table) {\n+    NameMapping nameMapping = MappingUtil.create(table.schema());\n+    String nameMappingJson = NameMappingParser.toJson(nameMapping);\n+    table.updateProperties().set(TableProperties.DEFAULT_NAME_MAPPING, nameMappingJson).commit();\n+  }\n+\n+  private static StagingTableCatalog checkDestinationCatalog(CatalogPlugin catalog) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODQwMDg0Mg=="}, "originalCommit": {"oid": "e5636c7804ffd321253aa0d3a775e0c2a7c10e68"}, "originalPosition": 162}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODgwODczNg==", "bodyText": "private sounds good to me but I am not sure why it needs to be static as it is used in non-static context.", "url": "https://github.com/apache/iceberg/pull/1525#discussion_r538808736", "createdAt": "2020-12-08T21:08:37Z", "author": {"login": "aokolnychyi"}, "path": "spark3/src/main/java/org/apache/iceberg/actions/Spark3CreateAction.java", "diffHunk": "@@ -0,0 +1,172 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.actions;\n+\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Set;\n+import org.apache.iceberg.Table;\n+import org.apache.iceberg.TableProperties;\n+import org.apache.iceberg.mapping.MappingUtil;\n+import org.apache.iceberg.mapping.NameMapping;\n+import org.apache.iceberg.mapping.NameMappingParser;\n+import org.apache.iceberg.relocated.com.google.common.collect.ImmutableMap;\n+import org.apache.iceberg.relocated.com.google.common.collect.ImmutableSet;\n+import org.apache.iceberg.relocated.com.google.common.collect.Maps;\n+import org.apache.iceberg.spark.SparkCatalog;\n+import org.apache.iceberg.spark.SparkSessionCatalog;\n+import org.apache.spark.sql.SparkSession;\n+import org.apache.spark.sql.catalyst.analysis.NoSuchTableException;\n+import org.apache.spark.sql.catalyst.catalog.CatalogTable;\n+import org.apache.spark.sql.catalyst.catalog.CatalogUtils;\n+import org.apache.spark.sql.connector.catalog.CatalogPlugin;\n+import org.apache.spark.sql.connector.catalog.Identifier;\n+import org.apache.spark.sql.connector.catalog.StagingTableCatalog;\n+import org.apache.spark.sql.connector.catalog.TableCatalog;\n+import org.apache.spark.sql.connector.catalog.V1Table;\n+import org.apache.spark.sql.connector.expressions.Transform;\n+\n+abstract class Spark3CreateAction implements CreateAction {\n+  private static final Set<String> ALLOWED_SOURCES = ImmutableSet.of(\"parquet\", \"avro\", \"orc\", \"hive\");\n+  protected static final String ICEBERG_METADATA_FOLDER = \"metadata\";\n+\n+  private final SparkSession spark;\n+\n+  // Source Fields\n+  private final V1Table sourceTable;\n+  private final CatalogTable sourceCatalogTable;\n+  private final String sourceTableLocation;\n+  private final CatalogPlugin sourceCatalog;\n+  private final Identifier sourceTableIdent;\n+\n+  // Destination Fields\n+  private final StagingTableCatalog destCatalog;\n+  private final Identifier destTableIdent;\n+\n+  // Optional Parameters for destination\n+  private Map<String, String> additionalProperties = Maps.newHashMap();\n+\n+  Spark3CreateAction(SparkSession spark, CatalogPlugin sourceCatalog, Identifier sourceTableIdent,\n+                       CatalogPlugin destCatalog, Identifier destTableIdent) {\n+\n+    this.spark = spark;\n+    this.sourceCatalog = checkSourceCatalog(sourceCatalog);\n+    this.sourceTableIdent = sourceTableIdent;\n+    this.destCatalog = checkDestinationCatalog(destCatalog);\n+    this.destTableIdent = destTableIdent;\n+\n+    try {\n+      this.sourceTable = (V1Table) ((TableCatalog) sourceCatalog).loadTable(sourceTableIdent);\n+      this.sourceCatalogTable = sourceTable.v1Table();\n+    } catch (NoSuchTableException e) {\n+      throw new IllegalArgumentException(String.format(\"Cannot not find source table %s\", sourceTableIdent), e);\n+    } catch (ClassCastException e) {\n+      throw new IllegalArgumentException(String.format(\"Cannot use non-v1 table %s as a source\", sourceTableIdent), e);\n+    }\n+    validateSourceTable(sourceCatalogTable);\n+\n+    this.sourceTableLocation = CatalogUtils.URIToString(sourceCatalogTable.storage().locationUri().get());\n+  }\n+\n+  @Override\n+  public CreateAction withProperties(Map<String, String> properties) {\n+    this.additionalProperties.putAll(properties);\n+    return this;\n+  }\n+\n+  @Override\n+  public CreateAction withProperty(String key, String value) {\n+    this.additionalProperties.put(key, value);\n+    return this;\n+  }\n+\n+  protected SparkSession spark() {\n+    return spark;\n+  }\n+\n+  protected String sourceTableLocation() {\n+    return sourceTableLocation;\n+  }\n+\n+  protected CatalogTable v1SourceTable() {\n+    return sourceCatalogTable;\n+  }\n+\n+  protected CatalogPlugin sourceCatalog() {\n+    return sourceCatalog;\n+  }\n+\n+  protected Identifier sourceTableName() {\n+    return sourceTableIdent;\n+  }\n+\n+  protected Transform[] sourcePartitionSpec() {\n+    return sourceTable.partitioning();\n+  }\n+\n+  protected StagingTableCatalog destCatalog() {\n+    return destCatalog;\n+  }\n+\n+  protected Identifier destTableName() {\n+    return destTableIdent;\n+  }\n+\n+  protected Map<String, String> additionalProperties() {\n+    return additionalProperties;\n+  }\n+\n+  private static void validateSourceTable(CatalogTable sourceTable) {\n+    String sourceTableProvider = sourceTable.provider().get().toLowerCase(Locale.ROOT);\n+\n+    if (!ALLOWED_SOURCES.contains(sourceTableProvider)) {\n+      throw new IllegalArgumentException(\n+          String.format(\"Cannot create an Iceberg table from source provider: %s\", sourceTableProvider));\n+    }\n+\n+    if (sourceTable.storage().locationUri().isEmpty()) {\n+      throw new IllegalArgumentException(\"Cannot create an Iceberg table from a source without an explicit location\");\n+    }\n+  }\n+\n+  protected static Map<String, String> tableLocationProperties(String tableLocation) {\n+    return ImmutableMap.of(\n+        TableProperties.WRITE_METADATA_LOCATION, tableLocation + \"/\" + ICEBERG_METADATA_FOLDER,\n+        TableProperties.WRITE_NEW_DATA_LOCATION, tableLocation\n+    );\n+  }\n+\n+  protected static void assignDefaultTableNameMapping(Table table) {\n+    NameMapping nameMapping = MappingUtil.create(table.schema());\n+    String nameMappingJson = NameMappingParser.toJson(nameMapping);\n+    table.updateProperties().set(TableProperties.DEFAULT_NAME_MAPPING, nameMappingJson).commit();\n+  }\n+\n+  private static StagingTableCatalog checkDestinationCatalog(CatalogPlugin catalog) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODQwMDg0Mg=="}, "originalCommit": {"oid": "e5636c7804ffd321253aa0d3a775e0c2a7c10e68"}, "originalPosition": 162}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4MDEyNzExOnYy", "diffSide": "RIGHT", "path": "spark3/src/main/java/org/apache/iceberg/actions/Spark3CreateAction.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxMzo1ODoxNVrOIBdaXw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxNjowMToxM1rOICcSXg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODQwMTM3NQ==", "bodyText": "Same here. Why static?", "url": "https://github.com/apache/iceberg/pull/1525#discussion_r538401375", "createdAt": "2020-12-08T13:58:15Z", "author": {"login": "aokolnychyi"}, "path": "spark3/src/main/java/org/apache/iceberg/actions/Spark3CreateAction.java", "diffHunk": "@@ -0,0 +1,172 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.actions;\n+\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Set;\n+import org.apache.iceberg.Table;\n+import org.apache.iceberg.TableProperties;\n+import org.apache.iceberg.mapping.MappingUtil;\n+import org.apache.iceberg.mapping.NameMapping;\n+import org.apache.iceberg.mapping.NameMappingParser;\n+import org.apache.iceberg.relocated.com.google.common.collect.ImmutableMap;\n+import org.apache.iceberg.relocated.com.google.common.collect.ImmutableSet;\n+import org.apache.iceberg.relocated.com.google.common.collect.Maps;\n+import org.apache.iceberg.spark.SparkCatalog;\n+import org.apache.iceberg.spark.SparkSessionCatalog;\n+import org.apache.spark.sql.SparkSession;\n+import org.apache.spark.sql.catalyst.analysis.NoSuchTableException;\n+import org.apache.spark.sql.catalyst.catalog.CatalogTable;\n+import org.apache.spark.sql.catalyst.catalog.CatalogUtils;\n+import org.apache.spark.sql.connector.catalog.CatalogPlugin;\n+import org.apache.spark.sql.connector.catalog.Identifier;\n+import org.apache.spark.sql.connector.catalog.StagingTableCatalog;\n+import org.apache.spark.sql.connector.catalog.TableCatalog;\n+import org.apache.spark.sql.connector.catalog.V1Table;\n+import org.apache.spark.sql.connector.expressions.Transform;\n+\n+abstract class Spark3CreateAction implements CreateAction {\n+  private static final Set<String> ALLOWED_SOURCES = ImmutableSet.of(\"parquet\", \"avro\", \"orc\", \"hive\");\n+  protected static final String ICEBERG_METADATA_FOLDER = \"metadata\";\n+\n+  private final SparkSession spark;\n+\n+  // Source Fields\n+  private final V1Table sourceTable;\n+  private final CatalogTable sourceCatalogTable;\n+  private final String sourceTableLocation;\n+  private final CatalogPlugin sourceCatalog;\n+  private final Identifier sourceTableIdent;\n+\n+  // Destination Fields\n+  private final StagingTableCatalog destCatalog;\n+  private final Identifier destTableIdent;\n+\n+  // Optional Parameters for destination\n+  private Map<String, String> additionalProperties = Maps.newHashMap();\n+\n+  Spark3CreateAction(SparkSession spark, CatalogPlugin sourceCatalog, Identifier sourceTableIdent,\n+                       CatalogPlugin destCatalog, Identifier destTableIdent) {\n+\n+    this.spark = spark;\n+    this.sourceCatalog = checkSourceCatalog(sourceCatalog);\n+    this.sourceTableIdent = sourceTableIdent;\n+    this.destCatalog = checkDestinationCatalog(destCatalog);\n+    this.destTableIdent = destTableIdent;\n+\n+    try {\n+      this.sourceTable = (V1Table) ((TableCatalog) sourceCatalog).loadTable(sourceTableIdent);\n+      this.sourceCatalogTable = sourceTable.v1Table();\n+    } catch (NoSuchTableException e) {\n+      throw new IllegalArgumentException(String.format(\"Cannot not find source table %s\", sourceTableIdent), e);\n+    } catch (ClassCastException e) {\n+      throw new IllegalArgumentException(String.format(\"Cannot use non-v1 table %s as a source\", sourceTableIdent), e);\n+    }\n+    validateSourceTable(sourceCatalogTable);\n+\n+    this.sourceTableLocation = CatalogUtils.URIToString(sourceCatalogTable.storage().locationUri().get());\n+  }\n+\n+  @Override\n+  public CreateAction withProperties(Map<String, String> properties) {\n+    this.additionalProperties.putAll(properties);\n+    return this;\n+  }\n+\n+  @Override\n+  public CreateAction withProperty(String key, String value) {\n+    this.additionalProperties.put(key, value);\n+    return this;\n+  }\n+\n+  protected SparkSession spark() {\n+    return spark;\n+  }\n+\n+  protected String sourceTableLocation() {\n+    return sourceTableLocation;\n+  }\n+\n+  protected CatalogTable v1SourceTable() {\n+    return sourceCatalogTable;\n+  }\n+\n+  protected CatalogPlugin sourceCatalog() {\n+    return sourceCatalog;\n+  }\n+\n+  protected Identifier sourceTableName() {\n+    return sourceTableIdent;\n+  }\n+\n+  protected Transform[] sourcePartitionSpec() {\n+    return sourceTable.partitioning();\n+  }\n+\n+  protected StagingTableCatalog destCatalog() {\n+    return destCatalog;\n+  }\n+\n+  protected Identifier destTableName() {\n+    return destTableIdent;\n+  }\n+\n+  protected Map<String, String> additionalProperties() {\n+    return additionalProperties;\n+  }\n+\n+  private static void validateSourceTable(CatalogTable sourceTable) {\n+    String sourceTableProvider = sourceTable.provider().get().toLowerCase(Locale.ROOT);\n+\n+    if (!ALLOWED_SOURCES.contains(sourceTableProvider)) {\n+      throw new IllegalArgumentException(\n+          String.format(\"Cannot create an Iceberg table from source provider: %s\", sourceTableProvider));\n+    }\n+\n+    if (sourceTable.storage().locationUri().isEmpty()) {\n+      throw new IllegalArgumentException(\"Cannot create an Iceberg table from a source without an explicit location\");\n+    }\n+  }\n+\n+  protected static Map<String, String> tableLocationProperties(String tableLocation) {\n+    return ImmutableMap.of(\n+        TableProperties.WRITE_METADATA_LOCATION, tableLocation + \"/\" + ICEBERG_METADATA_FOLDER,\n+        TableProperties.WRITE_NEW_DATA_LOCATION, tableLocation\n+    );\n+  }\n+\n+  protected static void assignDefaultTableNameMapping(Table table) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e5636c7804ffd321253aa0d3a775e0c2a7c10e68"}, "originalPosition": 156}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTQzMTUxOA==", "bodyText": "sorry force of habit. I just want my companion classes :(", "url": "https://github.com/apache/iceberg/pull/1525#discussion_r539431518", "createdAt": "2020-12-09T16:01:13Z", "author": {"login": "RussellSpitzer"}, "path": "spark3/src/main/java/org/apache/iceberg/actions/Spark3CreateAction.java", "diffHunk": "@@ -0,0 +1,172 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.actions;\n+\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Set;\n+import org.apache.iceberg.Table;\n+import org.apache.iceberg.TableProperties;\n+import org.apache.iceberg.mapping.MappingUtil;\n+import org.apache.iceberg.mapping.NameMapping;\n+import org.apache.iceberg.mapping.NameMappingParser;\n+import org.apache.iceberg.relocated.com.google.common.collect.ImmutableMap;\n+import org.apache.iceberg.relocated.com.google.common.collect.ImmutableSet;\n+import org.apache.iceberg.relocated.com.google.common.collect.Maps;\n+import org.apache.iceberg.spark.SparkCatalog;\n+import org.apache.iceberg.spark.SparkSessionCatalog;\n+import org.apache.spark.sql.SparkSession;\n+import org.apache.spark.sql.catalyst.analysis.NoSuchTableException;\n+import org.apache.spark.sql.catalyst.catalog.CatalogTable;\n+import org.apache.spark.sql.catalyst.catalog.CatalogUtils;\n+import org.apache.spark.sql.connector.catalog.CatalogPlugin;\n+import org.apache.spark.sql.connector.catalog.Identifier;\n+import org.apache.spark.sql.connector.catalog.StagingTableCatalog;\n+import org.apache.spark.sql.connector.catalog.TableCatalog;\n+import org.apache.spark.sql.connector.catalog.V1Table;\n+import org.apache.spark.sql.connector.expressions.Transform;\n+\n+abstract class Spark3CreateAction implements CreateAction {\n+  private static final Set<String> ALLOWED_SOURCES = ImmutableSet.of(\"parquet\", \"avro\", \"orc\", \"hive\");\n+  protected static final String ICEBERG_METADATA_FOLDER = \"metadata\";\n+\n+  private final SparkSession spark;\n+\n+  // Source Fields\n+  private final V1Table sourceTable;\n+  private final CatalogTable sourceCatalogTable;\n+  private final String sourceTableLocation;\n+  private final CatalogPlugin sourceCatalog;\n+  private final Identifier sourceTableIdent;\n+\n+  // Destination Fields\n+  private final StagingTableCatalog destCatalog;\n+  private final Identifier destTableIdent;\n+\n+  // Optional Parameters for destination\n+  private Map<String, String> additionalProperties = Maps.newHashMap();\n+\n+  Spark3CreateAction(SparkSession spark, CatalogPlugin sourceCatalog, Identifier sourceTableIdent,\n+                       CatalogPlugin destCatalog, Identifier destTableIdent) {\n+\n+    this.spark = spark;\n+    this.sourceCatalog = checkSourceCatalog(sourceCatalog);\n+    this.sourceTableIdent = sourceTableIdent;\n+    this.destCatalog = checkDestinationCatalog(destCatalog);\n+    this.destTableIdent = destTableIdent;\n+\n+    try {\n+      this.sourceTable = (V1Table) ((TableCatalog) sourceCatalog).loadTable(sourceTableIdent);\n+      this.sourceCatalogTable = sourceTable.v1Table();\n+    } catch (NoSuchTableException e) {\n+      throw new IllegalArgumentException(String.format(\"Cannot not find source table %s\", sourceTableIdent), e);\n+    } catch (ClassCastException e) {\n+      throw new IllegalArgumentException(String.format(\"Cannot use non-v1 table %s as a source\", sourceTableIdent), e);\n+    }\n+    validateSourceTable(sourceCatalogTable);\n+\n+    this.sourceTableLocation = CatalogUtils.URIToString(sourceCatalogTable.storage().locationUri().get());\n+  }\n+\n+  @Override\n+  public CreateAction withProperties(Map<String, String> properties) {\n+    this.additionalProperties.putAll(properties);\n+    return this;\n+  }\n+\n+  @Override\n+  public CreateAction withProperty(String key, String value) {\n+    this.additionalProperties.put(key, value);\n+    return this;\n+  }\n+\n+  protected SparkSession spark() {\n+    return spark;\n+  }\n+\n+  protected String sourceTableLocation() {\n+    return sourceTableLocation;\n+  }\n+\n+  protected CatalogTable v1SourceTable() {\n+    return sourceCatalogTable;\n+  }\n+\n+  protected CatalogPlugin sourceCatalog() {\n+    return sourceCatalog;\n+  }\n+\n+  protected Identifier sourceTableName() {\n+    return sourceTableIdent;\n+  }\n+\n+  protected Transform[] sourcePartitionSpec() {\n+    return sourceTable.partitioning();\n+  }\n+\n+  protected StagingTableCatalog destCatalog() {\n+    return destCatalog;\n+  }\n+\n+  protected Identifier destTableName() {\n+    return destTableIdent;\n+  }\n+\n+  protected Map<String, String> additionalProperties() {\n+    return additionalProperties;\n+  }\n+\n+  private static void validateSourceTable(CatalogTable sourceTable) {\n+    String sourceTableProvider = sourceTable.provider().get().toLowerCase(Locale.ROOT);\n+\n+    if (!ALLOWED_SOURCES.contains(sourceTableProvider)) {\n+      throw new IllegalArgumentException(\n+          String.format(\"Cannot create an Iceberg table from source provider: %s\", sourceTableProvider));\n+    }\n+\n+    if (sourceTable.storage().locationUri().isEmpty()) {\n+      throw new IllegalArgumentException(\"Cannot create an Iceberg table from a source without an explicit location\");\n+    }\n+  }\n+\n+  protected static Map<String, String> tableLocationProperties(String tableLocation) {\n+    return ImmutableMap.of(\n+        TableProperties.WRITE_METADATA_LOCATION, tableLocation + \"/\" + ICEBERG_METADATA_FOLDER,\n+        TableProperties.WRITE_NEW_DATA_LOCATION, tableLocation\n+    );\n+  }\n+\n+  protected static void assignDefaultTableNameMapping(Table table) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODQwMTM3NQ=="}, "originalCommit": {"oid": "e5636c7804ffd321253aa0d3a775e0c2a7c10e68"}, "originalPosition": 156}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4MDE2MDQ2OnYy", "diffSide": "RIGHT", "path": "spark3/src/main/java/org/apache/iceberg/actions/Spark3CreateAction.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxNDowMzozNFrOIBdvOg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxNDowMzozNFrOIBdvOg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODQwNjcxNA==", "bodyText": "I think it will be more readable to use Preconditions here.\n    Preconditions.checkArgument(ALLOWED_SOURCES.contains(sourceTableProvider),\n        \"Cannot create an Iceberg table from source provider: %s\",\n        sourceTableProvider);", "url": "https://github.com/apache/iceberg/pull/1525#discussion_r538406714", "createdAt": "2020-12-08T14:03:34Z", "author": {"login": "aokolnychyi"}, "path": "spark3/src/main/java/org/apache/iceberg/actions/Spark3CreateAction.java", "diffHunk": "@@ -0,0 +1,172 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.actions;\n+\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Set;\n+import org.apache.iceberg.Table;\n+import org.apache.iceberg.TableProperties;\n+import org.apache.iceberg.mapping.MappingUtil;\n+import org.apache.iceberg.mapping.NameMapping;\n+import org.apache.iceberg.mapping.NameMappingParser;\n+import org.apache.iceberg.relocated.com.google.common.collect.ImmutableMap;\n+import org.apache.iceberg.relocated.com.google.common.collect.ImmutableSet;\n+import org.apache.iceberg.relocated.com.google.common.collect.Maps;\n+import org.apache.iceberg.spark.SparkCatalog;\n+import org.apache.iceberg.spark.SparkSessionCatalog;\n+import org.apache.spark.sql.SparkSession;\n+import org.apache.spark.sql.catalyst.analysis.NoSuchTableException;\n+import org.apache.spark.sql.catalyst.catalog.CatalogTable;\n+import org.apache.spark.sql.catalyst.catalog.CatalogUtils;\n+import org.apache.spark.sql.connector.catalog.CatalogPlugin;\n+import org.apache.spark.sql.connector.catalog.Identifier;\n+import org.apache.spark.sql.connector.catalog.StagingTableCatalog;\n+import org.apache.spark.sql.connector.catalog.TableCatalog;\n+import org.apache.spark.sql.connector.catalog.V1Table;\n+import org.apache.spark.sql.connector.expressions.Transform;\n+\n+abstract class Spark3CreateAction implements CreateAction {\n+  private static final Set<String> ALLOWED_SOURCES = ImmutableSet.of(\"parquet\", \"avro\", \"orc\", \"hive\");\n+  protected static final String ICEBERG_METADATA_FOLDER = \"metadata\";\n+\n+  private final SparkSession spark;\n+\n+  // Source Fields\n+  private final V1Table sourceTable;\n+  private final CatalogTable sourceCatalogTable;\n+  private final String sourceTableLocation;\n+  private final CatalogPlugin sourceCatalog;\n+  private final Identifier sourceTableIdent;\n+\n+  // Destination Fields\n+  private final StagingTableCatalog destCatalog;\n+  private final Identifier destTableIdent;\n+\n+  // Optional Parameters for destination\n+  private Map<String, String> additionalProperties = Maps.newHashMap();\n+\n+  Spark3CreateAction(SparkSession spark, CatalogPlugin sourceCatalog, Identifier sourceTableIdent,\n+                       CatalogPlugin destCatalog, Identifier destTableIdent) {\n+\n+    this.spark = spark;\n+    this.sourceCatalog = checkSourceCatalog(sourceCatalog);\n+    this.sourceTableIdent = sourceTableIdent;\n+    this.destCatalog = checkDestinationCatalog(destCatalog);\n+    this.destTableIdent = destTableIdent;\n+\n+    try {\n+      this.sourceTable = (V1Table) ((TableCatalog) sourceCatalog).loadTable(sourceTableIdent);\n+      this.sourceCatalogTable = sourceTable.v1Table();\n+    } catch (NoSuchTableException e) {\n+      throw new IllegalArgumentException(String.format(\"Cannot not find source table %s\", sourceTableIdent), e);\n+    } catch (ClassCastException e) {\n+      throw new IllegalArgumentException(String.format(\"Cannot use non-v1 table %s as a source\", sourceTableIdent), e);\n+    }\n+    validateSourceTable(sourceCatalogTable);\n+\n+    this.sourceTableLocation = CatalogUtils.URIToString(sourceCatalogTable.storage().locationUri().get());\n+  }\n+\n+  @Override\n+  public CreateAction withProperties(Map<String, String> properties) {\n+    this.additionalProperties.putAll(properties);\n+    return this;\n+  }\n+\n+  @Override\n+  public CreateAction withProperty(String key, String value) {\n+    this.additionalProperties.put(key, value);\n+    return this;\n+  }\n+\n+  protected SparkSession spark() {\n+    return spark;\n+  }\n+\n+  protected String sourceTableLocation() {\n+    return sourceTableLocation;\n+  }\n+\n+  protected CatalogTable v1SourceTable() {\n+    return sourceCatalogTable;\n+  }\n+\n+  protected CatalogPlugin sourceCatalog() {\n+    return sourceCatalog;\n+  }\n+\n+  protected Identifier sourceTableName() {\n+    return sourceTableIdent;\n+  }\n+\n+  protected Transform[] sourcePartitionSpec() {\n+    return sourceTable.partitioning();\n+  }\n+\n+  protected StagingTableCatalog destCatalog() {\n+    return destCatalog;\n+  }\n+\n+  protected Identifier destTableName() {\n+    return destTableIdent;\n+  }\n+\n+  protected Map<String, String> additionalProperties() {\n+    return additionalProperties;\n+  }\n+\n+  private static void validateSourceTable(CatalogTable sourceTable) {\n+    String sourceTableProvider = sourceTable.provider().get().toLowerCase(Locale.ROOT);\n+\n+    if (!ALLOWED_SOURCES.contains(sourceTableProvider)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e5636c7804ffd321253aa0d3a775e0c2a7c10e68"}, "originalPosition": 139}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4MDE2MTUxOnYy", "diffSide": "RIGHT", "path": "spark3/src/main/java/org/apache/iceberg/actions/Spark3CreateAction.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxNDowMzo0M1rOIBdv2w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxNDowMzo0M1rOIBdv2w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODQwNjg3NQ==", "bodyText": "same here", "url": "https://github.com/apache/iceberg/pull/1525#discussion_r538406875", "createdAt": "2020-12-08T14:03:43Z", "author": {"login": "aokolnychyi"}, "path": "spark3/src/main/java/org/apache/iceberg/actions/Spark3CreateAction.java", "diffHunk": "@@ -0,0 +1,172 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.actions;\n+\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Set;\n+import org.apache.iceberg.Table;\n+import org.apache.iceberg.TableProperties;\n+import org.apache.iceberg.mapping.MappingUtil;\n+import org.apache.iceberg.mapping.NameMapping;\n+import org.apache.iceberg.mapping.NameMappingParser;\n+import org.apache.iceberg.relocated.com.google.common.collect.ImmutableMap;\n+import org.apache.iceberg.relocated.com.google.common.collect.ImmutableSet;\n+import org.apache.iceberg.relocated.com.google.common.collect.Maps;\n+import org.apache.iceberg.spark.SparkCatalog;\n+import org.apache.iceberg.spark.SparkSessionCatalog;\n+import org.apache.spark.sql.SparkSession;\n+import org.apache.spark.sql.catalyst.analysis.NoSuchTableException;\n+import org.apache.spark.sql.catalyst.catalog.CatalogTable;\n+import org.apache.spark.sql.catalyst.catalog.CatalogUtils;\n+import org.apache.spark.sql.connector.catalog.CatalogPlugin;\n+import org.apache.spark.sql.connector.catalog.Identifier;\n+import org.apache.spark.sql.connector.catalog.StagingTableCatalog;\n+import org.apache.spark.sql.connector.catalog.TableCatalog;\n+import org.apache.spark.sql.connector.catalog.V1Table;\n+import org.apache.spark.sql.connector.expressions.Transform;\n+\n+abstract class Spark3CreateAction implements CreateAction {\n+  private static final Set<String> ALLOWED_SOURCES = ImmutableSet.of(\"parquet\", \"avro\", \"orc\", \"hive\");\n+  protected static final String ICEBERG_METADATA_FOLDER = \"metadata\";\n+\n+  private final SparkSession spark;\n+\n+  // Source Fields\n+  private final V1Table sourceTable;\n+  private final CatalogTable sourceCatalogTable;\n+  private final String sourceTableLocation;\n+  private final CatalogPlugin sourceCatalog;\n+  private final Identifier sourceTableIdent;\n+\n+  // Destination Fields\n+  private final StagingTableCatalog destCatalog;\n+  private final Identifier destTableIdent;\n+\n+  // Optional Parameters for destination\n+  private Map<String, String> additionalProperties = Maps.newHashMap();\n+\n+  Spark3CreateAction(SparkSession spark, CatalogPlugin sourceCatalog, Identifier sourceTableIdent,\n+                       CatalogPlugin destCatalog, Identifier destTableIdent) {\n+\n+    this.spark = spark;\n+    this.sourceCatalog = checkSourceCatalog(sourceCatalog);\n+    this.sourceTableIdent = sourceTableIdent;\n+    this.destCatalog = checkDestinationCatalog(destCatalog);\n+    this.destTableIdent = destTableIdent;\n+\n+    try {\n+      this.sourceTable = (V1Table) ((TableCatalog) sourceCatalog).loadTable(sourceTableIdent);\n+      this.sourceCatalogTable = sourceTable.v1Table();\n+    } catch (NoSuchTableException e) {\n+      throw new IllegalArgumentException(String.format(\"Cannot not find source table %s\", sourceTableIdent), e);\n+    } catch (ClassCastException e) {\n+      throw new IllegalArgumentException(String.format(\"Cannot use non-v1 table %s as a source\", sourceTableIdent), e);\n+    }\n+    validateSourceTable(sourceCatalogTable);\n+\n+    this.sourceTableLocation = CatalogUtils.URIToString(sourceCatalogTable.storage().locationUri().get());\n+  }\n+\n+  @Override\n+  public CreateAction withProperties(Map<String, String> properties) {\n+    this.additionalProperties.putAll(properties);\n+    return this;\n+  }\n+\n+  @Override\n+  public CreateAction withProperty(String key, String value) {\n+    this.additionalProperties.put(key, value);\n+    return this;\n+  }\n+\n+  protected SparkSession spark() {\n+    return spark;\n+  }\n+\n+  protected String sourceTableLocation() {\n+    return sourceTableLocation;\n+  }\n+\n+  protected CatalogTable v1SourceTable() {\n+    return sourceCatalogTable;\n+  }\n+\n+  protected CatalogPlugin sourceCatalog() {\n+    return sourceCatalog;\n+  }\n+\n+  protected Identifier sourceTableName() {\n+    return sourceTableIdent;\n+  }\n+\n+  protected Transform[] sourcePartitionSpec() {\n+    return sourceTable.partitioning();\n+  }\n+\n+  protected StagingTableCatalog destCatalog() {\n+    return destCatalog;\n+  }\n+\n+  protected Identifier destTableName() {\n+    return destTableIdent;\n+  }\n+\n+  protected Map<String, String> additionalProperties() {\n+    return additionalProperties;\n+  }\n+\n+  private static void validateSourceTable(CatalogTable sourceTable) {\n+    String sourceTableProvider = sourceTable.provider().get().toLowerCase(Locale.ROOT);\n+\n+    if (!ALLOWED_SOURCES.contains(sourceTableProvider)) {\n+      throw new IllegalArgumentException(\n+          String.format(\"Cannot create an Iceberg table from source provider: %s\", sourceTableProvider));\n+    }\n+\n+    if (sourceTable.storage().locationUri().isEmpty()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e5636c7804ffd321253aa0d3a775e0c2a7c10e68"}, "originalPosition": 144}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4MDU0ODU1OnYy", "diffSide": "RIGHT", "path": "spark3/src/main/java/org/apache/iceberg/actions/Spark3MigrateAction.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxNTowMTozMFrOIBhjwA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxNjoxOToyMFrOICdNjg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODQ2OTMxMg==", "bodyText": "It looks like the staging part is same in both. Can we factor this out into the parent class?\n  protected StagedTable stageDestTable() {\n    try {\n      Map<String, String> props = targetTableProps();\n      StructType schema = sourceTable.schema();\n      Transform[] partitioning = sourceTable.partitioning();\n      return destCatalog.stageCreate(destTableIdent, schema, partitioning, props);\n    } catch (NoSuchNamespaceException e) {\n      throw new IllegalArgumentException(\"Cannot create a new table in a namespace which does not exist\", e);\n    } catch (TableAlreadyExistsException e) {\n      throw new IllegalArgumentException(\"Destination table already exists\", e);\n    }\n  }\n\n  protected abstract Map<String, String> targetTableProps();\n\n\nThen we can override targetTableProps in each subclass and make sure we add extra metadata like migrated or snapshot flags if we want to.", "url": "https://github.com/apache/iceberg/pull/1525#discussion_r538469312", "createdAt": "2020-12-08T15:01:30Z", "author": {"login": "aokolnychyi"}, "path": "spark3/src/main/java/org/apache/iceberg/actions/Spark3MigrateAction.java", "diffHunk": "@@ -0,0 +1,155 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.actions;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import org.apache.iceberg.Snapshot;\n+import org.apache.iceberg.SnapshotSummary;\n+import org.apache.iceberg.Table;\n+import org.apache.iceberg.TableProperties;\n+import org.apache.iceberg.spark.SparkSessionCatalog;\n+import org.apache.iceberg.spark.SparkTableUtil;\n+import org.apache.iceberg.spark.source.SparkTable;\n+import org.apache.spark.sql.SparkSession;\n+import org.apache.spark.sql.catalyst.TableIdentifier;\n+import org.apache.spark.sql.catalyst.analysis.NoSuchNamespaceException;\n+import org.apache.spark.sql.catalyst.analysis.NoSuchTableException;\n+import org.apache.spark.sql.catalyst.analysis.TableAlreadyExistsException;\n+import org.apache.spark.sql.connector.catalog.CatalogPlugin;\n+import org.apache.spark.sql.connector.catalog.Identifier;\n+import org.apache.spark.sql.connector.catalog.StagedTable;\n+import org.apache.spark.sql.connector.catalog.TableCatalog;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import scala.Some;\n+import scala.collection.JavaConverters;\n+\n+/**\n+ * Takes a Spark table in the sourceCatalog and attempts to transform it into an Iceberg\n+ * Table in the same location with the same identifier. Once complete the identifier which\n+ * previously referred to a non-iceberg table will refer to the newly migrated iceberg\n+ * table.\n+ */\n+class Spark3MigrateAction extends Spark3CreateAction {\n+  private static final Logger LOG = LoggerFactory.getLogger(Spark3MigrateAction.class);\n+  private static final String BACKUP_SUFFIX = \"_BACKUP_\";\n+\n+  Spark3MigrateAction(SparkSession spark, CatalogPlugin sourceCatalog, Identifier sourceTableName) {\n+    super(spark, sourceCatalog, sourceTableName, sourceCatalog, sourceTableName);\n+  }\n+\n+  @Override\n+  public Long execute() {\n+    Table icebergTable;\n+\n+    // Move source table to a new name, halting all modifications and allowing us to stage\n+    // the creation of a new Iceberg table in its place\n+    String backupName = sourceTableName().name() + BACKUP_SUFFIX;\n+    Identifier backupIdentifier = Identifier.of(sourceTableName().namespace(), backupName);\n+    try {\n+      destCatalog().renameTable(sourceTableName(), backupIdentifier);\n+    } catch (NoSuchTableException e) {\n+      throw new IllegalArgumentException(\"Cannot find table to migrate\", e);\n+    } catch (TableAlreadyExistsException e) {\n+      throw new IllegalArgumentException(\"Cannot rename migration source to backup name\", e);\n+    }\n+\n+    StagedTable stagedTable = null;\n+    boolean threw = true;\n+    try {\n+      Map<String, String> newTableProperties = new HashMap<>();\n+      newTableProperties.put(TableCatalog.PROP_PROVIDER, \"iceberg\");\n+      newTableProperties.putAll(JavaConverters.mapAsJavaMapConverter(v1SourceTable().properties()).asJava());\n+      newTableProperties.putAll(tableLocationProperties(sourceTableLocation()));\n+      newTableProperties.putAll(additionalProperties());\n+\n+      stagedTable = destCatalog().stageCreate(Identifier.of(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e5636c7804ffd321253aa0d3a775e0c2a7c10e68"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTQ0NjY3MA==", "bodyText": "Sounds good to me", "url": "https://github.com/apache/iceberg/pull/1525#discussion_r539446670", "createdAt": "2020-12-09T16:19:20Z", "author": {"login": "RussellSpitzer"}, "path": "spark3/src/main/java/org/apache/iceberg/actions/Spark3MigrateAction.java", "diffHunk": "@@ -0,0 +1,155 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.actions;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import org.apache.iceberg.Snapshot;\n+import org.apache.iceberg.SnapshotSummary;\n+import org.apache.iceberg.Table;\n+import org.apache.iceberg.TableProperties;\n+import org.apache.iceberg.spark.SparkSessionCatalog;\n+import org.apache.iceberg.spark.SparkTableUtil;\n+import org.apache.iceberg.spark.source.SparkTable;\n+import org.apache.spark.sql.SparkSession;\n+import org.apache.spark.sql.catalyst.TableIdentifier;\n+import org.apache.spark.sql.catalyst.analysis.NoSuchNamespaceException;\n+import org.apache.spark.sql.catalyst.analysis.NoSuchTableException;\n+import org.apache.spark.sql.catalyst.analysis.TableAlreadyExistsException;\n+import org.apache.spark.sql.connector.catalog.CatalogPlugin;\n+import org.apache.spark.sql.connector.catalog.Identifier;\n+import org.apache.spark.sql.connector.catalog.StagedTable;\n+import org.apache.spark.sql.connector.catalog.TableCatalog;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import scala.Some;\n+import scala.collection.JavaConverters;\n+\n+/**\n+ * Takes a Spark table in the sourceCatalog and attempts to transform it into an Iceberg\n+ * Table in the same location with the same identifier. Once complete the identifier which\n+ * previously referred to a non-iceberg table will refer to the newly migrated iceberg\n+ * table.\n+ */\n+class Spark3MigrateAction extends Spark3CreateAction {\n+  private static final Logger LOG = LoggerFactory.getLogger(Spark3MigrateAction.class);\n+  private static final String BACKUP_SUFFIX = \"_BACKUP_\";\n+\n+  Spark3MigrateAction(SparkSession spark, CatalogPlugin sourceCatalog, Identifier sourceTableName) {\n+    super(spark, sourceCatalog, sourceTableName, sourceCatalog, sourceTableName);\n+  }\n+\n+  @Override\n+  public Long execute() {\n+    Table icebergTable;\n+\n+    // Move source table to a new name, halting all modifications and allowing us to stage\n+    // the creation of a new Iceberg table in its place\n+    String backupName = sourceTableName().name() + BACKUP_SUFFIX;\n+    Identifier backupIdentifier = Identifier.of(sourceTableName().namespace(), backupName);\n+    try {\n+      destCatalog().renameTable(sourceTableName(), backupIdentifier);\n+    } catch (NoSuchTableException e) {\n+      throw new IllegalArgumentException(\"Cannot find table to migrate\", e);\n+    } catch (TableAlreadyExistsException e) {\n+      throw new IllegalArgumentException(\"Cannot rename migration source to backup name\", e);\n+    }\n+\n+    StagedTable stagedTable = null;\n+    boolean threw = true;\n+    try {\n+      Map<String, String> newTableProperties = new HashMap<>();\n+      newTableProperties.put(TableCatalog.PROP_PROVIDER, \"iceberg\");\n+      newTableProperties.putAll(JavaConverters.mapAsJavaMapConverter(v1SourceTable().properties()).asJava());\n+      newTableProperties.putAll(tableLocationProperties(sourceTableLocation()));\n+      newTableProperties.putAll(additionalProperties());\n+\n+      stagedTable = destCatalog().stageCreate(Identifier.of(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODQ2OTMxMg=="}, "originalCommit": {"oid": "e5636c7804ffd321253aa0d3a775e0c2a7c10e68"}, "originalPosition": 84}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4MDU5MjA1OnYy", "diffSide": "RIGHT", "path": "spark3/src/main/java/org/apache/iceberg/actions/Spark3SnapshotAction.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxNTowODowMFrOIBh_GQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQyMToxNDo1NVrOIB2f-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODQ3NjMxMw==", "bodyText": "I don't think this is correct. I think we should allow custom data and metadata folders in SNAPSHOT.\nHere is how get the metadata location internally:\n  def getMetadataLocation(table: Table): String = {\n    table.properties.getOrDefault(\n      TableProperties.WRITE_METADATA_LOCATION,\n      table.location + \"/\" + ICEBERG_METADATA_FOLDER)\n  }\n\nI believe we should do the same here.", "url": "https://github.com/apache/iceberg/pull/1525#discussion_r538476313", "createdAt": "2020-12-08T15:08:00Z", "author": {"login": "aokolnychyi"}, "path": "spark3/src/main/java/org/apache/iceberg/actions/Spark3SnapshotAction.java", "diffHunk": "@@ -0,0 +1,148 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.actions;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import org.apache.iceberg.Snapshot;\n+import org.apache.iceberg.SnapshotSummary;\n+import org.apache.iceberg.Table;\n+import org.apache.iceberg.TableProperties;\n+import org.apache.iceberg.relocated.com.google.common.base.Preconditions;\n+import org.apache.iceberg.spark.SparkTableUtil;\n+import org.apache.iceberg.spark.source.SparkTable;\n+import org.apache.spark.sql.SparkSession;\n+import org.apache.spark.sql.catalyst.TableIdentifier;\n+import org.apache.spark.sql.catalyst.analysis.NoSuchNamespaceException;\n+import org.apache.spark.sql.catalyst.analysis.TableAlreadyExistsException;\n+import org.apache.spark.sql.connector.catalog.CatalogPlugin;\n+import org.apache.spark.sql.connector.catalog.Identifier;\n+import org.apache.spark.sql.connector.catalog.StagedTable;\n+import org.apache.spark.sql.connector.catalog.TableCatalog;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import scala.collection.JavaConverters;\n+\n+/**\n+ * Creates a new Iceberg table based on a source Spark table. The new Iceberg table will\n+ * have a different data and metadata directory allowing it to exist independently of the\n+ * source table.\n+ */\n+class Spark3SnapshotAction extends Spark3CreateAction implements SnapshotAction {\n+  private static final Logger LOG = LoggerFactory.getLogger(Spark3SnapshotAction.class);\n+\n+  private String destTableLocation = null;\n+\n+  Spark3SnapshotAction(SparkSession spark, CatalogPlugin sourceCatalog,\n+                       Identifier sourceTableName, CatalogPlugin destCatalog,\n+                       Identifier destTableName) {\n+    super(spark, sourceCatalog, sourceTableName, destCatalog, destTableName);\n+  }\n+\n+  @Override\n+  public Long execute() {\n+    StagedTable stagedTable;\n+    Table icebergTable;\n+\n+    try {\n+      stagedTable = destCatalog().stageCreate(destTableName(), v1SourceTable().schema(),\n+          sourcePartitionSpec(), buildPropertyMap());\n+      icebergTable = ((SparkTable) stagedTable).table();\n+\n+      if (!icebergTable.properties().containsKey(TableProperties.DEFAULT_NAME_MAPPING)) {\n+        assignDefaultTableNameMapping(icebergTable);\n+      }\n+    } catch (TableAlreadyExistsException taeException) {\n+      throw new IllegalArgumentException(\"Cannot create snapshot because a table already exists with that name\",\n+          taeException);\n+    } catch (NoSuchNamespaceException nsnException) {\n+      throw new IllegalArgumentException(\"Cannot create snapshot because the namespace given does not exist\",\n+          nsnException);\n+    }\n+\n+    boolean threw = true;\n+    try {\n+      String stagingLocation = icebergTable.location() + \"/\" + ICEBERG_METADATA_FOLDER;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e5636c7804ffd321253aa0d3a775e0c2a7c10e68"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODc1NTM3NQ==", "bodyText": "I don't really have an opinion on whether we need to customize this in snapshot tables. I think for migration it is a good idea. For snapshots, I'd probably opt to keep it simple.", "url": "https://github.com/apache/iceberg/pull/1525#discussion_r538755375", "createdAt": "2020-12-08T19:42:55Z", "author": {"login": "rdblue"}, "path": "spark3/src/main/java/org/apache/iceberg/actions/Spark3SnapshotAction.java", "diffHunk": "@@ -0,0 +1,148 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.actions;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import org.apache.iceberg.Snapshot;\n+import org.apache.iceberg.SnapshotSummary;\n+import org.apache.iceberg.Table;\n+import org.apache.iceberg.TableProperties;\n+import org.apache.iceberg.relocated.com.google.common.base.Preconditions;\n+import org.apache.iceberg.spark.SparkTableUtil;\n+import org.apache.iceberg.spark.source.SparkTable;\n+import org.apache.spark.sql.SparkSession;\n+import org.apache.spark.sql.catalyst.TableIdentifier;\n+import org.apache.spark.sql.catalyst.analysis.NoSuchNamespaceException;\n+import org.apache.spark.sql.catalyst.analysis.TableAlreadyExistsException;\n+import org.apache.spark.sql.connector.catalog.CatalogPlugin;\n+import org.apache.spark.sql.connector.catalog.Identifier;\n+import org.apache.spark.sql.connector.catalog.StagedTable;\n+import org.apache.spark.sql.connector.catalog.TableCatalog;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import scala.collection.JavaConverters;\n+\n+/**\n+ * Creates a new Iceberg table based on a source Spark table. The new Iceberg table will\n+ * have a different data and metadata directory allowing it to exist independently of the\n+ * source table.\n+ */\n+class Spark3SnapshotAction extends Spark3CreateAction implements SnapshotAction {\n+  private static final Logger LOG = LoggerFactory.getLogger(Spark3SnapshotAction.class);\n+\n+  private String destTableLocation = null;\n+\n+  Spark3SnapshotAction(SparkSession spark, CatalogPlugin sourceCatalog,\n+                       Identifier sourceTableName, CatalogPlugin destCatalog,\n+                       Identifier destTableName) {\n+    super(spark, sourceCatalog, sourceTableName, destCatalog, destTableName);\n+  }\n+\n+  @Override\n+  public Long execute() {\n+    StagedTable stagedTable;\n+    Table icebergTable;\n+\n+    try {\n+      stagedTable = destCatalog().stageCreate(destTableName(), v1SourceTable().schema(),\n+          sourcePartitionSpec(), buildPropertyMap());\n+      icebergTable = ((SparkTable) stagedTable).table();\n+\n+      if (!icebergTable.properties().containsKey(TableProperties.DEFAULT_NAME_MAPPING)) {\n+        assignDefaultTableNameMapping(icebergTable);\n+      }\n+    } catch (TableAlreadyExistsException taeException) {\n+      throw new IllegalArgumentException(\"Cannot create snapshot because a table already exists with that name\",\n+          taeException);\n+    } catch (NoSuchNamespaceException nsnException) {\n+      throw new IllegalArgumentException(\"Cannot create snapshot because the namespace given does not exist\",\n+          nsnException);\n+    }\n+\n+    boolean threw = true;\n+    try {\n+      String stagingLocation = icebergTable.location() + \"/\" + ICEBERG_METADATA_FOLDER;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODQ3NjMxMw=="}, "originalCommit": {"oid": "e5636c7804ffd321253aa0d3a775e0c2a7c10e68"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODgxMjQxMQ==", "bodyText": "I think the simplest option for us is not to do anything for SNAPSHOT and let users define all properties including data and metadata location. That's why we need the logic in getMetadataLocation to pick the correct metadata location for staging.", "url": "https://github.com/apache/iceberg/pull/1525#discussion_r538812411", "createdAt": "2020-12-08T21:14:55Z", "author": {"login": "aokolnychyi"}, "path": "spark3/src/main/java/org/apache/iceberg/actions/Spark3SnapshotAction.java", "diffHunk": "@@ -0,0 +1,148 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.actions;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import org.apache.iceberg.Snapshot;\n+import org.apache.iceberg.SnapshotSummary;\n+import org.apache.iceberg.Table;\n+import org.apache.iceberg.TableProperties;\n+import org.apache.iceberg.relocated.com.google.common.base.Preconditions;\n+import org.apache.iceberg.spark.SparkTableUtil;\n+import org.apache.iceberg.spark.source.SparkTable;\n+import org.apache.spark.sql.SparkSession;\n+import org.apache.spark.sql.catalyst.TableIdentifier;\n+import org.apache.spark.sql.catalyst.analysis.NoSuchNamespaceException;\n+import org.apache.spark.sql.catalyst.analysis.TableAlreadyExistsException;\n+import org.apache.spark.sql.connector.catalog.CatalogPlugin;\n+import org.apache.spark.sql.connector.catalog.Identifier;\n+import org.apache.spark.sql.connector.catalog.StagedTable;\n+import org.apache.spark.sql.connector.catalog.TableCatalog;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import scala.collection.JavaConverters;\n+\n+/**\n+ * Creates a new Iceberg table based on a source Spark table. The new Iceberg table will\n+ * have a different data and metadata directory allowing it to exist independently of the\n+ * source table.\n+ */\n+class Spark3SnapshotAction extends Spark3CreateAction implements SnapshotAction {\n+  private static final Logger LOG = LoggerFactory.getLogger(Spark3SnapshotAction.class);\n+\n+  private String destTableLocation = null;\n+\n+  Spark3SnapshotAction(SparkSession spark, CatalogPlugin sourceCatalog,\n+                       Identifier sourceTableName, CatalogPlugin destCatalog,\n+                       Identifier destTableName) {\n+    super(spark, sourceCatalog, sourceTableName, destCatalog, destTableName);\n+  }\n+\n+  @Override\n+  public Long execute() {\n+    StagedTable stagedTable;\n+    Table icebergTable;\n+\n+    try {\n+      stagedTable = destCatalog().stageCreate(destTableName(), v1SourceTable().schema(),\n+          sourcePartitionSpec(), buildPropertyMap());\n+      icebergTable = ((SparkTable) stagedTable).table();\n+\n+      if (!icebergTable.properties().containsKey(TableProperties.DEFAULT_NAME_MAPPING)) {\n+        assignDefaultTableNameMapping(icebergTable);\n+      }\n+    } catch (TableAlreadyExistsException taeException) {\n+      throw new IllegalArgumentException(\"Cannot create snapshot because a table already exists with that name\",\n+          taeException);\n+    } catch (NoSuchNamespaceException nsnException) {\n+      throw new IllegalArgumentException(\"Cannot create snapshot because the namespace given does not exist\",\n+          nsnException);\n+    }\n+\n+    boolean threw = true;\n+    try {\n+      String stagingLocation = icebergTable.location() + \"/\" + ICEBERG_METADATA_FOLDER;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODQ3NjMxMw=="}, "originalCommit": {"oid": "e5636c7804ffd321253aa0d3a775e0c2a7c10e68"}, "originalPosition": 82}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4MDYwNTM0OnYy", "diffSide": "RIGHT", "path": "spark3/src/main/java/org/apache/iceberg/actions/Spark3SnapshotAction.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxNTowOTo1MFrOIBiHbg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxNToxMDoxNFrOIBiJNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODQ3ODQ0Ng==", "bodyText": "How about we add a check that the table location, as well as metadata and data locations, do not interfere with the original table? This way we don't have to know the default table location the catalog will assign.", "url": "https://github.com/apache/iceberg/pull/1525#discussion_r538478446", "createdAt": "2020-12-08T15:09:50Z", "author": {"login": "aokolnychyi"}, "path": "spark3/src/main/java/org/apache/iceberg/actions/Spark3SnapshotAction.java", "diffHunk": "@@ -0,0 +1,148 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.actions;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import org.apache.iceberg.Snapshot;\n+import org.apache.iceberg.SnapshotSummary;\n+import org.apache.iceberg.Table;\n+import org.apache.iceberg.TableProperties;\n+import org.apache.iceberg.relocated.com.google.common.base.Preconditions;\n+import org.apache.iceberg.spark.SparkTableUtil;\n+import org.apache.iceberg.spark.source.SparkTable;\n+import org.apache.spark.sql.SparkSession;\n+import org.apache.spark.sql.catalyst.TableIdentifier;\n+import org.apache.spark.sql.catalyst.analysis.NoSuchNamespaceException;\n+import org.apache.spark.sql.catalyst.analysis.TableAlreadyExistsException;\n+import org.apache.spark.sql.connector.catalog.CatalogPlugin;\n+import org.apache.spark.sql.connector.catalog.Identifier;\n+import org.apache.spark.sql.connector.catalog.StagedTable;\n+import org.apache.spark.sql.connector.catalog.TableCatalog;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import scala.collection.JavaConverters;\n+\n+/**\n+ * Creates a new Iceberg table based on a source Spark table. The new Iceberg table will\n+ * have a different data and metadata directory allowing it to exist independently of the\n+ * source table.\n+ */\n+class Spark3SnapshotAction extends Spark3CreateAction implements SnapshotAction {\n+  private static final Logger LOG = LoggerFactory.getLogger(Spark3SnapshotAction.class);\n+\n+  private String destTableLocation = null;\n+\n+  Spark3SnapshotAction(SparkSession spark, CatalogPlugin sourceCatalog,\n+                       Identifier sourceTableName, CatalogPlugin destCatalog,\n+                       Identifier destTableName) {\n+    super(spark, sourceCatalog, sourceTableName, destCatalog, destTableName);\n+  }\n+\n+  @Override\n+  public Long execute() {\n+    StagedTable stagedTable;\n+    Table icebergTable;\n+\n+    try {\n+      stagedTable = destCatalog().stageCreate(destTableName(), v1SourceTable().schema(),\n+          sourcePartitionSpec(), buildPropertyMap());\n+      icebergTable = ((SparkTable) stagedTable).table();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e5636c7804ffd321253aa0d3a775e0c2a7c10e68"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODQ3ODkwMw==", "bodyText": "We can just add a TODO now and address it later as the probability of hitting this is low.", "url": "https://github.com/apache/iceberg/pull/1525#discussion_r538478903", "createdAt": "2020-12-08T15:10:14Z", "author": {"login": "aokolnychyi"}, "path": "spark3/src/main/java/org/apache/iceberg/actions/Spark3SnapshotAction.java", "diffHunk": "@@ -0,0 +1,148 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.actions;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import org.apache.iceberg.Snapshot;\n+import org.apache.iceberg.SnapshotSummary;\n+import org.apache.iceberg.Table;\n+import org.apache.iceberg.TableProperties;\n+import org.apache.iceberg.relocated.com.google.common.base.Preconditions;\n+import org.apache.iceberg.spark.SparkTableUtil;\n+import org.apache.iceberg.spark.source.SparkTable;\n+import org.apache.spark.sql.SparkSession;\n+import org.apache.spark.sql.catalyst.TableIdentifier;\n+import org.apache.spark.sql.catalyst.analysis.NoSuchNamespaceException;\n+import org.apache.spark.sql.catalyst.analysis.TableAlreadyExistsException;\n+import org.apache.spark.sql.connector.catalog.CatalogPlugin;\n+import org.apache.spark.sql.connector.catalog.Identifier;\n+import org.apache.spark.sql.connector.catalog.StagedTable;\n+import org.apache.spark.sql.connector.catalog.TableCatalog;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import scala.collection.JavaConverters;\n+\n+/**\n+ * Creates a new Iceberg table based on a source Spark table. The new Iceberg table will\n+ * have a different data and metadata directory allowing it to exist independently of the\n+ * source table.\n+ */\n+class Spark3SnapshotAction extends Spark3CreateAction implements SnapshotAction {\n+  private static final Logger LOG = LoggerFactory.getLogger(Spark3SnapshotAction.class);\n+\n+  private String destTableLocation = null;\n+\n+  Spark3SnapshotAction(SparkSession spark, CatalogPlugin sourceCatalog,\n+                       Identifier sourceTableName, CatalogPlugin destCatalog,\n+                       Identifier destTableName) {\n+    super(spark, sourceCatalog, sourceTableName, destCatalog, destTableName);\n+  }\n+\n+  @Override\n+  public Long execute() {\n+    StagedTable stagedTable;\n+    Table icebergTable;\n+\n+    try {\n+      stagedTable = destCatalog().stageCreate(destTableName(), v1SourceTable().schema(),\n+          sourcePartitionSpec(), buildPropertyMap());\n+      icebergTable = ((SparkTable) stagedTable).table();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODQ3ODQ0Ng=="}, "originalCommit": {"oid": "e5636c7804ffd321253aa0d3a775e0c2a7c10e68"}, "originalPosition": 67}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4MDYxNzgyOnYy", "diffSide": "RIGHT", "path": "spark3/src/main/java/org/apache/iceberg/actions/Spark3SnapshotAction.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxNToxMTo0M1rOIBiPgw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxNToxMTo0M1rOIBiPgw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODQ4MDUxNQ==", "bodyText": "I think stagedTable is never null and this check is redundant.", "url": "https://github.com/apache/iceberg/pull/1525#discussion_r538480515", "createdAt": "2020-12-08T15:11:43Z", "author": {"login": "aokolnychyi"}, "path": "spark3/src/main/java/org/apache/iceberg/actions/Spark3SnapshotAction.java", "diffHunk": "@@ -0,0 +1,148 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.actions;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import org.apache.iceberg.Snapshot;\n+import org.apache.iceberg.SnapshotSummary;\n+import org.apache.iceberg.Table;\n+import org.apache.iceberg.TableProperties;\n+import org.apache.iceberg.relocated.com.google.common.base.Preconditions;\n+import org.apache.iceberg.spark.SparkTableUtil;\n+import org.apache.iceberg.spark.source.SparkTable;\n+import org.apache.spark.sql.SparkSession;\n+import org.apache.spark.sql.catalyst.TableIdentifier;\n+import org.apache.spark.sql.catalyst.analysis.NoSuchNamespaceException;\n+import org.apache.spark.sql.catalyst.analysis.TableAlreadyExistsException;\n+import org.apache.spark.sql.connector.catalog.CatalogPlugin;\n+import org.apache.spark.sql.connector.catalog.Identifier;\n+import org.apache.spark.sql.connector.catalog.StagedTable;\n+import org.apache.spark.sql.connector.catalog.TableCatalog;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import scala.collection.JavaConverters;\n+\n+/**\n+ * Creates a new Iceberg table based on a source Spark table. The new Iceberg table will\n+ * have a different data and metadata directory allowing it to exist independently of the\n+ * source table.\n+ */\n+class Spark3SnapshotAction extends Spark3CreateAction implements SnapshotAction {\n+  private static final Logger LOG = LoggerFactory.getLogger(Spark3SnapshotAction.class);\n+\n+  private String destTableLocation = null;\n+\n+  Spark3SnapshotAction(SparkSession spark, CatalogPlugin sourceCatalog,\n+                       Identifier sourceTableName, CatalogPlugin destCatalog,\n+                       Identifier destTableName) {\n+    super(spark, sourceCatalog, sourceTableName, destCatalog, destTableName);\n+  }\n+\n+  @Override\n+  public Long execute() {\n+    StagedTable stagedTable;\n+    Table icebergTable;\n+\n+    try {\n+      stagedTable = destCatalog().stageCreate(destTableName(), v1SourceTable().schema(),\n+          sourcePartitionSpec(), buildPropertyMap());\n+      icebergTable = ((SparkTable) stagedTable).table();\n+\n+      if (!icebergTable.properties().containsKey(TableProperties.DEFAULT_NAME_MAPPING)) {\n+        assignDefaultTableNameMapping(icebergTable);\n+      }\n+    } catch (TableAlreadyExistsException taeException) {\n+      throw new IllegalArgumentException(\"Cannot create snapshot because a table already exists with that name\",\n+          taeException);\n+    } catch (NoSuchNamespaceException nsnException) {\n+      throw new IllegalArgumentException(\"Cannot create snapshot because the namespace given does not exist\",\n+          nsnException);\n+    }\n+\n+    boolean threw = true;\n+    try {\n+      String stagingLocation = icebergTable.location() + \"/\" + ICEBERG_METADATA_FOLDER;\n+      LOG.info(\"Beginning snapshot of {} to {} using metadata location {}\", sourceTableName(), destTableName(),\n+          stagingLocation);\n+\n+      TableIdentifier v1TableIdentifier = v1SourceTable().identifier();\n+      SparkTableUtil.importSparkTable(spark(), v1TableIdentifier, icebergTable, stagingLocation);\n+      stagedTable.commitStagedChanges();\n+      threw = false;\n+    } finally {\n+      if (threw) {\n+        LOG.error(\"Error when attempting to commit snapshot changes, rolling back\");\n+        if (stagedTable != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e5636c7804ffd321253aa0d3a775e0c2a7c10e68"}, "originalPosition": 93}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4MDYyNTM0OnYy", "diffSide": "RIGHT", "path": "spark3/src/main/java/org/apache/iceberg/actions/Spark3SnapshotAction.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxNToxMjo1MFrOIBiUQQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxNjo0MzoxOVrOICedmw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODQ4MTcyOQ==", "bodyText": "Why cannot we just do the rollback in a catch clause? This seems a bit too complicated to me.", "url": "https://github.com/apache/iceberg/pull/1525#discussion_r538481729", "createdAt": "2020-12-08T15:12:50Z", "author": {"login": "aokolnychyi"}, "path": "spark3/src/main/java/org/apache/iceberg/actions/Spark3SnapshotAction.java", "diffHunk": "@@ -0,0 +1,148 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.actions;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import org.apache.iceberg.Snapshot;\n+import org.apache.iceberg.SnapshotSummary;\n+import org.apache.iceberg.Table;\n+import org.apache.iceberg.TableProperties;\n+import org.apache.iceberg.relocated.com.google.common.base.Preconditions;\n+import org.apache.iceberg.spark.SparkTableUtil;\n+import org.apache.iceberg.spark.source.SparkTable;\n+import org.apache.spark.sql.SparkSession;\n+import org.apache.spark.sql.catalyst.TableIdentifier;\n+import org.apache.spark.sql.catalyst.analysis.NoSuchNamespaceException;\n+import org.apache.spark.sql.catalyst.analysis.TableAlreadyExistsException;\n+import org.apache.spark.sql.connector.catalog.CatalogPlugin;\n+import org.apache.spark.sql.connector.catalog.Identifier;\n+import org.apache.spark.sql.connector.catalog.StagedTable;\n+import org.apache.spark.sql.connector.catalog.TableCatalog;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import scala.collection.JavaConverters;\n+\n+/**\n+ * Creates a new Iceberg table based on a source Spark table. The new Iceberg table will\n+ * have a different data and metadata directory allowing it to exist independently of the\n+ * source table.\n+ */\n+class Spark3SnapshotAction extends Spark3CreateAction implements SnapshotAction {\n+  private static final Logger LOG = LoggerFactory.getLogger(Spark3SnapshotAction.class);\n+\n+  private String destTableLocation = null;\n+\n+  Spark3SnapshotAction(SparkSession spark, CatalogPlugin sourceCatalog,\n+                       Identifier sourceTableName, CatalogPlugin destCatalog,\n+                       Identifier destTableName) {\n+    super(spark, sourceCatalog, sourceTableName, destCatalog, destTableName);\n+  }\n+\n+  @Override\n+  public Long execute() {\n+    StagedTable stagedTable;\n+    Table icebergTable;\n+\n+    try {\n+      stagedTable = destCatalog().stageCreate(destTableName(), v1SourceTable().schema(),\n+          sourcePartitionSpec(), buildPropertyMap());\n+      icebergTable = ((SparkTable) stagedTable).table();\n+\n+      if (!icebergTable.properties().containsKey(TableProperties.DEFAULT_NAME_MAPPING)) {\n+        assignDefaultTableNameMapping(icebergTable);\n+      }\n+    } catch (TableAlreadyExistsException taeException) {\n+      throw new IllegalArgumentException(\"Cannot create snapshot because a table already exists with that name\",\n+          taeException);\n+    } catch (NoSuchNamespaceException nsnException) {\n+      throw new IllegalArgumentException(\"Cannot create snapshot because the namespace given does not exist\",\n+          nsnException);\n+    }\n+\n+    boolean threw = true;\n+    try {\n+      String stagingLocation = icebergTable.location() + \"/\" + ICEBERG_METADATA_FOLDER;\n+      LOG.info(\"Beginning snapshot of {} to {} using metadata location {}\", sourceTableName(), destTableName(),\n+          stagingLocation);\n+\n+      TableIdentifier v1TableIdentifier = v1SourceTable().identifier();\n+      SparkTableUtil.importSparkTable(spark(), v1TableIdentifier, icebergTable, stagingLocation);\n+      stagedTable.commitStagedChanges();\n+      threw = false;\n+    } finally {\n+      if (threw) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e5636c7804ffd321253aa0d3a775e0c2a7c10e68"}, "originalPosition": 91}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTQ2NzE2Mw==", "bodyText": "This was recommend by @rdblue to insure the original exceptions are propagated as is while still doing cleanup", "url": "https://github.com/apache/iceberg/pull/1525#discussion_r539467163", "createdAt": "2020-12-09T16:43:19Z", "author": {"login": "RussellSpitzer"}, "path": "spark3/src/main/java/org/apache/iceberg/actions/Spark3SnapshotAction.java", "diffHunk": "@@ -0,0 +1,148 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.actions;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import org.apache.iceberg.Snapshot;\n+import org.apache.iceberg.SnapshotSummary;\n+import org.apache.iceberg.Table;\n+import org.apache.iceberg.TableProperties;\n+import org.apache.iceberg.relocated.com.google.common.base.Preconditions;\n+import org.apache.iceberg.spark.SparkTableUtil;\n+import org.apache.iceberg.spark.source.SparkTable;\n+import org.apache.spark.sql.SparkSession;\n+import org.apache.spark.sql.catalyst.TableIdentifier;\n+import org.apache.spark.sql.catalyst.analysis.NoSuchNamespaceException;\n+import org.apache.spark.sql.catalyst.analysis.TableAlreadyExistsException;\n+import org.apache.spark.sql.connector.catalog.CatalogPlugin;\n+import org.apache.spark.sql.connector.catalog.Identifier;\n+import org.apache.spark.sql.connector.catalog.StagedTable;\n+import org.apache.spark.sql.connector.catalog.TableCatalog;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import scala.collection.JavaConverters;\n+\n+/**\n+ * Creates a new Iceberg table based on a source Spark table. The new Iceberg table will\n+ * have a different data and metadata directory allowing it to exist independently of the\n+ * source table.\n+ */\n+class Spark3SnapshotAction extends Spark3CreateAction implements SnapshotAction {\n+  private static final Logger LOG = LoggerFactory.getLogger(Spark3SnapshotAction.class);\n+\n+  private String destTableLocation = null;\n+\n+  Spark3SnapshotAction(SparkSession spark, CatalogPlugin sourceCatalog,\n+                       Identifier sourceTableName, CatalogPlugin destCatalog,\n+                       Identifier destTableName) {\n+    super(spark, sourceCatalog, sourceTableName, destCatalog, destTableName);\n+  }\n+\n+  @Override\n+  public Long execute() {\n+    StagedTable stagedTable;\n+    Table icebergTable;\n+\n+    try {\n+      stagedTable = destCatalog().stageCreate(destTableName(), v1SourceTable().schema(),\n+          sourcePartitionSpec(), buildPropertyMap());\n+      icebergTable = ((SparkTable) stagedTable).table();\n+\n+      if (!icebergTable.properties().containsKey(TableProperties.DEFAULT_NAME_MAPPING)) {\n+        assignDefaultTableNameMapping(icebergTable);\n+      }\n+    } catch (TableAlreadyExistsException taeException) {\n+      throw new IllegalArgumentException(\"Cannot create snapshot because a table already exists with that name\",\n+          taeException);\n+    } catch (NoSuchNamespaceException nsnException) {\n+      throw new IllegalArgumentException(\"Cannot create snapshot because the namespace given does not exist\",\n+          nsnException);\n+    }\n+\n+    boolean threw = true;\n+    try {\n+      String stagingLocation = icebergTable.location() + \"/\" + ICEBERG_METADATA_FOLDER;\n+      LOG.info(\"Beginning snapshot of {} to {} using metadata location {}\", sourceTableName(), destTableName(),\n+          stagingLocation);\n+\n+      TableIdentifier v1TableIdentifier = v1SourceTable().identifier();\n+      SparkTableUtil.importSparkTable(spark(), v1TableIdentifier, icebergTable, stagingLocation);\n+      stagedTable.commitStagedChanges();\n+      threw = false;\n+    } finally {\n+      if (threw) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODQ4MTcyOQ=="}, "originalCommit": {"oid": "e5636c7804ffd321253aa0d3a775e0c2a7c10e68"}, "originalPosition": 91}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4MDYzMDEzOnYy", "diffSide": "RIGHT", "path": "spark3/src/main/java/org/apache/iceberg/actions/Spark3SnapshotAction.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxNToxMzozNlrOIBiXew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxNToxMzozNlrOIBiXew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODQ4MjU1NQ==", "bodyText": "I think it can be Long.parseLong to avoid boxing.", "url": "https://github.com/apache/iceberg/pull/1525#discussion_r538482555", "createdAt": "2020-12-08T15:13:36Z", "author": {"login": "aokolnychyi"}, "path": "spark3/src/main/java/org/apache/iceberg/actions/Spark3SnapshotAction.java", "diffHunk": "@@ -0,0 +1,148 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.actions;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import org.apache.iceberg.Snapshot;\n+import org.apache.iceberg.SnapshotSummary;\n+import org.apache.iceberg.Table;\n+import org.apache.iceberg.TableProperties;\n+import org.apache.iceberg.relocated.com.google.common.base.Preconditions;\n+import org.apache.iceberg.spark.SparkTableUtil;\n+import org.apache.iceberg.spark.source.SparkTable;\n+import org.apache.spark.sql.SparkSession;\n+import org.apache.spark.sql.catalyst.TableIdentifier;\n+import org.apache.spark.sql.catalyst.analysis.NoSuchNamespaceException;\n+import org.apache.spark.sql.catalyst.analysis.TableAlreadyExistsException;\n+import org.apache.spark.sql.connector.catalog.CatalogPlugin;\n+import org.apache.spark.sql.connector.catalog.Identifier;\n+import org.apache.spark.sql.connector.catalog.StagedTable;\n+import org.apache.spark.sql.connector.catalog.TableCatalog;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import scala.collection.JavaConverters;\n+\n+/**\n+ * Creates a new Iceberg table based on a source Spark table. The new Iceberg table will\n+ * have a different data and metadata directory allowing it to exist independently of the\n+ * source table.\n+ */\n+class Spark3SnapshotAction extends Spark3CreateAction implements SnapshotAction {\n+  private static final Logger LOG = LoggerFactory.getLogger(Spark3SnapshotAction.class);\n+\n+  private String destTableLocation = null;\n+\n+  Spark3SnapshotAction(SparkSession spark, CatalogPlugin sourceCatalog,\n+                       Identifier sourceTableName, CatalogPlugin destCatalog,\n+                       Identifier destTableName) {\n+    super(spark, sourceCatalog, sourceTableName, destCatalog, destTableName);\n+  }\n+\n+  @Override\n+  public Long execute() {\n+    StagedTable stagedTable;\n+    Table icebergTable;\n+\n+    try {\n+      stagedTable = destCatalog().stageCreate(destTableName(), v1SourceTable().schema(),\n+          sourcePartitionSpec(), buildPropertyMap());\n+      icebergTable = ((SparkTable) stagedTable).table();\n+\n+      if (!icebergTable.properties().containsKey(TableProperties.DEFAULT_NAME_MAPPING)) {\n+        assignDefaultTableNameMapping(icebergTable);\n+      }\n+    } catch (TableAlreadyExistsException taeException) {\n+      throw new IllegalArgumentException(\"Cannot create snapshot because a table already exists with that name\",\n+          taeException);\n+    } catch (NoSuchNamespaceException nsnException) {\n+      throw new IllegalArgumentException(\"Cannot create snapshot because the namespace given does not exist\",\n+          nsnException);\n+    }\n+\n+    boolean threw = true;\n+    try {\n+      String stagingLocation = icebergTable.location() + \"/\" + ICEBERG_METADATA_FOLDER;\n+      LOG.info(\"Beginning snapshot of {} to {} using metadata location {}\", sourceTableName(), destTableName(),\n+          stagingLocation);\n+\n+      TableIdentifier v1TableIdentifier = v1SourceTable().identifier();\n+      SparkTableUtil.importSparkTable(spark(), v1TableIdentifier, icebergTable, stagingLocation);\n+      stagedTable.commitStagedChanges();\n+      threw = false;\n+    } finally {\n+      if (threw) {\n+        LOG.error(\"Error when attempting to commit snapshot changes, rolling back\");\n+        if (stagedTable != null) {\n+          stagedTable.abortStagedChanges();\n+        }\n+      }\n+    }\n+\n+    long numMigratedFiles;\n+    Snapshot snapshot = icebergTable.currentSnapshot();\n+    numMigratedFiles = Long.valueOf(snapshot.summary().get(SnapshotSummary.TOTAL_DATA_FILES_PROP));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e5636c7804ffd321253aa0d3a775e0c2a7c10e68"}, "originalPosition": 101}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4MDYzMzc3OnYy", "diffSide": "RIGHT", "path": "spark3/src/main/java/org/apache/iceberg/actions/Spark3SnapshotAction.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxNToxNDowOVrOIBiZ2Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxNToxNDowOVrOIBiZ2Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODQ4MzE2MQ==", "bodyText": "Can we define the var on the same line? It should fit.", "url": "https://github.com/apache/iceberg/pull/1525#discussion_r538483161", "createdAt": "2020-12-08T15:14:09Z", "author": {"login": "aokolnychyi"}, "path": "spark3/src/main/java/org/apache/iceberg/actions/Spark3SnapshotAction.java", "diffHunk": "@@ -0,0 +1,148 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.actions;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import org.apache.iceberg.Snapshot;\n+import org.apache.iceberg.SnapshotSummary;\n+import org.apache.iceberg.Table;\n+import org.apache.iceberg.TableProperties;\n+import org.apache.iceberg.relocated.com.google.common.base.Preconditions;\n+import org.apache.iceberg.spark.SparkTableUtil;\n+import org.apache.iceberg.spark.source.SparkTable;\n+import org.apache.spark.sql.SparkSession;\n+import org.apache.spark.sql.catalyst.TableIdentifier;\n+import org.apache.spark.sql.catalyst.analysis.NoSuchNamespaceException;\n+import org.apache.spark.sql.catalyst.analysis.TableAlreadyExistsException;\n+import org.apache.spark.sql.connector.catalog.CatalogPlugin;\n+import org.apache.spark.sql.connector.catalog.Identifier;\n+import org.apache.spark.sql.connector.catalog.StagedTable;\n+import org.apache.spark.sql.connector.catalog.TableCatalog;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import scala.collection.JavaConverters;\n+\n+/**\n+ * Creates a new Iceberg table based on a source Spark table. The new Iceberg table will\n+ * have a different data and metadata directory allowing it to exist independently of the\n+ * source table.\n+ */\n+class Spark3SnapshotAction extends Spark3CreateAction implements SnapshotAction {\n+  private static final Logger LOG = LoggerFactory.getLogger(Spark3SnapshotAction.class);\n+\n+  private String destTableLocation = null;\n+\n+  Spark3SnapshotAction(SparkSession spark, CatalogPlugin sourceCatalog,\n+                       Identifier sourceTableName, CatalogPlugin destCatalog,\n+                       Identifier destTableName) {\n+    super(spark, sourceCatalog, sourceTableName, destCatalog, destTableName);\n+  }\n+\n+  @Override\n+  public Long execute() {\n+    StagedTable stagedTable;\n+    Table icebergTable;\n+\n+    try {\n+      stagedTable = destCatalog().stageCreate(destTableName(), v1SourceTable().schema(),\n+          sourcePartitionSpec(), buildPropertyMap());\n+      icebergTable = ((SparkTable) stagedTable).table();\n+\n+      if (!icebergTable.properties().containsKey(TableProperties.DEFAULT_NAME_MAPPING)) {\n+        assignDefaultTableNameMapping(icebergTable);\n+      }\n+    } catch (TableAlreadyExistsException taeException) {\n+      throw new IllegalArgumentException(\"Cannot create snapshot because a table already exists with that name\",\n+          taeException);\n+    } catch (NoSuchNamespaceException nsnException) {\n+      throw new IllegalArgumentException(\"Cannot create snapshot because the namespace given does not exist\",\n+          nsnException);\n+    }\n+\n+    boolean threw = true;\n+    try {\n+      String stagingLocation = icebergTable.location() + \"/\" + ICEBERG_METADATA_FOLDER;\n+      LOG.info(\"Beginning snapshot of {} to {} using metadata location {}\", sourceTableName(), destTableName(),\n+          stagingLocation);\n+\n+      TableIdentifier v1TableIdentifier = v1SourceTable().identifier();\n+      SparkTableUtil.importSparkTable(spark(), v1TableIdentifier, icebergTable, stagingLocation);\n+      stagedTable.commitStagedChanges();\n+      threw = false;\n+    } finally {\n+      if (threw) {\n+        LOG.error(\"Error when attempting to commit snapshot changes, rolling back\");\n+        if (stagedTable != null) {\n+          stagedTable.abortStagedChanges();\n+        }\n+      }\n+    }\n+\n+    long numMigratedFiles;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e5636c7804ffd321253aa0d3a775e0c2a7c10e68"}, "originalPosition": 99}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4MDY0NTM2OnYy", "diffSide": "RIGHT", "path": "spark3/src/main/java/org/apache/iceberg/actions/Spark3SnapshotAction.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxNToxNTo1M1rOIBihDQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxNToxNTo1M1rOIBihDQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODQ4NTAwNQ==", "bodyText": "I think we miss   at the end of this line. I'd also split it in between sentences.", "url": "https://github.com/apache/iceberg/pull/1525#discussion_r538485005", "createdAt": "2020-12-08T15:15:53Z", "author": {"login": "aokolnychyi"}, "path": "spark3/src/main/java/org/apache/iceberg/actions/Spark3SnapshotAction.java", "diffHunk": "@@ -0,0 +1,148 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.actions;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import org.apache.iceberg.Snapshot;\n+import org.apache.iceberg.SnapshotSummary;\n+import org.apache.iceberg.Table;\n+import org.apache.iceberg.TableProperties;\n+import org.apache.iceberg.relocated.com.google.common.base.Preconditions;\n+import org.apache.iceberg.spark.SparkTableUtil;\n+import org.apache.iceberg.spark.source.SparkTable;\n+import org.apache.spark.sql.SparkSession;\n+import org.apache.spark.sql.catalyst.TableIdentifier;\n+import org.apache.spark.sql.catalyst.analysis.NoSuchNamespaceException;\n+import org.apache.spark.sql.catalyst.analysis.TableAlreadyExistsException;\n+import org.apache.spark.sql.connector.catalog.CatalogPlugin;\n+import org.apache.spark.sql.connector.catalog.Identifier;\n+import org.apache.spark.sql.connector.catalog.StagedTable;\n+import org.apache.spark.sql.connector.catalog.TableCatalog;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import scala.collection.JavaConverters;\n+\n+/**\n+ * Creates a new Iceberg table based on a source Spark table. The new Iceberg table will\n+ * have a different data and metadata directory allowing it to exist independently of the\n+ * source table.\n+ */\n+class Spark3SnapshotAction extends Spark3CreateAction implements SnapshotAction {\n+  private static final Logger LOG = LoggerFactory.getLogger(Spark3SnapshotAction.class);\n+\n+  private String destTableLocation = null;\n+\n+  Spark3SnapshotAction(SparkSession spark, CatalogPlugin sourceCatalog,\n+                       Identifier sourceTableName, CatalogPlugin destCatalog,\n+                       Identifier destTableName) {\n+    super(spark, sourceCatalog, sourceTableName, destCatalog, destTableName);\n+  }\n+\n+  @Override\n+  public Long execute() {\n+    StagedTable stagedTable;\n+    Table icebergTable;\n+\n+    try {\n+      stagedTable = destCatalog().stageCreate(destTableName(), v1SourceTable().schema(),\n+          sourcePartitionSpec(), buildPropertyMap());\n+      icebergTable = ((SparkTable) stagedTable).table();\n+\n+      if (!icebergTable.properties().containsKey(TableProperties.DEFAULT_NAME_MAPPING)) {\n+        assignDefaultTableNameMapping(icebergTable);\n+      }\n+    } catch (TableAlreadyExistsException taeException) {\n+      throw new IllegalArgumentException(\"Cannot create snapshot because a table already exists with that name\",\n+          taeException);\n+    } catch (NoSuchNamespaceException nsnException) {\n+      throw new IllegalArgumentException(\"Cannot create snapshot because the namespace given does not exist\",\n+          nsnException);\n+    }\n+\n+    boolean threw = true;\n+    try {\n+      String stagingLocation = icebergTable.location() + \"/\" + ICEBERG_METADATA_FOLDER;\n+      LOG.info(\"Beginning snapshot of {} to {} using metadata location {}\", sourceTableName(), destTableName(),\n+          stagingLocation);\n+\n+      TableIdentifier v1TableIdentifier = v1SourceTable().identifier();\n+      SparkTableUtil.importSparkTable(spark(), v1TableIdentifier, icebergTable, stagingLocation);\n+      stagedTable.commitStagedChanges();\n+      threw = false;\n+    } finally {\n+      if (threw) {\n+        LOG.error(\"Error when attempting to commit snapshot changes, rolling back\");\n+        if (stagedTable != null) {\n+          stagedTable.abortStagedChanges();\n+        }\n+      }\n+    }\n+\n+    long numMigratedFiles;\n+    Snapshot snapshot = icebergTable.currentSnapshot();\n+    numMigratedFiles = Long.valueOf(snapshot.summary().get(SnapshotSummary.TOTAL_DATA_FILES_PROP));\n+    LOG.info(\"Successfully loaded Iceberg metadata for {} files\", numMigratedFiles);\n+    return numMigratedFiles;\n+  }\n+\n+  private Map<String, String> buildPropertyMap() {\n+    Map<String, String> properties = new HashMap<>();\n+    properties.put(TableCatalog.PROP_PROVIDER, \"iceberg\");\n+    properties.put(TableProperties.GC_ENABLED, \"false\");\n+    properties.putAll(JavaConverters.mapAsJavaMapConverter(v1SourceTable().properties()).asJava());\n+    properties.putAll(additionalProperties());\n+\n+    // Don't use the default location for the destination table if an alternate has be set\n+    if (destTableLocation != null) {\n+      properties.putAll(tableLocationProperties(destTableLocation));\n+    }\n+\n+    return properties;\n+  }\n+\n+  @Override\n+  protected TableCatalog checkSourceCatalog(CatalogPlugin catalog) {\n+    // Currently the Import code relies on being able to look up the table in the session code\n+    if (!(catalog.name().equals(\"spark_catalog\"))) {\n+      throw new IllegalArgumentException(String.format(\n+          \"Cannot snapshot a table that isn't in spark_catalog, the session catalog. \" +\n+              \"Found source catalog %s\", catalog.name()));\n+    }\n+\n+    if (!(catalog instanceof TableCatalog)) {\n+      throw new IllegalArgumentException(String.format(\n+          \"Cannot snapshot a table from a non-table catalog %s. Catalog has class of %s.\", catalog.name(),\n+          catalog.getClass().toString()\n+      ));\n+    }\n+\n+    return (TableCatalog) catalog;\n+  }\n+\n+  @Override\n+  public SnapshotAction withLocation(String location) {\n+    Preconditions.checkArgument(!sourceTableLocation().equals(location),\n+        \"Cannot create snapshot where destination location is the same as the source location. This\" +", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e5636c7804ffd321253aa0d3a775e0c2a7c10e68"}, "originalPosition": 143}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4MDY3NjEwOnYy", "diffSide": "RIGHT", "path": "spark3/src/main/java/org/apache/iceberg/actions/Spark3MigrateAction.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxNToyMDo0MFrOIBi0ZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQyMToxMDoxNVrOIB2VOg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODQ4OTk1Nw==", "bodyText": "Do we need to remove any properties, @rdblue? I think we remove at least path internally.", "url": "https://github.com/apache/iceberg/pull/1525#discussion_r538489957", "createdAt": "2020-12-08T15:20:40Z", "author": {"login": "aokolnychyi"}, "path": "spark3/src/main/java/org/apache/iceberg/actions/Spark3MigrateAction.java", "diffHunk": "@@ -0,0 +1,155 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.actions;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import org.apache.iceberg.Snapshot;\n+import org.apache.iceberg.SnapshotSummary;\n+import org.apache.iceberg.Table;\n+import org.apache.iceberg.TableProperties;\n+import org.apache.iceberg.spark.SparkSessionCatalog;\n+import org.apache.iceberg.spark.SparkTableUtil;\n+import org.apache.iceberg.spark.source.SparkTable;\n+import org.apache.spark.sql.SparkSession;\n+import org.apache.spark.sql.catalyst.TableIdentifier;\n+import org.apache.spark.sql.catalyst.analysis.NoSuchNamespaceException;\n+import org.apache.spark.sql.catalyst.analysis.NoSuchTableException;\n+import org.apache.spark.sql.catalyst.analysis.TableAlreadyExistsException;\n+import org.apache.spark.sql.connector.catalog.CatalogPlugin;\n+import org.apache.spark.sql.connector.catalog.Identifier;\n+import org.apache.spark.sql.connector.catalog.StagedTable;\n+import org.apache.spark.sql.connector.catalog.TableCatalog;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import scala.Some;\n+import scala.collection.JavaConverters;\n+\n+/**\n+ * Takes a Spark table in the sourceCatalog and attempts to transform it into an Iceberg\n+ * Table in the same location with the same identifier. Once complete the identifier which\n+ * previously referred to a non-iceberg table will refer to the newly migrated iceberg\n+ * table.\n+ */\n+class Spark3MigrateAction extends Spark3CreateAction {\n+  private static final Logger LOG = LoggerFactory.getLogger(Spark3MigrateAction.class);\n+  private static final String BACKUP_SUFFIX = \"_BACKUP_\";\n+\n+  Spark3MigrateAction(SparkSession spark, CatalogPlugin sourceCatalog, Identifier sourceTableName) {\n+    super(spark, sourceCatalog, sourceTableName, sourceCatalog, sourceTableName);\n+  }\n+\n+  @Override\n+  public Long execute() {\n+    Table icebergTable;\n+\n+    // Move source table to a new name, halting all modifications and allowing us to stage\n+    // the creation of a new Iceberg table in its place\n+    String backupName = sourceTableName().name() + BACKUP_SUFFIX;\n+    Identifier backupIdentifier = Identifier.of(sourceTableName().namespace(), backupName);\n+    try {\n+      destCatalog().renameTable(sourceTableName(), backupIdentifier);\n+    } catch (NoSuchTableException e) {\n+      throw new IllegalArgumentException(\"Cannot find table to migrate\", e);\n+    } catch (TableAlreadyExistsException e) {\n+      throw new IllegalArgumentException(\"Cannot rename migration source to backup name\", e);\n+    }\n+\n+    StagedTable stagedTable = null;\n+    boolean threw = true;\n+    try {\n+      Map<String, String> newTableProperties = new HashMap<>();\n+      newTableProperties.put(TableCatalog.PROP_PROVIDER, \"iceberg\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e5636c7804ffd321253aa0d3a775e0c2a7c10e68"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODc0ODU5Ng==", "bodyText": "Looks like we remove \"path\", \"transient_lastDdlTime\", and \"serialization.format\". We also add this property, and one that signals that it was migrated from Hive, \"migrated-from-hive\" -> \"true\".", "url": "https://github.com/apache/iceberg/pull/1525#discussion_r538748596", "createdAt": "2020-12-08T19:32:10Z", "author": {"login": "rdblue"}, "path": "spark3/src/main/java/org/apache/iceberg/actions/Spark3MigrateAction.java", "diffHunk": "@@ -0,0 +1,155 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.actions;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import org.apache.iceberg.Snapshot;\n+import org.apache.iceberg.SnapshotSummary;\n+import org.apache.iceberg.Table;\n+import org.apache.iceberg.TableProperties;\n+import org.apache.iceberg.spark.SparkSessionCatalog;\n+import org.apache.iceberg.spark.SparkTableUtil;\n+import org.apache.iceberg.spark.source.SparkTable;\n+import org.apache.spark.sql.SparkSession;\n+import org.apache.spark.sql.catalyst.TableIdentifier;\n+import org.apache.spark.sql.catalyst.analysis.NoSuchNamespaceException;\n+import org.apache.spark.sql.catalyst.analysis.NoSuchTableException;\n+import org.apache.spark.sql.catalyst.analysis.TableAlreadyExistsException;\n+import org.apache.spark.sql.connector.catalog.CatalogPlugin;\n+import org.apache.spark.sql.connector.catalog.Identifier;\n+import org.apache.spark.sql.connector.catalog.StagedTable;\n+import org.apache.spark.sql.connector.catalog.TableCatalog;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import scala.Some;\n+import scala.collection.JavaConverters;\n+\n+/**\n+ * Takes a Spark table in the sourceCatalog and attempts to transform it into an Iceberg\n+ * Table in the same location with the same identifier. Once complete the identifier which\n+ * previously referred to a non-iceberg table will refer to the newly migrated iceberg\n+ * table.\n+ */\n+class Spark3MigrateAction extends Spark3CreateAction {\n+  private static final Logger LOG = LoggerFactory.getLogger(Spark3MigrateAction.class);\n+  private static final String BACKUP_SUFFIX = \"_BACKUP_\";\n+\n+  Spark3MigrateAction(SparkSession spark, CatalogPlugin sourceCatalog, Identifier sourceTableName) {\n+    super(spark, sourceCatalog, sourceTableName, sourceCatalog, sourceTableName);\n+  }\n+\n+  @Override\n+  public Long execute() {\n+    Table icebergTable;\n+\n+    // Move source table to a new name, halting all modifications and allowing us to stage\n+    // the creation of a new Iceberg table in its place\n+    String backupName = sourceTableName().name() + BACKUP_SUFFIX;\n+    Identifier backupIdentifier = Identifier.of(sourceTableName().namespace(), backupName);\n+    try {\n+      destCatalog().renameTable(sourceTableName(), backupIdentifier);\n+    } catch (NoSuchTableException e) {\n+      throw new IllegalArgumentException(\"Cannot find table to migrate\", e);\n+    } catch (TableAlreadyExistsException e) {\n+      throw new IllegalArgumentException(\"Cannot rename migration source to backup name\", e);\n+    }\n+\n+    StagedTable stagedTable = null;\n+    boolean threw = true;\n+    try {\n+      Map<String, String> newTableProperties = new HashMap<>();\n+      newTableProperties.put(TableCatalog.PROP_PROVIDER, \"iceberg\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODQ4OTk1Nw=="}, "originalCommit": {"oid": "e5636c7804ffd321253aa0d3a775e0c2a7c10e68"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODgwOTQ2OQ==", "bodyText": "I think this would work well with targetTableProps proposed here.", "url": "https://github.com/apache/iceberg/pull/1525#discussion_r538809469", "createdAt": "2020-12-08T21:09:55Z", "author": {"login": "aokolnychyi"}, "path": "spark3/src/main/java/org/apache/iceberg/actions/Spark3MigrateAction.java", "diffHunk": "@@ -0,0 +1,155 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.actions;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import org.apache.iceberg.Snapshot;\n+import org.apache.iceberg.SnapshotSummary;\n+import org.apache.iceberg.Table;\n+import org.apache.iceberg.TableProperties;\n+import org.apache.iceberg.spark.SparkSessionCatalog;\n+import org.apache.iceberg.spark.SparkTableUtil;\n+import org.apache.iceberg.spark.source.SparkTable;\n+import org.apache.spark.sql.SparkSession;\n+import org.apache.spark.sql.catalyst.TableIdentifier;\n+import org.apache.spark.sql.catalyst.analysis.NoSuchNamespaceException;\n+import org.apache.spark.sql.catalyst.analysis.NoSuchTableException;\n+import org.apache.spark.sql.catalyst.analysis.TableAlreadyExistsException;\n+import org.apache.spark.sql.connector.catalog.CatalogPlugin;\n+import org.apache.spark.sql.connector.catalog.Identifier;\n+import org.apache.spark.sql.connector.catalog.StagedTable;\n+import org.apache.spark.sql.connector.catalog.TableCatalog;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import scala.Some;\n+import scala.collection.JavaConverters;\n+\n+/**\n+ * Takes a Spark table in the sourceCatalog and attempts to transform it into an Iceberg\n+ * Table in the same location with the same identifier. Once complete the identifier which\n+ * previously referred to a non-iceberg table will refer to the newly migrated iceberg\n+ * table.\n+ */\n+class Spark3MigrateAction extends Spark3CreateAction {\n+  private static final Logger LOG = LoggerFactory.getLogger(Spark3MigrateAction.class);\n+  private static final String BACKUP_SUFFIX = \"_BACKUP_\";\n+\n+  Spark3MigrateAction(SparkSession spark, CatalogPlugin sourceCatalog, Identifier sourceTableName) {\n+    super(spark, sourceCatalog, sourceTableName, sourceCatalog, sourceTableName);\n+  }\n+\n+  @Override\n+  public Long execute() {\n+    Table icebergTable;\n+\n+    // Move source table to a new name, halting all modifications and allowing us to stage\n+    // the creation of a new Iceberg table in its place\n+    String backupName = sourceTableName().name() + BACKUP_SUFFIX;\n+    Identifier backupIdentifier = Identifier.of(sourceTableName().namespace(), backupName);\n+    try {\n+      destCatalog().renameTable(sourceTableName(), backupIdentifier);\n+    } catch (NoSuchTableException e) {\n+      throw new IllegalArgumentException(\"Cannot find table to migrate\", e);\n+    } catch (TableAlreadyExistsException e) {\n+      throw new IllegalArgumentException(\"Cannot rename migration source to backup name\", e);\n+    }\n+\n+    StagedTable stagedTable = null;\n+    boolean threw = true;\n+    try {\n+      Map<String, String> newTableProperties = new HashMap<>();\n+      newTableProperties.put(TableCatalog.PROP_PROVIDER, \"iceberg\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODQ4OTk1Nw=="}, "originalCommit": {"oid": "e5636c7804ffd321253aa0d3a775e0c2a7c10e68"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODgwOTY1OA==", "bodyText": "Having some extra metadata about the original table helps.", "url": "https://github.com/apache/iceberg/pull/1525#discussion_r538809658", "createdAt": "2020-12-08T21:10:15Z", "author": {"login": "aokolnychyi"}, "path": "spark3/src/main/java/org/apache/iceberg/actions/Spark3MigrateAction.java", "diffHunk": "@@ -0,0 +1,155 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.actions;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import org.apache.iceberg.Snapshot;\n+import org.apache.iceberg.SnapshotSummary;\n+import org.apache.iceberg.Table;\n+import org.apache.iceberg.TableProperties;\n+import org.apache.iceberg.spark.SparkSessionCatalog;\n+import org.apache.iceberg.spark.SparkTableUtil;\n+import org.apache.iceberg.spark.source.SparkTable;\n+import org.apache.spark.sql.SparkSession;\n+import org.apache.spark.sql.catalyst.TableIdentifier;\n+import org.apache.spark.sql.catalyst.analysis.NoSuchNamespaceException;\n+import org.apache.spark.sql.catalyst.analysis.NoSuchTableException;\n+import org.apache.spark.sql.catalyst.analysis.TableAlreadyExistsException;\n+import org.apache.spark.sql.connector.catalog.CatalogPlugin;\n+import org.apache.spark.sql.connector.catalog.Identifier;\n+import org.apache.spark.sql.connector.catalog.StagedTable;\n+import org.apache.spark.sql.connector.catalog.TableCatalog;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import scala.Some;\n+import scala.collection.JavaConverters;\n+\n+/**\n+ * Takes a Spark table in the sourceCatalog and attempts to transform it into an Iceberg\n+ * Table in the same location with the same identifier. Once complete the identifier which\n+ * previously referred to a non-iceberg table will refer to the newly migrated iceberg\n+ * table.\n+ */\n+class Spark3MigrateAction extends Spark3CreateAction {\n+  private static final Logger LOG = LoggerFactory.getLogger(Spark3MigrateAction.class);\n+  private static final String BACKUP_SUFFIX = \"_BACKUP_\";\n+\n+  Spark3MigrateAction(SparkSession spark, CatalogPlugin sourceCatalog, Identifier sourceTableName) {\n+    super(spark, sourceCatalog, sourceTableName, sourceCatalog, sourceTableName);\n+  }\n+\n+  @Override\n+  public Long execute() {\n+    Table icebergTable;\n+\n+    // Move source table to a new name, halting all modifications and allowing us to stage\n+    // the creation of a new Iceberg table in its place\n+    String backupName = sourceTableName().name() + BACKUP_SUFFIX;\n+    Identifier backupIdentifier = Identifier.of(sourceTableName().namespace(), backupName);\n+    try {\n+      destCatalog().renameTable(sourceTableName(), backupIdentifier);\n+    } catch (NoSuchTableException e) {\n+      throw new IllegalArgumentException(\"Cannot find table to migrate\", e);\n+    } catch (TableAlreadyExistsException e) {\n+      throw new IllegalArgumentException(\"Cannot rename migration source to backup name\", e);\n+    }\n+\n+    StagedTable stagedTable = null;\n+    boolean threw = true;\n+    try {\n+      Map<String, String> newTableProperties = new HashMap<>();\n+      newTableProperties.put(TableCatalog.PROP_PROVIDER, \"iceberg\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODQ4OTk1Nw=="}, "originalCommit": {"oid": "e5636c7804ffd321253aa0d3a775e0c2a7c10e68"}, "originalPosition": 79}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4MDY5NzM4OnYy", "diffSide": "RIGHT", "path": "spark3/src/main/java/org/apache/iceberg/actions/Spark3MigrateAction.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxNToyMzo0M1rOIBjBlA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxOTozMzo0NVrOIByqkw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODQ5MzMzMg==", "bodyText": "Do we always have a namespace?", "url": "https://github.com/apache/iceberg/pull/1525#discussion_r538493332", "createdAt": "2020-12-08T15:23:43Z", "author": {"login": "aokolnychyi"}, "path": "spark3/src/main/java/org/apache/iceberg/actions/Spark3MigrateAction.java", "diffHunk": "@@ -0,0 +1,155 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.actions;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import org.apache.iceberg.Snapshot;\n+import org.apache.iceberg.SnapshotSummary;\n+import org.apache.iceberg.Table;\n+import org.apache.iceberg.TableProperties;\n+import org.apache.iceberg.spark.SparkSessionCatalog;\n+import org.apache.iceberg.spark.SparkTableUtil;\n+import org.apache.iceberg.spark.source.SparkTable;\n+import org.apache.spark.sql.SparkSession;\n+import org.apache.spark.sql.catalyst.TableIdentifier;\n+import org.apache.spark.sql.catalyst.analysis.NoSuchNamespaceException;\n+import org.apache.spark.sql.catalyst.analysis.NoSuchTableException;\n+import org.apache.spark.sql.catalyst.analysis.TableAlreadyExistsException;\n+import org.apache.spark.sql.connector.catalog.CatalogPlugin;\n+import org.apache.spark.sql.connector.catalog.Identifier;\n+import org.apache.spark.sql.connector.catalog.StagedTable;\n+import org.apache.spark.sql.connector.catalog.TableCatalog;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import scala.Some;\n+import scala.collection.JavaConverters;\n+\n+/**\n+ * Takes a Spark table in the sourceCatalog and attempts to transform it into an Iceberg\n+ * Table in the same location with the same identifier. Once complete the identifier which\n+ * previously referred to a non-iceberg table will refer to the newly migrated iceberg\n+ * table.\n+ */\n+class Spark3MigrateAction extends Spark3CreateAction {\n+  private static final Logger LOG = LoggerFactory.getLogger(Spark3MigrateAction.class);\n+  private static final String BACKUP_SUFFIX = \"_BACKUP_\";\n+\n+  Spark3MigrateAction(SparkSession spark, CatalogPlugin sourceCatalog, Identifier sourceTableName) {\n+    super(spark, sourceCatalog, sourceTableName, sourceCatalog, sourceTableName);\n+  }\n+\n+  @Override\n+  public Long execute() {\n+    Table icebergTable;\n+\n+    // Move source table to a new name, halting all modifications and allowing us to stage\n+    // the creation of a new Iceberg table in its place\n+    String backupName = sourceTableName().name() + BACKUP_SUFFIX;\n+    Identifier backupIdentifier = Identifier.of(sourceTableName().namespace(), backupName);\n+    try {\n+      destCatalog().renameTable(sourceTableName(), backupIdentifier);\n+    } catch (NoSuchTableException e) {\n+      throw new IllegalArgumentException(\"Cannot find table to migrate\", e);\n+    } catch (TableAlreadyExistsException e) {\n+      throw new IllegalArgumentException(\"Cannot rename migration source to backup name\", e);\n+    }\n+\n+    StagedTable stagedTable = null;\n+    boolean threw = true;\n+    try {\n+      Map<String, String> newTableProperties = new HashMap<>();\n+      newTableProperties.put(TableCatalog.PROP_PROVIDER, \"iceberg\");\n+      newTableProperties.putAll(JavaConverters.mapAsJavaMapConverter(v1SourceTable().properties()).asJava());\n+      newTableProperties.putAll(tableLocationProperties(sourceTableLocation()));\n+      newTableProperties.putAll(additionalProperties());\n+\n+      stagedTable = destCatalog().stageCreate(Identifier.of(\n+          destTableName().namespace(),\n+          destTableName().name()),\n+          v1SourceTable().schema(),\n+          sourcePartitionSpec(),\n+          newTableProperties);\n+\n+      icebergTable = ((SparkTable) stagedTable).table();\n+\n+      if (!stagedTable.properties().containsKey(TableProperties.DEFAULT_NAME_MAPPING)) {\n+        assignDefaultTableNameMapping(icebergTable);\n+      }\n+\n+      String stagingLocation = stagedTable.properties().get(TableProperties.WRITE_METADATA_LOCATION);\n+\n+      LOG.info(\"Beginning migration of {} using metadata location {}\", sourceTableName(), stagingLocation);\n+\n+      Some<String> backupNamespace = Some.apply(backupIdentifier.namespace()[0]);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e5636c7804ffd321253aa0d3a775e0c2a7c10e68"}, "originalPosition": 101}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODc0OTU4Nw==", "bodyText": "Yes, because the source catalog is always the session catalog.", "url": "https://github.com/apache/iceberg/pull/1525#discussion_r538749587", "createdAt": "2020-12-08T19:33:45Z", "author": {"login": "rdblue"}, "path": "spark3/src/main/java/org/apache/iceberg/actions/Spark3MigrateAction.java", "diffHunk": "@@ -0,0 +1,155 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.actions;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import org.apache.iceberg.Snapshot;\n+import org.apache.iceberg.SnapshotSummary;\n+import org.apache.iceberg.Table;\n+import org.apache.iceberg.TableProperties;\n+import org.apache.iceberg.spark.SparkSessionCatalog;\n+import org.apache.iceberg.spark.SparkTableUtil;\n+import org.apache.iceberg.spark.source.SparkTable;\n+import org.apache.spark.sql.SparkSession;\n+import org.apache.spark.sql.catalyst.TableIdentifier;\n+import org.apache.spark.sql.catalyst.analysis.NoSuchNamespaceException;\n+import org.apache.spark.sql.catalyst.analysis.NoSuchTableException;\n+import org.apache.spark.sql.catalyst.analysis.TableAlreadyExistsException;\n+import org.apache.spark.sql.connector.catalog.CatalogPlugin;\n+import org.apache.spark.sql.connector.catalog.Identifier;\n+import org.apache.spark.sql.connector.catalog.StagedTable;\n+import org.apache.spark.sql.connector.catalog.TableCatalog;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import scala.Some;\n+import scala.collection.JavaConverters;\n+\n+/**\n+ * Takes a Spark table in the sourceCatalog and attempts to transform it into an Iceberg\n+ * Table in the same location with the same identifier. Once complete the identifier which\n+ * previously referred to a non-iceberg table will refer to the newly migrated iceberg\n+ * table.\n+ */\n+class Spark3MigrateAction extends Spark3CreateAction {\n+  private static final Logger LOG = LoggerFactory.getLogger(Spark3MigrateAction.class);\n+  private static final String BACKUP_SUFFIX = \"_BACKUP_\";\n+\n+  Spark3MigrateAction(SparkSession spark, CatalogPlugin sourceCatalog, Identifier sourceTableName) {\n+    super(spark, sourceCatalog, sourceTableName, sourceCatalog, sourceTableName);\n+  }\n+\n+  @Override\n+  public Long execute() {\n+    Table icebergTable;\n+\n+    // Move source table to a new name, halting all modifications and allowing us to stage\n+    // the creation of a new Iceberg table in its place\n+    String backupName = sourceTableName().name() + BACKUP_SUFFIX;\n+    Identifier backupIdentifier = Identifier.of(sourceTableName().namespace(), backupName);\n+    try {\n+      destCatalog().renameTable(sourceTableName(), backupIdentifier);\n+    } catch (NoSuchTableException e) {\n+      throw new IllegalArgumentException(\"Cannot find table to migrate\", e);\n+    } catch (TableAlreadyExistsException e) {\n+      throw new IllegalArgumentException(\"Cannot rename migration source to backup name\", e);\n+    }\n+\n+    StagedTable stagedTable = null;\n+    boolean threw = true;\n+    try {\n+      Map<String, String> newTableProperties = new HashMap<>();\n+      newTableProperties.put(TableCatalog.PROP_PROVIDER, \"iceberg\");\n+      newTableProperties.putAll(JavaConverters.mapAsJavaMapConverter(v1SourceTable().properties()).asJava());\n+      newTableProperties.putAll(tableLocationProperties(sourceTableLocation()));\n+      newTableProperties.putAll(additionalProperties());\n+\n+      stagedTable = destCatalog().stageCreate(Identifier.of(\n+          destTableName().namespace(),\n+          destTableName().name()),\n+          v1SourceTable().schema(),\n+          sourcePartitionSpec(),\n+          newTableProperties);\n+\n+      icebergTable = ((SparkTable) stagedTable).table();\n+\n+      if (!stagedTable.properties().containsKey(TableProperties.DEFAULT_NAME_MAPPING)) {\n+        assignDefaultTableNameMapping(icebergTable);\n+      }\n+\n+      String stagingLocation = stagedTable.properties().get(TableProperties.WRITE_METADATA_LOCATION);\n+\n+      LOG.info(\"Beginning migration of {} using metadata location {}\", sourceTableName(), stagingLocation);\n+\n+      Some<String> backupNamespace = Some.apply(backupIdentifier.namespace()[0]);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODQ5MzMzMg=="}, "originalCommit": {"oid": "e5636c7804ffd321253aa0d3a775e0c2a7c10e68"}, "originalPosition": 101}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4MDcwNTc0OnYy", "diffSide": "RIGHT", "path": "spark3/src/main/java/org/apache/iceberg/actions/Spark3SnapshotAction.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxNToyNDo1MlrOIBjGwA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxNToyNDo1MlrOIBjGwA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODQ5NDY1Ng==", "bodyText": "nit: sourceTableIdent and destTableIdent", "url": "https://github.com/apache/iceberg/pull/1525#discussion_r538494656", "createdAt": "2020-12-08T15:24:52Z", "author": {"login": "aokolnychyi"}, "path": "spark3/src/main/java/org/apache/iceberg/actions/Spark3SnapshotAction.java", "diffHunk": "@@ -0,0 +1,148 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.actions;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import org.apache.iceberg.Snapshot;\n+import org.apache.iceberg.SnapshotSummary;\n+import org.apache.iceberg.Table;\n+import org.apache.iceberg.TableProperties;\n+import org.apache.iceberg.relocated.com.google.common.base.Preconditions;\n+import org.apache.iceberg.spark.SparkTableUtil;\n+import org.apache.iceberg.spark.source.SparkTable;\n+import org.apache.spark.sql.SparkSession;\n+import org.apache.spark.sql.catalyst.TableIdentifier;\n+import org.apache.spark.sql.catalyst.analysis.NoSuchNamespaceException;\n+import org.apache.spark.sql.catalyst.analysis.TableAlreadyExistsException;\n+import org.apache.spark.sql.connector.catalog.CatalogPlugin;\n+import org.apache.spark.sql.connector.catalog.Identifier;\n+import org.apache.spark.sql.connector.catalog.StagedTable;\n+import org.apache.spark.sql.connector.catalog.TableCatalog;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import scala.collection.JavaConverters;\n+\n+/**\n+ * Creates a new Iceberg table based on a source Spark table. The new Iceberg table will\n+ * have a different data and metadata directory allowing it to exist independently of the\n+ * source table.\n+ */\n+class Spark3SnapshotAction extends Spark3CreateAction implements SnapshotAction {\n+  private static final Logger LOG = LoggerFactory.getLogger(Spark3SnapshotAction.class);\n+\n+  private String destTableLocation = null;\n+\n+  Spark3SnapshotAction(SparkSession spark, CatalogPlugin sourceCatalog,\n+                       Identifier sourceTableName, CatalogPlugin destCatalog,\n+                       Identifier destTableName) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e5636c7804ffd321253aa0d3a775e0c2a7c10e68"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4MDcwOTg4OnYy", "diffSide": "RIGHT", "path": "spark3/src/main/java/org/apache/iceberg/actions/Spark3CreateAction.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxNToyNToyOFrOIBjJjw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxNToyNToyOFrOIBjJjw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODQ5NTM3NQ==", "bodyText": "nit: destTableIdent?", "url": "https://github.com/apache/iceberg/pull/1525#discussion_r538495375", "createdAt": "2020-12-08T15:25:28Z", "author": {"login": "aokolnychyi"}, "path": "spark3/src/main/java/org/apache/iceberg/actions/Spark3CreateAction.java", "diffHunk": "@@ -0,0 +1,172 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.actions;\n+\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Set;\n+import org.apache.iceberg.Table;\n+import org.apache.iceberg.TableProperties;\n+import org.apache.iceberg.mapping.MappingUtil;\n+import org.apache.iceberg.mapping.NameMapping;\n+import org.apache.iceberg.mapping.NameMappingParser;\n+import org.apache.iceberg.relocated.com.google.common.collect.ImmutableMap;\n+import org.apache.iceberg.relocated.com.google.common.collect.ImmutableSet;\n+import org.apache.iceberg.relocated.com.google.common.collect.Maps;\n+import org.apache.iceberg.spark.SparkCatalog;\n+import org.apache.iceberg.spark.SparkSessionCatalog;\n+import org.apache.spark.sql.SparkSession;\n+import org.apache.spark.sql.catalyst.analysis.NoSuchTableException;\n+import org.apache.spark.sql.catalyst.catalog.CatalogTable;\n+import org.apache.spark.sql.catalyst.catalog.CatalogUtils;\n+import org.apache.spark.sql.connector.catalog.CatalogPlugin;\n+import org.apache.spark.sql.connector.catalog.Identifier;\n+import org.apache.spark.sql.connector.catalog.StagingTableCatalog;\n+import org.apache.spark.sql.connector.catalog.TableCatalog;\n+import org.apache.spark.sql.connector.catalog.V1Table;\n+import org.apache.spark.sql.connector.expressions.Transform;\n+\n+abstract class Spark3CreateAction implements CreateAction {\n+  private static final Set<String> ALLOWED_SOURCES = ImmutableSet.of(\"parquet\", \"avro\", \"orc\", \"hive\");\n+  protected static final String ICEBERG_METADATA_FOLDER = \"metadata\";\n+\n+  private final SparkSession spark;\n+\n+  // Source Fields\n+  private final V1Table sourceTable;\n+  private final CatalogTable sourceCatalogTable;\n+  private final String sourceTableLocation;\n+  private final CatalogPlugin sourceCatalog;\n+  private final Identifier sourceTableIdent;\n+\n+  // Destination Fields\n+  private final StagingTableCatalog destCatalog;\n+  private final Identifier destTableIdent;\n+\n+  // Optional Parameters for destination\n+  private Map<String, String> additionalProperties = Maps.newHashMap();\n+\n+  Spark3CreateAction(SparkSession spark, CatalogPlugin sourceCatalog, Identifier sourceTableIdent,\n+                       CatalogPlugin destCatalog, Identifier destTableIdent) {\n+\n+    this.spark = spark;\n+    this.sourceCatalog = checkSourceCatalog(sourceCatalog);\n+    this.sourceTableIdent = sourceTableIdent;\n+    this.destCatalog = checkDestinationCatalog(destCatalog);\n+    this.destTableIdent = destTableIdent;\n+\n+    try {\n+      this.sourceTable = (V1Table) ((TableCatalog) sourceCatalog).loadTable(sourceTableIdent);\n+      this.sourceCatalogTable = sourceTable.v1Table();\n+    } catch (NoSuchTableException e) {\n+      throw new IllegalArgumentException(String.format(\"Cannot not find source table %s\", sourceTableIdent), e);\n+    } catch (ClassCastException e) {\n+      throw new IllegalArgumentException(String.format(\"Cannot use non-v1 table %s as a source\", sourceTableIdent), e);\n+    }\n+    validateSourceTable(sourceCatalogTable);\n+\n+    this.sourceTableLocation = CatalogUtils.URIToString(sourceCatalogTable.storage().locationUri().get());\n+  }\n+\n+  @Override\n+  public CreateAction withProperties(Map<String, String> properties) {\n+    this.additionalProperties.putAll(properties);\n+    return this;\n+  }\n+\n+  @Override\n+  public CreateAction withProperty(String key, String value) {\n+    this.additionalProperties.put(key, value);\n+    return this;\n+  }\n+\n+  protected SparkSession spark() {\n+    return spark;\n+  }\n+\n+  protected String sourceTableLocation() {\n+    return sourceTableLocation;\n+  }\n+\n+  protected CatalogTable v1SourceTable() {\n+    return sourceCatalogTable;\n+  }\n+\n+  protected CatalogPlugin sourceCatalog() {\n+    return sourceCatalog;\n+  }\n+\n+  protected Identifier sourceTableName() {\n+    return sourceTableIdent;\n+  }\n+\n+  protected Transform[] sourcePartitionSpec() {\n+    return sourceTable.partitioning();\n+  }\n+\n+  protected StagingTableCatalog destCatalog() {\n+    return destCatalog;\n+  }\n+\n+  protected Identifier destTableName() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e5636c7804ffd321253aa0d3a775e0c2a7c10e68"}, "originalPosition": 128}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4MDcxMTUwOnYy", "diffSide": "RIGHT", "path": "spark3/src/main/java/org/apache/iceberg/actions/Spark3CreateAction.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxNToyNTo0MlrOIBjKoA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxNToyNTo0MlrOIBjKoA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODQ5NTY0OA==", "bodyText": "nit: sourceTableIdent?", "url": "https://github.com/apache/iceberg/pull/1525#discussion_r538495648", "createdAt": "2020-12-08T15:25:42Z", "author": {"login": "aokolnychyi"}, "path": "spark3/src/main/java/org/apache/iceberg/actions/Spark3CreateAction.java", "diffHunk": "@@ -0,0 +1,172 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.actions;\n+\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Set;\n+import org.apache.iceberg.Table;\n+import org.apache.iceberg.TableProperties;\n+import org.apache.iceberg.mapping.MappingUtil;\n+import org.apache.iceberg.mapping.NameMapping;\n+import org.apache.iceberg.mapping.NameMappingParser;\n+import org.apache.iceberg.relocated.com.google.common.collect.ImmutableMap;\n+import org.apache.iceberg.relocated.com.google.common.collect.ImmutableSet;\n+import org.apache.iceberg.relocated.com.google.common.collect.Maps;\n+import org.apache.iceberg.spark.SparkCatalog;\n+import org.apache.iceberg.spark.SparkSessionCatalog;\n+import org.apache.spark.sql.SparkSession;\n+import org.apache.spark.sql.catalyst.analysis.NoSuchTableException;\n+import org.apache.spark.sql.catalyst.catalog.CatalogTable;\n+import org.apache.spark.sql.catalyst.catalog.CatalogUtils;\n+import org.apache.spark.sql.connector.catalog.CatalogPlugin;\n+import org.apache.spark.sql.connector.catalog.Identifier;\n+import org.apache.spark.sql.connector.catalog.StagingTableCatalog;\n+import org.apache.spark.sql.connector.catalog.TableCatalog;\n+import org.apache.spark.sql.connector.catalog.V1Table;\n+import org.apache.spark.sql.connector.expressions.Transform;\n+\n+abstract class Spark3CreateAction implements CreateAction {\n+  private static final Set<String> ALLOWED_SOURCES = ImmutableSet.of(\"parquet\", \"avro\", \"orc\", \"hive\");\n+  protected static final String ICEBERG_METADATA_FOLDER = \"metadata\";\n+\n+  private final SparkSession spark;\n+\n+  // Source Fields\n+  private final V1Table sourceTable;\n+  private final CatalogTable sourceCatalogTable;\n+  private final String sourceTableLocation;\n+  private final CatalogPlugin sourceCatalog;\n+  private final Identifier sourceTableIdent;\n+\n+  // Destination Fields\n+  private final StagingTableCatalog destCatalog;\n+  private final Identifier destTableIdent;\n+\n+  // Optional Parameters for destination\n+  private Map<String, String> additionalProperties = Maps.newHashMap();\n+\n+  Spark3CreateAction(SparkSession spark, CatalogPlugin sourceCatalog, Identifier sourceTableIdent,\n+                       CatalogPlugin destCatalog, Identifier destTableIdent) {\n+\n+    this.spark = spark;\n+    this.sourceCatalog = checkSourceCatalog(sourceCatalog);\n+    this.sourceTableIdent = sourceTableIdent;\n+    this.destCatalog = checkDestinationCatalog(destCatalog);\n+    this.destTableIdent = destTableIdent;\n+\n+    try {\n+      this.sourceTable = (V1Table) ((TableCatalog) sourceCatalog).loadTable(sourceTableIdent);\n+      this.sourceCatalogTable = sourceTable.v1Table();\n+    } catch (NoSuchTableException e) {\n+      throw new IllegalArgumentException(String.format(\"Cannot not find source table %s\", sourceTableIdent), e);\n+    } catch (ClassCastException e) {\n+      throw new IllegalArgumentException(String.format(\"Cannot use non-v1 table %s as a source\", sourceTableIdent), e);\n+    }\n+    validateSourceTable(sourceCatalogTable);\n+\n+    this.sourceTableLocation = CatalogUtils.URIToString(sourceCatalogTable.storage().locationUri().get());\n+  }\n+\n+  @Override\n+  public CreateAction withProperties(Map<String, String> properties) {\n+    this.additionalProperties.putAll(properties);\n+    return this;\n+  }\n+\n+  @Override\n+  public CreateAction withProperty(String key, String value) {\n+    this.additionalProperties.put(key, value);\n+    return this;\n+  }\n+\n+  protected SparkSession spark() {\n+    return spark;\n+  }\n+\n+  protected String sourceTableLocation() {\n+    return sourceTableLocation;\n+  }\n+\n+  protected CatalogTable v1SourceTable() {\n+    return sourceCatalogTable;\n+  }\n+\n+  protected CatalogPlugin sourceCatalog() {\n+    return sourceCatalog;\n+  }\n+\n+  protected Identifier sourceTableName() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e5636c7804ffd321253aa0d3a775e0c2a7c10e68"}, "originalPosition": 116}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4MDcxNzQ1OnYy", "diffSide": "RIGHT", "path": "spark3/src/main/java/org/apache/iceberg/actions/Spark3MigrateAction.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxNToyNjo0MFrOIBjOUg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxNjoyMToxM1rOICdTvA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODQ5NjU5NA==", "bodyText": "If we move staging to the parent class, this would also be simplified. It is a bit hard to follow now.", "url": "https://github.com/apache/iceberg/pull/1525#discussion_r538496594", "createdAt": "2020-12-08T15:26:40Z", "author": {"login": "aokolnychyi"}, "path": "spark3/src/main/java/org/apache/iceberg/actions/Spark3MigrateAction.java", "diffHunk": "@@ -0,0 +1,155 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.actions;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import org.apache.iceberg.Snapshot;\n+import org.apache.iceberg.SnapshotSummary;\n+import org.apache.iceberg.Table;\n+import org.apache.iceberg.TableProperties;\n+import org.apache.iceberg.spark.SparkSessionCatalog;\n+import org.apache.iceberg.spark.SparkTableUtil;\n+import org.apache.iceberg.spark.source.SparkTable;\n+import org.apache.spark.sql.SparkSession;\n+import org.apache.spark.sql.catalyst.TableIdentifier;\n+import org.apache.spark.sql.catalyst.analysis.NoSuchNamespaceException;\n+import org.apache.spark.sql.catalyst.analysis.NoSuchTableException;\n+import org.apache.spark.sql.catalyst.analysis.TableAlreadyExistsException;\n+import org.apache.spark.sql.connector.catalog.CatalogPlugin;\n+import org.apache.spark.sql.connector.catalog.Identifier;\n+import org.apache.spark.sql.connector.catalog.StagedTable;\n+import org.apache.spark.sql.connector.catalog.TableCatalog;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import scala.Some;\n+import scala.collection.JavaConverters;\n+\n+/**\n+ * Takes a Spark table in the sourceCatalog and attempts to transform it into an Iceberg\n+ * Table in the same location with the same identifier. Once complete the identifier which\n+ * previously referred to a non-iceberg table will refer to the newly migrated iceberg\n+ * table.\n+ */\n+class Spark3MigrateAction extends Spark3CreateAction {\n+  private static final Logger LOG = LoggerFactory.getLogger(Spark3MigrateAction.class);\n+  private static final String BACKUP_SUFFIX = \"_BACKUP_\";\n+\n+  Spark3MigrateAction(SparkSession spark, CatalogPlugin sourceCatalog, Identifier sourceTableName) {\n+    super(spark, sourceCatalog, sourceTableName, sourceCatalog, sourceTableName);\n+  }\n+\n+  @Override\n+  public Long execute() {\n+    Table icebergTable;\n+\n+    // Move source table to a new name, halting all modifications and allowing us to stage\n+    // the creation of a new Iceberg table in its place\n+    String backupName = sourceTableName().name() + BACKUP_SUFFIX;\n+    Identifier backupIdentifier = Identifier.of(sourceTableName().namespace(), backupName);\n+    try {\n+      destCatalog().renameTable(sourceTableName(), backupIdentifier);\n+    } catch (NoSuchTableException e) {\n+      throw new IllegalArgumentException(\"Cannot find table to migrate\", e);\n+    } catch (TableAlreadyExistsException e) {\n+      throw new IllegalArgumentException(\"Cannot rename migration source to backup name\", e);\n+    }\n+\n+    StagedTable stagedTable = null;\n+    boolean threw = true;\n+    try {\n+      Map<String, String> newTableProperties = new HashMap<>();\n+      newTableProperties.put(TableCatalog.PROP_PROVIDER, \"iceberg\");\n+      newTableProperties.putAll(JavaConverters.mapAsJavaMapConverter(v1SourceTable().properties()).asJava());\n+      newTableProperties.putAll(tableLocationProperties(sourceTableLocation()));\n+      newTableProperties.putAll(additionalProperties());\n+\n+      stagedTable = destCatalog().stageCreate(Identifier.of(\n+          destTableName().namespace(),\n+          destTableName().name()),\n+          v1SourceTable().schema(),\n+          sourcePartitionSpec(),\n+          newTableProperties);\n+\n+      icebergTable = ((SparkTable) stagedTable).table();\n+\n+      if (!stagedTable.properties().containsKey(TableProperties.DEFAULT_NAME_MAPPING)) {\n+        assignDefaultTableNameMapping(icebergTable);\n+      }\n+\n+      String stagingLocation = stagedTable.properties().get(TableProperties.WRITE_METADATA_LOCATION);\n+\n+      LOG.info(\"Beginning migration of {} using metadata location {}\", sourceTableName(), stagingLocation);\n+\n+      Some<String> backupNamespace = Some.apply(backupIdentifier.namespace()[0]);\n+      TableIdentifier v1BackupIdentifier = new TableIdentifier(backupIdentifier.name(), backupNamespace);\n+      SparkTableUtil.importSparkTable(spark(), v1BackupIdentifier, icebergTable, stagingLocation);\n+\n+      stagedTable.commitStagedChanges();\n+      threw = false;\n+\n+    } catch (TableAlreadyExistsException tableAlreadyExistsException) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e5636c7804ffd321253aa0d3a775e0c2a7c10e68"}, "originalPosition": 108}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTQ0ODI1Mg==", "bodyText": "This will make the errors much more difficult to reason about. Since in \"Snapshot\" we will report \"table already exists\" which might make sense, but in \"migrate\" it makes no sense since our migration has no destination table as it's actually an internal error, ie the table go renamed back during the operation", "url": "https://github.com/apache/iceberg/pull/1525#discussion_r539448252", "createdAt": "2020-12-09T16:21:13Z", "author": {"login": "RussellSpitzer"}, "path": "spark3/src/main/java/org/apache/iceberg/actions/Spark3MigrateAction.java", "diffHunk": "@@ -0,0 +1,155 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.actions;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import org.apache.iceberg.Snapshot;\n+import org.apache.iceberg.SnapshotSummary;\n+import org.apache.iceberg.Table;\n+import org.apache.iceberg.TableProperties;\n+import org.apache.iceberg.spark.SparkSessionCatalog;\n+import org.apache.iceberg.spark.SparkTableUtil;\n+import org.apache.iceberg.spark.source.SparkTable;\n+import org.apache.spark.sql.SparkSession;\n+import org.apache.spark.sql.catalyst.TableIdentifier;\n+import org.apache.spark.sql.catalyst.analysis.NoSuchNamespaceException;\n+import org.apache.spark.sql.catalyst.analysis.NoSuchTableException;\n+import org.apache.spark.sql.catalyst.analysis.TableAlreadyExistsException;\n+import org.apache.spark.sql.connector.catalog.CatalogPlugin;\n+import org.apache.spark.sql.connector.catalog.Identifier;\n+import org.apache.spark.sql.connector.catalog.StagedTable;\n+import org.apache.spark.sql.connector.catalog.TableCatalog;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import scala.Some;\n+import scala.collection.JavaConverters;\n+\n+/**\n+ * Takes a Spark table in the sourceCatalog and attempts to transform it into an Iceberg\n+ * Table in the same location with the same identifier. Once complete the identifier which\n+ * previously referred to a non-iceberg table will refer to the newly migrated iceberg\n+ * table.\n+ */\n+class Spark3MigrateAction extends Spark3CreateAction {\n+  private static final Logger LOG = LoggerFactory.getLogger(Spark3MigrateAction.class);\n+  private static final String BACKUP_SUFFIX = \"_BACKUP_\";\n+\n+  Spark3MigrateAction(SparkSession spark, CatalogPlugin sourceCatalog, Identifier sourceTableName) {\n+    super(spark, sourceCatalog, sourceTableName, sourceCatalog, sourceTableName);\n+  }\n+\n+  @Override\n+  public Long execute() {\n+    Table icebergTable;\n+\n+    // Move source table to a new name, halting all modifications and allowing us to stage\n+    // the creation of a new Iceberg table in its place\n+    String backupName = sourceTableName().name() + BACKUP_SUFFIX;\n+    Identifier backupIdentifier = Identifier.of(sourceTableName().namespace(), backupName);\n+    try {\n+      destCatalog().renameTable(sourceTableName(), backupIdentifier);\n+    } catch (NoSuchTableException e) {\n+      throw new IllegalArgumentException(\"Cannot find table to migrate\", e);\n+    } catch (TableAlreadyExistsException e) {\n+      throw new IllegalArgumentException(\"Cannot rename migration source to backup name\", e);\n+    }\n+\n+    StagedTable stagedTable = null;\n+    boolean threw = true;\n+    try {\n+      Map<String, String> newTableProperties = new HashMap<>();\n+      newTableProperties.put(TableCatalog.PROP_PROVIDER, \"iceberg\");\n+      newTableProperties.putAll(JavaConverters.mapAsJavaMapConverter(v1SourceTable().properties()).asJava());\n+      newTableProperties.putAll(tableLocationProperties(sourceTableLocation()));\n+      newTableProperties.putAll(additionalProperties());\n+\n+      stagedTable = destCatalog().stageCreate(Identifier.of(\n+          destTableName().namespace(),\n+          destTableName().name()),\n+          v1SourceTable().schema(),\n+          sourcePartitionSpec(),\n+          newTableProperties);\n+\n+      icebergTable = ((SparkTable) stagedTable).table();\n+\n+      if (!stagedTable.properties().containsKey(TableProperties.DEFAULT_NAME_MAPPING)) {\n+        assignDefaultTableNameMapping(icebergTable);\n+      }\n+\n+      String stagingLocation = stagedTable.properties().get(TableProperties.WRITE_METADATA_LOCATION);\n+\n+      LOG.info(\"Beginning migration of {} using metadata location {}\", sourceTableName(), stagingLocation);\n+\n+      Some<String> backupNamespace = Some.apply(backupIdentifier.namespace()[0]);\n+      TableIdentifier v1BackupIdentifier = new TableIdentifier(backupIdentifier.name(), backupNamespace);\n+      SparkTableUtil.importSparkTable(spark(), v1BackupIdentifier, icebergTable, stagingLocation);\n+\n+      stagedTable.commitStagedChanges();\n+      threw = false;\n+\n+    } catch (TableAlreadyExistsException tableAlreadyExistsException) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODQ5NjU5NA=="}, "originalCommit": {"oid": "e5636c7804ffd321253aa0d3a775e0c2a7c10e68"}, "originalPosition": 108}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4MDcyMzAwOnYy", "diffSide": "RIGHT", "path": "spark3/src/main/java/org/apache/iceberg/actions/Spark3MigrateAction.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxNToyNzoyMVrOIBjRpQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxNToyNzoyMVrOIBjRpQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODQ5NzQ0NQ==", "bodyText": "nit: parseLong", "url": "https://github.com/apache/iceberg/pull/1525#discussion_r538497445", "createdAt": "2020-12-08T15:27:21Z", "author": {"login": "aokolnychyi"}, "path": "spark3/src/main/java/org/apache/iceberg/actions/Spark3MigrateAction.java", "diffHunk": "@@ -0,0 +1,155 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.actions;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import org.apache.iceberg.Snapshot;\n+import org.apache.iceberg.SnapshotSummary;\n+import org.apache.iceberg.Table;\n+import org.apache.iceberg.TableProperties;\n+import org.apache.iceberg.spark.SparkSessionCatalog;\n+import org.apache.iceberg.spark.SparkTableUtil;\n+import org.apache.iceberg.spark.source.SparkTable;\n+import org.apache.spark.sql.SparkSession;\n+import org.apache.spark.sql.catalyst.TableIdentifier;\n+import org.apache.spark.sql.catalyst.analysis.NoSuchNamespaceException;\n+import org.apache.spark.sql.catalyst.analysis.NoSuchTableException;\n+import org.apache.spark.sql.catalyst.analysis.TableAlreadyExistsException;\n+import org.apache.spark.sql.connector.catalog.CatalogPlugin;\n+import org.apache.spark.sql.connector.catalog.Identifier;\n+import org.apache.spark.sql.connector.catalog.StagedTable;\n+import org.apache.spark.sql.connector.catalog.TableCatalog;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import scala.Some;\n+import scala.collection.JavaConverters;\n+\n+/**\n+ * Takes a Spark table in the sourceCatalog and attempts to transform it into an Iceberg\n+ * Table in the same location with the same identifier. Once complete the identifier which\n+ * previously referred to a non-iceberg table will refer to the newly migrated iceberg\n+ * table.\n+ */\n+class Spark3MigrateAction extends Spark3CreateAction {\n+  private static final Logger LOG = LoggerFactory.getLogger(Spark3MigrateAction.class);\n+  private static final String BACKUP_SUFFIX = \"_BACKUP_\";\n+\n+  Spark3MigrateAction(SparkSession spark, CatalogPlugin sourceCatalog, Identifier sourceTableName) {\n+    super(spark, sourceCatalog, sourceTableName, sourceCatalog, sourceTableName);\n+  }\n+\n+  @Override\n+  public Long execute() {\n+    Table icebergTable;\n+\n+    // Move source table to a new name, halting all modifications and allowing us to stage\n+    // the creation of a new Iceberg table in its place\n+    String backupName = sourceTableName().name() + BACKUP_SUFFIX;\n+    Identifier backupIdentifier = Identifier.of(sourceTableName().namespace(), backupName);\n+    try {\n+      destCatalog().renameTable(sourceTableName(), backupIdentifier);\n+    } catch (NoSuchTableException e) {\n+      throw new IllegalArgumentException(\"Cannot find table to migrate\", e);\n+    } catch (TableAlreadyExistsException e) {\n+      throw new IllegalArgumentException(\"Cannot rename migration source to backup name\", e);\n+    }\n+\n+    StagedTable stagedTable = null;\n+    boolean threw = true;\n+    try {\n+      Map<String, String> newTableProperties = new HashMap<>();\n+      newTableProperties.put(TableCatalog.PROP_PROVIDER, \"iceberg\");\n+      newTableProperties.putAll(JavaConverters.mapAsJavaMapConverter(v1SourceTable().properties()).asJava());\n+      newTableProperties.putAll(tableLocationProperties(sourceTableLocation()));\n+      newTableProperties.putAll(additionalProperties());\n+\n+      stagedTable = destCatalog().stageCreate(Identifier.of(\n+          destTableName().namespace(),\n+          destTableName().name()),\n+          v1SourceTable().schema(),\n+          sourcePartitionSpec(),\n+          newTableProperties);\n+\n+      icebergTable = ((SparkTable) stagedTable).table();\n+\n+      if (!stagedTable.properties().containsKey(TableProperties.DEFAULT_NAME_MAPPING)) {\n+        assignDefaultTableNameMapping(icebergTable);\n+      }\n+\n+      String stagingLocation = stagedTable.properties().get(TableProperties.WRITE_METADATA_LOCATION);\n+\n+      LOG.info(\"Beginning migration of {} using metadata location {}\", sourceTableName(), stagingLocation);\n+\n+      Some<String> backupNamespace = Some.apply(backupIdentifier.namespace()[0]);\n+      TableIdentifier v1BackupIdentifier = new TableIdentifier(backupIdentifier.name(), backupNamespace);\n+      SparkTableUtil.importSparkTable(spark(), v1BackupIdentifier, icebergTable, stagingLocation);\n+\n+      stagedTable.commitStagedChanges();\n+      threw = false;\n+\n+    } catch (TableAlreadyExistsException tableAlreadyExistsException) {\n+      throw new IllegalArgumentException(\"Cannot migrate because a table was created with the same name as the \" +\n+          \"original was created after we renamed the original table to a backup identifier.\",\n+          tableAlreadyExistsException);\n+    } catch (NoSuchNamespaceException noSuchNamespaceException) {\n+      throw new IllegalArgumentException(\"Cannot migrate because the namespace for the table no longer exists after\" +\n+          \"we renamed the original table to a backup identifier.\",\n+          noSuchNamespaceException);\n+    } finally {\n+\n+      if (threw) {\n+        LOG.error(\"Error when attempting perform migration changes, aborting table creation and restoring backup.\");\n+        try {\n+          destCatalog().renameTable(backupIdentifier, sourceTableName());\n+        } catch (NoSuchTableException nstException) {\n+          throw new IllegalArgumentException(\"Cannot restore backup, the backup cannot be found\", nstException);\n+        } catch (TableAlreadyExistsException taeException) {\n+          throw new IllegalArgumentException(String.format(\"Cannot restore backup, a table with the original name \" +\n+              \"exists. The backup can be found with the name %s\", backupIdentifier.toString()), taeException);\n+        }\n+\n+        try {\n+          if (stagedTable != null) {\n+            stagedTable.abortStagedChanges();\n+          }\n+        } catch (Exception abortException) {\n+          LOG.error(\"Unable to abort staged changes\", abortException);\n+        }\n+      }\n+    }\n+\n+    Snapshot snapshot = icebergTable.currentSnapshot();\n+    long numMigratedFiles = Long.valueOf(snapshot.summary().get(SnapshotSummary.TOTAL_DATA_FILES_PROP));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e5636c7804ffd321253aa0d3a775e0c2a7c10e68"}, "originalPosition": 140}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4MDc0MDI4OnYy", "diffSide": "RIGHT", "path": "spark3/src/main/java/org/apache/iceberg/actions/Spark3MigrateAction.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxNToyOTo1MVrOIBjczQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQwMToyNTo0MFrOICxHUA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODUwMDMwMQ==", "bodyText": "Do we really want to throw a new exception rather than rethrwoing the original exception?\nI kind of liked our internal utility tryWithSafeFinallyAndFailureCallbacks that we copied from Spark for such things.", "url": "https://github.com/apache/iceberg/pull/1525#discussion_r538500301", "createdAt": "2020-12-08T15:29:51Z", "author": {"login": "aokolnychyi"}, "path": "spark3/src/main/java/org/apache/iceberg/actions/Spark3MigrateAction.java", "diffHunk": "@@ -0,0 +1,155 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.actions;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import org.apache.iceberg.Snapshot;\n+import org.apache.iceberg.SnapshotSummary;\n+import org.apache.iceberg.Table;\n+import org.apache.iceberg.TableProperties;\n+import org.apache.iceberg.spark.SparkSessionCatalog;\n+import org.apache.iceberg.spark.SparkTableUtil;\n+import org.apache.iceberg.spark.source.SparkTable;\n+import org.apache.spark.sql.SparkSession;\n+import org.apache.spark.sql.catalyst.TableIdentifier;\n+import org.apache.spark.sql.catalyst.analysis.NoSuchNamespaceException;\n+import org.apache.spark.sql.catalyst.analysis.NoSuchTableException;\n+import org.apache.spark.sql.catalyst.analysis.TableAlreadyExistsException;\n+import org.apache.spark.sql.connector.catalog.CatalogPlugin;\n+import org.apache.spark.sql.connector.catalog.Identifier;\n+import org.apache.spark.sql.connector.catalog.StagedTable;\n+import org.apache.spark.sql.connector.catalog.TableCatalog;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import scala.Some;\n+import scala.collection.JavaConverters;\n+\n+/**\n+ * Takes a Spark table in the sourceCatalog and attempts to transform it into an Iceberg\n+ * Table in the same location with the same identifier. Once complete the identifier which\n+ * previously referred to a non-iceberg table will refer to the newly migrated iceberg\n+ * table.\n+ */\n+class Spark3MigrateAction extends Spark3CreateAction {\n+  private static final Logger LOG = LoggerFactory.getLogger(Spark3MigrateAction.class);\n+  private static final String BACKUP_SUFFIX = \"_BACKUP_\";\n+\n+  Spark3MigrateAction(SparkSession spark, CatalogPlugin sourceCatalog, Identifier sourceTableName) {\n+    super(spark, sourceCatalog, sourceTableName, sourceCatalog, sourceTableName);\n+  }\n+\n+  @Override\n+  public Long execute() {\n+    Table icebergTable;\n+\n+    // Move source table to a new name, halting all modifications and allowing us to stage\n+    // the creation of a new Iceberg table in its place\n+    String backupName = sourceTableName().name() + BACKUP_SUFFIX;\n+    Identifier backupIdentifier = Identifier.of(sourceTableName().namespace(), backupName);\n+    try {\n+      destCatalog().renameTable(sourceTableName(), backupIdentifier);\n+    } catch (NoSuchTableException e) {\n+      throw new IllegalArgumentException(\"Cannot find table to migrate\", e);\n+    } catch (TableAlreadyExistsException e) {\n+      throw new IllegalArgumentException(\"Cannot rename migration source to backup name\", e);\n+    }\n+\n+    StagedTable stagedTable = null;\n+    boolean threw = true;\n+    try {\n+      Map<String, String> newTableProperties = new HashMap<>();\n+      newTableProperties.put(TableCatalog.PROP_PROVIDER, \"iceberg\");\n+      newTableProperties.putAll(JavaConverters.mapAsJavaMapConverter(v1SourceTable().properties()).asJava());\n+      newTableProperties.putAll(tableLocationProperties(sourceTableLocation()));\n+      newTableProperties.putAll(additionalProperties());\n+\n+      stagedTable = destCatalog().stageCreate(Identifier.of(\n+          destTableName().namespace(),\n+          destTableName().name()),\n+          v1SourceTable().schema(),\n+          sourcePartitionSpec(),\n+          newTableProperties);\n+\n+      icebergTable = ((SparkTable) stagedTable).table();\n+\n+      if (!stagedTable.properties().containsKey(TableProperties.DEFAULT_NAME_MAPPING)) {\n+        assignDefaultTableNameMapping(icebergTable);\n+      }\n+\n+      String stagingLocation = stagedTable.properties().get(TableProperties.WRITE_METADATA_LOCATION);\n+\n+      LOG.info(\"Beginning migration of {} using metadata location {}\", sourceTableName(), stagingLocation);\n+\n+      Some<String> backupNamespace = Some.apply(backupIdentifier.namespace()[0]);\n+      TableIdentifier v1BackupIdentifier = new TableIdentifier(backupIdentifier.name(), backupNamespace);\n+      SparkTableUtil.importSparkTable(spark(), v1BackupIdentifier, icebergTable, stagingLocation);\n+\n+      stagedTable.commitStagedChanges();\n+      threw = false;\n+\n+    } catch (TableAlreadyExistsException tableAlreadyExistsException) {\n+      throw new IllegalArgumentException(\"Cannot migrate because a table was created with the same name as the \" +\n+          \"original was created after we renamed the original table to a backup identifier.\",\n+          tableAlreadyExistsException);\n+    } catch (NoSuchNamespaceException noSuchNamespaceException) {\n+      throw new IllegalArgumentException(\"Cannot migrate because the namespace for the table no longer exists after\" +\n+          \"we renamed the original table to a backup identifier.\",\n+          noSuchNamespaceException);\n+    } finally {\n+\n+      if (threw) {\n+        LOG.error(\"Error when attempting perform migration changes, aborting table creation and restoring backup.\");\n+        try {\n+          destCatalog().renameTable(backupIdentifier, sourceTableName());\n+        } catch (NoSuchTableException nstException) {\n+          throw new IllegalArgumentException(\"Cannot restore backup, the backup cannot be found\", nstException);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e5636c7804ffd321253aa0d3a775e0c2a7c10e68"}, "originalPosition": 123}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODc1MTkwNw==", "bodyText": "I don't think so. I think this should log and allow the original exception to propagate. It would also be nice to add these as suppressed exceptions (not a blocker).\nThese should also no prevent the abort from happening below.", "url": "https://github.com/apache/iceberg/pull/1525#discussion_r538751907", "createdAt": "2020-12-08T19:37:23Z", "author": {"login": "rdblue"}, "path": "spark3/src/main/java/org/apache/iceberg/actions/Spark3MigrateAction.java", "diffHunk": "@@ -0,0 +1,155 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.actions;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import org.apache.iceberg.Snapshot;\n+import org.apache.iceberg.SnapshotSummary;\n+import org.apache.iceberg.Table;\n+import org.apache.iceberg.TableProperties;\n+import org.apache.iceberg.spark.SparkSessionCatalog;\n+import org.apache.iceberg.spark.SparkTableUtil;\n+import org.apache.iceberg.spark.source.SparkTable;\n+import org.apache.spark.sql.SparkSession;\n+import org.apache.spark.sql.catalyst.TableIdentifier;\n+import org.apache.spark.sql.catalyst.analysis.NoSuchNamespaceException;\n+import org.apache.spark.sql.catalyst.analysis.NoSuchTableException;\n+import org.apache.spark.sql.catalyst.analysis.TableAlreadyExistsException;\n+import org.apache.spark.sql.connector.catalog.CatalogPlugin;\n+import org.apache.spark.sql.connector.catalog.Identifier;\n+import org.apache.spark.sql.connector.catalog.StagedTable;\n+import org.apache.spark.sql.connector.catalog.TableCatalog;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import scala.Some;\n+import scala.collection.JavaConverters;\n+\n+/**\n+ * Takes a Spark table in the sourceCatalog and attempts to transform it into an Iceberg\n+ * Table in the same location with the same identifier. Once complete the identifier which\n+ * previously referred to a non-iceberg table will refer to the newly migrated iceberg\n+ * table.\n+ */\n+class Spark3MigrateAction extends Spark3CreateAction {\n+  private static final Logger LOG = LoggerFactory.getLogger(Spark3MigrateAction.class);\n+  private static final String BACKUP_SUFFIX = \"_BACKUP_\";\n+\n+  Spark3MigrateAction(SparkSession spark, CatalogPlugin sourceCatalog, Identifier sourceTableName) {\n+    super(spark, sourceCatalog, sourceTableName, sourceCatalog, sourceTableName);\n+  }\n+\n+  @Override\n+  public Long execute() {\n+    Table icebergTable;\n+\n+    // Move source table to a new name, halting all modifications and allowing us to stage\n+    // the creation of a new Iceberg table in its place\n+    String backupName = sourceTableName().name() + BACKUP_SUFFIX;\n+    Identifier backupIdentifier = Identifier.of(sourceTableName().namespace(), backupName);\n+    try {\n+      destCatalog().renameTable(sourceTableName(), backupIdentifier);\n+    } catch (NoSuchTableException e) {\n+      throw new IllegalArgumentException(\"Cannot find table to migrate\", e);\n+    } catch (TableAlreadyExistsException e) {\n+      throw new IllegalArgumentException(\"Cannot rename migration source to backup name\", e);\n+    }\n+\n+    StagedTable stagedTable = null;\n+    boolean threw = true;\n+    try {\n+      Map<String, String> newTableProperties = new HashMap<>();\n+      newTableProperties.put(TableCatalog.PROP_PROVIDER, \"iceberg\");\n+      newTableProperties.putAll(JavaConverters.mapAsJavaMapConverter(v1SourceTable().properties()).asJava());\n+      newTableProperties.putAll(tableLocationProperties(sourceTableLocation()));\n+      newTableProperties.putAll(additionalProperties());\n+\n+      stagedTable = destCatalog().stageCreate(Identifier.of(\n+          destTableName().namespace(),\n+          destTableName().name()),\n+          v1SourceTable().schema(),\n+          sourcePartitionSpec(),\n+          newTableProperties);\n+\n+      icebergTable = ((SparkTable) stagedTable).table();\n+\n+      if (!stagedTable.properties().containsKey(TableProperties.DEFAULT_NAME_MAPPING)) {\n+        assignDefaultTableNameMapping(icebergTable);\n+      }\n+\n+      String stagingLocation = stagedTable.properties().get(TableProperties.WRITE_METADATA_LOCATION);\n+\n+      LOG.info(\"Beginning migration of {} using metadata location {}\", sourceTableName(), stagingLocation);\n+\n+      Some<String> backupNamespace = Some.apply(backupIdentifier.namespace()[0]);\n+      TableIdentifier v1BackupIdentifier = new TableIdentifier(backupIdentifier.name(), backupNamespace);\n+      SparkTableUtil.importSparkTable(spark(), v1BackupIdentifier, icebergTable, stagingLocation);\n+\n+      stagedTable.commitStagedChanges();\n+      threw = false;\n+\n+    } catch (TableAlreadyExistsException tableAlreadyExistsException) {\n+      throw new IllegalArgumentException(\"Cannot migrate because a table was created with the same name as the \" +\n+          \"original was created after we renamed the original table to a backup identifier.\",\n+          tableAlreadyExistsException);\n+    } catch (NoSuchNamespaceException noSuchNamespaceException) {\n+      throw new IllegalArgumentException(\"Cannot migrate because the namespace for the table no longer exists after\" +\n+          \"we renamed the original table to a backup identifier.\",\n+          noSuchNamespaceException);\n+    } finally {\n+\n+      if (threw) {\n+        LOG.error(\"Error when attempting perform migration changes, aborting table creation and restoring backup.\");\n+        try {\n+          destCatalog().renameTable(backupIdentifier, sourceTableName());\n+        } catch (NoSuchTableException nstException) {\n+          throw new IllegalArgumentException(\"Cannot restore backup, the backup cannot be found\", nstException);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODUwMDMwMQ=="}, "originalCommit": {"oid": "e5636c7804ffd321253aa0d3a775e0c2a7c10e68"}, "originalPosition": 123}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODgxMDc1OA==", "bodyText": "@RussellSpitzer, our tryWithSafeFinallyAndFailureCallbacks does add suppressed exceptions. We can address this in a follow-up but we need to fix other major points.", "url": "https://github.com/apache/iceberg/pull/1525#discussion_r538810758", "createdAt": "2020-12-08T21:12:10Z", "author": {"login": "aokolnychyi"}, "path": "spark3/src/main/java/org/apache/iceberg/actions/Spark3MigrateAction.java", "diffHunk": "@@ -0,0 +1,155 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.actions;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import org.apache.iceberg.Snapshot;\n+import org.apache.iceberg.SnapshotSummary;\n+import org.apache.iceberg.Table;\n+import org.apache.iceberg.TableProperties;\n+import org.apache.iceberg.spark.SparkSessionCatalog;\n+import org.apache.iceberg.spark.SparkTableUtil;\n+import org.apache.iceberg.spark.source.SparkTable;\n+import org.apache.spark.sql.SparkSession;\n+import org.apache.spark.sql.catalyst.TableIdentifier;\n+import org.apache.spark.sql.catalyst.analysis.NoSuchNamespaceException;\n+import org.apache.spark.sql.catalyst.analysis.NoSuchTableException;\n+import org.apache.spark.sql.catalyst.analysis.TableAlreadyExistsException;\n+import org.apache.spark.sql.connector.catalog.CatalogPlugin;\n+import org.apache.spark.sql.connector.catalog.Identifier;\n+import org.apache.spark.sql.connector.catalog.StagedTable;\n+import org.apache.spark.sql.connector.catalog.TableCatalog;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import scala.Some;\n+import scala.collection.JavaConverters;\n+\n+/**\n+ * Takes a Spark table in the sourceCatalog and attempts to transform it into an Iceberg\n+ * Table in the same location with the same identifier. Once complete the identifier which\n+ * previously referred to a non-iceberg table will refer to the newly migrated iceberg\n+ * table.\n+ */\n+class Spark3MigrateAction extends Spark3CreateAction {\n+  private static final Logger LOG = LoggerFactory.getLogger(Spark3MigrateAction.class);\n+  private static final String BACKUP_SUFFIX = \"_BACKUP_\";\n+\n+  Spark3MigrateAction(SparkSession spark, CatalogPlugin sourceCatalog, Identifier sourceTableName) {\n+    super(spark, sourceCatalog, sourceTableName, sourceCatalog, sourceTableName);\n+  }\n+\n+  @Override\n+  public Long execute() {\n+    Table icebergTable;\n+\n+    // Move source table to a new name, halting all modifications and allowing us to stage\n+    // the creation of a new Iceberg table in its place\n+    String backupName = sourceTableName().name() + BACKUP_SUFFIX;\n+    Identifier backupIdentifier = Identifier.of(sourceTableName().namespace(), backupName);\n+    try {\n+      destCatalog().renameTable(sourceTableName(), backupIdentifier);\n+    } catch (NoSuchTableException e) {\n+      throw new IllegalArgumentException(\"Cannot find table to migrate\", e);\n+    } catch (TableAlreadyExistsException e) {\n+      throw new IllegalArgumentException(\"Cannot rename migration source to backup name\", e);\n+    }\n+\n+    StagedTable stagedTable = null;\n+    boolean threw = true;\n+    try {\n+      Map<String, String> newTableProperties = new HashMap<>();\n+      newTableProperties.put(TableCatalog.PROP_PROVIDER, \"iceberg\");\n+      newTableProperties.putAll(JavaConverters.mapAsJavaMapConverter(v1SourceTable().properties()).asJava());\n+      newTableProperties.putAll(tableLocationProperties(sourceTableLocation()));\n+      newTableProperties.putAll(additionalProperties());\n+\n+      stagedTable = destCatalog().stageCreate(Identifier.of(\n+          destTableName().namespace(),\n+          destTableName().name()),\n+          v1SourceTable().schema(),\n+          sourcePartitionSpec(),\n+          newTableProperties);\n+\n+      icebergTable = ((SparkTable) stagedTable).table();\n+\n+      if (!stagedTable.properties().containsKey(TableProperties.DEFAULT_NAME_MAPPING)) {\n+        assignDefaultTableNameMapping(icebergTable);\n+      }\n+\n+      String stagingLocation = stagedTable.properties().get(TableProperties.WRITE_METADATA_LOCATION);\n+\n+      LOG.info(\"Beginning migration of {} using metadata location {}\", sourceTableName(), stagingLocation);\n+\n+      Some<String> backupNamespace = Some.apply(backupIdentifier.namespace()[0]);\n+      TableIdentifier v1BackupIdentifier = new TableIdentifier(backupIdentifier.name(), backupNamespace);\n+      SparkTableUtil.importSparkTable(spark(), v1BackupIdentifier, icebergTable, stagingLocation);\n+\n+      stagedTable.commitStagedChanges();\n+      threw = false;\n+\n+    } catch (TableAlreadyExistsException tableAlreadyExistsException) {\n+      throw new IllegalArgumentException(\"Cannot migrate because a table was created with the same name as the \" +\n+          \"original was created after we renamed the original table to a backup identifier.\",\n+          tableAlreadyExistsException);\n+    } catch (NoSuchNamespaceException noSuchNamespaceException) {\n+      throw new IllegalArgumentException(\"Cannot migrate because the namespace for the table no longer exists after\" +\n+          \"we renamed the original table to a backup identifier.\",\n+          noSuchNamespaceException);\n+    } finally {\n+\n+      if (threw) {\n+        LOG.error(\"Error when attempting perform migration changes, aborting table creation and restoring backup.\");\n+        try {\n+          destCatalog().renameTable(backupIdentifier, sourceTableName());\n+        } catch (NoSuchTableException nstException) {\n+          throw new IllegalArgumentException(\"Cannot restore backup, the backup cannot be found\", nstException);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODUwMDMwMQ=="}, "originalCommit": {"oid": "e5636c7804ffd321253aa0d3a775e0c2a7c10e68"}, "originalPosition": 123}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTc3Mjc1Mg==", "bodyText": "I think we should log the errors for now and update to add suppressed exceptions later.\nSo for now, I think the runtime exceptions here should be changed to log messages.", "url": "https://github.com/apache/iceberg/pull/1525#discussion_r539772752", "createdAt": "2020-12-10T01:25:40Z", "author": {"login": "rdblue"}, "path": "spark3/src/main/java/org/apache/iceberg/actions/Spark3MigrateAction.java", "diffHunk": "@@ -0,0 +1,155 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.actions;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import org.apache.iceberg.Snapshot;\n+import org.apache.iceberg.SnapshotSummary;\n+import org.apache.iceberg.Table;\n+import org.apache.iceberg.TableProperties;\n+import org.apache.iceberg.spark.SparkSessionCatalog;\n+import org.apache.iceberg.spark.SparkTableUtil;\n+import org.apache.iceberg.spark.source.SparkTable;\n+import org.apache.spark.sql.SparkSession;\n+import org.apache.spark.sql.catalyst.TableIdentifier;\n+import org.apache.spark.sql.catalyst.analysis.NoSuchNamespaceException;\n+import org.apache.spark.sql.catalyst.analysis.NoSuchTableException;\n+import org.apache.spark.sql.catalyst.analysis.TableAlreadyExistsException;\n+import org.apache.spark.sql.connector.catalog.CatalogPlugin;\n+import org.apache.spark.sql.connector.catalog.Identifier;\n+import org.apache.spark.sql.connector.catalog.StagedTable;\n+import org.apache.spark.sql.connector.catalog.TableCatalog;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import scala.Some;\n+import scala.collection.JavaConverters;\n+\n+/**\n+ * Takes a Spark table in the sourceCatalog and attempts to transform it into an Iceberg\n+ * Table in the same location with the same identifier. Once complete the identifier which\n+ * previously referred to a non-iceberg table will refer to the newly migrated iceberg\n+ * table.\n+ */\n+class Spark3MigrateAction extends Spark3CreateAction {\n+  private static final Logger LOG = LoggerFactory.getLogger(Spark3MigrateAction.class);\n+  private static final String BACKUP_SUFFIX = \"_BACKUP_\";\n+\n+  Spark3MigrateAction(SparkSession spark, CatalogPlugin sourceCatalog, Identifier sourceTableName) {\n+    super(spark, sourceCatalog, sourceTableName, sourceCatalog, sourceTableName);\n+  }\n+\n+  @Override\n+  public Long execute() {\n+    Table icebergTable;\n+\n+    // Move source table to a new name, halting all modifications and allowing us to stage\n+    // the creation of a new Iceberg table in its place\n+    String backupName = sourceTableName().name() + BACKUP_SUFFIX;\n+    Identifier backupIdentifier = Identifier.of(sourceTableName().namespace(), backupName);\n+    try {\n+      destCatalog().renameTable(sourceTableName(), backupIdentifier);\n+    } catch (NoSuchTableException e) {\n+      throw new IllegalArgumentException(\"Cannot find table to migrate\", e);\n+    } catch (TableAlreadyExistsException e) {\n+      throw new IllegalArgumentException(\"Cannot rename migration source to backup name\", e);\n+    }\n+\n+    StagedTable stagedTable = null;\n+    boolean threw = true;\n+    try {\n+      Map<String, String> newTableProperties = new HashMap<>();\n+      newTableProperties.put(TableCatalog.PROP_PROVIDER, \"iceberg\");\n+      newTableProperties.putAll(JavaConverters.mapAsJavaMapConverter(v1SourceTable().properties()).asJava());\n+      newTableProperties.putAll(tableLocationProperties(sourceTableLocation()));\n+      newTableProperties.putAll(additionalProperties());\n+\n+      stagedTable = destCatalog().stageCreate(Identifier.of(\n+          destTableName().namespace(),\n+          destTableName().name()),\n+          v1SourceTable().schema(),\n+          sourcePartitionSpec(),\n+          newTableProperties);\n+\n+      icebergTable = ((SparkTable) stagedTable).table();\n+\n+      if (!stagedTable.properties().containsKey(TableProperties.DEFAULT_NAME_MAPPING)) {\n+        assignDefaultTableNameMapping(icebergTable);\n+      }\n+\n+      String stagingLocation = stagedTable.properties().get(TableProperties.WRITE_METADATA_LOCATION);\n+\n+      LOG.info(\"Beginning migration of {} using metadata location {}\", sourceTableName(), stagingLocation);\n+\n+      Some<String> backupNamespace = Some.apply(backupIdentifier.namespace()[0]);\n+      TableIdentifier v1BackupIdentifier = new TableIdentifier(backupIdentifier.name(), backupNamespace);\n+      SparkTableUtil.importSparkTable(spark(), v1BackupIdentifier, icebergTable, stagingLocation);\n+\n+      stagedTable.commitStagedChanges();\n+      threw = false;\n+\n+    } catch (TableAlreadyExistsException tableAlreadyExistsException) {\n+      throw new IllegalArgumentException(\"Cannot migrate because a table was created with the same name as the \" +\n+          \"original was created after we renamed the original table to a backup identifier.\",\n+          tableAlreadyExistsException);\n+    } catch (NoSuchNamespaceException noSuchNamespaceException) {\n+      throw new IllegalArgumentException(\"Cannot migrate because the namespace for the table no longer exists after\" +\n+          \"we renamed the original table to a backup identifier.\",\n+          noSuchNamespaceException);\n+    } finally {\n+\n+      if (threw) {\n+        LOG.error(\"Error when attempting perform migration changes, aborting table creation and restoring backup.\");\n+        try {\n+          destCatalog().renameTable(backupIdentifier, sourceTableName());\n+        } catch (NoSuchTableException nstException) {\n+          throw new IllegalArgumentException(\"Cannot restore backup, the backup cannot be found\", nstException);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODUwMDMwMQ=="}, "originalCommit": {"oid": "e5636c7804ffd321253aa0d3a775e0c2a7c10e68"}, "originalPosition": 123}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4MjIzMjI1OnYy", "diffSide": "RIGHT", "path": "spark3/src/main/java/org/apache/iceberg/actions/Spark3CreateAction.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxOToyMzozM1rOIByQ7w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxOToyMzozM1rOIByQ7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODc0MzAyMw==", "bodyText": "Not a blocker, but we will probably want to relax this constraint when we support direct access to Hive catalogs. Provider is specific to Spark, so if we were to load directly nothing would detect the provider. And in any case, if the provider is \"hive\", it's basically delegating to the partition-level checks. This is nice to catch problems early, though.", "url": "https://github.com/apache/iceberg/pull/1525#discussion_r538743023", "createdAt": "2020-12-08T19:23:33Z", "author": {"login": "rdblue"}, "path": "spark3/src/main/java/org/apache/iceberg/actions/Spark3CreateAction.java", "diffHunk": "@@ -0,0 +1,172 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.actions;\n+\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Set;\n+import org.apache.iceberg.Table;\n+import org.apache.iceberg.TableProperties;\n+import org.apache.iceberg.mapping.MappingUtil;\n+import org.apache.iceberg.mapping.NameMapping;\n+import org.apache.iceberg.mapping.NameMappingParser;\n+import org.apache.iceberg.relocated.com.google.common.collect.ImmutableMap;\n+import org.apache.iceberg.relocated.com.google.common.collect.ImmutableSet;\n+import org.apache.iceberg.relocated.com.google.common.collect.Maps;\n+import org.apache.iceberg.spark.SparkCatalog;\n+import org.apache.iceberg.spark.SparkSessionCatalog;\n+import org.apache.spark.sql.SparkSession;\n+import org.apache.spark.sql.catalyst.analysis.NoSuchTableException;\n+import org.apache.spark.sql.catalyst.catalog.CatalogTable;\n+import org.apache.spark.sql.catalyst.catalog.CatalogUtils;\n+import org.apache.spark.sql.connector.catalog.CatalogPlugin;\n+import org.apache.spark.sql.connector.catalog.Identifier;\n+import org.apache.spark.sql.connector.catalog.StagingTableCatalog;\n+import org.apache.spark.sql.connector.catalog.TableCatalog;\n+import org.apache.spark.sql.connector.catalog.V1Table;\n+import org.apache.spark.sql.connector.expressions.Transform;\n+\n+abstract class Spark3CreateAction implements CreateAction {\n+  private static final Set<String> ALLOWED_SOURCES = ImmutableSet.of(\"parquet\", \"avro\", \"orc\", \"hive\");\n+  protected static final String ICEBERG_METADATA_FOLDER = \"metadata\";\n+\n+  private final SparkSession spark;\n+\n+  // Source Fields\n+  private final V1Table sourceTable;\n+  private final CatalogTable sourceCatalogTable;\n+  private final String sourceTableLocation;\n+  private final CatalogPlugin sourceCatalog;\n+  private final Identifier sourceTableIdent;\n+\n+  // Destination Fields\n+  private final StagingTableCatalog destCatalog;\n+  private final Identifier destTableIdent;\n+\n+  // Optional Parameters for destination\n+  private Map<String, String> additionalProperties = Maps.newHashMap();\n+\n+  Spark3CreateAction(SparkSession spark, CatalogPlugin sourceCatalog, Identifier sourceTableIdent,\n+                       CatalogPlugin destCatalog, Identifier destTableIdent) {\n+\n+    this.spark = spark;\n+    this.sourceCatalog = checkSourceCatalog(sourceCatalog);\n+    this.sourceTableIdent = sourceTableIdent;\n+    this.destCatalog = checkDestinationCatalog(destCatalog);\n+    this.destTableIdent = destTableIdent;\n+\n+    try {\n+      this.sourceTable = (V1Table) ((TableCatalog) sourceCatalog).loadTable(sourceTableIdent);\n+      this.sourceCatalogTable = sourceTable.v1Table();\n+    } catch (NoSuchTableException e) {\n+      throw new IllegalArgumentException(String.format(\"Cannot not find source table %s\", sourceTableIdent), e);\n+    } catch (ClassCastException e) {\n+      throw new IllegalArgumentException(String.format(\"Cannot use non-v1 table %s as a source\", sourceTableIdent), e);\n+    }\n+    validateSourceTable(sourceCatalogTable);\n+\n+    this.sourceTableLocation = CatalogUtils.URIToString(sourceCatalogTable.storage().locationUri().get());\n+  }\n+\n+  @Override\n+  public CreateAction withProperties(Map<String, String> properties) {\n+    this.additionalProperties.putAll(properties);\n+    return this;\n+  }\n+\n+  @Override\n+  public CreateAction withProperty(String key, String value) {\n+    this.additionalProperties.put(key, value);\n+    return this;\n+  }\n+\n+  protected SparkSession spark() {\n+    return spark;\n+  }\n+\n+  protected String sourceTableLocation() {\n+    return sourceTableLocation;\n+  }\n+\n+  protected CatalogTable v1SourceTable() {\n+    return sourceCatalogTable;\n+  }\n+\n+  protected CatalogPlugin sourceCatalog() {\n+    return sourceCatalog;\n+  }\n+\n+  protected Identifier sourceTableName() {\n+    return sourceTableIdent;\n+  }\n+\n+  protected Transform[] sourcePartitionSpec() {\n+    return sourceTable.partitioning();\n+  }\n+\n+  protected StagingTableCatalog destCatalog() {\n+    return destCatalog;\n+  }\n+\n+  protected Identifier destTableName() {\n+    return destTableIdent;\n+  }\n+\n+  protected Map<String, String> additionalProperties() {\n+    return additionalProperties;\n+  }\n+\n+  private static void validateSourceTable(CatalogTable sourceTable) {\n+    String sourceTableProvider = sourceTable.provider().get().toLowerCase(Locale.ROOT);\n+\n+    if (!ALLOWED_SOURCES.contains(sourceTableProvider)) {\n+      throw new IllegalArgumentException(\n+          String.format(\"Cannot create an Iceberg table from source provider: %s\", sourceTableProvider));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e5636c7804ffd321253aa0d3a775e0c2a7c10e68"}, "originalPosition": 141}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4MjI4NjE3OnYy", "diffSide": "RIGHT", "path": "spark3/src/main/java/org/apache/iceberg/actions/Spark3MigrateAction.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxOTozNjowNFrOIBywRA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxOTozNjowNFrOIBywRA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODc1MTA0NA==", "bodyText": "Instead of throwing IllegalArgumentException, what about throwing the Iceberg exception for these cases?", "url": "https://github.com/apache/iceberg/pull/1525#discussion_r538751044", "createdAt": "2020-12-08T19:36:04Z", "author": {"login": "rdblue"}, "path": "spark3/src/main/java/org/apache/iceberg/actions/Spark3MigrateAction.java", "diffHunk": "@@ -0,0 +1,155 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.actions;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import org.apache.iceberg.Snapshot;\n+import org.apache.iceberg.SnapshotSummary;\n+import org.apache.iceberg.Table;\n+import org.apache.iceberg.TableProperties;\n+import org.apache.iceberg.spark.SparkSessionCatalog;\n+import org.apache.iceberg.spark.SparkTableUtil;\n+import org.apache.iceberg.spark.source.SparkTable;\n+import org.apache.spark.sql.SparkSession;\n+import org.apache.spark.sql.catalyst.TableIdentifier;\n+import org.apache.spark.sql.catalyst.analysis.NoSuchNamespaceException;\n+import org.apache.spark.sql.catalyst.analysis.NoSuchTableException;\n+import org.apache.spark.sql.catalyst.analysis.TableAlreadyExistsException;\n+import org.apache.spark.sql.connector.catalog.CatalogPlugin;\n+import org.apache.spark.sql.connector.catalog.Identifier;\n+import org.apache.spark.sql.connector.catalog.StagedTable;\n+import org.apache.spark.sql.connector.catalog.TableCatalog;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import scala.Some;\n+import scala.collection.JavaConverters;\n+\n+/**\n+ * Takes a Spark table in the sourceCatalog and attempts to transform it into an Iceberg\n+ * Table in the same location with the same identifier. Once complete the identifier which\n+ * previously referred to a non-iceberg table will refer to the newly migrated iceberg\n+ * table.\n+ */\n+class Spark3MigrateAction extends Spark3CreateAction {\n+  private static final Logger LOG = LoggerFactory.getLogger(Spark3MigrateAction.class);\n+  private static final String BACKUP_SUFFIX = \"_BACKUP_\";\n+\n+  Spark3MigrateAction(SparkSession spark, CatalogPlugin sourceCatalog, Identifier sourceTableName) {\n+    super(spark, sourceCatalog, sourceTableName, sourceCatalog, sourceTableName);\n+  }\n+\n+  @Override\n+  public Long execute() {\n+    Table icebergTable;\n+\n+    // Move source table to a new name, halting all modifications and allowing us to stage\n+    // the creation of a new Iceberg table in its place\n+    String backupName = sourceTableName().name() + BACKUP_SUFFIX;\n+    Identifier backupIdentifier = Identifier.of(sourceTableName().namespace(), backupName);\n+    try {\n+      destCatalog().renameTable(sourceTableName(), backupIdentifier);\n+    } catch (NoSuchTableException e) {\n+      throw new IllegalArgumentException(\"Cannot find table to migrate\", e);\n+    } catch (TableAlreadyExistsException e) {\n+      throw new IllegalArgumentException(\"Cannot rename migration source to backup name\", e);\n+    }\n+\n+    StagedTable stagedTable = null;\n+    boolean threw = true;\n+    try {\n+      Map<String, String> newTableProperties = new HashMap<>();\n+      newTableProperties.put(TableCatalog.PROP_PROVIDER, \"iceberg\");\n+      newTableProperties.putAll(JavaConverters.mapAsJavaMapConverter(v1SourceTable().properties()).asJava());\n+      newTableProperties.putAll(tableLocationProperties(sourceTableLocation()));\n+      newTableProperties.putAll(additionalProperties());\n+\n+      stagedTable = destCatalog().stageCreate(Identifier.of(\n+          destTableName().namespace(),\n+          destTableName().name()),\n+          v1SourceTable().schema(),\n+          sourcePartitionSpec(),\n+          newTableProperties);\n+\n+      icebergTable = ((SparkTable) stagedTable).table();\n+\n+      if (!stagedTable.properties().containsKey(TableProperties.DEFAULT_NAME_MAPPING)) {\n+        assignDefaultTableNameMapping(icebergTable);\n+      }\n+\n+      String stagingLocation = stagedTable.properties().get(TableProperties.WRITE_METADATA_LOCATION);\n+\n+      LOG.info(\"Beginning migration of {} using metadata location {}\", sourceTableName(), stagingLocation);\n+\n+      Some<String> backupNamespace = Some.apply(backupIdentifier.namespace()[0]);\n+      TableIdentifier v1BackupIdentifier = new TableIdentifier(backupIdentifier.name(), backupNamespace);\n+      SparkTableUtil.importSparkTable(spark(), v1BackupIdentifier, icebergTable, stagingLocation);\n+\n+      stagedTable.commitStagedChanges();\n+      threw = false;\n+\n+    } catch (TableAlreadyExistsException tableAlreadyExistsException) {\n+      throw new IllegalArgumentException(\"Cannot migrate because a table was created with the same name as the \" +\n+          \"original was created after we renamed the original table to a backup identifier.\",\n+          tableAlreadyExistsException);\n+    } catch (NoSuchNamespaceException noSuchNamespaceException) {\n+      throw new IllegalArgumentException(\"Cannot migrate because the namespace for the table no longer exists after\" +", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e5636c7804ffd321253aa0d3a775e0c2a7c10e68"}, "originalPosition": 113}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4MjI5Njc2OnYy", "diffSide": "RIGHT", "path": "spark3/src/main/java/org/apache/iceberg/actions/Spark3MigrateAction.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxOTozODoyOVrOIBy2VQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxOTozODoyOVrOIBy2VQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODc1MjU5Nw==", "bodyText": "Precondition here as well.", "url": "https://github.com/apache/iceberg/pull/1525#discussion_r538752597", "createdAt": "2020-12-08T19:38:29Z", "author": {"login": "rdblue"}, "path": "spark3/src/main/java/org/apache/iceberg/actions/Spark3MigrateAction.java", "diffHunk": "@@ -0,0 +1,155 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.actions;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import org.apache.iceberg.Snapshot;\n+import org.apache.iceberg.SnapshotSummary;\n+import org.apache.iceberg.Table;\n+import org.apache.iceberg.TableProperties;\n+import org.apache.iceberg.spark.SparkSessionCatalog;\n+import org.apache.iceberg.spark.SparkTableUtil;\n+import org.apache.iceberg.spark.source.SparkTable;\n+import org.apache.spark.sql.SparkSession;\n+import org.apache.spark.sql.catalyst.TableIdentifier;\n+import org.apache.spark.sql.catalyst.analysis.NoSuchNamespaceException;\n+import org.apache.spark.sql.catalyst.analysis.NoSuchTableException;\n+import org.apache.spark.sql.catalyst.analysis.TableAlreadyExistsException;\n+import org.apache.spark.sql.connector.catalog.CatalogPlugin;\n+import org.apache.spark.sql.connector.catalog.Identifier;\n+import org.apache.spark.sql.connector.catalog.StagedTable;\n+import org.apache.spark.sql.connector.catalog.TableCatalog;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import scala.Some;\n+import scala.collection.JavaConverters;\n+\n+/**\n+ * Takes a Spark table in the sourceCatalog and attempts to transform it into an Iceberg\n+ * Table in the same location with the same identifier. Once complete the identifier which\n+ * previously referred to a non-iceberg table will refer to the newly migrated iceberg\n+ * table.\n+ */\n+class Spark3MigrateAction extends Spark3CreateAction {\n+  private static final Logger LOG = LoggerFactory.getLogger(Spark3MigrateAction.class);\n+  private static final String BACKUP_SUFFIX = \"_BACKUP_\";\n+\n+  Spark3MigrateAction(SparkSession spark, CatalogPlugin sourceCatalog, Identifier sourceTableName) {\n+    super(spark, sourceCatalog, sourceTableName, sourceCatalog, sourceTableName);\n+  }\n+\n+  @Override\n+  public Long execute() {\n+    Table icebergTable;\n+\n+    // Move source table to a new name, halting all modifications and allowing us to stage\n+    // the creation of a new Iceberg table in its place\n+    String backupName = sourceTableName().name() + BACKUP_SUFFIX;\n+    Identifier backupIdentifier = Identifier.of(sourceTableName().namespace(), backupName);\n+    try {\n+      destCatalog().renameTable(sourceTableName(), backupIdentifier);\n+    } catch (NoSuchTableException e) {\n+      throw new IllegalArgumentException(\"Cannot find table to migrate\", e);\n+    } catch (TableAlreadyExistsException e) {\n+      throw new IllegalArgumentException(\"Cannot rename migration source to backup name\", e);\n+    }\n+\n+    StagedTable stagedTable = null;\n+    boolean threw = true;\n+    try {\n+      Map<String, String> newTableProperties = new HashMap<>();\n+      newTableProperties.put(TableCatalog.PROP_PROVIDER, \"iceberg\");\n+      newTableProperties.putAll(JavaConverters.mapAsJavaMapConverter(v1SourceTable().properties()).asJava());\n+      newTableProperties.putAll(tableLocationProperties(sourceTableLocation()));\n+      newTableProperties.putAll(additionalProperties());\n+\n+      stagedTable = destCatalog().stageCreate(Identifier.of(\n+          destTableName().namespace(),\n+          destTableName().name()),\n+          v1SourceTable().schema(),\n+          sourcePartitionSpec(),\n+          newTableProperties);\n+\n+      icebergTable = ((SparkTable) stagedTable).table();\n+\n+      if (!stagedTable.properties().containsKey(TableProperties.DEFAULT_NAME_MAPPING)) {\n+        assignDefaultTableNameMapping(icebergTable);\n+      }\n+\n+      String stagingLocation = stagedTable.properties().get(TableProperties.WRITE_METADATA_LOCATION);\n+\n+      LOG.info(\"Beginning migration of {} using metadata location {}\", sourceTableName(), stagingLocation);\n+\n+      Some<String> backupNamespace = Some.apply(backupIdentifier.namespace()[0]);\n+      TableIdentifier v1BackupIdentifier = new TableIdentifier(backupIdentifier.name(), backupNamespace);\n+      SparkTableUtil.importSparkTable(spark(), v1BackupIdentifier, icebergTable, stagingLocation);\n+\n+      stagedTable.commitStagedChanges();\n+      threw = false;\n+\n+    } catch (TableAlreadyExistsException tableAlreadyExistsException) {\n+      throw new IllegalArgumentException(\"Cannot migrate because a table was created with the same name as the \" +\n+          \"original was created after we renamed the original table to a backup identifier.\",\n+          tableAlreadyExistsException);\n+    } catch (NoSuchNamespaceException noSuchNamespaceException) {\n+      throw new IllegalArgumentException(\"Cannot migrate because the namespace for the table no longer exists after\" +\n+          \"we renamed the original table to a backup identifier.\",\n+          noSuchNamespaceException);\n+    } finally {\n+\n+      if (threw) {\n+        LOG.error(\"Error when attempting perform migration changes, aborting table creation and restoring backup.\");\n+        try {\n+          destCatalog().renameTable(backupIdentifier, sourceTableName());\n+        } catch (NoSuchTableException nstException) {\n+          throw new IllegalArgumentException(\"Cannot restore backup, the backup cannot be found\", nstException);\n+        } catch (TableAlreadyExistsException taeException) {\n+          throw new IllegalArgumentException(String.format(\"Cannot restore backup, a table with the original name \" +\n+              \"exists. The backup can be found with the name %s\", backupIdentifier.toString()), taeException);\n+        }\n+\n+        try {\n+          if (stagedTable != null) {\n+            stagedTable.abortStagedChanges();\n+          }\n+        } catch (Exception abortException) {\n+          LOG.error(\"Unable to abort staged changes\", abortException);\n+        }\n+      }\n+    }\n+\n+    Snapshot snapshot = icebergTable.currentSnapshot();\n+    long numMigratedFiles = Long.valueOf(snapshot.summary().get(SnapshotSummary.TOTAL_DATA_FILES_PROP));\n+    LOG.info(\"Successfully loaded Iceberg metadata for {} files\", numMigratedFiles);\n+    return numMigratedFiles;\n+  }\n+\n+  @Override\n+  protected TableCatalog checkSourceCatalog(CatalogPlugin catalog) {\n+    // Currently the Import code relies on being able to look up the table in the session code\n+    if (!(catalog instanceof SparkSessionCatalog)) {\n+      throw new IllegalArgumentException(String.format(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e5636c7804ffd321253aa0d3a775e0c2a7c10e68"}, "originalPosition": 149}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4MjMwOTA3OnYy", "diffSide": "RIGHT", "path": "spark3/src/main/java/org/apache/iceberg/actions/Spark3SnapshotAction.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxOTo0MTozNFrOIBy9tg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxNjo0MToyNFrOICeW-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODc1NDQ4Ng==", "bodyText": "Since this logic is the same in both places, this could be moved into the assign function as ensureNameMappingPresent or something.", "url": "https://github.com/apache/iceberg/pull/1525#discussion_r538754486", "createdAt": "2020-12-08T19:41:34Z", "author": {"login": "rdblue"}, "path": "spark3/src/main/java/org/apache/iceberg/actions/Spark3SnapshotAction.java", "diffHunk": "@@ -0,0 +1,148 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.actions;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import org.apache.iceberg.Snapshot;\n+import org.apache.iceberg.SnapshotSummary;\n+import org.apache.iceberg.Table;\n+import org.apache.iceberg.TableProperties;\n+import org.apache.iceberg.relocated.com.google.common.base.Preconditions;\n+import org.apache.iceberg.spark.SparkTableUtil;\n+import org.apache.iceberg.spark.source.SparkTable;\n+import org.apache.spark.sql.SparkSession;\n+import org.apache.spark.sql.catalyst.TableIdentifier;\n+import org.apache.spark.sql.catalyst.analysis.NoSuchNamespaceException;\n+import org.apache.spark.sql.catalyst.analysis.TableAlreadyExistsException;\n+import org.apache.spark.sql.connector.catalog.CatalogPlugin;\n+import org.apache.spark.sql.connector.catalog.Identifier;\n+import org.apache.spark.sql.connector.catalog.StagedTable;\n+import org.apache.spark.sql.connector.catalog.TableCatalog;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import scala.collection.JavaConverters;\n+\n+/**\n+ * Creates a new Iceberg table based on a source Spark table. The new Iceberg table will\n+ * have a different data and metadata directory allowing it to exist independently of the\n+ * source table.\n+ */\n+class Spark3SnapshotAction extends Spark3CreateAction implements SnapshotAction {\n+  private static final Logger LOG = LoggerFactory.getLogger(Spark3SnapshotAction.class);\n+\n+  private String destTableLocation = null;\n+\n+  Spark3SnapshotAction(SparkSession spark, CatalogPlugin sourceCatalog,\n+                       Identifier sourceTableName, CatalogPlugin destCatalog,\n+                       Identifier destTableName) {\n+    super(spark, sourceCatalog, sourceTableName, destCatalog, destTableName);\n+  }\n+\n+  @Override\n+  public Long execute() {\n+    StagedTable stagedTable;\n+    Table icebergTable;\n+\n+    try {\n+      stagedTable = destCatalog().stageCreate(destTableName(), v1SourceTable().schema(),\n+          sourcePartitionSpec(), buildPropertyMap());\n+      icebergTable = ((SparkTable) stagedTable).table();\n+\n+      if (!icebergTable.properties().containsKey(TableProperties.DEFAULT_NAME_MAPPING)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e5636c7804ffd321253aa0d3a775e0c2a7c10e68"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTQ2NTQ2Nw==", "bodyText": "sgtm", "url": "https://github.com/apache/iceberg/pull/1525#discussion_r539465467", "createdAt": "2020-12-09T16:41:24Z", "author": {"login": "RussellSpitzer"}, "path": "spark3/src/main/java/org/apache/iceberg/actions/Spark3SnapshotAction.java", "diffHunk": "@@ -0,0 +1,148 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.actions;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import org.apache.iceberg.Snapshot;\n+import org.apache.iceberg.SnapshotSummary;\n+import org.apache.iceberg.Table;\n+import org.apache.iceberg.TableProperties;\n+import org.apache.iceberg.relocated.com.google.common.base.Preconditions;\n+import org.apache.iceberg.spark.SparkTableUtil;\n+import org.apache.iceberg.spark.source.SparkTable;\n+import org.apache.spark.sql.SparkSession;\n+import org.apache.spark.sql.catalyst.TableIdentifier;\n+import org.apache.spark.sql.catalyst.analysis.NoSuchNamespaceException;\n+import org.apache.spark.sql.catalyst.analysis.TableAlreadyExistsException;\n+import org.apache.spark.sql.connector.catalog.CatalogPlugin;\n+import org.apache.spark.sql.connector.catalog.Identifier;\n+import org.apache.spark.sql.connector.catalog.StagedTable;\n+import org.apache.spark.sql.connector.catalog.TableCatalog;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import scala.collection.JavaConverters;\n+\n+/**\n+ * Creates a new Iceberg table based on a source Spark table. The new Iceberg table will\n+ * have a different data and metadata directory allowing it to exist independently of the\n+ * source table.\n+ */\n+class Spark3SnapshotAction extends Spark3CreateAction implements SnapshotAction {\n+  private static final Logger LOG = LoggerFactory.getLogger(Spark3SnapshotAction.class);\n+\n+  private String destTableLocation = null;\n+\n+  Spark3SnapshotAction(SparkSession spark, CatalogPlugin sourceCatalog,\n+                       Identifier sourceTableName, CatalogPlugin destCatalog,\n+                       Identifier destTableName) {\n+    super(spark, sourceCatalog, sourceTableName, destCatalog, destTableName);\n+  }\n+\n+  @Override\n+  public Long execute() {\n+    StagedTable stagedTable;\n+    Table icebergTable;\n+\n+    try {\n+      stagedTable = destCatalog().stageCreate(destTableName(), v1SourceTable().schema(),\n+          sourcePartitionSpec(), buildPropertyMap());\n+      icebergTable = ((SparkTable) stagedTable).table();\n+\n+      if (!icebergTable.properties().containsKey(TableProperties.DEFAULT_NAME_MAPPING)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODc1NDQ4Ng=="}, "originalCommit": {"oid": "e5636c7804ffd321253aa0d3a775e0c2a7c10e68"}, "originalPosition": 69}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4MjMxODYwOnYy", "diffSide": "RIGHT", "path": "spark3/src/main/java/org/apache/iceberg/actions/Spark3SnapshotAction.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxOTo0Mzo0NVrOIBzDHQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxOTo0Mzo0NVrOIBzDHQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODc1NTg2OQ==", "bodyText": "Nit: prefer Maps.newHashMap().", "url": "https://github.com/apache/iceberg/pull/1525#discussion_r538755869", "createdAt": "2020-12-08T19:43:45Z", "author": {"login": "rdblue"}, "path": "spark3/src/main/java/org/apache/iceberg/actions/Spark3SnapshotAction.java", "diffHunk": "@@ -0,0 +1,148 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.actions;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import org.apache.iceberg.Snapshot;\n+import org.apache.iceberg.SnapshotSummary;\n+import org.apache.iceberg.Table;\n+import org.apache.iceberg.TableProperties;\n+import org.apache.iceberg.relocated.com.google.common.base.Preconditions;\n+import org.apache.iceberg.spark.SparkTableUtil;\n+import org.apache.iceberg.spark.source.SparkTable;\n+import org.apache.spark.sql.SparkSession;\n+import org.apache.spark.sql.catalyst.TableIdentifier;\n+import org.apache.spark.sql.catalyst.analysis.NoSuchNamespaceException;\n+import org.apache.spark.sql.catalyst.analysis.TableAlreadyExistsException;\n+import org.apache.spark.sql.connector.catalog.CatalogPlugin;\n+import org.apache.spark.sql.connector.catalog.Identifier;\n+import org.apache.spark.sql.connector.catalog.StagedTable;\n+import org.apache.spark.sql.connector.catalog.TableCatalog;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import scala.collection.JavaConverters;\n+\n+/**\n+ * Creates a new Iceberg table based on a source Spark table. The new Iceberg table will\n+ * have a different data and metadata directory allowing it to exist independently of the\n+ * source table.\n+ */\n+class Spark3SnapshotAction extends Spark3CreateAction implements SnapshotAction {\n+  private static final Logger LOG = LoggerFactory.getLogger(Spark3SnapshotAction.class);\n+\n+  private String destTableLocation = null;\n+\n+  Spark3SnapshotAction(SparkSession spark, CatalogPlugin sourceCatalog,\n+                       Identifier sourceTableName, CatalogPlugin destCatalog,\n+                       Identifier destTableName) {\n+    super(spark, sourceCatalog, sourceTableName, destCatalog, destTableName);\n+  }\n+\n+  @Override\n+  public Long execute() {\n+    StagedTable stagedTable;\n+    Table icebergTable;\n+\n+    try {\n+      stagedTable = destCatalog().stageCreate(destTableName(), v1SourceTable().schema(),\n+          sourcePartitionSpec(), buildPropertyMap());\n+      icebergTable = ((SparkTable) stagedTable).table();\n+\n+      if (!icebergTable.properties().containsKey(TableProperties.DEFAULT_NAME_MAPPING)) {\n+        assignDefaultTableNameMapping(icebergTable);\n+      }\n+    } catch (TableAlreadyExistsException taeException) {\n+      throw new IllegalArgumentException(\"Cannot create snapshot because a table already exists with that name\",\n+          taeException);\n+    } catch (NoSuchNamespaceException nsnException) {\n+      throw new IllegalArgumentException(\"Cannot create snapshot because the namespace given does not exist\",\n+          nsnException);\n+    }\n+\n+    boolean threw = true;\n+    try {\n+      String stagingLocation = icebergTable.location() + \"/\" + ICEBERG_METADATA_FOLDER;\n+      LOG.info(\"Beginning snapshot of {} to {} using metadata location {}\", sourceTableName(), destTableName(),\n+          stagingLocation);\n+\n+      TableIdentifier v1TableIdentifier = v1SourceTable().identifier();\n+      SparkTableUtil.importSparkTable(spark(), v1TableIdentifier, icebergTable, stagingLocation);\n+      stagedTable.commitStagedChanges();\n+      threw = false;\n+    } finally {\n+      if (threw) {\n+        LOG.error(\"Error when attempting to commit snapshot changes, rolling back\");\n+        if (stagedTable != null) {\n+          stagedTable.abortStagedChanges();\n+        }\n+      }\n+    }\n+\n+    long numMigratedFiles;\n+    Snapshot snapshot = icebergTable.currentSnapshot();\n+    numMigratedFiles = Long.valueOf(snapshot.summary().get(SnapshotSummary.TOTAL_DATA_FILES_PROP));\n+    LOG.info(\"Successfully loaded Iceberg metadata for {} files\", numMigratedFiles);\n+    return numMigratedFiles;\n+  }\n+\n+  private Map<String, String> buildPropertyMap() {\n+    Map<String, String> properties = new HashMap<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e5636c7804ffd321253aa0d3a775e0c2a7c10e68"}, "originalPosition": 107}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4MjMzNzg5OnYy", "diffSide": "RIGHT", "path": "spark3/src/main/java/org/apache/iceberg/actions/SparkActions.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxOTo0ODoyN1rOIBzOQQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxNzoyNjo1OVrOICgigw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODc1ODcyMQ==", "bodyText": "There are quite a few try/catch blocks for this. Maybe add a version that doesn't throw ParseException and pass in a context string to form the error message. Also, the error message should include the table name that failed parsing:\npublic static CatalogAndIdentifier catalogAndIdentifier(String description, SparkSession spark, String tableName) {\n  try {\n    return catalogAndIdentifier(spark, tableName);\n  } catch (ParseException e) {\n    throw new IllegalArgumentException(\"Cannot parse \" + description + \": \" + tableName, e);\n  }\n}", "url": "https://github.com/apache/iceberg/pull/1525#discussion_r538758721", "createdAt": "2020-12-08T19:48:27Z", "author": {"login": "rdblue"}, "path": "spark3/src/main/java/org/apache/iceberg/actions/SparkActions.java", "diffHunk": "@@ -20,10 +20,54 @@\n package org.apache.iceberg.actions;\n \n import org.apache.iceberg.Table;\n+import org.apache.iceberg.relocated.com.google.common.base.Preconditions;\n+import org.apache.iceberg.spark.Spark3Util;\n import org.apache.spark.sql.SparkSession;\n+import org.apache.spark.sql.catalyst.parser.ParseException;\n \n-class SparkActions extends Actions {\n+public class SparkActions extends Actions {\n   protected SparkActions(SparkSession spark, Table table) {\n     super(spark, table);\n   }\n+\n+  public static CreateAction migrate(String tableName) {\n+    return migrate(SparkSession.active(), tableName);\n+  }\n+\n+  public static CreateAction migrate(SparkSession spark, String tableName) {\n+    Spark3Util.CatalogAndIdentifier catalogAndIdentifier;\n+    try {\n+      catalogAndIdentifier = Spark3Util.catalogAndIdentifier(spark, tableName);\n+    } catch (ParseException e) {\n+      throw new IllegalArgumentException(\"Cannot parse migrate target\", e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e5636c7804ffd321253aa0d3a775e0c2a7c10e68"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTUwMTE4Nw==", "bodyText": "Switched to using the method added by Anton in the other PR", "url": "https://github.com/apache/iceberg/pull/1525#discussion_r539501187", "createdAt": "2020-12-09T17:26:59Z", "author": {"login": "RussellSpitzer"}, "path": "spark3/src/main/java/org/apache/iceberg/actions/SparkActions.java", "diffHunk": "@@ -20,10 +20,54 @@\n package org.apache.iceberg.actions;\n \n import org.apache.iceberg.Table;\n+import org.apache.iceberg.relocated.com.google.common.base.Preconditions;\n+import org.apache.iceberg.spark.Spark3Util;\n import org.apache.spark.sql.SparkSession;\n+import org.apache.spark.sql.catalyst.parser.ParseException;\n \n-class SparkActions extends Actions {\n+public class SparkActions extends Actions {\n   protected SparkActions(SparkSession spark, Table table) {\n     super(spark, table);\n   }\n+\n+  public static CreateAction migrate(String tableName) {\n+    return migrate(SparkSession.active(), tableName);\n+  }\n+\n+  public static CreateAction migrate(SparkSession spark, String tableName) {\n+    Spark3Util.CatalogAndIdentifier catalogAndIdentifier;\n+    try {\n+      catalogAndIdentifier = Spark3Util.catalogAndIdentifier(spark, tableName);\n+    } catch (ParseException e) {\n+      throw new IllegalArgumentException(\"Cannot parse migrate target\", e);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODc1ODcyMQ=="}, "originalCommit": {"oid": "e5636c7804ffd321253aa0d3a775e0c2a7c10e68"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4OTIwMTAwOnYy", "diffSide": "RIGHT", "path": "spark3/src/main/java/org/apache/iceberg/actions/Spark3CreateAction.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQwMToxNzo0N1rOICw8Gg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQwMToxNzo0N1rOICw8Gg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTc2OTg4Mg==", "bodyText": "Nit: indentation is off.", "url": "https://github.com/apache/iceberg/pull/1525#discussion_r539769882", "createdAt": "2020-12-10T01:17:47Z", "author": {"login": "rdblue"}, "path": "spark3/src/main/java/org/apache/iceberg/actions/Spark3CreateAction.java", "diffHunk": "@@ -0,0 +1,187 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.actions;\n+\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Set;\n+import org.apache.iceberg.Table;\n+import org.apache.iceberg.TableProperties;\n+import org.apache.iceberg.mapping.MappingUtil;\n+import org.apache.iceberg.mapping.NameMapping;\n+import org.apache.iceberg.mapping.NameMappingParser;\n+import org.apache.iceberg.relocated.com.google.common.base.Preconditions;\n+import org.apache.iceberg.relocated.com.google.common.collect.ImmutableList;\n+import org.apache.iceberg.relocated.com.google.common.collect.ImmutableSet;\n+import org.apache.iceberg.relocated.com.google.common.collect.Maps;\n+import org.apache.iceberg.spark.SparkCatalog;\n+import org.apache.iceberg.spark.SparkSessionCatalog;\n+import org.apache.spark.sql.SparkSession;\n+import org.apache.spark.sql.catalyst.analysis.NoSuchNamespaceException;\n+import org.apache.spark.sql.catalyst.analysis.NoSuchTableException;\n+import org.apache.spark.sql.catalyst.analysis.TableAlreadyExistsException;\n+import org.apache.spark.sql.catalyst.catalog.CatalogTable;\n+import org.apache.spark.sql.catalyst.catalog.CatalogUtils;\n+import org.apache.spark.sql.connector.catalog.CatalogPlugin;\n+import org.apache.spark.sql.connector.catalog.Identifier;\n+import org.apache.spark.sql.connector.catalog.StagedTable;\n+import org.apache.spark.sql.connector.catalog.StagingTableCatalog;\n+import org.apache.spark.sql.connector.catalog.TableCatalog;\n+import org.apache.spark.sql.connector.catalog.V1Table;\n+import org.apache.spark.sql.connector.expressions.Transform;\n+import org.apache.spark.sql.types.StructType;\n+\n+abstract class Spark3CreateAction implements CreateAction {\n+  private static final Set<String> ALLOWED_SOURCES = ImmutableSet.of(\"parquet\", \"avro\", \"orc\", \"hive\");\n+  protected static final String LOCATION = \"location\";\n+  protected static final String ICEBERG_METADATA_FOLDER = \"metadata\";\n+  protected static final List<String> EXCLUDED_PROPERTIES =\n+      ImmutableList.of(\"path\", \"transient_lastDdlTime\", \"serialization.format\");\n+\n+  private final SparkSession spark;\n+\n+  // Source Fields\n+  private final V1Table sourceTable;\n+  private final CatalogTable sourceCatalogTable;\n+  private final String sourceTableLocation;\n+  private final TableCatalog sourceCatalog;\n+  private final Identifier sourceTableIdent;\n+\n+  // Destination Fields\n+  private final StagingTableCatalog destCatalog;\n+  private final Identifier destTableIdent;\n+\n+  // Optional Parameters for destination\n+  private final Map<String, String> additionalProperties = Maps.newHashMap();\n+\n+  Spark3CreateAction(SparkSession spark, CatalogPlugin sourceCatalog, Identifier sourceTableIdent,\n+                     CatalogPlugin destCatalog, Identifier destTableIdent) {\n+\n+    this.spark = spark;\n+    this.sourceCatalog = checkSourceCatalog(sourceCatalog);\n+    this.sourceTableIdent = sourceTableIdent;\n+    this.destCatalog = checkDestinationCatalog(destCatalog);\n+    this.destTableIdent = destTableIdent;\n+\n+    try {\n+      this.sourceTable = (V1Table) this.sourceCatalog.loadTable(sourceTableIdent);\n+      this.sourceCatalogTable = sourceTable.v1Table();\n+    } catch (NoSuchTableException e) {\n+      throw new IllegalArgumentException(String.format(\"Cannot not find source table %s\", sourceTableIdent), e);\n+    } catch (ClassCastException e) {\n+      throw new IllegalArgumentException(String.format(\"Cannot use non-v1 table %s as a source\", sourceTableIdent), e);\n+    }\n+    validateSourceTable();\n+\n+    this.sourceTableLocation = CatalogUtils.URIToString(sourceCatalogTable.storage().locationUri().get());\n+  }\n+\n+  @Override\n+  public CreateAction withProperties(Map<String, String> properties) {\n+    this.additionalProperties.putAll(properties);\n+    return this;\n+  }\n+\n+  @Override\n+  public CreateAction withProperty(String key, String value) {\n+    this.additionalProperties.put(key, value);\n+    return this;\n+  }\n+\n+  protected SparkSession spark() {\n+    return spark;\n+  }\n+\n+  protected String sourceTableLocation() {\n+    return sourceTableLocation;\n+  }\n+\n+  protected CatalogTable v1SourceTable() {\n+    return sourceCatalogTable;\n+  }\n+\n+  protected TableCatalog sourceCatalog() {\n+    return sourceCatalog;\n+  }\n+\n+  protected Identifier sourceTableIdent() {\n+    return sourceTableIdent;\n+  }\n+\n+  protected StagingTableCatalog destCatalog() {\n+    return destCatalog;\n+  }\n+\n+  protected Identifier destTableIdent() {\n+    return destTableIdent;\n+  }\n+\n+  protected Map<String, String> additionalProperties() {\n+    return additionalProperties;\n+  }\n+\n+  private void validateSourceTable() {\n+    String sourceTableProvider = sourceCatalogTable.provider().get().toLowerCase(Locale.ROOT);\n+    Preconditions.checkArgument(ALLOWED_SOURCES.contains(sourceTableProvider),\n+          \"Cannot create an Iceberg table from source provider: %s\", sourceTableProvider);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bf50967bb9ab9344b3c242c274cc9fab58c8b115"}, "originalPosition": 144}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4OTIwNDUzOnYy", "diffSide": "RIGHT", "path": "spark3/src/main/java/org/apache/iceberg/actions/Spark3CreateAction.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQwMToxOToyNVrOICw-CA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQwMTo0NToyNVrOICxkjQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTc3MDM3Ng==", "bodyText": "I thought this was going to be changed to the Iceberg NoSuchNamespaceException? Same with the other one. Can we throw the right Iceberg exception so that callers can catch them?", "url": "https://github.com/apache/iceberg/pull/1525#discussion_r539770376", "createdAt": "2020-12-10T01:19:25Z", "author": {"login": "rdblue"}, "path": "spark3/src/main/java/org/apache/iceberg/actions/Spark3CreateAction.java", "diffHunk": "@@ -0,0 +1,187 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.actions;\n+\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Set;\n+import org.apache.iceberg.Table;\n+import org.apache.iceberg.TableProperties;\n+import org.apache.iceberg.mapping.MappingUtil;\n+import org.apache.iceberg.mapping.NameMapping;\n+import org.apache.iceberg.mapping.NameMappingParser;\n+import org.apache.iceberg.relocated.com.google.common.base.Preconditions;\n+import org.apache.iceberg.relocated.com.google.common.collect.ImmutableList;\n+import org.apache.iceberg.relocated.com.google.common.collect.ImmutableSet;\n+import org.apache.iceberg.relocated.com.google.common.collect.Maps;\n+import org.apache.iceberg.spark.SparkCatalog;\n+import org.apache.iceberg.spark.SparkSessionCatalog;\n+import org.apache.spark.sql.SparkSession;\n+import org.apache.spark.sql.catalyst.analysis.NoSuchNamespaceException;\n+import org.apache.spark.sql.catalyst.analysis.NoSuchTableException;\n+import org.apache.spark.sql.catalyst.analysis.TableAlreadyExistsException;\n+import org.apache.spark.sql.catalyst.catalog.CatalogTable;\n+import org.apache.spark.sql.catalyst.catalog.CatalogUtils;\n+import org.apache.spark.sql.connector.catalog.CatalogPlugin;\n+import org.apache.spark.sql.connector.catalog.Identifier;\n+import org.apache.spark.sql.connector.catalog.StagedTable;\n+import org.apache.spark.sql.connector.catalog.StagingTableCatalog;\n+import org.apache.spark.sql.connector.catalog.TableCatalog;\n+import org.apache.spark.sql.connector.catalog.V1Table;\n+import org.apache.spark.sql.connector.expressions.Transform;\n+import org.apache.spark.sql.types.StructType;\n+\n+abstract class Spark3CreateAction implements CreateAction {\n+  private static final Set<String> ALLOWED_SOURCES = ImmutableSet.of(\"parquet\", \"avro\", \"orc\", \"hive\");\n+  protected static final String LOCATION = \"location\";\n+  protected static final String ICEBERG_METADATA_FOLDER = \"metadata\";\n+  protected static final List<String> EXCLUDED_PROPERTIES =\n+      ImmutableList.of(\"path\", \"transient_lastDdlTime\", \"serialization.format\");\n+\n+  private final SparkSession spark;\n+\n+  // Source Fields\n+  private final V1Table sourceTable;\n+  private final CatalogTable sourceCatalogTable;\n+  private final String sourceTableLocation;\n+  private final TableCatalog sourceCatalog;\n+  private final Identifier sourceTableIdent;\n+\n+  // Destination Fields\n+  private final StagingTableCatalog destCatalog;\n+  private final Identifier destTableIdent;\n+\n+  // Optional Parameters for destination\n+  private final Map<String, String> additionalProperties = Maps.newHashMap();\n+\n+  Spark3CreateAction(SparkSession spark, CatalogPlugin sourceCatalog, Identifier sourceTableIdent,\n+                     CatalogPlugin destCatalog, Identifier destTableIdent) {\n+\n+    this.spark = spark;\n+    this.sourceCatalog = checkSourceCatalog(sourceCatalog);\n+    this.sourceTableIdent = sourceTableIdent;\n+    this.destCatalog = checkDestinationCatalog(destCatalog);\n+    this.destTableIdent = destTableIdent;\n+\n+    try {\n+      this.sourceTable = (V1Table) this.sourceCatalog.loadTable(sourceTableIdent);\n+      this.sourceCatalogTable = sourceTable.v1Table();\n+    } catch (NoSuchTableException e) {\n+      throw new IllegalArgumentException(String.format(\"Cannot not find source table %s\", sourceTableIdent), e);\n+    } catch (ClassCastException e) {\n+      throw new IllegalArgumentException(String.format(\"Cannot use non-v1 table %s as a source\", sourceTableIdent), e);\n+    }\n+    validateSourceTable();\n+\n+    this.sourceTableLocation = CatalogUtils.URIToString(sourceCatalogTable.storage().locationUri().get());\n+  }\n+\n+  @Override\n+  public CreateAction withProperties(Map<String, String> properties) {\n+    this.additionalProperties.putAll(properties);\n+    return this;\n+  }\n+\n+  @Override\n+  public CreateAction withProperty(String key, String value) {\n+    this.additionalProperties.put(key, value);\n+    return this;\n+  }\n+\n+  protected SparkSession spark() {\n+    return spark;\n+  }\n+\n+  protected String sourceTableLocation() {\n+    return sourceTableLocation;\n+  }\n+\n+  protected CatalogTable v1SourceTable() {\n+    return sourceCatalogTable;\n+  }\n+\n+  protected TableCatalog sourceCatalog() {\n+    return sourceCatalog;\n+  }\n+\n+  protected Identifier sourceTableIdent() {\n+    return sourceTableIdent;\n+  }\n+\n+  protected StagingTableCatalog destCatalog() {\n+    return destCatalog;\n+  }\n+\n+  protected Identifier destTableIdent() {\n+    return destTableIdent;\n+  }\n+\n+  protected Map<String, String> additionalProperties() {\n+    return additionalProperties;\n+  }\n+\n+  private void validateSourceTable() {\n+    String sourceTableProvider = sourceCatalogTable.provider().get().toLowerCase(Locale.ROOT);\n+    Preconditions.checkArgument(ALLOWED_SOURCES.contains(sourceTableProvider),\n+          \"Cannot create an Iceberg table from source provider: %s\", sourceTableProvider);\n+    Preconditions.checkArgument(!sourceCatalogTable.storage().locationUri().isEmpty(),\n+        \"Cannot create an Iceberg table from a source without an explicit location\");\n+  }\n+\n+  private StagingTableCatalog checkDestinationCatalog(CatalogPlugin catalog) {\n+    Preconditions.checkArgument(catalog instanceof SparkSessionCatalog || catalog instanceof SparkCatalog,\n+        \"Cannot create Iceberg table in non Iceberg Catalog. \" +\n+            \"Catalog %s was of class %s but %s or %s are required\",\n+        catalog.name(), catalog.getClass(), SparkSessionCatalog.class.getName(), SparkCatalog.class.getName());\n+\n+    return (StagingTableCatalog) catalog;\n+  }\n+\n+  protected StagedTable stageDestTable() {\n+    try {\n+      Map<String, String> props = targetTableProps();\n+      StructType schema = sourceTable.schema();\n+      Transform[] partitioning = sourceTable.partitioning();\n+      return destCatalog.stageCreate(destTableIdent, schema, partitioning, props);\n+    } catch (NoSuchNamespaceException e) {\n+      throw new IllegalArgumentException(\"Cannot create a new table in a namespace which does not exist\", e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bf50967bb9ab9344b3c242c274cc9fab58c8b115"}, "originalPosition": 165}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTc3MDk3NA==", "bodyText": "And include the namespace that does not exist.", "url": "https://github.com/apache/iceberg/pull/1525#discussion_r539770974", "createdAt": "2020-12-10T01:20:58Z", "author": {"login": "rdblue"}, "path": "spark3/src/main/java/org/apache/iceberg/actions/Spark3CreateAction.java", "diffHunk": "@@ -0,0 +1,187 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.actions;\n+\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Set;\n+import org.apache.iceberg.Table;\n+import org.apache.iceberg.TableProperties;\n+import org.apache.iceberg.mapping.MappingUtil;\n+import org.apache.iceberg.mapping.NameMapping;\n+import org.apache.iceberg.mapping.NameMappingParser;\n+import org.apache.iceberg.relocated.com.google.common.base.Preconditions;\n+import org.apache.iceberg.relocated.com.google.common.collect.ImmutableList;\n+import org.apache.iceberg.relocated.com.google.common.collect.ImmutableSet;\n+import org.apache.iceberg.relocated.com.google.common.collect.Maps;\n+import org.apache.iceberg.spark.SparkCatalog;\n+import org.apache.iceberg.spark.SparkSessionCatalog;\n+import org.apache.spark.sql.SparkSession;\n+import org.apache.spark.sql.catalyst.analysis.NoSuchNamespaceException;\n+import org.apache.spark.sql.catalyst.analysis.NoSuchTableException;\n+import org.apache.spark.sql.catalyst.analysis.TableAlreadyExistsException;\n+import org.apache.spark.sql.catalyst.catalog.CatalogTable;\n+import org.apache.spark.sql.catalyst.catalog.CatalogUtils;\n+import org.apache.spark.sql.connector.catalog.CatalogPlugin;\n+import org.apache.spark.sql.connector.catalog.Identifier;\n+import org.apache.spark.sql.connector.catalog.StagedTable;\n+import org.apache.spark.sql.connector.catalog.StagingTableCatalog;\n+import org.apache.spark.sql.connector.catalog.TableCatalog;\n+import org.apache.spark.sql.connector.catalog.V1Table;\n+import org.apache.spark.sql.connector.expressions.Transform;\n+import org.apache.spark.sql.types.StructType;\n+\n+abstract class Spark3CreateAction implements CreateAction {\n+  private static final Set<String> ALLOWED_SOURCES = ImmutableSet.of(\"parquet\", \"avro\", \"orc\", \"hive\");\n+  protected static final String LOCATION = \"location\";\n+  protected static final String ICEBERG_METADATA_FOLDER = \"metadata\";\n+  protected static final List<String> EXCLUDED_PROPERTIES =\n+      ImmutableList.of(\"path\", \"transient_lastDdlTime\", \"serialization.format\");\n+\n+  private final SparkSession spark;\n+\n+  // Source Fields\n+  private final V1Table sourceTable;\n+  private final CatalogTable sourceCatalogTable;\n+  private final String sourceTableLocation;\n+  private final TableCatalog sourceCatalog;\n+  private final Identifier sourceTableIdent;\n+\n+  // Destination Fields\n+  private final StagingTableCatalog destCatalog;\n+  private final Identifier destTableIdent;\n+\n+  // Optional Parameters for destination\n+  private final Map<String, String> additionalProperties = Maps.newHashMap();\n+\n+  Spark3CreateAction(SparkSession spark, CatalogPlugin sourceCatalog, Identifier sourceTableIdent,\n+                     CatalogPlugin destCatalog, Identifier destTableIdent) {\n+\n+    this.spark = spark;\n+    this.sourceCatalog = checkSourceCatalog(sourceCatalog);\n+    this.sourceTableIdent = sourceTableIdent;\n+    this.destCatalog = checkDestinationCatalog(destCatalog);\n+    this.destTableIdent = destTableIdent;\n+\n+    try {\n+      this.sourceTable = (V1Table) this.sourceCatalog.loadTable(sourceTableIdent);\n+      this.sourceCatalogTable = sourceTable.v1Table();\n+    } catch (NoSuchTableException e) {\n+      throw new IllegalArgumentException(String.format(\"Cannot not find source table %s\", sourceTableIdent), e);\n+    } catch (ClassCastException e) {\n+      throw new IllegalArgumentException(String.format(\"Cannot use non-v1 table %s as a source\", sourceTableIdent), e);\n+    }\n+    validateSourceTable();\n+\n+    this.sourceTableLocation = CatalogUtils.URIToString(sourceCatalogTable.storage().locationUri().get());\n+  }\n+\n+  @Override\n+  public CreateAction withProperties(Map<String, String> properties) {\n+    this.additionalProperties.putAll(properties);\n+    return this;\n+  }\n+\n+  @Override\n+  public CreateAction withProperty(String key, String value) {\n+    this.additionalProperties.put(key, value);\n+    return this;\n+  }\n+\n+  protected SparkSession spark() {\n+    return spark;\n+  }\n+\n+  protected String sourceTableLocation() {\n+    return sourceTableLocation;\n+  }\n+\n+  protected CatalogTable v1SourceTable() {\n+    return sourceCatalogTable;\n+  }\n+\n+  protected TableCatalog sourceCatalog() {\n+    return sourceCatalog;\n+  }\n+\n+  protected Identifier sourceTableIdent() {\n+    return sourceTableIdent;\n+  }\n+\n+  protected StagingTableCatalog destCatalog() {\n+    return destCatalog;\n+  }\n+\n+  protected Identifier destTableIdent() {\n+    return destTableIdent;\n+  }\n+\n+  protected Map<String, String> additionalProperties() {\n+    return additionalProperties;\n+  }\n+\n+  private void validateSourceTable() {\n+    String sourceTableProvider = sourceCatalogTable.provider().get().toLowerCase(Locale.ROOT);\n+    Preconditions.checkArgument(ALLOWED_SOURCES.contains(sourceTableProvider),\n+          \"Cannot create an Iceberg table from source provider: %s\", sourceTableProvider);\n+    Preconditions.checkArgument(!sourceCatalogTable.storage().locationUri().isEmpty(),\n+        \"Cannot create an Iceberg table from a source without an explicit location\");\n+  }\n+\n+  private StagingTableCatalog checkDestinationCatalog(CatalogPlugin catalog) {\n+    Preconditions.checkArgument(catalog instanceof SparkSessionCatalog || catalog instanceof SparkCatalog,\n+        \"Cannot create Iceberg table in non Iceberg Catalog. \" +\n+            \"Catalog %s was of class %s but %s or %s are required\",\n+        catalog.name(), catalog.getClass(), SparkSessionCatalog.class.getName(), SparkCatalog.class.getName());\n+\n+    return (StagingTableCatalog) catalog;\n+  }\n+\n+  protected StagedTable stageDestTable() {\n+    try {\n+      Map<String, String> props = targetTableProps();\n+      StructType schema = sourceTable.schema();\n+      Transform[] partitioning = sourceTable.partitioning();\n+      return destCatalog.stageCreate(destTableIdent, schema, partitioning, props);\n+    } catch (NoSuchNamespaceException e) {\n+      throw new IllegalArgumentException(\"Cannot create a new table in a namespace which does not exist\", e);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTc3MDM3Ng=="}, "originalCommit": {"oid": "bf50967bb9ab9344b3c242c274cc9fab58c8b115"}, "originalPosition": 165}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTc4MDIzNw==", "bodyText": "Sorry I didn't know what you meant by \"iceberg exception\" i meant to ask but forgot", "url": "https://github.com/apache/iceberg/pull/1525#discussion_r539780237", "createdAt": "2020-12-10T01:45:25Z", "author": {"login": "RussellSpitzer"}, "path": "spark3/src/main/java/org/apache/iceberg/actions/Spark3CreateAction.java", "diffHunk": "@@ -0,0 +1,187 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.actions;\n+\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Set;\n+import org.apache.iceberg.Table;\n+import org.apache.iceberg.TableProperties;\n+import org.apache.iceberg.mapping.MappingUtil;\n+import org.apache.iceberg.mapping.NameMapping;\n+import org.apache.iceberg.mapping.NameMappingParser;\n+import org.apache.iceberg.relocated.com.google.common.base.Preconditions;\n+import org.apache.iceberg.relocated.com.google.common.collect.ImmutableList;\n+import org.apache.iceberg.relocated.com.google.common.collect.ImmutableSet;\n+import org.apache.iceberg.relocated.com.google.common.collect.Maps;\n+import org.apache.iceberg.spark.SparkCatalog;\n+import org.apache.iceberg.spark.SparkSessionCatalog;\n+import org.apache.spark.sql.SparkSession;\n+import org.apache.spark.sql.catalyst.analysis.NoSuchNamespaceException;\n+import org.apache.spark.sql.catalyst.analysis.NoSuchTableException;\n+import org.apache.spark.sql.catalyst.analysis.TableAlreadyExistsException;\n+import org.apache.spark.sql.catalyst.catalog.CatalogTable;\n+import org.apache.spark.sql.catalyst.catalog.CatalogUtils;\n+import org.apache.spark.sql.connector.catalog.CatalogPlugin;\n+import org.apache.spark.sql.connector.catalog.Identifier;\n+import org.apache.spark.sql.connector.catalog.StagedTable;\n+import org.apache.spark.sql.connector.catalog.StagingTableCatalog;\n+import org.apache.spark.sql.connector.catalog.TableCatalog;\n+import org.apache.spark.sql.connector.catalog.V1Table;\n+import org.apache.spark.sql.connector.expressions.Transform;\n+import org.apache.spark.sql.types.StructType;\n+\n+abstract class Spark3CreateAction implements CreateAction {\n+  private static final Set<String> ALLOWED_SOURCES = ImmutableSet.of(\"parquet\", \"avro\", \"orc\", \"hive\");\n+  protected static final String LOCATION = \"location\";\n+  protected static final String ICEBERG_METADATA_FOLDER = \"metadata\";\n+  protected static final List<String> EXCLUDED_PROPERTIES =\n+      ImmutableList.of(\"path\", \"transient_lastDdlTime\", \"serialization.format\");\n+\n+  private final SparkSession spark;\n+\n+  // Source Fields\n+  private final V1Table sourceTable;\n+  private final CatalogTable sourceCatalogTable;\n+  private final String sourceTableLocation;\n+  private final TableCatalog sourceCatalog;\n+  private final Identifier sourceTableIdent;\n+\n+  // Destination Fields\n+  private final StagingTableCatalog destCatalog;\n+  private final Identifier destTableIdent;\n+\n+  // Optional Parameters for destination\n+  private final Map<String, String> additionalProperties = Maps.newHashMap();\n+\n+  Spark3CreateAction(SparkSession spark, CatalogPlugin sourceCatalog, Identifier sourceTableIdent,\n+                     CatalogPlugin destCatalog, Identifier destTableIdent) {\n+\n+    this.spark = spark;\n+    this.sourceCatalog = checkSourceCatalog(sourceCatalog);\n+    this.sourceTableIdent = sourceTableIdent;\n+    this.destCatalog = checkDestinationCatalog(destCatalog);\n+    this.destTableIdent = destTableIdent;\n+\n+    try {\n+      this.sourceTable = (V1Table) this.sourceCatalog.loadTable(sourceTableIdent);\n+      this.sourceCatalogTable = sourceTable.v1Table();\n+    } catch (NoSuchTableException e) {\n+      throw new IllegalArgumentException(String.format(\"Cannot not find source table %s\", sourceTableIdent), e);\n+    } catch (ClassCastException e) {\n+      throw new IllegalArgumentException(String.format(\"Cannot use non-v1 table %s as a source\", sourceTableIdent), e);\n+    }\n+    validateSourceTable();\n+\n+    this.sourceTableLocation = CatalogUtils.URIToString(sourceCatalogTable.storage().locationUri().get());\n+  }\n+\n+  @Override\n+  public CreateAction withProperties(Map<String, String> properties) {\n+    this.additionalProperties.putAll(properties);\n+    return this;\n+  }\n+\n+  @Override\n+  public CreateAction withProperty(String key, String value) {\n+    this.additionalProperties.put(key, value);\n+    return this;\n+  }\n+\n+  protected SparkSession spark() {\n+    return spark;\n+  }\n+\n+  protected String sourceTableLocation() {\n+    return sourceTableLocation;\n+  }\n+\n+  protected CatalogTable v1SourceTable() {\n+    return sourceCatalogTable;\n+  }\n+\n+  protected TableCatalog sourceCatalog() {\n+    return sourceCatalog;\n+  }\n+\n+  protected Identifier sourceTableIdent() {\n+    return sourceTableIdent;\n+  }\n+\n+  protected StagingTableCatalog destCatalog() {\n+    return destCatalog;\n+  }\n+\n+  protected Identifier destTableIdent() {\n+    return destTableIdent;\n+  }\n+\n+  protected Map<String, String> additionalProperties() {\n+    return additionalProperties;\n+  }\n+\n+  private void validateSourceTable() {\n+    String sourceTableProvider = sourceCatalogTable.provider().get().toLowerCase(Locale.ROOT);\n+    Preconditions.checkArgument(ALLOWED_SOURCES.contains(sourceTableProvider),\n+          \"Cannot create an Iceberg table from source provider: %s\", sourceTableProvider);\n+    Preconditions.checkArgument(!sourceCatalogTable.storage().locationUri().isEmpty(),\n+        \"Cannot create an Iceberg table from a source without an explicit location\");\n+  }\n+\n+  private StagingTableCatalog checkDestinationCatalog(CatalogPlugin catalog) {\n+    Preconditions.checkArgument(catalog instanceof SparkSessionCatalog || catalog instanceof SparkCatalog,\n+        \"Cannot create Iceberg table in non Iceberg Catalog. \" +\n+            \"Catalog %s was of class %s but %s or %s are required\",\n+        catalog.name(), catalog.getClass(), SparkSessionCatalog.class.getName(), SparkCatalog.class.getName());\n+\n+    return (StagingTableCatalog) catalog;\n+  }\n+\n+  protected StagedTable stageDestTable() {\n+    try {\n+      Map<String, String> props = targetTableProps();\n+      StructType schema = sourceTable.schema();\n+      Transform[] partitioning = sourceTable.partitioning();\n+      return destCatalog.stageCreate(destTableIdent, schema, partitioning, props);\n+    } catch (NoSuchNamespaceException e) {\n+      throw new IllegalArgumentException(\"Cannot create a new table in a namespace which does not exist\", e);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTc3MDM3Ng=="}, "originalCommit": {"oid": "bf50967bb9ab9344b3c242c274cc9fab58c8b115"}, "originalPosition": 165}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4OTIwNjc5OnYy", "diffSide": "RIGHT", "path": "spark3/src/main/java/org/apache/iceberg/actions/Spark3MigrateAction.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQwMToyMDowOVrOICw_QQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQwMToyMDowOVrOICw_QQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTc3MDY4OQ==", "bodyText": "Same here. I think these should be the right Iceberg exceptions. And, the exception message here should include the table identifier that could not be found.", "url": "https://github.com/apache/iceberg/pull/1525#discussion_r539770689", "createdAt": "2020-12-10T01:20:09Z", "author": {"login": "rdblue"}, "path": "spark3/src/main/java/org/apache/iceberg/actions/Spark3MigrateAction.java", "diffHunk": "@@ -0,0 +1,137 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.actions;\n+\n+import java.util.Map;\n+import org.apache.iceberg.Snapshot;\n+import org.apache.iceberg.SnapshotSummary;\n+import org.apache.iceberg.Table;\n+import org.apache.iceberg.relocated.com.google.common.base.Preconditions;\n+import org.apache.iceberg.relocated.com.google.common.collect.Maps;\n+import org.apache.iceberg.spark.SparkSessionCatalog;\n+import org.apache.iceberg.spark.SparkTableUtil;\n+import org.apache.iceberg.spark.source.SparkTable;\n+import org.apache.spark.sql.SparkSession;\n+import org.apache.spark.sql.catalyst.TableIdentifier;\n+import org.apache.spark.sql.catalyst.analysis.NoSuchTableException;\n+import org.apache.spark.sql.catalyst.analysis.TableAlreadyExistsException;\n+import org.apache.spark.sql.connector.catalog.CatalogPlugin;\n+import org.apache.spark.sql.connector.catalog.Identifier;\n+import org.apache.spark.sql.connector.catalog.StagedTable;\n+import org.apache.spark.sql.connector.catalog.TableCatalog;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import scala.Some;\n+import scala.collection.JavaConverters;\n+\n+/**\n+ * Takes a Spark table in the sourceCatalog and attempts to transform it into an Iceberg\n+ * Table in the same location with the same identifier. Once complete the identifier which\n+ * previously referred to a non-iceberg table will refer to the newly migrated iceberg\n+ * table.\n+ */\n+class Spark3MigrateAction extends Spark3CreateAction {\n+  private static final Logger LOG = LoggerFactory.getLogger(Spark3MigrateAction.class);\n+  private static final String BACKUP_SUFFIX = \"_BACKUP_\";\n+\n+  Spark3MigrateAction(SparkSession spark, CatalogPlugin sourceCatalog, Identifier sourceTableName) {\n+    super(spark, sourceCatalog, sourceTableName, sourceCatalog, sourceTableName);\n+  }\n+\n+  @Override\n+  public Long execute() {\n+    Table icebergTable;\n+\n+    // Move source table to a new name, halting all modifications and allowing us to stage\n+    // the creation of a new Iceberg table in its place\n+    String backupName = sourceTableIdent().name() + BACKUP_SUFFIX;\n+    Identifier backupIdentifier = Identifier.of(sourceTableIdent().namespace(), backupName);\n+    try {\n+      destCatalog().renameTable(sourceTableIdent(), backupIdentifier);\n+    } catch (NoSuchTableException e) {\n+      throw new IllegalArgumentException(\"Cannot find table to migrate\", e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bf50967bb9ab9344b3c242c274cc9fab58c8b115"}, "originalPosition": 69}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4OTIwNzg5OnYy", "diffSide": "RIGHT", "path": "spark3/src/main/java/org/apache/iceberg/actions/Spark3MigrateAction.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQwMToyMDozOVrOICw_7Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQwMToyMDozOVrOICw_7Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTc3MDg2MQ==", "bodyText": "This should similarly include the name of the table that already exists.", "url": "https://github.com/apache/iceberg/pull/1525#discussion_r539770861", "createdAt": "2020-12-10T01:20:39Z", "author": {"login": "rdblue"}, "path": "spark3/src/main/java/org/apache/iceberg/actions/Spark3MigrateAction.java", "diffHunk": "@@ -0,0 +1,137 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.actions;\n+\n+import java.util.Map;\n+import org.apache.iceberg.Snapshot;\n+import org.apache.iceberg.SnapshotSummary;\n+import org.apache.iceberg.Table;\n+import org.apache.iceberg.relocated.com.google.common.base.Preconditions;\n+import org.apache.iceberg.relocated.com.google.common.collect.Maps;\n+import org.apache.iceberg.spark.SparkSessionCatalog;\n+import org.apache.iceberg.spark.SparkTableUtil;\n+import org.apache.iceberg.spark.source.SparkTable;\n+import org.apache.spark.sql.SparkSession;\n+import org.apache.spark.sql.catalyst.TableIdentifier;\n+import org.apache.spark.sql.catalyst.analysis.NoSuchTableException;\n+import org.apache.spark.sql.catalyst.analysis.TableAlreadyExistsException;\n+import org.apache.spark.sql.connector.catalog.CatalogPlugin;\n+import org.apache.spark.sql.connector.catalog.Identifier;\n+import org.apache.spark.sql.connector.catalog.StagedTable;\n+import org.apache.spark.sql.connector.catalog.TableCatalog;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import scala.Some;\n+import scala.collection.JavaConverters;\n+\n+/**\n+ * Takes a Spark table in the sourceCatalog and attempts to transform it into an Iceberg\n+ * Table in the same location with the same identifier. Once complete the identifier which\n+ * previously referred to a non-iceberg table will refer to the newly migrated iceberg\n+ * table.\n+ */\n+class Spark3MigrateAction extends Spark3CreateAction {\n+  private static final Logger LOG = LoggerFactory.getLogger(Spark3MigrateAction.class);\n+  private static final String BACKUP_SUFFIX = \"_BACKUP_\";\n+\n+  Spark3MigrateAction(SparkSession spark, CatalogPlugin sourceCatalog, Identifier sourceTableName) {\n+    super(spark, sourceCatalog, sourceTableName, sourceCatalog, sourceTableName);\n+  }\n+\n+  @Override\n+  public Long execute() {\n+    Table icebergTable;\n+\n+    // Move source table to a new name, halting all modifications and allowing us to stage\n+    // the creation of a new Iceberg table in its place\n+    String backupName = sourceTableIdent().name() + BACKUP_SUFFIX;\n+    Identifier backupIdentifier = Identifier.of(sourceTableIdent().namespace(), backupName);\n+    try {\n+      destCatalog().renameTable(sourceTableIdent(), backupIdentifier);\n+    } catch (NoSuchTableException e) {\n+      throw new IllegalArgumentException(\"Cannot find table to migrate\", e);\n+    } catch (TableAlreadyExistsException e) {\n+      throw new IllegalArgumentException(\"Cannot rename migration source to backup name\", e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bf50967bb9ab9344b3c242c274cc9fab58c8b115"}, "originalPosition": 71}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4OTIwOTEwOnYy", "diffSide": "RIGHT", "path": "spark3/src/main/java/org/apache/iceberg/actions/Spark3CreateAction.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQwMToyMToxMFrOICxAog==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQwMToyMToxMFrOICxAog==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTc3MTA0Mg==", "bodyText": "Please include the destination table name in the error message when this is updated, too.", "url": "https://github.com/apache/iceberg/pull/1525#discussion_r539771042", "createdAt": "2020-12-10T01:21:10Z", "author": {"login": "rdblue"}, "path": "spark3/src/main/java/org/apache/iceberg/actions/Spark3CreateAction.java", "diffHunk": "@@ -0,0 +1,187 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.actions;\n+\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Set;\n+import org.apache.iceberg.Table;\n+import org.apache.iceberg.TableProperties;\n+import org.apache.iceberg.mapping.MappingUtil;\n+import org.apache.iceberg.mapping.NameMapping;\n+import org.apache.iceberg.mapping.NameMappingParser;\n+import org.apache.iceberg.relocated.com.google.common.base.Preconditions;\n+import org.apache.iceberg.relocated.com.google.common.collect.ImmutableList;\n+import org.apache.iceberg.relocated.com.google.common.collect.ImmutableSet;\n+import org.apache.iceberg.relocated.com.google.common.collect.Maps;\n+import org.apache.iceberg.spark.SparkCatalog;\n+import org.apache.iceberg.spark.SparkSessionCatalog;\n+import org.apache.spark.sql.SparkSession;\n+import org.apache.spark.sql.catalyst.analysis.NoSuchNamespaceException;\n+import org.apache.spark.sql.catalyst.analysis.NoSuchTableException;\n+import org.apache.spark.sql.catalyst.analysis.TableAlreadyExistsException;\n+import org.apache.spark.sql.catalyst.catalog.CatalogTable;\n+import org.apache.spark.sql.catalyst.catalog.CatalogUtils;\n+import org.apache.spark.sql.connector.catalog.CatalogPlugin;\n+import org.apache.spark.sql.connector.catalog.Identifier;\n+import org.apache.spark.sql.connector.catalog.StagedTable;\n+import org.apache.spark.sql.connector.catalog.StagingTableCatalog;\n+import org.apache.spark.sql.connector.catalog.TableCatalog;\n+import org.apache.spark.sql.connector.catalog.V1Table;\n+import org.apache.spark.sql.connector.expressions.Transform;\n+import org.apache.spark.sql.types.StructType;\n+\n+abstract class Spark3CreateAction implements CreateAction {\n+  private static final Set<String> ALLOWED_SOURCES = ImmutableSet.of(\"parquet\", \"avro\", \"orc\", \"hive\");\n+  protected static final String LOCATION = \"location\";\n+  protected static final String ICEBERG_METADATA_FOLDER = \"metadata\";\n+  protected static final List<String> EXCLUDED_PROPERTIES =\n+      ImmutableList.of(\"path\", \"transient_lastDdlTime\", \"serialization.format\");\n+\n+  private final SparkSession spark;\n+\n+  // Source Fields\n+  private final V1Table sourceTable;\n+  private final CatalogTable sourceCatalogTable;\n+  private final String sourceTableLocation;\n+  private final TableCatalog sourceCatalog;\n+  private final Identifier sourceTableIdent;\n+\n+  // Destination Fields\n+  private final StagingTableCatalog destCatalog;\n+  private final Identifier destTableIdent;\n+\n+  // Optional Parameters for destination\n+  private final Map<String, String> additionalProperties = Maps.newHashMap();\n+\n+  Spark3CreateAction(SparkSession spark, CatalogPlugin sourceCatalog, Identifier sourceTableIdent,\n+                     CatalogPlugin destCatalog, Identifier destTableIdent) {\n+\n+    this.spark = spark;\n+    this.sourceCatalog = checkSourceCatalog(sourceCatalog);\n+    this.sourceTableIdent = sourceTableIdent;\n+    this.destCatalog = checkDestinationCatalog(destCatalog);\n+    this.destTableIdent = destTableIdent;\n+\n+    try {\n+      this.sourceTable = (V1Table) this.sourceCatalog.loadTable(sourceTableIdent);\n+      this.sourceCatalogTable = sourceTable.v1Table();\n+    } catch (NoSuchTableException e) {\n+      throw new IllegalArgumentException(String.format(\"Cannot not find source table %s\", sourceTableIdent), e);\n+    } catch (ClassCastException e) {\n+      throw new IllegalArgumentException(String.format(\"Cannot use non-v1 table %s as a source\", sourceTableIdent), e);\n+    }\n+    validateSourceTable();\n+\n+    this.sourceTableLocation = CatalogUtils.URIToString(sourceCatalogTable.storage().locationUri().get());\n+  }\n+\n+  @Override\n+  public CreateAction withProperties(Map<String, String> properties) {\n+    this.additionalProperties.putAll(properties);\n+    return this;\n+  }\n+\n+  @Override\n+  public CreateAction withProperty(String key, String value) {\n+    this.additionalProperties.put(key, value);\n+    return this;\n+  }\n+\n+  protected SparkSession spark() {\n+    return spark;\n+  }\n+\n+  protected String sourceTableLocation() {\n+    return sourceTableLocation;\n+  }\n+\n+  protected CatalogTable v1SourceTable() {\n+    return sourceCatalogTable;\n+  }\n+\n+  protected TableCatalog sourceCatalog() {\n+    return sourceCatalog;\n+  }\n+\n+  protected Identifier sourceTableIdent() {\n+    return sourceTableIdent;\n+  }\n+\n+  protected StagingTableCatalog destCatalog() {\n+    return destCatalog;\n+  }\n+\n+  protected Identifier destTableIdent() {\n+    return destTableIdent;\n+  }\n+\n+  protected Map<String, String> additionalProperties() {\n+    return additionalProperties;\n+  }\n+\n+  private void validateSourceTable() {\n+    String sourceTableProvider = sourceCatalogTable.provider().get().toLowerCase(Locale.ROOT);\n+    Preconditions.checkArgument(ALLOWED_SOURCES.contains(sourceTableProvider),\n+          \"Cannot create an Iceberg table from source provider: %s\", sourceTableProvider);\n+    Preconditions.checkArgument(!sourceCatalogTable.storage().locationUri().isEmpty(),\n+        \"Cannot create an Iceberg table from a source without an explicit location\");\n+  }\n+\n+  private StagingTableCatalog checkDestinationCatalog(CatalogPlugin catalog) {\n+    Preconditions.checkArgument(catalog instanceof SparkSessionCatalog || catalog instanceof SparkCatalog,\n+        \"Cannot create Iceberg table in non Iceberg Catalog. \" +\n+            \"Catalog %s was of class %s but %s or %s are required\",\n+        catalog.name(), catalog.getClass(), SparkSessionCatalog.class.getName(), SparkCatalog.class.getName());\n+\n+    return (StagingTableCatalog) catalog;\n+  }\n+\n+  protected StagedTable stageDestTable() {\n+    try {\n+      Map<String, String> props = targetTableProps();\n+      StructType schema = sourceTable.schema();\n+      Transform[] partitioning = sourceTable.partitioning();\n+      return destCatalog.stageCreate(destTableIdent, schema, partitioning, props);\n+    } catch (NoSuchNamespaceException e) {\n+      throw new IllegalArgumentException(\"Cannot create a new table in a namespace which does not exist\", e);\n+    } catch (TableAlreadyExistsException e) {\n+      throw new IllegalArgumentException(\"Destination table already exists\", e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bf50967bb9ab9344b3c242c274cc9fab58c8b115"}, "originalPosition": 167}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4OTIxNDg3OnYy", "diffSide": "RIGHT", "path": "spark3/src/main/java/org/apache/iceberg/actions/Spark3CreateAction.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQwMToyMzoxMFrOICxD0w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxNjowOToxNVrOIDQ-Ig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTc3MTg1OQ==", "bodyText": "The return value of this needs to be a SparkTable for both uses, so I think it should return a SparkTable to avoid unchecked casts in the callers.", "url": "https://github.com/apache/iceberg/pull/1525#discussion_r539771859", "createdAt": "2020-12-10T01:23:10Z", "author": {"login": "rdblue"}, "path": "spark3/src/main/java/org/apache/iceberg/actions/Spark3CreateAction.java", "diffHunk": "@@ -0,0 +1,187 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.actions;\n+\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Set;\n+import org.apache.iceberg.Table;\n+import org.apache.iceberg.TableProperties;\n+import org.apache.iceberg.mapping.MappingUtil;\n+import org.apache.iceberg.mapping.NameMapping;\n+import org.apache.iceberg.mapping.NameMappingParser;\n+import org.apache.iceberg.relocated.com.google.common.base.Preconditions;\n+import org.apache.iceberg.relocated.com.google.common.collect.ImmutableList;\n+import org.apache.iceberg.relocated.com.google.common.collect.ImmutableSet;\n+import org.apache.iceberg.relocated.com.google.common.collect.Maps;\n+import org.apache.iceberg.spark.SparkCatalog;\n+import org.apache.iceberg.spark.SparkSessionCatalog;\n+import org.apache.spark.sql.SparkSession;\n+import org.apache.spark.sql.catalyst.analysis.NoSuchNamespaceException;\n+import org.apache.spark.sql.catalyst.analysis.NoSuchTableException;\n+import org.apache.spark.sql.catalyst.analysis.TableAlreadyExistsException;\n+import org.apache.spark.sql.catalyst.catalog.CatalogTable;\n+import org.apache.spark.sql.catalyst.catalog.CatalogUtils;\n+import org.apache.spark.sql.connector.catalog.CatalogPlugin;\n+import org.apache.spark.sql.connector.catalog.Identifier;\n+import org.apache.spark.sql.connector.catalog.StagedTable;\n+import org.apache.spark.sql.connector.catalog.StagingTableCatalog;\n+import org.apache.spark.sql.connector.catalog.TableCatalog;\n+import org.apache.spark.sql.connector.catalog.V1Table;\n+import org.apache.spark.sql.connector.expressions.Transform;\n+import org.apache.spark.sql.types.StructType;\n+\n+abstract class Spark3CreateAction implements CreateAction {\n+  private static final Set<String> ALLOWED_SOURCES = ImmutableSet.of(\"parquet\", \"avro\", \"orc\", \"hive\");\n+  protected static final String LOCATION = \"location\";\n+  protected static final String ICEBERG_METADATA_FOLDER = \"metadata\";\n+  protected static final List<String> EXCLUDED_PROPERTIES =\n+      ImmutableList.of(\"path\", \"transient_lastDdlTime\", \"serialization.format\");\n+\n+  private final SparkSession spark;\n+\n+  // Source Fields\n+  private final V1Table sourceTable;\n+  private final CatalogTable sourceCatalogTable;\n+  private final String sourceTableLocation;\n+  private final TableCatalog sourceCatalog;\n+  private final Identifier sourceTableIdent;\n+\n+  // Destination Fields\n+  private final StagingTableCatalog destCatalog;\n+  private final Identifier destTableIdent;\n+\n+  // Optional Parameters for destination\n+  private final Map<String, String> additionalProperties = Maps.newHashMap();\n+\n+  Spark3CreateAction(SparkSession spark, CatalogPlugin sourceCatalog, Identifier sourceTableIdent,\n+                     CatalogPlugin destCatalog, Identifier destTableIdent) {\n+\n+    this.spark = spark;\n+    this.sourceCatalog = checkSourceCatalog(sourceCatalog);\n+    this.sourceTableIdent = sourceTableIdent;\n+    this.destCatalog = checkDestinationCatalog(destCatalog);\n+    this.destTableIdent = destTableIdent;\n+\n+    try {\n+      this.sourceTable = (V1Table) this.sourceCatalog.loadTable(sourceTableIdent);\n+      this.sourceCatalogTable = sourceTable.v1Table();\n+    } catch (NoSuchTableException e) {\n+      throw new IllegalArgumentException(String.format(\"Cannot not find source table %s\", sourceTableIdent), e);\n+    } catch (ClassCastException e) {\n+      throw new IllegalArgumentException(String.format(\"Cannot use non-v1 table %s as a source\", sourceTableIdent), e);\n+    }\n+    validateSourceTable();\n+\n+    this.sourceTableLocation = CatalogUtils.URIToString(sourceCatalogTable.storage().locationUri().get());\n+  }\n+\n+  @Override\n+  public CreateAction withProperties(Map<String, String> properties) {\n+    this.additionalProperties.putAll(properties);\n+    return this;\n+  }\n+\n+  @Override\n+  public CreateAction withProperty(String key, String value) {\n+    this.additionalProperties.put(key, value);\n+    return this;\n+  }\n+\n+  protected SparkSession spark() {\n+    return spark;\n+  }\n+\n+  protected String sourceTableLocation() {\n+    return sourceTableLocation;\n+  }\n+\n+  protected CatalogTable v1SourceTable() {\n+    return sourceCatalogTable;\n+  }\n+\n+  protected TableCatalog sourceCatalog() {\n+    return sourceCatalog;\n+  }\n+\n+  protected Identifier sourceTableIdent() {\n+    return sourceTableIdent;\n+  }\n+\n+  protected StagingTableCatalog destCatalog() {\n+    return destCatalog;\n+  }\n+\n+  protected Identifier destTableIdent() {\n+    return destTableIdent;\n+  }\n+\n+  protected Map<String, String> additionalProperties() {\n+    return additionalProperties;\n+  }\n+\n+  private void validateSourceTable() {\n+    String sourceTableProvider = sourceCatalogTable.provider().get().toLowerCase(Locale.ROOT);\n+    Preconditions.checkArgument(ALLOWED_SOURCES.contains(sourceTableProvider),\n+          \"Cannot create an Iceberg table from source provider: %s\", sourceTableProvider);\n+    Preconditions.checkArgument(!sourceCatalogTable.storage().locationUri().isEmpty(),\n+        \"Cannot create an Iceberg table from a source without an explicit location\");\n+  }\n+\n+  private StagingTableCatalog checkDestinationCatalog(CatalogPlugin catalog) {\n+    Preconditions.checkArgument(catalog instanceof SparkSessionCatalog || catalog instanceof SparkCatalog,\n+        \"Cannot create Iceberg table in non Iceberg Catalog. \" +\n+            \"Catalog %s was of class %s but %s or %s are required\",\n+        catalog.name(), catalog.getClass(), SparkSessionCatalog.class.getName(), SparkCatalog.class.getName());\n+\n+    return (StagingTableCatalog) catalog;\n+  }\n+\n+  protected StagedTable stageDestTable() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bf50967bb9ab9344b3c242c274cc9fab58c8b115"}, "originalPosition": 158}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTc4Nzc0NA==", "bodyText": "It also needs to be StagedTable :/ since we need to commit changes (and possible abort changes) so I think we either need a cast to StagedTable or to SparkTable", "url": "https://github.com/apache/iceberg/pull/1525#discussion_r539787744", "createdAt": "2020-12-10T02:03:56Z", "author": {"login": "RussellSpitzer"}, "path": "spark3/src/main/java/org/apache/iceberg/actions/Spark3CreateAction.java", "diffHunk": "@@ -0,0 +1,187 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.actions;\n+\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Set;\n+import org.apache.iceberg.Table;\n+import org.apache.iceberg.TableProperties;\n+import org.apache.iceberg.mapping.MappingUtil;\n+import org.apache.iceberg.mapping.NameMapping;\n+import org.apache.iceberg.mapping.NameMappingParser;\n+import org.apache.iceberg.relocated.com.google.common.base.Preconditions;\n+import org.apache.iceberg.relocated.com.google.common.collect.ImmutableList;\n+import org.apache.iceberg.relocated.com.google.common.collect.ImmutableSet;\n+import org.apache.iceberg.relocated.com.google.common.collect.Maps;\n+import org.apache.iceberg.spark.SparkCatalog;\n+import org.apache.iceberg.spark.SparkSessionCatalog;\n+import org.apache.spark.sql.SparkSession;\n+import org.apache.spark.sql.catalyst.analysis.NoSuchNamespaceException;\n+import org.apache.spark.sql.catalyst.analysis.NoSuchTableException;\n+import org.apache.spark.sql.catalyst.analysis.TableAlreadyExistsException;\n+import org.apache.spark.sql.catalyst.catalog.CatalogTable;\n+import org.apache.spark.sql.catalyst.catalog.CatalogUtils;\n+import org.apache.spark.sql.connector.catalog.CatalogPlugin;\n+import org.apache.spark.sql.connector.catalog.Identifier;\n+import org.apache.spark.sql.connector.catalog.StagedTable;\n+import org.apache.spark.sql.connector.catalog.StagingTableCatalog;\n+import org.apache.spark.sql.connector.catalog.TableCatalog;\n+import org.apache.spark.sql.connector.catalog.V1Table;\n+import org.apache.spark.sql.connector.expressions.Transform;\n+import org.apache.spark.sql.types.StructType;\n+\n+abstract class Spark3CreateAction implements CreateAction {\n+  private static final Set<String> ALLOWED_SOURCES = ImmutableSet.of(\"parquet\", \"avro\", \"orc\", \"hive\");\n+  protected static final String LOCATION = \"location\";\n+  protected static final String ICEBERG_METADATA_FOLDER = \"metadata\";\n+  protected static final List<String> EXCLUDED_PROPERTIES =\n+      ImmutableList.of(\"path\", \"transient_lastDdlTime\", \"serialization.format\");\n+\n+  private final SparkSession spark;\n+\n+  // Source Fields\n+  private final V1Table sourceTable;\n+  private final CatalogTable sourceCatalogTable;\n+  private final String sourceTableLocation;\n+  private final TableCatalog sourceCatalog;\n+  private final Identifier sourceTableIdent;\n+\n+  // Destination Fields\n+  private final StagingTableCatalog destCatalog;\n+  private final Identifier destTableIdent;\n+\n+  // Optional Parameters for destination\n+  private final Map<String, String> additionalProperties = Maps.newHashMap();\n+\n+  Spark3CreateAction(SparkSession spark, CatalogPlugin sourceCatalog, Identifier sourceTableIdent,\n+                     CatalogPlugin destCatalog, Identifier destTableIdent) {\n+\n+    this.spark = spark;\n+    this.sourceCatalog = checkSourceCatalog(sourceCatalog);\n+    this.sourceTableIdent = sourceTableIdent;\n+    this.destCatalog = checkDestinationCatalog(destCatalog);\n+    this.destTableIdent = destTableIdent;\n+\n+    try {\n+      this.sourceTable = (V1Table) this.sourceCatalog.loadTable(sourceTableIdent);\n+      this.sourceCatalogTable = sourceTable.v1Table();\n+    } catch (NoSuchTableException e) {\n+      throw new IllegalArgumentException(String.format(\"Cannot not find source table %s\", sourceTableIdent), e);\n+    } catch (ClassCastException e) {\n+      throw new IllegalArgumentException(String.format(\"Cannot use non-v1 table %s as a source\", sourceTableIdent), e);\n+    }\n+    validateSourceTable();\n+\n+    this.sourceTableLocation = CatalogUtils.URIToString(sourceCatalogTable.storage().locationUri().get());\n+  }\n+\n+  @Override\n+  public CreateAction withProperties(Map<String, String> properties) {\n+    this.additionalProperties.putAll(properties);\n+    return this;\n+  }\n+\n+  @Override\n+  public CreateAction withProperty(String key, String value) {\n+    this.additionalProperties.put(key, value);\n+    return this;\n+  }\n+\n+  protected SparkSession spark() {\n+    return spark;\n+  }\n+\n+  protected String sourceTableLocation() {\n+    return sourceTableLocation;\n+  }\n+\n+  protected CatalogTable v1SourceTable() {\n+    return sourceCatalogTable;\n+  }\n+\n+  protected TableCatalog sourceCatalog() {\n+    return sourceCatalog;\n+  }\n+\n+  protected Identifier sourceTableIdent() {\n+    return sourceTableIdent;\n+  }\n+\n+  protected StagingTableCatalog destCatalog() {\n+    return destCatalog;\n+  }\n+\n+  protected Identifier destTableIdent() {\n+    return destTableIdent;\n+  }\n+\n+  protected Map<String, String> additionalProperties() {\n+    return additionalProperties;\n+  }\n+\n+  private void validateSourceTable() {\n+    String sourceTableProvider = sourceCatalogTable.provider().get().toLowerCase(Locale.ROOT);\n+    Preconditions.checkArgument(ALLOWED_SOURCES.contains(sourceTableProvider),\n+          \"Cannot create an Iceberg table from source provider: %s\", sourceTableProvider);\n+    Preconditions.checkArgument(!sourceCatalogTable.storage().locationUri().isEmpty(),\n+        \"Cannot create an Iceberg table from a source without an explicit location\");\n+  }\n+\n+  private StagingTableCatalog checkDestinationCatalog(CatalogPlugin catalog) {\n+    Preconditions.checkArgument(catalog instanceof SparkSessionCatalog || catalog instanceof SparkCatalog,\n+        \"Cannot create Iceberg table in non Iceberg Catalog. \" +\n+            \"Catalog %s was of class %s but %s or %s are required\",\n+        catalog.name(), catalog.getClass(), SparkSessionCatalog.class.getName(), SparkCatalog.class.getName());\n+\n+    return (StagingTableCatalog) catalog;\n+  }\n+\n+  protected StagedTable stageDestTable() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTc3MTg1OQ=="}, "originalCommit": {"oid": "bf50967bb9ab9344b3c242c274cc9fab58c8b115"}, "originalPosition": 158}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDI4NzQxNQ==", "bodyText": "Can it be StagedSparkTable that also extends SparkTable?", "url": "https://github.com/apache/iceberg/pull/1525#discussion_r540287415", "createdAt": "2020-12-10T15:59:58Z", "author": {"login": "aokolnychyi"}, "path": "spark3/src/main/java/org/apache/iceberg/actions/Spark3CreateAction.java", "diffHunk": "@@ -0,0 +1,187 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.actions;\n+\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Set;\n+import org.apache.iceberg.Table;\n+import org.apache.iceberg.TableProperties;\n+import org.apache.iceberg.mapping.MappingUtil;\n+import org.apache.iceberg.mapping.NameMapping;\n+import org.apache.iceberg.mapping.NameMappingParser;\n+import org.apache.iceberg.relocated.com.google.common.base.Preconditions;\n+import org.apache.iceberg.relocated.com.google.common.collect.ImmutableList;\n+import org.apache.iceberg.relocated.com.google.common.collect.ImmutableSet;\n+import org.apache.iceberg.relocated.com.google.common.collect.Maps;\n+import org.apache.iceberg.spark.SparkCatalog;\n+import org.apache.iceberg.spark.SparkSessionCatalog;\n+import org.apache.spark.sql.SparkSession;\n+import org.apache.spark.sql.catalyst.analysis.NoSuchNamespaceException;\n+import org.apache.spark.sql.catalyst.analysis.NoSuchTableException;\n+import org.apache.spark.sql.catalyst.analysis.TableAlreadyExistsException;\n+import org.apache.spark.sql.catalyst.catalog.CatalogTable;\n+import org.apache.spark.sql.catalyst.catalog.CatalogUtils;\n+import org.apache.spark.sql.connector.catalog.CatalogPlugin;\n+import org.apache.spark.sql.connector.catalog.Identifier;\n+import org.apache.spark.sql.connector.catalog.StagedTable;\n+import org.apache.spark.sql.connector.catalog.StagingTableCatalog;\n+import org.apache.spark.sql.connector.catalog.TableCatalog;\n+import org.apache.spark.sql.connector.catalog.V1Table;\n+import org.apache.spark.sql.connector.expressions.Transform;\n+import org.apache.spark.sql.types.StructType;\n+\n+abstract class Spark3CreateAction implements CreateAction {\n+  private static final Set<String> ALLOWED_SOURCES = ImmutableSet.of(\"parquet\", \"avro\", \"orc\", \"hive\");\n+  protected static final String LOCATION = \"location\";\n+  protected static final String ICEBERG_METADATA_FOLDER = \"metadata\";\n+  protected static final List<String> EXCLUDED_PROPERTIES =\n+      ImmutableList.of(\"path\", \"transient_lastDdlTime\", \"serialization.format\");\n+\n+  private final SparkSession spark;\n+\n+  // Source Fields\n+  private final V1Table sourceTable;\n+  private final CatalogTable sourceCatalogTable;\n+  private final String sourceTableLocation;\n+  private final TableCatalog sourceCatalog;\n+  private final Identifier sourceTableIdent;\n+\n+  // Destination Fields\n+  private final StagingTableCatalog destCatalog;\n+  private final Identifier destTableIdent;\n+\n+  // Optional Parameters for destination\n+  private final Map<String, String> additionalProperties = Maps.newHashMap();\n+\n+  Spark3CreateAction(SparkSession spark, CatalogPlugin sourceCatalog, Identifier sourceTableIdent,\n+                     CatalogPlugin destCatalog, Identifier destTableIdent) {\n+\n+    this.spark = spark;\n+    this.sourceCatalog = checkSourceCatalog(sourceCatalog);\n+    this.sourceTableIdent = sourceTableIdent;\n+    this.destCatalog = checkDestinationCatalog(destCatalog);\n+    this.destTableIdent = destTableIdent;\n+\n+    try {\n+      this.sourceTable = (V1Table) this.sourceCatalog.loadTable(sourceTableIdent);\n+      this.sourceCatalogTable = sourceTable.v1Table();\n+    } catch (NoSuchTableException e) {\n+      throw new IllegalArgumentException(String.format(\"Cannot not find source table %s\", sourceTableIdent), e);\n+    } catch (ClassCastException e) {\n+      throw new IllegalArgumentException(String.format(\"Cannot use non-v1 table %s as a source\", sourceTableIdent), e);\n+    }\n+    validateSourceTable();\n+\n+    this.sourceTableLocation = CatalogUtils.URIToString(sourceCatalogTable.storage().locationUri().get());\n+  }\n+\n+  @Override\n+  public CreateAction withProperties(Map<String, String> properties) {\n+    this.additionalProperties.putAll(properties);\n+    return this;\n+  }\n+\n+  @Override\n+  public CreateAction withProperty(String key, String value) {\n+    this.additionalProperties.put(key, value);\n+    return this;\n+  }\n+\n+  protected SparkSession spark() {\n+    return spark;\n+  }\n+\n+  protected String sourceTableLocation() {\n+    return sourceTableLocation;\n+  }\n+\n+  protected CatalogTable v1SourceTable() {\n+    return sourceCatalogTable;\n+  }\n+\n+  protected TableCatalog sourceCatalog() {\n+    return sourceCatalog;\n+  }\n+\n+  protected Identifier sourceTableIdent() {\n+    return sourceTableIdent;\n+  }\n+\n+  protected StagingTableCatalog destCatalog() {\n+    return destCatalog;\n+  }\n+\n+  protected Identifier destTableIdent() {\n+    return destTableIdent;\n+  }\n+\n+  protected Map<String, String> additionalProperties() {\n+    return additionalProperties;\n+  }\n+\n+  private void validateSourceTable() {\n+    String sourceTableProvider = sourceCatalogTable.provider().get().toLowerCase(Locale.ROOT);\n+    Preconditions.checkArgument(ALLOWED_SOURCES.contains(sourceTableProvider),\n+          \"Cannot create an Iceberg table from source provider: %s\", sourceTableProvider);\n+    Preconditions.checkArgument(!sourceCatalogTable.storage().locationUri().isEmpty(),\n+        \"Cannot create an Iceberg table from a source without an explicit location\");\n+  }\n+\n+  private StagingTableCatalog checkDestinationCatalog(CatalogPlugin catalog) {\n+    Preconditions.checkArgument(catalog instanceof SparkSessionCatalog || catalog instanceof SparkCatalog,\n+        \"Cannot create Iceberg table in non Iceberg Catalog. \" +\n+            \"Catalog %s was of class %s but %s or %s are required\",\n+        catalog.name(), catalog.getClass(), SparkSessionCatalog.class.getName(), SparkCatalog.class.getName());\n+\n+    return (StagingTableCatalog) catalog;\n+  }\n+\n+  protected StagedTable stageDestTable() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTc3MTg1OQ=="}, "originalCommit": {"oid": "bf50967bb9ab9344b3c242c274cc9fab58c8b115"}, "originalPosition": 158}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDI5NDY5MA==", "bodyText": "Didn't see we had that, yeah we should use that", "url": "https://github.com/apache/iceberg/pull/1525#discussion_r540294690", "createdAt": "2020-12-10T16:09:15Z", "author": {"login": "RussellSpitzer"}, "path": "spark3/src/main/java/org/apache/iceberg/actions/Spark3CreateAction.java", "diffHunk": "@@ -0,0 +1,187 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.actions;\n+\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Set;\n+import org.apache.iceberg.Table;\n+import org.apache.iceberg.TableProperties;\n+import org.apache.iceberg.mapping.MappingUtil;\n+import org.apache.iceberg.mapping.NameMapping;\n+import org.apache.iceberg.mapping.NameMappingParser;\n+import org.apache.iceberg.relocated.com.google.common.base.Preconditions;\n+import org.apache.iceberg.relocated.com.google.common.collect.ImmutableList;\n+import org.apache.iceberg.relocated.com.google.common.collect.ImmutableSet;\n+import org.apache.iceberg.relocated.com.google.common.collect.Maps;\n+import org.apache.iceberg.spark.SparkCatalog;\n+import org.apache.iceberg.spark.SparkSessionCatalog;\n+import org.apache.spark.sql.SparkSession;\n+import org.apache.spark.sql.catalyst.analysis.NoSuchNamespaceException;\n+import org.apache.spark.sql.catalyst.analysis.NoSuchTableException;\n+import org.apache.spark.sql.catalyst.analysis.TableAlreadyExistsException;\n+import org.apache.spark.sql.catalyst.catalog.CatalogTable;\n+import org.apache.spark.sql.catalyst.catalog.CatalogUtils;\n+import org.apache.spark.sql.connector.catalog.CatalogPlugin;\n+import org.apache.spark.sql.connector.catalog.Identifier;\n+import org.apache.spark.sql.connector.catalog.StagedTable;\n+import org.apache.spark.sql.connector.catalog.StagingTableCatalog;\n+import org.apache.spark.sql.connector.catalog.TableCatalog;\n+import org.apache.spark.sql.connector.catalog.V1Table;\n+import org.apache.spark.sql.connector.expressions.Transform;\n+import org.apache.spark.sql.types.StructType;\n+\n+abstract class Spark3CreateAction implements CreateAction {\n+  private static final Set<String> ALLOWED_SOURCES = ImmutableSet.of(\"parquet\", \"avro\", \"orc\", \"hive\");\n+  protected static final String LOCATION = \"location\";\n+  protected static final String ICEBERG_METADATA_FOLDER = \"metadata\";\n+  protected static final List<String> EXCLUDED_PROPERTIES =\n+      ImmutableList.of(\"path\", \"transient_lastDdlTime\", \"serialization.format\");\n+\n+  private final SparkSession spark;\n+\n+  // Source Fields\n+  private final V1Table sourceTable;\n+  private final CatalogTable sourceCatalogTable;\n+  private final String sourceTableLocation;\n+  private final TableCatalog sourceCatalog;\n+  private final Identifier sourceTableIdent;\n+\n+  // Destination Fields\n+  private final StagingTableCatalog destCatalog;\n+  private final Identifier destTableIdent;\n+\n+  // Optional Parameters for destination\n+  private final Map<String, String> additionalProperties = Maps.newHashMap();\n+\n+  Spark3CreateAction(SparkSession spark, CatalogPlugin sourceCatalog, Identifier sourceTableIdent,\n+                     CatalogPlugin destCatalog, Identifier destTableIdent) {\n+\n+    this.spark = spark;\n+    this.sourceCatalog = checkSourceCatalog(sourceCatalog);\n+    this.sourceTableIdent = sourceTableIdent;\n+    this.destCatalog = checkDestinationCatalog(destCatalog);\n+    this.destTableIdent = destTableIdent;\n+\n+    try {\n+      this.sourceTable = (V1Table) this.sourceCatalog.loadTable(sourceTableIdent);\n+      this.sourceCatalogTable = sourceTable.v1Table();\n+    } catch (NoSuchTableException e) {\n+      throw new IllegalArgumentException(String.format(\"Cannot not find source table %s\", sourceTableIdent), e);\n+    } catch (ClassCastException e) {\n+      throw new IllegalArgumentException(String.format(\"Cannot use non-v1 table %s as a source\", sourceTableIdent), e);\n+    }\n+    validateSourceTable();\n+\n+    this.sourceTableLocation = CatalogUtils.URIToString(sourceCatalogTable.storage().locationUri().get());\n+  }\n+\n+  @Override\n+  public CreateAction withProperties(Map<String, String> properties) {\n+    this.additionalProperties.putAll(properties);\n+    return this;\n+  }\n+\n+  @Override\n+  public CreateAction withProperty(String key, String value) {\n+    this.additionalProperties.put(key, value);\n+    return this;\n+  }\n+\n+  protected SparkSession spark() {\n+    return spark;\n+  }\n+\n+  protected String sourceTableLocation() {\n+    return sourceTableLocation;\n+  }\n+\n+  protected CatalogTable v1SourceTable() {\n+    return sourceCatalogTable;\n+  }\n+\n+  protected TableCatalog sourceCatalog() {\n+    return sourceCatalog;\n+  }\n+\n+  protected Identifier sourceTableIdent() {\n+    return sourceTableIdent;\n+  }\n+\n+  protected StagingTableCatalog destCatalog() {\n+    return destCatalog;\n+  }\n+\n+  protected Identifier destTableIdent() {\n+    return destTableIdent;\n+  }\n+\n+  protected Map<String, String> additionalProperties() {\n+    return additionalProperties;\n+  }\n+\n+  private void validateSourceTable() {\n+    String sourceTableProvider = sourceCatalogTable.provider().get().toLowerCase(Locale.ROOT);\n+    Preconditions.checkArgument(ALLOWED_SOURCES.contains(sourceTableProvider),\n+          \"Cannot create an Iceberg table from source provider: %s\", sourceTableProvider);\n+    Preconditions.checkArgument(!sourceCatalogTable.storage().locationUri().isEmpty(),\n+        \"Cannot create an Iceberg table from a source without an explicit location\");\n+  }\n+\n+  private StagingTableCatalog checkDestinationCatalog(CatalogPlugin catalog) {\n+    Preconditions.checkArgument(catalog instanceof SparkSessionCatalog || catalog instanceof SparkCatalog,\n+        \"Cannot create Iceberg table in non Iceberg Catalog. \" +\n+            \"Catalog %s was of class %s but %s or %s are required\",\n+        catalog.name(), catalog.getClass(), SparkSessionCatalog.class.getName(), SparkCatalog.class.getName());\n+\n+    return (StagingTableCatalog) catalog;\n+  }\n+\n+  protected StagedTable stageDestTable() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTc3MTg1OQ=="}, "originalCommit": {"oid": "bf50967bb9ab9344b3c242c274cc9fab58c8b115"}, "originalPosition": 158}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4OTIyOTQ0OnYy", "diffSide": "RIGHT", "path": "spark3/src/main/java/org/apache/iceberg/actions/Spark3SnapshotAction.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQwMToyODo0NFrOICxLtg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQwMToyODo0NFrOICxLtg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTc3Mzg3OA==", "bodyText": "Migrate catches any exceptions from the abort and logs them, but allows the original exception to propagate. I think this should do the same.", "url": "https://github.com/apache/iceberg/pull/1525#discussion_r539773878", "createdAt": "2020-12-10T01:28:44Z", "author": {"login": "rdblue"}, "path": "spark3/src/main/java/org/apache/iceberg/actions/Spark3SnapshotAction.java", "diffHunk": "@@ -0,0 +1,139 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.actions;\n+\n+import java.util.Map;\n+import org.apache.iceberg.Snapshot;\n+import org.apache.iceberg.SnapshotSummary;\n+import org.apache.iceberg.Table;\n+import org.apache.iceberg.TableProperties;\n+import org.apache.iceberg.relocated.com.google.common.base.Preconditions;\n+import org.apache.iceberg.relocated.com.google.common.collect.Maps;\n+import org.apache.iceberg.spark.SparkTableUtil;\n+import org.apache.iceberg.spark.source.SparkTable;\n+import org.apache.spark.sql.SparkSession;\n+import org.apache.spark.sql.catalyst.TableIdentifier;\n+import org.apache.spark.sql.connector.catalog.CatalogPlugin;\n+import org.apache.spark.sql.connector.catalog.Identifier;\n+import org.apache.spark.sql.connector.catalog.StagedTable;\n+import org.apache.spark.sql.connector.catalog.TableCatalog;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import scala.collection.JavaConverters;\n+\n+/**\n+ * Creates a new Iceberg table based on a source Spark table. The new Iceberg table will\n+ * have a different data and metadata directory allowing it to exist independently of the\n+ * source table.\n+ */\n+class Spark3SnapshotAction extends Spark3CreateAction implements SnapshotAction {\n+  private static final Logger LOG = LoggerFactory.getLogger(Spark3SnapshotAction.class);\n+\n+  private String destTableLocation = null;\n+\n+  Spark3SnapshotAction(SparkSession spark, CatalogPlugin sourceCatalog,\n+                       Identifier sourceTableIdent, CatalogPlugin destCatalog,\n+                       Identifier destTableIdent) {\n+    super(spark, sourceCatalog, sourceTableIdent, destCatalog, destTableIdent);\n+  }\n+\n+  @Override\n+  public Long execute() {\n+    StagedTable stagedTable = stageDestTable();\n+    Table icebergTable = ((SparkTable) stagedTable).table();\n+    // TODO Check table location here against source location\n+\n+    ensureNameMappingPresent(icebergTable);\n+\n+    boolean threw = true;\n+    try {\n+      String stagingLocation = getMetadataLocation(icebergTable);\n+      LOG.info(\"Beginning snapshot of {} to {} using metadata location {}\", sourceTableIdent(), destTableIdent(),\n+          stagingLocation);\n+\n+      TableIdentifier v1TableIdentifier = v1SourceTable().identifier();\n+      SparkTableUtil.importSparkTable(spark(), v1TableIdentifier, icebergTable, stagingLocation);\n+      stagedTable.commitStagedChanges();\n+      threw = false;\n+    } finally {\n+      if (threw) {\n+        LOG.error(\"Error when attempting to commit snapshot changes, rolling back\");\n+        stagedTable.abortStagedChanges();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bf50967bb9ab9344b3c242c274cc9fab58c8b115"}, "originalPosition": 78}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4OTIzMjUzOnYy", "diffSide": "RIGHT", "path": "spark3/src/main/java/org/apache/iceberg/actions/Spark3SnapshotAction.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQwMToyOTo0MVrOICxNUA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQwMToyOTo0MVrOICxNUA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTc3NDI4OA==", "bodyText": "The checks here should be Preconditions checks as well.", "url": "https://github.com/apache/iceberg/pull/1525#discussion_r539774288", "createdAt": "2020-12-10T01:29:41Z", "author": {"login": "rdblue"}, "path": "spark3/src/main/java/org/apache/iceberg/actions/Spark3SnapshotAction.java", "diffHunk": "@@ -0,0 +1,139 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.actions;\n+\n+import java.util.Map;\n+import org.apache.iceberg.Snapshot;\n+import org.apache.iceberg.SnapshotSummary;\n+import org.apache.iceberg.Table;\n+import org.apache.iceberg.TableProperties;\n+import org.apache.iceberg.relocated.com.google.common.base.Preconditions;\n+import org.apache.iceberg.relocated.com.google.common.collect.Maps;\n+import org.apache.iceberg.spark.SparkTableUtil;\n+import org.apache.iceberg.spark.source.SparkTable;\n+import org.apache.spark.sql.SparkSession;\n+import org.apache.spark.sql.catalyst.TableIdentifier;\n+import org.apache.spark.sql.connector.catalog.CatalogPlugin;\n+import org.apache.spark.sql.connector.catalog.Identifier;\n+import org.apache.spark.sql.connector.catalog.StagedTable;\n+import org.apache.spark.sql.connector.catalog.TableCatalog;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import scala.collection.JavaConverters;\n+\n+/**\n+ * Creates a new Iceberg table based on a source Spark table. The new Iceberg table will\n+ * have a different data and metadata directory allowing it to exist independently of the\n+ * source table.\n+ */\n+class Spark3SnapshotAction extends Spark3CreateAction implements SnapshotAction {\n+  private static final Logger LOG = LoggerFactory.getLogger(Spark3SnapshotAction.class);\n+\n+  private String destTableLocation = null;\n+\n+  Spark3SnapshotAction(SparkSession spark, CatalogPlugin sourceCatalog,\n+                       Identifier sourceTableIdent, CatalogPlugin destCatalog,\n+                       Identifier destTableIdent) {\n+    super(spark, sourceCatalog, sourceTableIdent, destCatalog, destTableIdent);\n+  }\n+\n+  @Override\n+  public Long execute() {\n+    StagedTable stagedTable = stageDestTable();\n+    Table icebergTable = ((SparkTable) stagedTable).table();\n+    // TODO Check table location here against source location\n+\n+    ensureNameMappingPresent(icebergTable);\n+\n+    boolean threw = true;\n+    try {\n+      String stagingLocation = getMetadataLocation(icebergTable);\n+      LOG.info(\"Beginning snapshot of {} to {} using metadata location {}\", sourceTableIdent(), destTableIdent(),\n+          stagingLocation);\n+\n+      TableIdentifier v1TableIdentifier = v1SourceTable().identifier();\n+      SparkTableUtil.importSparkTable(spark(), v1TableIdentifier, icebergTable, stagingLocation);\n+      stagedTable.commitStagedChanges();\n+      threw = false;\n+    } finally {\n+      if (threw) {\n+        LOG.error(\"Error when attempting to commit snapshot changes, rolling back\");\n+        stagedTable.abortStagedChanges();\n+      }\n+    }\n+\n+    Snapshot snapshot = icebergTable.currentSnapshot();\n+    long numMigratedFiles = Long.parseLong(snapshot.summary().get(SnapshotSummary.TOTAL_DATA_FILES_PROP));\n+    LOG.info(\"Successfully loaded Iceberg metadata for {} files\", numMigratedFiles);\n+    return numMigratedFiles;\n+  }\n+\n+  @Override\n+  protected Map<String, String> targetTableProps() {\n+    Map<String, String> properties = Maps.newHashMap();\n+\n+    // Remove any possible location properties from origin properties\n+    properties.putAll(JavaConverters.mapAsJavaMapConverter(v1SourceTable().properties()).asJava());\n+    properties.remove(LOCATION);\n+    properties.remove(TableProperties.WRITE_METADATA_LOCATION);\n+    properties.remove(TableProperties.WRITE_NEW_DATA_LOCATION);\n+\n+    EXCLUDED_PROPERTIES.forEach(properties::remove);\n+    properties.put(TableCatalog.PROP_PROVIDER, \"iceberg\");\n+    properties.put(TableProperties.GC_ENABLED, \"false\");\n+    properties.put(\"snapshot\", \"true\");\n+    properties.putAll(additionalProperties());\n+\n+    // Don't use the default location for the destination table if an alternate has be set\n+    if (destTableLocation != null) {\n+      properties.put(LOCATION, destTableLocation);\n+    }\n+\n+    return properties;\n+  }\n+\n+  @Override\n+  protected TableCatalog checkSourceCatalog(CatalogPlugin catalog) {\n+    // Currently the Import code relies on being able to look up the table in the session code\n+    if (!(catalog.name().equals(\"spark_catalog\"))) {\n+      throw new IllegalArgumentException(String.format(\n+          \"Cannot snapshot a table that isn't in spark_catalog, the session catalog. \" +\n+              \"Found source catalog %s\", catalog.name()));\n+    }\n+\n+    if (!(catalog instanceof TableCatalog)) {\n+      throw new IllegalArgumentException(String.format(\n+          \"Cannot snapshot a table from a non-table catalog %s. Catalog has class of %s.\", catalog.name(),\n+          catalog.getClass().toString()\n+      ));\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bf50967bb9ab9344b3c242c274cc9fab58c8b115"}, "originalPosition": 126}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5MjcwMjE4OnYy", "diffSide": "RIGHT", "path": "spark3/src/main/java/org/apache/iceberg/actions/Spark3CreateAction.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxNjowMjo0MFrOIDQqPA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxNjoyMDo0N1rOIDRjXA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDI4OTU5Ng==", "bodyText": "nit: this on the right side seems redundant", "url": "https://github.com/apache/iceberg/pull/1525#discussion_r540289596", "createdAt": "2020-12-10T16:02:40Z", "author": {"login": "aokolnychyi"}, "path": "spark3/src/main/java/org/apache/iceberg/actions/Spark3CreateAction.java", "diffHunk": "@@ -0,0 +1,187 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.actions;\n+\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Set;\n+import org.apache.iceberg.Table;\n+import org.apache.iceberg.TableProperties;\n+import org.apache.iceberg.exceptions.AlreadyExistsException;\n+import org.apache.iceberg.exceptions.NoSuchNamespaceException;\n+import org.apache.iceberg.exceptions.NoSuchTableException;\n+import org.apache.iceberg.mapping.MappingUtil;\n+import org.apache.iceberg.mapping.NameMapping;\n+import org.apache.iceberg.mapping.NameMappingParser;\n+import org.apache.iceberg.relocated.com.google.common.base.Preconditions;\n+import org.apache.iceberg.relocated.com.google.common.collect.ImmutableList;\n+import org.apache.iceberg.relocated.com.google.common.collect.ImmutableSet;\n+import org.apache.iceberg.relocated.com.google.common.collect.Maps;\n+import org.apache.iceberg.spark.SparkCatalog;\n+import org.apache.iceberg.spark.SparkSessionCatalog;\n+import org.apache.spark.sql.SparkSession;\n+import org.apache.spark.sql.catalyst.catalog.CatalogTable;\n+import org.apache.spark.sql.catalyst.catalog.CatalogUtils;\n+import org.apache.spark.sql.connector.catalog.CatalogPlugin;\n+import org.apache.spark.sql.connector.catalog.Identifier;\n+import org.apache.spark.sql.connector.catalog.StagedTable;\n+import org.apache.spark.sql.connector.catalog.StagingTableCatalog;\n+import org.apache.spark.sql.connector.catalog.TableCatalog;\n+import org.apache.spark.sql.connector.catalog.V1Table;\n+import org.apache.spark.sql.connector.expressions.Transform;\n+import org.apache.spark.sql.types.StructType;\n+\n+abstract class Spark3CreateAction implements CreateAction {\n+  private static final Set<String> ALLOWED_SOURCES = ImmutableSet.of(\"parquet\", \"avro\", \"orc\", \"hive\");\n+  protected static final String LOCATION = \"location\";\n+  protected static final String ICEBERG_METADATA_FOLDER = \"metadata\";\n+  protected static final List<String> EXCLUDED_PROPERTIES =\n+      ImmutableList.of(\"path\", \"transient_lastDdlTime\", \"serialization.format\");\n+\n+  private final SparkSession spark;\n+\n+  // Source Fields\n+  private final V1Table sourceTable;\n+  private final CatalogTable sourceCatalogTable;\n+  private final String sourceTableLocation;\n+  private final TableCatalog sourceCatalog;\n+  private final Identifier sourceTableIdent;\n+\n+  // Destination Fields\n+  private final StagingTableCatalog destCatalog;\n+  private final Identifier destTableIdent;\n+\n+  // Optional Parameters for destination\n+  private final Map<String, String> additionalProperties = Maps.newHashMap();\n+\n+  Spark3CreateAction(SparkSession spark, CatalogPlugin sourceCatalog, Identifier sourceTableIdent,\n+                     CatalogPlugin destCatalog, Identifier destTableIdent) {\n+\n+    this.spark = spark;\n+    this.sourceCatalog = checkSourceCatalog(sourceCatalog);\n+    this.sourceTableIdent = sourceTableIdent;\n+    this.destCatalog = checkDestinationCatalog(destCatalog);\n+    this.destTableIdent = destTableIdent;\n+\n+    try {\n+      this.sourceTable = (V1Table) this.sourceCatalog.loadTable(sourceTableIdent);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a99c8216da0f2adc74bc8b2498599fd4228bee63"}, "originalPosition": 85}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDI5NzE1Nw==", "bodyText": "\"sourceCatalog\" is a CatalogPlugin, \"this.sourceCatalog\" is a TableCatalog. I could change the procedure args though", "url": "https://github.com/apache/iceberg/pull/1525#discussion_r540297157", "createdAt": "2020-12-10T16:12:27Z", "author": {"login": "RussellSpitzer"}, "path": "spark3/src/main/java/org/apache/iceberg/actions/Spark3CreateAction.java", "diffHunk": "@@ -0,0 +1,187 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.actions;\n+\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Set;\n+import org.apache.iceberg.Table;\n+import org.apache.iceberg.TableProperties;\n+import org.apache.iceberg.exceptions.AlreadyExistsException;\n+import org.apache.iceberg.exceptions.NoSuchNamespaceException;\n+import org.apache.iceberg.exceptions.NoSuchTableException;\n+import org.apache.iceberg.mapping.MappingUtil;\n+import org.apache.iceberg.mapping.NameMapping;\n+import org.apache.iceberg.mapping.NameMappingParser;\n+import org.apache.iceberg.relocated.com.google.common.base.Preconditions;\n+import org.apache.iceberg.relocated.com.google.common.collect.ImmutableList;\n+import org.apache.iceberg.relocated.com.google.common.collect.ImmutableSet;\n+import org.apache.iceberg.relocated.com.google.common.collect.Maps;\n+import org.apache.iceberg.spark.SparkCatalog;\n+import org.apache.iceberg.spark.SparkSessionCatalog;\n+import org.apache.spark.sql.SparkSession;\n+import org.apache.spark.sql.catalyst.catalog.CatalogTable;\n+import org.apache.spark.sql.catalyst.catalog.CatalogUtils;\n+import org.apache.spark.sql.connector.catalog.CatalogPlugin;\n+import org.apache.spark.sql.connector.catalog.Identifier;\n+import org.apache.spark.sql.connector.catalog.StagedTable;\n+import org.apache.spark.sql.connector.catalog.StagingTableCatalog;\n+import org.apache.spark.sql.connector.catalog.TableCatalog;\n+import org.apache.spark.sql.connector.catalog.V1Table;\n+import org.apache.spark.sql.connector.expressions.Transform;\n+import org.apache.spark.sql.types.StructType;\n+\n+abstract class Spark3CreateAction implements CreateAction {\n+  private static final Set<String> ALLOWED_SOURCES = ImmutableSet.of(\"parquet\", \"avro\", \"orc\", \"hive\");\n+  protected static final String LOCATION = \"location\";\n+  protected static final String ICEBERG_METADATA_FOLDER = \"metadata\";\n+  protected static final List<String> EXCLUDED_PROPERTIES =\n+      ImmutableList.of(\"path\", \"transient_lastDdlTime\", \"serialization.format\");\n+\n+  private final SparkSession spark;\n+\n+  // Source Fields\n+  private final V1Table sourceTable;\n+  private final CatalogTable sourceCatalogTable;\n+  private final String sourceTableLocation;\n+  private final TableCatalog sourceCatalog;\n+  private final Identifier sourceTableIdent;\n+\n+  // Destination Fields\n+  private final StagingTableCatalog destCatalog;\n+  private final Identifier destTableIdent;\n+\n+  // Optional Parameters for destination\n+  private final Map<String, String> additionalProperties = Maps.newHashMap();\n+\n+  Spark3CreateAction(SparkSession spark, CatalogPlugin sourceCatalog, Identifier sourceTableIdent,\n+                     CatalogPlugin destCatalog, Identifier destTableIdent) {\n+\n+    this.spark = spark;\n+    this.sourceCatalog = checkSourceCatalog(sourceCatalog);\n+    this.sourceTableIdent = sourceTableIdent;\n+    this.destCatalog = checkDestinationCatalog(destCatalog);\n+    this.destTableIdent = destTableIdent;\n+\n+    try {\n+      this.sourceTable = (V1Table) this.sourceCatalog.loadTable(sourceTableIdent);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDI4OTU5Ng=="}, "originalCommit": {"oid": "a99c8216da0f2adc74bc8b2498599fd4228bee63"}, "originalPosition": 85}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDMwNDIyMA==", "bodyText": "Got it, not a bid deal.", "url": "https://github.com/apache/iceberg/pull/1525#discussion_r540304220", "createdAt": "2020-12-10T16:20:47Z", "author": {"login": "aokolnychyi"}, "path": "spark3/src/main/java/org/apache/iceberg/actions/Spark3CreateAction.java", "diffHunk": "@@ -0,0 +1,187 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.actions;\n+\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Set;\n+import org.apache.iceberg.Table;\n+import org.apache.iceberg.TableProperties;\n+import org.apache.iceberg.exceptions.AlreadyExistsException;\n+import org.apache.iceberg.exceptions.NoSuchNamespaceException;\n+import org.apache.iceberg.exceptions.NoSuchTableException;\n+import org.apache.iceberg.mapping.MappingUtil;\n+import org.apache.iceberg.mapping.NameMapping;\n+import org.apache.iceberg.mapping.NameMappingParser;\n+import org.apache.iceberg.relocated.com.google.common.base.Preconditions;\n+import org.apache.iceberg.relocated.com.google.common.collect.ImmutableList;\n+import org.apache.iceberg.relocated.com.google.common.collect.ImmutableSet;\n+import org.apache.iceberg.relocated.com.google.common.collect.Maps;\n+import org.apache.iceberg.spark.SparkCatalog;\n+import org.apache.iceberg.spark.SparkSessionCatalog;\n+import org.apache.spark.sql.SparkSession;\n+import org.apache.spark.sql.catalyst.catalog.CatalogTable;\n+import org.apache.spark.sql.catalyst.catalog.CatalogUtils;\n+import org.apache.spark.sql.connector.catalog.CatalogPlugin;\n+import org.apache.spark.sql.connector.catalog.Identifier;\n+import org.apache.spark.sql.connector.catalog.StagedTable;\n+import org.apache.spark.sql.connector.catalog.StagingTableCatalog;\n+import org.apache.spark.sql.connector.catalog.TableCatalog;\n+import org.apache.spark.sql.connector.catalog.V1Table;\n+import org.apache.spark.sql.connector.expressions.Transform;\n+import org.apache.spark.sql.types.StructType;\n+\n+abstract class Spark3CreateAction implements CreateAction {\n+  private static final Set<String> ALLOWED_SOURCES = ImmutableSet.of(\"parquet\", \"avro\", \"orc\", \"hive\");\n+  protected static final String LOCATION = \"location\";\n+  protected static final String ICEBERG_METADATA_FOLDER = \"metadata\";\n+  protected static final List<String> EXCLUDED_PROPERTIES =\n+      ImmutableList.of(\"path\", \"transient_lastDdlTime\", \"serialization.format\");\n+\n+  private final SparkSession spark;\n+\n+  // Source Fields\n+  private final V1Table sourceTable;\n+  private final CatalogTable sourceCatalogTable;\n+  private final String sourceTableLocation;\n+  private final TableCatalog sourceCatalog;\n+  private final Identifier sourceTableIdent;\n+\n+  // Destination Fields\n+  private final StagingTableCatalog destCatalog;\n+  private final Identifier destTableIdent;\n+\n+  // Optional Parameters for destination\n+  private final Map<String, String> additionalProperties = Maps.newHashMap();\n+\n+  Spark3CreateAction(SparkSession spark, CatalogPlugin sourceCatalog, Identifier sourceTableIdent,\n+                     CatalogPlugin destCatalog, Identifier destTableIdent) {\n+\n+    this.spark = spark;\n+    this.sourceCatalog = checkSourceCatalog(sourceCatalog);\n+    this.sourceTableIdent = sourceTableIdent;\n+    this.destCatalog = checkDestinationCatalog(destCatalog);\n+    this.destTableIdent = destTableIdent;\n+\n+    try {\n+      this.sourceTable = (V1Table) this.sourceCatalog.loadTable(sourceTableIdent);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDI4OTU5Ng=="}, "originalCommit": {"oid": "a99c8216da0f2adc74bc8b2498599fd4228bee63"}, "originalPosition": 85}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3548, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}