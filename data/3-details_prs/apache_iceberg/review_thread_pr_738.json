{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYzNTY3Nzg2", "number": 738, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQxMDozMzoyOFrODYdTQA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QxNzowNjozOVrODY4b_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2OTcyNDgwOnYy", "diffSide": "RIGHT", "path": "core/src/test/java/org/apache/iceberg/TestManifestWriter.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQxMDozMzoyOFrOFeU4ew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQwODoyMDoyOVrOFfxdlQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzM0MzczOQ==", "bodyText": "Technically, this doesn't have to extend TableTestBase but we need writeManifest. I think we can refactor a bit and introduce a separate parent test class with the logic for writing/checking manifests/snapshots.", "url": "https://github.com/apache/iceberg/pull/738#discussion_r367343739", "createdAt": "2020-01-16T10:33:28Z", "author": {"login": "aokolnychyi"}, "path": "core/src/test/java/org/apache/iceberg/TestManifestWriter.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg;\n+\n+import java.io.IOException;\n+import java.util.UUID;\n+import org.apache.iceberg.ManifestEntry.Status;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+public class TestManifestWriter extends TableTestBase {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e18ddc084ca1bcee7e2267ef08df85ea82f86c7"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzg2NTgyNA==", "bodyText": "+1 to extract out base classes for just manifest and snapshots.", "url": "https://github.com/apache/iceberg/pull/738#discussion_r367865824", "createdAt": "2020-01-17T10:26:24Z", "author": {"login": "chenjunjiedada"}, "path": "core/src/test/java/org/apache/iceberg/TestManifestWriter.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg;\n+\n+import java.io.IOException;\n+import java.util.UUID;\n+import org.apache.iceberg.ManifestEntry.Status;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+public class TestManifestWriter extends TableTestBase {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzM0MzczOQ=="}, "originalCommit": {"oid": "9e18ddc084ca1bcee7e2267ef08df85ea82f86c7"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODA0MzA1Mw==", "bodyText": "Either way is fine with me. I usually prefer to keep things simple.", "url": "https://github.com/apache/iceberg/pull/738#discussion_r368043053", "createdAt": "2020-01-17T17:08:30Z", "author": {"login": "rdblue"}, "path": "core/src/test/java/org/apache/iceberg/TestManifestWriter.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg;\n+\n+import java.io.IOException;\n+import java.util.UUID;\n+import org.apache.iceberg.ManifestEntry.Status;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+public class TestManifestWriter extends TableTestBase {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzM0MzczOQ=="}, "originalCommit": {"oid": "9e18ddc084ca1bcee7e2267ef08df85ea82f86c7"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODg2MDU2NQ==", "bodyText": "I wanted to refactor but it looks the changes won't be worth the effort after a closer look. For example, we will need to pass a partition spec and FileIO to write manifests that we can simply take from table in TableTestBase. Let's keep it as is for now.", "url": "https://github.com/apache/iceberg/pull/738#discussion_r368860565", "createdAt": "2020-01-21T08:20:29Z", "author": {"login": "aokolnychyi"}, "path": "core/src/test/java/org/apache/iceberg/TestManifestWriter.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg;\n+\n+import java.io.IOException;\n+import java.util.UUID;\n+import org.apache.iceberg.ManifestEntry.Status;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+public class TestManifestWriter extends TableTestBase {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzM0MzczOQ=="}, "originalCommit": {"oid": "9e18ddc084ca1bcee7e2267ef08df85ea82f86c7"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3NDE3MDg2OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/apache/iceberg/ManifestFile.java", "isResolved": false, "comments": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QxNzowNjozOVrOFe_g8g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQwNzo1MTowMlrOFhV7pw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODA0MjIyNg==", "bodyText": "Can we add these up by the data files counts?", "url": "https://github.com/apache/iceberg/pull/738#discussion_r368042226", "createdAt": "2020-01-17T17:06:39Z", "author": {"login": "rdblue"}, "path": "api/src/main/java/org/apache/iceberg/ManifestFile.java", "diffHunk": "@@ -42,7 +42,10 @@\n           required(509, \"contains_null\", Types.BooleanType.get()),\n           optional(510, \"lower_bound\", Types.BinaryType.get()), // null if no non-null values\n           optional(511, \"upper_bound\", Types.BinaryType.get())\n-      ))));\n+      ))),\n+      optional(512, \"added_rows_count\", Types.LongType.get()),\n+      optional(513, \"existing_rows_count\", Types.LongType.get()),\n+      optional(514, \"deleted_rows_count\", Types.LongType.get()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e18ddc084ca1bcee7e2267ef08df85ea82f86c7"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODA2Mjg4NA==", "bodyText": "@rdblue, not sure I got. Do you mean whether we can avoid storing these and add them up?", "url": "https://github.com/apache/iceberg/pull/738#discussion_r368062884", "createdAt": "2020-01-17T17:58:21Z", "author": {"login": "aokolnychyi"}, "path": "api/src/main/java/org/apache/iceberg/ManifestFile.java", "diffHunk": "@@ -42,7 +42,10 @@\n           required(509, \"contains_null\", Types.BooleanType.get()),\n           optional(510, \"lower_bound\", Types.BinaryType.get()), // null if no non-null values\n           optional(511, \"upper_bound\", Types.BinaryType.get())\n-      ))));\n+      ))),\n+      optional(512, \"added_rows_count\", Types.LongType.get()),\n+      optional(513, \"existing_rows_count\", Types.LongType.get()),\n+      optional(514, \"deleted_rows_count\", Types.LongType.get()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODA0MjIyNg=="}, "originalCommit": {"oid": "9e18ddc084ca1bcee7e2267ef08df85ea82f86c7"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODA2NTA0OQ==", "bodyText": "No, I meant that we don't need to add these at the end of the schema. We can add them up by the file count columns, like you do with all of the accessor methods.", "url": "https://github.com/apache/iceberg/pull/738#discussion_r368065049", "createdAt": "2020-01-17T18:03:48Z", "author": {"login": "rdblue"}, "path": "api/src/main/java/org/apache/iceberg/ManifestFile.java", "diffHunk": "@@ -42,7 +42,10 @@\n           required(509, \"contains_null\", Types.BooleanType.get()),\n           optional(510, \"lower_bound\", Types.BinaryType.get()), // null if no non-null values\n           optional(511, \"upper_bound\", Types.BinaryType.get())\n-      ))));\n+      ))),\n+      optional(512, \"added_rows_count\", Types.LongType.get()),\n+      optional(513, \"existing_rows_count\", Types.LongType.get()),\n+      optional(514, \"deleted_rows_count\", Types.LongType.get()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODA0MjIyNg=="}, "originalCommit": {"oid": "9e18ddc084ca1bcee7e2267ef08df85ea82f86c7"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODA2NTc3OA==", "bodyText": "Yes, let me update this.", "url": "https://github.com/apache/iceberg/pull/738#discussion_r368065778", "createdAt": "2020-01-17T18:05:48Z", "author": {"login": "aokolnychyi"}, "path": "api/src/main/java/org/apache/iceberg/ManifestFile.java", "diffHunk": "@@ -42,7 +42,10 @@\n           required(509, \"contains_null\", Types.BooleanType.get()),\n           optional(510, \"lower_bound\", Types.BinaryType.get()), // null if no non-null values\n           optional(511, \"upper_bound\", Types.BinaryType.get())\n-      ))));\n+      ))),\n+      optional(512, \"added_rows_count\", Types.LongType.get()),\n+      optional(513, \"existing_rows_count\", Types.LongType.get()),\n+      optional(514, \"deleted_rows_count\", Types.LongType.get()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODA0MjIyNg=="}, "originalCommit": {"oid": "9e18ddc084ca1bcee7e2267ef08df85ea82f86c7"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODg2MDc3Mw==", "bodyText": "Done.", "url": "https://github.com/apache/iceberg/pull/738#discussion_r368860773", "createdAt": "2020-01-21T08:21:05Z", "author": {"login": "aokolnychyi"}, "path": "api/src/main/java/org/apache/iceberg/ManifestFile.java", "diffHunk": "@@ -42,7 +42,10 @@\n           required(509, \"contains_null\", Types.BooleanType.get()),\n           optional(510, \"lower_bound\", Types.BinaryType.get()), // null if no non-null values\n           optional(511, \"upper_bound\", Types.BinaryType.get())\n-      ))));\n+      ))),\n+      optional(512, \"added_rows_count\", Types.LongType.get()),\n+      optional(513, \"existing_rows_count\", Types.LongType.get()),\n+      optional(514, \"deleted_rows_count\", Types.LongType.get()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODA0MjIyNg=="}, "originalCommit": {"oid": "9e18ddc084ca1bcee7e2267ef08df85ea82f86c7"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTIwMTA4OQ==", "bodyText": "Hm, reordering actually led to failures while writing manifest lists as GenericAvroWriter doesn't take into account field ids.", "url": "https://github.com/apache/iceberg/pull/738#discussion_r369201089", "createdAt": "2020-01-21T19:34:08Z", "author": {"login": "aokolnychyi"}, "path": "api/src/main/java/org/apache/iceberg/ManifestFile.java", "diffHunk": "@@ -42,7 +42,10 @@\n           required(509, \"contains_null\", Types.BooleanType.get()),\n           optional(510, \"lower_bound\", Types.BinaryType.get()), // null if no non-null values\n           optional(511, \"upper_bound\", Types.BinaryType.get())\n-      ))));\n+      ))),\n+      optional(512, \"added_rows_count\", Types.LongType.get()),\n+      optional(513, \"existing_rows_count\", Types.LongType.get()),\n+      optional(514, \"deleted_rows_count\", Types.LongType.get()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODA0MjIyNg=="}, "originalCommit": {"oid": "9e18ddc084ca1bcee7e2267ef08df85ea82f86c7"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTIyMjI2MQ==", "bodyText": "@rdblue, do we want to build something as ProjectionDatumReader for the write side?", "url": "https://github.com/apache/iceberg/pull/738#discussion_r369222261", "createdAt": "2020-01-21T20:19:22Z", "author": {"login": "aokolnychyi"}, "path": "api/src/main/java/org/apache/iceberg/ManifestFile.java", "diffHunk": "@@ -42,7 +42,10 @@\n           required(509, \"contains_null\", Types.BooleanType.get()),\n           optional(510, \"lower_bound\", Types.BinaryType.get()), // null if no non-null values\n           optional(511, \"upper_bound\", Types.BinaryType.get())\n-      ))));\n+      ))),\n+      optional(512, \"added_rows_count\", Types.LongType.get()),\n+      optional(513, \"existing_rows_count\", Types.LongType.get()),\n+      optional(514, \"deleted_rows_count\", Types.LongType.get()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODA0MjIyNg=="}, "originalCommit": {"oid": "9e18ddc084ca1bcee7e2267ef08df85ea82f86c7"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTk5MjEwMw==", "bodyText": "@rdblue, I reverted this change. I propose to merge this PR as is and create a follow-up issue to implement writers that take into account field ids.", "url": "https://github.com/apache/iceberg/pull/738#discussion_r369992103", "createdAt": "2020-01-23T08:50:41Z", "author": {"login": "aokolnychyi"}, "path": "api/src/main/java/org/apache/iceberg/ManifestFile.java", "diffHunk": "@@ -42,7 +42,10 @@\n           required(509, \"contains_null\", Types.BooleanType.get()),\n           optional(510, \"lower_bound\", Types.BinaryType.get()), // null if no non-null values\n           optional(511, \"upper_bound\", Types.BinaryType.get())\n-      ))));\n+      ))),\n+      optional(512, \"added_rows_count\", Types.LongType.get()),\n+      optional(513, \"existing_rows_count\", Types.LongType.get()),\n+      optional(514, \"deleted_rows_count\", Types.LongType.get()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODA0MjIyNg=="}, "originalCommit": {"oid": "9e18ddc084ca1bcee7e2267ef08df85ea82f86c7"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDI2NTEzNw==", "bodyText": "Writers don't use field IDs?", "url": "https://github.com/apache/iceberg/pull/738#discussion_r370265137", "createdAt": "2020-01-23T17:50:03Z", "author": {"login": "rdblue"}, "path": "api/src/main/java/org/apache/iceberg/ManifestFile.java", "diffHunk": "@@ -42,7 +42,10 @@\n           required(509, \"contains_null\", Types.BooleanType.get()),\n           optional(510, \"lower_bound\", Types.BinaryType.get()), // null if no non-null values\n           optional(511, \"upper_bound\", Types.BinaryType.get())\n-      ))));\n+      ))),\n+      optional(512, \"added_rows_count\", Types.LongType.get()),\n+      optional(513, \"existing_rows_count\", Types.LongType.get()),\n+      optional(514, \"deleted_rows_count\", Types.LongType.get()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODA0MjIyNg=="}, "originalCommit": {"oid": "9e18ddc084ca1bcee7e2267ef08df85ea82f86c7"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDUwNjY2Mw==", "bodyText": "@rdblue, yes, GenericAvroWriter doesn't. I think SparkAvroWriter does respect field ids.", "url": "https://github.com/apache/iceberg/pull/738#discussion_r370506663", "createdAt": "2020-01-24T07:51:02Z", "author": {"login": "aokolnychyi"}, "path": "api/src/main/java/org/apache/iceberg/ManifestFile.java", "diffHunk": "@@ -42,7 +42,10 @@\n           required(509, \"contains_null\", Types.BooleanType.get()),\n           optional(510, \"lower_bound\", Types.BinaryType.get()), // null if no non-null values\n           optional(511, \"upper_bound\", Types.BinaryType.get())\n-      ))));\n+      ))),\n+      optional(512, \"added_rows_count\", Types.LongType.get()),\n+      optional(513, \"existing_rows_count\", Types.LongType.get()),\n+      optional(514, \"deleted_rows_count\", Types.LongType.get()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODA0MjIyNg=="}, "originalCommit": {"oid": "9e18ddc084ca1bcee7e2267ef08df85ea82f86c7"}, "originalPosition": 8}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2985, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}