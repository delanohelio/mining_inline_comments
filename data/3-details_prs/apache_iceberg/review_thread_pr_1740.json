{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE3NjQ5OTAy", "number": 1740, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQyMzo0MDo0NlrOE2_1KQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQyMzo0NDo0OFrOE2_46g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2MTA0MzYxOnYy", "diffSide": "RIGHT", "path": "hive3/src/main/java/org/apache/iceberg/mr/hive/serde/objectinspector/IcebergDateObjectInspectorHive3.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQyMzo0MDo0NlrOHwF8pQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQwMDozODo0NVrOHw1Gyw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDE5MTE0MQ==", "bodyText": "Why would this be called to copy a non-Date object?", "url": "https://github.com/apache/iceberg/pull/1740#discussion_r520191141", "createdAt": "2020-11-09T23:40:46Z", "author": {"login": "rdblue"}, "path": "hive3/src/main/java/org/apache/iceberg/mr/hive/serde/objectinspector/IcebergDateObjectInspectorHive3.java", "diffHunk": "@@ -56,7 +56,15 @@ public DateWritableV2 getPrimitiveWritableObject(Object o) {\n \n   @Override\n   public Object copyObject(Object o) {\n-    return o == null ? null : new Date((Date) o);\n+    if (o == null) {\n+      return null;\n+    }\n+\n+    if (o instanceof Date) {\n+      return new Date((Date) o);\n+    } else {\n+      return o;\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f15a7cc7f76c7affba3617198092dfb5a97bd6b6"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDQwOTQyNQ==", "bodyText": "On Tez, this is called with LocalDate. On MR we get Date, which is just a wrapper around LocalDate.", "url": "https://github.com/apache/iceberg/pull/1740#discussion_r520409425", "createdAt": "2020-11-10T09:22:56Z", "author": {"login": "lcspinter"}, "path": "hive3/src/main/java/org/apache/iceberg/mr/hive/serde/objectinspector/IcebergDateObjectInspectorHive3.java", "diffHunk": "@@ -56,7 +56,15 @@ public DateWritableV2 getPrimitiveWritableObject(Object o) {\n \n   @Override\n   public Object copyObject(Object o) {\n-    return o == null ? null : new Date((Date) o);\n+    if (o == null) {\n+      return null;\n+    }\n+\n+    if (o instanceof Date) {\n+      return new Date((Date) o);\n+    } else {\n+      return o;\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDE5MTE0MQ=="}, "originalCommit": {"oid": "f15a7cc7f76c7affba3617198092dfb5a97bd6b6"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDk2MzY3MQ==", "bodyText": "Why not support both representations that are possibly passed in by Hive?", "url": "https://github.com/apache/iceberg/pull/1740#discussion_r520963671", "createdAt": "2020-11-11T00:38:24Z", "author": {"login": "rdblue"}, "path": "hive3/src/main/java/org/apache/iceberg/mr/hive/serde/objectinspector/IcebergDateObjectInspectorHive3.java", "diffHunk": "@@ -56,7 +56,15 @@ public DateWritableV2 getPrimitiveWritableObject(Object o) {\n \n   @Override\n   public Object copyObject(Object o) {\n-    return o == null ? null : new Date((Date) o);\n+    if (o == null) {\n+      return null;\n+    }\n+\n+    if (o instanceof Date) {\n+      return new Date((Date) o);\n+    } else {\n+      return o;\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDE5MTE0MQ=="}, "originalCommit": {"oid": "f15a7cc7f76c7affba3617198092dfb5a97bd6b6"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDk2Mzc4Nw==", "bodyText": "Nevermind, I see that you did.", "url": "https://github.com/apache/iceberg/pull/1740#discussion_r520963787", "createdAt": "2020-11-11T00:38:45Z", "author": {"login": "rdblue"}, "path": "hive3/src/main/java/org/apache/iceberg/mr/hive/serde/objectinspector/IcebergDateObjectInspectorHive3.java", "diffHunk": "@@ -56,7 +56,15 @@ public DateWritableV2 getPrimitiveWritableObject(Object o) {\n \n   @Override\n   public Object copyObject(Object o) {\n-    return o == null ? null : new Date((Date) o);\n+    if (o == null) {\n+      return null;\n+    }\n+\n+    if (o instanceof Date) {\n+      return new Date((Date) o);\n+    } else {\n+      return o;\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDE5MTE0MQ=="}, "originalCommit": {"oid": "f15a7cc7f76c7affba3617198092dfb5a97bd6b6"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2MTA1MzIyOnYy", "diffSide": "RIGHT", "path": "mr/src/test/java/org/apache/iceberg/mr/hive/HiveIcebergStorageHandlerBaseTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQyMzo0NDo0OFrOHwGCRg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxNDozNDozM1rOHwfavQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDE5MjU4Mg==", "bodyText": "Could you rewrite this as a new test case with a list of types to test?\nWe consider it a best practice to start new test cases rather than adding to existing, complete cases. Each test method is run independently so you see more of the failures that way. By making longer test methods with more than one case, failures can prevent other tests from even running.\nI think it would be fine to use a loop over types in a single new case, since most of the code is the same for these.", "url": "https://github.com/apache/iceberg/pull/1740#discussion_r520192582", "createdAt": "2020-11-09T23:44:48Z", "author": {"login": "rdblue"}, "path": "mr/src/test/java/org/apache/iceberg/mr/hive/HiveIcebergStorageHandlerBaseTest.java", "diffHunk": "@@ -211,6 +212,11 @@ public void testJoinTables() throws IOException {\n     Assert.assertArrayEquals(new Object[] {0L, \"Alice\", 100L, 11.11d}, rows.get(0));\n     Assert.assertArrayEquals(new Object[] {0L, \"Alice\", 101L, 22.22d}, rows.get(1));\n     Assert.assertArrayEquals(new Object[] {1L, \"Bob\", 102L, 33.33d}, rows.get(2));\n+\n+    joinTables(\"decimaltable\", \"decimal_col\", Types.DecimalType.of(3, 1));\n+    joinTables(\"timestamptable\", \"timestamp_col\", Types.TimestampType.withZone());\n+    joinTables(\"binarytable\", \"binary_col\", Types.BinaryType.get());\n+    joinTables(\"datetable\", \"date_col\", Types.DateType.get());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f15a7cc7f76c7affba3617198092dfb5a97bd6b6"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDYwODQ0NQ==", "bodyText": "Thanks @rdblue for the review. I created a new test case.", "url": "https://github.com/apache/iceberg/pull/1740#discussion_r520608445", "createdAt": "2020-11-10T14:34:33Z", "author": {"login": "lcspinter"}, "path": "mr/src/test/java/org/apache/iceberg/mr/hive/HiveIcebergStorageHandlerBaseTest.java", "diffHunk": "@@ -211,6 +212,11 @@ public void testJoinTables() throws IOException {\n     Assert.assertArrayEquals(new Object[] {0L, \"Alice\", 100L, 11.11d}, rows.get(0));\n     Assert.assertArrayEquals(new Object[] {0L, \"Alice\", 101L, 22.22d}, rows.get(1));\n     Assert.assertArrayEquals(new Object[] {1L, \"Bob\", 102L, 33.33d}, rows.get(2));\n+\n+    joinTables(\"decimaltable\", \"decimal_col\", Types.DecimalType.of(3, 1));\n+    joinTables(\"timestamptable\", \"timestamp_col\", Types.TimestampType.withZone());\n+    joinTables(\"binarytable\", \"binary_col\", Types.BinaryType.get());\n+    joinTables(\"datetable\", \"date_col\", Types.DateType.get());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDE5MjU4Mg=="}, "originalCommit": {"oid": "f15a7cc7f76c7affba3617198092dfb5a97bd6b6"}, "originalPosition": 16}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3410, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}