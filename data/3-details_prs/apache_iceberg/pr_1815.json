{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI2MzMxMDEx", "number": 1815, "title": "Flink : add list partitions for FlinkCatalog", "bodyText": "this pr related to #1791", "createdAt": "2020-11-24T09:17:51Z", "url": "https://github.com/apache/iceberg/pull/1815", "merged": true, "mergeCommit": {"oid": "7a306e5ff9cb37cd9be5d0693aa74210ee05fa5b"}, "closed": true, "closedAt": "2020-11-26T12:29:49Z", "author": {"login": "zhangjun0x01"}, "timelineItems": {"totalCount": 31, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdfuVY6gFqTUzNzgwODcxOA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdgSGwcgFqTUzOTI3MjA5OA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM3ODA4NzE4", "url": "https://github.com/apache/iceberg/pull/1815#pullrequestreview-537808718", "createdAt": "2020-11-24T18:47:52Z", "commit": {"oid": "3f811946c672986511a19ee4b99a376a519892e9"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxODo0Nzo1M1rOH5Qkiw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxODo0Nzo1M1rOH5Qkiw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTgwMjM3OQ==", "bodyText": "This should not be public. The public interface is StructLike.", "url": "https://github.com/apache/iceberg/pull/1815#discussion_r529802379", "createdAt": "2020-11-24T18:47:53Z", "author": {"login": "rdblue"}, "path": "core/src/main/java/org/apache/iceberg/PartitionData.java", "diffHunk": "@@ -36,7 +36,7 @@\n import org.apache.iceberg.types.Type;\n import org.apache.iceberg.types.Types;\n \n-class PartitionData\n+public class PartitionData", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3f811946c672986511a19ee4b99a376a519892e9"}, "originalPosition": 5}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM3ODA5ODY1", "url": "https://github.com/apache/iceberg/pull/1815#pullrequestreview-537809865", "createdAt": "2020-11-24T18:49:31Z", "commit": {"oid": "3f811946c672986511a19ee4b99a376a519892e9"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxODo0OTozMlrOH5QoEw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxODo0OTozMlrOH5QoEw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTgwMzI4Mw==", "bodyText": "To get data from StructLike, this can call String.valueOf(partition.get(i, Object.class)).\nPartition values can be null, so using String.valueOf will avoid NullPointerException.", "url": "https://github.com/apache/iceberg/pull/1815#discussion_r529803283", "createdAt": "2020-11-24T18:49:32Z", "author": {"login": "rdblue"}, "path": "flink/src/main/java/org/apache/iceberg/flink/FlinkCatalog.java", "diffHunk": "@@ -619,7 +625,23 @@ public void alterPartitionColumnStatistics(ObjectPath tablePath, CatalogPartitio\n   @Override\n   public List<CatalogPartitionSpec> listPartitions(ObjectPath tablePath)\n       throws CatalogException {\n-    throw new UnsupportedOperationException();\n+    Table table = icebergCatalog.loadTable(toIdentifier(tablePath));\n+    CloseableIterable<FileScanTask> tasks = table.newScan().planFiles();\n+    List<DataFile> dataFiles = Lists.newArrayList(CloseableIterable.transform(tasks, FileScanTask::file));\n+\n+    Set<CatalogPartitionSpec> set = Sets.newHashSet();\n+    for (DataFile dataFile : dataFiles) {\n+      Map<String, String> map = new HashMap<>();\n+      PartitionData partitionData = (PartitionData) dataFile.partition();\n+      Types.StructType structType = partitionData.getPartitionType();\n+      for (int i = 0; i < partitionData.size(); i++) {\n+        map.put(structType.fields().get(i).name(), partitionData.get(i).toString());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3f811946c672986511a19ee4b99a376a519892e9"}, "originalPosition": 47}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM3ODEwMDM5", "url": "https://github.com/apache/iceberg/pull/1815#pullrequestreview-537810039", "createdAt": "2020-11-24T18:49:46Z", "commit": {"oid": "3f811946c672986511a19ee4b99a376a519892e9"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxODo0OTo0NlrOH5Qo4Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxODo0OTo0NlrOH5Qo4Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTgwMzQ4OQ==", "bodyText": "We like to use the factory method instead: Maps.newHashMap().", "url": "https://github.com/apache/iceberg/pull/1815#discussion_r529803489", "createdAt": "2020-11-24T18:49:46Z", "author": {"login": "rdblue"}, "path": "flink/src/main/java/org/apache/iceberg/flink/FlinkCatalog.java", "diffHunk": "@@ -619,7 +625,23 @@ public void alterPartitionColumnStatistics(ObjectPath tablePath, CatalogPartitio\n   @Override\n   public List<CatalogPartitionSpec> listPartitions(ObjectPath tablePath)\n       throws CatalogException {\n-    throw new UnsupportedOperationException();\n+    Table table = icebergCatalog.loadTable(toIdentifier(tablePath));\n+    CloseableIterable<FileScanTask> tasks = table.newScan().planFiles();\n+    List<DataFile> dataFiles = Lists.newArrayList(CloseableIterable.transform(tasks, FileScanTask::file));\n+\n+    Set<CatalogPartitionSpec> set = Sets.newHashSet();\n+    for (DataFile dataFile : dataFiles) {\n+      Map<String, String> map = new HashMap<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3f811946c672986511a19ee4b99a376a519892e9"}, "originalPosition": 43}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM3ODE0MjU5", "url": "https://github.com/apache/iceberg/pull/1815#pullrequestreview-537814259", "createdAt": "2020-11-24T18:55:19Z", "commit": {"oid": "3f811946c672986511a19ee4b99a376a519892e9"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxODo1NToxOVrOH5Q2Aw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxODo1NToxOVrOH5Q2Aw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTgwNjg1MQ==", "bodyText": "This needs to be closed when this method is finished:\nSet<CatalogPartitionSpec> set = Sets.newHashSet();\ntry (CloseableIterable<FileScanTask> tasks = table.newScan().planFiles()) {\n  for (DataFile dataFile : CloseableIterable.transform(tasks, FileScanTask::file)) {\n    ...\n  }\n}\nIn that code, I've also removed the intermediate list of DataFile. The iterable returned by planFiles() is designed to avoid keeping everything in memory at one time, so you should iterate over that or using a transformed iterable. Loading all the files into memory will cause this to run out of memory for large tables.", "url": "https://github.com/apache/iceberg/pull/1815#discussion_r529806851", "createdAt": "2020-11-24T18:55:19Z", "author": {"login": "rdblue"}, "path": "flink/src/main/java/org/apache/iceberg/flink/FlinkCatalog.java", "diffHunk": "@@ -619,7 +625,23 @@ public void alterPartitionColumnStatistics(ObjectPath tablePath, CatalogPartitio\n   @Override\n   public List<CatalogPartitionSpec> listPartitions(ObjectPath tablePath)\n       throws CatalogException {\n-    throw new UnsupportedOperationException();\n+    Table table = icebergCatalog.loadTable(toIdentifier(tablePath));\n+    CloseableIterable<FileScanTask> tasks = table.newScan().planFiles();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3f811946c672986511a19ee4b99a376a519892e9"}, "originalPosition": 38}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "3f811946c672986511a19ee4b99a376a519892e9", "author": {"user": null}, "url": "https://github.com/apache/iceberg/commit/3f811946c672986511a19ee4b99a376a519892e9", "committedDate": "2020-11-24T09:14:24Z", "message": "add list partitions for FlinkCatalog"}, "afterCommit": {"oid": "469805e3cad35b9ea0fae1aa2472c4f76f8e4445", "author": {"user": null}, "url": "https://github.com/apache/iceberg/commit/469805e3cad35b9ea0fae1aa2472c4f76f8e4445", "committedDate": "2020-11-25T02:27:05Z", "message": "add show partitions"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "469805e3cad35b9ea0fae1aa2472c4f76f8e4445", "author": {"user": null}, "url": "https://github.com/apache/iceberg/commit/469805e3cad35b9ea0fae1aa2472c4f76f8e4445", "committedDate": "2020-11-25T02:27:05Z", "message": "add show partitions"}, "afterCommit": {"oid": "869cc30007ef03da95a0bd7d935395b7a6675e94", "author": {"user": null}, "url": "https://github.com/apache/iceberg/commit/869cc30007ef03da95a0bd7d935395b7a6675e94", "committedDate": "2020-11-25T02:33:40Z", "message": "add show partitions"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM4MzAzMzY1", "url": "https://github.com/apache/iceberg/pull/1815#pullrequestreview-538303365", "createdAt": "2020-11-25T09:29:13Z", "commit": {"oid": "869cc30007ef03da95a0bd7d935395b7a6675e94"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQwOToyOToxM1rOH5qYWw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQwOToyOToxM1rOH5qYWw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDIyNTI0Mw==", "bodyText": "Better to use the FlinkCatalog#loadIcebergTable,  because it's wrapped to throw a TableNotExistException for flink.", "url": "https://github.com/apache/iceberg/pull/1815#discussion_r530225243", "createdAt": "2020-11-25T09:29:13Z", "author": {"login": "openinx"}, "path": "flink/src/main/java/org/apache/iceberg/flink/FlinkCatalog.java", "diffHunk": "@@ -619,7 +624,25 @@ public void alterPartitionColumnStatistics(ObjectPath tablePath, CatalogPartitio\n   @Override\n   public List<CatalogPartitionSpec> listPartitions(ObjectPath tablePath)\n       throws CatalogException {\n-    throw new UnsupportedOperationException();\n+    Table table = icebergCatalog.loadTable(toIdentifier(tablePath));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "869cc30007ef03da95a0bd7d935395b7a6675e94"}, "originalPosition": 34}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM4MzEzMzY1", "url": "https://github.com/apache/iceberg/pull/1815#pullrequestreview-538313365", "createdAt": "2020-11-25T09:40:26Z", "commit": {"oid": "869cc30007ef03da95a0bd7d935395b7a6675e94"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQwOTo0MDoyN1rOH5q2rw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQwOTo0MDoyN1rOH5q2rw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDIzMzAwNw==", "bodyText": "nit: use INSERT INTO %s SELECT 1, 'a'", "url": "https://github.com/apache/iceberg/pull/1815#discussion_r530233007", "createdAt": "2020-11-25T09:40:27Z", "author": {"login": "openinx"}, "path": "flink/src/test/java/org/apache/iceberg/flink/TestFlinkCatalogTablePartitions.java", "diffHunk": "@@ -0,0 +1,94 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.flink;\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import org.apache.flink.table.catalog.CatalogPartitionSpec;\n+import org.apache.flink.table.catalog.ObjectPath;\n+import org.apache.flink.table.catalog.exceptions.TableNotExistException;\n+import org.apache.iceberg.relocated.com.google.common.collect.Lists;\n+import org.junit.After;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+public class TestFlinkCatalogTablePartitions extends FlinkCatalogTestBase {\n+\n+  private String tableName = \"partition_table\";\n+\n+  public TestFlinkCatalogTablePartitions(String catalogName, String[] baseNamespace) {\n+    super(catalogName, baseNamespace);\n+  }\n+\n+  @Before\n+  public void before() {\n+    super.before();\n+    sql(\"CREATE DATABASE %s\", flinkDatabase);\n+    sql(\"USE CATALOG %s\", catalogName);\n+    sql(\"USE %s\", DATABASE);\n+  }\n+\n+  @After\n+  public void cleanNamespaces() {\n+    sql(\"DROP TABLE IF EXISTS %s.%s\", flinkDatabase, tableName);\n+    sql(\"DROP DATABASE IF EXISTS %s\", flinkDatabase);\n+    super.clean();\n+  }\n+\n+  @Test\n+  public void testListPartitionsEmpty() throws TableNotExistException {\n+    sql(\"CREATE TABLE %s (id int, data varchar)\", tableName);\n+    sql(\"insert into %s select 1,'a'\", tableName);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "869cc30007ef03da95a0bd7d935395b7a6675e94"}, "originalPosition": 59}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM4MzE1NzAz", "url": "https://github.com/apache/iceberg/pull/1815#pullrequestreview-538315703", "createdAt": "2020-11-25T09:42:56Z", "commit": {"oid": "869cc30007ef03da95a0bd7d935395b7a6675e94"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQwOTo0Mjo1N1rOH5q9cw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQwOTo0Mjo1N1rOH5q9cw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDIzNDczOQ==", "bodyText": "For an unpartitioned table, seems we need to throw a TableNotPartitionedException ?  I read the java doc from listPartitions  in flink's Catalog interface:\n\t/**\n\t * Get CatalogPartitionSpec of all partitions of the table.\n\t *\n\t * @param tablePath\tpath of the table\n\t * @return a list of CatalogPartitionSpec of the table\n\t *\n\t * @throws TableNotExistException thrown if the table does not exist in the catalog\n\t * @throws TableNotPartitionedException thrown if the table is not partitioned\n\t * @throws CatalogException\tin case of any runtime exception\n\t */\n\tList<CatalogPartitionSpec> listPartitions(ObjectPath tablePath)\n\t\tthrows TableNotExistException, TableNotPartitionedException, CatalogException;", "url": "https://github.com/apache/iceberg/pull/1815#discussion_r530234739", "createdAt": "2020-11-25T09:42:57Z", "author": {"login": "openinx"}, "path": "flink/src/main/java/org/apache/iceberg/flink/FlinkCatalog.java", "diffHunk": "@@ -619,7 +624,25 @@ public void alterPartitionColumnStatistics(ObjectPath tablePath, CatalogPartitio\n   @Override\n   public List<CatalogPartitionSpec> listPartitions(ObjectPath tablePath)\n       throws CatalogException {\n-    throw new UnsupportedOperationException();\n+    Table table = icebergCatalog.loadTable(toIdentifier(tablePath));\n+    Set<CatalogPartitionSpec> set = Sets.newHashSet();\n+    try (CloseableIterable<FileScanTask> tasks = table.newScan().planFiles()) {\n+      for (DataFile dataFile : CloseableIterable.transform(tasks, FileScanTask::file)) {\n+        Map<String, String> map = Maps.newHashMap();\n+        StructLike structLike = dataFile.partition();\n+        PartitionSpec spec = table.specs().get(dataFile.specId());\n+        for (int i = 0; i < structLike.size(); i++) {\n+          map.put(spec.fields().get(i).name(), String.valueOf(structLike.get(i, Object.class)));\n+        }\n+        // if the table is unpartitioned table, do not add it to set\n+        if (map.size() > 0) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "869cc30007ef03da95a0bd7d935395b7a6675e94"}, "originalPosition": 45}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM4MzE2MjQ5", "url": "https://github.com/apache/iceberg/pull/1815#pullrequestreview-538316249", "createdAt": "2020-11-25T09:43:33Z", "commit": {"oid": "869cc30007ef03da95a0bd7d935395b7a6675e94"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQwOTo0MzozM1rOH5q--A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQwOTo0MzozM1rOH5q--A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDIzNTEyOA==", "bodyText": "@throws CatalogException\tin case of any runtime exception", "url": "https://github.com/apache/iceberg/pull/1815#discussion_r530235128", "createdAt": "2020-11-25T09:43:33Z", "author": {"login": "openinx"}, "path": "flink/src/main/java/org/apache/iceberg/flink/FlinkCatalog.java", "diffHunk": "@@ -619,7 +624,25 @@ public void alterPartitionColumnStatistics(ObjectPath tablePath, CatalogPartitio\n   @Override\n   public List<CatalogPartitionSpec> listPartitions(ObjectPath tablePath)\n       throws CatalogException {\n-    throw new UnsupportedOperationException();\n+    Table table = icebergCatalog.loadTable(toIdentifier(tablePath));\n+    Set<CatalogPartitionSpec> set = Sets.newHashSet();\n+    try (CloseableIterable<FileScanTask> tasks = table.newScan().planFiles()) {\n+      for (DataFile dataFile : CloseableIterable.transform(tasks, FileScanTask::file)) {\n+        Map<String, String> map = Maps.newHashMap();\n+        StructLike structLike = dataFile.partition();\n+        PartitionSpec spec = table.specs().get(dataFile.specId());\n+        for (int i = 0; i < structLike.size(); i++) {\n+          map.put(spec.fields().get(i).name(), String.valueOf(structLike.get(i, Object.class)));\n+        }\n+        // if the table is unpartitioned table, do not add it to set\n+        if (map.size() > 0) {\n+          set.add(new CatalogPartitionSpec(map));\n+        }\n+      }\n+    } catch (IOException e) {\n+      throw new UncheckedIOException(e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "869cc30007ef03da95a0bd7d935395b7a6675e94"}, "originalPosition": 50}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM4MzE3MDA3", "url": "https://github.com/apache/iceberg/pull/1815#pullrequestreview-538317007", "createdAt": "2020-11-25T09:44:22Z", "commit": {"oid": "869cc30007ef03da95a0bd7d935395b7a6675e94"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQwOTo0NDoyM1rOH5rBew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQwOTo0NDoyM1rOH5rBew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDIzNTc3MQ==", "bodyText": "ditto.", "url": "https://github.com/apache/iceberg/pull/1815#discussion_r530235771", "createdAt": "2020-11-25T09:44:23Z", "author": {"login": "openinx"}, "path": "flink/src/test/java/org/apache/iceberg/flink/TestFlinkCatalogTablePartitions.java", "diffHunk": "@@ -0,0 +1,94 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.flink;\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import org.apache.flink.table.catalog.CatalogPartitionSpec;\n+import org.apache.flink.table.catalog.ObjectPath;\n+import org.apache.flink.table.catalog.exceptions.TableNotExistException;\n+import org.apache.iceberg.relocated.com.google.common.collect.Lists;\n+import org.junit.After;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+public class TestFlinkCatalogTablePartitions extends FlinkCatalogTestBase {\n+\n+  private String tableName = \"partition_table\";\n+\n+  public TestFlinkCatalogTablePartitions(String catalogName, String[] baseNamespace) {\n+    super(catalogName, baseNamespace);\n+  }\n+\n+  @Before\n+  public void before() {\n+    super.before();\n+    sql(\"CREATE DATABASE %s\", flinkDatabase);\n+    sql(\"USE CATALOG %s\", catalogName);\n+    sql(\"USE %s\", DATABASE);\n+  }\n+\n+  @After\n+  public void cleanNamespaces() {\n+    sql(\"DROP TABLE IF EXISTS %s.%s\", flinkDatabase, tableName);\n+    sql(\"DROP DATABASE IF EXISTS %s\", flinkDatabase);\n+    super.clean();\n+  }\n+\n+  @Test\n+  public void testListPartitionsEmpty() throws TableNotExistException {\n+    sql(\"CREATE TABLE %s (id int, data varchar)\", tableName);\n+    sql(\"insert into %s select 1,'a'\", tableName);\n+\n+    ObjectPath objectPath = new ObjectPath(DATABASE, tableName);\n+    FlinkCatalog flinkCatalog = (FlinkCatalog) getTableEnv().getCatalog(catalogName).get();\n+    flinkCatalog.loadIcebergTable(objectPath).refresh();\n+    List<CatalogPartitionSpec> list = flinkCatalog.listPartitions(objectPath);\n+    Assert.assertEquals(\"Should have empty partition\", 0, list.size());\n+  }\n+\n+\n+  @Test\n+  public void testListPartitions() throws TableNotExistException {\n+    sql(\"CREATE TABLE %s (id int, data varchar) PARTITIONED BY (data)\", tableName);\n+    sql(\"insert into %s select 1,'a'\", tableName);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "869cc30007ef03da95a0bd7d935395b7a6675e94"}, "originalPosition": 72}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM4MzE3ODIy", "url": "https://github.com/apache/iceberg/pull/1815#pullrequestreview-538317822", "createdAt": "2020-11-25T09:45:18Z", "commit": {"oid": "869cc30007ef03da95a0bd7d935395b7a6675e94"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQwOTo0NToxOFrOH5rEJQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQwOTo0NToxOFrOH5rEJQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDIzNjQ1Mw==", "bodyText": "Just use the ImmutableMap.of(\"data\", \"a\") ?", "url": "https://github.com/apache/iceberg/pull/1815#discussion_r530236453", "createdAt": "2020-11-25T09:45:18Z", "author": {"login": "openinx"}, "path": "flink/src/test/java/org/apache/iceberg/flink/TestFlinkCatalogTablePartitions.java", "diffHunk": "@@ -0,0 +1,94 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.flink;\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import org.apache.flink.table.catalog.CatalogPartitionSpec;\n+import org.apache.flink.table.catalog.ObjectPath;\n+import org.apache.flink.table.catalog.exceptions.TableNotExistException;\n+import org.apache.iceberg.relocated.com.google.common.collect.Lists;\n+import org.junit.After;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+public class TestFlinkCatalogTablePartitions extends FlinkCatalogTestBase {\n+\n+  private String tableName = \"partition_table\";\n+\n+  public TestFlinkCatalogTablePartitions(String catalogName, String[] baseNamespace) {\n+    super(catalogName, baseNamespace);\n+  }\n+\n+  @Before\n+  public void before() {\n+    super.before();\n+    sql(\"CREATE DATABASE %s\", flinkDatabase);\n+    sql(\"USE CATALOG %s\", catalogName);\n+    sql(\"USE %s\", DATABASE);\n+  }\n+\n+  @After\n+  public void cleanNamespaces() {\n+    sql(\"DROP TABLE IF EXISTS %s.%s\", flinkDatabase, tableName);\n+    sql(\"DROP DATABASE IF EXISTS %s\", flinkDatabase);\n+    super.clean();\n+  }\n+\n+  @Test\n+  public void testListPartitionsEmpty() throws TableNotExistException {\n+    sql(\"CREATE TABLE %s (id int, data varchar)\", tableName);\n+    sql(\"insert into %s select 1,'a'\", tableName);\n+\n+    ObjectPath objectPath = new ObjectPath(DATABASE, tableName);\n+    FlinkCatalog flinkCatalog = (FlinkCatalog) getTableEnv().getCatalog(catalogName).get();\n+    flinkCatalog.loadIcebergTable(objectPath).refresh();\n+    List<CatalogPartitionSpec> list = flinkCatalog.listPartitions(objectPath);\n+    Assert.assertEquals(\"Should have empty partition\", 0, list.size());\n+  }\n+\n+\n+  @Test\n+  public void testListPartitions() throws TableNotExistException {\n+    sql(\"CREATE TABLE %s (id int, data varchar) PARTITIONED BY (data)\", tableName);\n+    sql(\"insert into %s select 1,'a'\", tableName);\n+    sql(\"insert into %s select 2,'b'\", tableName);\n+\n+    ObjectPath objectPath = new ObjectPath(DATABASE, tableName);\n+    FlinkCatalog flinkCatalog = (FlinkCatalog) getTableEnv().getCatalog(catalogName).get();\n+    flinkCatalog.loadIcebergTable(objectPath).refresh();\n+    List<CatalogPartitionSpec> list = flinkCatalog.listPartitions(objectPath);\n+    Assert.assertEquals(\"Should have 2 partition\", 2, list.size());\n+\n+    List<CatalogPartitionSpec> expected = Lists.newArrayList();\n+    CatalogPartitionSpec partitionSpec1 = new CatalogPartitionSpec(new HashMap<String, String>() {{", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "869cc30007ef03da95a0bd7d935395b7a6675e94"}, "originalPosition": 82}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM4MzE4MzQ3", "url": "https://github.com/apache/iceberg/pull/1815#pullrequestreview-538318347", "createdAt": "2020-11-25T09:45:53Z", "commit": {"oid": "869cc30007ef03da95a0bd7d935395b7a6675e94"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQwOTo0NTo1M1rOH5rF0w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQwOTo0NTo1M1rOH5rF0w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDIzNjg4Mw==", "bodyText": "Should produce the expected catalog partition specs.", "url": "https://github.com/apache/iceberg/pull/1815#discussion_r530236883", "createdAt": "2020-11-25T09:45:53Z", "author": {"login": "openinx"}, "path": "flink/src/test/java/org/apache/iceberg/flink/TestFlinkCatalogTablePartitions.java", "diffHunk": "@@ -0,0 +1,94 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.flink;\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import org.apache.flink.table.catalog.CatalogPartitionSpec;\n+import org.apache.flink.table.catalog.ObjectPath;\n+import org.apache.flink.table.catalog.exceptions.TableNotExistException;\n+import org.apache.iceberg.relocated.com.google.common.collect.Lists;\n+import org.junit.After;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+public class TestFlinkCatalogTablePartitions extends FlinkCatalogTestBase {\n+\n+  private String tableName = \"partition_table\";\n+\n+  public TestFlinkCatalogTablePartitions(String catalogName, String[] baseNamespace) {\n+    super(catalogName, baseNamespace);\n+  }\n+\n+  @Before\n+  public void before() {\n+    super.before();\n+    sql(\"CREATE DATABASE %s\", flinkDatabase);\n+    sql(\"USE CATALOG %s\", catalogName);\n+    sql(\"USE %s\", DATABASE);\n+  }\n+\n+  @After\n+  public void cleanNamespaces() {\n+    sql(\"DROP TABLE IF EXISTS %s.%s\", flinkDatabase, tableName);\n+    sql(\"DROP DATABASE IF EXISTS %s\", flinkDatabase);\n+    super.clean();\n+  }\n+\n+  @Test\n+  public void testListPartitionsEmpty() throws TableNotExistException {\n+    sql(\"CREATE TABLE %s (id int, data varchar)\", tableName);\n+    sql(\"insert into %s select 1,'a'\", tableName);\n+\n+    ObjectPath objectPath = new ObjectPath(DATABASE, tableName);\n+    FlinkCatalog flinkCatalog = (FlinkCatalog) getTableEnv().getCatalog(catalogName).get();\n+    flinkCatalog.loadIcebergTable(objectPath).refresh();\n+    List<CatalogPartitionSpec> list = flinkCatalog.listPartitions(objectPath);\n+    Assert.assertEquals(\"Should have empty partition\", 0, list.size());\n+  }\n+\n+\n+  @Test\n+  public void testListPartitions() throws TableNotExistException {\n+    sql(\"CREATE TABLE %s (id int, data varchar) PARTITIONED BY (data)\", tableName);\n+    sql(\"insert into %s select 1,'a'\", tableName);\n+    sql(\"insert into %s select 2,'b'\", tableName);\n+\n+    ObjectPath objectPath = new ObjectPath(DATABASE, tableName);\n+    FlinkCatalog flinkCatalog = (FlinkCatalog) getTableEnv().getCatalog(catalogName).get();\n+    flinkCatalog.loadIcebergTable(objectPath).refresh();\n+    List<CatalogPartitionSpec> list = flinkCatalog.listPartitions(objectPath);\n+    Assert.assertEquals(\"Should have 2 partition\", 2, list.size());\n+\n+    List<CatalogPartitionSpec> expected = Lists.newArrayList();\n+    CatalogPartitionSpec partitionSpec1 = new CatalogPartitionSpec(new HashMap<String, String>() {{\n+        put(\"data\", \"a\");\n+      }}\n+    );\n+    CatalogPartitionSpec partitionSpec2 = new CatalogPartitionSpec(new HashMap<String, String>() {{\n+        put(\"data\", \"b\");\n+      }}\n+    );\n+    expected.add(partitionSpec1);\n+    expected.add(partitionSpec2);\n+    Assert.assertEquals(\"Should produce the expected record\", list, expected);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "869cc30007ef03da95a0bd7d935395b7a6675e94"}, "originalPosition": 92}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM4NzcwMjky", "url": "https://github.com/apache/iceberg/pull/1815#pullrequestreview-538770292", "createdAt": "2020-11-25T18:48:52Z", "commit": {"oid": "643bc9ad927c117cf994fc5ad9465aea38659aa1"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxODo0ODo1M1rOH6AFUA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxODo0ODo1M1rOH6AFUA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDU4MDgxNg==", "bodyText": "Nit: please add empty lines after control flow blocks like if, try, while, and for.", "url": "https://github.com/apache/iceberg/pull/1815#discussion_r530580816", "createdAt": "2020-11-25T18:48:53Z", "author": {"login": "rdblue"}, "path": "flink/src/main/java/org/apache/iceberg/flink/FlinkCatalog.java", "diffHunk": "@@ -618,8 +623,27 @@ public void alterPartitionColumnStatistics(ObjectPath tablePath, CatalogPartitio\n \n   @Override\n   public List<CatalogPartitionSpec> listPartitions(ObjectPath tablePath)\n-      throws CatalogException {\n-    throw new UnsupportedOperationException();\n+      throws TableNotExistException, TableNotPartitionedException, CatalogException {\n+    Table table = loadIcebergTable(tablePath);\n+\n+    if (table.spec().isUnpartitioned()) {\n+      throw new TableNotPartitionedException(icebergCatalog.name(), tablePath);\n+    }\n+    Set<CatalogPartitionSpec> set = Sets.newHashSet();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "643bc9ad927c117cf994fc5ad9465aea38659aa1"}, "originalPosition": 40}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM4NzcxODgy", "url": "https://github.com/apache/iceberg/pull/1815#pullrequestreview-538771882", "createdAt": "2020-11-25T18:51:35Z", "commit": {"oid": "643bc9ad927c117cf994fc5ad9465aea38659aa1"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxODo1MTozNVrOH6AKlA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxODo1MTozNVrOH6AKlA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDU4MjE2NA==", "bodyText": "Minor: Tests should generally use AssertHelpers.assertThrows instead of expected so that other assertions can be checked after the failure. It's okay here because listPartitions doesn't modify the table.", "url": "https://github.com/apache/iceberg/pull/1815#discussion_r530582164", "createdAt": "2020-11-25T18:51:35Z", "author": {"login": "rdblue"}, "path": "flink/src/test/java/org/apache/iceberg/flink/TestFlinkCatalogTablePartitions.java", "diffHunk": "@@ -0,0 +1,87 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.flink;\n+\n+import java.util.List;\n+import org.apache.flink.table.catalog.CatalogPartitionSpec;\n+import org.apache.flink.table.catalog.ObjectPath;\n+import org.apache.flink.table.catalog.exceptions.TableNotExistException;\n+import org.apache.flink.table.catalog.exceptions.TableNotPartitionedException;\n+import org.apache.iceberg.relocated.com.google.common.collect.ImmutableMap;\n+import org.apache.iceberg.relocated.com.google.common.collect.Lists;\n+import org.junit.After;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+public class TestFlinkCatalogTablePartitions extends FlinkCatalogTestBase {\n+\n+  private String tableName = \"partition_table\";\n+\n+  public TestFlinkCatalogTablePartitions(String catalogName, String[] baseNamespace) {\n+    super(catalogName, baseNamespace);\n+  }\n+\n+  @Before\n+  public void before() {\n+    super.before();\n+    sql(\"CREATE DATABASE %s\", flinkDatabase);\n+    sql(\"USE CATALOG %s\", catalogName);\n+    sql(\"USE %s\", DATABASE);\n+  }\n+\n+  @After\n+  public void cleanNamespaces() {\n+    sql(\"DROP TABLE IF EXISTS %s.%s\", flinkDatabase, tableName);\n+    sql(\"DROP DATABASE IF EXISTS %s\", flinkDatabase);\n+    super.clean();\n+  }\n+\n+  @Test(expected = TableNotPartitionedException.class)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "643bc9ad927c117cf994fc5ad9465aea38659aa1"}, "originalPosition": 57}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM4NzcyNjAz", "url": "https://github.com/apache/iceberg/pull/1815#pullrequestreview-538772603", "createdAt": "2020-11-25T18:52:52Z", "commit": {"oid": "643bc9ad927c117cf994fc5ad9465aea38659aa1"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxODo1Mjo1MlrOH6AM7g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxODo1Mjo1MlrOH6AM7g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDU4Mjc2Ng==", "bodyText": "This test name is not correct. It should be testListPartitionsWithUnpartitionedTable.", "url": "https://github.com/apache/iceberg/pull/1815#discussion_r530582766", "createdAt": "2020-11-25T18:52:52Z", "author": {"login": "rdblue"}, "path": "flink/src/test/java/org/apache/iceberg/flink/TestFlinkCatalogTablePartitions.java", "diffHunk": "@@ -0,0 +1,87 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.flink;\n+\n+import java.util.List;\n+import org.apache.flink.table.catalog.CatalogPartitionSpec;\n+import org.apache.flink.table.catalog.ObjectPath;\n+import org.apache.flink.table.catalog.exceptions.TableNotExistException;\n+import org.apache.flink.table.catalog.exceptions.TableNotPartitionedException;\n+import org.apache.iceberg.relocated.com.google.common.collect.ImmutableMap;\n+import org.apache.iceberg.relocated.com.google.common.collect.Lists;\n+import org.junit.After;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+public class TestFlinkCatalogTablePartitions extends FlinkCatalogTestBase {\n+\n+  private String tableName = \"partition_table\";\n+\n+  public TestFlinkCatalogTablePartitions(String catalogName, String[] baseNamespace) {\n+    super(catalogName, baseNamespace);\n+  }\n+\n+  @Before\n+  public void before() {\n+    super.before();\n+    sql(\"CREATE DATABASE %s\", flinkDatabase);\n+    sql(\"USE CATALOG %s\", catalogName);\n+    sql(\"USE %s\", DATABASE);\n+  }\n+\n+  @After\n+  public void cleanNamespaces() {\n+    sql(\"DROP TABLE IF EXISTS %s.%s\", flinkDatabase, tableName);\n+    sql(\"DROP DATABASE IF EXISTS %s\", flinkDatabase);\n+    super.clean();\n+  }\n+\n+  @Test(expected = TableNotPartitionedException.class)\n+  public void testListPartitionsEmpty() throws TableNotExistException, TableNotPartitionedException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "643bc9ad927c117cf994fc5ad9465aea38659aa1"}, "originalPosition": 58}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "99423d888d20d7f36660922ff88bea8b8e4ed8a5", "author": {"user": null}, "url": "https://github.com/apache/iceberg/commit/99423d888d20d7f36660922ff88bea8b8e4ed8a5", "committedDate": "2020-11-26T01:21:05Z", "message": "add list partitions for FlinkCatalog"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6aef0e351ab8d5637bb0d2e5439b83f7fd3c7ff5", "author": {"user": null}, "url": "https://github.com/apache/iceberg/commit/6aef0e351ab8d5637bb0d2e5439b83f7fd3c7ff5", "committedDate": "2020-11-26T01:21:05Z", "message": "add show partitions"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f23b521b38c1e620fc56e670d7cfb8b90ed0dbc1", "author": {"user": null}, "url": "https://github.com/apache/iceberg/commit/f23b521b38c1e620fc56e670d7cfb8b90ed0dbc1", "committedDate": "2020-11-26T01:21:05Z", "message": "use loadIcebergTable to load iceberg table"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bc6a14aa3de01dff83d117d1a96d19a479aed6dd", "author": {"user": null}, "url": "https://github.com/apache/iceberg/commit/bc6a14aa3de01dff83d117d1a96d19a479aed6dd", "committedDate": "2020-11-26T01:21:05Z", "message": "add exception for listPartitions"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "35a3116308a76bd52d1d4c1103fe26a827a74aca", "author": {"user": null}, "url": "https://github.com/apache/iceberg/commit/35a3116308a76bd52d1d4c1103fe26a827a74aca", "committedDate": "2020-11-26T00:55:16Z", "message": "rename test method"}, "afterCommit": {"oid": "bfe234fddc7883ec68f43c2c7637a793eeacf11b", "author": {"user": null}, "url": "https://github.com/apache/iceberg/commit/bfe234fddc7883ec68f43c2c7637a793eeacf11b", "committedDate": "2020-11-26T01:21:29Z", "message": "rename test method and modify some code format"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "345e4610a8e1d00ccd7bb98e1ee24e8df6ef3fdf", "author": {"user": null}, "url": "https://github.com/apache/iceberg/commit/345e4610a8e1d00ccd7bb98e1ee24e8df6ef3fdf", "committedDate": "2020-11-26T01:25:47Z", "message": "rename test method and modify some code format"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "bfe234fddc7883ec68f43c2c7637a793eeacf11b", "author": {"user": null}, "url": "https://github.com/apache/iceberg/commit/bfe234fddc7883ec68f43c2c7637a793eeacf11b", "committedDate": "2020-11-26T01:21:29Z", "message": "rename test method and modify some code format"}, "afterCommit": {"oid": "345e4610a8e1d00ccd7bb98e1ee24e8df6ef3fdf", "author": {"user": null}, "url": "https://github.com/apache/iceberg/commit/345e4610a8e1d00ccd7bb98e1ee24e8df6ef3fdf", "committedDate": "2020-11-26T01:25:47Z", "message": "rename test method and modify some code format"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM4OTM2OTk3", "url": "https://github.com/apache/iceberg/pull/1815#pullrequestreview-538936997", "createdAt": "2020-11-26T01:31:10Z", "commit": {"oid": "345e4610a8e1d00ccd7bb98e1ee24e8df6ef3fdf"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM4OTU0NDYz", "url": "https://github.com/apache/iceberg/pull/1815#pullrequestreview-538954463", "createdAt": "2020-11-26T02:31:48Z", "commit": {"oid": "345e4610a8e1d00ccd7bb98e1ee24e8df6ef3fdf"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQwMjozMTo0OFrOH6Jw_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQwMjozMTo0OFrOH6Jw_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDczOTQ1Mg==", "bodyText": "nit:  the throwing TableNotPartitionedException could be removed now ?", "url": "https://github.com/apache/iceberg/pull/1815#discussion_r530739452", "createdAt": "2020-11-26T02:31:48Z", "author": {"login": "openinx"}, "path": "flink/src/test/java/org/apache/iceberg/flink/TestFlinkCatalogTablePartitions.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.flink;\n+\n+import java.util.List;\n+import org.apache.flink.table.catalog.CatalogPartitionSpec;\n+import org.apache.flink.table.catalog.ObjectPath;\n+import org.apache.flink.table.catalog.exceptions.TableNotExistException;\n+import org.apache.flink.table.catalog.exceptions.TableNotPartitionedException;\n+import org.apache.iceberg.AssertHelpers;\n+import org.apache.iceberg.relocated.com.google.common.collect.ImmutableMap;\n+import org.apache.iceberg.relocated.com.google.common.collect.Lists;\n+import org.junit.After;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+public class TestFlinkCatalogTablePartitions extends FlinkCatalogTestBase {\n+\n+  private String tableName = \"partition_table\";\n+\n+  public TestFlinkCatalogTablePartitions(String catalogName, String[] baseNamespace) {\n+    super(catalogName, baseNamespace);\n+  }\n+\n+  @Before\n+  public void before() {\n+    super.before();\n+    sql(\"CREATE DATABASE %s\", flinkDatabase);\n+    sql(\"USE CATALOG %s\", catalogName);\n+    sql(\"USE %s\", DATABASE);\n+  }\n+\n+  @After\n+  public void cleanNamespaces() {\n+    sql(\"DROP TABLE IF EXISTS %s.%s\", flinkDatabase, tableName);\n+    sql(\"DROP DATABASE IF EXISTS %s\", flinkDatabase);\n+    super.clean();\n+  }\n+\n+  @Test\n+  public void testListPartitionsWithUnpartitionedTable() throws TableNotExistException, TableNotPartitionedException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "345e4610a8e1d00ccd7bb98e1ee24e8df6ef3fdf"}, "originalPosition": 59}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM4OTU2MzU3", "url": "https://github.com/apache/iceberg/pull/1815#pullrequestreview-538956357", "createdAt": "2020-11-26T02:38:15Z", "commit": {"oid": "345e4610a8e1d00ccd7bb98e1ee24e8df6ef3fdf"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQwMjozODoxNVrOH6J3Tw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQwMjozODoxNVrOH6J3Tw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDc0MTA3MQ==", "bodyText": "Do we need this refresh sentence ?  For the newly loaded iceberg table will refresh the latest metadata automatically ,  so I don't think we need this.", "url": "https://github.com/apache/iceberg/pull/1815#discussion_r530741071", "createdAt": "2020-11-26T02:38:15Z", "author": {"login": "openinx"}, "path": "flink/src/test/java/org/apache/iceberg/flink/TestFlinkCatalogTablePartitions.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.flink;\n+\n+import java.util.List;\n+import org.apache.flink.table.catalog.CatalogPartitionSpec;\n+import org.apache.flink.table.catalog.ObjectPath;\n+import org.apache.flink.table.catalog.exceptions.TableNotExistException;\n+import org.apache.flink.table.catalog.exceptions.TableNotPartitionedException;\n+import org.apache.iceberg.AssertHelpers;\n+import org.apache.iceberg.relocated.com.google.common.collect.ImmutableMap;\n+import org.apache.iceberg.relocated.com.google.common.collect.Lists;\n+import org.junit.After;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+public class TestFlinkCatalogTablePartitions extends FlinkCatalogTestBase {\n+\n+  private String tableName = \"partition_table\";\n+\n+  public TestFlinkCatalogTablePartitions(String catalogName, String[] baseNamespace) {\n+    super(catalogName, baseNamespace);\n+  }\n+\n+  @Before\n+  public void before() {\n+    super.before();\n+    sql(\"CREATE DATABASE %s\", flinkDatabase);\n+    sql(\"USE CATALOG %s\", catalogName);\n+    sql(\"USE %s\", DATABASE);\n+  }\n+\n+  @After\n+  public void cleanNamespaces() {\n+    sql(\"DROP TABLE IF EXISTS %s.%s\", flinkDatabase, tableName);\n+    sql(\"DROP DATABASE IF EXISTS %s\", flinkDatabase);\n+    super.clean();\n+  }\n+\n+  @Test\n+  public void testListPartitionsWithUnpartitionedTable() throws TableNotExistException, TableNotPartitionedException {\n+    sql(\"CREATE TABLE %s (id INT, data VARCHAR)\", tableName);\n+    sql(\"INSERT INTO %s SELECT 1,'a'\", tableName);\n+\n+    ObjectPath objectPath = new ObjectPath(DATABASE, tableName);\n+    FlinkCatalog flinkCatalog = (FlinkCatalog) getTableEnv().getCatalog(catalogName).get();\n+    flinkCatalog.loadIcebergTable(objectPath).refresh();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "345e4610a8e1d00ccd7bb98e1ee24e8df6ef3fdf"}, "originalPosition": 65}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM4OTU2NDI3", "url": "https://github.com/apache/iceberg/pull/1815#pullrequestreview-538956427", "createdAt": "2020-11-26T02:38:30Z", "commit": {"oid": "345e4610a8e1d00ccd7bb98e1ee24e8df6ef3fdf"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQwMjozODozMVrOH6J3iA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQwMjozODozMVrOH6J3iA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDc0MTEyOA==", "bodyText": "ditto", "url": "https://github.com/apache/iceberg/pull/1815#discussion_r530741128", "createdAt": "2020-11-26T02:38:31Z", "author": {"login": "openinx"}, "path": "flink/src/test/java/org/apache/iceberg/flink/TestFlinkCatalogTablePartitions.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.flink;\n+\n+import java.util.List;\n+import org.apache.flink.table.catalog.CatalogPartitionSpec;\n+import org.apache.flink.table.catalog.ObjectPath;\n+import org.apache.flink.table.catalog.exceptions.TableNotExistException;\n+import org.apache.flink.table.catalog.exceptions.TableNotPartitionedException;\n+import org.apache.iceberg.AssertHelpers;\n+import org.apache.iceberg.relocated.com.google.common.collect.ImmutableMap;\n+import org.apache.iceberg.relocated.com.google.common.collect.Lists;\n+import org.junit.After;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+public class TestFlinkCatalogTablePartitions extends FlinkCatalogTestBase {\n+\n+  private String tableName = \"partition_table\";\n+\n+  public TestFlinkCatalogTablePartitions(String catalogName, String[] baseNamespace) {\n+    super(catalogName, baseNamespace);\n+  }\n+\n+  @Before\n+  public void before() {\n+    super.before();\n+    sql(\"CREATE DATABASE %s\", flinkDatabase);\n+    sql(\"USE CATALOG %s\", catalogName);\n+    sql(\"USE %s\", DATABASE);\n+  }\n+\n+  @After\n+  public void cleanNamespaces() {\n+    sql(\"DROP TABLE IF EXISTS %s.%s\", flinkDatabase, tableName);\n+    sql(\"DROP DATABASE IF EXISTS %s\", flinkDatabase);\n+    super.clean();\n+  }\n+\n+  @Test\n+  public void testListPartitionsWithUnpartitionedTable() throws TableNotExistException, TableNotPartitionedException {\n+    sql(\"CREATE TABLE %s (id INT, data VARCHAR)\", tableName);\n+    sql(\"INSERT INTO %s SELECT 1,'a'\", tableName);\n+\n+    ObjectPath objectPath = new ObjectPath(DATABASE, tableName);\n+    FlinkCatalog flinkCatalog = (FlinkCatalog) getTableEnv().getCatalog(catalogName).get();\n+    flinkCatalog.loadIcebergTable(objectPath).refresh();\n+    AssertHelpers.assertThrows(\"Should not list partitions for unpartitioned table.\",\n+        TableNotPartitionedException.class, () -> flinkCatalog.listPartitions(objectPath));\n+  }\n+\n+  @Test\n+  public void testListPartitionsWithPartitionedTable() throws TableNotExistException, TableNotPartitionedException {\n+    sql(\"CREATE TABLE %s (id INT, data VARCHAR) PARTITIONED BY (data)\", tableName);\n+    sql(\"INSERT INTO %s SELECT 1,'a'\", tableName);\n+    sql(\"INSERT INTO %s SELECT 2,'b'\", tableName);\n+\n+    ObjectPath objectPath = new ObjectPath(DATABASE, tableName);\n+    FlinkCatalog flinkCatalog = (FlinkCatalog) getTableEnv().getCatalog(catalogName).get();\n+    flinkCatalog.loadIcebergTable(objectPath).refresh();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "345e4610a8e1d00ccd7bb98e1ee24e8df6ef3fdf"}, "originalPosition": 78}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM4OTU2NTg0", "url": "https://github.com/apache/iceberg/pull/1815#pullrequestreview-538956584", "createdAt": "2020-11-26T02:39:04Z", "commit": {"oid": "345e4610a8e1d00ccd7bb98e1ee24e8df6ef3fdf"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "595bd9470214f4bc4ef9662060898fd34df7f91a", "author": {"user": null}, "url": "https://github.com/apache/iceberg/commit/595bd9470214f4bc4ef9662060898fd34df7f91a", "committedDate": "2020-11-26T11:01:08Z", "message": "add cacheEnabled for list partitions"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "8f4e2662653446d9150bf1ace5aff355ccaf3402", "author": {"user": null}, "url": "https://github.com/apache/iceberg/commit/8f4e2662653446d9150bf1ace5aff355ccaf3402", "committedDate": "2020-11-26T06:23:31Z", "message": "add cacheEnabled for list partitions"}, "afterCommit": {"oid": "595bd9470214f4bc4ef9662060898fd34df7f91a", "author": {"user": null}, "url": "https://github.com/apache/iceberg/commit/595bd9470214f4bc4ef9662060898fd34df7f91a", "committedDate": "2020-11-26T11:01:08Z", "message": "add cacheEnabled for list partitions"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM5MjcyMDk4", "url": "https://github.com/apache/iceberg/pull/1815#pullrequestreview-539272098", "createdAt": "2020-11-26T12:28:29Z", "commit": {"oid": "595bd9470214f4bc4ef9662060898fd34df7f91a"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3399, "cost": 1, "resetAt": "2021-10-29T19:57:52Z"}}}