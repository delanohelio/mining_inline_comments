{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI5NTczOTkx", "number": 1853, "title": "Core: Add utility StructLikeMap.", "bodyText": "This is a separate PR for https://github.com/apache/iceberg/pull/1818/files#diff-0d33a480c6c61ed9b4adaf5715a2ef66ca2eb7d3c999328166e7870851e35589R31", "createdAt": "2020-11-30T14:08:24Z", "url": "https://github.com/apache/iceberg/pull/1853", "merged": true, "mergeCommit": {"oid": "19ec1d47f57d5d45a58a2bb2237b3fb1d00f4c66"}, "closed": true, "closedAt": "2020-12-01T19:08:21Z", "author": {"login": "openinx"}, "timelineItems": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdhl6PJAH2gAyNTI5NTczOTkxOmE1YzRlM2EzZmM1M2YwZWM4OTQ4MGQ2NTk2ZmIyNjNhZmQxOWI4ZjY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdhw9a6AH2gAyNTI5NTczOTkxOjNiOGQ0OGVkYmU1OTJmNDAzMWM5ZmMyZDI5YWI2M2RkMjFjMThhM2U=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "a5c4e3a3fc53f0ec89480d6596fb263afd19b8f6", "author": {"user": {"login": "openinx", "name": "openinx"}}, "url": "https://github.com/apache/iceberg/commit/a5c4e3a3fc53f0ec89480d6596fb263afd19b8f6", "committedDate": "2020-11-30T14:06:50Z", "message": "Core: Add utility StructLikeMap."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b155f239669cc69843eea331a764d3221ced7eb6", "author": {"user": {"login": "openinx", "name": "openinx"}}, "url": "https://github.com/apache/iceberg/commit/b155f239669cc69843eea331a764d3221ced7eb6", "committedDate": "2020-11-30T15:27:47Z", "message": "Minor fixes"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQxMzM0OTc4", "url": "https://github.com/apache/iceberg/pull/1853#pullrequestreview-541334978", "createdAt": "2020-11-30T22:08:59Z", "commit": {"oid": "b155f239669cc69843eea331a764d3221ced7eb6"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQyMjowODo1OVrOH8PzvQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQyMjowODo1OVrOH8PzvQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjkzNTYxMw==", "bodyText": "is ThreadLocal serializable? Should StructLikeMap be?", "url": "https://github.com/apache/iceberg/pull/1853#discussion_r532935613", "createdAt": "2020-11-30T22:08:59Z", "author": {"login": "johnclara"}, "path": "core/src/main/java/org/apache/iceberg/util/StructLikeMap.java", "diffHunk": "@@ -0,0 +1,184 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.util;\n+\n+import java.util.AbstractMap;\n+import java.util.Collection;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Set;\n+import org.apache.iceberg.StructLike;\n+import org.apache.iceberg.relocated.com.google.common.collect.Maps;\n+import org.apache.iceberg.relocated.com.google.common.collect.Sets;\n+import org.apache.iceberg.types.Types;\n+\n+public class StructLikeMap<T> extends AbstractMap<StructLike, T> implements Map<StructLike, T> {\n+\n+  public static <T> StructLikeMap<T> create(Types.StructType type) {\n+    return new StructLikeMap<>(type);\n+  }\n+\n+  private final Types.StructType type;\n+  private final Map<StructLikeWrapper, T> wrapperMap;\n+  private final ThreadLocal<StructLikeWrapper> wrappers;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b155f239669cc69843eea331a764d3221ced7eb6"}, "originalPosition": 40}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQxMzU4MDI3", "url": "https://github.com/apache/iceberg/pull/1853#pullrequestreview-541358027", "createdAt": "2020-11-30T22:49:59Z", "commit": {"oid": "b155f239669cc69843eea331a764d3221ced7eb6"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQyMjo0OTo1OVrOH8Q96g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQyMjo0OTo1OVrOH8Q96g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjk1NDYwMg==", "bodyText": "Comment should be \"don't hold a reference to the key\".", "url": "https://github.com/apache/iceberg/pull/1853#discussion_r532954602", "createdAt": "2020-11-30T22:49:59Z", "author": {"login": "rdblue"}, "path": "core/src/main/java/org/apache/iceberg/util/StructLikeMap.java", "diffHunk": "@@ -0,0 +1,184 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.util;\n+\n+import java.util.AbstractMap;\n+import java.util.Collection;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Set;\n+import org.apache.iceberg.StructLike;\n+import org.apache.iceberg.relocated.com.google.common.collect.Maps;\n+import org.apache.iceberg.relocated.com.google.common.collect.Sets;\n+import org.apache.iceberg.types.Types;\n+\n+public class StructLikeMap<T> extends AbstractMap<StructLike, T> implements Map<StructLike, T> {\n+\n+  public static <T> StructLikeMap<T> create(Types.StructType type) {\n+    return new StructLikeMap<>(type);\n+  }\n+\n+  private final Types.StructType type;\n+  private final Map<StructLikeWrapper, T> wrapperMap;\n+  private final ThreadLocal<StructLikeWrapper> wrappers;\n+\n+  private StructLikeMap(Types.StructType type) {\n+    this.type = type;\n+    this.wrapperMap = Maps.newHashMap();\n+    this.wrappers = ThreadLocal.withInitial(() -> StructLikeWrapper.forType(type));\n+  }\n+\n+  @Override\n+  public int size() {\n+    return wrapperMap.size();\n+  }\n+\n+  @Override\n+  public boolean isEmpty() {\n+    return wrapperMap.isEmpty();\n+  }\n+\n+  @Override\n+  public boolean containsKey(Object key) {\n+    if (key instanceof StructLike) {\n+      StructLikeWrapper wrapper = wrappers.get();\n+      boolean result = wrapperMap.containsKey(wrapper.set((StructLike) key));\n+      wrapper.set(null);\n+      return result;\n+    }\n+    return false;\n+  }\n+\n+  @Override\n+  public boolean containsValue(Object value) {\n+    return wrapperMap.containsValue(value);\n+  }\n+\n+  @Override\n+  public T get(Object key) {\n+    if (key instanceof StructLike) {\n+      StructLikeWrapper wrapper = wrappers.get();\n+      T value = wrapperMap.get(wrapper.set((StructLike) key));\n+      wrapper.set(null);\n+      return value;\n+    }\n+    return null;\n+  }\n+\n+  @Override\n+  public T put(StructLike key, T value) {\n+    return wrapperMap.put(StructLikeWrapper.forType(type).set(key), value);\n+  }\n+\n+  @Override\n+  public T remove(Object key) {\n+    if (key instanceof StructLike) {\n+      StructLikeWrapper wrapper = wrappers.get();\n+      T value = wrapperMap.remove(wrapper.set((StructLike) key));\n+      wrapper.set(null); // don't hold a reference to the value.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b155f239669cc69843eea331a764d3221ced7eb6"}, "originalPosition": 95}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQxNDEwNzg4", "url": "https://github.com/apache/iceberg/pull/1853#pullrequestreview-541410788", "createdAt": "2020-12-01T00:56:03Z", "commit": {"oid": "b155f239669cc69843eea331a764d3221ced7eb6"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQwMDo1NjowNFrOH8T3_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQwMDo1NjowNFrOH8T3_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzAwMjIzNg==", "bodyText": "This can be delegated to the implementation in AbstractMap, since put will automatically wrap the key.", "url": "https://github.com/apache/iceberg/pull/1853#discussion_r533002236", "createdAt": "2020-12-01T00:56:04Z", "author": {"login": "rdblue"}, "path": "core/src/main/java/org/apache/iceberg/util/StructLikeMap.java", "diffHunk": "@@ -0,0 +1,184 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.util;\n+\n+import java.util.AbstractMap;\n+import java.util.Collection;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Set;\n+import org.apache.iceberg.StructLike;\n+import org.apache.iceberg.relocated.com.google.common.collect.Maps;\n+import org.apache.iceberg.relocated.com.google.common.collect.Sets;\n+import org.apache.iceberg.types.Types;\n+\n+public class StructLikeMap<T> extends AbstractMap<StructLike, T> implements Map<StructLike, T> {\n+\n+  public static <T> StructLikeMap<T> create(Types.StructType type) {\n+    return new StructLikeMap<>(type);\n+  }\n+\n+  private final Types.StructType type;\n+  private final Map<StructLikeWrapper, T> wrapperMap;\n+  private final ThreadLocal<StructLikeWrapper> wrappers;\n+\n+  private StructLikeMap(Types.StructType type) {\n+    this.type = type;\n+    this.wrapperMap = Maps.newHashMap();\n+    this.wrappers = ThreadLocal.withInitial(() -> StructLikeWrapper.forType(type));\n+  }\n+\n+  @Override\n+  public int size() {\n+    return wrapperMap.size();\n+  }\n+\n+  @Override\n+  public boolean isEmpty() {\n+    return wrapperMap.isEmpty();\n+  }\n+\n+  @Override\n+  public boolean containsKey(Object key) {\n+    if (key instanceof StructLike) {\n+      StructLikeWrapper wrapper = wrappers.get();\n+      boolean result = wrapperMap.containsKey(wrapper.set((StructLike) key));\n+      wrapper.set(null);\n+      return result;\n+    }\n+    return false;\n+  }\n+\n+  @Override\n+  public boolean containsValue(Object value) {\n+    return wrapperMap.containsValue(value);\n+  }\n+\n+  @Override\n+  public T get(Object key) {\n+    if (key instanceof StructLike) {\n+      StructLikeWrapper wrapper = wrappers.get();\n+      T value = wrapperMap.get(wrapper.set((StructLike) key));\n+      wrapper.set(null);\n+      return value;\n+    }\n+    return null;\n+  }\n+\n+  @Override\n+  public T put(StructLike key, T value) {\n+    return wrapperMap.put(StructLikeWrapper.forType(type).set(key), value);\n+  }\n+\n+  @Override\n+  public T remove(Object key) {\n+    if (key instanceof StructLike) {\n+      StructLikeWrapper wrapper = wrappers.get();\n+      T value = wrapperMap.remove(wrapper.set((StructLike) key));\n+      wrapper.set(null); // don't hold a reference to the value.\n+      return value;\n+    }\n+    return null;\n+  }\n+\n+  @Override\n+  public void putAll(Map<? extends StructLike, ? extends T> keyValues) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b155f239669cc69843eea331a764d3221ced7eb6"}, "originalPosition": 102}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQxNDExNjE0", "url": "https://github.com/apache/iceberg/pull/1853#pullrequestreview-541411614", "createdAt": "2020-12-01T00:58:22Z", "commit": {"oid": "b155f239669cc69843eea331a764d3221ced7eb6"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQwMDo1ODoyMlrOH8T6wA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQwMDo1ODoyMlrOH8T6wA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzAwMjk0NA==", "bodyText": "Could you break this method into multiple test cases?\nA single long method hides problems because it can only fail once, while a suite of test cases that each focuses on one thing can show more information from a test run.", "url": "https://github.com/apache/iceberg/pull/1853#discussion_r533002944", "createdAt": "2020-12-01T00:58:22Z", "author": {"login": "rdblue"}, "path": "core/src/test/java/org/apache/iceberg/util/TestStructLikeMap.java", "diffHunk": "@@ -0,0 +1,109 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.util;\n+\n+import java.util.Collection;\n+import java.util.Map;\n+import java.util.Set;\n+import org.apache.iceberg.StructLike;\n+import org.apache.iceberg.data.GenericRecord;\n+import org.apache.iceberg.data.Record;\n+import org.apache.iceberg.relocated.com.google.common.collect.ImmutableMap;\n+import org.apache.iceberg.relocated.com.google.common.collect.ImmutableSet;\n+import org.apache.iceberg.relocated.com.google.common.collect.Sets;\n+import org.apache.iceberg.types.Types;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+public class TestStructLikeMap {\n+\n+  @Test\n+  public void testSimpleData() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b155f239669cc69843eea331a764d3221ced7eb6"}, "originalPosition": 38}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3b8d48edbe592f4031c9fc2d29ab63dd21c18a3e", "author": {"user": {"login": "openinx", "name": "openinx"}}, "url": "https://github.com/apache/iceberg/commit/3b8d48edbe592f4031c9fc2d29ab63dd21c18a3e", "committedDate": "2020-12-01T02:59:16Z", "message": "Addressing the comments."}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3469, "cost": 1, "resetAt": "2021-10-29T19:57:52Z"}}}