{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE5NTYxMjQ2", "number": 1754, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQwMzoyODowNFrOE3-TcA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQxNzoxNTowNVrOE5l4Bw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI3MTI3OTIwOnYy", "diffSide": "RIGHT", "path": "aws/src/main/java/org/apache/iceberg/aws/s3/S3OutputStream.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQwMzoyODowNFrOHxoIhw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQwMzo0ODozOFrOHxo9Ww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTc5OTgxNQ==", "bodyText": "Q: Why isn't the parent super.close() inside the try block as well?", "url": "https://github.com/apache/iceberg/pull/1754#discussion_r521799815", "createdAt": "2020-11-12T03:28:04Z", "author": {"login": "rdsr"}, "path": "aws/src/main/java/org/apache/iceberg/aws/s3/S3OutputStream.java", "diffHunk": "@@ -91,9 +104,36 @@ public void close() throws IOException {\n     try {\n       stream.close();\n \n-      s3.putObject(\n-          PutObjectRequest.builder().bucket(location.bucket()).key(location.key()).build(),\n-          RequestBody.fromFile(stagingFile));\n+      PutObjectRequest.Builder requestBuilder = PutObjectRequest.builder()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "62206287545fcd4b06c341a6b5bdd8d727e5cffc"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTgxMTEwMQ==", "bodyText": "It's called on line 101", "url": "https://github.com/apache/iceberg/pull/1754#discussion_r521811101", "createdAt": "2020-11-12T03:45:18Z", "author": {"login": "jackye1995"}, "path": "aws/src/main/java/org/apache/iceberg/aws/s3/S3OutputStream.java", "diffHunk": "@@ -91,9 +104,36 @@ public void close() throws IOException {\n     try {\n       stream.close();\n \n-      s3.putObject(\n-          PutObjectRequest.builder().bucket(location.bucket()).key(location.key()).build(),\n-          RequestBody.fromFile(stagingFile));\n+      PutObjectRequest.Builder requestBuilder = PutObjectRequest.builder()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTc5OTgxNQ=="}, "originalCommit": {"oid": "62206287545fcd4b06c341a6b5bdd8d727e5cffc"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTgxMzMzOQ==", "bodyText": "Ah sorry misread the question. Technically super.close() calls PositionOutputStream.close() calls OutputStream.close() which does nothing, so I think it is fine to not have it in the try block.", "url": "https://github.com/apache/iceberg/pull/1754#discussion_r521813339", "createdAt": "2020-11-12T03:48:38Z", "author": {"login": "jackye1995"}, "path": "aws/src/main/java/org/apache/iceberg/aws/s3/S3OutputStream.java", "diffHunk": "@@ -91,9 +104,36 @@ public void close() throws IOException {\n     try {\n       stream.close();\n \n-      s3.putObject(\n-          PutObjectRequest.builder().bucket(location.bucket()).key(location.key()).build(),\n-          RequestBody.fromFile(stagingFile));\n+      PutObjectRequest.Builder requestBuilder = PutObjectRequest.builder()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTc5OTgxNQ=="}, "originalCommit": {"oid": "62206287545fcd4b06c341a6b5bdd8d727e5cffc"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI3NDQ2MzA0OnYy", "diffSide": "RIGHT", "path": "aws/src/integration/java/org/apache/iceberg/aws/AwsIntegTestUtil.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQxNzo0NzoyNVrOHyGiyA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQxNzo1NDoxOVrOHyG0Lg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjI5ODA1Ng==", "bodyText": "I assume these tests are not part of the regular build?", "url": "https://github.com/apache/iceberg/pull/1754#discussion_r522298056", "createdAt": "2020-11-12T17:47:25Z", "author": {"login": "rdsr"}, "path": "aws/src/integration/java/org/apache/iceberg/aws/AwsIntegTestUtil.java", "diffHunk": "@@ -0,0 +1,58 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.aws;\n+\n+import java.util.stream.Collectors;\n+import software.amazon.awssdk.services.s3.S3Client;\n+import software.amazon.awssdk.services.s3.model.Delete;\n+import software.amazon.awssdk.services.s3.model.DeleteObjectsRequest;\n+import software.amazon.awssdk.services.s3.model.ListObjectsV2Request;\n+import software.amazon.awssdk.services.s3.model.ListObjectsV2Response;\n+import software.amazon.awssdk.services.s3.model.ObjectIdentifier;\n+\n+public class AwsIntegTestUtil {\n+\n+  private AwsIntegTestUtil() {\n+  }\n+\n+  /**\n+   * Set the environment variable AWS_TEST_BUCKET for a default bucket to use for testing\n+   * @return bucket name\n+   */\n+  public static String testBucketName() {\n+    return System.getenv(\"AWS_TEST_BUCKET\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1069237d7861c45c72e5da7dec5ed13e2561dd03"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjMwMjUxMA==", "bodyText": "No", "url": "https://github.com/apache/iceberg/pull/1754#discussion_r522302510", "createdAt": "2020-11-12T17:54:19Z", "author": {"login": "jackye1995"}, "path": "aws/src/integration/java/org/apache/iceberg/aws/AwsIntegTestUtil.java", "diffHunk": "@@ -0,0 +1,58 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.aws;\n+\n+import java.util.stream.Collectors;\n+import software.amazon.awssdk.services.s3.S3Client;\n+import software.amazon.awssdk.services.s3.model.Delete;\n+import software.amazon.awssdk.services.s3.model.DeleteObjectsRequest;\n+import software.amazon.awssdk.services.s3.model.ListObjectsV2Request;\n+import software.amazon.awssdk.services.s3.model.ListObjectsV2Response;\n+import software.amazon.awssdk.services.s3.model.ObjectIdentifier;\n+\n+public class AwsIntegTestUtil {\n+\n+  private AwsIntegTestUtil() {\n+  }\n+\n+  /**\n+   * Set the environment variable AWS_TEST_BUCKET for a default bucket to use for testing\n+   * @return bucket name\n+   */\n+  public static String testBucketName() {\n+    return System.getenv(\"AWS_TEST_BUCKET\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjI5ODA1Ng=="}, "originalCommit": {"oid": "1069237d7861c45c72e5da7dec5ed13e2561dd03"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI4MDQ5OTg3OnYy", "diffSide": "RIGHT", "path": "aws/src/main/java/org/apache/iceberg/aws/s3/S3FileIO.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QyMjowOTo0M1rOHzBQBA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QyMjowOTo0M1rOHzBQBA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzI1OTkwOA==", "bodyText": "As mentioned in #1767, it would be nice to wrap these properties in AwsCatalogProperties as a utility class and just keep reference to the properties as opposed to enumerating them here an in BaseS3File.", "url": "https://github.com/apache/iceberg/pull/1754#discussion_r523259908", "createdAt": "2020-11-13T22:09:43Z", "author": {"login": "danielcweeks"}, "path": "aws/src/main/java/org/apache/iceberg/aws/s3/S3FileIO.java", "diffHunk": "@@ -73,4 +89,19 @@ private S3Client client() {\n     }\n     return client;\n   }\n+\n+  @Override\n+  public void initialize(Map<String, String> properties) {\n+    this.sseType = properties.getOrDefault(AwsCatalogProperties.S3_SSE_TYPE, AwsCatalogProperties.S3_SSE_TYPE_NONE);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1069237d7861c45c72e5da7dec5ed13e2561dd03"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI4MDU0MDYwOnYy", "diffSide": "RIGHT", "path": "aws/src/main/java/org/apache/iceberg/aws/s3/S3URI.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QyMjoyODoyNVrOHzBocA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQxODo0MDozNFrOH0MYkA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzI2NjE2MA==", "bodyText": "I'm trying to understand the reason for these (and below split changes).  Is this relevant to the larger PR?  My understanding is that this really doesn't change the behavior.", "url": "https://github.com/apache/iceberg/pull/1754#discussion_r523266160", "createdAt": "2020-11-13T22:28:25Z", "author": {"login": "danielcweeks"}, "path": "aws/src/main/java/org/apache/iceberg/aws/s3/S3URI.java", "diffHunk": "@@ -57,7 +57,7 @@\n     Preconditions.checkNotNull(location, \"Location cannot be null.\");\n \n     this.location = location;\n-    String [] schemeSplit = location.split(SCHEME_DELIM);\n+    String [] schemeSplit = location.split(SCHEME_DELIM, -1);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1069237d7861c45c72e5da7dec5ed13e2561dd03"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDQ5MDg5Ng==", "bodyText": "It's not, I am just fixing errorprone warnings along the way. Let me remove them since this PR seems pretty big at this point of time.", "url": "https://github.com/apache/iceberg/pull/1754#discussion_r524490896", "createdAt": "2020-11-16T18:40:34Z", "author": {"login": "jackye1995"}, "path": "aws/src/main/java/org/apache/iceberg/aws/s3/S3URI.java", "diffHunk": "@@ -57,7 +57,7 @@\n     Preconditions.checkNotNull(location, \"Location cannot be null.\");\n \n     this.location = location;\n-    String [] schemeSplit = location.split(SCHEME_DELIM);\n+    String [] schemeSplit = location.split(SCHEME_DELIM, -1);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzI2NjE2MA=="}, "originalCommit": {"oid": "1069237d7861c45c72e5da7dec5ed13e2561dd03"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI4MDU4ODczOnYy", "diffSide": "RIGHT", "path": "aws/src/main/java/org/apache/iceberg/aws/AwsCatalogProperties.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QyMjo1MjowNFrOHzCE_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQxODozODo1M1rOH0MT5Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzI3MzQ2OQ==", "bodyText": "These four types might make sense to turn into an enumeration.  Also, are these official names for the encryption types?  I just find s3 not to be terribly descriptive for the type of encryption.", "url": "https://github.com/apache/iceberg/pull/1754#discussion_r523273469", "createdAt": "2020-11-13T22:52:04Z", "author": {"login": "danielcweeks"}, "path": "aws/src/main/java/org/apache/iceberg/aws/AwsCatalogProperties.java", "diffHunk": "@@ -0,0 +1,68 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.aws;\n+\n+public class AwsCatalogProperties {\n+\n+  private AwsCatalogProperties() {\n+  }\n+\n+  /**\n+   * Type of S3 Server side encryption used, default to {@link AwsCatalogProperties#S3_SSE_TYPE_NONE}.\n+   */\n+  public static final String S3_SSE_TYPE = \"s3-sse-type\";\n+\n+  /**\n+   * No server side encryption.\n+   */\n+  public static final String S3_SSE_TYPE_NONE = \"none\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1069237d7861c45c72e5da7dec5ed13e2561dd03"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDQ4OTcwMQ==", "bodyText": "Yeah, but unfortunately that's the official name. I am hesitated to turn them into enums, since it seems like in Iceberg people just use string instead of enum in many different places.", "url": "https://github.com/apache/iceberg/pull/1754#discussion_r524489701", "createdAt": "2020-11-16T18:38:53Z", "author": {"login": "jackye1995"}, "path": "aws/src/main/java/org/apache/iceberg/aws/AwsCatalogProperties.java", "diffHunk": "@@ -0,0 +1,68 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.aws;\n+\n+public class AwsCatalogProperties {\n+\n+  private AwsCatalogProperties() {\n+  }\n+\n+  /**\n+   * Type of S3 Server side encryption used, default to {@link AwsCatalogProperties#S3_SSE_TYPE_NONE}.\n+   */\n+  public static final String S3_SSE_TYPE = \"s3-sse-type\";\n+\n+  /**\n+   * No server side encryption.\n+   */\n+  public static final String S3_SSE_TYPE_NONE = \"none\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzI3MzQ2OQ=="}, "originalCommit": {"oid": "1069237d7861c45c72e5da7dec5ed13e2561dd03"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI4ODIyNzU0OnYy", "diffSide": "RIGHT", "path": "aws/src/main/java/org/apache/iceberg/aws/AwsCatalogProperties.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQxNzoxMTowMVrOH0I3Xw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQxNzoxMTowMVrOH0I3Xw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDQzMzI0Nw==", "bodyText": "We might want to consider shortening this to just AwsProperties because while you can define them at the catalog level, tables can deviate and it would make sense to tune various properties for specific datasets within a catalog.", "url": "https://github.com/apache/iceberg/pull/1754#discussion_r524433247", "createdAt": "2020-11-16T17:11:01Z", "author": {"login": "danielcweeks"}, "path": "aws/src/main/java/org/apache/iceberg/aws/AwsCatalogProperties.java", "diffHunk": "@@ -0,0 +1,68 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.aws;\n+\n+public class AwsCatalogProperties {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1069237d7861c45c72e5da7dec5ed13e2561dd03"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI4ODI0ODM5OnYy", "diffSide": "RIGHT", "path": "aws/src/main/java/org/apache/iceberg/aws/s3/S3OutputFile.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQxNzoxNTowNVrOH0JDqg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQxNzoxOToyN1rOH0JOuw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDQzNjM5NA==", "bodyText": "As I mentioned in the comment above, this is what I think we want to try to avoid where we have to add constructor params per property we need to add.  There are already a few others we need to push through (multipart size, canned acl, etc.).  I think turning the AwsProperties into a wrapper would help as we expand this functionality.", "url": "https://github.com/apache/iceberg/pull/1754#discussion_r524436394", "createdAt": "2020-11-16T17:15:05Z", "author": {"login": "danielcweeks"}, "path": "aws/src/main/java/org/apache/iceberg/aws/s3/S3OutputFile.java", "diffHunk": "@@ -29,7 +30,11 @@\n \n public class S3OutputFile extends BaseS3File implements OutputFile {\n   public S3OutputFile(S3Client client, S3URI uri) {\n-    super(client, uri);\n+    this(client, uri, AwsCatalogProperties.S3_SSE_TYPE_NONE, null, null);\n+  }\n+\n+  public S3OutputFile(S3Client client, S3URI uri, String sseType, String sseKey, String sseMd5) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1069237d7861c45c72e5da7dec5ed13e2561dd03"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDQzOTIyNw==", "bodyText": "Yes I agree it sounds better to have all configuration in the separated class. Let me update it.", "url": "https://github.com/apache/iceberg/pull/1754#discussion_r524439227", "createdAt": "2020-11-16T17:19:27Z", "author": {"login": "jackye1995"}, "path": "aws/src/main/java/org/apache/iceberg/aws/s3/S3OutputFile.java", "diffHunk": "@@ -29,7 +30,11 @@\n \n public class S3OutputFile extends BaseS3File implements OutputFile {\n   public S3OutputFile(S3Client client, S3URI uri) {\n-    super(client, uri);\n+    this(client, uri, AwsCatalogProperties.S3_SSE_TYPE_NONE, null, null);\n+  }\n+\n+  public S3OutputFile(S3Client client, S3URI uri, String sseType, String sseKey, String sseMd5) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDQzNjM5NA=="}, "originalCommit": {"oid": "1069237d7861c45c72e5da7dec5ed13e2561dd03"}, "originalPosition": 16}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3436, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}