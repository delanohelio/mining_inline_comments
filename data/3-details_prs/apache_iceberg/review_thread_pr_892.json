{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk4NzMxNzcz", "number": 892, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxOTozNDoyNlrODvRnKA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxOTo1MTo0NVrODvR98A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwODk4MjE2OnYy", "diffSide": "RIGHT", "path": "spark/src/test/java/org/apache/iceberg/spark/data/GenericsHelpers.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxOTozNDoyNlrOGBm27A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxOTozNDoyNlrOGBm27A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDMzODQxMg==", "bodyText": "nit: might help to know which is the expected and which is the actual record for comparison", "url": "https://github.com/apache/iceberg/pull/892#discussion_r404338412", "createdAt": "2020-04-06T19:34:26Z", "author": {"login": "rdsr"}, "path": "spark/src/test/java/org/apache/iceberg/spark/data/GenericsHelpers.java", "diffHunk": "@@ -0,0 +1,293 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.spark.data;\n+\n+import com.google.common.collect.Lists;\n+import java.math.BigDecimal;\n+import java.nio.ByteBuffer;\n+import java.sql.Timestamp;\n+import java.time.Instant;\n+import java.time.LocalDate;\n+import java.time.OffsetDateTime;\n+import java.time.ZoneOffset;\n+import java.time.temporal.ChronoUnit;\n+import java.util.Collection;\n+import java.util.Date;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.UUID;\n+import org.apache.iceberg.data.Record;\n+import org.apache.iceberg.types.Type;\n+import org.apache.iceberg.types.Types;\n+import org.apache.spark.sql.Row;\n+import org.apache.spark.sql.catalyst.InternalRow;\n+import org.apache.spark.sql.catalyst.util.ArrayData;\n+import org.apache.spark.sql.catalyst.util.MapData;\n+import org.apache.spark.sql.types.Decimal;\n+import org.apache.spark.unsafe.types.UTF8String;\n+import org.junit.Assert;\n+import scala.collection.Seq;\n+\n+import static org.apache.iceberg.spark.SparkSchemaUtil.convert;\n+import static scala.collection.JavaConverters.mapAsJavaMapConverter;\n+import static scala.collection.JavaConverters.seqAsJavaListConverter;\n+\n+public class GenericsHelpers {\n+  private GenericsHelpers() {\n+  }\n+\n+  private static final OffsetDateTime EPOCH = Instant.ofEpochMilli(0L).atOffset(ZoneOffset.UTC);\n+  private static final LocalDate EPOCH_DAY = EPOCH.toLocalDate();\n+\n+  public static void assertEqualsSafe(Types.StructType struct, Record rec, Row row) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b0c174e2b4dad298c8fa662701a86c5acc1d0c2"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwOTA0MDQ4OnYy", "diffSide": "RIGHT", "path": "spark/src/test/java/org/apache/iceberg/spark/data/GenericsHelpers.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxOTo1MTo0NVrOGBna9g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQyMTozMTo1MlrOGBqsUw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDM0NzYzOA==", "bodyText": "seems like actual can have more elements. Is that ok?", "url": "https://github.com/apache/iceberg/pull/892#discussion_r404347638", "createdAt": "2020-04-06T19:51:45Z", "author": {"login": "rdsr"}, "path": "spark/src/test/java/org/apache/iceberg/spark/data/GenericsHelpers.java", "diffHunk": "@@ -0,0 +1,293 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.spark.data;\n+\n+import com.google.common.collect.Lists;\n+import java.math.BigDecimal;\n+import java.nio.ByteBuffer;\n+import java.sql.Timestamp;\n+import java.time.Instant;\n+import java.time.LocalDate;\n+import java.time.OffsetDateTime;\n+import java.time.ZoneOffset;\n+import java.time.temporal.ChronoUnit;\n+import java.util.Collection;\n+import java.util.Date;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.UUID;\n+import org.apache.iceberg.data.Record;\n+import org.apache.iceberg.types.Type;\n+import org.apache.iceberg.types.Types;\n+import org.apache.spark.sql.Row;\n+import org.apache.spark.sql.catalyst.InternalRow;\n+import org.apache.spark.sql.catalyst.util.ArrayData;\n+import org.apache.spark.sql.catalyst.util.MapData;\n+import org.apache.spark.sql.types.Decimal;\n+import org.apache.spark.unsafe.types.UTF8String;\n+import org.junit.Assert;\n+import scala.collection.Seq;\n+\n+import static org.apache.iceberg.spark.SparkSchemaUtil.convert;\n+import static scala.collection.JavaConverters.mapAsJavaMapConverter;\n+import static scala.collection.JavaConverters.seqAsJavaListConverter;\n+\n+public class GenericsHelpers {\n+  private GenericsHelpers() {\n+  }\n+\n+  private static final OffsetDateTime EPOCH = Instant.ofEpochMilli(0L).atOffset(ZoneOffset.UTC);\n+  private static final LocalDate EPOCH_DAY = EPOCH.toLocalDate();\n+\n+  public static void assertEqualsSafe(Types.StructType struct, Record rec, Row row) {\n+    List<Types.NestedField> fields = struct.fields();\n+    for (int i = 0; i < fields.size(); i += 1) {\n+      Type fieldType = fields.get(i).type();\n+\n+      Object expectedValue = rec.get(i);\n+      Object actualValue = row.get(i);\n+\n+      assertEqualsSafe(fieldType, expectedValue, actualValue);\n+    }\n+  }\n+\n+  private static void assertEqualsSafe(Types.ListType list, Collection<?> expected, List<?> actual) {\n+    Type elementType = list.elementType();\n+    List<?> expectedElements = Lists.newArrayList(expected);\n+    for (int i = 0; i < expectedElements.size(); i += 1) {\n+      Object expectedValue = expectedElements.get(i);\n+      Object actualValue = actual.get(i);\n+\n+      assertEqualsSafe(elementType, expectedValue, actualValue);\n+    }\n+  }\n+\n+  private static void assertEqualsSafe(Types.MapType map,\n+                                       Map<?, ?> expected, Map<?, ?> actual) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b0c174e2b4dad298c8fa662701a86c5acc1d0c2"}, "originalPosition": 83}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDQwMTIzNQ==", "bodyText": "Added an assertion for this.", "url": "https://github.com/apache/iceberg/pull/892#discussion_r404401235", "createdAt": "2020-04-06T21:31:52Z", "author": {"login": "rdblue"}, "path": "spark/src/test/java/org/apache/iceberg/spark/data/GenericsHelpers.java", "diffHunk": "@@ -0,0 +1,293 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.spark.data;\n+\n+import com.google.common.collect.Lists;\n+import java.math.BigDecimal;\n+import java.nio.ByteBuffer;\n+import java.sql.Timestamp;\n+import java.time.Instant;\n+import java.time.LocalDate;\n+import java.time.OffsetDateTime;\n+import java.time.ZoneOffset;\n+import java.time.temporal.ChronoUnit;\n+import java.util.Collection;\n+import java.util.Date;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.UUID;\n+import org.apache.iceberg.data.Record;\n+import org.apache.iceberg.types.Type;\n+import org.apache.iceberg.types.Types;\n+import org.apache.spark.sql.Row;\n+import org.apache.spark.sql.catalyst.InternalRow;\n+import org.apache.spark.sql.catalyst.util.ArrayData;\n+import org.apache.spark.sql.catalyst.util.MapData;\n+import org.apache.spark.sql.types.Decimal;\n+import org.apache.spark.unsafe.types.UTF8String;\n+import org.junit.Assert;\n+import scala.collection.Seq;\n+\n+import static org.apache.iceberg.spark.SparkSchemaUtil.convert;\n+import static scala.collection.JavaConverters.mapAsJavaMapConverter;\n+import static scala.collection.JavaConverters.seqAsJavaListConverter;\n+\n+public class GenericsHelpers {\n+  private GenericsHelpers() {\n+  }\n+\n+  private static final OffsetDateTime EPOCH = Instant.ofEpochMilli(0L).atOffset(ZoneOffset.UTC);\n+  private static final LocalDate EPOCH_DAY = EPOCH.toLocalDate();\n+\n+  public static void assertEqualsSafe(Types.StructType struct, Record rec, Row row) {\n+    List<Types.NestedField> fields = struct.fields();\n+    for (int i = 0; i < fields.size(); i += 1) {\n+      Type fieldType = fields.get(i).type();\n+\n+      Object expectedValue = rec.get(i);\n+      Object actualValue = row.get(i);\n+\n+      assertEqualsSafe(fieldType, expectedValue, actualValue);\n+    }\n+  }\n+\n+  private static void assertEqualsSafe(Types.ListType list, Collection<?> expected, List<?> actual) {\n+    Type elementType = list.elementType();\n+    List<?> expectedElements = Lists.newArrayList(expected);\n+    for (int i = 0; i < expectedElements.size(); i += 1) {\n+      Object expectedValue = expectedElements.get(i);\n+      Object actualValue = actual.get(i);\n+\n+      assertEqualsSafe(elementType, expectedValue, actualValue);\n+    }\n+  }\n+\n+  private static void assertEqualsSafe(Types.MapType map,\n+                                       Map<?, ?> expected, Map<?, ?> actual) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDM0NzYzOA=="}, "originalCommit": {"oid": "5b0c174e2b4dad298c8fa662701a86c5acc1d0c2"}, "originalPosition": 83}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2880, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}