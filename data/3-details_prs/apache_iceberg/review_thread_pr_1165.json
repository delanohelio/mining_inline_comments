{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ0MjIyODMx", "number": 1165, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNVQwMjo1ODo0OFrOELbHQg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQwNjo0NzowOVrOELjzBg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwNDE0MDE4OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/apache/iceberg/util/CharSequenceSet.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNVQwMjo1ODo0OFrOGs_IJA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQwMjoxMzoxN1rOGtG7Qw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTgyNDgwNA==", "bodyText": "Maybe you can use guava Suppliers.memoize to help lazy-init.", "url": "https://github.com/apache/iceberg/pull/1165#discussion_r449824804", "createdAt": "2020-07-05T02:58:48Z", "author": {"login": "JingsongLi"}, "path": "api/src/main/java/org/apache/iceberg/util/CharSequenceSet.java", "diffHunk": "@@ -54,10 +54,21 @@ public boolean isEmpty() {\n     return wrapperSet.isEmpty();\n   }\n \n+  public CharSequenceWrapper wrapper() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cf24e2e4e0d162cb86dcdb06ad98bf39f7ed4c66"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTkxNjIzOQ==", "bodyText": "Thanks for pointing this out. I didn't know about Suppliers.memoize and it looks useful.\nI'm not sure that we want to use it here. We've had quite a few problems with Guava and have finally decided to shade just the classes we use into an Iceberg module. I think it is probably better to avoid adding to the set of Guava classes that we use. Since this is already done and it doesn't look like there is much of a benefit to changing over to Guava, I'm inclined to leave it as it is.\nIf others feel strongly about this, I can use it, but I think we should avoid expanding our use of Guava.", "url": "https://github.com/apache/iceberg/pull/1165#discussion_r449916239", "createdAt": "2020-07-05T20:37:07Z", "author": {"login": "rdblue"}, "path": "api/src/main/java/org/apache/iceberg/util/CharSequenceSet.java", "diffHunk": "@@ -54,10 +54,21 @@ public boolean isEmpty() {\n     return wrapperSet.isEmpty();\n   }\n \n+  public CharSequenceWrapper wrapper() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTgyNDgwNA=="}, "originalCommit": {"oid": "cf24e2e4e0d162cb86dcdb06ad98bf39f7ed4c66"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTkzOTU0NA==", "bodyText": "Sounds good to me", "url": "https://github.com/apache/iceberg/pull/1165#discussion_r449939544", "createdAt": "2020-07-06T00:52:26Z", "author": {"login": "rdsr"}, "path": "api/src/main/java/org/apache/iceberg/util/CharSequenceSet.java", "diffHunk": "@@ -54,10 +54,21 @@ public boolean isEmpty() {\n     return wrapperSet.isEmpty();\n   }\n \n+  public CharSequenceWrapper wrapper() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTgyNDgwNA=="}, "originalCommit": {"oid": "cf24e2e4e0d162cb86dcdb06ad98bf39f7ed4c66"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTk1MjU3OQ==", "bodyText": "Sounds good to me", "url": "https://github.com/apache/iceberg/pull/1165#discussion_r449952579", "createdAt": "2020-07-06T02:13:17Z", "author": {"login": "JingsongLi"}, "path": "api/src/main/java/org/apache/iceberg/util/CharSequenceSet.java", "diffHunk": "@@ -54,10 +54,21 @@ public boolean isEmpty() {\n     return wrapperSet.isEmpty();\n   }\n \n+  public CharSequenceWrapper wrapper() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTgyNDgwNA=="}, "originalCommit": {"oid": "cf24e2e4e0d162cb86dcdb06ad98bf39f7ed4c66"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwNTU1OTk5OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/apache/iceberg/util/CharSequenceSet.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQwNjo0NTo1MlrOGtKsWA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxNjo0MzoyNFrOGtfJPQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDAxNDI5Ng==", "bodyText": "Wondering if making sense to have a static ThreadLocal object shared by all CharSequenceSet?", "url": "https://github.com/apache/iceberg/pull/1165#discussion_r450014296", "createdAt": "2020-07-06T06:45:52Z", "author": {"login": "jun-he"}, "path": "api/src/main/java/org/apache/iceberg/util/CharSequenceSet.java", "diffHunk": "@@ -54,10 +54,21 @@ public boolean isEmpty() {\n     return wrapperSet.isEmpty();\n   }\n \n+  public CharSequenceWrapper wrapper() {\n+    if (containsWrapper == null) {\n+      synchronized (this) {\n+        if (containsWrapper == null) {\n+          this.containsWrapper = ThreadLocal.withInitial(() -> CharSequenceWrapper.wrap(null));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cf24e2e4e0d162cb86dcdb06ad98bf39f7ed4c66"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDM0OTM3Mw==", "bodyText": "Yes, this is a simpler solution. Good point!", "url": "https://github.com/apache/iceberg/pull/1165#discussion_r450349373", "createdAt": "2020-07-06T16:43:24Z", "author": {"login": "rdblue"}, "path": "api/src/main/java/org/apache/iceberg/util/CharSequenceSet.java", "diffHunk": "@@ -54,10 +54,21 @@ public boolean isEmpty() {\n     return wrapperSet.isEmpty();\n   }\n \n+  public CharSequenceWrapper wrapper() {\n+    if (containsWrapper == null) {\n+      synchronized (this) {\n+        if (containsWrapper == null) {\n+          this.containsWrapper = ThreadLocal.withInitial(() -> CharSequenceWrapper.wrap(null));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDAxNDI5Ng=="}, "originalCommit": {"oid": "cf24e2e4e0d162cb86dcdb06ad98bf39f7ed4c66"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwNTU2Mjk0OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/apache/iceberg/util/CharSequenceSet.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQwNjo0NzowOVrOGtKuJg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxNjowMDoyN1rOGtdhnA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDAxNDc1OA==", "bodyText": "should it be set back to null after the operation?", "url": "https://github.com/apache/iceberg/pull/1165#discussion_r450014758", "createdAt": "2020-07-06T06:47:09Z", "author": {"login": "jun-he"}, "path": "api/src/main/java/org/apache/iceberg/util/CharSequenceSet.java", "diffHunk": "@@ -54,10 +54,21 @@ public boolean isEmpty() {\n     return wrapperSet.isEmpty();\n   }\n \n+  public CharSequenceWrapper wrapper() {\n+    if (containsWrapper == null) {\n+      synchronized (this) {\n+        if (containsWrapper == null) {\n+          this.containsWrapper = ThreadLocal.withInitial(() -> CharSequenceWrapper.wrap(null));\n+        }\n+      }\n+    }\n+    return containsWrapper.get();\n+  }\n+\n   @Override\n   public boolean contains(Object obj) {\n     if (obj instanceof CharSequence) {\n-      return wrapperSet.contains(containsWrapper.set((CharSequence) obj));\n+      return wrapperSet.contains(wrapper().set((CharSequence) obj));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cf24e2e4e0d162cb86dcdb06ad98bf39f7ed4c66"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDMyMjg0NA==", "bodyText": "Yeah, this is probably a good idea.", "url": "https://github.com/apache/iceberg/pull/1165#discussion_r450322844", "createdAt": "2020-07-06T16:00:27Z", "author": {"login": "rdblue"}, "path": "api/src/main/java/org/apache/iceberg/util/CharSequenceSet.java", "diffHunk": "@@ -54,10 +54,21 @@ public boolean isEmpty() {\n     return wrapperSet.isEmpty();\n   }\n \n+  public CharSequenceWrapper wrapper() {\n+    if (containsWrapper == null) {\n+      synchronized (this) {\n+        if (containsWrapper == null) {\n+          this.containsWrapper = ThreadLocal.withInitial(() -> CharSequenceWrapper.wrap(null));\n+        }\n+      }\n+    }\n+    return containsWrapper.get();\n+  }\n+\n   @Override\n   public boolean contains(Object obj) {\n     if (obj instanceof CharSequence) {\n-      return wrapperSet.contains(containsWrapper.set((CharSequence) obj));\n+      return wrapperSet.contains(wrapper().set((CharSequence) obj));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDAxNDc1OA=="}, "originalCommit": {"oid": "cf24e2e4e0d162cb86dcdb06ad98bf39f7ed4c66"}, "originalPosition": 28}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3941, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}