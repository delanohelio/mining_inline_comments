{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTM3ODA2NTUx", "number": 1920, "title": "Hive: Serialize metadata location so split generation does not need to load the table", "bodyText": "Before this change the split generation loads the table and uses that to generate the scan tasks.\nThis could be problematic:\n\nSplit generation happens on TezAM - currently we do not have any connection between the TezAMs and the HMS. This could cause extra load and needs extra network configuration/traffic\nSplit generation happens after the query planning and the Table could have changed in the meantime. In the longer term we have to find a way to use the same snapshot throughout the planning and the execution process\n\nAs a first step, this PR creates StaticTable which is  a specific snapshot of the Table, and serializes the data required for the creation of this table to the job configuration. This solves 1. and provides a way forward to solve 2.\nSince all of the InputFormat tests are using the same codepath, no extra tests are added", "createdAt": "2020-12-12T05:49:50Z", "url": "https://github.com/apache/iceberg/pull/1920", "merged": true, "mergeCommit": {"oid": "0f2a164e6ac711c2f2900c91d86c7ab338ac64ee"}, "closed": true, "closedAt": "2021-01-05T19:14:36Z", "author": {"login": "pvary"}, "timelineItems": {"totalCount": 18, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdlWF5RgBqjQxMDM1OTgxOTc=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdtP4JkAFqTU2MjA2MDA2MA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d020d14b5527ec4e7620d755f9efc0102bb4ac0f", "author": {"user": {"login": "pvary", "name": null}}, "url": "https://github.com/apache/iceberg/commit/d020d14b5527ec4e7620d755f9efc0102bb4ac0f", "committedDate": "2020-12-12T05:41:21Z", "message": "Hive: Serialize metadata location so split generation does not need to load the table"}, "afterCommit": {"oid": "b67a58c7d07008c479b7778f8cbc9b580f3aed4f", "author": {"user": {"login": "pvary", "name": null}}, "url": "https://github.com/apache/iceberg/commit/b67a58c7d07008c479b7778f8cbc9b580f3aed4f", "committedDate": "2020-12-12T05:56:05Z", "message": "Hive: Serialize metadata location so split generation does not need to load the table"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUwNzA4NDQ2", "url": "https://github.com/apache/iceberg/pull/1920#pullrequestreview-550708446", "createdAt": "2020-12-12T10:19:33Z", "commit": {"oid": "b67a58c7d07008c479b7778f8cbc9b580f3aed4f"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMlQxMDoxOTozM1rOIEdfDQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMlQxMDoyNDoyNlrOIEdhuA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTU0ODMwMQ==", "bodyText": "can we get a Table instance here which does not implement HasTableOperarions and therefore would fail? Only BaseTable does so, wondering about the other Table implementations, if they can make it here?", "url": "https://github.com/apache/iceberg/pull/1920#discussion_r541548301", "createdAt": "2020-12-12T10:19:33Z", "author": {"login": "marton-bod"}, "path": "mr/src/main/java/org/apache/iceberg/mr/hive/HiveIcebergStorageHandler.java", "diffHunk": "@@ -85,7 +86,10 @@ public void configureInputJobProperties(TableDesc tableDesc, Map<String, String>\n     map.put(InputFormatConfig.TABLE_IDENTIFIER, props.getProperty(Catalogs.NAME));\n     map.put(InputFormatConfig.TABLE_LOCATION, table.location());\n     map.put(InputFormatConfig.TABLE_SCHEMA, schemaJson);\n+    map.put(InputFormatConfig.METADATA_LOCATION,\n+        ((HasTableOperations) table).operations().current().metadataFileLocation());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b67a58c7d07008c479b7778f8cbc9b580f3aed4f"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTU0ODk4NA==", "bodyText": "Same as above. Wondering if the Table instance that's passed in can be something other than BaseTable, such as PartitionsTable, HistoryTable, etc.", "url": "https://github.com/apache/iceberg/pull/1920#discussion_r541548984", "createdAt": "2020-12-12T10:24:26Z", "author": {"login": "marton-bod"}, "path": "mr/src/main/java/org/apache/iceberg/mr/hive/HiveIcebergStorageHandler.java", "diffHunk": "@@ -205,6 +210,8 @@ static void put(Configuration config, Table table) {\n     config.set(InputFormatConfig.TABLE_LOCATION, table.location());\n     config.set(InputFormatConfig.TABLE_SCHEMA, SchemaParser.toJson(table.schema()));\n     config.set(InputFormatConfig.PARTITION_SPEC, PartitionSpecParser.toJson(table.spec()));\n+    config.set(InputFormatConfig.METADATA_LOCATION,\n+        ((HasTableOperations) table).operations().current().metadataFileLocation());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b67a58c7d07008c479b7778f8cbc9b580f3aed4f"}, "originalPosition": 32}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUwNzMyOTQ1", "url": "https://github.com/apache/iceberg/pull/1920#pullrequestreview-550732945", "createdAt": "2020-12-12T13:17:19Z", "commit": {"oid": "ea2d9b08d42517786687c600c03377dbf322c748"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMlQxMzoxNzoxOVrOIEfFZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMlQxMzoxNzoxOVrOIEfFZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTU3NDUwMA==", "bodyText": "Maybe it's better to check the instance of against HasTableOperations, in case some Table class other than BaseTable will decide to implement this interface in the future and expose operations on the table", "url": "https://github.com/apache/iceberg/pull/1920#discussion_r541574500", "createdAt": "2020-12-12T13:17:19Z", "author": {"login": "marton-bod"}, "path": "mr/src/main/java/org/apache/iceberg/mr/hive/HiveIcebergStorageHandler.java", "diffHunk": "@@ -85,7 +86,11 @@ public void configureInputJobProperties(TableDesc tableDesc, Map<String, String>\n     map.put(InputFormatConfig.TABLE_IDENTIFIER, props.getProperty(Catalogs.NAME));\n     map.put(InputFormatConfig.TABLE_LOCATION, table.location());\n     map.put(InputFormatConfig.TABLE_SCHEMA, schemaJson);\n+    if (table instanceof BaseTable) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ea2d9b08d42517786687c600c03377dbf322c748"}, "originalPosition": 12}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUwNzM0NDYz", "url": "https://github.com/apache/iceberg/pull/1920#pullrequestreview-550734463", "createdAt": "2020-12-12T13:18:22Z", "commit": {"oid": "ea2d9b08d42517786687c600c03377dbf322c748"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUxOTczMjg2", "url": "https://github.com/apache/iceberg/pull/1920#pullrequestreview-551973286", "createdAt": "2020-12-14T23:16:14Z", "commit": {"oid": "ea2d9b08d42517786687c600c03377dbf322c748"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQyMzoxNjoxNFrOIFw9UQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQyMzoxNjoxNFrOIFw9UQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjkxNTkyMQ==", "bodyText": "As I noted on a thread below, I think it is better to use BaseTable.", "url": "https://github.com/apache/iceberg/pull/1920#discussion_r542915921", "createdAt": "2020-12-14T23:16:14Z", "author": {"login": "rdblue"}, "path": "mr/src/main/java/org/apache/iceberg/mr/InputFormatConfig.java", "diffHunk": "@@ -85,6 +88,13 @@ public ConfigBuilder(Configuration conf) {\n     }\n \n     public Configuration conf() {\n+      // Store the io and the current snapshot of the table in the configuration which are needed for the split\n+      // generation\n+      Table table = Catalogs.loadTable(conf);\n+      conf.set(InputFormatConfig.METADATA_LOCATION,\n+          ((HasTableOperations) table).operations().current().metadataFileLocation());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ea2d9b08d42517786687c600c03377dbf322c748"}, "originalPosition": 27}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "051334fb9c7dc3b7e511e810c5dfb68c97651264", "author": {"user": {"login": "pvary", "name": null}}, "url": "https://github.com/apache/iceberg/commit/051334fb9c7dc3b7e511e810c5dfb68c97651264", "committedDate": "2021-01-04T09:57:13Z", "message": "Hive: Serialize metadata location so split generation does not need to load the table"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "902f4cc5d0f903201f7e91b7313232ab1c25853c", "author": {"user": {"login": "pvary", "name": null}}, "url": "https://github.com/apache/iceberg/commit/902f4cc5d0f903201f7e91b7313232ab1c25853c", "committedDate": "2021-01-04T09:57:13Z", "message": "Removed StaticTable and used BaseTable instead. Also checkinf for BaseTable instead of HasTableOperations"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ea2d9b08d42517786687c600c03377dbf322c748", "author": {"user": {"login": "pvary", "name": null}}, "url": "https://github.com/apache/iceberg/commit/ea2d9b08d42517786687c600c03377dbf322c748", "committedDate": "2020-12-12T12:25:20Z", "message": "Removed StaticTable and used BaseTable instead. Also checkinf for BaseTable instead of HasTableOperations"}, "afterCommit": {"oid": "902f4cc5d0f903201f7e91b7313232ab1c25853c", "author": {"user": {"login": "pvary", "name": null}}, "url": "https://github.com/apache/iceberg/commit/902f4cc5d0f903201f7e91b7313232ab1c25853c", "committedDate": "2021-01-04T09:57:13Z", "message": "Removed StaticTable and used BaseTable instead. Also checkinf for BaseTable instead of HasTableOperations"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "545209f5a15ffbfb1804d98213e66b16661298b7", "author": {"user": {"login": "pvary", "name": null}}, "url": "https://github.com/apache/iceberg/commit/545209f5a15ffbfb1804d98213e66b16661298b7", "committedDate": "2021-01-04T15:03:50Z", "message": "Rebased and moved to Serializable"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTYxMjA2NTYz", "url": "https://github.com/apache/iceberg/pull/1920#pullrequestreview-561206563", "createdAt": "2021-01-04T17:29:26Z", "commit": {"oid": "545209f5a15ffbfb1804d98213e66b16661298b7"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxNzoyOToyNlrOIN6a6w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxNzoyOToyNlrOIN6a6w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTQ1OTU2Mw==", "bodyText": "These shouldn't need to change if writeReplace is implemented. This object won't be serialized, it will be replaced by the one to serialize.", "url": "https://github.com/apache/iceberg/pull/1920#discussion_r551459563", "createdAt": "2021-01-04T17:29:26Z", "author": {"login": "rdblue"}, "path": "core/src/main/java/org/apache/iceberg/BaseTable.java", "diffHunk": "@@ -30,13 +32,12 @@\n  * <p>\n  * This can be extended by providing a {@link TableOperations} to the constructor.\n  */\n-public class BaseTable implements Table, HasTableOperations {\n-  private final TableOperations ops;\n-  private final String name;\n+public class BaseTable implements Table, HasTableOperations, Serializable {\n+  private transient TableOperations ops;\n+  private transient String name;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "545209f5a15ffbfb1804d98213e66b16661298b7"}, "originalPosition": 18}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTYxMjA2NzUw", "url": "https://github.com/apache/iceberg/pull/1920#pullrequestreview-561206750", "createdAt": "2021-01-04T17:29:43Z", "commit": {"oid": "545209f5a15ffbfb1804d98213e66b16661298b7"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxNzoyOTo0NFrOIN6bdw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxNzoyOTo0NFrOIN6bdw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTQ1OTcwMw==", "bodyText": "I don't think that this is needed. Can you remove it?", "url": "https://github.com/apache/iceberg/pull/1920#discussion_r551459703", "createdAt": "2021-01-04T17:29:44Z", "author": {"login": "rdblue"}, "path": "core/src/main/java/org/apache/iceberg/BaseTable.java", "diffHunk": "@@ -217,4 +218,13 @@ public LocationProvider locationProvider() {\n   public String toString() {\n     return name();\n   }\n+\n+  Object writeReplace() throws ObjectStreamException {\n+    return new StaticTable(ops.io(), name(), ops.current().metadataFileLocation());\n+  }\n+\n+  void init(TableOperations tableOperations, String tableName) {\n+    this.ops = tableOperations;\n+    this.name = tableName;\n+  }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "545209f5a15ffbfb1804d98213e66b16661298b7"}, "originalPosition": 39}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTYxMjA3NTY3", "url": "https://github.com/apache/iceberg/pull/1920#pullrequestreview-561207567", "createdAt": "2021-01-04T17:31:00Z", "commit": {"oid": "545209f5a15ffbfb1804d98213e66b16661298b7"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxNzozMTowMFrOIN6d0A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxNzozMTowMFrOIN6d0A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTQ2MDMwNA==", "bodyText": "There should be no need to implement writeReplace here because this is the replacement object. This class just needs to be Serializable.", "url": "https://github.com/apache/iceberg/pull/1920#discussion_r551460304", "createdAt": "2021-01-04T17:31:00Z", "author": {"login": "rdblue"}, "path": "core/src/main/java/org/apache/iceberg/StaticTable.java", "diffHunk": "@@ -0,0 +1,60 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg;\n+\n+import java.io.IOException;\n+import java.io.ObjectInputStream;\n+import java.io.ObjectOutputStream;\n+import java.io.ObjectStreamException;\n+import org.apache.iceberg.io.FileIO;\n+\n+/**\n+ * Table implementation that provides access to metadata for a given snapshot of the Table using a\n+ * table metadata location. It will never refer to a different Metadata object than the one it was created with\n+ * and cannot be used to create or delete files.\n+ * This table could be serialized and deserialized.\n+ */\n+public class StaticTable extends BaseTable {\n+  public StaticTable(FileIO io, String name, String metadataLocation) {\n+    super(new StaticTableOperations(metadataLocation, io), name);\n+  }\n+\n+  private void writeObject(ObjectOutputStream out) throws IOException {\n+    out.writeObject(io());\n+    out.writeObject(name());\n+    out.writeObject(operations().current().metadataFileLocation());\n+  }\n+\n+  private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {\n+    FileIO io = (FileIO) in.readObject();\n+    String name = (String) in.readObject();\n+    String metadataLocation = (String) in.readObject();\n+    init(new StaticTableOperations(metadataLocation, io), name);\n+  }\n+\n+  private void readObjectNoData() throws ObjectStreamException {\n+    throw new UnsupportedOperationException(\"Deserializing empty StaticTable is not supported\");\n+  }\n+\n+  @Override\n+  Object writeReplace() throws ObjectStreamException {\n+    return this;\n+  }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "545209f5a15ffbfb1804d98213e66b16661298b7"}, "originalPosition": 59}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTYxMjA4MTQ3", "url": "https://github.com/apache/iceberg/pull/1920#pullrequestreview-561208147", "createdAt": "2021-01-04T17:31:51Z", "commit": {"oid": "545209f5a15ffbfb1804d98213e66b16661298b7"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxNzozMTo1MVrOIN6flw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxNzozMTo1MVrOIN6flw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTQ2MDc1OQ==", "bodyText": "Doesn't this need a public no-arg constructor?", "url": "https://github.com/apache/iceberg/pull/1920#discussion_r551460759", "createdAt": "2021-01-04T17:31:51Z", "author": {"login": "rdblue"}, "path": "core/src/main/java/org/apache/iceberg/StaticTable.java", "diffHunk": "@@ -0,0 +1,60 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg;\n+\n+import java.io.IOException;\n+import java.io.ObjectInputStream;\n+import java.io.ObjectOutputStream;\n+import java.io.ObjectStreamException;\n+import org.apache.iceberg.io.FileIO;\n+\n+/**\n+ * Table implementation that provides access to metadata for a given snapshot of the Table using a\n+ * table metadata location. It will never refer to a different Metadata object than the one it was created with\n+ * and cannot be used to create or delete files.\n+ * This table could be serialized and deserialized.\n+ */\n+public class StaticTable extends BaseTable {\n+  public StaticTable(FileIO io, String name, String metadataLocation) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "545209f5a15ffbfb1804d98213e66b16661298b7"}, "originalPosition": 35}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ac14a53c9bf3db42ba0cfca4a228d393b4d9aa56", "author": {"user": {"login": "pvary", "name": null}}, "url": "https://github.com/apache/iceberg/commit/ac14a53c9bf3db42ba0cfca4a228d393b4d9aa56", "committedDate": "2021-01-05T08:35:10Z", "message": "Use stub instead of StaticTable"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1553393cadf5dfc5a7521d7fa68679ff1074ea87", "author": {"user": {"login": "pvary", "name": null}}, "url": "https://github.com/apache/iceberg/commit/1553393cadf5dfc5a7521d7fa68679ff1074ea87", "committedDate": "2021-01-05T08:48:03Z", "message": "Adding javadoc"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTYyMDU4MzAz", "url": "https://github.com/apache/iceberg/pull/1920#pullrequestreview-562058303", "createdAt": "2021-01-05T19:10:56Z", "commit": {"oid": "1553393cadf5dfc5a7521d7fa68679ff1074ea87"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQxOToxMDo1NlrOIOjvYg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQxOToxMDo1NlrOIOjvYg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjEzNjU0Ng==", "bodyText": "I'm also wondering if we should make Table extend Serializable. Not something to decide now, but I think this is a reasonable way to make that work.", "url": "https://github.com/apache/iceberg/pull/1920#discussion_r552136546", "createdAt": "2021-01-05T19:10:56Z", "author": {"login": "rdblue"}, "path": "core/src/main/java/org/apache/iceberg/BaseTable.java", "diffHunk": "@@ -29,8 +30,12 @@\n  * Base {@link Table} implementation.\n  * <p>\n  * This can be extended by providing a {@link TableOperations} to the constructor.\n+ * <p>\n+ * Serializing and deserializing a BaseTable object returns a read only implementation of the BaseTable using a\n+ * {@link StaticTableOperations}. This way no Catalog related calls are needed when reading the table data after\n+ * deserialization.\n  */\n-public class BaseTable implements Table, HasTableOperations {\n+public class BaseTable implements Table, HasTableOperations, Serializable {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1553393cadf5dfc5a7521d7fa68679ff1074ea87"}, "originalPosition": 18}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTYyMDU5OTIx", "url": "https://github.com/apache/iceberg/pull/1920#pullrequestreview-562059921", "createdAt": "2021-01-05T19:13:31Z", "commit": {"oid": "1553393cadf5dfc5a7521d7fa68679ff1074ea87"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQxOToxMzozMVrOIOj0PA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQxOToxMzozMVrOIOj0PA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjEzNzc4OA==", "bodyText": "Shouldn't these be serialized only if the table is not?", "url": "https://github.com/apache/iceberg/pull/1920#discussion_r552137788", "createdAt": "2021-01-05T19:13:31Z", "author": {"login": "rdblue"}, "path": "mr/src/main/java/org/apache/iceberg/mr/hive/HiveIcebergStorageHandler.java", "diffHunk": "@@ -202,12 +208,31 @@ public static PartitionSpec spec(Configuration config) {\n    */\n   @VisibleForTesting\n   static void put(Configuration config, Table table) {\n+    // The Table contains a FileIO and the FileIO serializes the configuration so we might end up recursively\n+    // serializing the objects. To avoid this unset the values for now before serializing.\n+    config.unset(InputFormatConfig.SERIALIZED_TABLE);\n+    config.unset(InputFormatConfig.FILE_IO);\n+    config.unset(InputFormatConfig.LOCATION_PROVIDER);\n+    config.unset(InputFormatConfig.ENCRYPTION_MANAGER);\n+    config.unset(InputFormatConfig.TABLE_LOCATION);\n+    config.unset(InputFormatConfig.TABLE_SCHEMA);\n+    config.unset(InputFormatConfig.PARTITION_SPEC);\n+\n+    String base64Table = table instanceof Serializable ? SerializationUtil.serializeToBase64(table) : null;\n+    String base64Io = SerializationUtil.serializeToBase64(table.io());\n+    String base64LocationProvider = SerializationUtil.serializeToBase64(table.locationProvider());\n+    String base64EncryptionManager = SerializationUtil.serializeToBase64(table.encryption());\n+\n+    if (base64Table != null) {\n+      config.set(InputFormatConfig.SERIALIZED_TABLE, base64Table);\n+    }\n+\n+    config.set(InputFormatConfig.FILE_IO, base64Io);\n+    config.set(InputFormatConfig.LOCATION_PROVIDER, base64LocationProvider);\n+    config.set(InputFormatConfig.ENCRYPTION_MANAGER, base64EncryptionManager);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1553393cadf5dfc5a7521d7fa68679ff1074ea87"}, "originalPosition": 53}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTYyMDYwMDYw", "url": "https://github.com/apache/iceberg/pull/1920#pullrequestreview-562060060", "createdAt": "2021-01-05T19:13:44Z", "commit": {"oid": "1553393cadf5dfc5a7521d7fa68679ff1074ea87"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3604, "cost": 1, "resetAt": "2021-10-29T19:57:52Z"}}}