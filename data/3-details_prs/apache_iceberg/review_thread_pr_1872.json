{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTMyMDU2ODYw", "number": 1872, "reviewThreads": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQxODoxNzowNFrOFA63rA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wNVQwMTowODoyOFrOFW745Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2NTA4ODQ0OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/apache/iceberg/GenericPartitionFieldSummary.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQxODoxNzowNFrOH_cc4Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QyMDowNzozMlrOIA4g7A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjI4ODQ4MQ==", "bodyText": "have we made sure changing the position is backwards compatible?", "url": "https://github.com/apache/iceberg/pull/1872#discussion_r536288481", "createdAt": "2020-12-04T18:17:04Z", "author": {"login": "jackye1995"}, "path": "core/src/main/java/org/apache/iceberg/GenericPartitionFieldSummary.java", "diffHunk": "@@ -136,8 +144,10 @@ public Object get(int i) {\n       case 0:\n         return containsNull;\n       case 1:\n-        return lowerBound();\n+        return containsNaN;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "beb1b41da649310ac836dea31856137b18478f4e"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjMwOTA1Mg==", "bodyText": "This is a good point, I forgot that primitive boolean will be default to false which will impact correctness when we use this in evaluator. I'll make this nullable. Thanks for pointing this out!", "url": "https://github.com/apache/iceberg/pull/1872#discussion_r536309052", "createdAt": "2020-12-04T18:53:40Z", "author": {"login": "yyanyy"}, "path": "core/src/main/java/org/apache/iceberg/GenericPartitionFieldSummary.java", "diffHunk": "@@ -136,8 +144,10 @@ public Object get(int i) {\n       case 0:\n         return containsNull;\n       case 1:\n-        return lowerBound();\n+        return containsNaN;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjI4ODQ4MQ=="}, "originalCommit": {"oid": "beb1b41da649310ac836dea31856137b18478f4e"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjkyODIzOA==", "bodyText": "The position change is compatible. All Iceberg metadata files conform to the Iceberg data file spec, so we can reorder columns if we choose.", "url": "https://github.com/apache/iceberg/pull/1872#discussion_r536928238", "createdAt": "2020-12-06T01:21:37Z", "author": {"login": "rdblue"}, "path": "core/src/main/java/org/apache/iceberg/GenericPartitionFieldSummary.java", "diffHunk": "@@ -136,8 +144,10 @@ public Object get(int i) {\n       case 0:\n         return containsNull;\n       case 1:\n-        return lowerBound();\n+        return containsNaN;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjI4ODQ4MQ=="}, "originalCommit": {"oid": "beb1b41da649310ac836dea31856137b18478f4e"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzc5Njg0NA==", "bodyText": "Ah sorry I misread the original question... Thanks Ryan for help with answering it!", "url": "https://github.com/apache/iceberg/pull/1872#discussion_r537796844", "createdAt": "2020-12-07T20:07:32Z", "author": {"login": "yyanyy"}, "path": "core/src/main/java/org/apache/iceberg/GenericPartitionFieldSummary.java", "diffHunk": "@@ -136,8 +144,10 @@ public Object get(int i) {\n       case 0:\n         return containsNull;\n       case 1:\n-        return lowerBound();\n+        return containsNaN;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjI4ODQ4MQ=="}, "originalCommit": {"oid": "beb1b41da649310ac836dea31856137b18478f4e"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2OTYwMDUzOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/apache/iceberg/GenericPartitionFieldSummary.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNlQwMToyMDo1NFrOIADffw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QyMDowNzozOFrOIA4hIQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjkyODEyNw==", "bodyText": "Why use Boolean instead of the primitive here? Is there a place that constructs these without knowing whether there are NaN values?", "url": "https://github.com/apache/iceberg/pull/1872#discussion_r536928127", "createdAt": "2020-12-06T01:20:54Z", "author": {"login": "rdblue"}, "path": "core/src/main/java/org/apache/iceberg/GenericPartitionFieldSummary.java", "diffHunk": "@@ -72,10 +73,11 @@ public GenericPartitionFieldSummary(Schema avroSchema) {\n     }\n   }\n \n-  public GenericPartitionFieldSummary(boolean containsNull, ByteBuffer lowerBound,\n+  public GenericPartitionFieldSummary(boolean containsNull, Boolean containsNaN, ByteBuffer lowerBound,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c59ec69204c98f45c4a75e35b6a21522ed576412"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzc5Njg5Nw==", "bodyText": "This is for a test case that provide null here to test backward compatibility. I guess I'll mark this constructor as @VisibleForTesting and create another public one that accepts boolean?", "url": "https://github.com/apache/iceberg/pull/1872#discussion_r537796897", "createdAt": "2020-12-07T20:07:38Z", "author": {"login": "yyanyy"}, "path": "core/src/main/java/org/apache/iceberg/GenericPartitionFieldSummary.java", "diffHunk": "@@ -72,10 +73,11 @@ public GenericPartitionFieldSummary(Schema avroSchema) {\n     }\n   }\n \n-  public GenericPartitionFieldSummary(boolean containsNull, ByteBuffer lowerBound,\n+  public GenericPartitionFieldSummary(boolean containsNull, Boolean containsNaN, ByteBuffer lowerBound,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjkyODEyNw=="}, "originalCommit": {"oid": "c59ec69204c98f45c4a75e35b6a21522ed576412"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2OTYwMzEwOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/apache/iceberg/PartitionSummary.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNlQwMToyMjozNlrOIADgjw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNlQwMToyMjozNlrOIADgjw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjkyODM5OQ==", "bodyText": "Since this is a boolean, maybe we can change the constructor as well.", "url": "https://github.com/apache/iceberg/pull/1872#discussion_r536928399", "createdAt": "2020-12-06T01:22:36Z", "author": {"login": "rdblue"}, "path": "core/src/main/java/org/apache/iceberg/PartitionSummary.java", "diffHunk": "@@ -73,14 +75,16 @@ private PartitionFieldStats(Type type) {\n     }\n \n     public PartitionFieldSummary toSummary() {\n-      return new GenericPartitionFieldSummary(containsNull,\n+      return new GenericPartitionFieldSummary(containsNull, containsNaN,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c59ec69204c98f45c4a75e35b6a21522ed576412"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQyMTc4MDAwOnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/apache/iceberg/ManifestFile.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxODowNToxN1rOIHSVyw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QwMDo0Njo0M1rOIHfiog==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDUxMTQzNQ==", "bodyText": "Does it make sense for this to have a default of null?", "url": "https://github.com/apache/iceberg/pull/1872#discussion_r544511435", "createdAt": "2020-12-16T18:05:17Z", "author": {"login": "holdenk"}, "path": "api/src/main/java/org/apache/iceberg/ManifestFile.java", "diffHunk": "@@ -199,6 +200,12 @@ default boolean hasDeletedFiles() {\n      */\n     boolean containsNull();\n \n+    /**\n+     * Returns true if at least one data file in the manifest has a nan value for the field.\n+     * Null if this information doesn't exist.\n+     */\n+    Boolean containsNaN();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1277887017e4f62dfc02fe7476832a66f1118741"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDUzMjE4Ng==", "bodyText": "I think once this change is released, this field will be populated by default, and making it nullable is mostly for backward compatibility; also the unassigned value for this field is null in both the actual implementation and test implementation, so I think defaulting to null here might not help much?", "url": "https://github.com/apache/iceberg/pull/1872#discussion_r544532186", "createdAt": "2020-12-16T18:36:47Z", "author": {"login": "yyanyy"}, "path": "api/src/main/java/org/apache/iceberg/ManifestFile.java", "diffHunk": "@@ -199,6 +200,12 @@ default boolean hasDeletedFiles() {\n      */\n     boolean containsNull();\n \n+    /**\n+     * Returns true if at least one data file in the manifest has a nan value for the field.\n+     * Null if this information doesn't exist.\n+     */\n+    Boolean containsNaN();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDUxMTQzNQ=="}, "originalCommit": {"oid": "1277887017e4f62dfc02fe7476832a66f1118741"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDcyNzcxNA==", "bodyText": "While we don't expect other implementations of this interface, it is a fair point that we would accept other implementations in any method that uses ManifestFile as an argument type. Adding the default would ensure backward-compatiblity in case anyone has an alternative implementation, and is really low cost. So I'd opt to add it. Thanks @holdenk!", "url": "https://github.com/apache/iceberg/pull/1872#discussion_r544727714", "createdAt": "2020-12-17T00:46:43Z", "author": {"login": "rdblue"}, "path": "api/src/main/java/org/apache/iceberg/ManifestFile.java", "diffHunk": "@@ -199,6 +200,12 @@ default boolean hasDeletedFiles() {\n      */\n     boolean containsNull();\n \n+    /**\n+     * Returns true if at least one data file in the manifest has a nan value for the field.\n+     * Null if this information doesn't exist.\n+     */\n+    Boolean containsNaN();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDUxMTQzNQ=="}, "originalCommit": {"oid": "1277887017e4f62dfc02fe7476832a66f1118741"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzMjEzNDk1OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/apache/iceberg/ManifestFile.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQxOToxMzoyOFrOIIvkGQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQyMTowMjo1OFrOIIypZw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjAzODgwOQ==", "bodyText": "Nit: do should we add a closing  in the docstring?", "url": "https://github.com/apache/iceberg/pull/1872#discussion_r546038809", "createdAt": "2020-12-18T19:13:28Z", "author": {"login": "holdenk"}, "path": "api/src/main/java/org/apache/iceberg/ManifestFile.java", "diffHunk": "@@ -203,8 +203,12 @@ default boolean hasDeletedFiles() {\n     /**\n      * Returns true if at least one data file in the manifest has a nan value for the field.\n      * Null if this information doesn't exist.\n+     * <p>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bade62f2235d660d7863a33b024a893ccaefde1b"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjA4OTMxOQ==", "bodyText": "According to this I think <p> itself might be enough?\n\nIf you have more than one paragraph in the doc comment, separate the paragraphs with a <p> paragraph tag, as shown", "url": "https://github.com/apache/iceberg/pull/1872#discussion_r546089319", "createdAt": "2020-12-18T21:02:58Z", "author": {"login": "yyanyy"}, "path": "api/src/main/java/org/apache/iceberg/ManifestFile.java", "diffHunk": "@@ -203,8 +203,12 @@ default boolean hasDeletedFiles() {\n     /**\n      * Returns true if at least one data file in the manifest has a nan value for the field.\n      * Null if this information doesn't exist.\n+     * <p>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjAzODgwOQ=="}, "originalCommit": {"oid": "bade62f2235d660d7863a33b024a893ccaefde1b"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ5NjIzNjk3OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/apache/iceberg/ManifestFile.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMVQyMTo1NToxM1rOIRoyfA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xNFQwMDozNTozOVrOITKoaQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTM2NDk4OA==", "bodyText": "Just going back to the discussion of default to make sure my understanding is correct, if the returned value is null, does it mean the manifest file would suggest the data file does not contain NaN?\nThis behavior seems consistent with the default false in PartitionSummary.java, but logically speaking it seems like returning true as default is more reasonable to suggest a file always might contain NaN. What is the take here?", "url": "https://github.com/apache/iceberg/pull/1872#discussion_r555364988", "createdAt": "2021-01-11T21:55:13Z", "author": {"login": "jackye1995"}, "path": "api/src/main/java/org/apache/iceberg/ManifestFile.java", "diffHunk": "@@ -199,6 +200,16 @@ default boolean hasDeletedFiles() {\n      */\n     boolean containsNull();\n \n+    /**\n+     * Returns true if at least one data file in the manifest has a nan value for the field.\n+     * Null if this information doesn't exist.\n+     * <p>\n+     * Default to return null to ensure backward compatibility.\n+     */\n+    default Boolean containsNaN() {\n+      return null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bade62f2235d660d7863a33b024a893ccaefde1b"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTQ2MzQ1Ng==", "bodyText": "I think PartitionSummary is populated when trying to write a file, so if the code contains this change, it will populate and write NaN boolean correctly. I guess you might be thinking about GenericPartitionFieldSummary when you mention returning true as default since that's the class to be constructed when reading from avro files that may not contain this info?", "url": "https://github.com/apache/iceberg/pull/1872#discussion_r555463456", "createdAt": "2021-01-12T02:04:21Z", "author": {"login": "yyanyy"}, "path": "api/src/main/java/org/apache/iceberg/ManifestFile.java", "diffHunk": "@@ -199,6 +200,16 @@ default boolean hasDeletedFiles() {\n      */\n     boolean containsNull();\n \n+    /**\n+     * Returns true if at least one data file in the manifest has a nan value for the field.\n+     * Null if this information doesn't exist.\n+     * <p>\n+     * Default to return null to ensure backward compatibility.\n+     */\n+    default Boolean containsNaN() {\n+      return null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTM2NDk4OA=="}, "originalCommit": {"oid": "bade62f2235d660d7863a33b024a893ccaefde1b"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Njk2ODA0MQ==", "bodyText": "I see, make sense, thanks for the explanation.", "url": "https://github.com/apache/iceberg/pull/1872#discussion_r556968041", "createdAt": "2021-01-14T00:35:39Z", "author": {"login": "jackye1995"}, "path": "api/src/main/java/org/apache/iceberg/ManifestFile.java", "diffHunk": "@@ -199,6 +200,16 @@ default boolean hasDeletedFiles() {\n      */\n     boolean containsNull();\n \n+    /**\n+     * Returns true if at least one data file in the manifest has a nan value for the field.\n+     * Null if this information doesn't exist.\n+     * <p>\n+     * Default to return null to ensure backward compatibility.\n+     */\n+    default Boolean containsNaN() {\n+      return null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTM2NDk4OA=="}, "originalCommit": {"oid": "bade62f2235d660d7863a33b024a893ccaefde1b"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU4NTQyODgzOnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/apache/iceberg/expressions/ManifestEvaluator.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wM1QwMDoyNzoyMFrOIeqiBA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wNVQwMTowMjozOVrOIgNvnQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2OTAyNTAyOA==", "bodyText": "I understand that this is trying to retain the previous behavior, but if containsNaN is not known, it seems safer to assume there is a NaN value.\nI think there is an argument for doing this: at one point, NaN wasn't handled separately and if lower and upper were null then there were no non-null values. A NaN would cause a bound to be non-null. The problem is that we must accept manifests that were written with the new rule (don't store NaN for lower), but that didn't set this. I'd prefer to go with the safer option.", "url": "https://github.com/apache/iceberg/pull/1872#discussion_r569025028", "createdAt": "2021-02-03T00:27:20Z", "author": {"login": "rdblue"}, "path": "api/src/main/java/org/apache/iceberg/expressions/ManifestEvaluator.java", "diffHunk": "@@ -144,18 +143,37 @@ public Boolean or(Boolean leftResult, Boolean rightResult) {\n     @Override\n     public <T> Boolean isNaN(BoundReference<T> ref) {\n       int pos = Accessors.toPosition(ref.accessor());\n-      // containsNull encodes whether at least one partition value is null, lowerBound is null if\n-      // all partition values are null.\n-      if (stats.get(pos).containsNull() && stats.get(pos).lowerBound() == null) {\n-        return ROWS_CANNOT_MATCH; // all values are null\n+\n+      if (stats.get(pos).containsNaN() != null && !stats.get(pos).containsNaN()) {\n+        return ROWS_CANNOT_MATCH;\n+      }\n+\n+      if (allValuesAreNull(stats.get(pos))) {\n+        return ROWS_CANNOT_MATCH;\n       }\n \n       return ROWS_MIGHT_MATCH;\n     }\n \n+    private boolean allValuesAreNull(PartitionFieldSummary summary) {\n+      // Before introducing containsNaN field, containsNull encodes whether at least one partition value is null,\n+      // lowerBound is null if all partition values are null.\n+      // After introducing containsNaN field, containsNaN must be false to ensure all values are null since bounds\n+      // don't include NaN anymore.\n+      return summary.containsNull() && summary.lowerBound() == null &&\n+          (summary.containsNaN() == null || !summary.containsNaN());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bade62f2235d660d7863a33b024a893ccaefde1b"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2OTAzMDY4Mg==", "bodyText": "One more thing: if we go for the safer option, we only need to do that for float and double columns. All other types can't contain NaN.", "url": "https://github.com/apache/iceberg/pull/1872#discussion_r569030682", "createdAt": "2021-02-03T00:43:05Z", "author": {"login": "rdblue"}, "path": "api/src/main/java/org/apache/iceberg/expressions/ManifestEvaluator.java", "diffHunk": "@@ -144,18 +143,37 @@ public Boolean or(Boolean leftResult, Boolean rightResult) {\n     @Override\n     public <T> Boolean isNaN(BoundReference<T> ref) {\n       int pos = Accessors.toPosition(ref.accessor());\n-      // containsNull encodes whether at least one partition value is null, lowerBound is null if\n-      // all partition values are null.\n-      if (stats.get(pos).containsNull() && stats.get(pos).lowerBound() == null) {\n-        return ROWS_CANNOT_MATCH; // all values are null\n+\n+      if (stats.get(pos).containsNaN() != null && !stats.get(pos).containsNaN()) {\n+        return ROWS_CANNOT_MATCH;\n+      }\n+\n+      if (allValuesAreNull(stats.get(pos))) {\n+        return ROWS_CANNOT_MATCH;\n       }\n \n       return ROWS_MIGHT_MATCH;\n     }\n \n+    private boolean allValuesAreNull(PartitionFieldSummary summary) {\n+      // Before introducing containsNaN field, containsNull encodes whether at least one partition value is null,\n+      // lowerBound is null if all partition values are null.\n+      // After introducing containsNaN field, containsNaN must be false to ensure all values are null since bounds\n+      // don't include NaN anymore.\n+      return summary.containsNull() && summary.lowerBound() == null &&\n+          (summary.containsNaN() == null || !summary.containsNaN());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2OTAyNTAyOA=="}, "originalCommit": {"oid": "bade62f2235d660d7863a33b024a893ccaefde1b"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MDYwOTcyMg==", "bodyText": "I think the change for excluding NaN in lower/upper and adding containsNaN both belong to this PR, so if a release contains this change, then it would either be (1) NaN is part of lower/upper and containsNaN is missing, or (2) containsNaN exists and lower/upper doesn't store NaN. But I guess people may implement their own manifest summary that already exclude NaN from bounds but no containsNaN, so we still want to handle this, and file level metrics could give more granular information so there isn't necessarily any performance penalty. I have updated this PR to check for existence of containsNaN, but please let me know if my understanding isn't correct!", "url": "https://github.com/apache/iceberg/pull/1872#discussion_r570609722", "createdAt": "2021-02-04T23:15:37Z", "author": {"login": "yyanyy"}, "path": "api/src/main/java/org/apache/iceberg/expressions/ManifestEvaluator.java", "diffHunk": "@@ -144,18 +143,37 @@ public Boolean or(Boolean leftResult, Boolean rightResult) {\n     @Override\n     public <T> Boolean isNaN(BoundReference<T> ref) {\n       int pos = Accessors.toPosition(ref.accessor());\n-      // containsNull encodes whether at least one partition value is null, lowerBound is null if\n-      // all partition values are null.\n-      if (stats.get(pos).containsNull() && stats.get(pos).lowerBound() == null) {\n-        return ROWS_CANNOT_MATCH; // all values are null\n+\n+      if (stats.get(pos).containsNaN() != null && !stats.get(pos).containsNaN()) {\n+        return ROWS_CANNOT_MATCH;\n+      }\n+\n+      if (allValuesAreNull(stats.get(pos))) {\n+        return ROWS_CANNOT_MATCH;\n       }\n \n       return ROWS_MIGHT_MATCH;\n     }\n \n+    private boolean allValuesAreNull(PartitionFieldSummary summary) {\n+      // Before introducing containsNaN field, containsNull encodes whether at least one partition value is null,\n+      // lowerBound is null if all partition values are null.\n+      // After introducing containsNaN field, containsNaN must be false to ensure all values are null since bounds\n+      // don't include NaN anymore.\n+      return summary.containsNull() && summary.lowerBound() == null &&\n+          (summary.containsNaN() == null || !summary.containsNaN());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2OTAyNTAyOA=="}, "originalCommit": {"oid": "bade62f2235d660d7863a33b024a893ccaefde1b"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MDY1MDUyNQ==", "bodyText": "Yes, I think your summary is correct. Because this is a format change and we expect/want others to implement the format, we want to account for strange cases like that.", "url": "https://github.com/apache/iceberg/pull/1872#discussion_r570650525", "createdAt": "2021-02-05T01:02:39Z", "author": {"login": "rdblue"}, "path": "api/src/main/java/org/apache/iceberg/expressions/ManifestEvaluator.java", "diffHunk": "@@ -144,18 +143,37 @@ public Boolean or(Boolean leftResult, Boolean rightResult) {\n     @Override\n     public <T> Boolean isNaN(BoundReference<T> ref) {\n       int pos = Accessors.toPosition(ref.accessor());\n-      // containsNull encodes whether at least one partition value is null, lowerBound is null if\n-      // all partition values are null.\n-      if (stats.get(pos).containsNull() && stats.get(pos).lowerBound() == null) {\n-        return ROWS_CANNOT_MATCH; // all values are null\n+\n+      if (stats.get(pos).containsNaN() != null && !stats.get(pos).containsNaN()) {\n+        return ROWS_CANNOT_MATCH;\n+      }\n+\n+      if (allValuesAreNull(stats.get(pos))) {\n+        return ROWS_CANNOT_MATCH;\n       }\n \n       return ROWS_MIGHT_MATCH;\n     }\n \n+    private boolean allValuesAreNull(PartitionFieldSummary summary) {\n+      // Before introducing containsNaN field, containsNull encodes whether at least one partition value is null,\n+      // lowerBound is null if all partition values are null.\n+      // After introducing containsNaN field, containsNaN must be false to ensure all values are null since bounds\n+      // don't include NaN anymore.\n+      return summary.containsNull() && summary.lowerBound() == null &&\n+          (summary.containsNaN() == null || !summary.containsNaN());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2OTAyNTAyOA=="}, "originalCommit": {"oid": "bade62f2235d660d7863a33b024a893ccaefde1b"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU4NTQzMzYzOnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/apache/iceberg/expressions/ManifestEvaluator.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wM1QwMDoyOTowOVrOIeqknQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wM1QwMDoyOTowOVrOIeqknQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2OTAyNTY5Mw==", "bodyText": "Could you move this private method to the bottom of the class?", "url": "https://github.com/apache/iceberg/pull/1872#discussion_r569025693", "createdAt": "2021-02-03T00:29:09Z", "author": {"login": "rdblue"}, "path": "api/src/main/java/org/apache/iceberg/expressions/ManifestEvaluator.java", "diffHunk": "@@ -144,18 +143,37 @@ public Boolean or(Boolean leftResult, Boolean rightResult) {\n     @Override\n     public <T> Boolean isNaN(BoundReference<T> ref) {\n       int pos = Accessors.toPosition(ref.accessor());\n-      // containsNull encodes whether at least one partition value is null, lowerBound is null if\n-      // all partition values are null.\n-      if (stats.get(pos).containsNull() && stats.get(pos).lowerBound() == null) {\n-        return ROWS_CANNOT_MATCH; // all values are null\n+\n+      if (stats.get(pos).containsNaN() != null && !stats.get(pos).containsNaN()) {\n+        return ROWS_CANNOT_MATCH;\n+      }\n+\n+      if (allValuesAreNull(stats.get(pos))) {\n+        return ROWS_CANNOT_MATCH;\n       }\n \n       return ROWS_MIGHT_MATCH;\n     }\n \n+    private boolean allValuesAreNull(PartitionFieldSummary summary) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bade62f2235d660d7863a33b024a893ccaefde1b"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU4NTQzNzA2OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/apache/iceberg/ManifestFile.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wM1QwMDozMDozN1rOIeqmng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wM1QwMDozMDozN1rOIeqmng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2OTAyNjIwNg==", "bodyText": "Nit: nan -> NaN", "url": "https://github.com/apache/iceberg/pull/1872#discussion_r569026206", "createdAt": "2021-02-03T00:30:37Z", "author": {"login": "rdblue"}, "path": "api/src/main/java/org/apache/iceberg/ManifestFile.java", "diffHunk": "@@ -199,6 +200,16 @@ default boolean hasDeletedFiles() {\n      */\n     boolean containsNull();\n \n+    /**\n+     * Returns true if at least one data file in the manifest has a nan value for the field.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bade62f2235d660d7863a33b024a893ccaefde1b"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU4NTQ1MDI4OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/apache/iceberg/GenericPartitionFieldSummary.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wM1QwMDozNjoyMFrOIequnQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wM1QwMDozNjoyMFrOIequnQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2OTAyODI1Mw==", "bodyText": "Nit: indentation is off.", "url": "https://github.com/apache/iceberg/pull/1872#discussion_r569028253", "createdAt": "2021-02-03T00:36:20Z", "author": {"login": "rdblue"}, "path": "core/src/main/java/org/apache/iceberg/GenericPartitionFieldSummary.java", "diffHunk": "@@ -72,7 +74,19 @@ public GenericPartitionFieldSummary(Schema avroSchema) {\n     }\n   }\n \n-  public GenericPartitionFieldSummary(boolean containsNull, ByteBuffer lowerBound,\n+  public GenericPartitionFieldSummary(boolean containsNull, boolean containsNaN, ByteBuffer lowerBound,\n+                               ByteBuffer upperBound) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bade62f2235d660d7863a33b024a893ccaefde1b"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU4NTQ4MzM5OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/apache/iceberg/GenericPartitionFieldSummary.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wM1QwMDo1MDoxNlrOIerCKg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wM1QwMDo1MDoxNlrOIerCKg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2OTAzMzI1OA==", "bodyText": "Nit: indentation is off.", "url": "https://github.com/apache/iceberg/pull/1872#discussion_r569033258", "createdAt": "2021-02-03T00:50:16Z", "author": {"login": "rdblue"}, "path": "core/src/main/java/org/apache/iceberg/GenericPartitionFieldSummary.java", "diffHunk": "@@ -72,7 +74,19 @@ public GenericPartitionFieldSummary(Schema avroSchema) {\n     }\n   }\n \n-  public GenericPartitionFieldSummary(boolean containsNull, ByteBuffer lowerBound,\n+  public GenericPartitionFieldSummary(boolean containsNull, boolean containsNaN, ByteBuffer lowerBound,\n+                               ByteBuffer upperBound) {\n+    this.avroSchema = AVRO_SCHEMA;\n+    this.containsNull = containsNull;\n+    this.containsNaN = containsNaN;\n+    this.lowerBound = ByteBuffers.toByteArray(lowerBound);\n+    this.upperBound = ByteBuffers.toByteArray(upperBound);\n+    this.fromProjectionPos = null;\n+  }\n+\n+  // for testing backward compatibility only\n+  @VisibleForTesting\n+  GenericPartitionFieldSummary(boolean containsNull, ByteBuffer lowerBound,\n                                       ByteBuffer upperBound) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bade62f2235d660d7863a33b024a893ccaefde1b"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU5NTk0MjEzOnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/apache/iceberg/expressions/ManifestEvaluator.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wNVQwMTowODoyOFrOIgN3Bw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wNVQwMzoxODoxOVrOIgQXdw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MDY1MjQyMw==", "bodyText": "containsNaN could only be true if the type is float or double. Should this check the column type before checking containsNaN? Then we would be able to ignore it for most cases. For example, the test below uses a string column but has no containsNaN values, so it doesn't catch that all values are null.", "url": "https://github.com/apache/iceberg/pull/1872#discussion_r570652423", "createdAt": "2021-02-05T01:08:28Z", "author": {"login": "rdblue"}, "path": "api/src/main/java/org/apache/iceberg/expressions/ManifestEvaluator.java", "diffHunk": "@@ -329,5 +338,12 @@ public Boolean or(Boolean leftResult, Boolean rightResult) {\n \n       return ROWS_MIGHT_MATCH;\n     }\n+\n+    private boolean allValuesAreNull(PartitionFieldSummary summary) {\n+      // containsNull encodes whether at least one partition value is null, lowerBound is null if all partition values\n+      // are null; in case bounds don't include NaN value, containsNaN needs to be checked against.\n+      return summary.containsNull() && summary.lowerBound() == null &&\n+          summary.containsNaN() != null && !summary.containsNaN();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "acd440082425342c3f6f60e846e8fcbb194ddd5a"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MDY5MzQ5NQ==", "bodyText": "Yes, sorry I forgot to address this comment... Will update", "url": "https://github.com/apache/iceberg/pull/1872#discussion_r570693495", "createdAt": "2021-02-05T03:18:19Z", "author": {"login": "yyanyy"}, "path": "api/src/main/java/org/apache/iceberg/expressions/ManifestEvaluator.java", "diffHunk": "@@ -329,5 +338,12 @@ public Boolean or(Boolean leftResult, Boolean rightResult) {\n \n       return ROWS_MIGHT_MATCH;\n     }\n+\n+    private boolean allValuesAreNull(PartitionFieldSummary summary) {\n+      // containsNull encodes whether at least one partition value is null, lowerBound is null if all partition values\n+      // are null; in case bounds don't include NaN value, containsNaN needs to be checked against.\n+      return summary.containsNull() && summary.lowerBound() == null &&\n+          summary.containsNaN() != null && !summary.containsNaN();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MDY1MjQyMw=="}, "originalCommit": {"oid": "acd440082425342c3f6f60e846e8fcbb194ddd5a"}, "originalPosition": 57}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3252, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}