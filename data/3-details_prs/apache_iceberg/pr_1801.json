{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI1MDAyNTg3", "number": 1801, "title": "Spark: Add RewriteManifestsProcedure", "bodyText": "This PR adds a procedure to rewrite manifests.\nThis is a temporary solution that rewrites all metadata until we figure out how to determine the clustering ratio of metadata.", "createdAt": "2020-11-20T23:13:21Z", "url": "https://github.com/apache/iceberg/pull/1801", "merged": true, "mergeCommit": {"oid": "914516f33422b3bfa9955bd0c7d80edbf9054536"}, "closed": true, "closedAt": "2020-11-24T00:29:39Z", "author": {"login": "aokolnychyi"}, "timelineItems": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdefxkpAFqTUzNTgzNzE3NA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdfeni5AFqTUzNjk0OTUyNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM1ODM3MTc0", "url": "https://github.com/apache/iceberg/pull/1801#pullrequestreview-535837174", "createdAt": "2020-11-20T23:16:10Z", "commit": {"oid": "757a6ea8bd9d1c75651a6cb6c9b920669b34947a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQyMzoxNjoxMFrOH3jwdg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQyMzoxNjoxMFrOH3jwdg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODAxOTU3NA==", "bodyText": "I just realized that there are more configs we should probably expose as they are supported by the action. I think we can expose optional spec_id, use_caching. I am not convinced we want to expose stagingLocation, though.\n@rdblue @RussellSpitzer, thoughts?", "url": "https://github.com/apache/iceberg/pull/1801#discussion_r528019574", "createdAt": "2020-11-20T23:16:10Z", "author": {"login": "aokolnychyi"}, "path": "spark3/src/main/java/org/apache/iceberg/spark/procedures/RewriteManifestsProcedure.java", "diffHunk": "@@ -0,0 +1,95 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.spark.procedures;\n+\n+import org.apache.iceberg.actions.Actions;\n+import org.apache.iceberg.actions.RewriteManifestsActionResult;\n+import org.apache.iceberg.spark.procedures.SparkProcedures.ProcedureBuilder;\n+import org.apache.spark.sql.catalyst.InternalRow;\n+import org.apache.spark.sql.catalyst.expressions.GenericInternalRow;\n+import org.apache.spark.sql.connector.catalog.TableCatalog;\n+import org.apache.spark.sql.connector.iceberg.catalog.ProcedureParameter;\n+import org.apache.spark.sql.types.DataTypes;\n+import org.apache.spark.sql.types.Metadata;\n+import org.apache.spark.sql.types.StructField;\n+import org.apache.spark.sql.types.StructType;\n+\n+class RewriteManifestsProcedure extends BaseProcedure {\n+\n+  private static final ProcedureParameter[] PARAMETERS = new ProcedureParameter[]{", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "757a6ea8bd9d1c75651a6cb6c9b920669b34947a"}, "originalPosition": 36}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM1ODM3ODU0", "url": "https://github.com/apache/iceberg/pull/1801#pullrequestreview-535837854", "createdAt": "2020-11-20T23:18:13Z", "commit": {"oid": "757a6ea8bd9d1c75651a6cb6c9b920669b34947a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQyMzoxODoxNFrOH3jyvQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQyMzoxODoxNFrOH3jyvQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODAyMDE1Nw==", "bodyText": "We have way more tests in the action itself.", "url": "https://github.com/apache/iceberg/pull/1801#discussion_r528020157", "createdAt": "2020-11-20T23:18:14Z", "author": {"login": "aokolnychyi"}, "path": "spark3-extensions/src/test/java/org/apache/iceberg/spark/extensions/TestRewriteManifestsProcedure.java", "diffHunk": "@@ -0,0 +1,134 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.spark.extensions;\n+\n+import java.util.List;\n+import java.util.Map;\n+import org.apache.iceberg.AssertHelpers;\n+import org.apache.iceberg.Table;\n+import org.apache.iceberg.relocated.com.google.common.collect.ImmutableList;\n+import org.junit.After;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+import org.apache.spark.sql.AnalysisException;\n+import org.apache.spark.sql.catalyst.analysis.NoSuchProcedureException;\n+\n+import static org.apache.iceberg.TableProperties.SNAPSHOT_ID_INHERITANCE_ENABLED;\n+\n+public class TestRewriteManifestsProcedure extends SparkExtensionsTestBase {\n+\n+  public TestRewriteManifestsProcedure(String catalogName, String implementation, Map<String, String> config) {\n+    super(catalogName, implementation, config);\n+  }\n+\n+  @After\n+  public void removeTable() {\n+    sql(\"DROP TABLE IF EXISTS %s\", tableName);\n+  }\n+\n+  @Test\n+  public void testRewriteManifestsInEmptyTable() {\n+    sql(\"CREATE TABLE %s (id bigint NOT NULL, data string) USING iceberg\", tableName);\n+    List<Object[]> output = sql(\n+        \"CALL %s.system.rewrite_manifests('%s', '%s')\",\n+        catalogName, tableIdent.namespace(), tableIdent.name());\n+    assertEquals(\"Procedure output must match\",\n+        ImmutableList.of(row(0, 0)),\n+        output);\n+  }\n+\n+  @Test\n+  public void testRewriteLargeManifests() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "757a6ea8bd9d1c75651a6cb6c9b920669b34947a"}, "originalPosition": 59}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM1ODY1MDY3", "url": "https://github.com/apache/iceberg/pull/1801#pullrequestreview-535865067", "createdAt": "2020-11-21T01:12:38Z", "commit": {"oid": "23480e7da19b50181fb6dcc9a6d2f4a021b6823a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMVQwMToxMjozOFrOH3lXeg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMVQwMToxMjozOFrOH3lXeg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODA0NTk0Ng==", "bodyText": "This was a bug I overlooked.", "url": "https://github.com/apache/iceberg/pull/1801#discussion_r528045946", "createdAt": "2020-11-21T01:12:38Z", "author": {"login": "aokolnychyi"}, "path": "spark3-extensions/src/main/scala/org/apache/spark/sql/catalyst/analysis/ResolveProcedures.scala", "diffHunk": "@@ -50,8 +50,9 @@ case class ResolveProcedures(spark: SparkSession) extends Rule[LogicalPlan] with\n \n     // optional params should be at the end\n     procedure.parameters.sliding(2).foreach {\n-      case Array(previousParam, currentParam) if previousParam.required && !currentParam.required =>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "23480e7da19b50181fb6dcc9a6d2f4a021b6823a"}, "originalPosition": 4}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM2ODU3MDQ3", "url": "https://github.com/apache/iceberg/pull/1801#pullrequestreview-536857047", "createdAt": "2020-11-23T21:24:49Z", "commit": {"oid": "23480e7da19b50181fb6dcc9a6d2f4a021b6823a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QyMToyNDo0OVrOH4f9Gg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QyMToyNDo0OVrOH4f9Gg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTAwNTg1MA==", "bodyText": "I think the cache still needs to be refreshed. A commit will refresh the table reference that is cached in Iceberg, pulling in all changes that happened since it was loaded. There could be changes unrelated to the manifest rewrite that get pulled in and would cause the cache to be stale compared with a new query. I think it is best to refresh Spark's cache whenever a procedure modifies or refreshes the table.", "url": "https://github.com/apache/iceberg/pull/1801#discussion_r529005850", "createdAt": "2020-11-23T21:24:49Z", "author": {"login": "rdblue"}, "path": "spark3/src/main/java/org/apache/iceberg/spark/procedures/BaseProcedure.java", "diffHunk": "@@ -56,7 +65,9 @@ protected BaseProcedure(TableCatalog tableCatalog) {\n \n     T result = func.apply(icebergTable);\n \n-    refreshSparkCache(ident, sparkTable);\n+    if (refreshSparkCache) {\n+      refreshSparkCache(ident, sparkTable);\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "23480e7da19b50181fb6dcc9a6d2f4a021b6823a"}, "originalPosition": 23}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM2ODU5MDUx", "url": "https://github.com/apache/iceberg/pull/1801#pullrequestreview-536859051", "createdAt": "2020-11-23T21:28:07Z", "commit": {"oid": "23480e7da19b50181fb6dcc9a6d2f4a021b6823a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QyMToyODowN1rOH4gD5w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QyMToyODowN1rOH4gD5w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTAwNzU5MQ==", "bodyText": "Not sure if I already mentioned this, but we might want to add a helper method to create a generic row.", "url": "https://github.com/apache/iceberg/pull/1801#discussion_r529007591", "createdAt": "2020-11-23T21:28:07Z", "author": {"login": "rdblue"}, "path": "spark3/src/main/java/org/apache/iceberg/spark/procedures/RewriteManifestsProcedure.java", "diffHunk": "@@ -0,0 +1,108 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.spark.procedures;\n+\n+import org.apache.iceberg.actions.Actions;\n+import org.apache.iceberg.actions.RewriteManifestsAction;\n+import org.apache.iceberg.actions.RewriteManifestsActionResult;\n+import org.apache.iceberg.spark.procedures.SparkProcedures.ProcedureBuilder;\n+import org.apache.spark.sql.catalyst.InternalRow;\n+import org.apache.spark.sql.catalyst.expressions.GenericInternalRow;\n+import org.apache.spark.sql.connector.catalog.TableCatalog;\n+import org.apache.spark.sql.connector.iceberg.catalog.ProcedureParameter;\n+import org.apache.spark.sql.types.DataTypes;\n+import org.apache.spark.sql.types.Metadata;\n+import org.apache.spark.sql.types.StructField;\n+import org.apache.spark.sql.types.StructType;\n+\n+class RewriteManifestsProcedure extends BaseProcedure {\n+\n+  private static final ProcedureParameter[] PARAMETERS = new ProcedureParameter[]{\n+      ProcedureParameter.required(\"namespace\", DataTypes.StringType),\n+      ProcedureParameter.required(\"table\", DataTypes.StringType),\n+      ProcedureParameter.optional(\"spec_id\", DataTypes.IntegerType),\n+      ProcedureParameter.optional(\"use_caching\", DataTypes.BooleanType)\n+  };\n+\n+  // counts are not nullable since the action result is never null\n+  private static final StructType OUTPUT_TYPE = new StructType(new StructField[]{\n+      new StructField(\"num_rewritten_manifests\", DataTypes.IntegerType, false, Metadata.empty()),\n+      new StructField(\"num_added_manifests\", DataTypes.IntegerType, false, Metadata.empty())\n+  });\n+\n+  public static ProcedureBuilder builder() {\n+    return new BaseProcedure.Builder<RewriteManifestsProcedure>() {\n+      @Override\n+      protected RewriteManifestsProcedure doBuild() {\n+        return new RewriteManifestsProcedure(tableCatalog());\n+      }\n+    };\n+  }\n+\n+  private RewriteManifestsProcedure(TableCatalog tableCatalog) {\n+    super(tableCatalog);\n+  }\n+\n+  @Override\n+  public ProcedureParameter[] parameters() {\n+    return PARAMETERS;\n+  }\n+\n+  @Override\n+  public StructType outputType() {\n+    return OUTPUT_TYPE;\n+  }\n+\n+  @Override\n+  public InternalRow[] call(InternalRow args) {\n+    String namespace = args.getString(0);\n+    String tableName = args.getString(1);\n+    Integer specId = args.isNullAt(2) ? null : args.getInt(2);\n+    Boolean useCaching = args.isNullAt(3) ? null : args.getBoolean(3);\n+\n+    return withIcebergTable(namespace, tableName, table -> {\n+      Actions actions = Actions.forTable(table);\n+\n+      RewriteManifestsAction action = actions.rewriteManifests();\n+\n+      if (specId != null) {\n+        action.specId(specId);\n+      }\n+\n+      if (useCaching != null) {\n+        action.useCaching(useCaching);\n+      }\n+\n+      RewriteManifestsActionResult result = action.execute();\n+\n+      Object[] outputValues = new Object[OUTPUT_TYPE.size()];\n+      outputValues[0] = result.deletedManifests().size();\n+      outputValues[1] = result.addedManifests().size();\n+      GenericInternalRow outputRow = new GenericInternalRow(outputValues);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "23480e7da19b50181fb6dcc9a6d2f4a021b6823a"}, "originalPosition": 98}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9d3c77ce7b0a771fd1de17081321c9745c7d16d1", "author": {"user": {"login": "aokolnychyi", "name": "Anton Okolnychyi"}}, "url": "https://github.com/apache/iceberg/commit/9d3c77ce7b0a771fd1de17081321c9745c7d16d1", "committedDate": "2020-11-23T23:49:30Z", "message": "Spark: Add RewriteManifestsProcedure"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "23480e7da19b50181fb6dcc9a6d2f4a021b6823a", "author": {"user": {"login": "aokolnychyi", "name": "Anton Okolnychyi"}}, "url": "https://github.com/apache/iceberg/commit/23480e7da19b50181fb6dcc9a6d2f4a021b6823a", "committedDate": "2020-11-21T01:11:48Z", "message": "Add more params and fix optional param resolution"}, "afterCommit": {"oid": "9d3c77ce7b0a771fd1de17081321c9745c7d16d1", "author": {"user": {"login": "aokolnychyi", "name": "Anton Okolnychyi"}}, "url": "https://github.com/apache/iceberg/commit/9d3c77ce7b0a771fd1de17081321c9745c7d16d1", "committedDate": "2020-11-23T23:49:30Z", "message": "Spark: Add RewriteManifestsProcedure"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "94403cca6b5b4096d6a72d818343a79914f0fbe4", "author": {"user": {"login": "aokolnychyi", "name": "Anton Okolnychyi"}}, "url": "https://github.com/apache/iceberg/commit/94403cca6b5b4096d6a72d818343a79914f0fbe4", "committedDate": "2020-11-23T23:52:24Z", "message": "Add javadoc"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM2OTQ5NTI2", "url": "https://github.com/apache/iceberg/pull/1801#pullrequestreview-536949526", "createdAt": "2020-11-24T00:29:14Z", "commit": {"oid": "94403cca6b5b4096d6a72d818343a79914f0fbe4"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3385, "cost": 1, "resetAt": "2021-10-29T19:57:52Z"}}}