{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDgyMDM0Mjg0", "number": 1433, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxNDo1MToxNFrOEhSPEA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxNzoyMzo0OVrOEhWElw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzMzM3MjMyOnYy", "diffSide": "RIGHT", "path": "hive-metastore/src/main/java/org/apache/iceberg/hive/ClientPool.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxNDo1MToxNFrOHOg9rg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQwMjoxMzowMVrOHO0Izg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDk4MjE5MA==", "bodyText": "This is real issue here right? We have the possibility of incrementing current size even if \"newClient\" failed in the old code? If so this seems like the right fix to me", "url": "https://github.com/apache/iceberg/pull/1433#discussion_r484982190", "createdAt": "2020-09-08T14:51:14Z", "author": {"login": "RussellSpitzer"}, "path": "hive-metastore/src/main/java/org/apache/iceberg/hive/ClientPool.java", "diffHunk": "@@ -114,8 +114,9 @@ private C get() throws InterruptedException {\n           if (!clients.isEmpty()) {\n             return clients.removeFirst();\n           } else if (currentSize < poolSize) {\n+            C client = newClient();\n             currentSize += 1;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "087ada859081b7f27db7cab2edb167795235b270"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTI5NjMzNA==", "bodyText": "Yeah, that's right.", "url": "https://github.com/apache/iceberg/pull/1433#discussion_r485296334", "createdAt": "2020-09-09T02:13:01Z", "author": {"login": "openinx"}, "path": "hive-metastore/src/main/java/org/apache/iceberg/hive/ClientPool.java", "diffHunk": "@@ -114,8 +114,9 @@ private C get() throws InterruptedException {\n           if (!clients.isEmpty()) {\n             return clients.removeFirst();\n           } else if (currentSize < poolSize) {\n+            C client = newClient();\n             currentSize += 1;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDk4MjE5MA=="}, "originalCommit": {"oid": "087ada859081b7f27db7cab2edb167795235b270"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzNDAwMDg3OnYy", "diffSide": "RIGHT", "path": "hive-metastore/src/test/java/org/apache/iceberg/hive/TestClientPool.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxNzoyMzo0OVrOHOm_cw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQwMjoxMzo0N1rOHO0Jkg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTA4MDk0Nw==", "bodyText": "Can we call this something other than MockClientPool? It injects a failure, so I think a name like FailNewClientPool would be better.", "url": "https://github.com/apache/iceberg/pull/1433#discussion_r485080947", "createdAt": "2020-09-08T17:23:49Z", "author": {"login": "rdblue"}, "path": "hive-metastore/src/test/java/org/apache/iceberg/hive/TestClientPool.java", "diffHunk": "@@ -0,0 +1,54 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.hive;\n+\n+import org.junit.Test;\n+\n+public class TestClientPool {\n+\n+  @Test(expected = RuntimeException.class)\n+  public void testNewClientFailure() throws Exception {\n+    try (MockClientPool pool = new MockClientPool(2, Exception.class)) {\n+      pool.run(Object::toString);\n+    }\n+  }\n+\n+  private static class MockClientPool extends ClientPool<Object, Exception> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "087ada859081b7f27db7cab2edb167795235b270"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTI5NjUzMA==", "bodyText": "That make sense,  should I propose another pull request  ?", "url": "https://github.com/apache/iceberg/pull/1433#discussion_r485296530", "createdAt": "2020-09-09T02:13:47Z", "author": {"login": "openinx"}, "path": "hive-metastore/src/test/java/org/apache/iceberg/hive/TestClientPool.java", "diffHunk": "@@ -0,0 +1,54 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.hive;\n+\n+import org.junit.Test;\n+\n+public class TestClientPool {\n+\n+  @Test(expected = RuntimeException.class)\n+  public void testNewClientFailure() throws Exception {\n+    try (MockClientPool pool = new MockClientPool(2, Exception.class)) {\n+      pool.run(Object::toString);\n+    }\n+  }\n+\n+  private static class MockClientPool extends ClientPool<Object, Exception> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTA4MDk0Nw=="}, "originalCommit": {"oid": "087ada859081b7f27db7cab2edb167795235b270"}, "originalPosition": 33}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3726, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}