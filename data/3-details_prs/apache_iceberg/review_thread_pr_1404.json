{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDc2MzA5NDM3", "number": 1404, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxNDowMDoyNlrOEeUfww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQwNDo0NDoxNVrOEh8l4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwMjI4NTQ3OnYy", "diffSide": "LEFT", "path": "flink/src/main/java/org/apache/iceberg/flink/sink/IcebergFilesCommitter.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxNDowMDoyN1rOHJ6EaQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxNDowMDoyN1rOHJ6EaQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDE1MDYzMw==", "bodyText": "Assume the case:   the flink job bootstrap first and write few records,  after the first snapshotState(1) finished, its job crashed, then it started to restore from the first snapshot.  Because we don't commit any iceberg transaction, so the maxCommittedCheckpointId will be -1,  finally the job won't recover successfully.\nSo in theory, this Preconditions.checkState(maxCommittedCheckpointId != INITIAL_CHECKPOINT_ID) should be incorrect here.   For the snapshot expiration case,  we may need to find other ways to deal with.", "url": "https://github.com/apache/iceberg/pull/1404#discussion_r480150633", "createdAt": "2020-08-31T14:00:27Z", "author": {"login": "openinx"}, "path": "flink/src/main/java/org/apache/iceberg/flink/sink/IcebergFilesCommitter.java", "diffHunk": "@@ -108,18 +115,26 @@ public void initializeState(StateInitializationContext context) throws Exception\n     this.maxCommittedCheckpointId = INITIAL_CHECKPOINT_ID;\n \n     this.checkpointsState = context.getOperatorStateStore().getListState(STATE_DESCRIPTOR);\n+    this.jobIdState = context.getOperatorStateStore().getListState(JOB_ID_DESCRIPTOR);\n     if (context.isRestored()) {\n-      this.maxCommittedCheckpointId = getMaxCommittedCheckpointId(table, flinkJobId);\n-      // In the restoring path, it should have one valid snapshot for current flink job at least, so the max committed\n-      // checkpoint id should be positive. If it's not positive, that means someone might have removed or expired the\n-      // iceberg snapshot, in that case we should throw an exception in case of committing duplicated data files into\n-      // the iceberg table.\n-      Preconditions.checkState(maxCommittedCheckpointId != INITIAL_CHECKPOINT_ID,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1cde142db5bdf9f24b1f577c77878756e9787041"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwMjczNTYxOnYy", "diffSide": "RIGHT", "path": "flink/src/main/java/org/apache/iceberg/flink/sink/IcebergFilesCommitter.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxNTo0NDo0MFrOHJ-Q8A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQwMjo0ODoyOFrOHKYT7A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDIxOTM3Ng==", "bodyText": "nit: move this inside the if section to make the if-else more symmetric.", "url": "https://github.com/apache/iceberg/pull/1404#discussion_r480219376", "createdAt": "2020-08-31T15:44:40Z", "author": {"login": "stevenzwu"}, "path": "flink/src/main/java/org/apache/iceberg/flink/sink/IcebergFilesCommitter.java", "diffHunk": "@@ -108,18 +115,26 @@ public void initializeState(StateInitializationContext context) throws Exception\n     this.maxCommittedCheckpointId = INITIAL_CHECKPOINT_ID;\n \n     this.checkpointsState = context.getOperatorStateStore().getListState(STATE_DESCRIPTOR);\n+    this.jobIdState = context.getOperatorStateStore().getListState(JOB_ID_DESCRIPTOR);\n     if (context.isRestored()) {\n-      this.maxCommittedCheckpointId = getMaxCommittedCheckpointId(table, flinkJobId);\n-      // In the restoring path, it should have one valid snapshot for current flink job at least, so the max committed\n-      // checkpoint id should be positive. If it's not positive, that means someone might have removed or expired the\n-      // iceberg snapshot, in that case we should throw an exception in case of committing duplicated data files into\n-      // the iceberg table.\n-      Preconditions.checkState(maxCommittedCheckpointId != INITIAL_CHECKPOINT_ID,\n-          \"There should be an existing iceberg snapshot for current flink job: %s\", flinkJobId);\n-\n-      SortedMap<Long, List<DataFile>> restoredDataFiles = checkpointsState.get().iterator().next();\n-      // Only keep the uncommitted data files in the cache.\n-      this.dataFilesPerCheckpoint.putAll(restoredDataFiles.tailMap(maxCommittedCheckpointId + 1));\n+      String oldFlinkJobId = jobIdState.get().iterator().next();\n+      Preconditions.checkState(oldFlinkJobId != null && oldFlinkJobId.length() > 0,\n+          \"Flink job id parsed from checkpoint snapshot shouldn't be null or empty\");\n+      long oldMaxCommittedCheckpointId = getMaxCommittedCheckpointId(table, oldFlinkJobId);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1cde142db5bdf9f24b1f577c77878756e9787041"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDY0NjEyNA==", "bodyText": "The tailMap will use the oldMaxCommittedCheckpointId to filter all committed data files, so even if we move the line inside if-else,  it still need to access the oldMaxCommittedCheckpointId outside it.", "url": "https://github.com/apache/iceberg/pull/1404#discussion_r480646124", "createdAt": "2020-09-01T02:48:28Z", "author": {"login": "openinx"}, "path": "flink/src/main/java/org/apache/iceberg/flink/sink/IcebergFilesCommitter.java", "diffHunk": "@@ -108,18 +115,26 @@ public void initializeState(StateInitializationContext context) throws Exception\n     this.maxCommittedCheckpointId = INITIAL_CHECKPOINT_ID;\n \n     this.checkpointsState = context.getOperatorStateStore().getListState(STATE_DESCRIPTOR);\n+    this.jobIdState = context.getOperatorStateStore().getListState(JOB_ID_DESCRIPTOR);\n     if (context.isRestored()) {\n-      this.maxCommittedCheckpointId = getMaxCommittedCheckpointId(table, flinkJobId);\n-      // In the restoring path, it should have one valid snapshot for current flink job at least, so the max committed\n-      // checkpoint id should be positive. If it's not positive, that means someone might have removed or expired the\n-      // iceberg snapshot, in that case we should throw an exception in case of committing duplicated data files into\n-      // the iceberg table.\n-      Preconditions.checkState(maxCommittedCheckpointId != INITIAL_CHECKPOINT_ID,\n-          \"There should be an existing iceberg snapshot for current flink job: %s\", flinkJobId);\n-\n-      SortedMap<Long, List<DataFile>> restoredDataFiles = checkpointsState.get().iterator().next();\n-      // Only keep the uncommitted data files in the cache.\n-      this.dataFilesPerCheckpoint.putAll(restoredDataFiles.tailMap(maxCommittedCheckpointId + 1));\n+      String oldFlinkJobId = jobIdState.get().iterator().next();\n+      Preconditions.checkState(oldFlinkJobId != null && oldFlinkJobId.length() > 0,\n+          \"Flink job id parsed from checkpoint snapshot shouldn't be null or empty\");\n+      long oldMaxCommittedCheckpointId = getMaxCommittedCheckpointId(table, oldFlinkJobId);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDIxOTM3Ng=="}, "originalCommit": {"oid": "1cde142db5bdf9f24b1f577c77878756e9787041"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwMjgwNTE1OnYy", "diffSide": "RIGHT", "path": "flink/src/main/java/org/apache/iceberg/flink/sink/IcebergFilesCommitter.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxNjowMjo1M1rOHJ-7eQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxNjowMDo0NVrOHK9ciA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDIzMDI2NQ==", "bodyText": "I am wondering if it is better to consolidate all committer checkpoint states into a single structure, e.g. Pojo class or Avro record which are Flink supported state types for schema evolution.", "url": "https://github.com/apache/iceberg/pull/1404#discussion_r480230265", "createdAt": "2020-08-31T16:02:53Z", "author": {"login": "stevenzwu"}, "path": "flink/src/main/java/org/apache/iceberg/flink/sink/IcebergFilesCommitter.java", "diffHunk": "@@ -88,6 +88,13 @@\n   private transient Table table;\n   private transient long maxCommittedCheckpointId;\n \n+  // There're two cases that we restore from flink checkpoints: the first case is restoring from snapshot created by the\n+  // same flink job; another case is restoring from snapshot created by another different job. For the second case, we\n+  // need to maintain the old flink job's id in flink state backend to find the max-committed-checkpoint-id when\n+  // traversing iceberg table's snapshots.\n+  private static final ListStateDescriptor<String> JOB_ID_DESCRIPTOR = new ListStateDescriptor<>(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1cde142db5bdf9f24b1f577c77878756e9787041"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDY4NjYwMA==", "bodyText": "We've considered to use avro or pojo to consolidate the job-id and data files into a single structure. It could be considered as two separate issue:\n\nuse avro or pojo to serialize/deserialize.  If use avro, then we need the detailed schema for the whole structure,  but the DataFile  hides its schema inside a non-public implementation GenericDataFile, that was designed intentionally because we don't want to expose the detail schema to upper users for iceberg-core.  POJO need all fields provide getter/setter, while the DataFile don't support setter now.\nMaking them into a single structure.  I think we could do but I'm not sure what's the benefit.", "url": "https://github.com/apache/iceberg/pull/1404#discussion_r480686600", "createdAt": "2020-09-01T03:18:34Z", "author": {"login": "openinx"}, "path": "flink/src/main/java/org/apache/iceberg/flink/sink/IcebergFilesCommitter.java", "diffHunk": "@@ -88,6 +88,13 @@\n   private transient Table table;\n   private transient long maxCommittedCheckpointId;\n \n+  // There're two cases that we restore from flink checkpoints: the first case is restoring from snapshot created by the\n+  // same flink job; another case is restoring from snapshot created by another different job. For the second case, we\n+  // need to maintain the old flink job's id in flink state backend to find the max-committed-checkpoint-id when\n+  // traversing iceberg table's snapshots.\n+  private static final ListStateDescriptor<String> JOB_ID_DESCRIPTOR = new ListStateDescriptor<>(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDIzMDI2NQ=="}, "originalCommit": {"oid": "1cde142db5bdf9f24b1f577c77878756e9787041"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTI1NDUzNg==", "bodyText": "fair enough. agree that we shouldn't expose the GenericDataFile.\nOn the other hand, this can be simpler if we decided to just checkpoint the manifest file. Then we only need to track the manifest file path along with other metadata. Maybe we can follow up on the issue: #1403\nHere is our Avro schema file.\n{\n    \"type\": \"record\",\n    \"name\": \"ManifestFileState\",\n    \"namespace\": \"com.netflix.spaas.nfflink.connector.iceberg.model\",\n    \"fields\": [\n        {\"name\":\"path\", \"type\":\"string\"},\n        {\"name\":\"length\", \"type\":\"long\"},\n        {\"name\":\"specId\", \"type\":\"int\"},\n        { \"name\":\"checkpointId\", \"type\": \"long\"},\n        { \"name\":\"checkpointTimestamp\", \"type\": \"long\"},\n        { \"name\":\"dataFileCount\", \"type\": \"long\"},\n        { \"name\":\"recordCount\", \"type\": \"long\"},\n        { \"name\":\"byteCount\", \"type\": \"long\"},\n        { \"name\":\"lowWatermark\", \"type\": [\"null\", \"long\"], \"default\": null},\n        { \"name\":\"highWatermark\", \"type\": [\"null\", \"long\"], \"default\": null}\n    ]\n}", "url": "https://github.com/apache/iceberg/pull/1404#discussion_r481254536", "createdAt": "2020-09-01T16:00:45Z", "author": {"login": "stevenzwu"}, "path": "flink/src/main/java/org/apache/iceberg/flink/sink/IcebergFilesCommitter.java", "diffHunk": "@@ -88,6 +88,13 @@\n   private transient Table table;\n   private transient long maxCommittedCheckpointId;\n \n+  // There're two cases that we restore from flink checkpoints: the first case is restoring from snapshot created by the\n+  // same flink job; another case is restoring from snapshot created by another different job. For the second case, we\n+  // need to maintain the old flink job's id in flink state backend to find the max-committed-checkpoint-id when\n+  // traversing iceberg table's snapshots.\n+  private static final ListStateDescriptor<String> JOB_ID_DESCRIPTOR = new ListStateDescriptor<>(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDIzMDI2NQ=="}, "originalCommit": {"oid": "1cde142db5bdf9f24b1f577c77878756e9787041"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwMjkyMTcxOnYy", "diffSide": "RIGHT", "path": "flink/src/main/java/org/apache/iceberg/flink/sink/IcebergFilesCommitter.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxNjozNDoxOVrOHKACJQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQwMjo1NjoyNVrOHKY90w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDI0ODM1Nw==", "bodyText": "what is the reason making this a static method now?", "url": "https://github.com/apache/iceberg/pull/1404#discussion_r480248357", "createdAt": "2020-08-31T16:34:19Z", "author": {"login": "stevenzwu"}, "path": "flink/src/main/java/org/apache/iceberg/flink/sink/IcebergFilesCommitter.java", "diffHunk": "@@ -151,13 +169,16 @@ public void notifyCheckpointComplete(long checkpointId) throws Exception {\n     // For step#4, we don't need to commit iceberg table again because in step#3 we've committed all the files,\n     // Besides, we need to maintain the max-committed-checkpoint-id to be increasing.\n     if (checkpointId > maxCommittedCheckpointId) {\n-      commitUpToCheckpoint(checkpointId);\n+      commitUpToCheckpoint(table, dataFilesPerCheckpoint, flinkJobId, checkpointId);\n       this.maxCommittedCheckpointId = checkpointId;\n     }\n   }\n \n-  private void commitUpToCheckpoint(long checkpointId) {\n-    NavigableMap<Long, List<DataFile>> pendingFileMap = dataFilesPerCheckpoint.headMap(checkpointId, true);\n+  private static void commitUpToCheckpoint(Table table,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1cde142db5bdf9f24b1f577c77878756e9787041"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDY1Njg1MQ==", "bodyText": "Because I want the user to explicitly write the parameters on the method,  to avoid unexpected bugs caused by the usage of the internal variables of the class.  I encountered the bug before because  I used the current flinkJobId here unintentionally when commitUpToCheckpoint in the restoring path,", "url": "https://github.com/apache/iceberg/pull/1404#discussion_r480656851", "createdAt": "2020-09-01T02:56:25Z", "author": {"login": "openinx"}, "path": "flink/src/main/java/org/apache/iceberg/flink/sink/IcebergFilesCommitter.java", "diffHunk": "@@ -151,13 +169,16 @@ public void notifyCheckpointComplete(long checkpointId) throws Exception {\n     // For step#4, we don't need to commit iceberg table again because in step#3 we've committed all the files,\n     // Besides, we need to maintain the max-committed-checkpoint-id to be increasing.\n     if (checkpointId > maxCommittedCheckpointId) {\n-      commitUpToCheckpoint(checkpointId);\n+      commitUpToCheckpoint(table, dataFilesPerCheckpoint, flinkJobId, checkpointId);\n       this.maxCommittedCheckpointId = checkpointId;\n     }\n   }\n \n-  private void commitUpToCheckpoint(long checkpointId) {\n-    NavigableMap<Long, List<DataFile>> pendingFileMap = dataFilesPerCheckpoint.headMap(checkpointId, true);\n+  private static void commitUpToCheckpoint(Table table,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDI0ODM1Nw=="}, "originalCommit": {"oid": "1cde142db5bdf9f24b1f577c77878756e9787041"}, "originalPosition": 74}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0MDMwMTA1OnYy", "diffSide": "RIGHT", "path": "flink/src/main/java/org/apache/iceberg/flink/sink/IcebergFilesCommitter.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQwNDozODowMlrOHPio2g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQwNzoxNDoxNlrOHPmKzA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjA1ODIwMg==", "bodyText": "nit: since we are using guava, we can use Strings.isNullOrEmpty.", "url": "https://github.com/apache/iceberg/pull/1404#discussion_r486058202", "createdAt": "2020-09-10T04:38:02Z", "author": {"login": "stevenzwu"}, "path": "flink/src/main/java/org/apache/iceberg/flink/sink/IcebergFilesCommitter.java", "diffHunk": "@@ -108,18 +115,25 @@ public void initializeState(StateInitializationContext context) throws Exception\n     this.maxCommittedCheckpointId = INITIAL_CHECKPOINT_ID;\n \n     this.checkpointsState = context.getOperatorStateStore().getListState(STATE_DESCRIPTOR);\n+    this.jobIdState = context.getOperatorStateStore().getListState(JOB_ID_DESCRIPTOR);\n     if (context.isRestored()) {\n       this.maxCommittedCheckpointId = getMaxCommittedCheckpointId(table, flinkJobId);\n-      // In the restoring path, it should have one valid snapshot for current flink job at least, so the max committed\n-      // checkpoint id should be positive. If it's not positive, that means someone might have removed or expired the\n-      // iceberg snapshot, in that case we should throw an exception in case of committing duplicated data files into\n-      // the iceberg table.\n-      Preconditions.checkState(maxCommittedCheckpointId != INITIAL_CHECKPOINT_ID,\n-          \"There should be an existing iceberg snapshot for current flink job: %s\", flinkJobId);\n-\n-      SortedMap<Long, List<DataFile>> restoredDataFiles = checkpointsState.get().iterator().next();\n-      // Only keep the uncommitted data files in the cache.\n-      this.dataFilesPerCheckpoint.putAll(restoredDataFiles.tailMap(maxCommittedCheckpointId + 1));\n+\n+      String oldFlinkJobId = jobIdState.get().iterator().next();\n+      Preconditions.checkState(oldFlinkJobId != null && oldFlinkJobId.length() > 0,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4582f1585aa5ac82477bc11f9728ecd2b6e89a8d"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjEwNjMxNw==", "bodyText": "I think you mean Strings.isNotEmpty ?", "url": "https://github.com/apache/iceberg/pull/1404#discussion_r486106317", "createdAt": "2020-09-10T06:54:23Z", "author": {"login": "openinx"}, "path": "flink/src/main/java/org/apache/iceberg/flink/sink/IcebergFilesCommitter.java", "diffHunk": "@@ -108,18 +115,25 @@ public void initializeState(StateInitializationContext context) throws Exception\n     this.maxCommittedCheckpointId = INITIAL_CHECKPOINT_ID;\n \n     this.checkpointsState = context.getOperatorStateStore().getListState(STATE_DESCRIPTOR);\n+    this.jobIdState = context.getOperatorStateStore().getListState(JOB_ID_DESCRIPTOR);\n     if (context.isRestored()) {\n       this.maxCommittedCheckpointId = getMaxCommittedCheckpointId(table, flinkJobId);\n-      // In the restoring path, it should have one valid snapshot for current flink job at least, so the max committed\n-      // checkpoint id should be positive. If it's not positive, that means someone might have removed or expired the\n-      // iceberg snapshot, in that case we should throw an exception in case of committing duplicated data files into\n-      // the iceberg table.\n-      Preconditions.checkState(maxCommittedCheckpointId != INITIAL_CHECKPOINT_ID,\n-          \"There should be an existing iceberg snapshot for current flink job: %s\", flinkJobId);\n-\n-      SortedMap<Long, List<DataFile>> restoredDataFiles = checkpointsState.get().iterator().next();\n-      // Only keep the uncommitted data files in the cache.\n-      this.dataFilesPerCheckpoint.putAll(restoredDataFiles.tailMap(maxCommittedCheckpointId + 1));\n+\n+      String oldFlinkJobId = jobIdState.get().iterator().next();\n+      Preconditions.checkState(oldFlinkJobId != null && oldFlinkJobId.length() > 0,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjA1ODIwMg=="}, "originalCommit": {"oid": "4582f1585aa5ac82477bc11f9728ecd2b6e89a8d"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjExNjA0NA==", "bodyText": "OK, you are right.  the Strings.isNotEmpty is from another dependency,   should be OK to use !Strings.isNullOrEmpty in guava.  Thanks.", "url": "https://github.com/apache/iceberg/pull/1404#discussion_r486116044", "createdAt": "2020-09-10T07:14:16Z", "author": {"login": "openinx"}, "path": "flink/src/main/java/org/apache/iceberg/flink/sink/IcebergFilesCommitter.java", "diffHunk": "@@ -108,18 +115,25 @@ public void initializeState(StateInitializationContext context) throws Exception\n     this.maxCommittedCheckpointId = INITIAL_CHECKPOINT_ID;\n \n     this.checkpointsState = context.getOperatorStateStore().getListState(STATE_DESCRIPTOR);\n+    this.jobIdState = context.getOperatorStateStore().getListState(JOB_ID_DESCRIPTOR);\n     if (context.isRestored()) {\n       this.maxCommittedCheckpointId = getMaxCommittedCheckpointId(table, flinkJobId);\n-      // In the restoring path, it should have one valid snapshot for current flink job at least, so the max committed\n-      // checkpoint id should be positive. If it's not positive, that means someone might have removed or expired the\n-      // iceberg snapshot, in that case we should throw an exception in case of committing duplicated data files into\n-      // the iceberg table.\n-      Preconditions.checkState(maxCommittedCheckpointId != INITIAL_CHECKPOINT_ID,\n-          \"There should be an existing iceberg snapshot for current flink job: %s\", flinkJobId);\n-\n-      SortedMap<Long, List<DataFile>> restoredDataFiles = checkpointsState.get().iterator().next();\n-      // Only keep the uncommitted data files in the cache.\n-      this.dataFilesPerCheckpoint.putAll(restoredDataFiles.tailMap(maxCommittedCheckpointId + 1));\n+\n+      String oldFlinkJobId = jobIdState.get().iterator().next();\n+      Preconditions.checkState(oldFlinkJobId != null && oldFlinkJobId.length() > 0,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjA1ODIwMg=="}, "originalCommit": {"oid": "4582f1585aa5ac82477bc11f9728ecd2b6e89a8d"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0MDMwMjE4OnYy", "diffSide": "RIGHT", "path": "flink/src/main/java/org/apache/iceberg/flink/sink/IcebergFilesCommitter.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQwNDozODo0MVrOHPipkA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQwNDozODo0MVrOHPipkA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjA1ODM4NA==", "bodyText": "nit: oldFlinkJobId -> restoredFlinkJobId, since it may be the same job id for failure recovery case.", "url": "https://github.com/apache/iceberg/pull/1404#discussion_r486058384", "createdAt": "2020-09-10T04:38:41Z", "author": {"login": "stevenzwu"}, "path": "flink/src/main/java/org/apache/iceberg/flink/sink/IcebergFilesCommitter.java", "diffHunk": "@@ -108,18 +115,25 @@ public void initializeState(StateInitializationContext context) throws Exception\n     this.maxCommittedCheckpointId = INITIAL_CHECKPOINT_ID;\n \n     this.checkpointsState = context.getOperatorStateStore().getListState(STATE_DESCRIPTOR);\n+    this.jobIdState = context.getOperatorStateStore().getListState(JOB_ID_DESCRIPTOR);\n     if (context.isRestored()) {\n       this.maxCommittedCheckpointId = getMaxCommittedCheckpointId(table, flinkJobId);\n-      // In the restoring path, it should have one valid snapshot for current flink job at least, so the max committed\n-      // checkpoint id should be positive. If it's not positive, that means someone might have removed or expired the\n-      // iceberg snapshot, in that case we should throw an exception in case of committing duplicated data files into\n-      // the iceberg table.\n-      Preconditions.checkState(maxCommittedCheckpointId != INITIAL_CHECKPOINT_ID,\n-          \"There should be an existing iceberg snapshot for current flink job: %s\", flinkJobId);\n-\n-      SortedMap<Long, List<DataFile>> restoredDataFiles = checkpointsState.get().iterator().next();\n-      // Only keep the uncommitted data files in the cache.\n-      this.dataFilesPerCheckpoint.putAll(restoredDataFiles.tailMap(maxCommittedCheckpointId + 1));\n+\n+      String oldFlinkJobId = jobIdState.get().iterator().next();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4582f1585aa5ac82477bc11f9728ecd2b6e89a8d"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0MDMxMjAyOnYy", "diffSide": "RIGHT", "path": "flink/src/main/java/org/apache/iceberg/flink/sink/IcebergFilesCommitter.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQwNDo0NDoxNVrOHPivJQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQwNzoxNjoxOVrOHPmO8w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjA1OTgxMw==", "bodyText": "nit: maybe a simpler version? we can also remove the line 120 above\nlong maxCommittedCheckpointId = getMaxCommittedCheckpointId(table, restoredFlinkJobId);", "url": "https://github.com/apache/iceberg/pull/1404#discussion_r486059813", "createdAt": "2020-09-10T04:44:15Z", "author": {"login": "stevenzwu"}, "path": "flink/src/main/java/org/apache/iceberg/flink/sink/IcebergFilesCommitter.java", "diffHunk": "@@ -108,18 +115,25 @@ public void initializeState(StateInitializationContext context) throws Exception\n     this.maxCommittedCheckpointId = INITIAL_CHECKPOINT_ID;\n \n     this.checkpointsState = context.getOperatorStateStore().getListState(STATE_DESCRIPTOR);\n+    this.jobIdState = context.getOperatorStateStore().getListState(JOB_ID_DESCRIPTOR);\n     if (context.isRestored()) {\n       this.maxCommittedCheckpointId = getMaxCommittedCheckpointId(table, flinkJobId);\n-      // In the restoring path, it should have one valid snapshot for current flink job at least, so the max committed\n-      // checkpoint id should be positive. If it's not positive, that means someone might have removed or expired the\n-      // iceberg snapshot, in that case we should throw an exception in case of committing duplicated data files into\n-      // the iceberg table.\n-      Preconditions.checkState(maxCommittedCheckpointId != INITIAL_CHECKPOINT_ID,\n-          \"There should be an existing iceberg snapshot for current flink job: %s\", flinkJobId);\n-\n-      SortedMap<Long, List<DataFile>> restoredDataFiles = checkpointsState.get().iterator().next();\n-      // Only keep the uncommitted data files in the cache.\n-      this.dataFilesPerCheckpoint.putAll(restoredDataFiles.tailMap(maxCommittedCheckpointId + 1));\n+\n+      String oldFlinkJobId = jobIdState.get().iterator().next();\n+      Preconditions.checkState(oldFlinkJobId != null && oldFlinkJobId.length() > 0,\n+          \"Flink job id parsed from checkpoint snapshot shouldn't be null or empty\");\n+\n+      long oldMaxCommittedCheckpointId = flinkJobId.equals(oldFlinkJobId) ?", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4582f1585aa5ac82477bc11f9728ecd2b6e89a8d"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjExNzEwNw==", "bodyText": "Since flink's checkpoint id will start from the max-committed-checkpoint-id + 1 in the new flink job even if it's restored from a snapshot created by another different flink job, so it's safe to assign the max committed\ncheckpoint id from restored flink job to the current flink job.\nYeah, we could make it more simpler now.", "url": "https://github.com/apache/iceberg/pull/1404#discussion_r486117107", "createdAt": "2020-09-10T07:16:19Z", "author": {"login": "openinx"}, "path": "flink/src/main/java/org/apache/iceberg/flink/sink/IcebergFilesCommitter.java", "diffHunk": "@@ -108,18 +115,25 @@ public void initializeState(StateInitializationContext context) throws Exception\n     this.maxCommittedCheckpointId = INITIAL_CHECKPOINT_ID;\n \n     this.checkpointsState = context.getOperatorStateStore().getListState(STATE_DESCRIPTOR);\n+    this.jobIdState = context.getOperatorStateStore().getListState(JOB_ID_DESCRIPTOR);\n     if (context.isRestored()) {\n       this.maxCommittedCheckpointId = getMaxCommittedCheckpointId(table, flinkJobId);\n-      // In the restoring path, it should have one valid snapshot for current flink job at least, so the max committed\n-      // checkpoint id should be positive. If it's not positive, that means someone might have removed or expired the\n-      // iceberg snapshot, in that case we should throw an exception in case of committing duplicated data files into\n-      // the iceberg table.\n-      Preconditions.checkState(maxCommittedCheckpointId != INITIAL_CHECKPOINT_ID,\n-          \"There should be an existing iceberg snapshot for current flink job: %s\", flinkJobId);\n-\n-      SortedMap<Long, List<DataFile>> restoredDataFiles = checkpointsState.get().iterator().next();\n-      // Only keep the uncommitted data files in the cache.\n-      this.dataFilesPerCheckpoint.putAll(restoredDataFiles.tailMap(maxCommittedCheckpointId + 1));\n+\n+      String oldFlinkJobId = jobIdState.get().iterator().next();\n+      Preconditions.checkState(oldFlinkJobId != null && oldFlinkJobId.length() > 0,\n+          \"Flink job id parsed from checkpoint snapshot shouldn't be null or empty\");\n+\n+      long oldMaxCommittedCheckpointId = flinkJobId.equals(oldFlinkJobId) ?", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjA1OTgxMw=="}, "originalCommit": {"oid": "4582f1585aa5ac82477bc11f9728ecd2b6e89a8d"}, "originalPosition": 36}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3707, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}