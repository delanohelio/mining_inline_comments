{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU3MTU3NTc4", "number": 1255, "title": "Flink: Add Orc value reader, writer implementations", "bodyText": "", "createdAt": "2020-07-27T13:17:10Z", "url": "https://github.com/apache/iceberg/pull/1255", "merged": true, "mergeCommit": {"oid": "311f2a107fb2fac0103d9af871493f1cc1b9828b"}, "closed": true, "closedAt": "2020-08-20T16:17:19Z", "author": {"login": "openinx"}, "timelineItems": {"totalCount": 24, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc517_0ABqjM2MDE2NTA2NDE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdAq4VlgBqjM2NzM4Mjk3NTA=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "7b044963c17e9be12c62ac7b1c8544f791ca5b4d", "author": {"user": {"login": "openinx", "name": "openinx"}}, "url": "https://github.com/apache/iceberg/commit/7b044963c17e9be12c62ac7b1c8544f791ca5b4d", "committedDate": "2020-07-29T13:47:28Z", "message": "Fix the broken unit tests."}, "afterCommit": {"oid": "33cb24099332d577b066d8c7f657bf9ebc62cfb7", "author": {"user": {"login": "openinx", "name": "openinx"}}, "url": "https://github.com/apache/iceberg/commit/33cb24099332d577b066d8c7f657bf9ebc62cfb7", "committedDate": "2020-07-30T02:00:38Z", "message": "Fix the broken unit tests."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU3NTA1NTY4", "url": "https://github.com/apache/iceberg/pull/1255#pullrequestreview-457505568", "createdAt": "2020-07-29T13:12:01Z", "commit": {"oid": "6708967a97cc268b36087bb7451eeded65234df8"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxMzoxMjowMVrOG43t8w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxMzoxMjowMVrOG43t8w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjI4NjMyMw==", "bodyText": "It seems the flinkType here was just used for exception msg at the end of primitive method right ?", "url": "https://github.com/apache/iceberg/pull/1255#discussion_r462286323", "createdAt": "2020-07-29T13:12:01Z", "author": {"login": "simonsssu"}, "path": "flink/src/main/java/org/apache/iceberg/flink/data/FlinkOrcSchemaVisitor.java", "diffHunk": "@@ -0,0 +1,101 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.flink.data;\n+\n+import java.util.List;\n+import org.apache.flink.table.types.logical.ArrayType;\n+import org.apache.flink.table.types.logical.LogicalType;\n+import org.apache.flink.table.types.logical.MapType;\n+import org.apache.flink.table.types.logical.RowType;\n+import org.apache.iceberg.Schema;\n+import org.apache.iceberg.relocated.com.google.common.collect.Lists;\n+import org.apache.iceberg.types.Type;\n+import org.apache.iceberg.types.Types;\n+\n+abstract class FlinkOrcSchemaVisitor<T> {\n+\n+  static <T> T visit(LogicalType flinkType, Schema schema, FlinkOrcSchemaVisitor<T> visitor) {\n+    return visit(flinkType, schema.asStruct(), visitor);\n+  }\n+\n+  private static <T> T visit(LogicalType flinkType, Type iType, FlinkOrcSchemaVisitor<T> visitor) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6708967a97cc268b36087bb7451eeded65234df8"}, "originalPosition": 38}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYxMzMzNjQ0", "url": "https://github.com/apache/iceberg/pull/1255#pullrequestreview-461333644", "createdAt": "2020-08-05T04:36:44Z", "commit": {"oid": "33cb24099332d577b066d8c7f657bf9ebc62cfb7"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwNDozNjo0NFrOG752-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwNDozNjo0NFrOG752-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQ2NzEyOQ==", "bodyText": "Lets use proper types instead of wild cards here. For instance this will return OrcValueWriter<StringData>", "url": "https://github.com/apache/iceberg/pull/1255#discussion_r465467129", "createdAt": "2020-08-05T04:36:44Z", "author": {"login": "rdsr"}, "path": "flink/src/main/java/org/apache/iceberg/flink/data/FlinkOrcWriters.java", "diffHunk": "@@ -0,0 +1,320 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.flink.data;\n+\n+import java.time.Instant;\n+import java.time.OffsetDateTime;\n+import java.time.ZoneOffset;\n+import java.util.List;\n+import org.apache.flink.table.data.ArrayData;\n+import org.apache.flink.table.data.DecimalData;\n+import org.apache.flink.table.data.MapData;\n+import org.apache.flink.table.data.RowData;\n+import org.apache.flink.table.data.StringData;\n+import org.apache.flink.table.data.TimestampData;\n+import org.apache.flink.table.types.logical.LogicalType;\n+import org.apache.iceberg.orc.OrcValueWriter;\n+import org.apache.iceberg.relocated.com.google.common.collect.Lists;\n+import org.apache.orc.storage.common.type.HiveDecimal;\n+import org.apache.orc.storage.ql.exec.vector.BytesColumnVector;\n+import org.apache.orc.storage.ql.exec.vector.ColumnVector;\n+import org.apache.orc.storage.ql.exec.vector.DecimalColumnVector;\n+import org.apache.orc.storage.ql.exec.vector.ListColumnVector;\n+import org.apache.orc.storage.ql.exec.vector.LongColumnVector;\n+import org.apache.orc.storage.ql.exec.vector.MapColumnVector;\n+import org.apache.orc.storage.ql.exec.vector.StructColumnVector;\n+import org.apache.orc.storage.ql.exec.vector.TimestampColumnVector;\n+\n+class FlinkOrcWriters {\n+\n+  private FlinkOrcWriters() {\n+  }\n+\n+  static OrcValueWriter<?> strings() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "33cb24099332d577b066d8c7f657bf9ebc62cfb7"}, "originalPosition": 50}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYxMzUwMDg5", "url": "https://github.com/apache/iceberg/pull/1255#pullrequestreview-461350089", "createdAt": "2020-08-05T05:29:44Z", "commit": {"oid": "33cb24099332d577b066d8c7f657bf9ebc62cfb7"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwNToyOTo0NVrOG76wVA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwNToyOTo0NVrOG76wVA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQ4MTgxMg==", "bodyText": "Seems like these are not really used. I wonder if that's a bug. As per the Iceberg spec, for decimals, scale cannot change but precision can widen. In that case, I presume we should be able to make use of the read iceberg schema's precision.  We don't have to address it here but I guess a ticket is warranted where we should see if schema evolution for decimals in ORC works correctly", "url": "https://github.com/apache/iceberg/pull/1255#discussion_r465481812", "createdAt": "2020-08-05T05:29:45Z", "author": {"login": "rdsr"}, "path": "flink/src/main/java/org/apache/iceberg/flink/data/FlinkOrcReaders.java", "diffHunk": "@@ -0,0 +1,260 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.flink.data;\n+\n+import java.math.BigDecimal;\n+import java.time.Instant;\n+import java.time.LocalDateTime;\n+import java.time.ZoneOffset;\n+import java.util.List;\n+import java.util.Map;\n+import org.apache.flink.table.data.ArrayData;\n+import org.apache.flink.table.data.DecimalData;\n+import org.apache.flink.table.data.GenericArrayData;\n+import org.apache.flink.table.data.GenericMapData;\n+import org.apache.flink.table.data.GenericRowData;\n+import org.apache.flink.table.data.MapData;\n+import org.apache.flink.table.data.RowData;\n+import org.apache.flink.table.data.StringData;\n+import org.apache.flink.table.data.TimestampData;\n+import org.apache.iceberg.orc.OrcValueReader;\n+import org.apache.iceberg.orc.OrcValueReaders;\n+import org.apache.iceberg.relocated.com.google.common.collect.Lists;\n+import org.apache.iceberg.relocated.com.google.common.collect.Maps;\n+import org.apache.iceberg.types.Types;\n+import org.apache.orc.storage.ql.exec.vector.BytesColumnVector;\n+import org.apache.orc.storage.ql.exec.vector.ColumnVector;\n+import org.apache.orc.storage.ql.exec.vector.DecimalColumnVector;\n+import org.apache.orc.storage.ql.exec.vector.ListColumnVector;\n+import org.apache.orc.storage.ql.exec.vector.LongColumnVector;\n+import org.apache.orc.storage.ql.exec.vector.MapColumnVector;\n+import org.apache.orc.storage.ql.exec.vector.TimestampColumnVector;\n+import org.apache.orc.storage.serde2.io.HiveDecimalWritable;\n+\n+class FlinkOrcReaders {\n+  private FlinkOrcReaders() {\n+  }\n+\n+  static OrcValueReader<StringData> strings() {\n+    return StringReader.INSTANCE;\n+  }\n+\n+  static OrcValueReader<Integer> dates() {\n+    return DateReader.INSTANCE;\n+  }\n+\n+  static OrcValueReader<DecimalData> decimals(int precision, int scale) {\n+    if (precision <= 18) {\n+      return new Decimal18Reader(precision, scale);\n+    } else {\n+      return new Decimal38Reader(precision, scale);\n+    }\n+  }\n+\n+  static OrcValueReader<Integer> times() {\n+    return TimeReader.INSTANCE;\n+  }\n+\n+  static OrcValueReader<TimestampData> timestamps() {\n+    return TimestampReader.INSTANCE;\n+  }\n+\n+  static OrcValueReader<TimestampData> timestampTzs() {\n+    return TimestampTzReader.INSTANCE;\n+  }\n+\n+  static <T> OrcValueReader<ArrayData> array(OrcValueReader<T> elementReader) {\n+    return new ArrayReader<>(elementReader);\n+  }\n+\n+  public static <K, V> OrcValueReader<MapData> map(OrcValueReader<K> keyReader, OrcValueReader<V> valueReader) {\n+    return new MapReader<>(keyReader, valueReader);\n+  }\n+\n+  public static OrcValueReader<RowData> struct(List<OrcValueReader<?>> readers,\n+                                               Types.StructType struct,\n+                                               Map<Integer, ?> idToConstant) {\n+    return new StructReader(readers, struct, idToConstant);\n+  }\n+\n+  private static class StringReader implements OrcValueReader<StringData> {\n+    private static final StringReader INSTANCE = new StringReader();\n+\n+    @Override\n+    public StringData nonNullRead(ColumnVector vector, int row) {\n+      BytesColumnVector bytesVector = (BytesColumnVector) vector;\n+      return StringData.fromBytes(bytesVector.vector[row], bytesVector.start[row], bytesVector.length[row]);\n+    }\n+  }\n+\n+  private static class DateReader implements OrcValueReader<Integer> {\n+    private static final DateReader INSTANCE = new DateReader();\n+\n+    @Override\n+    public Integer nonNullRead(ColumnVector vector, int row) {\n+      return (int) ((LongColumnVector) vector).vector[row];\n+    }\n+  }\n+\n+  private static class Decimal18Reader implements OrcValueReader<DecimalData> {\n+    private final int precision;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "33cb24099332d577b066d8c7f657bf9ebc62cfb7"}, "originalPosition": 117}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYxODcwOTIw", "url": "https://github.com/apache/iceberg/pull/1255#pullrequestreview-461870920", "createdAt": "2020-08-05T17:20:51Z", "commit": {"oid": "3972bf4602db6d02538ea68e17cdb6181f603750"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQxNzoyMDo1MVrOG8TTKQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQxNzoyMDo1MVrOG8TTKQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTg4Mzk0NQ==", "bodyText": "I don't think this is related to ORC in any way. So maybe we can rename it to FlinkSchemaVisitor?", "url": "https://github.com/apache/iceberg/pull/1255#discussion_r465883945", "createdAt": "2020-08-05T17:20:51Z", "author": {"login": "rdsr"}, "path": "flink/src/main/java/org/apache/iceberg/flink/data/FlinkOrcSchemaVisitor.java", "diffHunk": "@@ -0,0 +1,106 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.flink.data;\n+\n+import java.util.List;\n+import org.apache.flink.table.types.logical.ArrayType;\n+import org.apache.flink.table.types.logical.LogicalType;\n+import org.apache.flink.table.types.logical.MapType;\n+import org.apache.flink.table.types.logical.RowType;\n+import org.apache.iceberg.Schema;\n+import org.apache.iceberg.relocated.com.google.common.base.Preconditions;\n+import org.apache.iceberg.relocated.com.google.common.collect.Lists;\n+import org.apache.iceberg.types.Type;\n+import org.apache.iceberg.types.Types;\n+\n+abstract class FlinkOrcSchemaVisitor<T> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3972bf4602db6d02538ea68e17cdb6181f603750"}, "originalPosition": 33}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYyMTUyMjUy", "url": "https://github.com/apache/iceberg/pull/1255#pullrequestreview-462152252", "createdAt": "2020-08-06T02:53:36Z", "commit": {"oid": "3972bf4602db6d02538ea68e17cdb6181f603750"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQwMjo1MzozN1rOG8hacQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQwMjo1MzozN1rOG8hacQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjExNTE4NQ==", "bodyText": "for UUID type,  we flink should return GenericOrcWriters.bytes() instead of GenericOrcWriters.uuids(),  will fix this in next path.  The reader will also need to fix.", "url": "https://github.com/apache/iceberg/pull/1255#discussion_r466115185", "createdAt": "2020-08-06T02:53:37Z", "author": {"login": "openinx"}, "path": "flink/src/main/java/org/apache/iceberg/flink/data/FlinkOrcWriter.java", "diffHunk": "@@ -0,0 +1,128 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.flink.data;\n+\n+import java.util.List;\n+import org.apache.flink.table.data.RowData;\n+import org.apache.flink.table.types.logical.LogicalType;\n+import org.apache.flink.table.types.logical.RowType;\n+import org.apache.iceberg.Schema;\n+import org.apache.iceberg.data.orc.GenericOrcWriters;\n+import org.apache.iceberg.orc.OrcRowWriter;\n+import org.apache.iceberg.orc.OrcValueWriter;\n+import org.apache.iceberg.relocated.com.google.common.collect.Lists;\n+import org.apache.iceberg.types.Type;\n+import org.apache.iceberg.types.Types;\n+import org.apache.orc.storage.ql.exec.vector.VectorizedRowBatch;\n+\n+public class FlinkOrcWriter implements OrcRowWriter<RowData> {\n+  private final FlinkOrcWriters.StructWriter writer;\n+  private final List<RowData.FieldGetter> fieldGetters;\n+\n+  private FlinkOrcWriter(RowType rowType, Schema iSchema) {\n+    this.writer = (FlinkOrcWriters.StructWriter) FlinkOrcSchemaVisitor.visit(rowType, iSchema, new WriteBuilder());\n+\n+    List<LogicalType> fieldTypes = rowType.getChildren();\n+    this.fieldGetters = Lists.newArrayListWithExpectedSize(fieldTypes.size());\n+    for (int i = 0; i < fieldTypes.size(); i++) {\n+      fieldGetters.add(RowData.createFieldGetter(fieldTypes.get(i), i));\n+    }\n+  }\n+\n+  public static OrcRowWriter<RowData> buildWriter(RowType rowType, Schema iSchema) {\n+    return new FlinkOrcWriter(rowType, iSchema);\n+  }\n+\n+  @Override\n+  @SuppressWarnings(\"unchecked\")\n+  public void write(RowData row, VectorizedRowBatch output) {\n+    int rowId = output.size;\n+    output.size += 1;\n+\n+    List<OrcValueWriter<?>> writers = writer.writers();\n+    for (int c = 0; c < writers.size(); ++c) {\n+      OrcValueWriter child = writers.get(c);\n+      child.write(rowId, fieldGetters.get(c).getFieldOrNull(row), output.cols[c]);\n+    }\n+  }\n+\n+  private static class WriteBuilder extends FlinkOrcSchemaVisitor<OrcValueWriter<?>> {\n+    private WriteBuilder() {\n+    }\n+\n+    @Override\n+    public OrcValueWriter<RowData> record(Types.StructType iStruct,\n+                                          List<OrcValueWriter<?>> results,\n+                                          List<LogicalType> fieldType) {\n+      return FlinkOrcWriters.struct(results, fieldType);\n+    }\n+\n+    @Override\n+    public OrcValueWriter<?> map(Types.MapType iMap, OrcValueWriter<?> key, OrcValueWriter<?> value,\n+                                 LogicalType keyType, LogicalType valueType) {\n+      return FlinkOrcWriters.map(key, value, keyType, valueType);\n+    }\n+\n+    @Override\n+    public OrcValueWriter<?> list(Types.ListType iList, OrcValueWriter<?> element, LogicalType elementType) {\n+      return FlinkOrcWriters.list(element, elementType);\n+    }\n+\n+    @Override\n+    public OrcValueWriter<?> primitive(Type.PrimitiveType iPrimitive, LogicalType flinkPrimitive) {\n+      switch (iPrimitive.typeId()) {\n+        case BOOLEAN:\n+          return GenericOrcWriters.booleans();\n+        case INTEGER:\n+          return GenericOrcWriters.ints();\n+        case LONG:\n+          return GenericOrcWriters.longs();\n+        case FLOAT:\n+          return GenericOrcWriters.floats();\n+        case DOUBLE:\n+          return GenericOrcWriters.doubles();\n+        case DATE:\n+          return FlinkOrcWriters.dates();\n+        case TIME:\n+          return FlinkOrcWriters.times();\n+        case TIMESTAMP:\n+          Types.TimestampType timestampType = (Types.TimestampType) iPrimitive;\n+          if (timestampType.shouldAdjustToUTC()) {\n+            return FlinkOrcWriters.timestampTzs();\n+          } else {\n+            return FlinkOrcWriters.timestamps();\n+          }\n+        case STRING:\n+          return FlinkOrcWriters.strings();\n+        case UUID:\n+          return GenericOrcWriters.uuids();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3972bf4602db6d02538ea68e17cdb6181f603750"}, "originalPosition": 115}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY3MzA4MTE0", "url": "https://github.com/apache/iceberg/pull/1255#pullrequestreview-467308114", "createdAt": "2020-08-14T05:01:34Z", "commit": {"oid": "d416ed5c4c319347b09615e899debe904fb236aa"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQwNTowMTozNFrOHAnnXQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQwNTowMTozNFrOHAnnXQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDQxMTEwMQ==", "bodyText": "I think I understand why u needed to build a FlinkSchemaVisitor. Unlike Spark, it seems in Flink, there's no common super interface for internal datatypes [list, map, struct], like SpecializedGetters for Spark. So we had to know upfront what is the type to pass to struct, map and list writers, whereas in Spark we can simply pass the parent SpecializedGetters object and get the right data type from within in.", "url": "https://github.com/apache/iceberg/pull/1255#discussion_r470411101", "createdAt": "2020-08-14T05:01:34Z", "author": {"login": "rdsr"}, "path": "flink/src/main/java/org/apache/iceberg/flink/data/FlinkSchemaVisitor.java", "diffHunk": "@@ -0,0 +1,106 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.flink.data;\n+\n+import java.util.List;\n+import org.apache.flink.table.types.logical.ArrayType;\n+import org.apache.flink.table.types.logical.LogicalType;\n+import org.apache.flink.table.types.logical.MapType;\n+import org.apache.flink.table.types.logical.RowType;\n+import org.apache.iceberg.Schema;\n+import org.apache.iceberg.relocated.com.google.common.base.Preconditions;\n+import org.apache.iceberg.relocated.com.google.common.collect.Lists;\n+import org.apache.iceberg.types.Type;\n+import org.apache.iceberg.types.Types;\n+\n+abstract class FlinkSchemaVisitor<T> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d416ed5c4c319347b09615e899debe904fb236aa"}, "originalPosition": 33}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY3MzEyMDE0", "url": "https://github.com/apache/iceberg/pull/1255#pullrequestreview-467312014", "createdAt": "2020-08-14T05:15:58Z", "commit": {"oid": "d416ed5c4c319347b09615e899debe904fb236aa"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY5ODg0MzUz", "url": "https://github.com/apache/iceberg/pull/1255#pullrequestreview-469884353", "createdAt": "2020-08-18T22:56:01Z", "commit": {"oid": "d416ed5c4c319347b09615e899debe904fb236aa"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQyMjo1NjowMVrOHCpb1w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQyMjo1NjowMVrOHCpb1w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjUzODA3MQ==", "bodyText": "Should the FixedWriter class also be renamed to BytesWriter?", "url": "https://github.com/apache/iceberg/pull/1255#discussion_r472538071", "createdAt": "2020-08-18T22:56:01Z", "author": {"login": "rdblue"}, "path": "data/src/main/java/org/apache/iceberg/data/orc/GenericOrcWriters.java", "diffHunk": "@@ -87,7 +87,7 @@ private GenericOrcWriters() {\n     return UUIDWriter.INSTANCE;\n   }\n \n-  public static OrcValueWriter<byte[]> fixed() {\n+  public static OrcValueWriter<byte[]> bytes() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d416ed5c4c319347b09615e899debe904fb236aa"}, "originalPosition": 5}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY5ODg0NzEw", "url": "https://github.com/apache/iceberg/pull/1255#pullrequestreview-469884710", "createdAt": "2020-08-18T22:57:00Z", "commit": {"oid": "d416ed5c4c319347b09615e899debe904fb236aa"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQyMjo1NzowMFrOHCpdEQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQyMjo1NzowMFrOHCpdEQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjUzODM4NQ==", "bodyText": "What about the TODO to check the scale matches the column's scale? As long as we're updating this, does it make sense to fix that, since we just had a decimal scale problem?", "url": "https://github.com/apache/iceberg/pull/1255#discussion_r472538385", "createdAt": "2020-08-18T22:57:00Z", "author": {"login": "rdblue"}, "path": "data/src/main/java/org/apache/iceberg/data/orc/GenericOrcWriters.java", "diffHunk": "@@ -326,7 +326,7 @@ public void nonNullWrite(int rowId, LocalDateTime data, ColumnVector output) {\n     public void nonNullWrite(int rowId, BigDecimal data, ColumnVector output) {\n       // TODO: validate precision and scale from schema\n       ((DecimalColumnVector) output).vector[rowId]\n-          .setFromLongAndScale(data.unscaledValue().longValueExact(), scale);\n+          .setFromLongAndScale(data.unscaledValue().longValueExact(), data.scale());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d416ed5c4c319347b09615e899debe904fb236aa"}, "originalPosition": 14}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY5ODg2MDk4", "url": "https://github.com/apache/iceberg/pull/1255#pullrequestreview-469886098", "createdAt": "2020-08-18T23:00:41Z", "commit": {"oid": "d416ed5c4c319347b09615e899debe904fb236aa"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQyMzowMDo0MVrOHCphrQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQyMzowMDo0MVrOHCphrQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjUzOTU2NQ==", "bodyText": "Can this list be reused? Allocating a new ArrayList each time could lead to poor performance.", "url": "https://github.com/apache/iceberg/pull/1255#discussion_r472539565", "createdAt": "2020-08-18T23:00:41Z", "author": {"login": "rdblue"}, "path": "flink/src/main/java/org/apache/iceberg/flink/data/FlinkOrcReaders.java", "diffHunk": "@@ -0,0 +1,262 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.flink.data;\n+\n+import java.math.BigDecimal;\n+import java.time.Instant;\n+import java.time.LocalDateTime;\n+import java.time.ZoneOffset;\n+import java.util.List;\n+import java.util.Map;\n+import org.apache.flink.table.data.ArrayData;\n+import org.apache.flink.table.data.DecimalData;\n+import org.apache.flink.table.data.GenericArrayData;\n+import org.apache.flink.table.data.GenericMapData;\n+import org.apache.flink.table.data.GenericRowData;\n+import org.apache.flink.table.data.MapData;\n+import org.apache.flink.table.data.RowData;\n+import org.apache.flink.table.data.StringData;\n+import org.apache.flink.table.data.TimestampData;\n+import org.apache.iceberg.orc.OrcValueReader;\n+import org.apache.iceberg.orc.OrcValueReaders;\n+import org.apache.iceberg.relocated.com.google.common.collect.Lists;\n+import org.apache.iceberg.relocated.com.google.common.collect.Maps;\n+import org.apache.iceberg.types.Types;\n+import org.apache.orc.storage.ql.exec.vector.BytesColumnVector;\n+import org.apache.orc.storage.ql.exec.vector.ColumnVector;\n+import org.apache.orc.storage.ql.exec.vector.DecimalColumnVector;\n+import org.apache.orc.storage.ql.exec.vector.ListColumnVector;\n+import org.apache.orc.storage.ql.exec.vector.LongColumnVector;\n+import org.apache.orc.storage.ql.exec.vector.MapColumnVector;\n+import org.apache.orc.storage.ql.exec.vector.TimestampColumnVector;\n+import org.apache.orc.storage.serde2.io.HiveDecimalWritable;\n+\n+class FlinkOrcReaders {\n+  private FlinkOrcReaders() {\n+  }\n+\n+  static OrcValueReader<StringData> strings() {\n+    return StringReader.INSTANCE;\n+  }\n+\n+  static OrcValueReader<Integer> dates() {\n+    return DateReader.INSTANCE;\n+  }\n+\n+  static OrcValueReader<DecimalData> decimals(int precision, int scale) {\n+    if (precision <= 18) {\n+      return new Decimal18Reader(precision, scale);\n+    } else if (precision <= 38) {\n+      return new Decimal38Reader(precision, scale);\n+    } else {\n+      throw new IllegalArgumentException(\"Invalid precision: \" + precision);\n+    }\n+  }\n+\n+  static OrcValueReader<Integer> times() {\n+    return TimeReader.INSTANCE;\n+  }\n+\n+  static OrcValueReader<TimestampData> timestamps() {\n+    return TimestampReader.INSTANCE;\n+  }\n+\n+  static OrcValueReader<TimestampData> timestampTzs() {\n+    return TimestampTzReader.INSTANCE;\n+  }\n+\n+  static <T> OrcValueReader<ArrayData> array(OrcValueReader<T> elementReader) {\n+    return new ArrayReader<>(elementReader);\n+  }\n+\n+  public static <K, V> OrcValueReader<MapData> map(OrcValueReader<K> keyReader, OrcValueReader<V> valueReader) {\n+    return new MapReader<>(keyReader, valueReader);\n+  }\n+\n+  public static OrcValueReader<RowData> struct(List<OrcValueReader<?>> readers,\n+                                               Types.StructType struct,\n+                                               Map<Integer, ?> idToConstant) {\n+    return new StructReader(readers, struct, idToConstant);\n+  }\n+\n+  private static class StringReader implements OrcValueReader<StringData> {\n+    private static final StringReader INSTANCE = new StringReader();\n+\n+    @Override\n+    public StringData nonNullRead(ColumnVector vector, int row) {\n+      BytesColumnVector bytesVector = (BytesColumnVector) vector;\n+      return StringData.fromBytes(bytesVector.vector[row], bytesVector.start[row], bytesVector.length[row]);\n+    }\n+  }\n+\n+  private static class DateReader implements OrcValueReader<Integer> {\n+    private static final DateReader INSTANCE = new DateReader();\n+\n+    @Override\n+    public Integer nonNullRead(ColumnVector vector, int row) {\n+      return (int) ((LongColumnVector) vector).vector[row];\n+    }\n+  }\n+\n+  private static class Decimal18Reader implements OrcValueReader<DecimalData> {\n+    private final int precision;\n+    private final int scale;\n+\n+    Decimal18Reader(int precision, int scale) {\n+      this.precision = precision;\n+      this.scale = scale;\n+    }\n+\n+    @Override\n+    public DecimalData nonNullRead(ColumnVector vector, int row) {\n+      HiveDecimalWritable value = ((DecimalColumnVector) vector).vector[row];\n+      return DecimalData.fromUnscaledLong(value.serialize64(scale), precision, scale);\n+    }\n+  }\n+\n+  private static class Decimal38Reader implements OrcValueReader<DecimalData> {\n+    private final int precision;\n+    private final int scale;\n+\n+    Decimal38Reader(int precision, int scale) {\n+      this.precision = precision;\n+      this.scale = scale;\n+    }\n+\n+    @Override\n+    public DecimalData nonNullRead(ColumnVector vector, int row) {\n+      BigDecimal value = ((DecimalColumnVector) vector).vector[row].getHiveDecimal().bigDecimalValue();\n+      return DecimalData.fromBigDecimal(value, precision, scale);\n+    }\n+  }\n+\n+  private static class TimeReader implements OrcValueReader<Integer> {\n+    private static final TimeReader INSTANCE = new TimeReader();\n+\n+    @Override\n+    public Integer nonNullRead(ColumnVector vector, int row) {\n+      long micros = ((LongColumnVector) vector).vector[row];\n+      // Flink only support time mills, just erase micros.\n+      return (int) (micros / 1000);\n+    }\n+  }\n+\n+  private static class TimestampReader implements OrcValueReader<TimestampData> {\n+    private static final TimestampReader INSTANCE = new TimestampReader();\n+\n+    @Override\n+    public TimestampData nonNullRead(ColumnVector vector, int row) {\n+      TimestampColumnVector tcv = (TimestampColumnVector) vector;\n+      LocalDateTime localDate = Instant.ofEpochSecond(Math.floorDiv(tcv.time[row], 1_000), tcv.nanos[row])\n+          .atOffset(ZoneOffset.UTC)\n+          .toLocalDateTime();\n+      return TimestampData.fromLocalDateTime(localDate);\n+    }\n+  }\n+\n+  private static class TimestampTzReader implements OrcValueReader<TimestampData> {\n+    private static final TimestampTzReader INSTANCE = new TimestampTzReader();\n+\n+    @Override\n+    public TimestampData nonNullRead(ColumnVector vector, int row) {\n+      TimestampColumnVector tcv = (TimestampColumnVector) vector;\n+      Instant instant = Instant.ofEpochSecond(Math.floorDiv(tcv.time[row], 1_000), tcv.nanos[row])\n+          .atOffset(ZoneOffset.UTC)\n+          .toInstant();\n+      return TimestampData.fromInstant(instant);\n+    }\n+  }\n+\n+  private static class ArrayReader<T> implements OrcValueReader<ArrayData> {\n+    private final OrcValueReader<T> elementReader;\n+\n+    private ArrayReader(OrcValueReader<T> elementReader) {\n+      this.elementReader = elementReader;\n+    }\n+\n+    @Override\n+    public ArrayData nonNullRead(ColumnVector vector, int row) {\n+      ListColumnVector listVector = (ListColumnVector) vector;\n+      int offset = (int) listVector.offsets[row];\n+      int length = (int) listVector.lengths[row];\n+      List<T> elements = Lists.newArrayListWithExpectedSize(length);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d416ed5c4c319347b09615e899debe904fb236aa"}, "originalPosition": 199}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY5OTAyMzM2", "url": "https://github.com/apache/iceberg/pull/1255#pullrequestreview-469902336", "createdAt": "2020-08-18T23:44:59Z", "commit": {"oid": "d416ed5c4c319347b09615e899debe904fb236aa"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQyMzo0NDo1OVrOHCqZFA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQyMzo0NDo1OVrOHCqZFA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjU1Mzc0OA==", "bodyText": "It looks like this validates records read by the reader against records written by the reader and subsequently read by the reader. I think it should validate the reader and writer separately. I think it should have to parts:\n\nWrite using generics, read using Flink, and use assertEquals(schema, genericRow, flinkRow)\nWrite using generics, read with Flink, write with Flink, read with generics and use assertEquals(genericRow, endGenericRow).\n\nThat way, we're always comparing results against the generics that were originally generated. I think we already have the assertEquals code to do it.", "url": "https://github.com/apache/iceberg/pull/1255#discussion_r472553748", "createdAt": "2020-08-18T23:44:59Z", "author": {"login": "rdblue"}, "path": "flink/src/test/java/org/apache/iceberg/flink/data/TestFlinkOrcReaderWriter.java", "diffHunk": "@@ -0,0 +1,96 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.flink.data;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.Iterator;\n+import java.util.List;\n+import org.apache.flink.table.data.RowData;\n+import org.apache.flink.table.types.logical.RowType;\n+import org.apache.iceberg.Files;\n+import org.apache.iceberg.Schema;\n+import org.apache.iceberg.data.DataTest;\n+import org.apache.iceberg.data.RandomGenericData;\n+import org.apache.iceberg.data.Record;\n+import org.apache.iceberg.data.orc.GenericOrcWriter;\n+import org.apache.iceberg.flink.FlinkSchemaUtil;\n+import org.apache.iceberg.io.CloseableIterable;\n+import org.apache.iceberg.io.FileAppender;\n+import org.apache.iceberg.orc.ORC;\n+import org.apache.iceberg.relocated.com.google.common.collect.Lists;\n+import org.junit.Assert;\n+import org.junit.Rule;\n+import org.junit.rules.TemporaryFolder;\n+\n+public class TestFlinkOrcReaderWriter extends DataTest {\n+  private static final int NUM_RECORDS = 200;\n+\n+  @Rule\n+  public TemporaryFolder temp = new TemporaryFolder();\n+\n+  @Override\n+  protected void writeAndValidate(Schema schema) throws IOException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d416ed5c4c319347b09615e899debe904fb236aa"}, "originalPosition": 50}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d416ed5c4c319347b09615e899debe904fb236aa", "author": {"user": {"login": "openinx", "name": "openinx"}}, "url": "https://github.com/apache/iceberg/commit/d416ed5c4c319347b09615e899debe904fb236aa", "committedDate": "2020-08-06T02:54:51Z", "message": "Addressing the comment and fixing the uuid type issues."}, "afterCommit": {"oid": "56c6ec6cd5a11d4e37265385352b1bc34bc9d032", "author": {"user": {"login": "openinx", "name": "openinx"}}, "url": "https://github.com/apache/iceberg/commit/56c6ec6cd5a11d4e37265385352b1bc34bc9d032", "committedDate": "2020-08-19T16:18:41Z", "message": "Addressing the comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDcxMDU4NTUy", "url": "https://github.com/apache/iceberg/pull/1255#pullrequestreview-471058552", "createdAt": "2020-08-20T00:58:04Z", "commit": {"oid": "2ec4ce6030230e90e8becf3b0a79dca88c4024e1"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQwMDo1ODowNFrOHDjmXQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQwMDo1ODowNFrOHDjmXQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzQ5MTAzNw==", "bodyText": "This fixed the broken unit tests in flink: 2ec4ce6#diff-6820fc22b4e5cbfa4a1c029bf5c8c789L255.\nwe may need to add similar UT in spark so that we could write the tinyint and smallint to spark correctly,  I will take a look.", "url": "https://github.com/apache/iceberg/pull/1255#discussion_r473491037", "createdAt": "2020-08-20T00:58:04Z", "author": {"login": "openinx"}, "path": "flink/src/main/java/org/apache/iceberg/flink/data/FlinkOrcWriter.java", "diffHunk": "@@ -91,6 +91,12 @@ private WriteBuilder() {\n         case BOOLEAN:\n           return GenericOrcWriters.booleans();\n         case INTEGER:\n+          switch (flinkPrimitive.getTypeRoot()) {\n+            case TINYINT:\n+              return GenericOrcWriters.bytes();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2ec4ce6030230e90e8becf3b0a79dca88c4024e1"}, "originalPosition": 6}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0144a1f66143f5d23da322ec83a672b5108b377a", "author": {"user": {"login": "openinx", "name": "openinx"}}, "url": "https://github.com/apache/iceberg/commit/0144a1f66143f5d23da322ec83a672b5108b377a", "committedDate": "2020-08-20T06:56:40Z", "message": "Flink: Add Orc value reader, writer implementations"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7e03783e698722497a2af7a1d839f1506c4a076c", "author": {"user": {"login": "openinx", "name": "openinx"}}, "url": "https://github.com/apache/iceberg/commit/7e03783e698722497a2af7a1d839f1506c4a076c", "committedDate": "2020-08-20T06:56:40Z", "message": "Add flink orc writers."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "11f5a0812ab4e517b352da28b0a6ff56b6c1543a", "author": {"user": {"login": "openinx", "name": "openinx"}}, "url": "https://github.com/apache/iceberg/commit/11f5a0812ab4e517b352da28b0a6ff56b6c1543a", "committedDate": "2020-08-20T06:56:40Z", "message": "Add unit tests."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b77a71327f58803c9c0d2575a1d83facf18ffff1", "author": {"user": {"login": "openinx", "name": "openinx"}}, "url": "https://github.com/apache/iceberg/commit/b77a71327f58803c9c0d2575a1d83facf18ffff1", "committedDate": "2020-08-20T06:56:40Z", "message": "Fix the broken unit tests."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dbc4ccea1eee5611b24fd69f1bac7c4f5992051d", "author": {"user": {"login": "openinx", "name": "openinx"}}, "url": "https://github.com/apache/iceberg/commit/dbc4ccea1eee5611b24fd69f1bac7c4f5992051d", "committedDate": "2020-08-20T06:56:40Z", "message": "Addressing comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9cf929eae7b216118fb0039ae43305ceb85585af", "author": {"user": {"login": "openinx", "name": "openinx"}}, "url": "https://github.com/apache/iceberg/commit/9cf929eae7b216118fb0039ae43305ceb85585af", "committedDate": "2020-08-20T06:56:40Z", "message": "Addressing the comment and fixing the uuid type issues."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7ffb1a9c9a5d56facfe4a4aa94e4c41337f8bdaa", "author": {"user": {"login": "openinx", "name": "openinx"}}, "url": "https://github.com/apache/iceberg/commit/7ffb1a9c9a5d56facfe4a4aa94e4c41337f8bdaa", "committedDate": "2020-08-20T06:56:40Z", "message": "Addressing the comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "75c2434120f0f6d4df1a2f371e57ee54fb0c4d48", "author": {"user": {"login": "openinx", "name": "openinx"}}, "url": "https://github.com/apache/iceberg/commit/75c2434120f0f6d4df1a2f371e57ee54fb0c4d48", "committedDate": "2020-08-20T06:56:40Z", "message": "Fix the broken unit tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "21dd824793238d5a9bc75a486372c5c10b9eb3ac", "author": {"user": {"login": "openinx", "name": "openinx"}}, "url": "https://github.com/apache/iceberg/commit/21dd824793238d5a9bc75a486372c5c10b9eb3ac", "committedDate": "2020-08-20T07:13:32Z", "message": "Rebase to use the flink TestHelpers."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "2ec4ce6030230e90e8becf3b0a79dca88c4024e1", "author": {"user": {"login": "openinx", "name": "openinx"}}, "url": "https://github.com/apache/iceberg/commit/2ec4ce6030230e90e8becf3b0a79dca88c4024e1", "committedDate": "2020-08-20T00:54:38Z", "message": "Fix the broken unit tests"}, "afterCommit": {"oid": "21dd824793238d5a9bc75a486372c5c10b9eb3ac", "author": {"user": {"login": "openinx", "name": "openinx"}}, "url": "https://github.com/apache/iceberg/commit/21dd824793238d5a9bc75a486372c5c10b9eb3ac", "committedDate": "2020-08-20T07:13:32Z", "message": "Rebase to use the flink TestHelpers."}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4342, "cost": 1, "resetAt": "2021-10-29T19:57:52Z"}}}