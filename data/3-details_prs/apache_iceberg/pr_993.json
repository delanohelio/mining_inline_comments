{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDExOTA4MDAx", "number": 993, "title": "Removing dependency on moz_sql_parser", "bodyText": "Cleaning up the dependency on moz_sql_parser and instead relying on pyparsing directly.\ncc: @danielcweeks @rdblue", "createdAt": "2020-05-01T00:16:33Z", "url": "https://github.com/apache/iceberg/pull/993", "merged": true, "mergeCommit": {"oid": "a49fb924cd6ce0da688f873b9107e91f597529d4"}, "closed": true, "closedAt": "2020-05-06T18:40:49Z", "author": {"login": "TGooch44"}, "timelineItems": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcc2kWEAFqTQwMzk2NDAxMw==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcespt8AFqTQwNjg2MTUwMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAzOTY0MDEz", "url": "https://github.com/apache/iceberg/pull/993#pullrequestreview-403964013", "createdAt": "2020-05-01T00:30:31Z", "commit": {"oid": "a1ac6c9cdce0041c17bf5dd10a38afe9f9bd80d5"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQwMDozMDozMVrOGO-0LQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQwMDozMDozMVrOGO-0LQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODM2MjQxMw==", "bodyText": "Is this derived from another parser or example? If so, we should make sure we note it so we can update the license documentation.", "url": "https://github.com/apache/iceberg/pull/993#discussion_r418362413", "createdAt": "2020-05-01T00:30:31Z", "author": {"login": "rdblue"}, "path": "python/iceberg/api/expressions/expression_parser.py", "diffHunk": "@@ -0,0 +1,157 @@\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+\n+import logging\n+\n+from pyparsing import (\n+    alphanums,\n+    alphas,\n+    CaselessKeyword,\n+    delimitedList,\n+    Group,\n+    infixNotation,\n+    oneOf,\n+    opAssoc,\n+    pyparsing_common as ppc,\n+    quotedString,\n+    Word\n+)\n+\n+\n+_logger = logging.getLogger(__name__)\n+\n+AND, OR, IN, IS, NOT, NULL, BETWEEN = map(\n+    CaselessKeyword, \"and or in is not null between\".split()\n+)\n+NOT_NULL = NOT + NULL\n+\n+ident = Word(alphas, alphanums + \"_$\").setName(\"identifier\")\n+columnName = delimitedList(ident, \".\", combine=True).setName(\"column name\")\n+\n+binop = oneOf(\"= == != < > >= <= eq ne lt le gt ge <>\", caseless=False)\n+realNum = ppc.real()\n+intNum = ppc.signed_integer()\n+\n+columnRval = (realNum\n+              | intNum\n+              | quotedString\n+              | columnName)  # need to add support for alg expressions\n+whereCondition = Group(\n+    (columnName + binop + columnRval)\n+    | (columnName + IN + Group(\"(\" + delimitedList(columnRval) + \")\"))\n+    | (columnName + IS + (NULL | NOT_NULL))\n+    | (columnName + BETWEEN + columnRval + AND + columnRval)\n+\n+)\n+\n+whereExpression = infixNotation(\n+    Group(whereCondition\n+          | NOT + whereCondition\n+          | NOT + Group('(' + whereCondition + ')')\n+          | NOT + columnName),\n+    [(NOT, 1, opAssoc.LEFT), (AND, 2, opAssoc.LEFT), (OR, 2, opAssoc.LEFT), (IS, 2, opAssoc.LEFT)],\n+)\n+\n+op_map = {\"=\": \"eq\",\n+          \"==\": \"eq\",\n+          \"eq\": \"eq\",\n+          \">\": \"gt\",\n+          \"gt\": \"gt\",\n+          \">=\": \"gte\",\n+          \"gte\": \"gte\",\n+          \"<\": \"lt\",\n+          \"lt\": \"lt\",\n+          \"<=\": \"lte\",\n+          \"lte\": \"lte\",\n+          \"!\": \"not\",\n+          \"not\": \"not\",\n+          \"!=\": \"neq\",\n+          \"<>\": \"neq\",\n+          \"neq\": \"neq\",\n+          \"||\": \"or\",\n+          \"or\": \"or\",\n+          \"&&\": \"and\",\n+          \"and\": \"and\",\n+          \"in\": \"in\",\n+          \"between\": \"between\",\n+          \"is\": \"is\"}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a1ac6c9cdce0041c17bf5dd10a38afe9f9bd80d5"}, "originalPosition": 89}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2ae4cb354a09eaa416582deb876cb7d274cd83ba", "author": {"user": null}, "url": "https://github.com/apache/iceberg/commit/2ae4cb354a09eaa416582deb876cb7d274cd83ba", "committedDate": "2020-05-01T18:08:53Z", "message": "Removing dependency on moz_sql_parser"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a1ac6c9cdce0041c17bf5dd10a38afe9f9bd80d5", "author": {"user": null}, "url": "https://github.com/apache/iceberg/commit/a1ac6c9cdce0041c17bf5dd10a38afe9f9bd80d5", "committedDate": "2020-05-01T00:13:26Z", "message": "Removing dependency on moz_sql_parser"}, "afterCommit": {"oid": "2ae4cb354a09eaa416582deb876cb7d274cd83ba", "author": {"user": null}, "url": "https://github.com/apache/iceberg/commit/2ae4cb354a09eaa416582deb876cb7d274cd83ba", "committedDate": "2020-05-01T18:08:53Z", "message": "Removing dependency on moz_sql_parser"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA2ODYxNTAz", "url": "https://github.com/apache/iceberg/pull/993#pullrequestreview-406861503", "createdAt": "2020-05-06T18:05:12Z", "commit": {"oid": "2ae4cb354a09eaa416582deb876cb7d274cd83ba"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxODowNToxMlrOGRfIHQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxODowNToxMlrOGRfIHQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDk4ODk1Nw==", "bodyText": "Isn't it normal for OR to be lower precedence than AND? I think the original case was correct.\nI tested this in Spark and Presto:\nselect * from rblue.test where id = 1 or id = 2 and data = 'b'\nPresto:\nfilterPredicate = ((\"id\" IN (BIGINT '1', BIGINT '2')) AND ((\"id\" = BIGINT '1') OR (\"data\" = CAST('b' AS varchar))))\n\nSpark:\nfilters=(id = 1 OR (id = 2 AND data = 'b'))\n\nIn both of them, AND has higher precedence than OR.", "url": "https://github.com/apache/iceberg/pull/993#discussion_r420988957", "createdAt": "2020-05-06T18:05:12Z", "author": {"login": "rdblue"}, "path": "python/tests/api/expressions/test_str_to_expr.py", "diffHunk": "@@ -117,14 +117,32 @@ def test_ternary_condition():\n \n \n def test_precedence():\n-    expected_expr = Expressions.and_(Expressions.or_(Expressions.equal(\"col_a\", 1),\n-                                                     Expressions.equal(\"col_b\", 2)),\n-                                     Expressions.equal(\"col_c\", 3))\n+    expected_expr = Expressions.or_(Expressions.equal(\"col_a\", 1),\n+                                    Expressions.and_(Expressions.equal(\"col_b\", 2),\n+                                                     Expressions.equal(\"col_c\", 3)))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2ae4cb354a09eaa416582deb876cb7d274cd83ba"}, "originalPosition": 9}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4650, "cost": 1, "resetAt": "2021-10-29T19:57:52Z"}}}