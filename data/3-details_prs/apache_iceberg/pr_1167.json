{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ0MzM5NTcx", "number": 1167, "title": "ORC: Simplify logic to determine which columns have stats", "bodyText": "This simplifies the visitor used to determine which ORC columns should have stats stored in table metadata. It uses the new visitor introduced in #1140. This is an alternative implementation to #1112.", "createdAt": "2020-07-04T23:52:11Z", "url": "https://github.com/apache/iceberg/pull/1167", "merged": true, "mergeCommit": {"oid": "2438f21a37ca269eb80f6149893ea2975a40d2b7"}, "closed": true, "closedAt": "2020-07-05T20:29:49Z", "author": {"login": "rdblue"}, "timelineItems": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcxw7V_AH2gAyNDQ0MzM5NTcxOmVhZGFjOGQ1ZGE0Zjc5MTFlNDczNGYxMDFjODc1NmVlMTJmMmFlYTk=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcyInTeAFqTQ0Mjc1MzUzNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "eadac8d5da4f7911e4734f101c8756ee12f2aea9", "author": {"user": {"login": "rdblue", "name": "Ryan Blue"}}, "url": "https://github.com/apache/iceberg/commit/eadac8d5da4f7911e4734f101c8756ee12f2aea9", "committedDate": "2020-07-04T23:48:38Z", "message": "ORC: Simplify logic to determine which columns have stats."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQyNjU2NTg0", "url": "https://github.com/apache/iceberg/pull/1167#pullrequestreview-442656584", "createdAt": "2020-07-05T08:14:02Z", "commit": {"oid": "eadac8d5da4f7911e4734f101c8756ee12f2aea9"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQyNzUzNTM2", "url": "https://github.com/apache/iceberg/pull/1167#pullrequestreview-442753536", "createdAt": "2020-07-06T03:24:28Z", "commit": {"oid": "eadac8d5da4f7911e4734f101c8756ee12f2aea9"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQwMzoyNDoyOFrOGtHuHg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQwMzoyNDoyOFrOGtHuHg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTk2NTU5OA==", "bodyText": "Just to verify, this would fail if there's any column that does not have an Iceberg ID. Is that preferred to skipping the metrics instead?", "url": "https://github.com/apache/iceberg/pull/1167#discussion_r449965598", "createdAt": "2020-07-06T03:24:28Z", "author": {"login": "edgarRd"}, "path": "orc/src/main/java/org/apache/iceberg/orc/OrcMetrics.java", "diffHunk": "@@ -209,64 +206,17 @@ private static Metrics buildOrcMetrics(final long numOfRows, final TypeDescripti\n     return Optional.ofNullable(Conversions.toByteBuffer(column.type(), max));\n   }\n \n-  private static Set<TypeDescription> findColumnsInContainers(Schema schema,\n-                                                              TypeDescription orcSchema) {\n-    ColumnsInContainersVisitor visitor = new ColumnsInContainersVisitor();\n-    OrcSchemaWithTypeVisitor.visit(schema, orcSchema, visitor);\n-    return visitor.getColumnsInContainers();\n+  private static Set<Integer> statsColumns(TypeDescription schema) {\n+    return OrcSchemaVisitor.visit(schema, new StatsColumnsVisitor());\n   }\n \n-  private static class ColumnsInContainersVisitor extends OrcSchemaWithTypeVisitor<TypeDescription> {\n-\n-    private final Set<TypeDescription> columnsInContainers;\n-\n-    private ColumnsInContainersVisitor() {\n-      columnsInContainers = Sets.newHashSet();\n-    }\n-\n-    public Set<TypeDescription> getColumnsInContainers() {\n-      return columnsInContainers;\n-    }\n-\n-    private Set<TypeDescription> flatten(TypeDescription rootType) {\n-      if (rootType == null) {\n-        return ImmutableSet.of();\n-      }\n-\n-      final Set<TypeDescription> flatTypes = Sets.newHashSetWithExpectedSize(rootType.getMaximumId());\n-      final Queue<TypeDescription> queue = Queues.newLinkedBlockingQueue();\n-      queue.add(rootType);\n-      while (!queue.isEmpty()) {\n-        TypeDescription type = queue.remove();\n-        flatTypes.add(type);\n-        queue.addAll(Optional.ofNullable(type.getChildren()).orElse(ImmutableList.of()));\n-      }\n-      return flatTypes;\n-    }\n-\n-    @Override\n-    public TypeDescription record(Types.StructType iStruct, TypeDescription record,\n-                                  List<String> names, List<TypeDescription> fields) {\n-      return record;\n-    }\n-\n-    @Override\n-    public TypeDescription list(Types.ListType iList, TypeDescription array, TypeDescription element) {\n-      columnsInContainers.addAll(flatten(element));\n-      return array;\n-    }\n-\n-    @Override\n-    public TypeDescription map(Types.MapType iMap, TypeDescription map,\n-                    TypeDescription key, TypeDescription value) {\n-      columnsInContainers.addAll(flatten(key));\n-      columnsInContainers.addAll(flatten(value));\n-      return map;\n-    }\n-\n+  private static class StatsColumnsVisitor extends OrcSchemaVisitor<Set<Integer>> {\n     @Override\n-    public TypeDescription primitive(Type.PrimitiveType iPrimitive, TypeDescription primitive) {\n-      return primitive;\n+    public Set<Integer> record(TypeDescription record, List<String> names, List<Set<Integer>> fields) {\n+      ImmutableSet.Builder<Integer> result = ImmutableSet.builder();\n+      fields.stream().filter(Objects::nonNull).forEach(result::addAll);\n+      record.getChildren().stream().map(ORCSchemaUtil::fieldId).forEach(result::add);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eadac8d5da4f7911e4734f101c8756ee12f2aea9"}, "originalPosition": 108}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4600, "cost": 1, "resetAt": "2021-10-29T19:57:52Z"}}}