{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDIzNTE3NDAz", "number": 1070, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QwMToxMDo1OVrOD_5Y9Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QwMToxNjowNVrOD_5fUQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4MzI3MTU3OnYy", "diffSide": "RIGHT", "path": "core/src/test/java/org/apache/iceberg/TestMetrics.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QwMToxMDo1OVrOGa1XOw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxODowNzozNFrOGbXIFA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDc5MDQ1OQ==", "bodyText": "Sorry if I'm missing some context, but why is the uuidCol dropped?", "url": "https://github.com/apache/iceberg/pull/1070#discussion_r430790459", "createdAt": "2020-05-27T01:10:59Z", "author": {"login": "edgarRd"}, "path": "core/src/test/java/org/apache/iceberg/TestMetrics.java", "diffHunk": "@@ -95,59 +88,57 @@\n       optional(8, \"dateCol\", DateType.get()),\n       required(9, \"timeCol\", TimeType.get()),\n       required(10, \"timestampCol\", TimestampType.withoutZone()),\n-      optional(11, \"uuidCol\", UUIDType.get()),\n-      required(12, \"fixedCol\", FixedType.ofLength(4)),\n-      required(13, \"binaryCol\", BinaryType.get())\n+      required(11, \"fixedCol\", FixedType.ofLength(4)),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ee89bd324c4cbe68a6553188569dc1fd38880fa5"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTMwNjI4MA==", "bodyText": "UUID columns aren't currently supported in the Parquet writers for Iceberg generics. Rather than adding that support here, I thought it was better to remove it. We can add it back later, but I don't want to block ORC metrics on it.", "url": "https://github.com/apache/iceberg/pull/1070#discussion_r431306280", "createdAt": "2020-05-27T17:09:42Z", "author": {"login": "rdblue"}, "path": "core/src/test/java/org/apache/iceberg/TestMetrics.java", "diffHunk": "@@ -95,59 +88,57 @@\n       optional(8, \"dateCol\", DateType.get()),\n       required(9, \"timeCol\", TimeType.get()),\n       required(10, \"timestampCol\", TimestampType.withoutZone()),\n-      optional(11, \"uuidCol\", UUIDType.get()),\n-      required(12, \"fixedCol\", FixedType.ofLength(4)),\n-      required(13, \"binaryCol\", BinaryType.get())\n+      required(11, \"fixedCol\", FixedType.ofLength(4)),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDc5MDQ1OQ=="}, "originalCommit": {"oid": "ee89bd324c4cbe68a6553188569dc1fd38880fa5"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTM0MzYzNg==", "bodyText": "SGTM. Thanks for the context.", "url": "https://github.com/apache/iceberg/pull/1070#discussion_r431343636", "createdAt": "2020-05-27T18:07:34Z", "author": {"login": "edgarRd"}, "path": "core/src/test/java/org/apache/iceberg/TestMetrics.java", "diffHunk": "@@ -95,59 +88,57 @@\n       optional(8, \"dateCol\", DateType.get()),\n       required(9, \"timeCol\", TimeType.get()),\n       required(10, \"timestampCol\", TimestampType.withoutZone()),\n-      optional(11, \"uuidCol\", UUIDType.get()),\n-      required(12, \"fixedCol\", FixedType.ofLength(4)),\n-      required(13, \"binaryCol\", BinaryType.get())\n+      required(11, \"fixedCol\", FixedType.ofLength(4)),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDc5MDQ1OQ=="}, "originalCommit": {"oid": "ee89bd324c4cbe68a6553188569dc1fd38880fa5"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4MzI3Mjg0OnYy", "diffSide": "RIGHT", "path": "core/src/test/java/org/apache/iceberg/TestMetrics.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QwMToxMTo1MlrOGa1YHQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QyMDo1NjoyM1rOGbc06g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDc5MDY4NQ==", "bodyText": "is the test name misleading? Seems like we are testing for multiple records, not repeated values in maps and lists", "url": "https://github.com/apache/iceberg/pull/1070#discussion_r430790685", "createdAt": "2020-05-27T01:11:52Z", "author": {"login": "rdsr"}, "path": "core/src/test/java/org/apache/iceberg/TestMetrics.java", "diffHunk": "@@ -95,59 +88,57 @@\n       optional(8, \"dateCol\", DateType.get()),\n       required(9, \"timeCol\", TimeType.get()),\n       required(10, \"timestampCol\", TimestampType.withoutZone()),\n-      optional(11, \"uuidCol\", UUIDType.get()),\n-      required(12, \"fixedCol\", FixedType.ofLength(4)),\n-      required(13, \"binaryCol\", BinaryType.get())\n+      required(11, \"fixedCol\", FixedType.ofLength(4)),\n+      required(12, \"binaryCol\", BinaryType.get())\n   );\n \n-  private final UUID uuid = UUID.randomUUID();\n-  private final GenericFixed fixed = new GenericData.Fixed(\n-      org.apache.avro.Schema.createFixed(\"fixedCol\", null, null, 4),\n-      \"abcd\".getBytes(StandardCharsets.UTF_8));\n+  private final byte[] fixed = \"abcd\".getBytes(StandardCharsets.UTF_8);\n \n   public abstract Metrics getMetrics(InputFile file);\n \n-  public abstract File writeRecords(Schema schema, Record... records) throws IOException;\n+  public abstract InputFile writeRecords(Schema schema, Record... records) throws IOException;\n \n-  public abstract File writeRecords(Schema schema, Map<String, String> properties, GenericData.Record... records)\n+  public abstract InputFile writeRecordsWithSmallRowGroups(Schema schema, Record... records)\n       throws IOException;\n \n-  public abstract int splitCount(File parquetFile) throws IOException;\n+  public abstract int splitCount(InputFile parquetFile) throws IOException;\n+\n+  public boolean supportsSmallRowGroups() {\n+    return false;\n+  }\n \n   @Test\n   public void testMetricsForRepeatedValues() throws IOException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ee89bd324c4cbe68a6553188569dc1fd38880fa5"}, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTMwNTE2OA==", "bodyText": "I think it sounds like we were testing repeated values in maps and lists.", "url": "https://github.com/apache/iceberg/pull/1070#discussion_r431305168", "createdAt": "2020-05-27T17:07:49Z", "author": {"login": "rdblue"}, "path": "core/src/test/java/org/apache/iceberg/TestMetrics.java", "diffHunk": "@@ -95,59 +88,57 @@\n       optional(8, \"dateCol\", DateType.get()),\n       required(9, \"timeCol\", TimeType.get()),\n       required(10, \"timestampCol\", TimestampType.withoutZone()),\n-      optional(11, \"uuidCol\", UUIDType.get()),\n-      required(12, \"fixedCol\", FixedType.ofLength(4)),\n-      required(13, \"binaryCol\", BinaryType.get())\n+      required(11, \"fixedCol\", FixedType.ofLength(4)),\n+      required(12, \"binaryCol\", BinaryType.get())\n   );\n \n-  private final UUID uuid = UUID.randomUUID();\n-  private final GenericFixed fixed = new GenericData.Fixed(\n-      org.apache.avro.Schema.createFixed(\"fixedCol\", null, null, 4),\n-      \"abcd\".getBytes(StandardCharsets.UTF_8));\n+  private final byte[] fixed = \"abcd\".getBytes(StandardCharsets.UTF_8);\n \n   public abstract Metrics getMetrics(InputFile file);\n \n-  public abstract File writeRecords(Schema schema, Record... records) throws IOException;\n+  public abstract InputFile writeRecords(Schema schema, Record... records) throws IOException;\n \n-  public abstract File writeRecords(Schema schema, Map<String, String> properties, GenericData.Record... records)\n+  public abstract InputFile writeRecordsWithSmallRowGroups(Schema schema, Record... records)\n       throws IOException;\n \n-  public abstract int splitCount(File parquetFile) throws IOException;\n+  public abstract int splitCount(InputFile parquetFile) throws IOException;\n+\n+  public boolean supportsSmallRowGroups() {\n+    return false;\n+  }\n \n   @Test\n   public void testMetricsForRepeatedValues() throws IOException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDc5MDY4NQ=="}, "originalCommit": {"oid": "ee89bd324c4cbe68a6553188569dc1fd38880fa5"}, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTQzNzAzNA==", "bodyText": "Since this is an existing test name, I'd rather not update it in this PR. We can open a separate one to fix it if you think it is necessary.", "url": "https://github.com/apache/iceberg/pull/1070#discussion_r431437034", "createdAt": "2020-05-27T20:56:23Z", "author": {"login": "rdblue"}, "path": "core/src/test/java/org/apache/iceberg/TestMetrics.java", "diffHunk": "@@ -95,59 +88,57 @@\n       optional(8, \"dateCol\", DateType.get()),\n       required(9, \"timeCol\", TimeType.get()),\n       required(10, \"timestampCol\", TimestampType.withoutZone()),\n-      optional(11, \"uuidCol\", UUIDType.get()),\n-      required(12, \"fixedCol\", FixedType.ofLength(4)),\n-      required(13, \"binaryCol\", BinaryType.get())\n+      required(11, \"fixedCol\", FixedType.ofLength(4)),\n+      required(12, \"binaryCol\", BinaryType.get())\n   );\n \n-  private final UUID uuid = UUID.randomUUID();\n-  private final GenericFixed fixed = new GenericData.Fixed(\n-      org.apache.avro.Schema.createFixed(\"fixedCol\", null, null, 4),\n-      \"abcd\".getBytes(StandardCharsets.UTF_8));\n+  private final byte[] fixed = \"abcd\".getBytes(StandardCharsets.UTF_8);\n \n   public abstract Metrics getMetrics(InputFile file);\n \n-  public abstract File writeRecords(Schema schema, Record... records) throws IOException;\n+  public abstract InputFile writeRecords(Schema schema, Record... records) throws IOException;\n \n-  public abstract File writeRecords(Schema schema, Map<String, String> properties, GenericData.Record... records)\n+  public abstract InputFile writeRecordsWithSmallRowGroups(Schema schema, Record... records)\n       throws IOException;\n \n-  public abstract int splitCount(File parquetFile) throws IOException;\n+  public abstract int splitCount(InputFile parquetFile) throws IOException;\n+\n+  public boolean supportsSmallRowGroups() {\n+    return false;\n+  }\n \n   @Test\n   public void testMetricsForRepeatedValues() throws IOException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDc5MDY4NQ=="}, "originalCommit": {"oid": "ee89bd324c4cbe68a6553188569dc1fd38880fa5"}, "originalPosition": 81}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4MzI4Nzg1OnYy", "diffSide": "RIGHT", "path": "data/src/test/java/org/apache/iceberg/parquet/TestParquetMetrics.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QwMToxNjowNVrOGa1iaA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QwMToxNjowNVrOGa1iaA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDc5MzMyMA==", "bodyText": "nit: seems like comment is not adding anything more", "url": "https://github.com/apache/iceberg/pull/1070#discussion_r430793320", "createdAt": "2020-05-27T01:16:05Z", "author": {"login": "rdsr"}, "path": "data/src/test/java/org/apache/iceberg/parquet/TestParquetMetrics.java", "diffHunk": "@@ -0,0 +1,93 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.parquet;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.Map;\n+import java.util.UUID;\n+import org.apache.iceberg.FileFormat;\n+import org.apache.iceberg.Files;\n+import org.apache.iceberg.Metrics;\n+import org.apache.iceberg.Schema;\n+import org.apache.iceberg.TableProperties;\n+import org.apache.iceberg.TestMetrics;\n+import org.apache.iceberg.data.Record;\n+import org.apache.iceberg.data.parquet.GenericParquetWriter;\n+import org.apache.iceberg.io.FileAppender;\n+import org.apache.iceberg.io.InputFile;\n+import org.apache.iceberg.io.OutputFile;\n+import org.apache.iceberg.relocated.com.google.common.collect.ImmutableMap;\n+import org.apache.iceberg.relocated.com.google.common.collect.Lists;\n+import org.apache.parquet.hadoop.ParquetFileReader;\n+import org.junit.Rule;\n+import org.junit.rules.TemporaryFolder;\n+\n+/**", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ee89bd324c4cbe68a6553188569dc1fd38880fa5"}, "originalPosition": 43}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3856, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}