{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTMyNTM4OTQ4", "number": 1875, "reviewThreads": {"totalCount": 24, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQyMDo0ODo1NVrOFEMCHw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQyMzowMjowNFrOFIU8cQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5OTM1Nzc1OnYy", "diffSide": "RIGHT", "path": "spark2/src/main/java/org/apache/iceberg/spark/source/CustomCatalogs.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQyMDo0ODo1NVrOIEMukg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxODozOToxNlrOIKFLuQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTI3Mzc0Ng==", "bodyText": "New paragraphs in Javadoc require <p>.", "url": "https://github.com/apache/iceberg/pull/1875#discussion_r541273746", "createdAt": "2020-12-11T20:48:55Z", "author": {"login": "rdblue"}, "path": "spark2/src/main/java/org/apache/iceberg/spark/source/CustomCatalogs.java", "diffHunk": "@@ -0,0 +1,98 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.spark.source;\n+\n+import com.github.benmanes.caffeine.cache.Cache;\n+import com.github.benmanes.caffeine.cache.Caffeine;\n+import java.util.Arrays;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+import org.apache.hadoop.conf.Configuration;\n+import org.apache.hadoop.hive.conf.HiveConf;\n+import org.apache.iceberg.CatalogProperties;\n+import org.apache.iceberg.CatalogUtil;\n+import org.apache.iceberg.catalog.Catalog;\n+import org.apache.iceberg.hadoop.HadoopCatalog;\n+import org.apache.iceberg.hive.HiveCatalogs;\n+import org.apache.iceberg.relocated.com.google.common.annotations.VisibleForTesting;\n+import org.apache.spark.SparkConf;\n+import org.apache.spark.sql.SparkSession;\n+\n+public final class CustomCatalogs {\n+  private static final Cache<String, Catalog> CATALOG_CACHE = Caffeine.newBuilder().softValues().build();\n+\n+  public static final String ICEBERG_CATALOG_PREFIX = \"spark.sql.catalog.iceberg.\";\n+  public static final String ICEBERG_CATALOG_TYPE = \"type\";\n+  public static final String ICEBERG_CATALOG_TYPE_HADOOP = \"hadoop\";\n+  public static final String ICEBERG_CATALOG_TYPE_HIVE = \"hive\";\n+\n+  private CustomCatalogs() {\n+  }\n+\n+  /**\n+   * Build an Iceberg {@link Catalog} to be used by this Spark source adapter.\n+   *", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6009447f49c5cbb3a389529f68f30db587bee75b"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjQ3NzQ5NQ==", "bodyText": "\ud83d\udc4d", "url": "https://github.com/apache/iceberg/pull/1875#discussion_r542477495", "createdAt": "2020-12-14T15:32:50Z", "author": {"login": "rymurr"}, "path": "spark2/src/main/java/org/apache/iceberg/spark/source/CustomCatalogs.java", "diffHunk": "@@ -0,0 +1,98 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.spark.source;\n+\n+import com.github.benmanes.caffeine.cache.Cache;\n+import com.github.benmanes.caffeine.cache.Caffeine;\n+import java.util.Arrays;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+import org.apache.hadoop.conf.Configuration;\n+import org.apache.hadoop.hive.conf.HiveConf;\n+import org.apache.iceberg.CatalogProperties;\n+import org.apache.iceberg.CatalogUtil;\n+import org.apache.iceberg.catalog.Catalog;\n+import org.apache.iceberg.hadoop.HadoopCatalog;\n+import org.apache.iceberg.hive.HiveCatalogs;\n+import org.apache.iceberg.relocated.com.google.common.annotations.VisibleForTesting;\n+import org.apache.spark.SparkConf;\n+import org.apache.spark.sql.SparkSession;\n+\n+public final class CustomCatalogs {\n+  private static final Cache<String, Catalog> CATALOG_CACHE = Caffeine.newBuilder().softValues().build();\n+\n+  public static final String ICEBERG_CATALOG_PREFIX = \"spark.sql.catalog.iceberg.\";\n+  public static final String ICEBERG_CATALOG_TYPE = \"type\";\n+  public static final String ICEBERG_CATALOG_TYPE_HADOOP = \"hadoop\";\n+  public static final String ICEBERG_CATALOG_TYPE_HIVE = \"hive\";\n+\n+  private CustomCatalogs() {\n+  }\n+\n+  /**\n+   * Build an Iceberg {@link Catalog} to be used by this Spark source adapter.\n+   *", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTI3Mzc0Ng=="}, "originalCommit": {"oid": "6009447f49c5cbb3a389529f68f30db587bee75b"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzQ0MTU5Mw==", "bodyText": "The usual style is to use only <p> on the newline between paragraphs.", "url": "https://github.com/apache/iceberg/pull/1875#discussion_r547441593", "createdAt": "2020-12-22T18:39:16Z", "author": {"login": "rdblue"}, "path": "spark2/src/main/java/org/apache/iceberg/spark/source/CustomCatalogs.java", "diffHunk": "@@ -0,0 +1,98 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.spark.source;\n+\n+import com.github.benmanes.caffeine.cache.Cache;\n+import com.github.benmanes.caffeine.cache.Caffeine;\n+import java.util.Arrays;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+import org.apache.hadoop.conf.Configuration;\n+import org.apache.hadoop.hive.conf.HiveConf;\n+import org.apache.iceberg.CatalogProperties;\n+import org.apache.iceberg.CatalogUtil;\n+import org.apache.iceberg.catalog.Catalog;\n+import org.apache.iceberg.hadoop.HadoopCatalog;\n+import org.apache.iceberg.hive.HiveCatalogs;\n+import org.apache.iceberg.relocated.com.google.common.annotations.VisibleForTesting;\n+import org.apache.spark.SparkConf;\n+import org.apache.spark.sql.SparkSession;\n+\n+public final class CustomCatalogs {\n+  private static final Cache<String, Catalog> CATALOG_CACHE = Caffeine.newBuilder().softValues().build();\n+\n+  public static final String ICEBERG_CATALOG_PREFIX = \"spark.sql.catalog.iceberg.\";\n+  public static final String ICEBERG_CATALOG_TYPE = \"type\";\n+  public static final String ICEBERG_CATALOG_TYPE_HADOOP = \"hadoop\";\n+  public static final String ICEBERG_CATALOG_TYPE_HIVE = \"hive\";\n+\n+  private CustomCatalogs() {\n+  }\n+\n+  /**\n+   * Build an Iceberg {@link Catalog} to be used by this Spark source adapter.\n+   *", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTI3Mzc0Ng=="}, "originalCommit": {"oid": "6009447f49c5cbb3a389529f68f30db587bee75b"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5OTM3MjAyOnYy", "diffSide": "RIGHT", "path": "spark2/src/main/java/org/apache/iceberg/spark/source/CustomCatalogs.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQyMDo1MToyMFrOIEM3aw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxNTozMjowM1rOIFWKNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTI3NjAxMQ==", "bodyText": "It looks like the options here are the read options. I don't think that it is necessary to pass any of the read options to create a catalog. In Spark 3, the catalogs exist and are configured using Spark config and the read options are independent.", "url": "https://github.com/apache/iceberg/pull/1875#discussion_r541276011", "createdAt": "2020-12-11T20:51:20Z", "author": {"login": "rdblue"}, "path": "spark2/src/main/java/org/apache/iceberg/spark/source/CustomCatalogs.java", "diffHunk": "@@ -0,0 +1,98 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.spark.source;\n+\n+import com.github.benmanes.caffeine.cache.Cache;\n+import com.github.benmanes.caffeine.cache.Caffeine;\n+import java.util.Arrays;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+import org.apache.hadoop.conf.Configuration;\n+import org.apache.hadoop.hive.conf.HiveConf;\n+import org.apache.iceberg.CatalogProperties;\n+import org.apache.iceberg.CatalogUtil;\n+import org.apache.iceberg.catalog.Catalog;\n+import org.apache.iceberg.hadoop.HadoopCatalog;\n+import org.apache.iceberg.hive.HiveCatalogs;\n+import org.apache.iceberg.relocated.com.google.common.annotations.VisibleForTesting;\n+import org.apache.spark.SparkConf;\n+import org.apache.spark.sql.SparkSession;\n+\n+public final class CustomCatalogs {\n+  private static final Cache<String, Catalog> CATALOG_CACHE = Caffeine.newBuilder().softValues().build();\n+\n+  public static final String ICEBERG_CATALOG_PREFIX = \"spark.sql.catalog.iceberg.\";\n+  public static final String ICEBERG_CATALOG_TYPE = \"type\";\n+  public static final String ICEBERG_CATALOG_TYPE_HADOOP = \"hadoop\";\n+  public static final String ICEBERG_CATALOG_TYPE_HIVE = \"hive\";\n+\n+  private CustomCatalogs() {\n+  }\n+\n+  /**\n+   * Build an Iceberg {@link Catalog} to be used by this Spark source adapter.\n+   *\n+   * The cache is to facilitate reuse of catalogs, especially if wrapped in CachingCatalog. For non-Hive catalogs all\n+   * custom parameters passed to the catalog are considered in the cache key. Hive catalogs only cache based on\n+   * the Metastore URIs as per previous behaviour.\n+   *\n+   * @param options options from Spark\n+   * @return an Iceberg catalog\n+   */\n+  public static Catalog buildIcebergCatalog(Map<String, String> options) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6009447f49c5cbb3a389529f68f30db587bee75b"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjQ3Njg1NQ==", "bodyText": "ok, I had originally aimed to support setting catalog options via SparkConf or via read options. But I guess there isn't much of a reason to support the 2nd use case. Have removed this feature.", "url": "https://github.com/apache/iceberg/pull/1875#discussion_r542476855", "createdAt": "2020-12-14T15:32:03Z", "author": {"login": "rymurr"}, "path": "spark2/src/main/java/org/apache/iceberg/spark/source/CustomCatalogs.java", "diffHunk": "@@ -0,0 +1,98 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.spark.source;\n+\n+import com.github.benmanes.caffeine.cache.Cache;\n+import com.github.benmanes.caffeine.cache.Caffeine;\n+import java.util.Arrays;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+import org.apache.hadoop.conf.Configuration;\n+import org.apache.hadoop.hive.conf.HiveConf;\n+import org.apache.iceberg.CatalogProperties;\n+import org.apache.iceberg.CatalogUtil;\n+import org.apache.iceberg.catalog.Catalog;\n+import org.apache.iceberg.hadoop.HadoopCatalog;\n+import org.apache.iceberg.hive.HiveCatalogs;\n+import org.apache.iceberg.relocated.com.google.common.annotations.VisibleForTesting;\n+import org.apache.spark.SparkConf;\n+import org.apache.spark.sql.SparkSession;\n+\n+public final class CustomCatalogs {\n+  private static final Cache<String, Catalog> CATALOG_CACHE = Caffeine.newBuilder().softValues().build();\n+\n+  public static final String ICEBERG_CATALOG_PREFIX = \"spark.sql.catalog.iceberg.\";\n+  public static final String ICEBERG_CATALOG_TYPE = \"type\";\n+  public static final String ICEBERG_CATALOG_TYPE_HADOOP = \"hadoop\";\n+  public static final String ICEBERG_CATALOG_TYPE_HIVE = \"hive\";\n+\n+  private CustomCatalogs() {\n+  }\n+\n+  /**\n+   * Build an Iceberg {@link Catalog} to be used by this Spark source adapter.\n+   *\n+   * The cache is to facilitate reuse of catalogs, especially if wrapped in CachingCatalog. For non-Hive catalogs all\n+   * custom parameters passed to the catalog are considered in the cache key. Hive catalogs only cache based on\n+   * the Metastore URIs as per previous behaviour.\n+   *\n+   * @param options options from Spark\n+   * @return an Iceberg catalog\n+   */\n+  public static Catalog buildIcebergCatalog(Map<String, String> options) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTI3NjAxMQ=="}, "originalCommit": {"oid": "6009447f49c5cbb3a389529f68f30db587bee75b"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5OTM4NjAzOnYy", "diffSide": "RIGHT", "path": "spark2/src/main/java/org/apache/iceberg/spark/source/CustomCatalogs.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQyMDo1Mzo1NFrOIENAmw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxNjo1ODozMFrOIGVxFw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTI3ODM2Mw==", "bodyText": "I would expect the cache to delegate to buildIcebergCatalog, no the other way around. What about using a simple getter:\npublic static Catalog loadCatalog(SparkSession spark, String name) {\n  return CATALOG_CACHE.get(Pair.of(spark, name));\n}\nThen this just needs to build the named catalog for a particular Spark session. And that could be done by moving the existing SparkCatalog.buildIcebergCatalog into CatalogUtil and calling it with the right name and config from the session.", "url": "https://github.com/apache/iceberg/pull/1875#discussion_r541278363", "createdAt": "2020-12-11T20:53:54Z", "author": {"login": "rdblue"}, "path": "spark2/src/main/java/org/apache/iceberg/spark/source/CustomCatalogs.java", "diffHunk": "@@ -0,0 +1,98 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.spark.source;\n+\n+import com.github.benmanes.caffeine.cache.Cache;\n+import com.github.benmanes.caffeine.cache.Caffeine;\n+import java.util.Arrays;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+import org.apache.hadoop.conf.Configuration;\n+import org.apache.hadoop.hive.conf.HiveConf;\n+import org.apache.iceberg.CatalogProperties;\n+import org.apache.iceberg.CatalogUtil;\n+import org.apache.iceberg.catalog.Catalog;\n+import org.apache.iceberg.hadoop.HadoopCatalog;\n+import org.apache.iceberg.hive.HiveCatalogs;\n+import org.apache.iceberg.relocated.com.google.common.annotations.VisibleForTesting;\n+import org.apache.spark.SparkConf;\n+import org.apache.spark.sql.SparkSession;\n+\n+public final class CustomCatalogs {\n+  private static final Cache<String, Catalog> CATALOG_CACHE = Caffeine.newBuilder().softValues().build();\n+\n+  public static final String ICEBERG_CATALOG_PREFIX = \"spark.sql.catalog.iceberg.\";\n+  public static final String ICEBERG_CATALOG_TYPE = \"type\";\n+  public static final String ICEBERG_CATALOG_TYPE_HADOOP = \"hadoop\";\n+  public static final String ICEBERG_CATALOG_TYPE_HIVE = \"hive\";\n+\n+  private CustomCatalogs() {\n+  }\n+\n+  /**\n+   * Build an Iceberg {@link Catalog} to be used by this Spark source adapter.\n+   *\n+   * The cache is to facilitate reuse of catalogs, especially if wrapped in CachingCatalog. For non-Hive catalogs all\n+   * custom parameters passed to the catalog are considered in the cache key. Hive catalogs only cache based on\n+   * the Metastore URIs as per previous behaviour.\n+   *\n+   * @param options options from Spark\n+   * @return an Iceberg catalog\n+   */\n+  public static Catalog buildIcebergCatalog(Map<String, String> options) {\n+    String name = \"spark_source\";\n+    SparkConf sparkConf = SparkSession.active().sparkContext().getConf();\n+    Map<String, String> sparkMap = Arrays.stream(sparkConf.getAllWithPrefix(ICEBERG_CATALOG_PREFIX))\n+        .collect(Collectors.toMap(x -> x._1, x -> x._2));\n+    sparkMap.putAll(options);\n+    Configuration conf = SparkSession.active().sessionState().newHadoopConf();\n+\n+    String catalogImpl = sparkMap.get(CatalogProperties.CATALOG_IMPL);\n+    if (catalogImpl != null) {\n+      String cacheKey = options.entrySet()\n+          .stream().map(x -> String.format(\"%s:%s\", x.getKey(), x.getValue())).collect(Collectors.joining(\";\"));\n+      return CATALOG_CACHE.get(cacheKey, x -> CatalogUtil.loadCatalog(catalogImpl, name, sparkMap, conf));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6009447f49c5cbb3a389529f68f30db587bee75b"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjQ3NzQyNg==", "bodyText": "I was thinking on similar lines at first also. The main reason i didn't is the HiveCatalog isn't in iceberg-core and we would get a circular dep between core and hive-metastore. We can change HiveCatalog to instantiate it similar to the custom catalogs and create it via reflection? or move the buildIcebergCatalog method higher up (eg spark module)", "url": "https://github.com/apache/iceberg/pull/1875#discussion_r542477426", "createdAt": "2020-12-14T15:32:44Z", "author": {"login": "rymurr"}, "path": "spark2/src/main/java/org/apache/iceberg/spark/source/CustomCatalogs.java", "diffHunk": "@@ -0,0 +1,98 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.spark.source;\n+\n+import com.github.benmanes.caffeine.cache.Cache;\n+import com.github.benmanes.caffeine.cache.Caffeine;\n+import java.util.Arrays;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+import org.apache.hadoop.conf.Configuration;\n+import org.apache.hadoop.hive.conf.HiveConf;\n+import org.apache.iceberg.CatalogProperties;\n+import org.apache.iceberg.CatalogUtil;\n+import org.apache.iceberg.catalog.Catalog;\n+import org.apache.iceberg.hadoop.HadoopCatalog;\n+import org.apache.iceberg.hive.HiveCatalogs;\n+import org.apache.iceberg.relocated.com.google.common.annotations.VisibleForTesting;\n+import org.apache.spark.SparkConf;\n+import org.apache.spark.sql.SparkSession;\n+\n+public final class CustomCatalogs {\n+  private static final Cache<String, Catalog> CATALOG_CACHE = Caffeine.newBuilder().softValues().build();\n+\n+  public static final String ICEBERG_CATALOG_PREFIX = \"spark.sql.catalog.iceberg.\";\n+  public static final String ICEBERG_CATALOG_TYPE = \"type\";\n+  public static final String ICEBERG_CATALOG_TYPE_HADOOP = \"hadoop\";\n+  public static final String ICEBERG_CATALOG_TYPE_HIVE = \"hive\";\n+\n+  private CustomCatalogs() {\n+  }\n+\n+  /**\n+   * Build an Iceberg {@link Catalog} to be used by this Spark source adapter.\n+   *\n+   * The cache is to facilitate reuse of catalogs, especially if wrapped in CachingCatalog. For non-Hive catalogs all\n+   * custom parameters passed to the catalog are considered in the cache key. Hive catalogs only cache based on\n+   * the Metastore URIs as per previous behaviour.\n+   *\n+   * @param options options from Spark\n+   * @return an Iceberg catalog\n+   */\n+  public static Catalog buildIcebergCatalog(Map<String, String> options) {\n+    String name = \"spark_source\";\n+    SparkConf sparkConf = SparkSession.active().sparkContext().getConf();\n+    Map<String, String> sparkMap = Arrays.stream(sparkConf.getAllWithPrefix(ICEBERG_CATALOG_PREFIX))\n+        .collect(Collectors.toMap(x -> x._1, x -> x._2));\n+    sparkMap.putAll(options);\n+    Configuration conf = SparkSession.active().sessionState().newHadoopConf();\n+\n+    String catalogImpl = sparkMap.get(CatalogProperties.CATALOG_IMPL);\n+    if (catalogImpl != null) {\n+      String cacheKey = options.entrySet()\n+          .stream().map(x -> String.format(\"%s:%s\", x.getKey(), x.getValue())).collect(Collectors.joining(\";\"));\n+      return CATALOG_CACHE.get(cacheKey, x -> CatalogUtil.loadCatalog(catalogImpl, name, sparkMap, conf));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTI3ODM2Mw=="}, "originalCommit": {"oid": "6009447f49c5cbb3a389529f68f30db587bee75b"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzUxODk5OQ==", "bodyText": "+1 for decoupling and using reflection for HiveCatalog. I think that's the right solution.", "url": "https://github.com/apache/iceberg/pull/1875#discussion_r543518999", "createdAt": "2020-12-15T16:58:30Z", "author": {"login": "rdblue"}, "path": "spark2/src/main/java/org/apache/iceberg/spark/source/CustomCatalogs.java", "diffHunk": "@@ -0,0 +1,98 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.spark.source;\n+\n+import com.github.benmanes.caffeine.cache.Cache;\n+import com.github.benmanes.caffeine.cache.Caffeine;\n+import java.util.Arrays;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+import org.apache.hadoop.conf.Configuration;\n+import org.apache.hadoop.hive.conf.HiveConf;\n+import org.apache.iceberg.CatalogProperties;\n+import org.apache.iceberg.CatalogUtil;\n+import org.apache.iceberg.catalog.Catalog;\n+import org.apache.iceberg.hadoop.HadoopCatalog;\n+import org.apache.iceberg.hive.HiveCatalogs;\n+import org.apache.iceberg.relocated.com.google.common.annotations.VisibleForTesting;\n+import org.apache.spark.SparkConf;\n+import org.apache.spark.sql.SparkSession;\n+\n+public final class CustomCatalogs {\n+  private static final Cache<String, Catalog> CATALOG_CACHE = Caffeine.newBuilder().softValues().build();\n+\n+  public static final String ICEBERG_CATALOG_PREFIX = \"spark.sql.catalog.iceberg.\";\n+  public static final String ICEBERG_CATALOG_TYPE = \"type\";\n+  public static final String ICEBERG_CATALOG_TYPE_HADOOP = \"hadoop\";\n+  public static final String ICEBERG_CATALOG_TYPE_HIVE = \"hive\";\n+\n+  private CustomCatalogs() {\n+  }\n+\n+  /**\n+   * Build an Iceberg {@link Catalog} to be used by this Spark source adapter.\n+   *\n+   * The cache is to facilitate reuse of catalogs, especially if wrapped in CachingCatalog. For non-Hive catalogs all\n+   * custom parameters passed to the catalog are considered in the cache key. Hive catalogs only cache based on\n+   * the Metastore URIs as per previous behaviour.\n+   *\n+   * @param options options from Spark\n+   * @return an Iceberg catalog\n+   */\n+  public static Catalog buildIcebergCatalog(Map<String, String> options) {\n+    String name = \"spark_source\";\n+    SparkConf sparkConf = SparkSession.active().sparkContext().getConf();\n+    Map<String, String> sparkMap = Arrays.stream(sparkConf.getAllWithPrefix(ICEBERG_CATALOG_PREFIX))\n+        .collect(Collectors.toMap(x -> x._1, x -> x._2));\n+    sparkMap.putAll(options);\n+    Configuration conf = SparkSession.active().sessionState().newHadoopConf();\n+\n+    String catalogImpl = sparkMap.get(CatalogProperties.CATALOG_IMPL);\n+    if (catalogImpl != null) {\n+      String cacheKey = options.entrySet()\n+          .stream().map(x -> String.format(\"%s:%s\", x.getKey(), x.getValue())).collect(Collectors.joining(\";\"));\n+      return CATALOG_CACHE.get(cacheKey, x -> CatalogUtil.loadCatalog(catalogImpl, name, sparkMap, conf));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTI3ODM2Mw=="}, "originalCommit": {"oid": "6009447f49c5cbb3a389529f68f30db587bee75b"}, "originalPosition": 72}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxNTIyMTMxOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/apache/iceberg/CatalogUtil.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxNjo1OTo1M1rOIGV1UA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQyMDozOToxNVrOIGe_mQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzUyMDA4MA==", "bodyText": "This works, but I think it would be better to make it so that the Hive catalog can be loaded using the normal no-arg constructor followed by initialize and setConf.", "url": "https://github.com/apache/iceberg/pull/1875#discussion_r543520080", "createdAt": "2020-12-15T16:59:53Z", "author": {"login": "rdblue"}, "path": "core/src/main/java/org/apache/iceberg/CatalogUtil.java", "diffHunk": "@@ -169,6 +174,40 @@ public static Catalog loadCatalog(\n     return catalog;\n   }\n \n+  public static Catalog buildIcebergCatalog(String name, Map<String, String> options, Configuration conf) {\n+\n+    String catalogImpl = options.get(CatalogProperties.CATALOG_IMPL);\n+    if (catalogImpl != null) {\n+      return CatalogUtil.loadCatalog(catalogImpl, name, options, conf);\n+    }\n+\n+    String catalogType = options.getOrDefault(ICEBERG_CATALOG_TYPE, ICEBERG_CATALOG_TYPE_HIVE);\n+    switch (catalogType.toLowerCase(Locale.ENGLISH)) {\n+      case ICEBERG_CATALOG_TYPE_HIVE:\n+        String clientPoolSize = options.getOrDefault(CatalogProperties.HIVE_CLIENT_POOL_SIZE,\n+            Integer.toString(CatalogProperties.HIVE_CLIENT_POOL_SIZE_DEFAULT));\n+        String uri = options.get(CatalogProperties.HIVE_URI);\n+        return buildHiveCatalog(name, uri, Integer.parseInt(clientPoolSize), conf);\n+      case ICEBERG_CATALOG_TYPE_HADOOP:\n+        String warehouseLocation = options.get(CatalogProperties.WAREHOUSE_LOCATION);\n+        return new HadoopCatalog(name, conf, warehouseLocation, options);\n+\n+      default:\n+        throw new UnsupportedOperationException(\"Unknown catalog type: \" + catalogType);\n+    }\n+  }\n+\n+  private static Catalog buildHiveCatalog(String name, String uri, int clientPoolSize, Configuration conf) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8a267310cb01236ce0335c4c82d8d22add1f3335"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzY3MDE2OQ==", "bodyText": "cool. I have switched both Hive and Hadoop catalogs to use this pattern. I left the old constructors and marked Deprecated.", "url": "https://github.com/apache/iceberg/pull/1875#discussion_r543670169", "createdAt": "2020-12-15T20:39:15Z", "author": {"login": "rymurr"}, "path": "core/src/main/java/org/apache/iceberg/CatalogUtil.java", "diffHunk": "@@ -169,6 +174,40 @@ public static Catalog loadCatalog(\n     return catalog;\n   }\n \n+  public static Catalog buildIcebergCatalog(String name, Map<String, String> options, Configuration conf) {\n+\n+    String catalogImpl = options.get(CatalogProperties.CATALOG_IMPL);\n+    if (catalogImpl != null) {\n+      return CatalogUtil.loadCatalog(catalogImpl, name, options, conf);\n+    }\n+\n+    String catalogType = options.getOrDefault(ICEBERG_CATALOG_TYPE, ICEBERG_CATALOG_TYPE_HIVE);\n+    switch (catalogType.toLowerCase(Locale.ENGLISH)) {\n+      case ICEBERG_CATALOG_TYPE_HIVE:\n+        String clientPoolSize = options.getOrDefault(CatalogProperties.HIVE_CLIENT_POOL_SIZE,\n+            Integer.toString(CatalogProperties.HIVE_CLIENT_POOL_SIZE_DEFAULT));\n+        String uri = options.get(CatalogProperties.HIVE_URI);\n+        return buildHiveCatalog(name, uri, Integer.parseInt(clientPoolSize), conf);\n+      case ICEBERG_CATALOG_TYPE_HADOOP:\n+        String warehouseLocation = options.get(CatalogProperties.WAREHOUSE_LOCATION);\n+        return new HadoopCatalog(name, conf, warehouseLocation, options);\n+\n+      default:\n+        throw new UnsupportedOperationException(\"Unknown catalog type: \" + catalogType);\n+    }\n+  }\n+\n+  private static Catalog buildHiveCatalog(String name, String uri, int clientPoolSize, Configuration conf) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzUyMDA4MA=="}, "originalCommit": {"oid": "8a267310cb01236ce0335c4c82d8d22add1f3335"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxNTIyNjYzOnYy", "diffSide": "RIGHT", "path": "spark/src/main/java/org/apache/iceberg/spark/SparkUtil.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxNzowMDo0OFrOIGV4RA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQyMDozOToyM1rOIGe_7A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzUyMDgzNg==", "bodyText": "Nit: indentation.", "url": "https://github.com/apache/iceberg/pull/1875#discussion_r543520836", "createdAt": "2020-12-15T17:00:48Z", "author": {"login": "rdblue"}, "path": "spark/src/main/java/org/apache/iceberg/spark/SparkUtil.java", "diffHunk": "@@ -61,4 +65,40 @@ public static void validatePartitionTransforms(PartitionSpec spec) {\n           String.format(\"Cannot write using unsupported transforms: %s\", unsupported));\n     }\n   }\n+\n+  /**\n+   * A modified version of Spark's LookupCatalog.CatalogAndIdentifier.unapply\n+   * Attempts to find the catalog and identifier a multipart identifier represents\n+   * @param nameParts Multipart identifier representing a table\n+   * @return The CatalogPlugin and Identifier for the table\n+   */\n+  public static <C, T> Pair<C,T> catalogAndIdentifier(List<String> nameParts,\n+                                                       Function<String, C> catalog,\n+                                                       IdentiferFunction<T> identifer,\n+                                                       String[] currentNamespace) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8a267310cb01236ce0335c4c82d8d22add1f3335"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzY3MDI1Mg==", "bodyText": "fixed", "url": "https://github.com/apache/iceberg/pull/1875#discussion_r543670252", "createdAt": "2020-12-15T20:39:23Z", "author": {"login": "rymurr"}, "path": "spark/src/main/java/org/apache/iceberg/spark/SparkUtil.java", "diffHunk": "@@ -61,4 +65,40 @@ public static void validatePartitionTransforms(PartitionSpec spec) {\n           String.format(\"Cannot write using unsupported transforms: %s\", unsupported));\n     }\n   }\n+\n+  /**\n+   * A modified version of Spark's LookupCatalog.CatalogAndIdentifier.unapply\n+   * Attempts to find the catalog and identifier a multipart identifier represents\n+   * @param nameParts Multipart identifier representing a table\n+   * @return The CatalogPlugin and Identifier for the table\n+   */\n+  public static <C, T> Pair<C,T> catalogAndIdentifier(List<String> nameParts,\n+                                                       Function<String, C> catalog,\n+                                                       IdentiferFunction<T> identifer,\n+                                                       String[] currentNamespace) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzUyMDgzNg=="}, "originalCommit": {"oid": "8a267310cb01236ce0335c4c82d8d22add1f3335"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxNTI2NjgyOnYy", "diffSide": "RIGHT", "path": "spark2/src/main/java/org/apache/iceberg/spark/source/CustomCatalogs.java", "isResolved": true, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxNzowODo0NFrOIGWQSw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQyMjo1MTo1NVrOIKLf3Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzUyNjk4Nw==", "bodyText": "This seems like a concern for CatalogUtil.buildIcebergCatalog, not here. This should create the map and pass it on to allow that method to reject the options. That way, the user gets a more specific error, like \"Missing catalog implementation class or type\". That can also create a default catalog if we choose to later -- though I'm skeptical we would -- without needing to change all of the callers.", "url": "https://github.com/apache/iceberg/pull/1875#discussion_r543526987", "createdAt": "2020-12-15T17:08:44Z", "author": {"login": "rdblue"}, "path": "spark2/src/main/java/org/apache/iceberg/spark/source/CustomCatalogs.java", "diffHunk": "@@ -0,0 +1,102 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.spark.source;\n+\n+import com.github.benmanes.caffeine.cache.Cache;\n+import com.github.benmanes.caffeine.cache.Caffeine;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+import org.apache.hadoop.conf.Configuration;\n+import org.apache.iceberg.CatalogUtil;\n+import org.apache.iceberg.Table;\n+import org.apache.iceberg.catalog.Catalog;\n+import org.apache.iceberg.catalog.Namespace;\n+import org.apache.iceberg.catalog.TableIdentifier;\n+import org.apache.iceberg.relocated.com.google.common.annotations.VisibleForTesting;\n+import org.apache.iceberg.relocated.com.google.common.base.Splitter;\n+import org.apache.iceberg.spark.SparkUtil;\n+import org.apache.iceberg.util.Pair;\n+import org.apache.spark.SparkConf;\n+import org.apache.spark.sql.SparkSession;\n+\n+public final class CustomCatalogs {\n+  private static final Cache<Pair<SparkSession, String>, Catalog> CATALOG_CACHE = Caffeine.newBuilder().softValues().build();\n+\n+  public static final String ICEBERG_DEFAULT_CATALOG = \"default_catalog\";\n+  public static final String ICEBERG_CATALOG_PREFIX = \"spark.sql.catalog\";\n+\n+  private CustomCatalogs() {\n+  }\n+\n+  /**\n+   * Build an Iceberg {@link Catalog} to be used by this Spark source adapter.\n+   *\n+   * <p>\n+   *   The cache is to facilitate reuse of catalogs, especially if wrapped in CachingCatalog. For non-Hive catalogs all\n+   *   custom parameters passed to the catalog are considered in the cache key. Hive catalogs only cache based on\n+   *   the Metastore URIs as per previous behaviour.\n+   * </p>\n+   *\n+   * @param spark Spark Session\n+   * @param name Catalog Name\n+   * @return an Iceberg catalog\n+   */\n+  public static Catalog buildIcebergCatalog(SparkSession spark, String name) {\n+    return CATALOG_CACHE.get(Pair.of(spark, name), CustomCatalogs::build);\n+  }\n+\n+  private static Catalog build(Pair<SparkSession, String> sparkAndName) {\n+    SparkSession spark = sparkAndName.first();\n+    String name =  sparkAndName.second() == null ? ICEBERG_DEFAULT_CATALOG : sparkAndName.second();\n+    SparkConf sparkConf = spark.sparkContext().getConf();\n+    Configuration conf = spark.sessionState().newHadoopConf();\n+\n+    String catalogPrefix = String.format(\"%s.%s.\", ICEBERG_CATALOG_PREFIX, name);\n+    Map<String, String> options = Arrays.stream(sparkConf.getAllWithPrefix(catalogPrefix))\n+        .collect(Collectors.toMap(x -> x._1, x -> x._2));\n+\n+    if (options.isEmpty() && !name.equals(ICEBERG_DEFAULT_CATALOG)) {\n+      throw new IllegalArgumentException(String.format(\"Cannot instantiate catalog %s. Incorrect Parameters\", name));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8a267310cb01236ce0335c4c82d8d22add1f3335"}, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzY3NTM0MA==", "bodyText": "the problem arises when a eg default.table is passed into this method. It will end up constructing a Hive catalog w/ existing options called default. The Hive catalog tries to pull config from Configuration if not passed via the constructor. So we eat the namespace and using it in the catalog name rather than constructing a default catalog and a table identifier default.table.\nWe could:\n\nnot allow catalog names to be specified in Spark2 sources\nStop using Configuration in hive tables\nkeep this the way it is\n\nI prefer option 2 but i am worried that may have unintended consequences elsewhere.", "url": "https://github.com/apache/iceberg/pull/1875#discussion_r543675340", "createdAt": "2020-12-15T20:48:05Z", "author": {"login": "rymurr"}, "path": "spark2/src/main/java/org/apache/iceberg/spark/source/CustomCatalogs.java", "diffHunk": "@@ -0,0 +1,102 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.spark.source;\n+\n+import com.github.benmanes.caffeine.cache.Cache;\n+import com.github.benmanes.caffeine.cache.Caffeine;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+import org.apache.hadoop.conf.Configuration;\n+import org.apache.iceberg.CatalogUtil;\n+import org.apache.iceberg.Table;\n+import org.apache.iceberg.catalog.Catalog;\n+import org.apache.iceberg.catalog.Namespace;\n+import org.apache.iceberg.catalog.TableIdentifier;\n+import org.apache.iceberg.relocated.com.google.common.annotations.VisibleForTesting;\n+import org.apache.iceberg.relocated.com.google.common.base.Splitter;\n+import org.apache.iceberg.spark.SparkUtil;\n+import org.apache.iceberg.util.Pair;\n+import org.apache.spark.SparkConf;\n+import org.apache.spark.sql.SparkSession;\n+\n+public final class CustomCatalogs {\n+  private static final Cache<Pair<SparkSession, String>, Catalog> CATALOG_CACHE = Caffeine.newBuilder().softValues().build();\n+\n+  public static final String ICEBERG_DEFAULT_CATALOG = \"default_catalog\";\n+  public static final String ICEBERG_CATALOG_PREFIX = \"spark.sql.catalog\";\n+\n+  private CustomCatalogs() {\n+  }\n+\n+  /**\n+   * Build an Iceberg {@link Catalog} to be used by this Spark source adapter.\n+   *\n+   * <p>\n+   *   The cache is to facilitate reuse of catalogs, especially if wrapped in CachingCatalog. For non-Hive catalogs all\n+   *   custom parameters passed to the catalog are considered in the cache key. Hive catalogs only cache based on\n+   *   the Metastore URIs as per previous behaviour.\n+   * </p>\n+   *\n+   * @param spark Spark Session\n+   * @param name Catalog Name\n+   * @return an Iceberg catalog\n+   */\n+  public static Catalog buildIcebergCatalog(SparkSession spark, String name) {\n+    return CATALOG_CACHE.get(Pair.of(spark, name), CustomCatalogs::build);\n+  }\n+\n+  private static Catalog build(Pair<SparkSession, String> sparkAndName) {\n+    SparkSession spark = sparkAndName.first();\n+    String name =  sparkAndName.second() == null ? ICEBERG_DEFAULT_CATALOG : sparkAndName.second();\n+    SparkConf sparkConf = spark.sparkContext().getConf();\n+    Configuration conf = spark.sessionState().newHadoopConf();\n+\n+    String catalogPrefix = String.format(\"%s.%s.\", ICEBERG_CATALOG_PREFIX, name);\n+    Map<String, String> options = Arrays.stream(sparkConf.getAllWithPrefix(catalogPrefix))\n+        .collect(Collectors.toMap(x -> x._1, x -> x._2));\n+\n+    if (options.isEmpty() && !name.equals(ICEBERG_DEFAULT_CATALOG)) {\n+      throw new IllegalArgumentException(String.format(\"Cannot instantiate catalog %s. Incorrect Parameters\", name));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzUyNjk4Nw=="}, "originalCommit": {"oid": "8a267310cb01236ce0335c4c82d8d22add1f3335"}, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzQ0NDMyNA==", "bodyText": "I don't think I quite understand you here.\nIn Spark, a catalog exists if spark.sql.catalog.name is present and is a class that can be loaded. I would expect this method to return null if that property isn't the case. For Spark 2.4, I think it would be fine to assume that the class will be SparkCatalog.class.getName(). If it isn't, then return null. If it is, then the catalog exists and this should load the IcebergCatalog that would be used by SparkCatalog in Spark 3.x. Does that make sense?", "url": "https://github.com/apache/iceberg/pull/1875#discussion_r547444324", "createdAt": "2020-12-22T18:45:42Z", "author": {"login": "rdblue"}, "path": "spark2/src/main/java/org/apache/iceberg/spark/source/CustomCatalogs.java", "diffHunk": "@@ -0,0 +1,102 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.spark.source;\n+\n+import com.github.benmanes.caffeine.cache.Cache;\n+import com.github.benmanes.caffeine.cache.Caffeine;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+import org.apache.hadoop.conf.Configuration;\n+import org.apache.iceberg.CatalogUtil;\n+import org.apache.iceberg.Table;\n+import org.apache.iceberg.catalog.Catalog;\n+import org.apache.iceberg.catalog.Namespace;\n+import org.apache.iceberg.catalog.TableIdentifier;\n+import org.apache.iceberg.relocated.com.google.common.annotations.VisibleForTesting;\n+import org.apache.iceberg.relocated.com.google.common.base.Splitter;\n+import org.apache.iceberg.spark.SparkUtil;\n+import org.apache.iceberg.util.Pair;\n+import org.apache.spark.SparkConf;\n+import org.apache.spark.sql.SparkSession;\n+\n+public final class CustomCatalogs {\n+  private static final Cache<Pair<SparkSession, String>, Catalog> CATALOG_CACHE = Caffeine.newBuilder().softValues().build();\n+\n+  public static final String ICEBERG_DEFAULT_CATALOG = \"default_catalog\";\n+  public static final String ICEBERG_CATALOG_PREFIX = \"spark.sql.catalog\";\n+\n+  private CustomCatalogs() {\n+  }\n+\n+  /**\n+   * Build an Iceberg {@link Catalog} to be used by this Spark source adapter.\n+   *\n+   * <p>\n+   *   The cache is to facilitate reuse of catalogs, especially if wrapped in CachingCatalog. For non-Hive catalogs all\n+   *   custom parameters passed to the catalog are considered in the cache key. Hive catalogs only cache based on\n+   *   the Metastore URIs as per previous behaviour.\n+   * </p>\n+   *\n+   * @param spark Spark Session\n+   * @param name Catalog Name\n+   * @return an Iceberg catalog\n+   */\n+  public static Catalog buildIcebergCatalog(SparkSession spark, String name) {\n+    return CATALOG_CACHE.get(Pair.of(spark, name), CustomCatalogs::build);\n+  }\n+\n+  private static Catalog build(Pair<SparkSession, String> sparkAndName) {\n+    SparkSession spark = sparkAndName.first();\n+    String name =  sparkAndName.second() == null ? ICEBERG_DEFAULT_CATALOG : sparkAndName.second();\n+    SparkConf sparkConf = spark.sparkContext().getConf();\n+    Configuration conf = spark.sessionState().newHadoopConf();\n+\n+    String catalogPrefix = String.format(\"%s.%s.\", ICEBERG_CATALOG_PREFIX, name);\n+    Map<String, String> options = Arrays.stream(sparkConf.getAllWithPrefix(catalogPrefix))\n+        .collect(Collectors.toMap(x -> x._1, x -> x._2));\n+\n+    if (options.isEmpty() && !name.equals(ICEBERG_DEFAULT_CATALOG)) {\n+      throw new IllegalArgumentException(String.format(\"Cannot instantiate catalog %s. Incorrect Parameters\", name));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzUyNjk4Nw=="}, "originalCommit": {"oid": "8a267310cb01236ce0335c4c82d8d22add1f3335"}, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzUxNjE5OQ==", "bodyText": "To put it another way. If spark is set up to with spark.sql.catalog.name set then behave as if you are Spark3 and return a custom catalog. Otherwise return Hive.", "url": "https://github.com/apache/iceberg/pull/1875#discussion_r547516199", "createdAt": "2020-12-22T21:30:08Z", "author": {"login": "rymurr"}, "path": "spark2/src/main/java/org/apache/iceberg/spark/source/CustomCatalogs.java", "diffHunk": "@@ -0,0 +1,102 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.spark.source;\n+\n+import com.github.benmanes.caffeine.cache.Cache;\n+import com.github.benmanes.caffeine.cache.Caffeine;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+import org.apache.hadoop.conf.Configuration;\n+import org.apache.iceberg.CatalogUtil;\n+import org.apache.iceberg.Table;\n+import org.apache.iceberg.catalog.Catalog;\n+import org.apache.iceberg.catalog.Namespace;\n+import org.apache.iceberg.catalog.TableIdentifier;\n+import org.apache.iceberg.relocated.com.google.common.annotations.VisibleForTesting;\n+import org.apache.iceberg.relocated.com.google.common.base.Splitter;\n+import org.apache.iceberg.spark.SparkUtil;\n+import org.apache.iceberg.util.Pair;\n+import org.apache.spark.SparkConf;\n+import org.apache.spark.sql.SparkSession;\n+\n+public final class CustomCatalogs {\n+  private static final Cache<Pair<SparkSession, String>, Catalog> CATALOG_CACHE = Caffeine.newBuilder().softValues().build();\n+\n+  public static final String ICEBERG_DEFAULT_CATALOG = \"default_catalog\";\n+  public static final String ICEBERG_CATALOG_PREFIX = \"spark.sql.catalog\";\n+\n+  private CustomCatalogs() {\n+  }\n+\n+  /**\n+   * Build an Iceberg {@link Catalog} to be used by this Spark source adapter.\n+   *\n+   * <p>\n+   *   The cache is to facilitate reuse of catalogs, especially if wrapped in CachingCatalog. For non-Hive catalogs all\n+   *   custom parameters passed to the catalog are considered in the cache key. Hive catalogs only cache based on\n+   *   the Metastore URIs as per previous behaviour.\n+   * </p>\n+   *\n+   * @param spark Spark Session\n+   * @param name Catalog Name\n+   * @return an Iceberg catalog\n+   */\n+  public static Catalog buildIcebergCatalog(SparkSession spark, String name) {\n+    return CATALOG_CACHE.get(Pair.of(spark, name), CustomCatalogs::build);\n+  }\n+\n+  private static Catalog build(Pair<SparkSession, String> sparkAndName) {\n+    SparkSession spark = sparkAndName.first();\n+    String name =  sparkAndName.second() == null ? ICEBERG_DEFAULT_CATALOG : sparkAndName.second();\n+    SparkConf sparkConf = spark.sparkContext().getConf();\n+    Configuration conf = spark.sessionState().newHadoopConf();\n+\n+    String catalogPrefix = String.format(\"%s.%s.\", ICEBERG_CATALOG_PREFIX, name);\n+    Map<String, String> options = Arrays.stream(sparkConf.getAllWithPrefix(catalogPrefix))\n+        .collect(Collectors.toMap(x -> x._1, x -> x._2));\n+\n+    if (options.isEmpty() && !name.equals(ICEBERG_DEFAULT_CATALOG)) {\n+      throw new IllegalArgumentException(String.format(\"Cannot instantiate catalog %s. Incorrect Parameters\", name));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzUyNjk4Nw=="}, "originalCommit": {"oid": "8a267310cb01236ce0335c4c82d8d22add1f3335"}, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzU0MzAwNg==", "bodyText": "Yep! I would say that this should just respect Spark 3 settings.", "url": "https://github.com/apache/iceberg/pull/1875#discussion_r547543006", "createdAt": "2020-12-22T22:45:29Z", "author": {"login": "rdblue"}, "path": "spark2/src/main/java/org/apache/iceberg/spark/source/CustomCatalogs.java", "diffHunk": "@@ -0,0 +1,102 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.spark.source;\n+\n+import com.github.benmanes.caffeine.cache.Cache;\n+import com.github.benmanes.caffeine.cache.Caffeine;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+import org.apache.hadoop.conf.Configuration;\n+import org.apache.iceberg.CatalogUtil;\n+import org.apache.iceberg.Table;\n+import org.apache.iceberg.catalog.Catalog;\n+import org.apache.iceberg.catalog.Namespace;\n+import org.apache.iceberg.catalog.TableIdentifier;\n+import org.apache.iceberg.relocated.com.google.common.annotations.VisibleForTesting;\n+import org.apache.iceberg.relocated.com.google.common.base.Splitter;\n+import org.apache.iceberg.spark.SparkUtil;\n+import org.apache.iceberg.util.Pair;\n+import org.apache.spark.SparkConf;\n+import org.apache.spark.sql.SparkSession;\n+\n+public final class CustomCatalogs {\n+  private static final Cache<Pair<SparkSession, String>, Catalog> CATALOG_CACHE = Caffeine.newBuilder().softValues().build();\n+\n+  public static final String ICEBERG_DEFAULT_CATALOG = \"default_catalog\";\n+  public static final String ICEBERG_CATALOG_PREFIX = \"spark.sql.catalog\";\n+\n+  private CustomCatalogs() {\n+  }\n+\n+  /**\n+   * Build an Iceberg {@link Catalog} to be used by this Spark source adapter.\n+   *\n+   * <p>\n+   *   The cache is to facilitate reuse of catalogs, especially if wrapped in CachingCatalog. For non-Hive catalogs all\n+   *   custom parameters passed to the catalog are considered in the cache key. Hive catalogs only cache based on\n+   *   the Metastore URIs as per previous behaviour.\n+   * </p>\n+   *\n+   * @param spark Spark Session\n+   * @param name Catalog Name\n+   * @return an Iceberg catalog\n+   */\n+  public static Catalog buildIcebergCatalog(SparkSession spark, String name) {\n+    return CATALOG_CACHE.get(Pair.of(spark, name), CustomCatalogs::build);\n+  }\n+\n+  private static Catalog build(Pair<SparkSession, String> sparkAndName) {\n+    SparkSession spark = sparkAndName.first();\n+    String name =  sparkAndName.second() == null ? ICEBERG_DEFAULT_CATALOG : sparkAndName.second();\n+    SparkConf sparkConf = spark.sparkContext().getConf();\n+    Configuration conf = spark.sessionState().newHadoopConf();\n+\n+    String catalogPrefix = String.format(\"%s.%s.\", ICEBERG_CATALOG_PREFIX, name);\n+    Map<String, String> options = Arrays.stream(sparkConf.getAllWithPrefix(catalogPrefix))\n+        .collect(Collectors.toMap(x -> x._1, x -> x._2));\n+\n+    if (options.isEmpty() && !name.equals(ICEBERG_DEFAULT_CATALOG)) {\n+      throw new IllegalArgumentException(String.format(\"Cannot instantiate catalog %s. Incorrect Parameters\", name));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzUyNjk4Nw=="}, "originalCommit": {"oid": "8a267310cb01236ce0335c4c82d8d22add1f3335"}, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzU0NTA1Mw==", "bodyText": "cool. I have attempted to do that here. The complication is the same method fetches default catalog and custom catalog so there is an extra check there. Can separate out if you prefer.", "url": "https://github.com/apache/iceberg/pull/1875#discussion_r547545053", "createdAt": "2020-12-22T22:51:55Z", "author": {"login": "rymurr"}, "path": "spark2/src/main/java/org/apache/iceberg/spark/source/CustomCatalogs.java", "diffHunk": "@@ -0,0 +1,102 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.spark.source;\n+\n+import com.github.benmanes.caffeine.cache.Cache;\n+import com.github.benmanes.caffeine.cache.Caffeine;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+import org.apache.hadoop.conf.Configuration;\n+import org.apache.iceberg.CatalogUtil;\n+import org.apache.iceberg.Table;\n+import org.apache.iceberg.catalog.Catalog;\n+import org.apache.iceberg.catalog.Namespace;\n+import org.apache.iceberg.catalog.TableIdentifier;\n+import org.apache.iceberg.relocated.com.google.common.annotations.VisibleForTesting;\n+import org.apache.iceberg.relocated.com.google.common.base.Splitter;\n+import org.apache.iceberg.spark.SparkUtil;\n+import org.apache.iceberg.util.Pair;\n+import org.apache.spark.SparkConf;\n+import org.apache.spark.sql.SparkSession;\n+\n+public final class CustomCatalogs {\n+  private static final Cache<Pair<SparkSession, String>, Catalog> CATALOG_CACHE = Caffeine.newBuilder().softValues().build();\n+\n+  public static final String ICEBERG_DEFAULT_CATALOG = \"default_catalog\";\n+  public static final String ICEBERG_CATALOG_PREFIX = \"spark.sql.catalog\";\n+\n+  private CustomCatalogs() {\n+  }\n+\n+  /**\n+   * Build an Iceberg {@link Catalog} to be used by this Spark source adapter.\n+   *\n+   * <p>\n+   *   The cache is to facilitate reuse of catalogs, especially if wrapped in CachingCatalog. For non-Hive catalogs all\n+   *   custom parameters passed to the catalog are considered in the cache key. Hive catalogs only cache based on\n+   *   the Metastore URIs as per previous behaviour.\n+   * </p>\n+   *\n+   * @param spark Spark Session\n+   * @param name Catalog Name\n+   * @return an Iceberg catalog\n+   */\n+  public static Catalog buildIcebergCatalog(SparkSession spark, String name) {\n+    return CATALOG_CACHE.get(Pair.of(spark, name), CustomCatalogs::build);\n+  }\n+\n+  private static Catalog build(Pair<SparkSession, String> sparkAndName) {\n+    SparkSession spark = sparkAndName.first();\n+    String name =  sparkAndName.second() == null ? ICEBERG_DEFAULT_CATALOG : sparkAndName.second();\n+    SparkConf sparkConf = spark.sparkContext().getConf();\n+    Configuration conf = spark.sessionState().newHadoopConf();\n+\n+    String catalogPrefix = String.format(\"%s.%s.\", ICEBERG_CATALOG_PREFIX, name);\n+    Map<String, String> options = Arrays.stream(sparkConf.getAllWithPrefix(catalogPrefix))\n+        .collect(Collectors.toMap(x -> x._1, x -> x._2));\n+\n+    if (options.isEmpty() && !name.equals(ICEBERG_DEFAULT_CATALOG)) {\n+      throw new IllegalArgumentException(String.format(\"Cannot instantiate catalog %s. Incorrect Parameters\", name));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzUyNjk4Nw=="}, "originalCommit": {"oid": "8a267310cb01236ce0335c4c82d8d22add1f3335"}, "originalPosition": 78}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxNTI3MzU1OnYy", "diffSide": "RIGHT", "path": "spark2/src/main/java/org/apache/iceberg/spark/source/CustomCatalogs.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxNzoxMDowN1rOIGWUQg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QxNDo1NToyNFrOIKnGGg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzUyODAwMg==", "bodyText": "This isn't really a \"build\" method any more since it wraps the cache, it is more of a \"load\" I think.", "url": "https://github.com/apache/iceberg/pull/1875#discussion_r543528002", "createdAt": "2020-12-15T17:10:07Z", "author": {"login": "rdblue"}, "path": "spark2/src/main/java/org/apache/iceberg/spark/source/CustomCatalogs.java", "diffHunk": "@@ -0,0 +1,102 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.spark.source;\n+\n+import com.github.benmanes.caffeine.cache.Cache;\n+import com.github.benmanes.caffeine.cache.Caffeine;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+import org.apache.hadoop.conf.Configuration;\n+import org.apache.iceberg.CatalogUtil;\n+import org.apache.iceberg.Table;\n+import org.apache.iceberg.catalog.Catalog;\n+import org.apache.iceberg.catalog.Namespace;\n+import org.apache.iceberg.catalog.TableIdentifier;\n+import org.apache.iceberg.relocated.com.google.common.annotations.VisibleForTesting;\n+import org.apache.iceberg.relocated.com.google.common.base.Splitter;\n+import org.apache.iceberg.spark.SparkUtil;\n+import org.apache.iceberg.util.Pair;\n+import org.apache.spark.SparkConf;\n+import org.apache.spark.sql.SparkSession;\n+\n+public final class CustomCatalogs {\n+  private static final Cache<Pair<SparkSession, String>, Catalog> CATALOG_CACHE = Caffeine.newBuilder().softValues().build();\n+\n+  public static final String ICEBERG_DEFAULT_CATALOG = \"default_catalog\";\n+  public static final String ICEBERG_CATALOG_PREFIX = \"spark.sql.catalog\";\n+\n+  private CustomCatalogs() {\n+  }\n+\n+  /**\n+   * Build an Iceberg {@link Catalog} to be used by this Spark source adapter.\n+   *\n+   * <p>\n+   *   The cache is to facilitate reuse of catalogs, especially if wrapped in CachingCatalog. For non-Hive catalogs all\n+   *   custom parameters passed to the catalog are considered in the cache key. Hive catalogs only cache based on\n+   *   the Metastore URIs as per previous behaviour.\n+   * </p>\n+   *\n+   * @param spark Spark Session\n+   * @param name Catalog Name\n+   * @return an Iceberg catalog\n+   */\n+  public static Catalog buildIcebergCatalog(SparkSession spark, String name) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8a267310cb01236ce0335c4c82d8d22add1f3335"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzY3MDM4Nw==", "bodyText": "fixed", "url": "https://github.com/apache/iceberg/pull/1875#discussion_r543670387", "createdAt": "2020-12-15T20:39:37Z", "author": {"login": "rymurr"}, "path": "spark2/src/main/java/org/apache/iceberg/spark/source/CustomCatalogs.java", "diffHunk": "@@ -0,0 +1,102 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.spark.source;\n+\n+import com.github.benmanes.caffeine.cache.Cache;\n+import com.github.benmanes.caffeine.cache.Caffeine;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+import org.apache.hadoop.conf.Configuration;\n+import org.apache.iceberg.CatalogUtil;\n+import org.apache.iceberg.Table;\n+import org.apache.iceberg.catalog.Catalog;\n+import org.apache.iceberg.catalog.Namespace;\n+import org.apache.iceberg.catalog.TableIdentifier;\n+import org.apache.iceberg.relocated.com.google.common.annotations.VisibleForTesting;\n+import org.apache.iceberg.relocated.com.google.common.base.Splitter;\n+import org.apache.iceberg.spark.SparkUtil;\n+import org.apache.iceberg.util.Pair;\n+import org.apache.spark.SparkConf;\n+import org.apache.spark.sql.SparkSession;\n+\n+public final class CustomCatalogs {\n+  private static final Cache<Pair<SparkSession, String>, Catalog> CATALOG_CACHE = Caffeine.newBuilder().softValues().build();\n+\n+  public static final String ICEBERG_DEFAULT_CATALOG = \"default_catalog\";\n+  public static final String ICEBERG_CATALOG_PREFIX = \"spark.sql.catalog\";\n+\n+  private CustomCatalogs() {\n+  }\n+\n+  /**\n+   * Build an Iceberg {@link Catalog} to be used by this Spark source adapter.\n+   *\n+   * <p>\n+   *   The cache is to facilitate reuse of catalogs, especially if wrapped in CachingCatalog. For non-Hive catalogs all\n+   *   custom parameters passed to the catalog are considered in the cache key. Hive catalogs only cache based on\n+   *   the Metastore URIs as per previous behaviour.\n+   * </p>\n+   *\n+   * @param spark Spark Session\n+   * @param name Catalog Name\n+   * @return an Iceberg catalog\n+   */\n+  public static Catalog buildIcebergCatalog(SparkSession spark, String name) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzUyODAwMg=="}, "originalCommit": {"oid": "8a267310cb01236ce0335c4c82d8d22add1f3335"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzU0ODM0Nw==", "bodyText": "Sorry, I think this method should be renamed to loadCatalog. The private method was fine as buildCatalog.", "url": "https://github.com/apache/iceberg/pull/1875#discussion_r547548347", "createdAt": "2020-12-22T23:03:28Z", "author": {"login": "rdblue"}, "path": "spark2/src/main/java/org/apache/iceberg/spark/source/CustomCatalogs.java", "diffHunk": "@@ -0,0 +1,102 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.spark.source;\n+\n+import com.github.benmanes.caffeine.cache.Cache;\n+import com.github.benmanes.caffeine.cache.Caffeine;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+import org.apache.hadoop.conf.Configuration;\n+import org.apache.iceberg.CatalogUtil;\n+import org.apache.iceberg.Table;\n+import org.apache.iceberg.catalog.Catalog;\n+import org.apache.iceberg.catalog.Namespace;\n+import org.apache.iceberg.catalog.TableIdentifier;\n+import org.apache.iceberg.relocated.com.google.common.annotations.VisibleForTesting;\n+import org.apache.iceberg.relocated.com.google.common.base.Splitter;\n+import org.apache.iceberg.spark.SparkUtil;\n+import org.apache.iceberg.util.Pair;\n+import org.apache.spark.SparkConf;\n+import org.apache.spark.sql.SparkSession;\n+\n+public final class CustomCatalogs {\n+  private static final Cache<Pair<SparkSession, String>, Catalog> CATALOG_CACHE = Caffeine.newBuilder().softValues().build();\n+\n+  public static final String ICEBERG_DEFAULT_CATALOG = \"default_catalog\";\n+  public static final String ICEBERG_CATALOG_PREFIX = \"spark.sql.catalog\";\n+\n+  private CustomCatalogs() {\n+  }\n+\n+  /**\n+   * Build an Iceberg {@link Catalog} to be used by this Spark source adapter.\n+   *\n+   * <p>\n+   *   The cache is to facilitate reuse of catalogs, especially if wrapped in CachingCatalog. For non-Hive catalogs all\n+   *   custom parameters passed to the catalog are considered in the cache key. Hive catalogs only cache based on\n+   *   the Metastore URIs as per previous behaviour.\n+   * </p>\n+   *\n+   * @param spark Spark Session\n+   * @param name Catalog Name\n+   * @return an Iceberg catalog\n+   */\n+  public static Catalog buildIcebergCatalog(SparkSession spark, String name) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzUyODAwMg=="}, "originalCommit": {"oid": "8a267310cb01236ce0335c4c82d8d22add1f3335"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Nzk5NzIxMA==", "bodyText": "ahh, yup. Agreed.", "url": "https://github.com/apache/iceberg/pull/1875#discussion_r547997210", "createdAt": "2020-12-23T14:55:24Z", "author": {"login": "rymurr"}, "path": "spark2/src/main/java/org/apache/iceberg/spark/source/CustomCatalogs.java", "diffHunk": "@@ -0,0 +1,102 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.spark.source;\n+\n+import com.github.benmanes.caffeine.cache.Cache;\n+import com.github.benmanes.caffeine.cache.Caffeine;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+import org.apache.hadoop.conf.Configuration;\n+import org.apache.iceberg.CatalogUtil;\n+import org.apache.iceberg.Table;\n+import org.apache.iceberg.catalog.Catalog;\n+import org.apache.iceberg.catalog.Namespace;\n+import org.apache.iceberg.catalog.TableIdentifier;\n+import org.apache.iceberg.relocated.com.google.common.annotations.VisibleForTesting;\n+import org.apache.iceberg.relocated.com.google.common.base.Splitter;\n+import org.apache.iceberg.spark.SparkUtil;\n+import org.apache.iceberg.util.Pair;\n+import org.apache.spark.SparkConf;\n+import org.apache.spark.sql.SparkSession;\n+\n+public final class CustomCatalogs {\n+  private static final Cache<Pair<SparkSession, String>, Catalog> CATALOG_CACHE = Caffeine.newBuilder().softValues().build();\n+\n+  public static final String ICEBERG_DEFAULT_CATALOG = \"default_catalog\";\n+  public static final String ICEBERG_CATALOG_PREFIX = \"spark.sql.catalog\";\n+\n+  private CustomCatalogs() {\n+  }\n+\n+  /**\n+   * Build an Iceberg {@link Catalog} to be used by this Spark source adapter.\n+   *\n+   * <p>\n+   *   The cache is to facilitate reuse of catalogs, especially if wrapped in CachingCatalog. For non-Hive catalogs all\n+   *   custom parameters passed to the catalog are considered in the cache key. Hive catalogs only cache based on\n+   *   the Metastore URIs as per previous behaviour.\n+   * </p>\n+   *\n+   * @param spark Spark Session\n+   * @param name Catalog Name\n+   * @return an Iceberg catalog\n+   */\n+  public static Catalog buildIcebergCatalog(SparkSession spark, String name) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzUyODAwMg=="}, "originalCommit": {"oid": "8a267310cb01236ce0335c4c82d8d22add1f3335"}, "originalPosition": 63}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxNTI3OTQ2OnYy", "diffSide": "RIGHT", "path": "spark2/src/main/java/org/apache/iceberg/spark/source/IcebergSource.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxNzoxMToxOVrOIGWX3A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQyMDozOTo0MlrOIGfAng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzUyODkyNA==", "bodyText": "Looks like some imports might be stale.", "url": "https://github.com/apache/iceberg/pull/1875#discussion_r543528924", "createdAt": "2020-12-15T17:11:19Z", "author": {"login": "rdblue"}, "path": "spark2/src/main/java/org/apache/iceberg/spark/source/IcebergSource.java", "diffHunk": "@@ -24,16 +24,16 @@\n import org.apache.hadoop.conf.Configuration;\n import org.apache.iceberg.Schema;\n import org.apache.iceberg.Table;\n+import org.apache.iceberg.catalog.Catalog;\n import org.apache.iceberg.catalog.TableIdentifier;\n import org.apache.iceberg.encryption.EncryptionManager;\n import org.apache.iceberg.hadoop.HadoopTables;\n-import org.apache.iceberg.hive.HiveCatalog;\n-import org.apache.iceberg.hive.HiveCatalogs;\n import org.apache.iceberg.io.FileIO;\n import org.apache.iceberg.relocated.com.google.common.base.Preconditions;\n import org.apache.iceberg.spark.SparkSchemaUtil;\n import org.apache.iceberg.spark.SparkUtil;\n import org.apache.iceberg.types.TypeUtil;\n+import org.apache.iceberg.util.Pair;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8a267310cb01236ce0335c4c82d8d22add1f3335"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzY3MDQzMA==", "bodyText": "fixed", "url": "https://github.com/apache/iceberg/pull/1875#discussion_r543670430", "createdAt": "2020-12-15T20:39:42Z", "author": {"login": "rymurr"}, "path": "spark2/src/main/java/org/apache/iceberg/spark/source/IcebergSource.java", "diffHunk": "@@ -24,16 +24,16 @@\n import org.apache.hadoop.conf.Configuration;\n import org.apache.iceberg.Schema;\n import org.apache.iceberg.Table;\n+import org.apache.iceberg.catalog.Catalog;\n import org.apache.iceberg.catalog.TableIdentifier;\n import org.apache.iceberg.encryption.EncryptionManager;\n import org.apache.iceberg.hadoop.HadoopTables;\n-import org.apache.iceberg.hive.HiveCatalog;\n-import org.apache.iceberg.hive.HiveCatalogs;\n import org.apache.iceberg.io.FileIO;\n import org.apache.iceberg.relocated.com.google.common.base.Preconditions;\n import org.apache.iceberg.spark.SparkSchemaUtil;\n import org.apache.iceberg.spark.SparkUtil;\n import org.apache.iceberg.types.TypeUtil;\n+import org.apache.iceberg.util.Pair;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzUyODkyNA=="}, "originalCommit": {"oid": "8a267310cb01236ce0335c4c82d8d22add1f3335"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0MjAzNzA5OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/apache/iceberg/hadoop/HadoopCatalog.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxODozMjozNFrOIKFAEQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQyMTo1NDozMlrOIKKRTQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzQzODYwOQ==", "bodyText": "This adds properties to the map twice?\nWe usually prefer Maps.newHashMap(), too.", "url": "https://github.com/apache/iceberg/pull/1875#discussion_r547438609", "createdAt": "2020-12-22T18:32:34Z", "author": {"login": "rdblue"}, "path": "core/src/main/java/org/apache/iceberg/hadoop/HadoopCatalog.java", "diffHunk": "@@ -68,45 +70,62 @@\n  *\n  * Note: The HadoopCatalog requires that the underlying file system supports atomic rename.\n  */\n-public class HadoopCatalog extends BaseMetastoreCatalog implements Closeable, SupportsNamespaces {\n+public class HadoopCatalog extends BaseMetastoreCatalog implements Closeable, SupportsNamespaces, Configurable {\n \n   private static final String ICEBERG_HADOOP_WAREHOUSE_BASE = \"iceberg/warehouse\";\n   private static final String TABLE_METADATA_FILE_EXTENSION = \".metadata.json\";\n   private static final Joiner SLASH = Joiner.on(\"/\");\n   private static final PathFilter TABLE_FILTER = path -> path.getName().endsWith(TABLE_METADATA_FILE_EXTENSION);\n \n-  private final String catalogName;\n-  private final Configuration conf;\n-  private final String warehouseLocation;\n-  private final FileSystem fs;\n-  private final FileIO fileIO;\n+  private String catalogName;\n+  private Configuration conf;\n+  private String warehouseLocation;\n+  private FileSystem fs;\n+  private FileIO fileIO;\n+\n+  public HadoopCatalog(){\n+  }\n \n   /**\n    * The constructor of the HadoopCatalog. It uses the passed location as its warehouse directory.\n    *\n+   * @deprecated please use the no-arg constructor, setConf and initialize to construct the catalog\n    * @param name The catalog name\n    * @param conf The Hadoop configuration\n    * @param warehouseLocation The location used as warehouse directory\n    */\n+  @Deprecated\n   public HadoopCatalog(String name, Configuration conf, String warehouseLocation) {\n     this(name, conf, warehouseLocation, Maps.newHashMap());\n   }\n \n   /**\n    * The all-arg constructor of the HadoopCatalog.\n    *\n+   * @deprecated please use the no-arg constructor, setConf and initialize to construct the catalog\n    * @param name The catalog name\n    * @param conf The Hadoop configuration\n    * @param warehouseLocation The location used as warehouse directory\n    * @param properties catalog properties\n    */\n+  @Deprecated\n   public HadoopCatalog(String name, Configuration conf, String warehouseLocation, Map<String, String> properties) {\n     Preconditions.checkArgument(warehouseLocation != null && !warehouseLocation.equals(\"\"),\n         \"no location provided for warehouse\");\n+    setConf(conf);\n+    Map<String, String> props = new HashMap<>(properties);\n+    props.putAll(properties);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "25b2f918c96611af21de42c5a47cf8fa3b824ae2"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzUyNDk0MQ==", "bodyText": "sigh...dumb error. Fixed", "url": "https://github.com/apache/iceberg/pull/1875#discussion_r547524941", "createdAt": "2020-12-22T21:54:32Z", "author": {"login": "rymurr"}, "path": "core/src/main/java/org/apache/iceberg/hadoop/HadoopCatalog.java", "diffHunk": "@@ -68,45 +70,62 @@\n  *\n  * Note: The HadoopCatalog requires that the underlying file system supports atomic rename.\n  */\n-public class HadoopCatalog extends BaseMetastoreCatalog implements Closeable, SupportsNamespaces {\n+public class HadoopCatalog extends BaseMetastoreCatalog implements Closeable, SupportsNamespaces, Configurable {\n \n   private static final String ICEBERG_HADOOP_WAREHOUSE_BASE = \"iceberg/warehouse\";\n   private static final String TABLE_METADATA_FILE_EXTENSION = \".metadata.json\";\n   private static final Joiner SLASH = Joiner.on(\"/\");\n   private static final PathFilter TABLE_FILTER = path -> path.getName().endsWith(TABLE_METADATA_FILE_EXTENSION);\n \n-  private final String catalogName;\n-  private final Configuration conf;\n-  private final String warehouseLocation;\n-  private final FileSystem fs;\n-  private final FileIO fileIO;\n+  private String catalogName;\n+  private Configuration conf;\n+  private String warehouseLocation;\n+  private FileSystem fs;\n+  private FileIO fileIO;\n+\n+  public HadoopCatalog(){\n+  }\n \n   /**\n    * The constructor of the HadoopCatalog. It uses the passed location as its warehouse directory.\n    *\n+   * @deprecated please use the no-arg constructor, setConf and initialize to construct the catalog\n    * @param name The catalog name\n    * @param conf The Hadoop configuration\n    * @param warehouseLocation The location used as warehouse directory\n    */\n+  @Deprecated\n   public HadoopCatalog(String name, Configuration conf, String warehouseLocation) {\n     this(name, conf, warehouseLocation, Maps.newHashMap());\n   }\n \n   /**\n    * The all-arg constructor of the HadoopCatalog.\n    *\n+   * @deprecated please use the no-arg constructor, setConf and initialize to construct the catalog\n    * @param name The catalog name\n    * @param conf The Hadoop configuration\n    * @param warehouseLocation The location used as warehouse directory\n    * @param properties catalog properties\n    */\n+  @Deprecated\n   public HadoopCatalog(String name, Configuration conf, String warehouseLocation, Map<String, String> properties) {\n     Preconditions.checkArgument(warehouseLocation != null && !warehouseLocation.equals(\"\"),\n         \"no location provided for warehouse\");\n+    setConf(conf);\n+    Map<String, String> props = new HashMap<>(properties);\n+    props.putAll(properties);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzQzODYwOQ=="}, "originalCommit": {"oid": "25b2f918c96611af21de42c5a47cf8fa3b824ae2"}, "originalPosition": 68}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0MjA0MzgzOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/apache/iceberg/hadoop/HadoopCatalog.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxODozNDo1M1rOIKFEIQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQyMTo1NDozN1rOIKKRaw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzQzOTY0OQ==", "bodyText": "Nit: Error messages should use sentence case, with the first word capitalized. I'd also make it more clear that warehouse is the configuration key to set, like \"Cannot create Hadoop catalog without 'warehouse' location\".", "url": "https://github.com/apache/iceberg/pull/1875#discussion_r547439649", "createdAt": "2020-12-22T18:34:53Z", "author": {"login": "rdblue"}, "path": "core/src/main/java/org/apache/iceberg/hadoop/HadoopCatalog.java", "diffHunk": "@@ -68,45 +70,62 @@\n  *\n  * Note: The HadoopCatalog requires that the underlying file system supports atomic rename.\n  */\n-public class HadoopCatalog extends BaseMetastoreCatalog implements Closeable, SupportsNamespaces {\n+public class HadoopCatalog extends BaseMetastoreCatalog implements Closeable, SupportsNamespaces, Configurable {\n \n   private static final String ICEBERG_HADOOP_WAREHOUSE_BASE = \"iceberg/warehouse\";\n   private static final String TABLE_METADATA_FILE_EXTENSION = \".metadata.json\";\n   private static final Joiner SLASH = Joiner.on(\"/\");\n   private static final PathFilter TABLE_FILTER = path -> path.getName().endsWith(TABLE_METADATA_FILE_EXTENSION);\n \n-  private final String catalogName;\n-  private final Configuration conf;\n-  private final String warehouseLocation;\n-  private final FileSystem fs;\n-  private final FileIO fileIO;\n+  private String catalogName;\n+  private Configuration conf;\n+  private String warehouseLocation;\n+  private FileSystem fs;\n+  private FileIO fileIO;\n+\n+  public HadoopCatalog(){\n+  }\n \n   /**\n    * The constructor of the HadoopCatalog. It uses the passed location as its warehouse directory.\n    *\n+   * @deprecated please use the no-arg constructor, setConf and initialize to construct the catalog\n    * @param name The catalog name\n    * @param conf The Hadoop configuration\n    * @param warehouseLocation The location used as warehouse directory\n    */\n+  @Deprecated\n   public HadoopCatalog(String name, Configuration conf, String warehouseLocation) {\n     this(name, conf, warehouseLocation, Maps.newHashMap());\n   }\n \n   /**\n    * The all-arg constructor of the HadoopCatalog.\n    *\n+   * @deprecated please use the no-arg constructor, setConf and initialize to construct the catalog\n    * @param name The catalog name\n    * @param conf The Hadoop configuration\n    * @param warehouseLocation The location used as warehouse directory\n    * @param properties catalog properties\n    */\n+  @Deprecated\n   public HadoopCatalog(String name, Configuration conf, String warehouseLocation, Map<String, String> properties) {\n     Preconditions.checkArgument(warehouseLocation != null && !warehouseLocation.equals(\"\"),\n         \"no location provided for warehouse\");\n+    setConf(conf);\n+    Map<String, String> props = new HashMap<>(properties);\n+    props.putAll(properties);\n+    props.put(CatalogProperties.WAREHOUSE_LOCATION, warehouseLocation);\n+    initialize(name, props);\n+  }\n \n+  @Override\n+  public void initialize(String name, Map<String, String> properties) {\n+    String inputWarehouseLocation = properties.get(CatalogProperties.WAREHOUSE_LOCATION);\n+    Preconditions.checkArgument(inputWarehouseLocation != null && !inputWarehouseLocation.equals(\"\"),\n+        \"no location provided for warehouse\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "25b2f918c96611af21de42c5a47cf8fa3b824ae2"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzUyNDk3MQ==", "bodyText": "sure, copy/paste...I have now fixed both instances", "url": "https://github.com/apache/iceberg/pull/1875#discussion_r547524971", "createdAt": "2020-12-22T21:54:37Z", "author": {"login": "rymurr"}, "path": "core/src/main/java/org/apache/iceberg/hadoop/HadoopCatalog.java", "diffHunk": "@@ -68,45 +70,62 @@\n  *\n  * Note: The HadoopCatalog requires that the underlying file system supports atomic rename.\n  */\n-public class HadoopCatalog extends BaseMetastoreCatalog implements Closeable, SupportsNamespaces {\n+public class HadoopCatalog extends BaseMetastoreCatalog implements Closeable, SupportsNamespaces, Configurable {\n \n   private static final String ICEBERG_HADOOP_WAREHOUSE_BASE = \"iceberg/warehouse\";\n   private static final String TABLE_METADATA_FILE_EXTENSION = \".metadata.json\";\n   private static final Joiner SLASH = Joiner.on(\"/\");\n   private static final PathFilter TABLE_FILTER = path -> path.getName().endsWith(TABLE_METADATA_FILE_EXTENSION);\n \n-  private final String catalogName;\n-  private final Configuration conf;\n-  private final String warehouseLocation;\n-  private final FileSystem fs;\n-  private final FileIO fileIO;\n+  private String catalogName;\n+  private Configuration conf;\n+  private String warehouseLocation;\n+  private FileSystem fs;\n+  private FileIO fileIO;\n+\n+  public HadoopCatalog(){\n+  }\n \n   /**\n    * The constructor of the HadoopCatalog. It uses the passed location as its warehouse directory.\n    *\n+   * @deprecated please use the no-arg constructor, setConf and initialize to construct the catalog\n    * @param name The catalog name\n    * @param conf The Hadoop configuration\n    * @param warehouseLocation The location used as warehouse directory\n    */\n+  @Deprecated\n   public HadoopCatalog(String name, Configuration conf, String warehouseLocation) {\n     this(name, conf, warehouseLocation, Maps.newHashMap());\n   }\n \n   /**\n    * The all-arg constructor of the HadoopCatalog.\n    *\n+   * @deprecated please use the no-arg constructor, setConf and initialize to construct the catalog\n    * @param name The catalog name\n    * @param conf The Hadoop configuration\n    * @param warehouseLocation The location used as warehouse directory\n    * @param properties catalog properties\n    */\n+  @Deprecated\n   public HadoopCatalog(String name, Configuration conf, String warehouseLocation, Map<String, String> properties) {\n     Preconditions.checkArgument(warehouseLocation != null && !warehouseLocation.equals(\"\"),\n         \"no location provided for warehouse\");\n+    setConf(conf);\n+    Map<String, String> props = new HashMap<>(properties);\n+    props.putAll(properties);\n+    props.put(CatalogProperties.WAREHOUSE_LOCATION, warehouseLocation);\n+    initialize(name, props);\n+  }\n \n+  @Override\n+  public void initialize(String name, Map<String, String> properties) {\n+    String inputWarehouseLocation = properties.get(CatalogProperties.WAREHOUSE_LOCATION);\n+    Preconditions.checkArgument(inputWarehouseLocation != null && !inputWarehouseLocation.equals(\"\"),\n+        \"no location provided for warehouse\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzQzOTY0OQ=="}, "originalCommit": {"oid": "25b2f918c96611af21de42c5a47cf8fa3b824ae2"}, "originalPosition": 77}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0MjA0Njk1OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/apache/iceberg/hadoop/HadoopCatalog.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxODozNTo1OFrOIKFF8g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQyMjo1MDo1N1rOIKLerg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzQ0MDExNA==", "bodyText": "Can you call this last? I think it is typically set after calling initialize. The important thing is to try to use the same order.", "url": "https://github.com/apache/iceberg/pull/1875#discussion_r547440114", "createdAt": "2020-12-22T18:35:58Z", "author": {"login": "rdblue"}, "path": "core/src/main/java/org/apache/iceberg/hadoop/HadoopCatalog.java", "diffHunk": "@@ -68,45 +70,62 @@\n  *\n  * Note: The HadoopCatalog requires that the underlying file system supports atomic rename.\n  */\n-public class HadoopCatalog extends BaseMetastoreCatalog implements Closeable, SupportsNamespaces {\n+public class HadoopCatalog extends BaseMetastoreCatalog implements Closeable, SupportsNamespaces, Configurable {\n \n   private static final String ICEBERG_HADOOP_WAREHOUSE_BASE = \"iceberg/warehouse\";\n   private static final String TABLE_METADATA_FILE_EXTENSION = \".metadata.json\";\n   private static final Joiner SLASH = Joiner.on(\"/\");\n   private static final PathFilter TABLE_FILTER = path -> path.getName().endsWith(TABLE_METADATA_FILE_EXTENSION);\n \n-  private final String catalogName;\n-  private final Configuration conf;\n-  private final String warehouseLocation;\n-  private final FileSystem fs;\n-  private final FileIO fileIO;\n+  private String catalogName;\n+  private Configuration conf;\n+  private String warehouseLocation;\n+  private FileSystem fs;\n+  private FileIO fileIO;\n+\n+  public HadoopCatalog(){\n+  }\n \n   /**\n    * The constructor of the HadoopCatalog. It uses the passed location as its warehouse directory.\n    *\n+   * @deprecated please use the no-arg constructor, setConf and initialize to construct the catalog\n    * @param name The catalog name\n    * @param conf The Hadoop configuration\n    * @param warehouseLocation The location used as warehouse directory\n    */\n+  @Deprecated\n   public HadoopCatalog(String name, Configuration conf, String warehouseLocation) {\n     this(name, conf, warehouseLocation, Maps.newHashMap());\n   }\n \n   /**\n    * The all-arg constructor of the HadoopCatalog.\n    *\n+   * @deprecated please use the no-arg constructor, setConf and initialize to construct the catalog\n    * @param name The catalog name\n    * @param conf The Hadoop configuration\n    * @param warehouseLocation The location used as warehouse directory\n    * @param properties catalog properties\n    */\n+  @Deprecated\n   public HadoopCatalog(String name, Configuration conf, String warehouseLocation, Map<String, String> properties) {\n     Preconditions.checkArgument(warehouseLocation != null && !warehouseLocation.equals(\"\"),\n         \"no location provided for warehouse\");\n+    setConf(conf);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "25b2f918c96611af21de42c5a47cf8fa3b824ae2"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzUyNDk5MA==", "bodyText": "In catalog util setConf is called first. I think everywhere initialize is called setConf is called before", "url": "https://github.com/apache/iceberg/pull/1875#discussion_r547524990", "createdAt": "2020-12-22T21:54:40Z", "author": {"login": "rymurr"}, "path": "core/src/main/java/org/apache/iceberg/hadoop/HadoopCatalog.java", "diffHunk": "@@ -68,45 +70,62 @@\n  *\n  * Note: The HadoopCatalog requires that the underlying file system supports atomic rename.\n  */\n-public class HadoopCatalog extends BaseMetastoreCatalog implements Closeable, SupportsNamespaces {\n+public class HadoopCatalog extends BaseMetastoreCatalog implements Closeable, SupportsNamespaces, Configurable {\n \n   private static final String ICEBERG_HADOOP_WAREHOUSE_BASE = \"iceberg/warehouse\";\n   private static final String TABLE_METADATA_FILE_EXTENSION = \".metadata.json\";\n   private static final Joiner SLASH = Joiner.on(\"/\");\n   private static final PathFilter TABLE_FILTER = path -> path.getName().endsWith(TABLE_METADATA_FILE_EXTENSION);\n \n-  private final String catalogName;\n-  private final Configuration conf;\n-  private final String warehouseLocation;\n-  private final FileSystem fs;\n-  private final FileIO fileIO;\n+  private String catalogName;\n+  private Configuration conf;\n+  private String warehouseLocation;\n+  private FileSystem fs;\n+  private FileIO fileIO;\n+\n+  public HadoopCatalog(){\n+  }\n \n   /**\n    * The constructor of the HadoopCatalog. It uses the passed location as its warehouse directory.\n    *\n+   * @deprecated please use the no-arg constructor, setConf and initialize to construct the catalog\n    * @param name The catalog name\n    * @param conf The Hadoop configuration\n    * @param warehouseLocation The location used as warehouse directory\n    */\n+  @Deprecated\n   public HadoopCatalog(String name, Configuration conf, String warehouseLocation) {\n     this(name, conf, warehouseLocation, Maps.newHashMap());\n   }\n \n   /**\n    * The all-arg constructor of the HadoopCatalog.\n    *\n+   * @deprecated please use the no-arg constructor, setConf and initialize to construct the catalog\n    * @param name The catalog name\n    * @param conf The Hadoop configuration\n    * @param warehouseLocation The location used as warehouse directory\n    * @param properties catalog properties\n    */\n+  @Deprecated\n   public HadoopCatalog(String name, Configuration conf, String warehouseLocation, Map<String, String> properties) {\n     Preconditions.checkArgument(warehouseLocation != null && !warehouseLocation.equals(\"\"),\n         \"no location provided for warehouse\");\n+    setConf(conf);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzQ0MDExNA=="}, "originalCommit": {"oid": "25b2f918c96611af21de42c5a47cf8fa3b824ae2"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzU0NDc1MA==", "bodyText": "Okay, I was wrong then. The important thing is being consistent so you've already done that.", "url": "https://github.com/apache/iceberg/pull/1875#discussion_r547544750", "createdAt": "2020-12-22T22:50:57Z", "author": {"login": "rdblue"}, "path": "core/src/main/java/org/apache/iceberg/hadoop/HadoopCatalog.java", "diffHunk": "@@ -68,45 +70,62 @@\n  *\n  * Note: The HadoopCatalog requires that the underlying file system supports atomic rename.\n  */\n-public class HadoopCatalog extends BaseMetastoreCatalog implements Closeable, SupportsNamespaces {\n+public class HadoopCatalog extends BaseMetastoreCatalog implements Closeable, SupportsNamespaces, Configurable {\n \n   private static final String ICEBERG_HADOOP_WAREHOUSE_BASE = \"iceberg/warehouse\";\n   private static final String TABLE_METADATA_FILE_EXTENSION = \".metadata.json\";\n   private static final Joiner SLASH = Joiner.on(\"/\");\n   private static final PathFilter TABLE_FILTER = path -> path.getName().endsWith(TABLE_METADATA_FILE_EXTENSION);\n \n-  private final String catalogName;\n-  private final Configuration conf;\n-  private final String warehouseLocation;\n-  private final FileSystem fs;\n-  private final FileIO fileIO;\n+  private String catalogName;\n+  private Configuration conf;\n+  private String warehouseLocation;\n+  private FileSystem fs;\n+  private FileIO fileIO;\n+\n+  public HadoopCatalog(){\n+  }\n \n   /**\n    * The constructor of the HadoopCatalog. It uses the passed location as its warehouse directory.\n    *\n+   * @deprecated please use the no-arg constructor, setConf and initialize to construct the catalog\n    * @param name The catalog name\n    * @param conf The Hadoop configuration\n    * @param warehouseLocation The location used as warehouse directory\n    */\n+  @Deprecated\n   public HadoopCatalog(String name, Configuration conf, String warehouseLocation) {\n     this(name, conf, warehouseLocation, Maps.newHashMap());\n   }\n \n   /**\n    * The all-arg constructor of the HadoopCatalog.\n    *\n+   * @deprecated please use the no-arg constructor, setConf and initialize to construct the catalog\n    * @param name The catalog name\n    * @param conf The Hadoop configuration\n    * @param warehouseLocation The location used as warehouse directory\n    * @param properties catalog properties\n    */\n+  @Deprecated\n   public HadoopCatalog(String name, Configuration conf, String warehouseLocation, Map<String, String> properties) {\n     Preconditions.checkArgument(warehouseLocation != null && !warehouseLocation.equals(\"\"),\n         \"no location provided for warehouse\");\n+    setConf(conf);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzQ0MDExNA=="}, "originalCommit": {"oid": "25b2f918c96611af21de42c5a47cf8fa3b824ae2"}, "originalPosition": 66}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0MjA0ODU2OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/apache/iceberg/hadoop/HadoopCatalog.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxODozNjoyOVrOIKFG3Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQyMTo1NDo0NFrOIKKRjA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzQ0MDM0OQ==", "bodyText": "Can you also add when this will be removed? Like \"will be removed in 0.12.0\".", "url": "https://github.com/apache/iceberg/pull/1875#discussion_r547440349", "createdAt": "2020-12-22T18:36:29Z", "author": {"login": "rdblue"}, "path": "core/src/main/java/org/apache/iceberg/hadoop/HadoopCatalog.java", "diffHunk": "@@ -68,45 +70,62 @@\n  *\n  * Note: The HadoopCatalog requires that the underlying file system supports atomic rename.\n  */\n-public class HadoopCatalog extends BaseMetastoreCatalog implements Closeable, SupportsNamespaces {\n+public class HadoopCatalog extends BaseMetastoreCatalog implements Closeable, SupportsNamespaces, Configurable {\n \n   private static final String ICEBERG_HADOOP_WAREHOUSE_BASE = \"iceberg/warehouse\";\n   private static final String TABLE_METADATA_FILE_EXTENSION = \".metadata.json\";\n   private static final Joiner SLASH = Joiner.on(\"/\");\n   private static final PathFilter TABLE_FILTER = path -> path.getName().endsWith(TABLE_METADATA_FILE_EXTENSION);\n \n-  private final String catalogName;\n-  private final Configuration conf;\n-  private final String warehouseLocation;\n-  private final FileSystem fs;\n-  private final FileIO fileIO;\n+  private String catalogName;\n+  private Configuration conf;\n+  private String warehouseLocation;\n+  private FileSystem fs;\n+  private FileIO fileIO;\n+\n+  public HadoopCatalog(){\n+  }\n \n   /**\n    * The constructor of the HadoopCatalog. It uses the passed location as its warehouse directory.\n    *\n+   * @deprecated please use the no-arg constructor, setConf and initialize to construct the catalog\n    * @param name The catalog name\n    * @param conf The Hadoop configuration\n    * @param warehouseLocation The location used as warehouse directory\n    */\n+  @Deprecated\n   public HadoopCatalog(String name, Configuration conf, String warehouseLocation) {\n     this(name, conf, warehouseLocation, Maps.newHashMap());\n   }\n \n   /**\n    * The all-arg constructor of the HadoopCatalog.\n    *\n+   * @deprecated please use the no-arg constructor, setConf and initialize to construct the catalog", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "25b2f918c96611af21de42c5a47cf8fa3b824ae2"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzUyNTAwNA==", "bodyText": "done", "url": "https://github.com/apache/iceberg/pull/1875#discussion_r547525004", "createdAt": "2020-12-22T21:54:44Z", "author": {"login": "rymurr"}, "path": "core/src/main/java/org/apache/iceberg/hadoop/HadoopCatalog.java", "diffHunk": "@@ -68,45 +70,62 @@\n  *\n  * Note: The HadoopCatalog requires that the underlying file system supports atomic rename.\n  */\n-public class HadoopCatalog extends BaseMetastoreCatalog implements Closeable, SupportsNamespaces {\n+public class HadoopCatalog extends BaseMetastoreCatalog implements Closeable, SupportsNamespaces, Configurable {\n \n   private static final String ICEBERG_HADOOP_WAREHOUSE_BASE = \"iceberg/warehouse\";\n   private static final String TABLE_METADATA_FILE_EXTENSION = \".metadata.json\";\n   private static final Joiner SLASH = Joiner.on(\"/\");\n   private static final PathFilter TABLE_FILTER = path -> path.getName().endsWith(TABLE_METADATA_FILE_EXTENSION);\n \n-  private final String catalogName;\n-  private final Configuration conf;\n-  private final String warehouseLocation;\n-  private final FileSystem fs;\n-  private final FileIO fileIO;\n+  private String catalogName;\n+  private Configuration conf;\n+  private String warehouseLocation;\n+  private FileSystem fs;\n+  private FileIO fileIO;\n+\n+  public HadoopCatalog(){\n+  }\n \n   /**\n    * The constructor of the HadoopCatalog. It uses the passed location as its warehouse directory.\n    *\n+   * @deprecated please use the no-arg constructor, setConf and initialize to construct the catalog\n    * @param name The catalog name\n    * @param conf The Hadoop configuration\n    * @param warehouseLocation The location used as warehouse directory\n    */\n+  @Deprecated\n   public HadoopCatalog(String name, Configuration conf, String warehouseLocation) {\n     this(name, conf, warehouseLocation, Maps.newHashMap());\n   }\n \n   /**\n    * The all-arg constructor of the HadoopCatalog.\n    *\n+   * @deprecated please use the no-arg constructor, setConf and initialize to construct the catalog", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzQ0MDM0OQ=="}, "originalCommit": {"oid": "25b2f918c96611af21de42c5a47cf8fa3b824ae2"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0MjA4MDEzOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/apache/iceberg/CatalogUtil.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxODo0NzoxMFrOIKFZXQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQyMTo1NDo0N1rOIKKRoQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzQ0NTA4NQ==", "bodyText": "Looks like this newline should be above the return to separate it from the control flow.", "url": "https://github.com/apache/iceberg/pull/1875#discussion_r547445085", "createdAt": "2020-12-22T18:47:10Z", "author": {"login": "rdblue"}, "path": "core/src/main/java/org/apache/iceberg/CatalogUtil.java", "diffHunk": "@@ -169,6 +175,26 @@ public static Catalog loadCatalog(\n     return catalog;\n   }\n \n+  public static Catalog buildIcebergCatalog(String name, Map<String, String> options, Configuration conf) {\n+\n+    String catalogImpl = options.get(CatalogProperties.CATALOG_IMPL);\n+    if (catalogImpl == null) {\n+      String catalogType = options.getOrDefault(ICEBERG_CATALOG_TYPE, ICEBERG_CATALOG_TYPE_HIVE);\n+      switch (catalogType.toLowerCase(Locale.ENGLISH)) {\n+        case ICEBERG_CATALOG_TYPE_HIVE:\n+          catalogImpl = ICEBERG_CATALOG_HIVE;\n+          break;\n+        case ICEBERG_CATALOG_TYPE_HADOOP:\n+          catalogImpl = ICEBERG_CATALOG_HADOOP;\n+          break;\n+        default:\n+          throw new UnsupportedOperationException(\"Unknown catalog type: \" + catalogType);\n+      }\n+    }\n+    return CatalogUtil.loadCatalog(catalogImpl, name, options, conf);\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "25b2f918c96611af21de42c5a47cf8fa3b824ae2"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzUyNTAyNQ==", "bodyText": "done", "url": "https://github.com/apache/iceberg/pull/1875#discussion_r547525025", "createdAt": "2020-12-22T21:54:47Z", "author": {"login": "rymurr"}, "path": "core/src/main/java/org/apache/iceberg/CatalogUtil.java", "diffHunk": "@@ -169,6 +175,26 @@ public static Catalog loadCatalog(\n     return catalog;\n   }\n \n+  public static Catalog buildIcebergCatalog(String name, Map<String, String> options, Configuration conf) {\n+\n+    String catalogImpl = options.get(CatalogProperties.CATALOG_IMPL);\n+    if (catalogImpl == null) {\n+      String catalogType = options.getOrDefault(ICEBERG_CATALOG_TYPE, ICEBERG_CATALOG_TYPE_HIVE);\n+      switch (catalogType.toLowerCase(Locale.ENGLISH)) {\n+        case ICEBERG_CATALOG_TYPE_HIVE:\n+          catalogImpl = ICEBERG_CATALOG_HIVE;\n+          break;\n+        case ICEBERG_CATALOG_TYPE_HADOOP:\n+          catalogImpl = ICEBERG_CATALOG_HADOOP;\n+          break;\n+        default:\n+          throw new UnsupportedOperationException(\"Unknown catalog type: \" + catalogType);\n+      }\n+    }\n+    return CatalogUtil.loadCatalog(catalogImpl, name, options, conf);\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzQ0NTA4NQ=="}, "originalCommit": {"oid": "25b2f918c96611af21de42c5a47cf8fa3b824ae2"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0MjA4MDQ1OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/apache/iceberg/CatalogUtil.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxODo0NzoxOFrOIKFZiQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQyMTo1NDo1MFrOIKKRsA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzQ0NTEyOQ==", "bodyText": "No need to start methods with a newline.", "url": "https://github.com/apache/iceberg/pull/1875#discussion_r547445129", "createdAt": "2020-12-22T18:47:18Z", "author": {"login": "rdblue"}, "path": "core/src/main/java/org/apache/iceberg/CatalogUtil.java", "diffHunk": "@@ -169,6 +175,26 @@ public static Catalog loadCatalog(\n     return catalog;\n   }\n \n+  public static Catalog buildIcebergCatalog(String name, Map<String, String> options, Configuration conf) {\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "25b2f918c96611af21de42c5a47cf8fa3b824ae2"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzUyNTA0MA==", "bodyText": "done", "url": "https://github.com/apache/iceberg/pull/1875#discussion_r547525040", "createdAt": "2020-12-22T21:54:50Z", "author": {"login": "rymurr"}, "path": "core/src/main/java/org/apache/iceberg/CatalogUtil.java", "diffHunk": "@@ -169,6 +175,26 @@ public static Catalog loadCatalog(\n     return catalog;\n   }\n \n+  public static Catalog buildIcebergCatalog(String name, Map<String, String> options, Configuration conf) {\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzQ0NTEyOQ=="}, "originalCommit": {"oid": "25b2f918c96611af21de42c5a47cf8fa3b824ae2"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0MjA4Njg0OnYy", "diffSide": "RIGHT", "path": "spark/src/main/java/org/apache/iceberg/spark/SparkUtil.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxODo0OToyOFrOIKFdcA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQyMTo1NDo1M1rOIKKRvg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzQ0NjEyOA==", "bodyText": "Rather than try/catch, I think this should check whether catalog.apply returns null. If the result is null, then the catalog does not exist and it should not be set in the pair (set null). Then the caller can fill in the default catalog.", "url": "https://github.com/apache/iceberg/pull/1875#discussion_r547446128", "createdAt": "2020-12-22T18:49:28Z", "author": {"login": "rdblue"}, "path": "spark/src/main/java/org/apache/iceberg/spark/SparkUtil.java", "diffHunk": "@@ -61,4 +65,40 @@ public static void validatePartitionTransforms(PartitionSpec spec) {\n           String.format(\"Cannot write using unsupported transforms: %s\", unsupported));\n     }\n   }\n+\n+  /**\n+   * A modified version of Spark's LookupCatalog.CatalogAndIdentifier.unapply\n+   * Attempts to find the catalog and identifier a multipart identifier represents\n+   * @param nameParts Multipart identifier representing a table\n+   * @return The CatalogPlugin and Identifier for the table\n+   */\n+  public static <C, T> Pair<C, T> catalogAndIdentifier(List<String> nameParts,\n+                                                       Function<String, C> catalog,\n+                                                       IdentiferFunction<T> identifer,\n+                                                       String[] currentNamespace) {\n+    Preconditions.checkArgument(!nameParts.isEmpty(),\n+        \"Cannot determine catalog and Identifier from empty name parts\");\n+\n+    int lastElementIndex = nameParts.size() - 1;\n+    String name = nameParts.get(lastElementIndex);\n+\n+    if (nameParts.size() == 1) {\n+      // Only a single element, use current catalog and namespace\n+      return Pair.of(catalog.apply(null), identifer.of(currentNamespace, name));\n+    } else {\n+      try {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "25b2f918c96611af21de42c5a47cf8fa3b824ae2"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzUyNTA1NA==", "bodyText": "done", "url": "https://github.com/apache/iceberg/pull/1875#discussion_r547525054", "createdAt": "2020-12-22T21:54:53Z", "author": {"login": "rymurr"}, "path": "spark/src/main/java/org/apache/iceberg/spark/SparkUtil.java", "diffHunk": "@@ -61,4 +65,40 @@ public static void validatePartitionTransforms(PartitionSpec spec) {\n           String.format(\"Cannot write using unsupported transforms: %s\", unsupported));\n     }\n   }\n+\n+  /**\n+   * A modified version of Spark's LookupCatalog.CatalogAndIdentifier.unapply\n+   * Attempts to find the catalog and identifier a multipart identifier represents\n+   * @param nameParts Multipart identifier representing a table\n+   * @return The CatalogPlugin and Identifier for the table\n+   */\n+  public static <C, T> Pair<C, T> catalogAndIdentifier(List<String> nameParts,\n+                                                       Function<String, C> catalog,\n+                                                       IdentiferFunction<T> identifer,\n+                                                       String[] currentNamespace) {\n+    Preconditions.checkArgument(!nameParts.isEmpty(),\n+        \"Cannot determine catalog and Identifier from empty name parts\");\n+\n+    int lastElementIndex = nameParts.size() - 1;\n+    String name = nameParts.get(lastElementIndex);\n+\n+    if (nameParts.size() == 1) {\n+      // Only a single element, use current catalog and namespace\n+      return Pair.of(catalog.apply(null), identifer.of(currentNamespace, name));\n+    } else {\n+      try {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzQ0NjEyOA=="}, "originalCommit": {"oid": "25b2f918c96611af21de42c5a47cf8fa3b824ae2"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0MjA5NzM3OnYy", "diffSide": "RIGHT", "path": "spark/src/main/java/org/apache/iceberg/spark/SparkUtil.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxODo1MzowN1rOIKFj3g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQyMTo1NDo1OVrOIKKR4Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzQ0Nzc3NA==", "bodyText": "I think that the logic here should be identical to the Spark 3 case, but with the catalog load function and identifier construction replaced. That doesn't appear to be what is done because catalog.apply is used when the catalog is not set (1 part name).", "url": "https://github.com/apache/iceberg/pull/1875#discussion_r547447774", "createdAt": "2020-12-22T18:53:07Z", "author": {"login": "rdblue"}, "path": "spark/src/main/java/org/apache/iceberg/spark/SparkUtil.java", "diffHunk": "@@ -61,4 +65,40 @@ public static void validatePartitionTransforms(PartitionSpec spec) {\n           String.format(\"Cannot write using unsupported transforms: %s\", unsupported));\n     }\n   }\n+\n+  /**\n+   * A modified version of Spark's LookupCatalog.CatalogAndIdentifier.unapply\n+   * Attempts to find the catalog and identifier a multipart identifier represents\n+   * @param nameParts Multipart identifier representing a table\n+   * @return The CatalogPlugin and Identifier for the table\n+   */\n+  public static <C, T> Pair<C, T> catalogAndIdentifier(List<String> nameParts,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "25b2f918c96611af21de42c5a47cf8fa3b824ae2"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzUyNTA4OQ==", "bodyText": "This was originally meant to return the default catalog if the catalog function got a null. Have now adjusted to add a default catalog parameter and have modified Spark3Util to use this function also. Ensuring they have the same behaviour.", "url": "https://github.com/apache/iceberg/pull/1875#discussion_r547525089", "createdAt": "2020-12-22T21:54:59Z", "author": {"login": "rymurr"}, "path": "spark/src/main/java/org/apache/iceberg/spark/SparkUtil.java", "diffHunk": "@@ -61,4 +65,40 @@ public static void validatePartitionTransforms(PartitionSpec spec) {\n           String.format(\"Cannot write using unsupported transforms: %s\", unsupported));\n     }\n   }\n+\n+  /**\n+   * A modified version of Spark's LookupCatalog.CatalogAndIdentifier.unapply\n+   * Attempts to find the catalog and identifier a multipart identifier represents\n+   * @param nameParts Multipart identifier representing a table\n+   * @return The CatalogPlugin and Identifier for the table\n+   */\n+  public static <C, T> Pair<C, T> catalogAndIdentifier(List<String> nameParts,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzQ0Nzc3NA=="}, "originalCommit": {"oid": "25b2f918c96611af21de42c5a47cf8fa3b824ae2"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0MjEwNDg2OnYy", "diffSide": "RIGHT", "path": "spark2/src/test/java/org/apache/iceberg/spark/source/TestCustomCatalog.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxODo1NTo0MFrOIKFoMQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQyMjozNzo1OVrOIKLPCw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzQ0ODg4MQ==", "bodyText": "Can you use the variant of this that checks the exception message?", "url": "https://github.com/apache/iceberg/pull/1875#discussion_r547448881", "createdAt": "2020-12-22T18:55:40Z", "author": {"login": "rdblue"}, "path": "spark2/src/test/java/org/apache/iceberg/spark/source/TestCustomCatalog.java", "diffHunk": "@@ -0,0 +1,140 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.spark.source;\n+\n+import java.io.File;\n+import java.util.List;\n+import org.apache.iceberg.AssertHelpers;\n+import org.apache.iceberg.CatalogProperties;\n+import org.apache.iceberg.PartitionSpec;\n+import org.apache.iceberg.Schema;\n+import org.apache.iceberg.catalog.TableIdentifier;\n+import org.apache.iceberg.hadoop.HadoopTables;\n+import org.apache.iceberg.relocated.com.google.common.collect.Lists;\n+import org.apache.iceberg.types.Types;\n+import org.apache.spark.SparkConf;\n+import org.apache.spark.sql.Dataset;\n+import org.apache.spark.sql.Encoders;\n+import org.apache.spark.sql.Row;\n+import org.apache.spark.sql.SparkSession;\n+import org.junit.After;\n+import org.junit.AfterClass;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.TemporaryFolder;\n+\n+import static org.apache.iceberg.types.Types.NestedField.optional;\n+\n+public class TestCustomCatalog {\n+  private static final String CATALOG_IMPL = String.format(\"%s.%s.%s\", CustomCatalogs.ICEBERG_CATALOG_PREFIX,\n+      CustomCatalogs.ICEBERG_DEFAULT_CATALOG, CatalogProperties.CATALOG_IMPL);\n+  private static final String WAREHOUSE = String.format(\"%s.%s.%s\", CustomCatalogs.ICEBERG_CATALOG_PREFIX,\n+      CustomCatalogs.ICEBERG_DEFAULT_CATALOG, CatalogProperties.WAREHOUSE_LOCATION);\n+  private static final String URI_KEY = String.format(\"%s.%s.%s\", CustomCatalogs.ICEBERG_CATALOG_PREFIX,\n+      CustomCatalogs.ICEBERG_DEFAULT_CATALOG, CatalogProperties.HIVE_URI);\n+  private static final String URI_VAL = \"thrift://localhost:12345\"; // dummy uri\n+  private static final String CATALOG_VAL = \"org.apache.iceberg.spark.source.TestCatalog\";\n+  private static final TableIdentifier TABLE = TableIdentifier.of(\"default\", \"table\");\n+  private static final Schema SCHEMA = new Schema(\n+      optional(1, \"id\", Types.IntegerType.get()),\n+      optional(2, \"data\", Types.StringType.get())\n+  );\n+\n+  @Rule\n+  public TemporaryFolder temp = new TemporaryFolder();\n+\n+  File tableDir = null;\n+  String tableLocation = null;\n+  HadoopTables tables;\n+\n+  protected static SparkSession spark = null;\n+\n+  @BeforeClass\n+  public static void startMetastoreAndSpark() {\n+    spark = SparkSession.builder().master(\"local[2]\").getOrCreate();\n+  }\n+\n+  @AfterClass\n+  public static void stopMetastoreAndSpark() {\n+    spark.stop();\n+    spark = null;\n+  }\n+\n+  @Before\n+  public void setupTable() throws Exception {\n+    this.tables = new HadoopTables(spark.sessionState().newHadoopConf());\n+    this.tableDir = temp.newFolder();\n+    tableDir.delete(); // created by table create\n+    this.tableLocation = tableDir.toURI().toString();\n+    tables.create(SCHEMA, PartitionSpec.unpartitioned(), String.format(\"%s/%s\", tableLocation, TABLE.name()));\n+  }\n+\n+  @After\n+  public void removeTable() {\n+    SparkConf sparkConf = spark.sparkContext().conf();\n+    sparkConf.remove(CATALOG_IMPL);\n+    sparkConf.remove(WAREHOUSE);\n+    sparkConf.remove(URI_KEY);\n+    tables.dropTable(String.format(\"%s/%s\", tableLocation, TABLE.name()));\n+    tableDir.delete();\n+    CustomCatalogs.clearCache();\n+  }\n+\n+  @Test\n+  public void withSparkOptions() {\n+\n+    SparkConf sparkConf = spark.sparkContext().conf();\n+    sparkConf.set(CATALOG_IMPL, CATALOG_VAL);\n+    sparkConf.set(URI_KEY, URI_VAL);\n+\n+    List<SimpleRecord> expected = Lists.newArrayList(\n+        new SimpleRecord(1, \"a\"),\n+        new SimpleRecord(2, \"b\"),\n+        new SimpleRecord(3, \"c\")\n+    );\n+\n+    Dataset<Row> df = spark.createDataFrame(expected, SimpleRecord.class);\n+    AssertHelpers.assertThrows(\"We have not set all properties\", IllegalArgumentException.class, () ->", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "25b2f918c96611af21de42c5a47cf8fa3b824ae2"}, "originalPosition": 117}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzU0MDc0Nw==", "bodyText": "done", "url": "https://github.com/apache/iceberg/pull/1875#discussion_r547540747", "createdAt": "2020-12-22T22:37:59Z", "author": {"login": "rymurr"}, "path": "spark2/src/test/java/org/apache/iceberg/spark/source/TestCustomCatalog.java", "diffHunk": "@@ -0,0 +1,140 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.spark.source;\n+\n+import java.io.File;\n+import java.util.List;\n+import org.apache.iceberg.AssertHelpers;\n+import org.apache.iceberg.CatalogProperties;\n+import org.apache.iceberg.PartitionSpec;\n+import org.apache.iceberg.Schema;\n+import org.apache.iceberg.catalog.TableIdentifier;\n+import org.apache.iceberg.hadoop.HadoopTables;\n+import org.apache.iceberg.relocated.com.google.common.collect.Lists;\n+import org.apache.iceberg.types.Types;\n+import org.apache.spark.SparkConf;\n+import org.apache.spark.sql.Dataset;\n+import org.apache.spark.sql.Encoders;\n+import org.apache.spark.sql.Row;\n+import org.apache.spark.sql.SparkSession;\n+import org.junit.After;\n+import org.junit.AfterClass;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.TemporaryFolder;\n+\n+import static org.apache.iceberg.types.Types.NestedField.optional;\n+\n+public class TestCustomCatalog {\n+  private static final String CATALOG_IMPL = String.format(\"%s.%s.%s\", CustomCatalogs.ICEBERG_CATALOG_PREFIX,\n+      CustomCatalogs.ICEBERG_DEFAULT_CATALOG, CatalogProperties.CATALOG_IMPL);\n+  private static final String WAREHOUSE = String.format(\"%s.%s.%s\", CustomCatalogs.ICEBERG_CATALOG_PREFIX,\n+      CustomCatalogs.ICEBERG_DEFAULT_CATALOG, CatalogProperties.WAREHOUSE_LOCATION);\n+  private static final String URI_KEY = String.format(\"%s.%s.%s\", CustomCatalogs.ICEBERG_CATALOG_PREFIX,\n+      CustomCatalogs.ICEBERG_DEFAULT_CATALOG, CatalogProperties.HIVE_URI);\n+  private static final String URI_VAL = \"thrift://localhost:12345\"; // dummy uri\n+  private static final String CATALOG_VAL = \"org.apache.iceberg.spark.source.TestCatalog\";\n+  private static final TableIdentifier TABLE = TableIdentifier.of(\"default\", \"table\");\n+  private static final Schema SCHEMA = new Schema(\n+      optional(1, \"id\", Types.IntegerType.get()),\n+      optional(2, \"data\", Types.StringType.get())\n+  );\n+\n+  @Rule\n+  public TemporaryFolder temp = new TemporaryFolder();\n+\n+  File tableDir = null;\n+  String tableLocation = null;\n+  HadoopTables tables;\n+\n+  protected static SparkSession spark = null;\n+\n+  @BeforeClass\n+  public static void startMetastoreAndSpark() {\n+    spark = SparkSession.builder().master(\"local[2]\").getOrCreate();\n+  }\n+\n+  @AfterClass\n+  public static void stopMetastoreAndSpark() {\n+    spark.stop();\n+    spark = null;\n+  }\n+\n+  @Before\n+  public void setupTable() throws Exception {\n+    this.tables = new HadoopTables(spark.sessionState().newHadoopConf());\n+    this.tableDir = temp.newFolder();\n+    tableDir.delete(); // created by table create\n+    this.tableLocation = tableDir.toURI().toString();\n+    tables.create(SCHEMA, PartitionSpec.unpartitioned(), String.format(\"%s/%s\", tableLocation, TABLE.name()));\n+  }\n+\n+  @After\n+  public void removeTable() {\n+    SparkConf sparkConf = spark.sparkContext().conf();\n+    sparkConf.remove(CATALOG_IMPL);\n+    sparkConf.remove(WAREHOUSE);\n+    sparkConf.remove(URI_KEY);\n+    tables.dropTable(String.format(\"%s/%s\", tableLocation, TABLE.name()));\n+    tableDir.delete();\n+    CustomCatalogs.clearCache();\n+  }\n+\n+  @Test\n+  public void withSparkOptions() {\n+\n+    SparkConf sparkConf = spark.sparkContext().conf();\n+    sparkConf.set(CATALOG_IMPL, CATALOG_VAL);\n+    sparkConf.set(URI_KEY, URI_VAL);\n+\n+    List<SimpleRecord> expected = Lists.newArrayList(\n+        new SimpleRecord(1, \"a\"),\n+        new SimpleRecord(2, \"b\"),\n+        new SimpleRecord(3, \"c\")\n+    );\n+\n+    Dataset<Row> df = spark.createDataFrame(expected, SimpleRecord.class);\n+    AssertHelpers.assertThrows(\"We have not set all properties\", IllegalArgumentException.class, () ->", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzQ0ODg4MQ=="}, "originalCommit": {"oid": "25b2f918c96611af21de42c5a47cf8fa3b824ae2"}, "originalPosition": 117}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0MjExMDU2OnYy", "diffSide": "RIGHT", "path": "spark3/src/main/java/org/apache/iceberg/spark/SparkCatalog.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxODo1NzoyMVrOIKFreA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQyMTo1NTowN1rOIKKSFw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzQ0OTcyMA==", "bodyText": "This makes config properties case sensitive. Should we convert to a Java case insensitive map?", "url": "https://github.com/apache/iceberg/pull/1875#discussion_r547449720", "createdAt": "2020-12-22T18:57:21Z", "author": {"login": "rdblue"}, "path": "spark3/src/main/java/org/apache/iceberg/spark/SparkCatalog.java", "diffHunk": "@@ -101,27 +94,7 @@\n    */\n   protected Catalog buildIcebergCatalog(String name, CaseInsensitiveStringMap options) {\n     Configuration conf = SparkSession.active().sessionState().newHadoopConf();\n-\n-    String catalogImpl = options.get(CatalogProperties.CATALOG_IMPL);\n-    if (catalogImpl != null) {\n-      return CatalogUtil.loadCatalog(catalogImpl, name, options, conf);\n-    }\n-\n-    String catalogType = options.getOrDefault(ICEBERG_CATALOG_TYPE, ICEBERG_CATALOG_TYPE_HIVE);\n-    switch (catalogType.toLowerCase(Locale.ENGLISH)) {\n-      case ICEBERG_CATALOG_TYPE_HIVE:\n-        int clientPoolSize = options.getInt(CatalogProperties.HIVE_CLIENT_POOL_SIZE,\n-            CatalogProperties.HIVE_CLIENT_POOL_SIZE_DEFAULT);\n-        String uri = options.get(CatalogProperties.HIVE_URI);\n-        return new HiveCatalog(name, uri, clientPoolSize, conf);\n-\n-      case ICEBERG_CATALOG_TYPE_HADOOP:\n-        String warehouseLocation = options.get(CatalogProperties.WAREHOUSE_LOCATION);\n-        return new HadoopCatalog(name, conf, warehouseLocation, options.asCaseSensitiveMap());\n-\n-      default:\n-        throw new UnsupportedOperationException(\"Unknown catalog type: \" + catalogType);\n-    }\n+    return CatalogUtil.buildIcebergCatalog(name, options.asCaseSensitiveMap(), conf);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "25b2f918c96611af21de42c5a47cf8fa3b824ae2"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzUyNTE0Mw==", "bodyText": "good catch, fixed", "url": "https://github.com/apache/iceberg/pull/1875#discussion_r547525143", "createdAt": "2020-12-22T21:55:07Z", "author": {"login": "rymurr"}, "path": "spark3/src/main/java/org/apache/iceberg/spark/SparkCatalog.java", "diffHunk": "@@ -101,27 +94,7 @@\n    */\n   protected Catalog buildIcebergCatalog(String name, CaseInsensitiveStringMap options) {\n     Configuration conf = SparkSession.active().sessionState().newHadoopConf();\n-\n-    String catalogImpl = options.get(CatalogProperties.CATALOG_IMPL);\n-    if (catalogImpl != null) {\n-      return CatalogUtil.loadCatalog(catalogImpl, name, options, conf);\n-    }\n-\n-    String catalogType = options.getOrDefault(ICEBERG_CATALOG_TYPE, ICEBERG_CATALOG_TYPE_HIVE);\n-    switch (catalogType.toLowerCase(Locale.ENGLISH)) {\n-      case ICEBERG_CATALOG_TYPE_HIVE:\n-        int clientPoolSize = options.getInt(CatalogProperties.HIVE_CLIENT_POOL_SIZE,\n-            CatalogProperties.HIVE_CLIENT_POOL_SIZE_DEFAULT);\n-        String uri = options.get(CatalogProperties.HIVE_URI);\n-        return new HiveCatalog(name, uri, clientPoolSize, conf);\n-\n-      case ICEBERG_CATALOG_TYPE_HADOOP:\n-        String warehouseLocation = options.get(CatalogProperties.WAREHOUSE_LOCATION);\n-        return new HadoopCatalog(name, conf, warehouseLocation, options.asCaseSensitiveMap());\n-\n-      default:\n-        throw new UnsupportedOperationException(\"Unknown catalog type: \" + catalogType);\n-    }\n+    return CatalogUtil.buildIcebergCatalog(name, options.asCaseSensitiveMap(), conf);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzQ0OTcyMA=="}, "originalCommit": {"oid": "25b2f918c96611af21de42c5a47cf8fa3b824ae2"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0Mjc0MTQ0OnYy", "diffSide": "RIGHT", "path": "spark/src/main/java/org/apache/iceberg/spark/SparkUtil.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQyMjo1MjoxNFrOIKLgQg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOFQyMjo1Njo0M1rOIMDhkw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzU0NTE1NA==", "bodyText": "Current catalog? I think it would be current catalog and current namespace.", "url": "https://github.com/apache/iceberg/pull/1875#discussion_r547545154", "createdAt": "2020-12-22T22:52:14Z", "author": {"login": "rdblue"}, "path": "spark/src/main/java/org/apache/iceberg/spark/SparkUtil.java", "diffHunk": "@@ -61,4 +65,42 @@ public static void validatePartitionTransforms(PartitionSpec spec) {\n           String.format(\"Cannot write using unsupported transforms: %s\", unsupported));\n     }\n   }\n+\n+  /**\n+   * A modified version of Spark's LookupCatalog.CatalogAndIdentifier.unapply\n+   * Attempts to find the catalog and identifier a multipart identifier represents\n+   * @param nameParts Multipart identifier representing a table\n+   * @return The CatalogPlugin and Identifier for the table\n+   */\n+  public static <C, T> Pair<C, T> catalogAndIdentifier(List<String> nameParts,\n+                                                       Function<String, C> catalogProvider,\n+                                                       IdentiferFunction<T> identiferProvider,\n+                                                       C defaultCatalog,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a92b06cf32a5583cea9e8228d2a1a56fe35d6352"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Nzk5MjUzMg==", "bodyText": "It is the default catalog in Spark3Util on master. Is that wrong? current catalog seems more appropriate to me...", "url": "https://github.com/apache/iceberg/pull/1875#discussion_r547992532", "createdAt": "2020-12-23T14:45:38Z", "author": {"login": "rymurr"}, "path": "spark/src/main/java/org/apache/iceberg/spark/SparkUtil.java", "diffHunk": "@@ -61,4 +65,42 @@ public static void validatePartitionTransforms(PartitionSpec spec) {\n           String.format(\"Cannot write using unsupported transforms: %s\", unsupported));\n     }\n   }\n+\n+  /**\n+   * A modified version of Spark's LookupCatalog.CatalogAndIdentifier.unapply\n+   * Attempts to find the catalog and identifier a multipart identifier represents\n+   * @param nameParts Multipart identifier representing a table\n+   * @return The CatalogPlugin and Identifier for the table\n+   */\n+  public static <C, T> Pair<C, T> catalogAndIdentifier(List<String> nameParts,\n+                                                       Function<String, C> catalogProvider,\n+                                                       IdentiferFunction<T> identiferProvider,\n+                                                       C defaultCatalog,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzU0NTE1NA=="}, "originalCommit": {"oid": "a92b06cf32a5583cea9e8228d2a1a56fe35d6352"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTUxMTU3MQ==", "bodyText": "I think it's okay. The logic is correct.", "url": "https://github.com/apache/iceberg/pull/1875#discussion_r549511571", "createdAt": "2020-12-28T22:56:43Z", "author": {"login": "rdblue"}, "path": "spark/src/main/java/org/apache/iceberg/spark/SparkUtil.java", "diffHunk": "@@ -61,4 +65,42 @@ public static void validatePartitionTransforms(PartitionSpec spec) {\n           String.format(\"Cannot write using unsupported transforms: %s\", unsupported));\n     }\n   }\n+\n+  /**\n+   * A modified version of Spark's LookupCatalog.CatalogAndIdentifier.unapply\n+   * Attempts to find the catalog and identifier a multipart identifier represents\n+   * @param nameParts Multipart identifier representing a table\n+   * @return The CatalogPlugin and Identifier for the table\n+   */\n+  public static <C, T> Pair<C, T> catalogAndIdentifier(List<String> nameParts,\n+                                                       Function<String, C> catalogProvider,\n+                                                       IdentiferFunction<T> identiferProvider,\n+                                                       C defaultCatalog,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzU0NTE1NA=="}, "originalCommit": {"oid": "a92b06cf32a5583cea9e8228d2a1a56fe35d6352"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0Mjc0MzUyOnYy", "diffSide": "RIGHT", "path": "spark/src/main/java/org/apache/iceberg/spark/SparkUtil.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQyMjo1MzoyM1rOIKLhjQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QxNDo0NTo0NFrOIKmz9w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzU0NTQ4NQ==", "bodyText": "\"name parts\" is an internal thing. What about dropping \"parts\" and just referring to it as \"name\"?\nAlso, no need to capitalize identifier.", "url": "https://github.com/apache/iceberg/pull/1875#discussion_r547545485", "createdAt": "2020-12-22T22:53:23Z", "author": {"login": "rdblue"}, "path": "spark/src/main/java/org/apache/iceberg/spark/SparkUtil.java", "diffHunk": "@@ -61,4 +65,42 @@ public static void validatePartitionTransforms(PartitionSpec spec) {\n           String.format(\"Cannot write using unsupported transforms: %s\", unsupported));\n     }\n   }\n+\n+  /**\n+   * A modified version of Spark's LookupCatalog.CatalogAndIdentifier.unapply\n+   * Attempts to find the catalog and identifier a multipart identifier represents\n+   * @param nameParts Multipart identifier representing a table\n+   * @return The CatalogPlugin and Identifier for the table\n+   */\n+  public static <C, T> Pair<C, T> catalogAndIdentifier(List<String> nameParts,\n+                                                       Function<String, C> catalogProvider,\n+                                                       IdentiferFunction<T> identiferProvider,\n+                                                       C defaultCatalog,\n+                                                       String[] currentNamespace) {\n+    Preconditions.checkArgument(!nameParts.isEmpty(),\n+        \"Cannot determine catalog and Identifier from empty name parts\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a92b06cf32a5583cea9e8228d2a1a56fe35d6352"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Nzk5MjU2Nw==", "bodyText": "agreed, done.", "url": "https://github.com/apache/iceberg/pull/1875#discussion_r547992567", "createdAt": "2020-12-23T14:45:44Z", "author": {"login": "rymurr"}, "path": "spark/src/main/java/org/apache/iceberg/spark/SparkUtil.java", "diffHunk": "@@ -61,4 +65,42 @@ public static void validatePartitionTransforms(PartitionSpec spec) {\n           String.format(\"Cannot write using unsupported transforms: %s\", unsupported));\n     }\n   }\n+\n+  /**\n+   * A modified version of Spark's LookupCatalog.CatalogAndIdentifier.unapply\n+   * Attempts to find the catalog and identifier a multipart identifier represents\n+   * @param nameParts Multipart identifier representing a table\n+   * @return The CatalogPlugin and Identifier for the table\n+   */\n+  public static <C, T> Pair<C, T> catalogAndIdentifier(List<String> nameParts,\n+                                                       Function<String, C> catalogProvider,\n+                                                       IdentiferFunction<T> identiferProvider,\n+                                                       C defaultCatalog,\n+                                                       String[] currentNamespace) {\n+    Preconditions.checkArgument(!nameParts.isEmpty(),\n+        \"Cannot determine catalog and Identifier from empty name parts\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzU0NTQ4NQ=="}, "originalCommit": {"oid": "a92b06cf32a5583cea9e8228d2a1a56fe35d6352"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0Mjc0NjgzOnYy", "diffSide": "RIGHT", "path": "spark/src/main/java/org/apache/iceberg/spark/SparkUtil.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQyMjo1NDo0N1rOIKLjWw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOFQyMjo0NToyMlrOIMDY7g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzU0NTk0Nw==", "bodyText": "Does this need subList if it is returning the entire list?", "url": "https://github.com/apache/iceberg/pull/1875#discussion_r547545947", "createdAt": "2020-12-22T22:54:47Z", "author": {"login": "rdblue"}, "path": "spark/src/main/java/org/apache/iceberg/spark/SparkUtil.java", "diffHunk": "@@ -61,4 +65,42 @@ public static void validatePartitionTransforms(PartitionSpec spec) {\n           String.format(\"Cannot write using unsupported transforms: %s\", unsupported));\n     }\n   }\n+\n+  /**\n+   * A modified version of Spark's LookupCatalog.CatalogAndIdentifier.unapply\n+   * Attempts to find the catalog and identifier a multipart identifier represents\n+   * @param nameParts Multipart identifier representing a table\n+   * @return The CatalogPlugin and Identifier for the table\n+   */\n+  public static <C, T> Pair<C, T> catalogAndIdentifier(List<String> nameParts,\n+                                                       Function<String, C> catalogProvider,\n+                                                       IdentiferFunction<T> identiferProvider,\n+                                                       C defaultCatalog,\n+                                                       String[] currentNamespace) {\n+    Preconditions.checkArgument(!nameParts.isEmpty(),\n+        \"Cannot determine catalog and Identifier from empty name parts\");\n+\n+    int lastElementIndex = nameParts.size() - 1;\n+    String name = nameParts.get(lastElementIndex);\n+\n+    if (nameParts.size() == 1) {\n+      // Only a single element, use current catalog and namespace\n+      return Pair.of(defaultCatalog, identiferProvider.of(currentNamespace, name));\n+    } else {\n+      C catalog = catalogProvider.apply(nameParts.get(0));\n+      if (catalog == null) {\n+        // The first element was not a valid catalog, treat it like part of the namespace\n+        String[] namespace =  nameParts.subList(0, lastElementIndex).toArray(new String[0]);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a92b06cf32a5583cea9e8228d2a1a56fe35d6352"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Nzk5MzUyMA==", "bodyText": "Good point, just copied from Spark3Util but it doesn't make much sense.", "url": "https://github.com/apache/iceberg/pull/1875#discussion_r547993520", "createdAt": "2020-12-23T14:47:48Z", "author": {"login": "rymurr"}, "path": "spark/src/main/java/org/apache/iceberg/spark/SparkUtil.java", "diffHunk": "@@ -61,4 +65,42 @@ public static void validatePartitionTransforms(PartitionSpec spec) {\n           String.format(\"Cannot write using unsupported transforms: %s\", unsupported));\n     }\n   }\n+\n+  /**\n+   * A modified version of Spark's LookupCatalog.CatalogAndIdentifier.unapply\n+   * Attempts to find the catalog and identifier a multipart identifier represents\n+   * @param nameParts Multipart identifier representing a table\n+   * @return The CatalogPlugin and Identifier for the table\n+   */\n+  public static <C, T> Pair<C, T> catalogAndIdentifier(List<String> nameParts,\n+                                                       Function<String, C> catalogProvider,\n+                                                       IdentiferFunction<T> identiferProvider,\n+                                                       C defaultCatalog,\n+                                                       String[] currentNamespace) {\n+    Preconditions.checkArgument(!nameParts.isEmpty(),\n+        \"Cannot determine catalog and Identifier from empty name parts\");\n+\n+    int lastElementIndex = nameParts.size() - 1;\n+    String name = nameParts.get(lastElementIndex);\n+\n+    if (nameParts.size() == 1) {\n+      // Only a single element, use current catalog and namespace\n+      return Pair.of(defaultCatalog, identiferProvider.of(currentNamespace, name));\n+    } else {\n+      C catalog = catalogProvider.apply(nameParts.get(0));\n+      if (catalog == null) {\n+        // The first element was not a valid catalog, treat it like part of the namespace\n+        String[] namespace =  nameParts.subList(0, lastElementIndex).toArray(new String[0]);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzU0NTk0Nw=="}, "originalCommit": {"oid": "a92b06cf32a5583cea9e8228d2a1a56fe35d6352"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODA1MTk2MQ==", "bodyText": "actually, scratch that. It does make sense. It takes [a,b,c] as the namespace and d as the name for [a,b,c,d]. So I have left it in.\nThe other one returns a as the catalog [b,c] as the namespace and d as the table.", "url": "https://github.com/apache/iceberg/pull/1875#discussion_r548051961", "createdAt": "2020-12-23T16:54:34Z", "author": {"login": "rymurr"}, "path": "spark/src/main/java/org/apache/iceberg/spark/SparkUtil.java", "diffHunk": "@@ -61,4 +65,42 @@ public static void validatePartitionTransforms(PartitionSpec spec) {\n           String.format(\"Cannot write using unsupported transforms: %s\", unsupported));\n     }\n   }\n+\n+  /**\n+   * A modified version of Spark's LookupCatalog.CatalogAndIdentifier.unapply\n+   * Attempts to find the catalog and identifier a multipart identifier represents\n+   * @param nameParts Multipart identifier representing a table\n+   * @return The CatalogPlugin and Identifier for the table\n+   */\n+  public static <C, T> Pair<C, T> catalogAndIdentifier(List<String> nameParts,\n+                                                       Function<String, C> catalogProvider,\n+                                                       IdentiferFunction<T> identiferProvider,\n+                                                       C defaultCatalog,\n+                                                       String[] currentNamespace) {\n+    Preconditions.checkArgument(!nameParts.isEmpty(),\n+        \"Cannot determine catalog and Identifier from empty name parts\");\n+\n+    int lastElementIndex = nameParts.size() - 1;\n+    String name = nameParts.get(lastElementIndex);\n+\n+    if (nameParts.size() == 1) {\n+      // Only a single element, use current catalog and namespace\n+      return Pair.of(defaultCatalog, identiferProvider.of(currentNamespace, name));\n+    } else {\n+      C catalog = catalogProvider.apply(nameParts.get(0));\n+      if (catalog == null) {\n+        // The first element was not a valid catalog, treat it like part of the namespace\n+        String[] namespace =  nameParts.subList(0, lastElementIndex).toArray(new String[0]);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzU0NTk0Nw=="}, "originalCommit": {"oid": "a92b06cf32a5583cea9e8228d2a1a56fe35d6352"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTUwOTM1OA==", "bodyText": "Right, toIndex is exclusive, so this removes the last element that is passed as the name. Thanks!", "url": "https://github.com/apache/iceberg/pull/1875#discussion_r549509358", "createdAt": "2020-12-28T22:45:22Z", "author": {"login": "rdblue"}, "path": "spark/src/main/java/org/apache/iceberg/spark/SparkUtil.java", "diffHunk": "@@ -61,4 +65,42 @@ public static void validatePartitionTransforms(PartitionSpec spec) {\n           String.format(\"Cannot write using unsupported transforms: %s\", unsupported));\n     }\n   }\n+\n+  /**\n+   * A modified version of Spark's LookupCatalog.CatalogAndIdentifier.unapply\n+   * Attempts to find the catalog and identifier a multipart identifier represents\n+   * @param nameParts Multipart identifier representing a table\n+   * @return The CatalogPlugin and Identifier for the table\n+   */\n+  public static <C, T> Pair<C, T> catalogAndIdentifier(List<String> nameParts,\n+                                                       Function<String, C> catalogProvider,\n+                                                       IdentiferFunction<T> identiferProvider,\n+                                                       C defaultCatalog,\n+                                                       String[] currentNamespace) {\n+    Preconditions.checkArgument(!nameParts.isEmpty(),\n+        \"Cannot determine catalog and Identifier from empty name parts\");\n+\n+    int lastElementIndex = nameParts.size() - 1;\n+    String name = nameParts.get(lastElementIndex);\n+\n+    if (nameParts.size() == 1) {\n+      // Only a single element, use current catalog and namespace\n+      return Pair.of(defaultCatalog, identiferProvider.of(currentNamespace, name));\n+    } else {\n+      C catalog = catalogProvider.apply(nameParts.get(0));\n+      if (catalog == null) {\n+        // The first element was not a valid catalog, treat it like part of the namespace\n+        String[] namespace =  nameParts.subList(0, lastElementIndex).toArray(new String[0]);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzU0NTk0Nw=="}, "originalCommit": {"oid": "a92b06cf32a5583cea9e8228d2a1a56fe35d6352"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0Mjc0OTAwOnYy", "diffSide": "RIGHT", "path": "spark/src/main/java/org/apache/iceberg/spark/SparkUtil.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQyMjo1NTo0N1rOIKLkpA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QxNDo0OTozNVrOIKm7Sg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzU0NjI3Ng==", "bodyText": "This could be BiFunction<String[], String, T>. Then you wouldn't need a separate interface for it.", "url": "https://github.com/apache/iceberg/pull/1875#discussion_r547546276", "createdAt": "2020-12-22T22:55:47Z", "author": {"login": "rdblue"}, "path": "spark/src/main/java/org/apache/iceberg/spark/SparkUtil.java", "diffHunk": "@@ -61,4 +65,42 @@ public static void validatePartitionTransforms(PartitionSpec spec) {\n           String.format(\"Cannot write using unsupported transforms: %s\", unsupported));\n     }\n   }\n+\n+  /**\n+   * A modified version of Spark's LookupCatalog.CatalogAndIdentifier.unapply\n+   * Attempts to find the catalog and identifier a multipart identifier represents\n+   * @param nameParts Multipart identifier representing a table\n+   * @return The CatalogPlugin and Identifier for the table\n+   */\n+  public static <C, T> Pair<C, T> catalogAndIdentifier(List<String> nameParts,\n+                                                       Function<String, C> catalogProvider,\n+                                                       IdentiferFunction<T> identiferProvider,\n+                                                       C defaultCatalog,\n+                                                       String[] currentNamespace) {\n+    Preconditions.checkArgument(!nameParts.isEmpty(),\n+        \"Cannot determine catalog and Identifier from empty name parts\");\n+\n+    int lastElementIndex = nameParts.size() - 1;\n+    String name = nameParts.get(lastElementIndex);\n+\n+    if (nameParts.size() == 1) {\n+      // Only a single element, use current catalog and namespace\n+      return Pair.of(defaultCatalog, identiferProvider.of(currentNamespace, name));\n+    } else {\n+      C catalog = catalogProvider.apply(nameParts.get(0));\n+      if (catalog == null) {\n+        // The first element was not a valid catalog, treat it like part of the namespace\n+        String[] namespace =  nameParts.subList(0, lastElementIndex).toArray(new String[0]);\n+        return Pair.of(defaultCatalog, identiferProvider.of(namespace, name));\n+      } else {\n+        // Assume the first element is a valid catalog\n+        String[] namespace = nameParts.subList(1, lastElementIndex).toArray(new String[0]);\n+        return Pair.of(catalog, identiferProvider.of(namespace, name));\n+      }\n+    }\n+  }\n+\n+  public interface IdentiferFunction<T> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a92b06cf32a5583cea9e8228d2a1a56fe35d6352"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Nzk5NDQ0Mg==", "bodyText": "agreed, don't know why I couldn't find that before", "url": "https://github.com/apache/iceberg/pull/1875#discussion_r547994442", "createdAt": "2020-12-23T14:49:35Z", "author": {"login": "rymurr"}, "path": "spark/src/main/java/org/apache/iceberg/spark/SparkUtil.java", "diffHunk": "@@ -61,4 +65,42 @@ public static void validatePartitionTransforms(PartitionSpec spec) {\n           String.format(\"Cannot write using unsupported transforms: %s\", unsupported));\n     }\n   }\n+\n+  /**\n+   * A modified version of Spark's LookupCatalog.CatalogAndIdentifier.unapply\n+   * Attempts to find the catalog and identifier a multipart identifier represents\n+   * @param nameParts Multipart identifier representing a table\n+   * @return The CatalogPlugin and Identifier for the table\n+   */\n+  public static <C, T> Pair<C, T> catalogAndIdentifier(List<String> nameParts,\n+                                                       Function<String, C> catalogProvider,\n+                                                       IdentiferFunction<T> identiferProvider,\n+                                                       C defaultCatalog,\n+                                                       String[] currentNamespace) {\n+    Preconditions.checkArgument(!nameParts.isEmpty(),\n+        \"Cannot determine catalog and Identifier from empty name parts\");\n+\n+    int lastElementIndex = nameParts.size() - 1;\n+    String name = nameParts.get(lastElementIndex);\n+\n+    if (nameParts.size() == 1) {\n+      // Only a single element, use current catalog and namespace\n+      return Pair.of(defaultCatalog, identiferProvider.of(currentNamespace, name));\n+    } else {\n+      C catalog = catalogProvider.apply(nameParts.get(0));\n+      if (catalog == null) {\n+        // The first element was not a valid catalog, treat it like part of the namespace\n+        String[] namespace =  nameParts.subList(0, lastElementIndex).toArray(new String[0]);\n+        return Pair.of(defaultCatalog, identiferProvider.of(namespace, name));\n+      } else {\n+        // Assume the first element is a valid catalog\n+        String[] namespace = nameParts.subList(1, lastElementIndex).toArray(new String[0]);\n+        return Pair.of(catalog, identiferProvider.of(namespace, name));\n+      }\n+    }\n+  }\n+\n+  public interface IdentiferFunction<T> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzU0NjI3Ng=="}, "originalCommit": {"oid": "a92b06cf32a5583cea9e8228d2a1a56fe35d6352"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0Mjc1NTQ2OnYy", "diffSide": "RIGHT", "path": "spark2/src/main/java/org/apache/iceberg/spark/source/CustomCatalogs.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQyMjo1ODo1MVrOIKLoHQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOFQyMzowNjowMVrOIMDoRw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzU0NzE2NQ==", "bodyText": "When I suggested using SparkCatalog earlier, I didn't think about how it isn't defined for 2.4. Instead of this check, let's just check whether the catalog property is defined at all. As long as catalogName is non-null, it is a catalog for the purposes of this config. If the catalog doesn't have a valid type or implementation class then loading it will fail.\nAlso, it would be catalogImpl not name because name is the catalog name.", "url": "https://github.com/apache/iceberg/pull/1875#discussion_r547547165", "createdAt": "2020-12-22T22:58:51Z", "author": {"login": "rdblue"}, "path": "spark2/src/main/java/org/apache/iceberg/spark/source/CustomCatalogs.java", "diffHunk": "@@ -0,0 +1,108 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.spark.source;\n+\n+import com.github.benmanes.caffeine.cache.Cache;\n+import com.github.benmanes.caffeine.cache.Caffeine;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+import org.apache.hadoop.conf.Configuration;\n+import org.apache.iceberg.CatalogUtil;\n+import org.apache.iceberg.Table;\n+import org.apache.iceberg.catalog.Catalog;\n+import org.apache.iceberg.catalog.Namespace;\n+import org.apache.iceberg.catalog.TableIdentifier;\n+import org.apache.iceberg.relocated.com.google.common.annotations.VisibleForTesting;\n+import org.apache.iceberg.relocated.com.google.common.base.Splitter;\n+import org.apache.iceberg.spark.SparkUtil;\n+import org.apache.iceberg.util.Pair;\n+import org.apache.spark.SparkConf;\n+import org.apache.spark.sql.SparkSession;\n+\n+public final class CustomCatalogs {\n+  private static final Cache<Pair<SparkSession, String>, Catalog> CATALOG_CACHE = Caffeine.newBuilder()\n+      .softValues().build();\n+\n+  public static final String ICEBERG_DEFAULT_CATALOG = \"default_catalog\";\n+  public static final String ICEBERG_CATALOG_PREFIX = \"spark.sql.catalog\";\n+\n+  private CustomCatalogs() {\n+  }\n+\n+  /**\n+   * Build an Iceberg {@link Catalog} to be used by this Spark source adapter.\n+   *\n+   * <p>\n+   * The cache is to facilitate reuse of catalogs, especially if wrapped in CachingCatalog. For non-Hive catalogs all\n+   * custom parameters passed to the catalog are considered in the cache key. Hive catalogs only cache based on\n+   * the Metastore URIs as per previous behaviour.\n+   *\n+   *\n+   * @param spark Spark Session\n+   * @param name Catalog Name\n+   * @return an Iceberg catalog\n+   */\n+  public static Catalog buildIcebergCatalog(SparkSession spark, String name) {\n+    return CATALOG_CACHE.get(Pair.of(spark, name), CustomCatalogs::load);\n+  }\n+\n+  private static Catalog load(Pair<SparkSession, String> sparkAndName) {\n+    SparkSession spark = sparkAndName.first();\n+    String name = sparkAndName.second();\n+    SparkConf sparkConf = spark.sparkContext().getConf();\n+    Configuration conf = spark.sessionState().newHadoopConf();\n+\n+    String catalogPrefix = String.format(\"%s.%s\", ICEBERG_CATALOG_PREFIX, name);\n+    String catalogName = sparkConf.get(catalogPrefix, null);\n+    if (!name.equals(ICEBERG_DEFAULT_CATALOG) &&\n+        !org.apache.spark.sql.catalog.Catalog.class.getName().equals(catalogName)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a92b06cf32a5583cea9e8228d2a1a56fe35d6352"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Nzk5NTg3NQ==", "bodyText": "cool, changed to an existence check.\n\nAlso, it would be catalogImpl not name because name is the catalog name.\n\nNot sure what you mean wrt the catalogImpl comment?", "url": "https://github.com/apache/iceberg/pull/1875#discussion_r547995875", "createdAt": "2020-12-23T14:52:38Z", "author": {"login": "rymurr"}, "path": "spark2/src/main/java/org/apache/iceberg/spark/source/CustomCatalogs.java", "diffHunk": "@@ -0,0 +1,108 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.spark.source;\n+\n+import com.github.benmanes.caffeine.cache.Cache;\n+import com.github.benmanes.caffeine.cache.Caffeine;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+import org.apache.hadoop.conf.Configuration;\n+import org.apache.iceberg.CatalogUtil;\n+import org.apache.iceberg.Table;\n+import org.apache.iceberg.catalog.Catalog;\n+import org.apache.iceberg.catalog.Namespace;\n+import org.apache.iceberg.catalog.TableIdentifier;\n+import org.apache.iceberg.relocated.com.google.common.annotations.VisibleForTesting;\n+import org.apache.iceberg.relocated.com.google.common.base.Splitter;\n+import org.apache.iceberg.spark.SparkUtil;\n+import org.apache.iceberg.util.Pair;\n+import org.apache.spark.SparkConf;\n+import org.apache.spark.sql.SparkSession;\n+\n+public final class CustomCatalogs {\n+  private static final Cache<Pair<SparkSession, String>, Catalog> CATALOG_CACHE = Caffeine.newBuilder()\n+      .softValues().build();\n+\n+  public static final String ICEBERG_DEFAULT_CATALOG = \"default_catalog\";\n+  public static final String ICEBERG_CATALOG_PREFIX = \"spark.sql.catalog\";\n+\n+  private CustomCatalogs() {\n+  }\n+\n+  /**\n+   * Build an Iceberg {@link Catalog} to be used by this Spark source adapter.\n+   *\n+   * <p>\n+   * The cache is to facilitate reuse of catalogs, especially if wrapped in CachingCatalog. For non-Hive catalogs all\n+   * custom parameters passed to the catalog are considered in the cache key. Hive catalogs only cache based on\n+   * the Metastore URIs as per previous behaviour.\n+   *\n+   *\n+   * @param spark Spark Session\n+   * @param name Catalog Name\n+   * @return an Iceberg catalog\n+   */\n+  public static Catalog buildIcebergCatalog(SparkSession spark, String name) {\n+    return CATALOG_CACHE.get(Pair.of(spark, name), CustomCatalogs::load);\n+  }\n+\n+  private static Catalog load(Pair<SparkSession, String> sparkAndName) {\n+    SparkSession spark = sparkAndName.first();\n+    String name = sparkAndName.second();\n+    SparkConf sparkConf = spark.sparkContext().getConf();\n+    Configuration conf = spark.sessionState().newHadoopConf();\n+\n+    String catalogPrefix = String.format(\"%s.%s\", ICEBERG_CATALOG_PREFIX, name);\n+    String catalogName = sparkConf.get(catalogPrefix, null);\n+    if (!name.equals(ICEBERG_DEFAULT_CATALOG) &&\n+        !org.apache.spark.sql.catalog.Catalog.class.getName().equals(catalogName)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzU0NzE2NQ=="}, "originalCommit": {"oid": "a92b06cf32a5583cea9e8228d2a1a56fe35d6352"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTUwNzc0Nw==", "bodyText": "The variable name catalogName seems incorrect because this is the catalog implementation class in Spark. A better variable name would be catalogImpl.", "url": "https://github.com/apache/iceberg/pull/1875#discussion_r549507747", "createdAt": "2020-12-28T22:37:01Z", "author": {"login": "rdblue"}, "path": "spark2/src/main/java/org/apache/iceberg/spark/source/CustomCatalogs.java", "diffHunk": "@@ -0,0 +1,108 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.spark.source;\n+\n+import com.github.benmanes.caffeine.cache.Cache;\n+import com.github.benmanes.caffeine.cache.Caffeine;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+import org.apache.hadoop.conf.Configuration;\n+import org.apache.iceberg.CatalogUtil;\n+import org.apache.iceberg.Table;\n+import org.apache.iceberg.catalog.Catalog;\n+import org.apache.iceberg.catalog.Namespace;\n+import org.apache.iceberg.catalog.TableIdentifier;\n+import org.apache.iceberg.relocated.com.google.common.annotations.VisibleForTesting;\n+import org.apache.iceberg.relocated.com.google.common.base.Splitter;\n+import org.apache.iceberg.spark.SparkUtil;\n+import org.apache.iceberg.util.Pair;\n+import org.apache.spark.SparkConf;\n+import org.apache.spark.sql.SparkSession;\n+\n+public final class CustomCatalogs {\n+  private static final Cache<Pair<SparkSession, String>, Catalog> CATALOG_CACHE = Caffeine.newBuilder()\n+      .softValues().build();\n+\n+  public static final String ICEBERG_DEFAULT_CATALOG = \"default_catalog\";\n+  public static final String ICEBERG_CATALOG_PREFIX = \"spark.sql.catalog\";\n+\n+  private CustomCatalogs() {\n+  }\n+\n+  /**\n+   * Build an Iceberg {@link Catalog} to be used by this Spark source adapter.\n+   *\n+   * <p>\n+   * The cache is to facilitate reuse of catalogs, especially if wrapped in CachingCatalog. For non-Hive catalogs all\n+   * custom parameters passed to the catalog are considered in the cache key. Hive catalogs only cache based on\n+   * the Metastore URIs as per previous behaviour.\n+   *\n+   *\n+   * @param spark Spark Session\n+   * @param name Catalog Name\n+   * @return an Iceberg catalog\n+   */\n+  public static Catalog buildIcebergCatalog(SparkSession spark, String name) {\n+    return CATALOG_CACHE.get(Pair.of(spark, name), CustomCatalogs::load);\n+  }\n+\n+  private static Catalog load(Pair<SparkSession, String> sparkAndName) {\n+    SparkSession spark = sparkAndName.first();\n+    String name = sparkAndName.second();\n+    SparkConf sparkConf = spark.sparkContext().getConf();\n+    Configuration conf = spark.sessionState().newHadoopConf();\n+\n+    String catalogPrefix = String.format(\"%s.%s\", ICEBERG_CATALOG_PREFIX, name);\n+    String catalogName = sparkConf.get(catalogPrefix, null);\n+    if (!name.equals(ICEBERG_DEFAULT_CATALOG) &&\n+        !org.apache.spark.sql.catalog.Catalog.class.getName().equals(catalogName)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzU0NzE2NQ=="}, "originalCommit": {"oid": "a92b06cf32a5583cea9e8228d2a1a56fe35d6352"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTUxMzI4Nw==", "bodyText": "This is minor, so I'm merging without it. We can clean it up next time we touch this code.", "url": "https://github.com/apache/iceberg/pull/1875#discussion_r549513287", "createdAt": "2020-12-28T23:06:01Z", "author": {"login": "rdblue"}, "path": "spark2/src/main/java/org/apache/iceberg/spark/source/CustomCatalogs.java", "diffHunk": "@@ -0,0 +1,108 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.spark.source;\n+\n+import com.github.benmanes.caffeine.cache.Cache;\n+import com.github.benmanes.caffeine.cache.Caffeine;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+import org.apache.hadoop.conf.Configuration;\n+import org.apache.iceberg.CatalogUtil;\n+import org.apache.iceberg.Table;\n+import org.apache.iceberg.catalog.Catalog;\n+import org.apache.iceberg.catalog.Namespace;\n+import org.apache.iceberg.catalog.TableIdentifier;\n+import org.apache.iceberg.relocated.com.google.common.annotations.VisibleForTesting;\n+import org.apache.iceberg.relocated.com.google.common.base.Splitter;\n+import org.apache.iceberg.spark.SparkUtil;\n+import org.apache.iceberg.util.Pair;\n+import org.apache.spark.SparkConf;\n+import org.apache.spark.sql.SparkSession;\n+\n+public final class CustomCatalogs {\n+  private static final Cache<Pair<SparkSession, String>, Catalog> CATALOG_CACHE = Caffeine.newBuilder()\n+      .softValues().build();\n+\n+  public static final String ICEBERG_DEFAULT_CATALOG = \"default_catalog\";\n+  public static final String ICEBERG_CATALOG_PREFIX = \"spark.sql.catalog\";\n+\n+  private CustomCatalogs() {\n+  }\n+\n+  /**\n+   * Build an Iceberg {@link Catalog} to be used by this Spark source adapter.\n+   *\n+   * <p>\n+   * The cache is to facilitate reuse of catalogs, especially if wrapped in CachingCatalog. For non-Hive catalogs all\n+   * custom parameters passed to the catalog are considered in the cache key. Hive catalogs only cache based on\n+   * the Metastore URIs as per previous behaviour.\n+   *\n+   *\n+   * @param spark Spark Session\n+   * @param name Catalog Name\n+   * @return an Iceberg catalog\n+   */\n+  public static Catalog buildIcebergCatalog(SparkSession spark, String name) {\n+    return CATALOG_CACHE.get(Pair.of(spark, name), CustomCatalogs::load);\n+  }\n+\n+  private static Catalog load(Pair<SparkSession, String> sparkAndName) {\n+    SparkSession spark = sparkAndName.first();\n+    String name = sparkAndName.second();\n+    SparkConf sparkConf = spark.sparkContext().getConf();\n+    Configuration conf = spark.sessionState().newHadoopConf();\n+\n+    String catalogPrefix = String.format(\"%s.%s\", ICEBERG_CATALOG_PREFIX, name);\n+    String catalogName = sparkConf.get(catalogPrefix, null);\n+    if (!name.equals(ICEBERG_DEFAULT_CATALOG) &&\n+        !org.apache.spark.sql.catalog.Catalog.class.getName().equals(catalogName)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzU0NzE2NQ=="}, "originalCommit": {"oid": "a92b06cf32a5583cea9e8228d2a1a56fe35d6352"}, "originalPosition": 77}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0Mjc2MDgxOnYy", "diffSide": "RIGHT", "path": "spark2/src/test/java/org/apache/iceberg/spark/source/TestCustomCatalog.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQyMzowMjowNFrOIKLrPw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOFQxNzo0NjoxMlrOIL-inQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzU0Nzk2Nw==", "bodyText": "Can you also add a test for a catalog.db.table name?", "url": "https://github.com/apache/iceberg/pull/1875#discussion_r547547967", "createdAt": "2020-12-22T23:02:04Z", "author": {"login": "rdblue"}, "path": "spark2/src/test/java/org/apache/iceberg/spark/source/TestCustomCatalog.java", "diffHunk": "@@ -0,0 +1,146 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.spark.source;\n+\n+import java.io.File;\n+import java.util.List;\n+import org.apache.iceberg.AssertHelpers;\n+import org.apache.iceberg.CatalogProperties;\n+import org.apache.iceberg.PartitionSpec;\n+import org.apache.iceberg.Schema;\n+import org.apache.iceberg.catalog.TableIdentifier;\n+import org.apache.iceberg.hadoop.HadoopTables;\n+import org.apache.iceberg.relocated.com.google.common.collect.Lists;\n+import org.apache.iceberg.types.Types;\n+import org.apache.spark.SparkConf;\n+import org.apache.spark.sql.Dataset;\n+import org.apache.spark.sql.Encoders;\n+import org.apache.spark.sql.Row;\n+import org.apache.spark.sql.SparkSession;\n+import org.apache.spark.sql.catalog.Catalog;\n+import org.junit.After;\n+import org.junit.AfterClass;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.TemporaryFolder;\n+\n+import static org.apache.iceberg.types.Types.NestedField.optional;\n+\n+public class TestCustomCatalog {\n+  private static final String CATALOG_IMPL = String.format(\"%s.%s.%s\", CustomCatalogs.ICEBERG_CATALOG_PREFIX,\n+      CustomCatalogs.ICEBERG_DEFAULT_CATALOG, CatalogProperties.CATALOG_IMPL);\n+  private static final String WAREHOUSE = String.format(\"%s.%s.%s\", CustomCatalogs.ICEBERG_CATALOG_PREFIX,\n+      CustomCatalogs.ICEBERG_DEFAULT_CATALOG, CatalogProperties.WAREHOUSE_LOCATION);\n+  private static final String URI_KEY = String.format(\"%s.%s.%s\", CustomCatalogs.ICEBERG_CATALOG_PREFIX,\n+      CustomCatalogs.ICEBERG_DEFAULT_CATALOG, CatalogProperties.HIVE_URI);\n+  private static final String URI_VAL = \"thrift://localhost:12345\"; // dummy uri\n+  private static final String CATALOG_VAL = \"org.apache.iceberg.spark.source.TestCatalog\";\n+  private static final TableIdentifier TABLE = TableIdentifier.of(\"default\", \"table\");\n+  private static final Schema SCHEMA = new Schema(\n+      optional(1, \"id\", Types.IntegerType.get()),\n+      optional(2, \"data\", Types.StringType.get())\n+  );\n+\n+  @Rule\n+  public TemporaryFolder temp = new TemporaryFolder();\n+\n+  File tableDir = null;\n+  String tableLocation = null;\n+  HadoopTables tables;\n+\n+  protected static SparkSession spark = null;\n+\n+  @BeforeClass\n+  public static void startMetastoreAndSpark() {\n+    spark = SparkSession.builder().master(\"local[2]\").getOrCreate();\n+  }\n+\n+  @AfterClass\n+  public static void stopMetastoreAndSpark() {\n+    spark.stop();\n+    spark = null;\n+  }\n+\n+  @Before\n+  public void setupTable() throws Exception {\n+    SparkConf sparkConf = spark.sparkContext().conf();\n+    sparkConf.set(\n+        String.format(\"%s.%s\", CustomCatalogs.ICEBERG_CATALOG_PREFIX, CustomCatalogs.ICEBERG_DEFAULT_CATALOG),\n+        Catalog.class.getName());\n+    this.tables = new HadoopTables(spark.sessionState().newHadoopConf());\n+    this.tableDir = temp.newFolder();\n+    tableDir.delete(); // created by table create\n+    this.tableLocation = tableDir.toURI().toString();\n+    tables.create(SCHEMA, PartitionSpec.unpartitioned(), String.format(\"%s/%s\", tableLocation, TABLE.name()));\n+  }\n+\n+  @After\n+  public void removeTable() {\n+    SparkConf sparkConf = spark.sparkContext().conf();\n+    sparkConf.remove(CATALOG_IMPL);\n+    sparkConf.remove(WAREHOUSE);\n+    sparkConf.remove(URI_KEY);\n+    tables.dropTable(String.format(\"%s/%s\", tableLocation, TABLE.name()));\n+    tableDir.delete();\n+    CustomCatalogs.clearCache();\n+  }\n+\n+  @Test\n+  public void withSparkOptions() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a92b06cf32a5583cea9e8228d2a1a56fe35d6352"}, "originalPosition": 109}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Nzk5NjM3MA==", "bodyText": "sorry, could you explain a bit more?", "url": "https://github.com/apache/iceberg/pull/1875#discussion_r547996370", "createdAt": "2020-12-23T14:53:44Z", "author": {"login": "rymurr"}, "path": "spark2/src/test/java/org/apache/iceberg/spark/source/TestCustomCatalog.java", "diffHunk": "@@ -0,0 +1,146 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.spark.source;\n+\n+import java.io.File;\n+import java.util.List;\n+import org.apache.iceberg.AssertHelpers;\n+import org.apache.iceberg.CatalogProperties;\n+import org.apache.iceberg.PartitionSpec;\n+import org.apache.iceberg.Schema;\n+import org.apache.iceberg.catalog.TableIdentifier;\n+import org.apache.iceberg.hadoop.HadoopTables;\n+import org.apache.iceberg.relocated.com.google.common.collect.Lists;\n+import org.apache.iceberg.types.Types;\n+import org.apache.spark.SparkConf;\n+import org.apache.spark.sql.Dataset;\n+import org.apache.spark.sql.Encoders;\n+import org.apache.spark.sql.Row;\n+import org.apache.spark.sql.SparkSession;\n+import org.apache.spark.sql.catalog.Catalog;\n+import org.junit.After;\n+import org.junit.AfterClass;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.TemporaryFolder;\n+\n+import static org.apache.iceberg.types.Types.NestedField.optional;\n+\n+public class TestCustomCatalog {\n+  private static final String CATALOG_IMPL = String.format(\"%s.%s.%s\", CustomCatalogs.ICEBERG_CATALOG_PREFIX,\n+      CustomCatalogs.ICEBERG_DEFAULT_CATALOG, CatalogProperties.CATALOG_IMPL);\n+  private static final String WAREHOUSE = String.format(\"%s.%s.%s\", CustomCatalogs.ICEBERG_CATALOG_PREFIX,\n+      CustomCatalogs.ICEBERG_DEFAULT_CATALOG, CatalogProperties.WAREHOUSE_LOCATION);\n+  private static final String URI_KEY = String.format(\"%s.%s.%s\", CustomCatalogs.ICEBERG_CATALOG_PREFIX,\n+      CustomCatalogs.ICEBERG_DEFAULT_CATALOG, CatalogProperties.HIVE_URI);\n+  private static final String URI_VAL = \"thrift://localhost:12345\"; // dummy uri\n+  private static final String CATALOG_VAL = \"org.apache.iceberg.spark.source.TestCatalog\";\n+  private static final TableIdentifier TABLE = TableIdentifier.of(\"default\", \"table\");\n+  private static final Schema SCHEMA = new Schema(\n+      optional(1, \"id\", Types.IntegerType.get()),\n+      optional(2, \"data\", Types.StringType.get())\n+  );\n+\n+  @Rule\n+  public TemporaryFolder temp = new TemporaryFolder();\n+\n+  File tableDir = null;\n+  String tableLocation = null;\n+  HadoopTables tables;\n+\n+  protected static SparkSession spark = null;\n+\n+  @BeforeClass\n+  public static void startMetastoreAndSpark() {\n+    spark = SparkSession.builder().master(\"local[2]\").getOrCreate();\n+  }\n+\n+  @AfterClass\n+  public static void stopMetastoreAndSpark() {\n+    spark.stop();\n+    spark = null;\n+  }\n+\n+  @Before\n+  public void setupTable() throws Exception {\n+    SparkConf sparkConf = spark.sparkContext().conf();\n+    sparkConf.set(\n+        String.format(\"%s.%s\", CustomCatalogs.ICEBERG_CATALOG_PREFIX, CustomCatalogs.ICEBERG_DEFAULT_CATALOG),\n+        Catalog.class.getName());\n+    this.tables = new HadoopTables(spark.sessionState().newHadoopConf());\n+    this.tableDir = temp.newFolder();\n+    tableDir.delete(); // created by table create\n+    this.tableLocation = tableDir.toURI().toString();\n+    tables.create(SCHEMA, PartitionSpec.unpartitioned(), String.format(\"%s/%s\", tableLocation, TABLE.name()));\n+  }\n+\n+  @After\n+  public void removeTable() {\n+    SparkConf sparkConf = spark.sparkContext().conf();\n+    sparkConf.remove(CATALOG_IMPL);\n+    sparkConf.remove(WAREHOUSE);\n+    sparkConf.remove(URI_KEY);\n+    tables.dropTable(String.format(\"%s/%s\", tableLocation, TABLE.name()));\n+    tableDir.delete();\n+    CustomCatalogs.clearCache();\n+  }\n+\n+  @Test\n+  public void withSparkOptions() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzU0Nzk2Nw=="}, "originalCommit": {"oid": "a92b06cf32a5583cea9e8228d2a1a56fe35d6352"}, "originalPosition": 109}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTQyOTkxNw==", "bodyText": "misunderstood your comment. Added a test for that.", "url": "https://github.com/apache/iceberg/pull/1875#discussion_r549429917", "createdAt": "2020-12-28T17:46:12Z", "author": {"login": "rymurr"}, "path": "spark2/src/test/java/org/apache/iceberg/spark/source/TestCustomCatalog.java", "diffHunk": "@@ -0,0 +1,146 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.spark.source;\n+\n+import java.io.File;\n+import java.util.List;\n+import org.apache.iceberg.AssertHelpers;\n+import org.apache.iceberg.CatalogProperties;\n+import org.apache.iceberg.PartitionSpec;\n+import org.apache.iceberg.Schema;\n+import org.apache.iceberg.catalog.TableIdentifier;\n+import org.apache.iceberg.hadoop.HadoopTables;\n+import org.apache.iceberg.relocated.com.google.common.collect.Lists;\n+import org.apache.iceberg.types.Types;\n+import org.apache.spark.SparkConf;\n+import org.apache.spark.sql.Dataset;\n+import org.apache.spark.sql.Encoders;\n+import org.apache.spark.sql.Row;\n+import org.apache.spark.sql.SparkSession;\n+import org.apache.spark.sql.catalog.Catalog;\n+import org.junit.After;\n+import org.junit.AfterClass;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.TemporaryFolder;\n+\n+import static org.apache.iceberg.types.Types.NestedField.optional;\n+\n+public class TestCustomCatalog {\n+  private static final String CATALOG_IMPL = String.format(\"%s.%s.%s\", CustomCatalogs.ICEBERG_CATALOG_PREFIX,\n+      CustomCatalogs.ICEBERG_DEFAULT_CATALOG, CatalogProperties.CATALOG_IMPL);\n+  private static final String WAREHOUSE = String.format(\"%s.%s.%s\", CustomCatalogs.ICEBERG_CATALOG_PREFIX,\n+      CustomCatalogs.ICEBERG_DEFAULT_CATALOG, CatalogProperties.WAREHOUSE_LOCATION);\n+  private static final String URI_KEY = String.format(\"%s.%s.%s\", CustomCatalogs.ICEBERG_CATALOG_PREFIX,\n+      CustomCatalogs.ICEBERG_DEFAULT_CATALOG, CatalogProperties.HIVE_URI);\n+  private static final String URI_VAL = \"thrift://localhost:12345\"; // dummy uri\n+  private static final String CATALOG_VAL = \"org.apache.iceberg.spark.source.TestCatalog\";\n+  private static final TableIdentifier TABLE = TableIdentifier.of(\"default\", \"table\");\n+  private static final Schema SCHEMA = new Schema(\n+      optional(1, \"id\", Types.IntegerType.get()),\n+      optional(2, \"data\", Types.StringType.get())\n+  );\n+\n+  @Rule\n+  public TemporaryFolder temp = new TemporaryFolder();\n+\n+  File tableDir = null;\n+  String tableLocation = null;\n+  HadoopTables tables;\n+\n+  protected static SparkSession spark = null;\n+\n+  @BeforeClass\n+  public static void startMetastoreAndSpark() {\n+    spark = SparkSession.builder().master(\"local[2]\").getOrCreate();\n+  }\n+\n+  @AfterClass\n+  public static void stopMetastoreAndSpark() {\n+    spark.stop();\n+    spark = null;\n+  }\n+\n+  @Before\n+  public void setupTable() throws Exception {\n+    SparkConf sparkConf = spark.sparkContext().conf();\n+    sparkConf.set(\n+        String.format(\"%s.%s\", CustomCatalogs.ICEBERG_CATALOG_PREFIX, CustomCatalogs.ICEBERG_DEFAULT_CATALOG),\n+        Catalog.class.getName());\n+    this.tables = new HadoopTables(spark.sessionState().newHadoopConf());\n+    this.tableDir = temp.newFolder();\n+    tableDir.delete(); // created by table create\n+    this.tableLocation = tableDir.toURI().toString();\n+    tables.create(SCHEMA, PartitionSpec.unpartitioned(), String.format(\"%s/%s\", tableLocation, TABLE.name()));\n+  }\n+\n+  @After\n+  public void removeTable() {\n+    SparkConf sparkConf = spark.sparkContext().conf();\n+    sparkConf.remove(CATALOG_IMPL);\n+    sparkConf.remove(WAREHOUSE);\n+    sparkConf.remove(URI_KEY);\n+    tables.dropTable(String.format(\"%s/%s\", tableLocation, TABLE.name()));\n+    tableDir.delete();\n+    CustomCatalogs.clearCache();\n+  }\n+\n+  @Test\n+  public void withSparkOptions() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzU0Nzk2Nw=="}, "originalCommit": {"oid": "a92b06cf32a5583cea9e8228d2a1a56fe35d6352"}, "originalPosition": 109}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3263, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}