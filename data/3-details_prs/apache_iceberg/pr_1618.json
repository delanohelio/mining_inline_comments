{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA0NDU2NzE5", "number": 1618, "title": "dynamically load custom FileIO implementation", "bodyText": "refactor the class loader logic in LocationProviders to a util class\nadd functionality to dynamically load FileIO in Hadoop and Hive table operations\nintroduce a catalog property io-impl", "createdAt": "2020-10-15T23:39:56Z", "url": "https://github.com/apache/iceberg/pull/1618", "merged": true, "mergeCommit": {"oid": "4436c92928f4b3b90839a26bf6a656902733261f"}, "closed": true, "closedAt": "2020-11-05T22:51:59Z", "author": {"login": "jackye1995"}, "timelineItems": {"totalCount": 30, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdS8KlMAFqTUwOTk1NDYwNA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdZqbffgFqTUyNDczNDQ0NQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA5OTU0NjA0", "url": "https://github.com/apache/iceberg/pull/1618#pullrequestreview-509954604", "createdAt": "2020-10-16T01:33:43Z", "commit": {"oid": "96e58f38de39c2291e5f68005534acd4b840fbae"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQwMTozMzo0M1rOHih00g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQwMTozMzo0M1rOHih00g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTk2NzgyNg==", "bodyText": "I don't think this is actually cleaner than just using the reflection utilities here. I understand wanting to reuse code, but I don't think that this operation is a good candidate for it.\nThis mixes property checking with the reflect operation, and as a result the default implementation is now loaded using reflection as well. That means that we lose the compile time check that we're instantiating HadoopFileIO correctly and lose the ability to easily refactor.\nThis also doesn't support more than one constructor. For LocationProvider, the constructor could accept either location and properties or no args, but this only checks for a single constructor and is harder to read as well.\nThe first thing I would change is to move the property check out of the utility method and directly instantiate HadoopFileIO in an else block. After making that change, there's little value in wrapping the reflection helpers. The main complexity is catching NoSuchMethodException to return a better error message (which is optional), but making that generic ends up being quite complex:\n      List<List<String>> allowedArgTypesString = allowedArgTypes.stream()\n          .map(argTypes -> Arrays.stream(argTypes).map(Class::getName).collect(Collectors.toList()))\n          .collect(Collectors.toList());\n      throw new IllegalArgumentException(String.format(\n          \"Unable to find a constructor for implementation %s of %s. \" +\n              \"Make sure the implementation is in classpath, and that it either \" +\n              \"has a public no-arg constructor or one of the following constructors: %s \",\n          impl, classInterface, allowedArgTypesString), e);", "url": "https://github.com/apache/iceberg/pull/1618#discussion_r505967826", "createdAt": "2020-10-16T01:33:43Z", "author": {"login": "rdblue"}, "path": "core/src/main/java/org/apache/iceberg/hadoop/HadoopTableOperations.java", "diffHunk": "@@ -174,7 +176,13 @@ public void commit(TableMetadata base, TableMetadata metadata) {\n   @Override\n   public FileIO io() {\n     if (defaultFileIo == null) {\n-      defaultFileIo = new HadoopFileIO(conf);\n+      defaultFileIo = ClassLoaderUtil.fromProperty(\n+          current() == null ? new HashMap<>() : current().properties(),\n+          TableProperties.WRITE_FILE_IO_IMPL,\n+          HadoopFileIO.class.getName(),\n+          HadoopFileIO.class,\n+          new Class<?>[] { Configuration.class },\n+          new Object[]{ conf });", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "96e58f38de39c2291e5f68005534acd4b840fbae"}, "originalPosition": 27}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA5OTU0Nzk0", "url": "https://github.com/apache/iceberg/pull/1618#pullrequestreview-509954794", "createdAt": "2020-10-16T01:34:22Z", "commit": {"oid": "96e58f38de39c2291e5f68005534acd4b840fbae"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQwMTozNDoyMlrOHih2OQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQwMTozNDoyMlrOHih2OQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTk2ODE4NQ==", "bodyText": "The interface should be FileIO instead of HadoopFileIO.", "url": "https://github.com/apache/iceberg/pull/1618#discussion_r505968185", "createdAt": "2020-10-16T01:34:22Z", "author": {"login": "rdblue"}, "path": "core/src/main/java/org/apache/iceberg/hadoop/HadoopTableOperations.java", "diffHunk": "@@ -174,7 +176,13 @@ public void commit(TableMetadata base, TableMetadata metadata) {\n   @Override\n   public FileIO io() {\n     if (defaultFileIo == null) {\n-      defaultFileIo = new HadoopFileIO(conf);\n+      defaultFileIo = ClassLoaderUtil.fromProperty(\n+          current() == null ? new HashMap<>() : current().properties(),\n+          TableProperties.WRITE_FILE_IO_IMPL,\n+          HadoopFileIO.class.getName(),\n+          HadoopFileIO.class,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "96e58f38de39c2291e5f68005534acd4b840fbae"}, "originalPosition": 25}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA5OTU1MDAx", "url": "https://github.com/apache/iceberg/pull/1618#pullrequestreview-509955001", "createdAt": "2020-10-16T01:35:13Z", "commit": {"oid": "96e58f38de39c2291e5f68005534acd4b840fbae"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQwMTozNToxM1rOHih4RA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQwMTozNToxM1rOHih4RA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTk2ODcwOA==", "bodyText": "We should move instantiation to a separate method that accepts TableMetadata so that we can use the correct metadata in transactions.", "url": "https://github.com/apache/iceberg/pull/1618#discussion_r505968708", "createdAt": "2020-10-16T01:35:13Z", "author": {"login": "rdblue"}, "path": "core/src/main/java/org/apache/iceberg/hadoop/HadoopTableOperations.java", "diffHunk": "@@ -174,7 +176,13 @@ public void commit(TableMetadata base, TableMetadata metadata) {\n   @Override\n   public FileIO io() {\n     if (defaultFileIo == null) {\n-      defaultFileIo = new HadoopFileIO(conf);\n+      defaultFileIo = ClassLoaderUtil.fromProperty(\n+          current() == null ? new HashMap<>() : current().properties(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "96e58f38de39c2291e5f68005534acd4b840fbae"}, "originalPosition": 22}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA5OTU1MzY5", "url": "https://github.com/apache/iceberg/pull/1618#pullrequestreview-509955369", "createdAt": "2020-10-16T01:36:41Z", "commit": {"oid": "96e58f38de39c2291e5f68005534acd4b840fbae"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQwMTozNjo0MVrOHih7Uw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQwMTozNjo0MVrOHih7Uw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTk2OTQ5MQ==", "bodyText": "There's no need to make this public, and I'd like to avoid exposing new classes through the public API. If we need to use reflection, we can always use hiddenImpl to set the accessible flag. But I think it would be better to instantiate these classes directly like before so that we have compile checks.", "url": "https://github.com/apache/iceberg/pull/1618#discussion_r505969491", "createdAt": "2020-10-16T01:36:41Z", "author": {"login": "rdblue"}, "path": "core/src/main/java/org/apache/iceberg/LocationProviders.java", "diffHunk": "@@ -21,57 +21,43 @@\n \n import java.util.Map;\n import org.apache.hadoop.fs.Path;\n-import org.apache.iceberg.common.DynConstructors;\n import org.apache.iceberg.io.LocationProvider;\n import org.apache.iceberg.relocated.com.google.common.base.Preconditions;\n import org.apache.iceberg.transforms.Transform;\n import org.apache.iceberg.transforms.Transforms;\n import org.apache.iceberg.types.Types;\n+import org.apache.iceberg.util.ClassLoaderUtil;\n import org.apache.iceberg.util.PropertyUtil;\n \n import static org.apache.iceberg.TableProperties.OBJECT_STORE_PATH;\n \n public class LocationProviders {\n \n+  private static final Class<?>[] CONSTRUCTOR_ARG_TYPES = { String.class, Map.class };\n+\n   private LocationProviders() {\n   }\n \n   public static LocationProvider locationsFor(String location, Map<String, String> properties) {\n-    if (properties.containsKey(TableProperties.WRITE_LOCATION_PROVIDER_IMPL)) {\n-      String impl = properties.get(TableProperties.WRITE_LOCATION_PROVIDER_IMPL);\n-      DynConstructors.Ctor<LocationProvider> ctor;\n-      try {\n-        ctor = DynConstructors.builder(LocationProvider.class)\n-            .impl(impl, String.class, Map.class)\n-            .impl(impl).buildChecked(); // fall back to no-arg constructor\n-      } catch (NoSuchMethodException e) {\n-        throw new IllegalArgumentException(String.format(\n-            \"Unable to find a constructor for implementation %s of %s. \" +\n-                \"Make sure the implementation is in classpath, and that it either \" +\n-                \"has a public no-arg constructor or a two-arg constructor \" +\n-                \"taking in the string base table location and its property string map.\",\n-            impl, LocationProvider.class), e);\n-      }\n-      try {\n-        return ctor.newInstance(location, properties);\n-      } catch (ClassCastException e) {\n-        throw new IllegalArgumentException(\n-            String.format(\"Provided implementation for dynamic instantiation should implement %s.\",\n-                LocationProvider.class), e);\n-      }\n-    } else if (PropertyUtil.propertyAsBoolean(properties,\n+    // for backwards compatibility of write.object-storage.enabled property\n+    Class<?> defaultProviderClass = PropertyUtil.propertyAsBoolean(properties,\n         TableProperties.OBJECT_STORE_ENABLED,\n-        TableProperties.OBJECT_STORE_ENABLED_DEFAULT)) {\n-      return new ObjectStoreLocationProvider(location, properties);\n-    } else {\n-      return new DefaultLocationProvider(location, properties);\n-    }\n+        TableProperties.OBJECT_STORE_ENABLED_DEFAULT) ?\n+        ObjectStoreLocationProvider.class : DefaultLocationProvider.class;\n+\n+    return ClassLoaderUtil.fromProperty(\n+        properties,\n+        TableProperties.WRITE_LOCATION_PROVIDER_IMPL,\n+        defaultProviderClass.getName(),\n+        LocationProvider.class,\n+        CONSTRUCTOR_ARG_TYPES,\n+        new Object[]{location, properties});\n   }\n \n-  static class DefaultLocationProvider implements LocationProvider {\n+  public static class DefaultLocationProvider implements LocationProvider {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "96e58f38de39c2291e5f68005534acd4b840fbae"}, "originalPosition": 67}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTEzOTk1NDY2", "url": "https://github.com/apache/iceberg/pull/1618#pullrequestreview-513995466", "createdAt": "2020-10-21T17:22:43Z", "commit": {"oid": "d8c159d4f42953a66a18522137e67cf146a99f00"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQxNzoyMjo0M1rOHl3lhA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQxNzoyMjo0M1rOHl3lhA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTQ3MDA4NA==", "bodyText": "Nit: this is a non-functional change that could cause unnecessary commit conflicts.", "url": "https://github.com/apache/iceberg/pull/1618#discussion_r509470084", "createdAt": "2020-10-21T17:22:43Z", "author": {"login": "rdblue"}, "path": "hive-metastore/src/main/java/org/apache/iceberg/hive/HiveTableOperations.java", "diffHunk": "@@ -108,9 +108,9 @@ protected String tableName() {\n   @Override\n   public FileIO io() {\n     if (fileIO == null) {\n-      fileIO = new HadoopFileIO(conf);\n+      // avoid refresh metadata because refresh() calls io() again\n+      fileIO = CatalogUtil.loadFileIO(getCurrentMetadataNoRefresh(), conf);\n     }\n-", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d8c159d4f42953a66a18522137e67cf146a99f00"}, "originalPosition": 24}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE0MDMyNzY5", "url": "https://github.com/apache/iceberg/pull/1618#pullrequestreview-514032769", "createdAt": "2020-10-21T17:55:31Z", "commit": {"oid": "fbf9fd40c7d219f4f24bb11bac56eebcfc0c8ac0"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQxNzo1NTozMlrOHl6ZoQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQxNzo1NTozMlrOHl6ZoQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTUxNjE5Mw==", "bodyText": "Looks like we only need properties here. I think that we should probably pass a map of properties to this method instead. That way changes to table metadata won't need to affect this class.", "url": "https://github.com/apache/iceberg/pull/1618#discussion_r509516193", "createdAt": "2020-10-21T17:55:32Z", "author": {"login": "rdblue"}, "path": "core/src/main/java/org/apache/iceberg/CatalogUtil.java", "diffHunk": "@@ -117,4 +120,42 @@ private static void deleteFiles(FileIO io, Set<ManifestFile> allManifests) {\n           }\n         });\n   }\n+\n+  /**\n+   * Load FileIO, default to HadoopFileIO\n+   * @param tableMetadata table metadata\n+   * @param conf Hadoop configuration\n+   * @return FileIO class\n+   * @throws IllegalArgumentException if class path not found or\n+   *  right constructor not found or\n+   *  the loaded class cannot be casted to the given interface type\n+   */\n+  public static FileIO loadFileIO(TableMetadata tableMetadata, Configuration conf) {\n+    if (tableMetadata != null) {\n+      Map<String, String> properties = tableMetadata.properties();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fbf9fd40c7d219f4f24bb11bac56eebcfc0c8ac0"}, "originalPosition": 27}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE0MDMzODk5", "url": "https://github.com/apache/iceberg/pull/1618#pullrequestreview-514033899", "createdAt": "2020-10-21T17:56:54Z", "commit": {"oid": "fbf9fd40c7d219f4f24bb11bac56eebcfc0c8ac0"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQxNzo1Njo1NFrOHl6leg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQxNzo1Njo1NFrOHl6leg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTUxOTIyNg==", "bodyText": "I think it would make sense to add an alternative constructor that accepts Map to pass the table properties. We can do this in a follow-up when it's needed, or here if you agree.", "url": "https://github.com/apache/iceberg/pull/1618#discussion_r509519226", "createdAt": "2020-10-21T17:56:54Z", "author": {"login": "rdblue"}, "path": "core/src/main/java/org/apache/iceberg/CatalogUtil.java", "diffHunk": "@@ -117,4 +120,42 @@ private static void deleteFiles(FileIO io, Set<ManifestFile> allManifests) {\n           }\n         });\n   }\n+\n+  /**\n+   * Load FileIO, default to HadoopFileIO\n+   * @param tableMetadata table metadata\n+   * @param conf Hadoop configuration\n+   * @return FileIO class\n+   * @throws IllegalArgumentException if class path not found or\n+   *  right constructor not found or\n+   *  the loaded class cannot be casted to the given interface type\n+   */\n+  public static FileIO loadFileIO(TableMetadata tableMetadata, Configuration conf) {\n+    if (tableMetadata != null) {\n+      Map<String, String> properties = tableMetadata.properties();\n+      if (properties.containsKey(TableProperties.WRITE_FILE_IO_IMPL)) {\n+        String impl = properties.get(TableProperties.WRITE_FILE_IO_IMPL);\n+        LOG.info(\"Loading custom FileIO implementation: {}\", impl);\n+        DynConstructors.Ctor<FileIO> ctor;\n+        try {\n+          ctor = DynConstructors.builder(FileIO.class)\n+              .impl(impl, Configuration.class)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fbf9fd40c7d219f4f24bb11bac56eebcfc0c8ac0"}, "originalPosition": 34}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE0MDM0NTQ5", "url": "https://github.com/apache/iceberg/pull/1618#pullrequestreview-514034549", "createdAt": "2020-10-21T17:57:41Z", "commit": {"oid": "fbf9fd40c7d219f4f24bb11bac56eebcfc0c8ac0"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQxNzo1Nzo0MVrOHl6scQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQxNzo1Nzo0MVrOHl6scQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTUyMTAwOQ==", "bodyText": "Style: does this need to be on a separate line?", "url": "https://github.com/apache/iceberg/pull/1618#discussion_r509521009", "createdAt": "2020-10-21T17:57:41Z", "author": {"login": "rdblue"}, "path": "core/src/main/java/org/apache/iceberg/CatalogUtil.java", "diffHunk": "@@ -117,4 +120,42 @@ private static void deleteFiles(FileIO io, Set<ManifestFile> allManifests) {\n           }\n         });\n   }\n+\n+  /**\n+   * Load FileIO, default to HadoopFileIO\n+   * @param tableMetadata table metadata\n+   * @param conf Hadoop configuration\n+   * @return FileIO class\n+   * @throws IllegalArgumentException if class path not found or\n+   *  right constructor not found or\n+   *  the loaded class cannot be casted to the given interface type\n+   */\n+  public static FileIO loadFileIO(TableMetadata tableMetadata, Configuration conf) {\n+    if (tableMetadata != null) {\n+      Map<String, String> properties = tableMetadata.properties();\n+      if (properties.containsKey(TableProperties.WRITE_FILE_IO_IMPL)) {\n+        String impl = properties.get(TableProperties.WRITE_FILE_IO_IMPL);\n+        LOG.info(\"Loading custom FileIO implementation: {}\", impl);\n+        DynConstructors.Ctor<FileIO> ctor;\n+        try {\n+          ctor = DynConstructors.builder(FileIO.class)\n+              .impl(impl, Configuration.class)\n+              .impl(impl) // fall back to no-arg constructor\n+              .buildChecked();\n+        } catch (NoSuchMethodException e) {\n+          throw new IllegalArgumentException(String.format(\n+              \"Cannot initialize FiloIO, please make sure %s has a constructor taking %s, or a no-arg constructor\",\n+              impl, Configuration.class), e);\n+        }\n+        try {\n+          return ctor.newInstance(conf);\n+        } catch (ClassCastException e) {\n+          throw new IllegalArgumentException(\n+              String.format(\"Cannot initialize FileIO, fail to cast %s to class %s.\",\n+                  impl, FileIO.class), e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fbf9fd40c7d219f4f24bb11bac56eebcfc0c8ac0"}, "originalPosition": 47}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE0MDM3OTA1", "url": "https://github.com/apache/iceberg/pull/1618#pullrequestreview-514037905", "createdAt": "2020-10-21T18:01:58Z", "commit": {"oid": "fbf9fd40c7d219f4f24bb11bac56eebcfc0c8ac0"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQxODowMTo1OFrOHl7JOg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQxODowMTo1OFrOHl7JOg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTUyODM3OA==", "bodyText": "This isn't just a write option. It controls how files are read as well.\nHow about using an io namespace instead? Maybe io.file-io.impl or io.impl?", "url": "https://github.com/apache/iceberg/pull/1618#discussion_r509528378", "createdAt": "2020-10-21T18:01:58Z", "author": {"login": "rdblue"}, "path": "core/src/main/java/org/apache/iceberg/TableProperties.java", "diffHunk": "@@ -91,6 +91,8 @@ private TableProperties() {\n \n   public static final String WRITE_LOCATION_PROVIDER_IMPL = \"write.location-provider.impl\";\n \n+  public static final String WRITE_FILE_IO_IMPL = \"write.file-io.impl\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fbf9fd40c7d219f4f24bb11bac56eebcfc0c8ac0"}, "originalPosition": 4}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE0MDk3Nzk4", "url": "https://github.com/apache/iceberg/pull/1618#pullrequestreview-514097798", "createdAt": "2020-10-21T19:10:53Z", "commit": {"oid": "fbf9fd40c7d219f4f24bb11bac56eebcfc0c8ac0"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQxOToxMDo1M1rOHl_c9g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQxOToxMDo1M1rOHl_c9g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTU5ODk2Ng==", "bodyText": "What do you think about moving this to the base class? Then we wouldn't need to add the \"no refresh\" method to get metadata and could access current directly. This PR also makes it far less likely that implementations will override io, since a new one can be plugged in easily through table properties.", "url": "https://github.com/apache/iceberg/pull/1618#discussion_r509598966", "createdAt": "2020-10-21T19:10:53Z", "author": {"login": "rdblue"}, "path": "hive-metastore/src/main/java/org/apache/iceberg/hive/HiveTableOperations.java", "diffHunk": "@@ -108,7 +108,8 @@ protected String tableName() {\n   @Override\n   public FileIO io() {\n     if (fileIO == null) {\n-      fileIO = new HadoopFileIO(conf);\n+      // avoid refresh metadata because refresh() calls io() again\n+      fileIO = CatalogUtil.loadFileIO(getCurrentMetadataNoRefresh(), conf);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fbf9fd40c7d219f4f24bb11bac56eebcfc0c8ac0"}, "originalPosition": 22}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b7d4f6b8f56c8765c171ef87c663b8f5f0f5dfca", "author": {"user": {"login": "jackye1995", "name": "Jack Ye"}}, "url": "https://github.com/apache/iceberg/commit/b7d4f6b8f56c8765c171ef87c663b8f5f0f5dfca", "committedDate": "2020-10-21T18:42:43Z", "message": "change namespace for FileIO impl table property"}, "afterCommit": {"oid": "1e574efd653ae3e73d78e039e1ea3fc8bf5dd3d4", "author": {"user": {"login": "jackye1995", "name": "Jack Ye"}}, "url": "https://github.com/apache/iceberg/commit/1e574efd653ae3e73d78e039e1ea3fc8bf5dd3d4", "committedDate": "2020-10-30T01:28:39Z", "message": "add fileIO config as a part of constructor"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIxMjU2MDEw", "url": "https://github.com/apache/iceberg/pull/1618#pullrequestreview-521256010", "createdAt": "2020-11-01T20:02:47Z", "commit": {"oid": "f17b993b8ed75a05cca78b88d3a21b0a22c3b94f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMVQyMDowMjo0N1rOHrxtgA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMVQyMDowMjo0N1rOHrxtgA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTY2NTI4MA==", "bodyText": "Why do we need a Hadoop config property?", "url": "https://github.com/apache/iceberg/pull/1618#discussion_r515665280", "createdAt": "2020-11-01T20:02:47Z", "author": {"login": "rdblue"}, "path": "core/src/main/java/org/apache/iceberg/hadoop/ConfigProperties.java", "diffHunk": "@@ -25,4 +25,6 @@ private ConfigProperties() {\n   }\n \n   public static final String ENGINE_HIVE_ENABLED = \"iceberg.engine.hive.enabled\";\n+\n+  public static final String CUSTOM_FILE_IO_IMPL = \"iceberg.fileio.impl\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f17b993b8ed75a05cca78b88d3a21b0a22c3b94f"}, "originalPosition": 5}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIxMjU2MTcy", "url": "https://github.com/apache/iceberg/pull/1618#pullrequestreview-521256172", "createdAt": "2020-11-01T20:04:54Z", "commit": {"oid": "f17b993b8ed75a05cca78b88d3a21b0a22c3b94f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMVQyMDowNDo1NFrOHrxuZw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMVQyMDowNDo1NFrOHrxuZw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTY2NTUxMQ==", "bodyText": "I think that the IO implementation should be passed in instead of the class name. HadoopFileIO only needs to be instantiated once per catalog and can be shared. Passing the instance from a Catalog into TableOperations allows the catalog implementation to choose whether to instantiate FileIO per table or not.", "url": "https://github.com/apache/iceberg/pull/1618#discussion_r515665511", "createdAt": "2020-11-01T20:04:54Z", "author": {"login": "rdblue"}, "path": "core/src/main/java/org/apache/iceberg/hadoop/HadoopCatalog.java", "diffHunk": "@@ -163,7 +163,10 @@ protected boolean isValidIdentifier(TableIdentifier identifier) {\n \n   @Override\n   protected TableOperations newTableOps(TableIdentifier identifier) {\n-    return new HadoopTableOperations(new Path(defaultWarehouseLocation(identifier)), conf);\n+    return new HadoopTableOperations(\n+        new Path(defaultWarehouseLocation(identifier)),\n+        conf.get(ConfigProperties.CUSTOM_FILE_IO_IMPL),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f17b993b8ed75a05cca78b88d3a21b0a22c3b94f"}, "originalPosition": 7}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIxMjU2Mjc0", "url": "https://github.com/apache/iceberg/pull/1618#pullrequestreview-521256274", "createdAt": "2020-11-01T20:06:10Z", "commit": {"oid": "f17b993b8ed75a05cca78b88d3a21b0a22c3b94f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMVQyMDowNjoxMFrOHrxu_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMVQyMDowNjoxMFrOHrxu_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTY2NTY2Mw==", "bodyText": "Style: We like to have empty lines after control flow blocks like for, while, if, else, try, and catch. It helps keep the code at a readable density.", "url": "https://github.com/apache/iceberg/pull/1618#discussion_r515665663", "createdAt": "2020-11-01T20:06:10Z", "author": {"login": "rdblue"}, "path": "core/src/main/java/org/apache/iceberg/CatalogUtil.java", "diffHunk": "@@ -117,4 +120,39 @@ private static void deleteFiles(FileIO io, Set<ManifestFile> allManifests) {\n           }\n         });\n   }\n+\n+  /**\n+   * Load a custom {@link FileIO} implementation.\n+   * The implementation must have a no-arg constructor.\n+   * If the class implements {@link org.apache.hadoop.conf.Configurable}, we will also set the Hadoop configuration.\n+   * @param impl full class name of a custom FileIO implementation\n+   * @param hadoopConf hadoop configuration\n+   * @return FileIO class\n+   * @throws IllegalArgumentException if class path not found or\n+   *  right constructor not found or\n+   *  the loaded class cannot be casted to the given interface type\n+   */\n+  public static FileIO loadCustomFileIO(String impl, Configuration hadoopConf) {\n+    LOG.info(\"Loading custom FileIO implementation: {}\", impl);\n+    DynConstructors.Ctor<FileIO> ctor;\n+    try {\n+      ctor = DynConstructors.builder(FileIO.class)\n+          .impl(impl)\n+          .buildChecked();\n+    } catch (NoSuchMethodException e) {\n+      throw new IllegalArgumentException(String.format(\n+          \"Cannot initialize FiloIO, please make sure %s has a no-arg constructor\", impl), e);\n+    }\n+    try {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f17b993b8ed75a05cca78b88d3a21b0a22c3b94f"}, "originalPosition": 37}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIxMjU2NTMy", "url": "https://github.com/apache/iceberg/pull/1618#pullrequestreview-521256532", "createdAt": "2020-11-01T20:09:21Z", "commit": {"oid": "f17b993b8ed75a05cca78b88d3a21b0a22c3b94f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMVQyMDowOToyMVrOHrxwKg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMVQyMDowOToyMVrOHrxwKg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTY2NTk2Mg==", "bodyText": "Javadoc paragraphs require <p> between them or else the docs are all one paragraph. Also, it is more clear and direct not to refer to the library maintainers with \"we\", like this: If the class implements {@link Configurable}, a Hadoop config will be passed using {@link Configurable#setConf(Configuration)}.", "url": "https://github.com/apache/iceberg/pull/1618#discussion_r515665962", "createdAt": "2020-11-01T20:09:21Z", "author": {"login": "rdblue"}, "path": "core/src/main/java/org/apache/iceberg/CatalogUtil.java", "diffHunk": "@@ -117,4 +120,39 @@ private static void deleteFiles(FileIO io, Set<ManifestFile> allManifests) {\n           }\n         });\n   }\n+\n+  /**\n+   * Load a custom {@link FileIO} implementation.\n+   * The implementation must have a no-arg constructor.\n+   * If the class implements {@link org.apache.hadoop.conf.Configurable}, we will also set the Hadoop configuration.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f17b993b8ed75a05cca78b88d3a21b0a22c3b94f"}, "originalPosition": 18}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIxMjU2NzYz", "url": "https://github.com/apache/iceberg/pull/1618#pullrequestreview-521256763", "createdAt": "2020-11-01T20:12:18Z", "commit": {"oid": "f17b993b8ed75a05cca78b88d3a21b0a22c3b94f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMVQyMDoxMjoxOFrOHrxxcQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMVQyMDoxMjoxOFrOHrxxcQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTY2NjI4OQ==", "bodyText": "I think it would be more clear to say %s does not implement FileIO. Passing the class calls toString, not getName, and that output includes \"interface\" or \"class\". This would actually log \"fail to cast com.example.X to class interface ...\". The problem is that com.example.X needs to implement FileIO, so saying it directly is a bit better.", "url": "https://github.com/apache/iceberg/pull/1618#discussion_r515666289", "createdAt": "2020-11-01T20:12:18Z", "author": {"login": "rdblue"}, "path": "core/src/main/java/org/apache/iceberg/CatalogUtil.java", "diffHunk": "@@ -117,4 +120,39 @@ private static void deleteFiles(FileIO io, Set<ManifestFile> allManifests) {\n           }\n         });\n   }\n+\n+  /**\n+   * Load a custom {@link FileIO} implementation.\n+   * The implementation must have a no-arg constructor.\n+   * If the class implements {@link org.apache.hadoop.conf.Configurable}, we will also set the Hadoop configuration.\n+   * @param impl full class name of a custom FileIO implementation\n+   * @param hadoopConf hadoop configuration\n+   * @return FileIO class\n+   * @throws IllegalArgumentException if class path not found or\n+   *  right constructor not found or\n+   *  the loaded class cannot be casted to the given interface type\n+   */\n+  public static FileIO loadCustomFileIO(String impl, Configuration hadoopConf) {\n+    LOG.info(\"Loading custom FileIO implementation: {}\", impl);\n+    DynConstructors.Ctor<FileIO> ctor;\n+    try {\n+      ctor = DynConstructors.builder(FileIO.class)\n+          .impl(impl)\n+          .buildChecked();\n+    } catch (NoSuchMethodException e) {\n+      throw new IllegalArgumentException(String.format(\n+          \"Cannot initialize FiloIO, please make sure %s has a no-arg constructor\", impl), e);\n+    }\n+    try {\n+      FileIO fileIO = ctor.newInstance();\n+      if (fileIO instanceof Configurable) {\n+        ((Configurable) fileIO).setConf(hadoopConf);\n+      }\n+      return fileIO;\n+    } catch (ClassCastException e) {\n+      throw new IllegalArgumentException(\n+          String.format(\"Cannot initialize FileIO, fail to cast %s to class %s.\",\n+              impl, FileIO.class), e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f17b993b8ed75a05cca78b88d3a21b0a22c3b94f"}, "originalPosition": 46}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIxMjU2ODE3", "url": "https://github.com/apache/iceberg/pull/1618#pullrequestreview-521256817", "createdAt": "2020-11-01T20:12:57Z", "commit": {"oid": "f17b993b8ed75a05cca78b88d3a21b0a22c3b94f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMVQyMDoxMjo1N1rOHrxxqQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMVQyMDoxMjo1N1rOHrxxqQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTY2NjM0NQ==", "bodyText": "I think this should not be in the try/catch block.", "url": "https://github.com/apache/iceberg/pull/1618#discussion_r515666345", "createdAt": "2020-11-01T20:12:57Z", "author": {"login": "rdblue"}, "path": "core/src/main/java/org/apache/iceberg/CatalogUtil.java", "diffHunk": "@@ -117,4 +120,39 @@ private static void deleteFiles(FileIO io, Set<ManifestFile> allManifests) {\n           }\n         });\n   }\n+\n+  /**\n+   * Load a custom {@link FileIO} implementation.\n+   * The implementation must have a no-arg constructor.\n+   * If the class implements {@link org.apache.hadoop.conf.Configurable}, we will also set the Hadoop configuration.\n+   * @param impl full class name of a custom FileIO implementation\n+   * @param hadoopConf hadoop configuration\n+   * @return FileIO class\n+   * @throws IllegalArgumentException if class path not found or\n+   *  right constructor not found or\n+   *  the loaded class cannot be casted to the given interface type\n+   */\n+  public static FileIO loadCustomFileIO(String impl, Configuration hadoopConf) {\n+    LOG.info(\"Loading custom FileIO implementation: {}\", impl);\n+    DynConstructors.Ctor<FileIO> ctor;\n+    try {\n+      ctor = DynConstructors.builder(FileIO.class)\n+          .impl(impl)\n+          .buildChecked();\n+    } catch (NoSuchMethodException e) {\n+      throw new IllegalArgumentException(String.format(\n+          \"Cannot initialize FiloIO, please make sure %s has a no-arg constructor\", impl), e);\n+    }\n+    try {\n+      FileIO fileIO = ctor.newInstance();\n+      if (fileIO instanceof Configurable) {\n+        ((Configurable) fileIO).setConf(hadoopConf);\n+      }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f17b993b8ed75a05cca78b88d3a21b0a22c3b94f"}, "originalPosition": 41}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIxMjU2OTUw", "url": "https://github.com/apache/iceberg/pull/1618#pullrequestreview-521256950", "createdAt": "2020-11-01T20:14:58Z", "commit": {"oid": "f17b993b8ed75a05cca78b88d3a21b0a22c3b94f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMVQyMDoxNDo1OFrOHrxyhw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMVQyMDoxNDo1OFrOHrxyhw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTY2NjU2Nw==", "bodyText": "We try to be direct and omit phrases like \"please make sure\". A better error message is Cannot load FileIO, missing no-arg constructor: %s.\nAlso, typo: FiloIO should be FileIO.", "url": "https://github.com/apache/iceberg/pull/1618#discussion_r515666567", "createdAt": "2020-11-01T20:14:58Z", "author": {"login": "rdblue"}, "path": "core/src/main/java/org/apache/iceberg/CatalogUtil.java", "diffHunk": "@@ -117,4 +120,39 @@ private static void deleteFiles(FileIO io, Set<ManifestFile> allManifests) {\n           }\n         });\n   }\n+\n+  /**\n+   * Load a custom {@link FileIO} implementation.\n+   * The implementation must have a no-arg constructor.\n+   * If the class implements {@link org.apache.hadoop.conf.Configurable}, we will also set the Hadoop configuration.\n+   * @param impl full class name of a custom FileIO implementation\n+   * @param hadoopConf hadoop configuration\n+   * @return FileIO class\n+   * @throws IllegalArgumentException if class path not found or\n+   *  right constructor not found or\n+   *  the loaded class cannot be casted to the given interface type\n+   */\n+  public static FileIO loadCustomFileIO(String impl, Configuration hadoopConf) {\n+    LOG.info(\"Loading custom FileIO implementation: {}\", impl);\n+    DynConstructors.Ctor<FileIO> ctor;\n+    try {\n+      ctor = DynConstructors.builder(FileIO.class)\n+          .impl(impl)\n+          .buildChecked();\n+    } catch (NoSuchMethodException e) {\n+      throw new IllegalArgumentException(String.format(\n+          \"Cannot initialize FiloIO, please make sure %s has a no-arg constructor\", impl), e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f17b993b8ed75a05cca78b88d3a21b0a22c3b94f"}, "originalPosition": 35}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIyNzQzMDkx", "url": "https://github.com/apache/iceberg/pull/1618#pullrequestreview-522743091", "createdAt": "2020-11-03T17:51:25Z", "commit": {"oid": "672d62f1d76974fa0f0f39ef5cce819c5defab3c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxNzo1MToyNlrOHs6Hrg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxNzo1MToyNlrOHs6Hrg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjg1MTYzMA==", "bodyText": "Instantiating HadoopFileIO before initialize is called is because it isn't always called right now?", "url": "https://github.com/apache/iceberg/pull/1618#discussion_r516851630", "createdAt": "2020-11-03T17:51:26Z", "author": {"login": "rdblue"}, "path": "hive-metastore/src/main/java/org/apache/iceberg/hive/HiveCatalog.java", "diffHunk": "@@ -69,6 +74,7 @@ public HiveCatalog(Configuration conf) {\n     this.conf = conf;\n     this.createStack = Thread.currentThread().getStackTrace();\n     this.closed = false;\n+    this.defaultFileIO = new HadoopFileIO(conf);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "672d62f1d76974fa0f0f39ef5cce819c5defab3c"}, "originalPosition": 29}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "672d62f1d76974fa0f0f39ef5cce819c5defab3c", "author": {"user": {"login": "jackye1995", "name": "Jack Ye"}}, "url": "https://github.com/apache/iceberg/commit/672d62f1d76974fa0f0f39ef5cce819c5defab3c", "committedDate": "2020-11-03T04:06:57Z", "message": "fix docs"}, "afterCommit": {"oid": "04ce8e3f7e264e5bae7ed9bf95ba3cf4d2fc9cd4", "author": {"user": {"login": "jackye1995", "name": "Jack Ye"}}, "url": "https://github.com/apache/iceberg/commit/04ce8e3f7e264e5bae7ed9bf95ba3cf4d2fc9cd4", "committedDate": "2020-11-05T05:30:18Z", "message": "dynamically load custom FileIO implementation"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "04ce8e3f7e264e5bae7ed9bf95ba3cf4d2fc9cd4", "author": {"user": {"login": "jackye1995", "name": "Jack Ye"}}, "url": "https://github.com/apache/iceberg/commit/04ce8e3f7e264e5bae7ed9bf95ba3cf4d2fc9cd4", "committedDate": "2020-11-05T05:30:18Z", "message": "dynamically load custom FileIO implementation"}, "afterCommit": {"oid": "0ac42b947f2c99922aa556ddb14163bb1d13b3de", "author": {"user": {"login": "jackye1995", "name": "Jack Ye"}}, "url": "https://github.com/apache/iceberg/commit/0ac42b947f2c99922aa556ddb14163bb1d13b3de", "committedDate": "2020-11-05T07:07:06Z", "message": "dynamically load custom FileIO implementation"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI0NDQwNDQ2", "url": "https://github.com/apache/iceberg/pull/1618#pullrequestreview-524440446", "createdAt": "2020-11-05T16:28:30Z", "commit": {"oid": "8c57598d6957c55945abcff8a70e923c866d07cc"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxNjoyODozMFrOHuLixw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxNjoyODozMFrOHuLixw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODE4NTY3MQ==", "bodyText": "For Flink, I think we should pass the warehouse location and other config through properties. Right now, we pull it out in FlinkCatalogFactory, but it doesn't make much sense to pull out only some properties.\nHow about leaving the current CatalogLoader.hadoop and CatalogLoader.hive as they are and adding variants like CatalogLoader.hadoop(String name, Map<String, String> properties, Configuration conf)? Then we can pull the properties out using standard config properties that we put in CatalogProperties in the loader classes.\nFYI @JingsongLi and @openinx: we're improving how we configure catalogs and allowing some parts to be loaded dynamically. The main change here is passing properties to the catalog as a map.", "url": "https://github.com/apache/iceberg/pull/1618#discussion_r518185671", "createdAt": "2020-11-05T16:28:30Z", "author": {"login": "rdblue"}, "path": "flink/src/main/java/org/apache/iceberg/flink/CatalogLoader.java", "diffHunk": "@@ -45,12 +45,22 @@\n    */\n   Catalog loadCatalog();\n \n-  static CatalogLoader hadoop(String name, Configuration hadoopConf, String warehouseLocation) {\n-    return new HadoopCatalogLoader(name, hadoopConf, warehouseLocation);\n+  static CatalogLoader hadoop(\n+      String name,\n+      Configuration hadoopConf,\n+      String warehouseLocation,\n+      Map<String, String> properties) {\n+    return new HadoopCatalogLoader(name, hadoopConf, warehouseLocation, properties);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8c57598d6957c55945abcff8a70e923c866d07cc"}, "originalPosition": 11}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cea285ec7ac76edd7118055a0cb49235e3b3c52b", "author": {"user": {"login": "jackye1995", "name": "Jack Ye"}}, "url": "https://github.com/apache/iceberg/commit/cea285ec7ac76edd7118055a0cb49235e3b3c52b", "committedDate": "2020-11-05T20:28:09Z", "message": "dynamically load custom FileIO implementation"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "8c57598d6957c55945abcff8a70e923c866d07cc", "author": {"user": {"login": "jackye1995", "name": "Jack Ye"}}, "url": "https://github.com/apache/iceberg/commit/8c57598d6957c55945abcff8a70e923c866d07cc", "committedDate": "2020-11-05T07:09:54Z", "message": "fix spacing"}, "afterCommit": {"oid": "cea285ec7ac76edd7118055a0cb49235e3b3c52b", "author": {"user": {"login": "jackye1995", "name": "Jack Ye"}}, "url": "https://github.com/apache/iceberg/commit/cea285ec7ac76edd7118055a0cb49235e3b3c52b", "committedDate": "2020-11-05T20:28:09Z", "message": "dynamically load custom FileIO implementation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "03442e8320f8547614bdc80c969cbbc4f7cbafc2", "author": {"user": {"login": "jackye1995", "name": "Jack Ye"}}, "url": "https://github.com/apache/iceberg/commit/03442e8320f8547614bdc80c969cbbc4f7cbafc2", "committedDate": "2020-11-05T20:37:17Z", "message": "add backwards compatible constructors"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "76f53bccebf55461928f7b3c857b0190052310c1", "author": {"user": {"login": "jackye1995", "name": "Jack Ye"}}, "url": "https://github.com/apache/iceberg/commit/76f53bccebf55461928f7b3c857b0190052310c1", "committedDate": "2020-11-05T20:46:51Z", "message": "fix constructor order in commit"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI0NzMzNTUz", "url": "https://github.com/apache/iceberg/pull/1618#pullrequestreview-524733553", "createdAt": "2020-11-05T22:49:29Z", "commit": {"oid": "76f53bccebf55461928f7b3c857b0190052310c1"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQyMjo0OTozMFrOHuZsgg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQyMjo0OTozMFrOHuZsgg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODQxNzUzOA==", "bodyText": "Nit: we prefer args on as few lines as possible, rather than this style.", "url": "https://github.com/apache/iceberg/pull/1618#discussion_r518417538", "createdAt": "2020-11-05T22:49:30Z", "author": {"login": "rdblue"}, "path": "hive-metastore/src/main/java/org/apache/iceberg/hive/HiveCatalog.java", "diffHunk": "@@ -69,13 +73,24 @@ public HiveCatalog(Configuration conf) {\n     this.conf = conf;\n     this.createStack = Thread.currentThread().getStackTrace();\n     this.closed = false;\n+    this.fileIO = new HadoopFileIO(conf);\n   }\n \n   public HiveCatalog(String name, String uri, int clientPoolSize, Configuration conf) {\n     this(name, uri, null, clientPoolSize, conf);\n   }\n \n   public HiveCatalog(String name, String uri, String warehouse, int clientPoolSize, Configuration conf) {\n+    this(name, uri, warehouse, clientPoolSize, conf, Maps.newHashMap());\n+  }\n+\n+  public HiveCatalog(\n+      String name,\n+      String uri,\n+      String warehouse,\n+      int clientPoolSize,\n+      Configuration conf,\n+      Map<String, String> properties) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "76f53bccebf55461928f7b3c857b0190052310c1"}, "originalPosition": 46}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI0NzMzNTk0", "url": "https://github.com/apache/iceberg/pull/1618#pullrequestreview-524733594", "createdAt": "2020-11-05T22:49:35Z", "commit": {"oid": "76f53bccebf55461928f7b3c857b0190052310c1"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI0NzM0NDA4", "url": "https://github.com/apache/iceberg/pull/1618#pullrequestreview-524734408", "createdAt": "2020-11-05T22:51:17Z", "commit": {"oid": "76f53bccebf55461928f7b3c857b0190052310c1"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQyMjo1MToxN1rOHuZvPQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQyMjo1MToxN1rOHuZvPQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODQxODIzNw==", "bodyText": "Nit: leaving these in place would have reduce the number of files that this needed to touch, and avoided a possible problem removing public fields. I don't think it's worth blocking for this change, but we like to keep patches as small as possible by not breaking references like these.", "url": "https://github.com/apache/iceberg/pull/1618#discussion_r518418237", "createdAt": "2020-11-05T22:51:17Z", "author": {"login": "rdblue"}, "path": "flink/src/main/java/org/apache/iceberg/flink/FlinkCatalogFactory.java", "diffHunk": "@@ -63,11 +63,7 @@\n   public static final String ICEBERG_CATALOG_TYPE_HADOOP = \"hadoop\";\n   public static final String ICEBERG_CATALOG_TYPE_HIVE = \"hive\";\n \n-  public static final String HIVE_URI = \"uri\";\n-  public static final String HIVE_CLIENT_POOL_SIZE = \"clients\";\n   public static final String HIVE_CONF_DIR = \"hive-conf-dir\";\n-  public static final String WAREHOUSE_LOCATION = \"warehouse\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "76f53bccebf55461928f7b3c857b0190052310c1"}, "originalPosition": 7}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI0NzM0NDQ1", "url": "https://github.com/apache/iceberg/pull/1618#pullrequestreview-524734445", "createdAt": "2020-11-05T22:51:23Z", "commit": {"oid": "76f53bccebf55461928f7b3c857b0190052310c1"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3970, "cost": 1, "resetAt": "2021-10-29T19:57:52Z"}}}