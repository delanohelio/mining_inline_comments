{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg5MDA3ODcx", "number": 1475, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxNTo1NzoyNVrOEmq5qw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxNTo1NzoyNVrOEmq5qw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4OTg0MjM1OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/apache/iceberg/TableMetadata.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxNTo1NzoyNVrOHW1hvg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxNjoyMTowOFrOHW2hgg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzcwNzcxMA==", "bodyText": "I don't think it matters but it seems the computations for nextSpecId and nextOrderId are a bit different now. Previously, if partition spec list was empty, we used  INITIAL_SPEC_ID and if sort order list was empty, we used INITIAL_SORT_ORDER_ID . Now we are going to use INITIAL_SPEC_ID + 1 in that case.", "url": "https://github.com/apache/iceberg/pull/1475#discussion_r493707710", "createdAt": "2020-09-23T15:57:25Z", "author": {"login": "aokolnychyi"}, "path": "core/src/main/java/org/apache/iceberg/TableMetadata.java", "diffHunk": "@@ -622,32 +622,26 @@ public TableMetadata buildReplacement(Schema updatedSchema, PartitionSpec update\n     ValidationException.check(formatVersion > 1 || PartitionSpec.hasSequentialIds(updatedPartitionSpec),\n         \"Spec does not use sequential IDs that are required in v1: %s\", updatedPartitionSpec);\n \n-    AtomicInteger nextLastColumnId = new AtomicInteger(0);\n-    Schema freshSchema = TypeUtil.assignFreshIds(updatedSchema, nextLastColumnId::incrementAndGet);\n+    AtomicInteger newLastColumnId = new AtomicInteger(lastColumnId);\n+    Schema freshSchema = TypeUtil.assignFreshIds(updatedSchema, schema, newLastColumnId::incrementAndGet);\n \n-    int nextSpecId = TableMetadata.INITIAL_SPEC_ID;\n-    for (Integer specId : specsById.keySet()) {\n-      if (nextSpecId <= specId) {\n-        nextSpecId = specId + 1;\n-      }\n-    }\n+    // determine the next spec id\n+    OptionalInt maxSpecId = specs.stream().mapToInt(PartitionSpec::specId).max();\n+    int nextSpecId = maxSpecId.orElse(TableMetadata.INITIAL_SPEC_ID) + 1;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9728825013844188eea8ec3d3924810b1596667b"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzcyNDAzNA==", "bodyText": "Yes, this simplifies the logic a bit and avoids using spec id 0.", "url": "https://github.com/apache/iceberg/pull/1475#discussion_r493724034", "createdAt": "2020-09-23T16:21:08Z", "author": {"login": "rdblue"}, "path": "core/src/main/java/org/apache/iceberg/TableMetadata.java", "diffHunk": "@@ -622,32 +622,26 @@ public TableMetadata buildReplacement(Schema updatedSchema, PartitionSpec update\n     ValidationException.check(formatVersion > 1 || PartitionSpec.hasSequentialIds(updatedPartitionSpec),\n         \"Spec does not use sequential IDs that are required in v1: %s\", updatedPartitionSpec);\n \n-    AtomicInteger nextLastColumnId = new AtomicInteger(0);\n-    Schema freshSchema = TypeUtil.assignFreshIds(updatedSchema, nextLastColumnId::incrementAndGet);\n+    AtomicInteger newLastColumnId = new AtomicInteger(lastColumnId);\n+    Schema freshSchema = TypeUtil.assignFreshIds(updatedSchema, schema, newLastColumnId::incrementAndGet);\n \n-    int nextSpecId = TableMetadata.INITIAL_SPEC_ID;\n-    for (Integer specId : specsById.keySet()) {\n-      if (nextSpecId <= specId) {\n-        nextSpecId = specId + 1;\n-      }\n-    }\n+    // determine the next spec id\n+    OptionalInt maxSpecId = specs.stream().mapToInt(PartitionSpec::specId).max();\n+    int nextSpecId = maxSpecId.orElse(TableMetadata.INITIAL_SPEC_ID) + 1;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzcwNzcxMA=="}, "originalCommit": {"oid": "9728825013844188eea8ec3d3924810b1596667b"}, "originalPosition": 17}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3489, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}