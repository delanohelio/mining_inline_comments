{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTEwMjU1NDU3", "number": 1664, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxOToyNjo1NFrOEyDc_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxOToyNjo1NFrOEyDc_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwOTIwODMwOnYy", "diffSide": "RIGHT", "path": "parquet/src/main/java/org/apache/iceberg/parquet/ParquetDictionaryRowGroupFilter.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxOToyNjo1NFrOHofC6w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxNjoyNToyOVrOHpytZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjIxMzczOQ==", "bodyText": "We could rely on Collections$disjoint here knowing how it behaves but I'd prefer to have full control here and be sure this logic does not change.", "url": "https://github.com/apache/iceberg/pull/1664#discussion_r512213739", "createdAt": "2020-10-26T19:26:54Z", "author": {"login": "aokolnychyi"}, "path": "parquet/src/main/java/org/apache/iceberg/parquet/ParquetDictionaryRowGroupFilter.java", "diffHunk": "@@ -278,8 +278,27 @@ public Boolean or(Boolean leftResult, Boolean rightResult) {\n \n       Set<T> dictionary = dict(id, ref.comparator());\n \n-      // ROWS_CANNOT_MATCH if all values of the dictionary are not in the set (the intersection is empty)\n-      return Sets.intersection(dictionary, literalSet).isEmpty() ? ROWS_CANNOT_MATCH : ROWS_MIGHT_MATCH;\n+      // we need to find out the smaller set to iterate through\n+      Set<T> smallerSet;\n+      Set<T> biggerSet;\n+\n+      if (literalSet.size() < dictionary.size()) {\n+        smallerSet = literalSet;\n+        biggerSet = dictionary;\n+      } else {\n+        smallerSet = dictionary;\n+        biggerSet = literalSet;\n+      }\n+\n+      for (T e : smallerSet) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "52471581a5bfee43eabc33167f5cf667b3ffdd14"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzU4MTA2MA==", "bodyText": "Is this equivalent to reversing the order of sets passed to intersection?\nif (dictionary.size() > literalSet.size()) {\n  return Sets.intersection(dictionary, literalSet).isEmpty() ? ROWS_CANNOT_MATCH : ROWS_MIGHT_MATCH;\n} else {\n  return Sets.intersection(literalSet, dictionary).isEmpty() ? ROWS_CANNOT_MATCH : ROWS_MIGHT_MATCH;\n}\nI guess that this can return earlier if at least one value in the intersection is found.", "url": "https://github.com/apache/iceberg/pull/1664#discussion_r513581060", "createdAt": "2020-10-28T16:20:59Z", "author": {"login": "rdblue"}, "path": "parquet/src/main/java/org/apache/iceberg/parquet/ParquetDictionaryRowGroupFilter.java", "diffHunk": "@@ -278,8 +278,27 @@ public Boolean or(Boolean leftResult, Boolean rightResult) {\n \n       Set<T> dictionary = dict(id, ref.comparator());\n \n-      // ROWS_CANNOT_MATCH if all values of the dictionary are not in the set (the intersection is empty)\n-      return Sets.intersection(dictionary, literalSet).isEmpty() ? ROWS_CANNOT_MATCH : ROWS_MIGHT_MATCH;\n+      // we need to find out the smaller set to iterate through\n+      Set<T> smallerSet;\n+      Set<T> biggerSet;\n+\n+      if (literalSet.size() < dictionary.size()) {\n+        smallerSet = literalSet;\n+        biggerSet = dictionary;\n+      } else {\n+        smallerSet = dictionary;\n+        biggerSet = literalSet;\n+      }\n+\n+      for (T e : smallerSet) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjIxMzczOQ=="}, "originalCommit": {"oid": "52471581a5bfee43eabc33167f5cf667b3ffdd14"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzU4NDQ4NA==", "bodyText": "Calling isEmpty on intersection is equivalent to just calling Collections$disjoint. We may rely on the order of args but that seems fragile to me. There is no guarantee the internal implementation won't change.", "url": "https://github.com/apache/iceberg/pull/1664#discussion_r513584484", "createdAt": "2020-10-28T16:25:29Z", "author": {"login": "aokolnychyi"}, "path": "parquet/src/main/java/org/apache/iceberg/parquet/ParquetDictionaryRowGroupFilter.java", "diffHunk": "@@ -278,8 +278,27 @@ public Boolean or(Boolean leftResult, Boolean rightResult) {\n \n       Set<T> dictionary = dict(id, ref.comparator());\n \n-      // ROWS_CANNOT_MATCH if all values of the dictionary are not in the set (the intersection is empty)\n-      return Sets.intersection(dictionary, literalSet).isEmpty() ? ROWS_CANNOT_MATCH : ROWS_MIGHT_MATCH;\n+      // we need to find out the smaller set to iterate through\n+      Set<T> smallerSet;\n+      Set<T> biggerSet;\n+\n+      if (literalSet.size() < dictionary.size()) {\n+        smallerSet = literalSet;\n+        biggerSet = dictionary;\n+      } else {\n+        smallerSet = dictionary;\n+        biggerSet = literalSet;\n+      }\n+\n+      for (T e : smallerSet) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjIxMzczOQ=="}, "originalCommit": {"oid": "52471581a5bfee43eabc33167f5cf667b3ffdd14"}, "originalPosition": 18}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3344, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}