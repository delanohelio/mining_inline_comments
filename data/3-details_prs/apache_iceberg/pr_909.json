{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAxNjMxNjAx", "number": 909, "title": "Parquet: Support constant map for partition values", "bodyText": "This is a follow-up to #896, which added the same constant map support for Avro.\nFixes #575 for Parquet and replaces #585. Andrei did a lot of the work for this in #585.\nCo-authored-by: Andrei Ionescu webdev.andrei@gmail.com", "createdAt": "2020-04-09T20:34:22Z", "url": "https://github.com/apache/iceberg/pull/909", "merged": true, "mergeCommit": {"oid": "3a35c0764a51008fa5c5ecea109c87f92106dbcf"}, "closed": true, "closedAt": "2020-04-11T15:51:34Z", "author": {"login": "rdblue"}, "timelineItems": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcWCnxWAFqTM5MTExMzU4Mw==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcWeHWoAFqTM5MTczNTUyNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkxMTEzNTgz", "url": "https://github.com/apache/iceberg/pull/909#pullrequestreview-391113583", "createdAt": "2020-04-09T20:35:39Z", "commit": {"oid": "6965f4049ea7a9ae013ad0d586bff038b136983b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQyMDozNTo0MFrOGDodsw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQyMDozNTo0MFrOGDodsw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjQ2MTg3NQ==", "bodyText": "I'm moving this out of Avro and adding a callback to convert the constants to PartitionUtil.constantsMap. That way, Spark can supply a conversion function and use it in both places, instead of duplicating the conversion in Avro and Parquet readers.", "url": "https://github.com/apache/iceberg/pull/909#discussion_r406461875", "createdAt": "2020-04-09T20:35:40Z", "author": {"login": "rdblue"}, "path": "core/src/main/java/org/apache/iceberg/avro/ValueReaders.java", "diffHunk": "@@ -597,10 +595,6 @@ protected StructReader(List<ValueReader<?>> readers, Types.StructType struct, Ma\n \n     protected abstract void set(S struct, int pos, Object value);\n \n-    protected Object prepareConstant(Type type, Object value) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6965f4049ea7a9ae013ad0d586bff038b136983b"}, "originalPosition": 25}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6c5db2d4dbf6f7cfd40a1785abbb8cb74539a879", "author": {"user": {"login": "rdblue", "name": "Ryan Blue"}}, "url": "https://github.com/apache/iceberg/commit/6c5db2d4dbf6f7cfd40a1785abbb8cb74539a879", "committedDate": "2020-04-09T20:36:14Z", "message": "Parquet: Support constant map for partition values."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "6965f4049ea7a9ae013ad0d586bff038b136983b", "author": {"user": {"login": "rdblue", "name": "Ryan Blue"}}, "url": "https://github.com/apache/iceberg/commit/6965f4049ea7a9ae013ad0d586bff038b136983b", "committedDate": "2020-04-09T20:30:32Z", "message": "Parquet: Support constant map for partition values."}, "afterCommit": {"oid": "6c5db2d4dbf6f7cfd40a1785abbb8cb74539a879", "author": {"user": {"login": "rdblue", "name": "Ryan Blue"}}, "url": "https://github.com/apache/iceberg/commit/6c5db2d4dbf6f7cfd40a1785abbb8cb74539a879", "committedDate": "2020-04-09T20:36:14Z", "message": "Parquet: Support constant map for partition values."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkxMTE1NzYz", "url": "https://github.com/apache/iceberg/pull/909#pullrequestreview-391115763", "createdAt": "2020-04-09T20:39:20Z", "commit": {"oid": "6c5db2d4dbf6f7cfd40a1785abbb8cb74539a879"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQyMDozOToyMFrOGDok_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQyMDozOToyMFrOGDok_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjQ2Mzc0Mw==", "bodyText": "Moved into Spark.", "url": "https://github.com/apache/iceberg/pull/909#discussion_r406463743", "createdAt": "2020-04-09T20:39:20Z", "author": {"login": "rdblue"}, "path": "spark/src/main/java/org/apache/iceberg/spark/data/SparkValueReaders.java", "diffHunk": "@@ -287,30 +284,5 @@ protected void set(InternalRow struct, int pos, Object value) {\n         struct.setNullAt(pos);\n       }\n     }\n-\n-    @Override\n-    protected Object prepareConstant(Type type, Object value) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6c5db2d4dbf6f7cfd40a1785abbb8cb74539a879"}, "originalPosition": 21}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "db7a4c724a2eaa2b2f6ea8841a3e5fdac4911b62", "author": {"user": {"login": "rdblue", "name": "Ryan Blue"}}, "url": "https://github.com/apache/iceberg/commit/db7a4c724a2eaa2b2f6ea8841a3e5fdac4911b62", "committedDate": "2020-04-09T21:18:19Z", "message": "Support constant map in IcebergGenerics."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "3e102e6263bd943721263dda0ab8a6027e624228", "author": {"user": {"login": "rdblue", "name": "Ryan Blue"}}, "url": "https://github.com/apache/iceberg/commit/3e102e6263bd943721263dda0ab8a6027e624228", "committedDate": "2020-04-09T20:59:53Z", "message": "Support constant map in IcebergGenerics."}, "afterCommit": {"oid": "db7a4c724a2eaa2b2f6ea8841a3e5fdac4911b62", "author": {"user": {"login": "rdblue", "name": "Ryan Blue"}}, "url": "https://github.com/apache/iceberg/commit/db7a4c724a2eaa2b2f6ea8841a3e5fdac4911b62", "committedDate": "2020-04-09T21:18:19Z", "message": "Support constant map in IcebergGenerics."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkxNzM1NTI3", "url": "https://github.com/apache/iceberg/pull/909#pullrequestreview-391735527", "createdAt": "2020-04-11T04:37:23Z", "commit": {"oid": "db7a4c724a2eaa2b2f6ea8841a3e5fdac4911b62"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQwNDozNzoyM1rOGEKVHg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQwNDozNzoyM1rOGEKVHg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAxNjczNA==", "bodyText": "Why not write the data for the parameterized format for which the test is running?", "url": "https://github.com/apache/iceberg/pull/909#discussion_r407016734", "createdAt": "2020-04-11T04:37:23Z", "author": {"login": "rdsr"}, "path": "spark/src/test/java/org/apache/iceberg/spark/source/TestPartitionValues.java", "diffHunk": "@@ -307,4 +308,72 @@ public void testPartitionValueTypes() throws Exception {\n       TestTables.clearTables();\n     }\n   }\n+\n+  @Test\n+  public void testNestedPartitionValues() throws Exception {\n+    Assume.assumeTrue(\"ORC can't project nested partition values\", !format.equalsIgnoreCase(\"orc\"));\n+\n+    String[] columnNames = new String[] {\n+        \"b\", \"i\", \"l\", \"f\", \"d\", \"date\", \"ts\", \"s\", \"bytes\", \"dec_9_0\", \"dec_11_2\", \"dec_38_10\"\n+    };\n+\n+    HadoopTables tables = new HadoopTables(spark.sessionState().newHadoopConf());\n+    Schema nestedSchema = new Schema(optional(1, \"nested\", SUPPORTED_PRIMITIVES.asStruct()));\n+\n+    // create a table around the source data\n+    String sourceLocation = temp.newFolder(\"source_table\").toString();\n+    Table source = tables.create(nestedSchema, sourceLocation);\n+\n+    // write out an Avro data file with all of the data types for source data\n+    List<GenericData.Record> expected = RandomData.generateList(source.schema(), 2, 128735L);\n+    File avroData = temp.newFile(\"data.avro\");\n+    Assert.assertTrue(avroData.delete());\n+    try (FileAppender<GenericData.Record> appender = Avro.write(Files.localOutput(avroData))\n+        .schema(source.schema())\n+        .build()) {\n+      appender.addAll(expected);\n+    }\n+\n+    // add the Avro data file to the source table", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "db7a4c724a2eaa2b2f6ea8841a3e5fdac4911b62"}, "originalPosition": 38}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4779, "cost": 1, "resetAt": "2021-10-29T19:57:52Z"}}}