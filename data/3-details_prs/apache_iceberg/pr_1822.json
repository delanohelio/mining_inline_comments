{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI3MTIyMDk3", "number": 1822, "title": "Flink: add limit pushdown for IcebergTableSource", "bodyText": "related to #1816\nnow the source implement the interface LimitableTableSource,\nafter flink 1.12 ,implement the SupportsLimitPushDown", "createdAt": "2020-11-25T05:01:30Z", "url": "https://github.com/apache/iceberg/pull/1822", "merged": true, "mergeCommit": {"oid": "7645ceba65044184be192a7194a38729133b2e50"}, "closed": true, "closedAt": "2020-12-10T04:06:17Z", "author": {"login": "zhangjun0x01"}, "timelineItems": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdf7xpjgBqjQwMzczNDkzMzY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdiuhUOgBqjQwNzA3MjU2NDQ=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "9fd9e98c729526375b17bebdc9ed833e67f2f9cf", "author": {"user": null}, "url": "https://github.com/apache/iceberg/commit/9fd9e98c729526375b17bebdc9ed833e67f2f9cf", "committedDate": "2020-11-25T04:58:31Z", "message": "add limit pushdown"}, "afterCommit": {"oid": "bd3efd35a40b5c0ab35c4418f4d1a574d1bdd2bd", "author": {"user": null}, "url": "https://github.com/apache/iceberg/commit/bd3efd35a40b5c0ab35c4418f4d1a574d1bdd2bd", "committedDate": "2020-11-25T10:27:11Z", "message": "add limit pushdown"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "bd3efd35a40b5c0ab35c4418f4d1a574d1bdd2bd", "author": {"user": null}, "url": "https://github.com/apache/iceberg/commit/bd3efd35a40b5c0ab35c4418f4d1a574d1bdd2bd", "committedDate": "2020-11-25T10:27:11Z", "message": "add limit pushdown"}, "afterCommit": {"oid": "06ae6164f5ba5d967c3802d830e5914df32314c8", "author": {"user": null}, "url": "https://github.com/apache/iceberg/commit/06ae6164f5ba5d967c3802d830e5914df32314c8", "committedDate": "2020-11-26T01:40:49Z", "message": "add limit pushdown"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQxNjYyMTky", "url": "https://github.com/apache/iceberg/pull/1822#pullrequestreview-541662192", "createdAt": "2020-12-01T08:46:18Z", "commit": {"oid": "06ae6164f5ba5d967c3802d830e5914df32314c8"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQwODo0NjoxOFrOH8dqGw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQwODo0NjoxOFrOH8dqGw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzE2MjUyMw==", "bodyText": "Why disable the  limit push down for flink table source ?", "url": "https://github.com/apache/iceberg/pull/1822#discussion_r533162523", "createdAt": "2020-12-01T08:46:18Z", "author": {"login": "openinx"}, "path": "flink/src/main/java/org/apache/iceberg/flink/IcebergTableSource.java", "diffHunk": "@@ -36,25 +36,30 @@\n \n /**\n  * Flink Iceberg table source.\n- * TODO: Implement {@link FilterableTableSource} and {@link LimitableTableSource}.\n+ * TODO: Implement {@link FilterableTableSource}\n  */\n-public class IcebergTableSource implements StreamTableSource<RowData>, ProjectableTableSource<RowData> {\n+public class IcebergTableSource\n+    implements StreamTableSource<RowData>, ProjectableTableSource<RowData>, LimitableTableSource<RowData> {\n \n   private final TableLoader loader;\n   private final TableSchema schema;\n   private final Map<String, String> properties;\n   private final int[] projectedFields;\n+  private boolean isLimitPushDown = false;\n+  private long limit = -1L;\n \n   public IcebergTableSource(TableLoader loader, TableSchema schema, Map<String, String> properties) {\n-    this(loader, schema, properties, null);\n+    this(loader, schema, properties, null, false, -1);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "06ae6164f5ba5d967c3802d830e5914df32314c8"}, "originalPosition": 20}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQxNjY1MTU2", "url": "https://github.com/apache/iceberg/pull/1822#pullrequestreview-541665156", "createdAt": "2020-12-01T08:48:21Z", "commit": {"oid": "06ae6164f5ba5d967c3802d830e5914df32314c8"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQwODo0ODoyMVrOH8dxCA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQwODo0ODoyMVrOH8dxCA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzE2NDI5Ng==", "bodyText": "Could we add the final modifier ?  Also no need to initialize it with a default false because the constructor will always assign a given value to it.", "url": "https://github.com/apache/iceberg/pull/1822#discussion_r533164296", "createdAt": "2020-12-01T08:48:21Z", "author": {"login": "openinx"}, "path": "flink/src/main/java/org/apache/iceberg/flink/IcebergTableSource.java", "diffHunk": "@@ -36,25 +36,30 @@\n \n /**\n  * Flink Iceberg table source.\n- * TODO: Implement {@link FilterableTableSource} and {@link LimitableTableSource}.\n+ * TODO: Implement {@link FilterableTableSource}\n  */\n-public class IcebergTableSource implements StreamTableSource<RowData>, ProjectableTableSource<RowData> {\n+public class IcebergTableSource\n+    implements StreamTableSource<RowData>, ProjectableTableSource<RowData>, LimitableTableSource<RowData> {\n \n   private final TableLoader loader;\n   private final TableSchema schema;\n   private final Map<String, String> properties;\n   private final int[] projectedFields;\n+  private boolean isLimitPushDown = false;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "06ae6164f5ba5d967c3802d830e5914df32314c8"}, "originalPosition": 15}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQxNjc2MjY4", "url": "https://github.com/apache/iceberg/pull/1822#pullrequestreview-541676268", "createdAt": "2020-12-01T09:01:51Z", "commit": {"oid": "06ae6164f5ba5d967c3802d830e5914df32314c8"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQwOTowMTo1MVrOH8exSw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQwOTowMTo1MVrOH8exSw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzE4MDc0Nw==", "bodyText": "if limit is -1L, then means we've disabled the limit push down , right ?  If so, why do we need two fields ?", "url": "https://github.com/apache/iceberg/pull/1822#discussion_r533180747", "createdAt": "2020-12-01T09:01:51Z", "author": {"login": "openinx"}, "path": "flink/src/main/java/org/apache/iceberg/flink/IcebergTableSource.java", "diffHunk": "@@ -36,25 +36,30 @@\n \n /**\n  * Flink Iceberg table source.\n- * TODO: Implement {@link FilterableTableSource} and {@link LimitableTableSource}.\n+ * TODO: Implement {@link FilterableTableSource}\n  */\n-public class IcebergTableSource implements StreamTableSource<RowData>, ProjectableTableSource<RowData> {\n+public class IcebergTableSource\n+    implements StreamTableSource<RowData>, ProjectableTableSource<RowData>, LimitableTableSource<RowData> {\n \n   private final TableLoader loader;\n   private final TableSchema schema;\n   private final Map<String, String> properties;\n   private final int[] projectedFields;\n+  private boolean isLimitPushDown = false;\n+  private long limit = -1L;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "06ae6164f5ba5d967c3802d830e5914df32314c8"}, "originalPosition": 16}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQxNjc5Nzg4", "url": "https://github.com/apache/iceberg/pull/1822#pullrequestreview-541679788", "createdAt": "2020-12-01T09:06:13Z", "commit": {"oid": "06ae6164f5ba5d967c3802d830e5914df32314c8"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQwOTowNjoxM1rOH8fGSw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQwOTowNjoxM1rOH8fGSw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzE4NjEyMw==", "bodyText": "Here the isLimitPushDown is always true, how about use the string String.format(\", LimitPushDown: %d\", limit) ?", "url": "https://github.com/apache/iceberg/pull/1822#discussion_r533186123", "createdAt": "2020-12-01T09:06:13Z", "author": {"login": "openinx"}, "path": "flink/src/main/java/org/apache/iceberg/flink/IcebergTableSource.java", "diffHunk": "@@ -102,6 +107,21 @@ public String explainSource() {\n     if (projectedFields != null) {\n       explain += \", ProjectedFields: \" + Arrays.toString(projectedFields);\n     }\n+\n+    if (isLimitPushDown) {\n+      explain += String.format(\", LimitPushDown %s, Limit %d\", isLimitPushDown, limit);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "06ae6164f5ba5d967c3802d830e5914df32314c8"}, "originalPosition": 56}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQxNjg0NzEx", "url": "https://github.com/apache/iceberg/pull/1822#pullrequestreview-541684711", "createdAt": "2020-12-01T09:12:07Z", "commit": {"oid": "06ae6164f5ba5d967c3802d830e5914df32314c8"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQwOToxMjowN1rOH8fiHQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQwOToxMjowN1rOH8fiHQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzE5MzI0NQ==", "bodyText": "Do we need this ?  we don't parse the limit from properties, right ?", "url": "https://github.com/apache/iceberg/pull/1822#discussion_r533193245", "createdAt": "2020-12-01T09:12:07Z", "author": {"login": "openinx"}, "path": "flink/src/main/java/org/apache/iceberg/flink/source/ScanContext.java", "diffHunk": "@@ -61,6 +61,8 @@\n   private static final ConfigOption<Long> SPLIT_FILE_OPEN_COST =\n       ConfigOptions.key(\"split-file-open-cost\").longType().defaultValue(null);\n \n+  private static final ConfigOption<Long> LIMIT = ConfigOptions.key(\"limit\").longType().defaultValue(-1L);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "06ae6164f5ba5d967c3802d830e5914df32314c8"}, "originalPosition": 4}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQxNjg3NTY5", "url": "https://github.com/apache/iceberg/pull/1822#pullrequestreview-541687569", "createdAt": "2020-12-01T09:15:29Z", "commit": {"oid": "06ae6164f5ba5d967c3802d830e5914df32314c8"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQwOToxNToyOVrOH8fyAg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQwOToxNToyOVrOH8fyAg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzE5NzMxNA==", "bodyText": "How about just using the context.limit()  in reachedEnd, rather than introducing another new transient field limit ?", "url": "https://github.com/apache/iceberg/pull/1822#discussion_r533197314", "createdAt": "2020-12-01T09:15:29Z", "author": {"login": "openinx"}, "path": "flink/src/main/java/org/apache/iceberg/flink/source/FlinkInputFormat.java", "diffHunk": "@@ -48,6 +48,8 @@\n   private final ScanContext context;\n \n   private transient RowDataIterator iterator;\n+  private transient long currentReadCount = 0L;\n+  private transient long limit;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "06ae6164f5ba5d967c3802d830e5914df32314c8"}, "originalPosition": 5}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQxNjk4MDI4", "url": "https://github.com/apache/iceberg/pull/1822#pullrequestreview-541698028", "createdAt": "2020-12-01T09:21:11Z", "commit": {"oid": "06ae6164f5ba5d967c3802d830e5914df32314c8"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQwOToyMToxMVrOH8gN7A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQwOToyMToxMVrOH8gN7A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzIwNDQ2MA==", "bodyText": "nit: with -> WITH", "url": "https://github.com/apache/iceberg/pull/1822#discussion_r533204460", "createdAt": "2020-12-01T09:21:11Z", "author": {"login": "openinx"}, "path": "flink/src/test/java/org/apache/iceberg/flink/TestFlinkTableSource.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.flink;\n+\n+\n+import java.util.List;\n+import org.apache.iceberg.FileFormat;\n+import org.apache.iceberg.relocated.com.google.common.collect.Lists;\n+import org.junit.After;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n+\n+import static org.junit.Assert.assertTrue;\n+\n+@RunWith(Parameterized.class)\n+public class TestFlinkTableSource extends FlinkCatalogTestBase {\n+  private static final String TABLE_NAME = \"test_table\";\n+\n+  private final FileFormat format;\n+\n+  @Parameterized.Parameters(name = \"catalogName={0}, baseNamespace={1}, format={2}\")\n+  public static Iterable<Object[]> parameters() {\n+    List<Object[]> parameters = Lists.newArrayList();\n+    for (FileFormat format : new FileFormat[] {FileFormat.ORC, FileFormat.AVRO, FileFormat.PARQUET}) {\n+      for (Object[] catalogParams : FlinkCatalogTestBase.parameters()) {\n+        String catalogName = (String) catalogParams[0];\n+        String[] baseNamespace = (String[]) catalogParams[1];\n+        parameters.add(new Object[] {catalogName, baseNamespace, format});\n+      }\n+    }\n+    return parameters;\n+  }\n+\n+  public TestFlinkTableSource(String catalogName, String[] baseNamespace, FileFormat format) {\n+    super(catalogName, baseNamespace);\n+    this.format = format;\n+  }\n+\n+  @Before\n+  public void before() {\n+    super.before();\n+    sql(\"CREATE DATABASE %s\", flinkDatabase);\n+    sql(\"USE CATALOG %s\", catalogName);\n+    sql(\"USE %s\", DATABASE);\n+    sql(\"CREATE TABLE %s (id INT, data VARCHAR) with ('write.format.default'='%s')\", TABLE_NAME, format.name());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "06ae6164f5ba5d967c3802d830e5914df32314c8"}, "originalPosition": 65}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQxNzAzNjc3", "url": "https://github.com/apache/iceberg/pull/1822#pullrequestreview-541703677", "createdAt": "2020-12-01T09:24:39Z", "commit": {"oid": "06ae6164f5ba5d967c3802d830e5914df32314c8"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQwOToyNDozOVrOH8ghCg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQwOToyNDozOVrOH8ghCg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzIwOTM1NA==", "bodyText": "Do we need to add those test cases:\nCase.1 :  SELECT * FROM test LIMIT -1\nCase.2 :  SELECT * FROM test LIMIT 0 \nCase.3:   SELECT * FROM test LIMIT 3 ,  means the limit  exceeds the total rows in table .\nCase.4:   SELECT * FROM test WHERE a = 1 AND LIMIT 2 ,  query data with both limit and filters\netc.", "url": "https://github.com/apache/iceberg/pull/1822#discussion_r533209354", "createdAt": "2020-12-01T09:24:39Z", "author": {"login": "openinx"}, "path": "flink/src/test/java/org/apache/iceberg/flink/TestFlinkTableSource.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.flink;\n+\n+\n+import java.util.List;\n+import org.apache.iceberg.FileFormat;\n+import org.apache.iceberg.relocated.com.google.common.collect.Lists;\n+import org.junit.After;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n+\n+import static org.junit.Assert.assertTrue;\n+\n+@RunWith(Parameterized.class)\n+public class TestFlinkTableSource extends FlinkCatalogTestBase {\n+  private static final String TABLE_NAME = \"test_table\";\n+\n+  private final FileFormat format;\n+\n+  @Parameterized.Parameters(name = \"catalogName={0}, baseNamespace={1}, format={2}\")\n+  public static Iterable<Object[]> parameters() {\n+    List<Object[]> parameters = Lists.newArrayList();\n+    for (FileFormat format : new FileFormat[] {FileFormat.ORC, FileFormat.AVRO, FileFormat.PARQUET}) {\n+      for (Object[] catalogParams : FlinkCatalogTestBase.parameters()) {\n+        String catalogName = (String) catalogParams[0];\n+        String[] baseNamespace = (String[]) catalogParams[1];\n+        parameters.add(new Object[] {catalogName, baseNamespace, format});\n+      }\n+    }\n+    return parameters;\n+  }\n+\n+  public TestFlinkTableSource(String catalogName, String[] baseNamespace, FileFormat format) {\n+    super(catalogName, baseNamespace);\n+    this.format = format;\n+  }\n+\n+  @Before\n+  public void before() {\n+    super.before();\n+    sql(\"CREATE DATABASE %s\", flinkDatabase);\n+    sql(\"USE CATALOG %s\", catalogName);\n+    sql(\"USE %s\", DATABASE);\n+    sql(\"CREATE TABLE %s (id INT, data VARCHAR) with ('write.format.default'='%s')\", TABLE_NAME, format.name());\n+  }\n+\n+  @After\n+  public void clean() {\n+    sql(\"DROP TABLE IF EXISTS %s.%s\", flinkDatabase, TABLE_NAME);\n+    sql(\"DROP DATABASE IF EXISTS %s\", flinkDatabase);\n+    super.clean();\n+  }\n+\n+  @Test\n+  public void testLimitPushDown() {\n+    sql(\"INSERT INTO %s  VALUES (1,'a'),(2,'b')\", TABLE_NAME);\n+\n+    String querySql = String.format(\"SELECT * FROM %s LIMIT 1\", TABLE_NAME);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "06ae6164f5ba5d967c3802d830e5914df32314c8"}, "originalPosition": 79}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "51088aea6a408dc495ceddceb23677003a53807b", "author": {"user": null}, "url": "https://github.com/apache/iceberg/commit/51088aea6a408dc495ceddceb23677003a53807b", "committedDate": "2020-12-04T02:20:44Z", "message": "add limit pushdown"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "06ae6164f5ba5d967c3802d830e5914df32314c8", "author": {"user": null}, "url": "https://github.com/apache/iceberg/commit/06ae6164f5ba5d967c3802d830e5914df32314c8", "committedDate": "2020-11-26T01:40:49Z", "message": "add limit pushdown"}, "afterCommit": {"oid": "c526a49a27c7822b4ef1d965faa8404289ff9d49", "author": {"user": null}, "url": "https://github.com/apache/iceberg/commit/c526a49a27c7822b4ef1d965faa8404289ff9d49", "committedDate": "2020-12-04T02:20:44Z", "message": "add test case\nfix some bugs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3975631f6970dd7c521e62e6e7c5c4f312bd9a95", "author": {"user": null}, "url": "https://github.com/apache/iceberg/commit/3975631f6970dd7c521e62e6e7c5c4f312bd9a95", "committedDate": "2020-12-04T02:42:16Z", "message": "add test case\nfix some bugs"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c526a49a27c7822b4ef1d965faa8404289ff9d49", "author": {"user": null}, "url": "https://github.com/apache/iceberg/commit/c526a49a27c7822b4ef1d965faa8404289ff9d49", "committedDate": "2020-12-04T02:20:44Z", "message": "add test case\nfix some bugs"}, "afterCommit": {"oid": "3975631f6970dd7c521e62e6e7c5c4f312bd9a95", "author": {"user": null}, "url": "https://github.com/apache/iceberg/commit/3975631f6970dd7c521e62e6e7c5c4f312bd9a95", "committedDate": "2020-12-04T02:42:16Z", "message": "add test case\nfix some bugs"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3413, "cost": 1, "resetAt": "2021-10-29T19:57:52Z"}}}