{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzcxMjU0Mjcz", "number": 778, "title": "ORC: Implement TestGenericData and fix reader and writer issues", "bodyText": "This PR implements TestGenericData testing class for ORC and tries to fix issues with the ORC implementation uncovered through this test\nChanges:\n\nTime is now represented with ORC long instead of int. According to Iceberg spec, time is stored with microsecond precision and int is not sufficient for this range (8.64e+10).\nTimestamp with TZ is represented as \"Timestamp Instant\" ORC type, stored as UTC and retrieved as UTC as per spec.\nSeveral changes to GenericOrcReader and GenericOrcWriter to conform with the expected Java types\nI had to make the Iceberg ORC type attribute names (e.g iceberg.binary-type, iceberg.length) in ORCSchemaUtil public. I access them in GenericOrcReader & GenericOrcWriter to instantiate the correct readers/writers since the type information in TypeDescription without attributes is insufficient. A better way to handle this is would probably be to create OrcTypeDescriptionWithIcebergType visitor like we have for Avro and Parquet.\n\nUnsure about:\n\nI am confused about what should be the right way to store Timestamp without TZ. ORC does have a timestamp type. Internally, it will store timestamp along with the local timezone and on the read side, ORC will perform offset calculation between reader and write timezone so that the resultant timestamp will be the same from the user's perspective. I have implemented the changes with this approach. However, another approach can be to just store the timestamp forced to the UTC timezone as a \"Timestamp Instant\" so that ORC does not apply any offset calculations on it and let Iceberg handle the read to LocalDateTime (I believe this is what we do for Avro Generics today).\n\ncc: @edgarRd", "createdAt": "2020-02-05T08:59:00Z", "url": "https://github.com/apache/iceberg/pull/778", "merged": true, "mergeCommit": {"oid": "6739efe0fc701ed8b40ef0880c58d4d26fc5a451"}, "closed": true, "closedAt": "2020-03-31T21:54:31Z", "author": {"login": "shardulm94"}, "timelineItems": {"totalCount": 29, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcDfAARgFqTM1NzE2MjU0NA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcTJlq0AH2gAyMzcxMjU0MjczOmQzODhjOWUwNmJiNDIyZjM0NmRkNDRjM2U0MDlhZjA3MTZjNjg1OTc=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU3MTYyNTQ0", "url": "https://github.com/apache/iceberg/pull/778#pullrequestreview-357162544", "createdAt": "2020-02-12T03:04:42Z", "commit": {"oid": "0e47ae5777e61b2986592ebd334134d77f125c48"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQwMzowNDo0M1rOFoga3A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQwNDo1MjoyNVrOFohuUA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODAxODUyNA==", "bodyText": "nit: might as well remove empty message, or update with proper javadoc if required", "url": "https://github.com/apache/iceberg/pull/778#discussion_r378018524", "createdAt": "2020-02-12T03:04:43Z", "author": {"login": "rdsr"}, "path": "data/src/main/java/org/apache/iceberg/data/orc/GenericOrcWriter.java", "diffHunk": "@@ -40,10 +50,13 @@\n import org.apache.orc.storage.ql.exec.vector.TimestampColumnVector;\n import org.apache.orc.storage.ql.exec.vector.VectorizedRowBatch;\n \n+\n /**", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0e47ae5777e61b2986592ebd334134d77f125c48"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODAzNTEyMQ==", "bodyText": "Seems like vector.nanos[row] is not absolute time in nanos and is like java.sql.Time.getNanos. In that case we don't need to take the % ?", "url": "https://github.com/apache/iceberg/pull/778#discussion_r378035121", "createdAt": "2020-02-12T04:26:08Z", "author": {"login": "rdsr"}, "path": "data/src/main/java/org/apache/iceberg/data/orc/GenericOrcReader.java", "diffHunk": "@@ -172,14 +208,13 @@ public Double convert(ColumnVector vector, int row) {\n     }\n   }\n \n-  private static class TimestampConverter implements Converter<Long> {\n-    private Long convert(TimestampColumnVector vector, int row) {\n-      // compute microseconds past 1970.\n-      return (vector.time[row] / 1000) * 1_000_000 + vector.nanos[row] / 1000;\n+  private static class TimestampTzConverter implements Converter<OffsetDateTime> {\n+    private OffsetDateTime convert(TimestampColumnVector vector, int row) {\n+      return EPOCH.plus(vector.time[row], ChronoUnit.MILLIS).plus(vector.nanos[row] % 1_000_000, ChronoUnit.NANOS);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0e47ae5777e61b2986592ebd334134d77f125c48"}, "originalPosition": 85}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODAzNTgzNg==", "bodyText": "Maybe take out this comment?", "url": "https://github.com/apache/iceberg/pull/778#discussion_r378035836", "createdAt": "2020-02-12T04:30:10Z", "author": {"login": "rdsr"}, "path": "data/src/main/java/org/apache/iceberg/data/orc/GenericOrcReader.java", "diffHunk": "@@ -284,9 +370,9 @@ public BigDecimal convert(ColumnVector vector, int row) {\n       final int length = (int) vector.lengths[row];\n \n       // serialize the keys", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0e47ae5777e61b2986592ebd334134d77f125c48"}, "originalPosition": 213}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODAzOTg0MQ==", "bodyText": "nit: maybe log the long type?", "url": "https://github.com/apache/iceberg/pull/778#discussion_r378039841", "createdAt": "2020-02-12T04:52:11Z", "author": {"login": "rdsr"}, "path": "data/src/main/java/org/apache/iceberg/data/orc/GenericOrcWriter.java", "diffHunk": "@@ -429,26 +537,51 @@ private static Converter buildConverter(TypeDescription schema) {\n       case SHORT:\n         return new ShortConverter();\n       case DATE:\n+        return new DateConverter();\n       case INT:\n         return new IntConverter();\n       case LONG:\n-        return new LongConverter();\n+        ORCSchemaUtil.LongType longType = ORCSchemaUtil.LongType.valueOf(\n+            schema.getAttributeValue(ORCSchemaUtil.ICEBERG_LONG_TYPE_ATTRIBUTE));\n+        switch (longType) {\n+          case TIME:\n+            return new TimeConverter();\n+          case LONG:\n+            return new LongConverter();\n+          default:\n+            throw new IllegalStateException(\"Invalid Long type found in ORC type attribute\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0e47ae5777e61b2986592ebd334134d77f125c48"}, "originalPosition": 221}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODAzOTg4OA==", "bodyText": "log the invalid binary type?", "url": "https://github.com/apache/iceberg/pull/778#discussion_r378039888", "createdAt": "2020-02-12T04:52:25Z", "author": {"login": "rdsr"}, "path": "data/src/main/java/org/apache/iceberg/data/orc/GenericOrcWriter.java", "diffHunk": "@@ -429,26 +537,51 @@ private static Converter buildConverter(TypeDescription schema) {\n       case SHORT:\n         return new ShortConverter();\n       case DATE:\n+        return new DateConverter();\n       case INT:\n         return new IntConverter();\n       case LONG:\n-        return new LongConverter();\n+        ORCSchemaUtil.LongType longType = ORCSchemaUtil.LongType.valueOf(\n+            schema.getAttributeValue(ORCSchemaUtil.ICEBERG_LONG_TYPE_ATTRIBUTE));\n+        switch (longType) {\n+          case TIME:\n+            return new TimeConverter();\n+          case LONG:\n+            return new LongConverter();\n+          default:\n+            throw new IllegalStateException(\"Invalid Long type found in ORC type attribute\");\n+        }\n       case FLOAT:\n         return new FloatConverter();\n       case DOUBLE:\n         return new DoubleConverter();\n       case BINARY:\n-        return new BytesConverter();\n+        ORCSchemaUtil.BinaryType binaryType = ORCSchemaUtil.BinaryType.valueOf(\n+            schema.getAttributeValue(ORCSchemaUtil.ICEBERG_BINARY_TYPE_ATTRIBUTE));\n+        switch (binaryType) {\n+          case UUID:\n+            return new UUIDConverter();\n+          case FIXED:\n+            return new FixedConverter();\n+          case BINARY:\n+            return new BytesConverter();\n+          default:\n+            throw new IllegalStateException(\"Invalid Binary type found in ORC type attribute\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0e47ae5777e61b2986592ebd334134d77f125c48"}, "originalPosition": 239}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU4MzQ1NDE3", "url": "https://github.com/apache/iceberg/pull/778#pullrequestreview-358345417", "createdAt": "2020-02-13T16:06:35Z", "commit": {"oid": "fdc1df63f63b15564659f498d0e57268c10d5830"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QxNjowNjozNVrOFpZyhQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QxNjoxODoxM1rOFpaPig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODk1ODQ2OQ==", "bodyText": "What's Type.TypeID.TIMESTAMP now mapping to?", "url": "https://github.com/apache/iceberg/pull/778#discussion_r378958469", "createdAt": "2020-02-13T16:06:35Z", "author": {"login": "edgarRd"}, "path": "orc/src/main/java/org/apache/iceberg/orc/ORCSchemaUtil.java", "diffHunk": "@@ -70,20 +70,19 @@ public TypeDescription type() {\n   private static final String ICEBERG_ID_ATTRIBUTE = \"iceberg.id\";\n   private static final String ICEBERG_REQUIRED_ATTRIBUTE = \"iceberg.required\";\n \n-  private static final String ICEBERG_BINARY_TYPE_ATTRIBUTE = \"iceberg.binary-type\";\n-  private static final String ICEBERG_INTEGER_TYPE_ATTRIBUTE = \"iceberg.integer-type\";\n-  private static final String ICEBERG_FIELD_LENGTH = \"iceberg.length\";\n+  public static final String ICEBERG_BINARY_TYPE_ATTRIBUTE = \"iceberg.binary-type\";\n+  public static final String ICEBERG_LONG_TYPE_ATTRIBUTE = \"iceberg.long-type\";\n+  public static final String ICEBERG_FIELD_LENGTH = \"iceberg.length\";\n \n   private static final ImmutableMap<Type.TypeID, TypeDescription.Category> TYPE_MAPPING =\n       ImmutableMap.<Type.TypeID, TypeDescription.Category>builder()\n           .put(Type.TypeID.BOOLEAN, TypeDescription.Category.BOOLEAN)\n           .put(Type.TypeID.INTEGER, TypeDescription.Category.INT)\n-          .put(Type.TypeID.TIME, TypeDescription.Category.INT)\n           .put(Type.TypeID.LONG, TypeDescription.Category.LONG)\n+          .put(Type.TypeID.TIME, TypeDescription.Category.LONG)\n           .put(Type.TypeID.FLOAT, TypeDescription.Category.FLOAT)\n           .put(Type.TypeID.DOUBLE, TypeDescription.Category.DOUBLE)\n           .put(Type.TypeID.DATE, TypeDescription.Category.DATE)\n-          .put(Type.TypeID.TIMESTAMP, TypeDescription.Category.TIMESTAMP)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fdc1df63f63b15564659f498d0e57268c10d5830"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODk2NDY0OA==", "bodyText": "Should we create an issue to track this?", "url": "https://github.com/apache/iceberg/pull/778#discussion_r378964648", "createdAt": "2020-02-13T16:16:15Z", "author": {"login": "edgarRd"}, "path": "data/src/main/java/org/apache/iceberg/data/orc/GenericOrcWriter.java", "diffHunk": "@@ -429,26 +534,51 @@ private static Converter buildConverter(TypeDescription schema) {\n       case SHORT:\n         return new ShortConverter();\n       case DATE:\n+        return new DateConverter();\n       case INT:\n         return new IntConverter();\n       case LONG:\n-        return new LongConverter();\n+        ORCSchemaUtil.LongType longType = ORCSchemaUtil.LongType.valueOf(\n+            schema.getAttributeValue(ORCSchemaUtil.ICEBERG_LONG_TYPE_ATTRIBUTE));\n+        switch (longType) {\n+          case TIME:\n+            return new TimeConverter();\n+          case LONG:\n+            return new LongConverter();\n+          default:\n+            throw new IllegalStateException(\"Unhandled Long type found in ORC type attribute: \" + longType);\n+        }\n       case FLOAT:\n         return new FloatConverter();\n       case DOUBLE:\n         return new DoubleConverter();\n       case BINARY:\n-        return new BytesConverter();\n+        ORCSchemaUtil.BinaryType binaryType = ORCSchemaUtil.BinaryType.valueOf(\n+            schema.getAttributeValue(ORCSchemaUtil.ICEBERG_BINARY_TYPE_ATTRIBUTE));\n+        switch (binaryType) {\n+          case UUID:\n+            return new UUIDConverter();\n+          case FIXED:\n+            return new FixedConverter();\n+          case BINARY:\n+            return new BytesConverter();\n+          default:\n+            throw new IllegalStateException(\"Unhandled Binary type found in ORC type attribute: \" + binaryType);\n+        }\n       case STRING:\n       case CHAR:\n       case VARCHAR:\n         return new StringConverter();\n       case DECIMAL:\n-        return schema.getPrecision() <= 18 ?\n-            new Decimal18Converter(schema) :\n-            new Decimal38Converter(schema);\n+        // TODO: Figure out the right cases in which to use the fastpath Decimal18Converter", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fdc1df63f63b15564659f498d0e57268c10d5830"}, "originalPosition": 248}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODk2NTg5OA==", "bodyText": "Can we add a brief description javadoc on the now public constants?", "url": "https://github.com/apache/iceberg/pull/778#discussion_r378965898", "createdAt": "2020-02-13T16:18:13Z", "author": {"login": "edgarRd"}, "path": "orc/src/main/java/org/apache/iceberg/orc/ORCSchemaUtil.java", "diffHunk": "@@ -70,20 +70,19 @@ public TypeDescription type() {\n   private static final String ICEBERG_ID_ATTRIBUTE = \"iceberg.id\";\n   private static final String ICEBERG_REQUIRED_ATTRIBUTE = \"iceberg.required\";\n \n-  private static final String ICEBERG_BINARY_TYPE_ATTRIBUTE = \"iceberg.binary-type\";\n-  private static final String ICEBERG_INTEGER_TYPE_ATTRIBUTE = \"iceberg.integer-type\";\n-  private static final String ICEBERG_FIELD_LENGTH = \"iceberg.length\";\n+  public static final String ICEBERG_BINARY_TYPE_ATTRIBUTE = \"iceberg.binary-type\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fdc1df63f63b15564659f498d0e57268c10d5830"}, "originalPosition": 23}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcwNzg5NDY2", "url": "https://github.com/apache/iceberg/pull/778#pullrequestreview-370789466", "createdAt": "2020-03-07T21:17:30Z", "commit": {"oid": "67c9ee1d2fc92d51dc207d5e3e41f0ed163288f3"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wN1QyMToxNzozMFrOFzRw-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wN1QyMToxNzozMFrOFzRw-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTMxMjc2Mg==", "bodyText": "ORC uniontype would also map to struct\n\nIs this already supported in ORC?", "url": "https://github.com/apache/iceberg/pull/778#discussion_r389312762", "createdAt": "2020-03-07T21:17:30Z", "author": {"login": "rdsr"}, "path": "site/docs/spec.md", "diffHunk": "@@ -483,25 +483,25 @@ Lists must use the [3-level representation](https://github.com/apache/parquet-fo\n \n **Data Type Mappings**\n \n-| Type               | ORC type    | Notes                                                                                   |\n-|--------------------|-------------|-----------------------------------------------------------------------------------------|\n-| **`boolean`**      | `boolean`   |                                                                                         |\n-| **`int`**          | `int`       | ORC `tinyint` and `smallint` would also map to **`int`**.                               |\n-| **`long`**         | `long`      |                                                                                         |\n-| **`float`**        | `float`     |                                                                                         |\n-| **`double`**       | `double`    |                                                                                         |\n-| **`decimal(P,S)`** | `decimal`   |                                                                                         |\n-| **`date`**         | `date`      |                                                                                         |\n-| **`time`**         | `int`       | Stores microseconds from midnight.                                                      |\n-| **`timestamp`**    | `timestamp` |                                                                                         |\n-| **`timestamptz`**  | `struct`    | We should add this to ORC\u2019s type model (ORC-294).                                       |\n-| **`string`**       | `string`    | ORC `varchar` and `char` would also map to **`string`**.                                |\n-| **`uuid`**         | `binary`    |                                                                                         |\n-| **`fixed(L)`**     | `binary`    | The length would not be checked by the ORC reader and should be checked by the adapter. |\n-| **`binary`**       | `binary`    |                                                                                         |\n-| **`struct`**       | `struct`    | ORC `uniontype` would also map to **`struct`**.                                         |\n-| **`list`**         | `array`     |                                                                                         |\n-| **`map`**          | `map`       |                                                                                         |\n+| Type               | ORC type            | Notes                                                                                   |\n+|--------------------|---------------------|-----------------------------------------------------------------------------------------|\n+| **`boolean`**      | `boolean`           |                                                                                         |\n+| **`int`**          | `int`               | ORC `tinyint` and `smallint` would also map to **`int`**.                               |\n+| **`long`**         | `long`              |                                                                                         |\n+| **`float`**        | `float`             |                                                                                         |\n+| **`double`**       | `double`            |                                                                                         |\n+| **`decimal(P,S)`** | `decimal`           |                                                                                         |\n+| **`date`**         | `date`              |                                                                                         |\n+| **`time`**         | `long`              | Stores microseconds from midnight.                                                      |\n+| **`timestamp`**    | `timestamp`         |                                                                                         |\n+| **`timestamptz`**  | `timestamp_instant` |                                       |\n+| **`string`**       | `string`            | ORC `varchar` and `char` would also map to **`string`**.                                |\n+| **`uuid`**         | `binary`            |                                                                                         |\n+| **`fixed(L)`**     | `binary`            | The length would not be checked by the ORC reader and should be checked by the adapter. |\n+| **`binary`**       | `binary`            |                                                                                         |\n+| **`struct`**       | `struct`            | ORC `uniontype` would also map to **`struct`**.                                         |", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "67c9ee1d2fc92d51dc207d5e3e41f0ed163288f3"}, "originalPosition": 39}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcwNzkwMDQ1", "url": "https://github.com/apache/iceberg/pull/778#pullrequestreview-370790045", "createdAt": "2020-03-07T21:30:29Z", "commit": {"oid": "67c9ee1d2fc92d51dc207d5e3e41f0ed163288f3"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wN1QyMTozMDoyOVrOFzR0Jw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wN1QyMTozMDoyOVrOFzR0Jw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTMxMzU3NQ==", "bodyText": "should this test go in the super class DataTest?", "url": "https://github.com/apache/iceberg/pull/778#discussion_r389313575", "createdAt": "2020-03-07T21:30:29Z", "author": {"login": "rdsr"}, "path": "data/src/test/java/org/apache/iceberg/data/orc/TestGenericData.java", "diffHunk": "@@ -0,0 +1,112 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.data.orc;\n+\n+import com.google.common.collect.Lists;\n+import java.io.File;\n+import java.io.IOException;\n+import java.time.LocalDateTime;\n+import java.time.OffsetDateTime;\n+import java.util.List;\n+import java.util.TimeZone;\n+import org.apache.iceberg.Files;\n+import org.apache.iceberg.Schema;\n+import org.apache.iceberg.data.DataTest;\n+import org.apache.iceberg.data.DataTestHelpers;\n+import org.apache.iceberg.data.GenericRecord;\n+import org.apache.iceberg.data.RandomGenericData;\n+import org.apache.iceberg.data.Record;\n+import org.apache.iceberg.io.CloseableIterable;\n+import org.apache.iceberg.io.FileAppender;\n+import org.apache.iceberg.orc.ORC;\n+import org.apache.iceberg.types.Types;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+import static org.apache.iceberg.types.Types.NestedField.required;\n+\n+public class TestGenericData extends DataTest {\n+\n+  @Override\n+  protected void writeAndValidate(Schema schema) throws IOException {\n+    List<Record> expected = RandomGenericData.generate(schema, 100, 0L);\n+\n+    File testFile = temp.newFile();\n+    Assert.assertTrue(\"Delete should succeed\", testFile.delete());\n+\n+    try (FileAppender<Record> writer = ORC.write(Files.localOutput(testFile))\n+        .schema(schema)\n+        .createWriterFunc(GenericOrcWriter::buildWriter)\n+        .build()) {\n+      for (Record rec : expected) {\n+        writer.add(rec);\n+      }\n+    }\n+\n+    List<Record> rows;\n+    try (CloseableIterable<Record> reader = ORC.read(Files.localInput(testFile))\n+        .schema(schema)\n+        .createReaderFunc(fileSchema -> GenericOrcReader.buildReader(schema, fileSchema))\n+        .build()) {\n+      rows = Lists.newArrayList(reader);\n+    }\n+\n+    for (int i = 0; i < expected.size(); i += 1) {\n+      DataTestHelpers.assertEquals(schema.asStruct(), expected.get(i), rows.get(i));\n+    }\n+  }\n+\n+  @Test\n+  public void writeAndValidateTimestamps() throws IOException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "67c9ee1d2fc92d51dc207d5e3e41f0ed163288f3"}, "originalPosition": 77}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc0Njc3MzY3", "url": "https://github.com/apache/iceberg/pull/778#pullrequestreview-374677367", "createdAt": "2020-03-14T00:19:59Z", "commit": {"oid": "67c9ee1d2fc92d51dc207d5e3e41f0ed163288f3"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNFQwMDoyMDowMFrOF2We8w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNFQwMDoyMDowMFrOF2We8w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjUzNTc5NQ==", "bodyText": "Any use of ByteBuffer.array() without arrayOffset(), position(), and limit() is concerning. Here, there is a strong dependence between this code and the behavior of the wrapped converter: it must almost always allocate a new ByteBuffer to return.", "url": "https://github.com/apache/iceberg/pull/778#discussion_r392535795", "createdAt": "2020-03-14T00:20:00Z", "author": {"login": "rdblue"}, "path": "data/src/main/java/org/apache/iceberg/data/orc/GenericOrcReader.java", "diffHunk": "@@ -189,30 +224,85 @@ public Long convert(ColumnVector vector, int row) {\n     }\n   }\n \n-  private static class BinaryConverter implements Converter<byte[]> {\n+  private static class TimestampConverter implements Converter<LocalDateTime> {\n+    private final ZoneOffset localZoneOffset;\n+\n+    TimestampConverter() {\n+      this.localZoneOffset = OffsetDateTime.now().getOffset();\n+    }\n+\n+    private LocalDateTime convert(TimestampColumnVector vector, int row) {\n+      return LocalDateTime.ofEpochSecond(vector.time[row] / 1_000, vector.nanos[row], localZoneOffset);\n+    }\n+\n+    @Override\n+    public LocalDateTime convert(ColumnVector vector, int row) {\n+      int rowIndex = vector.isRepeating ? 0 : row;\n+      if (!vector.noNulls && vector.isNull[rowIndex]) {\n+        return null;\n+      } else {\n+        return convert((TimestampColumnVector) vector, rowIndex);\n+      }\n+    }\n+  }\n+\n+  private static class FixedConverter implements Converter<byte[]> {\n     @Override\n     public byte[] convert(ColumnVector vector, int row) {\n       int rowIndex = vector.isRepeating ? 0 : row;\n       if (!vector.noNulls && vector.isNull[rowIndex]) {\n         return null;\n       } else {\n         BytesColumnVector bytesVector = (BytesColumnVector) vector;\n-        return Arrays.copyOfRange(bytesVector.vector[rowIndex],\n-            bytesVector.start[rowIndex],\n+        return Arrays.copyOfRange(bytesVector.vector[rowIndex], bytesVector.start[rowIndex],\n             bytesVector.start[rowIndex] + bytesVector.length[rowIndex]);\n       }\n     }\n   }\n \n+  private static class BinaryConverter implements Converter<ByteBuffer> {\n+    @Override\n+    public ByteBuffer convert(ColumnVector vector, int row) {\n+      int rowIndex = vector.isRepeating ? 0 : row;\n+      if (!vector.noNulls && vector.isNull[rowIndex]) {\n+        return null;\n+      } else {\n+        BytesColumnVector bytesVector = (BytesColumnVector) vector;\n+        ByteBuffer buf = ByteBuffer.allocate(bytesVector.length[rowIndex]);\n+        buf.put(bytesVector.vector[rowIndex], bytesVector.start[rowIndex], bytesVector.length[rowIndex]);\n+        buf.rewind();\n+        return buf;\n+      }\n+    }\n+  }\n+\n+  private static class UUIDConverter implements Converter<UUID> {\n+    @Override\n+    public UUID convert(ColumnVector vector, int row) {\n+      int rowIndex = vector.isRepeating ? 0 : row;\n+      if (!vector.noNulls && vector.isNull[rowIndex]) {\n+        return null;\n+      } else {\n+        BytesColumnVector bytesVector = (BytesColumnVector) vector;\n+        ByteBuffer buf = ByteBuffer.allocate(16);\n+        buf.put(bytesVector.vector[rowIndex], bytesVector.start[rowIndex], 16);\n+        buf.rewind();\n+        long mostSigBits = buf.getLong();\n+        long leastSigBits = buf.getLong();\n+        return new UUID(mostSigBits, leastSigBits);\n+      }\n+    }\n+  }\n+\n   private static class StringConverter implements Converter<String> {\n     @Override\n     public String convert(ColumnVector vector, int row) {\n       BinaryConverter converter = new BinaryConverter();\n-      byte[] byteData = converter.convert(vector, row);\n-      if (byteData == null) {\n+      ByteBuffer byteBuffer = converter.convert(vector, row);\n+      if (byteBuffer == null) {\n         return null;\n       }\n-      return new String(byteData, StandardCharsets.UTF_8);\n+      return new String(byteBuffer.array(), StandardCharsets.UTF_8);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "67c9ee1d2fc92d51dc207d5e3e41f0ed163288f3"}, "originalPosition": 182}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc1NjY1Njgw", "url": "https://github.com/apache/iceberg/pull/778#pullrequestreview-375665680", "createdAt": "2020-03-17T00:27:05Z", "commit": {"oid": "67c9ee1d2fc92d51dc207d5e3e41f0ed163288f3"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QwMDoyNzowNVrOF3KHZw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QwMDoyNzowNVrOF3KHZw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzM4MTczNQ==", "bodyText": "Doesn't this report milliseconds twice?\nOffsetDateTime now = OffsetDateTime.now(); // 2020-03-17T00:21:46.844Z\nlong micros = ChronoUnit.MICROS.between(EPOCH, now); // 1584404506844000\nlong millis = micros / 1_000; // 1584404506844 <--- note 844 is millis\nlong nanos = (micros % 1_000_000) * 1_000; // 844000000 <--- millis are included\n\nDoes the millis/nanos format discard digits above 1,000,000 by convention? (ping @omalley)", "url": "https://github.com/apache/iceberg/pull/778#discussion_r393381735", "createdAt": "2020-03-17T00:27:05Z", "author": {"login": "rdblue"}, "path": "data/src/main/java/org/apache/iceberg/data/orc/GenericOrcWriter.java", "diffHunk": "@@ -229,27 +293,68 @@ public void addValue(int rowId, byte[] data, ColumnVector output) {\n         output.isNull[rowId] = true;\n       } else {\n         output.isNull[rowId] = false;\n-        // getBinary always makes a copy, so we don't need to worry about it\n-        // being changed behind our back.\n         ((BytesColumnVector) output).setRef(rowId, data, 0, data.length);\n       }\n     }\n   }\n \n-  static class TimestampConverter implements Converter<Long> {\n+  static class DateConverter implements Converter<LocalDate> {\n     @Override\n-    public Class<Long> getJavaClass() {\n-      return Long.class;\n+    public Class<LocalDate> getJavaClass() {\n+      return LocalDate.class;\n     }\n \n-    public void addValue(int rowId, Long data, ColumnVector output) {\n+    public void addValue(int rowId, LocalDate data, ColumnVector output) {\n+      if (data == null) {\n+        output.noNulls = false;\n+        output.isNull[rowId] = true;\n+      } else {\n+        output.isNull[rowId] = false;\n+        ((LongColumnVector) output).vector[rowId] = ChronoUnit.DAYS.between(EPOCH_DAY, data);\n+      }\n+    }\n+  }\n+\n+  static class TimestampTzConverter implements Converter<OffsetDateTime> {\n+    @Override\n+    public Class<OffsetDateTime> getJavaClass() {\n+      return OffsetDateTime.class;\n+    }\n+\n+    public void addValue(int rowId, OffsetDateTime data, ColumnVector output) {\n+      if (data == null) {\n+        output.noNulls = false;\n+        output.isNull[rowId] = true;\n+      } else {\n+        output.isNull[rowId] = false;\n+        TimestampColumnVector cv = (TimestampColumnVector) output;\n+        long micros = ChronoUnit.MICROS.between(EPOCH, data);\n+        cv.time[rowId] = micros / 1_000; // millis\n+        cv.nanos[rowId] = (int) (micros % 1_000_000) * 1_000; // nanos", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "67c9ee1d2fc92d51dc207d5e3e41f0ed163288f3"}, "originalPosition": 151}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "67c9ee1d2fc92d51dc207d5e3e41f0ed163288f3", "author": {"user": {"login": "shardulm94", "name": "Shardul Mahadik"}}, "url": "https://github.com/apache/iceberg/commit/67c9ee1d2fc92d51dc207d5e3e41f0ed163288f3", "committedDate": "2020-02-26T20:08:49Z", "message": "Fix Decimal18Converter for GenericORCWriter"}, "afterCommit": {"oid": "59f13547766c134721be3ace46507750a9856f8a", "author": {"user": {"login": "shardulm94", "name": "Shardul Mahadik"}}, "url": "https://github.com/apache/iceberg/commit/59f13547766c134721be3ace46507750a9856f8a", "committedDate": "2020-03-18T02:33:23Z", "message": "Address PR comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc5MDcwMjA3", "url": "https://github.com/apache/iceberg/pull/778#pullrequestreview-379070207", "createdAt": "2020-03-22T23:47:21Z", "commit": {"oid": "5c16f7c4ce5688737030fb08731ebfc186dda3fc"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMlQyMzo0NzoyMVrOF5zzjQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMlQyMzo0NzoyMVrOF5zzjQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjE2MTkzMw==", "bodyText": "This should not copy. Instead, it should point a ByteBuffer at the underlying bytes in the vector using ByteBuffer.wrap(array, offset, length).", "url": "https://github.com/apache/iceberg/pull/778#discussion_r396161933", "createdAt": "2020-03-22T23:47:21Z", "author": {"login": "rdblue"}, "path": "data/src/main/java/org/apache/iceberg/data/orc/GenericOrcReader.java", "diffHunk": "@@ -189,30 +226,89 @@ public Long convert(ColumnVector vector, int row) {\n     }\n   }\n \n-  private static class BinaryConverter implements Converter<byte[]> {\n+  private static class TimestampConverter implements Converter<LocalDateTime> {\n+    private final ZoneId localZoneId;\n+\n+    TimestampConverter() {\n+      this.localZoneId = ZoneId.systemDefault();\n+    }\n+\n+    private LocalDateTime convert(TimestampColumnVector vector, int row) {\n+      return ZonedDateTime\n+          .ofInstant(Instant.ofEpochSecond(vector.time[row] / 1_000, vector.nanos[row]), localZoneId)\n+          .toLocalDateTime();\n+    }\n+\n+    @Override\n+    public LocalDateTime convert(ColumnVector vector, int row) {\n+      int rowIndex = vector.isRepeating ? 0 : row;\n+      if (!vector.noNulls && vector.isNull[rowIndex]) {\n+        return null;\n+      } else {\n+        return convert((TimestampColumnVector) vector, rowIndex);\n+      }\n+    }\n+  }\n+\n+  private static class FixedConverter implements Converter<byte[]> {\n     @Override\n     public byte[] convert(ColumnVector vector, int row) {\n       int rowIndex = vector.isRepeating ? 0 : row;\n       if (!vector.noNulls && vector.isNull[rowIndex]) {\n         return null;\n       } else {\n         BytesColumnVector bytesVector = (BytesColumnVector) vector;\n-        return Arrays.copyOfRange(bytesVector.vector[rowIndex],\n-            bytesVector.start[rowIndex],\n+        return Arrays.copyOfRange(bytesVector.vector[rowIndex], bytesVector.start[rowIndex],\n             bytesVector.start[rowIndex] + bytesVector.length[rowIndex]);\n       }\n     }\n   }\n \n+  private static class BinaryConverter implements Converter<ByteBuffer> {\n+    @Override\n+    public ByteBuffer convert(ColumnVector vector, int row) {\n+      int rowIndex = vector.isRepeating ? 0 : row;\n+      if (!vector.noNulls && vector.isNull[rowIndex]) {\n+        return null;\n+      } else {\n+        BytesColumnVector bytesVector = (BytesColumnVector) vector;\n+        ByteBuffer buf = ByteBuffer.allocate(bytesVector.length[rowIndex]);\n+        buf.put(bytesVector.vector[rowIndex], bytesVector.start[rowIndex], bytesVector.length[rowIndex]);\n+        buf.rewind();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5c16f7c4ce5688737030fb08731ebfc186dda3fc"}, "originalPosition": 151}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc5MDcwNDEw", "url": "https://github.com/apache/iceberg/pull/778#pullrequestreview-379070410", "createdAt": "2020-03-22T23:49:33Z", "commit": {"oid": "5c16f7c4ce5688737030fb08731ebfc186dda3fc"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMlQyMzo0OTozM1rOF5z0cg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMlQyMzo0OTozM1rOF5z0cg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjE2MjE2Mg==", "bodyText": "I prefer this style, but it's better not to make non-functional changes like this to avoid commit conflicts.", "url": "https://github.com/apache/iceberg/pull/778#discussion_r396162162", "createdAt": "2020-03-22T23:49:33Z", "author": {"login": "rdblue"}, "path": "data/src/main/java/org/apache/iceberg/data/orc/GenericOrcReader.java", "diffHunk": "@@ -236,11 +332,7 @@ public BigDecimal convert(ColumnVector vector, int row) {\n       Preconditions.checkArgument(icebergField.type().isListType());\n       TypeDescription child = schema.getChildren().get(0);\n \n-      childConverter = buildConverter(icebergField\n-          .type()\n-          .asListType()\n-          .fields()\n-          .get(0), child);\n+      childConverter = buildConverter(icebergField.type().asListType().fields().get(0), child);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5c16f7c4ce5688737030fb08731ebfc186dda3fc"}, "originalPosition": 213}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc5MDcwNTAz", "url": "https://github.com/apache/iceberg/pull/778#pullrequestreview-379070503", "createdAt": "2020-03-22T23:50:35Z", "commit": {"oid": "5c16f7c4ce5688737030fb08731ebfc186dda3fc"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMlQyMzo1MDozNVrOF5z02Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMlQyMzo1MDozNVrOF5z02Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjE2MjI2NQ==", "bodyText": "Is the spec up to date with these ORC metadata fields?", "url": "https://github.com/apache/iceberg/pull/778#discussion_r396162265", "createdAt": "2020-03-22T23:50:35Z", "author": {"login": "rdblue"}, "path": "data/src/main/java/org/apache/iceberg/data/orc/GenericOrcReader.java", "diffHunk": "@@ -351,20 +441,43 @@ private static Converter buildConverter(final Types.NestedField icebergField,\n       case SHORT:\n         return new ShortConverter();\n       case DATE:\n+        return new DateConverter();\n       case INT:\n         return new IntConverter();\n       case LONG:\n-        return new LongConverter();\n+        ORCSchemaUtil.LongType longType =\n+            ORCSchemaUtil.LongType.valueOf(schema.getAttributeValue(ORCSchemaUtil.ICEBERG_LONG_TYPE_ATTRIBUTE));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5c16f7c4ce5688737030fb08731ebfc186dda3fc"}, "originalPosition": 250}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc5MDcwNjUz", "url": "https://github.com/apache/iceberg/pull/778#pullrequestreview-379070653", "createdAt": "2020-03-22T23:52:06Z", "commit": {"oid": "5c16f7c4ce5688737030fb08731ebfc186dda3fc"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMlQyMzo1MjowN1rOF5z1ZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMlQyMzo1MjowN1rOF5z1ZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjE2MjQwNQ==", "bodyText": "Is this rename necessary?", "url": "https://github.com/apache/iceberg/pull/778#discussion_r396162405", "createdAt": "2020-03-22T23:52:07Z", "author": {"login": "rdblue"}, "path": "data/src/test/java/org/apache/iceberg/data/DataTest.java", "diffHunk": "@@ -48,7 +48,7 @@\n       optional(105, \"f\", Types.FloatType.get()),\n       required(106, \"d\", Types.DoubleType.get()),\n       optional(107, \"date\", Types.DateType.get()),\n-      required(108, \"ts\", Types.TimestampType.withZone()),\n+      required(108, \"tsTz\", Types.TimestampType.withZone()),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5c16f7c4ce5688737030fb08731ebfc186dda3fc"}, "originalPosition": 5}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc5MDcxMDIy", "url": "https://github.com/apache/iceberg/pull/778#pullrequestreview-379071022", "createdAt": "2020-03-22T23:55:34Z", "commit": {"oid": "5c16f7c4ce5688737030fb08731ebfc186dda3fc"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMlQyMzo1NTozNFrOF5z28A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMlQyMzo1NTozNFrOF5z28A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjE2MjgwMA==", "bodyText": "Why is this now public?", "url": "https://github.com/apache/iceberg/pull/778#discussion_r396162800", "createdAt": "2020-03-22T23:55:34Z", "author": {"login": "rdblue"}, "path": "orc/src/main/java/org/apache/iceberg/orc/ORCSchemaUtil.java", "diffHunk": "@@ -41,12 +41,12 @@\n  */\n public final class ORCSchemaUtil {\n \n-  private enum BinaryType {\n+  public enum BinaryType {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5c16f7c4ce5688737030fb08731ebfc186dda3fc"}, "originalPosition": 5}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc5MDcxMzM1", "url": "https://github.com/apache/iceberg/pull/778#pullrequestreview-379071335", "createdAt": "2020-03-22T23:58:30Z", "commit": {"oid": "5c16f7c4ce5688737030fb08731ebfc186dda3fc"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMlQyMzo1ODozMFrOF5z4KA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMlQyMzo1ODozMFrOF5z4KA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjE2MzExMg==", "bodyText": "Can you remove unnecessary whitespace changes to reduce commit problems?", "url": "https://github.com/apache/iceberg/pull/778#discussion_r396163112", "createdAt": "2020-03-22T23:58:30Z", "author": {"login": "rdblue"}, "path": "site/docs/spec.md", "diffHunk": "@@ -651,5 +651,3 @@ This serialization scheme is for storing single values as individual binary valu\n | **`struct`**                 | Not supported                                                                                                |\n | **`list`**                   | Not supported                                                                                                |\n | **`map`**                    | Not supported                                                                                                |\n-\n-", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5c16f7c4ce5688737030fb08731ebfc186dda3fc"}, "originalPosition": 50}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3927723631379aec0da36d58f667904230a10e0e", "author": {"user": {"login": "shardulm94", "name": "Shardul Mahadik"}}, "url": "https://github.com/apache/iceberg/commit/3927723631379aec0da36d58f667904230a10e0e", "committedDate": "2020-03-31T12:37:54Z", "message": "ORC: Implement DataTest for ORC Generics"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f68a55eec019cce0d6211c65418b29894ca4a0d6", "author": {"user": {"login": "shardulm94", "name": "Shardul Mahadik"}}, "url": "https://github.com/apache/iceberg/commit/f68a55eec019cce0d6211c65418b29894ca4a0d6", "committedDate": "2020-03-31T12:37:54Z", "message": "F"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "284a4ef9bf6f9b613b72e91a21b087b2d31b455f", "author": {"user": {"login": "shardulm94", "name": "Shardul Mahadik"}}, "url": "https://github.com/apache/iceberg/commit/284a4ef9bf6f9b613b72e91a21b087b2d31b455f", "committedDate": "2020-03-31T12:37:54Z", "message": "Address PR comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fdc87cd18789251311399e1a61b0cfdc61af97bd", "author": {"user": {"login": "shardulm94", "name": "Shardul Mahadik"}}, "url": "https://github.com/apache/iceberg/commit/fdc87cd18789251311399e1a61b0cfdc61af97bd", "committedDate": "2020-03-31T12:37:54Z", "message": "Fix Spark tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d1b88aa049adad9178652ae9cacd6d5c6d101bfa", "author": {"user": {"login": "shardulm94", "name": "Shardul Mahadik"}}, "url": "https://github.com/apache/iceberg/commit/d1b88aa049adad9178652ae9cacd6d5c6d101bfa", "committedDate": "2020-03-31T12:37:54Z", "message": "Fix timestamp print value in Spark rowEntryToString"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "707556d2ccf45e77263fda9317490f67b11c4166", "author": {"user": {"login": "shardulm94", "name": "Shardul Mahadik"}}, "url": "https://github.com/apache/iceberg/commit/707556d2ccf45e77263fda9317490f67b11c4166", "committedDate": "2020-03-31T12:37:54Z", "message": "Address PR comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e9278d7548d8fa586e1299f080106583c759d6c5", "author": {"user": {"login": "shardulm94", "name": "Shardul Mahadik"}}, "url": "https://github.com/apache/iceberg/commit/e9278d7548d8fa586e1299f080106583c759d6c5", "committedDate": "2020-03-31T12:37:54Z", "message": "Fix Decimal18Converter for GenericORCWriter"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2fe9508a596b996526423c29c2417af4aa22a6be", "author": {"user": {"login": "shardulm94", "name": "Shardul Mahadik"}}, "url": "https://github.com/apache/iceberg/commit/2fe9508a596b996526423c29c2417af4aa22a6be", "committedDate": "2020-03-31T12:37:54Z", "message": "Address PR comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "75547316c8be13304c9dcdc9b6e5ad3ab08dc517", "author": {"user": {"login": "shardulm94", "name": "Shardul Mahadik"}}, "url": "https://github.com/apache/iceberg/commit/75547316c8be13304c9dcdc9b6e5ad3ab08dc517", "committedDate": "2020-03-31T12:37:54Z", "message": "Fix versions.lock after rebase"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "eeebd09005012ec729f5b0adbe01f918442c77e1", "author": {"user": {"login": "shardulm94", "name": "Shardul Mahadik"}}, "url": "https://github.com/apache/iceberg/commit/eeebd09005012ec729f5b0adbe01f918442c77e1", "committedDate": "2020-03-31T12:37:54Z", "message": "Address PR comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "52e4a75d7024a70cb591cb8fc66095aa54a85398", "author": {"user": {"login": "shardulm94", "name": "Shardul Mahadik"}}, "url": "https://github.com/apache/iceberg/commit/52e4a75d7024a70cb591cb8fc66095aa54a85398", "committedDate": "2020-03-31T12:37:54Z", "message": "Incorporate changes from omalley's timestamp fixes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "93ea69c53fe1f1a21233c54a190f9e9ec832788d", "author": {"user": {"login": "shardulm94", "name": "Shardul Mahadik"}}, "url": "https://github.com/apache/iceberg/commit/93ea69c53fe1f1a21233c54a190f9e9ec832788d", "committedDate": "2020-03-31T12:37:54Z", "message": "Add timestamp data test for dates before epoch"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9217f87235ffecb8463e78aaca2849767606688a", "author": {"user": {"login": "shardulm94", "name": "Shardul Mahadik"}}, "url": "https://github.com/apache/iceberg/commit/9217f87235ffecb8463e78aaca2849767606688a", "committedDate": "2020-03-31T12:42:48Z", "message": "Fix GenericDataTest after rebasing from latest master"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "6a4f062dab1ee7be6eca18c392e86a8604fa83cf", "author": {"user": {"login": "shardulm94", "name": "Shardul Mahadik"}}, "url": "https://github.com/apache/iceberg/commit/6a4f062dab1ee7be6eca18c392e86a8604fa83cf", "committedDate": "2020-03-31T12:32:17Z", "message": "Add timestamp data test for dates before epoch"}, "afterCommit": {"oid": "9217f87235ffecb8463e78aaca2849767606688a", "author": {"user": {"login": "shardulm94", "name": "Shardul Mahadik"}}, "url": "https://github.com/apache/iceberg/commit/9217f87235ffecb8463e78aaca2849767606688a", "committedDate": "2020-03-31T12:42:48Z", "message": "Fix GenericDataTest after rebasing from latest master"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg0OTU1MzE2", "url": "https://github.com/apache/iceberg/pull/778#pullrequestreview-384955316", "createdAt": "2020-03-31T17:33:04Z", "commit": {"oid": "9217f87235ffecb8463e78aaca2849767606688a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxNzozMzowNFrOF-gq-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxNzozMzowNFrOF-gq-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTA5MTMyMQ==", "bodyText": "Looks like this should be time and not date?", "url": "https://github.com/apache/iceberg/pull/778#discussion_r401091321", "createdAt": "2020-03-31T17:33:04Z", "author": {"login": "rdblue"}, "path": "site/docs/spec.md", "diffHunk": "@@ -486,26 +486,29 @@ Lists must use the [3-level representation](https://github.com/apache/parquet-fo\n \n **Data Type Mappings**\n \n-| Type               | ORC type    | Notes                                                                                   |\n-|--------------------|-------------|-----------------------------------------------------------------------------------------|\n-| **`boolean`**      | `boolean`   |                                                                                         |\n-| **`int`**          | `int`       | ORC `tinyint` and `smallint` would also map to **`int`**.                               |\n-| **`long`**         | `long`      |                                                                                         |\n-| **`float`**        | `float`     |                                                                                         |\n-| **`double`**       | `double`    |                                                                                         |\n-| **`decimal(P,S)`** | `decimal`   |                                                                                         |\n-| **`date`**         | `date`      |                                                                                         |\n-| **`time`**         | `int`       | Stores microseconds from midnight.                                                      |\n-| **`timestamp`**    | `timestamp` |                                                                                         |\n-| **`timestamptz`**  | `struct`    | We should add this to ORC\u2019s type model (ORC-294).                                       |\n-| **`string`**       | `string`    | ORC `varchar` and `char` would also map to **`string`**.                                |\n-| **`uuid`**         | `binary`    |                                                                                         |\n-| **`fixed(L)`**     | `binary`    | The length would not be checked by the ORC reader and should be checked by the adapter. |\n-| **`binary`**       | `binary`    |                                                                                         |\n-| **`struct`**       | `struct`    | ORC `uniontype` would also map to **`struct`**.                                         |\n-| **`list`**         | `array`     |                                                                                         |\n-| **`map`**          | `map`       |                                                                                         |\n+| Type               | ORC type            | ORC type attributes                                  | Notes                                                                                   |\n+|--------------------|---------------------|------------------------------------------------------|-----------------------------------------------------------------------------------------|\n+| **`boolean`**      | `boolean`           |                                                      |                                                                                         |\n+| **`int`**          | `int`               |                                                      | ORC `tinyint` and `smallint` would also map to **`int`**.                               |\n+| **`long`**         | `long`              |                                                      |                                                                                         |\n+| **`float`**        | `float`             |                                                      |                                                                                         |\n+| **`double`**       | `double`            |                                                      |                                                                                         |\n+| **`decimal(P,S)`** | `decimal`           |                                                      |                                                                                         |\n+| **`date`**         | `date`              |                                                      |                                                                                         |\n+| **`time`**         | `long`              | `iceberg.long-type`=`DATE`                           | Stores microseconds from midnight.                                                      |", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9217f87235ffecb8463e78aaca2849767606688a"}, "originalPosition": 32}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d388c9e06bb422f346dd44c3e409af0716c68597", "author": {"user": {"login": "shardulm94", "name": "Shardul Mahadik"}}, "url": "https://github.com/apache/iceberg/commit/d388c9e06bb422f346dd44c3e409af0716c68597", "committedDate": "2020-03-31T21:00:56Z", "message": "Fix typo"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4917, "cost": 1, "resetAt": "2021-10-29T19:57:52Z"}}}