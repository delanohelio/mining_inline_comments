{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAyMzIzOTQx", "number": 919, "title": "[ISSUE #672] Add SupportsNamespaces on HiveCatalog and HadoopCatalog", "bodyText": "[ISSUE #672] Add SupportsNamespaces on HiveCatalog and HadoopCatalog\n[ISSUE #672] Fix the code address comments by Jerryshao\n[ISSUE #672] Add the empty namespace check in nameSpaceToHiveDb\n[ISSUE #672] Fix the code address comments by Ryan Blue\n[ISSUE #672] Fix the code address comments by Ryan Blue\n[ISSUE #672] Fix the code address comments by Ryan Blue\n[ISSUE #672] Fix RuntimeException to RuntimeIOException\n[ISSUE #672] Fix the code address comments by Ryan Blue\n[ISSUE #672] Fix the code address comments by Jerry Shao\n[ISSUE #672] Fix the code address comments by Ryan Blue\n[ISSUE #672] Fix the code address comments by Ryan Blue\n[ISSUE #672] Fix the code address comments by Ryan Blue\n[ISSUE #672] Fix the code address comments by Ryan Blue", "createdAt": "2020-04-12T11:19:27Z", "url": "https://github.com/apache/iceberg/pull/919", "merged": true, "mergeCommit": {"oid": "34126d20d29fa12848dd28b305a918f8a1219979"}, "closed": true, "closedAt": "2020-04-17T21:35:20Z", "author": {"login": "XiaokunDing"}, "timelineItems": {"totalCount": 36, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcW4TKlAH2gAyNDAyMzIzOTQxOmQ5NjQ0NWMxNGZhZmQxZWMwMjM0ZjBmNGE1MWM0NDY5YTQ3ZTNmZjM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcYVYyqgH2gAyNDAyMzIzOTQxOjljZDBlMzZiZjI5YzQ0ZDNmMjFhODE2OTFmM2IzYjEzNzkyNzVkM2M=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "d96445c14fafd1ec0234f0f4a51c4469a47e3ff3", "author": {"user": {"login": "XiaokunDing", "name": "XiaokunDing"}}, "url": "https://github.com/apache/iceberg/commit/d96445c14fafd1ec0234f0f4a51c4469a47e3ff3", "committedDate": "2020-04-12T11:08:02Z", "message": "[ISSUE #672] Add SupportsNamespaces on HiveCatalog and HadoopCatalog\n\n[ISSUE #672] Add SupportsNamespaces on HiveCatalog and HadoopCatalog\n\n[ISSUE #672] Fix the code address comments by Jerryshao\n\n[ISSUE #672] Add the empty namespace check in nameSpaceToHiveDb\n\n[ISSUE #672] Fix the code address comments by Ryan Blue\n\n[ISSUE #672] Fix the code address comments by Ryan Blue\n\n[ISSUE #672] Fix the code address comments by Ryan Blue\n\n[ISSUE #672] Fix RuntimeException to RuntimeIOException\n\n[ISSUE #672] Fix the code address comments by Ryan Blue\n\n[ISSUE #672] Fix the code address comments by Jerry Shao\n\n[ISSUE #672] Fix the code address comments by Ryan Blue\n\n[ISSUE #672] Fix the code address comments by Ryan Blue\n\n[ISSUE #672] Fix the code address comments by Ryan Blue\n\n[ISSUE #672] Fix the code address comments by Ryan Blue"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkyMzc2NjEw", "url": "https://github.com/apache/iceberg/pull/919#pullrequestreview-392376610", "createdAt": "2020-04-13T19:27:26Z", "commit": {"oid": "d96445c14fafd1ec0234f0f4a51c4469a47e3ff3"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QxOToyNzoyNlrOGEyKKw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QxOToyNzoyNlrOGEyKKw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzY2OTI5MQ==", "bodyText": "Do you think there will be changes to a namespace other than setting properties and removing properties?\nIt may be much simpler to use setProperties(Namespace, Map<String, String>) and removeProperties(Namespace, Set<String>) instead of this and the NamespaceChange classes. What do you think?", "url": "https://github.com/apache/iceberg/pull/919#discussion_r407669291", "createdAt": "2020-04-13T19:27:26Z", "author": {"login": "rdblue"}, "path": "api/src/main/java/org/apache/iceberg/catalog/SupportsNamespaces.java", "diffHunk": "@@ -0,0 +1,114 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.catalog;\n+\n+import com.google.common.collect.ImmutableMap;\n+import java.util.List;\n+import java.util.Map;\n+import org.apache.iceberg.exceptions.AlreadyExistsException;\n+import org.apache.iceberg.exceptions.NoSuchNamespaceException;\n+\n+/**\n+ * Catalog methods for working with namespaces.\n+ * <p>\n+ * If an object such as a table, view, or function exists, its parent namespaces must also exist\n+ * and must be returned by the discovery methods {@link #listNamespaces()} and\n+ * {@link #listNamespaces(Namespace namespace)}.\n+ * <p>\n+ * Catalog implementations are not required to maintain the existence of namespaces independent of\n+ * objects in a namespace. For example, a function catalog that loads functions using reflection\n+ * and uses Java packages as namespaces is not required to support the methods to create, alter, or\n+ * drop a namespace. Implementations are allowed to discover the existence of objects or namespaces\n+ * without throwing {@link NoSuchNamespaceException} when no namespace is found.\n+ */\n+public interface SupportsNamespaces {\n+  /**\n+   * Create a namespace in the catalog.\n+   *\n+   * @param namespace {@link Namespace}.\n+   * @throws AlreadyExistsException If the namespace already exists\n+   * @throws UnsupportedOperationException If create is not a supported operation\n+   */\n+  default void createNamespace(Namespace namespace) {\n+    createNamespace(namespace, ImmutableMap.of());\n+  }\n+\n+  /**\n+   * Create a namespace in the catalog.\n+   *\n+   * @param namespace a multi-part namespace\n+   * @param metadata a string ImmutableMap of properties for the given namespace\n+   * @throws AlreadyExistsException If the namespace already exists\n+   * @throws UnsupportedOperationException If create is not a supported operation\n+   */\n+  void createNamespace(Namespace namespace, ImmutableMap<String, String> metadata);\n+\n+  /**\n+   * List top-level namespaces from the catalog.\n+   * <p>\n+   * If an object such as a table, view, or function exists, its parent namespaces must also exist\n+   * and must be returned by this discovery method. For example, if table a.b.t exists, this method\n+   * must return [\"a\"] in the result array.\n+   *\n+   * @return an List of namespace {@link Namespace} names\n+   */\n+  default List<Namespace> listNamespaces() {\n+    return listNamespaces(Namespace.empty());\n+  }\n+\n+  /**\n+   * List  namespaces from the namespace.\n+   * <p>\n+   * For example, if table a.b.t exists, use 'SELECT NAMESPACE IN a' this method\n+   * must return Namepace.of(\"a\",\"b\") {@link Namespace}.\n+   *\n+   * @return an List of namespace {@link Namespace} names\n+   * @throws NoSuchNamespaceException If the namespace does not exist (optional)\n+   */\n+  List<Namespace> listNamespaces(Namespace namespace) throws NoSuchNamespaceException;\n+\n+  /**\n+   * Load metadata properties for a namespace.\n+   *\n+   * @param namespace a Namespace.of(name) {@link Namespace}\n+   * @return a string map of properties for the given namespace\n+   * @throws NoSuchNamespaceException If the namespace does not exist (optional)\n+   */\n+  Map<String, String> loadNamespaceMetadata(Namespace namespace) throws NoSuchNamespaceException;\n+\n+  /**\n+   * Drop namespace, while the namespace haven't table or sub namespace will return true.\n+   *\n+   * @param namespace a Namespace.of(name) {@link Namespace}\n+   * @return true while drop success.\n+   * @throws NoSuchNamespaceException If the namespace does not exist (optional)\n+   */\n+  boolean dropNamespace(Namespace namespace) throws NoSuchNamespaceException;\n+\n+  /**\n+   * Apply a set of metadata changes to a namespace in the catalog.\n+   *\n+   * @param namespace a Namespace.of(name) {@link Namespace}\n+   * @param changes a collection of changes to apply to the namespace\n+   * @throws NoSuchNamespaceException If the namespace does not exist (optional)\n+   * @throws UnsupportedOperationException If namespace properties are not supported\n+   */\n+  boolean alterNamespace(Namespace namespace, NamespaceChange... changes) throws NoSuchNamespaceException;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d96445c14fafd1ec0234f0f4a51c4469a47e3ff3"}, "originalPosition": 113}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkyMzc4MTMx", "url": "https://github.com/apache/iceberg/pull/919#pullrequestreview-392378131", "createdAt": "2020-04-13T19:29:56Z", "commit": {"oid": "d96445c14fafd1ec0234f0f4a51c4469a47e3ff3"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QxOToyOTo1NlrOGEyPfQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QxOToyOTo1NlrOGEyPfQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzY3MDY1Mw==", "bodyText": "This should use Map and not ImmutableMap. We don't want to leak Guava classes through this API.", "url": "https://github.com/apache/iceberg/pull/919#discussion_r407670653", "createdAt": "2020-04-13T19:29:56Z", "author": {"login": "rdblue"}, "path": "core/src/main/java/org/apache/iceberg/hadoop/HadoopCatalog.java", "diffHunk": "@@ -200,7 +210,101 @@ public void renameTable(TableIdentifier from, TableIdentifier to) {\n   }\n \n   @Override\n-  public void close() throws IOException {\n+  public void createNamespace(Namespace namespace, ImmutableMap<String, String> meta) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d96445c14fafd1ec0234f0f4a51c4469a47e3ff3"}, "originalPosition": 79}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkyMzc5MjY1", "url": "https://github.com/apache/iceberg/pull/919#pullrequestreview-392379265", "createdAt": "2020-04-13T19:31:49Z", "commit": {"oid": "d96445c14fafd1ec0234f0f4a51c4469a47e3ff3"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QxOTozMTo1MFrOGEyTPQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QxOTozMTo1MFrOGEyTPQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzY3MTYxMw==", "bodyText": "This shouldn't use the outer SLASH.join. Instead, use the new Path(String, String) constructor.", "url": "https://github.com/apache/iceberg/pull/919#discussion_r407671613", "createdAt": "2020-04-13T19:31:50Z", "author": {"login": "rdblue"}, "path": "core/src/main/java/org/apache/iceberg/hadoop/HadoopCatalog.java", "diffHunk": "@@ -101,14 +112,13 @@ protected String name() {\n     Preconditions.checkArgument(namespace.levels().length >= 1,\n         \"Missing database in table identifier: %s\", namespace);\n \n-    Joiner slash = Joiner.on(\"/\");\n-    Path nsPath = new Path(slash.join(warehouseLocation, slash.join(namespace.levels())));\n+    Path nsPath = new Path(SLASH.join(warehouseLocation, SLASH.join(namespace.levels())));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d96445c14fafd1ec0234f0f4a51c4469a47e3ff3"}, "originalPosition": 54}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkyMzc5NTYy", "url": "https://github.com/apache/iceberg/pull/919#pullrequestreview-392379562", "createdAt": "2020-04-13T19:32:18Z", "commit": {"oid": "d96445c14fafd1ec0234f0f4a51c4469a47e3ff3"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QxOTozMjoxOFrOGEyUQQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QxOTozMjoxOFrOGEyUQQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzY3MTg3Mw==", "bodyText": "Please fix path construction here and other places that need it as well.", "url": "https://github.com/apache/iceberg/pull/919#discussion_r407671873", "createdAt": "2020-04-13T19:32:18Z", "author": {"login": "rdblue"}, "path": "core/src/main/java/org/apache/iceberg/hadoop/HadoopCatalog.java", "diffHunk": "@@ -200,7 +210,101 @@ public void renameTable(TableIdentifier from, TableIdentifier to) {\n   }\n \n   @Override\n-  public void close() throws IOException {\n+  public void createNamespace(Namespace namespace, ImmutableMap<String, String> meta) {\n+    Preconditions.checkArgument(\n+        !namespace.isEmpty(),\n+        \"Cannot create namespace with invalid name: %s\", namespace);\n+    if (!meta.isEmpty()) {\n+      throw new UnsupportedOperationException(\"Cannot create namespace \" + namespace + \" : metadata is not supported\");\n+    }\n+\n+    Path nsPath = new Path(warehouseLocation, SLASH.join(namespace.levels()));\n+    FileSystem fs = Util.getFs(nsPath, conf);\n+\n+    try {\n+      if (isNamespace(fs, nsPath)) {\n+        throw new AlreadyExistsException(\"Namespace '%s' already exists!\", namespace);\n+      }\n+\n+      fs.mkdirs(nsPath);\n+\n+    } catch (IOException e) {\n+      throw new RuntimeIOException(e, \"Create namespace failed: %s\", namespace);\n+    }\n   }\n \n+  @Override\n+  public List<Namespace> listNamespaces(Namespace namespace) {\n+    Path nsPath = new Path(SLASH.join(warehouseLocation, SLASH.join(namespace.levels())));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d96445c14fafd1ec0234f0f4a51c4469a47e3ff3"}, "originalPosition": 104}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkyMzgwNDgx", "url": "https://github.com/apache/iceberg/pull/919#pullrequestreview-392380481", "createdAt": "2020-04-13T19:33:50Z", "commit": {"oid": "d96445c14fafd1ec0234f0f4a51c4469a47e3ff3"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QxOTozMzo1MFrOGEyXQw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QxOTozMzo1MFrOGEyXQw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzY3MjY0Mw==", "bodyText": "This can be moved outside of the try block.", "url": "https://github.com/apache/iceberg/pull/919#discussion_r407672643", "createdAt": "2020-04-13T19:33:50Z", "author": {"login": "rdblue"}, "path": "core/src/main/java/org/apache/iceberg/hadoop/HadoopCatalog.java", "diffHunk": "@@ -200,7 +210,101 @@ public void renameTable(TableIdentifier from, TableIdentifier to) {\n   }\n \n   @Override\n-  public void close() throws IOException {\n+  public void createNamespace(Namespace namespace, ImmutableMap<String, String> meta) {\n+    Preconditions.checkArgument(\n+        !namespace.isEmpty(),\n+        \"Cannot create namespace with invalid name: %s\", namespace);\n+    if (!meta.isEmpty()) {\n+      throw new UnsupportedOperationException(\"Cannot create namespace \" + namespace + \" : metadata is not supported\");\n+    }\n+\n+    Path nsPath = new Path(warehouseLocation, SLASH.join(namespace.levels()));\n+    FileSystem fs = Util.getFs(nsPath, conf);\n+\n+    try {\n+      if (isNamespace(fs, nsPath)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d96445c14fafd1ec0234f0f4a51c4469a47e3ff3"}, "originalPosition": 91}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkyMzgxMDg1", "url": "https://github.com/apache/iceberg/pull/919#pullrequestreview-392381085", "createdAt": "2020-04-13T19:34:48Z", "commit": {"oid": "d96445c14fafd1ec0234f0f4a51c4469a47e3ff3"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QxOTozNDo0OFrOGEyZTQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QxOTozNDo0OFrOGEyZTQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzY3MzE2NQ==", "bodyText": "This file system should always be the same one. Can you add a final instance field for it using the warehouse path instead of calling getFs in each method?", "url": "https://github.com/apache/iceberg/pull/919#discussion_r407673165", "createdAt": "2020-04-13T19:34:48Z", "author": {"login": "rdblue"}, "path": "core/src/main/java/org/apache/iceberg/hadoop/HadoopCatalog.java", "diffHunk": "@@ -200,7 +210,101 @@ public void renameTable(TableIdentifier from, TableIdentifier to) {\n   }\n \n   @Override\n-  public void close() throws IOException {\n+  public void createNamespace(Namespace namespace, ImmutableMap<String, String> meta) {\n+    Preconditions.checkArgument(\n+        !namespace.isEmpty(),\n+        \"Cannot create namespace with invalid name: %s\", namespace);\n+    if (!meta.isEmpty()) {\n+      throw new UnsupportedOperationException(\"Cannot create namespace \" + namespace + \" : metadata is not supported\");\n+    }\n+\n+    Path nsPath = new Path(warehouseLocation, SLASH.join(namespace.levels()));\n+    FileSystem fs = Util.getFs(nsPath, conf);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d96445c14fafd1ec0234f0f4a51c4469a47e3ff3"}, "originalPosition": 88}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkyMzgxNjI2", "url": "https://github.com/apache/iceberg/pull/919#pullrequestreview-392381626", "createdAt": "2020-04-13T19:35:40Z", "commit": {"oid": "d96445c14fafd1ec0234f0f4a51c4469a47e3ff3"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QxOTozNTo0MFrOGEya4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QxOTozNTo0MFrOGEya4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzY3MzU3MA==", "bodyText": "There should be a newline between method definitions.", "url": "https://github.com/apache/iceberg/pull/919#discussion_r407673570", "createdAt": "2020-04-13T19:35:40Z", "author": {"login": "rdblue"}, "path": "core/src/main/java/org/apache/iceberg/hadoop/HadoopCatalog.java", "diffHunk": "@@ -200,7 +210,101 @@ public void renameTable(TableIdentifier from, TableIdentifier to) {\n   }\n \n   @Override\n-  public void close() throws IOException {\n+  public void createNamespace(Namespace namespace, ImmutableMap<String, String> meta) {\n+    Preconditions.checkArgument(\n+        !namespace.isEmpty(),\n+        \"Cannot create namespace with invalid name: %s\", namespace);\n+    if (!meta.isEmpty()) {\n+      throw new UnsupportedOperationException(\"Cannot create namespace \" + namespace + \" : metadata is not supported\");\n+    }\n+\n+    Path nsPath = new Path(warehouseLocation, SLASH.join(namespace.levels()));\n+    FileSystem fs = Util.getFs(nsPath, conf);\n+\n+    try {\n+      if (isNamespace(fs, nsPath)) {\n+        throw new AlreadyExistsException(\"Namespace '%s' already exists!\", namespace);\n+      }\n+\n+      fs.mkdirs(nsPath);\n+\n+    } catch (IOException e) {\n+      throw new RuntimeIOException(e, \"Create namespace failed: %s\", namespace);\n+    }\n   }\n \n+  @Override\n+  public List<Namespace> listNamespaces(Namespace namespace) {\n+    Path nsPath = new Path(SLASH.join(warehouseLocation, SLASH.join(namespace.levels())));\n+    FileSystem fs = Util.getFs(nsPath, conf);\n+\n+    if (!isNamespace(fs, nsPath)) {\n+      throw new NoSuchNamespaceException(\"Namespace does not exist: %s\", namespace);\n+    }\n+\n+    try {\n+      return Stream.of(fs.listStatus(nsPath))\n+        .map(FileStatus::getPath)\n+        .filter(path -> isNamespace(fs, path))\n+        .map(path -> append(namespace, path.getName()))\n+        .collect(Collectors.toList());\n+    } catch (IOException ioe) {\n+      throw new RuntimeIOException(ioe, \"Failed to list namespace under: %s\", namespace);\n+    }\n+  }\n+\n+  @Override\n+  public boolean dropNamespace(Namespace namespace) {\n+    Path nsPath = new Path(SLASH.join(warehouseLocation, SLASH.join(namespace.levels())));\n+    FileSystem fs = Util.getFs(nsPath, conf);\n+\n+    try {\n+      if (!isNamespace(fs, nsPath) || namespace.isEmpty()) {\n+        throw new NoSuchNamespaceException(\"Namespace does not exist: %s\", namespace);\n+      }\n+\n+      return fs.delete(nsPath, true /* recursive */);\n+\n+    } catch (IOException e) {\n+      throw new RuntimeIOException(e, \"Namespace delete failed: %s\", namespace);\n+    }\n+  }\n+\n+  @Override\n+  public boolean alterNamespace(Namespace namespace, NamespaceChange... changes) {\n+    throw new UnsupportedOperationException(\n+        \"Cannot alter namespace \" + namespace + \" : alterNamespace is not supported\");\n+  }\n+\n+  @Override\n+  public Map<String, String> loadNamespaceMetadata(Namespace namespace) {\n+    Path nsPath = new Path(SLASH.join(warehouseLocation, SLASH.join(namespace.levels())));\n+    FileSystem fs = Util.getFs(nsPath, conf);\n+\n+    if (!isNamespace(fs, nsPath) || namespace.isEmpty()) {\n+      throw new NoSuchNamespaceException(\"Namespace does not exist: %s\", namespace);\n+    }\n+\n+    return ImmutableMap.of(\"location\", nsPath.toString());\n+  }\n+\n+  private boolean isNamespace(FileSystem fs, Path path) {\n+    Path metadataPath = new Path(path, \"metadata\");\n+    try {\n+      return fs.isDirectory(path) && !(fs.exists(metadataPath) && fs.isDirectory(metadataPath) &&\n+          (fs.listStatus(metadataPath, TABLE_FILTER).length >= 1));\n+\n+    } catch (IOException ioe) {\n+      throw new RuntimeIOException(ioe, \"Failed to list namespace info: %s \", path);\n+    }\n+  }\n+  static Namespace append(Namespace ns, String name) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d96445c14fafd1ec0234f0f4a51c4469a47e3ff3"}, "originalPosition": 167}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkyMzgyMTk1", "url": "https://github.com/apache/iceberg/pull/919#pullrequestreview-392382195", "createdAt": "2020-04-13T19:36:36Z", "commit": {"oid": "d96445c14fafd1ec0234f0f4a51c4469a47e3ff3"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QxOTozNjozNlrOGEycnQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QxOTozNjozNlrOGEycnQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzY3NDAxMw==", "bodyText": "Is this used elsewhere, or can it be private?\nAlso, please move this static helper after instance methods.", "url": "https://github.com/apache/iceberg/pull/919#discussion_r407674013", "createdAt": "2020-04-13T19:36:36Z", "author": {"login": "rdblue"}, "path": "core/src/main/java/org/apache/iceberg/hadoop/HadoopCatalog.java", "diffHunk": "@@ -200,7 +210,101 @@ public void renameTable(TableIdentifier from, TableIdentifier to) {\n   }\n \n   @Override\n-  public void close() throws IOException {\n+  public void createNamespace(Namespace namespace, ImmutableMap<String, String> meta) {\n+    Preconditions.checkArgument(\n+        !namespace.isEmpty(),\n+        \"Cannot create namespace with invalid name: %s\", namespace);\n+    if (!meta.isEmpty()) {\n+      throw new UnsupportedOperationException(\"Cannot create namespace \" + namespace + \" : metadata is not supported\");\n+    }\n+\n+    Path nsPath = new Path(warehouseLocation, SLASH.join(namespace.levels()));\n+    FileSystem fs = Util.getFs(nsPath, conf);\n+\n+    try {\n+      if (isNamespace(fs, nsPath)) {\n+        throw new AlreadyExistsException(\"Namespace '%s' already exists!\", namespace);\n+      }\n+\n+      fs.mkdirs(nsPath);\n+\n+    } catch (IOException e) {\n+      throw new RuntimeIOException(e, \"Create namespace failed: %s\", namespace);\n+    }\n   }\n \n+  @Override\n+  public List<Namespace> listNamespaces(Namespace namespace) {\n+    Path nsPath = new Path(SLASH.join(warehouseLocation, SLASH.join(namespace.levels())));\n+    FileSystem fs = Util.getFs(nsPath, conf);\n+\n+    if (!isNamespace(fs, nsPath)) {\n+      throw new NoSuchNamespaceException(\"Namespace does not exist: %s\", namespace);\n+    }\n+\n+    try {\n+      return Stream.of(fs.listStatus(nsPath))\n+        .map(FileStatus::getPath)\n+        .filter(path -> isNamespace(fs, path))\n+        .map(path -> append(namespace, path.getName()))\n+        .collect(Collectors.toList());\n+    } catch (IOException ioe) {\n+      throw new RuntimeIOException(ioe, \"Failed to list namespace under: %s\", namespace);\n+    }\n+  }\n+\n+  @Override\n+  public boolean dropNamespace(Namespace namespace) {\n+    Path nsPath = new Path(SLASH.join(warehouseLocation, SLASH.join(namespace.levels())));\n+    FileSystem fs = Util.getFs(nsPath, conf);\n+\n+    try {\n+      if (!isNamespace(fs, nsPath) || namespace.isEmpty()) {\n+        throw new NoSuchNamespaceException(\"Namespace does not exist: %s\", namespace);\n+      }\n+\n+      return fs.delete(nsPath, true /* recursive */);\n+\n+    } catch (IOException e) {\n+      throw new RuntimeIOException(e, \"Namespace delete failed: %s\", namespace);\n+    }\n+  }\n+\n+  @Override\n+  public boolean alterNamespace(Namespace namespace, NamespaceChange... changes) {\n+    throw new UnsupportedOperationException(\n+        \"Cannot alter namespace \" + namespace + \" : alterNamespace is not supported\");\n+  }\n+\n+  @Override\n+  public Map<String, String> loadNamespaceMetadata(Namespace namespace) {\n+    Path nsPath = new Path(SLASH.join(warehouseLocation, SLASH.join(namespace.levels())));\n+    FileSystem fs = Util.getFs(nsPath, conf);\n+\n+    if (!isNamespace(fs, nsPath) || namespace.isEmpty()) {\n+      throw new NoSuchNamespaceException(\"Namespace does not exist: %s\", namespace);\n+    }\n+\n+    return ImmutableMap.of(\"location\", nsPath.toString());\n+  }\n+\n+  private boolean isNamespace(FileSystem fs, Path path) {\n+    Path metadataPath = new Path(path, \"metadata\");\n+    try {\n+      return fs.isDirectory(path) && !(fs.exists(metadataPath) && fs.isDirectory(metadataPath) &&\n+          (fs.listStatus(metadataPath, TABLE_FILTER).length >= 1));\n+\n+    } catch (IOException ioe) {\n+      throw new RuntimeIOException(ioe, \"Failed to list namespace info: %s \", path);\n+    }\n+  }\n+  static Namespace append(Namespace ns, String name) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d96445c14fafd1ec0234f0f4a51c4469a47e3ff3"}, "originalPosition": 167}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkyMzgzMTM0", "url": "https://github.com/apache/iceberg/pull/919#pullrequestreview-392383134", "createdAt": "2020-04-13T19:38:09Z", "commit": {"oid": "d96445c14fafd1ec0234f0f4a51c4469a47e3ff3"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QxOTozODoxMFrOGEyftA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QxOTozODoxMFrOGEyftA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzY3NDgwNA==", "bodyText": "What about an exists method? Is that something we should implement?", "url": "https://github.com/apache/iceberg/pull/919#discussion_r407674804", "createdAt": "2020-04-13T19:38:10Z", "author": {"login": "rdblue"}, "path": "api/src/main/java/org/apache/iceberg/catalog/SupportsNamespaces.java", "diffHunk": "@@ -0,0 +1,114 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.catalog;\n+\n+import com.google.common.collect.ImmutableMap;\n+import java.util.List;\n+import java.util.Map;\n+import org.apache.iceberg.exceptions.AlreadyExistsException;\n+import org.apache.iceberg.exceptions.NoSuchNamespaceException;\n+\n+/**\n+ * Catalog methods for working with namespaces.\n+ * <p>\n+ * If an object such as a table, view, or function exists, its parent namespaces must also exist\n+ * and must be returned by the discovery methods {@link #listNamespaces()} and\n+ * {@link #listNamespaces(Namespace namespace)}.\n+ * <p>\n+ * Catalog implementations are not required to maintain the existence of namespaces independent of\n+ * objects in a namespace. For example, a function catalog that loads functions using reflection\n+ * and uses Java packages as namespaces is not required to support the methods to create, alter, or\n+ * drop a namespace. Implementations are allowed to discover the existence of objects or namespaces\n+ * without throwing {@link NoSuchNamespaceException} when no namespace is found.\n+ */\n+public interface SupportsNamespaces {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d96445c14fafd1ec0234f0f4a51c4469a47e3ff3"}, "originalPosition": 41}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkyMzgzOTIz", "url": "https://github.com/apache/iceberg/pull/919#pullrequestreview-392383923", "createdAt": "2020-04-13T19:39:27Z", "commit": {"oid": "d96445c14fafd1ec0234f0f4a51c4469a47e3ff3"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QxOTozOToyN1rOGEyicw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QxOTozOToyN1rOGEyicw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzY3NTUwNw==", "bodyText": "This violates the method contract. This should return false because the namespace did not exist.", "url": "https://github.com/apache/iceberg/pull/919#discussion_r407675507", "createdAt": "2020-04-13T19:39:27Z", "author": {"login": "rdblue"}, "path": "hive/src/main/java/org/apache/iceberg/hive/HiveCatalog.java", "diffHunk": "@@ -155,14 +164,146 @@ public void renameTable(TableIdentifier from, TableIdentifier to) {\n       throw new org.apache.iceberg.exceptions.AlreadyExistsException(\"Table already exists: %s\", to);\n \n     } catch (TException e) {\n-      throw new RuntimeException(\"Failed to rename \" + from.toString() + \" to \" + to.toString(), e);\n+      throw new RuntimeException(\"Failed to rename \" + from + \" to \" + to, e);\n \n     } catch (InterruptedException e) {\n       Thread.currentThread().interrupt();\n       throw new RuntimeException(\"Interrupted in call to rename\", e);\n     }\n   }\n \n+  @Override\n+  public void createNamespace(Namespace namespace, ImmutableMap<String, String> meta) {\n+    Preconditions.checkArgument(\n+        !namespace.isEmpty(),\n+        \"Cannot create namespace with invalid name: %s\", namespace);\n+    Preconditions.checkArgument(\n+        namespace.levels().length == 1,\n+        \"Cannot support multi part namespace in Hive MetaStore: %s\", namespace);\n+\n+    try {\n+      clients.run(client -> {\n+        client.createDatabase(convertToDatabase(namespace, meta));\n+        return null;\n+      });\n+\n+    } catch (AlreadyExistsException e) {\n+      throw new org.apache.iceberg.exceptions.AlreadyExistsException(e, \"Namespace '%s' already exists!\",\n+            namespace);\n+\n+    } catch (TException e) {\n+      throw new RuntimeException(\"Failed to create namespace \" + namespace + \" in Hive MataStore\", e);\n+\n+    } catch (InterruptedException e) {\n+      Thread.currentThread().interrupt();\n+      throw new RuntimeException(\n+          \"Interrupted in call to createDatabase(name) \" + namespace + \" in Hive MataStore\", e);\n+    }\n+  }\n+\n+  @Override\n+  public List<Namespace> listNamespaces(Namespace namespace) {\n+    if (namespace.levels().length > 1) {\n+      throw new NoSuchNamespaceException(\"Namespace does not exist: %s\", namespace);\n+    }\n+    if (!namespace.isEmpty()) {\n+      return ImmutableList.of();\n+    }\n+    try {\n+      return clients.run(\n+          HiveMetaStoreClient::getAllDatabases)\n+          .stream()\n+          .map(Namespace::of)\n+          .collect(Collectors.toList());\n+\n+    } catch (TException e) {\n+      throw new RuntimeException(\"Failed to list all namespace: \" + namespace + \" in Hive MataStore\",  e);\n+\n+    } catch (InterruptedException e) {\n+      Thread.currentThread().interrupt();\n+      throw new RuntimeException(\n+          \"Interrupted in call to getAllDatabases() \" + namespace + \" in Hive MataStore\", e);\n+    }\n+  }\n+\n+  @Override\n+  public boolean dropNamespace(Namespace namespace) {\n+    if (namespace.levels().length != 1) {\n+      throw new NoSuchNamespaceException(\"Namespace does not exist: %s\", namespace);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d96445c14fafd1ec0234f0f4a51c4469a47e3ff3"}, "originalPosition": 131}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkyMzg0MzAz", "url": "https://github.com/apache/iceberg/pull/919#pullrequestreview-392384303", "createdAt": "2020-04-13T19:40:00Z", "commit": {"oid": "d96445c14fafd1ec0234f0f4a51c4469a47e3ff3"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QxOTo0MDowMVrOGEyjqQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QxOTo0MDowMVrOGEyjqQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzY3NTgxNw==", "bodyText": "Why does this cascade, but not delete data? Can you explain these options?", "url": "https://github.com/apache/iceberg/pull/919#discussion_r407675817", "createdAt": "2020-04-13T19:40:01Z", "author": {"login": "rdblue"}, "path": "hive/src/main/java/org/apache/iceberg/hive/HiveCatalog.java", "diffHunk": "@@ -155,14 +164,146 @@ public void renameTable(TableIdentifier from, TableIdentifier to) {\n       throw new org.apache.iceberg.exceptions.AlreadyExistsException(\"Table already exists: %s\", to);\n \n     } catch (TException e) {\n-      throw new RuntimeException(\"Failed to rename \" + from.toString() + \" to \" + to.toString(), e);\n+      throw new RuntimeException(\"Failed to rename \" + from + \" to \" + to, e);\n \n     } catch (InterruptedException e) {\n       Thread.currentThread().interrupt();\n       throw new RuntimeException(\"Interrupted in call to rename\", e);\n     }\n   }\n \n+  @Override\n+  public void createNamespace(Namespace namespace, ImmutableMap<String, String> meta) {\n+    Preconditions.checkArgument(\n+        !namespace.isEmpty(),\n+        \"Cannot create namespace with invalid name: %s\", namespace);\n+    Preconditions.checkArgument(\n+        namespace.levels().length == 1,\n+        \"Cannot support multi part namespace in Hive MetaStore: %s\", namespace);\n+\n+    try {\n+      clients.run(client -> {\n+        client.createDatabase(convertToDatabase(namespace, meta));\n+        return null;\n+      });\n+\n+    } catch (AlreadyExistsException e) {\n+      throw new org.apache.iceberg.exceptions.AlreadyExistsException(e, \"Namespace '%s' already exists!\",\n+            namespace);\n+\n+    } catch (TException e) {\n+      throw new RuntimeException(\"Failed to create namespace \" + namespace + \" in Hive MataStore\", e);\n+\n+    } catch (InterruptedException e) {\n+      Thread.currentThread().interrupt();\n+      throw new RuntimeException(\n+          \"Interrupted in call to createDatabase(name) \" + namespace + \" in Hive MataStore\", e);\n+    }\n+  }\n+\n+  @Override\n+  public List<Namespace> listNamespaces(Namespace namespace) {\n+    if (namespace.levels().length > 1) {\n+      throw new NoSuchNamespaceException(\"Namespace does not exist: %s\", namespace);\n+    }\n+    if (!namespace.isEmpty()) {\n+      return ImmutableList.of();\n+    }\n+    try {\n+      return clients.run(\n+          HiveMetaStoreClient::getAllDatabases)\n+          .stream()\n+          .map(Namespace::of)\n+          .collect(Collectors.toList());\n+\n+    } catch (TException e) {\n+      throw new RuntimeException(\"Failed to list all namespace: \" + namespace + \" in Hive MataStore\",  e);\n+\n+    } catch (InterruptedException e) {\n+      Thread.currentThread().interrupt();\n+      throw new RuntimeException(\n+          \"Interrupted in call to getAllDatabases() \" + namespace + \" in Hive MataStore\", e);\n+    }\n+  }\n+\n+  @Override\n+  public boolean dropNamespace(Namespace namespace) {\n+    if (namespace.levels().length != 1) {\n+      throw new NoSuchNamespaceException(\"Namespace does not exist: %s\", namespace);\n+    }\n+\n+    try {\n+      clients.run(client -> {\n+        client.dropDatabase(namespace.level(0),\n+            false /* deleteData */,\n+            false /* ignoreUnknownDb */,\n+            true /* cascade */);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d96445c14fafd1ec0234f0f4a51c4469a47e3ff3"}, "originalPosition": 139}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkyMzg0Nzcy", "url": "https://github.com/apache/iceberg/pull/919#pullrequestreview-392384772", "createdAt": "2020-04-13T19:40:44Z", "commit": {"oid": "d96445c14fafd1ec0234f0f4a51c4469a47e3ff3"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QxOTo0MDo0NFrOGEylMQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QxOTo0MDo0NFrOGEylMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzY3NjIwOQ==", "bodyText": "This is duplicated in a few places and can be refactored into a helper method, validateNamespace.", "url": "https://github.com/apache/iceberg/pull/919#discussion_r407676209", "createdAt": "2020-04-13T19:40:44Z", "author": {"login": "rdblue"}, "path": "hive/src/main/java/org/apache/iceberg/hive/HiveCatalog.java", "diffHunk": "@@ -155,14 +164,146 @@ public void renameTable(TableIdentifier from, TableIdentifier to) {\n       throw new org.apache.iceberg.exceptions.AlreadyExistsException(\"Table already exists: %s\", to);\n \n     } catch (TException e) {\n-      throw new RuntimeException(\"Failed to rename \" + from.toString() + \" to \" + to.toString(), e);\n+      throw new RuntimeException(\"Failed to rename \" + from + \" to \" + to, e);\n \n     } catch (InterruptedException e) {\n       Thread.currentThread().interrupt();\n       throw new RuntimeException(\"Interrupted in call to rename\", e);\n     }\n   }\n \n+  @Override\n+  public void createNamespace(Namespace namespace, ImmutableMap<String, String> meta) {\n+    Preconditions.checkArgument(\n+        !namespace.isEmpty(),\n+        \"Cannot create namespace with invalid name: %s\", namespace);\n+    Preconditions.checkArgument(\n+        namespace.levels().length == 1,\n+        \"Cannot support multi part namespace in Hive MetaStore: %s\", namespace);\n+\n+    try {\n+      clients.run(client -> {\n+        client.createDatabase(convertToDatabase(namespace, meta));\n+        return null;\n+      });\n+\n+    } catch (AlreadyExistsException e) {\n+      throw new org.apache.iceberg.exceptions.AlreadyExistsException(e, \"Namespace '%s' already exists!\",\n+            namespace);\n+\n+    } catch (TException e) {\n+      throw new RuntimeException(\"Failed to create namespace \" + namespace + \" in Hive MataStore\", e);\n+\n+    } catch (InterruptedException e) {\n+      Thread.currentThread().interrupt();\n+      throw new RuntimeException(\n+          \"Interrupted in call to createDatabase(name) \" + namespace + \" in Hive MataStore\", e);\n+    }\n+  }\n+\n+  @Override\n+  public List<Namespace> listNamespaces(Namespace namespace) {\n+    if (namespace.levels().length > 1) {\n+      throw new NoSuchNamespaceException(\"Namespace does not exist: %s\", namespace);\n+    }\n+    if (!namespace.isEmpty()) {\n+      return ImmutableList.of();\n+    }\n+    try {\n+      return clients.run(\n+          HiveMetaStoreClient::getAllDatabases)\n+          .stream()\n+          .map(Namespace::of)\n+          .collect(Collectors.toList());\n+\n+    } catch (TException e) {\n+      throw new RuntimeException(\"Failed to list all namespace: \" + namespace + \" in Hive MataStore\",  e);\n+\n+    } catch (InterruptedException e) {\n+      Thread.currentThread().interrupt();\n+      throw new RuntimeException(\n+          \"Interrupted in call to getAllDatabases() \" + namespace + \" in Hive MataStore\", e);\n+    }\n+  }\n+\n+  @Override\n+  public boolean dropNamespace(Namespace namespace) {\n+    if (namespace.levels().length != 1) {\n+      throw new NoSuchNamespaceException(\"Namespace does not exist: %s\", namespace);\n+    }\n+\n+    try {\n+      clients.run(client -> {\n+        client.dropDatabase(namespace.level(0),\n+            false /* deleteData */,\n+            false /* ignoreUnknownDb */,\n+            true /* cascade */);\n+        return null;\n+      });\n+\n+      return true;\n+\n+    } catch (NoSuchObjectException e) {\n+      throw new NoSuchNamespaceException(e, \"Namespace does not exist: %s\", namespace);\n+\n+    } catch (TException e) {\n+      throw new RuntimeException(\"Failed to drop namespace \" + namespace + \" in Hive MataStore\", e);\n+\n+    } catch (InterruptedException e) {\n+      Thread.currentThread().interrupt();\n+      throw new RuntimeException(\n+          \"Interrupted in call to drop dropDatabase(name) \" + namespace + \" in Hive MataStore\", e);\n+    }\n+  }\n+\n+  @Override\n+  public boolean alterNamespace(Namespace namespace, NamespaceChange... changes) {\n+    Map<String, String> newMeta = applyNamespaceChanges(loadNamespaceMetadata(namespace), changes);\n+\n+    try {\n+      clients.run(client -> {\n+        client.alterDatabase(namespace.level(0), convertToDatabase(namespace, newMeta));\n+        return null;\n+      });\n+\n+      return true;\n+\n+    } catch (NoSuchObjectException | UnknownDBException e) {\n+      throw new NoSuchNamespaceException(e, \"Namespace does not exist: %s\", namespace);\n+\n+    } catch (TException e) {\n+      throw new RuntimeException(\n+          \"Failed to list namespace under namespace: \" + namespace + \" in Hive MataStore\", e);\n+\n+    } catch (InterruptedException e) {\n+      Thread.currentThread().interrupt();\n+      throw new RuntimeException(\"Interrupted in call to getDatabase(name) \" + namespace + \" in Hive MataStore\", e);\n+    }\n+  }\n+\n+  @Override\n+  public Map<String, String> loadNamespaceMetadata(Namespace namespace) {\n+    if (namespace.levels().length != 1) {\n+      throw new NoSuchNamespaceException(\"Namespace does not exist: %s\", namespace);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d96445c14fafd1ec0234f0f4a51c4469a47e3ff3"}, "originalPosition": 186}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9816043a960c9652bb55c3971c43980da175c8d9", "author": {"user": {"login": "XiaokunDing", "name": "XiaokunDing"}}, "url": "https://github.com/apache/iceberg/commit/9816043a960c9652bb55c3971c43980da175c8d9", "committedDate": "2020-04-14T07:27:18Z", "message": "[ISSUE #672] Fix the code address comments by Ryan Blue"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkzMTA1MTEx", "url": "https://github.com/apache/iceberg/pull/919#pullrequestreview-393105111", "createdAt": "2020-04-14T16:38:43Z", "commit": {"oid": "9816043a960c9652bb55c3971c43980da175c8d9"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxNjozODo0M1rOGFXYAQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxNjozODo0M1rOGFXYAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODI3OTA0MQ==", "bodyText": "Please remove this newline.", "url": "https://github.com/apache/iceberg/pull/919#discussion_r408279041", "createdAt": "2020-04-14T16:38:43Z", "author": {"login": "rdblue"}, "path": "core/src/main/java/org/apache/iceberg/hadoop/HadoopCatalog.java", "diffHunk": "@@ -58,12 +65,17 @@\n  *\n  * Note: The HadoopCatalog requires that the underlying file system supports atomic rename.\n  */\n-public class HadoopCatalog extends BaseMetastoreCatalog implements Closeable {\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9816043a960c9652bb55c3971c43980da175c8d9"}, "originalPosition": 37}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkzMTA1MzQx", "url": "https://github.com/apache/iceberg/pull/919#pullrequestreview-393105341", "createdAt": "2020-04-14T16:39:02Z", "commit": {"oid": "9816043a960c9652bb55c3971c43980da175c8d9"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxNjozOTowMlrOGFXYtA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxNjozOTowMlrOGFXYtA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODI3OTIyMA==", "bodyText": "Please remove the trailing space in this error message.", "url": "https://github.com/apache/iceberg/pull/919#discussion_r408279220", "createdAt": "2020-04-14T16:39:02Z", "author": {"login": "rdblue"}, "path": "core/src/main/java/org/apache/iceberg/hadoop/HadoopCatalog.java", "diffHunk": "@@ -128,7 +140,7 @@ protected String name() {\n         }\n       }\n     } catch (IOException ioe) {\n-      throw new RuntimeException(\"Failed to list tables under \" + namespace, ioe);\n+      throw new RuntimeIOException(ioe, \"Failed to list tables under: %s \", namespace);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9816043a960c9652bb55c3971c43980da175c8d9"}, "originalPosition": 90}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkzMTA2OTg0", "url": "https://github.com/apache/iceberg/pull/919#pullrequestreview-393106984", "createdAt": "2020-04-14T16:41:00Z", "commit": {"oid": "9816043a960c9652bb55c3971c43980da175c8d9"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxNjo0MTowMFrOGFXeEQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxNjo0MTowMFrOGFXeEQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODI4MDU5Mw==", "bodyText": "This should be named namespaceExists to match the table method tableExists.", "url": "https://github.com/apache/iceberg/pull/919#discussion_r408280593", "createdAt": "2020-04-14T16:41:00Z", "author": {"login": "rdblue"}, "path": "api/src/main/java/org/apache/iceberg/catalog/SupportsNamespaces.java", "diffHunk": "@@ -0,0 +1,121 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.catalog;\n+\n+import com.google.common.collect.ImmutableMap;\n+import java.util.List;\n+import java.util.Map;\n+import org.apache.iceberg.exceptions.AlreadyExistsException;\n+import org.apache.iceberg.exceptions.NoSuchNamespaceException;\n+\n+/**\n+ * Catalog methods for working with namespaces.\n+ * <p>\n+ * If an object such as a table, view, or function exists, its parent namespaces must also exist\n+ * and must be returned by the discovery methods {@link #listNamespaces()} and\n+ * {@link #listNamespaces(Namespace namespace)}.\n+ * <p>\n+ * Catalog implementations are not required to maintain the existence of namespaces independent of\n+ * objects in a namespace. For example, a function catalog that loads functions using reflection\n+ * and uses Java packages as namespaces is not required to support the methods to create, alter, or\n+ * drop a namespace. Implementations are allowed to discover the existence of objects or namespaces\n+ * without throwing {@link NoSuchNamespaceException} when no namespace is found.\n+ */\n+public interface SupportsNamespaces {\n+  /**\n+   * Create a namespace in the catalog.\n+   *\n+   * @param namespace {@link Namespace}.\n+   * @throws AlreadyExistsException If the namespace already exists\n+   * @throws UnsupportedOperationException If create is not a supported operation\n+   */\n+  default void createNamespace(Namespace namespace) {\n+    createNamespace(namespace, ImmutableMap.of());\n+  }\n+\n+  /**\n+   * Create a namespace in the catalog.\n+   *\n+   * @param namespace a multi-part namespace\n+   * @param metadata a string Map of properties for the given namespace\n+   * @throws AlreadyExistsException If the namespace already exists\n+   * @throws UnsupportedOperationException If create is not a supported operation\n+   */\n+  void createNamespace(Namespace namespace, Map<String, String> metadata);\n+\n+  /**\n+   * List top-level namespaces from the catalog.\n+   * <p>\n+   * If an object such as a table, view, or function exists, its parent namespaces must also exist\n+   * and must be returned by this discovery method. For example, if table a.b.t exists, this method\n+   * must return [\"a\"] in the result array.\n+   *\n+   * @return an List of namespace {@link Namespace} names\n+   */\n+  default List<Namespace> listNamespaces() {\n+    return listNamespaces(Namespace.empty());\n+  }\n+\n+  /**\n+   * List  namespaces from the namespace.\n+   * <p>\n+   * For example, if table a.b.t exists, use 'SELECT NAMESPACE IN a' this method\n+   * must return Namepace.of(\"a\",\"b\") {@link Namespace}.\n+   *\n+   * @return an List of namespace {@link Namespace} names\n+   * @throws NoSuchNamespaceException If the namespace does not exist (optional)\n+   */\n+  List<Namespace> listNamespaces(Namespace namespace) throws NoSuchNamespaceException;\n+\n+  /**\n+   * Load metadata properties for a namespace.\n+   *\n+   * @param namespace a Namespace.of(name) {@link Namespace}\n+   * @return a string map of properties for the given namespace\n+   * @throws NoSuchNamespaceException If the namespace does not exist (optional)\n+   */\n+  Map<String, String> loadNamespaceMetadata(Namespace namespace) throws NoSuchNamespaceException;\n+\n+  /**\n+   * Drop namespace, while the namespace haven't table or sub namespace will return true.\n+   *\n+   * @param namespace a Namespace.of(name) {@link Namespace}\n+   * @return true while drop success.\n+   * @throws NoSuchNamespaceException If the namespace does not exist (optional)\n+   */\n+  boolean dropNamespace(Namespace namespace) throws NoSuchNamespaceException;\n+\n+  /**\n+   * Apply a set of metadata changes to a namespace in the catalog.\n+   *\n+   * @param namespace a Namespace.of(name) {@link Namespace}\n+   * @param changes a collection of changes to apply to the namespace\n+   * @throws NoSuchNamespaceException If the namespace does not exist (optional)\n+   * @throws UnsupportedOperationException If namespace properties are not supported\n+   */\n+  boolean alterNamespace(Namespace namespace, NamespaceChange... changes) throws NoSuchNamespaceException;\n+\n+  /**\n+   * Checks whether the Namespace exists.\n+   *\n+   * @return true if the Namespace exists, false otherwise\n+   */\n+  boolean existsNamespace(Namespace namespace);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9816043a960c9652bb55c3971c43980da175c8d9"}, "originalPosition": 120}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkzMTA3MjMw", "url": "https://github.com/apache/iceberg/pull/919#pullrequestreview-393107230", "createdAt": "2020-04-14T16:41:19Z", "commit": {"oid": "9816043a960c9652bb55c3971c43980da175c8d9"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxNjo0MToxOVrOGFXeyA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxNjo0MToxOVrOGFXeyA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODI4MDc3Ng==", "bodyText": "This needs a @param for the namespace argument.", "url": "https://github.com/apache/iceberg/pull/919#discussion_r408280776", "createdAt": "2020-04-14T16:41:19Z", "author": {"login": "rdblue"}, "path": "api/src/main/java/org/apache/iceberg/catalog/SupportsNamespaces.java", "diffHunk": "@@ -0,0 +1,121 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.catalog;\n+\n+import com.google.common.collect.ImmutableMap;\n+import java.util.List;\n+import java.util.Map;\n+import org.apache.iceberg.exceptions.AlreadyExistsException;\n+import org.apache.iceberg.exceptions.NoSuchNamespaceException;\n+\n+/**\n+ * Catalog methods for working with namespaces.\n+ * <p>\n+ * If an object such as a table, view, or function exists, its parent namespaces must also exist\n+ * and must be returned by the discovery methods {@link #listNamespaces()} and\n+ * {@link #listNamespaces(Namespace namespace)}.\n+ * <p>\n+ * Catalog implementations are not required to maintain the existence of namespaces independent of\n+ * objects in a namespace. For example, a function catalog that loads functions using reflection\n+ * and uses Java packages as namespaces is not required to support the methods to create, alter, or\n+ * drop a namespace. Implementations are allowed to discover the existence of objects or namespaces\n+ * without throwing {@link NoSuchNamespaceException} when no namespace is found.\n+ */\n+public interface SupportsNamespaces {\n+  /**\n+   * Create a namespace in the catalog.\n+   *\n+   * @param namespace {@link Namespace}.\n+   * @throws AlreadyExistsException If the namespace already exists\n+   * @throws UnsupportedOperationException If create is not a supported operation\n+   */\n+  default void createNamespace(Namespace namespace) {\n+    createNamespace(namespace, ImmutableMap.of());\n+  }\n+\n+  /**\n+   * Create a namespace in the catalog.\n+   *\n+   * @param namespace a multi-part namespace\n+   * @param metadata a string Map of properties for the given namespace\n+   * @throws AlreadyExistsException If the namespace already exists\n+   * @throws UnsupportedOperationException If create is not a supported operation\n+   */\n+  void createNamespace(Namespace namespace, Map<String, String> metadata);\n+\n+  /**\n+   * List top-level namespaces from the catalog.\n+   * <p>\n+   * If an object such as a table, view, or function exists, its parent namespaces must also exist\n+   * and must be returned by this discovery method. For example, if table a.b.t exists, this method\n+   * must return [\"a\"] in the result array.\n+   *\n+   * @return an List of namespace {@link Namespace} names\n+   */\n+  default List<Namespace> listNamespaces() {\n+    return listNamespaces(Namespace.empty());\n+  }\n+\n+  /**\n+   * List  namespaces from the namespace.\n+   * <p>\n+   * For example, if table a.b.t exists, use 'SELECT NAMESPACE IN a' this method\n+   * must return Namepace.of(\"a\",\"b\") {@link Namespace}.\n+   *\n+   * @return an List of namespace {@link Namespace} names\n+   * @throws NoSuchNamespaceException If the namespace does not exist (optional)\n+   */\n+  List<Namespace> listNamespaces(Namespace namespace) throws NoSuchNamespaceException;\n+\n+  /**\n+   * Load metadata properties for a namespace.\n+   *\n+   * @param namespace a Namespace.of(name) {@link Namespace}\n+   * @return a string map of properties for the given namespace\n+   * @throws NoSuchNamespaceException If the namespace does not exist (optional)\n+   */\n+  Map<String, String> loadNamespaceMetadata(Namespace namespace) throws NoSuchNamespaceException;\n+\n+  /**\n+   * Drop namespace, while the namespace haven't table or sub namespace will return true.\n+   *\n+   * @param namespace a Namespace.of(name) {@link Namespace}\n+   * @return true while drop success.\n+   * @throws NoSuchNamespaceException If the namespace does not exist (optional)\n+   */\n+  boolean dropNamespace(Namespace namespace) throws NoSuchNamespaceException;\n+\n+  /**\n+   * Apply a set of metadata changes to a namespace in the catalog.\n+   *\n+   * @param namespace a Namespace.of(name) {@link Namespace}\n+   * @param changes a collection of changes to apply to the namespace\n+   * @throws NoSuchNamespaceException If the namespace does not exist (optional)\n+   * @throws UnsupportedOperationException If namespace properties are not supported\n+   */\n+  boolean alterNamespace(Namespace namespace, NamespaceChange... changes) throws NoSuchNamespaceException;\n+\n+  /**\n+   * Checks whether the Namespace exists.\n+   *\n+   * @return true if the Namespace exists, false otherwise", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9816043a960c9652bb55c3971c43980da175c8d9"}, "originalPosition": 118}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkzMTA4Njk2", "url": "https://github.com/apache/iceberg/pull/919#pullrequestreview-393108696", "createdAt": "2020-04-14T16:43:10Z", "commit": {"oid": "9816043a960c9652bb55c3971c43980da175c8d9"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxNjo0MzoxMVrOGFXjmg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxNjo0MzoxMVrOGFXjmg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODI4MjAxMA==", "bodyText": "This should be a namespace.", "url": "https://github.com/apache/iceberg/pull/919#discussion_r408282010", "createdAt": "2020-04-14T16:43:11Z", "author": {"login": "rdblue"}, "path": "api/src/main/java/org/apache/iceberg/catalog/SupportsNamespaces.java", "diffHunk": "@@ -0,0 +1,121 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.catalog;\n+\n+import com.google.common.collect.ImmutableMap;\n+import java.util.List;\n+import java.util.Map;\n+import org.apache.iceberg.exceptions.AlreadyExistsException;\n+import org.apache.iceberg.exceptions.NoSuchNamespaceException;\n+\n+/**\n+ * Catalog methods for working with namespaces.\n+ * <p>\n+ * If an object such as a table, view, or function exists, its parent namespaces must also exist\n+ * and must be returned by the discovery methods {@link #listNamespaces()} and\n+ * {@link #listNamespaces(Namespace namespace)}.\n+ * <p>\n+ * Catalog implementations are not required to maintain the existence of namespaces independent of\n+ * objects in a namespace. For example, a function catalog that loads functions using reflection\n+ * and uses Java packages as namespaces is not required to support the methods to create, alter, or\n+ * drop a namespace. Implementations are allowed to discover the existence of objects or namespaces\n+ * without throwing {@link NoSuchNamespaceException} when no namespace is found.\n+ */\n+public interface SupportsNamespaces {\n+  /**\n+   * Create a namespace in the catalog.\n+   *\n+   * @param namespace {@link Namespace}.\n+   * @throws AlreadyExistsException If the namespace already exists\n+   * @throws UnsupportedOperationException If create is not a supported operation\n+   */\n+  default void createNamespace(Namespace namespace) {\n+    createNamespace(namespace, ImmutableMap.of());\n+  }\n+\n+  /**\n+   * Create a namespace in the catalog.\n+   *\n+   * @param namespace a multi-part namespace\n+   * @param metadata a string Map of properties for the given namespace\n+   * @throws AlreadyExistsException If the namespace already exists\n+   * @throws UnsupportedOperationException If create is not a supported operation\n+   */\n+  void createNamespace(Namespace namespace, Map<String, String> metadata);\n+\n+  /**\n+   * List top-level namespaces from the catalog.\n+   * <p>\n+   * If an object such as a table, view, or function exists, its parent namespaces must also exist\n+   * and must be returned by this discovery method. For example, if table a.b.t exists, this method\n+   * must return [\"a\"] in the result array.\n+   *\n+   * @return an List of namespace {@link Namespace} names\n+   */\n+  default List<Namespace> listNamespaces() {\n+    return listNamespaces(Namespace.empty());\n+  }\n+\n+  /**\n+   * List  namespaces from the namespace.\n+   * <p>\n+   * For example, if table a.b.t exists, use 'SELECT NAMESPACE IN a' this method\n+   * must return Namepace.of(\"a\",\"b\") {@link Namespace}.\n+   *\n+   * @return an List of namespace {@link Namespace} names\n+   * @throws NoSuchNamespaceException If the namespace does not exist (optional)\n+   */\n+  List<Namespace> listNamespaces(Namespace namespace) throws NoSuchNamespaceException;\n+\n+  /**\n+   * Load metadata properties for a namespace.\n+   *\n+   * @param namespace a Namespace.of(name) {@link Namespace}\n+   * @return a string map of properties for the given namespace\n+   * @throws NoSuchNamespaceException If the namespace does not exist (optional)\n+   */\n+  Map<String, String> loadNamespaceMetadata(Namespace namespace) throws NoSuchNamespaceException;\n+\n+  /**\n+   * Drop namespace, while the namespace haven't table or sub namespace will return true.\n+   *\n+   * @param namespace a Namespace.of(name) {@link Namespace}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9816043a960c9652bb55c3971c43980da175c8d9"}, "originalPosition": 99}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkzMTA4OTI5", "url": "https://github.com/apache/iceberg/pull/919#pullrequestreview-393108929", "createdAt": "2020-04-14T16:43:29Z", "commit": {"oid": "9816043a960c9652bb55c3971c43980da175c8d9"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxNjo0MzoyOVrOGFXkRQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxNjo0MzoyOVrOGFXkRQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODI4MjE4MQ==", "bodyText": "This should be true if the namespace was dropped.", "url": "https://github.com/apache/iceberg/pull/919#discussion_r408282181", "createdAt": "2020-04-14T16:43:29Z", "author": {"login": "rdblue"}, "path": "api/src/main/java/org/apache/iceberg/catalog/SupportsNamespaces.java", "diffHunk": "@@ -0,0 +1,121 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.catalog;\n+\n+import com.google.common.collect.ImmutableMap;\n+import java.util.List;\n+import java.util.Map;\n+import org.apache.iceberg.exceptions.AlreadyExistsException;\n+import org.apache.iceberg.exceptions.NoSuchNamespaceException;\n+\n+/**\n+ * Catalog methods for working with namespaces.\n+ * <p>\n+ * If an object such as a table, view, or function exists, its parent namespaces must also exist\n+ * and must be returned by the discovery methods {@link #listNamespaces()} and\n+ * {@link #listNamespaces(Namespace namespace)}.\n+ * <p>\n+ * Catalog implementations are not required to maintain the existence of namespaces independent of\n+ * objects in a namespace. For example, a function catalog that loads functions using reflection\n+ * and uses Java packages as namespaces is not required to support the methods to create, alter, or\n+ * drop a namespace. Implementations are allowed to discover the existence of objects or namespaces\n+ * without throwing {@link NoSuchNamespaceException} when no namespace is found.\n+ */\n+public interface SupportsNamespaces {\n+  /**\n+   * Create a namespace in the catalog.\n+   *\n+   * @param namespace {@link Namespace}.\n+   * @throws AlreadyExistsException If the namespace already exists\n+   * @throws UnsupportedOperationException If create is not a supported operation\n+   */\n+  default void createNamespace(Namespace namespace) {\n+    createNamespace(namespace, ImmutableMap.of());\n+  }\n+\n+  /**\n+   * Create a namespace in the catalog.\n+   *\n+   * @param namespace a multi-part namespace\n+   * @param metadata a string Map of properties for the given namespace\n+   * @throws AlreadyExistsException If the namespace already exists\n+   * @throws UnsupportedOperationException If create is not a supported operation\n+   */\n+  void createNamespace(Namespace namespace, Map<String, String> metadata);\n+\n+  /**\n+   * List top-level namespaces from the catalog.\n+   * <p>\n+   * If an object such as a table, view, or function exists, its parent namespaces must also exist\n+   * and must be returned by this discovery method. For example, if table a.b.t exists, this method\n+   * must return [\"a\"] in the result array.\n+   *\n+   * @return an List of namespace {@link Namespace} names\n+   */\n+  default List<Namespace> listNamespaces() {\n+    return listNamespaces(Namespace.empty());\n+  }\n+\n+  /**\n+   * List  namespaces from the namespace.\n+   * <p>\n+   * For example, if table a.b.t exists, use 'SELECT NAMESPACE IN a' this method\n+   * must return Namepace.of(\"a\",\"b\") {@link Namespace}.\n+   *\n+   * @return an List of namespace {@link Namespace} names\n+   * @throws NoSuchNamespaceException If the namespace does not exist (optional)\n+   */\n+  List<Namespace> listNamespaces(Namespace namespace) throws NoSuchNamespaceException;\n+\n+  /**\n+   * Load metadata properties for a namespace.\n+   *\n+   * @param namespace a Namespace.of(name) {@link Namespace}\n+   * @return a string map of properties for the given namespace\n+   * @throws NoSuchNamespaceException If the namespace does not exist (optional)\n+   */\n+  Map<String, String> loadNamespaceMetadata(Namespace namespace) throws NoSuchNamespaceException;\n+\n+  /**\n+   * Drop namespace, while the namespace haven't table or sub namespace will return true.\n+   *\n+   * @param namespace a Namespace.of(name) {@link Namespace}\n+   * @return true while drop success.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9816043a960c9652bb55c3971c43980da175c8d9"}, "originalPosition": 100}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkzMTA5Mjgy", "url": "https://github.com/apache/iceberg/pull/919#pullrequestreview-393109282", "createdAt": "2020-04-14T16:43:56Z", "commit": {"oid": "9816043a960c9652bb55c3971c43980da175c8d9"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxNjo0Mzo1NlrOGFXlgg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxNjo0Mzo1NlrOGFXlgg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODI4MjQ5OA==", "bodyText": "Please remove this. This method should never throw NoSuchNamespaceException because that makes behavior ambiguous.", "url": "https://github.com/apache/iceberg/pull/919#discussion_r408282498", "createdAt": "2020-04-14T16:43:56Z", "author": {"login": "rdblue"}, "path": "api/src/main/java/org/apache/iceberg/catalog/SupportsNamespaces.java", "diffHunk": "@@ -0,0 +1,121 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.catalog;\n+\n+import com.google.common.collect.ImmutableMap;\n+import java.util.List;\n+import java.util.Map;\n+import org.apache.iceberg.exceptions.AlreadyExistsException;\n+import org.apache.iceberg.exceptions.NoSuchNamespaceException;\n+\n+/**\n+ * Catalog methods for working with namespaces.\n+ * <p>\n+ * If an object such as a table, view, or function exists, its parent namespaces must also exist\n+ * and must be returned by the discovery methods {@link #listNamespaces()} and\n+ * {@link #listNamespaces(Namespace namespace)}.\n+ * <p>\n+ * Catalog implementations are not required to maintain the existence of namespaces independent of\n+ * objects in a namespace. For example, a function catalog that loads functions using reflection\n+ * and uses Java packages as namespaces is not required to support the methods to create, alter, or\n+ * drop a namespace. Implementations are allowed to discover the existence of objects or namespaces\n+ * without throwing {@link NoSuchNamespaceException} when no namespace is found.\n+ */\n+public interface SupportsNamespaces {\n+  /**\n+   * Create a namespace in the catalog.\n+   *\n+   * @param namespace {@link Namespace}.\n+   * @throws AlreadyExistsException If the namespace already exists\n+   * @throws UnsupportedOperationException If create is not a supported operation\n+   */\n+  default void createNamespace(Namespace namespace) {\n+    createNamespace(namespace, ImmutableMap.of());\n+  }\n+\n+  /**\n+   * Create a namespace in the catalog.\n+   *\n+   * @param namespace a multi-part namespace\n+   * @param metadata a string Map of properties for the given namespace\n+   * @throws AlreadyExistsException If the namespace already exists\n+   * @throws UnsupportedOperationException If create is not a supported operation\n+   */\n+  void createNamespace(Namespace namespace, Map<String, String> metadata);\n+\n+  /**\n+   * List top-level namespaces from the catalog.\n+   * <p>\n+   * If an object such as a table, view, or function exists, its parent namespaces must also exist\n+   * and must be returned by this discovery method. For example, if table a.b.t exists, this method\n+   * must return [\"a\"] in the result array.\n+   *\n+   * @return an List of namespace {@link Namespace} names\n+   */\n+  default List<Namespace> listNamespaces() {\n+    return listNamespaces(Namespace.empty());\n+  }\n+\n+  /**\n+   * List  namespaces from the namespace.\n+   * <p>\n+   * For example, if table a.b.t exists, use 'SELECT NAMESPACE IN a' this method\n+   * must return Namepace.of(\"a\",\"b\") {@link Namespace}.\n+   *\n+   * @return an List of namespace {@link Namespace} names\n+   * @throws NoSuchNamespaceException If the namespace does not exist (optional)\n+   */\n+  List<Namespace> listNamespaces(Namespace namespace) throws NoSuchNamespaceException;\n+\n+  /**\n+   * Load metadata properties for a namespace.\n+   *\n+   * @param namespace a Namespace.of(name) {@link Namespace}\n+   * @return a string map of properties for the given namespace\n+   * @throws NoSuchNamespaceException If the namespace does not exist (optional)\n+   */\n+  Map<String, String> loadNamespaceMetadata(Namespace namespace) throws NoSuchNamespaceException;\n+\n+  /**\n+   * Drop namespace, while the namespace haven't table or sub namespace will return true.\n+   *\n+   * @param namespace a Namespace.of(name) {@link Namespace}\n+   * @return true while drop success.\n+   * @throws NoSuchNamespaceException If the namespace does not exist (optional)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9816043a960c9652bb55c3971c43980da175c8d9"}, "originalPosition": 101}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkzMTEyMjkz", "url": "https://github.com/apache/iceberg/pull/919#pullrequestreview-393112293", "createdAt": "2020-04-14T16:47:48Z", "commit": {"oid": "9816043a960c9652bb55c3971c43980da175c8d9"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxNjo0Nzo0OFrOGFXu9w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxNjo0Nzo0OFrOGFXu9w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODI4NDkxOQ==", "bodyText": "Why must the namespace be non-empty?", "url": "https://github.com/apache/iceberg/pull/919#discussion_r408284919", "createdAt": "2020-04-14T16:47:48Z", "author": {"login": "rdblue"}, "path": "core/src/main/java/org/apache/iceberg/hadoop/HadoopCatalog.java", "diffHunk": "@@ -200,7 +211,104 @@ public void renameTable(TableIdentifier from, TableIdentifier to) {\n   }\n \n   @Override\n-  public void close() throws IOException {\n+  public void createNamespace(Namespace namespace, Map<String, String> meta) {\n+    Preconditions.checkArgument(\n+        !namespace.isEmpty(),\n+        \"Cannot create namespace with invalid name: %s\", namespace);\n+    if (!meta.isEmpty()) {\n+      throw new UnsupportedOperationException(\"Cannot create namespace \" + namespace + \" : metadata is not supported\");\n+    }\n+\n+    Path nsPath = new Path(warehouseLocation, SLASH.join(namespace.levels()));\n+\n+    if (isNamespace(nsPath)) {\n+      throw new AlreadyExistsException(\"Namespace '%s' already exists!\", namespace);\n+    }\n+\n+    try {\n+      fs.mkdirs(nsPath);\n+\n+    } catch (IOException e) {\n+      throw new RuntimeIOException(e, \"Create namespace failed: %s\", namespace);\n+    }\n+  }\n+\n+  @Override\n+  public List<Namespace> listNamespaces(Namespace namespace) {\n+    Path nsPath = namespace.isEmpty() ? new Path(warehouseLocation)\n+        : new Path(warehouseLocation, SLASH.join(namespace.levels()));\n+    if (!isNamespace(nsPath)) {\n+      throw new NoSuchNamespaceException(\"Namespace does not exist: %s\", namespace);\n+    }\n+\n+    try {\n+      return Stream.of(fs.listStatus(nsPath))\n+        .map(FileStatus::getPath)\n+        .filter(path -> isNamespace(path))\n+        .map(path -> append(namespace, path.getName()))\n+        .collect(Collectors.toList());\n+    } catch (IOException ioe) {\n+      throw new RuntimeIOException(ioe, \"Failed to list namespace under: %s\", namespace);\n+    }\n+  }\n+\n+  private Namespace append(Namespace ns, String name) {\n+    String[] levels = Arrays.copyOfRange(ns.levels(), 0, ns.levels().length + 1);\n+    levels[ns.levels().length] = name;\n+    return Namespace.of(levels);\n+  }\n+\n+  @Override\n+  public boolean dropNamespace(Namespace namespace) {\n+    Path nsPath = new Path(warehouseLocation, SLASH.join(namespace.levels()));\n+\n+    if (!isNamespace(nsPath) || namespace.isEmpty()) {\n+      throw new NoSuchNamespaceException(\"Namespace does not exist: %s\", namespace);\n+    }\n+\n+    try {\n+      return fs.delete(nsPath, true /* recursive */);\n+\n+    } catch (IOException e) {\n+      throw new RuntimeIOException(e, \"Namespace delete failed: %s\", namespace);\n+    }\n+  }\n+\n+  @Override\n+  public boolean alterNamespace(Namespace namespace, NamespaceChange... changes) {\n+    throw new UnsupportedOperationException(\n+        \"Cannot alter namespace \" + namespace + \" : alterNamespace is not supported\");\n   }\n \n+  @Override\n+  public Map<String, String> loadNamespaceMetadata(Namespace namespace) {\n+    Path nsPath = new Path(warehouseLocation, SLASH.join(namespace.levels()));\n+\n+    if (!isNamespace(nsPath) || namespace.isEmpty()) {\n+      throw new NoSuchNamespaceException(\"Namespace does not exist: %s\", namespace);\n+    }\n+\n+    return ImmutableMap.of(\"location\", nsPath.toString());\n+  }\n+\n+  private boolean isNamespace(Path path) {\n+    Path metadataPath = new Path(path, \"metadata\");\n+    try {\n+      return fs.isDirectory(path) && !(fs.exists(metadataPath) && fs.isDirectory(metadataPath) &&\n+          (fs.listStatus(metadataPath, TABLE_FILTER).length >= 1));\n+\n+    } catch (IOException ioe) {\n+      throw new RuntimeIOException(ioe, \"Failed to list namespace info: %s \", path);\n+    }\n+  }\n+\n+  @Override\n+  public boolean existsNamespace(Namespace namespace) {\n+    Path nsPath = new Path(warehouseLocation, SLASH.join(namespace.levels()));\n+    return isNamespace(nsPath) && !namespace.isEmpty();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9816043a960c9652bb55c3971c43980da175c8d9"}, "originalPosition": 201}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "43ae7e68a93be8a8ff6a85b27e28639eb7431e57", "author": {"user": {"login": "XiaokunDing", "name": "XiaokunDing"}}, "url": "https://github.com/apache/iceberg/commit/43ae7e68a93be8a8ff6a85b27e28639eb7431e57", "committedDate": "2020-04-15T10:12:52Z", "message": "[ISSUE #672] Fix the code address comments by Ryan Blue"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "85582d3b2bc3b798e1a90c89ef2b91d35266c677", "author": {"user": {"login": "XiaokunDing", "name": "XiaokunDing"}}, "url": "https://github.com/apache/iceberg/commit/85582d3b2bc3b798e1a90c89ef2b91d35266c677", "committedDate": "2020-04-15T08:50:49Z", "message": "[ISSUE #672] Fix the code address comments by Ryan Blue"}, "afterCommit": {"oid": "43ae7e68a93be8a8ff6a85b27e28639eb7431e57", "author": {"user": {"login": "XiaokunDing", "name": "XiaokunDing"}}, "url": "https://github.com/apache/iceberg/commit/43ae7e68a93be8a8ff6a85b27e28639eb7431e57", "committedDate": "2020-04-15T10:12:52Z", "message": "[ISSUE #672] Fix the code address comments by Ryan Blue"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkzOTg1MDU2", "url": "https://github.com/apache/iceberg/pull/919#pullrequestreview-393985056", "createdAt": "2020-04-15T17:28:05Z", "commit": {"oid": "43ae7e68a93be8a8ff6a85b27e28639eb7431e57"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNzoyODowNVrOGGEG3Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNzoyODowNVrOGGEG3Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTAxMTkzMw==", "bodyText": "I don't understand what this is trying to say. I think it should be this:\n\nDrop a namespace. If the namespace exists and was dropped, this will return true.\n\nIs this a recursive operation? That is, if the namespace is not empty (has child namespaces or tables) will those also be dropped?", "url": "https://github.com/apache/iceberg/pull/919#discussion_r409011933", "createdAt": "2020-04-15T17:28:05Z", "author": {"login": "rdblue"}, "path": "api/src/main/java/org/apache/iceberg/catalog/SupportsNamespaces.java", "diffHunk": "@@ -0,0 +1,140 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.catalog;\n+\n+import com.google.common.collect.ImmutableMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import org.apache.iceberg.exceptions.AlreadyExistsException;\n+import org.apache.iceberg.exceptions.NoSuchNamespaceException;\n+\n+/**\n+ * Catalog methods for working with namespaces.\n+ * <p>\n+ * If an object such as a table, view, or function exists, its parent namespaces must also exist\n+ * and must be returned by the discovery methods {@link #listNamespaces()} and\n+ * {@link #listNamespaces(Namespace namespace)}.\n+ * <p>\n+ * Catalog implementations are not required to maintain the existence of namespaces independent of\n+ * objects in a namespace. For example, a function catalog that loads functions using reflection\n+ * and uses Java packages as namespaces is not required to support the methods to create, alter, or\n+ * drop a namespace. Implementations are allowed to discover the existence of objects or namespaces\n+ * without throwing {@link NoSuchNamespaceException} when no namespace is found.\n+ */\n+public interface SupportsNamespaces {\n+  /**\n+   * Create a namespace in the catalog.\n+   *\n+   * @param namespace a namespace. {@link Namespace}.\n+   * @throws AlreadyExistsException If the namespace already exists\n+   * @throws UnsupportedOperationException If create is not a supported operation\n+   */\n+  default void createNamespace(Namespace namespace) {\n+    createNamespace(namespace, ImmutableMap.of());\n+  }\n+\n+  /**\n+   * Create a namespace in the catalog.\n+   *\n+   * @param namespace a multi-part namespace\n+   * @param metadata a string Map of properties for the given namespace\n+   * @throws AlreadyExistsException If the namespace already exists\n+   * @throws UnsupportedOperationException If create is not a supported operation\n+   */\n+  void createNamespace(Namespace namespace, Map<String, String> metadata);\n+\n+  /**\n+   * List top-level namespaces from the catalog.\n+   * <p>\n+   * If an object such as a table, view, or function exists, its parent namespaces must also exist\n+   * and must be returned by this discovery method. For example, if table a.b.t exists, this method\n+   * must return [\"a\"] in the result array.\n+   *\n+   * @return an List of namespace {@link Namespace} names\n+   */\n+  default List<Namespace> listNamespaces() {\n+    return listNamespaces(Namespace.empty());\n+  }\n+\n+  /**\n+   * List namespaces from the namespace.\n+   * <p>\n+   * For example, if table a.b.t exists, use 'SELECT NAMESPACE IN a' this method\n+   * must return Namepace.of(\"a\",\"b\") {@link Namespace}.\n+   *\n+   * @return a List of namespace {@link Namespace} names\n+   * @throws NoSuchNamespaceException If the namespace does not exist (optional)\n+   */\n+  List<Namespace> listNamespaces(Namespace namespace) throws NoSuchNamespaceException;\n+\n+  /**\n+   * Load metadata properties for a namespace.\n+   *\n+   * @param namespace a namespace. {@link Namespace}\n+   * @return a string map of properties for the given namespace\n+   * @throws NoSuchNamespaceException If the namespace does not exist (optional)\n+   */\n+  Map<String, String> loadNamespaceMetadata(Namespace namespace) throws NoSuchNamespaceException;\n+\n+  /**\n+   * Drop namespace, while the namespace haven't table or sub namespace will return true.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "43ae7e68a93be8a8ff6a85b27e28639eb7431e57"}, "originalPosition": 98}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkzOTg2MjU4", "url": "https://github.com/apache/iceberg/pull/919#pullrequestreview-393986258", "createdAt": "2020-04-15T17:29:46Z", "commit": {"oid": "43ae7e68a93be8a8ff6a85b27e28639eb7431e57"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNzoyOTo0NlrOGGEK0w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNzoyOTo0NlrOGGEK0w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTAxMjk0Nw==", "bodyText": "Please remove extra newlines like this one.", "url": "https://github.com/apache/iceberg/pull/919#discussion_r409012947", "createdAt": "2020-04-15T17:29:46Z", "author": {"login": "rdblue"}, "path": "api/src/main/java/org/apache/iceberg/catalog/SupportsNamespaces.java", "diffHunk": "@@ -0,0 +1,140 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.catalog;\n+\n+import com.google.common.collect.ImmutableMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import org.apache.iceberg.exceptions.AlreadyExistsException;\n+import org.apache.iceberg.exceptions.NoSuchNamespaceException;\n+\n+/**\n+ * Catalog methods for working with namespaces.\n+ * <p>\n+ * If an object such as a table, view, or function exists, its parent namespaces must also exist\n+ * and must be returned by the discovery methods {@link #listNamespaces()} and\n+ * {@link #listNamespaces(Namespace namespace)}.\n+ * <p>\n+ * Catalog implementations are not required to maintain the existence of namespaces independent of\n+ * objects in a namespace. For example, a function catalog that loads functions using reflection\n+ * and uses Java packages as namespaces is not required to support the methods to create, alter, or\n+ * drop a namespace. Implementations are allowed to discover the existence of objects or namespaces\n+ * without throwing {@link NoSuchNamespaceException} when no namespace is found.\n+ */\n+public interface SupportsNamespaces {\n+  /**\n+   * Create a namespace in the catalog.\n+   *\n+   * @param namespace a namespace. {@link Namespace}.\n+   * @throws AlreadyExistsException If the namespace already exists\n+   * @throws UnsupportedOperationException If create is not a supported operation\n+   */\n+  default void createNamespace(Namespace namespace) {\n+    createNamespace(namespace, ImmutableMap.of());\n+  }\n+\n+  /**\n+   * Create a namespace in the catalog.\n+   *\n+   * @param namespace a multi-part namespace\n+   * @param metadata a string Map of properties for the given namespace\n+   * @throws AlreadyExistsException If the namespace already exists\n+   * @throws UnsupportedOperationException If create is not a supported operation\n+   */\n+  void createNamespace(Namespace namespace, Map<String, String> metadata);\n+\n+  /**\n+   * List top-level namespaces from the catalog.\n+   * <p>\n+   * If an object such as a table, view, or function exists, its parent namespaces must also exist\n+   * and must be returned by this discovery method. For example, if table a.b.t exists, this method\n+   * must return [\"a\"] in the result array.\n+   *\n+   * @return an List of namespace {@link Namespace} names\n+   */\n+  default List<Namespace> listNamespaces() {\n+    return listNamespaces(Namespace.empty());\n+  }\n+\n+  /**\n+   * List namespaces from the namespace.\n+   * <p>\n+   * For example, if table a.b.t exists, use 'SELECT NAMESPACE IN a' this method\n+   * must return Namepace.of(\"a\",\"b\") {@link Namespace}.\n+   *\n+   * @return a List of namespace {@link Namespace} names\n+   * @throws NoSuchNamespaceException If the namespace does not exist (optional)\n+   */\n+  List<Namespace> listNamespaces(Namespace namespace) throws NoSuchNamespaceException;\n+\n+  /**\n+   * Load metadata properties for a namespace.\n+   *\n+   * @param namespace a namespace. {@link Namespace}\n+   * @return a string map of properties for the given namespace\n+   * @throws NoSuchNamespaceException If the namespace does not exist (optional)\n+   */\n+  Map<String, String> loadNamespaceMetadata(Namespace namespace) throws NoSuchNamespaceException;\n+\n+  /**\n+   * Drop namespace, while the namespace haven't table or sub namespace will return true.\n+   *\n+   * @param namespace a namespace. {@link Namespace}\n+   * @return true if the namespace was dropped, false otherwise.\n+   */\n+  boolean dropNamespace(Namespace namespace);\n+\n+  /**\n+   * Apply a set of metadata to a namespace in the catalog.\n+   *\n+   * @param namespace a namespace. {@link Namespace}\n+   * @param properties a collection of metadata to apply to the namespace\n+   * @throws NoSuchNamespaceException If the namespace does not exist (optional)\n+   * @throws UnsupportedOperationException If namespace properties are not supported\n+   */\n+  boolean setProperties(Namespace namespace, Map<String, String> properties) throws NoSuchNamespaceException;\n+\n+  /**\n+   * Remove a set of metadata from a namespace in the catalog.\n+   *\n+   * @param namespace a namespace. {@link Namespace}\n+   * @param properties a collection of metadata to apply to the namespace\n+   * @throws NoSuchNamespaceException If the namespace does not exist (optional)\n+   * @throws UnsupportedOperationException If namespace properties are not supported\n+   */\n+  boolean removeProperties(Namespace namespace, Set<String> properties) throws NoSuchNamespaceException;\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "43ae7e68a93be8a8ff6a85b27e28639eb7431e57"}, "originalPosition": 124}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7d27a8eb60e5f6d221bc8769af9339db5215f69d", "author": {"user": {"login": "XiaokunDing", "name": "XiaokunDing"}}, "url": "https://github.com/apache/iceberg/commit/7d27a8eb60e5f6d221bc8769af9339db5215f69d", "committedDate": "2020-04-16T04:05:35Z", "message": "[ISSUE #672] Fix the code address comments by Ryan Blue"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk0ODU0NDA3", "url": "https://github.com/apache/iceberg/pull/919#pullrequestreview-394854407", "createdAt": "2020-04-16T17:34:28Z", "commit": {"oid": "7d27a8eb60e5f6d221bc8769af9339db5215f69d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxNzozNDoyOFrOGGwBjA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxNzozNDoyOFrOGGwBjA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTczMTQ2OA==", "bodyText": "Why is this optional?\nThis method should have a clear contract. Maybe deleting nested tables and maybe not deleting them is not reliable enough behavior.", "url": "https://github.com/apache/iceberg/pull/919#discussion_r409731468", "createdAt": "2020-04-16T17:34:28Z", "author": {"login": "rdblue"}, "path": "api/src/main/java/org/apache/iceberg/catalog/SupportsNamespaces.java", "diffHunk": "@@ -0,0 +1,141 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.catalog;\n+\n+import com.google.common.collect.ImmutableMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import org.apache.iceberg.exceptions.AlreadyExistsException;\n+import org.apache.iceberg.exceptions.NamespaceNotEmptyException;\n+import org.apache.iceberg.exceptions.NoSuchNamespaceException;\n+\n+/**\n+ * Catalog methods for working with namespaces.\n+ * <p>\n+ * If an object such as a table, view, or function exists, its parent namespaces must also exist\n+ * and must be returned by the discovery methods {@link #listNamespaces()} and\n+ * {@link #listNamespaces(Namespace namespace)}.\n+ * <p>\n+ * Catalog implementations are not required to maintain the existence of namespaces independent of\n+ * objects in a namespace. For example, a function catalog that loads functions using reflection\n+ * and uses Java packages as namespaces is not required to support the methods to create, alter, or\n+ * drop a namespace. Implementations are allowed to discover the existence of objects or namespaces\n+ * without throwing {@link NoSuchNamespaceException} when no namespace is found.\n+ */\n+public interface SupportsNamespaces {\n+  /**\n+   * Create a namespace in the catalog.\n+   *\n+   * @param namespace a namespace. {@link Namespace}.\n+   * @throws AlreadyExistsException If the namespace already exists\n+   * @throws UnsupportedOperationException If create is not a supported operation\n+   */\n+  default void createNamespace(Namespace namespace) {\n+    createNamespace(namespace, ImmutableMap.of());\n+  }\n+\n+  /**\n+   * Create a namespace in the catalog.\n+   *\n+   * @param namespace a multi-part namespace\n+   * @param metadata a string Map of properties for the given namespace\n+   * @throws AlreadyExistsException If the namespace already exists\n+   * @throws UnsupportedOperationException If create is not a supported operation\n+   */\n+  void createNamespace(Namespace namespace, Map<String, String> metadata);\n+\n+  /**\n+   * List top-level namespaces from the catalog.\n+   * <p>\n+   * If an object such as a table, view, or function exists, its parent namespaces must also exist\n+   * and must be returned by this discovery method. For example, if table a.b.t exists, this method\n+   * must return [\"a\"] in the result array.\n+   *\n+   * @return an List of namespace {@link Namespace} names\n+   */\n+  default List<Namespace> listNamespaces() {\n+    return listNamespaces(Namespace.empty());\n+  }\n+\n+  /**\n+   * List namespaces from the namespace.\n+   * <p>\n+   * For example, if table a.b.t exists, use 'SELECT NAMESPACE IN a' this method\n+   * must return Namepace.of(\"a\",\"b\") {@link Namespace}.\n+   *\n+   * @return a List of namespace {@link Namespace} names\n+   * @throws NoSuchNamespaceException If the namespace does not exist (optional)\n+   */\n+  List<Namespace> listNamespaces(Namespace namespace) throws NoSuchNamespaceException;\n+\n+  /**\n+   * Load metadata properties for a namespace.\n+   *\n+   * @param namespace a namespace. {@link Namespace}\n+   * @return a string map of properties for the given namespace\n+   * @throws NoSuchNamespaceException If the namespace does not exist (optional)\n+   */\n+  Map<String, String> loadNamespaceMetadata(Namespace namespace) throws NoSuchNamespaceException;\n+\n+  /**\n+   * Drop a namespace. If the namespace exists and was dropped, this will return true.\n+   *\n+   * @param namespace a namespace. {@link Namespace}\n+   * @return true if the namespace was dropped, false otherwise.\n+   * @throws NamespaceNotEmptyException If the namespace does not empty (optional)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7d27a8eb60e5f6d221bc8769af9339db5215f69d"}, "originalPosition": 103}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk0ODU2MTUz", "url": "https://github.com/apache/iceberg/pull/919#pullrequestreview-394856153", "createdAt": "2020-04-16T17:36:56Z", "commit": {"oid": "7d27a8eb60e5f6d221bc8769af9339db5215f69d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxNzozNjo1NlrOGGwHSg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxNzozNjo1NlrOGGwHSg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTczMjkzOA==", "bodyText": "What is meant by \"error\" in this context message?", "url": "https://github.com/apache/iceberg/pull/919#discussion_r409732938", "createdAt": "2020-04-16T17:36:56Z", "author": {"login": "rdblue"}, "path": "hive/src/test/java/org/apache/iceberg/hive/TestHiveCatalog.java", "diffHunk": "@@ -0,0 +1,192 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.hive;\n+\n+import com.google.common.collect.ImmutableMap;\n+import com.google.common.collect.ImmutableSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.UUID;\n+import org.apache.hadoop.hive.metastore.api.Database;\n+import org.apache.iceberg.AssertHelpers;\n+import org.apache.iceberg.Schema;\n+import org.apache.iceberg.catalog.Namespace;\n+import org.apache.iceberg.catalog.TableIdentifier;\n+import org.apache.iceberg.types.Types;\n+import org.apache.thrift.TException;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+import static org.apache.iceberg.types.Types.NestedField.required;\n+\n+public class TestHiveCatalog extends HiveMetastoreTest {\n+  private static final String hiveLocalDir = \"file:/tmp/hive/\" + UUID.randomUUID().toString();\n+  private static ImmutableMap meta = ImmutableMap.of(\n+      \"owner\", \"apache\",\n+      \"group\", \"iceberg\",\n+      \"comment\", \"iceberg  hiveCatalog test\");\n+\n+  @Test\n+  public void testCreateNamespace() throws TException {\n+    Namespace namespace1 = Namespace.of(\"noLocation\");\n+    catalog.createNamespace(namespace1, meta);\n+    Database database1 = metastoreClient.getDatabase(namespace1.toString());\n+\n+    Assert.assertTrue(database1.getParameters().get(\"owner\").equals(\"apache\"));\n+    Assert.assertTrue(database1.getParameters().get(\"group\").equals(\"iceberg\"));\n+\n+    Assert.assertEquals(\"There no same location for db and namespace\",\n+        database1.getLocationUri(), defaultUri(namespace1));\n+\n+    AssertHelpers.assertThrows(\"Should fail to create when namespace already exist \" + namespace1,\n+        org.apache.iceberg.exceptions.AlreadyExistsException.class,\n+        \"Namespace '\" + namespace1 + \"' already exists!\", () -> {\n+          catalog.createNamespace(namespace1);\n+        });\n+    ImmutableMap newMeta = ImmutableMap.<String, String>builder()\n+        .putAll(meta)\n+        .put(\"location\", hiveLocalDir)\n+        .build();\n+    Namespace namespace2 = Namespace.of(\"haveLocation\");\n+\n+    catalog.createNamespace(namespace2, newMeta);\n+    Database database2 = metastoreClient.getDatabase(namespace2.toString());\n+    Assert.assertEquals(\"There no same location for db and namespace\",\n+        database2.getLocationUri(), hiveLocalDir);\n+  }\n+\n+  @Test\n+  public void testListNamespace() throws TException {\n+    List<Namespace> namespaces;\n+    Namespace namespace1 = Namespace.of(\"dbname1\");\n+    catalog.createNamespace(namespace1, meta);\n+    namespaces = catalog.listNamespaces(namespace1);\n+    Assert.assertTrue(\"Hive db not hive the namespace 'dbname1'\", namespaces.isEmpty());\n+\n+    Namespace namespace2 = Namespace.of(\"dbname2\");\n+    catalog.createNamespace(namespace2, meta);\n+    namespaces = catalog.listNamespaces();\n+\n+    Assert.assertTrue(\"Hive db not hive the namespace 'dbname2'\", namespaces.contains(namespace2));\n+  }\n+\n+  @Test\n+  public void testLoadNamespaceMeta() throws TException {\n+    Namespace namespace = Namespace.of(\"dbname_load\");\n+\n+    catalog.createNamespace(namespace, meta);\n+\n+    Map<String, String> nameMata = catalog.loadNamespaceMetadata(namespace);\n+    Assert.assertTrue(nameMata.get(\"owner\").equals(\"apache\"));\n+    Assert.assertTrue(nameMata.get(\"group\").equals(\"iceberg\"));\n+    Assert.assertEquals(\"There no same location for db and namespace\",\n+        nameMata.get(\"location\"), catalog.convertToDatabase(namespace, meta).getLocationUri());\n+  }\n+\n+  @Test\n+  public void testNamespaceExists() throws TException {\n+    Namespace namespace = Namespace.of(\"dbname_exists\");\n+\n+    catalog.createNamespace(namespace, meta);\n+\n+    Assert.assertTrue(\"Should true to namespace exist\",\n+        catalog.namespaceExists(namespace));\n+    Assert.assertTrue(\"Should false to namespace doesn't exist\",\n+        !catalog.namespaceExists(Namespace.of(\"db2\", \"db2\", \"ns2\")));\n+  }\n+\n+  @Test\n+  public void testSetNamespaceProperties() throws TException {\n+    Namespace namespace = Namespace.of(\"dbname_set\");\n+\n+    catalog.createNamespace(namespace, meta);\n+    catalog.setProperties(namespace,\n+        ImmutableMap.of(\n+            \"owner\", \"alter_apache\",\n+            \"test\", \"test\",\n+            \"location\", \"file:/data/tmp\",\n+            \"comment\", \"iceberg test\")\n+    );\n+\n+    Database database = metastoreClient.getDatabase(namespace.level(0));\n+    Assert.assertEquals(database.getParameters().get(\"owner\"), \"alter_apache\");\n+    Assert.assertEquals(database.getParameters().get(\"test\"), \"test\");\n+    Assert.assertEquals(database.getParameters().get(\"group\"), \"iceberg\");\n+    AssertHelpers.assertThrows(\"Should fail to namespace not exist\" + namespace,\n+        org.apache.iceberg.exceptions.NoSuchNamespaceException.class,\n+        \"Namespace does not exist: \", () -> {\n+          catalog.setProperties(Namespace.of(\"db2\", \"db2\", \"ns2\"), meta);\n+        });\n+  }\n+\n+  @Test\n+  public void testRemoveNamespaceProperties() throws TException {\n+    Namespace namespace = Namespace.of(\"dbname_remove\");\n+\n+    catalog.createNamespace(namespace, meta);\n+\n+    catalog.removeProperties(namespace, ImmutableSet.of(\"comment\", \"owner\"));\n+\n+    Database database = metastoreClient.getDatabase(namespace.level(0));\n+\n+    Assert.assertEquals(database.getParameters().get(\"owner\"), null);\n+    Assert.assertEquals(database.getParameters().get(\"group\"), \"iceberg\");\n+    AssertHelpers.assertThrows(\"Should fail to namespace not exist\" + namespace,\n+        org.apache.iceberg.exceptions.NoSuchNamespaceException.class,\n+        \"Namespace does not exist: \", () -> {\n+          catalog.removeProperties(Namespace.of(\"db2\", \"db2\", \"ns2\"), ImmutableSet.of(\"comment\", \"owner\"));\n+        });\n+  }\n+\n+  @Test\n+  public void testDropNamespace() throws TException {\n+    Namespace namespace = Namespace.of(\"dbname_drop\");\n+    TableIdentifier identifier = TableIdentifier.of(namespace, \"table\");\n+    Schema schema = new Schema(Types.StructType.of(\n+        required(1, \"id\", Types.LongType.get())).fields());\n+\n+    catalog.createNamespace(namespace, meta);\n+    catalog.createTable(identifier, schema);\n+    Map<String, String> nameMata = catalog.loadNamespaceMetadata(namespace);\n+    Assert.assertTrue(nameMata.get(\"owner\").equals(\"apache\"));\n+    Assert.assertTrue(nameMata.get(\"group\").equals(\"iceberg\"));\n+\n+    AssertHelpers.assertThrows(\"Should fail to drop namespace is not empty\" + namespace,\n+        org.apache.iceberg.exceptions.NamespaceNotEmptyException.class,\n+        \"Namespace dbname_drop is not empty. One or more tables exist.\", () -> {\n+          catalog.dropNamespace(namespace);\n+        });\n+    Assert.assertTrue(catalog.dropTable(identifier, true));\n+    Assert.assertTrue(\"Drop namespace \" + namespace + \" error \", catalog.dropNamespace(namespace));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7d27a8eb60e5f6d221bc8769af9339db5215f69d"}, "originalPosition": 177}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk0ODU2Njc1", "url": "https://github.com/apache/iceberg/pull/919#pullrequestreview-394856675", "createdAt": "2020-04-16T17:37:39Z", "commit": {"oid": "7d27a8eb60e5f6d221bc8769af9339db5215f69d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxNzozNzo0MFrOGGwIyQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxNzozNzo0MFrOGGwIyQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTczMzMyMQ==", "bodyText": "What is meant by \"error\" in this context message? The other messages describe the expectation that the assertion validates; the one above is an example of a good one: \"should fail to drop namespace if it is not empty\". Could you rephrase this to be similar?", "url": "https://github.com/apache/iceberg/pull/919#discussion_r409733321", "createdAt": "2020-04-16T17:37:40Z", "author": {"login": "rdblue"}, "path": "hive/src/test/java/org/apache/iceberg/hive/TestHiveCatalog.java", "diffHunk": "@@ -0,0 +1,192 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.hive;\n+\n+import com.google.common.collect.ImmutableMap;\n+import com.google.common.collect.ImmutableSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.UUID;\n+import org.apache.hadoop.hive.metastore.api.Database;\n+import org.apache.iceberg.AssertHelpers;\n+import org.apache.iceberg.Schema;\n+import org.apache.iceberg.catalog.Namespace;\n+import org.apache.iceberg.catalog.TableIdentifier;\n+import org.apache.iceberg.types.Types;\n+import org.apache.thrift.TException;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+import static org.apache.iceberg.types.Types.NestedField.required;\n+\n+public class TestHiveCatalog extends HiveMetastoreTest {\n+  private static final String hiveLocalDir = \"file:/tmp/hive/\" + UUID.randomUUID().toString();\n+  private static ImmutableMap meta = ImmutableMap.of(\n+      \"owner\", \"apache\",\n+      \"group\", \"iceberg\",\n+      \"comment\", \"iceberg  hiveCatalog test\");\n+\n+  @Test\n+  public void testCreateNamespace() throws TException {\n+    Namespace namespace1 = Namespace.of(\"noLocation\");\n+    catalog.createNamespace(namespace1, meta);\n+    Database database1 = metastoreClient.getDatabase(namespace1.toString());\n+\n+    Assert.assertTrue(database1.getParameters().get(\"owner\").equals(\"apache\"));\n+    Assert.assertTrue(database1.getParameters().get(\"group\").equals(\"iceberg\"));\n+\n+    Assert.assertEquals(\"There no same location for db and namespace\",\n+        database1.getLocationUri(), defaultUri(namespace1));\n+\n+    AssertHelpers.assertThrows(\"Should fail to create when namespace already exist \" + namespace1,\n+        org.apache.iceberg.exceptions.AlreadyExistsException.class,\n+        \"Namespace '\" + namespace1 + \"' already exists!\", () -> {\n+          catalog.createNamespace(namespace1);\n+        });\n+    ImmutableMap newMeta = ImmutableMap.<String, String>builder()\n+        .putAll(meta)\n+        .put(\"location\", hiveLocalDir)\n+        .build();\n+    Namespace namespace2 = Namespace.of(\"haveLocation\");\n+\n+    catalog.createNamespace(namespace2, newMeta);\n+    Database database2 = metastoreClient.getDatabase(namespace2.toString());\n+    Assert.assertEquals(\"There no same location for db and namespace\",\n+        database2.getLocationUri(), hiveLocalDir);\n+  }\n+\n+  @Test\n+  public void testListNamespace() throws TException {\n+    List<Namespace> namespaces;\n+    Namespace namespace1 = Namespace.of(\"dbname1\");\n+    catalog.createNamespace(namespace1, meta);\n+    namespaces = catalog.listNamespaces(namespace1);\n+    Assert.assertTrue(\"Hive db not hive the namespace 'dbname1'\", namespaces.isEmpty());\n+\n+    Namespace namespace2 = Namespace.of(\"dbname2\");\n+    catalog.createNamespace(namespace2, meta);\n+    namespaces = catalog.listNamespaces();\n+\n+    Assert.assertTrue(\"Hive db not hive the namespace 'dbname2'\", namespaces.contains(namespace2));\n+  }\n+\n+  @Test\n+  public void testLoadNamespaceMeta() throws TException {\n+    Namespace namespace = Namespace.of(\"dbname_load\");\n+\n+    catalog.createNamespace(namespace, meta);\n+\n+    Map<String, String> nameMata = catalog.loadNamespaceMetadata(namespace);\n+    Assert.assertTrue(nameMata.get(\"owner\").equals(\"apache\"));\n+    Assert.assertTrue(nameMata.get(\"group\").equals(\"iceberg\"));\n+    Assert.assertEquals(\"There no same location for db and namespace\",\n+        nameMata.get(\"location\"), catalog.convertToDatabase(namespace, meta).getLocationUri());\n+  }\n+\n+  @Test\n+  public void testNamespaceExists() throws TException {\n+    Namespace namespace = Namespace.of(\"dbname_exists\");\n+\n+    catalog.createNamespace(namespace, meta);\n+\n+    Assert.assertTrue(\"Should true to namespace exist\",\n+        catalog.namespaceExists(namespace));\n+    Assert.assertTrue(\"Should false to namespace doesn't exist\",\n+        !catalog.namespaceExists(Namespace.of(\"db2\", \"db2\", \"ns2\")));\n+  }\n+\n+  @Test\n+  public void testSetNamespaceProperties() throws TException {\n+    Namespace namespace = Namespace.of(\"dbname_set\");\n+\n+    catalog.createNamespace(namespace, meta);\n+    catalog.setProperties(namespace,\n+        ImmutableMap.of(\n+            \"owner\", \"alter_apache\",\n+            \"test\", \"test\",\n+            \"location\", \"file:/data/tmp\",\n+            \"comment\", \"iceberg test\")\n+    );\n+\n+    Database database = metastoreClient.getDatabase(namespace.level(0));\n+    Assert.assertEquals(database.getParameters().get(\"owner\"), \"alter_apache\");\n+    Assert.assertEquals(database.getParameters().get(\"test\"), \"test\");\n+    Assert.assertEquals(database.getParameters().get(\"group\"), \"iceberg\");\n+    AssertHelpers.assertThrows(\"Should fail to namespace not exist\" + namespace,\n+        org.apache.iceberg.exceptions.NoSuchNamespaceException.class,\n+        \"Namespace does not exist: \", () -> {\n+          catalog.setProperties(Namespace.of(\"db2\", \"db2\", \"ns2\"), meta);\n+        });\n+  }\n+\n+  @Test\n+  public void testRemoveNamespaceProperties() throws TException {\n+    Namespace namespace = Namespace.of(\"dbname_remove\");\n+\n+    catalog.createNamespace(namespace, meta);\n+\n+    catalog.removeProperties(namespace, ImmutableSet.of(\"comment\", \"owner\"));\n+\n+    Database database = metastoreClient.getDatabase(namespace.level(0));\n+\n+    Assert.assertEquals(database.getParameters().get(\"owner\"), null);\n+    Assert.assertEquals(database.getParameters().get(\"group\"), \"iceberg\");\n+    AssertHelpers.assertThrows(\"Should fail to namespace not exist\" + namespace,\n+        org.apache.iceberg.exceptions.NoSuchNamespaceException.class,\n+        \"Namespace does not exist: \", () -> {\n+          catalog.removeProperties(Namespace.of(\"db2\", \"db2\", \"ns2\"), ImmutableSet.of(\"comment\", \"owner\"));\n+        });\n+  }\n+\n+  @Test\n+  public void testDropNamespace() throws TException {\n+    Namespace namespace = Namespace.of(\"dbname_drop\");\n+    TableIdentifier identifier = TableIdentifier.of(namespace, \"table\");\n+    Schema schema = new Schema(Types.StructType.of(\n+        required(1, \"id\", Types.LongType.get())).fields());\n+\n+    catalog.createNamespace(namespace, meta);\n+    catalog.createTable(identifier, schema);\n+    Map<String, String> nameMata = catalog.loadNamespaceMetadata(namespace);\n+    Assert.assertTrue(nameMata.get(\"owner\").equals(\"apache\"));\n+    Assert.assertTrue(nameMata.get(\"group\").equals(\"iceberg\"));\n+\n+    AssertHelpers.assertThrows(\"Should fail to drop namespace is not empty\" + namespace,\n+        org.apache.iceberg.exceptions.NamespaceNotEmptyException.class,\n+        \"Namespace dbname_drop is not empty. One or more tables exist.\", () -> {\n+          catalog.dropNamespace(namespace);\n+        });\n+    Assert.assertTrue(catalog.dropTable(identifier, true));\n+    Assert.assertTrue(\"Drop namespace \" + namespace + \" error \", catalog.dropNamespace(namespace));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7d27a8eb60e5f6d221bc8769af9339db5215f69d"}, "originalPosition": 177}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk0ODU3MDA2", "url": "https://github.com/apache/iceberg/pull/919#pullrequestreview-394857006", "createdAt": "2020-04-16T17:38:05Z", "commit": {"oid": "7d27a8eb60e5f6d221bc8769af9339db5215f69d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxNzozODowNlrOGGwJuQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxNzozODowNlrOGGwJuQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTczMzU2MQ==", "bodyText": "Why not import this class?", "url": "https://github.com/apache/iceberg/pull/919#discussion_r409733561", "createdAt": "2020-04-16T17:38:06Z", "author": {"login": "rdblue"}, "path": "hive/src/test/java/org/apache/iceberg/hive/TestHiveCatalog.java", "diffHunk": "@@ -0,0 +1,192 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.hive;\n+\n+import com.google.common.collect.ImmutableMap;\n+import com.google.common.collect.ImmutableSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.UUID;\n+import org.apache.hadoop.hive.metastore.api.Database;\n+import org.apache.iceberg.AssertHelpers;\n+import org.apache.iceberg.Schema;\n+import org.apache.iceberg.catalog.Namespace;\n+import org.apache.iceberg.catalog.TableIdentifier;\n+import org.apache.iceberg.types.Types;\n+import org.apache.thrift.TException;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+import static org.apache.iceberg.types.Types.NestedField.required;\n+\n+public class TestHiveCatalog extends HiveMetastoreTest {\n+  private static final String hiveLocalDir = \"file:/tmp/hive/\" + UUID.randomUUID().toString();\n+  private static ImmutableMap meta = ImmutableMap.of(\n+      \"owner\", \"apache\",\n+      \"group\", \"iceberg\",\n+      \"comment\", \"iceberg  hiveCatalog test\");\n+\n+  @Test\n+  public void testCreateNamespace() throws TException {\n+    Namespace namespace1 = Namespace.of(\"noLocation\");\n+    catalog.createNamespace(namespace1, meta);\n+    Database database1 = metastoreClient.getDatabase(namespace1.toString());\n+\n+    Assert.assertTrue(database1.getParameters().get(\"owner\").equals(\"apache\"));\n+    Assert.assertTrue(database1.getParameters().get(\"group\").equals(\"iceberg\"));\n+\n+    Assert.assertEquals(\"There no same location for db and namespace\",\n+        database1.getLocationUri(), defaultUri(namespace1));\n+\n+    AssertHelpers.assertThrows(\"Should fail to create when namespace already exist \" + namespace1,\n+        org.apache.iceberg.exceptions.AlreadyExistsException.class,\n+        \"Namespace '\" + namespace1 + \"' already exists!\", () -> {\n+          catalog.createNamespace(namespace1);\n+        });\n+    ImmutableMap newMeta = ImmutableMap.<String, String>builder()\n+        .putAll(meta)\n+        .put(\"location\", hiveLocalDir)\n+        .build();\n+    Namespace namespace2 = Namespace.of(\"haveLocation\");\n+\n+    catalog.createNamespace(namespace2, newMeta);\n+    Database database2 = metastoreClient.getDatabase(namespace2.toString());\n+    Assert.assertEquals(\"There no same location for db and namespace\",\n+        database2.getLocationUri(), hiveLocalDir);\n+  }\n+\n+  @Test\n+  public void testListNamespace() throws TException {\n+    List<Namespace> namespaces;\n+    Namespace namespace1 = Namespace.of(\"dbname1\");\n+    catalog.createNamespace(namespace1, meta);\n+    namespaces = catalog.listNamespaces(namespace1);\n+    Assert.assertTrue(\"Hive db not hive the namespace 'dbname1'\", namespaces.isEmpty());\n+\n+    Namespace namespace2 = Namespace.of(\"dbname2\");\n+    catalog.createNamespace(namespace2, meta);\n+    namespaces = catalog.listNamespaces();\n+\n+    Assert.assertTrue(\"Hive db not hive the namespace 'dbname2'\", namespaces.contains(namespace2));\n+  }\n+\n+  @Test\n+  public void testLoadNamespaceMeta() throws TException {\n+    Namespace namespace = Namespace.of(\"dbname_load\");\n+\n+    catalog.createNamespace(namespace, meta);\n+\n+    Map<String, String> nameMata = catalog.loadNamespaceMetadata(namespace);\n+    Assert.assertTrue(nameMata.get(\"owner\").equals(\"apache\"));\n+    Assert.assertTrue(nameMata.get(\"group\").equals(\"iceberg\"));\n+    Assert.assertEquals(\"There no same location for db and namespace\",\n+        nameMata.get(\"location\"), catalog.convertToDatabase(namespace, meta).getLocationUri());\n+  }\n+\n+  @Test\n+  public void testNamespaceExists() throws TException {\n+    Namespace namespace = Namespace.of(\"dbname_exists\");\n+\n+    catalog.createNamespace(namespace, meta);\n+\n+    Assert.assertTrue(\"Should true to namespace exist\",\n+        catalog.namespaceExists(namespace));\n+    Assert.assertTrue(\"Should false to namespace doesn't exist\",\n+        !catalog.namespaceExists(Namespace.of(\"db2\", \"db2\", \"ns2\")));\n+  }\n+\n+  @Test\n+  public void testSetNamespaceProperties() throws TException {\n+    Namespace namespace = Namespace.of(\"dbname_set\");\n+\n+    catalog.createNamespace(namespace, meta);\n+    catalog.setProperties(namespace,\n+        ImmutableMap.of(\n+            \"owner\", \"alter_apache\",\n+            \"test\", \"test\",\n+            \"location\", \"file:/data/tmp\",\n+            \"comment\", \"iceberg test\")\n+    );\n+\n+    Database database = metastoreClient.getDatabase(namespace.level(0));\n+    Assert.assertEquals(database.getParameters().get(\"owner\"), \"alter_apache\");\n+    Assert.assertEquals(database.getParameters().get(\"test\"), \"test\");\n+    Assert.assertEquals(database.getParameters().get(\"group\"), \"iceberg\");\n+    AssertHelpers.assertThrows(\"Should fail to namespace not exist\" + namespace,\n+        org.apache.iceberg.exceptions.NoSuchNamespaceException.class,\n+        \"Namespace does not exist: \", () -> {\n+          catalog.setProperties(Namespace.of(\"db2\", \"db2\", \"ns2\"), meta);\n+        });\n+  }\n+\n+  @Test\n+  public void testRemoveNamespaceProperties() throws TException {\n+    Namespace namespace = Namespace.of(\"dbname_remove\");\n+\n+    catalog.createNamespace(namespace, meta);\n+\n+    catalog.removeProperties(namespace, ImmutableSet.of(\"comment\", \"owner\"));\n+\n+    Database database = metastoreClient.getDatabase(namespace.level(0));\n+\n+    Assert.assertEquals(database.getParameters().get(\"owner\"), null);\n+    Assert.assertEquals(database.getParameters().get(\"group\"), \"iceberg\");\n+    AssertHelpers.assertThrows(\"Should fail to namespace not exist\" + namespace,\n+        org.apache.iceberg.exceptions.NoSuchNamespaceException.class,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7d27a8eb60e5f6d221bc8769af9339db5215f69d"}, "originalPosition": 152}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk0ODU3NDQ0", "url": "https://github.com/apache/iceberg/pull/919#pullrequestreview-394857444", "createdAt": "2020-04-16T17:38:39Z", "commit": {"oid": "7d27a8eb60e5f6d221bc8769af9339db5215f69d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxNzozODozOVrOGGwLNg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxNzozODozOVrOGGwLNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTczMzk0Mg==", "bodyText": "This is not accurate. It should be \"Exception raised when attempting to drop a namespace that is not empty.\"", "url": "https://github.com/apache/iceberg/pull/919#discussion_r409733942", "createdAt": "2020-04-16T17:38:39Z", "author": {"login": "rdblue"}, "path": "api/src/main/java/org/apache/iceberg/exceptions/NamespaceNotEmptyException.java", "diffHunk": "@@ -0,0 +1,33 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.exceptions;\n+\n+/**\n+ * Exception raised when attempting to load a namespace that does not exist.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7d27a8eb60e5f6d221bc8769af9339db5215f69d"}, "originalPosition": 23}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk0ODYwNDcz", "url": "https://github.com/apache/iceberg/pull/919#pullrequestreview-394860473", "createdAt": "2020-04-16T17:42:44Z", "commit": {"oid": "7d27a8eb60e5f6d221bc8769af9339db5215f69d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxNzo0Mjo0NFrOGGwUpA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxNzo0Mjo0NFrOGGwUpA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTczNjM1Ng==", "bodyText": "This needs a space after \"empty\" or else the namespace will not be separated.", "url": "https://github.com/apache/iceberg/pull/919#discussion_r409736356", "createdAt": "2020-04-16T17:42:44Z", "author": {"login": "rdblue"}, "path": "core/src/test/java/org/apache/iceberg/hadoop/TestHadoopCatalog.java", "diffHunk": "@@ -284,18 +285,27 @@ public void testDropNamespace() throws IOException {\n     Configuration conf = new Configuration();\n     String warehousePath = temp.newFolder().getAbsolutePath();\n     HadoopCatalog catalog = new HadoopCatalog(conf, warehousePath);\n+    Namespace namespace1 = Namespace.of(\"db\");\n+    Namespace namespace2 = Namespace.of(\"db\", \"ns1\");\n \n-    TableIdentifier tbl1 = TableIdentifier.of(\"db\", \"tbl1\");\n-    TableIdentifier tbl2 = TableIdentifier.of(\"db1\", \"ns1\", \"tbl1\");\n+    TableIdentifier tbl1 = TableIdentifier.of(namespace1, \"tbl1\");\n+    TableIdentifier tbl2 = TableIdentifier.of(namespace2, \"tbl1\");\n \n     Lists.newArrayList(tbl1, tbl2).forEach(t ->\n         catalog.createTable(t, SCHEMA, PartitionSpec.unpartitioned())\n     );\n \n+    AssertHelpers.assertThrows(\"Should fail to drop namespace is not empty\" + namespace1,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7d27a8eb60e5f6d221bc8769af9339db5215f69d"}, "originalPosition": 24}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk0ODYxMjAz", "url": "https://github.com/apache/iceberg/pull/919#pullrequestreview-394861203", "createdAt": "2020-04-16T17:43:41Z", "commit": {"oid": "7d27a8eb60e5f6d221bc8769af9339db5215f69d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxNzo0Mzo0MlrOGGwW_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxNzo0Mzo0MlrOGGwW_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTczNjk1OQ==", "bodyText": "Why is this protected?", "url": "https://github.com/apache/iceberg/pull/919#discussion_r409736959", "createdAt": "2020-04-16T17:43:42Z", "author": {"login": "rdblue"}, "path": "hive/src/main/java/org/apache/iceberg/hive/HiveCatalog.java", "diffHunk": "@@ -361,7 +366,7 @@ protected String defaultWarehouseLocation(TableIdentifier tableIdentifier) {\n     return meta;\n   }\n \n-  public  Database convertToDatabase(Namespace namespace, Map<String, String> meta) {\n+  protected Database convertToDatabase(Namespace namespace, Map<String, String> meta) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7d27a8eb60e5f6d221bc8769af9339db5215f69d"}, "originalPosition": 40}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4e6bd757e425359c3fd6244839b944984d9fc41d", "author": {"user": {"login": "XiaokunDing", "name": "XiaokunDing"}}, "url": "https://github.com/apache/iceberg/commit/4e6bd757e425359c3fd6244839b944984d9fc41d", "committedDate": "2020-04-16T23:29:55Z", "message": "[ISSUE #672] Fix the code address comments by Ryan Blue"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9cd0e36bf29c44d3f21a81691f3b3b1379275d3c", "author": {"user": {"login": "XiaokunDing", "name": "XiaokunDing"}}, "url": "https://github.com/apache/iceberg/commit/9cd0e36bf29c44d3f21a81691f3b3b1379275d3c", "committedDate": "2020-04-16T23:35:21Z", "message": "[ISSUE #672] Fix convertToDatabase to package private"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4792, "cost": 1, "resetAt": "2021-10-29T19:57:52Z"}}}