{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA2MDA4MjI0", "number": 1631, "title": "Use TestHiveShell to run StorageHandler tests. Use Parameterized runner.", "bodyText": "Had a discussion earlier with @massdosage and @pvary on this topic, and I think it makes sense to introduce a new TestHiveShell test class, which basically does the same things as our current HiveRunner/HiveShell.\nThe biggest difference is that the new test class can be instantiated once per test suite and does not require its own runner. This leads to a few important advantages over HiveRunner:\n\nQuicker: due to not having to restart HS2 after each test method, I've noticed a ~20% speed up when using the TestHiveShell. This is expected improve further as we're adding more and more test cases to the StorageHandler tests\nFlakyness: not having to recreate the HS2 every time also means fewer chances of something going wrong with the metastore connections (i.e. Broken Pipe intermittent flaky problems)\nAbility to use other Runners: not having to use the HiveStandaloneRunner, we're freed up to use the Parameterized runner, so now we can run all tests for all file formats without boilerplate. It reduces code duplication and it's just much much cleaner.\n\nThe TestHiveShell would use pretty much the same interface as HiveShell, therefore not much of the client code in the test would need to change, making it a smooth transition.\ncc @rdblue", "createdAt": "2020-10-19T14:09:47Z", "url": "https://github.com/apache/iceberg/pull/1631", "merged": true, "mergeCommit": {"oid": "d3eb523800530c917899b7036c674d48206461ad"}, "closed": true, "closedAt": "2020-10-27T21:29:56Z", "author": {"login": "marton-bod"}, "timelineItems": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdUEoZgAH2gAyNTA2MDA4MjI0OjFlMTRjYjVlMzJlNmE4Nzc4MjA4ZWI5NzgyYTIwMDQ1MDk5MjEyYWM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdWRgY8AH2gAyNTA2MDA4MjI0OjQ5NTYxMjk3ZjI1NTY1MjFiMTA5YWM1NDg4ZDJiMWZlMWZlYzdjZTQ=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "1e14cb5e32e6a8778208eb9782a20045099212ac", "author": {"user": {"login": "marton-bod", "name": "Marton Bod"}}, "url": "https://github.com/apache/iceberg/commit/1e14cb5e32e6a8778208eb9782a20045099212ac", "committedDate": "2020-10-19T13:59:28Z", "message": "Use TestHiveShell to run StorageHandler tests. Use Parameterized runner."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTExOTUyNDEy", "url": "https://github.com/apache/iceberg/pull/1631#pullrequestreview-511952412", "createdAt": "2020-10-19T16:37:04Z", "commit": {"oid": "1e14cb5e32e6a8778208eb9782a20045099212ac"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQxNjozNzowNFrOHkXcbQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQxNjozNzowNFrOHkXcbQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzg5NDg5Mw==", "bodyText": "Is the tez dependency required? I don't see any imports explicitly referencing tez.", "url": "https://github.com/apache/iceberg/pull/1631#discussion_r507894893", "createdAt": "2020-10-19T16:37:04Z", "author": {"login": "shardulm94"}, "path": "build.gradle", "diffHunk": "@@ -463,12 +463,10 @@ project(':iceberg-mr') {\n     testCompile(\"org.apache.calcite:calcite-core\")\n     testCompile(\"com.esotericsoftware:kryo-shaded:4.0.2\")\n     testCompile(\"com.fasterxml.jackson.core:jackson-annotations:2.6.5\")\n-    testCompile(\"com.klarna:hiverunner:5.2.1\") {\n-      exclude group: 'javax.jms', module: 'jms'\n+    testCompile(\"org.apache.hive:hive-service\") {\n       exclude group: 'org.apache.hive', module: 'hive-exec'\n-      exclude group: 'org.codehaus.jettison', module: 'jettison'\n-      exclude group: 'org.apache.calcite.avatica'\n     }\n+    testCompile(\"org.apache.tez:tez-dag:0.8.4\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1e14cb5e32e6a8778208eb9782a20045099212ac"}, "originalPosition": 11}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "513fbca4f5ebd69c2188c0e95a064807f921c554", "author": {"user": {"login": "marton-bod", "name": "Marton Bod"}}, "url": "https://github.com/apache/iceberg/commit/513fbca4f5ebd69c2188c0e95a064807f921c554", "committedDate": "2020-10-19T17:04:26Z", "message": "Remove tez dependency from iceberg-mr"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTEyMDg3NTU3", "url": "https://github.com/apache/iceberg/pull/1631#pullrequestreview-512087557", "createdAt": "2020-10-19T19:22:28Z", "commit": {"oid": "513fbca4f5ebd69c2188c0e95a064807f921c554"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQxOToyMjoyOFrOHkeNew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQxOToyMjoyOFrOHkeNew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODAwNTc1NQ==", "bodyText": "Isn't there an option to get an ephemeral port when creating the socket in the listener? Seems odd to find a free port and try to use it. There's a small chance of collision with new connections on the host.", "url": "https://github.com/apache/iceberg/pull/1631#discussion_r508005755", "createdAt": "2020-10-19T19:22:28Z", "author": {"login": "rdblue"}, "path": "mr/src/test/java/org/apache/iceberg/mr/hive/TestHiveShell.java", "diffHunk": "@@ -0,0 +1,173 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.mr.hive;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import org.apache.hadoop.conf.Configuration;\n+import org.apache.hadoop.hive.conf.HiveConf;\n+import org.apache.hive.service.cli.CLIService;\n+import org.apache.hive.service.cli.HiveSQLException;\n+import org.apache.hive.service.cli.OperationHandle;\n+import org.apache.hive.service.cli.RowSet;\n+import org.apache.hive.service.cli.SessionHandle;\n+import org.apache.hive.service.cli.session.HiveSession;\n+import org.apache.hive.service.server.HiveServer2;\n+import org.apache.iceberg.common.DynMethods;\n+\n+import static org.apache.commons.lang3.StringUtils.isNotBlank;\n+import static org.apache.iceberg.relocated.com.google.common.base.Preconditions.checkState;\n+\n+/**\n+ * Test class for running HiveQL queries, essentially acting like a Beeline shell in tests.\n+ *\n+ * It takes a metastore URL via conf, and spins up an HS2 instance which connects to it. The shell will only accept\n+ * queries if it has been previously initialized via {@link #start()}, and a session has been opened via\n+ * {@link #openSession()}. Prior to calling {@link #start()}, the shell should first be configured with props that apply\n+ * across all test cases by calling {@link #setHiveConfValue(String, String)} ()}. On the other hand, session-level conf\n+ * can be applied anytime via {@link #setHiveSessionValue(String, String)} ()}, once we've opened an active session.\n+ */\n+public class TestHiveShell {\n+\n+  private static final DynMethods.StaticMethod FIND_FREE_PORT = DynMethods.builder(\"findFreePort\")\n+          .impl(\"org.apache.hadoop.hive.metastore.utils.MetaStoreUtils\")\n+          .impl(\"org.apache.hadoop.hive.metastore.MetaStoreUtils\")\n+          .buildStatic();\n+\n+  private final HiveServer2 hs2;\n+  private final HiveConf conf;\n+  private CLIService client;\n+  private HiveSession session;\n+  private boolean started;\n+\n+  public TestHiveShell() {\n+    conf = initializeConf();\n+    hs2 = new HiveServer2();\n+  }\n+\n+  public void setHiveConfValue(String key, String value) {\n+    checkState(!started, \"TestHiveShell has already been started. Cannot set Hive conf anymore.\");\n+    conf.set(key, value);\n+  }\n+\n+  public void setHiveSessionValue(String key, String value) {\n+    checkState(session != null, \"There is no open session for setting variables.\");\n+    try {\n+      session.getSessionConf().set(key, value);\n+    } catch (Exception e) {\n+      throw new RuntimeException(\"Unable to set Hive session variable: \", e);\n+    }\n+  }\n+\n+  public void start() {\n+    checkState(isNotBlank(conf.get(HiveConf.ConfVars.METASTOREURIS.varname)),\n+            \"hive.metastore.uris must be supplied in config. TestHiveShell needs an external metastore to connect to.\");\n+    hs2.init(conf);\n+    hs2.start();\n+    client = hs2.getServices().stream()\n+            .filter(CLIService.class::isInstance)\n+            .findFirst()\n+            .map(CLIService.class::cast)\n+            .get();\n+    started = true;\n+  }\n+\n+  public void stop() {\n+    if (client != null) {\n+      client.stop();\n+    }\n+    hs2.stop();\n+    started = false;\n+  }\n+\n+  public void openSession() {\n+    checkState(started, \"You have to start TestHiveShell first, before opening a session.\");\n+    try {\n+      SessionHandle sessionHandle = client.getSessionManager().openSession(\n+              CLIService.SERVER_VERSION, \"\", \"\", \"127.0.0.1\", Collections.emptyMap());\n+      session = client.getSessionManager().getSession(sessionHandle);\n+    } catch (Exception e) {\n+      throw new RuntimeException(\"Unable to open new Hive session: \", e);\n+    }\n+  }\n+\n+  public void closeSession() {\n+    checkState(session != null, \"There is no open session to be closed.\");\n+    try {\n+      session.close();\n+      session = null;\n+    } catch (Exception e) {\n+      throw new RuntimeException(\"Unable to close Hive session: \", e);\n+    }\n+  }\n+\n+  public List<Object[]> executeStatement(String statement) {\n+    checkState(session != null,\n+            \"You have to start TestHiveShell and open a session first, before running a query.\");\n+    try {\n+      OperationHandle handle = client.executeStatement(session.getSessionHandle(), statement, Collections.emptyMap());\n+      List<Object[]> resultSet = new ArrayList<>();\n+      if (handle.hasResultSet()) {\n+        RowSet rowSet;\n+        // keep fetching results until we can\n+        while ((rowSet = client.fetchResults(handle)) != null && rowSet.numRows() > 0) {\n+          for (Object[] row : rowSet) {\n+            resultSet.add(row.clone());\n+          }\n+        }\n+      }\n+      return resultSet;\n+    } catch (HiveSQLException e) {\n+      throw new IllegalArgumentException(\"Failed to execute Hive query '\" + statement + \"': \" + e.getMessage(), e);\n+    }\n+  }\n+\n+  public Configuration getHiveConf() {\n+    if (session != null) {\n+      return session.getHiveConf();\n+    } else {\n+      return conf;\n+    }\n+  }\n+\n+  private HiveConf initializeConf() {\n+    HiveConf hiveConf = new HiveConf();\n+\n+    // Use random port to enable running tests in parallel\n+    hiveConf.setIntVar(HiveConf.ConfVars.HIVE_SERVER2_THRIFT_PORT, FIND_FREE_PORT.invoke());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "513fbca4f5ebd69c2188c0e95a064807f921c554"}, "originalPosition": 155}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTEyMDkwMDc5", "url": "https://github.com/apache/iceberg/pull/1631#pullrequestreview-512090079", "createdAt": "2020-10-19T19:26:07Z", "commit": {"oid": "513fbca4f5ebd69c2188c0e95a064807f921c554"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQxOToyNjowN1rOHkeVgA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQxOToyNjowN1rOHkeVgA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODAwNzgwOA==", "bodyText": "Nit: continuing indentation is off in this file", "url": "https://github.com/apache/iceberg/pull/1631#discussion_r508007808", "createdAt": "2020-10-19T19:26:07Z", "author": {"login": "rdblue"}, "path": "mr/src/test/java/org/apache/iceberg/mr/hive/TestHiveShell.java", "diffHunk": "@@ -0,0 +1,173 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.mr.hive;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import org.apache.hadoop.conf.Configuration;\n+import org.apache.hadoop.hive.conf.HiveConf;\n+import org.apache.hive.service.cli.CLIService;\n+import org.apache.hive.service.cli.HiveSQLException;\n+import org.apache.hive.service.cli.OperationHandle;\n+import org.apache.hive.service.cli.RowSet;\n+import org.apache.hive.service.cli.SessionHandle;\n+import org.apache.hive.service.cli.session.HiveSession;\n+import org.apache.hive.service.server.HiveServer2;\n+import org.apache.iceberg.common.DynMethods;\n+\n+import static org.apache.commons.lang3.StringUtils.isNotBlank;\n+import static org.apache.iceberg.relocated.com.google.common.base.Preconditions.checkState;\n+\n+/**\n+ * Test class for running HiveQL queries, essentially acting like a Beeline shell in tests.\n+ *\n+ * It takes a metastore URL via conf, and spins up an HS2 instance which connects to it. The shell will only accept\n+ * queries if it has been previously initialized via {@link #start()}, and a session has been opened via\n+ * {@link #openSession()}. Prior to calling {@link #start()}, the shell should first be configured with props that apply\n+ * across all test cases by calling {@link #setHiveConfValue(String, String)} ()}. On the other hand, session-level conf\n+ * can be applied anytime via {@link #setHiveSessionValue(String, String)} ()}, once we've opened an active session.\n+ */\n+public class TestHiveShell {\n+\n+  private static final DynMethods.StaticMethod FIND_FREE_PORT = DynMethods.builder(\"findFreePort\")\n+          .impl(\"org.apache.hadoop.hive.metastore.utils.MetaStoreUtils\")\n+          .impl(\"org.apache.hadoop.hive.metastore.MetaStoreUtils\")\n+          .buildStatic();\n+\n+  private final HiveServer2 hs2;\n+  private final HiveConf conf;\n+  private CLIService client;\n+  private HiveSession session;\n+  private boolean started;\n+\n+  public TestHiveShell() {\n+    conf = initializeConf();\n+    hs2 = new HiveServer2();\n+  }\n+\n+  public void setHiveConfValue(String key, String value) {\n+    checkState(!started, \"TestHiveShell has already been started. Cannot set Hive conf anymore.\");\n+    conf.set(key, value);\n+  }\n+\n+  public void setHiveSessionValue(String key, String value) {\n+    checkState(session != null, \"There is no open session for setting variables.\");\n+    try {\n+      session.getSessionConf().set(key, value);\n+    } catch (Exception e) {\n+      throw new RuntimeException(\"Unable to set Hive session variable: \", e);\n+    }\n+  }\n+\n+  public void start() {\n+    checkState(isNotBlank(conf.get(HiveConf.ConfVars.METASTOREURIS.varname)),\n+            \"hive.metastore.uris must be supplied in config. TestHiveShell needs an external metastore to connect to.\");\n+    hs2.init(conf);\n+    hs2.start();\n+    client = hs2.getServices().stream()\n+            .filter(CLIService.class::isInstance)\n+            .findFirst()\n+            .map(CLIService.class::cast)\n+            .get();\n+    started = true;\n+  }\n+\n+  public void stop() {\n+    if (client != null) {\n+      client.stop();\n+    }\n+    hs2.stop();\n+    started = false;\n+  }\n+\n+  public void openSession() {\n+    checkState(started, \"You have to start TestHiveShell first, before opening a session.\");\n+    try {\n+      SessionHandle sessionHandle = client.getSessionManager().openSession(\n+              CLIService.SERVER_VERSION, \"\", \"\", \"127.0.0.1\", Collections.emptyMap());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "513fbca4f5ebd69c2188c0e95a064807f921c554"}, "originalPosition": 105}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTEyMDkwODQ0", "url": "https://github.com/apache/iceberg/pull/1631#pullrequestreview-512090844", "createdAt": "2020-10-19T19:27:16Z", "commit": {"oid": "513fbca4f5ebd69c2188c0e95a064807f921c554"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQxOToyNzoxN1rOHkeX5g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQxOToyNzoxN1rOHkeX5g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODAwODQyMg==", "bodyText": "We try to avoid using statically imported methods. It's nice to see what class methods are in.\nAlso, we don't want to introduce a directly dependency on Apache commons. Could you use isEmpty instead?", "url": "https://github.com/apache/iceberg/pull/1631#discussion_r508008422", "createdAt": "2020-10-19T19:27:17Z", "author": {"login": "rdblue"}, "path": "mr/src/test/java/org/apache/iceberg/mr/hive/TestHiveShell.java", "diffHunk": "@@ -0,0 +1,173 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.mr.hive;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import org.apache.hadoop.conf.Configuration;\n+import org.apache.hadoop.hive.conf.HiveConf;\n+import org.apache.hive.service.cli.CLIService;\n+import org.apache.hive.service.cli.HiveSQLException;\n+import org.apache.hive.service.cli.OperationHandle;\n+import org.apache.hive.service.cli.RowSet;\n+import org.apache.hive.service.cli.SessionHandle;\n+import org.apache.hive.service.cli.session.HiveSession;\n+import org.apache.hive.service.server.HiveServer2;\n+import org.apache.iceberg.common.DynMethods;\n+\n+import static org.apache.commons.lang3.StringUtils.isNotBlank;\n+import static org.apache.iceberg.relocated.com.google.common.base.Preconditions.checkState;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "513fbca4f5ebd69c2188c0e95a064807f921c554"}, "originalPosition": 37}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTEyMDkxNzMz", "url": "https://github.com/apache/iceberg/pull/1631#pullrequestreview-512091733", "createdAt": "2020-10-19T19:28:33Z", "commit": {"oid": "513fbca4f5ebd69c2188c0e95a064807f921c554"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQxOToyODozM1rOHkeaxw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQxOToyODozM1rOHkeaxw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODAwOTE1OQ==", "bodyText": "Wouldn't it make sense to embed the TestHiveMetastore in TestHiveShell so that it is always available? Or is there a case where we use TestHiveShell without TestHiveMetastore?", "url": "https://github.com/apache/iceberg/pull/1631#discussion_r508009159", "createdAt": "2020-10-19T19:28:33Z", "author": {"login": "rdblue"}, "path": "mr/src/test/java/org/apache/iceberg/mr/hive/HiveIcebergStorageHandlerBaseTest.java", "diffHunk": "@@ -112,113 +109,73 @@\n \n   // before variables\n   protected static TestHiveMetastore metastore;\n+  private static TestHiveShell shell;\n \n   private TestTables testTables;\n \n   public abstract TestTables testTables(Configuration conf, TemporaryFolder tmp) throws IOException;\n \n+  @Parameters(name = \"fileFormat={0}\")\n+  public static Iterable<FileFormat> fileFormats() {\n+    return ImmutableList.of(FileFormat.PARQUET, FileFormat.ORC, FileFormat.AVRO);\n+  }\n+\n+  @Parameter\n+  public FileFormat fileFormat;\n \n   @BeforeClass\n   public static void beforeClass() {\n     metastore = new TestHiveMetastore();\n     // We need to use increased pool size in these tests. See: #1620\n     metastore.start(METASTORE_POOL_SIZE);\n+    shell = new TestHiveShell();\n+\n+    String metastoreUris = metastore.hiveConf().getVar(HiveConf.ConfVars.METASTOREURIS);\n+    shell.setHiveConfValue(HiveConf.ConfVars.METASTOREURIS.varname, metastoreUris);\n+    String metastoreWarehouse = metastore.hiveConf().getVar(HiveConf.ConfVars.METASTOREWAREHOUSE);\n+    shell.setHiveConfValue(HiveConf.ConfVars.METASTOREWAREHOUSE.varname, metastoreWarehouse);\n+    shell.setHiveConfValue(\"hive.notification.event.poll.interval\", \"-1\");\n+\n+    shell.start();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "513fbca4f5ebd69c2188c0e95a064807f921c554"}, "originalPosition": 61}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTEyMDkyNjA2", "url": "https://github.com/apache/iceberg/pull/1631#pullrequestreview-512092606", "createdAt": "2020-10-19T19:29:48Z", "commit": {"oid": "513fbca4f5ebd69c2188c0e95a064807f921c554"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQxOToyOTo0OVrOHkeddQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQxOToyOTo0OVrOHkeddQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODAwOTg0NQ==", "bodyText": "If TestMetaStore were integrated into this class, then I don't think we would need this check.", "url": "https://github.com/apache/iceberg/pull/1631#discussion_r508009845", "createdAt": "2020-10-19T19:29:49Z", "author": {"login": "rdblue"}, "path": "mr/src/test/java/org/apache/iceberg/mr/hive/TestHiveShell.java", "diffHunk": "@@ -0,0 +1,173 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.mr.hive;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import org.apache.hadoop.conf.Configuration;\n+import org.apache.hadoop.hive.conf.HiveConf;\n+import org.apache.hive.service.cli.CLIService;\n+import org.apache.hive.service.cli.HiveSQLException;\n+import org.apache.hive.service.cli.OperationHandle;\n+import org.apache.hive.service.cli.RowSet;\n+import org.apache.hive.service.cli.SessionHandle;\n+import org.apache.hive.service.cli.session.HiveSession;\n+import org.apache.hive.service.server.HiveServer2;\n+import org.apache.iceberg.common.DynMethods;\n+\n+import static org.apache.commons.lang3.StringUtils.isNotBlank;\n+import static org.apache.iceberg.relocated.com.google.common.base.Preconditions.checkState;\n+\n+/**\n+ * Test class for running HiveQL queries, essentially acting like a Beeline shell in tests.\n+ *\n+ * It takes a metastore URL via conf, and spins up an HS2 instance which connects to it. The shell will only accept\n+ * queries if it has been previously initialized via {@link #start()}, and a session has been opened via\n+ * {@link #openSession()}. Prior to calling {@link #start()}, the shell should first be configured with props that apply\n+ * across all test cases by calling {@link #setHiveConfValue(String, String)} ()}. On the other hand, session-level conf\n+ * can be applied anytime via {@link #setHiveSessionValue(String, String)} ()}, once we've opened an active session.\n+ */\n+public class TestHiveShell {\n+\n+  private static final DynMethods.StaticMethod FIND_FREE_PORT = DynMethods.builder(\"findFreePort\")\n+          .impl(\"org.apache.hadoop.hive.metastore.utils.MetaStoreUtils\")\n+          .impl(\"org.apache.hadoop.hive.metastore.MetaStoreUtils\")\n+          .buildStatic();\n+\n+  private final HiveServer2 hs2;\n+  private final HiveConf conf;\n+  private CLIService client;\n+  private HiveSession session;\n+  private boolean started;\n+\n+  public TestHiveShell() {\n+    conf = initializeConf();\n+    hs2 = new HiveServer2();\n+  }\n+\n+  public void setHiveConfValue(String key, String value) {\n+    checkState(!started, \"TestHiveShell has already been started. Cannot set Hive conf anymore.\");\n+    conf.set(key, value);\n+  }\n+\n+  public void setHiveSessionValue(String key, String value) {\n+    checkState(session != null, \"There is no open session for setting variables.\");\n+    try {\n+      session.getSessionConf().set(key, value);\n+    } catch (Exception e) {\n+      throw new RuntimeException(\"Unable to set Hive session variable: \", e);\n+    }\n+  }\n+\n+  public void start() {\n+    checkState(isNotBlank(conf.get(HiveConf.ConfVars.METASTOREURIS.varname)),\n+            \"hive.metastore.uris must be supplied in config. TestHiveShell needs an external metastore to connect to.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "513fbca4f5ebd69c2188c0e95a064807f921c554"}, "originalPosition": 82}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTEyMDkzODE3", "url": "https://github.com/apache/iceberg/pull/1631#pullrequestreview-512093817", "createdAt": "2020-10-19T19:31:33Z", "commit": {"oid": "513fbca4f5ebd69c2188c0e95a064807f921c554"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQxOTozMTozM1rOHkehPQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQxOTozMTozM1rOHkehPQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODAxMDgxMw==", "bodyText": "Do you know how the metastore connections are handled in HS2? Does each HS2 service have a connection pool? Or are connections created per session?\nWhy did you choose to use a session per test case? Is that to avoid some sort of state leak? Are sessions not supposed to be used concurrently?", "url": "https://github.com/apache/iceberg/pull/1631#discussion_r508010813", "createdAt": "2020-10-19T19:31:33Z", "author": {"login": "rdblue"}, "path": "mr/src/test/java/org/apache/iceberg/mr/hive/TestHiveShell.java", "diffHunk": "@@ -0,0 +1,173 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.mr.hive;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import org.apache.hadoop.conf.Configuration;\n+import org.apache.hadoop.hive.conf.HiveConf;\n+import org.apache.hive.service.cli.CLIService;\n+import org.apache.hive.service.cli.HiveSQLException;\n+import org.apache.hive.service.cli.OperationHandle;\n+import org.apache.hive.service.cli.RowSet;\n+import org.apache.hive.service.cli.SessionHandle;\n+import org.apache.hive.service.cli.session.HiveSession;\n+import org.apache.hive.service.server.HiveServer2;\n+import org.apache.iceberg.common.DynMethods;\n+\n+import static org.apache.commons.lang3.StringUtils.isNotBlank;\n+import static org.apache.iceberg.relocated.com.google.common.base.Preconditions.checkState;\n+\n+/**\n+ * Test class for running HiveQL queries, essentially acting like a Beeline shell in tests.\n+ *\n+ * It takes a metastore URL via conf, and spins up an HS2 instance which connects to it. The shell will only accept\n+ * queries if it has been previously initialized via {@link #start()}, and a session has been opened via\n+ * {@link #openSession()}. Prior to calling {@link #start()}, the shell should first be configured with props that apply\n+ * across all test cases by calling {@link #setHiveConfValue(String, String)} ()}. On the other hand, session-level conf\n+ * can be applied anytime via {@link #setHiveSessionValue(String, String)} ()}, once we've opened an active session.\n+ */\n+public class TestHiveShell {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "513fbca4f5ebd69c2188c0e95a064807f921c554"}, "originalPosition": 48}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "68f3dd3280e406dabed54496da21ece705d18008", "author": {"user": {"login": "marton-bod", "name": "Marton Bod"}}, "url": "https://github.com/apache/iceberg/commit/68f3dd3280e406dabed54496da21ece705d18008", "committedDate": "2020-10-20T10:31:23Z", "message": "Integrate metastore into TestHiveShell"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE1OTYwODIz", "url": "https://github.com/apache/iceberg/pull/1631#pullrequestreview-515960823", "createdAt": "2020-10-23T19:41:39Z", "commit": {"oid": "68f3dd3280e406dabed54496da21ece705d18008"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QxOTo0MTo0MFrOHncFKw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QxOTo0MTo0MFrOHncFKw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTExNjU4Nw==", "bodyText": "Nit: we avoid using get because it doesn't add much value. Getter methods are usually just named for the field that is returned.", "url": "https://github.com/apache/iceberg/pull/1631#discussion_r511116587", "createdAt": "2020-10-23T19:41:40Z", "author": {"login": "rdblue"}, "path": "mr/src/test/java/org/apache/iceberg/mr/hive/TestHiveShell.java", "diffHunk": "@@ -0,0 +1,179 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.mr.hive;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import org.apache.hadoop.conf.Configuration;\n+import org.apache.hadoop.hive.conf.HiveConf;\n+import org.apache.hive.service.cli.CLIService;\n+import org.apache.hive.service.cli.HiveSQLException;\n+import org.apache.hive.service.cli.OperationHandle;\n+import org.apache.hive.service.cli.RowSet;\n+import org.apache.hive.service.cli.SessionHandle;\n+import org.apache.hive.service.cli.session.HiveSession;\n+import org.apache.hive.service.server.HiveServer2;\n+import org.apache.iceberg.hive.TestHiveMetastore;\n+import org.apache.iceberg.relocated.com.google.common.base.Preconditions;\n+\n+/**\n+ * Test class for running HiveQL queries, essentially acting like a Beeline shell in tests.\n+ *\n+ * It spins up both an HS2 and a Metastore instance to work with. The shell will only accept\n+ * queries if it has been previously initialized via {@link #start()}, and a session has been opened via\n+ * {@link #openSession()}. Prior to calling {@link #start()}, the shell should first be configured with props that apply\n+ * across all test cases by calling {@link #setHiveConfValue(String, String)} ()}. On the other hand, session-level conf\n+ * can be applied anytime via {@link #setHiveSessionValue(String, String)} ()}, once we've opened an active session.\n+ */\n+public class TestHiveShell {\n+\n+  // We need to use increased pool size in these tests. See: #1620\n+  private static final int METASTORE_POOL_SIZE = 15;\n+\n+  private final TestHiveMetastore metastore;\n+  private final HiveServer2 hs2;\n+  private final HiveConf hs2Conf;\n+  private CLIService client;\n+  private HiveSession session;\n+  private boolean started;\n+\n+  public TestHiveShell() {\n+    metastore = new TestHiveMetastore();\n+    hs2Conf = initializeConf();\n+    hs2 = new HiveServer2();\n+  }\n+\n+  public void setHiveConfValue(String key, String value) {\n+    Preconditions.checkState(!started, \"TestHiveShell has already been started. Cannot set Hive conf anymore.\");\n+    hs2Conf.verifyAndSet(key, value);\n+  }\n+\n+  public void setHiveSessionValue(String key, String value) {\n+    Preconditions.checkState(session != null, \"There is no open session for setting variables.\");\n+    try {\n+      session.getSessionConf().set(key, value);\n+    } catch (Exception e) {\n+      throw new RuntimeException(\"Unable to set Hive session variable: \", e);\n+    }\n+  }\n+\n+  public void start() {\n+    metastore.start(METASTORE_POOL_SIZE);\n+    hs2Conf.setVar(HiveConf.ConfVars.METASTOREURIS, metastore.hiveConf().getVar(HiveConf.ConfVars.METASTOREURIS));\n+    hs2Conf.setVar(HiveConf.ConfVars.METASTOREWAREHOUSE,\n+        metastore.hiveConf().getVar(HiveConf.ConfVars.METASTOREWAREHOUSE));\n+\n+    hs2.init(hs2Conf);\n+    hs2.start();\n+    client = hs2.getServices().stream()\n+            .filter(CLIService.class::isInstance)\n+            .findFirst()\n+            .map(CLIService.class::cast)\n+            .get();\n+    started = true;\n+  }\n+\n+  public void stop() {\n+    if (client != null) {\n+      client.stop();\n+    }\n+    hs2.stop();\n+    metastore.stop();\n+    started = false;\n+  }\n+\n+  public TestHiveMetastore getMetastore() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "68f3dd3280e406dabed54496da21ece705d18008"}, "originalPosition": 103}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "49561297f2556521b109ac5488d2b1fe1fec7ce4", "author": {"user": {"login": "marton-bod", "name": "Marton Bod"}}, "url": "https://github.com/apache/iceberg/commit/49561297f2556521b109ac5488d2b1fe1fec7ce4", "committedDate": "2020-10-26T10:07:20Z", "message": "Rename accessor method; Use default pool size for metastore in TestHiveShell"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3988, "cost": 1, "resetAt": "2021-10-29T19:57:52Z"}}}