{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkwODU0NTE0", "number": 854, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxNDo1Njo1M1rODpi3fw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxOTozNzo0M1rODq8RVw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0ODg5NDcxOnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/apache/iceberg/io/CloseableIterable.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxNDo1Njo1M1rOF4yXRA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQwMTozMDo0MVrOF5FhlQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTA4OTczMg==", "bodyText": "Would it be simpler to call hasNext in next method instead? like so\n@Override\n      public E next() {\n        if (hasNext()) {\n          return currentIterator.next();\n        } else {\n          throw new NoSuchElementException();\n        }\n      }\n\nMy understanding is we can keep calling hasNext as many times as we want until we consume that element from the Iterator.", "url": "https://github.com/apache/iceberg/pull/854#discussion_r395089732", "createdAt": "2020-03-19T14:56:53Z", "author": {"login": "rdsr"}, "path": "api/src/main/java/org/apache/iceberg/io/CloseableIterable.java", "diffHunk": "@@ -130,6 +130,20 @@ public O next() {\n       private ConcatCloseableIterator(Iterable<CloseableIterable<E>> inputs) {\n         this.iterables = inputs.iterator();\n         this.currentIterable = iterables.next();\n+        // Exhaust the starting empty iterables.\n+        while (Iterables.isEmpty(currentIterable)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f70b272775ec41f10e537f733a25422837c437f6"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTE0MDYwNw==", "bodyText": "+1, Make sense.", "url": "https://github.com/apache/iceberg/pull/854#discussion_r395140607", "createdAt": "2020-03-19T16:04:46Z", "author": {"login": "openinx"}, "path": "api/src/main/java/org/apache/iceberg/io/CloseableIterable.java", "diffHunk": "@@ -130,6 +130,20 @@ public O next() {\n       private ConcatCloseableIterator(Iterable<CloseableIterable<E>> inputs) {\n         this.iterables = inputs.iterator();\n         this.currentIterable = iterables.next();\n+        // Exhaust the starting empty iterables.\n+        while (Iterables.isEmpty(currentIterable)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTA4OTczMg=="}, "originalCommit": {"oid": "f70b272775ec41f10e537f733a25422837c437f6"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTE1Mjk4MQ==", "bodyText": "+1", "url": "https://github.com/apache/iceberg/pull/854#discussion_r395152981", "createdAt": "2020-03-19T16:22:12Z", "author": {"login": "rdblue"}, "path": "api/src/main/java/org/apache/iceberg/io/CloseableIterable.java", "diffHunk": "@@ -130,6 +130,20 @@ public O next() {\n       private ConcatCloseableIterator(Iterable<CloseableIterable<E>> inputs) {\n         this.iterables = inputs.iterator();\n         this.currentIterable = iterables.next();\n+        // Exhaust the starting empty iterables.\n+        while (Iterables.isEmpty(currentIterable)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTA4OTczMg=="}, "originalCommit": {"oid": "f70b272775ec41f10e537f733a25422837c437f6"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTQwMzY2OQ==", "bodyText": "Thanks for the suggestion, let me change it.", "url": "https://github.com/apache/iceberg/pull/854#discussion_r395403669", "createdAt": "2020-03-20T01:30:41Z", "author": {"login": "jerryshao"}, "path": "api/src/main/java/org/apache/iceberg/io/CloseableIterable.java", "diffHunk": "@@ -130,6 +130,20 @@ public O next() {\n       private ConcatCloseableIterator(Iterable<CloseableIterable<E>> inputs) {\n         this.iterables = inputs.iterator();\n         this.currentIterable = iterables.next();\n+        // Exhaust the starting empty iterables.\n+        while (Iterables.isEmpty(currentIterable)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTA4OTczMg=="}, "originalCommit": {"oid": "f70b272775ec41f10e537f733a25422837c437f6"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1NDA3NDU0OnYy", "diffSide": "RIGHT", "path": "api/src/test/java/org/apache/iceberg/io/TestCloseableIterable.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQyMzoyNDo1MlrOF5lqEA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QwMjoyMToyM1rOF51MTw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTkzMDEyOA==", "bodyText": "Sorry I missed this before. Can we use AssertHelpers.assertThrows api here validate that the exception is thrown. If we add it as an annotation at the method level, it can catch false positives.", "url": "https://github.com/apache/iceberg/pull/854#discussion_r395930128", "createdAt": "2020-03-20T23:24:52Z", "author": {"login": "rdsr"}, "path": "api/src/test/java/org/apache/iceberg/io/TestCloseableIterable.java", "diffHunk": "@@ -0,0 +1,51 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.io;\n+\n+import com.google.common.collect.Iterables;\n+import com.google.common.collect.Lists;\n+import java.util.NoSuchElementException;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+public class TestCloseableIterable {\n+\n+  @Test(expected = NoSuchElementException.class)\n+  public void testConcateWithEmptyIterables() {\n+    CloseableIterable<Integer> iter = CloseableIterable.combine(Lists.newArrayList(1, 2, 3), () -> { });\n+    CloseableIterable<Integer> empty = CloseableIterable.empty();\n+\n+    CloseableIterable<Integer> concat1 = CloseableIterable.concat(Lists.newArrayList(iter, empty, empty));\n+    Assert.assertEquals(Iterables.getLast(concat1).intValue(), 3);\n+\n+    CloseableIterable<Integer> concat2 = CloseableIterable.concat(Lists.newArrayList(empty, empty, iter));\n+    Assert.assertEquals(Iterables.getLast(concat2).intValue(), 3);\n+\n+    CloseableIterable<Integer> concat3 = CloseableIterable.concat(Lists.newArrayList(empty, iter, empty));\n+    Assert.assertEquals(Iterables.getLast(concat3).intValue(), 3);\n+\n+    CloseableIterable<Integer> concat4 = CloseableIterable.concat(Lists.newArrayList(empty, iter, empty, empty, iter));\n+    Assert.assertEquals(Iterables.getLast(concat4).intValue(), 3);\n+\n+    // This will throw a NoSuchElementException\n+    CloseableIterable<Integer> concat5 = CloseableIterable.concat(Lists.newArrayList(empty, empty, empty));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4be51d3f1de8f8a806e6afd283916a712b219e80"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjE4NDY1NQ==", "bodyText": "The reason I didn't use assertThrows here is mainly because this method requires to have message in exception, while the default NoSuchMethodException doesn't have an Exception message, I will change to use that method.", "url": "https://github.com/apache/iceberg/pull/854#discussion_r396184655", "createdAt": "2020-03-23T02:21:23Z", "author": {"login": "jerryshao"}, "path": "api/src/test/java/org/apache/iceberg/io/TestCloseableIterable.java", "diffHunk": "@@ -0,0 +1,51 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.io;\n+\n+import com.google.common.collect.Iterables;\n+import com.google.common.collect.Lists;\n+import java.util.NoSuchElementException;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+public class TestCloseableIterable {\n+\n+  @Test(expected = NoSuchElementException.class)\n+  public void testConcateWithEmptyIterables() {\n+    CloseableIterable<Integer> iter = CloseableIterable.combine(Lists.newArrayList(1, 2, 3), () -> { });\n+    CloseableIterable<Integer> empty = CloseableIterable.empty();\n+\n+    CloseableIterable<Integer> concat1 = CloseableIterable.concat(Lists.newArrayList(iter, empty, empty));\n+    Assert.assertEquals(Iterables.getLast(concat1).intValue(), 3);\n+\n+    CloseableIterable<Integer> concat2 = CloseableIterable.concat(Lists.newArrayList(empty, empty, iter));\n+    Assert.assertEquals(Iterables.getLast(concat2).intValue(), 3);\n+\n+    CloseableIterable<Integer> concat3 = CloseableIterable.concat(Lists.newArrayList(empty, iter, empty));\n+    Assert.assertEquals(Iterables.getLast(concat3).intValue(), 3);\n+\n+    CloseableIterable<Integer> concat4 = CloseableIterable.concat(Lists.newArrayList(empty, iter, empty, empty, iter));\n+    Assert.assertEquals(Iterables.getLast(concat4).intValue(), 3);\n+\n+    // This will throw a NoSuchElementException\n+    CloseableIterable<Integer> concat5 = CloseableIterable.concat(Lists.newArrayList(empty, empty, empty));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTkzMDEyOA=="}, "originalCommit": {"oid": "4be51d3f1de8f8a806e6afd283916a712b219e80"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2MzU0MjYzOnYy", "diffSide": "RIGHT", "path": "api/src/test/java/org/apache/iceberg/AssertHelpers.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxOTozNzo0M1rOF7AIzw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxOTozNzo0M1rOF7AIzw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzQxMjU1OQ==", "bodyText": "Seems like we could have avoided these methods if we throw NoSuchElementException with a message. But I guess I'm OK with these as well.", "url": "https://github.com/apache/iceberg/pull/854#discussion_r397412559", "createdAt": "2020-03-24T19:37:43Z", "author": {"login": "rdsr"}, "path": "api/src/test/java/org/apache/iceberg/AssertHelpers.java", "diffHunk": "@@ -68,17 +68,43 @@ public static void assertThrows(String message,\n     }\n   }\n \n+  /**\n+   * A convenience method to avoid a large number of @Test(expected=...) tests\n+   * @param message A String message to describe this assertion\n+   * @param expected An Exception class that the Runnable should throw\n+   * @param callable A Callable that is expected to throw the exception\n+   */\n+  public static void assertThrows(String message,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e8c92dfc81150dff8f6742a88b49dba11031485e"}, "originalPosition": 10}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2861, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}