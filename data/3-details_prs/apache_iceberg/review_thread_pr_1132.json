{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM4MTIxMTI1", "number": 1132, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxNjozNzo1MFrOEIDFbw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxNzoyMjowOFrOEIEDeg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2ODc0NjA3OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/apache/iceberg/avro/PruneColumns.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxNjozNzo1MFrOGnxihg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QyMjowMzoyM1rOGn8N1g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDM1OTMwMg==", "bodyText": "Why detect non-null here? Couldn't this always pass null because it is either null already or will be replaced with null?", "url": "https://github.com/apache/iceberg/pull/1132#discussion_r444359302", "createdAt": "2020-06-23T16:37:50Z", "author": {"login": "rdblue"}, "path": "core/src/main/java/org/apache/iceberg/avro/PruneColumns.java", "diffHunk": "@@ -247,8 +255,9 @@ private static Schema copyRecord(Schema record, List<Schema.Field> newFields) {\n   }\n \n   private static Schema.Field copyField(Schema.Field field, Schema newSchema, Integer fieldId) {\n+    // do not copy over non-null default values as the file is expected to have values for fields in the file schema\n     Schema.Field copy = new Schema.Field(field.name(),\n-        newSchema, field.doc(), field.defaultVal(), field.order());\n+        newSchema, field.doc(), hasNonNullDefault(field) ? null : field.defaultVal(), field.order());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "14fb95519b3442092eb6aa02a2608e97e2e8dfd8"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDM3OTM1Ng==", "bodyText": "I think this should be similar to field construction in the converter. Instead of using hasNonNullDefault, this should be based on whether the value needs a default. In the converter, we use this: structField.isOptional() ? JsonProperties.NULL_VALUE : null. For Avro, that would be isOptionSchema(newSchema) ? JsonProperties.NULL_VALUE : null.\nThat way any optional field gets a null default and the default is left unspecified for required fields.", "url": "https://github.com/apache/iceberg/pull/1132#discussion_r444379356", "createdAt": "2020-06-23T17:10:59Z", "author": {"login": "rdblue"}, "path": "core/src/main/java/org/apache/iceberg/avro/PruneColumns.java", "diffHunk": "@@ -247,8 +255,9 @@ private static Schema copyRecord(Schema record, List<Schema.Field> newFields) {\n   }\n \n   private static Schema.Field copyField(Schema.Field field, Schema newSchema, Integer fieldId) {\n+    // do not copy over non-null default values as the file is expected to have values for fields in the file schema\n     Schema.Field copy = new Schema.Field(field.name(),\n-        newSchema, field.doc(), field.defaultVal(), field.order());\n+        newSchema, field.doc(), hasNonNullDefault(field) ? null : field.defaultVal(), field.order());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDM1OTMwMg=="}, "originalCommit": {"oid": "14fb95519b3442092eb6aa02a2608e97e2e8dfd8"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDQ5OTY1NQ==", "bodyText": "The issue is that PruneColumns#copyField can also be called at https://github.com/apache/iceberg/blob/14fb95519b3442092eb6aa02a2608e97e2e8dfd8/core/src/main/java/org/apache/iceberg/avro/PruneColumns.java#L88. In that case, it is possible that newSchema is an option schema but with the NULL type as the second option (if that is how it is in the file schema) and hence JsonProperties.NULL_VALUE is not an appropriate default.", "url": "https://github.com/apache/iceberg/pull/1132#discussion_r444499655", "createdAt": "2020-06-23T20:52:11Z", "author": {"login": "shardulm94"}, "path": "core/src/main/java/org/apache/iceberg/avro/PruneColumns.java", "diffHunk": "@@ -247,8 +255,9 @@ private static Schema copyRecord(Schema record, List<Schema.Field> newFields) {\n   }\n \n   private static Schema.Field copyField(Schema.Field field, Schema newSchema, Integer fieldId) {\n+    // do not copy over non-null default values as the file is expected to have values for fields in the file schema\n     Schema.Field copy = new Schema.Field(field.name(),\n-        newSchema, field.doc(), field.defaultVal(), field.order());\n+        newSchema, field.doc(), hasNonNullDefault(field) ? null : field.defaultVal(), field.order());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDM1OTMwMg=="}, "originalCommit": {"oid": "14fb95519b3442092eb6aa02a2608e97e2e8dfd8"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDUwODg0OQ==", "bodyText": "If the schema is an option schema, then its default should be null. That means that we would need to reorder the options to allow that default, I think.", "url": "https://github.com/apache/iceberg/pull/1132#discussion_r444508849", "createdAt": "2020-06-23T21:06:50Z", "author": {"login": "rdblue"}, "path": "core/src/main/java/org/apache/iceberg/avro/PruneColumns.java", "diffHunk": "@@ -247,8 +255,9 @@ private static Schema copyRecord(Schema record, List<Schema.Field> newFields) {\n   }\n \n   private static Schema.Field copyField(Schema.Field field, Schema newSchema, Integer fieldId) {\n+    // do not copy over non-null default values as the file is expected to have values for fields in the file schema\n     Schema.Field copy = new Schema.Field(field.name(),\n-        newSchema, field.doc(), field.defaultVal(), field.order());\n+        newSchema, field.doc(), hasNonNullDefault(field) ? null : field.defaultVal(), field.order());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDM1OTMwMg=="}, "originalCommit": {"oid": "14fb95519b3442092eb6aa02a2608e97e2e8dfd8"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDUzNDIzMA==", "bodyText": "\ud83d\udc4d  So I think this PR now simplifies to \"if we have an option schema where the first option is not NULL, we should reorder it to ensure it is NULL while building the projection schema\". Updated.", "url": "https://github.com/apache/iceberg/pull/1132#discussion_r444534230", "createdAt": "2020-06-23T22:03:23Z", "author": {"login": "shardulm94"}, "path": "core/src/main/java/org/apache/iceberg/avro/PruneColumns.java", "diffHunk": "@@ -247,8 +255,9 @@ private static Schema copyRecord(Schema record, List<Schema.Field> newFields) {\n   }\n \n   private static Schema.Field copyField(Schema.Field field, Schema newSchema, Integer fieldId) {\n+    // do not copy over non-null default values as the file is expected to have values for fields in the file schema\n     Schema.Field copy = new Schema.Field(field.name(),\n-        newSchema, field.doc(), field.defaultVal(), field.order());\n+        newSchema, field.doc(), hasNonNullDefault(field) ? null : field.defaultVal(), field.order());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDM1OTMwMg=="}, "originalCommit": {"oid": "14fb95519b3442092eb6aa02a2608e97e2e8dfd8"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2ODkwNDkwOnYy", "diffSide": "RIGHT", "path": "core/src/test/java/org/apache/iceberg/avro/TestAvroOptionsWithNonNullDefaults.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxNzoyMjowOFrOGnzKVg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxNzoyMjowOFrOGnzKVg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDM4NTg3OA==", "bodyText": "Tests look good to me.", "url": "https://github.com/apache/iceberg/pull/1132#discussion_r444385878", "createdAt": "2020-06-23T17:22:08Z", "author": {"login": "rdblue"}, "path": "core/src/test/java/org/apache/iceberg/avro/TestAvroOptionsWithNonNullDefaults.java", "diffHunk": "@@ -0,0 +1,128 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.avro;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.List;\n+import org.apache.avro.Schema;\n+import org.apache.avro.file.DataFileWriter;\n+import org.apache.avro.generic.GenericData;\n+import org.apache.avro.generic.GenericDatumWriter;\n+import org.apache.iceberg.Files;\n+import org.apache.iceberg.relocated.com.google.common.collect.ImmutableList;\n+import org.apache.iceberg.relocated.com.google.common.collect.Lists;\n+import org.junit.Assert;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.TemporaryFolder;\n+\n+import static org.apache.avro.Schema.Type.INT;\n+import static org.apache.avro.Schema.Type.LONG;\n+import static org.apache.avro.Schema.Type.NULL;\n+\n+public class TestAvroOptionsWithNonNullDefaults {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "14fb95519b3442092eb6aa02a2608e97e2e8dfd8"}, "originalPosition": 41}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3918, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}