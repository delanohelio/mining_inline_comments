{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTM0NjU4NDEz", "number": 1891, "title": "AWS: documentation page for AWS module", "bodyText": "Initial draft for documentation page of the AWS module, I will mark this as draft until #1823 and #1844 are merged.\nAlso, I am currently placing it under Tables tab, which is clearly wrong. I was thinking about adding a new tab Integrations for all integrations including AWS and Nessie, but the navbar becomes too long. I am thinking about moving Flink, Hive and Presto all to a single Engines tab, any thoughts on that?", "createdAt": "2020-12-08T18:59:56Z", "url": "https://github.com/apache/iceberg/pull/1891", "merged": true, "mergeCommit": {"oid": "674c9b6e19354cbef851114ff8a1ba2ecdba01fa"}, "closed": true, "closedAt": "2021-01-09T00:50:05Z", "author": {"login": "jackye1995"}, "timelineItems": {"totalCount": 29, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdmtnUfAFqTU1MzYxNDUxOQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABduSevOgFqTU2NDY2NDc0MA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUzNjE0NTE5", "url": "https://github.com/apache/iceberg/pull/1891#pullrequestreview-553614519", "createdAt": "2020-12-16T11:55:01Z", "commit": {"oid": "2b3b8bc3d8aa06870ca26a5f68d3c59889fab45d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxMTo1NTowMlrOIHBsag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxMTo1NTowMlrOIHBsag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDIzODY5OA==", "bodyText": "Thank you @jackye1995  it looks great, this is more an question. is it also possible to run iceberg with AWS \"Glue Job\"? if we use spark.jars.packages to provide iceberg library.", "url": "https://github.com/apache/iceberg/pull/1891#discussion_r544238698", "createdAt": "2020-12-16T11:55:02Z", "author": {"login": "ismailsimsek"}, "path": "site/docs/aws.md", "diffHunk": "@@ -0,0 +1,212 @@\n+<!--\n+ - Licensed to the Apache Software Foundation (ASF) under one or more\n+ - contributor license agreements.  See the NOTICE file distributed with\n+ - this work for additional information regarding copyright ownership.\n+ - The ASF licenses this file to You under the Apache License, Version 2.0\n+ - (the \"License\"); you may not use this file except in compliance with\n+ - the License.  You may obtain a copy of the License at\n+ -\n+ -   http://www.apache.org/licenses/LICENSE-2.0\n+ -\n+ - Unless required by applicable law or agreed to in writing, software\n+ - distributed under the License is distributed on an \"AS IS\" BASIS,\n+ - WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ - See the License for the specific language governing permissions and\n+ - limitations under the License.\n+ -->\n+ \n+# Iceberg AWS Integrations\n+\n+Iceberg provides integration with different AWS services through the `iceberg-aws` module. \n+This section describes how to use Iceberg with AWS.\n+\n+## Runtime Packages\n+\n+The first thing to note is that the `iceberg-aws` module is not bundled with any engine runtime.\n+To use any features described in later sections, you need to include the following packages by yourself:\n+\n+* the [iceberg AWS package](https://mvnrepository.com/artifact/org.apache.iceberg/iceberg-aws)\n+* the [AWS SDK bundle](https://mvnrepository.com/artifact/software.amazon.awssdk/bundle), or individual AWS client packages if you would like to have a minimum dependency footprint. (please note that we use the new AWS v2 SDK instead of v1)\n+\n+For example, in Spark 3, you can start the SQL shell with:\n+\n+```sh\n+spark-sql --packages org.apache.iceberg:iceberg-spark3-runtime:0.11.0,org.apache.iceberg:iceberg-aws-runtime:0.11.0,software.amazon.awssdk:bundle:2.15.40 \\\n+    --conf spark.sql.catalog.my_catalog=org.apache.iceberg.spark.SparkCatalog \\\n+    --conf spark.sql.catalog.my_catalog.catalog-impl=org.apache.iceberg.aws.glue.GlueCatalog \\\n+    --conf spark.sql.catalog.my_catalog.warehouse=s3://my-bucket/my-key-prefix \\\n+    --conf spark.sql.catalog.my_catalog.gluecatalog.lock.table=myGlueLockTable\n+```\n+\n+## Glue Catalog\n+\n+Iceberg enables the use of [AWS Glue](https://aws.amazon.com/glue) as the `Catalog` implementation.\n+When used, an Iceberg `Namespace` is stored as a [Glue Database](https://docs.aws.amazon.com/glue/latest/dg/aws-glue-api-catalog-databases.html), \n+an Iceberg `Table` is stored as a [Glue Table](https://docs.aws.amazon.com/glue/latest/dg/aws-glue-api-catalog-tables.html),\n+an Iceberg `Snapshot` is stored as a [Glue TableVersion](https://docs.aws.amazon.com/glue/latest/dg/aws-glue-api-catalog-tables.html#aws-glue-api-catalog-tables-TableVersion). \n+You can start using Glue catalog by specifying the `catalog-impl` as `org.apache.iceberg.aws.glue.GlueCatalog`. \n+More details about loading the catalog can be found in individual engine pages, such as [Spark](../spark/#loading-a-custom-catalog) and [Flink](../flink/#creating-catalogs-and-using-catalogs).\n+\n+### Glue Catalog ID\n+\n+It is very common for an organization to store all the tables in a single Glue catalog in a single AWS account and run data computation in many different accounts. \n+In this case, you need to specify a Glue catalog ID when initializing `GlueCatalog`.\n+The Glue catalog ID you should use is the AWS account ID.\n+This is because in each AWS account, there is a single Glue catalog in each AWS region,\n+but the region is pre-determined by the Glue web client that is making the call.\n+If you would like to access a Glue catalog in a different region, you should configure you AWS client, see more details in [AWS client configuration](#aws-client-configurations).\n+It is also common to [assume a role](https://docs.aws.amazon.com/STS/latest/APIReference/API_AssumeRole.html) when having cross-account access. See [AssumeRoleConfigurer](#assumeroleconfigurer) for how to set up assume role credentials in Iceberg.\n+\n+### Skip Archive\n+\n+By default, Glue will store all the table versions created and user can rollback a table to any historical version if needed.\n+However, if you are streaming data to Iceberg, this will easily create a lot of Glue table versions.\n+Therefore, it is recommended to turn off the archive feature in Glue by setting `` to false.\n+For more details, please read [Glue Quotas](https://docs.aws.amazon.com/general/latest/gr/glue.html) and the [UpdateTable API](https://docs.aws.amazon.com/glue/latest/webapi/API_UpdateTable.html).\n+\n+\n+### DynamoDB for locking Glue tables\n+\n+Glue does not have a strong guarantee over concurrent updates to a table. \n+Although it throws `ConcurrentModificationException` when detecting two processes updating a table at the same time,\n+there is no guarantee that one update would not clobber the other update.\n+Therefore, DynamoDB lock is enabled by default for Glue, so that for every commit, \n+`GlueCatalog` first obtains a lock using a helper DynamoDB table and then try to safely modify the Glue table.\n+User must specify a table name through catalog property `gluecatalog.lock.table` as the helper DynamoDB lock table to use.\n+It is recommend to use the same DynamoDB table for operations in the same Glue catalog,\n+and use a different table for a different Glue catalog in another account or region.\n+If the lock table with the given name does not exist in DynamoDB, a new table is created with billing mode set as [Pay-per-Request](https://aws.amazon.com/blogs/aws/amazon-dynamodb-on-demand-no-capacity-planning-and-pay-per-request-pricing).\n+The lock has the following additional properties:\n+\n+* `gluecatalog.lock.wait-ms`:  max time to wait for lock acquisition, default to 3 minutes\n+* `gluecatalog.lock.expire-ms`: max time a table can be locked by a process, default to 20 minutes\n+\n+If your use case only consists of single-process low-frequency (e.g. hourly, daily) updates to a table,\n+you can also turn off this locking feature by setting `gluecatalog.lock.enabled` as false.\n+\n+### Warehouse Location\n+\n+By default, Glue uses `S3FileIO` and only allows a warehouse location in S3. \n+To store data in a different local or cloud store, Glue catalog can switch to use `HadoopFileIO` \n+or any custom FileIO using the mechanism described in the [custom FileIO](../custom-catalog/#custom-file-io-implementation) section.\n+\n+## S3 FileIO\n+\n+Iceberg allows user to write data to S3 through `S3FileIO`.\n+`GlueCatalog` by default uses this FileIO, and other catalogs can load this FileIO using the `io-impl` catalog property.\n+\n+### Progressive Multipart Upload\n+\n+`S3FileIO` implements a customized progressive multipart upload algorithm to upload data.\n+Data files are uploaded in parts in parallel as soon as each part is ready,\n+and each file part is deleted as soon as its upload process completes.\n+This provides maximized upload speed and minimized local disk usage during uploads.\n+Here are the configurations user can tune related to this feature:\n+\n+* `s3fileio.multipart.num-threads`: number of threads to use for uploading parts to S3 (shared pool across all output streams)\n+* `s3fileio.multipart.part.size`: the size of a single part for multipart upload requests, default to 32MB\n+* `s3fileio.multipart.threshold`: the threshold expressed as a factor times the multipart size at which to switch from uploading using a single put object request to uploading using multipart upload, default to 1.5\n+* `s3fileio.staging.dir`: the directory to hold temporary files, default to Java's `java.io.tmpdir` property value\n+\n+### S3 Server Side Encryption\n+\n+`S3FileIO` supports all 3 S3 server side encryption modes:\n+\n+* [SSE-S3](https://docs.aws.amazon.com/AmazonS3/latest/dev/UsingServerSideEncryption.html): When you use Server-Side Encryption with Amazon S3-Managed Keys (SSE-S3), each object is encrypted with a unique key. As an additional safeguard, it encrypts the key itself with a master key that it regularly rotates. Amazon S3 server-side encryption uses one of the strongest block ciphers available, 256-bit Advanced Encryption Standard (AES-256), to encrypt your data.\n+* [SSE-KMS](https://docs.aws.amazon.com/AmazonS3/latest/dev/UsingKMSEncryption.html): Server-Side Encryption with Customer Master Keys (CMKs) Stored in AWS Key Management Service (SSE-KMS) is similar to SSE-S3, but with some additional benefits and charges for using this service. There are separate permissions for the use of a CMK that provides added protection against unauthorized access of your objects in Amazon S3. SSE-KMS also provides you with an audit trail that shows when your CMK was used and by whom. Additionally, you can create and manage customer managed CMKs or use AWS managed CMKs that are unique to you, your service, and your Region.\n+* [SSE-C](https://docs.aws.amazon.com/AmazonS3/latest/dev/ServerSideEncryptionCustomerKeys.html): With Server-Side Encryption with Customer-Provided Keys (SSE-C), you manage the encryption keys and Amazon S3 manages the encryption, as it writes to disks, and decryption, when you access your objects.\n+\n+To enable server side encryption, use the following configuration properties:\n+\n+* `s3fileio.sse.type`: `none`, `s3`, `kms` or `custom`, default to `none`\n+* `s3fileio.sse.key`: a KMS Key ID or ARN for `kms` type (default to `aws/s3`), or a custom base-64 AES256 symmetric key for `custom` type.\n+* `s3fileio.sse.md5`: if SSE type is `custom`, this value must be set as the base-64 MD5 digest of the symmetric key to ensure integrity.\n+\n+### S3 Access Control List\n+\n+`S3FileIO` supports S3 access control list for detailed access control. \n+User can choose the ACL level by setting the `s3fileio.acl` property.\n+For more details, please read [S3 ACL Documentation](https://docs.aws.amazon.com/AmazonS3/latest/dev/acl-overview.html).\n+\n+### ObjectStoreLocationProvider\n+\n+S3 and many other cloud storage services [throttle requests based on object prefix](https://aws.amazon.com/premiumsupport/knowledge-center/s3-request-limit-avoid-throttling/). \n+This means data stored in a traditional Hive storage layout has bad read and write throughput since data files of the same partition are placed under the same prefix.\n+Iceberg by default uses the Hive storage layout, but can be switch to use a different `ObjectStoreLocationProvider`.\n+In this mode, a hash string is added to the beginning of each file path, so that files are equally distributed across all prefixes in an S3 bucket.\n+This results in minimized throttling and maximized throughput for S3-related IO operations.\n+For more details, please follow [LocationProvider Configuration](../custom-catalog/#custom-location-provider-implementation) section to enable this feature.  \n+\n+### S3 Strong Consistency\n+\n+In November 2020, S3 announced [strong consistency](https://aws.amazon.com/s3/consistency/) for all GET and LIST operations, and Iceberg is updated to fully leverage this feature.\n+When creating a new output file using `OutputFile.create()`, strong consistency check is used and an `AlreadyExistsException` will be thrown if the file already exists in S3.\n+\n+### Hadoop S3A\n+\n+Before `S3FileIO` was introduced, many Iceberg users choose to use `HadoopFileIO` to write data to S3 through the [S3A FileSystem](https://github.com/apache/hadoop/blob/trunk/hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/S3AFileSystem.java).\n+As introduced in the above sections, the `S3FileIO` adopts latest AWS clients and S3 features for optimzied security and performance,\n+ and is thus recommend for S3 use case over S3A.\n+\n+`S3FileIO` is compatible with legacy URI schemes written by S3A, \n+so any existing tables with `s3a://` or `s3n://` file paths are treated as equivalent `s3://` file paths.    \n+\n+If for any reason you have to use S3A, here are the instructions:\n+\n+1. to store data using S3A, specify the `warehouse` catalog property to be an S3A path, e.g. `s3a://my-bucket/my-warehouse` \n+2. For `HiveCatalog`, to store metadata also using S3A, specify Hadoop config `hive.metastore.warehouse.dir` to be an S3A path.\n+3. Add [hadoop-aws](https://mvnrepository.com/artifact/org.apache.hadoop/hadoop-aws) as a runtime dependency, configure AWS settings based on [hadoop-aws documentation](https://hadoop.apache.org/docs/current/hadoop-aws/tools/hadoop-aws/index.html) (make sure you check the version, s3a configuration varies a lot based on the version you use)   \n+\n+\n+## AWS client configurations\n+\n+Many organizations have customized their way of obtaining AWS credential and region information and configuring details about AWS clients for features like proxy access, retry, etc.\n+Therefore, we open a configurer interface for Iceberg users to plugin any client configuration in a centralized place. \n+Users can set the `client.configurer` property as the class of the custom configurer.\n+\n+For example, a configurer can do something like the following:\n+\n+```java\n+package com.my.team;\n+\n+import software.amazon.awssdk.auth.credentials.ContainerCredentialsProvider;\n+import software.amazon.awssdk.awscore.client.builder.AwsClientBuilder;\n+import software.amazon.awssdk.services.s3.S3ClientBuilder;\n+\n+public class MyCustomClientConfigurer implements AwsClientConfigurer {\n+\n+  @Override\n+  public <T extends AwsClientBuilder & AwsSyncClientBuilder> T configure(T clientBuilder) {\n+    \n+    // set some custom s3 configurations\n+    if (clientBuilder instanceof S3ClientBuilder) {\n+      S3ClientBuilder s3ClientBuilder = (S3ClientBuilder) clientBuilder;\n+      // configure something\n+    }\n+\n+    // set the same credential provider for all clients\n+    clientBuilder.credentialsProvider(ContainerCredentialsProvider.builder().build());\n+  }\n+}\n+```\n+\n+### AssumeRoleConfigurer\n+\n+As a common use case scenario, we provide `AssumeRoleConfigurer` as an example configurer. It has the following catalog properties:\n+\n+* `client.assume-role.arn`: role ARN to assume\n+* `client.assume-role.timeout-sec`: seconds for an assume-role session, after the timeout a new session is automatically fetched by a STS client.\n+* `client.assume-role.external-id`: optional external ID for the role to assume\n+* `client.assume-role.region`: a region for all clients (except the STS client) to use\n+\n+When this configurer is used, a STS client is initialized with default [credentials chain](https://docs.aws.amazon.com/sdk-for-java/latest/developer-guide/credentials.html) and [region chain](https://docs.aws.amazon.com/sdk-for-java/latest/developer-guide/region-selection.html),\n+and all the other clients (Glue, DynamoDB, S3, etc.) will use the configured assume-role credential and region.\n+\n+## Run Iceberg on AWS", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2b3b8bc3d8aa06870ca26a5f68d3c59889fab45d"}, "originalPosition": 205}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU0MTc1NDg0", "url": "https://github.com/apache/iceberg/pull/1891#pullrequestreview-554175484", "createdAt": "2020-12-16T23:46:31Z", "commit": {"oid": "2b3b8bc3d8aa06870ca26a5f68d3c59889fab45d"}, "state": "COMMENTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQyMzo0NjozMVrOIHeI2w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QwMTo1MDo1NlrOIHg_IQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDcwNDczMQ==", "bodyText": "Guess this might need to be updated as it seems that we do want to include iceberg-aws now, just without AWS dependencies?", "url": "https://github.com/apache/iceberg/pull/1891#discussion_r544704731", "createdAt": "2020-12-16T23:46:31Z", "author": {"login": "yyanyy"}, "path": "site/docs/aws.md", "diffHunk": "@@ -0,0 +1,212 @@\n+<!--\n+ - Licensed to the Apache Software Foundation (ASF) under one or more\n+ - contributor license agreements.  See the NOTICE file distributed with\n+ - this work for additional information regarding copyright ownership.\n+ - The ASF licenses this file to You under the Apache License, Version 2.0\n+ - (the \"License\"); you may not use this file except in compliance with\n+ - the License.  You may obtain a copy of the License at\n+ -\n+ -   http://www.apache.org/licenses/LICENSE-2.0\n+ -\n+ - Unless required by applicable law or agreed to in writing, software\n+ - distributed under the License is distributed on an \"AS IS\" BASIS,\n+ - WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ - See the License for the specific language governing permissions and\n+ - limitations under the License.\n+ -->\n+ \n+# Iceberg AWS Integrations\n+\n+Iceberg provides integration with different AWS services through the `iceberg-aws` module. \n+This section describes how to use Iceberg with AWS.\n+\n+## Runtime Packages\n+\n+The first thing to note is that the `iceberg-aws` module is not bundled with any engine runtime.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2b3b8bc3d8aa06870ca26a5f68d3c59889fab45d"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDcwNDgzNA==", "bodyText": "since we mention minimum dependency here, should we also mention the minimum list of \"individual AWS client packages\" here or maybe refer to the build file so that people know what packages have to be included if they want to do that?", "url": "https://github.com/apache/iceberg/pull/1891#discussion_r544704834", "createdAt": "2020-12-16T23:46:45Z", "author": {"login": "yyanyy"}, "path": "site/docs/aws.md", "diffHunk": "@@ -0,0 +1,212 @@\n+<!--\n+ - Licensed to the Apache Software Foundation (ASF) under one or more\n+ - contributor license agreements.  See the NOTICE file distributed with\n+ - this work for additional information regarding copyright ownership.\n+ - The ASF licenses this file to You under the Apache License, Version 2.0\n+ - (the \"License\"); you may not use this file except in compliance with\n+ - the License.  You may obtain a copy of the License at\n+ -\n+ -   http://www.apache.org/licenses/LICENSE-2.0\n+ -\n+ - Unless required by applicable law or agreed to in writing, software\n+ - distributed under the License is distributed on an \"AS IS\" BASIS,\n+ - WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ - See the License for the specific language governing permissions and\n+ - limitations under the License.\n+ -->\n+ \n+# Iceberg AWS Integrations\n+\n+Iceberg provides integration with different AWS services through the `iceberg-aws` module. \n+This section describes how to use Iceberg with AWS.\n+\n+## Runtime Packages\n+\n+The first thing to note is that the `iceberg-aws` module is not bundled with any engine runtime.\n+To use any features described in later sections, you need to include the following packages by yourself:\n+\n+* the [iceberg AWS package](https://mvnrepository.com/artifact/org.apache.iceberg/iceberg-aws)\n+* the [AWS SDK bundle](https://mvnrepository.com/artifact/software.amazon.awssdk/bundle), or individual AWS client packages if you would like to have a minimum dependency footprint. (please note that we use the new AWS v2 SDK instead of v1)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2b3b8bc3d8aa06870ca26a5f68d3c59889fab45d"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDcwODc5Nw==", "bodyText": "For things like setting glue catalog id we probably want to mention the parameter \"gluecatalog.id\"; or overall I think we may want to add a section in the configuration page that include all configurable parameters mentioned in AwsProperties and link to that section in this page, otherwise people won't know how to configure them. And that would serve as a centralized place to read about all configurations. Is it part of the plan/covered by other PRs?", "url": "https://github.com/apache/iceberg/pull/1891#discussion_r544708797", "createdAt": "2020-12-16T23:56:49Z", "author": {"login": "yyanyy"}, "path": "site/docs/aws.md", "diffHunk": "@@ -0,0 +1,212 @@\n+<!--\n+ - Licensed to the Apache Software Foundation (ASF) under one or more\n+ - contributor license agreements.  See the NOTICE file distributed with\n+ - this work for additional information regarding copyright ownership.\n+ - The ASF licenses this file to You under the Apache License, Version 2.0\n+ - (the \"License\"); you may not use this file except in compliance with\n+ - the License.  You may obtain a copy of the License at\n+ -\n+ -   http://www.apache.org/licenses/LICENSE-2.0\n+ -\n+ - Unless required by applicable law or agreed to in writing, software\n+ - distributed under the License is distributed on an \"AS IS\" BASIS,\n+ - WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ - See the License for the specific language governing permissions and\n+ - limitations under the License.\n+ -->\n+ \n+# Iceberg AWS Integrations\n+\n+Iceberg provides integration with different AWS services through the `iceberg-aws` module. \n+This section describes how to use Iceberg with AWS.\n+\n+## Runtime Packages\n+\n+The first thing to note is that the `iceberg-aws` module is not bundled with any engine runtime.\n+To use any features described in later sections, you need to include the following packages by yourself:\n+\n+* the [iceberg AWS package](https://mvnrepository.com/artifact/org.apache.iceberg/iceberg-aws)\n+* the [AWS SDK bundle](https://mvnrepository.com/artifact/software.amazon.awssdk/bundle), or individual AWS client packages if you would like to have a minimum dependency footprint. (please note that we use the new AWS v2 SDK instead of v1)\n+\n+For example, in Spark 3, you can start the SQL shell with:\n+\n+```sh\n+spark-sql --packages org.apache.iceberg:iceberg-spark3-runtime:0.11.0,org.apache.iceberg:iceberg-aws-runtime:0.11.0,software.amazon.awssdk:bundle:2.15.40 \\\n+    --conf spark.sql.catalog.my_catalog=org.apache.iceberg.spark.SparkCatalog \\\n+    --conf spark.sql.catalog.my_catalog.catalog-impl=org.apache.iceberg.aws.glue.GlueCatalog \\\n+    --conf spark.sql.catalog.my_catalog.warehouse=s3://my-bucket/my-key-prefix \\\n+    --conf spark.sql.catalog.my_catalog.gluecatalog.lock.table=myGlueLockTable\n+```\n+\n+## Glue Catalog\n+\n+Iceberg enables the use of [AWS Glue](https://aws.amazon.com/glue) as the `Catalog` implementation.\n+When used, an Iceberg `Namespace` is stored as a [Glue Database](https://docs.aws.amazon.com/glue/latest/dg/aws-glue-api-catalog-databases.html), \n+an Iceberg `Table` is stored as a [Glue Table](https://docs.aws.amazon.com/glue/latest/dg/aws-glue-api-catalog-tables.html),\n+an Iceberg `Snapshot` is stored as a [Glue TableVersion](https://docs.aws.amazon.com/glue/latest/dg/aws-glue-api-catalog-tables.html#aws-glue-api-catalog-tables-TableVersion). \n+You can start using Glue catalog by specifying the `catalog-impl` as `org.apache.iceberg.aws.glue.GlueCatalog`. \n+More details about loading the catalog can be found in individual engine pages, such as [Spark](../spark/#loading-a-custom-catalog) and [Flink](../flink/#creating-catalogs-and-using-catalogs).\n+\n+### Glue Catalog ID\n+\n+It is very common for an organization to store all the tables in a single Glue catalog in a single AWS account and run data computation in many different accounts. \n+In this case, you need to specify a Glue catalog ID when initializing `GlueCatalog`.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2b3b8bc3d8aa06870ca26a5f68d3c59889fab45d"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDcwOTU4OA==", "bodyText": "Nit: I guess the logic here isn't super clear to me or I misunderstood; it seems like the \"this is because\" part is not explaining why we want to use aws account ID, but rather to explain we can configure region and other stuff when we need to?", "url": "https://github.com/apache/iceberg/pull/1891#discussion_r544709588", "createdAt": "2020-12-16T23:58:48Z", "author": {"login": "yyanyy"}, "path": "site/docs/aws.md", "diffHunk": "@@ -0,0 +1,212 @@\n+<!--\n+ - Licensed to the Apache Software Foundation (ASF) under one or more\n+ - contributor license agreements.  See the NOTICE file distributed with\n+ - this work for additional information regarding copyright ownership.\n+ - The ASF licenses this file to You under the Apache License, Version 2.0\n+ - (the \"License\"); you may not use this file except in compliance with\n+ - the License.  You may obtain a copy of the License at\n+ -\n+ -   http://www.apache.org/licenses/LICENSE-2.0\n+ -\n+ - Unless required by applicable law or agreed to in writing, software\n+ - distributed under the License is distributed on an \"AS IS\" BASIS,\n+ - WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ - See the License for the specific language governing permissions and\n+ - limitations under the License.\n+ -->\n+ \n+# Iceberg AWS Integrations\n+\n+Iceberg provides integration with different AWS services through the `iceberg-aws` module. \n+This section describes how to use Iceberg with AWS.\n+\n+## Runtime Packages\n+\n+The first thing to note is that the `iceberg-aws` module is not bundled with any engine runtime.\n+To use any features described in later sections, you need to include the following packages by yourself:\n+\n+* the [iceberg AWS package](https://mvnrepository.com/artifact/org.apache.iceberg/iceberg-aws)\n+* the [AWS SDK bundle](https://mvnrepository.com/artifact/software.amazon.awssdk/bundle), or individual AWS client packages if you would like to have a minimum dependency footprint. (please note that we use the new AWS v2 SDK instead of v1)\n+\n+For example, in Spark 3, you can start the SQL shell with:\n+\n+```sh\n+spark-sql --packages org.apache.iceberg:iceberg-spark3-runtime:0.11.0,org.apache.iceberg:iceberg-aws-runtime:0.11.0,software.amazon.awssdk:bundle:2.15.40 \\\n+    --conf spark.sql.catalog.my_catalog=org.apache.iceberg.spark.SparkCatalog \\\n+    --conf spark.sql.catalog.my_catalog.catalog-impl=org.apache.iceberg.aws.glue.GlueCatalog \\\n+    --conf spark.sql.catalog.my_catalog.warehouse=s3://my-bucket/my-key-prefix \\\n+    --conf spark.sql.catalog.my_catalog.gluecatalog.lock.table=myGlueLockTable\n+```\n+\n+## Glue Catalog\n+\n+Iceberg enables the use of [AWS Glue](https://aws.amazon.com/glue) as the `Catalog` implementation.\n+When used, an Iceberg `Namespace` is stored as a [Glue Database](https://docs.aws.amazon.com/glue/latest/dg/aws-glue-api-catalog-databases.html), \n+an Iceberg `Table` is stored as a [Glue Table](https://docs.aws.amazon.com/glue/latest/dg/aws-glue-api-catalog-tables.html),\n+an Iceberg `Snapshot` is stored as a [Glue TableVersion](https://docs.aws.amazon.com/glue/latest/dg/aws-glue-api-catalog-tables.html#aws-glue-api-catalog-tables-TableVersion). \n+You can start using Glue catalog by specifying the `catalog-impl` as `org.apache.iceberg.aws.glue.GlueCatalog`. \n+More details about loading the catalog can be found in individual engine pages, such as [Spark](../spark/#loading-a-custom-catalog) and [Flink](../flink/#creating-catalogs-and-using-catalogs).\n+\n+### Glue Catalog ID\n+\n+It is very common for an organization to store all the tables in a single Glue catalog in a single AWS account and run data computation in many different accounts. \n+In this case, you need to specify a Glue catalog ID when initializing `GlueCatalog`.\n+The Glue catalog ID you should use is the AWS account ID.\n+This is because in each AWS account, there is a single Glue catalog in each AWS region,\n+but the region is pre-determined by the Glue web client that is making the call.\n+If you would like to access a Glue catalog in a different region, you should configure you AWS client, see more details in [AWS client configuration](#aws-client-configurations).", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2b3b8bc3d8aa06870ca26a5f68d3c59889fab45d"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDcwOTg0OQ==", "bodyText": "Forgot to update the string to be set?", "url": "https://github.com/apache/iceberg/pull/1891#discussion_r544709849", "createdAt": "2020-12-16T23:59:27Z", "author": {"login": "yyanyy"}, "path": "site/docs/aws.md", "diffHunk": "@@ -0,0 +1,212 @@\n+<!--\n+ - Licensed to the Apache Software Foundation (ASF) under one or more\n+ - contributor license agreements.  See the NOTICE file distributed with\n+ - this work for additional information regarding copyright ownership.\n+ - The ASF licenses this file to You under the Apache License, Version 2.0\n+ - (the \"License\"); you may not use this file except in compliance with\n+ - the License.  You may obtain a copy of the License at\n+ -\n+ -   http://www.apache.org/licenses/LICENSE-2.0\n+ -\n+ - Unless required by applicable law or agreed to in writing, software\n+ - distributed under the License is distributed on an \"AS IS\" BASIS,\n+ - WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ - See the License for the specific language governing permissions and\n+ - limitations under the License.\n+ -->\n+ \n+# Iceberg AWS Integrations\n+\n+Iceberg provides integration with different AWS services through the `iceberg-aws` module. \n+This section describes how to use Iceberg with AWS.\n+\n+## Runtime Packages\n+\n+The first thing to note is that the `iceberg-aws` module is not bundled with any engine runtime.\n+To use any features described in later sections, you need to include the following packages by yourself:\n+\n+* the [iceberg AWS package](https://mvnrepository.com/artifact/org.apache.iceberg/iceberg-aws)\n+* the [AWS SDK bundle](https://mvnrepository.com/artifact/software.amazon.awssdk/bundle), or individual AWS client packages if you would like to have a minimum dependency footprint. (please note that we use the new AWS v2 SDK instead of v1)\n+\n+For example, in Spark 3, you can start the SQL shell with:\n+\n+```sh\n+spark-sql --packages org.apache.iceberg:iceberg-spark3-runtime:0.11.0,org.apache.iceberg:iceberg-aws-runtime:0.11.0,software.amazon.awssdk:bundle:2.15.40 \\\n+    --conf spark.sql.catalog.my_catalog=org.apache.iceberg.spark.SparkCatalog \\\n+    --conf spark.sql.catalog.my_catalog.catalog-impl=org.apache.iceberg.aws.glue.GlueCatalog \\\n+    --conf spark.sql.catalog.my_catalog.warehouse=s3://my-bucket/my-key-prefix \\\n+    --conf spark.sql.catalog.my_catalog.gluecatalog.lock.table=myGlueLockTable\n+```\n+\n+## Glue Catalog\n+\n+Iceberg enables the use of [AWS Glue](https://aws.amazon.com/glue) as the `Catalog` implementation.\n+When used, an Iceberg `Namespace` is stored as a [Glue Database](https://docs.aws.amazon.com/glue/latest/dg/aws-glue-api-catalog-databases.html), \n+an Iceberg `Table` is stored as a [Glue Table](https://docs.aws.amazon.com/glue/latest/dg/aws-glue-api-catalog-tables.html),\n+an Iceberg `Snapshot` is stored as a [Glue TableVersion](https://docs.aws.amazon.com/glue/latest/dg/aws-glue-api-catalog-tables.html#aws-glue-api-catalog-tables-TableVersion). \n+You can start using Glue catalog by specifying the `catalog-impl` as `org.apache.iceberg.aws.glue.GlueCatalog`. \n+More details about loading the catalog can be found in individual engine pages, such as [Spark](../spark/#loading-a-custom-catalog) and [Flink](../flink/#creating-catalogs-and-using-catalogs).\n+\n+### Glue Catalog ID\n+\n+It is very common for an organization to store all the tables in a single Glue catalog in a single AWS account and run data computation in many different accounts. \n+In this case, you need to specify a Glue catalog ID when initializing `GlueCatalog`.\n+The Glue catalog ID you should use is the AWS account ID.\n+This is because in each AWS account, there is a single Glue catalog in each AWS region,\n+but the region is pre-determined by the Glue web client that is making the call.\n+If you would like to access a Glue catalog in a different region, you should configure you AWS client, see more details in [AWS client configuration](#aws-client-configurations).\n+It is also common to [assume a role](https://docs.aws.amazon.com/STS/latest/APIReference/API_AssumeRole.html) when having cross-account access. See [AssumeRoleConfigurer](#assumeroleconfigurer) for how to set up assume role credentials in Iceberg.\n+\n+### Skip Archive\n+\n+By default, Glue will store all the table versions created and user can rollback a table to any historical version if needed.\n+However, if you are streaming data to Iceberg, this will easily create a lot of Glue table versions.\n+Therefore, it is recommended to turn off the archive feature in Glue by setting `` to false.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2b3b8bc3d8aa06870ca26a5f68d3c59889fab45d"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDcxNjgxNg==", "bodyText": "From the current code base it seems like we are not defaulting it to anything, is this aws/s3 a default value on AWS SDK or something?", "url": "https://github.com/apache/iceberg/pull/1891#discussion_r544716816", "createdAt": "2020-12-17T00:17:28Z", "author": {"login": "yyanyy"}, "path": "site/docs/aws.md", "diffHunk": "@@ -0,0 +1,212 @@\n+<!--\n+ - Licensed to the Apache Software Foundation (ASF) under one or more\n+ - contributor license agreements.  See the NOTICE file distributed with\n+ - this work for additional information regarding copyright ownership.\n+ - The ASF licenses this file to You under the Apache License, Version 2.0\n+ - (the \"License\"); you may not use this file except in compliance with\n+ - the License.  You may obtain a copy of the License at\n+ -\n+ -   http://www.apache.org/licenses/LICENSE-2.0\n+ -\n+ - Unless required by applicable law or agreed to in writing, software\n+ - distributed under the License is distributed on an \"AS IS\" BASIS,\n+ - WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ - See the License for the specific language governing permissions and\n+ - limitations under the License.\n+ -->\n+ \n+# Iceberg AWS Integrations\n+\n+Iceberg provides integration with different AWS services through the `iceberg-aws` module. \n+This section describes how to use Iceberg with AWS.\n+\n+## Runtime Packages\n+\n+The first thing to note is that the `iceberg-aws` module is not bundled with any engine runtime.\n+To use any features described in later sections, you need to include the following packages by yourself:\n+\n+* the [iceberg AWS package](https://mvnrepository.com/artifact/org.apache.iceberg/iceberg-aws)\n+* the [AWS SDK bundle](https://mvnrepository.com/artifact/software.amazon.awssdk/bundle), or individual AWS client packages if you would like to have a minimum dependency footprint. (please note that we use the new AWS v2 SDK instead of v1)\n+\n+For example, in Spark 3, you can start the SQL shell with:\n+\n+```sh\n+spark-sql --packages org.apache.iceberg:iceberg-spark3-runtime:0.11.0,org.apache.iceberg:iceberg-aws-runtime:0.11.0,software.amazon.awssdk:bundle:2.15.40 \\\n+    --conf spark.sql.catalog.my_catalog=org.apache.iceberg.spark.SparkCatalog \\\n+    --conf spark.sql.catalog.my_catalog.catalog-impl=org.apache.iceberg.aws.glue.GlueCatalog \\\n+    --conf spark.sql.catalog.my_catalog.warehouse=s3://my-bucket/my-key-prefix \\\n+    --conf spark.sql.catalog.my_catalog.gluecatalog.lock.table=myGlueLockTable\n+```\n+\n+## Glue Catalog\n+\n+Iceberg enables the use of [AWS Glue](https://aws.amazon.com/glue) as the `Catalog` implementation.\n+When used, an Iceberg `Namespace` is stored as a [Glue Database](https://docs.aws.amazon.com/glue/latest/dg/aws-glue-api-catalog-databases.html), \n+an Iceberg `Table` is stored as a [Glue Table](https://docs.aws.amazon.com/glue/latest/dg/aws-glue-api-catalog-tables.html),\n+an Iceberg `Snapshot` is stored as a [Glue TableVersion](https://docs.aws.amazon.com/glue/latest/dg/aws-glue-api-catalog-tables.html#aws-glue-api-catalog-tables-TableVersion). \n+You can start using Glue catalog by specifying the `catalog-impl` as `org.apache.iceberg.aws.glue.GlueCatalog`. \n+More details about loading the catalog can be found in individual engine pages, such as [Spark](../spark/#loading-a-custom-catalog) and [Flink](../flink/#creating-catalogs-and-using-catalogs).\n+\n+### Glue Catalog ID\n+\n+It is very common for an organization to store all the tables in a single Glue catalog in a single AWS account and run data computation in many different accounts. \n+In this case, you need to specify a Glue catalog ID when initializing `GlueCatalog`.\n+The Glue catalog ID you should use is the AWS account ID.\n+This is because in each AWS account, there is a single Glue catalog in each AWS region,\n+but the region is pre-determined by the Glue web client that is making the call.\n+If you would like to access a Glue catalog in a different region, you should configure you AWS client, see more details in [AWS client configuration](#aws-client-configurations).\n+It is also common to [assume a role](https://docs.aws.amazon.com/STS/latest/APIReference/API_AssumeRole.html) when having cross-account access. See [AssumeRoleConfigurer](#assumeroleconfigurer) for how to set up assume role credentials in Iceberg.\n+\n+### Skip Archive\n+\n+By default, Glue will store all the table versions created and user can rollback a table to any historical version if needed.\n+However, if you are streaming data to Iceberg, this will easily create a lot of Glue table versions.\n+Therefore, it is recommended to turn off the archive feature in Glue by setting `` to false.\n+For more details, please read [Glue Quotas](https://docs.aws.amazon.com/general/latest/gr/glue.html) and the [UpdateTable API](https://docs.aws.amazon.com/glue/latest/webapi/API_UpdateTable.html).\n+\n+\n+### DynamoDB for locking Glue tables\n+\n+Glue does not have a strong guarantee over concurrent updates to a table. \n+Although it throws `ConcurrentModificationException` when detecting two processes updating a table at the same time,\n+there is no guarantee that one update would not clobber the other update.\n+Therefore, DynamoDB lock is enabled by default for Glue, so that for every commit, \n+`GlueCatalog` first obtains a lock using a helper DynamoDB table and then try to safely modify the Glue table.\n+User must specify a table name through catalog property `gluecatalog.lock.table` as the helper DynamoDB lock table to use.\n+It is recommend to use the same DynamoDB table for operations in the same Glue catalog,\n+and use a different table for a different Glue catalog in another account or region.\n+If the lock table with the given name does not exist in DynamoDB, a new table is created with billing mode set as [Pay-per-Request](https://aws.amazon.com/blogs/aws/amazon-dynamodb-on-demand-no-capacity-planning-and-pay-per-request-pricing).\n+The lock has the following additional properties:\n+\n+* `gluecatalog.lock.wait-ms`:  max time to wait for lock acquisition, default to 3 minutes\n+* `gluecatalog.lock.expire-ms`: max time a table can be locked by a process, default to 20 minutes\n+\n+If your use case only consists of single-process low-frequency (e.g. hourly, daily) updates to a table,\n+you can also turn off this locking feature by setting `gluecatalog.lock.enabled` as false.\n+\n+### Warehouse Location\n+\n+By default, Glue uses `S3FileIO` and only allows a warehouse location in S3. \n+To store data in a different local or cloud store, Glue catalog can switch to use `HadoopFileIO` \n+or any custom FileIO using the mechanism described in the [custom FileIO](../custom-catalog/#custom-file-io-implementation) section.\n+\n+## S3 FileIO\n+\n+Iceberg allows user to write data to S3 through `S3FileIO`.\n+`GlueCatalog` by default uses this FileIO, and other catalogs can load this FileIO using the `io-impl` catalog property.\n+\n+### Progressive Multipart Upload\n+\n+`S3FileIO` implements a customized progressive multipart upload algorithm to upload data.\n+Data files are uploaded in parts in parallel as soon as each part is ready,\n+and each file part is deleted as soon as its upload process completes.\n+This provides maximized upload speed and minimized local disk usage during uploads.\n+Here are the configurations user can tune related to this feature:\n+\n+* `s3fileio.multipart.num-threads`: number of threads to use for uploading parts to S3 (shared pool across all output streams)\n+* `s3fileio.multipart.part.size`: the size of a single part for multipart upload requests, default to 32MB\n+* `s3fileio.multipart.threshold`: the threshold expressed as a factor times the multipart size at which to switch from uploading using a single put object request to uploading using multipart upload, default to 1.5\n+* `s3fileio.staging.dir`: the directory to hold temporary files, default to Java's `java.io.tmpdir` property value\n+\n+### S3 Server Side Encryption\n+\n+`S3FileIO` supports all 3 S3 server side encryption modes:\n+\n+* [SSE-S3](https://docs.aws.amazon.com/AmazonS3/latest/dev/UsingServerSideEncryption.html): When you use Server-Side Encryption with Amazon S3-Managed Keys (SSE-S3), each object is encrypted with a unique key. As an additional safeguard, it encrypts the key itself with a master key that it regularly rotates. Amazon S3 server-side encryption uses one of the strongest block ciphers available, 256-bit Advanced Encryption Standard (AES-256), to encrypt your data.\n+* [SSE-KMS](https://docs.aws.amazon.com/AmazonS3/latest/dev/UsingKMSEncryption.html): Server-Side Encryption with Customer Master Keys (CMKs) Stored in AWS Key Management Service (SSE-KMS) is similar to SSE-S3, but with some additional benefits and charges for using this service. There are separate permissions for the use of a CMK that provides added protection against unauthorized access of your objects in Amazon S3. SSE-KMS also provides you with an audit trail that shows when your CMK was used and by whom. Additionally, you can create and manage customer managed CMKs or use AWS managed CMKs that are unique to you, your service, and your Region.\n+* [SSE-C](https://docs.aws.amazon.com/AmazonS3/latest/dev/ServerSideEncryptionCustomerKeys.html): With Server-Side Encryption with Customer-Provided Keys (SSE-C), you manage the encryption keys and Amazon S3 manages the encryption, as it writes to disks, and decryption, when you access your objects.\n+\n+To enable server side encryption, use the following configuration properties:\n+\n+* `s3fileio.sse.type`: `none`, `s3`, `kms` or `custom`, default to `none`\n+* `s3fileio.sse.key`: a KMS Key ID or ARN for `kms` type (default to `aws/s3`), or a custom base-64 AES256 symmetric key for `custom` type.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2b3b8bc3d8aa06870ca26a5f68d3c59889fab45d"}, "originalPosition": 122}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDc1MTM5Mw==", "bodyText": "Minor: did you have to pull down the aws sdk bundle to run sparksql in EMR? IIRC there's already some preinstalled aws libraries on EMR, if that's true we might be able to mention them here to save one step for the users.", "url": "https://github.com/apache/iceberg/pull/1891#discussion_r544751393", "createdAt": "2020-12-17T01:50:56Z", "author": {"login": "yyanyy"}, "path": "site/docs/aws.md", "diffHunk": "@@ -0,0 +1,212 @@\n+<!--\n+ - Licensed to the Apache Software Foundation (ASF) under one or more\n+ - contributor license agreements.  See the NOTICE file distributed with\n+ - this work for additional information regarding copyright ownership.\n+ - The ASF licenses this file to You under the Apache License, Version 2.0\n+ - (the \"License\"); you may not use this file except in compliance with\n+ - the License.  You may obtain a copy of the License at\n+ -\n+ -   http://www.apache.org/licenses/LICENSE-2.0\n+ -\n+ - Unless required by applicable law or agreed to in writing, software\n+ - distributed under the License is distributed on an \"AS IS\" BASIS,\n+ - WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ - See the License for the specific language governing permissions and\n+ - limitations under the License.\n+ -->\n+ \n+# Iceberg AWS Integrations\n+\n+Iceberg provides integration with different AWS services through the `iceberg-aws` module. \n+This section describes how to use Iceberg with AWS.\n+\n+## Runtime Packages\n+\n+The first thing to note is that the `iceberg-aws` module is not bundled with any engine runtime.\n+To use any features described in later sections, you need to include the following packages by yourself:\n+\n+* the [iceberg AWS package](https://mvnrepository.com/artifact/org.apache.iceberg/iceberg-aws)\n+* the [AWS SDK bundle](https://mvnrepository.com/artifact/software.amazon.awssdk/bundle), or individual AWS client packages if you would like to have a minimum dependency footprint. (please note that we use the new AWS v2 SDK instead of v1)\n+\n+For example, in Spark 3, you can start the SQL shell with:\n+\n+```sh\n+spark-sql --packages org.apache.iceberg:iceberg-spark3-runtime:0.11.0,org.apache.iceberg:iceberg-aws-runtime:0.11.0,software.amazon.awssdk:bundle:2.15.40 \\\n+    --conf spark.sql.catalog.my_catalog=org.apache.iceberg.spark.SparkCatalog \\\n+    --conf spark.sql.catalog.my_catalog.catalog-impl=org.apache.iceberg.aws.glue.GlueCatalog \\\n+    --conf spark.sql.catalog.my_catalog.warehouse=s3://my-bucket/my-key-prefix \\\n+    --conf spark.sql.catalog.my_catalog.gluecatalog.lock.table=myGlueLockTable\n+```\n+\n+## Glue Catalog\n+\n+Iceberg enables the use of [AWS Glue](https://aws.amazon.com/glue) as the `Catalog` implementation.\n+When used, an Iceberg `Namespace` is stored as a [Glue Database](https://docs.aws.amazon.com/glue/latest/dg/aws-glue-api-catalog-databases.html), \n+an Iceberg `Table` is stored as a [Glue Table](https://docs.aws.amazon.com/glue/latest/dg/aws-glue-api-catalog-tables.html),\n+an Iceberg `Snapshot` is stored as a [Glue TableVersion](https://docs.aws.amazon.com/glue/latest/dg/aws-glue-api-catalog-tables.html#aws-glue-api-catalog-tables-TableVersion). \n+You can start using Glue catalog by specifying the `catalog-impl` as `org.apache.iceberg.aws.glue.GlueCatalog`. \n+More details about loading the catalog can be found in individual engine pages, such as [Spark](../spark/#loading-a-custom-catalog) and [Flink](../flink/#creating-catalogs-and-using-catalogs).\n+\n+### Glue Catalog ID\n+\n+It is very common for an organization to store all the tables in a single Glue catalog in a single AWS account and run data computation in many different accounts. \n+In this case, you need to specify a Glue catalog ID when initializing `GlueCatalog`.\n+The Glue catalog ID you should use is the AWS account ID.\n+This is because in each AWS account, there is a single Glue catalog in each AWS region,\n+but the region is pre-determined by the Glue web client that is making the call.\n+If you would like to access a Glue catalog in a different region, you should configure you AWS client, see more details in [AWS client configuration](#aws-client-configurations).\n+It is also common to [assume a role](https://docs.aws.amazon.com/STS/latest/APIReference/API_AssumeRole.html) when having cross-account access. See [AssumeRoleConfigurer](#assumeroleconfigurer) for how to set up assume role credentials in Iceberg.\n+\n+### Skip Archive\n+\n+By default, Glue will store all the table versions created and user can rollback a table to any historical version if needed.\n+However, if you are streaming data to Iceberg, this will easily create a lot of Glue table versions.\n+Therefore, it is recommended to turn off the archive feature in Glue by setting `` to false.\n+For more details, please read [Glue Quotas](https://docs.aws.amazon.com/general/latest/gr/glue.html) and the [UpdateTable API](https://docs.aws.amazon.com/glue/latest/webapi/API_UpdateTable.html).\n+\n+\n+### DynamoDB for locking Glue tables\n+\n+Glue does not have a strong guarantee over concurrent updates to a table. \n+Although it throws `ConcurrentModificationException` when detecting two processes updating a table at the same time,\n+there is no guarantee that one update would not clobber the other update.\n+Therefore, DynamoDB lock is enabled by default for Glue, so that for every commit, \n+`GlueCatalog` first obtains a lock using a helper DynamoDB table and then try to safely modify the Glue table.\n+User must specify a table name through catalog property `gluecatalog.lock.table` as the helper DynamoDB lock table to use.\n+It is recommend to use the same DynamoDB table for operations in the same Glue catalog,\n+and use a different table for a different Glue catalog in another account or region.\n+If the lock table with the given name does not exist in DynamoDB, a new table is created with billing mode set as [Pay-per-Request](https://aws.amazon.com/blogs/aws/amazon-dynamodb-on-demand-no-capacity-planning-and-pay-per-request-pricing).\n+The lock has the following additional properties:\n+\n+* `gluecatalog.lock.wait-ms`:  max time to wait for lock acquisition, default to 3 minutes\n+* `gluecatalog.lock.expire-ms`: max time a table can be locked by a process, default to 20 minutes\n+\n+If your use case only consists of single-process low-frequency (e.g. hourly, daily) updates to a table,\n+you can also turn off this locking feature by setting `gluecatalog.lock.enabled` as false.\n+\n+### Warehouse Location\n+\n+By default, Glue uses `S3FileIO` and only allows a warehouse location in S3. \n+To store data in a different local or cloud store, Glue catalog can switch to use `HadoopFileIO` \n+or any custom FileIO using the mechanism described in the [custom FileIO](../custom-catalog/#custom-file-io-implementation) section.\n+\n+## S3 FileIO\n+\n+Iceberg allows user to write data to S3 through `S3FileIO`.\n+`GlueCatalog` by default uses this FileIO, and other catalogs can load this FileIO using the `io-impl` catalog property.\n+\n+### Progressive Multipart Upload\n+\n+`S3FileIO` implements a customized progressive multipart upload algorithm to upload data.\n+Data files are uploaded in parts in parallel as soon as each part is ready,\n+and each file part is deleted as soon as its upload process completes.\n+This provides maximized upload speed and minimized local disk usage during uploads.\n+Here are the configurations user can tune related to this feature:\n+\n+* `s3fileio.multipart.num-threads`: number of threads to use for uploading parts to S3 (shared pool across all output streams)\n+* `s3fileio.multipart.part.size`: the size of a single part for multipart upload requests, default to 32MB\n+* `s3fileio.multipart.threshold`: the threshold expressed as a factor times the multipart size at which to switch from uploading using a single put object request to uploading using multipart upload, default to 1.5\n+* `s3fileio.staging.dir`: the directory to hold temporary files, default to Java's `java.io.tmpdir` property value\n+\n+### S3 Server Side Encryption\n+\n+`S3FileIO` supports all 3 S3 server side encryption modes:\n+\n+* [SSE-S3](https://docs.aws.amazon.com/AmazonS3/latest/dev/UsingServerSideEncryption.html): When you use Server-Side Encryption with Amazon S3-Managed Keys (SSE-S3), each object is encrypted with a unique key. As an additional safeguard, it encrypts the key itself with a master key that it regularly rotates. Amazon S3 server-side encryption uses one of the strongest block ciphers available, 256-bit Advanced Encryption Standard (AES-256), to encrypt your data.\n+* [SSE-KMS](https://docs.aws.amazon.com/AmazonS3/latest/dev/UsingKMSEncryption.html): Server-Side Encryption with Customer Master Keys (CMKs) Stored in AWS Key Management Service (SSE-KMS) is similar to SSE-S3, but with some additional benefits and charges for using this service. There are separate permissions for the use of a CMK that provides added protection against unauthorized access of your objects in Amazon S3. SSE-KMS also provides you with an audit trail that shows when your CMK was used and by whom. Additionally, you can create and manage customer managed CMKs or use AWS managed CMKs that are unique to you, your service, and your Region.\n+* [SSE-C](https://docs.aws.amazon.com/AmazonS3/latest/dev/ServerSideEncryptionCustomerKeys.html): With Server-Side Encryption with Customer-Provided Keys (SSE-C), you manage the encryption keys and Amazon S3 manages the encryption, as it writes to disks, and decryption, when you access your objects.\n+\n+To enable server side encryption, use the following configuration properties:\n+\n+* `s3fileio.sse.type`: `none`, `s3`, `kms` or `custom`, default to `none`\n+* `s3fileio.sse.key`: a KMS Key ID or ARN for `kms` type (default to `aws/s3`), or a custom base-64 AES256 symmetric key for `custom` type.\n+* `s3fileio.sse.md5`: if SSE type is `custom`, this value must be set as the base-64 MD5 digest of the symmetric key to ensure integrity.\n+\n+### S3 Access Control List\n+\n+`S3FileIO` supports S3 access control list for detailed access control. \n+User can choose the ACL level by setting the `s3fileio.acl` property.\n+For more details, please read [S3 ACL Documentation](https://docs.aws.amazon.com/AmazonS3/latest/dev/acl-overview.html).\n+\n+### ObjectStoreLocationProvider\n+\n+S3 and many other cloud storage services [throttle requests based on object prefix](https://aws.amazon.com/premiumsupport/knowledge-center/s3-request-limit-avoid-throttling/). \n+This means data stored in a traditional Hive storage layout has bad read and write throughput since data files of the same partition are placed under the same prefix.\n+Iceberg by default uses the Hive storage layout, but can be switch to use a different `ObjectStoreLocationProvider`.\n+In this mode, a hash string is added to the beginning of each file path, so that files are equally distributed across all prefixes in an S3 bucket.\n+This results in minimized throttling and maximized throughput for S3-related IO operations.\n+For more details, please follow [LocationProvider Configuration](../custom-catalog/#custom-location-provider-implementation) section to enable this feature.  \n+\n+### S3 Strong Consistency\n+\n+In November 2020, S3 announced [strong consistency](https://aws.amazon.com/s3/consistency/) for all GET and LIST operations, and Iceberg is updated to fully leverage this feature.\n+When creating a new output file using `OutputFile.create()`, strong consistency check is used and an `AlreadyExistsException` will be thrown if the file already exists in S3.\n+\n+### Hadoop S3A\n+\n+Before `S3FileIO` was introduced, many Iceberg users choose to use `HadoopFileIO` to write data to S3 through the [S3A FileSystem](https://github.com/apache/hadoop/blob/trunk/hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/S3AFileSystem.java).\n+As introduced in the above sections, the `S3FileIO` adopts latest AWS clients and S3 features for optimzied security and performance,\n+ and is thus recommend for S3 use case over S3A.\n+\n+`S3FileIO` is compatible with legacy URI schemes written by S3A, \n+so any existing tables with `s3a://` or `s3n://` file paths are treated as equivalent `s3://` file paths.    \n+\n+If for any reason you have to use S3A, here are the instructions:\n+\n+1. to store data using S3A, specify the `warehouse` catalog property to be an S3A path, e.g. `s3a://my-bucket/my-warehouse` \n+2. For `HiveCatalog`, to store metadata also using S3A, specify Hadoop config `hive.metastore.warehouse.dir` to be an S3A path.\n+3. Add [hadoop-aws](https://mvnrepository.com/artifact/org.apache.hadoop/hadoop-aws) as a runtime dependency, configure AWS settings based on [hadoop-aws documentation](https://hadoop.apache.org/docs/current/hadoop-aws/tools/hadoop-aws/index.html) (make sure you check the version, s3a configuration varies a lot based on the version you use)   \n+\n+\n+## AWS client configurations\n+\n+Many organizations have customized their way of obtaining AWS credential and region information and configuring details about AWS clients for features like proxy access, retry, etc.\n+Therefore, we open a configurer interface for Iceberg users to plugin any client configuration in a centralized place. \n+Users can set the `client.configurer` property as the class of the custom configurer.\n+\n+For example, a configurer can do something like the following:\n+\n+```java\n+package com.my.team;\n+\n+import software.amazon.awssdk.auth.credentials.ContainerCredentialsProvider;\n+import software.amazon.awssdk.awscore.client.builder.AwsClientBuilder;\n+import software.amazon.awssdk.services.s3.S3ClientBuilder;\n+\n+public class MyCustomClientConfigurer implements AwsClientConfigurer {\n+\n+  @Override\n+  public <T extends AwsClientBuilder & AwsSyncClientBuilder> T configure(T clientBuilder) {\n+    \n+    // set some custom s3 configurations\n+    if (clientBuilder instanceof S3ClientBuilder) {\n+      S3ClientBuilder s3ClientBuilder = (S3ClientBuilder) clientBuilder;\n+      // configure something\n+    }\n+\n+    // set the same credential provider for all clients\n+    clientBuilder.credentialsProvider(ContainerCredentialsProvider.builder().build());\n+  }\n+}\n+```\n+\n+### AssumeRoleConfigurer\n+\n+As a common use case scenario, we provide `AssumeRoleConfigurer` as an example configurer. It has the following catalog properties:\n+\n+* `client.assume-role.arn`: role ARN to assume\n+* `client.assume-role.timeout-sec`: seconds for an assume-role session, after the timeout a new session is automatically fetched by a STS client.\n+* `client.assume-role.external-id`: optional external ID for the role to assume\n+* `client.assume-role.region`: a region for all clients (except the STS client) to use\n+\n+When this configurer is used, a STS client is initialized with default [credentials chain](https://docs.aws.amazon.com/sdk-for-java/latest/developer-guide/credentials.html) and [region chain](https://docs.aws.amazon.com/sdk-for-java/latest/developer-guide/region-selection.html),\n+and all the other clients (Glue, DynamoDB, S3, etc.) will use the configured assume-role credential and region.\n+\n+## Run Iceberg on AWS\n+\n+[Amazon EMR](https://aws.amazon.com/emr/) is the most common platform to run Iceberg on AWS. EMR can provision clusters with [Spark](https://docs.aws.amazon.com/emr/latest/ReleaseGuide/emr-spark.html) (EMR 6 for Spark 3, EMR 5 for Spark 2),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2b3b8bc3d8aa06870ca26a5f68d3c59889fab45d"}, "originalPosition": 207}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU0MjQwNzU1", "url": "https://github.com/apache/iceberg/pull/1891#pullrequestreview-554240755", "createdAt": "2020-12-17T02:45:29Z", "commit": {"oid": "2b3b8bc3d8aa06870ca26a5f68d3c59889fab45d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QwMjo0NToyOVrOIHiJzw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QwMjo0NToyOVrOIHiJzw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDc3MDUxMQ==", "bodyText": "I was about to ask the rationalization of S3 FileIO compared to Hadoop filesystem API with S3 support in #1945, but this section covers it. Thanks!\nProbably worth to also mention whether Hadoop FS API with S3 is sufficient to work with, or S3 FileIO is required to avoid consistency glitches. That would help end users to determine whether including aws module is a kind of requirement for dealing with S3 or not.", "url": "https://github.com/apache/iceberg/pull/1891#discussion_r544770511", "createdAt": "2020-12-17T02:45:29Z", "author": {"login": "HeartSaVioR"}, "path": "site/docs/aws.md", "diffHunk": "@@ -0,0 +1,212 @@\n+<!--\n+ - Licensed to the Apache Software Foundation (ASF) under one or more\n+ - contributor license agreements.  See the NOTICE file distributed with\n+ - this work for additional information regarding copyright ownership.\n+ - The ASF licenses this file to You under the Apache License, Version 2.0\n+ - (the \"License\"); you may not use this file except in compliance with\n+ - the License.  You may obtain a copy of the License at\n+ -\n+ -   http://www.apache.org/licenses/LICENSE-2.0\n+ -\n+ - Unless required by applicable law or agreed to in writing, software\n+ - distributed under the License is distributed on an \"AS IS\" BASIS,\n+ - WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ - See the License for the specific language governing permissions and\n+ - limitations under the License.\n+ -->\n+ \n+# Iceberg AWS Integrations\n+\n+Iceberg provides integration with different AWS services through the `iceberg-aws` module. \n+This section describes how to use Iceberg with AWS.\n+\n+## Runtime Packages\n+\n+The first thing to note is that the `iceberg-aws` module is not bundled with any engine runtime.\n+To use any features described in later sections, you need to include the following packages by yourself:\n+\n+* the [iceberg AWS package](https://mvnrepository.com/artifact/org.apache.iceberg/iceberg-aws)\n+* the [AWS SDK bundle](https://mvnrepository.com/artifact/software.amazon.awssdk/bundle), or individual AWS client packages if you would like to have a minimum dependency footprint. (please note that we use the new AWS v2 SDK instead of v1)\n+\n+For example, in Spark 3, you can start the SQL shell with:\n+\n+```sh\n+spark-sql --packages org.apache.iceberg:iceberg-spark3-runtime:0.11.0,org.apache.iceberg:iceberg-aws-runtime:0.11.0,software.amazon.awssdk:bundle:2.15.40 \\\n+    --conf spark.sql.catalog.my_catalog=org.apache.iceberg.spark.SparkCatalog \\\n+    --conf spark.sql.catalog.my_catalog.catalog-impl=org.apache.iceberg.aws.glue.GlueCatalog \\\n+    --conf spark.sql.catalog.my_catalog.warehouse=s3://my-bucket/my-key-prefix \\\n+    --conf spark.sql.catalog.my_catalog.gluecatalog.lock.table=myGlueLockTable\n+```\n+\n+## Glue Catalog\n+\n+Iceberg enables the use of [AWS Glue](https://aws.amazon.com/glue) as the `Catalog` implementation.\n+When used, an Iceberg `Namespace` is stored as a [Glue Database](https://docs.aws.amazon.com/glue/latest/dg/aws-glue-api-catalog-databases.html), \n+an Iceberg `Table` is stored as a [Glue Table](https://docs.aws.amazon.com/glue/latest/dg/aws-glue-api-catalog-tables.html),\n+an Iceberg `Snapshot` is stored as a [Glue TableVersion](https://docs.aws.amazon.com/glue/latest/dg/aws-glue-api-catalog-tables.html#aws-glue-api-catalog-tables-TableVersion). \n+You can start using Glue catalog by specifying the `catalog-impl` as `org.apache.iceberg.aws.glue.GlueCatalog`. \n+More details about loading the catalog can be found in individual engine pages, such as [Spark](../spark/#loading-a-custom-catalog) and [Flink](../flink/#creating-catalogs-and-using-catalogs).\n+\n+### Glue Catalog ID\n+\n+It is very common for an organization to store all the tables in a single Glue catalog in a single AWS account and run data computation in many different accounts. \n+In this case, you need to specify a Glue catalog ID when initializing `GlueCatalog`.\n+The Glue catalog ID you should use is the AWS account ID.\n+This is because in each AWS account, there is a single Glue catalog in each AWS region,\n+but the region is pre-determined by the Glue web client that is making the call.\n+If you would like to access a Glue catalog in a different region, you should configure you AWS client, see more details in [AWS client configuration](#aws-client-configurations).\n+It is also common to [assume a role](https://docs.aws.amazon.com/STS/latest/APIReference/API_AssumeRole.html) when having cross-account access. See [AssumeRoleConfigurer](#assumeroleconfigurer) for how to set up assume role credentials in Iceberg.\n+\n+### Skip Archive\n+\n+By default, Glue will store all the table versions created and user can rollback a table to any historical version if needed.\n+However, if you are streaming data to Iceberg, this will easily create a lot of Glue table versions.\n+Therefore, it is recommended to turn off the archive feature in Glue by setting `` to false.\n+For more details, please read [Glue Quotas](https://docs.aws.amazon.com/general/latest/gr/glue.html) and the [UpdateTable API](https://docs.aws.amazon.com/glue/latest/webapi/API_UpdateTable.html).\n+\n+\n+### DynamoDB for locking Glue tables\n+\n+Glue does not have a strong guarantee over concurrent updates to a table. \n+Although it throws `ConcurrentModificationException` when detecting two processes updating a table at the same time,\n+there is no guarantee that one update would not clobber the other update.\n+Therefore, DynamoDB lock is enabled by default for Glue, so that for every commit, \n+`GlueCatalog` first obtains a lock using a helper DynamoDB table and then try to safely modify the Glue table.\n+User must specify a table name through catalog property `gluecatalog.lock.table` as the helper DynamoDB lock table to use.\n+It is recommend to use the same DynamoDB table for operations in the same Glue catalog,\n+and use a different table for a different Glue catalog in another account or region.\n+If the lock table with the given name does not exist in DynamoDB, a new table is created with billing mode set as [Pay-per-Request](https://aws.amazon.com/blogs/aws/amazon-dynamodb-on-demand-no-capacity-planning-and-pay-per-request-pricing).\n+The lock has the following additional properties:\n+\n+* `gluecatalog.lock.wait-ms`:  max time to wait for lock acquisition, default to 3 minutes\n+* `gluecatalog.lock.expire-ms`: max time a table can be locked by a process, default to 20 minutes\n+\n+If your use case only consists of single-process low-frequency (e.g. hourly, daily) updates to a table,\n+you can also turn off this locking feature by setting `gluecatalog.lock.enabled` as false.\n+\n+### Warehouse Location\n+\n+By default, Glue uses `S3FileIO` and only allows a warehouse location in S3. \n+To store data in a different local or cloud store, Glue catalog can switch to use `HadoopFileIO` \n+or any custom FileIO using the mechanism described in the [custom FileIO](../custom-catalog/#custom-file-io-implementation) section.\n+\n+## S3 FileIO", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2b3b8bc3d8aa06870ca26a5f68d3c59889fab45d"}, "originalPosition": 93}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU0NDczNTAw", "url": "https://github.com/apache/iceberg/pull/1891#pullrequestreview-554473500", "createdAt": "2020-12-17T10:33:41Z", "commit": {"oid": "2b3b8bc3d8aa06870ca26a5f68d3c59889fab45d"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 19, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QxMDozMzo0MVrOIHvE4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QxMDo0NzozNFrOIHvpFA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDk4MjI0Mg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Iceberg allows user to write data to S3 through `S3FileIO`.\n          \n          \n            \n            Iceberg allows users to write data to S3 through `S3FileIO`.", "url": "https://github.com/apache/iceberg/pull/1891#discussion_r544982242", "createdAt": "2020-12-17T10:33:41Z", "author": {"login": "massdosage"}, "path": "site/docs/aws.md", "diffHunk": "@@ -0,0 +1,212 @@\n+<!--\n+ - Licensed to the Apache Software Foundation (ASF) under one or more\n+ - contributor license agreements.  See the NOTICE file distributed with\n+ - this work for additional information regarding copyright ownership.\n+ - The ASF licenses this file to You under the Apache License, Version 2.0\n+ - (the \"License\"); you may not use this file except in compliance with\n+ - the License.  You may obtain a copy of the License at\n+ -\n+ -   http://www.apache.org/licenses/LICENSE-2.0\n+ -\n+ - Unless required by applicable law or agreed to in writing, software\n+ - distributed under the License is distributed on an \"AS IS\" BASIS,\n+ - WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ - See the License for the specific language governing permissions and\n+ - limitations under the License.\n+ -->\n+ \n+# Iceberg AWS Integrations\n+\n+Iceberg provides integration with different AWS services through the `iceberg-aws` module. \n+This section describes how to use Iceberg with AWS.\n+\n+## Runtime Packages\n+\n+The first thing to note is that the `iceberg-aws` module is not bundled with any engine runtime.\n+To use any features described in later sections, you need to include the following packages by yourself:\n+\n+* the [iceberg AWS package](https://mvnrepository.com/artifact/org.apache.iceberg/iceberg-aws)\n+* the [AWS SDK bundle](https://mvnrepository.com/artifact/software.amazon.awssdk/bundle), or individual AWS client packages if you would like to have a minimum dependency footprint. (please note that we use the new AWS v2 SDK instead of v1)\n+\n+For example, in Spark 3, you can start the SQL shell with:\n+\n+```sh\n+spark-sql --packages org.apache.iceberg:iceberg-spark3-runtime:0.11.0,org.apache.iceberg:iceberg-aws-runtime:0.11.0,software.amazon.awssdk:bundle:2.15.40 \\\n+    --conf spark.sql.catalog.my_catalog=org.apache.iceberg.spark.SparkCatalog \\\n+    --conf spark.sql.catalog.my_catalog.catalog-impl=org.apache.iceberg.aws.glue.GlueCatalog \\\n+    --conf spark.sql.catalog.my_catalog.warehouse=s3://my-bucket/my-key-prefix \\\n+    --conf spark.sql.catalog.my_catalog.gluecatalog.lock.table=myGlueLockTable\n+```\n+\n+## Glue Catalog\n+\n+Iceberg enables the use of [AWS Glue](https://aws.amazon.com/glue) as the `Catalog` implementation.\n+When used, an Iceberg `Namespace` is stored as a [Glue Database](https://docs.aws.amazon.com/glue/latest/dg/aws-glue-api-catalog-databases.html), \n+an Iceberg `Table` is stored as a [Glue Table](https://docs.aws.amazon.com/glue/latest/dg/aws-glue-api-catalog-tables.html),\n+an Iceberg `Snapshot` is stored as a [Glue TableVersion](https://docs.aws.amazon.com/glue/latest/dg/aws-glue-api-catalog-tables.html#aws-glue-api-catalog-tables-TableVersion). \n+You can start using Glue catalog by specifying the `catalog-impl` as `org.apache.iceberg.aws.glue.GlueCatalog`. \n+More details about loading the catalog can be found in individual engine pages, such as [Spark](../spark/#loading-a-custom-catalog) and [Flink](../flink/#creating-catalogs-and-using-catalogs).\n+\n+### Glue Catalog ID\n+\n+It is very common for an organization to store all the tables in a single Glue catalog in a single AWS account and run data computation in many different accounts. \n+In this case, you need to specify a Glue catalog ID when initializing `GlueCatalog`.\n+The Glue catalog ID you should use is the AWS account ID.\n+This is because in each AWS account, there is a single Glue catalog in each AWS region,\n+but the region is pre-determined by the Glue web client that is making the call.\n+If you would like to access a Glue catalog in a different region, you should configure you AWS client, see more details in [AWS client configuration](#aws-client-configurations).\n+It is also common to [assume a role](https://docs.aws.amazon.com/STS/latest/APIReference/API_AssumeRole.html) when having cross-account access. See [AssumeRoleConfigurer](#assumeroleconfigurer) for how to set up assume role credentials in Iceberg.\n+\n+### Skip Archive\n+\n+By default, Glue will store all the table versions created and user can rollback a table to any historical version if needed.\n+However, if you are streaming data to Iceberg, this will easily create a lot of Glue table versions.\n+Therefore, it is recommended to turn off the archive feature in Glue by setting `` to false.\n+For more details, please read [Glue Quotas](https://docs.aws.amazon.com/general/latest/gr/glue.html) and the [UpdateTable API](https://docs.aws.amazon.com/glue/latest/webapi/API_UpdateTable.html).\n+\n+\n+### DynamoDB for locking Glue tables\n+\n+Glue does not have a strong guarantee over concurrent updates to a table. \n+Although it throws `ConcurrentModificationException` when detecting two processes updating a table at the same time,\n+there is no guarantee that one update would not clobber the other update.\n+Therefore, DynamoDB lock is enabled by default for Glue, so that for every commit, \n+`GlueCatalog` first obtains a lock using a helper DynamoDB table and then try to safely modify the Glue table.\n+User must specify a table name through catalog property `gluecatalog.lock.table` as the helper DynamoDB lock table to use.\n+It is recommend to use the same DynamoDB table for operations in the same Glue catalog,\n+and use a different table for a different Glue catalog in another account or region.\n+If the lock table with the given name does not exist in DynamoDB, a new table is created with billing mode set as [Pay-per-Request](https://aws.amazon.com/blogs/aws/amazon-dynamodb-on-demand-no-capacity-planning-and-pay-per-request-pricing).\n+The lock has the following additional properties:\n+\n+* `gluecatalog.lock.wait-ms`:  max time to wait for lock acquisition, default to 3 minutes\n+* `gluecatalog.lock.expire-ms`: max time a table can be locked by a process, default to 20 minutes\n+\n+If your use case only consists of single-process low-frequency (e.g. hourly, daily) updates to a table,\n+you can also turn off this locking feature by setting `gluecatalog.lock.enabled` as false.\n+\n+### Warehouse Location\n+\n+By default, Glue uses `S3FileIO` and only allows a warehouse location in S3. \n+To store data in a different local or cloud store, Glue catalog can switch to use `HadoopFileIO` \n+or any custom FileIO using the mechanism described in the [custom FileIO](../custom-catalog/#custom-file-io-implementation) section.\n+\n+## S3 FileIO\n+\n+Iceberg allows user to write data to S3 through `S3FileIO`.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2b3b8bc3d8aa06870ca26a5f68d3c59889fab45d"}, "originalPosition": 95}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDk4MjU1Ng==", "bodyText": "Is there a default here? Or is there no default and setting this is required?", "url": "https://github.com/apache/iceberg/pull/1891#discussion_r544982556", "createdAt": "2020-12-17T10:34:14Z", "author": {"login": "massdosage"}, "path": "site/docs/aws.md", "diffHunk": "@@ -0,0 +1,212 @@\n+<!--\n+ - Licensed to the Apache Software Foundation (ASF) under one or more\n+ - contributor license agreements.  See the NOTICE file distributed with\n+ - this work for additional information regarding copyright ownership.\n+ - The ASF licenses this file to You under the Apache License, Version 2.0\n+ - (the \"License\"); you may not use this file except in compliance with\n+ - the License.  You may obtain a copy of the License at\n+ -\n+ -   http://www.apache.org/licenses/LICENSE-2.0\n+ -\n+ - Unless required by applicable law or agreed to in writing, software\n+ - distributed under the License is distributed on an \"AS IS\" BASIS,\n+ - WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ - See the License for the specific language governing permissions and\n+ - limitations under the License.\n+ -->\n+ \n+# Iceberg AWS Integrations\n+\n+Iceberg provides integration with different AWS services through the `iceberg-aws` module. \n+This section describes how to use Iceberg with AWS.\n+\n+## Runtime Packages\n+\n+The first thing to note is that the `iceberg-aws` module is not bundled with any engine runtime.\n+To use any features described in later sections, you need to include the following packages by yourself:\n+\n+* the [iceberg AWS package](https://mvnrepository.com/artifact/org.apache.iceberg/iceberg-aws)\n+* the [AWS SDK bundle](https://mvnrepository.com/artifact/software.amazon.awssdk/bundle), or individual AWS client packages if you would like to have a minimum dependency footprint. (please note that we use the new AWS v2 SDK instead of v1)\n+\n+For example, in Spark 3, you can start the SQL shell with:\n+\n+```sh\n+spark-sql --packages org.apache.iceberg:iceberg-spark3-runtime:0.11.0,org.apache.iceberg:iceberg-aws-runtime:0.11.0,software.amazon.awssdk:bundle:2.15.40 \\\n+    --conf spark.sql.catalog.my_catalog=org.apache.iceberg.spark.SparkCatalog \\\n+    --conf spark.sql.catalog.my_catalog.catalog-impl=org.apache.iceberg.aws.glue.GlueCatalog \\\n+    --conf spark.sql.catalog.my_catalog.warehouse=s3://my-bucket/my-key-prefix \\\n+    --conf spark.sql.catalog.my_catalog.gluecatalog.lock.table=myGlueLockTable\n+```\n+\n+## Glue Catalog\n+\n+Iceberg enables the use of [AWS Glue](https://aws.amazon.com/glue) as the `Catalog` implementation.\n+When used, an Iceberg `Namespace` is stored as a [Glue Database](https://docs.aws.amazon.com/glue/latest/dg/aws-glue-api-catalog-databases.html), \n+an Iceberg `Table` is stored as a [Glue Table](https://docs.aws.amazon.com/glue/latest/dg/aws-glue-api-catalog-tables.html),\n+an Iceberg `Snapshot` is stored as a [Glue TableVersion](https://docs.aws.amazon.com/glue/latest/dg/aws-glue-api-catalog-tables.html#aws-glue-api-catalog-tables-TableVersion). \n+You can start using Glue catalog by specifying the `catalog-impl` as `org.apache.iceberg.aws.glue.GlueCatalog`. \n+More details about loading the catalog can be found in individual engine pages, such as [Spark](../spark/#loading-a-custom-catalog) and [Flink](../flink/#creating-catalogs-and-using-catalogs).\n+\n+### Glue Catalog ID\n+\n+It is very common for an organization to store all the tables in a single Glue catalog in a single AWS account and run data computation in many different accounts. \n+In this case, you need to specify a Glue catalog ID when initializing `GlueCatalog`.\n+The Glue catalog ID you should use is the AWS account ID.\n+This is because in each AWS account, there is a single Glue catalog in each AWS region,\n+but the region is pre-determined by the Glue web client that is making the call.\n+If you would like to access a Glue catalog in a different region, you should configure you AWS client, see more details in [AWS client configuration](#aws-client-configurations).\n+It is also common to [assume a role](https://docs.aws.amazon.com/STS/latest/APIReference/API_AssumeRole.html) when having cross-account access. See [AssumeRoleConfigurer](#assumeroleconfigurer) for how to set up assume role credentials in Iceberg.\n+\n+### Skip Archive\n+\n+By default, Glue will store all the table versions created and user can rollback a table to any historical version if needed.\n+However, if you are streaming data to Iceberg, this will easily create a lot of Glue table versions.\n+Therefore, it is recommended to turn off the archive feature in Glue by setting `` to false.\n+For more details, please read [Glue Quotas](https://docs.aws.amazon.com/general/latest/gr/glue.html) and the [UpdateTable API](https://docs.aws.amazon.com/glue/latest/webapi/API_UpdateTable.html).\n+\n+\n+### DynamoDB for locking Glue tables\n+\n+Glue does not have a strong guarantee over concurrent updates to a table. \n+Although it throws `ConcurrentModificationException` when detecting two processes updating a table at the same time,\n+there is no guarantee that one update would not clobber the other update.\n+Therefore, DynamoDB lock is enabled by default for Glue, so that for every commit, \n+`GlueCatalog` first obtains a lock using a helper DynamoDB table and then try to safely modify the Glue table.\n+User must specify a table name through catalog property `gluecatalog.lock.table` as the helper DynamoDB lock table to use.\n+It is recommend to use the same DynamoDB table for operations in the same Glue catalog,\n+and use a different table for a different Glue catalog in another account or region.\n+If the lock table with the given name does not exist in DynamoDB, a new table is created with billing mode set as [Pay-per-Request](https://aws.amazon.com/blogs/aws/amazon-dynamodb-on-demand-no-capacity-planning-and-pay-per-request-pricing).\n+The lock has the following additional properties:\n+\n+* `gluecatalog.lock.wait-ms`:  max time to wait for lock acquisition, default to 3 minutes\n+* `gluecatalog.lock.expire-ms`: max time a table can be locked by a process, default to 20 minutes\n+\n+If your use case only consists of single-process low-frequency (e.g. hourly, daily) updates to a table,\n+you can also turn off this locking feature by setting `gluecatalog.lock.enabled` as false.\n+\n+### Warehouse Location\n+\n+By default, Glue uses `S3FileIO` and only allows a warehouse location in S3. \n+To store data in a different local or cloud store, Glue catalog can switch to use `HadoopFileIO` \n+or any custom FileIO using the mechanism described in the [custom FileIO](../custom-catalog/#custom-file-io-implementation) section.\n+\n+## S3 FileIO\n+\n+Iceberg allows user to write data to S3 through `S3FileIO`.\n+`GlueCatalog` by default uses this FileIO, and other catalogs can load this FileIO using the `io-impl` catalog property.\n+\n+### Progressive Multipart Upload\n+\n+`S3FileIO` implements a customized progressive multipart upload algorithm to upload data.\n+Data files are uploaded in parts in parallel as soon as each part is ready,\n+and each file part is deleted as soon as its upload process completes.\n+This provides maximized upload speed and minimized local disk usage during uploads.\n+Here are the configurations user can tune related to this feature:\n+\n+* `s3fileio.multipart.num-threads`: number of threads to use for uploading parts to S3 (shared pool across all output streams)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2b3b8bc3d8aa06870ca26a5f68d3c59889fab45d"}, "originalPosition": 106}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDk4MjgzMA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            * `s3fileio.multipart.part.size`: the size of a single part for multipart upload requests, default to 32MB\n          \n          \n            \n            * `s3fileio.multipart.part.size`: the size of a single part for multipart upload requests, defaults to 32MB\n          \n      \n    \n    \n  \n\nor\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            * `s3fileio.multipart.part.size`: the size of a single part for multipart upload requests, default to 32MB\n          \n          \n            \n            * `s3fileio.multipart.part.size`: the size of a single part for multipart upload requests, default is 32MB", "url": "https://github.com/apache/iceberg/pull/1891#discussion_r544982830", "createdAt": "2020-12-17T10:34:38Z", "author": {"login": "massdosage"}, "path": "site/docs/aws.md", "diffHunk": "@@ -0,0 +1,212 @@\n+<!--\n+ - Licensed to the Apache Software Foundation (ASF) under one or more\n+ - contributor license agreements.  See the NOTICE file distributed with\n+ - this work for additional information regarding copyright ownership.\n+ - The ASF licenses this file to You under the Apache License, Version 2.0\n+ - (the \"License\"); you may not use this file except in compliance with\n+ - the License.  You may obtain a copy of the License at\n+ -\n+ -   http://www.apache.org/licenses/LICENSE-2.0\n+ -\n+ - Unless required by applicable law or agreed to in writing, software\n+ - distributed under the License is distributed on an \"AS IS\" BASIS,\n+ - WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ - See the License for the specific language governing permissions and\n+ - limitations under the License.\n+ -->\n+ \n+# Iceberg AWS Integrations\n+\n+Iceberg provides integration with different AWS services through the `iceberg-aws` module. \n+This section describes how to use Iceberg with AWS.\n+\n+## Runtime Packages\n+\n+The first thing to note is that the `iceberg-aws` module is not bundled with any engine runtime.\n+To use any features described in later sections, you need to include the following packages by yourself:\n+\n+* the [iceberg AWS package](https://mvnrepository.com/artifact/org.apache.iceberg/iceberg-aws)\n+* the [AWS SDK bundle](https://mvnrepository.com/artifact/software.amazon.awssdk/bundle), or individual AWS client packages if you would like to have a minimum dependency footprint. (please note that we use the new AWS v2 SDK instead of v1)\n+\n+For example, in Spark 3, you can start the SQL shell with:\n+\n+```sh\n+spark-sql --packages org.apache.iceberg:iceberg-spark3-runtime:0.11.0,org.apache.iceberg:iceberg-aws-runtime:0.11.0,software.amazon.awssdk:bundle:2.15.40 \\\n+    --conf spark.sql.catalog.my_catalog=org.apache.iceberg.spark.SparkCatalog \\\n+    --conf spark.sql.catalog.my_catalog.catalog-impl=org.apache.iceberg.aws.glue.GlueCatalog \\\n+    --conf spark.sql.catalog.my_catalog.warehouse=s3://my-bucket/my-key-prefix \\\n+    --conf spark.sql.catalog.my_catalog.gluecatalog.lock.table=myGlueLockTable\n+```\n+\n+## Glue Catalog\n+\n+Iceberg enables the use of [AWS Glue](https://aws.amazon.com/glue) as the `Catalog` implementation.\n+When used, an Iceberg `Namespace` is stored as a [Glue Database](https://docs.aws.amazon.com/glue/latest/dg/aws-glue-api-catalog-databases.html), \n+an Iceberg `Table` is stored as a [Glue Table](https://docs.aws.amazon.com/glue/latest/dg/aws-glue-api-catalog-tables.html),\n+an Iceberg `Snapshot` is stored as a [Glue TableVersion](https://docs.aws.amazon.com/glue/latest/dg/aws-glue-api-catalog-tables.html#aws-glue-api-catalog-tables-TableVersion). \n+You can start using Glue catalog by specifying the `catalog-impl` as `org.apache.iceberg.aws.glue.GlueCatalog`. \n+More details about loading the catalog can be found in individual engine pages, such as [Spark](../spark/#loading-a-custom-catalog) and [Flink](../flink/#creating-catalogs-and-using-catalogs).\n+\n+### Glue Catalog ID\n+\n+It is very common for an organization to store all the tables in a single Glue catalog in a single AWS account and run data computation in many different accounts. \n+In this case, you need to specify a Glue catalog ID when initializing `GlueCatalog`.\n+The Glue catalog ID you should use is the AWS account ID.\n+This is because in each AWS account, there is a single Glue catalog in each AWS region,\n+but the region is pre-determined by the Glue web client that is making the call.\n+If you would like to access a Glue catalog in a different region, you should configure you AWS client, see more details in [AWS client configuration](#aws-client-configurations).\n+It is also common to [assume a role](https://docs.aws.amazon.com/STS/latest/APIReference/API_AssumeRole.html) when having cross-account access. See [AssumeRoleConfigurer](#assumeroleconfigurer) for how to set up assume role credentials in Iceberg.\n+\n+### Skip Archive\n+\n+By default, Glue will store all the table versions created and user can rollback a table to any historical version if needed.\n+However, if you are streaming data to Iceberg, this will easily create a lot of Glue table versions.\n+Therefore, it is recommended to turn off the archive feature in Glue by setting `` to false.\n+For more details, please read [Glue Quotas](https://docs.aws.amazon.com/general/latest/gr/glue.html) and the [UpdateTable API](https://docs.aws.amazon.com/glue/latest/webapi/API_UpdateTable.html).\n+\n+\n+### DynamoDB for locking Glue tables\n+\n+Glue does not have a strong guarantee over concurrent updates to a table. \n+Although it throws `ConcurrentModificationException` when detecting two processes updating a table at the same time,\n+there is no guarantee that one update would not clobber the other update.\n+Therefore, DynamoDB lock is enabled by default for Glue, so that for every commit, \n+`GlueCatalog` first obtains a lock using a helper DynamoDB table and then try to safely modify the Glue table.\n+User must specify a table name through catalog property `gluecatalog.lock.table` as the helper DynamoDB lock table to use.\n+It is recommend to use the same DynamoDB table for operations in the same Glue catalog,\n+and use a different table for a different Glue catalog in another account or region.\n+If the lock table with the given name does not exist in DynamoDB, a new table is created with billing mode set as [Pay-per-Request](https://aws.amazon.com/blogs/aws/amazon-dynamodb-on-demand-no-capacity-planning-and-pay-per-request-pricing).\n+The lock has the following additional properties:\n+\n+* `gluecatalog.lock.wait-ms`:  max time to wait for lock acquisition, default to 3 minutes\n+* `gluecatalog.lock.expire-ms`: max time a table can be locked by a process, default to 20 minutes\n+\n+If your use case only consists of single-process low-frequency (e.g. hourly, daily) updates to a table,\n+you can also turn off this locking feature by setting `gluecatalog.lock.enabled` as false.\n+\n+### Warehouse Location\n+\n+By default, Glue uses `S3FileIO` and only allows a warehouse location in S3. \n+To store data in a different local or cloud store, Glue catalog can switch to use `HadoopFileIO` \n+or any custom FileIO using the mechanism described in the [custom FileIO](../custom-catalog/#custom-file-io-implementation) section.\n+\n+## S3 FileIO\n+\n+Iceberg allows user to write data to S3 through `S3FileIO`.\n+`GlueCatalog` by default uses this FileIO, and other catalogs can load this FileIO using the `io-impl` catalog property.\n+\n+### Progressive Multipart Upload\n+\n+`S3FileIO` implements a customized progressive multipart upload algorithm to upload data.\n+Data files are uploaded in parts in parallel as soon as each part is ready,\n+and each file part is deleted as soon as its upload process completes.\n+This provides maximized upload speed and minimized local disk usage during uploads.\n+Here are the configurations user can tune related to this feature:\n+\n+* `s3fileio.multipart.num-threads`: number of threads to use for uploading parts to S3 (shared pool across all output streams)\n+* `s3fileio.multipart.part.size`: the size of a single part for multipart upload requests, default to 32MB", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2b3b8bc3d8aa06870ca26a5f68d3c59889fab45d"}, "originalPosition": 107}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDk4MzI0OA==", "bodyText": "as above defaults to or default is", "url": "https://github.com/apache/iceberg/pull/1891#discussion_r544983248", "createdAt": "2020-12-17T10:35:13Z", "author": {"login": "massdosage"}, "path": "site/docs/aws.md", "diffHunk": "@@ -0,0 +1,212 @@\n+<!--\n+ - Licensed to the Apache Software Foundation (ASF) under one or more\n+ - contributor license agreements.  See the NOTICE file distributed with\n+ - this work for additional information regarding copyright ownership.\n+ - The ASF licenses this file to You under the Apache License, Version 2.0\n+ - (the \"License\"); you may not use this file except in compliance with\n+ - the License.  You may obtain a copy of the License at\n+ -\n+ -   http://www.apache.org/licenses/LICENSE-2.0\n+ -\n+ - Unless required by applicable law or agreed to in writing, software\n+ - distributed under the License is distributed on an \"AS IS\" BASIS,\n+ - WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ - See the License for the specific language governing permissions and\n+ - limitations under the License.\n+ -->\n+ \n+# Iceberg AWS Integrations\n+\n+Iceberg provides integration with different AWS services through the `iceberg-aws` module. \n+This section describes how to use Iceberg with AWS.\n+\n+## Runtime Packages\n+\n+The first thing to note is that the `iceberg-aws` module is not bundled with any engine runtime.\n+To use any features described in later sections, you need to include the following packages by yourself:\n+\n+* the [iceberg AWS package](https://mvnrepository.com/artifact/org.apache.iceberg/iceberg-aws)\n+* the [AWS SDK bundle](https://mvnrepository.com/artifact/software.amazon.awssdk/bundle), or individual AWS client packages if you would like to have a minimum dependency footprint. (please note that we use the new AWS v2 SDK instead of v1)\n+\n+For example, in Spark 3, you can start the SQL shell with:\n+\n+```sh\n+spark-sql --packages org.apache.iceberg:iceberg-spark3-runtime:0.11.0,org.apache.iceberg:iceberg-aws-runtime:0.11.0,software.amazon.awssdk:bundle:2.15.40 \\\n+    --conf spark.sql.catalog.my_catalog=org.apache.iceberg.spark.SparkCatalog \\\n+    --conf spark.sql.catalog.my_catalog.catalog-impl=org.apache.iceberg.aws.glue.GlueCatalog \\\n+    --conf spark.sql.catalog.my_catalog.warehouse=s3://my-bucket/my-key-prefix \\\n+    --conf spark.sql.catalog.my_catalog.gluecatalog.lock.table=myGlueLockTable\n+```\n+\n+## Glue Catalog\n+\n+Iceberg enables the use of [AWS Glue](https://aws.amazon.com/glue) as the `Catalog` implementation.\n+When used, an Iceberg `Namespace` is stored as a [Glue Database](https://docs.aws.amazon.com/glue/latest/dg/aws-glue-api-catalog-databases.html), \n+an Iceberg `Table` is stored as a [Glue Table](https://docs.aws.amazon.com/glue/latest/dg/aws-glue-api-catalog-tables.html),\n+an Iceberg `Snapshot` is stored as a [Glue TableVersion](https://docs.aws.amazon.com/glue/latest/dg/aws-glue-api-catalog-tables.html#aws-glue-api-catalog-tables-TableVersion). \n+You can start using Glue catalog by specifying the `catalog-impl` as `org.apache.iceberg.aws.glue.GlueCatalog`. \n+More details about loading the catalog can be found in individual engine pages, such as [Spark](../spark/#loading-a-custom-catalog) and [Flink](../flink/#creating-catalogs-and-using-catalogs).\n+\n+### Glue Catalog ID\n+\n+It is very common for an organization to store all the tables in a single Glue catalog in a single AWS account and run data computation in many different accounts. \n+In this case, you need to specify a Glue catalog ID when initializing `GlueCatalog`.\n+The Glue catalog ID you should use is the AWS account ID.\n+This is because in each AWS account, there is a single Glue catalog in each AWS region,\n+but the region is pre-determined by the Glue web client that is making the call.\n+If you would like to access a Glue catalog in a different region, you should configure you AWS client, see more details in [AWS client configuration](#aws-client-configurations).\n+It is also common to [assume a role](https://docs.aws.amazon.com/STS/latest/APIReference/API_AssumeRole.html) when having cross-account access. See [AssumeRoleConfigurer](#assumeroleconfigurer) for how to set up assume role credentials in Iceberg.\n+\n+### Skip Archive\n+\n+By default, Glue will store all the table versions created and user can rollback a table to any historical version if needed.\n+However, if you are streaming data to Iceberg, this will easily create a lot of Glue table versions.\n+Therefore, it is recommended to turn off the archive feature in Glue by setting `` to false.\n+For more details, please read [Glue Quotas](https://docs.aws.amazon.com/general/latest/gr/glue.html) and the [UpdateTable API](https://docs.aws.amazon.com/glue/latest/webapi/API_UpdateTable.html).\n+\n+\n+### DynamoDB for locking Glue tables\n+\n+Glue does not have a strong guarantee over concurrent updates to a table. \n+Although it throws `ConcurrentModificationException` when detecting two processes updating a table at the same time,\n+there is no guarantee that one update would not clobber the other update.\n+Therefore, DynamoDB lock is enabled by default for Glue, so that for every commit, \n+`GlueCatalog` first obtains a lock using a helper DynamoDB table and then try to safely modify the Glue table.\n+User must specify a table name through catalog property `gluecatalog.lock.table` as the helper DynamoDB lock table to use.\n+It is recommend to use the same DynamoDB table for operations in the same Glue catalog,\n+and use a different table for a different Glue catalog in another account or region.\n+If the lock table with the given name does not exist in DynamoDB, a new table is created with billing mode set as [Pay-per-Request](https://aws.amazon.com/blogs/aws/amazon-dynamodb-on-demand-no-capacity-planning-and-pay-per-request-pricing).\n+The lock has the following additional properties:\n+\n+* `gluecatalog.lock.wait-ms`:  max time to wait for lock acquisition, default to 3 minutes\n+* `gluecatalog.lock.expire-ms`: max time a table can be locked by a process, default to 20 minutes\n+\n+If your use case only consists of single-process low-frequency (e.g. hourly, daily) updates to a table,\n+you can also turn off this locking feature by setting `gluecatalog.lock.enabled` as false.\n+\n+### Warehouse Location\n+\n+By default, Glue uses `S3FileIO` and only allows a warehouse location in S3. \n+To store data in a different local or cloud store, Glue catalog can switch to use `HadoopFileIO` \n+or any custom FileIO using the mechanism described in the [custom FileIO](../custom-catalog/#custom-file-io-implementation) section.\n+\n+## S3 FileIO\n+\n+Iceberg allows user to write data to S3 through `S3FileIO`.\n+`GlueCatalog` by default uses this FileIO, and other catalogs can load this FileIO using the `io-impl` catalog property.\n+\n+### Progressive Multipart Upload\n+\n+`S3FileIO` implements a customized progressive multipart upload algorithm to upload data.\n+Data files are uploaded in parts in parallel as soon as each part is ready,\n+and each file part is deleted as soon as its upload process completes.\n+This provides maximized upload speed and minimized local disk usage during uploads.\n+Here are the configurations user can tune related to this feature:\n+\n+* `s3fileio.multipart.num-threads`: number of threads to use for uploading parts to S3 (shared pool across all output streams)\n+* `s3fileio.multipart.part.size`: the size of a single part for multipart upload requests, default to 32MB\n+* `s3fileio.multipart.threshold`: the threshold expressed as a factor times the multipart size at which to switch from uploading using a single put object request to uploading using multipart upload, default to 1.5", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2b3b8bc3d8aa06870ca26a5f68d3c59889fab45d"}, "originalPosition": 108}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDk4MzM5Mw==", "bodyText": "as above to/is", "url": "https://github.com/apache/iceberg/pull/1891#discussion_r544983393", "createdAt": "2020-12-17T10:35:24Z", "author": {"login": "massdosage"}, "path": "site/docs/aws.md", "diffHunk": "@@ -0,0 +1,212 @@\n+<!--\n+ - Licensed to the Apache Software Foundation (ASF) under one or more\n+ - contributor license agreements.  See the NOTICE file distributed with\n+ - this work for additional information regarding copyright ownership.\n+ - The ASF licenses this file to You under the Apache License, Version 2.0\n+ - (the \"License\"); you may not use this file except in compliance with\n+ - the License.  You may obtain a copy of the License at\n+ -\n+ -   http://www.apache.org/licenses/LICENSE-2.0\n+ -\n+ - Unless required by applicable law or agreed to in writing, software\n+ - distributed under the License is distributed on an \"AS IS\" BASIS,\n+ - WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ - See the License for the specific language governing permissions and\n+ - limitations under the License.\n+ -->\n+ \n+# Iceberg AWS Integrations\n+\n+Iceberg provides integration with different AWS services through the `iceberg-aws` module. \n+This section describes how to use Iceberg with AWS.\n+\n+## Runtime Packages\n+\n+The first thing to note is that the `iceberg-aws` module is not bundled with any engine runtime.\n+To use any features described in later sections, you need to include the following packages by yourself:\n+\n+* the [iceberg AWS package](https://mvnrepository.com/artifact/org.apache.iceberg/iceberg-aws)\n+* the [AWS SDK bundle](https://mvnrepository.com/artifact/software.amazon.awssdk/bundle), or individual AWS client packages if you would like to have a minimum dependency footprint. (please note that we use the new AWS v2 SDK instead of v1)\n+\n+For example, in Spark 3, you can start the SQL shell with:\n+\n+```sh\n+spark-sql --packages org.apache.iceberg:iceberg-spark3-runtime:0.11.0,org.apache.iceberg:iceberg-aws-runtime:0.11.0,software.amazon.awssdk:bundle:2.15.40 \\\n+    --conf spark.sql.catalog.my_catalog=org.apache.iceberg.spark.SparkCatalog \\\n+    --conf spark.sql.catalog.my_catalog.catalog-impl=org.apache.iceberg.aws.glue.GlueCatalog \\\n+    --conf spark.sql.catalog.my_catalog.warehouse=s3://my-bucket/my-key-prefix \\\n+    --conf spark.sql.catalog.my_catalog.gluecatalog.lock.table=myGlueLockTable\n+```\n+\n+## Glue Catalog\n+\n+Iceberg enables the use of [AWS Glue](https://aws.amazon.com/glue) as the `Catalog` implementation.\n+When used, an Iceberg `Namespace` is stored as a [Glue Database](https://docs.aws.amazon.com/glue/latest/dg/aws-glue-api-catalog-databases.html), \n+an Iceberg `Table` is stored as a [Glue Table](https://docs.aws.amazon.com/glue/latest/dg/aws-glue-api-catalog-tables.html),\n+an Iceberg `Snapshot` is stored as a [Glue TableVersion](https://docs.aws.amazon.com/glue/latest/dg/aws-glue-api-catalog-tables.html#aws-glue-api-catalog-tables-TableVersion). \n+You can start using Glue catalog by specifying the `catalog-impl` as `org.apache.iceberg.aws.glue.GlueCatalog`. \n+More details about loading the catalog can be found in individual engine pages, such as [Spark](../spark/#loading-a-custom-catalog) and [Flink](../flink/#creating-catalogs-and-using-catalogs).\n+\n+### Glue Catalog ID\n+\n+It is very common for an organization to store all the tables in a single Glue catalog in a single AWS account and run data computation in many different accounts. \n+In this case, you need to specify a Glue catalog ID when initializing `GlueCatalog`.\n+The Glue catalog ID you should use is the AWS account ID.\n+This is because in each AWS account, there is a single Glue catalog in each AWS region,\n+but the region is pre-determined by the Glue web client that is making the call.\n+If you would like to access a Glue catalog in a different region, you should configure you AWS client, see more details in [AWS client configuration](#aws-client-configurations).\n+It is also common to [assume a role](https://docs.aws.amazon.com/STS/latest/APIReference/API_AssumeRole.html) when having cross-account access. See [AssumeRoleConfigurer](#assumeroleconfigurer) for how to set up assume role credentials in Iceberg.\n+\n+### Skip Archive\n+\n+By default, Glue will store all the table versions created and user can rollback a table to any historical version if needed.\n+However, if you are streaming data to Iceberg, this will easily create a lot of Glue table versions.\n+Therefore, it is recommended to turn off the archive feature in Glue by setting `` to false.\n+For more details, please read [Glue Quotas](https://docs.aws.amazon.com/general/latest/gr/glue.html) and the [UpdateTable API](https://docs.aws.amazon.com/glue/latest/webapi/API_UpdateTable.html).\n+\n+\n+### DynamoDB for locking Glue tables\n+\n+Glue does not have a strong guarantee over concurrent updates to a table. \n+Although it throws `ConcurrentModificationException` when detecting two processes updating a table at the same time,\n+there is no guarantee that one update would not clobber the other update.\n+Therefore, DynamoDB lock is enabled by default for Glue, so that for every commit, \n+`GlueCatalog` first obtains a lock using a helper DynamoDB table and then try to safely modify the Glue table.\n+User must specify a table name through catalog property `gluecatalog.lock.table` as the helper DynamoDB lock table to use.\n+It is recommend to use the same DynamoDB table for operations in the same Glue catalog,\n+and use a different table for a different Glue catalog in another account or region.\n+If the lock table with the given name does not exist in DynamoDB, a new table is created with billing mode set as [Pay-per-Request](https://aws.amazon.com/blogs/aws/amazon-dynamodb-on-demand-no-capacity-planning-and-pay-per-request-pricing).\n+The lock has the following additional properties:\n+\n+* `gluecatalog.lock.wait-ms`:  max time to wait for lock acquisition, default to 3 minutes\n+* `gluecatalog.lock.expire-ms`: max time a table can be locked by a process, default to 20 minutes\n+\n+If your use case only consists of single-process low-frequency (e.g. hourly, daily) updates to a table,\n+you can also turn off this locking feature by setting `gluecatalog.lock.enabled` as false.\n+\n+### Warehouse Location\n+\n+By default, Glue uses `S3FileIO` and only allows a warehouse location in S3. \n+To store data in a different local or cloud store, Glue catalog can switch to use `HadoopFileIO` \n+or any custom FileIO using the mechanism described in the [custom FileIO](../custom-catalog/#custom-file-io-implementation) section.\n+\n+## S3 FileIO\n+\n+Iceberg allows user to write data to S3 through `S3FileIO`.\n+`GlueCatalog` by default uses this FileIO, and other catalogs can load this FileIO using the `io-impl` catalog property.\n+\n+### Progressive Multipart Upload\n+\n+`S3FileIO` implements a customized progressive multipart upload algorithm to upload data.\n+Data files are uploaded in parts in parallel as soon as each part is ready,\n+and each file part is deleted as soon as its upload process completes.\n+This provides maximized upload speed and minimized local disk usage during uploads.\n+Here are the configurations user can tune related to this feature:\n+\n+* `s3fileio.multipart.num-threads`: number of threads to use for uploading parts to S3 (shared pool across all output streams)\n+* `s3fileio.multipart.part.size`: the size of a single part for multipart upload requests, default to 32MB\n+* `s3fileio.multipart.threshold`: the threshold expressed as a factor times the multipart size at which to switch from uploading using a single put object request to uploading using multipart upload, default to 1.5\n+* `s3fileio.staging.dir`: the directory to hold temporary files, default to Java's `java.io.tmpdir` property value", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2b3b8bc3d8aa06870ca26a5f68d3c59889fab45d"}, "originalPosition": 109}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDk4NDEyMg==", "bodyText": "As above for defaults.", "url": "https://github.com/apache/iceberg/pull/1891#discussion_r544984122", "createdAt": "2020-12-17T10:36:33Z", "author": {"login": "massdosage"}, "path": "site/docs/aws.md", "diffHunk": "@@ -0,0 +1,212 @@\n+<!--\n+ - Licensed to the Apache Software Foundation (ASF) under one or more\n+ - contributor license agreements.  See the NOTICE file distributed with\n+ - this work for additional information regarding copyright ownership.\n+ - The ASF licenses this file to You under the Apache License, Version 2.0\n+ - (the \"License\"); you may not use this file except in compliance with\n+ - the License.  You may obtain a copy of the License at\n+ -\n+ -   http://www.apache.org/licenses/LICENSE-2.0\n+ -\n+ - Unless required by applicable law or agreed to in writing, software\n+ - distributed under the License is distributed on an \"AS IS\" BASIS,\n+ - WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ - See the License for the specific language governing permissions and\n+ - limitations under the License.\n+ -->\n+ \n+# Iceberg AWS Integrations\n+\n+Iceberg provides integration with different AWS services through the `iceberg-aws` module. \n+This section describes how to use Iceberg with AWS.\n+\n+## Runtime Packages\n+\n+The first thing to note is that the `iceberg-aws` module is not bundled with any engine runtime.\n+To use any features described in later sections, you need to include the following packages by yourself:\n+\n+* the [iceberg AWS package](https://mvnrepository.com/artifact/org.apache.iceberg/iceberg-aws)\n+* the [AWS SDK bundle](https://mvnrepository.com/artifact/software.amazon.awssdk/bundle), or individual AWS client packages if you would like to have a minimum dependency footprint. (please note that we use the new AWS v2 SDK instead of v1)\n+\n+For example, in Spark 3, you can start the SQL shell with:\n+\n+```sh\n+spark-sql --packages org.apache.iceberg:iceberg-spark3-runtime:0.11.0,org.apache.iceberg:iceberg-aws-runtime:0.11.0,software.amazon.awssdk:bundle:2.15.40 \\\n+    --conf spark.sql.catalog.my_catalog=org.apache.iceberg.spark.SparkCatalog \\\n+    --conf spark.sql.catalog.my_catalog.catalog-impl=org.apache.iceberg.aws.glue.GlueCatalog \\\n+    --conf spark.sql.catalog.my_catalog.warehouse=s3://my-bucket/my-key-prefix \\\n+    --conf spark.sql.catalog.my_catalog.gluecatalog.lock.table=myGlueLockTable\n+```\n+\n+## Glue Catalog\n+\n+Iceberg enables the use of [AWS Glue](https://aws.amazon.com/glue) as the `Catalog` implementation.\n+When used, an Iceberg `Namespace` is stored as a [Glue Database](https://docs.aws.amazon.com/glue/latest/dg/aws-glue-api-catalog-databases.html), \n+an Iceberg `Table` is stored as a [Glue Table](https://docs.aws.amazon.com/glue/latest/dg/aws-glue-api-catalog-tables.html),\n+an Iceberg `Snapshot` is stored as a [Glue TableVersion](https://docs.aws.amazon.com/glue/latest/dg/aws-glue-api-catalog-tables.html#aws-glue-api-catalog-tables-TableVersion). \n+You can start using Glue catalog by specifying the `catalog-impl` as `org.apache.iceberg.aws.glue.GlueCatalog`. \n+More details about loading the catalog can be found in individual engine pages, such as [Spark](../spark/#loading-a-custom-catalog) and [Flink](../flink/#creating-catalogs-and-using-catalogs).\n+\n+### Glue Catalog ID\n+\n+It is very common for an organization to store all the tables in a single Glue catalog in a single AWS account and run data computation in many different accounts. \n+In this case, you need to specify a Glue catalog ID when initializing `GlueCatalog`.\n+The Glue catalog ID you should use is the AWS account ID.\n+This is because in each AWS account, there is a single Glue catalog in each AWS region,\n+but the region is pre-determined by the Glue web client that is making the call.\n+If you would like to access a Glue catalog in a different region, you should configure you AWS client, see more details in [AWS client configuration](#aws-client-configurations).\n+It is also common to [assume a role](https://docs.aws.amazon.com/STS/latest/APIReference/API_AssumeRole.html) when having cross-account access. See [AssumeRoleConfigurer](#assumeroleconfigurer) for how to set up assume role credentials in Iceberg.\n+\n+### Skip Archive\n+\n+By default, Glue will store all the table versions created and user can rollback a table to any historical version if needed.\n+However, if you are streaming data to Iceberg, this will easily create a lot of Glue table versions.\n+Therefore, it is recommended to turn off the archive feature in Glue by setting `` to false.\n+For more details, please read [Glue Quotas](https://docs.aws.amazon.com/general/latest/gr/glue.html) and the [UpdateTable API](https://docs.aws.amazon.com/glue/latest/webapi/API_UpdateTable.html).\n+\n+\n+### DynamoDB for locking Glue tables\n+\n+Glue does not have a strong guarantee over concurrent updates to a table. \n+Although it throws `ConcurrentModificationException` when detecting two processes updating a table at the same time,\n+there is no guarantee that one update would not clobber the other update.\n+Therefore, DynamoDB lock is enabled by default for Glue, so that for every commit, \n+`GlueCatalog` first obtains a lock using a helper DynamoDB table and then try to safely modify the Glue table.\n+User must specify a table name through catalog property `gluecatalog.lock.table` as the helper DynamoDB lock table to use.\n+It is recommend to use the same DynamoDB table for operations in the same Glue catalog,\n+and use a different table for a different Glue catalog in another account or region.\n+If the lock table with the given name does not exist in DynamoDB, a new table is created with billing mode set as [Pay-per-Request](https://aws.amazon.com/blogs/aws/amazon-dynamodb-on-demand-no-capacity-planning-and-pay-per-request-pricing).\n+The lock has the following additional properties:\n+\n+* `gluecatalog.lock.wait-ms`:  max time to wait for lock acquisition, default to 3 minutes\n+* `gluecatalog.lock.expire-ms`: max time a table can be locked by a process, default to 20 minutes\n+\n+If your use case only consists of single-process low-frequency (e.g. hourly, daily) updates to a table,\n+you can also turn off this locking feature by setting `gluecatalog.lock.enabled` as false.\n+\n+### Warehouse Location\n+\n+By default, Glue uses `S3FileIO` and only allows a warehouse location in S3. \n+To store data in a different local or cloud store, Glue catalog can switch to use `HadoopFileIO` \n+or any custom FileIO using the mechanism described in the [custom FileIO](../custom-catalog/#custom-file-io-implementation) section.\n+\n+## S3 FileIO\n+\n+Iceberg allows user to write data to S3 through `S3FileIO`.\n+`GlueCatalog` by default uses this FileIO, and other catalogs can load this FileIO using the `io-impl` catalog property.\n+\n+### Progressive Multipart Upload\n+\n+`S3FileIO` implements a customized progressive multipart upload algorithm to upload data.\n+Data files are uploaded in parts in parallel as soon as each part is ready,\n+and each file part is deleted as soon as its upload process completes.\n+This provides maximized upload speed and minimized local disk usage during uploads.\n+Here are the configurations user can tune related to this feature:\n+\n+* `s3fileio.multipart.num-threads`: number of threads to use for uploading parts to S3 (shared pool across all output streams)\n+* `s3fileio.multipart.part.size`: the size of a single part for multipart upload requests, default to 32MB\n+* `s3fileio.multipart.threshold`: the threshold expressed as a factor times the multipart size at which to switch from uploading using a single put object request to uploading using multipart upload, default to 1.5\n+* `s3fileio.staging.dir`: the directory to hold temporary files, default to Java's `java.io.tmpdir` property value\n+\n+### S3 Server Side Encryption\n+\n+`S3FileIO` supports all 3 S3 server side encryption modes:\n+\n+* [SSE-S3](https://docs.aws.amazon.com/AmazonS3/latest/dev/UsingServerSideEncryption.html): When you use Server-Side Encryption with Amazon S3-Managed Keys (SSE-S3), each object is encrypted with a unique key. As an additional safeguard, it encrypts the key itself with a master key that it regularly rotates. Amazon S3 server-side encryption uses one of the strongest block ciphers available, 256-bit Advanced Encryption Standard (AES-256), to encrypt your data.\n+* [SSE-KMS](https://docs.aws.amazon.com/AmazonS3/latest/dev/UsingKMSEncryption.html): Server-Side Encryption with Customer Master Keys (CMKs) Stored in AWS Key Management Service (SSE-KMS) is similar to SSE-S3, but with some additional benefits and charges for using this service. There are separate permissions for the use of a CMK that provides added protection against unauthorized access of your objects in Amazon S3. SSE-KMS also provides you with an audit trail that shows when your CMK was used and by whom. Additionally, you can create and manage customer managed CMKs or use AWS managed CMKs that are unique to you, your service, and your Region.\n+* [SSE-C](https://docs.aws.amazon.com/AmazonS3/latest/dev/ServerSideEncryptionCustomerKeys.html): With Server-Side Encryption with Customer-Provided Keys (SSE-C), you manage the encryption keys and Amazon S3 manages the encryption, as it writes to disks, and decryption, when you access your objects.\n+\n+To enable server side encryption, use the following configuration properties:\n+\n+* `s3fileio.sse.type`: `none`, `s3`, `kms` or `custom`, default to `none`", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2b3b8bc3d8aa06870ca26a5f68d3c59889fab45d"}, "originalPosition": 121}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDk4NDc2MA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Iceberg by default uses the Hive storage layout, but can be switch to use a different `ObjectStoreLocationProvider`.\n          \n          \n            \n            Iceberg by default uses the Hive storage layout, but can be configured to use a different `ObjectStoreLocationProvider`.", "url": "https://github.com/apache/iceberg/pull/1891#discussion_r544984760", "createdAt": "2020-12-17T10:37:32Z", "author": {"login": "massdosage"}, "path": "site/docs/aws.md", "diffHunk": "@@ -0,0 +1,212 @@\n+<!--\n+ - Licensed to the Apache Software Foundation (ASF) under one or more\n+ - contributor license agreements.  See the NOTICE file distributed with\n+ - this work for additional information regarding copyright ownership.\n+ - The ASF licenses this file to You under the Apache License, Version 2.0\n+ - (the \"License\"); you may not use this file except in compliance with\n+ - the License.  You may obtain a copy of the License at\n+ -\n+ -   http://www.apache.org/licenses/LICENSE-2.0\n+ -\n+ - Unless required by applicable law or agreed to in writing, software\n+ - distributed under the License is distributed on an \"AS IS\" BASIS,\n+ - WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ - See the License for the specific language governing permissions and\n+ - limitations under the License.\n+ -->\n+ \n+# Iceberg AWS Integrations\n+\n+Iceberg provides integration with different AWS services through the `iceberg-aws` module. \n+This section describes how to use Iceberg with AWS.\n+\n+## Runtime Packages\n+\n+The first thing to note is that the `iceberg-aws` module is not bundled with any engine runtime.\n+To use any features described in later sections, you need to include the following packages by yourself:\n+\n+* the [iceberg AWS package](https://mvnrepository.com/artifact/org.apache.iceberg/iceberg-aws)\n+* the [AWS SDK bundle](https://mvnrepository.com/artifact/software.amazon.awssdk/bundle), or individual AWS client packages if you would like to have a minimum dependency footprint. (please note that we use the new AWS v2 SDK instead of v1)\n+\n+For example, in Spark 3, you can start the SQL shell with:\n+\n+```sh\n+spark-sql --packages org.apache.iceberg:iceberg-spark3-runtime:0.11.0,org.apache.iceberg:iceberg-aws-runtime:0.11.0,software.amazon.awssdk:bundle:2.15.40 \\\n+    --conf spark.sql.catalog.my_catalog=org.apache.iceberg.spark.SparkCatalog \\\n+    --conf spark.sql.catalog.my_catalog.catalog-impl=org.apache.iceberg.aws.glue.GlueCatalog \\\n+    --conf spark.sql.catalog.my_catalog.warehouse=s3://my-bucket/my-key-prefix \\\n+    --conf spark.sql.catalog.my_catalog.gluecatalog.lock.table=myGlueLockTable\n+```\n+\n+## Glue Catalog\n+\n+Iceberg enables the use of [AWS Glue](https://aws.amazon.com/glue) as the `Catalog` implementation.\n+When used, an Iceberg `Namespace` is stored as a [Glue Database](https://docs.aws.amazon.com/glue/latest/dg/aws-glue-api-catalog-databases.html), \n+an Iceberg `Table` is stored as a [Glue Table](https://docs.aws.amazon.com/glue/latest/dg/aws-glue-api-catalog-tables.html),\n+an Iceberg `Snapshot` is stored as a [Glue TableVersion](https://docs.aws.amazon.com/glue/latest/dg/aws-glue-api-catalog-tables.html#aws-glue-api-catalog-tables-TableVersion). \n+You can start using Glue catalog by specifying the `catalog-impl` as `org.apache.iceberg.aws.glue.GlueCatalog`. \n+More details about loading the catalog can be found in individual engine pages, such as [Spark](../spark/#loading-a-custom-catalog) and [Flink](../flink/#creating-catalogs-and-using-catalogs).\n+\n+### Glue Catalog ID\n+\n+It is very common for an organization to store all the tables in a single Glue catalog in a single AWS account and run data computation in many different accounts. \n+In this case, you need to specify a Glue catalog ID when initializing `GlueCatalog`.\n+The Glue catalog ID you should use is the AWS account ID.\n+This is because in each AWS account, there is a single Glue catalog in each AWS region,\n+but the region is pre-determined by the Glue web client that is making the call.\n+If you would like to access a Glue catalog in a different region, you should configure you AWS client, see more details in [AWS client configuration](#aws-client-configurations).\n+It is also common to [assume a role](https://docs.aws.amazon.com/STS/latest/APIReference/API_AssumeRole.html) when having cross-account access. See [AssumeRoleConfigurer](#assumeroleconfigurer) for how to set up assume role credentials in Iceberg.\n+\n+### Skip Archive\n+\n+By default, Glue will store all the table versions created and user can rollback a table to any historical version if needed.\n+However, if you are streaming data to Iceberg, this will easily create a lot of Glue table versions.\n+Therefore, it is recommended to turn off the archive feature in Glue by setting `` to false.\n+For more details, please read [Glue Quotas](https://docs.aws.amazon.com/general/latest/gr/glue.html) and the [UpdateTable API](https://docs.aws.amazon.com/glue/latest/webapi/API_UpdateTable.html).\n+\n+\n+### DynamoDB for locking Glue tables\n+\n+Glue does not have a strong guarantee over concurrent updates to a table. \n+Although it throws `ConcurrentModificationException` when detecting two processes updating a table at the same time,\n+there is no guarantee that one update would not clobber the other update.\n+Therefore, DynamoDB lock is enabled by default for Glue, so that for every commit, \n+`GlueCatalog` first obtains a lock using a helper DynamoDB table and then try to safely modify the Glue table.\n+User must specify a table name through catalog property `gluecatalog.lock.table` as the helper DynamoDB lock table to use.\n+It is recommend to use the same DynamoDB table for operations in the same Glue catalog,\n+and use a different table for a different Glue catalog in another account or region.\n+If the lock table with the given name does not exist in DynamoDB, a new table is created with billing mode set as [Pay-per-Request](https://aws.amazon.com/blogs/aws/amazon-dynamodb-on-demand-no-capacity-planning-and-pay-per-request-pricing).\n+The lock has the following additional properties:\n+\n+* `gluecatalog.lock.wait-ms`:  max time to wait for lock acquisition, default to 3 minutes\n+* `gluecatalog.lock.expire-ms`: max time a table can be locked by a process, default to 20 minutes\n+\n+If your use case only consists of single-process low-frequency (e.g. hourly, daily) updates to a table,\n+you can also turn off this locking feature by setting `gluecatalog.lock.enabled` as false.\n+\n+### Warehouse Location\n+\n+By default, Glue uses `S3FileIO` and only allows a warehouse location in S3. \n+To store data in a different local or cloud store, Glue catalog can switch to use `HadoopFileIO` \n+or any custom FileIO using the mechanism described in the [custom FileIO](../custom-catalog/#custom-file-io-implementation) section.\n+\n+## S3 FileIO\n+\n+Iceberg allows user to write data to S3 through `S3FileIO`.\n+`GlueCatalog` by default uses this FileIO, and other catalogs can load this FileIO using the `io-impl` catalog property.\n+\n+### Progressive Multipart Upload\n+\n+`S3FileIO` implements a customized progressive multipart upload algorithm to upload data.\n+Data files are uploaded in parts in parallel as soon as each part is ready,\n+and each file part is deleted as soon as its upload process completes.\n+This provides maximized upload speed and minimized local disk usage during uploads.\n+Here are the configurations user can tune related to this feature:\n+\n+* `s3fileio.multipart.num-threads`: number of threads to use for uploading parts to S3 (shared pool across all output streams)\n+* `s3fileio.multipart.part.size`: the size of a single part for multipart upload requests, default to 32MB\n+* `s3fileio.multipart.threshold`: the threshold expressed as a factor times the multipart size at which to switch from uploading using a single put object request to uploading using multipart upload, default to 1.5\n+* `s3fileio.staging.dir`: the directory to hold temporary files, default to Java's `java.io.tmpdir` property value\n+\n+### S3 Server Side Encryption\n+\n+`S3FileIO` supports all 3 S3 server side encryption modes:\n+\n+* [SSE-S3](https://docs.aws.amazon.com/AmazonS3/latest/dev/UsingServerSideEncryption.html): When you use Server-Side Encryption with Amazon S3-Managed Keys (SSE-S3), each object is encrypted with a unique key. As an additional safeguard, it encrypts the key itself with a master key that it regularly rotates. Amazon S3 server-side encryption uses one of the strongest block ciphers available, 256-bit Advanced Encryption Standard (AES-256), to encrypt your data.\n+* [SSE-KMS](https://docs.aws.amazon.com/AmazonS3/latest/dev/UsingKMSEncryption.html): Server-Side Encryption with Customer Master Keys (CMKs) Stored in AWS Key Management Service (SSE-KMS) is similar to SSE-S3, but with some additional benefits and charges for using this service. There are separate permissions for the use of a CMK that provides added protection against unauthorized access of your objects in Amazon S3. SSE-KMS also provides you with an audit trail that shows when your CMK was used and by whom. Additionally, you can create and manage customer managed CMKs or use AWS managed CMKs that are unique to you, your service, and your Region.\n+* [SSE-C](https://docs.aws.amazon.com/AmazonS3/latest/dev/ServerSideEncryptionCustomerKeys.html): With Server-Side Encryption with Customer-Provided Keys (SSE-C), you manage the encryption keys and Amazon S3 manages the encryption, as it writes to disks, and decryption, when you access your objects.\n+\n+To enable server side encryption, use the following configuration properties:\n+\n+* `s3fileio.sse.type`: `none`, `s3`, `kms` or `custom`, default to `none`\n+* `s3fileio.sse.key`: a KMS Key ID or ARN for `kms` type (default to `aws/s3`), or a custom base-64 AES256 symmetric key for `custom` type.\n+* `s3fileio.sse.md5`: if SSE type is `custom`, this value must be set as the base-64 MD5 digest of the symmetric key to ensure integrity.\n+\n+### S3 Access Control List\n+\n+`S3FileIO` supports S3 access control list for detailed access control. \n+User can choose the ACL level by setting the `s3fileio.acl` property.\n+For more details, please read [S3 ACL Documentation](https://docs.aws.amazon.com/AmazonS3/latest/dev/acl-overview.html).\n+\n+### ObjectStoreLocationProvider\n+\n+S3 and many other cloud storage services [throttle requests based on object prefix](https://aws.amazon.com/premiumsupport/knowledge-center/s3-request-limit-avoid-throttling/). \n+This means data stored in a traditional Hive storage layout has bad read and write throughput since data files of the same partition are placed under the same prefix.\n+Iceberg by default uses the Hive storage layout, but can be switch to use a different `ObjectStoreLocationProvider`.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2b3b8bc3d8aa06870ca26a5f68d3c59889fab45d"}, "originalPosition": 135}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDk4NTMzNA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            For more details, please follow [LocationProvider Configuration](../custom-catalog/#custom-location-provider-implementation) section to enable this feature.  \n          \n          \n            \n            For more details, please refer to the [LocationProvider Configuration](../custom-catalog/#custom-location-provider-implementation) section to see how to enable this feature.", "url": "https://github.com/apache/iceberg/pull/1891#discussion_r544985334", "createdAt": "2020-12-17T10:38:29Z", "author": {"login": "massdosage"}, "path": "site/docs/aws.md", "diffHunk": "@@ -0,0 +1,212 @@\n+<!--\n+ - Licensed to the Apache Software Foundation (ASF) under one or more\n+ - contributor license agreements.  See the NOTICE file distributed with\n+ - this work for additional information regarding copyright ownership.\n+ - The ASF licenses this file to You under the Apache License, Version 2.0\n+ - (the \"License\"); you may not use this file except in compliance with\n+ - the License.  You may obtain a copy of the License at\n+ -\n+ -   http://www.apache.org/licenses/LICENSE-2.0\n+ -\n+ - Unless required by applicable law or agreed to in writing, software\n+ - distributed under the License is distributed on an \"AS IS\" BASIS,\n+ - WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ - See the License for the specific language governing permissions and\n+ - limitations under the License.\n+ -->\n+ \n+# Iceberg AWS Integrations\n+\n+Iceberg provides integration with different AWS services through the `iceberg-aws` module. \n+This section describes how to use Iceberg with AWS.\n+\n+## Runtime Packages\n+\n+The first thing to note is that the `iceberg-aws` module is not bundled with any engine runtime.\n+To use any features described in later sections, you need to include the following packages by yourself:\n+\n+* the [iceberg AWS package](https://mvnrepository.com/artifact/org.apache.iceberg/iceberg-aws)\n+* the [AWS SDK bundle](https://mvnrepository.com/artifact/software.amazon.awssdk/bundle), or individual AWS client packages if you would like to have a minimum dependency footprint. (please note that we use the new AWS v2 SDK instead of v1)\n+\n+For example, in Spark 3, you can start the SQL shell with:\n+\n+```sh\n+spark-sql --packages org.apache.iceberg:iceberg-spark3-runtime:0.11.0,org.apache.iceberg:iceberg-aws-runtime:0.11.0,software.amazon.awssdk:bundle:2.15.40 \\\n+    --conf spark.sql.catalog.my_catalog=org.apache.iceberg.spark.SparkCatalog \\\n+    --conf spark.sql.catalog.my_catalog.catalog-impl=org.apache.iceberg.aws.glue.GlueCatalog \\\n+    --conf spark.sql.catalog.my_catalog.warehouse=s3://my-bucket/my-key-prefix \\\n+    --conf spark.sql.catalog.my_catalog.gluecatalog.lock.table=myGlueLockTable\n+```\n+\n+## Glue Catalog\n+\n+Iceberg enables the use of [AWS Glue](https://aws.amazon.com/glue) as the `Catalog` implementation.\n+When used, an Iceberg `Namespace` is stored as a [Glue Database](https://docs.aws.amazon.com/glue/latest/dg/aws-glue-api-catalog-databases.html), \n+an Iceberg `Table` is stored as a [Glue Table](https://docs.aws.amazon.com/glue/latest/dg/aws-glue-api-catalog-tables.html),\n+an Iceberg `Snapshot` is stored as a [Glue TableVersion](https://docs.aws.amazon.com/glue/latest/dg/aws-glue-api-catalog-tables.html#aws-glue-api-catalog-tables-TableVersion). \n+You can start using Glue catalog by specifying the `catalog-impl` as `org.apache.iceberg.aws.glue.GlueCatalog`. \n+More details about loading the catalog can be found in individual engine pages, such as [Spark](../spark/#loading-a-custom-catalog) and [Flink](../flink/#creating-catalogs-and-using-catalogs).\n+\n+### Glue Catalog ID\n+\n+It is very common for an organization to store all the tables in a single Glue catalog in a single AWS account and run data computation in many different accounts. \n+In this case, you need to specify a Glue catalog ID when initializing `GlueCatalog`.\n+The Glue catalog ID you should use is the AWS account ID.\n+This is because in each AWS account, there is a single Glue catalog in each AWS region,\n+but the region is pre-determined by the Glue web client that is making the call.\n+If you would like to access a Glue catalog in a different region, you should configure you AWS client, see more details in [AWS client configuration](#aws-client-configurations).\n+It is also common to [assume a role](https://docs.aws.amazon.com/STS/latest/APIReference/API_AssumeRole.html) when having cross-account access. See [AssumeRoleConfigurer](#assumeroleconfigurer) for how to set up assume role credentials in Iceberg.\n+\n+### Skip Archive\n+\n+By default, Glue will store all the table versions created and user can rollback a table to any historical version if needed.\n+However, if you are streaming data to Iceberg, this will easily create a lot of Glue table versions.\n+Therefore, it is recommended to turn off the archive feature in Glue by setting `` to false.\n+For more details, please read [Glue Quotas](https://docs.aws.amazon.com/general/latest/gr/glue.html) and the [UpdateTable API](https://docs.aws.amazon.com/glue/latest/webapi/API_UpdateTable.html).\n+\n+\n+### DynamoDB for locking Glue tables\n+\n+Glue does not have a strong guarantee over concurrent updates to a table. \n+Although it throws `ConcurrentModificationException` when detecting two processes updating a table at the same time,\n+there is no guarantee that one update would not clobber the other update.\n+Therefore, DynamoDB lock is enabled by default for Glue, so that for every commit, \n+`GlueCatalog` first obtains a lock using a helper DynamoDB table and then try to safely modify the Glue table.\n+User must specify a table name through catalog property `gluecatalog.lock.table` as the helper DynamoDB lock table to use.\n+It is recommend to use the same DynamoDB table for operations in the same Glue catalog,\n+and use a different table for a different Glue catalog in another account or region.\n+If the lock table with the given name does not exist in DynamoDB, a new table is created with billing mode set as [Pay-per-Request](https://aws.amazon.com/blogs/aws/amazon-dynamodb-on-demand-no-capacity-planning-and-pay-per-request-pricing).\n+The lock has the following additional properties:\n+\n+* `gluecatalog.lock.wait-ms`:  max time to wait for lock acquisition, default to 3 minutes\n+* `gluecatalog.lock.expire-ms`: max time a table can be locked by a process, default to 20 minutes\n+\n+If your use case only consists of single-process low-frequency (e.g. hourly, daily) updates to a table,\n+you can also turn off this locking feature by setting `gluecatalog.lock.enabled` as false.\n+\n+### Warehouse Location\n+\n+By default, Glue uses `S3FileIO` and only allows a warehouse location in S3. \n+To store data in a different local or cloud store, Glue catalog can switch to use `HadoopFileIO` \n+or any custom FileIO using the mechanism described in the [custom FileIO](../custom-catalog/#custom-file-io-implementation) section.\n+\n+## S3 FileIO\n+\n+Iceberg allows user to write data to S3 through `S3FileIO`.\n+`GlueCatalog` by default uses this FileIO, and other catalogs can load this FileIO using the `io-impl` catalog property.\n+\n+### Progressive Multipart Upload\n+\n+`S3FileIO` implements a customized progressive multipart upload algorithm to upload data.\n+Data files are uploaded in parts in parallel as soon as each part is ready,\n+and each file part is deleted as soon as its upload process completes.\n+This provides maximized upload speed and minimized local disk usage during uploads.\n+Here are the configurations user can tune related to this feature:\n+\n+* `s3fileio.multipart.num-threads`: number of threads to use for uploading parts to S3 (shared pool across all output streams)\n+* `s3fileio.multipart.part.size`: the size of a single part for multipart upload requests, default to 32MB\n+* `s3fileio.multipart.threshold`: the threshold expressed as a factor times the multipart size at which to switch from uploading using a single put object request to uploading using multipart upload, default to 1.5\n+* `s3fileio.staging.dir`: the directory to hold temporary files, default to Java's `java.io.tmpdir` property value\n+\n+### S3 Server Side Encryption\n+\n+`S3FileIO` supports all 3 S3 server side encryption modes:\n+\n+* [SSE-S3](https://docs.aws.amazon.com/AmazonS3/latest/dev/UsingServerSideEncryption.html): When you use Server-Side Encryption with Amazon S3-Managed Keys (SSE-S3), each object is encrypted with a unique key. As an additional safeguard, it encrypts the key itself with a master key that it regularly rotates. Amazon S3 server-side encryption uses one of the strongest block ciphers available, 256-bit Advanced Encryption Standard (AES-256), to encrypt your data.\n+* [SSE-KMS](https://docs.aws.amazon.com/AmazonS3/latest/dev/UsingKMSEncryption.html): Server-Side Encryption with Customer Master Keys (CMKs) Stored in AWS Key Management Service (SSE-KMS) is similar to SSE-S3, but with some additional benefits and charges for using this service. There are separate permissions for the use of a CMK that provides added protection against unauthorized access of your objects in Amazon S3. SSE-KMS also provides you with an audit trail that shows when your CMK was used and by whom. Additionally, you can create and manage customer managed CMKs or use AWS managed CMKs that are unique to you, your service, and your Region.\n+* [SSE-C](https://docs.aws.amazon.com/AmazonS3/latest/dev/ServerSideEncryptionCustomerKeys.html): With Server-Side Encryption with Customer-Provided Keys (SSE-C), you manage the encryption keys and Amazon S3 manages the encryption, as it writes to disks, and decryption, when you access your objects.\n+\n+To enable server side encryption, use the following configuration properties:\n+\n+* `s3fileio.sse.type`: `none`, `s3`, `kms` or `custom`, default to `none`\n+* `s3fileio.sse.key`: a KMS Key ID or ARN for `kms` type (default to `aws/s3`), or a custom base-64 AES256 symmetric key for `custom` type.\n+* `s3fileio.sse.md5`: if SSE type is `custom`, this value must be set as the base-64 MD5 digest of the symmetric key to ensure integrity.\n+\n+### S3 Access Control List\n+\n+`S3FileIO` supports S3 access control list for detailed access control. \n+User can choose the ACL level by setting the `s3fileio.acl` property.\n+For more details, please read [S3 ACL Documentation](https://docs.aws.amazon.com/AmazonS3/latest/dev/acl-overview.html).\n+\n+### ObjectStoreLocationProvider\n+\n+S3 and many other cloud storage services [throttle requests based on object prefix](https://aws.amazon.com/premiumsupport/knowledge-center/s3-request-limit-avoid-throttling/). \n+This means data stored in a traditional Hive storage layout has bad read and write throughput since data files of the same partition are placed under the same prefix.\n+Iceberg by default uses the Hive storage layout, but can be switch to use a different `ObjectStoreLocationProvider`.\n+In this mode, a hash string is added to the beginning of each file path, so that files are equally distributed across all prefixes in an S3 bucket.\n+This results in minimized throttling and maximized throughput for S3-related IO operations.\n+For more details, please follow [LocationProvider Configuration](../custom-catalog/#custom-location-provider-implementation) section to enable this feature.  ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2b3b8bc3d8aa06870ca26a5f68d3c59889fab45d"}, "originalPosition": 138}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDk4NTY0Nw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            When creating a new output file using `OutputFile.create()`, strong consistency check is used and an `AlreadyExistsException` will be thrown if the file already exists in S3.\n          \n          \n            \n            When creating a new output file using `OutputFile.create()`, a strong consistency check is used and an `AlreadyExistsException` will be thrown if the file already exists in S3.", "url": "https://github.com/apache/iceberg/pull/1891#discussion_r544985647", "createdAt": "2020-12-17T10:38:58Z", "author": {"login": "massdosage"}, "path": "site/docs/aws.md", "diffHunk": "@@ -0,0 +1,212 @@\n+<!--\n+ - Licensed to the Apache Software Foundation (ASF) under one or more\n+ - contributor license agreements.  See the NOTICE file distributed with\n+ - this work for additional information regarding copyright ownership.\n+ - The ASF licenses this file to You under the Apache License, Version 2.0\n+ - (the \"License\"); you may not use this file except in compliance with\n+ - the License.  You may obtain a copy of the License at\n+ -\n+ -   http://www.apache.org/licenses/LICENSE-2.0\n+ -\n+ - Unless required by applicable law or agreed to in writing, software\n+ - distributed under the License is distributed on an \"AS IS\" BASIS,\n+ - WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ - See the License for the specific language governing permissions and\n+ - limitations under the License.\n+ -->\n+ \n+# Iceberg AWS Integrations\n+\n+Iceberg provides integration with different AWS services through the `iceberg-aws` module. \n+This section describes how to use Iceberg with AWS.\n+\n+## Runtime Packages\n+\n+The first thing to note is that the `iceberg-aws` module is not bundled with any engine runtime.\n+To use any features described in later sections, you need to include the following packages by yourself:\n+\n+* the [iceberg AWS package](https://mvnrepository.com/artifact/org.apache.iceberg/iceberg-aws)\n+* the [AWS SDK bundle](https://mvnrepository.com/artifact/software.amazon.awssdk/bundle), or individual AWS client packages if you would like to have a minimum dependency footprint. (please note that we use the new AWS v2 SDK instead of v1)\n+\n+For example, in Spark 3, you can start the SQL shell with:\n+\n+```sh\n+spark-sql --packages org.apache.iceberg:iceberg-spark3-runtime:0.11.0,org.apache.iceberg:iceberg-aws-runtime:0.11.0,software.amazon.awssdk:bundle:2.15.40 \\\n+    --conf spark.sql.catalog.my_catalog=org.apache.iceberg.spark.SparkCatalog \\\n+    --conf spark.sql.catalog.my_catalog.catalog-impl=org.apache.iceberg.aws.glue.GlueCatalog \\\n+    --conf spark.sql.catalog.my_catalog.warehouse=s3://my-bucket/my-key-prefix \\\n+    --conf spark.sql.catalog.my_catalog.gluecatalog.lock.table=myGlueLockTable\n+```\n+\n+## Glue Catalog\n+\n+Iceberg enables the use of [AWS Glue](https://aws.amazon.com/glue) as the `Catalog` implementation.\n+When used, an Iceberg `Namespace` is stored as a [Glue Database](https://docs.aws.amazon.com/glue/latest/dg/aws-glue-api-catalog-databases.html), \n+an Iceberg `Table` is stored as a [Glue Table](https://docs.aws.amazon.com/glue/latest/dg/aws-glue-api-catalog-tables.html),\n+an Iceberg `Snapshot` is stored as a [Glue TableVersion](https://docs.aws.amazon.com/glue/latest/dg/aws-glue-api-catalog-tables.html#aws-glue-api-catalog-tables-TableVersion). \n+You can start using Glue catalog by specifying the `catalog-impl` as `org.apache.iceberg.aws.glue.GlueCatalog`. \n+More details about loading the catalog can be found in individual engine pages, such as [Spark](../spark/#loading-a-custom-catalog) and [Flink](../flink/#creating-catalogs-and-using-catalogs).\n+\n+### Glue Catalog ID\n+\n+It is very common for an organization to store all the tables in a single Glue catalog in a single AWS account and run data computation in many different accounts. \n+In this case, you need to specify a Glue catalog ID when initializing `GlueCatalog`.\n+The Glue catalog ID you should use is the AWS account ID.\n+This is because in each AWS account, there is a single Glue catalog in each AWS region,\n+but the region is pre-determined by the Glue web client that is making the call.\n+If you would like to access a Glue catalog in a different region, you should configure you AWS client, see more details in [AWS client configuration](#aws-client-configurations).\n+It is also common to [assume a role](https://docs.aws.amazon.com/STS/latest/APIReference/API_AssumeRole.html) when having cross-account access. See [AssumeRoleConfigurer](#assumeroleconfigurer) for how to set up assume role credentials in Iceberg.\n+\n+### Skip Archive\n+\n+By default, Glue will store all the table versions created and user can rollback a table to any historical version if needed.\n+However, if you are streaming data to Iceberg, this will easily create a lot of Glue table versions.\n+Therefore, it is recommended to turn off the archive feature in Glue by setting `` to false.\n+For more details, please read [Glue Quotas](https://docs.aws.amazon.com/general/latest/gr/glue.html) and the [UpdateTable API](https://docs.aws.amazon.com/glue/latest/webapi/API_UpdateTable.html).\n+\n+\n+### DynamoDB for locking Glue tables\n+\n+Glue does not have a strong guarantee over concurrent updates to a table. \n+Although it throws `ConcurrentModificationException` when detecting two processes updating a table at the same time,\n+there is no guarantee that one update would not clobber the other update.\n+Therefore, DynamoDB lock is enabled by default for Glue, so that for every commit, \n+`GlueCatalog` first obtains a lock using a helper DynamoDB table and then try to safely modify the Glue table.\n+User must specify a table name through catalog property `gluecatalog.lock.table` as the helper DynamoDB lock table to use.\n+It is recommend to use the same DynamoDB table for operations in the same Glue catalog,\n+and use a different table for a different Glue catalog in another account or region.\n+If the lock table with the given name does not exist in DynamoDB, a new table is created with billing mode set as [Pay-per-Request](https://aws.amazon.com/blogs/aws/amazon-dynamodb-on-demand-no-capacity-planning-and-pay-per-request-pricing).\n+The lock has the following additional properties:\n+\n+* `gluecatalog.lock.wait-ms`:  max time to wait for lock acquisition, default to 3 minutes\n+* `gluecatalog.lock.expire-ms`: max time a table can be locked by a process, default to 20 minutes\n+\n+If your use case only consists of single-process low-frequency (e.g. hourly, daily) updates to a table,\n+you can also turn off this locking feature by setting `gluecatalog.lock.enabled` as false.\n+\n+### Warehouse Location\n+\n+By default, Glue uses `S3FileIO` and only allows a warehouse location in S3. \n+To store data in a different local or cloud store, Glue catalog can switch to use `HadoopFileIO` \n+or any custom FileIO using the mechanism described in the [custom FileIO](../custom-catalog/#custom-file-io-implementation) section.\n+\n+## S3 FileIO\n+\n+Iceberg allows user to write data to S3 through `S3FileIO`.\n+`GlueCatalog` by default uses this FileIO, and other catalogs can load this FileIO using the `io-impl` catalog property.\n+\n+### Progressive Multipart Upload\n+\n+`S3FileIO` implements a customized progressive multipart upload algorithm to upload data.\n+Data files are uploaded in parts in parallel as soon as each part is ready,\n+and each file part is deleted as soon as its upload process completes.\n+This provides maximized upload speed and minimized local disk usage during uploads.\n+Here are the configurations user can tune related to this feature:\n+\n+* `s3fileio.multipart.num-threads`: number of threads to use for uploading parts to S3 (shared pool across all output streams)\n+* `s3fileio.multipart.part.size`: the size of a single part for multipart upload requests, default to 32MB\n+* `s3fileio.multipart.threshold`: the threshold expressed as a factor times the multipart size at which to switch from uploading using a single put object request to uploading using multipart upload, default to 1.5\n+* `s3fileio.staging.dir`: the directory to hold temporary files, default to Java's `java.io.tmpdir` property value\n+\n+### S3 Server Side Encryption\n+\n+`S3FileIO` supports all 3 S3 server side encryption modes:\n+\n+* [SSE-S3](https://docs.aws.amazon.com/AmazonS3/latest/dev/UsingServerSideEncryption.html): When you use Server-Side Encryption with Amazon S3-Managed Keys (SSE-S3), each object is encrypted with a unique key. As an additional safeguard, it encrypts the key itself with a master key that it regularly rotates. Amazon S3 server-side encryption uses one of the strongest block ciphers available, 256-bit Advanced Encryption Standard (AES-256), to encrypt your data.\n+* [SSE-KMS](https://docs.aws.amazon.com/AmazonS3/latest/dev/UsingKMSEncryption.html): Server-Side Encryption with Customer Master Keys (CMKs) Stored in AWS Key Management Service (SSE-KMS) is similar to SSE-S3, but with some additional benefits and charges for using this service. There are separate permissions for the use of a CMK that provides added protection against unauthorized access of your objects in Amazon S3. SSE-KMS also provides you with an audit trail that shows when your CMK was used and by whom. Additionally, you can create and manage customer managed CMKs or use AWS managed CMKs that are unique to you, your service, and your Region.\n+* [SSE-C](https://docs.aws.amazon.com/AmazonS3/latest/dev/ServerSideEncryptionCustomerKeys.html): With Server-Side Encryption with Customer-Provided Keys (SSE-C), you manage the encryption keys and Amazon S3 manages the encryption, as it writes to disks, and decryption, when you access your objects.\n+\n+To enable server side encryption, use the following configuration properties:\n+\n+* `s3fileio.sse.type`: `none`, `s3`, `kms` or `custom`, default to `none`\n+* `s3fileio.sse.key`: a KMS Key ID or ARN for `kms` type (default to `aws/s3`), or a custom base-64 AES256 symmetric key for `custom` type.\n+* `s3fileio.sse.md5`: if SSE type is `custom`, this value must be set as the base-64 MD5 digest of the symmetric key to ensure integrity.\n+\n+### S3 Access Control List\n+\n+`S3FileIO` supports S3 access control list for detailed access control. \n+User can choose the ACL level by setting the `s3fileio.acl` property.\n+For more details, please read [S3 ACL Documentation](https://docs.aws.amazon.com/AmazonS3/latest/dev/acl-overview.html).\n+\n+### ObjectStoreLocationProvider\n+\n+S3 and many other cloud storage services [throttle requests based on object prefix](https://aws.amazon.com/premiumsupport/knowledge-center/s3-request-limit-avoid-throttling/). \n+This means data stored in a traditional Hive storage layout has bad read and write throughput since data files of the same partition are placed under the same prefix.\n+Iceberg by default uses the Hive storage layout, but can be switch to use a different `ObjectStoreLocationProvider`.\n+In this mode, a hash string is added to the beginning of each file path, so that files are equally distributed across all prefixes in an S3 bucket.\n+This results in minimized throttling and maximized throughput for S3-related IO operations.\n+For more details, please follow [LocationProvider Configuration](../custom-catalog/#custom-location-provider-implementation) section to enable this feature.  \n+\n+### S3 Strong Consistency\n+\n+In November 2020, S3 announced [strong consistency](https://aws.amazon.com/s3/consistency/) for all GET and LIST operations, and Iceberg is updated to fully leverage this feature.\n+When creating a new output file using `OutputFile.create()`, strong consistency check is used and an `AlreadyExistsException` will be thrown if the file already exists in S3.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2b3b8bc3d8aa06870ca26a5f68d3c59889fab45d"}, "originalPosition": 143}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDk4NjA4Mw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             and is thus recommend for S3 use case over S3A.\n          \n          \n            \n             and is thus recommend for S3 use cases rather than the S3A FileSystem.", "url": "https://github.com/apache/iceberg/pull/1891#discussion_r544986083", "createdAt": "2020-12-17T10:39:37Z", "author": {"login": "massdosage"}, "path": "site/docs/aws.md", "diffHunk": "@@ -0,0 +1,212 @@\n+<!--\n+ - Licensed to the Apache Software Foundation (ASF) under one or more\n+ - contributor license agreements.  See the NOTICE file distributed with\n+ - this work for additional information regarding copyright ownership.\n+ - The ASF licenses this file to You under the Apache License, Version 2.0\n+ - (the \"License\"); you may not use this file except in compliance with\n+ - the License.  You may obtain a copy of the License at\n+ -\n+ -   http://www.apache.org/licenses/LICENSE-2.0\n+ -\n+ - Unless required by applicable law or agreed to in writing, software\n+ - distributed under the License is distributed on an \"AS IS\" BASIS,\n+ - WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ - See the License for the specific language governing permissions and\n+ - limitations under the License.\n+ -->\n+ \n+# Iceberg AWS Integrations\n+\n+Iceberg provides integration with different AWS services through the `iceberg-aws` module. \n+This section describes how to use Iceberg with AWS.\n+\n+## Runtime Packages\n+\n+The first thing to note is that the `iceberg-aws` module is not bundled with any engine runtime.\n+To use any features described in later sections, you need to include the following packages by yourself:\n+\n+* the [iceberg AWS package](https://mvnrepository.com/artifact/org.apache.iceberg/iceberg-aws)\n+* the [AWS SDK bundle](https://mvnrepository.com/artifact/software.amazon.awssdk/bundle), or individual AWS client packages if you would like to have a minimum dependency footprint. (please note that we use the new AWS v2 SDK instead of v1)\n+\n+For example, in Spark 3, you can start the SQL shell with:\n+\n+```sh\n+spark-sql --packages org.apache.iceberg:iceberg-spark3-runtime:0.11.0,org.apache.iceberg:iceberg-aws-runtime:0.11.0,software.amazon.awssdk:bundle:2.15.40 \\\n+    --conf spark.sql.catalog.my_catalog=org.apache.iceberg.spark.SparkCatalog \\\n+    --conf spark.sql.catalog.my_catalog.catalog-impl=org.apache.iceberg.aws.glue.GlueCatalog \\\n+    --conf spark.sql.catalog.my_catalog.warehouse=s3://my-bucket/my-key-prefix \\\n+    --conf spark.sql.catalog.my_catalog.gluecatalog.lock.table=myGlueLockTable\n+```\n+\n+## Glue Catalog\n+\n+Iceberg enables the use of [AWS Glue](https://aws.amazon.com/glue) as the `Catalog` implementation.\n+When used, an Iceberg `Namespace` is stored as a [Glue Database](https://docs.aws.amazon.com/glue/latest/dg/aws-glue-api-catalog-databases.html), \n+an Iceberg `Table` is stored as a [Glue Table](https://docs.aws.amazon.com/glue/latest/dg/aws-glue-api-catalog-tables.html),\n+an Iceberg `Snapshot` is stored as a [Glue TableVersion](https://docs.aws.amazon.com/glue/latest/dg/aws-glue-api-catalog-tables.html#aws-glue-api-catalog-tables-TableVersion). \n+You can start using Glue catalog by specifying the `catalog-impl` as `org.apache.iceberg.aws.glue.GlueCatalog`. \n+More details about loading the catalog can be found in individual engine pages, such as [Spark](../spark/#loading-a-custom-catalog) and [Flink](../flink/#creating-catalogs-and-using-catalogs).\n+\n+### Glue Catalog ID\n+\n+It is very common for an organization to store all the tables in a single Glue catalog in a single AWS account and run data computation in many different accounts. \n+In this case, you need to specify a Glue catalog ID when initializing `GlueCatalog`.\n+The Glue catalog ID you should use is the AWS account ID.\n+This is because in each AWS account, there is a single Glue catalog in each AWS region,\n+but the region is pre-determined by the Glue web client that is making the call.\n+If you would like to access a Glue catalog in a different region, you should configure you AWS client, see more details in [AWS client configuration](#aws-client-configurations).\n+It is also common to [assume a role](https://docs.aws.amazon.com/STS/latest/APIReference/API_AssumeRole.html) when having cross-account access. See [AssumeRoleConfigurer](#assumeroleconfigurer) for how to set up assume role credentials in Iceberg.\n+\n+### Skip Archive\n+\n+By default, Glue will store all the table versions created and user can rollback a table to any historical version if needed.\n+However, if you are streaming data to Iceberg, this will easily create a lot of Glue table versions.\n+Therefore, it is recommended to turn off the archive feature in Glue by setting `` to false.\n+For more details, please read [Glue Quotas](https://docs.aws.amazon.com/general/latest/gr/glue.html) and the [UpdateTable API](https://docs.aws.amazon.com/glue/latest/webapi/API_UpdateTable.html).\n+\n+\n+### DynamoDB for locking Glue tables\n+\n+Glue does not have a strong guarantee over concurrent updates to a table. \n+Although it throws `ConcurrentModificationException` when detecting two processes updating a table at the same time,\n+there is no guarantee that one update would not clobber the other update.\n+Therefore, DynamoDB lock is enabled by default for Glue, so that for every commit, \n+`GlueCatalog` first obtains a lock using a helper DynamoDB table and then try to safely modify the Glue table.\n+User must specify a table name through catalog property `gluecatalog.lock.table` as the helper DynamoDB lock table to use.\n+It is recommend to use the same DynamoDB table for operations in the same Glue catalog,\n+and use a different table for a different Glue catalog in another account or region.\n+If the lock table with the given name does not exist in DynamoDB, a new table is created with billing mode set as [Pay-per-Request](https://aws.amazon.com/blogs/aws/amazon-dynamodb-on-demand-no-capacity-planning-and-pay-per-request-pricing).\n+The lock has the following additional properties:\n+\n+* `gluecatalog.lock.wait-ms`:  max time to wait for lock acquisition, default to 3 minutes\n+* `gluecatalog.lock.expire-ms`: max time a table can be locked by a process, default to 20 minutes\n+\n+If your use case only consists of single-process low-frequency (e.g. hourly, daily) updates to a table,\n+you can also turn off this locking feature by setting `gluecatalog.lock.enabled` as false.\n+\n+### Warehouse Location\n+\n+By default, Glue uses `S3FileIO` and only allows a warehouse location in S3. \n+To store data in a different local or cloud store, Glue catalog can switch to use `HadoopFileIO` \n+or any custom FileIO using the mechanism described in the [custom FileIO](../custom-catalog/#custom-file-io-implementation) section.\n+\n+## S3 FileIO\n+\n+Iceberg allows user to write data to S3 through `S3FileIO`.\n+`GlueCatalog` by default uses this FileIO, and other catalogs can load this FileIO using the `io-impl` catalog property.\n+\n+### Progressive Multipart Upload\n+\n+`S3FileIO` implements a customized progressive multipart upload algorithm to upload data.\n+Data files are uploaded in parts in parallel as soon as each part is ready,\n+and each file part is deleted as soon as its upload process completes.\n+This provides maximized upload speed and minimized local disk usage during uploads.\n+Here are the configurations user can tune related to this feature:\n+\n+* `s3fileio.multipart.num-threads`: number of threads to use for uploading parts to S3 (shared pool across all output streams)\n+* `s3fileio.multipart.part.size`: the size of a single part for multipart upload requests, default to 32MB\n+* `s3fileio.multipart.threshold`: the threshold expressed as a factor times the multipart size at which to switch from uploading using a single put object request to uploading using multipart upload, default to 1.5\n+* `s3fileio.staging.dir`: the directory to hold temporary files, default to Java's `java.io.tmpdir` property value\n+\n+### S3 Server Side Encryption\n+\n+`S3FileIO` supports all 3 S3 server side encryption modes:\n+\n+* [SSE-S3](https://docs.aws.amazon.com/AmazonS3/latest/dev/UsingServerSideEncryption.html): When you use Server-Side Encryption with Amazon S3-Managed Keys (SSE-S3), each object is encrypted with a unique key. As an additional safeguard, it encrypts the key itself with a master key that it regularly rotates. Amazon S3 server-side encryption uses one of the strongest block ciphers available, 256-bit Advanced Encryption Standard (AES-256), to encrypt your data.\n+* [SSE-KMS](https://docs.aws.amazon.com/AmazonS3/latest/dev/UsingKMSEncryption.html): Server-Side Encryption with Customer Master Keys (CMKs) Stored in AWS Key Management Service (SSE-KMS) is similar to SSE-S3, but with some additional benefits and charges for using this service. There are separate permissions for the use of a CMK that provides added protection against unauthorized access of your objects in Amazon S3. SSE-KMS also provides you with an audit trail that shows when your CMK was used and by whom. Additionally, you can create and manage customer managed CMKs or use AWS managed CMKs that are unique to you, your service, and your Region.\n+* [SSE-C](https://docs.aws.amazon.com/AmazonS3/latest/dev/ServerSideEncryptionCustomerKeys.html): With Server-Side Encryption with Customer-Provided Keys (SSE-C), you manage the encryption keys and Amazon S3 manages the encryption, as it writes to disks, and decryption, when you access your objects.\n+\n+To enable server side encryption, use the following configuration properties:\n+\n+* `s3fileio.sse.type`: `none`, `s3`, `kms` or `custom`, default to `none`\n+* `s3fileio.sse.key`: a KMS Key ID or ARN for `kms` type (default to `aws/s3`), or a custom base-64 AES256 symmetric key for `custom` type.\n+* `s3fileio.sse.md5`: if SSE type is `custom`, this value must be set as the base-64 MD5 digest of the symmetric key to ensure integrity.\n+\n+### S3 Access Control List\n+\n+`S3FileIO` supports S3 access control list for detailed access control. \n+User can choose the ACL level by setting the `s3fileio.acl` property.\n+For more details, please read [S3 ACL Documentation](https://docs.aws.amazon.com/AmazonS3/latest/dev/acl-overview.html).\n+\n+### ObjectStoreLocationProvider\n+\n+S3 and many other cloud storage services [throttle requests based on object prefix](https://aws.amazon.com/premiumsupport/knowledge-center/s3-request-limit-avoid-throttling/). \n+This means data stored in a traditional Hive storage layout has bad read and write throughput since data files of the same partition are placed under the same prefix.\n+Iceberg by default uses the Hive storage layout, but can be switch to use a different `ObjectStoreLocationProvider`.\n+In this mode, a hash string is added to the beginning of each file path, so that files are equally distributed across all prefixes in an S3 bucket.\n+This results in minimized throttling and maximized throughput for S3-related IO operations.\n+For more details, please follow [LocationProvider Configuration](../custom-catalog/#custom-location-provider-implementation) section to enable this feature.  \n+\n+### S3 Strong Consistency\n+\n+In November 2020, S3 announced [strong consistency](https://aws.amazon.com/s3/consistency/) for all GET and LIST operations, and Iceberg is updated to fully leverage this feature.\n+When creating a new output file using `OutputFile.create()`, strong consistency check is used and an `AlreadyExistsException` will be thrown if the file already exists in S3.\n+\n+### Hadoop S3A\n+\n+Before `S3FileIO` was introduced, many Iceberg users choose to use `HadoopFileIO` to write data to S3 through the [S3A FileSystem](https://github.com/apache/hadoop/blob/trunk/hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/S3AFileSystem.java).\n+As introduced in the above sections, the `S3FileIO` adopts latest AWS clients and S3 features for optimzied security and performance,\n+ and is thus recommend for S3 use case over S3A.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2b3b8bc3d8aa06870ca26a5f68d3c59889fab45d"}, "originalPosition": 149}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDk4NjY5Mw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            ### Hadoop S3A\n          \n          \n            \n            ### Hadoop S3A FileSystem\n          \n      \n    \n    \n  \n\nI think it's useful to refer to the FileSystem otherwise some people might get confused by the differences between S3, S3A, S3N etc.", "url": "https://github.com/apache/iceberg/pull/1891#discussion_r544986693", "createdAt": "2020-12-17T10:40:30Z", "author": {"login": "massdosage"}, "path": "site/docs/aws.md", "diffHunk": "@@ -0,0 +1,212 @@\n+<!--\n+ - Licensed to the Apache Software Foundation (ASF) under one or more\n+ - contributor license agreements.  See the NOTICE file distributed with\n+ - this work for additional information regarding copyright ownership.\n+ - The ASF licenses this file to You under the Apache License, Version 2.0\n+ - (the \"License\"); you may not use this file except in compliance with\n+ - the License.  You may obtain a copy of the License at\n+ -\n+ -   http://www.apache.org/licenses/LICENSE-2.0\n+ -\n+ - Unless required by applicable law or agreed to in writing, software\n+ - distributed under the License is distributed on an \"AS IS\" BASIS,\n+ - WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ - See the License for the specific language governing permissions and\n+ - limitations under the License.\n+ -->\n+ \n+# Iceberg AWS Integrations\n+\n+Iceberg provides integration with different AWS services through the `iceberg-aws` module. \n+This section describes how to use Iceberg with AWS.\n+\n+## Runtime Packages\n+\n+The first thing to note is that the `iceberg-aws` module is not bundled with any engine runtime.\n+To use any features described in later sections, you need to include the following packages by yourself:\n+\n+* the [iceberg AWS package](https://mvnrepository.com/artifact/org.apache.iceberg/iceberg-aws)\n+* the [AWS SDK bundle](https://mvnrepository.com/artifact/software.amazon.awssdk/bundle), or individual AWS client packages if you would like to have a minimum dependency footprint. (please note that we use the new AWS v2 SDK instead of v1)\n+\n+For example, in Spark 3, you can start the SQL shell with:\n+\n+```sh\n+spark-sql --packages org.apache.iceberg:iceberg-spark3-runtime:0.11.0,org.apache.iceberg:iceberg-aws-runtime:0.11.0,software.amazon.awssdk:bundle:2.15.40 \\\n+    --conf spark.sql.catalog.my_catalog=org.apache.iceberg.spark.SparkCatalog \\\n+    --conf spark.sql.catalog.my_catalog.catalog-impl=org.apache.iceberg.aws.glue.GlueCatalog \\\n+    --conf spark.sql.catalog.my_catalog.warehouse=s3://my-bucket/my-key-prefix \\\n+    --conf spark.sql.catalog.my_catalog.gluecatalog.lock.table=myGlueLockTable\n+```\n+\n+## Glue Catalog\n+\n+Iceberg enables the use of [AWS Glue](https://aws.amazon.com/glue) as the `Catalog` implementation.\n+When used, an Iceberg `Namespace` is stored as a [Glue Database](https://docs.aws.amazon.com/glue/latest/dg/aws-glue-api-catalog-databases.html), \n+an Iceberg `Table` is stored as a [Glue Table](https://docs.aws.amazon.com/glue/latest/dg/aws-glue-api-catalog-tables.html),\n+an Iceberg `Snapshot` is stored as a [Glue TableVersion](https://docs.aws.amazon.com/glue/latest/dg/aws-glue-api-catalog-tables.html#aws-glue-api-catalog-tables-TableVersion). \n+You can start using Glue catalog by specifying the `catalog-impl` as `org.apache.iceberg.aws.glue.GlueCatalog`. \n+More details about loading the catalog can be found in individual engine pages, such as [Spark](../spark/#loading-a-custom-catalog) and [Flink](../flink/#creating-catalogs-and-using-catalogs).\n+\n+### Glue Catalog ID\n+\n+It is very common for an organization to store all the tables in a single Glue catalog in a single AWS account and run data computation in many different accounts. \n+In this case, you need to specify a Glue catalog ID when initializing `GlueCatalog`.\n+The Glue catalog ID you should use is the AWS account ID.\n+This is because in each AWS account, there is a single Glue catalog in each AWS region,\n+but the region is pre-determined by the Glue web client that is making the call.\n+If you would like to access a Glue catalog in a different region, you should configure you AWS client, see more details in [AWS client configuration](#aws-client-configurations).\n+It is also common to [assume a role](https://docs.aws.amazon.com/STS/latest/APIReference/API_AssumeRole.html) when having cross-account access. See [AssumeRoleConfigurer](#assumeroleconfigurer) for how to set up assume role credentials in Iceberg.\n+\n+### Skip Archive\n+\n+By default, Glue will store all the table versions created and user can rollback a table to any historical version if needed.\n+However, if you are streaming data to Iceberg, this will easily create a lot of Glue table versions.\n+Therefore, it is recommended to turn off the archive feature in Glue by setting `` to false.\n+For more details, please read [Glue Quotas](https://docs.aws.amazon.com/general/latest/gr/glue.html) and the [UpdateTable API](https://docs.aws.amazon.com/glue/latest/webapi/API_UpdateTable.html).\n+\n+\n+### DynamoDB for locking Glue tables\n+\n+Glue does not have a strong guarantee over concurrent updates to a table. \n+Although it throws `ConcurrentModificationException` when detecting two processes updating a table at the same time,\n+there is no guarantee that one update would not clobber the other update.\n+Therefore, DynamoDB lock is enabled by default for Glue, so that for every commit, \n+`GlueCatalog` first obtains a lock using a helper DynamoDB table and then try to safely modify the Glue table.\n+User must specify a table name through catalog property `gluecatalog.lock.table` as the helper DynamoDB lock table to use.\n+It is recommend to use the same DynamoDB table for operations in the same Glue catalog,\n+and use a different table for a different Glue catalog in another account or region.\n+If the lock table with the given name does not exist in DynamoDB, a new table is created with billing mode set as [Pay-per-Request](https://aws.amazon.com/blogs/aws/amazon-dynamodb-on-demand-no-capacity-planning-and-pay-per-request-pricing).\n+The lock has the following additional properties:\n+\n+* `gluecatalog.lock.wait-ms`:  max time to wait for lock acquisition, default to 3 minutes\n+* `gluecatalog.lock.expire-ms`: max time a table can be locked by a process, default to 20 minutes\n+\n+If your use case only consists of single-process low-frequency (e.g. hourly, daily) updates to a table,\n+you can also turn off this locking feature by setting `gluecatalog.lock.enabled` as false.\n+\n+### Warehouse Location\n+\n+By default, Glue uses `S3FileIO` and only allows a warehouse location in S3. \n+To store data in a different local or cloud store, Glue catalog can switch to use `HadoopFileIO` \n+or any custom FileIO using the mechanism described in the [custom FileIO](../custom-catalog/#custom-file-io-implementation) section.\n+\n+## S3 FileIO\n+\n+Iceberg allows user to write data to S3 through `S3FileIO`.\n+`GlueCatalog` by default uses this FileIO, and other catalogs can load this FileIO using the `io-impl` catalog property.\n+\n+### Progressive Multipart Upload\n+\n+`S3FileIO` implements a customized progressive multipart upload algorithm to upload data.\n+Data files are uploaded in parts in parallel as soon as each part is ready,\n+and each file part is deleted as soon as its upload process completes.\n+This provides maximized upload speed and minimized local disk usage during uploads.\n+Here are the configurations user can tune related to this feature:\n+\n+* `s3fileio.multipart.num-threads`: number of threads to use for uploading parts to S3 (shared pool across all output streams)\n+* `s3fileio.multipart.part.size`: the size of a single part for multipart upload requests, default to 32MB\n+* `s3fileio.multipart.threshold`: the threshold expressed as a factor times the multipart size at which to switch from uploading using a single put object request to uploading using multipart upload, default to 1.5\n+* `s3fileio.staging.dir`: the directory to hold temporary files, default to Java's `java.io.tmpdir` property value\n+\n+### S3 Server Side Encryption\n+\n+`S3FileIO` supports all 3 S3 server side encryption modes:\n+\n+* [SSE-S3](https://docs.aws.amazon.com/AmazonS3/latest/dev/UsingServerSideEncryption.html): When you use Server-Side Encryption with Amazon S3-Managed Keys (SSE-S3), each object is encrypted with a unique key. As an additional safeguard, it encrypts the key itself with a master key that it regularly rotates. Amazon S3 server-side encryption uses one of the strongest block ciphers available, 256-bit Advanced Encryption Standard (AES-256), to encrypt your data.\n+* [SSE-KMS](https://docs.aws.amazon.com/AmazonS3/latest/dev/UsingKMSEncryption.html): Server-Side Encryption with Customer Master Keys (CMKs) Stored in AWS Key Management Service (SSE-KMS) is similar to SSE-S3, but with some additional benefits and charges for using this service. There are separate permissions for the use of a CMK that provides added protection against unauthorized access of your objects in Amazon S3. SSE-KMS also provides you with an audit trail that shows when your CMK was used and by whom. Additionally, you can create and manage customer managed CMKs or use AWS managed CMKs that are unique to you, your service, and your Region.\n+* [SSE-C](https://docs.aws.amazon.com/AmazonS3/latest/dev/ServerSideEncryptionCustomerKeys.html): With Server-Side Encryption with Customer-Provided Keys (SSE-C), you manage the encryption keys and Amazon S3 manages the encryption, as it writes to disks, and decryption, when you access your objects.\n+\n+To enable server side encryption, use the following configuration properties:\n+\n+* `s3fileio.sse.type`: `none`, `s3`, `kms` or `custom`, default to `none`\n+* `s3fileio.sse.key`: a KMS Key ID or ARN for `kms` type (default to `aws/s3`), or a custom base-64 AES256 symmetric key for `custom` type.\n+* `s3fileio.sse.md5`: if SSE type is `custom`, this value must be set as the base-64 MD5 digest of the symmetric key to ensure integrity.\n+\n+### S3 Access Control List\n+\n+`S3FileIO` supports S3 access control list for detailed access control. \n+User can choose the ACL level by setting the `s3fileio.acl` property.\n+For more details, please read [S3 ACL Documentation](https://docs.aws.amazon.com/AmazonS3/latest/dev/acl-overview.html).\n+\n+### ObjectStoreLocationProvider\n+\n+S3 and many other cloud storage services [throttle requests based on object prefix](https://aws.amazon.com/premiumsupport/knowledge-center/s3-request-limit-avoid-throttling/). \n+This means data stored in a traditional Hive storage layout has bad read and write throughput since data files of the same partition are placed under the same prefix.\n+Iceberg by default uses the Hive storage layout, but can be switch to use a different `ObjectStoreLocationProvider`.\n+In this mode, a hash string is added to the beginning of each file path, so that files are equally distributed across all prefixes in an S3 bucket.\n+This results in minimized throttling and maximized throughput for S3-related IO operations.\n+For more details, please follow [LocationProvider Configuration](../custom-catalog/#custom-location-provider-implementation) section to enable this feature.  \n+\n+### S3 Strong Consistency\n+\n+In November 2020, S3 announced [strong consistency](https://aws.amazon.com/s3/consistency/) for all GET and LIST operations, and Iceberg is updated to fully leverage this feature.\n+When creating a new output file using `OutputFile.create()`, strong consistency check is used and an `AlreadyExistsException` will be thrown if the file already exists in S3.\n+\n+### Hadoop S3A", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2b3b8bc3d8aa06870ca26a5f68d3c59889fab45d"}, "originalPosition": 145}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDk4ODU0MQ==", "bodyText": "Here you are talking about storing data using s3a:// URLs as opposed to the above discussion about the S3A FileSystem right? This should probably be reworded to be clear about that if that is the case.", "url": "https://github.com/apache/iceberg/pull/1891#discussion_r544988541", "createdAt": "2020-12-17T10:43:16Z", "author": {"login": "massdosage"}, "path": "site/docs/aws.md", "diffHunk": "@@ -0,0 +1,212 @@\n+<!--\n+ - Licensed to the Apache Software Foundation (ASF) under one or more\n+ - contributor license agreements.  See the NOTICE file distributed with\n+ - this work for additional information regarding copyright ownership.\n+ - The ASF licenses this file to You under the Apache License, Version 2.0\n+ - (the \"License\"); you may not use this file except in compliance with\n+ - the License.  You may obtain a copy of the License at\n+ -\n+ -   http://www.apache.org/licenses/LICENSE-2.0\n+ -\n+ - Unless required by applicable law or agreed to in writing, software\n+ - distributed under the License is distributed on an \"AS IS\" BASIS,\n+ - WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ - See the License for the specific language governing permissions and\n+ - limitations under the License.\n+ -->\n+ \n+# Iceberg AWS Integrations\n+\n+Iceberg provides integration with different AWS services through the `iceberg-aws` module. \n+This section describes how to use Iceberg with AWS.\n+\n+## Runtime Packages\n+\n+The first thing to note is that the `iceberg-aws` module is not bundled with any engine runtime.\n+To use any features described in later sections, you need to include the following packages by yourself:\n+\n+* the [iceberg AWS package](https://mvnrepository.com/artifact/org.apache.iceberg/iceberg-aws)\n+* the [AWS SDK bundle](https://mvnrepository.com/artifact/software.amazon.awssdk/bundle), or individual AWS client packages if you would like to have a minimum dependency footprint. (please note that we use the new AWS v2 SDK instead of v1)\n+\n+For example, in Spark 3, you can start the SQL shell with:\n+\n+```sh\n+spark-sql --packages org.apache.iceberg:iceberg-spark3-runtime:0.11.0,org.apache.iceberg:iceberg-aws-runtime:0.11.0,software.amazon.awssdk:bundle:2.15.40 \\\n+    --conf spark.sql.catalog.my_catalog=org.apache.iceberg.spark.SparkCatalog \\\n+    --conf spark.sql.catalog.my_catalog.catalog-impl=org.apache.iceberg.aws.glue.GlueCatalog \\\n+    --conf spark.sql.catalog.my_catalog.warehouse=s3://my-bucket/my-key-prefix \\\n+    --conf spark.sql.catalog.my_catalog.gluecatalog.lock.table=myGlueLockTable\n+```\n+\n+## Glue Catalog\n+\n+Iceberg enables the use of [AWS Glue](https://aws.amazon.com/glue) as the `Catalog` implementation.\n+When used, an Iceberg `Namespace` is stored as a [Glue Database](https://docs.aws.amazon.com/glue/latest/dg/aws-glue-api-catalog-databases.html), \n+an Iceberg `Table` is stored as a [Glue Table](https://docs.aws.amazon.com/glue/latest/dg/aws-glue-api-catalog-tables.html),\n+an Iceberg `Snapshot` is stored as a [Glue TableVersion](https://docs.aws.amazon.com/glue/latest/dg/aws-glue-api-catalog-tables.html#aws-glue-api-catalog-tables-TableVersion). \n+You can start using Glue catalog by specifying the `catalog-impl` as `org.apache.iceberg.aws.glue.GlueCatalog`. \n+More details about loading the catalog can be found in individual engine pages, such as [Spark](../spark/#loading-a-custom-catalog) and [Flink](../flink/#creating-catalogs-and-using-catalogs).\n+\n+### Glue Catalog ID\n+\n+It is very common for an organization to store all the tables in a single Glue catalog in a single AWS account and run data computation in many different accounts. \n+In this case, you need to specify a Glue catalog ID when initializing `GlueCatalog`.\n+The Glue catalog ID you should use is the AWS account ID.\n+This is because in each AWS account, there is a single Glue catalog in each AWS region,\n+but the region is pre-determined by the Glue web client that is making the call.\n+If you would like to access a Glue catalog in a different region, you should configure you AWS client, see more details in [AWS client configuration](#aws-client-configurations).\n+It is also common to [assume a role](https://docs.aws.amazon.com/STS/latest/APIReference/API_AssumeRole.html) when having cross-account access. See [AssumeRoleConfigurer](#assumeroleconfigurer) for how to set up assume role credentials in Iceberg.\n+\n+### Skip Archive\n+\n+By default, Glue will store all the table versions created and user can rollback a table to any historical version if needed.\n+However, if you are streaming data to Iceberg, this will easily create a lot of Glue table versions.\n+Therefore, it is recommended to turn off the archive feature in Glue by setting `` to false.\n+For more details, please read [Glue Quotas](https://docs.aws.amazon.com/general/latest/gr/glue.html) and the [UpdateTable API](https://docs.aws.amazon.com/glue/latest/webapi/API_UpdateTable.html).\n+\n+\n+### DynamoDB for locking Glue tables\n+\n+Glue does not have a strong guarantee over concurrent updates to a table. \n+Although it throws `ConcurrentModificationException` when detecting two processes updating a table at the same time,\n+there is no guarantee that one update would not clobber the other update.\n+Therefore, DynamoDB lock is enabled by default for Glue, so that for every commit, \n+`GlueCatalog` first obtains a lock using a helper DynamoDB table and then try to safely modify the Glue table.\n+User must specify a table name through catalog property `gluecatalog.lock.table` as the helper DynamoDB lock table to use.\n+It is recommend to use the same DynamoDB table for operations in the same Glue catalog,\n+and use a different table for a different Glue catalog in another account or region.\n+If the lock table with the given name does not exist in DynamoDB, a new table is created with billing mode set as [Pay-per-Request](https://aws.amazon.com/blogs/aws/amazon-dynamodb-on-demand-no-capacity-planning-and-pay-per-request-pricing).\n+The lock has the following additional properties:\n+\n+* `gluecatalog.lock.wait-ms`:  max time to wait for lock acquisition, default to 3 minutes\n+* `gluecatalog.lock.expire-ms`: max time a table can be locked by a process, default to 20 minutes\n+\n+If your use case only consists of single-process low-frequency (e.g. hourly, daily) updates to a table,\n+you can also turn off this locking feature by setting `gluecatalog.lock.enabled` as false.\n+\n+### Warehouse Location\n+\n+By default, Glue uses `S3FileIO` and only allows a warehouse location in S3. \n+To store data in a different local or cloud store, Glue catalog can switch to use `HadoopFileIO` \n+or any custom FileIO using the mechanism described in the [custom FileIO](../custom-catalog/#custom-file-io-implementation) section.\n+\n+## S3 FileIO\n+\n+Iceberg allows user to write data to S3 through `S3FileIO`.\n+`GlueCatalog` by default uses this FileIO, and other catalogs can load this FileIO using the `io-impl` catalog property.\n+\n+### Progressive Multipart Upload\n+\n+`S3FileIO` implements a customized progressive multipart upload algorithm to upload data.\n+Data files are uploaded in parts in parallel as soon as each part is ready,\n+and each file part is deleted as soon as its upload process completes.\n+This provides maximized upload speed and minimized local disk usage during uploads.\n+Here are the configurations user can tune related to this feature:\n+\n+* `s3fileio.multipart.num-threads`: number of threads to use for uploading parts to S3 (shared pool across all output streams)\n+* `s3fileio.multipart.part.size`: the size of a single part for multipart upload requests, default to 32MB\n+* `s3fileio.multipart.threshold`: the threshold expressed as a factor times the multipart size at which to switch from uploading using a single put object request to uploading using multipart upload, default to 1.5\n+* `s3fileio.staging.dir`: the directory to hold temporary files, default to Java's `java.io.tmpdir` property value\n+\n+### S3 Server Side Encryption\n+\n+`S3FileIO` supports all 3 S3 server side encryption modes:\n+\n+* [SSE-S3](https://docs.aws.amazon.com/AmazonS3/latest/dev/UsingServerSideEncryption.html): When you use Server-Side Encryption with Amazon S3-Managed Keys (SSE-S3), each object is encrypted with a unique key. As an additional safeguard, it encrypts the key itself with a master key that it regularly rotates. Amazon S3 server-side encryption uses one of the strongest block ciphers available, 256-bit Advanced Encryption Standard (AES-256), to encrypt your data.\n+* [SSE-KMS](https://docs.aws.amazon.com/AmazonS3/latest/dev/UsingKMSEncryption.html): Server-Side Encryption with Customer Master Keys (CMKs) Stored in AWS Key Management Service (SSE-KMS) is similar to SSE-S3, but with some additional benefits and charges for using this service. There are separate permissions for the use of a CMK that provides added protection against unauthorized access of your objects in Amazon S3. SSE-KMS also provides you with an audit trail that shows when your CMK was used and by whom. Additionally, you can create and manage customer managed CMKs or use AWS managed CMKs that are unique to you, your service, and your Region.\n+* [SSE-C](https://docs.aws.amazon.com/AmazonS3/latest/dev/ServerSideEncryptionCustomerKeys.html): With Server-Side Encryption with Customer-Provided Keys (SSE-C), you manage the encryption keys and Amazon S3 manages the encryption, as it writes to disks, and decryption, when you access your objects.\n+\n+To enable server side encryption, use the following configuration properties:\n+\n+* `s3fileio.sse.type`: `none`, `s3`, `kms` or `custom`, default to `none`\n+* `s3fileio.sse.key`: a KMS Key ID or ARN for `kms` type (default to `aws/s3`), or a custom base-64 AES256 symmetric key for `custom` type.\n+* `s3fileio.sse.md5`: if SSE type is `custom`, this value must be set as the base-64 MD5 digest of the symmetric key to ensure integrity.\n+\n+### S3 Access Control List\n+\n+`S3FileIO` supports S3 access control list for detailed access control. \n+User can choose the ACL level by setting the `s3fileio.acl` property.\n+For more details, please read [S3 ACL Documentation](https://docs.aws.amazon.com/AmazonS3/latest/dev/acl-overview.html).\n+\n+### ObjectStoreLocationProvider\n+\n+S3 and many other cloud storage services [throttle requests based on object prefix](https://aws.amazon.com/premiumsupport/knowledge-center/s3-request-limit-avoid-throttling/). \n+This means data stored in a traditional Hive storage layout has bad read and write throughput since data files of the same partition are placed under the same prefix.\n+Iceberg by default uses the Hive storage layout, but can be switch to use a different `ObjectStoreLocationProvider`.\n+In this mode, a hash string is added to the beginning of each file path, so that files are equally distributed across all prefixes in an S3 bucket.\n+This results in minimized throttling and maximized throughput for S3-related IO operations.\n+For more details, please follow [LocationProvider Configuration](../custom-catalog/#custom-location-provider-implementation) section to enable this feature.  \n+\n+### S3 Strong Consistency\n+\n+In November 2020, S3 announced [strong consistency](https://aws.amazon.com/s3/consistency/) for all GET and LIST operations, and Iceberg is updated to fully leverage this feature.\n+When creating a new output file using `OutputFile.create()`, strong consistency check is used and an `AlreadyExistsException` will be thrown if the file already exists in S3.\n+\n+### Hadoop S3A\n+\n+Before `S3FileIO` was introduced, many Iceberg users choose to use `HadoopFileIO` to write data to S3 through the [S3A FileSystem](https://github.com/apache/hadoop/blob/trunk/hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/S3AFileSystem.java).\n+As introduced in the above sections, the `S3FileIO` adopts latest AWS clients and S3 features for optimzied security and performance,\n+ and is thus recommend for S3 use case over S3A.\n+\n+`S3FileIO` is compatible with legacy URI schemes written by S3A, \n+so any existing tables with `s3a://` or `s3n://` file paths are treated as equivalent `s3://` file paths.    \n+\n+If for any reason you have to use S3A, here are the instructions:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2b3b8bc3d8aa06870ca26a5f68d3c59889fab45d"}, "originalPosition": 154}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDk4ODczNQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            1. to store data using S3A, specify the `warehouse` catalog property to be an S3A path, e.g. `s3a://my-bucket/my-warehouse` \n          \n          \n            \n            1. To store data using S3A, specify the `warehouse` catalog property to be an S3A path, e.g. `s3a://my-bucket/my-warehouse`", "url": "https://github.com/apache/iceberg/pull/1891#discussion_r544988735", "createdAt": "2020-12-17T10:43:33Z", "author": {"login": "massdosage"}, "path": "site/docs/aws.md", "diffHunk": "@@ -0,0 +1,212 @@\n+<!--\n+ - Licensed to the Apache Software Foundation (ASF) under one or more\n+ - contributor license agreements.  See the NOTICE file distributed with\n+ - this work for additional information regarding copyright ownership.\n+ - The ASF licenses this file to You under the Apache License, Version 2.0\n+ - (the \"License\"); you may not use this file except in compliance with\n+ - the License.  You may obtain a copy of the License at\n+ -\n+ -   http://www.apache.org/licenses/LICENSE-2.0\n+ -\n+ - Unless required by applicable law or agreed to in writing, software\n+ - distributed under the License is distributed on an \"AS IS\" BASIS,\n+ - WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ - See the License for the specific language governing permissions and\n+ - limitations under the License.\n+ -->\n+ \n+# Iceberg AWS Integrations\n+\n+Iceberg provides integration with different AWS services through the `iceberg-aws` module. \n+This section describes how to use Iceberg with AWS.\n+\n+## Runtime Packages\n+\n+The first thing to note is that the `iceberg-aws` module is not bundled with any engine runtime.\n+To use any features described in later sections, you need to include the following packages by yourself:\n+\n+* the [iceberg AWS package](https://mvnrepository.com/artifact/org.apache.iceberg/iceberg-aws)\n+* the [AWS SDK bundle](https://mvnrepository.com/artifact/software.amazon.awssdk/bundle), or individual AWS client packages if you would like to have a minimum dependency footprint. (please note that we use the new AWS v2 SDK instead of v1)\n+\n+For example, in Spark 3, you can start the SQL shell with:\n+\n+```sh\n+spark-sql --packages org.apache.iceberg:iceberg-spark3-runtime:0.11.0,org.apache.iceberg:iceberg-aws-runtime:0.11.0,software.amazon.awssdk:bundle:2.15.40 \\\n+    --conf spark.sql.catalog.my_catalog=org.apache.iceberg.spark.SparkCatalog \\\n+    --conf spark.sql.catalog.my_catalog.catalog-impl=org.apache.iceberg.aws.glue.GlueCatalog \\\n+    --conf spark.sql.catalog.my_catalog.warehouse=s3://my-bucket/my-key-prefix \\\n+    --conf spark.sql.catalog.my_catalog.gluecatalog.lock.table=myGlueLockTable\n+```\n+\n+## Glue Catalog\n+\n+Iceberg enables the use of [AWS Glue](https://aws.amazon.com/glue) as the `Catalog` implementation.\n+When used, an Iceberg `Namespace` is stored as a [Glue Database](https://docs.aws.amazon.com/glue/latest/dg/aws-glue-api-catalog-databases.html), \n+an Iceberg `Table` is stored as a [Glue Table](https://docs.aws.amazon.com/glue/latest/dg/aws-glue-api-catalog-tables.html),\n+an Iceberg `Snapshot` is stored as a [Glue TableVersion](https://docs.aws.amazon.com/glue/latest/dg/aws-glue-api-catalog-tables.html#aws-glue-api-catalog-tables-TableVersion). \n+You can start using Glue catalog by specifying the `catalog-impl` as `org.apache.iceberg.aws.glue.GlueCatalog`. \n+More details about loading the catalog can be found in individual engine pages, such as [Spark](../spark/#loading-a-custom-catalog) and [Flink](../flink/#creating-catalogs-and-using-catalogs).\n+\n+### Glue Catalog ID\n+\n+It is very common for an organization to store all the tables in a single Glue catalog in a single AWS account and run data computation in many different accounts. \n+In this case, you need to specify a Glue catalog ID when initializing `GlueCatalog`.\n+The Glue catalog ID you should use is the AWS account ID.\n+This is because in each AWS account, there is a single Glue catalog in each AWS region,\n+but the region is pre-determined by the Glue web client that is making the call.\n+If you would like to access a Glue catalog in a different region, you should configure you AWS client, see more details in [AWS client configuration](#aws-client-configurations).\n+It is also common to [assume a role](https://docs.aws.amazon.com/STS/latest/APIReference/API_AssumeRole.html) when having cross-account access. See [AssumeRoleConfigurer](#assumeroleconfigurer) for how to set up assume role credentials in Iceberg.\n+\n+### Skip Archive\n+\n+By default, Glue will store all the table versions created and user can rollback a table to any historical version if needed.\n+However, if you are streaming data to Iceberg, this will easily create a lot of Glue table versions.\n+Therefore, it is recommended to turn off the archive feature in Glue by setting `` to false.\n+For more details, please read [Glue Quotas](https://docs.aws.amazon.com/general/latest/gr/glue.html) and the [UpdateTable API](https://docs.aws.amazon.com/glue/latest/webapi/API_UpdateTable.html).\n+\n+\n+### DynamoDB for locking Glue tables\n+\n+Glue does not have a strong guarantee over concurrent updates to a table. \n+Although it throws `ConcurrentModificationException` when detecting two processes updating a table at the same time,\n+there is no guarantee that one update would not clobber the other update.\n+Therefore, DynamoDB lock is enabled by default for Glue, so that for every commit, \n+`GlueCatalog` first obtains a lock using a helper DynamoDB table and then try to safely modify the Glue table.\n+User must specify a table name through catalog property `gluecatalog.lock.table` as the helper DynamoDB lock table to use.\n+It is recommend to use the same DynamoDB table for operations in the same Glue catalog,\n+and use a different table for a different Glue catalog in another account or region.\n+If the lock table with the given name does not exist in DynamoDB, a new table is created with billing mode set as [Pay-per-Request](https://aws.amazon.com/blogs/aws/amazon-dynamodb-on-demand-no-capacity-planning-and-pay-per-request-pricing).\n+The lock has the following additional properties:\n+\n+* `gluecatalog.lock.wait-ms`:  max time to wait for lock acquisition, default to 3 minutes\n+* `gluecatalog.lock.expire-ms`: max time a table can be locked by a process, default to 20 minutes\n+\n+If your use case only consists of single-process low-frequency (e.g. hourly, daily) updates to a table,\n+you can also turn off this locking feature by setting `gluecatalog.lock.enabled` as false.\n+\n+### Warehouse Location\n+\n+By default, Glue uses `S3FileIO` and only allows a warehouse location in S3. \n+To store data in a different local or cloud store, Glue catalog can switch to use `HadoopFileIO` \n+or any custom FileIO using the mechanism described in the [custom FileIO](../custom-catalog/#custom-file-io-implementation) section.\n+\n+## S3 FileIO\n+\n+Iceberg allows user to write data to S3 through `S3FileIO`.\n+`GlueCatalog` by default uses this FileIO, and other catalogs can load this FileIO using the `io-impl` catalog property.\n+\n+### Progressive Multipart Upload\n+\n+`S3FileIO` implements a customized progressive multipart upload algorithm to upload data.\n+Data files are uploaded in parts in parallel as soon as each part is ready,\n+and each file part is deleted as soon as its upload process completes.\n+This provides maximized upload speed and minimized local disk usage during uploads.\n+Here are the configurations user can tune related to this feature:\n+\n+* `s3fileio.multipart.num-threads`: number of threads to use for uploading parts to S3 (shared pool across all output streams)\n+* `s3fileio.multipart.part.size`: the size of a single part for multipart upload requests, default to 32MB\n+* `s3fileio.multipart.threshold`: the threshold expressed as a factor times the multipart size at which to switch from uploading using a single put object request to uploading using multipart upload, default to 1.5\n+* `s3fileio.staging.dir`: the directory to hold temporary files, default to Java's `java.io.tmpdir` property value\n+\n+### S3 Server Side Encryption\n+\n+`S3FileIO` supports all 3 S3 server side encryption modes:\n+\n+* [SSE-S3](https://docs.aws.amazon.com/AmazonS3/latest/dev/UsingServerSideEncryption.html): When you use Server-Side Encryption with Amazon S3-Managed Keys (SSE-S3), each object is encrypted with a unique key. As an additional safeguard, it encrypts the key itself with a master key that it regularly rotates. Amazon S3 server-side encryption uses one of the strongest block ciphers available, 256-bit Advanced Encryption Standard (AES-256), to encrypt your data.\n+* [SSE-KMS](https://docs.aws.amazon.com/AmazonS3/latest/dev/UsingKMSEncryption.html): Server-Side Encryption with Customer Master Keys (CMKs) Stored in AWS Key Management Service (SSE-KMS) is similar to SSE-S3, but with some additional benefits and charges for using this service. There are separate permissions for the use of a CMK that provides added protection against unauthorized access of your objects in Amazon S3. SSE-KMS also provides you with an audit trail that shows when your CMK was used and by whom. Additionally, you can create and manage customer managed CMKs or use AWS managed CMKs that are unique to you, your service, and your Region.\n+* [SSE-C](https://docs.aws.amazon.com/AmazonS3/latest/dev/ServerSideEncryptionCustomerKeys.html): With Server-Side Encryption with Customer-Provided Keys (SSE-C), you manage the encryption keys and Amazon S3 manages the encryption, as it writes to disks, and decryption, when you access your objects.\n+\n+To enable server side encryption, use the following configuration properties:\n+\n+* `s3fileio.sse.type`: `none`, `s3`, `kms` or `custom`, default to `none`\n+* `s3fileio.sse.key`: a KMS Key ID or ARN for `kms` type (default to `aws/s3`), or a custom base-64 AES256 symmetric key for `custom` type.\n+* `s3fileio.sse.md5`: if SSE type is `custom`, this value must be set as the base-64 MD5 digest of the symmetric key to ensure integrity.\n+\n+### S3 Access Control List\n+\n+`S3FileIO` supports S3 access control list for detailed access control. \n+User can choose the ACL level by setting the `s3fileio.acl` property.\n+For more details, please read [S3 ACL Documentation](https://docs.aws.amazon.com/AmazonS3/latest/dev/acl-overview.html).\n+\n+### ObjectStoreLocationProvider\n+\n+S3 and many other cloud storage services [throttle requests based on object prefix](https://aws.amazon.com/premiumsupport/knowledge-center/s3-request-limit-avoid-throttling/). \n+This means data stored in a traditional Hive storage layout has bad read and write throughput since data files of the same partition are placed under the same prefix.\n+Iceberg by default uses the Hive storage layout, but can be switch to use a different `ObjectStoreLocationProvider`.\n+In this mode, a hash string is added to the beginning of each file path, so that files are equally distributed across all prefixes in an S3 bucket.\n+This results in minimized throttling and maximized throughput for S3-related IO operations.\n+For more details, please follow [LocationProvider Configuration](../custom-catalog/#custom-location-provider-implementation) section to enable this feature.  \n+\n+### S3 Strong Consistency\n+\n+In November 2020, S3 announced [strong consistency](https://aws.amazon.com/s3/consistency/) for all GET and LIST operations, and Iceberg is updated to fully leverage this feature.\n+When creating a new output file using `OutputFile.create()`, strong consistency check is used and an `AlreadyExistsException` will be thrown if the file already exists in S3.\n+\n+### Hadoop S3A\n+\n+Before `S3FileIO` was introduced, many Iceberg users choose to use `HadoopFileIO` to write data to S3 through the [S3A FileSystem](https://github.com/apache/hadoop/blob/trunk/hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/S3AFileSystem.java).\n+As introduced in the above sections, the `S3FileIO` adopts latest AWS clients and S3 features for optimzied security and performance,\n+ and is thus recommend for S3 use case over S3A.\n+\n+`S3FileIO` is compatible with legacy URI schemes written by S3A, \n+so any existing tables with `s3a://` or `s3n://` file paths are treated as equivalent `s3://` file paths.    \n+\n+If for any reason you have to use S3A, here are the instructions:\n+\n+1. to store data using S3A, specify the `warehouse` catalog property to be an S3A path, e.g. `s3a://my-bucket/my-warehouse` ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2b3b8bc3d8aa06870ca26a5f68d3c59889fab45d"}, "originalPosition": 156}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDk4OTE1NQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            2. For `HiveCatalog`, to store metadata also using S3A, specify Hadoop config `hive.metastore.warehouse.dir` to be an S3A path.\n          \n          \n            \n            2. For `HiveCatalog`, to also store metadata using S3A, specify the Hadoop config property `hive.metastore.warehouse.dir` to be an S3A path.", "url": "https://github.com/apache/iceberg/pull/1891#discussion_r544989155", "createdAt": "2020-12-17T10:44:09Z", "author": {"login": "massdosage"}, "path": "site/docs/aws.md", "diffHunk": "@@ -0,0 +1,212 @@\n+<!--\n+ - Licensed to the Apache Software Foundation (ASF) under one or more\n+ - contributor license agreements.  See the NOTICE file distributed with\n+ - this work for additional information regarding copyright ownership.\n+ - The ASF licenses this file to You under the Apache License, Version 2.0\n+ - (the \"License\"); you may not use this file except in compliance with\n+ - the License.  You may obtain a copy of the License at\n+ -\n+ -   http://www.apache.org/licenses/LICENSE-2.0\n+ -\n+ - Unless required by applicable law or agreed to in writing, software\n+ - distributed under the License is distributed on an \"AS IS\" BASIS,\n+ - WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ - See the License for the specific language governing permissions and\n+ - limitations under the License.\n+ -->\n+ \n+# Iceberg AWS Integrations\n+\n+Iceberg provides integration with different AWS services through the `iceberg-aws` module. \n+This section describes how to use Iceberg with AWS.\n+\n+## Runtime Packages\n+\n+The first thing to note is that the `iceberg-aws` module is not bundled with any engine runtime.\n+To use any features described in later sections, you need to include the following packages by yourself:\n+\n+* the [iceberg AWS package](https://mvnrepository.com/artifact/org.apache.iceberg/iceberg-aws)\n+* the [AWS SDK bundle](https://mvnrepository.com/artifact/software.amazon.awssdk/bundle), or individual AWS client packages if you would like to have a minimum dependency footprint. (please note that we use the new AWS v2 SDK instead of v1)\n+\n+For example, in Spark 3, you can start the SQL shell with:\n+\n+```sh\n+spark-sql --packages org.apache.iceberg:iceberg-spark3-runtime:0.11.0,org.apache.iceberg:iceberg-aws-runtime:0.11.0,software.amazon.awssdk:bundle:2.15.40 \\\n+    --conf spark.sql.catalog.my_catalog=org.apache.iceberg.spark.SparkCatalog \\\n+    --conf spark.sql.catalog.my_catalog.catalog-impl=org.apache.iceberg.aws.glue.GlueCatalog \\\n+    --conf spark.sql.catalog.my_catalog.warehouse=s3://my-bucket/my-key-prefix \\\n+    --conf spark.sql.catalog.my_catalog.gluecatalog.lock.table=myGlueLockTable\n+```\n+\n+## Glue Catalog\n+\n+Iceberg enables the use of [AWS Glue](https://aws.amazon.com/glue) as the `Catalog` implementation.\n+When used, an Iceberg `Namespace` is stored as a [Glue Database](https://docs.aws.amazon.com/glue/latest/dg/aws-glue-api-catalog-databases.html), \n+an Iceberg `Table` is stored as a [Glue Table](https://docs.aws.amazon.com/glue/latest/dg/aws-glue-api-catalog-tables.html),\n+an Iceberg `Snapshot` is stored as a [Glue TableVersion](https://docs.aws.amazon.com/glue/latest/dg/aws-glue-api-catalog-tables.html#aws-glue-api-catalog-tables-TableVersion). \n+You can start using Glue catalog by specifying the `catalog-impl` as `org.apache.iceberg.aws.glue.GlueCatalog`. \n+More details about loading the catalog can be found in individual engine pages, such as [Spark](../spark/#loading-a-custom-catalog) and [Flink](../flink/#creating-catalogs-and-using-catalogs).\n+\n+### Glue Catalog ID\n+\n+It is very common for an organization to store all the tables in a single Glue catalog in a single AWS account and run data computation in many different accounts. \n+In this case, you need to specify a Glue catalog ID when initializing `GlueCatalog`.\n+The Glue catalog ID you should use is the AWS account ID.\n+This is because in each AWS account, there is a single Glue catalog in each AWS region,\n+but the region is pre-determined by the Glue web client that is making the call.\n+If you would like to access a Glue catalog in a different region, you should configure you AWS client, see more details in [AWS client configuration](#aws-client-configurations).\n+It is also common to [assume a role](https://docs.aws.amazon.com/STS/latest/APIReference/API_AssumeRole.html) when having cross-account access. See [AssumeRoleConfigurer](#assumeroleconfigurer) for how to set up assume role credentials in Iceberg.\n+\n+### Skip Archive\n+\n+By default, Glue will store all the table versions created and user can rollback a table to any historical version if needed.\n+However, if you are streaming data to Iceberg, this will easily create a lot of Glue table versions.\n+Therefore, it is recommended to turn off the archive feature in Glue by setting `` to false.\n+For more details, please read [Glue Quotas](https://docs.aws.amazon.com/general/latest/gr/glue.html) and the [UpdateTable API](https://docs.aws.amazon.com/glue/latest/webapi/API_UpdateTable.html).\n+\n+\n+### DynamoDB for locking Glue tables\n+\n+Glue does not have a strong guarantee over concurrent updates to a table. \n+Although it throws `ConcurrentModificationException` when detecting two processes updating a table at the same time,\n+there is no guarantee that one update would not clobber the other update.\n+Therefore, DynamoDB lock is enabled by default for Glue, so that for every commit, \n+`GlueCatalog` first obtains a lock using a helper DynamoDB table and then try to safely modify the Glue table.\n+User must specify a table name through catalog property `gluecatalog.lock.table` as the helper DynamoDB lock table to use.\n+It is recommend to use the same DynamoDB table for operations in the same Glue catalog,\n+and use a different table for a different Glue catalog in another account or region.\n+If the lock table with the given name does not exist in DynamoDB, a new table is created with billing mode set as [Pay-per-Request](https://aws.amazon.com/blogs/aws/amazon-dynamodb-on-demand-no-capacity-planning-and-pay-per-request-pricing).\n+The lock has the following additional properties:\n+\n+* `gluecatalog.lock.wait-ms`:  max time to wait for lock acquisition, default to 3 minutes\n+* `gluecatalog.lock.expire-ms`: max time a table can be locked by a process, default to 20 minutes\n+\n+If your use case only consists of single-process low-frequency (e.g. hourly, daily) updates to a table,\n+you can also turn off this locking feature by setting `gluecatalog.lock.enabled` as false.\n+\n+### Warehouse Location\n+\n+By default, Glue uses `S3FileIO` and only allows a warehouse location in S3. \n+To store data in a different local or cloud store, Glue catalog can switch to use `HadoopFileIO` \n+or any custom FileIO using the mechanism described in the [custom FileIO](../custom-catalog/#custom-file-io-implementation) section.\n+\n+## S3 FileIO\n+\n+Iceberg allows user to write data to S3 through `S3FileIO`.\n+`GlueCatalog` by default uses this FileIO, and other catalogs can load this FileIO using the `io-impl` catalog property.\n+\n+### Progressive Multipart Upload\n+\n+`S3FileIO` implements a customized progressive multipart upload algorithm to upload data.\n+Data files are uploaded in parts in parallel as soon as each part is ready,\n+and each file part is deleted as soon as its upload process completes.\n+This provides maximized upload speed and minimized local disk usage during uploads.\n+Here are the configurations user can tune related to this feature:\n+\n+* `s3fileio.multipart.num-threads`: number of threads to use for uploading parts to S3 (shared pool across all output streams)\n+* `s3fileio.multipart.part.size`: the size of a single part for multipart upload requests, default to 32MB\n+* `s3fileio.multipart.threshold`: the threshold expressed as a factor times the multipart size at which to switch from uploading using a single put object request to uploading using multipart upload, default to 1.5\n+* `s3fileio.staging.dir`: the directory to hold temporary files, default to Java's `java.io.tmpdir` property value\n+\n+### S3 Server Side Encryption\n+\n+`S3FileIO` supports all 3 S3 server side encryption modes:\n+\n+* [SSE-S3](https://docs.aws.amazon.com/AmazonS3/latest/dev/UsingServerSideEncryption.html): When you use Server-Side Encryption with Amazon S3-Managed Keys (SSE-S3), each object is encrypted with a unique key. As an additional safeguard, it encrypts the key itself with a master key that it regularly rotates. Amazon S3 server-side encryption uses one of the strongest block ciphers available, 256-bit Advanced Encryption Standard (AES-256), to encrypt your data.\n+* [SSE-KMS](https://docs.aws.amazon.com/AmazonS3/latest/dev/UsingKMSEncryption.html): Server-Side Encryption with Customer Master Keys (CMKs) Stored in AWS Key Management Service (SSE-KMS) is similar to SSE-S3, but with some additional benefits and charges for using this service. There are separate permissions for the use of a CMK that provides added protection against unauthorized access of your objects in Amazon S3. SSE-KMS also provides you with an audit trail that shows when your CMK was used and by whom. Additionally, you can create and manage customer managed CMKs or use AWS managed CMKs that are unique to you, your service, and your Region.\n+* [SSE-C](https://docs.aws.amazon.com/AmazonS3/latest/dev/ServerSideEncryptionCustomerKeys.html): With Server-Side Encryption with Customer-Provided Keys (SSE-C), you manage the encryption keys and Amazon S3 manages the encryption, as it writes to disks, and decryption, when you access your objects.\n+\n+To enable server side encryption, use the following configuration properties:\n+\n+* `s3fileio.sse.type`: `none`, `s3`, `kms` or `custom`, default to `none`\n+* `s3fileio.sse.key`: a KMS Key ID or ARN for `kms` type (default to `aws/s3`), or a custom base-64 AES256 symmetric key for `custom` type.\n+* `s3fileio.sse.md5`: if SSE type is `custom`, this value must be set as the base-64 MD5 digest of the symmetric key to ensure integrity.\n+\n+### S3 Access Control List\n+\n+`S3FileIO` supports S3 access control list for detailed access control. \n+User can choose the ACL level by setting the `s3fileio.acl` property.\n+For more details, please read [S3 ACL Documentation](https://docs.aws.amazon.com/AmazonS3/latest/dev/acl-overview.html).\n+\n+### ObjectStoreLocationProvider\n+\n+S3 and many other cloud storage services [throttle requests based on object prefix](https://aws.amazon.com/premiumsupport/knowledge-center/s3-request-limit-avoid-throttling/). \n+This means data stored in a traditional Hive storage layout has bad read and write throughput since data files of the same partition are placed under the same prefix.\n+Iceberg by default uses the Hive storage layout, but can be switch to use a different `ObjectStoreLocationProvider`.\n+In this mode, a hash string is added to the beginning of each file path, so that files are equally distributed across all prefixes in an S3 bucket.\n+This results in minimized throttling and maximized throughput for S3-related IO operations.\n+For more details, please follow [LocationProvider Configuration](../custom-catalog/#custom-location-provider-implementation) section to enable this feature.  \n+\n+### S3 Strong Consistency\n+\n+In November 2020, S3 announced [strong consistency](https://aws.amazon.com/s3/consistency/) for all GET and LIST operations, and Iceberg is updated to fully leverage this feature.\n+When creating a new output file using `OutputFile.create()`, strong consistency check is used and an `AlreadyExistsException` will be thrown if the file already exists in S3.\n+\n+### Hadoop S3A\n+\n+Before `S3FileIO` was introduced, many Iceberg users choose to use `HadoopFileIO` to write data to S3 through the [S3A FileSystem](https://github.com/apache/hadoop/blob/trunk/hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/S3AFileSystem.java).\n+As introduced in the above sections, the `S3FileIO` adopts latest AWS clients and S3 features for optimzied security and performance,\n+ and is thus recommend for S3 use case over S3A.\n+\n+`S3FileIO` is compatible with legacy URI schemes written by S3A, \n+so any existing tables with `s3a://` or `s3n://` file paths are treated as equivalent `s3://` file paths.    \n+\n+If for any reason you have to use S3A, here are the instructions:\n+\n+1. to store data using S3A, specify the `warehouse` catalog property to be an S3A path, e.g. `s3a://my-bucket/my-warehouse` \n+2. For `HiveCatalog`, to store metadata also using S3A, specify Hadoop config `hive.metastore.warehouse.dir` to be an S3A path.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2b3b8bc3d8aa06870ca26a5f68d3c59889fab45d"}, "originalPosition": 157}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDk4OTU4Ng==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            3. Add [hadoop-aws](https://mvnrepository.com/artifact/org.apache.hadoop/hadoop-aws) as a runtime dependency, configure AWS settings based on [hadoop-aws documentation](https://hadoop.apache.org/docs/current/hadoop-aws/tools/hadoop-aws/index.html) (make sure you check the version, s3a configuration varies a lot based on the version you use)   \n          \n          \n            \n            3. Add [hadoop-aws](https://mvnrepository.com/artifact/org.apache.hadoop/hadoop-aws) as a runtime dependency, configure AWS settings based on [hadoop-aws documentation](https://hadoop.apache.org/docs/current/hadoop-aws/tools/hadoop-aws/index.html) (make sure you check the version as S3A configuration varies a lot based on the version you use) .", "url": "https://github.com/apache/iceberg/pull/1891#discussion_r544989586", "createdAt": "2020-12-17T10:44:48Z", "author": {"login": "massdosage"}, "path": "site/docs/aws.md", "diffHunk": "@@ -0,0 +1,212 @@\n+<!--\n+ - Licensed to the Apache Software Foundation (ASF) under one or more\n+ - contributor license agreements.  See the NOTICE file distributed with\n+ - this work for additional information regarding copyright ownership.\n+ - The ASF licenses this file to You under the Apache License, Version 2.0\n+ - (the \"License\"); you may not use this file except in compliance with\n+ - the License.  You may obtain a copy of the License at\n+ -\n+ -   http://www.apache.org/licenses/LICENSE-2.0\n+ -\n+ - Unless required by applicable law or agreed to in writing, software\n+ - distributed under the License is distributed on an \"AS IS\" BASIS,\n+ - WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ - See the License for the specific language governing permissions and\n+ - limitations under the License.\n+ -->\n+ \n+# Iceberg AWS Integrations\n+\n+Iceberg provides integration with different AWS services through the `iceberg-aws` module. \n+This section describes how to use Iceberg with AWS.\n+\n+## Runtime Packages\n+\n+The first thing to note is that the `iceberg-aws` module is not bundled with any engine runtime.\n+To use any features described in later sections, you need to include the following packages by yourself:\n+\n+* the [iceberg AWS package](https://mvnrepository.com/artifact/org.apache.iceberg/iceberg-aws)\n+* the [AWS SDK bundle](https://mvnrepository.com/artifact/software.amazon.awssdk/bundle), or individual AWS client packages if you would like to have a minimum dependency footprint. (please note that we use the new AWS v2 SDK instead of v1)\n+\n+For example, in Spark 3, you can start the SQL shell with:\n+\n+```sh\n+spark-sql --packages org.apache.iceberg:iceberg-spark3-runtime:0.11.0,org.apache.iceberg:iceberg-aws-runtime:0.11.0,software.amazon.awssdk:bundle:2.15.40 \\\n+    --conf spark.sql.catalog.my_catalog=org.apache.iceberg.spark.SparkCatalog \\\n+    --conf spark.sql.catalog.my_catalog.catalog-impl=org.apache.iceberg.aws.glue.GlueCatalog \\\n+    --conf spark.sql.catalog.my_catalog.warehouse=s3://my-bucket/my-key-prefix \\\n+    --conf spark.sql.catalog.my_catalog.gluecatalog.lock.table=myGlueLockTable\n+```\n+\n+## Glue Catalog\n+\n+Iceberg enables the use of [AWS Glue](https://aws.amazon.com/glue) as the `Catalog` implementation.\n+When used, an Iceberg `Namespace` is stored as a [Glue Database](https://docs.aws.amazon.com/glue/latest/dg/aws-glue-api-catalog-databases.html), \n+an Iceberg `Table` is stored as a [Glue Table](https://docs.aws.amazon.com/glue/latest/dg/aws-glue-api-catalog-tables.html),\n+an Iceberg `Snapshot` is stored as a [Glue TableVersion](https://docs.aws.amazon.com/glue/latest/dg/aws-glue-api-catalog-tables.html#aws-glue-api-catalog-tables-TableVersion). \n+You can start using Glue catalog by specifying the `catalog-impl` as `org.apache.iceberg.aws.glue.GlueCatalog`. \n+More details about loading the catalog can be found in individual engine pages, such as [Spark](../spark/#loading-a-custom-catalog) and [Flink](../flink/#creating-catalogs-and-using-catalogs).\n+\n+### Glue Catalog ID\n+\n+It is very common for an organization to store all the tables in a single Glue catalog in a single AWS account and run data computation in many different accounts. \n+In this case, you need to specify a Glue catalog ID when initializing `GlueCatalog`.\n+The Glue catalog ID you should use is the AWS account ID.\n+This is because in each AWS account, there is a single Glue catalog in each AWS region,\n+but the region is pre-determined by the Glue web client that is making the call.\n+If you would like to access a Glue catalog in a different region, you should configure you AWS client, see more details in [AWS client configuration](#aws-client-configurations).\n+It is also common to [assume a role](https://docs.aws.amazon.com/STS/latest/APIReference/API_AssumeRole.html) when having cross-account access. See [AssumeRoleConfigurer](#assumeroleconfigurer) for how to set up assume role credentials in Iceberg.\n+\n+### Skip Archive\n+\n+By default, Glue will store all the table versions created and user can rollback a table to any historical version if needed.\n+However, if you are streaming data to Iceberg, this will easily create a lot of Glue table versions.\n+Therefore, it is recommended to turn off the archive feature in Glue by setting `` to false.\n+For more details, please read [Glue Quotas](https://docs.aws.amazon.com/general/latest/gr/glue.html) and the [UpdateTable API](https://docs.aws.amazon.com/glue/latest/webapi/API_UpdateTable.html).\n+\n+\n+### DynamoDB for locking Glue tables\n+\n+Glue does not have a strong guarantee over concurrent updates to a table. \n+Although it throws `ConcurrentModificationException` when detecting two processes updating a table at the same time,\n+there is no guarantee that one update would not clobber the other update.\n+Therefore, DynamoDB lock is enabled by default for Glue, so that for every commit, \n+`GlueCatalog` first obtains a lock using a helper DynamoDB table and then try to safely modify the Glue table.\n+User must specify a table name through catalog property `gluecatalog.lock.table` as the helper DynamoDB lock table to use.\n+It is recommend to use the same DynamoDB table for operations in the same Glue catalog,\n+and use a different table for a different Glue catalog in another account or region.\n+If the lock table with the given name does not exist in DynamoDB, a new table is created with billing mode set as [Pay-per-Request](https://aws.amazon.com/blogs/aws/amazon-dynamodb-on-demand-no-capacity-planning-and-pay-per-request-pricing).\n+The lock has the following additional properties:\n+\n+* `gluecatalog.lock.wait-ms`:  max time to wait for lock acquisition, default to 3 minutes\n+* `gluecatalog.lock.expire-ms`: max time a table can be locked by a process, default to 20 minutes\n+\n+If your use case only consists of single-process low-frequency (e.g. hourly, daily) updates to a table,\n+you can also turn off this locking feature by setting `gluecatalog.lock.enabled` as false.\n+\n+### Warehouse Location\n+\n+By default, Glue uses `S3FileIO` and only allows a warehouse location in S3. \n+To store data in a different local or cloud store, Glue catalog can switch to use `HadoopFileIO` \n+or any custom FileIO using the mechanism described in the [custom FileIO](../custom-catalog/#custom-file-io-implementation) section.\n+\n+## S3 FileIO\n+\n+Iceberg allows user to write data to S3 through `S3FileIO`.\n+`GlueCatalog` by default uses this FileIO, and other catalogs can load this FileIO using the `io-impl` catalog property.\n+\n+### Progressive Multipart Upload\n+\n+`S3FileIO` implements a customized progressive multipart upload algorithm to upload data.\n+Data files are uploaded in parts in parallel as soon as each part is ready,\n+and each file part is deleted as soon as its upload process completes.\n+This provides maximized upload speed and minimized local disk usage during uploads.\n+Here are the configurations user can tune related to this feature:\n+\n+* `s3fileio.multipart.num-threads`: number of threads to use for uploading parts to S3 (shared pool across all output streams)\n+* `s3fileio.multipart.part.size`: the size of a single part for multipart upload requests, default to 32MB\n+* `s3fileio.multipart.threshold`: the threshold expressed as a factor times the multipart size at which to switch from uploading using a single put object request to uploading using multipart upload, default to 1.5\n+* `s3fileio.staging.dir`: the directory to hold temporary files, default to Java's `java.io.tmpdir` property value\n+\n+### S3 Server Side Encryption\n+\n+`S3FileIO` supports all 3 S3 server side encryption modes:\n+\n+* [SSE-S3](https://docs.aws.amazon.com/AmazonS3/latest/dev/UsingServerSideEncryption.html): When you use Server-Side Encryption with Amazon S3-Managed Keys (SSE-S3), each object is encrypted with a unique key. As an additional safeguard, it encrypts the key itself with a master key that it regularly rotates. Amazon S3 server-side encryption uses one of the strongest block ciphers available, 256-bit Advanced Encryption Standard (AES-256), to encrypt your data.\n+* [SSE-KMS](https://docs.aws.amazon.com/AmazonS3/latest/dev/UsingKMSEncryption.html): Server-Side Encryption with Customer Master Keys (CMKs) Stored in AWS Key Management Service (SSE-KMS) is similar to SSE-S3, but with some additional benefits and charges for using this service. There are separate permissions for the use of a CMK that provides added protection against unauthorized access of your objects in Amazon S3. SSE-KMS also provides you with an audit trail that shows when your CMK was used and by whom. Additionally, you can create and manage customer managed CMKs or use AWS managed CMKs that are unique to you, your service, and your Region.\n+* [SSE-C](https://docs.aws.amazon.com/AmazonS3/latest/dev/ServerSideEncryptionCustomerKeys.html): With Server-Side Encryption with Customer-Provided Keys (SSE-C), you manage the encryption keys and Amazon S3 manages the encryption, as it writes to disks, and decryption, when you access your objects.\n+\n+To enable server side encryption, use the following configuration properties:\n+\n+* `s3fileio.sse.type`: `none`, `s3`, `kms` or `custom`, default to `none`\n+* `s3fileio.sse.key`: a KMS Key ID or ARN for `kms` type (default to `aws/s3`), or a custom base-64 AES256 symmetric key for `custom` type.\n+* `s3fileio.sse.md5`: if SSE type is `custom`, this value must be set as the base-64 MD5 digest of the symmetric key to ensure integrity.\n+\n+### S3 Access Control List\n+\n+`S3FileIO` supports S3 access control list for detailed access control. \n+User can choose the ACL level by setting the `s3fileio.acl` property.\n+For more details, please read [S3 ACL Documentation](https://docs.aws.amazon.com/AmazonS3/latest/dev/acl-overview.html).\n+\n+### ObjectStoreLocationProvider\n+\n+S3 and many other cloud storage services [throttle requests based on object prefix](https://aws.amazon.com/premiumsupport/knowledge-center/s3-request-limit-avoid-throttling/). \n+This means data stored in a traditional Hive storage layout has bad read and write throughput since data files of the same partition are placed under the same prefix.\n+Iceberg by default uses the Hive storage layout, but can be switch to use a different `ObjectStoreLocationProvider`.\n+In this mode, a hash string is added to the beginning of each file path, so that files are equally distributed across all prefixes in an S3 bucket.\n+This results in minimized throttling and maximized throughput for S3-related IO operations.\n+For more details, please follow [LocationProvider Configuration](../custom-catalog/#custom-location-provider-implementation) section to enable this feature.  \n+\n+### S3 Strong Consistency\n+\n+In November 2020, S3 announced [strong consistency](https://aws.amazon.com/s3/consistency/) for all GET and LIST operations, and Iceberg is updated to fully leverage this feature.\n+When creating a new output file using `OutputFile.create()`, strong consistency check is used and an `AlreadyExistsException` will be thrown if the file already exists in S3.\n+\n+### Hadoop S3A\n+\n+Before `S3FileIO` was introduced, many Iceberg users choose to use `HadoopFileIO` to write data to S3 through the [S3A FileSystem](https://github.com/apache/hadoop/blob/trunk/hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/S3AFileSystem.java).\n+As introduced in the above sections, the `S3FileIO` adopts latest AWS clients and S3 features for optimzied security and performance,\n+ and is thus recommend for S3 use case over S3A.\n+\n+`S3FileIO` is compatible with legacy URI schemes written by S3A, \n+so any existing tables with `s3a://` or `s3n://` file paths are treated as equivalent `s3://` file paths.    \n+\n+If for any reason you have to use S3A, here are the instructions:\n+\n+1. to store data using S3A, specify the `warehouse` catalog property to be an S3A path, e.g. `s3a://my-bucket/my-warehouse` \n+2. For `HiveCatalog`, to store metadata also using S3A, specify Hadoop config `hive.metastore.warehouse.dir` to be an S3A path.\n+3. Add [hadoop-aws](https://mvnrepository.com/artifact/org.apache.hadoop/hadoop-aws) as a runtime dependency, configure AWS settings based on [hadoop-aws documentation](https://hadoop.apache.org/docs/current/hadoop-aws/tools/hadoop-aws/index.html) (make sure you check the version, s3a configuration varies a lot based on the version you use)   ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2b3b8bc3d8aa06870ca26a5f68d3c59889fab45d"}, "originalPosition": 158}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDk4OTkxNQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Therefore, we open a configurer interface for Iceberg users to plugin any client configuration in a centralized place. \n          \n          \n            \n            Therefore, we open a configurer interface for Iceberg users to plug in any client configuration in a centralized place.", "url": "https://github.com/apache/iceberg/pull/1891#discussion_r544989915", "createdAt": "2020-12-17T10:45:12Z", "author": {"login": "massdosage"}, "path": "site/docs/aws.md", "diffHunk": "@@ -0,0 +1,212 @@\n+<!--\n+ - Licensed to the Apache Software Foundation (ASF) under one or more\n+ - contributor license agreements.  See the NOTICE file distributed with\n+ - this work for additional information regarding copyright ownership.\n+ - The ASF licenses this file to You under the Apache License, Version 2.0\n+ - (the \"License\"); you may not use this file except in compliance with\n+ - the License.  You may obtain a copy of the License at\n+ -\n+ -   http://www.apache.org/licenses/LICENSE-2.0\n+ -\n+ - Unless required by applicable law or agreed to in writing, software\n+ - distributed under the License is distributed on an \"AS IS\" BASIS,\n+ - WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ - See the License for the specific language governing permissions and\n+ - limitations under the License.\n+ -->\n+ \n+# Iceberg AWS Integrations\n+\n+Iceberg provides integration with different AWS services through the `iceberg-aws` module. \n+This section describes how to use Iceberg with AWS.\n+\n+## Runtime Packages\n+\n+The first thing to note is that the `iceberg-aws` module is not bundled with any engine runtime.\n+To use any features described in later sections, you need to include the following packages by yourself:\n+\n+* the [iceberg AWS package](https://mvnrepository.com/artifact/org.apache.iceberg/iceberg-aws)\n+* the [AWS SDK bundle](https://mvnrepository.com/artifact/software.amazon.awssdk/bundle), or individual AWS client packages if you would like to have a minimum dependency footprint. (please note that we use the new AWS v2 SDK instead of v1)\n+\n+For example, in Spark 3, you can start the SQL shell with:\n+\n+```sh\n+spark-sql --packages org.apache.iceberg:iceberg-spark3-runtime:0.11.0,org.apache.iceberg:iceberg-aws-runtime:0.11.0,software.amazon.awssdk:bundle:2.15.40 \\\n+    --conf spark.sql.catalog.my_catalog=org.apache.iceberg.spark.SparkCatalog \\\n+    --conf spark.sql.catalog.my_catalog.catalog-impl=org.apache.iceberg.aws.glue.GlueCatalog \\\n+    --conf spark.sql.catalog.my_catalog.warehouse=s3://my-bucket/my-key-prefix \\\n+    --conf spark.sql.catalog.my_catalog.gluecatalog.lock.table=myGlueLockTable\n+```\n+\n+## Glue Catalog\n+\n+Iceberg enables the use of [AWS Glue](https://aws.amazon.com/glue) as the `Catalog` implementation.\n+When used, an Iceberg `Namespace` is stored as a [Glue Database](https://docs.aws.amazon.com/glue/latest/dg/aws-glue-api-catalog-databases.html), \n+an Iceberg `Table` is stored as a [Glue Table](https://docs.aws.amazon.com/glue/latest/dg/aws-glue-api-catalog-tables.html),\n+an Iceberg `Snapshot` is stored as a [Glue TableVersion](https://docs.aws.amazon.com/glue/latest/dg/aws-glue-api-catalog-tables.html#aws-glue-api-catalog-tables-TableVersion). \n+You can start using Glue catalog by specifying the `catalog-impl` as `org.apache.iceberg.aws.glue.GlueCatalog`. \n+More details about loading the catalog can be found in individual engine pages, such as [Spark](../spark/#loading-a-custom-catalog) and [Flink](../flink/#creating-catalogs-and-using-catalogs).\n+\n+### Glue Catalog ID\n+\n+It is very common for an organization to store all the tables in a single Glue catalog in a single AWS account and run data computation in many different accounts. \n+In this case, you need to specify a Glue catalog ID when initializing `GlueCatalog`.\n+The Glue catalog ID you should use is the AWS account ID.\n+This is because in each AWS account, there is a single Glue catalog in each AWS region,\n+but the region is pre-determined by the Glue web client that is making the call.\n+If you would like to access a Glue catalog in a different region, you should configure you AWS client, see more details in [AWS client configuration](#aws-client-configurations).\n+It is also common to [assume a role](https://docs.aws.amazon.com/STS/latest/APIReference/API_AssumeRole.html) when having cross-account access. See [AssumeRoleConfigurer](#assumeroleconfigurer) for how to set up assume role credentials in Iceberg.\n+\n+### Skip Archive\n+\n+By default, Glue will store all the table versions created and user can rollback a table to any historical version if needed.\n+However, if you are streaming data to Iceberg, this will easily create a lot of Glue table versions.\n+Therefore, it is recommended to turn off the archive feature in Glue by setting `` to false.\n+For more details, please read [Glue Quotas](https://docs.aws.amazon.com/general/latest/gr/glue.html) and the [UpdateTable API](https://docs.aws.amazon.com/glue/latest/webapi/API_UpdateTable.html).\n+\n+\n+### DynamoDB for locking Glue tables\n+\n+Glue does not have a strong guarantee over concurrent updates to a table. \n+Although it throws `ConcurrentModificationException` when detecting two processes updating a table at the same time,\n+there is no guarantee that one update would not clobber the other update.\n+Therefore, DynamoDB lock is enabled by default for Glue, so that for every commit, \n+`GlueCatalog` first obtains a lock using a helper DynamoDB table and then try to safely modify the Glue table.\n+User must specify a table name through catalog property `gluecatalog.lock.table` as the helper DynamoDB lock table to use.\n+It is recommend to use the same DynamoDB table for operations in the same Glue catalog,\n+and use a different table for a different Glue catalog in another account or region.\n+If the lock table with the given name does not exist in DynamoDB, a new table is created with billing mode set as [Pay-per-Request](https://aws.amazon.com/blogs/aws/amazon-dynamodb-on-demand-no-capacity-planning-and-pay-per-request-pricing).\n+The lock has the following additional properties:\n+\n+* `gluecatalog.lock.wait-ms`:  max time to wait for lock acquisition, default to 3 minutes\n+* `gluecatalog.lock.expire-ms`: max time a table can be locked by a process, default to 20 minutes\n+\n+If your use case only consists of single-process low-frequency (e.g. hourly, daily) updates to a table,\n+you can also turn off this locking feature by setting `gluecatalog.lock.enabled` as false.\n+\n+### Warehouse Location\n+\n+By default, Glue uses `S3FileIO` and only allows a warehouse location in S3. \n+To store data in a different local or cloud store, Glue catalog can switch to use `HadoopFileIO` \n+or any custom FileIO using the mechanism described in the [custom FileIO](../custom-catalog/#custom-file-io-implementation) section.\n+\n+## S3 FileIO\n+\n+Iceberg allows user to write data to S3 through `S3FileIO`.\n+`GlueCatalog` by default uses this FileIO, and other catalogs can load this FileIO using the `io-impl` catalog property.\n+\n+### Progressive Multipart Upload\n+\n+`S3FileIO` implements a customized progressive multipart upload algorithm to upload data.\n+Data files are uploaded in parts in parallel as soon as each part is ready,\n+and each file part is deleted as soon as its upload process completes.\n+This provides maximized upload speed and minimized local disk usage during uploads.\n+Here are the configurations user can tune related to this feature:\n+\n+* `s3fileio.multipart.num-threads`: number of threads to use for uploading parts to S3 (shared pool across all output streams)\n+* `s3fileio.multipart.part.size`: the size of a single part for multipart upload requests, default to 32MB\n+* `s3fileio.multipart.threshold`: the threshold expressed as a factor times the multipart size at which to switch from uploading using a single put object request to uploading using multipart upload, default to 1.5\n+* `s3fileio.staging.dir`: the directory to hold temporary files, default to Java's `java.io.tmpdir` property value\n+\n+### S3 Server Side Encryption\n+\n+`S3FileIO` supports all 3 S3 server side encryption modes:\n+\n+* [SSE-S3](https://docs.aws.amazon.com/AmazonS3/latest/dev/UsingServerSideEncryption.html): When you use Server-Side Encryption with Amazon S3-Managed Keys (SSE-S3), each object is encrypted with a unique key. As an additional safeguard, it encrypts the key itself with a master key that it regularly rotates. Amazon S3 server-side encryption uses one of the strongest block ciphers available, 256-bit Advanced Encryption Standard (AES-256), to encrypt your data.\n+* [SSE-KMS](https://docs.aws.amazon.com/AmazonS3/latest/dev/UsingKMSEncryption.html): Server-Side Encryption with Customer Master Keys (CMKs) Stored in AWS Key Management Service (SSE-KMS) is similar to SSE-S3, but with some additional benefits and charges for using this service. There are separate permissions for the use of a CMK that provides added protection against unauthorized access of your objects in Amazon S3. SSE-KMS also provides you with an audit trail that shows when your CMK was used and by whom. Additionally, you can create and manage customer managed CMKs or use AWS managed CMKs that are unique to you, your service, and your Region.\n+* [SSE-C](https://docs.aws.amazon.com/AmazonS3/latest/dev/ServerSideEncryptionCustomerKeys.html): With Server-Side Encryption with Customer-Provided Keys (SSE-C), you manage the encryption keys and Amazon S3 manages the encryption, as it writes to disks, and decryption, when you access your objects.\n+\n+To enable server side encryption, use the following configuration properties:\n+\n+* `s3fileio.sse.type`: `none`, `s3`, `kms` or `custom`, default to `none`\n+* `s3fileio.sse.key`: a KMS Key ID or ARN for `kms` type (default to `aws/s3`), or a custom base-64 AES256 symmetric key for `custom` type.\n+* `s3fileio.sse.md5`: if SSE type is `custom`, this value must be set as the base-64 MD5 digest of the symmetric key to ensure integrity.\n+\n+### S3 Access Control List\n+\n+`S3FileIO` supports S3 access control list for detailed access control. \n+User can choose the ACL level by setting the `s3fileio.acl` property.\n+For more details, please read [S3 ACL Documentation](https://docs.aws.amazon.com/AmazonS3/latest/dev/acl-overview.html).\n+\n+### ObjectStoreLocationProvider\n+\n+S3 and many other cloud storage services [throttle requests based on object prefix](https://aws.amazon.com/premiumsupport/knowledge-center/s3-request-limit-avoid-throttling/). \n+This means data stored in a traditional Hive storage layout has bad read and write throughput since data files of the same partition are placed under the same prefix.\n+Iceberg by default uses the Hive storage layout, but can be switch to use a different `ObjectStoreLocationProvider`.\n+In this mode, a hash string is added to the beginning of each file path, so that files are equally distributed across all prefixes in an S3 bucket.\n+This results in minimized throttling and maximized throughput for S3-related IO operations.\n+For more details, please follow [LocationProvider Configuration](../custom-catalog/#custom-location-provider-implementation) section to enable this feature.  \n+\n+### S3 Strong Consistency\n+\n+In November 2020, S3 announced [strong consistency](https://aws.amazon.com/s3/consistency/) for all GET and LIST operations, and Iceberg is updated to fully leverage this feature.\n+When creating a new output file using `OutputFile.create()`, strong consistency check is used and an `AlreadyExistsException` will be thrown if the file already exists in S3.\n+\n+### Hadoop S3A\n+\n+Before `S3FileIO` was introduced, many Iceberg users choose to use `HadoopFileIO` to write data to S3 through the [S3A FileSystem](https://github.com/apache/hadoop/blob/trunk/hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/S3AFileSystem.java).\n+As introduced in the above sections, the `S3FileIO` adopts latest AWS clients and S3 features for optimzied security and performance,\n+ and is thus recommend for S3 use case over S3A.\n+\n+`S3FileIO` is compatible with legacy URI schemes written by S3A, \n+so any existing tables with `s3a://` or `s3n://` file paths are treated as equivalent `s3://` file paths.    \n+\n+If for any reason you have to use S3A, here are the instructions:\n+\n+1. to store data using S3A, specify the `warehouse` catalog property to be an S3A path, e.g. `s3a://my-bucket/my-warehouse` \n+2. For `HiveCatalog`, to store metadata also using S3A, specify Hadoop config `hive.metastore.warehouse.dir` to be an S3A path.\n+3. Add [hadoop-aws](https://mvnrepository.com/artifact/org.apache.hadoop/hadoop-aws) as a runtime dependency, configure AWS settings based on [hadoop-aws documentation](https://hadoop.apache.org/docs/current/hadoop-aws/tools/hadoop-aws/index.html) (make sure you check the version, s3a configuration varies a lot based on the version you use)   \n+\n+\n+## AWS client configurations\n+\n+Many organizations have customized their way of obtaining AWS credential and region information and configuring details about AWS clients for features like proxy access, retry, etc.\n+Therefore, we open a configurer interface for Iceberg users to plugin any client configuration in a centralized place. ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2b3b8bc3d8aa06870ca26a5f68d3c59889fab45d"}, "originalPosition": 164}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDk5MDUzMw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            When this configurer is used, a STS client is initialized with default [credentials chain](https://docs.aws.amazon.com/sdk-for-java/latest/developer-guide/credentials.html) and [region chain](https://docs.aws.amazon.com/sdk-for-java/latest/developer-guide/region-selection.html),\n          \n          \n            \n            When this configurer is used, a STS client is initialized with a default [credentials chain](https://docs.aws.amazon.com/sdk-for-java/latest/developer-guide/credentials.html) and [region chain](https://docs.aws.amazon.com/sdk-for-java/latest/developer-guide/region-selection.html),", "url": "https://github.com/apache/iceberg/pull/1891#discussion_r544990533", "createdAt": "2020-12-17T10:46:11Z", "author": {"login": "massdosage"}, "path": "site/docs/aws.md", "diffHunk": "@@ -0,0 +1,212 @@\n+<!--\n+ - Licensed to the Apache Software Foundation (ASF) under one or more\n+ - contributor license agreements.  See the NOTICE file distributed with\n+ - this work for additional information regarding copyright ownership.\n+ - The ASF licenses this file to You under the Apache License, Version 2.0\n+ - (the \"License\"); you may not use this file except in compliance with\n+ - the License.  You may obtain a copy of the License at\n+ -\n+ -   http://www.apache.org/licenses/LICENSE-2.0\n+ -\n+ - Unless required by applicable law or agreed to in writing, software\n+ - distributed under the License is distributed on an \"AS IS\" BASIS,\n+ - WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ - See the License for the specific language governing permissions and\n+ - limitations under the License.\n+ -->\n+ \n+# Iceberg AWS Integrations\n+\n+Iceberg provides integration with different AWS services through the `iceberg-aws` module. \n+This section describes how to use Iceberg with AWS.\n+\n+## Runtime Packages\n+\n+The first thing to note is that the `iceberg-aws` module is not bundled with any engine runtime.\n+To use any features described in later sections, you need to include the following packages by yourself:\n+\n+* the [iceberg AWS package](https://mvnrepository.com/artifact/org.apache.iceberg/iceberg-aws)\n+* the [AWS SDK bundle](https://mvnrepository.com/artifact/software.amazon.awssdk/bundle), or individual AWS client packages if you would like to have a minimum dependency footprint. (please note that we use the new AWS v2 SDK instead of v1)\n+\n+For example, in Spark 3, you can start the SQL shell with:\n+\n+```sh\n+spark-sql --packages org.apache.iceberg:iceberg-spark3-runtime:0.11.0,org.apache.iceberg:iceberg-aws-runtime:0.11.0,software.amazon.awssdk:bundle:2.15.40 \\\n+    --conf spark.sql.catalog.my_catalog=org.apache.iceberg.spark.SparkCatalog \\\n+    --conf spark.sql.catalog.my_catalog.catalog-impl=org.apache.iceberg.aws.glue.GlueCatalog \\\n+    --conf spark.sql.catalog.my_catalog.warehouse=s3://my-bucket/my-key-prefix \\\n+    --conf spark.sql.catalog.my_catalog.gluecatalog.lock.table=myGlueLockTable\n+```\n+\n+## Glue Catalog\n+\n+Iceberg enables the use of [AWS Glue](https://aws.amazon.com/glue) as the `Catalog` implementation.\n+When used, an Iceberg `Namespace` is stored as a [Glue Database](https://docs.aws.amazon.com/glue/latest/dg/aws-glue-api-catalog-databases.html), \n+an Iceberg `Table` is stored as a [Glue Table](https://docs.aws.amazon.com/glue/latest/dg/aws-glue-api-catalog-tables.html),\n+an Iceberg `Snapshot` is stored as a [Glue TableVersion](https://docs.aws.amazon.com/glue/latest/dg/aws-glue-api-catalog-tables.html#aws-glue-api-catalog-tables-TableVersion). \n+You can start using Glue catalog by specifying the `catalog-impl` as `org.apache.iceberg.aws.glue.GlueCatalog`. \n+More details about loading the catalog can be found in individual engine pages, such as [Spark](../spark/#loading-a-custom-catalog) and [Flink](../flink/#creating-catalogs-and-using-catalogs).\n+\n+### Glue Catalog ID\n+\n+It is very common for an organization to store all the tables in a single Glue catalog in a single AWS account and run data computation in many different accounts. \n+In this case, you need to specify a Glue catalog ID when initializing `GlueCatalog`.\n+The Glue catalog ID you should use is the AWS account ID.\n+This is because in each AWS account, there is a single Glue catalog in each AWS region,\n+but the region is pre-determined by the Glue web client that is making the call.\n+If you would like to access a Glue catalog in a different region, you should configure you AWS client, see more details in [AWS client configuration](#aws-client-configurations).\n+It is also common to [assume a role](https://docs.aws.amazon.com/STS/latest/APIReference/API_AssumeRole.html) when having cross-account access. See [AssumeRoleConfigurer](#assumeroleconfigurer) for how to set up assume role credentials in Iceberg.\n+\n+### Skip Archive\n+\n+By default, Glue will store all the table versions created and user can rollback a table to any historical version if needed.\n+However, if you are streaming data to Iceberg, this will easily create a lot of Glue table versions.\n+Therefore, it is recommended to turn off the archive feature in Glue by setting `` to false.\n+For more details, please read [Glue Quotas](https://docs.aws.amazon.com/general/latest/gr/glue.html) and the [UpdateTable API](https://docs.aws.amazon.com/glue/latest/webapi/API_UpdateTable.html).\n+\n+\n+### DynamoDB for locking Glue tables\n+\n+Glue does not have a strong guarantee over concurrent updates to a table. \n+Although it throws `ConcurrentModificationException` when detecting two processes updating a table at the same time,\n+there is no guarantee that one update would not clobber the other update.\n+Therefore, DynamoDB lock is enabled by default for Glue, so that for every commit, \n+`GlueCatalog` first obtains a lock using a helper DynamoDB table and then try to safely modify the Glue table.\n+User must specify a table name through catalog property `gluecatalog.lock.table` as the helper DynamoDB lock table to use.\n+It is recommend to use the same DynamoDB table for operations in the same Glue catalog,\n+and use a different table for a different Glue catalog in another account or region.\n+If the lock table with the given name does not exist in DynamoDB, a new table is created with billing mode set as [Pay-per-Request](https://aws.amazon.com/blogs/aws/amazon-dynamodb-on-demand-no-capacity-planning-and-pay-per-request-pricing).\n+The lock has the following additional properties:\n+\n+* `gluecatalog.lock.wait-ms`:  max time to wait for lock acquisition, default to 3 minutes\n+* `gluecatalog.lock.expire-ms`: max time a table can be locked by a process, default to 20 minutes\n+\n+If your use case only consists of single-process low-frequency (e.g. hourly, daily) updates to a table,\n+you can also turn off this locking feature by setting `gluecatalog.lock.enabled` as false.\n+\n+### Warehouse Location\n+\n+By default, Glue uses `S3FileIO` and only allows a warehouse location in S3. \n+To store data in a different local or cloud store, Glue catalog can switch to use `HadoopFileIO` \n+or any custom FileIO using the mechanism described in the [custom FileIO](../custom-catalog/#custom-file-io-implementation) section.\n+\n+## S3 FileIO\n+\n+Iceberg allows user to write data to S3 through `S3FileIO`.\n+`GlueCatalog` by default uses this FileIO, and other catalogs can load this FileIO using the `io-impl` catalog property.\n+\n+### Progressive Multipart Upload\n+\n+`S3FileIO` implements a customized progressive multipart upload algorithm to upload data.\n+Data files are uploaded in parts in parallel as soon as each part is ready,\n+and each file part is deleted as soon as its upload process completes.\n+This provides maximized upload speed and minimized local disk usage during uploads.\n+Here are the configurations user can tune related to this feature:\n+\n+* `s3fileio.multipart.num-threads`: number of threads to use for uploading parts to S3 (shared pool across all output streams)\n+* `s3fileio.multipart.part.size`: the size of a single part for multipart upload requests, default to 32MB\n+* `s3fileio.multipart.threshold`: the threshold expressed as a factor times the multipart size at which to switch from uploading using a single put object request to uploading using multipart upload, default to 1.5\n+* `s3fileio.staging.dir`: the directory to hold temporary files, default to Java's `java.io.tmpdir` property value\n+\n+### S3 Server Side Encryption\n+\n+`S3FileIO` supports all 3 S3 server side encryption modes:\n+\n+* [SSE-S3](https://docs.aws.amazon.com/AmazonS3/latest/dev/UsingServerSideEncryption.html): When you use Server-Side Encryption with Amazon S3-Managed Keys (SSE-S3), each object is encrypted with a unique key. As an additional safeguard, it encrypts the key itself with a master key that it regularly rotates. Amazon S3 server-side encryption uses one of the strongest block ciphers available, 256-bit Advanced Encryption Standard (AES-256), to encrypt your data.\n+* [SSE-KMS](https://docs.aws.amazon.com/AmazonS3/latest/dev/UsingKMSEncryption.html): Server-Side Encryption with Customer Master Keys (CMKs) Stored in AWS Key Management Service (SSE-KMS) is similar to SSE-S3, but with some additional benefits and charges for using this service. There are separate permissions for the use of a CMK that provides added protection against unauthorized access of your objects in Amazon S3. SSE-KMS also provides you with an audit trail that shows when your CMK was used and by whom. Additionally, you can create and manage customer managed CMKs or use AWS managed CMKs that are unique to you, your service, and your Region.\n+* [SSE-C](https://docs.aws.amazon.com/AmazonS3/latest/dev/ServerSideEncryptionCustomerKeys.html): With Server-Side Encryption with Customer-Provided Keys (SSE-C), you manage the encryption keys and Amazon S3 manages the encryption, as it writes to disks, and decryption, when you access your objects.\n+\n+To enable server side encryption, use the following configuration properties:\n+\n+* `s3fileio.sse.type`: `none`, `s3`, `kms` or `custom`, default to `none`\n+* `s3fileio.sse.key`: a KMS Key ID or ARN for `kms` type (default to `aws/s3`), or a custom base-64 AES256 symmetric key for `custom` type.\n+* `s3fileio.sse.md5`: if SSE type is `custom`, this value must be set as the base-64 MD5 digest of the symmetric key to ensure integrity.\n+\n+### S3 Access Control List\n+\n+`S3FileIO` supports S3 access control list for detailed access control. \n+User can choose the ACL level by setting the `s3fileio.acl` property.\n+For more details, please read [S3 ACL Documentation](https://docs.aws.amazon.com/AmazonS3/latest/dev/acl-overview.html).\n+\n+### ObjectStoreLocationProvider\n+\n+S3 and many other cloud storage services [throttle requests based on object prefix](https://aws.amazon.com/premiumsupport/knowledge-center/s3-request-limit-avoid-throttling/). \n+This means data stored in a traditional Hive storage layout has bad read and write throughput since data files of the same partition are placed under the same prefix.\n+Iceberg by default uses the Hive storage layout, but can be switch to use a different `ObjectStoreLocationProvider`.\n+In this mode, a hash string is added to the beginning of each file path, so that files are equally distributed across all prefixes in an S3 bucket.\n+This results in minimized throttling and maximized throughput for S3-related IO operations.\n+For more details, please follow [LocationProvider Configuration](../custom-catalog/#custom-location-provider-implementation) section to enable this feature.  \n+\n+### S3 Strong Consistency\n+\n+In November 2020, S3 announced [strong consistency](https://aws.amazon.com/s3/consistency/) for all GET and LIST operations, and Iceberg is updated to fully leverage this feature.\n+When creating a new output file using `OutputFile.create()`, strong consistency check is used and an `AlreadyExistsException` will be thrown if the file already exists in S3.\n+\n+### Hadoop S3A\n+\n+Before `S3FileIO` was introduced, many Iceberg users choose to use `HadoopFileIO` to write data to S3 through the [S3A FileSystem](https://github.com/apache/hadoop/blob/trunk/hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/S3AFileSystem.java).\n+As introduced in the above sections, the `S3FileIO` adopts latest AWS clients and S3 features for optimzied security and performance,\n+ and is thus recommend for S3 use case over S3A.\n+\n+`S3FileIO` is compatible with legacy URI schemes written by S3A, \n+so any existing tables with `s3a://` or `s3n://` file paths are treated as equivalent `s3://` file paths.    \n+\n+If for any reason you have to use S3A, here are the instructions:\n+\n+1. to store data using S3A, specify the `warehouse` catalog property to be an S3A path, e.g. `s3a://my-bucket/my-warehouse` \n+2. For `HiveCatalog`, to store metadata also using S3A, specify Hadoop config `hive.metastore.warehouse.dir` to be an S3A path.\n+3. Add [hadoop-aws](https://mvnrepository.com/artifact/org.apache.hadoop/hadoop-aws) as a runtime dependency, configure AWS settings based on [hadoop-aws documentation](https://hadoop.apache.org/docs/current/hadoop-aws/tools/hadoop-aws/index.html) (make sure you check the version, s3a configuration varies a lot based on the version you use)   \n+\n+\n+## AWS client configurations\n+\n+Many organizations have customized their way of obtaining AWS credential and region information and configuring details about AWS clients for features like proxy access, retry, etc.\n+Therefore, we open a configurer interface for Iceberg users to plugin any client configuration in a centralized place. \n+Users can set the `client.configurer` property as the class of the custom configurer.\n+\n+For example, a configurer can do something like the following:\n+\n+```java\n+package com.my.team;\n+\n+import software.amazon.awssdk.auth.credentials.ContainerCredentialsProvider;\n+import software.amazon.awssdk.awscore.client.builder.AwsClientBuilder;\n+import software.amazon.awssdk.services.s3.S3ClientBuilder;\n+\n+public class MyCustomClientConfigurer implements AwsClientConfigurer {\n+\n+  @Override\n+  public <T extends AwsClientBuilder & AwsSyncClientBuilder> T configure(T clientBuilder) {\n+    \n+    // set some custom s3 configurations\n+    if (clientBuilder instanceof S3ClientBuilder) {\n+      S3ClientBuilder s3ClientBuilder = (S3ClientBuilder) clientBuilder;\n+      // configure something\n+    }\n+\n+    // set the same credential provider for all clients\n+    clientBuilder.credentialsProvider(ContainerCredentialsProvider.builder().build());\n+  }\n+}\n+```\n+\n+### AssumeRoleConfigurer\n+\n+As a common use case scenario, we provide `AssumeRoleConfigurer` as an example configurer. It has the following catalog properties:\n+\n+* `client.assume-role.arn`: role ARN to assume\n+* `client.assume-role.timeout-sec`: seconds for an assume-role session, after the timeout a new session is automatically fetched by a STS client.\n+* `client.assume-role.external-id`: optional external ID for the role to assume\n+* `client.assume-role.region`: a region for all clients (except the STS client) to use\n+\n+When this configurer is used, a STS client is initialized with default [credentials chain](https://docs.aws.amazon.com/sdk-for-java/latest/developer-guide/credentials.html) and [region chain](https://docs.aws.amazon.com/sdk-for-java/latest/developer-guide/region-selection.html),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2b3b8bc3d8aa06870ca26a5f68d3c59889fab45d"}, "originalPosition": 202}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDk5MTI4Mw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            [Amazon Kinesis Data Analytics](https://aws.amazon.com/about-aws/whats-new/2019/11/you-can-now-run-fully-managed-apache-flink-applications-with-apache-kafka/) also provdies a way \n          \n          \n            \n            [Amazon Kinesis Data Analytics](https://aws.amazon.com/about-aws/whats-new/2019/11/you-can-now-run-fully-managed-apache-flink-applications-with-apache-kafka/) also provides a way", "url": "https://github.com/apache/iceberg/pull/1891#discussion_r544991283", "createdAt": "2020-12-17T10:47:14Z", "author": {"login": "massdosage"}, "path": "site/docs/aws.md", "diffHunk": "@@ -0,0 +1,212 @@\n+<!--\n+ - Licensed to the Apache Software Foundation (ASF) under one or more\n+ - contributor license agreements.  See the NOTICE file distributed with\n+ - this work for additional information regarding copyright ownership.\n+ - The ASF licenses this file to You under the Apache License, Version 2.0\n+ - (the \"License\"); you may not use this file except in compliance with\n+ - the License.  You may obtain a copy of the License at\n+ -\n+ -   http://www.apache.org/licenses/LICENSE-2.0\n+ -\n+ - Unless required by applicable law or agreed to in writing, software\n+ - distributed under the License is distributed on an \"AS IS\" BASIS,\n+ - WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ - See the License for the specific language governing permissions and\n+ - limitations under the License.\n+ -->\n+ \n+# Iceberg AWS Integrations\n+\n+Iceberg provides integration with different AWS services through the `iceberg-aws` module. \n+This section describes how to use Iceberg with AWS.\n+\n+## Runtime Packages\n+\n+The first thing to note is that the `iceberg-aws` module is not bundled with any engine runtime.\n+To use any features described in later sections, you need to include the following packages by yourself:\n+\n+* the [iceberg AWS package](https://mvnrepository.com/artifact/org.apache.iceberg/iceberg-aws)\n+* the [AWS SDK bundle](https://mvnrepository.com/artifact/software.amazon.awssdk/bundle), or individual AWS client packages if you would like to have a minimum dependency footprint. (please note that we use the new AWS v2 SDK instead of v1)\n+\n+For example, in Spark 3, you can start the SQL shell with:\n+\n+```sh\n+spark-sql --packages org.apache.iceberg:iceberg-spark3-runtime:0.11.0,org.apache.iceberg:iceberg-aws-runtime:0.11.0,software.amazon.awssdk:bundle:2.15.40 \\\n+    --conf spark.sql.catalog.my_catalog=org.apache.iceberg.spark.SparkCatalog \\\n+    --conf spark.sql.catalog.my_catalog.catalog-impl=org.apache.iceberg.aws.glue.GlueCatalog \\\n+    --conf spark.sql.catalog.my_catalog.warehouse=s3://my-bucket/my-key-prefix \\\n+    --conf spark.sql.catalog.my_catalog.gluecatalog.lock.table=myGlueLockTable\n+```\n+\n+## Glue Catalog\n+\n+Iceberg enables the use of [AWS Glue](https://aws.amazon.com/glue) as the `Catalog` implementation.\n+When used, an Iceberg `Namespace` is stored as a [Glue Database](https://docs.aws.amazon.com/glue/latest/dg/aws-glue-api-catalog-databases.html), \n+an Iceberg `Table` is stored as a [Glue Table](https://docs.aws.amazon.com/glue/latest/dg/aws-glue-api-catalog-tables.html),\n+an Iceberg `Snapshot` is stored as a [Glue TableVersion](https://docs.aws.amazon.com/glue/latest/dg/aws-glue-api-catalog-tables.html#aws-glue-api-catalog-tables-TableVersion). \n+You can start using Glue catalog by specifying the `catalog-impl` as `org.apache.iceberg.aws.glue.GlueCatalog`. \n+More details about loading the catalog can be found in individual engine pages, such as [Spark](../spark/#loading-a-custom-catalog) and [Flink](../flink/#creating-catalogs-and-using-catalogs).\n+\n+### Glue Catalog ID\n+\n+It is very common for an organization to store all the tables in a single Glue catalog in a single AWS account and run data computation in many different accounts. \n+In this case, you need to specify a Glue catalog ID when initializing `GlueCatalog`.\n+The Glue catalog ID you should use is the AWS account ID.\n+This is because in each AWS account, there is a single Glue catalog in each AWS region,\n+but the region is pre-determined by the Glue web client that is making the call.\n+If you would like to access a Glue catalog in a different region, you should configure you AWS client, see more details in [AWS client configuration](#aws-client-configurations).\n+It is also common to [assume a role](https://docs.aws.amazon.com/STS/latest/APIReference/API_AssumeRole.html) when having cross-account access. See [AssumeRoleConfigurer](#assumeroleconfigurer) for how to set up assume role credentials in Iceberg.\n+\n+### Skip Archive\n+\n+By default, Glue will store all the table versions created and user can rollback a table to any historical version if needed.\n+However, if you are streaming data to Iceberg, this will easily create a lot of Glue table versions.\n+Therefore, it is recommended to turn off the archive feature in Glue by setting `` to false.\n+For more details, please read [Glue Quotas](https://docs.aws.amazon.com/general/latest/gr/glue.html) and the [UpdateTable API](https://docs.aws.amazon.com/glue/latest/webapi/API_UpdateTable.html).\n+\n+\n+### DynamoDB for locking Glue tables\n+\n+Glue does not have a strong guarantee over concurrent updates to a table. \n+Although it throws `ConcurrentModificationException` when detecting two processes updating a table at the same time,\n+there is no guarantee that one update would not clobber the other update.\n+Therefore, DynamoDB lock is enabled by default for Glue, so that for every commit, \n+`GlueCatalog` first obtains a lock using a helper DynamoDB table and then try to safely modify the Glue table.\n+User must specify a table name through catalog property `gluecatalog.lock.table` as the helper DynamoDB lock table to use.\n+It is recommend to use the same DynamoDB table for operations in the same Glue catalog,\n+and use a different table for a different Glue catalog in another account or region.\n+If the lock table with the given name does not exist in DynamoDB, a new table is created with billing mode set as [Pay-per-Request](https://aws.amazon.com/blogs/aws/amazon-dynamodb-on-demand-no-capacity-planning-and-pay-per-request-pricing).\n+The lock has the following additional properties:\n+\n+* `gluecatalog.lock.wait-ms`:  max time to wait for lock acquisition, default to 3 minutes\n+* `gluecatalog.lock.expire-ms`: max time a table can be locked by a process, default to 20 minutes\n+\n+If your use case only consists of single-process low-frequency (e.g. hourly, daily) updates to a table,\n+you can also turn off this locking feature by setting `gluecatalog.lock.enabled` as false.\n+\n+### Warehouse Location\n+\n+By default, Glue uses `S3FileIO` and only allows a warehouse location in S3. \n+To store data in a different local or cloud store, Glue catalog can switch to use `HadoopFileIO` \n+or any custom FileIO using the mechanism described in the [custom FileIO](../custom-catalog/#custom-file-io-implementation) section.\n+\n+## S3 FileIO\n+\n+Iceberg allows user to write data to S3 through `S3FileIO`.\n+`GlueCatalog` by default uses this FileIO, and other catalogs can load this FileIO using the `io-impl` catalog property.\n+\n+### Progressive Multipart Upload\n+\n+`S3FileIO` implements a customized progressive multipart upload algorithm to upload data.\n+Data files are uploaded in parts in parallel as soon as each part is ready,\n+and each file part is deleted as soon as its upload process completes.\n+This provides maximized upload speed and minimized local disk usage during uploads.\n+Here are the configurations user can tune related to this feature:\n+\n+* `s3fileio.multipart.num-threads`: number of threads to use for uploading parts to S3 (shared pool across all output streams)\n+* `s3fileio.multipart.part.size`: the size of a single part for multipart upload requests, default to 32MB\n+* `s3fileio.multipart.threshold`: the threshold expressed as a factor times the multipart size at which to switch from uploading using a single put object request to uploading using multipart upload, default to 1.5\n+* `s3fileio.staging.dir`: the directory to hold temporary files, default to Java's `java.io.tmpdir` property value\n+\n+### S3 Server Side Encryption\n+\n+`S3FileIO` supports all 3 S3 server side encryption modes:\n+\n+* [SSE-S3](https://docs.aws.amazon.com/AmazonS3/latest/dev/UsingServerSideEncryption.html): When you use Server-Side Encryption with Amazon S3-Managed Keys (SSE-S3), each object is encrypted with a unique key. As an additional safeguard, it encrypts the key itself with a master key that it regularly rotates. Amazon S3 server-side encryption uses one of the strongest block ciphers available, 256-bit Advanced Encryption Standard (AES-256), to encrypt your data.\n+* [SSE-KMS](https://docs.aws.amazon.com/AmazonS3/latest/dev/UsingKMSEncryption.html): Server-Side Encryption with Customer Master Keys (CMKs) Stored in AWS Key Management Service (SSE-KMS) is similar to SSE-S3, but with some additional benefits and charges for using this service. There are separate permissions for the use of a CMK that provides added protection against unauthorized access of your objects in Amazon S3. SSE-KMS also provides you with an audit trail that shows when your CMK was used and by whom. Additionally, you can create and manage customer managed CMKs or use AWS managed CMKs that are unique to you, your service, and your Region.\n+* [SSE-C](https://docs.aws.amazon.com/AmazonS3/latest/dev/ServerSideEncryptionCustomerKeys.html): With Server-Side Encryption with Customer-Provided Keys (SSE-C), you manage the encryption keys and Amazon S3 manages the encryption, as it writes to disks, and decryption, when you access your objects.\n+\n+To enable server side encryption, use the following configuration properties:\n+\n+* `s3fileio.sse.type`: `none`, `s3`, `kms` or `custom`, default to `none`\n+* `s3fileio.sse.key`: a KMS Key ID or ARN for `kms` type (default to `aws/s3`), or a custom base-64 AES256 symmetric key for `custom` type.\n+* `s3fileio.sse.md5`: if SSE type is `custom`, this value must be set as the base-64 MD5 digest of the symmetric key to ensure integrity.\n+\n+### S3 Access Control List\n+\n+`S3FileIO` supports S3 access control list for detailed access control. \n+User can choose the ACL level by setting the `s3fileio.acl` property.\n+For more details, please read [S3 ACL Documentation](https://docs.aws.amazon.com/AmazonS3/latest/dev/acl-overview.html).\n+\n+### ObjectStoreLocationProvider\n+\n+S3 and many other cloud storage services [throttle requests based on object prefix](https://aws.amazon.com/premiumsupport/knowledge-center/s3-request-limit-avoid-throttling/). \n+This means data stored in a traditional Hive storage layout has bad read and write throughput since data files of the same partition are placed under the same prefix.\n+Iceberg by default uses the Hive storage layout, but can be switch to use a different `ObjectStoreLocationProvider`.\n+In this mode, a hash string is added to the beginning of each file path, so that files are equally distributed across all prefixes in an S3 bucket.\n+This results in minimized throttling and maximized throughput for S3-related IO operations.\n+For more details, please follow [LocationProvider Configuration](../custom-catalog/#custom-location-provider-implementation) section to enable this feature.  \n+\n+### S3 Strong Consistency\n+\n+In November 2020, S3 announced [strong consistency](https://aws.amazon.com/s3/consistency/) for all GET and LIST operations, and Iceberg is updated to fully leverage this feature.\n+When creating a new output file using `OutputFile.create()`, strong consistency check is used and an `AlreadyExistsException` will be thrown if the file already exists in S3.\n+\n+### Hadoop S3A\n+\n+Before `S3FileIO` was introduced, many Iceberg users choose to use `HadoopFileIO` to write data to S3 through the [S3A FileSystem](https://github.com/apache/hadoop/blob/trunk/hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/S3AFileSystem.java).\n+As introduced in the above sections, the `S3FileIO` adopts latest AWS clients and S3 features for optimzied security and performance,\n+ and is thus recommend for S3 use case over S3A.\n+\n+`S3FileIO` is compatible with legacy URI schemes written by S3A, \n+so any existing tables with `s3a://` or `s3n://` file paths are treated as equivalent `s3://` file paths.    \n+\n+If for any reason you have to use S3A, here are the instructions:\n+\n+1. to store data using S3A, specify the `warehouse` catalog property to be an S3A path, e.g. `s3a://my-bucket/my-warehouse` \n+2. For `HiveCatalog`, to store metadata also using S3A, specify Hadoop config `hive.metastore.warehouse.dir` to be an S3A path.\n+3. Add [hadoop-aws](https://mvnrepository.com/artifact/org.apache.hadoop/hadoop-aws) as a runtime dependency, configure AWS settings based on [hadoop-aws documentation](https://hadoop.apache.org/docs/current/hadoop-aws/tools/hadoop-aws/index.html) (make sure you check the version, s3a configuration varies a lot based on the version you use)   \n+\n+\n+## AWS client configurations\n+\n+Many organizations have customized their way of obtaining AWS credential and region information and configuring details about AWS clients for features like proxy access, retry, etc.\n+Therefore, we open a configurer interface for Iceberg users to plugin any client configuration in a centralized place. \n+Users can set the `client.configurer` property as the class of the custom configurer.\n+\n+For example, a configurer can do something like the following:\n+\n+```java\n+package com.my.team;\n+\n+import software.amazon.awssdk.auth.credentials.ContainerCredentialsProvider;\n+import software.amazon.awssdk.awscore.client.builder.AwsClientBuilder;\n+import software.amazon.awssdk.services.s3.S3ClientBuilder;\n+\n+public class MyCustomClientConfigurer implements AwsClientConfigurer {\n+\n+  @Override\n+  public <T extends AwsClientBuilder & AwsSyncClientBuilder> T configure(T clientBuilder) {\n+    \n+    // set some custom s3 configurations\n+    if (clientBuilder instanceof S3ClientBuilder) {\n+      S3ClientBuilder s3ClientBuilder = (S3ClientBuilder) clientBuilder;\n+      // configure something\n+    }\n+\n+    // set the same credential provider for all clients\n+    clientBuilder.credentialsProvider(ContainerCredentialsProvider.builder().build());\n+  }\n+}\n+```\n+\n+### AssumeRoleConfigurer\n+\n+As a common use case scenario, we provide `AssumeRoleConfigurer` as an example configurer. It has the following catalog properties:\n+\n+* `client.assume-role.arn`: role ARN to assume\n+* `client.assume-role.timeout-sec`: seconds for an assume-role session, after the timeout a new session is automatically fetched by a STS client.\n+* `client.assume-role.external-id`: optional external ID for the role to assume\n+* `client.assume-role.region`: a region for all clients (except the STS client) to use\n+\n+When this configurer is used, a STS client is initialized with default [credentials chain](https://docs.aws.amazon.com/sdk-for-java/latest/developer-guide/credentials.html) and [region chain](https://docs.aws.amazon.com/sdk-for-java/latest/developer-guide/region-selection.html),\n+and all the other clients (Glue, DynamoDB, S3, etc.) will use the configured assume-role credential and region.\n+\n+## Run Iceberg on AWS\n+\n+[Amazon EMR](https://aws.amazon.com/emr/) is the most common platform to run Iceberg on AWS. EMR can provision clusters with [Spark](https://docs.aws.amazon.com/emr/latest/ReleaseGuide/emr-spark.html) (EMR 6 for Spark 3, EMR 5 for Spark 2),\n+[Hive](https://docs.aws.amazon.com/emr/latest/ReleaseGuide/emr-hive.html), [Flink](https://docs.aws.amazon.com/emr/latest/ReleaseGuide/emr-flink.html),\n+[Presto](https://docs.aws.amazon.com/emr/latest/ReleaseGuide/emr-presto.html) that can run Iceberg.\n+\n+[Amazon Kinesis Data Analytics](https://aws.amazon.com/about-aws/whats-new/2019/11/you-can-now-run-fully-managed-apache-flink-applications-with-apache-kafka/) also provdies a way ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2b3b8bc3d8aa06870ca26a5f68d3c59889fab45d"}, "originalPosition": 211}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDk5MTUwOA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            to run fully managed Apache Flink application. You can include Iceberg in your application Jar and run it in the platform.\n          \n          \n            \n            to run fully managed Apache Flink applications. You can include Iceberg in your application Jar and run it in the platform.", "url": "https://github.com/apache/iceberg/pull/1891#discussion_r544991508", "createdAt": "2020-12-17T10:47:34Z", "author": {"login": "massdosage"}, "path": "site/docs/aws.md", "diffHunk": "@@ -0,0 +1,212 @@\n+<!--\n+ - Licensed to the Apache Software Foundation (ASF) under one or more\n+ - contributor license agreements.  See the NOTICE file distributed with\n+ - this work for additional information regarding copyright ownership.\n+ - The ASF licenses this file to You under the Apache License, Version 2.0\n+ - (the \"License\"); you may not use this file except in compliance with\n+ - the License.  You may obtain a copy of the License at\n+ -\n+ -   http://www.apache.org/licenses/LICENSE-2.0\n+ -\n+ - Unless required by applicable law or agreed to in writing, software\n+ - distributed under the License is distributed on an \"AS IS\" BASIS,\n+ - WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ - See the License for the specific language governing permissions and\n+ - limitations under the License.\n+ -->\n+ \n+# Iceberg AWS Integrations\n+\n+Iceberg provides integration with different AWS services through the `iceberg-aws` module. \n+This section describes how to use Iceberg with AWS.\n+\n+## Runtime Packages\n+\n+The first thing to note is that the `iceberg-aws` module is not bundled with any engine runtime.\n+To use any features described in later sections, you need to include the following packages by yourself:\n+\n+* the [iceberg AWS package](https://mvnrepository.com/artifact/org.apache.iceberg/iceberg-aws)\n+* the [AWS SDK bundle](https://mvnrepository.com/artifact/software.amazon.awssdk/bundle), or individual AWS client packages if you would like to have a minimum dependency footprint. (please note that we use the new AWS v2 SDK instead of v1)\n+\n+For example, in Spark 3, you can start the SQL shell with:\n+\n+```sh\n+spark-sql --packages org.apache.iceberg:iceberg-spark3-runtime:0.11.0,org.apache.iceberg:iceberg-aws-runtime:0.11.0,software.amazon.awssdk:bundle:2.15.40 \\\n+    --conf spark.sql.catalog.my_catalog=org.apache.iceberg.spark.SparkCatalog \\\n+    --conf spark.sql.catalog.my_catalog.catalog-impl=org.apache.iceberg.aws.glue.GlueCatalog \\\n+    --conf spark.sql.catalog.my_catalog.warehouse=s3://my-bucket/my-key-prefix \\\n+    --conf spark.sql.catalog.my_catalog.gluecatalog.lock.table=myGlueLockTable\n+```\n+\n+## Glue Catalog\n+\n+Iceberg enables the use of [AWS Glue](https://aws.amazon.com/glue) as the `Catalog` implementation.\n+When used, an Iceberg `Namespace` is stored as a [Glue Database](https://docs.aws.amazon.com/glue/latest/dg/aws-glue-api-catalog-databases.html), \n+an Iceberg `Table` is stored as a [Glue Table](https://docs.aws.amazon.com/glue/latest/dg/aws-glue-api-catalog-tables.html),\n+an Iceberg `Snapshot` is stored as a [Glue TableVersion](https://docs.aws.amazon.com/glue/latest/dg/aws-glue-api-catalog-tables.html#aws-glue-api-catalog-tables-TableVersion). \n+You can start using Glue catalog by specifying the `catalog-impl` as `org.apache.iceberg.aws.glue.GlueCatalog`. \n+More details about loading the catalog can be found in individual engine pages, such as [Spark](../spark/#loading-a-custom-catalog) and [Flink](../flink/#creating-catalogs-and-using-catalogs).\n+\n+### Glue Catalog ID\n+\n+It is very common for an organization to store all the tables in a single Glue catalog in a single AWS account and run data computation in many different accounts. \n+In this case, you need to specify a Glue catalog ID when initializing `GlueCatalog`.\n+The Glue catalog ID you should use is the AWS account ID.\n+This is because in each AWS account, there is a single Glue catalog in each AWS region,\n+but the region is pre-determined by the Glue web client that is making the call.\n+If you would like to access a Glue catalog in a different region, you should configure you AWS client, see more details in [AWS client configuration](#aws-client-configurations).\n+It is also common to [assume a role](https://docs.aws.amazon.com/STS/latest/APIReference/API_AssumeRole.html) when having cross-account access. See [AssumeRoleConfigurer](#assumeroleconfigurer) for how to set up assume role credentials in Iceberg.\n+\n+### Skip Archive\n+\n+By default, Glue will store all the table versions created and user can rollback a table to any historical version if needed.\n+However, if you are streaming data to Iceberg, this will easily create a lot of Glue table versions.\n+Therefore, it is recommended to turn off the archive feature in Glue by setting `` to false.\n+For more details, please read [Glue Quotas](https://docs.aws.amazon.com/general/latest/gr/glue.html) and the [UpdateTable API](https://docs.aws.amazon.com/glue/latest/webapi/API_UpdateTable.html).\n+\n+\n+### DynamoDB for locking Glue tables\n+\n+Glue does not have a strong guarantee over concurrent updates to a table. \n+Although it throws `ConcurrentModificationException` when detecting two processes updating a table at the same time,\n+there is no guarantee that one update would not clobber the other update.\n+Therefore, DynamoDB lock is enabled by default for Glue, so that for every commit, \n+`GlueCatalog` first obtains a lock using a helper DynamoDB table and then try to safely modify the Glue table.\n+User must specify a table name through catalog property `gluecatalog.lock.table` as the helper DynamoDB lock table to use.\n+It is recommend to use the same DynamoDB table for operations in the same Glue catalog,\n+and use a different table for a different Glue catalog in another account or region.\n+If the lock table with the given name does not exist in DynamoDB, a new table is created with billing mode set as [Pay-per-Request](https://aws.amazon.com/blogs/aws/amazon-dynamodb-on-demand-no-capacity-planning-and-pay-per-request-pricing).\n+The lock has the following additional properties:\n+\n+* `gluecatalog.lock.wait-ms`:  max time to wait for lock acquisition, default to 3 minutes\n+* `gluecatalog.lock.expire-ms`: max time a table can be locked by a process, default to 20 minutes\n+\n+If your use case only consists of single-process low-frequency (e.g. hourly, daily) updates to a table,\n+you can also turn off this locking feature by setting `gluecatalog.lock.enabled` as false.\n+\n+### Warehouse Location\n+\n+By default, Glue uses `S3FileIO` and only allows a warehouse location in S3. \n+To store data in a different local or cloud store, Glue catalog can switch to use `HadoopFileIO` \n+or any custom FileIO using the mechanism described in the [custom FileIO](../custom-catalog/#custom-file-io-implementation) section.\n+\n+## S3 FileIO\n+\n+Iceberg allows user to write data to S3 through `S3FileIO`.\n+`GlueCatalog` by default uses this FileIO, and other catalogs can load this FileIO using the `io-impl` catalog property.\n+\n+### Progressive Multipart Upload\n+\n+`S3FileIO` implements a customized progressive multipart upload algorithm to upload data.\n+Data files are uploaded in parts in parallel as soon as each part is ready,\n+and each file part is deleted as soon as its upload process completes.\n+This provides maximized upload speed and minimized local disk usage during uploads.\n+Here are the configurations user can tune related to this feature:\n+\n+* `s3fileio.multipart.num-threads`: number of threads to use for uploading parts to S3 (shared pool across all output streams)\n+* `s3fileio.multipart.part.size`: the size of a single part for multipart upload requests, default to 32MB\n+* `s3fileio.multipart.threshold`: the threshold expressed as a factor times the multipart size at which to switch from uploading using a single put object request to uploading using multipart upload, default to 1.5\n+* `s3fileio.staging.dir`: the directory to hold temporary files, default to Java's `java.io.tmpdir` property value\n+\n+### S3 Server Side Encryption\n+\n+`S3FileIO` supports all 3 S3 server side encryption modes:\n+\n+* [SSE-S3](https://docs.aws.amazon.com/AmazonS3/latest/dev/UsingServerSideEncryption.html): When you use Server-Side Encryption with Amazon S3-Managed Keys (SSE-S3), each object is encrypted with a unique key. As an additional safeguard, it encrypts the key itself with a master key that it regularly rotates. Amazon S3 server-side encryption uses one of the strongest block ciphers available, 256-bit Advanced Encryption Standard (AES-256), to encrypt your data.\n+* [SSE-KMS](https://docs.aws.amazon.com/AmazonS3/latest/dev/UsingKMSEncryption.html): Server-Side Encryption with Customer Master Keys (CMKs) Stored in AWS Key Management Service (SSE-KMS) is similar to SSE-S3, but with some additional benefits and charges for using this service. There are separate permissions for the use of a CMK that provides added protection against unauthorized access of your objects in Amazon S3. SSE-KMS also provides you with an audit trail that shows when your CMK was used and by whom. Additionally, you can create and manage customer managed CMKs or use AWS managed CMKs that are unique to you, your service, and your Region.\n+* [SSE-C](https://docs.aws.amazon.com/AmazonS3/latest/dev/ServerSideEncryptionCustomerKeys.html): With Server-Side Encryption with Customer-Provided Keys (SSE-C), you manage the encryption keys and Amazon S3 manages the encryption, as it writes to disks, and decryption, when you access your objects.\n+\n+To enable server side encryption, use the following configuration properties:\n+\n+* `s3fileio.sse.type`: `none`, `s3`, `kms` or `custom`, default to `none`\n+* `s3fileio.sse.key`: a KMS Key ID or ARN for `kms` type (default to `aws/s3`), or a custom base-64 AES256 symmetric key for `custom` type.\n+* `s3fileio.sse.md5`: if SSE type is `custom`, this value must be set as the base-64 MD5 digest of the symmetric key to ensure integrity.\n+\n+### S3 Access Control List\n+\n+`S3FileIO` supports S3 access control list for detailed access control. \n+User can choose the ACL level by setting the `s3fileio.acl` property.\n+For more details, please read [S3 ACL Documentation](https://docs.aws.amazon.com/AmazonS3/latest/dev/acl-overview.html).\n+\n+### ObjectStoreLocationProvider\n+\n+S3 and many other cloud storage services [throttle requests based on object prefix](https://aws.amazon.com/premiumsupport/knowledge-center/s3-request-limit-avoid-throttling/). \n+This means data stored in a traditional Hive storage layout has bad read and write throughput since data files of the same partition are placed under the same prefix.\n+Iceberg by default uses the Hive storage layout, but can be switch to use a different `ObjectStoreLocationProvider`.\n+In this mode, a hash string is added to the beginning of each file path, so that files are equally distributed across all prefixes in an S3 bucket.\n+This results in minimized throttling and maximized throughput for S3-related IO operations.\n+For more details, please follow [LocationProvider Configuration](../custom-catalog/#custom-location-provider-implementation) section to enable this feature.  \n+\n+### S3 Strong Consistency\n+\n+In November 2020, S3 announced [strong consistency](https://aws.amazon.com/s3/consistency/) for all GET and LIST operations, and Iceberg is updated to fully leverage this feature.\n+When creating a new output file using `OutputFile.create()`, strong consistency check is used and an `AlreadyExistsException` will be thrown if the file already exists in S3.\n+\n+### Hadoop S3A\n+\n+Before `S3FileIO` was introduced, many Iceberg users choose to use `HadoopFileIO` to write data to S3 through the [S3A FileSystem](https://github.com/apache/hadoop/blob/trunk/hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/S3AFileSystem.java).\n+As introduced in the above sections, the `S3FileIO` adopts latest AWS clients and S3 features for optimzied security and performance,\n+ and is thus recommend for S3 use case over S3A.\n+\n+`S3FileIO` is compatible with legacy URI schemes written by S3A, \n+so any existing tables with `s3a://` or `s3n://` file paths are treated as equivalent `s3://` file paths.    \n+\n+If for any reason you have to use S3A, here are the instructions:\n+\n+1. to store data using S3A, specify the `warehouse` catalog property to be an S3A path, e.g. `s3a://my-bucket/my-warehouse` \n+2. For `HiveCatalog`, to store metadata also using S3A, specify Hadoop config `hive.metastore.warehouse.dir` to be an S3A path.\n+3. Add [hadoop-aws](https://mvnrepository.com/artifact/org.apache.hadoop/hadoop-aws) as a runtime dependency, configure AWS settings based on [hadoop-aws documentation](https://hadoop.apache.org/docs/current/hadoop-aws/tools/hadoop-aws/index.html) (make sure you check the version, s3a configuration varies a lot based on the version you use)   \n+\n+\n+## AWS client configurations\n+\n+Many organizations have customized their way of obtaining AWS credential and region information and configuring details about AWS clients for features like proxy access, retry, etc.\n+Therefore, we open a configurer interface for Iceberg users to plugin any client configuration in a centralized place. \n+Users can set the `client.configurer` property as the class of the custom configurer.\n+\n+For example, a configurer can do something like the following:\n+\n+```java\n+package com.my.team;\n+\n+import software.amazon.awssdk.auth.credentials.ContainerCredentialsProvider;\n+import software.amazon.awssdk.awscore.client.builder.AwsClientBuilder;\n+import software.amazon.awssdk.services.s3.S3ClientBuilder;\n+\n+public class MyCustomClientConfigurer implements AwsClientConfigurer {\n+\n+  @Override\n+  public <T extends AwsClientBuilder & AwsSyncClientBuilder> T configure(T clientBuilder) {\n+    \n+    // set some custom s3 configurations\n+    if (clientBuilder instanceof S3ClientBuilder) {\n+      S3ClientBuilder s3ClientBuilder = (S3ClientBuilder) clientBuilder;\n+      // configure something\n+    }\n+\n+    // set the same credential provider for all clients\n+    clientBuilder.credentialsProvider(ContainerCredentialsProvider.builder().build());\n+  }\n+}\n+```\n+\n+### AssumeRoleConfigurer\n+\n+As a common use case scenario, we provide `AssumeRoleConfigurer` as an example configurer. It has the following catalog properties:\n+\n+* `client.assume-role.arn`: role ARN to assume\n+* `client.assume-role.timeout-sec`: seconds for an assume-role session, after the timeout a new session is automatically fetched by a STS client.\n+* `client.assume-role.external-id`: optional external ID for the role to assume\n+* `client.assume-role.region`: a region for all clients (except the STS client) to use\n+\n+When this configurer is used, a STS client is initialized with default [credentials chain](https://docs.aws.amazon.com/sdk-for-java/latest/developer-guide/credentials.html) and [region chain](https://docs.aws.amazon.com/sdk-for-java/latest/developer-guide/region-selection.html),\n+and all the other clients (Glue, DynamoDB, S3, etc.) will use the configured assume-role credential and region.\n+\n+## Run Iceberg on AWS\n+\n+[Amazon EMR](https://aws.amazon.com/emr/) is the most common platform to run Iceberg on AWS. EMR can provision clusters with [Spark](https://docs.aws.amazon.com/emr/latest/ReleaseGuide/emr-spark.html) (EMR 6 for Spark 3, EMR 5 for Spark 2),\n+[Hive](https://docs.aws.amazon.com/emr/latest/ReleaseGuide/emr-hive.html), [Flink](https://docs.aws.amazon.com/emr/latest/ReleaseGuide/emr-flink.html),\n+[Presto](https://docs.aws.amazon.com/emr/latest/ReleaseGuide/emr-presto.html) that can run Iceberg.\n+\n+[Amazon Kinesis Data Analytics](https://aws.amazon.com/about-aws/whats-new/2019/11/you-can-now-run-fully-managed-apache-flink-applications-with-apache-kafka/) also provdies a way \n+to run fully managed Apache Flink application. You can include Iceberg in your application Jar and run it in the platform.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2b3b8bc3d8aa06870ca26a5f68d3c59889fab45d"}, "originalPosition": 212}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "2b3b8bc3d8aa06870ca26a5f68d3c59889fab45d", "author": {"user": {"login": "jackye1995", "name": "Jack Ye"}}, "url": "https://github.com/apache/iceberg/commit/2b3b8bc3d8aa06870ca26a5f68d3c59889fab45d", "committedDate": "2020-12-08T18:56:31Z", "message": "AWS: documentation page for AWS module"}, "afterCommit": {"oid": "99c5fcdf84d111dddd3db70cb67cd8c69e1d2e10", "author": {"user": {"login": "jackye1995", "name": "Jack Ye"}}, "url": "https://github.com/apache/iceberg/commit/99c5fcdf84d111dddd3db70cb67cd8c69e1d2e10", "committedDate": "2020-12-22T06:04:52Z", "message": "update doc based on feedback and latest client config"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU3NDIwNjc3", "url": "https://github.com/apache/iceberg/pull/1891#pullrequestreview-557420677", "createdAt": "2020-12-22T23:16:53Z", "commit": {"oid": "99c5fcdf84d111dddd3db70cb67cd8c69e1d2e10"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQyMzoxNjo1M1rOIKL84g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQyMzoxNjo1M1rOIKL84g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzU1MjQ4Mg==", "bodyText": "How about \"You will need to provide the AWS v2 SDK because that is what Iceberg depends on.\" Saying \"instead of v1\" makes it sound like you can't use both, so I would omit that as well.", "url": "https://github.com/apache/iceberg/pull/1891#discussion_r547552482", "createdAt": "2020-12-22T23:16:53Z", "author": {"login": "rdblue"}, "path": "site/docs/aws.md", "diffHunk": "@@ -0,0 +1,170 @@\n+<!--\n+ - Licensed to the Apache Software Foundation (ASF) under one or more\n+ - contributor license agreements.  See the NOTICE file distributed with\n+ - this work for additional information regarding copyright ownership.\n+ - The ASF licenses this file to You under the Apache License, Version 2.0\n+ - (the \"License\"); you may not use this file except in compliance with\n+ - the License.  You may obtain a copy of the License at\n+ -\n+ -   http://www.apache.org/licenses/LICENSE-2.0\n+ -\n+ - Unless required by applicable law or agreed to in writing, software\n+ - distributed under the License is distributed on an \"AS IS\" BASIS,\n+ - WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ - See the License for the specific language governing permissions and\n+ - limitations under the License.\n+ -->\n+ \n+# Iceberg AWS Integrations\n+\n+Iceberg provides integration with different AWS services through the `iceberg-aws` module. \n+This section describes how to use Iceberg with AWS.\n+\n+## Runtime Packages\n+\n+The `iceberg-aws` module is bundled with Spark and Flink engine runtimes.\n+However, the AWS clients are not bundled so that you can use the same version as your application.\n+Please note that we use the new AWS v2 SDK instead of v1.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99c5fcdf84d111dddd3db70cb67cd8c69e1d2e10"}, "originalPosition": 27}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU3NDIwOTA5", "url": "https://github.com/apache/iceberg/pull/1891#pullrequestreview-557420909", "createdAt": "2020-12-22T23:17:44Z", "commit": {"oid": "99c5fcdf84d111dddd3db70cb67cd8c69e1d2e10"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQyMzoxNzo0NFrOIKL9pw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQyMzoxNzo0NFrOIKL9pw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzU1MjY3OQ==", "bodyText": "You may want to call out the part that matters here, that this is adding software.amazon.awssdk:bundle:2.15.40 to the --packages argument.", "url": "https://github.com/apache/iceberg/pull/1891#discussion_r547552679", "createdAt": "2020-12-22T23:17:44Z", "author": {"login": "rdblue"}, "path": "site/docs/aws.md", "diffHunk": "@@ -0,0 +1,170 @@\n+<!--\n+ - Licensed to the Apache Software Foundation (ASF) under one or more\n+ - contributor license agreements.  See the NOTICE file distributed with\n+ - this work for additional information regarding copyright ownership.\n+ - The ASF licenses this file to You under the Apache License, Version 2.0\n+ - (the \"License\"); you may not use this file except in compliance with\n+ - the License.  You may obtain a copy of the License at\n+ -\n+ -   http://www.apache.org/licenses/LICENSE-2.0\n+ -\n+ - Unless required by applicable law or agreed to in writing, software\n+ - distributed under the License is distributed on an \"AS IS\" BASIS,\n+ - WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ - See the License for the specific language governing permissions and\n+ - limitations under the License.\n+ -->\n+ \n+# Iceberg AWS Integrations\n+\n+Iceberg provides integration with different AWS services through the `iceberg-aws` module. \n+This section describes how to use Iceberg with AWS.\n+\n+## Runtime Packages\n+\n+The `iceberg-aws` module is bundled with Spark and Flink engine runtimes.\n+However, the AWS clients are not bundled so that you can use the same version as your application.\n+Please note that we use the new AWS v2 SDK instead of v1.\n+You can choose to the [AWS SDK bundle](https://mvnrepository.com/artifact/software.amazon.awssdk/bundle), \n+or individual AWS client packages (Glue, S3, DynamoDB, KMS) if you would like to have a minimum dependency footprint.\n+\n+For example, to use AWS features with Spark 3 and AWS clients version 2.15.40, you can start the SQL shell with:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99c5fcdf84d111dddd3db70cb67cd8c69e1d2e10"}, "originalPosition": 31}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU3NDIxMjQ1", "url": "https://github.com/apache/iceberg/pull/1891#pullrequestreview-557421245", "createdAt": "2020-12-22T23:18:43Z", "commit": {"oid": "99c5fcdf84d111dddd3db70cb67cd8c69e1d2e10"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQyMzoxODo0NFrOIKL-0A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQyMzoxODo0NFrOIKL-0A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzU1Mjk3Ng==", "bodyText": "Is this true? I thought that only one version of the table was kept and that it pointed to the Iceberg root metadata file. That file contains more than one snapshot.", "url": "https://github.com/apache/iceberg/pull/1891#discussion_r547552976", "createdAt": "2020-12-22T23:18:44Z", "author": {"login": "rdblue"}, "path": "site/docs/aws.md", "diffHunk": "@@ -0,0 +1,170 @@\n+<!--\n+ - Licensed to the Apache Software Foundation (ASF) under one or more\n+ - contributor license agreements.  See the NOTICE file distributed with\n+ - this work for additional information regarding copyright ownership.\n+ - The ASF licenses this file to You under the Apache License, Version 2.0\n+ - (the \"License\"); you may not use this file except in compliance with\n+ - the License.  You may obtain a copy of the License at\n+ -\n+ -   http://www.apache.org/licenses/LICENSE-2.0\n+ -\n+ - Unless required by applicable law or agreed to in writing, software\n+ - distributed under the License is distributed on an \"AS IS\" BASIS,\n+ - WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ - See the License for the specific language governing permissions and\n+ - limitations under the License.\n+ -->\n+ \n+# Iceberg AWS Integrations\n+\n+Iceberg provides integration with different AWS services through the `iceberg-aws` module. \n+This section describes how to use Iceberg with AWS.\n+\n+## Runtime Packages\n+\n+The `iceberg-aws` module is bundled with Spark and Flink engine runtimes.\n+However, the AWS clients are not bundled so that you can use the same version as your application.\n+Please note that we use the new AWS v2 SDK instead of v1.\n+You can choose to the [AWS SDK bundle](https://mvnrepository.com/artifact/software.amazon.awssdk/bundle), \n+or individual AWS client packages (Glue, S3, DynamoDB, KMS) if you would like to have a minimum dependency footprint.\n+\n+For example, to use AWS features with Spark 3 and AWS clients version 2.15.40, you can start the SQL shell with:\n+\n+```sh\n+spark-sql --packages org.apache.iceberg:iceberg-spark3-runtime:0.11.0,software.amazon.awssdk:bundle:2.15.40 \\\n+    --conf spark.sql.catalog.my_catalog=org.apache.iceberg.spark.SparkCatalog \\\n+    --conf spark.sql.catalog.my_catalog.catalog-impl=org.apache.iceberg.aws.glue.GlueCatalog \\\n+    --conf spark.sql.catalog.my_catalog.warehouse=s3://my-bucket/my-key-prefix \\\n+    --conf spark.sql.catalog.my_catalog.gluecatalog.lock.table=myGlueLockTable\n+```\n+\n+## Glue Catalog\n+\n+Iceberg enables the use of [AWS Glue](https://aws.amazon.com/glue) as the `Catalog` implementation.\n+When used, an Iceberg `Namespace` is stored as a [Glue Database](https://docs.aws.amazon.com/glue/latest/dg/aws-glue-api-catalog-databases.html), \n+an Iceberg `Table` is stored as a [Glue Table](https://docs.aws.amazon.com/glue/latest/dg/aws-glue-api-catalog-tables.html),\n+an Iceberg `Snapshot` is stored as a [Glue TableVersion](https://docs.aws.amazon.com/glue/latest/dg/aws-glue-api-catalog-tables.html#aws-glue-api-catalog-tables-TableVersion). ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99c5fcdf84d111dddd3db70cb67cd8c69e1d2e10"}, "originalPosition": 46}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU3NDIxODUz", "url": "https://github.com/apache/iceberg/pull/1891#pullrequestreview-557421853", "createdAt": "2020-12-22T23:20:37Z", "commit": {"oid": "99c5fcdf84d111dddd3db70cb67cd8c69e1d2e10"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQyMzoyMDozN1rOIKMA6Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQyMzoyMDozN1rOIKMA6Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzU1MzUxMw==", "bodyText": "I would drop references to Iceberg classes here. Most readers are going to care about tables through a SQL or DataFrame interface, not through Iceberg's API. The mapping to Glue database and table names is probably pretty clear.", "url": "https://github.com/apache/iceberg/pull/1891#discussion_r547553513", "createdAt": "2020-12-22T23:20:37Z", "author": {"login": "rdblue"}, "path": "site/docs/aws.md", "diffHunk": "@@ -0,0 +1,170 @@\n+<!--\n+ - Licensed to the Apache Software Foundation (ASF) under one or more\n+ - contributor license agreements.  See the NOTICE file distributed with\n+ - this work for additional information regarding copyright ownership.\n+ - The ASF licenses this file to You under the Apache License, Version 2.0\n+ - (the \"License\"); you may not use this file except in compliance with\n+ - the License.  You may obtain a copy of the License at\n+ -\n+ -   http://www.apache.org/licenses/LICENSE-2.0\n+ -\n+ - Unless required by applicable law or agreed to in writing, software\n+ - distributed under the License is distributed on an \"AS IS\" BASIS,\n+ - WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ - See the License for the specific language governing permissions and\n+ - limitations under the License.\n+ -->\n+ \n+# Iceberg AWS Integrations\n+\n+Iceberg provides integration with different AWS services through the `iceberg-aws` module. \n+This section describes how to use Iceberg with AWS.\n+\n+## Runtime Packages\n+\n+The `iceberg-aws` module is bundled with Spark and Flink engine runtimes.\n+However, the AWS clients are not bundled so that you can use the same version as your application.\n+Please note that we use the new AWS v2 SDK instead of v1.\n+You can choose to the [AWS SDK bundle](https://mvnrepository.com/artifact/software.amazon.awssdk/bundle), \n+or individual AWS client packages (Glue, S3, DynamoDB, KMS) if you would like to have a minimum dependency footprint.\n+\n+For example, to use AWS features with Spark 3 and AWS clients version 2.15.40, you can start the SQL shell with:\n+\n+```sh\n+spark-sql --packages org.apache.iceberg:iceberg-spark3-runtime:0.11.0,software.amazon.awssdk:bundle:2.15.40 \\\n+    --conf spark.sql.catalog.my_catalog=org.apache.iceberg.spark.SparkCatalog \\\n+    --conf spark.sql.catalog.my_catalog.catalog-impl=org.apache.iceberg.aws.glue.GlueCatalog \\\n+    --conf spark.sql.catalog.my_catalog.warehouse=s3://my-bucket/my-key-prefix \\\n+    --conf spark.sql.catalog.my_catalog.gluecatalog.lock.table=myGlueLockTable\n+```\n+\n+## Glue Catalog\n+\n+Iceberg enables the use of [AWS Glue](https://aws.amazon.com/glue) as the `Catalog` implementation.\n+When used, an Iceberg `Namespace` is stored as a [Glue Database](https://docs.aws.amazon.com/glue/latest/dg/aws-glue-api-catalog-databases.html), \n+an Iceberg `Table` is stored as a [Glue Table](https://docs.aws.amazon.com/glue/latest/dg/aws-glue-api-catalog-tables.html),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99c5fcdf84d111dddd3db70cb67cd8c69e1d2e10"}, "originalPosition": 45}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU3NDIyMDgy", "url": "https://github.com/apache/iceberg/pull/1891#pullrequestreview-557422082", "createdAt": "2020-12-22T23:21:21Z", "commit": {"oid": "99c5fcdf84d111dddd3db70cb67cd8c69e1d2e10"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQyMzoyMToyMVrOIKMBpQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQyMzoyMToyMVrOIKMBpQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzU1MzcwMQ==", "bodyText": "I would definitely give a full example of using GlueCatalog here, in addition to linking to Spark and Flink pages.", "url": "https://github.com/apache/iceberg/pull/1891#discussion_r547553701", "createdAt": "2020-12-22T23:21:21Z", "author": {"login": "rdblue"}, "path": "site/docs/aws.md", "diffHunk": "@@ -0,0 +1,170 @@\n+<!--\n+ - Licensed to the Apache Software Foundation (ASF) under one or more\n+ - contributor license agreements.  See the NOTICE file distributed with\n+ - this work for additional information regarding copyright ownership.\n+ - The ASF licenses this file to You under the Apache License, Version 2.0\n+ - (the \"License\"); you may not use this file except in compliance with\n+ - the License.  You may obtain a copy of the License at\n+ -\n+ -   http://www.apache.org/licenses/LICENSE-2.0\n+ -\n+ - Unless required by applicable law or agreed to in writing, software\n+ - distributed under the License is distributed on an \"AS IS\" BASIS,\n+ - WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ - See the License for the specific language governing permissions and\n+ - limitations under the License.\n+ -->\n+ \n+# Iceberg AWS Integrations\n+\n+Iceberg provides integration with different AWS services through the `iceberg-aws` module. \n+This section describes how to use Iceberg with AWS.\n+\n+## Runtime Packages\n+\n+The `iceberg-aws` module is bundled with Spark and Flink engine runtimes.\n+However, the AWS clients are not bundled so that you can use the same version as your application.\n+Please note that we use the new AWS v2 SDK instead of v1.\n+You can choose to the [AWS SDK bundle](https://mvnrepository.com/artifact/software.amazon.awssdk/bundle), \n+or individual AWS client packages (Glue, S3, DynamoDB, KMS) if you would like to have a minimum dependency footprint.\n+\n+For example, to use AWS features with Spark 3 and AWS clients version 2.15.40, you can start the SQL shell with:\n+\n+```sh\n+spark-sql --packages org.apache.iceberg:iceberg-spark3-runtime:0.11.0,software.amazon.awssdk:bundle:2.15.40 \\\n+    --conf spark.sql.catalog.my_catalog=org.apache.iceberg.spark.SparkCatalog \\\n+    --conf spark.sql.catalog.my_catalog.catalog-impl=org.apache.iceberg.aws.glue.GlueCatalog \\\n+    --conf spark.sql.catalog.my_catalog.warehouse=s3://my-bucket/my-key-prefix \\\n+    --conf spark.sql.catalog.my_catalog.gluecatalog.lock.table=myGlueLockTable\n+```\n+\n+## Glue Catalog\n+\n+Iceberg enables the use of [AWS Glue](https://aws.amazon.com/glue) as the `Catalog` implementation.\n+When used, an Iceberg `Namespace` is stored as a [Glue Database](https://docs.aws.amazon.com/glue/latest/dg/aws-glue-api-catalog-databases.html), \n+an Iceberg `Table` is stored as a [Glue Table](https://docs.aws.amazon.com/glue/latest/dg/aws-glue-api-catalog-tables.html),\n+an Iceberg `Snapshot` is stored as a [Glue TableVersion](https://docs.aws.amazon.com/glue/latest/dg/aws-glue-api-catalog-tables.html#aws-glue-api-catalog-tables-TableVersion). \n+You can start using Glue catalog by specifying the `catalog-impl` as `org.apache.iceberg.aws.glue.GlueCatalog`. \n+More details about loading the catalog can be found in individual engine pages, such as [Spark](../spark/#loading-a-custom-catalog) and [Flink](../flink/#creating-catalogs-and-using-catalogs).", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99c5fcdf84d111dddd3db70cb67cd8c69e1d2e10"}, "originalPosition": 48}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU3NDIyMjM4", "url": "https://github.com/apache/iceberg/pull/1891#pullrequestreview-557422238", "createdAt": "2020-12-22T23:21:52Z", "commit": {"oid": "99c5fcdf84d111dddd3db70cb67cd8c69e1d2e10"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQyMzoyMTo1M1rOIKMCOQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQyMzoyMTo1M1rOIKMCOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzU1Mzg0OQ==", "bodyText": "What about adding a table of configuration options instead of sections?", "url": "https://github.com/apache/iceberg/pull/1891#discussion_r547553849", "createdAt": "2020-12-22T23:21:53Z", "author": {"login": "rdblue"}, "path": "site/docs/aws.md", "diffHunk": "@@ -0,0 +1,170 @@\n+<!--\n+ - Licensed to the Apache Software Foundation (ASF) under one or more\n+ - contributor license agreements.  See the NOTICE file distributed with\n+ - this work for additional information regarding copyright ownership.\n+ - The ASF licenses this file to You under the Apache License, Version 2.0\n+ - (the \"License\"); you may not use this file except in compliance with\n+ - the License.  You may obtain a copy of the License at\n+ -\n+ -   http://www.apache.org/licenses/LICENSE-2.0\n+ -\n+ - Unless required by applicable law or agreed to in writing, software\n+ - distributed under the License is distributed on an \"AS IS\" BASIS,\n+ - WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ - See the License for the specific language governing permissions and\n+ - limitations under the License.\n+ -->\n+ \n+# Iceberg AWS Integrations\n+\n+Iceberg provides integration with different AWS services through the `iceberg-aws` module. \n+This section describes how to use Iceberg with AWS.\n+\n+## Runtime Packages\n+\n+The `iceberg-aws` module is bundled with Spark and Flink engine runtimes.\n+However, the AWS clients are not bundled so that you can use the same version as your application.\n+Please note that we use the new AWS v2 SDK instead of v1.\n+You can choose to the [AWS SDK bundle](https://mvnrepository.com/artifact/software.amazon.awssdk/bundle), \n+or individual AWS client packages (Glue, S3, DynamoDB, KMS) if you would like to have a minimum dependency footprint.\n+\n+For example, to use AWS features with Spark 3 and AWS clients version 2.15.40, you can start the SQL shell with:\n+\n+```sh\n+spark-sql --packages org.apache.iceberg:iceberg-spark3-runtime:0.11.0,software.amazon.awssdk:bundle:2.15.40 \\\n+    --conf spark.sql.catalog.my_catalog=org.apache.iceberg.spark.SparkCatalog \\\n+    --conf spark.sql.catalog.my_catalog.catalog-impl=org.apache.iceberg.aws.glue.GlueCatalog \\\n+    --conf spark.sql.catalog.my_catalog.warehouse=s3://my-bucket/my-key-prefix \\\n+    --conf spark.sql.catalog.my_catalog.gluecatalog.lock.table=myGlueLockTable\n+```\n+\n+## Glue Catalog\n+\n+Iceberg enables the use of [AWS Glue](https://aws.amazon.com/glue) as the `Catalog` implementation.\n+When used, an Iceberg `Namespace` is stored as a [Glue Database](https://docs.aws.amazon.com/glue/latest/dg/aws-glue-api-catalog-databases.html), \n+an Iceberg `Table` is stored as a [Glue Table](https://docs.aws.amazon.com/glue/latest/dg/aws-glue-api-catalog-tables.html),\n+an Iceberg `Snapshot` is stored as a [Glue TableVersion](https://docs.aws.amazon.com/glue/latest/dg/aws-glue-api-catalog-tables.html#aws-glue-api-catalog-tables-TableVersion). \n+You can start using Glue catalog by specifying the `catalog-impl` as `org.apache.iceberg.aws.glue.GlueCatalog`. \n+More details about loading the catalog can be found in individual engine pages, such as [Spark](../spark/#loading-a-custom-catalog) and [Flink](../flink/#creating-catalogs-and-using-catalogs).\n+\n+### Glue Catalog ID", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99c5fcdf84d111dddd3db70cb67cd8c69e1d2e10"}, "originalPosition": 50}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU3NDIyNzI0", "url": "https://github.com/apache/iceberg/pull/1891#pullrequestreview-557422724", "createdAt": "2020-12-22T23:23:23Z", "commit": {"oid": "99c5fcdf84d111dddd3db70cb67cd8c69e1d2e10"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQyMzoyMzoyNFrOIKMD_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQyMzoyMzoyNFrOIKMD_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzU1NDMwMA==", "bodyText": "I think it would be a bit cleaner if these catalog options were shorter. this could simply be skip-archive in the catalog config. Similarly, the one above could be catalog-id.", "url": "https://github.com/apache/iceberg/pull/1891#discussion_r547554300", "createdAt": "2020-12-22T23:23:24Z", "author": {"login": "rdblue"}, "path": "site/docs/aws.md", "diffHunk": "@@ -0,0 +1,170 @@\n+<!--\n+ - Licensed to the Apache Software Foundation (ASF) under one or more\n+ - contributor license agreements.  See the NOTICE file distributed with\n+ - this work for additional information regarding copyright ownership.\n+ - The ASF licenses this file to You under the Apache License, Version 2.0\n+ - (the \"License\"); you may not use this file except in compliance with\n+ - the License.  You may obtain a copy of the License at\n+ -\n+ -   http://www.apache.org/licenses/LICENSE-2.0\n+ -\n+ - Unless required by applicable law or agreed to in writing, software\n+ - distributed under the License is distributed on an \"AS IS\" BASIS,\n+ - WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ - See the License for the specific language governing permissions and\n+ - limitations under the License.\n+ -->\n+ \n+# Iceberg AWS Integrations\n+\n+Iceberg provides integration with different AWS services through the `iceberg-aws` module. \n+This section describes how to use Iceberg with AWS.\n+\n+## Runtime Packages\n+\n+The `iceberg-aws` module is bundled with Spark and Flink engine runtimes.\n+However, the AWS clients are not bundled so that you can use the same version as your application.\n+Please note that we use the new AWS v2 SDK instead of v1.\n+You can choose to the [AWS SDK bundle](https://mvnrepository.com/artifact/software.amazon.awssdk/bundle), \n+or individual AWS client packages (Glue, S3, DynamoDB, KMS) if you would like to have a minimum dependency footprint.\n+\n+For example, to use AWS features with Spark 3 and AWS clients version 2.15.40, you can start the SQL shell with:\n+\n+```sh\n+spark-sql --packages org.apache.iceberg:iceberg-spark3-runtime:0.11.0,software.amazon.awssdk:bundle:2.15.40 \\\n+    --conf spark.sql.catalog.my_catalog=org.apache.iceberg.spark.SparkCatalog \\\n+    --conf spark.sql.catalog.my_catalog.catalog-impl=org.apache.iceberg.aws.glue.GlueCatalog \\\n+    --conf spark.sql.catalog.my_catalog.warehouse=s3://my-bucket/my-key-prefix \\\n+    --conf spark.sql.catalog.my_catalog.gluecatalog.lock.table=myGlueLockTable\n+```\n+\n+## Glue Catalog\n+\n+Iceberg enables the use of [AWS Glue](https://aws.amazon.com/glue) as the `Catalog` implementation.\n+When used, an Iceberg `Namespace` is stored as a [Glue Database](https://docs.aws.amazon.com/glue/latest/dg/aws-glue-api-catalog-databases.html), \n+an Iceberg `Table` is stored as a [Glue Table](https://docs.aws.amazon.com/glue/latest/dg/aws-glue-api-catalog-tables.html),\n+an Iceberg `Snapshot` is stored as a [Glue TableVersion](https://docs.aws.amazon.com/glue/latest/dg/aws-glue-api-catalog-tables.html#aws-glue-api-catalog-tables-TableVersion). \n+You can start using Glue catalog by specifying the `catalog-impl` as `org.apache.iceberg.aws.glue.GlueCatalog`. \n+More details about loading the catalog can be found in individual engine pages, such as [Spark](../spark/#loading-a-custom-catalog) and [Flink](../flink/#creating-catalogs-and-using-catalogs).\n+\n+### Glue Catalog ID\n+\n+You can specify the Glue catalog ID through `gluecatalog.id` catalog property to point to a Glue catalog in a different AWS account.\n+The Glue catalog ID is your numeric AWS account ID.\n+If the Glue catalog is in a different region, you should configure you AWS client to point to the correct region, \n+see more details in [AWS client configuration](#aws-client-configurations).\n+\n+### Skip Archive\n+\n+By default, Glue will store all the table versions created and user can rollback a table to any historical version if needed.\n+However, if you are streaming data to Iceberg, this will easily create a lot of Glue table versions.\n+Therefore, it is recommended to turn off the archive feature in Glue by setting `gluecatalog.skip-archive` to false.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99c5fcdf84d111dddd3db70cb67cd8c69e1d2e10"}, "originalPosition": 61}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU3NDIzNDkz", "url": "https://github.com/apache/iceberg/pull/1891#pullrequestreview-557423493", "createdAt": "2020-12-22T23:25:48Z", "commit": {"oid": "99c5fcdf84d111dddd3db70cb67cd8c69e1d2e10"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQyMzoyNTo0OFrOIKMG1Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQyMzoyNTo0OFrOIKMG1Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzU1NTAyOQ==", "bodyText": "What about lock-wait-ms and lock-expire-ms?", "url": "https://github.com/apache/iceberg/pull/1891#discussion_r547555029", "createdAt": "2020-12-22T23:25:48Z", "author": {"login": "rdblue"}, "path": "site/docs/aws.md", "diffHunk": "@@ -0,0 +1,170 @@\n+<!--\n+ - Licensed to the Apache Software Foundation (ASF) under one or more\n+ - contributor license agreements.  See the NOTICE file distributed with\n+ - this work for additional information regarding copyright ownership.\n+ - The ASF licenses this file to You under the Apache License, Version 2.0\n+ - (the \"License\"); you may not use this file except in compliance with\n+ - the License.  You may obtain a copy of the License at\n+ -\n+ -   http://www.apache.org/licenses/LICENSE-2.0\n+ -\n+ - Unless required by applicable law or agreed to in writing, software\n+ - distributed under the License is distributed on an \"AS IS\" BASIS,\n+ - WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ - See the License for the specific language governing permissions and\n+ - limitations under the License.\n+ -->\n+ \n+# Iceberg AWS Integrations\n+\n+Iceberg provides integration with different AWS services through the `iceberg-aws` module. \n+This section describes how to use Iceberg with AWS.\n+\n+## Runtime Packages\n+\n+The `iceberg-aws` module is bundled with Spark and Flink engine runtimes.\n+However, the AWS clients are not bundled so that you can use the same version as your application.\n+Please note that we use the new AWS v2 SDK instead of v1.\n+You can choose to the [AWS SDK bundle](https://mvnrepository.com/artifact/software.amazon.awssdk/bundle), \n+or individual AWS client packages (Glue, S3, DynamoDB, KMS) if you would like to have a minimum dependency footprint.\n+\n+For example, to use AWS features with Spark 3 and AWS clients version 2.15.40, you can start the SQL shell with:\n+\n+```sh\n+spark-sql --packages org.apache.iceberg:iceberg-spark3-runtime:0.11.0,software.amazon.awssdk:bundle:2.15.40 \\\n+    --conf spark.sql.catalog.my_catalog=org.apache.iceberg.spark.SparkCatalog \\\n+    --conf spark.sql.catalog.my_catalog.catalog-impl=org.apache.iceberg.aws.glue.GlueCatalog \\\n+    --conf spark.sql.catalog.my_catalog.warehouse=s3://my-bucket/my-key-prefix \\\n+    --conf spark.sql.catalog.my_catalog.gluecatalog.lock.table=myGlueLockTable\n+```\n+\n+## Glue Catalog\n+\n+Iceberg enables the use of [AWS Glue](https://aws.amazon.com/glue) as the `Catalog` implementation.\n+When used, an Iceberg `Namespace` is stored as a [Glue Database](https://docs.aws.amazon.com/glue/latest/dg/aws-glue-api-catalog-databases.html), \n+an Iceberg `Table` is stored as a [Glue Table](https://docs.aws.amazon.com/glue/latest/dg/aws-glue-api-catalog-tables.html),\n+an Iceberg `Snapshot` is stored as a [Glue TableVersion](https://docs.aws.amazon.com/glue/latest/dg/aws-glue-api-catalog-tables.html#aws-glue-api-catalog-tables-TableVersion). \n+You can start using Glue catalog by specifying the `catalog-impl` as `org.apache.iceberg.aws.glue.GlueCatalog`. \n+More details about loading the catalog can be found in individual engine pages, such as [Spark](../spark/#loading-a-custom-catalog) and [Flink](../flink/#creating-catalogs-and-using-catalogs).\n+\n+### Glue Catalog ID\n+\n+You can specify the Glue catalog ID through `gluecatalog.id` catalog property to point to a Glue catalog in a different AWS account.\n+The Glue catalog ID is your numeric AWS account ID.\n+If the Glue catalog is in a different region, you should configure you AWS client to point to the correct region, \n+see more details in [AWS client configuration](#aws-client-configurations).\n+\n+### Skip Archive\n+\n+By default, Glue will store all the table versions created and user can rollback a table to any historical version if needed.\n+However, if you are streaming data to Iceberg, this will easily create a lot of Glue table versions.\n+Therefore, it is recommended to turn off the archive feature in Glue by setting `gluecatalog.skip-archive` to false.\n+For more details, please read [Glue Quotas](https://docs.aws.amazon.com/general/latest/gr/glue.html) and the [UpdateTable API](https://docs.aws.amazon.com/glue/latest/webapi/API_UpdateTable.html).\n+\n+### DynamoDB for locking Glue tables\n+\n+Glue does not have a strong guarantee over concurrent updates to a table. \n+Although it throws `ConcurrentModificationException` when detecting two processes updating a table at the same time,\n+there is no guarantee that one update would not clobber the other update.\n+Therefore, DynamoDB lock is enabled by default for Glue, so that for every commit, \n+`GlueCatalog` first obtains a lock using a helper DynamoDB table and then try to safely modify the Glue table.\n+User must specify a table name through catalog property `gluecatalog.lock.table` as the helper DynamoDB lock table to use.\n+It is recommend to use the same DynamoDB table for operations in the same Glue catalog,\n+and use a different table for a different Glue catalog in another account or region.\n+If the lock table with the given name does not exist in DynamoDB, a new table is created with billing mode set as [Pay-per-Request](https://aws.amazon.com/blogs/aws/amazon-dynamodb-on-demand-no-capacity-planning-and-pay-per-request-pricing).\n+The lock has the following additional properties:\n+\n+* `gluecatalog.lock.wait-ms`:  max time to wait for lock acquisition, defaults to 3 minutes\n+* `gluecatalog.lock.expire-ms`: max time a table can be locked by a process, defaults to 20 minutes", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99c5fcdf84d111dddd3db70cb67cd8c69e1d2e10"}, "originalPosition": 78}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU3NDI0ODU3", "url": "https://github.com/apache/iceberg/pull/1891#pullrequestreview-557424857", "createdAt": "2020-12-22T23:30:12Z", "commit": {"oid": "99c5fcdf84d111dddd3db70cb67cd8c69e1d2e10"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQyMzozMDoxM1rOIKML6Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQyMzozMDoxM1rOIKML6Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzU1NjMyOQ==", "bodyText": "Great info here, but I think it may be easier to maintain as a table.", "url": "https://github.com/apache/iceberg/pull/1891#discussion_r547556329", "createdAt": "2020-12-22T23:30:13Z", "author": {"login": "rdblue"}, "path": "site/docs/aws.md", "diffHunk": "@@ -0,0 +1,170 @@\n+<!--\n+ - Licensed to the Apache Software Foundation (ASF) under one or more\n+ - contributor license agreements.  See the NOTICE file distributed with\n+ - this work for additional information regarding copyright ownership.\n+ - The ASF licenses this file to You under the Apache License, Version 2.0\n+ - (the \"License\"); you may not use this file except in compliance with\n+ - the License.  You may obtain a copy of the License at\n+ -\n+ -   http://www.apache.org/licenses/LICENSE-2.0\n+ -\n+ - Unless required by applicable law or agreed to in writing, software\n+ - distributed under the License is distributed on an \"AS IS\" BASIS,\n+ - WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ - See the License for the specific language governing permissions and\n+ - limitations under the License.\n+ -->\n+ \n+# Iceberg AWS Integrations\n+\n+Iceberg provides integration with different AWS services through the `iceberg-aws` module. \n+This section describes how to use Iceberg with AWS.\n+\n+## Runtime Packages\n+\n+The `iceberg-aws` module is bundled with Spark and Flink engine runtimes.\n+However, the AWS clients are not bundled so that you can use the same version as your application.\n+Please note that we use the new AWS v2 SDK instead of v1.\n+You can choose to the [AWS SDK bundle](https://mvnrepository.com/artifact/software.amazon.awssdk/bundle), \n+or individual AWS client packages (Glue, S3, DynamoDB, KMS) if you would like to have a minimum dependency footprint.\n+\n+For example, to use AWS features with Spark 3 and AWS clients version 2.15.40, you can start the SQL shell with:\n+\n+```sh\n+spark-sql --packages org.apache.iceberg:iceberg-spark3-runtime:0.11.0,software.amazon.awssdk:bundle:2.15.40 \\\n+    --conf spark.sql.catalog.my_catalog=org.apache.iceberg.spark.SparkCatalog \\\n+    --conf spark.sql.catalog.my_catalog.catalog-impl=org.apache.iceberg.aws.glue.GlueCatalog \\\n+    --conf spark.sql.catalog.my_catalog.warehouse=s3://my-bucket/my-key-prefix \\\n+    --conf spark.sql.catalog.my_catalog.gluecatalog.lock.table=myGlueLockTable\n+```\n+\n+## Glue Catalog\n+\n+Iceberg enables the use of [AWS Glue](https://aws.amazon.com/glue) as the `Catalog` implementation.\n+When used, an Iceberg `Namespace` is stored as a [Glue Database](https://docs.aws.amazon.com/glue/latest/dg/aws-glue-api-catalog-databases.html), \n+an Iceberg `Table` is stored as a [Glue Table](https://docs.aws.amazon.com/glue/latest/dg/aws-glue-api-catalog-tables.html),\n+an Iceberg `Snapshot` is stored as a [Glue TableVersion](https://docs.aws.amazon.com/glue/latest/dg/aws-glue-api-catalog-tables.html#aws-glue-api-catalog-tables-TableVersion). \n+You can start using Glue catalog by specifying the `catalog-impl` as `org.apache.iceberg.aws.glue.GlueCatalog`. \n+More details about loading the catalog can be found in individual engine pages, such as [Spark](../spark/#loading-a-custom-catalog) and [Flink](../flink/#creating-catalogs-and-using-catalogs).\n+\n+### Glue Catalog ID\n+\n+You can specify the Glue catalog ID through `gluecatalog.id` catalog property to point to a Glue catalog in a different AWS account.\n+The Glue catalog ID is your numeric AWS account ID.\n+If the Glue catalog is in a different region, you should configure you AWS client to point to the correct region, \n+see more details in [AWS client configuration](#aws-client-configurations).\n+\n+### Skip Archive\n+\n+By default, Glue will store all the table versions created and user can rollback a table to any historical version if needed.\n+However, if you are streaming data to Iceberg, this will easily create a lot of Glue table versions.\n+Therefore, it is recommended to turn off the archive feature in Glue by setting `gluecatalog.skip-archive` to false.\n+For more details, please read [Glue Quotas](https://docs.aws.amazon.com/general/latest/gr/glue.html) and the [UpdateTable API](https://docs.aws.amazon.com/glue/latest/webapi/API_UpdateTable.html).\n+\n+### DynamoDB for locking Glue tables\n+\n+Glue does not have a strong guarantee over concurrent updates to a table. \n+Although it throws `ConcurrentModificationException` when detecting two processes updating a table at the same time,\n+there is no guarantee that one update would not clobber the other update.\n+Therefore, DynamoDB lock is enabled by default for Glue, so that for every commit, \n+`GlueCatalog` first obtains a lock using a helper DynamoDB table and then try to safely modify the Glue table.\n+User must specify a table name through catalog property `gluecatalog.lock.table` as the helper DynamoDB lock table to use.\n+It is recommend to use the same DynamoDB table for operations in the same Glue catalog,\n+and use a different table for a different Glue catalog in another account or region.\n+If the lock table with the given name does not exist in DynamoDB, a new table is created with billing mode set as [Pay-per-Request](https://aws.amazon.com/blogs/aws/amazon-dynamodb-on-demand-no-capacity-planning-and-pay-per-request-pricing).\n+The lock has the following additional properties:\n+\n+* `gluecatalog.lock.wait-ms`:  max time to wait for lock acquisition, defaults to 3 minutes\n+* `gluecatalog.lock.expire-ms`: max time a table can be locked by a process, defaults to 20 minutes\n+\n+If your use case only consists of single-process low-frequency (e.g. hourly, daily) updates to a table,\n+you can also turn off this locking feature by setting `gluecatalog.lock.enabled` as false.\n+\n+### Warehouse Location\n+\n+By default, Glue uses `S3FileIO` and only allows a warehouse location in S3. \n+To store data in a different local or cloud store, Glue catalog can switch to use `HadoopFileIO` \n+or any custom FileIO using the mechanism described in the [custom FileIO](../custom-catalog/#custom-file-io-implementation) section.\n+\n+## S3 FileIO\n+\n+Iceberg allows users to write data to S3 through `S3FileIO`.\n+`GlueCatalog` by default uses this FileIO, and other catalogs can load this FileIO using the `io-impl` catalog property.\n+\n+### Progressive Multipart Upload\n+\n+`S3FileIO` implements a customized progressive multipart upload algorithm to upload data.\n+Data files are uploaded in parts in parallel as soon as each part is ready,\n+and each file part is deleted as soon as its upload process completes.\n+This provides maximized upload speed and minimized local disk usage during uploads.\n+Here are the configurations user can tune related to this feature:\n+\n+* `s3fileio.multipart.num-threads`: number of threads to use for uploading parts to S3 (shared across all output streams), defaults to the available number of processors in the system\n+* `s3fileio.multipart.part.size`: the size of a single part for multipart upload requests, defaults to 32MB\n+* `s3fileio.multipart.threshold`: the threshold expressed as a factor times the multipart size at which to switch from uploading using a single put object request to uploading using multipart upload, defaults to 1.5\n+* `s3fileio.staging.dir`: the directory to hold temporary files, defaults to Java's `java.io.tmpdir` property value", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99c5fcdf84d111dddd3db70cb67cd8c69e1d2e10"}, "originalPosition": 105}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU3NDI1ODYz", "url": "https://github.com/apache/iceberg/pull/1891#pullrequestreview-557425863", "createdAt": "2020-12-22T23:33:39Z", "commit": {"oid": "99c5fcdf84d111dddd3db70cb67cd8c69e1d2e10"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQyMzozMzozOVrOIKMPMA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQyMzozMzozOVrOIKMPMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzU1NzE2OA==", "bodyText": "Does the Glue catalog support custom database locations?", "url": "https://github.com/apache/iceberg/pull/1891#discussion_r547557168", "createdAt": "2020-12-22T23:33:39Z", "author": {"login": "rdblue"}, "path": "site/docs/aws.md", "diffHunk": "@@ -0,0 +1,170 @@\n+<!--\n+ - Licensed to the Apache Software Foundation (ASF) under one or more\n+ - contributor license agreements.  See the NOTICE file distributed with\n+ - this work for additional information regarding copyright ownership.\n+ - The ASF licenses this file to You under the Apache License, Version 2.0\n+ - (the \"License\"); you may not use this file except in compliance with\n+ - the License.  You may obtain a copy of the License at\n+ -\n+ -   http://www.apache.org/licenses/LICENSE-2.0\n+ -\n+ - Unless required by applicable law or agreed to in writing, software\n+ - distributed under the License is distributed on an \"AS IS\" BASIS,\n+ - WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ - See the License for the specific language governing permissions and\n+ - limitations under the License.\n+ -->\n+ \n+# Iceberg AWS Integrations\n+\n+Iceberg provides integration with different AWS services through the `iceberg-aws` module. \n+This section describes how to use Iceberg with AWS.\n+\n+## Runtime Packages\n+\n+The `iceberg-aws` module is bundled with Spark and Flink engine runtimes.\n+However, the AWS clients are not bundled so that you can use the same version as your application.\n+Please note that we use the new AWS v2 SDK instead of v1.\n+You can choose to the [AWS SDK bundle](https://mvnrepository.com/artifact/software.amazon.awssdk/bundle), \n+or individual AWS client packages (Glue, S3, DynamoDB, KMS) if you would like to have a minimum dependency footprint.\n+\n+For example, to use AWS features with Spark 3 and AWS clients version 2.15.40, you can start the SQL shell with:\n+\n+```sh\n+spark-sql --packages org.apache.iceberg:iceberg-spark3-runtime:0.11.0,software.amazon.awssdk:bundle:2.15.40 \\\n+    --conf spark.sql.catalog.my_catalog=org.apache.iceberg.spark.SparkCatalog \\\n+    --conf spark.sql.catalog.my_catalog.catalog-impl=org.apache.iceberg.aws.glue.GlueCatalog \\\n+    --conf spark.sql.catalog.my_catalog.warehouse=s3://my-bucket/my-key-prefix \\", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99c5fcdf84d111dddd3db70cb67cd8c69e1d2e10"}, "originalPosition": 37}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "99c5fcdf84d111dddd3db70cb67cd8c69e1d2e10", "author": {"user": {"login": "jackye1995", "name": "Jack Ye"}}, "url": "https://github.com/apache/iceberg/commit/99c5fcdf84d111dddd3db70cb67cd8c69e1d2e10", "committedDate": "2020-12-22T06:04:52Z", "message": "update doc based on feedback and latest client config"}, "afterCommit": {"oid": "d62af37e484322f7e839a3d4dd4870041809987c", "author": {"user": {"login": "jackye1995", "name": "Jack Ye"}}, "url": "https://github.com/apache/iceberg/commit/d62af37e484322f7e839a3d4dd4870041809987c", "committedDate": "2021-01-07T23:23:00Z", "message": "update doc, add lock config table, reorganize tabs"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTYzOTI2MDU3", "url": "https://github.com/apache/iceberg/pull/1891#pullrequestreview-563926057", "createdAt": "2021-01-08T00:37:30Z", "commit": {"oid": "d62af37e484322f7e839a3d4dd4870041809987c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wOFQwMDozNzozMVrOIQBiNg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wOFQwMDozNzozMVrOIQBiNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzY3MzI3MA==", "bodyText": "Have we released this yet? We would normally make it s3fileio.multipart.part-size-bytes:\n\npart is part of \"part size\" and isn't really part of the hierarchy\nWe prefer to have clear units", "url": "https://github.com/apache/iceberg/pull/1891#discussion_r553673270", "createdAt": "2021-01-08T00:37:31Z", "author": {"login": "rdblue"}, "path": "site/docs/aws.md", "diffHunk": "@@ -0,0 +1,187 @@\n+<!--\n+ - Licensed to the Apache Software Foundation (ASF) under one or more\n+ - contributor license agreements.  See the NOTICE file distributed with\n+ - this work for additional information regarding copyright ownership.\n+ - The ASF licenses this file to You under the Apache License, Version 2.0\n+ - (the \"License\"); you may not use this file except in compliance with\n+ - the License.  You may obtain a copy of the License at\n+ -\n+ -   http://www.apache.org/licenses/LICENSE-2.0\n+ -\n+ - Unless required by applicable law or agreed to in writing, software\n+ - distributed under the License is distributed on an \"AS IS\" BASIS,\n+ - WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ - See the License for the specific language governing permissions and\n+ - limitations under the License.\n+ -->\n+ \n+# Iceberg AWS Integrations\n+\n+Iceberg provides integration with different AWS services through the `iceberg-aws` module. \n+This section describes how to use Iceberg with AWS.\n+\n+## Runtime Packages\n+\n+The `iceberg-aws` module is bundled with Spark and Flink engine runtimes.\n+However, the AWS clients are not bundled so that you can use the same client version as your application.\n+You will need to provide the AWS v2 SDK because that is what Iceberg depends on.\n+You can choose to use the [AWS SDK bundle](https://mvnrepository.com/artifact/software.amazon.awssdk/bundle), \n+or individual AWS client packages (Glue, S3, DynamoDB, KMS, STS) if you would like to have a minimal dependency footprint.\n+\n+For example, to use AWS features with Spark 3 and AWS clients version 2.15.40, you can start the SQL shell with:\n+\n+```sh\n+spark-sql --packages org.apache.iceberg:iceberg-spark3-runtime:0.11.0,software.amazon.awssdk:bundle:2.15.40 \\\n+    --conf spark.sql.catalog.my_catalog=org.apache.iceberg.spark.SparkCatalog \\\n+    --conf spark.sql.catalog.my_catalog.warehouse=s3://my-bucket/my/key/prefix \\    \n+    --conf spark.sql.catalog.my_catalog.catalog-impl=org.apache.iceberg.aws.glue.GlueCatalog \\\n+    --conf spark.sql.catalog.my_catalog.lock.impl=org.apache.iceberg.aws.glue.DynamoLockManager \\\n+    --conf spark.sql.catalog.my_catalog.lock.table=myGlueLockTable\n+```\n+\n+As you can see, In the shell command, we use `--packages` to specify the additional AWS bundle dependency with its version as `2.15.40`.\n+\n+## Glue Catalog\n+\n+Iceberg enables the use of [AWS Glue](https://aws.amazon.com/glue) as the `Catalog` implementation.\n+When used, an Iceberg namespace is stored as a [Glue Database](https://docs.aws.amazon.com/glue/latest/dg/aws-glue-api-catalog-databases.html), \n+an Iceberg table is stored as a [Glue Table](https://docs.aws.amazon.com/glue/latest/dg/aws-glue-api-catalog-tables.html),\n+and every Iceberg table version is stored as a [Glue TableVersion](https://docs.aws.amazon.com/glue/latest/dg/aws-glue-api-catalog-tables.html#aws-glue-api-catalog-tables-TableVersion). \n+You can start using Glue catalog by specifying the `catalog-impl` as `org.apache.iceberg.aws.glue.GlueCatalog`,\n+just like what is shown in the [runtime packages](#runtime-packages) section above. \n+More details about loading the catalog can be found in individual engine pages, such as [Spark](../spark/#loading-a-custom-catalog) and [Flink](../flink/#creating-catalogs-and-using-catalogs).\n+\n+### Glue Catalog ID\n+\n+You can specify the Glue catalog ID through `gluecatalog.id` catalog property to point to a Glue catalog in a different AWS account.\n+The Glue catalog ID is your numeric AWS account ID.\n+If the Glue catalog is in a different region, you should configure you AWS client to point to the correct region, \n+see more details in [AWS client customization](#aws-client-customization).\n+\n+### Skip Archive\n+\n+By default, Glue stores all the table versions created and user can rollback a table to any historical version if needed.\n+However, if you are streaming data to Iceberg, this will easily create a lot of Glue table versions.\n+Therefore, it is recommended to turn off the archive feature in Glue by setting `gluecatalog.skip-archive` to true.\n+For more details, please read [Glue Quotas](https://docs.aws.amazon.com/general/latest/gr/glue.html) and the [UpdateTable API](https://docs.aws.amazon.com/glue/latest/webapi/API_UpdateTable.html).\n+\n+### DynamoDB for commit locking\n+\n+Glue does not have a strong guarantee over concurrent updates to a table. \n+Although it throws `ConcurrentModificationException` when detecting two processes updating a table at the same time,\n+there is no guarantee that one update would not clobber the other update.\n+Therefore, DynamoDB can be used for Glue, so that for every commit, \n+`GlueCatalog` first obtains a lock using a helper DynamoDB table and then try to safely modify the Glue table.\n+\n+To enable this feature, use the lock related catalog properties:\n+\n+1. Set `lock.impl` as `org.apache.iceberg.aws.glue.DynamoLockManager`.\n+2. Set `lock.table` as the DynamoDB table name you would like to use. If the lock table with the given name does not exist in DynamoDB, a new table is created with billing mode set as [pay-per-request](https://aws.amazon.com/blogs/aws/amazon-dynamodb-on-demand-no-capacity-planning-and-pay-per-request-pricing).\n+\n+Other lock related catalog properties can also be used to adjust locking behaviors such as heartbeat interval.\n+For more details, please refer to [Lock catalog properties](../configuration/#lock-catalog-properties). \n+\n+### Warehouse Location\n+\n+By default, Glue only allows a warehouse location in S3 because of the use of `S3FileIO`.\n+To store data in a different local or cloud store, Glue catalog can switch to use `HadoopFileIO` \n+or any custom FileIO through the mechanism described in the [custom FileIO](../custom-catalog/#custom-file-io-implementation) section.\n+\n+### Table Location\n+\n+By default, the root location for a table `my_table` of namespace `my_ns` is at `my-warehouse-location/my-ns.db/my-table`.\n+This root location can be changed at both namespace and table level.\n+\n+To use a different path prefix for all tables under a namespace, use any AWS Glue client SDK you like to update the `locationUri` attribute of the corresponding Glue database.\n+For example, you can update the `locationUri` of `my_ns` to `s3://my-ns-bucket`, \n+then any newly created table will have a default root location under the new prefix.\n+For example, a new table `my_table_2` will have its root location at `s3://my-ns-bucket/my_table_2`.\n+\n+To use a completely different root path for a specific table, set the `location` table property to be the desired root path value.\n+\n+## S3 FileIO\n+\n+Iceberg allows users to write data to S3 through `S3FileIO`.\n+`GlueCatalog` by default uses this FileIO, and other catalogs can load this FileIO using the `io-impl` catalog property.\n+\n+### Progressive Multipart Upload\n+\n+`S3FileIO` implements a customized progressive multipart upload algorithm to upload data.\n+Data files are uploaded by parts in parallel as soon as each part is ready,\n+and each file part is deleted as soon as its upload process completes.\n+This provides maximized upload speed and minimized local disk usage during uploads.\n+Here are the configurations that users can tune related to this feature:\n+\n+| Property                          | Default                                            | Description                                            |\n+| --------------------------------- | -------------------------------------------------- | ------------------------------------------------------ |\n+| s3fileio.multipart.num-threads    | the available number of processors in the system   | number of threads to use for uploading parts to S3 (shared across all output streams)  |\n+| s3fileio.multipart.part.size      | 32MB                                               | the size of a single part for multipart upload requests  |", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d62af37e484322f7e839a3d4dd4870041809987c"}, "originalPosition": 118}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTYzOTI2MjQy", "url": "https://github.com/apache/iceberg/pull/1891#pullrequestreview-563926242", "createdAt": "2021-01-08T00:38:13Z", "commit": {"oid": "d62af37e484322f7e839a3d4dd4870041809987c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wOFQwMDozODoxNFrOIQBi1w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wOFQwMDozODoxNFrOIQBi1w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzY3MzQzMQ==", "bodyText": "Is there anything else under staging, or should this be staging-dir?", "url": "https://github.com/apache/iceberg/pull/1891#discussion_r553673431", "createdAt": "2021-01-08T00:38:14Z", "author": {"login": "rdblue"}, "path": "site/docs/aws.md", "diffHunk": "@@ -0,0 +1,187 @@\n+<!--\n+ - Licensed to the Apache Software Foundation (ASF) under one or more\n+ - contributor license agreements.  See the NOTICE file distributed with\n+ - this work for additional information regarding copyright ownership.\n+ - The ASF licenses this file to You under the Apache License, Version 2.0\n+ - (the \"License\"); you may not use this file except in compliance with\n+ - the License.  You may obtain a copy of the License at\n+ -\n+ -   http://www.apache.org/licenses/LICENSE-2.0\n+ -\n+ - Unless required by applicable law or agreed to in writing, software\n+ - distributed under the License is distributed on an \"AS IS\" BASIS,\n+ - WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ - See the License for the specific language governing permissions and\n+ - limitations under the License.\n+ -->\n+ \n+# Iceberg AWS Integrations\n+\n+Iceberg provides integration with different AWS services through the `iceberg-aws` module. \n+This section describes how to use Iceberg with AWS.\n+\n+## Runtime Packages\n+\n+The `iceberg-aws` module is bundled with Spark and Flink engine runtimes.\n+However, the AWS clients are not bundled so that you can use the same client version as your application.\n+You will need to provide the AWS v2 SDK because that is what Iceberg depends on.\n+You can choose to use the [AWS SDK bundle](https://mvnrepository.com/artifact/software.amazon.awssdk/bundle), \n+or individual AWS client packages (Glue, S3, DynamoDB, KMS, STS) if you would like to have a minimal dependency footprint.\n+\n+For example, to use AWS features with Spark 3 and AWS clients version 2.15.40, you can start the SQL shell with:\n+\n+```sh\n+spark-sql --packages org.apache.iceberg:iceberg-spark3-runtime:0.11.0,software.amazon.awssdk:bundle:2.15.40 \\\n+    --conf spark.sql.catalog.my_catalog=org.apache.iceberg.spark.SparkCatalog \\\n+    --conf spark.sql.catalog.my_catalog.warehouse=s3://my-bucket/my/key/prefix \\    \n+    --conf spark.sql.catalog.my_catalog.catalog-impl=org.apache.iceberg.aws.glue.GlueCatalog \\\n+    --conf spark.sql.catalog.my_catalog.lock.impl=org.apache.iceberg.aws.glue.DynamoLockManager \\\n+    --conf spark.sql.catalog.my_catalog.lock.table=myGlueLockTable\n+```\n+\n+As you can see, In the shell command, we use `--packages` to specify the additional AWS bundle dependency with its version as `2.15.40`.\n+\n+## Glue Catalog\n+\n+Iceberg enables the use of [AWS Glue](https://aws.amazon.com/glue) as the `Catalog` implementation.\n+When used, an Iceberg namespace is stored as a [Glue Database](https://docs.aws.amazon.com/glue/latest/dg/aws-glue-api-catalog-databases.html), \n+an Iceberg table is stored as a [Glue Table](https://docs.aws.amazon.com/glue/latest/dg/aws-glue-api-catalog-tables.html),\n+and every Iceberg table version is stored as a [Glue TableVersion](https://docs.aws.amazon.com/glue/latest/dg/aws-glue-api-catalog-tables.html#aws-glue-api-catalog-tables-TableVersion). \n+You can start using Glue catalog by specifying the `catalog-impl` as `org.apache.iceberg.aws.glue.GlueCatalog`,\n+just like what is shown in the [runtime packages](#runtime-packages) section above. \n+More details about loading the catalog can be found in individual engine pages, such as [Spark](../spark/#loading-a-custom-catalog) and [Flink](../flink/#creating-catalogs-and-using-catalogs).\n+\n+### Glue Catalog ID\n+\n+You can specify the Glue catalog ID through `gluecatalog.id` catalog property to point to a Glue catalog in a different AWS account.\n+The Glue catalog ID is your numeric AWS account ID.\n+If the Glue catalog is in a different region, you should configure you AWS client to point to the correct region, \n+see more details in [AWS client customization](#aws-client-customization).\n+\n+### Skip Archive\n+\n+By default, Glue stores all the table versions created and user can rollback a table to any historical version if needed.\n+However, if you are streaming data to Iceberg, this will easily create a lot of Glue table versions.\n+Therefore, it is recommended to turn off the archive feature in Glue by setting `gluecatalog.skip-archive` to true.\n+For more details, please read [Glue Quotas](https://docs.aws.amazon.com/general/latest/gr/glue.html) and the [UpdateTable API](https://docs.aws.amazon.com/glue/latest/webapi/API_UpdateTable.html).\n+\n+### DynamoDB for commit locking\n+\n+Glue does not have a strong guarantee over concurrent updates to a table. \n+Although it throws `ConcurrentModificationException` when detecting two processes updating a table at the same time,\n+there is no guarantee that one update would not clobber the other update.\n+Therefore, DynamoDB can be used for Glue, so that for every commit, \n+`GlueCatalog` first obtains a lock using a helper DynamoDB table and then try to safely modify the Glue table.\n+\n+To enable this feature, use the lock related catalog properties:\n+\n+1. Set `lock.impl` as `org.apache.iceberg.aws.glue.DynamoLockManager`.\n+2. Set `lock.table` as the DynamoDB table name you would like to use. If the lock table with the given name does not exist in DynamoDB, a new table is created with billing mode set as [pay-per-request](https://aws.amazon.com/blogs/aws/amazon-dynamodb-on-demand-no-capacity-planning-and-pay-per-request-pricing).\n+\n+Other lock related catalog properties can also be used to adjust locking behaviors such as heartbeat interval.\n+For more details, please refer to [Lock catalog properties](../configuration/#lock-catalog-properties). \n+\n+### Warehouse Location\n+\n+By default, Glue only allows a warehouse location in S3 because of the use of `S3FileIO`.\n+To store data in a different local or cloud store, Glue catalog can switch to use `HadoopFileIO` \n+or any custom FileIO through the mechanism described in the [custom FileIO](../custom-catalog/#custom-file-io-implementation) section.\n+\n+### Table Location\n+\n+By default, the root location for a table `my_table` of namespace `my_ns` is at `my-warehouse-location/my-ns.db/my-table`.\n+This root location can be changed at both namespace and table level.\n+\n+To use a different path prefix for all tables under a namespace, use any AWS Glue client SDK you like to update the `locationUri` attribute of the corresponding Glue database.\n+For example, you can update the `locationUri` of `my_ns` to `s3://my-ns-bucket`, \n+then any newly created table will have a default root location under the new prefix.\n+For example, a new table `my_table_2` will have its root location at `s3://my-ns-bucket/my_table_2`.\n+\n+To use a completely different root path for a specific table, set the `location` table property to be the desired root path value.\n+\n+## S3 FileIO\n+\n+Iceberg allows users to write data to S3 through `S3FileIO`.\n+`GlueCatalog` by default uses this FileIO, and other catalogs can load this FileIO using the `io-impl` catalog property.\n+\n+### Progressive Multipart Upload\n+\n+`S3FileIO` implements a customized progressive multipart upload algorithm to upload data.\n+Data files are uploaded by parts in parallel as soon as each part is ready,\n+and each file part is deleted as soon as its upload process completes.\n+This provides maximized upload speed and minimized local disk usage during uploads.\n+Here are the configurations that users can tune related to this feature:\n+\n+| Property                          | Default                                            | Description                                            |\n+| --------------------------------- | -------------------------------------------------- | ------------------------------------------------------ |\n+| s3fileio.multipart.num-threads    | the available number of processors in the system   | number of threads to use for uploading parts to S3 (shared across all output streams)  |\n+| s3fileio.multipart.part.size      | 32MB                                               | the size of a single part for multipart upload requests  |\n+| s3fileio.multipart.threshold      | 1.5                                                | the threshold expressed as a factor times the multipart size at which to switch from uploading using a single put object request to uploading using multipart upload  |\n+| s3fileio.staging.dir              | `java.io.tmpdir` property value                    | the directory to hold temporary files  |", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d62af37e484322f7e839a3d4dd4870041809987c"}, "originalPosition": 120}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTYzOTI2NjM3", "url": "https://github.com/apache/iceberg/pull/1891#pullrequestreview-563926637", "createdAt": "2021-01-08T00:39:30Z", "commit": {"oid": "d62af37e484322f7e839a3d4dd4870041809987c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wOFQwMDozOTozMFrOIQBkPA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wOFQwMDozOTozMFrOIQBkPA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzY3Mzc4OA==", "bodyText": "The other implementation class properties are something-impl. Shouldn't this be lock-impl instead to match those? Then the other properties are in the lock namespace.", "url": "https://github.com/apache/iceberg/pull/1891#discussion_r553673788", "createdAt": "2021-01-08T00:39:30Z", "author": {"login": "rdblue"}, "path": "site/docs/configuration.md", "diffHunk": "@@ -35,6 +35,20 @@ The properties can be manually constructed or passed in from a compute engine li\n Spark uses its session properties as catalog properties, see more details in the [Spark configuration](#spark-configuration) section.\n Flink passes in catalog properties through `CREATE CATALOG` statement, see more details in the [Flink](../flink/#creating-catalogs-and-using-catalogs) section.\n \n+### Lock catalog properties\n+\n+Here are the catalog properties related to locking. They are used by some catalog implementations to control the locking behavior during commits.\n+\n+| Property                          | Default            | Description                                            |\n+| --------------------------------- | ------------------ | ------------------------------------------------------ |\n+| lock.impl                         | null               | a custom implementation of the lock manager, the actual interface depends on the catalog used  |", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d62af37e484322f7e839a3d4dd4870041809987c"}, "originalPosition": 10}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTYzOTI2ODQ1", "url": "https://github.com/apache/iceberg/pull/1891#pullrequestreview-563926845", "createdAt": "2021-01-08T00:40:11Z", "commit": {"oid": "d62af37e484322f7e839a3d4dd4870041809987c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wOFQwMDo0MDoxMVrOIQBk6A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wOFQwMDo0MDoxMVrOIQBk6A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzY3Mzk2MA==", "bodyText": "Isn't the table required if you're using Dynamo? I would not say it is optional, although it is optional if you're not using Dynamo.", "url": "https://github.com/apache/iceberg/pull/1891#discussion_r553673960", "createdAt": "2021-01-08T00:40:11Z", "author": {"login": "rdblue"}, "path": "site/docs/configuration.md", "diffHunk": "@@ -35,6 +35,20 @@ The properties can be manually constructed or passed in from a compute engine li\n Spark uses its session properties as catalog properties, see more details in the [Spark configuration](#spark-configuration) section.\n Flink passes in catalog properties through `CREATE CATALOG` statement, see more details in the [Flink](../flink/#creating-catalogs-and-using-catalogs) section.\n \n+### Lock catalog properties\n+\n+Here are the catalog properties related to locking. They are used by some catalog implementations to control the locking behavior during commits.\n+\n+| Property                          | Default            | Description                                            |\n+| --------------------------------- | ------------------ | ------------------------------------------------------ |\n+| lock.impl                         | null               | a custom implementation of the lock manager, the actual interface depends on the catalog used  |\n+| lock.table                        | null               | an optional auxiliary table for locking                |", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d62af37e484322f7e839a3d4dd4870041809987c"}, "originalPosition": 11}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTYzOTI3NjEy", "url": "https://github.com/apache/iceberg/pull/1891#pullrequestreview-563927612", "createdAt": "2021-01-08T00:42:49Z", "commit": {"oid": "d62af37e484322f7e839a3d4dd4870041809987c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wOFQwMDo0Mjo0OVrOIQBnbg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wOFQwMDo0Mjo0OVrOIQBnbg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzY3NDYwNg==", "bodyText": "The Spark page is getting long enough that I need to break it into separate pages. That's why I reorganized. I like having an Integrations tab, though.\nI wonder if we can get rid of forward/back instead. And maybe move \"About\" into the \"Project\" list.", "url": "https://github.com/apache/iceberg/pull/1891#discussion_r553674606", "createdAt": "2021-01-08T00:42:49Z", "author": {"login": "rdblue"}, "path": "site/mkdocs.yml", "diffHunk": "@@ -54,14 +54,16 @@ nav:\n     - Maintenance: maintenance.md\n     - Performance: performance.md\n     - Reliability: reliability.md\n-  - Spark:\n-    - Getting Started: getting-started.md\n+\n+  - Engines:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d62af37e484322f7e839a3d4dd4870041809987c"}, "originalPosition": 7}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d2f8ef670448ca14108417de22ac584fbd4bdac5", "author": {"user": {"login": "jackye1995", "name": "Jack Ye"}}, "url": "https://github.com/apache/iceberg/commit/d2f8ef670448ca14108417de22ac584fbd4bdac5", "committedDate": "2021-01-09T00:01:30Z", "message": "AWS: documentation page for AWS module"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f08ebfcbb54ef9f67821c2bc45ea29a19d925f9f", "author": {"user": {"login": "jackye1995", "name": "Jack Ye"}}, "url": "https://github.com/apache/iceberg/commit/f08ebfcbb54ef9f67821c2bc45ea29a19d925f9f", "committedDate": "2021-01-08T22:01:21Z", "message": "update based on comments"}, "afterCommit": {"oid": "d2f8ef670448ca14108417de22ac584fbd4bdac5", "author": {"user": {"login": "jackye1995", "name": "Jack Ye"}}, "url": "https://github.com/apache/iceberg/commit/d2f8ef670448ca14108417de22ac584fbd4bdac5", "committedDate": "2021-01-09T00:01:30Z", "message": "AWS: documentation page for AWS module"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "530157ffc0890cc54a90d3ba4d65d81bde1eceb7", "author": {"user": {"login": "jackye1995", "name": "Jack Ye"}}, "url": "https://github.com/apache/iceberg/commit/530157ffc0890cc54a90d3ba4d65d81bde1eceb7", "committedDate": "2021-01-09T00:03:39Z", "message": "add deleted lines back"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTY0NjU2MjM4", "url": "https://github.com/apache/iceberg/pull/1891#pullrequestreview-564656238", "createdAt": "2021-01-09T00:07:30Z", "commit": {"oid": "530157ffc0890cc54a90d3ba4d65d81bde1eceb7"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wOVQwMDowNzozMFrOIQlETg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wOVQwMDowNzozMFrOIQlETg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDI1NTQzOA==", "bodyText": "How about using a description here rather than a class name, like \"Object store file layout\" or something?", "url": "https://github.com/apache/iceberg/pull/1891#discussion_r554255438", "createdAt": "2021-01-09T00:07:30Z", "author": {"login": "rdblue"}, "path": "site/docs/aws.md", "diffHunk": "@@ -0,0 +1,244 @@\n+<!--\n+ - Licensed to the Apache Software Foundation (ASF) under one or more\n+ - contributor license agreements.  See the NOTICE file distributed with\n+ - this work for additional information regarding copyright ownership.\n+ - The ASF licenses this file to You under the Apache License, Version 2.0\n+ - (the \"License\"); you may not use this file except in compliance with\n+ - the License.  You may obtain a copy of the License at\n+ -\n+ -   http://www.apache.org/licenses/LICENSE-2.0\n+ -\n+ - Unless required by applicable law or agreed to in writing, software\n+ - distributed under the License is distributed on an \"AS IS\" BASIS,\n+ - WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ - See the License for the specific language governing permissions and\n+ - limitations under the License.\n+ -->\n+ \n+# Iceberg AWS Integrations\n+\n+Iceberg provides integration with different AWS services through the `iceberg-aws` module. \n+This section describes how to use Iceberg with AWS.\n+\n+## Enabling AWS Integration\n+\n+The `iceberg-aws` module is bundled with Spark and Flink engine runtimes.\n+However, the AWS clients are not bundled so that you can use the same client version as your application.\n+You will need to provide the AWS v2 SDK because that is what Iceberg depends on.\n+You can choose to use the [AWS SDK bundle](https://mvnrepository.com/artifact/software.amazon.awssdk/bundle), \n+or individual AWS client packages (Glue, S3, DynamoDB, KMS, STS) if you would like to have a minimal dependency footprint.\n+\n+For example, to use AWS features with Spark 3 and AWS clients version 2.15.40, you can start the Spark SQL shell with:\n+\n+```sh\n+spark-sql --packages org.apache.iceberg:iceberg-spark3-runtime:0.11.0,software.amazon.awssdk:bundle:2.15.40 \\\n+    --conf spark.sql.catalog.my_catalog=org.apache.iceberg.spark.SparkCatalog \\\n+    --conf spark.sql.catalog.my_catalog.warehouse=s3://my-bucket/my/key/prefix \\    \n+    --conf spark.sql.catalog.my_catalog.catalog-impl=org.apache.iceberg.aws.glue.GlueCatalog \\\n+    --conf spark.sql.catalog.my_catalog.lock-impl=org.apache.iceberg.aws.glue.DynamoLockManager \\\n+    --conf spark.sql.catalog.my_catalog.lock.table=myGlueLockTable\n+```\n+\n+As you can see, In the shell command, we use `--packages` to specify the additional AWS bundle dependency with its version as `2.15.40`.\n+\n+## Glue Catalog\n+\n+Iceberg enables the use of [AWS Glue](https://aws.amazon.com/glue) as the `Catalog` implementation.\n+When used, an Iceberg namespace is stored as a [Glue Database](https://docs.aws.amazon.com/glue/latest/dg/aws-glue-api-catalog-databases.html), \n+an Iceberg table is stored as a [Glue Table](https://docs.aws.amazon.com/glue/latest/dg/aws-glue-api-catalog-tables.html),\n+and every Iceberg table version is stored as a [Glue TableVersion](https://docs.aws.amazon.com/glue/latest/dg/aws-glue-api-catalog-tables.html#aws-glue-api-catalog-tables-TableVersion). \n+You can start using Glue catalog by specifying the `catalog-impl` as `org.apache.iceberg.aws.glue.GlueCatalog`,\n+just like what is shown in the [enabling AWS integration](#enabling-aws-integration) section above. \n+More details about loading the catalog can be found in individual engine pages, such as [Spark](../spark/#loading-a-custom-catalog) and [Flink](../flink/#creating-catalogs-and-using-catalogs).\n+\n+### Glue Catalog ID\n+There is a unique Glue metastore in each AWS account and each AWS region.\n+By default, `GlueCatalog` chooses the Glue metastore to use based on the user's default AWS client credential and region setup.\n+You can specify the Glue catalog ID through `glue.id` catalog property to point to a Glue catalog in a different AWS account.\n+The Glue catalog ID is your numeric AWS account ID.\n+If the Glue catalog is in a different region, you should configure you AWS client to point to the correct region, \n+see more details in [AWS client customization](#aws-client-customization).\n+\n+### Skip Archive\n+\n+By default, Glue stores all the table versions created and user can rollback a table to any historical version if needed.\n+However, if you are streaming data to Iceberg, this will easily create a lot of Glue table versions.\n+Therefore, it is recommended to turn off the archive feature in Glue by setting `glue.skip-archive` to `true`.\n+For more details, please read [Glue Quotas](https://docs.aws.amazon.com/general/latest/gr/glue.html) and the [UpdateTable API](https://docs.aws.amazon.com/glue/latest/webapi/API_UpdateTable.html).\n+\n+### DynamoDB for commit locking\n+\n+Glue does not have a strong guarantee over concurrent updates to a table. \n+Although it throws `ConcurrentModificationException` when detecting two processes updating a table at the same time,\n+there is no guarantee that one update would not clobber the other update.\n+Therefore, [DynamoDB](https://aws.amazon.com/dynamodb) can be used for Glue, so that for every commit, \n+`GlueCatalog` first obtains a lock using a helper DynamoDB table and then try to safely modify the Glue table.\n+\n+This feature requires the following lock related catalog properties:\n+\n+1. Set `lock-impl` as `org.apache.iceberg.aws.glue.DynamoLockManager`.\n+2. Set `lock.table` as the DynamoDB table name you would like to use. If the lock table with the given name does not exist in DynamoDB, a new table is created with billing mode set as [pay-per-request](https://aws.amazon.com/blogs/aws/amazon-dynamodb-on-demand-no-capacity-planning-and-pay-per-request-pricing).\n+\n+Other lock related catalog properties can also be used to adjust locking behaviors such as heartbeat interval.\n+For more details, please refer to [Lock catalog properties](../configuration/#lock-catalog-properties). \n+\n+### Warehouse Location\n+\n+Similar to all other catalog implementations, `warehouse` is a required catalog property to determine the root path of the data warehouse in storage.\n+By default, Glue only allows a warehouse location in S3 because of the use of `S3FileIO`.\n+To store data in a different local or cloud store, Glue catalog can switch to use `HadoopFileIO` or any custom FileIO by setting the `io-impl` catalog property.\n+Details about this feature can be found in the [custom FileIO](../custom-catalog/#custom-file-io-implementation) section.\n+\n+### Table Location\n+\n+By default, the root location for a table `my_table` of namespace `my_ns` is at `my-warehouse-location/my-ns.db/my-table`.\n+This default root location can be changed at both namespace and table level.\n+\n+To use a different path prefix for all tables under a namespace, use AWS console or any AWS Glue client SDK you like to update the `locationUri` attribute of the corresponding Glue database.\n+For example, you can update the `locationUri` of `my_ns` to `s3://my-ns-bucket`, \n+then any newly created table will have a default root location under the new prefix.\n+For instance, a new table `my_table_2` will have its root location at `s3://my-ns-bucket/my_table_2`.\n+\n+To use a completely different root path for a specific table, set the `location` table property to the desired root path value you want.\n+For example, in Spark SQL you can do:\n+\n+```sql\n+CREATE TABLE my_catalog.my_ns.my_table (\n+    id bigint,\n+    data string,\n+    category string)\n+USING iceberg\n+OPTIONS ('location'='s3://my-special-table-bucket')\n+PARTITIONED BY (category);\n+```\n+\n+## S3 FileIO\n+\n+Iceberg allows users to write data to S3 through `S3FileIO`.\n+`GlueCatalog` by default uses this `FileIO`, and other catalogs can load this `FileIO` using the `io-impl` catalog property.\n+\n+### Progressive Multipart Upload\n+\n+`S3FileIO` implements a customized progressive multipart upload algorithm to upload data.\n+Data files are uploaded by parts in parallel as soon as each part is ready,\n+and each file part is deleted as soon as its upload process completes.\n+This provides maximized upload speed and minimized local disk usage during uploads.\n+Here are the configurations that users can tune related to this feature:\n+\n+| Property                          | Default                                            | Description                                            |\n+| --------------------------------- | -------------------------------------------------- | ------------------------------------------------------ |\n+| s3.multipart.num-threads          | the available number of processors in the system   | number of threads to use for uploading parts to S3 (shared across all output streams)  |\n+| s3.multipart.part-size-bytes      | 32MB                                               | the size of a single part for multipart upload requests  |\n+| s3.multipart.threshold            | 1.5                                                | the threshold expressed as a factor times the multipart size at which to switch from uploading using a single put object request to uploading using multipart upload  |\n+| s3.staging-dir                    | `java.io.tmpdir` property value                    | the directory to hold temporary files  |\n+\n+### S3 Server Side Encryption\n+\n+`S3FileIO` supports all 3 S3 server side encryption modes:\n+\n+* [SSE-S3](https://docs.aws.amazon.com/AmazonS3/latest/dev/UsingServerSideEncryption.html): When you use Server-Side Encryption with Amazon S3-Managed Keys (SSE-S3), each object is encrypted with a unique key. As an additional safeguard, it encrypts the key itself with a master key that it regularly rotates. Amazon S3 server-side encryption uses one of the strongest block ciphers available, 256-bit Advanced Encryption Standard (AES-256), to encrypt your data.\n+* [SSE-KMS](https://docs.aws.amazon.com/AmazonS3/latest/dev/UsingKMSEncryption.html): Server-Side Encryption with Customer Master Keys (CMKs) Stored in AWS Key Management Service (SSE-KMS) is similar to SSE-S3, but with some additional benefits and charges for using this service. There are separate permissions for the use of a CMK that provides added protection against unauthorized access of your objects in Amazon S3. SSE-KMS also provides you with an audit trail that shows when your CMK was used and by whom. Additionally, you can create and manage customer managed CMKs or use AWS managed CMKs that are unique to you, your service, and your Region.\n+* [SSE-C](https://docs.aws.amazon.com/AmazonS3/latest/dev/ServerSideEncryptionCustomerKeys.html): With Server-Side Encryption with Customer-Provided Keys (SSE-C), you manage the encryption keys and Amazon S3 manages the encryption, as it writes to disks, and decryption, when you access your objects.\n+\n+To enable server side encryption, use the following configuration properties:\n+\n+| Property                          | Default                                  | Description                                            |\n+| --------------------------------- | ---------------------------------------- | ------------------------------------------------------ |\n+| s3.sse.type                       | `none`                                   | `none`, `s3`, `kms` or `custom`                        |\n+| s3.sse.key                        | `aws/s3` for `kms` type, null otherwise  | A KMS Key ID or ARN for `kms` type, or a custom base-64 AES256 symmetric key for `custom` type.  |\n+| s3.sse.md5                        | null                                     | If SSE type is `custom`, this value must be set as the base-64 MD5 digest of the symmetric key to ensure integrity. |\n+\n+### S3 Access Control List\n+\n+`S3FileIO` supports S3 access control list (ACL) for detailed access control. \n+User can choose the ACL level by setting the `s3.acl` property.\n+For more details, please read [S3 ACL Documentation](https://docs.aws.amazon.com/AmazonS3/latest/dev/acl-overview.html).\n+\n+### ObjectStoreLocationProvider", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "530157ffc0890cc54a90d3ba4d65d81bde1eceb7"}, "originalPosition": 157}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTY0NjU2NjMz", "url": "https://github.com/apache/iceberg/pull/1891#pullrequestreview-564656633", "createdAt": "2021-01-09T00:09:06Z", "commit": {"oid": "530157ffc0890cc54a90d3ba4d65d81bde1eceb7"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wOVQwMDowOTowN1rOIQlFxw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wOVQwMDowOTowN1rOIQlFxw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDI1NTgxNQ==", "bodyText": "You can also use the LOCATION DDL clause", "url": "https://github.com/apache/iceberg/pull/1891#discussion_r554255815", "createdAt": "2021-01-09T00:09:07Z", "author": {"login": "rdblue"}, "path": "site/docs/aws.md", "diffHunk": "@@ -0,0 +1,244 @@\n+<!--\n+ - Licensed to the Apache Software Foundation (ASF) under one or more\n+ - contributor license agreements.  See the NOTICE file distributed with\n+ - this work for additional information regarding copyright ownership.\n+ - The ASF licenses this file to You under the Apache License, Version 2.0\n+ - (the \"License\"); you may not use this file except in compliance with\n+ - the License.  You may obtain a copy of the License at\n+ -\n+ -   http://www.apache.org/licenses/LICENSE-2.0\n+ -\n+ - Unless required by applicable law or agreed to in writing, software\n+ - distributed under the License is distributed on an \"AS IS\" BASIS,\n+ - WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ - See the License for the specific language governing permissions and\n+ - limitations under the License.\n+ -->\n+ \n+# Iceberg AWS Integrations\n+\n+Iceberg provides integration with different AWS services through the `iceberg-aws` module. \n+This section describes how to use Iceberg with AWS.\n+\n+## Enabling AWS Integration\n+\n+The `iceberg-aws` module is bundled with Spark and Flink engine runtimes.\n+However, the AWS clients are not bundled so that you can use the same client version as your application.\n+You will need to provide the AWS v2 SDK because that is what Iceberg depends on.\n+You can choose to use the [AWS SDK bundle](https://mvnrepository.com/artifact/software.amazon.awssdk/bundle), \n+or individual AWS client packages (Glue, S3, DynamoDB, KMS, STS) if you would like to have a minimal dependency footprint.\n+\n+For example, to use AWS features with Spark 3 and AWS clients version 2.15.40, you can start the Spark SQL shell with:\n+\n+```sh\n+spark-sql --packages org.apache.iceberg:iceberg-spark3-runtime:0.11.0,software.amazon.awssdk:bundle:2.15.40 \\\n+    --conf spark.sql.catalog.my_catalog=org.apache.iceberg.spark.SparkCatalog \\\n+    --conf spark.sql.catalog.my_catalog.warehouse=s3://my-bucket/my/key/prefix \\    \n+    --conf spark.sql.catalog.my_catalog.catalog-impl=org.apache.iceberg.aws.glue.GlueCatalog \\\n+    --conf spark.sql.catalog.my_catalog.lock-impl=org.apache.iceberg.aws.glue.DynamoLockManager \\\n+    --conf spark.sql.catalog.my_catalog.lock.table=myGlueLockTable\n+```\n+\n+As you can see, In the shell command, we use `--packages` to specify the additional AWS bundle dependency with its version as `2.15.40`.\n+\n+## Glue Catalog\n+\n+Iceberg enables the use of [AWS Glue](https://aws.amazon.com/glue) as the `Catalog` implementation.\n+When used, an Iceberg namespace is stored as a [Glue Database](https://docs.aws.amazon.com/glue/latest/dg/aws-glue-api-catalog-databases.html), \n+an Iceberg table is stored as a [Glue Table](https://docs.aws.amazon.com/glue/latest/dg/aws-glue-api-catalog-tables.html),\n+and every Iceberg table version is stored as a [Glue TableVersion](https://docs.aws.amazon.com/glue/latest/dg/aws-glue-api-catalog-tables.html#aws-glue-api-catalog-tables-TableVersion). \n+You can start using Glue catalog by specifying the `catalog-impl` as `org.apache.iceberg.aws.glue.GlueCatalog`,\n+just like what is shown in the [enabling AWS integration](#enabling-aws-integration) section above. \n+More details about loading the catalog can be found in individual engine pages, such as [Spark](../spark/#loading-a-custom-catalog) and [Flink](../flink/#creating-catalogs-and-using-catalogs).\n+\n+### Glue Catalog ID\n+There is a unique Glue metastore in each AWS account and each AWS region.\n+By default, `GlueCatalog` chooses the Glue metastore to use based on the user's default AWS client credential and region setup.\n+You can specify the Glue catalog ID through `glue.id` catalog property to point to a Glue catalog in a different AWS account.\n+The Glue catalog ID is your numeric AWS account ID.\n+If the Glue catalog is in a different region, you should configure you AWS client to point to the correct region, \n+see more details in [AWS client customization](#aws-client-customization).\n+\n+### Skip Archive\n+\n+By default, Glue stores all the table versions created and user can rollback a table to any historical version if needed.\n+However, if you are streaming data to Iceberg, this will easily create a lot of Glue table versions.\n+Therefore, it is recommended to turn off the archive feature in Glue by setting `glue.skip-archive` to `true`.\n+For more details, please read [Glue Quotas](https://docs.aws.amazon.com/general/latest/gr/glue.html) and the [UpdateTable API](https://docs.aws.amazon.com/glue/latest/webapi/API_UpdateTable.html).\n+\n+### DynamoDB for commit locking\n+\n+Glue does not have a strong guarantee over concurrent updates to a table. \n+Although it throws `ConcurrentModificationException` when detecting two processes updating a table at the same time,\n+there is no guarantee that one update would not clobber the other update.\n+Therefore, [DynamoDB](https://aws.amazon.com/dynamodb) can be used for Glue, so that for every commit, \n+`GlueCatalog` first obtains a lock using a helper DynamoDB table and then try to safely modify the Glue table.\n+\n+This feature requires the following lock related catalog properties:\n+\n+1. Set `lock-impl` as `org.apache.iceberg.aws.glue.DynamoLockManager`.\n+2. Set `lock.table` as the DynamoDB table name you would like to use. If the lock table with the given name does not exist in DynamoDB, a new table is created with billing mode set as [pay-per-request](https://aws.amazon.com/blogs/aws/amazon-dynamodb-on-demand-no-capacity-planning-and-pay-per-request-pricing).\n+\n+Other lock related catalog properties can also be used to adjust locking behaviors such as heartbeat interval.\n+For more details, please refer to [Lock catalog properties](../configuration/#lock-catalog-properties). \n+\n+### Warehouse Location\n+\n+Similar to all other catalog implementations, `warehouse` is a required catalog property to determine the root path of the data warehouse in storage.\n+By default, Glue only allows a warehouse location in S3 because of the use of `S3FileIO`.\n+To store data in a different local or cloud store, Glue catalog can switch to use `HadoopFileIO` or any custom FileIO by setting the `io-impl` catalog property.\n+Details about this feature can be found in the [custom FileIO](../custom-catalog/#custom-file-io-implementation) section.\n+\n+### Table Location\n+\n+By default, the root location for a table `my_table` of namespace `my_ns` is at `my-warehouse-location/my-ns.db/my-table`.\n+This default root location can be changed at both namespace and table level.\n+\n+To use a different path prefix for all tables under a namespace, use AWS console or any AWS Glue client SDK you like to update the `locationUri` attribute of the corresponding Glue database.\n+For example, you can update the `locationUri` of `my_ns` to `s3://my-ns-bucket`, \n+then any newly created table will have a default root location under the new prefix.\n+For instance, a new table `my_table_2` will have its root location at `s3://my-ns-bucket/my_table_2`.\n+\n+To use a completely different root path for a specific table, set the `location` table property to the desired root path value you want.\n+For example, in Spark SQL you can do:\n+\n+```sql\n+CREATE TABLE my_catalog.my_ns.my_table (\n+    id bigint,\n+    data string,\n+    category string)\n+USING iceberg\n+OPTIONS ('location'='s3://my-special-table-bucket')", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "530157ffc0890cc54a90d3ba4d65d81bde1eceb7"}, "originalPosition": 111}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTY0NjU3NDI1", "url": "https://github.com/apache/iceberg/pull/1891#pullrequestreview-564657425", "createdAt": "2021-01-09T00:12:43Z", "commit": {"oid": "530157ffc0890cc54a90d3ba4d65d81bde1eceb7"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wOVQwMDoxMjo0M1rOIQlIlw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wOVQwMDoxMjo0M1rOIQlIlw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDI1NjUzNQ==", "bodyText": "Is there a better heading for this as well?", "url": "https://github.com/apache/iceberg/pull/1891#discussion_r554256535", "createdAt": "2021-01-09T00:12:43Z", "author": {"login": "rdblue"}, "path": "site/docs/aws.md", "diffHunk": "@@ -0,0 +1,244 @@\n+<!--\n+ - Licensed to the Apache Software Foundation (ASF) under one or more\n+ - contributor license agreements.  See the NOTICE file distributed with\n+ - this work for additional information regarding copyright ownership.\n+ - The ASF licenses this file to You under the Apache License, Version 2.0\n+ - (the \"License\"); you may not use this file except in compliance with\n+ - the License.  You may obtain a copy of the License at\n+ -\n+ -   http://www.apache.org/licenses/LICENSE-2.0\n+ -\n+ - Unless required by applicable law or agreed to in writing, software\n+ - distributed under the License is distributed on an \"AS IS\" BASIS,\n+ - WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ - See the License for the specific language governing permissions and\n+ - limitations under the License.\n+ -->\n+ \n+# Iceberg AWS Integrations\n+\n+Iceberg provides integration with different AWS services through the `iceberg-aws` module. \n+This section describes how to use Iceberg with AWS.\n+\n+## Enabling AWS Integration\n+\n+The `iceberg-aws` module is bundled with Spark and Flink engine runtimes.\n+However, the AWS clients are not bundled so that you can use the same client version as your application.\n+You will need to provide the AWS v2 SDK because that is what Iceberg depends on.\n+You can choose to use the [AWS SDK bundle](https://mvnrepository.com/artifact/software.amazon.awssdk/bundle), \n+or individual AWS client packages (Glue, S3, DynamoDB, KMS, STS) if you would like to have a minimal dependency footprint.\n+\n+For example, to use AWS features with Spark 3 and AWS clients version 2.15.40, you can start the Spark SQL shell with:\n+\n+```sh\n+spark-sql --packages org.apache.iceberg:iceberg-spark3-runtime:0.11.0,software.amazon.awssdk:bundle:2.15.40 \\\n+    --conf spark.sql.catalog.my_catalog=org.apache.iceberg.spark.SparkCatalog \\\n+    --conf spark.sql.catalog.my_catalog.warehouse=s3://my-bucket/my/key/prefix \\    \n+    --conf spark.sql.catalog.my_catalog.catalog-impl=org.apache.iceberg.aws.glue.GlueCatalog \\\n+    --conf spark.sql.catalog.my_catalog.lock-impl=org.apache.iceberg.aws.glue.DynamoLockManager \\\n+    --conf spark.sql.catalog.my_catalog.lock.table=myGlueLockTable\n+```\n+\n+As you can see, In the shell command, we use `--packages` to specify the additional AWS bundle dependency with its version as `2.15.40`.\n+\n+## Glue Catalog\n+\n+Iceberg enables the use of [AWS Glue](https://aws.amazon.com/glue) as the `Catalog` implementation.\n+When used, an Iceberg namespace is stored as a [Glue Database](https://docs.aws.amazon.com/glue/latest/dg/aws-glue-api-catalog-databases.html), \n+an Iceberg table is stored as a [Glue Table](https://docs.aws.amazon.com/glue/latest/dg/aws-glue-api-catalog-tables.html),\n+and every Iceberg table version is stored as a [Glue TableVersion](https://docs.aws.amazon.com/glue/latest/dg/aws-glue-api-catalog-tables.html#aws-glue-api-catalog-tables-TableVersion). \n+You can start using Glue catalog by specifying the `catalog-impl` as `org.apache.iceberg.aws.glue.GlueCatalog`,\n+just like what is shown in the [enabling AWS integration](#enabling-aws-integration) section above. \n+More details about loading the catalog can be found in individual engine pages, such as [Spark](../spark/#loading-a-custom-catalog) and [Flink](../flink/#creating-catalogs-and-using-catalogs).\n+\n+### Glue Catalog ID\n+There is a unique Glue metastore in each AWS account and each AWS region.\n+By default, `GlueCatalog` chooses the Glue metastore to use based on the user's default AWS client credential and region setup.\n+You can specify the Glue catalog ID through `glue.id` catalog property to point to a Glue catalog in a different AWS account.\n+The Glue catalog ID is your numeric AWS account ID.\n+If the Glue catalog is in a different region, you should configure you AWS client to point to the correct region, \n+see more details in [AWS client customization](#aws-client-customization).\n+\n+### Skip Archive\n+\n+By default, Glue stores all the table versions created and user can rollback a table to any historical version if needed.\n+However, if you are streaming data to Iceberg, this will easily create a lot of Glue table versions.\n+Therefore, it is recommended to turn off the archive feature in Glue by setting `glue.skip-archive` to `true`.\n+For more details, please read [Glue Quotas](https://docs.aws.amazon.com/general/latest/gr/glue.html) and the [UpdateTable API](https://docs.aws.amazon.com/glue/latest/webapi/API_UpdateTable.html).\n+\n+### DynamoDB for commit locking\n+\n+Glue does not have a strong guarantee over concurrent updates to a table. \n+Although it throws `ConcurrentModificationException` when detecting two processes updating a table at the same time,\n+there is no guarantee that one update would not clobber the other update.\n+Therefore, [DynamoDB](https://aws.amazon.com/dynamodb) can be used for Glue, so that for every commit, \n+`GlueCatalog` first obtains a lock using a helper DynamoDB table and then try to safely modify the Glue table.\n+\n+This feature requires the following lock related catalog properties:\n+\n+1. Set `lock-impl` as `org.apache.iceberg.aws.glue.DynamoLockManager`.\n+2. Set `lock.table` as the DynamoDB table name you would like to use. If the lock table with the given name does not exist in DynamoDB, a new table is created with billing mode set as [pay-per-request](https://aws.amazon.com/blogs/aws/amazon-dynamodb-on-demand-no-capacity-planning-and-pay-per-request-pricing).\n+\n+Other lock related catalog properties can also be used to adjust locking behaviors such as heartbeat interval.\n+For more details, please refer to [Lock catalog properties](../configuration/#lock-catalog-properties). \n+\n+### Warehouse Location\n+\n+Similar to all other catalog implementations, `warehouse` is a required catalog property to determine the root path of the data warehouse in storage.\n+By default, Glue only allows a warehouse location in S3 because of the use of `S3FileIO`.\n+To store data in a different local or cloud store, Glue catalog can switch to use `HadoopFileIO` or any custom FileIO by setting the `io-impl` catalog property.\n+Details about this feature can be found in the [custom FileIO](../custom-catalog/#custom-file-io-implementation) section.\n+\n+### Table Location\n+\n+By default, the root location for a table `my_table` of namespace `my_ns` is at `my-warehouse-location/my-ns.db/my-table`.\n+This default root location can be changed at both namespace and table level.\n+\n+To use a different path prefix for all tables under a namespace, use AWS console or any AWS Glue client SDK you like to update the `locationUri` attribute of the corresponding Glue database.\n+For example, you can update the `locationUri` of `my_ns` to `s3://my-ns-bucket`, \n+then any newly created table will have a default root location under the new prefix.\n+For instance, a new table `my_table_2` will have its root location at `s3://my-ns-bucket/my_table_2`.\n+\n+To use a completely different root path for a specific table, set the `location` table property to the desired root path value you want.\n+For example, in Spark SQL you can do:\n+\n+```sql\n+CREATE TABLE my_catalog.my_ns.my_table (\n+    id bigint,\n+    data string,\n+    category string)\n+USING iceberg\n+OPTIONS ('location'='s3://my-special-table-bucket')\n+PARTITIONED BY (category);\n+```\n+\n+## S3 FileIO\n+\n+Iceberg allows users to write data to S3 through `S3FileIO`.\n+`GlueCatalog` by default uses this `FileIO`, and other catalogs can load this `FileIO` using the `io-impl` catalog property.\n+\n+### Progressive Multipart Upload\n+\n+`S3FileIO` implements a customized progressive multipart upload algorithm to upload data.\n+Data files are uploaded by parts in parallel as soon as each part is ready,\n+and each file part is deleted as soon as its upload process completes.\n+This provides maximized upload speed and minimized local disk usage during uploads.\n+Here are the configurations that users can tune related to this feature:\n+\n+| Property                          | Default                                            | Description                                            |\n+| --------------------------------- | -------------------------------------------------- | ------------------------------------------------------ |\n+| s3.multipart.num-threads          | the available number of processors in the system   | number of threads to use for uploading parts to S3 (shared across all output streams)  |\n+| s3.multipart.part-size-bytes      | 32MB                                               | the size of a single part for multipart upload requests  |\n+| s3.multipart.threshold            | 1.5                                                | the threshold expressed as a factor times the multipart size at which to switch from uploading using a single put object request to uploading using multipart upload  |\n+| s3.staging-dir                    | `java.io.tmpdir` property value                    | the directory to hold temporary files  |\n+\n+### S3 Server Side Encryption\n+\n+`S3FileIO` supports all 3 S3 server side encryption modes:\n+\n+* [SSE-S3](https://docs.aws.amazon.com/AmazonS3/latest/dev/UsingServerSideEncryption.html): When you use Server-Side Encryption with Amazon S3-Managed Keys (SSE-S3), each object is encrypted with a unique key. As an additional safeguard, it encrypts the key itself with a master key that it regularly rotates. Amazon S3 server-side encryption uses one of the strongest block ciphers available, 256-bit Advanced Encryption Standard (AES-256), to encrypt your data.\n+* [SSE-KMS](https://docs.aws.amazon.com/AmazonS3/latest/dev/UsingKMSEncryption.html): Server-Side Encryption with Customer Master Keys (CMKs) Stored in AWS Key Management Service (SSE-KMS) is similar to SSE-S3, but with some additional benefits and charges for using this service. There are separate permissions for the use of a CMK that provides added protection against unauthorized access of your objects in Amazon S3. SSE-KMS also provides you with an audit trail that shows when your CMK was used and by whom. Additionally, you can create and manage customer managed CMKs or use AWS managed CMKs that are unique to you, your service, and your Region.\n+* [SSE-C](https://docs.aws.amazon.com/AmazonS3/latest/dev/ServerSideEncryptionCustomerKeys.html): With Server-Side Encryption with Customer-Provided Keys (SSE-C), you manage the encryption keys and Amazon S3 manages the encryption, as it writes to disks, and decryption, when you access your objects.\n+\n+To enable server side encryption, use the following configuration properties:\n+\n+| Property                          | Default                                  | Description                                            |\n+| --------------------------------- | ---------------------------------------- | ------------------------------------------------------ |\n+| s3.sse.type                       | `none`                                   | `none`, `s3`, `kms` or `custom`                        |\n+| s3.sse.key                        | `aws/s3` for `kms` type, null otherwise  | A KMS Key ID or ARN for `kms` type, or a custom base-64 AES256 symmetric key for `custom` type.  |\n+| s3.sse.md5                        | null                                     | If SSE type is `custom`, this value must be set as the base-64 MD5 digest of the symmetric key to ensure integrity. |\n+\n+### S3 Access Control List\n+\n+`S3FileIO` supports S3 access control list (ACL) for detailed access control. \n+User can choose the ACL level by setting the `s3.acl` property.\n+For more details, please read [S3 ACL Documentation](https://docs.aws.amazon.com/AmazonS3/latest/dev/acl-overview.html).\n+\n+### ObjectStoreLocationProvider\n+\n+S3 and many other cloud storage services [throttle requests based on object prefix](https://aws.amazon.com/premiumsupport/knowledge-center/s3-request-limit-avoid-throttling/). \n+This means data stored in a traditional Hive storage layout has bad read and write throughput since data files of the same partition are placed under the same prefix.\n+Iceberg by default uses the Hive storage layout, but can be switched to use a different `ObjectStoreLocationProvider`.\n+In this mode, a hash string is added to the beginning of each file path, so that files are equally distributed across all prefixes in an S3 bucket.\n+This results in minimized throttling and maximized throughput for S3-related IO operations.\n+Here is an example Spark SQL command to create a table with this feature enabled:\n+\n+```sql\n+CREATE TABLE my_catalog.my_ns.my_table (\n+    id bigint,\n+    data string,\n+    category string)\n+USING iceberg\n+OPTIONS (\n+    'write.object-storage.enabled'=true, \n+    'write.object-storage.path'='s3://my-table-data-bucket')\n+PARTITIONED BY (category);\n+```\n+\n+For more details, please refer to the [LocationProvider Configuration](../custom-catalog/#custom-location-provider-implementation) section.  \n+\n+### S3 Strong Consistency\n+\n+In November 2020, S3 announced [strong consistency](https://aws.amazon.com/s3/consistency/) for all read operations, and Iceberg is updated to fully leverage this feature.\n+There is no redundant consistency wait and check which might negatively impact performance during IO operations.\n+\n+### Hadoop S3A FileSystem\n+\n+Before `S3FileIO` was introduced, many Iceberg users choose to use `HadoopFileIO` to write data to S3 through the [S3A FileSystem](https://github.com/apache/hadoop/blob/trunk/hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/S3AFileSystem.java).\n+As introduced in the previous sections, `S3FileIO` adopts latest AWS clients and S3 features for optimized security and performance,\n+ and is thus recommend for S3 use cases rather than the S3A FileSystem.\n+\n+`S3FileIO` writes data with `s3://` URI scheme, but it is also compatible with schemes written by the S3A FileSystem.\n+This means for any table manifests containing `s3a://` or `s3n://` file paths, `S3FileIO` is still able to read them.\n+This feature allows people to easily switch from S3A to `S3FileIO`.\n+\n+If for any reason you have to use S3A, here are the instructions:\n+\n+1. To store data using S3A, specify the `warehouse` catalog property to be an S3A path, e.g. `s3a://my-bucket/my-warehouse` \n+2. For `HiveCatalog`, to also store metadata using S3A, specify the Hadoop config property `hive.metastore.warehouse.dir` to be an S3A path.\n+3. Add [hadoop-aws](https://mvnrepository.com/artifact/org.apache.hadoop/hadoop-aws) as a runtime dependency of your compute engine.\n+4. Configure AWS settings based on [hadoop-aws documentation](https://hadoop.apache.org/docs/current/hadoop-aws/tools/hadoop-aws/index.html) (make sure you check the version, S3A configuration varies a lot based on the version you use).   \n+\n+## AWS client customization\n+\n+Many organizations have customized their way of configuring AWS clients with their own credential provider, access proxy, retry strategy, etc.\n+Iceberg allows users to plug in their own implementation of `org.apache.iceberg.aws.AwsClientFactory` by setting the `client.factory` catalog property.\n+\n+### AssumeRoleAwsClientFactory", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "530157ffc0890cc54a90d3ba4d65d81bde1eceb7"}, "originalPosition": 207}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ae4654db987a2fa034dcbea33d8dd84147951aee", "author": {"user": {"login": "jackye1995", "name": "Jack Ye"}}, "url": "https://github.com/apache/iceberg/commit/ae4654db987a2fa034dcbea33d8dd84147951aee", "committedDate": "2021-01-09T00:19:31Z", "message": "add location sql, update title names"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTY0NjY0NzQw", "url": "https://github.com/apache/iceberg/pull/1891#pullrequestreview-564664740", "createdAt": "2021-01-09T00:49:37Z", "commit": {"oid": "ae4654db987a2fa034dcbea33d8dd84147951aee"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3552, "cost": 1, "resetAt": "2021-10-29T19:57:52Z"}}}