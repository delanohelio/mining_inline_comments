{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA5NDk3NzE2", "number": 974, "title": "Add unit tests for sequence number", "bodyText": "When running unit tests from the previous sequence number PR, the unit test testSequenceNumberForMergeAppend failed due to the manifest entry sequence number is not correct. That is because we rewrite the manifest with unassigned sequence number. To fix that, we could always assign sequence number to the adding manifest from add(ManifestFile) API.\nThis also includes some tests for sequence number from the previous PR.", "createdAt": "2020-04-27T13:22:19Z", "url": "https://github.com/apache/iceberg/pull/974", "merged": true, "mergeCommit": {"oid": "e1399fd4c78a4d06e7840afc9aa9a3d45ca548d5"}, "closed": true, "closedAt": "2020-06-02T22:39:25Z", "author": {"login": "chenjunjiedada"}, "timelineItems": {"totalCount": 37, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcbvPFTgBqjMyNzU3NTM1MzU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcm35NKABqjMzOTE0MTIyMjk=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e5cc6f08064aba2de61c15c131d86a1608fb9834", "author": {"user": {"login": "chenjunjiedada", "name": "Chen, Junjie"}}, "url": "https://github.com/apache/iceberg/commit/e5cc6f08064aba2de61c15c131d86a1608fb9834", "committedDate": "2020-04-27T12:51:52Z", "message": "Always assign sequence number for adding manifest"}, "afterCommit": {"oid": "3a49d627abc7608f46dba9d8df5363771dcc6173", "author": {"user": {"login": "chenjunjiedada", "name": "Chen, Junjie"}}, "url": "https://github.com/apache/iceberg/commit/3a49d627abc7608f46dba9d8df5363771dcc6173", "committedDate": "2020-04-27T13:23:37Z", "message": "Always assign sequence number for adding manifest"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "3a49d627abc7608f46dba9d8df5363771dcc6173", "author": {"user": {"login": "chenjunjiedada", "name": "Chen, Junjie"}}, "url": "https://github.com/apache/iceberg/commit/3a49d627abc7608f46dba9d8df5363771dcc6173", "committedDate": "2020-04-27T13:23:37Z", "message": "Always assign sequence number for adding manifest"}, "afterCommit": {"oid": "04622f30627c009ec1829eef47f7f8d4c936736d", "author": {"user": {"login": "chenjunjiedada", "name": "Chen, Junjie"}}, "url": "https://github.com/apache/iceberg/commit/04622f30627c009ec1829eef47f7f8d4c936736d", "committedDate": "2020-05-06T09:37:54Z", "message": "Use wrapper for adding entries from added manifests"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "04622f30627c009ec1829eef47f7f8d4c936736d", "author": {"user": {"login": "chenjunjiedada", "name": "Chen, Junjie"}}, "url": "https://github.com/apache/iceberg/commit/04622f30627c009ec1829eef47f7f8d4c936736d", "committedDate": "2020-05-06T09:37:54Z", "message": "Use wrapper for adding entries from added manifests"}, "afterCommit": {"oid": "95cd1f02828a0dd2a9b27b244aecd91ff37d4460", "author": {"user": {"login": "chenjunjiedada", "name": "Chen, Junjie"}}, "url": "https://github.com/apache/iceberg/commit/95cd1f02828a0dd2a9b27b244aecd91ff37d4460", "committedDate": "2020-05-06T09:43:39Z", "message": "Use wrapper for adding entries from added manifests"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEwNDkzNzY3", "url": "https://github.com/apache/iceberg/pull/974#pullrequestreview-410493767", "createdAt": "2020-05-12T23:34:30Z", "commit": {"oid": "95cd1f02828a0dd2a9b27b244aecd91ff37d4460"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQyMzozNDozMFrOGUcixQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQyMzozNDozMFrOGUcixQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDA5MjM1Nw==", "bodyText": "These assertions should be improved. Each assertion should have context, like \"Current sequence number should match\", and the length of all lists should be validated with an assertion to catch unexpected additions\nSince this pattern is repeated, I'd recommend a helper method like validateManfiest and validateManifestEntries for the manifest list. And the entries can be validated using a new variation of validateManifestEntries that includes sequence numbers.", "url": "https://github.com/apache/iceberg/pull/974#discussion_r424092357", "createdAt": "2020-05-12T23:34:30Z", "author": {"login": "rdblue"}, "path": "core/src/test/java/org/apache/iceberg/TestSequenceNumberForV2Table.java", "diffHunk": "@@ -0,0 +1,299 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.concurrent.Callable;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.stream.Collectors;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+public class TestSequenceNumberForV2Table extends TableTestBase {\n+\n+  public TestSequenceNumberForV2Table() {\n+    super(2);\n+  }\n+\n+  @Test\n+  public void testSequenceNumberForFastAppend() throws IOException {\n+    table.newFastAppend().appendFile(FILE_A).commit();\n+    Assert.assertEquals(1, table.currentSnapshot().sequenceNumber());\n+    ManifestFile manifestFile = table.currentSnapshot().manifests().get(0);\n+    Assert.assertEquals(1, manifestFile.sequenceNumber());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "95cd1f02828a0dd2a9b27b244aecd91ff37d4460"}, "originalPosition": 45}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEwNDk0MDk3", "url": "https://github.com/apache/iceberg/pull/974#pullrequestreview-410494097", "createdAt": "2020-05-12T23:35:29Z", "commit": {"oid": "95cd1f02828a0dd2a9b27b244aecd91ff37d4460"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQyMzozNToyOVrOGUckAA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQyMzozNToyOVrOGUckAA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDA5MjY3Mg==", "bodyText": "There should be two cases for this test. One with a default merge setting (no merging) and one with the min merge count changed.", "url": "https://github.com/apache/iceberg/pull/974#discussion_r424092672", "createdAt": "2020-05-12T23:35:29Z", "author": {"login": "rdblue"}, "path": "core/src/test/java/org/apache/iceberg/TestSequenceNumberForV2Table.java", "diffHunk": "@@ -0,0 +1,299 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.concurrent.Callable;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.stream.Collectors;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+public class TestSequenceNumberForV2Table extends TableTestBase {\n+\n+  public TestSequenceNumberForV2Table() {\n+    super(2);\n+  }\n+\n+  @Test\n+  public void testSequenceNumberForFastAppend() throws IOException {\n+    table.newFastAppend().appendFile(FILE_A).commit();\n+    Assert.assertEquals(1, table.currentSnapshot().sequenceNumber());\n+    ManifestFile manifestFile = table.currentSnapshot().manifests().get(0);\n+    Assert.assertEquals(1, manifestFile.sequenceNumber());\n+\n+    table.newFastAppend().appendFile(FILE_B).commit();\n+    Assert.assertEquals(2, table.currentSnapshot().sequenceNumber());\n+    manifestFile = table.currentSnapshot().manifests().stream()\n+        .filter(manifest -> manifest.snapshotId() == table.currentSnapshot().snapshotId())\n+        .collect(Collectors.toList()).get(0);\n+    Assert.assertEquals(2, manifestFile.sequenceNumber());\n+\n+    manifestFile = writeManifest(FILE_C, FILE_D);\n+    table.newFastAppend().appendManifest(manifestFile).commit();\n+    Assert.assertEquals(3, table.currentSnapshot().sequenceNumber());\n+\n+    manifestFile = table.currentSnapshot().manifests().stream()\n+        .filter(manifest -> manifest.snapshotId() == table.currentSnapshot().snapshotId())\n+        .collect(Collectors.toList()).get(0);\n+    Assert.assertEquals(3, manifestFile.sequenceNumber());\n+\n+    for (ManifestEntry entry : ManifestFiles.read(manifestFile,\n+        table.io(), table.ops().current().specsById()).entries()) {\n+      if (entry.file().path().equals(FILE_C.path()) || entry.file().path().equals(FILE_D.path())) {\n+        Assert.assertEquals(3, entry.sequenceNumber().longValue());\n+      }\n+    }\n+  }\n+\n+  @Test\n+  public void testSequenceNumberForMergeAppend() throws IOException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "95cd1f02828a0dd2a9b27b244aecd91ff37d4460"}, "originalPosition": 72}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEwNDk0Mjkx", "url": "https://github.com/apache/iceberg/pull/974#pullrequestreview-410494291", "createdAt": "2020-05-12T23:36:00Z", "commit": {"oid": "95cd1f02828a0dd2a9b27b244aecd91ff37d4460"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQyMzozNjowMFrOGUckqA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQyMzozNjowMFrOGUckqA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDA5Mjg0MA==", "bodyText": "As I noted above, I think it would be cleaner to add sequence number of a variant of validateManifestEntries.", "url": "https://github.com/apache/iceberg/pull/974#discussion_r424092840", "createdAt": "2020-05-12T23:36:00Z", "author": {"login": "rdblue"}, "path": "core/src/test/java/org/apache/iceberg/TestSequenceNumberForV2Table.java", "diffHunk": "@@ -0,0 +1,299 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.concurrent.Callable;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.stream.Collectors;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+public class TestSequenceNumberForV2Table extends TableTestBase {\n+\n+  public TestSequenceNumberForV2Table() {\n+    super(2);\n+  }\n+\n+  @Test\n+  public void testSequenceNumberForFastAppend() throws IOException {\n+    table.newFastAppend().appendFile(FILE_A).commit();\n+    Assert.assertEquals(1, table.currentSnapshot().sequenceNumber());\n+    ManifestFile manifestFile = table.currentSnapshot().manifests().get(0);\n+    Assert.assertEquals(1, manifestFile.sequenceNumber());\n+\n+    table.newFastAppend().appendFile(FILE_B).commit();\n+    Assert.assertEquals(2, table.currentSnapshot().sequenceNumber());\n+    manifestFile = table.currentSnapshot().manifests().stream()\n+        .filter(manifest -> manifest.snapshotId() == table.currentSnapshot().snapshotId())\n+        .collect(Collectors.toList()).get(0);\n+    Assert.assertEquals(2, manifestFile.sequenceNumber());\n+\n+    manifestFile = writeManifest(FILE_C, FILE_D);\n+    table.newFastAppend().appendManifest(manifestFile).commit();\n+    Assert.assertEquals(3, table.currentSnapshot().sequenceNumber());\n+\n+    manifestFile = table.currentSnapshot().manifests().stream()\n+        .filter(manifest -> manifest.snapshotId() == table.currentSnapshot().snapshotId())\n+        .collect(Collectors.toList()).get(0);\n+    Assert.assertEquals(3, manifestFile.sequenceNumber());\n+\n+    for (ManifestEntry entry : ManifestFiles.read(manifestFile,\n+        table.io(), table.ops().current().specsById()).entries()) {\n+      if (entry.file().path().equals(FILE_C.path()) || entry.file().path().equals(FILE_D.path())) {\n+        Assert.assertEquals(3, entry.sequenceNumber().longValue());\n+      }\n+    }\n+  }\n+\n+  @Test\n+  public void testSequenceNumberForMergeAppend() throws IOException {\n+    table.updateProperties()\n+        .set(TableProperties.MANIFEST_MIN_MERGE_COUNT, \"1\")\n+        .commit();\n+    table.newAppend().appendFile(FILE_A).commit();\n+    Assert.assertEquals(1, table.currentSnapshot().sequenceNumber());\n+\n+    table.newAppend().appendFile(FILE_B).commit();\n+    Assert.assertEquals(2, table.currentSnapshot().sequenceNumber());\n+\n+    ManifestFile manifestFile = writeManifest(FILE_C, FILE_D);\n+    table.newAppend().appendManifest(manifestFile).commit();\n+    Assert.assertEquals(3, table.currentSnapshot().sequenceNumber());\n+\n+    manifestFile = table.currentSnapshot().manifests().get(0);\n+\n+    Assert.assertEquals(\"the sequence number of manifest should be 3\", 3, manifestFile.sequenceNumber());\n+\n+    for (ManifestEntry entry : ManifestFiles.read(manifestFile,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "95cd1f02828a0dd2a9b27b244aecd91ff37d4460"}, "originalPosition": 90}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEwNDk0OTY3", "url": "https://github.com/apache/iceberg/pull/974#pullrequestreview-410494967", "createdAt": "2020-05-12T23:37:56Z", "commit": {"oid": "95cd1f02828a0dd2a9b27b244aecd91ff37d4460"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQyMzozNzo1NlrOGUcnLg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQyMzozNzo1NlrOGUcnLg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDA5MzQ4Ng==", "bodyText": "This relies on ordering in the manifest list. Can you avoid assumptions like this?", "url": "https://github.com/apache/iceberg/pull/974#discussion_r424093486", "createdAt": "2020-05-12T23:37:56Z", "author": {"login": "rdblue"}, "path": "core/src/test/java/org/apache/iceberg/TestSequenceNumberForV2Table.java", "diffHunk": "@@ -0,0 +1,299 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.concurrent.Callable;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.stream.Collectors;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+public class TestSequenceNumberForV2Table extends TableTestBase {\n+\n+  public TestSequenceNumberForV2Table() {\n+    super(2);\n+  }\n+\n+  @Test\n+  public void testSequenceNumberForFastAppend() throws IOException {\n+    table.newFastAppend().appendFile(FILE_A).commit();\n+    Assert.assertEquals(1, table.currentSnapshot().sequenceNumber());\n+    ManifestFile manifestFile = table.currentSnapshot().manifests().get(0);\n+    Assert.assertEquals(1, manifestFile.sequenceNumber());\n+\n+    table.newFastAppend().appendFile(FILE_B).commit();\n+    Assert.assertEquals(2, table.currentSnapshot().sequenceNumber());\n+    manifestFile = table.currentSnapshot().manifests().stream()\n+        .filter(manifest -> manifest.snapshotId() == table.currentSnapshot().snapshotId())\n+        .collect(Collectors.toList()).get(0);\n+    Assert.assertEquals(2, manifestFile.sequenceNumber());\n+\n+    manifestFile = writeManifest(FILE_C, FILE_D);\n+    table.newFastAppend().appendManifest(manifestFile).commit();\n+    Assert.assertEquals(3, table.currentSnapshot().sequenceNumber());\n+\n+    manifestFile = table.currentSnapshot().manifests().stream()\n+        .filter(manifest -> manifest.snapshotId() == table.currentSnapshot().snapshotId())\n+        .collect(Collectors.toList()).get(0);\n+    Assert.assertEquals(3, manifestFile.sequenceNumber());\n+\n+    for (ManifestEntry entry : ManifestFiles.read(manifestFile,\n+        table.io(), table.ops().current().specsById()).entries()) {\n+      if (entry.file().path().equals(FILE_C.path()) || entry.file().path().equals(FILE_D.path())) {\n+        Assert.assertEquals(3, entry.sequenceNumber().longValue());\n+      }\n+    }\n+  }\n+\n+  @Test\n+  public void testSequenceNumberForMergeAppend() throws IOException {\n+    table.updateProperties()\n+        .set(TableProperties.MANIFEST_MIN_MERGE_COUNT, \"1\")\n+        .commit();\n+    table.newAppend().appendFile(FILE_A).commit();\n+    Assert.assertEquals(1, table.currentSnapshot().sequenceNumber());\n+\n+    table.newAppend().appendFile(FILE_B).commit();\n+    Assert.assertEquals(2, table.currentSnapshot().sequenceNumber());\n+\n+    ManifestFile manifestFile = writeManifest(FILE_C, FILE_D);\n+    table.newAppend().appendManifest(manifestFile).commit();\n+    Assert.assertEquals(3, table.currentSnapshot().sequenceNumber());\n+\n+    manifestFile = table.currentSnapshot().manifests().get(0);\n+\n+    Assert.assertEquals(\"the sequence number of manifest should be 3\", 3, manifestFile.sequenceNumber());\n+\n+    for (ManifestEntry entry : ManifestFiles.read(manifestFile,\n+        table.io(), table.ops().current().specsById()).entries()) {\n+      if (entry.file().path().equals(FILE_A.path())) {\n+        Assert.assertEquals(\"the sequence number of data file should be 1\", 1, entry.sequenceNumber().longValue());\n+      }\n+\n+      if (entry.file().path().equals(FILE_B.path())) {\n+        Assert.assertEquals(\"the sequence number of data file should be 2\", 2, entry.sequenceNumber().longValue());\n+      }\n+\n+      if (entry.file().path().equals(FILE_C.path()) || entry.file().path().equals(FILE_D.path())) {\n+        Assert.assertEquals(\"the sequence number of data file should be 3\", 3, entry.sequenceNumber().longValue());\n+      }\n+    }\n+  }\n+\n+  @Test\n+  public void testSequenceNumberForRewrite() {\n+    table.newFastAppend().appendFile(FILE_A).commit();\n+    table.newFastAppend().appendFile(FILE_B).commit();\n+    Assert.assertEquals(2, table.currentSnapshot().sequenceNumber());\n+\n+    table.rewriteManifests().clusterBy(file -> \"\").commit();\n+    Assert.assertEquals(\"the sequence number of snapshot should be 3\",\n+        3, table.currentSnapshot().sequenceNumber());\n+\n+    ManifestFile newManifest = table.currentSnapshot().manifests().get(0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "95cd1f02828a0dd2a9b27b244aecd91ff37d4460"}, "originalPosition": 116}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEwNDk1MTU4", "url": "https://github.com/apache/iceberg/pull/974#pullrequestreview-410495158", "createdAt": "2020-05-12T23:38:31Z", "commit": {"oid": "95cd1f02828a0dd2a9b27b244aecd91ff37d4460"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQyMzozODozMlrOGUcnzg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQyMzozODozMlrOGUcnzg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDA5MzY0Ng==", "bodyText": "This shouldn't use transactions. There is no need for it in a simple conflict test.", "url": "https://github.com/apache/iceberg/pull/974#discussion_r424093646", "createdAt": "2020-05-12T23:38:32Z", "author": {"login": "rdblue"}, "path": "core/src/test/java/org/apache/iceberg/TestSequenceNumberForV2Table.java", "diffHunk": "@@ -0,0 +1,299 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.concurrent.Callable;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.stream.Collectors;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+public class TestSequenceNumberForV2Table extends TableTestBase {\n+\n+  public TestSequenceNumberForV2Table() {\n+    super(2);\n+  }\n+\n+  @Test\n+  public void testSequenceNumberForFastAppend() throws IOException {\n+    table.newFastAppend().appendFile(FILE_A).commit();\n+    Assert.assertEquals(1, table.currentSnapshot().sequenceNumber());\n+    ManifestFile manifestFile = table.currentSnapshot().manifests().get(0);\n+    Assert.assertEquals(1, manifestFile.sequenceNumber());\n+\n+    table.newFastAppend().appendFile(FILE_B).commit();\n+    Assert.assertEquals(2, table.currentSnapshot().sequenceNumber());\n+    manifestFile = table.currentSnapshot().manifests().stream()\n+        .filter(manifest -> manifest.snapshotId() == table.currentSnapshot().snapshotId())\n+        .collect(Collectors.toList()).get(0);\n+    Assert.assertEquals(2, manifestFile.sequenceNumber());\n+\n+    manifestFile = writeManifest(FILE_C, FILE_D);\n+    table.newFastAppend().appendManifest(manifestFile).commit();\n+    Assert.assertEquals(3, table.currentSnapshot().sequenceNumber());\n+\n+    manifestFile = table.currentSnapshot().manifests().stream()\n+        .filter(manifest -> manifest.snapshotId() == table.currentSnapshot().snapshotId())\n+        .collect(Collectors.toList()).get(0);\n+    Assert.assertEquals(3, manifestFile.sequenceNumber());\n+\n+    for (ManifestEntry entry : ManifestFiles.read(manifestFile,\n+        table.io(), table.ops().current().specsById()).entries()) {\n+      if (entry.file().path().equals(FILE_C.path()) || entry.file().path().equals(FILE_D.path())) {\n+        Assert.assertEquals(3, entry.sequenceNumber().longValue());\n+      }\n+    }\n+  }\n+\n+  @Test\n+  public void testSequenceNumberForMergeAppend() throws IOException {\n+    table.updateProperties()\n+        .set(TableProperties.MANIFEST_MIN_MERGE_COUNT, \"1\")\n+        .commit();\n+    table.newAppend().appendFile(FILE_A).commit();\n+    Assert.assertEquals(1, table.currentSnapshot().sequenceNumber());\n+\n+    table.newAppend().appendFile(FILE_B).commit();\n+    Assert.assertEquals(2, table.currentSnapshot().sequenceNumber());\n+\n+    ManifestFile manifestFile = writeManifest(FILE_C, FILE_D);\n+    table.newAppend().appendManifest(manifestFile).commit();\n+    Assert.assertEquals(3, table.currentSnapshot().sequenceNumber());\n+\n+    manifestFile = table.currentSnapshot().manifests().get(0);\n+\n+    Assert.assertEquals(\"the sequence number of manifest should be 3\", 3, manifestFile.sequenceNumber());\n+\n+    for (ManifestEntry entry : ManifestFiles.read(manifestFile,\n+        table.io(), table.ops().current().specsById()).entries()) {\n+      if (entry.file().path().equals(FILE_A.path())) {\n+        Assert.assertEquals(\"the sequence number of data file should be 1\", 1, entry.sequenceNumber().longValue());\n+      }\n+\n+      if (entry.file().path().equals(FILE_B.path())) {\n+        Assert.assertEquals(\"the sequence number of data file should be 2\", 2, entry.sequenceNumber().longValue());\n+      }\n+\n+      if (entry.file().path().equals(FILE_C.path()) || entry.file().path().equals(FILE_D.path())) {\n+        Assert.assertEquals(\"the sequence number of data file should be 3\", 3, entry.sequenceNumber().longValue());\n+      }\n+    }\n+  }\n+\n+  @Test\n+  public void testSequenceNumberForRewrite() {\n+    table.newFastAppend().appendFile(FILE_A).commit();\n+    table.newFastAppend().appendFile(FILE_B).commit();\n+    Assert.assertEquals(2, table.currentSnapshot().sequenceNumber());\n+\n+    table.rewriteManifests().clusterBy(file -> \"\").commit();\n+    Assert.assertEquals(\"the sequence number of snapshot should be 3\",\n+        3, table.currentSnapshot().sequenceNumber());\n+\n+    ManifestFile newManifest = table.currentSnapshot().manifests().get(0);\n+    Assert.assertEquals(\"the sequence number of manifest should be 3\",\n+        3, newManifest.sequenceNumber());\n+\n+    for (ManifestEntry entry : ManifestFiles.read(newManifest,\n+        table.io(), table.ops().current().specsById()).entries()) {\n+      if (entry.file().path().equals(FILE_A.path())) {\n+        Assert.assertEquals(\"the sequence number of data file should be 1\", 1, entry.sequenceNumber().longValue());\n+      }\n+\n+      if (entry.file().path().equals(FILE_B.path())) {\n+        Assert.assertEquals(\"the sequence number of data file should be 1\", 2, entry.sequenceNumber().longValue());\n+      }\n+    }\n+  }\n+\n+  @Test\n+  public void testCommitConflict() {\n+    Transaction txn = table.newTransaction();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "95cd1f02828a0dd2a9b27b244aecd91ff37d4460"}, "originalPosition": 134}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEwNDk2MjUw", "url": "https://github.com/apache/iceberg/pull/974#pullrequestreview-410496250", "createdAt": "2020-05-12T23:41:34Z", "commit": {"oid": "95cd1f02828a0dd2a9b27b244aecd91ff37d4460"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQyMzo0MTozNFrOGUcrWg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQyMzo0MTozNFrOGUcrWg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDA5NDU1NA==", "bodyText": "I think there is some confusion about what this is doing. This IllegalStateException indicates that one of the operations in a transaction was not committed, not that there was a conflict committing to the table. If you want to validate a conflict, then you need to set the number of retries to 0 so that the CommitFailedException is thrown.\nMost tests that validate a conflict call apply on the first change, then call commit on the conflicting change, and then call commit on the first change. Retry allows the commit to succeed, but the result of the commit will be different. In this case, you'd have a higher sequence number.", "url": "https://github.com/apache/iceberg/pull/974#discussion_r424094554", "createdAt": "2020-05-12T23:41:34Z", "author": {"login": "rdblue"}, "path": "core/src/test/java/org/apache/iceberg/TestSequenceNumberForV2Table.java", "diffHunk": "@@ -0,0 +1,299 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.concurrent.Callable;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.stream.Collectors;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+public class TestSequenceNumberForV2Table extends TableTestBase {\n+\n+  public TestSequenceNumberForV2Table() {\n+    super(2);\n+  }\n+\n+  @Test\n+  public void testSequenceNumberForFastAppend() throws IOException {\n+    table.newFastAppend().appendFile(FILE_A).commit();\n+    Assert.assertEquals(1, table.currentSnapshot().sequenceNumber());\n+    ManifestFile manifestFile = table.currentSnapshot().manifests().get(0);\n+    Assert.assertEquals(1, manifestFile.sequenceNumber());\n+\n+    table.newFastAppend().appendFile(FILE_B).commit();\n+    Assert.assertEquals(2, table.currentSnapshot().sequenceNumber());\n+    manifestFile = table.currentSnapshot().manifests().stream()\n+        .filter(manifest -> manifest.snapshotId() == table.currentSnapshot().snapshotId())\n+        .collect(Collectors.toList()).get(0);\n+    Assert.assertEquals(2, manifestFile.sequenceNumber());\n+\n+    manifestFile = writeManifest(FILE_C, FILE_D);\n+    table.newFastAppend().appendManifest(manifestFile).commit();\n+    Assert.assertEquals(3, table.currentSnapshot().sequenceNumber());\n+\n+    manifestFile = table.currentSnapshot().manifests().stream()\n+        .filter(manifest -> manifest.snapshotId() == table.currentSnapshot().snapshotId())\n+        .collect(Collectors.toList()).get(0);\n+    Assert.assertEquals(3, manifestFile.sequenceNumber());\n+\n+    for (ManifestEntry entry : ManifestFiles.read(manifestFile,\n+        table.io(), table.ops().current().specsById()).entries()) {\n+      if (entry.file().path().equals(FILE_C.path()) || entry.file().path().equals(FILE_D.path())) {\n+        Assert.assertEquals(3, entry.sequenceNumber().longValue());\n+      }\n+    }\n+  }\n+\n+  @Test\n+  public void testSequenceNumberForMergeAppend() throws IOException {\n+    table.updateProperties()\n+        .set(TableProperties.MANIFEST_MIN_MERGE_COUNT, \"1\")\n+        .commit();\n+    table.newAppend().appendFile(FILE_A).commit();\n+    Assert.assertEquals(1, table.currentSnapshot().sequenceNumber());\n+\n+    table.newAppend().appendFile(FILE_B).commit();\n+    Assert.assertEquals(2, table.currentSnapshot().sequenceNumber());\n+\n+    ManifestFile manifestFile = writeManifest(FILE_C, FILE_D);\n+    table.newAppend().appendManifest(manifestFile).commit();\n+    Assert.assertEquals(3, table.currentSnapshot().sequenceNumber());\n+\n+    manifestFile = table.currentSnapshot().manifests().get(0);\n+\n+    Assert.assertEquals(\"the sequence number of manifest should be 3\", 3, manifestFile.sequenceNumber());\n+\n+    for (ManifestEntry entry : ManifestFiles.read(manifestFile,\n+        table.io(), table.ops().current().specsById()).entries()) {\n+      if (entry.file().path().equals(FILE_A.path())) {\n+        Assert.assertEquals(\"the sequence number of data file should be 1\", 1, entry.sequenceNumber().longValue());\n+      }\n+\n+      if (entry.file().path().equals(FILE_B.path())) {\n+        Assert.assertEquals(\"the sequence number of data file should be 2\", 2, entry.sequenceNumber().longValue());\n+      }\n+\n+      if (entry.file().path().equals(FILE_C.path()) || entry.file().path().equals(FILE_D.path())) {\n+        Assert.assertEquals(\"the sequence number of data file should be 3\", 3, entry.sequenceNumber().longValue());\n+      }\n+    }\n+  }\n+\n+  @Test\n+  public void testSequenceNumberForRewrite() {\n+    table.newFastAppend().appendFile(FILE_A).commit();\n+    table.newFastAppend().appendFile(FILE_B).commit();\n+    Assert.assertEquals(2, table.currentSnapshot().sequenceNumber());\n+\n+    table.rewriteManifests().clusterBy(file -> \"\").commit();\n+    Assert.assertEquals(\"the sequence number of snapshot should be 3\",\n+        3, table.currentSnapshot().sequenceNumber());\n+\n+    ManifestFile newManifest = table.currentSnapshot().manifests().get(0);\n+    Assert.assertEquals(\"the sequence number of manifest should be 3\",\n+        3, newManifest.sequenceNumber());\n+\n+    for (ManifestEntry entry : ManifestFiles.read(newManifest,\n+        table.io(), table.ops().current().specsById()).entries()) {\n+      if (entry.file().path().equals(FILE_A.path())) {\n+        Assert.assertEquals(\"the sequence number of data file should be 1\", 1, entry.sequenceNumber().longValue());\n+      }\n+\n+      if (entry.file().path().equals(FILE_B.path())) {\n+        Assert.assertEquals(\"the sequence number of data file should be 1\", 2, entry.sequenceNumber().longValue());\n+      }\n+    }\n+  }\n+\n+  @Test\n+  public void testCommitConflict() {\n+    Transaction txn = table.newTransaction();\n+\n+    txn.newFastAppend().appendFile(FILE_A).apply();\n+    table.newFastAppend().appendFile(FILE_B).commit();\n+\n+    AssertHelpers.assertThrows(\"Should failed due to conflict\",\n+        IllegalStateException.class, \"last operation has not committed\", txn::commitTransaction);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "95cd1f02828a0dd2a9b27b244aecd91ff37d4460"}, "originalPosition": 140}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEwNDk2NDQ5", "url": "https://github.com/apache/iceberg/pull/974#pullrequestreview-410496449", "createdAt": "2020-05-12T23:42:09Z", "commit": {"oid": "95cd1f02828a0dd2a9b27b244aecd91ff37d4460"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQyMzo0MjowOVrOGUcsAg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQyMzo0MjowOVrOGUcsAg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDA5NDcyMg==", "bodyText": "This should use table, not load.", "url": "https://github.com/apache/iceberg/pull/974#discussion_r424094722", "createdAt": "2020-05-12T23:42:09Z", "author": {"login": "rdblue"}, "path": "core/src/test/java/org/apache/iceberg/TestSequenceNumberForV2Table.java", "diffHunk": "@@ -0,0 +1,299 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.concurrent.Callable;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.stream.Collectors;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+public class TestSequenceNumberForV2Table extends TableTestBase {\n+\n+  public TestSequenceNumberForV2Table() {\n+    super(2);\n+  }\n+\n+  @Test\n+  public void testSequenceNumberForFastAppend() throws IOException {\n+    table.newFastAppend().appendFile(FILE_A).commit();\n+    Assert.assertEquals(1, table.currentSnapshot().sequenceNumber());\n+    ManifestFile manifestFile = table.currentSnapshot().manifests().get(0);\n+    Assert.assertEquals(1, manifestFile.sequenceNumber());\n+\n+    table.newFastAppend().appendFile(FILE_B).commit();\n+    Assert.assertEquals(2, table.currentSnapshot().sequenceNumber());\n+    manifestFile = table.currentSnapshot().manifests().stream()\n+        .filter(manifest -> manifest.snapshotId() == table.currentSnapshot().snapshotId())\n+        .collect(Collectors.toList()).get(0);\n+    Assert.assertEquals(2, manifestFile.sequenceNumber());\n+\n+    manifestFile = writeManifest(FILE_C, FILE_D);\n+    table.newFastAppend().appendManifest(manifestFile).commit();\n+    Assert.assertEquals(3, table.currentSnapshot().sequenceNumber());\n+\n+    manifestFile = table.currentSnapshot().manifests().stream()\n+        .filter(manifest -> manifest.snapshotId() == table.currentSnapshot().snapshotId())\n+        .collect(Collectors.toList()).get(0);\n+    Assert.assertEquals(3, manifestFile.sequenceNumber());\n+\n+    for (ManifestEntry entry : ManifestFiles.read(manifestFile,\n+        table.io(), table.ops().current().specsById()).entries()) {\n+      if (entry.file().path().equals(FILE_C.path()) || entry.file().path().equals(FILE_D.path())) {\n+        Assert.assertEquals(3, entry.sequenceNumber().longValue());\n+      }\n+    }\n+  }\n+\n+  @Test\n+  public void testSequenceNumberForMergeAppend() throws IOException {\n+    table.updateProperties()\n+        .set(TableProperties.MANIFEST_MIN_MERGE_COUNT, \"1\")\n+        .commit();\n+    table.newAppend().appendFile(FILE_A).commit();\n+    Assert.assertEquals(1, table.currentSnapshot().sequenceNumber());\n+\n+    table.newAppend().appendFile(FILE_B).commit();\n+    Assert.assertEquals(2, table.currentSnapshot().sequenceNumber());\n+\n+    ManifestFile manifestFile = writeManifest(FILE_C, FILE_D);\n+    table.newAppend().appendManifest(manifestFile).commit();\n+    Assert.assertEquals(3, table.currentSnapshot().sequenceNumber());\n+\n+    manifestFile = table.currentSnapshot().manifests().get(0);\n+\n+    Assert.assertEquals(\"the sequence number of manifest should be 3\", 3, manifestFile.sequenceNumber());\n+\n+    for (ManifestEntry entry : ManifestFiles.read(manifestFile,\n+        table.io(), table.ops().current().specsById()).entries()) {\n+      if (entry.file().path().equals(FILE_A.path())) {\n+        Assert.assertEquals(\"the sequence number of data file should be 1\", 1, entry.sequenceNumber().longValue());\n+      }\n+\n+      if (entry.file().path().equals(FILE_B.path())) {\n+        Assert.assertEquals(\"the sequence number of data file should be 2\", 2, entry.sequenceNumber().longValue());\n+      }\n+\n+      if (entry.file().path().equals(FILE_C.path()) || entry.file().path().equals(FILE_D.path())) {\n+        Assert.assertEquals(\"the sequence number of data file should be 3\", 3, entry.sequenceNumber().longValue());\n+      }\n+    }\n+  }\n+\n+  @Test\n+  public void testSequenceNumberForRewrite() {\n+    table.newFastAppend().appendFile(FILE_A).commit();\n+    table.newFastAppend().appendFile(FILE_B).commit();\n+    Assert.assertEquals(2, table.currentSnapshot().sequenceNumber());\n+\n+    table.rewriteManifests().clusterBy(file -> \"\").commit();\n+    Assert.assertEquals(\"the sequence number of snapshot should be 3\",\n+        3, table.currentSnapshot().sequenceNumber());\n+\n+    ManifestFile newManifest = table.currentSnapshot().manifests().get(0);\n+    Assert.assertEquals(\"the sequence number of manifest should be 3\",\n+        3, newManifest.sequenceNumber());\n+\n+    for (ManifestEntry entry : ManifestFiles.read(newManifest,\n+        table.io(), table.ops().current().specsById()).entries()) {\n+      if (entry.file().path().equals(FILE_A.path())) {\n+        Assert.assertEquals(\"the sequence number of data file should be 1\", 1, entry.sequenceNumber().longValue());\n+      }\n+\n+      if (entry.file().path().equals(FILE_B.path())) {\n+        Assert.assertEquals(\"the sequence number of data file should be 1\", 2, entry.sequenceNumber().longValue());\n+      }\n+    }\n+  }\n+\n+  @Test\n+  public void testCommitConflict() {\n+    Transaction txn = table.newTransaction();\n+\n+    txn.newFastAppend().appendFile(FILE_A).apply();\n+    table.newFastAppend().appendFile(FILE_B).commit();\n+\n+    AssertHelpers.assertThrows(\"Should failed due to conflict\",\n+        IllegalStateException.class, \"last operation has not committed\", txn::commitTransaction);\n+\n+    Assert.assertEquals(1, TestTables.load(tableDir, \"test\").currentSnapshot().sequenceNumber());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "95cd1f02828a0dd2a9b27b244aecd91ff37d4460"}, "originalPosition": 142}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEwNDk3MjEy", "url": "https://github.com/apache/iceberg/pull/974#pullrequestreview-410497212", "createdAt": "2020-05-12T23:44:15Z", "commit": {"oid": "95cd1f02828a0dd2a9b27b244aecd91ff37d4460"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQyMzo0NDoxNVrOGUcurA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQyMzo0NDoxNVrOGUcurA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDA5NTQwNA==", "bodyText": "There is no need for a thread pool test here, as long as the single-threaded tests are written correctly. We are not trying to test conflict detection -- instead we want to test what happens when there is a conflict and we can simulate that with a specific order of calls.", "url": "https://github.com/apache/iceberg/pull/974#discussion_r424095404", "createdAt": "2020-05-12T23:44:15Z", "author": {"login": "rdblue"}, "path": "core/src/test/java/org/apache/iceberg/TestSequenceNumberForV2Table.java", "diffHunk": "@@ -0,0 +1,299 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.concurrent.Callable;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.stream.Collectors;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+public class TestSequenceNumberForV2Table extends TableTestBase {\n+\n+  public TestSequenceNumberForV2Table() {\n+    super(2);\n+  }\n+\n+  @Test\n+  public void testSequenceNumberForFastAppend() throws IOException {\n+    table.newFastAppend().appendFile(FILE_A).commit();\n+    Assert.assertEquals(1, table.currentSnapshot().sequenceNumber());\n+    ManifestFile manifestFile = table.currentSnapshot().manifests().get(0);\n+    Assert.assertEquals(1, manifestFile.sequenceNumber());\n+\n+    table.newFastAppend().appendFile(FILE_B).commit();\n+    Assert.assertEquals(2, table.currentSnapshot().sequenceNumber());\n+    manifestFile = table.currentSnapshot().manifests().stream()\n+        .filter(manifest -> manifest.snapshotId() == table.currentSnapshot().snapshotId())\n+        .collect(Collectors.toList()).get(0);\n+    Assert.assertEquals(2, manifestFile.sequenceNumber());\n+\n+    manifestFile = writeManifest(FILE_C, FILE_D);\n+    table.newFastAppend().appendManifest(manifestFile).commit();\n+    Assert.assertEquals(3, table.currentSnapshot().sequenceNumber());\n+\n+    manifestFile = table.currentSnapshot().manifests().stream()\n+        .filter(manifest -> manifest.snapshotId() == table.currentSnapshot().snapshotId())\n+        .collect(Collectors.toList()).get(0);\n+    Assert.assertEquals(3, manifestFile.sequenceNumber());\n+\n+    for (ManifestEntry entry : ManifestFiles.read(manifestFile,\n+        table.io(), table.ops().current().specsById()).entries()) {\n+      if (entry.file().path().equals(FILE_C.path()) || entry.file().path().equals(FILE_D.path())) {\n+        Assert.assertEquals(3, entry.sequenceNumber().longValue());\n+      }\n+    }\n+  }\n+\n+  @Test\n+  public void testSequenceNumberForMergeAppend() throws IOException {\n+    table.updateProperties()\n+        .set(TableProperties.MANIFEST_MIN_MERGE_COUNT, \"1\")\n+        .commit();\n+    table.newAppend().appendFile(FILE_A).commit();\n+    Assert.assertEquals(1, table.currentSnapshot().sequenceNumber());\n+\n+    table.newAppend().appendFile(FILE_B).commit();\n+    Assert.assertEquals(2, table.currentSnapshot().sequenceNumber());\n+\n+    ManifestFile manifestFile = writeManifest(FILE_C, FILE_D);\n+    table.newAppend().appendManifest(manifestFile).commit();\n+    Assert.assertEquals(3, table.currentSnapshot().sequenceNumber());\n+\n+    manifestFile = table.currentSnapshot().manifests().get(0);\n+\n+    Assert.assertEquals(\"the sequence number of manifest should be 3\", 3, manifestFile.sequenceNumber());\n+\n+    for (ManifestEntry entry : ManifestFiles.read(manifestFile,\n+        table.io(), table.ops().current().specsById()).entries()) {\n+      if (entry.file().path().equals(FILE_A.path())) {\n+        Assert.assertEquals(\"the sequence number of data file should be 1\", 1, entry.sequenceNumber().longValue());\n+      }\n+\n+      if (entry.file().path().equals(FILE_B.path())) {\n+        Assert.assertEquals(\"the sequence number of data file should be 2\", 2, entry.sequenceNumber().longValue());\n+      }\n+\n+      if (entry.file().path().equals(FILE_C.path()) || entry.file().path().equals(FILE_D.path())) {\n+        Assert.assertEquals(\"the sequence number of data file should be 3\", 3, entry.sequenceNumber().longValue());\n+      }\n+    }\n+  }\n+\n+  @Test\n+  public void testSequenceNumberForRewrite() {\n+    table.newFastAppend().appendFile(FILE_A).commit();\n+    table.newFastAppend().appendFile(FILE_B).commit();\n+    Assert.assertEquals(2, table.currentSnapshot().sequenceNumber());\n+\n+    table.rewriteManifests().clusterBy(file -> \"\").commit();\n+    Assert.assertEquals(\"the sequence number of snapshot should be 3\",\n+        3, table.currentSnapshot().sequenceNumber());\n+\n+    ManifestFile newManifest = table.currentSnapshot().manifests().get(0);\n+    Assert.assertEquals(\"the sequence number of manifest should be 3\",\n+        3, newManifest.sequenceNumber());\n+\n+    for (ManifestEntry entry : ManifestFiles.read(newManifest,\n+        table.io(), table.ops().current().specsById()).entries()) {\n+      if (entry.file().path().equals(FILE_A.path())) {\n+        Assert.assertEquals(\"the sequence number of data file should be 1\", 1, entry.sequenceNumber().longValue());\n+      }\n+\n+      if (entry.file().path().equals(FILE_B.path())) {\n+        Assert.assertEquals(\"the sequence number of data file should be 1\", 2, entry.sequenceNumber().longValue());\n+      }\n+    }\n+  }\n+\n+  @Test\n+  public void testCommitConflict() {\n+    Transaction txn = table.newTransaction();\n+\n+    txn.newFastAppend().appendFile(FILE_A).apply();\n+    table.newFastAppend().appendFile(FILE_B).commit();\n+\n+    AssertHelpers.assertThrows(\"Should failed due to conflict\",\n+        IllegalStateException.class, \"last operation has not committed\", txn::commitTransaction);\n+\n+    Assert.assertEquals(1, TestTables.load(tableDir, \"test\").currentSnapshot().sequenceNumber());\n+\n+    AppendFiles appendFiles = table.newFastAppend().appendFile(FILE_C);\n+    appendFiles.apply();\n+    table.newFastAppend().appendFile(FILE_D).commit();\n+    appendFiles.commit();\n+\n+    ManifestFile manifestFile = table.currentSnapshot().manifests().stream()\n+        .filter(manifest -> manifest.snapshotId() == table.currentSnapshot().snapshotId())\n+        .collect(Collectors.toList()).get(0);\n+\n+    for (ManifestEntry entry : ManifestFiles.read(manifestFile, table.io(),\n+        table.ops().current().specsById()).entries()) {\n+      if (entry.file().path().equals(FILE_C.path())) {\n+        Assert.assertEquals(table.currentSnapshot().sequenceNumber(), entry.sequenceNumber().longValue());\n+      }\n+    }\n+  }\n+\n+  @Test\n+  public void testConcurrentCommit() throws InterruptedException {\n+    ExecutorService threadPool = Executors.newFixedThreadPool(4);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "95cd1f02828a0dd2a9b27b244aecd91ff37d4460"}, "originalPosition": 163}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEwNDk3NDc0", "url": "https://github.com/apache/iceberg/pull/974#pullrequestreview-410497474", "createdAt": "2020-05-12T23:44:58Z", "commit": {"oid": "95cd1f02828a0dd2a9b27b244aecd91ff37d4460"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQyMzo0NDo1OFrOGUcviQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQyMzo0NDo1OFrOGUcviQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDA5NTYyNQ==", "bodyText": "This section is more like what I would expect for this test.", "url": "https://github.com/apache/iceberg/pull/974#discussion_r424095625", "createdAt": "2020-05-12T23:44:58Z", "author": {"login": "rdblue"}, "path": "core/src/test/java/org/apache/iceberg/TestSequenceNumberForV2Table.java", "diffHunk": "@@ -0,0 +1,299 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.concurrent.Callable;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.stream.Collectors;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+public class TestSequenceNumberForV2Table extends TableTestBase {\n+\n+  public TestSequenceNumberForV2Table() {\n+    super(2);\n+  }\n+\n+  @Test\n+  public void testSequenceNumberForFastAppend() throws IOException {\n+    table.newFastAppend().appendFile(FILE_A).commit();\n+    Assert.assertEquals(1, table.currentSnapshot().sequenceNumber());\n+    ManifestFile manifestFile = table.currentSnapshot().manifests().get(0);\n+    Assert.assertEquals(1, manifestFile.sequenceNumber());\n+\n+    table.newFastAppend().appendFile(FILE_B).commit();\n+    Assert.assertEquals(2, table.currentSnapshot().sequenceNumber());\n+    manifestFile = table.currentSnapshot().manifests().stream()\n+        .filter(manifest -> manifest.snapshotId() == table.currentSnapshot().snapshotId())\n+        .collect(Collectors.toList()).get(0);\n+    Assert.assertEquals(2, manifestFile.sequenceNumber());\n+\n+    manifestFile = writeManifest(FILE_C, FILE_D);\n+    table.newFastAppend().appendManifest(manifestFile).commit();\n+    Assert.assertEquals(3, table.currentSnapshot().sequenceNumber());\n+\n+    manifestFile = table.currentSnapshot().manifests().stream()\n+        .filter(manifest -> manifest.snapshotId() == table.currentSnapshot().snapshotId())\n+        .collect(Collectors.toList()).get(0);\n+    Assert.assertEquals(3, manifestFile.sequenceNumber());\n+\n+    for (ManifestEntry entry : ManifestFiles.read(manifestFile,\n+        table.io(), table.ops().current().specsById()).entries()) {\n+      if (entry.file().path().equals(FILE_C.path()) || entry.file().path().equals(FILE_D.path())) {\n+        Assert.assertEquals(3, entry.sequenceNumber().longValue());\n+      }\n+    }\n+  }\n+\n+  @Test\n+  public void testSequenceNumberForMergeAppend() throws IOException {\n+    table.updateProperties()\n+        .set(TableProperties.MANIFEST_MIN_MERGE_COUNT, \"1\")\n+        .commit();\n+    table.newAppend().appendFile(FILE_A).commit();\n+    Assert.assertEquals(1, table.currentSnapshot().sequenceNumber());\n+\n+    table.newAppend().appendFile(FILE_B).commit();\n+    Assert.assertEquals(2, table.currentSnapshot().sequenceNumber());\n+\n+    ManifestFile manifestFile = writeManifest(FILE_C, FILE_D);\n+    table.newAppend().appendManifest(manifestFile).commit();\n+    Assert.assertEquals(3, table.currentSnapshot().sequenceNumber());\n+\n+    manifestFile = table.currentSnapshot().manifests().get(0);\n+\n+    Assert.assertEquals(\"the sequence number of manifest should be 3\", 3, manifestFile.sequenceNumber());\n+\n+    for (ManifestEntry entry : ManifestFiles.read(manifestFile,\n+        table.io(), table.ops().current().specsById()).entries()) {\n+      if (entry.file().path().equals(FILE_A.path())) {\n+        Assert.assertEquals(\"the sequence number of data file should be 1\", 1, entry.sequenceNumber().longValue());\n+      }\n+\n+      if (entry.file().path().equals(FILE_B.path())) {\n+        Assert.assertEquals(\"the sequence number of data file should be 2\", 2, entry.sequenceNumber().longValue());\n+      }\n+\n+      if (entry.file().path().equals(FILE_C.path()) || entry.file().path().equals(FILE_D.path())) {\n+        Assert.assertEquals(\"the sequence number of data file should be 3\", 3, entry.sequenceNumber().longValue());\n+      }\n+    }\n+  }\n+\n+  @Test\n+  public void testSequenceNumberForRewrite() {\n+    table.newFastAppend().appendFile(FILE_A).commit();\n+    table.newFastAppend().appendFile(FILE_B).commit();\n+    Assert.assertEquals(2, table.currentSnapshot().sequenceNumber());\n+\n+    table.rewriteManifests().clusterBy(file -> \"\").commit();\n+    Assert.assertEquals(\"the sequence number of snapshot should be 3\",\n+        3, table.currentSnapshot().sequenceNumber());\n+\n+    ManifestFile newManifest = table.currentSnapshot().manifests().get(0);\n+    Assert.assertEquals(\"the sequence number of manifest should be 3\",\n+        3, newManifest.sequenceNumber());\n+\n+    for (ManifestEntry entry : ManifestFiles.read(newManifest,\n+        table.io(), table.ops().current().specsById()).entries()) {\n+      if (entry.file().path().equals(FILE_A.path())) {\n+        Assert.assertEquals(\"the sequence number of data file should be 1\", 1, entry.sequenceNumber().longValue());\n+      }\n+\n+      if (entry.file().path().equals(FILE_B.path())) {\n+        Assert.assertEquals(\"the sequence number of data file should be 1\", 2, entry.sequenceNumber().longValue());\n+      }\n+    }\n+  }\n+\n+  @Test\n+  public void testCommitConflict() {\n+    Transaction txn = table.newTransaction();\n+\n+    txn.newFastAppend().appendFile(FILE_A).apply();\n+    table.newFastAppend().appendFile(FILE_B).commit();\n+\n+    AssertHelpers.assertThrows(\"Should failed due to conflict\",\n+        IllegalStateException.class, \"last operation has not committed\", txn::commitTransaction);\n+\n+    Assert.assertEquals(1, TestTables.load(tableDir, \"test\").currentSnapshot().sequenceNumber());\n+\n+    AppendFiles appendFiles = table.newFastAppend().appendFile(FILE_C);\n+    appendFiles.apply();\n+    table.newFastAppend().appendFile(FILE_D).commit();\n+    appendFiles.commit();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "95cd1f02828a0dd2a9b27b244aecd91ff37d4460"}, "originalPosition": 147}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEwNDk4MDU4", "url": "https://github.com/apache/iceberg/pull/974#pullrequestreview-410498058", "createdAt": "2020-05-12T23:46:37Z", "commit": {"oid": "95cd1f02828a0dd2a9b27b244aecd91ff37d4460"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQyMzo0NjozN1rOGUcxlw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQyMzo0NjozN1rOGUcxlw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDA5NjE1MQ==", "bodyText": "When values are predictable, like sequence numbers, we usually want to test that they are specific values, not that they match some other variable. It would be better to test that FILE_C has sequence number 3.\nThis also needs to validate that FILE_D was committed first and has sequence number 2.", "url": "https://github.com/apache/iceberg/pull/974#discussion_r424096151", "createdAt": "2020-05-12T23:46:37Z", "author": {"login": "rdblue"}, "path": "core/src/test/java/org/apache/iceberg/TestSequenceNumberForV2Table.java", "diffHunk": "@@ -0,0 +1,299 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.concurrent.Callable;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.stream.Collectors;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+public class TestSequenceNumberForV2Table extends TableTestBase {\n+\n+  public TestSequenceNumberForV2Table() {\n+    super(2);\n+  }\n+\n+  @Test\n+  public void testSequenceNumberForFastAppend() throws IOException {\n+    table.newFastAppend().appendFile(FILE_A).commit();\n+    Assert.assertEquals(1, table.currentSnapshot().sequenceNumber());\n+    ManifestFile manifestFile = table.currentSnapshot().manifests().get(0);\n+    Assert.assertEquals(1, manifestFile.sequenceNumber());\n+\n+    table.newFastAppend().appendFile(FILE_B).commit();\n+    Assert.assertEquals(2, table.currentSnapshot().sequenceNumber());\n+    manifestFile = table.currentSnapshot().manifests().stream()\n+        .filter(manifest -> manifest.snapshotId() == table.currentSnapshot().snapshotId())\n+        .collect(Collectors.toList()).get(0);\n+    Assert.assertEquals(2, manifestFile.sequenceNumber());\n+\n+    manifestFile = writeManifest(FILE_C, FILE_D);\n+    table.newFastAppend().appendManifest(manifestFile).commit();\n+    Assert.assertEquals(3, table.currentSnapshot().sequenceNumber());\n+\n+    manifestFile = table.currentSnapshot().manifests().stream()\n+        .filter(manifest -> manifest.snapshotId() == table.currentSnapshot().snapshotId())\n+        .collect(Collectors.toList()).get(0);\n+    Assert.assertEquals(3, manifestFile.sequenceNumber());\n+\n+    for (ManifestEntry entry : ManifestFiles.read(manifestFile,\n+        table.io(), table.ops().current().specsById()).entries()) {\n+      if (entry.file().path().equals(FILE_C.path()) || entry.file().path().equals(FILE_D.path())) {\n+        Assert.assertEquals(3, entry.sequenceNumber().longValue());\n+      }\n+    }\n+  }\n+\n+  @Test\n+  public void testSequenceNumberForMergeAppend() throws IOException {\n+    table.updateProperties()\n+        .set(TableProperties.MANIFEST_MIN_MERGE_COUNT, \"1\")\n+        .commit();\n+    table.newAppend().appendFile(FILE_A).commit();\n+    Assert.assertEquals(1, table.currentSnapshot().sequenceNumber());\n+\n+    table.newAppend().appendFile(FILE_B).commit();\n+    Assert.assertEquals(2, table.currentSnapshot().sequenceNumber());\n+\n+    ManifestFile manifestFile = writeManifest(FILE_C, FILE_D);\n+    table.newAppend().appendManifest(manifestFile).commit();\n+    Assert.assertEquals(3, table.currentSnapshot().sequenceNumber());\n+\n+    manifestFile = table.currentSnapshot().manifests().get(0);\n+\n+    Assert.assertEquals(\"the sequence number of manifest should be 3\", 3, manifestFile.sequenceNumber());\n+\n+    for (ManifestEntry entry : ManifestFiles.read(manifestFile,\n+        table.io(), table.ops().current().specsById()).entries()) {\n+      if (entry.file().path().equals(FILE_A.path())) {\n+        Assert.assertEquals(\"the sequence number of data file should be 1\", 1, entry.sequenceNumber().longValue());\n+      }\n+\n+      if (entry.file().path().equals(FILE_B.path())) {\n+        Assert.assertEquals(\"the sequence number of data file should be 2\", 2, entry.sequenceNumber().longValue());\n+      }\n+\n+      if (entry.file().path().equals(FILE_C.path()) || entry.file().path().equals(FILE_D.path())) {\n+        Assert.assertEquals(\"the sequence number of data file should be 3\", 3, entry.sequenceNumber().longValue());\n+      }\n+    }\n+  }\n+\n+  @Test\n+  public void testSequenceNumberForRewrite() {\n+    table.newFastAppend().appendFile(FILE_A).commit();\n+    table.newFastAppend().appendFile(FILE_B).commit();\n+    Assert.assertEquals(2, table.currentSnapshot().sequenceNumber());\n+\n+    table.rewriteManifests().clusterBy(file -> \"\").commit();\n+    Assert.assertEquals(\"the sequence number of snapshot should be 3\",\n+        3, table.currentSnapshot().sequenceNumber());\n+\n+    ManifestFile newManifest = table.currentSnapshot().manifests().get(0);\n+    Assert.assertEquals(\"the sequence number of manifest should be 3\",\n+        3, newManifest.sequenceNumber());\n+\n+    for (ManifestEntry entry : ManifestFiles.read(newManifest,\n+        table.io(), table.ops().current().specsById()).entries()) {\n+      if (entry.file().path().equals(FILE_A.path())) {\n+        Assert.assertEquals(\"the sequence number of data file should be 1\", 1, entry.sequenceNumber().longValue());\n+      }\n+\n+      if (entry.file().path().equals(FILE_B.path())) {\n+        Assert.assertEquals(\"the sequence number of data file should be 1\", 2, entry.sequenceNumber().longValue());\n+      }\n+    }\n+  }\n+\n+  @Test\n+  public void testCommitConflict() {\n+    Transaction txn = table.newTransaction();\n+\n+    txn.newFastAppend().appendFile(FILE_A).apply();\n+    table.newFastAppend().appendFile(FILE_B).commit();\n+\n+    AssertHelpers.assertThrows(\"Should failed due to conflict\",\n+        IllegalStateException.class, \"last operation has not committed\", txn::commitTransaction);\n+\n+    Assert.assertEquals(1, TestTables.load(tableDir, \"test\").currentSnapshot().sequenceNumber());\n+\n+    AppendFiles appendFiles = table.newFastAppend().appendFile(FILE_C);\n+    appendFiles.apply();\n+    table.newFastAppend().appendFile(FILE_D).commit();\n+    appendFiles.commit();\n+\n+    ManifestFile manifestFile = table.currentSnapshot().manifests().stream()\n+        .filter(manifest -> manifest.snapshotId() == table.currentSnapshot().snapshotId())\n+        .collect(Collectors.toList()).get(0);\n+\n+    for (ManifestEntry entry : ManifestFiles.read(manifestFile, table.io(),\n+        table.ops().current().specsById()).entries()) {\n+      if (entry.file().path().equals(FILE_C.path())) {\n+        Assert.assertEquals(table.currentSnapshot().sequenceNumber(), entry.sequenceNumber().longValue());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "95cd1f02828a0dd2a9b27b244aecd91ff37d4460"}, "originalPosition": 156}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEwNDk5MDMz", "url": "https://github.com/apache/iceberg/pull/974#pullrequestreview-410499033", "createdAt": "2020-05-12T23:49:17Z", "commit": {"oid": "95cd1f02828a0dd2a9b27b244aecd91ff37d4460"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQyMzo0OToxN1rOGUc08w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQyMzo0OToxN1rOGUc08w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDA5NzAxMQ==", "bodyText": "This also needs to test that the table metadata's last sequence number is still 2. One way to do that is to validate that the next sequence number assigned is 3.", "url": "https://github.com/apache/iceberg/pull/974#discussion_r424097011", "createdAt": "2020-05-12T23:49:17Z", "author": {"login": "rdblue"}, "path": "core/src/test/java/org/apache/iceberg/TestSequenceNumberForV2Table.java", "diffHunk": "@@ -0,0 +1,299 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.concurrent.Callable;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.stream.Collectors;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+public class TestSequenceNumberForV2Table extends TableTestBase {\n+\n+  public TestSequenceNumberForV2Table() {\n+    super(2);\n+  }\n+\n+  @Test\n+  public void testSequenceNumberForFastAppend() throws IOException {\n+    table.newFastAppend().appendFile(FILE_A).commit();\n+    Assert.assertEquals(1, table.currentSnapshot().sequenceNumber());\n+    ManifestFile manifestFile = table.currentSnapshot().manifests().get(0);\n+    Assert.assertEquals(1, manifestFile.sequenceNumber());\n+\n+    table.newFastAppend().appendFile(FILE_B).commit();\n+    Assert.assertEquals(2, table.currentSnapshot().sequenceNumber());\n+    manifestFile = table.currentSnapshot().manifests().stream()\n+        .filter(manifest -> manifest.snapshotId() == table.currentSnapshot().snapshotId())\n+        .collect(Collectors.toList()).get(0);\n+    Assert.assertEquals(2, manifestFile.sequenceNumber());\n+\n+    manifestFile = writeManifest(FILE_C, FILE_D);\n+    table.newFastAppend().appendManifest(manifestFile).commit();\n+    Assert.assertEquals(3, table.currentSnapshot().sequenceNumber());\n+\n+    manifestFile = table.currentSnapshot().manifests().stream()\n+        .filter(manifest -> manifest.snapshotId() == table.currentSnapshot().snapshotId())\n+        .collect(Collectors.toList()).get(0);\n+    Assert.assertEquals(3, manifestFile.sequenceNumber());\n+\n+    for (ManifestEntry entry : ManifestFiles.read(manifestFile,\n+        table.io(), table.ops().current().specsById()).entries()) {\n+      if (entry.file().path().equals(FILE_C.path()) || entry.file().path().equals(FILE_D.path())) {\n+        Assert.assertEquals(3, entry.sequenceNumber().longValue());\n+      }\n+    }\n+  }\n+\n+  @Test\n+  public void testSequenceNumberForMergeAppend() throws IOException {\n+    table.updateProperties()\n+        .set(TableProperties.MANIFEST_MIN_MERGE_COUNT, \"1\")\n+        .commit();\n+    table.newAppend().appendFile(FILE_A).commit();\n+    Assert.assertEquals(1, table.currentSnapshot().sequenceNumber());\n+\n+    table.newAppend().appendFile(FILE_B).commit();\n+    Assert.assertEquals(2, table.currentSnapshot().sequenceNumber());\n+\n+    ManifestFile manifestFile = writeManifest(FILE_C, FILE_D);\n+    table.newAppend().appendManifest(manifestFile).commit();\n+    Assert.assertEquals(3, table.currentSnapshot().sequenceNumber());\n+\n+    manifestFile = table.currentSnapshot().manifests().get(0);\n+\n+    Assert.assertEquals(\"the sequence number of manifest should be 3\", 3, manifestFile.sequenceNumber());\n+\n+    for (ManifestEntry entry : ManifestFiles.read(manifestFile,\n+        table.io(), table.ops().current().specsById()).entries()) {\n+      if (entry.file().path().equals(FILE_A.path())) {\n+        Assert.assertEquals(\"the sequence number of data file should be 1\", 1, entry.sequenceNumber().longValue());\n+      }\n+\n+      if (entry.file().path().equals(FILE_B.path())) {\n+        Assert.assertEquals(\"the sequence number of data file should be 2\", 2, entry.sequenceNumber().longValue());\n+      }\n+\n+      if (entry.file().path().equals(FILE_C.path()) || entry.file().path().equals(FILE_D.path())) {\n+        Assert.assertEquals(\"the sequence number of data file should be 3\", 3, entry.sequenceNumber().longValue());\n+      }\n+    }\n+  }\n+\n+  @Test\n+  public void testSequenceNumberForRewrite() {\n+    table.newFastAppend().appendFile(FILE_A).commit();\n+    table.newFastAppend().appendFile(FILE_B).commit();\n+    Assert.assertEquals(2, table.currentSnapshot().sequenceNumber());\n+\n+    table.rewriteManifests().clusterBy(file -> \"\").commit();\n+    Assert.assertEquals(\"the sequence number of snapshot should be 3\",\n+        3, table.currentSnapshot().sequenceNumber());\n+\n+    ManifestFile newManifest = table.currentSnapshot().manifests().get(0);\n+    Assert.assertEquals(\"the sequence number of manifest should be 3\",\n+        3, newManifest.sequenceNumber());\n+\n+    for (ManifestEntry entry : ManifestFiles.read(newManifest,\n+        table.io(), table.ops().current().specsById()).entries()) {\n+      if (entry.file().path().equals(FILE_A.path())) {\n+        Assert.assertEquals(\"the sequence number of data file should be 1\", 1, entry.sequenceNumber().longValue());\n+      }\n+\n+      if (entry.file().path().equals(FILE_B.path())) {\n+        Assert.assertEquals(\"the sequence number of data file should be 1\", 2, entry.sequenceNumber().longValue());\n+      }\n+    }\n+  }\n+\n+  @Test\n+  public void testCommitConflict() {\n+    Transaction txn = table.newTransaction();\n+\n+    txn.newFastAppend().appendFile(FILE_A).apply();\n+    table.newFastAppend().appendFile(FILE_B).commit();\n+\n+    AssertHelpers.assertThrows(\"Should failed due to conflict\",\n+        IllegalStateException.class, \"last operation has not committed\", txn::commitTransaction);\n+\n+    Assert.assertEquals(1, TestTables.load(tableDir, \"test\").currentSnapshot().sequenceNumber());\n+\n+    AppendFiles appendFiles = table.newFastAppend().appendFile(FILE_C);\n+    appendFiles.apply();\n+    table.newFastAppend().appendFile(FILE_D).commit();\n+    appendFiles.commit();\n+\n+    ManifestFile manifestFile = table.currentSnapshot().manifests().stream()\n+        .filter(manifest -> manifest.snapshotId() == table.currentSnapshot().snapshotId())\n+        .collect(Collectors.toList()).get(0);\n+\n+    for (ManifestEntry entry : ManifestFiles.read(manifestFile, table.io(),\n+        table.ops().current().specsById()).entries()) {\n+      if (entry.file().path().equals(FILE_C.path())) {\n+        Assert.assertEquals(table.currentSnapshot().sequenceNumber(), entry.sequenceNumber().longValue());\n+      }\n+    }\n+  }\n+\n+  @Test\n+  public void testConcurrentCommit() throws InterruptedException {\n+    ExecutorService threadPool = Executors.newFixedThreadPool(4);\n+    List<Callable<Void>> tasks = new ArrayList<>();\n+\n+    Callable<Void> write1 = () -> {\n+      Transaction txn = table.newTransaction();\n+      txn.newFastAppend().appendFile(FILE_A).commit();\n+      txn.commitTransaction();\n+      return null;\n+    };\n+\n+    Callable<Void> write2 = () -> {\n+      Transaction txn = table.newTransaction();\n+      txn.newAppend().appendFile(FILE_B).commit();\n+      txn.commitTransaction();\n+      return null;\n+    };\n+\n+    Callable<Void> write3 = () -> {\n+      Transaction txn = table.newTransaction();\n+      txn.newDelete().deleteFile(FILE_A).commit();\n+      txn.commitTransaction();\n+      return null;\n+    };\n+\n+    Callable<Void> write4 = () -> {\n+      Transaction txn = table.newTransaction();\n+      txn.newOverwrite().addFile(FILE_D).commit();\n+      txn.commitTransaction();\n+      return null;\n+    };\n+\n+    tasks.add(write1);\n+    tasks.add(write2);\n+    tasks.add(write3);\n+    tasks.add(write4);\n+    threadPool.invokeAll(tasks);\n+    threadPool.shutdown();\n+\n+    Assert.assertEquals(4, TestTables.load(tableDir, \"test\").currentSnapshot().sequenceNumber());\n+  }\n+\n+  @Test\n+  public void testRollBack() {\n+    table.newFastAppend().appendFile(FILE_A).commit();\n+    long snapshotId = table.currentSnapshot().snapshotId();\n+    table.newFastAppend().appendFile(FILE_B).commit();\n+\n+    Assert.assertEquals(2, TestTables.load(tableDir, \"test\").currentSnapshot().sequenceNumber());\n+\n+    table.manageSnapshots().rollbackTo(snapshotId).commit();\n+\n+    Assert.assertEquals(1, TestTables.load(tableDir, \"test\").currentSnapshot().sequenceNumber());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "95cd1f02828a0dd2a9b27b244aecd91ff37d4460"}, "originalPosition": 214}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEwNTAwNTQ5", "url": "https://github.com/apache/iceberg/pull/974#pullrequestreview-410500549", "createdAt": "2020-05-12T23:54:09Z", "commit": {"oid": "95cd1f02828a0dd2a9b27b244aecd91ff37d4460"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQyMzo1NDowOVrOGUc6cg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQyMzo1NDowOVrOGUc6cg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDA5ODQxOA==", "bodyText": "This doesn't really test much because all of the transactions do not conflict and only contain one operation. I think there should be a few test cases (separate methods):\n\nA transaction with 1 operation\nA transaction with 2 operations\nA transaction with an operation that doesn't change the sequence number (like expiration)\nA transaction with 1 operation that must retry due to conflict", "url": "https://github.com/apache/iceberg/pull/974#discussion_r424098418", "createdAt": "2020-05-12T23:54:09Z", "author": {"login": "rdblue"}, "path": "core/src/test/java/org/apache/iceberg/TestSequenceNumberForV2Table.java", "diffHunk": "@@ -0,0 +1,299 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.concurrent.Callable;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.stream.Collectors;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+public class TestSequenceNumberForV2Table extends TableTestBase {\n+\n+  public TestSequenceNumberForV2Table() {\n+    super(2);\n+  }\n+\n+  @Test\n+  public void testSequenceNumberForFastAppend() throws IOException {\n+    table.newFastAppend().appendFile(FILE_A).commit();\n+    Assert.assertEquals(1, table.currentSnapshot().sequenceNumber());\n+    ManifestFile manifestFile = table.currentSnapshot().manifests().get(0);\n+    Assert.assertEquals(1, manifestFile.sequenceNumber());\n+\n+    table.newFastAppend().appendFile(FILE_B).commit();\n+    Assert.assertEquals(2, table.currentSnapshot().sequenceNumber());\n+    manifestFile = table.currentSnapshot().manifests().stream()\n+        .filter(manifest -> manifest.snapshotId() == table.currentSnapshot().snapshotId())\n+        .collect(Collectors.toList()).get(0);\n+    Assert.assertEquals(2, manifestFile.sequenceNumber());\n+\n+    manifestFile = writeManifest(FILE_C, FILE_D);\n+    table.newFastAppend().appendManifest(manifestFile).commit();\n+    Assert.assertEquals(3, table.currentSnapshot().sequenceNumber());\n+\n+    manifestFile = table.currentSnapshot().manifests().stream()\n+        .filter(manifest -> manifest.snapshotId() == table.currentSnapshot().snapshotId())\n+        .collect(Collectors.toList()).get(0);\n+    Assert.assertEquals(3, manifestFile.sequenceNumber());\n+\n+    for (ManifestEntry entry : ManifestFiles.read(manifestFile,\n+        table.io(), table.ops().current().specsById()).entries()) {\n+      if (entry.file().path().equals(FILE_C.path()) || entry.file().path().equals(FILE_D.path())) {\n+        Assert.assertEquals(3, entry.sequenceNumber().longValue());\n+      }\n+    }\n+  }\n+\n+  @Test\n+  public void testSequenceNumberForMergeAppend() throws IOException {\n+    table.updateProperties()\n+        .set(TableProperties.MANIFEST_MIN_MERGE_COUNT, \"1\")\n+        .commit();\n+    table.newAppend().appendFile(FILE_A).commit();\n+    Assert.assertEquals(1, table.currentSnapshot().sequenceNumber());\n+\n+    table.newAppend().appendFile(FILE_B).commit();\n+    Assert.assertEquals(2, table.currentSnapshot().sequenceNumber());\n+\n+    ManifestFile manifestFile = writeManifest(FILE_C, FILE_D);\n+    table.newAppend().appendManifest(manifestFile).commit();\n+    Assert.assertEquals(3, table.currentSnapshot().sequenceNumber());\n+\n+    manifestFile = table.currentSnapshot().manifests().get(0);\n+\n+    Assert.assertEquals(\"the sequence number of manifest should be 3\", 3, manifestFile.sequenceNumber());\n+\n+    for (ManifestEntry entry : ManifestFiles.read(manifestFile,\n+        table.io(), table.ops().current().specsById()).entries()) {\n+      if (entry.file().path().equals(FILE_A.path())) {\n+        Assert.assertEquals(\"the sequence number of data file should be 1\", 1, entry.sequenceNumber().longValue());\n+      }\n+\n+      if (entry.file().path().equals(FILE_B.path())) {\n+        Assert.assertEquals(\"the sequence number of data file should be 2\", 2, entry.sequenceNumber().longValue());\n+      }\n+\n+      if (entry.file().path().equals(FILE_C.path()) || entry.file().path().equals(FILE_D.path())) {\n+        Assert.assertEquals(\"the sequence number of data file should be 3\", 3, entry.sequenceNumber().longValue());\n+      }\n+    }\n+  }\n+\n+  @Test\n+  public void testSequenceNumberForRewrite() {\n+    table.newFastAppend().appendFile(FILE_A).commit();\n+    table.newFastAppend().appendFile(FILE_B).commit();\n+    Assert.assertEquals(2, table.currentSnapshot().sequenceNumber());\n+\n+    table.rewriteManifests().clusterBy(file -> \"\").commit();\n+    Assert.assertEquals(\"the sequence number of snapshot should be 3\",\n+        3, table.currentSnapshot().sequenceNumber());\n+\n+    ManifestFile newManifest = table.currentSnapshot().manifests().get(0);\n+    Assert.assertEquals(\"the sequence number of manifest should be 3\",\n+        3, newManifest.sequenceNumber());\n+\n+    for (ManifestEntry entry : ManifestFiles.read(newManifest,\n+        table.io(), table.ops().current().specsById()).entries()) {\n+      if (entry.file().path().equals(FILE_A.path())) {\n+        Assert.assertEquals(\"the sequence number of data file should be 1\", 1, entry.sequenceNumber().longValue());\n+      }\n+\n+      if (entry.file().path().equals(FILE_B.path())) {\n+        Assert.assertEquals(\"the sequence number of data file should be 1\", 2, entry.sequenceNumber().longValue());\n+      }\n+    }\n+  }\n+\n+  @Test\n+  public void testCommitConflict() {\n+    Transaction txn = table.newTransaction();\n+\n+    txn.newFastAppend().appendFile(FILE_A).apply();\n+    table.newFastAppend().appendFile(FILE_B).commit();\n+\n+    AssertHelpers.assertThrows(\"Should failed due to conflict\",\n+        IllegalStateException.class, \"last operation has not committed\", txn::commitTransaction);\n+\n+    Assert.assertEquals(1, TestTables.load(tableDir, \"test\").currentSnapshot().sequenceNumber());\n+\n+    AppendFiles appendFiles = table.newFastAppend().appendFile(FILE_C);\n+    appendFiles.apply();\n+    table.newFastAppend().appendFile(FILE_D).commit();\n+    appendFiles.commit();\n+\n+    ManifestFile manifestFile = table.currentSnapshot().manifests().stream()\n+        .filter(manifest -> manifest.snapshotId() == table.currentSnapshot().snapshotId())\n+        .collect(Collectors.toList()).get(0);\n+\n+    for (ManifestEntry entry : ManifestFiles.read(manifestFile, table.io(),\n+        table.ops().current().specsById()).entries()) {\n+      if (entry.file().path().equals(FILE_C.path())) {\n+        Assert.assertEquals(table.currentSnapshot().sequenceNumber(), entry.sequenceNumber().longValue());\n+      }\n+    }\n+  }\n+\n+  @Test\n+  public void testConcurrentCommit() throws InterruptedException {\n+    ExecutorService threadPool = Executors.newFixedThreadPool(4);\n+    List<Callable<Void>> tasks = new ArrayList<>();\n+\n+    Callable<Void> write1 = () -> {\n+      Transaction txn = table.newTransaction();\n+      txn.newFastAppend().appendFile(FILE_A).commit();\n+      txn.commitTransaction();\n+      return null;\n+    };\n+\n+    Callable<Void> write2 = () -> {\n+      Transaction txn = table.newTransaction();\n+      txn.newAppend().appendFile(FILE_B).commit();\n+      txn.commitTransaction();\n+      return null;\n+    };\n+\n+    Callable<Void> write3 = () -> {\n+      Transaction txn = table.newTransaction();\n+      txn.newDelete().deleteFile(FILE_A).commit();\n+      txn.commitTransaction();\n+      return null;\n+    };\n+\n+    Callable<Void> write4 = () -> {\n+      Transaction txn = table.newTransaction();\n+      txn.newOverwrite().addFile(FILE_D).commit();\n+      txn.commitTransaction();\n+      return null;\n+    };\n+\n+    tasks.add(write1);\n+    tasks.add(write2);\n+    tasks.add(write3);\n+    tasks.add(write4);\n+    threadPool.invokeAll(tasks);\n+    threadPool.shutdown();\n+\n+    Assert.assertEquals(4, TestTables.load(tableDir, \"test\").currentSnapshot().sequenceNumber());\n+  }\n+\n+  @Test\n+  public void testRollBack() {\n+    table.newFastAppend().appendFile(FILE_A).commit();\n+    long snapshotId = table.currentSnapshot().snapshotId();\n+    table.newFastAppend().appendFile(FILE_B).commit();\n+\n+    Assert.assertEquals(2, TestTables.load(tableDir, \"test\").currentSnapshot().sequenceNumber());\n+\n+    table.manageSnapshots().rollbackTo(snapshotId).commit();\n+\n+    Assert.assertEquals(1, TestTables.load(tableDir, \"test\").currentSnapshot().sequenceNumber());\n+  }\n+\n+  @Test\n+  public void testMultipleTxnOperations() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "95cd1f02828a0dd2a9b27b244aecd91ff37d4460"}, "originalPosition": 218}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEwNTAwNzc5", "url": "https://github.com/apache/iceberg/pull/974#pullrequestreview-410500779", "createdAt": "2020-05-12T23:54:57Z", "commit": {"oid": "95cd1f02828a0dd2a9b27b244aecd91ff37d4460"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQyMzo1NDo1OFrOGUc7Vg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQyMzo1NDo1OFrOGUc7Vg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDA5ODY0Ng==", "bodyText": "This should always save the current snapshot ID just after a commit and fetch that snapshot by ID instead of accessing the position in a list.", "url": "https://github.com/apache/iceberg/pull/974#discussion_r424098646", "createdAt": "2020-05-12T23:54:58Z", "author": {"login": "rdblue"}, "path": "core/src/test/java/org/apache/iceberg/TestSequenceNumberForV2Table.java", "diffHunk": "@@ -0,0 +1,299 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.concurrent.Callable;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.stream.Collectors;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+public class TestSequenceNumberForV2Table extends TableTestBase {\n+\n+  public TestSequenceNumberForV2Table() {\n+    super(2);\n+  }\n+\n+  @Test\n+  public void testSequenceNumberForFastAppend() throws IOException {\n+    table.newFastAppend().appendFile(FILE_A).commit();\n+    Assert.assertEquals(1, table.currentSnapshot().sequenceNumber());\n+    ManifestFile manifestFile = table.currentSnapshot().manifests().get(0);\n+    Assert.assertEquals(1, manifestFile.sequenceNumber());\n+\n+    table.newFastAppend().appendFile(FILE_B).commit();\n+    Assert.assertEquals(2, table.currentSnapshot().sequenceNumber());\n+    manifestFile = table.currentSnapshot().manifests().stream()\n+        .filter(manifest -> manifest.snapshotId() == table.currentSnapshot().snapshotId())\n+        .collect(Collectors.toList()).get(0);\n+    Assert.assertEquals(2, manifestFile.sequenceNumber());\n+\n+    manifestFile = writeManifest(FILE_C, FILE_D);\n+    table.newFastAppend().appendManifest(manifestFile).commit();\n+    Assert.assertEquals(3, table.currentSnapshot().sequenceNumber());\n+\n+    manifestFile = table.currentSnapshot().manifests().stream()\n+        .filter(manifest -> manifest.snapshotId() == table.currentSnapshot().snapshotId())\n+        .collect(Collectors.toList()).get(0);\n+    Assert.assertEquals(3, manifestFile.sequenceNumber());\n+\n+    for (ManifestEntry entry : ManifestFiles.read(manifestFile,\n+        table.io(), table.ops().current().specsById()).entries()) {\n+      if (entry.file().path().equals(FILE_C.path()) || entry.file().path().equals(FILE_D.path())) {\n+        Assert.assertEquals(3, entry.sequenceNumber().longValue());\n+      }\n+    }\n+  }\n+\n+  @Test\n+  public void testSequenceNumberForMergeAppend() throws IOException {\n+    table.updateProperties()\n+        .set(TableProperties.MANIFEST_MIN_MERGE_COUNT, \"1\")\n+        .commit();\n+    table.newAppend().appendFile(FILE_A).commit();\n+    Assert.assertEquals(1, table.currentSnapshot().sequenceNumber());\n+\n+    table.newAppend().appendFile(FILE_B).commit();\n+    Assert.assertEquals(2, table.currentSnapshot().sequenceNumber());\n+\n+    ManifestFile manifestFile = writeManifest(FILE_C, FILE_D);\n+    table.newAppend().appendManifest(manifestFile).commit();\n+    Assert.assertEquals(3, table.currentSnapshot().sequenceNumber());\n+\n+    manifestFile = table.currentSnapshot().manifests().get(0);\n+\n+    Assert.assertEquals(\"the sequence number of manifest should be 3\", 3, manifestFile.sequenceNumber());\n+\n+    for (ManifestEntry entry : ManifestFiles.read(manifestFile,\n+        table.io(), table.ops().current().specsById()).entries()) {\n+      if (entry.file().path().equals(FILE_A.path())) {\n+        Assert.assertEquals(\"the sequence number of data file should be 1\", 1, entry.sequenceNumber().longValue());\n+      }\n+\n+      if (entry.file().path().equals(FILE_B.path())) {\n+        Assert.assertEquals(\"the sequence number of data file should be 2\", 2, entry.sequenceNumber().longValue());\n+      }\n+\n+      if (entry.file().path().equals(FILE_C.path()) || entry.file().path().equals(FILE_D.path())) {\n+        Assert.assertEquals(\"the sequence number of data file should be 3\", 3, entry.sequenceNumber().longValue());\n+      }\n+    }\n+  }\n+\n+  @Test\n+  public void testSequenceNumberForRewrite() {\n+    table.newFastAppend().appendFile(FILE_A).commit();\n+    table.newFastAppend().appendFile(FILE_B).commit();\n+    Assert.assertEquals(2, table.currentSnapshot().sequenceNumber());\n+\n+    table.rewriteManifests().clusterBy(file -> \"\").commit();\n+    Assert.assertEquals(\"the sequence number of snapshot should be 3\",\n+        3, table.currentSnapshot().sequenceNumber());\n+\n+    ManifestFile newManifest = table.currentSnapshot().manifests().get(0);\n+    Assert.assertEquals(\"the sequence number of manifest should be 3\",\n+        3, newManifest.sequenceNumber());\n+\n+    for (ManifestEntry entry : ManifestFiles.read(newManifest,\n+        table.io(), table.ops().current().specsById()).entries()) {\n+      if (entry.file().path().equals(FILE_A.path())) {\n+        Assert.assertEquals(\"the sequence number of data file should be 1\", 1, entry.sequenceNumber().longValue());\n+      }\n+\n+      if (entry.file().path().equals(FILE_B.path())) {\n+        Assert.assertEquals(\"the sequence number of data file should be 1\", 2, entry.sequenceNumber().longValue());\n+      }\n+    }\n+  }\n+\n+  @Test\n+  public void testCommitConflict() {\n+    Transaction txn = table.newTransaction();\n+\n+    txn.newFastAppend().appendFile(FILE_A).apply();\n+    table.newFastAppend().appendFile(FILE_B).commit();\n+\n+    AssertHelpers.assertThrows(\"Should failed due to conflict\",\n+        IllegalStateException.class, \"last operation has not committed\", txn::commitTransaction);\n+\n+    Assert.assertEquals(1, TestTables.load(tableDir, \"test\").currentSnapshot().sequenceNumber());\n+\n+    AppendFiles appendFiles = table.newFastAppend().appendFile(FILE_C);\n+    appendFiles.apply();\n+    table.newFastAppend().appendFile(FILE_D).commit();\n+    appendFiles.commit();\n+\n+    ManifestFile manifestFile = table.currentSnapshot().manifests().stream()\n+        .filter(manifest -> manifest.snapshotId() == table.currentSnapshot().snapshotId())\n+        .collect(Collectors.toList()).get(0);\n+\n+    for (ManifestEntry entry : ManifestFiles.read(manifestFile, table.io(),\n+        table.ops().current().specsById()).entries()) {\n+      if (entry.file().path().equals(FILE_C.path())) {\n+        Assert.assertEquals(table.currentSnapshot().sequenceNumber(), entry.sequenceNumber().longValue());\n+      }\n+    }\n+  }\n+\n+  @Test\n+  public void testConcurrentCommit() throws InterruptedException {\n+    ExecutorService threadPool = Executors.newFixedThreadPool(4);\n+    List<Callable<Void>> tasks = new ArrayList<>();\n+\n+    Callable<Void> write1 = () -> {\n+      Transaction txn = table.newTransaction();\n+      txn.newFastAppend().appendFile(FILE_A).commit();\n+      txn.commitTransaction();\n+      return null;\n+    };\n+\n+    Callable<Void> write2 = () -> {\n+      Transaction txn = table.newTransaction();\n+      txn.newAppend().appendFile(FILE_B).commit();\n+      txn.commitTransaction();\n+      return null;\n+    };\n+\n+    Callable<Void> write3 = () -> {\n+      Transaction txn = table.newTransaction();\n+      txn.newDelete().deleteFile(FILE_A).commit();\n+      txn.commitTransaction();\n+      return null;\n+    };\n+\n+    Callable<Void> write4 = () -> {\n+      Transaction txn = table.newTransaction();\n+      txn.newOverwrite().addFile(FILE_D).commit();\n+      txn.commitTransaction();\n+      return null;\n+    };\n+\n+    tasks.add(write1);\n+    tasks.add(write2);\n+    tasks.add(write3);\n+    tasks.add(write4);\n+    threadPool.invokeAll(tasks);\n+    threadPool.shutdown();\n+\n+    Assert.assertEquals(4, TestTables.load(tableDir, \"test\").currentSnapshot().sequenceNumber());\n+  }\n+\n+  @Test\n+  public void testRollBack() {\n+    table.newFastAppend().appendFile(FILE_A).commit();\n+    long snapshotId = table.currentSnapshot().snapshotId();\n+    table.newFastAppend().appendFile(FILE_B).commit();\n+\n+    Assert.assertEquals(2, TestTables.load(tableDir, \"test\").currentSnapshot().sequenceNumber());\n+\n+    table.manageSnapshots().rollbackTo(snapshotId).commit();\n+\n+    Assert.assertEquals(1, TestTables.load(tableDir, \"test\").currentSnapshot().sequenceNumber());\n+  }\n+\n+  @Test\n+  public void testMultipleTxnOperations() {\n+    Snapshot snapshot;\n+    Transaction txn = table.newTransaction();\n+    txn.newOverwrite().addFile(FILE_A).commit();\n+    txn.commitTransaction();\n+    Assert.assertEquals(1, TestTables.load(tableDir, \"test\").currentSnapshot().sequenceNumber());\n+\n+    txn = table.newTransaction();\n+    Set<DataFile> toAddFiles = new HashSet<>();\n+    Set<DataFile> toDeleteFiles = new HashSet<>();\n+    toAddFiles.add(FILE_B);\n+    toDeleteFiles.add(FILE_A);\n+    txn.newRewrite().rewriteFiles(toDeleteFiles, toAddFiles).commit();\n+    txn.commitTransaction();\n+    Assert.assertEquals(2, TestTables.load(tableDir, \"test\").currentSnapshot().sequenceNumber());\n+\n+    txn = table.newTransaction();\n+    txn.newReplacePartitions().addFile(FILE_C).commit();\n+    txn.commitTransaction();\n+    Assert.assertEquals(3, TestTables.load(tableDir, \"test\").currentSnapshot().sequenceNumber());\n+\n+    txn = table.newTransaction();\n+    txn.newDelete().deleteFile(FILE_C).commit();\n+    txn.commitTransaction();\n+\n+    Assert.assertEquals(4, TestTables.load(tableDir, \"test\").currentSnapshot().sequenceNumber());\n+\n+    txn = table.newTransaction();\n+    txn.newAppend().appendFile(FILE_C).commit();\n+    txn.commitTransaction();\n+    Assert.assertEquals(5, TestTables.load(tableDir, \"test\").currentSnapshot().sequenceNumber());\n+\n+    snapshot = table.currentSnapshot();\n+    txn = table.newTransaction();\n+    txn.newOverwrite().addFile(FILE_D).deleteFile(FILE_C).commit();\n+    txn.commitTransaction();\n+    Assert.assertEquals(6, TestTables.load(tableDir, \"test\").currentSnapshot().sequenceNumber());\n+\n+    txn = table.newTransaction();\n+    txn.expireSnapshots().expireOlderThan(snapshot.timestampMillis()).commit();\n+    txn.commitTransaction();\n+    Assert.assertEquals(6, TestTables.load(tableDir, \"test\").currentSnapshot().sequenceNumber());\n+  }\n+\n+  @Test\n+  public void testSequenceNumberForCherryPicking() {\n+    table.newAppend()\n+        .appendFile(FILE_A)\n+        .commit();\n+\n+    // WAP commit\n+    table.newAppend()\n+        .appendFile(FILE_B)\n+        .set(\"wap.id\", \"123456789\")\n+        .stageOnly()\n+        .commit();\n+\n+    Assert.assertEquals(\"the snapshot sequence number should be 1\", 1,\n+        table.currentSnapshot().sequenceNumber());\n+\n+    // pick the snapshot that's staged but not committed\n+    Snapshot wapSnapshot = readMetadata().snapshots().get(1);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "95cd1f02828a0dd2a9b27b244aecd91ff37d4460"}, "originalPosition": 279}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEwNTAwOTI2", "url": "https://github.com/apache/iceberg/pull/974#pullrequestreview-410500926", "createdAt": "2020-05-12T23:55:25Z", "commit": {"oid": "95cd1f02828a0dd2a9b27b244aecd91ff37d4460"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQyMzo1NToyNVrOGUc75g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQyMzo1NToyNVrOGUc75g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDA5ODc5MA==", "bodyText": "What is the purpose of a WAP ID? The commit is staged, so there is no reason to mix in WAP logic.", "url": "https://github.com/apache/iceberg/pull/974#discussion_r424098790", "createdAt": "2020-05-12T23:55:25Z", "author": {"login": "rdblue"}, "path": "core/src/test/java/org/apache/iceberg/TestSequenceNumberForV2Table.java", "diffHunk": "@@ -0,0 +1,299 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.concurrent.Callable;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.stream.Collectors;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+public class TestSequenceNumberForV2Table extends TableTestBase {\n+\n+  public TestSequenceNumberForV2Table() {\n+    super(2);\n+  }\n+\n+  @Test\n+  public void testSequenceNumberForFastAppend() throws IOException {\n+    table.newFastAppend().appendFile(FILE_A).commit();\n+    Assert.assertEquals(1, table.currentSnapshot().sequenceNumber());\n+    ManifestFile manifestFile = table.currentSnapshot().manifests().get(0);\n+    Assert.assertEquals(1, manifestFile.sequenceNumber());\n+\n+    table.newFastAppend().appendFile(FILE_B).commit();\n+    Assert.assertEquals(2, table.currentSnapshot().sequenceNumber());\n+    manifestFile = table.currentSnapshot().manifests().stream()\n+        .filter(manifest -> manifest.snapshotId() == table.currentSnapshot().snapshotId())\n+        .collect(Collectors.toList()).get(0);\n+    Assert.assertEquals(2, manifestFile.sequenceNumber());\n+\n+    manifestFile = writeManifest(FILE_C, FILE_D);\n+    table.newFastAppend().appendManifest(manifestFile).commit();\n+    Assert.assertEquals(3, table.currentSnapshot().sequenceNumber());\n+\n+    manifestFile = table.currentSnapshot().manifests().stream()\n+        .filter(manifest -> manifest.snapshotId() == table.currentSnapshot().snapshotId())\n+        .collect(Collectors.toList()).get(0);\n+    Assert.assertEquals(3, manifestFile.sequenceNumber());\n+\n+    for (ManifestEntry entry : ManifestFiles.read(manifestFile,\n+        table.io(), table.ops().current().specsById()).entries()) {\n+      if (entry.file().path().equals(FILE_C.path()) || entry.file().path().equals(FILE_D.path())) {\n+        Assert.assertEquals(3, entry.sequenceNumber().longValue());\n+      }\n+    }\n+  }\n+\n+  @Test\n+  public void testSequenceNumberForMergeAppend() throws IOException {\n+    table.updateProperties()\n+        .set(TableProperties.MANIFEST_MIN_MERGE_COUNT, \"1\")\n+        .commit();\n+    table.newAppend().appendFile(FILE_A).commit();\n+    Assert.assertEquals(1, table.currentSnapshot().sequenceNumber());\n+\n+    table.newAppend().appendFile(FILE_B).commit();\n+    Assert.assertEquals(2, table.currentSnapshot().sequenceNumber());\n+\n+    ManifestFile manifestFile = writeManifest(FILE_C, FILE_D);\n+    table.newAppend().appendManifest(manifestFile).commit();\n+    Assert.assertEquals(3, table.currentSnapshot().sequenceNumber());\n+\n+    manifestFile = table.currentSnapshot().manifests().get(0);\n+\n+    Assert.assertEquals(\"the sequence number of manifest should be 3\", 3, manifestFile.sequenceNumber());\n+\n+    for (ManifestEntry entry : ManifestFiles.read(manifestFile,\n+        table.io(), table.ops().current().specsById()).entries()) {\n+      if (entry.file().path().equals(FILE_A.path())) {\n+        Assert.assertEquals(\"the sequence number of data file should be 1\", 1, entry.sequenceNumber().longValue());\n+      }\n+\n+      if (entry.file().path().equals(FILE_B.path())) {\n+        Assert.assertEquals(\"the sequence number of data file should be 2\", 2, entry.sequenceNumber().longValue());\n+      }\n+\n+      if (entry.file().path().equals(FILE_C.path()) || entry.file().path().equals(FILE_D.path())) {\n+        Assert.assertEquals(\"the sequence number of data file should be 3\", 3, entry.sequenceNumber().longValue());\n+      }\n+    }\n+  }\n+\n+  @Test\n+  public void testSequenceNumberForRewrite() {\n+    table.newFastAppend().appendFile(FILE_A).commit();\n+    table.newFastAppend().appendFile(FILE_B).commit();\n+    Assert.assertEquals(2, table.currentSnapshot().sequenceNumber());\n+\n+    table.rewriteManifests().clusterBy(file -> \"\").commit();\n+    Assert.assertEquals(\"the sequence number of snapshot should be 3\",\n+        3, table.currentSnapshot().sequenceNumber());\n+\n+    ManifestFile newManifest = table.currentSnapshot().manifests().get(0);\n+    Assert.assertEquals(\"the sequence number of manifest should be 3\",\n+        3, newManifest.sequenceNumber());\n+\n+    for (ManifestEntry entry : ManifestFiles.read(newManifest,\n+        table.io(), table.ops().current().specsById()).entries()) {\n+      if (entry.file().path().equals(FILE_A.path())) {\n+        Assert.assertEquals(\"the sequence number of data file should be 1\", 1, entry.sequenceNumber().longValue());\n+      }\n+\n+      if (entry.file().path().equals(FILE_B.path())) {\n+        Assert.assertEquals(\"the sequence number of data file should be 1\", 2, entry.sequenceNumber().longValue());\n+      }\n+    }\n+  }\n+\n+  @Test\n+  public void testCommitConflict() {\n+    Transaction txn = table.newTransaction();\n+\n+    txn.newFastAppend().appendFile(FILE_A).apply();\n+    table.newFastAppend().appendFile(FILE_B).commit();\n+\n+    AssertHelpers.assertThrows(\"Should failed due to conflict\",\n+        IllegalStateException.class, \"last operation has not committed\", txn::commitTransaction);\n+\n+    Assert.assertEquals(1, TestTables.load(tableDir, \"test\").currentSnapshot().sequenceNumber());\n+\n+    AppendFiles appendFiles = table.newFastAppend().appendFile(FILE_C);\n+    appendFiles.apply();\n+    table.newFastAppend().appendFile(FILE_D).commit();\n+    appendFiles.commit();\n+\n+    ManifestFile manifestFile = table.currentSnapshot().manifests().stream()\n+        .filter(manifest -> manifest.snapshotId() == table.currentSnapshot().snapshotId())\n+        .collect(Collectors.toList()).get(0);\n+\n+    for (ManifestEntry entry : ManifestFiles.read(manifestFile, table.io(),\n+        table.ops().current().specsById()).entries()) {\n+      if (entry.file().path().equals(FILE_C.path())) {\n+        Assert.assertEquals(table.currentSnapshot().sequenceNumber(), entry.sequenceNumber().longValue());\n+      }\n+    }\n+  }\n+\n+  @Test\n+  public void testConcurrentCommit() throws InterruptedException {\n+    ExecutorService threadPool = Executors.newFixedThreadPool(4);\n+    List<Callable<Void>> tasks = new ArrayList<>();\n+\n+    Callable<Void> write1 = () -> {\n+      Transaction txn = table.newTransaction();\n+      txn.newFastAppend().appendFile(FILE_A).commit();\n+      txn.commitTransaction();\n+      return null;\n+    };\n+\n+    Callable<Void> write2 = () -> {\n+      Transaction txn = table.newTransaction();\n+      txn.newAppend().appendFile(FILE_B).commit();\n+      txn.commitTransaction();\n+      return null;\n+    };\n+\n+    Callable<Void> write3 = () -> {\n+      Transaction txn = table.newTransaction();\n+      txn.newDelete().deleteFile(FILE_A).commit();\n+      txn.commitTransaction();\n+      return null;\n+    };\n+\n+    Callable<Void> write4 = () -> {\n+      Transaction txn = table.newTransaction();\n+      txn.newOverwrite().addFile(FILE_D).commit();\n+      txn.commitTransaction();\n+      return null;\n+    };\n+\n+    tasks.add(write1);\n+    tasks.add(write2);\n+    tasks.add(write3);\n+    tasks.add(write4);\n+    threadPool.invokeAll(tasks);\n+    threadPool.shutdown();\n+\n+    Assert.assertEquals(4, TestTables.load(tableDir, \"test\").currentSnapshot().sequenceNumber());\n+  }\n+\n+  @Test\n+  public void testRollBack() {\n+    table.newFastAppend().appendFile(FILE_A).commit();\n+    long snapshotId = table.currentSnapshot().snapshotId();\n+    table.newFastAppend().appendFile(FILE_B).commit();\n+\n+    Assert.assertEquals(2, TestTables.load(tableDir, \"test\").currentSnapshot().sequenceNumber());\n+\n+    table.manageSnapshots().rollbackTo(snapshotId).commit();\n+\n+    Assert.assertEquals(1, TestTables.load(tableDir, \"test\").currentSnapshot().sequenceNumber());\n+  }\n+\n+  @Test\n+  public void testMultipleTxnOperations() {\n+    Snapshot snapshot;\n+    Transaction txn = table.newTransaction();\n+    txn.newOverwrite().addFile(FILE_A).commit();\n+    txn.commitTransaction();\n+    Assert.assertEquals(1, TestTables.load(tableDir, \"test\").currentSnapshot().sequenceNumber());\n+\n+    txn = table.newTransaction();\n+    Set<DataFile> toAddFiles = new HashSet<>();\n+    Set<DataFile> toDeleteFiles = new HashSet<>();\n+    toAddFiles.add(FILE_B);\n+    toDeleteFiles.add(FILE_A);\n+    txn.newRewrite().rewriteFiles(toDeleteFiles, toAddFiles).commit();\n+    txn.commitTransaction();\n+    Assert.assertEquals(2, TestTables.load(tableDir, \"test\").currentSnapshot().sequenceNumber());\n+\n+    txn = table.newTransaction();\n+    txn.newReplacePartitions().addFile(FILE_C).commit();\n+    txn.commitTransaction();\n+    Assert.assertEquals(3, TestTables.load(tableDir, \"test\").currentSnapshot().sequenceNumber());\n+\n+    txn = table.newTransaction();\n+    txn.newDelete().deleteFile(FILE_C).commit();\n+    txn.commitTransaction();\n+\n+    Assert.assertEquals(4, TestTables.load(tableDir, \"test\").currentSnapshot().sequenceNumber());\n+\n+    txn = table.newTransaction();\n+    txn.newAppend().appendFile(FILE_C).commit();\n+    txn.commitTransaction();\n+    Assert.assertEquals(5, TestTables.load(tableDir, \"test\").currentSnapshot().sequenceNumber());\n+\n+    snapshot = table.currentSnapshot();\n+    txn = table.newTransaction();\n+    txn.newOverwrite().addFile(FILE_D).deleteFile(FILE_C).commit();\n+    txn.commitTransaction();\n+    Assert.assertEquals(6, TestTables.load(tableDir, \"test\").currentSnapshot().sequenceNumber());\n+\n+    txn = table.newTransaction();\n+    txn.expireSnapshots().expireOlderThan(snapshot.timestampMillis()).commit();\n+    txn.commitTransaction();\n+    Assert.assertEquals(6, TestTables.load(tableDir, \"test\").currentSnapshot().sequenceNumber());\n+  }\n+\n+  @Test\n+  public void testSequenceNumberForCherryPicking() {\n+    table.newAppend()\n+        .appendFile(FILE_A)\n+        .commit();\n+\n+    // WAP commit\n+    table.newAppend()\n+        .appendFile(FILE_B)\n+        .set(\"wap.id\", \"123456789\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "95cd1f02828a0dd2a9b27b244aecd91ff37d4460"}, "originalPosition": 271}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEwNTAxMDMy", "url": "https://github.com/apache/iceberg/pull/974#pullrequestreview-410501032", "createdAt": "2020-05-12T23:55:50Z", "commit": {"oid": "95cd1f02828a0dd2a9b27b244aecd91ff37d4460"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQyMzo1NTo1MFrOGUc8VQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQyMzo1NTo1MFrOGUc8VQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDA5ODkwMQ==", "bodyText": "No need for WAP, just use stagedSnapshot.", "url": "https://github.com/apache/iceberg/pull/974#discussion_r424098901", "createdAt": "2020-05-12T23:55:50Z", "author": {"login": "rdblue"}, "path": "core/src/test/java/org/apache/iceberg/TestSequenceNumberForV2Table.java", "diffHunk": "@@ -0,0 +1,299 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.concurrent.Callable;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.stream.Collectors;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+public class TestSequenceNumberForV2Table extends TableTestBase {\n+\n+  public TestSequenceNumberForV2Table() {\n+    super(2);\n+  }\n+\n+  @Test\n+  public void testSequenceNumberForFastAppend() throws IOException {\n+    table.newFastAppend().appendFile(FILE_A).commit();\n+    Assert.assertEquals(1, table.currentSnapshot().sequenceNumber());\n+    ManifestFile manifestFile = table.currentSnapshot().manifests().get(0);\n+    Assert.assertEquals(1, manifestFile.sequenceNumber());\n+\n+    table.newFastAppend().appendFile(FILE_B).commit();\n+    Assert.assertEquals(2, table.currentSnapshot().sequenceNumber());\n+    manifestFile = table.currentSnapshot().manifests().stream()\n+        .filter(manifest -> manifest.snapshotId() == table.currentSnapshot().snapshotId())\n+        .collect(Collectors.toList()).get(0);\n+    Assert.assertEquals(2, manifestFile.sequenceNumber());\n+\n+    manifestFile = writeManifest(FILE_C, FILE_D);\n+    table.newFastAppend().appendManifest(manifestFile).commit();\n+    Assert.assertEquals(3, table.currentSnapshot().sequenceNumber());\n+\n+    manifestFile = table.currentSnapshot().manifests().stream()\n+        .filter(manifest -> manifest.snapshotId() == table.currentSnapshot().snapshotId())\n+        .collect(Collectors.toList()).get(0);\n+    Assert.assertEquals(3, manifestFile.sequenceNumber());\n+\n+    for (ManifestEntry entry : ManifestFiles.read(manifestFile,\n+        table.io(), table.ops().current().specsById()).entries()) {\n+      if (entry.file().path().equals(FILE_C.path()) || entry.file().path().equals(FILE_D.path())) {\n+        Assert.assertEquals(3, entry.sequenceNumber().longValue());\n+      }\n+    }\n+  }\n+\n+  @Test\n+  public void testSequenceNumberForMergeAppend() throws IOException {\n+    table.updateProperties()\n+        .set(TableProperties.MANIFEST_MIN_MERGE_COUNT, \"1\")\n+        .commit();\n+    table.newAppend().appendFile(FILE_A).commit();\n+    Assert.assertEquals(1, table.currentSnapshot().sequenceNumber());\n+\n+    table.newAppend().appendFile(FILE_B).commit();\n+    Assert.assertEquals(2, table.currentSnapshot().sequenceNumber());\n+\n+    ManifestFile manifestFile = writeManifest(FILE_C, FILE_D);\n+    table.newAppend().appendManifest(manifestFile).commit();\n+    Assert.assertEquals(3, table.currentSnapshot().sequenceNumber());\n+\n+    manifestFile = table.currentSnapshot().manifests().get(0);\n+\n+    Assert.assertEquals(\"the sequence number of manifest should be 3\", 3, manifestFile.sequenceNumber());\n+\n+    for (ManifestEntry entry : ManifestFiles.read(manifestFile,\n+        table.io(), table.ops().current().specsById()).entries()) {\n+      if (entry.file().path().equals(FILE_A.path())) {\n+        Assert.assertEquals(\"the sequence number of data file should be 1\", 1, entry.sequenceNumber().longValue());\n+      }\n+\n+      if (entry.file().path().equals(FILE_B.path())) {\n+        Assert.assertEquals(\"the sequence number of data file should be 2\", 2, entry.sequenceNumber().longValue());\n+      }\n+\n+      if (entry.file().path().equals(FILE_C.path()) || entry.file().path().equals(FILE_D.path())) {\n+        Assert.assertEquals(\"the sequence number of data file should be 3\", 3, entry.sequenceNumber().longValue());\n+      }\n+    }\n+  }\n+\n+  @Test\n+  public void testSequenceNumberForRewrite() {\n+    table.newFastAppend().appendFile(FILE_A).commit();\n+    table.newFastAppend().appendFile(FILE_B).commit();\n+    Assert.assertEquals(2, table.currentSnapshot().sequenceNumber());\n+\n+    table.rewriteManifests().clusterBy(file -> \"\").commit();\n+    Assert.assertEquals(\"the sequence number of snapshot should be 3\",\n+        3, table.currentSnapshot().sequenceNumber());\n+\n+    ManifestFile newManifest = table.currentSnapshot().manifests().get(0);\n+    Assert.assertEquals(\"the sequence number of manifest should be 3\",\n+        3, newManifest.sequenceNumber());\n+\n+    for (ManifestEntry entry : ManifestFiles.read(newManifest,\n+        table.io(), table.ops().current().specsById()).entries()) {\n+      if (entry.file().path().equals(FILE_A.path())) {\n+        Assert.assertEquals(\"the sequence number of data file should be 1\", 1, entry.sequenceNumber().longValue());\n+      }\n+\n+      if (entry.file().path().equals(FILE_B.path())) {\n+        Assert.assertEquals(\"the sequence number of data file should be 1\", 2, entry.sequenceNumber().longValue());\n+      }\n+    }\n+  }\n+\n+  @Test\n+  public void testCommitConflict() {\n+    Transaction txn = table.newTransaction();\n+\n+    txn.newFastAppend().appendFile(FILE_A).apply();\n+    table.newFastAppend().appendFile(FILE_B).commit();\n+\n+    AssertHelpers.assertThrows(\"Should failed due to conflict\",\n+        IllegalStateException.class, \"last operation has not committed\", txn::commitTransaction);\n+\n+    Assert.assertEquals(1, TestTables.load(tableDir, \"test\").currentSnapshot().sequenceNumber());\n+\n+    AppendFiles appendFiles = table.newFastAppend().appendFile(FILE_C);\n+    appendFiles.apply();\n+    table.newFastAppend().appendFile(FILE_D).commit();\n+    appendFiles.commit();\n+\n+    ManifestFile manifestFile = table.currentSnapshot().manifests().stream()\n+        .filter(manifest -> manifest.snapshotId() == table.currentSnapshot().snapshotId())\n+        .collect(Collectors.toList()).get(0);\n+\n+    for (ManifestEntry entry : ManifestFiles.read(manifestFile, table.io(),\n+        table.ops().current().specsById()).entries()) {\n+      if (entry.file().path().equals(FILE_C.path())) {\n+        Assert.assertEquals(table.currentSnapshot().sequenceNumber(), entry.sequenceNumber().longValue());\n+      }\n+    }\n+  }\n+\n+  @Test\n+  public void testConcurrentCommit() throws InterruptedException {\n+    ExecutorService threadPool = Executors.newFixedThreadPool(4);\n+    List<Callable<Void>> tasks = new ArrayList<>();\n+\n+    Callable<Void> write1 = () -> {\n+      Transaction txn = table.newTransaction();\n+      txn.newFastAppend().appendFile(FILE_A).commit();\n+      txn.commitTransaction();\n+      return null;\n+    };\n+\n+    Callable<Void> write2 = () -> {\n+      Transaction txn = table.newTransaction();\n+      txn.newAppend().appendFile(FILE_B).commit();\n+      txn.commitTransaction();\n+      return null;\n+    };\n+\n+    Callable<Void> write3 = () -> {\n+      Transaction txn = table.newTransaction();\n+      txn.newDelete().deleteFile(FILE_A).commit();\n+      txn.commitTransaction();\n+      return null;\n+    };\n+\n+    Callable<Void> write4 = () -> {\n+      Transaction txn = table.newTransaction();\n+      txn.newOverwrite().addFile(FILE_D).commit();\n+      txn.commitTransaction();\n+      return null;\n+    };\n+\n+    tasks.add(write1);\n+    tasks.add(write2);\n+    tasks.add(write3);\n+    tasks.add(write4);\n+    threadPool.invokeAll(tasks);\n+    threadPool.shutdown();\n+\n+    Assert.assertEquals(4, TestTables.load(tableDir, \"test\").currentSnapshot().sequenceNumber());\n+  }\n+\n+  @Test\n+  public void testRollBack() {\n+    table.newFastAppend().appendFile(FILE_A).commit();\n+    long snapshotId = table.currentSnapshot().snapshotId();\n+    table.newFastAppend().appendFile(FILE_B).commit();\n+\n+    Assert.assertEquals(2, TestTables.load(tableDir, \"test\").currentSnapshot().sequenceNumber());\n+\n+    table.manageSnapshots().rollbackTo(snapshotId).commit();\n+\n+    Assert.assertEquals(1, TestTables.load(tableDir, \"test\").currentSnapshot().sequenceNumber());\n+  }\n+\n+  @Test\n+  public void testMultipleTxnOperations() {\n+    Snapshot snapshot;\n+    Transaction txn = table.newTransaction();\n+    txn.newOverwrite().addFile(FILE_A).commit();\n+    txn.commitTransaction();\n+    Assert.assertEquals(1, TestTables.load(tableDir, \"test\").currentSnapshot().sequenceNumber());\n+\n+    txn = table.newTransaction();\n+    Set<DataFile> toAddFiles = new HashSet<>();\n+    Set<DataFile> toDeleteFiles = new HashSet<>();\n+    toAddFiles.add(FILE_B);\n+    toDeleteFiles.add(FILE_A);\n+    txn.newRewrite().rewriteFiles(toDeleteFiles, toAddFiles).commit();\n+    txn.commitTransaction();\n+    Assert.assertEquals(2, TestTables.load(tableDir, \"test\").currentSnapshot().sequenceNumber());\n+\n+    txn = table.newTransaction();\n+    txn.newReplacePartitions().addFile(FILE_C).commit();\n+    txn.commitTransaction();\n+    Assert.assertEquals(3, TestTables.load(tableDir, \"test\").currentSnapshot().sequenceNumber());\n+\n+    txn = table.newTransaction();\n+    txn.newDelete().deleteFile(FILE_C).commit();\n+    txn.commitTransaction();\n+\n+    Assert.assertEquals(4, TestTables.load(tableDir, \"test\").currentSnapshot().sequenceNumber());\n+\n+    txn = table.newTransaction();\n+    txn.newAppend().appendFile(FILE_C).commit();\n+    txn.commitTransaction();\n+    Assert.assertEquals(5, TestTables.load(tableDir, \"test\").currentSnapshot().sequenceNumber());\n+\n+    snapshot = table.currentSnapshot();\n+    txn = table.newTransaction();\n+    txn.newOverwrite().addFile(FILE_D).deleteFile(FILE_C).commit();\n+    txn.commitTransaction();\n+    Assert.assertEquals(6, TestTables.load(tableDir, \"test\").currentSnapshot().sequenceNumber());\n+\n+    txn = table.newTransaction();\n+    txn.expireSnapshots().expireOlderThan(snapshot.timestampMillis()).commit();\n+    txn.commitTransaction();\n+    Assert.assertEquals(6, TestTables.load(tableDir, \"test\").currentSnapshot().sequenceNumber());\n+  }\n+\n+  @Test\n+  public void testSequenceNumberForCherryPicking() {\n+    table.newAppend()\n+        .appendFile(FILE_A)\n+        .commit();\n+\n+    // WAP commit\n+    table.newAppend()\n+        .appendFile(FILE_B)\n+        .set(\"wap.id\", \"123456789\")\n+        .stageOnly()\n+        .commit();\n+\n+    Assert.assertEquals(\"the snapshot sequence number should be 1\", 1,\n+        table.currentSnapshot().sequenceNumber());\n+\n+    // pick the snapshot that's staged but not committed\n+    Snapshot wapSnapshot = readMetadata().snapshots().get(1);\n+\n+    Assert.assertEquals(\"the snapshot sequence number should be 2\", 2,\n+        wapSnapshot.sequenceNumber());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "95cd1f02828a0dd2a9b27b244aecd91ff37d4460"}, "originalPosition": 282}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEwNTAxMzE4", "url": "https://github.com/apache/iceberg/pull/974#pullrequestreview-410501318", "createdAt": "2020-05-12T23:56:49Z", "commit": {"oid": "95cd1f02828a0dd2a9b27b244aecd91ff37d4460"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQyMzo1Njo1MFrOGUc9XQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQyMzo1Njo1MFrOGUc9XQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDA5OTE2NQ==", "bodyText": "In addition to cherry picking, it would be great to have a test case for fast-forward, which would not change the sequence number.", "url": "https://github.com/apache/iceberg/pull/974#discussion_r424099165", "createdAt": "2020-05-12T23:56:50Z", "author": {"login": "rdblue"}, "path": "core/src/test/java/org/apache/iceberg/TestSequenceNumberForV2Table.java", "diffHunk": "@@ -0,0 +1,299 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.concurrent.Callable;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.stream.Collectors;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+public class TestSequenceNumberForV2Table extends TableTestBase {\n+\n+  public TestSequenceNumberForV2Table() {\n+    super(2);\n+  }\n+\n+  @Test\n+  public void testSequenceNumberForFastAppend() throws IOException {\n+    table.newFastAppend().appendFile(FILE_A).commit();\n+    Assert.assertEquals(1, table.currentSnapshot().sequenceNumber());\n+    ManifestFile manifestFile = table.currentSnapshot().manifests().get(0);\n+    Assert.assertEquals(1, manifestFile.sequenceNumber());\n+\n+    table.newFastAppend().appendFile(FILE_B).commit();\n+    Assert.assertEquals(2, table.currentSnapshot().sequenceNumber());\n+    manifestFile = table.currentSnapshot().manifests().stream()\n+        .filter(manifest -> manifest.snapshotId() == table.currentSnapshot().snapshotId())\n+        .collect(Collectors.toList()).get(0);\n+    Assert.assertEquals(2, manifestFile.sequenceNumber());\n+\n+    manifestFile = writeManifest(FILE_C, FILE_D);\n+    table.newFastAppend().appendManifest(manifestFile).commit();\n+    Assert.assertEquals(3, table.currentSnapshot().sequenceNumber());\n+\n+    manifestFile = table.currentSnapshot().manifests().stream()\n+        .filter(manifest -> manifest.snapshotId() == table.currentSnapshot().snapshotId())\n+        .collect(Collectors.toList()).get(0);\n+    Assert.assertEquals(3, manifestFile.sequenceNumber());\n+\n+    for (ManifestEntry entry : ManifestFiles.read(manifestFile,\n+        table.io(), table.ops().current().specsById()).entries()) {\n+      if (entry.file().path().equals(FILE_C.path()) || entry.file().path().equals(FILE_D.path())) {\n+        Assert.assertEquals(3, entry.sequenceNumber().longValue());\n+      }\n+    }\n+  }\n+\n+  @Test\n+  public void testSequenceNumberForMergeAppend() throws IOException {\n+    table.updateProperties()\n+        .set(TableProperties.MANIFEST_MIN_MERGE_COUNT, \"1\")\n+        .commit();\n+    table.newAppend().appendFile(FILE_A).commit();\n+    Assert.assertEquals(1, table.currentSnapshot().sequenceNumber());\n+\n+    table.newAppend().appendFile(FILE_B).commit();\n+    Assert.assertEquals(2, table.currentSnapshot().sequenceNumber());\n+\n+    ManifestFile manifestFile = writeManifest(FILE_C, FILE_D);\n+    table.newAppend().appendManifest(manifestFile).commit();\n+    Assert.assertEquals(3, table.currentSnapshot().sequenceNumber());\n+\n+    manifestFile = table.currentSnapshot().manifests().get(0);\n+\n+    Assert.assertEquals(\"the sequence number of manifest should be 3\", 3, manifestFile.sequenceNumber());\n+\n+    for (ManifestEntry entry : ManifestFiles.read(manifestFile,\n+        table.io(), table.ops().current().specsById()).entries()) {\n+      if (entry.file().path().equals(FILE_A.path())) {\n+        Assert.assertEquals(\"the sequence number of data file should be 1\", 1, entry.sequenceNumber().longValue());\n+      }\n+\n+      if (entry.file().path().equals(FILE_B.path())) {\n+        Assert.assertEquals(\"the sequence number of data file should be 2\", 2, entry.sequenceNumber().longValue());\n+      }\n+\n+      if (entry.file().path().equals(FILE_C.path()) || entry.file().path().equals(FILE_D.path())) {\n+        Assert.assertEquals(\"the sequence number of data file should be 3\", 3, entry.sequenceNumber().longValue());\n+      }\n+    }\n+  }\n+\n+  @Test\n+  public void testSequenceNumberForRewrite() {\n+    table.newFastAppend().appendFile(FILE_A).commit();\n+    table.newFastAppend().appendFile(FILE_B).commit();\n+    Assert.assertEquals(2, table.currentSnapshot().sequenceNumber());\n+\n+    table.rewriteManifests().clusterBy(file -> \"\").commit();\n+    Assert.assertEquals(\"the sequence number of snapshot should be 3\",\n+        3, table.currentSnapshot().sequenceNumber());\n+\n+    ManifestFile newManifest = table.currentSnapshot().manifests().get(0);\n+    Assert.assertEquals(\"the sequence number of manifest should be 3\",\n+        3, newManifest.sequenceNumber());\n+\n+    for (ManifestEntry entry : ManifestFiles.read(newManifest,\n+        table.io(), table.ops().current().specsById()).entries()) {\n+      if (entry.file().path().equals(FILE_A.path())) {\n+        Assert.assertEquals(\"the sequence number of data file should be 1\", 1, entry.sequenceNumber().longValue());\n+      }\n+\n+      if (entry.file().path().equals(FILE_B.path())) {\n+        Assert.assertEquals(\"the sequence number of data file should be 1\", 2, entry.sequenceNumber().longValue());\n+      }\n+    }\n+  }\n+\n+  @Test\n+  public void testCommitConflict() {\n+    Transaction txn = table.newTransaction();\n+\n+    txn.newFastAppend().appendFile(FILE_A).apply();\n+    table.newFastAppend().appendFile(FILE_B).commit();\n+\n+    AssertHelpers.assertThrows(\"Should failed due to conflict\",\n+        IllegalStateException.class, \"last operation has not committed\", txn::commitTransaction);\n+\n+    Assert.assertEquals(1, TestTables.load(tableDir, \"test\").currentSnapshot().sequenceNumber());\n+\n+    AppendFiles appendFiles = table.newFastAppend().appendFile(FILE_C);\n+    appendFiles.apply();\n+    table.newFastAppend().appendFile(FILE_D).commit();\n+    appendFiles.commit();\n+\n+    ManifestFile manifestFile = table.currentSnapshot().manifests().stream()\n+        .filter(manifest -> manifest.snapshotId() == table.currentSnapshot().snapshotId())\n+        .collect(Collectors.toList()).get(0);\n+\n+    for (ManifestEntry entry : ManifestFiles.read(manifestFile, table.io(),\n+        table.ops().current().specsById()).entries()) {\n+      if (entry.file().path().equals(FILE_C.path())) {\n+        Assert.assertEquals(table.currentSnapshot().sequenceNumber(), entry.sequenceNumber().longValue());\n+      }\n+    }\n+  }\n+\n+  @Test\n+  public void testConcurrentCommit() throws InterruptedException {\n+    ExecutorService threadPool = Executors.newFixedThreadPool(4);\n+    List<Callable<Void>> tasks = new ArrayList<>();\n+\n+    Callable<Void> write1 = () -> {\n+      Transaction txn = table.newTransaction();\n+      txn.newFastAppend().appendFile(FILE_A).commit();\n+      txn.commitTransaction();\n+      return null;\n+    };\n+\n+    Callable<Void> write2 = () -> {\n+      Transaction txn = table.newTransaction();\n+      txn.newAppend().appendFile(FILE_B).commit();\n+      txn.commitTransaction();\n+      return null;\n+    };\n+\n+    Callable<Void> write3 = () -> {\n+      Transaction txn = table.newTransaction();\n+      txn.newDelete().deleteFile(FILE_A).commit();\n+      txn.commitTransaction();\n+      return null;\n+    };\n+\n+    Callable<Void> write4 = () -> {\n+      Transaction txn = table.newTransaction();\n+      txn.newOverwrite().addFile(FILE_D).commit();\n+      txn.commitTransaction();\n+      return null;\n+    };\n+\n+    tasks.add(write1);\n+    tasks.add(write2);\n+    tasks.add(write3);\n+    tasks.add(write4);\n+    threadPool.invokeAll(tasks);\n+    threadPool.shutdown();\n+\n+    Assert.assertEquals(4, TestTables.load(tableDir, \"test\").currentSnapshot().sequenceNumber());\n+  }\n+\n+  @Test\n+  public void testRollBack() {\n+    table.newFastAppend().appendFile(FILE_A).commit();\n+    long snapshotId = table.currentSnapshot().snapshotId();\n+    table.newFastAppend().appendFile(FILE_B).commit();\n+\n+    Assert.assertEquals(2, TestTables.load(tableDir, \"test\").currentSnapshot().sequenceNumber());\n+\n+    table.manageSnapshots().rollbackTo(snapshotId).commit();\n+\n+    Assert.assertEquals(1, TestTables.load(tableDir, \"test\").currentSnapshot().sequenceNumber());\n+  }\n+\n+  @Test\n+  public void testMultipleTxnOperations() {\n+    Snapshot snapshot;\n+    Transaction txn = table.newTransaction();\n+    txn.newOverwrite().addFile(FILE_A).commit();\n+    txn.commitTransaction();\n+    Assert.assertEquals(1, TestTables.load(tableDir, \"test\").currentSnapshot().sequenceNumber());\n+\n+    txn = table.newTransaction();\n+    Set<DataFile> toAddFiles = new HashSet<>();\n+    Set<DataFile> toDeleteFiles = new HashSet<>();\n+    toAddFiles.add(FILE_B);\n+    toDeleteFiles.add(FILE_A);\n+    txn.newRewrite().rewriteFiles(toDeleteFiles, toAddFiles).commit();\n+    txn.commitTransaction();\n+    Assert.assertEquals(2, TestTables.load(tableDir, \"test\").currentSnapshot().sequenceNumber());\n+\n+    txn = table.newTransaction();\n+    txn.newReplacePartitions().addFile(FILE_C).commit();\n+    txn.commitTransaction();\n+    Assert.assertEquals(3, TestTables.load(tableDir, \"test\").currentSnapshot().sequenceNumber());\n+\n+    txn = table.newTransaction();\n+    txn.newDelete().deleteFile(FILE_C).commit();\n+    txn.commitTransaction();\n+\n+    Assert.assertEquals(4, TestTables.load(tableDir, \"test\").currentSnapshot().sequenceNumber());\n+\n+    txn = table.newTransaction();\n+    txn.newAppend().appendFile(FILE_C).commit();\n+    txn.commitTransaction();\n+    Assert.assertEquals(5, TestTables.load(tableDir, \"test\").currentSnapshot().sequenceNumber());\n+\n+    snapshot = table.currentSnapshot();\n+    txn = table.newTransaction();\n+    txn.newOverwrite().addFile(FILE_D).deleteFile(FILE_C).commit();\n+    txn.commitTransaction();\n+    Assert.assertEquals(6, TestTables.load(tableDir, \"test\").currentSnapshot().sequenceNumber());\n+\n+    txn = table.newTransaction();\n+    txn.expireSnapshots().expireOlderThan(snapshot.timestampMillis()).commit();\n+    txn.commitTransaction();\n+    Assert.assertEquals(6, TestTables.load(tableDir, \"test\").currentSnapshot().sequenceNumber());\n+  }\n+\n+  @Test\n+  public void testSequenceNumberForCherryPicking() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "95cd1f02828a0dd2a9b27b244aecd91ff37d4460"}, "originalPosition": 263}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEwNTAxNTE0", "url": "https://github.com/apache/iceberg/pull/974#pullrequestreview-410501514", "createdAt": "2020-05-12T23:57:29Z", "commit": {"oid": "95cd1f02828a0dd2a9b27b244aecd91ff37d4460"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQyMzo1NzoyOVrOGUc-EA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQyMzo1NzoyOVrOGUc-EA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDA5OTM0NA==", "bodyText": "This should also assert that the picked files also have the new sequence number.", "url": "https://github.com/apache/iceberg/pull/974#discussion_r424099344", "createdAt": "2020-05-12T23:57:29Z", "author": {"login": "rdblue"}, "path": "core/src/test/java/org/apache/iceberg/TestSequenceNumberForV2Table.java", "diffHunk": "@@ -0,0 +1,299 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.concurrent.Callable;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.stream.Collectors;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+public class TestSequenceNumberForV2Table extends TableTestBase {\n+\n+  public TestSequenceNumberForV2Table() {\n+    super(2);\n+  }\n+\n+  @Test\n+  public void testSequenceNumberForFastAppend() throws IOException {\n+    table.newFastAppend().appendFile(FILE_A).commit();\n+    Assert.assertEquals(1, table.currentSnapshot().sequenceNumber());\n+    ManifestFile manifestFile = table.currentSnapshot().manifests().get(0);\n+    Assert.assertEquals(1, manifestFile.sequenceNumber());\n+\n+    table.newFastAppend().appendFile(FILE_B).commit();\n+    Assert.assertEquals(2, table.currentSnapshot().sequenceNumber());\n+    manifestFile = table.currentSnapshot().manifests().stream()\n+        .filter(manifest -> manifest.snapshotId() == table.currentSnapshot().snapshotId())\n+        .collect(Collectors.toList()).get(0);\n+    Assert.assertEquals(2, manifestFile.sequenceNumber());\n+\n+    manifestFile = writeManifest(FILE_C, FILE_D);\n+    table.newFastAppend().appendManifest(manifestFile).commit();\n+    Assert.assertEquals(3, table.currentSnapshot().sequenceNumber());\n+\n+    manifestFile = table.currentSnapshot().manifests().stream()\n+        .filter(manifest -> manifest.snapshotId() == table.currentSnapshot().snapshotId())\n+        .collect(Collectors.toList()).get(0);\n+    Assert.assertEquals(3, manifestFile.sequenceNumber());\n+\n+    for (ManifestEntry entry : ManifestFiles.read(manifestFile,\n+        table.io(), table.ops().current().specsById()).entries()) {\n+      if (entry.file().path().equals(FILE_C.path()) || entry.file().path().equals(FILE_D.path())) {\n+        Assert.assertEquals(3, entry.sequenceNumber().longValue());\n+      }\n+    }\n+  }\n+\n+  @Test\n+  public void testSequenceNumberForMergeAppend() throws IOException {\n+    table.updateProperties()\n+        .set(TableProperties.MANIFEST_MIN_MERGE_COUNT, \"1\")\n+        .commit();\n+    table.newAppend().appendFile(FILE_A).commit();\n+    Assert.assertEquals(1, table.currentSnapshot().sequenceNumber());\n+\n+    table.newAppend().appendFile(FILE_B).commit();\n+    Assert.assertEquals(2, table.currentSnapshot().sequenceNumber());\n+\n+    ManifestFile manifestFile = writeManifest(FILE_C, FILE_D);\n+    table.newAppend().appendManifest(manifestFile).commit();\n+    Assert.assertEquals(3, table.currentSnapshot().sequenceNumber());\n+\n+    manifestFile = table.currentSnapshot().manifests().get(0);\n+\n+    Assert.assertEquals(\"the sequence number of manifest should be 3\", 3, manifestFile.sequenceNumber());\n+\n+    for (ManifestEntry entry : ManifestFiles.read(manifestFile,\n+        table.io(), table.ops().current().specsById()).entries()) {\n+      if (entry.file().path().equals(FILE_A.path())) {\n+        Assert.assertEquals(\"the sequence number of data file should be 1\", 1, entry.sequenceNumber().longValue());\n+      }\n+\n+      if (entry.file().path().equals(FILE_B.path())) {\n+        Assert.assertEquals(\"the sequence number of data file should be 2\", 2, entry.sequenceNumber().longValue());\n+      }\n+\n+      if (entry.file().path().equals(FILE_C.path()) || entry.file().path().equals(FILE_D.path())) {\n+        Assert.assertEquals(\"the sequence number of data file should be 3\", 3, entry.sequenceNumber().longValue());\n+      }\n+    }\n+  }\n+\n+  @Test\n+  public void testSequenceNumberForRewrite() {\n+    table.newFastAppend().appendFile(FILE_A).commit();\n+    table.newFastAppend().appendFile(FILE_B).commit();\n+    Assert.assertEquals(2, table.currentSnapshot().sequenceNumber());\n+\n+    table.rewriteManifests().clusterBy(file -> \"\").commit();\n+    Assert.assertEquals(\"the sequence number of snapshot should be 3\",\n+        3, table.currentSnapshot().sequenceNumber());\n+\n+    ManifestFile newManifest = table.currentSnapshot().manifests().get(0);\n+    Assert.assertEquals(\"the sequence number of manifest should be 3\",\n+        3, newManifest.sequenceNumber());\n+\n+    for (ManifestEntry entry : ManifestFiles.read(newManifest,\n+        table.io(), table.ops().current().specsById()).entries()) {\n+      if (entry.file().path().equals(FILE_A.path())) {\n+        Assert.assertEquals(\"the sequence number of data file should be 1\", 1, entry.sequenceNumber().longValue());\n+      }\n+\n+      if (entry.file().path().equals(FILE_B.path())) {\n+        Assert.assertEquals(\"the sequence number of data file should be 1\", 2, entry.sequenceNumber().longValue());\n+      }\n+    }\n+  }\n+\n+  @Test\n+  public void testCommitConflict() {\n+    Transaction txn = table.newTransaction();\n+\n+    txn.newFastAppend().appendFile(FILE_A).apply();\n+    table.newFastAppend().appendFile(FILE_B).commit();\n+\n+    AssertHelpers.assertThrows(\"Should failed due to conflict\",\n+        IllegalStateException.class, \"last operation has not committed\", txn::commitTransaction);\n+\n+    Assert.assertEquals(1, TestTables.load(tableDir, \"test\").currentSnapshot().sequenceNumber());\n+\n+    AppendFiles appendFiles = table.newFastAppend().appendFile(FILE_C);\n+    appendFiles.apply();\n+    table.newFastAppend().appendFile(FILE_D).commit();\n+    appendFiles.commit();\n+\n+    ManifestFile manifestFile = table.currentSnapshot().manifests().stream()\n+        .filter(manifest -> manifest.snapshotId() == table.currentSnapshot().snapshotId())\n+        .collect(Collectors.toList()).get(0);\n+\n+    for (ManifestEntry entry : ManifestFiles.read(manifestFile, table.io(),\n+        table.ops().current().specsById()).entries()) {\n+      if (entry.file().path().equals(FILE_C.path())) {\n+        Assert.assertEquals(table.currentSnapshot().sequenceNumber(), entry.sequenceNumber().longValue());\n+      }\n+    }\n+  }\n+\n+  @Test\n+  public void testConcurrentCommit() throws InterruptedException {\n+    ExecutorService threadPool = Executors.newFixedThreadPool(4);\n+    List<Callable<Void>> tasks = new ArrayList<>();\n+\n+    Callable<Void> write1 = () -> {\n+      Transaction txn = table.newTransaction();\n+      txn.newFastAppend().appendFile(FILE_A).commit();\n+      txn.commitTransaction();\n+      return null;\n+    };\n+\n+    Callable<Void> write2 = () -> {\n+      Transaction txn = table.newTransaction();\n+      txn.newAppend().appendFile(FILE_B).commit();\n+      txn.commitTransaction();\n+      return null;\n+    };\n+\n+    Callable<Void> write3 = () -> {\n+      Transaction txn = table.newTransaction();\n+      txn.newDelete().deleteFile(FILE_A).commit();\n+      txn.commitTransaction();\n+      return null;\n+    };\n+\n+    Callable<Void> write4 = () -> {\n+      Transaction txn = table.newTransaction();\n+      txn.newOverwrite().addFile(FILE_D).commit();\n+      txn.commitTransaction();\n+      return null;\n+    };\n+\n+    tasks.add(write1);\n+    tasks.add(write2);\n+    tasks.add(write3);\n+    tasks.add(write4);\n+    threadPool.invokeAll(tasks);\n+    threadPool.shutdown();\n+\n+    Assert.assertEquals(4, TestTables.load(tableDir, \"test\").currentSnapshot().sequenceNumber());\n+  }\n+\n+  @Test\n+  public void testRollBack() {\n+    table.newFastAppend().appendFile(FILE_A).commit();\n+    long snapshotId = table.currentSnapshot().snapshotId();\n+    table.newFastAppend().appendFile(FILE_B).commit();\n+\n+    Assert.assertEquals(2, TestTables.load(tableDir, \"test\").currentSnapshot().sequenceNumber());\n+\n+    table.manageSnapshots().rollbackTo(snapshotId).commit();\n+\n+    Assert.assertEquals(1, TestTables.load(tableDir, \"test\").currentSnapshot().sequenceNumber());\n+  }\n+\n+  @Test\n+  public void testMultipleTxnOperations() {\n+    Snapshot snapshot;\n+    Transaction txn = table.newTransaction();\n+    txn.newOverwrite().addFile(FILE_A).commit();\n+    txn.commitTransaction();\n+    Assert.assertEquals(1, TestTables.load(tableDir, \"test\").currentSnapshot().sequenceNumber());\n+\n+    txn = table.newTransaction();\n+    Set<DataFile> toAddFiles = new HashSet<>();\n+    Set<DataFile> toDeleteFiles = new HashSet<>();\n+    toAddFiles.add(FILE_B);\n+    toDeleteFiles.add(FILE_A);\n+    txn.newRewrite().rewriteFiles(toDeleteFiles, toAddFiles).commit();\n+    txn.commitTransaction();\n+    Assert.assertEquals(2, TestTables.load(tableDir, \"test\").currentSnapshot().sequenceNumber());\n+\n+    txn = table.newTransaction();\n+    txn.newReplacePartitions().addFile(FILE_C).commit();\n+    txn.commitTransaction();\n+    Assert.assertEquals(3, TestTables.load(tableDir, \"test\").currentSnapshot().sequenceNumber());\n+\n+    txn = table.newTransaction();\n+    txn.newDelete().deleteFile(FILE_C).commit();\n+    txn.commitTransaction();\n+\n+    Assert.assertEquals(4, TestTables.load(tableDir, \"test\").currentSnapshot().sequenceNumber());\n+\n+    txn = table.newTransaction();\n+    txn.newAppend().appendFile(FILE_C).commit();\n+    txn.commitTransaction();\n+    Assert.assertEquals(5, TestTables.load(tableDir, \"test\").currentSnapshot().sequenceNumber());\n+\n+    snapshot = table.currentSnapshot();\n+    txn = table.newTransaction();\n+    txn.newOverwrite().addFile(FILE_D).deleteFile(FILE_C).commit();\n+    txn.commitTransaction();\n+    Assert.assertEquals(6, TestTables.load(tableDir, \"test\").currentSnapshot().sequenceNumber());\n+\n+    txn = table.newTransaction();\n+    txn.expireSnapshots().expireOlderThan(snapshot.timestampMillis()).commit();\n+    txn.commitTransaction();\n+    Assert.assertEquals(6, TestTables.load(tableDir, \"test\").currentSnapshot().sequenceNumber());\n+  }\n+\n+  @Test\n+  public void testSequenceNumberForCherryPicking() {\n+    table.newAppend()\n+        .appendFile(FILE_A)\n+        .commit();\n+\n+    // WAP commit\n+    table.newAppend()\n+        .appendFile(FILE_B)\n+        .set(\"wap.id\", \"123456789\")\n+        .stageOnly()\n+        .commit();\n+\n+    Assert.assertEquals(\"the snapshot sequence number should be 1\", 1,\n+        table.currentSnapshot().sequenceNumber());\n+\n+    // pick the snapshot that's staged but not committed\n+    Snapshot wapSnapshot = readMetadata().snapshots().get(1);\n+\n+    Assert.assertEquals(\"the snapshot sequence number should be 2\", 2,\n+        wapSnapshot.sequenceNumber());\n+\n+    // table has new commit\n+    table.newAppend()\n+        .appendFile(FILE_C)\n+        .commit();\n+\n+    Assert.assertEquals(\"the snapshot sequence number should be 3\",\n+        3, table.currentSnapshot().sequenceNumber());\n+\n+    // cherry-pick snapshot\n+    table.manageSnapshots().cherrypick(wapSnapshot.snapshotId()).commit();\n+\n+    Assert.assertEquals(\"the snapshot sequence number should be 4\",\n+        4, table.currentSnapshot().sequenceNumber());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "95cd1f02828a0dd2a9b27b244aecd91ff37d4460"}, "originalPosition": 296}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE3ODIxMDgx", "url": "https://github.com/apache/iceberg/pull/974#pullrequestreview-417821081", "createdAt": "2020-05-25T17:25:47Z", "commit": {"oid": "983bbcd11f01c6d055d1270cfc20c4668d45c6de"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQxNzoyNTo0N1rOGaGvMQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQxNzoyNTo0N1rOGaGvMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDAyNjU0NQ==", "bodyText": "The motivation for #1038 was to cover more cases for each action. Instead of having one test case for FastAppend, we should add the necessary assertions to all FastAppend tests. That keeps the tests in one place and increases coverage of situations that validate sequence numbers.\nCould you make sure that the cases that you're testing here are covered by assertions in the FastAppend tests so we don't need this case?\nIdeally, I'd prefer to add assertions to all of the operation tests instead of this suite, but for now I think it would be reasonable to just update the cases in FastAppend and add the rest of this suite. We can replace test cases here with assertions in the right test suites over a few more PRs.", "url": "https://github.com/apache/iceberg/pull/974#discussion_r430026545", "createdAt": "2020-05-25T17:25:47Z", "author": {"login": "rdblue"}, "path": "core/src/test/java/org/apache/iceberg/TestSequenceNumberForV2Table.java", "diffHunk": "@@ -0,0 +1,344 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg;\n+\n+import java.io.IOException;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Iterator;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import org.apache.iceberg.exceptions.CommitFailedException;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+public class TestSequenceNumberForV2Table extends TableTestBase {\n+\n+  public TestSequenceNumberForV2Table() {\n+    super(2);\n+  }\n+\n+  @Test\n+  public void testFastAppend() throws IOException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "983bbcd11f01c6d055d1270cfc20c4668d45c6de"}, "originalPosition": 40}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "983bbcd11f01c6d055d1270cfc20c4668d45c6de", "author": {"user": {"login": "chenjunjiedada", "name": "Chen, Junjie"}}, "url": "https://github.com/apache/iceberg/commit/983bbcd11f01c6d055d1270cfc20c4668d45c6de", "committedDate": "2020-05-14T01:40:39Z", "message": "fix unit test"}, "afterCommit": {"oid": "97d3b3d349e13874b13b965c4643f9a81866875d", "author": {"user": {"login": "chenjunjiedada", "name": "Chen, Junjie"}}, "url": "https://github.com/apache/iceberg/commit/97d3b3d349e13874b13b965c4643f9a81866875d", "committedDate": "2020-05-26T03:46:20Z", "message": "remove duplicate unit test"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE4NDk2OTIw", "url": "https://github.com/apache/iceberg/pull/974#pullrequestreview-418496920", "createdAt": "2020-05-26T16:57:05Z", "commit": {"oid": "97d3b3d349e13874b13b965c4643f9a81866875d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQxNjo1NzowNVrOGanqjA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQxNjo1NzowNVrOGanqjA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDU2NjAyOA==", "bodyText": "These tests should use the validation methods from TableTestBase instead of adding its own. This method causes the test cases in this PR to be confusing because sometimes the sequence number is for a delete. Instead, the test cases need to be very specific about metadata.\nAll the metadata for every change should be validated:\n\nEach operation that produces a sequence number should assert the number of changed manifests\nEach changed manifest should have its entries validated, including file status, snapshot id, and sequence number\nEach operation should validate the lastSequenceNumber in table metadata\nOperations that do not produce a sequence number should validate that the sequence number did not change using the last sequence number in table metadata.", "url": "https://github.com/apache/iceberg/pull/974#discussion_r430566028", "createdAt": "2020-05-26T16:57:05Z", "author": {"login": "rdblue"}, "path": "core/src/test/java/org/apache/iceberg/TestSequenceNumberForV2Table.java", "diffHunk": "@@ -0,0 +1,328 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg;\n+\n+import java.io.IOException;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Iterator;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import org.apache.iceberg.exceptions.CommitFailedException;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+public class TestSequenceNumberForV2Table extends TableTestBase {\n+\n+  public TestSequenceNumberForV2Table() {\n+    super(2);\n+  }\n+\n+  @Test\n+  public void testMergeAppend() throws IOException {\n+    table.newAppend().appendFile(FILE_A).commit();\n+    ManifestFile manifestFile = table.currentSnapshot().manifests().get(0);\n+    validateManifestEntries(manifestFile, 1, files(FILE_A), seqs(1));\n+    table.newAppend().appendFile(FILE_B).commit();\n+    manifestFile = table.currentSnapshot().manifests().get(0);\n+    validateManifestEntries(manifestFile, 2, files(FILE_B), seqs(2));\n+\n+    table.newAppend()\n+        .appendManifest(writeManifest(\"input-m0.avro\",\n+            manifestEntry(ManifestEntry.Status.ADDED, null, FILE_C)))\n+        .commit();\n+\n+    validateDataFiles(files(FILE_A, FILE_B, FILE_C), seqs(1, 2, 3));\n+\n+    table.updateProperties()\n+        .set(TableProperties.MANIFEST_MIN_MERGE_COUNT, \"1\")\n+        .commit();\n+\n+    table.newAppend()\n+        .appendManifest(writeManifest(\"input-m1.avro\",\n+            manifestEntry(ManifestEntry.Status.ADDED, null, FILE_D)))\n+        .commit();\n+\n+    manifestFile = table.currentSnapshot().manifests().stream()\n+        .filter(manifest -> manifest.snapshotId() == table.currentSnapshot().snapshotId())\n+        .collect(Collectors.toList()).get(0);\n+    validateManifestEntries(manifestFile, 4, files(FILE_A, FILE_B, FILE_C, FILE_D), seqs(1, 2, 3, 4));\n+    validateDataFiles(files(FILE_A, FILE_B, FILE_C, FILE_D), seqs(1, 2, 3, 4));\n+  }\n+\n+  @Test\n+  public void testRewrite() {\n+    table.newFastAppend().appendFile(FILE_A).commit();\n+    table.newFastAppend().appendFile(FILE_B).commit();\n+    Assert.assertEquals(2, table.currentSnapshot().sequenceNumber());\n+\n+    table.rewriteManifests().clusterBy(file -> \"\").commit();\n+    Assert.assertEquals(\"Snapshot sequence number should be 3\",\n+        3, table.currentSnapshot().sequenceNumber());\n+\n+    ManifestFile newManifest = table.currentSnapshot().manifests().stream()\n+        .filter(manifest -> manifest.snapshotId() == table.currentSnapshot().snapshotId())\n+        .collect(Collectors.toList()).get(0);\n+\n+    validateManifestEntries(newManifest, 3, files(FILE_A, FILE_B), seqs(1, 2));\n+  }\n+\n+  @Test\n+  public void testCommitConflict() {\n+    AppendFiles appendA = table.newFastAppend();\n+    appendA.appendFile(FILE_A).apply();\n+\n+    table.updateProperties()\n+        .set(TableProperties.COMMIT_NUM_RETRIES, \"0\")\n+        .commit();\n+\n+    table.ops().failCommits(1);\n+\n+    AssertHelpers.assertThrows(\"Should reject commit\",\n+        CommitFailedException.class, \"Injected failure\",\n+        () -> table.newFastAppend().appendFile(FILE_B).commit());\n+\n+    table.updateProperties()\n+        .set(TableProperties.COMMIT_NUM_RETRIES, \"5\")\n+        .commit();\n+\n+    appendA.commit();\n+\n+    Assert.assertEquals(1, table.currentSnapshot().sequenceNumber());\n+\n+    AppendFiles appendFiles = table.newFastAppend().appendFile(FILE_C);\n+    appendFiles.apply();\n+    table.newFastAppend().appendFile(FILE_D).commit();\n+    appendFiles.commit();\n+\n+    validateDataFiles(files(FILE_A, FILE_D, FILE_C), seqs(1, 2, 3));\n+  }\n+\n+  @Test\n+  public void testRollBack() {\n+    table.newFastAppend().appendFile(FILE_A).commit();\n+    long snapshotId = table.currentSnapshot().snapshotId();\n+\n+    table.newFastAppend().appendFile(FILE_B).commit();\n+    Assert.assertEquals(\"Snapshot sequence number should match expected\",\n+        2, table.currentSnapshot().sequenceNumber());\n+\n+    table.manageSnapshots().rollbackTo(snapshotId).commit();\n+    Assert.assertEquals(\"Snapshot sequence number should match expected\",\n+        1, table.currentSnapshot().sequenceNumber());\n+\n+    Assert.assertEquals(\"Table last sequence number should be 2\",\n+        2, table.operations().current().lastSequenceNumber());\n+\n+    table.newFastAppend().appendFile(FILE_C).commit();\n+    Assert.assertEquals(\"Snapshot sequence number should match expected\",\n+        3, table.currentSnapshot().sequenceNumber());\n+  }\n+\n+  @Test\n+  public void testSingleTransaction() {\n+    Transaction txn = table.newTransaction();\n+    txn.newAppend().appendFile(FILE_A).commit();\n+    txn.commitTransaction();\n+    Assert.assertEquals(\"Snapshot sequence number should match expected\",\n+        1, table.currentSnapshot().sequenceNumber());\n+  }\n+\n+  @Test\n+  public void testConcurrentTransaction() {\n+    Transaction txn1 = table.newTransaction();\n+    Transaction txn2 = table.newTransaction();\n+    Transaction txn3 = table.newTransaction();\n+    Transaction txn4 = table.newTransaction();\n+\n+    txn1.newFastAppend().appendFile(FILE_A).commit();\n+    txn3.newOverwrite().addFile(FILE_C).commit();\n+    txn4.newDelete().deleteFile(FILE_A).commit();\n+    txn2.newAppend().appendFile(FILE_B).commit();\n+\n+    txn1.commitTransaction();\n+    txn2.commitTransaction();\n+    txn3.commitTransaction();\n+    txn4.commitTransaction();\n+\n+    Assert.assertEquals(\"Snapshot sequence number should match expected\",\n+        4, table.currentSnapshot().sequenceNumber());\n+    validateDataFiles(files(FILE_A, FILE_B, FILE_C), seqs(4, 2, 3));\n+  }\n+\n+  @Test\n+  public void testMultipleOperationsTransaction() {\n+    Transaction txn = table.newTransaction();\n+    txn.newAppend().appendFile(FILE_A).commit();\n+    Set<DataFile> toAddFiles = new HashSet<>();\n+    Set<DataFile> toDeleteFiles = new HashSet<>();\n+    toAddFiles.add(FILE_B);\n+    toDeleteFiles.add(FILE_A);\n+    txn.newRewrite().rewriteFiles(toDeleteFiles, toAddFiles).commit();\n+    txn.commitTransaction();\n+\n+    Assert.assertEquals(\"Snapshot sequence number should match expected\",\n+        2, table.currentSnapshot().sequenceNumber());\n+    validateDataFiles(files(FILE_A, FILE_B), seqs(2, 2));\n+  }\n+\n+  @Test\n+  public void testExpirationInTransaction() {\n+    table.newFastAppend().appendFile(FILE_A).commit();\n+    long snapshotId = table.currentSnapshot().snapshotId();\n+    table.newAppend().appendFile(FILE_B).commit();\n+\n+    Transaction txn = table.newTransaction();\n+    txn.expireSnapshots().expireSnapshotId(snapshotId).commit();\n+    txn.commitTransaction();\n+\n+    Assert.assertEquals(\"Snapshot sequence number should match expected\",\n+        2, table.currentSnapshot().sequenceNumber());\n+    validateDataFiles(files(FILE_B), seqs(2));\n+  }\n+\n+  @Test\n+  public void testTransactionFailure() {\n+    table.newAppend()\n+        .appendFile(FILE_A)\n+        .appendFile(FILE_B)\n+        .commit();\n+\n+    table.updateProperties()\n+        .set(TableProperties.COMMIT_NUM_RETRIES, \"0\")\n+        .commit();\n+\n+    table.ops().failCommits(1);\n+\n+    Transaction txn = table.newTransaction();\n+    txn.newAppend().appendFile(FILE_C).commit();\n+\n+    AssertHelpers.assertThrows(\"Transaction commit should fail\",\n+        CommitFailedException.class, \"Injected failure\", txn::commitTransaction);\n+\n+    Assert.assertEquals(\"Snapshot sequence number should match expected\",\n+        1, table.currentSnapshot().sequenceNumber());\n+  }\n+\n+  @Test\n+  public void testCherryPicking() {\n+    table.newAppend()\n+        .appendFile(FILE_A)\n+        .commit();\n+\n+    table.newAppend()\n+        .appendFile(FILE_B)\n+        .stageOnly()\n+        .commit();\n+\n+    Assert.assertEquals(\"Snapshot sequence number should be 1\", 1,\n+        table.currentSnapshot().sequenceNumber());\n+\n+    // pick the snapshot that's staged but not committed\n+    Snapshot stagedSnapshot = readMetadata().snapshots().get(1);\n+\n+    Assert.assertEquals(\"Snapshot sequence number should be 2\", 2,\n+        stagedSnapshot.sequenceNumber());\n+\n+    // table has new commit\n+    table.newAppend()\n+        .appendFile(FILE_C)\n+        .commit();\n+\n+    Assert.assertEquals(\"Snapshot sequence number should be 3\",\n+        3, table.currentSnapshot().sequenceNumber());\n+\n+    // cherry-pick snapshot\n+    table.manageSnapshots().cherrypick(stagedSnapshot.snapshotId()).commit();\n+\n+    Assert.assertEquals(\"Snapshot sequence number should be 4\",\n+        4, table.currentSnapshot().sequenceNumber());\n+\n+\n+    validateDataFiles(files(FILE_A, FILE_B, FILE_C), seqs(1, 4, 3));\n+  }\n+\n+  @Test\n+  public void testCherryPickFastForward() {\n+    table.newAppend()\n+        .appendFile(FILE_A)\n+        .commit();\n+\n+    table.newAppend()\n+        .appendFile(FILE_B)\n+        .stageOnly()\n+        .commit();\n+\n+    Assert.assertEquals(\"Snapshot sequence number should be 1\", 1,\n+        table.currentSnapshot().sequenceNumber());\n+\n+    // pick the snapshot that's staged but not committed\n+    Snapshot stagedSnapshot = readMetadata().snapshots().get(1);\n+\n+    Assert.assertEquals(\"Snapshot sequence number should be 2\", 2,\n+        stagedSnapshot.sequenceNumber());\n+\n+    // cherry-pick snapshot, this will fast forward\n+    table.manageSnapshots().cherrypick(stagedSnapshot.snapshotId()).commit();\n+    Assert.assertEquals(\"Snapshot sequence number should be 2\",\n+        2, table.currentSnapshot().sequenceNumber());\n+\n+    validateDataFiles(files(FILE_A, FILE_B), seqs(1, 2));\n+  }\n+\n+  void validateDataFiles(Iterator<DataFile> files, Iterator<Long> expectedSeqs) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "97d3b3d349e13874b13b965c4643f9a81866875d"}, "originalPosition": 291}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE4NDk3ODkx", "url": "https://github.com/apache/iceberg/pull/974#pullrequestreview-418497891", "createdAt": "2020-05-26T16:58:18Z", "commit": {"oid": "97d3b3d349e13874b13b965c4643f9a81866875d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQxNjo1ODoxOFrOGantlQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQxNjo1ODoxOFrOGantlQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDU2NjgwNQ==", "bodyText": "This assertion validates that the table's current snapshot didn't change, not that the table did not assign as sequence number to the failed transaction. This should check TableMetadata.lastSequenceNumber instead.", "url": "https://github.com/apache/iceberg/pull/974#discussion_r430566805", "createdAt": "2020-05-26T16:58:18Z", "author": {"login": "rdblue"}, "path": "core/src/test/java/org/apache/iceberg/TestSequenceNumberForV2Table.java", "diffHunk": "@@ -0,0 +1,328 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg;\n+\n+import java.io.IOException;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Iterator;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import org.apache.iceberg.exceptions.CommitFailedException;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+public class TestSequenceNumberForV2Table extends TableTestBase {\n+\n+  public TestSequenceNumberForV2Table() {\n+    super(2);\n+  }\n+\n+  @Test\n+  public void testMergeAppend() throws IOException {\n+    table.newAppend().appendFile(FILE_A).commit();\n+    ManifestFile manifestFile = table.currentSnapshot().manifests().get(0);\n+    validateManifestEntries(manifestFile, 1, files(FILE_A), seqs(1));\n+    table.newAppend().appendFile(FILE_B).commit();\n+    manifestFile = table.currentSnapshot().manifests().get(0);\n+    validateManifestEntries(manifestFile, 2, files(FILE_B), seqs(2));\n+\n+    table.newAppend()\n+        .appendManifest(writeManifest(\"input-m0.avro\",\n+            manifestEntry(ManifestEntry.Status.ADDED, null, FILE_C)))\n+        .commit();\n+\n+    validateDataFiles(files(FILE_A, FILE_B, FILE_C), seqs(1, 2, 3));\n+\n+    table.updateProperties()\n+        .set(TableProperties.MANIFEST_MIN_MERGE_COUNT, \"1\")\n+        .commit();\n+\n+    table.newAppend()\n+        .appendManifest(writeManifest(\"input-m1.avro\",\n+            manifestEntry(ManifestEntry.Status.ADDED, null, FILE_D)))\n+        .commit();\n+\n+    manifestFile = table.currentSnapshot().manifests().stream()\n+        .filter(manifest -> manifest.snapshotId() == table.currentSnapshot().snapshotId())\n+        .collect(Collectors.toList()).get(0);\n+    validateManifestEntries(manifestFile, 4, files(FILE_A, FILE_B, FILE_C, FILE_D), seqs(1, 2, 3, 4));\n+    validateDataFiles(files(FILE_A, FILE_B, FILE_C, FILE_D), seqs(1, 2, 3, 4));\n+  }\n+\n+  @Test\n+  public void testRewrite() {\n+    table.newFastAppend().appendFile(FILE_A).commit();\n+    table.newFastAppend().appendFile(FILE_B).commit();\n+    Assert.assertEquals(2, table.currentSnapshot().sequenceNumber());\n+\n+    table.rewriteManifests().clusterBy(file -> \"\").commit();\n+    Assert.assertEquals(\"Snapshot sequence number should be 3\",\n+        3, table.currentSnapshot().sequenceNumber());\n+\n+    ManifestFile newManifest = table.currentSnapshot().manifests().stream()\n+        .filter(manifest -> manifest.snapshotId() == table.currentSnapshot().snapshotId())\n+        .collect(Collectors.toList()).get(0);\n+\n+    validateManifestEntries(newManifest, 3, files(FILE_A, FILE_B), seqs(1, 2));\n+  }\n+\n+  @Test\n+  public void testCommitConflict() {\n+    AppendFiles appendA = table.newFastAppend();\n+    appendA.appendFile(FILE_A).apply();\n+\n+    table.updateProperties()\n+        .set(TableProperties.COMMIT_NUM_RETRIES, \"0\")\n+        .commit();\n+\n+    table.ops().failCommits(1);\n+\n+    AssertHelpers.assertThrows(\"Should reject commit\",\n+        CommitFailedException.class, \"Injected failure\",\n+        () -> table.newFastAppend().appendFile(FILE_B).commit());\n+\n+    table.updateProperties()\n+        .set(TableProperties.COMMIT_NUM_RETRIES, \"5\")\n+        .commit();\n+\n+    appendA.commit();\n+\n+    Assert.assertEquals(1, table.currentSnapshot().sequenceNumber());\n+\n+    AppendFiles appendFiles = table.newFastAppend().appendFile(FILE_C);\n+    appendFiles.apply();\n+    table.newFastAppend().appendFile(FILE_D).commit();\n+    appendFiles.commit();\n+\n+    validateDataFiles(files(FILE_A, FILE_D, FILE_C), seqs(1, 2, 3));\n+  }\n+\n+  @Test\n+  public void testRollBack() {\n+    table.newFastAppend().appendFile(FILE_A).commit();\n+    long snapshotId = table.currentSnapshot().snapshotId();\n+\n+    table.newFastAppend().appendFile(FILE_B).commit();\n+    Assert.assertEquals(\"Snapshot sequence number should match expected\",\n+        2, table.currentSnapshot().sequenceNumber());\n+\n+    table.manageSnapshots().rollbackTo(snapshotId).commit();\n+    Assert.assertEquals(\"Snapshot sequence number should match expected\",\n+        1, table.currentSnapshot().sequenceNumber());\n+\n+    Assert.assertEquals(\"Table last sequence number should be 2\",\n+        2, table.operations().current().lastSequenceNumber());\n+\n+    table.newFastAppend().appendFile(FILE_C).commit();\n+    Assert.assertEquals(\"Snapshot sequence number should match expected\",\n+        3, table.currentSnapshot().sequenceNumber());\n+  }\n+\n+  @Test\n+  public void testSingleTransaction() {\n+    Transaction txn = table.newTransaction();\n+    txn.newAppend().appendFile(FILE_A).commit();\n+    txn.commitTransaction();\n+    Assert.assertEquals(\"Snapshot sequence number should match expected\",\n+        1, table.currentSnapshot().sequenceNumber());\n+  }\n+\n+  @Test\n+  public void testConcurrentTransaction() {\n+    Transaction txn1 = table.newTransaction();\n+    Transaction txn2 = table.newTransaction();\n+    Transaction txn3 = table.newTransaction();\n+    Transaction txn4 = table.newTransaction();\n+\n+    txn1.newFastAppend().appendFile(FILE_A).commit();\n+    txn3.newOverwrite().addFile(FILE_C).commit();\n+    txn4.newDelete().deleteFile(FILE_A).commit();\n+    txn2.newAppend().appendFile(FILE_B).commit();\n+\n+    txn1.commitTransaction();\n+    txn2.commitTransaction();\n+    txn3.commitTransaction();\n+    txn4.commitTransaction();\n+\n+    Assert.assertEquals(\"Snapshot sequence number should match expected\",\n+        4, table.currentSnapshot().sequenceNumber());\n+    validateDataFiles(files(FILE_A, FILE_B, FILE_C), seqs(4, 2, 3));\n+  }\n+\n+  @Test\n+  public void testMultipleOperationsTransaction() {\n+    Transaction txn = table.newTransaction();\n+    txn.newAppend().appendFile(FILE_A).commit();\n+    Set<DataFile> toAddFiles = new HashSet<>();\n+    Set<DataFile> toDeleteFiles = new HashSet<>();\n+    toAddFiles.add(FILE_B);\n+    toDeleteFiles.add(FILE_A);\n+    txn.newRewrite().rewriteFiles(toDeleteFiles, toAddFiles).commit();\n+    txn.commitTransaction();\n+\n+    Assert.assertEquals(\"Snapshot sequence number should match expected\",\n+        2, table.currentSnapshot().sequenceNumber());\n+    validateDataFiles(files(FILE_A, FILE_B), seqs(2, 2));\n+  }\n+\n+  @Test\n+  public void testExpirationInTransaction() {\n+    table.newFastAppend().appendFile(FILE_A).commit();\n+    long snapshotId = table.currentSnapshot().snapshotId();\n+    table.newAppend().appendFile(FILE_B).commit();\n+\n+    Transaction txn = table.newTransaction();\n+    txn.expireSnapshots().expireSnapshotId(snapshotId).commit();\n+    txn.commitTransaction();\n+\n+    Assert.assertEquals(\"Snapshot sequence number should match expected\",\n+        2, table.currentSnapshot().sequenceNumber());\n+    validateDataFiles(files(FILE_B), seqs(2));\n+  }\n+\n+  @Test\n+  public void testTransactionFailure() {\n+    table.newAppend()\n+        .appendFile(FILE_A)\n+        .appendFile(FILE_B)\n+        .commit();\n+\n+    table.updateProperties()\n+        .set(TableProperties.COMMIT_NUM_RETRIES, \"0\")\n+        .commit();\n+\n+    table.ops().failCommits(1);\n+\n+    Transaction txn = table.newTransaction();\n+    txn.newAppend().appendFile(FILE_C).commit();\n+\n+    AssertHelpers.assertThrows(\"Transaction commit should fail\",\n+        CommitFailedException.class, \"Injected failure\", txn::commitTransaction);\n+\n+    Assert.assertEquals(\"Snapshot sequence number should match expected\",\n+        1, table.currentSnapshot().sequenceNumber());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "97d3b3d349e13874b13b965c4643f9a81866875d"}, "originalPosition": 222}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE4NDk5NDI5", "url": "https://github.com/apache/iceberg/pull/974#pullrequestreview-418499429", "createdAt": "2020-05-26T17:00:09Z", "commit": {"oid": "97d3b3d349e13874b13b965c4643f9a81866875d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQxNzowMDowOVrOGanydQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQxNzowMDowOVrOGanydQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDU2ODA1Mw==", "bodyText": "The sequence number of FILE_A needs to be validated, along with the rest of the metadata for this commit. Transactions will still produce a snapshot for every operation, it will just swap the existing state for the final state.", "url": "https://github.com/apache/iceberg/pull/974#discussion_r430568053", "createdAt": "2020-05-26T17:00:09Z", "author": {"login": "rdblue"}, "path": "core/src/test/java/org/apache/iceberg/TestSequenceNumberForV2Table.java", "diffHunk": "@@ -0,0 +1,328 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg;\n+\n+import java.io.IOException;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Iterator;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import org.apache.iceberg.exceptions.CommitFailedException;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+public class TestSequenceNumberForV2Table extends TableTestBase {\n+\n+  public TestSequenceNumberForV2Table() {\n+    super(2);\n+  }\n+\n+  @Test\n+  public void testMergeAppend() throws IOException {\n+    table.newAppend().appendFile(FILE_A).commit();\n+    ManifestFile manifestFile = table.currentSnapshot().manifests().get(0);\n+    validateManifestEntries(manifestFile, 1, files(FILE_A), seqs(1));\n+    table.newAppend().appendFile(FILE_B).commit();\n+    manifestFile = table.currentSnapshot().manifests().get(0);\n+    validateManifestEntries(manifestFile, 2, files(FILE_B), seqs(2));\n+\n+    table.newAppend()\n+        .appendManifest(writeManifest(\"input-m0.avro\",\n+            manifestEntry(ManifestEntry.Status.ADDED, null, FILE_C)))\n+        .commit();\n+\n+    validateDataFiles(files(FILE_A, FILE_B, FILE_C), seqs(1, 2, 3));\n+\n+    table.updateProperties()\n+        .set(TableProperties.MANIFEST_MIN_MERGE_COUNT, \"1\")\n+        .commit();\n+\n+    table.newAppend()\n+        .appendManifest(writeManifest(\"input-m1.avro\",\n+            manifestEntry(ManifestEntry.Status.ADDED, null, FILE_D)))\n+        .commit();\n+\n+    manifestFile = table.currentSnapshot().manifests().stream()\n+        .filter(manifest -> manifest.snapshotId() == table.currentSnapshot().snapshotId())\n+        .collect(Collectors.toList()).get(0);\n+    validateManifestEntries(manifestFile, 4, files(FILE_A, FILE_B, FILE_C, FILE_D), seqs(1, 2, 3, 4));\n+    validateDataFiles(files(FILE_A, FILE_B, FILE_C, FILE_D), seqs(1, 2, 3, 4));\n+  }\n+\n+  @Test\n+  public void testRewrite() {\n+    table.newFastAppend().appendFile(FILE_A).commit();\n+    table.newFastAppend().appendFile(FILE_B).commit();\n+    Assert.assertEquals(2, table.currentSnapshot().sequenceNumber());\n+\n+    table.rewriteManifests().clusterBy(file -> \"\").commit();\n+    Assert.assertEquals(\"Snapshot sequence number should be 3\",\n+        3, table.currentSnapshot().sequenceNumber());\n+\n+    ManifestFile newManifest = table.currentSnapshot().manifests().stream()\n+        .filter(manifest -> manifest.snapshotId() == table.currentSnapshot().snapshotId())\n+        .collect(Collectors.toList()).get(0);\n+\n+    validateManifestEntries(newManifest, 3, files(FILE_A, FILE_B), seqs(1, 2));\n+  }\n+\n+  @Test\n+  public void testCommitConflict() {\n+    AppendFiles appendA = table.newFastAppend();\n+    appendA.appendFile(FILE_A).apply();\n+\n+    table.updateProperties()\n+        .set(TableProperties.COMMIT_NUM_RETRIES, \"0\")\n+        .commit();\n+\n+    table.ops().failCommits(1);\n+\n+    AssertHelpers.assertThrows(\"Should reject commit\",\n+        CommitFailedException.class, \"Injected failure\",\n+        () -> table.newFastAppend().appendFile(FILE_B).commit());\n+\n+    table.updateProperties()\n+        .set(TableProperties.COMMIT_NUM_RETRIES, \"5\")\n+        .commit();\n+\n+    appendA.commit();\n+\n+    Assert.assertEquals(1, table.currentSnapshot().sequenceNumber());\n+\n+    AppendFiles appendFiles = table.newFastAppend().appendFile(FILE_C);\n+    appendFiles.apply();\n+    table.newFastAppend().appendFile(FILE_D).commit();\n+    appendFiles.commit();\n+\n+    validateDataFiles(files(FILE_A, FILE_D, FILE_C), seqs(1, 2, 3));\n+  }\n+\n+  @Test\n+  public void testRollBack() {\n+    table.newFastAppend().appendFile(FILE_A).commit();\n+    long snapshotId = table.currentSnapshot().snapshotId();\n+\n+    table.newFastAppend().appendFile(FILE_B).commit();\n+    Assert.assertEquals(\"Snapshot sequence number should match expected\",\n+        2, table.currentSnapshot().sequenceNumber());\n+\n+    table.manageSnapshots().rollbackTo(snapshotId).commit();\n+    Assert.assertEquals(\"Snapshot sequence number should match expected\",\n+        1, table.currentSnapshot().sequenceNumber());\n+\n+    Assert.assertEquals(\"Table last sequence number should be 2\",\n+        2, table.operations().current().lastSequenceNumber());\n+\n+    table.newFastAppend().appendFile(FILE_C).commit();\n+    Assert.assertEquals(\"Snapshot sequence number should match expected\",\n+        3, table.currentSnapshot().sequenceNumber());\n+  }\n+\n+  @Test\n+  public void testSingleTransaction() {\n+    Transaction txn = table.newTransaction();\n+    txn.newAppend().appendFile(FILE_A).commit();\n+    txn.commitTransaction();\n+    Assert.assertEquals(\"Snapshot sequence number should match expected\",\n+        1, table.currentSnapshot().sequenceNumber());\n+  }\n+\n+  @Test\n+  public void testConcurrentTransaction() {\n+    Transaction txn1 = table.newTransaction();\n+    Transaction txn2 = table.newTransaction();\n+    Transaction txn3 = table.newTransaction();\n+    Transaction txn4 = table.newTransaction();\n+\n+    txn1.newFastAppend().appendFile(FILE_A).commit();\n+    txn3.newOverwrite().addFile(FILE_C).commit();\n+    txn4.newDelete().deleteFile(FILE_A).commit();\n+    txn2.newAppend().appendFile(FILE_B).commit();\n+\n+    txn1.commitTransaction();\n+    txn2.commitTransaction();\n+    txn3.commitTransaction();\n+    txn4.commitTransaction();\n+\n+    Assert.assertEquals(\"Snapshot sequence number should match expected\",\n+        4, table.currentSnapshot().sequenceNumber());\n+    validateDataFiles(files(FILE_A, FILE_B, FILE_C), seqs(4, 2, 3));\n+  }\n+\n+  @Test\n+  public void testMultipleOperationsTransaction() {\n+    Transaction txn = table.newTransaction();\n+    txn.newAppend().appendFile(FILE_A).commit();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "97d3b3d349e13874b13b965c4643f9a81866875d"}, "originalPosition": 174}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE4NDk5ODg0", "url": "https://github.com/apache/iceberg/pull/974#pullrequestreview-418499884", "createdAt": "2020-05-26T17:00:41Z", "commit": {"oid": "97d3b3d349e13874b13b965c4643f9a81866875d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQxNzowMDo0MlrOGanz3g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQxNzowMDo0MlrOGanz3g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDU2ODQxNA==", "bodyText": "This needs to validate the table's last sequence number.", "url": "https://github.com/apache/iceberg/pull/974#discussion_r430568414", "createdAt": "2020-05-26T17:00:42Z", "author": {"login": "rdblue"}, "path": "core/src/test/java/org/apache/iceberg/TestSequenceNumberForV2Table.java", "diffHunk": "@@ -0,0 +1,328 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg;\n+\n+import java.io.IOException;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Iterator;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import org.apache.iceberg.exceptions.CommitFailedException;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+public class TestSequenceNumberForV2Table extends TableTestBase {\n+\n+  public TestSequenceNumberForV2Table() {\n+    super(2);\n+  }\n+\n+  @Test\n+  public void testMergeAppend() throws IOException {\n+    table.newAppend().appendFile(FILE_A).commit();\n+    ManifestFile manifestFile = table.currentSnapshot().manifests().get(0);\n+    validateManifestEntries(manifestFile, 1, files(FILE_A), seqs(1));\n+    table.newAppend().appendFile(FILE_B).commit();\n+    manifestFile = table.currentSnapshot().manifests().get(0);\n+    validateManifestEntries(manifestFile, 2, files(FILE_B), seqs(2));\n+\n+    table.newAppend()\n+        .appendManifest(writeManifest(\"input-m0.avro\",\n+            manifestEntry(ManifestEntry.Status.ADDED, null, FILE_C)))\n+        .commit();\n+\n+    validateDataFiles(files(FILE_A, FILE_B, FILE_C), seqs(1, 2, 3));\n+\n+    table.updateProperties()\n+        .set(TableProperties.MANIFEST_MIN_MERGE_COUNT, \"1\")\n+        .commit();\n+\n+    table.newAppend()\n+        .appendManifest(writeManifest(\"input-m1.avro\",\n+            manifestEntry(ManifestEntry.Status.ADDED, null, FILE_D)))\n+        .commit();\n+\n+    manifestFile = table.currentSnapshot().manifests().stream()\n+        .filter(manifest -> manifest.snapshotId() == table.currentSnapshot().snapshotId())\n+        .collect(Collectors.toList()).get(0);\n+    validateManifestEntries(manifestFile, 4, files(FILE_A, FILE_B, FILE_C, FILE_D), seqs(1, 2, 3, 4));\n+    validateDataFiles(files(FILE_A, FILE_B, FILE_C, FILE_D), seqs(1, 2, 3, 4));\n+  }\n+\n+  @Test\n+  public void testRewrite() {\n+    table.newFastAppend().appendFile(FILE_A).commit();\n+    table.newFastAppend().appendFile(FILE_B).commit();\n+    Assert.assertEquals(2, table.currentSnapshot().sequenceNumber());\n+\n+    table.rewriteManifests().clusterBy(file -> \"\").commit();\n+    Assert.assertEquals(\"Snapshot sequence number should be 3\",\n+        3, table.currentSnapshot().sequenceNumber());\n+\n+    ManifestFile newManifest = table.currentSnapshot().manifests().stream()\n+        .filter(manifest -> manifest.snapshotId() == table.currentSnapshot().snapshotId())\n+        .collect(Collectors.toList()).get(0);\n+\n+    validateManifestEntries(newManifest, 3, files(FILE_A, FILE_B), seqs(1, 2));\n+  }\n+\n+  @Test\n+  public void testCommitConflict() {\n+    AppendFiles appendA = table.newFastAppend();\n+    appendA.appendFile(FILE_A).apply();\n+\n+    table.updateProperties()\n+        .set(TableProperties.COMMIT_NUM_RETRIES, \"0\")\n+        .commit();\n+\n+    table.ops().failCommits(1);\n+\n+    AssertHelpers.assertThrows(\"Should reject commit\",\n+        CommitFailedException.class, \"Injected failure\",\n+        () -> table.newFastAppend().appendFile(FILE_B).commit());\n+\n+    table.updateProperties()\n+        .set(TableProperties.COMMIT_NUM_RETRIES, \"5\")\n+        .commit();\n+\n+    appendA.commit();\n+\n+    Assert.assertEquals(1, table.currentSnapshot().sequenceNumber());\n+\n+    AppendFiles appendFiles = table.newFastAppend().appendFile(FILE_C);\n+    appendFiles.apply();\n+    table.newFastAppend().appendFile(FILE_D).commit();\n+    appendFiles.commit();\n+\n+    validateDataFiles(files(FILE_A, FILE_D, FILE_C), seqs(1, 2, 3));\n+  }\n+\n+  @Test\n+  public void testRollBack() {\n+    table.newFastAppend().appendFile(FILE_A).commit();\n+    long snapshotId = table.currentSnapshot().snapshotId();\n+\n+    table.newFastAppend().appendFile(FILE_B).commit();\n+    Assert.assertEquals(\"Snapshot sequence number should match expected\",\n+        2, table.currentSnapshot().sequenceNumber());\n+\n+    table.manageSnapshots().rollbackTo(snapshotId).commit();\n+    Assert.assertEquals(\"Snapshot sequence number should match expected\",\n+        1, table.currentSnapshot().sequenceNumber());\n+\n+    Assert.assertEquals(\"Table last sequence number should be 2\",\n+        2, table.operations().current().lastSequenceNumber());\n+\n+    table.newFastAppend().appendFile(FILE_C).commit();\n+    Assert.assertEquals(\"Snapshot sequence number should match expected\",\n+        3, table.currentSnapshot().sequenceNumber());\n+  }\n+\n+  @Test\n+  public void testSingleTransaction() {\n+    Transaction txn = table.newTransaction();\n+    txn.newAppend().appendFile(FILE_A).commit();\n+    txn.commitTransaction();\n+    Assert.assertEquals(\"Snapshot sequence number should match expected\",\n+        1, table.currentSnapshot().sequenceNumber());\n+  }\n+\n+  @Test\n+  public void testConcurrentTransaction() {\n+    Transaction txn1 = table.newTransaction();\n+    Transaction txn2 = table.newTransaction();\n+    Transaction txn3 = table.newTransaction();\n+    Transaction txn4 = table.newTransaction();\n+\n+    txn1.newFastAppend().appendFile(FILE_A).commit();\n+    txn3.newOverwrite().addFile(FILE_C).commit();\n+    txn4.newDelete().deleteFile(FILE_A).commit();\n+    txn2.newAppend().appendFile(FILE_B).commit();\n+\n+    txn1.commitTransaction();\n+    txn2.commitTransaction();\n+    txn3.commitTransaction();\n+    txn4.commitTransaction();\n+\n+    Assert.assertEquals(\"Snapshot sequence number should match expected\",\n+        4, table.currentSnapshot().sequenceNumber());\n+    validateDataFiles(files(FILE_A, FILE_B, FILE_C), seqs(4, 2, 3));\n+  }\n+\n+  @Test\n+  public void testMultipleOperationsTransaction() {\n+    Transaction txn = table.newTransaction();\n+    txn.newAppend().appendFile(FILE_A).commit();\n+    Set<DataFile> toAddFiles = new HashSet<>();\n+    Set<DataFile> toDeleteFiles = new HashSet<>();\n+    toAddFiles.add(FILE_B);\n+    toDeleteFiles.add(FILE_A);\n+    txn.newRewrite().rewriteFiles(toDeleteFiles, toAddFiles).commit();\n+    txn.commitTransaction();\n+\n+    Assert.assertEquals(\"Snapshot sequence number should match expected\",\n+        2, table.currentSnapshot().sequenceNumber());\n+    validateDataFiles(files(FILE_A, FILE_B), seqs(2, 2));\n+  }\n+\n+  @Test\n+  public void testExpirationInTransaction() {\n+    table.newFastAppend().appendFile(FILE_A).commit();\n+    long snapshotId = table.currentSnapshot().snapshotId();\n+    table.newAppend().appendFile(FILE_B).commit();\n+\n+    Transaction txn = table.newTransaction();\n+    txn.expireSnapshots().expireSnapshotId(snapshotId).commit();\n+    txn.commitTransaction();\n+\n+    Assert.assertEquals(\"Snapshot sequence number should match expected\",\n+        2, table.currentSnapshot().sequenceNumber());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "97d3b3d349e13874b13b965c4643f9a81866875d"}, "originalPosition": 198}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE4NTAwNzkw", "url": "https://github.com/apache/iceberg/pull/974#pullrequestreview-418500790", "createdAt": "2020-05-26T17:01:54Z", "commit": {"oid": "97d3b3d349e13874b13b965c4643f9a81866875d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQxNzowMTo1NFrOGan2Sg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQxNzowMTo1NFrOGan2Sg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDU2OTAzNA==", "bodyText": "The table state resulting from each transaction needs to be validated, not just the final state.", "url": "https://github.com/apache/iceberg/pull/974#discussion_r430569034", "createdAt": "2020-05-26T17:01:54Z", "author": {"login": "rdblue"}, "path": "core/src/test/java/org/apache/iceberg/TestSequenceNumberForV2Table.java", "diffHunk": "@@ -0,0 +1,328 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg;\n+\n+import java.io.IOException;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Iterator;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import org.apache.iceberg.exceptions.CommitFailedException;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+public class TestSequenceNumberForV2Table extends TableTestBase {\n+\n+  public TestSequenceNumberForV2Table() {\n+    super(2);\n+  }\n+\n+  @Test\n+  public void testMergeAppend() throws IOException {\n+    table.newAppend().appendFile(FILE_A).commit();\n+    ManifestFile manifestFile = table.currentSnapshot().manifests().get(0);\n+    validateManifestEntries(manifestFile, 1, files(FILE_A), seqs(1));\n+    table.newAppend().appendFile(FILE_B).commit();\n+    manifestFile = table.currentSnapshot().manifests().get(0);\n+    validateManifestEntries(manifestFile, 2, files(FILE_B), seqs(2));\n+\n+    table.newAppend()\n+        .appendManifest(writeManifest(\"input-m0.avro\",\n+            manifestEntry(ManifestEntry.Status.ADDED, null, FILE_C)))\n+        .commit();\n+\n+    validateDataFiles(files(FILE_A, FILE_B, FILE_C), seqs(1, 2, 3));\n+\n+    table.updateProperties()\n+        .set(TableProperties.MANIFEST_MIN_MERGE_COUNT, \"1\")\n+        .commit();\n+\n+    table.newAppend()\n+        .appendManifest(writeManifest(\"input-m1.avro\",\n+            manifestEntry(ManifestEntry.Status.ADDED, null, FILE_D)))\n+        .commit();\n+\n+    manifestFile = table.currentSnapshot().manifests().stream()\n+        .filter(manifest -> manifest.snapshotId() == table.currentSnapshot().snapshotId())\n+        .collect(Collectors.toList()).get(0);\n+    validateManifestEntries(manifestFile, 4, files(FILE_A, FILE_B, FILE_C, FILE_D), seqs(1, 2, 3, 4));\n+    validateDataFiles(files(FILE_A, FILE_B, FILE_C, FILE_D), seqs(1, 2, 3, 4));\n+  }\n+\n+  @Test\n+  public void testRewrite() {\n+    table.newFastAppend().appendFile(FILE_A).commit();\n+    table.newFastAppend().appendFile(FILE_B).commit();\n+    Assert.assertEquals(2, table.currentSnapshot().sequenceNumber());\n+\n+    table.rewriteManifests().clusterBy(file -> \"\").commit();\n+    Assert.assertEquals(\"Snapshot sequence number should be 3\",\n+        3, table.currentSnapshot().sequenceNumber());\n+\n+    ManifestFile newManifest = table.currentSnapshot().manifests().stream()\n+        .filter(manifest -> manifest.snapshotId() == table.currentSnapshot().snapshotId())\n+        .collect(Collectors.toList()).get(0);\n+\n+    validateManifestEntries(newManifest, 3, files(FILE_A, FILE_B), seqs(1, 2));\n+  }\n+\n+  @Test\n+  public void testCommitConflict() {\n+    AppendFiles appendA = table.newFastAppend();\n+    appendA.appendFile(FILE_A).apply();\n+\n+    table.updateProperties()\n+        .set(TableProperties.COMMIT_NUM_RETRIES, \"0\")\n+        .commit();\n+\n+    table.ops().failCommits(1);\n+\n+    AssertHelpers.assertThrows(\"Should reject commit\",\n+        CommitFailedException.class, \"Injected failure\",\n+        () -> table.newFastAppend().appendFile(FILE_B).commit());\n+\n+    table.updateProperties()\n+        .set(TableProperties.COMMIT_NUM_RETRIES, \"5\")\n+        .commit();\n+\n+    appendA.commit();\n+\n+    Assert.assertEquals(1, table.currentSnapshot().sequenceNumber());\n+\n+    AppendFiles appendFiles = table.newFastAppend().appendFile(FILE_C);\n+    appendFiles.apply();\n+    table.newFastAppend().appendFile(FILE_D).commit();\n+    appendFiles.commit();\n+\n+    validateDataFiles(files(FILE_A, FILE_D, FILE_C), seqs(1, 2, 3));\n+  }\n+\n+  @Test\n+  public void testRollBack() {\n+    table.newFastAppend().appendFile(FILE_A).commit();\n+    long snapshotId = table.currentSnapshot().snapshotId();\n+\n+    table.newFastAppend().appendFile(FILE_B).commit();\n+    Assert.assertEquals(\"Snapshot sequence number should match expected\",\n+        2, table.currentSnapshot().sequenceNumber());\n+\n+    table.manageSnapshots().rollbackTo(snapshotId).commit();\n+    Assert.assertEquals(\"Snapshot sequence number should match expected\",\n+        1, table.currentSnapshot().sequenceNumber());\n+\n+    Assert.assertEquals(\"Table last sequence number should be 2\",\n+        2, table.operations().current().lastSequenceNumber());\n+\n+    table.newFastAppend().appendFile(FILE_C).commit();\n+    Assert.assertEquals(\"Snapshot sequence number should match expected\",\n+        3, table.currentSnapshot().sequenceNumber());\n+  }\n+\n+  @Test\n+  public void testSingleTransaction() {\n+    Transaction txn = table.newTransaction();\n+    txn.newAppend().appendFile(FILE_A).commit();\n+    txn.commitTransaction();\n+    Assert.assertEquals(\"Snapshot sequence number should match expected\",\n+        1, table.currentSnapshot().sequenceNumber());\n+  }\n+\n+  @Test\n+  public void testConcurrentTransaction() {\n+    Transaction txn1 = table.newTransaction();\n+    Transaction txn2 = table.newTransaction();\n+    Transaction txn3 = table.newTransaction();\n+    Transaction txn4 = table.newTransaction();\n+\n+    txn1.newFastAppend().appendFile(FILE_A).commit();\n+    txn3.newOverwrite().addFile(FILE_C).commit();\n+    txn4.newDelete().deleteFile(FILE_A).commit();\n+    txn2.newAppend().appendFile(FILE_B).commit();\n+\n+    txn1.commitTransaction();\n+    txn2.commitTransaction();\n+    txn3.commitTransaction();\n+    txn4.commitTransaction();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "97d3b3d349e13874b13b965c4643f9a81866875d"}, "originalPosition": 164}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE4NTAxNjMz", "url": "https://github.com/apache/iceberg/pull/974#pullrequestreview-418501633", "createdAt": "2020-05-26T17:03:00Z", "commit": {"oid": "97d3b3d349e13874b13b965c4643f9a81866875d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQxNzowMzowMFrOGan4oA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQxNzowMzowMFrOGan4oA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDU2OTYzMg==", "bodyText": "Overall, this is a good test. But you do need to add validations for the rest of the metadata.", "url": "https://github.com/apache/iceberg/pull/974#discussion_r430569632", "createdAt": "2020-05-26T17:03:00Z", "author": {"login": "rdblue"}, "path": "core/src/test/java/org/apache/iceberg/TestSequenceNumberForV2Table.java", "diffHunk": "@@ -0,0 +1,328 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg;\n+\n+import java.io.IOException;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Iterator;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import org.apache.iceberg.exceptions.CommitFailedException;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+public class TestSequenceNumberForV2Table extends TableTestBase {\n+\n+  public TestSequenceNumberForV2Table() {\n+    super(2);\n+  }\n+\n+  @Test\n+  public void testMergeAppend() throws IOException {\n+    table.newAppend().appendFile(FILE_A).commit();\n+    ManifestFile manifestFile = table.currentSnapshot().manifests().get(0);\n+    validateManifestEntries(manifestFile, 1, files(FILE_A), seqs(1));\n+    table.newAppend().appendFile(FILE_B).commit();\n+    manifestFile = table.currentSnapshot().manifests().get(0);\n+    validateManifestEntries(manifestFile, 2, files(FILE_B), seqs(2));\n+\n+    table.newAppend()\n+        .appendManifest(writeManifest(\"input-m0.avro\",\n+            manifestEntry(ManifestEntry.Status.ADDED, null, FILE_C)))\n+        .commit();\n+\n+    validateDataFiles(files(FILE_A, FILE_B, FILE_C), seqs(1, 2, 3));\n+\n+    table.updateProperties()\n+        .set(TableProperties.MANIFEST_MIN_MERGE_COUNT, \"1\")\n+        .commit();\n+\n+    table.newAppend()\n+        .appendManifest(writeManifest(\"input-m1.avro\",\n+            manifestEntry(ManifestEntry.Status.ADDED, null, FILE_D)))\n+        .commit();\n+\n+    manifestFile = table.currentSnapshot().manifests().stream()\n+        .filter(manifest -> manifest.snapshotId() == table.currentSnapshot().snapshotId())\n+        .collect(Collectors.toList()).get(0);\n+    validateManifestEntries(manifestFile, 4, files(FILE_A, FILE_B, FILE_C, FILE_D), seqs(1, 2, 3, 4));\n+    validateDataFiles(files(FILE_A, FILE_B, FILE_C, FILE_D), seqs(1, 2, 3, 4));\n+  }\n+\n+  @Test\n+  public void testRewrite() {\n+    table.newFastAppend().appendFile(FILE_A).commit();\n+    table.newFastAppend().appendFile(FILE_B).commit();\n+    Assert.assertEquals(2, table.currentSnapshot().sequenceNumber());\n+\n+    table.rewriteManifests().clusterBy(file -> \"\").commit();\n+    Assert.assertEquals(\"Snapshot sequence number should be 3\",\n+        3, table.currentSnapshot().sequenceNumber());\n+\n+    ManifestFile newManifest = table.currentSnapshot().manifests().stream()\n+        .filter(manifest -> manifest.snapshotId() == table.currentSnapshot().snapshotId())\n+        .collect(Collectors.toList()).get(0);\n+\n+    validateManifestEntries(newManifest, 3, files(FILE_A, FILE_B), seqs(1, 2));\n+  }\n+\n+  @Test\n+  public void testCommitConflict() {\n+    AppendFiles appendA = table.newFastAppend();\n+    appendA.appendFile(FILE_A).apply();\n+\n+    table.updateProperties()\n+        .set(TableProperties.COMMIT_NUM_RETRIES, \"0\")\n+        .commit();\n+\n+    table.ops().failCommits(1);\n+\n+    AssertHelpers.assertThrows(\"Should reject commit\",\n+        CommitFailedException.class, \"Injected failure\",\n+        () -> table.newFastAppend().appendFile(FILE_B).commit());\n+\n+    table.updateProperties()\n+        .set(TableProperties.COMMIT_NUM_RETRIES, \"5\")\n+        .commit();\n+\n+    appendA.commit();\n+\n+    Assert.assertEquals(1, table.currentSnapshot().sequenceNumber());\n+\n+    AppendFiles appendFiles = table.newFastAppend().appendFile(FILE_C);\n+    appendFiles.apply();\n+    table.newFastAppend().appendFile(FILE_D).commit();\n+    appendFiles.commit();\n+\n+    validateDataFiles(files(FILE_A, FILE_D, FILE_C), seqs(1, 2, 3));\n+  }\n+\n+  @Test\n+  public void testRollBack() {\n+    table.newFastAppend().appendFile(FILE_A).commit();\n+    long snapshotId = table.currentSnapshot().snapshotId();\n+\n+    table.newFastAppend().appendFile(FILE_B).commit();\n+    Assert.assertEquals(\"Snapshot sequence number should match expected\",\n+        2, table.currentSnapshot().sequenceNumber());\n+\n+    table.manageSnapshots().rollbackTo(snapshotId).commit();\n+    Assert.assertEquals(\"Snapshot sequence number should match expected\",\n+        1, table.currentSnapshot().sequenceNumber());\n+\n+    Assert.assertEquals(\"Table last sequence number should be 2\",\n+        2, table.operations().current().lastSequenceNumber());\n+\n+    table.newFastAppend().appendFile(FILE_C).commit();\n+    Assert.assertEquals(\"Snapshot sequence number should match expected\",\n+        3, table.currentSnapshot().sequenceNumber());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "97d3b3d349e13874b13b965c4643f9a81866875d"}, "originalPosition": 137}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "10c8c8c3a31b5b6aca169b778597dff1c028a3e0", "author": {"user": {"login": "chenjunjiedada", "name": "Chen, Junjie"}}, "url": "https://github.com/apache/iceberg/commit/10c8c8c3a31b5b6aca169b778597dff1c028a3e0", "committedDate": "2020-06-01T03:06:39Z", "message": "Always assign sequence number for adding manifest"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "760157be43d591bd8c0f2977d77d5b1329317c08", "author": {"user": {"login": "chenjunjiedada", "name": "Chen, Junjie"}}, "url": "https://github.com/apache/iceberg/commit/760157be43d591bd8c0f2977d77d5b1329317c08", "committedDate": "2020-06-01T03:06:39Z", "message": "revert changes for adding sequence number"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3f6fae3fc53baee44f6dab9dd5ea3387b793ae5d", "author": {"user": {"login": "chenjunjiedada", "name": "Chen, Junjie"}}, "url": "https://github.com/apache/iceberg/commit/3f6fae3fc53baee44f6dab9dd5ea3387b793ae5d", "committedDate": "2020-06-01T03:11:46Z", "message": "Use wrapper for adding entries from added manifests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "20d55def5b4c79d8765b8562e184ec8afb902f31", "author": {"user": {"login": "chenjunjiedada", "name": "Chen, Junjie"}}, "url": "https://github.com/apache/iceberg/commit/20d55def5b4c79d8765b8562e184ec8afb902f31", "committedDate": "2020-06-01T03:11:46Z", "message": "address comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ba27dd22bff27e3841cb46701c3113425a422f87", "author": {"user": {"login": "chenjunjiedada", "name": "Chen, Junjie"}}, "url": "https://github.com/apache/iceberg/commit/ba27dd22bff27e3841cb46701c3113425a422f87", "committedDate": "2020-06-01T03:11:47Z", "message": "fix unit test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9d848c423b707e3687af2a96c60d2d0c93441348", "author": {"user": {"login": "chenjunjiedada", "name": "Chen, Junjie"}}, "url": "https://github.com/apache/iceberg/commit/9d848c423b707e3687af2a96c60d2d0c93441348", "committedDate": "2020-06-01T03:11:47Z", "message": "remove duplicate unit test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "17101489d445ba8688b8a69f5530f225c06f8d1b", "author": {"user": {"login": "chenjunjiedada", "name": "Chen, Junjie"}}, "url": "https://github.com/apache/iceberg/commit/17101489d445ba8688b8a69f5530f225c06f8d1b", "committedDate": "2020-06-01T03:11:47Z", "message": "address comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "798d95d51ac985b029e3c43cd889d13b4fa61bcd", "author": {"user": {"login": "chenjunjiedada", "name": "Chen, Junjie"}}, "url": "https://github.com/apache/iceberg/commit/798d95d51ac985b029e3c43cd889d13b4fa61bcd", "committedDate": "2020-06-01T03:41:48Z", "message": "rebase to master"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "cafa9058c62dcbf7e5ed363436642acf4f726755", "author": {"user": {"login": "chenjunjiedada", "name": "Chen, Junjie"}}, "url": "https://github.com/apache/iceberg/commit/cafa9058c62dcbf7e5ed363436642acf4f726755", "committedDate": "2020-05-27T15:06:54Z", "message": "address comments"}, "afterCommit": {"oid": "798d95d51ac985b029e3c43cd889d13b4fa61bcd", "author": {"user": {"login": "chenjunjiedada", "name": "Chen, Junjie"}}, "url": "https://github.com/apache/iceberg/commit/798d95d51ac985b029e3c43cd889d13b4fa61bcd", "committedDate": "2020-06-01T03:41:48Z", "message": "rebase to master"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4637, "cost": 1, "resetAt": "2021-10-29T19:57:52Z"}}}