{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY4MTIxNDM5", "number": 1342, "reviewThreads": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQxODoyNDowM1rOEYkiTg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQxOTo1MzozMVrOEYmXIQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0MTk5ODg2OnYy", "diffSide": "LEFT", "path": "core/src/main/java/org/apache/iceberg/hadoop/HadoopTables.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQxODoyNDowM1rOHA-qdw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQxOTo1MToyNlrOHBBiHw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDc4ODcyNw==", "bodyText": "An alternative to this implementation that I considered was modifying findTable itself. The problem with this is that to do that implementation we need to extract the loadMetadataTable from below. I think this is a cleaner solution but we could do something where we make a StaticTables.java which findTables uses to either return a basetable or metadataTable", "url": "https://github.com/apache/iceberg/pull/1342#discussion_r470788727", "createdAt": "2020-08-14T18:24:03Z", "author": {"login": "RussellSpitzer"}, "path": "core/src/main/java/org/apache/iceberg/hadoop/HadoopTables.java", "diffHunk": "@@ -68,27 +71,26 @@ public HadoopTables(Configuration conf) {\n    */\n   @Override\n   public Table load(String location) {\n-    TableOperations ops = newTableOps(location);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "41ed1f70c5b0d76885f087f3fe3d7aa5f92397ae"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDgzNTc0Mw==", "bodyText": "I like this. It is more straightforward than the previous implementation.", "url": "https://github.com/apache/iceberg/pull/1342#discussion_r470835743", "createdAt": "2020-08-14T19:51:26Z", "author": {"login": "rdblue"}, "path": "core/src/main/java/org/apache/iceberg/hadoop/HadoopTables.java", "diffHunk": "@@ -68,27 +71,26 @@ public HadoopTables(Configuration conf) {\n    */\n   @Override\n   public Table load(String location) {\n-    TableOperations ops = newTableOps(location);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDc4ODcyNw=="}, "originalCommit": {"oid": "41ed1f70c5b0d76885f087f3fe3d7aa5f92397ae"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0MjI1MzAyOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/apache/iceberg/StaticTableOperations.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQxOTozNjo0MFrOHBBKsw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQxOTo1MzowMFrOHBBk4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDgyOTc0Nw==", "bodyText": "Should this be metadataLocation to be more specific?", "url": "https://github.com/apache/iceberg/pull/1342#discussion_r470829747", "createdAt": "2020-08-14T19:36:40Z", "author": {"login": "rdblue"}, "path": "core/src/main/java/org/apache/iceberg/StaticTableOperations.java", "diffHunk": "@@ -0,0 +1,72 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ */\n+\n+package org.apache.iceberg;\n+\n+import java.nio.file.Paths;\n+import org.apache.iceberg.io.FileIO;\n+import org.apache.iceberg.io.LocationProvider;\n+\n+/**\n+ * Representation of an immutable snapshot of Table State that can be used in\n+ * other Iceberg Functions.\n+ */\n+public class StaticTableOperations implements TableOperations {\n+  private final TableMetadata staticMetadata;\n+  private final FileIO io;\n+\n+  /**\n+   * Creates a StaticTableOperations tied to a specific static version of the TableMetadata\n+   */\n+  public StaticTableOperations(String location, FileIO io) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "41ed1f70c5b0d76885f087f3fe3d7aa5f92397ae"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDgzNjQ1MA==", "bodyText": "metadataFileLocation? That would mirror the TableMetadata object", "url": "https://github.com/apache/iceberg/pull/1342#discussion_r470836450", "createdAt": "2020-08-14T19:53:00Z", "author": {"login": "RussellSpitzer"}, "path": "core/src/main/java/org/apache/iceberg/StaticTableOperations.java", "diffHunk": "@@ -0,0 +1,72 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ */\n+\n+package org.apache.iceberg;\n+\n+import java.nio.file.Paths;\n+import org.apache.iceberg.io.FileIO;\n+import org.apache.iceberg.io.LocationProvider;\n+\n+/**\n+ * Representation of an immutable snapshot of Table State that can be used in\n+ * other Iceberg Functions.\n+ */\n+public class StaticTableOperations implements TableOperations {\n+  private final TableMetadata staticMetadata;\n+  private final FileIO io;\n+\n+  /**\n+   * Creates a StaticTableOperations tied to a specific static version of the TableMetadata\n+   */\n+  public StaticTableOperations(String location, FileIO io) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDgyOTc0Nw=="}, "originalCommit": {"oid": "41ed1f70c5b0d76885f087f3fe3d7aa5f92397ae"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0MjI2MTQyOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/apache/iceberg/StaticTableOperations.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQxOTozOTo0MVrOHBBPvA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQxOTo0MjoxNVrOHBBT6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDgzMTAzNg==", "bodyText": "I'm not sure that I would say that the TableOperations implementation is a representation, and it is probably a good idea to avoid using \"snapshot\" to mean something other than a Snapshot. How about \"TableOperations  implementation that provides access to metadata for a Table at some point in time, using a table metadata location\"?", "url": "https://github.com/apache/iceberg/pull/1342#discussion_r470831036", "createdAt": "2020-08-14T19:39:41Z", "author": {"login": "rdblue"}, "path": "core/src/main/java/org/apache/iceberg/StaticTableOperations.java", "diffHunk": "@@ -0,0 +1,72 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ */\n+\n+package org.apache.iceberg;\n+\n+import java.nio.file.Paths;\n+import org.apache.iceberg.io.FileIO;\n+import org.apache.iceberg.io.LocationProvider;\n+\n+/**\n+ * Representation of an immutable snapshot of Table State that can be used in\n+ * other Iceberg Functions.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "41ed1f70c5b0d76885f087f3fe3d7aa5f92397ae"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDgzMjEwNg==", "bodyText": "Sounds good to me, I had a lot of difficulty with verbiage in comments for this", "url": "https://github.com/apache/iceberg/pull/1342#discussion_r470832106", "createdAt": "2020-08-14T19:42:15Z", "author": {"login": "RussellSpitzer"}, "path": "core/src/main/java/org/apache/iceberg/StaticTableOperations.java", "diffHunk": "@@ -0,0 +1,72 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ */\n+\n+package org.apache.iceberg;\n+\n+import java.nio.file.Paths;\n+import org.apache.iceberg.io.FileIO;\n+import org.apache.iceberg.io.LocationProvider;\n+\n+/**\n+ * Representation of an immutable snapshot of Table State that can be used in\n+ * other Iceberg Functions.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDgzMTAzNg=="}, "originalCommit": {"oid": "41ed1f70c5b0d76885f087f3fe3d7aa5f92397ae"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0MjI3MDM2OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/apache/iceberg/hadoop/HadoopTables.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQxOTo0Mjo1MlrOHBBU-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQyMTowMzoyNlrOHBDQjw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDgzMjM3OQ==", "bodyText": "A couple of style nits: There should be a space before the start of the comment text, and we typically use sentence case, unless referring to specific objects, like MetadataTable (no need to capitalize \"Table\" and \"Load\").", "url": "https://github.com/apache/iceberg/pull/1342#discussion_r470832379", "createdAt": "2020-08-14T19:42:52Z", "author": {"login": "rdblue"}, "path": "core/src/main/java/org/apache/iceberg/hadoop/HadoopTables.java", "diffHunk": "@@ -68,27 +71,26 @@ public HadoopTables(Configuration conf) {\n    */\n   @Override\n   public Table load(String location) {\n-    TableOperations ops = newTableOps(location);\n-    if (ops.current() == null) {\n+    //Possibly Load a Metadata Table\n+    if (location.contains(\"#\") && !location.endsWith(\"#\")) {\n       // try to resolve a metadata table, which we encode as URI fragments\n       // e.g. hdfs:///warehouse/my_table#snapshots\n       int hashIndex = location.lastIndexOf('#');\n-      if (hashIndex != -1 && location.length() - 1 != hashIndex) {\n-        // we found char '#', and it is not the last char of location\n-        String baseTable = location.substring(0, hashIndex);\n-        String metaTable = location.substring(hashIndex + 1);\n-        MetadataTableType type = MetadataTableType.from(metaTable);\n-        if (type != null) {\n-          return loadMetadataTable(baseTable, type);\n-        } else {\n-          throw new NoSuchTableException(\"Table does not exist at location: \" + location);\n-        }\n-      } else {\n-        throw new NoSuchTableException(\"Table does not exist at location: \" + location);\n+      String baseTable = location.substring(0, hashIndex);\n+      String metaTable = location.substring(hashIndex + 1);\n+      MetadataTableType type = MetadataTableType.from(metaTable);\n+      if (type != null) {\n+        return loadMetadataTable(baseTable, type);\n       }\n     }\n \n-    return new BaseTable(ops, location);\n+    //Normal Table Load if we haven't loaded a MetadataTable", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "41ed1f70c5b0d76885f087f3fe3d7aa5f92397ae"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDg1MzU4OQ==", "bodyText": "cleaned up!", "url": "https://github.com/apache/iceberg/pull/1342#discussion_r470853589", "createdAt": "2020-08-14T20:36:08Z", "author": {"login": "RussellSpitzer"}, "path": "core/src/main/java/org/apache/iceberg/hadoop/HadoopTables.java", "diffHunk": "@@ -68,27 +71,26 @@ public HadoopTables(Configuration conf) {\n    */\n   @Override\n   public Table load(String location) {\n-    TableOperations ops = newTableOps(location);\n-    if (ops.current() == null) {\n+    //Possibly Load a Metadata Table\n+    if (location.contains(\"#\") && !location.endsWith(\"#\")) {\n       // try to resolve a metadata table, which we encode as URI fragments\n       // e.g. hdfs:///warehouse/my_table#snapshots\n       int hashIndex = location.lastIndexOf('#');\n-      if (hashIndex != -1 && location.length() - 1 != hashIndex) {\n-        // we found char '#', and it is not the last char of location\n-        String baseTable = location.substring(0, hashIndex);\n-        String metaTable = location.substring(hashIndex + 1);\n-        MetadataTableType type = MetadataTableType.from(metaTable);\n-        if (type != null) {\n-          return loadMetadataTable(baseTable, type);\n-        } else {\n-          throw new NoSuchTableException(\"Table does not exist at location: \" + location);\n-        }\n-      } else {\n-        throw new NoSuchTableException(\"Table does not exist at location: \" + location);\n+      String baseTable = location.substring(0, hashIndex);\n+      String metaTable = location.substring(hashIndex + 1);\n+      MetadataTableType type = MetadataTableType.from(metaTable);\n+      if (type != null) {\n+        return loadMetadataTable(baseTable, type);\n       }\n     }\n \n-    return new BaseTable(ops, location);\n+    //Normal Table Load if we haven't loaded a MetadataTable", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDgzMjM3OQ=="}, "originalCommit": {"oid": "41ed1f70c5b0d76885f087f3fe3d7aa5f92397ae"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDg2NDAxNQ==", "bodyText": "Cleaned it up", "url": "https://github.com/apache/iceberg/pull/1342#discussion_r470864015", "createdAt": "2020-08-14T21:03:26Z", "author": {"login": "RussellSpitzer"}, "path": "core/src/main/java/org/apache/iceberg/hadoop/HadoopTables.java", "diffHunk": "@@ -68,27 +71,26 @@ public HadoopTables(Configuration conf) {\n    */\n   @Override\n   public Table load(String location) {\n-    TableOperations ops = newTableOps(location);\n-    if (ops.current() == null) {\n+    //Possibly Load a Metadata Table\n+    if (location.contains(\"#\") && !location.endsWith(\"#\")) {\n       // try to resolve a metadata table, which we encode as URI fragments\n       // e.g. hdfs:///warehouse/my_table#snapshots\n       int hashIndex = location.lastIndexOf('#');\n-      if (hashIndex != -1 && location.length() - 1 != hashIndex) {\n-        // we found char '#', and it is not the last char of location\n-        String baseTable = location.substring(0, hashIndex);\n-        String metaTable = location.substring(hashIndex + 1);\n-        MetadataTableType type = MetadataTableType.from(metaTable);\n-        if (type != null) {\n-          return loadMetadataTable(baseTable, type);\n-        } else {\n-          throw new NoSuchTableException(\"Table does not exist at location: \" + location);\n-        }\n-      } else {\n-        throw new NoSuchTableException(\"Table does not exist at location: \" + location);\n+      String baseTable = location.substring(0, hashIndex);\n+      String metaTable = location.substring(hashIndex + 1);\n+      MetadataTableType type = MetadataTableType.from(metaTable);\n+      if (type != null) {\n+        return loadMetadataTable(baseTable, type);\n       }\n     }\n \n-    return new BaseTable(ops, location);\n+    //Normal Table Load if we haven't loaded a MetadataTable", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDgzMjM3OQ=="}, "originalCommit": {"oid": "41ed1f70c5b0d76885f087f3fe3d7aa5f92397ae"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0MjI3NjU5OnYy", "diffSide": "RIGHT", "path": "core/src/test/java/org/apache/iceberg/hadoop/TestStaticTable.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQxOTo0NToxNFrOHBBYzg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQyMTowMjoyMlrOHBDPGQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDgzMzM1OA==", "bodyText": "This would be true of any different table instance that refers to the same table because refresh was not called. I think this test should call staticTable.refresh() after the modifications to test what you intend.", "url": "https://github.com/apache/iceberg/pull/1342#discussion_r470833358", "createdAt": "2020-08-14T19:45:14Z", "author": {"login": "rdblue"}, "path": "core/src/test/java/org/apache/iceberg/hadoop/TestStaticTable.java", "diffHunk": "@@ -0,0 +1,79 @@\n+package org.apache.iceberg.hadoop;\n+\n+import com.google.common.collect.Iterables;\n+import com.google.common.collect.Maps;\n+import org.apache.iceberg.HasTableOperations;\n+import org.apache.iceberg.MetadataTableType;\n+import org.apache.iceberg.StaticTableOperations;\n+import org.apache.iceberg.Table;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+public class TestStaticTable extends HadoopTableTestBase {\n+\n+  private Table getStaticTable() {\n+    return TABLES.load(((HasTableOperations) table).operations().current().metadataFileLocation());\n+  }\n+\n+  private Table getStaticTable(MetadataTableType type) {\n+    return TABLES.load(((HasTableOperations) table).operations().current().metadataFileLocation() + \"#\" + type);\n+  }\n+\n+  @Test\n+  public void testLoadFromMetadata() {\n+    Table staticTable = getStaticTable();\n+    Assert.assertTrue(\"Loading a metadata file based table should return StaticTableOperations\",\n+        ((HasTableOperations) staticTable).operations() instanceof StaticTableOperations);\n+  }\n+\n+  @Test(expected = UnsupportedOperationException.class)\n+  public void testCannotBeAddedTo(){\n+    Table staticTable = getStaticTable();\n+    staticTable.newOverwrite().addFile(FILE_A).commit();\n+  }\n+\n+  @Test(expected = UnsupportedOperationException.class)\n+  public void testCannotBeDeletedFrom(){\n+    table.newAppend().appendFile(FILE_A).commit();\n+    Table staticTable = getStaticTable();\n+    staticTable.newDelete().deleteFile(FILE_A).commit();\n+  }\n+\n+  @Test\n+  public void testHasSameProperties(){\n+    table.newAppend().appendFile(FILE_A).commit();\n+    table.newAppend().appendFile(FILE_B).commit();\n+    table.newOverwrite().deleteFile(FILE_B).addFile(FILE_C).commit();\n+    Table staticTable = getStaticTable();\n+    Assert.assertTrue(\"Same history?\",\n+        table.history().containsAll(staticTable.history()));\n+    Assert.assertTrue(\"Same snapshot?\",\n+        table.currentSnapshot().snapshotId() ==  staticTable.currentSnapshot().snapshotId());\n+    Assert.assertTrue(\"Same properties?\",\n+        Maps.difference(table.properties(), staticTable.properties()).areEqual());\n+  }\n+\n+  @Test\n+  public void testImmutable() {\n+    table.newAppend().appendFile(FILE_A).commit();\n+    Table staticTable = getStaticTable();\n+    long originalSnapshot = table.currentSnapshot().snapshotId();\n+\n+    table.newAppend().appendFile(FILE_B).commit();\n+    table.newOverwrite().deleteFile(FILE_B).addFile(FILE_C).commit();\n+\n+    Assert.assertEquals(\"Snapshot unchanged after table modified\",\n+        staticTable.currentSnapshot().snapshotId(), originalSnapshot);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "41ed1f70c5b0d76885f087f3fe3d7aa5f92397ae"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDg1NDQ0NQ==", "bodyText": "Sgtm", "url": "https://github.com/apache/iceberg/pull/1342#discussion_r470854445", "createdAt": "2020-08-14T20:38:33Z", "author": {"login": "RussellSpitzer"}, "path": "core/src/test/java/org/apache/iceberg/hadoop/TestStaticTable.java", "diffHunk": "@@ -0,0 +1,79 @@\n+package org.apache.iceberg.hadoop;\n+\n+import com.google.common.collect.Iterables;\n+import com.google.common.collect.Maps;\n+import org.apache.iceberg.HasTableOperations;\n+import org.apache.iceberg.MetadataTableType;\n+import org.apache.iceberg.StaticTableOperations;\n+import org.apache.iceberg.Table;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+public class TestStaticTable extends HadoopTableTestBase {\n+\n+  private Table getStaticTable() {\n+    return TABLES.load(((HasTableOperations) table).operations().current().metadataFileLocation());\n+  }\n+\n+  private Table getStaticTable(MetadataTableType type) {\n+    return TABLES.load(((HasTableOperations) table).operations().current().metadataFileLocation() + \"#\" + type);\n+  }\n+\n+  @Test\n+  public void testLoadFromMetadata() {\n+    Table staticTable = getStaticTable();\n+    Assert.assertTrue(\"Loading a metadata file based table should return StaticTableOperations\",\n+        ((HasTableOperations) staticTable).operations() instanceof StaticTableOperations);\n+  }\n+\n+  @Test(expected = UnsupportedOperationException.class)\n+  public void testCannotBeAddedTo(){\n+    Table staticTable = getStaticTable();\n+    staticTable.newOverwrite().addFile(FILE_A).commit();\n+  }\n+\n+  @Test(expected = UnsupportedOperationException.class)\n+  public void testCannotBeDeletedFrom(){\n+    table.newAppend().appendFile(FILE_A).commit();\n+    Table staticTable = getStaticTable();\n+    staticTable.newDelete().deleteFile(FILE_A).commit();\n+  }\n+\n+  @Test\n+  public void testHasSameProperties(){\n+    table.newAppend().appendFile(FILE_A).commit();\n+    table.newAppend().appendFile(FILE_B).commit();\n+    table.newOverwrite().deleteFile(FILE_B).addFile(FILE_C).commit();\n+    Table staticTable = getStaticTable();\n+    Assert.assertTrue(\"Same history?\",\n+        table.history().containsAll(staticTable.history()));\n+    Assert.assertTrue(\"Same snapshot?\",\n+        table.currentSnapshot().snapshotId() ==  staticTable.currentSnapshot().snapshotId());\n+    Assert.assertTrue(\"Same properties?\",\n+        Maps.difference(table.properties(), staticTable.properties()).areEqual());\n+  }\n+\n+  @Test\n+  public void testImmutable() {\n+    table.newAppend().appendFile(FILE_A).commit();\n+    Table staticTable = getStaticTable();\n+    long originalSnapshot = table.currentSnapshot().snapshotId();\n+\n+    table.newAppend().appendFile(FILE_B).commit();\n+    table.newOverwrite().deleteFile(FILE_B).addFile(FILE_C).commit();\n+\n+    Assert.assertEquals(\"Snapshot unchanged after table modified\",\n+        staticTable.currentSnapshot().snapshotId(), originalSnapshot);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDgzMzM1OA=="}, "originalCommit": {"oid": "41ed1f70c5b0d76885f087f3fe3d7aa5f92397ae"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDg2MzY0MQ==", "bodyText": "Got it!", "url": "https://github.com/apache/iceberg/pull/1342#discussion_r470863641", "createdAt": "2020-08-14T21:02:22Z", "author": {"login": "RussellSpitzer"}, "path": "core/src/test/java/org/apache/iceberg/hadoop/TestStaticTable.java", "diffHunk": "@@ -0,0 +1,79 @@\n+package org.apache.iceberg.hadoop;\n+\n+import com.google.common.collect.Iterables;\n+import com.google.common.collect.Maps;\n+import org.apache.iceberg.HasTableOperations;\n+import org.apache.iceberg.MetadataTableType;\n+import org.apache.iceberg.StaticTableOperations;\n+import org.apache.iceberg.Table;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+public class TestStaticTable extends HadoopTableTestBase {\n+\n+  private Table getStaticTable() {\n+    return TABLES.load(((HasTableOperations) table).operations().current().metadataFileLocation());\n+  }\n+\n+  private Table getStaticTable(MetadataTableType type) {\n+    return TABLES.load(((HasTableOperations) table).operations().current().metadataFileLocation() + \"#\" + type);\n+  }\n+\n+  @Test\n+  public void testLoadFromMetadata() {\n+    Table staticTable = getStaticTable();\n+    Assert.assertTrue(\"Loading a metadata file based table should return StaticTableOperations\",\n+        ((HasTableOperations) staticTable).operations() instanceof StaticTableOperations);\n+  }\n+\n+  @Test(expected = UnsupportedOperationException.class)\n+  public void testCannotBeAddedTo(){\n+    Table staticTable = getStaticTable();\n+    staticTable.newOverwrite().addFile(FILE_A).commit();\n+  }\n+\n+  @Test(expected = UnsupportedOperationException.class)\n+  public void testCannotBeDeletedFrom(){\n+    table.newAppend().appendFile(FILE_A).commit();\n+    Table staticTable = getStaticTable();\n+    staticTable.newDelete().deleteFile(FILE_A).commit();\n+  }\n+\n+  @Test\n+  public void testHasSameProperties(){\n+    table.newAppend().appendFile(FILE_A).commit();\n+    table.newAppend().appendFile(FILE_B).commit();\n+    table.newOverwrite().deleteFile(FILE_B).addFile(FILE_C).commit();\n+    Table staticTable = getStaticTable();\n+    Assert.assertTrue(\"Same history?\",\n+        table.history().containsAll(staticTable.history()));\n+    Assert.assertTrue(\"Same snapshot?\",\n+        table.currentSnapshot().snapshotId() ==  staticTable.currentSnapshot().snapshotId());\n+    Assert.assertTrue(\"Same properties?\",\n+        Maps.difference(table.properties(), staticTable.properties()).areEqual());\n+  }\n+\n+  @Test\n+  public void testImmutable() {\n+    table.newAppend().appendFile(FILE_A).commit();\n+    Table staticTable = getStaticTable();\n+    long originalSnapshot = table.currentSnapshot().snapshotId();\n+\n+    table.newAppend().appendFile(FILE_B).commit();\n+    table.newOverwrite().deleteFile(FILE_B).addFile(FILE_C).commit();\n+\n+    Assert.assertEquals(\"Snapshot unchanged after table modified\",\n+        staticTable.currentSnapshot().snapshotId(), originalSnapshot);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDgzMzM1OA=="}, "originalCommit": {"oid": "41ed1f70c5b0d76885f087f3fe3d7aa5f92397ae"}, "originalPosition": 66}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0MjI3ODgxOnYy", "diffSide": "RIGHT", "path": "core/src/test/java/org/apache/iceberg/hadoop/TestStaticTable.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQxOTo0NjoxMlrOHBBaNA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQyMDo1MjozNlrOHBC_tA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDgzMzcxNg==", "bodyText": "When is this needed?\nAlso, style nit: no space between arguments to replace.", "url": "https://github.com/apache/iceberg/pull/1342#discussion_r470833716", "createdAt": "2020-08-14T19:46:12Z", "author": {"login": "rdblue"}, "path": "core/src/test/java/org/apache/iceberg/hadoop/TestStaticTable.java", "diffHunk": "@@ -0,0 +1,79 @@\n+package org.apache.iceberg.hadoop;\n+\n+import com.google.common.collect.Iterables;\n+import com.google.common.collect.Maps;\n+import org.apache.iceberg.HasTableOperations;\n+import org.apache.iceberg.MetadataTableType;\n+import org.apache.iceberg.StaticTableOperations;\n+import org.apache.iceberg.Table;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+public class TestStaticTable extends HadoopTableTestBase {\n+\n+  private Table getStaticTable() {\n+    return TABLES.load(((HasTableOperations) table).operations().current().metadataFileLocation());\n+  }\n+\n+  private Table getStaticTable(MetadataTableType type) {\n+    return TABLES.load(((HasTableOperations) table).operations().current().metadataFileLocation() + \"#\" + type);\n+  }\n+\n+  @Test\n+  public void testLoadFromMetadata() {\n+    Table staticTable = getStaticTable();\n+    Assert.assertTrue(\"Loading a metadata file based table should return StaticTableOperations\",\n+        ((HasTableOperations) staticTable).operations() instanceof StaticTableOperations);\n+  }\n+\n+  @Test(expected = UnsupportedOperationException.class)\n+  public void testCannotBeAddedTo(){\n+    Table staticTable = getStaticTable();\n+    staticTable.newOverwrite().addFile(FILE_A).commit();\n+  }\n+\n+  @Test(expected = UnsupportedOperationException.class)\n+  public void testCannotBeDeletedFrom(){\n+    table.newAppend().appendFile(FILE_A).commit();\n+    Table staticTable = getStaticTable();\n+    staticTable.newDelete().deleteFile(FILE_A).commit();\n+  }\n+\n+  @Test\n+  public void testHasSameProperties(){\n+    table.newAppend().appendFile(FILE_A).commit();\n+    table.newAppend().appendFile(FILE_B).commit();\n+    table.newOverwrite().deleteFile(FILE_B).addFile(FILE_C).commit();\n+    Table staticTable = getStaticTable();\n+    Assert.assertTrue(\"Same history?\",\n+        table.history().containsAll(staticTable.history()));\n+    Assert.assertTrue(\"Same snapshot?\",\n+        table.currentSnapshot().snapshotId() ==  staticTable.currentSnapshot().snapshotId());\n+    Assert.assertTrue(\"Same properties?\",\n+        Maps.difference(table.properties(), staticTable.properties()).areEqual());\n+  }\n+\n+  @Test\n+  public void testImmutable() {\n+    table.newAppend().appendFile(FILE_A).commit();\n+    Table staticTable = getStaticTable();\n+    long originalSnapshot = table.currentSnapshot().snapshotId();\n+\n+    table.newAppend().appendFile(FILE_B).commit();\n+    table.newOverwrite().deleteFile(FILE_B).addFile(FILE_C).commit();\n+\n+    Assert.assertEquals(\"Snapshot unchanged after table modified\",\n+        staticTable.currentSnapshot().snapshotId(), originalSnapshot);\n+  }\n+\n+  @Test\n+  public void testMetadataTables() {\n+    for (MetadataTableType type: MetadataTableType.values()) {\n+      String enumName = type.name().replace(\"_\",\"\").toLowerCase();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "41ed1f70c5b0d76885f087f3fe3d7aa5f92397ae"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDgzNDE1Nw==", "bodyText": "ALL_DATA_FILES, ALL_MANIFESTS, ALL_ENTRIES\nAll the style things just make me want to upgrade the Checkstyle version even more :) I forgot to run in Intellij where I can force the newer version", "url": "https://github.com/apache/iceberg/pull/1342#discussion_r470834157", "createdAt": "2020-08-14T19:47:23Z", "author": {"login": "RussellSpitzer"}, "path": "core/src/test/java/org/apache/iceberg/hadoop/TestStaticTable.java", "diffHunk": "@@ -0,0 +1,79 @@\n+package org.apache.iceberg.hadoop;\n+\n+import com.google.common.collect.Iterables;\n+import com.google.common.collect.Maps;\n+import org.apache.iceberg.HasTableOperations;\n+import org.apache.iceberg.MetadataTableType;\n+import org.apache.iceberg.StaticTableOperations;\n+import org.apache.iceberg.Table;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+public class TestStaticTable extends HadoopTableTestBase {\n+\n+  private Table getStaticTable() {\n+    return TABLES.load(((HasTableOperations) table).operations().current().metadataFileLocation());\n+  }\n+\n+  private Table getStaticTable(MetadataTableType type) {\n+    return TABLES.load(((HasTableOperations) table).operations().current().metadataFileLocation() + \"#\" + type);\n+  }\n+\n+  @Test\n+  public void testLoadFromMetadata() {\n+    Table staticTable = getStaticTable();\n+    Assert.assertTrue(\"Loading a metadata file based table should return StaticTableOperations\",\n+        ((HasTableOperations) staticTable).operations() instanceof StaticTableOperations);\n+  }\n+\n+  @Test(expected = UnsupportedOperationException.class)\n+  public void testCannotBeAddedTo(){\n+    Table staticTable = getStaticTable();\n+    staticTable.newOverwrite().addFile(FILE_A).commit();\n+  }\n+\n+  @Test(expected = UnsupportedOperationException.class)\n+  public void testCannotBeDeletedFrom(){\n+    table.newAppend().appendFile(FILE_A).commit();\n+    Table staticTable = getStaticTable();\n+    staticTable.newDelete().deleteFile(FILE_A).commit();\n+  }\n+\n+  @Test\n+  public void testHasSameProperties(){\n+    table.newAppend().appendFile(FILE_A).commit();\n+    table.newAppend().appendFile(FILE_B).commit();\n+    table.newOverwrite().deleteFile(FILE_B).addFile(FILE_C).commit();\n+    Table staticTable = getStaticTable();\n+    Assert.assertTrue(\"Same history?\",\n+        table.history().containsAll(staticTable.history()));\n+    Assert.assertTrue(\"Same snapshot?\",\n+        table.currentSnapshot().snapshotId() ==  staticTable.currentSnapshot().snapshotId());\n+    Assert.assertTrue(\"Same properties?\",\n+        Maps.difference(table.properties(), staticTable.properties()).areEqual());\n+  }\n+\n+  @Test\n+  public void testImmutable() {\n+    table.newAppend().appendFile(FILE_A).commit();\n+    Table staticTable = getStaticTable();\n+    long originalSnapshot = table.currentSnapshot().snapshotId();\n+\n+    table.newAppend().appendFile(FILE_B).commit();\n+    table.newOverwrite().deleteFile(FILE_B).addFile(FILE_C).commit();\n+\n+    Assert.assertEquals(\"Snapshot unchanged after table modified\",\n+        staticTable.currentSnapshot().snapshotId(), originalSnapshot);\n+  }\n+\n+  @Test\n+  public void testMetadataTables() {\n+    for (MetadataTableType type: MetadataTableType.values()) {\n+      String enumName = type.name().replace(\"_\",\"\").toLowerCase();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDgzMzcxNg=="}, "originalCommit": {"oid": "41ed1f70c5b0d76885f087f3fe3d7aa5f92397ae"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDgzNzMxNQ==", "bodyText": "I thought those were loaded using all_data_files, all_manifests, etc. and not alldatafiles.", "url": "https://github.com/apache/iceberg/pull/1342#discussion_r470837315", "createdAt": "2020-08-14T19:55:00Z", "author": {"login": "rdblue"}, "path": "core/src/test/java/org/apache/iceberg/hadoop/TestStaticTable.java", "diffHunk": "@@ -0,0 +1,79 @@\n+package org.apache.iceberg.hadoop;\n+\n+import com.google.common.collect.Iterables;\n+import com.google.common.collect.Maps;\n+import org.apache.iceberg.HasTableOperations;\n+import org.apache.iceberg.MetadataTableType;\n+import org.apache.iceberg.StaticTableOperations;\n+import org.apache.iceberg.Table;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+public class TestStaticTable extends HadoopTableTestBase {\n+\n+  private Table getStaticTable() {\n+    return TABLES.load(((HasTableOperations) table).operations().current().metadataFileLocation());\n+  }\n+\n+  private Table getStaticTable(MetadataTableType type) {\n+    return TABLES.load(((HasTableOperations) table).operations().current().metadataFileLocation() + \"#\" + type);\n+  }\n+\n+  @Test\n+  public void testLoadFromMetadata() {\n+    Table staticTable = getStaticTable();\n+    Assert.assertTrue(\"Loading a metadata file based table should return StaticTableOperations\",\n+        ((HasTableOperations) staticTable).operations() instanceof StaticTableOperations);\n+  }\n+\n+  @Test(expected = UnsupportedOperationException.class)\n+  public void testCannotBeAddedTo(){\n+    Table staticTable = getStaticTable();\n+    staticTable.newOverwrite().addFile(FILE_A).commit();\n+  }\n+\n+  @Test(expected = UnsupportedOperationException.class)\n+  public void testCannotBeDeletedFrom(){\n+    table.newAppend().appendFile(FILE_A).commit();\n+    Table staticTable = getStaticTable();\n+    staticTable.newDelete().deleteFile(FILE_A).commit();\n+  }\n+\n+  @Test\n+  public void testHasSameProperties(){\n+    table.newAppend().appendFile(FILE_A).commit();\n+    table.newAppend().appendFile(FILE_B).commit();\n+    table.newOverwrite().deleteFile(FILE_B).addFile(FILE_C).commit();\n+    Table staticTable = getStaticTable();\n+    Assert.assertTrue(\"Same history?\",\n+        table.history().containsAll(staticTable.history()));\n+    Assert.assertTrue(\"Same snapshot?\",\n+        table.currentSnapshot().snapshotId() ==  staticTable.currentSnapshot().snapshotId());\n+    Assert.assertTrue(\"Same properties?\",\n+        Maps.difference(table.properties(), staticTable.properties()).areEqual());\n+  }\n+\n+  @Test\n+  public void testImmutable() {\n+    table.newAppend().appendFile(FILE_A).commit();\n+    Table staticTable = getStaticTable();\n+    long originalSnapshot = table.currentSnapshot().snapshotId();\n+\n+    table.newAppend().appendFile(FILE_B).commit();\n+    table.newOverwrite().deleteFile(FILE_B).addFile(FILE_C).commit();\n+\n+    Assert.assertEquals(\"Snapshot unchanged after table modified\",\n+        staticTable.currentSnapshot().snapshotId(), originalSnapshot);\n+  }\n+\n+  @Test\n+  public void testMetadataTables() {\n+    for (MetadataTableType type: MetadataTableType.values()) {\n+      String enumName = type.name().replace(\"_\",\"\").toLowerCase();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDgzMzcxNg=="}, "originalCommit": {"oid": "41ed1f70c5b0d76885f087f3fe3d7aa5f92397ae"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDg0ODI4MA==", "bodyText": "we are just comparing the ClassName here, so we are comparing AllDataFilesTable.class with ALL_DATA_FILES\nI may be misunderstanding your comment here, I'm just making sure that we get back the Class with the right name based on the MetadataType we request.", "url": "https://github.com/apache/iceberg/pull/1342#discussion_r470848280", "createdAt": "2020-08-14T20:22:10Z", "author": {"login": "RussellSpitzer"}, "path": "core/src/test/java/org/apache/iceberg/hadoop/TestStaticTable.java", "diffHunk": "@@ -0,0 +1,79 @@\n+package org.apache.iceberg.hadoop;\n+\n+import com.google.common.collect.Iterables;\n+import com.google.common.collect.Maps;\n+import org.apache.iceberg.HasTableOperations;\n+import org.apache.iceberg.MetadataTableType;\n+import org.apache.iceberg.StaticTableOperations;\n+import org.apache.iceberg.Table;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+public class TestStaticTable extends HadoopTableTestBase {\n+\n+  private Table getStaticTable() {\n+    return TABLES.load(((HasTableOperations) table).operations().current().metadataFileLocation());\n+  }\n+\n+  private Table getStaticTable(MetadataTableType type) {\n+    return TABLES.load(((HasTableOperations) table).operations().current().metadataFileLocation() + \"#\" + type);\n+  }\n+\n+  @Test\n+  public void testLoadFromMetadata() {\n+    Table staticTable = getStaticTable();\n+    Assert.assertTrue(\"Loading a metadata file based table should return StaticTableOperations\",\n+        ((HasTableOperations) staticTable).operations() instanceof StaticTableOperations);\n+  }\n+\n+  @Test(expected = UnsupportedOperationException.class)\n+  public void testCannotBeAddedTo(){\n+    Table staticTable = getStaticTable();\n+    staticTable.newOverwrite().addFile(FILE_A).commit();\n+  }\n+\n+  @Test(expected = UnsupportedOperationException.class)\n+  public void testCannotBeDeletedFrom(){\n+    table.newAppend().appendFile(FILE_A).commit();\n+    Table staticTable = getStaticTable();\n+    staticTable.newDelete().deleteFile(FILE_A).commit();\n+  }\n+\n+  @Test\n+  public void testHasSameProperties(){\n+    table.newAppend().appendFile(FILE_A).commit();\n+    table.newAppend().appendFile(FILE_B).commit();\n+    table.newOverwrite().deleteFile(FILE_B).addFile(FILE_C).commit();\n+    Table staticTable = getStaticTable();\n+    Assert.assertTrue(\"Same history?\",\n+        table.history().containsAll(staticTable.history()));\n+    Assert.assertTrue(\"Same snapshot?\",\n+        table.currentSnapshot().snapshotId() ==  staticTable.currentSnapshot().snapshotId());\n+    Assert.assertTrue(\"Same properties?\",\n+        Maps.difference(table.properties(), staticTable.properties()).areEqual());\n+  }\n+\n+  @Test\n+  public void testImmutable() {\n+    table.newAppend().appendFile(FILE_A).commit();\n+    Table staticTable = getStaticTable();\n+    long originalSnapshot = table.currentSnapshot().snapshotId();\n+\n+    table.newAppend().appendFile(FILE_B).commit();\n+    table.newOverwrite().deleteFile(FILE_B).addFile(FILE_C).commit();\n+\n+    Assert.assertEquals(\"Snapshot unchanged after table modified\",\n+        staticTable.currentSnapshot().snapshotId(), originalSnapshot);\n+  }\n+\n+  @Test\n+  public void testMetadataTables() {\n+    for (MetadataTableType type: MetadataTableType.values()) {\n+      String enumName = type.name().replace(\"_\",\"\").toLowerCase();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDgzMzcxNg=="}, "originalCommit": {"oid": "41ed1f70c5b0d76885f087f3fe3d7aa5f92397ae"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDg1OTcwMA==", "bodyText": "Okay, I see. Nevermind, then.", "url": "https://github.com/apache/iceberg/pull/1342#discussion_r470859700", "createdAt": "2020-08-14T20:52:36Z", "author": {"login": "rdblue"}, "path": "core/src/test/java/org/apache/iceberg/hadoop/TestStaticTable.java", "diffHunk": "@@ -0,0 +1,79 @@\n+package org.apache.iceberg.hadoop;\n+\n+import com.google.common.collect.Iterables;\n+import com.google.common.collect.Maps;\n+import org.apache.iceberg.HasTableOperations;\n+import org.apache.iceberg.MetadataTableType;\n+import org.apache.iceberg.StaticTableOperations;\n+import org.apache.iceberg.Table;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+public class TestStaticTable extends HadoopTableTestBase {\n+\n+  private Table getStaticTable() {\n+    return TABLES.load(((HasTableOperations) table).operations().current().metadataFileLocation());\n+  }\n+\n+  private Table getStaticTable(MetadataTableType type) {\n+    return TABLES.load(((HasTableOperations) table).operations().current().metadataFileLocation() + \"#\" + type);\n+  }\n+\n+  @Test\n+  public void testLoadFromMetadata() {\n+    Table staticTable = getStaticTable();\n+    Assert.assertTrue(\"Loading a metadata file based table should return StaticTableOperations\",\n+        ((HasTableOperations) staticTable).operations() instanceof StaticTableOperations);\n+  }\n+\n+  @Test(expected = UnsupportedOperationException.class)\n+  public void testCannotBeAddedTo(){\n+    Table staticTable = getStaticTable();\n+    staticTable.newOverwrite().addFile(FILE_A).commit();\n+  }\n+\n+  @Test(expected = UnsupportedOperationException.class)\n+  public void testCannotBeDeletedFrom(){\n+    table.newAppend().appendFile(FILE_A).commit();\n+    Table staticTable = getStaticTable();\n+    staticTable.newDelete().deleteFile(FILE_A).commit();\n+  }\n+\n+  @Test\n+  public void testHasSameProperties(){\n+    table.newAppend().appendFile(FILE_A).commit();\n+    table.newAppend().appendFile(FILE_B).commit();\n+    table.newOverwrite().deleteFile(FILE_B).addFile(FILE_C).commit();\n+    Table staticTable = getStaticTable();\n+    Assert.assertTrue(\"Same history?\",\n+        table.history().containsAll(staticTable.history()));\n+    Assert.assertTrue(\"Same snapshot?\",\n+        table.currentSnapshot().snapshotId() ==  staticTable.currentSnapshot().snapshotId());\n+    Assert.assertTrue(\"Same properties?\",\n+        Maps.difference(table.properties(), staticTable.properties()).areEqual());\n+  }\n+\n+  @Test\n+  public void testImmutable() {\n+    table.newAppend().appendFile(FILE_A).commit();\n+    Table staticTable = getStaticTable();\n+    long originalSnapshot = table.currentSnapshot().snapshotId();\n+\n+    table.newAppend().appendFile(FILE_B).commit();\n+    table.newOverwrite().deleteFile(FILE_B).addFile(FILE_C).commit();\n+\n+    Assert.assertEquals(\"Snapshot unchanged after table modified\",\n+        staticTable.currentSnapshot().snapshotId(), originalSnapshot);\n+  }\n+\n+  @Test\n+  public void testMetadataTables() {\n+    for (MetadataTableType type: MetadataTableType.values()) {\n+      String enumName = type.name().replace(\"_\",\"\").toLowerCase();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDgzMzcxNg=="}, "originalCommit": {"oid": "41ed1f70c5b0d76885f087f3fe3d7aa5f92397ae"}, "originalPosition": 72}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0MjI4MzU2OnYy", "diffSide": "RIGHT", "path": "core/src/test/java/org/apache/iceberg/hadoop/TestStaticTable.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQxOTo0ODoxNlrOHBBdLA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQyMDo0NjozOFrOHBC2ww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDgzNDQ3Ng==", "bodyText": "We typically use AssertHelpers.assertThrows instead of expected because that allows you to validate the exception message and make assertions after the failure. For example, this should assert that the value of table.current() before the commit is the same object as table.refresh() after the failed commit.", "url": "https://github.com/apache/iceberg/pull/1342#discussion_r470834476", "createdAt": "2020-08-14T19:48:16Z", "author": {"login": "rdblue"}, "path": "core/src/test/java/org/apache/iceberg/hadoop/TestStaticTable.java", "diffHunk": "@@ -0,0 +1,79 @@\n+package org.apache.iceberg.hadoop;\n+\n+import com.google.common.collect.Iterables;\n+import com.google.common.collect.Maps;\n+import org.apache.iceberg.HasTableOperations;\n+import org.apache.iceberg.MetadataTableType;\n+import org.apache.iceberg.StaticTableOperations;\n+import org.apache.iceberg.Table;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+public class TestStaticTable extends HadoopTableTestBase {\n+\n+  private Table getStaticTable() {\n+    return TABLES.load(((HasTableOperations) table).operations().current().metadataFileLocation());\n+  }\n+\n+  private Table getStaticTable(MetadataTableType type) {\n+    return TABLES.load(((HasTableOperations) table).operations().current().metadataFileLocation() + \"#\" + type);\n+  }\n+\n+  @Test\n+  public void testLoadFromMetadata() {\n+    Table staticTable = getStaticTable();\n+    Assert.assertTrue(\"Loading a metadata file based table should return StaticTableOperations\",\n+        ((HasTableOperations) staticTable).operations() instanceof StaticTableOperations);\n+  }\n+\n+  @Test(expected = UnsupportedOperationException.class)\n+  public void testCannotBeAddedTo(){\n+    Table staticTable = getStaticTable();\n+    staticTable.newOverwrite().addFile(FILE_A).commit();\n+  }\n+\n+  @Test(expected = UnsupportedOperationException.class)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "41ed1f70c5b0d76885f087f3fe3d7aa5f92397ae"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDg0NTc0Mw==", "bodyText": "Ah weird, for some reason IntelliJ told me I only had Junit4 on the class path so I didn't use Assert.assertThrows. That's why I only am using Junit4 conventions :/", "url": "https://github.com/apache/iceberg/pull/1342#discussion_r470845743", "createdAt": "2020-08-14T20:15:42Z", "author": {"login": "RussellSpitzer"}, "path": "core/src/test/java/org/apache/iceberg/hadoop/TestStaticTable.java", "diffHunk": "@@ -0,0 +1,79 @@\n+package org.apache.iceberg.hadoop;\n+\n+import com.google.common.collect.Iterables;\n+import com.google.common.collect.Maps;\n+import org.apache.iceberg.HasTableOperations;\n+import org.apache.iceberg.MetadataTableType;\n+import org.apache.iceberg.StaticTableOperations;\n+import org.apache.iceberg.Table;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+public class TestStaticTable extends HadoopTableTestBase {\n+\n+  private Table getStaticTable() {\n+    return TABLES.load(((HasTableOperations) table).operations().current().metadataFileLocation());\n+  }\n+\n+  private Table getStaticTable(MetadataTableType type) {\n+    return TABLES.load(((HasTableOperations) table).operations().current().metadataFileLocation() + \"#\" + type);\n+  }\n+\n+  @Test\n+  public void testLoadFromMetadata() {\n+    Table staticTable = getStaticTable();\n+    Assert.assertTrue(\"Loading a metadata file based table should return StaticTableOperations\",\n+        ((HasTableOperations) staticTable).operations() instanceof StaticTableOperations);\n+  }\n+\n+  @Test(expected = UnsupportedOperationException.class)\n+  public void testCannotBeAddedTo(){\n+    Table staticTable = getStaticTable();\n+    staticTable.newOverwrite().addFile(FILE_A).commit();\n+  }\n+\n+  @Test(expected = UnsupportedOperationException.class)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDgzNDQ3Ng=="}, "originalCommit": {"oid": "41ed1f70c5b0d76885f087f3fe3d7aa5f92397ae"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDg1NzQxMQ==", "bodyText": "Oh I see there is a custom Iceberg version of it! I get things", "url": "https://github.com/apache/iceberg/pull/1342#discussion_r470857411", "createdAt": "2020-08-14T20:46:38Z", "author": {"login": "RussellSpitzer"}, "path": "core/src/test/java/org/apache/iceberg/hadoop/TestStaticTable.java", "diffHunk": "@@ -0,0 +1,79 @@\n+package org.apache.iceberg.hadoop;\n+\n+import com.google.common.collect.Iterables;\n+import com.google.common.collect.Maps;\n+import org.apache.iceberg.HasTableOperations;\n+import org.apache.iceberg.MetadataTableType;\n+import org.apache.iceberg.StaticTableOperations;\n+import org.apache.iceberg.Table;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+public class TestStaticTable extends HadoopTableTestBase {\n+\n+  private Table getStaticTable() {\n+    return TABLES.load(((HasTableOperations) table).operations().current().metadataFileLocation());\n+  }\n+\n+  private Table getStaticTable(MetadataTableType type) {\n+    return TABLES.load(((HasTableOperations) table).operations().current().metadataFileLocation() + \"#\" + type);\n+  }\n+\n+  @Test\n+  public void testLoadFromMetadata() {\n+    Table staticTable = getStaticTable();\n+    Assert.assertTrue(\"Loading a metadata file based table should return StaticTableOperations\",\n+        ((HasTableOperations) staticTable).operations() instanceof StaticTableOperations);\n+  }\n+\n+  @Test(expected = UnsupportedOperationException.class)\n+  public void testCannotBeAddedTo(){\n+    Table staticTable = getStaticTable();\n+    staticTable.newOverwrite().addFile(FILE_A).commit();\n+  }\n+\n+  @Test(expected = UnsupportedOperationException.class)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDgzNDQ3Ng=="}, "originalCommit": {"oid": "41ed1f70c5b0d76885f087f3fe3d7aa5f92397ae"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0MjI4NDcwOnYy", "diffSide": "RIGHT", "path": "core/src/test/java/org/apache/iceberg/hadoop/TestStaticTable.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQxOTo0ODo0M1rOHBBdzg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQxOTo0ODo0M1rOHBBdzg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDgzNDYzOA==", "bodyText": "I'm not sure we need both this and the next test, but it's okay to have them.", "url": "https://github.com/apache/iceberg/pull/1342#discussion_r470834638", "createdAt": "2020-08-14T19:48:43Z", "author": {"login": "rdblue"}, "path": "core/src/test/java/org/apache/iceberg/hadoop/TestStaticTable.java", "diffHunk": "@@ -0,0 +1,79 @@\n+package org.apache.iceberg.hadoop;\n+\n+import com.google.common.collect.Iterables;\n+import com.google.common.collect.Maps;\n+import org.apache.iceberg.HasTableOperations;\n+import org.apache.iceberg.MetadataTableType;\n+import org.apache.iceberg.StaticTableOperations;\n+import org.apache.iceberg.Table;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+public class TestStaticTable extends HadoopTableTestBase {\n+\n+  private Table getStaticTable() {\n+    return TABLES.load(((HasTableOperations) table).operations().current().metadataFileLocation());\n+  }\n+\n+  private Table getStaticTable(MetadataTableType type) {\n+    return TABLES.load(((HasTableOperations) table).operations().current().metadataFileLocation() + \"#\" + type);\n+  }\n+\n+  @Test\n+  public void testLoadFromMetadata() {\n+    Table staticTable = getStaticTable();\n+    Assert.assertTrue(\"Loading a metadata file based table should return StaticTableOperations\",\n+        ((HasTableOperations) staticTable).operations() instanceof StaticTableOperations);\n+  }\n+\n+  @Test(expected = UnsupportedOperationException.class)\n+  public void testCannotBeAddedTo(){", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "41ed1f70c5b0d76885f087f3fe3d7aa5f92397ae"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0MjI5MDI4OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/apache/iceberg/hadoop/HadoopTables.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQxOTo1MDo0OFrOHBBhDA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQyMDo0NTozMFrOHBC1SA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDgzNTQ2OA==", "bodyText": "How about parse out the metadata table name, if present?", "url": "https://github.com/apache/iceberg/pull/1342#discussion_r470835468", "createdAt": "2020-08-14T19:50:48Z", "author": {"login": "rdblue"}, "path": "core/src/main/java/org/apache/iceberg/hadoop/HadoopTables.java", "diffHunk": "@@ -68,27 +71,26 @@ public HadoopTables(Configuration conf) {\n    */\n   @Override\n   public Table load(String location) {\n-    TableOperations ops = newTableOps(location);\n-    if (ops.current() == null) {\n+    //Possibly Load a Metadata Table", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "41ed1f70c5b0d76885f087f3fe3d7aa5f92397ae"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDg1NzAzMg==", "bodyText": "I made a different implementation here where we will instead do\nName, Type = tryParseMetadataLocation\n\nif (name, type).{\n  loadMetadata\n} else {\n  loadBasic\n}", "url": "https://github.com/apache/iceberg/pull/1342#discussion_r470857032", "createdAt": "2020-08-14T20:45:30Z", "author": {"login": "RussellSpitzer"}, "path": "core/src/main/java/org/apache/iceberg/hadoop/HadoopTables.java", "diffHunk": "@@ -68,27 +71,26 @@ public HadoopTables(Configuration conf) {\n    */\n   @Override\n   public Table load(String location) {\n-    TableOperations ops = newTableOps(location);\n-    if (ops.current() == null) {\n+    //Possibly Load a Metadata Table", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDgzNTQ2OA=="}, "originalCommit": {"oid": "41ed1f70c5b0d76885f087f3fe3d7aa5f92397ae"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0MjI5Mzk1OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/apache/iceberg/StaticTableOperations.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQxOTo1MjoxNlrOHBBjZw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQyMDowMzowN1rOHBB1ZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDgzNjA3MQ==", "bodyText": "Users don't know about TableOperations, so we shouldn't mention it here. How about Cannot modify a static table?", "url": "https://github.com/apache/iceberg/pull/1342#discussion_r470836071", "createdAt": "2020-08-14T19:52:16Z", "author": {"login": "rdblue"}, "path": "core/src/main/java/org/apache/iceberg/StaticTableOperations.java", "diffHunk": "@@ -0,0 +1,72 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ */\n+\n+package org.apache.iceberg;\n+\n+import java.nio.file.Paths;\n+import org.apache.iceberg.io.FileIO;\n+import org.apache.iceberg.io.LocationProvider;\n+\n+/**\n+ * Representation of an immutable snapshot of Table State that can be used in\n+ * other Iceberg Functions.\n+ */\n+public class StaticTableOperations implements TableOperations {\n+  private final TableMetadata staticMetadata;\n+  private final FileIO io;\n+\n+  /**\n+   * Creates a StaticTableOperations tied to a specific static version of the TableMetadata\n+   */\n+  public StaticTableOperations(String location, FileIO io) {\n+    this.io = io;\n+    this.staticMetadata = TableMetadataParser.read(io, location);\n+  }\n+\n+  @Override\n+  public TableMetadata current() {\n+    return staticMetadata;\n+  }\n+\n+  @Override\n+  public TableMetadata refresh() {\n+    return staticMetadata;\n+  }\n+\n+  @Override\n+  public void commit(TableMetadata base, TableMetadata metadata) {\n+    throw new UnsupportedOperationException(\"This TableOperations is static, it cannot be modified\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "41ed1f70c5b0d76885f087f3fe3d7aa5f92397ae"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDg0MDY3Ng==", "bodyText": "sounds good to me", "url": "https://github.com/apache/iceberg/pull/1342#discussion_r470840676", "createdAt": "2020-08-14T20:03:07Z", "author": {"login": "RussellSpitzer"}, "path": "core/src/main/java/org/apache/iceberg/StaticTableOperations.java", "diffHunk": "@@ -0,0 +1,72 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ */\n+\n+package org.apache.iceberg;\n+\n+import java.nio.file.Paths;\n+import org.apache.iceberg.io.FileIO;\n+import org.apache.iceberg.io.LocationProvider;\n+\n+/**\n+ * Representation of an immutable snapshot of Table State that can be used in\n+ * other Iceberg Functions.\n+ */\n+public class StaticTableOperations implements TableOperations {\n+  private final TableMetadata staticMetadata;\n+  private final FileIO io;\n+\n+  /**\n+   * Creates a StaticTableOperations tied to a specific static version of the TableMetadata\n+   */\n+  public StaticTableOperations(String location, FileIO io) {\n+    this.io = io;\n+    this.staticMetadata = TableMetadataParser.read(io, location);\n+  }\n+\n+  @Override\n+  public TableMetadata current() {\n+    return staticMetadata;\n+  }\n+\n+  @Override\n+  public TableMetadata refresh() {\n+    return staticMetadata;\n+  }\n+\n+  @Override\n+  public void commit(TableMetadata base, TableMetadata metadata) {\n+    throw new UnsupportedOperationException(\"This TableOperations is static, it cannot be modified\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDgzNjA3MQ=="}, "originalCommit": {"oid": "41ed1f70c5b0d76885f087f3fe3d7aa5f92397ae"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0MjI5NzkzOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/apache/iceberg/StaticTableOperations.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQxOTo1MzozMVrOHBBlxg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQyMTowNToyN1rOHBDTqg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDgzNjY3OA==", "bodyText": "Same here, we could clean these messages up a bit, \"Cannot create new files for a static table\".\nThe actual message is fine, but we try to structure them as \"Cannot\" + (what you tried) + \": \" reason and context.", "url": "https://github.com/apache/iceberg/pull/1342#discussion_r470836678", "createdAt": "2020-08-14T19:53:31Z", "author": {"login": "rdblue"}, "path": "core/src/main/java/org/apache/iceberg/StaticTableOperations.java", "diffHunk": "@@ -0,0 +1,72 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ */\n+\n+package org.apache.iceberg;\n+\n+import java.nio.file.Paths;\n+import org.apache.iceberg.io.FileIO;\n+import org.apache.iceberg.io.LocationProvider;\n+\n+/**\n+ * Representation of an immutable snapshot of Table State that can be used in\n+ * other Iceberg Functions.\n+ */\n+public class StaticTableOperations implements TableOperations {\n+  private final TableMetadata staticMetadata;\n+  private final FileIO io;\n+\n+  /**\n+   * Creates a StaticTableOperations tied to a specific static version of the TableMetadata\n+   */\n+  public StaticTableOperations(String location, FileIO io) {\n+    this.io = io;\n+    this.staticMetadata = TableMetadataParser.read(io, location);\n+  }\n+\n+  @Override\n+  public TableMetadata current() {\n+    return staticMetadata;\n+  }\n+\n+  @Override\n+  public TableMetadata refresh() {\n+    return staticMetadata;\n+  }\n+\n+  @Override\n+  public void commit(TableMetadata base, TableMetadata metadata) {\n+    throw new UnsupportedOperationException(\"This TableOperations is static, it cannot be modified\");\n+  }\n+\n+  @Override\n+  public FileIO io() {\n+    return this.io;\n+  }\n+\n+  @Override\n+  public String metadataFileLocation(String fileName) {\n+    throw new UnsupportedOperationException(\"New files cannot be created in a Static Table Operations\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "41ed1f70c5b0d76885f087f3fe3d7aa5f92397ae"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDg2NDgxMA==", "bodyText": "Gonna just switch them all to \"cannot modify\" since this would come up even when deleting files.", "url": "https://github.com/apache/iceberg/pull/1342#discussion_r470864810", "createdAt": "2020-08-14T21:05:27Z", "author": {"login": "RussellSpitzer"}, "path": "core/src/main/java/org/apache/iceberg/StaticTableOperations.java", "diffHunk": "@@ -0,0 +1,72 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ */\n+\n+package org.apache.iceberg;\n+\n+import java.nio.file.Paths;\n+import org.apache.iceberg.io.FileIO;\n+import org.apache.iceberg.io.LocationProvider;\n+\n+/**\n+ * Representation of an immutable snapshot of Table State that can be used in\n+ * other Iceberg Functions.\n+ */\n+public class StaticTableOperations implements TableOperations {\n+  private final TableMetadata staticMetadata;\n+  private final FileIO io;\n+\n+  /**\n+   * Creates a StaticTableOperations tied to a specific static version of the TableMetadata\n+   */\n+  public StaticTableOperations(String location, FileIO io) {\n+    this.io = io;\n+    this.staticMetadata = TableMetadataParser.read(io, location);\n+  }\n+\n+  @Override\n+  public TableMetadata current() {\n+    return staticMetadata;\n+  }\n+\n+  @Override\n+  public TableMetadata refresh() {\n+    return staticMetadata;\n+  }\n+\n+  @Override\n+  public void commit(TableMetadata base, TableMetadata metadata) {\n+    throw new UnsupportedOperationException(\"This TableOperations is static, it cannot be modified\");\n+  }\n+\n+  @Override\n+  public FileIO io() {\n+    return this.io;\n+  }\n+\n+  @Override\n+  public String metadataFileLocation(String fileName) {\n+    throw new UnsupportedOperationException(\"New files cannot be created in a Static Table Operations\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDgzNjY3OA=="}, "originalCommit": {"oid": "41ed1f70c5b0d76885f087f3fe3d7aa5f92397ae"}, "originalPosition": 65}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3652, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}