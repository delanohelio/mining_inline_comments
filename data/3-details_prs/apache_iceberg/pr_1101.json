{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDMxMDc5OTIy", "number": 1101, "title": "Add sequence number assertions in merge append unit tests", "bodyText": "", "createdAt": "2020-06-08T11:56:28Z", "url": "https://github.com/apache/iceberg/pull/1101", "merged": true, "mergeCommit": {"oid": "a624f6f247eb7ef5c3d6446ab98d400025d96176"}, "closed": true, "closedAt": "2020-08-08T01:28:53Z", "author": {"login": "chenjunjiedada"}, "timelineItems": {"totalCount": 16, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcp_NckgFqTQyODM4MTU0NA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABc8t0XmAH2gAyNDMxMDc5OTIyOjc3NzBmZjY5ZGZlZWFiYzMzZTk3OTMxNTQ2ODQ5NzBkZjMzMzI1MjA=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI4MzgxNTQ0", "url": "https://github.com/apache/iceberg/pull/1101#pullrequestreview-428381544", "createdAt": "2020-06-10T19:55:41Z", "commit": {"oid": "a698497efe75f181c3f99f4aa143c585d2029e2f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxOTo1NTo0MVrOGiEKFw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxOTo1NTo0MVrOGiEKFw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODM3Mjg4Nw==", "bodyText": "This doesn't make sense to me. The table metadata was just read into base above, so the V2Assert line doesn't need to read it again and can use base.lastSequenceNumber(). Next, if both v1 and v2 assertions are that base.lastSequenceNumber() is 0, then I think it makes more sense to use a normal Assert.assertEquals because it doesn't depend on the table version.\nI think these two lines should be replaced by this:\n    Assert.assertEquals(\"Last sequence number should be 0\", 0, base.lastSequenceNumber());", "url": "https://github.com/apache/iceberg/pull/1101#discussion_r438372887", "createdAt": "2020-06-10T19:55:41Z", "author": {"login": "rdblue"}, "path": "core/src/test/java/org/apache/iceberg/TestMergeAppend.java", "diffHunk": "@@ -183,31 +183,97 @@ public void testManifestMergeMinCount() throws IOException {\n \n     TableMetadata base = readMetadata();\n     Assert.assertNull(\"Should not have a current snapshot\", base.currentSnapshot());\n+    V2Assert.assertEquals(\"Last sequence number should be 0\", 0, readMetadata().lastSequenceNumber());\n+    V1Assert.assertEquals(\"Table should end with last-sequence-number 0\", 0, base.lastSequenceNumber());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a698497efe75f181c3f99f4aa143c585d2029e2f"}, "originalPosition": 5}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI4Mzg1Mzgy", "url": "https://github.com/apache/iceberg/pull/1101#pullrequestreview-428385382", "createdAt": "2020-06-10T20:01:19Z", "commit": {"oid": "a698497efe75f181c3f99f4aa143c585d2029e2f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQyMDowMToxOVrOGiEWAA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQyMDowMToxOVrOGiEWAA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODM3NTkzNg==", "bodyText": "New validateManifest calls should also supply the status of each file as well.", "url": "https://github.com/apache/iceberg/pull/1101#discussion_r438375936", "createdAt": "2020-06-10T20:01:19Z", "author": {"login": "rdblue"}, "path": "core/src/test/java/org/apache/iceberg/TestMergeAppend.java", "diffHunk": "@@ -183,31 +183,97 @@ public void testManifestMergeMinCount() throws IOException {\n \n     TableMetadata base = readMetadata();\n     Assert.assertNull(\"Should not have a current snapshot\", base.currentSnapshot());\n+    V2Assert.assertEquals(\"Last sequence number should be 0\", 0, readMetadata().lastSequenceNumber());\n+    V1Assert.assertEquals(\"Table should end with last-sequence-number 0\", 0, base.lastSequenceNumber());\n \n     ManifestFile manifest = writeManifest(FILE_A);\n     ManifestFile manifest2 = writeManifestWithName(\"FILE_C\", FILE_C);\n     ManifestFile manifest3 = writeManifestWithName(\"FILE_D\", FILE_D);\n+    ManifestFile manifest4 = writeManifestWithName(\"FILE_B\", FILE_B);\n     table.newAppend()\n         .appendManifest(manifest)\n         .appendManifest(manifest2)\n         .appendManifest(manifest3)\n         .commit();\n \n+    Snapshot snap1 = table.currentSnapshot();\n+    long commitId1 = snap1.snapshotId();\n+    base = readMetadata();\n     Assert.assertEquals(\"Should contain 2 merged manifest for first write\",\n         2, readMetadata().currentSnapshot().allManifests().size());\n+    validateManifest(snap1.allManifests().get(0),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a698497efe75f181c3f99f4aa143c585d2029e2f"}, "originalPosition": 22}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI4Mzg2NzY4", "url": "https://github.com/apache/iceberg/pull/1101#pullrequestreview-428386768", "createdAt": "2020-06-10T20:03:28Z", "commit": {"oid": "a698497efe75f181c3f99f4aa143c585d2029e2f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQyMDowMzoyOFrOGiEaNA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQyMDowMzoyOFrOGiEaNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODM3NzAxMg==", "bodyText": "Why were new commits added to this test case?", "url": "https://github.com/apache/iceberg/pull/1101#discussion_r438377012", "createdAt": "2020-06-10T20:03:28Z", "author": {"login": "rdblue"}, "path": "core/src/test/java/org/apache/iceberg/TestMergeAppend.java", "diffHunk": "@@ -183,31 +183,97 @@ public void testManifestMergeMinCount() throws IOException {\n \n     TableMetadata base = readMetadata();\n     Assert.assertNull(\"Should not have a current snapshot\", base.currentSnapshot());\n+    V2Assert.assertEquals(\"Last sequence number should be 0\", 0, readMetadata().lastSequenceNumber());\n+    V1Assert.assertEquals(\"Table should end with last-sequence-number 0\", 0, base.lastSequenceNumber());\n \n     ManifestFile manifest = writeManifest(FILE_A);\n     ManifestFile manifest2 = writeManifestWithName(\"FILE_C\", FILE_C);\n     ManifestFile manifest3 = writeManifestWithName(\"FILE_D\", FILE_D);\n+    ManifestFile manifest4 = writeManifestWithName(\"FILE_B\", FILE_B);\n     table.newAppend()\n         .appendManifest(manifest)\n         .appendManifest(manifest2)\n         .appendManifest(manifest3)\n         .commit();\n \n+    Snapshot snap1 = table.currentSnapshot();\n+    long commitId1 = snap1.snapshotId();\n+    base = readMetadata();\n     Assert.assertEquals(\"Should contain 2 merged manifest for first write\",\n         2, readMetadata().currentSnapshot().allManifests().size());\n+    validateManifest(snap1.allManifests().get(0),\n+        seqs(1),\n+        ids(commitId1),\n+        files(FILE_A));\n+    validateManifest(snap1.allManifests().get(1),\n+        seqs(1, 1),\n+        ids(commitId1, commitId1),\n+        files(FILE_C, FILE_D));\n+\n+    V2Assert.assertEquals(\"Snapshot sequence number should be 1\", 1, snap1.sequenceNumber());\n+    V2Assert.assertEquals(\"Last sequence number should be 1\", 1, base.lastSequenceNumber());\n+    V1Assert.assertEquals(\"Table should end with last-sequence-number 0\", 0, base.lastSequenceNumber());\n \n     table.newAppend()\n         .appendManifest(manifest)\n         .appendManifest(manifest2)\n         .appendManifest(manifest3)\n         .commit();\n-\n+    Snapshot snap2 = table.currentSnapshot();\n+    long commitId2 = snap2.snapshotId();\n+    base = readMetadata();\n     Assert.assertEquals(\"Should contain 3 merged manifest for second write\",\n         3, readMetadata().currentSnapshot().allManifests().size());\n+    validateManifest(snap2.allManifests().get(0),\n+        seqs(2),\n+        ids(commitId2),\n+        files(FILE_A));\n+\n+    validateManifest(snap2.allManifests().get(1),\n+        seqs(2, 2),\n+        ids(commitId2, commitId2),\n+        files(FILE_C, FILE_D));\n+\n+    validateManifestEntries(snap2.allManifests().get(2),\n+        ids(commitId1, commitId1, commitId1),\n+        files(FILE_A, FILE_C, FILE_D),\n+        statuses(Status.EXISTING, Status.EXISTING, Status.EXISTING));\n+\n+    validateManifest(snap2.allManifests().get(2),\n+        seqs(1, 1, 1),\n+        ids(commitId1, commitId1, commitId1),\n+        files(FILE_A, FILE_C, FILE_D));\n+    V2Assert.assertEquals(\"Snapshot sequence number should be 2\", 2, snap2.sequenceNumber());\n+    V2Assert.assertEquals(\"Last sequence number should be 2\", 2, base.lastSequenceNumber());\n+    V1Assert.assertEquals(\"Table should end with last-sequence-number 0\", 0, base.lastSequenceNumber());\n \n     // validate that the metadata summary is correct when using appendManifest\n     Assert.assertEquals(\"Summary metadata should include 3 added files\",\n         \"3\", readMetadata().currentSnapshot().summary().get(\"added-data-files\"));\n+\n+    table.updateProperties()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a698497efe75f181c3f99f4aa143c585d2029e2f"}, "originalPosition": 73}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI4Mzg4MDQ5", "url": "https://github.com/apache/iceberg/pull/1101#pullrequestreview-428388049", "createdAt": "2020-06-10T20:05:23Z", "commit": {"oid": "a698497efe75f181c3f99f4aa143c585d2029e2f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQyMDowNToyM1rOGiEdtg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQyMDowNToyM1rOGiEdtg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODM3NzkxMA==", "bodyText": "Adding the sequence number asserts between the assertion about the number of manifests and validating a manifest makes it harder to read the test because lines that are related are now separated.\nCan you move the snapshot and table metadata sequence number assertions to just after each commit?", "url": "https://github.com/apache/iceberg/pull/1101#discussion_r438377910", "createdAt": "2020-06-10T20:05:23Z", "author": {"login": "rdblue"}, "path": "core/src/test/java/org/apache/iceberg/TestMergeAppend.java", "diffHunk": "@@ -251,7 +317,10 @@ public void testMergeWithExistingManifestAfterDelete() {\n     long baseId = base.currentSnapshot().snapshotId();\n     Assert.assertEquals(\"Should create 1 manifest for initial write\",\n         1, base.currentSnapshot().allManifests().size());\n+    V2Assert.assertEquals(\"Last sequence number should be 1\", 1, readMetadata().lastSequenceNumber());\n+    V1Assert.assertEquals(\"Table should end with last-sequence-number 0\", 0, readMetadata().lastSequenceNumber());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a698497efe75f181c3f99f4aa143c585d2029e2f"}, "originalPosition": 104}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a698497efe75f181c3f99f4aa143c585d2029e2f", "author": {"user": {"login": "chenjunjiedada", "name": "Chen, Junjie"}}, "url": "https://github.com/apache/iceberg/commit/a698497efe75f181c3f99f4aa143c585d2029e2f", "committedDate": "2020-06-08T11:47:31Z", "message": "Add sequence number assertions in merge append unit tests"}, "afterCommit": {"oid": "4eca3765893ead8a74a4e70fc226ac9bae59d305", "author": {"user": {"login": "chenjunjiedada", "name": "Chen, Junjie"}}, "url": "https://github.com/apache/iceberg/commit/4eca3765893ead8a74a4e70fc226ac9bae59d305", "committedDate": "2020-06-11T04:03:22Z", "message": "address comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b7c6693b9168346f3f87a0ebb4bad2bd79dff9af", "author": {"user": {"login": "chenjunjiedada", "name": "Chen, Junjie"}}, "url": "https://github.com/apache/iceberg/commit/b7c6693b9168346f3f87a0ebb4bad2bd79dff9af", "committedDate": "2020-06-11T06:32:15Z", "message": "Add sequence number assertions to merge append unit tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "acc36005b2d2e424f84125aa864c2917bd96c9bf", "author": {"user": {"login": "chenjunjiedada", "name": "Chen, Junjie"}}, "url": "https://github.com/apache/iceberg/commit/acc36005b2d2e424f84125aa864c2917bd96c9bf", "committedDate": "2020-06-11T06:42:57Z", "message": "minor updates"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "4eca3765893ead8a74a4e70fc226ac9bae59d305", "author": {"user": {"login": "chenjunjiedada", "name": "Chen, Junjie"}}, "url": "https://github.com/apache/iceberg/commit/4eca3765893ead8a74a4e70fc226ac9bae59d305", "committedDate": "2020-06-11T04:03:22Z", "message": "address comments"}, "afterCommit": {"oid": "acc36005b2d2e424f84125aa864c2917bd96c9bf", "author": {"user": {"login": "chenjunjiedada", "name": "Chen, Junjie"}}, "url": "https://github.com/apache/iceberg/commit/acc36005b2d2e424f84125aa864c2917bd96c9bf", "committedDate": "2020-06-11T06:42:57Z", "message": "minor updates"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "42bf9042e971c9efde8b948f85c2e606c337c09d", "author": {"user": {"login": "chenjunjiedada", "name": "Chen, Junjie"}}, "url": "https://github.com/apache/iceberg/commit/42bf9042e971c9efde8b948f85c2e606c337c09d", "committedDate": "2020-07-27T22:00:44Z", "message": "Address comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYyMDQ3MzMw", "url": "https://github.com/apache/iceberg/pull/1101#pullrequestreview-462047330", "createdAt": "2020-08-05T21:47:24Z", "commit": {"oid": "42bf9042e971c9efde8b948f85c2e606c337c09d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQyMTo0NzoyNFrOG8by5A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQyMTo0NzoyNFrOG8by5A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjAyMzE0MA==", "bodyText": "Is this validation still needed if validateManifest is called below?", "url": "https://github.com/apache/iceberg/pull/1101#discussion_r466023140", "createdAt": "2020-08-05T21:47:24Z", "author": {"login": "rdblue"}, "path": "core/src/test/java/org/apache/iceberg/TestMergeAppend.java", "diffHunk": "@@ -75,17 +85,30 @@ public void testEmptyTableAppendManifest() throws IOException {\n \n     TableMetadata base = readMetadata();\n     Assert.assertNull(\"Should not have a current snapshot\", base.currentSnapshot());\n+    Assert.assertEquals(\"Last sequence number should be 0\", 0, base.lastSequenceNumber());\n \n     ManifestFile manifest = writeManifest(FILE_A, FILE_B);\n-    Snapshot pending = table.newAppend()\n+    table.newAppend()\n         .appendManifest(manifest)\n-        .apply();\n+        .commit();\n+\n+    Snapshot committedSnapshot = table.currentSnapshot();\n+    Assert.assertNotNull(\"Should create a snapshot\", table.currentSnapshot());\n+    V1Assert.assertEquals(\"Last sequence number should be 0\", 0, table.ops().current().lastSequenceNumber());\n+    V2Assert.assertEquals(\"Last sequence number should be 1\", 1, table.ops().current().lastSequenceNumber());\n \n-    validateSnapshot(base.currentSnapshot(), pending, FILE_A, FILE_B);\n+    validateSnapshot(base.currentSnapshot(), committedSnapshot, FILE_A, FILE_B);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "42bf9042e971c9efde8b948f85c2e606c337c09d"}, "originalPosition": 53}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYyMDQ4MDc4", "url": "https://github.com/apache/iceberg/pull/1101#pullrequestreview-462048078", "createdAt": "2020-08-05T21:48:52Z", "commit": {"oid": "42bf9042e971c9efde8b948f85c2e606c337c09d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQyMTo0ODo1MlrOG8b1LA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQyMTo0ODo1MlrOG8b1LA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjAyMzcyNA==", "bodyText": "Before accessing a list item using get, you should always assert that the list has the number of items you expect. That helps avoid problems where you're validating the wrong item because there are more than you expected, and also provides a better error when there are no items at all.", "url": "https://github.com/apache/iceberg/pull/1101#discussion_r466023724", "createdAt": "2020-08-05T21:48:52Z", "author": {"login": "rdblue"}, "path": "core/src/test/java/org/apache/iceberg/TestMergeAppend.java", "diffHunk": "@@ -75,17 +85,30 @@ public void testEmptyTableAppendManifest() throws IOException {\n \n     TableMetadata base = readMetadata();\n     Assert.assertNull(\"Should not have a current snapshot\", base.currentSnapshot());\n+    Assert.assertEquals(\"Last sequence number should be 0\", 0, base.lastSequenceNumber());\n \n     ManifestFile manifest = writeManifest(FILE_A, FILE_B);\n-    Snapshot pending = table.newAppend()\n+    table.newAppend()\n         .appendManifest(manifest)\n-        .apply();\n+        .commit();\n+\n+    Snapshot committedSnapshot = table.currentSnapshot();\n+    Assert.assertNotNull(\"Should create a snapshot\", table.currentSnapshot());\n+    V1Assert.assertEquals(\"Last sequence number should be 0\", 0, table.ops().current().lastSequenceNumber());\n+    V2Assert.assertEquals(\"Last sequence number should be 1\", 1, table.ops().current().lastSequenceNumber());\n \n-    validateSnapshot(base.currentSnapshot(), pending, FILE_A, FILE_B);\n+    validateSnapshot(base.currentSnapshot(), committedSnapshot, FILE_A, FILE_B);\n+\n+    long snapshotId = committedSnapshot.snapshotId();\n+    validateManifest(committedSnapshot.allManifests().get(0),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "42bf9042e971c9efde8b948f85c2e606c337c09d"}, "originalPosition": 56}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d38b7107131dc0654a93b076935abcde138aa560", "author": {"user": {"login": "chenjunjiedada", "name": "Chen, Junjie"}}, "url": "https://github.com/apache/iceberg/commit/d38b7107131dc0654a93b076935abcde138aa560", "committedDate": "2020-08-06T13:26:53Z", "message": "address comments"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f67db8bcefb03f038b6a991cefffa17fd41fcbac", "author": {"user": {"login": "chenjunjiedada", "name": "Chen, Junjie"}}, "url": "https://github.com/apache/iceberg/commit/f67db8bcefb03f038b6a991cefffa17fd41fcbac", "committedDate": "2020-08-06T13:19:28Z", "message": "address comments"}, "afterCommit": {"oid": "d38b7107131dc0654a93b076935abcde138aa560", "author": {"user": {"login": "chenjunjiedada", "name": "Chen, Junjie"}}, "url": "https://github.com/apache/iceberg/commit/d38b7107131dc0654a93b076935abcde138aa560", "committedDate": "2020-08-06T13:26:53Z", "message": "address comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYzNDQzMDQ0", "url": "https://github.com/apache/iceberg/pull/1101#pullrequestreview-463443044", "createdAt": "2020-08-07T16:24:22Z", "commit": {"oid": "d38b7107131dc0654a93b076935abcde138aa560"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxNjoyNDoyM1rOG9gGeg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxNjoyNDoyM1rOG9gGeg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzE0MjI2Ng==", "bodyText": "Nit: context is incorrect.", "url": "https://github.com/apache/iceberg/pull/1101#discussion_r467142266", "createdAt": "2020-08-07T16:24:23Z", "author": {"login": "rdblue"}, "path": "core/src/test/java/org/apache/iceberg/TestMergeAppend.java", "diffHunk": "@@ -121,56 +156,86 @@ public void testMergeWithAppendFilesAndManifest() throws IOException {\n \n     TableMetadata base = readMetadata();\n     Assert.assertNull(\"Should not have a current snapshot\", base.currentSnapshot());\n+    Assert.assertEquals(\"Last sequence number should be 0\", 0, base.lastSequenceNumber());\n \n     ManifestFile manifest = writeManifest(FILE_A, FILE_B);\n-    Snapshot pending = table.newAppend()\n+    table.newAppend()\n         .appendFile(FILE_C)\n         .appendFile(FILE_D)\n         .appendManifest(manifest)\n-        .apply();\n+        .commit();\n+\n+    Snapshot committedSnapshot = table.currentSnapshot();\n+    Assert.assertNotNull(\"Should create a snapshot\", table.currentSnapshot());\n+    V1Assert.assertEquals(\"Last sequence number should be 0\", 0, table.ops().current().lastSequenceNumber());\n+    V2Assert.assertEquals(\"Last sequence number should be 1\", 1, table.ops().current().lastSequenceNumber());\n \n-    long pendingId = pending.snapshotId();\n+    long snapshotId = committedSnapshot.snapshotId();\n \n-    Assert.assertEquals(\"Should create 1 merged manifest\", 1, pending.allManifests().size());\n-    validateManifest(pending.allManifests().get(0),\n-        ids(pendingId, pendingId, pendingId, pendingId),\n-        files(FILE_C, FILE_D, FILE_A, FILE_B));\n+    Assert.assertEquals(\"Should create 1 merged manifest\", 1, committedSnapshot.allManifests().size());\n+\n+    validateManifest(committedSnapshot.allManifests().get(0),\n+        seqs(1, 1, 1, 1),\n+        ids(snapshotId, snapshotId, snapshotId, snapshotId),\n+        files(FILE_C, FILE_D, FILE_A, FILE_B),\n+        statuses(Status.ADDED, Status.ADDED, Status.ADDED, Status.ADDED)\n+    );\n   }\n \n   @Test\n   public void testMergeWithExistingManifest() {\n     // merge all manifests for this test\n     table.updateProperties().set(\"commit.manifest.min-count-to-merge\", \"1\").commit();\n-\n+    V1Assert.assertEquals(\"Last sequence number should be 0\", 0, readMetadata().lastSequenceNumber());\n+    V2Assert.assertEquals(\"Last sequence number should be 0\", 0, readMetadata().lastSequenceNumber());\n     Assert.assertEquals(\"Table should start empty\", 0, listManifestFiles().size());\n \n     table.newAppend()\n         .appendFile(FILE_A)\n         .appendFile(FILE_B)\n         .commit();\n \n+    Assert.assertNotNull(\"Should create a snapshot\", table.currentSnapshot());\n+    V1Assert.assertEquals(\"Last sequence number should be 0\", 0, table.ops().current().lastSequenceNumber());\n+    V2Assert.assertEquals(\"Last sequence number should be 1\", 1, table.ops().current().lastSequenceNumber());\n+\n     TableMetadata base = readMetadata();\n-    long baseId = base.currentSnapshot().snapshotId();\n+    Snapshot commitBefore = table.currentSnapshot();\n+    long baseId = commitBefore.snapshotId();\n+    validateSnapshot(null, commitBefore, 1, FILE_A, FILE_B);\n+\n     Assert.assertEquals(\"Should create 1 manifest for initial write\",\n-        1, base.currentSnapshot().allManifests().size());\n+        1, commitBefore.allManifests().size());\n     ManifestFile initialManifest = base.currentSnapshot().allManifests().get(0);\n+    validateManifest(initialManifest,\n+        seqs(1, 1),\n+        ids(baseId, baseId),\n+        files(FILE_A, FILE_B),\n+        statuses(Status.ADDED, Status.ADDED));\n \n-    Snapshot pending = table.newAppend()\n+    table.newAppend()\n         .appendFile(FILE_C)\n         .appendFile(FILE_D)\n-        .apply();\n+        .commit();\n+    V1Assert.assertEquals(\"Last sequence number should be 0\", 0, table.ops().current().lastSequenceNumber());\n+    V2Assert.assertEquals(\"Last sequence number should be 1\", 2, table.ops().current().lastSequenceNumber());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d38b7107131dc0654a93b076935abcde138aa560"}, "originalPosition": 191}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYzNDQ2MDg0", "url": "https://github.com/apache/iceberg/pull/1101#pullrequestreview-463446084", "createdAt": "2020-08-07T16:29:02Z", "commit": {"oid": "d38b7107131dc0654a93b076935abcde138aa560"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxNjoyOTowMlrOG9gPsQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxNjoyOTowMlrOG9gPsQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzE0NDYyNQ==", "bodyText": "Minor: we don't need duplicate assertions when the condition should be true for both v1 and v2 tables.", "url": "https://github.com/apache/iceberg/pull/1101#discussion_r467144625", "createdAt": "2020-08-07T16:29:02Z", "author": {"login": "rdblue"}, "path": "core/src/test/java/org/apache/iceberg/TestMergeAppend.java", "diffHunk": "@@ -193,46 +259,200 @@ public void testManifestMergeMinCount() throws IOException {\n         .appendManifest(manifest3)\n         .commit();\n \n+    Snapshot snap1 = table.currentSnapshot();\n+    long commitId1 = snap1.snapshotId();\n+    base = readMetadata();\n+    V2Assert.assertEquals(\"Snapshot sequence number should be 1\", 1, snap1.sequenceNumber());\n+    V2Assert.assertEquals(\"Last sequence number should be 1\", 1, base.lastSequenceNumber());\n+    V1Assert.assertEquals(\"Table should end with last-sequence-number 0\", 0, base.lastSequenceNumber());\n+\n     Assert.assertEquals(\"Should contain 2 merged manifest for first write\",\n         2, readMetadata().currentSnapshot().allManifests().size());\n+    validateManifest(snap1.allManifests().get(0),\n+        seqs(1),\n+        ids(commitId1),\n+        files(FILE_A),\n+        statuses(Status.ADDED));\n+    validateManifest(snap1.allManifests().get(1),\n+        seqs(1, 1),\n+        ids(commitId1, commitId1),\n+        files(FILE_C, FILE_D),\n+        statuses(Status.ADDED, Status.ADDED));\n \n     table.newAppend()\n         .appendManifest(manifest)\n         .appendManifest(manifest2)\n         .appendManifest(manifest3)\n         .commit();\n+    Snapshot snap2 = table.currentSnapshot();\n+    long commitId2 = snap2.snapshotId();\n+    base = readMetadata();\n+    V2Assert.assertEquals(\"Snapshot sequence number should be 2\", 2, snap2.sequenceNumber());\n+    V2Assert.assertEquals(\"Last sequence number should be 2\", 2, base.lastSequenceNumber());\n+    V1Assert.assertEquals(\"Table should end with last-sequence-number 0\", 0, base.lastSequenceNumber());\n \n     Assert.assertEquals(\"Should contain 3 merged manifest for second write\",\n         3, readMetadata().currentSnapshot().allManifests().size());\n+    validateManifest(snap2.allManifests().get(0),\n+        seqs(2),\n+        ids(commitId2),\n+        files(FILE_A),\n+        statuses(Status.ADDED));\n+    validateManifest(snap2.allManifests().get(1),\n+        seqs(2, 2),\n+        ids(commitId2, commitId2),\n+        files(FILE_C, FILE_D),\n+        statuses(Status.ADDED, Status.ADDED));\n+    validateManifest(snap2.allManifests().get(2),\n+        seqs(1, 1, 1),\n+        ids(commitId1, commitId1, commitId1),\n+        files(FILE_A, FILE_C, FILE_D),\n+        statuses(Status.EXISTING, Status.EXISTING, Status.EXISTING));\n \n     // validate that the metadata summary is correct when using appendManifest\n     Assert.assertEquals(\"Summary metadata should include 3 added files\",\n         \"3\", readMetadata().currentSnapshot().summary().get(\"added-data-files\"));\n   }\n \n+  @Test\n+  public void testManifestsMergeIntoOne() throws IOException {\n+    Assert.assertEquals(\"Table should start empty\", 0, listManifestFiles().size());\n+    table.newAppend().appendFile(FILE_A).commit();\n+    Snapshot snap1 = table.currentSnapshot();\n+    TableMetadata base = readMetadata();\n+    V2Assert.assertEquals(\"Snapshot sequence number should be 1\", 1, snap1.sequenceNumber());\n+    V2Assert.assertEquals(\"Last sequence number should be 1\", 1, base.lastSequenceNumber());\n+    V1Assert.assertEquals(\"Table should end with last-sequence-number 0\", 0, base.lastSequenceNumber());\n+    long commitId1 = snap1.snapshotId();\n+\n+    Assert.assertEquals(\"Should contain 1 manifest\", 1, snap1.allManifests().size());\n+    validateManifest(snap1.allManifests().get(0), seqs(1), ids(commitId1), files(FILE_A), statuses(Status.ADDED));\n+\n+    table.newAppend().appendFile(FILE_B).commit();\n+    Snapshot snap2 = table.currentSnapshot();\n+    long commitId2 = snap2.snapshotId();\n+    base = readMetadata();\n+    V2Assert.assertEquals(\"Snapshot sequence number should be 2\", 2, snap2.sequenceNumber());\n+    V2Assert.assertEquals(\"Last sequence number should be 2\", 2, base.lastSequenceNumber());\n+    V1Assert.assertEquals(\"Table should end with last-sequence-number 0\", 0, base.lastSequenceNumber());\n+\n+    Assert.assertEquals(\"Should contain 2 manifests\", 2, snap2.allManifests().size());\n+    validateManifest(snap2.allManifests().get(0),\n+        seqs(2),\n+        ids(commitId2),\n+        files(FILE_B),\n+        statuses(Status.ADDED));\n+    validateManifest(snap2.allManifests().get(1),\n+        seqs(1),\n+        ids(commitId1),\n+        files(FILE_A),\n+        statuses(Status.ADDED));\n+\n+    table.newAppend()\n+        .appendManifest(writeManifest(\"input-m0.avro\",\n+            manifestEntry(ManifestEntry.Status.ADDED, null, FILE_C)))\n+        .commit();\n+    Snapshot snap3 = table.currentSnapshot();\n+\n+    base = readMetadata();\n+    V2Assert.assertEquals(\"Snapshot sequence number should be 3\", 3, snap3.sequenceNumber());\n+    V2Assert.assertEquals(\"Last sequence number should be 3\", 3, base.lastSequenceNumber());\n+    V1Assert.assertEquals(\"Table should end with last-sequence-number 0\", 0, base.lastSequenceNumber());\n+\n+    Assert.assertEquals(\"Should contain 3 manifests\", 3, snap3.allManifests().size());\n+    long commitId3 = snap3.snapshotId();\n+    validateManifest(snap3.allManifests().get(0),\n+        seqs(3),\n+        ids(commitId3),\n+        files(FILE_C),\n+        statuses(Status.ADDED));\n+    validateManifest(snap3.allManifests().get(1),\n+        seqs(2),\n+        ids(commitId2),\n+        files(FILE_B),\n+        statuses(Status.ADDED));\n+    validateManifest(snap3.allManifests().get(2),\n+        seqs(1),\n+        ids(commitId1),\n+        files(FILE_A),\n+        statuses(Status.ADDED));\n+\n+    table.updateProperties()\n+        .set(TableProperties.MANIFEST_MIN_MERGE_COUNT, \"1\")\n+        .commit();\n+\n+    table.newAppend()\n+        .appendManifest(writeManifest(\"input-m1.avro\",\n+            manifestEntry(ManifestEntry.Status.ADDED, null, FILE_D)))\n+        .commit();\n+    Snapshot snap4 = table.currentSnapshot();\n+\n+    base = readMetadata();\n+    V2Assert.assertEquals(\"Snapshot sequence number should be 4\", 4, snap4.sequenceNumber());\n+    V2Assert.assertEquals(\"Last sequence number should be 4\", 4, base.lastSequenceNumber());\n+    V1Assert.assertEquals(\"Table should end with last-sequence-number 0\", 0, base.lastSequenceNumber());\n+\n+    long commitId4 = snap4.snapshotId();\n+    Assert.assertEquals(\"Should only contains 1 merged manifest\", 1, snap4.allManifests().size());\n+    validateManifest(snap4.allManifests().get(0),\n+        seqs(4, 3, 2, 1),\n+        ids(commitId4, commitId3, commitId2, commitId1),\n+        files(FILE_D, FILE_C, FILE_B, FILE_A),\n+        statuses(Status.ADDED, Status.EXISTING, Status.EXISTING, Status.EXISTING));\n+  }\n+\n   @Test\n   public void testManifestDoNotMergeMinCount() throws IOException {\n     Assert.assertEquals(\"Table should start empty\", 0, listManifestFiles().size());\n     table.updateProperties().set(\"commit.manifest.min-count-to-merge\", \"4\").commit();\n \n     TableMetadata base = readMetadata();\n     Assert.assertNull(\"Should not have a current snapshot\", base.currentSnapshot());\n+    V1Assert.assertEquals(\"Last sequence number should be 0\", 0, readMetadata().lastSequenceNumber());\n+    V2Assert.assertEquals(\"Last sequence number should be 0\", 0, readMetadata().lastSequenceNumber());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d38b7107131dc0654a93b076935abcde138aa560"}, "originalPosition": 379}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7770ff69dfeeabc33e9793154684970df3332520", "author": {"user": {"login": "chenjunjiedada", "name": "Chen, Junjie"}}, "url": "https://github.com/apache/iceberg/commit/7770ff69dfeeabc33e9793154684970df3332520", "committedDate": "2020-08-08T00:24:28Z", "message": "address comments"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4500, "cost": 1, "resetAt": "2021-10-29T19:57:52Z"}}}