{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQ1MDQzNjg1", "number": 1981, "title": "Fix date and timestamp transforms", "bodyText": "This fixes incorrect values produced by date and time transforms and adds tests.\nThis also updates date and timestamp transform projection methods to include incorrectly transformed values.\nFixes #1680.", "createdAt": "2020-12-23T21:50:30Z", "url": "https://github.com/apache/iceberg/pull/1981", "merged": true, "mergeCommit": {"oid": "ae96c325239505bccde5eaeec42dbdde4df5fa6a"}, "closed": true, "closedAt": "2021-01-22T01:14:40Z", "author": {"login": "rdblue"}, "timelineItems": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdpGVrFABqjQxNDU2MTUyMjU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdyebCcAFqTU3Mzg1ODc3MQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d5ae0f1abf1b4aaff70aba6f72e90b0dcd2d746a", "author": {"user": {"login": "rdblue", "name": "Ryan Blue"}}, "url": "https://github.com/apache/iceberg/commit/d5ae0f1abf1b4aaff70aba6f72e90b0dcd2d746a", "committedDate": "2020-12-23T20:34:07Z", "message": "Update timestamp and date transforms."}, "afterCommit": {"oid": "c5fe954009145ba0bec495bdeefd881a3343afa5", "author": {"user": {"login": "rdblue", "name": "Ryan Blue"}}, "url": "https://github.com/apache/iceberg/commit/c5fe954009145ba0bec495bdeefd881a3343afa5", "committedDate": "2020-12-23T21:50:56Z", "message": "Fix timestamp and date transforms."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU4MjQ0MDA2", "url": "https://github.com/apache/iceberg/pull/1981#pullrequestreview-558244006", "createdAt": "2020-12-23T21:52:41Z", "commit": {"oid": "c5fe954009145ba0bec495bdeefd881a3343afa5"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QyMTo1Mjo0MVrOIK30Kg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QyMTo1Mjo0MVrOIK30Kg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODI3MTE0Ng==", "bodyText": "More tests need to be added here. I just wanted to get this up for review since I'm going to be out for a couple of days.", "url": "https://github.com/apache/iceberg/pull/1981#discussion_r548271146", "createdAt": "2020-12-23T21:52:41Z", "author": {"login": "rdblue"}, "path": "api/src/test/java/org/apache/iceberg/transforms/TestTimestampsProjection.java", "diffHunk": "@@ -74,22 +74,22 @@ public void assertProjectionStrictValue(PartitionSpec spec, UnboundPredicate<?>\n                                           Expression.Operation expectedOp) {\n \n     Expression projection = Projections.strict(spec).project(filter);\n-    Assert.assertEquals(projection.op(), expectedOp);\n+    Assert.assertEquals(expectedOp, projection.op());\n   }\n \n   public void assertProjectionInclusiveValue(PartitionSpec spec, UnboundPredicate<?> filter,\n                                              Expression.Operation expectedOp) {\n \n     Expression projection = Projections.inclusive(spec).project(filter);\n-    Assert.assertEquals(projection.op(), expectedOp);\n+    Assert.assertEquals(expectedOp, projection.op());\n   }\n \n   public void assertProjectionInclusive(PartitionSpec spec, UnboundPredicate<?> filter,\n                                         Expression.Operation expectedOp, String expectedLiteral) {\n     Expression projection = Projections.inclusive(spec).project(filter);\n     UnboundPredicate<?> predicate = assertAndUnwrapUnbound(projection);\n \n-    Assert.assertEquals(predicate.op(), expectedOp);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c5fe954009145ba0bec495bdeefd881a3343afa5"}, "originalPosition": 21}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a0b88165344b50f90cd60359287f8c5f7e5dadbb", "author": {"user": {"login": "rdblue", "name": "Ryan Blue"}}, "url": "https://github.com/apache/iceberg/commit/a0b88165344b50f90cd60359287f8c5f7e5dadbb", "committedDate": "2020-12-23T21:53:53Z", "message": "Fix timestamp and date transforms."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c5fe954009145ba0bec495bdeefd881a3343afa5", "author": {"user": {"login": "rdblue", "name": "Ryan Blue"}}, "url": "https://github.com/apache/iceberg/commit/c5fe954009145ba0bec495bdeefd881a3343afa5", "committedDate": "2020-12-23T21:50:56Z", "message": "Fix timestamp and date transforms."}, "afterCommit": {"oid": "a0b88165344b50f90cd60359287f8c5f7e5dadbb", "author": {"user": {"login": "rdblue", "name": "Ryan Blue"}}, "url": "https://github.com/apache/iceberg/commit/a0b88165344b50f90cd60359287f8c5f7e5dadbb", "committedDate": "2020-12-23T21:53:53Z", "message": "Fix timestamp and date transforms."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU4Mjk4NDcw", "url": "https://github.com/apache/iceberg/pull/1981#pullrequestreview-558298470", "createdAt": "2020-12-24T01:46:05Z", "commit": {"oid": "a0b88165344b50f90cd60359287f8c5f7e5dadbb"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yNFQwMTo0NjowNVrOIK8WdA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yNFQwMTo0ODoyM1rOIK8YUw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODM0NTQ2MA==", "bodyText": "I think the second argument in Instant.ofEpochSecond is nanosecond instead of microsecond? Although this doesn't change the outcome of this method since we don't accept nanosecond in the first place, and inputing microsecond for nanosecond field just makes the field smaller than it should be, which is already enough to address the case when Math.floorMod() == 0", "url": "https://github.com/apache/iceberg/pull/1981#discussion_r548345460", "createdAt": "2020-12-24T01:46:05Z", "author": {"login": "yyanyy"}, "path": "api/src/main/java/org/apache/iceberg/transforms/Timestamps.java", "diffHunk": "@@ -52,12 +52,19 @@ public Integer apply(Long timestampMicros) {\n       return null;\n     }\n \n-    // discards fractional seconds, not needed for calculation\n-    OffsetDateTime timestamp = Instant\n-        .ofEpochSecond(timestampMicros / 1_000_000)\n-        .atOffset(ZoneOffset.UTC);\n-\n-    return (int) granularity.between(EPOCH, timestamp);\n+    if (timestampMicros >= 0) {\n+      OffsetDateTime timestamp = Instant\n+          .ofEpochSecond(Math.floorDiv(timestampMicros, 1_000_000), Math.floorMod(timestampMicros, 1_000_000))\n+          .atOffset(ZoneOffset.UTC);\n+      return (int) granularity.between(EPOCH, timestamp);\n+    } else {\n+      // add 1 micro to the value to account for the case where there is exactly 1 unit between the timestamp and epoch\n+      // because the result will always be decremented.\n+      OffsetDateTime timestamp = Instant\n+          .ofEpochSecond(Math.floorDiv(timestampMicros, 1_000_000), Math.floorMod(timestampMicros + 1, 1_000_000))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a0b88165344b50f90cd60359287f8c5f7e5dadbb"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODM0NTczNw==", "bodyText": "I think the mention of \"correct\" and \"incorrect\" in these comments might not be obvious to understand outside the context of this PR, as the reader has no prior knowledge of the issue we are fixing here from looking at the code base itself. Do we want to add some more explanation/link to the issue?", "url": "https://github.com/apache/iceberg/pull/1981#discussion_r548345737", "createdAt": "2020-12-24T01:47:22Z", "author": {"login": "yyanyy"}, "path": "api/src/main/java/org/apache/iceberg/transforms/ProjectionUtil.java", "diffHunk": "@@ -254,4 +257,124 @@ private ProjectionUtil() {\n     return predicate(predicate.op(), fieldName,\n         Iterables.transform(predicate.asSetPredicate().literalSet(), transform::apply));\n   }\n+\n+  static UnboundPredicate<Integer> fixInclusiveTimeProjection(UnboundPredicate<Integer> projected) {\n+    if (projected == null) {\n+      return projected;\n+    }\n+\n+    // adjust the predicate for values that were 1 larger than the correct transformed value", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a0b88165344b50f90cd60359287f8c5f7e5dadbb"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODM0NTkzOQ==", "bodyText": "I think this is testing the same thing for NOT_IN in testNegativeMonthStrictLowerBound, do we want to change 1970-01-01 to an earlier time?", "url": "https://github.com/apache/iceberg/pull/1981#discussion_r548345939", "createdAt": "2020-12-24T01:48:23Z", "author": {"login": "yyanyy"}, "path": "api/src/test/java/org/apache/iceberg/transforms/TestDatesProjection.java", "diffHunk": "@@ -142,6 +161,24 @@ public void testMonthStrictUpperBound() {\n     assertProjectionStrictValue(spec, in(\"date\", anotherDate, date), Expression.Operation.FALSE);\n   }\n \n+  @Test\n+  public void testNegativeMonthStrictUpperBound() {\n+    Integer date = (Integer) Literal.of(\"1969-12-31\").to(TYPE).value();\n+    PartitionSpec spec = PartitionSpec.builderFor(SCHEMA).month(\"date\").build();\n+\n+    assertProjectionStrictValue(spec, lessThan(\"date\", date), Expression.Operation.FALSE);\n+    assertProjectionStrictValue(spec, lessThanOrEqual(\"date\", date), Expression.Operation.FALSE);\n+    assertProjectionStrict(spec, greaterThan(\"date\", date), Expression.Operation.GT, \"1969-12\");\n+    assertProjectionStrict(spec, greaterThanOrEqual(\"date\", date), Expression.Operation.GT, \"1969-12\");\n+    assertProjectionStrict(spec, notEqual(\"date\", date), Expression.Operation.NOT_IN, \"[1969-12, 1970-01]\");\n+    assertProjectionStrictValue(spec, equal(\"date\", date), Expression.Operation.FALSE);\n+\n+    Integer anotherDate = (Integer) Literal.of(\"1970-01-01\").to(TYPE).value();\n+    assertProjectionStrict(spec, notIn(\"date\", date, anotherDate),\n+        Expression.Operation.NOT_IN, \"[1969-12, 1970-01]\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a0b88165344b50f90cd60359287f8c5f7e5dadbb"}, "originalPosition": 70}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "caad9b5564e9f342a35273f56ab7cf1fce85bc6d", "author": {"user": {"login": "rdblue", "name": "Ryan Blue"}}, "url": "https://github.com/apache/iceberg/commit/caad9b5564e9f342a35273f56ab7cf1fce85bc6d", "committedDate": "2020-12-29T18:46:34Z", "message": "Fix checkstyle."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b4eb6e6dff84c35e02884e73d8de6bc34c9e6565", "author": {"user": {"login": "rdblue", "name": "Ryan Blue"}}, "url": "https://github.com/apache/iceberg/commit/b4eb6e6dff84c35e02884e73d8de6bc34c9e6565", "committedDate": "2020-12-29T19:37:57Z", "message": "Add more tests."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "146ff9e1aebe19d40ca76a849d39fd3432919ae2", "author": {"user": {"login": "rdblue", "name": "Ryan Blue"}}, "url": "https://github.com/apache/iceberg/commit/146ff9e1aebe19d40ca76a849d39fd3432919ae2", "committedDate": "2020-12-29T19:51:45Z", "message": "Add docs for the projection fix methods."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a6392db0d6403ea71eac30ae9db190c3eff71c68", "author": {"user": {"login": "rdblue", "name": "Ryan Blue"}}, "url": "https://github.com/apache/iceberg/commit/a6392db0d6403ea71eac30ae9db190c3eff71c68", "committedDate": "2020-12-29T19:46:36Z", "message": "Add docs for the projection fix methods."}, "afterCommit": {"oid": "146ff9e1aebe19d40ca76a849d39fd3432919ae2", "author": {"user": {"login": "rdblue", "name": "Ryan Blue"}}, "url": "https://github.com/apache/iceberg/commit/146ff9e1aebe19d40ca76a849d39fd3432919ae2", "committedDate": "2020-12-29T19:51:45Z", "message": "Add docs for the projection fix methods."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "816218928c7fbcddd39b24e5b9e6d675ab6521b0", "author": {"user": {"login": "rdblue", "name": "Ryan Blue"}}, "url": "https://github.com/apache/iceberg/commit/816218928c7fbcddd39b24e5b9e6d675ab6521b0", "committedDate": "2020-12-29T20:12:25Z", "message": "Fix strict GT and GT_EQ projections."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "98a9f9b577e62668accda6a109e75eea3d71dcdd", "author": {"user": {"login": "rdblue", "name": "Ryan Blue"}}, "url": "https://github.com/apache/iceberg/commit/98a9f9b577e62668accda6a109e75eea3d71dcdd", "committedDate": "2020-12-29T20:30:19Z", "message": "Fix LT and LT_EQ strict projection."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTYzMDAxOTY3", "url": "https://github.com/apache/iceberg/pull/1981#pullrequestreview-563001967", "createdAt": "2021-01-06T19:59:19Z", "commit": {"oid": "98a9f9b577e62668accda6a109e75eea3d71dcdd"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNlQxOTo1OToxOVrOIPUamw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNlQyMDowNDo1OVrOIPUjug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjkzNDA0Mw==", "bodyText": "Seems the same logic (if (condition) {return...} return ...) appears multiple times, can it be included inside a method, e.g. just embed it in the method defined in ProjectionUtil?", "url": "https://github.com/apache/iceberg/pull/1981#discussion_r552934043", "createdAt": "2021-01-06T19:59:19Z", "author": {"login": "jun-he"}, "path": "api/src/main/java/org/apache/iceberg/transforms/Dates.java", "diffHunk": "@@ -99,11 +107,24 @@ public boolean satisfiesOrderOf(Transform<?, ?> other) {\n \n     if (pred.isUnaryPredicate()) {\n       return Expressions.predicate(pred.op(), fieldName);\n+\n     } else if (pred.isLiteralPredicate()) {\n-      return ProjectionUtil.truncateInteger(fieldName, pred.asLiteralPredicate(), this);\n+      UnboundPredicate<Integer> projected = ProjectionUtil.truncateInteger(fieldName, pred.asLiteralPredicate(), this);\n+      if (this != DAY) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "98a9f9b577e62668accda6a109e75eea3d71dcdd"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjkzNjM3OA==", "bodyText": "nit: extract 1_000_000 and 1000 to be a constant with meaningful name or use predefined ones in java library.", "url": "https://github.com/apache/iceberg/pull/1981#discussion_r552936378", "createdAt": "2021-01-06T20:04:59Z", "author": {"login": "jun-he"}, "path": "api/src/main/java/org/apache/iceberg/transforms/Timestamps.java", "diffHunk": "@@ -52,12 +52,23 @@ public Integer apply(Long timestampMicros) {\n       return null;\n     }\n \n-    // discards fractional seconds, not needed for calculation\n-    OffsetDateTime timestamp = Instant\n-        .ofEpochSecond(timestampMicros / 1_000_000)\n-        .atOffset(ZoneOffset.UTC);\n-\n-    return (int) granularity.between(EPOCH, timestamp);\n+    if (timestampMicros >= 0) {\n+      OffsetDateTime timestamp = Instant\n+          .ofEpochSecond(\n+              Math.floorDiv(timestampMicros, 1_000_000),\n+              Math.floorMod(timestampMicros, 1_000_000) * 1000)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "98a9f9b577e62668accda6a109e75eea3d71dcdd"}, "originalPosition": 14}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTYzMDA5NzAw", "url": "https://github.com/apache/iceberg/pull/1981#pullrequestreview-563009700", "createdAt": "2021-01-06T20:13:33Z", "commit": {"oid": "98a9f9b577e62668accda6a109e75eea3d71dcdd"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNlQyMDoxMzozM1rOIPUxfg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNlQyMDoxMzozM1rOIPUxfg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjkzOTkwMg==", "bodyText": "why not just always return this new expression? We build up fixedSet no matter what?", "url": "https://github.com/apache/iceberg/pull/1981#discussion_r552939902", "createdAt": "2021-01-06T20:13:33Z", "author": {"login": "RussellSpitzer"}, "path": "api/src/main/java/org/apache/iceberg/transforms/ProjectionUtil.java", "diffHunk": "@@ -254,4 +257,145 @@ private ProjectionUtil() {\n     return predicate(predicate.op(), fieldName,\n         Iterables.transform(predicate.asSetPredicate().literalSet(), transform::apply));\n   }\n+\n+  /**\n+   * Fixes an inclusive projection to account for incorrectly transformed values.\n+   * <p>\n+   * A bug in 0.10.0 and earlier caused negative values to be incorrectly transformed by date and timestamp transforms\n+   * to 1 larger than the correct value. For example, day(1969-12-31 10:00:00) produced 0 instead of -1. To read data\n+   * written by versions with this bug, this method adjusts the inclusive projection. The current inclusive projection\n+   * is correct, so this modifies the \"correct\" projection when needed. For example, < day(1969-12-31 10:00:00) will\n+   * produce <= -1 (= 1969-12-31) and is adjusted to <= 0 (= 1969-01-01) because the incorrect transformed value was 0.\n+   */\n+  static UnboundPredicate<Integer> fixInclusiveTimeProjection(UnboundPredicate<Integer> projected) {\n+    if (projected == null) {\n+      return projected;\n+    }\n+\n+    // adjust the predicate for values that were 1 larger than the correct transformed value\n+    switch (projected.op()) {\n+      case LT:\n+        if (projected.literal().value() < 0) {\n+          return Expressions.lessThan(projected.term(), projected.literal().value() + 1);\n+        }\n+\n+        return projected;\n+\n+      case LT_EQ:\n+        if (projected.literal().value() < 0) {\n+          return Expressions.lessThanOrEqual(projected.term(), projected.literal().value() + 1);\n+        }\n+\n+        return projected;\n+\n+      case GT:\n+      case GT_EQ:\n+        // incorrect projected values are already greater than the bound for GT, GT_EQ\n+        return projected;\n+\n+      case EQ:\n+        if (projected.literal().value() < 0) {\n+          // match either the incorrect value (projectedValue + 1) or the correct value (projectedValue)\n+          return Expressions.in(projected.term(), projected.literal().value(), projected.literal().value() + 1);\n+        }\n+\n+        return projected;\n+\n+      case IN:\n+        Set<Integer> fixedSet = Sets.newHashSet();\n+        boolean hasNegativeValue = false;\n+        for (Literal<Integer> lit : projected.literals()) {\n+          Integer value = lit.value();\n+          fixedSet.add(value);\n+          if (value < 0) {\n+            hasNegativeValue = true;\n+            fixedSet.add(value + 1);\n+          }\n+        }\n+\n+        if (hasNegativeValue) {\n+          return Expressions.in(projected.term(), fixedSet);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "98a9f9b577e62668accda6a109e75eea3d71dcdd"}, "originalPosition": 79}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTczODU4Nzcx", "url": "https://github.com/apache/iceberg/pull/1981#pullrequestreview-573858771", "createdAt": "2021-01-22T01:00:08Z", "commit": {"oid": "98a9f9b577e62668accda6a109e75eea3d71dcdd"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3326, "cost": 1, "resetAt": "2021-10-29T19:57:52Z"}}}