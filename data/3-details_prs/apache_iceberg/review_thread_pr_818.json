{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc4NTYxNjc1", "number": 818, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMlQwNzoxODo0NlrODiEcDQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMlQwNzoxODo0NlrODiEcDQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3MDUwODkzOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/apache/iceberg/BaseRewriteManifests.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMlQwNzoxODo0NlrOFtJ9kA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQyMTo1NDoyMlrOFwwsqw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg5MzQ1Ng==", "bodyText": "I removed synchronized here because it seems unnecessary. close is either called in synchronized void addEntry() method, which is already synchronized. Or it is called in the finally blockto close all of them using thread pool. In this case,closemethod of eachWriterWrapper` will be called by different threads and no need to be synchronized.", "url": "https://github.com/apache/iceberg/pull/818#discussion_r382893456", "createdAt": "2020-02-22T07:18:46Z", "author": {"login": "jun-he"}, "path": "core/src/main/java/org/apache/iceberg/BaseRewriteManifests.java", "diffHunk": "@@ -325,59 +327,38 @@ long getManifestTargetSizeBytes() {\n   }\n \n   class WriterWrapper {\n-    private final Map<Integer, ManifestWriter> manifestWritersBySpecId = Maps.newConcurrentMap();\n+    private final PartitionSpec spec;\n+    private ManifestWriter writer;\n \n-    synchronized void addEntry(ManifestEntry entry, int partitionSpecId) {\n-      getWriter(partitionSpecId).existing(entry);\n+    WriterWrapper(PartitionSpec spec) {\n+      this.spec = spec;\n     }\n \n-    synchronized ManifestWriter getWriter(int partitionSpecId) {\n-      ManifestWriter writer = manifestWritersBySpecId.get(partitionSpecId);\n-      if (writer != null) {\n-        if (writer.length() < getManifestTargetSizeBytes()) {\n-          return writer;\n-        } else {\n-          close(partitionSpecId);\n-        }\n+    synchronized void addEntry(ManifestEntry entry) {\n+      if (writer == null) {\n+        writer = newWriter();\n+      } else if (writer.length() >= getManifestTargetSizeBytes()) {\n+        close();\n+        writer = newWriter();\n       }\n+      writer.existing(entry);\n+    }\n \n-      // create ManifestWriter with the correct partitionSpec\n-      PartitionSpec partitionSpec = specsById.get(partitionSpecId);\n-      OutputFile outputFile = manifestPath(manifestSuffix.getAndIncrement());\n-      writer = new ManifestWriter(partitionSpec, outputFile, snapshotId());\n-      manifestWritersBySpecId.put(partitionSpecId, writer);\n-      return writer;\n+    private ManifestWriter newWriter() {\n+      return new ManifestWriter(spec, manifestPath(manifestSuffix.getAndIncrement()), snapshotId());\n     }\n \n-    synchronized void close(int partitionSpecId) {\n-      if (manifestWritersBySpecId != null) {\n+    void close() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5f7e5e49a3b3727f6394d76aaf19be0bbbb64903"}, "originalPosition": 98}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjY3MzgzNQ==", "bodyText": "If a method is not safe to be called from multiple threads, then it should use synchronized. We don't want to rely on the current set of callers.", "url": "https://github.com/apache/iceberg/pull/818#discussion_r386673835", "createdAt": "2020-03-02T21:54:22Z", "author": {"login": "rdblue"}, "path": "core/src/main/java/org/apache/iceberg/BaseRewriteManifests.java", "diffHunk": "@@ -325,59 +327,38 @@ long getManifestTargetSizeBytes() {\n   }\n \n   class WriterWrapper {\n-    private final Map<Integer, ManifestWriter> manifestWritersBySpecId = Maps.newConcurrentMap();\n+    private final PartitionSpec spec;\n+    private ManifestWriter writer;\n \n-    synchronized void addEntry(ManifestEntry entry, int partitionSpecId) {\n-      getWriter(partitionSpecId).existing(entry);\n+    WriterWrapper(PartitionSpec spec) {\n+      this.spec = spec;\n     }\n \n-    synchronized ManifestWriter getWriter(int partitionSpecId) {\n-      ManifestWriter writer = manifestWritersBySpecId.get(partitionSpecId);\n-      if (writer != null) {\n-        if (writer.length() < getManifestTargetSizeBytes()) {\n-          return writer;\n-        } else {\n-          close(partitionSpecId);\n-        }\n+    synchronized void addEntry(ManifestEntry entry) {\n+      if (writer == null) {\n+        writer = newWriter();\n+      } else if (writer.length() >= getManifestTargetSizeBytes()) {\n+        close();\n+        writer = newWriter();\n       }\n+      writer.existing(entry);\n+    }\n \n-      // create ManifestWriter with the correct partitionSpec\n-      PartitionSpec partitionSpec = specsById.get(partitionSpecId);\n-      OutputFile outputFile = manifestPath(manifestSuffix.getAndIncrement());\n-      writer = new ManifestWriter(partitionSpec, outputFile, snapshotId());\n-      manifestWritersBySpecId.put(partitionSpecId, writer);\n-      return writer;\n+    private ManifestWriter newWriter() {\n+      return new ManifestWriter(spec, manifestPath(manifestSuffix.getAndIncrement()), snapshotId());\n     }\n \n-    synchronized void close(int partitionSpecId) {\n-      if (manifestWritersBySpecId != null) {\n+    void close() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg5MzQ1Ng=="}, "originalCommit": {"oid": "5f7e5e49a3b3727f6394d76aaf19be0bbbb64903"}, "originalPosition": 98}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2817, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}