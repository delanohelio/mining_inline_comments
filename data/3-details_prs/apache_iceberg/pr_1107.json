{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDMyNDUyMjUx", "number": 1107, "title": "Add IcebergStorageHandler", "bodyText": "This PR adds an IcebergStorageHandler that bundles together all the interfaces needed to read Iceberg table from Hive. This would first require #933 and #1103 to be merged in as it requires the InputFormat and the SerDe classes\nWe are planning on adding tests using HiveRunner for this class once everything is merged in :D\n@rdblue @rdsr @massdosage @teabot", "createdAt": "2020-06-10T13:22:31Z", "url": "https://github.com/apache/iceberg/pull/1107", "merged": true, "mergeCommit": {"oid": "d1429a2c686cd61a424a0a15205fbbb4ed785d75"}, "closed": true, "closedAt": "2020-07-24T00:57:14Z", "author": {"login": "cmathiesen"}, "timelineItems": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcp5dc0AH2gAyNDMyNDUyMjUxOjY1ZmU4MTllMzY5MTVhY2MyODE2YjdhMDY5MDI4NjdlZTczYjQ5ZmM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc35Q_kAFqTQ1NDU4NDg2MA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "65fe819e36915acc2816b7a06902867ee73b49fc", "author": {"user": {"login": "cmathiesen", "name": null}}, "url": "https://github.com/apache/iceberg/commit/65fe819e36915acc2816b7a06902867ee73b49fc", "committedDate": "2020-06-10T13:13:44Z", "message": "Add StorageHandler"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMwNzM0ODc4", "url": "https://github.com/apache/iceberg/pull/1107#pullrequestreview-430734878", "createdAt": "2020-06-15T15:06:28Z", "commit": {"oid": "65fe819e36915acc2816b7a06902867ee73b49fc"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxNTowNjoyOVrOGj2YQQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxNTowNjoyOVrOGj2YQQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDI0NDI4OQ==", "bodyText": "I think is this the place we can pass in many of the options which Iceberg supports. E.g reading a specific snapshot, case insensitive match etc..", "url": "https://github.com/apache/iceberg/pull/1107#discussion_r440244289", "createdAt": "2020-06-15T15:06:29Z", "author": {"login": "rdsr"}, "path": "mr/src/main/java/org/apache/iceberg/mr/mapred/IcebergStorageHandler.java", "diffHunk": "@@ -0,0 +1,115 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.mr.mapred;\n+\n+import java.util.Map;\n+import org.apache.hadoop.conf.Configuration;\n+import org.apache.hadoop.hive.metastore.HiveMetaHook;\n+import org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat;\n+import org.apache.hadoop.hive.ql.metadata.HiveException;\n+import org.apache.hadoop.hive.ql.metadata.HiveStorageHandler;\n+import org.apache.hadoop.hive.ql.metadata.HiveStoragePredicateHandler;\n+import org.apache.hadoop.hive.ql.plan.ExprNodeDesc;\n+import org.apache.hadoop.hive.ql.plan.ExprNodeGenericFuncDesc;\n+import org.apache.hadoop.hive.ql.plan.TableDesc;\n+import org.apache.hadoop.hive.ql.security.authorization.HiveAuthorizationProvider;\n+import org.apache.hadoop.hive.serde2.AbstractSerDe;\n+import org.apache.hadoop.hive.serde2.Deserializer;\n+import org.apache.hadoop.mapred.InputFormat;\n+import org.apache.hadoop.mapred.JobConf;\n+import org.apache.hadoop.mapred.OutputFormat;\n+\n+public class IcebergStorageHandler implements HiveStoragePredicateHandler, HiveStorageHandler {\n+\n+  private Configuration conf;\n+\n+  @Override\n+  public Class<? extends InputFormat> getInputFormatClass() {\n+    return IcebergInputFormat.class;\n+  }\n+\n+  @Override\n+  public Class<? extends OutputFormat> getOutputFormatClass() {\n+    return HiveIgnoreKeyTextOutputFormat.class;\n+  }\n+\n+  @Override\n+  public Class<? extends AbstractSerDe> getSerDeClass() {\n+    return IcebergSerDe.class;\n+  }\n+\n+  @Override\n+  public HiveMetaHook getMetaHook() {\n+    return null;\n+  }\n+\n+  @Override\n+  public HiveAuthorizationProvider getAuthorizationProvider() throws HiveException {\n+    return null;\n+  }\n+\n+  @Override\n+  public void configureInputJobProperties(TableDesc tableDesc, Map<String, String> map) {\n+\n+  }\n+\n+  @Override\n+  public void configureOutputJobProperties(TableDesc tableDesc, Map<String, String> map) {\n+\n+  }\n+\n+  @Override\n+  public void configureTableJobProperties(TableDesc tableDesc, Map<String, String> map) {\n+\n+  }\n+\n+  @Override\n+  public void configureJobConf(TableDesc tableDesc, JobConf jobConf) {\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "65fe819e36915acc2816b7a06902867ee73b49fc"}, "originalPosition": 85}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUzMjY0MTMx", "url": "https://github.com/apache/iceberg/pull/1107#pullrequestreview-453264131", "createdAt": "2020-07-22T12:23:31Z", "commit": {"oid": "65fe819e36915acc2816b7a06902867ee73b49fc"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxMjoyMzozMVrOG1f9nA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxMjoyMzozMVrOG1f9nA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODc1MTM4OA==", "bodyText": "As a first implementation it is correct.\nMaybe stating the obvious, but if we know that the Iceberg predicate will cover the expression fully, then we can return empty residualPredicate so we will not have an unnecessary filtering operation in Hive. Or if the expression filtering is covered by Iceberg partially then Hive should filter only for the residual filter.", "url": "https://github.com/apache/iceberg/pull/1107#discussion_r458751388", "createdAt": "2020-07-22T12:23:31Z", "author": {"login": "pvary"}, "path": "mr/src/main/java/org/apache/iceberg/mr/mapred/IcebergStorageHandler.java", "diffHunk": "@@ -0,0 +1,115 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.mr.mapred;\n+\n+import java.util.Map;\n+import org.apache.hadoop.conf.Configuration;\n+import org.apache.hadoop.hive.metastore.HiveMetaHook;\n+import org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat;\n+import org.apache.hadoop.hive.ql.metadata.HiveException;\n+import org.apache.hadoop.hive.ql.metadata.HiveStorageHandler;\n+import org.apache.hadoop.hive.ql.metadata.HiveStoragePredicateHandler;\n+import org.apache.hadoop.hive.ql.plan.ExprNodeDesc;\n+import org.apache.hadoop.hive.ql.plan.ExprNodeGenericFuncDesc;\n+import org.apache.hadoop.hive.ql.plan.TableDesc;\n+import org.apache.hadoop.hive.ql.security.authorization.HiveAuthorizationProvider;\n+import org.apache.hadoop.hive.serde2.AbstractSerDe;\n+import org.apache.hadoop.hive.serde2.Deserializer;\n+import org.apache.hadoop.mapred.InputFormat;\n+import org.apache.hadoop.mapred.JobConf;\n+import org.apache.hadoop.mapred.OutputFormat;\n+\n+public class IcebergStorageHandler implements HiveStoragePredicateHandler, HiveStorageHandler {\n+\n+  private Configuration conf;\n+\n+  @Override\n+  public Class<? extends InputFormat> getInputFormatClass() {\n+    return IcebergInputFormat.class;\n+  }\n+\n+  @Override\n+  public Class<? extends OutputFormat> getOutputFormatClass() {\n+    return HiveIgnoreKeyTextOutputFormat.class;\n+  }\n+\n+  @Override\n+  public Class<? extends AbstractSerDe> getSerDeClass() {\n+    return IcebergSerDe.class;\n+  }\n+\n+  @Override\n+  public HiveMetaHook getMetaHook() {\n+    return null;\n+  }\n+\n+  @Override\n+  public HiveAuthorizationProvider getAuthorizationProvider() throws HiveException {\n+    return null;\n+  }\n+\n+  @Override\n+  public void configureInputJobProperties(TableDesc tableDesc, Map<String, String> map) {\n+\n+  }\n+\n+  @Override\n+  public void configureOutputJobProperties(TableDesc tableDesc, Map<String, String> map) {\n+\n+  }\n+\n+  @Override\n+  public void configureTableJobProperties(TableDesc tableDesc, Map<String, String> map) {\n+\n+  }\n+\n+  @Override\n+  public void configureJobConf(TableDesc tableDesc, JobConf jobConf) {\n+\n+  }\n+\n+  @Override\n+  public Configuration getConf() {\n+    return conf;\n+  }\n+\n+  @Override\n+  public void setConf(Configuration conf) {\n+    this.conf = conf;\n+  }\n+  @Override\n+  public String toString() {\n+    return this.getClass().getName();\n+  }\n+\n+  /**\n+   * @param jobConf Job configuration for InputFormat to access\n+   * @param deserializer Deserializer\n+   * @param exprNodeDesc Filter expression extracted by Hive\n+   * @return Entire filter to take advantage of Hive's pruning as well as Iceberg's pruning.\n+   */\n+  @Override\n+  public DecomposedPredicate decomposePredicate(JobConf jobConf, Deserializer deserializer, ExprNodeDesc exprNodeDesc) {\n+    DecomposedPredicate predicate = new DecomposedPredicate();\n+    predicate.residualPredicate = (ExprNodeGenericFuncDesc) exprNodeDesc;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "65fe819e36915acc2816b7a06902867ee73b49fc"}, "originalPosition": 111}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2c5fe148d64142747dff533fec61ce224f8108cf", "author": {"user": {"login": "massdosage", "name": "Adrian Woodhead"}}, "url": "https://github.com/apache/iceberg/commit/2c5fe148d64142747dff533fec61ce224f8108cf", "committedDate": "2020-07-23T13:37:30Z", "message": "merge master"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fa03e7373f5f692b8699c6aa43e5e59c9641faa2", "author": {"user": {"login": "massdosage", "name": "Adrian Woodhead"}}, "url": "https://github.com/apache/iceberg/commit/fa03e7373f5f692b8699c6aa43e5e59c9641faa2", "committedDate": "2020-07-23T13:37:49Z", "message": "update storage handler"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU0NTg0NzM1", "url": "https://github.com/apache/iceberg/pull/1107#pullrequestreview-454584735", "createdAt": "2020-07-24T00:54:32Z", "commit": {"oid": "fa03e7373f5f692b8699c6aa43e5e59c9641faa2"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQwMDo1NDozM1rOG2gQ-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQwMDo1NDozM1rOG2gQ-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTgwNDkyMA==", "bodyText": "In table metadata, we use FileOutputFormat because it can't be instantiated, so any write attempted through a Hive table library would fail, instead of writing data that doesn't appear in the table. Does that need to be done here?", "url": "https://github.com/apache/iceberg/pull/1107#discussion_r459804920", "createdAt": "2020-07-24T00:54:33Z", "author": {"login": "rdblue"}, "path": "mr/src/main/java/org/apache/iceberg/mr/hive/HiveIcebergStorageHandler.java", "diffHunk": "@@ -0,0 +1,117 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.mr.hive;\n+\n+import java.util.Map;\n+import org.apache.hadoop.conf.Configuration;\n+import org.apache.hadoop.hive.metastore.HiveMetaHook;\n+import org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat;\n+import org.apache.hadoop.hive.ql.metadata.HiveException;\n+import org.apache.hadoop.hive.ql.metadata.HiveStorageHandler;\n+import org.apache.hadoop.hive.ql.metadata.HiveStoragePredicateHandler;\n+import org.apache.hadoop.hive.ql.plan.ExprNodeDesc;\n+import org.apache.hadoop.hive.ql.plan.ExprNodeGenericFuncDesc;\n+import org.apache.hadoop.hive.ql.plan.TableDesc;\n+import org.apache.hadoop.hive.ql.security.authorization.HiveAuthorizationProvider;\n+import org.apache.hadoop.hive.serde2.AbstractSerDe;\n+import org.apache.hadoop.hive.serde2.Deserializer;\n+import org.apache.hadoop.mapred.InputFormat;\n+import org.apache.hadoop.mapred.JobConf;\n+import org.apache.hadoop.mapred.OutputFormat;\n+import org.apache.iceberg.mr.mapred.IcebergSerDe;\n+\n+public class HiveIcebergStorageHandler implements HiveStoragePredicateHandler, HiveStorageHandler {\n+\n+  private Configuration conf;\n+\n+  @Override\n+  public Class<? extends InputFormat> getInputFormatClass() {\n+    return HiveIcebergInputFormat.class;\n+  }\n+\n+  @Override\n+  public Class<? extends OutputFormat> getOutputFormatClass() {\n+    return HiveIgnoreKeyTextOutputFormat.class;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fa03e7373f5f692b8699c6aa43e5e59c9641faa2"}, "originalPosition": 51}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU0NTg0ODYw", "url": "https://github.com/apache/iceberg/pull/1107#pullrequestreview-454584860", "createdAt": "2020-07-24T00:55:03Z", "commit": {"oid": "fa03e7373f5f692b8699c6aa43e5e59c9641faa2"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQwMDo1NTowM1rOG2gRhg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQwMDo1NTowM1rOG2gRhg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTgwNTA2Mg==", "bodyText": "What do other storage handlers do? Could this be a short name, like \"iceberg\"?", "url": "https://github.com/apache/iceberg/pull/1107#discussion_r459805062", "createdAt": "2020-07-24T00:55:03Z", "author": {"login": "rdblue"}, "path": "mr/src/main/java/org/apache/iceberg/mr/hive/HiveIcebergStorageHandler.java", "diffHunk": "@@ -0,0 +1,117 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.mr.hive;\n+\n+import java.util.Map;\n+import org.apache.hadoop.conf.Configuration;\n+import org.apache.hadoop.hive.metastore.HiveMetaHook;\n+import org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat;\n+import org.apache.hadoop.hive.ql.metadata.HiveException;\n+import org.apache.hadoop.hive.ql.metadata.HiveStorageHandler;\n+import org.apache.hadoop.hive.ql.metadata.HiveStoragePredicateHandler;\n+import org.apache.hadoop.hive.ql.plan.ExprNodeDesc;\n+import org.apache.hadoop.hive.ql.plan.ExprNodeGenericFuncDesc;\n+import org.apache.hadoop.hive.ql.plan.TableDesc;\n+import org.apache.hadoop.hive.ql.security.authorization.HiveAuthorizationProvider;\n+import org.apache.hadoop.hive.serde2.AbstractSerDe;\n+import org.apache.hadoop.hive.serde2.Deserializer;\n+import org.apache.hadoop.mapred.InputFormat;\n+import org.apache.hadoop.mapred.JobConf;\n+import org.apache.hadoop.mapred.OutputFormat;\n+import org.apache.iceberg.mr.mapred.IcebergSerDe;\n+\n+public class HiveIcebergStorageHandler implements HiveStoragePredicateHandler, HiveStorageHandler {\n+\n+  private Configuration conf;\n+\n+  @Override\n+  public Class<? extends InputFormat> getInputFormatClass() {\n+    return HiveIcebergInputFormat.class;\n+  }\n+\n+  @Override\n+  public Class<? extends OutputFormat> getOutputFormatClass() {\n+    return HiveIgnoreKeyTextOutputFormat.class;\n+  }\n+\n+  @Override\n+  public Class<? extends AbstractSerDe> getSerDeClass() {\n+    return IcebergSerDe.class;\n+  }\n+\n+  @Override\n+  public HiveMetaHook getMetaHook() {\n+    return null;\n+  }\n+\n+  @Override\n+  public HiveAuthorizationProvider getAuthorizationProvider() throws HiveException {\n+    return null;\n+  }\n+\n+  @Override\n+  public void configureInputJobProperties(TableDesc tableDesc, Map<String, String> map) {\n+\n+  }\n+\n+  @Override\n+  public void configureOutputJobProperties(TableDesc tableDesc, Map<String, String> map) {\n+\n+  }\n+\n+  @Override\n+  public void configureTableJobProperties(TableDesc tableDesc, Map<String, String> map) {\n+\n+  }\n+\n+  @Override\n+  public void configureJobConf(TableDesc tableDesc, JobConf jobConf) {\n+\n+  }\n+\n+  @Override\n+  public Configuration getConf() {\n+    return conf;\n+  }\n+\n+  @Override\n+  public void setConf(Configuration conf) {\n+    this.conf = conf;\n+  }\n+\n+  @Override\n+  public String toString() {\n+    return this.getClass().getName();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fa03e7373f5f692b8699c6aa43e5e59c9641faa2"}, "originalPosition": 101}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4514, "cost": 1, "resetAt": "2021-10-29T19:57:52Z"}}}