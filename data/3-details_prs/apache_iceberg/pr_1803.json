{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI1MDQ2OTEx", "number": 1803, "title": "Add NaN value count to content file", "bodyText": "counterpart of #1747\nwill only add the new count in V2 table\nalso added some tests for stats handling in manifest reader", "createdAt": "2020-11-21T03:06:48Z", "url": "https://github.com/apache/iceberg/pull/1803", "merged": true, "mergeCommit": {"oid": "b1296bcbe8e050d4bc28e3d41feb2f8868c8f0bf"}, "closed": true, "closedAt": "2020-11-25T01:06:17Z", "author": {"login": "yyanyy"}, "timelineItems": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdejIHHAFqTUzNTg3ODAyOA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdfyemjABqjQwMzUyNjI5Mzc=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM1ODc4MDI4", "url": "https://github.com/apache/iceberg/pull/1803#pullrequestreview-535878028", "createdAt": "2020-11-21T03:10:30Z", "commit": {"oid": "d19cc51a5a2082777b9283208c4d030e9bcae5c8"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMVQwMzoxMDozMFrOH3mSyA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMVQwMzoxMDozMFrOH3mSyA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODA2MTEyOA==", "bodyText": "If I change this record_count to something else it will result in NPE due to InclusiveMetrisEvaluator.eval  needing record count, however STATS_COLUMNS in manifest reader doesn't have it. I know the reader normally will only be used internally so we don't expect to run into this often, but wonder if we want to ensure record_count is always added when populating stats.", "url": "https://github.com/apache/iceberg/pull/1803#discussion_r528061128", "createdAt": "2020-11-21T03:10:30Z", "author": {"login": "yyanyy"}, "path": "core/src/test/java/org/apache/iceberg/TestManifestReaderStats.java", "diffHunk": "@@ -0,0 +1,172 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg;\n+\n+import java.io.IOException;\n+import java.nio.ByteBuffer;\n+import java.util.Map;\n+import org.apache.iceberg.expressions.Expressions;\n+import org.apache.iceberg.io.CloseableIterable;\n+import org.apache.iceberg.relocated.com.google.common.collect.ImmutableMap;\n+import org.apache.iceberg.relocated.com.google.common.collect.ImmutableSet;\n+import org.apache.iceberg.types.Conversions;\n+import org.apache.iceberg.types.Types;\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n+\n+@RunWith(Parameterized.class)\n+public class TestManifestReaderStats extends TableTestBase {\n+  @Parameterized.Parameters(name = \"formatVersion = {0}\")\n+  public static Object[] parameters() {\n+    return new Object[] { 1, 2 };\n+  }\n+\n+  public TestManifestReaderStats(int formatVersion) {\n+    super(formatVersion);\n+  }\n+\n+  private static final Map<Integer, Long> VALUE_COUNT = ImmutableMap.of(3, 3L);\n+  private static final Map<Integer, Long> NULL_VALUE_COUNTS = ImmutableMap.of(3, 0L);\n+  private static final Map<Integer, Long> NAN_VALUE_COUNTS = ImmutableMap.of(3, 1L);\n+  private static final Map<Integer, ByteBuffer> LOWER_BOUNDS =\n+      ImmutableMap.of(3, Conversions.toByteBuffer(Types.IntegerType.get(), 2));\n+  private static final Map<Integer, ByteBuffer> UPPER_BOUNDS =\n+      ImmutableMap.of(3, Conversions.toByteBuffer(Types.IntegerType.get(), 4));\n+\n+  private static final Metrics METRICS = new Metrics(3L, null,\n+      VALUE_COUNT, NULL_VALUE_COUNTS, NAN_VALUE_COUNTS, LOWER_BOUNDS, UPPER_BOUNDS);\n+\n+  private static final DataFile FILE = DataFiles.builder(SPEC)\n+      .withPath(\"/path/to/data-a.parquet\")\n+      .withFileSizeInBytes(10)\n+      .withPartitionPath(\"data_bucket=0\") // easy way to set partition data for now\n+      .withRecordCount(3)\n+      .withMetrics(METRICS)\n+      .build();\n+\n+  @Test\n+  public void testReadIncludesFullStats() throws IOException {\n+    ManifestFile manifest = writeManifest(1000L, FILE);\n+    try (ManifestReader<DataFile> reader = ManifestFiles.read(manifest, FILE_IO)) {\n+      CloseableIterable<ManifestEntry<DataFile>> entries = reader.entries();\n+      ManifestEntry<DataFile> entry = entries.iterator().next();\n+      assertFullStats(entry.file());\n+    }\n+  }\n+\n+  @Test\n+  public void testReadWithFilterIncludesFullStats() throws IOException {\n+    ManifestFile manifest = writeManifest(1000L, FILE);\n+    try (ManifestReader<DataFile> reader = ManifestFiles.read(manifest, FILE_IO)\n+        .filterRows(Expressions.equal(\"id\", 3))) {\n+      CloseableIterable<ManifestEntry<DataFile>> entries = reader.entries();\n+      ManifestEntry<DataFile> entry = entries.iterator().next();\n+      assertFullStats(entry.file());\n+    }\n+  }\n+\n+  @Test\n+  public void testReadEntriesWithFilterAndSelectIncludesFullStats() throws IOException {\n+    ManifestFile manifest = writeManifest(1000L, FILE);\n+    try (ManifestReader<DataFile> reader = ManifestFiles.read(manifest, FILE_IO)\n+        .select(ImmutableSet.of(\"record_count\"))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d19cc51a5a2082777b9283208c4d030e9bcae5c8"}, "originalPosition": 91}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM2MTM3ODc0", "url": "https://github.com/apache/iceberg/pull/1803#pullrequestreview-536137874", "createdAt": "2020-11-23T00:59:26Z", "commit": {"oid": "d19cc51a5a2082777b9283208c4d030e9bcae5c8"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QwMDo1OToyNlrOH39BXA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QwMTowODo1N1rOH39GKA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODQzMzUwMA==", "bodyText": "nit: newline should start at the same place as last line", "url": "https://github.com/apache/iceberg/pull/1803#discussion_r528433500", "createdAt": "2020-11-23T00:59:26Z", "author": {"login": "jackye1995"}, "path": "api/src/main/java/org/apache/iceberg/ContentFile.java", "diffHunk": "@@ -132,7 +137,8 @@\n    * Copies this file without file stats. Manifest readers can reuse file instances; use\n    * this method to copy data without stats when collecting files.\n    *\n-   * @return a copy of this data file, without lower bounds, upper bounds, value counts, or null value counts\n+   * @return a copy of this data file, without lower bounds, upper bounds, value counts,\n+   * null value counts, or nan value counts", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d19cc51a5a2082777b9283208c4d030e9bcae5c8"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODQzMzgyNw==", "bodyText": "nit: can we keep the existing lines the same?", "url": "https://github.com/apache/iceberg/pull/1803#discussion_r528433827", "createdAt": "2020-11-23T01:01:42Z", "author": {"login": "jackye1995"}, "path": "core/src/main/java/org/apache/iceberg/BaseFile.java", "diffHunk": "@@ -116,8 +117,8 @@ public PartitionData copy() {\n   }\n \n   BaseFile(int specId, FileContent content, String filePath, FileFormat format,\n-           PartitionData partition, long fileSizeInBytes, long recordCount,\n-           Map<Integer, Long> columnSizes, Map<Integer, Long> valueCounts, Map<Integer, Long> nullValueCounts,\n+           PartitionData partition, long fileSizeInBytes, long recordCount, Map<Integer, Long> columnSizes,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d19cc51a5a2082777b9283208c4d030e9bcae5c8"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODQzNDI5OQ==", "bodyText": "what is this change for?", "url": "https://github.com/apache/iceberg/pull/1803#discussion_r528434299", "createdAt": "2020-11-23T01:05:11Z", "author": {"login": "jackye1995"}, "path": "core/src/main/java/org/apache/iceberg/V1Metadata.java", "diffHunk": "@@ -356,7 +356,7 @@ public Object get(int pos) {\n \n     @Override\n     public void put(int i, Object v) {\n-      throw new UnsupportedOperationException(\"Cannot read into IndexedDataFile\");\n+      throw new UnsupportedOperationException(\"Cannot write into IndexedDataFile\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d19cc51a5a2082777b9283208c4d030e9bcae5c8"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODQzNDcyOA==", "bodyText": "why are we modifying this line instead of adding a new line?", "url": "https://github.com/apache/iceberg/pull/1803#discussion_r528434728", "createdAt": "2020-11-23T01:08:57Z", "author": {"login": "jackye1995"}, "path": "spark/src/test/java/org/apache/iceberg/TestDataFileSerialization.java", "diffHunk": "@@ -68,14 +69,16 @@\n \n   private static final Map<Integer, Long> VALUE_COUNTS = Maps.newHashMap();\n   private static final Map<Integer, Long> NULL_VALUE_COUNTS = Maps.newHashMap();\n+  private static final Map<Integer, Long> NAN_VALUE_COUNTS = Maps.newHashMap();\n   private static final Map<Integer, ByteBuffer> LOWER_BOUNDS = Maps.newHashMap();\n   private static final Map<Integer, ByteBuffer> UPPER_BOUNDS = Maps.newHashMap();\n \n   static {\n     VALUE_COUNTS.put(1, 5L);\n     VALUE_COUNTS.put(2, 3L);\n+    VALUE_COUNTS.put(4, 2L);\n     NULL_VALUE_COUNTS.put(1, 0L);\n-    NULL_VALUE_COUNTS.put(2, 2L);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d19cc51a5a2082777b9283208c4d030e9bcae5c8"}, "originalPosition": 23}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM2OTU1NTY2", "url": "https://github.com/apache/iceberg/pull/1803#pullrequestreview-536955566", "createdAt": "2020-11-24T00:45:01Z", "commit": {"oid": "c3298b41d9cd9d94701c7952d567091649d43764"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQwMDo0NTowMVrOH4lDiA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQwMDo0NTowMVrOH4lDiA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTA4OTQxNg==", "bodyText": "Could you move this up by NULL_VALUE_COUNTS?", "url": "https://github.com/apache/iceberg/pull/1803#discussion_r529089416", "createdAt": "2020-11-24T00:45:01Z", "author": {"login": "rdblue"}, "path": "api/src/main/java/org/apache/iceberg/DataFile.java", "diffHunk": "@@ -59,10 +60,13 @@\n       \"Splittable offsets\");\n   Types.NestedField EQUALITY_IDS = optional(135, \"equality_ids\", ListType.ofRequired(136, IntegerType.get()),\n       \"Equality comparison field IDs\");\n+  Types.NestedField NAN_VALUE_COUNTS = optional(137, \"nan_value_counts\", MapType.ofRequired(138, 139,\n+      IntegerType.get(), LongType.get()), \"Map of column id to number of NaN values in the column\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c3298b41d9cd9d94701c7952d567091649d43764"}, "originalPosition": 13}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM2OTU1Nzgz", "url": "https://github.com/apache/iceberg/pull/1803#pullrequestreview-536955783", "createdAt": "2020-11-24T00:45:36Z", "commit": {"oid": "c3298b41d9cd9d94701c7952d567091649d43764"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQwMDo0NTozN1rOH4lEbA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQwMDo0NTozN1rOH4lEbA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTA4OTY0NA==", "bodyText": "I think we should place this field just after null counts.", "url": "https://github.com/apache/iceberg/pull/1803#discussion_r529089644", "createdAt": "2020-11-24T00:45:37Z", "author": {"login": "rdblue"}, "path": "api/src/main/java/org/apache/iceberg/DataFile.java", "diffHunk": "@@ -80,7 +84,8 @@ static StructType getType(StructType partitionType) {\n         UPPER_BOUNDS,\n         KEY_METADATA,\n         SPLIT_OFFSETS,\n-        EQUALITY_IDS\n+        EQUALITY_IDS,\n+        NAN_VALUE_COUNTS", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c3298b41d9cd9d94701c7952d567091649d43764"}, "originalPosition": 29}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM2OTU2MDI4", "url": "https://github.com/apache/iceberg/pull/1803#pullrequestreview-536956028", "createdAt": "2020-11-24T00:46:14Z", "commit": {"oid": "c3298b41d9cd9d94701c7952d567091649d43764"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQwMDo0NjoxNFrOH4lFQw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQwMDo0NjoxNFrOH4lFQw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTA4OTg1OQ==", "bodyText": "I think all of the implementations will provide this method, so there should be no need for the default, right?", "url": "https://github.com/apache/iceberg/pull/1803#discussion_r529089859", "createdAt": "2020-11-24T00:46:14Z", "author": {"login": "rdblue"}, "path": "api/src/main/java/org/apache/iceberg/DataFile.java", "diffHunk": "@@ -96,4 +101,9 @@ default FileContent content() {\n   default List<Integer> equalityFieldIds() {\n     return null;\n   }\n+\n+  @Override\n+  default Map<Integer, Long> nanValueCounts() {\n+    return null;\n+  }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c3298b41d9cd9d94701c7952d567091649d43764"}, "originalPosition": 41}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM2OTU3MTE2", "url": "https://github.com/apache/iceberg/pull/1803#pullrequestreview-536957116", "createdAt": "2020-11-24T00:49:12Z", "commit": {"oid": "c3298b41d9cd9d94701c7952d567091649d43764"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQwMDo0OToxMlrOH4lJJQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQwMDo0OToxMlrOH4lJJQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTA5MDg1Mw==", "bodyText": "Similar to above, I think we should add NaN value counts just below null value counts. This will affect the ordinals in get so you'll have to update them.", "url": "https://github.com/apache/iceberg/pull/1803#discussion_r529090853", "createdAt": "2020-11-24T00:49:12Z", "author": {"login": "rdblue"}, "path": "core/src/main/java/org/apache/iceberg/V2Metadata.java", "diffHunk": "@@ -254,7 +254,8 @@ static Schema wrapFileSchema(Types.StructType fileSchema) {\n         DataFile.UPPER_BOUNDS,\n         DataFile.KEY_METADATA,\n         DataFile.SPLIT_OFFSETS,\n-        DataFile.EQUALITY_IDS\n+        DataFile.EQUALITY_IDS,\n+        DataFile.NAN_VALUE_COUNTS", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c3298b41d9cd9d94701c7952d567091649d43764"}, "originalPosition": 6}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM2OTU4MTM0", "url": "https://github.com/apache/iceberg/pull/1803#pullrequestreview-536958134", "createdAt": "2020-11-24T00:51:54Z", "commit": {"oid": "c3298b41d9cd9d94701c7952d567091649d43764"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQwMDo1MTo1NVrOH4lMuA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQwMDo1MTo1NVrOH4lMuA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTA5MTc2OA==", "bodyText": "This doesn't add NaN counts to v1 metadata, but there's no reason why we can't. Adding a new column to v1 metadata files is forward compatible and is allowed, so we can go ahead and add it here. That way, even v1 benefits.\nThe reason why this is a v2 feature is that we are creating additional requirements for writers: NaN must not be written as a lower or upper bound in Iceberg metadata. Writers that want to write NaN counts in v1 should be able to do so.", "url": "https://github.com/apache/iceberg/pull/1803#discussion_r529091768", "createdAt": "2020-11-24T00:51:55Z", "author": {"login": "rdblue"}, "path": "core/src/main/java/org/apache/iceberg/V1Metadata.java", "diffHunk": "@@ -356,7 +356,7 @@ public Object get(int pos) {\n \n     @Override\n     public void put(int i, Object v) {\n-      throw new UnsupportedOperationException(\"Cannot read into IndexedDataFile\");\n+      throw new UnsupportedOperationException(\"Cannot write into IndexedDataFile\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c3298b41d9cd9d94701c7952d567091649d43764"}, "originalPosition": 5}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM2OTU5MTc4", "url": "https://github.com/apache/iceberg/pull/1803#pullrequestreview-536959178", "createdAt": "2020-11-24T00:54:41Z", "commit": {"oid": "c3298b41d9cd9d94701c7952d567091649d43764"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQwMDo1NDo0MVrOH4lQTg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQwMDo1NDo0MVrOH4lQTg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTA5MjY4Ng==", "bodyText": "Typo: // NaN value counts", "url": "https://github.com/apache/iceberg/pull/1803#discussion_r529092686", "createdAt": "2020-11-24T00:54:41Z", "author": {"login": "rdblue"}, "path": "core/src/test/java/org/apache/iceberg/TestManifestWriterVersions.java", "diffHunk": "@@ -60,9 +61,10 @@\n   private static final PartitionData PARTITION = DataFiles.data(SPEC, \"category=cheesy/timestamp_hour=10/id_bucket=3\");\n   private static final Metrics METRICS = new Metrics(\n       1587L,\n-      ImmutableMap.of(1, 15L, 2, 122L, 3, 4021L, 4, 9411L), // sizes\n-      ImmutableMap.of(1, 100L, 2, 100L, 3, 100L, 4, 100L),  // value counts\n-      ImmutableMap.of(1, 0L, 2, 0L, 3, 0L, 4, 0L),          // null value counts\n+      ImmutableMap.of(1, 15L, 2, 122L, 3, 4021L, 4, 9411L, 5, 15L), // sizes\n+      ImmutableMap.of(1, 100L, 2, 100L, 3, 100L, 4, 100L, 5, 100L),  // value counts\n+      ImmutableMap.of(1, 0L, 2, 0L, 3, 0L, 4, 0L, 5, 0L), // null value counts\n+      ImmutableMap.of(5, 10L), // null value counts", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c3298b41d9cd9d94701c7952d567091649d43764"}, "originalPosition": 20}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM2OTU5NDAz", "url": "https://github.com/apache/iceberg/pull/1803#pullrequestreview-536959403", "createdAt": "2020-11-24T00:55:14Z", "commit": {"oid": "c3298b41d9cd9d94701c7952d567091649d43764"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQwMDo1NToxNFrOH4lRCQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQwMDo1NToxNFrOH4lRCQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTA5Mjg3Mw==", "bodyText": "I think writing NaN counts in v1 will probably simplify the test updates here.", "url": "https://github.com/apache/iceberg/pull/1803#discussion_r529092873", "createdAt": "2020-11-24T00:55:14Z", "author": {"login": "rdblue"}, "path": "core/src/test/java/org/apache/iceberg/TestManifestWriterVersions.java", "diffHunk": "@@ -203,6 +208,11 @@ void checkDataFile(ContentFile<?> dataFile, FileContent content) {\n     } else {\n       Assert.assertNull(dataFile.equalityFieldIds());\n     }\n+    if (hasNaNCount) {\n+      Assert.assertEquals(\"NaN\", METRICS.nanValueCounts(), dataFile.nanValueCounts());\n+    } else {\n+      Assert.assertNull(\"NaN\", dataFile.nanValueCounts());\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c3298b41d9cd9d94701c7952d567091649d43764"}, "originalPosition": 130}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM2OTU5ODU5", "url": "https://github.com/apache/iceberg/pull/1803#pullrequestreview-536959859", "createdAt": "2020-11-24T00:56:35Z", "commit": {"oid": "c3298b41d9cd9d94701c7952d567091649d43764"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQwMDo1NjozNVrOH4lSqw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQwMDo1NjozNVrOH4lSqw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTA5MzI5MQ==", "bodyText": "Why are NaN values getting into the lower and upper bounds?", "url": "https://github.com/apache/iceberg/pull/1803#discussion_r529093291", "createdAt": "2020-11-24T00:56:35Z", "author": {"login": "rdblue"}, "path": "core/src/test/java/org/apache/iceberg/TestMetrics.java", "diffHunk": "@@ -272,6 +273,8 @@ public void testMetricsForNestedStructFields() throws IOException {\n     assertCounts(6, 1L, 0L, metrics);\n     assertBounds(6, BinaryType.get(),\n         ByteBuffer.wrap(\"A\".getBytes()), ByteBuffer.wrap(\"A\".getBytes()), metrics);\n+    assertCounts(7, 1L, 0L, 1L, metrics);\n+    assertBounds(7, DoubleType.get(), Double.NaN, Double.NaN, metrics);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c3298b41d9cd9d94701c7952d567091649d43764"}, "originalPosition": 15}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3f0d3aee242b91aaf27faf3341430920051768fe", "author": {"user": {"login": "yyanyy", "name": null}}, "url": "https://github.com/apache/iceberg/commit/3f0d3aee242b91aaf27faf3341430920051768fe", "committedDate": "2020-11-24T23:03:12Z", "message": "Add NaN value count to content file"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "505a67112d8f359c00ae61975b4c710930c2738e", "author": {"user": {"login": "yyanyy", "name": null}}, "url": "https://github.com/apache/iceberg/commit/505a67112d8f359c00ae61975b4c710930c2738e", "committedDate": "2020-11-24T23:03:13Z", "message": "minor update"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c3298b41d9cd9d94701c7952d567091649d43764", "author": {"user": {"login": "yyanyy", "name": null}}, "url": "https://github.com/apache/iceberg/commit/c3298b41d9cd9d94701c7952d567091649d43764", "committedDate": "2020-11-23T19:33:51Z", "message": "minor update"}, "afterCommit": {"oid": "fe48ba74d9a73cd91ae76fb5ab9d2b183d9a663e", "author": {"user": {"login": "yyanyy", "name": null}}, "url": "https://github.com/apache/iceberg/commit/fe48ba74d9a73cd91ae76fb5ab9d2b183d9a663e", "committedDate": "2020-11-24T23:13:39Z", "message": "update attributes order, support nan in v1 metadata"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4fc80679c7517184250e62510e1a04284ce5b80c", "author": {"user": {"login": "yyanyy", "name": null}}, "url": "https://github.com/apache/iceberg/commit/4fc80679c7517184250e62510e1a04284ce5b80c", "committedDate": "2020-11-24T23:37:27Z", "message": "update attributes order, support nan in v1 metadata"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "fe48ba74d9a73cd91ae76fb5ab9d2b183d9a663e", "author": {"user": {"login": "yyanyy", "name": null}}, "url": "https://github.com/apache/iceberg/commit/fe48ba74d9a73cd91ae76fb5ab9d2b183d9a663e", "committedDate": "2020-11-24T23:13:39Z", "message": "update attributes order, support nan in v1 metadata"}, "afterCommit": {"oid": "4fc80679c7517184250e62510e1a04284ce5b80c", "author": {"user": {"login": "yyanyy", "name": null}}, "url": "https://github.com/apache/iceberg/commit/4fc80679c7517184250e62510e1a04284ce5b80c", "committedDate": "2020-11-24T23:37:27Z", "message": "update attributes order, support nan in v1 metadata"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3391, "cost": 1, "resetAt": "2021-10-29T19:57:52Z"}}}