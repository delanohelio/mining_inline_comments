{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY0ODAzODQ1", "number": 1307, "title": "Fix struct comparison and add struct and partition set implementations", "bodyText": "StructLikeWrapper is used to provide equals and hashCode methods that are consistent across all StructLike implementations. But, the implementation did not handle different implementations of CharSequence correctly. This fixes the implementations by adding a Comparator implementation for structs, and adding classes to implement Java's hashCode. These implementations depend on the Iceberg type of an object.\nThe type of a struct is not always passed to StructLikeWrapper, so this includes a temporary work-around to use the existing implementation for code paths that do not currently have a struct's type.\nThis also adds two helper classes, StructLikeSet and PartitionSet. The struct set hides StructLikeWrapper from callers and is based on CharSequenceSet. PartitionSet is a set implementation for partitions, which are identified by a partition spec id and a partition tuple. PartitionSet is needed because there are some cases where a partition tuple for different specs is identical. Updating existing classes to use these will be done in a follow-up PR.", "createdAt": "2020-08-07T20:31:57Z", "url": "https://github.com/apache/iceberg/pull/1307", "merged": true, "mergeCommit": {"oid": "9e616a1bf28ecc7f3d05fa259d6509d892d6115a"}, "closed": true, "closedAt": "2020-08-10T22:40:12Z", "author": {"login": "rdblue"}, "timelineItems": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc8qZGZAH2gAyNDY0ODAzODQ1OmI3N2Q2NzJmNDE3MzUwZDFmZDhiNjUxZGJmNTExMmQxNDMyNDcwZTk=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc9prLeAFqTQ2NDYyMTcyOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "b77d672f417350d1fd8b651dbf5112d1432470e9", "author": {"user": {"login": "rdblue", "name": "Ryan Blue"}}, "url": "https://github.com/apache/iceberg/commit/b77d672f417350d1fd8b651dbf5112d1432470e9", "committedDate": "2020-08-07T20:24:58Z", "message": "Fix struct comparison and add struct and partition set implementations."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYzNTk0NzUz", "url": "https://github.com/apache/iceberg/pull/1307#pullrequestreview-463594753", "createdAt": "2020-08-07T20:33:31Z", "commit": {"oid": "b77d672f417350d1fd8b651dbf5112d1432470e9"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QyMDozMzozMlrOG9nDNA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QyMDozMzozMlrOG9nDNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzI1NjExNg==", "bodyText": "This was renamed to avoid a conflict with the new PartitionSet class, and updated to use StructLikeWrapper with correct equals/hashCode implementations.", "url": "https://github.com/apache/iceberg/pull/1307#discussion_r467256116", "createdAt": "2020-08-07T20:33:32Z", "author": {"login": "rdblue"}, "path": "core/src/main/java/org/apache/iceberg/PartitionsTable.java", "diffHunk": "@@ -95,15 +95,21 @@ private DataTask task(TableScan scan) {\n     }\n   }\n \n-  static class PartitionSet {\n+  static class PartitionMap {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b77d672f417350d1fd8b651dbf5112d1432470e9"}, "originalPosition": 14}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5b9f0479d2891bdee5ba9535c49a0ef1fdb017a3", "author": {"user": {"login": "rdblue", "name": "Ryan Blue"}}, "url": "https://github.com/apache/iceberg/commit/5b9f0479d2891bdee5ba9535c49a0ef1fdb017a3", "committedDate": "2020-08-07T20:59:11Z", "message": "Fix checkstyle."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY0NDE0NjY5", "url": "https://github.com/apache/iceberg/pull/1307#pullrequestreview-464414669", "createdAt": "2020-08-10T17:04:46Z", "commit": {"oid": "5b9f0479d2891bdee5ba9535c49a0ef1fdb017a3"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQxNzowNDo0NlrOG-Xi_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQxNzoxMjo0OVrOG-Xz4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODA1MDY4Nw==", "bodyText": "Is unknown-partition some sort of a constant?", "url": "https://github.com/apache/iceberg/pull/1307#discussion_r468050687", "createdAt": "2020-08-10T17:04:46Z", "author": {"login": "aokolnychyi"}, "path": "api/src/main/java/org/apache/iceberg/types/JavaHashes.java", "diffHunk": "@@ -0,0 +1,110 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.types;\n+\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.function.IntFunction;\n+import org.apache.iceberg.StructLike;\n+\n+public class JavaHashes {\n+  private JavaHashes() {\n+  }\n+\n+  public static int hashCode(CharSequence str) {\n+    int result = 177;\n+    for (int i = 0; i < str.length(); i += 1) {\n+      char ch = str.charAt(i);\n+      result = 31 * result + (int) ch;\n+    }\n+    return result;\n+  }\n+\n+  static JavaHash<CharSequence> strings() {\n+    return CharSequenceHash.INSTANCE;\n+  }\n+\n+  static JavaHash<StructLike> struct(Types.StructType struct) {\n+    return new StructLikeHash(struct);\n+  }\n+\n+  static JavaHash<List<?>> list(Types.ListType list) {\n+    return new ListHash(list);\n+  }\n+\n+  private static class CharSequenceHash implements JavaHash<CharSequence> {\n+    private static final CharSequenceHash INSTANCE = new CharSequenceHash();\n+\n+    private CharSequenceHash() {\n+    }\n+\n+    @Override\n+    public int hash(CharSequence str) {\n+      if (str == null) {\n+        return 0;\n+      }\n+\n+      return JavaHashes.hashCode(str);\n+    }\n+  }\n+\n+  private static class StructLikeHash implements JavaHash<StructLike> {\n+    private final JavaHash<Object>[] hashes;\n+\n+    private StructLikeHash(Types.StructType struct) {\n+      this.hashes = struct.fields().stream()\n+          .map(field ->\n+            \"unknown-partition\".equals(field.doc()) ?", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b9f0479d2891bdee5ba9535c49a0ef1fdb017a3"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODA1MTIyNA==", "bodyText": "Will it be safe to use Objects::hashCode in that case or shall we fail?", "url": "https://github.com/apache/iceberg/pull/1307#discussion_r468051224", "createdAt": "2020-08-10T17:05:46Z", "author": {"login": "aokolnychyi"}, "path": "api/src/main/java/org/apache/iceberg/types/JavaHashes.java", "diffHunk": "@@ -0,0 +1,110 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.types;\n+\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.function.IntFunction;\n+import org.apache.iceberg.StructLike;\n+\n+public class JavaHashes {\n+  private JavaHashes() {\n+  }\n+\n+  public static int hashCode(CharSequence str) {\n+    int result = 177;\n+    for (int i = 0; i < str.length(); i += 1) {\n+      char ch = str.charAt(i);\n+      result = 31 * result + (int) ch;\n+    }\n+    return result;\n+  }\n+\n+  static JavaHash<CharSequence> strings() {\n+    return CharSequenceHash.INSTANCE;\n+  }\n+\n+  static JavaHash<StructLike> struct(Types.StructType struct) {\n+    return new StructLikeHash(struct);\n+  }\n+\n+  static JavaHash<List<?>> list(Types.ListType list) {\n+    return new ListHash(list);\n+  }\n+\n+  private static class CharSequenceHash implements JavaHash<CharSequence> {\n+    private static final CharSequenceHash INSTANCE = new CharSequenceHash();\n+\n+    private CharSequenceHash() {\n+    }\n+\n+    @Override\n+    public int hash(CharSequence str) {\n+      if (str == null) {\n+        return 0;\n+      }\n+\n+      return JavaHashes.hashCode(str);\n+    }\n+  }\n+\n+  private static class StructLikeHash implements JavaHash<StructLike> {\n+    private final JavaHash<Object>[] hashes;\n+\n+    private StructLikeHash(Types.StructType struct) {\n+      this.hashes = struct.fields().stream()\n+          .map(field ->\n+            \"unknown-partition\".equals(field.doc()) ?", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODA1MDY4Nw=="}, "originalCommit": {"oid": "5b9f0479d2891bdee5ba9535c49a0ef1fdb017a3"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODA1NTAxMA==", "bodyText": "Is this the work-around when we don't have a type? In which case does this happen?", "url": "https://github.com/apache/iceberg/pull/1307#discussion_r468055010", "createdAt": "2020-08-10T17:12:49Z", "author": {"login": "aokolnychyi"}, "path": "core/src/main/java/org/apache/iceberg/util/StructLikeWrapper.java", "diffHunk": "@@ -80,12 +108,20 @@ public boolean equals(Object other) {\n \n   @Override\n   public int hashCode() {\n-    int result = 97;\n-    int len = struct.size();\n-    result = 41 * result + len;\n-    for (int i = 0; i < len; i += 1) {\n-      result = 41 * result + Objects.hashCode(struct.get(i, Object.class));\n+    if (hashCode == null) {\n+      if (structHash != null) {\n+        this.hashCode = structHash.hash(struct);\n+      } else {\n+        int result = 97;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b9f0479d2891bdee5ba9535c49a0ef1fdb017a3"}, "originalPosition": 73}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5307628bad69a2b8642e666f77fb5e8245d99369", "author": {"user": {"login": "rdblue", "name": "Ryan Blue"}}, "url": "https://github.com/apache/iceberg/commit/5307628bad69a2b8642e666f77fb5e8245d99369", "committedDate": "2020-08-10T22:04:56Z", "message": "Remove work-around for unknown transforms."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY0NjIxNzI5", "url": "https://github.com/apache/iceberg/pull/1307#pullrequestreview-464621729", "createdAt": "2020-08-10T22:08:44Z", "commit": {"oid": "5b9f0479d2891bdee5ba9535c49a0ef1fdb017a3"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4402, "cost": 1, "resetAt": "2021-10-29T19:57:52Z"}}}