{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY0ODAzODQ1", "number": 1307, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QyMDozMzozMlrOEWWJUA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQxNzoxMjo0OVrOEW4n1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxODY2OTYwOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/apache/iceberg/PartitionsTable.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QyMDozMzozMlrOG9nDNA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QyMDozMzozMlrOG9nDNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzI1NjExNg==", "bodyText": "This was renamed to avoid a conflict with the new PartitionSet class, and updated to use StructLikeWrapper with correct equals/hashCode implementations.", "url": "https://github.com/apache/iceberg/pull/1307#discussion_r467256116", "createdAt": "2020-08-07T20:33:32Z", "author": {"login": "rdblue"}, "path": "core/src/main/java/org/apache/iceberg/PartitionsTable.java", "diffHunk": "@@ -95,15 +95,21 @@ private DataTask task(TableScan scan) {\n     }\n   }\n \n-  static class PartitionSet {\n+  static class PartitionMap {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b77d672f417350d1fd8b651dbf5112d1432470e9"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyNDI5MDc5OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/apache/iceberg/types/JavaHashes.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQxNzowNDo0NlrOG-Xi_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQyMjowNzowOVrOG-hcwg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODA1MDY4Nw==", "bodyText": "Is unknown-partition some sort of a constant?", "url": "https://github.com/apache/iceberg/pull/1307#discussion_r468050687", "createdAt": "2020-08-10T17:04:46Z", "author": {"login": "aokolnychyi"}, "path": "api/src/main/java/org/apache/iceberg/types/JavaHashes.java", "diffHunk": "@@ -0,0 +1,110 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.types;\n+\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.function.IntFunction;\n+import org.apache.iceberg.StructLike;\n+\n+public class JavaHashes {\n+  private JavaHashes() {\n+  }\n+\n+  public static int hashCode(CharSequence str) {\n+    int result = 177;\n+    for (int i = 0; i < str.length(); i += 1) {\n+      char ch = str.charAt(i);\n+      result = 31 * result + (int) ch;\n+    }\n+    return result;\n+  }\n+\n+  static JavaHash<CharSequence> strings() {\n+    return CharSequenceHash.INSTANCE;\n+  }\n+\n+  static JavaHash<StructLike> struct(Types.StructType struct) {\n+    return new StructLikeHash(struct);\n+  }\n+\n+  static JavaHash<List<?>> list(Types.ListType list) {\n+    return new ListHash(list);\n+  }\n+\n+  private static class CharSequenceHash implements JavaHash<CharSequence> {\n+    private static final CharSequenceHash INSTANCE = new CharSequenceHash();\n+\n+    private CharSequenceHash() {\n+    }\n+\n+    @Override\n+    public int hash(CharSequence str) {\n+      if (str == null) {\n+        return 0;\n+      }\n+\n+      return JavaHashes.hashCode(str);\n+    }\n+  }\n+\n+  private static class StructLikeHash implements JavaHash<StructLike> {\n+    private final JavaHash<Object>[] hashes;\n+\n+    private StructLikeHash(Types.StructType struct) {\n+      this.hashes = struct.fields().stream()\n+          .map(field ->\n+            \"unknown-partition\".equals(field.doc()) ?", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b9f0479d2891bdee5ba9535c49a0ef1fdb017a3"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODA1MTIyNA==", "bodyText": "Will it be safe to use Objects::hashCode in that case or shall we fail?", "url": "https://github.com/apache/iceberg/pull/1307#discussion_r468051224", "createdAt": "2020-08-10T17:05:46Z", "author": {"login": "aokolnychyi"}, "path": "api/src/main/java/org/apache/iceberg/types/JavaHashes.java", "diffHunk": "@@ -0,0 +1,110 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.types;\n+\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.function.IntFunction;\n+import org.apache.iceberg.StructLike;\n+\n+public class JavaHashes {\n+  private JavaHashes() {\n+  }\n+\n+  public static int hashCode(CharSequence str) {\n+    int result = 177;\n+    for (int i = 0; i < str.length(); i += 1) {\n+      char ch = str.charAt(i);\n+      result = 31 * result + (int) ch;\n+    }\n+    return result;\n+  }\n+\n+  static JavaHash<CharSequence> strings() {\n+    return CharSequenceHash.INSTANCE;\n+  }\n+\n+  static JavaHash<StructLike> struct(Types.StructType struct) {\n+    return new StructLikeHash(struct);\n+  }\n+\n+  static JavaHash<List<?>> list(Types.ListType list) {\n+    return new ListHash(list);\n+  }\n+\n+  private static class CharSequenceHash implements JavaHash<CharSequence> {\n+    private static final CharSequenceHash INSTANCE = new CharSequenceHash();\n+\n+    private CharSequenceHash() {\n+    }\n+\n+    @Override\n+    public int hash(CharSequence str) {\n+      if (str == null) {\n+        return 0;\n+      }\n+\n+      return JavaHashes.hashCode(str);\n+    }\n+  }\n+\n+  private static class StructLikeHash implements JavaHash<StructLike> {\n+    private final JavaHash<Object>[] hashes;\n+\n+    private StructLikeHash(Types.StructType struct) {\n+      this.hashes = struct.fields().stream()\n+          .map(field ->\n+            \"unknown-partition\".equals(field.doc()) ?", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODA1MDY4Nw=="}, "originalCommit": {"oid": "5b9f0479d2891bdee5ba9535c49a0ef1fdb017a3"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODIwMjY5NA==", "bodyText": "This is an odd case. Without this, all tests are passing except for the forward-compatibility test that validates Spark can read tables with unknown transforms. When we see an unknown transform, we don't know what type of results it produces so we can't create a hash function or comparator ahead of time like we try to do here.\nThe actual problem is that when we create a hash function, it expects a CharSequence becuase our assumed result type is the most generic: string. That causes hashing to fail with a ClassCastException. The work-around, which is ugly, is to use the partition field doc to signal when this happens so that the hash function can use Objects::hash that can hash any object using its hashCode method, instead of trying to use our CharSequence hash function.", "url": "https://github.com/apache/iceberg/pull/1307#discussion_r468202694", "createdAt": "2020-08-10T21:43:02Z", "author": {"login": "rdblue"}, "path": "api/src/main/java/org/apache/iceberg/types/JavaHashes.java", "diffHunk": "@@ -0,0 +1,110 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.types;\n+\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.function.IntFunction;\n+import org.apache.iceberg.StructLike;\n+\n+public class JavaHashes {\n+  private JavaHashes() {\n+  }\n+\n+  public static int hashCode(CharSequence str) {\n+    int result = 177;\n+    for (int i = 0; i < str.length(); i += 1) {\n+      char ch = str.charAt(i);\n+      result = 31 * result + (int) ch;\n+    }\n+    return result;\n+  }\n+\n+  static JavaHash<CharSequence> strings() {\n+    return CharSequenceHash.INSTANCE;\n+  }\n+\n+  static JavaHash<StructLike> struct(Types.StructType struct) {\n+    return new StructLikeHash(struct);\n+  }\n+\n+  static JavaHash<List<?>> list(Types.ListType list) {\n+    return new ListHash(list);\n+  }\n+\n+  private static class CharSequenceHash implements JavaHash<CharSequence> {\n+    private static final CharSequenceHash INSTANCE = new CharSequenceHash();\n+\n+    private CharSequenceHash() {\n+    }\n+\n+    @Override\n+    public int hash(CharSequence str) {\n+      if (str == null) {\n+        return 0;\n+      }\n+\n+      return JavaHashes.hashCode(str);\n+    }\n+  }\n+\n+  private static class StructLikeHash implements JavaHash<StructLike> {\n+    private final JavaHash<Object>[] hashes;\n+\n+    private StructLikeHash(Types.StructType struct) {\n+      this.hashes = struct.fields().stream()\n+          .map(field ->\n+            \"unknown-partition\".equals(field.doc()) ?", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODA1MDY4Nw=="}, "originalCommit": {"oid": "5b9f0479d2891bdee5ba9535c49a0ef1fdb017a3"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODIxMjkzMA==", "bodyText": "I had an idea to fix this by making the hash function for strings check the value class. That's much cleaner. The method already has a null check so using value instanceof CharSequence isn't much more expensive. And, we should get a more consistent hash code by hashing value.toString than delegating to Object#hashCode.", "url": "https://github.com/apache/iceberg/pull/1307#discussion_r468212930", "createdAt": "2020-08-10T22:07:09Z", "author": {"login": "rdblue"}, "path": "api/src/main/java/org/apache/iceberg/types/JavaHashes.java", "diffHunk": "@@ -0,0 +1,110 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.types;\n+\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.function.IntFunction;\n+import org.apache.iceberg.StructLike;\n+\n+public class JavaHashes {\n+  private JavaHashes() {\n+  }\n+\n+  public static int hashCode(CharSequence str) {\n+    int result = 177;\n+    for (int i = 0; i < str.length(); i += 1) {\n+      char ch = str.charAt(i);\n+      result = 31 * result + (int) ch;\n+    }\n+    return result;\n+  }\n+\n+  static JavaHash<CharSequence> strings() {\n+    return CharSequenceHash.INSTANCE;\n+  }\n+\n+  static JavaHash<StructLike> struct(Types.StructType struct) {\n+    return new StructLikeHash(struct);\n+  }\n+\n+  static JavaHash<List<?>> list(Types.ListType list) {\n+    return new ListHash(list);\n+  }\n+\n+  private static class CharSequenceHash implements JavaHash<CharSequence> {\n+    private static final CharSequenceHash INSTANCE = new CharSequenceHash();\n+\n+    private CharSequenceHash() {\n+    }\n+\n+    @Override\n+    public int hash(CharSequence str) {\n+      if (str == null) {\n+        return 0;\n+      }\n+\n+      return JavaHashes.hashCode(str);\n+    }\n+  }\n+\n+  private static class StructLikeHash implements JavaHash<StructLike> {\n+    private final JavaHash<Object>[] hashes;\n+\n+    private StructLikeHash(Types.StructType struct) {\n+      this.hashes = struct.fields().stream()\n+          .map(field ->\n+            \"unknown-partition\".equals(field.doc()) ?", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODA1MDY4Nw=="}, "originalCommit": {"oid": "5b9f0479d2891bdee5ba9535c49a0ef1fdb017a3"}, "originalPosition": 74}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyNDMxODI4OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/apache/iceberg/util/StructLikeWrapper.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQxNzoxMjo0OVrOG-Xz4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQyMTozOTowMVrOG-guVw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODA1NTAxMA==", "bodyText": "Is this the work-around when we don't have a type? In which case does this happen?", "url": "https://github.com/apache/iceberg/pull/1307#discussion_r468055010", "createdAt": "2020-08-10T17:12:49Z", "author": {"login": "aokolnychyi"}, "path": "core/src/main/java/org/apache/iceberg/util/StructLikeWrapper.java", "diffHunk": "@@ -80,12 +108,20 @@ public boolean equals(Object other) {\n \n   @Override\n   public int hashCode() {\n-    int result = 97;\n-    int len = struct.size();\n-    result = 41 * result + len;\n-    for (int i = 0; i < len; i += 1) {\n-      result = 41 * result + Objects.hashCode(struct.get(i, Object.class));\n+    if (hashCode == null) {\n+      if (structHash != null) {\n+        this.hashCode = structHash.hash(struct);\n+      } else {\n+        int result = 97;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b9f0479d2891bdee5ba9535c49a0ef1fdb017a3"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODIwMTA0Nw==", "bodyText": "Yes. This is a work-around for when there is no type, so that the current code paths don't fail. The follow-up commit removes this after adding specId to DataFile.", "url": "https://github.com/apache/iceberg/pull/1307#discussion_r468201047", "createdAt": "2020-08-10T21:39:01Z", "author": {"login": "rdblue"}, "path": "core/src/main/java/org/apache/iceberg/util/StructLikeWrapper.java", "diffHunk": "@@ -80,12 +108,20 @@ public boolean equals(Object other) {\n \n   @Override\n   public int hashCode() {\n-    int result = 97;\n-    int len = struct.size();\n-    result = 41 * result + len;\n-    for (int i = 0; i < len; i += 1) {\n-      result = 41 * result + Objects.hashCode(struct.get(i, Object.class));\n+    if (hashCode == null) {\n+      if (structHash != null) {\n+        this.hashCode = structHash.hash(struct);\n+      } else {\n+        int result = 97;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODA1NTAxMA=="}, "originalCommit": {"oid": "5b9f0479d2891bdee5ba9535c49a0ef1fdb017a3"}, "originalPosition": 73}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3836, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}