{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk1MTc5OTY4", "number": 1530, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQxODo1ODo1NFrOEpKdDQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQxODo1ODo1NFrOEpKdDQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExNTk4MzQ5OnYy", "diffSide": "RIGHT", "path": "core/src/test/java/org/apache/iceberg/hadoop/TestHadoopCatalog.java", "isResolved": false, "comments": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQxODo1ODo1NFrOHarOSQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxNzowMTo1OVrOHbTaOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzczMzE5Mw==", "bodyText": "Would it make sense to test that two tables with different properties but the same table identifier are not equal?", "url": "https://github.com/apache/iceberg/pull/1530#discussion_r497733193", "createdAt": "2020-09-30T18:58:54Z", "author": {"login": "holdenk"}, "path": "core/src/test/java/org/apache/iceberg/hadoop/TestHadoopCatalog.java", "diffHunk": "@@ -525,6 +525,34 @@ public void testVersionHintFileMissingMetadata() throws Exception {\n         () -> TABLES.load(tableLocation));\n   }\n \n+  @Test\n+  public void testTableEquality() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6bd2628af7e06ecdb9ac56c8fd563df30ca8df79"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzc2OTM4MQ==", "bodyText": "The main motivation to implement equals and hashCode was to refresh the cache in Spark. Therefore, I did not consider anything except the identifier so that if a table property was modified, we would still invalidate the cache as both entries point to the same table.\nAfter thinking about this more, modifying equals and hashCode in BaseTable may not be the best idea. Instead, we can simply compare icebergTable.toString() in SparkTable and limit this equality on table identifiers only to Spark.", "url": "https://github.com/apache/iceberg/pull/1530#discussion_r497769381", "createdAt": "2020-09-30T20:06:34Z", "author": {"login": "aokolnychyi"}, "path": "core/src/test/java/org/apache/iceberg/hadoop/TestHadoopCatalog.java", "diffHunk": "@@ -525,6 +525,34 @@ public void testVersionHintFileMissingMetadata() throws Exception {\n         () -> TABLES.load(tableLocation));\n   }\n \n+  @Test\n+  public void testTableEquality() throws Exception {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzczMzE5Mw=="}, "originalCommit": {"oid": "6bd2628af7e06ecdb9ac56c8fd563df30ca8df79"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzc2OTk5NA==", "bodyText": "What do you think about this idea, @holdenk @RussellSpitzer @rdblue?", "url": "https://github.com/apache/iceberg/pull/1530#discussion_r497769994", "createdAt": "2020-09-30T20:07:46Z", "author": {"login": "aokolnychyi"}, "path": "core/src/test/java/org/apache/iceberg/hadoop/TestHadoopCatalog.java", "diffHunk": "@@ -525,6 +525,34 @@ public void testVersionHintFileMissingMetadata() throws Exception {\n         () -> TABLES.load(tableLocation));\n   }\n \n+  @Test\n+  public void testTableEquality() throws Exception {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzczMzE5Mw=="}, "originalCommit": {"oid": "6bd2628af7e06ecdb9ac56c8fd563df30ca8df79"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzc3MTcxMQ==", "bodyText": "We did a similar thing in #1512.", "url": "https://github.com/apache/iceberg/pull/1530#discussion_r497771711", "createdAt": "2020-09-30T20:11:08Z", "author": {"login": "aokolnychyi"}, "path": "core/src/test/java/org/apache/iceberg/hadoop/TestHadoopCatalog.java", "diffHunk": "@@ -525,6 +525,34 @@ public void testVersionHintFileMissingMetadata() throws Exception {\n         () -> TABLES.load(tableLocation));\n   }\n \n+  @Test\n+  public void testTableEquality() throws Exception {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzczMzE5Mw=="}, "originalCommit": {"oid": "6bd2628af7e06ecdb9ac56c8fd563df30ca8df79"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzc3ODA1OA==", "bodyText": "Sounds like a good idea. I like to avoid implementing the method in places where \"equals\" has a fuzzy definition -- is it the \"same\" table or is it an equivalent instance?\nWe're also relying on Table.toString behavior a bit too much. It is probably time to add Table.name to the API and use that instead.", "url": "https://github.com/apache/iceberg/pull/1530#discussion_r497778058", "createdAt": "2020-09-30T20:23:25Z", "author": {"login": "rdblue"}, "path": "core/src/test/java/org/apache/iceberg/hadoop/TestHadoopCatalog.java", "diffHunk": "@@ -525,6 +525,34 @@ public void testVersionHintFileMissingMetadata() throws Exception {\n         () -> TABLES.load(tableLocation));\n   }\n \n+  @Test\n+  public void testTableEquality() throws Exception {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzczMzE5Mw=="}, "originalCommit": {"oid": "6bd2628af7e06ecdb9ac56c8fd563df30ca8df79"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzc3OTUwOA==", "bodyText": "Sounds reasonable to me", "url": "https://github.com/apache/iceberg/pull/1530#discussion_r497779508", "createdAt": "2020-09-30T20:26:05Z", "author": {"login": "RussellSpitzer"}, "path": "core/src/test/java/org/apache/iceberg/hadoop/TestHadoopCatalog.java", "diffHunk": "@@ -525,6 +525,34 @@ public void testVersionHintFileMissingMetadata() throws Exception {\n         () -> TABLES.load(tableLocation));\n   }\n \n+  @Test\n+  public void testTableEquality() throws Exception {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzczMzE5Mw=="}, "originalCommit": {"oid": "6bd2628af7e06ecdb9ac56c8fd563df30ca8df79"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzc5MjEzOA==", "bodyText": "sgtm", "url": "https://github.com/apache/iceberg/pull/1530#discussion_r497792138", "createdAt": "2020-09-30T20:50:28Z", "author": {"login": "holdenk"}, "path": "core/src/test/java/org/apache/iceberg/hadoop/TestHadoopCatalog.java", "diffHunk": "@@ -525,6 +525,34 @@ public void testVersionHintFileMissingMetadata() throws Exception {\n         () -> TABLES.load(tableLocation));\n   }\n \n+  @Test\n+  public void testTableEquality() throws Exception {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzczMzE5Mw=="}, "originalCommit": {"oid": "6bd2628af7e06ecdb9ac56c8fd563df30ca8df79"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzgyMzU4NA==", "bodyText": "It may be a good point in time to implement #658. Let me invest into that.", "url": "https://github.com/apache/iceberg/pull/1530#discussion_r497823584", "createdAt": "2020-09-30T21:55:49Z", "author": {"login": "aokolnychyi"}, "path": "core/src/test/java/org/apache/iceberg/hadoop/TestHadoopCatalog.java", "diffHunk": "@@ -525,6 +525,34 @@ public void testVersionHintFileMissingMetadata() throws Exception {\n         () -> TABLES.load(tableLocation));\n   }\n \n+  @Test\n+  public void testTableEquality() throws Exception {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzczMzE5Mw=="}, "originalCommit": {"oid": "6bd2628af7e06ecdb9ac56c8fd563df30ca8df79"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzg5ODkwNg==", "bodyText": "I've created #1537.", "url": "https://github.com/apache/iceberg/pull/1530#discussion_r497898906", "createdAt": "2020-10-01T01:02:39Z", "author": {"login": "aokolnychyi"}, "path": "core/src/test/java/org/apache/iceberg/hadoop/TestHadoopCatalog.java", "diffHunk": "@@ -525,6 +525,34 @@ public void testVersionHintFileMissingMetadata() throws Exception {\n         () -> TABLES.load(tableLocation));\n   }\n \n+  @Test\n+  public void testTableEquality() throws Exception {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzczMzE5Mw=="}, "originalCommit": {"oid": "6bd2628af7e06ecdb9ac56c8fd563df30ca8df79"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODAwNTAwMA==", "bodyText": "Throwing in my +1 for adding name to the API. But I'd hope that we can still leave a meaningful enough toString method in place.\nWithout it, we just wind up with your typical memory location etc, specifically when / if Table is used in a parameterized test (I just spent half my evening adding parameterized names to all of the tests that didn't have them).\nWhat is everybody's opinion on implementing toString when it's not strictly necessary? Would you say it's a good practice, or is it possibly just extra unused code that needs to be maintained over time? I know this is potentially more of a religious question than a hard and fast rule, but I'd love to hear your input.", "url": "https://github.com/apache/iceberg/pull/1530#discussion_r498005000", "createdAt": "2020-10-01T06:14:28Z", "author": {"login": "kbendick"}, "path": "core/src/test/java/org/apache/iceberg/hadoop/TestHadoopCatalog.java", "diffHunk": "@@ -525,6 +525,34 @@ public void testVersionHintFileMissingMetadata() throws Exception {\n         () -> TABLES.load(tableLocation));\n   }\n \n+  @Test\n+  public void testTableEquality() throws Exception {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzczMzE5Mw=="}, "originalCommit": {"oid": "6bd2628af7e06ecdb9ac56c8fd563df30ca8df79"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODM5MTYwOA==", "bodyText": "I think implementing toString is a good practice. Spark uses it in query plans quite a bit.", "url": "https://github.com/apache/iceberg/pull/1530#discussion_r498391608", "createdAt": "2020-10-01T17:01:59Z", "author": {"login": "rdblue"}, "path": "core/src/test/java/org/apache/iceberg/hadoop/TestHadoopCatalog.java", "diffHunk": "@@ -525,6 +525,34 @@ public void testVersionHintFileMissingMetadata() throws Exception {\n         () -> TABLES.load(tableLocation));\n   }\n \n+  @Test\n+  public void testTableEquality() throws Exception {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzczMzE5Mw=="}, "originalCommit": {"oid": "6bd2628af7e06ecdb9ac56c8fd563df30ca8df79"}, "originalPosition": 5}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3557, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}