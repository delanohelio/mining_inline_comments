{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDIwMTkyMDY3", "number": 510, "reviewThreads": {"totalCount": 33, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QwODo0MDo0N1rOD__dyQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxNDo0ODo1OVrOEAIasg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4NDI2Njk3OnYy", "diffSide": "RIGHT", "path": "src/proxy-ui-api/frontend/src/components/client/UnregisterClientButton.vue", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QwODo0MDo0N1rOGa_Qzg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxMzowMjoyOFrOGcbsXw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDk1MjY1NA==", "bodyText": "data-test missing", "url": "https://github.com/nordic-institute/X-Road/pull/510#discussion_r430952654", "createdAt": "2020-05-27T08:40:47Z", "author": {"login": "TJaakkola"}, "path": "src/proxy-ui-api/frontend/src/components/client/UnregisterClientButton.vue", "diffHunk": "@@ -0,0 +1,67 @@\n+<template>\n+  <div>\n+    <LargeButton", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "37090653d465500817204c66a484399164f5f4be"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjQ2NzAzOQ==", "bodyText": "Fixed", "url": "https://github.com/nordic-institute/X-Road/pull/510#discussion_r432467039", "createdAt": "2020-05-29T13:02:28Z", "author": {"login": "Riippi"}, "path": "src/proxy-ui-api/frontend/src/components/client/UnregisterClientButton.vue", "diffHunk": "@@ -0,0 +1,67 @@\n+<template>\n+  <div>\n+    <LargeButton", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDk1MjY1NA=="}, "originalCommit": {"oid": "37090653d465500817204c66a484399164f5f4be"}, "originalPosition": 3}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4NDM0OTUyOnYy", "diffSide": "RIGHT", "path": "src/proxy-ui-api/frontend/src/components/client/DeleteClientButton.vue", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QwOTowMjoyNFrOGbAFtw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxMzowMjozNlrOGcbskg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDk2NjE5OQ==", "bodyText": "data-test missing", "url": "https://github.com/nordic-institute/X-Road/pull/510#discussion_r430966199", "createdAt": "2020-05-27T09:02:24Z", "author": {"login": "TJaakkola"}, "path": "src/proxy-ui-api/frontend/src/components/client/DeleteClientButton.vue", "diffHunk": "@@ -0,0 +1,116 @@\n+<template>\n+  <div>\n+    <LargeButton @click=\"confirmDelete = true\">{{$t('action.delete')}}</LargeButton>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "37090653d465500817204c66a484399164f5f4be"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjQ2NzA5MA==", "bodyText": "Fixed", "url": "https://github.com/nordic-institute/X-Road/pull/510#discussion_r432467090", "createdAt": "2020-05-29T13:02:36Z", "author": {"login": "Riippi"}, "path": "src/proxy-ui-api/frontend/src/components/client/DeleteClientButton.vue", "diffHunk": "@@ -0,0 +1,116 @@\n+<template>\n+  <div>\n+    <LargeButton @click=\"confirmDelete = true\">{{$t('action.delete')}}</LargeButton>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDk2NjE5OQ=="}, "originalCommit": {"oid": "37090653d465500817204c66a484399164f5f4be"}, "originalPosition": 3}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4NDM2OTQ0OnYy", "diffSide": "RIGHT", "path": "src/proxy-ui-api/frontend/src/components/wizard/CsrDetailsPageLocked.vue", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QwOTowNzo0M1rOGbAS6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxMzowMjo0NlrOGcbs9g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDk2OTU3OA==", "bodyText": "missing typings", "url": "https://github.com/nordic-institute/X-Road/pull/510#discussion_r430969578", "createdAt": "2020-05-27T09:07:43Z", "author": {"login": "TJaakkola"}, "path": "src/proxy-ui-api/frontend/src/components/wizard/CsrDetailsPageLocked.vue", "diffHunk": "@@ -0,0 +1,170 @@\n+<template>\n+  <div>\n+    <ValidationObserver ref=\"form1\" v-slot=\"{ validate, invalid }\">\n+      <div class=\"row-wrap\">\n+        <div class=\"label\">\n+          {{$t('csr.usage')}}\n+          <helpIcon :text=\"$t('csr.helpUsage')\" />\n+        </div>\n+        <div class=\"readonly-info-field\">{{usage}}</div>\n+      </div>\n+\n+      <div class=\"row-wrap\">\n+        <div class=\"label\">\n+          {{$t('csr.client')}}\n+          <helpIcon :text=\"$t('csr.helpClient')\" />\n+        </div>\n+        <div\n+          class=\"readonly-info-field\"\n+        >{{selectedMemberId}}</div>\n+      </div>\n+\n+      <div class=\"row-wrap\">\n+        <div class=\"label\">\n+          {{$t('csr.certificationService')}}\n+          <helpIcon :text=\"$t('csr.helpCertificationService')\" />\n+        </div>\n+\n+        <ValidationProvider name=\"crs.certService\" rules=\"required\" v-slot=\"{ errors }\">\n+          <v-select\n+            :items=\"filteredServiceList\"\n+            item-text=\"name\"\n+            item-value=\"name\"\n+            class=\"form-input\"\n+            v-model=\"certificationService\"\n+            data-test=\"csr-certification-service-select\"\n+          ></v-select>\n+        </ValidationProvider>\n+      </div>\n+\n+      <div class=\"row-wrap\">\n+        <div class=\"label\">\n+          {{$t('csr.csrFormat')}}\n+          <helpIcon :text=\"$t('csr.helpCsrFormat')\" />\n+        </div>\n+\n+        <ValidationProvider name=\"crs.crsFormat\" rules=\"required\" v-slot=\"{ errors }\">\n+          <v-select\n+            :items=\"csrFormatList\"\n+            name=\"crs.crsFormat\"\n+            class=\"form-input\"\n+            v-model=\"csrFormat\"\n+            data-test=\"csr-format-select\"\n+          ></v-select>\n+        </ValidationProvider>\n+      </div>\n+\n+      <div class=\"button-footer\">\n+        <large-button outlined @click=\"cancel\" data-test=\"cancel-button\">{{$t('action.cancel')}}</large-button>\n+\n+        <div>\n+          <large-button\n+            v-if=\"showPreviousButton\"\n+            @click=\"previous\"\n+            outlined\n+            class=\"previous-button\"\n+            data-test=\"previous-button\"\n+          >{{$t('action.previous')}}</large-button>\n+          <large-button\n+            :disabled=\"invalid\"\n+            @click=\"done\"\n+            data-test=\"save-button\"\n+          >{{$t(saveButtonText)}}</large-button>\n+        </div>\n+      </div>\n+    </ValidationObserver>\n+  </div>\n+</template>\n+\n+<script lang=\"ts\">\n+import Vue from 'vue';\n+import { mapGetters } from 'vuex';\n+import { ValidationProvider, ValidationObserver } from 'vee-validate';\n+import HelpIcon from '@/components/ui/HelpIcon.vue';\n+import LargeButton from '@/components/ui/LargeButton.vue';\n+import SubViewTitle from '@/components/ui/SubViewTitle.vue';\n+import { Key, Token } from '@/types';\n+import { CsrFormatTypes } from '@/global';\n+import * as api from '@/util/api';\n+\n+export default Vue.extend({\n+  components: {\n+    HelpIcon,\n+    LargeButton,\n+    SubViewTitle,\n+    ValidationObserver,\n+    ValidationProvider,\n+  },\n+  props: {\n+    saveButtonText: {\n+      type: String,\n+      default: 'action.continue',\n+    },\n+    showPreviousButton: {\n+      type: Boolean,\n+      default: true,\n+    },\n+  },\n+  data() {\n+    return {\n+      csrFormatList: Object.values(CsrFormatTypes),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "37090653d465500817204c66a484399164f5f4be"}, "originalPosition": 110}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjQ2NzE5MA==", "bodyText": "Fixed", "url": "https://github.com/nordic-institute/X-Road/pull/510#discussion_r432467190", "createdAt": "2020-05-29T13:02:46Z", "author": {"login": "Riippi"}, "path": "src/proxy-ui-api/frontend/src/components/wizard/CsrDetailsPageLocked.vue", "diffHunk": "@@ -0,0 +1,170 @@\n+<template>\n+  <div>\n+    <ValidationObserver ref=\"form1\" v-slot=\"{ validate, invalid }\">\n+      <div class=\"row-wrap\">\n+        <div class=\"label\">\n+          {{$t('csr.usage')}}\n+          <helpIcon :text=\"$t('csr.helpUsage')\" />\n+        </div>\n+        <div class=\"readonly-info-field\">{{usage}}</div>\n+      </div>\n+\n+      <div class=\"row-wrap\">\n+        <div class=\"label\">\n+          {{$t('csr.client')}}\n+          <helpIcon :text=\"$t('csr.helpClient')\" />\n+        </div>\n+        <div\n+          class=\"readonly-info-field\"\n+        >{{selectedMemberId}}</div>\n+      </div>\n+\n+      <div class=\"row-wrap\">\n+        <div class=\"label\">\n+          {{$t('csr.certificationService')}}\n+          <helpIcon :text=\"$t('csr.helpCertificationService')\" />\n+        </div>\n+\n+        <ValidationProvider name=\"crs.certService\" rules=\"required\" v-slot=\"{ errors }\">\n+          <v-select\n+            :items=\"filteredServiceList\"\n+            item-text=\"name\"\n+            item-value=\"name\"\n+            class=\"form-input\"\n+            v-model=\"certificationService\"\n+            data-test=\"csr-certification-service-select\"\n+          ></v-select>\n+        </ValidationProvider>\n+      </div>\n+\n+      <div class=\"row-wrap\">\n+        <div class=\"label\">\n+          {{$t('csr.csrFormat')}}\n+          <helpIcon :text=\"$t('csr.helpCsrFormat')\" />\n+        </div>\n+\n+        <ValidationProvider name=\"crs.crsFormat\" rules=\"required\" v-slot=\"{ errors }\">\n+          <v-select\n+            :items=\"csrFormatList\"\n+            name=\"crs.crsFormat\"\n+            class=\"form-input\"\n+            v-model=\"csrFormat\"\n+            data-test=\"csr-format-select\"\n+          ></v-select>\n+        </ValidationProvider>\n+      </div>\n+\n+      <div class=\"button-footer\">\n+        <large-button outlined @click=\"cancel\" data-test=\"cancel-button\">{{$t('action.cancel')}}</large-button>\n+\n+        <div>\n+          <large-button\n+            v-if=\"showPreviousButton\"\n+            @click=\"previous\"\n+            outlined\n+            class=\"previous-button\"\n+            data-test=\"previous-button\"\n+          >{{$t('action.previous')}}</large-button>\n+          <large-button\n+            :disabled=\"invalid\"\n+            @click=\"done\"\n+            data-test=\"save-button\"\n+          >{{$t(saveButtonText)}}</large-button>\n+        </div>\n+      </div>\n+    </ValidationObserver>\n+  </div>\n+</template>\n+\n+<script lang=\"ts\">\n+import Vue from 'vue';\n+import { mapGetters } from 'vuex';\n+import { ValidationProvider, ValidationObserver } from 'vee-validate';\n+import HelpIcon from '@/components/ui/HelpIcon.vue';\n+import LargeButton from '@/components/ui/LargeButton.vue';\n+import SubViewTitle from '@/components/ui/SubViewTitle.vue';\n+import { Key, Token } from '@/types';\n+import { CsrFormatTypes } from '@/global';\n+import * as api from '@/util/api';\n+\n+export default Vue.extend({\n+  components: {\n+    HelpIcon,\n+    LargeButton,\n+    SubViewTitle,\n+    ValidationObserver,\n+    ValidationProvider,\n+  },\n+  props: {\n+    saveButtonText: {\n+      type: String,\n+      default: 'action.continue',\n+    },\n+    showPreviousButton: {\n+      type: Boolean,\n+      default: true,\n+    },\n+  },\n+  data() {\n+    return {\n+      csrFormatList: Object.values(CsrFormatTypes),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDk2OTU3OA=="}, "originalCommit": {"oid": "37090653d465500817204c66a484399164f5f4be"}, "originalPosition": 110}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4NDM3Mjc0OnYy", "diffSide": "RIGHT", "path": "src/proxy-ui-api/frontend/src/components/wizard/CsrDetailsPageLocked.vue", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QwOTowODoyOVrOGbAU6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxMzowMjo1OFrOGcbtZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDk3MDA5MA==", "bodyText": "val?.length === 1", "url": "https://github.com/nordic-institute/X-Road/pull/510#discussion_r430970090", "createdAt": "2020-05-27T09:08:29Z", "author": {"login": "TJaakkola"}, "path": "src/proxy-ui-api/frontend/src/components/wizard/CsrDetailsPageLocked.vue", "diffHunk": "@@ -0,0 +1,170 @@\n+<template>\n+  <div>\n+    <ValidationObserver ref=\"form1\" v-slot=\"{ validate, invalid }\">\n+      <div class=\"row-wrap\">\n+        <div class=\"label\">\n+          {{$t('csr.usage')}}\n+          <helpIcon :text=\"$t('csr.helpUsage')\" />\n+        </div>\n+        <div class=\"readonly-info-field\">{{usage}}</div>\n+      </div>\n+\n+      <div class=\"row-wrap\">\n+        <div class=\"label\">\n+          {{$t('csr.client')}}\n+          <helpIcon :text=\"$t('csr.helpClient')\" />\n+        </div>\n+        <div\n+          class=\"readonly-info-field\"\n+        >{{selectedMemberId}}</div>\n+      </div>\n+\n+      <div class=\"row-wrap\">\n+        <div class=\"label\">\n+          {{$t('csr.certificationService')}}\n+          <helpIcon :text=\"$t('csr.helpCertificationService')\" />\n+        </div>\n+\n+        <ValidationProvider name=\"crs.certService\" rules=\"required\" v-slot=\"{ errors }\">\n+          <v-select\n+            :items=\"filteredServiceList\"\n+            item-text=\"name\"\n+            item-value=\"name\"\n+            class=\"form-input\"\n+            v-model=\"certificationService\"\n+            data-test=\"csr-certification-service-select\"\n+          ></v-select>\n+        </ValidationProvider>\n+      </div>\n+\n+      <div class=\"row-wrap\">\n+        <div class=\"label\">\n+          {{$t('csr.csrFormat')}}\n+          <helpIcon :text=\"$t('csr.helpCsrFormat')\" />\n+        </div>\n+\n+        <ValidationProvider name=\"crs.crsFormat\" rules=\"required\" v-slot=\"{ errors }\">\n+          <v-select\n+            :items=\"csrFormatList\"\n+            name=\"crs.crsFormat\"\n+            class=\"form-input\"\n+            v-model=\"csrFormat\"\n+            data-test=\"csr-format-select\"\n+          ></v-select>\n+        </ValidationProvider>\n+      </div>\n+\n+      <div class=\"button-footer\">\n+        <large-button outlined @click=\"cancel\" data-test=\"cancel-button\">{{$t('action.cancel')}}</large-button>\n+\n+        <div>\n+          <large-button\n+            v-if=\"showPreviousButton\"\n+            @click=\"previous\"\n+            outlined\n+            class=\"previous-button\"\n+            data-test=\"previous-button\"\n+          >{{$t('action.previous')}}</large-button>\n+          <large-button\n+            :disabled=\"invalid\"\n+            @click=\"done\"\n+            data-test=\"save-button\"\n+          >{{$t(saveButtonText)}}</large-button>\n+        </div>\n+      </div>\n+    </ValidationObserver>\n+  </div>\n+</template>\n+\n+<script lang=\"ts\">\n+import Vue from 'vue';\n+import { mapGetters } from 'vuex';\n+import { ValidationProvider, ValidationObserver } from 'vee-validate';\n+import HelpIcon from '@/components/ui/HelpIcon.vue';\n+import LargeButton from '@/components/ui/LargeButton.vue';\n+import SubViewTitle from '@/components/ui/SubViewTitle.vue';\n+import { Key, Token } from '@/types';\n+import { CsrFormatTypes } from '@/global';\n+import * as api from '@/util/api';\n+\n+export default Vue.extend({\n+  components: {\n+    HelpIcon,\n+    LargeButton,\n+    SubViewTitle,\n+    ValidationObserver,\n+    ValidationProvider,\n+  },\n+  props: {\n+    saveButtonText: {\n+      type: String,\n+      default: 'action.continue',\n+    },\n+    showPreviousButton: {\n+      type: Boolean,\n+      default: true,\n+    },\n+  },\n+  data() {\n+    return {\n+      csrFormatList: Object.values(CsrFormatTypes),\n+    };\n+  },\n+  computed: {\n+    ...mapGetters([\n+      'filteredServiceList',\n+      'isUsageReadOnly',\n+      'selectedMemberId',\n+      'usage',\n+    ]),\n+\n+    csrFormat: {\n+      get(): string {\n+        return this.$store.getters.csrFormat;\n+      },\n+      set(value: string) {\n+        this.$store.commit('storeCsrFormat', value);\n+      },\n+    },\n+    certificationService: {\n+      get(): string {\n+        return this.$store.getters.certificationService;\n+      },\n+      set(value: string) {\n+        this.$store.commit('storeCertificationService', value);\n+      },\n+    },\n+  },\n+  methods: {\n+    done(): void {\n+      this.$emit('done');\n+    },\n+    previous(): void {\n+      this.$emit('previous');\n+    },\n+    cancel(): void {\n+      this.$emit('cancel');\n+    },\n+  },\n+\n+  watch: {\n+    filteredServiceList(val) {\n+      // Set first certification service selected as default when the list is updated\n+      if (val && val.length === 1) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "37090653d465500817204c66a484399164f5f4be"}, "originalPosition": 153}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDk3Mzc1Nw==", "bodyText": "Actually it is possible to remove the if-clause and just:\nThis would set certificationService value each time (undefined if no value)\nthis.certificationService = val?.[0].name\nThis would work identical to what it is now.\nthis.certificationService = val?.[0].name ?? this.sertificationService;\nUp to you what to do, but I'd change at least to that optional chaining in the first comment :)", "url": "https://github.com/nordic-institute/X-Road/pull/510#discussion_r430973757", "createdAt": "2020-05-27T09:14:27Z", "author": {"login": "TJaakkola"}, "path": "src/proxy-ui-api/frontend/src/components/wizard/CsrDetailsPageLocked.vue", "diffHunk": "@@ -0,0 +1,170 @@\n+<template>\n+  <div>\n+    <ValidationObserver ref=\"form1\" v-slot=\"{ validate, invalid }\">\n+      <div class=\"row-wrap\">\n+        <div class=\"label\">\n+          {{$t('csr.usage')}}\n+          <helpIcon :text=\"$t('csr.helpUsage')\" />\n+        </div>\n+        <div class=\"readonly-info-field\">{{usage}}</div>\n+      </div>\n+\n+      <div class=\"row-wrap\">\n+        <div class=\"label\">\n+          {{$t('csr.client')}}\n+          <helpIcon :text=\"$t('csr.helpClient')\" />\n+        </div>\n+        <div\n+          class=\"readonly-info-field\"\n+        >{{selectedMemberId}}</div>\n+      </div>\n+\n+      <div class=\"row-wrap\">\n+        <div class=\"label\">\n+          {{$t('csr.certificationService')}}\n+          <helpIcon :text=\"$t('csr.helpCertificationService')\" />\n+        </div>\n+\n+        <ValidationProvider name=\"crs.certService\" rules=\"required\" v-slot=\"{ errors }\">\n+          <v-select\n+            :items=\"filteredServiceList\"\n+            item-text=\"name\"\n+            item-value=\"name\"\n+            class=\"form-input\"\n+            v-model=\"certificationService\"\n+            data-test=\"csr-certification-service-select\"\n+          ></v-select>\n+        </ValidationProvider>\n+      </div>\n+\n+      <div class=\"row-wrap\">\n+        <div class=\"label\">\n+          {{$t('csr.csrFormat')}}\n+          <helpIcon :text=\"$t('csr.helpCsrFormat')\" />\n+        </div>\n+\n+        <ValidationProvider name=\"crs.crsFormat\" rules=\"required\" v-slot=\"{ errors }\">\n+          <v-select\n+            :items=\"csrFormatList\"\n+            name=\"crs.crsFormat\"\n+            class=\"form-input\"\n+            v-model=\"csrFormat\"\n+            data-test=\"csr-format-select\"\n+          ></v-select>\n+        </ValidationProvider>\n+      </div>\n+\n+      <div class=\"button-footer\">\n+        <large-button outlined @click=\"cancel\" data-test=\"cancel-button\">{{$t('action.cancel')}}</large-button>\n+\n+        <div>\n+          <large-button\n+            v-if=\"showPreviousButton\"\n+            @click=\"previous\"\n+            outlined\n+            class=\"previous-button\"\n+            data-test=\"previous-button\"\n+          >{{$t('action.previous')}}</large-button>\n+          <large-button\n+            :disabled=\"invalid\"\n+            @click=\"done\"\n+            data-test=\"save-button\"\n+          >{{$t(saveButtonText)}}</large-button>\n+        </div>\n+      </div>\n+    </ValidationObserver>\n+  </div>\n+</template>\n+\n+<script lang=\"ts\">\n+import Vue from 'vue';\n+import { mapGetters } from 'vuex';\n+import { ValidationProvider, ValidationObserver } from 'vee-validate';\n+import HelpIcon from '@/components/ui/HelpIcon.vue';\n+import LargeButton from '@/components/ui/LargeButton.vue';\n+import SubViewTitle from '@/components/ui/SubViewTitle.vue';\n+import { Key, Token } from '@/types';\n+import { CsrFormatTypes } from '@/global';\n+import * as api from '@/util/api';\n+\n+export default Vue.extend({\n+  components: {\n+    HelpIcon,\n+    LargeButton,\n+    SubViewTitle,\n+    ValidationObserver,\n+    ValidationProvider,\n+  },\n+  props: {\n+    saveButtonText: {\n+      type: String,\n+      default: 'action.continue',\n+    },\n+    showPreviousButton: {\n+      type: Boolean,\n+      default: true,\n+    },\n+  },\n+  data() {\n+    return {\n+      csrFormatList: Object.values(CsrFormatTypes),\n+    };\n+  },\n+  computed: {\n+    ...mapGetters([\n+      'filteredServiceList',\n+      'isUsageReadOnly',\n+      'selectedMemberId',\n+      'usage',\n+    ]),\n+\n+    csrFormat: {\n+      get(): string {\n+        return this.$store.getters.csrFormat;\n+      },\n+      set(value: string) {\n+        this.$store.commit('storeCsrFormat', value);\n+      },\n+    },\n+    certificationService: {\n+      get(): string {\n+        return this.$store.getters.certificationService;\n+      },\n+      set(value: string) {\n+        this.$store.commit('storeCertificationService', value);\n+      },\n+    },\n+  },\n+  methods: {\n+    done(): void {\n+      this.$emit('done');\n+    },\n+    previous(): void {\n+      this.$emit('previous');\n+    },\n+    cancel(): void {\n+      this.$emit('cancel');\n+    },\n+  },\n+\n+  watch: {\n+    filteredServiceList(val) {\n+      // Set first certification service selected as default when the list is updated\n+      if (val && val.length === 1) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDk3MDA5MA=="}, "originalCommit": {"oid": "37090653d465500817204c66a484399164f5f4be"}, "originalPosition": 153}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjQ2NzMwMQ==", "bodyText": "Fixed", "url": "https://github.com/nordic-institute/X-Road/pull/510#discussion_r432467301", "createdAt": "2020-05-29T13:02:58Z", "author": {"login": "Riippi"}, "path": "src/proxy-ui-api/frontend/src/components/wizard/CsrDetailsPageLocked.vue", "diffHunk": "@@ -0,0 +1,170 @@\n+<template>\n+  <div>\n+    <ValidationObserver ref=\"form1\" v-slot=\"{ validate, invalid }\">\n+      <div class=\"row-wrap\">\n+        <div class=\"label\">\n+          {{$t('csr.usage')}}\n+          <helpIcon :text=\"$t('csr.helpUsage')\" />\n+        </div>\n+        <div class=\"readonly-info-field\">{{usage}}</div>\n+      </div>\n+\n+      <div class=\"row-wrap\">\n+        <div class=\"label\">\n+          {{$t('csr.client')}}\n+          <helpIcon :text=\"$t('csr.helpClient')\" />\n+        </div>\n+        <div\n+          class=\"readonly-info-field\"\n+        >{{selectedMemberId}}</div>\n+      </div>\n+\n+      <div class=\"row-wrap\">\n+        <div class=\"label\">\n+          {{$t('csr.certificationService')}}\n+          <helpIcon :text=\"$t('csr.helpCertificationService')\" />\n+        </div>\n+\n+        <ValidationProvider name=\"crs.certService\" rules=\"required\" v-slot=\"{ errors }\">\n+          <v-select\n+            :items=\"filteredServiceList\"\n+            item-text=\"name\"\n+            item-value=\"name\"\n+            class=\"form-input\"\n+            v-model=\"certificationService\"\n+            data-test=\"csr-certification-service-select\"\n+          ></v-select>\n+        </ValidationProvider>\n+      </div>\n+\n+      <div class=\"row-wrap\">\n+        <div class=\"label\">\n+          {{$t('csr.csrFormat')}}\n+          <helpIcon :text=\"$t('csr.helpCsrFormat')\" />\n+        </div>\n+\n+        <ValidationProvider name=\"crs.crsFormat\" rules=\"required\" v-slot=\"{ errors }\">\n+          <v-select\n+            :items=\"csrFormatList\"\n+            name=\"crs.crsFormat\"\n+            class=\"form-input\"\n+            v-model=\"csrFormat\"\n+            data-test=\"csr-format-select\"\n+          ></v-select>\n+        </ValidationProvider>\n+      </div>\n+\n+      <div class=\"button-footer\">\n+        <large-button outlined @click=\"cancel\" data-test=\"cancel-button\">{{$t('action.cancel')}}</large-button>\n+\n+        <div>\n+          <large-button\n+            v-if=\"showPreviousButton\"\n+            @click=\"previous\"\n+            outlined\n+            class=\"previous-button\"\n+            data-test=\"previous-button\"\n+          >{{$t('action.previous')}}</large-button>\n+          <large-button\n+            :disabled=\"invalid\"\n+            @click=\"done\"\n+            data-test=\"save-button\"\n+          >{{$t(saveButtonText)}}</large-button>\n+        </div>\n+      </div>\n+    </ValidationObserver>\n+  </div>\n+</template>\n+\n+<script lang=\"ts\">\n+import Vue from 'vue';\n+import { mapGetters } from 'vuex';\n+import { ValidationProvider, ValidationObserver } from 'vee-validate';\n+import HelpIcon from '@/components/ui/HelpIcon.vue';\n+import LargeButton from '@/components/ui/LargeButton.vue';\n+import SubViewTitle from '@/components/ui/SubViewTitle.vue';\n+import { Key, Token } from '@/types';\n+import { CsrFormatTypes } from '@/global';\n+import * as api from '@/util/api';\n+\n+export default Vue.extend({\n+  components: {\n+    HelpIcon,\n+    LargeButton,\n+    SubViewTitle,\n+    ValidationObserver,\n+    ValidationProvider,\n+  },\n+  props: {\n+    saveButtonText: {\n+      type: String,\n+      default: 'action.continue',\n+    },\n+    showPreviousButton: {\n+      type: Boolean,\n+      default: true,\n+    },\n+  },\n+  data() {\n+    return {\n+      csrFormatList: Object.values(CsrFormatTypes),\n+    };\n+  },\n+  computed: {\n+    ...mapGetters([\n+      'filteredServiceList',\n+      'isUsageReadOnly',\n+      'selectedMemberId',\n+      'usage',\n+    ]),\n+\n+    csrFormat: {\n+      get(): string {\n+        return this.$store.getters.csrFormat;\n+      },\n+      set(value: string) {\n+        this.$store.commit('storeCsrFormat', value);\n+      },\n+    },\n+    certificationService: {\n+      get(): string {\n+        return this.$store.getters.certificationService;\n+      },\n+      set(value: string) {\n+        this.$store.commit('storeCertificationService', value);\n+      },\n+    },\n+  },\n+  methods: {\n+    done(): void {\n+      this.$emit('done');\n+    },\n+    previous(): void {\n+      this.$emit('previous');\n+    },\n+    cancel(): void {\n+      this.$emit('cancel');\n+    },\n+  },\n+\n+  watch: {\n+    filteredServiceList(val) {\n+      // Set first certification service selected as default when the list is updated\n+      if (val && val.length === 1) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDk3MDA5MA=="}, "originalCommit": {"oid": "37090653d465500817204c66a484399164f5f4be"}, "originalPosition": 153}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4NDQwMzYyOnYy", "diffSide": "RIGHT", "path": "src/proxy-ui-api/frontend/src/components/wizard/WizardPageCsrDetails.vue", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QwOToxNjo0MFrOGbApBg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxMzowMzowNVrOGcbtow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDk3NTIzOA==", "bodyText": "You haven't touch this logic, but could refactor it like above", "url": "https://github.com/nordic-institute/X-Road/pull/510#discussion_r430975238", "createdAt": "2020-05-27T09:16:40Z", "author": {"login": "TJaakkola"}, "path": "src/proxy-ui-api/frontend/src/components/wizard/WizardPageCsrDetails.vue", "diffHunk": "@@ -189,7 +189,7 @@ export default Vue.extend({\n       }\n     },\n     localMembersIds(val) {\n-      // Set first client selected as defaulg when the list is updated\n+      // Set first client selected as default when the list is updated\n       if (val && val.length === 1) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "37090653d465500817204c66a484399164f5f4be"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjQ2NzM2Mw==", "bodyText": "Fixed", "url": "https://github.com/nordic-institute/X-Road/pull/510#discussion_r432467363", "createdAt": "2020-05-29T13:03:05Z", "author": {"login": "Riippi"}, "path": "src/proxy-ui-api/frontend/src/components/wizard/WizardPageCsrDetails.vue", "diffHunk": "@@ -189,7 +189,7 @@ export default Vue.extend({\n       }\n     },\n     localMembersIds(val) {\n-      // Set first client selected as defaulg when the list is updated\n+      // Set first client selected as default when the list is updated\n       if (val && val.length === 1) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDk3NTIzOA=="}, "originalCommit": {"oid": "37090653d465500817204c66a484399164f5f4be"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4NDY2ODA2OnYy", "diffSide": "RIGHT", "path": "src/proxy-ui-api/frontend/src/store/modules/addClient.ts", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxMDozMjoxOFrOGbDTVg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQxOToxNToxNVrOGcDAeg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTAxODgzOA==", "bodyText": "In general I find a bit inconsistent that async await is used here but everywhere else dealing with promises has been done the 'old way' (attaching then and catch handlers to the promise). Also if we have to use the async await here perhaps we're using the wrong approach in the first place.\nAnyway using the old promise handling way inside async function feels a bit odd too. That could easily be changed to use await instead. The same goes for 'checkForValidSignCert' -function - maybe just use async await there too.", "url": "https://github.com/nordic-institute/X-Road/pull/510#discussion_r431018838", "createdAt": "2020-05-27T10:32:18Z", "author": {"login": "TJaakkola"}, "path": "src/proxy-ui-api/frontend/src/store/modules/addClient.ts", "diffHunk": "@@ -132,6 +201,81 @@ export const actions: ActionTree<AddClientState, RootState> = {\n       });\n   },\n \n+  createMember({ commit, state }) {\n+    const body = {\n+      client: {\n+        member_class: state.memberClass,\n+        member_code: state.memberCode,\n+      },\n+      ignore_warnings: false,\n+    };\n+\n+    return api.post('/clients', body)\n+      .catch((error) => {\n+        throw error;\n+      });\n+  },\n+\n+  async searchTokens({ commit, dispatch }, { instanceId, memberClass, memberCode }) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "37090653d465500817204c66a484399164f5f4be"}, "originalPosition": 199}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjA2MjU4Ng==", "bodyText": "I refactored it to use only async await. I suppose it's possible to do this with the \"old way\", but I couldn't wrap my brains around how to not make it look like \"spaghetti\".", "url": "https://github.com/nordic-institute/X-Road/pull/510#discussion_r432062586", "createdAt": "2020-05-28T19:15:15Z", "author": {"login": "Riippi"}, "path": "src/proxy-ui-api/frontend/src/store/modules/addClient.ts", "diffHunk": "@@ -132,6 +201,81 @@ export const actions: ActionTree<AddClientState, RootState> = {\n       });\n   },\n \n+  createMember({ commit, state }) {\n+    const body = {\n+      client: {\n+        member_class: state.memberClass,\n+        member_code: state.memberCode,\n+      },\n+      ignore_warnings: false,\n+    };\n+\n+    return api.post('/clients', body)\n+      .catch((error) => {\n+        throw error;\n+      });\n+  },\n+\n+  async searchTokens({ commit, dispatch }, { instanceId, memberClass, memberCode }) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTAxODgzOA=="}, "originalCommit": {"oid": "37090653d465500817204c66a484399164f5f4be"}, "originalPosition": 199}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4NDcwMTI3OnYy", "diffSide": "RIGHT", "path": "src/proxy-ui-api/frontend/src/store/modules/addClient.ts", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxMDo0Mjo1OFrOGbDo4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxMzowNTo0OFrOGcbzxw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTAyNDM1NQ==", "bodyText": "checkForValidSignCert may throw an error which would stop executing this thread.", "url": "https://github.com/nordic-institute/X-Road/pull/510#discussion_r431024355", "createdAt": "2020-05-27T10:42:58Z", "author": {"login": "TJaakkola"}, "path": "src/proxy-ui-api/frontend/src/store/modules/addClient.ts", "diffHunk": "@@ -132,6 +201,81 @@ export const actions: ActionTree<AddClientState, RootState> = {\n       });\n   },\n \n+  createMember({ commit, state }) {\n+    const body = {\n+      client: {\n+        member_class: state.memberClass,\n+        member_code: state.memberCode,\n+      },\n+      ignore_warnings: false,\n+    };\n+\n+    return api.post('/clients', body)\n+      .catch((error) => {\n+        throw error;\n+      });\n+  },\n+\n+  async searchTokens({ commit, dispatch }, { instanceId, memberClass, memberCode }) {\n+\n+    const ownerId = createClientId(instanceId, memberClass, memberCode);\n+    const hasValidCert = await checkForValidSignCert(instanceId, memberClass, memberCode);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "37090653d465500817204c66a484399164f5f4be"}, "originalPosition": 202}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjQ2ODkzNQ==", "bodyText": "I removed the whole function", "url": "https://github.com/nordic-institute/X-Road/pull/510#discussion_r432468935", "createdAt": "2020-05-29T13:05:48Z", "author": {"login": "Riippi"}, "path": "src/proxy-ui-api/frontend/src/store/modules/addClient.ts", "diffHunk": "@@ -132,6 +201,81 @@ export const actions: ActionTree<AddClientState, RootState> = {\n       });\n   },\n \n+  createMember({ commit, state }) {\n+    const body = {\n+      client: {\n+        member_class: state.memberClass,\n+        member_code: state.memberCode,\n+      },\n+      ignore_warnings: false,\n+    };\n+\n+    return api.post('/clients', body)\n+      .catch((error) => {\n+        throw error;\n+      });\n+  },\n+\n+  async searchTokens({ commit, dispatch }, { instanceId, memberClass, memberCode }) {\n+\n+    const ownerId = createClientId(instanceId, memberClass, memberCode);\n+    const hasValidCert = await checkForValidSignCert(instanceId, memberClass, memberCode);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTAyNDM1NQ=="}, "originalCommit": {"oid": "37090653d465500817204c66a484399164f5f4be"}, "originalPosition": 202}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4NDcwNzM0OnYy", "diffSide": "RIGHT", "path": "src/proxy-ui-api/frontend/src/store/modules/addClient.ts", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxMDo0NDo0NlrOGbDs1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxMzowNjoyMFrOGcb0_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTAyNTM2NA==", "bodyText": "Actually this return a promise, not true", "url": "https://github.com/nordic-institute/X-Road/pull/510#discussion_r431025364", "createdAt": "2020-05-27T10:44:46Z", "author": {"login": "TJaakkola"}, "path": "src/proxy-ui-api/frontend/src/store/modules/addClient.ts", "diffHunk": "@@ -132,6 +201,81 @@ export const actions: ActionTree<AddClientState, RootState> = {\n       });\n   },\n \n+  createMember({ commit, state }) {\n+    const body = {\n+      client: {\n+        member_class: state.memberClass,\n+        member_code: state.memberCode,\n+      },\n+      ignore_warnings: false,\n+    };\n+\n+    return api.post('/clients', body)\n+      .catch((error) => {\n+        throw error;\n+      });\n+  },\n+\n+  async searchTokens({ commit, dispatch }, { instanceId, memberClass, memberCode }) {\n+\n+    const ownerId = createClientId(instanceId, memberClass, memberCode);\n+    const hasValidCert = await checkForValidSignCert(instanceId, memberClass, memberCode);\n+\n+    if (hasValidCert) {\n+      commit('setAddMemberWizardMode', AddMemberWizardModes.CERTIFICATE_EXISTS);\n+      return;\n+    }\n+\n+    // Fetch tokens from backend\n+    api\n+      .get(`/tokens`)\n+      .then((res) => {\n+\n+        // Find if a token has a sign key with a certificate that has matching client data\n+        res.data.some((token: Token) => {\n+          return token.keys.some((key: Key) => {\n+            if (key.usage === UsageTypes.SIGNING) {\n+\n+              // Go through the keys certificates\n+              const foundCert: boolean = key.certificates.some((certificate: TokenCertificate) => {\n+                if (ownerId === certificate.owner_id) {\n+                  commit('setAddMemberWizardMode', AddMemberWizardModes.CERTIFICATE_EXISTS);\n+                  return true;\n+                }\n+              });\n+\n+              if (foundCert) { return true; }\n+\n+              // Go through the keys CSR:s\n+              key.certificate_signing_requests.some((csr: TokenCertificateSigningRequest) => {\n+                if (ownerId === csr.owner_id) {\n+                  dispatch('setCsrTokenId', token.id);\n+                  commit('setAddMemberWizardMode', AddMemberWizardModes.CSR_EXISTS);\n+                  return true;\n+                }\n+              });\n+            }\n+          });\n+        });\n+      })\n+      .catch((error: Error) => {\n+        throw error;\n+      });\n+\n+  },\n+};\n+\n+const checkForValidSignCert = async (instanceId: string, memberClass: string, memberCode: string): Promise<boolean> => {\n+  // Make a request to backend for a client\n+  // returns true if it has a local valid sign certificate", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "37090653d465500817204c66a484399164f5f4be"}, "originalPosition": 250}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjQ2OTI0NQ==", "bodyText": "I removed the whole function", "url": "https://github.com/nordic-institute/X-Road/pull/510#discussion_r432469245", "createdAt": "2020-05-29T13:06:20Z", "author": {"login": "Riippi"}, "path": "src/proxy-ui-api/frontend/src/store/modules/addClient.ts", "diffHunk": "@@ -132,6 +201,81 @@ export const actions: ActionTree<AddClientState, RootState> = {\n       });\n   },\n \n+  createMember({ commit, state }) {\n+    const body = {\n+      client: {\n+        member_class: state.memberClass,\n+        member_code: state.memberCode,\n+      },\n+      ignore_warnings: false,\n+    };\n+\n+    return api.post('/clients', body)\n+      .catch((error) => {\n+        throw error;\n+      });\n+  },\n+\n+  async searchTokens({ commit, dispatch }, { instanceId, memberClass, memberCode }) {\n+\n+    const ownerId = createClientId(instanceId, memberClass, memberCode);\n+    const hasValidCert = await checkForValidSignCert(instanceId, memberClass, memberCode);\n+\n+    if (hasValidCert) {\n+      commit('setAddMemberWizardMode', AddMemberWizardModes.CERTIFICATE_EXISTS);\n+      return;\n+    }\n+\n+    // Fetch tokens from backend\n+    api\n+      .get(`/tokens`)\n+      .then((res) => {\n+\n+        // Find if a token has a sign key with a certificate that has matching client data\n+        res.data.some((token: Token) => {\n+          return token.keys.some((key: Key) => {\n+            if (key.usage === UsageTypes.SIGNING) {\n+\n+              // Go through the keys certificates\n+              const foundCert: boolean = key.certificates.some((certificate: TokenCertificate) => {\n+                if (ownerId === certificate.owner_id) {\n+                  commit('setAddMemberWizardMode', AddMemberWizardModes.CERTIFICATE_EXISTS);\n+                  return true;\n+                }\n+              });\n+\n+              if (foundCert) { return true; }\n+\n+              // Go through the keys CSR:s\n+              key.certificate_signing_requests.some((csr: TokenCertificateSigningRequest) => {\n+                if (ownerId === csr.owner_id) {\n+                  dispatch('setCsrTokenId', token.id);\n+                  commit('setAddMemberWizardMode', AddMemberWizardModes.CSR_EXISTS);\n+                  return true;\n+                }\n+              });\n+            }\n+          });\n+        });\n+      })\n+      .catch((error: Error) => {\n+        throw error;\n+      });\n+\n+  },\n+};\n+\n+const checkForValidSignCert = async (instanceId: string, memberClass: string, memberCode: string): Promise<boolean> => {\n+  // Make a request to backend for a client\n+  // returns true if it has a local valid sign certificate", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTAyNTM2NA=="}, "originalCommit": {"oid": "37090653d465500817204c66a484399164f5f4be"}, "originalPosition": 250}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4NDc0NzE4OnYy", "diffSide": "RIGHT", "path": "src/proxy-ui-api/frontend/src/store/modules/clients.ts", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxMDo1ODowNlrOGbEGeQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxMzo1NDowOVrOGcdlPQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTAzMTkyOQ==", "bodyText": "A shorter way for this:\nconst memberAlreadyExists = members.find((member: ExtendedClient) => member.member_class === element.member_class && member.member_code === element.member_code && member.instance_id === element.instance_id)\nperhaps you could also use destructuring in the lambda parameters to not have to use that 'member.' multiple times.", "url": "https://github.com/nordic-institute/X-Road/pull/510#discussion_r431031929", "createdAt": "2020-05-27T10:58:06Z", "author": {"login": "TJaakkola"}, "path": "src/proxy-ui-api/frontend/src/store/modules/clients.ts", "diffHunk": "@@ -2,103 +2,151 @@ import axios from 'axios';\n import { cloneDeep } from 'lodash';\n import { ActionTree, GetterTree, Module, MutationTree } from 'vuex';\n import { RootState } from '../types';\n+import { Client } from '@/types';\n+import { createClientId } from '@/util/helpers';\n+import { ExtendedClient } from '@/ui-types';\n+import { ClientTypes } from '@/global';\n import i18n from './../../i18n';\n \n-export interface Client {\n-  id: string;\n-  name?: string | null;\n-  sortNameAsc?: string | null;\n-  sortNameDesc?: string | null;\n-  member_name: string | null;\n-  member_class: string;\n-  member_code: string;\n-  subsystem_code: string | null;\n-  created?: string | null;\n-  type?: string;\n-  status?: string;\n-  owner: boolean;\n-}\n-\n export interface ClientsState {\n   clients: Client[];\n-  loading: boolean;\n+  formattedClients: ExtendedClient[];\n+  clientsLoading: boolean;\n   localMembers: Client[];\n+  ownerMember: Client |\u00a0undefined;\n+  members: ExtendedClient[]; // all local members, virtual and real\n+  realMembers: ExtendedClient[]; // local actual real members, owner +1\n+  virtualMembers: ExtendedClient[]; // local \"virtual\" members, generated from subsystem data\n+  subsystems: ExtendedClient[];\n }\n \n export const clientsState: ClientsState = {\n   clients: [],\n-  loading: false,\n+  formattedClients: [],\n+  clientsLoading: false,\n   localMembers: [],\n+  ownerMember: undefined,\n+  members: [],\n+  subsystems: [],\n+  realMembers: [],\n+  virtualMembers: [],\n };\n \n function createSortName(client: Client, sortName: string): any {\n   // Create a sort id for client in form  \"ACMEGOV:1234 MANAGEMENT\"\n   return sortName + client.member_class + client.member_code + ' ' + client.subsystem_code;\n }\n \n-function createMemberAscSortName(client: Client, sortName: string | null): any {\n+function createMemberAscSortName(client: Client, sortName: string | undefined): any {\n   // Create a sort id for member in form  \"ACMEGOV:1234\"\n   return sortName + client.member_class + client.member_code;\n }\n \n-function createMemberDescSortName(client: Client, sortName: any): any {\n+function createMemberDescSortName(client: Client, sortName: string | undefined): any {\n   // Create a sort id for member in form  \"ACMEGOV:1234!\"\n   return sortName + client.member_class + client.member_code + '!';\n }\n \n export const getters: GetterTree<ClientsState, RootState> = {\n-  clients(state): Client[] {\n+  clients(state): ExtendedClient[] {\n+    return state.formattedClients;\n+  },\n+\n+  realMembers(state): ExtendedClient[] {\n+    return state.realMembers;\n+  },\n+\n+  localMembers(state): Client[] {\n+    return state.localMembers;\n+  },\n+\n+  localMembersIds(state): Client[] {\n+    return state.localMembers;\n+  },\n+\n+  clientsLoading(state): boolean {\n+    return state.clientsLoading;\n+  },\n+\n+  ownerMember(state): Client |\u00a0undefined {\n+    return state.ownerMember;\n+  },\n+\n+};\n+\n+export const mutations: MutationTree<ClientsState> = {\n+  storeClients(state, clients: Client[]) {\n+    state.clients = clients;\n+\n     // New arrays to separate members and subsystems\n-    const members: Client[] = [];\n-    const subsystems: Client[] = [];\n+    const realMembers: ExtendedClient[] = [];\n+    const members: ExtendedClient[] = [];\n+    const virtualMembers: ExtendedClient[] = [];\n+    const subsystems: ExtendedClient[] = [];\n     const UNKNOWN_NAME: string = i18n.t('client.unknownMember') as string;\n \n-    // Find the owner member (there is only one)\n-    state.clients.forEach((element, index) => {\n-      if (element.owner === true) {\n-        const clone = cloneDeep(element);\n-        clone.type = 'owner';\n-        clone.subsystem_code = null;\n-        clone.name = clone.member_name;\n+    // Find members. Owner member (there is only one) and possible other member\n+    state.clients.forEach((element: Client) => {\n+\n+      if (!element.subsystem_code) {\n+        const clone = cloneDeep(element) as ExtendedClient;\n+        clone.type = ClientTypes.OWNER_MEMBER;\n+        clone.subsystem_code = undefined;\n+        clone.visibleName = clone.member_name;\n         clone.sortNameAsc = createMemberAscSortName(clone, clone.member_name); // clone.member_name + clone.member_class + clone.member_code;\n         clone.sortNameDesc = createMemberDescSortName(clone, clone.member_name); // clone.member_name + clone.member_class + clone.member_code + '!';\n+\n+        if (element.owner) {\n+          clone.type = ClientTypes.OWNER_MEMBER;\n+          state.ownerMember = element;\n+        } else {\n+          clone.type = ClientTypes.MEMBER;\n+        }\n+\n+        realMembers.push(clone);\n         members.push(clone);\n-        return;\n       }\n     });\n \n     // Pick out the members\n     state.clients.forEach((element) => {\n       // Check if the member is already in the members array\n-      const memberAlreadyExists = members.find((value, index) => {\n-        const cli = value as Client;\n-\n-        // Compare member class and member code\n-        if (cli.member_class === element.member_class && cli.member_code === element.member_code) {\n+      const memberAlreadyExists = members.find((member: ExtendedClient) => {\n+        // Compare member class, member code and instance id\n+        if (member.member_class === element.member_class && member.member_code === element.member_code\n+          && member.instance_id === element.instance_id) {\n           return true;\n         }\n \n         return false;\n       });", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "37090653d465500817204c66a484399164f5f4be"}, "originalPosition": 156}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjQ5Nzk4MQ==", "bodyText": "Fixed", "url": "https://github.com/nordic-institute/X-Road/pull/510#discussion_r432497981", "createdAt": "2020-05-29T13:54:09Z", "author": {"login": "Riippi"}, "path": "src/proxy-ui-api/frontend/src/store/modules/clients.ts", "diffHunk": "@@ -2,103 +2,151 @@ import axios from 'axios';\n import { cloneDeep } from 'lodash';\n import { ActionTree, GetterTree, Module, MutationTree } from 'vuex';\n import { RootState } from '../types';\n+import { Client } from '@/types';\n+import { createClientId } from '@/util/helpers';\n+import { ExtendedClient } from '@/ui-types';\n+import { ClientTypes } from '@/global';\n import i18n from './../../i18n';\n \n-export interface Client {\n-  id: string;\n-  name?: string | null;\n-  sortNameAsc?: string | null;\n-  sortNameDesc?: string | null;\n-  member_name: string | null;\n-  member_class: string;\n-  member_code: string;\n-  subsystem_code: string | null;\n-  created?: string | null;\n-  type?: string;\n-  status?: string;\n-  owner: boolean;\n-}\n-\n export interface ClientsState {\n   clients: Client[];\n-  loading: boolean;\n+  formattedClients: ExtendedClient[];\n+  clientsLoading: boolean;\n   localMembers: Client[];\n+  ownerMember: Client |\u00a0undefined;\n+  members: ExtendedClient[]; // all local members, virtual and real\n+  realMembers: ExtendedClient[]; // local actual real members, owner +1\n+  virtualMembers: ExtendedClient[]; // local \"virtual\" members, generated from subsystem data\n+  subsystems: ExtendedClient[];\n }\n \n export const clientsState: ClientsState = {\n   clients: [],\n-  loading: false,\n+  formattedClients: [],\n+  clientsLoading: false,\n   localMembers: [],\n+  ownerMember: undefined,\n+  members: [],\n+  subsystems: [],\n+  realMembers: [],\n+  virtualMembers: [],\n };\n \n function createSortName(client: Client, sortName: string): any {\n   // Create a sort id for client in form  \"ACMEGOV:1234 MANAGEMENT\"\n   return sortName + client.member_class + client.member_code + ' ' + client.subsystem_code;\n }\n \n-function createMemberAscSortName(client: Client, sortName: string | null): any {\n+function createMemberAscSortName(client: Client, sortName: string | undefined): any {\n   // Create a sort id for member in form  \"ACMEGOV:1234\"\n   return sortName + client.member_class + client.member_code;\n }\n \n-function createMemberDescSortName(client: Client, sortName: any): any {\n+function createMemberDescSortName(client: Client, sortName: string | undefined): any {\n   // Create a sort id for member in form  \"ACMEGOV:1234!\"\n   return sortName + client.member_class + client.member_code + '!';\n }\n \n export const getters: GetterTree<ClientsState, RootState> = {\n-  clients(state): Client[] {\n+  clients(state): ExtendedClient[] {\n+    return state.formattedClients;\n+  },\n+\n+  realMembers(state): ExtendedClient[] {\n+    return state.realMembers;\n+  },\n+\n+  localMembers(state): Client[] {\n+    return state.localMembers;\n+  },\n+\n+  localMembersIds(state): Client[] {\n+    return state.localMembers;\n+  },\n+\n+  clientsLoading(state): boolean {\n+    return state.clientsLoading;\n+  },\n+\n+  ownerMember(state): Client |\u00a0undefined {\n+    return state.ownerMember;\n+  },\n+\n+};\n+\n+export const mutations: MutationTree<ClientsState> = {\n+  storeClients(state, clients: Client[]) {\n+    state.clients = clients;\n+\n     // New arrays to separate members and subsystems\n-    const members: Client[] = [];\n-    const subsystems: Client[] = [];\n+    const realMembers: ExtendedClient[] = [];\n+    const members: ExtendedClient[] = [];\n+    const virtualMembers: ExtendedClient[] = [];\n+    const subsystems: ExtendedClient[] = [];\n     const UNKNOWN_NAME: string = i18n.t('client.unknownMember') as string;\n \n-    // Find the owner member (there is only one)\n-    state.clients.forEach((element, index) => {\n-      if (element.owner === true) {\n-        const clone = cloneDeep(element);\n-        clone.type = 'owner';\n-        clone.subsystem_code = null;\n-        clone.name = clone.member_name;\n+    // Find members. Owner member (there is only one) and possible other member\n+    state.clients.forEach((element: Client) => {\n+\n+      if (!element.subsystem_code) {\n+        const clone = cloneDeep(element) as ExtendedClient;\n+        clone.type = ClientTypes.OWNER_MEMBER;\n+        clone.subsystem_code = undefined;\n+        clone.visibleName = clone.member_name;\n         clone.sortNameAsc = createMemberAscSortName(clone, clone.member_name); // clone.member_name + clone.member_class + clone.member_code;\n         clone.sortNameDesc = createMemberDescSortName(clone, clone.member_name); // clone.member_name + clone.member_class + clone.member_code + '!';\n+\n+        if (element.owner) {\n+          clone.type = ClientTypes.OWNER_MEMBER;\n+          state.ownerMember = element;\n+        } else {\n+          clone.type = ClientTypes.MEMBER;\n+        }\n+\n+        realMembers.push(clone);\n         members.push(clone);\n-        return;\n       }\n     });\n \n     // Pick out the members\n     state.clients.forEach((element) => {\n       // Check if the member is already in the members array\n-      const memberAlreadyExists = members.find((value, index) => {\n-        const cli = value as Client;\n-\n-        // Compare member class and member code\n-        if (cli.member_class === element.member_class && cli.member_code === element.member_code) {\n+      const memberAlreadyExists = members.find((member: ExtendedClient) => {\n+        // Compare member class, member code and instance id\n+        if (member.member_class === element.member_class && member.member_code === element.member_code\n+          && member.instance_id === element.instance_id) {\n           return true;\n         }\n \n         return false;\n       });", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTAzMTkyOQ=="}, "originalCommit": {"oid": "37090653d465500817204c66a484399164f5f4be"}, "originalPosition": 156}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4NDc1NzAzOnYy", "diffSide": "RIGHT", "path": "src/proxy-ui-api/frontend/src/store/modules/clients.ts", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxMTowMToxNVrOGbEMmw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxMzo1NDowMlrOGcdk5Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTAzMzQ5OQ==", "bodyText": "I think using lodash cloneDeep should be avoided as there is task for getting rid of lodash", "url": "https://github.com/nordic-institute/X-Road/pull/510#discussion_r431033499", "createdAt": "2020-05-27T11:01:15Z", "author": {"login": "TJaakkola"}, "path": "src/proxy-ui-api/frontend/src/store/modules/clients.ts", "diffHunk": "@@ -2,103 +2,151 @@ import axios from 'axios';\n import { cloneDeep } from 'lodash';\n import { ActionTree, GetterTree, Module, MutationTree } from 'vuex';\n import { RootState } from '../types';\n+import { Client } from '@/types';\n+import { createClientId } from '@/util/helpers';\n+import { ExtendedClient } from '@/ui-types';\n+import { ClientTypes } from '@/global';\n import i18n from './../../i18n';\n \n-export interface Client {\n-  id: string;\n-  name?: string | null;\n-  sortNameAsc?: string | null;\n-  sortNameDesc?: string | null;\n-  member_name: string | null;\n-  member_class: string;\n-  member_code: string;\n-  subsystem_code: string | null;\n-  created?: string | null;\n-  type?: string;\n-  status?: string;\n-  owner: boolean;\n-}\n-\n export interface ClientsState {\n   clients: Client[];\n-  loading: boolean;\n+  formattedClients: ExtendedClient[];\n+  clientsLoading: boolean;\n   localMembers: Client[];\n+  ownerMember: Client |\u00a0undefined;\n+  members: ExtendedClient[]; // all local members, virtual and real\n+  realMembers: ExtendedClient[]; // local actual real members, owner +1\n+  virtualMembers: ExtendedClient[]; // local \"virtual\" members, generated from subsystem data\n+  subsystems: ExtendedClient[];\n }\n \n export const clientsState: ClientsState = {\n   clients: [],\n-  loading: false,\n+  formattedClients: [],\n+  clientsLoading: false,\n   localMembers: [],\n+  ownerMember: undefined,\n+  members: [],\n+  subsystems: [],\n+  realMembers: [],\n+  virtualMembers: [],\n };\n \n function createSortName(client: Client, sortName: string): any {\n   // Create a sort id for client in form  \"ACMEGOV:1234 MANAGEMENT\"\n   return sortName + client.member_class + client.member_code + ' ' + client.subsystem_code;\n }\n \n-function createMemberAscSortName(client: Client, sortName: string | null): any {\n+function createMemberAscSortName(client: Client, sortName: string | undefined): any {\n   // Create a sort id for member in form  \"ACMEGOV:1234\"\n   return sortName + client.member_class + client.member_code;\n }\n \n-function createMemberDescSortName(client: Client, sortName: any): any {\n+function createMemberDescSortName(client: Client, sortName: string | undefined): any {\n   // Create a sort id for member in form  \"ACMEGOV:1234!\"\n   return sortName + client.member_class + client.member_code + '!';\n }\n \n export const getters: GetterTree<ClientsState, RootState> = {\n-  clients(state): Client[] {\n+  clients(state): ExtendedClient[] {\n+    return state.formattedClients;\n+  },\n+\n+  realMembers(state): ExtendedClient[] {\n+    return state.realMembers;\n+  },\n+\n+  localMembers(state): Client[] {\n+    return state.localMembers;\n+  },\n+\n+  localMembersIds(state): Client[] {\n+    return state.localMembers;\n+  },\n+\n+  clientsLoading(state): boolean {\n+    return state.clientsLoading;\n+  },\n+\n+  ownerMember(state): Client |\u00a0undefined {\n+    return state.ownerMember;\n+  },\n+\n+};\n+\n+export const mutations: MutationTree<ClientsState> = {\n+  storeClients(state, clients: Client[]) {\n+    state.clients = clients;\n+\n     // New arrays to separate members and subsystems\n-    const members: Client[] = [];\n-    const subsystems: Client[] = [];\n+    const realMembers: ExtendedClient[] = [];\n+    const members: ExtendedClient[] = [];\n+    const virtualMembers: ExtendedClient[] = [];\n+    const subsystems: ExtendedClient[] = [];\n     const UNKNOWN_NAME: string = i18n.t('client.unknownMember') as string;\n \n-    // Find the owner member (there is only one)\n-    state.clients.forEach((element, index) => {\n-      if (element.owner === true) {\n-        const clone = cloneDeep(element);\n-        clone.type = 'owner';\n-        clone.subsystem_code = null;\n-        clone.name = clone.member_name;\n+    // Find members. Owner member (there is only one) and possible other member\n+    state.clients.forEach((element: Client) => {\n+\n+      if (!element.subsystem_code) {\n+        const clone = cloneDeep(element) as ExtendedClient;\n+        clone.type = ClientTypes.OWNER_MEMBER;\n+        clone.subsystem_code = undefined;\n+        clone.visibleName = clone.member_name;\n         clone.sortNameAsc = createMemberAscSortName(clone, clone.member_name); // clone.member_name + clone.member_class + clone.member_code;\n         clone.sortNameDesc = createMemberDescSortName(clone, clone.member_name); // clone.member_name + clone.member_class + clone.member_code + '!';\n+\n+        if (element.owner) {\n+          clone.type = ClientTypes.OWNER_MEMBER;\n+          state.ownerMember = element;\n+        } else {\n+          clone.type = ClientTypes.MEMBER;\n+        }\n+\n+        realMembers.push(clone);\n         members.push(clone);\n-        return;\n       }\n     });\n \n     // Pick out the members\n     state.clients.forEach((element) => {\n       // Check if the member is already in the members array\n-      const memberAlreadyExists = members.find((value, index) => {\n-        const cli = value as Client;\n-\n-        // Compare member class and member code\n-        if (cli.member_class === element.member_class && cli.member_code === element.member_code) {\n+      const memberAlreadyExists = members.find((member: ExtendedClient) => {\n+        // Compare member class, member code and instance id\n+        if (member.member_class === element.member_class && member.member_code === element.member_code\n+          && member.instance_id === element.instance_id) {\n           return true;\n         }\n \n         return false;\n       });\n \n       if (!memberAlreadyExists) {\n-        // If member is not in members array, create and add it\n-        const clone = cloneDeep(element);\n-        clone.type = 'client';\n+        // If \"virtual member\" is not in members array, create and add it\n+        const clone = cloneDeep(element) as any;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "37090653d465500817204c66a484399164f5f4be"}, "originalPosition": 163}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjQ5Nzg5Mw==", "bodyText": "Fixed", "url": "https://github.com/nordic-institute/X-Road/pull/510#discussion_r432497893", "createdAt": "2020-05-29T13:54:02Z", "author": {"login": "Riippi"}, "path": "src/proxy-ui-api/frontend/src/store/modules/clients.ts", "diffHunk": "@@ -2,103 +2,151 @@ import axios from 'axios';\n import { cloneDeep } from 'lodash';\n import { ActionTree, GetterTree, Module, MutationTree } from 'vuex';\n import { RootState } from '../types';\n+import { Client } from '@/types';\n+import { createClientId } from '@/util/helpers';\n+import { ExtendedClient } from '@/ui-types';\n+import { ClientTypes } from '@/global';\n import i18n from './../../i18n';\n \n-export interface Client {\n-  id: string;\n-  name?: string | null;\n-  sortNameAsc?: string | null;\n-  sortNameDesc?: string | null;\n-  member_name: string | null;\n-  member_class: string;\n-  member_code: string;\n-  subsystem_code: string | null;\n-  created?: string | null;\n-  type?: string;\n-  status?: string;\n-  owner: boolean;\n-}\n-\n export interface ClientsState {\n   clients: Client[];\n-  loading: boolean;\n+  formattedClients: ExtendedClient[];\n+  clientsLoading: boolean;\n   localMembers: Client[];\n+  ownerMember: Client |\u00a0undefined;\n+  members: ExtendedClient[]; // all local members, virtual and real\n+  realMembers: ExtendedClient[]; // local actual real members, owner +1\n+  virtualMembers: ExtendedClient[]; // local \"virtual\" members, generated from subsystem data\n+  subsystems: ExtendedClient[];\n }\n \n export const clientsState: ClientsState = {\n   clients: [],\n-  loading: false,\n+  formattedClients: [],\n+  clientsLoading: false,\n   localMembers: [],\n+  ownerMember: undefined,\n+  members: [],\n+  subsystems: [],\n+  realMembers: [],\n+  virtualMembers: [],\n };\n \n function createSortName(client: Client, sortName: string): any {\n   // Create a sort id for client in form  \"ACMEGOV:1234 MANAGEMENT\"\n   return sortName + client.member_class + client.member_code + ' ' + client.subsystem_code;\n }\n \n-function createMemberAscSortName(client: Client, sortName: string | null): any {\n+function createMemberAscSortName(client: Client, sortName: string | undefined): any {\n   // Create a sort id for member in form  \"ACMEGOV:1234\"\n   return sortName + client.member_class + client.member_code;\n }\n \n-function createMemberDescSortName(client: Client, sortName: any): any {\n+function createMemberDescSortName(client: Client, sortName: string | undefined): any {\n   // Create a sort id for member in form  \"ACMEGOV:1234!\"\n   return sortName + client.member_class + client.member_code + '!';\n }\n \n export const getters: GetterTree<ClientsState, RootState> = {\n-  clients(state): Client[] {\n+  clients(state): ExtendedClient[] {\n+    return state.formattedClients;\n+  },\n+\n+  realMembers(state): ExtendedClient[] {\n+    return state.realMembers;\n+  },\n+\n+  localMembers(state): Client[] {\n+    return state.localMembers;\n+  },\n+\n+  localMembersIds(state): Client[] {\n+    return state.localMembers;\n+  },\n+\n+  clientsLoading(state): boolean {\n+    return state.clientsLoading;\n+  },\n+\n+  ownerMember(state): Client |\u00a0undefined {\n+    return state.ownerMember;\n+  },\n+\n+};\n+\n+export const mutations: MutationTree<ClientsState> = {\n+  storeClients(state, clients: Client[]) {\n+    state.clients = clients;\n+\n     // New arrays to separate members and subsystems\n-    const members: Client[] = [];\n-    const subsystems: Client[] = [];\n+    const realMembers: ExtendedClient[] = [];\n+    const members: ExtendedClient[] = [];\n+    const virtualMembers: ExtendedClient[] = [];\n+    const subsystems: ExtendedClient[] = [];\n     const UNKNOWN_NAME: string = i18n.t('client.unknownMember') as string;\n \n-    // Find the owner member (there is only one)\n-    state.clients.forEach((element, index) => {\n-      if (element.owner === true) {\n-        const clone = cloneDeep(element);\n-        clone.type = 'owner';\n-        clone.subsystem_code = null;\n-        clone.name = clone.member_name;\n+    // Find members. Owner member (there is only one) and possible other member\n+    state.clients.forEach((element: Client) => {\n+\n+      if (!element.subsystem_code) {\n+        const clone = cloneDeep(element) as ExtendedClient;\n+        clone.type = ClientTypes.OWNER_MEMBER;\n+        clone.subsystem_code = undefined;\n+        clone.visibleName = clone.member_name;\n         clone.sortNameAsc = createMemberAscSortName(clone, clone.member_name); // clone.member_name + clone.member_class + clone.member_code;\n         clone.sortNameDesc = createMemberDescSortName(clone, clone.member_name); // clone.member_name + clone.member_class + clone.member_code + '!';\n+\n+        if (element.owner) {\n+          clone.type = ClientTypes.OWNER_MEMBER;\n+          state.ownerMember = element;\n+        } else {\n+          clone.type = ClientTypes.MEMBER;\n+        }\n+\n+        realMembers.push(clone);\n         members.push(clone);\n-        return;\n       }\n     });\n \n     // Pick out the members\n     state.clients.forEach((element) => {\n       // Check if the member is already in the members array\n-      const memberAlreadyExists = members.find((value, index) => {\n-        const cli = value as Client;\n-\n-        // Compare member class and member code\n-        if (cli.member_class === element.member_class && cli.member_code === element.member_code) {\n+      const memberAlreadyExists = members.find((member: ExtendedClient) => {\n+        // Compare member class, member code and instance id\n+        if (member.member_class === element.member_class && member.member_code === element.member_code\n+          && member.instance_id === element.instance_id) {\n           return true;\n         }\n \n         return false;\n       });\n \n       if (!memberAlreadyExists) {\n-        // If member is not in members array, create and add it\n-        const clone = cloneDeep(element);\n-        clone.type = 'client';\n+        // If \"virtual member\" is not in members array, create and add it\n+        const clone = cloneDeep(element) as any;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTAzMzQ5OQ=="}, "originalCommit": {"oid": "37090653d465500817204c66a484399164f5f4be"}, "originalPosition": 163}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4NDc2MTc2OnYy", "diffSide": "RIGHT", "path": "src/proxy-ui-api/frontend/src/store/modules/user.ts", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxMTowMjo1N1rOGbEPtQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxMzo1OTowOFrOGcdxMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTAzNDI5Mw==", "bodyText": "Should this be removed?", "url": "https://github.com/nordic-institute/X-Road/pull/510#discussion_r431034293", "createdAt": "2020-05-27T11:02:57Z", "author": {"login": "TJaakkola"}, "path": "src/proxy-ui-api/frontend/src/store/modules/user.ts", "diffHunk": "@@ -108,15 +108,11 @@ export const actions: ActionTree<UserState, RootState> = {\n   },\n \n   async fetchUserData({ commit, dispatch }) {\n-\n-    commit('setLoading', true);\n-\n     return axios.get('/user')\n       .then((res) => {\n         console.log(res);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "37090653d465500817204c66a484399164f5f4be"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjUwMTA0MQ==", "bodyText": "Yes, that was probably there because of some old copy paste accident.", "url": "https://github.com/nordic-institute/X-Road/pull/510#discussion_r432501041", "createdAt": "2020-05-29T13:59:08Z", "author": {"login": "Riippi"}, "path": "src/proxy-ui-api/frontend/src/store/modules/user.ts", "diffHunk": "@@ -108,15 +108,11 @@ export const actions: ActionTree<UserState, RootState> = {\n   },\n \n   async fetchUserData({ commit, dispatch }) {\n-\n-    commit('setLoading', true);\n-\n     return axios.get('/user')\n       .then((res) => {\n         console.log(res);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTAzNDI5Mw=="}, "originalCommit": {"oid": "37090653d465500817204c66a484399164f5f4be"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4NDc2Njc5OnYy", "diffSide": "RIGHT", "path": "src/proxy-ui-api/frontend/src/util/helpers.ts", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxMTowNDo0OVrOGbES-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxNDowMjoyMFrOGcd42A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTAzNTEzMA==", "bodyText": "Shouldn't use lodash if possible", "url": "https://github.com/nordic-institute/X-Road/pull/510#discussion_r431035130", "createdAt": "2020-05-27T11:04:49Z", "author": {"login": "TJaakkola"}, "path": "src/proxy-ui-api/frontend/src/util/helpers.ts", "diffHunk": "@@ -1,4 +1,5 @@\n import { Client } from '@/types';\n+import { cloneDeep } from 'lodash';", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "37090653d465500817204c66a484399164f5f4be"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjUwMzAwMA==", "bodyText": "Fixed", "url": "https://github.com/nordic-institute/X-Road/pull/510#discussion_r432503000", "createdAt": "2020-05-29T14:02:20Z", "author": {"login": "Riippi"}, "path": "src/proxy-ui-api/frontend/src/util/helpers.ts", "diffHunk": "@@ -1,4 +1,5 @@\n import { Client } from '@/types';\n+import { cloneDeep } from 'lodash';", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTAzNTEzMA=="}, "originalCommit": {"oid": "37090653d465500817204c66a484399164f5f4be"}, "originalPosition": 2}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4NDc4Mzc1OnYy", "diffSide": "RIGHT", "path": "src/proxy-ui-api/frontend/src/views/AddClient/ClientDetailsPage.vue", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxMToxMDoxNFrOGbEd7A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxNDowNzoyNFrOGceEmw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTAzNzkzMg==", "bodyText": "optional chaining or not using if block like above", "url": "https://github.com/nordic-institute/X-Road/pull/510#discussion_r431037932", "createdAt": "2020-05-27T11:10:14Z", "author": {"login": "TJaakkola"}, "path": "src/proxy-ui-api/frontend/src/views/AddClient/ClientDetailsPage.vue", "diffHunk": "@@ -175,6 +176,16 @@ export default Vue.extend({\n   },\n   created() {\n     this.$store.dispatch('fetchSelectableClients');\n+    this.$store.dispatch('fetchMemberClasses');\n+  },\n+\n+  watch: {\n+    memberClasses(val) {\n+      // Set first member class selected as default when the list is updated\n+      if (val && val.length === 1) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "37090653d465500817204c66a484399164f5f4be"}, "originalPosition": 83}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjUwNjAxMQ==", "bodyText": "Fixed", "url": "https://github.com/nordic-institute/X-Road/pull/510#discussion_r432506011", "createdAt": "2020-05-29T14:07:24Z", "author": {"login": "Riippi"}, "path": "src/proxy-ui-api/frontend/src/views/AddClient/ClientDetailsPage.vue", "diffHunk": "@@ -175,6 +176,16 @@ export default Vue.extend({\n   },\n   created() {\n     this.$store.dispatch('fetchSelectableClients');\n+    this.$store.dispatch('fetchMemberClasses');\n+  },\n+\n+  watch: {\n+    memberClasses(val) {\n+      // Set first member class selected as default when the list is updated\n+      if (val && val.length === 1) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTAzNzkzMg=="}, "originalCommit": {"oid": "37090653d465500817204c66a484399164f5f4be"}, "originalPosition": 83}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4NDc4NjI2OnYy", "diffSide": "RIGHT", "path": "src/proxy-ui-api/frontend/src/views/AddMember/AddMember.vue", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxMToxMToxNFrOGbEfpA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxNDoxMDowN1rOGceLQA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTAzODM3Mg==", "bodyText": "typings missing", "url": "https://github.com/nordic-institute/X-Road/pull/510#discussion_r431038372", "createdAt": "2020-05-27T11:11:14Z", "author": {"login": "TJaakkola"}, "path": "src/proxy-ui-api/frontend/src/views/AddMember/AddMember.vue", "diffHunk": "@@ -0,0 +1,297 @@\n+\n+<template>\n+  <div class=\"view-wrap\">\n+    <subViewTitle\n+      class=\"view-title\"\n+      :title=\"$t('wizard.addMemberTitle')\"\n+      :showClose=\"false\"\n+      data-test=\"wizard-title\"\n+    />\n+\n+    <v-stepper :alt-labels=\"true\" v-model=\"currentStep\" class=\"stepper noshadow\">\n+      <template v-if=\"addMemberWizardMode === wizardModes.FULL\">\n+        <v-stepper-header class=\"noshadow\">\n+          <v-stepper-step :complete=\"currentStep > 1\" step=\"1\">{{$t('wizard.member.title')}}</v-stepper-step>\n+          <v-divider></v-divider>\n+          <v-stepper-step :complete=\"currentStep > 2\" step=\"2\">{{$t('wizard.token.title')}}</v-stepper-step>\n+          <v-divider></v-divider>\n+          <v-stepper-step :complete=\"currentStep > 3\" step=\"3\">{{$t('wizard.signKey.title')}}</v-stepper-step>\n+          <v-divider></v-divider>\n+          <v-stepper-step :complete=\"currentStep > 4\" step=\"4\">{{$t('csr.csrDetails')}}</v-stepper-step>\n+          <v-divider></v-divider>\n+          <v-stepper-step :complete=\"currentStep > 5\" step=\"5\">{{$t('csr.generateCsr')}}</v-stepper-step>\n+          <v-divider></v-divider>\n+          <v-stepper-step step=\"6\">{{$t('wizard.finish.title')}}</v-stepper-step>\n+        </v-stepper-header>\n+      </template>\n+\n+      <template v-if=\"addMemberWizardMode === wizardModes.CERTIFICATE_EXISTS\">\n+        <v-stepper-header class=\"noshadow\">\n+          <v-stepper-step :complete=\"currentStep > 1\" step=\"1\">{{$t('wizard.member.title')}}</v-stepper-step>\n+          <v-divider></v-divider>\n+          <v-stepper-step step=\"2\">{{$t('wizard.finish.title')}}</v-stepper-step>\n+        </v-stepper-header>\n+      </template>\n+\n+      <template v-if=\"addMemberWizardMode === wizardModes.CSR_EXISTS\">\n+        <v-stepper-header class=\"noshadow\">\n+          <v-stepper-step :complete=\"currentStep > 1\" step=\"1\">{{$t('wizard.member.title')}}</v-stepper-step>\n+          <v-divider></v-divider>\n+          <v-stepper-step :complete=\"currentStep > 2\" step=\"2\">{{$t('csr.csrDetails')}}</v-stepper-step>\n+          <v-divider></v-divider>\n+          <v-stepper-step :complete=\"currentStep > 3\" step=\"3\">{{$t('csr.generateCsr')}}</v-stepper-step>\n+          <v-divider></v-divider>\n+          <v-stepper-step step=\"4\">{{$t('wizard.finish.title')}}</v-stepper-step>\n+        </v-stepper-header>\n+      </template>\n+\n+      <v-stepper-items class=\"stepper-content\">\n+        <!-- Step 1 -->\n+        <v-stepper-content step=\"1\">\n+          <MemberDetailsPage @cancel=\"cancel\" @done=\"currentStep++\" />\n+        </v-stepper-content>\n+        <!-- Step 2 -->\n+        <v-stepper-content :step=\"tokenPageNumber\">\n+          <TokenPage @cancel=\"cancel\" @previous=\"previousPage\" @done=\"tokenReady\" />\n+        </v-stepper-content>\n+        <!-- Step 3 -->\n+        <v-stepper-content :step=\"keyPageNumber\">\n+          <SignKeyPage @cancel=\"cancel\" @previous=\"previousPage\" @done=\"currentStep++\" />\n+        </v-stepper-content>\n+        <!-- Step 4 -->\n+        <v-stepper-content :step=\"csrDetailsPageNumber\">\n+          <CsrDetailsPageLocked\n+            @cancel=\"cancel\"\n+            @previous=\"previousPage\"\n+            @done=\"csrDetailsReady\"\n+            saveButtonText=\"action.next\"\n+          />\n+        </v-stepper-content>\n+        <!-- Step 5 -->\n+        <v-stepper-content :step=\"csrGeneratePageNumber\">\n+          <GenerateCsrPage\n+            @cancel=\"cancel\"\n+            @previous=\"previousPage\"\n+            @done=\"currentStep++\"\n+            saveButtonText=\"action.next\"\n+          />\n+        </v-stepper-content>\n+        <!-- Step 6 -->\n+        <v-stepper-content :step=\"finishPageNumber\">\n+          <FinishPage @cancel=\"cancel\" @previous=\"previousPage\" @done=\"done\" />\n+        </v-stepper-content>\n+      </v-stepper-items>\n+    </v-stepper>\n+  </div>\n+</template>\n+\n+<script lang=\"ts\">\n+import Vue from 'vue';\n+import { mapGetters } from 'vuex';\n+import HelpIcon from '@/components/ui/HelpIcon.vue';\n+import LargeButton from '@/components/ui/LargeButton.vue';\n+import SubViewTitle from '@/components/ui/SubViewTitle.vue';\n+import MemberDetailsPage from './MemberDetailsPage.vue';\n+import TokenPage from './TokenPage.vue';\n+import SignKeyPage from './SignKeyPage.vue';\n+import FinishPage from './FinishPage.vue';\n+import CsrDetailsPageLocked from '@/components/wizard/CsrDetailsPageLocked.vue';\n+import GenerateCsrPage from './GenerateCsrPage.vue';\n+\n+import { Key, Token } from '@/types';\n+import { RouteName, AddMemberWizardModes } from '@/global';\n+import * as api from '@/util/api';\n+\n+export default Vue.extend({\n+  components: {\n+    HelpIcon,\n+    LargeButton,\n+    SubViewTitle,\n+    MemberDetailsPage,\n+    TokenPage,\n+    SignKeyPage,\n+    FinishPage,\n+    CsrDetailsPageLocked,\n+    GenerateCsrPage,\n+  },\n+  props: {\n+    instanceId: {\n+      type: String,\n+      required: true,\n+    },\n+    memberClass: {\n+      type: String,\n+      required: true,\n+    },\n+    memberCode: {\n+      type: String,\n+      required: true,\n+    },\n+  },\n+  data() {\n+    return {\n+      currentStep: 1,\n+      wizardModes: AddMemberWizardModes,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "37090653d465500817204c66a484399164f5f4be"}, "originalPosition": 134}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjUwNzcxMg==", "bodyText": "Added", "url": "https://github.com/nordic-institute/X-Road/pull/510#discussion_r432507712", "createdAt": "2020-05-29T14:10:07Z", "author": {"login": "Riippi"}, "path": "src/proxy-ui-api/frontend/src/views/AddMember/AddMember.vue", "diffHunk": "@@ -0,0 +1,297 @@\n+\n+<template>\n+  <div class=\"view-wrap\">\n+    <subViewTitle\n+      class=\"view-title\"\n+      :title=\"$t('wizard.addMemberTitle')\"\n+      :showClose=\"false\"\n+      data-test=\"wizard-title\"\n+    />\n+\n+    <v-stepper :alt-labels=\"true\" v-model=\"currentStep\" class=\"stepper noshadow\">\n+      <template v-if=\"addMemberWizardMode === wizardModes.FULL\">\n+        <v-stepper-header class=\"noshadow\">\n+          <v-stepper-step :complete=\"currentStep > 1\" step=\"1\">{{$t('wizard.member.title')}}</v-stepper-step>\n+          <v-divider></v-divider>\n+          <v-stepper-step :complete=\"currentStep > 2\" step=\"2\">{{$t('wizard.token.title')}}</v-stepper-step>\n+          <v-divider></v-divider>\n+          <v-stepper-step :complete=\"currentStep > 3\" step=\"3\">{{$t('wizard.signKey.title')}}</v-stepper-step>\n+          <v-divider></v-divider>\n+          <v-stepper-step :complete=\"currentStep > 4\" step=\"4\">{{$t('csr.csrDetails')}}</v-stepper-step>\n+          <v-divider></v-divider>\n+          <v-stepper-step :complete=\"currentStep > 5\" step=\"5\">{{$t('csr.generateCsr')}}</v-stepper-step>\n+          <v-divider></v-divider>\n+          <v-stepper-step step=\"6\">{{$t('wizard.finish.title')}}</v-stepper-step>\n+        </v-stepper-header>\n+      </template>\n+\n+      <template v-if=\"addMemberWizardMode === wizardModes.CERTIFICATE_EXISTS\">\n+        <v-stepper-header class=\"noshadow\">\n+          <v-stepper-step :complete=\"currentStep > 1\" step=\"1\">{{$t('wizard.member.title')}}</v-stepper-step>\n+          <v-divider></v-divider>\n+          <v-stepper-step step=\"2\">{{$t('wizard.finish.title')}}</v-stepper-step>\n+        </v-stepper-header>\n+      </template>\n+\n+      <template v-if=\"addMemberWizardMode === wizardModes.CSR_EXISTS\">\n+        <v-stepper-header class=\"noshadow\">\n+          <v-stepper-step :complete=\"currentStep > 1\" step=\"1\">{{$t('wizard.member.title')}}</v-stepper-step>\n+          <v-divider></v-divider>\n+          <v-stepper-step :complete=\"currentStep > 2\" step=\"2\">{{$t('csr.csrDetails')}}</v-stepper-step>\n+          <v-divider></v-divider>\n+          <v-stepper-step :complete=\"currentStep > 3\" step=\"3\">{{$t('csr.generateCsr')}}</v-stepper-step>\n+          <v-divider></v-divider>\n+          <v-stepper-step step=\"4\">{{$t('wizard.finish.title')}}</v-stepper-step>\n+        </v-stepper-header>\n+      </template>\n+\n+      <v-stepper-items class=\"stepper-content\">\n+        <!-- Step 1 -->\n+        <v-stepper-content step=\"1\">\n+          <MemberDetailsPage @cancel=\"cancel\" @done=\"currentStep++\" />\n+        </v-stepper-content>\n+        <!-- Step 2 -->\n+        <v-stepper-content :step=\"tokenPageNumber\">\n+          <TokenPage @cancel=\"cancel\" @previous=\"previousPage\" @done=\"tokenReady\" />\n+        </v-stepper-content>\n+        <!-- Step 3 -->\n+        <v-stepper-content :step=\"keyPageNumber\">\n+          <SignKeyPage @cancel=\"cancel\" @previous=\"previousPage\" @done=\"currentStep++\" />\n+        </v-stepper-content>\n+        <!-- Step 4 -->\n+        <v-stepper-content :step=\"csrDetailsPageNumber\">\n+          <CsrDetailsPageLocked\n+            @cancel=\"cancel\"\n+            @previous=\"previousPage\"\n+            @done=\"csrDetailsReady\"\n+            saveButtonText=\"action.next\"\n+          />\n+        </v-stepper-content>\n+        <!-- Step 5 -->\n+        <v-stepper-content :step=\"csrGeneratePageNumber\">\n+          <GenerateCsrPage\n+            @cancel=\"cancel\"\n+            @previous=\"previousPage\"\n+            @done=\"currentStep++\"\n+            saveButtonText=\"action.next\"\n+          />\n+        </v-stepper-content>\n+        <!-- Step 6 -->\n+        <v-stepper-content :step=\"finishPageNumber\">\n+          <FinishPage @cancel=\"cancel\" @previous=\"previousPage\" @done=\"done\" />\n+        </v-stepper-content>\n+      </v-stepper-items>\n+    </v-stepper>\n+  </div>\n+</template>\n+\n+<script lang=\"ts\">\n+import Vue from 'vue';\n+import { mapGetters } from 'vuex';\n+import HelpIcon from '@/components/ui/HelpIcon.vue';\n+import LargeButton from '@/components/ui/LargeButton.vue';\n+import SubViewTitle from '@/components/ui/SubViewTitle.vue';\n+import MemberDetailsPage from './MemberDetailsPage.vue';\n+import TokenPage from './TokenPage.vue';\n+import SignKeyPage from './SignKeyPage.vue';\n+import FinishPage from './FinishPage.vue';\n+import CsrDetailsPageLocked from '@/components/wizard/CsrDetailsPageLocked.vue';\n+import GenerateCsrPage from './GenerateCsrPage.vue';\n+\n+import { Key, Token } from '@/types';\n+import { RouteName, AddMemberWizardModes } from '@/global';\n+import * as api from '@/util/api';\n+\n+export default Vue.extend({\n+  components: {\n+    HelpIcon,\n+    LargeButton,\n+    SubViewTitle,\n+    MemberDetailsPage,\n+    TokenPage,\n+    SignKeyPage,\n+    FinishPage,\n+    CsrDetailsPageLocked,\n+    GenerateCsrPage,\n+  },\n+  props: {\n+    instanceId: {\n+      type: String,\n+      required: true,\n+    },\n+    memberClass: {\n+      type: String,\n+      required: true,\n+    },\n+    memberCode: {\n+      type: String,\n+      required: true,\n+    },\n+  },\n+  data() {\n+    return {\n+      currentStep: 1,\n+      wizardModes: AddMemberWizardModes,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTAzODM3Mg=="}, "originalCommit": {"oid": "37090653d465500817204c66a484399164f5f4be"}, "originalPosition": 134}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4NDc5NDE0OnYy", "diffSide": "RIGHT", "path": "src/proxy-ui-api/frontend/src/views/AddMember/AddMember.vue", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxMToxNDowNlrOGbEk8A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxNDowOTozN1rOGceJ_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTAzOTcyOA==", "bodyText": "Maybe this 999 could be addressed to a variable that tells better what is it for.\nLike const NO_SELECTION = 999;", "url": "https://github.com/nordic-institute/X-Road/pull/510#discussion_r431039728", "createdAt": "2020-05-27T11:14:06Z", "author": {"login": "TJaakkola"}, "path": "src/proxy-ui-api/frontend/src/views/AddMember/AddMember.vue", "diffHunk": "@@ -0,0 +1,297 @@\n+\n+<template>\n+  <div class=\"view-wrap\">\n+    <subViewTitle\n+      class=\"view-title\"\n+      :title=\"$t('wizard.addMemberTitle')\"\n+      :showClose=\"false\"\n+      data-test=\"wizard-title\"\n+    />\n+\n+    <v-stepper :alt-labels=\"true\" v-model=\"currentStep\" class=\"stepper noshadow\">\n+      <template v-if=\"addMemberWizardMode === wizardModes.FULL\">\n+        <v-stepper-header class=\"noshadow\">\n+          <v-stepper-step :complete=\"currentStep > 1\" step=\"1\">{{$t('wizard.member.title')}}</v-stepper-step>\n+          <v-divider></v-divider>\n+          <v-stepper-step :complete=\"currentStep > 2\" step=\"2\">{{$t('wizard.token.title')}}</v-stepper-step>\n+          <v-divider></v-divider>\n+          <v-stepper-step :complete=\"currentStep > 3\" step=\"3\">{{$t('wizard.signKey.title')}}</v-stepper-step>\n+          <v-divider></v-divider>\n+          <v-stepper-step :complete=\"currentStep > 4\" step=\"4\">{{$t('csr.csrDetails')}}</v-stepper-step>\n+          <v-divider></v-divider>\n+          <v-stepper-step :complete=\"currentStep > 5\" step=\"5\">{{$t('csr.generateCsr')}}</v-stepper-step>\n+          <v-divider></v-divider>\n+          <v-stepper-step step=\"6\">{{$t('wizard.finish.title')}}</v-stepper-step>\n+        </v-stepper-header>\n+      </template>\n+\n+      <template v-if=\"addMemberWizardMode === wizardModes.CERTIFICATE_EXISTS\">\n+        <v-stepper-header class=\"noshadow\">\n+          <v-stepper-step :complete=\"currentStep > 1\" step=\"1\">{{$t('wizard.member.title')}}</v-stepper-step>\n+          <v-divider></v-divider>\n+          <v-stepper-step step=\"2\">{{$t('wizard.finish.title')}}</v-stepper-step>\n+        </v-stepper-header>\n+      </template>\n+\n+      <template v-if=\"addMemberWizardMode === wizardModes.CSR_EXISTS\">\n+        <v-stepper-header class=\"noshadow\">\n+          <v-stepper-step :complete=\"currentStep > 1\" step=\"1\">{{$t('wizard.member.title')}}</v-stepper-step>\n+          <v-divider></v-divider>\n+          <v-stepper-step :complete=\"currentStep > 2\" step=\"2\">{{$t('csr.csrDetails')}}</v-stepper-step>\n+          <v-divider></v-divider>\n+          <v-stepper-step :complete=\"currentStep > 3\" step=\"3\">{{$t('csr.generateCsr')}}</v-stepper-step>\n+          <v-divider></v-divider>\n+          <v-stepper-step step=\"4\">{{$t('wizard.finish.title')}}</v-stepper-step>\n+        </v-stepper-header>\n+      </template>\n+\n+      <v-stepper-items class=\"stepper-content\">\n+        <!-- Step 1 -->\n+        <v-stepper-content step=\"1\">\n+          <MemberDetailsPage @cancel=\"cancel\" @done=\"currentStep++\" />\n+        </v-stepper-content>\n+        <!-- Step 2 -->\n+        <v-stepper-content :step=\"tokenPageNumber\">\n+          <TokenPage @cancel=\"cancel\" @previous=\"previousPage\" @done=\"tokenReady\" />\n+        </v-stepper-content>\n+        <!-- Step 3 -->\n+        <v-stepper-content :step=\"keyPageNumber\">\n+          <SignKeyPage @cancel=\"cancel\" @previous=\"previousPage\" @done=\"currentStep++\" />\n+        </v-stepper-content>\n+        <!-- Step 4 -->\n+        <v-stepper-content :step=\"csrDetailsPageNumber\">\n+          <CsrDetailsPageLocked\n+            @cancel=\"cancel\"\n+            @previous=\"previousPage\"\n+            @done=\"csrDetailsReady\"\n+            saveButtonText=\"action.next\"\n+          />\n+        </v-stepper-content>\n+        <!-- Step 5 -->\n+        <v-stepper-content :step=\"csrGeneratePageNumber\">\n+          <GenerateCsrPage\n+            @cancel=\"cancel\"\n+            @previous=\"previousPage\"\n+            @done=\"currentStep++\"\n+            saveButtonText=\"action.next\"\n+          />\n+        </v-stepper-content>\n+        <!-- Step 6 -->\n+        <v-stepper-content :step=\"finishPageNumber\">\n+          <FinishPage @cancel=\"cancel\" @previous=\"previousPage\" @done=\"done\" />\n+        </v-stepper-content>\n+      </v-stepper-items>\n+    </v-stepper>\n+  </div>\n+</template>\n+\n+<script lang=\"ts\">\n+import Vue from 'vue';\n+import { mapGetters } from 'vuex';\n+import HelpIcon from '@/components/ui/HelpIcon.vue';\n+import LargeButton from '@/components/ui/LargeButton.vue';\n+import SubViewTitle from '@/components/ui/SubViewTitle.vue';\n+import MemberDetailsPage from './MemberDetailsPage.vue';\n+import TokenPage from './TokenPage.vue';\n+import SignKeyPage from './SignKeyPage.vue';\n+import FinishPage from './FinishPage.vue';\n+import CsrDetailsPageLocked from '@/components/wizard/CsrDetailsPageLocked.vue';\n+import GenerateCsrPage from './GenerateCsrPage.vue';\n+\n+import { Key, Token } from '@/types';\n+import { RouteName, AddMemberWizardModes } from '@/global';\n+import * as api from '@/util/api';\n+\n+export default Vue.extend({\n+  components: {\n+    HelpIcon,\n+    LargeButton,\n+    SubViewTitle,\n+    MemberDetailsPage,\n+    TokenPage,\n+    SignKeyPage,\n+    FinishPage,\n+    CsrDetailsPageLocked,\n+    GenerateCsrPage,\n+  },\n+  props: {\n+    instanceId: {\n+      type: String,\n+      required: true,\n+    },\n+    memberClass: {\n+      type: String,\n+      required: true,\n+    },\n+    memberCode: {\n+      type: String,\n+      required: true,\n+    },\n+  },\n+  data() {\n+    return {\n+      currentStep: 1,\n+      wizardModes: AddMemberWizardModes,\n+    };\n+  },\n+\n+  computed: {\n+    ...mapGetters(['addMemberWizardMode']),\n+\n+    tokenPageNumber(): number {\n+      if (\n+        this.addMemberWizardMode === AddMemberWizardModes.CERTIFICATE_EXISTS ||\n+        this.addMemberWizardMode === AddMemberWizardModes.CSR_EXISTS\n+      ) {\n+        return 999;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "37090653d465500817204c66a484399164f5f4be"}, "originalPosition": 146}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjUwNzM4OQ==", "bodyText": "Fixed", "url": "https://github.com/nordic-institute/X-Road/pull/510#discussion_r432507389", "createdAt": "2020-05-29T14:09:37Z", "author": {"login": "Riippi"}, "path": "src/proxy-ui-api/frontend/src/views/AddMember/AddMember.vue", "diffHunk": "@@ -0,0 +1,297 @@\n+\n+<template>\n+  <div class=\"view-wrap\">\n+    <subViewTitle\n+      class=\"view-title\"\n+      :title=\"$t('wizard.addMemberTitle')\"\n+      :showClose=\"false\"\n+      data-test=\"wizard-title\"\n+    />\n+\n+    <v-stepper :alt-labels=\"true\" v-model=\"currentStep\" class=\"stepper noshadow\">\n+      <template v-if=\"addMemberWizardMode === wizardModes.FULL\">\n+        <v-stepper-header class=\"noshadow\">\n+          <v-stepper-step :complete=\"currentStep > 1\" step=\"1\">{{$t('wizard.member.title')}}</v-stepper-step>\n+          <v-divider></v-divider>\n+          <v-stepper-step :complete=\"currentStep > 2\" step=\"2\">{{$t('wizard.token.title')}}</v-stepper-step>\n+          <v-divider></v-divider>\n+          <v-stepper-step :complete=\"currentStep > 3\" step=\"3\">{{$t('wizard.signKey.title')}}</v-stepper-step>\n+          <v-divider></v-divider>\n+          <v-stepper-step :complete=\"currentStep > 4\" step=\"4\">{{$t('csr.csrDetails')}}</v-stepper-step>\n+          <v-divider></v-divider>\n+          <v-stepper-step :complete=\"currentStep > 5\" step=\"5\">{{$t('csr.generateCsr')}}</v-stepper-step>\n+          <v-divider></v-divider>\n+          <v-stepper-step step=\"6\">{{$t('wizard.finish.title')}}</v-stepper-step>\n+        </v-stepper-header>\n+      </template>\n+\n+      <template v-if=\"addMemberWizardMode === wizardModes.CERTIFICATE_EXISTS\">\n+        <v-stepper-header class=\"noshadow\">\n+          <v-stepper-step :complete=\"currentStep > 1\" step=\"1\">{{$t('wizard.member.title')}}</v-stepper-step>\n+          <v-divider></v-divider>\n+          <v-stepper-step step=\"2\">{{$t('wizard.finish.title')}}</v-stepper-step>\n+        </v-stepper-header>\n+      </template>\n+\n+      <template v-if=\"addMemberWizardMode === wizardModes.CSR_EXISTS\">\n+        <v-stepper-header class=\"noshadow\">\n+          <v-stepper-step :complete=\"currentStep > 1\" step=\"1\">{{$t('wizard.member.title')}}</v-stepper-step>\n+          <v-divider></v-divider>\n+          <v-stepper-step :complete=\"currentStep > 2\" step=\"2\">{{$t('csr.csrDetails')}}</v-stepper-step>\n+          <v-divider></v-divider>\n+          <v-stepper-step :complete=\"currentStep > 3\" step=\"3\">{{$t('csr.generateCsr')}}</v-stepper-step>\n+          <v-divider></v-divider>\n+          <v-stepper-step step=\"4\">{{$t('wizard.finish.title')}}</v-stepper-step>\n+        </v-stepper-header>\n+      </template>\n+\n+      <v-stepper-items class=\"stepper-content\">\n+        <!-- Step 1 -->\n+        <v-stepper-content step=\"1\">\n+          <MemberDetailsPage @cancel=\"cancel\" @done=\"currentStep++\" />\n+        </v-stepper-content>\n+        <!-- Step 2 -->\n+        <v-stepper-content :step=\"tokenPageNumber\">\n+          <TokenPage @cancel=\"cancel\" @previous=\"previousPage\" @done=\"tokenReady\" />\n+        </v-stepper-content>\n+        <!-- Step 3 -->\n+        <v-stepper-content :step=\"keyPageNumber\">\n+          <SignKeyPage @cancel=\"cancel\" @previous=\"previousPage\" @done=\"currentStep++\" />\n+        </v-stepper-content>\n+        <!-- Step 4 -->\n+        <v-stepper-content :step=\"csrDetailsPageNumber\">\n+          <CsrDetailsPageLocked\n+            @cancel=\"cancel\"\n+            @previous=\"previousPage\"\n+            @done=\"csrDetailsReady\"\n+            saveButtonText=\"action.next\"\n+          />\n+        </v-stepper-content>\n+        <!-- Step 5 -->\n+        <v-stepper-content :step=\"csrGeneratePageNumber\">\n+          <GenerateCsrPage\n+            @cancel=\"cancel\"\n+            @previous=\"previousPage\"\n+            @done=\"currentStep++\"\n+            saveButtonText=\"action.next\"\n+          />\n+        </v-stepper-content>\n+        <!-- Step 6 -->\n+        <v-stepper-content :step=\"finishPageNumber\">\n+          <FinishPage @cancel=\"cancel\" @previous=\"previousPage\" @done=\"done\" />\n+        </v-stepper-content>\n+      </v-stepper-items>\n+    </v-stepper>\n+  </div>\n+</template>\n+\n+<script lang=\"ts\">\n+import Vue from 'vue';\n+import { mapGetters } from 'vuex';\n+import HelpIcon from '@/components/ui/HelpIcon.vue';\n+import LargeButton from '@/components/ui/LargeButton.vue';\n+import SubViewTitle from '@/components/ui/SubViewTitle.vue';\n+import MemberDetailsPage from './MemberDetailsPage.vue';\n+import TokenPage from './TokenPage.vue';\n+import SignKeyPage from './SignKeyPage.vue';\n+import FinishPage from './FinishPage.vue';\n+import CsrDetailsPageLocked from '@/components/wizard/CsrDetailsPageLocked.vue';\n+import GenerateCsrPage from './GenerateCsrPage.vue';\n+\n+import { Key, Token } from '@/types';\n+import { RouteName, AddMemberWizardModes } from '@/global';\n+import * as api from '@/util/api';\n+\n+export default Vue.extend({\n+  components: {\n+    HelpIcon,\n+    LargeButton,\n+    SubViewTitle,\n+    MemberDetailsPage,\n+    TokenPage,\n+    SignKeyPage,\n+    FinishPage,\n+    CsrDetailsPageLocked,\n+    GenerateCsrPage,\n+  },\n+  props: {\n+    instanceId: {\n+      type: String,\n+      required: true,\n+    },\n+    memberClass: {\n+      type: String,\n+      required: true,\n+    },\n+    memberCode: {\n+      type: String,\n+      required: true,\n+    },\n+  },\n+  data() {\n+    return {\n+      currentStep: 1,\n+      wizardModes: AddMemberWizardModes,\n+    };\n+  },\n+\n+  computed: {\n+    ...mapGetters(['addMemberWizardMode']),\n+\n+    tokenPageNumber(): number {\n+      if (\n+        this.addMemberWizardMode === AddMemberWizardModes.CERTIFICATE_EXISTS ||\n+        this.addMemberWizardMode === AddMemberWizardModes.CSR_EXISTS\n+      ) {\n+        return 999;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTAzOTcyOA=="}, "originalCommit": {"oid": "37090653d465500817204c66a484399164f5f4be"}, "originalPosition": 146}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4NDgwNjk0OnYy", "diffSide": "RIGHT", "path": "src/proxy-ui-api/frontend/src/views/AddMember/FinishPage.vue", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxMToxODoyMVrOGbEtLA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxNDoxNzoyNFrOGceg8A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTA0MTgzNg==", "bodyText": "return this.addMemberWizardMode === AddMemberWizardModes.CERTIFICATE_EXISTS;\nAt somepoint there were problems using these shorthands. How about here?", "url": "https://github.com/nordic-institute/X-Road/pull/510#discussion_r431041836", "createdAt": "2020-05-27T11:18:21Z", "author": {"login": "TJaakkola"}, "path": "src/proxy-ui-api/frontend/src/views/AddMember/FinishPage.vue", "diffHunk": "@@ -0,0 +1,178 @@\n+<template>\n+  <div data-test=\"finish-content\">\n+    <p>\n+      {{$t('wizard.finish.infoLine1')}}\n+      <br />\n+      {{$t('wizard.finish.infoLine2')}}\n+    </p>\n+    <br />\n+    <p>{{$t('wizard.finish.todo1')}}</p>\n+    <p>{{$t('wizard.finish.todo2')}}</p>\n+    <p>{{$t('wizard.finish.todo3')}}</p>\n+    <br />\n+    <br />\n+    <p>{{$t('wizard.finish.note')}}</p>\n+    <p></p>\n+\n+    <div v-if=\"showRegisterOption\" class=\"row-wrap\">\n+      <FormLabel labelText=\"wizard.member.register\" />\n+      <v-checkbox\n+        v-model=\"registerChecked\"\n+        color=\"primary\"\n+        class=\"register-checkbox\"\n+        data-test=\"register-member-checkbox\"\n+      ></v-checkbox>\n+    </div>\n+\n+    <div class=\"button-footer\">\n+      <div class=\"button-group\">\n+        <large-button\n+          outlined\n+          @click=\"cancel\"\n+          :disabled=\"disableCancel\"\n+          data-test=\"cancel-button\"\n+        >{{$t('action.cancel')}}</large-button>\n+      </div>\n+\n+      <div>\n+        <large-button\n+          @click=\"previous\"\n+          outlined\n+          :disabled=\"disableCancel\"\n+          class=\"previous-button\"\n+          data-test=\"previous-button\"\n+        >{{$t('action.previous')}}</large-button>\n+\n+        <large-button\n+          @click=\"done\"\n+          data-test=\"submit-button\"\n+          :loading=\"submitLoading\"\n+        >{{$t('action.submit')}}</large-button>\n+      </div>\n+    </div>\n+  </div>\n+</template>\n+\n+<script lang=\"ts\">\n+import Vue from 'vue';\n+import { mapGetters } from 'vuex';\n+import LargeButton from '@/components/ui/LargeButton.vue';\n+import FormLabel from '@/components/ui/FormLabel.vue';\n+import { ValidationProvider, ValidationObserver } from 'vee-validate';\n+import { AddMemberWizardModes } from '@/global';\n+import { createClientId } from '@/util/helpers';\n+\n+export default Vue.extend({\n+  components: {\n+    LargeButton,\n+    ValidationObserver,\n+    ValidationProvider,\n+    FormLabel,\n+  },\n+  computed: {\n+    ...mapGetters([\n+      'addMemberWizardMode',\n+      'memberClass',\n+      'memberCode',\n+      'reservedMember',\n+    ]),\n+\n+    showRegisterOption() {\n+      if (\n+        this.addMemberWizardMode === AddMemberWizardModes.CERTIFICATE_EXISTS\n+      ) {\n+        return true;\n+      }\n+      return false;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "37090653d465500817204c66a484399164f5f4be"}, "originalPosition": 86}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjUxMzI2NA==", "bodyText": "Yes, it's computed property and it causes problems.", "url": "https://github.com/nordic-institute/X-Road/pull/510#discussion_r432513264", "createdAt": "2020-05-29T14:17:24Z", "author": {"login": "Riippi"}, "path": "src/proxy-ui-api/frontend/src/views/AddMember/FinishPage.vue", "diffHunk": "@@ -0,0 +1,178 @@\n+<template>\n+  <div data-test=\"finish-content\">\n+    <p>\n+      {{$t('wizard.finish.infoLine1')}}\n+      <br />\n+      {{$t('wizard.finish.infoLine2')}}\n+    </p>\n+    <br />\n+    <p>{{$t('wizard.finish.todo1')}}</p>\n+    <p>{{$t('wizard.finish.todo2')}}</p>\n+    <p>{{$t('wizard.finish.todo3')}}</p>\n+    <br />\n+    <br />\n+    <p>{{$t('wizard.finish.note')}}</p>\n+    <p></p>\n+\n+    <div v-if=\"showRegisterOption\" class=\"row-wrap\">\n+      <FormLabel labelText=\"wizard.member.register\" />\n+      <v-checkbox\n+        v-model=\"registerChecked\"\n+        color=\"primary\"\n+        class=\"register-checkbox\"\n+        data-test=\"register-member-checkbox\"\n+      ></v-checkbox>\n+    </div>\n+\n+    <div class=\"button-footer\">\n+      <div class=\"button-group\">\n+        <large-button\n+          outlined\n+          @click=\"cancel\"\n+          :disabled=\"disableCancel\"\n+          data-test=\"cancel-button\"\n+        >{{$t('action.cancel')}}</large-button>\n+      </div>\n+\n+      <div>\n+        <large-button\n+          @click=\"previous\"\n+          outlined\n+          :disabled=\"disableCancel\"\n+          class=\"previous-button\"\n+          data-test=\"previous-button\"\n+        >{{$t('action.previous')}}</large-button>\n+\n+        <large-button\n+          @click=\"done\"\n+          data-test=\"submit-button\"\n+          :loading=\"submitLoading\"\n+        >{{$t('action.submit')}}</large-button>\n+      </div>\n+    </div>\n+  </div>\n+</template>\n+\n+<script lang=\"ts\">\n+import Vue from 'vue';\n+import { mapGetters } from 'vuex';\n+import LargeButton from '@/components/ui/LargeButton.vue';\n+import FormLabel from '@/components/ui/FormLabel.vue';\n+import { ValidationProvider, ValidationObserver } from 'vee-validate';\n+import { AddMemberWizardModes } from '@/global';\n+import { createClientId } from '@/util/helpers';\n+\n+export default Vue.extend({\n+  components: {\n+    LargeButton,\n+    ValidationObserver,\n+    ValidationProvider,\n+    FormLabel,\n+  },\n+  computed: {\n+    ...mapGetters([\n+      'addMemberWizardMode',\n+      'memberClass',\n+      'memberCode',\n+      'reservedMember',\n+    ]),\n+\n+    showRegisterOption() {\n+      if (\n+        this.addMemberWizardMode === AddMemberWizardModes.CERTIFICATE_EXISTS\n+      ) {\n+        return true;\n+      }\n+      return false;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTA0MTgzNg=="}, "originalCommit": {"oid": "37090653d465500817204c66a484399164f5f4be"}, "originalPosition": 86}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4NDgxOTMzOnYy", "diffSide": "RIGHT", "path": "src/proxy-ui-api/frontend/src/views/AddMember/FinishPage.vue", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxMToyMjoxNVrOGbE1Dg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxNToyNzoxMlrOGchhSw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTA0Mzg1NA==", "bodyText": "Instead of duplicating setting false values in both success and fail callbacks you could set finally-block and do those just once there.\nI presume dispatch returns promise not sure though.", "url": "https://github.com/nordic-institute/X-Road/pull/510#discussion_r431043854", "createdAt": "2020-05-27T11:22:15Z", "author": {"login": "TJaakkola"}, "path": "src/proxy-ui-api/frontend/src/views/AddMember/FinishPage.vue", "diffHunk": "@@ -0,0 +1,178 @@\n+<template>\n+  <div data-test=\"finish-content\">\n+    <p>\n+      {{$t('wizard.finish.infoLine1')}}\n+      <br />\n+      {{$t('wizard.finish.infoLine2')}}\n+    </p>\n+    <br />\n+    <p>{{$t('wizard.finish.todo1')}}</p>\n+    <p>{{$t('wizard.finish.todo2')}}</p>\n+    <p>{{$t('wizard.finish.todo3')}}</p>\n+    <br />\n+    <br />\n+    <p>{{$t('wizard.finish.note')}}</p>\n+    <p></p>\n+\n+    <div v-if=\"showRegisterOption\" class=\"row-wrap\">\n+      <FormLabel labelText=\"wizard.member.register\" />\n+      <v-checkbox\n+        v-model=\"registerChecked\"\n+        color=\"primary\"\n+        class=\"register-checkbox\"\n+        data-test=\"register-member-checkbox\"\n+      ></v-checkbox>\n+    </div>\n+\n+    <div class=\"button-footer\">\n+      <div class=\"button-group\">\n+        <large-button\n+          outlined\n+          @click=\"cancel\"\n+          :disabled=\"disableCancel\"\n+          data-test=\"cancel-button\"\n+        >{{$t('action.cancel')}}</large-button>\n+      </div>\n+\n+      <div>\n+        <large-button\n+          @click=\"previous\"\n+          outlined\n+          :disabled=\"disableCancel\"\n+          class=\"previous-button\"\n+          data-test=\"previous-button\"\n+        >{{$t('action.previous')}}</large-button>\n+\n+        <large-button\n+          @click=\"done\"\n+          data-test=\"submit-button\"\n+          :loading=\"submitLoading\"\n+        >{{$t('action.submit')}}</large-button>\n+      </div>\n+    </div>\n+  </div>\n+</template>\n+\n+<script lang=\"ts\">\n+import Vue from 'vue';\n+import { mapGetters } from 'vuex';\n+import LargeButton from '@/components/ui/LargeButton.vue';\n+import FormLabel from '@/components/ui/FormLabel.vue';\n+import { ValidationProvider, ValidationObserver } from 'vee-validate';\n+import { AddMemberWizardModes } from '@/global';\n+import { createClientId } from '@/util/helpers';\n+\n+export default Vue.extend({\n+  components: {\n+    LargeButton,\n+    ValidationObserver,\n+    ValidationProvider,\n+    FormLabel,\n+  },\n+  computed: {\n+    ...mapGetters([\n+      'addMemberWizardMode',\n+      'memberClass',\n+      'memberCode',\n+      'reservedMember',\n+    ]),\n+\n+    showRegisterOption() {\n+      if (\n+        this.addMemberWizardMode === AddMemberWizardModes.CERTIFICATE_EXISTS\n+      ) {\n+        return true;\n+      }\n+      return false;\n+    },\n+  },\n+  data() {\n+    return {\n+      disableCancel: false as boolean,\n+      registerChecked: true as boolean,\n+      submitLoading: false as boolean,\n+    };\n+  },\n+  methods: {\n+    cancel(): void {\n+      this.$emit('cancel');\n+    },\n+    previous(): void {\n+      this.$emit('previous');\n+    },\n+    done(): void {\n+      this.disableCancel = true;\n+      this.submitLoading = true;\n+\n+      this.$store.dispatch('createMember').then(\n+        (response) => {\n+          if (\n+            this.addMemberWizardMode ===\n+              AddMemberWizardModes.CERTIFICATE_EXISTS &&\n+            this.registerChecked\n+          ) {\n+            this.registerClient();\n+          } else if (\n+            this.addMemberWizardMode === AddMemberWizardModes.CERTIFICATE_EXISTS\n+          ) {\n+            this.disableCancel = false;\n+            this.submitLoading = false;\n+            this.$emit('done');\n+          } else {\n+            this.generateCsr();\n+          }\n+        },\n+        (error) => {\n+          this.$store.dispatch('showError', error);\n+          this.disableCancel = false;\n+          this.submitLoading = false;\n+        },\n+      );\n+    },\n+\n+    generateCsr(): void {\n+      const tokenId = this.$store.getters.csrTokenId;\n+\n+      this.$store.dispatch('generateKeyAndCsr', tokenId).then(\n+        (response) => {\n+          this.disableCancel = false;\n+          this.submitLoading = false;\n+          this.$emit('done');\n+        },\n+        (error) => {\n+          this.$store.dispatch('showError', error);\n+          this.disableCancel = false;\n+          this.submitLoading = false;\n+        },", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "37090653d465500817204c66a484399164f5f4be"}, "originalPosition": 146}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjU2MjUwNw==", "bodyText": "It depends what is on the vuex end of the dispatch call. This one does return promise. Changed it to use finally().", "url": "https://github.com/nordic-institute/X-Road/pull/510#discussion_r432562507", "createdAt": "2020-05-29T15:27:12Z", "author": {"login": "Riippi"}, "path": "src/proxy-ui-api/frontend/src/views/AddMember/FinishPage.vue", "diffHunk": "@@ -0,0 +1,178 @@\n+<template>\n+  <div data-test=\"finish-content\">\n+    <p>\n+      {{$t('wizard.finish.infoLine1')}}\n+      <br />\n+      {{$t('wizard.finish.infoLine2')}}\n+    </p>\n+    <br />\n+    <p>{{$t('wizard.finish.todo1')}}</p>\n+    <p>{{$t('wizard.finish.todo2')}}</p>\n+    <p>{{$t('wizard.finish.todo3')}}</p>\n+    <br />\n+    <br />\n+    <p>{{$t('wizard.finish.note')}}</p>\n+    <p></p>\n+\n+    <div v-if=\"showRegisterOption\" class=\"row-wrap\">\n+      <FormLabel labelText=\"wizard.member.register\" />\n+      <v-checkbox\n+        v-model=\"registerChecked\"\n+        color=\"primary\"\n+        class=\"register-checkbox\"\n+        data-test=\"register-member-checkbox\"\n+      ></v-checkbox>\n+    </div>\n+\n+    <div class=\"button-footer\">\n+      <div class=\"button-group\">\n+        <large-button\n+          outlined\n+          @click=\"cancel\"\n+          :disabled=\"disableCancel\"\n+          data-test=\"cancel-button\"\n+        >{{$t('action.cancel')}}</large-button>\n+      </div>\n+\n+      <div>\n+        <large-button\n+          @click=\"previous\"\n+          outlined\n+          :disabled=\"disableCancel\"\n+          class=\"previous-button\"\n+          data-test=\"previous-button\"\n+        >{{$t('action.previous')}}</large-button>\n+\n+        <large-button\n+          @click=\"done\"\n+          data-test=\"submit-button\"\n+          :loading=\"submitLoading\"\n+        >{{$t('action.submit')}}</large-button>\n+      </div>\n+    </div>\n+  </div>\n+</template>\n+\n+<script lang=\"ts\">\n+import Vue from 'vue';\n+import { mapGetters } from 'vuex';\n+import LargeButton from '@/components/ui/LargeButton.vue';\n+import FormLabel from '@/components/ui/FormLabel.vue';\n+import { ValidationProvider, ValidationObserver } from 'vee-validate';\n+import { AddMemberWizardModes } from '@/global';\n+import { createClientId } from '@/util/helpers';\n+\n+export default Vue.extend({\n+  components: {\n+    LargeButton,\n+    ValidationObserver,\n+    ValidationProvider,\n+    FormLabel,\n+  },\n+  computed: {\n+    ...mapGetters([\n+      'addMemberWizardMode',\n+      'memberClass',\n+      'memberCode',\n+      'reservedMember',\n+    ]),\n+\n+    showRegisterOption() {\n+      if (\n+        this.addMemberWizardMode === AddMemberWizardModes.CERTIFICATE_EXISTS\n+      ) {\n+        return true;\n+      }\n+      return false;\n+    },\n+  },\n+  data() {\n+    return {\n+      disableCancel: false as boolean,\n+      registerChecked: true as boolean,\n+      submitLoading: false as boolean,\n+    };\n+  },\n+  methods: {\n+    cancel(): void {\n+      this.$emit('cancel');\n+    },\n+    previous(): void {\n+      this.$emit('previous');\n+    },\n+    done(): void {\n+      this.disableCancel = true;\n+      this.submitLoading = true;\n+\n+      this.$store.dispatch('createMember').then(\n+        (response) => {\n+          if (\n+            this.addMemberWizardMode ===\n+              AddMemberWizardModes.CERTIFICATE_EXISTS &&\n+            this.registerChecked\n+          ) {\n+            this.registerClient();\n+          } else if (\n+            this.addMemberWizardMode === AddMemberWizardModes.CERTIFICATE_EXISTS\n+          ) {\n+            this.disableCancel = false;\n+            this.submitLoading = false;\n+            this.$emit('done');\n+          } else {\n+            this.generateCsr();\n+          }\n+        },\n+        (error) => {\n+          this.$store.dispatch('showError', error);\n+          this.disableCancel = false;\n+          this.submitLoading = false;\n+        },\n+      );\n+    },\n+\n+    generateCsr(): void {\n+      const tokenId = this.$store.getters.csrTokenId;\n+\n+      this.$store.dispatch('generateKeyAndCsr', tokenId).then(\n+        (response) => {\n+          this.disableCancel = false;\n+          this.submitLoading = false;\n+          this.$emit('done');\n+        },\n+        (error) => {\n+          this.$store.dispatch('showError', error);\n+          this.disableCancel = false;\n+          this.submitLoading = false;\n+        },", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTA0Mzg1NA=="}, "originalCommit": {"oid": "37090653d465500817204c66a484399164f5f4be"}, "originalPosition": 146}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4NDgyMjAxOnYy", "diffSide": "RIGHT", "path": "src/proxy-ui-api/frontend/src/views/AddMember/FinishPage.vue", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxMToyMjo1OVrOGbE2ow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxNToyNzoxOVrOGchhoQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTA0NDI1OQ==", "bodyText": "Same  as above", "url": "https://github.com/nordic-institute/X-Road/pull/510#discussion_r431044259", "createdAt": "2020-05-27T11:22:59Z", "author": {"login": "TJaakkola"}, "path": "src/proxy-ui-api/frontend/src/views/AddMember/FinishPage.vue", "diffHunk": "@@ -0,0 +1,178 @@\n+<template>\n+  <div data-test=\"finish-content\">\n+    <p>\n+      {{$t('wizard.finish.infoLine1')}}\n+      <br />\n+      {{$t('wizard.finish.infoLine2')}}\n+    </p>\n+    <br />\n+    <p>{{$t('wizard.finish.todo1')}}</p>\n+    <p>{{$t('wizard.finish.todo2')}}</p>\n+    <p>{{$t('wizard.finish.todo3')}}</p>\n+    <br />\n+    <br />\n+    <p>{{$t('wizard.finish.note')}}</p>\n+    <p></p>\n+\n+    <div v-if=\"showRegisterOption\" class=\"row-wrap\">\n+      <FormLabel labelText=\"wizard.member.register\" />\n+      <v-checkbox\n+        v-model=\"registerChecked\"\n+        color=\"primary\"\n+        class=\"register-checkbox\"\n+        data-test=\"register-member-checkbox\"\n+      ></v-checkbox>\n+    </div>\n+\n+    <div class=\"button-footer\">\n+      <div class=\"button-group\">\n+        <large-button\n+          outlined\n+          @click=\"cancel\"\n+          :disabled=\"disableCancel\"\n+          data-test=\"cancel-button\"\n+        >{{$t('action.cancel')}}</large-button>\n+      </div>\n+\n+      <div>\n+        <large-button\n+          @click=\"previous\"\n+          outlined\n+          :disabled=\"disableCancel\"\n+          class=\"previous-button\"\n+          data-test=\"previous-button\"\n+        >{{$t('action.previous')}}</large-button>\n+\n+        <large-button\n+          @click=\"done\"\n+          data-test=\"submit-button\"\n+          :loading=\"submitLoading\"\n+        >{{$t('action.submit')}}</large-button>\n+      </div>\n+    </div>\n+  </div>\n+</template>\n+\n+<script lang=\"ts\">\n+import Vue from 'vue';\n+import { mapGetters } from 'vuex';\n+import LargeButton from '@/components/ui/LargeButton.vue';\n+import FormLabel from '@/components/ui/FormLabel.vue';\n+import { ValidationProvider, ValidationObserver } from 'vee-validate';\n+import { AddMemberWizardModes } from '@/global';\n+import { createClientId } from '@/util/helpers';\n+\n+export default Vue.extend({\n+  components: {\n+    LargeButton,\n+    ValidationObserver,\n+    ValidationProvider,\n+    FormLabel,\n+  },\n+  computed: {\n+    ...mapGetters([\n+      'addMemberWizardMode',\n+      'memberClass',\n+      'memberCode',\n+      'reservedMember',\n+    ]),\n+\n+    showRegisterOption() {\n+      if (\n+        this.addMemberWizardMode === AddMemberWizardModes.CERTIFICATE_EXISTS\n+      ) {\n+        return true;\n+      }\n+      return false;\n+    },\n+  },\n+  data() {\n+    return {\n+      disableCancel: false as boolean,\n+      registerChecked: true as boolean,\n+      submitLoading: false as boolean,\n+    };\n+  },\n+  methods: {\n+    cancel(): void {\n+      this.$emit('cancel');\n+    },\n+    previous(): void {\n+      this.$emit('previous');\n+    },\n+    done(): void {\n+      this.disableCancel = true;\n+      this.submitLoading = true;\n+\n+      this.$store.dispatch('createMember').then(\n+        (response) => {\n+          if (\n+            this.addMemberWizardMode ===\n+              AddMemberWizardModes.CERTIFICATE_EXISTS &&\n+            this.registerChecked\n+          ) {\n+            this.registerClient();\n+          } else if (\n+            this.addMemberWizardMode === AddMemberWizardModes.CERTIFICATE_EXISTS\n+          ) {\n+            this.disableCancel = false;\n+            this.submitLoading = false;\n+            this.$emit('done');\n+          } else {\n+            this.generateCsr();\n+          }\n+        },\n+        (error) => {\n+          this.$store.dispatch('showError', error);\n+          this.disableCancel = false;\n+          this.submitLoading = false;\n+        },\n+      );\n+    },\n+\n+    generateCsr(): void {\n+      const tokenId = this.$store.getters.csrTokenId;\n+\n+      this.$store.dispatch('generateKeyAndCsr', tokenId).then(\n+        (response) => {\n+          this.disableCancel = false;\n+          this.submitLoading = false;\n+          this.$emit('done');\n+        },\n+        (error) => {\n+          this.$store.dispatch('showError', error);\n+          this.disableCancel = false;\n+          this.submitLoading = false;\n+        },\n+      );\n+    },\n+\n+    registerClient(): void {\n+      const clientId = createClientId(\n+        this.reservedMember.instanceId,\n+        this.memberClass,\n+        this.memberCode,\n+      );\n+\n+      this.$store.dispatch('registerClient', clientId).then(\n+        () => {\n+          this.disableCancel = false;\n+          this.submitLoading = false;\n+          this.$emit('done');\n+        },\n+        (error) => {\n+          this.$store.dispatch('showError', error);\n+          this.disableCancel = false;\n+          this.submitLoading = false;\n+          this.$emit('done');\n+        },\n+      );", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "37090653d465500817204c66a484399164f5f4be"}, "originalPosition": 169}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjU2MjU5Mw==", "bodyText": "Fixed", "url": "https://github.com/nordic-institute/X-Road/pull/510#discussion_r432562593", "createdAt": "2020-05-29T15:27:19Z", "author": {"login": "Riippi"}, "path": "src/proxy-ui-api/frontend/src/views/AddMember/FinishPage.vue", "diffHunk": "@@ -0,0 +1,178 @@\n+<template>\n+  <div data-test=\"finish-content\">\n+    <p>\n+      {{$t('wizard.finish.infoLine1')}}\n+      <br />\n+      {{$t('wizard.finish.infoLine2')}}\n+    </p>\n+    <br />\n+    <p>{{$t('wizard.finish.todo1')}}</p>\n+    <p>{{$t('wizard.finish.todo2')}}</p>\n+    <p>{{$t('wizard.finish.todo3')}}</p>\n+    <br />\n+    <br />\n+    <p>{{$t('wizard.finish.note')}}</p>\n+    <p></p>\n+\n+    <div v-if=\"showRegisterOption\" class=\"row-wrap\">\n+      <FormLabel labelText=\"wizard.member.register\" />\n+      <v-checkbox\n+        v-model=\"registerChecked\"\n+        color=\"primary\"\n+        class=\"register-checkbox\"\n+        data-test=\"register-member-checkbox\"\n+      ></v-checkbox>\n+    </div>\n+\n+    <div class=\"button-footer\">\n+      <div class=\"button-group\">\n+        <large-button\n+          outlined\n+          @click=\"cancel\"\n+          :disabled=\"disableCancel\"\n+          data-test=\"cancel-button\"\n+        >{{$t('action.cancel')}}</large-button>\n+      </div>\n+\n+      <div>\n+        <large-button\n+          @click=\"previous\"\n+          outlined\n+          :disabled=\"disableCancel\"\n+          class=\"previous-button\"\n+          data-test=\"previous-button\"\n+        >{{$t('action.previous')}}</large-button>\n+\n+        <large-button\n+          @click=\"done\"\n+          data-test=\"submit-button\"\n+          :loading=\"submitLoading\"\n+        >{{$t('action.submit')}}</large-button>\n+      </div>\n+    </div>\n+  </div>\n+</template>\n+\n+<script lang=\"ts\">\n+import Vue from 'vue';\n+import { mapGetters } from 'vuex';\n+import LargeButton from '@/components/ui/LargeButton.vue';\n+import FormLabel from '@/components/ui/FormLabel.vue';\n+import { ValidationProvider, ValidationObserver } from 'vee-validate';\n+import { AddMemberWizardModes } from '@/global';\n+import { createClientId } from '@/util/helpers';\n+\n+export default Vue.extend({\n+  components: {\n+    LargeButton,\n+    ValidationObserver,\n+    ValidationProvider,\n+    FormLabel,\n+  },\n+  computed: {\n+    ...mapGetters([\n+      'addMemberWizardMode',\n+      'memberClass',\n+      'memberCode',\n+      'reservedMember',\n+    ]),\n+\n+    showRegisterOption() {\n+      if (\n+        this.addMemberWizardMode === AddMemberWizardModes.CERTIFICATE_EXISTS\n+      ) {\n+        return true;\n+      }\n+      return false;\n+    },\n+  },\n+  data() {\n+    return {\n+      disableCancel: false as boolean,\n+      registerChecked: true as boolean,\n+      submitLoading: false as boolean,\n+    };\n+  },\n+  methods: {\n+    cancel(): void {\n+      this.$emit('cancel');\n+    },\n+    previous(): void {\n+      this.$emit('previous');\n+    },\n+    done(): void {\n+      this.disableCancel = true;\n+      this.submitLoading = true;\n+\n+      this.$store.dispatch('createMember').then(\n+        (response) => {\n+          if (\n+            this.addMemberWizardMode ===\n+              AddMemberWizardModes.CERTIFICATE_EXISTS &&\n+            this.registerChecked\n+          ) {\n+            this.registerClient();\n+          } else if (\n+            this.addMemberWizardMode === AddMemberWizardModes.CERTIFICATE_EXISTS\n+          ) {\n+            this.disableCancel = false;\n+            this.submitLoading = false;\n+            this.$emit('done');\n+          } else {\n+            this.generateCsr();\n+          }\n+        },\n+        (error) => {\n+          this.$store.dispatch('showError', error);\n+          this.disableCancel = false;\n+          this.submitLoading = false;\n+        },\n+      );\n+    },\n+\n+    generateCsr(): void {\n+      const tokenId = this.$store.getters.csrTokenId;\n+\n+      this.$store.dispatch('generateKeyAndCsr', tokenId).then(\n+        (response) => {\n+          this.disableCancel = false;\n+          this.submitLoading = false;\n+          this.$emit('done');\n+        },\n+        (error) => {\n+          this.$store.dispatch('showError', error);\n+          this.disableCancel = false;\n+          this.submitLoading = false;\n+        },\n+      );\n+    },\n+\n+    registerClient(): void {\n+      const clientId = createClientId(\n+        this.reservedMember.instanceId,\n+        this.memberClass,\n+        this.memberCode,\n+      );\n+\n+      this.$store.dispatch('registerClient', clientId).then(\n+        () => {\n+          this.disableCancel = false;\n+          this.submitLoading = false;\n+          this.$emit('done');\n+        },\n+        (error) => {\n+          this.$store.dispatch('showError', error);\n+          this.disableCancel = false;\n+          this.submitLoading = false;\n+          this.$emit('done');\n+        },\n+      );", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTA0NDI1OQ=="}, "originalCommit": {"oid": "37090653d465500817204c66a484399164f5f4be"}, "originalPosition": 169}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4NDgyMzUxOnYy", "diffSide": "RIGHT", "path": "src/proxy-ui-api/frontend/src/views/AddMember/GenerateCsrPage.vue", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxMToyMzozMlrOGbE3mA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxNDoyMzoyOFrOGce3cQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTA0NDUwNA==", "bodyText": "data-test missing", "url": "https://github.com/nordic-institute/X-Road/pull/510#discussion_r431044504", "createdAt": "2020-05-27T11:23:32Z", "author": {"login": "TJaakkola"}, "path": "src/proxy-ui-api/frontend/src/views/AddMember/GenerateCsrPage.vue", "diffHunk": "@@ -0,0 +1,99 @@\n+<template>\n+  <div>\n+    <ValidationObserver ref=\"form2\" v-slot=\"{ validate, invalid }\">\n+      <div v-for=\"item in csrForm\" v-bind:key=\"item.id\" class=\"row-wrap\">\n+        <div class=\"label\">{{$t('certificateProfile.' + item.label_key)}}</div>\n+\n+        <div>\n+          <ValidationProvider\n+            :name=\"item.id\"\n+            :rules=\"(item.required) && 'required' \"\n+            v-slot=\"{ errors }\"\n+          >\n+            <v-text-field", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "37090653d465500817204c66a484399164f5f4be"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjUxOTAyNQ==", "bodyText": "Fixed", "url": "https://github.com/nordic-institute/X-Road/pull/510#discussion_r432519025", "createdAt": "2020-05-29T14:23:28Z", "author": {"login": "Riippi"}, "path": "src/proxy-ui-api/frontend/src/views/AddMember/GenerateCsrPage.vue", "diffHunk": "@@ -0,0 +1,99 @@\n+<template>\n+  <div>\n+    <ValidationObserver ref=\"form2\" v-slot=\"{ validate, invalid }\">\n+      <div v-for=\"item in csrForm\" v-bind:key=\"item.id\" class=\"row-wrap\">\n+        <div class=\"label\">{{$t('certificateProfile.' + item.label_key)}}</div>\n+\n+        <div>\n+          <ValidationProvider\n+            :name=\"item.id\"\n+            :rules=\"(item.required) && 'required' \"\n+            v-slot=\"{ errors }\"\n+          >\n+            <v-text-field", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTA0NDUwNA=="}, "originalCommit": {"oid": "37090653d465500817204c66a484399164f5f4be"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4NDgyNDkzOnYy", "diffSide": "RIGHT", "path": "src/proxy-ui-api/frontend/src/views/AddMember/GenerateCsrPage.vue", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxMToyNDowNVrOGbE4ng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxNDoyNDoxMVrOGce6Hw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTA0NDc2Ng==", "bodyText": "Is this block mandatory?", "url": "https://github.com/nordic-institute/X-Road/pull/510#discussion_r431044766", "createdAt": "2020-05-27T11:24:05Z", "author": {"login": "TJaakkola"}, "path": "src/proxy-ui-api/frontend/src/views/AddMember/GenerateCsrPage.vue", "diffHunk": "@@ -0,0 +1,99 @@\n+<template>\n+  <div>\n+    <ValidationObserver ref=\"form2\" v-slot=\"{ validate, invalid }\">\n+      <div v-for=\"item in csrForm\" v-bind:key=\"item.id\" class=\"row-wrap\">\n+        <div class=\"label\">{{$t('certificateProfile.' + item.label_key)}}</div>\n+\n+        <div>\n+          <ValidationProvider\n+            :name=\"item.id\"\n+            :rules=\"(item.required) && 'required' \"\n+            v-slot=\"{ errors }\"\n+          >\n+            <v-text-field\n+              class=\"form-input\"\n+              :name=\"item.id\"\n+              type=\"text\"\n+              v-model=\"item.default_value\"\n+              :disabled=\"item.read_only\"\n+              :error-messages=\"errors\"\n+            ></v-text-field>\n+          </ValidationProvider>\n+        </div>\n+      </div>\n+      <div class=\"button-footer\">\n+        <div class=\"button-group\">\n+          <large-button outlined @click=\"cancel\" data-test=\"cancel-button\">{{$t('action.cancel')}}</large-button>\n+        </div>\n+        <div>\n+          <large-button\n+            @click=\"previous\"\n+            outlined\n+            class=\"previous-button\"\n+            data-test=\"previous-button\"\n+          >{{$t('action.previous')}}</large-button>\n+          <large-button\n+            @click=\"done\"\n+            :disabled=\"invalid\"\n+            data-test=\"save-button\"\n+          >{{$t(saveButtonText)}}</large-button>\n+        </div>\n+      </div>\n+    </ValidationObserver>\n+  </div>\n+</template>\n+\n+<script lang=\"ts\">\n+import Vue from 'vue';\n+import { mapGetters } from 'vuex';\n+import LargeButton from '@/components/ui/LargeButton.vue';\n+import { ValidationProvider, ValidationObserver } from 'vee-validate';\n+\n+export default Vue.extend({\n+  components: {\n+    LargeButton,\n+    ValidationObserver,\n+    ValidationProvider,\n+  },\n+  props: {\n+    saveButtonText: {\n+      type: String,\n+      default: 'action.done',\n+    },\n+    showGenerateButton: {\n+      type: Boolean,\n+      default: true,\n+    },\n+  },\n+  computed: {\n+    ...mapGetters(['csrForm']),\n+  },\n+  data() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "37090653d465500817204c66a484399164f5f4be"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjUxOTcxMQ==", "bodyText": "Fixed", "url": "https://github.com/nordic-institute/X-Road/pull/510#discussion_r432519711", "createdAt": "2020-05-29T14:24:11Z", "author": {"login": "Riippi"}, "path": "src/proxy-ui-api/frontend/src/views/AddMember/GenerateCsrPage.vue", "diffHunk": "@@ -0,0 +1,99 @@\n+<template>\n+  <div>\n+    <ValidationObserver ref=\"form2\" v-slot=\"{ validate, invalid }\">\n+      <div v-for=\"item in csrForm\" v-bind:key=\"item.id\" class=\"row-wrap\">\n+        <div class=\"label\">{{$t('certificateProfile.' + item.label_key)}}</div>\n+\n+        <div>\n+          <ValidationProvider\n+            :name=\"item.id\"\n+            :rules=\"(item.required) && 'required' \"\n+            v-slot=\"{ errors }\"\n+          >\n+            <v-text-field\n+              class=\"form-input\"\n+              :name=\"item.id\"\n+              type=\"text\"\n+              v-model=\"item.default_value\"\n+              :disabled=\"item.read_only\"\n+              :error-messages=\"errors\"\n+            ></v-text-field>\n+          </ValidationProvider>\n+        </div>\n+      </div>\n+      <div class=\"button-footer\">\n+        <div class=\"button-group\">\n+          <large-button outlined @click=\"cancel\" data-test=\"cancel-button\">{{$t('action.cancel')}}</large-button>\n+        </div>\n+        <div>\n+          <large-button\n+            @click=\"previous\"\n+            outlined\n+            class=\"previous-button\"\n+            data-test=\"previous-button\"\n+          >{{$t('action.previous')}}</large-button>\n+          <large-button\n+            @click=\"done\"\n+            :disabled=\"invalid\"\n+            data-test=\"save-button\"\n+          >{{$t(saveButtonText)}}</large-button>\n+        </div>\n+      </div>\n+    </ValidationObserver>\n+  </div>\n+</template>\n+\n+<script lang=\"ts\">\n+import Vue from 'vue';\n+import { mapGetters } from 'vuex';\n+import LargeButton from '@/components/ui/LargeButton.vue';\n+import { ValidationProvider, ValidationObserver } from 'vee-validate';\n+\n+export default Vue.extend({\n+  components: {\n+    LargeButton,\n+    ValidationObserver,\n+    ValidationProvider,\n+  },\n+  props: {\n+    saveButtonText: {\n+      type: String,\n+      default: 'action.done',\n+    },\n+    showGenerateButton: {\n+      type: Boolean,\n+      default: true,\n+    },\n+  },\n+  computed: {\n+    ...mapGetters(['csrForm']),\n+  },\n+  data() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTA0NDc2Ng=="}, "originalCommit": {"oid": "37090653d465500817204c66a484399164f5f4be"}, "originalPosition": 71}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4NDgzNjMzOnYy", "diffSide": "RIGHT", "path": "src/proxy-ui-api/frontend/src/views/AddMember/MemberDetailsPage.vue", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxMToyNzo1OVrOGbE_8w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxNDoyNzoxM1rOGcfFzA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTA0NjY0Mw==", "bodyText": "Remove if clause like above.", "url": "https://github.com/nordic-institute/X-Road/pull/510#discussion_r431046643", "createdAt": "2020-05-27T11:27:59Z", "author": {"login": "TJaakkola"}, "path": "src/proxy-ui-api/frontend/src/views/AddMember/MemberDetailsPage.vue", "diffHunk": "@@ -0,0 +1,280 @@\n+<template>\n+  <div>\n+    <div class=\"info-block\">\n+      <div>\n+        {{$t('wizard.member.info1')}}\n+        <br />\n+        <br />\n+        {{$t('wizard.member.info2')}}\n+      </div>\n+      <div class=\"action-block\">\n+        <large-button\n+          @click=\"showSelectClient = true\"\n+          outlined\n+          data-test=\"select-client-button\"\n+        >{{$t('wizard.member.select')}}</large-button>\n+      </div>\n+    </div>\n+\n+    <ValidationObserver ref=\"form2\" v-slot=\"{ validate, invalid }\">\n+      <div class=\"row-wrap\">\n+        <FormLabel labelText=\"wizard.memberName\" helpText=\"wizard.client.memberNameTooltip\" />\n+        <div data-test=\"selected-member-name\">{{selectedMemberName}}</div>\n+      </div>\n+\n+      <div class=\"row-wrap\">\n+        <FormLabel labelText=\"wizard.memberClass\" helpText=\"wizard.client.memberClassTooltip\" />\n+\n+        <ValidationProvider name=\"addClient.memberClass\" rules=\"required\" v-slot=\"{ errors }\">\n+          <v-select\n+            :items=\"memberClasses\"\n+            class=\"form-input\"\n+            v-model=\"memberClass\"\n+            data-test=\"member-class-input\"\n+          ></v-select>\n+        </ValidationProvider>\n+      </div>\n+      <div class=\"row-wrap\">\n+        <FormLabel labelText=\"wizard.memberCode\" helpText=\"wizard.client.memberCodeTooltip\" />\n+\n+        <ValidationProvider name=\"addClient.memberCode\" rules=\"required\" v-slot=\"{ errors }\">\n+          <v-text-field\n+            class=\"form-input\"\n+            type=\"text\"\n+            :error-messages=\"errors\"\n+            v-model=\"memberCode\"\n+            data-test=\"member-code-input\"\n+          ></v-text-field>\n+        </ValidationProvider>\n+      </div>\n+\n+      <div v-if=\"duplicateClient\" class=\"duplicate-warning\">{{$t('wizard.client.memberExists')}}</div>\n+      <div class=\"button-footer\">\n+        <div class=\"button-group\">\n+          <large-button outlined @click=\"cancel\" data-test=\"cancel-button\">{{$t('action.cancel')}}</large-button>\n+        </div>\n+        <large-button\n+          @click=\"done\"\n+          :disabled=\"invalid || duplicateClient ||\u00a0checkRunning\"\n+          data-test=\"next-button\"\n+        >{{$t('action.next')}}</large-button>\n+      </div>\n+    </ValidationObserver>\n+\n+    <SelectClientDialog\n+      :dialog=\"showSelectClient\"\n+      :selectableClients=\"selectableMembers\"\n+      @cancel=\"showSelectClient = false\"\n+      @save=\"saveSelectedClient\"\n+    />\n+  </div>\n+</template>\n+\n+<script lang=\"ts\">\n+import Vue from 'vue';\n+import { mapGetters } from 'vuex';\n+import FormLabel from '@/components/ui/FormLabel.vue';\n+import LargeButton from '@/components/ui/LargeButton.vue';\n+import SelectClientDialog from '@/components/client/SelectClientDialog.vue';\n+import { Client } from '@/types';\n+import { debounce } from '@/util/helpers';\n+import { ValidationProvider, ValidationObserver } from 'vee-validate';\n+import { AddMemberWizardModes } from '../../global';\n+\n+let that: any;\n+\n+export default Vue.extend({\n+  components: {\n+    FormLabel,\n+    LargeButton,\n+    ValidationObserver,\n+    ValidationProvider,\n+    SelectClientDialog,\n+  },\n+  computed: {\n+    ...mapGetters([\n+      'reservedMember',\n+      'memberClasses',\n+      'selectedMemberName',\n+    ]),\n+\n+    memberClass: {\n+      get(): string {\n+        return this.$store.getters.memberClass;\n+      },\n+      set(value: string) {\n+        this.$store.commit('setMemberClass', value);\n+      },\n+    },\n+\n+    memberCode: {\n+      get(): string {\n+        return this.$store.getters.memberCode;\n+      },\n+      set(value: string) {\n+        this.$store.commit('setMemberCode', value);\n+      },\n+    },\n+\n+    selectableMembers(): Client[] {\n+      // Filter out the owner member\n+      const filtered = this.$store.getters.selectableMembers.filter(\n+        (client: Client) => {\n+          if (", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "37090653d465500817204c66a484399164f5f4be"}, "originalPosition": 123}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjUyMjcwMA==", "bodyText": "Fixed", "url": "https://github.com/nordic-institute/X-Road/pull/510#discussion_r432522700", "createdAt": "2020-05-29T14:27:13Z", "author": {"login": "Riippi"}, "path": "src/proxy-ui-api/frontend/src/views/AddMember/MemberDetailsPage.vue", "diffHunk": "@@ -0,0 +1,280 @@\n+<template>\n+  <div>\n+    <div class=\"info-block\">\n+      <div>\n+        {{$t('wizard.member.info1')}}\n+        <br />\n+        <br />\n+        {{$t('wizard.member.info2')}}\n+      </div>\n+      <div class=\"action-block\">\n+        <large-button\n+          @click=\"showSelectClient = true\"\n+          outlined\n+          data-test=\"select-client-button\"\n+        >{{$t('wizard.member.select')}}</large-button>\n+      </div>\n+    </div>\n+\n+    <ValidationObserver ref=\"form2\" v-slot=\"{ validate, invalid }\">\n+      <div class=\"row-wrap\">\n+        <FormLabel labelText=\"wizard.memberName\" helpText=\"wizard.client.memberNameTooltip\" />\n+        <div data-test=\"selected-member-name\">{{selectedMemberName}}</div>\n+      </div>\n+\n+      <div class=\"row-wrap\">\n+        <FormLabel labelText=\"wizard.memberClass\" helpText=\"wizard.client.memberClassTooltip\" />\n+\n+        <ValidationProvider name=\"addClient.memberClass\" rules=\"required\" v-slot=\"{ errors }\">\n+          <v-select\n+            :items=\"memberClasses\"\n+            class=\"form-input\"\n+            v-model=\"memberClass\"\n+            data-test=\"member-class-input\"\n+          ></v-select>\n+        </ValidationProvider>\n+      </div>\n+      <div class=\"row-wrap\">\n+        <FormLabel labelText=\"wizard.memberCode\" helpText=\"wizard.client.memberCodeTooltip\" />\n+\n+        <ValidationProvider name=\"addClient.memberCode\" rules=\"required\" v-slot=\"{ errors }\">\n+          <v-text-field\n+            class=\"form-input\"\n+            type=\"text\"\n+            :error-messages=\"errors\"\n+            v-model=\"memberCode\"\n+            data-test=\"member-code-input\"\n+          ></v-text-field>\n+        </ValidationProvider>\n+      </div>\n+\n+      <div v-if=\"duplicateClient\" class=\"duplicate-warning\">{{$t('wizard.client.memberExists')}}</div>\n+      <div class=\"button-footer\">\n+        <div class=\"button-group\">\n+          <large-button outlined @click=\"cancel\" data-test=\"cancel-button\">{{$t('action.cancel')}}</large-button>\n+        </div>\n+        <large-button\n+          @click=\"done\"\n+          :disabled=\"invalid || duplicateClient ||\u00a0checkRunning\"\n+          data-test=\"next-button\"\n+        >{{$t('action.next')}}</large-button>\n+      </div>\n+    </ValidationObserver>\n+\n+    <SelectClientDialog\n+      :dialog=\"showSelectClient\"\n+      :selectableClients=\"selectableMembers\"\n+      @cancel=\"showSelectClient = false\"\n+      @save=\"saveSelectedClient\"\n+    />\n+  </div>\n+</template>\n+\n+<script lang=\"ts\">\n+import Vue from 'vue';\n+import { mapGetters } from 'vuex';\n+import FormLabel from '@/components/ui/FormLabel.vue';\n+import LargeButton from '@/components/ui/LargeButton.vue';\n+import SelectClientDialog from '@/components/client/SelectClientDialog.vue';\n+import { Client } from '@/types';\n+import { debounce } from '@/util/helpers';\n+import { ValidationProvider, ValidationObserver } from 'vee-validate';\n+import { AddMemberWizardModes } from '../../global';\n+\n+let that: any;\n+\n+export default Vue.extend({\n+  components: {\n+    FormLabel,\n+    LargeButton,\n+    ValidationObserver,\n+    ValidationProvider,\n+    SelectClientDialog,\n+  },\n+  computed: {\n+    ...mapGetters([\n+      'reservedMember',\n+      'memberClasses',\n+      'selectedMemberName',\n+    ]),\n+\n+    memberClass: {\n+      get(): string {\n+        return this.$store.getters.memberClass;\n+      },\n+      set(value: string) {\n+        this.$store.commit('setMemberClass', value);\n+      },\n+    },\n+\n+    memberCode: {\n+      get(): string {\n+        return this.$store.getters.memberCode;\n+      },\n+      set(value: string) {\n+        this.$store.commit('setMemberCode', value);\n+      },\n+    },\n+\n+    selectableMembers(): Client[] {\n+      // Filter out the owner member\n+      const filtered = this.$store.getters.selectableMembers.filter(\n+        (client: Client) => {\n+          if (", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTA0NjY0Mw=="}, "originalCommit": {"oid": "37090653d465500817204c66a484399164f5f4be"}, "originalPosition": 123}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4NDgzODM5OnYy", "diffSide": "RIGHT", "path": "src/proxy-ui-api/frontend/src/views/AddMember/MemberDetailsPage.vue", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxMToyODo0MlrOGbFBUA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxNDoyNzoxN1rOGcfGFw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTA0Njk5Mg==", "bodyText": "If clause can be removed and just return the comparison result. Like above.", "url": "https://github.com/nordic-institute/X-Road/pull/510#discussion_r431046992", "createdAt": "2020-05-27T11:28:42Z", "author": {"login": "TJaakkola"}, "path": "src/proxy-ui-api/frontend/src/views/AddMember/MemberDetailsPage.vue", "diffHunk": "@@ -0,0 +1,280 @@\n+<template>\n+  <div>\n+    <div class=\"info-block\">\n+      <div>\n+        {{$t('wizard.member.info1')}}\n+        <br />\n+        <br />\n+        {{$t('wizard.member.info2')}}\n+      </div>\n+      <div class=\"action-block\">\n+        <large-button\n+          @click=\"showSelectClient = true\"\n+          outlined\n+          data-test=\"select-client-button\"\n+        >{{$t('wizard.member.select')}}</large-button>\n+      </div>\n+    </div>\n+\n+    <ValidationObserver ref=\"form2\" v-slot=\"{ validate, invalid }\">\n+      <div class=\"row-wrap\">\n+        <FormLabel labelText=\"wizard.memberName\" helpText=\"wizard.client.memberNameTooltip\" />\n+        <div data-test=\"selected-member-name\">{{selectedMemberName}}</div>\n+      </div>\n+\n+      <div class=\"row-wrap\">\n+        <FormLabel labelText=\"wizard.memberClass\" helpText=\"wizard.client.memberClassTooltip\" />\n+\n+        <ValidationProvider name=\"addClient.memberClass\" rules=\"required\" v-slot=\"{ errors }\">\n+          <v-select\n+            :items=\"memberClasses\"\n+            class=\"form-input\"\n+            v-model=\"memberClass\"\n+            data-test=\"member-class-input\"\n+          ></v-select>\n+        </ValidationProvider>\n+      </div>\n+      <div class=\"row-wrap\">\n+        <FormLabel labelText=\"wizard.memberCode\" helpText=\"wizard.client.memberCodeTooltip\" />\n+\n+        <ValidationProvider name=\"addClient.memberCode\" rules=\"required\" v-slot=\"{ errors }\">\n+          <v-text-field\n+            class=\"form-input\"\n+            type=\"text\"\n+            :error-messages=\"errors\"\n+            v-model=\"memberCode\"\n+            data-test=\"member-code-input\"\n+          ></v-text-field>\n+        </ValidationProvider>\n+      </div>\n+\n+      <div v-if=\"duplicateClient\" class=\"duplicate-warning\">{{$t('wizard.client.memberExists')}}</div>\n+      <div class=\"button-footer\">\n+        <div class=\"button-group\">\n+          <large-button outlined @click=\"cancel\" data-test=\"cancel-button\">{{$t('action.cancel')}}</large-button>\n+        </div>\n+        <large-button\n+          @click=\"done\"\n+          :disabled=\"invalid || duplicateClient ||\u00a0checkRunning\"\n+          data-test=\"next-button\"\n+        >{{$t('action.next')}}</large-button>\n+      </div>\n+    </ValidationObserver>\n+\n+    <SelectClientDialog\n+      :dialog=\"showSelectClient\"\n+      :selectableClients=\"selectableMembers\"\n+      @cancel=\"showSelectClient = false\"\n+      @save=\"saveSelectedClient\"\n+    />\n+  </div>\n+</template>\n+\n+<script lang=\"ts\">\n+import Vue from 'vue';\n+import { mapGetters } from 'vuex';\n+import FormLabel from '@/components/ui/FormLabel.vue';\n+import LargeButton from '@/components/ui/LargeButton.vue';\n+import SelectClientDialog from '@/components/client/SelectClientDialog.vue';\n+import { Client } from '@/types';\n+import { debounce } from '@/util/helpers';\n+import { ValidationProvider, ValidationObserver } from 'vee-validate';\n+import { AddMemberWizardModes } from '../../global';\n+\n+let that: any;\n+\n+export default Vue.extend({\n+  components: {\n+    FormLabel,\n+    LargeButton,\n+    ValidationObserver,\n+    ValidationProvider,\n+    SelectClientDialog,\n+  },\n+  computed: {\n+    ...mapGetters([\n+      'reservedMember',\n+      'memberClasses',\n+      'selectedMemberName',\n+    ]),\n+\n+    memberClass: {\n+      get(): string {\n+        return this.$store.getters.memberClass;\n+      },\n+      set(value: string) {\n+        this.$store.commit('setMemberClass', value);\n+      },\n+    },\n+\n+    memberCode: {\n+      get(): string {\n+        return this.$store.getters.memberCode;\n+      },\n+      set(value: string) {\n+        this.$store.commit('setMemberCode', value);\n+      },\n+    },\n+\n+    selectableMembers(): Client[] {\n+      // Filter out the owner member\n+      const filtered = this.$store.getters.selectableMembers.filter(\n+        (client: Client) => {\n+          if (\n+            client.member_class === this.reservedMember.memberClass &&\n+            client.member_code === this.reservedMember.memberCode\n+          ) {\n+            return false;\n+          }\n+          return true;\n+        },\n+      );\n+      return filtered;\n+    },\n+\n+    duplicateClient(): boolean {\n+      if (!this.memberClass || !this.memberCode) {\n+        return false;\n+      }\n+\n+      // Check that the info doesn't match the reserved member (owner member)\n+      if (", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "37090653d465500817204c66a484399164f5f4be"}, "originalPosition": 141}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjUyMjc3NQ==", "bodyText": "Fixed", "url": "https://github.com/nordic-institute/X-Road/pull/510#discussion_r432522775", "createdAt": "2020-05-29T14:27:17Z", "author": {"login": "Riippi"}, "path": "src/proxy-ui-api/frontend/src/views/AddMember/MemberDetailsPage.vue", "diffHunk": "@@ -0,0 +1,280 @@\n+<template>\n+  <div>\n+    <div class=\"info-block\">\n+      <div>\n+        {{$t('wizard.member.info1')}}\n+        <br />\n+        <br />\n+        {{$t('wizard.member.info2')}}\n+      </div>\n+      <div class=\"action-block\">\n+        <large-button\n+          @click=\"showSelectClient = true\"\n+          outlined\n+          data-test=\"select-client-button\"\n+        >{{$t('wizard.member.select')}}</large-button>\n+      </div>\n+    </div>\n+\n+    <ValidationObserver ref=\"form2\" v-slot=\"{ validate, invalid }\">\n+      <div class=\"row-wrap\">\n+        <FormLabel labelText=\"wizard.memberName\" helpText=\"wizard.client.memberNameTooltip\" />\n+        <div data-test=\"selected-member-name\">{{selectedMemberName}}</div>\n+      </div>\n+\n+      <div class=\"row-wrap\">\n+        <FormLabel labelText=\"wizard.memberClass\" helpText=\"wizard.client.memberClassTooltip\" />\n+\n+        <ValidationProvider name=\"addClient.memberClass\" rules=\"required\" v-slot=\"{ errors }\">\n+          <v-select\n+            :items=\"memberClasses\"\n+            class=\"form-input\"\n+            v-model=\"memberClass\"\n+            data-test=\"member-class-input\"\n+          ></v-select>\n+        </ValidationProvider>\n+      </div>\n+      <div class=\"row-wrap\">\n+        <FormLabel labelText=\"wizard.memberCode\" helpText=\"wizard.client.memberCodeTooltip\" />\n+\n+        <ValidationProvider name=\"addClient.memberCode\" rules=\"required\" v-slot=\"{ errors }\">\n+          <v-text-field\n+            class=\"form-input\"\n+            type=\"text\"\n+            :error-messages=\"errors\"\n+            v-model=\"memberCode\"\n+            data-test=\"member-code-input\"\n+          ></v-text-field>\n+        </ValidationProvider>\n+      </div>\n+\n+      <div v-if=\"duplicateClient\" class=\"duplicate-warning\">{{$t('wizard.client.memberExists')}}</div>\n+      <div class=\"button-footer\">\n+        <div class=\"button-group\">\n+          <large-button outlined @click=\"cancel\" data-test=\"cancel-button\">{{$t('action.cancel')}}</large-button>\n+        </div>\n+        <large-button\n+          @click=\"done\"\n+          :disabled=\"invalid || duplicateClient ||\u00a0checkRunning\"\n+          data-test=\"next-button\"\n+        >{{$t('action.next')}}</large-button>\n+      </div>\n+    </ValidationObserver>\n+\n+    <SelectClientDialog\n+      :dialog=\"showSelectClient\"\n+      :selectableClients=\"selectableMembers\"\n+      @cancel=\"showSelectClient = false\"\n+      @save=\"saveSelectedClient\"\n+    />\n+  </div>\n+</template>\n+\n+<script lang=\"ts\">\n+import Vue from 'vue';\n+import { mapGetters } from 'vuex';\n+import FormLabel from '@/components/ui/FormLabel.vue';\n+import LargeButton from '@/components/ui/LargeButton.vue';\n+import SelectClientDialog from '@/components/client/SelectClientDialog.vue';\n+import { Client } from '@/types';\n+import { debounce } from '@/util/helpers';\n+import { ValidationProvider, ValidationObserver } from 'vee-validate';\n+import { AddMemberWizardModes } from '../../global';\n+\n+let that: any;\n+\n+export default Vue.extend({\n+  components: {\n+    FormLabel,\n+    LargeButton,\n+    ValidationObserver,\n+    ValidationProvider,\n+    SelectClientDialog,\n+  },\n+  computed: {\n+    ...mapGetters([\n+      'reservedMember',\n+      'memberClasses',\n+      'selectedMemberName',\n+    ]),\n+\n+    memberClass: {\n+      get(): string {\n+        return this.$store.getters.memberClass;\n+      },\n+      set(value: string) {\n+        this.$store.commit('setMemberClass', value);\n+      },\n+    },\n+\n+    memberCode: {\n+      get(): string {\n+        return this.$store.getters.memberCode;\n+      },\n+      set(value: string) {\n+        this.$store.commit('setMemberCode', value);\n+      },\n+    },\n+\n+    selectableMembers(): Client[] {\n+      // Filter out the owner member\n+      const filtered = this.$store.getters.selectableMembers.filter(\n+        (client: Client) => {\n+          if (\n+            client.member_class === this.reservedMember.memberClass &&\n+            client.member_code === this.reservedMember.memberCode\n+          ) {\n+            return false;\n+          }\n+          return true;\n+        },\n+      );\n+      return filtered;\n+    },\n+\n+    duplicateClient(): boolean {\n+      if (!this.memberClass || !this.memberCode) {\n+        return false;\n+      }\n+\n+      // Check that the info doesn't match the reserved member (owner member)\n+      if (", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTA0Njk5Mg=="}, "originalCommit": {"oid": "37090653d465500817204c66a484399164f5f4be"}, "originalPosition": 141}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4NDg0MTU1OnYy", "diffSide": "RIGHT", "path": "src/proxy-ui-api/frontend/src/views/AddMember/MemberDetailsPage.vue", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxMToyOTo0N1rOGbFDYg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxNDoyNzo0NFrOGcfHvg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTA0NzUyMg==", "bodyText": "Could be refactored like above.", "url": "https://github.com/nordic-institute/X-Road/pull/510#discussion_r431047522", "createdAt": "2020-05-27T11:29:47Z", "author": {"login": "TJaakkola"}, "path": "src/proxy-ui-api/frontend/src/views/AddMember/MemberDetailsPage.vue", "diffHunk": "@@ -0,0 +1,280 @@\n+<template>\n+  <div>\n+    <div class=\"info-block\">\n+      <div>\n+        {{$t('wizard.member.info1')}}\n+        <br />\n+        <br />\n+        {{$t('wizard.member.info2')}}\n+      </div>\n+      <div class=\"action-block\">\n+        <large-button\n+          @click=\"showSelectClient = true\"\n+          outlined\n+          data-test=\"select-client-button\"\n+        >{{$t('wizard.member.select')}}</large-button>\n+      </div>\n+    </div>\n+\n+    <ValidationObserver ref=\"form2\" v-slot=\"{ validate, invalid }\">\n+      <div class=\"row-wrap\">\n+        <FormLabel labelText=\"wizard.memberName\" helpText=\"wizard.client.memberNameTooltip\" />\n+        <div data-test=\"selected-member-name\">{{selectedMemberName}}</div>\n+      </div>\n+\n+      <div class=\"row-wrap\">\n+        <FormLabel labelText=\"wizard.memberClass\" helpText=\"wizard.client.memberClassTooltip\" />\n+\n+        <ValidationProvider name=\"addClient.memberClass\" rules=\"required\" v-slot=\"{ errors }\">\n+          <v-select\n+            :items=\"memberClasses\"\n+            class=\"form-input\"\n+            v-model=\"memberClass\"\n+            data-test=\"member-class-input\"\n+          ></v-select>\n+        </ValidationProvider>\n+      </div>\n+      <div class=\"row-wrap\">\n+        <FormLabel labelText=\"wizard.memberCode\" helpText=\"wizard.client.memberCodeTooltip\" />\n+\n+        <ValidationProvider name=\"addClient.memberCode\" rules=\"required\" v-slot=\"{ errors }\">\n+          <v-text-field\n+            class=\"form-input\"\n+            type=\"text\"\n+            :error-messages=\"errors\"\n+            v-model=\"memberCode\"\n+            data-test=\"member-code-input\"\n+          ></v-text-field>\n+        </ValidationProvider>\n+      </div>\n+\n+      <div v-if=\"duplicateClient\" class=\"duplicate-warning\">{{$t('wizard.client.memberExists')}}</div>\n+      <div class=\"button-footer\">\n+        <div class=\"button-group\">\n+          <large-button outlined @click=\"cancel\" data-test=\"cancel-button\">{{$t('action.cancel')}}</large-button>\n+        </div>\n+        <large-button\n+          @click=\"done\"\n+          :disabled=\"invalid || duplicateClient ||\u00a0checkRunning\"\n+          data-test=\"next-button\"\n+        >{{$t('action.next')}}</large-button>\n+      </div>\n+    </ValidationObserver>\n+\n+    <SelectClientDialog\n+      :dialog=\"showSelectClient\"\n+      :selectableClients=\"selectableMembers\"\n+      @cancel=\"showSelectClient = false\"\n+      @save=\"saveSelectedClient\"\n+    />\n+  </div>\n+</template>\n+\n+<script lang=\"ts\">\n+import Vue from 'vue';\n+import { mapGetters } from 'vuex';\n+import FormLabel from '@/components/ui/FormLabel.vue';\n+import LargeButton from '@/components/ui/LargeButton.vue';\n+import SelectClientDialog from '@/components/client/SelectClientDialog.vue';\n+import { Client } from '@/types';\n+import { debounce } from '@/util/helpers';\n+import { ValidationProvider, ValidationObserver } from 'vee-validate';\n+import { AddMemberWizardModes } from '../../global';\n+\n+let that: any;\n+\n+export default Vue.extend({\n+  components: {\n+    FormLabel,\n+    LargeButton,\n+    ValidationObserver,\n+    ValidationProvider,\n+    SelectClientDialog,\n+  },\n+  computed: {\n+    ...mapGetters([\n+      'reservedMember',\n+      'memberClasses',\n+      'selectedMemberName',\n+    ]),\n+\n+    memberClass: {\n+      get(): string {\n+        return this.$store.getters.memberClass;\n+      },\n+      set(value: string) {\n+        this.$store.commit('setMemberClass', value);\n+      },\n+    },\n+\n+    memberCode: {\n+      get(): string {\n+        return this.$store.getters.memberCode;\n+      },\n+      set(value: string) {\n+        this.$store.commit('setMemberCode', value);\n+      },\n+    },\n+\n+    selectableMembers(): Client[] {\n+      // Filter out the owner member\n+      const filtered = this.$store.getters.selectableMembers.filter(\n+        (client: Client) => {\n+          if (\n+            client.member_class === this.reservedMember.memberClass &&\n+            client.member_code === this.reservedMember.memberCode\n+          ) {\n+            return false;\n+          }\n+          return true;\n+        },\n+      );\n+      return filtered;\n+    },\n+\n+    duplicateClient(): boolean {\n+      if (!this.memberClass || !this.memberCode) {\n+        return false;\n+      }\n+\n+      // Check that the info doesn't match the reserved member (owner member)\n+      if (\n+        this.reservedMember.memberClass.toLowerCase() !==\n+          this.memberClass.toLowerCase() ||\n+        this.reservedMember.memberCode.toLowerCase() !==\n+          this.memberCode.toLowerCase()\n+      ) {\n+        return false;\n+      }\n+\n+      return true;\n+    },\n+  },\n+  data() {\n+    return {\n+      disableDone: false,\n+      certificationService: undefined,\n+      filteredServiceList: [],\n+      showSelectClient: false as boolean,\n+      checkRunning: false,\n+    };\n+  },\n+  methods: {\n+    cancel(): void {\n+      this.$emit('cancel');\n+    },\n+    done(): void {\n+      this.$emit('done');\n+    },\n+    saveSelectedClient(selectedMember: Client): void {\n+      this.$store.dispatch('setSelectedMember', selectedMember);\n+      this.showSelectClient = false;\n+    },\n+    checkClient(): void {\n+      this.checkRunning = true;\n+\n+      // Find if the selectable clients array has a match\n+      const tempClient = this.selectableMembers.find((client: Client) => {\n+        return (\n+          client.member_code === this.memberCode &&\n+          client.member_class === this.memberClass\n+        );\n+      });\n+\n+      // Fill the name \"field\" if it's available\n+      if (tempClient?.member_name) {\n+        this.$store.commit('setSelectedMemberName', tempClient.member_name);\n+      } else {\n+        // Clear the \"field\" if not\n+        this.$store.commit('setSelectedMemberName', undefined);\n+      }\n+\n+      this.checkClientDebounce();\n+    },\n+    checkClientDebounce: debounce(() => {\n+      // Debounce is used to reduce unnecessary api calls\n+      // Search tokens for suitable CSR:s and certificates\n+      that.$store\n+        .dispatch('searchTokens', {\n+          instanceId: that.reservedMember.instanceId,\n+          memberClass: that.memberClass,\n+          memberCode: that.memberCode,\n+        })\n+        .then(\n+          () => {\n+            that.checkRunning = false;\n+          },\n+          (error: Error) => {\n+            that.$store.dispatch('showError', error);\n+            that.checkRunning = true;\n+          },\n+        );\n+    }, 600),\n+  },\n+  created() {\n+    that = this;\n+    this.$store.commit('setAddMemberWizardMode', AddMemberWizardModes.FULL);\n+    this.$store.dispatch('fetchSelectableMembers');\n+  },\n+\n+  watch: {\n+    memberCode(val) {\n+      // Set first certification service selected as default when the list is updated\n+      this.$store.commit('setAddMemberWizardMode', AddMemberWizardModes.FULL);\n+      if (\n+        !val ||\n+        val.length < 1 ||\n+        !this.memberClass ||\n+        this.memberClass.length < 1\n+      ) {\n+        return;\n+      }\n+      this.checkClient();\n+    },\n+    memberClass(val) {\n+      // Set first certification service selected as default when the list is updated\n+      this.$store.commit('setAddMemberWizardMode', AddMemberWizardModes.FULL);\n+      if (\n+        !val ||\n+        val.length < 1 ||\n+        !this.memberCode ||\n+        this.memberCode.length < 1\n+      ) {\n+        return;\n+      }\n+      this.checkClient();\n+    },\n+\n+    memberClasses(val) {\n+      // Set first member class selected as default when the list is updated\n+      if (val && val.length === 1) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "37090653d465500817204c66a484399164f5f4be"}, "originalPosition": 250}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjUyMzE5OA==", "bodyText": "Fixed", "url": "https://github.com/nordic-institute/X-Road/pull/510#discussion_r432523198", "createdAt": "2020-05-29T14:27:44Z", "author": {"login": "Riippi"}, "path": "src/proxy-ui-api/frontend/src/views/AddMember/MemberDetailsPage.vue", "diffHunk": "@@ -0,0 +1,280 @@\n+<template>\n+  <div>\n+    <div class=\"info-block\">\n+      <div>\n+        {{$t('wizard.member.info1')}}\n+        <br />\n+        <br />\n+        {{$t('wizard.member.info2')}}\n+      </div>\n+      <div class=\"action-block\">\n+        <large-button\n+          @click=\"showSelectClient = true\"\n+          outlined\n+          data-test=\"select-client-button\"\n+        >{{$t('wizard.member.select')}}</large-button>\n+      </div>\n+    </div>\n+\n+    <ValidationObserver ref=\"form2\" v-slot=\"{ validate, invalid }\">\n+      <div class=\"row-wrap\">\n+        <FormLabel labelText=\"wizard.memberName\" helpText=\"wizard.client.memberNameTooltip\" />\n+        <div data-test=\"selected-member-name\">{{selectedMemberName}}</div>\n+      </div>\n+\n+      <div class=\"row-wrap\">\n+        <FormLabel labelText=\"wizard.memberClass\" helpText=\"wizard.client.memberClassTooltip\" />\n+\n+        <ValidationProvider name=\"addClient.memberClass\" rules=\"required\" v-slot=\"{ errors }\">\n+          <v-select\n+            :items=\"memberClasses\"\n+            class=\"form-input\"\n+            v-model=\"memberClass\"\n+            data-test=\"member-class-input\"\n+          ></v-select>\n+        </ValidationProvider>\n+      </div>\n+      <div class=\"row-wrap\">\n+        <FormLabel labelText=\"wizard.memberCode\" helpText=\"wizard.client.memberCodeTooltip\" />\n+\n+        <ValidationProvider name=\"addClient.memberCode\" rules=\"required\" v-slot=\"{ errors }\">\n+          <v-text-field\n+            class=\"form-input\"\n+            type=\"text\"\n+            :error-messages=\"errors\"\n+            v-model=\"memberCode\"\n+            data-test=\"member-code-input\"\n+          ></v-text-field>\n+        </ValidationProvider>\n+      </div>\n+\n+      <div v-if=\"duplicateClient\" class=\"duplicate-warning\">{{$t('wizard.client.memberExists')}}</div>\n+      <div class=\"button-footer\">\n+        <div class=\"button-group\">\n+          <large-button outlined @click=\"cancel\" data-test=\"cancel-button\">{{$t('action.cancel')}}</large-button>\n+        </div>\n+        <large-button\n+          @click=\"done\"\n+          :disabled=\"invalid || duplicateClient ||\u00a0checkRunning\"\n+          data-test=\"next-button\"\n+        >{{$t('action.next')}}</large-button>\n+      </div>\n+    </ValidationObserver>\n+\n+    <SelectClientDialog\n+      :dialog=\"showSelectClient\"\n+      :selectableClients=\"selectableMembers\"\n+      @cancel=\"showSelectClient = false\"\n+      @save=\"saveSelectedClient\"\n+    />\n+  </div>\n+</template>\n+\n+<script lang=\"ts\">\n+import Vue from 'vue';\n+import { mapGetters } from 'vuex';\n+import FormLabel from '@/components/ui/FormLabel.vue';\n+import LargeButton from '@/components/ui/LargeButton.vue';\n+import SelectClientDialog from '@/components/client/SelectClientDialog.vue';\n+import { Client } from '@/types';\n+import { debounce } from '@/util/helpers';\n+import { ValidationProvider, ValidationObserver } from 'vee-validate';\n+import { AddMemberWizardModes } from '../../global';\n+\n+let that: any;\n+\n+export default Vue.extend({\n+  components: {\n+    FormLabel,\n+    LargeButton,\n+    ValidationObserver,\n+    ValidationProvider,\n+    SelectClientDialog,\n+  },\n+  computed: {\n+    ...mapGetters([\n+      'reservedMember',\n+      'memberClasses',\n+      'selectedMemberName',\n+    ]),\n+\n+    memberClass: {\n+      get(): string {\n+        return this.$store.getters.memberClass;\n+      },\n+      set(value: string) {\n+        this.$store.commit('setMemberClass', value);\n+      },\n+    },\n+\n+    memberCode: {\n+      get(): string {\n+        return this.$store.getters.memberCode;\n+      },\n+      set(value: string) {\n+        this.$store.commit('setMemberCode', value);\n+      },\n+    },\n+\n+    selectableMembers(): Client[] {\n+      // Filter out the owner member\n+      const filtered = this.$store.getters.selectableMembers.filter(\n+        (client: Client) => {\n+          if (\n+            client.member_class === this.reservedMember.memberClass &&\n+            client.member_code === this.reservedMember.memberCode\n+          ) {\n+            return false;\n+          }\n+          return true;\n+        },\n+      );\n+      return filtered;\n+    },\n+\n+    duplicateClient(): boolean {\n+      if (!this.memberClass || !this.memberCode) {\n+        return false;\n+      }\n+\n+      // Check that the info doesn't match the reserved member (owner member)\n+      if (\n+        this.reservedMember.memberClass.toLowerCase() !==\n+          this.memberClass.toLowerCase() ||\n+        this.reservedMember.memberCode.toLowerCase() !==\n+          this.memberCode.toLowerCase()\n+      ) {\n+        return false;\n+      }\n+\n+      return true;\n+    },\n+  },\n+  data() {\n+    return {\n+      disableDone: false,\n+      certificationService: undefined,\n+      filteredServiceList: [],\n+      showSelectClient: false as boolean,\n+      checkRunning: false,\n+    };\n+  },\n+  methods: {\n+    cancel(): void {\n+      this.$emit('cancel');\n+    },\n+    done(): void {\n+      this.$emit('done');\n+    },\n+    saveSelectedClient(selectedMember: Client): void {\n+      this.$store.dispatch('setSelectedMember', selectedMember);\n+      this.showSelectClient = false;\n+    },\n+    checkClient(): void {\n+      this.checkRunning = true;\n+\n+      // Find if the selectable clients array has a match\n+      const tempClient = this.selectableMembers.find((client: Client) => {\n+        return (\n+          client.member_code === this.memberCode &&\n+          client.member_class === this.memberClass\n+        );\n+      });\n+\n+      // Fill the name \"field\" if it's available\n+      if (tempClient?.member_name) {\n+        this.$store.commit('setSelectedMemberName', tempClient.member_name);\n+      } else {\n+        // Clear the \"field\" if not\n+        this.$store.commit('setSelectedMemberName', undefined);\n+      }\n+\n+      this.checkClientDebounce();\n+    },\n+    checkClientDebounce: debounce(() => {\n+      // Debounce is used to reduce unnecessary api calls\n+      // Search tokens for suitable CSR:s and certificates\n+      that.$store\n+        .dispatch('searchTokens', {\n+          instanceId: that.reservedMember.instanceId,\n+          memberClass: that.memberClass,\n+          memberCode: that.memberCode,\n+        })\n+        .then(\n+          () => {\n+            that.checkRunning = false;\n+          },\n+          (error: Error) => {\n+            that.$store.dispatch('showError', error);\n+            that.checkRunning = true;\n+          },\n+        );\n+    }, 600),\n+  },\n+  created() {\n+    that = this;\n+    this.$store.commit('setAddMemberWizardMode', AddMemberWizardModes.FULL);\n+    this.$store.dispatch('fetchSelectableMembers');\n+  },\n+\n+  watch: {\n+    memberCode(val) {\n+      // Set first certification service selected as default when the list is updated\n+      this.$store.commit('setAddMemberWizardMode', AddMemberWizardModes.FULL);\n+      if (\n+        !val ||\n+        val.length < 1 ||\n+        !this.memberClass ||\n+        this.memberClass.length < 1\n+      ) {\n+        return;\n+      }\n+      this.checkClient();\n+    },\n+    memberClass(val) {\n+      // Set first certification service selected as default when the list is updated\n+      this.$store.commit('setAddMemberWizardMode', AddMemberWizardModes.FULL);\n+      if (\n+        !val ||\n+        val.length < 1 ||\n+        !this.memberCode ||\n+        this.memberCode.length < 1\n+      ) {\n+        return;\n+      }\n+      this.checkClient();\n+    },\n+\n+    memberClasses(val) {\n+      // Set first member class selected as default when the list is updated\n+      if (val && val.length === 1) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTA0NzUyMg=="}, "originalCommit": {"oid": "37090653d465500817204c66a484399164f5f4be"}, "originalPosition": 250}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4NTU3MDA2OnYy", "diffSide": "RIGHT", "path": "src/proxy-ui-api/frontend/src/views/AddMember/MemberDetailsPage.vue", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxNDoyMDoyMFrOGbMfzg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxMzoyODo1OFrOGcco2g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTE2OTQ4Ng==", "bodyText": "Typings missing", "url": "https://github.com/nordic-institute/X-Road/pull/510#discussion_r431169486", "createdAt": "2020-05-27T14:20:20Z", "author": {"login": "TJaakkola"}, "path": "src/proxy-ui-api/frontend/src/views/AddMember/MemberDetailsPage.vue", "diffHunk": "@@ -0,0 +1,280 @@\n+<template>\n+  <div>\n+    <div class=\"info-block\">\n+      <div>\n+        {{$t('wizard.member.info1')}}\n+        <br />\n+        <br />\n+        {{$t('wizard.member.info2')}}\n+      </div>\n+      <div class=\"action-block\">\n+        <large-button\n+          @click=\"showSelectClient = true\"\n+          outlined\n+          data-test=\"select-client-button\"\n+        >{{$t('wizard.member.select')}}</large-button>\n+      </div>\n+    </div>\n+\n+    <ValidationObserver ref=\"form2\" v-slot=\"{ validate, invalid }\">\n+      <div class=\"row-wrap\">\n+        <FormLabel labelText=\"wizard.memberName\" helpText=\"wizard.client.memberNameTooltip\" />\n+        <div data-test=\"selected-member-name\">{{selectedMemberName}}</div>\n+      </div>\n+\n+      <div class=\"row-wrap\">\n+        <FormLabel labelText=\"wizard.memberClass\" helpText=\"wizard.client.memberClassTooltip\" />\n+\n+        <ValidationProvider name=\"addClient.memberClass\" rules=\"required\" v-slot=\"{ errors }\">\n+          <v-select\n+            :items=\"memberClasses\"\n+            class=\"form-input\"\n+            v-model=\"memberClass\"\n+            data-test=\"member-class-input\"\n+          ></v-select>\n+        </ValidationProvider>\n+      </div>\n+      <div class=\"row-wrap\">\n+        <FormLabel labelText=\"wizard.memberCode\" helpText=\"wizard.client.memberCodeTooltip\" />\n+\n+        <ValidationProvider name=\"addClient.memberCode\" rules=\"required\" v-slot=\"{ errors }\">\n+          <v-text-field\n+            class=\"form-input\"\n+            type=\"text\"\n+            :error-messages=\"errors\"\n+            v-model=\"memberCode\"\n+            data-test=\"member-code-input\"\n+          ></v-text-field>\n+        </ValidationProvider>\n+      </div>\n+\n+      <div v-if=\"duplicateClient\" class=\"duplicate-warning\">{{$t('wizard.client.memberExists')}}</div>\n+      <div class=\"button-footer\">\n+        <div class=\"button-group\">\n+          <large-button outlined @click=\"cancel\" data-test=\"cancel-button\">{{$t('action.cancel')}}</large-button>\n+        </div>\n+        <large-button\n+          @click=\"done\"\n+          :disabled=\"invalid || duplicateClient ||\u00a0checkRunning\"\n+          data-test=\"next-button\"\n+        >{{$t('action.next')}}</large-button>\n+      </div>\n+    </ValidationObserver>\n+\n+    <SelectClientDialog\n+      :dialog=\"showSelectClient\"\n+      :selectableClients=\"selectableMembers\"\n+      @cancel=\"showSelectClient = false\"\n+      @save=\"saveSelectedClient\"\n+    />\n+  </div>\n+</template>\n+\n+<script lang=\"ts\">\n+import Vue from 'vue';\n+import { mapGetters } from 'vuex';\n+import FormLabel from '@/components/ui/FormLabel.vue';\n+import LargeButton from '@/components/ui/LargeButton.vue';\n+import SelectClientDialog from '@/components/client/SelectClientDialog.vue';\n+import { Client } from '@/types';\n+import { debounce } from '@/util/helpers';\n+import { ValidationProvider, ValidationObserver } from 'vee-validate';\n+import { AddMemberWizardModes } from '../../global';\n+\n+let that: any;\n+\n+export default Vue.extend({\n+  components: {\n+    FormLabel,\n+    LargeButton,\n+    ValidationObserver,\n+    ValidationProvider,\n+    SelectClientDialog,\n+  },\n+  computed: {\n+    ...mapGetters([\n+      'reservedMember',\n+      'memberClasses',\n+      'selectedMemberName',\n+    ]),\n+\n+    memberClass: {\n+      get(): string {\n+        return this.$store.getters.memberClass;\n+      },\n+      set(value: string) {\n+        this.$store.commit('setMemberClass', value);\n+      },\n+    },\n+\n+    memberCode: {\n+      get(): string {\n+        return this.$store.getters.memberCode;\n+      },\n+      set(value: string) {\n+        this.$store.commit('setMemberCode', value);\n+      },\n+    },\n+\n+    selectableMembers(): Client[] {\n+      // Filter out the owner member\n+      const filtered = this.$store.getters.selectableMembers.filter(\n+        (client: Client) => {\n+          if (\n+            client.member_class === this.reservedMember.memberClass &&\n+            client.member_code === this.reservedMember.memberCode\n+          ) {\n+            return false;\n+          }\n+          return true;\n+        },\n+      );\n+      return filtered;\n+    },\n+\n+    duplicateClient(): boolean {\n+      if (!this.memberClass || !this.memberCode) {\n+        return false;\n+      }\n+\n+      // Check that the info doesn't match the reserved member (owner member)\n+      if (\n+        this.reservedMember.memberClass.toLowerCase() !==\n+          this.memberClass.toLowerCase() ||\n+        this.reservedMember.memberCode.toLowerCase() !==\n+          this.memberCode.toLowerCase()\n+      ) {\n+        return false;\n+      }\n+\n+      return true;\n+    },\n+  },\n+  data() {\n+    return {\n+      disableDone: false,\n+      certificationService: undefined,\n+      filteredServiceList: [],\n+      showSelectClient: false as boolean,\n+      checkRunning: false,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "37090653d465500817204c66a484399164f5f4be"}, "originalPosition": 159}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjQ4MjUyMg==", "bodyText": "Fixed", "url": "https://github.com/nordic-institute/X-Road/pull/510#discussion_r432482522", "createdAt": "2020-05-29T13:28:58Z", "author": {"login": "Riippi"}, "path": "src/proxy-ui-api/frontend/src/views/AddMember/MemberDetailsPage.vue", "diffHunk": "@@ -0,0 +1,280 @@\n+<template>\n+  <div>\n+    <div class=\"info-block\">\n+      <div>\n+        {{$t('wizard.member.info1')}}\n+        <br />\n+        <br />\n+        {{$t('wizard.member.info2')}}\n+      </div>\n+      <div class=\"action-block\">\n+        <large-button\n+          @click=\"showSelectClient = true\"\n+          outlined\n+          data-test=\"select-client-button\"\n+        >{{$t('wizard.member.select')}}</large-button>\n+      </div>\n+    </div>\n+\n+    <ValidationObserver ref=\"form2\" v-slot=\"{ validate, invalid }\">\n+      <div class=\"row-wrap\">\n+        <FormLabel labelText=\"wizard.memberName\" helpText=\"wizard.client.memberNameTooltip\" />\n+        <div data-test=\"selected-member-name\">{{selectedMemberName}}</div>\n+      </div>\n+\n+      <div class=\"row-wrap\">\n+        <FormLabel labelText=\"wizard.memberClass\" helpText=\"wizard.client.memberClassTooltip\" />\n+\n+        <ValidationProvider name=\"addClient.memberClass\" rules=\"required\" v-slot=\"{ errors }\">\n+          <v-select\n+            :items=\"memberClasses\"\n+            class=\"form-input\"\n+            v-model=\"memberClass\"\n+            data-test=\"member-class-input\"\n+          ></v-select>\n+        </ValidationProvider>\n+      </div>\n+      <div class=\"row-wrap\">\n+        <FormLabel labelText=\"wizard.memberCode\" helpText=\"wizard.client.memberCodeTooltip\" />\n+\n+        <ValidationProvider name=\"addClient.memberCode\" rules=\"required\" v-slot=\"{ errors }\">\n+          <v-text-field\n+            class=\"form-input\"\n+            type=\"text\"\n+            :error-messages=\"errors\"\n+            v-model=\"memberCode\"\n+            data-test=\"member-code-input\"\n+          ></v-text-field>\n+        </ValidationProvider>\n+      </div>\n+\n+      <div v-if=\"duplicateClient\" class=\"duplicate-warning\">{{$t('wizard.client.memberExists')}}</div>\n+      <div class=\"button-footer\">\n+        <div class=\"button-group\">\n+          <large-button outlined @click=\"cancel\" data-test=\"cancel-button\">{{$t('action.cancel')}}</large-button>\n+        </div>\n+        <large-button\n+          @click=\"done\"\n+          :disabled=\"invalid || duplicateClient ||\u00a0checkRunning\"\n+          data-test=\"next-button\"\n+        >{{$t('action.next')}}</large-button>\n+      </div>\n+    </ValidationObserver>\n+\n+    <SelectClientDialog\n+      :dialog=\"showSelectClient\"\n+      :selectableClients=\"selectableMembers\"\n+      @cancel=\"showSelectClient = false\"\n+      @save=\"saveSelectedClient\"\n+    />\n+  </div>\n+</template>\n+\n+<script lang=\"ts\">\n+import Vue from 'vue';\n+import { mapGetters } from 'vuex';\n+import FormLabel from '@/components/ui/FormLabel.vue';\n+import LargeButton from '@/components/ui/LargeButton.vue';\n+import SelectClientDialog from '@/components/client/SelectClientDialog.vue';\n+import { Client } from '@/types';\n+import { debounce } from '@/util/helpers';\n+import { ValidationProvider, ValidationObserver } from 'vee-validate';\n+import { AddMemberWizardModes } from '../../global';\n+\n+let that: any;\n+\n+export default Vue.extend({\n+  components: {\n+    FormLabel,\n+    LargeButton,\n+    ValidationObserver,\n+    ValidationProvider,\n+    SelectClientDialog,\n+  },\n+  computed: {\n+    ...mapGetters([\n+      'reservedMember',\n+      'memberClasses',\n+      'selectedMemberName',\n+    ]),\n+\n+    memberClass: {\n+      get(): string {\n+        return this.$store.getters.memberClass;\n+      },\n+      set(value: string) {\n+        this.$store.commit('setMemberClass', value);\n+      },\n+    },\n+\n+    memberCode: {\n+      get(): string {\n+        return this.$store.getters.memberCode;\n+      },\n+      set(value: string) {\n+        this.$store.commit('setMemberCode', value);\n+      },\n+    },\n+\n+    selectableMembers(): Client[] {\n+      // Filter out the owner member\n+      const filtered = this.$store.getters.selectableMembers.filter(\n+        (client: Client) => {\n+          if (\n+            client.member_class === this.reservedMember.memberClass &&\n+            client.member_code === this.reservedMember.memberCode\n+          ) {\n+            return false;\n+          }\n+          return true;\n+        },\n+      );\n+      return filtered;\n+    },\n+\n+    duplicateClient(): boolean {\n+      if (!this.memberClass || !this.memberCode) {\n+        return false;\n+      }\n+\n+      // Check that the info doesn't match the reserved member (owner member)\n+      if (\n+        this.reservedMember.memberClass.toLowerCase() !==\n+          this.memberClass.toLowerCase() ||\n+        this.reservedMember.memberCode.toLowerCase() !==\n+          this.memberCode.toLowerCase()\n+      ) {\n+        return false;\n+      }\n+\n+      return true;\n+    },\n+  },\n+  data() {\n+    return {\n+      disableDone: false,\n+      certificationService: undefined,\n+      filteredServiceList: [],\n+      showSelectClient: false as boolean,\n+      checkRunning: false,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTE2OTQ4Ng=="}, "originalCommit": {"oid": "37090653d465500817204c66a484399164f5f4be"}, "originalPosition": 159}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4NTU4MTA0OnYy", "diffSide": "RIGHT", "path": "src/proxy-ui-api/frontend/src/views/AddMember/MemberDetailsPage.vue", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxNDoyMjozMVrOGbMmvA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxMzoyODoyM1rOGccnZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTE3MTI2MA==", "bodyText": "Maybe simplify this to:\nthis.$store.commit('setSelectedMemberName', tempClient?.member_name);", "url": "https://github.com/nordic-institute/X-Road/pull/510#discussion_r431171260", "createdAt": "2020-05-27T14:22:31Z", "author": {"login": "TJaakkola"}, "path": "src/proxy-ui-api/frontend/src/views/AddMember/MemberDetailsPage.vue", "diffHunk": "@@ -0,0 +1,280 @@\n+<template>\n+  <div>\n+    <div class=\"info-block\">\n+      <div>\n+        {{$t('wizard.member.info1')}}\n+        <br />\n+        <br />\n+        {{$t('wizard.member.info2')}}\n+      </div>\n+      <div class=\"action-block\">\n+        <large-button\n+          @click=\"showSelectClient = true\"\n+          outlined\n+          data-test=\"select-client-button\"\n+        >{{$t('wizard.member.select')}}</large-button>\n+      </div>\n+    </div>\n+\n+    <ValidationObserver ref=\"form2\" v-slot=\"{ validate, invalid }\">\n+      <div class=\"row-wrap\">\n+        <FormLabel labelText=\"wizard.memberName\" helpText=\"wizard.client.memberNameTooltip\" />\n+        <div data-test=\"selected-member-name\">{{selectedMemberName}}</div>\n+      </div>\n+\n+      <div class=\"row-wrap\">\n+        <FormLabel labelText=\"wizard.memberClass\" helpText=\"wizard.client.memberClassTooltip\" />\n+\n+        <ValidationProvider name=\"addClient.memberClass\" rules=\"required\" v-slot=\"{ errors }\">\n+          <v-select\n+            :items=\"memberClasses\"\n+            class=\"form-input\"\n+            v-model=\"memberClass\"\n+            data-test=\"member-class-input\"\n+          ></v-select>\n+        </ValidationProvider>\n+      </div>\n+      <div class=\"row-wrap\">\n+        <FormLabel labelText=\"wizard.memberCode\" helpText=\"wizard.client.memberCodeTooltip\" />\n+\n+        <ValidationProvider name=\"addClient.memberCode\" rules=\"required\" v-slot=\"{ errors }\">\n+          <v-text-field\n+            class=\"form-input\"\n+            type=\"text\"\n+            :error-messages=\"errors\"\n+            v-model=\"memberCode\"\n+            data-test=\"member-code-input\"\n+          ></v-text-field>\n+        </ValidationProvider>\n+      </div>\n+\n+      <div v-if=\"duplicateClient\" class=\"duplicate-warning\">{{$t('wizard.client.memberExists')}}</div>\n+      <div class=\"button-footer\">\n+        <div class=\"button-group\">\n+          <large-button outlined @click=\"cancel\" data-test=\"cancel-button\">{{$t('action.cancel')}}</large-button>\n+        </div>\n+        <large-button\n+          @click=\"done\"\n+          :disabled=\"invalid || duplicateClient ||\u00a0checkRunning\"\n+          data-test=\"next-button\"\n+        >{{$t('action.next')}}</large-button>\n+      </div>\n+    </ValidationObserver>\n+\n+    <SelectClientDialog\n+      :dialog=\"showSelectClient\"\n+      :selectableClients=\"selectableMembers\"\n+      @cancel=\"showSelectClient = false\"\n+      @save=\"saveSelectedClient\"\n+    />\n+  </div>\n+</template>\n+\n+<script lang=\"ts\">\n+import Vue from 'vue';\n+import { mapGetters } from 'vuex';\n+import FormLabel from '@/components/ui/FormLabel.vue';\n+import LargeButton from '@/components/ui/LargeButton.vue';\n+import SelectClientDialog from '@/components/client/SelectClientDialog.vue';\n+import { Client } from '@/types';\n+import { debounce } from '@/util/helpers';\n+import { ValidationProvider, ValidationObserver } from 'vee-validate';\n+import { AddMemberWizardModes } from '../../global';\n+\n+let that: any;\n+\n+export default Vue.extend({\n+  components: {\n+    FormLabel,\n+    LargeButton,\n+    ValidationObserver,\n+    ValidationProvider,\n+    SelectClientDialog,\n+  },\n+  computed: {\n+    ...mapGetters([\n+      'reservedMember',\n+      'memberClasses',\n+      'selectedMemberName',\n+    ]),\n+\n+    memberClass: {\n+      get(): string {\n+        return this.$store.getters.memberClass;\n+      },\n+      set(value: string) {\n+        this.$store.commit('setMemberClass', value);\n+      },\n+    },\n+\n+    memberCode: {\n+      get(): string {\n+        return this.$store.getters.memberCode;\n+      },\n+      set(value: string) {\n+        this.$store.commit('setMemberCode', value);\n+      },\n+    },\n+\n+    selectableMembers(): Client[] {\n+      // Filter out the owner member\n+      const filtered = this.$store.getters.selectableMembers.filter(\n+        (client: Client) => {\n+          if (\n+            client.member_class === this.reservedMember.memberClass &&\n+            client.member_code === this.reservedMember.memberCode\n+          ) {\n+            return false;\n+          }\n+          return true;\n+        },\n+      );\n+      return filtered;\n+    },\n+\n+    duplicateClient(): boolean {\n+      if (!this.memberClass || !this.memberCode) {\n+        return false;\n+      }\n+\n+      // Check that the info doesn't match the reserved member (owner member)\n+      if (\n+        this.reservedMember.memberClass.toLowerCase() !==\n+          this.memberClass.toLowerCase() ||\n+        this.reservedMember.memberCode.toLowerCase() !==\n+          this.memberCode.toLowerCase()\n+      ) {\n+        return false;\n+      }\n+\n+      return true;\n+    },\n+  },\n+  data() {\n+    return {\n+      disableDone: false,\n+      certificationService: undefined,\n+      filteredServiceList: [],\n+      showSelectClient: false as boolean,\n+      checkRunning: false,\n+    };\n+  },\n+  methods: {\n+    cancel(): void {\n+      this.$emit('cancel');\n+    },\n+    done(): void {\n+      this.$emit('done');\n+    },\n+    saveSelectedClient(selectedMember: Client): void {\n+      this.$store.dispatch('setSelectedMember', selectedMember);\n+      this.showSelectClient = false;\n+    },\n+    checkClient(): void {\n+      this.checkRunning = true;\n+\n+      // Find if the selectable clients array has a match\n+      const tempClient = this.selectableMembers.find((client: Client) => {\n+        return (\n+          client.member_code === this.memberCode &&\n+          client.member_class === this.memberClass\n+        );\n+      });\n+\n+      // Fill the name \"field\" if it's available\n+      if (tempClient?.member_name) {\n+        this.$store.commit('setSelectedMemberName', tempClient.member_name);\n+      } else {\n+        // Clear the \"field\" if not\n+        this.$store.commit('setSelectedMemberName', undefined);\n+      }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "37090653d465500817204c66a484399164f5f4be"}, "originalPosition": 190}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjQ4MjE0OA==", "bodyText": "Fixed", "url": "https://github.com/nordic-institute/X-Road/pull/510#discussion_r432482148", "createdAt": "2020-05-29T13:28:23Z", "author": {"login": "Riippi"}, "path": "src/proxy-ui-api/frontend/src/views/AddMember/MemberDetailsPage.vue", "diffHunk": "@@ -0,0 +1,280 @@\n+<template>\n+  <div>\n+    <div class=\"info-block\">\n+      <div>\n+        {{$t('wizard.member.info1')}}\n+        <br />\n+        <br />\n+        {{$t('wizard.member.info2')}}\n+      </div>\n+      <div class=\"action-block\">\n+        <large-button\n+          @click=\"showSelectClient = true\"\n+          outlined\n+          data-test=\"select-client-button\"\n+        >{{$t('wizard.member.select')}}</large-button>\n+      </div>\n+    </div>\n+\n+    <ValidationObserver ref=\"form2\" v-slot=\"{ validate, invalid }\">\n+      <div class=\"row-wrap\">\n+        <FormLabel labelText=\"wizard.memberName\" helpText=\"wizard.client.memberNameTooltip\" />\n+        <div data-test=\"selected-member-name\">{{selectedMemberName}}</div>\n+      </div>\n+\n+      <div class=\"row-wrap\">\n+        <FormLabel labelText=\"wizard.memberClass\" helpText=\"wizard.client.memberClassTooltip\" />\n+\n+        <ValidationProvider name=\"addClient.memberClass\" rules=\"required\" v-slot=\"{ errors }\">\n+          <v-select\n+            :items=\"memberClasses\"\n+            class=\"form-input\"\n+            v-model=\"memberClass\"\n+            data-test=\"member-class-input\"\n+          ></v-select>\n+        </ValidationProvider>\n+      </div>\n+      <div class=\"row-wrap\">\n+        <FormLabel labelText=\"wizard.memberCode\" helpText=\"wizard.client.memberCodeTooltip\" />\n+\n+        <ValidationProvider name=\"addClient.memberCode\" rules=\"required\" v-slot=\"{ errors }\">\n+          <v-text-field\n+            class=\"form-input\"\n+            type=\"text\"\n+            :error-messages=\"errors\"\n+            v-model=\"memberCode\"\n+            data-test=\"member-code-input\"\n+          ></v-text-field>\n+        </ValidationProvider>\n+      </div>\n+\n+      <div v-if=\"duplicateClient\" class=\"duplicate-warning\">{{$t('wizard.client.memberExists')}}</div>\n+      <div class=\"button-footer\">\n+        <div class=\"button-group\">\n+          <large-button outlined @click=\"cancel\" data-test=\"cancel-button\">{{$t('action.cancel')}}</large-button>\n+        </div>\n+        <large-button\n+          @click=\"done\"\n+          :disabled=\"invalid || duplicateClient ||\u00a0checkRunning\"\n+          data-test=\"next-button\"\n+        >{{$t('action.next')}}</large-button>\n+      </div>\n+    </ValidationObserver>\n+\n+    <SelectClientDialog\n+      :dialog=\"showSelectClient\"\n+      :selectableClients=\"selectableMembers\"\n+      @cancel=\"showSelectClient = false\"\n+      @save=\"saveSelectedClient\"\n+    />\n+  </div>\n+</template>\n+\n+<script lang=\"ts\">\n+import Vue from 'vue';\n+import { mapGetters } from 'vuex';\n+import FormLabel from '@/components/ui/FormLabel.vue';\n+import LargeButton from '@/components/ui/LargeButton.vue';\n+import SelectClientDialog from '@/components/client/SelectClientDialog.vue';\n+import { Client } from '@/types';\n+import { debounce } from '@/util/helpers';\n+import { ValidationProvider, ValidationObserver } from 'vee-validate';\n+import { AddMemberWizardModes } from '../../global';\n+\n+let that: any;\n+\n+export default Vue.extend({\n+  components: {\n+    FormLabel,\n+    LargeButton,\n+    ValidationObserver,\n+    ValidationProvider,\n+    SelectClientDialog,\n+  },\n+  computed: {\n+    ...mapGetters([\n+      'reservedMember',\n+      'memberClasses',\n+      'selectedMemberName',\n+    ]),\n+\n+    memberClass: {\n+      get(): string {\n+        return this.$store.getters.memberClass;\n+      },\n+      set(value: string) {\n+        this.$store.commit('setMemberClass', value);\n+      },\n+    },\n+\n+    memberCode: {\n+      get(): string {\n+        return this.$store.getters.memberCode;\n+      },\n+      set(value: string) {\n+        this.$store.commit('setMemberCode', value);\n+      },\n+    },\n+\n+    selectableMembers(): Client[] {\n+      // Filter out the owner member\n+      const filtered = this.$store.getters.selectableMembers.filter(\n+        (client: Client) => {\n+          if (\n+            client.member_class === this.reservedMember.memberClass &&\n+            client.member_code === this.reservedMember.memberCode\n+          ) {\n+            return false;\n+          }\n+          return true;\n+        },\n+      );\n+      return filtered;\n+    },\n+\n+    duplicateClient(): boolean {\n+      if (!this.memberClass || !this.memberCode) {\n+        return false;\n+      }\n+\n+      // Check that the info doesn't match the reserved member (owner member)\n+      if (\n+        this.reservedMember.memberClass.toLowerCase() !==\n+          this.memberClass.toLowerCase() ||\n+        this.reservedMember.memberCode.toLowerCase() !==\n+          this.memberCode.toLowerCase()\n+      ) {\n+        return false;\n+      }\n+\n+      return true;\n+    },\n+  },\n+  data() {\n+    return {\n+      disableDone: false,\n+      certificationService: undefined,\n+      filteredServiceList: [],\n+      showSelectClient: false as boolean,\n+      checkRunning: false,\n+    };\n+  },\n+  methods: {\n+    cancel(): void {\n+      this.$emit('cancel');\n+    },\n+    done(): void {\n+      this.$emit('done');\n+    },\n+    saveSelectedClient(selectedMember: Client): void {\n+      this.$store.dispatch('setSelectedMember', selectedMember);\n+      this.showSelectClient = false;\n+    },\n+    checkClient(): void {\n+      this.checkRunning = true;\n+\n+      // Find if the selectable clients array has a match\n+      const tempClient = this.selectableMembers.find((client: Client) => {\n+        return (\n+          client.member_code === this.memberCode &&\n+          client.member_class === this.memberClass\n+        );\n+      });\n+\n+      // Fill the name \"field\" if it's available\n+      if (tempClient?.member_name) {\n+        this.$store.commit('setSelectedMemberName', tempClient.member_name);\n+      } else {\n+        // Clear the \"field\" if not\n+        this.$store.commit('setSelectedMemberName', undefined);\n+      }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTE3MTI2MA=="}, "originalCommit": {"oid": "37090653d465500817204c66a484399164f5f4be"}, "originalPosition": 190}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4NTY2OTM4OnYy", "diffSide": "RIGHT", "path": "src/proxy-ui-api/frontend/src/views/AddMember/MemberDetailsPage.vue", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxNDozNTo0MVrOGbNe1w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxMzoyMToxMlrOGccWbQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTE4NTYyMw==", "bodyText": "I think these are empty string checks. We could write a utility function isEmpty and use that -> removed duplication here and below & easier to read code as the utility method name would describe what it does.", "url": "https://github.com/nordic-institute/X-Road/pull/510#discussion_r431185623", "createdAt": "2020-05-27T14:35:41Z", "author": {"login": "TJaakkola"}, "path": "src/proxy-ui-api/frontend/src/views/AddMember/MemberDetailsPage.vue", "diffHunk": "@@ -0,0 +1,280 @@\n+<template>\n+  <div>\n+    <div class=\"info-block\">\n+      <div>\n+        {{$t('wizard.member.info1')}}\n+        <br />\n+        <br />\n+        {{$t('wizard.member.info2')}}\n+      </div>\n+      <div class=\"action-block\">\n+        <large-button\n+          @click=\"showSelectClient = true\"\n+          outlined\n+          data-test=\"select-client-button\"\n+        >{{$t('wizard.member.select')}}</large-button>\n+      </div>\n+    </div>\n+\n+    <ValidationObserver ref=\"form2\" v-slot=\"{ validate, invalid }\">\n+      <div class=\"row-wrap\">\n+        <FormLabel labelText=\"wizard.memberName\" helpText=\"wizard.client.memberNameTooltip\" />\n+        <div data-test=\"selected-member-name\">{{selectedMemberName}}</div>\n+      </div>\n+\n+      <div class=\"row-wrap\">\n+        <FormLabel labelText=\"wizard.memberClass\" helpText=\"wizard.client.memberClassTooltip\" />\n+\n+        <ValidationProvider name=\"addClient.memberClass\" rules=\"required\" v-slot=\"{ errors }\">\n+          <v-select\n+            :items=\"memberClasses\"\n+            class=\"form-input\"\n+            v-model=\"memberClass\"\n+            data-test=\"member-class-input\"\n+          ></v-select>\n+        </ValidationProvider>\n+      </div>\n+      <div class=\"row-wrap\">\n+        <FormLabel labelText=\"wizard.memberCode\" helpText=\"wizard.client.memberCodeTooltip\" />\n+\n+        <ValidationProvider name=\"addClient.memberCode\" rules=\"required\" v-slot=\"{ errors }\">\n+          <v-text-field\n+            class=\"form-input\"\n+            type=\"text\"\n+            :error-messages=\"errors\"\n+            v-model=\"memberCode\"\n+            data-test=\"member-code-input\"\n+          ></v-text-field>\n+        </ValidationProvider>\n+      </div>\n+\n+      <div v-if=\"duplicateClient\" class=\"duplicate-warning\">{{$t('wizard.client.memberExists')}}</div>\n+      <div class=\"button-footer\">\n+        <div class=\"button-group\">\n+          <large-button outlined @click=\"cancel\" data-test=\"cancel-button\">{{$t('action.cancel')}}</large-button>\n+        </div>\n+        <large-button\n+          @click=\"done\"\n+          :disabled=\"invalid || duplicateClient ||\u00a0checkRunning\"\n+          data-test=\"next-button\"\n+        >{{$t('action.next')}}</large-button>\n+      </div>\n+    </ValidationObserver>\n+\n+    <SelectClientDialog\n+      :dialog=\"showSelectClient\"\n+      :selectableClients=\"selectableMembers\"\n+      @cancel=\"showSelectClient = false\"\n+      @save=\"saveSelectedClient\"\n+    />\n+  </div>\n+</template>\n+\n+<script lang=\"ts\">\n+import Vue from 'vue';\n+import { mapGetters } from 'vuex';\n+import FormLabel from '@/components/ui/FormLabel.vue';\n+import LargeButton from '@/components/ui/LargeButton.vue';\n+import SelectClientDialog from '@/components/client/SelectClientDialog.vue';\n+import { Client } from '@/types';\n+import { debounce } from '@/util/helpers';\n+import { ValidationProvider, ValidationObserver } from 'vee-validate';\n+import { AddMemberWizardModes } from '../../global';\n+\n+let that: any;\n+\n+export default Vue.extend({\n+  components: {\n+    FormLabel,\n+    LargeButton,\n+    ValidationObserver,\n+    ValidationProvider,\n+    SelectClientDialog,\n+  },\n+  computed: {\n+    ...mapGetters([\n+      'reservedMember',\n+      'memberClasses',\n+      'selectedMemberName',\n+    ]),\n+\n+    memberClass: {\n+      get(): string {\n+        return this.$store.getters.memberClass;\n+      },\n+      set(value: string) {\n+        this.$store.commit('setMemberClass', value);\n+      },\n+    },\n+\n+    memberCode: {\n+      get(): string {\n+        return this.$store.getters.memberCode;\n+      },\n+      set(value: string) {\n+        this.$store.commit('setMemberCode', value);\n+      },\n+    },\n+\n+    selectableMembers(): Client[] {\n+      // Filter out the owner member\n+      const filtered = this.$store.getters.selectableMembers.filter(\n+        (client: Client) => {\n+          if (\n+            client.member_class === this.reservedMember.memberClass &&\n+            client.member_code === this.reservedMember.memberCode\n+          ) {\n+            return false;\n+          }\n+          return true;\n+        },\n+      );\n+      return filtered;\n+    },\n+\n+    duplicateClient(): boolean {\n+      if (!this.memberClass || !this.memberCode) {\n+        return false;\n+      }\n+\n+      // Check that the info doesn't match the reserved member (owner member)\n+      if (\n+        this.reservedMember.memberClass.toLowerCase() !==\n+          this.memberClass.toLowerCase() ||\n+        this.reservedMember.memberCode.toLowerCase() !==\n+          this.memberCode.toLowerCase()\n+      ) {\n+        return false;\n+      }\n+\n+      return true;\n+    },\n+  },\n+  data() {\n+    return {\n+      disableDone: false,\n+      certificationService: undefined,\n+      filteredServiceList: [],\n+      showSelectClient: false as boolean,\n+      checkRunning: false,\n+    };\n+  },\n+  methods: {\n+    cancel(): void {\n+      this.$emit('cancel');\n+    },\n+    done(): void {\n+      this.$emit('done');\n+    },\n+    saveSelectedClient(selectedMember: Client): void {\n+      this.$store.dispatch('setSelectedMember', selectedMember);\n+      this.showSelectClient = false;\n+    },\n+    checkClient(): void {\n+      this.checkRunning = true;\n+\n+      // Find if the selectable clients array has a match\n+      const tempClient = this.selectableMembers.find((client: Client) => {\n+        return (\n+          client.member_code === this.memberCode &&\n+          client.member_class === this.memberClass\n+        );\n+      });\n+\n+      // Fill the name \"field\" if it's available\n+      if (tempClient?.member_name) {\n+        this.$store.commit('setSelectedMemberName', tempClient.member_name);\n+      } else {\n+        // Clear the \"field\" if not\n+        this.$store.commit('setSelectedMemberName', undefined);\n+      }\n+\n+      this.checkClientDebounce();\n+    },\n+    checkClientDebounce: debounce(() => {\n+      // Debounce is used to reduce unnecessary api calls\n+      // Search tokens for suitable CSR:s and certificates\n+      that.$store\n+        .dispatch('searchTokens', {\n+          instanceId: that.reservedMember.instanceId,\n+          memberClass: that.memberClass,\n+          memberCode: that.memberCode,\n+        })\n+        .then(\n+          () => {\n+            that.checkRunning = false;\n+          },\n+          (error: Error) => {\n+            that.$store.dispatch('showError', error);\n+            that.checkRunning = true;\n+          },\n+        );\n+    }, 600),\n+  },\n+  created() {\n+    that = this;\n+    this.$store.commit('setAddMemberWizardMode', AddMemberWizardModes.FULL);\n+    this.$store.dispatch('fetchSelectableMembers');\n+  },\n+\n+  watch: {\n+    memberCode(val) {\n+      // Set first certification service selected as default when the list is updated\n+      this.$store.commit('setAddMemberWizardMode', AddMemberWizardModes.FULL);\n+      if (\n+        !val ||\n+        val.length < 1 ||\n+        !this.memberClass ||\n+        this.memberClass.length < 1\n+      ) {\n+        return;\n+      }\n+      this.checkClient();\n+    },\n+    memberClass(val) {\n+      // Set first certification service selected as default when the list is updated\n+      this.$store.commit('setAddMemberWizardMode', AddMemberWizardModes.FULL);\n+      if (\n+        !val ||\n+        val.length < 1 ||", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "37090653d465500817204c66a484399164f5f4be"}, "originalPosition": 239}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjQ3NzgwNQ==", "bodyText": "Added isEmpty function", "url": "https://github.com/nordic-institute/X-Road/pull/510#discussion_r432477805", "createdAt": "2020-05-29T13:21:12Z", "author": {"login": "Riippi"}, "path": "src/proxy-ui-api/frontend/src/views/AddMember/MemberDetailsPage.vue", "diffHunk": "@@ -0,0 +1,280 @@\n+<template>\n+  <div>\n+    <div class=\"info-block\">\n+      <div>\n+        {{$t('wizard.member.info1')}}\n+        <br />\n+        <br />\n+        {{$t('wizard.member.info2')}}\n+      </div>\n+      <div class=\"action-block\">\n+        <large-button\n+          @click=\"showSelectClient = true\"\n+          outlined\n+          data-test=\"select-client-button\"\n+        >{{$t('wizard.member.select')}}</large-button>\n+      </div>\n+    </div>\n+\n+    <ValidationObserver ref=\"form2\" v-slot=\"{ validate, invalid }\">\n+      <div class=\"row-wrap\">\n+        <FormLabel labelText=\"wizard.memberName\" helpText=\"wizard.client.memberNameTooltip\" />\n+        <div data-test=\"selected-member-name\">{{selectedMemberName}}</div>\n+      </div>\n+\n+      <div class=\"row-wrap\">\n+        <FormLabel labelText=\"wizard.memberClass\" helpText=\"wizard.client.memberClassTooltip\" />\n+\n+        <ValidationProvider name=\"addClient.memberClass\" rules=\"required\" v-slot=\"{ errors }\">\n+          <v-select\n+            :items=\"memberClasses\"\n+            class=\"form-input\"\n+            v-model=\"memberClass\"\n+            data-test=\"member-class-input\"\n+          ></v-select>\n+        </ValidationProvider>\n+      </div>\n+      <div class=\"row-wrap\">\n+        <FormLabel labelText=\"wizard.memberCode\" helpText=\"wizard.client.memberCodeTooltip\" />\n+\n+        <ValidationProvider name=\"addClient.memberCode\" rules=\"required\" v-slot=\"{ errors }\">\n+          <v-text-field\n+            class=\"form-input\"\n+            type=\"text\"\n+            :error-messages=\"errors\"\n+            v-model=\"memberCode\"\n+            data-test=\"member-code-input\"\n+          ></v-text-field>\n+        </ValidationProvider>\n+      </div>\n+\n+      <div v-if=\"duplicateClient\" class=\"duplicate-warning\">{{$t('wizard.client.memberExists')}}</div>\n+      <div class=\"button-footer\">\n+        <div class=\"button-group\">\n+          <large-button outlined @click=\"cancel\" data-test=\"cancel-button\">{{$t('action.cancel')}}</large-button>\n+        </div>\n+        <large-button\n+          @click=\"done\"\n+          :disabled=\"invalid || duplicateClient ||\u00a0checkRunning\"\n+          data-test=\"next-button\"\n+        >{{$t('action.next')}}</large-button>\n+      </div>\n+    </ValidationObserver>\n+\n+    <SelectClientDialog\n+      :dialog=\"showSelectClient\"\n+      :selectableClients=\"selectableMembers\"\n+      @cancel=\"showSelectClient = false\"\n+      @save=\"saveSelectedClient\"\n+    />\n+  </div>\n+</template>\n+\n+<script lang=\"ts\">\n+import Vue from 'vue';\n+import { mapGetters } from 'vuex';\n+import FormLabel from '@/components/ui/FormLabel.vue';\n+import LargeButton from '@/components/ui/LargeButton.vue';\n+import SelectClientDialog from '@/components/client/SelectClientDialog.vue';\n+import { Client } from '@/types';\n+import { debounce } from '@/util/helpers';\n+import { ValidationProvider, ValidationObserver } from 'vee-validate';\n+import { AddMemberWizardModes } from '../../global';\n+\n+let that: any;\n+\n+export default Vue.extend({\n+  components: {\n+    FormLabel,\n+    LargeButton,\n+    ValidationObserver,\n+    ValidationProvider,\n+    SelectClientDialog,\n+  },\n+  computed: {\n+    ...mapGetters([\n+      'reservedMember',\n+      'memberClasses',\n+      'selectedMemberName',\n+    ]),\n+\n+    memberClass: {\n+      get(): string {\n+        return this.$store.getters.memberClass;\n+      },\n+      set(value: string) {\n+        this.$store.commit('setMemberClass', value);\n+      },\n+    },\n+\n+    memberCode: {\n+      get(): string {\n+        return this.$store.getters.memberCode;\n+      },\n+      set(value: string) {\n+        this.$store.commit('setMemberCode', value);\n+      },\n+    },\n+\n+    selectableMembers(): Client[] {\n+      // Filter out the owner member\n+      const filtered = this.$store.getters.selectableMembers.filter(\n+        (client: Client) => {\n+          if (\n+            client.member_class === this.reservedMember.memberClass &&\n+            client.member_code === this.reservedMember.memberCode\n+          ) {\n+            return false;\n+          }\n+          return true;\n+        },\n+      );\n+      return filtered;\n+    },\n+\n+    duplicateClient(): boolean {\n+      if (!this.memberClass || !this.memberCode) {\n+        return false;\n+      }\n+\n+      // Check that the info doesn't match the reserved member (owner member)\n+      if (\n+        this.reservedMember.memberClass.toLowerCase() !==\n+          this.memberClass.toLowerCase() ||\n+        this.reservedMember.memberCode.toLowerCase() !==\n+          this.memberCode.toLowerCase()\n+      ) {\n+        return false;\n+      }\n+\n+      return true;\n+    },\n+  },\n+  data() {\n+    return {\n+      disableDone: false,\n+      certificationService: undefined,\n+      filteredServiceList: [],\n+      showSelectClient: false as boolean,\n+      checkRunning: false,\n+    };\n+  },\n+  methods: {\n+    cancel(): void {\n+      this.$emit('cancel');\n+    },\n+    done(): void {\n+      this.$emit('done');\n+    },\n+    saveSelectedClient(selectedMember: Client): void {\n+      this.$store.dispatch('setSelectedMember', selectedMember);\n+      this.showSelectClient = false;\n+    },\n+    checkClient(): void {\n+      this.checkRunning = true;\n+\n+      // Find if the selectable clients array has a match\n+      const tempClient = this.selectableMembers.find((client: Client) => {\n+        return (\n+          client.member_code === this.memberCode &&\n+          client.member_class === this.memberClass\n+        );\n+      });\n+\n+      // Fill the name \"field\" if it's available\n+      if (tempClient?.member_name) {\n+        this.$store.commit('setSelectedMemberName', tempClient.member_name);\n+      } else {\n+        // Clear the \"field\" if not\n+        this.$store.commit('setSelectedMemberName', undefined);\n+      }\n+\n+      this.checkClientDebounce();\n+    },\n+    checkClientDebounce: debounce(() => {\n+      // Debounce is used to reduce unnecessary api calls\n+      // Search tokens for suitable CSR:s and certificates\n+      that.$store\n+        .dispatch('searchTokens', {\n+          instanceId: that.reservedMember.instanceId,\n+          memberClass: that.memberClass,\n+          memberCode: that.memberCode,\n+        })\n+        .then(\n+          () => {\n+            that.checkRunning = false;\n+          },\n+          (error: Error) => {\n+            that.$store.dispatch('showError', error);\n+            that.checkRunning = true;\n+          },\n+        );\n+    }, 600),\n+  },\n+  created() {\n+    that = this;\n+    this.$store.commit('setAddMemberWizardMode', AddMemberWizardModes.FULL);\n+    this.$store.dispatch('fetchSelectableMembers');\n+  },\n+\n+  watch: {\n+    memberCode(val) {\n+      // Set first certification service selected as default when the list is updated\n+      this.$store.commit('setAddMemberWizardMode', AddMemberWizardModes.FULL);\n+      if (\n+        !val ||\n+        val.length < 1 ||\n+        !this.memberClass ||\n+        this.memberClass.length < 1\n+      ) {\n+        return;\n+      }\n+      this.checkClient();\n+    },\n+    memberClass(val) {\n+      // Set first certification service selected as default when the list is updated\n+      this.$store.commit('setAddMemberWizardMode', AddMemberWizardModes.FULL);\n+      if (\n+        !val ||\n+        val.length < 1 ||", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTE4NTYyMw=="}, "originalCommit": {"oid": "37090653d465500817204c66a484399164f5f4be"}, "originalPosition": 239}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4NTY3MjE5OnYy", "diffSide": "RIGHT", "path": "src/proxy-ui-api/frontend/src/views/AddMember/MemberDetailsPage.vue", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxNDozNjowOVrOGbNgrw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxMzoxMTozMVrOGccAjg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTE4NjA5NQ==", "bodyText": "parameter type missing here and other watch-block methods", "url": "https://github.com/nordic-institute/X-Road/pull/510#discussion_r431186095", "createdAt": "2020-05-27T14:36:09Z", "author": {"login": "TJaakkola"}, "path": "src/proxy-ui-api/frontend/src/views/AddMember/MemberDetailsPage.vue", "diffHunk": "@@ -0,0 +1,280 @@\n+<template>\n+  <div>\n+    <div class=\"info-block\">\n+      <div>\n+        {{$t('wizard.member.info1')}}\n+        <br />\n+        <br />\n+        {{$t('wizard.member.info2')}}\n+      </div>\n+      <div class=\"action-block\">\n+        <large-button\n+          @click=\"showSelectClient = true\"\n+          outlined\n+          data-test=\"select-client-button\"\n+        >{{$t('wizard.member.select')}}</large-button>\n+      </div>\n+    </div>\n+\n+    <ValidationObserver ref=\"form2\" v-slot=\"{ validate, invalid }\">\n+      <div class=\"row-wrap\">\n+        <FormLabel labelText=\"wizard.memberName\" helpText=\"wizard.client.memberNameTooltip\" />\n+        <div data-test=\"selected-member-name\">{{selectedMemberName}}</div>\n+      </div>\n+\n+      <div class=\"row-wrap\">\n+        <FormLabel labelText=\"wizard.memberClass\" helpText=\"wizard.client.memberClassTooltip\" />\n+\n+        <ValidationProvider name=\"addClient.memberClass\" rules=\"required\" v-slot=\"{ errors }\">\n+          <v-select\n+            :items=\"memberClasses\"\n+            class=\"form-input\"\n+            v-model=\"memberClass\"\n+            data-test=\"member-class-input\"\n+          ></v-select>\n+        </ValidationProvider>\n+      </div>\n+      <div class=\"row-wrap\">\n+        <FormLabel labelText=\"wizard.memberCode\" helpText=\"wizard.client.memberCodeTooltip\" />\n+\n+        <ValidationProvider name=\"addClient.memberCode\" rules=\"required\" v-slot=\"{ errors }\">\n+          <v-text-field\n+            class=\"form-input\"\n+            type=\"text\"\n+            :error-messages=\"errors\"\n+            v-model=\"memberCode\"\n+            data-test=\"member-code-input\"\n+          ></v-text-field>\n+        </ValidationProvider>\n+      </div>\n+\n+      <div v-if=\"duplicateClient\" class=\"duplicate-warning\">{{$t('wizard.client.memberExists')}}</div>\n+      <div class=\"button-footer\">\n+        <div class=\"button-group\">\n+          <large-button outlined @click=\"cancel\" data-test=\"cancel-button\">{{$t('action.cancel')}}</large-button>\n+        </div>\n+        <large-button\n+          @click=\"done\"\n+          :disabled=\"invalid || duplicateClient ||\u00a0checkRunning\"\n+          data-test=\"next-button\"\n+        >{{$t('action.next')}}</large-button>\n+      </div>\n+    </ValidationObserver>\n+\n+    <SelectClientDialog\n+      :dialog=\"showSelectClient\"\n+      :selectableClients=\"selectableMembers\"\n+      @cancel=\"showSelectClient = false\"\n+      @save=\"saveSelectedClient\"\n+    />\n+  </div>\n+</template>\n+\n+<script lang=\"ts\">\n+import Vue from 'vue';\n+import { mapGetters } from 'vuex';\n+import FormLabel from '@/components/ui/FormLabel.vue';\n+import LargeButton from '@/components/ui/LargeButton.vue';\n+import SelectClientDialog from '@/components/client/SelectClientDialog.vue';\n+import { Client } from '@/types';\n+import { debounce } from '@/util/helpers';\n+import { ValidationProvider, ValidationObserver } from 'vee-validate';\n+import { AddMemberWizardModes } from '../../global';\n+\n+let that: any;\n+\n+export default Vue.extend({\n+  components: {\n+    FormLabel,\n+    LargeButton,\n+    ValidationObserver,\n+    ValidationProvider,\n+    SelectClientDialog,\n+  },\n+  computed: {\n+    ...mapGetters([\n+      'reservedMember',\n+      'memberClasses',\n+      'selectedMemberName',\n+    ]),\n+\n+    memberClass: {\n+      get(): string {\n+        return this.$store.getters.memberClass;\n+      },\n+      set(value: string) {\n+        this.$store.commit('setMemberClass', value);\n+      },\n+    },\n+\n+    memberCode: {\n+      get(): string {\n+        return this.$store.getters.memberCode;\n+      },\n+      set(value: string) {\n+        this.$store.commit('setMemberCode', value);\n+      },\n+    },\n+\n+    selectableMembers(): Client[] {\n+      // Filter out the owner member\n+      const filtered = this.$store.getters.selectableMembers.filter(\n+        (client: Client) => {\n+          if (\n+            client.member_class === this.reservedMember.memberClass &&\n+            client.member_code === this.reservedMember.memberCode\n+          ) {\n+            return false;\n+          }\n+          return true;\n+        },\n+      );\n+      return filtered;\n+    },\n+\n+    duplicateClient(): boolean {\n+      if (!this.memberClass || !this.memberCode) {\n+        return false;\n+      }\n+\n+      // Check that the info doesn't match the reserved member (owner member)\n+      if (\n+        this.reservedMember.memberClass.toLowerCase() !==\n+          this.memberClass.toLowerCase() ||\n+        this.reservedMember.memberCode.toLowerCase() !==\n+          this.memberCode.toLowerCase()\n+      ) {\n+        return false;\n+      }\n+\n+      return true;\n+    },\n+  },\n+  data() {\n+    return {\n+      disableDone: false,\n+      certificationService: undefined,\n+      filteredServiceList: [],\n+      showSelectClient: false as boolean,\n+      checkRunning: false,\n+    };\n+  },\n+  methods: {\n+    cancel(): void {\n+      this.$emit('cancel');\n+    },\n+    done(): void {\n+      this.$emit('done');\n+    },\n+    saveSelectedClient(selectedMember: Client): void {\n+      this.$store.dispatch('setSelectedMember', selectedMember);\n+      this.showSelectClient = false;\n+    },\n+    checkClient(): void {\n+      this.checkRunning = true;\n+\n+      // Find if the selectable clients array has a match\n+      const tempClient = this.selectableMembers.find((client: Client) => {\n+        return (\n+          client.member_code === this.memberCode &&\n+          client.member_class === this.memberClass\n+        );\n+      });\n+\n+      // Fill the name \"field\" if it's available\n+      if (tempClient?.member_name) {\n+        this.$store.commit('setSelectedMemberName', tempClient.member_name);\n+      } else {\n+        // Clear the \"field\" if not\n+        this.$store.commit('setSelectedMemberName', undefined);\n+      }\n+\n+      this.checkClientDebounce();\n+    },\n+    checkClientDebounce: debounce(() => {\n+      // Debounce is used to reduce unnecessary api calls\n+      // Search tokens for suitable CSR:s and certificates\n+      that.$store\n+        .dispatch('searchTokens', {\n+          instanceId: that.reservedMember.instanceId,\n+          memberClass: that.memberClass,\n+          memberCode: that.memberCode,\n+        })\n+        .then(\n+          () => {\n+            that.checkRunning = false;\n+          },\n+          (error: Error) => {\n+            that.$store.dispatch('showError', error);\n+            that.checkRunning = true;\n+          },\n+        );\n+    }, 600),\n+  },\n+  created() {\n+    that = this;\n+    this.$store.commit('setAddMemberWizardMode', AddMemberWizardModes.FULL);\n+    this.$store.dispatch('fetchSelectableMembers');\n+  },\n+\n+  watch: {\n+    memberCode(val) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "37090653d465500817204c66a484399164f5f4be"}, "originalPosition": 221}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjQ3MjIwNg==", "bodyText": "fixed", "url": "https://github.com/nordic-institute/X-Road/pull/510#discussion_r432472206", "createdAt": "2020-05-29T13:11:31Z", "author": {"login": "Riippi"}, "path": "src/proxy-ui-api/frontend/src/views/AddMember/MemberDetailsPage.vue", "diffHunk": "@@ -0,0 +1,280 @@\n+<template>\n+  <div>\n+    <div class=\"info-block\">\n+      <div>\n+        {{$t('wizard.member.info1')}}\n+        <br />\n+        <br />\n+        {{$t('wizard.member.info2')}}\n+      </div>\n+      <div class=\"action-block\">\n+        <large-button\n+          @click=\"showSelectClient = true\"\n+          outlined\n+          data-test=\"select-client-button\"\n+        >{{$t('wizard.member.select')}}</large-button>\n+      </div>\n+    </div>\n+\n+    <ValidationObserver ref=\"form2\" v-slot=\"{ validate, invalid }\">\n+      <div class=\"row-wrap\">\n+        <FormLabel labelText=\"wizard.memberName\" helpText=\"wizard.client.memberNameTooltip\" />\n+        <div data-test=\"selected-member-name\">{{selectedMemberName}}</div>\n+      </div>\n+\n+      <div class=\"row-wrap\">\n+        <FormLabel labelText=\"wizard.memberClass\" helpText=\"wizard.client.memberClassTooltip\" />\n+\n+        <ValidationProvider name=\"addClient.memberClass\" rules=\"required\" v-slot=\"{ errors }\">\n+          <v-select\n+            :items=\"memberClasses\"\n+            class=\"form-input\"\n+            v-model=\"memberClass\"\n+            data-test=\"member-class-input\"\n+          ></v-select>\n+        </ValidationProvider>\n+      </div>\n+      <div class=\"row-wrap\">\n+        <FormLabel labelText=\"wizard.memberCode\" helpText=\"wizard.client.memberCodeTooltip\" />\n+\n+        <ValidationProvider name=\"addClient.memberCode\" rules=\"required\" v-slot=\"{ errors }\">\n+          <v-text-field\n+            class=\"form-input\"\n+            type=\"text\"\n+            :error-messages=\"errors\"\n+            v-model=\"memberCode\"\n+            data-test=\"member-code-input\"\n+          ></v-text-field>\n+        </ValidationProvider>\n+      </div>\n+\n+      <div v-if=\"duplicateClient\" class=\"duplicate-warning\">{{$t('wizard.client.memberExists')}}</div>\n+      <div class=\"button-footer\">\n+        <div class=\"button-group\">\n+          <large-button outlined @click=\"cancel\" data-test=\"cancel-button\">{{$t('action.cancel')}}</large-button>\n+        </div>\n+        <large-button\n+          @click=\"done\"\n+          :disabled=\"invalid || duplicateClient ||\u00a0checkRunning\"\n+          data-test=\"next-button\"\n+        >{{$t('action.next')}}</large-button>\n+      </div>\n+    </ValidationObserver>\n+\n+    <SelectClientDialog\n+      :dialog=\"showSelectClient\"\n+      :selectableClients=\"selectableMembers\"\n+      @cancel=\"showSelectClient = false\"\n+      @save=\"saveSelectedClient\"\n+    />\n+  </div>\n+</template>\n+\n+<script lang=\"ts\">\n+import Vue from 'vue';\n+import { mapGetters } from 'vuex';\n+import FormLabel from '@/components/ui/FormLabel.vue';\n+import LargeButton from '@/components/ui/LargeButton.vue';\n+import SelectClientDialog from '@/components/client/SelectClientDialog.vue';\n+import { Client } from '@/types';\n+import { debounce } from '@/util/helpers';\n+import { ValidationProvider, ValidationObserver } from 'vee-validate';\n+import { AddMemberWizardModes } from '../../global';\n+\n+let that: any;\n+\n+export default Vue.extend({\n+  components: {\n+    FormLabel,\n+    LargeButton,\n+    ValidationObserver,\n+    ValidationProvider,\n+    SelectClientDialog,\n+  },\n+  computed: {\n+    ...mapGetters([\n+      'reservedMember',\n+      'memberClasses',\n+      'selectedMemberName',\n+    ]),\n+\n+    memberClass: {\n+      get(): string {\n+        return this.$store.getters.memberClass;\n+      },\n+      set(value: string) {\n+        this.$store.commit('setMemberClass', value);\n+      },\n+    },\n+\n+    memberCode: {\n+      get(): string {\n+        return this.$store.getters.memberCode;\n+      },\n+      set(value: string) {\n+        this.$store.commit('setMemberCode', value);\n+      },\n+    },\n+\n+    selectableMembers(): Client[] {\n+      // Filter out the owner member\n+      const filtered = this.$store.getters.selectableMembers.filter(\n+        (client: Client) => {\n+          if (\n+            client.member_class === this.reservedMember.memberClass &&\n+            client.member_code === this.reservedMember.memberCode\n+          ) {\n+            return false;\n+          }\n+          return true;\n+        },\n+      );\n+      return filtered;\n+    },\n+\n+    duplicateClient(): boolean {\n+      if (!this.memberClass || !this.memberCode) {\n+        return false;\n+      }\n+\n+      // Check that the info doesn't match the reserved member (owner member)\n+      if (\n+        this.reservedMember.memberClass.toLowerCase() !==\n+          this.memberClass.toLowerCase() ||\n+        this.reservedMember.memberCode.toLowerCase() !==\n+          this.memberCode.toLowerCase()\n+      ) {\n+        return false;\n+      }\n+\n+      return true;\n+    },\n+  },\n+  data() {\n+    return {\n+      disableDone: false,\n+      certificationService: undefined,\n+      filteredServiceList: [],\n+      showSelectClient: false as boolean,\n+      checkRunning: false,\n+    };\n+  },\n+  methods: {\n+    cancel(): void {\n+      this.$emit('cancel');\n+    },\n+    done(): void {\n+      this.$emit('done');\n+    },\n+    saveSelectedClient(selectedMember: Client): void {\n+      this.$store.dispatch('setSelectedMember', selectedMember);\n+      this.showSelectClient = false;\n+    },\n+    checkClient(): void {\n+      this.checkRunning = true;\n+\n+      // Find if the selectable clients array has a match\n+      const tempClient = this.selectableMembers.find((client: Client) => {\n+        return (\n+          client.member_code === this.memberCode &&\n+          client.member_class === this.memberClass\n+        );\n+      });\n+\n+      // Fill the name \"field\" if it's available\n+      if (tempClient?.member_name) {\n+        this.$store.commit('setSelectedMemberName', tempClient.member_name);\n+      } else {\n+        // Clear the \"field\" if not\n+        this.$store.commit('setSelectedMemberName', undefined);\n+      }\n+\n+      this.checkClientDebounce();\n+    },\n+    checkClientDebounce: debounce(() => {\n+      // Debounce is used to reduce unnecessary api calls\n+      // Search tokens for suitable CSR:s and certificates\n+      that.$store\n+        .dispatch('searchTokens', {\n+          instanceId: that.reservedMember.instanceId,\n+          memberClass: that.memberClass,\n+          memberCode: that.memberCode,\n+        })\n+        .then(\n+          () => {\n+            that.checkRunning = false;\n+          },\n+          (error: Error) => {\n+            that.$store.dispatch('showError', error);\n+            that.checkRunning = true;\n+          },\n+        );\n+    }, 600),\n+  },\n+  created() {\n+    that = this;\n+    this.$store.commit('setAddMemberWizardMode', AddMemberWizardModes.FULL);\n+    this.$store.dispatch('fetchSelectableMembers');\n+  },\n+\n+  watch: {\n+    memberCode(val) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTE4NjA5NQ=="}, "originalCommit": {"oid": "37090653d465500817204c66a484399164f5f4be"}, "originalPosition": 221}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4NTY4Mjk0OnYy", "diffSide": "RIGHT", "path": "src/proxy-ui-api/frontend/src/views/AddMember/SignKeyPage.vue", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxNDozNzo1NFrOGbNnrw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxMzoxMDozM1rOGcb-VQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTE4Nzg4Nw==", "bodyText": "type missing", "url": "https://github.com/nordic-institute/X-Road/pull/510#discussion_r431187887", "createdAt": "2020-05-27T14:37:54Z", "author": {"login": "TJaakkola"}, "path": "src/proxy-ui-api/frontend/src/views/AddMember/SignKeyPage.vue", "diffHunk": "@@ -0,0 +1,86 @@\n+<template>\n+  <div>\n+    {{$t('wizard.signKey.info')}}\n+    <div class=\"row-wrap\">\n+      <FormLabel labelText=\"wizard.signKey.keyLabel\" />\n+      <v-text-field class=\"form-input\" type=\"text\" v-model=\"keyLabel\" data-test=\"key-label-input\"></v-text-field>\n+    </div>\n+    <div class=\"button-footer\">\n+      <div class=\"button-group\">\n+        <large-button\n+          outlined\n+          @click=\"cancel\"\n+          :disabled=\"!disableDone\"\n+          data-test=\"cancel-button\"\n+        >{{$t('action.cancel')}}</large-button>\n+      </div>\n+      <div>\n+        <large-button\n+          @click=\"previous\"\n+          outlined\n+          class=\"previous-button\"\n+          data-test=\"previous-button\"\n+        >{{$t('action.previous')}}</large-button>\n+        <large-button @click=\"done\" data-test=\"next-button\">{{$t('action.next')}}</large-button>\n+      </div>\n+    </div>\n+  </div>\n+</template>\n+\n+<script lang=\"ts\">\n+import Vue from 'vue';\n+import { mapGetters } from 'vuex';\n+import LargeButton from '@/components/ui/LargeButton.vue';\n+import FormLabel from '@/components/ui/FormLabel.vue';\n+import { ValidationProvider, ValidationObserver } from 'vee-validate';\n+\n+export default Vue.extend({\n+  components: {\n+    FormLabel,\n+    LargeButton,\n+    ValidationObserver,\n+    ValidationProvider,\n+  },\n+  computed: {\n+    keyLabel: {\n+      get(): string {\n+        return this.$store.getters.keyLabel;\n+      },\n+      set(value: string) {\n+        this.$store.commit('storeKeyLabel', value);\n+      },\n+    },\n+  },\n+  data() {\n+    return {\n+      disableDone: true,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "37090653d465500817204c66a484399164f5f4be"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjQ3MTYzNw==", "bodyText": "fixed", "url": "https://github.com/nordic-institute/X-Road/pull/510#discussion_r432471637", "createdAt": "2020-05-29T13:10:33Z", "author": {"login": "Riippi"}, "path": "src/proxy-ui-api/frontend/src/views/AddMember/SignKeyPage.vue", "diffHunk": "@@ -0,0 +1,86 @@\n+<template>\n+  <div>\n+    {{$t('wizard.signKey.info')}}\n+    <div class=\"row-wrap\">\n+      <FormLabel labelText=\"wizard.signKey.keyLabel\" />\n+      <v-text-field class=\"form-input\" type=\"text\" v-model=\"keyLabel\" data-test=\"key-label-input\"></v-text-field>\n+    </div>\n+    <div class=\"button-footer\">\n+      <div class=\"button-group\">\n+        <large-button\n+          outlined\n+          @click=\"cancel\"\n+          :disabled=\"!disableDone\"\n+          data-test=\"cancel-button\"\n+        >{{$t('action.cancel')}}</large-button>\n+      </div>\n+      <div>\n+        <large-button\n+          @click=\"previous\"\n+          outlined\n+          class=\"previous-button\"\n+          data-test=\"previous-button\"\n+        >{{$t('action.previous')}}</large-button>\n+        <large-button @click=\"done\" data-test=\"next-button\">{{$t('action.next')}}</large-button>\n+      </div>\n+    </div>\n+  </div>\n+</template>\n+\n+<script lang=\"ts\">\n+import Vue from 'vue';\n+import { mapGetters } from 'vuex';\n+import LargeButton from '@/components/ui/LargeButton.vue';\n+import FormLabel from '@/components/ui/FormLabel.vue';\n+import { ValidationProvider, ValidationObserver } from 'vee-validate';\n+\n+export default Vue.extend({\n+  components: {\n+    FormLabel,\n+    LargeButton,\n+    ValidationObserver,\n+    ValidationProvider,\n+  },\n+  computed: {\n+    keyLabel: {\n+      get(): string {\n+        return this.$store.getters.keyLabel;\n+      },\n+      set(value: string) {\n+        this.$store.commit('storeKeyLabel', value);\n+      },\n+    },\n+  },\n+  data() {\n+    return {\n+      disableDone: true,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTE4Nzg4Nw=="}, "originalCommit": {"oid": "37090653d465500817204c66a484399164f5f4be"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4NTY5ODY2OnYy", "diffSide": "RIGHT", "path": "src/proxy-ui-api/frontend/src/views/AddMember/TokenPage.vue", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxNDo0MToyM1rOGbNx-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxMzowMzoxNlrOGcbuQA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTE5MDUyMw==", "bodyText": "data-test missing", "url": "https://github.com/nordic-institute/X-Road/pull/510#discussion_r431190523", "createdAt": "2020-05-27T14:41:23Z", "author": {"login": "TJaakkola"}, "path": "src/proxy-ui-api/frontend/src/views/AddMember/TokenPage.vue", "diffHunk": "@@ -0,0 +1,176 @@\n+<template>\n+  <div>\n+    {{$t('wizard.token.info')}}\n+    <v-text-field\n+      v-model=\"search\"\n+      :label=\"$t('wizard.token.tokenName')\"\n+      single-line\n+      hide-details\n+      class=\"search-input\"\n+      data-test=\"token-search-input\"\n+    >\n+      <v-icon slot=\"append\">mdi-magnify</v-icon>\n+    </v-text-field>\n+\n+    <v-radio-group v-model=\"tokenGroup\">\n+      <div class=\"radio-row\" v-for=\"token in filteredTokens\" :key=\"token.id\">\n+        <v-radio :label=\"`Token ${token.name}`\" :value=\"token\" :disabled=\"!token.logged_in\"></v-radio>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "37090653d465500817204c66a484399164f5f4be"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjQ2NzUyMA==", "bodyText": "Fixed", "url": "https://github.com/nordic-institute/X-Road/pull/510#discussion_r432467520", "createdAt": "2020-05-29T13:03:16Z", "author": {"login": "Riippi"}, "path": "src/proxy-ui-api/frontend/src/views/AddMember/TokenPage.vue", "diffHunk": "@@ -0,0 +1,176 @@\n+<template>\n+  <div>\n+    {{$t('wizard.token.info')}}\n+    <v-text-field\n+      v-model=\"search\"\n+      :label=\"$t('wizard.token.tokenName')\"\n+      single-line\n+      hide-details\n+      class=\"search-input\"\n+      data-test=\"token-search-input\"\n+    >\n+      <v-icon slot=\"append\">mdi-magnify</v-icon>\n+    </v-text-field>\n+\n+    <v-radio-group v-model=\"tokenGroup\">\n+      <div class=\"radio-row\" v-for=\"token in filteredTokens\" :key=\"token.id\">\n+        <v-radio :label=\"`Token ${token.name}`\" :value=\"token\" :disabled=\"!token.logged_in\"></v-radio>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTE5MDUyMw=="}, "originalCommit": {"oid": "37090653d465500817204c66a484399164f5f4be"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4NTcwNjgyOnYy", "diffSide": "RIGHT", "path": "src/proxy-ui-api/frontend/src/views/AddMember/TokenPage.vue", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxNDo0MzoxMlrOGbN3Vw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQxMzozODozN1rOGb1epA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTE5MTg5NQ==", "bodyText": "return this.tokens.length === 1;", "url": "https://github.com/nordic-institute/X-Road/pull/510#discussion_r431191895", "createdAt": "2020-05-27T14:43:12Z", "author": {"login": "TJaakkola"}, "path": "src/proxy-ui-api/frontend/src/views/AddMember/TokenPage.vue", "diffHunk": "@@ -0,0 +1,176 @@\n+<template>\n+  <div>\n+    {{$t('wizard.token.info')}}\n+    <v-text-field\n+      v-model=\"search\"\n+      :label=\"$t('wizard.token.tokenName')\"\n+      single-line\n+      hide-details\n+      class=\"search-input\"\n+      data-test=\"token-search-input\"\n+    >\n+      <v-icon slot=\"append\">mdi-magnify</v-icon>\n+    </v-text-field>\n+\n+    <v-radio-group v-model=\"tokenGroup\">\n+      <div class=\"radio-row\" v-for=\"token in filteredTokens\" :key=\"token.id\">\n+        <v-radio :label=\"`Token ${token.name}`\" :value=\"token\" :disabled=\"!token.logged_in\"></v-radio>\n+        <div>\n+          <large-button\n+            @click=\"confirmLogin(token)\"\n+            v-if=\"!token.logged_in\"\n+            :disabled=\"!token.available\"\n+            data-test=\"token-login-button\"\n+          >{{$t('keys.logIn')}}</large-button>\n+          <large-button\n+            v-if=\"token.logged_in\"\n+            outlined\n+            disabled\n+            data-test=\"token-logout-button\"\n+          >{{$t('wizard.token.loggedIn')}}</large-button>\n+        </div>\n+      </div>\n+    </v-radio-group>\n+\n+    <div class=\"button-footer\">\n+      <div class=\"button-group\">\n+        <large-button\n+          outlined\n+          @click=\"cancel\"\n+          :disabled=\"!disableDone\"\n+          data-test=\"cancel-button\"\n+        >{{$t('action.cancel')}}</large-button>\n+      </div>\n+\n+      <div>\n+        <large-button\n+          @click=\"previous\"\n+          outlined\n+          class=\"previous-button\"\n+          data-test=\"previous-button\"\n+        >{{$t('action.previous')}}</large-button>\n+\n+        <large-button\n+          @click=\"done\"\n+          :disabled=\"disableNext\"\n+          data-test=\"next-button\"\n+        >{{$t('action.next')}}</large-button>\n+      </div>\n+    </div>\n+    <TokenLoginDialog :dialog=\"loginDialog\" @cancel=\"loginDialog = false\" @save=\"tokenLogin\" />\n+  </div>\n+</template>\n+\n+<script lang=\"ts\">\n+import Vue from 'vue';\n+import { mapGetters } from 'vuex';\n+import LargeButton from '@/components/ui/LargeButton.vue';\n+import TokenLoginDialog from '@/components/token/TokenLoginDialog.vue';\n+import { ValidationProvider, ValidationObserver } from 'vee-validate';\n+import { Token } from '@/types';\n+\n+export default Vue.extend({\n+  components: {\n+    LargeButton,\n+    ValidationObserver,\n+    ValidationProvider,\n+    TokenLoginDialog,\n+  },\n+  computed: {\n+    ...mapGetters(['tokens']),\n+\n+    filteredTokens: {\n+      get(): Token[] {\n+        return this.$store.getters.tokensFilteredByName(this.search);\n+      },\n+    },\n+\n+    disableSelection() {\n+      if (this.tokens.length === 1) {\n+        return true;\n+      }\n+      return false;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "37090653d465500817204c66a484399164f5f4be"}, "originalPosition": 92}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTg0MDkzMg==", "bodyText": "This is again the \"computed property issue\" where the linter doesn't allow using a oneliner like that.", "url": "https://github.com/nordic-institute/X-Road/pull/510#discussion_r431840932", "createdAt": "2020-05-28T13:38:37Z", "author": {"login": "Riippi"}, "path": "src/proxy-ui-api/frontend/src/views/AddMember/TokenPage.vue", "diffHunk": "@@ -0,0 +1,176 @@\n+<template>\n+  <div>\n+    {{$t('wizard.token.info')}}\n+    <v-text-field\n+      v-model=\"search\"\n+      :label=\"$t('wizard.token.tokenName')\"\n+      single-line\n+      hide-details\n+      class=\"search-input\"\n+      data-test=\"token-search-input\"\n+    >\n+      <v-icon slot=\"append\">mdi-magnify</v-icon>\n+    </v-text-field>\n+\n+    <v-radio-group v-model=\"tokenGroup\">\n+      <div class=\"radio-row\" v-for=\"token in filteredTokens\" :key=\"token.id\">\n+        <v-radio :label=\"`Token ${token.name}`\" :value=\"token\" :disabled=\"!token.logged_in\"></v-radio>\n+        <div>\n+          <large-button\n+            @click=\"confirmLogin(token)\"\n+            v-if=\"!token.logged_in\"\n+            :disabled=\"!token.available\"\n+            data-test=\"token-login-button\"\n+          >{{$t('keys.logIn')}}</large-button>\n+          <large-button\n+            v-if=\"token.logged_in\"\n+            outlined\n+            disabled\n+            data-test=\"token-logout-button\"\n+          >{{$t('wizard.token.loggedIn')}}</large-button>\n+        </div>\n+      </div>\n+    </v-radio-group>\n+\n+    <div class=\"button-footer\">\n+      <div class=\"button-group\">\n+        <large-button\n+          outlined\n+          @click=\"cancel\"\n+          :disabled=\"!disableDone\"\n+          data-test=\"cancel-button\"\n+        >{{$t('action.cancel')}}</large-button>\n+      </div>\n+\n+      <div>\n+        <large-button\n+          @click=\"previous\"\n+          outlined\n+          class=\"previous-button\"\n+          data-test=\"previous-button\"\n+        >{{$t('action.previous')}}</large-button>\n+\n+        <large-button\n+          @click=\"done\"\n+          :disabled=\"disableNext\"\n+          data-test=\"next-button\"\n+        >{{$t('action.next')}}</large-button>\n+      </div>\n+    </div>\n+    <TokenLoginDialog :dialog=\"loginDialog\" @cancel=\"loginDialog = false\" @save=\"tokenLogin\" />\n+  </div>\n+</template>\n+\n+<script lang=\"ts\">\n+import Vue from 'vue';\n+import { mapGetters } from 'vuex';\n+import LargeButton from '@/components/ui/LargeButton.vue';\n+import TokenLoginDialog from '@/components/token/TokenLoginDialog.vue';\n+import { ValidationProvider, ValidationObserver } from 'vee-validate';\n+import { Token } from '@/types';\n+\n+export default Vue.extend({\n+  components: {\n+    LargeButton,\n+    ValidationObserver,\n+    ValidationProvider,\n+    TokenLoginDialog,\n+  },\n+  computed: {\n+    ...mapGetters(['tokens']),\n+\n+    filteredTokens: {\n+      get(): Token[] {\n+        return this.$store.getters.tokensFilteredByName(this.search);\n+      },\n+    },\n+\n+    disableSelection() {\n+      if (this.tokens.length === 1) {\n+        return true;\n+      }\n+      return false;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTE5MTg5NQ=="}, "originalCommit": {"oid": "37090653d465500817204c66a484399164f5f4be"}, "originalPosition": 92}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4NTcxNTc2OnYy", "diffSide": "RIGHT", "path": "src/proxy-ui-api/frontend/src/views/AddMember/TokenPage.vue", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxNDo0NToxM1rOGbN9MA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQxMzo0MDoyMFrOGb1jxA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTE5MzM5Mg==", "bodyText": "return !this.tokenGroup;", "url": "https://github.com/nordic-institute/X-Road/pull/510#discussion_r431193392", "createdAt": "2020-05-27T14:45:13Z", "author": {"login": "TJaakkola"}, "path": "src/proxy-ui-api/frontend/src/views/AddMember/TokenPage.vue", "diffHunk": "@@ -0,0 +1,176 @@\n+<template>\n+  <div>\n+    {{$t('wizard.token.info')}}\n+    <v-text-field\n+      v-model=\"search\"\n+      :label=\"$t('wizard.token.tokenName')\"\n+      single-line\n+      hide-details\n+      class=\"search-input\"\n+      data-test=\"token-search-input\"\n+    >\n+      <v-icon slot=\"append\">mdi-magnify</v-icon>\n+    </v-text-field>\n+\n+    <v-radio-group v-model=\"tokenGroup\">\n+      <div class=\"radio-row\" v-for=\"token in filteredTokens\" :key=\"token.id\">\n+        <v-radio :label=\"`Token ${token.name}`\" :value=\"token\" :disabled=\"!token.logged_in\"></v-radio>\n+        <div>\n+          <large-button\n+            @click=\"confirmLogin(token)\"\n+            v-if=\"!token.logged_in\"\n+            :disabled=\"!token.available\"\n+            data-test=\"token-login-button\"\n+          >{{$t('keys.logIn')}}</large-button>\n+          <large-button\n+            v-if=\"token.logged_in\"\n+            outlined\n+            disabled\n+            data-test=\"token-logout-button\"\n+          >{{$t('wizard.token.loggedIn')}}</large-button>\n+        </div>\n+      </div>\n+    </v-radio-group>\n+\n+    <div class=\"button-footer\">\n+      <div class=\"button-group\">\n+        <large-button\n+          outlined\n+          @click=\"cancel\"\n+          :disabled=\"!disableDone\"\n+          data-test=\"cancel-button\"\n+        >{{$t('action.cancel')}}</large-button>\n+      </div>\n+\n+      <div>\n+        <large-button\n+          @click=\"previous\"\n+          outlined\n+          class=\"previous-button\"\n+          data-test=\"previous-button\"\n+        >{{$t('action.previous')}}</large-button>\n+\n+        <large-button\n+          @click=\"done\"\n+          :disabled=\"disableNext\"\n+          data-test=\"next-button\"\n+        >{{$t('action.next')}}</large-button>\n+      </div>\n+    </div>\n+    <TokenLoginDialog :dialog=\"loginDialog\" @cancel=\"loginDialog = false\" @save=\"tokenLogin\" />\n+  </div>\n+</template>\n+\n+<script lang=\"ts\">\n+import Vue from 'vue';\n+import { mapGetters } from 'vuex';\n+import LargeButton from '@/components/ui/LargeButton.vue';\n+import TokenLoginDialog from '@/components/token/TokenLoginDialog.vue';\n+import { ValidationProvider, ValidationObserver } from 'vee-validate';\n+import { Token } from '@/types';\n+\n+export default Vue.extend({\n+  components: {\n+    LargeButton,\n+    ValidationObserver,\n+    ValidationProvider,\n+    TokenLoginDialog,\n+  },\n+  computed: {\n+    ...mapGetters(['tokens']),\n+\n+    filteredTokens: {\n+      get(): Token[] {\n+        return this.$store.getters.tokensFilteredByName(this.search);\n+      },\n+    },\n+\n+    disableSelection() {\n+      if (this.tokens.length === 1) {\n+        return true;\n+      }\n+      return false;\n+    },\n+\n+    disableNext() {\n+      if (this.tokenGroup) {\n+        return false;\n+      }\n+      return true;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "37090653d465500817204c66a484399164f5f4be"}, "originalPosition": 99}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTg0MjI0NA==", "bodyText": "Same computed property issue.", "url": "https://github.com/nordic-institute/X-Road/pull/510#discussion_r431842244", "createdAt": "2020-05-28T13:40:20Z", "author": {"login": "Riippi"}, "path": "src/proxy-ui-api/frontend/src/views/AddMember/TokenPage.vue", "diffHunk": "@@ -0,0 +1,176 @@\n+<template>\n+  <div>\n+    {{$t('wizard.token.info')}}\n+    <v-text-field\n+      v-model=\"search\"\n+      :label=\"$t('wizard.token.tokenName')\"\n+      single-line\n+      hide-details\n+      class=\"search-input\"\n+      data-test=\"token-search-input\"\n+    >\n+      <v-icon slot=\"append\">mdi-magnify</v-icon>\n+    </v-text-field>\n+\n+    <v-radio-group v-model=\"tokenGroup\">\n+      <div class=\"radio-row\" v-for=\"token in filteredTokens\" :key=\"token.id\">\n+        <v-radio :label=\"`Token ${token.name}`\" :value=\"token\" :disabled=\"!token.logged_in\"></v-radio>\n+        <div>\n+          <large-button\n+            @click=\"confirmLogin(token)\"\n+            v-if=\"!token.logged_in\"\n+            :disabled=\"!token.available\"\n+            data-test=\"token-login-button\"\n+          >{{$t('keys.logIn')}}</large-button>\n+          <large-button\n+            v-if=\"token.logged_in\"\n+            outlined\n+            disabled\n+            data-test=\"token-logout-button\"\n+          >{{$t('wizard.token.loggedIn')}}</large-button>\n+        </div>\n+      </div>\n+    </v-radio-group>\n+\n+    <div class=\"button-footer\">\n+      <div class=\"button-group\">\n+        <large-button\n+          outlined\n+          @click=\"cancel\"\n+          :disabled=\"!disableDone\"\n+          data-test=\"cancel-button\"\n+        >{{$t('action.cancel')}}</large-button>\n+      </div>\n+\n+      <div>\n+        <large-button\n+          @click=\"previous\"\n+          outlined\n+          class=\"previous-button\"\n+          data-test=\"previous-button\"\n+        >{{$t('action.previous')}}</large-button>\n+\n+        <large-button\n+          @click=\"done\"\n+          :disabled=\"disableNext\"\n+          data-test=\"next-button\"\n+        >{{$t('action.next')}}</large-button>\n+      </div>\n+    </div>\n+    <TokenLoginDialog :dialog=\"loginDialog\" @cancel=\"loginDialog = false\" @save=\"tokenLogin\" />\n+  </div>\n+</template>\n+\n+<script lang=\"ts\">\n+import Vue from 'vue';\n+import { mapGetters } from 'vuex';\n+import LargeButton from '@/components/ui/LargeButton.vue';\n+import TokenLoginDialog from '@/components/token/TokenLoginDialog.vue';\n+import { ValidationProvider, ValidationObserver } from 'vee-validate';\n+import { Token } from '@/types';\n+\n+export default Vue.extend({\n+  components: {\n+    LargeButton,\n+    ValidationObserver,\n+    ValidationProvider,\n+    TokenLoginDialog,\n+  },\n+  computed: {\n+    ...mapGetters(['tokens']),\n+\n+    filteredTokens: {\n+      get(): Token[] {\n+        return this.$store.getters.tokensFilteredByName(this.search);\n+      },\n+    },\n+\n+    disableSelection() {\n+      if (this.tokens.length === 1) {\n+        return true;\n+      }\n+      return false;\n+    },\n+\n+    disableNext() {\n+      if (this.tokenGroup) {\n+        return false;\n+      }\n+      return true;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTE5MzM5Mg=="}, "originalCommit": {"oid": "37090653d465500817204c66a484399164f5f4be"}, "originalPosition": 99}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4NTcyMzY0OnYy", "diffSide": "RIGHT", "path": "src/proxy-ui-api/frontend/src/views/AddMember/TokenPage.vue", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxNDo0Njo1MlrOGbOCBw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxMzowMzoyM1rOGcbukA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTE5NDYzMQ==", "bodyText": "Missing typings", "url": "https://github.com/nordic-institute/X-Road/pull/510#discussion_r431194631", "createdAt": "2020-05-27T14:46:52Z", "author": {"login": "TJaakkola"}, "path": "src/proxy-ui-api/frontend/src/views/AddMember/TokenPage.vue", "diffHunk": "@@ -0,0 +1,176 @@\n+<template>\n+  <div>\n+    {{$t('wizard.token.info')}}\n+    <v-text-field\n+      v-model=\"search\"\n+      :label=\"$t('wizard.token.tokenName')\"\n+      single-line\n+      hide-details\n+      class=\"search-input\"\n+      data-test=\"token-search-input\"\n+    >\n+      <v-icon slot=\"append\">mdi-magnify</v-icon>\n+    </v-text-field>\n+\n+    <v-radio-group v-model=\"tokenGroup\">\n+      <div class=\"radio-row\" v-for=\"token in filteredTokens\" :key=\"token.id\">\n+        <v-radio :label=\"`Token ${token.name}`\" :value=\"token\" :disabled=\"!token.logged_in\"></v-radio>\n+        <div>\n+          <large-button\n+            @click=\"confirmLogin(token)\"\n+            v-if=\"!token.logged_in\"\n+            :disabled=\"!token.available\"\n+            data-test=\"token-login-button\"\n+          >{{$t('keys.logIn')}}</large-button>\n+          <large-button\n+            v-if=\"token.logged_in\"\n+            outlined\n+            disabled\n+            data-test=\"token-logout-button\"\n+          >{{$t('wizard.token.loggedIn')}}</large-button>\n+        </div>\n+      </div>\n+    </v-radio-group>\n+\n+    <div class=\"button-footer\">\n+      <div class=\"button-group\">\n+        <large-button\n+          outlined\n+          @click=\"cancel\"\n+          :disabled=\"!disableDone\"\n+          data-test=\"cancel-button\"\n+        >{{$t('action.cancel')}}</large-button>\n+      </div>\n+\n+      <div>\n+        <large-button\n+          @click=\"previous\"\n+          outlined\n+          class=\"previous-button\"\n+          data-test=\"previous-button\"\n+        >{{$t('action.previous')}}</large-button>\n+\n+        <large-button\n+          @click=\"done\"\n+          :disabled=\"disableNext\"\n+          data-test=\"next-button\"\n+        >{{$t('action.next')}}</large-button>\n+      </div>\n+    </div>\n+    <TokenLoginDialog :dialog=\"loginDialog\" @cancel=\"loginDialog = false\" @save=\"tokenLogin\" />\n+  </div>\n+</template>\n+\n+<script lang=\"ts\">\n+import Vue from 'vue';\n+import { mapGetters } from 'vuex';\n+import LargeButton from '@/components/ui/LargeButton.vue';\n+import TokenLoginDialog from '@/components/token/TokenLoginDialog.vue';\n+import { ValidationProvider, ValidationObserver } from 'vee-validate';\n+import { Token } from '@/types';\n+\n+export default Vue.extend({\n+  components: {\n+    LargeButton,\n+    ValidationObserver,\n+    ValidationProvider,\n+    TokenLoginDialog,\n+  },\n+  computed: {\n+    ...mapGetters(['tokens']),\n+\n+    filteredTokens: {\n+      get(): Token[] {\n+        return this.$store.getters.tokensFilteredByName(this.search);\n+      },\n+    },\n+\n+    disableSelection() {\n+      if (this.tokens.length === 1) {\n+        return true;\n+      }\n+      return false;\n+    },\n+\n+    disableNext() {\n+      if (this.tokenGroup) {\n+        return false;\n+      }\n+      return true;\n+    },\n+  },\n+  data() {\n+    return {\n+      search: undefined,\n+      disableDone: true,\n+      tokenGroup: undefined as Token | undefined,\n+      loginDialog: false,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "37090653d465500817204c66a484399164f5f4be"}, "originalPosition": 107}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjQ2NzYwMA==", "bodyText": "Fixed", "url": "https://github.com/nordic-institute/X-Road/pull/510#discussion_r432467600", "createdAt": "2020-05-29T13:03:23Z", "author": {"login": "Riippi"}, "path": "src/proxy-ui-api/frontend/src/views/AddMember/TokenPage.vue", "diffHunk": "@@ -0,0 +1,176 @@\n+<template>\n+  <div>\n+    {{$t('wizard.token.info')}}\n+    <v-text-field\n+      v-model=\"search\"\n+      :label=\"$t('wizard.token.tokenName')\"\n+      single-line\n+      hide-details\n+      class=\"search-input\"\n+      data-test=\"token-search-input\"\n+    >\n+      <v-icon slot=\"append\">mdi-magnify</v-icon>\n+    </v-text-field>\n+\n+    <v-radio-group v-model=\"tokenGroup\">\n+      <div class=\"radio-row\" v-for=\"token in filteredTokens\" :key=\"token.id\">\n+        <v-radio :label=\"`Token ${token.name}`\" :value=\"token\" :disabled=\"!token.logged_in\"></v-radio>\n+        <div>\n+          <large-button\n+            @click=\"confirmLogin(token)\"\n+            v-if=\"!token.logged_in\"\n+            :disabled=\"!token.available\"\n+            data-test=\"token-login-button\"\n+          >{{$t('keys.logIn')}}</large-button>\n+          <large-button\n+            v-if=\"token.logged_in\"\n+            outlined\n+            disabled\n+            data-test=\"token-logout-button\"\n+          >{{$t('wizard.token.loggedIn')}}</large-button>\n+        </div>\n+      </div>\n+    </v-radio-group>\n+\n+    <div class=\"button-footer\">\n+      <div class=\"button-group\">\n+        <large-button\n+          outlined\n+          @click=\"cancel\"\n+          :disabled=\"!disableDone\"\n+          data-test=\"cancel-button\"\n+        >{{$t('action.cancel')}}</large-button>\n+      </div>\n+\n+      <div>\n+        <large-button\n+          @click=\"previous\"\n+          outlined\n+          class=\"previous-button\"\n+          data-test=\"previous-button\"\n+        >{{$t('action.previous')}}</large-button>\n+\n+        <large-button\n+          @click=\"done\"\n+          :disabled=\"disableNext\"\n+          data-test=\"next-button\"\n+        >{{$t('action.next')}}</large-button>\n+      </div>\n+    </div>\n+    <TokenLoginDialog :dialog=\"loginDialog\" @cancel=\"loginDialog = false\" @save=\"tokenLogin\" />\n+  </div>\n+</template>\n+\n+<script lang=\"ts\">\n+import Vue from 'vue';\n+import { mapGetters } from 'vuex';\n+import LargeButton from '@/components/ui/LargeButton.vue';\n+import TokenLoginDialog from '@/components/token/TokenLoginDialog.vue';\n+import { ValidationProvider, ValidationObserver } from 'vee-validate';\n+import { Token } from '@/types';\n+\n+export default Vue.extend({\n+  components: {\n+    LargeButton,\n+    ValidationObserver,\n+    ValidationProvider,\n+    TokenLoginDialog,\n+  },\n+  computed: {\n+    ...mapGetters(['tokens']),\n+\n+    filteredTokens: {\n+      get(): Token[] {\n+        return this.$store.getters.tokensFilteredByName(this.search);\n+      },\n+    },\n+\n+    disableSelection() {\n+      if (this.tokens.length === 1) {\n+        return true;\n+      }\n+      return false;\n+    },\n+\n+    disableNext() {\n+      if (this.tokenGroup) {\n+        return false;\n+      }\n+      return true;\n+    },\n+  },\n+  data() {\n+    return {\n+      search: undefined,\n+      disableDone: true,\n+      tokenGroup: undefined as Token | undefined,\n+      loginDialog: false,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTE5NDYzMQ=="}, "originalCommit": {"oid": "37090653d465500817204c66a484399164f5f4be"}, "originalPosition": 107}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4NTczMzYyOnYy", "diffSide": "RIGHT", "path": "src/proxy-ui-api/frontend/src/views/AddMember/TokenPage.vue", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxNDo0ODo1OVrOGbOIbA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxMzowMzo0MlrOGcbvYw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTE5NjI2OA==", "bodyText": "I think this could be simplified to:\n!this?.tokenGroup.id", "url": "https://github.com/nordic-institute/X-Road/pull/510#discussion_r431196268", "createdAt": "2020-05-27T14:48:59Z", "author": {"login": "TJaakkola"}, "path": "src/proxy-ui-api/frontend/src/views/AddMember/TokenPage.vue", "diffHunk": "@@ -0,0 +1,176 @@\n+<template>\n+  <div>\n+    {{$t('wizard.token.info')}}\n+    <v-text-field\n+      v-model=\"search\"\n+      :label=\"$t('wizard.token.tokenName')\"\n+      single-line\n+      hide-details\n+      class=\"search-input\"\n+      data-test=\"token-search-input\"\n+    >\n+      <v-icon slot=\"append\">mdi-magnify</v-icon>\n+    </v-text-field>\n+\n+    <v-radio-group v-model=\"tokenGroup\">\n+      <div class=\"radio-row\" v-for=\"token in filteredTokens\" :key=\"token.id\">\n+        <v-radio :label=\"`Token ${token.name}`\" :value=\"token\" :disabled=\"!token.logged_in\"></v-radio>\n+        <div>\n+          <large-button\n+            @click=\"confirmLogin(token)\"\n+            v-if=\"!token.logged_in\"\n+            :disabled=\"!token.available\"\n+            data-test=\"token-login-button\"\n+          >{{$t('keys.logIn')}}</large-button>\n+          <large-button\n+            v-if=\"token.logged_in\"\n+            outlined\n+            disabled\n+            data-test=\"token-logout-button\"\n+          >{{$t('wizard.token.loggedIn')}}</large-button>\n+        </div>\n+      </div>\n+    </v-radio-group>\n+\n+    <div class=\"button-footer\">\n+      <div class=\"button-group\">\n+        <large-button\n+          outlined\n+          @click=\"cancel\"\n+          :disabled=\"!disableDone\"\n+          data-test=\"cancel-button\"\n+        >{{$t('action.cancel')}}</large-button>\n+      </div>\n+\n+      <div>\n+        <large-button\n+          @click=\"previous\"\n+          outlined\n+          class=\"previous-button\"\n+          data-test=\"previous-button\"\n+        >{{$t('action.previous')}}</large-button>\n+\n+        <large-button\n+          @click=\"done\"\n+          :disabled=\"disableNext\"\n+          data-test=\"next-button\"\n+        >{{$t('action.next')}}</large-button>\n+      </div>\n+    </div>\n+    <TokenLoginDialog :dialog=\"loginDialog\" @cancel=\"loginDialog = false\" @save=\"tokenLogin\" />\n+  </div>\n+</template>\n+\n+<script lang=\"ts\">\n+import Vue from 'vue';\n+import { mapGetters } from 'vuex';\n+import LargeButton from '@/components/ui/LargeButton.vue';\n+import TokenLoginDialog from '@/components/token/TokenLoginDialog.vue';\n+import { ValidationProvider, ValidationObserver } from 'vee-validate';\n+import { Token } from '@/types';\n+\n+export default Vue.extend({\n+  components: {\n+    LargeButton,\n+    ValidationObserver,\n+    ValidationProvider,\n+    TokenLoginDialog,\n+  },\n+  computed: {\n+    ...mapGetters(['tokens']),\n+\n+    filteredTokens: {\n+      get(): Token[] {\n+        return this.$store.getters.tokensFilteredByName(this.search);\n+      },\n+    },\n+\n+    disableSelection() {\n+      if (this.tokens.length === 1) {\n+        return true;\n+      }\n+      return false;\n+    },\n+\n+    disableNext() {\n+      if (this.tokenGroup) {\n+        return false;\n+      }\n+      return true;\n+    },\n+  },\n+  data() {\n+    return {\n+      search: undefined,\n+      disableDone: true,\n+      tokenGroup: undefined as Token | undefined,\n+      loginDialog: false,\n+    };\n+  },\n+  methods: {\n+    cancel(): void {\n+      this.$emit('cancel');\n+    },\n+    previous(): void {\n+      this.$emit('previous');\n+    },\n+    done(): void {\n+      if (!this.tokenGroup || !this.tokenGroup.id) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "37090653d465500817204c66a484399164f5f4be"}, "originalPosition": 118}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjQ2NzgxMQ==", "bodyText": "Fixed", "url": "https://github.com/nordic-institute/X-Road/pull/510#discussion_r432467811", "createdAt": "2020-05-29T13:03:42Z", "author": {"login": "Riippi"}, "path": "src/proxy-ui-api/frontend/src/views/AddMember/TokenPage.vue", "diffHunk": "@@ -0,0 +1,176 @@\n+<template>\n+  <div>\n+    {{$t('wizard.token.info')}}\n+    <v-text-field\n+      v-model=\"search\"\n+      :label=\"$t('wizard.token.tokenName')\"\n+      single-line\n+      hide-details\n+      class=\"search-input\"\n+      data-test=\"token-search-input\"\n+    >\n+      <v-icon slot=\"append\">mdi-magnify</v-icon>\n+    </v-text-field>\n+\n+    <v-radio-group v-model=\"tokenGroup\">\n+      <div class=\"radio-row\" v-for=\"token in filteredTokens\" :key=\"token.id\">\n+        <v-radio :label=\"`Token ${token.name}`\" :value=\"token\" :disabled=\"!token.logged_in\"></v-radio>\n+        <div>\n+          <large-button\n+            @click=\"confirmLogin(token)\"\n+            v-if=\"!token.logged_in\"\n+            :disabled=\"!token.available\"\n+            data-test=\"token-login-button\"\n+          >{{$t('keys.logIn')}}</large-button>\n+          <large-button\n+            v-if=\"token.logged_in\"\n+            outlined\n+            disabled\n+            data-test=\"token-logout-button\"\n+          >{{$t('wizard.token.loggedIn')}}</large-button>\n+        </div>\n+      </div>\n+    </v-radio-group>\n+\n+    <div class=\"button-footer\">\n+      <div class=\"button-group\">\n+        <large-button\n+          outlined\n+          @click=\"cancel\"\n+          :disabled=\"!disableDone\"\n+          data-test=\"cancel-button\"\n+        >{{$t('action.cancel')}}</large-button>\n+      </div>\n+\n+      <div>\n+        <large-button\n+          @click=\"previous\"\n+          outlined\n+          class=\"previous-button\"\n+          data-test=\"previous-button\"\n+        >{{$t('action.previous')}}</large-button>\n+\n+        <large-button\n+          @click=\"done\"\n+          :disabled=\"disableNext\"\n+          data-test=\"next-button\"\n+        >{{$t('action.next')}}</large-button>\n+      </div>\n+    </div>\n+    <TokenLoginDialog :dialog=\"loginDialog\" @cancel=\"loginDialog = false\" @save=\"tokenLogin\" />\n+  </div>\n+</template>\n+\n+<script lang=\"ts\">\n+import Vue from 'vue';\n+import { mapGetters } from 'vuex';\n+import LargeButton from '@/components/ui/LargeButton.vue';\n+import TokenLoginDialog from '@/components/token/TokenLoginDialog.vue';\n+import { ValidationProvider, ValidationObserver } from 'vee-validate';\n+import { Token } from '@/types';\n+\n+export default Vue.extend({\n+  components: {\n+    LargeButton,\n+    ValidationObserver,\n+    ValidationProvider,\n+    TokenLoginDialog,\n+  },\n+  computed: {\n+    ...mapGetters(['tokens']),\n+\n+    filteredTokens: {\n+      get(): Token[] {\n+        return this.$store.getters.tokensFilteredByName(this.search);\n+      },\n+    },\n+\n+    disableSelection() {\n+      if (this.tokens.length === 1) {\n+        return true;\n+      }\n+      return false;\n+    },\n+\n+    disableNext() {\n+      if (this.tokenGroup) {\n+        return false;\n+      }\n+      return true;\n+    },\n+  },\n+  data() {\n+    return {\n+      search: undefined,\n+      disableDone: true,\n+      tokenGroup: undefined as Token | undefined,\n+      loginDialog: false,\n+    };\n+  },\n+  methods: {\n+    cancel(): void {\n+      this.$emit('cancel');\n+    },\n+    previous(): void {\n+      this.$emit('previous');\n+    },\n+    done(): void {\n+      if (!this.tokenGroup || !this.tokenGroup.id) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTE5NjI2OA=="}, "originalCommit": {"oid": "37090653d465500817204c66a484399164f5f4be"}, "originalPosition": 118}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2872, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}