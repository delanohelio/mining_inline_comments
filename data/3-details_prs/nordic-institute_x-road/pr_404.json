{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg0MjAxNDA2", "number": 404, "title": "XRDDEV-900 API for uploading backup files", "bodyText": "Implement API for uploading backup files.\nUpdate API design.\nAdd unit tests.", "createdAt": "2020-03-05T10:47:26Z", "url": "https://github.com/nordic-institute/X-Road/pull/404", "merged": true, "mergeCommit": {"oid": "d18a485d6f208e52eeaff324f4aea36b45eb085c"}, "closed": true, "closedAt": "2020-03-24T11:14:53Z", "author": {"login": "petkivim"}, "timelineItems": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcKpNeWgH2gAyMzg0MjAxNDA2OmQyYTI5NTk5ZTg0N2I2YzViMmRlMmYxN2E3NzY4ZWYyMjQ1NGI2NTc=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcQvkoOgFqTM4MDEzNjA4Ng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "d2a29599e847b6c5b2de2f17a7768ef22454b657", "author": {"user": {"login": "petkivim", "name": "Petteri Kivim\u00e4ki"}}, "url": "https://github.com/nordic-institute/X-Road/commit/d2a29599e847b6c5b2de2f17a7768ef22454b657", "committedDate": "2020-03-05T10:46:09Z", "message": "XRDDEV-900 API for uploading backup files\n\n- Implement API for uploading backup files.\n- Update API design.\n- Add unit tests."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3b732ced32cf4b153d55b54e990bb5ed70cf7555", "author": {"user": {"login": "petkivim", "name": "Petteri Kivim\u00e4ki"}}, "url": "https://github.com/nordic-institute/X-Road/commit/3b732ced32cf4b153d55b54e990bb5ed70cf7555", "committedDate": "2020-03-05T11:47:04Z", "message": "XRDDEV-900 Updates based on SonarQube findings"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b495cb73ed75a03068b41f62dcd77a156513e6d2", "author": {"user": {"login": "petkivim", "name": "Petteri Kivim\u00e4ki"}}, "url": "https://github.com/nordic-institute/X-Road/commit/b495cb73ed75a03068b41f62dcd77a156513e6d2", "committedDate": "2020-03-05T13:02:32Z", "message": "XRDDEV-900 Updates based on SonarQube findings"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "01301c0391dff8ee074f49dcb4e2644af08702c1", "author": {"user": {"login": "petkivim", "name": "Petteri Kivim\u00e4ki"}}, "url": "https://github.com/nordic-institute/X-Road/commit/01301c0391dff8ee074f49dcb4e2644af08702c1", "committedDate": "2020-03-07T06:42:54Z", "message": "XRDDEV-900 Update error handling when backup file already exists\n\n- Refactor implementation to use existing warnings mechanism.\n- Update unit tests."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d8df001249c7e51d2e090cfcf6f8990ebdfba994", "author": {"user": {"login": "petkivim", "name": "Petteri Kivim\u00e4ki"}}, "url": "https://github.com/nordic-institute/X-Road/commit/d8df001249c7e51d2e090cfcf6f8990ebdfba994", "committedDate": "2020-03-12T03:29:22Z", "message": "Merge branch 'develop' into XRDDEV-900"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ad516931b117411202ee569441477df7dce6ed4b", "author": {"user": {"login": "petkivim", "name": "Petteri Kivim\u00e4ki"}}, "url": "https://github.com/nordic-institute/X-Road/commit/ad516931b117411202ee569441477df7dce6ed4b", "committedDate": "2020-03-13T05:38:40Z", "message": "Merge branch 'develop' into XRDDEV-900"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc5MTgzNDI2", "url": "https://github.com/nordic-institute/X-Road/pull/404#pullrequestreview-379183426", "createdAt": "2020-03-23T07:33:26Z", "commit": {"oid": "ad516931b117411202ee569441477df7dce6ed4b"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QwNzozMzoyNlrOF55cxA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QwOTowOTo0OFrOF58V2Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjI1NDQwNA==", "bodyText": "InvalidFilenameException and InvalidBackupFileException seem to have their metadata fields populated in the service layer (here and here) but they are overridden in the controller method by setting a new ErrorDeviation without metadata. The ErrorDeviation (errorCode) will actually already be set to the response without passing it to the BadRequestException separately. Meaning that all of these catch clauses could be collapsed into a single block:\n} catch (InvalidFilenameException | UnhandledWarningsException | InvalidBackupFileException e) {\n    throw new BadRequestException(e);\n}\nThe metadata shown to the end user in this case is a string \"uploading backup file failed because of invalid filename (\"+ filename + \")\". Is this metadata supposed to be shown to the end user or is it only meant for logging purposes? If it is only meant for logging purposes then this constructor should be changed to\nsuper(msg, new ErrorDeviation(ERROR_INVALID_FILENAME));\nand same for the InvalidBackupFileException constructor also", "url": "https://github.com/nordic-institute/X-Road/pull/404#discussion_r396254404", "createdAt": "2020-03-23T07:33:26Z", "author": {"login": "carohauta"}, "path": "src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/openapi/BackupsApiController.java", "diffHunk": "@@ -103,4 +108,19 @@ public BackupsApiController(BackupService backupService, BackupConverter backupC\n             throw new InternalServerErrorException(new ErrorDeviation(GENERATE_BACKUP_INTERRUPTED));\n         }\n     }\n+\n+    @Override\n+    @PreAuthorize(\"hasAuthority('BACKUP_CONFIGURATION')\")\n+    public ResponseEntity<Backup> uploadBackup(Boolean ignoreWarnings, MultipartFile file) {\n+        try {\n+            BackupFile backupFile = backupService.uploadBackup(ignoreWarnings, file);\n+            return new ResponseEntity<>(backupConverter.convert(backupFile), HttpStatus.CREATED);\n+        } catch (InvalidFilenameException e) {\n+            throw new BadRequestException(e, new ErrorDeviation(ERROR_INVALID_FILENAME));\n+        } catch (UnhandledWarningsException e) {\n+            throw new BadRequestException(e);\n+        } catch (InvalidBackupFileException e) {\n+            throw new BadRequestException(e, new ErrorDeviation(ERROR_INVALID_BACKUP_FILE));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ad516931b117411202ee569441477df7dce6ed4b"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjI2NTUzMQ==", "bodyText": "I'm not sure if this sort of validation should actually exist in the repository layer which should be all about transactions and CRUD operations (also documented here). The isFilenameValid method would probably be a better fit in an already existing utility class such as FormatUtils or in the BackupService class.", "url": "https://github.com/nordic-institute/X-Road/pull/404#discussion_r396265531", "createdAt": "2020-03-23T08:01:08Z", "author": {"login": "carohauta"}, "path": "src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/repository/BackupRepository.java", "diffHunk": "@@ -51,7 +51,7 @@\n \n     private static final String CONFIGURATION_BACKUP_PATH = SystemProperties.getConfBackupPath();\n     // Criteria for valid backup file names:\n-    // 1) cannot start with \".\", 2) must contain one or more word characters ([a-zA-Z_0-9]), 3) must end with \".tar\"\n+    // 1) cannot start with \".\", 2) must contain one or more word characters ([a-zA-Z_0-9.-]), 3) must end with \".tar\"\n     private static final String BACKUP_FILENAME_PATTERN = \"^(?!\\\\.)[\\\\w\\\\.\\\\-]+\\\\.tar$\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ad516931b117411202ee569441477df7dce6ed4b"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjI5ODQ1OA==", "bodyText": "This method could take String fileName and byte[] fileBytes as parameters instead of a MultipartFile. I think that would create better separation between the controller and service layer and make this method more universal. What do you think?", "url": "https://github.com/nordic-institute/X-Road/pull/404#discussion_r396298458", "createdAt": "2020-03-23T09:03:42Z", "author": {"login": "carohauta"}, "path": "src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/service/BackupService.java", "diffHunk": "@@ -147,6 +155,44 @@ public BackupFile generateBackup() throws InterruptedException {\n         return backupFile.get();\n     }\n \n+    /**\n+     * Write uploaded backup file to disk. If ignoreWarnings=false, an exception is thrown when a file with\n+     * the same name already exists. If ignoreWarnings=true, the existing file is overwritten.\n+     * @param ignoreWarnings\n+     * @param file\n+     * @return\n+     * @throws InvalidFilenameException if backup file's name is invalid and does not pass validation\n+     * @throws UnhandledWarningsException if backup file with the same name already exists\n+     * and ignoreWarnings is false\n+     * @throws InvalidBackupFileException if backup file is not a valid tar file or the first entry of the tar file\n+     * does not match to the first entry if the Security Server generated backup tar files\n+     */\n+    public BackupFile uploadBackup(Boolean ignoreWarnings, MultipartFile file)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ad516931b117411202ee569441477df7dce6ed4b"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjMwMTc4NQ==", "bodyText": "Could also assert the warning here", "url": "https://github.com/nordic-institute/X-Road/pull/404#discussion_r396301785", "createdAt": "2020-03-23T09:09:48Z", "author": {"login": "carohauta"}, "path": "src/proxy-ui-api/src/test/java/org/niis/xroad/restapi/service/BackupServiceTest.java", "diffHunk": "@@ -180,4 +190,84 @@ public void addBackupFails() throws ProcessNotExecutableException, ProcessFailed\n             // success\n         }\n     }\n+\n+    @Test\n+    public void uploadBackup() throws UnhandledWarningsException, InvalidBackupFileException, IOException,\n+            InvalidFilenameException {\n+        MultipartFile multipartFile = createMultipartFileWithTar(BACKUP_FILE_1_NAME, VALID_TAR_LABEL);\n+\n+        when(backupRepository.isFilenameValid(BACKUP_FILE_1_NAME)).thenReturn(true);\n+        when(backupRepository.fileExists(BACKUP_FILE_1_NAME)).thenReturn(false);\n+        when(backupRepository.writeBackupFile(BACKUP_FILE_1_NAME, multipartFile.getBytes())).thenReturn(\n+                new Date(BACKUP_FILE_1_CREATED_AT_MILLIS).toInstant().atOffset(ZoneOffset.UTC));\n+\n+        BackupFile backupFile = backupService.uploadBackup(true, multipartFile);\n+\n+        assertEquals(BACKUP_FILE_1_NAME, backupFile.getFilename());\n+        assertEquals(BACKUP_FILE_1_CREATED_AT, backupFile.getCreatedAt().toString());\n+    }\n+\n+    @Test\n+    public void uploadBackupInvalidTarLabel() throws UnhandledWarningsException, IOException,\n+            InvalidFilenameException {\n+        MultipartFile multipartFile = createMultipartFileWithTar(BACKUP_FILE_1_NAME, \"invalid_label\");\n+\n+        when(backupRepository.isFilenameValid(BACKUP_FILE_1_NAME)).thenReturn(true);\n+        when(backupRepository.fileExists(BACKUP_FILE_1_NAME)).thenReturn(false);\n+\n+        try {\n+            backupService.uploadBackup(true, multipartFile);\n+            fail(\"should throw InvalidBackupFileException\");\n+        } catch (InvalidBackupFileException expected) {\n+            // success\n+        }\n+    }\n+\n+    @Test\n+    public void uploadBackupWithInvalidFilename() throws UnhandledWarningsException, InvalidBackupFileException {\n+        try {\n+            backupService.uploadBackup(true, mockMultipartFile);\n+            fail(\"should throw InvalidFilenameException\");\n+        } catch (InvalidFilenameException expected) {\n+            // success\n+        }\n+    }\n+\n+    @Test\n+    public void uploadBackupFileAlreadyExistsNoOverwrite() throws InvalidFilenameException,\n+            InvalidBackupFileException {\n+        when(backupRepository.isFilenameValid(any(String.class))).thenReturn(true);\n+        when(backupRepository.fileExists(any(String.class))).thenReturn(true);\n+        try {\n+            backupService.uploadBackup(false, mockMultipartFile);\n+            fail(\"should throw UnhandledWarningsException\");\n+        } catch (UnhandledWarningsException expected) {\n+            // success", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ad516931b117411202ee569441477df7dce6ed4b"}, "originalPosition": 92}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9080061c793c99bb3372d6eaea237f2300a9a32c", "author": {"user": {"login": "petkivim", "name": "Petteri Kivim\u00e4ki"}}, "url": "https://github.com/nordic-institute/X-Road/commit/9080061c793c99bb3372d6eaea237f2300a9a32c", "committedDate": "2020-03-23T15:51:22Z", "message": "XRDDEV-900 Minor changes based on review comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3d637b707b5790111a490508b8f33d16e805953a", "author": {"user": {"login": "petkivim", "name": "Petteri Kivim\u00e4ki"}}, "url": "https://github.com/nordic-institute/X-Road/commit/3d637b707b5790111a490508b8f33d16e805953a", "committedDate": "2020-03-23T16:23:13Z", "message": "Merge branch 'develop' into XRDDEV-900"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9c8f0dc17338e50e1c52e289a80fbf26f002f9e6", "author": {"user": {"login": "petkivim", "name": "Petteri Kivim\u00e4ki"}}, "url": "https://github.com/nordic-institute/X-Road/commit/9c8f0dc17338e50e1c52e289a80fbf26f002f9e6", "committedDate": "2020-03-24T07:55:42Z", "message": "XRDDEV-900 Refactor backup filename validation\n\n- Move filename validation logic from repository class to utils class.\n- Add filename validation to all repository methods that read, create or delete backup files."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d64827bc42009a906ffdea588cb02bff31eed9e5", "author": {"user": {"login": "petkivim", "name": "Petteri Kivim\u00e4ki"}}, "url": "https://github.com/nordic-institute/X-Road/commit/d64827bc42009a906ffdea588cb02bff31eed9e5", "committedDate": "2020-03-24T08:11:33Z", "message": "XRDDEV-900 Remove unused lines from unit tests"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgwMTI4Mzc1", "url": "https://github.com/nordic-institute/X-Road/pull/404#pullrequestreview-380128375", "createdAt": "2020-03-24T09:24:37Z", "commit": {"oid": "d64827bc42009a906ffdea588cb02bff31eed9e5"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQwOToyNDozN1rOF6ndGA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQwOToyNDozN1rOF6ndGA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzAwODE1Mg==", "bodyText": "SonarQube requires \"invalid backup filename\" to be in a constant because it occurs at least 3 times in this class.", "url": "https://github.com/nordic-institute/X-Road/pull/404#discussion_r397008152", "createdAt": "2020-03-24T09:24:37Z", "author": {"login": "carohauta"}, "path": "src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/repository/BackupRepository.java", "diffHunk": "@@ -90,6 +87,9 @@ public OffsetDateTime getCreatedAt(String filename) {\n      * @param filename\n      */\n     public void deleteBackupFile(String filename) {\n+        if (!FormatUtils.isValidBackupFilename(filename)) {\n+            throw new RuntimeException(\"invalid backup filename\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d64827bc42009a906ffdea588cb02bff31eed9e5"}, "originalPosition": 40}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2e7b3a9a7464b48075739c04312c9f3c5eb3b4f4", "author": {"user": {"login": "petkivim", "name": "Petteri Kivim\u00e4ki"}}, "url": "https://github.com/nordic-institute/X-Road/commit/2e7b3a9a7464b48075739c04312c9f3c5eb3b4f4", "committedDate": "2020-03-24T09:28:52Z", "message": "XRDDEV-900 Fix critical SonarQube issues"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgwMTM2MDg2", "url": "https://github.com/nordic-institute/X-Road/pull/404#pullrequestreview-380136086", "createdAt": "2020-03-24T09:34:25Z", "commit": {"oid": "2e7b3a9a7464b48075739c04312c9f3c5eb3b4f4"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4360, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}