{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc3MjMzMDQ5", "number": 380, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxNDoxMzozMlrODj044w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxNTozNDozNFrODj2rzg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4ODkzMjgzOnYy", "diffSide": "RIGHT", "path": "src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/service/ClientService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxNDoxMzozMlrOFv2Rew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxNDoxMzozMlrOFv2Rew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTcxNjYwMw==", "bodyText": "Very comprehensive Javadocs! This was gonna be my first question \ud83d\ude01", "url": "https://github.com/nordic-institute/X-Road/pull/380#discussion_r385716603", "createdAt": "2020-02-28T14:13:32Z", "author": {"login": "carohauta"}, "path": "src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/service/ClientService.java", "diffHunk": "@@ -439,4 +464,121 @@ public ClientType deleteTlsCertificate(ClientId id, String certificateHash)\n         }\n         return clientTypePredicate;\n     }\n+\n+    /**\n+     * Add a new client to this security server. Can add either a member or a subsystem.\n+     * Member (added client, or member associated with the client subsystem) can either\n+     * be one already registered to global conf, or an unregistered one. Unregistered one\n+     * can only be added with ignoreWarnings = true.\n+     *\n+     * Client is added to this instance, it is not possible to add clients who would have\n+     * different instance_id from this security server's instance.\n+     *\n+     * To prevent against two threads both creating \"first\" additional members,\n+     * synchronize access to this method on controller layer\n+     * (synchronizing this method does not help since transaction start & commit\n+     * are outside of this method).", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9c5232112d6cde37b4796672147cab5e9e77989d"}, "originalPosition": 186}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4OTEyMzA4OnYy", "diffSide": "RIGHT", "path": "src/proxy-ui-api/src/test/java/org/niis/xroad/restapi/service/ClientServiceIntegrationTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxNTowNzo1MFrOFv4GeA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxNTowNzo1MFrOFv4GeA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTc0NjU1Mg==", "bodyText": "Very thorough testing on this quite error prone feature! \ud83d\udc4d", "url": "https://github.com/nordic-institute/X-Road/pull/380#discussion_r385746552", "createdAt": "2020-02-28T15:07:50Z", "author": {"login": "carohauta"}, "path": "src/proxy-ui-api/src/test/java/org/niis/xroad/restapi/service/ClientServiceIntegrationTest.java", "diffHunk": "@@ -114,10 +147,282 @@ public void setup() throws Exception {\n         assertTrue(sqlFileBytes.length > 1);\n     }\n \n+    private int countIdentifiers() {\n+        return JdbcTestUtils.countRowsInTable(jdbcTemplate, \"identifier\");\n+    }\n+    private long countMembers() {\n+        return countByType(false);\n+    }\n+    private long countSubsystems() {\n+        return countByType(true);\n+    }\n+    private long countByType(boolean subsystems) {\n+        List<ClientType> localClients = clientService.getAllLocalClients();\n+        return localClients.stream()\n+                .filter(client -> (client.getIdentifier().getSubsystemCode() != null) == subsystems)\n+                .count();\n+    }\n+\n+    @Test\n+    public void addLocalClientSubsystemToExistingClient() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9c5232112d6cde37b4796672147cab5e9e77989d"}, "originalPosition": 141}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4OTIyNzAyOnYy", "diffSide": "RIGHT", "path": "src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/service/ClientService.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxNTozNDozNFrOFv5E8A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxMjoyMTowMlrOFwdlMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTc2MjU0NA==", "bodyText": "Just wondering why this does not require saving the serverConfType itself? Since there is cascade=none from ClientType to ServerConf now.", "url": "https://github.com/nordic-institute/X-Road/pull/380#discussion_r385762544", "createdAt": "2020-02-28T15:34:34Z", "author": {"login": "carohauta"}, "path": "src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/service/ClientService.java", "diffHunk": "@@ -439,4 +464,121 @@ public ClientType deleteTlsCertificate(ClientId id, String certificateHash)\n         }\n         return clientTypePredicate;\n     }\n+\n+    /**\n+     * Add a new client to this security server. Can add either a member or a subsystem.\n+     * Member (added client, or member associated with the client subsystem) can either\n+     * be one already registered to global conf, or an unregistered one. Unregistered one\n+     * can only be added with ignoreWarnings = true.\n+     *\n+     * Client is added to this instance, it is not possible to add clients who would have\n+     * different instance_id from this security server's instance.\n+     *\n+     * To prevent against two threads both creating \"first\" additional members,\n+     * synchronize access to this method on controller layer\n+     * (synchronizing this method does not help since transaction start & commit\n+     * are outside of this method).\n+     *\n+     * @param memberClass member class of added client\n+     * @param memberCode member code of added client\n+     * @param subsystemCode subsystem code of added client (null if adding a member)\n+     * @param isAuthentication {@code IsAuthentication} value to set for the new client\n+     * @param ignoreWarnings if warning about unregistered member should be ignored\n+     * @return\n+     * @throws ClientAlreadyExistsException if client has already been added to security server\n+     * @throws AdditionalMemberAlreadyExistsException if tried to add a new member, and\n+     * security server already has owner member + one additional member\n+     * @throws UnhandledWarningsException if tried to add client associated with a member which\n+     * does not exist in global conf yet, and ignoreWarnings was false\n+     */\n+    public ClientType addLocalClient(String memberClass,\n+            String memberCode,\n+            String subsystemCode,\n+            IsAuthentication isAuthentication,\n+            boolean ignoreWarnings) throws ClientAlreadyExistsException,\n+            AdditionalMemberAlreadyExistsException, UnhandledWarningsException {\n+\n+        ClientId clientId = ClientId.create(globalConfFacade.getInstanceIdentifier(),\n+                memberClass,\n+                memberCode,\n+                subsystemCode);\n+\n+        ClientType existingLocalClient = getLocalClient(clientId);\n+        ClientId ownerId = serverConfService.getSecurityServerOwnerId();\n+        if (existingLocalClient != null) {\n+            throw new ClientAlreadyExistsException(\"client \" + clientId + \" already exists\");\n+        }\n+        if (clientId.getSubsystemCode() == null) {\n+            // adding member - check that we dont already have owner + one additional member\n+            List<ClientType> existingMembers = getAllLocalMembers();\n+            Optional<ClientType> additionalMember = existingMembers.stream()\n+                    .filter(m -> !ownerId.equals(m.getIdentifier()))\n+                    .findFirst();\n+            if (additionalMember.isPresent()) {\n+                throw new AdditionalMemberAlreadyExistsException(\"additional member \"\n+                        + additionalMember.get().getIdentifier() + \" already exists\");\n+            }\n+        }\n+\n+        // check if the member associated with clientId exists in global conf\n+        ClientId memberId = clientId.getMemberId();\n+        if (globalConfFacade.getMemberName(memberId) == null) {\n+            // unregistered member\n+            if (!ignoreWarnings) {\n+                WarningDeviation warning = new WarningDeviation(WARNING_UNREGISTERED_MEMBER, memberId.toShortString());\n+                throw new UnhandledWarningsException(warning);\n+            }\n+        }\n+\n+        boolean clientRegistered = globalConfService.isSecurityServerClientForThisInstance(clientId);\n+        ClientType client = new ClientType();\n+        client.setIdentifier(getPossiblyManagedEntity(clientId));\n+        if (clientRegistered) {\n+            client.setClientStatus(ClientType.STATUS_REGISTERED);\n+        } else {\n+            client.setClientStatus(ClientType.STATUS_SAVED);\n+        }\n+        client.setIsAuthentication(isAuthentication.name());\n+        ServerConfType serverConfType = serverConfService.getServerConf();\n+        client.setConf(serverConfType);\n+        serverConfType.getClient().add(client);\n+\n+        clientRepository.saveOrUpdate(client);\n+        return client;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9c5232112d6cde37b4796672147cab5e9e77989d"}, "originalPosition": 253}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTc2NzExOQ==", "bodyText": "Answering to myself here: probably the @Transactional annotation kicking in", "url": "https://github.com/nordic-institute/X-Road/pull/380#discussion_r385767119", "createdAt": "2020-02-28T15:41:53Z", "author": {"login": "carohauta"}, "path": "src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/service/ClientService.java", "diffHunk": "@@ -439,4 +464,121 @@ public ClientType deleteTlsCertificate(ClientId id, String certificateHash)\n         }\n         return clientTypePredicate;\n     }\n+\n+    /**\n+     * Add a new client to this security server. Can add either a member or a subsystem.\n+     * Member (added client, or member associated with the client subsystem) can either\n+     * be one already registered to global conf, or an unregistered one. Unregistered one\n+     * can only be added with ignoreWarnings = true.\n+     *\n+     * Client is added to this instance, it is not possible to add clients who would have\n+     * different instance_id from this security server's instance.\n+     *\n+     * To prevent against two threads both creating \"first\" additional members,\n+     * synchronize access to this method on controller layer\n+     * (synchronizing this method does not help since transaction start & commit\n+     * are outside of this method).\n+     *\n+     * @param memberClass member class of added client\n+     * @param memberCode member code of added client\n+     * @param subsystemCode subsystem code of added client (null if adding a member)\n+     * @param isAuthentication {@code IsAuthentication} value to set for the new client\n+     * @param ignoreWarnings if warning about unregistered member should be ignored\n+     * @return\n+     * @throws ClientAlreadyExistsException if client has already been added to security server\n+     * @throws AdditionalMemberAlreadyExistsException if tried to add a new member, and\n+     * security server already has owner member + one additional member\n+     * @throws UnhandledWarningsException if tried to add client associated with a member which\n+     * does not exist in global conf yet, and ignoreWarnings was false\n+     */\n+    public ClientType addLocalClient(String memberClass,\n+            String memberCode,\n+            String subsystemCode,\n+            IsAuthentication isAuthentication,\n+            boolean ignoreWarnings) throws ClientAlreadyExistsException,\n+            AdditionalMemberAlreadyExistsException, UnhandledWarningsException {\n+\n+        ClientId clientId = ClientId.create(globalConfFacade.getInstanceIdentifier(),\n+                memberClass,\n+                memberCode,\n+                subsystemCode);\n+\n+        ClientType existingLocalClient = getLocalClient(clientId);\n+        ClientId ownerId = serverConfService.getSecurityServerOwnerId();\n+        if (existingLocalClient != null) {\n+            throw new ClientAlreadyExistsException(\"client \" + clientId + \" already exists\");\n+        }\n+        if (clientId.getSubsystemCode() == null) {\n+            // adding member - check that we dont already have owner + one additional member\n+            List<ClientType> existingMembers = getAllLocalMembers();\n+            Optional<ClientType> additionalMember = existingMembers.stream()\n+                    .filter(m -> !ownerId.equals(m.getIdentifier()))\n+                    .findFirst();\n+            if (additionalMember.isPresent()) {\n+                throw new AdditionalMemberAlreadyExistsException(\"additional member \"\n+                        + additionalMember.get().getIdentifier() + \" already exists\");\n+            }\n+        }\n+\n+        // check if the member associated with clientId exists in global conf\n+        ClientId memberId = clientId.getMemberId();\n+        if (globalConfFacade.getMemberName(memberId) == null) {\n+            // unregistered member\n+            if (!ignoreWarnings) {\n+                WarningDeviation warning = new WarningDeviation(WARNING_UNREGISTERED_MEMBER, memberId.toShortString());\n+                throw new UnhandledWarningsException(warning);\n+            }\n+        }\n+\n+        boolean clientRegistered = globalConfService.isSecurityServerClientForThisInstance(clientId);\n+        ClientType client = new ClientType();\n+        client.setIdentifier(getPossiblyManagedEntity(clientId));\n+        if (clientRegistered) {\n+            client.setClientStatus(ClientType.STATUS_REGISTERED);\n+        } else {\n+            client.setClientStatus(ClientType.STATUS_SAVED);\n+        }\n+        client.setIsAuthentication(isAuthentication.name());\n+        ServerConfType serverConfType = serverConfService.getServerConf();\n+        client.setConf(serverConfType);\n+        serverConfType.getClient().add(client);\n+\n+        clientRepository.saveOrUpdate(client);\n+        return client;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTc2MjU0NA=="}, "originalCommit": {"oid": "9c5232112d6cde37b4796672147cab5e9e77989d"}, "originalPosition": 253}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjM2MDYyNw==", "bodyText": "serverConfType is already a managed entity; if there was some change that needs to be saved to database, it would automatically be saved by the JPA implementation when flush happens (probably, but not guaranteed, when transaction commits, so as you said, when @Transactional kicks in). You only need to manually save entities when they are new or transient.\nAlso serverConfType itself is not changed, all the DB changes are related to client object and client table.\nThis is probably a bit inaccurate / fuzzy explanation, tried to find a more exact and concrete explanation but did not find one quickly, sorry.", "url": "https://github.com/nordic-institute/X-Road/pull/380#discussion_r386360627", "createdAt": "2020-03-02T12:21:02Z", "author": {"login": "jansu76"}, "path": "src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/service/ClientService.java", "diffHunk": "@@ -439,4 +464,121 @@ public ClientType deleteTlsCertificate(ClientId id, String certificateHash)\n         }\n         return clientTypePredicate;\n     }\n+\n+    /**\n+     * Add a new client to this security server. Can add either a member or a subsystem.\n+     * Member (added client, or member associated with the client subsystem) can either\n+     * be one already registered to global conf, or an unregistered one. Unregistered one\n+     * can only be added with ignoreWarnings = true.\n+     *\n+     * Client is added to this instance, it is not possible to add clients who would have\n+     * different instance_id from this security server's instance.\n+     *\n+     * To prevent against two threads both creating \"first\" additional members,\n+     * synchronize access to this method on controller layer\n+     * (synchronizing this method does not help since transaction start & commit\n+     * are outside of this method).\n+     *\n+     * @param memberClass member class of added client\n+     * @param memberCode member code of added client\n+     * @param subsystemCode subsystem code of added client (null if adding a member)\n+     * @param isAuthentication {@code IsAuthentication} value to set for the new client\n+     * @param ignoreWarnings if warning about unregistered member should be ignored\n+     * @return\n+     * @throws ClientAlreadyExistsException if client has already been added to security server\n+     * @throws AdditionalMemberAlreadyExistsException if tried to add a new member, and\n+     * security server already has owner member + one additional member\n+     * @throws UnhandledWarningsException if tried to add client associated with a member which\n+     * does not exist in global conf yet, and ignoreWarnings was false\n+     */\n+    public ClientType addLocalClient(String memberClass,\n+            String memberCode,\n+            String subsystemCode,\n+            IsAuthentication isAuthentication,\n+            boolean ignoreWarnings) throws ClientAlreadyExistsException,\n+            AdditionalMemberAlreadyExistsException, UnhandledWarningsException {\n+\n+        ClientId clientId = ClientId.create(globalConfFacade.getInstanceIdentifier(),\n+                memberClass,\n+                memberCode,\n+                subsystemCode);\n+\n+        ClientType existingLocalClient = getLocalClient(clientId);\n+        ClientId ownerId = serverConfService.getSecurityServerOwnerId();\n+        if (existingLocalClient != null) {\n+            throw new ClientAlreadyExistsException(\"client \" + clientId + \" already exists\");\n+        }\n+        if (clientId.getSubsystemCode() == null) {\n+            // adding member - check that we dont already have owner + one additional member\n+            List<ClientType> existingMembers = getAllLocalMembers();\n+            Optional<ClientType> additionalMember = existingMembers.stream()\n+                    .filter(m -> !ownerId.equals(m.getIdentifier()))\n+                    .findFirst();\n+            if (additionalMember.isPresent()) {\n+                throw new AdditionalMemberAlreadyExistsException(\"additional member \"\n+                        + additionalMember.get().getIdentifier() + \" already exists\");\n+            }\n+        }\n+\n+        // check if the member associated with clientId exists in global conf\n+        ClientId memberId = clientId.getMemberId();\n+        if (globalConfFacade.getMemberName(memberId) == null) {\n+            // unregistered member\n+            if (!ignoreWarnings) {\n+                WarningDeviation warning = new WarningDeviation(WARNING_UNREGISTERED_MEMBER, memberId.toShortString());\n+                throw new UnhandledWarningsException(warning);\n+            }\n+        }\n+\n+        boolean clientRegistered = globalConfService.isSecurityServerClientForThisInstance(clientId);\n+        ClientType client = new ClientType();\n+        client.setIdentifier(getPossiblyManagedEntity(clientId));\n+        if (clientRegistered) {\n+            client.setClientStatus(ClientType.STATUS_REGISTERED);\n+        } else {\n+            client.setClientStatus(ClientType.STATUS_SAVED);\n+        }\n+        client.setIsAuthentication(isAuthentication.name());\n+        ServerConfType serverConfType = serverConfService.getServerConf();\n+        client.setConf(serverConfType);\n+        serverConfType.getClient().add(client);\n+\n+        clientRepository.saveOrUpdate(client);\n+        return client;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTc2MjU0NA=="}, "originalCommit": {"oid": "9c5232112d6cde37b4796672147cab5e9e77989d"}, "originalPosition": 253}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2941, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}