{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkxODU3MTI0", "number": 427, "title": "XRDDEV-903", "bodyText": "API for querying diagnostics:\n\nImplement API for querying global conf diagnostics.\nImplement API for querying timestamping services diagnostics.\nImplement API for querying ocsp responder diagnostics.\nUpdate API design.\nAdd unit tests.", "createdAt": "2020-03-21T13:10:48Z", "url": "https://github.com/nordic-institute/X-Road/pull/427", "merged": true, "mergeCommit": {"oid": "cebe8291552c8d342ece681ad9095d6662d7e445"}, "closed": true, "closedAt": "2020-04-07T10:39:15Z", "author": {"login": "petkivim"}, "timelineItems": {"totalCount": 16, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcO1rIVAH2gAyMzkxODU3MTI0OmNhMjY5YTE5YTY0MDBkNjM3NmY1MTY5ZmFlNTFkZWVhMGYwNzQ2MDQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcVQ4ugAFqTM4ODk5MzEzNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "ca269a19a6400d6376f5169fae51deea0f074604", "author": {"user": {"login": "petkivim", "name": "Petteri Kivim\u00e4ki"}}, "url": "https://github.com/nordic-institute/X-Road/commit/ca269a19a6400d6376f5169fae51deea0f074604", "committedDate": "2020-03-18T11:33:06Z", "message": "XRDDEV-903 API for querying global conf diagnostics\n\n- Implement API for querying global conf diagnostics.\n- Update API design.\n- Add unit tests."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "eb79b64b925f6333ed85c431486e16223e8c7837", "author": {"user": {"login": "petkivim", "name": "Petteri Kivim\u00e4ki"}}, "url": "https://github.com/nordic-institute/X-Road/commit/eb79b64b925f6333ed85c431486e16223e8c7837", "committedDate": "2020-03-18T15:19:46Z", "message": "XRDDEV-903 API for querying timestamping services diagnostics\n\n- Implement API for querying timestamping services diagnostics.\n- Update API design.\n- Add unit tests."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3229f8ac4dcaf7a79996c48b000738b15426d7c7", "author": {"user": {"login": "petkivim", "name": "Petteri Kivim\u00e4ki"}}, "url": "https://github.com/nordic-institute/X-Road/commit/3229f8ac4dcaf7a79996c48b000738b15426d7c7", "committedDate": "2020-03-20T15:25:47Z", "message": "XRDDEV-903 API for querying ocsp responder diagnostics\n\n- Implement API for querying ocsp responder diagnostics.\n- Update API design.\n- Add unit tests."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2cfd0553fecc90027cadaafc1f4f3505660dbbd3", "author": {"user": {"login": "petkivim", "name": "Petteri Kivim\u00e4ki"}}, "url": "https://github.com/nordic-institute/X-Road/commit/2cfd0553fecc90027cadaafc1f4f3505660dbbd3", "committedDate": "2020-03-21T07:17:21Z", "message": "XRDDEV-903 Refactor diagnostics status code\n\n- Remove shared diagnostics status codes and their mapping.\n- Implement global conf, timestamping and ocsp specific status codes and their mapping.\n- Update API design.\n- Update tests."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7a14073d3e2174d9eb5f7d3b2d05dbc4a35e886b", "author": {"user": {"login": "petkivim", "name": "Petteri Kivim\u00e4ki"}}, "url": "https://github.com/nordic-institute/X-Road/commit/7a14073d3e2174d9eb5f7d3b2d05dbc4a35e886b", "committedDate": "2020-03-21T08:36:42Z", "message": "XRDDEV-903 Refactor class names, remove unused endpoint\n\n- Update API design.\n- Update tests."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "28e84c048f7ae483c374086146cd2c61767aed31", "author": {"user": {"login": "petkivim", "name": "Petteri Kivim\u00e4ki"}}, "url": "https://github.com/nordic-institute/X-Road/commit/28e84c048f7ae483c374086146cd2c61767aed31", "committedDate": "2020-03-21T12:57:07Z", "message": "Merge branch 'develop' into XRDDEV-903"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "51ca32d4a9c141c3633b2bb641924222ff86abc1", "author": {"user": {"login": "petkivim", "name": "Petteri Kivim\u00e4ki"}}, "url": "https://github.com/nordic-institute/X-Road/commit/51ca32d4a9c141c3633b2bb641924222ff86abc1", "committedDate": "2020-03-21T13:08:10Z", "message": "XRDDEV-903 Minor fixes to API design"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7249aaa5605a2fe30437c827a3022e149063b79c", "author": {"user": {"login": "petkivim", "name": "Petteri Kivim\u00e4ki"}}, "url": "https://github.com/nordic-institute/X-Road/commit/7249aaa5605a2fe30437c827a3022e149063b79c", "committedDate": "2020-04-02T05:01:38Z", "message": "Merge branch 'develop' into XRDDEV-903"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg2MjcxNTQw", "url": "https://github.com/nordic-institute/X-Road/pull/427#pullrequestreview-386271540", "createdAt": "2020-04-02T09:51:42Z", "commit": {"oid": "7249aaa5605a2fe30437c827a3022e149063b79c"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQwOTo1MTo0MlrOF_juiQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxMzo0NjozM1rOF_r_9g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjE4OTk2MQ==", "bodyText": "According to the OpenAPI docs:\n\nAny sibling elements of a $ref are ignored. This is because $ref works by replacing itself and everything on its level with the definition it is pointing at.\n\nMaybe consider something like\nstatus_class:\n  readOnly: true\n  allOf:\n    - $ref: '#/components/schemas/DiagnosticStatusClass'\nThe allOf keyword has had some downsides with the OpenAPI generator we are using but with enum schemas such as DiagnosticStatusClass or ConfigurationStatus it seems to work flawlessly.\nSee also TimestampingServiceDiagnostics schema object for the same properties", "url": "https://github.com/nordic-institute/X-Road/pull/427#discussion_r402189961", "createdAt": "2020-04-02T09:51:42Z", "author": {"login": "carohauta"}, "path": "src/proxy-ui-api/src/main/resources/openapi-definition.yaml", "diffHunk": "@@ -4624,6 +4714,37 @@ components:\n           uniqueItems: true\n           items:\n             $ref: '#/components/schemas/GroupMember'\n+    GlobalConfDiagnostics: # ok\n+      type: object\n+      description: global configuration diagnostics\n+      required:\n+        - status_class\n+        - status_code\n+        - prev_update_at\n+        - next_update_at\n+      properties:\n+        status_class:\n+          $ref: '#/components/schemas/DiagnosticStatusClass'\n+          readOnly: true\n+        status_code:\n+          $ref: '#/components/schemas/ConfigurationStatus'\n+          readOnly: true", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7249aaa5605a2fe30437c827a3022e149063b79c"}, "originalPosition": 207}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjIwNTA2NA==", "bodyText": "Not a big deal but aligning constructor parameters seems to be fine by CheckStyle but to be more consistent with the majority of the codebase maybe using an 8 space continuation instead would make sense?", "url": "https://github.com/nordic-institute/X-Road/pull/427#discussion_r402205064", "createdAt": "2020-04-02T10:17:57Z", "author": {"login": "carohauta"}, "path": "src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/openapi/DiagnosticsApiController.java", "diffHunk": "@@ -0,0 +1,95 @@\n+/**\n+ * The MIT License\n+ * Copyright (c) 2018 Estonian Information System Authority (RIA),\n+ * Nordic Institute for Interoperability Solutions (NIIS), Population Register Centre (VRK)\n+ * Copyright (c) 2015-2017 Estonian Information System Authority (RIA), Population Register Centre (VRK)\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package org.niis.xroad.restapi.openapi;\n+\n+import ee.ria.xroad.common.DiagnosticsStatus;\n+\n+import lombok.extern.slf4j.Slf4j;\n+import org.niis.xroad.restapi.converter.GlobalConfDiagnosticConverter;\n+import org.niis.xroad.restapi.converter.OcspResponderDiagnosticConverter;\n+import org.niis.xroad.restapi.converter.TimestampingServiceDiagnosticConverter;\n+import org.niis.xroad.restapi.dto.OcspResponderDiagnosticsStatus;\n+import org.niis.xroad.restapi.openapi.model.GlobalConfDiagnostics;\n+import org.niis.xroad.restapi.openapi.model.OcspResponderDiagnostics;\n+import org.niis.xroad.restapi.openapi.model.TimestampingServiceDiagnostics;\n+import org.niis.xroad.restapi.service.DiagnosticService;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.security.access.prepost.PreAuthorize;\n+import org.springframework.stereotype.Controller;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+\n+import java.util.List;\n+\n+/**\n+ * diagnostics api\n+ */\n+@Controller\n+@RequestMapping(\"/api\")\n+@Slf4j\n+@PreAuthorize(\"denyAll\")\n+public class DiagnosticsApiController implements DiagnosticsApi {\n+\n+    private DiagnosticService diagnosticService;\n+    private GlobalConfDiagnosticConverter globalConfDiagnosticConverter;\n+    private TimestampingServiceDiagnosticConverter timestampingServiceDiagnosticConverter;\n+    private OcspResponderDiagnosticConverter ocspResponderDiagnosticConverter;\n+\n+    /**\n+     * DiagnosticsApiController constructor\n+     */\n+    @Autowired\n+    public DiagnosticsApiController(DiagnosticService diagnosticService,\n+                                    GlobalConfDiagnosticConverter globalConfDiagnosticConverter,\n+                                    TimestampingServiceDiagnosticConverter timestampingServiceDiagnosticConverter,\n+                                    OcspResponderDiagnosticConverter ocspResponderDiagnosticConverter) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7249aaa5605a2fe30437c827a3022e149063b79c"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjI2ODIwNw==", "bodyText": "Could the http request be simplified by using the RestTemplate class that Spring offers? I think most of the manual deserializing and json parsing in this service class could be avoided with it since it should be able to map a response directly into the given MyArbitraryObject.class\nAlso could be good to ensure that there is some sort of timeout for the request.", "url": "https://github.com/nordic-institute/X-Road/pull/427#discussion_r402268207", "createdAt": "2020-04-02T12:19:07Z", "author": {"login": "carohauta"}, "path": "src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/service/DiagnosticService.java", "diffHunk": "@@ -0,0 +1,204 @@\n+/**\n+ * The MIT License\n+ * Copyright (c) 2018 Estonian Information System Authority (RIA),\n+ * Nordic Institute for Interoperability Solutions (NIIS), Population Register Centre (VRK)\n+ * Copyright (c) 2015-2017 Estonian Information System Authority (RIA), Population Register Centre (VRK)\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package org.niis.xroad.restapi.service;\n+\n+import ee.ria.xroad.common.DiagnosticsStatus;\n+import ee.ria.xroad.common.PortNumbers;\n+import ee.ria.xroad.common.SystemProperties;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.JsonElement;\n+import com.google.gson.JsonObject;\n+import com.google.gson.JsonParser;\n+import lombok.extern.slf4j.Slf4j;\n+import org.apache.commons.io.IOUtils;\n+import org.apache.http.HttpEntity;\n+import org.apache.http.client.methods.CloseableHttpResponse;\n+import org.apache.http.client.methods.HttpGet;\n+import org.apache.http.impl.client.CloseableHttpClient;\n+import org.apache.http.impl.client.HttpClients;\n+import org.niis.xroad.restapi.dto.OcspResponderDiagnosticsStatus;\n+import org.niis.xroad.restapi.exceptions.DeviationAwareRuntimeException;\n+import org.niis.xroad.restapi.exceptions.ErrorDeviation;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.security.access.prepost.PreAuthorize;\n+import org.springframework.stereotype.Service;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * diagnostic service\n+ */\n+@Slf4j\n+@Service\n+@Transactional\n+@PreAuthorize(\"isAuthenticated()\")\n+public class DiagnosticService {\n+    private static final String DIAGNOSTICS_BASE_URL = \"http://localhost\";\n+    private static final int CONF_CLIENT_ADMIN_PORT = SystemProperties.getConfigurationClientAdminPort();\n+    private static final String CONF_CLIENT_ADMIN_PATH = \"status\";\n+    private static final int TIMESTAMPING_SERVICE_ADMIN_PORT = PortNumbers.ADMIN_PORT;\n+    private static final String TIMESTAMPING_SERVICE_ADMIN_PATH = \"timestampstatus\";\n+    private static final int SIGNER_ADMIN_PORT = SystemProperties.getSignerAdminPort();\n+    private static final String SIGNER_ADMIN_PATH = \"status\";\n+\n+    /**\n+     * Query global configuration status from admin port over HTTP.\n+     * @return\n+     */\n+    public DiagnosticsStatus queryGlobalConfStatus() {\n+        try {\n+            JsonObject json = sendGetRequest(buildUri(CONF_CLIENT_ADMIN_PORT, CONF_CLIENT_ADMIN_PATH));\n+            return new Gson().fromJson(json, DiagnosticsStatus.class);\n+        } catch (DiagnosticRequestException e) {\n+            throw new DeviationAwareRuntimeException(e, e.getErrorDeviation());\n+        }\n+    }\n+\n+    /**\n+     * Query timestamping services status from admin port over HTTP.\n+     * @return\n+     */\n+    public List<DiagnosticsStatus> queryTimestampingStatus() {\n+        try {\n+            JsonObject json = sendGetRequest(buildUri(TIMESTAMPING_SERVICE_ADMIN_PORT,\n+                    TIMESTAMPING_SERVICE_ADMIN_PATH));\n+            return json.entrySet().stream().filter(e -> e.getValue() instanceof JsonObject)\n+                    .map(this::parseTimestampingStatus).collect(Collectors.toList());\n+        } catch (DiagnosticRequestException e) {\n+            throw new DeviationAwareRuntimeException(e, e.getErrorDeviation());\n+        }\n+    }\n+\n+    /**\n+     * Query ocsp responders status from admin port over HTTP.\n+     * @return\n+     */\n+    public List<OcspResponderDiagnosticsStatus> queryOcspResponderStatus() {\n+        try {\n+            JsonObject json = sendGetRequest(buildUri(SIGNER_ADMIN_PORT,\n+                    SIGNER_ADMIN_PATH));\n+            JsonObject certificationServiceStatusMap = json.getAsJsonObject(\"certificationServiceStatusMap\");\n+            return certificationServiceStatusMap.entrySet().stream().filter(e -> e.getValue() instanceof JsonObject)\n+                    .map(this::parseOcspResponderDiagnosticsStatus).collect(Collectors.toList());\n+        } catch (DiagnosticRequestException e) {\n+            throw new DeviationAwareRuntimeException(e, e.getErrorDeviation());\n+        }\n+    }\n+\n+    /**\n+     * Send HTTP GET request to the given address (http://localhost:{port}/{path}).\n+     * @param address\n+     * @return\n+     * @throws DiagnosticRequestException if sending a diagnostics requests fails or an error is returned\n+     */\n+    private JsonObject sendGetRequest(String address) throws DiagnosticRequestException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7249aaa5605a2fe30437c827a3022e149063b79c"}, "originalPosition": 121}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjI3OTM0NA==", "bodyText": "Could the URLs maybe be placed in application properties? Something like this?", "url": "https://github.com/nordic-institute/X-Road/pull/427#discussion_r402279344", "createdAt": "2020-04-02T12:37:27Z", "author": {"login": "carohauta"}, "path": "src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/service/DiagnosticService.java", "diffHunk": "@@ -0,0 +1,204 @@\n+/**\n+ * The MIT License\n+ * Copyright (c) 2018 Estonian Information System Authority (RIA),\n+ * Nordic Institute for Interoperability Solutions (NIIS), Population Register Centre (VRK)\n+ * Copyright (c) 2015-2017 Estonian Information System Authority (RIA), Population Register Centre (VRK)\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package org.niis.xroad.restapi.service;\n+\n+import ee.ria.xroad.common.DiagnosticsStatus;\n+import ee.ria.xroad.common.PortNumbers;\n+import ee.ria.xroad.common.SystemProperties;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.JsonElement;\n+import com.google.gson.JsonObject;\n+import com.google.gson.JsonParser;\n+import lombok.extern.slf4j.Slf4j;\n+import org.apache.commons.io.IOUtils;\n+import org.apache.http.HttpEntity;\n+import org.apache.http.client.methods.CloseableHttpResponse;\n+import org.apache.http.client.methods.HttpGet;\n+import org.apache.http.impl.client.CloseableHttpClient;\n+import org.apache.http.impl.client.HttpClients;\n+import org.niis.xroad.restapi.dto.OcspResponderDiagnosticsStatus;\n+import org.niis.xroad.restapi.exceptions.DeviationAwareRuntimeException;\n+import org.niis.xroad.restapi.exceptions.ErrorDeviation;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.security.access.prepost.PreAuthorize;\n+import org.springframework.stereotype.Service;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * diagnostic service\n+ */\n+@Slf4j\n+@Service\n+@Transactional\n+@PreAuthorize(\"isAuthenticated()\")\n+public class DiagnosticService {\n+    private static final String DIAGNOSTICS_BASE_URL = \"http://localhost\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7249aaa5605a2fe30437c827a3022e149063b79c"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjMyMDI5Ng==", "bodyText": "This test class does not seem to depend on Spring so removing these annotations will speed up this test a lot.", "url": "https://github.com/nordic-institute/X-Road/pull/427#discussion_r402320296", "createdAt": "2020-04-02T13:39:41Z", "author": {"login": "carohauta"}, "path": "src/proxy-ui-api/src/test/java/org/niis/xroad/restapi/converter/GlobalConfDiagnosticConverterTest.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/**\n+ * The MIT License\n+ * Copyright (c) 2018 Estonian Information System Authority (RIA),\n+ * Nordic Institute for Interoperability Solutions (NIIS), Population Register Centre (VRK)\n+ * Copyright (c) 2015-2017 Estonian Information System Authority (RIA), Population Register Centre (VRK)\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package org.niis.xroad.restapi.converter;\n+\n+import ee.ria.xroad.common.DiagnosticsErrorCodes;\n+import ee.ria.xroad.common.DiagnosticsStatus;\n+\n+import org.joda.time.DateTimeUtils;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.niis.xroad.restapi.openapi.model.ConfigurationStatus;\n+import org.niis.xroad.restapi.openapi.model.DiagnosticStatusClass;\n+import org.niis.xroad.restapi.openapi.model.GlobalConfDiagnostics;\n+import org.niis.xroad.restapi.util.TestUtils;\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.test.context.junit4.SpringRunner;\n+\n+import java.time.LocalTime;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+/**\n+ * Test GlobalConfDiagnosticConverter\n+ */\n+@RunWith(SpringRunner.class)\n+@SpringBootTest\n+public class GlobalConfDiagnosticConverterTest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7249aaa5605a2fe30437c827a3022e149063b79c"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjMyMTI2NQ==", "bodyText": "Speed up this test too by removing these Spring annotations", "url": "https://github.com/nordic-institute/X-Road/pull/427#discussion_r402321265", "createdAt": "2020-04-02T13:40:58Z", "author": {"login": "carohauta"}, "path": "src/proxy-ui-api/src/test/java/org/niis/xroad/restapi/converter/OcspResponderDiagnosticConverterTest.java", "diffHunk": "@@ -0,0 +1,161 @@\n+/**\n+ * The MIT License\n+ * Copyright (c) 2018 Estonian Information System Authority (RIA),\n+ * Nordic Institute for Interoperability Solutions (NIIS), Population Register Centre (VRK)\n+ * Copyright (c) 2015-2017 Estonian Information System Authority (RIA), Population Register Centre (VRK)\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+\n+package org.niis.xroad.restapi.converter;\n+\n+import ee.ria.xroad.common.DiagnosticsErrorCodes;\n+import ee.ria.xroad.common.DiagnosticsStatus;\n+\n+import org.joda.time.DateTimeUtils;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.niis.xroad.restapi.dto.OcspResponderDiagnosticsStatus;\n+import org.niis.xroad.restapi.openapi.model.DiagnosticStatusClass;\n+import org.niis.xroad.restapi.openapi.model.OcspResponderDiagnostics;\n+import org.niis.xroad.restapi.openapi.model.OcspStatus;\n+import org.niis.xroad.restapi.util.TestUtils;\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.test.context.junit4.SpringRunner;\n+\n+import java.time.LocalTime;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+/**\n+ * Test CertificateAuthorityDiagnosticConverter\n+ */\n+@RunWith(SpringRunner.class)\n+@SpringBootTest\n+public class OcspResponderDiagnosticConverterTest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7249aaa5605a2fe30437c827a3022e149063b79c"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjMyNDAxMw==", "bodyText": "Speed up this test too by removing these Spring annotations", "url": "https://github.com/nordic-institute/X-Road/pull/427#discussion_r402324013", "createdAt": "2020-04-02T13:44:35Z", "author": {"login": "carohauta"}, "path": "src/proxy-ui-api/src/test/java/org/niis/xroad/restapi/converter/TimestampingServiceDiagnosticConverterTest.java", "diffHunk": "@@ -0,0 +1,120 @@\n+/**\n+ * The MIT License\n+ * Copyright (c) 2018 Estonian Information System Authority (RIA),\n+ * Nordic Institute for Interoperability Solutions (NIIS), Population Register Centre (VRK)\n+ * Copyright (c) 2015-2017 Estonian Information System Authority (RIA), Population Register Centre (VRK)\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package org.niis.xroad.restapi.converter;\n+import ee.ria.xroad.common.DiagnosticsErrorCodes;\n+import ee.ria.xroad.common.DiagnosticsStatus;\n+\n+import org.joda.time.DateTimeUtils;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.niis.xroad.restapi.openapi.model.DiagnosticStatusClass;\n+import org.niis.xroad.restapi.openapi.model.TimestampingServiceDiagnostics;\n+import org.niis.xroad.restapi.openapi.model.TimestampingStatus;\n+import org.niis.xroad.restapi.util.TestUtils;\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.test.context.junit4.SpringRunner;\n+\n+import java.time.LocalTime;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+/**\n+ * Test TimestampingServiceDiagnosticConverter\n+ */\n+@RunWith(SpringRunner.class)\n+@SpringBootTest\n+public class TimestampingServiceDiagnosticConverterTest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7249aaa5605a2fe30437c827a3022e149063b79c"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjMyNTQ5NA==", "bodyText": "Very thorough testing going on here! \ud83d\udc4d", "url": "https://github.com/nordic-institute/X-Road/pull/427#discussion_r402325494", "createdAt": "2020-04-02T13:46:33Z", "author": {"login": "carohauta"}, "path": "src/proxy-ui-api/src/test/java/org/niis/xroad/restapi/openapi/DiagnosticsApiControllerTest.java", "diffHunk": "@@ -0,0 +1,413 @@\n+/**\n+ * The MIT License\n+ * Copyright (c) 2018 Estonian Information System Authority (RIA),\n+ * Nordic Institute for Interoperability Solutions (NIIS), Population Register Centre (VRK)\n+ * Copyright (c) 2015-2017 Estonian Information System Authority (RIA), Population Register Centre (VRK)\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package org.niis.xroad.restapi.openapi;\n+\n+import ee.ria.xroad.common.DiagnosticsErrorCodes;\n+import ee.ria.xroad.common.DiagnosticsStatus;\n+\n+import lombok.extern.slf4j.Slf4j;\n+import org.joda.time.DateTimeUtils;\n+import org.junit.After;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.niis.xroad.restapi.dto.OcspResponderDiagnosticsStatus;\n+import org.niis.xroad.restapi.openapi.model.ConfigurationStatus;\n+import org.niis.xroad.restapi.openapi.model.DiagnosticStatusClass;\n+import org.niis.xroad.restapi.openapi.model.GlobalConfDiagnostics;\n+import org.niis.xroad.restapi.openapi.model.OcspResponderDiagnostics;\n+import org.niis.xroad.restapi.openapi.model.OcspStatus;\n+import org.niis.xroad.restapi.openapi.model.TimestampingServiceDiagnostics;\n+import org.niis.xroad.restapi.openapi.model.TimestampingStatus;\n+import org.niis.xroad.restapi.service.DiagnosticService;\n+import org.niis.xroad.restapi.util.TestUtils;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.test.autoconfigure.jdbc.AutoConfigureTestDatabase;\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.boot.test.mock.mockito.MockBean;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.security.test.context.support.WithMockUser;\n+import org.springframework.test.context.junit4.SpringRunner;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+import java.time.LocalTime;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import static junit.framework.TestCase.fail;\n+import static org.junit.Assert.assertEquals;\n+import static org.mockito.Mockito.when;\n+\n+/**\n+ * Test DiagnosticsApiController\n+ */\n+@RunWith(SpringRunner.class)\n+@SpringBootTest\n+@AutoConfigureTestDatabase\n+@Transactional\n+@Slf4j\n+public class DiagnosticsApiControllerTest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7249aaa5605a2fe30437c827a3022e149063b79c"}, "originalPosition": 71}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1a813fdd3b8e03bf07c5c2ed281025d1a638a617", "author": {"user": {"login": "petkivim", "name": "Petteri Kivim\u00e4ki"}}, "url": "https://github.com/nordic-institute/X-Road/commit/1a813fdd3b8e03bf07c5c2ed281025d1a638a617", "committedDate": "2020-04-05T04:53:29Z", "message": "XRDDEV-903 Remove Spring annotations from converter tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b1c5cdb4525be39572eb32ea25198287b9232797", "author": {"user": {"login": "petkivim", "name": "Petteri Kivim\u00e4ki"}}, "url": "https://github.com/nordic-institute/X-Road/commit/b1c5cdb4525be39572eb32ea25198287b9232797", "committedDate": "2020-04-05T04:56:23Z", "message": "Merge branch 'develop' into XRDDEV-903"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "625fbaeb58a27afd08e85430eecdce8d5a4c788f", "author": {"user": {"login": "petkivim", "name": "Petteri Kivim\u00e4ki"}}, "url": "https://github.com/nordic-institute/X-Road/commit/625fbaeb58a27afd08e85430eecdce8d5a4c788f", "committedDate": "2020-04-05T05:28:24Z", "message": "XRDDEV-903 Remove unused imports, move diagnostics base URL to configuration file"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "99313bb04fa57b6bac3b6f32f5f6e3b24550bd3c", "author": {"user": {"login": "petkivim", "name": "Petteri Kivim\u00e4ki"}}, "url": "https://github.com/nordic-institute/X-Road/commit/99313bb04fa57b6bac3b6f32f5f6e3b24550bd3c", "committedDate": "2020-04-05T12:15:39Z", "message": "XRDDEV-903 Move diagnostics ports and paths to conf file"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0b50673d82bea955b639a54501efd225caf2ba24", "author": {"user": {"login": "petkivim", "name": "Petteri Kivim\u00e4ki"}}, "url": "https://github.com/nordic-institute/X-Road/commit/0b50673d82bea955b639a54501efd225caf2ba24", "committedDate": "2020-04-05T13:01:06Z", "message": "XRDDEV-903 Fix checkstyle warnings, update API design"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7702cdd53560d4d7e7c9cbe2c0629374ed488fdc", "author": {"user": {"login": "petkivim", "name": "Petteri Kivim\u00e4ki"}}, "url": "https://github.com/nordic-institute/X-Road/commit/7702cdd53560d4d7e7c9cbe2c0629374ed488fdc", "committedDate": "2020-04-05T13:27:32Z", "message": "XRDDEV-903 Add timeout to HTTP client"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg4OTkzMTM0", "url": "https://github.com/nordic-institute/X-Road/pull/427#pullrequestreview-388993134", "createdAt": "2020-04-07T10:38:56Z", "commit": {"oid": "7702cdd53560d4d7e7c9cbe2c0629374ed488fdc"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4174, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}