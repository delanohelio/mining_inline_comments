{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYwNDQxNjAz", "number": 309, "title": "XRDDEV-794", "bodyText": "Implements apis for adding REST services with:\n\nREST API base path\nOpenAPI 3 description URL", "createdAt": "2020-01-08T12:49:05Z", "url": "https://github.com/nordic-institute/X-Road/pull/309", "merged": true, "mergeCommit": {"oid": "2b6c210eb4fc3ce35f216523d14cf6a6345938a9"}, "closed": true, "closedAt": "2020-01-10T09:46:54Z", "author": {"login": "TJaakkola"}, "timelineItems": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABb1hlDJgH2gAyMzYwNDQxNjAzOmM5N2UxNjg0MGNhN2NmMjY3ZjhkMjhiODFjM2JjYjAyZDY3MmQ4OGQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABb47BUwAFqTM0MTAzNjgzNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "c97e16840ca7cf267f8d28b81c3bcb02d672d88d", "author": {"user": {"login": "TJaakkola", "name": "Tapio Jaakkola"}}, "url": "https://github.com/nordic-institute/X-Road/commit/c97e16840ca7cf267f8d28b81c3bcb02d672d88d", "committedDate": "2019-12-30T20:00:15Z", "message": "XRDDEV-794: Copy OpenapiParser from proxy-ui to proxy-ui-api"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "82b4895297e7342c84e91aece6ba388452d2cc28", "author": {"user": {"login": "TJaakkola", "name": "Tapio Jaakkola"}}, "url": "https://github.com/nordic-institute/X-Road/commit/82b4895297e7342c84e91aece6ba388452d2cc28", "committedDate": "2020-01-02T14:57:06Z", "message": "XRDDEV-794: Added initial implementation for adding service description of type REST"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f0a8ea41d2130d2038f94ba990a5baee2db9e146", "author": {"user": {"login": "TJaakkola", "name": "Tapio Jaakkola"}}, "url": "https://github.com/nordic-institute/X-Road/commit/f0a8ea41d2130d2038f94ba990a5baee2db9e146", "committedDate": "2020-01-07T08:07:32Z", "message": "XRDDEV-794: Add initial implementation for adding REST api using openapi3 description URL"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "495cf89bba9254c24a6d7b726ffa33532e39beb7", "author": {"user": {"login": "TJaakkola", "name": "Tapio Jaakkola"}}, "url": "https://github.com/nordic-institute/X-Road/commit/495cf89bba9254c24a6d7b726ffa33532e39beb7", "committedDate": "2020-01-08T12:31:48Z", "message": "XRDDEV-794: Refactoring & add integration tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0918e47f01e1e94d51f6b20ff15b564e13759736", "author": {"user": {"login": "TJaakkola", "name": "Tapio Jaakkola"}}, "url": "https://github.com/nordic-institute/X-Road/commit/0918e47f01e1e94d51f6b20ff15b564e13759736", "committedDate": "2020-01-09T10:36:37Z", "message": "XRDDEV-794: Remove unused import"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6d97662cb3a0dc35e69d9cf5914b787a079f4330", "author": {"user": {"login": "TJaakkola", "name": "Tapio Jaakkola"}}, "url": "https://github.com/nordic-institute/X-Road/commit/6d97662cb3a0dc35e69d9cf5914b787a079f4330", "committedDate": "2020-01-09T11:29:22Z", "message": "XRDDEV-794: Refactoring according to sonarqube issues"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQwNDg3NjA1", "url": "https://github.com/nordic-institute/X-Road/pull/309#pullrequestreview-340487605", "createdAt": "2020-01-09T12:32:07Z", "commit": {"oid": "6d97662cb3a0dc35e69d9cf5914b787a079f4330"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOVQxMjozMjowN1rOFb0ZEg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOVQxMzoyMjowMVrOFb1mzw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDcxNDI1OA==", "bodyText": "Try-catch not needed here because the exception is already added to method signature", "url": "https://github.com/nordic-institute/X-Road/pull/309#discussion_r364714258", "createdAt": "2020-01-09T12:32:07Z", "author": {"login": "carohauta"}, "path": "src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/service/ServiceDescriptionService.java", "diffHunk": "@@ -235,55 +251,210 @@ public ServiceDescriptionType addWsdlServiceDescription(ClientId clientId, Strin\n     /**\n      * Create a new {@link EndpointType} for all Services in the provided {@link ServiceDescriptionType}.\n      * If an equal EndpointType already exists for the provided {@link ClientType} it will not be returned\n+     *\n      * @param client\n      * @param newServiceDescription\n      * @return Only the newly created EndpointTypes\n      */\n     private Collection<EndpointType> resolveNewEndpoints(ClientType client,\n-            ServiceDescriptionType newServiceDescription) {\n+                                                         ServiceDescriptionType newServiceDescription) {\n         Map<String, EndpointType> endpointMap = new HashMap<>();\n \n         // add all new endpoints into a hashmap with a combination key\n         newServiceDescription.getService().forEach(serviceType -> {\n             EndpointType endpointType = new EndpointType(serviceType.getServiceCode(), EndpointType.ANY_METHOD,\n                     EndpointType.ANY_PATH, true);\n-            String endpointKey = endpointType.getServiceCode() + endpointType.getMethod() + endpointType.getPath()\n-                    + endpointType.isGenerated();\n+            String endpointKey = createEndpointKey(endpointType);\n             endpointMap.put(endpointKey, endpointType);\n         });\n \n         // remove all existing endpoints with an equal combination key from the map\n         client.getEndpoint().forEach(endpointType -> {\n-            String endpointKey = endpointType.getServiceCode() + endpointType.getMethod() + endpointType.getPath()\n-                    + endpointType.isGenerated();\n+            String endpointKey = createEndpointKey(endpointType);\n             endpointMap.remove(endpointKey);\n         });\n \n         return endpointMap.values();\n     }\n \n+    private String createEndpointKey(EndpointType endpointType) {\n+        return endpointType.getServiceCode() + endpointType.getMethod() + endpointType.getPath()\n+                + endpointType.isGenerated();\n+    }\n+\n+    public ServiceDescriptionType addOpenapi3ServiceDescription(ClientId clientId, String url,\n+                                                                String serviceCode, boolean ignoreWarnings)\n+            throws OpenApiParser.ParsingException, ClientNotFoundException,\n+            UnhandledWarningsException,\n+            UrlAlreadyExistsException,\n+            ServiceCodeAlreadyExistsException {\n+        verifyAuthority(\"ADD_OPENAPI3\");\n+\n+        // Parse openapi definition\n+        OpenApiParser.Result result = null;\n+        try {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6d97662cb3a0dc35e69d9cf5914b787a079f4330"}, "originalPosition": 198}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDcxNTgwMw==", "bodyText": "Try-catch not needed here because the exceptions are already added to method signature", "url": "https://github.com/nordic-institute/X-Road/pull/309#discussion_r364715803", "createdAt": "2020-01-09T12:36:21Z", "author": {"login": "carohauta"}, "path": "src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/service/ServiceDescriptionService.java", "diffHunk": "@@ -235,55 +251,210 @@ public ServiceDescriptionType addWsdlServiceDescription(ClientId clientId, Strin\n     /**\n      * Create a new {@link EndpointType} for all Services in the provided {@link ServiceDescriptionType}.\n      * If an equal EndpointType already exists for the provided {@link ClientType} it will not be returned\n+     *\n      * @param client\n      * @param newServiceDescription\n      * @return Only the newly created EndpointTypes\n      */\n     private Collection<EndpointType> resolveNewEndpoints(ClientType client,\n-            ServiceDescriptionType newServiceDescription) {\n+                                                         ServiceDescriptionType newServiceDescription) {\n         Map<String, EndpointType> endpointMap = new HashMap<>();\n \n         // add all new endpoints into a hashmap with a combination key\n         newServiceDescription.getService().forEach(serviceType -> {\n             EndpointType endpointType = new EndpointType(serviceType.getServiceCode(), EndpointType.ANY_METHOD,\n                     EndpointType.ANY_PATH, true);\n-            String endpointKey = endpointType.getServiceCode() + endpointType.getMethod() + endpointType.getPath()\n-                    + endpointType.isGenerated();\n+            String endpointKey = createEndpointKey(endpointType);\n             endpointMap.put(endpointKey, endpointType);\n         });\n \n         // remove all existing endpoints with an equal combination key from the map\n         client.getEndpoint().forEach(endpointType -> {\n-            String endpointKey = endpointType.getServiceCode() + endpointType.getMethod() + endpointType.getPath()\n-                    + endpointType.isGenerated();\n+            String endpointKey = createEndpointKey(endpointType);\n             endpointMap.remove(endpointKey);\n         });\n \n         return endpointMap.values();\n     }\n \n+    private String createEndpointKey(EndpointType endpointType) {\n+        return endpointType.getServiceCode() + endpointType.getMethod() + endpointType.getPath()\n+                + endpointType.isGenerated();\n+    }\n+\n+    public ServiceDescriptionType addOpenapi3ServiceDescription(ClientId clientId, String url,\n+                                                                String serviceCode, boolean ignoreWarnings)\n+            throws OpenApiParser.ParsingException, ClientNotFoundException,\n+            UnhandledWarningsException,\n+            UrlAlreadyExistsException,\n+            ServiceCodeAlreadyExistsException {\n+        verifyAuthority(\"ADD_OPENAPI3\");\n+\n+        // Parse openapi definition\n+        OpenApiParser.Result result = null;\n+        try {\n+            result = openApiParser.parse(url);\n+        } catch (OpenApiParser.ParsingException e) {\n+            throw e;\n+        }\n+\n+        if (!ignoreWarnings && result.hasWarnings()) {\n+            WarningDeviation openapiParserWarnings = new WarningDeviation(\"OpenapiParserWarnings\",\n+                    result.getWarnings());\n+            throw new UnhandledWarningsException(Arrays.asList(openapiParserWarnings));\n+        }\n+\n+        ClientType client = clientService.getClient(clientId);\n+        if (client == null) {\n+            throw new ClientNotFoundException(CLIENT_WITH_ID + \" \" + clientId.toShortString() + \" not found\");\n+        }\n+\n+        ServiceDescriptionType serviceDescriptionType = getServiceDescriptionOfType(client, url,\n+                DescriptionType.OPENAPI3);\n+\n+        // Initiate default service\n+        ServiceType serviceType = new ServiceType();\n+        serviceType.setServiceCode(serviceCode);\n+        serviceType.setTimeout(DEFAULT_SERVICE_TIMEOUT);\n+        serviceType.setUrl(url);\n+        serviceType.setServiceDescription(serviceDescriptionType);\n+\n+        // Populate ServiceDescription\n+        serviceDescriptionType.getService().add(serviceType);\n+\n+        // Create endpoints\n+        List<EndpointType> endpoints = result.getOperations().stream()\n+                .map(operation -> new EndpointType(serviceCode, operation.getMethod(), operation.getPath(), true))\n+                .collect(Collectors.toList());\n+\n+        try {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6d97662cb3a0dc35e69d9cf5914b787a079f4330"}, "originalPosition": 233}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDcyOTc4NA==", "bodyText": "restServiceCode might be null here which causes problems later. Needs a null check and proper exception (BadRequestException)", "url": "https://github.com/nordic-institute/X-Road/pull/309#discussion_r364729784", "createdAt": "2020-01-09T13:12:08Z", "author": {"login": "carohauta"}, "path": "src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/openapi/ClientsApiController.java", "diffHunk": "@@ -336,9 +341,25 @@ private ClientType getClientType(String encodedId) {\n                 // deviation data (errorcode + warnings) copied\n                 throw new ConflictException(e);\n             }\n-\n         } else if (serviceDescription.getType() == ServiceType.OPENAPI3) {\n-            return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);\n+            try {\n+                addedServiceDescriptionType = serviceDescriptionService.addOpenapi3ServiceDescription(clientId, url,\n+                        restServiceCode, ignoreWarnings);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6d97662cb3a0dc35e69d9cf5914b787a079f4330"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDczMDUwNQ==", "bodyText": "serviceDescription.getRestServiceCode() might return null here which causes problems later. Needs a null check and proper exception (BadRequestException). Could also use the above introduced restServiceCode variable.", "url": "https://github.com/nordic-institute/X-Road/pull/309#discussion_r364730505", "createdAt": "2020-01-09T13:13:45Z", "author": {"login": "carohauta"}, "path": "src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/openapi/ClientsApiController.java", "diffHunk": "@@ -336,9 +341,25 @@ private ClientType getClientType(String encodedId) {\n                 // deviation data (errorcode + warnings) copied\n                 throw new ConflictException(e);\n             }\n-\n         } else if (serviceDescription.getType() == ServiceType.OPENAPI3) {\n-            return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);\n+            try {\n+                addedServiceDescriptionType = serviceDescriptionService.addOpenapi3ServiceDescription(clientId, url,\n+                        restServiceCode, ignoreWarnings);\n+            } catch (OpenApiParser.ParsingException | UnhandledWarningsException e) {\n+                throw new BadRequestException(e);\n+            } catch (ClientNotFoundException e) {\n+                throw new ResourceNotFoundException(e);\n+            } catch (ServiceDescriptionService.UrlAlreadyExistsException\n+                    | ServiceDescriptionService.ServiceCodeAlreadyExistsException e) {\n+                throw new ConflictException(e);\n+            }\n+        } else if (serviceDescription.getType() == ServiceType.REST) {\n+            try {\n+                addedServiceDescriptionType = serviceDescriptionService.addRestEndpointServiceDescription(clientId,\n+                        url, serviceDescription.getRestServiceCode());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6d97662cb3a0dc35e69d9cf5914b787a079f4330"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDczNDE1OQ==", "bodyText": "Could also be simplified with Stream#anyMatch\nBoolean hasDuplicates = serviceDescription.getClient().getServiceDescription().stream()\n                .anyMatch(other -> !serviceDescription.equals(other) && serviceDescription.getUrl().equals(other.getUrl()));", "url": "https://github.com/nordic-institute/X-Road/pull/309#discussion_r364734159", "createdAt": "2020-01-09T13:22:01Z", "author": {"login": "carohauta"}, "path": "src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/service/ServiceDescriptionService.java", "diffHunk": "@@ -235,55 +251,210 @@ public ServiceDescriptionType addWsdlServiceDescription(ClientId clientId, Strin\n     /**\n      * Create a new {@link EndpointType} for all Services in the provided {@link ServiceDescriptionType}.\n      * If an equal EndpointType already exists for the provided {@link ClientType} it will not be returned\n+     *\n      * @param client\n      * @param newServiceDescription\n      * @return Only the newly created EndpointTypes\n      */\n     private Collection<EndpointType> resolveNewEndpoints(ClientType client,\n-            ServiceDescriptionType newServiceDescription) {\n+                                                         ServiceDescriptionType newServiceDescription) {\n         Map<String, EndpointType> endpointMap = new HashMap<>();\n \n         // add all new endpoints into a hashmap with a combination key\n         newServiceDescription.getService().forEach(serviceType -> {\n             EndpointType endpointType = new EndpointType(serviceType.getServiceCode(), EndpointType.ANY_METHOD,\n                     EndpointType.ANY_PATH, true);\n-            String endpointKey = endpointType.getServiceCode() + endpointType.getMethod() + endpointType.getPath()\n-                    + endpointType.isGenerated();\n+            String endpointKey = createEndpointKey(endpointType);\n             endpointMap.put(endpointKey, endpointType);\n         });\n \n         // remove all existing endpoints with an equal combination key from the map\n         client.getEndpoint().forEach(endpointType -> {\n-            String endpointKey = endpointType.getServiceCode() + endpointType.getMethod() + endpointType.getPath()\n-                    + endpointType.isGenerated();\n+            String endpointKey = createEndpointKey(endpointType);\n             endpointMap.remove(endpointKey);\n         });\n \n         return endpointMap.values();\n     }\n \n+    private String createEndpointKey(EndpointType endpointType) {\n+        return endpointType.getServiceCode() + endpointType.getMethod() + endpointType.getPath()\n+                + endpointType.isGenerated();\n+    }\n+\n+    public ServiceDescriptionType addOpenapi3ServiceDescription(ClientId clientId, String url,\n+                                                                String serviceCode, boolean ignoreWarnings)\n+            throws OpenApiParser.ParsingException, ClientNotFoundException,\n+            UnhandledWarningsException,\n+            UrlAlreadyExistsException,\n+            ServiceCodeAlreadyExistsException {\n+        verifyAuthority(\"ADD_OPENAPI3\");\n+\n+        // Parse openapi definition\n+        OpenApiParser.Result result = null;\n+        try {\n+            result = openApiParser.parse(url);\n+        } catch (OpenApiParser.ParsingException e) {\n+            throw e;\n+        }\n+\n+        if (!ignoreWarnings && result.hasWarnings()) {\n+            WarningDeviation openapiParserWarnings = new WarningDeviation(\"OpenapiParserWarnings\",\n+                    result.getWarnings());\n+            throw new UnhandledWarningsException(Arrays.asList(openapiParserWarnings));\n+        }\n+\n+        ClientType client = clientService.getClient(clientId);\n+        if (client == null) {\n+            throw new ClientNotFoundException(CLIENT_WITH_ID + \" \" + clientId.toShortString() + \" not found\");\n+        }\n+\n+        ServiceDescriptionType serviceDescriptionType = getServiceDescriptionOfType(client, url,\n+                DescriptionType.OPENAPI3);\n+\n+        // Initiate default service\n+        ServiceType serviceType = new ServiceType();\n+        serviceType.setServiceCode(serviceCode);\n+        serviceType.setTimeout(DEFAULT_SERVICE_TIMEOUT);\n+        serviceType.setUrl(url);\n+        serviceType.setServiceDescription(serviceDescriptionType);\n+\n+        // Populate ServiceDescription\n+        serviceDescriptionType.getService().add(serviceType);\n+\n+        // Create endpoints\n+        List<EndpointType> endpoints = result.getOperations().stream()\n+                .map(operation -> new EndpointType(serviceCode, operation.getMethod(), operation.getPath(), true))\n+                .collect(Collectors.toList());\n+\n+        try {\n+            checkDuplicateUrl(serviceDescriptionType);\n+            checkDuplicateServiceCodes(serviceDescriptionType);\n+        } catch (UrlAlreadyExistsException | ServiceCodeAlreadyExistsException e) {\n+            throw e;\n+        }\n+\n+        // Populate client with new servicedescription and endpoints\n+        client.getEndpoint().addAll(endpoints);\n+        client.getServiceDescription().add(serviceDescriptionType);\n+        clientRepository.saveOrUpdateAndFlush(client);\n+\n+        return serviceDescriptionType;\n+    }\n+\n+    /**\n+     * Check whether the ServiceDescriptions url already exists in the linked Client\n+     *\n+     * @param serviceDescription\n+     * @throws UrlAlreadyExistsException\n+     */\n+    private void checkDuplicateUrl(ServiceDescriptionType serviceDescription) throws UrlAlreadyExistsException {\n+        Boolean hasDuplicates = serviceDescription.getClient().getServiceDescription().stream()\n+                .map(other -> !serviceDescription.equals(other) && serviceDescription.getUrl().equals(other.getUrl()))\n+                .reduce(false, (prev, curr) -> prev || curr);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6d97662cb3a0dc35e69d9cf5914b787a079f4330"}, "originalPosition": 257}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6ac518dbfb9a83dd12384cc9b3192012a662ae7b", "author": {"user": {"login": "TJaakkola", "name": "Tapio Jaakkola"}}, "url": "https://github.com/nordic-institute/X-Road/commit/6ac518dbfb9a83dd12384cc9b3192012a662ae7b", "committedDate": "2020-01-09T21:18:11Z", "message": "XRDDEV-794: Fixes according to review comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "518a6baa36d3566bc99f9fe304a20306364ba0d8", "author": {"user": {"login": "TJaakkola", "name": "Tapio Jaakkola"}}, "url": "https://github.com/nordic-institute/X-Road/commit/518a6baa36d3566bc99f9fe304a20306364ba0d8", "committedDate": "2020-01-10T07:24:39Z", "message": "XRDDEV-794: Fix checkstyle error"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQwOTk1ODk1", "url": "https://github.com/nordic-institute/X-Road/pull/309#pullrequestreview-340995895", "createdAt": "2020-01-10T07:46:37Z", "commit": {"oid": "518a6baa36d3566bc99f9fe304a20306364ba0d8"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMFQwNzo0NjozN1rOFcMT9w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMFQwNzo0NjozN1rOFcMT9w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTEwNjE2Nw==", "bodyText": "The BadRequestException should be moved into the controller.\nThis particular case is somewhat unusual because the serviceCode param should actually be validated already in the API layer but we can't do that because we have a shared endpoint for adding WSDL's and OPENAPI/REST types.", "url": "https://github.com/nordic-institute/X-Road/pull/309#discussion_r365106167", "createdAt": "2020-01-10T07:46:37Z", "author": {"login": "carohauta"}, "path": "src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/service/ServiceDescriptionService.java", "diffHunk": "@@ -290,14 +291,13 @@ public ServiceDescriptionType addOpenapi3ServiceDescription(ClientId clientId, S\n             ServiceCodeAlreadyExistsException {\n         verifyAuthority(\"ADD_OPENAPI3\");\n \n-        // Parse openapi definition\n-        OpenApiParser.Result result = null;\n-        try {\n-            result = openApiParser.parse(url);\n-        } catch (OpenApiParser.ParsingException e) {\n-            throw e;\n+        if (serviceCode == null) {\n+            throw new BadRequestException(\"Missing ServiceCode\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "518a6baa36d3566bc99f9fe304a20306364ba0d8"}, "originalPosition": 19}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "35973b33dce6a5160d9152e669e18c56fdaf1867", "author": {"user": {"login": "TJaakkola", "name": "Tapio Jaakkola"}}, "url": "https://github.com/nordic-institute/X-Road/commit/35973b33dce6a5160d9152e669e18c56fdaf1867", "committedDate": "2020-01-10T08:50:53Z", "message": "XRDDEV-794: Throw MissingParameterException from service layer and change it to BadRequestException in the controller"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQxMDM2MTg2", "url": "https://github.com/nordic-institute/X-Road/pull/309#pullrequestreview-341036186", "createdAt": "2020-01-10T09:19:17Z", "commit": {"oid": "35973b33dce6a5160d9152e669e18c56fdaf1867"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMFQwOToxOToxN1rOFcOORQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMFQwOToxOToxN1rOFcOORQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTEzNzQ3Nw==", "bodyText": "Redundant catch", "url": "https://github.com/nordic-institute/X-Road/pull/309#discussion_r365137477", "createdAt": "2020-01-10T09:19:17Z", "author": {"login": "carohauta"}, "path": "src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/openapi/ClientsApiController.java", "diffHunk": "@@ -336,9 +342,27 @@ private ClientType getClientType(String encodedId) {\n                 // deviation data (errorcode + warnings) copied\n                 throw new ConflictException(e);\n             }\n-\n         } else if (serviceDescription.getType() == ServiceType.OPENAPI3) {\n-            return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);\n+            try {\n+                addedServiceDescriptionType = serviceDescriptionService.addOpenapi3ServiceDescription(clientId, url,\n+                        restServiceCode, ignoreWarnings);\n+            } catch (OpenApiParser.ParsingException | UnhandledWarningsException | MissingParameterException e) {\n+                throw new BadRequestException(e);\n+            } catch (ClientNotFoundException e) {\n+                throw new ResourceNotFoundException(e);\n+            } catch (ServiceDescriptionService.UrlAlreadyExistsException\n+                    | ServiceDescriptionService.ServiceCodeAlreadyExistsException e) {\n+                throw new ConflictException(e);\n+            }\n+        } else if (serviceDescription.getType() == ServiceType.REST) {\n+            try {\n+                addedServiceDescriptionType = serviceDescriptionService.addRestEndpointServiceDescription(clientId,\n+                        url, restServiceCode);\n+            } catch (ClientNotFoundException e) {\n+                throw new ResourceNotFoundException(e);\n+            } catch (MissingParameterException e) {\n+                throw new BadRequestException(e);\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "35973b33dce6a5160d9152e669e18c56fdaf1867"}, "originalPosition": 63}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQxMDM2ODM3", "url": "https://github.com/nordic-institute/X-Road/pull/309#pullrequestreview-341036837", "createdAt": "2020-01-10T09:20:32Z", "commit": {"oid": "35973b33dce6a5160d9152e669e18c56fdaf1867"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4262, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}