{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg5ODUxNjA5", "number": 415, "reviewThreads": {"totalCount": 19, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQwNzoxMzo0NlrODrhBcg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxMTozMToyMVrODrmmsw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2OTU2NDAyOnYy", "diffSide": "RIGHT", "path": "src/common-util/src/main/java/ee/ria/xroad/common/conf/globalconf/ConfigurationAnchorV2.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQwNzoxMzo0NlrOF75yxQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxNDoyMzozMlrOF8JW9A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODM1NzE4OQ==", "bodyText": "So it seems that this constructor results in a different kind of ConfigurationAnchorV2 object than the filename-based one. Due to differences in AbstractXmlConf.load(byte[]) and AbstractXmlConf.load(String), one results in an object that has FileContentChangeChecker, other does not.\nThis is probably fine, and it makes sense that byte[] based object does not have a FileContentChangeChecker if you dig into the internals to see it, and the new variant of ConfigurationAnchorV2 object is used in such a way that missing FileContentChangeChecker is what we want - but should be clearly documented in the new ConfigurationAnchorV2 and AbstractXmlConf constructors. \"use this if you want to do X, use other if you want to do Y\". Otherwise someone can think one is a convenience constructor that still creates an identical object, and use the wrong constructor.", "url": "https://github.com/nordic-institute/X-Road/pull/415#discussion_r398357189", "createdAt": "2020-03-26T07:13:46Z", "author": {"login": "jansu76"}, "path": "src/common-util/src/main/java/ee/ria/xroad/common/conf/globalconf/ConfigurationAnchorV2.java", "diffHunk": "@@ -56,6 +56,13 @@ public ConfigurationAnchorV2(String fileName) {\n                 PrivateParametersSchemaValidatorV2.class); // also applies to stand-alone configuration source\n     }\n \n+    /**\n+     * @param fileBytes the configuration anchor file bytes\n+     */\n+    public ConfigurationAnchorV2(byte[] fileBytes) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "620778fef93c1aa59e19ff7d32c2dbebf76bea80"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODYxMjIxMg==", "bodyText": "Improved the javadocs for both constructors.", "url": "https://github.com/nordic-institute/X-Road/pull/415#discussion_r398612212", "createdAt": "2020-03-26T14:23:32Z", "author": {"login": "carohauta"}, "path": "src/common-util/src/main/java/ee/ria/xroad/common/conf/globalconf/ConfigurationAnchorV2.java", "diffHunk": "@@ -56,6 +56,13 @@ public ConfigurationAnchorV2(String fileName) {\n                 PrivateParametersSchemaValidatorV2.class); // also applies to stand-alone configuration source\n     }\n \n+    /**\n+     * @param fileBytes the configuration anchor file bytes\n+     */\n+    public ConfigurationAnchorV2(byte[] fileBytes) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODM1NzE4OQ=="}, "originalCommit": {"oid": "620778fef93c1aa59e19ff7d32c2dbebf76bea80"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2OTU5OTUwOnYy", "diffSide": "RIGHT", "path": "src/proxy-ui-api/src/main/resources/openapi-definition.yaml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQwNzoyNzo0MFrOF76HtQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxNDoyODoxNFrOF8JlsA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODM2MjU0OQ==", "bodyText": "I initially though this should be a PUT but now that I think again, maybe POST is better? Is the logic something like we have a hidden \"sink\" of anchor preview versions? You can add more items to the resource, but you can never get the items out. Kind of like dev/null.\nWhat do you think of plural /system/anchor/previews actually? Would that be more consistent with our naming conventions? If we try to prefer resource names / subjects instead of actions / verbs when possible (preview could be either, not sure which meaning it has now here).", "url": "https://github.com/nordic-institute/X-Road/pull/415#discussion_r398362549", "createdAt": "2020-03-26T07:27:40Z", "author": {"login": "jansu76"}, "path": "src/proxy-ui-api/src/main/resources/openapi-definition.yaml", "diffHunk": "@@ -3111,17 +3111,47 @@ paths:\n         - security server\n       summary: upload a configuration anchor file\n       operationId: uploadAnchor\n-      description: Administrator uploads configuration anchor file\n+      description: Administrator uploads a configuration anchor file\n       requestBody:\n         description: configuration anchor\n         content:\n-          application/xml:\n+          application/octet-stream:\n+            schema:\n+              type: string\n+              format: binary\n+              description: configuration anchor file\n+      responses:\n+        '201':\n+          description: configuration anchor uploaded\n+        '400':\n+          description: request was invalid\n+        '401':\n+          description: authentication credentials are missing\n+        '403':\n+          description: request has been refused\n+        '404':\n+          description: resource requested does not exists\n+        '406':\n+          description: request specified an invalid format\n+        '409':\n+          description: an existing item already exists\n+        '500':\n+          description: internal server error\n+  /system/anchor/preview:\n+    post: # ok", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "620778fef93c1aa59e19ff7d32c2dbebf76bea80"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODYxNTk4NA==", "bodyText": "Is the logic something like we have a hidden \"sink\" of anchor preview versions?\n\nSomething like this yeah. We are really not updating anything (hence PUT won't do) but rather adding a totally new resource. I just might change the endpoint to a plural. preview is indeed somewhat ambiguous.", "url": "https://github.com/nordic-institute/X-Road/pull/415#discussion_r398615984", "createdAt": "2020-03-26T14:28:14Z", "author": {"login": "carohauta"}, "path": "src/proxy-ui-api/src/main/resources/openapi-definition.yaml", "diffHunk": "@@ -3111,17 +3111,47 @@ paths:\n         - security server\n       summary: upload a configuration anchor file\n       operationId: uploadAnchor\n-      description: Administrator uploads configuration anchor file\n+      description: Administrator uploads a configuration anchor file\n       requestBody:\n         description: configuration anchor\n         content:\n-          application/xml:\n+          application/octet-stream:\n+            schema:\n+              type: string\n+              format: binary\n+              description: configuration anchor file\n+      responses:\n+        '201':\n+          description: configuration anchor uploaded\n+        '400':\n+          description: request was invalid\n+        '401':\n+          description: authentication credentials are missing\n+        '403':\n+          description: request has been refused\n+        '404':\n+          description: resource requested does not exists\n+        '406':\n+          description: request specified an invalid format\n+        '409':\n+          description: an existing item already exists\n+        '500':\n+          description: internal server error\n+  /system/anchor/preview:\n+    post: # ok", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODM2MjU0OQ=="}, "originalCommit": {"oid": "620778fef93c1aa59e19ff7d32c2dbebf76bea80"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2OTYwNDg0OnYy", "diffSide": "RIGHT", "path": "src/proxy-ui-api/src/main/resources/openapi-definition.yaml", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQwNzoyOTozMlrOF76Ktw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QwOTozNzoxNFrOF8pjPg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODM2MzMxOQ==", "bodyText": "Maybe should mention that the anchor is also validated, e.g. if it is for wrong instance, error will be returned? Now it sounds like the purpose of this endpoint is only to find out the hash.", "url": "https://github.com/nordic-institute/X-Road/pull/415#discussion_r398363319", "createdAt": "2020-03-26T07:29:32Z", "author": {"login": "jansu76"}, "path": "src/proxy-ui-api/src/main/resources/openapi-definition.yaml", "diffHunk": "@@ -3111,17 +3111,47 @@ paths:\n         - security server\n       summary: upload a configuration anchor file\n       operationId: uploadAnchor\n-      description: Administrator uploads configuration anchor file\n+      description: Administrator uploads a configuration anchor file\n       requestBody:\n         description: configuration anchor\n         content:\n-          application/xml:\n+          application/octet-stream:\n+            schema:\n+              type: string\n+              format: binary\n+              description: configuration anchor file\n+      responses:\n+        '201':\n+          description: configuration anchor uploaded\n+        '400':\n+          description: request was invalid\n+        '401':\n+          description: authentication credentials are missing\n+        '403':\n+          description: request has been refused\n+        '404':\n+          description: resource requested does not exists\n+        '406':\n+          description: request specified an invalid format\n+        '409':\n+          description: an existing item already exists\n+        '500':\n+          description: internal server error\n+  /system/anchor/preview:\n+    post: # ok\n+      tags:\n+        - security server\n+      summary: Read the configuration anchor file and return the hash for a preview. The anchor will not be saved.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "620778fef93c1aa59e19ff7d32c2dbebf76bea80"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODYyMTU1MQ==", "bodyText": "Yes the anchor's instance needs to match the current instance, otherwise an error will be returned. Will add a mention about the validation part.\nShould we improve the API definition to also include this kind of error scenarios in all summary fields?", "url": "https://github.com/nordic-institute/X-Road/pull/415#discussion_r398621551", "createdAt": "2020-03-26T14:35:17Z", "author": {"login": "carohauta"}, "path": "src/proxy-ui-api/src/main/resources/openapi-definition.yaml", "diffHunk": "@@ -3111,17 +3111,47 @@ paths:\n         - security server\n       summary: upload a configuration anchor file\n       operationId: uploadAnchor\n-      description: Administrator uploads configuration anchor file\n+      description: Administrator uploads a configuration anchor file\n       requestBody:\n         description: configuration anchor\n         content:\n-          application/xml:\n+          application/octet-stream:\n+            schema:\n+              type: string\n+              format: binary\n+              description: configuration anchor file\n+      responses:\n+        '201':\n+          description: configuration anchor uploaded\n+        '400':\n+          description: request was invalid\n+        '401':\n+          description: authentication credentials are missing\n+        '403':\n+          description: request has been refused\n+        '404':\n+          description: resource requested does not exists\n+        '406':\n+          description: request specified an invalid format\n+        '409':\n+          description: an existing item already exists\n+        '500':\n+          description: internal server error\n+  /system/anchor/preview:\n+    post: # ok\n+      tags:\n+        - security server\n+      summary: Read the configuration anchor file and return the hash for a preview. The anchor will not be saved.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODM2MzMxOQ=="}, "originalCommit": {"oid": "620778fef93c1aa59e19ff7d32c2dbebf76bea80"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTEzOTY0Ng==", "bodyText": "Not sure of all summary fields, if you have some specific ones on you mind and have the energy for it, sure. I don't know how much work that would mean.\nI think this method is maybe different from some average endpoint in the sense that validating the anchor is more important part of what it does. For some other endpoints, like e.g. add client, validation is more of a side effect. You don't call add client to validate the parameters, but you call /system/anchor/preview to validate the anchor (well, kind of).", "url": "https://github.com/nordic-institute/X-Road/pull/415#discussion_r399139646", "createdAt": "2020-03-27T09:37:14Z", "author": {"login": "jansu76"}, "path": "src/proxy-ui-api/src/main/resources/openapi-definition.yaml", "diffHunk": "@@ -3111,17 +3111,47 @@ paths:\n         - security server\n       summary: upload a configuration anchor file\n       operationId: uploadAnchor\n-      description: Administrator uploads configuration anchor file\n+      description: Administrator uploads a configuration anchor file\n       requestBody:\n         description: configuration anchor\n         content:\n-          application/xml:\n+          application/octet-stream:\n+            schema:\n+              type: string\n+              format: binary\n+              description: configuration anchor file\n+      responses:\n+        '201':\n+          description: configuration anchor uploaded\n+        '400':\n+          description: request was invalid\n+        '401':\n+          description: authentication credentials are missing\n+        '403':\n+          description: request has been refused\n+        '404':\n+          description: resource requested does not exists\n+        '406':\n+          description: request specified an invalid format\n+        '409':\n+          description: an existing item already exists\n+        '500':\n+          description: internal server error\n+  /system/anchor/preview:\n+    post: # ok\n+      tags:\n+        - security server\n+      summary: Read the configuration anchor file and return the hash for a preview. The anchor will not be saved.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODM2MzMxOQ=="}, "originalCommit": {"oid": "620778fef93c1aa59e19ff7d32c2dbebf76bea80"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2OTY0NDQ4OnYy", "diffSide": "RIGHT", "path": "src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/repository/AnchorRepository.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQwNzo0Mzo1MVrOF76iWg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxNDo0NzowOFrOF8KfDA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODM2OTM3MA==", "bodyText": "Should throw IOException instead of Exception?", "url": "https://github.com/nordic-institute/X-Road/pull/415#discussion_r398369370", "createdAt": "2020-03-26T07:43:51Z", "author": {"login": "jansu76"}, "path": "src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/repository/AnchorRepository.java", "diffHunk": "@@ -69,4 +71,12 @@\n     public ConfigurationAnchorV2 loadAnchorFromFile() {\n         return new ConfigurationAnchorV2(CONFIGURATION_ANCHOR_FILENAME);\n     }\n+\n+    /**\n+     * Save anchor. The replacing of the old anchor file is done atomically.\n+     * @return\n+     */\n+    public void saveAndReplace(File anchorFile) throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "620778fef93c1aa59e19ff7d32c2dbebf76bea80"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODYzMDY2OA==", "bodyText": "It should! Fixed", "url": "https://github.com/nordic-institute/X-Road/pull/415#discussion_r398630668", "createdAt": "2020-03-26T14:47:08Z", "author": {"login": "carohauta"}, "path": "src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/repository/AnchorRepository.java", "diffHunk": "@@ -69,4 +71,12 @@\n     public ConfigurationAnchorV2 loadAnchorFromFile() {\n         return new ConfigurationAnchorV2(CONFIGURATION_ANCHOR_FILENAME);\n     }\n+\n+    /**\n+     * Save anchor. The replacing of the old anchor file is done atomically.\n+     * @return\n+     */\n+    public void saveAndReplace(File anchorFile) throws Exception {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODM2OTM3MA=="}, "originalCommit": {"oid": "620778fef93c1aa59e19ff7d32c2dbebf76bea80"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2OTY2NDIyOnYy", "diffSide": "RIGHT", "path": "src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/service/ConfigurationVerifier.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQwNzo1MDoyNFrOF76uVA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQwNzo1MDoyNFrOF76uVA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODM3MjQzNg==", "bodyText": "Nice! \ud83d\udc4d", "url": "https://github.com/nordic-institute/X-Road/pull/415#discussion_r398372436", "createdAt": "2020-03-26T07:50:24Z", "author": {"login": "jansu76"}, "path": "src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/service/ConfigurationVerifier.java", "diffHunk": "@@ -0,0 +1,109 @@\n+/**\n+ * The MIT License\n+ * Copyright (c) 2018 Estonian Information System Authority (RIA),\n+ * Nordic Institute for Interoperability Solutions (NIIS), Population Register Centre (VRK)\n+ * Copyright (c) 2015-2017 Estonian Information System Authority (RIA), Population Register Centre (VRK)\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package org.niis.xroad.restapi.service;\n+\n+import lombok.Setter;\n+import org.niis.xroad.restapi.exceptions.ErrorDeviation;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.stereotype.Component;\n+\n+/**\n+ * Verify internal and external configurations\n+ */\n+@Component\n+public class ConfigurationVerifier {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "620778fef93c1aa59e19ff7d32c2dbebf76bea80"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2OTY4NDkyOnYy", "diffSide": "RIGHT", "path": "src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/service/SystemService.java", "isResolved": true, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQwNzo1NzoxOFrOF766uw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxNDoyOTozNlrOF_t-ug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODM3NTYxMQ==", "bodyText": "Why is ConfigurationVerificationException unchecked? My initial feel was to have it as checked, as validating the contents of the anchor file is a major part of what this method does.\nFirst I commented about if it should be http 400 instead of http 500, but I guess these exceptions are about what happens after global config has been fetched from external source, and that global config is invalid, so 500 is the correct one?", "url": "https://github.com/nordic-institute/X-Road/pull/415#discussion_r398375611", "createdAt": "2020-03-26T07:57:18Z", "author": {"login": "jansu76"}, "path": "src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/service/SystemService.java", "diffHunk": "@@ -184,6 +190,82 @@ public AnchorFile getAnchorFile() throws AnchorNotFoundException {\n         return anchorFile;\n     }\n \n+    /**\n+     * Calculate the hex hash of the given anchor file. Used to verify/preview an anchor file before\n+     * uploading it\n+     * @param anchorBytes\n+     * @return\n+     * @throws InvalidAnchorInstanceException anchor is not generated in the current instance\n+     */\n+    public AnchorFile getAnchorFileFromBytes(byte[] anchorBytes) throws InvalidAnchorInstanceException {\n+        ConfigurationAnchorV2 anchor = new ConfigurationAnchorV2(anchorBytes);\n+        verifyAnchorInstance(anchor);\n+        AnchorFile anchorFile = new AnchorFile(calculateAnchorHexHash(anchorBytes));\n+        anchorFile.setCreatedAt(FormatUtils.fromDateToOffsetDateTime(anchor.getGeneratedAt()));\n+        return anchorFile;\n+    }\n+\n+    /**\n+     * Upload a new configuration anchor. A temporary anchor file is created on the filesystem in order to run\n+     * the verification process with configuration-client module (via external script).\n+     * @param anchorBytes\n+     * @throws InvalidAnchorInstanceException anchor is not generated in the current instance\n+     * @throws AnchorUploadException in case of external process exceptions\n+     */\n+    public void uploadAnchor(byte[] anchorBytes) throws InvalidAnchorInstanceException, AnchorUploadException {\n+        ConfigurationAnchorV2 anchor = new ConfigurationAnchorV2(anchorBytes);\n+        verifyAnchorInstance(anchor);\n+        File tempAnchor = null;\n+        try {\n+            tempAnchor = createTemporaryAnchorFile(anchorBytes);\n+            configurationVerifier.verifyInternalConfiguration(tempAnchor.getAbsolutePath());\n+            anchorRepository.saveAndReplace(tempAnchor);\n+        } catch (ConfigurationVerifier.ConfigurationVerificationException ce) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "620778fef93c1aa59e19ff7d32c2dbebf76bea80"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODY0MTMwNw==", "bodyText": "I was thinking that the request itself was fine but there was something else wrong. Thought that the most important thing is to get the error to the end user to see.\nI guess that this could actually be interpreted either way: as a bad request or internal error. Here are the translations for the different errors that ConfigurationVerificationException can mean:\nanchor_not_for_external_source: \"Anchor points to an internal configuration source. Only external configuration source anchors are supported as trusted anchors\"\nmissing_private_params: \"Configuration anchor import failed: invalid anchor file\"\nunreachable: \"Configuration source cannot be reached, check source URL in uploaded anchor file\"\noutdated: \"Configuration from source is out of date\"\nsignature_invalid: \"Signature of configuration cannot be verified\"\nother: \"Configuration from source failed verification\"\nFor example missing_private_params could mean 400 but other could mean 500. Perhaps split the exception into two exceptions: a checked one and a runtime one?", "url": "https://github.com/nordic-institute/X-Road/pull/415#discussion_r398641307", "createdAt": "2020-03-26T15:00:21Z", "author": {"login": "carohauta"}, "path": "src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/service/SystemService.java", "diffHunk": "@@ -184,6 +190,82 @@ public AnchorFile getAnchorFile() throws AnchorNotFoundException {\n         return anchorFile;\n     }\n \n+    /**\n+     * Calculate the hex hash of the given anchor file. Used to verify/preview an anchor file before\n+     * uploading it\n+     * @param anchorBytes\n+     * @return\n+     * @throws InvalidAnchorInstanceException anchor is not generated in the current instance\n+     */\n+    public AnchorFile getAnchorFileFromBytes(byte[] anchorBytes) throws InvalidAnchorInstanceException {\n+        ConfigurationAnchorV2 anchor = new ConfigurationAnchorV2(anchorBytes);\n+        verifyAnchorInstance(anchor);\n+        AnchorFile anchorFile = new AnchorFile(calculateAnchorHexHash(anchorBytes));\n+        anchorFile.setCreatedAt(FormatUtils.fromDateToOffsetDateTime(anchor.getGeneratedAt()));\n+        return anchorFile;\n+    }\n+\n+    /**\n+     * Upload a new configuration anchor. A temporary anchor file is created on the filesystem in order to run\n+     * the verification process with configuration-client module (via external script).\n+     * @param anchorBytes\n+     * @throws InvalidAnchorInstanceException anchor is not generated in the current instance\n+     * @throws AnchorUploadException in case of external process exceptions\n+     */\n+    public void uploadAnchor(byte[] anchorBytes) throws InvalidAnchorInstanceException, AnchorUploadException {\n+        ConfigurationAnchorV2 anchor = new ConfigurationAnchorV2(anchorBytes);\n+        verifyAnchorInstance(anchor);\n+        File tempAnchor = null;\n+        try {\n+            tempAnchor = createTemporaryAnchorFile(anchorBytes);\n+            configurationVerifier.verifyInternalConfiguration(tempAnchor.getAbsolutePath());\n+            anchorRepository.saveAndReplace(tempAnchor);\n+        } catch (ConfigurationVerifier.ConfigurationVerificationException ce) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODM3NTYxMQ=="}, "originalCommit": {"oid": "620778fef93c1aa59e19ff7d32c2dbebf76bea80"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTE0NDYxNg==", "bodyText": "Isn't missing_private_params like the others - anchor (such as internal-configuration-anchor.xml) itself was fine (even though old translation says it was invalid. Is the translation misleading?) but when app downloaded the internal configuration, it was corrupted (private params were missing)? So in that sense it would still be 500?\nI kind of feel all of those should still be checked exceptions, just to communicate to the caller that this kind of things can go wrong, be prepared. Even if we will just http 500 them now, some future service could appreciate that when it builds on top of this method. But I am not really 100% on this, if you think runtime exceptions are better for these, go ahed.", "url": "https://github.com/nordic-institute/X-Road/pull/415#discussion_r399144616", "createdAt": "2020-03-27T09:45:45Z", "author": {"login": "jansu76"}, "path": "src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/service/SystemService.java", "diffHunk": "@@ -184,6 +190,82 @@ public AnchorFile getAnchorFile() throws AnchorNotFoundException {\n         return anchorFile;\n     }\n \n+    /**\n+     * Calculate the hex hash of the given anchor file. Used to verify/preview an anchor file before\n+     * uploading it\n+     * @param anchorBytes\n+     * @return\n+     * @throws InvalidAnchorInstanceException anchor is not generated in the current instance\n+     */\n+    public AnchorFile getAnchorFileFromBytes(byte[] anchorBytes) throws InvalidAnchorInstanceException {\n+        ConfigurationAnchorV2 anchor = new ConfigurationAnchorV2(anchorBytes);\n+        verifyAnchorInstance(anchor);\n+        AnchorFile anchorFile = new AnchorFile(calculateAnchorHexHash(anchorBytes));\n+        anchorFile.setCreatedAt(FormatUtils.fromDateToOffsetDateTime(anchor.getGeneratedAt()));\n+        return anchorFile;\n+    }\n+\n+    /**\n+     * Upload a new configuration anchor. A temporary anchor file is created on the filesystem in order to run\n+     * the verification process with configuration-client module (via external script).\n+     * @param anchorBytes\n+     * @throws InvalidAnchorInstanceException anchor is not generated in the current instance\n+     * @throws AnchorUploadException in case of external process exceptions\n+     */\n+    public void uploadAnchor(byte[] anchorBytes) throws InvalidAnchorInstanceException, AnchorUploadException {\n+        ConfigurationAnchorV2 anchor = new ConfigurationAnchorV2(anchorBytes);\n+        verifyAnchorInstance(anchor);\n+        File tempAnchor = null;\n+        try {\n+            tempAnchor = createTemporaryAnchorFile(anchorBytes);\n+            configurationVerifier.verifyInternalConfiguration(tempAnchor.getAbsolutePath());\n+            anchorRepository.saveAndReplace(tempAnchor);\n+        } catch (ConfigurationVerifier.ConfigurationVerificationException ce) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODM3NTYxMQ=="}, "originalCommit": {"oid": "620778fef93c1aa59e19ff7d32c2dbebf76bea80"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTMyMDMxNg==", "bodyText": "but when app downloaded the internal configuration, it was corrupted (private params were missing)? So in that sense it would still be 500?\n\nDon't know about this. I mean shouldn't the downloading itself be the one failing here already?\n\nI kind of feel all of those should still be checked exceptions, just to communicate to the caller that this kind of things can go wrong, be prepared.\n\nBy this do you mean that all the different cases above (anchor_not_for_external_source, missing_private_params, unreachable etc.) should all actually be their own respected exceptions?", "url": "https://github.com/nordic-institute/X-Road/pull/415#discussion_r399320316", "createdAt": "2020-03-27T14:49:58Z", "author": {"login": "carohauta"}, "path": "src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/service/SystemService.java", "diffHunk": "@@ -184,6 +190,82 @@ public AnchorFile getAnchorFile() throws AnchorNotFoundException {\n         return anchorFile;\n     }\n \n+    /**\n+     * Calculate the hex hash of the given anchor file. Used to verify/preview an anchor file before\n+     * uploading it\n+     * @param anchorBytes\n+     * @return\n+     * @throws InvalidAnchorInstanceException anchor is not generated in the current instance\n+     */\n+    public AnchorFile getAnchorFileFromBytes(byte[] anchorBytes) throws InvalidAnchorInstanceException {\n+        ConfigurationAnchorV2 anchor = new ConfigurationAnchorV2(anchorBytes);\n+        verifyAnchorInstance(anchor);\n+        AnchorFile anchorFile = new AnchorFile(calculateAnchorHexHash(anchorBytes));\n+        anchorFile.setCreatedAt(FormatUtils.fromDateToOffsetDateTime(anchor.getGeneratedAt()));\n+        return anchorFile;\n+    }\n+\n+    /**\n+     * Upload a new configuration anchor. A temporary anchor file is created on the filesystem in order to run\n+     * the verification process with configuration-client module (via external script).\n+     * @param anchorBytes\n+     * @throws InvalidAnchorInstanceException anchor is not generated in the current instance\n+     * @throws AnchorUploadException in case of external process exceptions\n+     */\n+    public void uploadAnchor(byte[] anchorBytes) throws InvalidAnchorInstanceException, AnchorUploadException {\n+        ConfigurationAnchorV2 anchor = new ConfigurationAnchorV2(anchorBytes);\n+        verifyAnchorInstance(anchor);\n+        File tempAnchor = null;\n+        try {\n+            tempAnchor = createTemporaryAnchorFile(anchorBytes);\n+            configurationVerifier.verifyInternalConfiguration(tempAnchor.getAbsolutePath());\n+            anchorRepository.saveAndReplace(tempAnchor);\n+        } catch (ConfigurationVerifier.ConfigurationVerificationException ce) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODM3NTYxMQ=="}, "originalCommit": {"oid": "620778fef93c1aa59e19ff7d32c2dbebf76bea80"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjI2MzQ3NQ==", "bodyText": "Don't know about this. I mean shouldn't the downloading itself be the one failing here already?\n\nNot sure, one should read ConfigurationClientMain and verify_internal_configuration carefully to know for sure. For me it looks like missing_private_params could mean both, bad anchor or bad global conf, but I am not sure. If that is so, then maybe http 500 is more correct, if can't know if it is 400 or 500 for sure.\n\nBy this do you mean that all the different cases above (anchor_not_for_external_source, missing_private_params, unreachable etc.) should all actually be their own respected exceptions?\n\nNo I think a shared checked exception class, like ConfigurationVerificationException but changed into checked one, would be enough.", "url": "https://github.com/nordic-institute/X-Road/pull/415#discussion_r402263475", "createdAt": "2020-04-02T12:10:32Z", "author": {"login": "jansu76"}, "path": "src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/service/SystemService.java", "diffHunk": "@@ -184,6 +190,82 @@ public AnchorFile getAnchorFile() throws AnchorNotFoundException {\n         return anchorFile;\n     }\n \n+    /**\n+     * Calculate the hex hash of the given anchor file. Used to verify/preview an anchor file before\n+     * uploading it\n+     * @param anchorBytes\n+     * @return\n+     * @throws InvalidAnchorInstanceException anchor is not generated in the current instance\n+     */\n+    public AnchorFile getAnchorFileFromBytes(byte[] anchorBytes) throws InvalidAnchorInstanceException {\n+        ConfigurationAnchorV2 anchor = new ConfigurationAnchorV2(anchorBytes);\n+        verifyAnchorInstance(anchor);\n+        AnchorFile anchorFile = new AnchorFile(calculateAnchorHexHash(anchorBytes));\n+        anchorFile.setCreatedAt(FormatUtils.fromDateToOffsetDateTime(anchor.getGeneratedAt()));\n+        return anchorFile;\n+    }\n+\n+    /**\n+     * Upload a new configuration anchor. A temporary anchor file is created on the filesystem in order to run\n+     * the verification process with configuration-client module (via external script).\n+     * @param anchorBytes\n+     * @throws InvalidAnchorInstanceException anchor is not generated in the current instance\n+     * @throws AnchorUploadException in case of external process exceptions\n+     */\n+    public void uploadAnchor(byte[] anchorBytes) throws InvalidAnchorInstanceException, AnchorUploadException {\n+        ConfigurationAnchorV2 anchor = new ConfigurationAnchorV2(anchorBytes);\n+        verifyAnchorInstance(anchor);\n+        File tempAnchor = null;\n+        try {\n+            tempAnchor = createTemporaryAnchorFile(anchorBytes);\n+            configurationVerifier.verifyInternalConfiguration(tempAnchor.getAbsolutePath());\n+            anchorRepository.saveAndReplace(tempAnchor);\n+        } catch (ConfigurationVerifier.ConfigurationVerificationException ce) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODM3NTYxMQ=="}, "originalCommit": {"oid": "620778fef93c1aa59e19ff7d32c2dbebf76bea80"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjM1Nzk0Ng==", "bodyText": "It is a checked exception. Just moved the handling to the controller layer and now InternalServerErrorException is explicitly thrown if ConfigurationVerificationException is caught. So basically it is now handled as a http 500 status since it is a bit unclear which one it should be", "url": "https://github.com/nordic-institute/X-Road/pull/415#discussion_r402357946", "createdAt": "2020-04-02T14:29:36Z", "author": {"login": "carohauta"}, "path": "src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/service/SystemService.java", "diffHunk": "@@ -184,6 +190,82 @@ public AnchorFile getAnchorFile() throws AnchorNotFoundException {\n         return anchorFile;\n     }\n \n+    /**\n+     * Calculate the hex hash of the given anchor file. Used to verify/preview an anchor file before\n+     * uploading it\n+     * @param anchorBytes\n+     * @return\n+     * @throws InvalidAnchorInstanceException anchor is not generated in the current instance\n+     */\n+    public AnchorFile getAnchorFileFromBytes(byte[] anchorBytes) throws InvalidAnchorInstanceException {\n+        ConfigurationAnchorV2 anchor = new ConfigurationAnchorV2(anchorBytes);\n+        verifyAnchorInstance(anchor);\n+        AnchorFile anchorFile = new AnchorFile(calculateAnchorHexHash(anchorBytes));\n+        anchorFile.setCreatedAt(FormatUtils.fromDateToOffsetDateTime(anchor.getGeneratedAt()));\n+        return anchorFile;\n+    }\n+\n+    /**\n+     * Upload a new configuration anchor. A temporary anchor file is created on the filesystem in order to run\n+     * the verification process with configuration-client module (via external script).\n+     * @param anchorBytes\n+     * @throws InvalidAnchorInstanceException anchor is not generated in the current instance\n+     * @throws AnchorUploadException in case of external process exceptions\n+     */\n+    public void uploadAnchor(byte[] anchorBytes) throws InvalidAnchorInstanceException, AnchorUploadException {\n+        ConfigurationAnchorV2 anchor = new ConfigurationAnchorV2(anchorBytes);\n+        verifyAnchorInstance(anchor);\n+        File tempAnchor = null;\n+        try {\n+            tempAnchor = createTemporaryAnchorFile(anchorBytes);\n+            configurationVerifier.verifyInternalConfiguration(tempAnchor.getAbsolutePath());\n+            anchorRepository.saveAndReplace(tempAnchor);\n+        } catch (ConfigurationVerifier.ConfigurationVerificationException ce) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODM3NTYxMQ=="}, "originalCommit": {"oid": "620778fef93c1aa59e19ff7d32c2dbebf76bea80"}, "originalPosition": 80}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2OTY5MDU1OnYy", "diffSide": "RIGHT", "path": "src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/openapi/SystemApiController.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQwNzo1ODo0N1rOF7690w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxMjoxMzoyOVrOF8uiig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODM3NjQwMw==", "bodyText": "What happens if client sends a GIF file's bytes as an anchor? It should be http 400 bad request, right?", "url": "https://github.com/nordic-institute/X-Road/pull/415#discussion_r398376403", "createdAt": "2020-03-26T07:58:47Z", "author": {"login": "jansu76"}, "path": "src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/openapi/SystemApiController.java", "diffHunk": "@@ -215,4 +215,31 @@ public SystemApiController(InternalTlsCertificateService internalTlsCertificateS\n             throw new InternalServerErrorException(new ErrorDeviation(ANCHOR_FILE_NOT_FOUND));\n         }\n     }\n+\n+    @Override\n+    @PreAuthorize(\"hasAuthority('UPLOAD_ANCHOR')\")\n+    public ResponseEntity<Void> uploadAnchor(Resource anchorResource) {\n+        byte[] anchorBytes = ResourceUtils.springResourceToBytesOrThrowBadRequest(anchorResource);\n+        try {\n+            systemService.uploadAnchor(anchorBytes);\n+        } catch (SystemService.InvalidAnchorInstanceException e) {\n+            throw new BadRequestException(e);\n+        } catch (SystemService.AnchorUploadException e) {\n+            throw new InternalServerErrorException(e);\n+        }\n+        return ApiUtil.createCreatedResponse(\"/api/system/anchor\", null);\n+    }\n+\n+    @Override\n+    @PreAuthorize(\"hasAuthority('UPLOAD_ANCHOR')\")\n+    public ResponseEntity<Anchor> previewAnchor(Resource anchorResource) {\n+        byte[] anchorBytes = ResourceUtils.springResourceToBytesOrThrowBadRequest(anchorResource);\n+        AnchorFile anchorFile = null;\n+        try {\n+            anchorFile = systemService.getAnchorFileFromBytes(anchorBytes);\n+        } catch (SystemService.InvalidAnchorInstanceException e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "620778fef93c1aa59e19ff7d32c2dbebf76bea80"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODY0Nzk0NA==", "bodyText": "It is a CodedException which will be translated to a 500:\n{\n    \"status\": 500,\n    \"error\": {\n        \"code\": \"core.MalformedGlobalConf\",\n        \"metadata\": [\n            \"Content is not allowed in prolog.\"\n        ]\n    }\n}\nThis should be handled so that a 400 is returned instead.", "url": "https://github.com/nordic-institute/X-Road/pull/415#discussion_r398647944", "createdAt": "2020-03-26T15:08:35Z", "author": {"login": "carohauta"}, "path": "src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/openapi/SystemApiController.java", "diffHunk": "@@ -215,4 +215,31 @@ public SystemApiController(InternalTlsCertificateService internalTlsCertificateS\n             throw new InternalServerErrorException(new ErrorDeviation(ANCHOR_FILE_NOT_FOUND));\n         }\n     }\n+\n+    @Override\n+    @PreAuthorize(\"hasAuthority('UPLOAD_ANCHOR')\")\n+    public ResponseEntity<Void> uploadAnchor(Resource anchorResource) {\n+        byte[] anchorBytes = ResourceUtils.springResourceToBytesOrThrowBadRequest(anchorResource);\n+        try {\n+            systemService.uploadAnchor(anchorBytes);\n+        } catch (SystemService.InvalidAnchorInstanceException e) {\n+            throw new BadRequestException(e);\n+        } catch (SystemService.AnchorUploadException e) {\n+            throw new InternalServerErrorException(e);\n+        }\n+        return ApiUtil.createCreatedResponse(\"/api/system/anchor\", null);\n+    }\n+\n+    @Override\n+    @PreAuthorize(\"hasAuthority('UPLOAD_ANCHOR')\")\n+    public ResponseEntity<Anchor> previewAnchor(Resource anchorResource) {\n+        byte[] anchorBytes = ResourceUtils.springResourceToBytesOrThrowBadRequest(anchorResource);\n+        AnchorFile anchorFile = null;\n+        try {\n+            anchorFile = systemService.getAnchorFileFromBytes(anchorBytes);\n+        } catch (SystemService.InvalidAnchorInstanceException e) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODM3NjQwMw=="}, "originalCommit": {"oid": "620778fef93c1aa59e19ff7d32c2dbebf76bea80"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODY2NjcyMA==", "bodyText": "core.MalformedGlobalConf is thrown if the schema validation fails. I would like to add (well I did) an exception named MalformedAnchorException because it is less confusing than MalformedGlobalConf. At least in this case where one tries to upload a configuration anchor.", "url": "https://github.com/nordic-institute/X-Road/pull/415#discussion_r398666720", "createdAt": "2020-03-26T15:31:50Z", "author": {"login": "carohauta"}, "path": "src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/openapi/SystemApiController.java", "diffHunk": "@@ -215,4 +215,31 @@ public SystemApiController(InternalTlsCertificateService internalTlsCertificateS\n             throw new InternalServerErrorException(new ErrorDeviation(ANCHOR_FILE_NOT_FOUND));\n         }\n     }\n+\n+    @Override\n+    @PreAuthorize(\"hasAuthority('UPLOAD_ANCHOR')\")\n+    public ResponseEntity<Void> uploadAnchor(Resource anchorResource) {\n+        byte[] anchorBytes = ResourceUtils.springResourceToBytesOrThrowBadRequest(anchorResource);\n+        try {\n+            systemService.uploadAnchor(anchorBytes);\n+        } catch (SystemService.InvalidAnchorInstanceException e) {\n+            throw new BadRequestException(e);\n+        } catch (SystemService.AnchorUploadException e) {\n+            throw new InternalServerErrorException(e);\n+        }\n+        return ApiUtil.createCreatedResponse(\"/api/system/anchor\", null);\n+    }\n+\n+    @Override\n+    @PreAuthorize(\"hasAuthority('UPLOAD_ANCHOR')\")\n+    public ResponseEntity<Anchor> previewAnchor(Resource anchorResource) {\n+        byte[] anchorBytes = ResourceUtils.springResourceToBytesOrThrowBadRequest(anchorResource);\n+        AnchorFile anchorFile = null;\n+        try {\n+            anchorFile = systemService.getAnchorFileFromBytes(anchorBytes);\n+        } catch (SystemService.InvalidAnchorInstanceException e) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODM3NjQwMw=="}, "originalCommit": {"oid": "620778fef93c1aa59e19ff7d32c2dbebf76bea80"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTE0NzkyMw==", "bodyText": "Great....and that will now be http 400?", "url": "https://github.com/nordic-institute/X-Road/pull/415#discussion_r399147923", "createdAt": "2020-03-27T09:51:39Z", "author": {"login": "jansu76"}, "path": "src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/openapi/SystemApiController.java", "diffHunk": "@@ -215,4 +215,31 @@ public SystemApiController(InternalTlsCertificateService internalTlsCertificateS\n             throw new InternalServerErrorException(new ErrorDeviation(ANCHOR_FILE_NOT_FOUND));\n         }\n     }\n+\n+    @Override\n+    @PreAuthorize(\"hasAuthority('UPLOAD_ANCHOR')\")\n+    public ResponseEntity<Void> uploadAnchor(Resource anchorResource) {\n+        byte[] anchorBytes = ResourceUtils.springResourceToBytesOrThrowBadRequest(anchorResource);\n+        try {\n+            systemService.uploadAnchor(anchorBytes);\n+        } catch (SystemService.InvalidAnchorInstanceException e) {\n+            throw new BadRequestException(e);\n+        } catch (SystemService.AnchorUploadException e) {\n+            throw new InternalServerErrorException(e);\n+        }\n+        return ApiUtil.createCreatedResponse(\"/api/system/anchor\", null);\n+    }\n+\n+    @Override\n+    @PreAuthorize(\"hasAuthority('UPLOAD_ANCHOR')\")\n+    public ResponseEntity<Anchor> previewAnchor(Resource anchorResource) {\n+        byte[] anchorBytes = ResourceUtils.springResourceToBytesOrThrowBadRequest(anchorResource);\n+        AnchorFile anchorFile = null;\n+        try {\n+            anchorFile = systemService.getAnchorFileFromBytes(anchorBytes);\n+        } catch (SystemService.InvalidAnchorInstanceException e) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODM3NjQwMw=="}, "originalCommit": {"oid": "620778fef93c1aa59e19ff7d32c2dbebf76bea80"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTIyMTM4Ng==", "bodyText": "Yes it is now considered a 400", "url": "https://github.com/nordic-institute/X-Road/pull/415#discussion_r399221386", "createdAt": "2020-03-27T12:13:29Z", "author": {"login": "carohauta"}, "path": "src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/openapi/SystemApiController.java", "diffHunk": "@@ -215,4 +215,31 @@ public SystemApiController(InternalTlsCertificateService internalTlsCertificateS\n             throw new InternalServerErrorException(new ErrorDeviation(ANCHOR_FILE_NOT_FOUND));\n         }\n     }\n+\n+    @Override\n+    @PreAuthorize(\"hasAuthority('UPLOAD_ANCHOR')\")\n+    public ResponseEntity<Void> uploadAnchor(Resource anchorResource) {\n+        byte[] anchorBytes = ResourceUtils.springResourceToBytesOrThrowBadRequest(anchorResource);\n+        try {\n+            systemService.uploadAnchor(anchorBytes);\n+        } catch (SystemService.InvalidAnchorInstanceException e) {\n+            throw new BadRequestException(e);\n+        } catch (SystemService.AnchorUploadException e) {\n+            throw new InternalServerErrorException(e);\n+        }\n+        return ApiUtil.createCreatedResponse(\"/api/system/anchor\", null);\n+    }\n+\n+    @Override\n+    @PreAuthorize(\"hasAuthority('UPLOAD_ANCHOR')\")\n+    public ResponseEntity<Anchor> previewAnchor(Resource anchorResource) {\n+        byte[] anchorBytes = ResourceUtils.springResourceToBytesOrThrowBadRequest(anchorResource);\n+        AnchorFile anchorFile = null;\n+        try {\n+            anchorFile = systemService.getAnchorFileFromBytes(anchorBytes);\n+        } catch (SystemService.InvalidAnchorInstanceException e) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODM3NjQwMw=="}, "originalCommit": {"oid": "620778fef93c1aa59e19ff7d32c2dbebf76bea80"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2OTk1NDc3OnYy", "diffSide": "RIGHT", "path": "src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/service/ExternalProcessRunner.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQwOToxNDozOFrOF79hJg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QwNzozOTo1M1rOF8mBXw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODQxODIxNA==", "bodyText": "I guess this is \"if exit code is not 0, or if the process times out\"?\nCould even consider different exceptions for these 2 things, but I don't know if it is warranted.", "url": "https://github.com/nordic-institute/X-Road/pull/415#discussion_r398418214", "createdAt": "2020-03-26T09:14:38Z", "author": {"login": "jansu76"}, "path": "src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/service/ExternalProcessRunner.java", "diffHunk": "@@ -104,15 +108,40 @@\n             IOUtils.closeQuietly(process.getErrorStream());\n             IOUtils.closeQuietly(process.getOutputStream());\n         }\n+        ProcessResult processResult = new ProcessResult(commandWithArgsString, exitCode, processOutput);\n+        return processResult;\n+    }\n \n+    /**\n+     * Executes the given command with given arguments and throws a {@link ProcessFailedException} if the process' exit\n+     * code is not 0. Used e.g. for simple script execution when there is no need to handle different exit codes\n+     * @param command the command to execute\n+     * @param args arguments to be appended to the command. Make sure to pass your arguments in the correct order\n+     * (e.g. if your options have values enter them as separate consecutive args).\n+     * @return {@link ProcessResult} which contains the executed command with arguments, exit code (always 0) and the\n+     * output of the executed process\n+     * @throws ProcessNotExecutableException in the case of IOException or if the process is interrupted\n+     * @throws ProcessFailedException if the process' exit code is not 0", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "620778fef93c1aa59e19ff7d32c2dbebf76bea80"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTA4MTgyMw==", "bodyText": "At this time I would just improve the javadoc. Adding a new exception into the mix will need a lot of refactoring and new tests and quite frankly I think it's not something that should be addressed in the scope of this task. But for sure adding something like a ProcessTimedOutException is something to be considered.", "url": "https://github.com/nordic-institute/X-Road/pull/415#discussion_r399081823", "createdAt": "2020-03-27T07:39:53Z", "author": {"login": "carohauta"}, "path": "src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/service/ExternalProcessRunner.java", "diffHunk": "@@ -104,15 +108,40 @@\n             IOUtils.closeQuietly(process.getErrorStream());\n             IOUtils.closeQuietly(process.getOutputStream());\n         }\n+        ProcessResult processResult = new ProcessResult(commandWithArgsString, exitCode, processOutput);\n+        return processResult;\n+    }\n \n+    /**\n+     * Executes the given command with given arguments and throws a {@link ProcessFailedException} if the process' exit\n+     * code is not 0. Used e.g. for simple script execution when there is no need to handle different exit codes\n+     * @param command the command to execute\n+     * @param args arguments to be appended to the command. Make sure to pass your arguments in the correct order\n+     * (e.g. if your options have values enter them as separate consecutive args).\n+     * @return {@link ProcessResult} which contains the executed command with arguments, exit code (always 0) and the\n+     * output of the executed process\n+     * @throws ProcessNotExecutableException in the case of IOException or if the process is interrupted\n+     * @throws ProcessFailedException if the process' exit code is not 0", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODQxODIxNA=="}, "originalCommit": {"oid": "620778fef93c1aa59e19ff7d32c2dbebf76bea80"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3MDA3OTg4OnYy", "diffSide": "RIGHT", "path": "src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/service/SystemService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQwOTo0NToyNlrOF7-ubQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QwNzo0Njo0OVrOF8mLbQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODQzNzk5Nw==", "bodyText": "old UI creates temp file in SystemProperties::getTempFilesPath. Should this do the same? (io_utils.rb#temp_file)", "url": "https://github.com/nordic-institute/X-Road/pull/415#discussion_r398437997", "createdAt": "2020-03-26T09:45:26Z", "author": {"login": "jansu76"}, "path": "src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/service/SystemService.java", "diffHunk": "@@ -184,6 +190,82 @@ public AnchorFile getAnchorFile() throws AnchorNotFoundException {\n         return anchorFile;\n     }\n \n+    /**\n+     * Calculate the hex hash of the given anchor file. Used to verify/preview an anchor file before\n+     * uploading it\n+     * @param anchorBytes\n+     * @return\n+     * @throws InvalidAnchorInstanceException anchor is not generated in the current instance\n+     */\n+    public AnchorFile getAnchorFileFromBytes(byte[] anchorBytes) throws InvalidAnchorInstanceException {\n+        ConfigurationAnchorV2 anchor = new ConfigurationAnchorV2(anchorBytes);\n+        verifyAnchorInstance(anchor);\n+        AnchorFile anchorFile = new AnchorFile(calculateAnchorHexHash(anchorBytes));\n+        anchorFile.setCreatedAt(FormatUtils.fromDateToOffsetDateTime(anchor.getGeneratedAt()));\n+        return anchorFile;\n+    }\n+\n+    /**\n+     * Upload a new configuration anchor. A temporary anchor file is created on the filesystem in order to run\n+     * the verification process with configuration-client module (via external script).\n+     * @param anchorBytes\n+     * @throws InvalidAnchorInstanceException anchor is not generated in the current instance\n+     * @throws AnchorUploadException in case of external process exceptions\n+     */\n+    public void uploadAnchor(byte[] anchorBytes) throws InvalidAnchorInstanceException, AnchorUploadException {\n+        ConfigurationAnchorV2 anchor = new ConfigurationAnchorV2(anchorBytes);\n+        verifyAnchorInstance(anchor);\n+        File tempAnchor = null;\n+        try {\n+            tempAnchor = createTemporaryAnchorFile(anchorBytes);\n+            configurationVerifier.verifyInternalConfiguration(tempAnchor.getAbsolutePath());\n+            anchorRepository.saveAndReplace(tempAnchor);\n+        } catch (ConfigurationVerifier.ConfigurationVerificationException ce) {\n+            throw new DeviationAwareRuntimeException(ce, ce.getErrorDeviation());\n+        } catch (CodedException ce) {\n+            throw ce;\n+        } catch (ServiceException | InterruptedException e) {\n+            throw new AnchorUploadException(e);\n+        } catch (Exception e) {\n+            throw new RuntimeException(\"Cannot upload a new anchor\", e);\n+        } finally {\n+            if (tempAnchor != null) {\n+                tempAnchor.delete();\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Create a temporary anchor file on the filesystem. This is needed for verifying the anchor with\n+     * configuration-client module (this might be changed in the future). This method does not delete the created\n+     * temporary file. Remember to delete the file after it is no longer needed.\n+     * @param anchorBytes\n+     * @return temporary anchor file\n+     * @throws IOException\n+     */\n+    private File createTemporaryAnchorFile(byte[] anchorBytes) throws IOException {\n+        String tempAnchorPrefix = \"temp-internal-anchor-\";\n+        String tempAnchorSuffix = \".xml\";\n+        File tempAnchor = File.createTempFile(tempAnchorPrefix, tempAnchorSuffix);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "620778fef93c1aa59e19ff7d32c2dbebf76bea80"}, "originalPosition": 106}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTA4NDM5Nw==", "bodyText": "Good idea \ud83d\udc4d", "url": "https://github.com/nordic-institute/X-Road/pull/415#discussion_r399084397", "createdAt": "2020-03-27T07:46:49Z", "author": {"login": "carohauta"}, "path": "src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/service/SystemService.java", "diffHunk": "@@ -184,6 +190,82 @@ public AnchorFile getAnchorFile() throws AnchorNotFoundException {\n         return anchorFile;\n     }\n \n+    /**\n+     * Calculate the hex hash of the given anchor file. Used to verify/preview an anchor file before\n+     * uploading it\n+     * @param anchorBytes\n+     * @return\n+     * @throws InvalidAnchorInstanceException anchor is not generated in the current instance\n+     */\n+    public AnchorFile getAnchorFileFromBytes(byte[] anchorBytes) throws InvalidAnchorInstanceException {\n+        ConfigurationAnchorV2 anchor = new ConfigurationAnchorV2(anchorBytes);\n+        verifyAnchorInstance(anchor);\n+        AnchorFile anchorFile = new AnchorFile(calculateAnchorHexHash(anchorBytes));\n+        anchorFile.setCreatedAt(FormatUtils.fromDateToOffsetDateTime(anchor.getGeneratedAt()));\n+        return anchorFile;\n+    }\n+\n+    /**\n+     * Upload a new configuration anchor. A temporary anchor file is created on the filesystem in order to run\n+     * the verification process with configuration-client module (via external script).\n+     * @param anchorBytes\n+     * @throws InvalidAnchorInstanceException anchor is not generated in the current instance\n+     * @throws AnchorUploadException in case of external process exceptions\n+     */\n+    public void uploadAnchor(byte[] anchorBytes) throws InvalidAnchorInstanceException, AnchorUploadException {\n+        ConfigurationAnchorV2 anchor = new ConfigurationAnchorV2(anchorBytes);\n+        verifyAnchorInstance(anchor);\n+        File tempAnchor = null;\n+        try {\n+            tempAnchor = createTemporaryAnchorFile(anchorBytes);\n+            configurationVerifier.verifyInternalConfiguration(tempAnchor.getAbsolutePath());\n+            anchorRepository.saveAndReplace(tempAnchor);\n+        } catch (ConfigurationVerifier.ConfigurationVerificationException ce) {\n+            throw new DeviationAwareRuntimeException(ce, ce.getErrorDeviation());\n+        } catch (CodedException ce) {\n+            throw ce;\n+        } catch (ServiceException | InterruptedException e) {\n+            throw new AnchorUploadException(e);\n+        } catch (Exception e) {\n+            throw new RuntimeException(\"Cannot upload a new anchor\", e);\n+        } finally {\n+            if (tempAnchor != null) {\n+                tempAnchor.delete();\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Create a temporary anchor file on the filesystem. This is needed for verifying the anchor with\n+     * configuration-client module (this might be changed in the future). This method does not delete the created\n+     * temporary file. Remember to delete the file after it is no longer needed.\n+     * @param anchorBytes\n+     * @return temporary anchor file\n+     * @throws IOException\n+     */\n+    private File createTemporaryAnchorFile(byte[] anchorBytes) throws IOException {\n+        String tempAnchorPrefix = \"temp-internal-anchor-\";\n+        String tempAnchorSuffix = \".xml\";\n+        File tempAnchor = File.createTempFile(tempAnchorPrefix, tempAnchorSuffix);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODQzNzk5Nw=="}, "originalCommit": {"oid": "620778fef93c1aa59e19ff7d32c2dbebf76bea80"}, "originalPosition": 106}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3MDA5ODMzOnYy", "diffSide": "RIGHT", "path": "src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/service/SystemService.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQwOTo1MDowMVrOF7-55Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QwNzoxNzozMlrOGAHzwA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODQ0MDkzMw==", "bodyText": "Is this step missing? \n  \n    \n      X-Road/src/proxy-ui/app/controllers/sysparams_controller.rb\n    \n    \n         Line 105\n      in\n      5744273\n    \n    \n    \n    \n\n        \n          \n           download_configuration", "url": "https://github.com/nordic-institute/X-Road/pull/415#discussion_r398440933", "createdAt": "2020-03-26T09:50:01Z", "author": {"login": "jansu76"}, "path": "src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/service/SystemService.java", "diffHunk": "@@ -184,6 +190,82 @@ public AnchorFile getAnchorFile() throws AnchorNotFoundException {\n         return anchorFile;\n     }\n \n+    /**\n+     * Calculate the hex hash of the given anchor file. Used to verify/preview an anchor file before\n+     * uploading it\n+     * @param anchorBytes\n+     * @return\n+     * @throws InvalidAnchorInstanceException anchor is not generated in the current instance\n+     */\n+    public AnchorFile getAnchorFileFromBytes(byte[] anchorBytes) throws InvalidAnchorInstanceException {\n+        ConfigurationAnchorV2 anchor = new ConfigurationAnchorV2(anchorBytes);\n+        verifyAnchorInstance(anchor);\n+        AnchorFile anchorFile = new AnchorFile(calculateAnchorHexHash(anchorBytes));\n+        anchorFile.setCreatedAt(FormatUtils.fromDateToOffsetDateTime(anchor.getGeneratedAt()));\n+        return anchorFile;\n+    }\n+\n+    /**\n+     * Upload a new configuration anchor. A temporary anchor file is created on the filesystem in order to run\n+     * the verification process with configuration-client module (via external script).\n+     * @param anchorBytes\n+     * @throws InvalidAnchorInstanceException anchor is not generated in the current instance\n+     * @throws AnchorUploadException in case of external process exceptions\n+     */\n+    public void uploadAnchor(byte[] anchorBytes) throws InvalidAnchorInstanceException, AnchorUploadException {\n+        ConfigurationAnchorV2 anchor = new ConfigurationAnchorV2(anchorBytes);\n+        verifyAnchorInstance(anchor);\n+        File tempAnchor = null;\n+        try {\n+            tempAnchor = createTemporaryAnchorFile(anchorBytes);\n+            configurationVerifier.verifyInternalConfiguration(tempAnchor.getAbsolutePath());\n+            anchorRepository.saveAndReplace(tempAnchor);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "620778fef93c1aa59e19ff7d32c2dbebf76bea80"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTA4Nzc3Nw==", "bodyText": "Nice catch! TBH this seems pretty important step \ud83d\ude04", "url": "https://github.com/nordic-institute/X-Road/pull/415#discussion_r399087777", "createdAt": "2020-03-27T07:54:58Z", "author": {"login": "carohauta"}, "path": "src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/service/SystemService.java", "diffHunk": "@@ -184,6 +190,82 @@ public AnchorFile getAnchorFile() throws AnchorNotFoundException {\n         return anchorFile;\n     }\n \n+    /**\n+     * Calculate the hex hash of the given anchor file. Used to verify/preview an anchor file before\n+     * uploading it\n+     * @param anchorBytes\n+     * @return\n+     * @throws InvalidAnchorInstanceException anchor is not generated in the current instance\n+     */\n+    public AnchorFile getAnchorFileFromBytes(byte[] anchorBytes) throws InvalidAnchorInstanceException {\n+        ConfigurationAnchorV2 anchor = new ConfigurationAnchorV2(anchorBytes);\n+        verifyAnchorInstance(anchor);\n+        AnchorFile anchorFile = new AnchorFile(calculateAnchorHexHash(anchorBytes));\n+        anchorFile.setCreatedAt(FormatUtils.fromDateToOffsetDateTime(anchor.getGeneratedAt()));\n+        return anchorFile;\n+    }\n+\n+    /**\n+     * Upload a new configuration anchor. A temporary anchor file is created on the filesystem in order to run\n+     * the verification process with configuration-client module (via external script).\n+     * @param anchorBytes\n+     * @throws InvalidAnchorInstanceException anchor is not generated in the current instance\n+     * @throws AnchorUploadException in case of external process exceptions\n+     */\n+    public void uploadAnchor(byte[] anchorBytes) throws InvalidAnchorInstanceException, AnchorUploadException {\n+        ConfigurationAnchorV2 anchor = new ConfigurationAnchorV2(anchorBytes);\n+        verifyAnchorInstance(anchor);\n+        File tempAnchor = null;\n+        try {\n+            tempAnchor = createTemporaryAnchorFile(anchorBytes);\n+            configurationVerifier.verifyInternalConfiguration(tempAnchor.getAbsolutePath());\n+            anchorRepository.saveAndReplace(tempAnchor);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODQ0MDkzMw=="}, "originalCommit": {"oid": "620778fef93c1aa59e19ff7d32c2dbebf76bea80"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjI2ODY3Ng==", "bodyText": "It looks like restTemplate.getForEntity has infinite timeout, so in a bad configuration it could hang forever. Or do you know how that is? Maybe something like a 60s timeout would be better.\nI am not sure how old Ruby implementation does the same. It might not be any better.", "url": "https://github.com/nordic-institute/X-Road/pull/415#discussion_r402268676", "createdAt": "2020-04-02T12:19:54Z", "author": {"login": "jansu76"}, "path": "src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/service/SystemService.java", "diffHunk": "@@ -184,6 +190,82 @@ public AnchorFile getAnchorFile() throws AnchorNotFoundException {\n         return anchorFile;\n     }\n \n+    /**\n+     * Calculate the hex hash of the given anchor file. Used to verify/preview an anchor file before\n+     * uploading it\n+     * @param anchorBytes\n+     * @return\n+     * @throws InvalidAnchorInstanceException anchor is not generated in the current instance\n+     */\n+    public AnchorFile getAnchorFileFromBytes(byte[] anchorBytes) throws InvalidAnchorInstanceException {\n+        ConfigurationAnchorV2 anchor = new ConfigurationAnchorV2(anchorBytes);\n+        verifyAnchorInstance(anchor);\n+        AnchorFile anchorFile = new AnchorFile(calculateAnchorHexHash(anchorBytes));\n+        anchorFile.setCreatedAt(FormatUtils.fromDateToOffsetDateTime(anchor.getGeneratedAt()));\n+        return anchorFile;\n+    }\n+\n+    /**\n+     * Upload a new configuration anchor. A temporary anchor file is created on the filesystem in order to run\n+     * the verification process with configuration-client module (via external script).\n+     * @param anchorBytes\n+     * @throws InvalidAnchorInstanceException anchor is not generated in the current instance\n+     * @throws AnchorUploadException in case of external process exceptions\n+     */\n+    public void uploadAnchor(byte[] anchorBytes) throws InvalidAnchorInstanceException, AnchorUploadException {\n+        ConfigurationAnchorV2 anchor = new ConfigurationAnchorV2(anchorBytes);\n+        verifyAnchorInstance(anchor);\n+        File tempAnchor = null;\n+        try {\n+            tempAnchor = createTemporaryAnchorFile(anchorBytes);\n+            configurationVerifier.verifyInternalConfiguration(tempAnchor.getAbsolutePath());\n+            anchorRepository.saveAndReplace(tempAnchor);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODQ0MDkzMw=="}, "originalCommit": {"oid": "620778fef93c1aa59e19ff7d32c2dbebf76bea80"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjc4MTEyMA==", "bodyText": "It really does have an infinite timeout by default -> not good. I added a 60s timeout for this request. Also the user gets an error code now if the request itself fails for some reason.\nI actually first added a 15s timeout but the request could possibly (hopefully not though!) take more time in production environment so changed it to 60s. Even in my local dev env the request seems to take about 5+ seconds.", "url": "https://github.com/nordic-institute/X-Road/pull/415#discussion_r402781120", "createdAt": "2020-04-03T07:17:32Z", "author": {"login": "carohauta"}, "path": "src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/service/SystemService.java", "diffHunk": "@@ -184,6 +190,82 @@ public AnchorFile getAnchorFile() throws AnchorNotFoundException {\n         return anchorFile;\n     }\n \n+    /**\n+     * Calculate the hex hash of the given anchor file. Used to verify/preview an anchor file before\n+     * uploading it\n+     * @param anchorBytes\n+     * @return\n+     * @throws InvalidAnchorInstanceException anchor is not generated in the current instance\n+     */\n+    public AnchorFile getAnchorFileFromBytes(byte[] anchorBytes) throws InvalidAnchorInstanceException {\n+        ConfigurationAnchorV2 anchor = new ConfigurationAnchorV2(anchorBytes);\n+        verifyAnchorInstance(anchor);\n+        AnchorFile anchorFile = new AnchorFile(calculateAnchorHexHash(anchorBytes));\n+        anchorFile.setCreatedAt(FormatUtils.fromDateToOffsetDateTime(anchor.getGeneratedAt()));\n+        return anchorFile;\n+    }\n+\n+    /**\n+     * Upload a new configuration anchor. A temporary anchor file is created on the filesystem in order to run\n+     * the verification process with configuration-client module (via external script).\n+     * @param anchorBytes\n+     * @throws InvalidAnchorInstanceException anchor is not generated in the current instance\n+     * @throws AnchorUploadException in case of external process exceptions\n+     */\n+    public void uploadAnchor(byte[] anchorBytes) throws InvalidAnchorInstanceException, AnchorUploadException {\n+        ConfigurationAnchorV2 anchor = new ConfigurationAnchorV2(anchorBytes);\n+        verifyAnchorInstance(anchor);\n+        File tempAnchor = null;\n+        try {\n+            tempAnchor = createTemporaryAnchorFile(anchorBytes);\n+            configurationVerifier.verifyInternalConfiguration(tempAnchor.getAbsolutePath());\n+            anchorRepository.saveAndReplace(tempAnchor);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODQ0MDkzMw=="}, "originalCommit": {"oid": "620778fef93c1aa59e19ff7d32c2dbebf76bea80"}, "originalPosition": 79}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3MDEyMjg0OnYy", "diffSide": "RIGHT", "path": "src/proxy-ui-api/src/main/resources/openapi-definition.yaml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQwOTo1NjowMlrOF7_JNg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxMTo1ODozM1rOF8uFXA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODQ0NDg1NA==", "bodyText": "Should this in fact be PUT instead of POST? We have one anchor, we are not adding new anchor items to an existing collection of anchors, but \"replacing any existing resource\" which matches this definition:\nhttps://opensource.zalando.com/restful-api-guidelines/#put", "url": "https://github.com/nordic-institute/X-Road/pull/415#discussion_r398444854", "createdAt": "2020-03-26T09:56:02Z", "author": {"login": "jansu76"}, "path": "src/proxy-ui-api/src/main/resources/openapi-definition.yaml", "diffHunk": "@@ -3111,17 +3111,47 @@ paths:\n         - security server\n       summary: upload a configuration anchor file\n       operationId: uploadAnchor", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "620778fef93c1aa59e19ff7d32c2dbebf76bea80"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTIxMzkxNg==", "bodyText": "Changed to PUT. In the Security Server init phase I think that POST should be the correct method. But it is possible that it will get it's own endpoint or something \ud83e\udd37\u200d\u2642\ufe0f", "url": "https://github.com/nordic-institute/X-Road/pull/415#discussion_r399213916", "createdAt": "2020-03-27T11:58:33Z", "author": {"login": "carohauta"}, "path": "src/proxy-ui-api/src/main/resources/openapi-definition.yaml", "diffHunk": "@@ -3111,17 +3111,47 @@ paths:\n         - security server\n       summary: upload a configuration anchor file\n       operationId: uploadAnchor", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODQ0NDg1NA=="}, "originalCommit": {"oid": "620778fef93c1aa59e19ff7d32c2dbebf76bea80"}, "originalPosition": 3}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3MDEzMjYxOnYy", "diffSide": "RIGHT", "path": "src/proxy-ui-api/src/test/java/org/niis/xroad/restapi/openapi/SystemApiControllerTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQwOTo1ODoyNVrOF7_Pig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQwOTo1ODoyNVrOF7_Pig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODQ0NjQ3NA==", "bodyText": "By the way, good choice not adding a new permission for previews \ud83d\udc4d Sometimes we're at risk of creating too fine-grained permissions, I feel", "url": "https://github.com/nordic-institute/X-Road/pull/415#discussion_r398446474", "createdAt": "2020-03-26T09:58:25Z", "author": {"login": "jansu76"}, "path": "src/proxy-ui-api/src/test/java/org/niis/xroad/restapi/openapi/SystemApiControllerTest.java", "diffHunk": "@@ -310,4 +316,24 @@ public void downloadAnchorNotFound() throws AnchorNotFoundException {\n             // success\n         }\n     }\n+\n+    @Test\n+    @WithMockUser(authorities = { \"UPLOAD_ANCHOR\" })\n+    public void uploadAnchor() throws IOException {\n+        Resource anchorResource = new ByteArrayResource(FileUtils.readFileToByteArray(ANCHOR_FILE));\n+        ResponseEntity<Void> response = systemApiController.uploadAnchor(anchorResource);\n+        assertEquals(HttpStatus.CREATED, response.getStatusCode());\n+        assertEquals(\"/api/system/anchor\", response.getHeaders().getLocation().getPath());\n+    }\n+\n+    @Test\n+    @WithMockUser(authorities = { \"UPLOAD_ANCHOR\" })", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "620778fef93c1aa59e19ff7d32c2dbebf76bea80"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3MDE0NDA4OnYy", "diffSide": "RIGHT", "path": "src/proxy-ui-api/src/test/java/org/niis/xroad/restapi/service/SystemServiceTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxMDowMToxN1rOF7_Wtw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxMjoxMjo0MVrOF8ug2g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODQ0ODMxMQ==", "bodyText": "Does this test actually need to have this try-catch? If exception gets thrown, it will fail anyway?", "url": "https://github.com/nordic-institute/X-Road/pull/415#discussion_r398448311", "createdAt": "2020-03-26T10:01:17Z", "author": {"login": "jansu76"}, "path": "src/proxy-ui-api/src/test/java/org/niis/xroad/restapi/service/SystemServiceTest.java", "diffHunk": "@@ -161,4 +173,41 @@ public void deleteConfiguredTimestampingServiceNonExisting() {\n             // success\n         }\n     }\n+\n+    @Test\n+    public void getAnchorFileFromBytes() throws Exception {\n+        byte[] anchorBytes = FileUtils.readFileToByteArray(ANCHOR_FILE);\n+        AnchorFile anchorFile = systemService.getAnchorFileFromBytes(anchorBytes);\n+        assertEquals(ANCHOR_HASH, anchorFile.getHash());\n+    }\n+\n+    @Test(expected = SystemService.InvalidAnchorInstanceException.class)\n+    public void getAnchorFileFromBytesWrongInstance() throws Exception {\n+        when(serverConfService.getSecurityServerOwnerId()).thenReturn(ClientId.create(\"INVALID\", \"GOV\", \"1111\"));\n+        byte[] anchorBytes = FileUtils.readFileToByteArray(ANCHOR_FILE);\n+        systemService.getAnchorFileFromBytes(anchorBytes);\n+    }\n+\n+    @Test\n+    public void uploadAnchor() throws Exception {\n+        byte[] anchorBytes = FileUtils.readFileToByteArray(ANCHOR_FILE);\n+        try {\n+            systemService.uploadAnchor(anchorBytes);\n+        } catch (Exception e) {\n+            fail(\"Should not fail\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "620778fef93c1aa59e19ff7d32c2dbebf76bea80"}, "originalPosition": 102}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTIyMDk1NA==", "bodyText": "I think that Sonar will complain about the test not having any assertions if it was left out. SystemService.uploadAnchor is a void method so there are no return values to be asserted either. Other possibility would be to just assert true after executing the method.", "url": "https://github.com/nordic-institute/X-Road/pull/415#discussion_r399220954", "createdAt": "2020-03-27T12:12:41Z", "author": {"login": "carohauta"}, "path": "src/proxy-ui-api/src/test/java/org/niis/xroad/restapi/service/SystemServiceTest.java", "diffHunk": "@@ -161,4 +173,41 @@ public void deleteConfiguredTimestampingServiceNonExisting() {\n             // success\n         }\n     }\n+\n+    @Test\n+    public void getAnchorFileFromBytes() throws Exception {\n+        byte[] anchorBytes = FileUtils.readFileToByteArray(ANCHOR_FILE);\n+        AnchorFile anchorFile = systemService.getAnchorFileFromBytes(anchorBytes);\n+        assertEquals(ANCHOR_HASH, anchorFile.getHash());\n+    }\n+\n+    @Test(expected = SystemService.InvalidAnchorInstanceException.class)\n+    public void getAnchorFileFromBytesWrongInstance() throws Exception {\n+        when(serverConfService.getSecurityServerOwnerId()).thenReturn(ClientId.create(\"INVALID\", \"GOV\", \"1111\"));\n+        byte[] anchorBytes = FileUtils.readFileToByteArray(ANCHOR_FILE);\n+        systemService.getAnchorFileFromBytes(anchorBytes);\n+    }\n+\n+    @Test\n+    public void uploadAnchor() throws Exception {\n+        byte[] anchorBytes = FileUtils.readFileToByteArray(ANCHOR_FILE);\n+        try {\n+            systemService.uploadAnchor(anchorBytes);\n+        } catch (Exception e) {\n+            fail(\"Should not fail\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODQ0ODMxMQ=="}, "originalCommit": {"oid": "620778fef93c1aa59e19ff7d32c2dbebf76bea80"}, "originalPosition": 102}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3MDE0NTMxOnYy", "diffSide": "RIGHT", "path": "src/proxy-ui-api/src/test/java/org/niis/xroad/restapi/service/SystemServiceTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxMDowMTozOFrOF7_XkA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQwODoxNTowNVrOF9eV4Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODQ0ODUyOA==", "bodyText": "Maybe add test for uploading garbage bytes?", "url": "https://github.com/nordic-institute/X-Road/pull/415#discussion_r398448528", "createdAt": "2020-03-26T10:01:38Z", "author": {"login": "jansu76"}, "path": "src/proxy-ui-api/src/test/java/org/niis/xroad/restapi/service/SystemServiceTest.java", "diffHunk": "@@ -161,4 +173,41 @@ public void deleteConfiguredTimestampingServiceNonExisting() {\n             // success\n         }\n     }\n+\n+    @Test\n+    public void getAnchorFileFromBytes() throws Exception {\n+        byte[] anchorBytes = FileUtils.readFileToByteArray(ANCHOR_FILE);\n+        AnchorFile anchorFile = systemService.getAnchorFileFromBytes(anchorBytes);\n+        assertEquals(ANCHOR_HASH, anchorFile.getHash());\n+    }\n+\n+    @Test(expected = SystemService.InvalidAnchorInstanceException.class)\n+    public void getAnchorFileFromBytesWrongInstance() throws Exception {\n+        when(serverConfService.getSecurityServerOwnerId()).thenReturn(ClientId.create(\"INVALID\", \"GOV\", \"1111\"));\n+        byte[] anchorBytes = FileUtils.readFileToByteArray(ANCHOR_FILE);\n+        systemService.getAnchorFileFromBytes(anchorBytes);\n+    }\n+\n+    @Test\n+    public void uploadAnchor() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "620778fef93c1aa59e19ff7d32c2dbebf76bea80"}, "originalPosition": 97}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDAwNDU3Nw==", "bodyText": "Added a new test", "url": "https://github.com/nordic-institute/X-Road/pull/415#discussion_r400004577", "createdAt": "2020-03-30T08:15:05Z", "author": {"login": "carohauta"}, "path": "src/proxy-ui-api/src/test/java/org/niis/xroad/restapi/service/SystemServiceTest.java", "diffHunk": "@@ -161,4 +173,41 @@ public void deleteConfiguredTimestampingServiceNonExisting() {\n             // success\n         }\n     }\n+\n+    @Test\n+    public void getAnchorFileFromBytes() throws Exception {\n+        byte[] anchorBytes = FileUtils.readFileToByteArray(ANCHOR_FILE);\n+        AnchorFile anchorFile = systemService.getAnchorFileFromBytes(anchorBytes);\n+        assertEquals(ANCHOR_HASH, anchorFile.getHash());\n+    }\n+\n+    @Test(expected = SystemService.InvalidAnchorInstanceException.class)\n+    public void getAnchorFileFromBytesWrongInstance() throws Exception {\n+        when(serverConfService.getSecurityServerOwnerId()).thenReturn(ClientId.create(\"INVALID\", \"GOV\", \"1111\"));\n+        byte[] anchorBytes = FileUtils.readFileToByteArray(ANCHOR_FILE);\n+        systemService.getAnchorFileFromBytes(anchorBytes);\n+    }\n+\n+    @Test\n+    public void uploadAnchor() throws Exception {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODQ0ODUyOA=="}, "originalCommit": {"oid": "620778fef93c1aa59e19ff7d32c2dbebf76bea80"}, "originalPosition": 97}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3MDI0NDcwOnYy", "diffSide": "RIGHT", "path": "src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/service/SystemService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxMDoyNzo0MFrOF8AWfA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxMzo0Mzo1MlrOF8xuhw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODQ2NDYzNg==", "bodyText": "Sonar thinks catching InterruptedException here is a bug: https://sonarqube.niis.org/project/issues?id=xroad&open=AXDo4wqfBW8O1Uq1H2wZ&pullRequest=415&resolved=false&types=BUG\nI believe it is a false positive, and this is in line with how other InterruptedExceptions are thrown. However it was not easy to follow the code to come to this conclusion. For a new developer, this would be even more difficult. I think at minimum ExternalProcessRunner (maybe some other classes that use it, too) should have documentation that makes it clear that this has already been done when InterruptedException is thrown out:\n        } catch (InterruptedException e) {\n            // retain the interrupted status\n            Thread.currentThread().interrupt();\n            throw e;", "url": "https://github.com/nordic-institute/X-Road/pull/415#discussion_r398464636", "createdAt": "2020-03-26T10:27:40Z", "author": {"login": "jansu76"}, "path": "src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/service/SystemService.java", "diffHunk": "@@ -184,6 +190,82 @@ public AnchorFile getAnchorFile() throws AnchorNotFoundException {\n         return anchorFile;\n     }\n \n+    /**\n+     * Calculate the hex hash of the given anchor file. Used to verify/preview an anchor file before\n+     * uploading it\n+     * @param anchorBytes\n+     * @return\n+     * @throws InvalidAnchorInstanceException anchor is not generated in the current instance\n+     */\n+    public AnchorFile getAnchorFileFromBytes(byte[] anchorBytes) throws InvalidAnchorInstanceException {\n+        ConfigurationAnchorV2 anchor = new ConfigurationAnchorV2(anchorBytes);\n+        verifyAnchorInstance(anchor);\n+        AnchorFile anchorFile = new AnchorFile(calculateAnchorHexHash(anchorBytes));\n+        anchorFile.setCreatedAt(FormatUtils.fromDateToOffsetDateTime(anchor.getGeneratedAt()));\n+        return anchorFile;\n+    }\n+\n+    /**\n+     * Upload a new configuration anchor. A temporary anchor file is created on the filesystem in order to run\n+     * the verification process with configuration-client module (via external script).\n+     * @param anchorBytes\n+     * @throws InvalidAnchorInstanceException anchor is not generated in the current instance\n+     * @throws AnchorUploadException in case of external process exceptions\n+     */\n+    public void uploadAnchor(byte[] anchorBytes) throws InvalidAnchorInstanceException, AnchorUploadException {\n+        ConfigurationAnchorV2 anchor = new ConfigurationAnchorV2(anchorBytes);\n+        verifyAnchorInstance(anchor);\n+        File tempAnchor = null;\n+        try {\n+            tempAnchor = createTemporaryAnchorFile(anchorBytes);\n+            configurationVerifier.verifyInternalConfiguration(tempAnchor.getAbsolutePath());\n+            anchorRepository.saveAndReplace(tempAnchor);\n+        } catch (ConfigurationVerifier.ConfigurationVerificationException ce) {\n+            throw new DeviationAwareRuntimeException(ce, ce.getErrorDeviation());\n+        } catch (CodedException ce) {\n+            throw ce;\n+        } catch (ServiceException | InterruptedException e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "620778fef93c1aa59e19ff7d32c2dbebf76bea80"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTI3MzYwNw==", "bodyText": "It is false positive since the thread interrupt status has already been restored in the ExternalProcessRunner class. Though I'm not sure if the InterruptedException ever should be thrown forward in the first place even if the status has been handled with.\nAdded some helpful info to the javadocs where this exception occurs. Also suppressed the SonarQube warning in this method since it seems to be a bug type.", "url": "https://github.com/nordic-institute/X-Road/pull/415#discussion_r399273607", "createdAt": "2020-03-27T13:43:52Z", "author": {"login": "carohauta"}, "path": "src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/service/SystemService.java", "diffHunk": "@@ -184,6 +190,82 @@ public AnchorFile getAnchorFile() throws AnchorNotFoundException {\n         return anchorFile;\n     }\n \n+    /**\n+     * Calculate the hex hash of the given anchor file. Used to verify/preview an anchor file before\n+     * uploading it\n+     * @param anchorBytes\n+     * @return\n+     * @throws InvalidAnchorInstanceException anchor is not generated in the current instance\n+     */\n+    public AnchorFile getAnchorFileFromBytes(byte[] anchorBytes) throws InvalidAnchorInstanceException {\n+        ConfigurationAnchorV2 anchor = new ConfigurationAnchorV2(anchorBytes);\n+        verifyAnchorInstance(anchor);\n+        AnchorFile anchorFile = new AnchorFile(calculateAnchorHexHash(anchorBytes));\n+        anchorFile.setCreatedAt(FormatUtils.fromDateToOffsetDateTime(anchor.getGeneratedAt()));\n+        return anchorFile;\n+    }\n+\n+    /**\n+     * Upload a new configuration anchor. A temporary anchor file is created on the filesystem in order to run\n+     * the verification process with configuration-client module (via external script).\n+     * @param anchorBytes\n+     * @throws InvalidAnchorInstanceException anchor is not generated in the current instance\n+     * @throws AnchorUploadException in case of external process exceptions\n+     */\n+    public void uploadAnchor(byte[] anchorBytes) throws InvalidAnchorInstanceException, AnchorUploadException {\n+        ConfigurationAnchorV2 anchor = new ConfigurationAnchorV2(anchorBytes);\n+        verifyAnchorInstance(anchor);\n+        File tempAnchor = null;\n+        try {\n+            tempAnchor = createTemporaryAnchorFile(anchorBytes);\n+            configurationVerifier.verifyInternalConfiguration(tempAnchor.getAbsolutePath());\n+            anchorRepository.saveAndReplace(tempAnchor);\n+        } catch (ConfigurationVerifier.ConfigurationVerificationException ce) {\n+            throw new DeviationAwareRuntimeException(ce, ce.getErrorDeviation());\n+        } catch (CodedException ce) {\n+            throw ce;\n+        } catch (ServiceException | InterruptedException e) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODQ2NDYzNg=="}, "originalCommit": {"oid": "620778fef93c1aa59e19ff7d32c2dbebf76bea80"}, "originalPosition": 84}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3MDI1Mjk4OnYy", "diffSide": "RIGHT", "path": "src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/service/SystemService.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxMDoyOTo1MFrOF8AbrA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxMjoyMToyNFrOF_olSg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODQ2NTk2NA==", "bodyText": "Sonar suggests this: https://sonarqube.niis.org/project/issues?id=xroad&open=AXDo4wqfBW8O1Uq1H2wb&pullRequest=415&resolved=false&types=VULNERABILITY\nDon't know, maybe throwing RuntimeException would not be bad if delete = false?", "url": "https://github.com/nordic-institute/X-Road/pull/415#discussion_r398465964", "createdAt": "2020-03-26T10:29:50Z", "author": {"login": "jansu76"}, "path": "src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/service/SystemService.java", "diffHunk": "@@ -184,6 +190,82 @@ public AnchorFile getAnchorFile() throws AnchorNotFoundException {\n         return anchorFile;\n     }\n \n+    /**\n+     * Calculate the hex hash of the given anchor file. Used to verify/preview an anchor file before\n+     * uploading it\n+     * @param anchorBytes\n+     * @return\n+     * @throws InvalidAnchorInstanceException anchor is not generated in the current instance\n+     */\n+    public AnchorFile getAnchorFileFromBytes(byte[] anchorBytes) throws InvalidAnchorInstanceException {\n+        ConfigurationAnchorV2 anchor = new ConfigurationAnchorV2(anchorBytes);\n+        verifyAnchorInstance(anchor);\n+        AnchorFile anchorFile = new AnchorFile(calculateAnchorHexHash(anchorBytes));\n+        anchorFile.setCreatedAt(FormatUtils.fromDateToOffsetDateTime(anchor.getGeneratedAt()));\n+        return anchorFile;\n+    }\n+\n+    /**\n+     * Upload a new configuration anchor. A temporary anchor file is created on the filesystem in order to run\n+     * the verification process with configuration-client module (via external script).\n+     * @param anchorBytes\n+     * @throws InvalidAnchorInstanceException anchor is not generated in the current instance\n+     * @throws AnchorUploadException in case of external process exceptions\n+     */\n+    public void uploadAnchor(byte[] anchorBytes) throws InvalidAnchorInstanceException, AnchorUploadException {\n+        ConfigurationAnchorV2 anchor = new ConfigurationAnchorV2(anchorBytes);\n+        verifyAnchorInstance(anchor);\n+        File tempAnchor = null;\n+        try {\n+            tempAnchor = createTemporaryAnchorFile(anchorBytes);\n+            configurationVerifier.verifyInternalConfiguration(tempAnchor.getAbsolutePath());\n+            anchorRepository.saveAndReplace(tempAnchor);\n+        } catch (ConfigurationVerifier.ConfigurationVerificationException ce) {\n+            throw new DeviationAwareRuntimeException(ce, ce.getErrorDeviation());\n+        } catch (CodedException ce) {\n+            throw ce;\n+        } catch (ServiceException | InterruptedException e) {\n+            throw new AnchorUploadException(e);\n+        } catch (Exception e) {\n+            throw new RuntimeException(\"Cannot upload a new anchor\", e);\n+        } finally {\n+            if (tempAnchor != null) {\n+                tempAnchor.delete();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "620778fef93c1aa59e19ff7d32c2dbebf76bea80"}, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTI1MjI1Mg==", "bodyText": "Maybe just log an error if the file was not deleted. IMO failing to delete a temp file in this situation is not worth instantly stopping execution.", "url": "https://github.com/nordic-institute/X-Road/pull/415#discussion_r399252252", "createdAt": "2020-03-27T13:11:00Z", "author": {"login": "carohauta"}, "path": "src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/service/SystemService.java", "diffHunk": "@@ -184,6 +190,82 @@ public AnchorFile getAnchorFile() throws AnchorNotFoundException {\n         return anchorFile;\n     }\n \n+    /**\n+     * Calculate the hex hash of the given anchor file. Used to verify/preview an anchor file before\n+     * uploading it\n+     * @param anchorBytes\n+     * @return\n+     * @throws InvalidAnchorInstanceException anchor is not generated in the current instance\n+     */\n+    public AnchorFile getAnchorFileFromBytes(byte[] anchorBytes) throws InvalidAnchorInstanceException {\n+        ConfigurationAnchorV2 anchor = new ConfigurationAnchorV2(anchorBytes);\n+        verifyAnchorInstance(anchor);\n+        AnchorFile anchorFile = new AnchorFile(calculateAnchorHexHash(anchorBytes));\n+        anchorFile.setCreatedAt(FormatUtils.fromDateToOffsetDateTime(anchor.getGeneratedAt()));\n+        return anchorFile;\n+    }\n+\n+    /**\n+     * Upload a new configuration anchor. A temporary anchor file is created on the filesystem in order to run\n+     * the verification process with configuration-client module (via external script).\n+     * @param anchorBytes\n+     * @throws InvalidAnchorInstanceException anchor is not generated in the current instance\n+     * @throws AnchorUploadException in case of external process exceptions\n+     */\n+    public void uploadAnchor(byte[] anchorBytes) throws InvalidAnchorInstanceException, AnchorUploadException {\n+        ConfigurationAnchorV2 anchor = new ConfigurationAnchorV2(anchorBytes);\n+        verifyAnchorInstance(anchor);\n+        File tempAnchor = null;\n+        try {\n+            tempAnchor = createTemporaryAnchorFile(anchorBytes);\n+            configurationVerifier.verifyInternalConfiguration(tempAnchor.getAbsolutePath());\n+            anchorRepository.saveAndReplace(tempAnchor);\n+        } catch (ConfigurationVerifier.ConfigurationVerificationException ce) {\n+            throw new DeviationAwareRuntimeException(ce, ce.getErrorDeviation());\n+        } catch (CodedException ce) {\n+            throw ce;\n+        } catch (ServiceException | InterruptedException e) {\n+            throw new AnchorUploadException(e);\n+        } catch (Exception e) {\n+            throw new RuntimeException(\"Cannot upload a new anchor\", e);\n+        } finally {\n+            if (tempAnchor != null) {\n+                tempAnchor.delete();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODQ2NTk2NA=="}, "originalCommit": {"oid": "620778fef93c1aa59e19ff7d32c2dbebf76bea80"}, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjI2OTUxNA==", "bodyText": "Good choice.", "url": "https://github.com/nordic-institute/X-Road/pull/415#discussion_r402269514", "createdAt": "2020-04-02T12:21:24Z", "author": {"login": "jansu76"}, "path": "src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/service/SystemService.java", "diffHunk": "@@ -184,6 +190,82 @@ public AnchorFile getAnchorFile() throws AnchorNotFoundException {\n         return anchorFile;\n     }\n \n+    /**\n+     * Calculate the hex hash of the given anchor file. Used to verify/preview an anchor file before\n+     * uploading it\n+     * @param anchorBytes\n+     * @return\n+     * @throws InvalidAnchorInstanceException anchor is not generated in the current instance\n+     */\n+    public AnchorFile getAnchorFileFromBytes(byte[] anchorBytes) throws InvalidAnchorInstanceException {\n+        ConfigurationAnchorV2 anchor = new ConfigurationAnchorV2(anchorBytes);\n+        verifyAnchorInstance(anchor);\n+        AnchorFile anchorFile = new AnchorFile(calculateAnchorHexHash(anchorBytes));\n+        anchorFile.setCreatedAt(FormatUtils.fromDateToOffsetDateTime(anchor.getGeneratedAt()));\n+        return anchorFile;\n+    }\n+\n+    /**\n+     * Upload a new configuration anchor. A temporary anchor file is created on the filesystem in order to run\n+     * the verification process with configuration-client module (via external script).\n+     * @param anchorBytes\n+     * @throws InvalidAnchorInstanceException anchor is not generated in the current instance\n+     * @throws AnchorUploadException in case of external process exceptions\n+     */\n+    public void uploadAnchor(byte[] anchorBytes) throws InvalidAnchorInstanceException, AnchorUploadException {\n+        ConfigurationAnchorV2 anchor = new ConfigurationAnchorV2(anchorBytes);\n+        verifyAnchorInstance(anchor);\n+        File tempAnchor = null;\n+        try {\n+            tempAnchor = createTemporaryAnchorFile(anchorBytes);\n+            configurationVerifier.verifyInternalConfiguration(tempAnchor.getAbsolutePath());\n+            anchorRepository.saveAndReplace(tempAnchor);\n+        } catch (ConfigurationVerifier.ConfigurationVerificationException ce) {\n+            throw new DeviationAwareRuntimeException(ce, ce.getErrorDeviation());\n+        } catch (CodedException ce) {\n+            throw ce;\n+        } catch (ServiceException | InterruptedException e) {\n+            throw new AnchorUploadException(e);\n+        } catch (Exception e) {\n+            throw new RuntimeException(\"Cannot upload a new anchor\", e);\n+        } finally {\n+            if (tempAnchor != null) {\n+                tempAnchor.delete();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODQ2NTk2NA=="}, "originalCommit": {"oid": "620778fef93c1aa59e19ff7d32c2dbebf76bea80"}, "originalPosition": 90}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3MDI2MzQyOnYy", "diffSide": "RIGHT", "path": "src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/service/ExternalProcessRunner.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxMDozMjozNlrOF8AiRg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxNDoyMzoyNVrOF8zX7Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODQ2NzY1NA==", "bodyText": "Sonar suggests to replace \\n: https://sonarqube.niis.org/project/issues?id=xroad&open=AXDo4wqqBW8O1Uq1H2wd&pullRequest=415&resolved=false&types=CODE_SMELL", "url": "https://github.com/nordic-institute/X-Road/pull/415#discussion_r398467654", "createdAt": "2020-03-26T10:32:36Z", "author": {"login": "jansu76"}, "path": "src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/service/ExternalProcessRunner.java", "diffHunk": "@@ -104,15 +108,40 @@\n             IOUtils.closeQuietly(process.getErrorStream());\n             IOUtils.closeQuietly(process.getOutputStream());\n         }\n+        ProcessResult processResult = new ProcessResult(commandWithArgsString, exitCode, processOutput);\n+        return processResult;\n+    }\n \n+    /**\n+     * Executes the given command with given arguments and throws a {@link ProcessFailedException} if the process' exit\n+     * code is not 0. Used e.g. for simple script execution when there is no need to handle different exit codes\n+     * @param command the command to execute\n+     * @param args arguments to be appended to the command. Make sure to pass your arguments in the correct order\n+     * (e.g. if your options have values enter them as separate consecutive args).\n+     * @return {@link ProcessResult} which contains the executed command with arguments, exit code (always 0) and the\n+     * output of the executed process\n+     * @throws ProcessNotExecutableException in the case of IOException or if the process is interrupted\n+     * @throws ProcessFailedException if the process' exit code is not 0\n+     * @throws InterruptedException if the process running thread is interrupted\n+     */\n+    public ProcessResult executeAndThrowOnFailure(String command, String... args) throws ProcessNotExecutableException,\n+            ProcessFailedException, InterruptedException {\n+        ProcessResult processResult = execute(command, args);\n         // if the process fails we attach the output into the exception\n-        if (exitCode != 0) {\n-            String fullCommandString = String.join(\" \", commandWithArgs);\n-            String processOutputString = String.join(\"\\n\", processOutput);\n-            String errorMsg = String.format(\"Failed to run command '%s' with output: \\n %s\", fullCommandString,\n-                    processOutputString);\n+        if (processResult.getExitCode() != 0) {\n+            String processOutputString = String.join(\"\\n\", processResult.processOutput);\n+            String errorMsg = String.format(\"Failed to run command '%s' with output: \\n %s\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "620778fef93c1aa59e19ff7d32c2dbebf76bea80"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTMwMDU4OQ==", "bodyText": "Changed", "url": "https://github.com/nordic-institute/X-Road/pull/415#discussion_r399300589", "createdAt": "2020-03-27T14:23:25Z", "author": {"login": "carohauta"}, "path": "src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/service/ExternalProcessRunner.java", "diffHunk": "@@ -104,15 +108,40 @@\n             IOUtils.closeQuietly(process.getErrorStream());\n             IOUtils.closeQuietly(process.getOutputStream());\n         }\n+        ProcessResult processResult = new ProcessResult(commandWithArgsString, exitCode, processOutput);\n+        return processResult;\n+    }\n \n+    /**\n+     * Executes the given command with given arguments and throws a {@link ProcessFailedException} if the process' exit\n+     * code is not 0. Used e.g. for simple script execution when there is no need to handle different exit codes\n+     * @param command the command to execute\n+     * @param args arguments to be appended to the command. Make sure to pass your arguments in the correct order\n+     * (e.g. if your options have values enter them as separate consecutive args).\n+     * @return {@link ProcessResult} which contains the executed command with arguments, exit code (always 0) and the\n+     * output of the executed process\n+     * @throws ProcessNotExecutableException in the case of IOException or if the process is interrupted\n+     * @throws ProcessFailedException if the process' exit code is not 0\n+     * @throws InterruptedException if the process running thread is interrupted\n+     */\n+    public ProcessResult executeAndThrowOnFailure(String command, String... args) throws ProcessNotExecutableException,\n+            ProcessFailedException, InterruptedException {\n+        ProcessResult processResult = execute(command, args);\n         // if the process fails we attach the output into the exception\n-        if (exitCode != 0) {\n-            String fullCommandString = String.join(\" \", commandWithArgs);\n-            String processOutputString = String.join(\"\\n\", processOutput);\n-            String errorMsg = String.format(\"Failed to run command '%s' with output: \\n %s\", fullCommandString,\n-                    processOutputString);\n+        if (processResult.getExitCode() != 0) {\n+            String processOutputString = String.join(\"\\n\", processResult.processOutput);\n+            String errorMsg = String.format(\"Failed to run command '%s' with output: \\n %s\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODQ2NzY1NA=="}, "originalCommit": {"oid": "620778fef93c1aa59e19ff7d32c2dbebf76bea80"}, "originalPosition": 74}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3MDQ3NzAyOnYy", "diffSide": "RIGHT", "path": "src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/service/SystemService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxMTozMDo0M1rOF8CmAw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxNDozMDozMlrOF8ztWg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODUwMTM3OQ==", "bodyText": "instead of\n} catch (ServiceException | InterruptedException e) {\nI think I would prefer\n} catch (ProcessNotExecutableException | ProcessFailedException | InterruptedException e) {\n\nit is more descriptive, it explains which types of errors form an AnchorUploadException. ServiceException is quite abstract. OK, abstraction can intentional also, it could be argued otherwise too. I personally was slightly confused \"where do these ServiceExceptions come from?\" and would have preferred my suggestion.\nServiceException is a bit of a catch-all, so when methods get modified, and new exceptions are added, we may mistakenly translate some new exception type to AnchorUploadException, even if it should have a different handling. So, I think it is good that we force developer to rethink \"is this AnchorUploadException or not\" when new exceptions are added. This, as long as the number of discreet exception types does not get too big, and since it is only 3 at this point, it's not a problem", "url": "https://github.com/nordic-institute/X-Road/pull/415#discussion_r398501379", "createdAt": "2020-03-26T11:30:43Z", "author": {"login": "jansu76"}, "path": "src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/service/SystemService.java", "diffHunk": "@@ -184,6 +190,82 @@ public AnchorFile getAnchorFile() throws AnchorNotFoundException {\n         return anchorFile;\n     }\n \n+    /**\n+     * Calculate the hex hash of the given anchor file. Used to verify/preview an anchor file before\n+     * uploading it\n+     * @param anchorBytes\n+     * @return\n+     * @throws InvalidAnchorInstanceException anchor is not generated in the current instance\n+     */\n+    public AnchorFile getAnchorFileFromBytes(byte[] anchorBytes) throws InvalidAnchorInstanceException {\n+        ConfigurationAnchorV2 anchor = new ConfigurationAnchorV2(anchorBytes);\n+        verifyAnchorInstance(anchor);\n+        AnchorFile anchorFile = new AnchorFile(calculateAnchorHexHash(anchorBytes));\n+        anchorFile.setCreatedAt(FormatUtils.fromDateToOffsetDateTime(anchor.getGeneratedAt()));\n+        return anchorFile;\n+    }\n+\n+    /**\n+     * Upload a new configuration anchor. A temporary anchor file is created on the filesystem in order to run\n+     * the verification process with configuration-client module (via external script).\n+     * @param anchorBytes\n+     * @throws InvalidAnchorInstanceException anchor is not generated in the current instance\n+     * @throws AnchorUploadException in case of external process exceptions\n+     */\n+    public void uploadAnchor(byte[] anchorBytes) throws InvalidAnchorInstanceException, AnchorUploadException {\n+        ConfigurationAnchorV2 anchor = new ConfigurationAnchorV2(anchorBytes);\n+        verifyAnchorInstance(anchor);\n+        File tempAnchor = null;\n+        try {\n+            tempAnchor = createTemporaryAnchorFile(anchorBytes);\n+            configurationVerifier.verifyInternalConfiguration(tempAnchor.getAbsolutePath());\n+            anchorRepository.saveAndReplace(tempAnchor);\n+        } catch (ConfigurationVerifier.ConfigurationVerificationException ce) {\n+            throw new DeviationAwareRuntimeException(ce, ce.getErrorDeviation());\n+        } catch (CodedException ce) {\n+            throw ce;\n+        } catch (ServiceException | InterruptedException e) {\n+            throw new AnchorUploadException(e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "620778fef93c1aa59e19ff7d32c2dbebf76bea80"}, "originalPosition": 85}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTMwNjA3NA==", "bodyText": "Yeah I was deliberately going for the gotta-catch-'em-all approach since no matter what ServiceException we get here -> we still know that the anchor upload fails -> we know we want to throw AnchorUploadException.\nBut I get the point you are saying here and it is probably better in the long run that we keep being verbose about the different exceptions as long as it doesn't get too overwhelming. Updated the catch clause.", "url": "https://github.com/nordic-institute/X-Road/pull/415#discussion_r399306074", "createdAt": "2020-03-27T14:30:32Z", "author": {"login": "carohauta"}, "path": "src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/service/SystemService.java", "diffHunk": "@@ -184,6 +190,82 @@ public AnchorFile getAnchorFile() throws AnchorNotFoundException {\n         return anchorFile;\n     }\n \n+    /**\n+     * Calculate the hex hash of the given anchor file. Used to verify/preview an anchor file before\n+     * uploading it\n+     * @param anchorBytes\n+     * @return\n+     * @throws InvalidAnchorInstanceException anchor is not generated in the current instance\n+     */\n+    public AnchorFile getAnchorFileFromBytes(byte[] anchorBytes) throws InvalidAnchorInstanceException {\n+        ConfigurationAnchorV2 anchor = new ConfigurationAnchorV2(anchorBytes);\n+        verifyAnchorInstance(anchor);\n+        AnchorFile anchorFile = new AnchorFile(calculateAnchorHexHash(anchorBytes));\n+        anchorFile.setCreatedAt(FormatUtils.fromDateToOffsetDateTime(anchor.getGeneratedAt()));\n+        return anchorFile;\n+    }\n+\n+    /**\n+     * Upload a new configuration anchor. A temporary anchor file is created on the filesystem in order to run\n+     * the verification process with configuration-client module (via external script).\n+     * @param anchorBytes\n+     * @throws InvalidAnchorInstanceException anchor is not generated in the current instance\n+     * @throws AnchorUploadException in case of external process exceptions\n+     */\n+    public void uploadAnchor(byte[] anchorBytes) throws InvalidAnchorInstanceException, AnchorUploadException {\n+        ConfigurationAnchorV2 anchor = new ConfigurationAnchorV2(anchorBytes);\n+        verifyAnchorInstance(anchor);\n+        File tempAnchor = null;\n+        try {\n+            tempAnchor = createTemporaryAnchorFile(anchorBytes);\n+            configurationVerifier.verifyInternalConfiguration(tempAnchor.getAbsolutePath());\n+            anchorRepository.saveAndReplace(tempAnchor);\n+        } catch (ConfigurationVerifier.ConfigurationVerificationException ce) {\n+            throw new DeviationAwareRuntimeException(ce, ce.getErrorDeviation());\n+        } catch (CodedException ce) {\n+            throw ce;\n+        } catch (ServiceException | InterruptedException e) {\n+            throw new AnchorUploadException(e);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODUwMTM3OQ=="}, "originalCommit": {"oid": "620778fef93c1aa59e19ff7d32c2dbebf76bea80"}, "originalPosition": 85}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3MDQ3ODU5OnYy", "diffSide": "RIGHT", "path": "src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/service/SystemService.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxMTozMToyMVrOF8CnMQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxMjoyMjoyNlrOF_on5Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODUwMTY4MQ==", "bodyText": "Could be\n} catch (IOException e) {\nand I think more specific one would be better.", "url": "https://github.com/nordic-institute/X-Road/pull/415#discussion_r398501681", "createdAt": "2020-03-26T11:31:21Z", "author": {"login": "jansu76"}, "path": "src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/service/SystemService.java", "diffHunk": "@@ -184,6 +190,82 @@ public AnchorFile getAnchorFile() throws AnchorNotFoundException {\n         return anchorFile;\n     }\n \n+    /**\n+     * Calculate the hex hash of the given anchor file. Used to verify/preview an anchor file before\n+     * uploading it\n+     * @param anchorBytes\n+     * @return\n+     * @throws InvalidAnchorInstanceException anchor is not generated in the current instance\n+     */\n+    public AnchorFile getAnchorFileFromBytes(byte[] anchorBytes) throws InvalidAnchorInstanceException {\n+        ConfigurationAnchorV2 anchor = new ConfigurationAnchorV2(anchorBytes);\n+        verifyAnchorInstance(anchor);\n+        AnchorFile anchorFile = new AnchorFile(calculateAnchorHexHash(anchorBytes));\n+        anchorFile.setCreatedAt(FormatUtils.fromDateToOffsetDateTime(anchor.getGeneratedAt()));\n+        return anchorFile;\n+    }\n+\n+    /**\n+     * Upload a new configuration anchor. A temporary anchor file is created on the filesystem in order to run\n+     * the verification process with configuration-client module (via external script).\n+     * @param anchorBytes\n+     * @throws InvalidAnchorInstanceException anchor is not generated in the current instance\n+     * @throws AnchorUploadException in case of external process exceptions\n+     */\n+    public void uploadAnchor(byte[] anchorBytes) throws InvalidAnchorInstanceException, AnchorUploadException {\n+        ConfigurationAnchorV2 anchor = new ConfigurationAnchorV2(anchorBytes);\n+        verifyAnchorInstance(anchor);\n+        File tempAnchor = null;\n+        try {\n+            tempAnchor = createTemporaryAnchorFile(anchorBytes);\n+            configurationVerifier.verifyInternalConfiguration(tempAnchor.getAbsolutePath());\n+            anchorRepository.saveAndReplace(tempAnchor);\n+        } catch (ConfigurationVerifier.ConfigurationVerificationException ce) {\n+            throw new DeviationAwareRuntimeException(ce, ce.getErrorDeviation());\n+        } catch (CodedException ce) {\n+            throw ce;\n+        } catch (ServiceException | InterruptedException e) {\n+            throw new AnchorUploadException(e);\n+        } catch (Exception e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "620778fef93c1aa59e19ff7d32c2dbebf76bea80"}, "originalPosition": 86}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTMxMTM2MA==", "bodyText": "Don't know but somehow I seem to add Exception quite often instead of IOException! I updated some javadocs so it's easier to track where the IOException is thrown from. In this case it is thrown if the temp file creation fails or saving the anchor file fails. I'm not sure if those require their own exception classes? I probably would not add them.", "url": "https://github.com/nordic-institute/X-Road/pull/415#discussion_r399311360", "createdAt": "2020-03-27T14:38:03Z", "author": {"login": "carohauta"}, "path": "src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/service/SystemService.java", "diffHunk": "@@ -184,6 +190,82 @@ public AnchorFile getAnchorFile() throws AnchorNotFoundException {\n         return anchorFile;\n     }\n \n+    /**\n+     * Calculate the hex hash of the given anchor file. Used to verify/preview an anchor file before\n+     * uploading it\n+     * @param anchorBytes\n+     * @return\n+     * @throws InvalidAnchorInstanceException anchor is not generated in the current instance\n+     */\n+    public AnchorFile getAnchorFileFromBytes(byte[] anchorBytes) throws InvalidAnchorInstanceException {\n+        ConfigurationAnchorV2 anchor = new ConfigurationAnchorV2(anchorBytes);\n+        verifyAnchorInstance(anchor);\n+        AnchorFile anchorFile = new AnchorFile(calculateAnchorHexHash(anchorBytes));\n+        anchorFile.setCreatedAt(FormatUtils.fromDateToOffsetDateTime(anchor.getGeneratedAt()));\n+        return anchorFile;\n+    }\n+\n+    /**\n+     * Upload a new configuration anchor. A temporary anchor file is created on the filesystem in order to run\n+     * the verification process with configuration-client module (via external script).\n+     * @param anchorBytes\n+     * @throws InvalidAnchorInstanceException anchor is not generated in the current instance\n+     * @throws AnchorUploadException in case of external process exceptions\n+     */\n+    public void uploadAnchor(byte[] anchorBytes) throws InvalidAnchorInstanceException, AnchorUploadException {\n+        ConfigurationAnchorV2 anchor = new ConfigurationAnchorV2(anchorBytes);\n+        verifyAnchorInstance(anchor);\n+        File tempAnchor = null;\n+        try {\n+            tempAnchor = createTemporaryAnchorFile(anchorBytes);\n+            configurationVerifier.verifyInternalConfiguration(tempAnchor.getAbsolutePath());\n+            anchorRepository.saveAndReplace(tempAnchor);\n+        } catch (ConfigurationVerifier.ConfigurationVerificationException ce) {\n+            throw new DeviationAwareRuntimeException(ce, ce.getErrorDeviation());\n+        } catch (CodedException ce) {\n+            throw ce;\n+        } catch (ServiceException | InterruptedException e) {\n+            throw new AnchorUploadException(e);\n+        } catch (Exception e) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODUwMTY4MQ=="}, "originalCommit": {"oid": "620778fef93c1aa59e19ff7d32c2dbebf76bea80"}, "originalPosition": 86}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjI3MDE4MQ==", "bodyText": "Agreed.", "url": "https://github.com/nordic-institute/X-Road/pull/415#discussion_r402270181", "createdAt": "2020-04-02T12:22:26Z", "author": {"login": "jansu76"}, "path": "src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/service/SystemService.java", "diffHunk": "@@ -184,6 +190,82 @@ public AnchorFile getAnchorFile() throws AnchorNotFoundException {\n         return anchorFile;\n     }\n \n+    /**\n+     * Calculate the hex hash of the given anchor file. Used to verify/preview an anchor file before\n+     * uploading it\n+     * @param anchorBytes\n+     * @return\n+     * @throws InvalidAnchorInstanceException anchor is not generated in the current instance\n+     */\n+    public AnchorFile getAnchorFileFromBytes(byte[] anchorBytes) throws InvalidAnchorInstanceException {\n+        ConfigurationAnchorV2 anchor = new ConfigurationAnchorV2(anchorBytes);\n+        verifyAnchorInstance(anchor);\n+        AnchorFile anchorFile = new AnchorFile(calculateAnchorHexHash(anchorBytes));\n+        anchorFile.setCreatedAt(FormatUtils.fromDateToOffsetDateTime(anchor.getGeneratedAt()));\n+        return anchorFile;\n+    }\n+\n+    /**\n+     * Upload a new configuration anchor. A temporary anchor file is created on the filesystem in order to run\n+     * the verification process with configuration-client module (via external script).\n+     * @param anchorBytes\n+     * @throws InvalidAnchorInstanceException anchor is not generated in the current instance\n+     * @throws AnchorUploadException in case of external process exceptions\n+     */\n+    public void uploadAnchor(byte[] anchorBytes) throws InvalidAnchorInstanceException, AnchorUploadException {\n+        ConfigurationAnchorV2 anchor = new ConfigurationAnchorV2(anchorBytes);\n+        verifyAnchorInstance(anchor);\n+        File tempAnchor = null;\n+        try {\n+            tempAnchor = createTemporaryAnchorFile(anchorBytes);\n+            configurationVerifier.verifyInternalConfiguration(tempAnchor.getAbsolutePath());\n+            anchorRepository.saveAndReplace(tempAnchor);\n+        } catch (ConfigurationVerifier.ConfigurationVerificationException ce) {\n+            throw new DeviationAwareRuntimeException(ce, ce.getErrorDeviation());\n+        } catch (CodedException ce) {\n+            throw ce;\n+        } catch (ServiceException | InterruptedException e) {\n+            throw new AnchorUploadException(e);\n+        } catch (Exception e) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODUwMTY4MQ=="}, "originalCommit": {"oid": "620778fef93c1aa59e19ff7d32c2dbebf76bea80"}, "originalPosition": 86}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2779, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}