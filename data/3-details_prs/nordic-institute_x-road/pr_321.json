{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYzMTQ3MjE0", "number": 321, "title": "XRDDEV-796", "bodyText": "Adds functionality for updating a ServiceDescription containing REST or OpenApi3 -type of Service", "createdAt": "2020-01-15T13:50:23Z", "url": "https://github.com/nordic-institute/X-Road/pull/321", "merged": true, "mergeCommit": {"oid": "6dabd1124778e67069ec9a7f80e33831bb15ba53"}, "closed": true, "closedAt": "2020-01-24T14:08:20Z", "author": {"login": "TJaakkola"}, "timelineItems": {"totalCount": 17, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABb4nq_0gH2gAyMzYzMTQ3MjE0OmYzZmRmNzU4Y2E2NWRlNmY1MjZhNmM1ZDI3ZTUzY2ViZjYzMDBjM2U=", "endCursor": "Y3Vyc29yOnYyOpPPAAABb9fhO-AFqTM0Nzk3NDM5Mw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "f3fdf758ca65de6f526a6c5d27e53cebf6300c3e", "author": {"user": {"login": "TJaakkola", "name": "Tapio Jaakkola"}}, "url": "https://github.com/nordic-institute/X-Road/commit/f3fdf758ca65de6f526a6c5d27e53cebf6300c3e", "committedDate": "2020-01-09T10:47:57Z", "message": "XRDDEV-796: Add initial api for editing REST servicedescription"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "672a3462b222b9ecc584154d51201bdae690cfba", "author": {"user": {"login": "TJaakkola", "name": "Tapio Jaakkola"}}, "url": "https://github.com/nordic-institute/X-Road/commit/672a3462b222b9ecc584154d51201bdae690cfba", "committedDate": "2020-01-09T13:47:47Z", "message": "XRDDEV-796: Fix editing rest servicedescription functionality\n\n- Add original service code to updateServiceDescription object\n- Only change service code of endpoints which have the given original service code\n- Fix tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bbe51ab3dcd6ee6982daf728f93926b3e91879c1", "author": {"user": {"login": "TJaakkola", "name": "Tapio Jaakkola"}}, "url": "https://github.com/nordic-institute/X-Road/commit/bbe51ab3dcd6ee6982daf728f93926b3e91879c1", "committedDate": "2020-01-10T09:51:22Z", "message": "Merge branch 'develop' into XRDDEV-796"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8bb35be5b3cdcbd774cd650b60c3339cb4d20334", "author": {"user": {"login": "TJaakkola", "name": "Tapio Jaakkola"}}, "url": "https://github.com/nordic-institute/X-Road/commit/8bb35be5b3cdcbd774cd650b60c3339cb4d20334", "committedDate": "2020-01-10T12:11:50Z", "message": "XRDDEV-796: Add empty endpoint when adding a new openapi3 servicedescription"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "94d8d6ac6c324e42484a6e4885120d593f39db72", "author": {"user": {"login": "TJaakkola", "name": "Tapio Jaakkola"}}, "url": "https://github.com/nordic-institute/X-Road/commit/94d8d6ac6c324e42484a6e4885120d593f39db72", "committedDate": "2020-01-15T13:40:46Z", "message": "Resolve npm audit issue"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1f9ded1480f8961b1e84948d0ec2e9d30e3aeabc", "author": {"user": {"login": "TJaakkola", "name": "Tapio Jaakkola"}}, "url": "https://github.com/nordic-institute/X-Road/commit/1f9ded1480f8961b1e84948d0ec2e9d30e3aeabc", "committedDate": "2020-01-15T13:43:44Z", "message": "XRDDEV-796: Add implementation for updating OpenApi3 ServiceDescription and integration test for the functionality"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4e5d24f7d00a7f2364d2f55bb0c6480168cfe021", "author": {"user": {"login": "TJaakkola", "name": "Tapio Jaakkola"}}, "url": "https://github.com/nordic-institute/X-Road/commit/4e5d24f7d00a7f2364d2f55bb0c6480168cfe021", "committedDate": "2020-01-15T13:46:52Z", "message": "Merge branch 'develop' into XRDDEV-796"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4aef881a23c06ece9d6d3afa1e357f5ad02abfa0", "author": {"user": {"login": "TJaakkola", "name": "Tapio Jaakkola"}}, "url": "https://github.com/nordic-institute/X-Road/commit/4aef881a23c06ece9d6d3afa1e357f5ad02abfa0", "committedDate": "2020-01-17T09:08:18Z", "message": "XRDDEV-796: Add missing parameter checks"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8b1c777ee3498e7d8789dc40edb0d80eb250f7de", "author": {"user": {"login": "TJaakkola", "name": "Tapio Jaakkola"}}, "url": "https://github.com/nordic-institute/X-Road/commit/8b1c777ee3498e7d8789dc40edb0d80eb250f7de", "committedDate": "2020-01-17T11:14:55Z", "message": "XRDDEV-796: Fix update ServiceDescriptions api"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ1NjcxODQ2", "url": "https://github.com/nordic-institute/X-Road/pull/321#pullrequestreview-345671846", "createdAt": "2020-01-21T07:18:38Z", "commit": {"oid": "8b1c777ee3498e7d8789dc40edb0d80eb250f7de"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQwNzoxODozOFrOFfwT5A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQxMzoxNzo0MlrOFf5lbQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODg0MTcwMA==", "bodyText": "Should we use the 8 spaces continuation indentation in long method/constructor signatures too? At least it seems to be something that is mostly used in our codebase", "url": "https://github.com/nordic-institute/X-Road/pull/321#discussion_r368841700", "createdAt": "2020-01-21T07:18:38Z", "author": {"login": "carohauta"}, "path": "src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/openapi/ServiceDescriptionsApiController.java", "diffHunk": "@@ -70,15 +71,16 @@\n \n     /**\n      * ServiceDescriptionsApiController constructor\n+     *\n      * @param serviceDescriptionService\n      * @param serviceDescriptionConverter\n      * @param serviceConverter\n      */\n \n     @Autowired\n     public ServiceDescriptionsApiController(ServiceDescriptionService serviceDescriptionService,\n-            ServiceDescriptionConverter serviceDescriptionConverter,\n-            ServiceConverter serviceConverter) {\n+                                            ServiceDescriptionConverter serviceDescriptionConverter,\n+                                            ServiceConverter serviceConverter) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8b1c777ee3498e7d8789dc40edb0d80eb250f7de"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODg3MzYyOQ==", "bodyText": "Would it make this method easier to read if the whole if-else-if-else structure was wrapped in just one try-catch instead of repeating the almost same catch clauses in every block?", "url": "https://github.com/nordic-institute/X-Road/pull/321#discussion_r368873629", "createdAt": "2020-01-21T08:52:51Z", "author": {"login": "carohauta"}, "path": "src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/openapi/ServiceDescriptionsApiController.java", "diffHunk": "@@ -127,20 +129,22 @@ public ServiceDescriptionsApiController(ServiceDescriptionService serviceDescrip\n     }\n \n     @Override\n-    @PreAuthorize(\"hasAuthority('EDIT_WSDL')\")\n+    @PreAuthorize(\"hasAnyAuthority('EDIT_WSDL', 'EDIT_OPENAPI3', 'EDIT_REST')\")\n     public ResponseEntity<ServiceDescription> updateServiceDescription(String id,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8b1c777ee3498e7d8789dc40edb0d80eb250f7de"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODkwNTkwMg==", "bodyText": "Will throw an NPE if serviceDescription is null. Should throw ServiceDescriptionNotFoundException", "url": "https://github.com/nordic-institute/X-Road/pull/321#discussion_r368905902", "createdAt": "2020-01-21T09:59:34Z", "author": {"login": "carohauta"}, "path": "src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/service/ServiceDescriptionService.java", "diffHunk": "@@ -498,7 +528,178 @@ public ServiceDescriptionType refreshServiceDescription(Long id, boolean ignoreW\n     }\n \n     /**\n-     * Get one ServiceDescriptionType by id\n+     * Update Rest service description\n+     *\n+     * @param id\n+     * @param url\n+     * @param restServiceCode\n+     * @param newRestServiceCode\n+     * @return {@link ServiceDescriptionType}\n+     * @throws UrlAlreadyExistsException\n+     * @throws ServiceCodeAlreadyExistsException\n+     */\n+    public ServiceDescriptionType updateRestServiceDescription(Long id, String url, String restServiceCode,\n+                                                               String newRestServiceCode)\n+            throws UrlAlreadyExistsException, ServiceCodeAlreadyExistsException {\n+        verifyAuthority(\"EDIT_REST\");\n+\n+        if (newRestServiceCode == null) {\n+            newRestServiceCode = restServiceCode;\n+        }\n+\n+        ServiceDescriptionType serviceDescription = getServiceDescriptiontype(id);\n+        serviceDescription.setUrl(url);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8b1c777ee3498e7d8789dc40edb0d80eb250f7de"}, "originalPosition": 97}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODkxNzM0NQ==", "bodyText": "Should this throw a checked exception instead so that the API user would get an error code instead of http status 500?", "url": "https://github.com/nordic-institute/X-Road/pull/321#discussion_r368917345", "createdAt": "2020-01-21T10:22:31Z", "author": {"login": "carohauta"}, "path": "src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/service/ServiceDescriptionService.java", "diffHunk": "@@ -498,7 +528,178 @@ public ServiceDescriptionType refreshServiceDescription(Long id, boolean ignoreW\n     }\n \n     /**\n-     * Get one ServiceDescriptionType by id\n+     * Update Rest service description\n+     *\n+     * @param id\n+     * @param url\n+     * @param restServiceCode\n+     * @param newRestServiceCode\n+     * @return {@link ServiceDescriptionType}\n+     * @throws UrlAlreadyExistsException\n+     * @throws ServiceCodeAlreadyExistsException\n+     */\n+    public ServiceDescriptionType updateRestServiceDescription(Long id, String url, String restServiceCode,\n+                                                               String newRestServiceCode)\n+            throws UrlAlreadyExistsException, ServiceCodeAlreadyExistsException {\n+        verifyAuthority(\"EDIT_REST\");\n+\n+        if (newRestServiceCode == null) {\n+            newRestServiceCode = restServiceCode;\n+        }\n+\n+        ServiceDescriptionType serviceDescription = getServiceDescriptiontype(id);\n+        serviceDescription.setUrl(url);\n+        updateServiceCodes(restServiceCode, newRestServiceCode, serviceDescription);\n+\n+        checkDuplicateServiceCodes(serviceDescription);\n+        checkDuplicateUrl(serviceDescription);\n+\n+        clientRepository.saveOrUpdateAndFlush(serviceDescription.getClient());\n+        return serviceDescription;\n+    }\n+\n+    /**\n+     * Update OpenApi3 ServiceDescription\n+     *\n+     * @param id\n+     * @param url\n+     * @param restServiceCode\n+     * @param newRestServiceCode\n+     * @param ignoreWarnings\n+     * @return\n+     * @throws UrlAlreadyExistsException\n+     * @throws ServiceCodeAlreadyExistsException\n+     * @throws UnhandledWarningsException\n+     * @throws OpenApiParser.ParsingException\n+     */\n+    public ServiceDescriptionType updateOpenApi3ServiceDescription(Long id, String url, String restServiceCode,\n+            String newRestServiceCode, Boolean ignoreWarnings) throws UrlAlreadyExistsException,\n+            ServiceCodeAlreadyExistsException, UnhandledWarningsException, OpenApiParser.ParsingException {\n+\n+        verifyAuthority(\"EDIT_OPENAPI3\");\n+        ServiceDescriptionType serviceDescription = getServiceDescriptiontype(id);\n+\n+        if (newRestServiceCode == null) {\n+            newRestServiceCode = restServiceCode;\n+        }\n+\n+        updateServiceCodes(restServiceCode, newRestServiceCode, serviceDescription);\n+\n+        // Parse openapi definition and handle updating endpoints and acls\n+        if (serviceDescription.getUrl() != url) {\n+            parseOpenapi3ToServiceDescription(url, newRestServiceCode, ignoreWarnings, serviceDescription);\n+        }\n+\n+        checkDuplicateServiceCodes(serviceDescription);\n+        checkDuplicateUrl(serviceDescription);\n+\n+        clientRepository.saveOrUpdateAndFlush(serviceDescription.getClient());\n+\n+        return serviceDescription;\n+    }\n+\n+    /**\n+     * Parse OpenApi3 description and update endpoints and acls in ServiceDescription accordingly\n+     *\n+     * @param url\n+     * @param serviceCode\n+     * @param ignoreWarnings\n+     * @param serviceDescription\n+     * @throws OpenApiParser.ParsingException\n+     * @throws UnhandledWarningsException\n+     */\n+    private void parseOpenapi3ToServiceDescription(String url, String serviceCode, boolean ignoreWarnings,\n+                                                   ServiceDescriptionType serviceDescription) throws\n+            OpenApiParser.ParsingException, UnhandledWarningsException {\n+        OpenApiParser.Result result = openApiParser.parse(url);\n+        if (!ignoreWarnings && result.hasWarnings()) {\n+            WarningDeviation openapiParserWarnings = new WarningDeviation(\"OpenapiParserWarnings\",\n+                    result.getWarnings());\n+            throw new UnhandledWarningsException(Arrays.asList(openapiParserWarnings));\n+        }\n+\n+        // Update url\n+        updateServiceDescriptionUrl(serviceDescription, serviceCode, url);\n+\n+        // Create endpoints from parsed results\n+        List<EndpointType> parsedEndpoints = result.getOperations().stream()\n+                .map(operation -> new EndpointType(serviceCode, operation.getMethod(), operation.getPath(),\n+                        true))\n+                .collect(Collectors.toList());\n+        parsedEndpoints.add(new EndpointType(serviceCode, \"*\", \"**\", true));\n+\n+        // Change existing, manually added, endpoints to generated if they're found from parsedEndpoints\n+        serviceDescription.getClient().getEndpoint().forEach(ep -> {\n+            if (parsedEndpoints.stream().anyMatch(parsedEp -> parsedEp.isEquivalent(ep))) {\n+                ep.setGenerated(true);\n+            }\n+        });\n+\n+        // Remove ACLs that don't exist in the parsed endpoints list\n+        serviceDescription.getClient().getAcl().removeIf(acl ->\n+                acl.getEndpoint().isGenerated()\n+                        && !parsedEndpoints.stream().anyMatch(endpoint -> acl.getEndpoint().isEquivalent(endpoint)));\n+\n+\n+        // Remove generated endpoints that are not found from the parsed endpoints\n+        serviceDescription.getClient().getEndpoint().removeIf(ep -> {\n+            return ep.isGenerated() && !parsedEndpoints.stream()\n+                    .anyMatch(parsedEp -> parsedEp.isEquivalent(ep));\n+        });\n+\n+        // Add parsed endpoints to endpoints list if it is not already there\n+        serviceDescription.getClient().getEndpoint().addAll(\n+                parsedEndpoints.stream()\n+                        .filter(parsedEp -> !serviceDescription.getClient().getEndpoint()\n+                            .stream()\n+                            .anyMatch(ep -> ep.isEquivalent(parsedEp)))\n+                            .collect(Collectors.toList()));\n+    }\n+\n+    /**\n+     * Updates the ServiceCodes of Endpoints and Service linked to given ServiceDescription\n+     *\n+     * @param serviceCode\n+     * @param newserviceCode\n+     * @param serviceDescriptiontype\n+     */\n+    private void updateServiceCodes(String serviceCode, String newserviceCode,\n+                                          ServiceDescriptionType serviceDescriptiontype) {\n+        // Update endpoint service codes\n+        ClientType client = serviceDescriptiontype.getClient();\n+        client.getEndpoint().stream()\n+                .filter(e -> e.getServiceCode().equals(serviceCode))\n+                .forEach(e -> e.setServiceCode(newserviceCode));\n+\n+        // Update service service code\n+        ServiceType service = serviceDescriptiontype.getService().stream()\n+                .filter(s -> serviceCode.equals(s.getServiceCode()))\n+                .findFirst()\n+                .orElseThrow(() -> new RuntimeException(\"Service with servicecode: \" + serviceCode", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8b1c777ee3498e7d8789dc40edb0d80eb250f7de"}, "originalPosition": 224}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODkyNDQ2MA==", "bodyText": "The DescriptionType should be checked and WrongServiceDescriptionTypeException thrown if the type is not REST", "url": "https://github.com/nordic-institute/X-Road/pull/321#discussion_r368924460", "createdAt": "2020-01-21T10:36:38Z", "author": {"login": "carohauta"}, "path": "src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/service/ServiceDescriptionService.java", "diffHunk": "@@ -498,7 +528,178 @@ public ServiceDescriptionType refreshServiceDescription(Long id, boolean ignoreW\n     }\n \n     /**\n-     * Get one ServiceDescriptionType by id\n+     * Update Rest service description\n+     *\n+     * @param id\n+     * @param url\n+     * @param restServiceCode\n+     * @param newRestServiceCode\n+     * @return {@link ServiceDescriptionType}\n+     * @throws UrlAlreadyExistsException\n+     * @throws ServiceCodeAlreadyExistsException\n+     */\n+    public ServiceDescriptionType updateRestServiceDescription(Long id, String url, String restServiceCode,\n+                                                               String newRestServiceCode)\n+            throws UrlAlreadyExistsException, ServiceCodeAlreadyExistsException {\n+        verifyAuthority(\"EDIT_REST\");\n+\n+        if (newRestServiceCode == null) {\n+            newRestServiceCode = restServiceCode;\n+        }\n+\n+        ServiceDescriptionType serviceDescription = getServiceDescriptiontype(id);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8b1c777ee3498e7d8789dc40edb0d80eb250f7de"}, "originalPosition": 96}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODkyNTE2OQ==", "bodyText": "The DescriptionType should be checked and WrongServiceDescriptionTypeException thrown if the type is not OPENAPI3. Also add the same null check as commented above", "url": "https://github.com/nordic-institute/X-Road/pull/321#discussion_r368925169", "createdAt": "2020-01-21T10:38:11Z", "author": {"login": "carohauta"}, "path": "src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/service/ServiceDescriptionService.java", "diffHunk": "@@ -498,7 +528,178 @@ public ServiceDescriptionType refreshServiceDescription(Long id, boolean ignoreW\n     }\n \n     /**\n-     * Get one ServiceDescriptionType by id\n+     * Update Rest service description\n+     *\n+     * @param id\n+     * @param url\n+     * @param restServiceCode\n+     * @param newRestServiceCode\n+     * @return {@link ServiceDescriptionType}\n+     * @throws UrlAlreadyExistsException\n+     * @throws ServiceCodeAlreadyExistsException\n+     */\n+    public ServiceDescriptionType updateRestServiceDescription(Long id, String url, String restServiceCode,\n+                                                               String newRestServiceCode)\n+            throws UrlAlreadyExistsException, ServiceCodeAlreadyExistsException {\n+        verifyAuthority(\"EDIT_REST\");\n+\n+        if (newRestServiceCode == null) {\n+            newRestServiceCode = restServiceCode;\n+        }\n+\n+        ServiceDescriptionType serviceDescription = getServiceDescriptiontype(id);\n+        serviceDescription.setUrl(url);\n+        updateServiceCodes(restServiceCode, newRestServiceCode, serviceDescription);\n+\n+        checkDuplicateServiceCodes(serviceDescription);\n+        checkDuplicateUrl(serviceDescription);\n+\n+        clientRepository.saveOrUpdateAndFlush(serviceDescription.getClient());\n+        return serviceDescription;\n+    }\n+\n+    /**\n+     * Update OpenApi3 ServiceDescription\n+     *\n+     * @param id\n+     * @param url\n+     * @param restServiceCode\n+     * @param newRestServiceCode\n+     * @param ignoreWarnings\n+     * @return\n+     * @throws UrlAlreadyExistsException\n+     * @throws ServiceCodeAlreadyExistsException\n+     * @throws UnhandledWarningsException\n+     * @throws OpenApiParser.ParsingException\n+     */\n+    public ServiceDescriptionType updateOpenApi3ServiceDescription(Long id, String url, String restServiceCode,\n+            String newRestServiceCode, Boolean ignoreWarnings) throws UrlAlreadyExistsException,\n+            ServiceCodeAlreadyExistsException, UnhandledWarningsException, OpenApiParser.ParsingException {\n+\n+        verifyAuthority(\"EDIT_OPENAPI3\");\n+        ServiceDescriptionType serviceDescription = getServiceDescriptiontype(id);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8b1c777ee3498e7d8789dc40edb0d80eb250f7de"}, "originalPosition": 126}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODk4NjU5OQ==", "bodyText": "Should this also check for duplicate endpoints? There is a unique constraint index for endpoints saying that there cannot be two endpoints with the same client_id & servicecode & method & path.\nDuplicate endpoints should probably be checked when adding/updating either REST or OPENAPI3 ServiceDescriptions.", "url": "https://github.com/nordic-institute/X-Road/pull/321#discussion_r368986599", "createdAt": "2020-01-21T13:02:13Z", "author": {"login": "carohauta"}, "path": "src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/service/ServiceDescriptionService.java", "diffHunk": "@@ -498,7 +528,178 @@ public ServiceDescriptionType refreshServiceDescription(Long id, boolean ignoreW\n     }\n \n     /**\n-     * Get one ServiceDescriptionType by id\n+     * Update Rest service description\n+     *\n+     * @param id\n+     * @param url\n+     * @param restServiceCode\n+     * @param newRestServiceCode\n+     * @return {@link ServiceDescriptionType}\n+     * @throws UrlAlreadyExistsException\n+     * @throws ServiceCodeAlreadyExistsException\n+     */\n+    public ServiceDescriptionType updateRestServiceDescription(Long id, String url, String restServiceCode,\n+                                                               String newRestServiceCode)\n+            throws UrlAlreadyExistsException, ServiceCodeAlreadyExistsException {\n+        verifyAuthority(\"EDIT_REST\");\n+\n+        if (newRestServiceCode == null) {\n+            newRestServiceCode = restServiceCode;\n+        }\n+\n+        ServiceDescriptionType serviceDescription = getServiceDescriptiontype(id);\n+        serviceDescription.setUrl(url);\n+        updateServiceCodes(restServiceCode, newRestServiceCode, serviceDescription);\n+\n+        checkDuplicateServiceCodes(serviceDescription);\n+        checkDuplicateUrl(serviceDescription);\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8b1c777ee3498e7d8789dc40edb0d80eb250f7de"}, "originalPosition": 102}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODk4OTIwOQ==", "bodyText": "Duplicate endpoint check here too", "url": "https://github.com/nordic-institute/X-Road/pull/321#discussion_r368989209", "createdAt": "2020-01-21T13:08:09Z", "author": {"login": "carohauta"}, "path": "src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/service/ServiceDescriptionService.java", "diffHunk": "@@ -498,7 +528,178 @@ public ServiceDescriptionType refreshServiceDescription(Long id, boolean ignoreW\n     }\n \n     /**\n-     * Get one ServiceDescriptionType by id\n+     * Update Rest service description\n+     *\n+     * @param id\n+     * @param url\n+     * @param restServiceCode\n+     * @param newRestServiceCode\n+     * @return {@link ServiceDescriptionType}\n+     * @throws UrlAlreadyExistsException\n+     * @throws ServiceCodeAlreadyExistsException\n+     */\n+    public ServiceDescriptionType updateRestServiceDescription(Long id, String url, String restServiceCode,\n+                                                               String newRestServiceCode)\n+            throws UrlAlreadyExistsException, ServiceCodeAlreadyExistsException {\n+        verifyAuthority(\"EDIT_REST\");\n+\n+        if (newRestServiceCode == null) {\n+            newRestServiceCode = restServiceCode;\n+        }\n+\n+        ServiceDescriptionType serviceDescription = getServiceDescriptiontype(id);\n+        serviceDescription.setUrl(url);\n+        updateServiceCodes(restServiceCode, newRestServiceCode, serviceDescription);\n+\n+        checkDuplicateServiceCodes(serviceDescription);\n+        checkDuplicateUrl(serviceDescription);\n+\n+        clientRepository.saveOrUpdateAndFlush(serviceDescription.getClient());\n+        return serviceDescription;\n+    }\n+\n+    /**\n+     * Update OpenApi3 ServiceDescription\n+     *\n+     * @param id\n+     * @param url\n+     * @param restServiceCode\n+     * @param newRestServiceCode\n+     * @param ignoreWarnings\n+     * @return\n+     * @throws UrlAlreadyExistsException\n+     * @throws ServiceCodeAlreadyExistsException\n+     * @throws UnhandledWarningsException\n+     * @throws OpenApiParser.ParsingException\n+     */\n+    public ServiceDescriptionType updateOpenApi3ServiceDescription(Long id, String url, String restServiceCode,\n+            String newRestServiceCode, Boolean ignoreWarnings) throws UrlAlreadyExistsException,\n+            ServiceCodeAlreadyExistsException, UnhandledWarningsException, OpenApiParser.ParsingException {\n+\n+        verifyAuthority(\"EDIT_OPENAPI3\");\n+        ServiceDescriptionType serviceDescription = getServiceDescriptiontype(id);\n+\n+        if (newRestServiceCode == null) {\n+            newRestServiceCode = restServiceCode;\n+        }\n+\n+        updateServiceCodes(restServiceCode, newRestServiceCode, serviceDescription);\n+\n+        // Parse openapi definition and handle updating endpoints and acls\n+        if (serviceDescription.getUrl() != url) {\n+            parseOpenapi3ToServiceDescription(url, newRestServiceCode, ignoreWarnings, serviceDescription);\n+        }\n+\n+        checkDuplicateServiceCodes(serviceDescription);\n+        checkDuplicateUrl(serviceDescription);\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8b1c777ee3498e7d8789dc40edb0d80eb250f7de"}, "originalPosition": 141}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODk4OTg1Mg==", "bodyText": "Should use !....equals() instead of !=", "url": "https://github.com/nordic-institute/X-Road/pull/321#discussion_r368989852", "createdAt": "2020-01-21T13:09:46Z", "author": {"login": "carohauta"}, "path": "src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/service/ServiceDescriptionService.java", "diffHunk": "@@ -498,7 +528,178 @@ public ServiceDescriptionType refreshServiceDescription(Long id, boolean ignoreW\n     }\n \n     /**\n-     * Get one ServiceDescriptionType by id\n+     * Update Rest service description\n+     *\n+     * @param id\n+     * @param url\n+     * @param restServiceCode\n+     * @param newRestServiceCode\n+     * @return {@link ServiceDescriptionType}\n+     * @throws UrlAlreadyExistsException\n+     * @throws ServiceCodeAlreadyExistsException\n+     */\n+    public ServiceDescriptionType updateRestServiceDescription(Long id, String url, String restServiceCode,\n+                                                               String newRestServiceCode)\n+            throws UrlAlreadyExistsException, ServiceCodeAlreadyExistsException {\n+        verifyAuthority(\"EDIT_REST\");\n+\n+        if (newRestServiceCode == null) {\n+            newRestServiceCode = restServiceCode;\n+        }\n+\n+        ServiceDescriptionType serviceDescription = getServiceDescriptiontype(id);\n+        serviceDescription.setUrl(url);\n+        updateServiceCodes(restServiceCode, newRestServiceCode, serviceDescription);\n+\n+        checkDuplicateServiceCodes(serviceDescription);\n+        checkDuplicateUrl(serviceDescription);\n+\n+        clientRepository.saveOrUpdateAndFlush(serviceDescription.getClient());\n+        return serviceDescription;\n+    }\n+\n+    /**\n+     * Update OpenApi3 ServiceDescription\n+     *\n+     * @param id\n+     * @param url\n+     * @param restServiceCode\n+     * @param newRestServiceCode\n+     * @param ignoreWarnings\n+     * @return\n+     * @throws UrlAlreadyExistsException\n+     * @throws ServiceCodeAlreadyExistsException\n+     * @throws UnhandledWarningsException\n+     * @throws OpenApiParser.ParsingException\n+     */\n+    public ServiceDescriptionType updateOpenApi3ServiceDescription(Long id, String url, String restServiceCode,\n+            String newRestServiceCode, Boolean ignoreWarnings) throws UrlAlreadyExistsException,\n+            ServiceCodeAlreadyExistsException, UnhandledWarningsException, OpenApiParser.ParsingException {\n+\n+        verifyAuthority(\"EDIT_OPENAPI3\");\n+        ServiceDescriptionType serviceDescription = getServiceDescriptiontype(id);\n+\n+        if (newRestServiceCode == null) {\n+            newRestServiceCode = restServiceCode;\n+        }\n+\n+        updateServiceCodes(restServiceCode, newRestServiceCode, serviceDescription);\n+\n+        // Parse openapi definition and handle updating endpoints and acls\n+        if (serviceDescription.getUrl() != url) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8b1c777ee3498e7d8789dc40edb0d80eb250f7de"}, "originalPosition": 135}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODk5MzY0NQ==", "bodyText": "There is also noneMatch for a negated anyMatch", "url": "https://github.com/nordic-institute/X-Road/pull/321#discussion_r368993645", "createdAt": "2020-01-21T13:17:42Z", "author": {"login": "carohauta"}, "path": "src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/service/ServiceDescriptionService.java", "diffHunk": "@@ -498,7 +528,178 @@ public ServiceDescriptionType refreshServiceDescription(Long id, boolean ignoreW\n     }\n \n     /**\n-     * Get one ServiceDescriptionType by id\n+     * Update Rest service description\n+     *\n+     * @param id\n+     * @param url\n+     * @param restServiceCode\n+     * @param newRestServiceCode\n+     * @return {@link ServiceDescriptionType}\n+     * @throws UrlAlreadyExistsException\n+     * @throws ServiceCodeAlreadyExistsException\n+     */\n+    public ServiceDescriptionType updateRestServiceDescription(Long id, String url, String restServiceCode,\n+                                                               String newRestServiceCode)\n+            throws UrlAlreadyExistsException, ServiceCodeAlreadyExistsException {\n+        verifyAuthority(\"EDIT_REST\");\n+\n+        if (newRestServiceCode == null) {\n+            newRestServiceCode = restServiceCode;\n+        }\n+\n+        ServiceDescriptionType serviceDescription = getServiceDescriptiontype(id);\n+        serviceDescription.setUrl(url);\n+        updateServiceCodes(restServiceCode, newRestServiceCode, serviceDescription);\n+\n+        checkDuplicateServiceCodes(serviceDescription);\n+        checkDuplicateUrl(serviceDescription);\n+\n+        clientRepository.saveOrUpdateAndFlush(serviceDescription.getClient());\n+        return serviceDescription;\n+    }\n+\n+    /**\n+     * Update OpenApi3 ServiceDescription\n+     *\n+     * @param id\n+     * @param url\n+     * @param restServiceCode\n+     * @param newRestServiceCode\n+     * @param ignoreWarnings\n+     * @return\n+     * @throws UrlAlreadyExistsException\n+     * @throws ServiceCodeAlreadyExistsException\n+     * @throws UnhandledWarningsException\n+     * @throws OpenApiParser.ParsingException\n+     */\n+    public ServiceDescriptionType updateOpenApi3ServiceDescription(Long id, String url, String restServiceCode,\n+            String newRestServiceCode, Boolean ignoreWarnings) throws UrlAlreadyExistsException,\n+            ServiceCodeAlreadyExistsException, UnhandledWarningsException, OpenApiParser.ParsingException {\n+\n+        verifyAuthority(\"EDIT_OPENAPI3\");\n+        ServiceDescriptionType serviceDescription = getServiceDescriptiontype(id);\n+\n+        if (newRestServiceCode == null) {\n+            newRestServiceCode = restServiceCode;\n+        }\n+\n+        updateServiceCodes(restServiceCode, newRestServiceCode, serviceDescription);\n+\n+        // Parse openapi definition and handle updating endpoints and acls\n+        if (serviceDescription.getUrl() != url) {\n+            parseOpenapi3ToServiceDescription(url, newRestServiceCode, ignoreWarnings, serviceDescription);\n+        }\n+\n+        checkDuplicateServiceCodes(serviceDescription);\n+        checkDuplicateUrl(serviceDescription);\n+\n+        clientRepository.saveOrUpdateAndFlush(serviceDescription.getClient());\n+\n+        return serviceDescription;\n+    }\n+\n+    /**\n+     * Parse OpenApi3 description and update endpoints and acls in ServiceDescription accordingly\n+     *\n+     * @param url\n+     * @param serviceCode\n+     * @param ignoreWarnings\n+     * @param serviceDescription\n+     * @throws OpenApiParser.ParsingException\n+     * @throws UnhandledWarningsException\n+     */\n+    private void parseOpenapi3ToServiceDescription(String url, String serviceCode, boolean ignoreWarnings,\n+                                                   ServiceDescriptionType serviceDescription) throws\n+            OpenApiParser.ParsingException, UnhandledWarningsException {\n+        OpenApiParser.Result result = openApiParser.parse(url);\n+        if (!ignoreWarnings && result.hasWarnings()) {\n+            WarningDeviation openapiParserWarnings = new WarningDeviation(\"OpenapiParserWarnings\",\n+                    result.getWarnings());\n+            throw new UnhandledWarningsException(Arrays.asList(openapiParserWarnings));\n+        }\n+\n+        // Update url\n+        updateServiceDescriptionUrl(serviceDescription, serviceCode, url);\n+\n+        // Create endpoints from parsed results\n+        List<EndpointType> parsedEndpoints = result.getOperations().stream()\n+                .map(operation -> new EndpointType(serviceCode, operation.getMethod(), operation.getPath(),\n+                        true))\n+                .collect(Collectors.toList());\n+        parsedEndpoints.add(new EndpointType(serviceCode, \"*\", \"**\", true));\n+\n+        // Change existing, manually added, endpoints to generated if they're found from parsedEndpoints\n+        serviceDescription.getClient().getEndpoint().forEach(ep -> {\n+            if (parsedEndpoints.stream().anyMatch(parsedEp -> parsedEp.isEquivalent(ep))) {\n+                ep.setGenerated(true);\n+            }\n+        });\n+\n+        // Remove ACLs that don't exist in the parsed endpoints list\n+        serviceDescription.getClient().getAcl().removeIf(acl ->\n+                acl.getEndpoint().isGenerated()\n+                        && !parsedEndpoints.stream().anyMatch(endpoint -> acl.getEndpoint().isEquivalent(endpoint)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8b1c777ee3498e7d8789dc40edb0d80eb250f7de"}, "originalPosition": 187}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7f3f4c6c1ba8c720aea1dba0a54bd8fea182aff4", "author": {"user": {"login": "TJaakkola", "name": "Tapio Jaakkola"}}, "url": "https://github.com/nordic-institute/X-Road/commit/7f3f4c6c1ba8c720aea1dba0a54bd8fea182aff4", "committedDate": "2020-01-22T12:09:12Z", "message": "XRDDEV-796: Fixes according to pull request comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "89e6cd4565412e23fda7546fb33083903c0ed4f6", "author": {"user": {"login": "TJaakkola", "name": "Tapio Jaakkola"}}, "url": "https://github.com/nordic-institute/X-Road/commit/89e6cd4565412e23fda7546fb33083903c0ed4f6", "committedDate": "2020-01-23T08:23:07Z", "message": "Merge branch 'develop' into XRDDEV-796"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "20481a9ac27972ea658f90564e71c27599335e50", "author": {"user": {"login": "TJaakkola", "name": "Tapio Jaakkola"}}, "url": "https://github.com/nordic-institute/X-Road/commit/20481a9ac27972ea658f90564e71c27599335e50", "committedDate": "2020-01-23T13:53:23Z", "message": "XRDDEV-796: Fixes according to pull request comments\n\nFix throwing http error code 500 when duplicate REST servicedescription is added\nFix updating url to both servicedescription and service\nThrow WrongServiceDescriptionTypeException if unexpected type is present"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "251e39c37f7a4f03ae3134b4180fb4663161169b", "author": {"user": {"login": "TJaakkola", "name": "Tapio Jaakkola"}}, "url": "https://github.com/nordic-institute/X-Road/commit/251e39c37f7a4f03ae3134b4180fb4663161169b", "committedDate": "2020-01-24T07:30:30Z", "message": "XRDDEV-796: Fix parsing url while editing openapi3 description & typo in error message"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "706a161e64190cc091858abb722c7da3fd808e42", "author": {"user": {"login": "TJaakkola", "name": "Tapio Jaakkola"}}, "url": "https://github.com/nordic-institute/X-Road/commit/706a161e64190cc091858abb722c7da3fd808e42", "committedDate": "2020-01-24T12:30:19Z", "message": "XRDDEV-796: Refactor update ServiceDescription to a more simpler form"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d33594800da6cda9e77cd1ef460d134cdcec1735", "author": {"user": {"login": "TJaakkola", "name": "Tapio Jaakkola"}}, "url": "https://github.com/nordic-institute/X-Road/commit/d33594800da6cda9e77cd1ef460d134cdcec1735", "committedDate": "2020-01-24T12:45:34Z", "message": "XRDDEV-796: Remove accidentally committed file"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ3OTc0Mzkz", "url": "https://github.com/nordic-institute/X-Road/pull/321#pullrequestreview-347974393", "createdAt": "2020-01-24T14:07:40Z", "commit": {"oid": "d33594800da6cda9e77cd1ef460d134cdcec1735"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4270, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}