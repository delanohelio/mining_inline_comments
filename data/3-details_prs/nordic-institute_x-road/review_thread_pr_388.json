{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgwMDU5MDI4", "number": 388, "reviewThreads": {"totalCount": 16, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxMDowNzoyMlrODjZxcQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQwODozODoyNVrODju-DQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4NDQ5MDA5OnYy", "diffSide": "RIGHT", "path": "src/proxy-ui-api/frontend/src/locales/en.json", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxMDowNzoyMlrOFvMMcA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxMzoyMTo1OVrOFvR70A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTAyNzE4NA==", "bodyText": "Is there a reason to use both camelCase and snake_case in the i18n keys?", "url": "https://github.com/nordic-institute/X-Road/pull/388#discussion_r385027184", "createdAt": "2020-02-27T10:07:22Z", "author": {"login": "carohauta"}, "path": "src/proxy-ui-api/frontend/src/locales/en.json", "diffHunk": "@@ -171,7 +171,18 @@\n   \"endpoints\": {\n     \"addEndpoint\": \"Add Endpoint\",\n     \"path\": \"Path\",\n-    \"httpRequestMethod\": \"HTTP Request Method\"\n+    \"httpRequestMethod\": \"HTTP Request Method\",\n+    \"endpoint_help_1\": \"Paths is relative to the API base path, e.g. '/pets'. The asterisk (*) can be used as a wildcard\",\n+    \"endpoint_help_2\": \"* = match one path segment.\",\n+    \"endpoint_help_3\": \"** = match zero or more segments, e.g. '/pets/**'.\",\n+    \"endpoint_help_4\": \"Path parameters must be replaced with an asterisk, e.g. '/pets/{id}/images' => '/pets/*/images'.\",\n+    \"saveNewEndpointError\": \"Error saving new endpoint\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c30e19b821240c35705101e92f08635563eb9520"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTEyMTIzMg==", "bodyText": "No, these were copy pasted from the old ui and left accidentally like this. Fixed.", "url": "https://github.com/nordic-institute/X-Road/pull/388#discussion_r385121232", "createdAt": "2020-02-27T13:21:59Z", "author": {"login": "TJaakkola"}, "path": "src/proxy-ui-api/frontend/src/locales/en.json", "diffHunk": "@@ -171,7 +171,18 @@\n   \"endpoints\": {\n     \"addEndpoint\": \"Add Endpoint\",\n     \"path\": \"Path\",\n-    \"httpRequestMethod\": \"HTTP Request Method\"\n+    \"httpRequestMethod\": \"HTTP Request Method\",\n+    \"endpoint_help_1\": \"Paths is relative to the API base path, e.g. '/pets'. The asterisk (*) can be used as a wildcard\",\n+    \"endpoint_help_2\": \"* = match one path segment.\",\n+    \"endpoint_help_3\": \"** = match zero or more segments, e.g. '/pets/**'.\",\n+    \"endpoint_help_4\": \"Path parameters must be replaced with an asterisk, e.g. '/pets/{id}/images' => '/pets/*/images'.\",\n+    \"saveNewEndpointError\": \"Error saving new endpoint\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTAyNzE4NA=="}, "originalCommit": {"oid": "c30e19b821240c35705101e92f08635563eb9520"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4NDY2NTcyOnYy", "diffSide": "RIGHT", "path": "src/proxy-ui-api/frontend/src/views/Clients/Services/Services.vue", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxMDo1Nzo0NFrOFvN3hQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxMzoyMjowNlrOFvR8Eg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTA1NDU5Nw==", "bodyText": "Linter error Missing trailing comma", "url": "https://github.com/nordic-institute/X-Road/pull/388#discussion_r385054597", "createdAt": "2020-02-27T10:57:44Z", "author": {"login": "carohauta"}, "path": "src/proxy-ui-api/frontend/src/views/Clients/Services/Services.vue", "diffHunk": "@@ -270,10 +268,11 @@ export default Vue.extend({\n         params: { id: desc.id },\n       });\n     },\n-    serviceClick(service: any): void {\n+    serviceClick(serviceDescription: ServiceDescription, service: Service): void {\n       this.$router.push({\n         name: RouteName.Service,\n         params: { serviceId: service.id, clientId: this.id },\n+        query: { descriptionType: serviceDescription.type }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c30e19b821240c35705101e92f08635563eb9520"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTEyMTI5OA==", "bodyText": "Fixed.", "url": "https://github.com/nordic-institute/X-Road/pull/388#discussion_r385121298", "createdAt": "2020-02-27T13:22:06Z", "author": {"login": "TJaakkola"}, "path": "src/proxy-ui-api/frontend/src/views/Clients/Services/Services.vue", "diffHunk": "@@ -270,10 +268,11 @@ export default Vue.extend({\n         params: { id: desc.id },\n       });\n     },\n-    serviceClick(service: any): void {\n+    serviceClick(serviceDescription: ServiceDescription, service: Service): void {\n       this.$router.push({\n         name: RouteName.Service,\n         params: { serviceId: service.id, clientId: this.id },\n+        query: { descriptionType: serviceDescription.type }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTA1NDU5Nw=="}, "originalCommit": {"oid": "c30e19b821240c35705101e92f08635563eb9520"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4NDY4MzU3OnYy", "diffSide": "RIGHT", "path": "src/proxy-ui-api/frontend/src/views/Service/Endpoints/AddEndpointDialog.vue", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxMTowMzo0MlrOFvOCtg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxMTowMzo0MlrOFvOCtg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTA1NzQ2Mg==", "bodyText": "Would it make sense to add the original 10px margin in front of all the elements on the right hand side column of this dialog? Just trying to figure out a way to minimize the use of !important keyword.", "url": "https://github.com/nordic-institute/X-Road/pull/388#discussion_r385057462", "createdAt": "2020-02-27T11:03:42Z", "author": {"login": "carohauta"}, "path": "src/proxy-ui-api/frontend/src/views/Service/Endpoints/AddEndpointDialog.vue", "diffHunk": "@@ -0,0 +1,119 @@\n+<template>\n+  <simpleDialog\n+    :dialog=\"dialog\"\n+    :width=\"750\"\n+    title=\"endpoints.addEndpoint\"\n+    @save=\"save\"\n+    @cancel=\"cancel\"\n+    :disableSave=\"!isValid\"\n+  >\n+    <div slot=\"content\">\n+      <ValidationObserver ref=\"form\" v-slot=\"{ validate, invalid }\">\n+\n+        <div class=\"dlg-edit-row\">\n+          <div class=\"dlg-row-title long-row-title\">{{$t('endpoints.httpRequestMethod')}}</div>\n+            <v-select data-test=\"endpoint-method\" v-model=\"method\" :items=\"methods\" />\n+        </div>\n+\n+        <div class=\"dlg-edit-row\">\n+          <div class=\"dlg-row-title long-row-title\">{{$t('endpoints.path')}}</div>\n+          <ValidationProvider\n+            rules=\"required\"\n+            ref=\"path\"\n+            name=\"path\"\n+            class=\"validation-provider dlg-row-input\"\n+            v-slot=\"{ errors }\">\n+            <v-text-field\n+              v-model=\"path\"\n+              single-line\n+              :error-messages=\"errors\"\n+              name=\"path\"\n+              data-test=\"endpoint-path\"\n+            ></v-text-field>\n+          </ValidationProvider>\n+        </div>\n+\n+        <div class=\"dlg-edit-row\">\n+          <div class=\"dlg-row-title long-row-title\"></div>\n+          <div>\n+            <div>{{$t('endpoints.endpoint_help_1')}}</div>\n+            <div>{{$t('endpoints.endpoint_help_2')}}</div>\n+            <div>{{$t('endpoints.endpoint_help_3')}}</div>\n+            <div>{{$t('endpoints.endpoint_help_4')}}</div>\n+          </div>\n+        </div>\n+\n+      </ValidationObserver>\n+    </div>\n+\n+  </simpleDialog>\n+</template>\n+\n+<script lang=\"ts\">\n+  import Vue from 'vue';\n+  import {ValidationObserver, ValidationProvider} from 'vee-validate';\n+  import SimpleDialog from '@/components/ui/SimpleDialog.vue';\n+\n+  export default Vue.extend({\n+    components: {\n+      SimpleDialog, ValidationProvider, ValidationObserver,\n+    },\n+    props: {\n+      dialog: {\n+        type: Boolean,\n+        required: true,\n+      },\n+    },\n+    data(): any {\n+      return {\n+        methods: [\n+          { text: this.$t('endpoints.all'), value: '*' },\n+          { text: 'GET', value: 'GET' },\n+          { text: 'POST', value: 'POST' },\n+          { text: 'PUT', value: 'PUT' },\n+          { text: 'PATCH', value: 'PATCH' },\n+          { text: 'DELETE', value: 'DELETE' },\n+          { text: 'HEAD', value: 'HEAD' },\n+          { text: 'OPTIONS', value: 'OPTIONS' },\n+          { text: 'TRACE', value: 'TRACE' },\n+        ],\n+        method: '*',\n+        path: '/',\n+      };\n+    },\n+    computed: {\n+      isValid(): boolean {\n+        return this.path.length >= 1;\n+      },\n+    },\n+    methods: {\n+      save(): void {\n+        this.$emit('save', this.method, this.path);\n+        this.clear();\n+      },\n+      cancel(): void {\n+        this.$emit('cancel');\n+        this.clear();\n+      },\n+      clear(): void {\n+        this.path = '/';\n+        this.method = '*';\n+        (this.$refs.form as InstanceType<typeof ValidationObserver>).reset();\n+      },\n+    },\n+  });\n+\n+</script>\n+\n+<style lang=\"scss\" scoped>\n+@import '../../../assets/dialogs';\n+\n+.long-row-title {\n+  min-width: 170px !important;\n+}\n+\n+.dlg-row-input {\n+  margin-left: 0px !important;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c30e19b821240c35705101e92f08635563eb9520"}, "originalPosition": 116}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4NDg0NzMwOnYy", "diffSide": "RIGHT", "path": "src/proxy-ui-api/frontend/src/views/Service/Service.vue", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxMTo1OTo1N1rOFvPlQA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxNDoxMTozNVrOFvTqTQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTA4MjY4OA==", "bodyText": "ServiceDescription types could maybe be inside an enum", "url": "https://github.com/nordic-institute/X-Road/pull/388#discussion_r385082688", "createdAt": "2020-02-27T11:59:57Z", "author": {"login": "carohauta"}, "path": "src/proxy-ui-api/frontend/src/views/Service/Service.vue", "diffHunk": "@@ -2,25 +2,13 @@\n     <div class=\"xrd-tab-max-width\">\n         <subViewTitle :title=\"service.service_code\" @close=\"close\" class=\"sub-view-title-spacing\" />\n \n-        <div class=\"wrap-right delete-button-spacing\">\n-            <v-btn\n-                color=\"primary\"\n-                @click=\"removeService\"\n-                outlined\n-                rounded\n-                class=\"rounded-button elevation-0 rest-button\"\n-                data-test=\"service-delete\"\n-            >{{$t('action.delete')}}\n-            </v-btn>\n-        </div>\n-\n-        <v-tabs v-model=\"tab\" class=\"xrd-tabs\" color=\"secondary\" grow slider-size=\"4\" >\n+        <v-tabs v-if=\"$route.query.descriptionType !== 'WSDL'\" v-model=\"tab\" class=\"xrd-tabs\" color=\"secondary\" grow slider-size=\"4\" >", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c30e19b821240c35705101e92f08635563eb9520"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTE0OTUxNw==", "bodyText": "I add an enum for this but it's a shame our typescript types generator library doesn't support enums horiuchi/dtsgenerator#335 as now there is union type declaration and enum for the same thing (union type is not used at all).", "url": "https://github.com/nordic-institute/X-Road/pull/388#discussion_r385149517", "createdAt": "2020-02-27T14:11:35Z", "author": {"login": "TJaakkola"}, "path": "src/proxy-ui-api/frontend/src/views/Service/Service.vue", "diffHunk": "@@ -2,25 +2,13 @@\n     <div class=\"xrd-tab-max-width\">\n         <subViewTitle :title=\"service.service_code\" @close=\"close\" class=\"sub-view-title-spacing\" />\n \n-        <div class=\"wrap-right delete-button-spacing\">\n-            <v-btn\n-                color=\"primary\"\n-                @click=\"removeService\"\n-                outlined\n-                rounded\n-                class=\"rounded-button elevation-0 rest-button\"\n-                data-test=\"service-delete\"\n-            >{{$t('action.delete')}}\n-            </v-btn>\n-        </div>\n-\n-        <v-tabs v-model=\"tab\" class=\"xrd-tabs\" color=\"secondary\" grow slider-size=\"4\" >\n+        <v-tabs v-if=\"$route.query.descriptionType !== 'WSDL'\" v-model=\"tab\" class=\"xrd-tabs\" color=\"secondary\" grow slider-size=\"4\" >", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTA4MjY4OA=="}, "originalCommit": {"oid": "c30e19b821240c35705101e92f08635563eb9520"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4NDg3MTQ5OnYy", "diffSide": "RIGHT", "path": "src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/openapi/EndpointsApiController.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxMjowODoxMFrOFvPz8w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxNDoxNTo1M1rOFvT1hw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTA4NjQ1MQ==", "bodyText": "This should probably be HttpStatus.CREATED and also set the Location header (ApiUtil#createCreatedResponse)", "url": "https://github.com/nordic-institute/X-Road/pull/388#discussion_r385086451", "createdAt": "2020-02-27T12:08:10Z", "author": {"login": "carohauta"}, "path": "src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/openapi/EndpointsApiController.java", "diffHunk": "@@ -0,0 +1,101 @@\n+/**\n+ * The MIT License\n+ * Copyright (c) 2018 Estonian Information System Authority (RIA),\n+ * Nordic Institute for Interoperability Solutions (NIIS), Population Register Centre (VRK)\n+ * Copyright (c) 2015-2017 Estonian Information System Authority (RIA), Population Register Centre (VRK)\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package org.niis.xroad.restapi.openapi;\n+\n+import lombok.extern.slf4j.Slf4j;\n+import org.niis.xroad.restapi.converter.EndpointConverter;\n+import org.niis.xroad.restapi.openapi.model.Endpoint;\n+import org.niis.xroad.restapi.service.ClientNotFoundException;\n+import org.niis.xroad.restapi.service.EndpointService;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.security.access.prepost.PreAuthorize;\n+import org.springframework.stereotype.Controller;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+\n+/**\n+ * Endpoints api\n+ */\n+@Controller\n+@RequestMapping(\"/api\")\n+@Slf4j\n+@PreAuthorize(\"denyAll\")\n+public class EndpointsApiController implements EndpointsApi {\n+\n+    private final EndpointService endpointService;\n+    private final EndpointConverter endpointConverter;\n+\n+    private static final String NOT_FOUND_ERROR_MSG = \"Endpoint not found with id\";\n+\n+    @Autowired\n+    public EndpointsApiController(\n+            EndpointService endpointService,\n+            EndpointConverter endpointConverter) {\n+        this.endpointService = endpointService;\n+        this.endpointConverter = endpointConverter;\n+    }\n+\n+    @Override\n+    @PreAuthorize(\"hasAuthority('VIEW_ENDPOINT')\")\n+    public ResponseEntity<Endpoint> getEndpoint(String id) {\n+        Endpoint endpoint;\n+        try {\n+            endpoint = endpointConverter.convert(endpointService.getEndpoint(id));\n+        } catch (EndpointService.EndpointNotFoundException e) {\n+            throw new ResourceNotFoundException(NOT_FOUND_ERROR_MSG + \" \" + id);\n+        }\n+        return new ResponseEntity(endpoint, HttpStatus.ACCEPTED);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c30e19b821240c35705101e92f08635563eb9520"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTE1MjM5MQ==", "bodyText": "Fixed", "url": "https://github.com/nordic-institute/X-Road/pull/388#discussion_r385152391", "createdAt": "2020-02-27T14:15:53Z", "author": {"login": "TJaakkola"}, "path": "src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/openapi/EndpointsApiController.java", "diffHunk": "@@ -0,0 +1,101 @@\n+/**\n+ * The MIT License\n+ * Copyright (c) 2018 Estonian Information System Authority (RIA),\n+ * Nordic Institute for Interoperability Solutions (NIIS), Population Register Centre (VRK)\n+ * Copyright (c) 2015-2017 Estonian Information System Authority (RIA), Population Register Centre (VRK)\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package org.niis.xroad.restapi.openapi;\n+\n+import lombok.extern.slf4j.Slf4j;\n+import org.niis.xroad.restapi.converter.EndpointConverter;\n+import org.niis.xroad.restapi.openapi.model.Endpoint;\n+import org.niis.xroad.restapi.service.ClientNotFoundException;\n+import org.niis.xroad.restapi.service.EndpointService;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.security.access.prepost.PreAuthorize;\n+import org.springframework.stereotype.Controller;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+\n+/**\n+ * Endpoints api\n+ */\n+@Controller\n+@RequestMapping(\"/api\")\n+@Slf4j\n+@PreAuthorize(\"denyAll\")\n+public class EndpointsApiController implements EndpointsApi {\n+\n+    private final EndpointService endpointService;\n+    private final EndpointConverter endpointConverter;\n+\n+    private static final String NOT_FOUND_ERROR_MSG = \"Endpoint not found with id\";\n+\n+    @Autowired\n+    public EndpointsApiController(\n+            EndpointService endpointService,\n+            EndpointConverter endpointConverter) {\n+        this.endpointService = endpointService;\n+        this.endpointConverter = endpointConverter;\n+    }\n+\n+    @Override\n+    @PreAuthorize(\"hasAuthority('VIEW_ENDPOINT')\")\n+    public ResponseEntity<Endpoint> getEndpoint(String id) {\n+        Endpoint endpoint;\n+        try {\n+            endpoint = endpointConverter.convert(endpointService.getEndpoint(id));\n+        } catch (EndpointService.EndpointNotFoundException e) {\n+            throw new ResourceNotFoundException(NOT_FOUND_ERROR_MSG + \" \" + id);\n+        }\n+        return new ResponseEntity(endpoint, HttpStatus.ACCEPTED);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTA4NjQ1MQ=="}, "originalCommit": {"oid": "c30e19b821240c35705101e92f08635563eb9520"}, "originalPosition": 70}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4NDg3Mjg4OnYy", "diffSide": "RIGHT", "path": "src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/openapi/EndpointsApiController.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxMjowODozM1rOFvP0ug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxMjowODozM1rOFvP0ug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTA4NjY1MA==", "bodyText": "This should probably be HttpStatus.OK", "url": "https://github.com/nordic-institute/X-Road/pull/388#discussion_r385086650", "createdAt": "2020-02-27T12:08:33Z", "author": {"login": "carohauta"}, "path": "src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/openapi/EndpointsApiController.java", "diffHunk": "@@ -0,0 +1,101 @@\n+/**\n+ * The MIT License\n+ * Copyright (c) 2018 Estonian Information System Authority (RIA),\n+ * Nordic Institute for Interoperability Solutions (NIIS), Population Register Centre (VRK)\n+ * Copyright (c) 2015-2017 Estonian Information System Authority (RIA), Population Register Centre (VRK)\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package org.niis.xroad.restapi.openapi;\n+\n+import lombok.extern.slf4j.Slf4j;\n+import org.niis.xroad.restapi.converter.EndpointConverter;\n+import org.niis.xroad.restapi.openapi.model.Endpoint;\n+import org.niis.xroad.restapi.service.ClientNotFoundException;\n+import org.niis.xroad.restapi.service.EndpointService;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.security.access.prepost.PreAuthorize;\n+import org.springframework.stereotype.Controller;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+\n+/**\n+ * Endpoints api\n+ */\n+@Controller\n+@RequestMapping(\"/api\")\n+@Slf4j\n+@PreAuthorize(\"denyAll\")\n+public class EndpointsApiController implements EndpointsApi {\n+\n+    private final EndpointService endpointService;\n+    private final EndpointConverter endpointConverter;\n+\n+    private static final String NOT_FOUND_ERROR_MSG = \"Endpoint not found with id\";\n+\n+    @Autowired\n+    public EndpointsApiController(\n+            EndpointService endpointService,\n+            EndpointConverter endpointConverter) {\n+        this.endpointService = endpointService;\n+        this.endpointConverter = endpointConverter;\n+    }\n+\n+    @Override\n+    @PreAuthorize(\"hasAuthority('VIEW_ENDPOINT')\")\n+    public ResponseEntity<Endpoint> getEndpoint(String id) {\n+        Endpoint endpoint;\n+        try {\n+            endpoint = endpointConverter.convert(endpointService.getEndpoint(id));\n+        } catch (EndpointService.EndpointNotFoundException e) {\n+            throw new ResourceNotFoundException(NOT_FOUND_ERROR_MSG + \" \" + id);\n+        }\n+        return new ResponseEntity(endpoint, HttpStatus.ACCEPTED);\n+    }\n+\n+    @Override\n+    @PreAuthorize(\"hasAuthority('DELETE_ENDPOINT')\")\n+    public ResponseEntity<Void> deleteEndpoint(String id) {\n+        try {\n+            endpointService.deleteEndpoint(id);\n+        } catch (EndpointService.EndpointNotFoundException e) {\n+            throw new ResourceNotFoundException(NOT_FOUND_ERROR_MSG + \" \" + id);\n+        } catch (ClientNotFoundException e) {\n+            throw new ConflictException(\"Client not found for the given endpoint with id: \" + id);\n+        }\n+        return new ResponseEntity<>(HttpStatus.NO_CONTENT);\n+    }\n+\n+    @Override\n+    @PreAuthorize(\"hasAuthority('EDIT_OPENAPI3_ENDPOINT')\")\n+    public ResponseEntity<Endpoint> updateEndpoint(String id, Endpoint endpoint) {\n+        Endpoint ep;\n+        try {\n+            ep = endpointConverter.convert(endpointService.updateEndpoint(id, endpoint));\n+        } catch (EndpointService.EndpointNotFoundException e) {\n+            throw new ResourceNotFoundException(NOT_FOUND_ERROR_MSG + \" \" + id);\n+        } catch (EndpointService.IllegalGeneratedEndpointUpdateException e) {\n+            throw new ConflictException(\"Updating is not allowed for generated endpoint \" + id);\n+        }\n+\n+        return new ResponseEntity<>(ep, HttpStatus.ACCEPTED);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c30e19b821240c35705101e92f08635563eb9520"}, "originalPosition": 98}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4NDg3NzE0OnYy", "diffSide": "RIGHT", "path": "src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/openapi/ServicesApiController.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxMjowOTo1NlrOFvP3PA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxMjowOTo1NlrOFvP3PA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTA4NzI5Mg==", "bodyText": "Should also set the Location header. Use ApiUtil#createCreatedResponse method", "url": "https://github.com/nordic-institute/X-Road/pull/388#discussion_r385087292", "createdAt": "2020-02-27T12:09:56Z", "author": {"login": "carohauta"}, "path": "src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/openapi/ServicesApiController.java", "diffHunk": "@@ -209,4 +216,24 @@ private ServiceType getServiceType(String id) {\n         }\n         return hasNumericId && isLocalGroup;\n     };\n+\n+    @Override\n+    @PreAuthorize(\"hasAuthority('ADD_OPENAPI3_ENDPOINT')\")\n+    public ResponseEntity<Endpoint> addEndpoint(String id, Endpoint endpoint) {\n+        ServiceType serviceType = getServiceType(id);\n+\n+        if (endpoint.getId() != null) {\n+            throw new BadRequestException(\"Passing id for endpoint while creating it is not allowed\");\n+        }\n+        Endpoint ep;\n+        try {\n+            ep = endpointConverter.convert(serviceService.addEndpoint(serviceType,\n+                    endpoint.getMethod(), endpoint.getPath()));\n+        } catch (EndpointAlreadyExistsException e) {\n+            throw new ConflictException(e);\n+        } catch (ServiceDescriptionService.WrongServiceDescriptionTypeException e) {\n+            throw new BadRequestException(e);\n+        }\n+        return new ResponseEntity<>(ep, HttpStatus.CREATED);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c30e19b821240c35705101e92f08635563eb9520"}, "originalPosition": 70}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4NDkwMDUzOnYy", "diffSide": "RIGHT", "path": "src/proxy-ui-api/frontend/src/views/Service/Endpoints/EndpointDetails.vue", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxMjoxNzo1OVrOFvQFTQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxMjoxNzo1OVrOFvQFTQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTA5MDg5Mw==", "bodyText": "Save method is not declared -> does not do anything", "url": "https://github.com/nordic-institute/X-Road/pull/388#discussion_r385090893", "createdAt": "2020-02-27T12:17:59Z", "author": {"login": "carohauta"}, "path": "src/proxy-ui-api/frontend/src/views/Service/Endpoints/EndpointDetails.vue", "diffHunk": "@@ -0,0 +1,199 @@\n+<template>\n+  <div class=\"xrd-tab-max-width\">\n+    <div>\n+      <subViewTitle\n+        :title=\"$t('endpoints.details')\"\n+        @close=\"close\"\n+      />\n+      <div class=\"delete-wrap\">\n+        <large-button\n+          v-if=\"showDelete\"\n+          @click=\"showDeletePopup()\"\n+          outlined\n+          data-test=\"delete-endpoint\"\n+        >{{$t('action.delete')}}\n+        </large-button>\n+      </div>\n+    </div>\n+\n+    <ValidationObserver ref=\"form\" v-slot=\"{ validate, invalid }\">\n+\n+      <div class=\"dlg-edit-row\">\n+        <div class=\"dlg-row-title long-row-title\">{{$t('endpoints.httpRequestMethod')}}</div>\n+        <v-select class=\"dlg-row-input\" @input=\"touched = true\" data-test=\"endpoint-method\" v-model=\"endpoint.method\" :items=\"methods\"/>\n+      </div>\n+\n+      <div class=\"dlg-edit-row\">\n+        <div class=\"dlg-row-title long-row-title\">{{$t('endpoints.path')}}</div>\n+        <ValidationProvider\n+          rules=\"required\"\n+          ref=\"path\"\n+          name=\"path\"\n+          class=\"validation-provider dlg-row-input\"\n+          v-slot=\"{ errors }\">\n+          <v-text-field\n+            v-model=\"endpoint.path\"\n+            single-line\n+            :error-messages=\"errors\"\n+            name=\"path\"\n+            data-test=\"endpoint-path\"\n+            @input=\"touched = true\"\n+          ></v-text-field>\n+        </ValidationProvider>\n+      </div>\n+\n+      <div class=\"dlg-edit-row helper-text\">\n+        <div class=\"dlg-row-title long-row-title\"></div>\n+        <div>\n+          <div>{{$t('endpoints.endpoint_help_1')}}</div>\n+          <div>{{$t('endpoints.endpoint_help_2')}}</div>\n+          <div>{{$t('endpoints.endpoint_help_3')}}</div>\n+          <div>{{$t('endpoints.endpoint_help_4')}}</div>\n+        </div>\n+      </div>\n+\n+      <v-card flat>\n+        <div class=\"footer-button-wrap\">\n+          <large-button @click=\"close()\" outlined>{{$t('action.cancel')}}</large-button>\n+          <large-button\n+            class=\"save-button\"\n+            :loading=\"saveBusy\"\n+            @click=\"save()\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c30e19b821240c35705101e92f08635563eb9520"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4NDkxNjYxOnYy", "diffSide": "RIGHT", "path": "src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/service/ServiceService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxMjoyMzozMFrOFvQOyQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxMjoyMzozMFrOFvQOyQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTA5MzMyMQ==", "bodyText": "The method needs to be validated. Allowed values could probably be declared in the API definition but I don't think OPENAPI3 allows * as a key. One possibility would be to use the word ALL instead of * in the API definition and create an enum there. If nothing works then the validation (or enum mapping) should at least be done as close to the API as possible (maybe in the controller layer)", "url": "https://github.com/nordic-institute/X-Road/pull/388#discussion_r385093321", "createdAt": "2020-02-27T12:23:30Z", "author": {"login": "carohauta"}, "path": "src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/service/ServiceService.java", "diffHunk": "@@ -159,4 +163,35 @@ public ServiceType updateService(ClientId clientId, String fullServiceCode,\n         return serviceType;\n     }\n \n+    /**\n+     * Add new endpoint to a service\n+     *\n+     * @param serviceType                                                       service where endpoint is added\n+     * @param method                                                            method\n+     * @param path                                                              path\n+     * @return\n+     * @throws EndpointAlreadyExistsException                                   equivalent endpoint already exists for\n+     *                                                                          this client\n+     * @throws ServiceDescriptionService.WrongServiceDescriptionTypeException   if trying to add endpoint to a WSDL\n+     */\n+    public EndpointType addEndpoint(ServiceType serviceType, String method, String path)\n+            throws EndpointAlreadyExistsException, ServiceDescriptionService.WrongServiceDescriptionTypeException {\n+        verifyAuthority(\"ADD_OPENAPI3_ENDPOINT\");\n+\n+        if (serviceType.getServiceDescription().getType().equals(DescriptionType.WSDL)) {\n+            throw new ServiceDescriptionService.WrongServiceDescriptionTypeException(\"Endpoint can't be added to a \"\n+                    + \"WSDL type of Service Description\");\n+        }\n+\n+        EndpointType endpointType = new EndpointType(serviceType.getServiceCode(), method, path, false);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c30e19b821240c35705101e92f08635563eb9520"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4NDk0NTI2OnYy", "diffSide": "RIGHT", "path": "src/proxy-ui-api/src/main/resources/openapi-definition.yaml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxMjozMzoxNVrOFvQftg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxMjozMzoxNVrOFvQftg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTA5NzY1NA==", "bodyText": "As already commented on the controller method, this should be 200", "url": "https://github.com/nordic-institute/X-Road/pull/388#discussion_r385097654", "createdAt": "2020-02-27T12:33:15Z", "author": {"login": "carohauta"}, "path": "src/proxy-ui-api/src/main/resources/openapi-definition.yaml", "diffHunk": "@@ -2383,6 +2427,111 @@ paths:\n           description: resource requested does not exists\n         '500':\n           description: internal server error\n+  /endpoints/{id}:\n+    get:\n+      tags:\n+        - security server\n+      operationId: getEndpoint\n+      description: Administrator fetches an endpoint\n+      parameters:\n+        - in: path\n+          name: id\n+          description: id of the endpoint\n+          schema:\n+            type: string\n+            example: 102\n+            format: text\n+            minLength: 1\n+            maxLength: 255\n+      responses:\n+        '200':\n+          description: endpoint\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/Endpoint'\n+        '400':\n+          description: request was invalid\n+        '401':\n+          description: authentication credentials are missing\n+        '403':\n+          description: request has been refused\n+        '404':\n+          description: resource requested does not exists\n+        '406':\n+          description: request specified an invalid format\n+        '500':\n+          description: internal server error\n+    put:\n+      tags:\n+        - security server\n+      operationId: updateEndpoint\n+      description: Administrator updates an endpoint\n+      parameters:\n+        - in: path\n+          name: id\n+          description: id of the endpoint\n+          schema:\n+            type: string\n+            example: 102\n+            format: text\n+            minLength: 1\n+            maxLength: 255\n+      requestBody:\n+        content:\n+          application/json:\n+            schema:\n+              $ref: '#/components/schemas/Endpoint'\n+      responses:\n+        '202':", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c30e19b821240c35705101e92f08635563eb9520"}, "originalPosition": 111}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4NDk0OTQwOnYy", "diffSide": "RIGHT", "path": "src/proxy-ui-api/src/main/resources/openapi-definition.yaml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxMjozNDo0MFrOFvQiKg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxMjozNDo0MFrOFvQiKg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTA5ODI4Mg==", "bodyText": "Remember to bump the version of the API definition", "url": "https://github.com/nordic-institute/X-Road/pull/388#discussion_r385098282", "createdAt": "2020-02-27T12:34:40Z", "author": {"login": "carohauta"}, "path": "src/proxy-ui-api/src/main/resources/openapi-definition.yaml", "diffHunk": "@@ -2261,6 +2261,50 @@ paths:\n           description: request specified an invalid format", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c30e19b821240c35705101e92f08635563eb9520"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4NDk1OTQ2OnYy", "diffSide": "RIGHT", "path": "src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/service/EndpointService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxMjozODowMlrOFvQoTw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxMjozODowMlrOFvQoTw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTA5OTg1NQ==", "bodyText": "This throws ResourceNotFoundException, which is of the type OpenApiException, so the parsing should be done already in the controller layer.", "url": "https://github.com/nordic-institute/X-Road/pull/388#discussion_r385099855", "createdAt": "2020-02-27T12:38:02Z", "author": {"login": "carohauta"}, "path": "src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/service/EndpointService.java", "diffHunk": "@@ -0,0 +1,144 @@\n+/**\n+ * The MIT License\n+ * Copyright (c) 2018 Estonian Information System Authority (RIA),\n+ * Nordic Institute for Interoperability Solutions (NIIS), Population Register Centre (VRK)\n+ * Copyright (c) 2015-2017 Estonian Information System Authority (RIA), Population Register Centre (VRK)\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package org.niis.xroad.restapi.service;\n+\n+import ee.ria.xroad.common.conf.serverconf.model.ClientType;\n+import ee.ria.xroad.common.conf.serverconf.model.EndpointType;\n+\n+import org.niis.xroad.restapi.exceptions.ErrorDeviation;\n+import org.niis.xroad.restapi.openapi.model.Endpoint;\n+import org.niis.xroad.restapi.repository.ClientRepository;\n+import org.niis.xroad.restapi.repository.EndpointRepository;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.security.access.prepost.PreAuthorize;\n+import org.springframework.stereotype.Service;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+import static org.niis.xroad.restapi.service.SecurityHelper.verifyAuthority;\n+import static org.niis.xroad.restapi.util.FormatUtils.parseLongIdOrThrowNotFound;\n+\n+@Service\n+@Transactional\n+@PreAuthorize(\"isAuthenticated()\")\n+public class EndpointService {\n+\n+    private final ClientRepository clientRepository;\n+    private final EndpointRepository endpointRepository;\n+\n+    @Autowired\n+    public EndpointService(ClientRepository clientRepository, EndpointRepository endpointRepository) {\n+        this.clientRepository = clientRepository;\n+        this.endpointRepository = endpointRepository;\n+    }\n+\n+    /**\n+     * Get endpoint by endpoint id\n+     *\n+     * @param id                            endpoint id\n+     * @return\n+     * @throws EndpointNotFoundException    endpoint not found with given id\n+     */\n+    public EndpointType getEndpoint(String id) throws EndpointNotFoundException {\n+        verifyAuthority(\"VIEW_ENDPOINT\");\n+        Long endpointId = parseLongIdOrThrowNotFound(id);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c30e19b821240c35705101e92f08635563eb9520"}, "originalPosition": 65}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4NDk2NzEwOnYy", "diffSide": "RIGHT", "path": "src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/service/EndpointService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxMjo0MDozNFrOFvQsww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxMjo0MDozNFrOFvQsww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTEwMDk5NQ==", "bodyText": "This throws ResourceNotFoundException, which is of the type OpenApiException, so the parsing should be done already in the controller layer.", "url": "https://github.com/nordic-institute/X-Road/pull/388#discussion_r385100995", "createdAt": "2020-02-27T12:40:34Z", "author": {"login": "carohauta"}, "path": "src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/service/EndpointService.java", "diffHunk": "@@ -0,0 +1,144 @@\n+/**\n+ * The MIT License\n+ * Copyright (c) 2018 Estonian Information System Authority (RIA),\n+ * Nordic Institute for Interoperability Solutions (NIIS), Population Register Centre (VRK)\n+ * Copyright (c) 2015-2017 Estonian Information System Authority (RIA), Population Register Centre (VRK)\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package org.niis.xroad.restapi.service;\n+\n+import ee.ria.xroad.common.conf.serverconf.model.ClientType;\n+import ee.ria.xroad.common.conf.serverconf.model.EndpointType;\n+\n+import org.niis.xroad.restapi.exceptions.ErrorDeviation;\n+import org.niis.xroad.restapi.openapi.model.Endpoint;\n+import org.niis.xroad.restapi.repository.ClientRepository;\n+import org.niis.xroad.restapi.repository.EndpointRepository;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.security.access.prepost.PreAuthorize;\n+import org.springframework.stereotype.Service;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+import static org.niis.xroad.restapi.service.SecurityHelper.verifyAuthority;\n+import static org.niis.xroad.restapi.util.FormatUtils.parseLongIdOrThrowNotFound;\n+\n+@Service\n+@Transactional\n+@PreAuthorize(\"isAuthenticated()\")\n+public class EndpointService {\n+\n+    private final ClientRepository clientRepository;\n+    private final EndpointRepository endpointRepository;\n+\n+    @Autowired\n+    public EndpointService(ClientRepository clientRepository, EndpointRepository endpointRepository) {\n+        this.clientRepository = clientRepository;\n+        this.endpointRepository = endpointRepository;\n+    }\n+\n+    /**\n+     * Get endpoint by endpoint id\n+     *\n+     * @param id                            endpoint id\n+     * @return\n+     * @throws EndpointNotFoundException    endpoint not found with given id\n+     */\n+    public EndpointType getEndpoint(String id) throws EndpointNotFoundException {\n+        verifyAuthority(\"VIEW_ENDPOINT\");\n+        Long endpointId = parseLongIdOrThrowNotFound(id);\n+        EndpointType endpoint = endpointRepository.getEndpoint(endpointId);\n+        if (endpoint == null) {\n+            throw new EndpointNotFoundException(endpointId.toString());\n+        }\n+        return endpoint;\n+    }\n+\n+    /**\n+     * Delete endpoint\n+     *\n+     * @param id                            endpoint id\n+     * @throws EndpointNotFoundException    endpoint not found with given id\n+     * @throws ClientNotFoundException      client for the endpoint not found\n+     */\n+    public void deleteEndpoint(String id) throws EndpointNotFoundException, ClientNotFoundException {\n+        verifyAuthority(\"DELETE_ENDPOINT\");\n+        Long endpointId = parseLongIdOrThrowNotFound(id);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c30e19b821240c35705101e92f08635563eb9520"}, "originalPosition": 82}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4NDk2NzgyOnYy", "diffSide": "RIGHT", "path": "src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/service/EndpointService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxMjo0MDo0NlrOFvQtKQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxMjo0MDo0NlrOFvQtKQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTEwMTA5Nw==", "bodyText": "This throws ResourceNotFoundException, which is of the type OpenApiException, so the parsing should be done already in the controller layer.", "url": "https://github.com/nordic-institute/X-Road/pull/388#discussion_r385101097", "createdAt": "2020-02-27T12:40:46Z", "author": {"login": "carohauta"}, "path": "src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/service/EndpointService.java", "diffHunk": "@@ -0,0 +1,144 @@\n+/**\n+ * The MIT License\n+ * Copyright (c) 2018 Estonian Information System Authority (RIA),\n+ * Nordic Institute for Interoperability Solutions (NIIS), Population Register Centre (VRK)\n+ * Copyright (c) 2015-2017 Estonian Information System Authority (RIA), Population Register Centre (VRK)\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package org.niis.xroad.restapi.service;\n+\n+import ee.ria.xroad.common.conf.serverconf.model.ClientType;\n+import ee.ria.xroad.common.conf.serverconf.model.EndpointType;\n+\n+import org.niis.xroad.restapi.exceptions.ErrorDeviation;\n+import org.niis.xroad.restapi.openapi.model.Endpoint;\n+import org.niis.xroad.restapi.repository.ClientRepository;\n+import org.niis.xroad.restapi.repository.EndpointRepository;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.security.access.prepost.PreAuthorize;\n+import org.springframework.stereotype.Service;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+import static org.niis.xroad.restapi.service.SecurityHelper.verifyAuthority;\n+import static org.niis.xroad.restapi.util.FormatUtils.parseLongIdOrThrowNotFound;\n+\n+@Service\n+@Transactional\n+@PreAuthorize(\"isAuthenticated()\")\n+public class EndpointService {\n+\n+    private final ClientRepository clientRepository;\n+    private final EndpointRepository endpointRepository;\n+\n+    @Autowired\n+    public EndpointService(ClientRepository clientRepository, EndpointRepository endpointRepository) {\n+        this.clientRepository = clientRepository;\n+        this.endpointRepository = endpointRepository;\n+    }\n+\n+    /**\n+     * Get endpoint by endpoint id\n+     *\n+     * @param id                            endpoint id\n+     * @return\n+     * @throws EndpointNotFoundException    endpoint not found with given id\n+     */\n+    public EndpointType getEndpoint(String id) throws EndpointNotFoundException {\n+        verifyAuthority(\"VIEW_ENDPOINT\");\n+        Long endpointId = parseLongIdOrThrowNotFound(id);\n+        EndpointType endpoint = endpointRepository.getEndpoint(endpointId);\n+        if (endpoint == null) {\n+            throw new EndpointNotFoundException(endpointId.toString());\n+        }\n+        return endpoint;\n+    }\n+\n+    /**\n+     * Delete endpoint\n+     *\n+     * @param id                            endpoint id\n+     * @throws EndpointNotFoundException    endpoint not found with given id\n+     * @throws ClientNotFoundException      client for the endpoint not found\n+     */\n+    public void deleteEndpoint(String id) throws EndpointNotFoundException, ClientNotFoundException {\n+        verifyAuthority(\"DELETE_ENDPOINT\");\n+        Long endpointId = parseLongIdOrThrowNotFound(id);\n+        ClientType clientType = clientRepository.getClientByEndpointId(endpointId);\n+        if (clientType == null) {\n+            throw new ClientNotFoundException(\"Client not found for endpoint with id: \" + endpointId.toString());\n+        }\n+        clientType.getAcl().removeIf(acl -> acl.getEndpoint().getId().equals(Long.valueOf(endpointId)));\n+        clientType.getEndpoint().removeIf(endpoint -> endpoint.getId().equals(endpointId));\n+        clientRepository.saveOrUpdate(clientType);\n+    }\n+\n+    /**\n+     * Update endpoint details\n+     *\n+     * @param id                                        endpoint id\n+     * @param endpointUpdate                            endpoint object to use for updating\n+     * @return\n+     * @throws EndpointNotFoundException                endpoint not found with given id\n+     * @throws IllegalGeneratedEndpointUpdateException  trying to update that is generated automatically\n+     */\n+    public EndpointType updateEndpoint(String id, Endpoint endpointUpdate)\n+            throws EndpointNotFoundException, IllegalGeneratedEndpointUpdateException {\n+        verifyAuthority(\"EDIT_OPENAPI3_ENDPOINT\");\n+        Long endpointId = parseLongIdOrThrowNotFound(id);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c30e19b821240c35705101e92f08635563eb9520"}, "originalPosition": 104}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4NTAyODg4OnYy", "diffSide": "RIGHT", "path": "src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/openapi/EndpointsApiController.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxMzowMDo0OFrOFvRSAg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxMzowMDo0OFrOFvRSAg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTExMDUzMA==", "bodyText": "Should this be BadRequestException instead? I think that trying to update a generated endpoint is the user doing something wrong rather than the system being in a conflicted state (such as having duplicate value or missing the parent object).", "url": "https://github.com/nordic-institute/X-Road/pull/388#discussion_r385110530", "createdAt": "2020-02-27T13:00:48Z", "author": {"login": "carohauta"}, "path": "src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/openapi/EndpointsApiController.java", "diffHunk": "@@ -0,0 +1,101 @@\n+/**\n+ * The MIT License\n+ * Copyright (c) 2018 Estonian Information System Authority (RIA),\n+ * Nordic Institute for Interoperability Solutions (NIIS), Population Register Centre (VRK)\n+ * Copyright (c) 2015-2017 Estonian Information System Authority (RIA), Population Register Centre (VRK)\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package org.niis.xroad.restapi.openapi;\n+\n+import lombok.extern.slf4j.Slf4j;\n+import org.niis.xroad.restapi.converter.EndpointConverter;\n+import org.niis.xroad.restapi.openapi.model.Endpoint;\n+import org.niis.xroad.restapi.service.ClientNotFoundException;\n+import org.niis.xroad.restapi.service.EndpointService;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.security.access.prepost.PreAuthorize;\n+import org.springframework.stereotype.Controller;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+\n+/**\n+ * Endpoints api\n+ */\n+@Controller\n+@RequestMapping(\"/api\")\n+@Slf4j\n+@PreAuthorize(\"denyAll\")\n+public class EndpointsApiController implements EndpointsApi {\n+\n+    private final EndpointService endpointService;\n+    private final EndpointConverter endpointConverter;\n+\n+    private static final String NOT_FOUND_ERROR_MSG = \"Endpoint not found with id\";\n+\n+    @Autowired\n+    public EndpointsApiController(\n+            EndpointService endpointService,\n+            EndpointConverter endpointConverter) {\n+        this.endpointService = endpointService;\n+        this.endpointConverter = endpointConverter;\n+    }\n+\n+    @Override\n+    @PreAuthorize(\"hasAuthority('VIEW_ENDPOINT')\")\n+    public ResponseEntity<Endpoint> getEndpoint(String id) {\n+        Endpoint endpoint;\n+        try {\n+            endpoint = endpointConverter.convert(endpointService.getEndpoint(id));\n+        } catch (EndpointService.EndpointNotFoundException e) {\n+            throw new ResourceNotFoundException(NOT_FOUND_ERROR_MSG + \" \" + id);\n+        }\n+        return new ResponseEntity(endpoint, HttpStatus.ACCEPTED);\n+    }\n+\n+    @Override\n+    @PreAuthorize(\"hasAuthority('DELETE_ENDPOINT')\")\n+    public ResponseEntity<Void> deleteEndpoint(String id) {\n+        try {\n+            endpointService.deleteEndpoint(id);\n+        } catch (EndpointService.EndpointNotFoundException e) {\n+            throw new ResourceNotFoundException(NOT_FOUND_ERROR_MSG + \" \" + id);\n+        } catch (ClientNotFoundException e) {\n+            throw new ConflictException(\"Client not found for the given endpoint with id: \" + id);\n+        }\n+        return new ResponseEntity<>(HttpStatus.NO_CONTENT);\n+    }\n+\n+    @Override\n+    @PreAuthorize(\"hasAuthority('EDIT_OPENAPI3_ENDPOINT')\")\n+    public ResponseEntity<Endpoint> updateEndpoint(String id, Endpoint endpoint) {\n+        Endpoint ep;\n+        try {\n+            ep = endpointConverter.convert(endpointService.updateEndpoint(id, endpoint));\n+        } catch (EndpointService.EndpointNotFoundException e) {\n+            throw new ResourceNotFoundException(NOT_FOUND_ERROR_MSG + \" \" + id);\n+        } catch (EndpointService.IllegalGeneratedEndpointUpdateException e) {\n+            throw new ConflictException(\"Updating is not allowed for generated endpoint \" + id);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c30e19b821240c35705101e92f08635563eb9520"}, "originalPosition": 95}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4Nzk2MzAxOnYy", "diffSide": "RIGHT", "path": "src/proxy-ui-api/src/main/resources/openapi-definition.yaml", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQwODozODoyNVrOFvtLow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQwODozODoyNVrOFvtLow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTU2NzY1MQ==", "bodyText": "Nice to see the code generator also supports asterisk as a STAR \ud83d\udc4d", "url": "https://github.com/nordic-institute/X-Road/pull/388#discussion_r385567651", "createdAt": "2020-02-28T08:38:25Z", "author": {"login": "carohauta"}, "path": "src/proxy-ui-api/src/main/resources/openapi-definition.yaml", "diffHunk": "@@ -4796,6 +4796,7 @@ components:\n           description: http method mapeed to this endpoint\n           example: 'GET'\n           default: '*'\n+          enum: [ '*', 'GET', 'POST', 'PUT', 'DELETE', 'PATCH', 'HEAD', 'OPTIONS', 'TRACE' ]", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eda6e1b19573fec4fee9e25f3630878a88d73a1c"}, "originalPosition": 22}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2950, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}