{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI0NzIzOTg3", "number": 527, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxMTo1NjoxOVrOEChsuA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxMjozOToxOFrOECimyg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxMDg0NzI4OnYy", "diffSide": "RIGHT", "path": "src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/exceptions/ApplicationExceptionHandler.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxMTo1NjoxOVrOGfCUKg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQwOTo1NzoxOVrOGfoNnQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTE5Njk3MA==", "bodyText": "Does the lazy inject actually work since AuditEventLoggingFacade is not a lazy bean?", "url": "https://github.com/nordic-institute/X-Road/pull/527#discussion_r435196970", "createdAt": "2020-06-04T11:56:19Z", "author": {"login": "carohauta"}, "path": "src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/exceptions/ApplicationExceptionHandler.java", "diffHunk": "@@ -45,13 +52,18 @@\n     @Autowired\n     private ExceptionTranslator exceptionTranslator;\n \n+    @Autowired\n+    @Lazy\n+    private AuditEventLoggingFacade auditEventLoggingFacade;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ac859f1acea363d87c584a93e352c186e684378f"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTE5ODEyMA==", "bodyText": "If this annotation is not present on a Component or Bean definition, eager initialization will occur\n...\nIn addition to its role for component initialization, this annotation may also be placed on injection points marked with Autowired or Inject\n\n\u2013 Spring Documents: Lazy", "url": "https://github.com/nordic-institute/X-Road/pull/527#discussion_r435198120", "createdAt": "2020-06-04T11:58:30Z", "author": {"login": "carohauta"}, "path": "src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/exceptions/ApplicationExceptionHandler.java", "diffHunk": "@@ -45,13 +52,18 @@\n     @Autowired\n     private ExceptionTranslator exceptionTranslator;\n \n+    @Autowired\n+    @Lazy\n+    private AuditEventLoggingFacade auditEventLoggingFacade;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTE5Njk3MA=="}, "originalCommit": {"oid": "ac859f1acea363d87c584a93e352c186e684378f"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTgxNzg4NQ==", "bodyText": "Good point! I don't think it works. It was a remnant of older implementation where AuditEventLoggingFacade was a request scoped bean, and injecting it would break when used from outside of request scope (like when exceptions happen during bootup)\nAuditEventLoggingFacade is now a regular bean so I removed those Lazy annotations.  Now only RequestScopedAuditEventData and RequestScopedLoggedAuditEvents are request scoped beans, and those are injected as lazy to RequestScopedAuditDataHolder", "url": "https://github.com/nordic-institute/X-Road/pull/527#discussion_r435817885", "createdAt": "2020-06-05T09:57:19Z", "author": {"login": "jansu76"}, "path": "src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/exceptions/ApplicationExceptionHandler.java", "diffHunk": "@@ -45,13 +52,18 @@\n     @Autowired\n     private ExceptionTranslator exceptionTranslator;\n \n+    @Autowired\n+    @Lazy\n+    private AuditEventLoggingFacade auditEventLoggingFacade;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTE5Njk3MA=="}, "originalCommit": {"oid": "ac859f1acea363d87c584a93e352c186e684378f"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxMDk5NTk0OnYy", "diffSide": "RIGHT", "path": "src/proxy-ui-api/src/test/java/org/niis/xroad/restapi/config/audit/MockableAuditEventLoggingFacade.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxMjozOToxOFrOGfDwlQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxMDowNTozNFrOGfofIw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTIyMDYyOQ==", "bodyText": "Could it not be possible to use when(auditEventLoggingFacade).thenCallRealMethod(); in the AuditLoggingRestTemplateTest instead of this mock version of the facade? Or would it just assume that the mock(AuditEventLoggingFacade.class); in AuditLogMockingConfiguration is the actual real bean?", "url": "https://github.com/nordic-institute/X-Road/pull/527#discussion_r435220629", "createdAt": "2020-06-04T12:39:18Z", "author": {"login": "carohauta"}, "path": "src/proxy-ui-api/src/test/java/org/niis/xroad/restapi/config/audit/MockableAuditEventLoggingFacade.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/**\n+ * The MIT License\n+ * Copyright (c) 2018 Estonian Information System Authority (RIA),\n+ * Nordic Institute for Interoperability Solutions (NIIS), Population Register Centre (VRK)\n+ * Copyright (c) 2015-2017 Estonian Information System Authority (RIA), Population Register Centre (VRK)\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package org.niis.xroad.restapi.config.audit;\n+\n+import org.niis.xroad.restapi.util.RequestHelper;\n+import org.niis.xroad.restapi.util.SecurityHelper;\n+import org.niis.xroad.restapi.util.UsernameHelper;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.context.annotation.Profile;\n+import org.springframework.stereotype.Component;\n+\n+import java.util.Map;\n+\n+@Component\n+@Profile({ \"test\"})\n+public class MockableAuditEventLoggingFacade extends AuditEventLoggingFacade {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ac859f1acea363d87c584a93e352c186e684378f"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTgxOTM0Ng==", "bodyText": "MockableAuditEventLoggingFacade exists to make callAuditLoggerLogSuccess and callAuditLoggerLogFailure public, so that tests can verify() them. It's maybe not the perfect design, and there could be alternatives, like moving AuditLoggingRestTemplateTest to package org.niis.xroad.restapi.config.audit....but maybe I will keep it like it is?", "url": "https://github.com/nordic-institute/X-Road/pull/527#discussion_r435819346", "createdAt": "2020-06-05T09:59:51Z", "author": {"login": "jansu76"}, "path": "src/proxy-ui-api/src/test/java/org/niis/xroad/restapi/config/audit/MockableAuditEventLoggingFacade.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/**\n+ * The MIT License\n+ * Copyright (c) 2018 Estonian Information System Authority (RIA),\n+ * Nordic Institute for Interoperability Solutions (NIIS), Population Register Centre (VRK)\n+ * Copyright (c) 2015-2017 Estonian Information System Authority (RIA), Population Register Centre (VRK)\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package org.niis.xroad.restapi.config.audit;\n+\n+import org.niis.xroad.restapi.util.RequestHelper;\n+import org.niis.xroad.restapi.util.SecurityHelper;\n+import org.niis.xroad.restapi.util.UsernameHelper;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.context.annotation.Profile;\n+import org.springframework.stereotype.Component;\n+\n+import java.util.Map;\n+\n+@Component\n+@Profile({ \"test\"})\n+public class MockableAuditEventLoggingFacade extends AuditEventLoggingFacade {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTIyMDYyOQ=="}, "originalCommit": {"oid": "ac859f1acea363d87c584a93e352c186e684378f"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTgyMjM3MQ==", "bodyText": "Yes there are the usual multiple alternatives how to achieve this. I don't see so much benefit in changing the current implementation so we can keep it this way \ud83d\udc4d", "url": "https://github.com/nordic-institute/X-Road/pull/527#discussion_r435822371", "createdAt": "2020-06-05T10:05:34Z", "author": {"login": "carohauta"}, "path": "src/proxy-ui-api/src/test/java/org/niis/xroad/restapi/config/audit/MockableAuditEventLoggingFacade.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/**\n+ * The MIT License\n+ * Copyright (c) 2018 Estonian Information System Authority (RIA),\n+ * Nordic Institute for Interoperability Solutions (NIIS), Population Register Centre (VRK)\n+ * Copyright (c) 2015-2017 Estonian Information System Authority (RIA), Population Register Centre (VRK)\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package org.niis.xroad.restapi.config.audit;\n+\n+import org.niis.xroad.restapi.util.RequestHelper;\n+import org.niis.xroad.restapi.util.SecurityHelper;\n+import org.niis.xroad.restapi.util.UsernameHelper;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.context.annotation.Profile;\n+import org.springframework.stereotype.Component;\n+\n+import java.util.Map;\n+\n+@Component\n+@Profile({ \"test\"})\n+public class MockableAuditEventLoggingFacade extends AuditEventLoggingFacade {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTIyMDYyOQ=="}, "originalCommit": {"oid": "ac859f1acea363d87c584a93e352c186e684378f"}, "originalPosition": 38}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2722, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}