{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE3OTU0MTI5", "number": 500, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQxMjoxNToxN1rOD-L8Ag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQxMjoxODoxMVrOD-MAUA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2NTMzODkwOnYy", "diffSide": "LEFT", "path": "src/proxy-ui-api/src/test/java/org/niis/xroad/restapi/openapi/ServicesApiControllerIntegrationTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQxMjoxNToxN1rOGYInrQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQxMzoxODozNFrOGYLMFA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzk2MDIzNw==", "bodyText": "Missing @Test annotation so the test does not actually run", "url": "https://github.com/nordic-institute/X-Road/pull/500#discussion_r427960237", "createdAt": "2020-05-20T12:15:17Z", "author": {"login": "carohauta"}, "path": "src/proxy-ui-api/src/test/java/org/niis/xroad/restapi/openapi/ServicesApiControllerIntegrationTest.java", "diffHunk": "@@ -484,22 +484,45 @@ public void addAccessRights() {\n         assertEquals(calculatePrimeClientsBefore + 3, updatedServiceClients.size());\n     }\n \n-    @Test(expected = ConflictException.class)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "10594d4a5c4a5edb318b5dad58f3ecac452908b2"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODAwMjMyNA==", "bodyText": "Oops. Added.", "url": "https://github.com/nordic-institute/X-Road/pull/500#discussion_r428002324", "createdAt": "2020-05-20T13:18:34Z", "author": {"login": "TJaakkola"}, "path": "src/proxy-ui-api/src/test/java/org/niis/xroad/restapi/openapi/ServicesApiControllerIntegrationTest.java", "diffHunk": "@@ -484,22 +484,45 @@ public void addAccessRights() {\n         assertEquals(calculatePrimeClientsBefore + 3, updatedServiceClients.size());\n     }\n \n-    @Test(expected = ConflictException.class)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzk2MDIzNw=="}, "originalCommit": {"oid": "10594d4a5c4a5edb318b5dad58f3ecac452908b2"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2NTM0OTI2OnYy", "diffSide": "RIGHT", "path": "src/proxy-ui-api/src/test/java/org/niis/xroad/restapi/openapi/ServicesApiControllerIntegrationTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQxMjoxNzo1OFrOGYIucg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQxMzoxODo0NlrOGYLMnQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzk2MTk3MA==", "bodyText": "Could use fail() assertion here instead of throwing a plain Exception. It would better indicate that there was an actual assertion error and not an application error.", "url": "https://github.com/nordic-institute/X-Road/pull/500#discussion_r427961970", "createdAt": "2020-05-20T12:17:58Z", "author": {"login": "carohauta"}, "path": "src/proxy-ui-api/src/test/java/org/niis/xroad/restapi/openapi/ServicesApiControllerIntegrationTest.java", "diffHunk": "@@ -484,22 +484,45 @@ public void addAccessRights() {\n         assertEquals(calculatePrimeClientsBefore + 3, updatedServiceClients.size());\n     }\n \n-    @Test(expected = ConflictException.class)\n     @WithMockUser(authorities = { \"VIEW_SERVICE_ACL\", \"EDIT_SERVICE_ACL\" })\n-    public void addDuplicateAccessRight() {\n+    public void addDuplicateAccessRight() throws Exception {\n         when(globalConfService.clientsExist(any())).thenReturn(true);\n         when(globalConfService.globalGroupsExist(any())).thenReturn(true);\n         List<ServiceClient> serviceClients = servicesApiController.getServiceServiceClients(\n                 TestUtils.SS1_GET_RANDOM_V1).getBody();\n         assertEquals(SS1_GET_RANDOM_SERVICE_CLIENTS, serviceClients.size());\n \n+        // add subsystem TestUtils.CLIENT_ID_SS2 as duplicate\n         ServiceClients clientsToAdd = new ServiceClients()\n                 .addItemsItem(new ServiceClient().id(TestUtils.DB_LOCAL_GROUP_ID_2).serviceClientType(\n                         ServiceClientType.LOCALGROUP))\n                 .addItemsItem(new ServiceClient().id(TestUtils.CLIENT_ID_SS2).serviceClientType(\n                         ServiceClientType.SUBSYSTEM));\n+        try {\n+            servicesApiController.addServiceServiceClients(TestUtils.SS1_GET_RANDOM_V1, clientsToAdd);\n+            throw new Exception(\"Should throw Conflict exception in stead of this\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "10594d4a5c4a5edb318b5dad58f3ecac452908b2"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODAwMjQ2MQ==", "bodyText": "Changed.", "url": "https://github.com/nordic-institute/X-Road/pull/500#discussion_r428002461", "createdAt": "2020-05-20T13:18:46Z", "author": {"login": "TJaakkola"}, "path": "src/proxy-ui-api/src/test/java/org/niis/xroad/restapi/openapi/ServicesApiControllerIntegrationTest.java", "diffHunk": "@@ -484,22 +484,45 @@ public void addAccessRights() {\n         assertEquals(calculatePrimeClientsBefore + 3, updatedServiceClients.size());\n     }\n \n-    @Test(expected = ConflictException.class)\n     @WithMockUser(authorities = { \"VIEW_SERVICE_ACL\", \"EDIT_SERVICE_ACL\" })\n-    public void addDuplicateAccessRight() {\n+    public void addDuplicateAccessRight() throws Exception {\n         when(globalConfService.clientsExist(any())).thenReturn(true);\n         when(globalConfService.globalGroupsExist(any())).thenReturn(true);\n         List<ServiceClient> serviceClients = servicesApiController.getServiceServiceClients(\n                 TestUtils.SS1_GET_RANDOM_V1).getBody();\n         assertEquals(SS1_GET_RANDOM_SERVICE_CLIENTS, serviceClients.size());\n \n+        // add subsystem TestUtils.CLIENT_ID_SS2 as duplicate\n         ServiceClients clientsToAdd = new ServiceClients()\n                 .addItemsItem(new ServiceClient().id(TestUtils.DB_LOCAL_GROUP_ID_2).serviceClientType(\n                         ServiceClientType.LOCALGROUP))\n                 .addItemsItem(new ServiceClient().id(TestUtils.CLIENT_ID_SS2).serviceClientType(\n                         ServiceClientType.SUBSYSTEM));\n+        try {\n+            servicesApiController.addServiceServiceClients(TestUtils.SS1_GET_RANDOM_V1, clientsToAdd);\n+            throw new Exception(\"Should throw Conflict exception in stead of this\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzk2MTk3MA=="}, "originalCommit": {"oid": "10594d4a5c4a5edb318b5dad58f3ecac452908b2"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2NTM0OTkyOnYy", "diffSide": "RIGHT", "path": "src/proxy-ui-api/src/test/java/org/niis/xroad/restapi/openapi/ServicesApiControllerIntegrationTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQxMjoxODoxMVrOGYIu4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQxMzoxOTowNVrOGYLNeA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzk2MjA4Mw==", "bodyText": "Same as above \ud83d\udc46", "url": "https://github.com/nordic-institute/X-Road/pull/500#discussion_r427962083", "createdAt": "2020-05-20T12:18:11Z", "author": {"login": "carohauta"}, "path": "src/proxy-ui-api/src/test/java/org/niis/xroad/restapi/openapi/ServicesApiControllerIntegrationTest.java", "diffHunk": "@@ -484,22 +484,45 @@ public void addAccessRights() {\n         assertEquals(calculatePrimeClientsBefore + 3, updatedServiceClients.size());\n     }\n \n-    @Test(expected = ConflictException.class)\n     @WithMockUser(authorities = { \"VIEW_SERVICE_ACL\", \"EDIT_SERVICE_ACL\" })\n-    public void addDuplicateAccessRight() {\n+    public void addDuplicateAccessRight() throws Exception {\n         when(globalConfService.clientsExist(any())).thenReturn(true);\n         when(globalConfService.globalGroupsExist(any())).thenReturn(true);\n         List<ServiceClient> serviceClients = servicesApiController.getServiceServiceClients(\n                 TestUtils.SS1_GET_RANDOM_V1).getBody();\n         assertEquals(SS1_GET_RANDOM_SERVICE_CLIENTS, serviceClients.size());\n \n+        // add subsystem TestUtils.CLIENT_ID_SS2 as duplicate\n         ServiceClients clientsToAdd = new ServiceClients()\n                 .addItemsItem(new ServiceClient().id(TestUtils.DB_LOCAL_GROUP_ID_2).serviceClientType(\n                         ServiceClientType.LOCALGROUP))\n                 .addItemsItem(new ServiceClient().id(TestUtils.CLIENT_ID_SS2).serviceClientType(\n                         ServiceClientType.SUBSYSTEM));\n+        try {\n+            servicesApiController.addServiceServiceClients(TestUtils.SS1_GET_RANDOM_V1, clientsToAdd);\n+            throw new Exception(\"Should throw Conflict exception in stead of this\");\n+        } catch (ConflictException e) { }\n \n-        servicesApiController.addServiceServiceClients(TestUtils.SS1_GET_RANDOM_V1, clientsToAdd);\n+        // try adding duplicate local group\n+        ServiceClients existingLocalGroup = new ServiceClients()\n+                        .addItemsItem(new ServiceClient().id(TestUtils.DB_LOCAL_GROUP_ID_1).serviceClientType(\n+                        ServiceClientType.LOCALGROUP));\n+        try {\n+            servicesApiController.addServiceServiceClients(TestUtils.SS1_GET_RANDOM_V1, existingLocalGroup);\n+            throw new Exception(\"Should throw Conflict exception in stead of this\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "10594d4a5c4a5edb318b5dad58f3ecac452908b2"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODAwMjY4MA==", "bodyText": "Changed.", "url": "https://github.com/nordic-institute/X-Road/pull/500#discussion_r428002680", "createdAt": "2020-05-20T13:19:05Z", "author": {"login": "TJaakkola"}, "path": "src/proxy-ui-api/src/test/java/org/niis/xroad/restapi/openapi/ServicesApiControllerIntegrationTest.java", "diffHunk": "@@ -484,22 +484,45 @@ public void addAccessRights() {\n         assertEquals(calculatePrimeClientsBefore + 3, updatedServiceClients.size());\n     }\n \n-    @Test(expected = ConflictException.class)\n     @WithMockUser(authorities = { \"VIEW_SERVICE_ACL\", \"EDIT_SERVICE_ACL\" })\n-    public void addDuplicateAccessRight() {\n+    public void addDuplicateAccessRight() throws Exception {\n         when(globalConfService.clientsExist(any())).thenReturn(true);\n         when(globalConfService.globalGroupsExist(any())).thenReturn(true);\n         List<ServiceClient> serviceClients = servicesApiController.getServiceServiceClients(\n                 TestUtils.SS1_GET_RANDOM_V1).getBody();\n         assertEquals(SS1_GET_RANDOM_SERVICE_CLIENTS, serviceClients.size());\n \n+        // add subsystem TestUtils.CLIENT_ID_SS2 as duplicate\n         ServiceClients clientsToAdd = new ServiceClients()\n                 .addItemsItem(new ServiceClient().id(TestUtils.DB_LOCAL_GROUP_ID_2).serviceClientType(\n                         ServiceClientType.LOCALGROUP))\n                 .addItemsItem(new ServiceClient().id(TestUtils.CLIENT_ID_SS2).serviceClientType(\n                         ServiceClientType.SUBSYSTEM));\n+        try {\n+            servicesApiController.addServiceServiceClients(TestUtils.SS1_GET_RANDOM_V1, clientsToAdd);\n+            throw new Exception(\"Should throw Conflict exception in stead of this\");\n+        } catch (ConflictException e) { }\n \n-        servicesApiController.addServiceServiceClients(TestUtils.SS1_GET_RANDOM_V1, clientsToAdd);\n+        // try adding duplicate local group\n+        ServiceClients existingLocalGroup = new ServiceClients()\n+                        .addItemsItem(new ServiceClient().id(TestUtils.DB_LOCAL_GROUP_ID_1).serviceClientType(\n+                        ServiceClientType.LOCALGROUP));\n+        try {\n+            servicesApiController.addServiceServiceClients(TestUtils.SS1_GET_RANDOM_V1, existingLocalGroup);\n+            throw new Exception(\"Should throw Conflict exception in stead of this\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzk2MjA4Mw=="}, "originalCommit": {"oid": "10594d4a5c4a5edb318b5dad58f3ecac452908b2"}, "originalPosition": 32}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2867, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}