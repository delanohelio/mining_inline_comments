{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ5MzUwOTMx", "number": 600, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQxMDo1MDoyM1rOEWvjPA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQxMTozNDowOVrOEWwWcQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyMjgzMTk2OnYy", "diffSide": "RIGHT", "path": "src/common-util/src/test/java/ee/ria/xroad/common/certificateprofile/impl/FoCertificateProfileInfoProviderTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQxMDo1MDoyM1rOG-Ju0g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQxMDo1MDoyM1rOG-Ju0g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzgyNDMzOA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * Tests whether validating black subject field of sign profile fails\n          \n          \n            \n                 * Tests whether validating blank subject field of sign profile fails", "url": "https://github.com/nordic-institute/X-Road/pull/600#discussion_r467824338", "createdAt": "2020-08-10T10:50:23Z", "author": {"login": "iluwatar"}, "path": "src/common-util/src/test/java/ee/ria/xroad/common/certificateprofile/impl/FoCertificateProfileInfoProviderTest.java", "diffHunk": "@@ -0,0 +1,264 @@\n+/**\n+ * The MIT License\n+ * Copyright (c) 2019- Nordic Institute for Interoperability Solutions (NIIS)\n+ * Copyright (c) 2018 Estonian Information System Authority (RIA),\n+ * Nordic Institute for Interoperability Solutions (NIIS), Population Register Centre (VRK)\n+ * Copyright (c) 2015-2017 Estonian Information System Authority (RIA), Population Register Centre (VRK)\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package ee.ria.xroad.common.certificateprofile.impl;\n+\n+import ee.ria.xroad.common.certificateprofile.CertificateProfileInfoProvider;\n+import ee.ria.xroad.common.certificateprofile.DnFieldDescription;\n+import ee.ria.xroad.common.certificateprofile.DnFieldValue;\n+import ee.ria.xroad.common.identifier.ClientId;\n+import ee.ria.xroad.common.identifier.SecurityServerId;\n+\n+import org.bouncycastle.util.Arrays;\n+import org.junit.Test;\n+import org.mockito.Mockito;\n+\n+import javax.security.auth.x500.X500Principal;\n+\n+import java.security.cert.X509Certificate;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+\n+/**\n+ * Tests the Faroe Islands' implementation of CertificateProfileInfoProvider.\n+ */\n+public class FoCertificateProfileInfoProviderTest {\n+\n+    /**\n+     * Tests whether provider returns correct implementation as expected.\n+     */\n+    @Test\n+    public void providerReturnsCorrectImplementations() {\n+        CertificateProfileInfoProvider provider = provider();\n+        assertTrue(\n+                \"Must return instance of FoAuthCertificateProfileInfo\",\n+                provider.getAuthCertProfile(\n+                        new AuthCertificateProfileInfoParameters(\n+                                SecurityServerId.create(\"XX\", \"foo\", \"bar\", \"server\"), \"foo\"\n+                        )\n+                ) instanceof FoAuthCertificateProfileInfo\n+        );\n+\n+        assertTrue(\n+                \"Must return instance of FoSignCertificateProfileInfo\",\n+                provider.getSignCertProfile(\n+                        new SignCertificateProfileInfoParameters(\n+                                SecurityServerId.create(\"XX\", \"CLASS\", \"OWNER\", \"server\"),\n+                                ClientId.create(\"XX\", \"CLASS\", \"CLIENT\"), \"client\"\n+                        )\n+                ) instanceof FoSignCertificateProfileInfo\n+        );\n+    }\n+\n+    /**\n+     * Tests whether getting expected subject fields succeeds as expected.\n+     */\n+    @Test\n+    public void signProfileSubjectFields() {\n+        DnFieldDescription[] expectedFields = {\n+                new EnumLocalizedFieldDescriptionImpl(\"C\", DnFieldLabelLocalizationKey.COUNTRY_CODE, \"FO\")\n+                        .setReadOnly(true),\n+                new EnumLocalizedFieldDescriptionImpl(\"O\", DnFieldLabelLocalizationKey.INSTANCE_IDENTIFIER_O, \"XX\")\n+                        .setReadOnly(true),\n+                new EnumLocalizedFieldDescriptionImpl(\"OU\", DnFieldLabelLocalizationKey.MEMBER_CLASS_OU, \"COM\")\n+                        .setReadOnly(true),\n+                new EnumLocalizedFieldDescriptionImpl(\"CN\", DnFieldLabelLocalizationKey.MEMBER_CODE, \"CLIENT\")\n+                        .setReadOnly(true),\n+                new EnumLocalizedFieldDescriptionImpl(\"serialNumber\", DnFieldLabelLocalizationKey.SERIAL_NUMBER,\n+                        \"YY/ORG/OWNER/server\")\n+                        .setReadOnly(false)\n+        };\n+\n+        assertTrue(\n+                \"Did not get expected fields\",\n+                Arrays.areEqual(expectedFields, getSignProfile().getSubjectFields())\n+        );\n+    }\n+\n+    /**\n+     * Tests whether validating correct subject field succeeds as expected.\n+     * @throws Exception in case of any unexpected errors\n+     */\n+    @Test\n+    public void signProfileValidateFieldSuccessfully() throws Exception {\n+        getSignProfile().validateSubjectField(\n+                new DnFieldValueImpl(\"C\", \"XX\")\n+        );\n+    }\n+\n+    /**\n+     * Tests whether validating unknown subject field fails as expected.\n+     * @throws Exception in case of any unexpected errors\n+     */\n+    @Test(expected = RuntimeException.class)\n+    public void signProfileFailToValidateUnknownField() throws Exception {\n+        getSignProfile().validateSubjectField(\n+                new DnFieldValueImpl(\"X\", \"foo\")\n+        );\n+    }\n+\n+    /**\n+     * Tests whether validating black subject field of sign profile fails", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6b6c400fef61352527b1549b23a63fe356ef880f"}, "originalPosition": 124}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyMjg4NjU2OnYy", "diffSide": "RIGHT", "path": "src/common-util/src/main/java/ee/ria/xroad/common/certificateprofile/impl/FoSignCertificateProfileInfo.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQxMTowODo0OFrOG-KOSA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQxMTowODo0OFrOG-KOSA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzgzMjM5Mg==", "bodyText": "The field is assigned but doesn't seem to be used anywhere", "url": "https://github.com/nordic-institute/X-Road/pull/600#discussion_r467832392", "createdAt": "2020-08-10T11:08:48Z", "author": {"login": "iluwatar"}, "path": "src/common-util/src/main/java/ee/ria/xroad/common/certificateprofile/impl/FoSignCertificateProfileInfo.java", "diffHunk": "@@ -0,0 +1,94 @@\n+/**\n+ * The MIT License\n+ * Copyright (c) 2019- Nordic Institute for Interoperability Solutions (NIIS)\n+ * Copyright (c) 2018 Estonian Information System Authority (RIA),\n+ * Nordic Institute for Interoperability Solutions (NIIS), Population Register Centre (VRK)\n+ * Copyright (c) 2015-2017 Estonian Information System Authority (RIA), Population Register Centre (VRK)\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package ee.ria.xroad.common.certificateprofile.impl;\n+\n+import ee.ria.xroad.common.certificateprofile.DnFieldDescription;\n+import ee.ria.xroad.common.certificateprofile.SignCertificateProfileInfo;\n+import ee.ria.xroad.common.identifier.ClientId;\n+import ee.ria.xroad.common.util.FoSubjectClientIdDecoder;\n+\n+import java.security.cert.X509Certificate;\n+\n+/**\n+ * The Faroe Islands's implementation of SignCertificateProfileInfo.\n+ */\n+public class FoSignCertificateProfileInfo extends AbstractCertificateProfileInfo implements SignCertificateProfileInfo {\n+\n+    protected final Parameters params;\n+\n+    /**\n+     * Constructor.\n+     *\n+     * @param params the parameters\n+     */\n+    public FoSignCertificateProfileInfo(Parameters params) {\n+        super(new DnFieldDescription[] {\n+\n+                // Country Identifier\n+                new EnumLocalizedFieldDescriptionImpl(\n+                        \"C\",\n+                        DnFieldLabelLocalizationKey.COUNTRY_CODE,\n+                        \"FO\"\n+                ).setReadOnly(true),\n+\n+                // Instance Identifier\n+                new EnumLocalizedFieldDescriptionImpl(\n+                        \"O\",\n+                        DnFieldLabelLocalizationKey.INSTANCE_IDENTIFIER_O,\n+                        params.getClientId().getXRoadInstance()\n+                ).setReadOnly(true),\n+\n+                // Member Class Identifier\n+                new EnumLocalizedFieldDescriptionImpl(\n+                        \"OU\",\n+                        DnFieldLabelLocalizationKey.MEMBER_CLASS_OU,\n+                        params.getClientId().getMemberClass()\n+                ).setReadOnly(true),\n+\n+                // Member code\n+                new EnumLocalizedFieldDescriptionImpl(\n+                        \"CN\",\n+                        DnFieldLabelLocalizationKey.MEMBER_CODE,\n+                        params.getClientId().getMemberCode()\n+                ).setReadOnly(true),\n+\n+                // Serialnumber\n+                new EnumLocalizedFieldDescriptionImpl(\n+                        \"serialNumber\",\n+                        DnFieldLabelLocalizationKey.SERIAL_NUMBER,\n+                        params.getServerId().toShortString()\n+                ).setReadOnly(false)\n+\n+        });\n+        this.params = params;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6b6c400fef61352527b1549b23a63fe356ef880f"}, "originalPosition": 86}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyMjk1NjEyOnYy", "diffSide": "RIGHT", "path": "src/common-util/src/test/java/ee/ria/xroad/common/certificateprofile/impl/FoCertificateProfileInfoProviderTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQxMTozMTo0NlrOG-K2ug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQxMTozMTo0NlrOG-K2ug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Nzg0Mjc0Ng==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public void signProfileSubjectFields() {\n          \n          \n            \n                public void signProfileGetSubjectFields() {", "url": "https://github.com/nordic-institute/X-Road/pull/600#discussion_r467842746", "createdAt": "2020-08-10T11:31:46Z", "author": {"login": "iluwatar"}, "path": "src/common-util/src/test/java/ee/ria/xroad/common/certificateprofile/impl/FoCertificateProfileInfoProviderTest.java", "diffHunk": "@@ -0,0 +1,264 @@\n+/**\n+ * The MIT License\n+ * Copyright (c) 2019- Nordic Institute for Interoperability Solutions (NIIS)\n+ * Copyright (c) 2018 Estonian Information System Authority (RIA),\n+ * Nordic Institute for Interoperability Solutions (NIIS), Population Register Centre (VRK)\n+ * Copyright (c) 2015-2017 Estonian Information System Authority (RIA), Population Register Centre (VRK)\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package ee.ria.xroad.common.certificateprofile.impl;\n+\n+import ee.ria.xroad.common.certificateprofile.CertificateProfileInfoProvider;\n+import ee.ria.xroad.common.certificateprofile.DnFieldDescription;\n+import ee.ria.xroad.common.certificateprofile.DnFieldValue;\n+import ee.ria.xroad.common.identifier.ClientId;\n+import ee.ria.xroad.common.identifier.SecurityServerId;\n+\n+import org.bouncycastle.util.Arrays;\n+import org.junit.Test;\n+import org.mockito.Mockito;\n+\n+import javax.security.auth.x500.X500Principal;\n+\n+import java.security.cert.X509Certificate;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+\n+/**\n+ * Tests the Faroe Islands' implementation of CertificateProfileInfoProvider.\n+ */\n+public class FoCertificateProfileInfoProviderTest {\n+\n+    /**\n+     * Tests whether provider returns correct implementation as expected.\n+     */\n+    @Test\n+    public void providerReturnsCorrectImplementations() {\n+        CertificateProfileInfoProvider provider = provider();\n+        assertTrue(\n+                \"Must return instance of FoAuthCertificateProfileInfo\",\n+                provider.getAuthCertProfile(\n+                        new AuthCertificateProfileInfoParameters(\n+                                SecurityServerId.create(\"XX\", \"foo\", \"bar\", \"server\"), \"foo\"\n+                        )\n+                ) instanceof FoAuthCertificateProfileInfo\n+        );\n+\n+        assertTrue(\n+                \"Must return instance of FoSignCertificateProfileInfo\",\n+                provider.getSignCertProfile(\n+                        new SignCertificateProfileInfoParameters(\n+                                SecurityServerId.create(\"XX\", \"CLASS\", \"OWNER\", \"server\"),\n+                                ClientId.create(\"XX\", \"CLASS\", \"CLIENT\"), \"client\"\n+                        )\n+                ) instanceof FoSignCertificateProfileInfo\n+        );\n+    }\n+\n+    /**\n+     * Tests whether getting expected subject fields succeeds as expected.\n+     */\n+    @Test\n+    public void signProfileSubjectFields() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6b6c400fef61352527b1549b23a63fe356ef880f"}, "originalPosition": 80}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyMjk1NzczOnYy", "diffSide": "RIGHT", "path": "src/common-util/src/test/java/ee/ria/xroad/common/certificateprofile/impl/FoCertificateProfileInfoProviderTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQxMTozMjoxOFrOG-K3ug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQxMTozMjoxOFrOG-K3ug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Nzg0MzAwMg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public void authProfileSubjectFields() {\n          \n          \n            \n                public void authProfileGetSubjectFields() {", "url": "https://github.com/nordic-institute/X-Road/pull/600#discussion_r467843002", "createdAt": "2020-08-10T11:32:18Z", "author": {"login": "iluwatar"}, "path": "src/common-util/src/test/java/ee/ria/xroad/common/certificateprofile/impl/FoCertificateProfileInfoProviderTest.java", "diffHunk": "@@ -0,0 +1,264 @@\n+/**\n+ * The MIT License\n+ * Copyright (c) 2019- Nordic Institute for Interoperability Solutions (NIIS)\n+ * Copyright (c) 2018 Estonian Information System Authority (RIA),\n+ * Nordic Institute for Interoperability Solutions (NIIS), Population Register Centre (VRK)\n+ * Copyright (c) 2015-2017 Estonian Information System Authority (RIA), Population Register Centre (VRK)\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package ee.ria.xroad.common.certificateprofile.impl;\n+\n+import ee.ria.xroad.common.certificateprofile.CertificateProfileInfoProvider;\n+import ee.ria.xroad.common.certificateprofile.DnFieldDescription;\n+import ee.ria.xroad.common.certificateprofile.DnFieldValue;\n+import ee.ria.xroad.common.identifier.ClientId;\n+import ee.ria.xroad.common.identifier.SecurityServerId;\n+\n+import org.bouncycastle.util.Arrays;\n+import org.junit.Test;\n+import org.mockito.Mockito;\n+\n+import javax.security.auth.x500.X500Principal;\n+\n+import java.security.cert.X509Certificate;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+\n+/**\n+ * Tests the Faroe Islands' implementation of CertificateProfileInfoProvider.\n+ */\n+public class FoCertificateProfileInfoProviderTest {\n+\n+    /**\n+     * Tests whether provider returns correct implementation as expected.\n+     */\n+    @Test\n+    public void providerReturnsCorrectImplementations() {\n+        CertificateProfileInfoProvider provider = provider();\n+        assertTrue(\n+                \"Must return instance of FoAuthCertificateProfileInfo\",\n+                provider.getAuthCertProfile(\n+                        new AuthCertificateProfileInfoParameters(\n+                                SecurityServerId.create(\"XX\", \"foo\", \"bar\", \"server\"), \"foo\"\n+                        )\n+                ) instanceof FoAuthCertificateProfileInfo\n+        );\n+\n+        assertTrue(\n+                \"Must return instance of FoSignCertificateProfileInfo\",\n+                provider.getSignCertProfile(\n+                        new SignCertificateProfileInfoParameters(\n+                                SecurityServerId.create(\"XX\", \"CLASS\", \"OWNER\", \"server\"),\n+                                ClientId.create(\"XX\", \"CLASS\", \"CLIENT\"), \"client\"\n+                        )\n+                ) instanceof FoSignCertificateProfileInfo\n+        );\n+    }\n+\n+    /**\n+     * Tests whether getting expected subject fields succeeds as expected.\n+     */\n+    @Test\n+    public void signProfileSubjectFields() {\n+        DnFieldDescription[] expectedFields = {\n+                new EnumLocalizedFieldDescriptionImpl(\"C\", DnFieldLabelLocalizationKey.COUNTRY_CODE, \"FO\")\n+                        .setReadOnly(true),\n+                new EnumLocalizedFieldDescriptionImpl(\"O\", DnFieldLabelLocalizationKey.INSTANCE_IDENTIFIER_O, \"XX\")\n+                        .setReadOnly(true),\n+                new EnumLocalizedFieldDescriptionImpl(\"OU\", DnFieldLabelLocalizationKey.MEMBER_CLASS_OU, \"COM\")\n+                        .setReadOnly(true),\n+                new EnumLocalizedFieldDescriptionImpl(\"CN\", DnFieldLabelLocalizationKey.MEMBER_CODE, \"CLIENT\")\n+                        .setReadOnly(true),\n+                new EnumLocalizedFieldDescriptionImpl(\"serialNumber\", DnFieldLabelLocalizationKey.SERIAL_NUMBER,\n+                        \"YY/ORG/OWNER/server\")\n+                        .setReadOnly(false)\n+        };\n+\n+        assertTrue(\n+                \"Did not get expected fields\",\n+                Arrays.areEqual(expectedFields, getSignProfile().getSubjectFields())\n+        );\n+    }\n+\n+    /**\n+     * Tests whether validating correct subject field succeeds as expected.\n+     * @throws Exception in case of any unexpected errors\n+     */\n+    @Test\n+    public void signProfileValidateFieldSuccessfully() throws Exception {\n+        getSignProfile().validateSubjectField(\n+                new DnFieldValueImpl(\"C\", \"XX\")\n+        );\n+    }\n+\n+    /**\n+     * Tests whether validating unknown subject field fails as expected.\n+     * @throws Exception in case of any unexpected errors\n+     */\n+    @Test(expected = RuntimeException.class)\n+    public void signProfileFailToValidateUnknownField() throws Exception {\n+        getSignProfile().validateSubjectField(\n+                new DnFieldValueImpl(\"X\", \"foo\")\n+        );\n+    }\n+\n+    /**\n+     * Tests whether validating black subject field of sign profile fails\n+     * as expected.\n+     * @throws Exception in case of any unexpected errors\n+     */\n+    @Test(expected = RuntimeException.class)\n+    public void signProfileFailToValidateBlankField() throws Exception {\n+        getSignProfile().validateSubjectField(\n+                new DnFieldValueImpl(\"O\", \"\")\n+        );\n+    }\n+\n+    /**\n+     * Tests whether creating subject Dn of sign profile succeeds as expected.\n+     */\n+    @Test\n+    public void signProfileCreateSubjectDn() {\n+        assertEquals(\n+                new X500Principal(\"C=foo, O=bar, CN=baz\"),\n+                getSignProfile().createSubjectDn(\n+                        new DnFieldValue[] {\n+                                new DnFieldValueImpl(\"C\", \"foo\"),\n+                                new DnFieldValueImpl(\"O\", \"bar\"),\n+                                new DnFieldValueImpl(\"CN\", \"baz\")\n+                        }\n+                )\n+        );\n+    }\n+\n+    /**\n+     * Tests whether getting subject identifier of sign profile succeeds\n+     * as expected.\n+     */\n+    @Test\n+    public void signProfileGetSubjectIdentifier() {\n+        X509Certificate mockCert = Mockito.mock(X509Certificate.class);\n+        Mockito.when(mockCert.getSubjectX500Principal()).thenReturn(\n+                new X500Principal(\"C=FO, O=XX, OU=Foo, CN=bar, serialNumber=qux\")\n+        );\n+        assertEquals(\n+                ClientId.create(\"XX\", \"Foo\", \"bar\"),\n+                getSignProfile().getSubjectIdentifier(mockCert)\n+        );\n+    }\n+\n+    /**\n+     * Tests whether getting expected fields of auth profile succeeds\n+     * as expected.\n+     */\n+    @Test\n+    public void authProfileSubjectFields() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6b6c400fef61352527b1549b23a63fe356ef880f"}, "originalPosition": 173}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyMjk2MzA1OnYy", "diffSide": "RIGHT", "path": "src/common-util/src/test/java/ee/ria/xroad/common/certificateprofile/impl/FoCertificateProfileInfoProviderTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQxMTozNDowOVrOG-K66g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQxMTozNDowOVrOG-K66g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Nzg0MzgxOA==", "bodyText": "naming, maybe getProvider?", "url": "https://github.com/nordic-institute/X-Road/pull/600#discussion_r467843818", "createdAt": "2020-08-10T11:34:09Z", "author": {"login": "iluwatar"}, "path": "src/common-util/src/test/java/ee/ria/xroad/common/certificateprofile/impl/FoCertificateProfileInfoProviderTest.java", "diffHunk": "@@ -0,0 +1,264 @@\n+/**\n+ * The MIT License\n+ * Copyright (c) 2019- Nordic Institute for Interoperability Solutions (NIIS)\n+ * Copyright (c) 2018 Estonian Information System Authority (RIA),\n+ * Nordic Institute for Interoperability Solutions (NIIS), Population Register Centre (VRK)\n+ * Copyright (c) 2015-2017 Estonian Information System Authority (RIA), Population Register Centre (VRK)\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package ee.ria.xroad.common.certificateprofile.impl;\n+\n+import ee.ria.xroad.common.certificateprofile.CertificateProfileInfoProvider;\n+import ee.ria.xroad.common.certificateprofile.DnFieldDescription;\n+import ee.ria.xroad.common.certificateprofile.DnFieldValue;\n+import ee.ria.xroad.common.identifier.ClientId;\n+import ee.ria.xroad.common.identifier.SecurityServerId;\n+\n+import org.bouncycastle.util.Arrays;\n+import org.junit.Test;\n+import org.mockito.Mockito;\n+\n+import javax.security.auth.x500.X500Principal;\n+\n+import java.security.cert.X509Certificate;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+\n+/**\n+ * Tests the Faroe Islands' implementation of CertificateProfileInfoProvider.\n+ */\n+public class FoCertificateProfileInfoProviderTest {\n+\n+    /**\n+     * Tests whether provider returns correct implementation as expected.\n+     */\n+    @Test\n+    public void providerReturnsCorrectImplementations() {\n+        CertificateProfileInfoProvider provider = provider();\n+        assertTrue(\n+                \"Must return instance of FoAuthCertificateProfileInfo\",\n+                provider.getAuthCertProfile(\n+                        new AuthCertificateProfileInfoParameters(\n+                                SecurityServerId.create(\"XX\", \"foo\", \"bar\", \"server\"), \"foo\"\n+                        )\n+                ) instanceof FoAuthCertificateProfileInfo\n+        );\n+\n+        assertTrue(\n+                \"Must return instance of FoSignCertificateProfileInfo\",\n+                provider.getSignCertProfile(\n+                        new SignCertificateProfileInfoParameters(\n+                                SecurityServerId.create(\"XX\", \"CLASS\", \"OWNER\", \"server\"),\n+                                ClientId.create(\"XX\", \"CLASS\", \"CLIENT\"), \"client\"\n+                        )\n+                ) instanceof FoSignCertificateProfileInfo\n+        );\n+    }\n+\n+    /**\n+     * Tests whether getting expected subject fields succeeds as expected.\n+     */\n+    @Test\n+    public void signProfileSubjectFields() {\n+        DnFieldDescription[] expectedFields = {\n+                new EnumLocalizedFieldDescriptionImpl(\"C\", DnFieldLabelLocalizationKey.COUNTRY_CODE, \"FO\")\n+                        .setReadOnly(true),\n+                new EnumLocalizedFieldDescriptionImpl(\"O\", DnFieldLabelLocalizationKey.INSTANCE_IDENTIFIER_O, \"XX\")\n+                        .setReadOnly(true),\n+                new EnumLocalizedFieldDescriptionImpl(\"OU\", DnFieldLabelLocalizationKey.MEMBER_CLASS_OU, \"COM\")\n+                        .setReadOnly(true),\n+                new EnumLocalizedFieldDescriptionImpl(\"CN\", DnFieldLabelLocalizationKey.MEMBER_CODE, \"CLIENT\")\n+                        .setReadOnly(true),\n+                new EnumLocalizedFieldDescriptionImpl(\"serialNumber\", DnFieldLabelLocalizationKey.SERIAL_NUMBER,\n+                        \"YY/ORG/OWNER/server\")\n+                        .setReadOnly(false)\n+        };\n+\n+        assertTrue(\n+                \"Did not get expected fields\",\n+                Arrays.areEqual(expectedFields, getSignProfile().getSubjectFields())\n+        );\n+    }\n+\n+    /**\n+     * Tests whether validating correct subject field succeeds as expected.\n+     * @throws Exception in case of any unexpected errors\n+     */\n+    @Test\n+    public void signProfileValidateFieldSuccessfully() throws Exception {\n+        getSignProfile().validateSubjectField(\n+                new DnFieldValueImpl(\"C\", \"XX\")\n+        );\n+    }\n+\n+    /**\n+     * Tests whether validating unknown subject field fails as expected.\n+     * @throws Exception in case of any unexpected errors\n+     */\n+    @Test(expected = RuntimeException.class)\n+    public void signProfileFailToValidateUnknownField() throws Exception {\n+        getSignProfile().validateSubjectField(\n+                new DnFieldValueImpl(\"X\", \"foo\")\n+        );\n+    }\n+\n+    /**\n+     * Tests whether validating black subject field of sign profile fails\n+     * as expected.\n+     * @throws Exception in case of any unexpected errors\n+     */\n+    @Test(expected = RuntimeException.class)\n+    public void signProfileFailToValidateBlankField() throws Exception {\n+        getSignProfile().validateSubjectField(\n+                new DnFieldValueImpl(\"O\", \"\")\n+        );\n+    }\n+\n+    /**\n+     * Tests whether creating subject Dn of sign profile succeeds as expected.\n+     */\n+    @Test\n+    public void signProfileCreateSubjectDn() {\n+        assertEquals(\n+                new X500Principal(\"C=foo, O=bar, CN=baz\"),\n+                getSignProfile().createSubjectDn(\n+                        new DnFieldValue[] {\n+                                new DnFieldValueImpl(\"C\", \"foo\"),\n+                                new DnFieldValueImpl(\"O\", \"bar\"),\n+                                new DnFieldValueImpl(\"CN\", \"baz\")\n+                        }\n+                )\n+        );\n+    }\n+\n+    /**\n+     * Tests whether getting subject identifier of sign profile succeeds\n+     * as expected.\n+     */\n+    @Test\n+    public void signProfileGetSubjectIdentifier() {\n+        X509Certificate mockCert = Mockito.mock(X509Certificate.class);\n+        Mockito.when(mockCert.getSubjectX500Principal()).thenReturn(\n+                new X500Principal(\"C=FO, O=XX, OU=Foo, CN=bar, serialNumber=qux\")\n+        );\n+        assertEquals(\n+                ClientId.create(\"XX\", \"Foo\", \"bar\"),\n+                getSignProfile().getSubjectIdentifier(mockCert)\n+        );\n+    }\n+\n+    /**\n+     * Tests whether getting expected fields of auth profile succeeds\n+     * as expected.\n+     */\n+    @Test\n+    public void authProfileSubjectFields() {\n+        DnFieldDescription[] expectedFields = {\n+                new EnumLocalizedFieldDescriptionImpl(\"C\", DnFieldLabelLocalizationKey.COUNTRY_CODE, \"FO\")\n+                        .setReadOnly(true),\n+                new EnumLocalizedFieldDescriptionImpl(\"O\", DnFieldLabelLocalizationKey.INSTANCE_IDENTIFIER_O, \"XX\")\n+                        .setReadOnly(true),\n+                new EnumLocalizedFieldDescriptionImpl(\"CN\", DnFieldLabelLocalizationKey.COMMON_NAME,\n+                        \"XX/foo/bar/server\")\n+                        .setReadOnly(true)\n+        };\n+\n+        assertTrue(\n+                \"Did not get expected fields\" + SecurityServerId.create(\"XX\", \"foo\", \"bar\", \"server\").toShortString(),\n+                Arrays.areEqual(expectedFields, getAuthProfile().getSubjectFields())\n+        );\n+    }\n+\n+    /**\n+     * Tests whether validating correct subject field of auth profile succeeds\n+     * as expected.\n+     * @throws Exception in case of any unexpected errors\n+     */\n+    @Test\n+    public void authProfileValidateFieldSuccessfully() throws Exception {\n+        getAuthProfile().validateSubjectField(\n+                new DnFieldValueImpl(\"C\", \"XX\")\n+        );\n+    }\n+\n+    /**\n+     * Tests whether validating unknown subject field of auth profile fails\n+     * as expected.\n+     * @throws Exception in case of any unexpected errors\n+     */\n+    @Test(expected = Exception.class)\n+    public void authProfileFailToValidateUnknownField() throws Exception {\n+        getAuthProfile().validateSubjectField(\n+                new DnFieldValueImpl(\"X\", \"foo\")\n+        );\n+    }\n+\n+    /**\n+     * Tests whether validating blank subject field of auth profile fails\n+     * as expected.\n+     * @throws Exception in case of any unexpected errors\n+     */\n+    @Test(expected = Exception.class)\n+    public void authProfileFailToValidateBlankField() throws Exception {\n+        getAuthProfile().validateSubjectField(\n+                new DnFieldValueImpl(\"serialNumber\", \"\")\n+        );\n+    }\n+\n+    /**\n+     * Tests whether creating subject Dn of auth profile succeeds as expected.\n+     */\n+    @Test\n+    public void authProfileCreateSubjectDn() {\n+        assertEquals(\n+                new X500Principal(\"C=foo, CN=baz\"),\n+                getAuthProfile().createSubjectDn(\n+                        new DnFieldValue[] {\n+                                new DnFieldValueImpl(\"C\", \"foo\"),\n+                                new DnFieldValueImpl(\"CN\", \"baz\")\n+                        }\n+                )\n+        );\n+    }\n+\n+    // ------------------------------------------------------------------------\n+\n+    private CertificateProfileInfoProvider provider() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6b6c400fef61352527b1549b23a63fe356ef880f"}, "originalPosition": 244}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2763, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}