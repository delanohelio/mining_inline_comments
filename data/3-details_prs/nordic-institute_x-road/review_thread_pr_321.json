{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYzMTQ3MjE0", "number": 321, "reviewThreads": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQwNzoxODozOFrODZZP1Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQxMzoxNzo0MlrODZfMfg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3OTU0NjQ1OnYy", "diffSide": "RIGHT", "path": "src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/openapi/ServiceDescriptionsApiController.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQwNzoxODozOFrOFfwT5A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxMjo1NToyNlrOFhczoA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODg0MTcwMA==", "bodyText": "Should we use the 8 spaces continuation indentation in long method/constructor signatures too? At least it seems to be something that is mostly used in our codebase", "url": "https://github.com/nordic-institute/X-Road/pull/321#discussion_r368841700", "createdAt": "2020-01-21T07:18:38Z", "author": {"login": "carohauta"}, "path": "src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/openapi/ServiceDescriptionsApiController.java", "diffHunk": "@@ -70,15 +71,16 @@\n \n     /**\n      * ServiceDescriptionsApiController constructor\n+     *\n      * @param serviceDescriptionService\n      * @param serviceDescriptionConverter\n      * @param serviceConverter\n      */\n \n     @Autowired\n     public ServiceDescriptionsApiController(ServiceDescriptionService serviceDescriptionService,\n-            ServiceDescriptionConverter serviceDescriptionConverter,\n-            ServiceConverter serviceConverter) {\n+                                            ServiceDescriptionConverter serviceDescriptionConverter,\n+                                            ServiceConverter serviceConverter) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8b1c777ee3498e7d8789dc40edb0d80eb250f7de"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDYxOTI5Ng==", "bodyText": "This is fixed on my IDE so autoformatting should use the correct continuation indentation", "url": "https://github.com/nordic-institute/X-Road/pull/321#discussion_r370619296", "createdAt": "2020-01-24T12:55:26Z", "author": {"login": "TJaakkola"}, "path": "src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/openapi/ServiceDescriptionsApiController.java", "diffHunk": "@@ -70,15 +71,16 @@\n \n     /**\n      * ServiceDescriptionsApiController constructor\n+     *\n      * @param serviceDescriptionService\n      * @param serviceDescriptionConverter\n      * @param serviceConverter\n      */\n \n     @Autowired\n     public ServiceDescriptionsApiController(ServiceDescriptionService serviceDescriptionService,\n-            ServiceDescriptionConverter serviceDescriptionConverter,\n-            ServiceConverter serviceConverter) {\n+                                            ServiceDescriptionConverter serviceDescriptionConverter,\n+                                            ServiceConverter serviceConverter) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODg0MTcwMA=="}, "originalCommit": {"oid": "8b1c777ee3498e7d8789dc40edb0d80eb250f7de"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3OTc1MTQwOnYy", "diffSide": "RIGHT", "path": "src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/openapi/ServiceDescriptionsApiController.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQwODo1Mjo1MVrOFfyQnQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxMjo1NTo1MVrOFhc0TA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODg3MzYyOQ==", "bodyText": "Would it make this method easier to read if the whole if-else-if-else structure was wrapped in just one try-catch instead of repeating the almost same catch clauses in every block?", "url": "https://github.com/nordic-institute/X-Road/pull/321#discussion_r368873629", "createdAt": "2020-01-21T08:52:51Z", "author": {"login": "carohauta"}, "path": "src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/openapi/ServiceDescriptionsApiController.java", "diffHunk": "@@ -127,20 +129,22 @@ public ServiceDescriptionsApiController(ServiceDescriptionService serviceDescrip\n     }\n \n     @Override\n-    @PreAuthorize(\"hasAuthority('EDIT_WSDL')\")\n+    @PreAuthorize(\"hasAnyAuthority('EDIT_WSDL', 'EDIT_OPENAPI3', 'EDIT_REST')\")\n     public ResponseEntity<ServiceDescription> updateServiceDescription(String id,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8b1c777ee3498e7d8789dc40edb0d80eb250f7de"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDYxOTQ2OA==", "bodyText": "Fixed", "url": "https://github.com/nordic-institute/X-Road/pull/321#discussion_r370619468", "createdAt": "2020-01-24T12:55:51Z", "author": {"login": "TJaakkola"}, "path": "src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/openapi/ServiceDescriptionsApiController.java", "diffHunk": "@@ -127,20 +129,22 @@ public ServiceDescriptionsApiController(ServiceDescriptionService serviceDescrip\n     }\n \n     @Override\n-    @PreAuthorize(\"hasAuthority('EDIT_WSDL')\")\n+    @PreAuthorize(\"hasAnyAuthority('EDIT_WSDL', 'EDIT_OPENAPI3', 'EDIT_REST')\")\n     public ResponseEntity<ServiceDescription> updateServiceDescription(String id,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODg3MzYyOQ=="}, "originalCommit": {"oid": "8b1c777ee3498e7d8789dc40edb0d80eb250f7de"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3OTk1NjI5OnYy", "diffSide": "RIGHT", "path": "src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/service/ServiceDescriptionService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQwOTo1OTozNFrOFf0Org==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQwNzo0ODo1N1rOFgS8WA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODkwNTkwMg==", "bodyText": "Will throw an NPE if serviceDescription is null. Should throw ServiceDescriptionNotFoundException", "url": "https://github.com/nordic-institute/X-Road/pull/321#discussion_r368905902", "createdAt": "2020-01-21T09:59:34Z", "author": {"login": "carohauta"}, "path": "src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/service/ServiceDescriptionService.java", "diffHunk": "@@ -498,7 +528,178 @@ public ServiceDescriptionType refreshServiceDescription(Long id, boolean ignoreW\n     }\n \n     /**\n-     * Get one ServiceDescriptionType by id\n+     * Update Rest service description\n+     *\n+     * @param id\n+     * @param url\n+     * @param restServiceCode\n+     * @param newRestServiceCode\n+     * @return {@link ServiceDescriptionType}\n+     * @throws UrlAlreadyExistsException\n+     * @throws ServiceCodeAlreadyExistsException\n+     */\n+    public ServiceDescriptionType updateRestServiceDescription(Long id, String url, String restServiceCode,\n+                                                               String newRestServiceCode)\n+            throws UrlAlreadyExistsException, ServiceCodeAlreadyExistsException {\n+        verifyAuthority(\"EDIT_REST\");\n+\n+        if (newRestServiceCode == null) {\n+            newRestServiceCode = restServiceCode;\n+        }\n+\n+        ServiceDescriptionType serviceDescription = getServiceDescriptiontype(id);\n+        serviceDescription.setUrl(url);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8b1c777ee3498e7d8789dc40edb0d80eb250f7de"}, "originalPosition": 97}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTQwOTExMg==", "bodyText": "Fixed", "url": "https://github.com/nordic-institute/X-Road/pull/321#discussion_r369409112", "createdAt": "2020-01-22T07:48:57Z", "author": {"login": "TJaakkola"}, "path": "src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/service/ServiceDescriptionService.java", "diffHunk": "@@ -498,7 +528,178 @@ public ServiceDescriptionType refreshServiceDescription(Long id, boolean ignoreW\n     }\n \n     /**\n-     * Get one ServiceDescriptionType by id\n+     * Update Rest service description\n+     *\n+     * @param id\n+     * @param url\n+     * @param restServiceCode\n+     * @param newRestServiceCode\n+     * @return {@link ServiceDescriptionType}\n+     * @throws UrlAlreadyExistsException\n+     * @throws ServiceCodeAlreadyExistsException\n+     */\n+    public ServiceDescriptionType updateRestServiceDescription(Long id, String url, String restServiceCode,\n+                                                               String newRestServiceCode)\n+            throws UrlAlreadyExistsException, ServiceCodeAlreadyExistsException {\n+        verifyAuthority(\"EDIT_REST\");\n+\n+        if (newRestServiceCode == null) {\n+            newRestServiceCode = restServiceCode;\n+        }\n+\n+        ServiceDescriptionType serviceDescription = getServiceDescriptiontype(id);\n+        serviceDescription.setUrl(url);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODkwNTkwMg=="}, "originalCommit": {"oid": "8b1c777ee3498e7d8789dc40edb0d80eb250f7de"}, "originalPosition": 97}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4MDAyOTYzOnYy", "diffSide": "RIGHT", "path": "src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/service/ServiceDescriptionService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQxMDoyMjozMVrOFf07YQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxMjo1Njo0N1rOFhc1tQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODkxNzM0NQ==", "bodyText": "Should this throw a checked exception instead so that the API user would get an error code instead of http status 500?", "url": "https://github.com/nordic-institute/X-Road/pull/321#discussion_r368917345", "createdAt": "2020-01-21T10:22:31Z", "author": {"login": "carohauta"}, "path": "src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/service/ServiceDescriptionService.java", "diffHunk": "@@ -498,7 +528,178 @@ public ServiceDescriptionType refreshServiceDescription(Long id, boolean ignoreW\n     }\n \n     /**\n-     * Get one ServiceDescriptionType by id\n+     * Update Rest service description\n+     *\n+     * @param id\n+     * @param url\n+     * @param restServiceCode\n+     * @param newRestServiceCode\n+     * @return {@link ServiceDescriptionType}\n+     * @throws UrlAlreadyExistsException\n+     * @throws ServiceCodeAlreadyExistsException\n+     */\n+    public ServiceDescriptionType updateRestServiceDescription(Long id, String url, String restServiceCode,\n+                                                               String newRestServiceCode)\n+            throws UrlAlreadyExistsException, ServiceCodeAlreadyExistsException {\n+        verifyAuthority(\"EDIT_REST\");\n+\n+        if (newRestServiceCode == null) {\n+            newRestServiceCode = restServiceCode;\n+        }\n+\n+        ServiceDescriptionType serviceDescription = getServiceDescriptiontype(id);\n+        serviceDescription.setUrl(url);\n+        updateServiceCodes(restServiceCode, newRestServiceCode, serviceDescription);\n+\n+        checkDuplicateServiceCodes(serviceDescription);\n+        checkDuplicateUrl(serviceDescription);\n+\n+        clientRepository.saveOrUpdateAndFlush(serviceDescription.getClient());\n+        return serviceDescription;\n+    }\n+\n+    /**\n+     * Update OpenApi3 ServiceDescription\n+     *\n+     * @param id\n+     * @param url\n+     * @param restServiceCode\n+     * @param newRestServiceCode\n+     * @param ignoreWarnings\n+     * @return\n+     * @throws UrlAlreadyExistsException\n+     * @throws ServiceCodeAlreadyExistsException\n+     * @throws UnhandledWarningsException\n+     * @throws OpenApiParser.ParsingException\n+     */\n+    public ServiceDescriptionType updateOpenApi3ServiceDescription(Long id, String url, String restServiceCode,\n+            String newRestServiceCode, Boolean ignoreWarnings) throws UrlAlreadyExistsException,\n+            ServiceCodeAlreadyExistsException, UnhandledWarningsException, OpenApiParser.ParsingException {\n+\n+        verifyAuthority(\"EDIT_OPENAPI3\");\n+        ServiceDescriptionType serviceDescription = getServiceDescriptiontype(id);\n+\n+        if (newRestServiceCode == null) {\n+            newRestServiceCode = restServiceCode;\n+        }\n+\n+        updateServiceCodes(restServiceCode, newRestServiceCode, serviceDescription);\n+\n+        // Parse openapi definition and handle updating endpoints and acls\n+        if (serviceDescription.getUrl() != url) {\n+            parseOpenapi3ToServiceDescription(url, newRestServiceCode, ignoreWarnings, serviceDescription);\n+        }\n+\n+        checkDuplicateServiceCodes(serviceDescription);\n+        checkDuplicateUrl(serviceDescription);\n+\n+        clientRepository.saveOrUpdateAndFlush(serviceDescription.getClient());\n+\n+        return serviceDescription;\n+    }\n+\n+    /**\n+     * Parse OpenApi3 description and update endpoints and acls in ServiceDescription accordingly\n+     *\n+     * @param url\n+     * @param serviceCode\n+     * @param ignoreWarnings\n+     * @param serviceDescription\n+     * @throws OpenApiParser.ParsingException\n+     * @throws UnhandledWarningsException\n+     */\n+    private void parseOpenapi3ToServiceDescription(String url, String serviceCode, boolean ignoreWarnings,\n+                                                   ServiceDescriptionType serviceDescription) throws\n+            OpenApiParser.ParsingException, UnhandledWarningsException {\n+        OpenApiParser.Result result = openApiParser.parse(url);\n+        if (!ignoreWarnings && result.hasWarnings()) {\n+            WarningDeviation openapiParserWarnings = new WarningDeviation(\"OpenapiParserWarnings\",\n+                    result.getWarnings());\n+            throw new UnhandledWarningsException(Arrays.asList(openapiParserWarnings));\n+        }\n+\n+        // Update url\n+        updateServiceDescriptionUrl(serviceDescription, serviceCode, url);\n+\n+        // Create endpoints from parsed results\n+        List<EndpointType> parsedEndpoints = result.getOperations().stream()\n+                .map(operation -> new EndpointType(serviceCode, operation.getMethod(), operation.getPath(),\n+                        true))\n+                .collect(Collectors.toList());\n+        parsedEndpoints.add(new EndpointType(serviceCode, \"*\", \"**\", true));\n+\n+        // Change existing, manually added, endpoints to generated if they're found from parsedEndpoints\n+        serviceDescription.getClient().getEndpoint().forEach(ep -> {\n+            if (parsedEndpoints.stream().anyMatch(parsedEp -> parsedEp.isEquivalent(ep))) {\n+                ep.setGenerated(true);\n+            }\n+        });\n+\n+        // Remove ACLs that don't exist in the parsed endpoints list\n+        serviceDescription.getClient().getAcl().removeIf(acl ->\n+                acl.getEndpoint().isGenerated()\n+                        && !parsedEndpoints.stream().anyMatch(endpoint -> acl.getEndpoint().isEquivalent(endpoint)));\n+\n+\n+        // Remove generated endpoints that are not found from the parsed endpoints\n+        serviceDescription.getClient().getEndpoint().removeIf(ep -> {\n+            return ep.isGenerated() && !parsedEndpoints.stream()\n+                    .anyMatch(parsedEp -> parsedEp.isEquivalent(ep));\n+        });\n+\n+        // Add parsed endpoints to endpoints list if it is not already there\n+        serviceDescription.getClient().getEndpoint().addAll(\n+                parsedEndpoints.stream()\n+                        .filter(parsedEp -> !serviceDescription.getClient().getEndpoint()\n+                            .stream()\n+                            .anyMatch(ep -> ep.isEquivalent(parsedEp)))\n+                            .collect(Collectors.toList()));\n+    }\n+\n+    /**\n+     * Updates the ServiceCodes of Endpoints and Service linked to given ServiceDescription\n+     *\n+     * @param serviceCode\n+     * @param newserviceCode\n+     * @param serviceDescriptiontype\n+     */\n+    private void updateServiceCodes(String serviceCode, String newserviceCode,\n+                                          ServiceDescriptionType serviceDescriptiontype) {\n+        // Update endpoint service codes\n+        ClientType client = serviceDescriptiontype.getClient();\n+        client.getEndpoint().stream()\n+                .filter(e -> e.getServiceCode().equals(serviceCode))\n+                .forEach(e -> e.setServiceCode(newserviceCode));\n+\n+        // Update service service code\n+        ServiceType service = serviceDescriptiontype.getService().stream()\n+                .filter(s -> serviceCode.equals(s.getServiceCode()))\n+                .findFirst()\n+                .orElseThrow(() -> new RuntimeException(\"Service with servicecode: \" + serviceCode", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8b1c777ee3498e7d8789dc40edb0d80eb250f7de"}, "originalPosition": 224}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDYxOTgyOQ==", "bodyText": "Changed exception thrown to ServiceNotFoundException", "url": "https://github.com/nordic-institute/X-Road/pull/321#discussion_r370619829", "createdAt": "2020-01-24T12:56:47Z", "author": {"login": "TJaakkola"}, "path": "src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/service/ServiceDescriptionService.java", "diffHunk": "@@ -498,7 +528,178 @@ public ServiceDescriptionType refreshServiceDescription(Long id, boolean ignoreW\n     }\n \n     /**\n-     * Get one ServiceDescriptionType by id\n+     * Update Rest service description\n+     *\n+     * @param id\n+     * @param url\n+     * @param restServiceCode\n+     * @param newRestServiceCode\n+     * @return {@link ServiceDescriptionType}\n+     * @throws UrlAlreadyExistsException\n+     * @throws ServiceCodeAlreadyExistsException\n+     */\n+    public ServiceDescriptionType updateRestServiceDescription(Long id, String url, String restServiceCode,\n+                                                               String newRestServiceCode)\n+            throws UrlAlreadyExistsException, ServiceCodeAlreadyExistsException {\n+        verifyAuthority(\"EDIT_REST\");\n+\n+        if (newRestServiceCode == null) {\n+            newRestServiceCode = restServiceCode;\n+        }\n+\n+        ServiceDescriptionType serviceDescription = getServiceDescriptiontype(id);\n+        serviceDescription.setUrl(url);\n+        updateServiceCodes(restServiceCode, newRestServiceCode, serviceDescription);\n+\n+        checkDuplicateServiceCodes(serviceDescription);\n+        checkDuplicateUrl(serviceDescription);\n+\n+        clientRepository.saveOrUpdateAndFlush(serviceDescription.getClient());\n+        return serviceDescription;\n+    }\n+\n+    /**\n+     * Update OpenApi3 ServiceDescription\n+     *\n+     * @param id\n+     * @param url\n+     * @param restServiceCode\n+     * @param newRestServiceCode\n+     * @param ignoreWarnings\n+     * @return\n+     * @throws UrlAlreadyExistsException\n+     * @throws ServiceCodeAlreadyExistsException\n+     * @throws UnhandledWarningsException\n+     * @throws OpenApiParser.ParsingException\n+     */\n+    public ServiceDescriptionType updateOpenApi3ServiceDescription(Long id, String url, String restServiceCode,\n+            String newRestServiceCode, Boolean ignoreWarnings) throws UrlAlreadyExistsException,\n+            ServiceCodeAlreadyExistsException, UnhandledWarningsException, OpenApiParser.ParsingException {\n+\n+        verifyAuthority(\"EDIT_OPENAPI3\");\n+        ServiceDescriptionType serviceDescription = getServiceDescriptiontype(id);\n+\n+        if (newRestServiceCode == null) {\n+            newRestServiceCode = restServiceCode;\n+        }\n+\n+        updateServiceCodes(restServiceCode, newRestServiceCode, serviceDescription);\n+\n+        // Parse openapi definition and handle updating endpoints and acls\n+        if (serviceDescription.getUrl() != url) {\n+            parseOpenapi3ToServiceDescription(url, newRestServiceCode, ignoreWarnings, serviceDescription);\n+        }\n+\n+        checkDuplicateServiceCodes(serviceDescription);\n+        checkDuplicateUrl(serviceDescription);\n+\n+        clientRepository.saveOrUpdateAndFlush(serviceDescription.getClient());\n+\n+        return serviceDescription;\n+    }\n+\n+    /**\n+     * Parse OpenApi3 description and update endpoints and acls in ServiceDescription accordingly\n+     *\n+     * @param url\n+     * @param serviceCode\n+     * @param ignoreWarnings\n+     * @param serviceDescription\n+     * @throws OpenApiParser.ParsingException\n+     * @throws UnhandledWarningsException\n+     */\n+    private void parseOpenapi3ToServiceDescription(String url, String serviceCode, boolean ignoreWarnings,\n+                                                   ServiceDescriptionType serviceDescription) throws\n+            OpenApiParser.ParsingException, UnhandledWarningsException {\n+        OpenApiParser.Result result = openApiParser.parse(url);\n+        if (!ignoreWarnings && result.hasWarnings()) {\n+            WarningDeviation openapiParserWarnings = new WarningDeviation(\"OpenapiParserWarnings\",\n+                    result.getWarnings());\n+            throw new UnhandledWarningsException(Arrays.asList(openapiParserWarnings));\n+        }\n+\n+        // Update url\n+        updateServiceDescriptionUrl(serviceDescription, serviceCode, url);\n+\n+        // Create endpoints from parsed results\n+        List<EndpointType> parsedEndpoints = result.getOperations().stream()\n+                .map(operation -> new EndpointType(serviceCode, operation.getMethod(), operation.getPath(),\n+                        true))\n+                .collect(Collectors.toList());\n+        parsedEndpoints.add(new EndpointType(serviceCode, \"*\", \"**\", true));\n+\n+        // Change existing, manually added, endpoints to generated if they're found from parsedEndpoints\n+        serviceDescription.getClient().getEndpoint().forEach(ep -> {\n+            if (parsedEndpoints.stream().anyMatch(parsedEp -> parsedEp.isEquivalent(ep))) {\n+                ep.setGenerated(true);\n+            }\n+        });\n+\n+        // Remove ACLs that don't exist in the parsed endpoints list\n+        serviceDescription.getClient().getAcl().removeIf(acl ->\n+                acl.getEndpoint().isGenerated()\n+                        && !parsedEndpoints.stream().anyMatch(endpoint -> acl.getEndpoint().isEquivalent(endpoint)));\n+\n+\n+        // Remove generated endpoints that are not found from the parsed endpoints\n+        serviceDescription.getClient().getEndpoint().removeIf(ep -> {\n+            return ep.isGenerated() && !parsedEndpoints.stream()\n+                    .anyMatch(parsedEp -> parsedEp.isEquivalent(ep));\n+        });\n+\n+        // Add parsed endpoints to endpoints list if it is not already there\n+        serviceDescription.getClient().getEndpoint().addAll(\n+                parsedEndpoints.stream()\n+                        .filter(parsedEp -> !serviceDescription.getClient().getEndpoint()\n+                            .stream()\n+                            .anyMatch(ep -> ep.isEquivalent(parsedEp)))\n+                            .collect(Collectors.toList()));\n+    }\n+\n+    /**\n+     * Updates the ServiceCodes of Endpoints and Service linked to given ServiceDescription\n+     *\n+     * @param serviceCode\n+     * @param newserviceCode\n+     * @param serviceDescriptiontype\n+     */\n+    private void updateServiceCodes(String serviceCode, String newserviceCode,\n+                                          ServiceDescriptionType serviceDescriptiontype) {\n+        // Update endpoint service codes\n+        ClientType client = serviceDescriptiontype.getClient();\n+        client.getEndpoint().stream()\n+                .filter(e -> e.getServiceCode().equals(serviceCode))\n+                .forEach(e -> e.setServiceCode(newserviceCode));\n+\n+        // Update service service code\n+        ServiceType service = serviceDescriptiontype.getService().stream()\n+                .filter(s -> serviceCode.equals(s.getServiceCode()))\n+                .findFirst()\n+                .orElseThrow(() -> new RuntimeException(\"Service with servicecode: \" + serviceCode", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODkxNzM0NQ=="}, "originalCommit": {"oid": "8b1c777ee3498e7d8789dc40edb0d80eb250f7de"}, "originalPosition": 224}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4MDA3NTgzOnYy", "diffSide": "RIGHT", "path": "src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/service/ServiceDescriptionService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQxMDozNjozOFrOFf1XLA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxMjo1NjoxNVrOFhc0zA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODkyNDQ2MA==", "bodyText": "The DescriptionType should be checked and WrongServiceDescriptionTypeException thrown if the type is not REST", "url": "https://github.com/nordic-institute/X-Road/pull/321#discussion_r368924460", "createdAt": "2020-01-21T10:36:38Z", "author": {"login": "carohauta"}, "path": "src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/service/ServiceDescriptionService.java", "diffHunk": "@@ -498,7 +528,178 @@ public ServiceDescriptionType refreshServiceDescription(Long id, boolean ignoreW\n     }\n \n     /**\n-     * Get one ServiceDescriptionType by id\n+     * Update Rest service description\n+     *\n+     * @param id\n+     * @param url\n+     * @param restServiceCode\n+     * @param newRestServiceCode\n+     * @return {@link ServiceDescriptionType}\n+     * @throws UrlAlreadyExistsException\n+     * @throws ServiceCodeAlreadyExistsException\n+     */\n+    public ServiceDescriptionType updateRestServiceDescription(Long id, String url, String restServiceCode,\n+                                                               String newRestServiceCode)\n+            throws UrlAlreadyExistsException, ServiceCodeAlreadyExistsException {\n+        verifyAuthority(\"EDIT_REST\");\n+\n+        if (newRestServiceCode == null) {\n+            newRestServiceCode = restServiceCode;\n+        }\n+\n+        ServiceDescriptionType serviceDescription = getServiceDescriptiontype(id);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8b1c777ee3498e7d8789dc40edb0d80eb250f7de"}, "originalPosition": 96}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDYxOTU5Ng==", "bodyText": "Fixed", "url": "https://github.com/nordic-institute/X-Road/pull/321#discussion_r370619596", "createdAt": "2020-01-24T12:56:15Z", "author": {"login": "TJaakkola"}, "path": "src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/service/ServiceDescriptionService.java", "diffHunk": "@@ -498,7 +528,178 @@ public ServiceDescriptionType refreshServiceDescription(Long id, boolean ignoreW\n     }\n \n     /**\n-     * Get one ServiceDescriptionType by id\n+     * Update Rest service description\n+     *\n+     * @param id\n+     * @param url\n+     * @param restServiceCode\n+     * @param newRestServiceCode\n+     * @return {@link ServiceDescriptionType}\n+     * @throws UrlAlreadyExistsException\n+     * @throws ServiceCodeAlreadyExistsException\n+     */\n+    public ServiceDescriptionType updateRestServiceDescription(Long id, String url, String restServiceCode,\n+                                                               String newRestServiceCode)\n+            throws UrlAlreadyExistsException, ServiceCodeAlreadyExistsException {\n+        verifyAuthority(\"EDIT_REST\");\n+\n+        if (newRestServiceCode == null) {\n+            newRestServiceCode = restServiceCode;\n+        }\n+\n+        ServiceDescriptionType serviceDescription = getServiceDescriptiontype(id);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODkyNDQ2MA=="}, "originalCommit": {"oid": "8b1c777ee3498e7d8789dc40edb0d80eb250f7de"}, "originalPosition": 96}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4MDA4MDQ2OnYy", "diffSide": "RIGHT", "path": "src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/service/ServiceDescriptionService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQxMDozODoxMVrOFf1Z8Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxMzoxMDozMlrOFhdKtw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODkyNTE2OQ==", "bodyText": "The DescriptionType should be checked and WrongServiceDescriptionTypeException thrown if the type is not OPENAPI3. Also add the same null check as commented above", "url": "https://github.com/nordic-institute/X-Road/pull/321#discussion_r368925169", "createdAt": "2020-01-21T10:38:11Z", "author": {"login": "carohauta"}, "path": "src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/service/ServiceDescriptionService.java", "diffHunk": "@@ -498,7 +528,178 @@ public ServiceDescriptionType refreshServiceDescription(Long id, boolean ignoreW\n     }\n \n     /**\n-     * Get one ServiceDescriptionType by id\n+     * Update Rest service description\n+     *\n+     * @param id\n+     * @param url\n+     * @param restServiceCode\n+     * @param newRestServiceCode\n+     * @return {@link ServiceDescriptionType}\n+     * @throws UrlAlreadyExistsException\n+     * @throws ServiceCodeAlreadyExistsException\n+     */\n+    public ServiceDescriptionType updateRestServiceDescription(Long id, String url, String restServiceCode,\n+                                                               String newRestServiceCode)\n+            throws UrlAlreadyExistsException, ServiceCodeAlreadyExistsException {\n+        verifyAuthority(\"EDIT_REST\");\n+\n+        if (newRestServiceCode == null) {\n+            newRestServiceCode = restServiceCode;\n+        }\n+\n+        ServiceDescriptionType serviceDescription = getServiceDescriptiontype(id);\n+        serviceDescription.setUrl(url);\n+        updateServiceCodes(restServiceCode, newRestServiceCode, serviceDescription);\n+\n+        checkDuplicateServiceCodes(serviceDescription);\n+        checkDuplicateUrl(serviceDescription);\n+\n+        clientRepository.saveOrUpdateAndFlush(serviceDescription.getClient());\n+        return serviceDescription;\n+    }\n+\n+    /**\n+     * Update OpenApi3 ServiceDescription\n+     *\n+     * @param id\n+     * @param url\n+     * @param restServiceCode\n+     * @param newRestServiceCode\n+     * @param ignoreWarnings\n+     * @return\n+     * @throws UrlAlreadyExistsException\n+     * @throws ServiceCodeAlreadyExistsException\n+     * @throws UnhandledWarningsException\n+     * @throws OpenApiParser.ParsingException\n+     */\n+    public ServiceDescriptionType updateOpenApi3ServiceDescription(Long id, String url, String restServiceCode,\n+            String newRestServiceCode, Boolean ignoreWarnings) throws UrlAlreadyExistsException,\n+            ServiceCodeAlreadyExistsException, UnhandledWarningsException, OpenApiParser.ParsingException {\n+\n+        verifyAuthority(\"EDIT_OPENAPI3\");\n+        ServiceDescriptionType serviceDescription = getServiceDescriptiontype(id);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8b1c777ee3498e7d8789dc40edb0d80eb250f7de"}, "originalPosition": 126}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDYyNTIwNw==", "bodyText": "Fixed", "url": "https://github.com/nordic-institute/X-Road/pull/321#discussion_r370625207", "createdAt": "2020-01-24T13:10:32Z", "author": {"login": "TJaakkola"}, "path": "src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/service/ServiceDescriptionService.java", "diffHunk": "@@ -498,7 +528,178 @@ public ServiceDescriptionType refreshServiceDescription(Long id, boolean ignoreW\n     }\n \n     /**\n-     * Get one ServiceDescriptionType by id\n+     * Update Rest service description\n+     *\n+     * @param id\n+     * @param url\n+     * @param restServiceCode\n+     * @param newRestServiceCode\n+     * @return {@link ServiceDescriptionType}\n+     * @throws UrlAlreadyExistsException\n+     * @throws ServiceCodeAlreadyExistsException\n+     */\n+    public ServiceDescriptionType updateRestServiceDescription(Long id, String url, String restServiceCode,\n+                                                               String newRestServiceCode)\n+            throws UrlAlreadyExistsException, ServiceCodeAlreadyExistsException {\n+        verifyAuthority(\"EDIT_REST\");\n+\n+        if (newRestServiceCode == null) {\n+            newRestServiceCode = restServiceCode;\n+        }\n+\n+        ServiceDescriptionType serviceDescription = getServiceDescriptiontype(id);\n+        serviceDescription.setUrl(url);\n+        updateServiceCodes(restServiceCode, newRestServiceCode, serviceDescription);\n+\n+        checkDuplicateServiceCodes(serviceDescription);\n+        checkDuplicateUrl(serviceDescription);\n+\n+        clientRepository.saveOrUpdateAndFlush(serviceDescription.getClient());\n+        return serviceDescription;\n+    }\n+\n+    /**\n+     * Update OpenApi3 ServiceDescription\n+     *\n+     * @param id\n+     * @param url\n+     * @param restServiceCode\n+     * @param newRestServiceCode\n+     * @param ignoreWarnings\n+     * @return\n+     * @throws UrlAlreadyExistsException\n+     * @throws ServiceCodeAlreadyExistsException\n+     * @throws UnhandledWarningsException\n+     * @throws OpenApiParser.ParsingException\n+     */\n+    public ServiceDescriptionType updateOpenApi3ServiceDescription(Long id, String url, String restServiceCode,\n+            String newRestServiceCode, Boolean ignoreWarnings) throws UrlAlreadyExistsException,\n+            ServiceCodeAlreadyExistsException, UnhandledWarningsException, OpenApiParser.ParsingException {\n+\n+        verifyAuthority(\"EDIT_OPENAPI3\");\n+        ServiceDescriptionType serviceDescription = getServiceDescriptiontype(id);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODkyNTE2OQ=="}, "originalCommit": {"oid": "8b1c777ee3498e7d8789dc40edb0d80eb250f7de"}, "originalPosition": 126}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4MDQ3NDk2OnYy", "diffSide": "RIGHT", "path": "src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/service/ServiceDescriptionService.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQxMzowMjoxM1rOFf5J5w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxNDowNjowOFrOFhep9w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODk4NjU5OQ==", "bodyText": "Should this also check for duplicate endpoints? There is a unique constraint index for endpoints saying that there cannot be two endpoints with the same client_id & servicecode & method & path.\nDuplicate endpoints should probably be checked when adding/updating either REST or OPENAPI3 ServiceDescriptions.", "url": "https://github.com/nordic-institute/X-Road/pull/321#discussion_r368986599", "createdAt": "2020-01-21T13:02:13Z", "author": {"login": "carohauta"}, "path": "src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/service/ServiceDescriptionService.java", "diffHunk": "@@ -498,7 +528,178 @@ public ServiceDescriptionType refreshServiceDescription(Long id, boolean ignoreW\n     }\n \n     /**\n-     * Get one ServiceDescriptionType by id\n+     * Update Rest service description\n+     *\n+     * @param id\n+     * @param url\n+     * @param restServiceCode\n+     * @param newRestServiceCode\n+     * @return {@link ServiceDescriptionType}\n+     * @throws UrlAlreadyExistsException\n+     * @throws ServiceCodeAlreadyExistsException\n+     */\n+    public ServiceDescriptionType updateRestServiceDescription(Long id, String url, String restServiceCode,\n+                                                               String newRestServiceCode)\n+            throws UrlAlreadyExistsException, ServiceCodeAlreadyExistsException {\n+        verifyAuthority(\"EDIT_REST\");\n+\n+        if (newRestServiceCode == null) {\n+            newRestServiceCode = restServiceCode;\n+        }\n+\n+        ServiceDescriptionType serviceDescription = getServiceDescriptiontype(id);\n+        serviceDescription.setUrl(url);\n+        updateServiceCodes(restServiceCode, newRestServiceCode, serviceDescription);\n+\n+        checkDuplicateServiceCodes(serviceDescription);\n+        checkDuplicateUrl(serviceDescription);\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8b1c777ee3498e7d8789dc40edb0d80eb250f7de"}, "originalPosition": 102}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTUyMTczMA==", "bodyText": "This is good observation. I'm pretty sure no changes need to made because:\ncheckDuplicateServiceCodes makes sure there are no duplicate service codes for the linked client.\n\nAdd rest adds always unique servicecode to client ( and */  method/path endpoint) -> no need to check duplicate endpoint\nEdit rest doesn't touch method/path and if it changes servicecode it's uniqueness is ensured in checkDuplicateServiceCodes\nAdd openapi adds unique servicecode to client and 1-n endpoints but it shouldn't be necessary to handle duplicate endpoints as parsing openapi description will throw ParsingException in that case. I added a unit test for that.\nEdit openapi3 changes the servicecode and/or endpoints but yet again there will not be duplicate servicecode and if an existing, manually added endpoint, is equivalent (See EndpointType.java changes in this PR) to one in openapi3 description it will be changed to generated = true. Also again there can't be duplicate endpoints in the openapi3 description or ParsingException is thrown", "url": "https://github.com/nordic-institute/X-Road/pull/321#discussion_r369521730", "createdAt": "2020-01-22T12:03:55Z", "author": {"login": "TJaakkola"}, "path": "src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/service/ServiceDescriptionService.java", "diffHunk": "@@ -498,7 +528,178 @@ public ServiceDescriptionType refreshServiceDescription(Long id, boolean ignoreW\n     }\n \n     /**\n-     * Get one ServiceDescriptionType by id\n+     * Update Rest service description\n+     *\n+     * @param id\n+     * @param url\n+     * @param restServiceCode\n+     * @param newRestServiceCode\n+     * @return {@link ServiceDescriptionType}\n+     * @throws UrlAlreadyExistsException\n+     * @throws ServiceCodeAlreadyExistsException\n+     */\n+    public ServiceDescriptionType updateRestServiceDescription(Long id, String url, String restServiceCode,\n+                                                               String newRestServiceCode)\n+            throws UrlAlreadyExistsException, ServiceCodeAlreadyExistsException {\n+        verifyAuthority(\"EDIT_REST\");\n+\n+        if (newRestServiceCode == null) {\n+            newRestServiceCode = restServiceCode;\n+        }\n+\n+        ServiceDescriptionType serviceDescription = getServiceDescriptiontype(id);\n+        serviceDescription.setUrl(url);\n+        updateServiceCodes(restServiceCode, newRestServiceCode, serviceDescription);\n+\n+        checkDuplicateServiceCodes(serviceDescription);\n+        checkDuplicateUrl(serviceDescription);\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODk4NjU5OQ=="}, "originalCommit": {"oid": "8b1c777ee3498e7d8789dc40edb0d80eb250f7de"}, "originalPosition": 102}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDY0OTU5MQ==", "bodyText": "As it turned out this was caused by Spring not by default rolling back transactions if a checked exception was thrown. This has also been fixed now", "url": "https://github.com/nordic-institute/X-Road/pull/321#discussion_r370649591", "createdAt": "2020-01-24T14:06:08Z", "author": {"login": "carohauta"}, "path": "src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/service/ServiceDescriptionService.java", "diffHunk": "@@ -498,7 +528,178 @@ public ServiceDescriptionType refreshServiceDescription(Long id, boolean ignoreW\n     }\n \n     /**\n-     * Get one ServiceDescriptionType by id\n+     * Update Rest service description\n+     *\n+     * @param id\n+     * @param url\n+     * @param restServiceCode\n+     * @param newRestServiceCode\n+     * @return {@link ServiceDescriptionType}\n+     * @throws UrlAlreadyExistsException\n+     * @throws ServiceCodeAlreadyExistsException\n+     */\n+    public ServiceDescriptionType updateRestServiceDescription(Long id, String url, String restServiceCode,\n+                                                               String newRestServiceCode)\n+            throws UrlAlreadyExistsException, ServiceCodeAlreadyExistsException {\n+        verifyAuthority(\"EDIT_REST\");\n+\n+        if (newRestServiceCode == null) {\n+            newRestServiceCode = restServiceCode;\n+        }\n+\n+        ServiceDescriptionType serviceDescription = getServiceDescriptiontype(id);\n+        serviceDescription.setUrl(url);\n+        updateServiceCodes(restServiceCode, newRestServiceCode, serviceDescription);\n+\n+        checkDuplicateServiceCodes(serviceDescription);\n+        checkDuplicateUrl(serviceDescription);\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODk4NjU5OQ=="}, "originalCommit": {"oid": "8b1c777ee3498e7d8789dc40edb0d80eb250f7de"}, "originalPosition": 102}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4MDQ5MjEzOnYy", "diffSide": "RIGHT", "path": "src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/service/ServiceDescriptionService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQxMzowODowOVrOFf5UGQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQxMzowODowOVrOFf5UGQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODk4OTIwOQ==", "bodyText": "Duplicate endpoint check here too", "url": "https://github.com/nordic-institute/X-Road/pull/321#discussion_r368989209", "createdAt": "2020-01-21T13:08:09Z", "author": {"login": "carohauta"}, "path": "src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/service/ServiceDescriptionService.java", "diffHunk": "@@ -498,7 +528,178 @@ public ServiceDescriptionType refreshServiceDescription(Long id, boolean ignoreW\n     }\n \n     /**\n-     * Get one ServiceDescriptionType by id\n+     * Update Rest service description\n+     *\n+     * @param id\n+     * @param url\n+     * @param restServiceCode\n+     * @param newRestServiceCode\n+     * @return {@link ServiceDescriptionType}\n+     * @throws UrlAlreadyExistsException\n+     * @throws ServiceCodeAlreadyExistsException\n+     */\n+    public ServiceDescriptionType updateRestServiceDescription(Long id, String url, String restServiceCode,\n+                                                               String newRestServiceCode)\n+            throws UrlAlreadyExistsException, ServiceCodeAlreadyExistsException {\n+        verifyAuthority(\"EDIT_REST\");\n+\n+        if (newRestServiceCode == null) {\n+            newRestServiceCode = restServiceCode;\n+        }\n+\n+        ServiceDescriptionType serviceDescription = getServiceDescriptiontype(id);\n+        serviceDescription.setUrl(url);\n+        updateServiceCodes(restServiceCode, newRestServiceCode, serviceDescription);\n+\n+        checkDuplicateServiceCodes(serviceDescription);\n+        checkDuplicateUrl(serviceDescription);\n+\n+        clientRepository.saveOrUpdateAndFlush(serviceDescription.getClient());\n+        return serviceDescription;\n+    }\n+\n+    /**\n+     * Update OpenApi3 ServiceDescription\n+     *\n+     * @param id\n+     * @param url\n+     * @param restServiceCode\n+     * @param newRestServiceCode\n+     * @param ignoreWarnings\n+     * @return\n+     * @throws UrlAlreadyExistsException\n+     * @throws ServiceCodeAlreadyExistsException\n+     * @throws UnhandledWarningsException\n+     * @throws OpenApiParser.ParsingException\n+     */\n+    public ServiceDescriptionType updateOpenApi3ServiceDescription(Long id, String url, String restServiceCode,\n+            String newRestServiceCode, Boolean ignoreWarnings) throws UrlAlreadyExistsException,\n+            ServiceCodeAlreadyExistsException, UnhandledWarningsException, OpenApiParser.ParsingException {\n+\n+        verifyAuthority(\"EDIT_OPENAPI3\");\n+        ServiceDescriptionType serviceDescription = getServiceDescriptiontype(id);\n+\n+        if (newRestServiceCode == null) {\n+            newRestServiceCode = restServiceCode;\n+        }\n+\n+        updateServiceCodes(restServiceCode, newRestServiceCode, serviceDescription);\n+\n+        // Parse openapi definition and handle updating endpoints and acls\n+        if (serviceDescription.getUrl() != url) {\n+            parseOpenapi3ToServiceDescription(url, newRestServiceCode, ignoreWarnings, serviceDescription);\n+        }\n+\n+        checkDuplicateServiceCodes(serviceDescription);\n+        checkDuplicateUrl(serviceDescription);\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8b1c777ee3498e7d8789dc40edb0d80eb250f7de"}, "originalPosition": 141}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4MDQ5NjE2OnYy", "diffSide": "RIGHT", "path": "src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/service/ServiceDescriptionService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQxMzowOTo0NlrOFf5WnA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxMjoxMDozOFrOFgZ91Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODk4OTg1Mg==", "bodyText": "Should use !....equals() instead of !=", "url": "https://github.com/nordic-institute/X-Road/pull/321#discussion_r368989852", "createdAt": "2020-01-21T13:09:46Z", "author": {"login": "carohauta"}, "path": "src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/service/ServiceDescriptionService.java", "diffHunk": "@@ -498,7 +528,178 @@ public ServiceDescriptionType refreshServiceDescription(Long id, boolean ignoreW\n     }\n \n     /**\n-     * Get one ServiceDescriptionType by id\n+     * Update Rest service description\n+     *\n+     * @param id\n+     * @param url\n+     * @param restServiceCode\n+     * @param newRestServiceCode\n+     * @return {@link ServiceDescriptionType}\n+     * @throws UrlAlreadyExistsException\n+     * @throws ServiceCodeAlreadyExistsException\n+     */\n+    public ServiceDescriptionType updateRestServiceDescription(Long id, String url, String restServiceCode,\n+                                                               String newRestServiceCode)\n+            throws UrlAlreadyExistsException, ServiceCodeAlreadyExistsException {\n+        verifyAuthority(\"EDIT_REST\");\n+\n+        if (newRestServiceCode == null) {\n+            newRestServiceCode = restServiceCode;\n+        }\n+\n+        ServiceDescriptionType serviceDescription = getServiceDescriptiontype(id);\n+        serviceDescription.setUrl(url);\n+        updateServiceCodes(restServiceCode, newRestServiceCode, serviceDescription);\n+\n+        checkDuplicateServiceCodes(serviceDescription);\n+        checkDuplicateUrl(serviceDescription);\n+\n+        clientRepository.saveOrUpdateAndFlush(serviceDescription.getClient());\n+        return serviceDescription;\n+    }\n+\n+    /**\n+     * Update OpenApi3 ServiceDescription\n+     *\n+     * @param id\n+     * @param url\n+     * @param restServiceCode\n+     * @param newRestServiceCode\n+     * @param ignoreWarnings\n+     * @return\n+     * @throws UrlAlreadyExistsException\n+     * @throws ServiceCodeAlreadyExistsException\n+     * @throws UnhandledWarningsException\n+     * @throws OpenApiParser.ParsingException\n+     */\n+    public ServiceDescriptionType updateOpenApi3ServiceDescription(Long id, String url, String restServiceCode,\n+            String newRestServiceCode, Boolean ignoreWarnings) throws UrlAlreadyExistsException,\n+            ServiceCodeAlreadyExistsException, UnhandledWarningsException, OpenApiParser.ParsingException {\n+\n+        verifyAuthority(\"EDIT_OPENAPI3\");\n+        ServiceDescriptionType serviceDescription = getServiceDescriptiontype(id);\n+\n+        if (newRestServiceCode == null) {\n+            newRestServiceCode = restServiceCode;\n+        }\n+\n+        updateServiceCodes(restServiceCode, newRestServiceCode, serviceDescription);\n+\n+        // Parse openapi definition and handle updating endpoints and acls\n+        if (serviceDescription.getUrl() != url) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8b1c777ee3498e7d8789dc40edb0d80eb250f7de"}, "originalPosition": 135}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTUyNDE4MQ==", "bodyText": "fixed", "url": "https://github.com/nordic-institute/X-Road/pull/321#discussion_r369524181", "createdAt": "2020-01-22T12:10:38Z", "author": {"login": "TJaakkola"}, "path": "src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/service/ServiceDescriptionService.java", "diffHunk": "@@ -498,7 +528,178 @@ public ServiceDescriptionType refreshServiceDescription(Long id, boolean ignoreW\n     }\n \n     /**\n-     * Get one ServiceDescriptionType by id\n+     * Update Rest service description\n+     *\n+     * @param id\n+     * @param url\n+     * @param restServiceCode\n+     * @param newRestServiceCode\n+     * @return {@link ServiceDescriptionType}\n+     * @throws UrlAlreadyExistsException\n+     * @throws ServiceCodeAlreadyExistsException\n+     */\n+    public ServiceDescriptionType updateRestServiceDescription(Long id, String url, String restServiceCode,\n+                                                               String newRestServiceCode)\n+            throws UrlAlreadyExistsException, ServiceCodeAlreadyExistsException {\n+        verifyAuthority(\"EDIT_REST\");\n+\n+        if (newRestServiceCode == null) {\n+            newRestServiceCode = restServiceCode;\n+        }\n+\n+        ServiceDescriptionType serviceDescription = getServiceDescriptiontype(id);\n+        serviceDescription.setUrl(url);\n+        updateServiceCodes(restServiceCode, newRestServiceCode, serviceDescription);\n+\n+        checkDuplicateServiceCodes(serviceDescription);\n+        checkDuplicateUrl(serviceDescription);\n+\n+        clientRepository.saveOrUpdateAndFlush(serviceDescription.getClient());\n+        return serviceDescription;\n+    }\n+\n+    /**\n+     * Update OpenApi3 ServiceDescription\n+     *\n+     * @param id\n+     * @param url\n+     * @param restServiceCode\n+     * @param newRestServiceCode\n+     * @param ignoreWarnings\n+     * @return\n+     * @throws UrlAlreadyExistsException\n+     * @throws ServiceCodeAlreadyExistsException\n+     * @throws UnhandledWarningsException\n+     * @throws OpenApiParser.ParsingException\n+     */\n+    public ServiceDescriptionType updateOpenApi3ServiceDescription(Long id, String url, String restServiceCode,\n+            String newRestServiceCode, Boolean ignoreWarnings) throws UrlAlreadyExistsException,\n+            ServiceCodeAlreadyExistsException, UnhandledWarningsException, OpenApiParser.ParsingException {\n+\n+        verifyAuthority(\"EDIT_OPENAPI3\");\n+        ServiceDescriptionType serviceDescription = getServiceDescriptiontype(id);\n+\n+        if (newRestServiceCode == null) {\n+            newRestServiceCode = restServiceCode;\n+        }\n+\n+        updateServiceCodes(restServiceCode, newRestServiceCode, serviceDescription);\n+\n+        // Parse openapi definition and handle updating endpoints and acls\n+        if (serviceDescription.getUrl() != url) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODk4OTg1Mg=="}, "originalCommit": {"oid": "8b1c777ee3498e7d8789dc40edb0d80eb250f7de"}, "originalPosition": 135}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4MDUyMDk0OnYy", "diffSide": "RIGHT", "path": "src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/service/ServiceDescriptionService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQxMzoxNzo0MlrOFf5lbQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxMjoxMDozMVrOFgZ9rg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODk5MzY0NQ==", "bodyText": "There is also noneMatch for a negated anyMatch", "url": "https://github.com/nordic-institute/X-Road/pull/321#discussion_r368993645", "createdAt": "2020-01-21T13:17:42Z", "author": {"login": "carohauta"}, "path": "src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/service/ServiceDescriptionService.java", "diffHunk": "@@ -498,7 +528,178 @@ public ServiceDescriptionType refreshServiceDescription(Long id, boolean ignoreW\n     }\n \n     /**\n-     * Get one ServiceDescriptionType by id\n+     * Update Rest service description\n+     *\n+     * @param id\n+     * @param url\n+     * @param restServiceCode\n+     * @param newRestServiceCode\n+     * @return {@link ServiceDescriptionType}\n+     * @throws UrlAlreadyExistsException\n+     * @throws ServiceCodeAlreadyExistsException\n+     */\n+    public ServiceDescriptionType updateRestServiceDescription(Long id, String url, String restServiceCode,\n+                                                               String newRestServiceCode)\n+            throws UrlAlreadyExistsException, ServiceCodeAlreadyExistsException {\n+        verifyAuthority(\"EDIT_REST\");\n+\n+        if (newRestServiceCode == null) {\n+            newRestServiceCode = restServiceCode;\n+        }\n+\n+        ServiceDescriptionType serviceDescription = getServiceDescriptiontype(id);\n+        serviceDescription.setUrl(url);\n+        updateServiceCodes(restServiceCode, newRestServiceCode, serviceDescription);\n+\n+        checkDuplicateServiceCodes(serviceDescription);\n+        checkDuplicateUrl(serviceDescription);\n+\n+        clientRepository.saveOrUpdateAndFlush(serviceDescription.getClient());\n+        return serviceDescription;\n+    }\n+\n+    /**\n+     * Update OpenApi3 ServiceDescription\n+     *\n+     * @param id\n+     * @param url\n+     * @param restServiceCode\n+     * @param newRestServiceCode\n+     * @param ignoreWarnings\n+     * @return\n+     * @throws UrlAlreadyExistsException\n+     * @throws ServiceCodeAlreadyExistsException\n+     * @throws UnhandledWarningsException\n+     * @throws OpenApiParser.ParsingException\n+     */\n+    public ServiceDescriptionType updateOpenApi3ServiceDescription(Long id, String url, String restServiceCode,\n+            String newRestServiceCode, Boolean ignoreWarnings) throws UrlAlreadyExistsException,\n+            ServiceCodeAlreadyExistsException, UnhandledWarningsException, OpenApiParser.ParsingException {\n+\n+        verifyAuthority(\"EDIT_OPENAPI3\");\n+        ServiceDescriptionType serviceDescription = getServiceDescriptiontype(id);\n+\n+        if (newRestServiceCode == null) {\n+            newRestServiceCode = restServiceCode;\n+        }\n+\n+        updateServiceCodes(restServiceCode, newRestServiceCode, serviceDescription);\n+\n+        // Parse openapi definition and handle updating endpoints and acls\n+        if (serviceDescription.getUrl() != url) {\n+            parseOpenapi3ToServiceDescription(url, newRestServiceCode, ignoreWarnings, serviceDescription);\n+        }\n+\n+        checkDuplicateServiceCodes(serviceDescription);\n+        checkDuplicateUrl(serviceDescription);\n+\n+        clientRepository.saveOrUpdateAndFlush(serviceDescription.getClient());\n+\n+        return serviceDescription;\n+    }\n+\n+    /**\n+     * Parse OpenApi3 description and update endpoints and acls in ServiceDescription accordingly\n+     *\n+     * @param url\n+     * @param serviceCode\n+     * @param ignoreWarnings\n+     * @param serviceDescription\n+     * @throws OpenApiParser.ParsingException\n+     * @throws UnhandledWarningsException\n+     */\n+    private void parseOpenapi3ToServiceDescription(String url, String serviceCode, boolean ignoreWarnings,\n+                                                   ServiceDescriptionType serviceDescription) throws\n+            OpenApiParser.ParsingException, UnhandledWarningsException {\n+        OpenApiParser.Result result = openApiParser.parse(url);\n+        if (!ignoreWarnings && result.hasWarnings()) {\n+            WarningDeviation openapiParserWarnings = new WarningDeviation(\"OpenapiParserWarnings\",\n+                    result.getWarnings());\n+            throw new UnhandledWarningsException(Arrays.asList(openapiParserWarnings));\n+        }\n+\n+        // Update url\n+        updateServiceDescriptionUrl(serviceDescription, serviceCode, url);\n+\n+        // Create endpoints from parsed results\n+        List<EndpointType> parsedEndpoints = result.getOperations().stream()\n+                .map(operation -> new EndpointType(serviceCode, operation.getMethod(), operation.getPath(),\n+                        true))\n+                .collect(Collectors.toList());\n+        parsedEndpoints.add(new EndpointType(serviceCode, \"*\", \"**\", true));\n+\n+        // Change existing, manually added, endpoints to generated if they're found from parsedEndpoints\n+        serviceDescription.getClient().getEndpoint().forEach(ep -> {\n+            if (parsedEndpoints.stream().anyMatch(parsedEp -> parsedEp.isEquivalent(ep))) {\n+                ep.setGenerated(true);\n+            }\n+        });\n+\n+        // Remove ACLs that don't exist in the parsed endpoints list\n+        serviceDescription.getClient().getAcl().removeIf(acl ->\n+                acl.getEndpoint().isGenerated()\n+                        && !parsedEndpoints.stream().anyMatch(endpoint -> acl.getEndpoint().isEquivalent(endpoint)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8b1c777ee3498e7d8789dc40edb0d80eb250f7de"}, "originalPosition": 187}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTUyNDE0Mg==", "bodyText": "fixed", "url": "https://github.com/nordic-institute/X-Road/pull/321#discussion_r369524142", "createdAt": "2020-01-22T12:10:31Z", "author": {"login": "TJaakkola"}, "path": "src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/service/ServiceDescriptionService.java", "diffHunk": "@@ -498,7 +528,178 @@ public ServiceDescriptionType refreshServiceDescription(Long id, boolean ignoreW\n     }\n \n     /**\n-     * Get one ServiceDescriptionType by id\n+     * Update Rest service description\n+     *\n+     * @param id\n+     * @param url\n+     * @param restServiceCode\n+     * @param newRestServiceCode\n+     * @return {@link ServiceDescriptionType}\n+     * @throws UrlAlreadyExistsException\n+     * @throws ServiceCodeAlreadyExistsException\n+     */\n+    public ServiceDescriptionType updateRestServiceDescription(Long id, String url, String restServiceCode,\n+                                                               String newRestServiceCode)\n+            throws UrlAlreadyExistsException, ServiceCodeAlreadyExistsException {\n+        verifyAuthority(\"EDIT_REST\");\n+\n+        if (newRestServiceCode == null) {\n+            newRestServiceCode = restServiceCode;\n+        }\n+\n+        ServiceDescriptionType serviceDescription = getServiceDescriptiontype(id);\n+        serviceDescription.setUrl(url);\n+        updateServiceCodes(restServiceCode, newRestServiceCode, serviceDescription);\n+\n+        checkDuplicateServiceCodes(serviceDescription);\n+        checkDuplicateUrl(serviceDescription);\n+\n+        clientRepository.saveOrUpdateAndFlush(serviceDescription.getClient());\n+        return serviceDescription;\n+    }\n+\n+    /**\n+     * Update OpenApi3 ServiceDescription\n+     *\n+     * @param id\n+     * @param url\n+     * @param restServiceCode\n+     * @param newRestServiceCode\n+     * @param ignoreWarnings\n+     * @return\n+     * @throws UrlAlreadyExistsException\n+     * @throws ServiceCodeAlreadyExistsException\n+     * @throws UnhandledWarningsException\n+     * @throws OpenApiParser.ParsingException\n+     */\n+    public ServiceDescriptionType updateOpenApi3ServiceDescription(Long id, String url, String restServiceCode,\n+            String newRestServiceCode, Boolean ignoreWarnings) throws UrlAlreadyExistsException,\n+            ServiceCodeAlreadyExistsException, UnhandledWarningsException, OpenApiParser.ParsingException {\n+\n+        verifyAuthority(\"EDIT_OPENAPI3\");\n+        ServiceDescriptionType serviceDescription = getServiceDescriptiontype(id);\n+\n+        if (newRestServiceCode == null) {\n+            newRestServiceCode = restServiceCode;\n+        }\n+\n+        updateServiceCodes(restServiceCode, newRestServiceCode, serviceDescription);\n+\n+        // Parse openapi definition and handle updating endpoints and acls\n+        if (serviceDescription.getUrl() != url) {\n+            parseOpenapi3ToServiceDescription(url, newRestServiceCode, ignoreWarnings, serviceDescription);\n+        }\n+\n+        checkDuplicateServiceCodes(serviceDescription);\n+        checkDuplicateUrl(serviceDescription);\n+\n+        clientRepository.saveOrUpdateAndFlush(serviceDescription.getClient());\n+\n+        return serviceDescription;\n+    }\n+\n+    /**\n+     * Parse OpenApi3 description and update endpoints and acls in ServiceDescription accordingly\n+     *\n+     * @param url\n+     * @param serviceCode\n+     * @param ignoreWarnings\n+     * @param serviceDescription\n+     * @throws OpenApiParser.ParsingException\n+     * @throws UnhandledWarningsException\n+     */\n+    private void parseOpenapi3ToServiceDescription(String url, String serviceCode, boolean ignoreWarnings,\n+                                                   ServiceDescriptionType serviceDescription) throws\n+            OpenApiParser.ParsingException, UnhandledWarningsException {\n+        OpenApiParser.Result result = openApiParser.parse(url);\n+        if (!ignoreWarnings && result.hasWarnings()) {\n+            WarningDeviation openapiParserWarnings = new WarningDeviation(\"OpenapiParserWarnings\",\n+                    result.getWarnings());\n+            throw new UnhandledWarningsException(Arrays.asList(openapiParserWarnings));\n+        }\n+\n+        // Update url\n+        updateServiceDescriptionUrl(serviceDescription, serviceCode, url);\n+\n+        // Create endpoints from parsed results\n+        List<EndpointType> parsedEndpoints = result.getOperations().stream()\n+                .map(operation -> new EndpointType(serviceCode, operation.getMethod(), operation.getPath(),\n+                        true))\n+                .collect(Collectors.toList());\n+        parsedEndpoints.add(new EndpointType(serviceCode, \"*\", \"**\", true));\n+\n+        // Change existing, manually added, endpoints to generated if they're found from parsedEndpoints\n+        serviceDescription.getClient().getEndpoint().forEach(ep -> {\n+            if (parsedEndpoints.stream().anyMatch(parsedEp -> parsedEp.isEquivalent(ep))) {\n+                ep.setGenerated(true);\n+            }\n+        });\n+\n+        // Remove ACLs that don't exist in the parsed endpoints list\n+        serviceDescription.getClient().getAcl().removeIf(acl ->\n+                acl.getEndpoint().isGenerated()\n+                        && !parsedEndpoints.stream().anyMatch(endpoint -> acl.getEndpoint().isEquivalent(endpoint)));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODk5MzY0NQ=="}, "originalCommit": {"oid": "8b1c777ee3498e7d8789dc40edb0d80eb250f7de"}, "originalPosition": 187}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2890, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}