{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk2MTQ0ODc2", "number": 443, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQwNzowNTozMlrOD0FNfw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQwODozNTo0MlrOD0HuUg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1OTM3OTE5OnYy", "diffSide": "RIGHT", "path": "src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/service/NotificationService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQwNzowNTozMlrOGI18Dg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQxMTo0NjozMVrOGJBZrQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTkyNTUxOA==", "bodyText": "I don't think that the static keyword adds any benefits here or the getter, setter and reset methods below. It works fine (possibly even faster) but beans are singleton by nature so there should be no need for static members. It causes some troubles testing (not being able to mock) and @Transactional and some other Spring AOP features do not actually support static methods. So just to be on the safe side I would remove the static keywords from the class members.", "url": "https://github.com/nordic-institute/X-Road/pull/443#discussion_r411925518", "createdAt": "2020-04-21T07:05:32Z", "author": {"login": "carohauta"}, "path": "src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/service/NotificationService.java", "diffHunk": "@@ -0,0 +1,129 @@\n+/**\n+ * The MIT License\n+ * Copyright (c) 2018 Estonian Information System Authority (RIA),\n+ * Nordic Institute for Interoperability Solutions (NIIS), Population Register Centre (VRK)\n+ * Copyright (c) 2015-2017 Estonian Information System Authority (RIA), Population Register Centre (VRK)\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package org.niis.xroad.restapi.service;\n+\n+import ee.ria.xroad.common.CodedException;\n+import ee.ria.xroad.commonui.SignerProxy;\n+import ee.ria.xroad.signer.protocol.dto.TokenInfo;\n+\n+import lombok.extern.slf4j.Slf4j;\n+import org.niis.xroad.restapi.dto.AlertStatus;\n+import org.niis.xroad.restapi.facade.GlobalConfFacade;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.security.access.prepost.PreAuthorize;\n+import org.springframework.stereotype.Service;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+import java.time.OffsetDateTime;\n+import java.time.ZoneOffset;\n+import java.util.Optional;\n+\n+/**\n+ * service class for handling notifications\n+ */\n+@Slf4j\n+@Service\n+@Transactional\n+@PreAuthorize(\"isAuthenticated()\")\n+public class NotificationService {\n+    private static OffsetDateTime backupRestoreRunningSince;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c5cc00be7be6d6771dc4e06bb63540b40f091a0c"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjExMzMyNQ==", "bodyText": "Removed the static keyword from the variable and all methods accessing it.", "url": "https://github.com/nordic-institute/X-Road/pull/443#discussion_r412113325", "createdAt": "2020-04-21T11:46:31Z", "author": {"login": "petkivim"}, "path": "src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/service/NotificationService.java", "diffHunk": "@@ -0,0 +1,129 @@\n+/**\n+ * The MIT License\n+ * Copyright (c) 2018 Estonian Information System Authority (RIA),\n+ * Nordic Institute for Interoperability Solutions (NIIS), Population Register Centre (VRK)\n+ * Copyright (c) 2015-2017 Estonian Information System Authority (RIA), Population Register Centre (VRK)\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package org.niis.xroad.restapi.service;\n+\n+import ee.ria.xroad.common.CodedException;\n+import ee.ria.xroad.commonui.SignerProxy;\n+import ee.ria.xroad.signer.protocol.dto.TokenInfo;\n+\n+import lombok.extern.slf4j.Slf4j;\n+import org.niis.xroad.restapi.dto.AlertStatus;\n+import org.niis.xroad.restapi.facade.GlobalConfFacade;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.security.access.prepost.PreAuthorize;\n+import org.springframework.stereotype.Service;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+import java.time.OffsetDateTime;\n+import java.time.ZoneOffset;\n+import java.util.Optional;\n+\n+/**\n+ * service class for handling notifications\n+ */\n+@Slf4j\n+@Service\n+@Transactional\n+@PreAuthorize(\"isAuthenticated()\")\n+public class NotificationService {\n+    private static OffsetDateTime backupRestoreRunningSince;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTkyNTUxOA=="}, "originalCommit": {"oid": "c5cc00be7be6d6771dc4e06bb63540b40f091a0c"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1OTcxMDY1OnYy", "diffSide": "RIGHT", "path": "src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/service/NotificationService.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQwODoxODozM1rOGI46qQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQxMjowNjowMFrOGJCJWA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTk3NDMxMw==", "bodyText": "Should this also check whether the Security Server has been initialized yet? That is of course still in review but since the old implementation checks the init status, maybe it should be added here also to avoid throwing \"false\" exceptions. If it is something that is wanted, maybe we should create a new ticket so it does not get forgotten.", "url": "https://github.com/nordic-institute/X-Road/pull/443#discussion_r411974313", "createdAt": "2020-04-21T08:18:33Z", "author": {"login": "carohauta"}, "path": "src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/service/NotificationService.java", "diffHunk": "@@ -0,0 +1,129 @@\n+/**\n+ * The MIT License\n+ * Copyright (c) 2018 Estonian Information System Authority (RIA),\n+ * Nordic Institute for Interoperability Solutions (NIIS), Population Register Centre (VRK)\n+ * Copyright (c) 2015-2017 Estonian Information System Authority (RIA), Population Register Centre (VRK)\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package org.niis.xroad.restapi.service;\n+\n+import ee.ria.xroad.common.CodedException;\n+import ee.ria.xroad.commonui.SignerProxy;\n+import ee.ria.xroad.signer.protocol.dto.TokenInfo;\n+\n+import lombok.extern.slf4j.Slf4j;\n+import org.niis.xroad.restapi.dto.AlertStatus;\n+import org.niis.xroad.restapi.facade.GlobalConfFacade;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.security.access.prepost.PreAuthorize;\n+import org.springframework.stereotype.Service;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+import java.time.OffsetDateTime;\n+import java.time.ZoneOffset;\n+import java.util.Optional;\n+\n+/**\n+ * service class for handling notifications\n+ */\n+@Slf4j\n+@Service\n+@Transactional\n+@PreAuthorize(\"isAuthenticated()\")\n+public class NotificationService {\n+    private static OffsetDateTime backupRestoreRunningSince;\n+    private final GlobalConfFacade globalConfFacade;\n+    private final TokenService tokenService;\n+\n+    /**\n+     * constructor\n+     */\n+    @Autowired\n+    public NotificationService(GlobalConfFacade globalConfFacade, TokenService tokenService) {\n+        this.globalConfFacade = globalConfFacade;\n+        this.tokenService = tokenService;\n+    }\n+\n+    /**\n+     * Checks the status of system alerts that may affect whether the system\n+     * is operational or not. If alerts are disabled, the status of all alerts true.\n+     * @return\n+     */\n+    public AlertStatus getAlerts() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c5cc00be7be6d6771dc4e06bb63540b40f091a0c"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjExNTY2OA==", "bodyText": "Yes, you're right. It should be checked whether the Security Server is initialized or not. I'll create a new ticket about it that can be implemented once XRDDEV-904 has been completed.", "url": "https://github.com/nordic-institute/X-Road/pull/443#discussion_r412115668", "createdAt": "2020-04-21T11:50:19Z", "author": {"login": "petkivim"}, "path": "src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/service/NotificationService.java", "diffHunk": "@@ -0,0 +1,129 @@\n+/**\n+ * The MIT License\n+ * Copyright (c) 2018 Estonian Information System Authority (RIA),\n+ * Nordic Institute for Interoperability Solutions (NIIS), Population Register Centre (VRK)\n+ * Copyright (c) 2015-2017 Estonian Information System Authority (RIA), Population Register Centre (VRK)\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package org.niis.xroad.restapi.service;\n+\n+import ee.ria.xroad.common.CodedException;\n+import ee.ria.xroad.commonui.SignerProxy;\n+import ee.ria.xroad.signer.protocol.dto.TokenInfo;\n+\n+import lombok.extern.slf4j.Slf4j;\n+import org.niis.xroad.restapi.dto.AlertStatus;\n+import org.niis.xroad.restapi.facade.GlobalConfFacade;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.security.access.prepost.PreAuthorize;\n+import org.springframework.stereotype.Service;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+import java.time.OffsetDateTime;\n+import java.time.ZoneOffset;\n+import java.util.Optional;\n+\n+/**\n+ * service class for handling notifications\n+ */\n+@Slf4j\n+@Service\n+@Transactional\n+@PreAuthorize(\"isAuthenticated()\")\n+public class NotificationService {\n+    private static OffsetDateTime backupRestoreRunningSince;\n+    private final GlobalConfFacade globalConfFacade;\n+    private final TokenService tokenService;\n+\n+    /**\n+     * constructor\n+     */\n+    @Autowired\n+    public NotificationService(GlobalConfFacade globalConfFacade, TokenService tokenService) {\n+        this.globalConfFacade = globalConfFacade;\n+        this.tokenService = tokenService;\n+    }\n+\n+    /**\n+     * Checks the status of system alerts that may affect whether the system\n+     * is operational or not. If alerts are disabled, the status of all alerts true.\n+     * @return\n+     */\n+    public AlertStatus getAlerts() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTk3NDMxMw=="}, "originalCommit": {"oid": "c5cc00be7be6d6771dc4e06bb63540b40f091a0c"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjEyNTUyOA==", "bodyText": "The init status check will be implemented in XRDDEV-1035 (https://jira.niis.org/browse/XRDDEV-1035).", "url": "https://github.com/nordic-institute/X-Road/pull/443#discussion_r412125528", "createdAt": "2020-04-21T12:06:00Z", "author": {"login": "petkivim"}, "path": "src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/service/NotificationService.java", "diffHunk": "@@ -0,0 +1,129 @@\n+/**\n+ * The MIT License\n+ * Copyright (c) 2018 Estonian Information System Authority (RIA),\n+ * Nordic Institute for Interoperability Solutions (NIIS), Population Register Centre (VRK)\n+ * Copyright (c) 2015-2017 Estonian Information System Authority (RIA), Population Register Centre (VRK)\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package org.niis.xroad.restapi.service;\n+\n+import ee.ria.xroad.common.CodedException;\n+import ee.ria.xroad.commonui.SignerProxy;\n+import ee.ria.xroad.signer.protocol.dto.TokenInfo;\n+\n+import lombok.extern.slf4j.Slf4j;\n+import org.niis.xroad.restapi.dto.AlertStatus;\n+import org.niis.xroad.restapi.facade.GlobalConfFacade;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.security.access.prepost.PreAuthorize;\n+import org.springframework.stereotype.Service;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+import java.time.OffsetDateTime;\n+import java.time.ZoneOffset;\n+import java.util.Optional;\n+\n+/**\n+ * service class for handling notifications\n+ */\n+@Slf4j\n+@Service\n+@Transactional\n+@PreAuthorize(\"isAuthenticated()\")\n+public class NotificationService {\n+    private static OffsetDateTime backupRestoreRunningSince;\n+    private final GlobalConfFacade globalConfFacade;\n+    private final TokenService tokenService;\n+\n+    /**\n+     * constructor\n+     */\n+    @Autowired\n+    public NotificationService(GlobalConfFacade globalConfFacade, TokenService tokenService) {\n+        this.globalConfFacade = globalConfFacade;\n+        this.tokenService = tokenService;\n+    }\n+\n+    /**\n+     * Checks the status of system alerts that may affect whether the system\n+     * is operational or not. If alerts are disabled, the status of all alerts true.\n+     * @return\n+     */\n+    public AlertStatus getAlerts() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTk3NDMxMw=="}, "originalCommit": {"oid": "c5cc00be7be6d6771dc4e06bb63540b40f091a0c"}, "originalPosition": 69}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1OTc0MjUxOnYy", "diffSide": "RIGHT", "path": "src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/service/NotificationService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQwODoyNToyOFrOGI5OLQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQxMTo1MToxMVrOGJBlFg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTk3OTMwOQ==", "bodyText": "The old implementation does not stop execution if the soft token is not found. However a RuntimeException here makes sense if the token has been properly initialized but nevertheless is not found. Adding the init check in the getAlerts method would actually help in this situation too", "url": "https://github.com/nordic-institute/X-Road/pull/443#discussion_r411979309", "createdAt": "2020-04-21T08:25:28Z", "author": {"login": "carohauta"}, "path": "src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/service/NotificationService.java", "diffHunk": "@@ -0,0 +1,129 @@\n+/**\n+ * The MIT License\n+ * Copyright (c) 2018 Estonian Information System Authority (RIA),\n+ * Nordic Institute for Interoperability Solutions (NIIS), Population Register Centre (VRK)\n+ * Copyright (c) 2015-2017 Estonian Information System Authority (RIA), Population Register Centre (VRK)\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package org.niis.xroad.restapi.service;\n+\n+import ee.ria.xroad.common.CodedException;\n+import ee.ria.xroad.commonui.SignerProxy;\n+import ee.ria.xroad.signer.protocol.dto.TokenInfo;\n+\n+import lombok.extern.slf4j.Slf4j;\n+import org.niis.xroad.restapi.dto.AlertStatus;\n+import org.niis.xroad.restapi.facade.GlobalConfFacade;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.security.access.prepost.PreAuthorize;\n+import org.springframework.stereotype.Service;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+import java.time.OffsetDateTime;\n+import java.time.ZoneOffset;\n+import java.util.Optional;\n+\n+/**\n+ * service class for handling notifications\n+ */\n+@Slf4j\n+@Service\n+@Transactional\n+@PreAuthorize(\"isAuthenticated()\")\n+public class NotificationService {\n+    private static OffsetDateTime backupRestoreRunningSince;\n+    private final GlobalConfFacade globalConfFacade;\n+    private final TokenService tokenService;\n+\n+    /**\n+     * constructor\n+     */\n+    @Autowired\n+    public NotificationService(GlobalConfFacade globalConfFacade, TokenService tokenService) {\n+        this.globalConfFacade = globalConfFacade;\n+        this.tokenService = tokenService;\n+    }\n+\n+    /**\n+     * Checks the status of system alerts that may affect whether the system\n+     * is operational or not. If alerts are disabled, the status of all alerts true.\n+     * @return\n+     */\n+    public AlertStatus getAlerts() {\n+        AlertStatus alertStatus = new AlertStatus();\n+        OffsetDateTime backupRestoreStartedAt = getBackupRestoreRunningSince();\n+        if (backupRestoreStartedAt != null) {\n+            alertStatus.setBackupRestoreRunningSince(backupRestoreStartedAt);\n+            alertStatus.setCurrentTime(OffsetDateTime.now(ZoneOffset.UTC));\n+        }\n+        alertStatus.setGlobalConfValid(isGlobalConfValid());\n+        alertStatus.setSoftTokenPinEntered(isSoftTokenPinEntered());\n+        return alertStatus;\n+    }\n+\n+    /**\n+     * Verifies that the global configuration is valid.\n+     * @return\n+     */\n+    private boolean isGlobalConfValid() {\n+        try {\n+            globalConfFacade.verifyValidity();\n+            return true;\n+        } catch (CodedException e) {\n+            return false;\n+        }\n+    }\n+\n+    /**\n+     * Checks if soft token pin is entered.\n+     * @return\n+     */\n+    private boolean isSoftTokenPinEntered() {\n+        Optional<TokenInfo> token = tokenService.getAllTokens().stream()\n+                .filter(t -> t.getId().equals(SignerProxy.SSL_TOKEN_ID)).findFirst();\n+        if (!token.isPresent()) {\n+            throw new RuntimeException(\"soft token not found\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c5cc00be7be6d6771dc4e06bb63540b40f091a0c"}, "originalPosition": 102}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjExNjI0Ng==", "bodyText": "Yes, adding the init check in the getAlerts method will solve this too. I'll create a new ticket about that.", "url": "https://github.com/nordic-institute/X-Road/pull/443#discussion_r412116246", "createdAt": "2020-04-21T11:51:11Z", "author": {"login": "petkivim"}, "path": "src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/service/NotificationService.java", "diffHunk": "@@ -0,0 +1,129 @@\n+/**\n+ * The MIT License\n+ * Copyright (c) 2018 Estonian Information System Authority (RIA),\n+ * Nordic Institute for Interoperability Solutions (NIIS), Population Register Centre (VRK)\n+ * Copyright (c) 2015-2017 Estonian Information System Authority (RIA), Population Register Centre (VRK)\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package org.niis.xroad.restapi.service;\n+\n+import ee.ria.xroad.common.CodedException;\n+import ee.ria.xroad.commonui.SignerProxy;\n+import ee.ria.xroad.signer.protocol.dto.TokenInfo;\n+\n+import lombok.extern.slf4j.Slf4j;\n+import org.niis.xroad.restapi.dto.AlertStatus;\n+import org.niis.xroad.restapi.facade.GlobalConfFacade;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.security.access.prepost.PreAuthorize;\n+import org.springframework.stereotype.Service;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+import java.time.OffsetDateTime;\n+import java.time.ZoneOffset;\n+import java.util.Optional;\n+\n+/**\n+ * service class for handling notifications\n+ */\n+@Slf4j\n+@Service\n+@Transactional\n+@PreAuthorize(\"isAuthenticated()\")\n+public class NotificationService {\n+    private static OffsetDateTime backupRestoreRunningSince;\n+    private final GlobalConfFacade globalConfFacade;\n+    private final TokenService tokenService;\n+\n+    /**\n+     * constructor\n+     */\n+    @Autowired\n+    public NotificationService(GlobalConfFacade globalConfFacade, TokenService tokenService) {\n+        this.globalConfFacade = globalConfFacade;\n+        this.tokenService = tokenService;\n+    }\n+\n+    /**\n+     * Checks the status of system alerts that may affect whether the system\n+     * is operational or not. If alerts are disabled, the status of all alerts true.\n+     * @return\n+     */\n+    public AlertStatus getAlerts() {\n+        AlertStatus alertStatus = new AlertStatus();\n+        OffsetDateTime backupRestoreStartedAt = getBackupRestoreRunningSince();\n+        if (backupRestoreStartedAt != null) {\n+            alertStatus.setBackupRestoreRunningSince(backupRestoreStartedAt);\n+            alertStatus.setCurrentTime(OffsetDateTime.now(ZoneOffset.UTC));\n+        }\n+        alertStatus.setGlobalConfValid(isGlobalConfValid());\n+        alertStatus.setSoftTokenPinEntered(isSoftTokenPinEntered());\n+        return alertStatus;\n+    }\n+\n+    /**\n+     * Verifies that the global configuration is valid.\n+     * @return\n+     */\n+    private boolean isGlobalConfValid() {\n+        try {\n+            globalConfFacade.verifyValidity();\n+            return true;\n+        } catch (CodedException e) {\n+            return false;\n+        }\n+    }\n+\n+    /**\n+     * Checks if soft token pin is entered.\n+     * @return\n+     */\n+    private boolean isSoftTokenPinEntered() {\n+        Optional<TokenInfo> token = tokenService.getAllTokens().stream()\n+                .filter(t -> t.getId().equals(SignerProxy.SSL_TOKEN_ID)).findFirst();\n+        if (!token.isPresent()) {\n+            throw new RuntimeException(\"soft token not found\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTk3OTMwOQ=="}, "originalCommit": {"oid": "c5cc00be7be6d6771dc4e06bb63540b40f091a0c"}, "originalPosition": 102}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1OTc5MDkwOnYy", "diffSide": "RIGHT", "path": "src/proxy-ui-api/src/test/java/org/niis/xroad/restapi/openapi/NotificationsApiControllerTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQwODozNTo0MlrOGI5qog==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQxMTo0NzoyOVrOGJBcEQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTk4NjU5NA==", "bodyText": "Nothing major but would follow other conventions if this test was in org.niis.xroad.restapi.controller package instead of org.niis.xroad.restapi.openapi", "url": "https://github.com/nordic-institute/X-Road/pull/443#discussion_r411986594", "createdAt": "2020-04-21T08:35:42Z", "author": {"login": "carohauta"}, "path": "src/proxy-ui-api/src/test/java/org/niis/xroad/restapi/openapi/NotificationsApiControllerTest.java", "diffHunk": "@@ -0,0 +1,122 @@\n+/**\n+ * The MIT License\n+ * Copyright (c) 2018 Estonian Information System Authority (RIA),\n+ * Nordic Institute for Interoperability Solutions (NIIS), Population Register Centre (VRK)\n+ * Copyright (c) 2015-2017 Estonian Information System Authority (RIA), Population Register Centre (VRK)\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package org.niis.xroad.restapi.openapi;\n+\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.niis.xroad.restapi.controller.NotificationsApiController;\n+import org.niis.xroad.restapi.domain.AlertData;\n+import org.niis.xroad.restapi.dto.AlertStatus;\n+import org.niis.xroad.restapi.service.NotificationService;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.boot.test.mock.mockito.MockBean;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.security.test.context.support.WithMockUser;\n+import org.springframework.test.context.junit4.SpringRunner;\n+\n+import java.time.OffsetDateTime;\n+import java.time.ZoneOffset;\n+\n+import static junit.framework.TestCase.fail;\n+import static org.junit.Assert.assertEquals;\n+import static org.mockito.Mockito.doThrow;\n+import static org.mockito.Mockito.when;\n+\n+/**\n+ * Test NotificationsApiController\n+ */\n+@RunWith(SpringRunner.class)\n+@SpringBootTest\n+public class NotificationsApiControllerTest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c5cc00be7be6d6771dc4e06bb63540b40f091a0c"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjExMzkzNw==", "bodyText": "Fixed.", "url": "https://github.com/nordic-institute/X-Road/pull/443#discussion_r412113937", "createdAt": "2020-04-21T11:47:29Z", "author": {"login": "petkivim"}, "path": "src/proxy-ui-api/src/test/java/org/niis/xroad/restapi/openapi/NotificationsApiControllerTest.java", "diffHunk": "@@ -0,0 +1,122 @@\n+/**\n+ * The MIT License\n+ * Copyright (c) 2018 Estonian Information System Authority (RIA),\n+ * Nordic Institute for Interoperability Solutions (NIIS), Population Register Centre (VRK)\n+ * Copyright (c) 2015-2017 Estonian Information System Authority (RIA), Population Register Centre (VRK)\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package org.niis.xroad.restapi.openapi;\n+\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.niis.xroad.restapi.controller.NotificationsApiController;\n+import org.niis.xroad.restapi.domain.AlertData;\n+import org.niis.xroad.restapi.dto.AlertStatus;\n+import org.niis.xroad.restapi.service.NotificationService;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.boot.test.mock.mockito.MockBean;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.security.test.context.support.WithMockUser;\n+import org.springframework.test.context.junit4.SpringRunner;\n+\n+import java.time.OffsetDateTime;\n+import java.time.ZoneOffset;\n+\n+import static junit.framework.TestCase.fail;\n+import static org.junit.Assert.assertEquals;\n+import static org.mockito.Mockito.doThrow;\n+import static org.mockito.Mockito.when;\n+\n+/**\n+ * Test NotificationsApiController\n+ */\n+@RunWith(SpringRunner.class)\n+@SpringBootTest\n+public class NotificationsApiControllerTest {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTk4NjU5NA=="}, "originalCommit": {"oid": "c5cc00be7be6d6771dc4e06bb63540b40f091a0c"}, "originalPosition": 54}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2798, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}