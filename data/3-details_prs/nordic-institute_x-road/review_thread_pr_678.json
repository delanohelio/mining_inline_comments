{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDc3MDU3NTg1", "number": 678, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxMTo1NjozMFrOEhNZcw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxMTo1NjozMFrOEhNZcw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzMjU3OTcxOnYy", "diffSide": "RIGHT", "path": "src/buildSrc/src/main/java/org/niis/xroad/oasvalidatorplugin/Oas3ValidatorGradlePlugin.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxMTo1NjozMFrOHOZdcA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQwOTowNToyNlrOHO978Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDg1OTI0OA==", "bodyText": "There seem to be some validation error cases (duplicate property or required -tag in openapi-authentication.yaml) that result in an exception that is printed out, but validation result is SUCCESS and build continues.\nPossibly caused by a JsonParseException that is thrown out instead of GradleException. Not sure, but would it be a good idea to catch all exceptions that happen during validation and wrapping them in GradleException(\"API definition validation failed\", rootCause), or something?", "url": "https://github.com/nordic-institute/X-Road/pull/678#discussion_r484859248", "createdAt": "2020-09-08T11:56:30Z", "author": {"login": "jansu76"}, "path": "src/buildSrc/src/main/java/org/niis/xroad/oasvalidatorplugin/Oas3ValidatorGradlePlugin.java", "diffHunk": "@@ -0,0 +1,78 @@\n+/**\n+ * The MIT License\n+ * Copyright (c) 2019- Nordic Institute for Interoperability Solutions (NIIS)\n+ * Copyright (c) 2018 Estonian Information System Authority (RIA),\n+ * Nordic Institute for Interoperability Solutions (NIIS), Population Register Centre (VRK)\n+ * Copyright (c) 2015-2017 Estonian Information System Authority (RIA), Population Register Centre (VRK)\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package org.niis.xroad.oasvalidatorplugin;\n+\n+import org.gradle.api.GradleException;\n+import org.gradle.api.Plugin;\n+import org.gradle.api.Project;\n+import org.openapi4j.core.exception.ResolutionException;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+public class Oas3ValidatorGradlePlugin implements Plugin<Project> {\n+    private static final String PARAMETERS_NAME = \"apiValidationParameters\";\n+    private static final String TASK_NAME = \"validateApiDefinitions\";\n+\n+    public Oas3ValidatorGradlePlugin() {\n+    }\n+\n+    @Override\n+    public void apply(Project project) {\n+        Oas3ValidatorExtension extension = project.getExtensions()\n+                .create(PARAMETERS_NAME, Oas3ValidatorExtension.class);\n+\n+        project.task(TASK_NAME)\n+                .doLast(task -> {\n+                    if (extension.getApiDefinitionPaths() == null || extension.getApiDefinitionPaths().isEmpty()) {\n+                        throw new GradleException(\"No API definition file paths provided\");\n+                    }\n+                    System.out.println(System.lineSeparator() + \"--- API VALIDATION START ---\");\n+                    boolean isCompleteValidationSuccess = true;\n+                    List<ApiValidationResults> allValidationResults = new ArrayList<>();\n+                    extension.getApiDefinitionPaths().forEach(path -> {\n+                        try {\n+                            ApiValidationResults validationResults = Oas3Validator.validate(path);\n+                            allValidationResults.add(validationResults);\n+                        } catch (ResolutionException e) {\n+                            throw new GradleException(\"API definition not found\", e);\n+                        }\n+                    });\n+                    for (ApiValidationResults apiValidationResults : allValidationResults) {\n+                        ApiValidationResult apiSpecValidationResult = apiValidationResults", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "012eeb1528b5e662654e47cc79c0553183fe574c"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTQ1Njg4MQ==", "bodyText": "Pushed a fix for this. All Exceptions are now caught in the Plugin. The JsonParseException was not actually thrown but only logged by one of the parser libraries. But the data was still recoverable and is now added to the validation failure data.", "url": "https://github.com/nordic-institute/X-Road/pull/678#discussion_r485456881", "createdAt": "2020-09-09T09:05:26Z", "author": {"login": "carohauta"}, "path": "src/buildSrc/src/main/java/org/niis/xroad/oasvalidatorplugin/Oas3ValidatorGradlePlugin.java", "diffHunk": "@@ -0,0 +1,78 @@\n+/**\n+ * The MIT License\n+ * Copyright (c) 2019- Nordic Institute for Interoperability Solutions (NIIS)\n+ * Copyright (c) 2018 Estonian Information System Authority (RIA),\n+ * Nordic Institute for Interoperability Solutions (NIIS), Population Register Centre (VRK)\n+ * Copyright (c) 2015-2017 Estonian Information System Authority (RIA), Population Register Centre (VRK)\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package org.niis.xroad.oasvalidatorplugin;\n+\n+import org.gradle.api.GradleException;\n+import org.gradle.api.Plugin;\n+import org.gradle.api.Project;\n+import org.openapi4j.core.exception.ResolutionException;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+public class Oas3ValidatorGradlePlugin implements Plugin<Project> {\n+    private static final String PARAMETERS_NAME = \"apiValidationParameters\";\n+    private static final String TASK_NAME = \"validateApiDefinitions\";\n+\n+    public Oas3ValidatorGradlePlugin() {\n+    }\n+\n+    @Override\n+    public void apply(Project project) {\n+        Oas3ValidatorExtension extension = project.getExtensions()\n+                .create(PARAMETERS_NAME, Oas3ValidatorExtension.class);\n+\n+        project.task(TASK_NAME)\n+                .doLast(task -> {\n+                    if (extension.getApiDefinitionPaths() == null || extension.getApiDefinitionPaths().isEmpty()) {\n+                        throw new GradleException(\"No API definition file paths provided\");\n+                    }\n+                    System.out.println(System.lineSeparator() + \"--- API VALIDATION START ---\");\n+                    boolean isCompleteValidationSuccess = true;\n+                    List<ApiValidationResults> allValidationResults = new ArrayList<>();\n+                    extension.getApiDefinitionPaths().forEach(path -> {\n+                        try {\n+                            ApiValidationResults validationResults = Oas3Validator.validate(path);\n+                            allValidationResults.add(validationResults);\n+                        } catch (ResolutionException e) {\n+                            throw new GradleException(\"API definition not found\", e);\n+                        }\n+                    });\n+                    for (ApiValidationResults apiValidationResults : allValidationResults) {\n+                        ApiValidationResult apiSpecValidationResult = apiValidationResults", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDg1OTI0OA=="}, "originalCommit": {"oid": "012eeb1528b5e662654e47cc79c0553183fe574c"}, "originalPosition": 65}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2686, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}