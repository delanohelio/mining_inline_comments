{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzcxMDM0MzU2", "number": 351, "reviewThreads": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQxMTozOTowOFrODdTTOA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQxMjo0MzoyOFrODdUWSg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyMDUxNTEyOnYy", "diffSide": "RIGHT", "path": "src/proxy-ui-api/src/main/resources/permissions.yml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQxMTozOTowOFrOFl0xsg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQyMDo0Njo0NFrOFmGnTw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTIwNjMyMg==", "bodyText": "Why is this permission not in old UI already? Was there some reason behind it, and what permission did old UI require for \"refresh rest\" operation?", "url": "https://github.com/nordic-institute/X-Road/pull/351#discussion_r375206322", "createdAt": "2020-02-05T11:39:08Z", "author": {"login": "jansu76"}, "path": "src/proxy-ui-api/src/main/resources/permissions.yml", "diffHunk": "@@ -33,6 +33,7 @@\n -       edit_openapi3_endpoint: [XROAD_SERVICE_ADMINISTRATOR]\n -       refresh_wsdl: [XROAD_SERVICE_ADMINISTRATOR]\n -       refresh_openapi3: [XROAD_SERVICE_ADMINISTRATOR]\n+        refresh_rest: [XROAD_SERVICE_ADMINISTRATOR]", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "01cdf6b663a524e2dd9f7190552c538c0f026fd3"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTQ5ODU3NQ==", "bodyText": "I think there was no detailed reasoning for not creating refresh_rest & refresh_openapi3 (actually there is refresh_openapi3 -permission but it is required in editing openapi3 in the old ui - yes, this is a bit confusing). Old ui requires refresh_wsdl for refreshing all 3 types of servicedescriptions.", "url": "https://github.com/nordic-institute/X-Road/pull/351#discussion_r375498575", "createdAt": "2020-02-05T20:46:44Z", "author": {"login": "TJaakkola"}, "path": "src/proxy-ui-api/src/main/resources/permissions.yml", "diffHunk": "@@ -33,6 +33,7 @@\n -       edit_openapi3_endpoint: [XROAD_SERVICE_ADMINISTRATOR]\n -       refresh_wsdl: [XROAD_SERVICE_ADMINISTRATOR]\n -       refresh_openapi3: [XROAD_SERVICE_ADMINISTRATOR]\n+        refresh_rest: [XROAD_SERVICE_ADMINISTRATOR]", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTIwNjMyMg=="}, "originalCommit": {"oid": "01cdf6b663a524e2dd9f7190552c538c0f026fd3"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyMDUyNDIyOnYy", "diffSide": "RIGHT", "path": "src/proxy-ui-api/frontend/src/views/Clients/Services/Services.vue", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQxMTo0Mjo0MVrOFl03Sg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQwNzo1MzowNFrOFmR1-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTIwNzc1NA==", "bodyText": "Should this already include the \"testability identifiers\"? At least definition of done already mentions it.\nhttps://confluence.niis.org/display/XRDDEV/Testability", "url": "https://github.com/nordic-institute/X-Road/pull/351#discussion_r375207754", "createdAt": "2020-02-05T11:42:41Z", "author": {"login": "jansu76"}, "path": "src/proxy-ui-api/frontend/src/views/Clients/Services/Services.vue", "diffHunk": "@@ -24,7 +24,7 @@\n         <v-btn\n           v-if=\"showAddButton\"\n           color=\"primary\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "01cdf6b663a524e2dd9f7190552c538c0f026fd3"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTUwNDY0NA==", "bodyText": "Ach good point. I completely forgot those...", "url": "https://github.com/nordic-institute/X-Road/pull/351#discussion_r375504644", "createdAt": "2020-02-05T20:59:55Z", "author": {"login": "TJaakkola"}, "path": "src/proxy-ui-api/frontend/src/views/Clients/Services/Services.vue", "diffHunk": "@@ -24,7 +24,7 @@\n         <v-btn\n           v-if=\"showAddButton\"\n           color=\"primary\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTIwNzc1NA=="}, "originalCommit": {"oid": "01cdf6b663a524e2dd9f7190552c538c0f026fd3"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTY4MjU1NQ==", "bodyText": "data-test attributes added.", "url": "https://github.com/nordic-institute/X-Road/pull/351#discussion_r375682555", "createdAt": "2020-02-06T07:53:04Z", "author": {"login": "TJaakkola"}, "path": "src/proxy-ui-api/frontend/src/views/Clients/Services/Services.vue", "diffHunk": "@@ -24,7 +24,7 @@\n         <v-btn\n           v-if=\"showAddButton\"\n           color=\"primary\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTIwNzc1NA=="}, "originalCommit": {"oid": "01cdf6b663a524e2dd9f7190552c538c0f026fd3"}, "originalPosition": 3}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyMDUzOTI4OnYy", "diffSide": "RIGHT", "path": "src/proxy-ui-api/frontend/src/global.ts", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQxMTo0ODoxMVrOFl1Amg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQwNzo1Mjo1MFrOFmR1tQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTIxMDEzOA==", "bodyText": "Would be nice to add comment about what the permission is or where it's used. Helps to keep track on these and in the end it's easier to see if we have some unused permissions.", "url": "https://github.com/nordic-institute/X-Road/pull/351#discussion_r375210138", "createdAt": "2020-02-05T11:48:11Z", "author": {"login": "Riippi"}, "path": "src/proxy-ui-api/frontend/src/global.ts", "diffHunk": "@@ -78,7 +78,9 @@ export enum Permissions {\n   IMPORT_INTERNAL_SSL_CERT = 'IMPORT_INTERNAL_SSL_CERT', // Security server TLS certificate\n   IMPORT_SIGN_CERT = 'IMPORT_SIGN_CERT',\n   INIT_CONFIG = 'INIT_CONFIG',\n-  REFRESH_WSDL = 'REFRESH_WSDL', // client > services > refresh WSDL\n+  REFRESH_WSDL = 'REFRESH_WSDL', // client > services > refresh\n+  REFRESH_REST = 'REFRESH_REST',", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "01cdf6b663a524e2dd9f7190552c538c0f026fd3"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTY4MjQ4NQ==", "bodyText": "Added comments", "url": "https://github.com/nordic-institute/X-Road/pull/351#discussion_r375682485", "createdAt": "2020-02-06T07:52:50Z", "author": {"login": "TJaakkola"}, "path": "src/proxy-ui-api/frontend/src/global.ts", "diffHunk": "@@ -78,7 +78,9 @@ export enum Permissions {\n   IMPORT_INTERNAL_SSL_CERT = 'IMPORT_INTERNAL_SSL_CERT', // Security server TLS certificate\n   IMPORT_SIGN_CERT = 'IMPORT_SIGN_CERT',\n   INIT_CONFIG = 'INIT_CONFIG',\n-  REFRESH_WSDL = 'REFRESH_WSDL', // client > services > refresh WSDL\n+  REFRESH_WSDL = 'REFRESH_WSDL', // client > services > refresh\n+  REFRESH_REST = 'REFRESH_REST',", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTIxMDEzOA=="}, "originalCommit": {"oid": "01cdf6b663a524e2dd9f7190552c538c0f026fd3"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyMDU5NjM5OnYy", "diffSide": "RIGHT", "path": "src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/openapi/ServiceDescriptionsApiController.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQxMjowOToyOVrOFl1jVw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxMDowMjozOFrOFoDAhg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTIxOTAzMQ==", "bodyText": "ServiceDescriptionException is not really a HTTP 404 resource not found. API URL defines what the resource is, in this case /service-descriptions/{id}/refresh, and that does exist. If the processing of this request fails then error is something else, like for example http 500 internal server error, http 409 conflict, or something else.\nI am not 100% sure if ServiceNotFoundException is correct exception class to be used in this case altogether. refreshRESTServiceDescription does not throw it even though it claims to. refreshOPENAPI3ServiceDescription throws it if we had for some reason a service description without any services. So it is more a problem with a service description, not a problem of not finding one specific service. It could have a different exception type, or just be a (DeviationAware)RuntimeException.\nOr keep it as a ServiceNotFoundException (which is not 100% accurate IMO) but at least map it to http 500 internal server error? Isn't that what it is, something weird has happened for it to be possible, and it is not anything that client request has caused, so it cannot be http 4xx?", "url": "https://github.com/nordic-institute/X-Road/pull/351#discussion_r375219031", "createdAt": "2020-02-05T12:09:29Z", "author": {"login": "jansu76"}, "path": "src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/openapi/ServiceDescriptionsApiController.java", "diffHunk": "@@ -191,12 +191,13 @@ public ServiceDescriptionsApiController(ServiceDescriptionService serviceDescrip\n                             ignoreWarnings.getIgnoreWarnings()));\n         } catch (WsdlParser.WsdlNotFoundException | UnhandledWarningsException\n                 | InvalidUrlException | InvalidWsdlException\n-                | ServiceDescriptionService.WrongServiceDescriptionTypeException e) {\n+                | ServiceDescriptionService.WrongServiceDescriptionTypeException\n+                | OpenApiParser.ParsingException e) {\n             throw new BadRequestException(e);\n         } catch (ServiceDescriptionService.ServiceAlreadyExistsException\n                 | ServiceDescriptionService.WsdlUrlAlreadyExistsException e) {\n             throw new ConflictException(e);\n-        } catch (ServiceDescriptionNotFoundException e) {\n+        } catch (ServiceNotFoundException | ServiceDescriptionNotFoundException e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "01cdf6b663a524e2dd9f7190552c538c0f026fd3"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzUzNjY0Ng==", "bodyText": "Pushed a commit changing the exception to DeviationAwareRuntimeException in a few places related to this.", "url": "https://github.com/nordic-institute/X-Road/pull/351#discussion_r377536646", "createdAt": "2020-02-11T10:02:38Z", "author": {"login": "TJaakkola"}, "path": "src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/openapi/ServiceDescriptionsApiController.java", "diffHunk": "@@ -191,12 +191,13 @@ public ServiceDescriptionsApiController(ServiceDescriptionService serviceDescrip\n                             ignoreWarnings.getIgnoreWarnings()));\n         } catch (WsdlParser.WsdlNotFoundException | UnhandledWarningsException\n                 | InvalidUrlException | InvalidWsdlException\n-                | ServiceDescriptionService.WrongServiceDescriptionTypeException e) {\n+                | ServiceDescriptionService.WrongServiceDescriptionTypeException\n+                | OpenApiParser.ParsingException e) {\n             throw new BadRequestException(e);\n         } catch (ServiceDescriptionService.ServiceAlreadyExistsException\n                 | ServiceDescriptionService.WsdlUrlAlreadyExistsException e) {\n             throw new ConflictException(e);\n-        } catch (ServiceDescriptionNotFoundException e) {\n+        } catch (ServiceNotFoundException | ServiceDescriptionNotFoundException e) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTIxOTAzMQ=="}, "originalCommit": {"oid": "01cdf6b663a524e2dd9f7190552c538c0f026fd3"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyMDYwNjI4OnYy", "diffSide": "RIGHT", "path": "src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/service/ServiceDescriptionService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQxMjoxMzoxNFrOFl1pXQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxMDozOTowNFrOFoEJBg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTIyMDU3Mw==", "bodyText": "Does not throw ServiceNotFoundException", "url": "https://github.com/nordic-institute/X-Road/pull/351#discussion_r375220573", "createdAt": "2020-02-05T12:13:14Z", "author": {"login": "jansu76"}, "path": "src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/service/ServiceDescriptionService.java", "diffHunk": "@@ -534,6 +581,71 @@ public ServiceDescriptionType refreshServiceDescription(Long id, boolean ignoreW\n         throw new NotImplementedException(\"REST ServiceDescription refresh not implemented yet\");\n     }\n \n+    /**\n+     * Refresh REST service description\n+     *\n+     * @param serviceDescriptionType\n+     * @return {@link ServiceDescriptionType}\n+     * @throws WrongServiceDescriptionTypeException if service type is not REST\n+     * @throws ServiceNotFoundException             if there is no service linked to service description\n+     * @throws InvalidUrlException                  if url is invalid\n+     */\n+    private ServiceDescriptionType refreshRESTServiceDescription(ServiceDescriptionType serviceDescriptionType)\n+            throws WrongServiceDescriptionTypeException, ServiceNotFoundException, InvalidUrlException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "01cdf6b663a524e2dd9f7190552c538c0f026fd3"}, "originalPosition": 169}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzU1NTIwNg==", "bodyText": "Fixed.", "url": "https://github.com/nordic-institute/X-Road/pull/351#discussion_r377555206", "createdAt": "2020-02-11T10:39:04Z", "author": {"login": "TJaakkola"}, "path": "src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/service/ServiceDescriptionService.java", "diffHunk": "@@ -534,6 +581,71 @@ public ServiceDescriptionType refreshServiceDescription(Long id, boolean ignoreW\n         throw new NotImplementedException(\"REST ServiceDescription refresh not implemented yet\");\n     }\n \n+    /**\n+     * Refresh REST service description\n+     *\n+     * @param serviceDescriptionType\n+     * @return {@link ServiceDescriptionType}\n+     * @throws WrongServiceDescriptionTypeException if service type is not REST\n+     * @throws ServiceNotFoundException             if there is no service linked to service description\n+     * @throws InvalidUrlException                  if url is invalid\n+     */\n+    private ServiceDescriptionType refreshRESTServiceDescription(ServiceDescriptionType serviceDescriptionType)\n+            throws WrongServiceDescriptionTypeException, ServiceNotFoundException, InvalidUrlException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTIyMDU3Mw=="}, "originalCommit": {"oid": "01cdf6b663a524e2dd9f7190552c538c0f026fd3"}, "originalPosition": 169}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyMDYwNzY2OnYy", "diffSide": "RIGHT", "path": "src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/service/ServiceDescriptionService.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQxMjoxMzo1MFrOFl1qQQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxMDo1NDoxOFrOFoEmvA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTIyMDgwMQ==", "bodyText": "Why does this method / functionality actually exist? Doesn't it only update refreshedDate?", "url": "https://github.com/nordic-institute/X-Road/pull/351#discussion_r375220801", "createdAt": "2020-02-05T12:13:50Z", "author": {"login": "jansu76"}, "path": "src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/service/ServiceDescriptionService.java", "diffHunk": "@@ -534,6 +581,71 @@ public ServiceDescriptionType refreshServiceDescription(Long id, boolean ignoreW\n         throw new NotImplementedException(\"REST ServiceDescription refresh not implemented yet\");\n     }\n \n+    /**\n+     * Refresh REST service description\n+     *\n+     * @param serviceDescriptionType\n+     * @return {@link ServiceDescriptionType}\n+     * @throws WrongServiceDescriptionTypeException if service type is not REST\n+     * @throws ServiceNotFoundException             if there is no service linked to service description\n+     * @throws InvalidUrlException                  if url is invalid\n+     */\n+    private ServiceDescriptionType refreshRESTServiceDescription(ServiceDescriptionType serviceDescriptionType)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "01cdf6b663a524e2dd9f7190552c538c0f026fd3"}, "originalPosition": 168}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTUwMzI4Ng==", "bodyText": "It checks the url syntax (which shouldn't be incorrect on refresh) but this is what I though too, but this was clearly stated in the task description.\n'when REST API URL type is \"REST API base path\" => \"REST\":\nvalidating that the URL is syntactically correct'\nMaybe this whole refresh-feature for REST -type of service descriptions should discussed.", "url": "https://github.com/nordic-institute/X-Road/pull/351#discussion_r375503286", "createdAt": "2020-02-05T20:56:57Z", "author": {"login": "TJaakkola"}, "path": "src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/service/ServiceDescriptionService.java", "diffHunk": "@@ -534,6 +581,71 @@ public ServiceDescriptionType refreshServiceDescription(Long id, boolean ignoreW\n         throw new NotImplementedException(\"REST ServiceDescription refresh not implemented yet\");\n     }\n \n+    /**\n+     * Refresh REST service description\n+     *\n+     * @param serviceDescriptionType\n+     * @return {@link ServiceDescriptionType}\n+     * @throws WrongServiceDescriptionTypeException if service type is not REST\n+     * @throws ServiceNotFoundException             if there is no service linked to service description\n+     * @throws InvalidUrlException                  if url is invalid\n+     */\n+    private ServiceDescriptionType refreshRESTServiceDescription(ServiceDescriptionType serviceDescriptionType)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTIyMDgwMQ=="}, "originalCommit": {"oid": "01cdf6b663a524e2dd9f7190552c538c0f026fd3"}, "originalPosition": 168}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzU2MjgxMg==", "bodyText": "Also this is what old ui does.", "url": "https://github.com/nordic-institute/X-Road/pull/351#discussion_r377562812", "createdAt": "2020-02-11T10:54:18Z", "author": {"login": "TJaakkola"}, "path": "src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/service/ServiceDescriptionService.java", "diffHunk": "@@ -534,6 +581,71 @@ public ServiceDescriptionType refreshServiceDescription(Long id, boolean ignoreW\n         throw new NotImplementedException(\"REST ServiceDescription refresh not implemented yet\");\n     }\n \n+    /**\n+     * Refresh REST service description\n+     *\n+     * @param serviceDescriptionType\n+     * @return {@link ServiceDescriptionType}\n+     * @throws WrongServiceDescriptionTypeException if service type is not REST\n+     * @throws ServiceNotFoundException             if there is no service linked to service description\n+     * @throws InvalidUrlException                  if url is invalid\n+     */\n+    private ServiceDescriptionType refreshRESTServiceDescription(ServiceDescriptionType serviceDescriptionType)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTIyMDgwMQ=="}, "originalCommit": {"oid": "01cdf6b663a524e2dd9f7190552c538c0f026fd3"}, "originalPosition": 168}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyMDYxNzcwOnYy", "diffSide": "RIGHT", "path": "src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/service/ServiceDescriptionService.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQxMjoxNzo0OFrOFl1wgw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxMjo0MDo1MlrOFotFIQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTIyMjQwMw==", "bodyText": "This handles warnings pretty differently from what refreshWSDLServiceDescription does. WSDL side gives warnings if new services were added or removed, this does not do it AFAIK?\n\nI think this is how old UI works too, right? Old UI does not warn about adding / removing openapi services either?\nis this by design or accidental?", "url": "https://github.com/nordic-institute/X-Road/pull/351#discussion_r375222403", "createdAt": "2020-02-05T12:17:48Z", "author": {"login": "jansu76"}, "path": "src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/service/ServiceDescriptionService.java", "diffHunk": "@@ -534,6 +581,71 @@ public ServiceDescriptionType refreshServiceDescription(Long id, boolean ignoreW\n         throw new NotImplementedException(\"REST ServiceDescription refresh not implemented yet\");\n     }\n \n+    /**\n+     * Refresh REST service description\n+     *\n+     * @param serviceDescriptionType\n+     * @return {@link ServiceDescriptionType}\n+     * @throws WrongServiceDescriptionTypeException if service type is not REST\n+     * @throws ServiceNotFoundException             if there is no service linked to service description\n+     * @throws InvalidUrlException                  if url is invalid\n+     */\n+    private ServiceDescriptionType refreshRESTServiceDescription(ServiceDescriptionType serviceDescriptionType)\n+            throws WrongServiceDescriptionTypeException, ServiceNotFoundException, InvalidUrlException {\n+        verifyAuthority(\"REFRESH_REST\");\n+\n+        if (!serviceDescriptionType.getType().equals(DescriptionType.REST)) {\n+            throw new WrongServiceDescriptionTypeException(\"Expected description type REST\");\n+        }\n+\n+        validateUrl(serviceDescriptionType.getUrl());\n+\n+        serviceDescriptionType.setRefreshedDate(new Date());\n+\n+        return serviceDescriptionType;\n+    }\n+\n+    /**\n+     * Refresh OPENAPI3 ServiceDescription\n+     *\n+     * @param serviceDescriptionType\n+     * @param ignoreWarnings\n+     * @return {@link ServiceDescriptionType}\n+     * @throws WrongServiceDescriptionTypeException if service type is not openapi3\n+     * @throws ServiceNotFoundException             if there is no service linked to given service description\n+     * @throws UnhandledWarningsException           if unhandled warnings are found and ignoreWarnings if false\n+     * @throws OpenApiParser.ParsingException       if parsing openapi3 description fails\n+     * @throws InvalidUrlException                  if url is invalid\n+     */\n+    private ServiceDescriptionType refreshOPENAPI3ServiceDescription(ServiceDescriptionType serviceDescriptionType,\n+            boolean ignoreWarnings) throws WrongServiceDescriptionTypeException, ServiceNotFoundException,\n+            UnhandledWarningsException, OpenApiParser.ParsingException, InvalidUrlException {\n+\n+        verifyAuthority(\"REFRESH_OPENAPI3\");\n+\n+        if (!serviceDescriptionType.getType().equals(DescriptionType.OPENAPI3)) {\n+            throw new WrongServiceDescriptionTypeException(\"Expected description type OPENAPI3\");\n+        }\n+\n+        if (serviceDescriptionType.getService().get(0) == null) {\n+            throw new ServiceNotFoundException(\"Service not found from servicedescription with id \"\n+                    + serviceDescriptionType.getId());\n+        }\n+\n+        validateUrl(serviceDescriptionType.getUrl());\n+\n+        serviceDescriptionType.setRefreshedDate(new Date());\n+\n+        parseOpenapi3ToServiceDescription(serviceDescriptionType.getUrl(),\n+                serviceDescriptionType.getService().get(0).getServiceCode(),\n+                ignoreWarnings,\n+                serviceDescriptionType);\n+\n+        clientRepository.saveOrUpdateAndFlush(serviceDescriptionType.getClient());\n+\n+        return serviceDescriptionType;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "01cdf6b663a524e2dd9f7190552c538c0f026fd3"}, "originalPosition": 221}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzYwMDczOA==", "bodyText": "Yes, old UI doesn't tell if endpoints are changed (refresh doesn't have effect on services).", "url": "https://github.com/nordic-institute/X-Road/pull/351#discussion_r377600738", "createdAt": "2020-02-11T12:20:50Z", "author": {"login": "TJaakkola"}, "path": "src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/service/ServiceDescriptionService.java", "diffHunk": "@@ -534,6 +581,71 @@ public ServiceDescriptionType refreshServiceDescription(Long id, boolean ignoreW\n         throw new NotImplementedException(\"REST ServiceDescription refresh not implemented yet\");\n     }\n \n+    /**\n+     * Refresh REST service description\n+     *\n+     * @param serviceDescriptionType\n+     * @return {@link ServiceDescriptionType}\n+     * @throws WrongServiceDescriptionTypeException if service type is not REST\n+     * @throws ServiceNotFoundException             if there is no service linked to service description\n+     * @throws InvalidUrlException                  if url is invalid\n+     */\n+    private ServiceDescriptionType refreshRESTServiceDescription(ServiceDescriptionType serviceDescriptionType)\n+            throws WrongServiceDescriptionTypeException, ServiceNotFoundException, InvalidUrlException {\n+        verifyAuthority(\"REFRESH_REST\");\n+\n+        if (!serviceDescriptionType.getType().equals(DescriptionType.REST)) {\n+            throw new WrongServiceDescriptionTypeException(\"Expected description type REST\");\n+        }\n+\n+        validateUrl(serviceDescriptionType.getUrl());\n+\n+        serviceDescriptionType.setRefreshedDate(new Date());\n+\n+        return serviceDescriptionType;\n+    }\n+\n+    /**\n+     * Refresh OPENAPI3 ServiceDescription\n+     *\n+     * @param serviceDescriptionType\n+     * @param ignoreWarnings\n+     * @return {@link ServiceDescriptionType}\n+     * @throws WrongServiceDescriptionTypeException if service type is not openapi3\n+     * @throws ServiceNotFoundException             if there is no service linked to given service description\n+     * @throws UnhandledWarningsException           if unhandled warnings are found and ignoreWarnings if false\n+     * @throws OpenApiParser.ParsingException       if parsing openapi3 description fails\n+     * @throws InvalidUrlException                  if url is invalid\n+     */\n+    private ServiceDescriptionType refreshOPENAPI3ServiceDescription(ServiceDescriptionType serviceDescriptionType,\n+            boolean ignoreWarnings) throws WrongServiceDescriptionTypeException, ServiceNotFoundException,\n+            UnhandledWarningsException, OpenApiParser.ParsingException, InvalidUrlException {\n+\n+        verifyAuthority(\"REFRESH_OPENAPI3\");\n+\n+        if (!serviceDescriptionType.getType().equals(DescriptionType.OPENAPI3)) {\n+            throw new WrongServiceDescriptionTypeException(\"Expected description type OPENAPI3\");\n+        }\n+\n+        if (serviceDescriptionType.getService().get(0) == null) {\n+            throw new ServiceNotFoundException(\"Service not found from servicedescription with id \"\n+                    + serviceDescriptionType.getId());\n+        }\n+\n+        validateUrl(serviceDescriptionType.getUrl());\n+\n+        serviceDescriptionType.setRefreshedDate(new Date());\n+\n+        parseOpenapi3ToServiceDescription(serviceDescriptionType.getUrl(),\n+                serviceDescriptionType.getService().get(0).getServiceCode(),\n+                ignoreWarnings,\n+                serviceDescriptionType);\n+\n+        clientRepository.saveOrUpdateAndFlush(serviceDescriptionType.getClient());\n+\n+        return serviceDescriptionType;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTIyMjQwMw=="}, "originalCommit": {"oid": "01cdf6b663a524e2dd9f7190552c538c0f026fd3"}, "originalPosition": 221}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODIyNTk1Mw==", "bodyText": "Warnings will be implemented in a separate ticket https://jira.niis.org/browse/XRDDEV-918", "url": "https://github.com/nordic-institute/X-Road/pull/351#discussion_r378225953", "createdAt": "2020-02-12T12:40:52Z", "author": {"login": "jansu76"}, "path": "src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/service/ServiceDescriptionService.java", "diffHunk": "@@ -534,6 +581,71 @@ public ServiceDescriptionType refreshServiceDescription(Long id, boolean ignoreW\n         throw new NotImplementedException(\"REST ServiceDescription refresh not implemented yet\");\n     }\n \n+    /**\n+     * Refresh REST service description\n+     *\n+     * @param serviceDescriptionType\n+     * @return {@link ServiceDescriptionType}\n+     * @throws WrongServiceDescriptionTypeException if service type is not REST\n+     * @throws ServiceNotFoundException             if there is no service linked to service description\n+     * @throws InvalidUrlException                  if url is invalid\n+     */\n+    private ServiceDescriptionType refreshRESTServiceDescription(ServiceDescriptionType serviceDescriptionType)\n+            throws WrongServiceDescriptionTypeException, ServiceNotFoundException, InvalidUrlException {\n+        verifyAuthority(\"REFRESH_REST\");\n+\n+        if (!serviceDescriptionType.getType().equals(DescriptionType.REST)) {\n+            throw new WrongServiceDescriptionTypeException(\"Expected description type REST\");\n+        }\n+\n+        validateUrl(serviceDescriptionType.getUrl());\n+\n+        serviceDescriptionType.setRefreshedDate(new Date());\n+\n+        return serviceDescriptionType;\n+    }\n+\n+    /**\n+     * Refresh OPENAPI3 ServiceDescription\n+     *\n+     * @param serviceDescriptionType\n+     * @param ignoreWarnings\n+     * @return {@link ServiceDescriptionType}\n+     * @throws WrongServiceDescriptionTypeException if service type is not openapi3\n+     * @throws ServiceNotFoundException             if there is no service linked to given service description\n+     * @throws UnhandledWarningsException           if unhandled warnings are found and ignoreWarnings if false\n+     * @throws OpenApiParser.ParsingException       if parsing openapi3 description fails\n+     * @throws InvalidUrlException                  if url is invalid\n+     */\n+    private ServiceDescriptionType refreshOPENAPI3ServiceDescription(ServiceDescriptionType serviceDescriptionType,\n+            boolean ignoreWarnings) throws WrongServiceDescriptionTypeException, ServiceNotFoundException,\n+            UnhandledWarningsException, OpenApiParser.ParsingException, InvalidUrlException {\n+\n+        verifyAuthority(\"REFRESH_OPENAPI3\");\n+\n+        if (!serviceDescriptionType.getType().equals(DescriptionType.OPENAPI3)) {\n+            throw new WrongServiceDescriptionTypeException(\"Expected description type OPENAPI3\");\n+        }\n+\n+        if (serviceDescriptionType.getService().get(0) == null) {\n+            throw new ServiceNotFoundException(\"Service not found from servicedescription with id \"\n+                    + serviceDescriptionType.getId());\n+        }\n+\n+        validateUrl(serviceDescriptionType.getUrl());\n+\n+        serviceDescriptionType.setRefreshedDate(new Date());\n+\n+        parseOpenapi3ToServiceDescription(serviceDescriptionType.getUrl(),\n+                serviceDescriptionType.getService().get(0).getServiceCode(),\n+                ignoreWarnings,\n+                serviceDescriptionType);\n+\n+        clientRepository.saveOrUpdateAndFlush(serviceDescriptionType.getClient());\n+\n+        return serviceDescriptionType;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTIyMjQwMw=="}, "originalCommit": {"oid": "01cdf6b663a524e2dd9f7190552c538c0f026fd3"}, "originalPosition": 221}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyMDYzNzIxOnYy", "diffSide": "RIGHT", "path": "src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/service/ServiceDescriptionService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQxMjoyNTowMlrOFl18Pw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxMTo1ODozM1rOFoGWVw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTIyNTQwNw==", "bodyText": "services.rb does these checks\n      check_duplicate_url(item)\n      check_duplicate_service_codes(item)\n\nrefreshWSDLServiceDescription throws WsdlUrlAlreadyExistsException and ServiceAlreadyExistsException if this kind of checks fail. Are these missing from refreshOPENAPI3ServiceDescription?", "url": "https://github.com/nordic-institute/X-Road/pull/351#discussion_r375225407", "createdAt": "2020-02-05T12:25:02Z", "author": {"login": "jansu76"}, "path": "src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/service/ServiceDescriptionService.java", "diffHunk": "@@ -534,6 +581,71 @@ public ServiceDescriptionType refreshServiceDescription(Long id, boolean ignoreW\n         throw new NotImplementedException(\"REST ServiceDescription refresh not implemented yet\");\n     }\n \n+    /**\n+     * Refresh REST service description\n+     *\n+     * @param serviceDescriptionType\n+     * @return {@link ServiceDescriptionType}\n+     * @throws WrongServiceDescriptionTypeException if service type is not REST\n+     * @throws ServiceNotFoundException             if there is no service linked to service description\n+     * @throws InvalidUrlException                  if url is invalid\n+     */\n+    private ServiceDescriptionType refreshRESTServiceDescription(ServiceDescriptionType serviceDescriptionType)\n+            throws WrongServiceDescriptionTypeException, ServiceNotFoundException, InvalidUrlException {\n+        verifyAuthority(\"REFRESH_REST\");\n+\n+        if (!serviceDescriptionType.getType().equals(DescriptionType.REST)) {\n+            throw new WrongServiceDescriptionTypeException(\"Expected description type REST\");\n+        }\n+\n+        validateUrl(serviceDescriptionType.getUrl());\n+\n+        serviceDescriptionType.setRefreshedDate(new Date());\n+\n+        return serviceDescriptionType;\n+    }\n+\n+    /**\n+     * Refresh OPENAPI3 ServiceDescription\n+     *\n+     * @param serviceDescriptionType\n+     * @param ignoreWarnings\n+     * @return {@link ServiceDescriptionType}\n+     * @throws WrongServiceDescriptionTypeException if service type is not openapi3\n+     * @throws ServiceNotFoundException             if there is no service linked to given service description\n+     * @throws UnhandledWarningsException           if unhandled warnings are found and ignoreWarnings if false\n+     * @throws OpenApiParser.ParsingException       if parsing openapi3 description fails\n+     * @throws InvalidUrlException                  if url is invalid", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "01cdf6b663a524e2dd9f7190552c538c0f026fd3"}, "originalPosition": 193}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzU5MTM4Mw==", "bodyText": "I think these checks are unnecessary for refreshOPENAPI3ServiceDescription as Service Description of type OPENAPI3 always contains just one service (servicecode and url) which won't change on refresh.", "url": "https://github.com/nordic-institute/X-Road/pull/351#discussion_r377591383", "createdAt": "2020-02-11T11:58:33Z", "author": {"login": "TJaakkola"}, "path": "src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/service/ServiceDescriptionService.java", "diffHunk": "@@ -534,6 +581,71 @@ public ServiceDescriptionType refreshServiceDescription(Long id, boolean ignoreW\n         throw new NotImplementedException(\"REST ServiceDescription refresh not implemented yet\");\n     }\n \n+    /**\n+     * Refresh REST service description\n+     *\n+     * @param serviceDescriptionType\n+     * @return {@link ServiceDescriptionType}\n+     * @throws WrongServiceDescriptionTypeException if service type is not REST\n+     * @throws ServiceNotFoundException             if there is no service linked to service description\n+     * @throws InvalidUrlException                  if url is invalid\n+     */\n+    private ServiceDescriptionType refreshRESTServiceDescription(ServiceDescriptionType serviceDescriptionType)\n+            throws WrongServiceDescriptionTypeException, ServiceNotFoundException, InvalidUrlException {\n+        verifyAuthority(\"REFRESH_REST\");\n+\n+        if (!serviceDescriptionType.getType().equals(DescriptionType.REST)) {\n+            throw new WrongServiceDescriptionTypeException(\"Expected description type REST\");\n+        }\n+\n+        validateUrl(serviceDescriptionType.getUrl());\n+\n+        serviceDescriptionType.setRefreshedDate(new Date());\n+\n+        return serviceDescriptionType;\n+    }\n+\n+    /**\n+     * Refresh OPENAPI3 ServiceDescription\n+     *\n+     * @param serviceDescriptionType\n+     * @param ignoreWarnings\n+     * @return {@link ServiceDescriptionType}\n+     * @throws WrongServiceDescriptionTypeException if service type is not openapi3\n+     * @throws ServiceNotFoundException             if there is no service linked to given service description\n+     * @throws UnhandledWarningsException           if unhandled warnings are found and ignoreWarnings if false\n+     * @throws OpenApiParser.ParsingException       if parsing openapi3 description fails\n+     * @throws InvalidUrlException                  if url is invalid", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTIyNTQwNw=="}, "originalCommit": {"oid": "01cdf6b663a524e2dd9f7190552c538c0f026fd3"}, "originalPosition": 193}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyMDY0NzY3OnYy", "diffSide": "RIGHT", "path": "src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/service/ServiceDescriptionService.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQxMjoyOToyM1rOFl2C5w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxMjo0ODo0OFrOFotS4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTIyNzExMQ==", "bodyText": "refreshOPENAPI3ServiceDescription differs from convention used elsewhere, should probably be refreshOpenApi3ServiceDescription? There is also variant parseOpenapi3ToServiceDescription in use in several places.", "url": "https://github.com/nordic-institute/X-Road/pull/351#discussion_r375227111", "createdAt": "2020-02-05T12:29:23Z", "author": {"login": "jansu76"}, "path": "src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/service/ServiceDescriptionService.java", "diffHunk": "@@ -534,6 +581,71 @@ public ServiceDescriptionType refreshServiceDescription(Long id, boolean ignoreW\n         throw new NotImplementedException(\"REST ServiceDescription refresh not implemented yet\");\n     }\n \n+    /**\n+     * Refresh REST service description\n+     *\n+     * @param serviceDescriptionType\n+     * @return {@link ServiceDescriptionType}\n+     * @throws WrongServiceDescriptionTypeException if service type is not REST\n+     * @throws ServiceNotFoundException             if there is no service linked to service description\n+     * @throws InvalidUrlException                  if url is invalid\n+     */\n+    private ServiceDescriptionType refreshRESTServiceDescription(ServiceDescriptionType serviceDescriptionType)\n+            throws WrongServiceDescriptionTypeException, ServiceNotFoundException, InvalidUrlException {\n+        verifyAuthority(\"REFRESH_REST\");\n+\n+        if (!serviceDescriptionType.getType().equals(DescriptionType.REST)) {\n+            throw new WrongServiceDescriptionTypeException(\"Expected description type REST\");\n+        }\n+\n+        validateUrl(serviceDescriptionType.getUrl());\n+\n+        serviceDescriptionType.setRefreshedDate(new Date());\n+\n+        return serviceDescriptionType;\n+    }\n+\n+    /**\n+     * Refresh OPENAPI3 ServiceDescription\n+     *\n+     * @param serviceDescriptionType\n+     * @param ignoreWarnings\n+     * @return {@link ServiceDescriptionType}\n+     * @throws WrongServiceDescriptionTypeException if service type is not openapi3\n+     * @throws ServiceNotFoundException             if there is no service linked to given service description\n+     * @throws UnhandledWarningsException           if unhandled warnings are found and ignoreWarnings if false\n+     * @throws OpenApiParser.ParsingException       if parsing openapi3 description fails\n+     * @throws InvalidUrlException                  if url is invalid\n+     */\n+    private ServiceDescriptionType refreshOPENAPI3ServiceDescription(ServiceDescriptionType serviceDescriptionType,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "01cdf6b663a524e2dd9f7190552c538c0f026fd3"}, "originalPosition": 195}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzUzNDU4OQ==", "bodyText": "Added fixes to align convention", "url": "https://github.com/nordic-institute/X-Road/pull/351#discussion_r377534589", "createdAt": "2020-02-11T09:58:11Z", "author": {"login": "TJaakkola"}, "path": "src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/service/ServiceDescriptionService.java", "diffHunk": "@@ -534,6 +581,71 @@ public ServiceDescriptionType refreshServiceDescription(Long id, boolean ignoreW\n         throw new NotImplementedException(\"REST ServiceDescription refresh not implemented yet\");\n     }\n \n+    /**\n+     * Refresh REST service description\n+     *\n+     * @param serviceDescriptionType\n+     * @return {@link ServiceDescriptionType}\n+     * @throws WrongServiceDescriptionTypeException if service type is not REST\n+     * @throws ServiceNotFoundException             if there is no service linked to service description\n+     * @throws InvalidUrlException                  if url is invalid\n+     */\n+    private ServiceDescriptionType refreshRESTServiceDescription(ServiceDescriptionType serviceDescriptionType)\n+            throws WrongServiceDescriptionTypeException, ServiceNotFoundException, InvalidUrlException {\n+        verifyAuthority(\"REFRESH_REST\");\n+\n+        if (!serviceDescriptionType.getType().equals(DescriptionType.REST)) {\n+            throw new WrongServiceDescriptionTypeException(\"Expected description type REST\");\n+        }\n+\n+        validateUrl(serviceDescriptionType.getUrl());\n+\n+        serviceDescriptionType.setRefreshedDate(new Date());\n+\n+        return serviceDescriptionType;\n+    }\n+\n+    /**\n+     * Refresh OPENAPI3 ServiceDescription\n+     *\n+     * @param serviceDescriptionType\n+     * @param ignoreWarnings\n+     * @return {@link ServiceDescriptionType}\n+     * @throws WrongServiceDescriptionTypeException if service type is not openapi3\n+     * @throws ServiceNotFoundException             if there is no service linked to given service description\n+     * @throws UnhandledWarningsException           if unhandled warnings are found and ignoreWarnings if false\n+     * @throws OpenApiParser.ParsingException       if parsing openapi3 description fails\n+     * @throws InvalidUrlException                  if url is invalid\n+     */\n+    private ServiceDescriptionType refreshOPENAPI3ServiceDescription(ServiceDescriptionType serviceDescriptionType,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTIyNzExMQ=="}, "originalCommit": {"oid": "01cdf6b663a524e2dd9f7190552c538c0f026fd3"}, "originalPosition": 195}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODIyOTQ3NA==", "bodyText": "There seems to be one more still: ServiceDescriptionService.addOpenapi3ServiceDescription\nThen some in tests, but those are not so important.", "url": "https://github.com/nordic-institute/X-Road/pull/351#discussion_r378229474", "createdAt": "2020-02-12T12:48:48Z", "author": {"login": "jansu76"}, "path": "src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/service/ServiceDescriptionService.java", "diffHunk": "@@ -534,6 +581,71 @@ public ServiceDescriptionType refreshServiceDescription(Long id, boolean ignoreW\n         throw new NotImplementedException(\"REST ServiceDescription refresh not implemented yet\");\n     }\n \n+    /**\n+     * Refresh REST service description\n+     *\n+     * @param serviceDescriptionType\n+     * @return {@link ServiceDescriptionType}\n+     * @throws WrongServiceDescriptionTypeException if service type is not REST\n+     * @throws ServiceNotFoundException             if there is no service linked to service description\n+     * @throws InvalidUrlException                  if url is invalid\n+     */\n+    private ServiceDescriptionType refreshRESTServiceDescription(ServiceDescriptionType serviceDescriptionType)\n+            throws WrongServiceDescriptionTypeException, ServiceNotFoundException, InvalidUrlException {\n+        verifyAuthority(\"REFRESH_REST\");\n+\n+        if (!serviceDescriptionType.getType().equals(DescriptionType.REST)) {\n+            throw new WrongServiceDescriptionTypeException(\"Expected description type REST\");\n+        }\n+\n+        validateUrl(serviceDescriptionType.getUrl());\n+\n+        serviceDescriptionType.setRefreshedDate(new Date());\n+\n+        return serviceDescriptionType;\n+    }\n+\n+    /**\n+     * Refresh OPENAPI3 ServiceDescription\n+     *\n+     * @param serviceDescriptionType\n+     * @param ignoreWarnings\n+     * @return {@link ServiceDescriptionType}\n+     * @throws WrongServiceDescriptionTypeException if service type is not openapi3\n+     * @throws ServiceNotFoundException             if there is no service linked to given service description\n+     * @throws UnhandledWarningsException           if unhandled warnings are found and ignoreWarnings if false\n+     * @throws OpenApiParser.ParsingException       if parsing openapi3 description fails\n+     * @throws InvalidUrlException                  if url is invalid\n+     */\n+    private ServiceDescriptionType refreshOPENAPI3ServiceDescription(ServiceDescriptionType serviceDescriptionType,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTIyNzExMQ=="}, "originalCommit": {"oid": "01cdf6b663a524e2dd9f7190552c538c0f026fd3"}, "originalPosition": 195}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyMDY4NjgyOnYy", "diffSide": "RIGHT", "path": "src/proxy-ui-api/src/test/java/org/niis/xroad/restapi/openapi/ServiceDescriptionsApiControllerIntegrationTest.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQxMjo0MzoyOFrOFl2ahQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxMTozMjoyMVrOForN6A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTIzMzE1Nw==", "bodyText": "I kind of get the feeling that more tests for refreshOpenApi3Description could be good (here and in ServiceDescriptionServiceIntegrationTest)? Now ServiceDescriptionsApiControllerIntegrationTest tests only WSDL related operations?\nMaybe \"ignore warnings\" feature would be good to test in ServiceDescriptionServiceIntegrationTest? Especially if we would add \"add/remove services\" warnings.", "url": "https://github.com/nordic-institute/X-Road/pull/351#discussion_r375233157", "createdAt": "2020-02-05T12:43:28Z", "author": {"login": "jansu76"}, "path": "src/proxy-ui-api/src/test/java/org/niis/xroad/restapi/openapi/ServiceDescriptionsApiControllerIntegrationTest.java", "diffHunk": "@@ -39,7 +39,7 @@\n import org.niis.xroad.restapi.openapi.model.ServiceDescriptionDisabledNotice;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "01cdf6b663a524e2dd9f7190552c538c0f026fd3"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTUwMTQ2Mg==", "bodyText": "Yeah, I guess I could write some more tests. The reason for writing just one test for making sure refreshing works correctly is that these test would be near to identical to those for testing updating service description. Update is tested more carefully and I felt writing the same tests twice wouldn't be necessary. But it's true the implementations aren't identical and I'll write some tests.", "url": "https://github.com/nordic-institute/X-Road/pull/351#discussion_r375501462", "createdAt": "2020-02-05T20:52:59Z", "author": {"login": "TJaakkola"}, "path": "src/proxy-ui-api/src/test/java/org/niis/xroad/restapi/openapi/ServiceDescriptionsApiControllerIntegrationTest.java", "diffHunk": "@@ -39,7 +39,7 @@\n import org.niis.xroad.restapi.openapi.model.ServiceDescriptionDisabledNotice;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTIzMzE1Nw=="}, "originalCommit": {"oid": "01cdf6b663a524e2dd9f7190552c538c0f026fd3"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODE5NTQzMg==", "bodyText": "Added a couple of tests.", "url": "https://github.com/nordic-institute/X-Road/pull/351#discussion_r378195432", "createdAt": "2020-02-12T11:32:21Z", "author": {"login": "TJaakkola"}, "path": "src/proxy-ui-api/src/test/java/org/niis/xroad/restapi/openapi/ServiceDescriptionsApiControllerIntegrationTest.java", "diffHunk": "@@ -39,7 +39,7 @@\n import org.niis.xroad.restapi.openapi.model.ServiceDescriptionDisabledNotice;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTIzMzE1Nw=="}, "originalCommit": {"oid": "01cdf6b663a524e2dd9f7190552c538c0f026fd3"}, "originalPosition": 1}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2910, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}