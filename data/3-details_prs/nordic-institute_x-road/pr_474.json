{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA4NDE5ODQy", "number": 474, "title": "XRDDEV-962 remove service client access rights", "bodyText": "https://jira.niis.org/browse/XRDDEV-962\nalso refactors AccessRightService\nDo not merge before #465", "createdAt": "2020-04-24T08:53:26Z", "url": "https://github.com/nordic-institute/X-Road/pull/474", "merged": true, "mergeCommit": {"oid": "853dbe8b07a5b15a4712f95d35e7a18c7cb98ce3"}, "closed": true, "closedAt": "2020-05-13T19:34:10Z", "author": {"login": "jansu76"}, "timelineItems": {"totalCount": 27, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcYcZJAAH2gAyNDA4NDE5ODQyOmQyNTcwNGNjMTEwYzE0YjU0ZTU4ZTk3YjA5MTNhYWRlNzE0YmNmOGM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcg8Y86gFqTQxMTE0ODk4MA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "d25704cc110c14b54e58e97b0913aade714bcf8c", "author": {"user": {"login": "jansu76", "name": null}}, "url": "https://github.com/nordic-institute/X-Road/commit/d25704cc110c14b54e58e97b0913aade714bcf8c", "committedDate": "2020-04-17T07:45:04Z", "message": "XRDDEV-962 add controller method, use serviceClientService.convertServiceClientIdentifierDtoToXroadId"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9fb1ef7856b5518bdafca7ca91151a61b162ee28", "author": {"user": {"login": "jansu76", "name": null}}, "url": "https://github.com/nordic-institute/X-Road/commit/9fb1ef7856b5518bdafca7ca91151a61b162ee28", "committedDate": "2020-04-17T12:39:33Z", "message": "XRDDEV-962 add functional implementation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c947085ce191001ca7a5c30e7286f02e4198276d", "author": {"user": {"login": "jansu76", "name": null}}, "url": "https://github.com/nordic-institute/X-Road/commit/c947085ce191001ca7a5c30e7286f02e4198276d", "committedDate": "2020-04-20T08:15:45Z", "message": "XRDDEV-962 refactor, remove duplication"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2405baed5037d81a3e2736eff5e999e6338e1a0c", "author": {"user": {"login": "jansu76", "name": null}}, "url": "https://github.com/nordic-institute/X-Road/commit/2405baed5037d81a3e2736eff5e999e6338e1a0c", "committedDate": "2020-04-21T10:22:57Z", "message": "Merge branch 'XRDDEV-963-add-service-client-access-rights' into XRDDEV-962-remove-service-client-access-rights"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "41e37ced010dee0753a88da440793b337d5d6ada", "author": {"user": {"login": "jansu76", "name": null}}, "url": "https://github.com/nordic-institute/X-Road/commit/41e37ced010dee0753a88da440793b337d5d6ada", "committedDate": "2020-04-21T11:25:37Z", "message": "Merge branch 'XRDDEV-963-add-service-client-access-rights' into XRDDEV-962-remove-service-client-access-rights\n\nFix Conflicts:\n\tsrc/proxy-ui-api/src/main/java/org/niis/xroad/restapi/service/AccessRightService.java\n\tsrc/proxy-ui-api/src/main/java/org/niis/xroad/restapi/service/IdentifierService.java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2aa8b3549fed67f93874e082007670cb7ee116b1", "author": {"user": {"login": "jansu76", "name": null}}, "url": "https://github.com/nordic-institute/X-Road/commit/2aa8b3549fed67f93874e082007670cb7ee116b1", "committedDate": "2020-04-21T11:48:49Z", "message": "XRDDEV-962 refactor"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "807bb681c503964dc09b31afc82f5a6fec20c020", "author": {"user": {"login": "jansu76", "name": null}}, "url": "https://github.com/nordic-institute/X-Road/commit/807bb681c503964dc09b31afc82f5a6fec20c020", "committedDate": "2020-04-22T09:06:14Z", "message": "XRDDEV-962 add some tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a22f7f6d2542035dc94d7fd96c78fe7c79a08d1b", "author": {"user": {"login": "jansu76", "name": null}}, "url": "https://github.com/nordic-institute/X-Road/commit/a22f7f6d2542035dc94d7fd96c78fe7c79a08d1b", "committedDate": "2020-04-22T10:17:46Z", "message": "XRDDEV-962 make delete remove non-base-endpoints, add tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "881f7700e869ad4297298aa2bd6eede2f910a5a3", "author": {"user": {"login": "jansu76", "name": null}}, "url": "https://github.com/nordic-institute/X-Road/commit/881f7700e869ad4297298aa2bd6eede2f910a5a3", "committedDate": "2020-04-22T11:10:14Z", "message": "XRDDEV-962 refactor, extract ServiceClientServiceTest, make AccessRightServiceTest not depend on others"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ecbf7a24dbd5cacc73eed7629912250075e97ec5", "author": {"user": {"login": "jansu76", "name": null}}, "url": "https://github.com/nordic-institute/X-Road/commit/ecbf7a24dbd5cacc73eed7629912250075e97ec5", "committedDate": "2020-04-22T16:52:58Z", "message": "XRDDEV-962 refactor, add rest of tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "149038358487581f54a540ceece0692ae069b8bd", "author": {"user": {"login": "jansu76", "name": null}}, "url": "https://github.com/nordic-institute/X-Road/commit/149038358487581f54a540ceece0692ae069b8bd", "committedDate": "2020-04-22T16:56:48Z", "message": "XRDDEV-962 refactor"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f95986e6d887522e69ccd7003104c13a4ba57208", "author": {"user": {"login": "jansu76", "name": null}}, "url": "https://github.com/nordic-institute/X-Road/commit/f95986e6d887522e69ccd7003104c13a4ba57208", "committedDate": "2020-04-22T19:34:32Z", "message": "XRDDEV-962 refactor"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "136c7c1e2110d092890474f834570652273fab12", "author": {"user": {"login": "jansu76", "name": null}}, "url": "https://github.com/nordic-institute/X-Road/commit/136c7c1e2110d092890474f834570652273fab12", "committedDate": "2020-04-22T20:32:51Z", "message": "XRDDEV-962 refactor: remove separate local group service client id handling, step 1"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f34a0dbb6fd3af702dc3d66eaa598b770e4f2f5c", "author": {"user": {"login": "jansu76", "name": null}}, "url": "https://github.com/nordic-institute/X-Road/commit/f34a0dbb6fd3af702dc3d66eaa598b770e4f2f5c", "committedDate": "2020-04-22T21:19:43Z", "message": "XRDDEV-962 refactor: remove separate local group service client id handling, step 2"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c2bc3b8083886e1213c0779c01744bf6e9f700a3", "author": {"user": {"login": "jansu76", "name": null}}, "url": "https://github.com/nordic-institute/X-Road/commit/c2bc3b8083886e1213c0779c01744bf6e9f700a3", "committedDate": "2020-04-23T15:42:32Z", "message": "XRDDEV-962 add obsolete tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "18271feb5e1e1fb7711e219b6134ea17ae4cc6ba", "author": {"user": {"login": "jansu76", "name": null}}, "url": "https://github.com/nordic-institute/X-Road/commit/18271feb5e1e1fb7711e219b6134ea17ae4cc6ba", "committedDate": "2020-04-23T20:15:42Z", "message": "XRDDEV-962 add obsolete tests, update implementation to handle obsolete service clients"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a83d5ca52bcad1ccf79656ea0833b023e0e4c414", "author": {"user": {"login": "jansu76", "name": null}}, "url": "https://github.com/nordic-institute/X-Road/commit/a83d5ca52bcad1ccf79656ea0833b023e0e4c414", "committedDate": "2020-04-24T06:29:02Z", "message": "XRDDEV-962 add refactor, cleanup"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "12648a07a13cb2f299f9547b979e4451470e016e", "author": {"user": {"login": "jansu76", "name": null}}, "url": "https://github.com/nordic-institute/X-Road/commit/12648a07a13cb2f299f9547b979e4451470e016e", "committedDate": "2020-04-24T08:45:50Z", "message": "Merge branch 'XRDDEV-963-add-service-client-access-rights' into XRDDEV-962-remove-service-client-access-rights"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "860f81a6275ccf04748ab75c4e76d6e48e1a4fa7", "author": {"user": {"login": "jansu76", "name": null}}, "url": "https://github.com/nordic-institute/X-Road/commit/860f81a6275ccf04748ab75c4e76d6e48e1a4fa7", "committedDate": "2020-05-04T07:47:39Z", "message": "XRDDEV-962 fix bug based on XRDDEV-963 PR comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e55b783bbd932a354eaa15bac2c5aca141deff11", "author": {"user": {"login": "jansu76", "name": null}}, "url": "https://github.com/nordic-institute/X-Road/commit/e55b783bbd932a354eaa15bac2c5aca141deff11", "committedDate": "2020-05-04T10:47:55Z", "message": "Merge branch 'XRDDEV-963-add-service-client-access-rights' into XRDDEV-962-remove-service-client-access-rights\n\nFix Conflicts:\n\tsrc/proxy-ui-api/src/main/java/org/niis/xroad/restapi/service/AccessRightService.java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "964b31b82eae1332a6b5d8fa795a8e137029d44e", "author": {"user": {"login": "jansu76", "name": null}}, "url": "https://github.com/nordic-institute/X-Road/commit/964b31b82eae1332a6b5d8fa795a8e137029d44e", "committedDate": "2020-05-05T14:43:32Z", "message": "XRDDEV-962 remove dead code"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f98bb80ce707a42edff2920fc35621f580fb1076", "author": {"user": {"login": "jansu76", "name": null}}, "url": "https://github.com/nordic-institute/X-Road/commit/f98bb80ce707a42edff2920fc35621f580fb1076", "committedDate": "2020-05-06T13:13:19Z", "message": "Merge branch 'develop' into XRDDEV-962-remove-service-client-access-rights\n\nFix Conflicts:\n\tsrc/proxy-ui-api/src/test/java/org/niis/xroad/restapi/openapi/ServiceDescriptionsApiControllerIntegrationTest.java\n\tsrc/proxy-ui-api/src/test/java/org/niis/xroad/restapi/service/AccessRightServiceTest.java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "442ddd86d4a5279e74a6d1bc533d09de31ac6989", "author": {"user": {"login": "jansu76", "name": null}}, "url": "https://github.com/nordic-institute/X-Road/commit/442ddd86d4a5279e74a6d1bc533d09de31ac6989", "committedDate": "2020-05-07T06:40:54Z", "message": "XRDDEV-962 fix test"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA4MjYzMDAy", "url": "https://github.com/nordic-institute/X-Road/pull/474#pullrequestreview-408263002", "createdAt": "2020-05-08T14:05:26Z", "commit": {"oid": "442ddd86d4a5279e74a6d1bc533d09de31ac6989"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQxNDowNToyNlrOGSmwXQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQxMjo1NzozMFrOGTbC_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjE2MjUyNQ==", "bodyText": "I guess commented out code could be removed.", "url": "https://github.com/nordic-institute/X-Road/pull/474#discussion_r422162525", "createdAt": "2020-05-08T14:05:26Z", "author": {"login": "TJaakkola"}, "path": "src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/openapi/ClientsApiController.java", "diffHunk": "@@ -616,34 +613,65 @@ protected void initServiceDescriptionAddBinder(WebDataBinder binder) {\n     public ResponseEntity<List<AccessRight>> addServiceClientAccessRights(String encodedClientId,\n             String endcodedServiceClientId, AccessRights accessRights) {\n         ClientId clientId = clientConverter.convertId(encodedClientId);\n-        ServiceClientIdentifierDto dto = serviceClientIdentifierConverter.convertId(endcodedServiceClientId);\n-        XRoadId serviceClientId = dto.getXRoadId();\n-        if (dto.isLocalGroup()) {\n-            try {\n-                serviceClientId = localGroupService.getLocalGroupIdAsXroadId(dto.getLocalGroupId());\n-            } catch (LocalGroupNotFoundException e) {\n-                throw new ResourceNotFoundException(e);\n-            }\n-        }\n         Set<String> serviceCodes = getServiceCodes(accessRights);\n         List<ServiceClientAccessRightDto> accessRightTypes = null;\n         try {\n+            XRoadId serviceClientId = serviceClientHelper.processServiceClientXRoadId(endcodedServiceClientId);\n             accessRightTypes = accessRightService.addServiceClientAccessRights(clientId, serviceCodes, serviceClientId);\n-        } catch (IdentifierNotFoundException | ClientNotFoundException e) {\n+        } catch (ServiceClientNotFoundException | ClientNotFoundException e) {\n             throw new ResourceNotFoundException(e);\n-        } catch (EndpointNotFoundException e) {\n+        } catch (ServiceNotFoundException e) {\n             throw new BadRequestException(e);\n         } catch (AccessRightService.DuplicateAccessRightException e) {\n             throw new ConflictException(e);\n+        } catch (ServiceClientIdentifierConverter.BadServiceClientIdentifierException e) {\n+            throw serviceClientHelper.wrapInBadRequestException(e);\n         }\n         return new ResponseEntity<>(accessRightConverter.convert(accessRightTypes), HttpStatus.CREATED);\n     }\n \n+    @Override\n+    @PreAuthorize(\"hasAuthority('EDIT_ACL_SUBJECT_OPEN_SERVICES')\")\n+    public ResponseEntity<Void> deleteServiceClientAccessRights(String encodedClientId,\n+            String endcodedServiceClientId, AccessRights accessRights) {\n+        ClientId clientId = clientConverter.convertId(encodedClientId);\n+        Set<String> serviceCodes = getServiceCodes(accessRights);\n+        try {\n+            XRoadId serviceClientId = serviceClientHelper.processServiceClientXRoadId(endcodedServiceClientId);\n+            accessRightService.deleteServiceClientAccessRights(clientId, serviceCodes, serviceClientId);\n+        } catch (ServiceClientNotFoundException | ClientNotFoundException e) {\n+            throw new ResourceNotFoundException(e);\n+        } catch (ServiceNotFoundException e) {\n+            throw new BadRequestException(e);\n+        } catch (AccessRightService.AccessRightNotFoundException e) {\n+            throw new ConflictException(e);\n+        } catch (ServiceClientIdentifierConverter.BadServiceClientIdentifierException e) {\n+            throw serviceClientHelper.wrapInBadRequestException(e);\n+        }\n+        return new ResponseEntity<>(HttpStatus.NO_CONTENT);\n+    }\n+\n     private Set<String> getServiceCodes(AccessRights accessRights) {\n         Set<String> serviceCodes = new HashSet<>();\n         for (AccessRight accessRight: accessRights.getItems()) {\n             serviceCodes.add(accessRight.getServiceCode());\n         }\n         return serviceCodes;\n     }\n+\n+//    /**\n+//     * For local group ids, verify that local group ID matches an existing local group PK.\n+//     *\n+//     * @throws BadRequestException if encoded service client id was badly formatted\n+//     * @throws ResourceNotFoundException if service client id was a local group ID, and that ID does not exist in DB\n+//     */\n+//    private XRoadId processServiceClientXRoadId(String encodedServiceClientId) {\n+//        ServiceClientIdentifierDto dto = serviceClientIdentifierConverter.convertId(encodedServiceClientId);\n+//        try {\n+//            return serviceClientService.convertServiceClientIdentifierDtoToXroadId(dto);\n+//        } catch (LocalGroupNotFoundException e) {\n+//            throw new ResourceNotFoundException(e);\n+//        }\n+//    }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "442ddd86d4a5279e74a6d1bc533d09de31ac6989"}, "originalPosition": 178}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjE3MDkwMA==", "bodyText": "Why was subject_type removed from the required-list? Does this have something to do with populating ServiceClient-objects before knowing the type for some reason?", "url": "https://github.com/nordic-institute/X-Road/pull/474#discussion_r422170900", "createdAt": "2020-05-08T14:20:32Z", "author": {"login": "TJaakkola"}, "path": "src/proxy-ui-api/src/main/resources/openapi-definition.yaml", "diffHunk": "@@ -5376,7 +5376,6 @@ components:\n       description: service client. May be a subsystem, local group, or a global group\n       required:\n         - id\n-        - subject_type", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "442ddd86d4a5279e74a6d1bc533d09de31ac6989"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjI1MTk2MA==", "bodyText": "Method doesn't throw EndpointNotFoundException anymore.", "url": "https://github.com/nordic-institute/X-Road/pull/474#discussion_r422251960", "createdAt": "2020-05-08T16:51:11Z", "author": {"login": "TJaakkola"}, "path": "src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/service/AccessRightService.java", "diffHunk": "@@ -102,80 +106,99 @@ public AccessRightService(GlobalConfFacade globalConfFacade,\n      * @param clientId\n      * @param fullServiceCode\n      * @param subjectIds\n-     * @param localGroupIds\n      * @throws AccessRightNotFoundException if tried to remove access rights that did not exist for the service\n      * @throws ClientNotFoundException if client with given id was not found\n-     * @throws ServiceNotFoundException if service with given fullServicecode was not found\n+     * @throws ServiceNotFoundException if service with given fullServicecode, or the base endpoint for it,\n+     * was not found\n      * @throws EndpointNotFoundException if the base endpoint for the service is not found", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "442ddd86d4a5279e74a6d1bc533d09de31ac6989"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjI1NjU3Mg==", "bodyText": "I guess this is alright here but could also be public method in EndpointService as there a few similar methods (examples below):\npublic EndpointType getServiceBaseEndpoint(ClientType clientType, String serviceCode){...}\npublic List<EndpointType> getServiceBaseEndpoints(ClientType clientType, Set<String> serviceCodes){...}\npublic List<EndpointType> getServiceEndpoints(ClientType clientType, Set<String> serviceCodes){...}", "url": "https://github.com/nordic-institute/X-Road/pull/474#discussion_r422256572", "createdAt": "2020-05-08T16:59:37Z", "author": {"login": "TJaakkola"}, "path": "src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/service/AccessRightService.java", "diffHunk": "@@ -102,80 +106,99 @@ public AccessRightService(GlobalConfFacade globalConfFacade,\n      * @param clientId\n      * @param fullServiceCode\n      * @param subjectIds\n-     * @param localGroupIds\n      * @throws AccessRightNotFoundException if tried to remove access rights that did not exist for the service\n      * @throws ClientNotFoundException if client with given id was not found\n-     * @throws ServiceNotFoundException if service with given fullServicecode was not found\n+     * @throws ServiceNotFoundException if service with given fullServicecode, or the base endpoint for it,\n+     * was not found\n      * @throws EndpointNotFoundException if the base endpoint for the service is not found\n      */\n-    public void deleteSoapServiceAccessRights(ClientId clientId, String fullServiceCode, Set<XRoadId> subjectIds,\n-            Set<Long> localGroupIds) throws ClientNotFoundException, AccessRightNotFoundException,\n-            ServiceNotFoundException, EndpointNotFoundException {\n-        ClientType clientType = clientRepository.getClient(clientId);\n-        if (clientType == null) {\n-            throw new ClientNotFoundException(\"Client \" + clientId.toShortString() + \" not found\");\n-        }\n+    public void deleteSoapServiceAccessRights(ClientId clientId, String fullServiceCode, Set<XRoadId> subjectIds)\n+            throws ClientNotFoundException, AccessRightNotFoundException,\n+            ServiceNotFoundException {\n \n-        ServiceType serviceType = serviceService.getServiceFromClient(clientType, fullServiceCode);\n-        EndpointType endpointType = endpointService.getServiceBaseEndpoint(serviceType);\n+        ClientType clientType = getClient(clientId);\n+\n+        EndpointType endpointType = getBaseEndpointType(fullServiceCode, clientType);\n \n-        deleteEndpointAccessRights(clientType, endpointType, subjectIds, localGroupIds);\n+        deleteEndpointAccessRights(clientType, endpointType, subjectIds);\n+    }\n+\n+    /**\n+     * Get base endpoint for given client and full service code\n+     * @throws ServiceNotFoundException if no match was found\n+     */\n+    private EndpointType getBaseEndpointType(String fullServiceCode, ClientType clientType)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "442ddd86d4a5279e74a6d1bc533d09de31ac6989"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjk0MTcyNQ==", "bodyText": "Adding description to this private methods would be more consistent as all other private methods have a description also. Nevertheless the method name is quite descriptive in itself.", "url": "https://github.com/nordic-institute/X-Road/pull/474#discussion_r422941725", "createdAt": "2020-05-11T10:27:22Z", "author": {"login": "TJaakkola"}, "path": "src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/service/AccessRightService.java", "diffHunk": "@@ -220,41 +240,42 @@ private void deleteEndpointAccessRights(ClientType clientType, EndpointType endp\n      *\n      * @param endpointId\n      * @param subjectIds\n-     * @param localGroupIds\n      * @return\n      * @throws EndpointNotFoundException endpoint is not found with given id\n      * @throws ClientNotFoundException client for the endpoint is not found (shouldn't happen)\n-     * @throws IdentifierNotFoundException Identifier from subjectIds is not found\n+     * @throws ServiceClientNotFoundException if a service client (local group, global group, or system) matching given\n+     * subjectId did not exist\n      * @throws DuplicateAccessRightException Trying to add duplicate access rights\n      */\n-    public List<ServiceClientDto> addEndpointAccessRights(Long endpointId, Set<XRoadId> subjectIds,\n-            Set<Long> localGroupIds) throws EndpointNotFoundException, ClientNotFoundException,\n-            IdentifierNotFoundException, DuplicateAccessRightException {\n+    public List<ServiceClientDto> addEndpointAccessRights(Long endpointId, Set<XRoadId> subjectIds)\n+            throws EndpointNotFoundException, ClientNotFoundException,\n+            ServiceClientNotFoundException, DuplicateAccessRightException {\n \n         EndpointType endpointType = endpointService.getEndpoint(endpointId);\n \n         ClientType clientType = clientRepository.getClientByEndpointId(endpointId);\n-        return addEndpointAccessRights(clientType, endpointType, subjectIds, localGroupIds);\n+        return addEndpointAccessRights(clientType, endpointType, subjectIds);\n \n     }\n \n     /**", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "442ddd86d4a5279e74a6d1bc533d09de31ac6989"}, "originalPosition": 240}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzAwOTE0Mw==", "bodyText": "accessRightsToBeRemoved is a bit missleading name here as this method is just for getting accessrighs and not about removing them.", "url": "https://github.com/nordic-institute/X-Road/pull/474#discussion_r423009143", "createdAt": "2020-05-11T12:39:20Z", "author": {"login": "TJaakkola"}, "path": "src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/service/AccessRightService.java", "diffHunk": "@@ -263,58 +284,129 @@ private void deleteEndpointAccessRights(ClientType clientType, EndpointType endp\n \n     /**\n      * Add access rights for one subject (service client) to multiple services (serviceCodes)\n-     * of a client (clientType)\n+     * of a client (clientType). Access rights are added only to the base endpoint of given service.\n      *\n      * @param clientId id of the client who owns the services\n      * @param serviceCodes serviceCodes of the services to add access rights to (without version numbers)\n      * @param subjectId subject (service client) to add access rights for. Can be a local group,\n      *                  global group, or a subsystem\n      * @return ServiceClientAccessRightDtos that were added for this service client\n-     * @throws EndpointNotFoundException if serviceCodes had any codes that were not client's services\n+     * @throws ServiceNotFoundException if serviceCodes had any codes that were not client's services\n      * (did not have base endpoints)\n      * @throws ClientNotFoundException if client matching clientId was not found\n      * @throws DuplicateAccessRightException if trying to add existing access right\n-     * @throws IdentifierNotFoundException if service client (local group, global group, or system) matching given\n+     * @throws ServiceClientNotFoundException if a service client (local group, global group, or system) matching given\n      * subjectId did not exist\n      */\n     public List<ServiceClientAccessRightDto> addServiceClientAccessRights(ClientId clientId, Set<String> serviceCodes,\n-            XRoadId subjectId) throws EndpointNotFoundException,\n-            DuplicateAccessRightException, ClientNotFoundException, IdentifierNotFoundException {\n+            XRoadId subjectId) throws ServiceNotFoundException,\n+            DuplicateAccessRightException, ClientNotFoundException, ServiceClientNotFoundException {\n \n-        log.debug(\"Add access rights to subject\", subjectId); // acl_subject_open_services_add\n+        ClientType clientType = getClient(clientId);\n \n+        validateServiceClientObjectType(subjectId);\n+\n+        // verify that given service client objects exist, otherwise access cannot be added\n+        identifierService.verifyServiceClientObjectsExist(clientType, new HashSet(Arrays.asList(subjectId)));\n+\n+        // prepare params for addAccessRightsInternal\n+        List<EndpointType> baseEndpoints = null;\n+        try {\n+            baseEndpoints = endpointService.getServiceBaseEndpoints(clientType, serviceCodes);\n+        } catch (EndpointNotFoundException e) {\n+            throw new ServiceNotFoundException(e);\n+        }\n+\n+        // make sure subject id exists in serverconf db IDENTIFIER table, and use a managed entity\n+        XRoadId managedSubjectId = identifierService.getOrPersistXroadId(subjectId);\n+\n+        return addAccessRightsInternal(new HashSet<>(Arrays.asList(managedSubjectId)), clientType, baseEndpoints)\n+                    .get(managedSubjectId);\n+    }\n+\n+    /**\n+     * Removes access rights from one subject (service client) to multiple services (serviceCodes)\n+     * of a client. Access rights are removed from base endpoint and also from non-base endpoints with\n+     * given serviceCode.\n+     *\n+     * @param clientId id of the client who owns the services\n+     * @param serviceCodes serviceCodes of the services to remove access rights to (without version numbers)\n+     * @param subjectId subject (service client) to remove access rights from. Can be a local group,\n+     *                  global group, or a subsystem\n+     * @throws AccessRightNotFoundException if trying to remove (any) access rights that did not exist\n+     * @throws ClientNotFoundException if client matching clientId was not found\n+     * @throws ServiceNotFoundException if given client did not have services with given serviceCodes\n+     */\n+    public void deleteServiceClientAccessRights(ClientId clientId,\n+            Set<String> serviceCodes, XRoadId subjectId) throws AccessRightNotFoundException, ClientNotFoundException,\n+            ServiceNotFoundException {\n+\n+        ClientType clientType = getClient(clientId);\n+\n+        validateServiceClientObjectType(subjectId);\n+\n+        // first delete base endpoint access rights. These all need to exist, otherwise AccessRightNotFoundException\n+        List<EndpointType> baseEndpoints = null;\n+        try {\n+            baseEndpoints = endpointService.getServiceBaseEndpoints(clientType, serviceCodes);\n+        } catch (EndpointNotFoundException e) {\n+            throw new ServiceNotFoundException(e);\n+        }\n+        Set<XRoadId> subjectIds = new HashSet<>(Arrays.asList((subjectId)));\n+        deleteEndpointAccessRights(clientType, baseEndpoints, subjectIds);\n+\n+        // then delete all non-base endpoint access rights, for this subject. If there's none, that's fine\n+        List<EndpointType> allEndpoints = endpointService.getServiceEndpoints(clientType, serviceCodes);\n+        List<AccessRightType> remainingAccessRights = getEndpointAccessRights(clientType, allEndpoints, subjectIds);\n+        if (!remainingAccessRights.isEmpty()) {\n+            Set<EndpointType> endpointsWithAccessRights = remainingAccessRights.stream()\n+                    .map(a -> a.getEndpoint())\n+                    .collect(Collectors.toSet());\n+            deleteEndpointAccessRights(clientType, new ArrayList<>(endpointsWithAccessRights), subjectIds);\n+        }\n+    }\n+\n+    /**\n+     * Get client's acl entries that match endpointTypes and subjects\n+     */\n+    private List<AccessRightType> getEndpointAccessRights(ClientType clientType, List<EndpointType> endpointTypes,\n+            Set<XRoadId> subjectIds) {\n+\n+        List<Long> endpointIds = endpointTypes.stream().map(e -> e.getId()).collect(Collectors.toList());\n+        List<AccessRightType> accessRightsToBeRemoved = clientType.getAcl().stream()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "442ddd86d4a5279e74a6d1bc533d09de31ac6989"}, "originalPosition": 370}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzAxNjEwOQ==", "bodyText": "Is there something missing from this comment?\nAlso this method in general makes me think if it should be in ClientService?", "url": "https://github.com/nordic-institute/X-Road/pull/474#discussion_r423016109", "createdAt": "2020-05-11T12:51:47Z", "author": {"login": "TJaakkola"}, "path": "src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/service/AccessRightService.java", "diffHunk": "@@ -263,58 +284,129 @@ private void deleteEndpointAccessRights(ClientType clientType, EndpointType endp\n \n     /**\n      * Add access rights for one subject (service client) to multiple services (serviceCodes)\n-     * of a client (clientType)\n+     * of a client (clientType). Access rights are added only to the base endpoint of given service.\n      *\n      * @param clientId id of the client who owns the services\n      * @param serviceCodes serviceCodes of the services to add access rights to (without version numbers)\n      * @param subjectId subject (service client) to add access rights for. Can be a local group,\n      *                  global group, or a subsystem\n      * @return ServiceClientAccessRightDtos that were added for this service client\n-     * @throws EndpointNotFoundException if serviceCodes had any codes that were not client's services\n+     * @throws ServiceNotFoundException if serviceCodes had any codes that were not client's services\n      * (did not have base endpoints)\n      * @throws ClientNotFoundException if client matching clientId was not found\n      * @throws DuplicateAccessRightException if trying to add existing access right\n-     * @throws IdentifierNotFoundException if service client (local group, global group, or system) matching given\n+     * @throws ServiceClientNotFoundException if a service client (local group, global group, or system) matching given\n      * subjectId did not exist\n      */\n     public List<ServiceClientAccessRightDto> addServiceClientAccessRights(ClientId clientId, Set<String> serviceCodes,\n-            XRoadId subjectId) throws EndpointNotFoundException,\n-            DuplicateAccessRightException, ClientNotFoundException, IdentifierNotFoundException {\n+            XRoadId subjectId) throws ServiceNotFoundException,\n+            DuplicateAccessRightException, ClientNotFoundException, ServiceClientNotFoundException {\n \n-        log.debug(\"Add access rights to subject\", subjectId); // acl_subject_open_services_add\n+        ClientType clientType = getClient(clientId);\n \n+        validateServiceClientObjectType(subjectId);\n+\n+        // verify that given service client objects exist, otherwise access cannot be added\n+        identifierService.verifyServiceClientObjectsExist(clientType, new HashSet(Arrays.asList(subjectId)));\n+\n+        // prepare params for addAccessRightsInternal\n+        List<EndpointType> baseEndpoints = null;\n+        try {\n+            baseEndpoints = endpointService.getServiceBaseEndpoints(clientType, serviceCodes);\n+        } catch (EndpointNotFoundException e) {\n+            throw new ServiceNotFoundException(e);\n+        }\n+\n+        // make sure subject id exists in serverconf db IDENTIFIER table, and use a managed entity\n+        XRoadId managedSubjectId = identifierService.getOrPersistXroadId(subjectId);\n+\n+        return addAccessRightsInternal(new HashSet<>(Arrays.asList(managedSubjectId)), clientType, baseEndpoints)\n+                    .get(managedSubjectId);\n+    }\n+\n+    /**\n+     * Removes access rights from one subject (service client) to multiple services (serviceCodes)\n+     * of a client. Access rights are removed from base endpoint and also from non-base endpoints with\n+     * given serviceCode.\n+     *\n+     * @param clientId id of the client who owns the services\n+     * @param serviceCodes serviceCodes of the services to remove access rights to (without version numbers)\n+     * @param subjectId subject (service client) to remove access rights from. Can be a local group,\n+     *                  global group, or a subsystem\n+     * @throws AccessRightNotFoundException if trying to remove (any) access rights that did not exist\n+     * @throws ClientNotFoundException if client matching clientId was not found\n+     * @throws ServiceNotFoundException if given client did not have services with given serviceCodes\n+     */\n+    public void deleteServiceClientAccessRights(ClientId clientId,\n+            Set<String> serviceCodes, XRoadId subjectId) throws AccessRightNotFoundException, ClientNotFoundException,\n+            ServiceNotFoundException {\n+\n+        ClientType clientType = getClient(clientId);\n+\n+        validateServiceClientObjectType(subjectId);\n+\n+        // first delete base endpoint access rights. These all need to exist, otherwise AccessRightNotFoundException\n+        List<EndpointType> baseEndpoints = null;\n+        try {\n+            baseEndpoints = endpointService.getServiceBaseEndpoints(clientType, serviceCodes);\n+        } catch (EndpointNotFoundException e) {\n+            throw new ServiceNotFoundException(e);\n+        }\n+        Set<XRoadId> subjectIds = new HashSet<>(Arrays.asList((subjectId)));\n+        deleteEndpointAccessRights(clientType, baseEndpoints, subjectIds);\n+\n+        // then delete all non-base endpoint access rights, for this subject. If there's none, that's fine\n+        List<EndpointType> allEndpoints = endpointService.getServiceEndpoints(clientType, serviceCodes);\n+        List<AccessRightType> remainingAccessRights = getEndpointAccessRights(clientType, allEndpoints, subjectIds);\n+        if (!remainingAccessRights.isEmpty()) {\n+            Set<EndpointType> endpointsWithAccessRights = remainingAccessRights.stream()\n+                    .map(a -> a.getEndpoint())\n+                    .collect(Collectors.toSet());\n+            deleteEndpointAccessRights(clientType, new ArrayList<>(endpointsWithAccessRights), subjectIds);\n+        }\n+    }\n+\n+    /**\n+     * Get client's acl entries that match endpointTypes and subjects\n+     */\n+    private List<AccessRightType> getEndpointAccessRights(ClientType clientType, List<EndpointType> endpointTypes,\n+            Set<XRoadId> subjectIds) {\n+\n+        List<Long> endpointIds = endpointTypes.stream().map(e -> e.getId()).collect(Collectors.toList());\n+        List<AccessRightType> accessRightsToBeRemoved = clientType.getAcl().stream()\n+                .filter(acl -> endpointIds.contains(acl.getEndpoint().getId())\n+                        && subjectIds.contains(acl.getSubjectId()))\n+                .collect(Collectors.toList());\n+        return accessRightsToBeRemoved;\n+    }\n+\n+    /**\n+     * Get client, throw ClientNotFoundException if not found\n+     */\n+    private ClientType getClient(ClientId clientId) throws ClientNotFoundException {\n         // validate params some", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "442ddd86d4a5279e74a6d1bc533d09de31ac6989"}, "originalPosition": 381}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzAxOTI2Mw==", "bodyText": "I'm not quite sure why this method is changed to package private, instead of just public?", "url": "https://github.com/nordic-institute/X-Road/pull/474#discussion_r423019263", "createdAt": "2020-05-11T12:57:30Z", "author": {"login": "TJaakkola"}, "path": "src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/service/AccessRightService.java", "diffHunk": "@@ -328,7 +420,7 @@ private boolean isValidServiceClientType(XRoadObjectType objectType) {\n      * @param accessRightTypes\n      * @return\n      */\n-    public List<ServiceClientDto> mapAccessRightsToServiceClients(ClientType clientType,\n+    List<ServiceClientDto> mapAccessRightsToServiceClients(ClientType clientType,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "442ddd86d4a5279e74a6d1bc533d09de31ac6989"}, "originalPosition": 430}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3446eb4edca6a08ba118ade45eac24bad1c5bdf5", "author": {"user": {"login": "jansu76", "name": null}}, "url": "https://github.com/nordic-institute/X-Road/commit/3446eb4edca6a08ba118ade45eac24bad1c5bdf5", "committedDate": "2020-05-13T17:19:11Z", "message": "XRDDEV-962 fixes for PR comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f48acd07ae0bf8d552c843fde55664ed158ab6e6", "author": {"user": {"login": "jansu76", "name": null}}, "url": "https://github.com/nordic-institute/X-Road/commit/f48acd07ae0bf8d552c843fde55664ed158ab6e6", "committedDate": "2020-05-13T17:27:36Z", "message": "Merge branch 'develop' into XRDDEV-962-remove-service-client-access-rights\n\nFix Conflicts:\n\tsrc/proxy-ui-api/src/test/java/org/niis/xroad/restapi/util/TestUtils.java"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDExMTQ4OTgw", "url": "https://github.com/nordic-institute/X-Road/pull/474#pullrequestreview-411148980", "createdAt": "2020-05-13T17:33:13Z", "commit": {"oid": "f48acd07ae0bf8d552c843fde55664ed158ab6e6"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4225, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}