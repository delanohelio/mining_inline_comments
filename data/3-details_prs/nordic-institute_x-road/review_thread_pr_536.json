{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI4NDI0MjU4", "number": 536, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxMToyMzo1M1rOEEQI0Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxMToyMzo1M1rOEEQI0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyODk0MTYxOnYy", "diffSide": "RIGHT", "path": "src/proxy-ui-api/frontend/src/store/modules/certificateSignRequest.ts", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxMToyMzo1M1rOGhwb4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQwNjo0MjoxN1rOGiQbbA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODA0OTc2Mw==", "bodyText": "As we have the latest javascript & typescript language features in use here I would like to see we embrace the current way of writing idiomatic javascript. I mean that although initializing a new array with in for loop works correctly in this case I urge using arrays map-function and Set -data structure (or filter-function) to solve creating 1:1 transformations on array of objects & removing duplicates.", "url": "https://github.com/nordic-institute/X-Road/pull/536#discussion_r438049763", "createdAt": "2020-06-10T11:23:53Z", "author": {"login": "TJaakkola"}, "path": "src/proxy-ui-api/frontend/src/store/modules/certificateSignRequest.ts", "diffHunk": "@@ -263,6 +270,27 @@ export const actions: ActionTree<CsrState, RootState> = {\n     commit('storeCsrKey', templateKey);\n     commit('storeUsage', UsageTypes.SIGNING);\n   },\n+\n+  fetchAllMemberIds({ commit, rootGetters }) {\n+    return api\n+      .get('/clients?show_members=true')\n+      .then((res) => {\n+        const idArray: string[] = [];\n+        res.data.forEach((client: Client) => {\n+          // Create id:s without possible subsystem code\n+          const partialId = `${client.instance_id}:${client.member_class}:${client.member_code}`;\n+\n+          if (!idArray.includes(partialId)) {\n+            idArray.push(partialId);\n+          }\n+        });", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dfbcb3b05a6b70705970044f1773d4bd87d7ee6e"}, "originalPosition": 98}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODM0OTg3NA==", "bodyText": "Old habits die hard. Updated to use map + Set.", "url": "https://github.com/nordic-institute/X-Road/pull/536#discussion_r438349874", "createdAt": "2020-06-10T19:11:16Z", "author": {"login": "Riippi"}, "path": "src/proxy-ui-api/frontend/src/store/modules/certificateSignRequest.ts", "diffHunk": "@@ -263,6 +270,27 @@ export const actions: ActionTree<CsrState, RootState> = {\n     commit('storeCsrKey', templateKey);\n     commit('storeUsage', UsageTypes.SIGNING);\n   },\n+\n+  fetchAllMemberIds({ commit, rootGetters }) {\n+    return api\n+      .get('/clients?show_members=true')\n+      .then((res) => {\n+        const idArray: string[] = [];\n+        res.data.forEach((client: Client) => {\n+          // Create id:s without possible subsystem code\n+          const partialId = `${client.instance_id}:${client.member_class}:${client.member_code}`;\n+\n+          if (!idArray.includes(partialId)) {\n+            idArray.push(partialId);\n+          }\n+        });", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODA0OTc2Mw=="}, "originalCommit": {"oid": "dfbcb3b05a6b70705970044f1773d4bd87d7ee6e"}, "originalPosition": 98}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODU3MzkzMg==", "bodyText": "I though mapping id-strings would have been a separate step and that's why mentioned the map-function. Adding items to set in loop makes using map futile. This is good but you could use forEach with instead of map in there.", "url": "https://github.com/nordic-institute/X-Road/pull/536#discussion_r438573932", "createdAt": "2020-06-11T06:42:17Z", "author": {"login": "TJaakkola"}, "path": "src/proxy-ui-api/frontend/src/store/modules/certificateSignRequest.ts", "diffHunk": "@@ -263,6 +270,27 @@ export const actions: ActionTree<CsrState, RootState> = {\n     commit('storeCsrKey', templateKey);\n     commit('storeUsage', UsageTypes.SIGNING);\n   },\n+\n+  fetchAllMemberIds({ commit, rootGetters }) {\n+    return api\n+      .get('/clients?show_members=true')\n+      .then((res) => {\n+        const idArray: string[] = [];\n+        res.data.forEach((client: Client) => {\n+          // Create id:s without possible subsystem code\n+          const partialId = `${client.instance_id}:${client.member_class}:${client.member_code}`;\n+\n+          if (!idArray.includes(partialId)) {\n+            idArray.push(partialId);\n+          }\n+        });", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODA0OTc2Mw=="}, "originalCommit": {"oid": "dfbcb3b05a6b70705970044f1773d4bd87d7ee6e"}, "originalPosition": 98}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2727, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}