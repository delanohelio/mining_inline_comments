{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk5NjM3MDk3", "number": 450, "title": "XRDDEV-895 Restore backup", "bodyText": "Restoring a Security Server configuration from a backup file.\nJIRA: https://jira.niis.org/browse/XRDDEV-895", "createdAt": "2020-04-06T13:14:24Z", "url": "https://github.com/nordic-institute/X-Road/pull/450", "merged": true, "mergeCommit": {"oid": "085079d5ef1a0c00b5b7fddc3d4815de5a75c763"}, "closed": true, "closedAt": "2020-05-11T07:37:37Z", "author": {"login": "carohauta"}, "timelineItems": {"totalCount": 16, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcRIVMVgH2gAyMzk5NjM3MDk3Ojk0MjRiMDVjM2E3NjdkYmFiNGVkN2UxMWU5NGNhNGVkZmU4MjdiZDc=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcgKqzsAFqTQwODkyOTUwMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "9424b05c3a767dbab4ed7e11e94ca4edfe827bd7", "author": {"user": {"login": "carohauta", "name": "Caro Hautam\u00e4ki"}}, "url": "https://github.com/nordic-institute/X-Road/commit/9424b05c3a767dbab4ed7e11e94ca4edfe827bd7", "committedDate": "2020-03-25T14:25:11Z", "message": "XRDDEV-895 Restore from backup\n\n* RestoreService, controller methods, tests\n* API definition changes: moved filename to request body\n* added more logging to ExternalProcessrRunner class"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "93b1f352ff08bb6ba3154a0fb6a608a1796be966", "author": {"user": {"login": "carohauta", "name": "Caro Hautam\u00e4ki"}}, "url": "https://github.com/nordic-institute/X-Road/commit/93b1f352ff08bb6ba3154a0fb6a608a1796be966", "committedDate": "2020-03-26T07:35:15Z", "message": "XRDDEV-895 Restore from backup use backup repo\n\n* use backup repository to get the backup dir path\n* controller tests\n* javadocs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cb6b1ed724442abe9213163e9a1642f503a15670", "author": {"user": {"login": "carohauta", "name": "Caro Hautam\u00e4ki"}}, "url": "https://github.com/nordic-institute/X-Road/commit/cb6b1ed724442abe9213163e9a1642f503a15670", "committedDate": "2020-04-03T12:33:56Z", "message": "Merge branch 'develop' into XRDDEV-895-restore-backup\n\n# Conflicts:\n#\tsrc/proxy-ui-api/src/main/java/org/niis/xroad/restapi/service/ExternalProcessRunner.java\n#\tsrc/proxy-ui-api/src/main/resources/common-application.yml"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "22363a6cce0008355dc6b07ff12311f980df2f6e", "author": {"user": {"login": "carohauta", "name": "Caro Hautam\u00e4ki"}}, "url": "https://github.com/nordic-institute/X-Road/commit/22363a6cce0008355dc6b07ff12311f980df2f6e", "committedDate": "2020-04-06T11:34:21Z", "message": "XRDDEV-895 Restore from backup\n\n* update api definition"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3c7ab236be25928263925460bf3344f97ce4fdea", "author": {"user": {"login": "carohauta", "name": "Caro Hautam\u00e4ki"}}, "url": "https://github.com/nordic-institute/X-Road/commit/3c7ab236be25928263925460bf3344f97ce4fdea", "committedDate": "2020-04-06T11:35:05Z", "message": "Merge branch 'develop' into XRDDEV-895-restore-backup"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b859efc3d778616c53d9d8182cf105e9c8c698a9", "author": {"user": {"login": "carohauta", "name": "Caro Hautam\u00e4ki"}}, "url": "https://github.com/nordic-institute/X-Road/commit/b859efc3d778616c53d9d8182cf105e9c8c698a9", "committedDate": "2020-04-06T13:07:24Z", "message": "XRDDEV-895 Restore from backup\n\n* update api definition\n* added couple tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f65a7234183528d3d4ad6b3c98f8c2ad724302d3", "author": {"user": {"login": "carohauta", "name": "Caro Hautam\u00e4ki"}}, "url": "https://github.com/nordic-institute/X-Road/commit/f65a7234183528d3d4ad6b3c98f8c2ad724302d3", "committedDate": "2020-04-07T10:29:44Z", "message": "XRDDEV-895 Restore from backup // sync restore"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1f905a86876465b31893ae0546644f415c8109f1", "author": {"user": {"login": "carohauta", "name": "Caro Hautam\u00e4ki"}}, "url": "https://github.com/nordic-institute/X-Road/commit/1f905a86876465b31893ae0546644f415c8109f1", "committedDate": "2020-04-27T07:23:39Z", "message": "Merge branch 'develop' into XRDDEV-895-restore-backup"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6cf84832499e0d9282403dc446097b993b223513", "author": {"user": {"login": "carohauta", "name": "Caro Hautam\u00e4ki"}}, "url": "https://github.com/nordic-institute/X-Road/commit/6cf84832499e0d9282403dc446097b993b223513", "committedDate": "2020-04-27T10:51:36Z", "message": "XRDDEV-895 Alert flags when restoring\n\n* set running flag in alerts\n* new exception if running restore concurrently"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAwODQ1Njc1", "url": "https://github.com/nordic-institute/X-Road/pull/450#pullrequestreview-400845675", "createdAt": "2020-04-27T11:02:31Z", "commit": {"oid": "6cf84832499e0d9282403dc446097b993b223513"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QxMTowMjozMVrOGMdW5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QxMTowMjozMVrOGMdW5Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTcxNzA5Mw==", "bodyText": "I had kind of a difficult choice between options:\n\nmark the method as synchronized to prevent concurrency\nmake it throw an exception if trying to run concurrently\n\nI ended up adding both.\nThrowing an exception makes it possible to run the restore concurrently (in theory) if multiple users trigger it simultaneously. The user is already seeing an alert saying that there is a restore in progress so getting an error would feel natural if the user tried to trigger another restore.\nIn it's current state the synchronized nature of the method overrides the notificationService.getBackupRestoreRunningSince() check making it redundant.", "url": "https://github.com/nordic-institute/X-Road/pull/450#discussion_r415717093", "createdAt": "2020-04-27T11:02:31Z", "author": {"login": "carohauta"}, "path": "src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/service/RestoreService.java", "diffHunk": "@@ -0,0 +1,129 @@\n+/**\n+ * The MIT License\n+ * Copyright (c) 2018 Estonian Information System Authority (RIA),\n+ * Nordic Institute for Interoperability Solutions (NIIS), Population Register Centre (VRK)\n+ * Copyright (c) 2015-2017 Estonian Information System Authority (RIA), Population Register Centre (VRK)\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package org.niis.xroad.restapi.service;\n+\n+import ee.ria.xroad.common.identifier.SecurityServerId;\n+\n+import lombok.Setter;\n+import lombok.extern.slf4j.Slf4j;\n+import org.niis.xroad.restapi.cache.CurrentSecurityServerId;\n+import org.niis.xroad.restapi.exceptions.DeviationAwareRuntimeException;\n+import org.niis.xroad.restapi.repository.BackupRepository;\n+import org.niis.xroad.restapi.util.FormatUtils;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.security.access.prepost.PreAuthorize;\n+import org.springframework.stereotype.Service;\n+\n+import java.io.File;\n+\n+/**\n+ * service class for restoring security server configuration from a backup\n+ */\n+@Slf4j\n+@Service\n+@PreAuthorize(\"isAuthenticated()\")\n+public class RestoreService {\n+    @Setter\n+    private String configurationRestoreScriptPath;\n+    @Setter\n+    private String configurationRestoreScriptArgs;\n+\n+    private final ExternalProcessRunner externalProcessRunner;\n+    private final CurrentSecurityServerId currentSecurityServerId;\n+    private final BackupRepository backupRepository;\n+    private final NotificationService notificationService;\n+\n+    @Autowired\n+    public RestoreService(ExternalProcessRunner externalProcessRunner,\n+            @Value(\"${script.restore-configuration.path}\") String configurationRestoreScriptPath,\n+            @Value(\"${script.restore-configuration.args}\") String configurationRestoreScriptArgs,\n+            CurrentSecurityServerId currentSecurityServerId, BackupRepository backupRepository,\n+            NotificationService notificationService) {\n+        this.externalProcessRunner = externalProcessRunner;\n+        this.configurationRestoreScriptPath = configurationRestoreScriptPath;\n+        this.configurationRestoreScriptArgs = configurationRestoreScriptArgs;\n+        this.currentSecurityServerId = currentSecurityServerId;\n+        this.backupRepository = backupRepository;\n+        this.notificationService = notificationService;\n+    }\n+\n+    /**\n+     * Restores the security server configuration from a backup. Any tokens that are not software tokens are logged\n+     * out by the current restore script.\n+     * @param fileName name of the backup file\n+     * @throws BackupFileNotFoundException\n+     * @throws InterruptedException execution of the restore script was interrupted\n+     * @throws RestoreInProgressException if restore is already in progress\n+     */\n+    public synchronized void restoreFromBackup(String fileName) throws BackupFileNotFoundException,\n+            InterruptedException, RestoreInProgressException {\n+        if (notificationService.getBackupRestoreRunningSince() != null) {\n+            // should not happen because the method is synchronized\n+            throw new RestoreInProgressException(\"There is a restore (started at \"\n+                    + notificationService.getBackupRestoreRunningSince() + \") already in progress\");\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6cf84832499e0d9282403dc446097b993b223513"}, "originalPosition": 87}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAyNTU2NzM5", "url": "https://github.com/nordic-institute/X-Road/pull/450#pullrequestreview-402556739", "createdAt": "2020-04-29T10:52:24Z", "commit": {"oid": "6cf84832499e0d9282403dc446097b993b223513"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxMDo1MjoyNFrOGN5hRg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxMjo1MToxNVrOGN9UXw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzIyNzA3OA==", "bodyText": "I would make this a checked exception. RestoreScriptFailedExeption, RestoreProcessFailedException....? True, it should probably result in http 500, not because of that. But because it is a major part of what can go wrong when method executes, that is important enough to be documented for the methods callers, both current and future ones.", "url": "https://github.com/nordic-institute/X-Road/pull/450#discussion_r417227078", "createdAt": "2020-04-29T10:52:24Z", "author": {"login": "jansu76"}, "path": "src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/service/RestoreService.java", "diffHunk": "@@ -0,0 +1,129 @@\n+/**\n+ * The MIT License\n+ * Copyright (c) 2018 Estonian Information System Authority (RIA),\n+ * Nordic Institute for Interoperability Solutions (NIIS), Population Register Centre (VRK)\n+ * Copyright (c) 2015-2017 Estonian Information System Authority (RIA), Population Register Centre (VRK)\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package org.niis.xroad.restapi.service;\n+\n+import ee.ria.xroad.common.identifier.SecurityServerId;\n+\n+import lombok.Setter;\n+import lombok.extern.slf4j.Slf4j;\n+import org.niis.xroad.restapi.cache.CurrentSecurityServerId;\n+import org.niis.xroad.restapi.exceptions.DeviationAwareRuntimeException;\n+import org.niis.xroad.restapi.repository.BackupRepository;\n+import org.niis.xroad.restapi.util.FormatUtils;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.security.access.prepost.PreAuthorize;\n+import org.springframework.stereotype.Service;\n+\n+import java.io.File;\n+\n+/**\n+ * service class for restoring security server configuration from a backup\n+ */\n+@Slf4j\n+@Service\n+@PreAuthorize(\"isAuthenticated()\")\n+public class RestoreService {\n+    @Setter\n+    private String configurationRestoreScriptPath;\n+    @Setter\n+    private String configurationRestoreScriptArgs;\n+\n+    private final ExternalProcessRunner externalProcessRunner;\n+    private final CurrentSecurityServerId currentSecurityServerId;\n+    private final BackupRepository backupRepository;\n+    private final NotificationService notificationService;\n+\n+    @Autowired\n+    public RestoreService(ExternalProcessRunner externalProcessRunner,\n+            @Value(\"${script.restore-configuration.path}\") String configurationRestoreScriptPath,\n+            @Value(\"${script.restore-configuration.args}\") String configurationRestoreScriptArgs,\n+            CurrentSecurityServerId currentSecurityServerId, BackupRepository backupRepository,\n+            NotificationService notificationService) {\n+        this.externalProcessRunner = externalProcessRunner;\n+        this.configurationRestoreScriptPath = configurationRestoreScriptPath;\n+        this.configurationRestoreScriptArgs = configurationRestoreScriptArgs;\n+        this.currentSecurityServerId = currentSecurityServerId;\n+        this.backupRepository = backupRepository;\n+        this.notificationService = notificationService;\n+    }\n+\n+    /**\n+     * Restores the security server configuration from a backup. Any tokens that are not software tokens are logged\n+     * out by the current restore script.\n+     * @param fileName name of the backup file\n+     * @throws BackupFileNotFoundException\n+     * @throws InterruptedException execution of the restore script was interrupted\n+     * @throws RestoreInProgressException if restore is already in progress\n+     */\n+    public synchronized void restoreFromBackup(String fileName) throws BackupFileNotFoundException,\n+            InterruptedException, RestoreInProgressException {\n+        if (notificationService.getBackupRestoreRunningSince() != null) {\n+            // should not happen because the method is synchronized\n+            throw new RestoreInProgressException(\"There is a restore (started at \"\n+                    + notificationService.getBackupRestoreRunningSince() + \") already in progress\");\n+        }\n+        String configurationBackupPath = backupRepository.getConfigurationBackupPath();\n+        String backupFilePath = configurationBackupPath + fileName;\n+        File backupFile = new File(backupFilePath);\n+        if (!backupFile.isFile()) {\n+            throw new BackupFileNotFoundException(\"backup file \" + backupFilePath + \" does not exist\");\n+        }\n+        String[] arguments = buildArguments(backupFilePath);\n+        try {\n+            notificationService.setBackupRestoreRunningSince();\n+            ExternalProcessRunner.ProcessResult processResult = externalProcessRunner\n+                    .executeAndThrowOnFailure(configurationRestoreScriptPath, arguments);\n+\n+            int exitCode = processResult.getExitCode();\n+\n+            String restoreFinishedLogMsg = String.format(\"Restoring configuration finished with exit status %s\",\n+                    exitCode);\n+            log.info(restoreFinishedLogMsg);\n+            log.info(\" --- Restore script console output - START --- \");\n+            log.info(ExternalProcessRunner.processOutputToString(processResult.getProcessOutput()));\n+            log.info(\" --- Restore script console output - END --- \");\n+        } catch (ProcessFailedException | ProcessNotExecutableException e) {\n+            throw new DeviationAwareRuntimeException(\"restoring from a backup failed\", e.getErrorDeviation());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6cf84832499e0d9282403dc446097b993b223513"}, "originalPosition": 109}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzI2NDAyNA==", "bodyText": "https://jira.niis.org/browse/XRDDEV-1041 wants the script output formatted line by line, does this change prevent it?", "url": "https://github.com/nordic-institute/X-Road/pull/450#discussion_r417264024", "createdAt": "2020-04-29T12:06:38Z", "author": {"login": "jansu76"}, "path": "src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/service/ExternalProcessRunner.java", "diffHunk": "@@ -132,15 +136,25 @@ public ProcessResult executeAndThrowOnFailure(String command, String... args) th\n         ProcessResult processResult = execute(command, args);\n         // if the process fails we attach the output into the exception\n         if (processResult.getExitCode() != 0) {\n-            String lineSep = System.lineSeparator();\n-            String processOutputString = String.join(lineSep, processResult.processOutput);\n+            String processOutputString = processOutputToString(processResult.processOutput);\n             String errorMsg = String.format(\"Failed to run command '%s' with output: %n %s\",\n                     processResult.commandWithArgs, processOutputString);\n+            log.error(errorMsg);\n             throw new ProcessFailedException(errorMsg);\n         }\n         return processResult;\n     }\n \n+    /**\n+     * Format the process output string list to one string\n+     * @param processOutput\n+     * @return\n+     */\n+    public static String processOutputToString(List<String> processOutput) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6cf84832499e0d9282403dc446097b993b223513"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzI4NzQzOQ==", "bodyText": "Old implementation does this kinds of \"resetting\" after restore has happened.\ndef after_restore\n  ServerConfDatabaseCtx.get.closeSessionFactory\nend\n\nNot sure if this needs to do similar things, or if everything works already. At least should be tested and verified that if backup contains e.g. local group name x which has been later changed to x2, reading local group name after restore returns x2.\nAt least all application state needs to be cleared if it's possible that it is not up to date after restore. That means at least global caches (like API keys).\ncenter ui also does this\n  def before_restore\n    ActiveRecord::Base.remove_connection\n  end\n\n  def after_restore\n    ActiveRecord::Base.establish_connection\n  end\n\nbut I don't see old proxy implementation doing the similar. It does prevent use of UI during the restore though. I think we need to do the same but there's a separate ticket for that in https://jira.niis.org/browse/XRDDEV-950.", "url": "https://github.com/nordic-institute/X-Road/pull/450#discussion_r417287439", "createdAt": "2020-04-29T12:48:11Z", "author": {"login": "jansu76"}, "path": "src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/service/RestoreService.java", "diffHunk": "@@ -0,0 +1,129 @@\n+/**\n+ * The MIT License\n+ * Copyright (c) 2018 Estonian Information System Authority (RIA),\n+ * Nordic Institute for Interoperability Solutions (NIIS), Population Register Centre (VRK)\n+ * Copyright (c) 2015-2017 Estonian Information System Authority (RIA), Population Register Centre (VRK)\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package org.niis.xroad.restapi.service;\n+\n+import ee.ria.xroad.common.identifier.SecurityServerId;\n+\n+import lombok.Setter;\n+import lombok.extern.slf4j.Slf4j;\n+import org.niis.xroad.restapi.cache.CurrentSecurityServerId;\n+import org.niis.xroad.restapi.exceptions.DeviationAwareRuntimeException;\n+import org.niis.xroad.restapi.repository.BackupRepository;\n+import org.niis.xroad.restapi.util.FormatUtils;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.security.access.prepost.PreAuthorize;\n+import org.springframework.stereotype.Service;\n+\n+import java.io.File;\n+\n+/**\n+ * service class for restoring security server configuration from a backup\n+ */\n+@Slf4j\n+@Service\n+@PreAuthorize(\"isAuthenticated()\")\n+public class RestoreService {\n+    @Setter\n+    private String configurationRestoreScriptPath;\n+    @Setter\n+    private String configurationRestoreScriptArgs;\n+\n+    private final ExternalProcessRunner externalProcessRunner;\n+    private final CurrentSecurityServerId currentSecurityServerId;\n+    private final BackupRepository backupRepository;\n+    private final NotificationService notificationService;\n+\n+    @Autowired\n+    public RestoreService(ExternalProcessRunner externalProcessRunner,\n+            @Value(\"${script.restore-configuration.path}\") String configurationRestoreScriptPath,\n+            @Value(\"${script.restore-configuration.args}\") String configurationRestoreScriptArgs,\n+            CurrentSecurityServerId currentSecurityServerId, BackupRepository backupRepository,\n+            NotificationService notificationService) {\n+        this.externalProcessRunner = externalProcessRunner;\n+        this.configurationRestoreScriptPath = configurationRestoreScriptPath;\n+        this.configurationRestoreScriptArgs = configurationRestoreScriptArgs;\n+        this.currentSecurityServerId = currentSecurityServerId;\n+        this.backupRepository = backupRepository;\n+        this.notificationService = notificationService;\n+    }\n+\n+    /**\n+     * Restores the security server configuration from a backup. Any tokens that are not software tokens are logged\n+     * out by the current restore script.\n+     * @param fileName name of the backup file\n+     * @throws BackupFileNotFoundException\n+     * @throws InterruptedException execution of the restore script was interrupted\n+     * @throws RestoreInProgressException if restore is already in progress\n+     */\n+    public synchronized void restoreFromBackup(String fileName) throws BackupFileNotFoundException,\n+            InterruptedException, RestoreInProgressException {\n+        if (notificationService.getBackupRestoreRunningSince() != null) {\n+            // should not happen because the method is synchronized\n+            throw new RestoreInProgressException(\"There is a restore (started at \"\n+                    + notificationService.getBackupRestoreRunningSince() + \") already in progress\");\n+        }\n+        String configurationBackupPath = backupRepository.getConfigurationBackupPath();\n+        String backupFilePath = configurationBackupPath + fileName;\n+        File backupFile = new File(backupFilePath);\n+        if (!backupFile.isFile()) {\n+            throw new BackupFileNotFoundException(\"backup file \" + backupFilePath + \" does not exist\");\n+        }\n+        String[] arguments = buildArguments(backupFilePath);\n+        try {\n+            notificationService.setBackupRestoreRunningSince();\n+            ExternalProcessRunner.ProcessResult processResult = externalProcessRunner\n+                    .executeAndThrowOnFailure(configurationRestoreScriptPath, arguments);\n+\n+            int exitCode = processResult.getExitCode();\n+\n+            String restoreFinishedLogMsg = String.format(\"Restoring configuration finished with exit status %s\",\n+                    exitCode);\n+            log.info(restoreFinishedLogMsg);\n+            log.info(\" --- Restore script console output - START --- \");\n+            log.info(ExternalProcessRunner.processOutputToString(processResult.getProcessOutput()));\n+            log.info(\" --- Restore script console output - END --- \");\n+        } catch (ProcessFailedException | ProcessNotExecutableException e) {\n+            throw new DeviationAwareRuntimeException(\"restoring from a backup failed\", e.getErrorDeviation());\n+        } finally {\n+            notificationService.resetBackupRestoreRunningSince();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6cf84832499e0d9282403dc446097b993b223513"}, "originalPosition": 111}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzI4ODQwNw==", "bodyText": "Nice and clear script argument handling and how spring properties are used, well done \ud83d\udc4d", "url": "https://github.com/nordic-institute/X-Road/pull/450#discussion_r417288407", "createdAt": "2020-04-29T12:49:47Z", "author": {"login": "jansu76"}, "path": "src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/service/RestoreService.java", "diffHunk": "@@ -0,0 +1,129 @@\n+/**\n+ * The MIT License\n+ * Copyright (c) 2018 Estonian Information System Authority (RIA),\n+ * Nordic Institute for Interoperability Solutions (NIIS), Population Register Centre (VRK)\n+ * Copyright (c) 2015-2017 Estonian Information System Authority (RIA), Population Register Centre (VRK)\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package org.niis.xroad.restapi.service;\n+\n+import ee.ria.xroad.common.identifier.SecurityServerId;\n+\n+import lombok.Setter;\n+import lombok.extern.slf4j.Slf4j;\n+import org.niis.xroad.restapi.cache.CurrentSecurityServerId;\n+import org.niis.xroad.restapi.exceptions.DeviationAwareRuntimeException;\n+import org.niis.xroad.restapi.repository.BackupRepository;\n+import org.niis.xroad.restapi.util.FormatUtils;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.security.access.prepost.PreAuthorize;\n+import org.springframework.stereotype.Service;\n+\n+import java.io.File;\n+\n+/**\n+ * service class for restoring security server configuration from a backup\n+ */\n+@Slf4j\n+@Service\n+@PreAuthorize(\"isAuthenticated()\")\n+public class RestoreService {\n+    @Setter\n+    private String configurationRestoreScriptPath;\n+    @Setter\n+    private String configurationRestoreScriptArgs;\n+\n+    private final ExternalProcessRunner externalProcessRunner;\n+    private final CurrentSecurityServerId currentSecurityServerId;\n+    private final BackupRepository backupRepository;\n+    private final NotificationService notificationService;\n+\n+    @Autowired\n+    public RestoreService(ExternalProcessRunner externalProcessRunner,\n+            @Value(\"${script.restore-configuration.path}\") String configurationRestoreScriptPath,\n+            @Value(\"${script.restore-configuration.args}\") String configurationRestoreScriptArgs,\n+            CurrentSecurityServerId currentSecurityServerId, BackupRepository backupRepository,\n+            NotificationService notificationService) {\n+        this.externalProcessRunner = externalProcessRunner;\n+        this.configurationRestoreScriptPath = configurationRestoreScriptPath;\n+        this.configurationRestoreScriptArgs = configurationRestoreScriptArgs;\n+        this.currentSecurityServerId = currentSecurityServerId;\n+        this.backupRepository = backupRepository;\n+        this.notificationService = notificationService;\n+    }\n+\n+    /**\n+     * Restores the security server configuration from a backup. Any tokens that are not software tokens are logged\n+     * out by the current restore script.\n+     * @param fileName name of the backup file\n+     * @throws BackupFileNotFoundException\n+     * @throws InterruptedException execution of the restore script was interrupted\n+     * @throws RestoreInProgressException if restore is already in progress\n+     */\n+    public synchronized void restoreFromBackup(String fileName) throws BackupFileNotFoundException,\n+            InterruptedException, RestoreInProgressException {\n+        if (notificationService.getBackupRestoreRunningSince() != null) {\n+            // should not happen because the method is synchronized\n+            throw new RestoreInProgressException(\"There is a restore (started at \"\n+                    + notificationService.getBackupRestoreRunningSince() + \") already in progress\");\n+        }\n+        String configurationBackupPath = backupRepository.getConfigurationBackupPath();\n+        String backupFilePath = configurationBackupPath + fileName;\n+        File backupFile = new File(backupFilePath);\n+        if (!backupFile.isFile()) {\n+            throw new BackupFileNotFoundException(\"backup file \" + backupFilePath + \" does not exist\");\n+        }\n+        String[] arguments = buildArguments(backupFilePath);\n+        try {\n+            notificationService.setBackupRestoreRunningSince();\n+            ExternalProcessRunner.ProcessResult processResult = externalProcessRunner\n+                    .executeAndThrowOnFailure(configurationRestoreScriptPath, arguments);\n+\n+            int exitCode = processResult.getExitCode();\n+\n+            String restoreFinishedLogMsg = String.format(\"Restoring configuration finished with exit status %s\",\n+                    exitCode);\n+            log.info(restoreFinishedLogMsg);\n+            log.info(\" --- Restore script console output - START --- \");\n+            log.info(ExternalProcessRunner.processOutputToString(processResult.getProcessOutput()));\n+            log.info(\" --- Restore script console output - END --- \");\n+        } catch (ProcessFailedException | ProcessNotExecutableException e) {\n+            throw new DeviationAwareRuntimeException(\"restoring from a backup failed\", e.getErrorDeviation());\n+        } finally {\n+            notificationService.resetBackupRestoreRunningSince();\n+        }\n+    }\n+\n+    /**\n+     * Encodes args with base64 and returns all options and args as an array\n+     * @param backupFilePath\n+     * @return\n+     */\n+    private String[] buildArguments(String backupFilePath) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6cf84832499e0d9282403dc446097b993b223513"}, "originalPosition": 120}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzI4OTMxMQ==", "bodyText": "maybe also this should mention \"hsm\" so that one does not thing it may log out software token, if someone reads just this part.", "url": "https://github.com/nordic-institute/X-Road/pull/450#discussion_r417289311", "createdAt": "2020-04-29T12:51:15Z", "author": {"login": "jansu76"}, "path": "src/proxy-ui-api/src/main/resources/openapi-definition.yaml", "diffHunk": "@@ -178,10 +178,19 @@ paths:\n             minLength: 1\n             maxLength: 255\n       responses:\n-        '202':\n-          description: item accepted\n-        '204':\n-          description: request was successful\n+        '200':\n+          description: restore was successful\n+          content:\n+            application/json:\n+              schema:\n+                description: response that tells if tokens were logged out during the restore process", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6cf84832499e0d9282403dc446097b993b223513"}, "originalPosition": 13}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "97d377c7c058c7785f099719a7fa383d08eb0236", "author": {"user": {"login": "carohauta", "name": "Caro Hautam\u00e4ki"}}, "url": "https://github.com/nordic-institute/X-Road/commit/97d377c7c058c7785f099719a7fa383d08eb0236", "committedDate": "2020-05-04T08:46:12Z", "message": "XRDDEV-895 PR comment fix 1"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8cca160b542d5a763deedf8bab4a5e6cc20012cc", "author": {"user": {"login": "carohauta", "name": "Caro Hautam\u00e4ki"}}, "url": "https://github.com/nordic-institute/X-Road/commit/8cca160b542d5a763deedf8bab4a5e6cc20012cc", "committedDate": "2020-05-06T06:42:49Z", "message": "Merge branch 'develop' into XRDDEV-895-restore-backup"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4fdda7919589b420cd25af6ecf3dde65227ec4c1", "author": {"user": {"login": "carohauta", "name": "Caro Hautam\u00e4ki"}}, "url": "https://github.com/nordic-institute/X-Road/commit/4fdda7919589b420cd25af6ecf3dde65227ec4c1", "committedDate": "2020-05-06T08:33:08Z", "message": "XRDDEV-895 PR comment fix 2 // clear api-key caches"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2341da4c2b89397f82888f801585293a273a2fa5", "author": {"user": {"login": "carohauta", "name": "Caro Hautam\u00e4ki"}}, "url": "https://github.com/nordic-institute/X-Road/commit/2341da4c2b89397f82888f801585293a273a2fa5", "committedDate": "2020-05-06T09:35:31Z", "message": "XRDDEV-895 Fix broken tests"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA4OTI5NTAx", "url": "https://github.com/nordic-institute/X-Road/pull/450#pullrequestreview-408929501", "createdAt": "2020-05-11T07:37:28Z", "commit": {"oid": "2341da4c2b89397f82888f801585293a273a2fa5"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4190, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}