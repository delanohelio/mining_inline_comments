{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQwMDM0MTMz", "number": 809, "reviewThreads": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQwOTo1ODo1N1rOFFgAbw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxMTo1NDo0NFrOFGJ2WQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxMzExNTk5OnYy", "diffSide": "RIGHT", "path": "src/common-util/src/main/java/ee/ria/xroad/common/util/CertUtils.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQwOTo1ODo1N1rOIGCiog==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQwOTo1ODo1N1rOIGCiog==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzIwNDAwMg==", "bodyText": "These could be constants", "url": "https://github.com/nordic-institute/X-Road/pull/809#discussion_r543204002", "createdAt": "2020-12-15T09:58:57Z", "author": {"login": "jhyoty"}, "path": "src/common-util/src/main/java/ee/ria/xroad/common/util/CertUtils.java", "diffHunk": "@@ -136,6 +139,37 @@ private static String getPrincipalCommonName(X500Principal principal) {\n         return cn;\n     }\n \n+    /**\n+     * Reads subject alternative names from certificate and returns its string representation\n+     * @param cert certificate for which to get the subject alternative names\n+     * @return string representation of the subject alternative names\n+     */\n+    @SuppressWarnings(\"checkstyle:magicnumber\")\n+    public static String getSubjectAlternativeNames(X509Certificate cert) {\n+        List<String> fieldNames = Collections.unmodifiableList(\n+                Arrays.asList(\"othername\", \"email\", \"DNS\", \"x400\", \"DirName\", \"ediPartyName\",\n+                        \"URI\", \"IP Address\", \"Registered ID\"));\n+        List<Integer> unsupportedFields = Collections.unmodifiableList(Arrays.asList(0, 3, 5));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8ff66d581f13fc71c6bc9efd22e363bf91cf25be"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxMzEyNDAyOnYy", "diffSide": "RIGHT", "path": "src/common-util/src/main/java/ee/ria/xroad/common/util/CertUtils.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxMDowMDo0NVrOIGCnew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxMDowMDo0NVrOIGCnew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzIwNTI0Mw==", "bodyText": "Consider using StringBuilder", "url": "https://github.com/nordic-institute/X-Road/pull/809#discussion_r543205243", "createdAt": "2020-12-15T10:00:45Z", "author": {"login": "jhyoty"}, "path": "src/common-util/src/main/java/ee/ria/xroad/common/util/CertUtils.java", "diffHunk": "@@ -136,6 +139,37 @@ private static String getPrincipalCommonName(X500Principal principal) {\n         return cn;\n     }\n \n+    /**\n+     * Reads subject alternative names from certificate and returns its string representation\n+     * @param cert certificate for which to get the subject alternative names\n+     * @return string representation of the subject alternative names\n+     */\n+    @SuppressWarnings(\"checkstyle:magicnumber\")\n+    public static String getSubjectAlternativeNames(X509Certificate cert) {\n+        List<String> fieldNames = Collections.unmodifiableList(\n+                Arrays.asList(\"othername\", \"email\", \"DNS\", \"x400\", \"DirName\", \"ediPartyName\",\n+                        \"URI\", \"IP Address\", \"Registered ID\"));\n+        List<Integer> unsupportedFields = Collections.unmodifiableList(Arrays.asList(0, 3, 5));\n+        String result = \"\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8ff66d581f13fc71c6bc9efd22e363bf91cf25be"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxMzI0NzYyOnYy", "diffSide": "RIGHT", "path": "src/common-util/src/test/java/ee/ria/xroad/common/util/CertUtilsTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxMDoyNjo0NFrOIGDwRw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxMDoyNjo0NFrOIGDwRw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzIyMzg3OQ==", "bodyText": "It is a good practice to use IANA reserved example domain names in documentation and tests (see e.g. https://tools.ietf.org/html/rfc2606#section-3).", "url": "https://github.com/nordic-institute/X-Road/pull/809#discussion_r543223879", "createdAt": "2020-12-15T10:26:44Z", "author": {"login": "jhyoty"}, "path": "src/common-util/src/test/java/ee/ria/xroad/common/util/CertUtilsTest.java", "diffHunk": "@@ -118,4 +120,50 @@ public void testCreatePkcs12() throws Exception {\n         Path path = Paths.get(pkcsPath);\n         assertTrue(Files.exists(path));\n     }\n+\n+    @Test\n+    public void testGetSubjectAlternativeNamesEmpty() throws CertificateException, IOException {\n+        final String certPath = \"src/test/resources/cert_empty.pem\";\n+        CertificateFactory cf = CertificateFactory.getInstance(\"X.509\");\n+        try (FileInputStream in = new FileInputStream(certPath)) {\n+            X509Certificate cert = (X509Certificate) cf.generateCertificate(in);\n+            assertEquals(null, CertUtils.getSubjectAlternativeNames(cert));\n+        }\n+    }\n+\n+    @Test\n+    public void testGetSubjectAlternativeNamesSimple() throws CertificateException, IOException {\n+        final String certPath = \"src/test/resources/cert_simple.pem\";\n+        CertificateFactory cf = CertificateFactory.getInstance(\"X.509\");\n+        try (FileInputStream in = new FileInputStream(certPath)) {\n+            X509Certificate cert = (X509Certificate) cf.generateCertificate(in);\n+            assertEquals(\"DNS:*.dev.acme.org\", CertUtils.getSubjectAlternativeNames(cert));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8ff66d581f13fc71c6bc9efd22e363bf91cf25be"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxMzI2Mjk4OnYy", "diffSide": "RIGHT", "path": "src/proxy-ui-api/src/main/resources/openapi-definition.yaml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxMDoyOTo1N1rOIGD5Jg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxMDoyOTo1N1rOIGD5Jg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzIyNjE1MA==", "bodyText": "It is a good practice to use IANA reserved example domain names in documentation (see https://tools.ietf.org/html/rfc2606#section-3) instead of some arbitrary names that can be reserved.  E.g. \"example.org\" is one such domain.", "url": "https://github.com/nordic-institute/X-Road/pull/809#discussion_r543226150", "createdAt": "2020-12-15T10:29:57Z", "author": {"login": "jhyoty"}, "path": "src/proxy-ui-api/src/main/resources/openapi-definition.yaml", "diffHunk": "@@ -5326,6 +5327,13 @@ components:\n           uniqueItems: true\n           items:\n             $ref: '#/components/schemas/KeyUsage'\n+        subject_alternative_names:\n+          type: string\n+          format: text\n+          description: certificate subject alternative names\n+          example: DNS:*.dev.acme.org", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8ff66d581f13fc71c6bc9efd22e363bf91cf25be"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxOTk0MTU4OnYy", "diffSide": "RIGHT", "path": "src/common-util/src/main/java/ee/ria/xroad/common/util/CertUtils.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxMTo0NzozOVrOIHBbGw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxMTo0NzozOVrOIHBbGw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDIzNDI2Nw==", "bodyText": "This variable could be private static final constant field in the CertUtils class, no need to recreate it every time this function is executed.", "url": "https://github.com/nordic-institute/X-Road/pull/809#discussion_r544234267", "createdAt": "2020-12-16T11:47:39Z", "author": {"login": "jhyoty"}, "path": "src/common-util/src/main/java/ee/ria/xroad/common/util/CertUtils.java", "diffHunk": "@@ -136,6 +139,42 @@ private static String getPrincipalCommonName(X500Principal principal) {\n         return cn;\n     }\n \n+    /**\n+     * Reads subject alternative names from certificate and returns its string representation\n+     * @param cert certificate for which to get the subject alternative names\n+     * @return string representation of the subject alternative names\n+     */\n+    public static String getSubjectAlternativeNames(X509Certificate cert) {\n+        List<String> fieldNames = Collections.unmodifiableList(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b01dfa0ea1e877f50dbd7bc7ba487c50ade741be"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxOTk0MjI1OnYy", "diffSide": "RIGHT", "path": "src/common-util/src/main/java/ee/ria/xroad/common/util/CertUtils.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxMTo0Nzo0OFrOIHBbdA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxMTo0Nzo0OFrOIHBbdA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDIzNDM1Ng==", "bodyText": "This variable could be private static final constant in the CertUtils class.", "url": "https://github.com/nordic-institute/X-Road/pull/809#discussion_r544234356", "createdAt": "2020-12-16T11:47:48Z", "author": {"login": "jhyoty"}, "path": "src/common-util/src/main/java/ee/ria/xroad/common/util/CertUtils.java", "diffHunk": "@@ -136,6 +139,42 @@ private static String getPrincipalCommonName(X500Principal principal) {\n         return cn;\n     }\n \n+    /**\n+     * Reads subject alternative names from certificate and returns its string representation\n+     * @param cert certificate for which to get the subject alternative names\n+     * @return string representation of the subject alternative names\n+     */\n+    public static String getSubjectAlternativeNames(X509Certificate cert) {\n+        List<String> fieldNames = Collections.unmodifiableList(\n+                Arrays.asList(\"othername\", \"email\", \"DNS\", \"x400\", \"DirName\", \"ediPartyName\",\n+                        \"URI\", \"IP Address\", \"Registered ID\"));\n+        final int minIdx = 0;\n+        final int maxIdx = 8;\n+        final int othernameIdx = 0;\n+        final int x400Idx = 3;\n+        final int ediPartyNameIdx = 5;\n+        List<Integer> unsupportedFields = Collections.unmodifiableList(Arrays.asList(othernameIdx, x400Idx,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b01dfa0ea1e877f50dbd7bc7ba487c50ade741be"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxOTk0MzU5OnYy", "diffSide": "RIGHT", "path": "src/common-util/src/main/java/ee/ria/xroad/common/util/CertUtils.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxMTo0ODowOFrOIHBcOg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxMTo0ODowOFrOIHBcOg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDIzNDU1NA==", "bodyText": "Seem unnecessary", "url": "https://github.com/nordic-institute/X-Road/pull/809#discussion_r544234554", "createdAt": "2020-12-16T11:48:08Z", "author": {"login": "jhyoty"}, "path": "src/common-util/src/main/java/ee/ria/xroad/common/util/CertUtils.java", "diffHunk": "@@ -136,6 +139,42 @@ private static String getPrincipalCommonName(X500Principal principal) {\n         return cn;\n     }\n \n+    /**\n+     * Reads subject alternative names from certificate and returns its string representation\n+     * @param cert certificate for which to get the subject alternative names\n+     * @return string representation of the subject alternative names\n+     */\n+    public static String getSubjectAlternativeNames(X509Certificate cert) {\n+        List<String> fieldNames = Collections.unmodifiableList(\n+                Arrays.asList(\"othername\", \"email\", \"DNS\", \"x400\", \"DirName\", \"ediPartyName\",\n+                        \"URI\", \"IP Address\", \"Registered ID\"));\n+        final int minIdx = 0;\n+        final int maxIdx = 8;\n+        final int othernameIdx = 0;\n+        final int x400Idx = 3;\n+        final int ediPartyNameIdx = 5;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b01dfa0ea1e877f50dbd7bc7ba487c50ade741be"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxOTk1MDM5OnYy", "diffSide": "RIGHT", "path": "src/common-util/src/main/java/ee/ria/xroad/common/util/CertUtils.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxMTo0OTo0OVrOIHBgFQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxMTo0OTo0OVrOIHBgFQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDIzNTU0MQ==", "bodyText": "Inefficient, turns the builder to a new string on every iteration.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                String prefix = builder.toString().isEmpty() ? \"\" : \", \";\n          \n          \n            \n                                if (builder.length() > 0) builder.append(\", \");", "url": "https://github.com/nordic-institute/X-Road/pull/809#discussion_r544235541", "createdAt": "2020-12-16T11:49:49Z", "author": {"login": "jhyoty"}, "path": "src/common-util/src/main/java/ee/ria/xroad/common/util/CertUtils.java", "diffHunk": "@@ -136,6 +139,42 @@ private static String getPrincipalCommonName(X500Principal principal) {\n         return cn;\n     }\n \n+    /**\n+     * Reads subject alternative names from certificate and returns its string representation\n+     * @param cert certificate for which to get the subject alternative names\n+     * @return string representation of the subject alternative names\n+     */\n+    public static String getSubjectAlternativeNames(X509Certificate cert) {\n+        List<String> fieldNames = Collections.unmodifiableList(\n+                Arrays.asList(\"othername\", \"email\", \"DNS\", \"x400\", \"DirName\", \"ediPartyName\",\n+                        \"URI\", \"IP Address\", \"Registered ID\"));\n+        final int minIdx = 0;\n+        final int maxIdx = 8;\n+        final int othernameIdx = 0;\n+        final int x400Idx = 3;\n+        final int ediPartyNameIdx = 5;\n+        List<Integer> unsupportedFields = Collections.unmodifiableList(Arrays.asList(othernameIdx, x400Idx,\n+                ediPartyNameIdx));\n+        StringBuilder builder = new StringBuilder();\n+        Collection<List<?>> subjectAlternativeNames;\n+        try {\n+            subjectAlternativeNames = cert.getSubjectAlternativeNames();\n+        } catch (CertificateParsingException e) {\n+            throw new CodedException(ErrorCodes.X_INCORRECT_CERTIFICATE,\n+                    \"Failed parsing the certificate information\");\n+        }\n+        if (subjectAlternativeNames != null) {\n+            for (final List<?> sanItem : subjectAlternativeNames) {\n+                final Integer itemType = (Integer) sanItem.get(0);\n+                if (itemType >= minIdx && itemType <= maxIdx) {\n+                    String prefix = builder.toString().isEmpty() ? \"\" : \", \";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b01dfa0ea1e877f50dbd7bc7ba487c50ade741be"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxOTk2MjM0OnYy", "diffSide": "RIGHT", "path": "src/common-util/src/main/java/ee/ria/xroad/common/util/CertUtils.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxMTo1MjoyOFrOIHBmpA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxMTo1MjoyOFrOIHBmpA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDIzNzIyMA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                String value = unsupportedFields.contains(itemType) ? \"<unsupported>\" : (String) sanItem.get(1);\n          \n          \n            \n                                builder.append(String.format(\"%s%s:%s\", prefix, fieldNames.get(itemType), value));\n          \n          \n            \n                                builder.append(fieldNames.get(itemType));\n          \n          \n            \n                                builder.append(':');\n          \n          \n            \n                                builder.append(unsupportedFields.contains(itemType) ? \"<unsupported>\" : (String) sanItem.get(1));", "url": "https://github.com/nordic-institute/X-Road/pull/809#discussion_r544237220", "createdAt": "2020-12-16T11:52:28Z", "author": {"login": "jhyoty"}, "path": "src/common-util/src/main/java/ee/ria/xroad/common/util/CertUtils.java", "diffHunk": "@@ -136,6 +139,42 @@ private static String getPrincipalCommonName(X500Principal principal) {\n         return cn;\n     }\n \n+    /**\n+     * Reads subject alternative names from certificate and returns its string representation\n+     * @param cert certificate for which to get the subject alternative names\n+     * @return string representation of the subject alternative names\n+     */\n+    public static String getSubjectAlternativeNames(X509Certificate cert) {\n+        List<String> fieldNames = Collections.unmodifiableList(\n+                Arrays.asList(\"othername\", \"email\", \"DNS\", \"x400\", \"DirName\", \"ediPartyName\",\n+                        \"URI\", \"IP Address\", \"Registered ID\"));\n+        final int minIdx = 0;\n+        final int maxIdx = 8;\n+        final int othernameIdx = 0;\n+        final int x400Idx = 3;\n+        final int ediPartyNameIdx = 5;\n+        List<Integer> unsupportedFields = Collections.unmodifiableList(Arrays.asList(othernameIdx, x400Idx,\n+                ediPartyNameIdx));\n+        StringBuilder builder = new StringBuilder();\n+        Collection<List<?>> subjectAlternativeNames;\n+        try {\n+            subjectAlternativeNames = cert.getSubjectAlternativeNames();\n+        } catch (CertificateParsingException e) {\n+            throw new CodedException(ErrorCodes.X_INCORRECT_CERTIFICATE,\n+                    \"Failed parsing the certificate information\");\n+        }\n+        if (subjectAlternativeNames != null) {\n+            for (final List<?> sanItem : subjectAlternativeNames) {\n+                final Integer itemType = (Integer) sanItem.get(0);\n+                if (itemType >= minIdx && itemType <= maxIdx) {\n+                    String prefix = builder.toString().isEmpty() ? \"\" : \", \";\n+                    String value = unsupportedFields.contains(itemType) ? \"<unsupported>\" : (String) sanItem.get(1);\n+                    builder.append(String.format(\"%s%s:%s\", prefix, fieldNames.get(itemType), value));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b01dfa0ea1e877f50dbd7bc7ba487c50ade741be"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxOTk3MTQ1OnYy", "diffSide": "RIGHT", "path": "src/common-util/src/main/java/ee/ria/xroad/common/util/CertUtils.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxMTo1NDo0NFrOIHBrvw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxMTo1NDo0NFrOIHBrvw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDIzODUyNw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    return builder.toString().isEmpty() ? null : builder.toString();\n          \n          \n            \n                    return builder.length() == 0 ? null : builder.toString();", "url": "https://github.com/nordic-institute/X-Road/pull/809#discussion_r544238527", "createdAt": "2020-12-16T11:54:44Z", "author": {"login": "jhyoty"}, "path": "src/common-util/src/main/java/ee/ria/xroad/common/util/CertUtils.java", "diffHunk": "@@ -136,6 +139,42 @@ private static String getPrincipalCommonName(X500Principal principal) {\n         return cn;\n     }\n \n+    /**\n+     * Reads subject alternative names from certificate and returns its string representation\n+     * @param cert certificate for which to get the subject alternative names\n+     * @return string representation of the subject alternative names\n+     */\n+    public static String getSubjectAlternativeNames(X509Certificate cert) {\n+        List<String> fieldNames = Collections.unmodifiableList(\n+                Arrays.asList(\"othername\", \"email\", \"DNS\", \"x400\", \"DirName\", \"ediPartyName\",\n+                        \"URI\", \"IP Address\", \"Registered ID\"));\n+        final int minIdx = 0;\n+        final int maxIdx = 8;\n+        final int othernameIdx = 0;\n+        final int x400Idx = 3;\n+        final int ediPartyNameIdx = 5;\n+        List<Integer> unsupportedFields = Collections.unmodifiableList(Arrays.asList(othernameIdx, x400Idx,\n+                ediPartyNameIdx));\n+        StringBuilder builder = new StringBuilder();\n+        Collection<List<?>> subjectAlternativeNames;\n+        try {\n+            subjectAlternativeNames = cert.getSubjectAlternativeNames();\n+        } catch (CertificateParsingException e) {\n+            throw new CodedException(ErrorCodes.X_INCORRECT_CERTIFICATE,\n+                    \"Failed parsing the certificate information\");\n+        }\n+        if (subjectAlternativeNames != null) {\n+            for (final List<?> sanItem : subjectAlternativeNames) {\n+                final Integer itemType = (Integer) sanItem.get(0);\n+                if (itemType >= minIdx && itemType <= maxIdx) {\n+                    String prefix = builder.toString().isEmpty() ? \"\" : \", \";\n+                    String value = unsupportedFields.contains(itemType) ? \"<unsupported>\" : (String) sanItem.get(1);\n+                    builder.append(String.format(\"%s%s:%s\", prefix, fieldNames.get(itemType), value));\n+                }\n+            }\n+        }\n+        return builder.toString().isEmpty() ? null : builder.toString();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b01dfa0ea1e877f50dbd7bc7ba487c50ade741be"}, "originalPosition": 53}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2665, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}