{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzczMDIzNDU1", "number": 357, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QwOToxODo1MlrODfeFUw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QxMTozMjozNFrODfgyyQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0MzI1MzMxOnYy", "diffSide": "RIGHT", "path": "src/proxy-ui-api/src/main/resources/openapi-definition.yaml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QwOToxODo1MlrOFpMOaA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQwNjo0MTo1NFrOFps5Mg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODczNjIzMg==", "bodyText": "The indentation seems to be 4 spaces instead of 2 in this part. The openapi doc should probably be indented consistently with 2 spaces.\nI have noticed that editing yaml with IntelliJ IDEA makes it really really difficult to indent with 2 spaces so I have used other editors such as Sublime Text 3 or VSCode for that.", "url": "https://github.com/nordic-institute/X-Road/pull/357#discussion_r378736232", "createdAt": "2020-02-13T09:18:52Z", "author": {"login": "carohauta"}, "path": "src/proxy-ui-api/src/main/resources/openapi-definition.yaml", "diffHunk": "@@ -3228,6 +3135,101 @@ paths:\n           description: request specified an invalid format\n         '500':\n           description: internal server error\n+\n+  /timestamping-services:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9d73d31737f257996bdf28d158ae84ad50e04254"}, "originalPosition": 105}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTI3MTQ3NA==", "bodyText": "You're right, the indentation was incorrect. That's fixed now.", "url": "https://github.com/nordic-institute/X-Road/pull/357#discussion_r379271474", "createdAt": "2020-02-14T06:41:54Z", "author": {"login": "petkivim"}, "path": "src/proxy-ui-api/src/main/resources/openapi-definition.yaml", "diffHunk": "@@ -3228,6 +3135,101 @@ paths:\n           description: request specified an invalid format\n         '500':\n           description: internal server error\n+\n+  /timestamping-services:", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODczNjIzMg=="}, "originalCommit": {"oid": "9d73d31737f257996bdf28d158ae84ad50e04254"}, "originalPosition": 105}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0MzY5NzM3OnYy", "diffSide": "RIGHT", "path": "src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/converter/TimestampingServiceConverter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QxMTozMjozNFrOFpQe3w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQwNjo0MzowNlrOFps6TA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODgwNTk4Mw==", "bodyText": "We have tried to avoid calling services from converters to keep them nicely decoupled and the codebase consistent. Maybe change the converter to use GlobalConfFacade and call the required facade methods directly (globalConfFacade.getApprovedTspName(globalConfFacade.getInstanceIdentifier(), url);)", "url": "https://github.com/nordic-institute/X-Road/pull/357#discussion_r378805983", "createdAt": "2020-02-13T11:32:34Z", "author": {"login": "carohauta"}, "path": "src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/converter/TimestampingServiceConverter.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/**\n+ * The MIT License\n+ * Copyright (c) 2018 Estonian Information System Authority (RIA),\n+ * Nordic Institute for Interoperability Solutions (NIIS), Population Register Centre (VRK)\n+ * Copyright (c) 2015-2017 Estonian Information System Authority (RIA), Population Register Centre (VRK)\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package org.niis.xroad.restapi.converter;\n+\n+import com.google.common.collect.Streams;\n+import org.niis.xroad.restapi.openapi.model.TimestampingService;\n+import org.niis.xroad.restapi.service.GlobalConfService;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Component;\n+\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * Converter for timestamping services related data between openapi and service domain classes\n+ */\n+@Component\n+public class TimestampingServiceConverter {\n+\n+    private final GlobalConfService globalConfService;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9d73d31737f257996bdf28d158ae84ad50e04254"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTI3MTc1Ng==", "bodyText": "The implementation was updated based on your suggestion.", "url": "https://github.com/nordic-institute/X-Road/pull/357#discussion_r379271756", "createdAt": "2020-02-14T06:43:06Z", "author": {"login": "petkivim"}, "path": "src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/converter/TimestampingServiceConverter.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/**\n+ * The MIT License\n+ * Copyright (c) 2018 Estonian Information System Authority (RIA),\n+ * Nordic Institute for Interoperability Solutions (NIIS), Population Register Centre (VRK)\n+ * Copyright (c) 2015-2017 Estonian Information System Authority (RIA), Population Register Centre (VRK)\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package org.niis.xroad.restapi.converter;\n+\n+import com.google.common.collect.Streams;\n+import org.niis.xroad.restapi.openapi.model.TimestampingService;\n+import org.niis.xroad.restapi.service.GlobalConfService;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Component;\n+\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * Converter for timestamping services related data between openapi and service domain classes\n+ */\n+@Component\n+public class TimestampingServiceConverter {\n+\n+    private final GlobalConfService globalConfService;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODgwNTk4Mw=="}, "originalCommit": {"oid": "9d73d31737f257996bdf28d158ae84ad50e04254"}, "originalPosition": 42}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2914, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}