{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDEwNTU0MTU2", "number": 481, "title": "Xrddev 850 Csrf improvement", "bodyText": "Adds additional CSRF token validation. Also changes some filter ordering.\nJIRA: https://jira.niis.org/browse/XRDDEV-850", "createdAt": "2020-04-29T08:04:36Z", "url": "https://github.com/nordic-institute/X-Road/pull/481", "merged": true, "mergeCommit": {"oid": "703651a216114c492c445ac02cb238cb9708ad24"}, "closed": true, "closedAt": "2020-05-11T06:26:17Z", "author": {"login": "carohauta"}, "timelineItems": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcaw4Z_AH2gAyNDEwNTU0MTU2OmM4NjAwMDk1MDEzMzJhMjgxMmQ3YjIzODliOTBkZWIwM2RlNzZlMzg=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcgJpUSAFqTQwODg4OTczMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "c860009501332a2812d7b2389b90deb03de76e38", "author": {"user": {"login": "carohauta", "name": "Caro Hautam\u00e4ki"}}, "url": "https://github.com/nordic-institute/X-Road/commit/c860009501332a2812d7b2389b90deb03de76e38", "committedDate": "2020-04-24T12:45:10Z", "message": "XRDDEV-850 Improve CSRF protection\n\n* custom csrf token repo\n* additional web filter\n* includes some filter order changes -> adds correlation id in at least most requests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "473013136ec10db3785b30d44c21282e615d2fca", "author": {"user": {"login": "carohauta", "name": "Caro Hautam\u00e4ki"}}, "url": "https://github.com/nordic-institute/X-Road/commit/473013136ec10db3785b30d44c21282e615d2fca", "committedDate": "2020-04-27T06:53:11Z", "message": "XRDDEV-850 Csrf improvement // reindent"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2760471dc412a930549395c1f930c3e3c2401469", "author": {"user": {"login": "carohauta", "name": "Caro Hautam\u00e4ki"}}, "url": "https://github.com/nordic-institute/X-Road/commit/2760471dc412a930549395c1f930c3e3c2401469", "committedDate": "2020-04-27T11:08:15Z", "message": "Merge branch 'develop' into XRDDEV-850-csrf-improvement"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "770f3f6a85c36cecfe5d7bce9eba0e4bf82d0d9d", "author": {"user": {"login": "carohauta", "name": "Caro Hautam\u00e4ki"}}, "url": "https://github.com/nordic-institute/X-Road/commit/770f3f6a85c36cecfe5d7bce9eba0e4bf82d0d9d", "committedDate": "2020-04-28T13:31:04Z", "message": "XRDDEV-850 Improve CSRF protection\n\n* new custom csrf token repo\n* web filter ordering\n*"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ed06cfbeecc619bc86216e349be5424dfc97107e", "author": {"user": {"login": "carohauta", "name": "Caro Hautam\u00e4ki"}}, "url": "https://github.com/nordic-institute/X-Road/commit/ed06cfbeecc619bc86216e349be5424dfc97107e", "committedDate": "2020-04-29T07:52:23Z", "message": "XRDDEV-850 Fix stale session response status"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA1NTQzMTM4", "url": "https://github.com/nordic-institute/X-Road/pull/481#pullrequestreview-405543138", "createdAt": "2020-05-05T07:17:17Z", "commit": {"oid": "ed06cfbeecc619bc86216e349be5424dfc97107e"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQwNzoxNzoxN1rOGQdJtg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQwNzo0MDowOVrOGQd0CA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTkwODAyMg==", "bodyText": "I don't remember why I implemented the original isSessionCookieAuthenticated as WebUtils.getCookie(request, \"JSESSIONID\") != null; instead. It is a little bit different, and I think you said original one did not work in some situations properly, which seems curious.\nI had some thoughts about renaming the method since it is not 100% about cookies (and session id could be in path params instead) but maybe it is more clear the way it already is.", "url": "https://github.com/nordic-institute/X-Road/pull/481#discussion_r419908022", "createdAt": "2020-05-05T07:17:17Z", "author": {"login": "jansu76"}, "path": "src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/auth/securityconfigurer/ApiWebSecurityConfigurerAdapter.java", "diffHunk": "@@ -92,42 +93,12 @@ protected void configure(HttpSecurity http) throws Exception {\n             .formLogin()\n                 .disable();\n     }\n-    /**\n-     * Checks whether session cookie auth, or some other (api key) auth was used.\n-     * Purely based on existence of JSESSIONID cookie.\n-     */\n-    private static boolean isSessionCookieAuthenticated(HttpServletRequest request) {\n-        return WebUtils.getCookie(request, \"JSESSIONID\") != null;\n-    }\n \n     /**\n-     * CookieCsrfTokenRepository (wrapper) which does not send unneeded CSRF cookies if we're\n-     * using api key auth\n+     * Check if an alive session exists\n      */\n-    private static class ApiKeyAuthAwareCookieCsrfTokenRepository implements CsrfTokenRepository {\n-\n-        // final class, cannot be extended\n-        private CookieCsrfTokenRepository cookieCsrfTokenRepository;\n-\n-        ApiKeyAuthAwareCookieCsrfTokenRepository() {\n-            this.cookieCsrfTokenRepository = CookieCsrfTokenRepository.withHttpOnlyFalse();\n-        }\n-        @Override\n-        public CsrfToken generateToken(HttpServletRequest request) {\n-            return cookieCsrfTokenRepository.generateToken(request);\n-        }\n-\n-        @Override\n-        public void saveToken(CsrfToken token, HttpServletRequest request, HttpServletResponse response) {\n-            if (isSessionCookieAuthenticated(request)) {\n-                cookieCsrfTokenRepository.saveToken(token, request, response);\n-            }\n-        }\n-\n-        @Override\n-        public CsrfToken loadToken(HttpServletRequest request) {\n-            return cookieCsrfTokenRepository.loadToken(request);\n-        }\n+    private static boolean isSessionCookieAuthenticated(HttpServletRequest request) {\n+        return request.getSession(false) != null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ed06cfbeecc619bc86216e349be5424dfc97107e"}, "originalPosition": 85}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTkxMTQ0Mg==", "bodyText": "It would be nice to avoid copying HttpSessionCsrfTokenRepository and CookieCsrfTokenRepository and instead create / inject instances of those, and delegate method calls to them appropriately.\nI am not sure if that can be achived. There was some problem about if (!StringUtils.isEmpty(tokenValue)) { in saveToken in some situation X (null tokenValue or something). Both HttpSessionCsrfTokenRepository.saveToken and  CookieCsrfTokenRepository.saveToken do handle situation X (null tokenValue? or are they not called in situation X?) when used by themselves alone, so maybe it would be possible to implement CookieAndSessionCsrfTokenRepository.saveToken so that it calls (or does not call) both existing tokenRepositories with correct parameters in situation X?\nLeveraging existing Spring classes would be great since there would be less code for us to maintain, and probably less risk of having updates to HttpSessionCsrfTokenRepository and CookieCsrfTokenRepository which could be out of sync with our copied code.", "url": "https://github.com/nordic-institute/X-Road/pull/481#discussion_r419911442", "createdAt": "2020-05-05T07:24:34Z", "author": {"login": "jansu76"}, "path": "src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/auth/securityconfigurer/CookieAndSessionCsrfTokenRepository.java", "diffHunk": "@@ -0,0 +1,153 @@\n+/**\n+ * The MIT License\n+ * Copyright (c) 2018 Estonian Information System Authority (RIA),\n+ * Nordic Institute for Interoperability Solutions (NIIS), Population Register Centre (VRK)\n+ * Copyright (c) 2015-2017 Estonian Information System Authority (RIA), Population Register Centre (VRK)\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package org.niis.xroad.restapi.auth.securityconfigurer;\n+\n+import org.springframework.security.web.csrf.CsrfToken;\n+import org.springframework.security.web.csrf.CsrfTokenRepository;\n+import org.springframework.security.web.csrf.DefaultCsrfToken;\n+import org.springframework.util.ReflectionUtils;\n+import org.springframework.util.StringUtils;\n+\n+import javax.servlet.http.Cookie;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import javax.servlet.http.HttpSession;\n+\n+import java.lang.reflect.Method;\n+import java.util.UUID;\n+\n+/**\n+ * Implements (and copies) functionalities from two csrf repositories:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ed06cfbeecc619bc86216e349be5424dfc97107e"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTkxNjI3Mw==", "bodyText": "We need our custom CsrfValidationFilter since the original CsrfFilter only verifies the one CsrfToken returned from loadToken here. So CsrfFilter only checks the value from session attribute and compares it to value from request header.\nIf we changed loadToken so that it\n\nalso loads value from cookie\ncompares it to value from session attribute\nfails with accessDeniedHandler.handle() if those do not match\n\nThat way CsrfFilter + CookieAndSessionCsrfTokenRepository would be verifying that cookie == header == session attribute.\nThat way we could eliminate the custom CsrfValidationFilter and just use the original CsrFilter?\nIt is maybe a slight deviation of what you could expect from the players (repository stores and loads token, CsrfFilter validates token), but I did not see any hard rules in javadocs that we would be breaking, and it is also kind of logical; if repository stores tokens into two places, and loads only one value, it makes sense that it validates that value 1 == value 2 when loading one of the values.", "url": "https://github.com/nordic-institute/X-Road/pull/481#discussion_r419916273", "createdAt": "2020-05-05T07:34:45Z", "author": {"login": "jansu76"}, "path": "src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/auth/securityconfigurer/CookieAndSessionCsrfTokenRepository.java", "diffHunk": "@@ -0,0 +1,153 @@\n+/**\n+ * The MIT License\n+ * Copyright (c) 2018 Estonian Information System Authority (RIA),\n+ * Nordic Institute for Interoperability Solutions (NIIS), Population Register Centre (VRK)\n+ * Copyright (c) 2015-2017 Estonian Information System Authority (RIA), Population Register Centre (VRK)\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package org.niis.xroad.restapi.auth.securityconfigurer;\n+\n+import org.springframework.security.web.csrf.CsrfToken;\n+import org.springframework.security.web.csrf.CsrfTokenRepository;\n+import org.springframework.security.web.csrf.DefaultCsrfToken;\n+import org.springframework.util.ReflectionUtils;\n+import org.springframework.util.StringUtils;\n+\n+import javax.servlet.http.Cookie;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import javax.servlet.http.HttpSession;\n+\n+import java.lang.reflect.Method;\n+import java.util.UUID;\n+\n+/**\n+ * Implements (and copies) functionalities from two csrf repositories:\n+ * {@link org.springframework.security.web.csrf.HttpSessionCsrfTokenRepository HttpSessionCsrfTokenRepository}\n+ * and {@link org.springframework.security.web.csrf.CookieCsrfTokenRepository CookieCsrfTokenRepository}.\n+ * This way we get the same token in session and csrf cookie\n+ */\n+public class CookieAndSessionCsrfTokenRepository implements CsrfTokenRepository {\n+    public static final String DEFAULT_CSRF_COOKIE_NAME = \"XSRF-TOKEN\";\n+    public static final String DEFAULT_CSRF_HEADER_NAME = \"X-XSRF-TOKEN\";\n+    public static final String DEFAULT_CSRF_PARAMETER_NAME = \"_csrf\";\n+\n+    private static final String DEFAULT_CSRF_TOKEN_ATTR_NAME = CookieAndSessionCsrfTokenRepository.class\n+            .getName().concat(\".CSRF_TOKEN\");\n+\n+    private final Method setHttpOnlyMethod;\n+\n+    private boolean cookieHttpOnly;\n+    private String cookieName = DEFAULT_CSRF_COOKIE_NAME;\n+    private String headerName = DEFAULT_CSRF_HEADER_NAME;\n+    private String parameterName = DEFAULT_CSRF_PARAMETER_NAME;\n+    private String sessionAttributeName = DEFAULT_CSRF_TOKEN_ATTR_NAME;\n+\n+    public CookieAndSessionCsrfTokenRepository() {\n+        this.setHttpOnlyMethod = ReflectionUtils.findMethod(Cookie.class, \"setHttpOnly\", boolean.class);\n+        if (this.setHttpOnlyMethod != null) {\n+            this.cookieHttpOnly = true;\n+        }\n+    }\n+\n+    @Override\n+    public CsrfToken generateToken(HttpServletRequest request) {\n+        return new DefaultCsrfToken(this.headerName, this.parameterName,\n+                createNewToken());\n+    }\n+\n+    /**\n+     * Saves a new token in session and adds that token in to a response cookie\n+     * @param token token to be saved. The value of the token should not be empty or null\n+     * @param request\n+     * @param response\n+     */\n+    @Override\n+    public void saveToken(CsrfToken token, HttpServletRequest request,\n+            HttpServletResponse response) {\n+        String tokenValue = token == null ? \"\" : token.getToken();\n+        if (!StringUtils.isEmpty(tokenValue)) {\n+            Cookie cookie = new Cookie(this.cookieName, tokenValue);\n+            cookie.setSecure(request.isSecure());\n+            cookie.setPath(this.getRequestContext(request));\n+            if (token == null) {\n+                cookie.setMaxAge(0);\n+                HttpSession session = request.getSession(false);\n+                if (session != null) {\n+                    session.removeAttribute(this.sessionAttributeName);\n+                }\n+            } else {\n+                cookie.setMaxAge(-1);\n+                HttpSession session = request.getSession();\n+                session.setAttribute(this.sessionAttributeName, token);\n+            }\n+            if (cookieHttpOnly && setHttpOnlyMethod != null) {\n+                ReflectionUtils.invokeMethod(setHttpOnlyMethod, cookie, Boolean.TRUE);\n+            }\n+            response.addCookie(cookie);\n+        }\n+    }\n+\n+    /**\n+     * The de facto token that gets loaded from the session\n+     */\n+    @Override\n+    public CsrfToken loadToken(HttpServletRequest request) {\n+        HttpSession session = request.getSession(false);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ed06cfbeecc619bc86216e349be5424dfc97107e"}, "originalPosition": 113}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTkxODg1Ng==", "bodyText": "Since this is changing some \"core\" aspects of CSRF handling in Spring, it would be great to have a test that verifies that CSRF handling works as expected (checking positive and negative cases for header / cookie / session match). I'm mainly thinking about protection against updates to Spring CSRF handling that could be somehow incompatible with our custom implementation, and e.g. stop CSRF checks from working, and it might be hard to detect (if it just e.g. silently ignores all CSRF headers or something)", "url": "https://github.com/nordic-institute/X-Road/pull/481#discussion_r419918856", "createdAt": "2020-05-05T07:40:09Z", "author": {"login": "jansu76"}, "path": "src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/auth/securityconfigurer/CookieAndSessionCsrfTokenRepository.java", "diffHunk": "@@ -0,0 +1,153 @@\n+/**\n+ * The MIT License\n+ * Copyright (c) 2018 Estonian Information System Authority (RIA),\n+ * Nordic Institute for Interoperability Solutions (NIIS), Population Register Centre (VRK)\n+ * Copyright (c) 2015-2017 Estonian Information System Authority (RIA), Population Register Centre (VRK)\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package org.niis.xroad.restapi.auth.securityconfigurer;\n+\n+import org.springframework.security.web.csrf.CsrfToken;\n+import org.springframework.security.web.csrf.CsrfTokenRepository;\n+import org.springframework.security.web.csrf.DefaultCsrfToken;\n+import org.springframework.util.ReflectionUtils;\n+import org.springframework.util.StringUtils;\n+\n+import javax.servlet.http.Cookie;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import javax.servlet.http.HttpSession;\n+\n+import java.lang.reflect.Method;\n+import java.util.UUID;\n+\n+/**\n+ * Implements (and copies) functionalities from two csrf repositories:\n+ * {@link org.springframework.security.web.csrf.HttpSessionCsrfTokenRepository HttpSessionCsrfTokenRepository}\n+ * and {@link org.springframework.security.web.csrf.CookieCsrfTokenRepository CookieCsrfTokenRepository}.\n+ * This way we get the same token in session and csrf cookie\n+ */\n+public class CookieAndSessionCsrfTokenRepository implements CsrfTokenRepository {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ed06cfbeecc619bc86216e349be5424dfc97107e"}, "originalPosition": 47}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "284e3000a2e2990fa6a054642c1915f8ade93158", "author": {"user": {"login": "carohauta", "name": "Caro Hautam\u00e4ki"}}, "url": "https://github.com/nordic-institute/X-Road/commit/284e3000a2e2990fa6a054642c1915f8ade93158", "committedDate": "2020-05-05T08:45:42Z", "message": "XRDDEV-850 PR comment fixes 1\n\n* remove additional filter and move logic to repository"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c852c23d0cb127aad90758804a077091754dbb59", "author": {"user": {"login": "carohauta", "name": "Caro Hautam\u00e4ki"}}, "url": "https://github.com/nordic-institute/X-Road/commit/c852c23d0cb127aad90758804a077091754dbb59", "committedDate": "2020-05-05T19:49:27Z", "message": "XRDDEV-850 PR comment fixes 2 // web mvc tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "10069dc1dc0d72d7a03d8734fc6e738528a1ee17", "author": {"user": {"login": "carohauta", "name": "Caro Hautam\u00e4ki"}}, "url": "https://github.com/nordic-institute/X-Road/commit/10069dc1dc0d72d7a03d8734fc6e738528a1ee17", "committedDate": "2020-05-06T05:36:45Z", "message": "Merge branch 'develop' into XRDDEV-850-csrf-improvement"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ef1d05d2e6d688f0726e0058657711948dcfeb72", "author": {"user": {"login": "carohauta", "name": "Caro Hautam\u00e4ki"}}, "url": "https://github.com/nordic-institute/X-Road/commit/ef1d05d2e6d688f0726e0058657711948dcfeb72", "committedDate": "2020-05-06T06:14:56Z", "message": "XRDDEV-850 fix checkstyle"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "41aeaca52bd2a9e51475cd28a56f128075e8fbff", "author": {"user": {"login": "carohauta", "name": "Caro Hautam\u00e4ki"}}, "url": "https://github.com/nordic-institute/X-Road/commit/41aeaca52bd2a9e51475cd28a56f128075e8fbff", "committedDate": "2020-05-06T06:23:00Z", "message": "XRDDEV-850 Test api request without session"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "23365073e9f3b0dfed87decf39206a98a25f0ae0", "author": {"user": {"login": "carohauta", "name": "Caro Hautam\u00e4ki"}}, "url": "https://github.com/nordic-institute/X-Road/commit/23365073e9f3b0dfed87decf39206a98a25f0ae0", "committedDate": "2020-05-06T07:18:37Z", "message": "XRDDEV-850 Sonar fix"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA4ODg2MzU3", "url": "https://github.com/nordic-institute/X-Road/pull/481#pullrequestreview-408886357", "createdAt": "2020-05-11T06:18:12Z", "commit": {"oid": "23365073e9f3b0dfed87decf39206a98a25f0ae0"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQwNjoxODoxMlrOGTN_Ig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQwNjoxODoxMlrOGTN_Ig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjgwNTI4Mg==", "bodyText": "Nice improvements \ud83d\udc4d", "url": "https://github.com/nordic-institute/X-Road/pull/481#discussion_r422805282", "createdAt": "2020-05-11T06:18:12Z", "author": {"login": "jansu76"}, "path": "src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/config/LimitRequestSizesFilter.java", "diffHunk": "@@ -48,12 +47,13 @@\n import java.io.InputStreamReader;\n \n @Configuration\n-@Order(Ordered.HIGHEST_PRECEDENCE + 1)\n+@Order(LimitRequestSizesFilter.LIMIT_REQUEST_SIZES_FILTER_ORDER)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "23365073e9f3b0dfed87decf39206a98a25f0ae0"}, "originalPosition": 13}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA4ODg5MzA4", "url": "https://github.com/nordic-institute/X-Road/pull/481#pullrequestreview-408889308", "createdAt": "2020-05-11T06:24:55Z", "commit": {"oid": "23365073e9f3b0dfed87decf39206a98a25f0ae0"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQwNjoyNDo1NlrOGTOJkQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQwNjoyNDo1NlrOGTOJkQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjgwNzk1Mw==", "bodyText": "Nice to see you found a good way to implement these tests \ud83d\udc4d Might even be a topic worth of a short developer blog, informal \"share the knowledge\" video session, or whatever....", "url": "https://github.com/nordic-institute/X-Road/pull/481#discussion_r422807953", "createdAt": "2020-05-11T06:24:56Z", "author": {"login": "jansu76"}, "path": "src/proxy-ui-api/src/test/java/org/niis/xroad/restapi/auth/CsrfWebMvcTest.java", "diffHunk": "@@ -0,0 +1,181 @@\n+/**\n+ * The MIT License\n+ * Copyright (c) 2018 Estonian Information System Authority (RIA),\n+ * Nordic Institute for Interoperability Solutions (NIIS), Population Register Centre (VRK)\n+ * Copyright (c) 2015-2017 Estonian Information System Authority (RIA), Population Register Centre (VRK)\n+ * <p>\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ * <p>\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ * <p>\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package org.niis.xroad.restapi.auth;\n+\n+import com.google.gson.Gson;\n+import lombok.extern.slf4j.Slf4j;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.niis.xroad.restapi.auth.securityconfigurer.CookieAndSessionCsrfTokenRepository;\n+import org.niis.xroad.restapi.openapi.model.User;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.boot.test.mock.mockito.SpyBean;\n+import org.springframework.mock.web.MockHttpSession;\n+import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;\n+import org.springframework.security.core.Authentication;\n+import org.springframework.security.core.context.SecurityContext;\n+import org.springframework.security.core.context.SecurityContextHolder;\n+import org.springframework.security.web.csrf.CsrfToken;\n+import org.springframework.security.web.csrf.DefaultCsrfToken;\n+import org.springframework.test.context.junit4.SpringRunner;\n+import org.springframework.test.web.servlet.MockMvc;\n+import org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder;\n+import org.springframework.test.web.servlet.request.MockMvcRequestBuilders;\n+\n+import javax.servlet.http.Cookie;\n+\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.Mockito.doReturn;\n+import static org.niis.xroad.restapi.auth.PamAuthenticationProvider.FORM_LOGIN_PAM_AUTHENTICATION;\n+import static org.springframework.test.web.servlet.result.MockMvcResultHandlers.print;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.content;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.cookie;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n+\n+@RunWith(SpringRunner.class)\n+@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.MOCK)\n+@AutoConfigureMockMvc\n+@Slf4j\n+public class CsrfWebMvcTest {\n+    public static final String XSRF_HEADER = \"X-XSRF-TOKEN\";\n+    public static final String XSRF_COOKIE = \"XSRF-TOKEN\";\n+    public static final String CSRF_PARAM = \"_csrf\";\n+\n+    private String username = \"xroad-user\";\n+    private String tokenValue = \"token\";\n+    private CsrfToken csrfToken = new DefaultCsrfToken(XSRF_HEADER, CSRF_PARAM, tokenValue);\n+\n+    @Autowired\n+    private MockMvc mockMvc;\n+\n+    @SpyBean\n+    @Qualifier(FORM_LOGIN_PAM_AUTHENTICATION)\n+    private PamAuthenticationProvider pamAuthenticationProvider;\n+\n+    @SpyBean\n+    private ApiKeyAuthenticationManager apiKeyAuthenticationManager;\n+\n+    @Before\n+    public void setup() {\n+        // setup mock auth in the SecurityContext and mock both auth providers (form login and api-key)\n+        Authentication mockAuth = new UsernamePasswordAuthenticationToken(username, \"pass\");\n+        SecurityContext securityContext = SecurityContextHolder.getContext();\n+        securityContext.setAuthentication(mockAuth);\n+        doReturn(mockAuth).when(pamAuthenticationProvider).authenticate(any());\n+        doReturn(mockAuth).when(apiKeyAuthenticationManager).authenticate(any());\n+    }\n+\n+    /**\n+     * Test login with mocked authentication. Should return 200 with a valid CSRF token in a cookie\n+     * @throws Exception\n+     */\n+    @Test\n+    public void login() throws Exception {\n+        MockHttpServletRequestBuilder mockRequest = MockMvcRequestBuilders.post(\"/login\");\n+        mockMvc.perform(mockRequest)\n+                .andDo(print())\n+                .andExpect(status().isOk())\n+                .andExpect(cookie().exists(XSRF_COOKIE))\n+                .andReturn()\n+                .getResponse();\n+    }\n+\n+    /**\n+     * Test getting user data for the currently logged in user. Uses mocked authentication in a mock session.\n+     * @throws Exception\n+     */\n+    @Test\n+    public void getUser() throws Exception {\n+        User expectedUser = new User().username(username);\n+        String expectedUserJsonString = new Gson().toJson(expectedUser);\n+        MockHttpServletRequestBuilder mockRequest = MockMvcRequestBuilders.get(\"/api/user\")\n+                .session(getMockSession())\n+                .header(XSRF_HEADER, tokenValue)\n+                .cookie(new Cookie(XSRF_COOKIE, tokenValue));\n+        mockMvc.perform(mockRequest)\n+                .andDo(print())\n+                .andExpect(status().isOk())\n+                .andExpect(content().json(expectedUserJsonString));\n+    }\n+\n+    /**\n+     * Test getting user data for the currently logged in user. Uses mocked authentication in a mock session.\n+     * XSRF header value should not match\n+     * @throws Exception\n+     */\n+    @Test\n+    public void getUserCsrfHeaderFail() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "23365073e9f3b0dfed87decf39206a98a25f0ae0"}, "originalPosition": 133}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA4ODg5NzMx", "url": "https://github.com/nordic-institute/X-Road/pull/481#pullrequestreview-408889731", "createdAt": "2020-05-11T06:25:55Z", "commit": {"oid": "23365073e9f3b0dfed87decf39206a98a25f0ae0"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4234, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}