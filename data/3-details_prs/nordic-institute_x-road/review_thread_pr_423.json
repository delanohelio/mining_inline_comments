{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkxMzYyMzUx", "number": 423, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QwNzoxNjowOFrODvbaHA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QwODozMjowMFrODvdJuw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxMDU4NzE2OnYy", "diffSide": "RIGHT", "path": "src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/exceptions/ValidationErrorHelper.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QwNzoxNjowOFrOGB2ANA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQwNzoyMzo0MFrOGFBbpQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDU4NjU0OA==", "bodyText": "These methods could as well be static", "url": "https://github.com/nordic-institute/X-Road/pull/423#discussion_r404586548", "createdAt": "2020-04-07T07:16:08Z", "author": {"login": "carohauta"}, "path": "src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/exceptions/ValidationErrorHelper.java", "diffHunk": "@@ -0,0 +1,63 @@\n+/**\n+ * The MIT License\n+ * Copyright (c) 2018 Estonian Information System Authority (RIA),\n+ * Nordic Institute for Interoperability Solutions (NIIS), Population Register Centre (VRK)\n+ * Copyright (c) 2015-2017 Estonian Information System Authority (RIA), Population Register Centre (VRK)\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package org.niis.xroad.restapi.exceptions;\n+\n+import org.niis.xroad.restapi.openapi.model.CodeWithMetadata;\n+import org.springframework.validation.Errors;\n+import org.springframework.web.bind.MethodArgumentNotValidException;\n+\n+import java.util.Collections;\n+\n+/**\n+ * Helper class for transforming Spring validation errors into error dtos.\n+ * Used from {@link ExceptionTranslator} and {@link SpringInternalExceptionHandler}\n+ */\n+public class ValidationErrorHelper {\n+    public static final String VALIDATION_FAILURE_ERROR = \"validation_failure\";\n+\n+    /**\n+     * Create DeviationAware error code & metadata from given org.springframework.validation.Errors.\n+     * Error code = {@link ValidationErrorHelper#VALIDATION_FAILURE_ERROR}, metadata is the\n+     * String representation of {@link Errors}\n+     */\n+    public CodeWithMetadata createError(Errors validationErrors) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f7d17a2d434a3095597b215c8ef662b18d65683a"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTU5ODc2Mw==", "bodyText": "True. I avoided statics on purpose, since I have this uneasy feeling with static utility classes. I always fear I might end up needing to mock those in tests, or override the util class behavior. Something about static methods always makes my skin crawl. Too many bad experiences.\nI asked https://gofore.slack.com/archives/CCA0KKAVD/p1586356799085900 to help me find the light.\nThat being said, this feels like a good example of utility methods that a) won't change b) won't need to be mocked c) will only ever need one implementation so if we use static utility classes this is a good fit for them. And we do use static utility classes.\nI will either change this to static util class, or if not that then a Spring singleton bean. Now it's kind of in-between.\nI guess I still hold my opinion that static methods / static utility classes have lots of potential for causing troubles and use of them should be minimized.", "url": "https://github.com/nordic-institute/X-Road/pull/423#discussion_r405598763", "createdAt": "2020-04-08T15:10:02Z", "author": {"login": "jansu76"}, "path": "src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/exceptions/ValidationErrorHelper.java", "diffHunk": "@@ -0,0 +1,63 @@\n+/**\n+ * The MIT License\n+ * Copyright (c) 2018 Estonian Information System Authority (RIA),\n+ * Nordic Institute for Interoperability Solutions (NIIS), Population Register Centre (VRK)\n+ * Copyright (c) 2015-2017 Estonian Information System Authority (RIA), Population Register Centre (VRK)\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package org.niis.xroad.restapi.exceptions;\n+\n+import org.niis.xroad.restapi.openapi.model.CodeWithMetadata;\n+import org.springframework.validation.Errors;\n+import org.springframework.web.bind.MethodArgumentNotValidException;\n+\n+import java.util.Collections;\n+\n+/**\n+ * Helper class for transforming Spring validation errors into error dtos.\n+ * Used from {@link ExceptionTranslator} and {@link SpringInternalExceptionHandler}\n+ */\n+public class ValidationErrorHelper {\n+    public static final String VALIDATION_FAILURE_ERROR = \"validation_failure\";\n+\n+    /**\n+     * Create DeviationAware error code & metadata from given org.springframework.validation.Errors.\n+     * Error code = {@link ValidationErrorHelper#VALIDATION_FAILURE_ERROR}, metadata is the\n+     * String representation of {@link Errors}\n+     */\n+    public CodeWithMetadata createError(Errors validationErrors) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDU4NjU0OA=="}, "originalCommit": {"oid": "f7d17a2d434a3095597b215c8ef662b18d65683a"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzkxOTUyNQ==", "bodyText": "Based on feedback from the discussion thread, I am now convinced that \"beans always\" is a valid default strategy and static utility classes should be limited to rare cases where you can be certain that you will never need to mock the methods or use inheritance. It is subjective, sure.\nSo I changed this one to a spring bean since I felt I might want to mock these in some test. There's a bit of boilerplate bloat as a result, which is the price for this choice.", "url": "https://github.com/nordic-institute/X-Road/pull/423#discussion_r407919525", "createdAt": "2020-04-14T07:23:40Z", "author": {"login": "jansu76"}, "path": "src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/exceptions/ValidationErrorHelper.java", "diffHunk": "@@ -0,0 +1,63 @@\n+/**\n+ * The MIT License\n+ * Copyright (c) 2018 Estonian Information System Authority (RIA),\n+ * Nordic Institute for Interoperability Solutions (NIIS), Population Register Centre (VRK)\n+ * Copyright (c) 2015-2017 Estonian Information System Authority (RIA), Population Register Centre (VRK)\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package org.niis.xroad.restapi.exceptions;\n+\n+import org.niis.xroad.restapi.openapi.model.CodeWithMetadata;\n+import org.springframework.validation.Errors;\n+import org.springframework.web.bind.MethodArgumentNotValidException;\n+\n+import java.util.Collections;\n+\n+/**\n+ * Helper class for transforming Spring validation errors into error dtos.\n+ * Used from {@link ExceptionTranslator} and {@link SpringInternalExceptionHandler}\n+ */\n+public class ValidationErrorHelper {\n+    public static final String VALIDATION_FAILURE_ERROR = \"validation_failure\";\n+\n+    /**\n+     * Create DeviationAware error code & metadata from given org.springframework.validation.Errors.\n+     * Error code = {@link ValidationErrorHelper#VALIDATION_FAILURE_ERROR}, metadata is the\n+     * String representation of {@link Errors}\n+     */\n+    public CodeWithMetadata createError(Errors validationErrors) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDU4NjU0OA=="}, "originalCommit": {"oid": "f7d17a2d434a3095597b215c8ef662b18d65683a"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxMDg3MjkxOnYy", "diffSide": "RIGHT", "path": "src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/exceptions/ValidationErrorHelper.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QwODozMjowMFrOGB4yOw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxNToxMzoxMVrOGCz7Fw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDYzMjEyMw==", "bodyText": "I think this was talked in the demo couple of weeks ago but thetoString() is probably too much here. I think that the end user is only interested in the field name and the reason why the value was rejected. So maybe just add those (field and codes) to the metadata in a way that the frontend can parse and map them to the corresponding field easily. Something like this maybe (?):\n{\n    \"status\": 400,\n    \"error\": {\n        \"code\": \"validation_failure\",\n        \"metadata\": [\n            \"client.memberCode: NoColons, NoForwardslashes\", \n            \"client.subsystemCode: NoColons\"\n        ]\n    }\n}\nOr there could be a totally different response object when validation failure happens\n{\n    \"status\": 400,\n    \"error\": {\n        \"code\": \"validation_failure\",\n        \"validation_errors\": {\n            \"client.memberCode\": [ \n               \"NoColons\", \n               \"NoForwardslashes\"\n            ], \n            \"client.subsystemCode\": [\n              \"NoColons\"\n            ]\n        }\n    }\n}\nIDK probably needs some brainstorming between frontend and backend devs \ud83e\udd14", "url": "https://github.com/nordic-institute/X-Road/pull/423#discussion_r404632123", "createdAt": "2020-04-07T08:32:00Z", "author": {"login": "carohauta"}, "path": "src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/exceptions/ValidationErrorHelper.java", "diffHunk": "@@ -0,0 +1,63 @@\n+/**\n+ * The MIT License\n+ * Copyright (c) 2018 Estonian Information System Authority (RIA),\n+ * Nordic Institute for Interoperability Solutions (NIIS), Population Register Centre (VRK)\n+ * Copyright (c) 2015-2017 Estonian Information System Authority (RIA), Population Register Centre (VRK)\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package org.niis.xroad.restapi.exceptions;\n+\n+import org.niis.xroad.restapi.openapi.model.CodeWithMetadata;\n+import org.springframework.validation.Errors;\n+import org.springframework.web.bind.MethodArgumentNotValidException;\n+\n+import java.util.Collections;\n+\n+/**\n+ * Helper class for transforming Spring validation errors into error dtos.\n+ * Used from {@link ExceptionTranslator} and {@link SpringInternalExceptionHandler}\n+ */\n+public class ValidationErrorHelper {\n+    public static final String VALIDATION_FAILURE_ERROR = \"validation_failure\";\n+\n+    /**\n+     * Create DeviationAware error code & metadata from given org.springframework.validation.Errors.\n+     * Error code = {@link ValidationErrorHelper#VALIDATION_FAILURE_ERROR}, metadata is the\n+     * String representation of {@link Errors}\n+     */\n+    public CodeWithMetadata createError(Errors validationErrors) {\n+        CodeWithMetadata result = new CodeWithMetadata();\n+        result.setCode(VALIDATION_FAILURE_ERROR);\n+        result.setMetadata(Collections.singletonList(validationErrors.toString()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f7d17a2d434a3095597b215c8ef662b18d65683a"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTYwMTA0Nw==", "bodyText": "Yes, good suggestions! In this ticket the validation error format is unpolished and proper format will be done in https://jira.niis.org/browse/XRDDEV-1001", "url": "https://github.com/nordic-institute/X-Road/pull/423#discussion_r405601047", "createdAt": "2020-04-08T15:13:11Z", "author": {"login": "jansu76"}, "path": "src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/exceptions/ValidationErrorHelper.java", "diffHunk": "@@ -0,0 +1,63 @@\n+/**\n+ * The MIT License\n+ * Copyright (c) 2018 Estonian Information System Authority (RIA),\n+ * Nordic Institute for Interoperability Solutions (NIIS), Population Register Centre (VRK)\n+ * Copyright (c) 2015-2017 Estonian Information System Authority (RIA), Population Register Centre (VRK)\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package org.niis.xroad.restapi.exceptions;\n+\n+import org.niis.xroad.restapi.openapi.model.CodeWithMetadata;\n+import org.springframework.validation.Errors;\n+import org.springframework.web.bind.MethodArgumentNotValidException;\n+\n+import java.util.Collections;\n+\n+/**\n+ * Helper class for transforming Spring validation errors into error dtos.\n+ * Used from {@link ExceptionTranslator} and {@link SpringInternalExceptionHandler}\n+ */\n+public class ValidationErrorHelper {\n+    public static final String VALIDATION_FAILURE_ERROR = \"validation_failure\";\n+\n+    /**\n+     * Create DeviationAware error code & metadata from given org.springframework.validation.Errors.\n+     * Error code = {@link ValidationErrorHelper#VALIDATION_FAILURE_ERROR}, metadata is the\n+     * String representation of {@link Errors}\n+     */\n+    public CodeWithMetadata createError(Errors validationErrors) {\n+        CodeWithMetadata result = new CodeWithMetadata();\n+        result.setCode(VALIDATION_FAILURE_ERROR);\n+        result.setMetadata(Collections.singletonList(validationErrors.toString()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDYzMjEyMw=="}, "originalCommit": {"oid": "f7d17a2d434a3095597b215c8ef662b18d65683a"}, "originalPosition": 48}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2786, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}