{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU4MjkzMTg1", "number": 625, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QwNTo0NjozMlrOEWFimQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QwNjozMToyNFrOEWGGcw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxNTk0OTA1OnYy", "diffSide": "RIGHT", "path": "src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/service/CertificateAuthorityService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QwNTo0NjozMlrOG9NQkA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxMDo1MDo1MVrOG9VYhw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjgzMzU1Mg==", "bodyText": "The debug output seems unnecessary (or at least should be surrounded with \"log.isDebugEnabled\")", "url": "https://github.com/nordic-institute/X-Road/pull/625#discussion_r466833552", "createdAt": "2020-08-07T05:46:32Z", "author": {"login": "jhyoty"}, "path": "src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/service/CertificateAuthorityService.java", "diffHunk": "@@ -141,36 +141,48 @@ public void evict() {\n      *                               false = only include top CAs\n      * @throws InconsistentCaDataException if required CA data could not be extracted, for example due to OCSP\n      * responses not being valid\n-     * @return\n+     * @return list of approved CAs\n      */\n     @Cacheable(GET_CERTIFICATE_AUTHORITIES_CACHE)\n     public List<ApprovedCaDto> getCertificateAuthorities(KeyUsageInfo keyUsageInfo,\n             boolean includeIntermediateCas) throws InconsistentCaDataException {\n \n         log.info(\"getCertificateAuthorities\");\n         List<X509Certificate> caCerts = new ArrayList<>(globalConfService.getAllCaCertsForThisInstance());\n+        caCerts.forEach(cert -> log.debug(String.format(\"Cert SubjectDN=%s IssuerDN=%s\", cert.getSubjectDN(),\n+                cert.getIssuerDN())));\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f128c13a6419c7088394af53f35bdc0dff5161c9"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njk2NjY2Mw==", "bodyText": "done", "url": "https://github.com/nordic-institute/X-Road/pull/625#discussion_r466966663", "createdAt": "2020-08-07T10:50:51Z", "author": {"login": "iluwatar"}, "path": "src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/service/CertificateAuthorityService.java", "diffHunk": "@@ -141,36 +141,48 @@ public void evict() {\n      *                               false = only include top CAs\n      * @throws InconsistentCaDataException if required CA data could not be extracted, for example due to OCSP\n      * responses not being valid\n-     * @return\n+     * @return list of approved CAs\n      */\n     @Cacheable(GET_CERTIFICATE_AUTHORITIES_CACHE)\n     public List<ApprovedCaDto> getCertificateAuthorities(KeyUsageInfo keyUsageInfo,\n             boolean includeIntermediateCas) throws InconsistentCaDataException {\n \n         log.info(\"getCertificateAuthorities\");\n         List<X509Certificate> caCerts = new ArrayList<>(globalConfService.getAllCaCertsForThisInstance());\n+        caCerts.forEach(cert -> log.debug(String.format(\"Cert SubjectDN=%s IssuerDN=%s\", cert.getSubjectDN(),\n+                cert.getIssuerDN())));\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjgzMzU1Mg=="}, "originalCommit": {"oid": "f128c13a6419c7088394af53f35bdc0dff5161c9"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxNjA0MDgzOnYy", "diffSide": "RIGHT", "path": "src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/service/CertificateAuthorityService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QwNjozMToyNFrOG9OGjg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxMDo1MDo1N1rOG9VYsg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njg0NzM3NA==", "bodyText": "Could be written as a \"for cert : caCerts\" loop, avoids the two get() calls and using the i by mistake.", "url": "https://github.com/nordic-institute/X-Road/pull/625#discussion_r466847374", "createdAt": "2020-08-07T06:31:24Z", "author": {"login": "jhyoty"}, "path": "src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/service/CertificateAuthorityService.java", "diffHunk": "@@ -141,36 +141,48 @@ public void evict() {\n      *                               false = only include top CAs\n      * @throws InconsistentCaDataException if required CA data could not be extracted, for example due to OCSP\n      * responses not being valid\n-     * @return\n+     * @return list of approved CAs\n      */\n     @Cacheable(GET_CERTIFICATE_AUTHORITIES_CACHE)\n     public List<ApprovedCaDto> getCertificateAuthorities(KeyUsageInfo keyUsageInfo,\n             boolean includeIntermediateCas) throws InconsistentCaDataException {\n \n         log.info(\"getCertificateAuthorities\");\n         List<X509Certificate> caCerts = new ArrayList<>(globalConfService.getAllCaCertsForThisInstance());\n+        caCerts.forEach(cert -> log.debug(String.format(\"Cert SubjectDN=%s IssuerDN=%s\", cert.getSubjectDN(),\n+                cert.getIssuerDN())));\n+\n         List<ApprovedCaDto> dtos = new ArrayList<>();\n         // map of each subject - issuer DN pair for easy lookups\n         Map<String, String> subjectsToIssuers = caCerts.stream().collect(\n                 Collectors.toMap(\n                         x509 -> x509.getSubjectDN().getName(),\n                         x509 -> x509.getIssuerDN().getName()));\n \n+        // we only fetch ocsp responses for intermediate approved CAs\n+        // configured as approved CA and its issuer cert is also an approved CA\n+        List<X509Certificate> filteredCerts = caCerts.stream()\n+                .filter(cert -> subjectsToIssuers.containsKey(cert.getIssuerDN().getName()))\n+                .collect(Collectors.toList());\n+\n         String[] base64EncodedOcspResponses;\n         try {\n-            String[] certHashes = CertUtils.getCertHashes(new ArrayList<>(caCerts));\n+            String[] certHashes = CertUtils.getCertHashes(new ArrayList<>(filteredCerts));\n             base64EncodedOcspResponses = signerProxyFacade.getOcspResponses(certHashes);\n         } catch (Exception e) {\n             throw new InconsistentCaDataException(\"failed to get read CA OCSP responses\", e);\n         }\n-        if (caCerts.size() != base64EncodedOcspResponses.length) {\n-            throw new InconsistentCaDataException(\"ocsp responses do not match ca certs\");\n+        if (filteredCerts.size() != base64EncodedOcspResponses.length) {\n+            throw new InconsistentCaDataException(\n+                    String.format(\"ocsp responses do not match ca certs %d vs %d\",\n+                            filteredCerts.size(), base64EncodedOcspResponses.length));\n         }\n \n         // build dtos\n         for (int i = 0; i < caCerts.size(); i++) {\n+            int idx = filteredCerts.indexOf(caCerts.get(i));\n             dtos.add(buildCertificateAuthorityDto(caCerts.get(i),\n-                    base64EncodedOcspResponses[i],\n+                    (idx != -1) ? base64EncodedOcspResponses[idx] : null,\n                     subjectsToIssuers));\n         }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f128c13a6419c7088394af53f35bdc0dff5161c9"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njk2NjcwNg==", "bodyText": "done", "url": "https://github.com/nordic-institute/X-Road/pull/625#discussion_r466966706", "createdAt": "2020-08-07T10:50:57Z", "author": {"login": "iluwatar"}, "path": "src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/service/CertificateAuthorityService.java", "diffHunk": "@@ -141,36 +141,48 @@ public void evict() {\n      *                               false = only include top CAs\n      * @throws InconsistentCaDataException if required CA data could not be extracted, for example due to OCSP\n      * responses not being valid\n-     * @return\n+     * @return list of approved CAs\n      */\n     @Cacheable(GET_CERTIFICATE_AUTHORITIES_CACHE)\n     public List<ApprovedCaDto> getCertificateAuthorities(KeyUsageInfo keyUsageInfo,\n             boolean includeIntermediateCas) throws InconsistentCaDataException {\n \n         log.info(\"getCertificateAuthorities\");\n         List<X509Certificate> caCerts = new ArrayList<>(globalConfService.getAllCaCertsForThisInstance());\n+        caCerts.forEach(cert -> log.debug(String.format(\"Cert SubjectDN=%s IssuerDN=%s\", cert.getSubjectDN(),\n+                cert.getIssuerDN())));\n+\n         List<ApprovedCaDto> dtos = new ArrayList<>();\n         // map of each subject - issuer DN pair for easy lookups\n         Map<String, String> subjectsToIssuers = caCerts.stream().collect(\n                 Collectors.toMap(\n                         x509 -> x509.getSubjectDN().getName(),\n                         x509 -> x509.getIssuerDN().getName()));\n \n+        // we only fetch ocsp responses for intermediate approved CAs\n+        // configured as approved CA and its issuer cert is also an approved CA\n+        List<X509Certificate> filteredCerts = caCerts.stream()\n+                .filter(cert -> subjectsToIssuers.containsKey(cert.getIssuerDN().getName()))\n+                .collect(Collectors.toList());\n+\n         String[] base64EncodedOcspResponses;\n         try {\n-            String[] certHashes = CertUtils.getCertHashes(new ArrayList<>(caCerts));\n+            String[] certHashes = CertUtils.getCertHashes(new ArrayList<>(filteredCerts));\n             base64EncodedOcspResponses = signerProxyFacade.getOcspResponses(certHashes);\n         } catch (Exception e) {\n             throw new InconsistentCaDataException(\"failed to get read CA OCSP responses\", e);\n         }\n-        if (caCerts.size() != base64EncodedOcspResponses.length) {\n-            throw new InconsistentCaDataException(\"ocsp responses do not match ca certs\");\n+        if (filteredCerts.size() != base64EncodedOcspResponses.length) {\n+            throw new InconsistentCaDataException(\n+                    String.format(\"ocsp responses do not match ca certs %d vs %d\",\n+                            filteredCerts.size(), base64EncodedOcspResponses.length));\n         }\n \n         // build dtos\n         for (int i = 0; i < caCerts.size(); i++) {\n+            int idx = filteredCerts.indexOf(caCerts.get(i));\n             dtos.add(buildCertificateAuthorityDto(caCerts.get(i),\n-                    base64EncodedOcspResponses[i],\n+                    (idx != -1) ? base64EncodedOcspResponses[idx] : null,\n                     subjectsToIssuers));\n         }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njg0NzM3NA=="}, "originalCommit": {"oid": "f128c13a6419c7088394af53f35bdc0dff5161c9"}, "originalPosition": 52}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2770, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}