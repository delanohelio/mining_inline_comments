{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA0MTQ2NzI2", "number": 464, "title": "XRDDEV-961 & XRDDEV-956", "bodyText": "UI for viewing service clients access rights\nBackend api for fetching service client access rights\nBackend api for fetching a single service client", "createdAt": "2020-04-16T06:33:41Z", "url": "https://github.com/nordic-institute/X-Road/pull/464", "merged": true, "mergeCommit": {"oid": "309e334b0c90aa121c2a89545c42484074195f3f"}, "closed": true, "closedAt": "2020-04-21T09:52:26Z", "author": {"login": "TJaakkola"}, "timelineItems": {"totalCount": 48, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcT5-ZPgH2gAyNDA0MTQ2NzI2OmNhMTBlYTI1YzhlNDdkODI3ZTcwNmUzMjJiM2JkNTQxZTQ0MTJiZDk=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcZwaK4gFqTM5NzE2MDQ5OA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "ca10ea25c8e47d827e706e322b3bd541e4412bd9", "author": {"user": {"login": "TJaakkola", "name": "Tapio Jaakkola"}}, "url": "https://github.com/nordic-institute/X-Road/commit/ca10ea25c8e47d827e706e322b3bd541e4412bd9", "committedDate": "2020-04-03T05:23:23Z", "message": "XRDDEV-961: Add implementation for fetching access rights for subject"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fd7eb8464d6d2ac81d03464d8d600db9adc32f52", "author": {"user": {"login": "TJaakkola", "name": "Tapio Jaakkola"}}, "url": "https://github.com/nordic-institute/X-Road/commit/fd7eb8464d6d2ac81d03464d8d600db9adc32f52", "committedDate": "2020-04-03T05:24:15Z", "message": "XRDDEV-956: Add markup for testing subject access rights"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a1122b641f8429336a8220a65b526e0feb297b76", "author": {"user": {"login": "TJaakkola", "name": "Tapio Jaakkola"}}, "url": "https://github.com/nordic-institute/X-Road/commit/a1122b641f8429336a8220a65b526e0feb297b76", "committedDate": "2020-04-03T08:29:38Z", "message": "Merge branch 'XRDDEV-960_XRDDEV-955' into XRDDEV-961_XRDDEV-956"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c8348b4eb620d7e92ec741b6cc8fd4d109c29feb", "author": {"user": {"login": "TJaakkola", "name": "Tapio Jaakkola"}}, "url": "https://github.com/nordic-institute/X-Road/commit/c8348b4eb620d7e92ec741b6cc8fd4d109c29feb", "committedDate": "2020-04-07T06:21:46Z", "message": "XRDDEV-961: Fix fetching service client access rights"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "24b1856322b08a20fd04d068ed879601e1c57102", "author": {"user": {"login": "TJaakkola", "name": "Tapio Jaakkola"}}, "url": "https://github.com/nordic-institute/X-Road/commit/24b1856322b08a20fd04d068ed879601e1c57102", "committedDate": "2020-04-07T11:11:01Z", "message": "Merge branch 'XRDDEV-960_XRDDEV-955' into XRDDEV-961_XRDDEV-956"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e35599c5ee2637c3dd4981a92b12e9e802b4d6c6", "author": {"user": {"login": "TJaakkola", "name": "Tapio Jaakkola"}}, "url": "https://github.com/nordic-institute/X-Road/commit/e35599c5ee2637c3dd4981a92b12e9e802b4d6c6", "committedDate": "2020-04-08T06:00:54Z", "message": "Merge branch 'XRDDEV-960_XRDDEV-955' into XRDDEV-961_XRDDEV-956"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1892da3ad48fad701964c28c10620e5b9bc0c532", "author": {"user": {"login": "TJaakkola", "name": "Tapio Jaakkola"}}, "url": "https://github.com/nordic-institute/X-Road/commit/1892da3ad48fad701964c28c10620e5b9bc0c532", "committedDate": "2020-04-08T16:30:49Z", "message": "Merge branch 'XRDDEV-960_XRDDEV-955' into XRDDEV-961_XRDDEV-956"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3ae68fc62b6bdc2af0112e1620b0e9375436c36e", "author": {"user": {"login": "jansu76", "name": null}}, "url": "https://github.com/nordic-institute/X-Road/commit/3ae68fc62b6bdc2af0112e1620b0e9375436c36e", "committedDate": "2020-04-09T08:29:09Z", "message": "XRDDEV-961 refactor api, update code to compile and tests pass"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7e43a69f05d38368641da4efb3c5dc675fcd3fd1", "author": {"user": {"login": "TJaakkola", "name": "Tapio Jaakkola"}}, "url": "https://github.com/nordic-institute/X-Road/commit/7e43a69f05d38368641da4efb3c5dc675fcd3fd1", "committedDate": "2020-04-09T09:46:51Z", "message": "XRDDEV-956: initial ui for service client access rights"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a967062bfad7dc63f65dd538ce118334fb86c3c3", "author": {"user": {"login": "jansu76", "name": null}}, "url": "https://github.com/nordic-institute/X-Road/commit/a967062bfad7dc63f65dd538ce118334fb86c3c3", "committedDate": "2020-04-09T10:13:38Z", "message": "XRDDEV-961 refresh types.ts, update ServiceClientConverter and ServiceClientHelper"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d581ab0b2922fd5893feab455c8a10448e3629f0", "author": {"user": {"login": "jansu76", "name": null}}, "url": "https://github.com/nordic-institute/X-Road/commit/d581ab0b2922fd5893feab455c8a10448e3629f0", "committedDate": "2020-04-09T10:44:20Z", "message": "XRDDEV-961 rename AccessRightHolderDto to ServiceClientDto"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f69d1570d631fdd34242df0db42efad11f9c09b9", "author": {"user": {"login": "TJaakkola", "name": "Tapio Jaakkola"}}, "url": "https://github.com/nordic-institute/X-Road/commit/f69d1570d631fdd34242df0db42efad11f9c09b9", "committedDate": "2020-04-09T10:51:13Z", "message": "Fix frontend build"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f230a16572b94985948fc015414c5f7d5591284b", "author": {"user": {"login": "TJaakkola", "name": "Tapio Jaakkola"}}, "url": "https://github.com/nordic-institute/X-Road/commit/f230a16572b94985948fc015414c5f7d5591284b", "committedDate": "2020-04-09T10:51:29Z", "message": "Merge branch 'XRDDEV-961_XRDDEV-956-refactor-service-client-proper' of github.com:nordic-institute/X-Road into XRDDEV-961_XRDDEV-956-refactor-service-client-proper"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e07e1e79e781d82e2037a840d8bc39cedb259127", "author": {"user": {"login": "jansu76", "name": null}}, "url": "https://github.com/nordic-institute/X-Road/commit/e07e1e79e781d82e2037a840d8bc39cedb259127", "committedDate": "2020-04-09T10:51:37Z", "message": "XRDDEV-961 rename AccessRightHolderDto to ServiceClientDto"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b528fc073d5277831623f74523e3b391eb2317dc", "author": {"user": {"login": "jansu76", "name": null}}, "url": "https://github.com/nordic-institute/X-Road/commit/b528fc073d5277831623f74523e3b391eb2317dc", "committedDate": "2020-04-09T10:52:15Z", "message": "Merge branch 'XRDDEV-961_XRDDEV-956-refactor-service-client-proper' of github.com:nordic-institute/X-Road into XRDDEV-961_XRDDEV-956-refactor-service-client-proper"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "703ce8b1dba1161c52b1ed1ea354a2af895d474a", "author": {"user": {"login": "jansu76", "name": null}}, "url": "https://github.com/nordic-institute/X-Road/commit/703ce8b1dba1161c52b1ed1ea354a2af895d474a", "committedDate": "2020-04-09T11:11:22Z", "message": "XRDDEV-961 fix ServicesApiController and ClientsApiControllerIntegrationTest"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f7ce8be759f152c9640a1431093b14f93dcdae39", "author": {"user": {"login": "TJaakkola", "name": "Tapio Jaakkola"}}, "url": "https://github.com/nordic-institute/X-Road/commit/f7ce8be759f152c9640a1431093b14f93dcdae39", "committedDate": "2020-04-09T11:14:15Z", "message": "Renaming UI objects according to api refactoring"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4cc951d73d2739b169466fabd392b324fd1ddd28", "author": {"user": {"login": "TJaakkola", "name": "Tapio Jaakkola"}}, "url": "https://github.com/nordic-institute/X-Road/commit/4cc951d73d2739b169466fabd392b324fd1ddd28", "committedDate": "2020-04-09T11:14:23Z", "message": "Merge branch 'XRDDEV-961_XRDDEV-956-refactor-service-client-proper' of github.com:nordic-institute/X-Road into XRDDEV-961_XRDDEV-956-refactor-service-client-proper"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8d9b46f53f4fe7b4e560d6a41da4666ab74ce082", "author": {"user": {"login": "TJaakkola", "name": "Tapio Jaakkola"}}, "url": "https://github.com/nordic-institute/X-Road/commit/8d9b46f53f4fe7b4e560d6a41da4666ab74ce082", "committedDate": "2020-04-09T11:24:33Z", "message": "XRDDEV-956: Fixes to ui build"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bc01e56dd7e76ba9c42b2a7ae5c64bf43bc2f5ea", "author": {"user": {"login": "jansu76", "name": null}}, "url": "https://github.com/nordic-institute/X-Road/commit/bc01e56dd7e76ba9c42b2a7ae5c64bf43bc2f5ea", "committedDate": "2020-04-09T11:26:47Z", "message": "XRDDEV-961 fix ServicesApiControllerIntegrationTest"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "363338a2c7a0b7a96b2739b5904484090c360465", "author": {"user": {"login": "TJaakkola", "name": "Tapio Jaakkola"}}, "url": "https://github.com/nordic-institute/X-Road/commit/363338a2c7a0b7a96b2739b5904484090c360465", "committedDate": "2020-04-09T15:10:53Z", "message": "Merge branch 'XRDDEV-960_XRDDEV-955' into XRDDEV-961_XRDDEV-956"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0c572524481138f6ed8c54edfe95dccd4bd0cd68", "author": {"user": {"login": "TJaakkola", "name": "Tapio Jaakkola"}}, "url": "https://github.com/nordic-institute/X-Road/commit/0c572524481138f6ed8c54edfe95dccd4bd0cd68", "committedDate": "2020-04-09T16:40:03Z", "message": "Merge branch 'XRDDEV-961_XRDDEV-956' into XRDDEV-961_XRDDEV-956-refactor-service-client-proper"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4d6ff4b5839e0db589a00d7fe224f53bebf30dc6", "author": {"user": {"login": "TJaakkola", "name": "Tapio Jaakkola"}}, "url": "https://github.com/nordic-institute/X-Road/commit/4d6ff4b5839e0db589a00d7fe224f53bebf30dc6", "committedDate": "2020-04-11T10:20:26Z", "message": "Fixes to ServiceParams & AccessRightsDialog after api refactoring"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "621f3bbcd030a1835b89e67423f52c6152322f79", "author": {"user": {"login": "TJaakkola", "name": "Tapio Jaakkola"}}, "url": "https://github.com/nordic-institute/X-Road/commit/621f3bbcd030a1835b89e67423f52c6152322f79", "committedDate": "2020-04-12T07:17:33Z", "message": "Fixes to EndpointsAccessRights after api refactoring"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3755f088a1ace1e9d32ef6459c646c129cbd6637", "author": {"user": {"login": "TJaakkola", "name": "Tapio Jaakkola"}}, "url": "https://github.com/nordic-institute/X-Road/commit/3755f088a1ace1e9d32ef6459c646c129cbd6637", "committedDate": "2020-04-12T07:45:21Z", "message": "Fix typo"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "57acbce63f08820bfe4335966917e570f5a00150", "author": {"user": {"login": "TJaakkola", "name": "Tapio Jaakkola"}}, "url": "https://github.com/nordic-institute/X-Road/commit/57acbce63f08820bfe4335966917e570f5a00150", "committedDate": "2020-04-13T09:14:06Z", "message": "Refactoring: splitting AccessRightService to AccessRightService and ServiceClientService"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b5e41afb774e7b3703f592c705df3b8a3fbe41ca", "author": {"user": {"login": "TJaakkola", "name": "Tapio Jaakkola"}}, "url": "https://github.com/nordic-institute/X-Road/commit/b5e41afb774e7b3703f592c705df3b8a3fbe41ca", "committedDate": "2020-04-13T11:37:10Z", "message": "XRDDEV-961: Add missing annotations to service"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "03268083732dd48388e201cb2028d2d744d2ff8f", "author": {"user": {"login": "TJaakkola", "name": "Tapio Jaakkola"}}, "url": "https://github.com/nordic-institute/X-Road/commit/03268083732dd48388e201cb2028d2d744d2ff8f", "committedDate": "2020-04-14T06:36:15Z", "message": "XRDDEV-956: Initial service client access rights view implementation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8329042348b2f8a66fba299c82b00ff854b83ed3", "author": {"user": {"login": "TJaakkola", "name": "Tapio Jaakkola"}}, "url": "https://github.com/nordic-institute/X-Road/commit/8329042348b2f8a66fba299c82b00ff854b83ed3", "committedDate": "2020-04-14T06:36:56Z", "message": "XRDDEV-961: Clean up"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ecb943fa2c106222c13fc6b12a05ea672974d245", "author": {"user": {"login": "jansu76", "name": null}}, "url": "https://github.com/nordic-institute/X-Road/commit/ecb943fa2c106222c13fc6b12a05ea672974d245", "committedDate": "2020-04-14T09:20:25Z", "message": "XRDDEV-961 fix checkstyle issues"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ab87d793d9518333567a8cc06676e9306b249de4", "author": {"user": {"login": "TJaakkola", "name": "Tapio Jaakkola"}}, "url": "https://github.com/nordic-institute/X-Road/commit/ab87d793d9518333567a8cc06676e9306b249de4", "committedDate": "2020-04-14T15:11:22Z", "message": "XRDDEV-961: Add functionality for getting a single service client"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "52035df8602959f62a3c8ba3071cff133c8937af", "author": {"user": {"login": "TJaakkola", "name": "Tapio Jaakkola"}}, "url": "https://github.com/nordic-institute/X-Road/commit/52035df8602959f62a3c8ba3071cff133c8937af", "committedDate": "2020-04-14T15:11:38Z", "message": "Merge branch 'XRDDEV-961_XRDDEV-956' of github.com:nordic-institute/X-Road into XRDDEV-961_XRDDEV-956"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "43b125942da51dcc32928680f140c4d3d355fe91", "author": {"user": {"login": "TJaakkola", "name": "Tapio Jaakkola"}}, "url": "https://github.com/nordic-institute/X-Road/commit/43b125942da51dcc32928680f140c4d3d355fe91", "committedDate": "2020-04-14T17:12:25Z", "message": "XRDDEV-956: UI implementation for service client access rights"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f6507d8c9482e39af4ffa3a663e0090071559b3e", "author": {"user": {"login": "TJaakkola", "name": "Tapio Jaakkola"}}, "url": "https://github.com/nordic-institute/X-Road/commit/f6507d8c9482e39af4ffa3a663e0090071559b3e", "committedDate": "2020-04-15T05:19:37Z", "message": "XRDDEV-961: Add missing license declarations"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "53fdebf4095155cf1910d237c927f6167aea39d2", "author": {"user": {"login": "jansu76", "name": null}}, "url": "https://github.com/nordic-institute/X-Road/commit/53fdebf4095155cf1910d237c927f6167aea39d2", "committedDate": "2020-04-15T13:15:47Z", "message": "XRDDEV-963 add controller method, service client parameter processing. Tests fail."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "71813774778cb315d16f7d8f0c567a0d5dae4a3b", "author": {"user": {"login": "TJaakkola", "name": "Tapio Jaakkola"}}, "url": "https://github.com/nordic-institute/X-Road/commit/71813774778cb315d16f7d8f0c567a0d5dae4a3b", "committedDate": "2020-04-16T06:30:00Z", "message": "XRDDEV-961: Add tests and api for fetching a single service clients"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bc77187ae2d7c56d5a09701f5cc94b8c3c91d3a9", "author": {"user": {"login": "TJaakkola", "name": "Tapio Jaakkola"}}, "url": "https://github.com/nordic-institute/X-Road/commit/bc77187ae2d7c56d5a09701f5cc94b8c3c91d3a9", "committedDate": "2020-04-16T06:31:18Z", "message": "XRDDEV-956: Add fetching service client to fill missing data to to UI"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk0Mzk3OTIx", "url": "https://github.com/nordic-institute/X-Road/pull/464#pullrequestreview-394397921", "createdAt": "2020-04-16T08:14:52Z", "commit": {"oid": "bc77187ae2d7c56d5a09701f5cc94b8c3c91d3a9"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQwODoxNDo1MlrOGGZwCA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQwODoyMzo0MlrOGGaFig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTM2NjUzNg==", "bodyText": "If the accessRight has an id or other unique thing it would be good to use it with v-bind:key\n[vue/require-v-for-key]\nElements in iteration expect to have 'v-bind:key' directives.", "url": "https://github.com/nordic-institute/X-Road/pull/464#discussion_r409366536", "createdAt": "2020-04-16T08:14:52Z", "author": {"login": "Riippi"}, "path": "src/proxy-ui-api/frontend/src/views/Clients/ServiceClients/ServiceClientAccessRights.vue", "diffHunk": "@@ -0,0 +1,187 @@\n+<template>\n+  <div class=\"xrd-tab-max-width xrd-view-common\">\n+    <subViewTitle :title=\"serviceClientId\" @close=\"close\" />\n+\n+    <v-card flat>\n+      <table class=\"xrd-table service-client-margin\">\n+        <thead>\n+        <tr>\n+          <th>{{$t('serviceClients.name')}}</th>\n+          <th>{{$t('serviceClients.id')}}</th>\n+        </tr>\n+        </thead>\n+        <tr>\n+          <td>{{serviceClient.name}}</td>\n+          <td>{{serviceClient.id}}</td>\n+        </tr>\n+      </table>\n+    </v-card>\n+\n+\n+    <div class=\"group-members-row\">\n+      <div class=\"row-title\">{{$t('serviceClients.accessRights')}}</div>\n+      <div class=\"row-buttons\">\n+        <large-button\n+          @click=\"removeAll()\"\n+          outlined\n+          data-test=\"remove-all-access-rights\"\n+          v-if=\"accessRights.length > 0\"\n+        >{{$t('serviceClients.removeAll')}}\n+        </large-button>\n+        <large-button\n+          @click=\"addService()\"\n+          outlined\n+          data-test=\"add-subjects-dialog\"\n+        >{{$t('serviceClients.addService')}}\n+        </large-button>\n+      </div>\n+    </div>\n+\n+    <table class=\"xrd-table service-client-margin\" v-if=\"accessRights.length > 0\">\n+      <thead>\n+        <tr>\n+          <th>{{$t('serviceClients.serviceCode')}}</th>\n+          <th>{{$t('serviceClients.title')}}</th>\n+          <th>{{$t('serviceClients.accessRightsGiven')}}</th>\n+          <th></th>\n+        </tr>\n+      </thead>\n+      <tbody>\n+        <tr v-for=\"accessRight in accessRights\">", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc77187ae2d7c56d5a09701f5cc94b8c3c91d3a9"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTM2NzQ1MQ==", "bodyText": "same 'v-bind:key'  thing in this loop also", "url": "https://github.com/nordic-institute/X-Road/pull/464#discussion_r409367451", "createdAt": "2020-04-16T08:16:22Z", "author": {"login": "Riippi"}, "path": "src/proxy-ui-api/frontend/src/views/Clients/ServiceClients/ServiceClients.vue", "diffHunk": "@@ -1,33 +1,39 @@\n <template>\n   <div>\n     <div class=\"table-toolbar\">\n-      <v-text-field v-model=\"search\" label=\"Search\" single-line hide-details class=\"search-input\">\n+      <v-text-field v-model=\"search\"\n+                    :label=\"$t('serviceClients.searchPlaceHolder')\"\n+                    single-line\n+                    hide-details\n+                    class=\"search-input\">\n         <v-icon slot=\"append\">mdi-magnify</v-icon>\n       </v-text-field>\n       <v-btn\n         color=\"primary\"\n-        @click=\"addSubject\"\n+        @click=\"addServiceClient\"\n         outlined\n         rounded\n         class=\"ma-0 rounded-button elevation-0\"\n-      >{{$t('serviceClients.addSubject')}}\n+      >{{$t('serviceClients.addServiceClient')}}\n       </v-btn>\n     </div>\n \n-    <v-card flat>\n-      <table class=\"xrd-table service-clients-table\">\n+    <table class=\"xrd-table service-clients-table\">\n+      <thead>\n         <tr>\n-          <th>{{$t('serviceClients.memberNameGroupDesc')}}</th>\n+          <th>{{$t('serviceClients.name')}}</th>\n           <th>{{$t('serviceClients.id')}}</th>\n         </tr>\n-        <template v-if=\"serviceClients.length > 0\">\n-          <tr v-for=\"sc in this.filteredServiceClients()\">\n-            <td>{{sc.subject.member_name_group_description}}</td>\n-            <td>{{sc.subject.id}}</td>\n+      </thead>\n+      <template v-if=\"serviceClients.length > 0\">\n+        <tbody>\n+          <tr v-for=\"sc in this.filteredServiceClients()\" @click=\"showAccessRights(sc.id)\">", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc77187ae2d7c56d5a09701f5cc94b8c3c91d3a9"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTM3MjA0Mg==", "bodyText": "We don't yet have a shared prettier setup, but before that, could these imports be adjusted in the ide to have spaces like { RootState }  ?", "url": "https://github.com/nordic-institute/X-Road/pull/464#discussion_r409372042", "createdAt": "2020-04-16T08:23:42Z", "author": {"login": "Riippi"}, "path": "src/proxy-ui-api/frontend/src/store/modules/services.ts", "diffHunk": "@@ -1,12 +1,12 @@\n import { ActionTree, GetterTree, Module, MutationTree } from 'vuex';\n import { RootState } from '../types';\n-import {Endpoint, Service, ServiceClient, Subject} from '@/types';\n+import {Endpoint, Service, ServiceClient} from '@/types';", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc77187ae2d7c56d5a09701f5cc94b8c3c91d3a9"}, "originalPosition": 4}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6f03eb102a0f6ec366a0ffbc9434f3a34cfc7baf", "author": {"user": {"login": "TJaakkola", "name": "Tapio Jaakkola"}}, "url": "https://github.com/nordic-institute/X-Road/commit/6f03eb102a0f6ec366a0ffbc9434f3a34cfc7baf", "committedDate": "2020-04-16T09:23:18Z", "message": "XRDDEV-961: Refactoring:\n\nExtract blocks of code to method to tackle an issue with cognitive complexity reported by Sonarqube"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9f0c23fe193b1b0b3a53b98064863a779a2e31fe", "author": {"user": {"login": "TJaakkola", "name": "Tapio Jaakkola"}}, "url": "https://github.com/nordic-institute/X-Road/commit/9f0c23fe193b1b0b3a53b98064863a779a2e31fe", "committedDate": "2020-04-16T09:55:47Z", "message": "XRDDEV-956: UI fixes\n\nAdd data-test attributes\nAdd bind keys to v-for clauses"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b568a2c828acd6b1ab1fd4691274d54b255c0e4a", "author": {"user": {"login": "TJaakkola", "name": "Tapio Jaakkola"}}, "url": "https://github.com/nordic-institute/X-Road/commit/b568a2c828acd6b1ab1fd4691274d54b255c0e4a", "committedDate": "2020-04-16T10:03:52Z", "message": "XRDDEV-961: break too long lines"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk0Mzc0MDE5", "url": "https://github.com/nordic-institute/X-Road/pull/464#pullrequestreview-394374019", "createdAt": "2020-04-16T07:41:37Z", "commit": {"oid": "bc77187ae2d7c56d5a09701f5cc94b8c3c91d3a9"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQwNzo0MTozN1rOGGYhDA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxMTo0MzozM1rOGGhV8w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTM0NjMxNg==", "bodyText": "Comment seems to be off", "url": "https://github.com/nordic-institute/X-Road/pull/464#discussion_r409346316", "createdAt": "2020-04-16T07:41:37Z", "author": {"login": "jansu76"}, "path": "src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/converter/ServiceClientIdentifierConverter.java", "diffHunk": "@@ -0,0 +1,101 @@\n+/**\n+ * The MIT License\n+ * Copyright (c) 2018 Estonian Information System Authority (RIA),\n+ * Nordic Institute for Interoperability Solutions (NIIS), Population Register Centre (VRK)\n+ * Copyright (c) 2015-2017 Estonian Information System Authority (RIA), Population Register Centre (VRK)\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+\n+package org.niis.xroad.restapi.converter;\n+\n+import ee.ria.xroad.common.identifier.ClientId;\n+import ee.ria.xroad.common.identifier.GlobalGroupId;\n+\n+import com.google.common.collect.Streams;\n+import org.apache.commons.lang3.StringUtils;\n+import org.niis.xroad.restapi.dto.ServiceClientIdentifierDto;\n+import org.niis.xroad.restapi.openapi.BadRequestException;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Component;\n+\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * converter for ServiceClient and related objects", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc77187ae2d7c56d5a09701f5cc94b8c3c91d3a9"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTM1MDUxMA==", "bodyText": "These should be needless since AccessRight does not contain them. But branch https://github.com/nordic-institute/X-Road/tree/XRDDEV-963-add-service-client-access-rights does remove them.", "url": "https://github.com/nordic-institute/X-Road/pull/464#discussion_r409350510", "createdAt": "2020-04-16T07:48:46Z", "author": {"login": "jansu76"}, "path": "src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/dto/ServiceClientAccessRightDto.java", "diffHunk": "@@ -0,0 +1,45 @@\n+/**\n+ * The MIT License\n+ * Copyright (c) 2018 Estonian Information System Authority (RIA),\n+ * Nordic Institute for Interoperability Solutions (NIIS), Population Register Centre (VRK)\n+ * Copyright (c) 2015-2017 Estonian Information System Authority (RIA), Population Register Centre (VRK)\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package org.niis.xroad.restapi.dto;\n+\n+import lombok.Builder;\n+import lombok.Getter;\n+\n+import java.time.OffsetDateTime;\n+\n+@Builder\n+@Getter\n+/**\n+ * Access rights are given to a specific subject, for services owned by some client.\n+ * ServiceClientAccessRightDto.clientId is id of the service owner\n+ * (not the subject id)\n+ */\n+public class ServiceClientAccessRightDto {\n+    private String id;\n+    private String clientId;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc77187ae2d7c56d5a09701f5cc94b8c3c91d3a9"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTM2Mjg5OQ==", "bodyText": "I think it would be a bit better design to have\npublic List<ServiceClientAccessRightDto> getServiceClientAccessRights(ClientId clientid, XRoadId serviceClientId) \ninstead of\npublic List<ServiceClientAccessRightDto> getServiceClientAccessRights(ClientId clientid,            ServiceClientIdentifierDto serviceClientId)\nServiceClientIdentifierDto -> XRoadId lookup could be handled by a private method in controller implementing the same logic as addServiceClientAccessRights now has\n        XRoadId serviceClientId = dto.getXRoadId();\n        if (dto.isLocalGroup()) {\n            try {\n                serviceClientId = localGroupService.getLocalGroupIdAsXroadId(dto.getLocalGroupId());\n            } catch (LocalGroupNotFoundException e) {\n                throw new ResourceNotFoundException(e);\n            }\n        }\n\n\nThat way service method would be a bit cleaner IMO, getServiceClient and getServiceClientAccessRights and addServiceClientAccessRights would follow same approach, and service methods would have less \"special case exceptions\" for local groups.\nInstead of private method in controller, it could also be a method in ServiceClientService.", "url": "https://github.com/nordic-institute/X-Road/pull/464#discussion_r409362899", "createdAt": "2020-04-16T08:09:03Z", "author": {"login": "jansu76"}, "path": "src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/openapi/ClientsApiController.java", "diffHunk": "@@ -527,10 +544,70 @@ private ClientType getClientType(String encodedId) {\n         List<ServiceClient> serviceClients = null;\n         try {\n             serviceClients = serviceClientConverter.\n-                    convertAccessRightHolderDtos(accessRightService.getAccessRightHoldersByClient(clientId));\n+                    convertServiceClientDtos(serviceClientService.getServiceClientsByClient(clientId));\n         } catch (ClientNotFoundException e) {\n             throw new ResourceNotFoundException(e);\n         }\n         return new ResponseEntity<>(serviceClients, HttpStatus.OK);\n     }\n+\n+    @Override\n+    @PreAuthorize(\"hasAuthority('VIEW_CLIENT_ACL_SUBJECTS')\")\n+    public ResponseEntity<ServiceClient> getServiceClient(String id, String scId) {\n+        ClientId clientIdentifier = clientConverter.convertId(id);\n+        ServiceClientIdentifierDto serviceClientIdentifierDto = serviceClientIdentifierConverter.convertId(scId);\n+        ServiceClient serviceClient = null;\n+        try {\n+            serviceClient = serviceClientConverter.convertServiceClientDto(\n+                    serviceClientService.getServiceClient(clientIdentifier, serviceClientIdentifierDto));\n+        } catch (ClientNotFoundException | ServiceClientNotFoundException e) {\n+            throw new BadRequestException(e);\n+        }\n+\n+        return new ResponseEntity<>(serviceClient, HttpStatus.OK);\n+    }\n+\n+    @Override\n+    @PreAuthorize(\"hasAuthority('VIEW_ACL_SUBJECT_OPEN_SERVICES')\")\n+    public ResponseEntity<List<AccessRight>> getServiceClientAccessRights(String id, String scId) {\n+        ClientId clientIdentifier = clientConverter.convertId(id);\n+        ServiceClientIdentifierDto serviceClientIdentifierDto = serviceClientIdentifierConverter.convertId(scId);\n+        List<AccessRight> accessRights = null;\n+        try {\n+            accessRights = accessRightConverter.convert(\n+                    serviceClientService.getServiceClientAccessRights(clientIdentifier, serviceClientIdentifierDto));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc77187ae2d7c56d5a09701f5cc94b8c3c91d3a9"}, "originalPosition": 175}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTM2MzQ3NA==", "bodyText": "See comment on getServiceClientAccessRights for dto handling", "url": "https://github.com/nordic-institute/X-Road/pull/464#discussion_r409363474", "createdAt": "2020-04-16T08:09:59Z", "author": {"login": "jansu76"}, "path": "src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/openapi/ClientsApiController.java", "diffHunk": "@@ -527,10 +544,70 @@ private ClientType getClientType(String encodedId) {\n         List<ServiceClient> serviceClients = null;\n         try {\n             serviceClients = serviceClientConverter.\n-                    convertAccessRightHolderDtos(accessRightService.getAccessRightHoldersByClient(clientId));\n+                    convertServiceClientDtos(serviceClientService.getServiceClientsByClient(clientId));\n         } catch (ClientNotFoundException e) {\n             throw new ResourceNotFoundException(e);\n         }\n         return new ResponseEntity<>(serviceClients, HttpStatus.OK);\n     }\n+\n+    @Override\n+    @PreAuthorize(\"hasAuthority('VIEW_CLIENT_ACL_SUBJECTS')\")\n+    public ResponseEntity<ServiceClient> getServiceClient(String id, String scId) {\n+        ClientId clientIdentifier = clientConverter.convertId(id);\n+        ServiceClientIdentifierDto serviceClientIdentifierDto = serviceClientIdentifierConverter.convertId(scId);\n+        ServiceClient serviceClient = null;\n+        try {\n+            serviceClient = serviceClientConverter.convertServiceClientDto(\n+                    serviceClientService.getServiceClient(clientIdentifier, serviceClientIdentifierDto));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc77187ae2d7c56d5a09701f5cc94b8c3c91d3a9"}, "originalPosition": 159}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTQ1MDM3OA==", "bodyText": "I think:\nClientNotFoundException should be a ResourceNotFoundException since client id is part of the resource path.\nLocalGroupNotFoundException should also be a ResourceNotFoundException for the same reason (service client id with nonexistend local group id is part of the resource path)\nBesides LocalGroupNotFoundException, also other non-existent service client ids (global groups, subsystems) should throw ResourceNotFoundExceptions to be consistent with local groups. So their existence should be checked. AccessRightService has a private verifyServiceClientIdentifiersExist for this purpose in branch XRDDEV-963-add-service-client-access-rights. A different approach, which is used in serviceClientService.getServiceClient, is probably also fine.\nIf existence is not checked, GET /clients/{id}/service-clients/{sc_id}/access-rights will return empty list for global group sc_id = FI:h\u00f6r\u00f6nl\u00f6r\u00f6 (if that does not exist) which is different from how getServiceClient and addServiceClientAccessRights work (both throw exceptions for sc_id FI:h\u00f6r\u00f6nl\u00f6r\u00f6). Although all of those three methods handle service clients in a different way and in some sense different semantics for \"missing service client\" could also be argued, I guess.", "url": "https://github.com/nordic-institute/X-Road/pull/464#discussion_r409450378", "createdAt": "2020-04-16T10:27:29Z", "author": {"login": "jansu76"}, "path": "src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/openapi/ClientsApiController.java", "diffHunk": "@@ -527,10 +544,70 @@ private ClientType getClientType(String encodedId) {\n         List<ServiceClient> serviceClients = null;\n         try {\n             serviceClients = serviceClientConverter.\n-                    convertAccessRightHolderDtos(accessRightService.getAccessRightHoldersByClient(clientId));\n+                    convertServiceClientDtos(serviceClientService.getServiceClientsByClient(clientId));\n         } catch (ClientNotFoundException e) {\n             throw new ResourceNotFoundException(e);\n         }\n         return new ResponseEntity<>(serviceClients, HttpStatus.OK);\n     }\n+\n+    @Override\n+    @PreAuthorize(\"hasAuthority('VIEW_CLIENT_ACL_SUBJECTS')\")\n+    public ResponseEntity<ServiceClient> getServiceClient(String id, String scId) {\n+        ClientId clientIdentifier = clientConverter.convertId(id);\n+        ServiceClientIdentifierDto serviceClientIdentifierDto = serviceClientIdentifierConverter.convertId(scId);\n+        ServiceClient serviceClient = null;\n+        try {\n+            serviceClient = serviceClientConverter.convertServiceClientDto(\n+                    serviceClientService.getServiceClient(clientIdentifier, serviceClientIdentifierDto));\n+        } catch (ClientNotFoundException | ServiceClientNotFoundException e) {\n+            throw new BadRequestException(e);\n+        }\n+\n+        return new ResponseEntity<>(serviceClient, HttpStatus.OK);\n+    }\n+\n+    @Override\n+    @PreAuthorize(\"hasAuthority('VIEW_ACL_SUBJECT_OPEN_SERVICES')\")\n+    public ResponseEntity<List<AccessRight>> getServiceClientAccessRights(String id, String scId) {\n+        ClientId clientIdentifier = clientConverter.convertId(id);\n+        ServiceClientIdentifierDto serviceClientIdentifierDto = serviceClientIdentifierConverter.convertId(scId);\n+        List<AccessRight> accessRights = null;\n+        try {\n+            accessRights = accessRightConverter.convert(\n+                    serviceClientService.getServiceClientAccessRights(clientIdentifier, serviceClientIdentifierDto));\n+        } catch (ClientNotFoundException | LocalGroupNotFoundException e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc77187ae2d7c56d5a09701f5cc94b8c3c91d3a9"}, "originalPosition": 176}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTQ1MTQ0NA==", "bodyText": "Both ClientNotFoundException and ServiceClientNotFoundException should be a ResourceNotFoundException since ids are parts of the resource path", "url": "https://github.com/nordic-institute/X-Road/pull/464#discussion_r409451444", "createdAt": "2020-04-16T10:29:27Z", "author": {"login": "jansu76"}, "path": "src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/openapi/ClientsApiController.java", "diffHunk": "@@ -527,10 +544,70 @@ private ClientType getClientType(String encodedId) {\n         List<ServiceClient> serviceClients = null;\n         try {\n             serviceClients = serviceClientConverter.\n-                    convertAccessRightHolderDtos(accessRightService.getAccessRightHoldersByClient(clientId));\n+                    convertServiceClientDtos(serviceClientService.getServiceClientsByClient(clientId));\n         } catch (ClientNotFoundException e) {\n             throw new ResourceNotFoundException(e);\n         }\n         return new ResponseEntity<>(serviceClients, HttpStatus.OK);\n     }\n+\n+    @Override\n+    @PreAuthorize(\"hasAuthority('VIEW_CLIENT_ACL_SUBJECTS')\")\n+    public ResponseEntity<ServiceClient> getServiceClient(String id, String scId) {\n+        ClientId clientIdentifier = clientConverter.convertId(id);\n+        ServiceClientIdentifierDto serviceClientIdentifierDto = serviceClientIdentifierConverter.convertId(scId);\n+        ServiceClient serviceClient = null;\n+        try {\n+            serviceClient = serviceClientConverter.convertServiceClientDto(\n+                    serviceClientService.getServiceClient(clientIdentifier, serviceClientIdentifierDto));\n+        } catch (ClientNotFoundException | ServiceClientNotFoundException e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc77187ae2d7c56d5a09701f5cc94b8c3c91d3a9"}, "originalPosition": 160}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTQ2MzE0OQ==", "bodyText": "Would using naming such as \"owner\" instead of generic \"client\" make the method easier to understand? Or \"serviceOwner\"? For method name, or parameter name, or both? Since service clients can also have a \"client\" (service client subject) this can get a bit confusing.", "url": "https://github.com/nordic-institute/X-Road/pull/464#discussion_r409463149", "createdAt": "2020-04-16T10:50:17Z", "author": {"login": "jansu76"}, "path": "src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/service/ServiceClientService.java", "diffHunk": "@@ -0,0 +1,241 @@\n+/**\n+ * The MIT License\n+ * Copyright (c) 2018 Estonian Information System Authority (RIA),\n+ * Nordic Institute for Interoperability Solutions (NIIS), Population Register Centre (VRK)\n+ * Copyright (c) 2015-2017 Estonian Information System Authority (RIA), Population Register Centre (VRK)\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package org.niis.xroad.restapi.service;\n+\n+import ee.ria.xroad.common.conf.serverconf.model.AccessRightType;\n+import ee.ria.xroad.common.conf.serverconf.model.ClientType;\n+import ee.ria.xroad.common.conf.serverconf.model.EndpointType;\n+import ee.ria.xroad.common.conf.serverconf.model.ServiceType;\n+import ee.ria.xroad.common.identifier.ClientId;\n+import ee.ria.xroad.common.identifier.XRoadId;\n+\n+import lombok.extern.slf4j.Slf4j;\n+import org.niis.xroad.restapi.dto.ServiceClientAccessRightDto;\n+import org.niis.xroad.restapi.dto.ServiceClientDto;\n+import org.niis.xroad.restapi.dto.ServiceClientIdentifierDto;\n+import org.niis.xroad.restapi.repository.ClientRepository;\n+import org.niis.xroad.restapi.util.FormatUtils;\n+import org.springframework.security.access.prepost.PreAuthorize;\n+import org.springframework.stereotype.Service;\n+\n+import javax.transaction.Transactional;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+@Slf4j\n+@Service\n+@Transactional\n+@PreAuthorize(\"isAuthenticated()\")\n+public class ServiceClientService {\n+\n+    private final ClientRepository clientRepository;\n+    private final ServiceService serviceService;\n+    private final EndpointService endpointService;\n+    private final AccessRightService accessRightService;\n+    private final LocalGroupService localGroupService;\n+\n+    public ServiceClientService(ClientRepository clientRepository, ServiceService serviceService,\n+            EndpointService endpointService, AccessRightService accessRightService,\n+            LocalGroupService localGroupService) {\n+        this.clientRepository = clientRepository;\n+        this.serviceService = serviceService;\n+        this.endpointService = endpointService;\n+        this.accessRightService = accessRightService;\n+        this.localGroupService = localGroupService;\n+    }\n+\n+    /**\n+     * Get access right holders (serviceClients) by Client (service owner)\n+     *\n+     * The concept of base endpoint is used to find service level access rights in this method.\n+     * Base endpoint is in other words service (code) level endpoint.\n+     * Each service has one base endpoint.\n+     * Base endpoint has method '*' and path '**'.\n+     *\n+     * @param clientId\n+     * @return\n+     * @throws ClientNotFoundException\n+     *\n+     */\n+    public List<ServiceClientDto> getServiceClientsByClient(ClientId clientId)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc77187ae2d7c56d5a09701f5cc94b8c3c91d3a9"}, "originalPosition": 86}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTQ2MzcyMQ==", "bodyText": "comments in ClientsApiController, but these could operate on XRoadIds instead of ServiceClientIdentifierDtos", "url": "https://github.com/nordic-institute/X-Road/pull/464#discussion_r409463721", "createdAt": "2020-04-16T10:51:27Z", "author": {"login": "jansu76"}, "path": "src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/service/ServiceClientService.java", "diffHunk": "@@ -0,0 +1,241 @@\n+/**\n+ * The MIT License\n+ * Copyright (c) 2018 Estonian Information System Authority (RIA),\n+ * Nordic Institute for Interoperability Solutions (NIIS), Population Register Centre (VRK)\n+ * Copyright (c) 2015-2017 Estonian Information System Authority (RIA), Population Register Centre (VRK)\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package org.niis.xroad.restapi.service;\n+\n+import ee.ria.xroad.common.conf.serverconf.model.AccessRightType;\n+import ee.ria.xroad.common.conf.serverconf.model.ClientType;\n+import ee.ria.xroad.common.conf.serverconf.model.EndpointType;\n+import ee.ria.xroad.common.conf.serverconf.model.ServiceType;\n+import ee.ria.xroad.common.identifier.ClientId;\n+import ee.ria.xroad.common.identifier.XRoadId;\n+\n+import lombok.extern.slf4j.Slf4j;\n+import org.niis.xroad.restapi.dto.ServiceClientAccessRightDto;\n+import org.niis.xroad.restapi.dto.ServiceClientDto;\n+import org.niis.xroad.restapi.dto.ServiceClientIdentifierDto;\n+import org.niis.xroad.restapi.repository.ClientRepository;\n+import org.niis.xroad.restapi.util.FormatUtils;\n+import org.springframework.security.access.prepost.PreAuthorize;\n+import org.springframework.stereotype.Service;\n+\n+import javax.transaction.Transactional;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+@Slf4j\n+@Service\n+@Transactional\n+@PreAuthorize(\"isAuthenticated()\")\n+public class ServiceClientService {\n+\n+    private final ClientRepository clientRepository;\n+    private final ServiceService serviceService;\n+    private final EndpointService endpointService;\n+    private final AccessRightService accessRightService;\n+    private final LocalGroupService localGroupService;\n+\n+    public ServiceClientService(ClientRepository clientRepository, ServiceService serviceService,\n+            EndpointService endpointService, AccessRightService accessRightService,\n+            LocalGroupService localGroupService) {\n+        this.clientRepository = clientRepository;\n+        this.serviceService = serviceService;\n+        this.endpointService = endpointService;\n+        this.accessRightService = accessRightService;\n+        this.localGroupService = localGroupService;\n+    }\n+\n+    /**\n+     * Get access right holders (serviceClients) by Client (service owner)\n+     *\n+     * The concept of base endpoint is used to find service level access rights in this method.\n+     * Base endpoint is in other words service (code) level endpoint.\n+     * Each service has one base endpoint.\n+     * Base endpoint has method '*' and path '**'.\n+     *\n+     * @param clientId\n+     * @return\n+     * @throws ClientNotFoundException\n+     *\n+     */\n+    public List<ServiceClientDto> getServiceClientsByClient(ClientId clientId)\n+            throws ClientNotFoundException {\n+        ClientType clientType = clientRepository.getClient(clientId);\n+        if (clientType == null) {\n+            throw new ClientNotFoundException(\"Client \" + clientId.toShortString() + \" not found\");\n+        }\n+\n+        // Filter just acls that are set to base endpoints so they are on service code level\n+        List<AccessRightType> serviceCodeLevelAcls = clientType.getAcl().stream()\n+                .filter(acl -> acl.getEndpoint().isBaseEndpoint())\n+                .collect(Collectors.toList());\n+        List<AccessRightType> distinctAccessRightTypes = distinctAccessRightTypeByXroadId(serviceCodeLevelAcls);\n+        return accessRightService.mapAccessRightsToServiceClients(clientType, distinctAccessRightTypes);\n+    }\n+\n+    // Get unique AccessRightTypes from the given list\n+    private List<AccessRightType> distinctAccessRightTypeByXroadId(List<AccessRightType> acls) {\n+        HashMap<XRoadId, AccessRightType> uniqueServiceClientMap = new HashMap<>();\n+        for (AccessRightType acl : acls) {\n+            if (!uniqueServiceClientMap.containsKey(acl.getSubjectId())) {\n+                uniqueServiceClientMap.put(acl.getSubjectId(), acl);\n+            }\n+        }\n+        return new ArrayList(uniqueServiceClientMap.values());\n+    }\n+\n+    /**\n+     * Get single service client\n+     *\n+     * @param clientId\n+     * @param dto\n+     * @return\n+     * @throws ClientNotFoundException if client with given id is not found\n+     * @throws ServiceClientNotFoundException if service client with given parameters is not found\n+     */\n+    public ServiceClientDto getServiceClient(ClientId clientId, ServiceClientIdentifierDto dto)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc77187ae2d7c56d5a09701f5cc94b8c3c91d3a9"}, "originalPosition": 121}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTQ3MTgzNw==", "bodyText": "private final LocalGroupRepository localGroupRepository is unused", "url": "https://github.com/nordic-institute/X-Road/pull/464#discussion_r409471837", "createdAt": "2020-04-16T11:06:32Z", "author": {"login": "jansu76"}, "path": "src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/service/AccessRightService.java", "diffHunk": "@@ -78,147 +79,23 @@\n     private final ServiceService serviceService;\n     private final IdentifierService identifierService;\n     private final GlobalConfService globalConfService;\n-    private final EndpointRepository endpointRepository;\n     private final EndpointService endpointService;\n+    private final LocalGroupService localGroupService;\n \n     @Autowired\n     public AccessRightService(LocalGroupRepository localGroupRepository, GlobalConfFacade globalConfFacade,\n             ClientRepository clientRepository, ServiceService serviceService, IdentifierService identifierService,\n-            GlobalConfService globalConfService, EndpointRepository endpointRepository,\n-            EndpointService endpointService) {\n+            GlobalConfService globalConfService,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc77187ae2d7c56d5a09701f5cc94b8c3c91d3a9"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTQ3NDA0Mw==", "bodyText": "Sonar claims this is not tested, maybe consider testing?\nhttps://sonarqube.niis.org/component_measures?id=xroad&metric=new_coverage&pullRequest=464&selected=xroad%3Aproxy-ui-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fniis%2Fxroad%2Frestapi%2Fservice%2FServiceClientService.java", "url": "https://github.com/nordic-institute/X-Road/pull/464#discussion_r409474043", "createdAt": "2020-04-16T11:10:49Z", "author": {"login": "jansu76"}, "path": "src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/service/ServiceClientService.java", "diffHunk": "@@ -0,0 +1,241 @@\n+/**\n+ * The MIT License\n+ * Copyright (c) 2018 Estonian Information System Authority (RIA),\n+ * Nordic Institute for Interoperability Solutions (NIIS), Population Register Centre (VRK)\n+ * Copyright (c) 2015-2017 Estonian Information System Authority (RIA), Population Register Centre (VRK)\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package org.niis.xroad.restapi.service;\n+\n+import ee.ria.xroad.common.conf.serverconf.model.AccessRightType;\n+import ee.ria.xroad.common.conf.serverconf.model.ClientType;\n+import ee.ria.xroad.common.conf.serverconf.model.EndpointType;\n+import ee.ria.xroad.common.conf.serverconf.model.ServiceType;\n+import ee.ria.xroad.common.identifier.ClientId;\n+import ee.ria.xroad.common.identifier.XRoadId;\n+\n+import lombok.extern.slf4j.Slf4j;\n+import org.niis.xroad.restapi.dto.ServiceClientAccessRightDto;\n+import org.niis.xroad.restapi.dto.ServiceClientDto;\n+import org.niis.xroad.restapi.dto.ServiceClientIdentifierDto;\n+import org.niis.xroad.restapi.repository.ClientRepository;\n+import org.niis.xroad.restapi.util.FormatUtils;\n+import org.springframework.security.access.prepost.PreAuthorize;\n+import org.springframework.stereotype.Service;\n+\n+import javax.transaction.Transactional;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+@Slf4j\n+@Service\n+@Transactional\n+@PreAuthorize(\"isAuthenticated()\")\n+public class ServiceClientService {\n+\n+    private final ClientRepository clientRepository;\n+    private final ServiceService serviceService;\n+    private final EndpointService endpointService;\n+    private final AccessRightService accessRightService;\n+    private final LocalGroupService localGroupService;\n+\n+    public ServiceClientService(ClientRepository clientRepository, ServiceService serviceService,\n+            EndpointService endpointService, AccessRightService accessRightService,\n+            LocalGroupService localGroupService) {\n+        this.clientRepository = clientRepository;\n+        this.serviceService = serviceService;\n+        this.endpointService = endpointService;\n+        this.accessRightService = accessRightService;\n+        this.localGroupService = localGroupService;\n+    }\n+\n+    /**\n+     * Get access right holders (serviceClients) by Client (service owner)\n+     *\n+     * The concept of base endpoint is used to find service level access rights in this method.\n+     * Base endpoint is in other words service (code) level endpoint.\n+     * Each service has one base endpoint.\n+     * Base endpoint has method '*' and path '**'.\n+     *\n+     * @param clientId\n+     * @return\n+     * @throws ClientNotFoundException\n+     *\n+     */\n+    public List<ServiceClientDto> getServiceClientsByClient(ClientId clientId)\n+            throws ClientNotFoundException {\n+        ClientType clientType = clientRepository.getClient(clientId);\n+        if (clientType == null) {\n+            throw new ClientNotFoundException(\"Client \" + clientId.toShortString() + \" not found\");\n+        }\n+\n+        // Filter just acls that are set to base endpoints so they are on service code level\n+        List<AccessRightType> serviceCodeLevelAcls = clientType.getAcl().stream()\n+                .filter(acl -> acl.getEndpoint().isBaseEndpoint())\n+                .collect(Collectors.toList());\n+        List<AccessRightType> distinctAccessRightTypes = distinctAccessRightTypeByXroadId(serviceCodeLevelAcls);\n+        return accessRightService.mapAccessRightsToServiceClients(clientType, distinctAccessRightTypes);\n+    }\n+\n+    // Get unique AccessRightTypes from the given list\n+    private List<AccessRightType> distinctAccessRightTypeByXroadId(List<AccessRightType> acls) {\n+        HashMap<XRoadId, AccessRightType> uniqueServiceClientMap = new HashMap<>();\n+        for (AccessRightType acl : acls) {\n+            if (!uniqueServiceClientMap.containsKey(acl.getSubjectId())) {\n+                uniqueServiceClientMap.put(acl.getSubjectId(), acl);\n+            }\n+        }\n+        return new ArrayList(uniqueServiceClientMap.values());\n+    }\n+\n+    /**\n+     * Get single service client\n+     *\n+     * @param clientId\n+     * @param dto\n+     * @return\n+     * @throws ClientNotFoundException if client with given id is not found\n+     * @throws ServiceClientNotFoundException if service client with given parameters is not found\n+     */\n+    public ServiceClientDto getServiceClient(ClientId clientId, ServiceClientIdentifierDto dto)\n+            throws ClientNotFoundException, ServiceClientNotFoundException {\n+        List<ServiceClientDto> serviceClientsByClient = getServiceClientsByClient(clientId);\n+        return serviceClientsByClient.stream()\n+            .filter(scDto -> dto.isLocalGroup()\n+                    ? dto.getLocalGroupId().toString().equals(scDto.getLocalGroupId())\n+                    : dto.getXRoadId().equals(scDto.getSubjectId()))\n+            .findFirst()\n+            .orElseThrow(() -> {\n+                String serviceClientIdentifier = dto.isLocalGroup()\n+                        ? \"Localgroup id: \" + dto.getLocalGroupId()\n+                        : \"xRoadId: \" + dto.getXRoadId().toShortString();\n+                return new ServiceClientNotFoundException(\"Service client not found for ClientId: \"\n+                        + clientId.toShortString() + \" and \" + serviceClientIdentifier);\n+            });", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc77187ae2d7c56d5a09701f5cc94b8c3c91d3a9"}, "originalPosition": 135}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTQ3OTc4NQ==", "bodyText": "Now that I read the code, I find it pretty confusing that this dto has localGroupDescription and memberName (which is not used in ServiceClientConverter, though) but no global group description.\nOf course it is not a product of this ticket.", "url": "https://github.com/nordic-institute/X-Road/pull/464#discussion_r409479785", "createdAt": "2020-04-16T11:21:53Z", "author": {"login": "jansu76"}, "path": "src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/dto/ServiceClientDto.java", "diffHunk": "@@ -31,10 +31,10 @@\n import java.time.OffsetDateTime;\n \n /**\n- * DTO for Service and ServiceClient access rights\n+ * DTO for ServiceClient data\n  */\n @Data\n-public class AccessRightHolderDto {\n+public class ServiceClientDto {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc77187ae2d7c56d5a09701f5cc94b8c3c91d3a9"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTQ4NzY2Ng==", "bodyText": "FYI old implementation gives frontend also boolean has_services\n    render_json({\n      :acl_subjects => read_acl_subjects(client),\n      :has_services => has_services\n    })\n\n\nFrontend has some logic that uses that, it disables the wizard, or parts of wizard based on that info. Probably needs to be taken into account when doing the frontend ticket for add service client access rights?", "url": "https://github.com/nordic-institute/X-Road/pull/464#discussion_r409487666", "createdAt": "2020-04-16T11:37:09Z", "author": {"login": "jansu76"}, "path": "src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/openapi/ClientsApiController.java", "diffHunk": "@@ -527,10 +544,70 @@ private ClientType getClientType(String encodedId) {\n         List<ServiceClient> serviceClients = null;\n         try {\n             serviceClients = serviceClientConverter.\n-                    convertAccessRightHolderDtos(accessRightService.getAccessRightHoldersByClient(clientId));\n+                    convertServiceClientDtos(serviceClientService.getServiceClientsByClient(clientId));\n         } catch (ClientNotFoundException e) {\n             throw new ResourceNotFoundException(e);\n         }\n         return new ResponseEntity<>(serviceClients, HttpStatus.OK);\n     }\n+\n+    @Override\n+    @PreAuthorize(\"hasAuthority('VIEW_CLIENT_ACL_SUBJECTS')\")\n+    public ResponseEntity<ServiceClient> getServiceClient(String id, String scId) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc77187ae2d7c56d5a09701f5cc94b8c3c91d3a9"}, "originalPosition": 153}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTQ5MDkzMQ==", "bodyText": "Old implementation sorts by serviceCode, should this one do the same?\n    services.sort! do |x, y|\n      x[:service_code] <=> y[:service_code]\n    end", "url": "https://github.com/nordic-institute/X-Road/pull/464#discussion_r409490931", "createdAt": "2020-04-16T11:43:33Z", "author": {"login": "jansu76"}, "path": "src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/service/ServiceClientService.java", "diffHunk": "@@ -0,0 +1,241 @@\n+/**\n+ * The MIT License\n+ * Copyright (c) 2018 Estonian Information System Authority (RIA),\n+ * Nordic Institute for Interoperability Solutions (NIIS), Population Register Centre (VRK)\n+ * Copyright (c) 2015-2017 Estonian Information System Authority (RIA), Population Register Centre (VRK)\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package org.niis.xroad.restapi.service;\n+\n+import ee.ria.xroad.common.conf.serverconf.model.AccessRightType;\n+import ee.ria.xroad.common.conf.serverconf.model.ClientType;\n+import ee.ria.xroad.common.conf.serverconf.model.EndpointType;\n+import ee.ria.xroad.common.conf.serverconf.model.ServiceType;\n+import ee.ria.xroad.common.identifier.ClientId;\n+import ee.ria.xroad.common.identifier.XRoadId;\n+\n+import lombok.extern.slf4j.Slf4j;\n+import org.niis.xroad.restapi.dto.ServiceClientAccessRightDto;\n+import org.niis.xroad.restapi.dto.ServiceClientDto;\n+import org.niis.xroad.restapi.dto.ServiceClientIdentifierDto;\n+import org.niis.xroad.restapi.repository.ClientRepository;\n+import org.niis.xroad.restapi.util.FormatUtils;\n+import org.springframework.security.access.prepost.PreAuthorize;\n+import org.springframework.stereotype.Service;\n+\n+import javax.transaction.Transactional;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+@Slf4j\n+@Service\n+@Transactional\n+@PreAuthorize(\"isAuthenticated()\")\n+public class ServiceClientService {\n+\n+    private final ClientRepository clientRepository;\n+    private final ServiceService serviceService;\n+    private final EndpointService endpointService;\n+    private final AccessRightService accessRightService;\n+    private final LocalGroupService localGroupService;\n+\n+    public ServiceClientService(ClientRepository clientRepository, ServiceService serviceService,\n+            EndpointService endpointService, AccessRightService accessRightService,\n+            LocalGroupService localGroupService) {\n+        this.clientRepository = clientRepository;\n+        this.serviceService = serviceService;\n+        this.endpointService = endpointService;\n+        this.accessRightService = accessRightService;\n+        this.localGroupService = localGroupService;\n+    }\n+\n+    /**\n+     * Get access right holders (serviceClients) by Client (service owner)\n+     *\n+     * The concept of base endpoint is used to find service level access rights in this method.\n+     * Base endpoint is in other words service (code) level endpoint.\n+     * Each service has one base endpoint.\n+     * Base endpoint has method '*' and path '**'.\n+     *\n+     * @param clientId\n+     * @return\n+     * @throws ClientNotFoundException\n+     *\n+     */\n+    public List<ServiceClientDto> getServiceClientsByClient(ClientId clientId)\n+            throws ClientNotFoundException {\n+        ClientType clientType = clientRepository.getClient(clientId);\n+        if (clientType == null) {\n+            throw new ClientNotFoundException(\"Client \" + clientId.toShortString() + \" not found\");\n+        }\n+\n+        // Filter just acls that are set to base endpoints so they are on service code level\n+        List<AccessRightType> serviceCodeLevelAcls = clientType.getAcl().stream()\n+                .filter(acl -> acl.getEndpoint().isBaseEndpoint())\n+                .collect(Collectors.toList());\n+        List<AccessRightType> distinctAccessRightTypes = distinctAccessRightTypeByXroadId(serviceCodeLevelAcls);\n+        return accessRightService.mapAccessRightsToServiceClients(clientType, distinctAccessRightTypes);\n+    }\n+\n+    // Get unique AccessRightTypes from the given list\n+    private List<AccessRightType> distinctAccessRightTypeByXroadId(List<AccessRightType> acls) {\n+        HashMap<XRoadId, AccessRightType> uniqueServiceClientMap = new HashMap<>();\n+        for (AccessRightType acl : acls) {\n+            if (!uniqueServiceClientMap.containsKey(acl.getSubjectId())) {\n+                uniqueServiceClientMap.put(acl.getSubjectId(), acl);\n+            }\n+        }\n+        return new ArrayList(uniqueServiceClientMap.values());\n+    }\n+\n+    /**\n+     * Get single service client\n+     *\n+     * @param clientId\n+     * @param dto\n+     * @return\n+     * @throws ClientNotFoundException if client with given id is not found\n+     * @throws ServiceClientNotFoundException if service client with given parameters is not found\n+     */\n+    public ServiceClientDto getServiceClient(ClientId clientId, ServiceClientIdentifierDto dto)\n+            throws ClientNotFoundException, ServiceClientNotFoundException {\n+        List<ServiceClientDto> serviceClientsByClient = getServiceClientsByClient(clientId);\n+        return serviceClientsByClient.stream()\n+            .filter(scDto -> dto.isLocalGroup()\n+                    ? dto.getLocalGroupId().toString().equals(scDto.getLocalGroupId())\n+                    : dto.getXRoadId().equals(scDto.getSubjectId()))\n+            .findFirst()\n+            .orElseThrow(() -> {\n+                String serviceClientIdentifier = dto.isLocalGroup()\n+                        ? \"Localgroup id: \" + dto.getLocalGroupId()\n+                        : \"xRoadId: \" + dto.getXRoadId().toShortString();\n+                return new ServiceClientNotFoundException(\"Service client not found for ClientId: \"\n+                        + clientId.toShortString() + \" and \" + serviceClientIdentifier);\n+            });\n+    }\n+\n+    /**\n+     * Get access right holders (serviceClients) by Service\n+     * @param clientId\n+     * @param fullServiceCode\n+     * @return\n+     * @throws ClientNotFoundException if client with given id was not found\n+     * @throws ServiceNotFoundException if service with given fullServicecode was not found\n+     * @throws EndpointNotFoundException if base endpoint for this service is not found from the client\n+     */\n+    public List<ServiceClientDto> getServiceClientsByService(ClientId clientId, String fullServiceCode)\n+            throws ClientNotFoundException, ServiceNotFoundException, EndpointNotFoundException {\n+        ClientType clientType = clientRepository.getClient(clientId);\n+        if (clientType == null) {\n+            throw new ClientNotFoundException(\"Client \" + clientId.toShortString() + \" not found\");\n+        }\n+\n+        ServiceType serviceType = serviceService.getServiceFromClient(clientType, fullServiceCode);\n+        EndpointType endpointType = endpointService.getServiceBaseEndpoint(serviceType);\n+\n+        List<AccessRightType> accessRightsByEndpoint = accessRightService\n+                .getAccessRightsByEndpoint(clientType, endpointType);\n+        return accessRightService.mapAccessRightsToServiceClients(clientType, accessRightsByEndpoint);\n+    }\n+\n+    /**\n+     * Get access right holders (serviceClients) for Endpoint\n+     * @param id\n+     * @return\n+     * @throws EndpointNotFoundException    if no endpoint is found with given id\n+     * @throws ClientNotFoundException      if client attached to endpoint is not found\n+     */\n+    public List<ServiceClientDto> getServiceClientsByEndpoint(Long id)\n+            throws EndpointNotFoundException, ClientNotFoundException {\n+\n+        ClientType clientType = clientRepository.getClientByEndpointId(id);\n+        EndpointType endpointType = endpointService.getEndpoint(id);\n+\n+        List<AccessRightType> accessRightsByEndpoint = accessRightService\n+                .getAccessRightsByEndpoint(clientType, endpointType);\n+        return accessRightService.mapAccessRightsToServiceClients(clientType, accessRightsByEndpoint);\n+    }\n+\n+    /**\n+     * Get service clients access rights to given client\n+     *\n+     * @param clientid\n+     * @param serviceClientId\n+     * @return\n+     * @throws ClientNotFoundException if given client is not found\n+     * @throws LocalGroupNotFoundException if given local group is not found\n+     */\n+    public List<ServiceClientAccessRightDto> getServiceClientAccessRights(ClientId clientid,\n+            ServiceClientIdentifierDto serviceClientId) throws ClientNotFoundException, LocalGroupNotFoundException {\n+        ClientType clientType = clientRepository.getClient(clientid);\n+        if (clientType == null) {\n+            throw new ClientNotFoundException(\"Client not found with id: \" + clientid.toShortString());\n+        }\n+\n+        // Get XRoadId for the given service client\n+        XRoadId scId = serviceClientId.isLocalGroup()\n+                ? localGroupService.getLocalGroupIdAsXroadId(serviceClientId.getLocalGroupId())\n+                : serviceClientId.getXRoadId();\n+\n+        // Filter service clients access rights from the given clients acl-list\n+        return clientType.getAcl().stream()\n+                .filter(acl -> {\n+                    boolean iseq = acl.getSubjectId().equals(scId);\n+                    boolean isBaseEndpoint = acl.getEndpoint().isBaseEndpoint();\n+                    return iseq && isBaseEndpoint;\n+                })\n+                .map(acl -> ServiceClientAccessRightDto.builder()\n+                        .serviceCode(acl.getEndpoint().getServiceCode())\n+                        .rightsGiven(FormatUtils.fromDateToOffsetDateTime(acl.getRightsGiven()))\n+                        .title(getServiceTitle(clientType, acl.getEndpoint().getServiceCode()))\n+                        .build())\n+                .collect(Collectors.toList());\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc77187ae2d7c56d5a09701f5cc94b8c3c91d3a9"}, "originalPosition": 214}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "68cd15de1d8f6a2d0376f7018c9467546fa2f998", "author": {"user": {"login": "TJaakkola", "name": "Tapio Jaakkola"}}, "url": "https://github.com/nordic-institute/X-Road/commit/68cd15de1d8f6a2d0376f7018c9467546fa2f998", "committedDate": "2020-04-16T14:36:32Z", "message": "XRDDEV-961: Changes according to pull request comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk1MTgyNzA3", "url": "https://github.com/nordic-institute/X-Road/pull/464#pullrequestreview-395182707", "createdAt": "2020-04-17T06:07:31Z", "commit": {"oid": "68cd15de1d8f6a2d0376f7018c9467546fa2f998"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QwNjowNzozMVrOGHBCnQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QwNjowNzozMVrOGHBCnQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDAxMDI2OQ==", "bodyText": "Just realized one problem. When listing service client(s) for one client, I think we should not return rights_given_at\n    {\n        \"id\": \"85\",\n        \"name\": \"Aston Martin Red Bull Racing\",\n        \"local_group_code\": \"RBR\",\n        \"service_client_type\": \"LOCALGROUP\",\n        \"rights_given_at\": \"2020-04-15T03:46:21.297Z\"\n    },\n\nReason is that we really do not know when the rights were given. Aston Martin Red Bull Racing is a service client for this client's services, but it can be a service client for service A, B and C. distinctAccessRightTypeByXroadId picks AccessRightType given to A, B or C by random. It is possible that serviceclient.rights_given_at should not be 2020-04-15T03:46:21.297Z but maybe 2019-01-01 instead. And it is also possible that returned timestamp changes randomly from request to another.\nWhen listing service client(s) for a client, rights_given_at should be null since we do not know it. On the other hand when listing service client(s) the other way (like /services/{id}/service-clients) we do know the real rights_given_at.\nAlternative to nulling it would be to scan through all AccessRightTypes and pick the earliest timestamp, that would then be the correct value. But I think that is unnecessary, as we do not use that in the UI.", "url": "https://github.com/nordic-institute/X-Road/pull/464#discussion_r410010269", "createdAt": "2020-04-17T06:07:31Z", "author": {"login": "jansu76"}, "path": "src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/service/ServiceClientService.java", "diffHunk": "@@ -0,0 +1,252 @@\n+/**\n+ * The MIT License\n+ * Copyright (c) 2018 Estonian Information System Authority (RIA),\n+ * Nordic Institute for Interoperability Solutions (NIIS), Population Register Centre (VRK)\n+ * Copyright (c) 2015-2017 Estonian Information System Authority (RIA), Population Register Centre (VRK)\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package org.niis.xroad.restapi.service;\n+\n+import ee.ria.xroad.common.conf.serverconf.model.AccessRightType;\n+import ee.ria.xroad.common.conf.serverconf.model.ClientType;\n+import ee.ria.xroad.common.conf.serverconf.model.EndpointType;\n+import ee.ria.xroad.common.conf.serverconf.model.ServiceType;\n+import ee.ria.xroad.common.identifier.ClientId;\n+import ee.ria.xroad.common.identifier.XRoadId;\n+\n+import lombok.extern.slf4j.Slf4j;\n+import org.niis.xroad.restapi.dto.ServiceClientAccessRightDto;\n+import org.niis.xroad.restapi.dto.ServiceClientDto;\n+import org.niis.xroad.restapi.dto.ServiceClientIdentifierDto;\n+import org.niis.xroad.restapi.openapi.ResourceNotFoundException;\n+import org.niis.xroad.restapi.repository.ClientRepository;\n+import org.niis.xroad.restapi.util.FormatUtils;\n+import org.springframework.security.access.prepost.PreAuthorize;\n+import org.springframework.stereotype.Service;\n+\n+import javax.transaction.Transactional;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+@Slf4j\n+@Service\n+@Transactional\n+@PreAuthorize(\"isAuthenticated()\")\n+public class ServiceClientService {\n+\n+    private final ClientRepository clientRepository;\n+    private final ServiceService serviceService;\n+    private final EndpointService endpointService;\n+    private final AccessRightService accessRightService;\n+    private final LocalGroupService localGroupService;\n+\n+    public ServiceClientService(ClientRepository clientRepository, ServiceService serviceService,\n+            EndpointService endpointService, AccessRightService accessRightService,\n+            LocalGroupService localGroupService) {\n+        this.clientRepository = clientRepository;\n+        this.serviceService = serviceService;\n+        this.endpointService = endpointService;\n+        this.accessRightService = accessRightService;\n+        this.localGroupService = localGroupService;\n+    }\n+\n+    /**\n+     * Get access right holders (serviceClients) by Client (service owner)\n+     *\n+     * The concept of base endpoint is used to find service level access rights in this method.\n+     * Base endpoint is in other words service (code) level endpoint.\n+     * Each service has one base endpoint.\n+     * Base endpoint has method '*' and path '**'.\n+     *\n+     * @param ownerId\n+     * @return\n+     * @throws ClientNotFoundException\n+     *\n+     */\n+    public List<ServiceClientDto> getServiceClientsByClient(ClientId ownerId)\n+            throws ClientNotFoundException {\n+        ClientType owner = clientRepository.getClient(ownerId);\n+        if (owner == null) {\n+            throw new ClientNotFoundException(\"Client \" + ownerId.toShortString() + \" not found\");\n+        }\n+\n+        // Filter just acls that are set to base endpoints so they are on service code level\n+        List<AccessRightType> serviceCodeLevelAcls = owner.getAcl().stream()\n+                .filter(acl -> acl.getEndpoint().isBaseEndpoint())\n+                .collect(Collectors.toList());\n+        List<AccessRightType> distinctAccessRightTypes = distinctAccessRightTypeByXroadId(serviceCodeLevelAcls);\n+        return accessRightService.mapAccessRightsToServiceClients(owner, distinctAccessRightTypes);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "68cd15de1d8f6a2d0376f7018c9467546fa2f998"}, "originalPosition": 99}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7374a0bfd79c10307e0a38928a536e264622659c", "author": {"user": {"login": "TJaakkola", "name": "Tapio Jaakkola"}}, "url": "https://github.com/nordic-institute/X-Road/commit/7374a0bfd79c10307e0a38928a536e264622659c", "committedDate": "2020-04-17T17:52:26Z", "message": "XRDDEV-961: Fixes according to pull request comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d61b232a30ee4d1ea1ad67e28f713d2c23c006a3", "author": {"user": {"login": "TJaakkola", "name": "Tapio Jaakkola"}}, "url": "https://github.com/nordic-institute/X-Road/commit/d61b232a30ee4d1ea1ad67e28f713d2c23c006a3", "committedDate": "2020-04-20T14:33:03Z", "message": "XRDDEV-961: Add verification for service client existence. Also fix bug in setting timestamp for getting service client"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk3MTU3MTUy", "url": "https://github.com/nordic-institute/X-Road/pull/464#pullrequestreview-397157152", "createdAt": "2020-04-21T09:33:54Z", "commit": {"oid": "d61b232a30ee4d1ea1ad67e28f713d2c23c006a3"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk3MTYwNDk4", "url": "https://github.com/nordic-institute/X-Road/pull/464#pullrequestreview-397160498", "createdAt": "2020-04-21T09:38:13Z", "commit": {"oid": "d61b232a30ee4d1ea1ad67e28f713d2c23c006a3"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4207, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}