{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDkxODM1MTA3", "number": 726, "reviewThreads": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQwNzowOTozMVrOFFbnBA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMFQwOToxNToyMlrOFKAaIQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxMjM5NTU2OnYy", "diffSide": "RIGHT", "path": "src/BUILD.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQwNzowOTozMlrOIF8Dxw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxNzo0MToyN1rOIGXvfA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzA5Nzc5OQ==", "bodyText": "Docker-build is probably not \"recommended\" as such, at least it is not one to use for actual iterative development, where it is too slow and native gradle build works better.\nI think we also need some sort of introduction text about the two build modes: a) docker b) native gradle build - what are they used for, short description of differences, can you run the app inside inside an IDE with a/b, etc.\nMaybe needs some kind of restructuring as well, since there isn't really mode a & b. You can (and we typically do) compile with native gradle build, but build packages in Docker. Which requires all tools from both a and b.", "url": "https://github.com/nordic-institute/X-Road/pull/726#discussion_r543097799", "createdAt": "2020-12-15T07:09:32Z", "author": {"login": "jansu76"}, "path": "src/BUILD.md", "diffHunk": "@@ -4,7 +4,10 @@ Running the X-Road software requires Linux (Ubuntu or RHEL). As a development en\n \n **Tools**\n \n-*Required for building*\n+*Required for building in Docker (recommended)*", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9f8bdb31bd3ce6fa995e6e06117fccc5c68e1461"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzU1MTM1Ng==", "bodyText": "I have weaved in some text into the introduction. Actually building in docker is the only option for me because I cannot afford \"taining\" my machine with stuff not related to my work. But we know from experience that longer a README gets the less people will read it :)", "url": "https://github.com/nordic-institute/X-Road/pull/726#discussion_r543551356", "createdAt": "2020-12-15T17:41:27Z", "author": {"login": "mbert"}, "path": "src/BUILD.md", "diffHunk": "@@ -4,7 +4,10 @@ Running the X-Road software requires Linux (Ubuntu or RHEL). As a development en\n \n **Tools**\n \n-*Required for building*\n+*Required for building in Docker (recommended)*", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzA5Nzc5OQ=="}, "originalCommit": {"oid": "9f8bdb31bd3ce6fa995e6e06117fccc5c68e1461"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxMjQwNDkzOnYy", "diffSide": "RIGHT", "path": "src/BUILD.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQwNzoxMjoxN1rOIF8I0w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxNzo0MTozM1rOIGXvyQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzA5OTA5MQ==", "bodyText": "Probably\n\nDocker (for compilation and deb/rpm packaging)\n\nto be exact", "url": "https://github.com/nordic-institute/X-Road/pull/726#discussion_r543099091", "createdAt": "2020-12-15T07:12:17Z", "author": {"login": "jansu76"}, "path": "src/BUILD.md", "diffHunk": "@@ -4,7 +4,10 @@ Running the X-Road software requires Linux (Ubuntu or RHEL). As a development en\n \n **Tools**\n \n-*Required for building*\n+*Required for building in Docker (recommended)*\n+* Docker (for deb/rpm packaging)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9f8bdb31bd3ce6fa995e6e06117fccc5c68e1461"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzU1MTQzMw==", "bodyText": "I've made it \"Required for deb/rpm packaging and/or building in Docker\".", "url": "https://github.com/nordic-institute/X-Road/pull/726#discussion_r543551433", "createdAt": "2020-12-15T17:41:33Z", "author": {"login": "mbert"}, "path": "src/BUILD.md", "diffHunk": "@@ -4,7 +4,10 @@ Running the X-Road software requires Linux (Ubuntu or RHEL). As a development en\n \n **Tools**\n \n-*Required for building*\n+*Required for building in Docker (recommended)*\n+* Docker (for deb/rpm packaging)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzA5OTA5MQ=="}, "originalCommit": {"oid": "9f8bdb31bd3ce6fa995e6e06117fccc5c68e1461"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxMjYzMTExOnYy", "diffSide": "RIGHT", "path": "src/build_packages.sh", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQwODoxMjo1NlrOIF-G5g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxNzo0MTozOFrOIGXwDw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzEzMTM2Ng==", "bodyText": "Is this \"check if image is already built\" logic actually needed?\nThe regular docker image builds (such as ones used for packaging, https://github.com/nordic-institute/X-Road/blob/develop/src/build_packages.sh#L10-L13) already skip building if there are no changes and use build cache https://docs.docker.com/develop/develop-images/dockerfile_best-practices/#leverage-build-cache instead.\nUsing the regular build also has the advantage that it notices if image does need to be rebuild (e.g. changes to Dockerfile), which this does not.", "url": "https://github.com/nordic-institute/X-Road/pull/726#discussion_r543131366", "createdAt": "2020-12-15T08:12:56Z", "author": {"login": "jansu76"}, "path": "src/build_packages.sh", "diffHunk": "@@ -2,27 +2,58 @@\n set -e\n export XROAD=$(cd \"$(dirname \"$0\")\"; pwd)\n \n-if [[ ! \" $* \" =~ \" --packageonly \" ]]; then\n-  ./compile_code.sh \"$@\"\n-fi\n+HAS_DOCKER=\"\"\n+\n+errorExit() {\n+\techo \"*** $*\" 1>&2\n+\texit 1\n+}\n+\n+buildInDocker() {\n+    test -n \"$HAS_DOCKER\" || errorExit \"Error, docker is not installed/running.\"\n+    echo \"Building in docker...\"\n+    BUILD_IMAGE=\"`docker images | grep xroad-build | awk '{ print $1 }'`\"\n+    if [ \"$BUILD_IMAGE\" != \"xroad-build\" ]; then\n+        echo \"Build image 'xroad-build' not found, building it.\"\n+        docker build -q -t xroad-build --build-arg uid=$(id -u) --build-arg gid=$(id -g) $XROAD/packages/docker-compile || errorExit \"Error building build image.\"\n+    fi", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9f8bdb31bd3ce6fa995e6e06117fccc5c68e1461"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzU1MTUwMw==", "bodyText": "That's fine for me.", "url": "https://github.com/nordic-institute/X-Road/pull/726#discussion_r543551503", "createdAt": "2020-12-15T17:41:38Z", "author": {"login": "mbert"}, "path": "src/build_packages.sh", "diffHunk": "@@ -2,27 +2,58 @@\n set -e\n export XROAD=$(cd \"$(dirname \"$0\")\"; pwd)\n \n-if [[ ! \" $* \" =~ \" --packageonly \" ]]; then\n-  ./compile_code.sh \"$@\"\n-fi\n+HAS_DOCKER=\"\"\n+\n+errorExit() {\n+\techo \"*** $*\" 1>&2\n+\texit 1\n+}\n+\n+buildInDocker() {\n+    test -n \"$HAS_DOCKER\" || errorExit \"Error, docker is not installed/running.\"\n+    echo \"Building in docker...\"\n+    BUILD_IMAGE=\"`docker images | grep xroad-build | awk '{ print $1 }'`\"\n+    if [ \"$BUILD_IMAGE\" != \"xroad-build\" ]; then\n+        echo \"Build image 'xroad-build' not found, building it.\"\n+        docker build -q -t xroad-build --build-arg uid=$(id -u) --build-arg gid=$(id -g) $XROAD/packages/docker-compile || errorExit \"Error building build image.\"\n+    fi", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzEzMTM2Ng=="}, "originalCommit": {"oid": "9f8bdb31bd3ce6fa995e6e06117fccc5c68e1461"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxMjcyMDU5OnYy", "diffSide": "RIGHT", "path": "src/build_packages.sh", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQwODozMzoyOFrOIF-5lw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQxNDoyMTowMVrOIIkqkQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzE0NDM0Mw==", "bodyText": "Maybe I would not use shift to remove the parameter. The scripts build_packages.sh and compile_code.sh seem to support parameter carrying so that you can e.g. call build_packages.sh param1 param2 where param1 param2 are passed on as compile_code.sh parameters.\nshift assumes that build-mode parameter (packageonly, docker-build, p, d, and any other parameter which means \"build locally\") is the first one. If order is different, a wrong parameter can get removed. Old script also meant calling build_packages.sh param1 resulted in execution of compile_code.sh param1, but now it executes compile_code.sh which could be a breaking change for some. And also code compile_code.sh does not care about parameter order, maybe this script could use consistent approach.\nI would probably make build-style parameter not required to be the first one, and just pass all parameters to compile_code without shifting. Either that, or document the behavior.", "url": "https://github.com/nordic-institute/X-Road/pull/726#discussion_r543144343", "createdAt": "2020-12-15T08:33:28Z", "author": {"login": "jansu76"}, "path": "src/build_packages.sh", "diffHunk": "@@ -2,27 +2,58 @@\n set -e\n export XROAD=$(cd \"$(dirname \"$0\")\"; pwd)\n \n-if [[ ! \" $* \" =~ \" --packageonly \" ]]; then\n-  ./compile_code.sh \"$@\"\n-fi\n+HAS_DOCKER=\"\"\n+\n+errorExit() {\n+\techo \"*** $*\" 1>&2\n+\texit 1\n+}\n+\n+buildInDocker() {\n+    test -n \"$HAS_DOCKER\" || errorExit \"Error, docker is not installed/running.\"\n+    echo \"Building in docker...\"\n+    BUILD_IMAGE=\"`docker images | grep xroad-build | awk '{ print $1 }'`\"\n+    if [ \"$BUILD_IMAGE\" != \"xroad-build\" ]; then\n+        echo \"Build image 'xroad-build' not found, building it.\"\n+        docker build -q -t xroad-build --build-arg uid=$(id -u) --build-arg gid=$(id -g) $XROAD/packages/docker-compile || errorExit \"Error building build image.\"\n+    fi\n+    docker run --rm -v $XROAD/..:/workspace -w /workspace/src -u builder xroad-build  bash -c \"./update_ruby_dependencies.sh && ./compile_code.sh -nodaemon\" || errorExit \"Error running build of binaries.\"\n+}\n+\n+buildLocally() {\n+    echo \"Building locally...\"\n+    cd $XROAD || errorExit \"Error 'cd $XROAD'.\"\n+    ./compile_code.sh \"$@\" || errorExit \"Error running build of binaries.\"\n+}\n \n if command -v docker &>/dev/null; then\n-    docker build -q -t xroad-deb-bionic \"$XROAD/packages/docker/deb-bionic\"\n-    docker build -q -t xroad-deb-focal \"$XROAD/packages/docker/deb-focal\"\n-    docker build -q -t xroad-rpm \"$XROAD/packages/docker/rpm\"\n-    docker build -q -t xroad-rpm-el8 \"$XROAD/packages/docker/rpm-el8\"\n+    HAS_DOCKER=true\n+fi\n+\n+case \"$1\" in\n+    --packageonly|-p) shift;;\n+    --docker-build|-d) shift; buildInDocker \"$@\";;\n+    *) shift; buildLocally \"$@\";;\n+esac", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9f8bdb31bd3ce6fa995e6e06117fccc5c68e1461"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzU1MTU4Ng==", "bodyText": "You're right, the last shift should not be there. I have removed it. The first two are necessary, because the --packageonly or --docker-build arguments are solely for build_packages.sh and should not be passed to any other scripts.", "url": "https://github.com/nordic-institute/X-Road/pull/726#discussion_r543551586", "createdAt": "2020-12-15T17:41:44Z", "author": {"login": "mbert"}, "path": "src/build_packages.sh", "diffHunk": "@@ -2,27 +2,58 @@\n set -e\n export XROAD=$(cd \"$(dirname \"$0\")\"; pwd)\n \n-if [[ ! \" $* \" =~ \" --packageonly \" ]]; then\n-  ./compile_code.sh \"$@\"\n-fi\n+HAS_DOCKER=\"\"\n+\n+errorExit() {\n+\techo \"*** $*\" 1>&2\n+\texit 1\n+}\n+\n+buildInDocker() {\n+    test -n \"$HAS_DOCKER\" || errorExit \"Error, docker is not installed/running.\"\n+    echo \"Building in docker...\"\n+    BUILD_IMAGE=\"`docker images | grep xroad-build | awk '{ print $1 }'`\"\n+    if [ \"$BUILD_IMAGE\" != \"xroad-build\" ]; then\n+        echo \"Build image 'xroad-build' not found, building it.\"\n+        docker build -q -t xroad-build --build-arg uid=$(id -u) --build-arg gid=$(id -g) $XROAD/packages/docker-compile || errorExit \"Error building build image.\"\n+    fi\n+    docker run --rm -v $XROAD/..:/workspace -w /workspace/src -u builder xroad-build  bash -c \"./update_ruby_dependencies.sh && ./compile_code.sh -nodaemon\" || errorExit \"Error running build of binaries.\"\n+}\n+\n+buildLocally() {\n+    echo \"Building locally...\"\n+    cd $XROAD || errorExit \"Error 'cd $XROAD'.\"\n+    ./compile_code.sh \"$@\" || errorExit \"Error running build of binaries.\"\n+}\n \n if command -v docker &>/dev/null; then\n-    docker build -q -t xroad-deb-bionic \"$XROAD/packages/docker/deb-bionic\"\n-    docker build -q -t xroad-deb-focal \"$XROAD/packages/docker/deb-focal\"\n-    docker build -q -t xroad-rpm \"$XROAD/packages/docker/rpm\"\n-    docker build -q -t xroad-rpm-el8 \"$XROAD/packages/docker/rpm-el8\"\n+    HAS_DOCKER=true\n+fi\n+\n+case \"$1\" in\n+    --packageonly|-p) shift;;\n+    --docker-build|-d) shift; buildInDocker \"$@\";;\n+    *) shift; buildLocally \"$@\";;\n+esac", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzE0NDM0Mw=="}, "originalCommit": {"oid": "9f8bdb31bd3ce6fa995e6e06117fccc5c68e1461"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTg2MDI0MQ==", "bodyText": "I made some suggestions that would make build-mode parameter order more flexible and make the parameter handling implementation more consistent with how compile_code.sh does it:\n\n#726 (comment)\n#726 (comment)", "url": "https://github.com/nordic-institute/X-Road/pull/726#discussion_r545860241", "createdAt": "2020-12-18T14:21:01Z", "author": {"login": "jansu76"}, "path": "src/build_packages.sh", "diffHunk": "@@ -2,27 +2,58 @@\n set -e\n export XROAD=$(cd \"$(dirname \"$0\")\"; pwd)\n \n-if [[ ! \" $* \" =~ \" --packageonly \" ]]; then\n-  ./compile_code.sh \"$@\"\n-fi\n+HAS_DOCKER=\"\"\n+\n+errorExit() {\n+\techo \"*** $*\" 1>&2\n+\texit 1\n+}\n+\n+buildInDocker() {\n+    test -n \"$HAS_DOCKER\" || errorExit \"Error, docker is not installed/running.\"\n+    echo \"Building in docker...\"\n+    BUILD_IMAGE=\"`docker images | grep xroad-build | awk '{ print $1 }'`\"\n+    if [ \"$BUILD_IMAGE\" != \"xroad-build\" ]; then\n+        echo \"Build image 'xroad-build' not found, building it.\"\n+        docker build -q -t xroad-build --build-arg uid=$(id -u) --build-arg gid=$(id -g) $XROAD/packages/docker-compile || errorExit \"Error building build image.\"\n+    fi\n+    docker run --rm -v $XROAD/..:/workspace -w /workspace/src -u builder xroad-build  bash -c \"./update_ruby_dependencies.sh && ./compile_code.sh -nodaemon\" || errorExit \"Error running build of binaries.\"\n+}\n+\n+buildLocally() {\n+    echo \"Building locally...\"\n+    cd $XROAD || errorExit \"Error 'cd $XROAD'.\"\n+    ./compile_code.sh \"$@\" || errorExit \"Error running build of binaries.\"\n+}\n \n if command -v docker &>/dev/null; then\n-    docker build -q -t xroad-deb-bionic \"$XROAD/packages/docker/deb-bionic\"\n-    docker build -q -t xroad-deb-focal \"$XROAD/packages/docker/deb-focal\"\n-    docker build -q -t xroad-rpm \"$XROAD/packages/docker/rpm\"\n-    docker build -q -t xroad-rpm-el8 \"$XROAD/packages/docker/rpm-el8\"\n+    HAS_DOCKER=true\n+fi\n+\n+case \"$1\" in\n+    --packageonly|-p) shift;;\n+    --docker-build|-d) shift; buildInDocker \"$@\";;\n+    *) shift; buildLocally \"$@\";;\n+esac", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzE0NDM0Mw=="}, "originalCommit": {"oid": "9f8bdb31bd3ce6fa995e6e06117fccc5c68e1461"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzMDkyOTQwOnYy", "diffSide": "RIGHT", "path": "src/build_packages.sh", "isResolved": false, "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQxNDoxMDo1NlrOIIkTKA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQxMzowNTo0MVrOIJXmUg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTg1NDI0OA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            case \"$1\" in\n          \n          \n            \n                --packageonly|-p) shift;;\n          \n          \n            \n                --docker-build|-d) shift; buildInDocker \"$@\";;\n          \n          \n            \n                *) buildLocally \"$@\";;\n          \n          \n            \n            esac\n          \n          \n            \n            for i in \"$@\"; do\n          \n          \n            \n            shift\n          \n          \n            \n            case \"$i\" in\n          \n          \n            \n                \"--package-only\"|\"-p\")\n          \n          \n            \n                    PACKAGE_ONLY=1\n          \n          \n            \n                    continue\n          \n          \n            \n                    ;;\n          \n          \n            \n                \"--docker-compile\"|\"-d\")\n          \n          \n            \n                    DOCKER_COMPILE=1\n          \n          \n            \n                    continue\n          \n          \n            \n                    ;;\n          \n          \n            \n                \"--help\"|\"-h\")\n          \n          \n            \n                     usage\n          \n          \n            \n                    ;;\n          \n          \n            \n                *) set -- \"$@\" \"$i\";;\n          \n          \n            \n            esac\n          \n          \n            \n            done\n          \n          \n            \n            \n          \n          \n            \n            if [[ -n \"$PACKAGE_ONLY\" && -n \"$DOCKER_COMPILE\" ]]; then\n          \n          \n            \n                echo \"Can't use both package-only and docker-compile options at the same time\"\n          \n          \n            \n                usage\n          \n          \n            \n            fi\n          \n          \n            \n            \n          \n          \n            \n            if [[ -n \"$PACKAGE_ONLY\" ]]; then\n          \n          \n            \n                echo \"Skipping compilation...\"\n          \n          \n            \n            elif [[ -n \"$DOCKER_COMPILE\" ]]; then\n          \n          \n            \n                buildInDocker \"$@\"\n          \n          \n            \n            else\n          \n          \n            \n                buildLocally \"$@\"\n          \n          \n            \n            fi\n          \n      \n    \n    \n  \n\nSuggestion: parameter handling in the same fashion as compile_code.sh: https://github.com/nordic-institute/X-Road/blob/develop/src/compile_code.sh#L6-L18\n\ndocker-compile, --package-only, -d, -p can appear in any parameter positions, do not have to be the first ones\nthose parameters are removed, and retained parameters are carried over to e.g. compile_code.sh\nalso minor rewording of parameter names and added -h, --help parameter and usage display", "url": "https://github.com/nordic-institute/X-Road/pull/726#discussion_r545854248", "createdAt": "2020-12-18T14:10:56Z", "author": {"login": "jansu76"}, "path": "src/build_packages.sh", "diffHunk": "@@ -2,27 +2,54 @@\n set -e\n export XROAD=$(cd \"$(dirname \"$0\")\"; pwd)\n \n-if [[ ! \" $* \" =~ \" --packageonly \" ]]; then\n-  ./compile_code.sh \"$@\"\n-fi\n+HAS_DOCKER=\"\"\n+\n+errorExit() {\n+\techo \"*** $*\" 1>&2\n+\texit 1\n+}\n+\n+buildInDocker() {\n+    test -n \"$HAS_DOCKER\" || errorExit \"Error, docker is not installed/running.\"\n+    echo \"Building in docker...\"\n+    docker build -q -t xroad-build --build-arg uid=$(id -u) --build-arg gid=$(id -g) $XROAD/packages/docker-compile || errorExit \"Error building build image.\"\n+    docker run --rm -v $XROAD/..:/workspace -w /workspace/src -u builder xroad-build  bash -c \"./update_ruby_dependencies.sh && ./compile_code.sh -nodaemon\" || errorExit \"Error running build of binaries.\"\n+}\n+\n+buildLocally() {\n+    echo \"Building locally...\"\n+    cd $XROAD || errorExit \"Error 'cd $XROAD'.\"\n+    ./compile_code.sh \"$@\" || errorExit \"Error running build of binaries.\"\n+}\n \n if command -v docker &>/dev/null; then\n-    docker build -q -t xroad-deb-bionic \"$XROAD/packages/docker/deb-bionic\"\n-    docker build -q -t xroad-deb-focal \"$XROAD/packages/docker/deb-focal\"\n-    docker build -q -t xroad-rpm \"$XROAD/packages/docker/rpm\"\n-    docker build -q -t xroad-rpm-el8 \"$XROAD/packages/docker/rpm-el8\"\n+    HAS_DOCKER=true\n+fi\n+\n+case \"$1\" in\n+    --packageonly|-p) shift;;\n+    --docker-build|-d) shift; buildInDocker \"$@\";;\n+    *) buildLocally \"$@\";;\n+esac", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "87216cafb12b43a14a6ad344d6da371fcc28232f"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTg2NjAzMQ==", "bodyText": "I find the construct with set -- \"$@\" \"$i\" rather confusing. The continue statements are unnecessary.\nI really prefer to keep things simple (that's why I personally would be fine with allowing those parameters only in the first position).\nThe example from compile_code.sh looks better to me because it does not mix a for loop with shift statements (this should really be avoided in general). Actually it seems like an error to me, because due to the shift not all parameters are evaluated.\nIf you think a more complete parameter handling is necessary I can dive a bit deeper into it and make a proposal.", "url": "https://github.com/nordic-institute/X-Road/pull/726#discussion_r545866031", "createdAt": "2020-12-18T14:30:15Z", "author": {"login": "mbert"}, "path": "src/build_packages.sh", "diffHunk": "@@ -2,27 +2,54 @@\n set -e\n export XROAD=$(cd \"$(dirname \"$0\")\"; pwd)\n \n-if [[ ! \" $* \" =~ \" --packageonly \" ]]; then\n-  ./compile_code.sh \"$@\"\n-fi\n+HAS_DOCKER=\"\"\n+\n+errorExit() {\n+\techo \"*** $*\" 1>&2\n+\texit 1\n+}\n+\n+buildInDocker() {\n+    test -n \"$HAS_DOCKER\" || errorExit \"Error, docker is not installed/running.\"\n+    echo \"Building in docker...\"\n+    docker build -q -t xroad-build --build-arg uid=$(id -u) --build-arg gid=$(id -g) $XROAD/packages/docker-compile || errorExit \"Error building build image.\"\n+    docker run --rm -v $XROAD/..:/workspace -w /workspace/src -u builder xroad-build  bash -c \"./update_ruby_dependencies.sh && ./compile_code.sh -nodaemon\" || errorExit \"Error running build of binaries.\"\n+}\n+\n+buildLocally() {\n+    echo \"Building locally...\"\n+    cd $XROAD || errorExit \"Error 'cd $XROAD'.\"\n+    ./compile_code.sh \"$@\" || errorExit \"Error running build of binaries.\"\n+}\n \n if command -v docker &>/dev/null; then\n-    docker build -q -t xroad-deb-bionic \"$XROAD/packages/docker/deb-bionic\"\n-    docker build -q -t xroad-deb-focal \"$XROAD/packages/docker/deb-focal\"\n-    docker build -q -t xroad-rpm \"$XROAD/packages/docker/rpm\"\n-    docker build -q -t xroad-rpm-el8 \"$XROAD/packages/docker/rpm-el8\"\n+    HAS_DOCKER=true\n+fi\n+\n+case \"$1\" in\n+    --packageonly|-p) shift;;\n+    --docker-build|-d) shift; buildInDocker \"$@\";;\n+    *) buildLocally \"$@\";;\n+esac", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTg1NDI0OA=="}, "originalCommit": {"oid": "87216cafb12b43a14a6ad344d6da371fcc28232f"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTg3NDcwOA==", "bodyText": "That set & shift approach is inspired by https://unix.stackexchange.com/a/258514. Not sure why for loop with shift statements should be avoided in general?\nThose continues look unnecessary, I think you are right.\nI did test the proposed solution with different parameter combinations, and all parameters were evaluated if I am not mistaken.", "url": "https://github.com/nordic-institute/X-Road/pull/726#discussion_r545874708", "createdAt": "2020-12-18T14:44:04Z", "author": {"login": "jansu76"}, "path": "src/build_packages.sh", "diffHunk": "@@ -2,27 +2,54 @@\n set -e\n export XROAD=$(cd \"$(dirname \"$0\")\"; pwd)\n \n-if [[ ! \" $* \" =~ \" --packageonly \" ]]; then\n-  ./compile_code.sh \"$@\"\n-fi\n+HAS_DOCKER=\"\"\n+\n+errorExit() {\n+\techo \"*** $*\" 1>&2\n+\texit 1\n+}\n+\n+buildInDocker() {\n+    test -n \"$HAS_DOCKER\" || errorExit \"Error, docker is not installed/running.\"\n+    echo \"Building in docker...\"\n+    docker build -q -t xroad-build --build-arg uid=$(id -u) --build-arg gid=$(id -g) $XROAD/packages/docker-compile || errorExit \"Error building build image.\"\n+    docker run --rm -v $XROAD/..:/workspace -w /workspace/src -u builder xroad-build  bash -c \"./update_ruby_dependencies.sh && ./compile_code.sh -nodaemon\" || errorExit \"Error running build of binaries.\"\n+}\n+\n+buildLocally() {\n+    echo \"Building locally...\"\n+    cd $XROAD || errorExit \"Error 'cd $XROAD'.\"\n+    ./compile_code.sh \"$@\" || errorExit \"Error running build of binaries.\"\n+}\n \n if command -v docker &>/dev/null; then\n-    docker build -q -t xroad-deb-bionic \"$XROAD/packages/docker/deb-bionic\"\n-    docker build -q -t xroad-deb-focal \"$XROAD/packages/docker/deb-focal\"\n-    docker build -q -t xroad-rpm \"$XROAD/packages/docker/rpm\"\n-    docker build -q -t xroad-rpm-el8 \"$XROAD/packages/docker/rpm-el8\"\n+    HAS_DOCKER=true\n+fi\n+\n+case \"$1\" in\n+    --packageonly|-p) shift;;\n+    --docker-build|-d) shift; buildInDocker \"$@\";;\n+    *) buildLocally \"$@\";;\n+esac", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTg1NDI0OA=="}, "originalCommit": {"oid": "87216cafb12b43a14a6ad344d6da371fcc28232f"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTkwMTk1Mg==", "bodyText": "I avoid using shift in for loops altogether because it is very confusing. Shell code needs to be treated with care anyway because scripts are not parsed but rather simply executed line by line (and hence tend to abort in the middle of a file system operation leaving a complete mess).\nThat's why I usually recommend to use patterns as clear and simple as possible. When parsing command line args, it's usually either while + shift or it's for. Only in this case it's getting a bit inconvenient because we want to pass on command line args preserving white spaces. Rather than trying to build a new argument list I try to avoid having to do so in the first place :)", "url": "https://github.com/nordic-institute/X-Road/pull/726#discussion_r545901952", "createdAt": "2020-12-18T15:17:14Z", "author": {"login": "mbert"}, "path": "src/build_packages.sh", "diffHunk": "@@ -2,27 +2,54 @@\n set -e\n export XROAD=$(cd \"$(dirname \"$0\")\"; pwd)\n \n-if [[ ! \" $* \" =~ \" --packageonly \" ]]; then\n-  ./compile_code.sh \"$@\"\n-fi\n+HAS_DOCKER=\"\"\n+\n+errorExit() {\n+\techo \"*** $*\" 1>&2\n+\texit 1\n+}\n+\n+buildInDocker() {\n+    test -n \"$HAS_DOCKER\" || errorExit \"Error, docker is not installed/running.\"\n+    echo \"Building in docker...\"\n+    docker build -q -t xroad-build --build-arg uid=$(id -u) --build-arg gid=$(id -g) $XROAD/packages/docker-compile || errorExit \"Error building build image.\"\n+    docker run --rm -v $XROAD/..:/workspace -w /workspace/src -u builder xroad-build  bash -c \"./update_ruby_dependencies.sh && ./compile_code.sh -nodaemon\" || errorExit \"Error running build of binaries.\"\n+}\n+\n+buildLocally() {\n+    echo \"Building locally...\"\n+    cd $XROAD || errorExit \"Error 'cd $XROAD'.\"\n+    ./compile_code.sh \"$@\" || errorExit \"Error running build of binaries.\"\n+}\n \n if command -v docker &>/dev/null; then\n-    docker build -q -t xroad-deb-bionic \"$XROAD/packages/docker/deb-bionic\"\n-    docker build -q -t xroad-deb-focal \"$XROAD/packages/docker/deb-focal\"\n-    docker build -q -t xroad-rpm \"$XROAD/packages/docker/rpm\"\n-    docker build -q -t xroad-rpm-el8 \"$XROAD/packages/docker/rpm-el8\"\n+    HAS_DOCKER=true\n+fi\n+\n+case \"$1\" in\n+    --packageonly|-p) shift;;\n+    --docker-build|-d) shift; buildInDocker \"$@\";;\n+    *) buildLocally \"$@\";;\n+esac", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTg1NDI0OA=="}, "originalCommit": {"oid": "87216cafb12b43a14a6ad344d6da371fcc28232f"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjYzODA4Nw==", "bodyText": "Thanks for the updates!\nLooks like this still expects build-mode parameter to be in first position. If we were to do so, there is no reason for the for-loop over all parameters. The earlier syntax of\ncase \"$1\" in\n    --packageonly|-p) shift;;\n    --docker-build|-d) shift; buildInDocker \"$@\";;\n    *) shift; buildLocally \"$@\";;\nesac\n\nwould be simpler and better (copy-pasted from old, uses parameter names no longer in use).\nI will try to argue for the freely ordered build-mode (d/p) parameters. The build modes operate a bit weirdly now, as there are two modes that trigger a different-from-default build path, and absence of those triggers the default build path. Everything might a bit more straightforward if there was symmetry and buildLocally was also a mandatory parameter (but I am not very convinced that it would be optimal either). Now, putting the build-mode parameter into wrong index by mistake triggers wrong build path which may be an error that is possibly not immediately easy to detect. Especially when combined with how the sister-script compile_code.sh behaves (parameters do have free order) this is a recipe for confusion IMO.\nI know the free-order parameters are not perfect either (potential for masking sharing parameters - but shared parameters should be avoided in any case IMO), but this is still the way I would prefer.\nAs I put in my suggestion in #726 (comment), requiring build-mode parameters to be the first ones is also an acceptable solution IMO. I would prefer the free-order solution (especially after I've already spent the time to write and test it), but fixed order with improved documentation would be merged as well.\nI agree 100% with the point about shell code needing to be treated with care, and to be as clear and simple as possible, I don't think we have a disagreement there. However things like shift in for loops is confusing or is not confusing is more subjective, and also down to what solutions each developer is used to. IMO using shift in the for-loop is fine here. Maybe some additional comments would make it more clear:\n# remove all build-mode params (--package-only,-p,--docker-compile,-d), maintain others\nfor i in \"$@\"; do\n    # remove current parameter i from all params\n    shift\n    case \"$i\" in\n        --package-only|-p)\n            PACKAGE_ONLY=1\n            ;;\n        --docker-compile|-d)\n            DOCKER_COMPILE=1\n            ;;\n        --help|-h)\n            usage 0\n            ;;\n        *)\n            # bring back removed parameter i\n            set -- \"$@\" \"$i\"\n            ;;\n    esac\ndone", "url": "https://github.com/nordic-institute/X-Road/pull/726#discussion_r546638087", "createdAt": "2020-12-21T10:51:12Z", "author": {"login": "jansu76"}, "path": "src/build_packages.sh", "diffHunk": "@@ -2,27 +2,54 @@\n set -e\n export XROAD=$(cd \"$(dirname \"$0\")\"; pwd)\n \n-if [[ ! \" $* \" =~ \" --packageonly \" ]]; then\n-  ./compile_code.sh \"$@\"\n-fi\n+HAS_DOCKER=\"\"\n+\n+errorExit() {\n+\techo \"*** $*\" 1>&2\n+\texit 1\n+}\n+\n+buildInDocker() {\n+    test -n \"$HAS_DOCKER\" || errorExit \"Error, docker is not installed/running.\"\n+    echo \"Building in docker...\"\n+    docker build -q -t xroad-build --build-arg uid=$(id -u) --build-arg gid=$(id -g) $XROAD/packages/docker-compile || errorExit \"Error building build image.\"\n+    docker run --rm -v $XROAD/..:/workspace -w /workspace/src -u builder xroad-build  bash -c \"./update_ruby_dependencies.sh && ./compile_code.sh -nodaemon\" || errorExit \"Error running build of binaries.\"\n+}\n+\n+buildLocally() {\n+    echo \"Building locally...\"\n+    cd $XROAD || errorExit \"Error 'cd $XROAD'.\"\n+    ./compile_code.sh \"$@\" || errorExit \"Error running build of binaries.\"\n+}\n \n if command -v docker &>/dev/null; then\n-    docker build -q -t xroad-deb-bionic \"$XROAD/packages/docker/deb-bionic\"\n-    docker build -q -t xroad-deb-focal \"$XROAD/packages/docker/deb-focal\"\n-    docker build -q -t xroad-rpm \"$XROAD/packages/docker/rpm\"\n-    docker build -q -t xroad-rpm-el8 \"$XROAD/packages/docker/rpm-el8\"\n+    HAS_DOCKER=true\n+fi\n+\n+case \"$1\" in\n+    --packageonly|-p) shift;;\n+    --docker-build|-d) shift; buildInDocker \"$@\";;\n+    *) buildLocally \"$@\";;\n+esac", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTg1NDI0OA=="}, "originalCommit": {"oid": "87216cafb12b43a14a6ad344d6da371fcc28232f"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjY1ODkzOQ==", "bodyText": "I agree 100% with the point about shell code needing to be treated with care, and to be as clear and simple as possible, I don't think we have a disagreement there. However things like shift in for loops is confusing or is not confusing is more subjective, and also down to what solutions each developer is used to.\n\nWe can of course happily agree to disagree on that one :)\nJust one last remark, why I don't really favour the construction with the for loop: Usually shift is used when you always look at $1, and that's what you'd do in a while loop:\nwhile [ $# -gt 0 ]; do\n    case \"$1\" in\n        *) ...;; \n    esac\n    shift\ndone\n\nIn that case I consume the very parameter you're looking at. When using a for loop, shift does not work the same way, because it's always consuming the first parameter regardless which one is in $i. These are code blocks that people writing a lot of shell script code usually have in their heads and just put them in when necessary. Of course, in your case you're always consuming before looking, so the behaviour is consistent and defined, but still it takes some time to grasp.\n\nLooks like this still expects build-mode parameter to be in first position. If we were to do so, there is no reason for the for-loop over all parameters. The earlier syntax of\ncase \"$1\" in\n    --packageonly|-p) shift;;\n    --docker-build|-d) shift; buildInDocker \"$@\";;\n    *) shift; buildLocally \"$@\";;\nesac\n\nwould be simpler and better (copy-pasted from old, uses parameter names no longer in use).\nI will try to argue for the freely ordered build-mode (d/p) parameters. The build modes operate a bit weirdly now, as there are two modes that trigger a different-from-default build path, and absence of those triggers the default build path. Everything might a bit more straightforward if there was symmetry and buildLocally was also a mandatory parameter (but I am not very convinced that it would be optimal either). Now, putting the build-mode parameter into wrong index by mistake triggers wrong build path which may be an error that is possibly not immediately easy to detect. Especially when combined with how the sister-script compile_code.sh behaves (parameters do have free order) this is a recipe for confusion IMO.\n\nActually I do not think that the parameters to build_package.sh should be freely placable for two reasons:\n\nThe same parameters (e.g. -p or -d) could be legal for the script called afterwards. They'd get filtered out here which could cause problems.\nFor me as a user a clear distinction between parameters to the outer and parameters to the inner script makes sense. The simple method is just enforce parameters to the outer script at position 1, a more sophisticated would be to introduce a parameter -- after which everything will be ignored by the outer script.\n\nFor a build script as simple as this one I would prefer not to use the -- variant, because it makes the script longer than necessary and/or forces me to do \"dirty\" things like rebuilding $@. My original version's charm was its simplicity, but I accept that error handling (-p and -d) was missing.\nIn general I try to keep shell scripts short. My personal convention is to scrutinise everything significantly longer than an editor page and get rid of unnecessary stuff if possible (more code - more bugs, fatal in a programming language parsed only line by line).\nTo be honest, I still like my first version best, but the second would still be OK. I don't like the set -- \"$@\" \"$i\" construct, because basically everybody needs to look up what it does (that's by the way also my standard criticism on bashisms), and few people will be able to understand why it works.\nBut long story short (I do enjoy this kind of debates): if you really want the variant you proposed I'd be - reluctantly - willing to go along. I'd still prefer the simple one :)", "url": "https://github.com/nordic-institute/X-Road/pull/726#discussion_r546658939", "createdAt": "2020-12-21T11:38:45Z", "author": {"login": "mbert"}, "path": "src/build_packages.sh", "diffHunk": "@@ -2,27 +2,54 @@\n set -e\n export XROAD=$(cd \"$(dirname \"$0\")\"; pwd)\n \n-if [[ ! \" $* \" =~ \" --packageonly \" ]]; then\n-  ./compile_code.sh \"$@\"\n-fi\n+HAS_DOCKER=\"\"\n+\n+errorExit() {\n+\techo \"*** $*\" 1>&2\n+\texit 1\n+}\n+\n+buildInDocker() {\n+    test -n \"$HAS_DOCKER\" || errorExit \"Error, docker is not installed/running.\"\n+    echo \"Building in docker...\"\n+    docker build -q -t xroad-build --build-arg uid=$(id -u) --build-arg gid=$(id -g) $XROAD/packages/docker-compile || errorExit \"Error building build image.\"\n+    docker run --rm -v $XROAD/..:/workspace -w /workspace/src -u builder xroad-build  bash -c \"./update_ruby_dependencies.sh && ./compile_code.sh -nodaemon\" || errorExit \"Error running build of binaries.\"\n+}\n+\n+buildLocally() {\n+    echo \"Building locally...\"\n+    cd $XROAD || errorExit \"Error 'cd $XROAD'.\"\n+    ./compile_code.sh \"$@\" || errorExit \"Error running build of binaries.\"\n+}\n \n if command -v docker &>/dev/null; then\n-    docker build -q -t xroad-deb-bionic \"$XROAD/packages/docker/deb-bionic\"\n-    docker build -q -t xroad-deb-focal \"$XROAD/packages/docker/deb-focal\"\n-    docker build -q -t xroad-rpm \"$XROAD/packages/docker/rpm\"\n-    docker build -q -t xroad-rpm-el8 \"$XROAD/packages/docker/rpm-el8\"\n+    HAS_DOCKER=true\n+fi\n+\n+case \"$1\" in\n+    --packageonly|-p) shift;;\n+    --docker-build|-d) shift; buildInDocker \"$@\";;\n+    *) buildLocally \"$@\";;\n+esac", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTg1NDI0OA=="}, "originalCommit": {"oid": "87216cafb12b43a14a6ad344d6da371fcc28232f"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjY5NDczOA==", "bodyText": "Heh, looks like we have created quite a long debate about this detail :) Thanks for explaining your thinking, appreciated. I guess we understand the related factors mostly the same way, but maybe put different weights to different factors when summing up the overall preferred approach.\nTo recap, I think both options are fine for this PR\n\nbuild-mode params (--package-only,-p,--docker-compile,-d) in fixed first position - close to your 1st version\nbuild-mode params in any positions, will get removed for inner script - close to what I proposed\n\nFor (1) I would like to see a bit of added documentation, making this as clear as possible for the user, so that she does not build_packages.sh param1 --docker-build param2 by accident. Usage() at least could use couple of additional words about it, maybe also BUILD.md?\nI still prefer (2) but it is not a must.", "url": "https://github.com/nordic-institute/X-Road/pull/726#discussion_r546694738", "createdAt": "2020-12-21T13:05:41Z", "author": {"login": "jansu76"}, "path": "src/build_packages.sh", "diffHunk": "@@ -2,27 +2,54 @@\n set -e\n export XROAD=$(cd \"$(dirname \"$0\")\"; pwd)\n \n-if [[ ! \" $* \" =~ \" --packageonly \" ]]; then\n-  ./compile_code.sh \"$@\"\n-fi\n+HAS_DOCKER=\"\"\n+\n+errorExit() {\n+\techo \"*** $*\" 1>&2\n+\texit 1\n+}\n+\n+buildInDocker() {\n+    test -n \"$HAS_DOCKER\" || errorExit \"Error, docker is not installed/running.\"\n+    echo \"Building in docker...\"\n+    docker build -q -t xroad-build --build-arg uid=$(id -u) --build-arg gid=$(id -g) $XROAD/packages/docker-compile || errorExit \"Error building build image.\"\n+    docker run --rm -v $XROAD/..:/workspace -w /workspace/src -u builder xroad-build  bash -c \"./update_ruby_dependencies.sh && ./compile_code.sh -nodaemon\" || errorExit \"Error running build of binaries.\"\n+}\n+\n+buildLocally() {\n+    echo \"Building locally...\"\n+    cd $XROAD || errorExit \"Error 'cd $XROAD'.\"\n+    ./compile_code.sh \"$@\" || errorExit \"Error running build of binaries.\"\n+}\n \n if command -v docker &>/dev/null; then\n-    docker build -q -t xroad-deb-bionic \"$XROAD/packages/docker/deb-bionic\"\n-    docker build -q -t xroad-deb-focal \"$XROAD/packages/docker/deb-focal\"\n-    docker build -q -t xroad-rpm \"$XROAD/packages/docker/rpm\"\n-    docker build -q -t xroad-rpm-el8 \"$XROAD/packages/docker/rpm-el8\"\n+    HAS_DOCKER=true\n+fi\n+\n+case \"$1\" in\n+    --packageonly|-p) shift;;\n+    --docker-build|-d) shift; buildInDocker \"$@\";;\n+    *) buildLocally \"$@\";;\n+esac", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTg1NDI0OA=="}, "originalCommit": {"oid": "87216cafb12b43a14a6ad344d6da371fcc28232f"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzMDk0Mjk1OnYy", "diffSide": "RIGHT", "path": "src/build_packages.sh", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQxNDoxNDozMlrOIIkbdw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQxNDozMDozN1rOIIlB6Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTg1NjM3NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \n          \n          \n            \n            usage () {\n          \n          \n            \n              echo \"Usage: $0 [options for $0...] [other options]\"\n          \n          \n            \n              echo \"Options for $0:\"\n          \n          \n            \n              echo \" -p, --package-only    Skip compilation, just build packages'\"\n          \n          \n            \n              echo \" -d, --docker-compile  Compile in docker container instead of native gradle build\"\n          \n          \n            \n              echo \" -h, --help            This help text.\"\n          \n          \n            \n              echo \"Other options are passed on to compile_code.sh\"\n          \n          \n            \n            \n          \n          \n            \n              exit 2\n          \n          \n            \n            }", "url": "https://github.com/nordic-institute/X-Road/pull/726#discussion_r545856375", "createdAt": "2020-12-18T14:14:32Z", "author": {"login": "jansu76"}, "path": "src/build_packages.sh", "diffHunk": "@@ -2,27 +2,54 @@\n set -e\n export XROAD=$(cd \"$(dirname \"$0\")\"; pwd)\n \n-if [[ ! \" $* \" =~ \" --packageonly \" ]]; then\n-  ./compile_code.sh \"$@\"\n-fi\n+HAS_DOCKER=\"\"\n+\n+errorExit() {\n+\techo \"*** $*\" 1>&2\n+\texit 1\n+}\n+\n+buildInDocker() {\n+    test -n \"$HAS_DOCKER\" || errorExit \"Error, docker is not installed/running.\"\n+    echo \"Building in docker...\"\n+    docker build -q -t xroad-build --build-arg uid=$(id -u) --build-arg gid=$(id -g) $XROAD/packages/docker-compile || errorExit \"Error building build image.\"\n+    docker run --rm -v $XROAD/..:/workspace -w /workspace/src -u builder xroad-build  bash -c \"./update_ruby_dependencies.sh && ./compile_code.sh -nodaemon\" || errorExit \"Error running build of binaries.\"\n+}\n+\n+buildLocally() {\n+    echo \"Building locally...\"\n+    cd $XROAD || errorExit \"Error 'cd $XROAD'.\"\n+    ./compile_code.sh \"$@\" || errorExit \"Error running build of binaries.\"\n+}\n ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "87216cafb12b43a14a6ad344d6da371fcc28232f"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTg2NjIxNw==", "bodyText": "Can do.", "url": "https://github.com/nordic-institute/X-Road/pull/726#discussion_r545866217", "createdAt": "2020-12-18T14:30:37Z", "author": {"login": "mbert"}, "path": "src/build_packages.sh", "diffHunk": "@@ -2,27 +2,54 @@\n set -e\n export XROAD=$(cd \"$(dirname \"$0\")\"; pwd)\n \n-if [[ ! \" $* \" =~ \" --packageonly \" ]]; then\n-  ./compile_code.sh \"$@\"\n-fi\n+HAS_DOCKER=\"\"\n+\n+errorExit() {\n+\techo \"*** $*\" 1>&2\n+\texit 1\n+}\n+\n+buildInDocker() {\n+    test -n \"$HAS_DOCKER\" || errorExit \"Error, docker is not installed/running.\"\n+    echo \"Building in docker...\"\n+    docker build -q -t xroad-build --build-arg uid=$(id -u) --build-arg gid=$(id -g) $XROAD/packages/docker-compile || errorExit \"Error building build image.\"\n+    docker run --rm -v $XROAD/..:/workspace -w /workspace/src -u builder xroad-build  bash -c \"./update_ruby_dependencies.sh && ./compile_code.sh -nodaemon\" || errorExit \"Error running build of binaries.\"\n+}\n+\n+buildLocally() {\n+    echo \"Building locally...\"\n+    cd $XROAD || errorExit \"Error 'cd $XROAD'.\"\n+    ./compile_code.sh \"$@\" || errorExit \"Error running build of binaries.\"\n+}\n ", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTg1NjM3NQ=="}, "originalCommit": {"oid": "87216cafb12b43a14a6ad344d6da371fcc28232f"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0MDYwMDk2OnYy", "diffSide": "RIGHT", "path": "src/center-service/Gemfile.lock", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxMToxNzozN1rOIJ3pwQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxMToxNzozN1rOIJ3pwQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzIxOTkwNQ==", "bodyText": "Seems unrelated to the PR?", "url": "https://github.com/nordic-institute/X-Road/pull/726#discussion_r547219905", "createdAt": "2020-12-22T11:17:37Z", "author": {"login": "jansu76"}, "path": "src/center-service/Gemfile.lock", "diffHunk": "@@ -99,7 +99,7 @@ GEM\n       rake (>= 0.8.7)\n       rdoc (~> 3.4)\n       thor (>= 0.14.6, < 2.0)\n-    rake (13.0.1)\n+    rake (13.0.3)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f4a6cee42f62d03207909ed37ccfb6b30728a091"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0MDYwMTM3OnYy", "diffSide": "RIGHT", "path": "src/center-ui/Gemfile.lock", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxMToxNzo0NVrOIJ3qAQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxMToxNzo0NVrOIJ3qAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzIxOTk2OQ==", "bodyText": "Seems unrelated to the PR?", "url": "https://github.com/nordic-institute/X-Road/pull/726#discussion_r547219969", "createdAt": "2020-12-22T11:17:45Z", "author": {"login": "jansu76"}, "path": "src/center-ui/Gemfile.lock", "diffHunk": "@@ -99,7 +99,7 @@ GEM\n       rake (>= 0.8.7)\n       rdoc (~> 3.4)\n       thor (>= 0.14.6, < 2.0)\n-    rake (13.0.1)\n+    rake (13.0.3)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f4a6cee42f62d03207909ed37ccfb6b30728a091"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0MTQ0MjE5OnYy", "diffSide": "RIGHT", "path": "src/build_packages.sh", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxNTozNzozN1rOIJ_YrQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxNTozNzozN1rOIJ_YrQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzM0NjYwNQ==", "bodyText": "Should include a conditional -it parameter to make it possible to interrupt build with Ctrl+C, as in packaging https://github.com/nordic-institute/X-Road/blob/develop/src/build_packages.sh#L16-L18", "url": "https://github.com/nordic-institute/X-Road/pull/726#discussion_r547346605", "createdAt": "2020-12-22T15:37:37Z", "author": {"login": "jansu76"}, "path": "src/build_packages.sh", "diffHunk": "@@ -2,27 +2,65 @@\n set -e\n export XROAD=$(cd \"$(dirname \"$0\")\"; pwd)\n \n-if [[ ! \" $* \" =~ \" --packageonly \" ]]; then\n-  ./compile_code.sh \"$@\"\n-fi\n+HAS_DOCKER=\"\"\n+\n+errorExit() {\n+    echo \"*** $*\" 1>&2\n+    exit 1\n+}\n+\n+usage () {\n+    echo \"Usage: $0 [option for $0...] [other options]\"\n+    echo \"Options for $0:\"\n+    echo \" -p, --package-only    Skip compilation, just build packages'\"\n+    echo \" -d, --docker-compile  Compile in docker container instead of native gradle build\"\n+    echo \" -h, --help            This help text.\"\n+    echo \"The option for $0, if present, must come fist, before other options.\"\n+    echo \"Other options are passed on to compile_code.sh\"\n+    test -z \"$1\" || exit \"$1\"\n+}\n+\n+buildInDocker() {\n+    test -n \"$HAS_DOCKER\" || errorExit \"Error, docker is not installed/running.\"\n+    echo \"Building in docker...\"\n+    docker build -q -t xroad-build --build-arg uid=$(id -u) --build-arg gid=$(id -g) $XROAD/packages/docker-compile || errorExit \"Error building build image.\"\n+    docker run --rm -v $XROAD/..:/workspace -w /workspace/src -u builder xroad-build  bash -c \"./update_ruby_dependencies.sh && ./compile_code.sh -nodaemon\" || errorExit \"Error running build of binaries.\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9970b9f1c9e08e2f4f45ca8f62c0bcf366ee0e99"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ2MDM2NzY5OnYy", "diffSide": "RIGHT", "path": "src/build_packages.sh", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMFQwOToxNToyMlrOIMlYVA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMFQxMToxMTo0MVrOIMqsKA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDA2NjI2MA==", "bodyText": "Actual expected parameters packageonly and docker-build do not match now what usage says (package-only and docker-compile).\nI would use the names from usage. Change from packageonly to package-only is in principle a breaking change, but has been an undocumented feature and by a quick check should not cause trouble for our CI jobs, at least.", "url": "https://github.com/nordic-institute/X-Road/pull/726#discussion_r550066260", "createdAt": "2020-12-30T09:15:22Z", "author": {"login": "jansu76"}, "path": "src/build_packages.sh", "diffHunk": "@@ -2,27 +2,69 @@\n set -e\n export XROAD=$(cd \"$(dirname \"$0\")\"; pwd)\n \n-if [[ ! \" $* \" =~ \" --packageonly \" ]]; then\n-  ./compile_code.sh \"$@\"\n-fi\n+HAS_DOCKER=\"\"\n+\n+errorExit() {\n+    echo \"*** $*\" 1>&2\n+    exit 1\n+}\n+\n+usage () {\n+    echo \"Usage: $0 [option for $0...] [other options]\"\n+    echo \"Options for $0:\"\n+    echo \" -p, --package-only    Skip compilation, just build packages'\"\n+    echo \" -d, --docker-compile  Compile in docker container instead of native gradle build\"\n+    echo \" -h, --help            This help text.\"\n+    echo \"The option for $0, if present, must come fist, before other options.\"\n+    echo \"Other options are passed on to compile_code.sh\"\n+    test -z \"$1\" || exit \"$1\"\n+}\n+\n+buildInDocker() {\n+    test -n \"$HAS_DOCKER\" || errorExit \"Error, docker is not installed/running.\"\n+    echo \"Building in docker...\"\n+    # check if running attached to terminal\n+    # makes it possible to stop build with Ctrl+C\n+    if [ -t 1 ]; then OPT=\"-it\"; fi\n+\n+    docker build -q -t xroad-build --build-arg uid=$(id -u) --build-arg gid=$(id -g) $XROAD/packages/docker-compile || errorExit \"Error building build image.\"\n+    docker run --rm -v $XROAD/..:/workspace -w /workspace/src -u builder ${OPT} xroad-build  bash -c \"./update_ruby_dependencies.sh && ./compile_code.sh -nodaemon\" || errorExit \"Error running build of binaries.\"\n+}\n+\n+buildLocally() {\n+    echo \"Building locally...\"\n+    cd $XROAD || errorExit \"Error 'cd $XROAD'.\"\n+    ./compile_code.sh \"$@\" || errorExit \"Error running build of binaries.\"\n+}\n \n if command -v docker &>/dev/null; then\n-    docker build -q -t xroad-deb-bionic \"$XROAD/packages/docker/deb-bionic\"\n-    docker build -q -t xroad-deb-focal \"$XROAD/packages/docker/deb-focal\"\n-    docker build -q -t xroad-rpm \"$XROAD/packages/docker/rpm\"\n-    docker build -q -t xroad-rpm-el8 \"$XROAD/packages/docker/rpm-el8\"\n+    HAS_DOCKER=true\n+fi\n+\n+case \"$1\" in\n+    --packageonly|-p) shift;;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c2be0743362662c4ec67b6ce928b33ea649cbb9f"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDE1MzI1Ng==", "bodyText": "Sure, that had slipped my attention.", "url": "https://github.com/nordic-institute/X-Road/pull/726#discussion_r550153256", "createdAt": "2020-12-30T11:11:41Z", "author": {"login": "mbert"}, "path": "src/build_packages.sh", "diffHunk": "@@ -2,27 +2,69 @@\n set -e\n export XROAD=$(cd \"$(dirname \"$0\")\"; pwd)\n \n-if [[ ! \" $* \" =~ \" --packageonly \" ]]; then\n-  ./compile_code.sh \"$@\"\n-fi\n+HAS_DOCKER=\"\"\n+\n+errorExit() {\n+    echo \"*** $*\" 1>&2\n+    exit 1\n+}\n+\n+usage () {\n+    echo \"Usage: $0 [option for $0...] [other options]\"\n+    echo \"Options for $0:\"\n+    echo \" -p, --package-only    Skip compilation, just build packages'\"\n+    echo \" -d, --docker-compile  Compile in docker container instead of native gradle build\"\n+    echo \" -h, --help            This help text.\"\n+    echo \"The option for $0, if present, must come fist, before other options.\"\n+    echo \"Other options are passed on to compile_code.sh\"\n+    test -z \"$1\" || exit \"$1\"\n+}\n+\n+buildInDocker() {\n+    test -n \"$HAS_DOCKER\" || errorExit \"Error, docker is not installed/running.\"\n+    echo \"Building in docker...\"\n+    # check if running attached to terminal\n+    # makes it possible to stop build with Ctrl+C\n+    if [ -t 1 ]; then OPT=\"-it\"; fi\n+\n+    docker build -q -t xroad-build --build-arg uid=$(id -u) --build-arg gid=$(id -g) $XROAD/packages/docker-compile || errorExit \"Error building build image.\"\n+    docker run --rm -v $XROAD/..:/workspace -w /workspace/src -u builder ${OPT} xroad-build  bash -c \"./update_ruby_dependencies.sh && ./compile_code.sh -nodaemon\" || errorExit \"Error running build of binaries.\"\n+}\n+\n+buildLocally() {\n+    echo \"Building locally...\"\n+    cd $XROAD || errorExit \"Error 'cd $XROAD'.\"\n+    ./compile_code.sh \"$@\" || errorExit \"Error running build of binaries.\"\n+}\n \n if command -v docker &>/dev/null; then\n-    docker build -q -t xroad-deb-bionic \"$XROAD/packages/docker/deb-bionic\"\n-    docker build -q -t xroad-deb-focal \"$XROAD/packages/docker/deb-focal\"\n-    docker build -q -t xroad-rpm \"$XROAD/packages/docker/rpm\"\n-    docker build -q -t xroad-rpm-el8 \"$XROAD/packages/docker/rpm-el8\"\n+    HAS_DOCKER=true\n+fi\n+\n+case \"$1\" in\n+    --packageonly|-p) shift;;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDA2NjI2MA=="}, "originalCommit": {"oid": "c2be0743362662c4ec67b6ce928b33ea649cbb9f"}, "originalPosition": 51}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2706, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}