{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc4NzA3MDA1", "number": 385, "title": "XRDDEV-892 / XRDDEV-893 / XRDDEV-897 / XRDDEV-899", "bodyText": "XRDDEV-892: API for listing configuration backup files\nXRDDEV-893: API for deleting a configuration backup file\nXRDDEV-897: API for downloading configuration backup file\nXRDDEV-899: API for backing up configuration\nUnit tests", "createdAt": "2020-02-23T13:43:08Z", "url": "https://github.com/nordic-institute/X-Road/pull/385", "merged": true, "mergeCommit": {"oid": "ad0f96486d442e47ac22427939090087ec0161a4"}, "closed": true, "closedAt": "2020-03-02T15:14:21Z", "author": {"login": "petkivim"}, "timelineItems": {"totalCount": 19, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcG1DkvAH2gAyMzc4NzA3MDA1OjdkYTY4ZDY0Yzg5ZDkzM2QxZWM2N2QzOWM1YzRhYjU1ZmUxNDhmNTE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcJvOI9gFqTM2NzI3NDkzMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "7da68d64c89d933d1ec67d39c5c4ab55fe148f51", "author": {"user": {"login": "petkivim", "name": "Petteri Kivim\u00e4ki"}}, "url": "https://github.com/nordic-institute/X-Road/commit/7da68d64c89d933d1ec67d39c5c4ab55fe148f51", "committedDate": "2020-02-22T14:18:30Z", "message": "XRDDEV-892 API for listing configuration backup files\n\n- Implement API for listing configuration backup files.\n- Add unit tests."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1226c84f2c6a561ca32e08c0873d1ae970f34511", "author": {"user": {"login": "petkivim", "name": "Petteri Kivim\u00e4ki"}}, "url": "https://github.com/nordic-institute/X-Road/commit/1226c84f2c6a561ca32e08c0873d1ae970f34511", "committedDate": "2020-02-22T15:09:19Z", "message": "XRDDEV-899 API for deleting a configuration backup file\n\n- Implement API for deleting a configuration backup file.\n- Add unit tests."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "73bd409c713609dd4d3b09ac835bde95ffe12933", "author": {"user": {"login": "petkivim", "name": "Petteri Kivim\u00e4ki"}}, "url": "https://github.com/nordic-institute/X-Road/commit/73bd409c713609dd4d3b09ac835bde95ffe12933", "committedDate": "2020-02-23T07:14:36Z", "message": "XRDDEV-897 API for downloading configuration backup file\n\n- Implement API for downloading configuration backup file.\n- Refactor BackupsService helper methods.\n- Add unit tests.\n- Add a backup file to be used as a test resource."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ff71859f8dd8673175260a387730e02fb4a3e03a", "author": {"user": {"login": "petkivim", "name": "Petteri Kivim\u00e4ki"}}, "url": "https://github.com/nordic-institute/X-Road/commit/ff71859f8dd8673175260a387730e02fb4a3e03a", "committedDate": "2020-02-23T07:43:39Z", "message": "XRDDEV-892 Clean up BackupsApiController unit tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "aa5ef1d629a13811443531575553008c05c3c66e", "author": {"user": {"login": "petkivim", "name": "Petteri Kivim\u00e4ki"}}, "url": "https://github.com/nordic-institute/X-Road/commit/aa5ef1d629a13811443531575553008c05c3c66e", "committedDate": "2020-02-23T12:14:17Z", "message": "XRDDEV-893 API for backing up configuration\n\n- Implement API for generating a new system configuration backup."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4257e56b93386aa7aaa4d36da29e6eb5a6743d58", "author": {"user": {"login": "petkivim", "name": "Petteri Kivim\u00e4ki"}}, "url": "https://github.com/nordic-institute/X-Road/commit/4257e56b93386aa7aaa4d36da29e6eb5a6743d58", "committedDate": "2020-02-23T13:36:44Z", "message": "XRDDEV-893 Add unit tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2793c8bd6a80f2beeae18507678025ede98a9ed4", "author": {"user": {"login": "petkivim", "name": "Petteri Kivim\u00e4ki"}}, "url": "https://github.com/nordic-institute/X-Road/commit/2793c8bd6a80f2beeae18507678025ede98a9ed4", "committedDate": "2020-02-23T15:39:48Z", "message": "XRDDEV-892 Fix SonarQube issues"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b0f9b6950d925b50a912c2f8d736e97a933ce9d5", "author": {"user": {"login": "petkivim", "name": "Petteri Kivim\u00e4ki"}}, "url": "https://github.com/nordic-institute/X-Road/commit/b0f9b6950d925b50a912c2f8d736e97a933ce9d5", "committedDate": "2020-02-24T06:00:40Z", "message": "XRDDEV-892 Minor updates to backups repository and service"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d621c471ec94fd55beb195b218dd19f3afe5917c", "author": {"user": {"login": "petkivim", "name": "Petteri Kivim\u00e4ki"}}, "url": "https://github.com/nordic-institute/X-Road/commit/d621c471ec94fd55beb195b218dd19f3afe5917c", "committedDate": "2020-02-25T15:05:10Z", "message": "XRDDEV-893 Log backup script console output"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYzMzU1NjEz", "url": "https://github.com/nordic-institute/X-Road/pull/385#pullrequestreview-363355613", "createdAt": "2020-02-24T12:32:21Z", "commit": {"oid": "b0f9b6950d925b50a912c2f8d736e97a933ce9d5"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 16, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxMjozMjoyMlrOFtfBlw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxMjo1ODo1NFrOFuqhdg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzIzODU1MQ==", "bodyText": "Since this does not use any Spring test facilities like @MockBean, it does need to be have these annotations. E.g. ClientConverterTest is an example of same type of test.\nSome other converter tests seem to have the annotations even though they do not need tehm, but probably good to change it here anyway.", "url": "https://github.com/nordic-institute/X-Road/pull/385#discussion_r383238551", "createdAt": "2020-02-24T12:32:22Z", "author": {"login": "jansu76"}, "path": "src/proxy-ui-api/src/test/java/org/niis/xroad/restapi/converter/BackupsConverterTest.java", "diffHunk": "@@ -0,0 +1,87 @@\n+/**\n+ * The MIT License\n+ * Copyright (c) 2018 Estonian Information System Authority (RIA),\n+ * Nordic Institute for Interoperability Solutions (NIIS), Population Register Centre (VRK)\n+ * Copyright (c) 2015-2017 Estonian Information System Authority (RIA), Population Register Centre (VRK)\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package org.niis.xroad.restapi.converter;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.niis.xroad.restapi.openapi.model.Backup;\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.test.context.junit4.SpringRunner;\n+\n+import java.io.File;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+/**\n+ * Test BackupsConverter\n+ */\n+@RunWith(SpringRunner.class)\n+@SpringBootTest", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b0f9b6950d925b50a912c2f8d736e97a933ce9d5"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzI0MzU0OA==", "bodyText": "This file seems to exist in /src/test/resources. The other one does not. As far as I can follow, the physical file is not needed by the test, since repository is mocked? If so, it would be good to remove the file.", "url": "https://github.com/nordic-institute/X-Road/pull/385#discussion_r383243548", "createdAt": "2020-02-24T12:44:19Z", "author": {"login": "jansu76"}, "path": "src/proxy-ui-api/src/test/java/org/niis/xroad/restapi/openapi/BackupsApiControllerTest.java", "diffHunk": "@@ -0,0 +1,209 @@\n+/**\n+ * The MIT License\n+ * Copyright (c) 2018 Estonian Information System Authority (RIA),\n+ * Nordic Institute for Interoperability Solutions (NIIS), Population Register Centre (VRK)\n+ * Copyright (c) 2015-2017 Estonian Information System Authority (RIA), Population Register Centre (VRK)\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package org.niis.xroad.restapi.openapi;\n+\n+import lombok.extern.slf4j.Slf4j;\n+import org.apache.commons.io.IOUtils;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.Mockito;\n+import org.niis.xroad.restapi.exceptions.DeviationAwareRuntimeException;\n+import org.niis.xroad.restapi.openapi.model.Backup;\n+import org.niis.xroad.restapi.repository.BackupsRepository;\n+import org.niis.xroad.restapi.service.BackupsService;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.test.autoconfigure.jdbc.AutoConfigureTestDatabase;\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.boot.test.mock.mockito.MockBean;\n+import org.springframework.core.io.Resource;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.security.test.context.support.WithMockUser;\n+import org.springframework.test.context.junit4.SpringRunner;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+import java.io.File;\n+import java.io.InputStream;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Date;\n+import java.util.List;\n+\n+import static junit.framework.TestCase.fail;\n+import static org.junit.Assert.assertEquals;\n+import static org.mockito.Mockito.when;\n+\n+/**\n+ * Test BackupsApiController\n+ */\n+@RunWith(SpringRunner.class)\n+@SpringBootTest\n+@AutoConfigureTestDatabase\n+@Transactional\n+@Slf4j\n+public class BackupsApiControllerTest {\n+\n+    @MockBean\n+    BackupsRepository backupsRepository;\n+\n+    @Autowired\n+    private BackupsApiController backupsApiController;\n+\n+    private static final String BASE_DIR = \"/tmp/backups/\";\n+\n+    private static final String BACKUP_FILE_1_NAME = \"ss-automatic-backup-2020_02_19_031502.tar\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b0f9b6950d925b50a912c2f8d736e97a933ce9d5"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzI0OTMyMA==", "bodyText": "Since we're mocking readBackupFile anyhow, there is probably no real need for actual physical file src/test/resources/ss-automatic-backup-2020_02_19_031502.tar?\nSame test coverage result can be achieved by byte[] bytes = \"foobar\".getBytes(StandardCharsets.UTF_8); and this way test could be more self-contained and we could avoid storing a backup file in version control, which has a small but positive result in simplifying things.", "url": "https://github.com/nordic-institute/X-Road/pull/385#discussion_r383249320", "createdAt": "2020-02-24T12:57:58Z", "author": {"login": "jansu76"}, "path": "src/proxy-ui-api/src/test/java/org/niis/xroad/restapi/openapi/BackupsApiControllerTest.java", "diffHunk": "@@ -0,0 +1,209 @@\n+/**\n+ * The MIT License\n+ * Copyright (c) 2018 Estonian Information System Authority (RIA),\n+ * Nordic Institute for Interoperability Solutions (NIIS), Population Register Centre (VRK)\n+ * Copyright (c) 2015-2017 Estonian Information System Authority (RIA), Population Register Centre (VRK)\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package org.niis.xroad.restapi.openapi;\n+\n+import lombok.extern.slf4j.Slf4j;\n+import org.apache.commons.io.IOUtils;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.Mockito;\n+import org.niis.xroad.restapi.exceptions.DeviationAwareRuntimeException;\n+import org.niis.xroad.restapi.openapi.model.Backup;\n+import org.niis.xroad.restapi.repository.BackupsRepository;\n+import org.niis.xroad.restapi.service.BackupsService;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.test.autoconfigure.jdbc.AutoConfigureTestDatabase;\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.boot.test.mock.mockito.MockBean;\n+import org.springframework.core.io.Resource;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.security.test.context.support.WithMockUser;\n+import org.springframework.test.context.junit4.SpringRunner;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+import java.io.File;\n+import java.io.InputStream;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Date;\n+import java.util.List;\n+\n+import static junit.framework.TestCase.fail;\n+import static org.junit.Assert.assertEquals;\n+import static org.mockito.Mockito.when;\n+\n+/**\n+ * Test BackupsApiController\n+ */\n+@RunWith(SpringRunner.class)\n+@SpringBootTest\n+@AutoConfigureTestDatabase\n+@Transactional\n+@Slf4j\n+public class BackupsApiControllerTest {\n+\n+    @MockBean\n+    BackupsRepository backupsRepository;\n+\n+    @Autowired\n+    private BackupsApiController backupsApiController;\n+\n+    private static final String BASE_DIR = \"/tmp/backups/\";\n+\n+    private static final String BACKUP_FILE_1_NAME = \"ss-automatic-backup-2020_02_19_031502.tar\";\n+\n+    private static final String BACKUP_FILE_1_CREATED_AT = \"2020-02-19T03:15:02.451Z\";\n+\n+    private static final Long BACKUP_FILE_1_CREATED_AT_MILLIS = 1582082102451L;\n+\n+    private static final String BACKUP_FILE_2_NAME = \"ss-automatic-backup-2020_02_12_031502.tar\";\n+\n+    private static final String BACKUP_FILE_2_CREATED_AT = \"2020-02-12T03:15:02.684Z\";\n+\n+    private static final Long BACKUP_FILE_2_CREATED_AT_MILLIS = 1581477302684L;\n+\n+    @Before\n+    public void setup() {\n+        List<File> files = new ArrayList<>(Arrays.asList(new File(BASE_DIR + BACKUP_FILE_1_NAME),\n+                new File(BASE_DIR + BACKUP_FILE_2_NAME)));\n+\n+        when(backupsRepository.getBackupFiles()).thenReturn(files);\n+        when(backupsRepository.getCreatedAt(BACKUP_FILE_1_NAME)).thenReturn(new Date(BACKUP_FILE_1_CREATED_AT_MILLIS));\n+        when(backupsRepository.getCreatedAt(BACKUP_FILE_2_NAME)).thenReturn(new Date(BACKUP_FILE_2_CREATED_AT_MILLIS));\n+    }\n+\n+    @Test\n+    @WithMockUser(authorities = { \"BACKUP_CONFIGURATION\" })\n+    public void getBackups() throws Exception {\n+        ResponseEntity<List<Backup>> response = backupsApiController.getBackups();\n+        assertEquals(HttpStatus.OK, response.getStatusCode());\n+\n+        List<Backup> backups = response.getBody();\n+        assertEquals(2, backups.size());\n+        assertEquals(BACKUP_FILE_1_NAME, backups.get(0).getFilename());\n+        assertEquals(BACKUP_FILE_1_CREATED_AT, backups.get(0).getCreatedAt().toString());\n+        assertEquals(BACKUP_FILE_2_NAME, backups.get(1).getFilename());\n+        assertEquals(BACKUP_FILE_2_CREATED_AT, backups.get(1).getCreatedAt().toString());\n+    }\n+\n+    @Test\n+    @WithMockUser(authorities = { \"BACKUP_CONFIGURATION\" })\n+    public void getBackupsEmptyList() {\n+        List<File> files = new ArrayList<>();\n+        when(backupsRepository.getBackupFiles()).thenReturn(files);\n+\n+        ResponseEntity<List<Backup>> response = backupsApiController.getBackups();\n+        assertEquals(HttpStatus.OK, response.getStatusCode());\n+\n+        List<Backup> backups = response.getBody();\n+        assertEquals(files.size(), backups.size());\n+    }\n+\n+    @Test\n+    @WithMockUser(authorities = { \"BACKUP_CONFIGURATION\" })\n+    public void getBackupsException() {\n+        when(backupsRepository.getBackupFiles()).thenThrow(new RuntimeException());\n+\n+        try {\n+            ResponseEntity<List<Backup>> response = backupsApiController.getBackups();\n+            fail(\"should throw RuntimeException\");\n+        } catch (RuntimeException expected) {\n+            // success\n+        }\n+    }\n+\n+    @Test\n+    @WithMockUser(authorities = { \"BACKUP_CONFIGURATION\" })\n+    public void deleteBackup() {\n+        ResponseEntity<Void> response = backupsApiController.deleteBackup(BACKUP_FILE_1_NAME);\n+        assertEquals(HttpStatus.NO_CONTENT, response.getStatusCode());\n+\n+    }\n+\n+    @Test\n+    @WithMockUser(authorities = { \"BACKUP_CONFIGURATION\" })\n+    public void deleteNonExistingBackup() {\n+        try {\n+            ResponseEntity<Void> response = backupsApiController.deleteBackup(\"test_file.tar\");\n+            fail(\"should throw ResourceNotFoundException\");\n+        } catch (ResourceNotFoundException expected) {\n+            // success\n+        }\n+    }\n+\n+    @Test\n+    @WithMockUser(authorities = { \"BACKUP_CONFIGURATION\" })\n+    public void downloadBackup() throws Exception {\n+        byte[] bytes = null;\n+        try (InputStream is = getClass().getClassLoader().getResourceAsStream(BACKUP_FILE_1_NAME)) {\n+            bytes = IOUtils.toByteArray(is);\n+        }\n+        when(backupsRepository.readBackupFile(BACKUP_FILE_1_NAME)).thenReturn(bytes);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b0f9b6950d925b50a912c2f8d736e97a933ce9d5"}, "originalPosition": 165}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDQxNTE2NA==", "bodyText": "Other converters use singular form for naming, e.g. ClientConverter -> BackupConverter", "url": "https://github.com/nordic-institute/X-Road/pull/385#discussion_r384415164", "createdAt": "2020-02-26T10:49:48Z", "author": {"login": "jansu76"}, "path": "src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/converter/BackupsConverter.java", "diffHunk": "@@ -0,0 +1,53 @@\n+/**\n+ * The MIT License\n+ * Copyright (c) 2018 Estonian Information System Authority (RIA),\n+ * Nordic Institute for Interoperability Solutions (NIIS), Population Register Centre (VRK)\n+ * Copyright (c) 2015-2017 Estonian Information System Authority (RIA), Population Register Centre (VRK)\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package org.niis.xroad.restapi.converter;\n+\n+import com.google.common.collect.Streams;\n+import org.niis.xroad.restapi.openapi.model.Backup;\n+import org.springframework.stereotype.Component;\n+\n+import java.io.File;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * Converter for backups related data between openapi and service domain classes\n+ */\n+@Component\n+public class BackupsConverter {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d621c471ec94fd55beb195b218dd19f3afe5917c"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDQyMjcxMw==", "bodyText": "In our layered architecture, converters belong to controller layer. Service layer should not depend on them, as lower layers in general should not be aware of upper layers (that would create problems e.g. with cyclical dependencies, less clear separation of concerns, not being able to modify upper layers without affecting lower ones).\nInstead of openapi objects such as  Backup, services should be working with either existing DTOs from core classes or create their own DTO classes. I suspect existing DTOs are not available, so introducing a new one is the way to go. With the help of Lombok, this is not much of a pain: \n  \n    \n      X-Road/src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/service/ServiceDescriptionService.java\n    \n    \n        Lines 1094 to 1098\n      in\n      09f42ff\n    \n    \n    \n    \n\n        \n          \n           @Data \n        \n\n        \n          \n           private class WsdlProcessingResult { \n        \n\n        \n          \n               private Collection<WsdlParser.ServiceInfo> parsedServices = new ArrayList<>(); \n        \n\n        \n          \n               private List<WarningDeviation> warnings = new ArrayList<>(); \n        \n\n        \n          \n           } \n        \n    \n  \n\n\n\nhttps://confluence.niis.org/display/XRDDEV/API+backend+implementation#APIbackendimplementation-Layering\nhttps://softwareengineering.stackexchange.com/questions/198783/why-is-it-a-good-idea-for-lower-application-layers-not-to-be-aware-of-higher", "url": "https://github.com/nordic-institute/X-Road/pull/385#discussion_r384422713", "createdAt": "2020-02-26T11:04:00Z", "author": {"login": "jansu76"}, "path": "src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/service/BackupsService.java", "diffHunk": "@@ -0,0 +1,190 @@\n+/**\n+ * The MIT License\n+ * Copyright (c) 2018 Estonian Information System Authority (RIA),\n+ * Nordic Institute for Interoperability Solutions (NIIS), Population Register Centre (VRK)\n+ * Copyright (c) 2015-2017 Estonian Information System Authority (RIA), Population Register Centre (VRK)\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package org.niis.xroad.restapi.service;\n+\n+import ee.ria.xroad.common.identifier.SecurityServerId;\n+\n+import lombok.Setter;\n+import lombok.extern.slf4j.Slf4j;\n+import org.niis.xroad.restapi.converter.BackupsConverter;\n+import org.niis.xroad.restapi.exceptions.DeviationAwareRuntimeException;\n+import org.niis.xroad.restapi.exceptions.ErrorDeviation;\n+import org.niis.xroad.restapi.openapi.model.Backup;\n+import org.niis.xroad.restapi.repository.BackupsRepository;\n+import org.niis.xroad.restapi.util.FormatUtils;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.security.access.prepost.PreAuthorize;\n+import org.springframework.stereotype.Service;\n+\n+import java.io.File;\n+import java.time.LocalDateTime;\n+import java.time.format.DateTimeFormatter;\n+import java.util.Arrays;\n+import java.util.Date;\n+import java.util.List;\n+import java.util.Optional;\n+\n+/**\n+ * Backups service.\n+ */\n+@Slf4j\n+@Service\n+@PreAuthorize(\"isAuthenticated()\")\n+public class BackupsService {\n+\n+    private static final String BACKUP_GENERATION_FAILED = \"backup_generation_failed\";\n+\n+    private final BackupsRepository backupsRepository;\n+    private final BackupsConverter backupsConverter;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d621c471ec94fd55beb195b218dd19f3afe5917c"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDQyNjkyMQ==", "bodyText": "I am not sure if ACCEPTED is the correct one here?\n\nstatus code indicates that the request has been received but not yet acted upon\n\nbackupsService.generateBackup is synchronous, at this point backup has been created. Should we be using regular CREATED instead (with the ApiUtil-added details)?", "url": "https://github.com/nordic-institute/X-Road/pull/385#discussion_r384426921", "createdAt": "2020-02-26T11:12:36Z", "author": {"login": "jansu76"}, "path": "src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/openapi/BackupsApiController.java", "diffHunk": "@@ -25,34 +25,77 @@\n package org.niis.xroad.restapi.openapi;\n \n import lombok.extern.slf4j.Slf4j;\n+import org.niis.xroad.restapi.exceptions.ErrorDeviation;\n+import org.niis.xroad.restapi.openapi.model.Backup;\n+import org.niis.xroad.restapi.service.BackupFileNotFoundException;\n+import org.niis.xroad.restapi.service.BackupsService;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.core.io.Resource;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.ResponseEntity;\n import org.springframework.security.access.prepost.PreAuthorize;\n import org.springframework.stereotype.Controller;\n import org.springframework.web.bind.annotation.RequestMapping;\n-import org.springframework.web.context.request.NativeWebRequest;\n \n-import java.util.Optional;\n+import java.util.List;\n \n /**\n- * backups controller\n+ * Backups controller\n  */\n @Controller\n @RequestMapping(\"/api\")\n @Slf4j\n @PreAuthorize(\"denyAll\")\n-@SuppressWarnings(\"checkstyle:HideUtilityClassConstructor\")\n public class BackupsApiController implements BackupsApi {\n \n-    public static final int MAX_FIFTY_ITEMS = 50;\n+    public static final String GENERATE_BACKUP_INTERRUPTED = \"generate_backup_interrupted\";\n \n-    private final NativeWebRequest request;\n+    private final BackupsService backupsService;\n+    @Autowired\n+    public BackupsApiController(BackupsService backupsService) {\n+        this.backupsService = backupsService;\n+    }\n+\n+    @Override\n+    @PreAuthorize(\"hasAuthority('BACKUP_CONFIGURATION')\")\n+    public ResponseEntity<List<Backup>> getBackups() {\n+        List<Backup> backups = backupsService.getBackupFiles();\n+\n+        return new ResponseEntity<>(backups, HttpStatus.OK);\n+    }\n \n-    @org.springframework.beans.factory.annotation.Autowired\n-    public BackupsApiController(NativeWebRequest request) {\n-        this.request = request;\n+    @Override\n+    @PreAuthorize(\"hasAuthority('BACKUP_CONFIGURATION')\")\n+    public ResponseEntity<Void> deleteBackup(String filename) {\n+        try {\n+            backupsService.deleteBackup(filename);\n+        } catch (BackupFileNotFoundException e) {\n+            throw new ResourceNotFoundException(e);\n+        }\n+\n+        return new ResponseEntity<>(HttpStatus.NO_CONTENT);\n+    }\n+\n+    @Override\n+    @PreAuthorize(\"hasAuthority('BACKUP_CONFIGURATION')\")\n+    public ResponseEntity<Resource> downloadBackup(String filename) {\n+        byte[] backupFile = null;\n+        try {\n+            backupFile = backupsService.readBackupFile(filename);\n+        } catch (BackupFileNotFoundException e) {\n+            throw new ResourceNotFoundException(e);\n+        }\n+        return ApiUtil.createAttachmentResourceResponse(backupFile, filename);\n     }\n \n     @Override\n-    public Optional<NativeWebRequest> getRequest() {\n-        return Optional.ofNullable(request);\n+    @PreAuthorize(\"hasAuthority('BACKUP_CONFIGURATION')\")\n+    public ResponseEntity<Backup> addBackup() {\n+        try {\n+            Backup backup = backupsService.generateBackup();\n+            return new ResponseEntity<>(backup, HttpStatus.ACCEPTED);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d621c471ec94fd55beb195b218dd19f3afe5917c"}, "originalPosition": 83}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDQzMzQ0OA==", "bodyText": "In the case of BackupFileNotFoundException, is GENERATE_BACKUP_INTERRUPTED not potentially misleading error code? Maybe just new InternalServerErrorException(e) in that case?\nBut, I think I will add another comment about use of BackupFileNotFoundException to service, it might not be needed at all.", "url": "https://github.com/nordic-institute/X-Road/pull/385#discussion_r384433448", "createdAt": "2020-02-26T11:26:25Z", "author": {"login": "jansu76"}, "path": "src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/openapi/BackupsApiController.java", "diffHunk": "@@ -25,34 +25,77 @@\n package org.niis.xroad.restapi.openapi;\n \n import lombok.extern.slf4j.Slf4j;\n+import org.niis.xroad.restapi.exceptions.ErrorDeviation;\n+import org.niis.xroad.restapi.openapi.model.Backup;\n+import org.niis.xroad.restapi.service.BackupFileNotFoundException;\n+import org.niis.xroad.restapi.service.BackupsService;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.core.io.Resource;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.ResponseEntity;\n import org.springframework.security.access.prepost.PreAuthorize;\n import org.springframework.stereotype.Controller;\n import org.springframework.web.bind.annotation.RequestMapping;\n-import org.springframework.web.context.request.NativeWebRequest;\n \n-import java.util.Optional;\n+import java.util.List;\n \n /**\n- * backups controller\n+ * Backups controller\n  */\n @Controller\n @RequestMapping(\"/api\")\n @Slf4j\n @PreAuthorize(\"denyAll\")\n-@SuppressWarnings(\"checkstyle:HideUtilityClassConstructor\")\n public class BackupsApiController implements BackupsApi {\n \n-    public static final int MAX_FIFTY_ITEMS = 50;\n+    public static final String GENERATE_BACKUP_INTERRUPTED = \"generate_backup_interrupted\";\n \n-    private final NativeWebRequest request;\n+    private final BackupsService backupsService;\n+    @Autowired\n+    public BackupsApiController(BackupsService backupsService) {\n+        this.backupsService = backupsService;\n+    }\n+\n+    @Override\n+    @PreAuthorize(\"hasAuthority('BACKUP_CONFIGURATION')\")\n+    public ResponseEntity<List<Backup>> getBackups() {\n+        List<Backup> backups = backupsService.getBackupFiles();\n+\n+        return new ResponseEntity<>(backups, HttpStatus.OK);\n+    }\n \n-    @org.springframework.beans.factory.annotation.Autowired\n-    public BackupsApiController(NativeWebRequest request) {\n-        this.request = request;\n+    @Override\n+    @PreAuthorize(\"hasAuthority('BACKUP_CONFIGURATION')\")\n+    public ResponseEntity<Void> deleteBackup(String filename) {\n+        try {\n+            backupsService.deleteBackup(filename);\n+        } catch (BackupFileNotFoundException e) {\n+            throw new ResourceNotFoundException(e);\n+        }\n+\n+        return new ResponseEntity<>(HttpStatus.NO_CONTENT);\n+    }\n+\n+    @Override\n+    @PreAuthorize(\"hasAuthority('BACKUP_CONFIGURATION')\")\n+    public ResponseEntity<Resource> downloadBackup(String filename) {\n+        byte[] backupFile = null;\n+        try {\n+            backupFile = backupsService.readBackupFile(filename);\n+        } catch (BackupFileNotFoundException e) {\n+            throw new ResourceNotFoundException(e);\n+        }\n+        return ApiUtil.createAttachmentResourceResponse(backupFile, filename);\n     }\n \n     @Override\n-    public Optional<NativeWebRequest> getRequest() {\n-        return Optional.ofNullable(request);\n+    @PreAuthorize(\"hasAuthority('BACKUP_CONFIGURATION')\")\n+    public ResponseEntity<Backup> addBackup() {\n+        try {\n+            Backup backup = backupsService.generateBackup();\n+            return new ResponseEntity<>(backup, HttpStatus.ACCEPTED);\n+        } catch (InterruptedException | BackupFileNotFoundException e) {\n+            throw new InternalServerErrorException(new ErrorDeviation(GENERATE_BACKUP_INTERRUPTED));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d621c471ec94fd55beb195b218dd19f3afe5917c"}, "originalPosition": 85}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDQzNjYyMw==", "bodyText": "I like writing out definitions, in which situations certain checked exceptions can be thrown. I think it's good because\n\nit documents this to the clients who call this method (well, duh)\nit is a good though exercise. Writing the descriptions forces one to think through about the different exception situations, and often reveals that certain exceptions should be replaced, or not thrown as checked exceptions at all", "url": "https://github.com/nordic-institute/X-Road/pull/385#discussion_r384436623", "createdAt": "2020-02-26T11:33:31Z", "author": {"login": "jansu76"}, "path": "src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/service/BackupsService.java", "diffHunk": "@@ -0,0 +1,190 @@\n+/**\n+ * The MIT License\n+ * Copyright (c) 2018 Estonian Information System Authority (RIA),\n+ * Nordic Institute for Interoperability Solutions (NIIS), Population Register Centre (VRK)\n+ * Copyright (c) 2015-2017 Estonian Information System Authority (RIA), Population Register Centre (VRK)\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package org.niis.xroad.restapi.service;\n+\n+import ee.ria.xroad.common.identifier.SecurityServerId;\n+\n+import lombok.Setter;\n+import lombok.extern.slf4j.Slf4j;\n+import org.niis.xroad.restapi.converter.BackupsConverter;\n+import org.niis.xroad.restapi.exceptions.DeviationAwareRuntimeException;\n+import org.niis.xroad.restapi.exceptions.ErrorDeviation;\n+import org.niis.xroad.restapi.openapi.model.Backup;\n+import org.niis.xroad.restapi.repository.BackupsRepository;\n+import org.niis.xroad.restapi.util.FormatUtils;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.security.access.prepost.PreAuthorize;\n+import org.springframework.stereotype.Service;\n+\n+import java.io.File;\n+import java.time.LocalDateTime;\n+import java.time.format.DateTimeFormatter;\n+import java.util.Arrays;\n+import java.util.Date;\n+import java.util.List;\n+import java.util.Optional;\n+\n+/**\n+ * Backups service.\n+ */\n+@Slf4j\n+@Service\n+@PreAuthorize(\"isAuthenticated()\")\n+public class BackupsService {\n+\n+    private static final String BACKUP_GENERATION_FAILED = \"backup_generation_failed\";\n+\n+    private final BackupsRepository backupsRepository;\n+    private final BackupsConverter backupsConverter;\n+    private final ServerConfService serverConfService;\n+    private final ExternalProcessRunner externalProcessRunner;\n+\n+    @Setter\n+    private String generateBackupScriptPath;\n+    private static final String BACKUP_FILENAME_DATE_TIME_FORMAT = \"yyyyMMdd-HHmmss\";\n+\n+    /**\n+     * BackupsService constructor\n+     * @param backupsRepository\n+     */\n+    @Autowired\n+    public BackupsService(BackupsRepository backupsRepository, BackupsConverter backupsConverter,\n+                          ServerConfService serverConfService, ExternalProcessRunner externalProcessRunner,\n+                          @Value(\"${script.generate-backup.path}\") String generateBackupScriptPath) {\n+        this.backupsRepository = backupsRepository;\n+        this.backupsConverter = backupsConverter;\n+        this.serverConfService = serverConfService;\n+        this.externalProcessRunner = externalProcessRunner;\n+        this.generateBackupScriptPath = generateBackupScriptPath;\n+    }\n+\n+    /**\n+     * Return a list of available backup files\n+     * @return\n+     */\n+    public List<Backup> getBackupFiles() {\n+        List<File> backupFiles = backupsRepository.getBackupFiles();\n+        List<Backup> backups = backupsConverter.convert(backupFiles);\n+        setCreatedAt(backups);\n+        return backups;\n+    }\n+\n+    /**\n+     * Delete a backup file or throws an exception if the file does not exist\n+     * @param filename\n+     * @throws BackupFileNotFoundException\n+     */\n+    public void deleteBackup(String filename) throws BackupFileNotFoundException {\n+        if (!backupExists(filename).isPresent()) {\n+            throw new BackupFileNotFoundException(getFileNotFoundExceptionMessage(filename));\n+        }\n+        backupsRepository.deleteBackupFile(filename);\n+    }\n+\n+    /**\n+     * Read backup file's content\n+     * @param filename\n+     * @return\n+     * @throws BackupFileNotFoundException\n+     */\n+    public byte[] readBackupFile(String filename) throws BackupFileNotFoundException {\n+        if (!backupExists(filename).isPresent()) {\n+            throw new BackupFileNotFoundException(getFileNotFoundExceptionMessage(filename));\n+        }\n+        return backupsRepository.readBackupFile(filename);\n+    }\n+\n+    /**\n+     * Generate a new backup file\n+     * @throws ProcessFailedException\n+     * @throws ProcessNotExecutableException\n+     * @throws InterruptedException", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d621c471ec94fd55beb195b218dd19f3afe5917c"}, "originalPosition": 124}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDQzODk5NQ==", "bodyText": "Javadoc is not up to date, ProcessNotExecutableException and ProcessFailedException are not thrown, and BackupFileNotFoundException is missing", "url": "https://github.com/nordic-institute/X-Road/pull/385#discussion_r384438995", "createdAt": "2020-02-26T11:38:53Z", "author": {"login": "jansu76"}, "path": "src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/service/BackupsService.java", "diffHunk": "@@ -0,0 +1,190 @@\n+/**\n+ * The MIT License\n+ * Copyright (c) 2018 Estonian Information System Authority (RIA),\n+ * Nordic Institute for Interoperability Solutions (NIIS), Population Register Centre (VRK)\n+ * Copyright (c) 2015-2017 Estonian Information System Authority (RIA), Population Register Centre (VRK)\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package org.niis.xroad.restapi.service;\n+\n+import ee.ria.xroad.common.identifier.SecurityServerId;\n+\n+import lombok.Setter;\n+import lombok.extern.slf4j.Slf4j;\n+import org.niis.xroad.restapi.converter.BackupsConverter;\n+import org.niis.xroad.restapi.exceptions.DeviationAwareRuntimeException;\n+import org.niis.xroad.restapi.exceptions.ErrorDeviation;\n+import org.niis.xroad.restapi.openapi.model.Backup;\n+import org.niis.xroad.restapi.repository.BackupsRepository;\n+import org.niis.xroad.restapi.util.FormatUtils;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.security.access.prepost.PreAuthorize;\n+import org.springframework.stereotype.Service;\n+\n+import java.io.File;\n+import java.time.LocalDateTime;\n+import java.time.format.DateTimeFormatter;\n+import java.util.Arrays;\n+import java.util.Date;\n+import java.util.List;\n+import java.util.Optional;\n+\n+/**\n+ * Backups service.\n+ */\n+@Slf4j\n+@Service\n+@PreAuthorize(\"isAuthenticated()\")\n+public class BackupsService {\n+\n+    private static final String BACKUP_GENERATION_FAILED = \"backup_generation_failed\";\n+\n+    private final BackupsRepository backupsRepository;\n+    private final BackupsConverter backupsConverter;\n+    private final ServerConfService serverConfService;\n+    private final ExternalProcessRunner externalProcessRunner;\n+\n+    @Setter\n+    private String generateBackupScriptPath;\n+    private static final String BACKUP_FILENAME_DATE_TIME_FORMAT = \"yyyyMMdd-HHmmss\";\n+\n+    /**\n+     * BackupsService constructor\n+     * @param backupsRepository\n+     */\n+    @Autowired\n+    public BackupsService(BackupsRepository backupsRepository, BackupsConverter backupsConverter,\n+                          ServerConfService serverConfService, ExternalProcessRunner externalProcessRunner,\n+                          @Value(\"${script.generate-backup.path}\") String generateBackupScriptPath) {\n+        this.backupsRepository = backupsRepository;\n+        this.backupsConverter = backupsConverter;\n+        this.serverConfService = serverConfService;\n+        this.externalProcessRunner = externalProcessRunner;\n+        this.generateBackupScriptPath = generateBackupScriptPath;\n+    }\n+\n+    /**\n+     * Return a list of available backup files\n+     * @return\n+     */\n+    public List<Backup> getBackupFiles() {\n+        List<File> backupFiles = backupsRepository.getBackupFiles();\n+        List<Backup> backups = backupsConverter.convert(backupFiles);\n+        setCreatedAt(backups);\n+        return backups;\n+    }\n+\n+    /**\n+     * Delete a backup file or throws an exception if the file does not exist\n+     * @param filename\n+     * @throws BackupFileNotFoundException\n+     */\n+    public void deleteBackup(String filename) throws BackupFileNotFoundException {\n+        if (!backupExists(filename).isPresent()) {\n+            throw new BackupFileNotFoundException(getFileNotFoundExceptionMessage(filename));\n+        }\n+        backupsRepository.deleteBackupFile(filename);\n+    }\n+\n+    /**\n+     * Read backup file's content\n+     * @param filename\n+     * @return\n+     * @throws BackupFileNotFoundException\n+     */\n+    public byte[] readBackupFile(String filename) throws BackupFileNotFoundException {\n+        if (!backupExists(filename).isPresent()) {\n+            throw new BackupFileNotFoundException(getFileNotFoundExceptionMessage(filename));\n+        }\n+        return backupsRepository.readBackupFile(filename);\n+    }\n+\n+    /**\n+     * Generate a new backup file\n+     * @throws ProcessFailedException\n+     * @throws ProcessNotExecutableException\n+     * @throws InterruptedException", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDQzNjYyMw=="}, "originalCommit": {"oid": "d621c471ec94fd55beb195b218dd19f3afe5917c"}, "originalPosition": 124}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDQ0NjcwNg==", "bodyText": "Deciding which cases to identify as checked exceptions is important, but tricky and challenging job. And usually ends up being somewhat subjective. I wrote about the topic in https://confluence.niis.org/pages/viewpage.action?pageId=30212590\nIn this method we have ProcessNotExecutableException, ProcessFailedException and BackupFileNotFoundException. Question is which ones should be checked exceptions, which not.\nProcessNotExecutableException and ProcessFailedException are wrapped as DeviationAwareRuntimeExceptions. Logic is probably \"these mean that something in internal engine is broken, and method's caller is not interested in what. http 500 is enough\".\nI am maybe a bit dubious about ProcessFailedException, it might make sense to throw it as checked exception....but since that is from generateInternalTlsKeyAndCertificate and other places, lets leave it as it is.\nBut I would consider wrapping the BackupFileNotFoundException also in an unchecked DeviationAwareRuntimeException? If backup script completed, and still we dont find the backup, isn't that just as much \"something in the internals is broken, and all we want to do is http 500\" case as \"process is not executable\"?", "url": "https://github.com/nordic-institute/X-Road/pull/385#discussion_r384446706", "createdAt": "2020-02-26T11:56:03Z", "author": {"login": "jansu76"}, "path": "src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/service/BackupsService.java", "diffHunk": "@@ -0,0 +1,190 @@\n+/**\n+ * The MIT License\n+ * Copyright (c) 2018 Estonian Information System Authority (RIA),\n+ * Nordic Institute for Interoperability Solutions (NIIS), Population Register Centre (VRK)\n+ * Copyright (c) 2015-2017 Estonian Information System Authority (RIA), Population Register Centre (VRK)\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package org.niis.xroad.restapi.service;\n+\n+import ee.ria.xroad.common.identifier.SecurityServerId;\n+\n+import lombok.Setter;\n+import lombok.extern.slf4j.Slf4j;\n+import org.niis.xroad.restapi.converter.BackupsConverter;\n+import org.niis.xroad.restapi.exceptions.DeviationAwareRuntimeException;\n+import org.niis.xroad.restapi.exceptions.ErrorDeviation;\n+import org.niis.xroad.restapi.openapi.model.Backup;\n+import org.niis.xroad.restapi.repository.BackupsRepository;\n+import org.niis.xroad.restapi.util.FormatUtils;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.security.access.prepost.PreAuthorize;\n+import org.springframework.stereotype.Service;\n+\n+import java.io.File;\n+import java.time.LocalDateTime;\n+import java.time.format.DateTimeFormatter;\n+import java.util.Arrays;\n+import java.util.Date;\n+import java.util.List;\n+import java.util.Optional;\n+\n+/**\n+ * Backups service.\n+ */\n+@Slf4j\n+@Service\n+@PreAuthorize(\"isAuthenticated()\")\n+public class BackupsService {\n+\n+    private static final String BACKUP_GENERATION_FAILED = \"backup_generation_failed\";\n+\n+    private final BackupsRepository backupsRepository;\n+    private final BackupsConverter backupsConverter;\n+    private final ServerConfService serverConfService;\n+    private final ExternalProcessRunner externalProcessRunner;\n+\n+    @Setter\n+    private String generateBackupScriptPath;\n+    private static final String BACKUP_FILENAME_DATE_TIME_FORMAT = \"yyyyMMdd-HHmmss\";\n+\n+    /**\n+     * BackupsService constructor\n+     * @param backupsRepository\n+     */\n+    @Autowired\n+    public BackupsService(BackupsRepository backupsRepository, BackupsConverter backupsConverter,\n+                          ServerConfService serverConfService, ExternalProcessRunner externalProcessRunner,\n+                          @Value(\"${script.generate-backup.path}\") String generateBackupScriptPath) {\n+        this.backupsRepository = backupsRepository;\n+        this.backupsConverter = backupsConverter;\n+        this.serverConfService = serverConfService;\n+        this.externalProcessRunner = externalProcessRunner;\n+        this.generateBackupScriptPath = generateBackupScriptPath;\n+    }\n+\n+    /**\n+     * Return a list of available backup files\n+     * @return\n+     */\n+    public List<Backup> getBackupFiles() {\n+        List<File> backupFiles = backupsRepository.getBackupFiles();\n+        List<Backup> backups = backupsConverter.convert(backupFiles);\n+        setCreatedAt(backups);\n+        return backups;\n+    }\n+\n+    /**\n+     * Delete a backup file or throws an exception if the file does not exist\n+     * @param filename\n+     * @throws BackupFileNotFoundException\n+     */\n+    public void deleteBackup(String filename) throws BackupFileNotFoundException {\n+        if (!backupExists(filename).isPresent()) {\n+            throw new BackupFileNotFoundException(getFileNotFoundExceptionMessage(filename));\n+        }\n+        backupsRepository.deleteBackupFile(filename);\n+    }\n+\n+    /**\n+     * Read backup file's content\n+     * @param filename\n+     * @return\n+     * @throws BackupFileNotFoundException\n+     */\n+    public byte[] readBackupFile(String filename) throws BackupFileNotFoundException {\n+        if (!backupExists(filename).isPresent()) {\n+            throw new BackupFileNotFoundException(getFileNotFoundExceptionMessage(filename));\n+        }\n+        return backupsRepository.readBackupFile(filename);\n+    }\n+\n+    /**\n+     * Generate a new backup file\n+     * @throws ProcessFailedException\n+     * @throws ProcessNotExecutableException\n+     * @throws InterruptedException\n+     * @return\n+     */\n+    public Backup generateBackup() throws InterruptedException, BackupFileNotFoundException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d621c471ec94fd55beb195b218dd19f3afe5917c"}, "originalPosition": 127}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDQ1MzI1Nw==", "bodyText": "Old implementation is more strict in filtering:\n\n\n  \n    \n      X-Road/src/common-ui/lib/common-ui/backup_utils.rb\n    \n    \n        Lines 51 to 52\n      in\n      09f42ff\n    \n    \n    \n    \n\n        \n          \n           next if File.directory?(file_path) || file.start_with?(\".\") || \n        \n\n        \n          \n             !IOUtils.is_filename_valid?(file) \n        \n    \n  \n\n\n\n  \n    \n      X-Road/src/common-ui/lib/common-ui/io_utils.rb\n    \n    \n        Lines 139 to 141\n      in\n      09f42ff\n    \n    \n    \n    \n\n        \n          \n           def is_filename_valid?(filename) \n        \n\n        \n          \n             return filename =~ /\\A[\\w\\.\\-]+\\z/ \n        \n\n        \n          \n           end \n        \n    \n  \n\n\n\nShould we implement the same logic? I think this implementation would list more backups than the old UI (e.g. backup files starting with a dot)", "url": "https://github.com/nordic-institute/X-Road/pull/385#discussion_r384453257", "createdAt": "2020-02-26T12:11:15Z", "author": {"login": "jansu76"}, "path": "src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/repository/BackupsRepository.java", "diffHunk": "@@ -0,0 +1,130 @@\n+/**\n+ * The MIT License\n+ * Copyright (c) 2018 Estonian Information System Authority (RIA),\n+ * Nordic Institute for Interoperability Solutions (NIIS), Population Register Centre (VRK)\n+ * Copyright (c) 2015-2017 Estonian Information System Authority (RIA), Population Register Centre (VRK)\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package org.niis.xroad.restapi.repository;\n+\n+import ee.ria.xroad.common.SystemProperties;\n+\n+import lombok.extern.slf4j.Slf4j;\n+import org.springframework.stereotype.Repository;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.nio.file.attribute.FileTime;\n+import java.util.Date;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+/**\n+ * Backups repository\n+ */\n+@Slf4j\n+@Repository\n+public class BackupsRepository {\n+\n+    private static final String CONFIGURATION_BACKUP_PATH = SystemProperties.getConfBackupPath();\n+    private static final String BACKUP_FILE_EXTENSION = \".tar\";\n+    // Set maximum number of levels of directories to visit, subdirectories are excluded\n+    private static final int DIR_MAX_DEPTH = 1;\n+\n+    /**\n+     * Read backup files from configuration backup path\n+     * @return\n+     */\n+    public List<File> getBackupFiles() {\n+        try (Stream<Path> walk = Files.walk(Paths.get(CONFIGURATION_BACKUP_PATH), DIR_MAX_DEPTH)) {\n+            return walk.map(Path::toString)\n+                    .filter(f -> f.endsWith(BACKUP_FILE_EXTENSION))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d621c471ec94fd55beb195b218dd19f3afe5917c"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDQ1Nzk2MA==", "bodyText": "Using OffsetDateTime here would not be wrong choice either, since that is what we will end up using after some conversions, anyway.", "url": "https://github.com/nordic-institute/X-Road/pull/385#discussion_r384457960", "createdAt": "2020-02-26T12:22:02Z", "author": {"login": "jansu76"}, "path": "src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/repository/BackupsRepository.java", "diffHunk": "@@ -0,0 +1,130 @@\n+/**\n+ * The MIT License\n+ * Copyright (c) 2018 Estonian Information System Authority (RIA),\n+ * Nordic Institute for Interoperability Solutions (NIIS), Population Register Centre (VRK)\n+ * Copyright (c) 2015-2017 Estonian Information System Authority (RIA), Population Register Centre (VRK)\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package org.niis.xroad.restapi.repository;\n+\n+import ee.ria.xroad.common.SystemProperties;\n+\n+import lombok.extern.slf4j.Slf4j;\n+import org.springframework.stereotype.Repository;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.nio.file.attribute.FileTime;\n+import java.util.Date;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+/**\n+ * Backups repository\n+ */\n+@Slf4j\n+@Repository\n+public class BackupsRepository {\n+\n+    private static final String CONFIGURATION_BACKUP_PATH = SystemProperties.getConfBackupPath();\n+    private static final String BACKUP_FILE_EXTENSION = \".tar\";\n+    // Set maximum number of levels of directories to visit, subdirectories are excluded\n+    private static final int DIR_MAX_DEPTH = 1;\n+\n+    /**\n+     * Read backup files from configuration backup path\n+     * @return\n+     */\n+    public List<File> getBackupFiles() {\n+        try (Stream<Path> walk = Files.walk(Paths.get(CONFIGURATION_BACKUP_PATH), DIR_MAX_DEPTH)) {\n+            return walk.map(Path::toString)\n+                    .filter(f -> f.endsWith(BACKUP_FILE_EXTENSION))\n+                    .map(this::getFile).collect(Collectors.toList());\n+        } catch (IOException ioe) {\n+            log.error(\"can't read backup files from configuration path (\" + CONFIGURATION_BACKUP_PATH + \")\");\n+            throw new RuntimeException(ioe);\n+        }\n+    }\n+\n+    /**\n+     * Get the creation date/time of a backup file\n+     * @param filename\n+     * @return\n+     */\n+    public Date getCreatedAt(String filename) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d621c471ec94fd55beb195b218dd19f3afe5917c"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDQ2MTk0OA==", "bodyText": "I guess there would be also this option https://docs.oracle.com/javase/8/docs/api/java/nio/file/attribute/BasicFileAttributes.html which removes the need for attribute name String https://stackoverflow.com/a/2724009/1469083\nNot very important detail though.", "url": "https://github.com/nordic-institute/X-Road/pull/385#discussion_r384461948", "createdAt": "2020-02-26T12:31:04Z", "author": {"login": "jansu76"}, "path": "src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/repository/BackupsRepository.java", "diffHunk": "@@ -0,0 +1,130 @@\n+/**\n+ * The MIT License\n+ * Copyright (c) 2018 Estonian Information System Authority (RIA),\n+ * Nordic Institute for Interoperability Solutions (NIIS), Population Register Centre (VRK)\n+ * Copyright (c) 2015-2017 Estonian Information System Authority (RIA), Population Register Centre (VRK)\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package org.niis.xroad.restapi.repository;\n+\n+import ee.ria.xroad.common.SystemProperties;\n+\n+import lombok.extern.slf4j.Slf4j;\n+import org.springframework.stereotype.Repository;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.nio.file.attribute.FileTime;\n+import java.util.Date;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+/**\n+ * Backups repository\n+ */\n+@Slf4j\n+@Repository\n+public class BackupsRepository {\n+\n+    private static final String CONFIGURATION_BACKUP_PATH = SystemProperties.getConfBackupPath();\n+    private static final String BACKUP_FILE_EXTENSION = \".tar\";\n+    // Set maximum number of levels of directories to visit, subdirectories are excluded\n+    private static final int DIR_MAX_DEPTH = 1;\n+\n+    /**\n+     * Read backup files from configuration backup path\n+     * @return\n+     */\n+    public List<File> getBackupFiles() {\n+        try (Stream<Path> walk = Files.walk(Paths.get(CONFIGURATION_BACKUP_PATH), DIR_MAX_DEPTH)) {\n+            return walk.map(Path::toString)\n+                    .filter(f -> f.endsWith(BACKUP_FILE_EXTENSION))\n+                    .map(this::getFile).collect(Collectors.toList());\n+        } catch (IOException ioe) {\n+            log.error(\"can't read backup files from configuration path (\" + CONFIGURATION_BACKUP_PATH + \")\");\n+            throw new RuntimeException(ioe);\n+        }\n+    }\n+\n+    /**\n+     * Get the creation date/time of a backup file\n+     * @param filename\n+     * @return\n+     */\n+    public Date getCreatedAt(String filename) {\n+        Path path = getFilePath(filename);\n+        try {\n+            FileTime creationTime = (FileTime) Files.getAttribute(path, \"creationTime\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d621c471ec94fd55beb195b218dd19f3afe5917c"}, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDQ2NDQyNg==", "bodyText": "Usually generic advice is that these should use File.separator instead of \"/\". There is some limited use of File.separator in the codebase already.\nDefaultFilepaths.CONF_BACKUP_PATH uses hard coded \"/\" but maybe there is some tiny change that someone will run this with overridden CONF_BACKUP_PATH on a system with different file separator.\nI don't see how File.separator would break otherwise working configuration, so there should not be too much of a downside for changing. But this is not a super important detail. It's more of a style issue.", "url": "https://github.com/nordic-institute/X-Road/pull/385#discussion_r384464426", "createdAt": "2020-02-26T12:36:30Z", "author": {"login": "jansu76"}, "path": "src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/repository/BackupsRepository.java", "diffHunk": "@@ -0,0 +1,130 @@\n+/**\n+ * The MIT License\n+ * Copyright (c) 2018 Estonian Information System Authority (RIA),\n+ * Nordic Institute for Interoperability Solutions (NIIS), Population Register Centre (VRK)\n+ * Copyright (c) 2015-2017 Estonian Information System Authority (RIA), Population Register Centre (VRK)\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package org.niis.xroad.restapi.repository;\n+\n+import ee.ria.xroad.common.SystemProperties;\n+\n+import lombok.extern.slf4j.Slf4j;\n+import org.springframework.stereotype.Repository;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.nio.file.attribute.FileTime;\n+import java.util.Date;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+/**\n+ * Backups repository\n+ */\n+@Slf4j\n+@Repository\n+public class BackupsRepository {\n+\n+    private static final String CONFIGURATION_BACKUP_PATH = SystemProperties.getConfBackupPath();\n+    private static final String BACKUP_FILE_EXTENSION = \".tar\";\n+    // Set maximum number of levels of directories to visit, subdirectories are excluded\n+    private static final int DIR_MAX_DEPTH = 1;\n+\n+    /**\n+     * Read backup files from configuration backup path\n+     * @return\n+     */\n+    public List<File> getBackupFiles() {\n+        try (Stream<Path> walk = Files.walk(Paths.get(CONFIGURATION_BACKUP_PATH), DIR_MAX_DEPTH)) {\n+            return walk.map(Path::toString)\n+                    .filter(f -> f.endsWith(BACKUP_FILE_EXTENSION))\n+                    .map(this::getFile).collect(Collectors.toList());\n+        } catch (IOException ioe) {\n+            log.error(\"can't read backup files from configuration path (\" + CONFIGURATION_BACKUP_PATH + \")\");\n+            throw new RuntimeException(ioe);\n+        }\n+    }\n+\n+    /**\n+     * Get the creation date/time of a backup file\n+     * @param filename\n+     * @return\n+     */\n+    public Date getCreatedAt(String filename) {\n+        Path path = getFilePath(filename);\n+        try {\n+            FileTime creationTime = (FileTime) Files.getAttribute(path, \"creationTime\");\n+            return new Date(creationTime.toMillis());\n+        } catch (IOException ioe) {\n+            log.error(\"can't read backup file's creation time (\" + path.toString() + \")\");\n+            throw new RuntimeException(ioe);\n+        }\n+    }\n+\n+    /**\n+     * Delete a backup file\n+     * @param filename\n+     */\n+    public void deleteBackupFile(String filename) {\n+        Path path = getFilePath(filename);\n+        try {\n+            Files.deleteIfExists(path);\n+        } catch (IOException ioe) {\n+            log.error(\"can't delete backup file (\" + path.toString() + \")\");\n+            throw new RuntimeException(\"deleting backup file failed\");\n+        }\n+    }\n+\n+    /**\n+     * Read backup file's content\n+     * @param filename\n+     * @return\n+     */\n+    public byte[] readBackupFile(String filename) {\n+        Path path = getFilePath(filename);\n+        try {\n+            return Files.readAllBytes(path);\n+        } catch (IOException ioe) {\n+            log.error(\"can't read backup file's content (\" + path.toString() + \")\");\n+            throw new RuntimeException(ioe);\n+        }\n+    }\n+\n+    /**\n+     * Return configuration backup path with a trailing slash\n+     * @return\n+     */\n+    public String getConfigurationBackupPath() {\n+        return CONFIGURATION_BACKUP_PATH  + (CONFIGURATION_BACKUP_PATH.endsWith(\"/\") ? \"\" : \"/\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d621c471ec94fd55beb195b218dd19f3afe5917c"}, "originalPosition": 120}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDQ3MzY4MQ==", "bodyText": "maybe more idiomatic naming is that a backupExists() method returns boolean, and method returning Optional is named e.g. getBackup()", "url": "https://github.com/nordic-institute/X-Road/pull/385#discussion_r384473681", "createdAt": "2020-02-26T12:55:22Z", "author": {"login": "jansu76"}, "path": "src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/service/BackupsService.java", "diffHunk": "@@ -0,0 +1,190 @@\n+/**\n+ * The MIT License\n+ * Copyright (c) 2018 Estonian Information System Authority (RIA),\n+ * Nordic Institute for Interoperability Solutions (NIIS), Population Register Centre (VRK)\n+ * Copyright (c) 2015-2017 Estonian Information System Authority (RIA), Population Register Centre (VRK)\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package org.niis.xroad.restapi.service;\n+\n+import ee.ria.xroad.common.identifier.SecurityServerId;\n+\n+import lombok.Setter;\n+import lombok.extern.slf4j.Slf4j;\n+import org.niis.xroad.restapi.converter.BackupsConverter;\n+import org.niis.xroad.restapi.exceptions.DeviationAwareRuntimeException;\n+import org.niis.xroad.restapi.exceptions.ErrorDeviation;\n+import org.niis.xroad.restapi.openapi.model.Backup;\n+import org.niis.xroad.restapi.repository.BackupsRepository;\n+import org.niis.xroad.restapi.util.FormatUtils;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.security.access.prepost.PreAuthorize;\n+import org.springframework.stereotype.Service;\n+\n+import java.io.File;\n+import java.time.LocalDateTime;\n+import java.time.format.DateTimeFormatter;\n+import java.util.Arrays;\n+import java.util.Date;\n+import java.util.List;\n+import java.util.Optional;\n+\n+/**\n+ * Backups service.\n+ */\n+@Slf4j\n+@Service\n+@PreAuthorize(\"isAuthenticated()\")\n+public class BackupsService {\n+\n+    private static final String BACKUP_GENERATION_FAILED = \"backup_generation_failed\";\n+\n+    private final BackupsRepository backupsRepository;\n+    private final BackupsConverter backupsConverter;\n+    private final ServerConfService serverConfService;\n+    private final ExternalProcessRunner externalProcessRunner;\n+\n+    @Setter\n+    private String generateBackupScriptPath;\n+    private static final String BACKUP_FILENAME_DATE_TIME_FORMAT = \"yyyyMMdd-HHmmss\";\n+\n+    /**\n+     * BackupsService constructor\n+     * @param backupsRepository\n+     */\n+    @Autowired\n+    public BackupsService(BackupsRepository backupsRepository, BackupsConverter backupsConverter,\n+                          ServerConfService serverConfService, ExternalProcessRunner externalProcessRunner,\n+                          @Value(\"${script.generate-backup.path}\") String generateBackupScriptPath) {\n+        this.backupsRepository = backupsRepository;\n+        this.backupsConverter = backupsConverter;\n+        this.serverConfService = serverConfService;\n+        this.externalProcessRunner = externalProcessRunner;\n+        this.generateBackupScriptPath = generateBackupScriptPath;\n+    }\n+\n+    /**\n+     * Return a list of available backup files\n+     * @return\n+     */\n+    public List<Backup> getBackupFiles() {\n+        List<File> backupFiles = backupsRepository.getBackupFiles();\n+        List<Backup> backups = backupsConverter.convert(backupFiles);\n+        setCreatedAt(backups);\n+        return backups;\n+    }\n+\n+    /**\n+     * Delete a backup file or throws an exception if the file does not exist\n+     * @param filename\n+     * @throws BackupFileNotFoundException\n+     */\n+    public void deleteBackup(String filename) throws BackupFileNotFoundException {\n+        if (!backupExists(filename).isPresent()) {\n+            throw new BackupFileNotFoundException(getFileNotFoundExceptionMessage(filename));\n+        }\n+        backupsRepository.deleteBackupFile(filename);\n+    }\n+\n+    /**\n+     * Read backup file's content\n+     * @param filename\n+     * @return\n+     * @throws BackupFileNotFoundException\n+     */\n+    public byte[] readBackupFile(String filename) throws BackupFileNotFoundException {\n+        if (!backupExists(filename).isPresent()) {\n+            throw new BackupFileNotFoundException(getFileNotFoundExceptionMessage(filename));\n+        }\n+        return backupsRepository.readBackupFile(filename);\n+    }\n+\n+    /**\n+     * Generate a new backup file\n+     * @throws ProcessFailedException\n+     * @throws ProcessNotExecutableException\n+     * @throws InterruptedException\n+     * @return\n+     */\n+    public Backup generateBackup() throws InterruptedException, BackupFileNotFoundException {\n+        SecurityServerId securityServerId = serverConfService.getSecurityServerId();\n+        String filename = generateBackupFileName();\n+        String fullPath =  backupsRepository.getConfigurationBackupPath() + filename;\n+        String[] args = new String[] {\"-s\", securityServerId.toShortString(), \"-f\", fullPath};\n+\n+        try {\n+            log.info(\"Run configuration backup with command '\"\n+                    + generateBackupScriptPath + \" \" + Arrays.toString(args) + \"'\");\n+\n+            List<String> output = externalProcessRunner.execute(generateBackupScriptPath, args);\n+\n+            log.info(\" --- Backup script console output - START --- \");\n+            log.info(String.join(\"\\n\", output));\n+            log.info(\" --- Backup script console output - END --- \");\n+        } catch (ProcessNotExecutableException | ProcessFailedException e) {\n+            log.error(\"Failed to generate backup\", e);\n+            throw new DeviationAwareRuntimeException(e, new ErrorDeviation(BACKUP_GENERATION_FAILED));\n+        }\n+\n+        Optional<Backup> backup = backupExists(filename);\n+        if (!backup.isPresent()) {\n+            throw new BackupFileNotFoundException(getFileNotFoundExceptionMessage(filename));\n+        }\n+        return backup.get();\n+    }\n+\n+    /**\n+     * Check if a backup file with the given filename exists\n+     * @param filename\n+     * @return\n+     */\n+    private Optional<Backup> backupExists(String filename) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d621c471ec94fd55beb195b218dd19f3afe5917c"}, "originalPosition": 159}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDQ3NTUxMA==", "bodyText": "How does this work with weird / hostile filenames? Could you use e.g. path travelsals (\"../../etc/passwd\")?\nSpring firewall prevents some of these on the controller layer currently, but service should be safe anyway.", "url": "https://github.com/nordic-institute/X-Road/pull/385#discussion_r384475510", "createdAt": "2020-02-26T12:58:54Z", "author": {"login": "jansu76"}, "path": "src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/service/BackupsService.java", "diffHunk": "@@ -0,0 +1,190 @@\n+/**\n+ * The MIT License\n+ * Copyright (c) 2018 Estonian Information System Authority (RIA),\n+ * Nordic Institute for Interoperability Solutions (NIIS), Population Register Centre (VRK)\n+ * Copyright (c) 2015-2017 Estonian Information System Authority (RIA), Population Register Centre (VRK)\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package org.niis.xroad.restapi.service;\n+\n+import ee.ria.xroad.common.identifier.SecurityServerId;\n+\n+import lombok.Setter;\n+import lombok.extern.slf4j.Slf4j;\n+import org.niis.xroad.restapi.converter.BackupsConverter;\n+import org.niis.xroad.restapi.exceptions.DeviationAwareRuntimeException;\n+import org.niis.xroad.restapi.exceptions.ErrorDeviation;\n+import org.niis.xroad.restapi.openapi.model.Backup;\n+import org.niis.xroad.restapi.repository.BackupsRepository;\n+import org.niis.xroad.restapi.util.FormatUtils;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.security.access.prepost.PreAuthorize;\n+import org.springframework.stereotype.Service;\n+\n+import java.io.File;\n+import java.time.LocalDateTime;\n+import java.time.format.DateTimeFormatter;\n+import java.util.Arrays;\n+import java.util.Date;\n+import java.util.List;\n+import java.util.Optional;\n+\n+/**\n+ * Backups service.\n+ */\n+@Slf4j\n+@Service\n+@PreAuthorize(\"isAuthenticated()\")\n+public class BackupsService {\n+\n+    private static final String BACKUP_GENERATION_FAILED = \"backup_generation_failed\";\n+\n+    private final BackupsRepository backupsRepository;\n+    private final BackupsConverter backupsConverter;\n+    private final ServerConfService serverConfService;\n+    private final ExternalProcessRunner externalProcessRunner;\n+\n+    @Setter\n+    private String generateBackupScriptPath;\n+    private static final String BACKUP_FILENAME_DATE_TIME_FORMAT = \"yyyyMMdd-HHmmss\";\n+\n+    /**\n+     * BackupsService constructor\n+     * @param backupsRepository\n+     */\n+    @Autowired\n+    public BackupsService(BackupsRepository backupsRepository, BackupsConverter backupsConverter,\n+                          ServerConfService serverConfService, ExternalProcessRunner externalProcessRunner,\n+                          @Value(\"${script.generate-backup.path}\") String generateBackupScriptPath) {\n+        this.backupsRepository = backupsRepository;\n+        this.backupsConverter = backupsConverter;\n+        this.serverConfService = serverConfService;\n+        this.externalProcessRunner = externalProcessRunner;\n+        this.generateBackupScriptPath = generateBackupScriptPath;\n+    }\n+\n+    /**\n+     * Return a list of available backup files\n+     * @return\n+     */\n+    public List<Backup> getBackupFiles() {\n+        List<File> backupFiles = backupsRepository.getBackupFiles();\n+        List<Backup> backups = backupsConverter.convert(backupFiles);\n+        setCreatedAt(backups);\n+        return backups;\n+    }\n+\n+    /**\n+     * Delete a backup file or throws an exception if the file does not exist\n+     * @param filename\n+     * @throws BackupFileNotFoundException\n+     */\n+    public void deleteBackup(String filename) throws BackupFileNotFoundException {\n+        if (!backupExists(filename).isPresent()) {\n+            throw new BackupFileNotFoundException(getFileNotFoundExceptionMessage(filename));\n+        }\n+        backupsRepository.deleteBackupFile(filename);\n+    }\n+\n+    /**\n+     * Read backup file's content\n+     * @param filename\n+     * @return\n+     * @throws BackupFileNotFoundException\n+     */\n+    public byte[] readBackupFile(String filename) throws BackupFileNotFoundException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d621c471ec94fd55beb195b218dd19f3afe5917c"}, "originalPosition": 113}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "50b21f45828a0a0deec03af392b19b01ff7c67e1", "author": {"user": {"login": "petkivim", "name": "Petteri Kivim\u00e4ki"}}, "url": "https://github.com/nordic-institute/X-Road/commit/50b21f45828a0a0deec03af392b19b01ff7c67e1", "committedDate": "2020-02-26T20:16:04Z", "message": "XRDDEV-892 Updates based on review comments\n\n- Remove unused annotations from unit tests.\n- Remove unnecessary unit test resources.\n- Rename BackupsConverter to BackupConverter.\n- Move converter from service layer to API layer.\n- Add BackupFile DTO.\n- Change addBackup endpoint's success return code to created.\n- Refactor exceptions and update Javadocs.\n- Implement more strict filtering for listing backup files.\n- Other minor updates."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d9ecad98d660ac0c22c0f219d8ad46a66f3365e6", "author": {"user": {"login": "petkivim", "name": "Petteri Kivim\u00e4ki"}}, "url": "https://github.com/nordic-institute/X-Road/commit/d9ecad98d660ac0c22c0f219d8ad46a66f3365e6", "committedDate": "2020-02-27T10:31:36Z", "message": "XRDDEV-892 Fix SonarQube code smells"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8776cbb8bcabc8c1ef925d6bea6934542265651c", "author": {"user": {"login": "petkivim", "name": "Petteri Kivim\u00e4ki"}}, "url": "https://github.com/nordic-institute/X-Road/commit/8776cbb8bcabc8c1ef925d6bea6934542265651c", "committedDate": "2020-02-27T10:40:53Z", "message": "XRDDEV-892 Update comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5dd12340d326cf21fdca8b8954f7ef3fb0fd31ba", "author": {"user": {"login": "petkivim", "name": "Petteri Kivim\u00e4ki"}}, "url": "https://github.com/nordic-institute/X-Road/commit/5dd12340d326cf21fdca8b8954f7ef3fb0fd31ba", "committedDate": "2020-02-29T06:40:08Z", "message": "XRDDEV-892 Rename BackupsRepository to BackupRepository"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "609de2b9a6528e8ad0beb8a9625b9de2407ed8cc", "author": {"user": {"login": "petkivim", "name": "Petteri Kivim\u00e4ki"}}, "url": "https://github.com/nordic-institute/X-Road/commit/609de2b9a6528e8ad0beb8a9625b9de2407ed8cc", "committedDate": "2020-03-01T09:25:59Z", "message": "XRDDEV-892 Clean up backups API controller unit tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b9b741eaffe8fb5537655ece7f45820a1c82470e", "author": {"user": {"login": "petkivim", "name": "Petteri Kivim\u00e4ki"}}, "url": "https://github.com/nordic-institute/X-Road/commit/b9b741eaffe8fb5537655ece7f45820a1c82470e", "committedDate": "2020-03-01T10:29:01Z", "message": "XRDDEV-892 Rename BackupsService to BackupService"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cd227569eedbb6c828cfc1feffd064c7da293186", "author": {"user": {"login": "petkivim", "name": "Petteri Kivim\u00e4ki"}}, "url": "https://github.com/nordic-institute/X-Road/commit/cd227569eedbb6c828cfc1feffd064c7da293186", "committedDate": "2020-03-01T10:53:55Z", "message": "XRDDEV-892 Add unit tests for backup service"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7187427ed43ff2f7334fcc221c0df08a4359e57d", "author": {"user": {"login": "petkivim", "name": "Petteri Kivim\u00e4ki"}}, "url": "https://github.com/nordic-institute/X-Road/commit/7187427ed43ff2f7334fcc221c0df08a4359e57d", "committedDate": "2020-03-01T12:35:11Z", "message": "XRDDEV-892 Update backup service test"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY3Mjc0OTMx", "url": "https://github.com/nordic-institute/X-Road/pull/385#pullrequestreview-367274931", "createdAt": "2020-03-02T15:12:23Z", "commit": {"oid": "7187427ed43ff2f7334fcc221c0df08a4359e57d"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4332, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}