{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ0Nzg4NzM4", "number": 580, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQwNjoxMDo0OVrOEOHehg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQwNjo1MDozOFrOEOIHWg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzMjM4MDIyOnYy", "diffSide": "RIGHT", "path": "src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/controller/ServiceClientHelper.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQwNjoxMDo0OVrOGxFjHA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxMTozNzozN1rOGxP2hA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDEyNDMxNg==", "bodyText": "Instead of this concrete list-sorting method (and ClientUtils.sortClientsList) a Comparator implementing the comparison logic would be more reusable (can sort arrays, sorted sets etc), and maybe even a bit cleaner design. Both Comparators could then be in same package (probably org.niis.xroad.restapi.controller or org.niis.xroad.restapi.openapi - or maybe even a new org.niis.xroad.restapi.converter.comparator to signal this is part of the \"converting\" domain...) and so be more consistent with each other and \"discoverable\".\nFor the actual implementation, there's also alternatives https://stackoverflow.com/a/20093642/1469083 such as\n\nusing Comparator.comparing+thenComparing+nullsFirst builders (end result may be cleaner or messier)\nusing Guava or Apache commons helpers\n\nAlthough the actual implementation is pretty simple so I don't know if alternative ways are worth it.", "url": "https://github.com/nordic-institute/X-Road/pull/580#discussion_r454124316", "createdAt": "2020-07-14T06:10:49Z", "author": {"login": "jansu76"}, "path": "src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/controller/ServiceClientHelper.java", "diffHunk": "@@ -104,4 +105,27 @@ public BadRequestException wrapInBadRequestException(\n         return new BadRequestException(INVALID_SERVICE_CLIENT_ID + e.getServiceClientIdentifier(),\n                 new ErrorDeviation(ERROR_INVALID_SERVICE_CLIENT_ID));\n     }\n+\n+    /**\n+     * Sort a list of ServiceClient objects using member name / group description as the primary sort key, and client id\n+     * as the secondary sort key.\n+     * @param clients\n+     */\n+    public void sortServiceClientsList(List<ServiceClient> clients) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "80e9faadf8eaec101f6daa6a10d552ab0ff934f4"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDI5MzEyNA==", "bodyText": "Created a new package org.niis.xroad.restapi.converter.comparator and added both comparators implementing the Comparator interface under it. In this way they are more discoverable. However, the implementation was left as it was before.", "url": "https://github.com/nordic-institute/X-Road/pull/580#discussion_r454293124", "createdAt": "2020-07-14T11:37:37Z", "author": {"login": "petkivim"}, "path": "src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/controller/ServiceClientHelper.java", "diffHunk": "@@ -104,4 +105,27 @@ public BadRequestException wrapInBadRequestException(\n         return new BadRequestException(INVALID_SERVICE_CLIENT_ID + e.getServiceClientIdentifier(),\n                 new ErrorDeviation(ERROR_INVALID_SERVICE_CLIENT_ID));\n     }\n+\n+    /**\n+     * Sort a list of ServiceClient objects using member name / group description as the primary sort key, and client id\n+     * as the secondary sort key.\n+     * @param clients\n+     */\n+    public void sortServiceClientsList(List<ServiceClient> clients) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDEyNDMxNg=="}, "originalCommit": {"oid": "80e9faadf8eaec101f6daa6a10d552ab0ff934f4"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzMjM5NjEwOnYy", "diffSide": "RIGHT", "path": "src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/controller/ServiceClientHelper.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQwNjoxNzowNVrOGxFseA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxMTozOToxM1rOGxP5sw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDEyNjcxMg==", "bodyText": "I would add some tests to verify just the ordering (without any controllers, services, etc) and the logic for different null / not null cases etc.\nIn fact, I would usually start with the test and then write the implementation, I find that the easiest way to reach correct result in details like \"should null here be +1 or -1...?\". Especially since the test should be easy to implement (building a few ServiceClient objects with wanted name & id fields, and the test could be a pure (fast) unit test for Comparators without any Spring constructs).", "url": "https://github.com/nordic-institute/X-Road/pull/580#discussion_r454126712", "createdAt": "2020-07-14T06:17:05Z", "author": {"login": "jansu76"}, "path": "src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/controller/ServiceClientHelper.java", "diffHunk": "@@ -104,4 +105,27 @@ public BadRequestException wrapInBadRequestException(\n         return new BadRequestException(INVALID_SERVICE_CLIENT_ID + e.getServiceClientIdentifier(),\n                 new ErrorDeviation(ERROR_INVALID_SERVICE_CLIENT_ID));\n     }\n+\n+    /**\n+     * Sort a list of ServiceClient objects using member name / group description as the primary sort key, and client id\n+     * as the secondary sort key.\n+     * @param clients\n+     */\n+    public void sortServiceClientsList(List<ServiceClient> clients) {\n+        clients.sort((c1, c2) -> {\n+                if (c1.getName() == null && c2.getName() == null) {\n+                    return c1.getId().compareToIgnoreCase(c2.getId());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "80e9faadf8eaec101f6daa6a10d552ab0ff934f4"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDI5MzkzOQ==", "bodyText": "Added tests for both comparators that verify the comparison logic.", "url": "https://github.com/nordic-institute/X-Road/pull/580#discussion_r454293939", "createdAt": "2020-07-14T11:39:13Z", "author": {"login": "petkivim"}, "path": "src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/controller/ServiceClientHelper.java", "diffHunk": "@@ -104,4 +105,27 @@ public BadRequestException wrapInBadRequestException(\n         return new BadRequestException(INVALID_SERVICE_CLIENT_ID + e.getServiceClientIdentifier(),\n                 new ErrorDeviation(ERROR_INVALID_SERVICE_CLIENT_ID));\n     }\n+\n+    /**\n+     * Sort a list of ServiceClient objects using member name / group description as the primary sort key, and client id\n+     * as the secondary sort key.\n+     * @param clients\n+     */\n+    public void sortServiceClientsList(List<ServiceClient> clients) {\n+        clients.sort((c1, c2) -> {\n+                if (c1.getName() == null && c2.getName() == null) {\n+                    return c1.getId().compareToIgnoreCase(c2.getId());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDEyNjcxMg=="}, "originalCommit": {"oid": "80e9faadf8eaec101f6daa6a10d552ab0ff934f4"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzMjQzODQyOnYy", "diffSide": "RIGHT", "path": "src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/controller/ServiceClientHelper.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQwNjozNDowNFrOGxGGRQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQwNjozNDowNFrOGxGGRQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDEzMzMxNw==", "bodyText": "I am happy to see that sorting is a separate feature, and not e.g. included in ServiceClientConverter.convertServiceClientDtos. I think it keeps the role of converters more clear and retains the possibility of only converting without changing the order.", "url": "https://github.com/nordic-institute/X-Road/pull/580#discussion_r454133317", "createdAt": "2020-07-14T06:34:04Z", "author": {"login": "jansu76"}, "path": "src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/controller/ServiceClientHelper.java", "diffHunk": "@@ -104,4 +105,27 @@ public BadRequestException wrapInBadRequestException(\n         return new BadRequestException(INVALID_SERVICE_CLIENT_ID + e.getServiceClientIdentifier(),\n                 new ErrorDeviation(ERROR_INVALID_SERVICE_CLIENT_ID));\n     }\n+\n+    /**\n+     * Sort a list of ServiceClient objects using member name / group description as the primary sort key, and client id\n+     * as the secondary sort key.\n+     * @param clients\n+     */\n+    public void sortServiceClientsList(List<ServiceClient> clients) {\n+        clients.sort((c1, c2) -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "80e9faadf8eaec101f6daa6a10d552ab0ff934f4"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzMjQ4NDc0OnYy", "diffSide": "RIGHT", "path": "src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/openapi/EndpointsApiController.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQwNjo1MDozOFrOGxGh1w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxMTo0MDo0NVrOGxP85Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDE0MDM3NQ==", "bodyText": "There are some APIs that return unsorted service client collections:\n\nEndpointsApiController.addEndpointServiceClients (response from adding a new service client to an endpoint)\nServicesApiController.addServiceServiceClients (same for a service)\n\nThat's probably OK, although could consider adding the sort to them also, for consistency.", "url": "https://github.com/nordic-institute/X-Road/pull/580#discussion_r454140375", "createdAt": "2020-07-14T06:50:38Z", "author": {"login": "jansu76"}, "path": "src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/openapi/EndpointsApiController.java", "diffHunk": "@@ -156,6 +156,7 @@ public EndpointsApiController(\n         }\n         List<ServiceClient> serviceClients = serviceClientConverter", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "80e9faadf8eaec101f6daa6a10d552ab0ff934f4"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDI5NDc1Nw==", "bodyText": "Thanks, I added sorting to those endpoints too. I think it's good to try to keep the ordering consistent between different endpoints.", "url": "https://github.com/nordic-institute/X-Road/pull/580#discussion_r454294757", "createdAt": "2020-07-14T11:40:45Z", "author": {"login": "petkivim"}, "path": "src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/openapi/EndpointsApiController.java", "diffHunk": "@@ -156,6 +156,7 @@ public EndpointsApiController(\n         }\n         List<ServiceClient> serviceClients = serviceClientConverter", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDE0MDM3NQ=="}, "originalCommit": {"oid": "80e9faadf8eaec101f6daa6a10d552ab0ff934f4"}, "originalPosition": 2}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2742, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}