{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg2MDcyOTEz", "number": 408, "title": "XRDDEV-803", "bodyText": "APIs for getting, adding and removing access rights to endpoint\nUI for adding access rights to endpoint\nRefactoring to access rights backend implementations for better code reuse", "createdAt": "2020-03-10T11:15:08Z", "url": "https://github.com/nordic-institute/X-Road/pull/408", "merged": true, "mergeCommit": {"oid": "b8636623502b9a15b433ae078a5bdf514cc985cf"}, "closed": true, "closedAt": "2020-04-07T14:56:28Z", "author": {"login": "TJaakkola"}, "timelineItems": {"totalCount": 34, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcJuLmLAH2gAyMzg2MDcyOTEzOjkzYmU2YTJlMzYxMjAyZjBjNzEwODVlYjBiNWQ3MDY2NThmZGIyOTM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcVTzepgH2gAyMzg2MDcyOTEzOmJkYWUwN2RmM2QwNzc0MDA1MDQ4YTVjMjE1NDBmNmY3YWVhNDQ3OWM=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "93be6a2e361202f0c71085eb0b5d706658fdb293", "author": {"user": {"login": "TJaakkola", "name": "Tapio Jaakkola"}}, "url": "https://github.com/nordic-institute/X-Road/commit/93be6a2e361202f0c71085eb0b5d706658fdb293", "committedDate": "2020-03-02T13:59:42Z", "message": "XRDDEV-803: Added api for fetching accessrights for an endpoint and UI for viewing them"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "07c213e90041e9e651016fcf169d61f9485424aa", "author": {"user": {"login": "TJaakkola", "name": "Tapio Jaakkola"}}, "url": "https://github.com/nordic-institute/X-Road/commit/07c213e90041e9e651016fcf169d61f9485424aa", "committedDate": "2020-03-03T14:42:40Z", "message": "XRDDEV-803: Add backend api and ui changes for removing access rights"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "35078da7363867c7c6f16e6b8ae039d75cda9be0", "author": {"user": {"login": "TJaakkola", "name": "Tapio Jaakkola"}}, "url": "https://github.com/nordic-institute/X-Road/commit/35078da7363867c7c6f16e6b8ae039d75cda9be0", "committedDate": "2020-03-04T13:18:34Z", "message": "XRDDEV-803: Add backend api and UI for adding subjects to an endpoint"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a1bad6ef9b86f81e452dc1104bd2b034fa6386f2", "author": {"user": {"login": "TJaakkola", "name": "Tapio Jaakkola"}}, "url": "https://github.com/nordic-institute/X-Road/commit/a1bad6ef9b86f81e452dc1104bd2b034fa6386f2", "committedDate": "2020-03-05T14:54:27Z", "message": "XRDDEV-803: Change base path for service description of type REST to be generated = true by default"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4fde80f3ed77feaee0b6c0f6f59400b9a1f8b478", "author": {"user": {"login": "TJaakkola", "name": "Tapio Jaakkola"}}, "url": "https://github.com/nordic-institute/X-Road/commit/4fde80f3ed77feaee0b6c0f6f59400b9a1f8b478", "committedDate": "2020-03-10T08:31:10Z", "message": "XRDDEV-803: Add tests, fixes to api and UI improvements to adding access rights for an endpoint"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "eb22d69b746006bcefd33bd0d051e1de003554c7", "author": {"user": {"login": "TJaakkola", "name": "Tapio Jaakkola"}}, "url": "https://github.com/nordic-institute/X-Road/commit/eb22d69b746006bcefd33bd0d051e1de003554c7", "committedDate": "2020-03-10T11:10:20Z", "message": "Refactoring access rights backend implementations to reuse code and minor fixes to UI"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b69523a0c120a501f08783213332fa79bd838e1b", "author": {"user": {"login": "TJaakkola", "name": "Tapio Jaakkola"}}, "url": "https://github.com/nordic-institute/X-Road/commit/b69523a0c120a501f08783213332fa79bd838e1b", "committedDate": "2020-03-10T11:24:03Z", "message": "Merge branch 'develop' into XRDDEV-803"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ce5bedf56206aae88f7d96f2865c070d2c3bba11", "author": {"user": {"login": "TJaakkola", "name": "Tapio Jaakkola"}}, "url": "https://github.com/nordic-institute/X-Road/commit/ce5bedf56206aae88f7d96f2865c070d2c3bba11", "committedDate": "2020-03-10T12:57:30Z", "message": "XRDDEV-803: Use constant instead of repeating string to fix sonarqube issue"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcxOTUwMjk4", "url": "https://github.com/nordic-institute/X-Road/pull/408#pullrequestreview-371950298", "createdAt": "2020-03-10T13:30:17Z", "commit": {"oid": "ce5bedf56206aae88f7d96f2865c070d2c3bba11"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 17, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxMzozMDoxN1rOF0Ox-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxMzozMDo1MlrOF6wQ6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDMxMjQ0Mw==", "bodyText": "What concept does the category \"access\" specifically refer to? Could we find a better name for it? I find references elsewhere, such as access.memberName or access.accessRights slightly unclear. As in \"access, whaat, whose access, and to where?\"", "url": "https://github.com/nordic-institute/X-Road/pull/408#discussion_r390312443", "createdAt": "2020-03-10T13:30:17Z", "author": {"login": "jansu76"}, "path": "src/proxy-ui-api/frontend/src/locales/en.json", "diffHunk": "@@ -188,7 +188,15 @@\n   \"access\": {\n     \"accessRights\": \"Access Rights\",\n     \"addSubjects\": \"Add subjects\",\n-    \"addSubjectsTitle\": \"Add Subjects\"\n+    \"addSubjectsTitle\": \"Add Subjects\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ce5bedf56206aae88f7d96f2865c070d2c3bba11"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjkzMTM4Mg==", "bodyText": "Hmm, is this some mistake, or are there some changes to the license header? This is different from other files.", "url": "https://github.com/nordic-institute/X-Road/pull/408#discussion_r396931382", "createdAt": "2020-03-24T06:46:30Z", "author": {"login": "jansu76"}, "path": "src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/openapi/EndpointsApiController.java", "diffHunk": "@@ -3,17 +3,17 @@\n  * Copyright (c) 2018 Estonian Information System Authority (RIA),\n  * Nordic Institute for Interoperability Solutions (NIIS), Population Register Centre (VRK)\n  * Copyright (c) 2015-2017 Estonian Information System Authority (RIA), Population Register Centre (VRK)\n- *\n+ * <p>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ce5bedf56206aae88f7d96f2865c070d2c3bba11"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzA2NjQ1Mg==", "bodyText": "I found this comment a bit confusing.\nThe client-provided Subjects only contain id and subjectType when adding or deleting access rights. - maybe remove when adding or deleting access rights, it made me think that client-provided Subjects sometimes do contain other properties. They don't AFAIK?\nOr maybe just say \"service layer does not identify local groups by XroadIds\" or something.", "url": "https://github.com/nordic-institute/X-Road/pull/408#discussion_r397066452", "createdAt": "2020-03-24T11:00:23Z", "author": {"login": "jansu76"}, "path": "src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/openapi/EndpointsApiController.java", "diffHunk": "@@ -97,12 +126,99 @@ public EndpointsApiController(\n         try {\n             ep = endpointConverter.convert(endpointService.updateEndpoint(endpointId, endpoint));\n         } catch (EndpointService.EndpointNotFoundException e) {\n-            throw new ResourceNotFoundException(NOT_FOUND_ERROR_MSG + \" \" + id);\n+            throw new ResourceNotFoundException(e);\n         } catch (EndpointService.IllegalGeneratedEndpointUpdateException e) {\n             throw new BadRequestException(\"Updating is not allowed for generated endpoint \" + id);\n         }\n \n         return new ResponseEntity<>(ep, HttpStatus.OK);\n     }\n \n+    @Override\n+    @PreAuthorize(\"hasAuthority('VIEW_ENDPOINT_ACL')\")\n+    public ResponseEntity<List<ServiceClient>> getEndpointAccessRights(String id) {\n+        Long endpointId = parseLongIdOrThrowNotFound(id);\n+        List<AccessRightHolderDto> accessRightHoldersByEndpoint;\n+        try {\n+            accessRightHoldersByEndpoint = accessRightService.getAccessRightHoldersByEndpoint(endpointId);\n+        } catch (EndpointService.EndpointNotFoundException e) {\n+            throw new ResourceNotFoundException(NOT_FOUND_ERROR_MSG + \" \" + id);\n+        } catch (ClientNotFoundException e) {\n+            throw new ConflictException(e);\n+        }\n+        List<ServiceClient> serviceClients = serviceClientConverter\n+                .convertAccessRightHolderDtos(accessRightHoldersByEndpoint);\n+        return new ResponseEntity<>(serviceClients, HttpStatus.OK);\n+    }\n+\n+    @Override\n+    @PreAuthorize(\"hasAuthority('EDIT_ENDPOINT_ACL')\")\n+    public ResponseEntity<List<ServiceClient>> addEndpointAccessRights(String id, Subjects subjects) {\n+        Long endpointId = parseLongIdOrThrowNotFound(id);\n+        Set<Long> localGroupIds = getLocalGroupIds(subjects);\n+        List<XRoadId> xRoadIds = getXRoadIdsButSkipLocalGroups(subjects);\n+        List<AccessRightHolderDto> accessRightHoldersByEndpoint = null;\n+\n+        try {\n+            accessRightHoldersByEndpoint = accessRightService.addEndpointAccessRights(endpointId,\n+                    new HashSet<>(xRoadIds), localGroupIds);\n+        } catch (EndpointService.EndpointNotFoundException e) {\n+            throw new ResourceNotFoundException(e);\n+        } catch (ClientNotFoundException | AccessRightService.DuplicateAccessRightException  e) {\n+            throw new ConflictException(e);\n+        } catch (IdentifierNotFoundException | LocalGroupNotFoundException e) {\n+            throw new BadRequestException(e);\n+        }\n+\n+        List<ServiceClient> serviceClients = serviceClientConverter\n+                .convertAccessRightHolderDtos(accessRightHoldersByEndpoint);\n+        return new ResponseEntity<>(serviceClients, HttpStatus.CREATED);\n+    }\n+\n+    @Override\n+    @PreAuthorize(\"hasAuthority('EDIT_ENDPOINT_ACL')\")\n+    public ResponseEntity<Void> deleteEndpointAccessRights(String id, Subjects subjects) {\n+        Long endpointId = parseLongIdOrThrowNotFound(id);\n+        Set<Long> localGroupIds = getLocalGroupIds(subjects);\n+        HashSet<XRoadId> xRoadIds = new HashSet<>(getXRoadIdsButSkipLocalGroups(subjects));\n+        try {\n+            accessRightService.deleteEndpointAccessRights(endpointId, xRoadIds, localGroupIds);\n+        } catch (LocalGroupNotFoundException e) {\n+            throw new BadRequestException(e);\n+        } catch (EndpointService.EndpointNotFoundException | AccessRightService.AccessRightNotFoundException e) {\n+            throw new ResourceNotFoundException(e);\n+        } catch (ClientNotFoundException e) {\n+            throw new ConflictException(e);\n+        }\n+\n+        return new ResponseEntity<>(HttpStatus.NO_CONTENT);\n+    }\n+\n+    private List<XRoadId> getXRoadIdsButSkipLocalGroups(Subjects subjects) {\n+        // SubjectConverter cannot resolve the correct XRoadId from LocalGroup subject's numeric id\n+        subjects.getItems().removeIf(hasNumericIdAndIsLocalGroup);\n+        return subjectConverter.convertId(subjects.getItems());\n+    }\n+\n+    private Set<Long> getLocalGroupIds(Subjects subjects) {\n+        return subjects.getItems()\n+                .stream()\n+                .filter(hasNumericIdAndIsLocalGroup)\n+                .map(subject -> Long.parseLong(subject.getId()))\n+                .collect(Collectors.toSet());\n+    }\n+\n+    /**\n+     * The client-provided Subjects only contain id and subjectType when adding or deleting access rights.\n+     * The id of a LocalGroup is numeric so SubjectConverter cannot resolve the correct XRoadId from it.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ce5bedf56206aae88f7d96f2865c070d2c3bba11"}, "originalPosition": 184}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzA2OTUwMw==", "bodyText": "Idea marks this as duplicate code, looks like it repeats in 5 places. Maybe refactor into a helper method.", "url": "https://github.com/nordic-institute/X-Road/pull/408#discussion_r397069503", "createdAt": "2020-03-24T11:06:00Z", "author": {"login": "jansu76"}, "path": "src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/service/AccessRightService.java", "diffHunk": "@@ -120,25 +104,63 @@ private AccessRightHolderDto accessRightTypeToDto(AccessRightType accessRightTyp\n      * @return\n      * @throws ClientNotFoundException if client with given id was not found\n      * @throws ServiceNotFoundException if service with given fullServicecode was not found\n+     * @throws EndpointNotFoundByServiceNameException if base endpoint for this service is not found from the client\n      */\n     public List<AccessRightHolderDto> getAccessRightHoldersByService(ClientId clientId, String fullServiceCode)\n-            throws ClientNotFoundException, ServiceNotFoundException {\n+            throws ClientNotFoundException, ServiceNotFoundException, EndpointNotFoundByServiceNameException {\n         ClientType clientType = clientRepository.getClient(clientId);\n         if (clientType == null) {\n             throw new ClientNotFoundException(\"Client \" + clientId.toShortString() + \" not found\");\n         }\n \n         ServiceType serviceType = serviceService.getServiceFromClient(clientType, fullServiceCode);\n+        EndpointType endpointType = getEndpoint(clientType, serviceType, EndpointType.ANY_METHOD, EndpointType.ANY_PATH)\n+                .orElseThrow(() -> new EndpointNotFoundByServiceNameException(fullServiceCode));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ce5bedf56206aae88f7d96f2865c070d2c3bba11"}, "originalPosition": 108}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzA3MjkxNw==", "bodyText": "Do we need to separate between this and EndpointService.EndpointNotFoundException? Maybe one exception type would be enough (it is also possible to have a default error code and a way to override the default, e.g. default code being endpoint_not_found and then overriding it with value endpoint_not_found_by_service_name)\nEndpointService.EndpointNotFoundException should probably be top-level but making the proper comment about it elsewhere.", "url": "https://github.com/nordic-institute/X-Road/pull/408#discussion_r397072917", "createdAt": "2020-03-24T11:12:09Z", "author": {"login": "jansu76"}, "path": "src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/service/AccessRightService.java", "diffHunk": "@@ -377,11 +506,11 @@ public void deleteSoapServiceAccessRights(ClientId clientId, String fullServiceC\n     /**\n      * If endpoint was not found\n      */\n-    public static class EndpointNotFoundException extends NotFoundException {\n+    public static class EndpointNotFoundByServiceNameException extends NotFoundException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ce5bedf56206aae88f7d96f2865c070d2c3bba11"}, "originalPosition": 529}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzA3MzgxOA==", "bodyText": "This should probably be an independent class (not an inner class) since it is also thrown from AccessRightService", "url": "https://github.com/nordic-institute/X-Road/pull/408#discussion_r397073818", "createdAt": "2020-03-24T11:13:44Z", "author": {"login": "jansu76"}, "path": "src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/service/EndpointService.java", "diffHunk": "@@ -160,4 +151,12 @@ public IllegalGeneratedEndpointRemoveException(String id) {\n         }\n     }\n \n+    public static class EndpointNotFoundException extends NotFoundException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ce5bedf56206aae88f7d96f2865c070d2c3bba11"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzA3NDUzMQ==", "bodyText": "Same <p> thing is also in some other files, not commenting those", "url": "https://github.com/nordic-institute/X-Road/pull/408#discussion_r397074531", "createdAt": "2020-03-24T11:15:06Z", "author": {"login": "jansu76"}, "path": "src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/openapi/EndpointsApiController.java", "diffHunk": "@@ -3,17 +3,17 @@\n  * Copyright (c) 2018 Estonian Information System Authority (RIA),\n  * Nordic Institute for Interoperability Solutions (NIIS), Population Register Centre (VRK)\n  * Copyright (c) 2015-2017 Estonian Information System Authority (RIA), Population Register Centre (VRK)\n- *\n+ * <p>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjkzMTM4Mg=="}, "originalCommit": {"oid": "ce5bedf56206aae88f7d96f2865c070d2c3bba11"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzA3NzAyNw==", "bodyText": "I would love to see a wrapper / helper method getBaseEndpoint (what is the correct term?), it would make the purpose of ANY_METHOD, ANY_PATH combination more obvious. Now those values are a bit magical (huh? why ANY_METHOD & ANY_PATH?)", "url": "https://github.com/nordic-institute/X-Road/pull/408#discussion_r397077027", "createdAt": "2020-03-24T11:19:44Z", "author": {"login": "jansu76"}, "path": "src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/service/AccessRightService.java", "diffHunk": "@@ -120,25 +104,63 @@ private AccessRightHolderDto accessRightTypeToDto(AccessRightType accessRightTyp\n      * @return\n      * @throws ClientNotFoundException if client with given id was not found\n      * @throws ServiceNotFoundException if service with given fullServicecode was not found\n+     * @throws EndpointNotFoundByServiceNameException if base endpoint for this service is not found from the client\n      */\n     public List<AccessRightHolderDto> getAccessRightHoldersByService(ClientId clientId, String fullServiceCode)\n-            throws ClientNotFoundException, ServiceNotFoundException {\n+            throws ClientNotFoundException, ServiceNotFoundException, EndpointNotFoundByServiceNameException {\n         ClientType clientType = clientRepository.getClient(clientId);\n         if (clientType == null) {\n             throw new ClientNotFoundException(\"Client \" + clientId.toShortString() + \" not found\");\n         }\n \n         ServiceType serviceType = serviceService.getServiceFromClient(clientType, fullServiceCode);\n+        EndpointType endpointType = getEndpoint(clientType, serviceType, EndpointType.ANY_METHOD, EndpointType.ANY_PATH)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ce5bedf56206aae88f7d96f2865c070d2c3bba11"}, "originalPosition": 107}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzA3ODUyOA==", "bodyText": "is this check unnecessary? (and if not it should 1. be in controller, and if that would not work, 2. annotating method would be better unless some conditional programmatic check is needed)", "url": "https://github.com/nordic-institute/X-Road/pull/408#discussion_r397078528", "createdAt": "2020-03-24T11:22:18Z", "author": {"login": "jansu76"}, "path": "src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/service/AccessRightService.java", "diffHunk": "@@ -120,25 +104,63 @@ private AccessRightHolderDto accessRightTypeToDto(AccessRightType accessRightTyp\n      * @return\n      * @throws ClientNotFoundException if client with given id was not found\n      * @throws ServiceNotFoundException if service with given fullServicecode was not found\n+     * @throws EndpointNotFoundByServiceNameException if base endpoint for this service is not found from the client\n      */\n     public List<AccessRightHolderDto> getAccessRightHoldersByService(ClientId clientId, String fullServiceCode)\n-            throws ClientNotFoundException, ServiceNotFoundException {\n+            throws ClientNotFoundException, ServiceNotFoundException, EndpointNotFoundByServiceNameException {\n         ClientType clientType = clientRepository.getClient(clientId);\n         if (clientType == null) {\n             throw new ClientNotFoundException(\"Client \" + clientId.toShortString() + \" not found\");\n         }\n \n         ServiceType serviceType = serviceService.getServiceFromClient(clientType, fullServiceCode);\n+        EndpointType endpointType = getEndpoint(clientType, serviceType, EndpointType.ANY_METHOD, EndpointType.ANY_PATH)\n+                .orElseThrow(() -> new EndpointNotFoundByServiceNameException(fullServiceCode));\n+        return getAccessRightsHoldersByEndpoint(clientType, endpointType);\n+    }\n \n-        List<AccessRightHolderDto> accessRightHolderDtos = new ArrayList<>();\n+    /**\n+     * Get access right holders for Endpoint\n+     *\n+     * @param id\n+     * @return\n+     * @throws EndpointService.EndpointNotFoundException    if no endpoint is found with given id\n+     * @throws ClientNotFoundException                      if client attached to endpoint is not found\n+     */\n+    public List<AccessRightHolderDto> getAccessRightHoldersByEndpoint(Long id)\n+            throws EndpointService.EndpointNotFoundException, ClientNotFoundException {\n+        verifyAuthority(\"VIEW_ENDPOINT_ACL\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ce5bedf56206aae88f7d96f2865c070d2c3bba11"}, "originalPosition": 123}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzA4MTQzMQ==", "bodyText": "Wait a minute.....this looks a lot like getAccessRightHolderDtosForEndpoint? Is it the same?", "url": "https://github.com/nordic-institute/X-Road/pull/408#discussion_r397081431", "createdAt": "2020-03-24T11:27:27Z", "author": {"login": "jansu76"}, "path": "src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/service/AccessRightService.java", "diffHunk": "@@ -120,25 +104,63 @@ private AccessRightHolderDto accessRightTypeToDto(AccessRightType accessRightTyp\n      * @return\n      * @throws ClientNotFoundException if client with given id was not found\n      * @throws ServiceNotFoundException if service with given fullServicecode was not found\n+     * @throws EndpointNotFoundByServiceNameException if base endpoint for this service is not found from the client\n      */\n     public List<AccessRightHolderDto> getAccessRightHoldersByService(ClientId clientId, String fullServiceCode)\n-            throws ClientNotFoundException, ServiceNotFoundException {\n+            throws ClientNotFoundException, ServiceNotFoundException, EndpointNotFoundByServiceNameException {\n         ClientType clientType = clientRepository.getClient(clientId);\n         if (clientType == null) {\n             throw new ClientNotFoundException(\"Client \" + clientId.toShortString() + \" not found\");\n         }\n \n         ServiceType serviceType = serviceService.getServiceFromClient(clientType, fullServiceCode);\n+        EndpointType endpointType = getEndpoint(clientType, serviceType, EndpointType.ANY_METHOD, EndpointType.ANY_PATH)\n+                .orElseThrow(() -> new EndpointNotFoundByServiceNameException(fullServiceCode));\n+        return getAccessRightsHoldersByEndpoint(clientType, endpointType);\n+    }\n \n-        List<AccessRightHolderDto> accessRightHolderDtos = new ArrayList<>();\n+    /**\n+     * Get access right holders for Endpoint\n+     *\n+     * @param id\n+     * @return\n+     * @throws EndpointService.EndpointNotFoundException    if no endpoint is found with given id\n+     * @throws ClientNotFoundException                      if client attached to endpoint is not found\n+     */\n+    public List<AccessRightHolderDto> getAccessRightHoldersByEndpoint(Long id)\n+            throws EndpointService.EndpointNotFoundException, ClientNotFoundException {\n+        verifyAuthority(\"VIEW_ENDPOINT_ACL\");\n \n-        Map<String, LocalGroupType> localGroupMap = new HashMap<>();\n+        ClientType clientType = clientRepository.getClientByEndpointId(id);\n+        if (clientType == null) {\n+            throw new ClientNotFoundException(CLIENT_NOT_FOUND_FOR_ENDPOINT_WITH_ID + id.toString());\n+        }\n+\n+        EndpointType endpointType = endpointRepository.getEndpoint(id);\n+        if (endpointType == null) {\n+            throw new EndpointService.EndpointNotFoundException(id.toString());\n+        }\n \n+        return getAccessRightsHoldersByEndpoint(clientType, endpointType);\n+\n+    }\n+\n+    /**\n+     * Get access rights for endpoint\n+     *\n+     * @param clientType\n+     * @param endpointType\n+     * @return\n+     */\n+    private List<AccessRightHolderDto> getAccessRightsHoldersByEndpoint(ClientType clientType,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ce5bedf56206aae88f7d96f2865c070d2c3bba11"}, "originalPosition": 147}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzA4NDc2Nw==", "bodyText": "Do we really want a separate LocalGroupNotFoundException? If I understand correctly, we get\n\nAccessRightNotFoundException if we try to remove access right granted for a global group or subsystem\nLocalGroupNotFoundException if we try to remove access right granted for a local group\n\nWhy does the caller want a separate exception for local groups, but not for global groups and subsystems? Would just AccessRightNotFoundException be enough?", "url": "https://github.com/nordic-institute/X-Road/pull/408#discussion_r397084767", "createdAt": "2020-03-24T11:33:41Z", "author": {"login": "jansu76"}, "path": "src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/service/AccessRightService.java", "diffHunk": "@@ -147,92 +169,212 @@ private AccessRightHolderDto accessRightTypeToDto(AccessRightType accessRightTyp\n         return accessRightHolderDtos;\n     }\n \n+    /**\n+     * Makes an {@link AccessRightHolderDto} out of {@link AccessRightType}\n+     * @param accessRightType The AccessRightType to convert from\n+     * @param localGroupMap A Map containing {@link LocalGroupType LocalGroupTypes} mapped by\n+     * their corresponding {@link LocalGroupType#groupCode}\n+     * @return\n+     */\n+    private AccessRightHolderDto accessRightTypeToDto(AccessRightType accessRightType,\n+                                                      Map<String, LocalGroupType> localGroupMap) {\n+        AccessRightHolderDto accessRightHolderDto = new AccessRightHolderDto();\n+        XRoadId subjectId = accessRightType.getSubjectId();\n+        accessRightHolderDto.setRightsGiven(\n+                FormatUtils.fromDateToOffsetDateTime(accessRightType.getRightsGiven()));\n+        accessRightHolderDto.setSubjectId(subjectId);\n+        if (subjectId.getObjectType() == XRoadObjectType.LOCALGROUP) {\n+            LocalGroupId localGroupId = (LocalGroupId) subjectId;\n+            LocalGroupType localGroupType = localGroupMap.get(localGroupId.getGroupCode());\n+            accessRightHolderDto.setLocalGroupId(localGroupType.getId().toString());\n+            accessRightHolderDto.setLocalGroupCode(localGroupType.getGroupCode());\n+            accessRightHolderDto.setLocalGroupDescription(localGroupType.getDescription());\n+        }\n+        return accessRightHolderDto;\n+    }\n+\n     /**\n      * Remove AccessRights from a Service\n      * @param clientId\n      * @param fullServiceCode\n      * @param subjectIds\n+     * @param localGroupIds\n+     * @throws LocalGroupNotFoundException if tried to remove local group access right\n+     * for a local group that does not exist\n+     * @throws AccessRightNotFoundException if tried to remove access rights that did not exist for the service\n      * @throws ClientNotFoundException if client with given id was not found\n      * @throws ServiceNotFoundException if service with given fullServicecode was not found\n-     * @throws AccessRightNotFoundException if attempted to delete access right that did not exist for the service\n+     * @throws EndpointNotFoundByServiceNameException if the base endpoint for the service is not found\n      */\n-    private void deleteSoapServiceAccessRights(ClientId clientId, String fullServiceCode, Set<XRoadId> subjectIds)\n-            throws ClientNotFoundException, AccessRightNotFoundException, ServiceNotFoundException {\n+    public void deleteSoapServiceAccessRights(ClientId clientId, String fullServiceCode, Set<XRoadId> subjectIds,\n+                                              Set<Long> localGroupIds) throws LocalGroupNotFoundException,\n+            ClientNotFoundException, AccessRightNotFoundException, ServiceNotFoundException,\n+            EndpointNotFoundByServiceNameException {\n         ClientType clientType = clientRepository.getClient(clientId);\n         if (clientType == null) {\n             throw new ClientNotFoundException(\"Client \" + clientId.toShortString() + \" not found\");\n         }\n \n         ServiceType serviceType = serviceService.getServiceFromClient(clientType, fullServiceCode);\n+        EndpointType endpointType = getEndpoint(clientType, serviceType, EndpointType.ANY_METHOD, EndpointType.ANY_PATH)\n+                .orElseThrow(() -> new EndpointNotFoundByServiceNameException(fullServiceCode));\n \n-        List<AccessRightType> accessRightsToBeRemoved = clientType.getAcl()\n-                .stream()\n-                .filter(accessRightType -> accessRightType.getEndpoint().getServiceCode()\n-                        .equals(serviceType.getServiceCode()) && subjectIds.contains(accessRightType.getSubjectId()))\n-                .collect(Collectors.toList());\n+        deleteEndpointAccessRights(clientType, endpointType, subjectIds, localGroupIds);\n+    }\n \n-        List<XRoadId> subjectsToBeRemoved = accessRightsToBeRemoved\n-                .stream()\n-                .map(AccessRightType::getSubjectId)\n-                .collect(Collectors.toList());\n+    /**\n+     * Remove access rights from endpoint\n+     *\n+     * @param endpointId\n+     * @param subjectIds\n+     * @param localGroupIds\n+     * @throws LocalGroupNotFoundException                  if localgroups is not found\n+     * @throws EndpointService.EndpointNotFoundException    if endpoint by given id is not found\n+     * @throws ClientNotFoundException                      if client attached to endpoint is not found\n+     * @throws AccessRightNotFoundException                 if at least one access right expected is not found\n+     */\n+    public void deleteEndpointAccessRights(Long endpointId, Set<XRoadId> subjectIds, Set<Long> localGroupIds)\n+            throws LocalGroupNotFoundException, EndpointService.EndpointNotFoundException,\n+            ClientNotFoundException, AccessRightNotFoundException {\n+        verifyAuthority(\"EDIT_ENDPOINT_ACL\");\n \n-        if (!subjectsToBeRemoved.containsAll(subjectIds)) {\n-            throw new AccessRightNotFoundException();\n+        ClientType clientType = clientRepository.getClientByEndpointId(endpointId);\n+        if (clientType == null) {\n+            throw new ClientNotFoundException(CLIENT_NOT_FOUND_FOR_ENDPOINT_WITH_ID + endpointId.toString());\n+        }\n+        EndpointType endpointType = endpointRepository.getEndpoint(endpointId);\n+        if (endpointType == null) {\n+            throw new EndpointService.EndpointNotFoundException(endpointId.toString());\n         }\n \n-        clientType.getAcl().removeAll(accessRightsToBeRemoved);\n-\n-        clientRepository.saveOrUpdate(clientType);\n+        deleteEndpointAccessRights(clientType, endpointType, subjectIds, localGroupIds);\n     }\n \n     /**\n-     * Remove AccessRights from a Service\n-     * @param clientId\n-     * @param fullServiceCode\n+     * Remove access rights from endpoint\n+     *\n+     * @param clientType\n+     * @param endpointType\n      * @param subjectIds\n      * @param localGroupIds\n-     * @throws LocalGroupNotFoundException if tried to remove local group access right\n-     * for a local group that does not exist\n-     * @throws AccessRightNotFoundException if tried to remove access rights that did not exist for the service\n-     * @throws ClientNotFoundException if client with given id was not found\n-     * @throws ServiceNotFoundException if service with given fullServicecode was not found\n+     * @throws LocalGroupNotFoundException  if localgroup is not found\n+     * @throws AccessRightNotFoundException if access right is not found", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ce5bedf56206aae88f7d96f2865c070d2c3bba11"}, "originalPosition": 278}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzA4NTk3Mg==", "bodyText": "Probably not needed?", "url": "https://github.com/nordic-institute/X-Road/pull/408#discussion_r397085972", "createdAt": "2020-03-24T11:35:53Z", "author": {"login": "jansu76"}, "path": "src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/service/AccessRightService.java", "diffHunk": "@@ -147,92 +169,212 @@ private AccessRightHolderDto accessRightTypeToDto(AccessRightType accessRightTyp\n         return accessRightHolderDtos;\n     }\n \n+    /**\n+     * Makes an {@link AccessRightHolderDto} out of {@link AccessRightType}\n+     * @param accessRightType The AccessRightType to convert from\n+     * @param localGroupMap A Map containing {@link LocalGroupType LocalGroupTypes} mapped by\n+     * their corresponding {@link LocalGroupType#groupCode}\n+     * @return\n+     */\n+    private AccessRightHolderDto accessRightTypeToDto(AccessRightType accessRightType,\n+                                                      Map<String, LocalGroupType> localGroupMap) {\n+        AccessRightHolderDto accessRightHolderDto = new AccessRightHolderDto();\n+        XRoadId subjectId = accessRightType.getSubjectId();\n+        accessRightHolderDto.setRightsGiven(\n+                FormatUtils.fromDateToOffsetDateTime(accessRightType.getRightsGiven()));\n+        accessRightHolderDto.setSubjectId(subjectId);\n+        if (subjectId.getObjectType() == XRoadObjectType.LOCALGROUP) {\n+            LocalGroupId localGroupId = (LocalGroupId) subjectId;\n+            LocalGroupType localGroupType = localGroupMap.get(localGroupId.getGroupCode());\n+            accessRightHolderDto.setLocalGroupId(localGroupType.getId().toString());\n+            accessRightHolderDto.setLocalGroupCode(localGroupType.getGroupCode());\n+            accessRightHolderDto.setLocalGroupDescription(localGroupType.getDescription());\n+        }\n+        return accessRightHolderDto;\n+    }\n+\n     /**\n      * Remove AccessRights from a Service\n      * @param clientId\n      * @param fullServiceCode\n      * @param subjectIds\n+     * @param localGroupIds\n+     * @throws LocalGroupNotFoundException if tried to remove local group access right\n+     * for a local group that does not exist\n+     * @throws AccessRightNotFoundException if tried to remove access rights that did not exist for the service\n      * @throws ClientNotFoundException if client with given id was not found\n      * @throws ServiceNotFoundException if service with given fullServicecode was not found\n-     * @throws AccessRightNotFoundException if attempted to delete access right that did not exist for the service\n+     * @throws EndpointNotFoundByServiceNameException if the base endpoint for the service is not found\n      */\n-    private void deleteSoapServiceAccessRights(ClientId clientId, String fullServiceCode, Set<XRoadId> subjectIds)\n-            throws ClientNotFoundException, AccessRightNotFoundException, ServiceNotFoundException {\n+    public void deleteSoapServiceAccessRights(ClientId clientId, String fullServiceCode, Set<XRoadId> subjectIds,\n+                                              Set<Long> localGroupIds) throws LocalGroupNotFoundException,\n+            ClientNotFoundException, AccessRightNotFoundException, ServiceNotFoundException,\n+            EndpointNotFoundByServiceNameException {\n         ClientType clientType = clientRepository.getClient(clientId);\n         if (clientType == null) {\n             throw new ClientNotFoundException(\"Client \" + clientId.toShortString() + \" not found\");\n         }\n \n         ServiceType serviceType = serviceService.getServiceFromClient(clientType, fullServiceCode);\n+        EndpointType endpointType = getEndpoint(clientType, serviceType, EndpointType.ANY_METHOD, EndpointType.ANY_PATH)\n+                .orElseThrow(() -> new EndpointNotFoundByServiceNameException(fullServiceCode));\n \n-        List<AccessRightType> accessRightsToBeRemoved = clientType.getAcl()\n-                .stream()\n-                .filter(accessRightType -> accessRightType.getEndpoint().getServiceCode()\n-                        .equals(serviceType.getServiceCode()) && subjectIds.contains(accessRightType.getSubjectId()))\n-                .collect(Collectors.toList());\n+        deleteEndpointAccessRights(clientType, endpointType, subjectIds, localGroupIds);\n+    }\n \n-        List<XRoadId> subjectsToBeRemoved = accessRightsToBeRemoved\n-                .stream()\n-                .map(AccessRightType::getSubjectId)\n-                .collect(Collectors.toList());\n+    /**\n+     * Remove access rights from endpoint\n+     *\n+     * @param endpointId\n+     * @param subjectIds\n+     * @param localGroupIds\n+     * @throws LocalGroupNotFoundException                  if localgroups is not found\n+     * @throws EndpointService.EndpointNotFoundException    if endpoint by given id is not found\n+     * @throws ClientNotFoundException                      if client attached to endpoint is not found\n+     * @throws AccessRightNotFoundException                 if at least one access right expected is not found\n+     */\n+    public void deleteEndpointAccessRights(Long endpointId, Set<XRoadId> subjectIds, Set<Long> localGroupIds)\n+            throws LocalGroupNotFoundException, EndpointService.EndpointNotFoundException,\n+            ClientNotFoundException, AccessRightNotFoundException {\n+        verifyAuthority(\"EDIT_ENDPOINT_ACL\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ce5bedf56206aae88f7d96f2865c070d2c3bba11"}, "originalPosition": 243}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzA5MDE1OA==", "bodyText": "This is probably not required. If you can, verify by testing, and remove it if it is unnecessary? There's some amount of unnecessary saveOrUpdate calls in the code, and recently we have tried to get rid of them. JPA stack should detect changes to the managed clientType and persist automatically. It is better to not have calls that do not serve any function.", "url": "https://github.com/nordic-institute/X-Road/pull/408#discussion_r397090158", "createdAt": "2020-03-24T11:44:01Z", "author": {"login": "jansu76"}, "path": "src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/service/AccessRightService.java", "diffHunk": "@@ -147,92 +169,212 @@ private AccessRightHolderDto accessRightTypeToDto(AccessRightType accessRightTyp\n         return accessRightHolderDtos;\n     }\n \n+    /**\n+     * Makes an {@link AccessRightHolderDto} out of {@link AccessRightType}\n+     * @param accessRightType The AccessRightType to convert from\n+     * @param localGroupMap A Map containing {@link LocalGroupType LocalGroupTypes} mapped by\n+     * their corresponding {@link LocalGroupType#groupCode}\n+     * @return\n+     */\n+    private AccessRightHolderDto accessRightTypeToDto(AccessRightType accessRightType,\n+                                                      Map<String, LocalGroupType> localGroupMap) {\n+        AccessRightHolderDto accessRightHolderDto = new AccessRightHolderDto();\n+        XRoadId subjectId = accessRightType.getSubjectId();\n+        accessRightHolderDto.setRightsGiven(\n+                FormatUtils.fromDateToOffsetDateTime(accessRightType.getRightsGiven()));\n+        accessRightHolderDto.setSubjectId(subjectId);\n+        if (subjectId.getObjectType() == XRoadObjectType.LOCALGROUP) {\n+            LocalGroupId localGroupId = (LocalGroupId) subjectId;\n+            LocalGroupType localGroupType = localGroupMap.get(localGroupId.getGroupCode());\n+            accessRightHolderDto.setLocalGroupId(localGroupType.getId().toString());\n+            accessRightHolderDto.setLocalGroupCode(localGroupType.getGroupCode());\n+            accessRightHolderDto.setLocalGroupDescription(localGroupType.getDescription());\n+        }\n+        return accessRightHolderDto;\n+    }\n+\n     /**\n      * Remove AccessRights from a Service\n      * @param clientId\n      * @param fullServiceCode\n      * @param subjectIds\n+     * @param localGroupIds\n+     * @throws LocalGroupNotFoundException if tried to remove local group access right\n+     * for a local group that does not exist\n+     * @throws AccessRightNotFoundException if tried to remove access rights that did not exist for the service\n      * @throws ClientNotFoundException if client with given id was not found\n      * @throws ServiceNotFoundException if service with given fullServicecode was not found\n-     * @throws AccessRightNotFoundException if attempted to delete access right that did not exist for the service\n+     * @throws EndpointNotFoundByServiceNameException if the base endpoint for the service is not found\n      */\n-    private void deleteSoapServiceAccessRights(ClientId clientId, String fullServiceCode, Set<XRoadId> subjectIds)\n-            throws ClientNotFoundException, AccessRightNotFoundException, ServiceNotFoundException {\n+    public void deleteSoapServiceAccessRights(ClientId clientId, String fullServiceCode, Set<XRoadId> subjectIds,\n+                                              Set<Long> localGroupIds) throws LocalGroupNotFoundException,\n+            ClientNotFoundException, AccessRightNotFoundException, ServiceNotFoundException,\n+            EndpointNotFoundByServiceNameException {\n         ClientType clientType = clientRepository.getClient(clientId);\n         if (clientType == null) {\n             throw new ClientNotFoundException(\"Client \" + clientId.toShortString() + \" not found\");\n         }\n \n         ServiceType serviceType = serviceService.getServiceFromClient(clientType, fullServiceCode);\n+        EndpointType endpointType = getEndpoint(clientType, serviceType, EndpointType.ANY_METHOD, EndpointType.ANY_PATH)\n+                .orElseThrow(() -> new EndpointNotFoundByServiceNameException(fullServiceCode));\n \n-        List<AccessRightType> accessRightsToBeRemoved = clientType.getAcl()\n-                .stream()\n-                .filter(accessRightType -> accessRightType.getEndpoint().getServiceCode()\n-                        .equals(serviceType.getServiceCode()) && subjectIds.contains(accessRightType.getSubjectId()))\n-                .collect(Collectors.toList());\n+        deleteEndpointAccessRights(clientType, endpointType, subjectIds, localGroupIds);\n+    }\n \n-        List<XRoadId> subjectsToBeRemoved = accessRightsToBeRemoved\n-                .stream()\n-                .map(AccessRightType::getSubjectId)\n-                .collect(Collectors.toList());\n+    /**\n+     * Remove access rights from endpoint\n+     *\n+     * @param endpointId\n+     * @param subjectIds\n+     * @param localGroupIds\n+     * @throws LocalGroupNotFoundException                  if localgroups is not found\n+     * @throws EndpointService.EndpointNotFoundException    if endpoint by given id is not found\n+     * @throws ClientNotFoundException                      if client attached to endpoint is not found\n+     * @throws AccessRightNotFoundException                 if at least one access right expected is not found\n+     */\n+    public void deleteEndpointAccessRights(Long endpointId, Set<XRoadId> subjectIds, Set<Long> localGroupIds)\n+            throws LocalGroupNotFoundException, EndpointService.EndpointNotFoundException,\n+            ClientNotFoundException, AccessRightNotFoundException {\n+        verifyAuthority(\"EDIT_ENDPOINT_ACL\");\n \n-        if (!subjectsToBeRemoved.containsAll(subjectIds)) {\n-            throw new AccessRightNotFoundException();\n+        ClientType clientType = clientRepository.getClientByEndpointId(endpointId);\n+        if (clientType == null) {\n+            throw new ClientNotFoundException(CLIENT_NOT_FOUND_FOR_ENDPOINT_WITH_ID + endpointId.toString());\n+        }\n+        EndpointType endpointType = endpointRepository.getEndpoint(endpointId);\n+        if (endpointType == null) {\n+            throw new EndpointService.EndpointNotFoundException(endpointId.toString());\n         }\n \n-        clientType.getAcl().removeAll(accessRightsToBeRemoved);\n-\n-        clientRepository.saveOrUpdate(clientType);\n+        deleteEndpointAccessRights(clientType, endpointType, subjectIds, localGroupIds);\n     }\n \n     /**\n-     * Remove AccessRights from a Service\n-     * @param clientId\n-     * @param fullServiceCode\n+     * Remove access rights from endpoint\n+     *\n+     * @param clientType\n+     * @param endpointType\n      * @param subjectIds\n      * @param localGroupIds\n-     * @throws LocalGroupNotFoundException if tried to remove local group access right\n-     * for a local group that does not exist\n-     * @throws AccessRightNotFoundException if tried to remove access rights that did not exist for the service\n-     * @throws ClientNotFoundException if client with given id was not found\n-     * @throws ServiceNotFoundException if service with given fullServicecode was not found\n+     * @throws LocalGroupNotFoundException  if localgroup is not found\n+     * @throws AccessRightNotFoundException if access right is not found\n      */\n-    public void deleteSoapServiceAccessRights(ClientId clientId, String fullServiceCode, Set<XRoadId> subjectIds,\n-            Set<Long> localGroupIds) throws LocalGroupNotFoundException, ClientNotFoundException,\n-            AccessRightNotFoundException, ServiceNotFoundException {\n-        Set<XRoadId> idsToDelete = new HashSet<>();\n+    private void deleteEndpointAccessRights(ClientType clientType, EndpointType endpointType, Set<XRoadId> subjectIds,\n+            Set<Long> localGroupIds) throws LocalGroupNotFoundException, AccessRightNotFoundException {\n+\n+        Set<XRoadId> subjectsToDelete = new HashSet<>();\n         if (localGroupIds != null) {\n-            idsToDelete.addAll(getLocalGroupsAsXroadIds(localGroupIds));\n+            subjectsToDelete.addAll(getLocalGroupsAsXroadIds(localGroupIds));\n         }\n         if (subjectIds != null) {\n-            idsToDelete.addAll(subjectIds);\n+            subjectsToDelete.addAll(subjectIds);\n+        }\n+\n+        List<AccessRightType> accessRightsToBeRemoved = clientType.getAcl().stream()\n+                .filter(acl -> acl.getEndpoint().getId().equals(endpointType.getId())\n+                        && subjectsToDelete.contains(acl.getSubjectId()))\n+                .collect(Collectors.toList());\n+        if (accessRightsToBeRemoved.size() != subjectsToDelete.size()) {\n+            throw new AccessRightNotFoundException();\n         }\n-        deleteSoapServiceAccessRights(clientId, fullServiceCode, idsToDelete);\n+\n+        clientType.getAcl().removeAll(accessRightsToBeRemoved);\n+        clientRepository.saveOrUpdate(clientType);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ce5bedf56206aae88f7d96f2865c070d2c3bba11"}, "originalPosition": 307}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzA5Mjc1MQ==", "bodyText": "Cant find where this should go - but service level access rights table should contain \"access rights given\" info: https://niis.slack.com/archives/GGBHVCYSY/p1585046751023500", "url": "https://github.com/nordic-institute/X-Road/pull/408#discussion_r397092751", "createdAt": "2020-03-24T11:48:59Z", "author": {"login": "jansu76"}, "path": "src/proxy-ui-api/frontend/src/views/Service/Service.vue", "diffHunk": "@@ -57,7 +57,7 @@ export default Vue.extend({\n           key: 'endpoints',\n           name: 'tab.services.endpoints',\n           to: {\n-            name: RouteName.ServiceEndpoints,\n+            name: RouteName.Endpoints,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ce5bedf56206aae88f7d96f2865c070d2c3bba11"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzEzOTM0Nw==", "bodyText": "maxLength is not really 255 since this maps to endpoint table PK which is BIGINT, which is -9223372036854775808 to 9223372036854775807.\nSo I guess maxLength(20) or maxLength(19) would be more correct. 20 if negatives are possible, I guess they could be.\nI would probably either leave maxLength out (since Endpoint schema object does not define it either) or use maxLength(20), I can't see the argument for using the wrong value (even if it may have originally been selected by me sometime long ago). Maybe there is a possibility that we could be using a different database in some future scenario, but I doubt 255 would be certain to be correct in that case, either.\nAlso localGroup and serviceDescription endpoints suffer from the same.", "url": "https://github.com/nordic-institute/X-Road/pull/408#discussion_r397139347", "createdAt": "2020-03-24T13:11:04Z", "author": {"login": "jansu76"}, "path": "src/proxy-ui-api/src/main/resources/openapi-definition.yaml", "diffHunk": "@@ -2532,6 +2535,130 @@ paths:\n           description: request specified an invalid format\n         '500':\n           description: internal server error\n+  /endpoints/{id}/access-rights:\n+    get:\n+      tags:\n+        - security server\n+      summary: get access rights for the selected endpoint\n+      operationId: getEndpointAccessRights\n+      description: Administrator views endpoints access rights\n+      parameters:\n+        - in: path\n+          name: id\n+          description: id of the endpoint\n+          required: true\n+          schema:\n+            type: string\n+            format: text\n+            minLength: 1\n+            maxLength: 255", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ce5bedf56206aae88f7d96f2865c070d2c3bba11"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzE1MDQ5NA==", "bodyText": "nitpick: Sonar suggests \"Use isEmpty() to check whether the collection is empty or not\" https://sonarqube.niis.org/project/issues?id=xroad&issues=AXDETU4aBW8O1Uq1Fo6y&open=AXDETU4aBW8O1Uq1Fo6y&pullRequest=408", "url": "https://github.com/nordic-institute/X-Road/pull/408#discussion_r397150494", "createdAt": "2020-03-24T13:28:00Z", "author": {"login": "jansu76"}, "path": "src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/service/AccessRightService.java", "diffHunk": "@@ -270,58 +415,42 @@ public void deleteSoapServiceAccessRights(ClientId clientId, String fullServiceC\n         return accessRightHolderDtos;\n     }\n \n-    /**\n-     * Get matching {@link EndpointType endpoint} from {@link ClientType#endpoint client's list of endpoints}.\n-     * @param clientType\n-     * @param serviceType\n-     * @param endpointMethod\n-     * @param endpointPath\n-     * @return\n-     */\n-    private Optional<EndpointType> getEndpoint(ClientType clientType, ServiceType serviceType, String endpointMethod,\n-            String endpointPath) {\n-        return clientType.getEndpoint().stream()\n-                .filter(endpointType -> endpointType.getServiceCode().equals(serviceType.getServiceCode())\n-                        && endpointType.getMethod().equals(endpointMethod)\n-                        && endpointType.getPath().equals(endpointPath))\n-                .findFirst();\n-    }\n-\n-    /**\n-     * Adds access rights to SOAP services. If the provided {@code subjectIds} do not exist in the serverconf db\n-     * they will first be validated (that they exist in global conf) and then saved into the serverconf db.\n-     * LocalGroup ids will also be verified and if they don't exist in the serverconf db they will be saved\n-     * @param clientId\n-     * @param fullServiceCode\n-     * @param subjectIds\n-     * @param localGroupIds\n-     * @return List of {@link AccessRightHolderDto AccessRightHolderDtos}\n-     * @throws LocalGroupNotFoundException\n-     * @throws ClientNotFoundException\n-     * @throws ServiceNotFoundException\n-     * @throws EndpointNotFoundException\n-     */\n-    public List<AccessRightHolderDto> addSoapServiceAccessRights(ClientId clientId, String fullServiceCode,\n-            Set<XRoadId> subjectIds, Set<Long> localGroupIds) throws LocalGroupNotFoundException,\n-            ClientNotFoundException, ServiceNotFoundException, DuplicateAccessRightException,\n-            IdentifierNotFoundException, EndpointNotFoundException {\n+    private Set<XRoadId> mergeSubjectIdsWithLocalgroups(Set<XRoadId> subjectIds, Set<Long> localGroupIds)\n+            throws IdentifierNotFoundException, LocalGroupNotFoundException {\n         // Get persistent entities in order to change relations\n         Set<XRoadId> txSubjects = new HashSet<>();\n-        if (subjectIds != null) {\n+        if (subjectIds != null && subjectIds.size() > 0) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ce5bedf56206aae88f7d96f2865c070d2c3bba11"}, "originalPosition": 487}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzE1MjQ5MA==", "bodyText": "Sonar says Coverage on New Code 82.2%, that is pretty good \ud83d\udc4d", "url": "https://github.com/nordic-institute/X-Road/pull/408#discussion_r397152490", "createdAt": "2020-03-24T13:30:52Z", "author": {"login": "jansu76"}, "path": "src/proxy-ui-api/src/test/java/org/niis/xroad/restapi/openapi/EndpointsApiControllerTest.java", "diffHunk": "@@ -116,7 +138,94 @@ public void updateEndpoint() {\n         assertTrue(endpointType.getServiceCode().equals(\"TestServiceCode\"));\n         assertTrue(endpointType.getMethod().equals(\"*\"));\n         assertTrue(endpointType.getPath().equals(\"/test\"));\n+    }\n \n+    @Test(expected = ResourceNotFoundException.class)\n+    @WithMockUser(authorities = {\"VIEW_ENDPOINT_ACL\"})", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ce5bedf56206aae88f7d96f2865c070d2c3bba11"}, "originalPosition": 74}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0c1f4bd25ed42b57c44973f95a61874b7541110a", "author": {"user": {"login": "TJaakkola", "name": "Tapio Jaakkola"}}, "url": "https://github.com/nordic-institute/X-Road/commit/0c1f4bd25ed42b57c44973f95a61874b7541110a", "committedDate": "2020-03-26T14:42:45Z", "message": "XRDDEV-803: Add typings to state object and rights given at -info to service parameters"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dbfad6f09697bddf34c0f2ee758edf3f405d686b", "author": {"user": {"login": "TJaakkola", "name": "Tapio Jaakkola"}}, "url": "https://github.com/nordic-institute/X-Road/commit/dbfad6f09697bddf34c0f2ee758edf3f405d686b", "committedDate": "2020-03-26T14:48:40Z", "message": "XRDDEV-803: Remove <p> -tags from license headers"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "54aa54c040a29de246a06e7975709758893dc934", "author": {"user": {"login": "TJaakkola", "name": "Tapio Jaakkola"}}, "url": "https://github.com/nordic-institute/X-Road/commit/54aa54c040a29de246a06e7975709758893dc934", "committedDate": "2020-03-26T19:29:14Z", "message": "XRDDEV-803: remove maxLength from endpoint id in api"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "31af27300ab8c732353cd52aa03b5b157b6fc830", "author": {"user": {"login": "TJaakkola", "name": "Tapio Jaakkola"}}, "url": "https://github.com/nordic-institute/X-Road/commit/31af27300ab8c732353cd52aa03b5b157b6fc830", "committedDate": "2020-03-26T20:39:51Z", "message": "XRDDEV-803: Extract EndpointNotFoundException to an independent class"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b1436c79b5ffe314e141b10446faaf9cc13758cf", "author": {"user": {"login": "TJaakkola", "name": "Tapio Jaakkola"}}, "url": "https://github.com/nordic-institute/X-Road/commit/b1436c79b5ffe314e141b10446faaf9cc13758cf", "committedDate": "2020-03-26T20:50:30Z", "message": "XRDDEV-803: Refactored size comparison to use isEmpty"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c33581477332e80a914b044b4e716e696618b2a5", "author": {"user": {"login": "TJaakkola", "name": "Tapio Jaakkola"}}, "url": "https://github.com/nordic-institute/X-Road/commit/c33581477332e80a914b044b4e716e696618b2a5", "committedDate": "2020-03-27T07:32:50Z", "message": "XRDDEV-803: Changed localization keys according to pull request comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "62dabf7285053bf334b7ab0b16f5d3a2cd5a95de", "author": {"user": {"login": "TJaakkola", "name": "Tapio Jaakkola"}}, "url": "https://github.com/nordic-institute/X-Road/commit/62dabf7285053bf334b7ab0b16f5d3a2cd5a95de", "committedDate": "2020-03-27T09:10:05Z", "message": "XRDDEV-803: Remove duplicate code and improve method documentation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d5c96ed5c35963f53147212ad4dab5c4410aa86c", "author": {"user": {"login": "TJaakkola", "name": "Tapio Jaakkola"}}, "url": "https://github.com/nordic-institute/X-Road/commit/d5c96ed5c35963f53147212ad4dab5c4410aa86c", "committedDate": "2020-03-27T11:17:21Z", "message": "XRDDEV-803: Refactoring EndpointNotFoundByServiceNameException out modifying EndpointNotFoundException. Also created getBaseEndpoint -method"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "39b448ef6c2bde26739e906d8ca8789e0e7b737b", "author": {"user": {"login": "TJaakkola", "name": "Tapio Jaakkola"}}, "url": "https://github.com/nordic-institute/X-Road/commit/39b448ef6c2bde26739e906d8ca8789e0e7b737b", "committedDate": "2020-03-27T11:30:48Z", "message": "XRDDEV-803: Remove duplicate method"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6575b36e916c8b1f60a051e39fa89de46571dd20", "author": {"user": {"login": "TJaakkola", "name": "Tapio Jaakkola"}}, "url": "https://github.com/nordic-institute/X-Road/commit/6575b36e916c8b1f60a051e39fa89de46571dd20", "committedDate": "2020-03-27T12:59:58Z", "message": "XRDDEV-803: Improving method namings and remove unnecessary verifyAuthority -checks"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7d93c8670628322780e326c6b0653b0b4327ba51", "author": {"user": {"login": "TJaakkola", "name": "Tapio Jaakkola"}}, "url": "https://github.com/nordic-institute/X-Road/commit/7d93c8670628322780e326c6b0653b0b4327ba51", "committedDate": "2020-03-27T13:53:21Z", "message": "XRDDEV-803: Change LocalGroupNotFoundException to AccessRightNotFoundException when it's thrown in AccessRightService"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "09771b4c0d38ce8b2c7f4ba7a3d105e288a7213a", "author": {"user": {"login": "TJaakkola", "name": "Tapio Jaakkola"}}, "url": "https://github.com/nordic-institute/X-Road/commit/09771b4c0d38ce8b2c7f4ba7a3d105e288a7213a", "committedDate": "2020-03-30T08:31:14Z", "message": "XRDDEV-803: Change LocalGroupNotFoundException to AccessRightNotFoundException for improved consistency"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bee8da54e5504ec0616f0b98ecbba6e8fb306483", "author": {"user": {"login": "Riippi", "name": "Mikko Riippi"}}, "url": "https://github.com/nordic-institute/X-Road/commit/bee8da54e5504ec0616f0b98ecbba6e8fb306483", "committedDate": "2020-03-30T09:10:57Z", "message": "XRDDEV-803 Fix code style conflicts"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "31d3371aa15689e339a5711565c4d377847bd5ae", "author": {"user": {"login": "TJaakkola", "name": "Tapio Jaakkola"}}, "url": "https://github.com/nordic-institute/X-Road/commit/31d3371aa15689e339a5711565c4d377847bd5ae", "committedDate": "2020-03-30T09:33:29Z", "message": "Merge branch 'develop' into XRDDEV-803"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "59da4b69f16bd1dae2a7998e902670b31f7b9c82", "author": {"user": {"login": "TJaakkola", "name": "Tapio Jaakkola"}}, "url": "https://github.com/nordic-institute/X-Road/commit/59da4b69f16bd1dae2a7998e902670b31f7b9c82", "committedDate": "2020-03-30T10:38:32Z", "message": "XRDDEV-803: Fix merge conflicts"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "07f9ed282fe3ac58fb94ae9a9db79a4a34028355", "author": {"user": {"login": "TJaakkola", "name": "Tapio Jaakkola"}}, "url": "https://github.com/nordic-institute/X-Road/commit/07f9ed282fe3ac58fb94ae9a9db79a4a34028355", "committedDate": "2020-03-30T12:03:52Z", "message": "XRDDEV-803: Remove duplicate markup"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b693ec93d43199f7b66724e3cb5e5c1f9282bceb", "author": {"user": {"login": "TJaakkola", "name": "Tapio Jaakkola"}}, "url": "https://github.com/nordic-institute/X-Road/commit/b693ec93d43199f7b66724e3cb5e5c1f9282bceb", "committedDate": "2020-04-02T13:05:23Z", "message": "XRDDEV-803: Remove unnecessary VerifyAuthority calls"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9651a6b5f937ee6de0d0793b884a21a620d2bdeb", "author": {"user": {"login": "TJaakkola", "name": "Tapio Jaakkola"}}, "url": "https://github.com/nordic-institute/X-Road/commit/9651a6b5f937ee6de0d0793b884a21a620d2bdeb", "committedDate": "2020-04-02T14:22:50Z", "message": "XRDDEV-803: Refactoring\n\nRename getBaseEndpoint to getServiceBaseEndpoint and remove client parameter as ServiceType is the only object needed to handle the functionality\nRemove duplication"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "560796a5ad74523edb0d38248518424d20eae468", "author": {"user": {"login": "TJaakkola", "name": "Tapio Jaakkola"}}, "url": "https://github.com/nordic-institute/X-Road/commit/560796a5ad74523edb0d38248518424d20eae468", "committedDate": "2020-04-02T14:27:49Z", "message": "Merge branch 'develop' into XRDDEV-803"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c33b25ee3935625a1d1b179e39cd96434e437e23", "author": {"user": {"login": "TJaakkola", "name": "Tapio Jaakkola"}}, "url": "https://github.com/nordic-institute/X-Road/commit/c33b25ee3935625a1d1b179e39cd96434e437e23", "committedDate": "2020-04-03T07:22:16Z", "message": "XRDDEV-803: Replace verifyAuthority method usage with preAuthorize-annotation"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg3MDAwMjY2", "url": "https://github.com/nordic-institute/X-Road/pull/408#pullrequestreview-387000266", "createdAt": "2020-04-03T07:30:47Z", "commit": {"oid": "c33b25ee3935625a1d1b179e39cd96434e437e23"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "277db6af5629750d113789936e6936f563033574", "author": {"user": {"login": "TJaakkola", "name": "Tapio Jaakkola"}}, "url": "https://github.com/nordic-institute/X-Road/commit/277db6af5629750d113789936e6936f563033574", "committedDate": "2020-04-06T16:01:30Z", "message": "Merge branch 'develop' into XRDDEV-803"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2518e59436dcc805bee8e3981d8d0560a2d908a4", "author": {"user": {"login": "TJaakkola", "name": "Tapio Jaakkola"}}, "url": "https://github.com/nordic-institute/X-Road/commit/2518e59436dcc805bee8e3981d8d0560a2d908a4", "committedDate": "2020-04-06T16:39:54Z", "message": "XRDDEV-803: Fix exception type thrown after changed verifyAuthority to PreAuthorize"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f26a9ac692d928c9d7408ed3ebc7257e2bf825c8", "author": {"user": {"login": "TJaakkola", "name": "Tapio Jaakkola"}}, "url": "https://github.com/nordic-institute/X-Road/commit/f26a9ac692d928c9d7408ed3ebc7257e2bf825c8", "committedDate": "2020-04-06T17:29:16Z", "message": "XRDDEV-803: Remove unused import"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bdae07df3d0774005048a5c21540f6f7aea4479c", "author": {"user": {"login": "TJaakkola", "name": "Tapio Jaakkola"}}, "url": "https://github.com/nordic-institute/X-Road/commit/bdae07df3d0774005048a5c21540f6f7aea4479c", "committedDate": "2020-04-07T14:02:55Z", "message": "Merge branch 'develop' into XRDDEV-803"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4363, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}