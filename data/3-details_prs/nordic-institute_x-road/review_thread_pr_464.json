{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA0MTQ2NzI2", "number": 464, "reviewThreads": {"totalCount": 17, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQwNzo0MTozN1rODyYKJA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QwNjowNzozMVrODyxsCw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0MTUxMjA0OnYy", "diffSide": "RIGHT", "path": "src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/converter/ServiceClientIdentifierConverter.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQwNzo0MTozN1rOGGYhDA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QxMTo0Nzo1NlrOGHK1Dw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTM0NjMxNg==", "bodyText": "Comment seems to be off", "url": "https://github.com/nordic-institute/X-Road/pull/464#discussion_r409346316", "createdAt": "2020-04-16T07:41:37Z", "author": {"login": "jansu76"}, "path": "src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/converter/ServiceClientIdentifierConverter.java", "diffHunk": "@@ -0,0 +1,101 @@\n+/**\n+ * The MIT License\n+ * Copyright (c) 2018 Estonian Information System Authority (RIA),\n+ * Nordic Institute for Interoperability Solutions (NIIS), Population Register Centre (VRK)\n+ * Copyright (c) 2015-2017 Estonian Information System Authority (RIA), Population Register Centre (VRK)\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+\n+package org.niis.xroad.restapi.converter;\n+\n+import ee.ria.xroad.common.identifier.ClientId;\n+import ee.ria.xroad.common.identifier.GlobalGroupId;\n+\n+import com.google.common.collect.Streams;\n+import org.apache.commons.lang3.StringUtils;\n+import org.niis.xroad.restapi.dto.ServiceClientIdentifierDto;\n+import org.niis.xroad.restapi.openapi.BadRequestException;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Component;\n+\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * converter for ServiceClient and related objects", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc77187ae2d7c56d5a09701f5cc94b8c3c91d3a9"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTUxMDE4Ng==", "bodyText": "What do you mean comment is off?", "url": "https://github.com/nordic-institute/X-Road/pull/464#discussion_r409510186", "createdAt": "2020-04-16T12:18:57Z", "author": {"login": "TJaakkola"}, "path": "src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/converter/ServiceClientIdentifierConverter.java", "diffHunk": "@@ -0,0 +1,101 @@\n+/**\n+ * The MIT License\n+ * Copyright (c) 2018 Estonian Information System Authority (RIA),\n+ * Nordic Institute for Interoperability Solutions (NIIS), Population Register Centre (VRK)\n+ * Copyright (c) 2015-2017 Estonian Information System Authority (RIA), Population Register Centre (VRK)\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+\n+package org.niis.xroad.restapi.converter;\n+\n+import ee.ria.xroad.common.identifier.ClientId;\n+import ee.ria.xroad.common.identifier.GlobalGroupId;\n+\n+import com.google.common.collect.Streams;\n+import org.apache.commons.lang3.StringUtils;\n+import org.niis.xroad.restapi.dto.ServiceClientIdentifierDto;\n+import org.niis.xroad.restapi.openapi.BadRequestException;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Component;\n+\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * converter for ServiceClient and related objects", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTM0NjMxNg=="}, "originalCommit": {"oid": "bc77187ae2d7c56d5a09701f5cc94b8c3c91d3a9"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTUxMTc1Ng==", "bodyText": "Just that it is specifically converter for service client identifiers and nothing else, not \"ServiceClient and related objects\".\nIt is copypaste from ServiceClientConverter by yours truly, I think.", "url": "https://github.com/nordic-institute/X-Road/pull/464#discussion_r409511756", "createdAt": "2020-04-16T12:21:37Z", "author": {"login": "jansu76"}, "path": "src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/converter/ServiceClientIdentifierConverter.java", "diffHunk": "@@ -0,0 +1,101 @@\n+/**\n+ * The MIT License\n+ * Copyright (c) 2018 Estonian Information System Authority (RIA),\n+ * Nordic Institute for Interoperability Solutions (NIIS), Population Register Centre (VRK)\n+ * Copyright (c) 2015-2017 Estonian Information System Authority (RIA), Population Register Centre (VRK)\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+\n+package org.niis.xroad.restapi.converter;\n+\n+import ee.ria.xroad.common.identifier.ClientId;\n+import ee.ria.xroad.common.identifier.GlobalGroupId;\n+\n+import com.google.common.collect.Streams;\n+import org.apache.commons.lang3.StringUtils;\n+import org.niis.xroad.restapi.dto.ServiceClientIdentifierDto;\n+import org.niis.xroad.restapi.openapi.BadRequestException;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Component;\n+\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * converter for ServiceClient and related objects", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTM0NjMxNg=="}, "originalCommit": {"oid": "bc77187ae2d7c56d5a09701f5cc94b8c3c91d3a9"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDE3MDYzOQ==", "bodyText": "Ah yes, it is your code, yes :)\nChanged to 'Converter for ServiceClient'", "url": "https://github.com/nordic-institute/X-Road/pull/464#discussion_r410170639", "createdAt": "2020-04-17T11:47:56Z", "author": {"login": "TJaakkola"}, "path": "src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/converter/ServiceClientIdentifierConverter.java", "diffHunk": "@@ -0,0 +1,101 @@\n+/**\n+ * The MIT License\n+ * Copyright (c) 2018 Estonian Information System Authority (RIA),\n+ * Nordic Institute for Interoperability Solutions (NIIS), Population Register Centre (VRK)\n+ * Copyright (c) 2015-2017 Estonian Information System Authority (RIA), Population Register Centre (VRK)\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+\n+package org.niis.xroad.restapi.converter;\n+\n+import ee.ria.xroad.common.identifier.ClientId;\n+import ee.ria.xroad.common.identifier.GlobalGroupId;\n+\n+import com.google.common.collect.Streams;\n+import org.apache.commons.lang3.StringUtils;\n+import org.niis.xroad.restapi.dto.ServiceClientIdentifierDto;\n+import org.niis.xroad.restapi.openapi.BadRequestException;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Component;\n+\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * converter for ServiceClient and related objects", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTM0NjMxNg=="}, "originalCommit": {"oid": "bc77187ae2d7c56d5a09701f5cc94b8c3c91d3a9"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0MTUzODkwOnYy", "diffSide": "RIGHT", "path": "src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/dto/ServiceClientAccessRightDto.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQwNzo0ODo0NlrOGGYxbg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxMjoxOToxNVrOGGih4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTM1MDUxMA==", "bodyText": "These should be needless since AccessRight does not contain them. But branch https://github.com/nordic-institute/X-Road/tree/XRDDEV-963-add-service-client-access-rights does remove them.", "url": "https://github.com/nordic-institute/X-Road/pull/464#discussion_r409350510", "createdAt": "2020-04-16T07:48:46Z", "author": {"login": "jansu76"}, "path": "src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/dto/ServiceClientAccessRightDto.java", "diffHunk": "@@ -0,0 +1,45 @@\n+/**\n+ * The MIT License\n+ * Copyright (c) 2018 Estonian Information System Authority (RIA),\n+ * Nordic Institute for Interoperability Solutions (NIIS), Population Register Centre (VRK)\n+ * Copyright (c) 2015-2017 Estonian Information System Authority (RIA), Population Register Centre (VRK)\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package org.niis.xroad.restapi.dto;\n+\n+import lombok.Builder;\n+import lombok.Getter;\n+\n+import java.time.OffsetDateTime;\n+\n+@Builder\n+@Getter\n+/**\n+ * Access rights are given to a specific subject, for services owned by some client.\n+ * ServiceClientAccessRightDto.clientId is id of the service owner\n+ * (not the subject id)\n+ */\n+public class ServiceClientAccessRightDto {\n+    private String id;\n+    private String clientId;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc77187ae2d7c56d5a09701f5cc94b8c3c91d3a9"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTUxMDM3MA==", "bodyText": "Yes, noticed this. No changes done.", "url": "https://github.com/nordic-institute/X-Road/pull/464#discussion_r409510370", "createdAt": "2020-04-16T12:19:15Z", "author": {"login": "TJaakkola"}, "path": "src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/dto/ServiceClientAccessRightDto.java", "diffHunk": "@@ -0,0 +1,45 @@\n+/**\n+ * The MIT License\n+ * Copyright (c) 2018 Estonian Information System Authority (RIA),\n+ * Nordic Institute for Interoperability Solutions (NIIS), Population Register Centre (VRK)\n+ * Copyright (c) 2015-2017 Estonian Information System Authority (RIA), Population Register Centre (VRK)\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package org.niis.xroad.restapi.dto;\n+\n+import lombok.Builder;\n+import lombok.Getter;\n+\n+import java.time.OffsetDateTime;\n+\n+@Builder\n+@Getter\n+/**\n+ * Access rights are given to a specific subject, for services owned by some client.\n+ * ServiceClientAccessRightDto.clientId is id of the service owner\n+ * (not the subject id)\n+ */\n+public class ServiceClientAccessRightDto {\n+    private String id;\n+    private String clientId;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTM1MDUxMA=="}, "originalCommit": {"oid": "bc77187ae2d7c56d5a09701f5cc94b8c3c91d3a9"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0MTYxODE2OnYy", "diffSide": "RIGHT", "path": "src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/openapi/ClientsApiController.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQwODowOTowM1rOGGZh0w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxMzowNjoyM1rOGGkVkA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTM2Mjg5OQ==", "bodyText": "I think it would be a bit better design to have\npublic List<ServiceClientAccessRightDto> getServiceClientAccessRights(ClientId clientid, XRoadId serviceClientId) \ninstead of\npublic List<ServiceClientAccessRightDto> getServiceClientAccessRights(ClientId clientid,            ServiceClientIdentifierDto serviceClientId)\nServiceClientIdentifierDto -> XRoadId lookup could be handled by a private method in controller implementing the same logic as addServiceClientAccessRights now has\n        XRoadId serviceClientId = dto.getXRoadId();\n        if (dto.isLocalGroup()) {\n            try {\n                serviceClientId = localGroupService.getLocalGroupIdAsXroadId(dto.getLocalGroupId());\n            } catch (LocalGroupNotFoundException e) {\n                throw new ResourceNotFoundException(e);\n            }\n        }\n\n\nThat way service method would be a bit cleaner IMO, getServiceClient and getServiceClientAccessRights and addServiceClientAccessRights would follow same approach, and service methods would have less \"special case exceptions\" for local groups.\nInstead of private method in controller, it could also be a method in ServiceClientService.", "url": "https://github.com/nordic-institute/X-Road/pull/464#discussion_r409362899", "createdAt": "2020-04-16T08:09:03Z", "author": {"login": "jansu76"}, "path": "src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/openapi/ClientsApiController.java", "diffHunk": "@@ -527,10 +544,70 @@ private ClientType getClientType(String encodedId) {\n         List<ServiceClient> serviceClients = null;\n         try {\n             serviceClients = serviceClientConverter.\n-                    convertAccessRightHolderDtos(accessRightService.getAccessRightHoldersByClient(clientId));\n+                    convertServiceClientDtos(serviceClientService.getServiceClientsByClient(clientId));\n         } catch (ClientNotFoundException e) {\n             throw new ResourceNotFoundException(e);\n         }\n         return new ResponseEntity<>(serviceClients, HttpStatus.OK);\n     }\n+\n+    @Override\n+    @PreAuthorize(\"hasAuthority('VIEW_CLIENT_ACL_SUBJECTS')\")\n+    public ResponseEntity<ServiceClient> getServiceClient(String id, String scId) {\n+        ClientId clientIdentifier = clientConverter.convertId(id);\n+        ServiceClientIdentifierDto serviceClientIdentifierDto = serviceClientIdentifierConverter.convertId(scId);\n+        ServiceClient serviceClient = null;\n+        try {\n+            serviceClient = serviceClientConverter.convertServiceClientDto(\n+                    serviceClientService.getServiceClient(clientIdentifier, serviceClientIdentifierDto));\n+        } catch (ClientNotFoundException | ServiceClientNotFoundException e) {\n+            throw new BadRequestException(e);\n+        }\n+\n+        return new ResponseEntity<>(serviceClient, HttpStatus.OK);\n+    }\n+\n+    @Override\n+    @PreAuthorize(\"hasAuthority('VIEW_ACL_SUBJECT_OPEN_SERVICES')\")\n+    public ResponseEntity<List<AccessRight>> getServiceClientAccessRights(String id, String scId) {\n+        ClientId clientIdentifier = clientConverter.convertId(id);\n+        ServiceClientIdentifierDto serviceClientIdentifierDto = serviceClientIdentifierConverter.convertId(scId);\n+        List<AccessRight> accessRights = null;\n+        try {\n+            accessRights = accessRightConverter.convert(\n+                    serviceClientService.getServiceClientAccessRights(clientIdentifier, serviceClientIdentifierDto));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc77187ae2d7c56d5a09701f5cc94b8c3c91d3a9"}, "originalPosition": 175}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTUzOTk4NA==", "bodyText": "Refactored as suggested. Moved the converter-method to ServiceClientService.", "url": "https://github.com/nordic-institute/X-Road/pull/464#discussion_r409539984", "createdAt": "2020-04-16T13:06:23Z", "author": {"login": "TJaakkola"}, "path": "src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/openapi/ClientsApiController.java", "diffHunk": "@@ -527,10 +544,70 @@ private ClientType getClientType(String encodedId) {\n         List<ServiceClient> serviceClients = null;\n         try {\n             serviceClients = serviceClientConverter.\n-                    convertAccessRightHolderDtos(accessRightService.getAccessRightHoldersByClient(clientId));\n+                    convertServiceClientDtos(serviceClientService.getServiceClientsByClient(clientId));\n         } catch (ClientNotFoundException e) {\n             throw new ResourceNotFoundException(e);\n         }\n         return new ResponseEntity<>(serviceClients, HttpStatus.OK);\n     }\n+\n+    @Override\n+    @PreAuthorize(\"hasAuthority('VIEW_CLIENT_ACL_SUBJECTS')\")\n+    public ResponseEntity<ServiceClient> getServiceClient(String id, String scId) {\n+        ClientId clientIdentifier = clientConverter.convertId(id);\n+        ServiceClientIdentifierDto serviceClientIdentifierDto = serviceClientIdentifierConverter.convertId(scId);\n+        ServiceClient serviceClient = null;\n+        try {\n+            serviceClient = serviceClientConverter.convertServiceClientDto(\n+                    serviceClientService.getServiceClient(clientIdentifier, serviceClientIdentifierDto));\n+        } catch (ClientNotFoundException | ServiceClientNotFoundException e) {\n+            throw new BadRequestException(e);\n+        }\n+\n+        return new ResponseEntity<>(serviceClient, HttpStatus.OK);\n+    }\n+\n+    @Override\n+    @PreAuthorize(\"hasAuthority('VIEW_ACL_SUBJECT_OPEN_SERVICES')\")\n+    public ResponseEntity<List<AccessRight>> getServiceClientAccessRights(String id, String scId) {\n+        ClientId clientIdentifier = clientConverter.convertId(id);\n+        ServiceClientIdentifierDto serviceClientIdentifierDto = serviceClientIdentifierConverter.convertId(scId);\n+        List<AccessRight> accessRights = null;\n+        try {\n+            accessRights = accessRightConverter.convert(\n+                    serviceClientService.getServiceClientAccessRights(clientIdentifier, serviceClientIdentifierDto));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTM2Mjg5OQ=="}, "originalCommit": {"oid": "bc77187ae2d7c56d5a09701f5cc94b8c3c91d3a9"}, "originalPosition": 175}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0MTYyMTc1OnYy", "diffSide": "RIGHT", "path": "src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/openapi/ClientsApiController.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQwODowOTo1OVrOGGZkEg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxMzozODozNFrOGGlulw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTM2MzQ3NA==", "bodyText": "See comment on getServiceClientAccessRights for dto handling", "url": "https://github.com/nordic-institute/X-Road/pull/464#discussion_r409363474", "createdAt": "2020-04-16T08:09:59Z", "author": {"login": "jansu76"}, "path": "src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/openapi/ClientsApiController.java", "diffHunk": "@@ -527,10 +544,70 @@ private ClientType getClientType(String encodedId) {\n         List<ServiceClient> serviceClients = null;\n         try {\n             serviceClients = serviceClientConverter.\n-                    convertAccessRightHolderDtos(accessRightService.getAccessRightHoldersByClient(clientId));\n+                    convertServiceClientDtos(serviceClientService.getServiceClientsByClient(clientId));\n         } catch (ClientNotFoundException e) {\n             throw new ResourceNotFoundException(e);\n         }\n         return new ResponseEntity<>(serviceClients, HttpStatus.OK);\n     }\n+\n+    @Override\n+    @PreAuthorize(\"hasAuthority('VIEW_CLIENT_ACL_SUBJECTS')\")\n+    public ResponseEntity<ServiceClient> getServiceClient(String id, String scId) {\n+        ClientId clientIdentifier = clientConverter.convertId(id);\n+        ServiceClientIdentifierDto serviceClientIdentifierDto = serviceClientIdentifierConverter.convertId(scId);\n+        ServiceClient serviceClient = null;\n+        try {\n+            serviceClient = serviceClientConverter.convertServiceClientDto(\n+                    serviceClientService.getServiceClient(clientIdentifier, serviceClientIdentifierDto));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc77187ae2d7c56d5a09701f5cc94b8c3c91d3a9"}, "originalPosition": 159}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTU2Mjc3NQ==", "bodyText": "Did the same as in the other ServiceClientIdentifierDto -> XRoadId comment", "url": "https://github.com/nordic-institute/X-Road/pull/464#discussion_r409562775", "createdAt": "2020-04-16T13:38:34Z", "author": {"login": "TJaakkola"}, "path": "src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/openapi/ClientsApiController.java", "diffHunk": "@@ -527,10 +544,70 @@ private ClientType getClientType(String encodedId) {\n         List<ServiceClient> serviceClients = null;\n         try {\n             serviceClients = serviceClientConverter.\n-                    convertAccessRightHolderDtos(accessRightService.getAccessRightHoldersByClient(clientId));\n+                    convertServiceClientDtos(serviceClientService.getServiceClientsByClient(clientId));\n         } catch (ClientNotFoundException e) {\n             throw new ResourceNotFoundException(e);\n         }\n         return new ResponseEntity<>(serviceClients, HttpStatus.OK);\n     }\n+\n+    @Override\n+    @PreAuthorize(\"hasAuthority('VIEW_CLIENT_ACL_SUBJECTS')\")\n+    public ResponseEntity<ServiceClient> getServiceClient(String id, String scId) {\n+        ClientId clientIdentifier = clientConverter.convertId(id);\n+        ServiceClientIdentifierDto serviceClientIdentifierDto = serviceClientIdentifierConverter.convertId(scId);\n+        ServiceClient serviceClient = null;\n+        try {\n+            serviceClient = serviceClientConverter.convertServiceClientDto(\n+                    serviceClientService.getServiceClient(clientIdentifier, serviceClientIdentifierDto));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTM2MzQ3NA=="}, "originalCommit": {"oid": "bc77187ae2d7c56d5a09701f5cc94b8c3c91d3a9"}, "originalPosition": 159}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0MTY0MDYxOnYy", "diffSide": "RIGHT", "path": "src/proxy-ui-api/frontend/src/views/Clients/ServiceClients/ServiceClientAccessRights.vue", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQwODoxNDo1MlrOGGZwCA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQwOTo1MTo0N1rOGGdizA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTM2NjUzNg==", "bodyText": "If the accessRight has an id or other unique thing it would be good to use it with v-bind:key\n[vue/require-v-for-key]\nElements in iteration expect to have 'v-bind:key' directives.", "url": "https://github.com/nordic-institute/X-Road/pull/464#discussion_r409366536", "createdAt": "2020-04-16T08:14:52Z", "author": {"login": "Riippi"}, "path": "src/proxy-ui-api/frontend/src/views/Clients/ServiceClients/ServiceClientAccessRights.vue", "diffHunk": "@@ -0,0 +1,187 @@\n+<template>\n+  <div class=\"xrd-tab-max-width xrd-view-common\">\n+    <subViewTitle :title=\"serviceClientId\" @close=\"close\" />\n+\n+    <v-card flat>\n+      <table class=\"xrd-table service-client-margin\">\n+        <thead>\n+        <tr>\n+          <th>{{$t('serviceClients.name')}}</th>\n+          <th>{{$t('serviceClients.id')}}</th>\n+        </tr>\n+        </thead>\n+        <tr>\n+          <td>{{serviceClient.name}}</td>\n+          <td>{{serviceClient.id}}</td>\n+        </tr>\n+      </table>\n+    </v-card>\n+\n+\n+    <div class=\"group-members-row\">\n+      <div class=\"row-title\">{{$t('serviceClients.accessRights')}}</div>\n+      <div class=\"row-buttons\">\n+        <large-button\n+          @click=\"removeAll()\"\n+          outlined\n+          data-test=\"remove-all-access-rights\"\n+          v-if=\"accessRights.length > 0\"\n+        >{{$t('serviceClients.removeAll')}}\n+        </large-button>\n+        <large-button\n+          @click=\"addService()\"\n+          outlined\n+          data-test=\"add-subjects-dialog\"\n+        >{{$t('serviceClients.addService')}}\n+        </large-button>\n+      </div>\n+    </div>\n+\n+    <table class=\"xrd-table service-client-margin\" v-if=\"accessRights.length > 0\">\n+      <thead>\n+        <tr>\n+          <th>{{$t('serviceClients.serviceCode')}}</th>\n+          <th>{{$t('serviceClients.title')}}</th>\n+          <th>{{$t('serviceClients.accessRightsGiven')}}</th>\n+          <th></th>\n+        </tr>\n+      </thead>\n+      <tbody>\n+        <tr v-for=\"accessRight in accessRights\">", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc77187ae2d7c56d5a09701f5cc94b8c3c91d3a9"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTQyODY4NA==", "bodyText": "In this case there is no id to use. I added v-bind:index.", "url": "https://github.com/nordic-institute/X-Road/pull/464#discussion_r409428684", "createdAt": "2020-04-16T09:51:47Z", "author": {"login": "TJaakkola"}, "path": "src/proxy-ui-api/frontend/src/views/Clients/ServiceClients/ServiceClientAccessRights.vue", "diffHunk": "@@ -0,0 +1,187 @@\n+<template>\n+  <div class=\"xrd-tab-max-width xrd-view-common\">\n+    <subViewTitle :title=\"serviceClientId\" @close=\"close\" />\n+\n+    <v-card flat>\n+      <table class=\"xrd-table service-client-margin\">\n+        <thead>\n+        <tr>\n+          <th>{{$t('serviceClients.name')}}</th>\n+          <th>{{$t('serviceClients.id')}}</th>\n+        </tr>\n+        </thead>\n+        <tr>\n+          <td>{{serviceClient.name}}</td>\n+          <td>{{serviceClient.id}}</td>\n+        </tr>\n+      </table>\n+    </v-card>\n+\n+\n+    <div class=\"group-members-row\">\n+      <div class=\"row-title\">{{$t('serviceClients.accessRights')}}</div>\n+      <div class=\"row-buttons\">\n+        <large-button\n+          @click=\"removeAll()\"\n+          outlined\n+          data-test=\"remove-all-access-rights\"\n+          v-if=\"accessRights.length > 0\"\n+        >{{$t('serviceClients.removeAll')}}\n+        </large-button>\n+        <large-button\n+          @click=\"addService()\"\n+          outlined\n+          data-test=\"add-subjects-dialog\"\n+        >{{$t('serviceClients.addService')}}\n+        </large-button>\n+      </div>\n+    </div>\n+\n+    <table class=\"xrd-table service-client-margin\" v-if=\"accessRights.length > 0\">\n+      <thead>\n+        <tr>\n+          <th>{{$t('serviceClients.serviceCode')}}</th>\n+          <th>{{$t('serviceClients.title')}}</th>\n+          <th>{{$t('serviceClients.accessRightsGiven')}}</th>\n+          <th></th>\n+        </tr>\n+      </thead>\n+      <tbody>\n+        <tr v-for=\"accessRight in accessRights\">", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTM2NjUzNg=="}, "originalCommit": {"oid": "bc77187ae2d7c56d5a09701f5cc94b8c3c91d3a9"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0MTY0NjQ5OnYy", "diffSide": "RIGHT", "path": "src/proxy-ui-api/frontend/src/views/Clients/ServiceClients/ServiceClients.vue", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQwODoxNjoyMlrOGGZzmw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQwOTo1NDozM1rOGGdpkA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTM2NzQ1MQ==", "bodyText": "same 'v-bind:key'  thing in this loop also", "url": "https://github.com/nordic-institute/X-Road/pull/464#discussion_r409367451", "createdAt": "2020-04-16T08:16:22Z", "author": {"login": "Riippi"}, "path": "src/proxy-ui-api/frontend/src/views/Clients/ServiceClients/ServiceClients.vue", "diffHunk": "@@ -1,33 +1,39 @@\n <template>\n   <div>\n     <div class=\"table-toolbar\">\n-      <v-text-field v-model=\"search\" label=\"Search\" single-line hide-details class=\"search-input\">\n+      <v-text-field v-model=\"search\"\n+                    :label=\"$t('serviceClients.searchPlaceHolder')\"\n+                    single-line\n+                    hide-details\n+                    class=\"search-input\">\n         <v-icon slot=\"append\">mdi-magnify</v-icon>\n       </v-text-field>\n       <v-btn\n         color=\"primary\"\n-        @click=\"addSubject\"\n+        @click=\"addServiceClient\"\n         outlined\n         rounded\n         class=\"ma-0 rounded-button elevation-0\"\n-      >{{$t('serviceClients.addSubject')}}\n+      >{{$t('serviceClients.addServiceClient')}}\n       </v-btn>\n     </div>\n \n-    <v-card flat>\n-      <table class=\"xrd-table service-clients-table\">\n+    <table class=\"xrd-table service-clients-table\">\n+      <thead>\n         <tr>\n-          <th>{{$t('serviceClients.memberNameGroupDesc')}}</th>\n+          <th>{{$t('serviceClients.name')}}</th>\n           <th>{{$t('serviceClients.id')}}</th>\n         </tr>\n-        <template v-if=\"serviceClients.length > 0\">\n-          <tr v-for=\"sc in this.filteredServiceClients()\">\n-            <td>{{sc.subject.member_name_group_description}}</td>\n-            <td>{{sc.subject.id}}</td>\n+      </thead>\n+      <template v-if=\"serviceClients.length > 0\">\n+        <tbody>\n+          <tr v-for=\"sc in this.filteredServiceClients()\" @click=\"showAccessRights(sc.id)\">", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc77187ae2d7c56d5a09701f5cc94b8c3c91d3a9"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTQzMDQxNg==", "bodyText": "Fixed", "url": "https://github.com/nordic-institute/X-Road/pull/464#discussion_r409430416", "createdAt": "2020-04-16T09:54:33Z", "author": {"login": "TJaakkola"}, "path": "src/proxy-ui-api/frontend/src/views/Clients/ServiceClients/ServiceClients.vue", "diffHunk": "@@ -1,33 +1,39 @@\n <template>\n   <div>\n     <div class=\"table-toolbar\">\n-      <v-text-field v-model=\"search\" label=\"Search\" single-line hide-details class=\"search-input\">\n+      <v-text-field v-model=\"search\"\n+                    :label=\"$t('serviceClients.searchPlaceHolder')\"\n+                    single-line\n+                    hide-details\n+                    class=\"search-input\">\n         <v-icon slot=\"append\">mdi-magnify</v-icon>\n       </v-text-field>\n       <v-btn\n         color=\"primary\"\n-        @click=\"addSubject\"\n+        @click=\"addServiceClient\"\n         outlined\n         rounded\n         class=\"ma-0 rounded-button elevation-0\"\n-      >{{$t('serviceClients.addSubject')}}\n+      >{{$t('serviceClients.addServiceClient')}}\n       </v-btn>\n     </div>\n \n-    <v-card flat>\n-      <table class=\"xrd-table service-clients-table\">\n+    <table class=\"xrd-table service-clients-table\">\n+      <thead>\n         <tr>\n-          <th>{{$t('serviceClients.memberNameGroupDesc')}}</th>\n+          <th>{{$t('serviceClients.name')}}</th>\n           <th>{{$t('serviceClients.id')}}</th>\n         </tr>\n-        <template v-if=\"serviceClients.length > 0\">\n-          <tr v-for=\"sc in this.filteredServiceClients()\">\n-            <td>{{sc.subject.member_name_group_description}}</td>\n-            <td>{{sc.subject.id}}</td>\n+      </thead>\n+      <template v-if=\"serviceClients.length > 0\">\n+        <tbody>\n+          <tr v-for=\"sc in this.filteredServiceClients()\" @click=\"showAccessRights(sc.id)\">", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTM2NzQ1MQ=="}, "originalCommit": {"oid": "bc77187ae2d7c56d5a09701f5cc94b8c3c91d3a9"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0MTY3NDgyOnYy", "diffSide": "RIGHT", "path": "src/proxy-ui-api/frontend/src/store/modules/services.ts", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQwODoyMzo0MlrOGGaFig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQwOTo1MjoxMlrOGGdj0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTM3MjA0Mg==", "bodyText": "We don't yet have a shared prettier setup, but before that, could these imports be adjusted in the ide to have spaces like { RootState }  ?", "url": "https://github.com/nordic-institute/X-Road/pull/464#discussion_r409372042", "createdAt": "2020-04-16T08:23:42Z", "author": {"login": "Riippi"}, "path": "src/proxy-ui-api/frontend/src/store/modules/services.ts", "diffHunk": "@@ -1,12 +1,12 @@\n import { ActionTree, GetterTree, Module, MutationTree } from 'vuex';\n import { RootState } from '../types';\n-import {Endpoint, Service, ServiceClient, Subject} from '@/types';\n+import {Endpoint, Service, ServiceClient} from '@/types';", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc77187ae2d7c56d5a09701f5cc94b8c3c91d3a9"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTQyODk0NQ==", "bodyText": "fixed", "url": "https://github.com/nordic-institute/X-Road/pull/464#discussion_r409428945", "createdAt": "2020-04-16T09:52:12Z", "author": {"login": "TJaakkola"}, "path": "src/proxy-ui-api/frontend/src/store/modules/services.ts", "diffHunk": "@@ -1,12 +1,12 @@\n import { ActionTree, GetterTree, Module, MutationTree } from 'vuex';\n import { RootState } from '../types';\n-import {Endpoint, Service, ServiceClient, Subject} from '@/types';\n+import {Endpoint, Service, ServiceClient} from '@/types';", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTM3MjA0Mg=="}, "originalCommit": {"oid": "bc77187ae2d7c56d5a09701f5cc94b8c3c91d3a9"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0MjE1ODgxOnYy", "diffSide": "RIGHT", "path": "src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/openapi/ClientsApiController.java", "isResolved": true, "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxMDoyNzoyOVrOGGe3ig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQwOToyNDoyNVrOGI74Jg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTQ1MDM3OA==", "bodyText": "I think:\nClientNotFoundException should be a ResourceNotFoundException since client id is part of the resource path.\nLocalGroupNotFoundException should also be a ResourceNotFoundException for the same reason (service client id with nonexistend local group id is part of the resource path)\nBesides LocalGroupNotFoundException, also other non-existent service client ids (global groups, subsystems) should throw ResourceNotFoundExceptions to be consistent with local groups. So their existence should be checked. AccessRightService has a private verifyServiceClientIdentifiersExist for this purpose in branch XRDDEV-963-add-service-client-access-rights. A different approach, which is used in serviceClientService.getServiceClient, is probably also fine.\nIf existence is not checked, GET /clients/{id}/service-clients/{sc_id}/access-rights will return empty list for global group sc_id = FI:h\u00f6r\u00f6nl\u00f6r\u00f6 (if that does not exist) which is different from how getServiceClient and addServiceClientAccessRights work (both throw exceptions for sc_id FI:h\u00f6r\u00f6nl\u00f6r\u00f6). Although all of those three methods handle service clients in a different way and in some sense different semantics for \"missing service client\" could also be argued, I guess.", "url": "https://github.com/nordic-institute/X-Road/pull/464#discussion_r409450378", "createdAt": "2020-04-16T10:27:29Z", "author": {"login": "jansu76"}, "path": "src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/openapi/ClientsApiController.java", "diffHunk": "@@ -527,10 +544,70 @@ private ClientType getClientType(String encodedId) {\n         List<ServiceClient> serviceClients = null;\n         try {\n             serviceClients = serviceClientConverter.\n-                    convertAccessRightHolderDtos(accessRightService.getAccessRightHoldersByClient(clientId));\n+                    convertServiceClientDtos(serviceClientService.getServiceClientsByClient(clientId));\n         } catch (ClientNotFoundException e) {\n             throw new ResourceNotFoundException(e);\n         }\n         return new ResponseEntity<>(serviceClients, HttpStatus.OK);\n     }\n+\n+    @Override\n+    @PreAuthorize(\"hasAuthority('VIEW_CLIENT_ACL_SUBJECTS')\")\n+    public ResponseEntity<ServiceClient> getServiceClient(String id, String scId) {\n+        ClientId clientIdentifier = clientConverter.convertId(id);\n+        ServiceClientIdentifierDto serviceClientIdentifierDto = serviceClientIdentifierConverter.convertId(scId);\n+        ServiceClient serviceClient = null;\n+        try {\n+            serviceClient = serviceClientConverter.convertServiceClientDto(\n+                    serviceClientService.getServiceClient(clientIdentifier, serviceClientIdentifierDto));\n+        } catch (ClientNotFoundException | ServiceClientNotFoundException e) {\n+            throw new BadRequestException(e);\n+        }\n+\n+        return new ResponseEntity<>(serviceClient, HttpStatus.OK);\n+    }\n+\n+    @Override\n+    @PreAuthorize(\"hasAuthority('VIEW_ACL_SUBJECT_OPEN_SERVICES')\")\n+    public ResponseEntity<List<AccessRight>> getServiceClientAccessRights(String id, String scId) {\n+        ClientId clientIdentifier = clientConverter.convertId(id);\n+        ServiceClientIdentifierDto serviceClientIdentifierDto = serviceClientIdentifierConverter.convertId(scId);\n+        List<AccessRight> accessRights = null;\n+        try {\n+            accessRights = accessRightConverter.convert(\n+                    serviceClientService.getServiceClientAccessRights(clientIdentifier, serviceClientIdentifierDto));\n+        } catch (ClientNotFoundException | LocalGroupNotFoundException e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc77187ae2d7c56d5a09701f5cc94b8c3c91d3a9"}, "originalPosition": 176}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTU5MzQxMQ==", "bodyText": "ClientNotFoundException -> ResourceNotFoundException done", "url": "https://github.com/nordic-institute/X-Road/pull/464#discussion_r409593411", "createdAt": "2020-04-16T14:17:59Z", "author": {"login": "TJaakkola"}, "path": "src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/openapi/ClientsApiController.java", "diffHunk": "@@ -527,10 +544,70 @@ private ClientType getClientType(String encodedId) {\n         List<ServiceClient> serviceClients = null;\n         try {\n             serviceClients = serviceClientConverter.\n-                    convertAccessRightHolderDtos(accessRightService.getAccessRightHoldersByClient(clientId));\n+                    convertServiceClientDtos(serviceClientService.getServiceClientsByClient(clientId));\n         } catch (ClientNotFoundException e) {\n             throw new ResourceNotFoundException(e);\n         }\n         return new ResponseEntity<>(serviceClients, HttpStatus.OK);\n     }\n+\n+    @Override\n+    @PreAuthorize(\"hasAuthority('VIEW_CLIENT_ACL_SUBJECTS')\")\n+    public ResponseEntity<ServiceClient> getServiceClient(String id, String scId) {\n+        ClientId clientIdentifier = clientConverter.convertId(id);\n+        ServiceClientIdentifierDto serviceClientIdentifierDto = serviceClientIdentifierConverter.convertId(scId);\n+        ServiceClient serviceClient = null;\n+        try {\n+            serviceClient = serviceClientConverter.convertServiceClientDto(\n+                    serviceClientService.getServiceClient(clientIdentifier, serviceClientIdentifierDto));\n+        } catch (ClientNotFoundException | ServiceClientNotFoundException e) {\n+            throw new BadRequestException(e);\n+        }\n+\n+        return new ResponseEntity<>(serviceClient, HttpStatus.OK);\n+    }\n+\n+    @Override\n+    @PreAuthorize(\"hasAuthority('VIEW_ACL_SUBJECT_OPEN_SERVICES')\")\n+    public ResponseEntity<List<AccessRight>> getServiceClientAccessRights(String id, String scId) {\n+        ClientId clientIdentifier = clientConverter.convertId(id);\n+        ServiceClientIdentifierDto serviceClientIdentifierDto = serviceClientIdentifierConverter.convertId(scId);\n+        List<AccessRight> accessRights = null;\n+        try {\n+            accessRights = accessRightConverter.convert(\n+                    serviceClientService.getServiceClientAccessRights(clientIdentifier, serviceClientIdentifierDto));\n+        } catch (ClientNotFoundException | LocalGroupNotFoundException e) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTQ1MDM3OA=="}, "originalCommit": {"oid": "bc77187ae2d7c56d5a09701f5cc94b8c3c91d3a9"}, "originalPosition": 176}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTcxNDY0MQ==", "bodyText": "I think the fix went to a bit of wrong direction.\nServiceClientService.getServiceClientAccessRights should not throw openapi.ResourceNotFoundException, as that is reserved for openapi layer (controllers) only. Before the fix it threw\nClientNotFoundException, LocalGroupNotFoundException\nLocalGroupNotFoundException was thrown if local group with given ID did not exist, when service client was type LOCALGROUP. Similar thing should happen if service client is GLOBALGROUP or SUBSYSTEM type, and id was something that does not exist. To fix the FI:h\u00f6r\u00f6nl\u00f6r\u00f6 case and to work consistently for all service client types (same end result for bad globalgroup/subsystem as for localgroup). There's at least those options mentioned in my earlier comment, to do that.\nSo I think ServiceClientService.getServiceClientAccessRights should throw\nClientNotFoundException, ServiceClientNotFoundException\nand ServiceClientNotFoundException should cover all 3 types. Both exceptions then should be wrapped as ResourceNotFoundException in the controller.", "url": "https://github.com/nordic-institute/X-Road/pull/464#discussion_r409714641", "createdAt": "2020-04-16T17:07:05Z", "author": {"login": "jansu76"}, "path": "src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/openapi/ClientsApiController.java", "diffHunk": "@@ -527,10 +544,70 @@ private ClientType getClientType(String encodedId) {\n         List<ServiceClient> serviceClients = null;\n         try {\n             serviceClients = serviceClientConverter.\n-                    convertAccessRightHolderDtos(accessRightService.getAccessRightHoldersByClient(clientId));\n+                    convertServiceClientDtos(serviceClientService.getServiceClientsByClient(clientId));\n         } catch (ClientNotFoundException e) {\n             throw new ResourceNotFoundException(e);\n         }\n         return new ResponseEntity<>(serviceClients, HttpStatus.OK);\n     }\n+\n+    @Override\n+    @PreAuthorize(\"hasAuthority('VIEW_CLIENT_ACL_SUBJECTS')\")\n+    public ResponseEntity<ServiceClient> getServiceClient(String id, String scId) {\n+        ClientId clientIdentifier = clientConverter.convertId(id);\n+        ServiceClientIdentifierDto serviceClientIdentifierDto = serviceClientIdentifierConverter.convertId(scId);\n+        ServiceClient serviceClient = null;\n+        try {\n+            serviceClient = serviceClientConverter.convertServiceClientDto(\n+                    serviceClientService.getServiceClient(clientIdentifier, serviceClientIdentifierDto));\n+        } catch (ClientNotFoundException | ServiceClientNotFoundException e) {\n+            throw new BadRequestException(e);\n+        }\n+\n+        return new ResponseEntity<>(serviceClient, HttpStatus.OK);\n+    }\n+\n+    @Override\n+    @PreAuthorize(\"hasAuthority('VIEW_ACL_SUBJECT_OPEN_SERVICES')\")\n+    public ResponseEntity<List<AccessRight>> getServiceClientAccessRights(String id, String scId) {\n+        ClientId clientIdentifier = clientConverter.convertId(id);\n+        ServiceClientIdentifierDto serviceClientIdentifierDto = serviceClientIdentifierConverter.convertId(scId);\n+        List<AccessRight> accessRights = null;\n+        try {\n+            accessRights = accessRightConverter.convert(\n+                    serviceClientService.getServiceClientAccessRights(clientIdentifier, serviceClientIdentifierDto));\n+        } catch (ClientNotFoundException | LocalGroupNotFoundException e) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTQ1MDM3OA=="}, "originalCommit": {"oid": "bc77187ae2d7c56d5a09701f5cc94b8c3c91d3a9"}, "originalPosition": 176}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDM3MDAwMg==", "bodyText": "Hmm.. I think that due to the changes made to passing parameters to ServiceClientService.getServiceClientAccessRights (serviceClientId is passed as XRoadId). It should be clear by then that there shouldn't be need to handle what type of XRoadId was passed? Instead LocalGroupNotFoundException and ServiceClientNotFoundException are thrown from ServiceClientService.convertServiceClientIdentifierDtoToXroadId.", "url": "https://github.com/nordic-institute/X-Road/pull/464#discussion_r410370002", "createdAt": "2020-04-17T17:34:07Z", "author": {"login": "TJaakkola"}, "path": "src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/openapi/ClientsApiController.java", "diffHunk": "@@ -527,10 +544,70 @@ private ClientType getClientType(String encodedId) {\n         List<ServiceClient> serviceClients = null;\n         try {\n             serviceClients = serviceClientConverter.\n-                    convertAccessRightHolderDtos(accessRightService.getAccessRightHoldersByClient(clientId));\n+                    convertServiceClientDtos(serviceClientService.getServiceClientsByClient(clientId));\n         } catch (ClientNotFoundException e) {\n             throw new ResourceNotFoundException(e);\n         }\n         return new ResponseEntity<>(serviceClients, HttpStatus.OK);\n     }\n+\n+    @Override\n+    @PreAuthorize(\"hasAuthority('VIEW_CLIENT_ACL_SUBJECTS')\")\n+    public ResponseEntity<ServiceClient> getServiceClient(String id, String scId) {\n+        ClientId clientIdentifier = clientConverter.convertId(id);\n+        ServiceClientIdentifierDto serviceClientIdentifierDto = serviceClientIdentifierConverter.convertId(scId);\n+        ServiceClient serviceClient = null;\n+        try {\n+            serviceClient = serviceClientConverter.convertServiceClientDto(\n+                    serviceClientService.getServiceClient(clientIdentifier, serviceClientIdentifierDto));\n+        } catch (ClientNotFoundException | ServiceClientNotFoundException e) {\n+            throw new BadRequestException(e);\n+        }\n+\n+        return new ResponseEntity<>(serviceClient, HttpStatus.OK);\n+    }\n+\n+    @Override\n+    @PreAuthorize(\"hasAuthority('VIEW_ACL_SUBJECT_OPEN_SERVICES')\")\n+    public ResponseEntity<List<AccessRight>> getServiceClientAccessRights(String id, String scId) {\n+        ClientId clientIdentifier = clientConverter.convertId(id);\n+        ServiceClientIdentifierDto serviceClientIdentifierDto = serviceClientIdentifierConverter.convertId(scId);\n+        List<AccessRight> accessRights = null;\n+        try {\n+            accessRights = accessRightConverter.convert(\n+                    serviceClientService.getServiceClientAccessRights(clientIdentifier, serviceClientIdentifierDto));\n+        } catch (ClientNotFoundException | LocalGroupNotFoundException e) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTQ1MDM3OA=="}, "originalCommit": {"oid": "bc77187ae2d7c56d5a09701f5cc94b8c3c91d3a9"}, "originalPosition": 176}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTMyNjM0Ng==", "bodyText": "I could be mistaken, but I don't think ServiceClientService.convertServiceClientIdentifierDtoToXroadId solves this yet. Now GET  /clients/{id}/service-clients/{sc_id}/access-rights works like this\n\nlocal group does not belong to the client - no exception, empty list\nlocal group with given id does not exist - LocalGroupNotFoundException -> 404\nglobal group with given id does not exist - no exception, empty list\nsubsystem with given id does not exist - no exception, empty list\n\nCompare that to POST /clients/{id}/service-clients/{sc_id}/access-rights or POST /clients/{id}/service-clients/{sc_id}/access-rights/delete, they work like this\n\nlocal group does not belong to the client -> 404\nlocal group with given id does not exist -> 404\nglobal group with given id does not exist -> 404\nsubsystem with given id does not exist -> 404\n\nDifferent service client types (local group / global group / subsystem) should work consistently.\nConsistent behavior between service client types and two latter endpoints could easily be done by calling this method https://github.com/nordic-institute/X-Road/blob/XRDDEV-962-remove-service-client-access-rights/src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/service/AccessRightService.java#L589-L613. It's on a different branch but should not be very likely to change, could get away with just a copy paste to your branch?", "url": "https://github.com/nordic-institute/X-Road/pull/464#discussion_r411326346", "createdAt": "2020-04-20T12:11:12Z", "author": {"login": "jansu76"}, "path": "src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/openapi/ClientsApiController.java", "diffHunk": "@@ -527,10 +544,70 @@ private ClientType getClientType(String encodedId) {\n         List<ServiceClient> serviceClients = null;\n         try {\n             serviceClients = serviceClientConverter.\n-                    convertAccessRightHolderDtos(accessRightService.getAccessRightHoldersByClient(clientId));\n+                    convertServiceClientDtos(serviceClientService.getServiceClientsByClient(clientId));\n         } catch (ClientNotFoundException e) {\n             throw new ResourceNotFoundException(e);\n         }\n         return new ResponseEntity<>(serviceClients, HttpStatus.OK);\n     }\n+\n+    @Override\n+    @PreAuthorize(\"hasAuthority('VIEW_CLIENT_ACL_SUBJECTS')\")\n+    public ResponseEntity<ServiceClient> getServiceClient(String id, String scId) {\n+        ClientId clientIdentifier = clientConverter.convertId(id);\n+        ServiceClientIdentifierDto serviceClientIdentifierDto = serviceClientIdentifierConverter.convertId(scId);\n+        ServiceClient serviceClient = null;\n+        try {\n+            serviceClient = serviceClientConverter.convertServiceClientDto(\n+                    serviceClientService.getServiceClient(clientIdentifier, serviceClientIdentifierDto));\n+        } catch (ClientNotFoundException | ServiceClientNotFoundException e) {\n+            throw new BadRequestException(e);\n+        }\n+\n+        return new ResponseEntity<>(serviceClient, HttpStatus.OK);\n+    }\n+\n+    @Override\n+    @PreAuthorize(\"hasAuthority('VIEW_ACL_SUBJECT_OPEN_SERVICES')\")\n+    public ResponseEntity<List<AccessRight>> getServiceClientAccessRights(String id, String scId) {\n+        ClientId clientIdentifier = clientConverter.convertId(id);\n+        ServiceClientIdentifierDto serviceClientIdentifierDto = serviceClientIdentifierConverter.convertId(scId);\n+        List<AccessRight> accessRights = null;\n+        try {\n+            accessRights = accessRightConverter.convert(\n+                    serviceClientService.getServiceClientAccessRights(clientIdentifier, serviceClientIdentifierDto));\n+        } catch (ClientNotFoundException | LocalGroupNotFoundException e) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTQ1MDM3OA=="}, "originalCommit": {"oid": "bc77187ae2d7c56d5a09701f5cc94b8c3c91d3a9"}, "originalPosition": 176}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQwMTQwMw==", "bodyText": "That sounds better. But shouldn't method that verifies service client XRoadIds do exist reside in ServiceClientService instead of AccessRightService?", "url": "https://github.com/nordic-institute/X-Road/pull/464#discussion_r411401403", "createdAt": "2020-04-20T14:00:09Z", "author": {"login": "TJaakkola"}, "path": "src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/openapi/ClientsApiController.java", "diffHunk": "@@ -527,10 +544,70 @@ private ClientType getClientType(String encodedId) {\n         List<ServiceClient> serviceClients = null;\n         try {\n             serviceClients = serviceClientConverter.\n-                    convertAccessRightHolderDtos(accessRightService.getAccessRightHoldersByClient(clientId));\n+                    convertServiceClientDtos(serviceClientService.getServiceClientsByClient(clientId));\n         } catch (ClientNotFoundException e) {\n             throw new ResourceNotFoundException(e);\n         }\n         return new ResponseEntity<>(serviceClients, HttpStatus.OK);\n     }\n+\n+    @Override\n+    @PreAuthorize(\"hasAuthority('VIEW_CLIENT_ACL_SUBJECTS')\")\n+    public ResponseEntity<ServiceClient> getServiceClient(String id, String scId) {\n+        ClientId clientIdentifier = clientConverter.convertId(id);\n+        ServiceClientIdentifierDto serviceClientIdentifierDto = serviceClientIdentifierConverter.convertId(scId);\n+        ServiceClient serviceClient = null;\n+        try {\n+            serviceClient = serviceClientConverter.convertServiceClientDto(\n+                    serviceClientService.getServiceClient(clientIdentifier, serviceClientIdentifierDto));\n+        } catch (ClientNotFoundException | ServiceClientNotFoundException e) {\n+            throw new BadRequestException(e);\n+        }\n+\n+        return new ResponseEntity<>(serviceClient, HttpStatus.OK);\n+    }\n+\n+    @Override\n+    @PreAuthorize(\"hasAuthority('VIEW_ACL_SUBJECT_OPEN_SERVICES')\")\n+    public ResponseEntity<List<AccessRight>> getServiceClientAccessRights(String id, String scId) {\n+        ClientId clientIdentifier = clientConverter.convertId(id);\n+        ServiceClientIdentifierDto serviceClientIdentifierDto = serviceClientIdentifierConverter.convertId(scId);\n+        List<AccessRight> accessRights = null;\n+        try {\n+            accessRights = accessRightConverter.convert(\n+                    serviceClientService.getServiceClientAccessRights(clientIdentifier, serviceClientIdentifierDto));\n+        } catch (ClientNotFoundException | LocalGroupNotFoundException e) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTQ1MDM3OA=="}, "originalCommit": {"oid": "bc77187ae2d7c56d5a09701f5cc94b8c3c91d3a9"}, "originalPosition": 176}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjAyMjgyMg==", "bodyText": "Yeah, I think that is better place for it. Good point.", "url": "https://github.com/nordic-institute/X-Road/pull/464#discussion_r412022822", "createdAt": "2020-04-21T09:24:25Z", "author": {"login": "jansu76"}, "path": "src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/openapi/ClientsApiController.java", "diffHunk": "@@ -527,10 +544,70 @@ private ClientType getClientType(String encodedId) {\n         List<ServiceClient> serviceClients = null;\n         try {\n             serviceClients = serviceClientConverter.\n-                    convertAccessRightHolderDtos(accessRightService.getAccessRightHoldersByClient(clientId));\n+                    convertServiceClientDtos(serviceClientService.getServiceClientsByClient(clientId));\n         } catch (ClientNotFoundException e) {\n             throw new ResourceNotFoundException(e);\n         }\n         return new ResponseEntity<>(serviceClients, HttpStatus.OK);\n     }\n+\n+    @Override\n+    @PreAuthorize(\"hasAuthority('VIEW_CLIENT_ACL_SUBJECTS')\")\n+    public ResponseEntity<ServiceClient> getServiceClient(String id, String scId) {\n+        ClientId clientIdentifier = clientConverter.convertId(id);\n+        ServiceClientIdentifierDto serviceClientIdentifierDto = serviceClientIdentifierConverter.convertId(scId);\n+        ServiceClient serviceClient = null;\n+        try {\n+            serviceClient = serviceClientConverter.convertServiceClientDto(\n+                    serviceClientService.getServiceClient(clientIdentifier, serviceClientIdentifierDto));\n+        } catch (ClientNotFoundException | ServiceClientNotFoundException e) {\n+            throw new BadRequestException(e);\n+        }\n+\n+        return new ResponseEntity<>(serviceClient, HttpStatus.OK);\n+    }\n+\n+    @Override\n+    @PreAuthorize(\"hasAuthority('VIEW_ACL_SUBJECT_OPEN_SERVICES')\")\n+    public ResponseEntity<List<AccessRight>> getServiceClientAccessRights(String id, String scId) {\n+        ClientId clientIdentifier = clientConverter.convertId(id);\n+        ServiceClientIdentifierDto serviceClientIdentifierDto = serviceClientIdentifierConverter.convertId(scId);\n+        List<AccessRight> accessRights = null;\n+        try {\n+            accessRights = accessRightConverter.convert(\n+                    serviceClientService.getServiceClientAccessRights(clientIdentifier, serviceClientIdentifierDto));\n+        } catch (ClientNotFoundException | LocalGroupNotFoundException e) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTQ1MDM3OA=="}, "originalCommit": {"oid": "bc77187ae2d7c56d5a09701f5cc94b8c3c91d3a9"}, "originalPosition": 176}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0MjE2NTMzOnYy", "diffSide": "RIGHT", "path": "src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/openapi/ClientsApiController.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxMDoyOToyN1rOGGe7tA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QxNzozNjoxMVrOGHXEEQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTQ1MTQ0NA==", "bodyText": "Both ClientNotFoundException and ServiceClientNotFoundException should be a ResourceNotFoundException since ids are parts of the resource path", "url": "https://github.com/nordic-institute/X-Road/pull/464#discussion_r409451444", "createdAt": "2020-04-16T10:29:27Z", "author": {"login": "jansu76"}, "path": "src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/openapi/ClientsApiController.java", "diffHunk": "@@ -527,10 +544,70 @@ private ClientType getClientType(String encodedId) {\n         List<ServiceClient> serviceClients = null;\n         try {\n             serviceClients = serviceClientConverter.\n-                    convertAccessRightHolderDtos(accessRightService.getAccessRightHoldersByClient(clientId));\n+                    convertServiceClientDtos(serviceClientService.getServiceClientsByClient(clientId));\n         } catch (ClientNotFoundException e) {\n             throw new ResourceNotFoundException(e);\n         }\n         return new ResponseEntity<>(serviceClients, HttpStatus.OK);\n     }\n+\n+    @Override\n+    @PreAuthorize(\"hasAuthority('VIEW_CLIENT_ACL_SUBJECTS')\")\n+    public ResponseEntity<ServiceClient> getServiceClient(String id, String scId) {\n+        ClientId clientIdentifier = clientConverter.convertId(id);\n+        ServiceClientIdentifierDto serviceClientIdentifierDto = serviceClientIdentifierConverter.convertId(scId);\n+        ServiceClient serviceClient = null;\n+        try {\n+            serviceClient = serviceClientConverter.convertServiceClientDto(\n+                    serviceClientService.getServiceClient(clientIdentifier, serviceClientIdentifierDto));\n+        } catch (ClientNotFoundException | ServiceClientNotFoundException e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc77187ae2d7c56d5a09701f5cc94b8c3c91d3a9"}, "originalPosition": 160}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTU2NzAxNA==", "bodyText": "Fixed.", "url": "https://github.com/nordic-institute/X-Road/pull/464#discussion_r409567014", "createdAt": "2020-04-16T13:44:20Z", "author": {"login": "TJaakkola"}, "path": "src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/openapi/ClientsApiController.java", "diffHunk": "@@ -527,10 +544,70 @@ private ClientType getClientType(String encodedId) {\n         List<ServiceClient> serviceClients = null;\n         try {\n             serviceClients = serviceClientConverter.\n-                    convertAccessRightHolderDtos(accessRightService.getAccessRightHoldersByClient(clientId));\n+                    convertServiceClientDtos(serviceClientService.getServiceClientsByClient(clientId));\n         } catch (ClientNotFoundException e) {\n             throw new ResourceNotFoundException(e);\n         }\n         return new ResponseEntity<>(serviceClients, HttpStatus.OK);\n     }\n+\n+    @Override\n+    @PreAuthorize(\"hasAuthority('VIEW_CLIENT_ACL_SUBJECTS')\")\n+    public ResponseEntity<ServiceClient> getServiceClient(String id, String scId) {\n+        ClientId clientIdentifier = clientConverter.convertId(id);\n+        ServiceClientIdentifierDto serviceClientIdentifierDto = serviceClientIdentifierConverter.convertId(scId);\n+        ServiceClient serviceClient = null;\n+        try {\n+            serviceClient = serviceClientConverter.convertServiceClientDto(\n+                    serviceClientService.getServiceClient(clientIdentifier, serviceClientIdentifierDto));\n+        } catch (ClientNotFoundException | ServiceClientNotFoundException e) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTQ1MTQ0NA=="}, "originalCommit": {"oid": "bc77187ae2d7c56d5a09701f5cc94b8c3c91d3a9"}, "originalPosition": 160}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTcxNTk4OA==", "bodyText": "See earlier comment, I meant service should continue to throw them as ClientNotFoundException and ServiceClientNotFoundException, but controller should then wrap those in ResourceNotFoundException, instead of BadRequestException. Sorry for unclear comment.", "url": "https://github.com/nordic-institute/X-Road/pull/464#discussion_r409715988", "createdAt": "2020-04-16T17:09:25Z", "author": {"login": "jansu76"}, "path": "src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/openapi/ClientsApiController.java", "diffHunk": "@@ -527,10 +544,70 @@ private ClientType getClientType(String encodedId) {\n         List<ServiceClient> serviceClients = null;\n         try {\n             serviceClients = serviceClientConverter.\n-                    convertAccessRightHolderDtos(accessRightService.getAccessRightHoldersByClient(clientId));\n+                    convertServiceClientDtos(serviceClientService.getServiceClientsByClient(clientId));\n         } catch (ClientNotFoundException e) {\n             throw new ResourceNotFoundException(e);\n         }\n         return new ResponseEntity<>(serviceClients, HttpStatus.OK);\n     }\n+\n+    @Override\n+    @PreAuthorize(\"hasAuthority('VIEW_CLIENT_ACL_SUBJECTS')\")\n+    public ResponseEntity<ServiceClient> getServiceClient(String id, String scId) {\n+        ClientId clientIdentifier = clientConverter.convertId(id);\n+        ServiceClientIdentifierDto serviceClientIdentifierDto = serviceClientIdentifierConverter.convertId(scId);\n+        ServiceClient serviceClient = null;\n+        try {\n+            serviceClient = serviceClientConverter.convertServiceClientDto(\n+                    serviceClientService.getServiceClient(clientIdentifier, serviceClientIdentifierDto));\n+        } catch (ClientNotFoundException | ServiceClientNotFoundException e) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTQ1MTQ0NA=="}, "originalCommit": {"oid": "bc77187ae2d7c56d5a09701f5cc94b8c3c91d3a9"}, "originalPosition": 160}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDM3MTA4OQ==", "bodyText": "Fixed vol. 2", "url": "https://github.com/nordic-institute/X-Road/pull/464#discussion_r410371089", "createdAt": "2020-04-17T17:36:11Z", "author": {"login": "TJaakkola"}, "path": "src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/openapi/ClientsApiController.java", "diffHunk": "@@ -527,10 +544,70 @@ private ClientType getClientType(String encodedId) {\n         List<ServiceClient> serviceClients = null;\n         try {\n             serviceClients = serviceClientConverter.\n-                    convertAccessRightHolderDtos(accessRightService.getAccessRightHoldersByClient(clientId));\n+                    convertServiceClientDtos(serviceClientService.getServiceClientsByClient(clientId));\n         } catch (ClientNotFoundException e) {\n             throw new ResourceNotFoundException(e);\n         }\n         return new ResponseEntity<>(serviceClients, HttpStatus.OK);\n     }\n+\n+    @Override\n+    @PreAuthorize(\"hasAuthority('VIEW_CLIENT_ACL_SUBJECTS')\")\n+    public ResponseEntity<ServiceClient> getServiceClient(String id, String scId) {\n+        ClientId clientIdentifier = clientConverter.convertId(id);\n+        ServiceClientIdentifierDto serviceClientIdentifierDto = serviceClientIdentifierConverter.convertId(scId);\n+        ServiceClient serviceClient = null;\n+        try {\n+            serviceClient = serviceClientConverter.convertServiceClientDto(\n+                    serviceClientService.getServiceClient(clientIdentifier, serviceClientIdentifierDto));\n+        } catch (ClientNotFoundException | ServiceClientNotFoundException e) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTQ1MTQ0NA=="}, "originalCommit": {"oid": "bc77187ae2d7c56d5a09701f5cc94b8c3c91d3a9"}, "originalPosition": 160}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0MjI0MDU1OnYy", "diffSide": "RIGHT", "path": "src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/service/ServiceClientService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxMDo1MDoxN1rOGGfpbQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxNDoxNDowOVrOGGnaPA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTQ2MzE0OQ==", "bodyText": "Would using naming such as \"owner\" instead of generic \"client\" make the method easier to understand? Or \"serviceOwner\"? For method name, or parameter name, or both? Since service clients can also have a \"client\" (service client subject) this can get a bit confusing.", "url": "https://github.com/nordic-institute/X-Road/pull/464#discussion_r409463149", "createdAt": "2020-04-16T10:50:17Z", "author": {"login": "jansu76"}, "path": "src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/service/ServiceClientService.java", "diffHunk": "@@ -0,0 +1,241 @@\n+/**\n+ * The MIT License\n+ * Copyright (c) 2018 Estonian Information System Authority (RIA),\n+ * Nordic Institute for Interoperability Solutions (NIIS), Population Register Centre (VRK)\n+ * Copyright (c) 2015-2017 Estonian Information System Authority (RIA), Population Register Centre (VRK)\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package org.niis.xroad.restapi.service;\n+\n+import ee.ria.xroad.common.conf.serverconf.model.AccessRightType;\n+import ee.ria.xroad.common.conf.serverconf.model.ClientType;\n+import ee.ria.xroad.common.conf.serverconf.model.EndpointType;\n+import ee.ria.xroad.common.conf.serverconf.model.ServiceType;\n+import ee.ria.xroad.common.identifier.ClientId;\n+import ee.ria.xroad.common.identifier.XRoadId;\n+\n+import lombok.extern.slf4j.Slf4j;\n+import org.niis.xroad.restapi.dto.ServiceClientAccessRightDto;\n+import org.niis.xroad.restapi.dto.ServiceClientDto;\n+import org.niis.xroad.restapi.dto.ServiceClientIdentifierDto;\n+import org.niis.xroad.restapi.repository.ClientRepository;\n+import org.niis.xroad.restapi.util.FormatUtils;\n+import org.springframework.security.access.prepost.PreAuthorize;\n+import org.springframework.stereotype.Service;\n+\n+import javax.transaction.Transactional;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+@Slf4j\n+@Service\n+@Transactional\n+@PreAuthorize(\"isAuthenticated()\")\n+public class ServiceClientService {\n+\n+    private final ClientRepository clientRepository;\n+    private final ServiceService serviceService;\n+    private final EndpointService endpointService;\n+    private final AccessRightService accessRightService;\n+    private final LocalGroupService localGroupService;\n+\n+    public ServiceClientService(ClientRepository clientRepository, ServiceService serviceService,\n+            EndpointService endpointService, AccessRightService accessRightService,\n+            LocalGroupService localGroupService) {\n+        this.clientRepository = clientRepository;\n+        this.serviceService = serviceService;\n+        this.endpointService = endpointService;\n+        this.accessRightService = accessRightService;\n+        this.localGroupService = localGroupService;\n+    }\n+\n+    /**\n+     * Get access right holders (serviceClients) by Client (service owner)\n+     *\n+     * The concept of base endpoint is used to find service level access rights in this method.\n+     * Base endpoint is in other words service (code) level endpoint.\n+     * Each service has one base endpoint.\n+     * Base endpoint has method '*' and path '**'.\n+     *\n+     * @param clientId\n+     * @return\n+     * @throws ClientNotFoundException\n+     *\n+     */\n+    public List<ServiceClientDto> getServiceClientsByClient(ClientId clientId)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc77187ae2d7c56d5a09701f5cc94b8c3c91d3a9"}, "originalPosition": 86}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTU5MDMzMg==", "bodyText": "Renamed Client clientId in method declarations to Client ownerId and used ClientType owner in method implementation.", "url": "https://github.com/nordic-institute/X-Road/pull/464#discussion_r409590332", "createdAt": "2020-04-16T14:14:09Z", "author": {"login": "TJaakkola"}, "path": "src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/service/ServiceClientService.java", "diffHunk": "@@ -0,0 +1,241 @@\n+/**\n+ * The MIT License\n+ * Copyright (c) 2018 Estonian Information System Authority (RIA),\n+ * Nordic Institute for Interoperability Solutions (NIIS), Population Register Centre (VRK)\n+ * Copyright (c) 2015-2017 Estonian Information System Authority (RIA), Population Register Centre (VRK)\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package org.niis.xroad.restapi.service;\n+\n+import ee.ria.xroad.common.conf.serverconf.model.AccessRightType;\n+import ee.ria.xroad.common.conf.serverconf.model.ClientType;\n+import ee.ria.xroad.common.conf.serverconf.model.EndpointType;\n+import ee.ria.xroad.common.conf.serverconf.model.ServiceType;\n+import ee.ria.xroad.common.identifier.ClientId;\n+import ee.ria.xroad.common.identifier.XRoadId;\n+\n+import lombok.extern.slf4j.Slf4j;\n+import org.niis.xroad.restapi.dto.ServiceClientAccessRightDto;\n+import org.niis.xroad.restapi.dto.ServiceClientDto;\n+import org.niis.xroad.restapi.dto.ServiceClientIdentifierDto;\n+import org.niis.xroad.restapi.repository.ClientRepository;\n+import org.niis.xroad.restapi.util.FormatUtils;\n+import org.springframework.security.access.prepost.PreAuthorize;\n+import org.springframework.stereotype.Service;\n+\n+import javax.transaction.Transactional;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+@Slf4j\n+@Service\n+@Transactional\n+@PreAuthorize(\"isAuthenticated()\")\n+public class ServiceClientService {\n+\n+    private final ClientRepository clientRepository;\n+    private final ServiceService serviceService;\n+    private final EndpointService endpointService;\n+    private final AccessRightService accessRightService;\n+    private final LocalGroupService localGroupService;\n+\n+    public ServiceClientService(ClientRepository clientRepository, ServiceService serviceService,\n+            EndpointService endpointService, AccessRightService accessRightService,\n+            LocalGroupService localGroupService) {\n+        this.clientRepository = clientRepository;\n+        this.serviceService = serviceService;\n+        this.endpointService = endpointService;\n+        this.accessRightService = accessRightService;\n+        this.localGroupService = localGroupService;\n+    }\n+\n+    /**\n+     * Get access right holders (serviceClients) by Client (service owner)\n+     *\n+     * The concept of base endpoint is used to find service level access rights in this method.\n+     * Base endpoint is in other words service (code) level endpoint.\n+     * Each service has one base endpoint.\n+     * Base endpoint has method '*' and path '**'.\n+     *\n+     * @param clientId\n+     * @return\n+     * @throws ClientNotFoundException\n+     *\n+     */\n+    public List<ServiceClientDto> getServiceClientsByClient(ClientId clientId)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTQ2MzE0OQ=="}, "originalCommit": {"oid": "bc77187ae2d7c56d5a09701f5cc94b8c3c91d3a9"}, "originalPosition": 86}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0MjI0NDE4OnYy", "diffSide": "RIGHT", "path": "src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/service/ServiceClientService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxMDo1MToyN1rOGGfrqQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxMzo1MTo1M1rOGGmWUA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTQ2MzcyMQ==", "bodyText": "comments in ClientsApiController, but these could operate on XRoadIds instead of ServiceClientIdentifierDtos", "url": "https://github.com/nordic-institute/X-Road/pull/464#discussion_r409463721", "createdAt": "2020-04-16T10:51:27Z", "author": {"login": "jansu76"}, "path": "src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/service/ServiceClientService.java", "diffHunk": "@@ -0,0 +1,241 @@\n+/**\n+ * The MIT License\n+ * Copyright (c) 2018 Estonian Information System Authority (RIA),\n+ * Nordic Institute for Interoperability Solutions (NIIS), Population Register Centre (VRK)\n+ * Copyright (c) 2015-2017 Estonian Information System Authority (RIA), Population Register Centre (VRK)\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package org.niis.xroad.restapi.service;\n+\n+import ee.ria.xroad.common.conf.serverconf.model.AccessRightType;\n+import ee.ria.xroad.common.conf.serverconf.model.ClientType;\n+import ee.ria.xroad.common.conf.serverconf.model.EndpointType;\n+import ee.ria.xroad.common.conf.serverconf.model.ServiceType;\n+import ee.ria.xroad.common.identifier.ClientId;\n+import ee.ria.xroad.common.identifier.XRoadId;\n+\n+import lombok.extern.slf4j.Slf4j;\n+import org.niis.xroad.restapi.dto.ServiceClientAccessRightDto;\n+import org.niis.xroad.restapi.dto.ServiceClientDto;\n+import org.niis.xroad.restapi.dto.ServiceClientIdentifierDto;\n+import org.niis.xroad.restapi.repository.ClientRepository;\n+import org.niis.xroad.restapi.util.FormatUtils;\n+import org.springframework.security.access.prepost.PreAuthorize;\n+import org.springframework.stereotype.Service;\n+\n+import javax.transaction.Transactional;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+@Slf4j\n+@Service\n+@Transactional\n+@PreAuthorize(\"isAuthenticated()\")\n+public class ServiceClientService {\n+\n+    private final ClientRepository clientRepository;\n+    private final ServiceService serviceService;\n+    private final EndpointService endpointService;\n+    private final AccessRightService accessRightService;\n+    private final LocalGroupService localGroupService;\n+\n+    public ServiceClientService(ClientRepository clientRepository, ServiceService serviceService,\n+            EndpointService endpointService, AccessRightService accessRightService,\n+            LocalGroupService localGroupService) {\n+        this.clientRepository = clientRepository;\n+        this.serviceService = serviceService;\n+        this.endpointService = endpointService;\n+        this.accessRightService = accessRightService;\n+        this.localGroupService = localGroupService;\n+    }\n+\n+    /**\n+     * Get access right holders (serviceClients) by Client (service owner)\n+     *\n+     * The concept of base endpoint is used to find service level access rights in this method.\n+     * Base endpoint is in other words service (code) level endpoint.\n+     * Each service has one base endpoint.\n+     * Base endpoint has method '*' and path '**'.\n+     *\n+     * @param clientId\n+     * @return\n+     * @throws ClientNotFoundException\n+     *\n+     */\n+    public List<ServiceClientDto> getServiceClientsByClient(ClientId clientId)\n+            throws ClientNotFoundException {\n+        ClientType clientType = clientRepository.getClient(clientId);\n+        if (clientType == null) {\n+            throw new ClientNotFoundException(\"Client \" + clientId.toShortString() + \" not found\");\n+        }\n+\n+        // Filter just acls that are set to base endpoints so they are on service code level\n+        List<AccessRightType> serviceCodeLevelAcls = clientType.getAcl().stream()\n+                .filter(acl -> acl.getEndpoint().isBaseEndpoint())\n+                .collect(Collectors.toList());\n+        List<AccessRightType> distinctAccessRightTypes = distinctAccessRightTypeByXroadId(serviceCodeLevelAcls);\n+        return accessRightService.mapAccessRightsToServiceClients(clientType, distinctAccessRightTypes);\n+    }\n+\n+    // Get unique AccessRightTypes from the given list\n+    private List<AccessRightType> distinctAccessRightTypeByXroadId(List<AccessRightType> acls) {\n+        HashMap<XRoadId, AccessRightType> uniqueServiceClientMap = new HashMap<>();\n+        for (AccessRightType acl : acls) {\n+            if (!uniqueServiceClientMap.containsKey(acl.getSubjectId())) {\n+                uniqueServiceClientMap.put(acl.getSubjectId(), acl);\n+            }\n+        }\n+        return new ArrayList(uniqueServiceClientMap.values());\n+    }\n+\n+    /**\n+     * Get single service client\n+     *\n+     * @param clientId\n+     * @param dto\n+     * @return\n+     * @throws ClientNotFoundException if client with given id is not found\n+     * @throws ServiceClientNotFoundException if service client with given parameters is not found\n+     */\n+    public ServiceClientDto getServiceClient(ClientId clientId, ServiceClientIdentifierDto dto)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc77187ae2d7c56d5a09701f5cc94b8c3c91d3a9"}, "originalPosition": 121}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTU3Mjk0NA==", "bodyText": "Fix'd", "url": "https://github.com/nordic-institute/X-Road/pull/464#discussion_r409572944", "createdAt": "2020-04-16T13:51:53Z", "author": {"login": "TJaakkola"}, "path": "src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/service/ServiceClientService.java", "diffHunk": "@@ -0,0 +1,241 @@\n+/**\n+ * The MIT License\n+ * Copyright (c) 2018 Estonian Information System Authority (RIA),\n+ * Nordic Institute for Interoperability Solutions (NIIS), Population Register Centre (VRK)\n+ * Copyright (c) 2015-2017 Estonian Information System Authority (RIA), Population Register Centre (VRK)\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package org.niis.xroad.restapi.service;\n+\n+import ee.ria.xroad.common.conf.serverconf.model.AccessRightType;\n+import ee.ria.xroad.common.conf.serverconf.model.ClientType;\n+import ee.ria.xroad.common.conf.serverconf.model.EndpointType;\n+import ee.ria.xroad.common.conf.serverconf.model.ServiceType;\n+import ee.ria.xroad.common.identifier.ClientId;\n+import ee.ria.xroad.common.identifier.XRoadId;\n+\n+import lombok.extern.slf4j.Slf4j;\n+import org.niis.xroad.restapi.dto.ServiceClientAccessRightDto;\n+import org.niis.xroad.restapi.dto.ServiceClientDto;\n+import org.niis.xroad.restapi.dto.ServiceClientIdentifierDto;\n+import org.niis.xroad.restapi.repository.ClientRepository;\n+import org.niis.xroad.restapi.util.FormatUtils;\n+import org.springframework.security.access.prepost.PreAuthorize;\n+import org.springframework.stereotype.Service;\n+\n+import javax.transaction.Transactional;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+@Slf4j\n+@Service\n+@Transactional\n+@PreAuthorize(\"isAuthenticated()\")\n+public class ServiceClientService {\n+\n+    private final ClientRepository clientRepository;\n+    private final ServiceService serviceService;\n+    private final EndpointService endpointService;\n+    private final AccessRightService accessRightService;\n+    private final LocalGroupService localGroupService;\n+\n+    public ServiceClientService(ClientRepository clientRepository, ServiceService serviceService,\n+            EndpointService endpointService, AccessRightService accessRightService,\n+            LocalGroupService localGroupService) {\n+        this.clientRepository = clientRepository;\n+        this.serviceService = serviceService;\n+        this.endpointService = endpointService;\n+        this.accessRightService = accessRightService;\n+        this.localGroupService = localGroupService;\n+    }\n+\n+    /**\n+     * Get access right holders (serviceClients) by Client (service owner)\n+     *\n+     * The concept of base endpoint is used to find service level access rights in this method.\n+     * Base endpoint is in other words service (code) level endpoint.\n+     * Each service has one base endpoint.\n+     * Base endpoint has method '*' and path '**'.\n+     *\n+     * @param clientId\n+     * @return\n+     * @throws ClientNotFoundException\n+     *\n+     */\n+    public List<ServiceClientDto> getServiceClientsByClient(ClientId clientId)\n+            throws ClientNotFoundException {\n+        ClientType clientType = clientRepository.getClient(clientId);\n+        if (clientType == null) {\n+            throw new ClientNotFoundException(\"Client \" + clientId.toShortString() + \" not found\");\n+        }\n+\n+        // Filter just acls that are set to base endpoints so they are on service code level\n+        List<AccessRightType> serviceCodeLevelAcls = clientType.getAcl().stream()\n+                .filter(acl -> acl.getEndpoint().isBaseEndpoint())\n+                .collect(Collectors.toList());\n+        List<AccessRightType> distinctAccessRightTypes = distinctAccessRightTypeByXroadId(serviceCodeLevelAcls);\n+        return accessRightService.mapAccessRightsToServiceClients(clientType, distinctAccessRightTypes);\n+    }\n+\n+    // Get unique AccessRightTypes from the given list\n+    private List<AccessRightType> distinctAccessRightTypeByXroadId(List<AccessRightType> acls) {\n+        HashMap<XRoadId, AccessRightType> uniqueServiceClientMap = new HashMap<>();\n+        for (AccessRightType acl : acls) {\n+            if (!uniqueServiceClientMap.containsKey(acl.getSubjectId())) {\n+                uniqueServiceClientMap.put(acl.getSubjectId(), acl);\n+            }\n+        }\n+        return new ArrayList(uniqueServiceClientMap.values());\n+    }\n+\n+    /**\n+     * Get single service client\n+     *\n+     * @param clientId\n+     * @param dto\n+     * @return\n+     * @throws ClientNotFoundException if client with given id is not found\n+     * @throws ServiceClientNotFoundException if service client with given parameters is not found\n+     */\n+    public ServiceClientDto getServiceClient(ClientId clientId, ServiceClientIdentifierDto dto)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTQ2MzcyMQ=="}, "originalCommit": {"oid": "bc77187ae2d7c56d5a09701f5cc94b8c3c91d3a9"}, "originalPosition": 121}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0MjI5NTMxOnYy", "diffSide": "RIGHT", "path": "src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/service/AccessRightService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxMTowNjozMlrOGGgLXQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxMzozOToxMVrOGGlwdg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTQ3MTgzNw==", "bodyText": "private final LocalGroupRepository localGroupRepository is unused", "url": "https://github.com/nordic-institute/X-Road/pull/464#discussion_r409471837", "createdAt": "2020-04-16T11:06:32Z", "author": {"login": "jansu76"}, "path": "src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/service/AccessRightService.java", "diffHunk": "@@ -78,147 +79,23 @@\n     private final ServiceService serviceService;\n     private final IdentifierService identifierService;\n     private final GlobalConfService globalConfService;\n-    private final EndpointRepository endpointRepository;\n     private final EndpointService endpointService;\n+    private final LocalGroupService localGroupService;\n \n     @Autowired\n     public AccessRightService(LocalGroupRepository localGroupRepository, GlobalConfFacade globalConfFacade,\n             ClientRepository clientRepository, ServiceService serviceService, IdentifierService identifierService,\n-            GlobalConfService globalConfService, EndpointRepository endpointRepository,\n-            EndpointService endpointService) {\n+            GlobalConfService globalConfService,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc77187ae2d7c56d5a09701f5cc94b8c3c91d3a9"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTU2MzI1NA==", "bodyText": "Removed", "url": "https://github.com/nordic-institute/X-Road/pull/464#discussion_r409563254", "createdAt": "2020-04-16T13:39:11Z", "author": {"login": "TJaakkola"}, "path": "src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/service/AccessRightService.java", "diffHunk": "@@ -78,147 +79,23 @@\n     private final ServiceService serviceService;\n     private final IdentifierService identifierService;\n     private final GlobalConfService globalConfService;\n-    private final EndpointRepository endpointRepository;\n     private final EndpointService endpointService;\n+    private final LocalGroupService localGroupService;\n \n     @Autowired\n     public AccessRightService(LocalGroupRepository localGroupRepository, GlobalConfFacade globalConfFacade,\n             ClientRepository clientRepository, ServiceService serviceService, IdentifierService identifierService,\n-            GlobalConfService globalConfService, EndpointRepository endpointRepository,\n-            EndpointService endpointService) {\n+            GlobalConfService globalConfService,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTQ3MTgzNw=="}, "originalCommit": {"oid": "bc77187ae2d7c56d5a09701f5cc94b8c3c91d3a9"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0MjMwOTMxOnYy", "diffSide": "RIGHT", "path": "src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/service/ServiceClientService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxMToxMDo0OVrOGGgT-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QxNTo1NDoyOVrOGHTnXQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTQ3NDA0Mw==", "bodyText": "Sonar claims this is not tested, maybe consider testing?\nhttps://sonarqube.niis.org/component_measures?id=xroad&metric=new_coverage&pullRequest=464&selected=xroad%3Aproxy-ui-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fniis%2Fxroad%2Frestapi%2Fservice%2FServiceClientService.java", "url": "https://github.com/nordic-institute/X-Road/pull/464#discussion_r409474043", "createdAt": "2020-04-16T11:10:49Z", "author": {"login": "jansu76"}, "path": "src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/service/ServiceClientService.java", "diffHunk": "@@ -0,0 +1,241 @@\n+/**\n+ * The MIT License\n+ * Copyright (c) 2018 Estonian Information System Authority (RIA),\n+ * Nordic Institute for Interoperability Solutions (NIIS), Population Register Centre (VRK)\n+ * Copyright (c) 2015-2017 Estonian Information System Authority (RIA), Population Register Centre (VRK)\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package org.niis.xroad.restapi.service;\n+\n+import ee.ria.xroad.common.conf.serverconf.model.AccessRightType;\n+import ee.ria.xroad.common.conf.serverconf.model.ClientType;\n+import ee.ria.xroad.common.conf.serverconf.model.EndpointType;\n+import ee.ria.xroad.common.conf.serverconf.model.ServiceType;\n+import ee.ria.xroad.common.identifier.ClientId;\n+import ee.ria.xroad.common.identifier.XRoadId;\n+\n+import lombok.extern.slf4j.Slf4j;\n+import org.niis.xroad.restapi.dto.ServiceClientAccessRightDto;\n+import org.niis.xroad.restapi.dto.ServiceClientDto;\n+import org.niis.xroad.restapi.dto.ServiceClientIdentifierDto;\n+import org.niis.xroad.restapi.repository.ClientRepository;\n+import org.niis.xroad.restapi.util.FormatUtils;\n+import org.springframework.security.access.prepost.PreAuthorize;\n+import org.springframework.stereotype.Service;\n+\n+import javax.transaction.Transactional;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+@Slf4j\n+@Service\n+@Transactional\n+@PreAuthorize(\"isAuthenticated()\")\n+public class ServiceClientService {\n+\n+    private final ClientRepository clientRepository;\n+    private final ServiceService serviceService;\n+    private final EndpointService endpointService;\n+    private final AccessRightService accessRightService;\n+    private final LocalGroupService localGroupService;\n+\n+    public ServiceClientService(ClientRepository clientRepository, ServiceService serviceService,\n+            EndpointService endpointService, AccessRightService accessRightService,\n+            LocalGroupService localGroupService) {\n+        this.clientRepository = clientRepository;\n+        this.serviceService = serviceService;\n+        this.endpointService = endpointService;\n+        this.accessRightService = accessRightService;\n+        this.localGroupService = localGroupService;\n+    }\n+\n+    /**\n+     * Get access right holders (serviceClients) by Client (service owner)\n+     *\n+     * The concept of base endpoint is used to find service level access rights in this method.\n+     * Base endpoint is in other words service (code) level endpoint.\n+     * Each service has one base endpoint.\n+     * Base endpoint has method '*' and path '**'.\n+     *\n+     * @param clientId\n+     * @return\n+     * @throws ClientNotFoundException\n+     *\n+     */\n+    public List<ServiceClientDto> getServiceClientsByClient(ClientId clientId)\n+            throws ClientNotFoundException {\n+        ClientType clientType = clientRepository.getClient(clientId);\n+        if (clientType == null) {\n+            throw new ClientNotFoundException(\"Client \" + clientId.toShortString() + \" not found\");\n+        }\n+\n+        // Filter just acls that are set to base endpoints so they are on service code level\n+        List<AccessRightType> serviceCodeLevelAcls = clientType.getAcl().stream()\n+                .filter(acl -> acl.getEndpoint().isBaseEndpoint())\n+                .collect(Collectors.toList());\n+        List<AccessRightType> distinctAccessRightTypes = distinctAccessRightTypeByXroadId(serviceCodeLevelAcls);\n+        return accessRightService.mapAccessRightsToServiceClients(clientType, distinctAccessRightTypes);\n+    }\n+\n+    // Get unique AccessRightTypes from the given list\n+    private List<AccessRightType> distinctAccessRightTypeByXroadId(List<AccessRightType> acls) {\n+        HashMap<XRoadId, AccessRightType> uniqueServiceClientMap = new HashMap<>();\n+        for (AccessRightType acl : acls) {\n+            if (!uniqueServiceClientMap.containsKey(acl.getSubjectId())) {\n+                uniqueServiceClientMap.put(acl.getSubjectId(), acl);\n+            }\n+        }\n+        return new ArrayList(uniqueServiceClientMap.values());\n+    }\n+\n+    /**\n+     * Get single service client\n+     *\n+     * @param clientId\n+     * @param dto\n+     * @return\n+     * @throws ClientNotFoundException if client with given id is not found\n+     * @throws ServiceClientNotFoundException if service client with given parameters is not found\n+     */\n+    public ServiceClientDto getServiceClient(ClientId clientId, ServiceClientIdentifierDto dto)\n+            throws ClientNotFoundException, ServiceClientNotFoundException {\n+        List<ServiceClientDto> serviceClientsByClient = getServiceClientsByClient(clientId);\n+        return serviceClientsByClient.stream()\n+            .filter(scDto -> dto.isLocalGroup()\n+                    ? dto.getLocalGroupId().toString().equals(scDto.getLocalGroupId())\n+                    : dto.getXRoadId().equals(scDto.getSubjectId()))\n+            .findFirst()\n+            .orElseThrow(() -> {\n+                String serviceClientIdentifier = dto.isLocalGroup()\n+                        ? \"Localgroup id: \" + dto.getLocalGroupId()\n+                        : \"xRoadId: \" + dto.getXRoadId().toShortString();\n+                return new ServiceClientNotFoundException(\"Service client not found for ClientId: \"\n+                        + clientId.toShortString() + \" and \" + serviceClientIdentifier);\n+            });", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc77187ae2d7c56d5a09701f5cc94b8c3c91d3a9"}, "originalPosition": 135}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDMxNDU4OQ==", "bodyText": "Added a test for testing searching a service client from a client that doesn't contain it.", "url": "https://github.com/nordic-institute/X-Road/pull/464#discussion_r410314589", "createdAt": "2020-04-17T15:54:29Z", "author": {"login": "TJaakkola"}, "path": "src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/service/ServiceClientService.java", "diffHunk": "@@ -0,0 +1,241 @@\n+/**\n+ * The MIT License\n+ * Copyright (c) 2018 Estonian Information System Authority (RIA),\n+ * Nordic Institute for Interoperability Solutions (NIIS), Population Register Centre (VRK)\n+ * Copyright (c) 2015-2017 Estonian Information System Authority (RIA), Population Register Centre (VRK)\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package org.niis.xroad.restapi.service;\n+\n+import ee.ria.xroad.common.conf.serverconf.model.AccessRightType;\n+import ee.ria.xroad.common.conf.serverconf.model.ClientType;\n+import ee.ria.xroad.common.conf.serverconf.model.EndpointType;\n+import ee.ria.xroad.common.conf.serverconf.model.ServiceType;\n+import ee.ria.xroad.common.identifier.ClientId;\n+import ee.ria.xroad.common.identifier.XRoadId;\n+\n+import lombok.extern.slf4j.Slf4j;\n+import org.niis.xroad.restapi.dto.ServiceClientAccessRightDto;\n+import org.niis.xroad.restapi.dto.ServiceClientDto;\n+import org.niis.xroad.restapi.dto.ServiceClientIdentifierDto;\n+import org.niis.xroad.restapi.repository.ClientRepository;\n+import org.niis.xroad.restapi.util.FormatUtils;\n+import org.springframework.security.access.prepost.PreAuthorize;\n+import org.springframework.stereotype.Service;\n+\n+import javax.transaction.Transactional;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+@Slf4j\n+@Service\n+@Transactional\n+@PreAuthorize(\"isAuthenticated()\")\n+public class ServiceClientService {\n+\n+    private final ClientRepository clientRepository;\n+    private final ServiceService serviceService;\n+    private final EndpointService endpointService;\n+    private final AccessRightService accessRightService;\n+    private final LocalGroupService localGroupService;\n+\n+    public ServiceClientService(ClientRepository clientRepository, ServiceService serviceService,\n+            EndpointService endpointService, AccessRightService accessRightService,\n+            LocalGroupService localGroupService) {\n+        this.clientRepository = clientRepository;\n+        this.serviceService = serviceService;\n+        this.endpointService = endpointService;\n+        this.accessRightService = accessRightService;\n+        this.localGroupService = localGroupService;\n+    }\n+\n+    /**\n+     * Get access right holders (serviceClients) by Client (service owner)\n+     *\n+     * The concept of base endpoint is used to find service level access rights in this method.\n+     * Base endpoint is in other words service (code) level endpoint.\n+     * Each service has one base endpoint.\n+     * Base endpoint has method '*' and path '**'.\n+     *\n+     * @param clientId\n+     * @return\n+     * @throws ClientNotFoundException\n+     *\n+     */\n+    public List<ServiceClientDto> getServiceClientsByClient(ClientId clientId)\n+            throws ClientNotFoundException {\n+        ClientType clientType = clientRepository.getClient(clientId);\n+        if (clientType == null) {\n+            throw new ClientNotFoundException(\"Client \" + clientId.toShortString() + \" not found\");\n+        }\n+\n+        // Filter just acls that are set to base endpoints so they are on service code level\n+        List<AccessRightType> serviceCodeLevelAcls = clientType.getAcl().stream()\n+                .filter(acl -> acl.getEndpoint().isBaseEndpoint())\n+                .collect(Collectors.toList());\n+        List<AccessRightType> distinctAccessRightTypes = distinctAccessRightTypeByXroadId(serviceCodeLevelAcls);\n+        return accessRightService.mapAccessRightsToServiceClients(clientType, distinctAccessRightTypes);\n+    }\n+\n+    // Get unique AccessRightTypes from the given list\n+    private List<AccessRightType> distinctAccessRightTypeByXroadId(List<AccessRightType> acls) {\n+        HashMap<XRoadId, AccessRightType> uniqueServiceClientMap = new HashMap<>();\n+        for (AccessRightType acl : acls) {\n+            if (!uniqueServiceClientMap.containsKey(acl.getSubjectId())) {\n+                uniqueServiceClientMap.put(acl.getSubjectId(), acl);\n+            }\n+        }\n+        return new ArrayList(uniqueServiceClientMap.values());\n+    }\n+\n+    /**\n+     * Get single service client\n+     *\n+     * @param clientId\n+     * @param dto\n+     * @return\n+     * @throws ClientNotFoundException if client with given id is not found\n+     * @throws ServiceClientNotFoundException if service client with given parameters is not found\n+     */\n+    public ServiceClientDto getServiceClient(ClientId clientId, ServiceClientIdentifierDto dto)\n+            throws ClientNotFoundException, ServiceClientNotFoundException {\n+        List<ServiceClientDto> serviceClientsByClient = getServiceClientsByClient(clientId);\n+        return serviceClientsByClient.stream()\n+            .filter(scDto -> dto.isLocalGroup()\n+                    ? dto.getLocalGroupId().toString().equals(scDto.getLocalGroupId())\n+                    : dto.getXRoadId().equals(scDto.getSubjectId()))\n+            .findFirst()\n+            .orElseThrow(() -> {\n+                String serviceClientIdentifier = dto.isLocalGroup()\n+                        ? \"Localgroup id: \" + dto.getLocalGroupId()\n+                        : \"xRoadId: \" + dto.getXRoadId().toShortString();\n+                return new ServiceClientNotFoundException(\"Service client not found for ClientId: \"\n+                        + clientId.toShortString() + \" and \" + serviceClientIdentifier);\n+            });", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTQ3NDA0Mw=="}, "originalCommit": {"oid": "bc77187ae2d7c56d5a09701f5cc94b8c3c91d3a9"}, "originalPosition": 135}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0MjM0NTU3OnYy", "diffSide": "RIGHT", "path": "src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/dto/ServiceClientDto.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxMToyMTo1M1rOGGgqaQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxMzozOToyNlrOGGlxLg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTQ3OTc4NQ==", "bodyText": "Now that I read the code, I find it pretty confusing that this dto has localGroupDescription and memberName (which is not used in ServiceClientConverter, though) but no global group description.\nOf course it is not a product of this ticket.", "url": "https://github.com/nordic-institute/X-Road/pull/464#discussion_r409479785", "createdAt": "2020-04-16T11:21:53Z", "author": {"login": "jansu76"}, "path": "src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/dto/ServiceClientDto.java", "diffHunk": "@@ -31,10 +31,10 @@\n import java.time.OffsetDateTime;\n \n /**\n- * DTO for Service and ServiceClient access rights\n+ * DTO for ServiceClient data\n  */\n @Data\n-public class AccessRightHolderDto {\n+public class ServiceClientDto {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc77187ae2d7c56d5a09701f5cc94b8c3c91d3a9"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTU2MzQzOA==", "bodyText": "No changes done.", "url": "https://github.com/nordic-institute/X-Road/pull/464#discussion_r409563438", "createdAt": "2020-04-16T13:39:26Z", "author": {"login": "TJaakkola"}, "path": "src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/dto/ServiceClientDto.java", "diffHunk": "@@ -31,10 +31,10 @@\n import java.time.OffsetDateTime;\n \n /**\n- * DTO for Service and ServiceClient access rights\n+ * DTO for ServiceClient data\n  */\n @Data\n-public class AccessRightHolderDto {\n+public class ServiceClientDto {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTQ3OTc4NQ=="}, "originalCommit": {"oid": "bc77187ae2d7c56d5a09701f5cc94b8c3c91d3a9"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0MjM5NTYyOnYy", "diffSide": "RIGHT", "path": "src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/openapi/ClientsApiController.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxMTozNzowOVrOGGhJMg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxNjoyMDoyN1rOGGtKzQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTQ4NzY2Ng==", "bodyText": "FYI old implementation gives frontend also boolean has_services\n    render_json({\n      :acl_subjects => read_acl_subjects(client),\n      :has_services => has_services\n    })\n\n\nFrontend has some logic that uses that, it disables the wizard, or parts of wizard based on that info. Probably needs to be taken into account when doing the frontend ticket for add service client access rights?", "url": "https://github.com/nordic-institute/X-Road/pull/464#discussion_r409487666", "createdAt": "2020-04-16T11:37:09Z", "author": {"login": "jansu76"}, "path": "src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/openapi/ClientsApiController.java", "diffHunk": "@@ -527,10 +544,70 @@ private ClientType getClientType(String encodedId) {\n         List<ServiceClient> serviceClients = null;\n         try {\n             serviceClients = serviceClientConverter.\n-                    convertAccessRightHolderDtos(accessRightService.getAccessRightHoldersByClient(clientId));\n+                    convertServiceClientDtos(serviceClientService.getServiceClientsByClient(clientId));\n         } catch (ClientNotFoundException e) {\n             throw new ResourceNotFoundException(e);\n         }\n         return new ResponseEntity<>(serviceClients, HttpStatus.OK);\n     }\n+\n+    @Override\n+    @PreAuthorize(\"hasAuthority('VIEW_CLIENT_ACL_SUBJECTS')\")\n+    public ResponseEntity<ServiceClient> getServiceClient(String id, String scId) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc77187ae2d7c56d5a09701f5cc94b8c3c91d3a9"}, "originalPosition": 153}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTU2NjA2Mg==", "bodyText": "This could also be handled in the frontend as it's only empty array -check. What do you think?", "url": "https://github.com/nordic-institute/X-Road/pull/464#discussion_r409566062", "createdAt": "2020-04-16T13:43:04Z", "author": {"login": "TJaakkola"}, "path": "src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/openapi/ClientsApiController.java", "diffHunk": "@@ -527,10 +544,70 @@ private ClientType getClientType(String encodedId) {\n         List<ServiceClient> serviceClients = null;\n         try {\n             serviceClients = serviceClientConverter.\n-                    convertAccessRightHolderDtos(accessRightService.getAccessRightHoldersByClient(clientId));\n+                    convertServiceClientDtos(serviceClientService.getServiceClientsByClient(clientId));\n         } catch (ClientNotFoundException e) {\n             throw new ResourceNotFoundException(e);\n         }\n         return new ResponseEntity<>(serviceClients, HttpStatus.OK);\n     }\n+\n+    @Override\n+    @PreAuthorize(\"hasAuthority('VIEW_CLIENT_ACL_SUBJECTS')\")\n+    public ResponseEntity<ServiceClient> getServiceClient(String id, String scId) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTQ4NzY2Ng=="}, "originalCommit": {"oid": "bc77187ae2d7c56d5a09701f5cc94b8c3c91d3a9"}, "originalPosition": 153}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTY4NDY4NQ==", "bodyText": "Not sure if it is just empty array -check (doesn't it mean a call to /clients/{id}/service-descriptions and then iterating ServiceDescriptions -> Services?) - but in any case yes, it is probably better to handle it in the frontend than add some extra baggage to this endpoint.", "url": "https://github.com/nordic-institute/X-Road/pull/464#discussion_r409684685", "createdAt": "2020-04-16T16:20:27Z", "author": {"login": "jansu76"}, "path": "src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/openapi/ClientsApiController.java", "diffHunk": "@@ -527,10 +544,70 @@ private ClientType getClientType(String encodedId) {\n         List<ServiceClient> serviceClients = null;\n         try {\n             serviceClients = serviceClientConverter.\n-                    convertAccessRightHolderDtos(accessRightService.getAccessRightHoldersByClient(clientId));\n+                    convertServiceClientDtos(serviceClientService.getServiceClientsByClient(clientId));\n         } catch (ClientNotFoundException e) {\n             throw new ResourceNotFoundException(e);\n         }\n         return new ResponseEntity<>(serviceClients, HttpStatus.OK);\n     }\n+\n+    @Override\n+    @PreAuthorize(\"hasAuthority('VIEW_CLIENT_ACL_SUBJECTS')\")\n+    public ResponseEntity<ServiceClient> getServiceClient(String id, String scId) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTQ4NzY2Ng=="}, "originalCommit": {"oid": "bc77187ae2d7c56d5a09701f5cc94b8c3c91d3a9"}, "originalPosition": 153}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0MjQxNTg1OnYy", "diffSide": "RIGHT", "path": "src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/service/ServiceClientService.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxMTo0MzozM1rOGGhV8w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxNjoyMTozNVrOGGtNyw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTQ5MDkzMQ==", "bodyText": "Old implementation sorts by serviceCode, should this one do the same?\n    services.sort! do |x, y|\n      x[:service_code] <=> y[:service_code]\n    end", "url": "https://github.com/nordic-institute/X-Road/pull/464#discussion_r409490931", "createdAt": "2020-04-16T11:43:33Z", "author": {"login": "jansu76"}, "path": "src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/service/ServiceClientService.java", "diffHunk": "@@ -0,0 +1,241 @@\n+/**\n+ * The MIT License\n+ * Copyright (c) 2018 Estonian Information System Authority (RIA),\n+ * Nordic Institute for Interoperability Solutions (NIIS), Population Register Centre (VRK)\n+ * Copyright (c) 2015-2017 Estonian Information System Authority (RIA), Population Register Centre (VRK)\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package org.niis.xroad.restapi.service;\n+\n+import ee.ria.xroad.common.conf.serverconf.model.AccessRightType;\n+import ee.ria.xroad.common.conf.serverconf.model.ClientType;\n+import ee.ria.xroad.common.conf.serverconf.model.EndpointType;\n+import ee.ria.xroad.common.conf.serverconf.model.ServiceType;\n+import ee.ria.xroad.common.identifier.ClientId;\n+import ee.ria.xroad.common.identifier.XRoadId;\n+\n+import lombok.extern.slf4j.Slf4j;\n+import org.niis.xroad.restapi.dto.ServiceClientAccessRightDto;\n+import org.niis.xroad.restapi.dto.ServiceClientDto;\n+import org.niis.xroad.restapi.dto.ServiceClientIdentifierDto;\n+import org.niis.xroad.restapi.repository.ClientRepository;\n+import org.niis.xroad.restapi.util.FormatUtils;\n+import org.springframework.security.access.prepost.PreAuthorize;\n+import org.springframework.stereotype.Service;\n+\n+import javax.transaction.Transactional;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+@Slf4j\n+@Service\n+@Transactional\n+@PreAuthorize(\"isAuthenticated()\")\n+public class ServiceClientService {\n+\n+    private final ClientRepository clientRepository;\n+    private final ServiceService serviceService;\n+    private final EndpointService endpointService;\n+    private final AccessRightService accessRightService;\n+    private final LocalGroupService localGroupService;\n+\n+    public ServiceClientService(ClientRepository clientRepository, ServiceService serviceService,\n+            EndpointService endpointService, AccessRightService accessRightService,\n+            LocalGroupService localGroupService) {\n+        this.clientRepository = clientRepository;\n+        this.serviceService = serviceService;\n+        this.endpointService = endpointService;\n+        this.accessRightService = accessRightService;\n+        this.localGroupService = localGroupService;\n+    }\n+\n+    /**\n+     * Get access right holders (serviceClients) by Client (service owner)\n+     *\n+     * The concept of base endpoint is used to find service level access rights in this method.\n+     * Base endpoint is in other words service (code) level endpoint.\n+     * Each service has one base endpoint.\n+     * Base endpoint has method '*' and path '**'.\n+     *\n+     * @param clientId\n+     * @return\n+     * @throws ClientNotFoundException\n+     *\n+     */\n+    public List<ServiceClientDto> getServiceClientsByClient(ClientId clientId)\n+            throws ClientNotFoundException {\n+        ClientType clientType = clientRepository.getClient(clientId);\n+        if (clientType == null) {\n+            throw new ClientNotFoundException(\"Client \" + clientId.toShortString() + \" not found\");\n+        }\n+\n+        // Filter just acls that are set to base endpoints so they are on service code level\n+        List<AccessRightType> serviceCodeLevelAcls = clientType.getAcl().stream()\n+                .filter(acl -> acl.getEndpoint().isBaseEndpoint())\n+                .collect(Collectors.toList());\n+        List<AccessRightType> distinctAccessRightTypes = distinctAccessRightTypeByXroadId(serviceCodeLevelAcls);\n+        return accessRightService.mapAccessRightsToServiceClients(clientType, distinctAccessRightTypes);\n+    }\n+\n+    // Get unique AccessRightTypes from the given list\n+    private List<AccessRightType> distinctAccessRightTypeByXroadId(List<AccessRightType> acls) {\n+        HashMap<XRoadId, AccessRightType> uniqueServiceClientMap = new HashMap<>();\n+        for (AccessRightType acl : acls) {\n+            if (!uniqueServiceClientMap.containsKey(acl.getSubjectId())) {\n+                uniqueServiceClientMap.put(acl.getSubjectId(), acl);\n+            }\n+        }\n+        return new ArrayList(uniqueServiceClientMap.values());\n+    }\n+\n+    /**\n+     * Get single service client\n+     *\n+     * @param clientId\n+     * @param dto\n+     * @return\n+     * @throws ClientNotFoundException if client with given id is not found\n+     * @throws ServiceClientNotFoundException if service client with given parameters is not found\n+     */\n+    public ServiceClientDto getServiceClient(ClientId clientId, ServiceClientIdentifierDto dto)\n+            throws ClientNotFoundException, ServiceClientNotFoundException {\n+        List<ServiceClientDto> serviceClientsByClient = getServiceClientsByClient(clientId);\n+        return serviceClientsByClient.stream()\n+            .filter(scDto -> dto.isLocalGroup()\n+                    ? dto.getLocalGroupId().toString().equals(scDto.getLocalGroupId())\n+                    : dto.getXRoadId().equals(scDto.getSubjectId()))\n+            .findFirst()\n+            .orElseThrow(() -> {\n+                String serviceClientIdentifier = dto.isLocalGroup()\n+                        ? \"Localgroup id: \" + dto.getLocalGroupId()\n+                        : \"xRoadId: \" + dto.getXRoadId().toShortString();\n+                return new ServiceClientNotFoundException(\"Service client not found for ClientId: \"\n+                        + clientId.toShortString() + \" and \" + serviceClientIdentifier);\n+            });\n+    }\n+\n+    /**\n+     * Get access right holders (serviceClients) by Service\n+     * @param clientId\n+     * @param fullServiceCode\n+     * @return\n+     * @throws ClientNotFoundException if client with given id was not found\n+     * @throws ServiceNotFoundException if service with given fullServicecode was not found\n+     * @throws EndpointNotFoundException if base endpoint for this service is not found from the client\n+     */\n+    public List<ServiceClientDto> getServiceClientsByService(ClientId clientId, String fullServiceCode)\n+            throws ClientNotFoundException, ServiceNotFoundException, EndpointNotFoundException {\n+        ClientType clientType = clientRepository.getClient(clientId);\n+        if (clientType == null) {\n+            throw new ClientNotFoundException(\"Client \" + clientId.toShortString() + \" not found\");\n+        }\n+\n+        ServiceType serviceType = serviceService.getServiceFromClient(clientType, fullServiceCode);\n+        EndpointType endpointType = endpointService.getServiceBaseEndpoint(serviceType);\n+\n+        List<AccessRightType> accessRightsByEndpoint = accessRightService\n+                .getAccessRightsByEndpoint(clientType, endpointType);\n+        return accessRightService.mapAccessRightsToServiceClients(clientType, accessRightsByEndpoint);\n+    }\n+\n+    /**\n+     * Get access right holders (serviceClients) for Endpoint\n+     * @param id\n+     * @return\n+     * @throws EndpointNotFoundException    if no endpoint is found with given id\n+     * @throws ClientNotFoundException      if client attached to endpoint is not found\n+     */\n+    public List<ServiceClientDto> getServiceClientsByEndpoint(Long id)\n+            throws EndpointNotFoundException, ClientNotFoundException {\n+\n+        ClientType clientType = clientRepository.getClientByEndpointId(id);\n+        EndpointType endpointType = endpointService.getEndpoint(id);\n+\n+        List<AccessRightType> accessRightsByEndpoint = accessRightService\n+                .getAccessRightsByEndpoint(clientType, endpointType);\n+        return accessRightService.mapAccessRightsToServiceClients(clientType, accessRightsByEndpoint);\n+    }\n+\n+    /**\n+     * Get service clients access rights to given client\n+     *\n+     * @param clientid\n+     * @param serviceClientId\n+     * @return\n+     * @throws ClientNotFoundException if given client is not found\n+     * @throws LocalGroupNotFoundException if given local group is not found\n+     */\n+    public List<ServiceClientAccessRightDto> getServiceClientAccessRights(ClientId clientid,\n+            ServiceClientIdentifierDto serviceClientId) throws ClientNotFoundException, LocalGroupNotFoundException {\n+        ClientType clientType = clientRepository.getClient(clientid);\n+        if (clientType == null) {\n+            throw new ClientNotFoundException(\"Client not found with id: \" + clientid.toShortString());\n+        }\n+\n+        // Get XRoadId for the given service client\n+        XRoadId scId = serviceClientId.isLocalGroup()\n+                ? localGroupService.getLocalGroupIdAsXroadId(serviceClientId.getLocalGroupId())\n+                : serviceClientId.getXRoadId();\n+\n+        // Filter service clients access rights from the given clients acl-list\n+        return clientType.getAcl().stream()\n+                .filter(acl -> {\n+                    boolean iseq = acl.getSubjectId().equals(scId);\n+                    boolean isBaseEndpoint = acl.getEndpoint().isBaseEndpoint();\n+                    return iseq && isBaseEndpoint;\n+                })\n+                .map(acl -> ServiceClientAccessRightDto.builder()\n+                        .serviceCode(acl.getEndpoint().getServiceCode())\n+                        .rightsGiven(FormatUtils.fromDateToOffsetDateTime(acl.getRightsGiven()))\n+                        .title(getServiceTitle(clientType, acl.getEndpoint().getServiceCode()))\n+                        .build())\n+                .collect(Collectors.toList());\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc77187ae2d7c56d5a09701f5cc94b8c3c91d3a9"}, "originalPosition": 214}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTU2NTE0NA==", "bodyText": "I guess it could but it's easy to do on frontend also, don't know if it is necessary to do here.", "url": "https://github.com/nordic-institute/X-Road/pull/464#discussion_r409565144", "createdAt": "2020-04-16T13:41:50Z", "author": {"login": "TJaakkola"}, "path": "src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/service/ServiceClientService.java", "diffHunk": "@@ -0,0 +1,241 @@\n+/**\n+ * The MIT License\n+ * Copyright (c) 2018 Estonian Information System Authority (RIA),\n+ * Nordic Institute for Interoperability Solutions (NIIS), Population Register Centre (VRK)\n+ * Copyright (c) 2015-2017 Estonian Information System Authority (RIA), Population Register Centre (VRK)\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package org.niis.xroad.restapi.service;\n+\n+import ee.ria.xroad.common.conf.serverconf.model.AccessRightType;\n+import ee.ria.xroad.common.conf.serverconf.model.ClientType;\n+import ee.ria.xroad.common.conf.serverconf.model.EndpointType;\n+import ee.ria.xroad.common.conf.serverconf.model.ServiceType;\n+import ee.ria.xroad.common.identifier.ClientId;\n+import ee.ria.xroad.common.identifier.XRoadId;\n+\n+import lombok.extern.slf4j.Slf4j;\n+import org.niis.xroad.restapi.dto.ServiceClientAccessRightDto;\n+import org.niis.xroad.restapi.dto.ServiceClientDto;\n+import org.niis.xroad.restapi.dto.ServiceClientIdentifierDto;\n+import org.niis.xroad.restapi.repository.ClientRepository;\n+import org.niis.xroad.restapi.util.FormatUtils;\n+import org.springframework.security.access.prepost.PreAuthorize;\n+import org.springframework.stereotype.Service;\n+\n+import javax.transaction.Transactional;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+@Slf4j\n+@Service\n+@Transactional\n+@PreAuthorize(\"isAuthenticated()\")\n+public class ServiceClientService {\n+\n+    private final ClientRepository clientRepository;\n+    private final ServiceService serviceService;\n+    private final EndpointService endpointService;\n+    private final AccessRightService accessRightService;\n+    private final LocalGroupService localGroupService;\n+\n+    public ServiceClientService(ClientRepository clientRepository, ServiceService serviceService,\n+            EndpointService endpointService, AccessRightService accessRightService,\n+            LocalGroupService localGroupService) {\n+        this.clientRepository = clientRepository;\n+        this.serviceService = serviceService;\n+        this.endpointService = endpointService;\n+        this.accessRightService = accessRightService;\n+        this.localGroupService = localGroupService;\n+    }\n+\n+    /**\n+     * Get access right holders (serviceClients) by Client (service owner)\n+     *\n+     * The concept of base endpoint is used to find service level access rights in this method.\n+     * Base endpoint is in other words service (code) level endpoint.\n+     * Each service has one base endpoint.\n+     * Base endpoint has method '*' and path '**'.\n+     *\n+     * @param clientId\n+     * @return\n+     * @throws ClientNotFoundException\n+     *\n+     */\n+    public List<ServiceClientDto> getServiceClientsByClient(ClientId clientId)\n+            throws ClientNotFoundException {\n+        ClientType clientType = clientRepository.getClient(clientId);\n+        if (clientType == null) {\n+            throw new ClientNotFoundException(\"Client \" + clientId.toShortString() + \" not found\");\n+        }\n+\n+        // Filter just acls that are set to base endpoints so they are on service code level\n+        List<AccessRightType> serviceCodeLevelAcls = clientType.getAcl().stream()\n+                .filter(acl -> acl.getEndpoint().isBaseEndpoint())\n+                .collect(Collectors.toList());\n+        List<AccessRightType> distinctAccessRightTypes = distinctAccessRightTypeByXroadId(serviceCodeLevelAcls);\n+        return accessRightService.mapAccessRightsToServiceClients(clientType, distinctAccessRightTypes);\n+    }\n+\n+    // Get unique AccessRightTypes from the given list\n+    private List<AccessRightType> distinctAccessRightTypeByXroadId(List<AccessRightType> acls) {\n+        HashMap<XRoadId, AccessRightType> uniqueServiceClientMap = new HashMap<>();\n+        for (AccessRightType acl : acls) {\n+            if (!uniqueServiceClientMap.containsKey(acl.getSubjectId())) {\n+                uniqueServiceClientMap.put(acl.getSubjectId(), acl);\n+            }\n+        }\n+        return new ArrayList(uniqueServiceClientMap.values());\n+    }\n+\n+    /**\n+     * Get single service client\n+     *\n+     * @param clientId\n+     * @param dto\n+     * @return\n+     * @throws ClientNotFoundException if client with given id is not found\n+     * @throws ServiceClientNotFoundException if service client with given parameters is not found\n+     */\n+    public ServiceClientDto getServiceClient(ClientId clientId, ServiceClientIdentifierDto dto)\n+            throws ClientNotFoundException, ServiceClientNotFoundException {\n+        List<ServiceClientDto> serviceClientsByClient = getServiceClientsByClient(clientId);\n+        return serviceClientsByClient.stream()\n+            .filter(scDto -> dto.isLocalGroup()\n+                    ? dto.getLocalGroupId().toString().equals(scDto.getLocalGroupId())\n+                    : dto.getXRoadId().equals(scDto.getSubjectId()))\n+            .findFirst()\n+            .orElseThrow(() -> {\n+                String serviceClientIdentifier = dto.isLocalGroup()\n+                        ? \"Localgroup id: \" + dto.getLocalGroupId()\n+                        : \"xRoadId: \" + dto.getXRoadId().toShortString();\n+                return new ServiceClientNotFoundException(\"Service client not found for ClientId: \"\n+                        + clientId.toShortString() + \" and \" + serviceClientIdentifier);\n+            });\n+    }\n+\n+    /**\n+     * Get access right holders (serviceClients) by Service\n+     * @param clientId\n+     * @param fullServiceCode\n+     * @return\n+     * @throws ClientNotFoundException if client with given id was not found\n+     * @throws ServiceNotFoundException if service with given fullServicecode was not found\n+     * @throws EndpointNotFoundException if base endpoint for this service is not found from the client\n+     */\n+    public List<ServiceClientDto> getServiceClientsByService(ClientId clientId, String fullServiceCode)\n+            throws ClientNotFoundException, ServiceNotFoundException, EndpointNotFoundException {\n+        ClientType clientType = clientRepository.getClient(clientId);\n+        if (clientType == null) {\n+            throw new ClientNotFoundException(\"Client \" + clientId.toShortString() + \" not found\");\n+        }\n+\n+        ServiceType serviceType = serviceService.getServiceFromClient(clientType, fullServiceCode);\n+        EndpointType endpointType = endpointService.getServiceBaseEndpoint(serviceType);\n+\n+        List<AccessRightType> accessRightsByEndpoint = accessRightService\n+                .getAccessRightsByEndpoint(clientType, endpointType);\n+        return accessRightService.mapAccessRightsToServiceClients(clientType, accessRightsByEndpoint);\n+    }\n+\n+    /**\n+     * Get access right holders (serviceClients) for Endpoint\n+     * @param id\n+     * @return\n+     * @throws EndpointNotFoundException    if no endpoint is found with given id\n+     * @throws ClientNotFoundException      if client attached to endpoint is not found\n+     */\n+    public List<ServiceClientDto> getServiceClientsByEndpoint(Long id)\n+            throws EndpointNotFoundException, ClientNotFoundException {\n+\n+        ClientType clientType = clientRepository.getClientByEndpointId(id);\n+        EndpointType endpointType = endpointService.getEndpoint(id);\n+\n+        List<AccessRightType> accessRightsByEndpoint = accessRightService\n+                .getAccessRightsByEndpoint(clientType, endpointType);\n+        return accessRightService.mapAccessRightsToServiceClients(clientType, accessRightsByEndpoint);\n+    }\n+\n+    /**\n+     * Get service clients access rights to given client\n+     *\n+     * @param clientid\n+     * @param serviceClientId\n+     * @return\n+     * @throws ClientNotFoundException if given client is not found\n+     * @throws LocalGroupNotFoundException if given local group is not found\n+     */\n+    public List<ServiceClientAccessRightDto> getServiceClientAccessRights(ClientId clientid,\n+            ServiceClientIdentifierDto serviceClientId) throws ClientNotFoundException, LocalGroupNotFoundException {\n+        ClientType clientType = clientRepository.getClient(clientid);\n+        if (clientType == null) {\n+            throw new ClientNotFoundException(\"Client not found with id: \" + clientid.toShortString());\n+        }\n+\n+        // Get XRoadId for the given service client\n+        XRoadId scId = serviceClientId.isLocalGroup()\n+                ? localGroupService.getLocalGroupIdAsXroadId(serviceClientId.getLocalGroupId())\n+                : serviceClientId.getXRoadId();\n+\n+        // Filter service clients access rights from the given clients acl-list\n+        return clientType.getAcl().stream()\n+                .filter(acl -> {\n+                    boolean iseq = acl.getSubjectId().equals(scId);\n+                    boolean isBaseEndpoint = acl.getEndpoint().isBaseEndpoint();\n+                    return iseq && isBaseEndpoint;\n+                })\n+                .map(acl -> ServiceClientAccessRightDto.builder()\n+                        .serviceCode(acl.getEndpoint().getServiceCode())\n+                        .rightsGiven(FormatUtils.fromDateToOffsetDateTime(acl.getRightsGiven()))\n+                        .title(getServiceTitle(clientType, acl.getEndpoint().getServiceCode()))\n+                        .build())\n+                .collect(Collectors.toList());\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTQ5MDkzMQ=="}, "originalCommit": {"oid": "bc77187ae2d7c56d5a09701f5cc94b8c3c91d3a9"}, "originalPosition": 214}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTY4NTQ1MQ==", "bodyText": "It probably is not necessary to do that in backend. Frontend is probably just as good.", "url": "https://github.com/nordic-institute/X-Road/pull/464#discussion_r409685451", "createdAt": "2020-04-16T16:21:35Z", "author": {"login": "jansu76"}, "path": "src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/service/ServiceClientService.java", "diffHunk": "@@ -0,0 +1,241 @@\n+/**\n+ * The MIT License\n+ * Copyright (c) 2018 Estonian Information System Authority (RIA),\n+ * Nordic Institute for Interoperability Solutions (NIIS), Population Register Centre (VRK)\n+ * Copyright (c) 2015-2017 Estonian Information System Authority (RIA), Population Register Centre (VRK)\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package org.niis.xroad.restapi.service;\n+\n+import ee.ria.xroad.common.conf.serverconf.model.AccessRightType;\n+import ee.ria.xroad.common.conf.serverconf.model.ClientType;\n+import ee.ria.xroad.common.conf.serverconf.model.EndpointType;\n+import ee.ria.xroad.common.conf.serverconf.model.ServiceType;\n+import ee.ria.xroad.common.identifier.ClientId;\n+import ee.ria.xroad.common.identifier.XRoadId;\n+\n+import lombok.extern.slf4j.Slf4j;\n+import org.niis.xroad.restapi.dto.ServiceClientAccessRightDto;\n+import org.niis.xroad.restapi.dto.ServiceClientDto;\n+import org.niis.xroad.restapi.dto.ServiceClientIdentifierDto;\n+import org.niis.xroad.restapi.repository.ClientRepository;\n+import org.niis.xroad.restapi.util.FormatUtils;\n+import org.springframework.security.access.prepost.PreAuthorize;\n+import org.springframework.stereotype.Service;\n+\n+import javax.transaction.Transactional;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+@Slf4j\n+@Service\n+@Transactional\n+@PreAuthorize(\"isAuthenticated()\")\n+public class ServiceClientService {\n+\n+    private final ClientRepository clientRepository;\n+    private final ServiceService serviceService;\n+    private final EndpointService endpointService;\n+    private final AccessRightService accessRightService;\n+    private final LocalGroupService localGroupService;\n+\n+    public ServiceClientService(ClientRepository clientRepository, ServiceService serviceService,\n+            EndpointService endpointService, AccessRightService accessRightService,\n+            LocalGroupService localGroupService) {\n+        this.clientRepository = clientRepository;\n+        this.serviceService = serviceService;\n+        this.endpointService = endpointService;\n+        this.accessRightService = accessRightService;\n+        this.localGroupService = localGroupService;\n+    }\n+\n+    /**\n+     * Get access right holders (serviceClients) by Client (service owner)\n+     *\n+     * The concept of base endpoint is used to find service level access rights in this method.\n+     * Base endpoint is in other words service (code) level endpoint.\n+     * Each service has one base endpoint.\n+     * Base endpoint has method '*' and path '**'.\n+     *\n+     * @param clientId\n+     * @return\n+     * @throws ClientNotFoundException\n+     *\n+     */\n+    public List<ServiceClientDto> getServiceClientsByClient(ClientId clientId)\n+            throws ClientNotFoundException {\n+        ClientType clientType = clientRepository.getClient(clientId);\n+        if (clientType == null) {\n+            throw new ClientNotFoundException(\"Client \" + clientId.toShortString() + \" not found\");\n+        }\n+\n+        // Filter just acls that are set to base endpoints so they are on service code level\n+        List<AccessRightType> serviceCodeLevelAcls = clientType.getAcl().stream()\n+                .filter(acl -> acl.getEndpoint().isBaseEndpoint())\n+                .collect(Collectors.toList());\n+        List<AccessRightType> distinctAccessRightTypes = distinctAccessRightTypeByXroadId(serviceCodeLevelAcls);\n+        return accessRightService.mapAccessRightsToServiceClients(clientType, distinctAccessRightTypes);\n+    }\n+\n+    // Get unique AccessRightTypes from the given list\n+    private List<AccessRightType> distinctAccessRightTypeByXroadId(List<AccessRightType> acls) {\n+        HashMap<XRoadId, AccessRightType> uniqueServiceClientMap = new HashMap<>();\n+        for (AccessRightType acl : acls) {\n+            if (!uniqueServiceClientMap.containsKey(acl.getSubjectId())) {\n+                uniqueServiceClientMap.put(acl.getSubjectId(), acl);\n+            }\n+        }\n+        return new ArrayList(uniqueServiceClientMap.values());\n+    }\n+\n+    /**\n+     * Get single service client\n+     *\n+     * @param clientId\n+     * @param dto\n+     * @return\n+     * @throws ClientNotFoundException if client with given id is not found\n+     * @throws ServiceClientNotFoundException if service client with given parameters is not found\n+     */\n+    public ServiceClientDto getServiceClient(ClientId clientId, ServiceClientIdentifierDto dto)\n+            throws ClientNotFoundException, ServiceClientNotFoundException {\n+        List<ServiceClientDto> serviceClientsByClient = getServiceClientsByClient(clientId);\n+        return serviceClientsByClient.stream()\n+            .filter(scDto -> dto.isLocalGroup()\n+                    ? dto.getLocalGroupId().toString().equals(scDto.getLocalGroupId())\n+                    : dto.getXRoadId().equals(scDto.getSubjectId()))\n+            .findFirst()\n+            .orElseThrow(() -> {\n+                String serviceClientIdentifier = dto.isLocalGroup()\n+                        ? \"Localgroup id: \" + dto.getLocalGroupId()\n+                        : \"xRoadId: \" + dto.getXRoadId().toShortString();\n+                return new ServiceClientNotFoundException(\"Service client not found for ClientId: \"\n+                        + clientId.toShortString() + \" and \" + serviceClientIdentifier);\n+            });\n+    }\n+\n+    /**\n+     * Get access right holders (serviceClients) by Service\n+     * @param clientId\n+     * @param fullServiceCode\n+     * @return\n+     * @throws ClientNotFoundException if client with given id was not found\n+     * @throws ServiceNotFoundException if service with given fullServicecode was not found\n+     * @throws EndpointNotFoundException if base endpoint for this service is not found from the client\n+     */\n+    public List<ServiceClientDto> getServiceClientsByService(ClientId clientId, String fullServiceCode)\n+            throws ClientNotFoundException, ServiceNotFoundException, EndpointNotFoundException {\n+        ClientType clientType = clientRepository.getClient(clientId);\n+        if (clientType == null) {\n+            throw new ClientNotFoundException(\"Client \" + clientId.toShortString() + \" not found\");\n+        }\n+\n+        ServiceType serviceType = serviceService.getServiceFromClient(clientType, fullServiceCode);\n+        EndpointType endpointType = endpointService.getServiceBaseEndpoint(serviceType);\n+\n+        List<AccessRightType> accessRightsByEndpoint = accessRightService\n+                .getAccessRightsByEndpoint(clientType, endpointType);\n+        return accessRightService.mapAccessRightsToServiceClients(clientType, accessRightsByEndpoint);\n+    }\n+\n+    /**\n+     * Get access right holders (serviceClients) for Endpoint\n+     * @param id\n+     * @return\n+     * @throws EndpointNotFoundException    if no endpoint is found with given id\n+     * @throws ClientNotFoundException      if client attached to endpoint is not found\n+     */\n+    public List<ServiceClientDto> getServiceClientsByEndpoint(Long id)\n+            throws EndpointNotFoundException, ClientNotFoundException {\n+\n+        ClientType clientType = clientRepository.getClientByEndpointId(id);\n+        EndpointType endpointType = endpointService.getEndpoint(id);\n+\n+        List<AccessRightType> accessRightsByEndpoint = accessRightService\n+                .getAccessRightsByEndpoint(clientType, endpointType);\n+        return accessRightService.mapAccessRightsToServiceClients(clientType, accessRightsByEndpoint);\n+    }\n+\n+    /**\n+     * Get service clients access rights to given client\n+     *\n+     * @param clientid\n+     * @param serviceClientId\n+     * @return\n+     * @throws ClientNotFoundException if given client is not found\n+     * @throws LocalGroupNotFoundException if given local group is not found\n+     */\n+    public List<ServiceClientAccessRightDto> getServiceClientAccessRights(ClientId clientid,\n+            ServiceClientIdentifierDto serviceClientId) throws ClientNotFoundException, LocalGroupNotFoundException {\n+        ClientType clientType = clientRepository.getClient(clientid);\n+        if (clientType == null) {\n+            throw new ClientNotFoundException(\"Client not found with id: \" + clientid.toShortString());\n+        }\n+\n+        // Get XRoadId for the given service client\n+        XRoadId scId = serviceClientId.isLocalGroup()\n+                ? localGroupService.getLocalGroupIdAsXroadId(serviceClientId.getLocalGroupId())\n+                : serviceClientId.getXRoadId();\n+\n+        // Filter service clients access rights from the given clients acl-list\n+        return clientType.getAcl().stream()\n+                .filter(acl -> {\n+                    boolean iseq = acl.getSubjectId().equals(scId);\n+                    boolean isBaseEndpoint = acl.getEndpoint().isBaseEndpoint();\n+                    return iseq && isBaseEndpoint;\n+                })\n+                .map(acl -> ServiceClientAccessRightDto.builder()\n+                        .serviceCode(acl.getEndpoint().getServiceCode())\n+                        .rightsGiven(FormatUtils.fromDateToOffsetDateTime(acl.getRightsGiven()))\n+                        .title(getServiceTitle(clientType, acl.getEndpoint().getServiceCode()))\n+                        .build())\n+                .collect(Collectors.toList());\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTQ5MDkzMQ=="}, "originalCommit": {"oid": "bc77187ae2d7c56d5a09701f5cc94b8c3c91d3a9"}, "originalPosition": 214}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0NTY5NDgzOnYy", "diffSide": "RIGHT", "path": "src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/service/ServiceClientService.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QwNjowNzozMVrOGHBCnQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQwOTozMjoyM1rOGI8Omw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDAxMDI2OQ==", "bodyText": "Just realized one problem. When listing service client(s) for one client, I think we should not return rights_given_at\n    {\n        \"id\": \"85\",\n        \"name\": \"Aston Martin Red Bull Racing\",\n        \"local_group_code\": \"RBR\",\n        \"service_client_type\": \"LOCALGROUP\",\n        \"rights_given_at\": \"2020-04-15T03:46:21.297Z\"\n    },\n\nReason is that we really do not know when the rights were given. Aston Martin Red Bull Racing is a service client for this client's services, but it can be a service client for service A, B and C. distinctAccessRightTypeByXroadId picks AccessRightType given to A, B or C by random. It is possible that serviceclient.rights_given_at should not be 2020-04-15T03:46:21.297Z but maybe 2019-01-01 instead. And it is also possible that returned timestamp changes randomly from request to another.\nWhen listing service client(s) for a client, rights_given_at should be null since we do not know it. On the other hand when listing service client(s) the other way (like /services/{id}/service-clients) we do know the real rights_given_at.\nAlternative to nulling it would be to scan through all AccessRightTypes and pick the earliest timestamp, that would then be the correct value. But I think that is unnecessary, as we do not use that in the UI.", "url": "https://github.com/nordic-institute/X-Road/pull/464#discussion_r410010269", "createdAt": "2020-04-17T06:07:31Z", "author": {"login": "jansu76"}, "path": "src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/service/ServiceClientService.java", "diffHunk": "@@ -0,0 +1,252 @@\n+/**\n+ * The MIT License\n+ * Copyright (c) 2018 Estonian Information System Authority (RIA),\n+ * Nordic Institute for Interoperability Solutions (NIIS), Population Register Centre (VRK)\n+ * Copyright (c) 2015-2017 Estonian Information System Authority (RIA), Population Register Centre (VRK)\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package org.niis.xroad.restapi.service;\n+\n+import ee.ria.xroad.common.conf.serverconf.model.AccessRightType;\n+import ee.ria.xroad.common.conf.serverconf.model.ClientType;\n+import ee.ria.xroad.common.conf.serverconf.model.EndpointType;\n+import ee.ria.xroad.common.conf.serverconf.model.ServiceType;\n+import ee.ria.xroad.common.identifier.ClientId;\n+import ee.ria.xroad.common.identifier.XRoadId;\n+\n+import lombok.extern.slf4j.Slf4j;\n+import org.niis.xroad.restapi.dto.ServiceClientAccessRightDto;\n+import org.niis.xroad.restapi.dto.ServiceClientDto;\n+import org.niis.xroad.restapi.dto.ServiceClientIdentifierDto;\n+import org.niis.xroad.restapi.openapi.ResourceNotFoundException;\n+import org.niis.xroad.restapi.repository.ClientRepository;\n+import org.niis.xroad.restapi.util.FormatUtils;\n+import org.springframework.security.access.prepost.PreAuthorize;\n+import org.springframework.stereotype.Service;\n+\n+import javax.transaction.Transactional;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+@Slf4j\n+@Service\n+@Transactional\n+@PreAuthorize(\"isAuthenticated()\")\n+public class ServiceClientService {\n+\n+    private final ClientRepository clientRepository;\n+    private final ServiceService serviceService;\n+    private final EndpointService endpointService;\n+    private final AccessRightService accessRightService;\n+    private final LocalGroupService localGroupService;\n+\n+    public ServiceClientService(ClientRepository clientRepository, ServiceService serviceService,\n+            EndpointService endpointService, AccessRightService accessRightService,\n+            LocalGroupService localGroupService) {\n+        this.clientRepository = clientRepository;\n+        this.serviceService = serviceService;\n+        this.endpointService = endpointService;\n+        this.accessRightService = accessRightService;\n+        this.localGroupService = localGroupService;\n+    }\n+\n+    /**\n+     * Get access right holders (serviceClients) by Client (service owner)\n+     *\n+     * The concept of base endpoint is used to find service level access rights in this method.\n+     * Base endpoint is in other words service (code) level endpoint.\n+     * Each service has one base endpoint.\n+     * Base endpoint has method '*' and path '**'.\n+     *\n+     * @param ownerId\n+     * @return\n+     * @throws ClientNotFoundException\n+     *\n+     */\n+    public List<ServiceClientDto> getServiceClientsByClient(ClientId ownerId)\n+            throws ClientNotFoundException {\n+        ClientType owner = clientRepository.getClient(ownerId);\n+        if (owner == null) {\n+            throw new ClientNotFoundException(\"Client \" + ownerId.toShortString() + \" not found\");\n+        }\n+\n+        // Filter just acls that are set to base endpoints so they are on service code level\n+        List<AccessRightType> serviceCodeLevelAcls = owner.getAcl().stream()\n+                .filter(acl -> acl.getEndpoint().isBaseEndpoint())\n+                .collect(Collectors.toList());\n+        List<AccessRightType> distinctAccessRightTypes = distinctAccessRightTypeByXroadId(serviceCodeLevelAcls);\n+        return accessRightService.mapAccessRightsToServiceClients(owner, distinctAccessRightTypes);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "68cd15de1d8f6a2d0376f7018c9467546fa2f998"}, "originalPosition": 99}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDI4MzE0OA==", "bodyText": "I found a rather easy way to populate the rights_given_at -information with the earliest timestamp. IMO it's better than mapping all those values to null after they've been first populated (which is the other option)", "url": "https://github.com/nordic-institute/X-Road/pull/464#discussion_r410283148", "createdAt": "2020-04-17T15:03:32Z", "author": {"login": "TJaakkola"}, "path": "src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/service/ServiceClientService.java", "diffHunk": "@@ -0,0 +1,252 @@\n+/**\n+ * The MIT License\n+ * Copyright (c) 2018 Estonian Information System Authority (RIA),\n+ * Nordic Institute for Interoperability Solutions (NIIS), Population Register Centre (VRK)\n+ * Copyright (c) 2015-2017 Estonian Information System Authority (RIA), Population Register Centre (VRK)\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package org.niis.xroad.restapi.service;\n+\n+import ee.ria.xroad.common.conf.serverconf.model.AccessRightType;\n+import ee.ria.xroad.common.conf.serverconf.model.ClientType;\n+import ee.ria.xroad.common.conf.serverconf.model.EndpointType;\n+import ee.ria.xroad.common.conf.serverconf.model.ServiceType;\n+import ee.ria.xroad.common.identifier.ClientId;\n+import ee.ria.xroad.common.identifier.XRoadId;\n+\n+import lombok.extern.slf4j.Slf4j;\n+import org.niis.xroad.restapi.dto.ServiceClientAccessRightDto;\n+import org.niis.xroad.restapi.dto.ServiceClientDto;\n+import org.niis.xroad.restapi.dto.ServiceClientIdentifierDto;\n+import org.niis.xroad.restapi.openapi.ResourceNotFoundException;\n+import org.niis.xroad.restapi.repository.ClientRepository;\n+import org.niis.xroad.restapi.util.FormatUtils;\n+import org.springframework.security.access.prepost.PreAuthorize;\n+import org.springframework.stereotype.Service;\n+\n+import javax.transaction.Transactional;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+@Slf4j\n+@Service\n+@Transactional\n+@PreAuthorize(\"isAuthenticated()\")\n+public class ServiceClientService {\n+\n+    private final ClientRepository clientRepository;\n+    private final ServiceService serviceService;\n+    private final EndpointService endpointService;\n+    private final AccessRightService accessRightService;\n+    private final LocalGroupService localGroupService;\n+\n+    public ServiceClientService(ClientRepository clientRepository, ServiceService serviceService,\n+            EndpointService endpointService, AccessRightService accessRightService,\n+            LocalGroupService localGroupService) {\n+        this.clientRepository = clientRepository;\n+        this.serviceService = serviceService;\n+        this.endpointService = endpointService;\n+        this.accessRightService = accessRightService;\n+        this.localGroupService = localGroupService;\n+    }\n+\n+    /**\n+     * Get access right holders (serviceClients) by Client (service owner)\n+     *\n+     * The concept of base endpoint is used to find service level access rights in this method.\n+     * Base endpoint is in other words service (code) level endpoint.\n+     * Each service has one base endpoint.\n+     * Base endpoint has method '*' and path '**'.\n+     *\n+     * @param ownerId\n+     * @return\n+     * @throws ClientNotFoundException\n+     *\n+     */\n+    public List<ServiceClientDto> getServiceClientsByClient(ClientId ownerId)\n+            throws ClientNotFoundException {\n+        ClientType owner = clientRepository.getClient(ownerId);\n+        if (owner == null) {\n+            throw new ClientNotFoundException(\"Client \" + ownerId.toShortString() + \" not found\");\n+        }\n+\n+        // Filter just acls that are set to base endpoints so they are on service code level\n+        List<AccessRightType> serviceCodeLevelAcls = owner.getAcl().stream()\n+                .filter(acl -> acl.getEndpoint().isBaseEndpoint())\n+                .collect(Collectors.toList());\n+        List<AccessRightType> distinctAccessRightTypes = distinctAccessRightTypeByXroadId(serviceCodeLevelAcls);\n+        return accessRightService.mapAccessRightsToServiceClients(owner, distinctAccessRightTypes);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDAxMDI2OQ=="}, "originalCommit": {"oid": "68cd15de1d8f6a2d0376f7018c9467546fa2f998"}, "originalPosition": 99}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjAyODU3MQ==", "bodyText": "OK, that's nice!", "url": "https://github.com/nordic-institute/X-Road/pull/464#discussion_r412028571", "createdAt": "2020-04-21T09:32:23Z", "author": {"login": "jansu76"}, "path": "src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/service/ServiceClientService.java", "diffHunk": "@@ -0,0 +1,252 @@\n+/**\n+ * The MIT License\n+ * Copyright (c) 2018 Estonian Information System Authority (RIA),\n+ * Nordic Institute for Interoperability Solutions (NIIS), Population Register Centre (VRK)\n+ * Copyright (c) 2015-2017 Estonian Information System Authority (RIA), Population Register Centre (VRK)\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package org.niis.xroad.restapi.service;\n+\n+import ee.ria.xroad.common.conf.serverconf.model.AccessRightType;\n+import ee.ria.xroad.common.conf.serverconf.model.ClientType;\n+import ee.ria.xroad.common.conf.serverconf.model.EndpointType;\n+import ee.ria.xroad.common.conf.serverconf.model.ServiceType;\n+import ee.ria.xroad.common.identifier.ClientId;\n+import ee.ria.xroad.common.identifier.XRoadId;\n+\n+import lombok.extern.slf4j.Slf4j;\n+import org.niis.xroad.restapi.dto.ServiceClientAccessRightDto;\n+import org.niis.xroad.restapi.dto.ServiceClientDto;\n+import org.niis.xroad.restapi.dto.ServiceClientIdentifierDto;\n+import org.niis.xroad.restapi.openapi.ResourceNotFoundException;\n+import org.niis.xroad.restapi.repository.ClientRepository;\n+import org.niis.xroad.restapi.util.FormatUtils;\n+import org.springframework.security.access.prepost.PreAuthorize;\n+import org.springframework.stereotype.Service;\n+\n+import javax.transaction.Transactional;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+@Slf4j\n+@Service\n+@Transactional\n+@PreAuthorize(\"isAuthenticated()\")\n+public class ServiceClientService {\n+\n+    private final ClientRepository clientRepository;\n+    private final ServiceService serviceService;\n+    private final EndpointService endpointService;\n+    private final AccessRightService accessRightService;\n+    private final LocalGroupService localGroupService;\n+\n+    public ServiceClientService(ClientRepository clientRepository, ServiceService serviceService,\n+            EndpointService endpointService, AccessRightService accessRightService,\n+            LocalGroupService localGroupService) {\n+        this.clientRepository = clientRepository;\n+        this.serviceService = serviceService;\n+        this.endpointService = endpointService;\n+        this.accessRightService = accessRightService;\n+        this.localGroupService = localGroupService;\n+    }\n+\n+    /**\n+     * Get access right holders (serviceClients) by Client (service owner)\n+     *\n+     * The concept of base endpoint is used to find service level access rights in this method.\n+     * Base endpoint is in other words service (code) level endpoint.\n+     * Each service has one base endpoint.\n+     * Base endpoint has method '*' and path '**'.\n+     *\n+     * @param ownerId\n+     * @return\n+     * @throws ClientNotFoundException\n+     *\n+     */\n+    public List<ServiceClientDto> getServiceClientsByClient(ClientId ownerId)\n+            throws ClientNotFoundException {\n+        ClientType owner = clientRepository.getClient(ownerId);\n+        if (owner == null) {\n+            throw new ClientNotFoundException(\"Client \" + ownerId.toShortString() + \" not found\");\n+        }\n+\n+        // Filter just acls that are set to base endpoints so they are on service code level\n+        List<AccessRightType> serviceCodeLevelAcls = owner.getAcl().stream()\n+                .filter(acl -> acl.getEndpoint().isBaseEndpoint())\n+                .collect(Collectors.toList());\n+        List<AccessRightType> distinctAccessRightTypes = distinctAccessRightTypeByXroadId(serviceCodeLevelAcls);\n+        return accessRightService.mapAccessRightsToServiceClients(owner, distinctAccessRightTypes);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDAxMDI2OQ=="}, "originalCommit": {"oid": "68cd15de1d8f6a2d0376f7018c9467546fa2f998"}, "originalPosition": 99}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2826, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}