{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg0MjAxNDA2", "number": 404, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QwNzozMzoyNlrODqQq5w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQwOToyNDozN1rODqtNRQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1NjM5OTExOnYy", "diffSide": "RIGHT", "path": "src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/openapi/BackupsApiController.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QwNzozMzoyNlrOF55cxA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxNjoyNDo1NFrOF6NbBg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjI1NDQwNA==", "bodyText": "InvalidFilenameException and InvalidBackupFileException seem to have their metadata fields populated in the service layer (here and here) but they are overridden in the controller method by setting a new ErrorDeviation without metadata. The ErrorDeviation (errorCode) will actually already be set to the response without passing it to the BadRequestException separately. Meaning that all of these catch clauses could be collapsed into a single block:\n} catch (InvalidFilenameException | UnhandledWarningsException | InvalidBackupFileException e) {\n    throw new BadRequestException(e);\n}\nThe metadata shown to the end user in this case is a string \"uploading backup file failed because of invalid filename (\"+ filename + \")\". Is this metadata supposed to be shown to the end user or is it only meant for logging purposes? If it is only meant for logging purposes then this constructor should be changed to\nsuper(msg, new ErrorDeviation(ERROR_INVALID_FILENAME));\nand same for the InvalidBackupFileException constructor also", "url": "https://github.com/nordic-institute/X-Road/pull/404#discussion_r396254404", "createdAt": "2020-03-23T07:33:26Z", "author": {"login": "carohauta"}, "path": "src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/openapi/BackupsApiController.java", "diffHunk": "@@ -103,4 +108,19 @@ public BackupsApiController(BackupService backupService, BackupConverter backupC\n             throw new InternalServerErrorException(new ErrorDeviation(GENERATE_BACKUP_INTERRUPTED));\n         }\n     }\n+\n+    @Override\n+    @PreAuthorize(\"hasAuthority('BACKUP_CONFIGURATION')\")\n+    public ResponseEntity<Backup> uploadBackup(Boolean ignoreWarnings, MultipartFile file) {\n+        try {\n+            BackupFile backupFile = backupService.uploadBackup(ignoreWarnings, file);\n+            return new ResponseEntity<>(backupConverter.convert(backupFile), HttpStatus.CREATED);\n+        } catch (InvalidFilenameException e) {\n+            throw new BadRequestException(e, new ErrorDeviation(ERROR_INVALID_FILENAME));\n+        } catch (UnhandledWarningsException e) {\n+            throw new BadRequestException(e);\n+        } catch (InvalidBackupFileException e) {\n+            throw new BadRequestException(e, new ErrorDeviation(ERROR_INVALID_BACKUP_FILE));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ad516931b117411202ee569441477df7dce6ed4b"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjU4MTYzOA==", "bodyText": "The metadata is meant for logging purposes only. Updated the exceptions according to the suggestions.", "url": "https://github.com/nordic-institute/X-Road/pull/404#discussion_r396581638", "createdAt": "2020-03-23T16:24:54Z", "author": {"login": "petkivim"}, "path": "src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/openapi/BackupsApiController.java", "diffHunk": "@@ -103,4 +108,19 @@ public BackupsApiController(BackupService backupService, BackupConverter backupC\n             throw new InternalServerErrorException(new ErrorDeviation(GENERATE_BACKUP_INTERRUPTED));\n         }\n     }\n+\n+    @Override\n+    @PreAuthorize(\"hasAuthority('BACKUP_CONFIGURATION')\")\n+    public ResponseEntity<Backup> uploadBackup(Boolean ignoreWarnings, MultipartFile file) {\n+        try {\n+            BackupFile backupFile = backupService.uploadBackup(ignoreWarnings, file);\n+            return new ResponseEntity<>(backupConverter.convert(backupFile), HttpStatus.CREATED);\n+        } catch (InvalidFilenameException e) {\n+            throw new BadRequestException(e, new ErrorDeviation(ERROR_INVALID_FILENAME));\n+        } catch (UnhandledWarningsException e) {\n+            throw new BadRequestException(e);\n+        } catch (InvalidBackupFileException e) {\n+            throw new BadRequestException(e, new ErrorDeviation(ERROR_INVALID_BACKUP_FILE));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjI1NDQwNA=="}, "originalCommit": {"oid": "ad516931b117411202ee569441477df7dce6ed4b"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1NjQ2OTUyOnYy", "diffSide": "RIGHT", "path": "src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/repository/BackupRepository.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QwODowMTowOFrOF56IOw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQwNzo1ODowNFrOF6kfeQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjI2NTUzMQ==", "bodyText": "I'm not sure if this sort of validation should actually exist in the repository layer which should be all about transactions and CRUD operations (also documented here). The isFilenameValid method would probably be a better fit in an already existing utility class such as FormatUtils or in the BackupService class.", "url": "https://github.com/nordic-institute/X-Road/pull/404#discussion_r396265531", "createdAt": "2020-03-23T08:01:08Z", "author": {"login": "carohauta"}, "path": "src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/repository/BackupRepository.java", "diffHunk": "@@ -51,7 +51,7 @@\n \n     private static final String CONFIGURATION_BACKUP_PATH = SystemProperties.getConfBackupPath();\n     // Criteria for valid backup file names:\n-    // 1) cannot start with \".\", 2) must contain one or more word characters ([a-zA-Z_0-9]), 3) must end with \".tar\"\n+    // 1) cannot start with \".\", 2) must contain one or more word characters ([a-zA-Z_0-9.-]), 3) must end with \".tar\"\n     private static final String BACKUP_FILENAME_PATTERN = \"^(?!\\\\.)[\\\\w\\\\.\\\\-]+\\\\.tar$\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ad516931b117411202ee569441477df7dce6ed4b"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjU4NjAxNw==", "bodyText": "I would leave the validation in the repository layer for security reasons. In case the repository layer is accessed from multiple classes, each class must implement its own validation. When the validation is implemented on the repository layer, the validation is always guaranteed and it's done using the same rules. Since the filename comes from the client, it's extremely important that it's validated properly before it's used.", "url": "https://github.com/nordic-institute/X-Road/pull/404#discussion_r396586017", "createdAt": "2020-03-23T16:30:45Z", "author": {"login": "petkivim"}, "path": "src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/repository/BackupRepository.java", "diffHunk": "@@ -51,7 +51,7 @@\n \n     private static final String CONFIGURATION_BACKUP_PATH = SystemProperties.getConfBackupPath();\n     // Criteria for valid backup file names:\n-    // 1) cannot start with \".\", 2) must contain one or more word characters ([a-zA-Z_0-9]), 3) must end with \".tar\"\n+    // 1) cannot start with \".\", 2) must contain one or more word characters ([a-zA-Z_0-9.-]), 3) must end with \".tar\"\n     private static final String BACKUP_FILENAME_PATTERN = \"^(?!\\\\.)[\\\\w\\\\.\\\\-]+\\\\.tar$\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjI2NTUzMQ=="}, "originalCommit": {"oid": "ad516931b117411202ee569441477df7dce6ed4b"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjkyNzUzMQ==", "bodyText": "Happened to see this in the github stream and got curious, so had a look. My two cents:\n\nvalidation should in general follow the layer design @carohauta linked - one reason is, that we should follow principle of least astonishment and not confuse maintainers.\nif there is a special case, where we are concerned of security, and are afraid that someone will add a service method that forgets the validation, I think that is a valid reason to have the validation also on repository layer. But I think it should not be missing from service layer. I was happy to see it is not!\nOf course, if we are scared of someone adding a new service method and forgetting validation, we should be scared of someone adding a new repository method and forgetting validation, too. Putting the validation on repository layer is not bulletproof (but maybe it is safer than service layer since repository layer has less modifications typically)\nI like @carohauta 's suggestion of putting the validation logic into somewhere else than the repository. I would still keep both validation checks (service and repository), just move the actual logic elsewhere. It would make the repository class a bit more consistent with other repository classes in what kind of logic it contains.\nrepository level validation (if there is any, we should try to keep it limited) should be considered as a safety net like a database constraint is. Failing validation should be comparable to a programming error and can just throw some dirty RuntimeException, result in http 500, not care about nice error messages etc.", "url": "https://github.com/nordic-institute/X-Road/pull/404#discussion_r396927531", "createdAt": "2020-03-24T06:34:08Z", "author": {"login": "jansu76"}, "path": "src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/repository/BackupRepository.java", "diffHunk": "@@ -51,7 +51,7 @@\n \n     private static final String CONFIGURATION_BACKUP_PATH = SystemProperties.getConfBackupPath();\n     // Criteria for valid backup file names:\n-    // 1) cannot start with \".\", 2) must contain one or more word characters ([a-zA-Z_0-9]), 3) must end with \".tar\"\n+    // 1) cannot start with \".\", 2) must contain one or more word characters ([a-zA-Z_0-9.-]), 3) must end with \".tar\"\n     private static final String BACKUP_FILENAME_PATTERN = \"^(?!\\\\.)[\\\\w\\\\.\\\\-]+\\\\.tar$\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjI2NTUzMQ=="}, "originalCommit": {"oid": "ad516931b117411202ee569441477df7dce6ed4b"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njk1OTYwOQ==", "bodyText": "Based on the comments, the validation logic is now moved to FormatUtils class, and both BackupRepository and BackupService use it from there. In addition, filename validation was added to all the methods in the repository class that read, create or delete backup files.", "url": "https://github.com/nordic-institute/X-Road/pull/404#discussion_r396959609", "createdAt": "2020-03-24T07:58:04Z", "author": {"login": "petkivim"}, "path": "src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/repository/BackupRepository.java", "diffHunk": "@@ -51,7 +51,7 @@\n \n     private static final String CONFIGURATION_BACKUP_PATH = SystemProperties.getConfBackupPath();\n     // Criteria for valid backup file names:\n-    // 1) cannot start with \".\", 2) must contain one or more word characters ([a-zA-Z_0-9]), 3) must end with \".tar\"\n+    // 1) cannot start with \".\", 2) must contain one or more word characters ([a-zA-Z_0-9.-]), 3) must end with \".tar\"\n     private static final String BACKUP_FILENAME_PATTERN = \"^(?!\\\\.)[\\\\w\\\\.\\\\-]+\\\\.tar$\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjI2NTUzMQ=="}, "originalCommit": {"oid": "ad516931b117411202ee569441477df7dce6ed4b"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1NjY3OTQ5OnYy", "diffSide": "RIGHT", "path": "src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/service/BackupService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QwOTowMzo0MlrOF58I2g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxNjoyNjowNVrOF6NedQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjI5ODQ1OA==", "bodyText": "This method could take String fileName and byte[] fileBytes as parameters instead of a MultipartFile. I think that would create better separation between the controller and service layer and make this method more universal. What do you think?", "url": "https://github.com/nordic-institute/X-Road/pull/404#discussion_r396298458", "createdAt": "2020-03-23T09:03:42Z", "author": {"login": "carohauta"}, "path": "src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/service/BackupService.java", "diffHunk": "@@ -147,6 +155,44 @@ public BackupFile generateBackup() throws InterruptedException {\n         return backupFile.get();\n     }\n \n+    /**\n+     * Write uploaded backup file to disk. If ignoreWarnings=false, an exception is thrown when a file with\n+     * the same name already exists. If ignoreWarnings=true, the existing file is overwritten.\n+     * @param ignoreWarnings\n+     * @param file\n+     * @return\n+     * @throws InvalidFilenameException if backup file's name is invalid and does not pass validation\n+     * @throws UnhandledWarningsException if backup file with the same name already exists\n+     * and ignoreWarnings is false\n+     * @throws InvalidBackupFileException if backup file is not a valid tar file or the first entry of the tar file\n+     * does not match to the first entry if the Security Server generated backup tar files\n+     */\n+    public BackupFile uploadBackup(Boolean ignoreWarnings, MultipartFile file)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ad516931b117411202ee569441477df7dce6ed4b"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjU4MjUxNw==", "bodyText": "Passing String fileName and byte[] fileBytes as parameters instead of MultipartFile is a good idea. Updated the implementation.", "url": "https://github.com/nordic-institute/X-Road/pull/404#discussion_r396582517", "createdAt": "2020-03-23T16:26:05Z", "author": {"login": "petkivim"}, "path": "src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/service/BackupService.java", "diffHunk": "@@ -147,6 +155,44 @@ public BackupFile generateBackup() throws InterruptedException {\n         return backupFile.get();\n     }\n \n+    /**\n+     * Write uploaded backup file to disk. If ignoreWarnings=false, an exception is thrown when a file with\n+     * the same name already exists. If ignoreWarnings=true, the existing file is overwritten.\n+     * @param ignoreWarnings\n+     * @param file\n+     * @return\n+     * @throws InvalidFilenameException if backup file's name is invalid and does not pass validation\n+     * @throws UnhandledWarningsException if backup file with the same name already exists\n+     * and ignoreWarnings is false\n+     * @throws InvalidBackupFileException if backup file is not a valid tar file or the first entry of the tar file\n+     * does not match to the first entry if the Security Server generated backup tar files\n+     */\n+    public BackupFile uploadBackup(Boolean ignoreWarnings, MultipartFile file)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjI5ODQ1OA=="}, "originalCommit": {"oid": "ad516931b117411202ee569441477df7dce6ed4b"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1NjcwMDM4OnYy", "diffSide": "RIGHT", "path": "src/proxy-ui-api/src/test/java/org/niis/xroad/restapi/service/BackupServiceTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QwOTowOTo0OFrOF58V2Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxNjoyNjoyN1rOF6NflQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjMwMTc4NQ==", "bodyText": "Could also assert the warning here", "url": "https://github.com/nordic-institute/X-Road/pull/404#discussion_r396301785", "createdAt": "2020-03-23T09:09:48Z", "author": {"login": "carohauta"}, "path": "src/proxy-ui-api/src/test/java/org/niis/xroad/restapi/service/BackupServiceTest.java", "diffHunk": "@@ -180,4 +190,84 @@ public void addBackupFails() throws ProcessNotExecutableException, ProcessFailed\n             // success\n         }\n     }\n+\n+    @Test\n+    public void uploadBackup() throws UnhandledWarningsException, InvalidBackupFileException, IOException,\n+            InvalidFilenameException {\n+        MultipartFile multipartFile = createMultipartFileWithTar(BACKUP_FILE_1_NAME, VALID_TAR_LABEL);\n+\n+        when(backupRepository.isFilenameValid(BACKUP_FILE_1_NAME)).thenReturn(true);\n+        when(backupRepository.fileExists(BACKUP_FILE_1_NAME)).thenReturn(false);\n+        when(backupRepository.writeBackupFile(BACKUP_FILE_1_NAME, multipartFile.getBytes())).thenReturn(\n+                new Date(BACKUP_FILE_1_CREATED_AT_MILLIS).toInstant().atOffset(ZoneOffset.UTC));\n+\n+        BackupFile backupFile = backupService.uploadBackup(true, multipartFile);\n+\n+        assertEquals(BACKUP_FILE_1_NAME, backupFile.getFilename());\n+        assertEquals(BACKUP_FILE_1_CREATED_AT, backupFile.getCreatedAt().toString());\n+    }\n+\n+    @Test\n+    public void uploadBackupInvalidTarLabel() throws UnhandledWarningsException, IOException,\n+            InvalidFilenameException {\n+        MultipartFile multipartFile = createMultipartFileWithTar(BACKUP_FILE_1_NAME, \"invalid_label\");\n+\n+        when(backupRepository.isFilenameValid(BACKUP_FILE_1_NAME)).thenReturn(true);\n+        when(backupRepository.fileExists(BACKUP_FILE_1_NAME)).thenReturn(false);\n+\n+        try {\n+            backupService.uploadBackup(true, multipartFile);\n+            fail(\"should throw InvalidBackupFileException\");\n+        } catch (InvalidBackupFileException expected) {\n+            // success\n+        }\n+    }\n+\n+    @Test\n+    public void uploadBackupWithInvalidFilename() throws UnhandledWarningsException, InvalidBackupFileException {\n+        try {\n+            backupService.uploadBackup(true, mockMultipartFile);\n+            fail(\"should throw InvalidFilenameException\");\n+        } catch (InvalidFilenameException expected) {\n+            // success\n+        }\n+    }\n+\n+    @Test\n+    public void uploadBackupFileAlreadyExistsNoOverwrite() throws InvalidFilenameException,\n+            InvalidBackupFileException {\n+        when(backupRepository.isFilenameValid(any(String.class))).thenReturn(true);\n+        when(backupRepository.fileExists(any(String.class))).thenReturn(true);\n+        try {\n+            backupService.uploadBackup(false, mockMultipartFile);\n+            fail(\"should throw UnhandledWarningsException\");\n+        } catch (UnhandledWarningsException expected) {\n+            // success", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ad516931b117411202ee569441477df7dce6ed4b"}, "originalPosition": 92}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjU4MjgwNQ==", "bodyText": "Fixed.", "url": "https://github.com/nordic-institute/X-Road/pull/404#discussion_r396582805", "createdAt": "2020-03-23T16:26:27Z", "author": {"login": "petkivim"}, "path": "src/proxy-ui-api/src/test/java/org/niis/xroad/restapi/service/BackupServiceTest.java", "diffHunk": "@@ -180,4 +190,84 @@ public void addBackupFails() throws ProcessNotExecutableException, ProcessFailed\n             // success\n         }\n     }\n+\n+    @Test\n+    public void uploadBackup() throws UnhandledWarningsException, InvalidBackupFileException, IOException,\n+            InvalidFilenameException {\n+        MultipartFile multipartFile = createMultipartFileWithTar(BACKUP_FILE_1_NAME, VALID_TAR_LABEL);\n+\n+        when(backupRepository.isFilenameValid(BACKUP_FILE_1_NAME)).thenReturn(true);\n+        when(backupRepository.fileExists(BACKUP_FILE_1_NAME)).thenReturn(false);\n+        when(backupRepository.writeBackupFile(BACKUP_FILE_1_NAME, multipartFile.getBytes())).thenReturn(\n+                new Date(BACKUP_FILE_1_CREATED_AT_MILLIS).toInstant().atOffset(ZoneOffset.UTC));\n+\n+        BackupFile backupFile = backupService.uploadBackup(true, multipartFile);\n+\n+        assertEquals(BACKUP_FILE_1_NAME, backupFile.getFilename());\n+        assertEquals(BACKUP_FILE_1_CREATED_AT, backupFile.getCreatedAt().toString());\n+    }\n+\n+    @Test\n+    public void uploadBackupInvalidTarLabel() throws UnhandledWarningsException, IOException,\n+            InvalidFilenameException {\n+        MultipartFile multipartFile = createMultipartFileWithTar(BACKUP_FILE_1_NAME, \"invalid_label\");\n+\n+        when(backupRepository.isFilenameValid(BACKUP_FILE_1_NAME)).thenReturn(true);\n+        when(backupRepository.fileExists(BACKUP_FILE_1_NAME)).thenReturn(false);\n+\n+        try {\n+            backupService.uploadBackup(true, multipartFile);\n+            fail(\"should throw InvalidBackupFileException\");\n+        } catch (InvalidBackupFileException expected) {\n+            // success\n+        }\n+    }\n+\n+    @Test\n+    public void uploadBackupWithInvalidFilename() throws UnhandledWarningsException, InvalidBackupFileException {\n+        try {\n+            backupService.uploadBackup(true, mockMultipartFile);\n+            fail(\"should throw InvalidFilenameException\");\n+        } catch (InvalidFilenameException expected) {\n+            // success\n+        }\n+    }\n+\n+    @Test\n+    public void uploadBackupFileAlreadyExistsNoOverwrite() throws InvalidFilenameException,\n+            InvalidBackupFileException {\n+        when(backupRepository.isFilenameValid(any(String.class))).thenReturn(true);\n+        when(backupRepository.fileExists(any(String.class))).thenReturn(true);\n+        try {\n+            backupService.uploadBackup(false, mockMultipartFile);\n+            fail(\"should throw UnhandledWarningsException\");\n+        } catch (UnhandledWarningsException expected) {\n+            // success", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjMwMTc4NQ=="}, "originalCommit": {"oid": "ad516931b117411202ee569441477df7dce6ed4b"}, "originalPosition": 92}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2MTA3NDYxOnYy", "diffSide": "RIGHT", "path": "src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/repository/BackupRepository.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQwOToyNDozN1rOF6ndGA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQwOTozMTozMVrOF6nutA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzAwODE1Mg==", "bodyText": "SonarQube requires \"invalid backup filename\" to be in a constant because it occurs at least 3 times in this class.", "url": "https://github.com/nordic-institute/X-Road/pull/404#discussion_r397008152", "createdAt": "2020-03-24T09:24:37Z", "author": {"login": "carohauta"}, "path": "src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/repository/BackupRepository.java", "diffHunk": "@@ -90,6 +87,9 @@ public OffsetDateTime getCreatedAt(String filename) {\n      * @param filename\n      */\n     public void deleteBackupFile(String filename) {\n+        if (!FormatUtils.isValidBackupFilename(filename)) {\n+            throw new RuntimeException(\"invalid backup filename\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d64827bc42009a906ffdea588cb02bff31eed9e5"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzAxMjY2MA==", "bodyText": "Fixed", "url": "https://github.com/nordic-institute/X-Road/pull/404#discussion_r397012660", "createdAt": "2020-03-24T09:31:31Z", "author": {"login": "petkivim"}, "path": "src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/repository/BackupRepository.java", "diffHunk": "@@ -90,6 +87,9 @@ public OffsetDateTime getCreatedAt(String filename) {\n      * @param filename\n      */\n     public void deleteBackupFile(String filename) {\n+        if (!FormatUtils.isValidBackupFilename(filename)) {\n+            throw new RuntimeException(\"invalid backup filename\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzAwODE1Mg=="}, "originalCommit": {"oid": "d64827bc42009a906ffdea588cb02bff31eed9e5"}, "originalPosition": 40}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2979, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}