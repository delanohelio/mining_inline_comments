{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYzMDA1Njgy", "number": 319, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQxMzozMDowNlrODYLIFg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQxMzozODowMVrODYgUPg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2Njc0NzEwOnYy", "diffSide": "RIGHT", "path": "src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/service/TokenCertificateService.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQxMzozMDowNlrOFd4QoQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QxMjoyNDoxNFrOFe3fMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Njg3NDc4NQ==", "bodyText": "Frontend could handle this situation so that when unregisterAuthCertificate endpoint returns anything else than http 204 -> a popup will be offered to mark the cert for deletion.\nNow I would suggest getting rid of the CodedException error handling here (and let our ExceptionTranslator handle it as a 500) because we are sending an actual X-Road message and there are a lot of different errors that might occur.\nOne option would also be to translate all CodedExceptions caught here to something like XroadMessageException which would be translated into e.g. a ConflictException in the controller layer with the original error code provided by core.", "url": "https://github.com/nordic-institute/X-Road/pull/319#discussion_r366874785", "createdAt": "2020-01-15T13:30:06Z", "author": {"login": "carohauta"}, "path": "src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/service/TokenCertificateService.java", "diffHunk": "@@ -556,29 +561,82 @@ public void registerAuthCert(String hash, String securityServerAddress) throws C\n     }\n \n     /**\n-     * Send the authentication certificate deletion request to central server\n+     * Send the authentication certificate deletion request to central server and set the cert status to\n+     * {@link CertificateInfo#STATUS_DELINPROG}\n      * @param hash certificate hash\n-     * @throws CertificateNotFoundException\n+     * @param skipUnregister whether to skip the actual delete request and only change cert status\n+     * @throws SignCertificateNotSupportedException\n+     * @throws ActionNotPossibleException\n      * @throws GlobalConfService.GlobalConfOutdatedException\n+     * @throws InvalidCertificateException\n+     * @throws KeyNotFoundException\n+     * @throws CertificateNotFoundException\n+     * @throws NoValidAuthCertificateException\n      */\n-    public void unregisterAuthCert(String hash) throws CertificateNotFoundException,\n-            GlobalConfService.GlobalConfOutdatedException, InvalidCertificateException,\n-            SignCertificateNotSupportedException, KeyNotFoundException, ActionNotPossibleException {\n+    private void unregisterAuthCertAndMarkForDeletion(String hash, boolean skipUnregister)\n+            throws CertificateNotFoundException, GlobalConfService.GlobalConfOutdatedException,\n+            InvalidCertificateException, SignCertificateNotSupportedException, KeyNotFoundException,\n+            ActionNotPossibleException, NoValidAuthCertificateException {\n         CertificateInfo certificateInfo = getCertificateInfo(hash);\n         verifyAuthCert(certificateInfo);\n         verifyCertAction(PossibleActionEnum.UNREGISTER, certificateInfo, hash);\n         SecurityServerId securityServerId = serverConfService.getSecurityServerId();\n         try {\n-            managementRequestSenderService.sendAuthCertDeletionRequest(securityServerId,\n-                    certificateInfo.getCertificateBytes());\n+            if (!skipUnregister) {\n+                managementRequestSenderService.sendAuthCertDeletionRequest(securityServerId,\n+                        certificateInfo.getCertificateBytes());\n+            }\n             signerProxyFacade.setCertStatus(certificateInfo.getId(), CertificateInfo.STATUS_DELINPROG);\n-        } catch (GlobalConfService.GlobalConfOutdatedException | CodedException e) {\n+        } catch (CodedException ce) {\n+            if (isCausedBySslAuthFailure(ce)) {\n+                throw new NoValidAuthCertificateException(ce);\n+            }\n+            throw ce;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5f4181abc3d9f9d6981a8ce5ec661bf4fa45d09c"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzQxODM0OQ==", "bodyText": "Yeah. Maybe the last suggestion, about XroadMessageException, would be good to make our implementation work the same way as old implementation. More about this in slack discussion.", "url": "https://github.com/nordic-institute/X-Road/pull/319#discussion_r367418349", "createdAt": "2020-01-16T13:33:26Z", "author": {"login": "jansu76"}, "path": "src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/service/TokenCertificateService.java", "diffHunk": "@@ -556,29 +561,82 @@ public void registerAuthCert(String hash, String securityServerAddress) throws C\n     }\n \n     /**\n-     * Send the authentication certificate deletion request to central server\n+     * Send the authentication certificate deletion request to central server and set the cert status to\n+     * {@link CertificateInfo#STATUS_DELINPROG}\n      * @param hash certificate hash\n-     * @throws CertificateNotFoundException\n+     * @param skipUnregister whether to skip the actual delete request and only change cert status\n+     * @throws SignCertificateNotSupportedException\n+     * @throws ActionNotPossibleException\n      * @throws GlobalConfService.GlobalConfOutdatedException\n+     * @throws InvalidCertificateException\n+     * @throws KeyNotFoundException\n+     * @throws CertificateNotFoundException\n+     * @throws NoValidAuthCertificateException\n      */\n-    public void unregisterAuthCert(String hash) throws CertificateNotFoundException,\n-            GlobalConfService.GlobalConfOutdatedException, InvalidCertificateException,\n-            SignCertificateNotSupportedException, KeyNotFoundException, ActionNotPossibleException {\n+    private void unregisterAuthCertAndMarkForDeletion(String hash, boolean skipUnregister)\n+            throws CertificateNotFoundException, GlobalConfService.GlobalConfOutdatedException,\n+            InvalidCertificateException, SignCertificateNotSupportedException, KeyNotFoundException,\n+            ActionNotPossibleException, NoValidAuthCertificateException {\n         CertificateInfo certificateInfo = getCertificateInfo(hash);\n         verifyAuthCert(certificateInfo);\n         verifyCertAction(PossibleActionEnum.UNREGISTER, certificateInfo, hash);\n         SecurityServerId securityServerId = serverConfService.getSecurityServerId();\n         try {\n-            managementRequestSenderService.sendAuthCertDeletionRequest(securityServerId,\n-                    certificateInfo.getCertificateBytes());\n+            if (!skipUnregister) {\n+                managementRequestSenderService.sendAuthCertDeletionRequest(securityServerId,\n+                        certificateInfo.getCertificateBytes());\n+            }\n             signerProxyFacade.setCertStatus(certificateInfo.getId(), CertificateInfo.STATUS_DELINPROG);\n-        } catch (GlobalConfService.GlobalConfOutdatedException | CodedException e) {\n+        } catch (CodedException ce) {\n+            if (isCausedBySslAuthFailure(ce)) {\n+                throw new NoValidAuthCertificateException(ce);\n+            }\n+            throw ce;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Njg3NDc4NQ=="}, "originalCommit": {"oid": "5f4181abc3d9f9d6981a8ce5ec661bf4fa45d09c"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzkxMDcwNA==", "bodyText": "There are now separate try-catch-blocks for both sendAuthCertDeletionRequest and setCertStatus and they provide different exceptions:\nsendAuthCertDeletionRequest -> ManagementRequestSendingFailedException -> InternalServerErrorException\nsetCertStatus -> RuntimeException", "url": "https://github.com/nordic-institute/X-Road/pull/319#discussion_r367910704", "createdAt": "2020-01-17T12:24:14Z", "author": {"login": "carohauta"}, "path": "src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/service/TokenCertificateService.java", "diffHunk": "@@ -556,29 +561,82 @@ public void registerAuthCert(String hash, String securityServerAddress) throws C\n     }\n \n     /**\n-     * Send the authentication certificate deletion request to central server\n+     * Send the authentication certificate deletion request to central server and set the cert status to\n+     * {@link CertificateInfo#STATUS_DELINPROG}\n      * @param hash certificate hash\n-     * @throws CertificateNotFoundException\n+     * @param skipUnregister whether to skip the actual delete request and only change cert status\n+     * @throws SignCertificateNotSupportedException\n+     * @throws ActionNotPossibleException\n      * @throws GlobalConfService.GlobalConfOutdatedException\n+     * @throws InvalidCertificateException\n+     * @throws KeyNotFoundException\n+     * @throws CertificateNotFoundException\n+     * @throws NoValidAuthCertificateException\n      */\n-    public void unregisterAuthCert(String hash) throws CertificateNotFoundException,\n-            GlobalConfService.GlobalConfOutdatedException, InvalidCertificateException,\n-            SignCertificateNotSupportedException, KeyNotFoundException, ActionNotPossibleException {\n+    private void unregisterAuthCertAndMarkForDeletion(String hash, boolean skipUnregister)\n+            throws CertificateNotFoundException, GlobalConfService.GlobalConfOutdatedException,\n+            InvalidCertificateException, SignCertificateNotSupportedException, KeyNotFoundException,\n+            ActionNotPossibleException, NoValidAuthCertificateException {\n         CertificateInfo certificateInfo = getCertificateInfo(hash);\n         verifyAuthCert(certificateInfo);\n         verifyCertAction(PossibleActionEnum.UNREGISTER, certificateInfo, hash);\n         SecurityServerId securityServerId = serverConfService.getSecurityServerId();\n         try {\n-            managementRequestSenderService.sendAuthCertDeletionRequest(securityServerId,\n-                    certificateInfo.getCertificateBytes());\n+            if (!skipUnregister) {\n+                managementRequestSenderService.sendAuthCertDeletionRequest(securityServerId,\n+                        certificateInfo.getCertificateBytes());\n+            }\n             signerProxyFacade.setCertStatus(certificateInfo.getId(), CertificateInfo.STATUS_DELINPROG);\n-        } catch (GlobalConfService.GlobalConfOutdatedException | CodedException e) {\n+        } catch (CodedException ce) {\n+            if (isCausedBySslAuthFailure(ce)) {\n+                throw new NoValidAuthCertificateException(ce);\n+            }\n+            throw ce;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Njg3NDc4NQ=="}, "originalCommit": {"oid": "5f4181abc3d9f9d6981a8ce5ec661bf4fa45d09c"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3MDIwMDY1OnYy", "diffSide": "RIGHT", "path": "src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/openapi/TokenCertificatesApiController.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQxMzozMTo1N1rOFeZZEQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QxMzowMTozMlrOFe4TOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzQxNzYxNw==", "bodyText": "Not a change request about this PR, but a thought. Are we misusing http 400 bad request? Like \"global conf outdated\" is not a client error, it is not result of a bad API call? Perhaps some other catches here as well.\nBut it is a widely used pattern in our implementation, so not directly related to this PR.", "url": "https://github.com/nordic-institute/X-Road/pull/319#discussion_r367417617", "createdAt": "2020-01-16T13:31:57Z", "author": {"login": "jansu76"}, "path": "src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/openapi/TokenCertificatesApiController.java", "diffHunk": "@@ -203,14 +203,31 @@ public TokenCertificatesApiController(TokenCertificateService tokenCertificateSe\n \n     @Override\n     @PreAuthorize(\"hasAuthority('SEND_AUTH_CERT_DEL_REQ')\")\n-    public ResponseEntity<Void> unregisterCertificate(String hash) {\n+    public ResponseEntity<Void> unregisterAuthCertificate(String hash) {\n         try {\n             tokenCertificateService.unregisterAuthCert(hash);\n         } catch (CertificateNotFoundException e) {\n             throw new ResourceNotFoundException(e);\n         } catch (GlobalConfService.GlobalConfOutdatedException | TokenCertificateService.InvalidCertificateException\n                 | TokenCertificateService.SignCertificateNotSupportedException e) {\n             throw new BadRequestException(e);\n+        } catch (ActionNotPossibleException | KeyNotFoundException\n+                | TokenCertificateService.NoValidAuthCertificateException e) {\n+            throw new ConflictException(e);\n+        }\n+        return new ResponseEntity<>(HttpStatus.NO_CONTENT);\n+    }\n+\n+    @Override\n+    @PreAuthorize(\"hasAuthority('SEND_AUTH_CERT_DEL_REQ')\")\n+    public ResponseEntity<Void> markAuthCertForDeletion(String hash) {\n+        try {\n+            tokenCertificateService.markAuthCertForDeletion(hash);\n+        } catch (CertificateNotFoundException e) {\n+            throw new ResourceNotFoundException(e);\n+        } catch (GlobalConfService.GlobalConfOutdatedException | TokenCertificateService.InvalidCertificateException", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5f4181abc3d9f9d6981a8ce5ec661bf4fa45d09c"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzkyNDAyNA==", "bodyText": "That is a good point. I think that 400 Bad Request is being misused pretty widely in the Internet and it is sometimes considered a general exception even though it should be on the client.", "url": "https://github.com/nordic-institute/X-Road/pull/319#discussion_r367924024", "createdAt": "2020-01-17T13:01:32Z", "author": {"login": "carohauta"}, "path": "src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/openapi/TokenCertificatesApiController.java", "diffHunk": "@@ -203,14 +203,31 @@ public TokenCertificatesApiController(TokenCertificateService tokenCertificateSe\n \n     @Override\n     @PreAuthorize(\"hasAuthority('SEND_AUTH_CERT_DEL_REQ')\")\n-    public ResponseEntity<Void> unregisterCertificate(String hash) {\n+    public ResponseEntity<Void> unregisterAuthCertificate(String hash) {\n         try {\n             tokenCertificateService.unregisterAuthCert(hash);\n         } catch (CertificateNotFoundException e) {\n             throw new ResourceNotFoundException(e);\n         } catch (GlobalConfService.GlobalConfOutdatedException | TokenCertificateService.InvalidCertificateException\n                 | TokenCertificateService.SignCertificateNotSupportedException e) {\n             throw new BadRequestException(e);\n+        } catch (ActionNotPossibleException | KeyNotFoundException\n+                | TokenCertificateService.NoValidAuthCertificateException e) {\n+            throw new ConflictException(e);\n+        }\n+        return new ResponseEntity<>(HttpStatus.NO_CONTENT);\n+    }\n+\n+    @Override\n+    @PreAuthorize(\"hasAuthority('SEND_AUTH_CERT_DEL_REQ')\")\n+    public ResponseEntity<Void> markAuthCertForDeletion(String hash) {\n+        try {\n+            tokenCertificateService.markAuthCertForDeletion(hash);\n+        } catch (CertificateNotFoundException e) {\n+            throw new ResourceNotFoundException(e);\n+        } catch (GlobalConfService.GlobalConfOutdatedException | TokenCertificateService.InvalidCertificateException", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzQxNzYxNw=="}, "originalCommit": {"oid": "5f4181abc3d9f9d6981a8ce5ec661bf4fa45d09c"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3MDIwOTE0OnYy", "diffSide": "RIGHT", "path": "src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/service/TokenCertificateService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQxMzozNDo0MFrOFeZeHw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQxMzo0MTozMlrOFeZrPw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzQxODkxMQ==", "bodyText": "This is a duplicate of CERT_NOT_FOUND_FAULT_CODE, on purpose or not? Anyways probably deprecated if unregisterAuthCertAndMarkForDeletion exception handling is refactored.", "url": "https://github.com/nordic-institute/X-Road/pull/319#discussion_r367418911", "createdAt": "2020-01-16T13:34:40Z", "author": {"login": "jansu76"}, "path": "src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/service/TokenCertificateService.java", "diffHunk": "@@ -642,11 +700,16 @@ static boolean isCausedByCertNotFound(CodedException e) {\n         return CERT_NOT_FOUND_FAULT_CODE.equals(e.getFaultCode());\n     }\n \n+    static boolean isCausedBySslAuthFailure(CodedException e) {\n+        return SSL_AUTH_FAULT_CODE.equals(e.getFaultCode());\n+    }\n+\n     static final String DUPLICATE_CERT_FAULT_CODE = signerFaultCode(X_CERT_EXISTS);\n     static final String INCORRECT_CERT_FAULT_CODE = signerFaultCode(X_INCORRECT_CERTIFICATE);\n     static final String CERT_WRONG_USAGE_FAULT_CODE = signerFaultCode(X_WRONG_CERT_USAGE);\n     static final String CSR_NOT_FOUND_FAULT_CODE = signerFaultCode(X_CSR_NOT_FOUND);\n     static final String CERT_NOT_FOUND_FAULT_CODE = signerFaultCode(X_CERT_NOT_FOUND);\n+    static final String SSL_AUTH_FAULT_CODE = clientProxyFaultCode(X_CERT_NOT_FOUND);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5f4181abc3d9f9d6981a8ce5ec661bf4fa45d09c"}, "originalPosition": 123}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzQyMjI3MQ==", "bodyText": "Sorry, no. Did not see the clientProxy vs signer part initially.", "url": "https://github.com/nordic-institute/X-Road/pull/319#discussion_r367422271", "createdAt": "2020-01-16T13:41:32Z", "author": {"login": "jansu76"}, "path": "src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/service/TokenCertificateService.java", "diffHunk": "@@ -642,11 +700,16 @@ static boolean isCausedByCertNotFound(CodedException e) {\n         return CERT_NOT_FOUND_FAULT_CODE.equals(e.getFaultCode());\n     }\n \n+    static boolean isCausedBySslAuthFailure(CodedException e) {\n+        return SSL_AUTH_FAULT_CODE.equals(e.getFaultCode());\n+    }\n+\n     static final String DUPLICATE_CERT_FAULT_CODE = signerFaultCode(X_CERT_EXISTS);\n     static final String INCORRECT_CERT_FAULT_CODE = signerFaultCode(X_INCORRECT_CERTIFICATE);\n     static final String CERT_WRONG_USAGE_FAULT_CODE = signerFaultCode(X_WRONG_CERT_USAGE);\n     static final String CSR_NOT_FOUND_FAULT_CODE = signerFaultCode(X_CSR_NOT_FOUND);\n     static final String CERT_NOT_FOUND_FAULT_CODE = signerFaultCode(X_CERT_NOT_FOUND);\n+    static final String SSL_AUTH_FAULT_CODE = clientProxyFaultCode(X_CERT_NOT_FOUND);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzQxODkxMQ=="}, "originalCommit": {"oid": "5f4181abc3d9f9d6981a8ce5ec661bf4fa45d09c"}, "originalPosition": 123}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3MDIxODg2OnYy", "diffSide": "RIGHT", "path": "src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/service/TokenCertificateService.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQxMzozODowMVrOFeZkdg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMFQxMzoxOToxNlrOFfeEVA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzQyMDUzNA==", "bodyText": "I think silent catches should still be avoided always, even if we know that exception is impossible currently. Throwing runtime exception is better since at least it protects against mistakes done in future, when e.g. someone modifies unregisterAuthCertAndMarkForDeletion and impossible becomes possible. Also throw new RuntimeException(e); is easy to add.", "url": "https://github.com/nordic-institute/X-Road/pull/319#discussion_r367420534", "createdAt": "2020-01-16T13:38:01Z", "author": {"login": "jansu76"}, "path": "src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/service/TokenCertificateService.java", "diffHunk": "@@ -556,29 +561,82 @@ public void registerAuthCert(String hash, String securityServerAddress) throws C\n     }\n \n     /**\n-     * Send the authentication certificate deletion request to central server\n+     * Send the authentication certificate deletion request to central server and set the cert status to\n+     * {@link CertificateInfo#STATUS_DELINPROG}\n      * @param hash certificate hash\n-     * @throws CertificateNotFoundException\n+     * @param skipUnregister whether to skip the actual delete request and only change cert status\n+     * @throws SignCertificateNotSupportedException\n+     * @throws ActionNotPossibleException\n      * @throws GlobalConfService.GlobalConfOutdatedException\n+     * @throws InvalidCertificateException\n+     * @throws KeyNotFoundException\n+     * @throws CertificateNotFoundException\n+     * @throws NoValidAuthCertificateException\n      */\n-    public void unregisterAuthCert(String hash) throws CertificateNotFoundException,\n-            GlobalConfService.GlobalConfOutdatedException, InvalidCertificateException,\n-            SignCertificateNotSupportedException, KeyNotFoundException, ActionNotPossibleException {\n+    private void unregisterAuthCertAndMarkForDeletion(String hash, boolean skipUnregister)\n+            throws CertificateNotFoundException, GlobalConfService.GlobalConfOutdatedException,\n+            InvalidCertificateException, SignCertificateNotSupportedException, KeyNotFoundException,\n+            ActionNotPossibleException, NoValidAuthCertificateException {\n         CertificateInfo certificateInfo = getCertificateInfo(hash);\n         verifyAuthCert(certificateInfo);\n         verifyCertAction(PossibleActionEnum.UNREGISTER, certificateInfo, hash);\n         SecurityServerId securityServerId = serverConfService.getSecurityServerId();\n         try {\n-            managementRequestSenderService.sendAuthCertDeletionRequest(securityServerId,\n-                    certificateInfo.getCertificateBytes());\n+            if (!skipUnregister) {\n+                managementRequestSenderService.sendAuthCertDeletionRequest(securityServerId,\n+                        certificateInfo.getCertificateBytes());\n+            }\n             signerProxyFacade.setCertStatus(certificateInfo.getId(), CertificateInfo.STATUS_DELINPROG);\n-        } catch (GlobalConfService.GlobalConfOutdatedException | CodedException e) {\n+        } catch (CodedException ce) {\n+            if (isCausedBySslAuthFailure(ce)) {\n+                throw new NoValidAuthCertificateException(ce);\n+            }\n+            throw ce;\n+        } catch (GlobalConfService.GlobalConfOutdatedException e) {\n             throw e;\n         } catch (Exception e) {\n             throw new RuntimeException(\"Could not unregister auth cert\", e);\n         }\n     }\n \n+    /**\n+     * Send the authentication certificate deletion request to central server and set cert status to\n+     * {@link CertificateInfo#STATUS_DELINPROG}\n+     * @param hash certificate hash\n+     * @throws SignCertificateNotSupportedException\n+     * @throws ActionNotPossibleException\n+     * @throws GlobalConfService.GlobalConfOutdatedException\n+     * @throws InvalidCertificateException\n+     * @throws KeyNotFoundException\n+     * @throws CertificateNotFoundException\n+     * @throws NoValidAuthCertificateException\n+     */\n+    public void unregisterAuthCert(String hash) throws SignCertificateNotSupportedException,\n+            ActionNotPossibleException, GlobalConfService.GlobalConfOutdatedException, InvalidCertificateException,\n+            KeyNotFoundException, CertificateNotFoundException, NoValidAuthCertificateException {\n+        unregisterAuthCertAndMarkForDeletion(hash, false);\n+    }\n+\n+    /**\n+     * Set the authentication certificate status to {@link CertificateInfo#STATUS_DELINPROG}\n+     * @param hash certificate hash\n+     * @throws SignCertificateNotSupportedException\n+     * @throws ActionNotPossibleException\n+     * @throws GlobalConfService.GlobalConfOutdatedException\n+     * @throws InvalidCertificateException\n+     * @throws KeyNotFoundException\n+     * @throws CertificateNotFoundException\n+     */\n+    public void markAuthCertForDeletion(String hash) throws SignCertificateNotSupportedException,\n+            ActionNotPossibleException, GlobalConfService.GlobalConfOutdatedException, InvalidCertificateException,\n+            KeyNotFoundException, CertificateNotFoundException {\n+        try {\n+            unregisterAuthCertAndMarkForDeletion(hash, true);\n+        } catch (NoValidAuthCertificateException e) {\n+            // Not a possible exception because the unregister request was never sent", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5f4181abc3d9f9d6981a8ce5ec661bf4fa45d09c"}, "originalPosition": 103}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzQzMTI1Mg==", "bodyText": "I agree that normally they should be avoided but this is somewhat the exception that proves the rule (pardon the pun); I was thinking that skipping the NoValidAuthCertificateException is exactly what we want to do here (since this is the skipUnregister method). This also hides a redundant exception from the controller layer", "url": "https://github.com/nordic-institute/X-Road/pull/319#discussion_r367431252", "createdAt": "2020-01-16T13:59:14Z", "author": {"login": "carohauta"}, "path": "src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/service/TokenCertificateService.java", "diffHunk": "@@ -556,29 +561,82 @@ public void registerAuthCert(String hash, String securityServerAddress) throws C\n     }\n \n     /**\n-     * Send the authentication certificate deletion request to central server\n+     * Send the authentication certificate deletion request to central server and set the cert status to\n+     * {@link CertificateInfo#STATUS_DELINPROG}\n      * @param hash certificate hash\n-     * @throws CertificateNotFoundException\n+     * @param skipUnregister whether to skip the actual delete request and only change cert status\n+     * @throws SignCertificateNotSupportedException\n+     * @throws ActionNotPossibleException\n      * @throws GlobalConfService.GlobalConfOutdatedException\n+     * @throws InvalidCertificateException\n+     * @throws KeyNotFoundException\n+     * @throws CertificateNotFoundException\n+     * @throws NoValidAuthCertificateException\n      */\n-    public void unregisterAuthCert(String hash) throws CertificateNotFoundException,\n-            GlobalConfService.GlobalConfOutdatedException, InvalidCertificateException,\n-            SignCertificateNotSupportedException, KeyNotFoundException, ActionNotPossibleException {\n+    private void unregisterAuthCertAndMarkForDeletion(String hash, boolean skipUnregister)\n+            throws CertificateNotFoundException, GlobalConfService.GlobalConfOutdatedException,\n+            InvalidCertificateException, SignCertificateNotSupportedException, KeyNotFoundException,\n+            ActionNotPossibleException, NoValidAuthCertificateException {\n         CertificateInfo certificateInfo = getCertificateInfo(hash);\n         verifyAuthCert(certificateInfo);\n         verifyCertAction(PossibleActionEnum.UNREGISTER, certificateInfo, hash);\n         SecurityServerId securityServerId = serverConfService.getSecurityServerId();\n         try {\n-            managementRequestSenderService.sendAuthCertDeletionRequest(securityServerId,\n-                    certificateInfo.getCertificateBytes());\n+            if (!skipUnregister) {\n+                managementRequestSenderService.sendAuthCertDeletionRequest(securityServerId,\n+                        certificateInfo.getCertificateBytes());\n+            }\n             signerProxyFacade.setCertStatus(certificateInfo.getId(), CertificateInfo.STATUS_DELINPROG);\n-        } catch (GlobalConfService.GlobalConfOutdatedException | CodedException e) {\n+        } catch (CodedException ce) {\n+            if (isCausedBySslAuthFailure(ce)) {\n+                throw new NoValidAuthCertificateException(ce);\n+            }\n+            throw ce;\n+        } catch (GlobalConfService.GlobalConfOutdatedException e) {\n             throw e;\n         } catch (Exception e) {\n             throw new RuntimeException(\"Could not unregister auth cert\", e);\n         }\n     }\n \n+    /**\n+     * Send the authentication certificate deletion request to central server and set cert status to\n+     * {@link CertificateInfo#STATUS_DELINPROG}\n+     * @param hash certificate hash\n+     * @throws SignCertificateNotSupportedException\n+     * @throws ActionNotPossibleException\n+     * @throws GlobalConfService.GlobalConfOutdatedException\n+     * @throws InvalidCertificateException\n+     * @throws KeyNotFoundException\n+     * @throws CertificateNotFoundException\n+     * @throws NoValidAuthCertificateException\n+     */\n+    public void unregisterAuthCert(String hash) throws SignCertificateNotSupportedException,\n+            ActionNotPossibleException, GlobalConfService.GlobalConfOutdatedException, InvalidCertificateException,\n+            KeyNotFoundException, CertificateNotFoundException, NoValidAuthCertificateException {\n+        unregisterAuthCertAndMarkForDeletion(hash, false);\n+    }\n+\n+    /**\n+     * Set the authentication certificate status to {@link CertificateInfo#STATUS_DELINPROG}\n+     * @param hash certificate hash\n+     * @throws SignCertificateNotSupportedException\n+     * @throws ActionNotPossibleException\n+     * @throws GlobalConfService.GlobalConfOutdatedException\n+     * @throws InvalidCertificateException\n+     * @throws KeyNotFoundException\n+     * @throws CertificateNotFoundException\n+     */\n+    public void markAuthCertForDeletion(String hash) throws SignCertificateNotSupportedException,\n+            ActionNotPossibleException, GlobalConfService.GlobalConfOutdatedException, InvalidCertificateException,\n+            KeyNotFoundException, CertificateNotFoundException {\n+        try {\n+            unregisterAuthCertAndMarkForDeletion(hash, true);\n+        } catch (NoValidAuthCertificateException e) {\n+            // Not a possible exception because the unregister request was never sent", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzQyMDUzNA=="}, "originalCommit": {"oid": "5f4181abc3d9f9d6981a8ce5ec661bf4fa45d09c"}, "originalPosition": 103}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzQ2MjAzOA==", "bodyText": "I am not sure I understand. catch (NoValidAuthCertificateException e) should never happen currently, right? We know that by reasoning, but the poor compiler does not know it.\nSince it never happens, adding a throw new RuntimeException(e); after the comment (I think the comment should stay, it is good to have) does not do anything.\nIf instead our reasoning was wrong, or someone later modifies unregisterAuthCertAndMarkForDeletion so that it does throw NoValidAuthCertificateException for some reason (stranger things have happened), we get a RuntimeException instead of http 200 OK.\nNoValidAuthCertificateException is still hidden from the controller layer.\nI am guessing Sonar would also complain about current implementation.\nSo I am suggesting this:\n        try {\n            unregisterAuthCertAndMarkForDeletion(hash, true);\n        } catch (NoValidAuthCertificateException e) {\n            // Not a possible exception because the unregister request was never sent\n            throw new RuntimeException(e);\n        }", "url": "https://github.com/nordic-institute/X-Road/pull/319#discussion_r367462038", "createdAt": "2020-01-16T14:54:01Z", "author": {"login": "jansu76"}, "path": "src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/service/TokenCertificateService.java", "diffHunk": "@@ -556,29 +561,82 @@ public void registerAuthCert(String hash, String securityServerAddress) throws C\n     }\n \n     /**\n-     * Send the authentication certificate deletion request to central server\n+     * Send the authentication certificate deletion request to central server and set the cert status to\n+     * {@link CertificateInfo#STATUS_DELINPROG}\n      * @param hash certificate hash\n-     * @throws CertificateNotFoundException\n+     * @param skipUnregister whether to skip the actual delete request and only change cert status\n+     * @throws SignCertificateNotSupportedException\n+     * @throws ActionNotPossibleException\n      * @throws GlobalConfService.GlobalConfOutdatedException\n+     * @throws InvalidCertificateException\n+     * @throws KeyNotFoundException\n+     * @throws CertificateNotFoundException\n+     * @throws NoValidAuthCertificateException\n      */\n-    public void unregisterAuthCert(String hash) throws CertificateNotFoundException,\n-            GlobalConfService.GlobalConfOutdatedException, InvalidCertificateException,\n-            SignCertificateNotSupportedException, KeyNotFoundException, ActionNotPossibleException {\n+    private void unregisterAuthCertAndMarkForDeletion(String hash, boolean skipUnregister)\n+            throws CertificateNotFoundException, GlobalConfService.GlobalConfOutdatedException,\n+            InvalidCertificateException, SignCertificateNotSupportedException, KeyNotFoundException,\n+            ActionNotPossibleException, NoValidAuthCertificateException {\n         CertificateInfo certificateInfo = getCertificateInfo(hash);\n         verifyAuthCert(certificateInfo);\n         verifyCertAction(PossibleActionEnum.UNREGISTER, certificateInfo, hash);\n         SecurityServerId securityServerId = serverConfService.getSecurityServerId();\n         try {\n-            managementRequestSenderService.sendAuthCertDeletionRequest(securityServerId,\n-                    certificateInfo.getCertificateBytes());\n+            if (!skipUnregister) {\n+                managementRequestSenderService.sendAuthCertDeletionRequest(securityServerId,\n+                        certificateInfo.getCertificateBytes());\n+            }\n             signerProxyFacade.setCertStatus(certificateInfo.getId(), CertificateInfo.STATUS_DELINPROG);\n-        } catch (GlobalConfService.GlobalConfOutdatedException | CodedException e) {\n+        } catch (CodedException ce) {\n+            if (isCausedBySslAuthFailure(ce)) {\n+                throw new NoValidAuthCertificateException(ce);\n+            }\n+            throw ce;\n+        } catch (GlobalConfService.GlobalConfOutdatedException e) {\n             throw e;\n         } catch (Exception e) {\n             throw new RuntimeException(\"Could not unregister auth cert\", e);\n         }\n     }\n \n+    /**\n+     * Send the authentication certificate deletion request to central server and set cert status to\n+     * {@link CertificateInfo#STATUS_DELINPROG}\n+     * @param hash certificate hash\n+     * @throws SignCertificateNotSupportedException\n+     * @throws ActionNotPossibleException\n+     * @throws GlobalConfService.GlobalConfOutdatedException\n+     * @throws InvalidCertificateException\n+     * @throws KeyNotFoundException\n+     * @throws CertificateNotFoundException\n+     * @throws NoValidAuthCertificateException\n+     */\n+    public void unregisterAuthCert(String hash) throws SignCertificateNotSupportedException,\n+            ActionNotPossibleException, GlobalConfService.GlobalConfOutdatedException, InvalidCertificateException,\n+            KeyNotFoundException, CertificateNotFoundException, NoValidAuthCertificateException {\n+        unregisterAuthCertAndMarkForDeletion(hash, false);\n+    }\n+\n+    /**\n+     * Set the authentication certificate status to {@link CertificateInfo#STATUS_DELINPROG}\n+     * @param hash certificate hash\n+     * @throws SignCertificateNotSupportedException\n+     * @throws ActionNotPossibleException\n+     * @throws GlobalConfService.GlobalConfOutdatedException\n+     * @throws InvalidCertificateException\n+     * @throws KeyNotFoundException\n+     * @throws CertificateNotFoundException\n+     */\n+    public void markAuthCertForDeletion(String hash) throws SignCertificateNotSupportedException,\n+            ActionNotPossibleException, GlobalConfService.GlobalConfOutdatedException, InvalidCertificateException,\n+            KeyNotFoundException, CertificateNotFoundException {\n+        try {\n+            unregisterAuthCertAndMarkForDeletion(hash, true);\n+        } catch (NoValidAuthCertificateException e) {\n+            // Not a possible exception because the unregister request was never sent", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzQyMDUzNA=="}, "originalCommit": {"oid": "5f4181abc3d9f9d6981a8ce5ec661bf4fa45d09c"}, "originalPosition": 103}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzQ4ODY2Nw==", "bodyText": "It is now ManagementRequestSendingFailedException and it is also thrown to the controller layer, where it is wrapped inside InternalServerErrorException, because in case of e.g. IOException we still want to see the error message in frontend.\nBut to elaborate more on the previous subject: I was thinking something along the lines that the user is deliberately using an API and a method that is supposed to only mark the cert as DELETE_IN_PROGRESS and not send any requests at all -> there is no reason to stop code execution in the case of NoValidAuthCertificateException because the cert has been, in fact, successfully marked as DELETE_IN_PROGRESS. Of course this probably indicates a flaw in design over anything else and like you said it is probably not ok for SonarQube. <- this is not true because the cert status wouldn't have changed after all\nI'll finish the rest of the task and ask for more comments", "url": "https://github.com/nordic-institute/X-Road/pull/319#discussion_r367488667", "createdAt": "2020-01-16T15:38:48Z", "author": {"login": "carohauta"}, "path": "src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/service/TokenCertificateService.java", "diffHunk": "@@ -556,29 +561,82 @@ public void registerAuthCert(String hash, String securityServerAddress) throws C\n     }\n \n     /**\n-     * Send the authentication certificate deletion request to central server\n+     * Send the authentication certificate deletion request to central server and set the cert status to\n+     * {@link CertificateInfo#STATUS_DELINPROG}\n      * @param hash certificate hash\n-     * @throws CertificateNotFoundException\n+     * @param skipUnregister whether to skip the actual delete request and only change cert status\n+     * @throws SignCertificateNotSupportedException\n+     * @throws ActionNotPossibleException\n      * @throws GlobalConfService.GlobalConfOutdatedException\n+     * @throws InvalidCertificateException\n+     * @throws KeyNotFoundException\n+     * @throws CertificateNotFoundException\n+     * @throws NoValidAuthCertificateException\n      */\n-    public void unregisterAuthCert(String hash) throws CertificateNotFoundException,\n-            GlobalConfService.GlobalConfOutdatedException, InvalidCertificateException,\n-            SignCertificateNotSupportedException, KeyNotFoundException, ActionNotPossibleException {\n+    private void unregisterAuthCertAndMarkForDeletion(String hash, boolean skipUnregister)\n+            throws CertificateNotFoundException, GlobalConfService.GlobalConfOutdatedException,\n+            InvalidCertificateException, SignCertificateNotSupportedException, KeyNotFoundException,\n+            ActionNotPossibleException, NoValidAuthCertificateException {\n         CertificateInfo certificateInfo = getCertificateInfo(hash);\n         verifyAuthCert(certificateInfo);\n         verifyCertAction(PossibleActionEnum.UNREGISTER, certificateInfo, hash);\n         SecurityServerId securityServerId = serverConfService.getSecurityServerId();\n         try {\n-            managementRequestSenderService.sendAuthCertDeletionRequest(securityServerId,\n-                    certificateInfo.getCertificateBytes());\n+            if (!skipUnregister) {\n+                managementRequestSenderService.sendAuthCertDeletionRequest(securityServerId,\n+                        certificateInfo.getCertificateBytes());\n+            }\n             signerProxyFacade.setCertStatus(certificateInfo.getId(), CertificateInfo.STATUS_DELINPROG);\n-        } catch (GlobalConfService.GlobalConfOutdatedException | CodedException e) {\n+        } catch (CodedException ce) {\n+            if (isCausedBySslAuthFailure(ce)) {\n+                throw new NoValidAuthCertificateException(ce);\n+            }\n+            throw ce;\n+        } catch (GlobalConfService.GlobalConfOutdatedException e) {\n             throw e;\n         } catch (Exception e) {\n             throw new RuntimeException(\"Could not unregister auth cert\", e);\n         }\n     }\n \n+    /**\n+     * Send the authentication certificate deletion request to central server and set cert status to\n+     * {@link CertificateInfo#STATUS_DELINPROG}\n+     * @param hash certificate hash\n+     * @throws SignCertificateNotSupportedException\n+     * @throws ActionNotPossibleException\n+     * @throws GlobalConfService.GlobalConfOutdatedException\n+     * @throws InvalidCertificateException\n+     * @throws KeyNotFoundException\n+     * @throws CertificateNotFoundException\n+     * @throws NoValidAuthCertificateException\n+     */\n+    public void unregisterAuthCert(String hash) throws SignCertificateNotSupportedException,\n+            ActionNotPossibleException, GlobalConfService.GlobalConfOutdatedException, InvalidCertificateException,\n+            KeyNotFoundException, CertificateNotFoundException, NoValidAuthCertificateException {\n+        unregisterAuthCertAndMarkForDeletion(hash, false);\n+    }\n+\n+    /**\n+     * Set the authentication certificate status to {@link CertificateInfo#STATUS_DELINPROG}\n+     * @param hash certificate hash\n+     * @throws SignCertificateNotSupportedException\n+     * @throws ActionNotPossibleException\n+     * @throws GlobalConfService.GlobalConfOutdatedException\n+     * @throws InvalidCertificateException\n+     * @throws KeyNotFoundException\n+     * @throws CertificateNotFoundException\n+     */\n+    public void markAuthCertForDeletion(String hash) throws SignCertificateNotSupportedException,\n+            ActionNotPossibleException, GlobalConfService.GlobalConfOutdatedException, InvalidCertificateException,\n+            KeyNotFoundException, CertificateNotFoundException {\n+        try {\n+            unregisterAuthCertAndMarkForDeletion(hash, true);\n+        } catch (NoValidAuthCertificateException e) {\n+            // Not a possible exception because the unregister request was never sent", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzQyMDUzNA=="}, "originalCommit": {"oid": "5f4181abc3d9f9d6981a8ce5ec661bf4fa45d09c"}, "originalPosition": 103}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODU0MjgwNA==", "bodyText": "TokenCertificateService.markAuthCertForDeletion could still remove one exception type which should never happen (but should still result in RuntimeException, for safety):\n    public void markAuthCertForDeletion(String hash) throws SignCertificateNotSupportedException,\n            ActionNotPossibleException, GlobalConfService.GlobalConfOutdatedException, InvalidCertificateException,\n            KeyNotFoundException, CertificateNotFoundException {\n        try {\n            unregisterAuthCertAndMarkForDeletion(hash, true);\n        } catch (ManagementRequestSenderService.ManagementRequestSendingFailedException e) {\n            // should never happen since we're not sending management requests\n            throw new RuntimeException(e);\n        }\n    }", "url": "https://github.com/nordic-institute/X-Road/pull/319#discussion_r368542804", "createdAt": "2020-01-20T13:19:16Z", "author": {"login": "jansu76"}, "path": "src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/service/TokenCertificateService.java", "diffHunk": "@@ -556,29 +561,82 @@ public void registerAuthCert(String hash, String securityServerAddress) throws C\n     }\n \n     /**\n-     * Send the authentication certificate deletion request to central server\n+     * Send the authentication certificate deletion request to central server and set the cert status to\n+     * {@link CertificateInfo#STATUS_DELINPROG}\n      * @param hash certificate hash\n-     * @throws CertificateNotFoundException\n+     * @param skipUnregister whether to skip the actual delete request and only change cert status\n+     * @throws SignCertificateNotSupportedException\n+     * @throws ActionNotPossibleException\n      * @throws GlobalConfService.GlobalConfOutdatedException\n+     * @throws InvalidCertificateException\n+     * @throws KeyNotFoundException\n+     * @throws CertificateNotFoundException\n+     * @throws NoValidAuthCertificateException\n      */\n-    public void unregisterAuthCert(String hash) throws CertificateNotFoundException,\n-            GlobalConfService.GlobalConfOutdatedException, InvalidCertificateException,\n-            SignCertificateNotSupportedException, KeyNotFoundException, ActionNotPossibleException {\n+    private void unregisterAuthCertAndMarkForDeletion(String hash, boolean skipUnregister)\n+            throws CertificateNotFoundException, GlobalConfService.GlobalConfOutdatedException,\n+            InvalidCertificateException, SignCertificateNotSupportedException, KeyNotFoundException,\n+            ActionNotPossibleException, NoValidAuthCertificateException {\n         CertificateInfo certificateInfo = getCertificateInfo(hash);\n         verifyAuthCert(certificateInfo);\n         verifyCertAction(PossibleActionEnum.UNREGISTER, certificateInfo, hash);\n         SecurityServerId securityServerId = serverConfService.getSecurityServerId();\n         try {\n-            managementRequestSenderService.sendAuthCertDeletionRequest(securityServerId,\n-                    certificateInfo.getCertificateBytes());\n+            if (!skipUnregister) {\n+                managementRequestSenderService.sendAuthCertDeletionRequest(securityServerId,\n+                        certificateInfo.getCertificateBytes());\n+            }\n             signerProxyFacade.setCertStatus(certificateInfo.getId(), CertificateInfo.STATUS_DELINPROG);\n-        } catch (GlobalConfService.GlobalConfOutdatedException | CodedException e) {\n+        } catch (CodedException ce) {\n+            if (isCausedBySslAuthFailure(ce)) {\n+                throw new NoValidAuthCertificateException(ce);\n+            }\n+            throw ce;\n+        } catch (GlobalConfService.GlobalConfOutdatedException e) {\n             throw e;\n         } catch (Exception e) {\n             throw new RuntimeException(\"Could not unregister auth cert\", e);\n         }\n     }\n \n+    /**\n+     * Send the authentication certificate deletion request to central server and set cert status to\n+     * {@link CertificateInfo#STATUS_DELINPROG}\n+     * @param hash certificate hash\n+     * @throws SignCertificateNotSupportedException\n+     * @throws ActionNotPossibleException\n+     * @throws GlobalConfService.GlobalConfOutdatedException\n+     * @throws InvalidCertificateException\n+     * @throws KeyNotFoundException\n+     * @throws CertificateNotFoundException\n+     * @throws NoValidAuthCertificateException\n+     */\n+    public void unregisterAuthCert(String hash) throws SignCertificateNotSupportedException,\n+            ActionNotPossibleException, GlobalConfService.GlobalConfOutdatedException, InvalidCertificateException,\n+            KeyNotFoundException, CertificateNotFoundException, NoValidAuthCertificateException {\n+        unregisterAuthCertAndMarkForDeletion(hash, false);\n+    }\n+\n+    /**\n+     * Set the authentication certificate status to {@link CertificateInfo#STATUS_DELINPROG}\n+     * @param hash certificate hash\n+     * @throws SignCertificateNotSupportedException\n+     * @throws ActionNotPossibleException\n+     * @throws GlobalConfService.GlobalConfOutdatedException\n+     * @throws InvalidCertificateException\n+     * @throws KeyNotFoundException\n+     * @throws CertificateNotFoundException\n+     */\n+    public void markAuthCertForDeletion(String hash) throws SignCertificateNotSupportedException,\n+            ActionNotPossibleException, GlobalConfService.GlobalConfOutdatedException, InvalidCertificateException,\n+            KeyNotFoundException, CertificateNotFoundException {\n+        try {\n+            unregisterAuthCertAndMarkForDeletion(hash, true);\n+        } catch (NoValidAuthCertificateException e) {\n+            // Not a possible exception because the unregister request was never sent", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzQyMDUzNA=="}, "originalCommit": {"oid": "5f4181abc3d9f9d6981a8ce5ec661bf4fa45d09c"}, "originalPosition": 103}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2886, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}