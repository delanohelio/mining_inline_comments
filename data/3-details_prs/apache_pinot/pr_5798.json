{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDYyNTE3MDU1", "number": 5798, "title": "Improve performance of DistinctCountThetaSketch by eliminating empty \u2026", "bodyText": "\u2026sketches and unions.\n\n\nIn a case with large number of predicates in the post-aggregation-expression (with OR's), we tend\nto end up with a lot of empty sketches (and unions) when not every row matches each predicate.\nThis causes an overhead of creating sketches and union'ing them, leading to potentially huge performance hit.\n\n\nIn this PR, we improve this behavior by:\n\nFiltering out empty unions/sketchs when extracting aggregation results.\nCareful merging of results in merge() with mininmal unions (only when necessary).\n\n\n\nWe could also perform lazy creation of unions (to ensure that they are not empty), but that would mean\na hash-map lookup per row. This will penalize the general case when there's less number of emtpy unions.\nSo this approach was not taken.\n\n\nWe saw an overall improvement in latency of about 50%, for cases with:\n\nLarge number of predicates, and\nLarge number of segments, and\nSmall number of matches per predicate per segment.\n\n\n\nDescription\nAdd a description of your PR here.\nA good description should include pointers to an issue or design document, etc.\nUpgrade Notes\nDoes this PR prevent a zero down-time upgrade? (Assume upgrade order: Controller, Broker, Server, Minion)\n\n Yes (Please label as backward-incompat, and complete the section below on Release Notes)\n\nDoes this PR fix a zero-downtime upgrade introduced earlier?\n\n Yes (Please label this as backward-incompat, and complete the section below on Release Notes)\n\nDoes this PR otherwise need attention when creating release notes? Things to consider:\n\nNew configuration options\nDeprecation of configurations\nSignature changes to public methods/interfaces\nNew plugins added or old plugins removed\n\n\n Yes (Please label this PR as release-notes and complete the section on Release Notes)\n\nRelease Notes\nIf you have tagged this as either backward-incompat or release-notes,\nyou MUST add text here that you would like to see appear in release notes of the\nnext release.\nIf you have a series of commits adding or enabling a feature, then\nadd this section only in final commit that marks the feature completed.\nRefer to earlier release notes to see examples of text\nDocumentation\nIf you have introduced a new feature or configuration, please add it to the documentation as well.\nSee https://docs.pinot.apache.org/developers/developers-and-contributors/update-document", "createdAt": "2020-08-04T04:12:58Z", "url": "https://github.com/apache/pinot/pull/5798", "merged": true, "mergeCommit": {"oid": "17a38733c600d8c75b440e6ea3280903c7d9e9ec"}, "closed": true, "closedAt": "2020-08-04T21:04:53Z", "author": {"login": "mayankshriv"}, "timelineItems": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc7pykCgFqTQ2MTAwNzk2MA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABc7ss50gFqTQ2MTE1MTk0Mw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYxMDA3OTYw", "url": "https://github.com/apache/pinot/pull/5798#pullrequestreview-461007960", "createdAt": "2020-08-04T17:08:57Z", "commit": {"oid": "cf915bdf9b7406bb4b6701aac70b9e131c8463e2"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQxNzowODo1N1rOG7ppWw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQxNzowODo1N1rOG7ppWw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTIwMTQ5OQ==", "bodyText": "Is the caller already good with null? I mean it doesn't have to be changed to handle null return from this function?", "url": "https://github.com/apache/pinot/pull/5798#discussion_r465201499", "createdAt": "2020-08-04T17:08:57Z", "author": {"login": "siddharthteotia"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/query/aggregation/function/DistinctCountThetaSketchAggregationFunction.java", "diffHunk": "@@ -387,12 +386,17 @@ public void aggregateGroupByMV(int length, int[][] groupKeysArray, GroupByResult\n   public Map<String, Sketch> extractAggregationResult(AggregationResultHolder aggregationResultHolder) {\n     Map<Predicate, Union> unionMap = aggregationResultHolder.getResult();\n     if (unionMap == null || unionMap.isEmpty()) {\n-      return Collections.emptyMap();\n+      return null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cf915bdf9b7406bb4b6701aac70b9e131c8463e2"}, "originalPosition": 13}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ff3624d261929e0bb3c8a9b16d2ab110c7abe368", "author": {"user": {"login": "mayankshriv", "name": "Mayank Shrivastava"}}, "url": "https://github.com/apache/pinot/commit/ff3624d261929e0bb3c8a9b16d2ab110c7abe368", "committedDate": "2020-08-04T19:59:43Z", "message": "Improve performance of DistinctCountThetaSketch by eliminating empty sketches and unions.\n\n* In a case with large number of predicates in the post-aggregation-expression (with OR's), we tend\n  to end up with a lot of empty sketches (and unions) when not every row matches each predicate.\n  This causes an overhead of creating sketches and union'ing them, leading to potentially huge performance hit.\n\n* In this PR, we improve this behavior by:\n  - Filtering out empty unions/sketchs when extracting aggregation results.\n  - Careful merging of results in `merge()` with mininmal unions (only when necessary).\n\n* We could also perform lazy creation of unions (to ensure that they are not empty), but that would mean\n  a hash-map lookup per row. This will penalize the general case when there's less number of emtpy unions.\n  So this approach was not taken.\n\n* We saw an overall improvement in latency of about 50%, for cases with:\n  - Large number of predicates, and\n  - Large number of segments, and\n  - Small number of matches per predicate per segment."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "cf915bdf9b7406bb4b6701aac70b9e131c8463e2", "author": {"user": {"login": "mayankshriv", "name": "Mayank Shrivastava"}}, "url": "https://github.com/apache/pinot/commit/cf915bdf9b7406bb4b6701aac70b9e131c8463e2", "committedDate": "2020-08-04T04:06:13Z", "message": "Improve performance of DistinctCountThetaSketch by eliminating empty sketches and unions.\n\n* In a case with large number of predicates in the post-aggregation-expression (with OR's), we tend\n  to end up with a lot of empty sketches (and unions) when not every row matches each predicate.\n  This causes an overhead of creating sketches and union'ing them, leading to potentially huge performance hit.\n\n* In this PR, we improve this behavior by:\n  - Filtering out empty unions/sketchs when extracting aggregation results.\n  - Careful merging of results in `merge()` with mininmal unions (only when necessary).\n\n* We could also perform lazy creation of unions (to ensure that they are not empty), but that would mean\n  a hash-map lookup per row. This will penalize the general case when there's less number of emtpy unions.\n  So this approach was not taken.\n\n* We saw an overall improvement in latency of about 50%, for cases with:\n  - Large number of predicates, and\n  - Large number of segments, and\n  - Small number of matches per predicate per segment."}, "afterCommit": {"oid": "ff3624d261929e0bb3c8a9b16d2ab110c7abe368", "author": {"user": {"login": "mayankshriv", "name": "Mayank Shrivastava"}}, "url": "https://github.com/apache/pinot/commit/ff3624d261929e0bb3c8a9b16d2ab110c7abe368", "committedDate": "2020-08-04T19:59:43Z", "message": "Improve performance of DistinctCountThetaSketch by eliminating empty sketches and unions.\n\n* In a case with large number of predicates in the post-aggregation-expression (with OR's), we tend\n  to end up with a lot of empty sketches (and unions) when not every row matches each predicate.\n  This causes an overhead of creating sketches and union'ing them, leading to potentially huge performance hit.\n\n* In this PR, we improve this behavior by:\n  - Filtering out empty unions/sketchs when extracting aggregation results.\n  - Careful merging of results in `merge()` with mininmal unions (only when necessary).\n\n* We could also perform lazy creation of unions (to ensure that they are not empty), but that would mean\n  a hash-map lookup per row. This will penalize the general case when there's less number of emtpy unions.\n  So this approach was not taken.\n\n* We saw an overall improvement in latency of about 50%, for cases with:\n  - Large number of predicates, and\n  - Large number of segments, and\n  - Small number of matches per predicate per segment."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYxMTUxOTQz", "url": "https://github.com/apache/pinot/pull/5798#pullrequestreview-461151943", "createdAt": "2020-08-04T20:32:29Z", "commit": {"oid": "ff3624d261929e0bb3c8a9b16d2ab110c7abe368"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 118, "cost": 1, "resetAt": "2021-10-28T18:00:02Z"}}}