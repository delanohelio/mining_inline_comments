{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA4NTAxMzYw", "number": 6176, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQxOToyNzozMlrOEw6XMg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQyMDo0ODoxNFrOEw8DFw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5NzIzMzE0OnYy", "diffSide": "RIGHT", "path": "pinot-core/src/main/java/org/apache/pinot/core/segment/index/readers/BaseImmutableDictionary.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQxOToyNzozM1rOHmwmzg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQyMDozMToyNVrOHmytMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDQwNDMwMg==", "bodyText": "why is this unsupported? since it returns true for isSorted", "url": "https://github.com/apache/pinot/pull/6176#discussion_r510404302", "createdAt": "2020-10-22T19:27:33Z", "author": {"login": "yupeng9"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/segment/index/readers/BaseImmutableDictionary.java", "diffHunk": "@@ -81,6 +80,31 @@ public int indexOf(String stringValue) {\n     return (index >= 0) ? index : NULL_VALUE_INDEX;\n   }\n \n+  @Override\n+  public IntSet getDictIdsInRange(String lower, String upper, boolean includeLower, boolean includeUpper) {\n+    throw new UnsupportedOperationException();\n+  }\n+\n+  @Override\n+  public int compare(int dictId1, int dictId2) {\n+    return Integer.compare(dictId1, dictId2);\n+  }\n+\n+  @Override\n+  public Comparable getMinVal() {\n+    return (Comparable) get(0);\n+  }\n+\n+  @Override\n+  public Comparable getMaxVal() {\n+    return (Comparable) get(_length - 1);\n+  }\n+\n+  @Override\n+  public Object getSortedValues() {\n+    throw new UnsupportedOperationException();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9b1ba0b506277deddc22f6ae31d7ba9b87d30052"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDQwNTY3OA==", "bodyText": "If you want a default impl, then perhaps just remove it, so the subclass must implement it.", "url": "https://github.com/apache/pinot/pull/6176#discussion_r510405678", "createdAt": "2020-10-22T19:30:03Z", "author": {"login": "yupeng9"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/segment/index/readers/BaseImmutableDictionary.java", "diffHunk": "@@ -81,6 +80,31 @@ public int indexOf(String stringValue) {\n     return (index >= 0) ? index : NULL_VALUE_INDEX;\n   }\n \n+  @Override\n+  public IntSet getDictIdsInRange(String lower, String upper, boolean includeLower, boolean includeUpper) {\n+    throw new UnsupportedOperationException();\n+  }\n+\n+  @Override\n+  public int compare(int dictId1, int dictId2) {\n+    return Integer.compare(dictId1, dictId2);\n+  }\n+\n+  @Override\n+  public Comparable getMinVal() {\n+    return (Comparable) get(0);\n+  }\n+\n+  @Override\n+  public Comparable getMaxVal() {\n+    return (Comparable) get(_length - 1);\n+  }\n+\n+  @Override\n+  public Object getSortedValues() {\n+    throw new UnsupportedOperationException();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDQwNDMwMg=="}, "originalCommit": {"oid": "9b1ba0b506277deddc22f6ae31d7ba9b87d30052"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDQzODcwNw==", "bodyText": "Added the note: This method is for the stats collection phase when sealing the consuming segment, so not required for regular immutable dictionary within the immutable segment.", "url": "https://github.com/apache/pinot/pull/6176#discussion_r510438707", "createdAt": "2020-10-22T20:31:25Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/segment/index/readers/BaseImmutableDictionary.java", "diffHunk": "@@ -81,6 +80,31 @@ public int indexOf(String stringValue) {\n     return (index >= 0) ? index : NULL_VALUE_INDEX;\n   }\n \n+  @Override\n+  public IntSet getDictIdsInRange(String lower, String upper, boolean includeLower, boolean includeUpper) {\n+    throw new UnsupportedOperationException();\n+  }\n+\n+  @Override\n+  public int compare(int dictId1, int dictId2) {\n+    return Integer.compare(dictId1, dictId2);\n+  }\n+\n+  @Override\n+  public Comparable getMinVal() {\n+    return (Comparable) get(0);\n+  }\n+\n+  @Override\n+  public Comparable getMaxVal() {\n+    return (Comparable) get(_length - 1);\n+  }\n+\n+  @Override\n+  public Object getSortedValues() {\n+    throw new UnsupportedOperationException();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDQwNDMwMg=="}, "originalCommit": {"oid": "9b1ba0b506277deddc22f6ae31d7ba9b87d30052"}, "originalPosition": 64}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5NzIzNDgzOnYy", "diffSide": "RIGHT", "path": "pinot-core/src/main/java/org/apache/pinot/core/segment/index/readers/BaseImmutableDictionary.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQxOToyODowNlrOHmwn3A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQyMDozNDoyN1rOHmyzUg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDQwNDU3Mg==", "bodyText": "why can this be supported?", "url": "https://github.com/apache/pinot/pull/6176#discussion_r510404572", "createdAt": "2020-10-22T19:28:06Z", "author": {"login": "yupeng9"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/segment/index/readers/BaseImmutableDictionary.java", "diffHunk": "@@ -81,6 +80,31 @@ public int indexOf(String stringValue) {\n     return (index >= 0) ? index : NULL_VALUE_INDEX;\n   }\n \n+  @Override\n+  public IntSet getDictIdsInRange(String lower, String upper, boolean includeLower, boolean includeUpper) {\n+    throw new UnsupportedOperationException();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9b1ba0b506277deddc22f6ae31d7ba9b87d30052"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDQ0MDI3NA==", "bodyText": "This method is for the unsorted dictionary. Added the note", "url": "https://github.com/apache/pinot/pull/6176#discussion_r510440274", "createdAt": "2020-10-22T20:34:27Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/segment/index/readers/BaseImmutableDictionary.java", "diffHunk": "@@ -81,6 +80,31 @@ public int indexOf(String stringValue) {\n     return (index >= 0) ? index : NULL_VALUE_INDEX;\n   }\n \n+  @Override\n+  public IntSet getDictIdsInRange(String lower, String upper, boolean includeLower, boolean includeUpper) {\n+    throw new UnsupportedOperationException();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDQwNDU3Mg=="}, "originalCommit": {"oid": "9b1ba0b506277deddc22f6ae31d7ba9b87d30052"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5NzQ1NjY3OnYy", "diffSide": "RIGHT", "path": "pinot-core/src/main/java/org/apache/pinot/core/segment/index/readers/Dictionary.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQyMDozMjoxOVrOHmyu6w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQyMDozNDo1OVrOHmy0Vg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDQzOTE0Nw==", "bodyText": "NIT: dictionary-> dictionaries", "url": "https://github.com/apache/pinot/pull/6176#discussion_r510439147", "createdAt": "2020-10-22T20:32:19Z", "author": {"login": "chenboat"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/segment/index/readers/Dictionary.java", "diffHunk": "@@ -40,14 +42,52 @@\n    */\n   DataType getValueType();\n \n+  /**\n+   * Returns the number of values in the dictionary.\n+   */\n   int length();\n \n   /**\n    * Returns the index of the string representation of the value in the dictionary, or {@link #NULL_VALUE_INDEX} (-1) if\n-   * the value does not exist. This API is for cross-type predicate evaluation.\n+   * the value does not exist. This method is for the cross-type predicate evaluation.\n    */\n   int indexOf(String stringValue);\n \n+  /**\n+   * Returns the insertion index of the string representation of the value in the dictionary. This method follows the\n+   * same behavior as in {@link Arrays#binarySearch(Object[], Object)}. All sorted dictionary should support this", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9b1ba0b506277deddc22f6ae31d7ba9b87d30052"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDQ0MDUzNA==", "bodyText": "Done", "url": "https://github.com/apache/pinot/pull/6176#discussion_r510440534", "createdAt": "2020-10-22T20:34:59Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/segment/index/readers/Dictionary.java", "diffHunk": "@@ -40,14 +42,52 @@\n    */\n   DataType getValueType();\n \n+  /**\n+   * Returns the number of values in the dictionary.\n+   */\n   int length();\n \n   /**\n    * Returns the index of the string representation of the value in the dictionary, or {@link #NULL_VALUE_INDEX} (-1) if\n-   * the value does not exist. This API is for cross-type predicate evaluation.\n+   * the value does not exist. This method is for the cross-type predicate evaluation.\n    */\n   int indexOf(String stringValue);\n \n+  /**\n+   * Returns the insertion index of the string representation of the value in the dictionary. This method follows the\n+   * same behavior as in {@link Arrays#binarySearch(Object[], Object)}. All sorted dictionary should support this", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDQzOTE0Nw=="}, "originalCommit": {"oid": "9b1ba0b506277deddc22f6ae31d7ba9b87d30052"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5NzQ2MTc0OnYy", "diffSide": "RIGHT", "path": "pinot-core/src/main/java/org/apache/pinot/core/segment/index/readers/Dictionary.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQyMDozMzo1MFrOHmyx-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQyMDo0MTo1N1rOHmzB-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDQzOTkyOA==", "bodyText": "is it string value comparison?", "url": "https://github.com/apache/pinot/pull/6176#discussion_r510439928", "createdAt": "2020-10-22T20:33:50Z", "author": {"login": "chenboat"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/segment/index/readers/Dictionary.java", "diffHunk": "@@ -40,14 +42,52 @@\n    */\n   DataType getValueType();\n \n+  /**\n+   * Returns the number of values in the dictionary.\n+   */\n   int length();\n \n   /**\n    * Returns the index of the string representation of the value in the dictionary, or {@link #NULL_VALUE_INDEX} (-1) if\n-   * the value does not exist. This API is for cross-type predicate evaluation.\n+   * the value does not exist. This method is for the cross-type predicate evaluation.\n    */\n   int indexOf(String stringValue);\n \n+  /**\n+   * Returns the insertion index of the string representation of the value in the dictionary. This method follows the\n+   * same behavior as in {@link Arrays#binarySearch(Object[], Object)}. All sorted dictionary should support this\n+   * method. This method is for the range predicate evaluation.\n+   */\n+  int insertionIndexOf(String stringValue);\n+\n+  /**\n+   * Returns a set of dictIds in the given value range, where lower/upper bound can be \"*\" which indicates unbounded\n+   * range. All unsorted dictionary should support this method. This method is for the range predicate evaluation.\n+   */\n+  IntSet getDictIdsInRange(String lower, String upper, boolean includeLower, boolean includeUpper);\n+\n+  /**\n+   * Returns the comparison result of value for dictId 1 and dictId 2, i.e. {@code value1.compareTo(value2)}.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9b1ba0b506277deddc22f6ae31d7ba9b87d30052"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDQ0NDAyNw==", "bodyText": "No, actual value. Updated the javadoc", "url": "https://github.com/apache/pinot/pull/6176#discussion_r510444027", "createdAt": "2020-10-22T20:41:57Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/segment/index/readers/Dictionary.java", "diffHunk": "@@ -40,14 +42,52 @@\n    */\n   DataType getValueType();\n \n+  /**\n+   * Returns the number of values in the dictionary.\n+   */\n   int length();\n \n   /**\n    * Returns the index of the string representation of the value in the dictionary, or {@link #NULL_VALUE_INDEX} (-1) if\n-   * the value does not exist. This API is for cross-type predicate evaluation.\n+   * the value does not exist. This method is for the cross-type predicate evaluation.\n    */\n   int indexOf(String stringValue);\n \n+  /**\n+   * Returns the insertion index of the string representation of the value in the dictionary. This method follows the\n+   * same behavior as in {@link Arrays#binarySearch(Object[], Object)}. All sorted dictionary should support this\n+   * method. This method is for the range predicate evaluation.\n+   */\n+  int insertionIndexOf(String stringValue);\n+\n+  /**\n+   * Returns a set of dictIds in the given value range, where lower/upper bound can be \"*\" which indicates unbounded\n+   * range. All unsorted dictionary should support this method. This method is for the range predicate evaluation.\n+   */\n+  IntSet getDictIdsInRange(String lower, String upper, boolean includeLower, boolean includeUpper);\n+\n+  /**\n+   * Returns the comparison result of value for dictId 1 and dictId 2, i.e. {@code value1.compareTo(value2)}.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDQzOTkyOA=="}, "originalCommit": {"oid": "9b1ba0b506277deddc22f6ae31d7ba9b87d30052"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5NzQ2NTEwOnYy", "diffSide": "RIGHT", "path": "pinot-core/src/main/java/org/apache/pinot/core/segment/index/readers/Dictionary.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQyMDozNDo0N1rOHmy0Ag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQyMDo0NTozNlrOHmzJUg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDQ0MDQ1MA==", "bodyText": "what happens if the dictionary is empty?", "url": "https://github.com/apache/pinot/pull/6176#discussion_r510440450", "createdAt": "2020-10-22T20:34:47Z", "author": {"login": "chenboat"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/segment/index/readers/Dictionary.java", "diffHunk": "@@ -40,14 +42,52 @@\n    */\n   DataType getValueType();\n \n+  /**\n+   * Returns the number of values in the dictionary.\n+   */\n   int length();\n \n   /**\n    * Returns the index of the string representation of the value in the dictionary, or {@link #NULL_VALUE_INDEX} (-1) if\n-   * the value does not exist. This API is for cross-type predicate evaluation.\n+   * the value does not exist. This method is for the cross-type predicate evaluation.\n    */\n   int indexOf(String stringValue);\n \n+  /**\n+   * Returns the insertion index of the string representation of the value in the dictionary. This method follows the\n+   * same behavior as in {@link Arrays#binarySearch(Object[], Object)}. All sorted dictionary should support this\n+   * method. This method is for the range predicate evaluation.\n+   */\n+  int insertionIndexOf(String stringValue);\n+\n+  /**\n+   * Returns a set of dictIds in the given value range, where lower/upper bound can be \"*\" which indicates unbounded\n+   * range. All unsorted dictionary should support this method. This method is for the range predicate evaluation.\n+   */\n+  IntSet getDictIdsInRange(String lower, String upper, boolean includeLower, boolean includeUpper);\n+\n+  /**\n+   * Returns the comparison result of value for dictId 1 and dictId 2, i.e. {@code value1.compareTo(value2)}.\n+   */\n+  int compare(int dictId1, int dictId2);\n+\n+  /**\n+   * Returns the minimum value in the dictionary. Note that for type BYTES, {@code ByteArray} will be returned.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9b1ba0b506277deddc22f6ae31d7ba9b87d30052"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDQ0NTkwNg==", "bodyText": "Good question. It is undefined, and should not be called when the dictionary is empty. Updated the javadoc.", "url": "https://github.com/apache/pinot/pull/6176#discussion_r510445906", "createdAt": "2020-10-22T20:45:36Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/segment/index/readers/Dictionary.java", "diffHunk": "@@ -40,14 +42,52 @@\n    */\n   DataType getValueType();\n \n+  /**\n+   * Returns the number of values in the dictionary.\n+   */\n   int length();\n \n   /**\n    * Returns the index of the string representation of the value in the dictionary, or {@link #NULL_VALUE_INDEX} (-1) if\n-   * the value does not exist. This API is for cross-type predicate evaluation.\n+   * the value does not exist. This method is for the cross-type predicate evaluation.\n    */\n   int indexOf(String stringValue);\n \n+  /**\n+   * Returns the insertion index of the string representation of the value in the dictionary. This method follows the\n+   * same behavior as in {@link Arrays#binarySearch(Object[], Object)}. All sorted dictionary should support this\n+   * method. This method is for the range predicate evaluation.\n+   */\n+  int insertionIndexOf(String stringValue);\n+\n+  /**\n+   * Returns a set of dictIds in the given value range, where lower/upper bound can be \"*\" which indicates unbounded\n+   * range. All unsorted dictionary should support this method. This method is for the range predicate evaluation.\n+   */\n+  IntSet getDictIdsInRange(String lower, String upper, boolean includeLower, boolean includeUpper);\n+\n+  /**\n+   * Returns the comparison result of value for dictId 1 and dictId 2, i.e. {@code value1.compareTo(value2)}.\n+   */\n+  int compare(int dictId1, int dictId2);\n+\n+  /**\n+   * Returns the minimum value in the dictionary. Note that for type BYTES, {@code ByteArray} will be returned.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDQ0MDQ1MA=="}, "originalCommit": {"oid": "9b1ba0b506277deddc22f6ae31d7ba9b87d30052"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5NzUwOTM1OnYy", "diffSide": "RIGHT", "path": "pinot-core/src/main/java/org/apache/pinot/core/operator/filter/RangeIndexBasedFilterOperator.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQyMDo0ODoxNFrOHmzO6Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QwMDoyODo0MFrOHm4Zpg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDQ0NzMzNw==", "bodyText": "is this change related to this API refactoring? I did not see any change to OfflineDictionaryBasedRangePredicateEvaluator in this PR.", "url": "https://github.com/apache/pinot/pull/6176#discussion_r510447337", "createdAt": "2020-10-22T20:48:14Z", "author": {"login": "chenboat"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/operator/filter/RangeIndexBasedFilterOperator.java", "diffHunk": "@@ -56,12 +56,12 @@ protected FilterBlock getNextBlock() {\n \n     int firstRangeId;\n     int lastRangeId;\n-    if (_rangePredicateEvaluator instanceof OfflineDictionaryBasedRangePredicateEvaluator) {\n+    if (_rangePredicateEvaluator instanceof SortedDictionaryBasedRangePredicateEvaluator) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9b1ba0b506277deddc22f6ae31d7ba9b87d30052"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDQ0ODEzMw==", "bodyText": "Yes. We should determine the evaluator by whether the dictionary is sorted, instead of the instance of the dictionary.", "url": "https://github.com/apache/pinot/pull/6176#discussion_r510448133", "createdAt": "2020-10-22T20:49:43Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/operator/filter/RangeIndexBasedFilterOperator.java", "diffHunk": "@@ -56,12 +56,12 @@ protected FilterBlock getNextBlock() {\n \n     int firstRangeId;\n     int lastRangeId;\n-    if (_rangePredicateEvaluator instanceof OfflineDictionaryBasedRangePredicateEvaluator) {\n+    if (_rangePredicateEvaluator instanceof SortedDictionaryBasedRangePredicateEvaluator) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDQ0NzMzNw=="}, "originalCommit": {"oid": "9b1ba0b506277deddc22f6ae31d7ba9b87d30052"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDQ1Mjk5Ng==", "bodyText": "I mean I did not see any change to OfflineDictionaryBasedRangePredicateEvaluator nor SortedDictionaryBasedRangePredicateEvaluator in this PR. Is this an existing bug for range predicate?", "url": "https://github.com/apache/pinot/pull/6176#discussion_r510452996", "createdAt": "2020-10-22T20:58:26Z", "author": {"login": "chenboat"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/operator/filter/RangeIndexBasedFilterOperator.java", "diffHunk": "@@ -56,12 +56,12 @@ protected FilterBlock getNextBlock() {\n \n     int firstRangeId;\n     int lastRangeId;\n-    if (_rangePredicateEvaluator instanceof OfflineDictionaryBasedRangePredicateEvaluator) {\n+    if (_rangePredicateEvaluator instanceof SortedDictionaryBasedRangePredicateEvaluator) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDQ0NzMzNw=="}, "originalCommit": {"oid": "9b1ba0b506277deddc22f6ae31d7ba9b87d30052"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDQ3MzI3MA==", "bodyText": "Oh, that is under the RangeIndexBasedFilterOperator", "url": "https://github.com/apache/pinot/pull/6176#discussion_r510473270", "createdAt": "2020-10-22T21:38:24Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/operator/filter/RangeIndexBasedFilterOperator.java", "diffHunk": "@@ -56,12 +56,12 @@ protected FilterBlock getNextBlock() {\n \n     int firstRangeId;\n     int lastRangeId;\n-    if (_rangePredicateEvaluator instanceof OfflineDictionaryBasedRangePredicateEvaluator) {\n+    if (_rangePredicateEvaluator instanceof SortedDictionaryBasedRangePredicateEvaluator) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDQ0NzMzNw=="}, "originalCommit": {"oid": "9b1ba0b506277deddc22f6ae31d7ba9b87d30052"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDUzMjAwNg==", "bodyText": "Ah. Got it. You made changes in RangePredicateEvaluatorFactory.java.", "url": "https://github.com/apache/pinot/pull/6176#discussion_r510532006", "createdAt": "2020-10-23T00:28:40Z", "author": {"login": "chenboat"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/operator/filter/RangeIndexBasedFilterOperator.java", "diffHunk": "@@ -56,12 +56,12 @@ protected FilterBlock getNextBlock() {\n \n     int firstRangeId;\n     int lastRangeId;\n-    if (_rangePredicateEvaluator instanceof OfflineDictionaryBasedRangePredicateEvaluator) {\n+    if (_rangePredicateEvaluator instanceof SortedDictionaryBasedRangePredicateEvaluator) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDQ0NzMzNw=="}, "originalCommit": {"oid": "9b1ba0b506277deddc22f6ae31d7ba9b87d30052"}, "originalPosition": 14}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3781, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}