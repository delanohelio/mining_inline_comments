{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDEyNTMzMDIz", "number": 5326, "reviewThreads": {"totalCount": 24, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wM1QwMTozMzo0M1rOD4typQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQxOTowOToyMVrOD7XkWw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwNzk3MDkzOnYy", "diffSide": "RIGHT", "path": "pinot-core/src/main/java/org/apache/pinot/core/data/function/FunctionRegistry.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wM1QwMTozMzo0M1rOGPnqnw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxNjo0OTo0MFrOGQJAbQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTAzMTcxMQ==", "bodyText": "Thoughts on changing the name of this to DefaultFunctionRegistry now that it only applies to the DefaultFunctionEvaluator?", "url": "https://github.com/apache/pinot/pull/5326#discussion_r419031711", "createdAt": "2020-05-03T01:33:43Z", "author": {"login": "reallocf"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/data/function/FunctionRegistry.java", "diffHunk": "@@ -18,36 +18,26 @@\n  */\n package org.apache.pinot.core.data.function;\n \n-import com.google.common.base.Preconditions;\n import java.lang.reflect.Method;\n-import java.lang.reflect.Modifier;\n import java.util.ArrayList;\n import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n \n \n /**\n  * Registry for inbuilt Pinot functions\n  */\n public class FunctionRegistry {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "04da28f3d5ce809fa2b8d83cd0c3bee932110d9a"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTU3Nzk2NQ==", "bodyText": "yes that works", "url": "https://github.com/apache/pinot/pull/5326#discussion_r419577965", "createdAt": "2020-05-04T16:49:40Z", "author": {"login": "npawar"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/data/function/FunctionRegistry.java", "diffHunk": "@@ -18,36 +18,26 @@\n  */\n package org.apache.pinot.core.data.function;\n \n-import com.google.common.base.Preconditions;\n import java.lang.reflect.Method;\n-import java.lang.reflect.Modifier;\n import java.util.ArrayList;\n import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n \n \n /**\n  * Registry for inbuilt Pinot functions\n  */\n public class FunctionRegistry {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTAzMTcxMQ=="}, "originalCommit": {"oid": "04da28f3d5ce809fa2b8d83cd0c3bee932110d9a"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwNzk3MjE4OnYy", "diffSide": "RIGHT", "path": "pinot-core/src/main/java/org/apache/pinot/core/data/function/FunctionRegistryFactory.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wM1QwMTozNTowMlrOGPnrFA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wM1QwMTozNTowMlrOGPnrFA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTAzMTgyOA==", "bodyText": "Blech. Any cleaner way to do this? Oh Java... haha", "url": "https://github.com/apache/pinot/pull/5326#discussion_r419031828", "createdAt": "2020-05-03T01:35:02Z", "author": {"login": "reallocf"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/data/function/FunctionRegistryFactory.java", "diffHunk": "@@ -0,0 +1,37 @@\n+package org.apache.pinot.core.data.function;\n+\n+import java.lang.reflect.Method;\n+import java.util.Arrays;\n+import java.util.List;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+\n+/**\n+ * Factory class to create a {@link FunctionRegistry}\n+ */\n+public class FunctionRegistryFactory {\n+  private static final Logger LOGGER = LoggerFactory.getLogger(FunctionRegistryFactory.class);\n+\n+  private FunctionRegistryFactory() {\n+\n+  }\n+\n+  static List<Method> functionsToRegister;\n+\n+  static {\n+    try {\n+      functionsToRegister = Arrays.asList(DateTimeFunctions.class.getDeclaredMethod(\"toEpochHours\", Long.class),\n+          DateTimeFunctions.class.getDeclaredMethod(\"toEpochMinutes\", Long.class, String.class));\n+    } catch (NoSuchMethodException e) {\n+      LOGGER.error(\"Caught exception when registering function\", e);\n+    }\n+  }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "04da28f3d5ce809fa2b8d83cd0c3bee932110d9a"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwNzk3NDI3OnYy", "diffSide": "RIGHT", "path": "pinot-core/src/test/java/org/apache/pinot/core/data/function/DefaultFunctionEvaluatorTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wM1QwMTozNzo0MFrOGPnr3Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wM1QwMTozNzo0MFrOGPnr3Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTAzMjAyOQ==", "bodyText": "Had to pull this out into its own function (as opposed to a private function) in order to allow for the clazz.newInstance() call on line 56 of FunctionInvoker. Should I move this to a separate file?", "url": "https://github.com/apache/pinot/pull/5326#discussion_r419032029", "createdAt": "2020-05-03T01:37:40Z", "author": {"login": "reallocf"}, "path": "pinot-core/src/test/java/org/apache/pinot/core/data/function/DefaultFunctionEvaluatorTest.java", "diffHunk": "@@ -34,69 +35,72 @@\n   @Test\n   public void testExpressionWithColumn()\n       throws Exception {\n-    Method method = MyFunc.class.getDeclaredMethod(\"reverseString\", String.class);\n-    FunctionRegistry.registerStaticFunction(method);\n-    FunctionInfo functionInfo = FunctionRegistry.resolve(\"reverseString\", new Class<?>[]{Object.class});\n+    MyFunc myFunc = new MyFunc();\n+    FunctionRegistry functionRegistry = new FunctionRegistry(\n+        Collections.singletonList(myFunc.getClass().getDeclaredMethod(\"reverseString\", String.class)));\n+    FunctionInfo functionInfo = functionRegistry.resolve(\"reverseString\", new Class<?>[]{Object.class});\n     System.out.println(functionInfo);\n     String expression = \"reverseString(testColumn)\";\n \n-    DefaultFunctionEvaluator evaluator = new DefaultFunctionEvaluator(expression);\n+    DefaultFunctionEvaluator evaluator = new DefaultFunctionEvaluator(expression, functionRegistry);\n     Assert.assertEquals(evaluator.getArguments(), Lists.newArrayList(\"testColumn\"));\n     GenericRow row = new GenericRow();\n     for (int i = 0; i < 5; i++) {\n       String value = \"testValue\" + i;\n       row.putField(\"testColumn\", value);\n       Object result = evaluator.evaluate(row);\n-      Assert.assertEquals(result, new StringBuilder(value).reverse().toString());\n+      Assert.assertEquals(result, myFunc.reverseString(value));\n     }\n   }\n \n   @Test\n   public void testExpressionWithConstant()\n       throws Exception {\n-    FunctionRegistry\n-        .registerStaticFunction(MyFunc.class.getDeclaredMethod(\"daysSinceEpoch\", String.class, String.class));\n+    MyFunc myFunc = new MyFunc();\n+    FunctionRegistry functionRegistry = new FunctionRegistry(\n+        Collections.singletonList(myFunc.getClass().getDeclaredMethod(\"daysSinceEpoch\", String.class, String.class)));\n     String input = \"1980-01-01\";\n     String format = \"yyyy-MM-dd\";\n     String expression = String.format(\"daysSinceEpoch('%s', '%s')\", input, format);\n-    DefaultFunctionEvaluator evaluator = new DefaultFunctionEvaluator(expression);\n+    DefaultFunctionEvaluator evaluator = new DefaultFunctionEvaluator(expression, functionRegistry);\n     Assert.assertTrue(evaluator.getArguments().isEmpty());\n     GenericRow row = new GenericRow();\n     Object result = evaluator.evaluate(row);\n-    Assert.assertEquals(result, MyFunc.daysSinceEpoch(input, format));\n+    Assert.assertEquals(result, myFunc.daysSinceEpoch(input, format));\n   }\n \n   @Test\n   public void testMultiFunctionExpression()\n       throws Exception {\n-    FunctionRegistry.registerStaticFunction(MyFunc.class.getDeclaredMethod(\"reverseString\", String.class));\n-    FunctionRegistry\n-        .registerStaticFunction(MyFunc.class.getDeclaredMethod(\"daysSinceEpoch\", String.class, String.class));\n+    MyFunc myFunc = new MyFunc();\n+    FunctionRegistry functionRegistry = new FunctionRegistry(Arrays\n+        .asList(myFunc.getClass().getDeclaredMethod(\"reverseString\", String.class),\n+            myFunc.getClass().getDeclaredMethod(\"daysSinceEpoch\", String.class, String.class)));\n     String input = \"1980-01-01\";\n-    String reversedInput = MyFunc.reverseString(input);\n+    String reversedInput = myFunc.reverseString(input);\n     String format = \"yyyy-MM-dd\";\n     String expression = String.format(\"daysSinceEpoch(reverseString('%s'), '%s')\", reversedInput, format);\n-    DefaultFunctionEvaluator evaluator = new DefaultFunctionEvaluator(expression);\n+    DefaultFunctionEvaluator evaluator = new DefaultFunctionEvaluator(expression, functionRegistry);\n     Assert.assertTrue(evaluator.getArguments().isEmpty());\n     GenericRow row = new GenericRow();\n     Object result = evaluator.evaluate(row);\n-    Assert.assertEquals(result, MyFunc.daysSinceEpoch(input, format));\n+    Assert.assertEquals(result, myFunc.daysSinceEpoch(input, format));\n   }\n+}\n \n-  private static class MyFunc {\n-    static String reverseString(String input) {\n-      return new StringBuilder(input).reverse().toString();\n-    }\n+class MyFunc {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "04da28f3d5ce809fa2b8d83cd0c3bee932110d9a"}, "originalPosition": 86}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwNzk5MjAwOnYy", "diffSide": "RIGHT", "path": "pinot-core/src/test/java/org/apache/pinot/core/data/function/DefaultFunctionEvaluatorTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wM1QwMjowMTo0M1rOGPnz0A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wM1QwMjowMTo0M1rOGPnz0A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTAzNDA2NA==", "bodyText": "Use Lists instead", "url": "https://github.com/apache/pinot/pull/5326#discussion_r419034064", "createdAt": "2020-05-03T02:01:43Z", "author": {"login": "reallocf"}, "path": "pinot-core/src/test/java/org/apache/pinot/core/data/function/DefaultFunctionEvaluatorTest.java", "diffHunk": "@@ -19,7 +19,8 @@\n package org.apache.pinot.core.data.function;\n \n import com.google.common.collect.Lists;\n-import java.lang.reflect.Method;\n+import java.util.Arrays;\n+import java.util.Collections;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "04da28f3d5ce809fa2b8d83cd0c3bee932110d9a"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwNzk5MjEzOnYy", "diffSide": "RIGHT", "path": "pinot-core/src/test/java/org/apache/pinot/core/data/function/DefaultFunctionEvaluatorTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wM1QwMjowMTo1NFrOGPnz4A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wM1QwMjowMTo1NFrOGPnz4A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTAzNDA4MA==", "bodyText": "Lists.newArrayList(...)", "url": "https://github.com/apache/pinot/pull/5326#discussion_r419034080", "createdAt": "2020-05-03T02:01:54Z", "author": {"login": "reallocf"}, "path": "pinot-core/src/test/java/org/apache/pinot/core/data/function/DefaultFunctionEvaluatorTest.java", "diffHunk": "@@ -34,69 +35,72 @@\n   @Test\n   public void testExpressionWithColumn()\n       throws Exception {\n-    Method method = MyFunc.class.getDeclaredMethod(\"reverseString\", String.class);\n-    FunctionRegistry.registerStaticFunction(method);\n-    FunctionInfo functionInfo = FunctionRegistry.resolve(\"reverseString\", new Class<?>[]{Object.class});\n+    MyFunc myFunc = new MyFunc();\n+    FunctionRegistry functionRegistry = new FunctionRegistry(\n+        Collections.singletonList(myFunc.getClass().getDeclaredMethod(\"reverseString\", String.class)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "04da28f3d5ce809fa2b8d83cd0c3bee932110d9a"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwNzk5MjE4OnYy", "diffSide": "RIGHT", "path": "pinot-core/src/test/java/org/apache/pinot/core/data/function/DefaultFunctionEvaluatorTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wM1QwMjowMjowNlrOGPnz6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wM1QwMjowMjowNlrOGPnz6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTAzNDA5MA==", "bodyText": "Lists.newArrayList(...)", "url": "https://github.com/apache/pinot/pull/5326#discussion_r419034090", "createdAt": "2020-05-03T02:02:06Z", "author": {"login": "reallocf"}, "path": "pinot-core/src/test/java/org/apache/pinot/core/data/function/DefaultFunctionEvaluatorTest.java", "diffHunk": "@@ -34,69 +35,72 @@\n   @Test\n   public void testExpressionWithColumn()\n       throws Exception {\n-    Method method = MyFunc.class.getDeclaredMethod(\"reverseString\", String.class);\n-    FunctionRegistry.registerStaticFunction(method);\n-    FunctionInfo functionInfo = FunctionRegistry.resolve(\"reverseString\", new Class<?>[]{Object.class});\n+    MyFunc myFunc = new MyFunc();\n+    FunctionRegistry functionRegistry = new FunctionRegistry(\n+        Collections.singletonList(myFunc.getClass().getDeclaredMethod(\"reverseString\", String.class)));\n+    FunctionInfo functionInfo = functionRegistry.resolve(\"reverseString\", new Class<?>[]{Object.class});\n     System.out.println(functionInfo);\n     String expression = \"reverseString(testColumn)\";\n \n-    DefaultFunctionEvaluator evaluator = new DefaultFunctionEvaluator(expression);\n+    DefaultFunctionEvaluator evaluator = new DefaultFunctionEvaluator(expression, functionRegistry);\n     Assert.assertEquals(evaluator.getArguments(), Lists.newArrayList(\"testColumn\"));\n     GenericRow row = new GenericRow();\n     for (int i = 0; i < 5; i++) {\n       String value = \"testValue\" + i;\n       row.putField(\"testColumn\", value);\n       Object result = evaluator.evaluate(row);\n-      Assert.assertEquals(result, new StringBuilder(value).reverse().toString());\n+      Assert.assertEquals(result, myFunc.reverseString(value));\n     }\n   }\n \n   @Test\n   public void testExpressionWithConstant()\n       throws Exception {\n-    FunctionRegistry\n-        .registerStaticFunction(MyFunc.class.getDeclaredMethod(\"daysSinceEpoch\", String.class, String.class));\n+    MyFunc myFunc = new MyFunc();\n+    FunctionRegistry functionRegistry = new FunctionRegistry(\n+        Collections.singletonList(myFunc.getClass().getDeclaredMethod(\"daysSinceEpoch\", String.class, String.class)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "04da28f3d5ce809fa2b8d83cd0c3bee932110d9a"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwNzk5MjM4OnYy", "diffSide": "RIGHT", "path": "pinot-core/src/test/java/org/apache/pinot/core/data/function/DefaultFunctionEvaluatorTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wM1QwMjowMjoyN1rOGPn0BA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wM1QwMjowMjoyN1rOGPn0BA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTAzNDExNg==", "bodyText": "Lists.newArrayList(...)", "url": "https://github.com/apache/pinot/pull/5326#discussion_r419034116", "createdAt": "2020-05-03T02:02:27Z", "author": {"login": "reallocf"}, "path": "pinot-core/src/test/java/org/apache/pinot/core/data/function/DefaultFunctionEvaluatorTest.java", "diffHunk": "@@ -34,69 +35,72 @@\n   @Test\n   public void testExpressionWithColumn()\n       throws Exception {\n-    Method method = MyFunc.class.getDeclaredMethod(\"reverseString\", String.class);\n-    FunctionRegistry.registerStaticFunction(method);\n-    FunctionInfo functionInfo = FunctionRegistry.resolve(\"reverseString\", new Class<?>[]{Object.class});\n+    MyFunc myFunc = new MyFunc();\n+    FunctionRegistry functionRegistry = new FunctionRegistry(\n+        Collections.singletonList(myFunc.getClass().getDeclaredMethod(\"reverseString\", String.class)));\n+    FunctionInfo functionInfo = functionRegistry.resolve(\"reverseString\", new Class<?>[]{Object.class});\n     System.out.println(functionInfo);\n     String expression = \"reverseString(testColumn)\";\n \n-    DefaultFunctionEvaluator evaluator = new DefaultFunctionEvaluator(expression);\n+    DefaultFunctionEvaluator evaluator = new DefaultFunctionEvaluator(expression, functionRegistry);\n     Assert.assertEquals(evaluator.getArguments(), Lists.newArrayList(\"testColumn\"));\n     GenericRow row = new GenericRow();\n     for (int i = 0; i < 5; i++) {\n       String value = \"testValue\" + i;\n       row.putField(\"testColumn\", value);\n       Object result = evaluator.evaluate(row);\n-      Assert.assertEquals(result, new StringBuilder(value).reverse().toString());\n+      Assert.assertEquals(result, myFunc.reverseString(value));\n     }\n   }\n \n   @Test\n   public void testExpressionWithConstant()\n       throws Exception {\n-    FunctionRegistry\n-        .registerStaticFunction(MyFunc.class.getDeclaredMethod(\"daysSinceEpoch\", String.class, String.class));\n+    MyFunc myFunc = new MyFunc();\n+    FunctionRegistry functionRegistry = new FunctionRegistry(\n+        Collections.singletonList(myFunc.getClass().getDeclaredMethod(\"daysSinceEpoch\", String.class, String.class)));\n     String input = \"1980-01-01\";\n     String format = \"yyyy-MM-dd\";\n     String expression = String.format(\"daysSinceEpoch('%s', '%s')\", input, format);\n-    DefaultFunctionEvaluator evaluator = new DefaultFunctionEvaluator(expression);\n+    DefaultFunctionEvaluator evaluator = new DefaultFunctionEvaluator(expression, functionRegistry);\n     Assert.assertTrue(evaluator.getArguments().isEmpty());\n     GenericRow row = new GenericRow();\n     Object result = evaluator.evaluate(row);\n-    Assert.assertEquals(result, MyFunc.daysSinceEpoch(input, format));\n+    Assert.assertEquals(result, myFunc.daysSinceEpoch(input, format));\n   }\n \n   @Test\n   public void testMultiFunctionExpression()\n       throws Exception {\n-    FunctionRegistry.registerStaticFunction(MyFunc.class.getDeclaredMethod(\"reverseString\", String.class));\n-    FunctionRegistry\n-        .registerStaticFunction(MyFunc.class.getDeclaredMethod(\"daysSinceEpoch\", String.class, String.class));\n+    MyFunc myFunc = new MyFunc();\n+    FunctionRegistry functionRegistry = new FunctionRegistry(Arrays\n+        .asList(myFunc.getClass().getDeclaredMethod(\"reverseString\", String.class),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "04da28f3d5ce809fa2b8d83cd0c3bee932110d9a"}, "originalPosition": 65}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwODA3MDg5OnYy", "diffSide": "RIGHT", "path": "pinot-core/src/test/java/org/apache/pinot/core/data/function/DefaultFunctionEvaluatorTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wM1QwMzo1NjowN1rOGPoWKA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wM1QwMzo1NjowN1rOGPoWKA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTA0Mjg1Ng==", "bodyText": "There's some testing value to keeping the new StringBuilder... - will change back", "url": "https://github.com/apache/pinot/pull/5326#discussion_r419042856", "createdAt": "2020-05-03T03:56:07Z", "author": {"login": "reallocf"}, "path": "pinot-core/src/test/java/org/apache/pinot/core/data/function/DefaultFunctionEvaluatorTest.java", "diffHunk": "@@ -34,69 +35,72 @@\n   @Test\n   public void testExpressionWithColumn()\n       throws Exception {\n-    Method method = MyFunc.class.getDeclaredMethod(\"reverseString\", String.class);\n-    FunctionRegistry.registerStaticFunction(method);\n-    FunctionInfo functionInfo = FunctionRegistry.resolve(\"reverseString\", new Class<?>[]{Object.class});\n+    MyFunc myFunc = new MyFunc();\n+    FunctionRegistry functionRegistry = new FunctionRegistry(\n+        Collections.singletonList(myFunc.getClass().getDeclaredMethod(\"reverseString\", String.class)));\n+    FunctionInfo functionInfo = functionRegistry.resolve(\"reverseString\", new Class<?>[]{Object.class});\n     System.out.println(functionInfo);\n     String expression = \"reverseString(testColumn)\";\n \n-    DefaultFunctionEvaluator evaluator = new DefaultFunctionEvaluator(expression);\n+    DefaultFunctionEvaluator evaluator = new DefaultFunctionEvaluator(expression, functionRegistry);\n     Assert.assertEquals(evaluator.getArguments(), Lists.newArrayList(\"testColumn\"));\n     GenericRow row = new GenericRow();\n     for (int i = 0; i < 5; i++) {\n       String value = \"testValue\" + i;\n       row.putField(\"testColumn\", value);\n       Object result = evaluator.evaluate(row);\n-      Assert.assertEquals(result, new StringBuilder(value).reverse().toString());\n+      Assert.assertEquals(result, myFunc.reverseString(value));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "04da28f3d5ce809fa2b8d83cd0c3bee932110d9a"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxMTY1NjY0OnYy", "diffSide": "RIGHT", "path": "pinot-core/src/main/java/org/apache/pinot/core/data/function/DateTimeFunctions.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxNjozMTowMVrOGQIRXw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxNjozMTowMVrOGQIRXw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTU2NTkxOQ==", "bodyText": "use getOrDefault?", "url": "https://github.com/apache/pinot/pull/5326#discussion_r419565919", "createdAt": "2020-05-04T16:31:01Z", "author": {"login": "npawar"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/data/function/DateTimeFunctions.java", "diffHunk": "@@ -40,4 +47,14 @@ static Long toEpochHours(Long millis) {\n   static Long toEpochMinutes(Long millis, String bucket) {\n     return TimeUnit.MILLISECONDS.toMinutes(millis) / Integer.parseInt(bucket);\n   }\n+\n+  DateTime toDateTime(String dateTimeString, String pattern) {\n+    if (!_dateTimeFormatterMap.containsKey(pattern)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0e551b2d46f6366b8d93be865bd2ac570d799e0e"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxMTY4ODM2OnYy", "diffSide": "RIGHT", "path": "pinot-core/src/main/java/org/apache/pinot/core/data/function/DateTimeFunctions.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxNjozODozNlrOGQIknQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOVQyMTo1NTo1NVrOGS-d7g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTU3MDg0NQ==", "bodyText": "These functions will be applied during record transformation, and then the GenericRecord  is directly sent to the indexer\nRecordReader -> GenericRecord -> RecordTransformer -> GenericRecord -> Indexer.\nDateTime is not a datatype that Pinot can understand. Inputs and outputs from these transform functions should be STRING, INT, LONG.", "url": "https://github.com/apache/pinot/pull/5326#discussion_r419570845", "createdAt": "2020-05-04T16:38:36Z", "author": {"login": "npawar"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/data/function/DateTimeFunctions.java", "diffHunk": "@@ -40,4 +47,14 @@ static Long toEpochHours(Long millis) {\n   static Long toEpochMinutes(Long millis, String bucket) {\n     return TimeUnit.MILLISECONDS.toMinutes(millis) / Integer.parseInt(bucket);\n   }\n+\n+  DateTime toDateTime(String dateTimeString, String pattern) {\n+    if (!_dateTimeFormatterMap.containsKey(pattern)) {\n+      _dateTimeFormatterMap.put(pattern, DateTimeFormat.forPattern(pattern));\n+    }\n+\n+    DateTimeFormatter dateTimeFormatter = _dateTimeFormatterMap.get(pattern);\n+\n+    return dateTimeFormatter.parseDateTime(dateTimeString);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0e551b2d46f6366b8d93be865bd2ac570d799e0e"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTYwMzQyNw==", "bodyText": "I guess this answers your question about fromDateTime?", "url": "https://github.com/apache/pinot/pull/5326#discussion_r419603427", "createdAt": "2020-05-04T17:29:35Z", "author": {"login": "npawar"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/data/function/DateTimeFunctions.java", "diffHunk": "@@ -40,4 +47,14 @@ static Long toEpochHours(Long millis) {\n   static Long toEpochMinutes(Long millis, String bucket) {\n     return TimeUnit.MILLISECONDS.toMinutes(millis) / Integer.parseInt(bucket);\n   }\n+\n+  DateTime toDateTime(String dateTimeString, String pattern) {\n+    if (!_dateTimeFormatterMap.containsKey(pattern)) {\n+      _dateTimeFormatterMap.put(pattern, DateTimeFormat.forPattern(pattern));\n+    }\n+\n+    DateTimeFormatter dateTimeFormatter = _dateTimeFormatterMap.get(pattern);\n+\n+    return dateTimeFormatter.parseDateTime(dateTimeString);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTU3MDg0NQ=="}, "originalCommit": {"oid": "0e551b2d46f6366b8d93be865bd2ac570d799e0e"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjU1MTAyMg==", "bodyText": "Okay, adjusted this so toDateTime takes in a Long millis and returns a String formattedDateTime and fromDateTime takes in a String formattedDateTime and outputs a Long millis - does that seem right to you?", "url": "https://github.com/apache/pinot/pull/5326#discussion_r422551022", "createdAt": "2020-05-09T21:55:55Z", "author": {"login": "reallocf"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/data/function/DateTimeFunctions.java", "diffHunk": "@@ -40,4 +47,14 @@ static Long toEpochHours(Long millis) {\n   static Long toEpochMinutes(Long millis, String bucket) {\n     return TimeUnit.MILLISECONDS.toMinutes(millis) / Integer.parseInt(bucket);\n   }\n+\n+  DateTime toDateTime(String dateTimeString, String pattern) {\n+    if (!_dateTimeFormatterMap.containsKey(pattern)) {\n+      _dateTimeFormatterMap.put(pattern, DateTimeFormat.forPattern(pattern));\n+    }\n+\n+    DateTimeFormatter dateTimeFormatter = _dateTimeFormatterMap.get(pattern);\n+\n+    return dateTimeFormatter.parseDateTime(dateTimeString);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTU3MDg0NQ=="}, "originalCommit": {"oid": "0e551b2d46f6366b8d93be865bd2ac570d799e0e"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxMTcyNTAxOnYy", "diffSide": "RIGHT", "path": "pinot-core/src/main/java/org/apache/pinot/core/data/function/DefaultFunctionEvaluator.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxNjo0NzoyM1rOGQI63w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOVQyMTo1NToxMFrOGS-dlA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTU3NjU0Mw==", "bodyText": "An instance of DefaultFunctionEvaluator is created per transform function in the schema. We don't want to call getFunctionRegistry multiple times, we'll just end up creating many registries right?", "url": "https://github.com/apache/pinot/pull/5326#discussion_r419576543", "createdAt": "2020-05-04T16:47:23Z", "author": {"login": "npawar"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/data/function/DefaultFunctionEvaluator.java", "diffHunk": "@@ -50,11 +50,16 @@\n \n   public DefaultFunctionEvaluator(String expression)\n       throws Exception {\n+    this(expression, FunctionRegistryFactory.getFunctionRegistry());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0e551b2d46f6366b8d93be865bd2ac570d799e0e"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjU1MDkzMg==", "bodyText": "I think I'm creating individual DefaultFunctionRegistrys in the right place now, but still not 100% sure. Let me know - thanks! :)", "url": "https://github.com/apache/pinot/pull/5326#discussion_r422550932", "createdAt": "2020-05-09T21:55:10Z", "author": {"login": "reallocf"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/data/function/DefaultFunctionEvaluator.java", "diffHunk": "@@ -50,11 +50,16 @@\n \n   public DefaultFunctionEvaluator(String expression)\n       throws Exception {\n+    this(expression, FunctionRegistryFactory.getFunctionRegistry());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTU3NjU0Mw=="}, "originalCommit": {"oid": "0e551b2d46f6366b8d93be865bd2ac570d799e0e"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxMTc3Nzk5OnYy", "diffSide": "RIGHT", "path": "pinot-core/src/test/java/org/apache/pinot/core/data/function/DefaultFunctionEvaluatorTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxNzowMDoxMlrOGQJbeg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOVQyMTozMjoxOVrOGS-U5A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTU4NDg5MA==", "bodyText": "i didn't understand why this test was added", "url": "https://github.com/apache/pinot/pull/5326#discussion_r419584890", "createdAt": "2020-05-04T17:00:12Z", "author": {"login": "npawar"}, "path": "pinot-core/src/test/java/org/apache/pinot/core/data/function/DefaultFunctionEvaluatorTest.java", "diffHunk": "@@ -54,49 +54,73 @@ public void testExpressionWithColumn()\n   @Test\n   public void testExpressionWithConstant()\n       throws Exception {\n-    FunctionRegistry\n-        .registerStaticFunction(MyFunc.class.getDeclaredMethod(\"daysSinceEpoch\", String.class, String.class));\n+    MyFunc myFunc = new MyFunc();\n+    FunctionRegistry functionRegistry = new FunctionRegistry(\n+        Lists.newArrayList(myFunc.getClass().getDeclaredMethod(\"daysSinceEpoch\", String.class, String.class)));\n     String input = \"1980-01-01\";\n     String format = \"yyyy-MM-dd\";\n     String expression = String.format(\"daysSinceEpoch('%s', '%s')\", input, format);\n-    DefaultFunctionEvaluator evaluator = new DefaultFunctionEvaluator(expression);\n+    DefaultFunctionEvaluator evaluator = new DefaultFunctionEvaluator(expression, functionRegistry);\n     Assert.assertTrue(evaluator.getArguments().isEmpty());\n     GenericRow row = new GenericRow();\n     Object result = evaluator.evaluate(row);\n-    Assert.assertEquals(result, MyFunc.daysSinceEpoch(input, format));\n+    Assert.assertEquals(result, myFunc.daysSinceEpoch(input, format));\n   }\n \n   @Test\n   public void testMultiFunctionExpression()\n       throws Exception {\n-    FunctionRegistry.registerStaticFunction(MyFunc.class.getDeclaredMethod(\"reverseString\", String.class));\n-    FunctionRegistry\n-        .registerStaticFunction(MyFunc.class.getDeclaredMethod(\"daysSinceEpoch\", String.class, String.class));\n+    MyFunc myFunc = new MyFunc();\n+    FunctionRegistry functionRegistry = new FunctionRegistry(Lists\n+        .newArrayList(myFunc.getClass().getDeclaredMethod(\"reverseString\", String.class),\n+            myFunc.getClass().getDeclaredMethod(\"daysSinceEpoch\", String.class, String.class)));\n     String input = \"1980-01-01\";\n-    String reversedInput = MyFunc.reverseString(input);\n+    String reversedInput = myFunc.reverseString(input);\n     String format = \"yyyy-MM-dd\";\n     String expression = String.format(\"daysSinceEpoch(reverseString('%s'), '%s')\", reversedInput, format);\n-    DefaultFunctionEvaluator evaluator = new DefaultFunctionEvaluator(expression);\n+    DefaultFunctionEvaluator evaluator = new DefaultFunctionEvaluator(expression, functionRegistry);\n     Assert.assertTrue(evaluator.getArguments().isEmpty());\n     GenericRow row = new GenericRow();\n     Object result = evaluator.evaluate(row);\n-    Assert.assertEquals(result, MyFunc.daysSinceEpoch(input, format));\n+    Assert.assertEquals(result, myFunc.daysSinceEpoch(input, format));\n   }\n \n-  private static class MyFunc {\n-    static String reverseString(String input) {\n-      return new StringBuilder(input).reverse().toString();\n-    }\n+  @Test\n+  public void testStateSharedBetweenRowsForExecution()\n+      throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0e551b2d46f6366b8d93be865bd2ac570d799e0e"}, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjU0ODcwOA==", "bodyText": "This test basically just confirms that the internal state of the FunctionRegistry is shared between each row. I agree with the current implementation it's fairly self-explanatory, but you can imagine an implementation where the internals of the FunctionRegistry are different for each row. This is to make sure we don't somehow regress to that, because then we'd see a big performance hit for creating a SDF for each row.\nBut can definitely remove if it just feels like clutter to you \u263a\ufe0f", "url": "https://github.com/apache/pinot/pull/5326#discussion_r422548708", "createdAt": "2020-05-09T21:32:19Z", "author": {"login": "reallocf"}, "path": "pinot-core/src/test/java/org/apache/pinot/core/data/function/DefaultFunctionEvaluatorTest.java", "diffHunk": "@@ -54,49 +54,73 @@ public void testExpressionWithColumn()\n   @Test\n   public void testExpressionWithConstant()\n       throws Exception {\n-    FunctionRegistry\n-        .registerStaticFunction(MyFunc.class.getDeclaredMethod(\"daysSinceEpoch\", String.class, String.class));\n+    MyFunc myFunc = new MyFunc();\n+    FunctionRegistry functionRegistry = new FunctionRegistry(\n+        Lists.newArrayList(myFunc.getClass().getDeclaredMethod(\"daysSinceEpoch\", String.class, String.class)));\n     String input = \"1980-01-01\";\n     String format = \"yyyy-MM-dd\";\n     String expression = String.format(\"daysSinceEpoch('%s', '%s')\", input, format);\n-    DefaultFunctionEvaluator evaluator = new DefaultFunctionEvaluator(expression);\n+    DefaultFunctionEvaluator evaluator = new DefaultFunctionEvaluator(expression, functionRegistry);\n     Assert.assertTrue(evaluator.getArguments().isEmpty());\n     GenericRow row = new GenericRow();\n     Object result = evaluator.evaluate(row);\n-    Assert.assertEquals(result, MyFunc.daysSinceEpoch(input, format));\n+    Assert.assertEquals(result, myFunc.daysSinceEpoch(input, format));\n   }\n \n   @Test\n   public void testMultiFunctionExpression()\n       throws Exception {\n-    FunctionRegistry.registerStaticFunction(MyFunc.class.getDeclaredMethod(\"reverseString\", String.class));\n-    FunctionRegistry\n-        .registerStaticFunction(MyFunc.class.getDeclaredMethod(\"daysSinceEpoch\", String.class, String.class));\n+    MyFunc myFunc = new MyFunc();\n+    FunctionRegistry functionRegistry = new FunctionRegistry(Lists\n+        .newArrayList(myFunc.getClass().getDeclaredMethod(\"reverseString\", String.class),\n+            myFunc.getClass().getDeclaredMethod(\"daysSinceEpoch\", String.class, String.class)));\n     String input = \"1980-01-01\";\n-    String reversedInput = MyFunc.reverseString(input);\n+    String reversedInput = myFunc.reverseString(input);\n     String format = \"yyyy-MM-dd\";\n     String expression = String.format(\"daysSinceEpoch(reverseString('%s'), '%s')\", reversedInput, format);\n-    DefaultFunctionEvaluator evaluator = new DefaultFunctionEvaluator(expression);\n+    DefaultFunctionEvaluator evaluator = new DefaultFunctionEvaluator(expression, functionRegistry);\n     Assert.assertTrue(evaluator.getArguments().isEmpty());\n     GenericRow row = new GenericRow();\n     Object result = evaluator.evaluate(row);\n-    Assert.assertEquals(result, MyFunc.daysSinceEpoch(input, format));\n+    Assert.assertEquals(result, myFunc.daysSinceEpoch(input, format));\n   }\n \n-  private static class MyFunc {\n-    static String reverseString(String input) {\n-      return new StringBuilder(input).reverse().toString();\n-    }\n+  @Test\n+  public void testStateSharedBetweenRowsForExecution()\n+      throws Exception {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTU4NDg5MA=="}, "originalCommit": {"oid": "0e551b2d46f6366b8d93be865bd2ac570d799e0e"}, "originalPosition": 78}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxMTg4MTU1OnYy", "diffSide": "RIGHT", "path": "pinot-core/src/main/java/org/apache/pinot/core/data/function/DateTimeFunctions.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxNzoyNjoxOVrOGQKbUg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOVQyMTo1NDowOVrOGS-dOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTYwMTIzNA==", "bodyText": "It seems to me that this should be a concurrent hashmap. Consumers from different partitions may call this  across threads, am I right?", "url": "https://github.com/apache/pinot/pull/5326#discussion_r419601234", "createdAt": "2020-05-04T17:26:19Z", "author": {"login": "mcvsubbu"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/data/function/DateTimeFunctions.java", "diffHunk": "@@ -27,6 +32,8 @@\n  */\n public class DateTimeFunctions {\n \n+  private Map<String, DateTimeFormatter> _dateTimeFormatterMap = new HashMap<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0e551b2d46f6366b8d93be865bd2ac570d799e0e"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjU1MDg0MQ==", "bodyText": "Good catch! Yeah, I'm still new to the concurrency model here - thanks for keeping an eye out for this! :)", "url": "https://github.com/apache/pinot/pull/5326#discussion_r422550841", "createdAt": "2020-05-09T21:54:09Z", "author": {"login": "reallocf"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/data/function/DateTimeFunctions.java", "diffHunk": "@@ -27,6 +32,8 @@\n  */\n public class DateTimeFunctions {\n \n+  private Map<String, DateTimeFormatter> _dateTimeFormatterMap = new HashMap<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTYwMTIzNA=="}, "originalCommit": {"oid": "0e551b2d46f6366b8d93be865bd2ac570d799e0e"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxMjY1OTA5OnYy", "diffSide": "RIGHT", "path": "pinot-core/src/main/java/org/apache/pinot/core/data/function/DateTimeFunctions.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQyMDo1OTowNlrOGQR9Hg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQxOToyMToyMFrOGTqA_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTcyNDU3NA==", "bodyText": "While this is working great for dateTimeFormat functions,  I wonder if we need to instead have multiple constructors (or init methods), and create DateTimeFunction object for every function we encounter in the schema.\nFor example, say we would want to add round(millis, 15:MINUTES). The logic for this is (millis / (15 * 60 * 1000)) * (15* 60 * 1000). We don't want to interpret \"15:MINUTES\" on every row. Instead, we can create a DateTimeFunction that saves \"15:MINUTES\" as a member variable, and then invoke round() on this object.\nWe can have init methods like\ninitBucket(int bucket), initRounding(int rounding), initSDF(String pattern), etc.", "url": "https://github.com/apache/pinot/pull/5326#discussion_r419724574", "createdAt": "2020-05-04T20:59:06Z", "author": {"login": "npawar"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/data/function/DateTimeFunctions.java", "diffHunk": "@@ -27,6 +32,8 @@\n  */\n public class DateTimeFunctions {\n \n+  private Map<String, DateTimeFormatter> _dateTimeFormatterMap = new HashMap<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0e551b2d46f6366b8d93be865bd2ac570d799e0e"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzI2NDUwOA==", "bodyText": "As per offline discussion, we will focus only on toDateTime for now. This comment can be taken up as a separate item in the future", "url": "https://github.com/apache/pinot/pull/5326#discussion_r423264508", "createdAt": "2020-05-11T19:21:20Z", "author": {"login": "npawar"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/data/function/DateTimeFunctions.java", "diffHunk": "@@ -27,6 +32,8 @@\n  */\n public class DateTimeFunctions {\n \n+  private Map<String, DateTimeFormatter> _dateTimeFormatterMap = new HashMap<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTcyNDU3NA=="}, "originalCommit": {"oid": "0e551b2d46f6366b8d93be865bd2ac570d799e0e"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzMTA2MjgwOnYy", "diffSide": "RIGHT", "path": "pinot-core/src/test/java/org/apache/pinot/core/data/function/DateTimeFunctionEvaluatorTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMFQwMDozNDoxMlrOGS_T4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQxOToyMTo1NVrOGTqCXA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjU2NDgzNA==", "bodyText": "Ended up getting a good number of formatting differences when I auto-formatted this file. Is my setup wrong or do y'all get these changes when formatting too?", "url": "https://github.com/apache/pinot/pull/5326#discussion_r422564834", "createdAt": "2020-05-10T00:34:12Z", "author": {"login": "reallocf"}, "path": "pinot-core/src/test/java/org/apache/pinot/core/data/function/DateTimeFunctionEvaluatorTest.java", "diffHunk": "@@ -52,12 +54,14 @@ public void testDateTimeTransformFunctions(String transformFunction, List<String\n     // toEpochSeconds w/ rounding\n     GenericRow row1_1 = new GenericRow();\n     row1_1.putValue(\"timestamp\", 1578685189000L);\n-    inputs.add(new Object[]{\"toEpochSecondsRounded(timestamp, 10)\", Lists.newArrayList(\"timestamp\"), row1_1, 1578685180L});\n+    inputs.add(\n+        new Object[]{\"toEpochSecondsRounded(timestamp, 10)\", Lists.newArrayList(\"timestamp\"), row1_1, 1578685180L});", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c6c78666d8f17e1bb30d2f321e34b596ae8f7f61"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzI2NDg2MA==", "bodyText": "If you've taken the pinot style as mentioned in the Pinot docs, then you're fine.", "url": "https://github.com/apache/pinot/pull/5326#discussion_r423264860", "createdAt": "2020-05-11T19:21:55Z", "author": {"login": "npawar"}, "path": "pinot-core/src/test/java/org/apache/pinot/core/data/function/DateTimeFunctionEvaluatorTest.java", "diffHunk": "@@ -52,12 +54,14 @@ public void testDateTimeTransformFunctions(String transformFunction, List<String\n     // toEpochSeconds w/ rounding\n     GenericRow row1_1 = new GenericRow();\n     row1_1.putValue(\"timestamp\", 1578685189000L);\n-    inputs.add(new Object[]{\"toEpochSecondsRounded(timestamp, 10)\", Lists.newArrayList(\"timestamp\"), row1_1, 1578685180L});\n+    inputs.add(\n+        new Object[]{\"toEpochSecondsRounded(timestamp, 10)\", Lists.newArrayList(\"timestamp\"), row1_1, 1578685180L});", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjU2NDgzNA=="}, "originalCommit": {"oid": "c6c78666d8f17e1bb30d2f321e34b596ae8f7f61"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzNTczNzU0OnYy", "diffSide": "RIGHT", "path": "pinot-core/src/main/java/org/apache/pinot/core/data/function/DateTimeFunctions.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQxODo1NToxMlrOGTpJCw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQxODo1NToxMlrOGTpJCw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzI1MDE4Nw==", "bodyText": "Add javadocs to these 2 methods", "url": "https://github.com/apache/pinot/pull/5326#discussion_r423250187", "createdAt": "2020-05-11T18:55:12Z", "author": {"login": "npawar"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/data/function/DateTimeFunctions.java", "diffHunk": "@@ -203,4 +205,12 @@ static Long fromEpochHoursBucket(Number hours, Number bucket) {\n   static Long fromEpochDaysBucket(Number daysSinceEpoch, Number bucket) {\n     return TimeUnit.DAYS.toMillis(daysSinceEpoch.longValue() * bucket.intValue());\n   }\n+\n+  String toDateTime(Long millis, String pattern) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b800e040c32f2ee87f49dca3d70219ae337fc6e1"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzNTc0NDgzOnYy", "diffSide": "RIGHT", "path": "pinot-core/src/main/java/org/apache/pinot/core/data/function/DateTimePatternHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQxODo1NzowMVrOGTpNoQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQxODo1NzowMVrOGTpNoQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzI1MTM2MQ==", "bodyText": "Add some javadocs to the class and to the public methods\nCan we not call it cache? :) how about just patternDateTimeFormatterMap?\nTypically in this code base, we follow convention like Map<String, DateTimeFormatter> patternDateTimeFormatterMap = new ConcurrentHashMap<>() to declare a Map", "url": "https://github.com/apache/pinot/pull/5326#discussion_r423251361", "createdAt": "2020-05-11T18:57:01Z", "author": {"login": "npawar"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/data/function/DateTimePatternHandler.java", "diffHunk": "@@ -0,0 +1,45 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.core.data.function;\n+\n+import java.util.concurrent.ConcurrentHashMap;\n+import org.joda.time.format.DateTimeFormat;\n+import org.joda.time.format.DateTimeFormatter;\n+\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b800e040c32f2ee87f49dca3d70219ae337fc6e1"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzNTc0OTcyOnYy", "diffSide": "RIGHT", "path": "pinot-core/src/main/java/org/apache/pinot/core/data/function/DateTimePatternHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQxODo1ODoyNFrOGTpQsw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQyMDoyMTo0MlrOGVszRQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzI1MjE0Nw==", "bodyText": "Since you now have ConcurrentHashMap, you could cimply do\nreturn patternDateTimeFormatterCache.computeIfAbsent(pattern, DateTimeFormat::forPattern)", "url": "https://github.com/apache/pinot/pull/5326#discussion_r423252147", "createdAt": "2020-05-11T18:58:24Z", "author": {"login": "npawar"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/data/function/DateTimePatternHandler.java", "diffHunk": "@@ -0,0 +1,45 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.core.data.function;\n+\n+import java.util.concurrent.ConcurrentHashMap;\n+import org.joda.time.format.DateTimeFormat;\n+import org.joda.time.format.DateTimeFormatter;\n+\n+\n+public class DateTimePatternHandler {\n+  private final ConcurrentHashMap<String, DateTimeFormatter> patternDateTimeFormatterCache = new ConcurrentHashMap<>();\n+\n+  public Long parseDateTimeStringToMillis(String dateTimeString, String pattern) {\n+    DateTimeFormatter dateTimeFormatter = getDateTimeFormatterFromCache(pattern);\n+    return dateTimeFormatter.parseMillis(dateTimeString);\n+  }\n+\n+  public String parseMillisToDateTimeString(Long millis, String pattern) {\n+    DateTimeFormatter dateTimeFormatter = getDateTimeFormatterFromCache(pattern);\n+    return dateTimeFormatter.print(millis);\n+  }\n+\n+  private DateTimeFormatter getDateTimeFormatterFromCache(String pattern) {\n+    DateTimeFormatter dateTimeFormatter =\n+        patternDateTimeFormatterCache.getOrDefault(pattern, DateTimeFormat.forPattern(pattern));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b800e040c32f2ee87f49dca3d70219ae337fc6e1"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTQwNzMwMQ==", "bodyText": "Ahh, very slick! :)", "url": "https://github.com/apache/pinot/pull/5326#discussion_r425407301", "createdAt": "2020-05-14T20:21:42Z", "author": {"login": "reallocf"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/data/function/DateTimePatternHandler.java", "diffHunk": "@@ -0,0 +1,45 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.core.data.function;\n+\n+import java.util.concurrent.ConcurrentHashMap;\n+import org.joda.time.format.DateTimeFormat;\n+import org.joda.time.format.DateTimeFormatter;\n+\n+\n+public class DateTimePatternHandler {\n+  private final ConcurrentHashMap<String, DateTimeFormatter> patternDateTimeFormatterCache = new ConcurrentHashMap<>();\n+\n+  public Long parseDateTimeStringToMillis(String dateTimeString, String pattern) {\n+    DateTimeFormatter dateTimeFormatter = getDateTimeFormatterFromCache(pattern);\n+    return dateTimeFormatter.parseMillis(dateTimeString);\n+  }\n+\n+  public String parseMillisToDateTimeString(Long millis, String pattern) {\n+    DateTimeFormatter dateTimeFormatter = getDateTimeFormatterFromCache(pattern);\n+    return dateTimeFormatter.print(millis);\n+  }\n+\n+  private DateTimeFormatter getDateTimeFormatterFromCache(String pattern) {\n+    DateTimeFormatter dateTimeFormatter =\n+        patternDateTimeFormatterCache.getOrDefault(pattern, DateTimeFormat.forPattern(pattern));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzI1MjE0Nw=="}, "originalCommit": {"oid": "b800e040c32f2ee87f49dca3d70219ae337fc6e1"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzNTc1NzkxOnYy", "diffSide": "RIGHT", "path": "pinot-core/src/main/java/org/apache/pinot/core/data/function/DefaultFunctionEvaluator.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQxOTowMTowNFrOGTpWHg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQxOTowMTowNFrOGTpWHg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzI1MzUzNA==", "bodyText": "The name \"Default\" started becoming confusing and unintuitive to me. How about we rename Default to Inbuilt?\nSo we'll have InbuiltFunctionEvaluator and InbuiltFunctionRegistry. wdyt? I feel it's more clear, and anyway we refer to them as inbuilt functions when talking about them to someone.\nYou can also rename tests (pretty much whatever intellij makes you rename when renaming these classes)", "url": "https://github.com/apache/pinot/pull/5326#discussion_r423253534", "createdAt": "2020-05-11T19:01:04Z", "author": {"login": "npawar"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/data/function/DefaultFunctionEvaluator.java", "diffHunk": "@@ -47,11 +47,13 @@\n public class DefaultFunctionEvaluator implements FunctionEvaluator {\n   // Root of the execution tree\n   private final ExecutableNode _rootNode;\n+  private final DefaultFunctionRegistry _defaultFunctionRegistry;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b800e040c32f2ee87f49dca3d70219ae337fc6e1"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzNTc2OTEwOnYy", "diffSide": "RIGHT", "path": "pinot-core/src/main/java/org/apache/pinot/core/data/function/DefaultFunctionRegistryFactory.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQxOTowNDowOVrOGTpc-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQxOTowNDowOVrOGTpc-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzI1NTI5MA==", "bodyText": "I think we should go back to calling this FunctionRegistryFactory (i dont remember if it was this one that you asked if we could rename, apologies if it was). The reason being, I see this class as being the Factory to return FunctionRegistries for all types of functions. For now we only have getInbuiltFunctionRegistry.", "url": "https://github.com/apache/pinot/pull/5326#discussion_r423255290", "createdAt": "2020-05-11T19:04:09Z", "author": {"login": "npawar"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/data/function/DefaultFunctionRegistryFactory.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.core.data.function;\n+\n+import com.google.common.collect.Lists;\n+import java.lang.reflect.Method;\n+import java.util.List;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+\n+public class DefaultFunctionRegistryFactory {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b800e040c32f2ee87f49dca3d70219ae337fc6e1"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzNTc3NTk4OnYy", "diffSide": "RIGHT", "path": "pinot-core/src/main/java/org/apache/pinot/core/data/function/DefaultFunctionRegistryFactory.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQxOTowNjowMlrOGTphGA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQxOTowNjowMlrOGTphGA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzI1NjM0NA==", "bodyText": "javadoc for class. In the javadoc, please mention that \"for now we have only InbuiltFunctionRegistry\"", "url": "https://github.com/apache/pinot/pull/5326#discussion_r423256344", "createdAt": "2020-05-11T19:06:02Z", "author": {"login": "npawar"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/data/function/DefaultFunctionRegistryFactory.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.core.data.function;\n+\n+import com.google.common.collect.Lists;\n+import java.lang.reflect.Method;\n+import java.util.List;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b800e040c32f2ee87f49dca3d70219ae337fc6e1"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzNTc3Nzg0OnYy", "diffSide": "RIGHT", "path": "pinot-core/src/main/java/org/apache/pinot/core/data/function/DefaultFunctionRegistryFactory.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQxOTowNjozOFrOGTpiNw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQyMDo1NDozN1rOGVt1jA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzI1NjYzMQ==", "bodyText": "Javadoc for this method.\nPlease mention that for now we only have DateTme functions in this inbuilt registry", "url": "https://github.com/apache/pinot/pull/5326#discussion_r423256631", "createdAt": "2020-05-11T19:06:38Z", "author": {"login": "npawar"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/data/function/DefaultFunctionRegistryFactory.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.core.data.function;\n+\n+import com.google.common.collect.Lists;\n+import java.lang.reflect.Method;\n+import java.util.List;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+\n+public class DefaultFunctionRegistryFactory {\n+  private static final Logger LOGGER = LoggerFactory.getLogger(DefaultFunctionRegistryFactory.class);\n+\n+  private DefaultFunctionRegistryFactory() {\n+\n+  }\n+\n+  public static DefaultFunctionRegistry getDefaultFunctionRegistry() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b800e040c32f2ee87f49dca3d70219ae337fc6e1"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTQyNDI2OA==", "bodyText": "Now that there's also a JsonFunction function, won't mention where the functions come from.", "url": "https://github.com/apache/pinot/pull/5326#discussion_r425424268", "createdAt": "2020-05-14T20:54:37Z", "author": {"login": "reallocf"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/data/function/DefaultFunctionRegistryFactory.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.core.data.function;\n+\n+import com.google.common.collect.Lists;\n+import java.lang.reflect.Method;\n+import java.util.List;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+\n+public class DefaultFunctionRegistryFactory {\n+  private static final Logger LOGGER = LoggerFactory.getLogger(DefaultFunctionRegistryFactory.class);\n+\n+  private DefaultFunctionRegistryFactory() {\n+\n+  }\n+\n+  public static DefaultFunctionRegistry getDefaultFunctionRegistry() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzI1NjYzMQ=="}, "originalCommit": {"oid": "b800e040c32f2ee87f49dca3d70219ae337fc6e1"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzNTc4NTAxOnYy", "diffSide": "RIGHT", "path": "pinot-core/src/test/java/org/apache/pinot/core/data/function/DateTimeFunctionEvaluatorTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQxOTowODo0NFrOGTpmwg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQxOTowODo0NFrOGTpmwg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzI1Nzc5NA==", "bodyText": "comment should be \"fromDateTime\"", "url": "https://github.com/apache/pinot/pull/5326#discussion_r423257794", "createdAt": "2020-05-11T19:08:44Z", "author": {"login": "npawar"}, "path": "pinot-core/src/test/java/org/apache/pinot/core/data/function/DateTimeFunctionEvaluatorTest.java", "diffHunk": "@@ -160,8 +165,32 @@ public void testDateTimeTransformFunctions(String transformFunction, List<String\n \n     GenericRow row9_1 = new GenericRow();\n     row9_1.putValue(\"fifteenSecondsSinceEpoch\", 80640000L);\n-    inputs.add(new Object[]{\"toEpochMinutesBucket(fromEpochSecondsBucket(fifteenSecondsSinceEpoch, 15), 10)\", Lists.newArrayList(\n-        \"fifteenSecondsSinceEpoch\"), row9_1, 2016000L});\n+    inputs.add(\n+        new Object[]{\"toEpochMinutesBucket(fromEpochSecondsBucket(fifteenSecondsSinceEpoch, 15), 10)\", Lists.newArrayList(\n+            \"fifteenSecondsSinceEpoch\"), row9_1, 2016000L});\n+\n+    // toDateTime simple\n+    GenericRow row10_0 = new GenericRow();\n+    row10_0.putValue(\"dateTime\", 98697600000L);\n+    inputs.add(new Object[]{\"toDateTime(dateTime, 'yyyyMMdd')\", Lists.newArrayList(\"dateTime\"), row10_0, \"19730216\"});\n+\n+    // toDateTime complex\n+    GenericRow row10_1 = new GenericRow();\n+    row10_1.putValue(\"dateTime\", 1234567890000L);\n+    inputs.add(new Object[]{\"toDateTime(dateTime, 'MM/yyyy/dd HH:mm:ss')\", Lists.newArrayList(\n+        \"dateTime\"), row10_1, \"02/2009/13 15:31:30\"});\n+\n+    // toDateTime simple", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b800e040c32f2ee87f49dca3d70219ae337fc6e1"}, "originalPosition": 106}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzNTc4NzE1OnYy", "diffSide": "RIGHT", "path": "pinot-core/src/test/java/org/apache/pinot/core/data/function/DateTimeFunctionEvaluatorTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQxOTowOToyMVrOGTpoFw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQxOToxNjowNlrOGTp2NA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzI1ODEzNQ==", "bodyText": "can you add some test cases that deal with time zones and conversion of time zones?", "url": "https://github.com/apache/pinot/pull/5326#discussion_r423258135", "createdAt": "2020-05-11T19:09:21Z", "author": {"login": "npawar"}, "path": "pinot-core/src/test/java/org/apache/pinot/core/data/function/DateTimeFunctionEvaluatorTest.java", "diffHunk": "@@ -160,8 +165,32 @@ public void testDateTimeTransformFunctions(String transformFunction, List<String\n \n     GenericRow row9_1 = new GenericRow();\n     row9_1.putValue(\"fifteenSecondsSinceEpoch\", 80640000L);\n-    inputs.add(new Object[]{\"toEpochMinutesBucket(fromEpochSecondsBucket(fifteenSecondsSinceEpoch, 15), 10)\", Lists.newArrayList(\n-        \"fifteenSecondsSinceEpoch\"), row9_1, 2016000L});\n+    inputs.add(\n+        new Object[]{\"toEpochMinutesBucket(fromEpochSecondsBucket(fifteenSecondsSinceEpoch, 15), 10)\", Lists.newArrayList(\n+            \"fifteenSecondsSinceEpoch\"), row9_1, 2016000L});\n+\n+    // toDateTime simple\n+    GenericRow row10_0 = new GenericRow();\n+    row10_0.putValue(\"dateTime\", 98697600000L);\n+    inputs.add(new Object[]{\"toDateTime(dateTime, 'yyyyMMdd')\", Lists.newArrayList(\"dateTime\"), row10_0, \"19730216\"});\n+\n+    // toDateTime complex\n+    GenericRow row10_1 = new GenericRow();\n+    row10_1.putValue(\"dateTime\", 1234567890000L);\n+    inputs.add(new Object[]{\"toDateTime(dateTime, 'MM/yyyy/dd HH:mm:ss')\", Lists.newArrayList(\n+        \"dateTime\"), row10_1, \"02/2009/13 15:31:30\"});\n+\n+    // toDateTime simple\n+    GenericRow row11_0 = new GenericRow();\n+    row11_0.putValue(\"dateTime\", \"19730216\");\n+    inputs\n+        .add(new Object[]{\"fromDateTime(dateTime, 'yyyyMMdd')\", Lists.newArrayList(\"dateTime\"), row11_0, 98697600000L});\n+\n+    // toDateTime complex", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b800e040c32f2ee87f49dca3d70219ae337fc6e1"}, "originalPosition": 112}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzI2MTc0OA==", "bodyText": "btw, the last 3 tests are failing in this file. Check the link below for Travis", "url": "https://github.com/apache/pinot/pull/5326#discussion_r423261748", "createdAt": "2020-05-11T19:16:06Z", "author": {"login": "npawar"}, "path": "pinot-core/src/test/java/org/apache/pinot/core/data/function/DateTimeFunctionEvaluatorTest.java", "diffHunk": "@@ -160,8 +165,32 @@ public void testDateTimeTransformFunctions(String transformFunction, List<String\n \n     GenericRow row9_1 = new GenericRow();\n     row9_1.putValue(\"fifteenSecondsSinceEpoch\", 80640000L);\n-    inputs.add(new Object[]{\"toEpochMinutesBucket(fromEpochSecondsBucket(fifteenSecondsSinceEpoch, 15), 10)\", Lists.newArrayList(\n-        \"fifteenSecondsSinceEpoch\"), row9_1, 2016000L});\n+    inputs.add(\n+        new Object[]{\"toEpochMinutesBucket(fromEpochSecondsBucket(fifteenSecondsSinceEpoch, 15), 10)\", Lists.newArrayList(\n+            \"fifteenSecondsSinceEpoch\"), row9_1, 2016000L});\n+\n+    // toDateTime simple\n+    GenericRow row10_0 = new GenericRow();\n+    row10_0.putValue(\"dateTime\", 98697600000L);\n+    inputs.add(new Object[]{\"toDateTime(dateTime, 'yyyyMMdd')\", Lists.newArrayList(\"dateTime\"), row10_0, \"19730216\"});\n+\n+    // toDateTime complex\n+    GenericRow row10_1 = new GenericRow();\n+    row10_1.putValue(\"dateTime\", 1234567890000L);\n+    inputs.add(new Object[]{\"toDateTime(dateTime, 'MM/yyyy/dd HH:mm:ss')\", Lists.newArrayList(\n+        \"dateTime\"), row10_1, \"02/2009/13 15:31:30\"});\n+\n+    // toDateTime simple\n+    GenericRow row11_0 = new GenericRow();\n+    row11_0.putValue(\"dateTime\", \"19730216\");\n+    inputs\n+        .add(new Object[]{\"fromDateTime(dateTime, 'yyyyMMdd')\", Lists.newArrayList(\"dateTime\"), row11_0, 98697600000L});\n+\n+    // toDateTime complex", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzI1ODEzNQ=="}, "originalCommit": {"oid": "b800e040c32f2ee87f49dca3d70219ae337fc6e1"}, "originalPosition": 112}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3221, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}