{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDYyMzU4MTYz", "number": 5793, "reviewThreads": {"totalCount": 36, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwMDoxMDowMFrOEVNdlw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wOVQwMTowOToyMFrOEWhw4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwNjc2MTE5OnYy", "diffSide": "RIGHT", "path": "pinot-common/src/main/java/org/apache/pinot/common/assignment/InstanceAssignmentConfigUtils.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwMDoxMDowMFrOG71o9Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwMDoxMDowMFrOG71o9Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTM5ODAwNQ==", "bodyText": "(nit)\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                return tableConfig.getTierConfigsList() != null && !tableConfig.getTierConfigsList().isEmpty();\n          \n          \n            \n                return CollectionUtils.isNotEmpty(tableConfig.getTierConfigsList());", "url": "https://github.com/apache/pinot/pull/5793#discussion_r465398005", "createdAt": "2020-08-05T00:10:00Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-common/src/main/java/org/apache/pinot/common/assignment/InstanceAssignmentConfigUtils.java", "diffHunk": "@@ -50,6 +50,13 @@ public static boolean shouldRelocateCompletedSegments(TableConfig tableConfig) {\n         .isRelocateCompletedSegments(tableConfig.getTenantConfig());\n   }\n \n+  /**\n+   * Returns whether relocation of segments to tiers has been enabled for this table\n+   */\n+  public static boolean shouldRelocateToTiers(TableConfig tableConfig) {\n+    return tableConfig.getTierConfigsList() != null && !tableConfig.getTierConfigsList().isEmpty();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "43502baaaa8da8974c1ce90323b4c297c2546245"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwNjc3MzU0OnYy", "diffSide": "RIGHT", "path": "pinot-common/src/main/java/org/apache/pinot/common/assignment/InstanceAssignmentConfigUtils.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwMDoxNjoyOVrOG71wBg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQyMzozOTozNVrOG9HrAg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTM5OTgxNA==", "bodyText": "Consider moving this into a separate class TierConfigUtils?", "url": "https://github.com/apache/pinot/pull/5793#discussion_r465399814", "createdAt": "2020-08-05T00:16:29Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-common/src/main/java/org/apache/pinot/common/assignment/InstanceAssignmentConfigUtils.java", "diffHunk": "@@ -50,6 +50,13 @@ public static boolean shouldRelocateCompletedSegments(TableConfig tableConfig) {\n         .isRelocateCompletedSegments(tableConfig.getTenantConfig());\n   }\n \n+  /**\n+   * Returns whether relocation of segments to tiers has been enabled for this table\n+   */\n+  public static boolean shouldRelocateToTiers(TableConfig tableConfig) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "43502baaaa8da8974c1ce90323b4c297c2546245"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njc0MjAxOA==", "bodyText": "Done", "url": "https://github.com/apache/pinot/pull/5793#discussion_r466742018", "createdAt": "2020-08-06T23:39:35Z", "author": {"login": "npawar"}, "path": "pinot-common/src/main/java/org/apache/pinot/common/assignment/InstanceAssignmentConfigUtils.java", "diffHunk": "@@ -50,6 +50,13 @@ public static boolean shouldRelocateCompletedSegments(TableConfig tableConfig) {\n         .isRelocateCompletedSegments(tableConfig.getTenantConfig());\n   }\n \n+  /**\n+   * Returns whether relocation of segments to tiers has been enabled for this table\n+   */\n+  public static boolean shouldRelocateToTiers(TableConfig tableConfig) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTM5OTgxNA=="}, "originalCommit": {"oid": "43502baaaa8da8974c1ce90323b4c297c2546245"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxMTAxMTc0OnYy", "diffSide": "RIGHT", "path": "pinot-controller/src/main/java/org/apache/pinot/controller/helix/core/assignment/segment/OfflineSegmentAssignment.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQyMzo0ODoyMlrOG8eXkA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQyMzo0MDoxMVrOG9Hryg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjA2NTI5Ng==", "bodyText": "Move this calculation into the rebalanceTable() because we don't need it for assignSegment(). Same for RealtimeSegmentAssignment", "url": "https://github.com/apache/pinot/pull/5793#discussion_r466065296", "createdAt": "2020-08-05T23:48:22Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-controller/src/main/java/org/apache/pinot/controller/helix/core/assignment/segment/OfflineSegmentAssignment.java", "diffHunk": "@@ -82,6 +91,10 @@ public void init(HelixManager helixManager, TableConfig tableConfig) {\n         tableConfig.getValidationConfig().getReplicaGroupStrategyConfig();\n     _partitionColumn = replicaGroupStrategyConfig != null ? replicaGroupStrategyConfig.getPartitionColumn() : null;\n \n+    if (InstanceAssignmentConfigUtils.shouldRelocateToTiers(tableConfig)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "43502baaaa8da8974c1ce90323b4c297c2546245"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njc0MjIxOA==", "bodyText": "Done. Added sortedTiers list to the rebalance method", "url": "https://github.com/apache/pinot/pull/5793#discussion_r466742218", "createdAt": "2020-08-06T23:40:11Z", "author": {"login": "npawar"}, "path": "pinot-controller/src/main/java/org/apache/pinot/controller/helix/core/assignment/segment/OfflineSegmentAssignment.java", "diffHunk": "@@ -82,6 +91,10 @@ public void init(HelixManager helixManager, TableConfig tableConfig) {\n         tableConfig.getValidationConfig().getReplicaGroupStrategyConfig();\n     _partitionColumn = replicaGroupStrategyConfig != null ? replicaGroupStrategyConfig.getPartitionColumn() : null;\n \n+    if (InstanceAssignmentConfigUtils.shouldRelocateToTiers(tableConfig)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjA2NTI5Ng=="}, "originalCommit": {"oid": "43502baaaa8da8974c1ce90323b4c297c2546245"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxMTAyMDg5OnYy", "diffSide": "RIGHT", "path": "pinot-controller/src/main/java/org/apache/pinot/controller/helix/core/assignment/segment/OfflineSegmentAssignment.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQyMzo1MzoxMVrOG8ec1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQyMzo0MDozMVrOG9HsKw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjA2NjY0NA==", "bodyText": "Prefer the old non-lambda way for both performance and readability.\nAlso consider moving this common logic into TierUtils", "url": "https://github.com/apache/pinot/pull/5793#discussion_r466066644", "createdAt": "2020-08-05T23:53:11Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-controller/src/main/java/org/apache/pinot/controller/helix/core/assignment/segment/OfflineSegmentAssignment.java", "diffHunk": "@@ -91,6 +104,17 @@ public void init(HelixManager helixManager, TableConfig tableConfig) {\n     }\n   }\n \n+  /**\n+   * Returns a sorted list of Tiers from the TierConfigList in table config.\n+   * Keeps only those which have \"pinotServer\" storage type.\n+   */\n+  @VisibleForTesting\n+  protected List<Tier> getSortedTiersForPinotServerStorage(List<TierConfig> tierConfigList) {\n+    return tierConfigList.stream().filter(t -> TierFactory.PINOT_SERVER_STORAGE_TYPE.equals(t.getStorageType()))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "43502baaaa8da8974c1ce90323b4c297c2546245"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njc0MjMxNQ==", "bodyText": "Moved to TierConfigUtils, and removed lambdas", "url": "https://github.com/apache/pinot/pull/5793#discussion_r466742315", "createdAt": "2020-08-06T23:40:31Z", "author": {"login": "npawar"}, "path": "pinot-controller/src/main/java/org/apache/pinot/controller/helix/core/assignment/segment/OfflineSegmentAssignment.java", "diffHunk": "@@ -91,6 +104,17 @@ public void init(HelixManager helixManager, TableConfig tableConfig) {\n     }\n   }\n \n+  /**\n+   * Returns a sorted list of Tiers from the TierConfigList in table config.\n+   * Keeps only those which have \"pinotServer\" storage type.\n+   */\n+  @VisibleForTesting\n+  protected List<Tier> getSortedTiersForPinotServerStorage(List<TierConfig> tierConfigList) {\n+    return tierConfigList.stream().filter(t -> TierFactory.PINOT_SERVER_STORAGE_TYPE.equals(t.getStorageType()))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjA2NjY0NA=="}, "originalCommit": {"oid": "43502baaaa8da8974c1ce90323b4c297c2546245"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxMTAzMDgzOnYy", "diffSide": "RIGHT", "path": "pinot-controller/src/main/java/org/apache/pinot/controller/helix/core/assignment/segment/OfflineSegmentAssignment.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQyMzo1ODoxMlrOG8eiwg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQyMzo1ODoxMlrOG8eiwg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjA2ODE2Mg==", "bodyText": "Use InstanceAssignmentConfigUtils.shouldRelocateToTiers(tableConfig) instead of checking map to determine whether to relocate tiers", "url": "https://github.com/apache/pinot/pull/5793#discussion_r466068162", "createdAt": "2020-08-05T23:58:12Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-controller/src/main/java/org/apache/pinot/controller/helix/core/assignment/segment/OfflineSegmentAssignment.java", "diffHunk": "@@ -161,23 +185,80 @@ private void checkReplication(InstancePartitions instancePartitions) {\n \n   @Override\n   public Map<String, Map<String, String>> rebalanceTable(Map<String, Map<String, String>> currentAssignment,\n-      Map<InstancePartitionsType, InstancePartitions> instancePartitionsMap, Configuration config) {\n-    InstancePartitions instancePartitions = instancePartitionsMap.get(InstancePartitionsType.OFFLINE);\n-    Preconditions.checkState(instancePartitions != null, \"Failed to find OFFLINE instance partitions for table: %s\",\n-        _offlineTableName);\n+      Map<InstancePartitionsType, InstancePartitions> instancePartitionsMap,\n+      @Nullable Map<String, InstancePartitions> tierInstancePartitionsMap, Configuration config) {\n+    InstancePartitions offlineInstancePartitions = instancePartitionsMap.get(InstancePartitionsType.OFFLINE);\n+    Preconditions\n+        .checkState(offlineInstancePartitions != null, \"Failed to find OFFLINE instance partitions for table: %s\",\n+            _offlineTableName);\n     boolean bootstrap =\n         config.getBoolean(RebalanceConfigConstants.BOOTSTRAP, RebalanceConfigConstants.DEFAULT_BOOTSTRAP);\n+\n+    Map<String, Map<String, String>> subsetAssignment = currentAssignment;\n+    // rebalance tiers first\n+    List<Map<String, Map<String, String>>> newTierAssignments = null;\n+    if (tierInstancePartitionsMap != null && !tierInstancePartitionsMap.isEmpty()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "43502baaaa8da8974c1ce90323b4c297c2546245"}, "originalPosition": 89}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxMTAzODU1OnYy", "diffSide": "RIGHT", "path": "pinot-controller/src/main/java/org/apache/pinot/controller/helix/core/assignment/segment/OfflineSegmentAssignment.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQwMDowMTo1OVrOG8enPg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQwMDowMTo1OVrOG8enPg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjA2OTMxMA==", "bodyText": "(nit) currentAssignment for concise?", "url": "https://github.com/apache/pinot/pull/5793#discussion_r466069310", "createdAt": "2020-08-06T00:01:59Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-controller/src/main/java/org/apache/pinot/controller/helix/core/assignment/segment/OfflineSegmentAssignment.java", "diffHunk": "@@ -161,23 +185,80 @@ private void checkReplication(InstancePartitions instancePartitions) {\n \n   @Override\n   public Map<String, Map<String, String>> rebalanceTable(Map<String, Map<String, String>> currentAssignment,\n-      Map<InstancePartitionsType, InstancePartitions> instancePartitionsMap, Configuration config) {\n-    InstancePartitions instancePartitions = instancePartitionsMap.get(InstancePartitionsType.OFFLINE);\n-    Preconditions.checkState(instancePartitions != null, \"Failed to find OFFLINE instance partitions for table: %s\",\n-        _offlineTableName);\n+      Map<InstancePartitionsType, InstancePartitions> instancePartitionsMap,\n+      @Nullable Map<String, InstancePartitions> tierInstancePartitionsMap, Configuration config) {\n+    InstancePartitions offlineInstancePartitions = instancePartitionsMap.get(InstancePartitionsType.OFFLINE);\n+    Preconditions\n+        .checkState(offlineInstancePartitions != null, \"Failed to find OFFLINE instance partitions for table: %s\",\n+            _offlineTableName);\n     boolean bootstrap =\n         config.getBoolean(RebalanceConfigConstants.BOOTSTRAP, RebalanceConfigConstants.DEFAULT_BOOTSTRAP);\n+\n+    Map<String, Map<String, String>> subsetAssignment = currentAssignment;\n+    // rebalance tiers first\n+    List<Map<String, Map<String, String>>> newTierAssignments = null;\n+    if (tierInstancePartitionsMap != null && !tierInstancePartitionsMap.isEmpty()) {\n+      LOGGER.info(\"Rebalancing tiers: {} for table: {} with bootstrap: {}\", tierInstancePartitionsMap.keySet(),\n+          _offlineTableName, bootstrap);\n+\n+      // get tier to segment assignment map i.e. current assignments split by tiers they are eligible for\n+      SegmentAssignmentUtils.TierSegmentAssignment tierSegmentAssignment =\n+          new SegmentAssignmentUtils.TierSegmentAssignment(_offlineTableName, _sortedTiers, currentAssignment);\n+      Map<String, Map<String, Map<String, String>>> tierNameToSegmentAssignmentMap =\n+          tierSegmentAssignment.getTierNameToSegmentAssignmentMap();\n+\n+      // for each tier, calculate new assignment using instancePartitions for that tier\n+      newTierAssignments = new ArrayList<>(tierNameToSegmentAssignmentMap.size());\n+      for (Map.Entry<String, Map<String, Map<String, String>>> entry : tierNameToSegmentAssignmentMap.entrySet()) {\n+        String tierName = entry.getKey();\n+        Map<String, Map<String, String>> tierCurrentAssignment = entry.getValue();\n+\n+        InstancePartitions tierInstancePartitions = tierInstancePartitionsMap.get(tierName);\n+        Preconditions\n+            .checkNotNull(tierInstancePartitions, \"Failed to find instance partitions for tier: %s of table: %s\",\n+                tierName, _offlineTableName);\n+        checkReplication(tierInstancePartitions);\n+\n+        LOGGER.info(\"Rebalancing tier: {} for table: {} with instance partitions: {}\", tierName, _offlineTableName,\n+            tierInstancePartitions);\n+        newTierAssignments.add(reassignSegments(tierName, tierCurrentAssignment, tierInstancePartitions, bootstrap));\n+      }\n+\n+      // rest of the operations should happen only on segments which were not already assigned as part of tiers\n+      subsetAssignment = tierSegmentAssignment.getNonTierSegmentAssignment();\n+    }\n+\n     LOGGER.info(\"Rebalancing table: {} with instance partitions: {}, bootstrap: {}\", _offlineTableName,\n-        instancePartitions, bootstrap);\n-    checkReplication(instancePartitions);\n+        offlineInstancePartitions, bootstrap);\n+    checkReplication(offlineInstancePartitions);\n+    Map<String, Map<String, String>> newAssignment =\n+        reassignSegments(InstancePartitionsType.OFFLINE.toString(), subsetAssignment, offlineInstancePartitions,\n+            bootstrap);\n+\n+    // add tier assignments, if available\n+    if (CollectionUtils.isNotEmpty(newTierAssignments)) {\n+      newTierAssignments.forEach(newAssignment::putAll);\n+    }\n+\n+    LOGGER.info(\"Rebalanced table: {}, number of segments to be moved to each instance: {}\", _offlineTableName,\n+        SegmentAssignmentUtils.getNumSegmentsToBeMovedPerInstance(currentAssignment, newAssignment));\n+    return newAssignment;\n+  }\n \n+  /**\n+   * Rebalances segments in the current assignment using the instancePartitions and returns new assignment\n+   */\n+  private Map<String, Map<String, String>> reassignSegments(String instancePartitionType,\n+      Map<String, Map<String, String>> currentSegmentAssignment, InstancePartitions instancePartitions,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "43502baaaa8da8974c1ce90323b4c297c2546245"}, "originalPosition": 143}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxMTA3Mzc5OnYy", "diffSide": "RIGHT", "path": "pinot-controller/src/main/java/org/apache/pinot/controller/helix/core/tier/TieredStorageRelocator.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQwMDoyMjoxNlrOG8e8qw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQyMzo0MTo0OVrOG9HtoA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjA3NDc5NQ==", "bodyText": "Please keep only one segment relocator. Currently there are 2 relocators: TieredStorageRelocator and RealtimeSegmentRelocator. They can rebalance the same table at the same time which could cause problem. Recommend replacing RealtimeSegmentRelocator with SegmentRelocator which handles both completed segment relocation and tier storage relocation.", "url": "https://github.com/apache/pinot/pull/5793#discussion_r466074795", "createdAt": "2020-08-06T00:22:16Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-controller/src/main/java/org/apache/pinot/controller/helix/core/tier/TieredStorageRelocator.java", "diffHunk": "@@ -0,0 +1,101 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.controller.helix.core.tier;\n+\n+import com.google.common.base.Preconditions;\n+import java.util.concurrent.ExecutorService;\n+import org.apache.commons.configuration.BaseConfiguration;\n+import org.apache.commons.configuration.Configuration;\n+import org.apache.pinot.common.assignment.InstanceAssignmentConfigUtils;\n+import org.apache.pinot.common.metrics.ControllerMetrics;\n+import org.apache.pinot.controller.ControllerConf;\n+import org.apache.pinot.controller.LeadControllerManager;\n+import org.apache.pinot.controller.helix.core.PinotHelixResourceManager;\n+import org.apache.pinot.controller.helix.core.periodictask.ControllerPeriodicTask;\n+import org.apache.pinot.controller.helix.core.rebalance.RebalanceConfigConstants;\n+import org.apache.pinot.controller.helix.core.rebalance.RebalanceResult;\n+import org.apache.pinot.controller.helix.core.rebalance.TableRebalancer;\n+import org.apache.pinot.spi.config.table.TableConfig;\n+import org.apache.pinot.spi.stream.StreamConfig;\n+import org.apache.pinot.spi.utils.TimeUtils;\n+import org.apache.pinot.spi.utils.builder.TableNameBuilder;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+\n+/**\n+ * Periodic task to run rebalancer in background to relocate segments to storage tiers\n+ * TODO: we could potentially get rid of tagOverrideConfig and rely on this relocator for moving COMPLETED segments\n+ */\n+public class TieredStorageRelocator extends ControllerPeriodicTask<Void> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "43502baaaa8da8974c1ce90323b4c297c2546245"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njc0MjY4OA==", "bodyText": "Removed TieredStorageRelocator. Rebranded RealtimeSegmentRelocator as SegmentRelocator.", "url": "https://github.com/apache/pinot/pull/5793#discussion_r466742688", "createdAt": "2020-08-06T23:41:49Z", "author": {"login": "npawar"}, "path": "pinot-controller/src/main/java/org/apache/pinot/controller/helix/core/tier/TieredStorageRelocator.java", "diffHunk": "@@ -0,0 +1,101 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.controller.helix.core.tier;\n+\n+import com.google.common.base.Preconditions;\n+import java.util.concurrent.ExecutorService;\n+import org.apache.commons.configuration.BaseConfiguration;\n+import org.apache.commons.configuration.Configuration;\n+import org.apache.pinot.common.assignment.InstanceAssignmentConfigUtils;\n+import org.apache.pinot.common.metrics.ControllerMetrics;\n+import org.apache.pinot.controller.ControllerConf;\n+import org.apache.pinot.controller.LeadControllerManager;\n+import org.apache.pinot.controller.helix.core.PinotHelixResourceManager;\n+import org.apache.pinot.controller.helix.core.periodictask.ControllerPeriodicTask;\n+import org.apache.pinot.controller.helix.core.rebalance.RebalanceConfigConstants;\n+import org.apache.pinot.controller.helix.core.rebalance.RebalanceResult;\n+import org.apache.pinot.controller.helix.core.rebalance.TableRebalancer;\n+import org.apache.pinot.spi.config.table.TableConfig;\n+import org.apache.pinot.spi.stream.StreamConfig;\n+import org.apache.pinot.spi.utils.TimeUtils;\n+import org.apache.pinot.spi.utils.builder.TableNameBuilder;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+\n+/**\n+ * Periodic task to run rebalancer in background to relocate segments to storage tiers\n+ * TODO: we could potentially get rid of tagOverrideConfig and rely on this relocator for moving COMPLETED segments\n+ */\n+public class TieredStorageRelocator extends ControllerPeriodicTask<Void> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjA3NDc5NQ=="}, "originalCommit": {"oid": "43502baaaa8da8974c1ce90323b4c297c2546245"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxMTA4MDU3OnYy", "diffSide": "RIGHT", "path": "pinot-spi/src/main/java/org/apache/pinot/spi/config/table/TierConfig.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQwMDoyNTozNFrOG8fAjg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQwMDoyNTozNFrOG8fAjg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjA3NTc5MA==", "bodyText": "Preconditions.checkArgument() on all non-null arguments to prevent bad config", "url": "https://github.com/apache/pinot/pull/5793#discussion_r466075790", "createdAt": "2020-08-06T00:25:34Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-spi/src/main/java/org/apache/pinot/spi/config/table/TierConfig.java", "diffHunk": "@@ -0,0 +1,80 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.spi.config.table;\n+\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.fasterxml.jackson.annotation.JsonPropertyDescription;\n+import javax.annotation.Nullable;\n+import org.apache.pinot.spi.config.BaseJsonConfig;\n+\n+\n+/**\n+ * Config for the tiered storage and the segments which will move to that tier\n+ */\n+public class TierConfig extends BaseJsonConfig {\n+  @JsonPropertyDescription(\"Name of the tier with format TIER<number>\")\n+  private final String _name;\n+\n+  @JsonPropertyDescription(\"The strategy for selecting segments\")\n+  private final String _segmentSelectorType;\n+\n+  @JsonPropertyDescription(\"For 'timeBased' segment selector, the period after which to select segments for this tier\")\n+  private final String _segmentAge;\n+\n+  @JsonPropertyDescription(\"The type of storage storage\")\n+  private final String _storageType;\n+\n+  @JsonPropertyDescription(\"For 'pinotServer' storageSelector, the tag with which to identify servers for this tier.\")\n+  private final String _serverTag;\n+\n+  // TODO: only \"serverTag\" is supported currently. In next iteration, \"InstanceAssignmentConfig _instanceAssignmentConfig\" will be added here\n+\n+  public TierConfig(@JsonProperty(value = \"name\", required = true) String name,\n+      @JsonProperty(value = \"segmentSelectorType\", required = true) String segmentSelectorType,\n+      @JsonProperty(\"segmentAge\") @Nullable String segmentAge,\n+      @JsonProperty(value = \"storageType\", required = true) String storageType,\n+      @JsonProperty(\"serverTag\") @Nullable String serverTag) {\n+    _name = name;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "43502baaaa8da8974c1ce90323b4c297c2546245"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxMTA4NTAzOnYy", "diffSide": "RIGHT", "path": "pinot-core/src/main/java/org/apache/pinot/core/util/TableConfigUtils.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQwMDoyNzo1OFrOG8fDNQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQwMDoyNzo1OFrOG8fDNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjA3NjQ2OQ==", "bodyText": "(nit)\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  Preconditions.checkState(!tierNames.contains(tierName), \"Tier name: %s already exists in tier configs\", tierName);\n          \n          \n            \n                  tierNames.add(tierName);\n          \n          \n            \n                  Preconditions.checkState(tierNames.add(tierName), \"Tier name: %s already exists in tier configs\", tierName);", "url": "https://github.com/apache/pinot/pull/5793#discussion_r466076469", "createdAt": "2020-08-06T00:27:58Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/util/TableConfigUtils.java", "diffHunk": "@@ -136,9 +143,55 @@ private static void validateIngestionConfig(@Nullable IngestionConfig ingestionC\n         }\n         // TODO: remove this once we add support for derived columns/chained transform functions\n         if (!Collections.disjoint(transformColumns, argumentColumns)) {\n-          throw new IllegalStateException(\"Derived columns not supported yet. Cannot use a transform column as argument to another transform functions\");\n+          throw new IllegalStateException(\n+              \"Derived columns not supported yet. Cannot use a transform column as argument to another transform functions\");\n         }\n       }\n     }\n   }\n+\n+  /**\n+   * Validates the tier configs\n+   * Checks for the right segmentSelectorType and its required properties\n+   * Checks for the right storageType and its required properties\n+   */\n+  private static void validateTierConfigList(@Nullable List<TierConfig> tierConfigList) {\n+    if (tierConfigList == null) {\n+      return;\n+    }\n+\n+    Set<String> tierNames = new HashSet<>();\n+    for (TierConfig tierConfig : tierConfigList) {\n+      String tierName = tierConfig.getName();\n+      Preconditions.checkState(!tierName.isEmpty());\n+      Preconditions.checkState(!tierNames.contains(tierName), \"Tier name: %s already exists in tier configs\", tierName);\n+      tierNames.add(tierName);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "43502baaaa8da8974c1ce90323b4c297c2546245"}, "originalPosition": 107}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxMTA5MjU5OnYy", "diffSide": "RIGHT", "path": "pinot-controller/src/main/java/org/apache/pinot/controller/helix/core/assignment/segment/OfflineSegmentAssignment.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQwMDozMTozOFrOG8fHcg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQwMDozMTozOFrOG8fHcg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjA3NzU1NA==", "bodyText": "(nit) Capitalize the first letter for convention", "url": "https://github.com/apache/pinot/pull/5793#discussion_r466077554", "createdAt": "2020-08-06T00:31:38Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-controller/src/main/java/org/apache/pinot/controller/helix/core/assignment/segment/OfflineSegmentAssignment.java", "diffHunk": "@@ -161,23 +185,80 @@ private void checkReplication(InstancePartitions instancePartitions) {\n \n   @Override\n   public Map<String, Map<String, String>> rebalanceTable(Map<String, Map<String, String>> currentAssignment,\n-      Map<InstancePartitionsType, InstancePartitions> instancePartitionsMap, Configuration config) {\n-    InstancePartitions instancePartitions = instancePartitionsMap.get(InstancePartitionsType.OFFLINE);\n-    Preconditions.checkState(instancePartitions != null, \"Failed to find OFFLINE instance partitions for table: %s\",\n-        _offlineTableName);\n+      Map<InstancePartitionsType, InstancePartitions> instancePartitionsMap,\n+      @Nullable Map<String, InstancePartitions> tierInstancePartitionsMap, Configuration config) {\n+    InstancePartitions offlineInstancePartitions = instancePartitionsMap.get(InstancePartitionsType.OFFLINE);\n+    Preconditions\n+        .checkState(offlineInstancePartitions != null, \"Failed to find OFFLINE instance partitions for table: %s\",\n+            _offlineTableName);\n     boolean bootstrap =\n         config.getBoolean(RebalanceConfigConstants.BOOTSTRAP, RebalanceConfigConstants.DEFAULT_BOOTSTRAP);\n+\n+    Map<String, Map<String, String>> subsetAssignment = currentAssignment;\n+    // rebalance tiers first", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "43502baaaa8da8974c1ce90323b4c297c2546245"}, "originalPosition": 87}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxMTEwMDg5OnYy", "diffSide": "RIGHT", "path": "pinot-controller/src/main/java/org/apache/pinot/controller/helix/core/assignment/segment/OfflineSegmentAssignment.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQwMDozNTo1NlrOG8fL9A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQwMDozNTo1NlrOG8fL9A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjA3ODcwOA==", "bodyText": "Rename to nonTierAssignment for clarity?", "url": "https://github.com/apache/pinot/pull/5793#discussion_r466078708", "createdAt": "2020-08-06T00:35:56Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-controller/src/main/java/org/apache/pinot/controller/helix/core/assignment/segment/OfflineSegmentAssignment.java", "diffHunk": "@@ -161,23 +185,80 @@ private void checkReplication(InstancePartitions instancePartitions) {\n \n   @Override\n   public Map<String, Map<String, String>> rebalanceTable(Map<String, Map<String, String>> currentAssignment,\n-      Map<InstancePartitionsType, InstancePartitions> instancePartitionsMap, Configuration config) {\n-    InstancePartitions instancePartitions = instancePartitionsMap.get(InstancePartitionsType.OFFLINE);\n-    Preconditions.checkState(instancePartitions != null, \"Failed to find OFFLINE instance partitions for table: %s\",\n-        _offlineTableName);\n+      Map<InstancePartitionsType, InstancePartitions> instancePartitionsMap,\n+      @Nullable Map<String, InstancePartitions> tierInstancePartitionsMap, Configuration config) {\n+    InstancePartitions offlineInstancePartitions = instancePartitionsMap.get(InstancePartitionsType.OFFLINE);\n+    Preconditions\n+        .checkState(offlineInstancePartitions != null, \"Failed to find OFFLINE instance partitions for table: %s\",\n+            _offlineTableName);\n     boolean bootstrap =\n         config.getBoolean(RebalanceConfigConstants.BOOTSTRAP, RebalanceConfigConstants.DEFAULT_BOOTSTRAP);\n+\n+    Map<String, Map<String, String>> subsetAssignment = currentAssignment;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "43502baaaa8da8974c1ce90323b4c297c2546245"}, "originalPosition": 86}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxMTEwODMwOnYy", "diffSide": "RIGHT", "path": "pinot-controller/src/main/java/org/apache/pinot/controller/helix/core/assignment/segment/OfflineSegmentAssignment.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQwMDo0MDowOVrOG8fQKQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQwMDo0MDowOVrOG8fQKQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjA3OTc4NQ==", "bodyText": "(nit) Including bootstrap in the log?", "url": "https://github.com/apache/pinot/pull/5793#discussion_r466079785", "createdAt": "2020-08-06T00:40:09Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-controller/src/main/java/org/apache/pinot/controller/helix/core/assignment/segment/OfflineSegmentAssignment.java", "diffHunk": "@@ -161,23 +185,80 @@ private void checkReplication(InstancePartitions instancePartitions) {\n \n   @Override\n   public Map<String, Map<String, String>> rebalanceTable(Map<String, Map<String, String>> currentAssignment,\n-      Map<InstancePartitionsType, InstancePartitions> instancePartitionsMap, Configuration config) {\n-    InstancePartitions instancePartitions = instancePartitionsMap.get(InstancePartitionsType.OFFLINE);\n-    Preconditions.checkState(instancePartitions != null, \"Failed to find OFFLINE instance partitions for table: %s\",\n-        _offlineTableName);\n+      Map<InstancePartitionsType, InstancePartitions> instancePartitionsMap,\n+      @Nullable Map<String, InstancePartitions> tierInstancePartitionsMap, Configuration config) {\n+    InstancePartitions offlineInstancePartitions = instancePartitionsMap.get(InstancePartitionsType.OFFLINE);\n+    Preconditions\n+        .checkState(offlineInstancePartitions != null, \"Failed to find OFFLINE instance partitions for table: %s\",\n+            _offlineTableName);\n     boolean bootstrap =\n         config.getBoolean(RebalanceConfigConstants.BOOTSTRAP, RebalanceConfigConstants.DEFAULT_BOOTSTRAP);\n+\n+    Map<String, Map<String, String>> subsetAssignment = currentAssignment;\n+    // rebalance tiers first\n+    List<Map<String, Map<String, String>>> newTierAssignments = null;\n+    if (tierInstancePartitionsMap != null && !tierInstancePartitionsMap.isEmpty()) {\n+      LOGGER.info(\"Rebalancing tiers: {} for table: {} with bootstrap: {}\", tierInstancePartitionsMap.keySet(),\n+          _offlineTableName, bootstrap);\n+\n+      // get tier to segment assignment map i.e. current assignments split by tiers they are eligible for\n+      SegmentAssignmentUtils.TierSegmentAssignment tierSegmentAssignment =\n+          new SegmentAssignmentUtils.TierSegmentAssignment(_offlineTableName, _sortedTiers, currentAssignment);\n+      Map<String, Map<String, Map<String, String>>> tierNameToSegmentAssignmentMap =\n+          tierSegmentAssignment.getTierNameToSegmentAssignmentMap();\n+\n+      // for each tier, calculate new assignment using instancePartitions for that tier\n+      newTierAssignments = new ArrayList<>(tierNameToSegmentAssignmentMap.size());\n+      for (Map.Entry<String, Map<String, Map<String, String>>> entry : tierNameToSegmentAssignmentMap.entrySet()) {\n+        String tierName = entry.getKey();\n+        Map<String, Map<String, String>> tierCurrentAssignment = entry.getValue();\n+\n+        InstancePartitions tierInstancePartitions = tierInstancePartitionsMap.get(tierName);\n+        Preconditions\n+            .checkNotNull(tierInstancePartitions, \"Failed to find instance partitions for tier: %s of table: %s\",\n+                tierName, _offlineTableName);\n+        checkReplication(tierInstancePartitions);\n+\n+        LOGGER.info(\"Rebalancing tier: {} for table: {} with instance partitions: {}\", tierName, _offlineTableName,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "43502baaaa8da8974c1ce90323b4c297c2546245"}, "originalPosition": 111}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxODI3MDI2OnYy", "diffSide": "RIGHT", "path": "pinot-common/pom.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxODowNzo1NVrOG9jNaQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxODowNzo1NVrOG9jNaQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzE5MzE5Mw==", "bodyText": "This is already included in the pinot-spi, no need to include again (you might need to rebase to the current master)", "url": "https://github.com/apache/pinot/pull/5793#discussion_r467193193", "createdAt": "2020-08-07T18:07:55Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-common/pom.xml", "diffHunk": "@@ -182,6 +182,10 @@\n       <groupId>org.apache.commons</groupId>\n       <artifactId>commons-compress</artifactId>\n     </dependency>\n+    <dependency>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3c0f0efe8d4b02ce690d3bc92c17e785f3e0d265"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxODI3NDE0OnYy", "diffSide": "RIGHT", "path": "pinot-common/src/main/java/org/apache/pinot/common/utils/config/TierConfigUtils.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxODowOToxMFrOG9jPsw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxODowOToxMFrOG9jPsw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzE5Mzc3OQ==", "bodyText": "Add a private constructor", "url": "https://github.com/apache/pinot/pull/5793#discussion_r467193779", "createdAt": "2020-08-07T18:09:10Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-common/src/main/java/org/apache/pinot/common/utils/config/TierConfigUtils.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.common.utils.config;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import org.apache.commons.collections.CollectionUtils;\n+import org.apache.helix.HelixManager;\n+import org.apache.pinot.common.tier.Tier;\n+import org.apache.pinot.common.tier.TierFactory;\n+import org.apache.pinot.spi.config.table.TableConfig;\n+import org.apache.pinot.spi.config.table.TierConfig;\n+\n+\n+/**\n+ * Util methods for TierConfig\n+ */\n+public class TierConfigUtils {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3c0f0efe8d4b02ce690d3bc92c17e785f3e0d265"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxODI4MzU5OnYy", "diffSide": "RIGHT", "path": "pinot-controller/src/main/java/org/apache/pinot/controller/ControllerStarter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxODoxMjoxMFrOG9jVgA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxODoxMjoxMFrOG9jVgA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzE5NTI2NA==", "bodyText": "(nit) reformat (or just put 3600)", "url": "https://github.com/apache/pinot/pull/5793#discussion_r467195264", "createdAt": "2020-08-07T18:12:10Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-controller/src/main/java/org/apache/pinot/controller/ControllerStarter.java", "diffHunk": "@@ -688,7 +684,7 @@ public static ControllerStarter startDefault(File webappPath) {\n     conf.setRealtimeSegmentValidationFrequencyInSeconds(3600);\n     conf.setBrokerResourceValidationFrequencyInSeconds(3600);\n     conf.setStatusCheckerFrequencyInSeconds(5 * 60);\n-    conf.setRealtimeSegmentRelocatorFrequency(\"1h\");\n+    conf.setSegmentRelocatorFrequencyInSeconds(60*60);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3c0f0efe8d4b02ce690d3bc92c17e785f3e0d265"}, "originalPosition": 72}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxODMwNzA4OnYy", "diffSide": "RIGHT", "path": "pinot-controller/src/main/java/org/apache/pinot/controller/ControllerConf.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxODoyMDowOFrOG9jkNw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxODoyMDowOFrOG9jkNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzE5OTAzMQ==", "bodyText": "Well done", "url": "https://github.com/apache/pinot/pull/5793#discussion_r467199031", "createdAt": "2020-08-07T18:20:08Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-controller/src/main/java/org/apache/pinot/controller/ControllerConf.java", "diffHunk": "@@ -460,6 +459,30 @@ public void setStatusCheckerWaitForPushTimeInSeconds(int statusCheckerWaitForPus\n         Integer.toString(statusCheckerWaitForPushTimeInSeconds));\n   }\n \n+  /**\n+   * RealtimeSegmentRelocator has been rebranded to SegmentRelocator.\n+   * Check for SEGMENT_RELOCATOR_FREQUENCY_IN_SECONDS property, if not found, return REALTIME_SEGMENT_RELOCATOR_FREQUENCY\n+   */\n+  public int getSegmentRelocatorFrequencyInSeconds() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3c0f0efe8d4b02ce690d3bc92c17e785f3e0d265"}, "originalPosition": 89}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxODMxOTQ1OnYy", "diffSide": "RIGHT", "path": "pinot-controller/src/main/java/org/apache/pinot/controller/helix/core/relocation/SegmentRelocator.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxODoyNDozNVrOG9jsNQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QyMzoxMzo1OVrOG9rJug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzIwMTA3Nw==", "bodyText": "CRITICAL\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                super(SegmentRelocator.class.getSimpleName(), 60,\n          \n          \n            \n                    30, pinotHelixResourceManager, leadControllerManager,\n          \n          \n            \n                super(SegmentRelocator.class.getSimpleName(), config.getSegmentRelocatorFrequencyInSeconds(),\n          \n          \n            \n                    config.getSegmentRelocatorInitialDelayInSeconds(), pinotHelixResourceManager, leadControllerManager,\n          \n          \n            \n                    controllerMetrics);", "url": "https://github.com/apache/pinot/pull/5793#discussion_r467201077", "createdAt": "2020-08-07T18:24:35Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-controller/src/main/java/org/apache/pinot/controller/helix/core/relocation/SegmentRelocator.java", "diffHunk": "@@ -40,41 +41,51 @@\n \n \n /**\n- * Periodic task to run rebalancer in background to relocate COMPLETED segments for LLC real-time table. Allow at most\n- * one replica unavailable during rebalance.\n+ * Periodic task to run rebalancer in background to\n+ * 1. relocate COMPLETED segments to tag overrides\n+ * 2. relocate ONLINE segments to tiers if tier configs are set\n+ * Allow at most one replica unavailable during rebalance. Not applicable for HLC tables.\n  */\n-public class RealtimeSegmentRelocator extends ControllerPeriodicTask<Void> {\n-  private static final Logger LOGGER = LoggerFactory.getLogger(RealtimeSegmentRelocator.class);\n+public class SegmentRelocator extends ControllerPeriodicTask<Void> {\n+  private static final Logger LOGGER = LoggerFactory.getLogger(SegmentRelocator.class);\n \n   private final ExecutorService _executorService;\n \n-  public RealtimeSegmentRelocator(PinotHelixResourceManager pinotHelixResourceManager,\n+  public SegmentRelocator(PinotHelixResourceManager pinotHelixResourceManager,\n       LeadControllerManager leadControllerManager, ControllerConf config, ControllerMetrics controllerMetrics,\n       ExecutorService executorService) {\n-    super(\"RealtimeSegmentRelocator\", getRunFrequencySeconds(config.getRealtimeSegmentRelocatorFrequency()),\n-        config.getRealtimeSegmentRelocationInitialDelayInSeconds(), pinotHelixResourceManager, leadControllerManager,\n+    super(SegmentRelocator.class.getSimpleName(), 60,\n+        30, pinotHelixResourceManager, leadControllerManager,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3c0f0efe8d4b02ce690d3bc92c17e785f3e0d265"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzMyMzMyMg==", "bodyText": "removed!", "url": "https://github.com/apache/pinot/pull/5793#discussion_r467323322", "createdAt": "2020-08-07T23:13:59Z", "author": {"login": "npawar"}, "path": "pinot-controller/src/main/java/org/apache/pinot/controller/helix/core/relocation/SegmentRelocator.java", "diffHunk": "@@ -40,41 +41,51 @@\n \n \n /**\n- * Periodic task to run rebalancer in background to relocate COMPLETED segments for LLC real-time table. Allow at most\n- * one replica unavailable during rebalance.\n+ * Periodic task to run rebalancer in background to\n+ * 1. relocate COMPLETED segments to tag overrides\n+ * 2. relocate ONLINE segments to tiers if tier configs are set\n+ * Allow at most one replica unavailable during rebalance. Not applicable for HLC tables.\n  */\n-public class RealtimeSegmentRelocator extends ControllerPeriodicTask<Void> {\n-  private static final Logger LOGGER = LoggerFactory.getLogger(RealtimeSegmentRelocator.class);\n+public class SegmentRelocator extends ControllerPeriodicTask<Void> {\n+  private static final Logger LOGGER = LoggerFactory.getLogger(SegmentRelocator.class);\n \n   private final ExecutorService _executorService;\n \n-  public RealtimeSegmentRelocator(PinotHelixResourceManager pinotHelixResourceManager,\n+  public SegmentRelocator(PinotHelixResourceManager pinotHelixResourceManager,\n       LeadControllerManager leadControllerManager, ControllerConf config, ControllerMetrics controllerMetrics,\n       ExecutorService executorService) {\n-    super(\"RealtimeSegmentRelocator\", getRunFrequencySeconds(config.getRealtimeSegmentRelocatorFrequency()),\n-        config.getRealtimeSegmentRelocationInitialDelayInSeconds(), pinotHelixResourceManager, leadControllerManager,\n+    super(SegmentRelocator.class.getSimpleName(), 60,\n+        30, pinotHelixResourceManager, leadControllerManager,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzIwMTA3Nw=="}, "originalCommit": {"oid": "3c0f0efe8d4b02ce690d3bc92c17e785f3e0d265"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxODM1NjI0OnYy", "diffSide": "RIGHT", "path": "pinot-common/src/main/java/org/apache/pinot/common/tier/TierFactory.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxODozODowM1rOG9kDmg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxODozODowM1rOG9kDmg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzIwNzA2Ng==", "bodyText": "Move this into TierConfigUtils?", "url": "https://github.com/apache/pinot/pull/5793#discussion_r467207066", "createdAt": "2020-08-07T18:38:03Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-common/src/main/java/org/apache/pinot/common/tier/TierFactory.java", "diffHunk": "@@ -0,0 +1,83 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.common.tier;\n+\n+import com.google.common.base.Preconditions;\n+import java.util.Comparator;\n+import org.apache.helix.HelixManager;\n+import org.apache.pinot.spi.config.table.TierConfig;\n+\n+\n+/**\n+ * Factory class to create and sort {@link Tier}\n+ */\n+public final class TierFactory {\n+\n+  public static final String TIME_BASED_SEGMENT_SELECTOR_TYPE = \"timeBased\";\n+  public static final String PINOT_SERVER_STORAGE_TYPE = \"pinotServer\";\n+\n+  private TierFactory() {\n+  }\n+\n+  /**\n+   * Constructs a {@link Tier} from the {@link TierConfig} in the table config\n+   */\n+  public static Tier getTier(TierConfig tierConfig, HelixManager helixManager) {\n+    TierSegmentSelector segmentSelector;\n+    TierStorage storageSelector;\n+\n+    String segmentSelectorType = tierConfig.getSegmentSelectorType();\n+    if (segmentSelectorType.equalsIgnoreCase(TIME_BASED_SEGMENT_SELECTOR_TYPE)) {\n+      segmentSelector = new TimeBasedTierSegmentSelector(helixManager, tierConfig.getSegmentAge());\n+    } else {\n+      throw new IllegalStateException(\"Unsupported segmentSelectorType: \" + segmentSelectorType);\n+    }\n+\n+    String storageSelectorType = tierConfig.getStorageType();\n+    if (storageSelectorType.equalsIgnoreCase(PINOT_SERVER_STORAGE_TYPE)) {\n+      storageSelector = new PinotServerTierStorage(tierConfig.getServerTag());\n+    } else {\n+      throw new IllegalStateException(\"Unsupported storageType: \" + storageSelectorType);\n+    }\n+\n+    return new Tier(tierConfig.getName(), segmentSelector, storageSelector);\n+  }\n+\n+  /**\n+   * Comparator for sorting the {@link Tier}.\n+   * As of now, we have only 1 type of {@link TierSegmentSelector} and 1 type of {@link TierStorage}.\n+   * Tier with an older age bucket in {@link TimeBasedTierSegmentSelector} should appear before a younger age bucket, in sort order\n+   * TODO: As we add more types, this logic needs to be upgraded\n+   */\n+  public static Comparator<Tier> getTierComparator() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3c0f0efe8d4b02ce690d3bc92c17e785f3e0d265"}, "originalPosition": 68}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxODM2MDM0OnYy", "diffSide": "RIGHT", "path": "pinot-common/src/main/java/org/apache/pinot/common/utils/config/TierConfigUtils.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxODozOToyNVrOG9kF-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QyMzoxNDoxOVrOG9rKBw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzIwNzY3Mw==", "bodyText": "Change this to getSortedTiersForStorageType and sort tiers here", "url": "https://github.com/apache/pinot/pull/5793#discussion_r467207673", "createdAt": "2020-08-07T18:39:25Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-common/src/main/java/org/apache/pinot/common/utils/config/TierConfigUtils.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.common.utils.config;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import org.apache.commons.collections.CollectionUtils;\n+import org.apache.helix.HelixManager;\n+import org.apache.pinot.common.tier.Tier;\n+import org.apache.pinot.common.tier.TierFactory;\n+import org.apache.pinot.spi.config.table.TableConfig;\n+import org.apache.pinot.spi.config.table.TierConfig;\n+\n+\n+/**\n+ * Util methods for TierConfig\n+ */\n+public class TierConfigUtils {\n+\n+  /**\n+   * Returns whether relocation of segments to tiers has been enabled for this table\n+   */\n+  public static boolean shouldRelocateToTiers(TableConfig tableConfig) {\n+    return CollectionUtils.isNotEmpty(tableConfig.getTierConfigsList());\n+  }\n+\n+  /**\n+   * Gets tiers for given storage type from provided list of TierConfig\n+   */\n+  public static List<Tier> getTiersForStorageType(List<TierConfig> tierConfigList, String storageType,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3c0f0efe8d4b02ce690d3bc92c17e785f3e0d265"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzMyMzM5OQ==", "bodyText": "sure, done", "url": "https://github.com/apache/pinot/pull/5793#discussion_r467323399", "createdAt": "2020-08-07T23:14:19Z", "author": {"login": "npawar"}, "path": "pinot-common/src/main/java/org/apache/pinot/common/utils/config/TierConfigUtils.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.common.utils.config;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import org.apache.commons.collections.CollectionUtils;\n+import org.apache.helix.HelixManager;\n+import org.apache.pinot.common.tier.Tier;\n+import org.apache.pinot.common.tier.TierFactory;\n+import org.apache.pinot.spi.config.table.TableConfig;\n+import org.apache.pinot.spi.config.table.TierConfig;\n+\n+\n+/**\n+ * Util methods for TierConfig\n+ */\n+public class TierConfigUtils {\n+\n+  /**\n+   * Returns whether relocation of segments to tiers has been enabled for this table\n+   */\n+  public static boolean shouldRelocateToTiers(TableConfig tableConfig) {\n+    return CollectionUtils.isNotEmpty(tableConfig.getTierConfigsList());\n+  }\n+\n+  /**\n+   * Gets tiers for given storage type from provided list of TierConfig\n+   */\n+  public static List<Tier> getTiersForStorageType(List<TierConfig> tierConfigList, String storageType,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzIwNzY3Mw=="}, "originalCommit": {"oid": "3c0f0efe8d4b02ce690d3bc92c17e785f3e0d265"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxODM4NTEyOnYy", "diffSide": "RIGHT", "path": "pinot-controller/src/main/java/org/apache/pinot/controller/helix/core/assignment/segment/OfflineSegmentAssignment.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxODo0ODowNFrOG9kU7g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxODo0ODowNFrOG9kU7g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzIxMTUwMg==", "bodyText": "shouldRelocateToTiers logic is handled on the caller side, so here we can just check whether sortedTiers is not null. Same for realtime", "url": "https://github.com/apache/pinot/pull/5793#discussion_r467211502", "createdAt": "2020-08-07T18:48:04Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-controller/src/main/java/org/apache/pinot/controller/helix/core/assignment/segment/OfflineSegmentAssignment.java", "diffHunk": "@@ -161,19 +172,78 @@ private void checkReplication(InstancePartitions instancePartitions) {\n \n   @Override\n   public Map<String, Map<String, String>> rebalanceTable(Map<String, Map<String, String>> currentAssignment,\n-      Map<InstancePartitionsType, InstancePartitions> instancePartitionsMap, Configuration config) {\n-    InstancePartitions instancePartitions = instancePartitionsMap.get(InstancePartitionsType.OFFLINE);\n-    Preconditions.checkState(instancePartitions != null, \"Failed to find OFFLINE instance partitions for table: %s\",\n-        _offlineTableName);\n+      Map<InstancePartitionsType, InstancePartitions> instancePartitionsMap,\n+      @Nullable Map<String, InstancePartitions> tierInstancePartitionsMap, @Nullable List<Tier> sortedTiers,\n+      Configuration config) {\n+    InstancePartitions offlineInstancePartitions = instancePartitionsMap.get(InstancePartitionsType.OFFLINE);\n+    Preconditions\n+        .checkState(offlineInstancePartitions != null, \"Failed to find OFFLINE instance partitions for table: %s\",\n+            _offlineTableName);\n     boolean bootstrap =\n         config.getBoolean(RebalanceConfigConstants.BOOTSTRAP, RebalanceConfigConstants.DEFAULT_BOOTSTRAP);\n+\n+    Map<String, Map<String, String>> nonTierAssignment = currentAssignment;\n+    // Rebalance tiers first\n+    List<Map<String, Map<String, String>>> newTierAssignments = null;\n+    if (TierConfigUtils.shouldRelocateToTiers(_tableConfig)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3c0f0efe8d4b02ce690d3bc92c17e785f3e0d265"}, "originalPosition": 67}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxODM5Mjc5OnYy", "diffSide": "RIGHT", "path": "pinot-integration-tests/src/test/java/org/apache/pinot/integration/tests/ControllerPeriodicTasksIntegrationTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxODo1MDo0NFrOG9kZsA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QyMzoxNjowOFrOG9rLqA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzIxMjcyMA==", "bodyText": "Should we use SEGMENT_RELOCATION_INITIAL_DELAY_IN_SECONDS and SEGMENT_RELOCATOR_FREQUENCY_IN_SECONDS?", "url": "https://github.com/apache/pinot/pull/5793#discussion_r467212720", "createdAt": "2020-08-07T18:50:44Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-integration-tests/src/test/java/org/apache/pinot/integration/tests/ControllerPeriodicTasksIntegrationTest.java", "diffHunk": "@@ -111,8 +111,8 @@ public void setUp()\n     properties.put(ControllerConf.CLUSTER_TENANT_ISOLATION_ENABLE, false);\n     properties.put(ControllerPeriodicTasksConf.STATUS_CHECKER_INITIAL_DELAY_IN_SECONDS, PERIODIC_TASK_INITIAL_DELAY_SECONDS);\n     properties.put(ControllerPeriodicTasksConf.STATUS_CHECKER_FREQUENCY_IN_SECONDS, PERIODIC_TASK_FREQUENCY_SECONDS);\n-    properties.put(ControllerPeriodicTasksConf.REALTIME_SEGMENT_RELOCATION_INITIAL_DELAY_IN_SECONDS, PERIODIC_TASK_INITIAL_DELAY_SECONDS);\n-    properties.put(ControllerPeriodicTasksConf.REALTIME_SEGMENT_RELOCATOR_FREQUENCY, PERIODIC_TASK_FREQUENCY);\n+    properties.put(ControllerPeriodicTasksConf.DEPRECATED_REALTIME_SEGMENT_RELOCATION_INITIAL_DELAY_IN_SECONDS, PERIODIC_TASK_INITIAL_DELAY_SECONDS);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3c0f0efe8d4b02ce690d3bc92c17e785f3e0d265"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzMyMzgxNg==", "bodyText": "i kept the old ones, so that we have a test to check the old way, because people might be using the old properties. Probably after couple release can change it new?", "url": "https://github.com/apache/pinot/pull/5793#discussion_r467323816", "createdAt": "2020-08-07T23:16:08Z", "author": {"login": "npawar"}, "path": "pinot-integration-tests/src/test/java/org/apache/pinot/integration/tests/ControllerPeriodicTasksIntegrationTest.java", "diffHunk": "@@ -111,8 +111,8 @@ public void setUp()\n     properties.put(ControllerConf.CLUSTER_TENANT_ISOLATION_ENABLE, false);\n     properties.put(ControllerPeriodicTasksConf.STATUS_CHECKER_INITIAL_DELAY_IN_SECONDS, PERIODIC_TASK_INITIAL_DELAY_SECONDS);\n     properties.put(ControllerPeriodicTasksConf.STATUS_CHECKER_FREQUENCY_IN_SECONDS, PERIODIC_TASK_FREQUENCY_SECONDS);\n-    properties.put(ControllerPeriodicTasksConf.REALTIME_SEGMENT_RELOCATION_INITIAL_DELAY_IN_SECONDS, PERIODIC_TASK_INITIAL_DELAY_SECONDS);\n-    properties.put(ControllerPeriodicTasksConf.REALTIME_SEGMENT_RELOCATOR_FREQUENCY, PERIODIC_TASK_FREQUENCY);\n+    properties.put(ControllerPeriodicTasksConf.DEPRECATED_REALTIME_SEGMENT_RELOCATION_INITIAL_DELAY_IN_SECONDS, PERIODIC_TASK_INITIAL_DELAY_SECONDS);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzIxMjcyMA=="}, "originalCommit": {"oid": "3c0f0efe8d4b02ce690d3bc92c17e785f3e0d265"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxODM5Njg2OnYy", "diffSide": "RIGHT", "path": "pinot-controller/src/main/java/org/apache/pinot/controller/helix/core/assignment/segment/SegmentAssignment.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxODo1MjowMVrOG9kcEg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxODo1MjowMVrOG9kcEg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzIxMzMzMA==", "bodyText": "(nit) Slightly more readable if we put sortedTiers in front of tierInstancePartitionsMap as tierInstancePartitionsMap is describing the sortedTiers?", "url": "https://github.com/apache/pinot/pull/5793#discussion_r467213330", "createdAt": "2020-08-07T18:52:01Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-controller/src/main/java/org/apache/pinot/controller/helix/core/assignment/segment/SegmentAssignment.java", "diffHunk": "@@ -60,9 +62,13 @@\n    *\n    * @param currentAssignment Current segment assignment of the table (map from segment name to instance state map)\n    * @param instancePartitionsMap Map from type (OFFLINE|CONSUMING|COMPLETED) to instance partitions\n+   * @param tierInstancePartitionsMap Map from tierName to instance partitions\n+   * @param sortedTiers List of Tiers sorted as per priority\n    * @param config Configuration for the rebalance\n    * @return Rebalanced assignment for the segments\n    */\n   Map<String, Map<String, String>> rebalanceTable(Map<String, Map<String, String>> currentAssignment,\n-      Map<InstancePartitionsType, InstancePartitions> instancePartitionsMap, Configuration config);\n+      Map<InstancePartitionsType, InstancePartitions> instancePartitionsMap,\n+      @Nullable Map<String, InstancePartitions> tierInstancePartitionsMap, @Nullable List<Tier> sortedTiers,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3c0f0efe8d4b02ce690d3bc92c17e785f3e0d265"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxODQwMTYyOnYy", "diffSide": "RIGHT", "path": "pinot-controller/src/main/java/org/apache/pinot/controller/helix/core/assignment/segment/OfflineSegmentAssignment.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxODo1Mzo1MFrOG9ke9Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QyMzoxNjo0OVrOG9rMQA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzIxNDA2OQ==", "bodyText": "(OCD) move this to line 81", "url": "https://github.com/apache/pinot/pull/5793#discussion_r467214069", "createdAt": "2020-08-07T18:53:50Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-controller/src/main/java/org/apache/pinot/controller/helix/core/assignment/segment/OfflineSegmentAssignment.java", "diffHunk": "@@ -72,10 +81,12 @@\n   private String _offlineTableName;\n   private int _replication;\n   private String _partitionColumn;\n+  private TableConfig _tableConfig;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3c0f0efe8d4b02ce690d3bc92c17e785f3e0d265"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzMyMzk2OA==", "bodyText": "even better, removed it because we no longer are checking shouldRelocateToTiers(tableConfig) in this file", "url": "https://github.com/apache/pinot/pull/5793#discussion_r467323968", "createdAt": "2020-08-07T23:16:49Z", "author": {"login": "npawar"}, "path": "pinot-controller/src/main/java/org/apache/pinot/controller/helix/core/assignment/segment/OfflineSegmentAssignment.java", "diffHunk": "@@ -72,10 +81,12 @@\n   private String _offlineTableName;\n   private int _replication;\n   private String _partitionColumn;\n+  private TableConfig _tableConfig;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzIxNDA2OQ=="}, "originalCommit": {"oid": "3c0f0efe8d4b02ce690d3bc92c17e785f3e0d265"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxODQwMzQ0OnYy", "diffSide": "RIGHT", "path": "pinot-controller/src/main/java/org/apache/pinot/controller/helix/core/assignment/segment/RealtimeSegmentAssignment.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxODo1NDoyOFrOG9kgGQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxODo1NDoyOFrOG9kgGQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzIxNDM2MQ==", "bodyText": "Remove this method", "url": "https://github.com/apache/pinot/pull/5793#discussion_r467214361", "createdAt": "2020-08-07T18:54:28Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-controller/src/main/java/org/apache/pinot/controller/helix/core/assignment/segment/RealtimeSegmentAssignment.java", "diffHunk": "@@ -79,18 +88,33 @@\n public class RealtimeSegmentAssignment implements SegmentAssignment {\n   private static final Logger LOGGER = LoggerFactory.getLogger(RealtimeSegmentAssignment.class);\n \n+  private HelixManager _helixManager;\n+  private TableConfig _tableConfig;\n   private String _realtimeTableName;\n   private int _replication;\n \n   @Override\n   public void init(HelixManager helixManager, TableConfig tableConfig) {\n+    _helixManager = helixManager;\n+    _tableConfig = tableConfig;\n     _realtimeTableName = tableConfig.getTableName();\n     _replication = tableConfig.getValidationConfig().getReplicasPerPartitionNumber();\n \n     LOGGER.info(\"Initialized RealtimeSegmentAssignment with replication: {} for table: {}\", _replication,\n         _realtimeTableName);\n   }\n \n+  /**\n+   * Returns a sorted list of Tiers from the TierConfigList in table config.\n+   * Keeps only those which have \"pinotServer\" storage type.\n+   */\n+  @VisibleForTesting\n+  protected List<Tier> getSortedTiersForPinotServerStorage(List<TierConfig> tierConfigList) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3c0f0efe8d4b02ce690d3bc92c17e785f3e0d265"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyMDQxODU1OnYy", "diffSide": "RIGHT", "path": "pinot-common/src/main/java/org/apache/pinot/common/tier/PinotServerTierStorage.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wOFQyMDo1ODo0OFrOG92KSQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wOFQyMDo1ODo0OFrOG92KSQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzUwMzY4OQ==", "bodyText": "Should we return TierStorageType here?", "url": "https://github.com/apache/pinot/pull/5793#discussion_r467503689", "createdAt": "2020-08-08T20:58:48Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-common/src/main/java/org/apache/pinot/common/tier/PinotServerTierStorage.java", "diffHunk": "@@ -0,0 +1,46 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.common.tier;\n+\n+import org.apache.pinot.common.tier.TierFactory.TierStorageType;\n+\n+\n+/**\n+ * Tier storage type which uses Pinot servers as storage\n+ */\n+public class PinotServerTierStorage implements TierStorage {\n+  private final String _type = TierStorageType.PINOT_SERVER.toString();\n+  private final String _tag;\n+\n+  public PinotServerTierStorage(String tag) {\n+    _tag = tag;\n+  }\n+\n+  /**\n+   * Returns the tag used to identify the servers being used as the tier storage\n+   */\n+  public String getTag() {\n+    return _tag;\n+  }\n+\n+  @Override\n+  public String getType() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "821a5becc189c42e53b20a51898b36c64780afe1"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyMDQxOTAzOnYy", "diffSide": "RIGHT", "path": "pinot-common/src/main/java/org/apache/pinot/common/tier/TierSegmentSelector.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wOFQyMDo1OTozMFrOG92Khw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wOVQwMDoxODoxOVrOG93Bcg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzUwMzc1MQ==", "bodyText": "Return TierSegmentSelectorType here?", "url": "https://github.com/apache/pinot/pull/5793#discussion_r467503751", "createdAt": "2020-08-08T20:59:30Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-common/src/main/java/org/apache/pinot/common/tier/TierSegmentSelector.java", "diffHunk": "@@ -0,0 +1,39 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.common.tier;\n+\n+/**\n+ * Interface for the segment selection strategy of a tier\n+ */\n+public interface TierSegmentSelector {\n+\n+  /**\n+   * The type of the segment selector (e.g. TIME)\n+   */\n+  String getType();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "821a5becc189c42e53b20a51898b36c64780afe1"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzUxNzgxMA==", "bodyText": "+1", "url": "https://github.com/apache/pinot/pull/5793#discussion_r467517810", "createdAt": "2020-08-09T00:18:19Z", "author": {"login": "xiangfu0"}, "path": "pinot-common/src/main/java/org/apache/pinot/common/tier/TierSegmentSelector.java", "diffHunk": "@@ -0,0 +1,39 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.common.tier;\n+\n+/**\n+ * Interface for the segment selection strategy of a tier\n+ */\n+public interface TierSegmentSelector {\n+\n+  /**\n+   * The type of the segment selector (e.g. TIME)\n+   */\n+  String getType();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzUwMzc1MQ=="}, "originalCommit": {"oid": "821a5becc189c42e53b20a51898b36c64780afe1"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyMDQyMDI0OnYy", "diffSide": "RIGHT", "path": "pinot-spi/src/main/java/org/apache/pinot/spi/config/table/TierConfig.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wOFQyMTowMTowOFrOG92LCg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wOFQyMTowMTowOFrOG92LCg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzUwMzg4Mg==", "bodyText": "Enum instead of String?", "url": "https://github.com/apache/pinot/pull/5793#discussion_r467503882", "createdAt": "2020-08-08T21:01:08Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-spi/src/main/java/org/apache/pinot/spi/config/table/TierConfig.java", "diffHunk": "@@ -0,0 +1,84 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.spi.config.table;\n+\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.fasterxml.jackson.annotation.JsonPropertyDescription;\n+import com.google.common.base.Preconditions;\n+import javax.annotation.Nullable;\n+import org.apache.pinot.spi.config.BaseJsonConfig;\n+\n+\n+/**\n+ * Config for the tiered storage and the segments which will move to that tier\n+ */\n+public class TierConfig extends BaseJsonConfig {\n+  @JsonPropertyDescription(\"Name of the tier with format TIER<number>\")\n+  private final String _name;\n+\n+  @JsonPropertyDescription(\"The strategy for selecting segments\")\n+  private final String _segmentSelectorType;\n+\n+  @JsonPropertyDescription(\"For 'TIME' segment selector, the period after which to select segments for this tier\")\n+  private final String _segmentAge;\n+\n+  @JsonPropertyDescription(\"The type of storage storage\")\n+  private final String _storageType;\n+\n+  @JsonPropertyDescription(\"For 'PINOT_SERVER' storageSelector, the tag with which to identify servers for this tier.\")\n+  private final String _serverTag;\n+\n+  // TODO: only \"serverTag\" is supported currently. In next iteration, \"InstanceAssignmentConfig _instanceAssignmentConfig\" will be added here\n+\n+  public TierConfig(@JsonProperty(value = \"name\", required = true) String name,\n+      @JsonProperty(value = \"segmentSelectorType\", required = true) String segmentSelectorType,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "821a5becc189c42e53b20a51898b36c64780afe1"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyMDQyMDc2OnYy", "diffSide": "RIGHT", "path": "pinot-common/src/main/java/org/apache/pinot/common/utils/config/TierConfigUtils.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wOFQyMTowMjoxN1rOG92LSg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wOFQyMTowMjoxN1rOG92LSg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzUwMzk0Ng==", "bodyText": "Use enum storageType", "url": "https://github.com/apache/pinot/pull/5793#discussion_r467503946", "createdAt": "2020-08-08T21:02:17Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-common/src/main/java/org/apache/pinot/common/utils/config/TierConfigUtils.java", "diffHunk": "@@ -0,0 +1,86 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.common.utils.config;\n+\n+import com.google.common.base.Preconditions;\n+import java.util.ArrayList;\n+import java.util.Comparator;\n+import java.util.List;\n+import org.apache.commons.collections.CollectionUtils;\n+import org.apache.helix.HelixManager;\n+import org.apache.pinot.common.tier.Tier;\n+import org.apache.pinot.common.tier.TierFactory;\n+import org.apache.pinot.common.tier.TierFactory.TierSegmentSelectorType;\n+import org.apache.pinot.common.tier.TierSegmentSelector;\n+import org.apache.pinot.common.tier.TierStorage;\n+import org.apache.pinot.common.tier.TimeBasedTierSegmentSelector;\n+import org.apache.pinot.spi.config.table.TableConfig;\n+import org.apache.pinot.spi.config.table.TierConfig;\n+\n+\n+/**\n+ * Util methods for TierConfig\n+ */\n+public final class TierConfigUtils {\n+\n+  private TierConfigUtils() {\n+  }\n+\n+  /**\n+   * Returns whether relocation of segments to tiers has been enabled for this table\n+   */\n+  public static boolean shouldRelocateToTiers(TableConfig tableConfig) {\n+    return CollectionUtils.isNotEmpty(tableConfig.getTierConfigsList());\n+  }\n+\n+  /**\n+   * Gets sorted list of tiers for given storage type from provided list of TierConfig\n+   */\n+  public static List<Tier> getSortedTiersForStorageType(List<TierConfig> tierConfigList, String storageType,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "821a5becc189c42e53b20a51898b36c64780afe1"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyMDUzNjQzOnYy", "diffSide": "RIGHT", "path": "pinot-common/src/main/java/org/apache/pinot/common/tier/PinotServerTierStorage.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wOVQwMDowNzo1MlrOG92_Dw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQwNToyNjoyNFrOG-BurQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzUxNzE5OQ==", "bodyText": "We can skip this field and directly return enum in the getType() method.", "url": "https://github.com/apache/pinot/pull/5793#discussion_r467517199", "createdAt": "2020-08-09T00:07:52Z", "author": {"login": "xiangfu0"}, "path": "pinot-common/src/main/java/org/apache/pinot/common/tier/PinotServerTierStorage.java", "diffHunk": "@@ -0,0 +1,46 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.common.tier;\n+\n+import org.apache.pinot.common.tier.TierFactory.TierStorageType;\n+\n+\n+/**\n+ * Tier storage type which uses Pinot servers as storage\n+ */\n+public class PinotServerTierStorage implements TierStorage {\n+  private final String _type = TierStorageType.PINOT_SERVER.toString();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "821a5becc189c42e53b20a51898b36c64780afe1"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzY5MzIyOQ==", "bodyText": "Removed enums and kept just strings. When we eventually support users plugging in their own strategies, enum will restrict them from doing that", "url": "https://github.com/apache/pinot/pull/5793#discussion_r467693229", "createdAt": "2020-08-10T05:26:24Z", "author": {"login": "npawar"}, "path": "pinot-common/src/main/java/org/apache/pinot/common/tier/PinotServerTierStorage.java", "diffHunk": "@@ -0,0 +1,46 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.common.tier;\n+\n+import org.apache.pinot.common.tier.TierFactory.TierStorageType;\n+\n+\n+/**\n+ * Tier storage type which uses Pinot servers as storage\n+ */\n+public class PinotServerTierStorage implements TierStorage {\n+  private final String _type = TierStorageType.PINOT_SERVER.toString();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzUxNzE5OQ=="}, "originalCommit": {"oid": "821a5becc189c42e53b20a51898b36c64780afe1"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyMDUzOTc2OnYy", "diffSide": "RIGHT", "path": "pinot-common/src/main/java/org/apache/pinot/common/tier/PinotServerTierStorage.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wOVQwMDoxNDoyN1rOG93Aew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQwNToyOTo1NFrOG-Bxgw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzUxNzU2Mw==", "bodyText": "Shall we support multiple tags for a tier?", "url": "https://github.com/apache/pinot/pull/5793#discussion_r467517563", "createdAt": "2020-08-09T00:14:27Z", "author": {"login": "xiangfu0"}, "path": "pinot-common/src/main/java/org/apache/pinot/common/tier/PinotServerTierStorage.java", "diffHunk": "@@ -0,0 +1,46 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.common.tier;\n+\n+import org.apache.pinot.common.tier.TierFactory.TierStorageType;\n+\n+\n+/**\n+ * Tier storage type which uses Pinot servers as storage\n+ */\n+public class PinotServerTierStorage implements TierStorage {\n+  private final String _type = TierStorageType.PINOT_SERVER.toString();\n+  private final String _tag;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "821a5becc189c42e53b20a51898b36c64780afe1"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzY5Mzk1NQ==", "bodyText": "Yes that's a good idea. I can add that for phase 2 (where I'll be handling advanced instance assignments for tiers)", "url": "https://github.com/apache/pinot/pull/5793#discussion_r467693955", "createdAt": "2020-08-10T05:29:54Z", "author": {"login": "npawar"}, "path": "pinot-common/src/main/java/org/apache/pinot/common/tier/PinotServerTierStorage.java", "diffHunk": "@@ -0,0 +1,46 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.common.tier;\n+\n+import org.apache.pinot.common.tier.TierFactory.TierStorageType;\n+\n+\n+/**\n+ * Tier storage type which uses Pinot servers as storage\n+ */\n+public class PinotServerTierStorage implements TierStorage {\n+  private final String _type = TierStorageType.PINOT_SERVER.toString();\n+  private final String _tag;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzUxNzU2Mw=="}, "originalCommit": {"oid": "821a5becc189c42e53b20a51898b36c64780afe1"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyMDU0MTcyOnYy", "diffSide": "RIGHT", "path": "pinot-common/src/main/java/org/apache/pinot/common/tier/TierFactory.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wOVQwMDoxNzo0NlrOG93BVA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wOVQwMDoxNzo0NlrOG93BVA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzUxNzc4MA==", "bodyText": "using enum?", "url": "https://github.com/apache/pinot/pull/5793#discussion_r467517780", "createdAt": "2020-08-09T00:17:46Z", "author": {"login": "xiangfu0"}, "path": "pinot-common/src/main/java/org/apache/pinot/common/tier/TierFactory.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.common.tier;\n+\n+import org.apache.helix.HelixManager;\n+import org.apache.pinot.spi.config.table.TierConfig;\n+\n+\n+/**\n+ * Factory class to create and sort {@link Tier}\n+ */\n+public final class TierFactory {\n+\n+  /**\n+   * Types of segmentSelectors for tiers\n+   */\n+  public enum TierSegmentSelectorType {\n+    TIME\n+  }\n+\n+  /**\n+   * Types of storage for tiers\n+   */\n+  public enum TierStorageType {\n+    PINOT_SERVER\n+  }\n+\n+  private TierFactory() {\n+  }\n+\n+  /**\n+   * Constructs a {@link Tier} from the {@link TierConfig} in the table config\n+   */\n+  public static Tier getTier(TierConfig tierConfig, HelixManager helixManager) {\n+    TierSegmentSelector segmentSelector;\n+    TierStorage storageSelector;\n+\n+    String segmentSelectorType = tierConfig.getSegmentSelectorType();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "821a5becc189c42e53b20a51898b36c64780afe1"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyMDU0MTg5OnYy", "diffSide": "RIGHT", "path": "pinot-common/src/main/java/org/apache/pinot/common/tier/TierFactory.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wOVQwMDoxODowNlrOG93BaA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wOVQwMDoxODowNlrOG93BaA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzUxNzgwMA==", "bodyText": "using enum here also?", "url": "https://github.com/apache/pinot/pull/5793#discussion_r467517800", "createdAt": "2020-08-09T00:18:06Z", "author": {"login": "xiangfu0"}, "path": "pinot-common/src/main/java/org/apache/pinot/common/tier/TierFactory.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.common.tier;\n+\n+import org.apache.helix.HelixManager;\n+import org.apache.pinot.spi.config.table.TierConfig;\n+\n+\n+/**\n+ * Factory class to create and sort {@link Tier}\n+ */\n+public final class TierFactory {\n+\n+  /**\n+   * Types of segmentSelectors for tiers\n+   */\n+  public enum TierSegmentSelectorType {\n+    TIME\n+  }\n+\n+  /**\n+   * Types of storage for tiers\n+   */\n+  public enum TierStorageType {\n+    PINOT_SERVER\n+  }\n+\n+  private TierFactory() {\n+  }\n+\n+  /**\n+   * Constructs a {@link Tier} from the {@link TierConfig} in the table config\n+   */\n+  public static Tier getTier(TierConfig tierConfig, HelixManager helixManager) {\n+    TierSegmentSelector segmentSelector;\n+    TierStorage storageSelector;\n+\n+    String segmentSelectorType = tierConfig.getSegmentSelectorType();\n+    if (segmentSelectorType.equalsIgnoreCase(TierSegmentSelectorType.TIME.toString())) {\n+      segmentSelector = new TimeBasedTierSegmentSelector(helixManager, tierConfig.getSegmentAge());\n+    } else {\n+      throw new IllegalStateException(\"Unsupported segmentSelectorType: \" + segmentSelectorType);\n+    }\n+\n+    String storageSelectorType = tierConfig.getStorageType();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "821a5becc189c42e53b20a51898b36c64780afe1"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyMDU0MjMxOnYy", "diffSide": "RIGHT", "path": "pinot-common/src/main/java/org/apache/pinot/common/tier/TierStorage.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wOVQwMDoxODo0NFrOG93Blw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wOVQwMDoxODo0NFrOG93Blw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzUxNzg0Nw==", "bodyText": "enum?", "url": "https://github.com/apache/pinot/pull/5793#discussion_r467517847", "createdAt": "2020-08-09T00:18:44Z", "author": {"login": "xiangfu0"}, "path": "pinot-common/src/main/java/org/apache/pinot/common/tier/TierStorage.java", "diffHunk": "@@ -0,0 +1,30 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.common.tier;\n+\n+/**\n+ * Interface for the storage type of the tier\n+ */\n+public interface TierStorage {\n+\n+  /**\n+   * Returns the type of the storage (e.g. PINOT_SERVER)\n+   */\n+  String getType();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "821a5becc189c42e53b20a51898b36c64780afe1"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyMDU0Mjc2OnYy", "diffSide": "RIGHT", "path": "pinot-common/src/main/java/org/apache/pinot/common/tier/TimeBasedTierSegmentSelector.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wOVQwMDoxOToyN1rOG93Byg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wOVQwMDoxOToyN1rOG93Byg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzUxNzg5OA==", "bodyText": "just do return TierSegmentSelectorType.TIME  and remove _type?", "url": "https://github.com/apache/pinot/pull/5793#discussion_r467517898", "createdAt": "2020-08-09T00:19:27Z", "author": {"login": "xiangfu0"}, "path": "pinot-common/src/main/java/org/apache/pinot/common/tier/TimeBasedTierSegmentSelector.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.common.tier;\n+\n+import com.google.common.base.Preconditions;\n+import java.util.concurrent.TimeUnit;\n+import org.apache.helix.HelixManager;\n+import org.apache.pinot.common.metadata.ZKMetadataProvider;\n+import org.apache.pinot.common.metadata.segment.SegmentZKMetadata;\n+import org.apache.pinot.common.tier.TierFactory.TierSegmentSelectorType;\n+import org.apache.pinot.spi.utils.TimeUtils;\n+import org.apache.pinot.spi.utils.builder.TableNameBuilder;\n+\n+\n+/**\n+ * A {@link TierSegmentSelector} strategy which selects segments for a tier based on the age of the segment\n+ */\n+public class TimeBasedTierSegmentSelector implements TierSegmentSelector {\n+  private final String _type = TierSegmentSelectorType.TIME.toString();\n+  private final long _segmentAgeMillis;\n+  private final HelixManager _helixManager;\n+\n+  public TimeBasedTierSegmentSelector(HelixManager helixManager, String segmentAge) {\n+    _segmentAgeMillis = TimeUtils.convertPeriodToMillis(segmentAge);\n+    _helixManager = helixManager;\n+  }\n+\n+  @Override\n+  public String getType() {\n+    return _type;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "821a5becc189c42e53b20a51898b36c64780afe1"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyMDU0NjUxOnYy", "diffSide": "RIGHT", "path": "pinot-common/src/main/java/org/apache/pinot/common/tier/TierSegmentSelector.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wOVQwMDoyNDo0MFrOG93DVw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wOVQwMzowMDo0NFrOG93sqw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzUxODI5NQ==", "bodyText": "thinking of adding a method like int getPriority()?\nFor time based tiers we can use internal age for comparison if priority is the same.", "url": "https://github.com/apache/pinot/pull/5793#discussion_r467518295", "createdAt": "2020-08-09T00:24:40Z", "author": {"login": "xiangfu0"}, "path": "pinot-common/src/main/java/org/apache/pinot/common/tier/TierSegmentSelector.java", "diffHunk": "@@ -0,0 +1,39 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.common.tier;\n+\n+/**\n+ * Interface for the segment selection strategy of a tier\n+ */\n+public interface TierSegmentSelector {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "821a5becc189c42e53b20a51898b36c64780afe1"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzUyODg3NQ==", "bodyText": "I thought I'll add that when the requirements demand it.. As of now, I didn't see it being requirwd", "url": "https://github.com/apache/pinot/pull/5793#discussion_r467528875", "createdAt": "2020-08-09T03:00:44Z", "author": {"login": "npawar"}, "path": "pinot-common/src/main/java/org/apache/pinot/common/tier/TierSegmentSelector.java", "diffHunk": "@@ -0,0 +1,39 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.common.tier;\n+\n+/**\n+ * Interface for the segment selection strategy of a tier\n+ */\n+public interface TierSegmentSelector {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzUxODI5NQ=="}, "originalCommit": {"oid": "821a5becc189c42e53b20a51898b36c64780afe1"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyMDU3MzE1OnYy", "diffSide": "RIGHT", "path": "pinot-controller/src/main/java/org/apache/pinot/controller/helix/core/assignment/segment/SegmentAssignmentUtils.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wOVQwMTowOToyMFrOG93Ozw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wOVQwMTowOToyMFrOG93Ozw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzUyMTIzMQ==", "bodyText": "typo", "url": "https://github.com/apache/pinot/pull/5793#discussion_r467521231", "createdAt": "2020-08-09T01:09:20Z", "author": {"login": "xiangfu0"}, "path": "pinot-controller/src/main/java/org/apache/pinot/controller/helix/core/assignment/segment/SegmentAssignmentUtils.java", "diffHunk": "@@ -326,4 +328,68 @@ static void rebalanceReplicaGroupBasedPartition(Map<String, Map<String, String>>\n       return _offlineSegmentAssignment;\n     }\n   }\n+\n+  /**\n+   * Takes a segment assignment adn splits them up based on which tiers the segments are eligible for. Only considers ONLINE segments.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "821a5becc189c42e53b20a51898b36c64780afe1"}, "originalPosition": 15}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4267, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}