{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY0MzI2NjM5", "number": 5825, "title": "Enhance sql parser for having and post-aggregation", "bodyText": "Description\nEnhance sql parser for having and post-aggregation\nIn CalciteSqlParser:\n\nSupport parsing HAVING clause\nFlatten AND/OR expression\nSimplify compileCalciteSqlToPinotQuery() for better readability", "createdAt": "2020-08-07T00:27:35Z", "url": "https://github.com/apache/pinot/pull/5825", "merged": true, "mergeCommit": {"oid": "fd0130b71235ab6532ac39ede2409ef89e5fbdbf"}, "closed": true, "closedAt": "2020-08-10T18:00:15Z", "author": {"login": "Jackie-Jiang"}, "timelineItems": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc8Zt3qABqjM2MzEzNDUxNzU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc9mF_gAFqTQ2NDQ1MjY5Mg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a83931b1aee78b67e2e55825af4d08cc3824a57f", "author": {"user": {"login": "Jackie-Jiang", "name": "Xiaotian (Jackie) Jiang"}}, "url": "https://github.com/apache/pinot/commit/a83931b1aee78b67e2e55825af4d08cc3824a57f", "committedDate": "2020-08-07T00:21:44Z", "message": "Enhance sql parser for having and post-aggregation"}, "afterCommit": {"oid": "3e5f01df27bf140feddddc554c679361e614fe82", "author": {"user": {"login": "Jackie-Jiang", "name": "Xiaotian (Jackie) Jiang"}}, "url": "https://github.com/apache/pinot/commit/3e5f01df27bf140feddddc554c679361e614fe82", "committedDate": "2020-08-07T00:58:14Z", "message": "Enhance sql parser for having and post-aggregation"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "3e5f01df27bf140feddddc554c679361e614fe82", "author": {"user": {"login": "Jackie-Jiang", "name": "Xiaotian (Jackie) Jiang"}}, "url": "https://github.com/apache/pinot/commit/3e5f01df27bf140feddddc554c679361e614fe82", "committedDate": "2020-08-07T00:58:14Z", "message": "Enhance sql parser for having and post-aggregation"}, "afterCommit": {"oid": "e09a6b0c05d73548a82866aca5b88fdefd8be582", "author": {"user": {"login": "Jackie-Jiang", "name": "Xiaotian (Jackie) Jiang"}}, "url": "https://github.com/apache/pinot/commit/e09a6b0c05d73548a82866aca5b88fdefd8be582", "committedDate": "2020-08-07T01:00:27Z", "message": "Enhance sql parser for having and post-aggregation"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e09a6b0c05d73548a82866aca5b88fdefd8be582", "author": {"user": {"login": "Jackie-Jiang", "name": "Xiaotian (Jackie) Jiang"}}, "url": "https://github.com/apache/pinot/commit/e09a6b0c05d73548a82866aca5b88fdefd8be582", "committedDate": "2020-08-07T01:00:27Z", "message": "Enhance sql parser for having and post-aggregation"}, "afterCommit": {"oid": "fba6de2e5f0c446966300fb4b46edcbbde5fee31", "author": {"user": {"login": "Jackie-Jiang", "name": "Xiaotian (Jackie) Jiang"}}, "url": "https://github.com/apache/pinot/commit/fba6de2e5f0c446966300fb4b46edcbbde5fee31", "committedDate": "2020-08-07T02:09:17Z", "message": "Enhance sql parser for having and post-aggregation"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "fba6de2e5f0c446966300fb4b46edcbbde5fee31", "author": {"user": {"login": "Jackie-Jiang", "name": "Xiaotian (Jackie) Jiang"}}, "url": "https://github.com/apache/pinot/commit/fba6de2e5f0c446966300fb4b46edcbbde5fee31", "committedDate": "2020-08-07T02:09:17Z", "message": "Enhance sql parser for having and post-aggregation"}, "afterCommit": {"oid": "e8b6d9ddf41fc68f14f87a9fe2037f416ef96442", "author": {"user": {"login": "Jackie-Jiang", "name": "Xiaotian (Jackie) Jiang"}}, "url": "https://github.com/apache/pinot/commit/e8b6d9ddf41fc68f14f87a9fe2037f416ef96442", "committedDate": "2020-08-07T02:10:22Z", "message": "Enhance sql parser for having and post-aggregation"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e8b6d9ddf41fc68f14f87a9fe2037f416ef96442", "author": {"user": {"login": "Jackie-Jiang", "name": "Xiaotian (Jackie) Jiang"}}, "url": "https://github.com/apache/pinot/commit/e8b6d9ddf41fc68f14f87a9fe2037f416ef96442", "committedDate": "2020-08-07T02:10:22Z", "message": "Enhance sql parser for having and post-aggregation"}, "afterCommit": {"oid": "a24010989d232de28c7eb0bb8371cc984b3c24b4", "author": {"user": {"login": "Jackie-Jiang", "name": "Xiaotian (Jackie) Jiang"}}, "url": "https://github.com/apache/pinot/commit/a24010989d232de28c7eb0bb8371cc984b3c24b4", "committedDate": "2020-08-07T02:29:49Z", "message": "Enhance sql parser for having and post-aggregation"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYzMDA5Njc0", "url": "https://github.com/apache/pinot/pull/5825#pullrequestreview-463009674", "createdAt": "2020-08-07T03:21:44Z", "commit": {"oid": "a24010989d232de28c7eb0bb8371cc984b3c24b4"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QwMzoyMTo0NFrOG9LJcg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QwMzoyNDoxMVrOG9LLeg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njc5ODk2Mg==", "bodyText": "@npawar I remember you had to relax the SQL parser to accept certain syntax. Was it Babel, or something else?", "url": "https://github.com/apache/pinot/pull/5825#discussion_r466798962", "createdAt": "2020-08-07T03:21:44Z", "author": {"login": "mayankshriv"}, "path": "pinot-common/src/main/java/org/apache/pinot/sql/parsers/CalciteSqlParser.java", "diffHunk": "@@ -74,6 +74,11 @@\n    * non-alphanumeric characters. */\n   private static final Lex PINOT_LEX = Lex.MYSQL_ANSI;\n \n+  // BABEL is a very liberal conformance value that allows anything supported by any dialect\n+  private static final SqlParser.Config PARSER_CONFIG =\n+      SqlParser.configBuilder().setLex(PINOT_LEX).setConformance(SqlConformanceEnum.BABEL)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a24010989d232de28c7eb0bb8371cc984b3c24b4"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njc5OTQ4Mg==", "bodyText": "@siddharthteotia, fyi, does this break any of your use cases for PQL -> SQL migration?", "url": "https://github.com/apache/pinot/pull/5825#discussion_r466799482", "createdAt": "2020-08-07T03:24:11Z", "author": {"login": "mayankshriv"}, "path": "pinot-common/src/main/java/org/apache/pinot/sql/parsers/CalciteSqlParser.java", "diffHunk": "@@ -397,7 +403,8 @@ private static void rewriteNonAggregationGroupByToDistinct(PinotQuery pinotQuery\n         pinotQuery.setGroupByList(Collections.emptyList());\n       } else {\n         selectIdentifiers.removeAll(groupByIdentifiers);\n-        throw new SqlCompilationException(String.format(\"For non-aggregation group by query, all the identifiers in select clause should be in groupBys. Found identifier: %s\",\n+        throw new SqlCompilationException(String.format(\n+            \"For non-aggregation group by query, all the identifiers in select clause should be in groupBys. Found identifier: %s\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a24010989d232de28c7eb0bb8371cc984b3c24b4"}, "originalPosition": 210}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a24010989d232de28c7eb0bb8371cc984b3c24b4", "author": {"user": {"login": "Jackie-Jiang", "name": "Xiaotian (Jackie) Jiang"}}, "url": "https://github.com/apache/pinot/commit/a24010989d232de28c7eb0bb8371cc984b3c24b4", "committedDate": "2020-08-07T02:29:49Z", "message": "Enhance sql parser for having and post-aggregation"}, "afterCommit": {"oid": "62c6ff4a253d1843286ed201ac9f4b78c63ef429", "author": {"user": {"login": "Jackie-Jiang", "name": "Xiaotian (Jackie) Jiang"}}, "url": "https://github.com/apache/pinot/commit/62c6ff4a253d1843286ed201ac9f4b78c63ef429", "committedDate": "2020-08-07T05:52:28Z", "message": "Enhance sql parser for having and post-aggregation"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYzMDgwODk3", "url": "https://github.com/apache/pinot/pull/5825#pullrequestreview-463080897", "createdAt": "2020-08-07T07:05:38Z", "commit": {"oid": "62c6ff4a253d1843286ed201ac9f4b78c63ef429"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QwNzowNTozOFrOG9O5bQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QwNzowNjo1MlrOG9O7Lg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njg2MDM5Nw==", "bodyText": "We can add A OR B ( C AND D) OR E for completeness.\nYou covered the following:\n\nA AND B ( C AND D) AND E\nA OR B ( C OR D) OR E\nA AND B ( C OR D) AND E", "url": "https://github.com/apache/pinot/pull/5825#discussion_r466860397", "createdAt": "2020-08-07T07:05:38Z", "author": {"login": "snleee"}, "path": "pinot-common/src/test/java/org/apache/pinot/sql/parsers/CalciteSqlCompilerTest.java", "diffHunk": "@@ -1804,4 +1819,199 @@ public void testInvalidNonAggregationGroupBy() {\n       throw e;\n     }\n   }\n-}\n\\ No newline at end of file\n+\n+  @Test\n+  public void testFlattenAndOr() {\n+    {\n+      String query = \"SELECT * FROM foo WHERE col1 > 0 AND (col2 > 0 AND col3 > 0) AND col4 > 0\";\n+      PinotQuery pinotQuery = CalciteSqlParser.compileToPinotQuery(query);\n+      Function functionCall = pinotQuery.getFilterExpression().getFunctionCall();\n+      Assert.assertEquals(functionCall.getOperator(), SqlKind.AND.name());\n+      List<Expression> operands = functionCall.getOperands();\n+      Assert.assertEquals(operands.size(), 4);\n+      for (Expression operand : operands) {\n+        Assert.assertEquals(operand.getFunctionCall().getOperator(), SqlKind.GREATER_THAN.name());\n+      }\n+\n+      BrokerRequest brokerRequest = BROKER_REQUEST_CONVERTER.convert(pinotQuery);\n+      FilterQueryTree filterQueryTree = RequestUtils.generateFilterQueryTree(brokerRequest);\n+      Assert.assertEquals(filterQueryTree.getOperator(), FilterOperator.AND);\n+      List<FilterQueryTree> children = filterQueryTree.getChildren();\n+      Assert.assertEquals(children.size(), 4);\n+      for (FilterQueryTree child : children) {\n+        Assert.assertEquals(child.getOperator(), FilterOperator.RANGE);\n+      }\n+    }\n+\n+    {\n+      String query = \"SELECT * FROM foo WHERE col1 <= 0 OR col2 <= 0 OR (col3 <= 0 OR col4 <= 0)\";\n+      PinotQuery pinotQuery = CalciteSqlParser.compileToPinotQuery(query);\n+      Function functionCall = pinotQuery.getFilterExpression().getFunctionCall();\n+      Assert.assertEquals(functionCall.getOperator(), SqlKind.OR.name());\n+      List<Expression> operands = functionCall.getOperands();\n+      Assert.assertEquals(operands.size(), 4);\n+      for (Expression operand : operands) {\n+        Assert.assertEquals(operand.getFunctionCall().getOperator(), SqlKind.LESS_THAN_OR_EQUAL.name());\n+      }\n+\n+      BrokerRequest brokerRequest = BROKER_REQUEST_CONVERTER.convert(pinotQuery);\n+      FilterQueryTree filterQueryTree = RequestUtils.generateFilterQueryTree(brokerRequest);\n+      Assert.assertEquals(filterQueryTree.getOperator(), FilterOperator.OR);\n+      List<FilterQueryTree> children = filterQueryTree.getChildren();\n+      Assert.assertEquals(children.size(), 4);\n+      for (FilterQueryTree child : children) {\n+        Assert.assertEquals(child.getOperator(), FilterOperator.RANGE);\n+      }\n+    }\n+\n+    {\n+      String query =\n+          \"SELECT * FROM foo WHERE col1 > 0 AND col2 > 0 AND col3 > 0 AND (col1 <= 0 OR col2 <= 0 OR (col3 <= 0 OR col4 <= 0)) AND col4 > 0\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "62c6ff4a253d1843286ed201ac9f4b78c63ef429"}, "originalPosition": 304}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njg2MDg0Ng==", "bodyText": "Why this value get changed? Did we change the underlying data or query?", "url": "https://github.com/apache/pinot/pull/5825#discussion_r466860846", "createdAt": "2020-08-07T07:06:52Z", "author": {"login": "snleee"}, "path": "pinot-core/src/test/java/org/apache/pinot/queries/InterSegmentAggregationMultiValueQueriesTest.java", "diffHunk": "@@ -157,7 +157,7 @@ public void testCastCountMV() {\n     Assert.assertEquals(brokerResponse.getResultTable().getDataSchema().getColumnName(0), \"cnt_column6\");\n \n     brokerResponse = getBrokerResponseForSqlQueryWithFilter(query);\n-    QueriesTestUtils.testInterSegmentResultTable(brokerResponse, 62480L, 874176L, 62480L, 400000L,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "62c6ff4a253d1843286ed201ac9f4b78c63ef429"}, "originalPosition": 17}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e54a3ff91c6f82a01bc3f8b1a8eaab4c74b0afd4", "author": {"user": {"login": "Jackie-Jiang", "name": "Xiaotian (Jackie) Jiang"}}, "url": "https://github.com/apache/pinot/commit/e54a3ff91c6f82a01bc3f8b1a8eaab4c74b0afd4", "committedDate": "2020-08-07T18:03:36Z", "message": "Enhance sql parser for having and post-aggregation"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "62c6ff4a253d1843286ed201ac9f4b78c63ef429", "author": {"user": {"login": "Jackie-Jiang", "name": "Xiaotian (Jackie) Jiang"}}, "url": "https://github.com/apache/pinot/commit/62c6ff4a253d1843286ed201ac9f4b78c63ef429", "committedDate": "2020-08-07T05:52:28Z", "message": "Enhance sql parser for having and post-aggregation"}, "afterCommit": {"oid": "e54a3ff91c6f82a01bc3f8b1a8eaab4c74b0afd4", "author": {"user": {"login": "Jackie-Jiang", "name": "Xiaotian (Jackie) Jiang"}}, "url": "https://github.com/apache/pinot/commit/e54a3ff91c6f82a01bc3f8b1a8eaab4c74b0afd4", "committedDate": "2020-08-07T18:03:36Z", "message": "Enhance sql parser for having and post-aggregation"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY0NDUyNjky", "url": "https://github.com/apache/pinot/pull/5825#pullrequestreview-464452692", "createdAt": "2020-08-10T17:58:24Z", "commit": {"oid": "e54a3ff91c6f82a01bc3f8b1a8eaab4c74b0afd4"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 141, "cost": 1, "resetAt": "2021-10-28T18:00:02Z"}}}