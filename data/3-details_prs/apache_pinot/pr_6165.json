{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA3MTE0NDQ3", "number": 6165, "title": "Add table level lock for segment upload", "bodyText": "Description\nAdd table level lock for segment upload to avoid unnecessary race conditions to cause idealstates update failure when pushing new segments with high parallelism.", "createdAt": "2020-10-20T21:44:09Z", "url": "https://github.com/apache/pinot/pull/6165", "merged": true, "mergeCommit": {"oid": "5577e87e35ea64307d728a136295bfa26ac99203"}, "closed": true, "closedAt": "2020-10-23T19:23:52Z", "author": {"login": "xiangfu0"}, "timelineItems": {"totalCount": 17, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdUf5PbABqjM5MDA5MjgyMzg=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdVbCt7gH2gAyNTA3MTE0NDQ3OjI3Zjg0YzRiYWJkY2VlZGQ1OTRhNmU3OWM4MjFhZjkwYzA1ZmE2NTk=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f3a94cc976c4a63509f0844db14b0cf5c95e46fd", "author": {"user": {"login": "xiangfu0", "name": "Xiang Fu"}}, "url": "https://github.com/apache/pinot/commit/f3a94cc976c4a63509f0844db14b0cf5c95e46fd", "committedDate": "2020-10-20T21:43:06Z", "message": "Add table level lock for segment upload"}, "afterCommit": {"oid": "9ba9f4e59e9cb0bde3fc7fe4f68a9ae06868fd91", "author": {"user": {"login": "xiangfu0", "name": "Xiang Fu"}}, "url": "https://github.com/apache/pinot/commit/9ba9f4e59e9cb0bde3fc7fe4f68a9ae06868fd91", "committedDate": "2020-10-20T21:45:06Z", "message": "Add table level lock for segment upload"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTEzMTY5MDkx", "url": "https://github.com/apache/pinot/pull/6165#pullrequestreview-513169091", "createdAt": "2020-10-20T22:04:11Z", "commit": {"oid": "9ba9f4e59e9cb0bde3fc7fe4f68a9ae06868fd91"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQyMjowNDoxMlrOHlS1aQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQyMjowNDoxMlrOHlS1aQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODg2Nzk0NQ==", "bodyText": "This will increase the number of tables in the map forever. Can you do a similar approach as is done in PinotLLCRealtimeSegmentManager? Maybe you can use the same config, or a hard-coded number of locks for now.", "url": "https://github.com/apache/pinot/pull/6165#discussion_r508867945", "createdAt": "2020-10-20T22:04:12Z", "author": {"login": "mcvsubbu"}, "path": "pinot-controller/src/main/java/org/apache/pinot/controller/helix/core/PinotHelixResourceManager.java", "diffHunk": "@@ -1641,23 +1643,30 @@ public void addNewSegment(String tableName, SegmentMetadata segmentMetadata, Str\n       Map<InstancePartitionsType, InstancePartitions> instancePartitionsMap = Collections\n           .singletonMap(InstancePartitionsType.OFFLINE, InstancePartitionsUtils\n               .fetchOrComputeInstancePartitions(_helixZkManager, offlineTableConfig, InstancePartitionsType.OFFLINE));\n-      HelixHelper.updateIdealState(_helixZkManager, offlineTableName, idealState -> {\n-        assert idealState != null;\n-        Map<String, Map<String, String>> currentAssignment = idealState.getRecord().getMapFields();\n-        if (currentAssignment.containsKey(segmentName)) {\n-          LOGGER.warn(\"Segment: {} already exists in the IdealState for table: {}, do not update\", segmentName,\n-              offlineTableName);\n-        } else {\n-          List<String> assignedInstances =\n-              segmentAssignment.assignSegment(segmentName, currentAssignment, instancePartitionsMap);\n-          LOGGER.info(\"Assigning segment: {} to instances: {} for table: {}\", segmentName, assignedInstances,\n-              offlineTableName);\n-          currentAssignment.put(segmentName,\n-              SegmentAssignmentUtils.getInstanceStateMap(assignedInstances, SegmentStateModel.ONLINE));\n+      if (_tableUpdaterLockMap.get(offlineTableName) == null) {\n+        synchronized (_tableUpdaterLockMap) {\n+          if (_tableUpdaterLockMap.get(offlineTableName) == null) {\n+            _tableUpdaterLockMap.put(offlineTableName, new Object());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9ba9f4e59e9cb0bde3fc7fe4f68a9ae06868fd91"}, "originalPosition": 29}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "9ba9f4e59e9cb0bde3fc7fe4f68a9ae06868fd91", "author": {"user": {"login": "xiangfu0", "name": "Xiang Fu"}}, "url": "https://github.com/apache/pinot/commit/9ba9f4e59e9cb0bde3fc7fe4f68a9ae06868fd91", "committedDate": "2020-10-20T21:45:06Z", "message": "Add table level lock for segment upload"}, "afterCommit": {"oid": "2d95abdef78f73e20b97edef2a2a4265ba526162", "author": {"user": {"login": "xiangfu0", "name": "Xiang Fu"}}, "url": "https://github.com/apache/pinot/commit/2d95abdef78f73e20b97edef2a2a4265ba526162", "committedDate": "2020-10-20T23:42:30Z", "message": "Add table level lock for segment upload"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "2d95abdef78f73e20b97edef2a2a4265ba526162", "author": {"user": {"login": "xiangfu0", "name": "Xiang Fu"}}, "url": "https://github.com/apache/pinot/commit/2d95abdef78f73e20b97edef2a2a4265ba526162", "committedDate": "2020-10-20T23:42:30Z", "message": "Add table level lock for segment upload"}, "afterCommit": {"oid": "8a02f09431cfad092badb0fbf48dd3a2a0429e1a", "author": {"user": {"login": "xiangfu0", "name": "Xiang Fu"}}, "url": "https://github.com/apache/pinot/commit/8a02f09431cfad092badb0fbf48dd3a2a0429e1a", "committedDate": "2020-10-20T23:48:09Z", "message": "Add table level lock for segment upload"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "8a02f09431cfad092badb0fbf48dd3a2a0429e1a", "author": {"user": {"login": "xiangfu0", "name": "Xiang Fu"}}, "url": "https://github.com/apache/pinot/commit/8a02f09431cfad092badb0fbf48dd3a2a0429e1a", "committedDate": "2020-10-20T23:48:09Z", "message": "Add table level lock for segment upload"}, "afterCommit": {"oid": "145a314b7b4209c472c12e5875a6d5a13547b04f", "author": {"user": {"login": "xiangfu0", "name": "Xiang Fu"}}, "url": "https://github.com/apache/pinot/commit/145a314b7b4209c472c12e5875a6d5a13547b04f", "committedDate": "2020-10-20T23:48:42Z", "message": "Add table level lock for segment upload"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE0MDcxNDEz", "url": "https://github.com/apache/pinot/pull/6165#pullrequestreview-514071413", "createdAt": "2020-10-21T18:41:26Z", "commit": {"oid": "145a314b7b4209c472c12e5875a6d5a13547b04f"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQxODo0MToyNlrOHl9ghQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQxODo1ODo0OVrOHl-vLg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTU2NzEwOQ==", "bodyText": "(nit) we don't use final for local variable", "url": "https://github.com/apache/pinot/pull/6165#discussion_r509567109", "createdAt": "2020-10-21T18:41:26Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-controller/src/main/java/org/apache/pinot/controller/helix/core/PinotHelixResourceManager.java", "diffHunk": "@@ -1505,10 +1507,19 @@ public void deleteOfflineTable(String tableName) {\n     LOGGER.info(\"Deleting table {}: Removed table config\", offlineTableName);\n \n     // Remove instance partitions\n+    final String rawTableName = TableNameBuilder.extractRawTableName(tableName);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "145a314b7b4209c472c12e5875a6d5a13547b04f"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTU3MjQ1Ng==", "bodyText": "The key is offlineTableName instead of rawTableName.\nAlso, no need to do check and remove here, directly remove should be good enough\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                if (_tableUpdaterLockMap.containsKey(rawTableName)) {\n          \n          \n            \n                _tableUpdaterLockMap.remove(offlineTableName);", "url": "https://github.com/apache/pinot/pull/6165#discussion_r509572456", "createdAt": "2020-10-21T18:47:18Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-controller/src/main/java/org/apache/pinot/controller/helix/core/PinotHelixResourceManager.java", "diffHunk": "@@ -1505,10 +1507,19 @@ public void deleteOfflineTable(String tableName) {\n     LOGGER.info(\"Deleting table {}: Removed table config\", offlineTableName);\n \n     // Remove instance partitions\n+    final String rawTableName = TableNameBuilder.extractRawTableName(tableName);\n     InstancePartitionsUtils.removeInstancePartitions(_propertyStore,\n-        InstancePartitionsType.OFFLINE.getInstancePartitionsName(TableNameBuilder.extractRawTableName(tableName)));\n+        InstancePartitionsType.OFFLINE.getInstancePartitionsName(rawTableName));\n     LOGGER.info(\"Deleting table {}: Removed instance partitions\", offlineTableName);\n \n+    // Remove table locker if there\n+    if (_tableUpdaterLockMap.containsKey(rawTableName)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "145a314b7b4209c472c12e5875a6d5a13547b04f"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTU3NDc3NA==", "bodyText": "Use ConcurrentHashMap", "url": "https://github.com/apache/pinot/pull/6165#discussion_r509574774", "createdAt": "2020-10-21T18:49:15Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-controller/src/main/java/org/apache/pinot/controller/helix/core/PinotHelixResourceManager.java", "diffHunk": "@@ -140,6 +140,8 @@\n \n   private final Map<String, Map<String, Long>> _segmentCrcMap = new HashMap<>();\n   private final Map<String, Map<String, Integer>> _lastKnownSegmentMetadataVersionMap = new HashMap<>();\n+  private final Map<String, Object> _tableUpdaterLockMap = new HashMap<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "145a314b7b4209c472c12e5875a6d5a13547b04f"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTU3OTM2OA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  synchronized (_tableUpdaterLockMap.get(offlineTableName)) {\n          \n          \n            \n                  synchronized (_tableUpdaterLockMap.computeIfAbsent(offlineTableName, k -> new Object())) {", "url": "https://github.com/apache/pinot/pull/6165#discussion_r509579368", "createdAt": "2020-10-21T18:52:46Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-controller/src/main/java/org/apache/pinot/controller/helix/core/PinotHelixResourceManager.java", "diffHunk": "@@ -1641,23 +1652,30 @@ public void addNewSegment(String tableName, SegmentMetadata segmentMetadata, Str\n       Map<InstancePartitionsType, InstancePartitions> instancePartitionsMap = Collections\n           .singletonMap(InstancePartitionsType.OFFLINE, InstancePartitionsUtils\n               .fetchOrComputeInstancePartitions(_helixZkManager, offlineTableConfig, InstancePartitionsType.OFFLINE));\n-      HelixHelper.updateIdealState(_helixZkManager, offlineTableName, idealState -> {\n-        assert idealState != null;\n-        Map<String, Map<String, String>> currentAssignment = idealState.getRecord().getMapFields();\n-        if (currentAssignment.containsKey(segmentName)) {\n-          LOGGER.warn(\"Segment: {} already exists in the IdealState for table: {}, do not update\", segmentName,\n-              offlineTableName);\n-        } else {\n-          List<String> assignedInstances =\n-              segmentAssignment.assignSegment(segmentName, currentAssignment, instancePartitionsMap);\n-          LOGGER.info(\"Assigning segment: {} to instances: {} for table: {}\", segmentName, assignedInstances,\n-              offlineTableName);\n-          currentAssignment.put(segmentName,\n-              SegmentAssignmentUtils.getInstanceStateMap(assignedInstances, SegmentStateModel.ONLINE));\n+      if (_tableUpdaterLockMap.get(offlineTableName) == null) {\n+        synchronized (_tableUpdaterLockMap) {\n+          if (_tableUpdaterLockMap.get(offlineTableName) == null) {\n+            _tableUpdaterLockMap.put(offlineTableName, new Object());\n+          }\n         }\n-        return idealState;\n-      });\n-      LOGGER.info(\"Added segment: {} to IdealState for table: {}\", segmentName, offlineTableName);\n+      }\n+      synchronized (_tableUpdaterLockMap.get(offlineTableName)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "145a314b7b4209c472c12e5875a6d5a13547b04f"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTU4NzI0Ng==", "bodyText": "@mcvsubbu A map with less than 10000 entries should be tiny (less than 1MB). Actually the _segmentCrcMap and _lastKnownSegmentMetadataVersionMap might cause problem because it stores an entry per segment, but that is out of the scope of this PR", "url": "https://github.com/apache/pinot/pull/6165#discussion_r509587246", "createdAt": "2020-10-21T18:58:49Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-controller/src/main/java/org/apache/pinot/controller/helix/core/PinotHelixResourceManager.java", "diffHunk": "@@ -1641,23 +1643,30 @@ public void addNewSegment(String tableName, SegmentMetadata segmentMetadata, Str\n       Map<InstancePartitionsType, InstancePartitions> instancePartitionsMap = Collections\n           .singletonMap(InstancePartitionsType.OFFLINE, InstancePartitionsUtils\n               .fetchOrComputeInstancePartitions(_helixZkManager, offlineTableConfig, InstancePartitionsType.OFFLINE));\n-      HelixHelper.updateIdealState(_helixZkManager, offlineTableName, idealState -> {\n-        assert idealState != null;\n-        Map<String, Map<String, String>> currentAssignment = idealState.getRecord().getMapFields();\n-        if (currentAssignment.containsKey(segmentName)) {\n-          LOGGER.warn(\"Segment: {} already exists in the IdealState for table: {}, do not update\", segmentName,\n-              offlineTableName);\n-        } else {\n-          List<String> assignedInstances =\n-              segmentAssignment.assignSegment(segmentName, currentAssignment, instancePartitionsMap);\n-          LOGGER.info(\"Assigning segment: {} to instances: {} for table: {}\", segmentName, assignedInstances,\n-              offlineTableName);\n-          currentAssignment.put(segmentName,\n-              SegmentAssignmentUtils.getInstanceStateMap(assignedInstances, SegmentStateModel.ONLINE));\n+      if (_tableUpdaterLockMap.get(offlineTableName) == null) {\n+        synchronized (_tableUpdaterLockMap) {\n+          if (_tableUpdaterLockMap.get(offlineTableName) == null) {\n+            _tableUpdaterLockMap.put(offlineTableName, new Object());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODg2Nzk0NQ=="}, "originalCommit": {"oid": "9ba9f4e59e9cb0bde3fc7fe4f68a9ae06868fd91"}, "originalPosition": 29}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "23e9e7efdfbd334dd02e907746bb277e5140ba44", "author": {"user": {"login": "xiangfu0", "name": "Xiang Fu"}}, "url": "https://github.com/apache/pinot/commit/23e9e7efdfbd334dd02e907746bb277e5140ba44", "committedDate": "2020-10-22T20:55:38Z", "message": "Add table level lock for segment upload"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "145a314b7b4209c472c12e5875a6d5a13547b04f", "author": {"user": {"login": "xiangfu0", "name": "Xiang Fu"}}, "url": "https://github.com/apache/pinot/commit/145a314b7b4209c472c12e5875a6d5a13547b04f", "committedDate": "2020-10-20T23:48:42Z", "message": "Add table level lock for segment upload"}, "afterCommit": {"oid": "ebf3a6cf3f9342d21bf1ec47f6fd31e6b403e073", "author": {"user": {"login": "xiangfu0", "name": "Xiang Fu"}}, "url": "https://github.com/apache/pinot/commit/ebf3a6cf3f9342d21bf1ec47f6fd31e6b403e073", "committedDate": "2020-10-22T21:51:07Z", "message": "Address comments"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ebf3a6cf3f9342d21bf1ec47f6fd31e6b403e073", "author": {"user": {"login": "xiangfu0", "name": "Xiang Fu"}}, "url": "https://github.com/apache/pinot/commit/ebf3a6cf3f9342d21bf1ec47f6fd31e6b403e073", "committedDate": "2020-10-22T21:51:07Z", "message": "Address comments"}, "afterCommit": {"oid": "1b9d2de0bffee2747d1b17e02be82c84cb9d6762", "author": {"user": {"login": "xiangfu0", "name": "Xiang Fu"}}, "url": "https://github.com/apache/pinot/commit/1b9d2de0bffee2747d1b17e02be82c84cb9d6762", "committedDate": "2020-10-22T22:00:07Z", "message": "Address comments"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "1b9d2de0bffee2747d1b17e02be82c84cb9d6762", "author": {"user": {"login": "xiangfu0", "name": "Xiang Fu"}}, "url": "https://github.com/apache/pinot/commit/1b9d2de0bffee2747d1b17e02be82c84cb9d6762", "committedDate": "2020-10-22T22:00:07Z", "message": "Address comments"}, "afterCommit": {"oid": "a17ea4ca9be9419961cf6d25059847879cd533a5", "author": {"user": {"login": "xiangfu0", "name": "Xiang Fu"}}, "url": "https://github.com/apache/pinot/commit/a17ea4ca9be9419961cf6d25059847879cd533a5", "committedDate": "2020-10-22T22:07:01Z", "message": "Address comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7a1012671337c8c2ae9457152e8792bb969e9331", "author": {"user": {"login": "xiangfu0", "name": "Xiang Fu"}}, "url": "https://github.com/apache/pinot/commit/7a1012671337c8c2ae9457152e8792bb969e9331", "committedDate": "2020-10-22T22:11:46Z", "message": "Address comments"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a17ea4ca9be9419961cf6d25059847879cd533a5", "author": {"user": {"login": "xiangfu0", "name": "Xiang Fu"}}, "url": "https://github.com/apache/pinot/commit/a17ea4ca9be9419961cf6d25059847879cd533a5", "committedDate": "2020-10-22T22:07:01Z", "message": "Address comments"}, "afterCommit": {"oid": "7a1012671337c8c2ae9457152e8792bb969e9331", "author": {"user": {"login": "xiangfu0", "name": "Xiang Fu"}}, "url": "https://github.com/apache/pinot/commit/7a1012671337c8c2ae9457152e8792bb969e9331", "committedDate": "2020-10-22T22:11:46Z", "message": "Address comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE1MTY3MDU5", "url": "https://github.com/apache/pinot/pull/6165#pullrequestreview-515167059", "createdAt": "2020-10-22T22:36:21Z", "commit": {"oid": "7a1012671337c8c2ae9457152e8792bb969e9331"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQyMjozNjoyMVrOHm2PIQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQyMjo1MTowNlrOHm2iKg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDQ5NjU0NQ==", "bodyText": "I would use a random delay policy instead of fixed. Otherwise, you can have the same controllers coming back to update the IS at the same time.\nI don't think we have the policy, so you can create one.", "url": "https://github.com/apache/pinot/pull/6165#discussion_r510496545", "createdAt": "2020-10-22T22:36:21Z", "author": {"login": "mcvsubbu"}, "path": "pinot-common/src/main/java/org/apache/pinot/common/utils/helix/HelixHelper.java", "diffHunk": "@@ -55,6 +55,7 @@\n   private static final String ENABLE_COMPRESSIONS_KEY = \"enableCompression\";\n \n   private static final RetryPolicy DEFAULT_RETRY_POLICY = RetryPolicies.exponentialBackoffRetryPolicy(5, 1000L, 2.0f);\n+  private static final RetryPolicy DEFAULT_TABLE_IDEALSTATES_UPDATE_RETRY_POLICY = RetryPolicies.fixedDelayRetryPolicy(20, 100L);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7a1012671337c8c2ae9457152e8792bb969e9331"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDUwMTQxOA==", "bodyText": "hash code can be negative. use & INTEGER_MAX to get a positive. I fell into the same trap in the realtime part :-)", "url": "https://github.com/apache/pinot/pull/6165#discussion_r510501418", "createdAt": "2020-10-22T22:51:06Z", "author": {"login": "mcvsubbu"}, "path": "pinot-controller/src/main/java/org/apache/pinot/controller/helix/core/PinotHelixResourceManager.java", "diffHunk": "@@ -1672,6 +1679,10 @@ public void addNewSegment(String tableName, SegmentMetadata segmentMetadata, Str\n     }\n   }\n \n+  private Object getTableUpdaterLock(String offlineTableName) {\n+    return _tableUpdaterLocks[offlineTableName.hashCode() % _tableUpdaterLocks.length];", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7a1012671337c8c2ae9457152e8792bb969e9331"}, "originalPosition": 74}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6d910f9d4c32ddae7a64c1b83655ca1684a73c42", "author": {"user": {"login": "xiangfu0", "name": "Xiang Fu"}}, "url": "https://github.com/apache/pinot/commit/6d910f9d4c32ddae7a64c1b83655ca1684a73c42", "committedDate": "2020-10-22T23:14:35Z", "message": "Using random delay policy"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE1ODE5MDk0", "url": "https://github.com/apache/pinot/pull/6165#pullrequestreview-515819094", "createdAt": "2020-10-23T16:19:16Z", "commit": {"oid": "6d910f9d4c32ddae7a64c1b83655ca1684a73c42"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QxNjoxOToxNlrOHnUu_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QxNjoxOTozOFrOHnUv4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDk5NjIyMw==", "bodyText": "isn't it simpler to just do:\nreturn _minDelayMs + (long)((_maxDelayMs - _minDelayMs) * RANDOM.nextDouble())?", "url": "https://github.com/apache/pinot/pull/6165#discussion_r510996223", "createdAt": "2020-10-23T16:19:16Z", "author": {"login": "mcvsubbu"}, "path": "pinot-spi/src/main/java/org/apache/pinot/spi/utils/retry/RandomDelayRetryPolicy.java", "diffHunk": "@@ -0,0 +1,44 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.spi.utils.retry;\n+\n+import java.util.Random;\n+\n+\n+/**\n+ * Delay policy with random delay between attempts.\n+ */\n+public class RandomDelayRetryPolicy extends BaseRetryPolicy {\n+  private final static Random RANDOM = new Random(System.currentTimeMillis());\n+  private final long _minDelayMs;\n+  private final int _rangeUpper;\n+  private final int _rangeLower;\n+\n+  public RandomDelayRetryPolicy(int maxNumAttempts, long minDelayMs, long maxDelayMs) {\n+    super(maxNumAttempts);\n+    _minDelayMs = minDelayMs;\n+    _rangeUpper = (int) ((maxDelayMs - minDelayMs) / Integer.MAX_VALUE + 1);\n+    _rangeLower = (int) ((maxDelayMs - minDelayMs) % Integer.MAX_VALUE);\n+  }\n+\n+  @Override\n+  protected long getDelayMs(int currentAttempt) {\n+    return RANDOM.nextInt(_rangeUpper) * Integer.MAX_VALUE + RANDOM.nextInt(_rangeLower) + _minDelayMs;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6d910f9d4c32ddae7a64c1b83655ca1684a73c42"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDk5NjQ1MA==", "bodyText": "Thanks for adding this. This will be useful in other places as well.", "url": "https://github.com/apache/pinot/pull/6165#discussion_r510996450", "createdAt": "2020-10-23T16:19:38Z", "author": {"login": "mcvsubbu"}, "path": "pinot-spi/src/main/java/org/apache/pinot/spi/utils/retry/RandomDelayRetryPolicy.java", "diffHunk": "@@ -0,0 +1,44 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.spi.utils.retry;\n+\n+import java.util.Random;\n+\n+\n+/**\n+ * Delay policy with random delay between attempts.\n+ */\n+public class RandomDelayRetryPolicy extends BaseRetryPolicy {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6d910f9d4c32ddae7a64c1b83655ca1684a73c42"}, "originalPosition": 27}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE1ODg3NTQz", "url": "https://github.com/apache/pinot/pull/6165#pullrequestreview-515887543", "createdAt": "2020-10-23T17:57:55Z", "commit": {"oid": "6d910f9d4c32ddae7a64c1b83655ca1684a73c42"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "27f84c4babdceedd594a6e79c821af90c05fa659", "author": {"user": {"login": "xiangfu0", "name": "Xiang Fu"}}, "url": "https://github.com/apache/pinot/commit/27f84c4babdceedd594a6e79c821af90c05fa659", "committedDate": "2020-10-23T18:40:03Z", "message": "update random policy"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1625, "cost": 1, "resetAt": "2021-10-28T17:48:14Z"}}}