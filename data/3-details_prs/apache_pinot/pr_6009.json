{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg1NDkwMjA4", "number": 6009, "title": "Adjust schema validation logic in AvroIngestionSchemaValidator", "bodyText": "Description\nThis PR adjusts schema validation logic in AvroIngestionSchemaValidator.\nThe current logic doesn't check the actual data type for multi-value column, which could have returned incorrect validation results.\nE.g. if column3 is of array structure (like Object[]) and its base element is of String type in AVRO and if column3 is of String type as well in Pinot schema, the current code would mark it data type mismatch.\nE.g. if column3 is of array of map structure (like Map[]), the current logic would miss marking it multi-value structure mismatch.", "createdAt": "2020-09-11T21:49:00Z", "url": "https://github.com/apache/pinot/pull/6009", "merged": true, "mergeCommit": {"oid": "cf71498478f120fdc182c4aa34d156232076cd18"}, "closed": true, "closedAt": "2020-09-16T16:44:40Z", "author": {"login": "jackjlli"}, "timelineItems": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdH8Z_iAH2gAyNDg1NDkwMjA4OjZkMjJmYWE5ZmQ5MTYyMTdiNzY0ZGRlYmQ4Y2FjYWM1NGVhNGE2ZGI=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdJMKuqAFqTQ4ODk1NjI4MQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "6d22faa9fd916217b764ddebd8cacac54ea4a6db", "author": {"user": null}, "url": "https://github.com/apache/pinot/commit/6d22faa9fd916217b764ddebd8cacac54ea4a6db", "committedDate": "2020-09-11T21:37:24Z", "message": "Adjust schema validation logic in AvroIngestionSchemaValidator"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg3MTc2NzU2", "url": "https://github.com/apache/pinot/pull/6009#pullrequestreview-487176756", "createdAt": "2020-09-11T23:44:34Z", "commit": {"oid": "6d22faa9fd916217b764ddebd8cacac54ea4a6db"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f09ca9aecd95080949422b302d9f6870f8c033f0", "author": {"user": null}, "url": "https://github.com/apache/pinot/commit/f09ca9aecd95080949422b302d9f6870f8c033f0", "committedDate": "2020-09-12T03:33:18Z", "message": "Reduce test file sizes"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg3MzQzNTg4", "url": "https://github.com/apache/pinot/pull/6009#pullrequestreview-487343588", "createdAt": "2020-09-13T22:05:52Z", "commit": {"oid": "f09ca9aecd95080949422b302d9f6870f8c033f0"}, "state": "COMMENTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xM1QyMjowNTo1MlrOHQ_tQw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xM1QyMjoxNzowOVrOHQ_xpw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzU4MzA0Mw==", "bodyText": "(nit) directly use the member variable? Same for other places\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                      getDataTypeMismatchResult().addMismatchReason(String\n          \n          \n            \n                      _dataTypeMismatch.addMismatchReason(String", "url": "https://github.com/apache/pinot/pull/6009#discussion_r487583043", "createdAt": "2020-09-13T22:05:52Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-plugins/pinot-input-format/pinot-avro-base/src/main/java/org/apache/pinot/plugin/inputformat/avro/AvroIngestionSchemaValidator.java", "diffHunk": "@@ -111,36 +112,56 @@ private void validateSchemas() {\n           }\n         }\n         if (nonNullSchema != null) {\n+          avroColumnSchema = nonNullSchema;\n           avroColumnType = nonNullSchema.getType();\n         }\n       }\n \n-      if (!fieldSpec.getDataType().name().equalsIgnoreCase(avroColumnType.toString())) {\n-        _dataTypeMismatch.addMismatchReason(String\n-            .format(\"The Pinot column: (%s: %s) doesn't match with the column (%s: %s) in input %s schema.\", columnName,\n-                fieldSpec.getDataType().name(), avroColumnSchema.getName(), avroColumnType.toString(),\n-                getInputSchemaType()));\n-      }\n-\n       if (fieldSpec.isSingleValueField()) {\n+        // check data type mismatch\n+        if (!fieldSpec.getDataType().name().equalsIgnoreCase(avroColumnType.toString())) {\n+          getDataTypeMismatchResult().addMismatchReason(String", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f09ca9aecd95080949422b302d9f6870f8c033f0"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzU4MzMxNQ==", "bodyText": "(nit)\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (!fieldSpec.getDataType().name().equalsIgnoreCase(avroColumnType.toString())) {\n          \n          \n            \n                    if (!fieldSpec.getDataType().name().equals(avroColumnType.name())) {", "url": "https://github.com/apache/pinot/pull/6009#discussion_r487583315", "createdAt": "2020-09-13T22:08:53Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-plugins/pinot-input-format/pinot-avro-base/src/main/java/org/apache/pinot/plugin/inputformat/avro/AvroIngestionSchemaValidator.java", "diffHunk": "@@ -111,36 +112,56 @@ private void validateSchemas() {\n           }\n         }\n         if (nonNullSchema != null) {\n+          avroColumnSchema = nonNullSchema;\n           avroColumnType = nonNullSchema.getType();\n         }\n       }\n \n-      if (!fieldSpec.getDataType().name().equalsIgnoreCase(avroColumnType.toString())) {\n-        _dataTypeMismatch.addMismatchReason(String\n-            .format(\"The Pinot column: (%s: %s) doesn't match with the column (%s: %s) in input %s schema.\", columnName,\n-                fieldSpec.getDataType().name(), avroColumnSchema.getName(), avroColumnType.toString(),\n-                getInputSchemaType()));\n-      }\n-\n       if (fieldSpec.isSingleValueField()) {\n+        // check data type mismatch\n+        if (!fieldSpec.getDataType().name().equalsIgnoreCase(avroColumnType.toString())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f09ca9aecd95080949422b302d9f6870f8c033f0"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzU4MzYwNA==", "bodyText": "You might want to check single-value multi-value mismatch first, then check data type based on whether they match, or you will always get data type mismatch if single-value multi-value does not match", "url": "https://github.com/apache/pinot/pull/6009#discussion_r487583604", "createdAt": "2020-09-13T22:11:29Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-plugins/pinot-input-format/pinot-avro-base/src/main/java/org/apache/pinot/plugin/inputformat/avro/AvroIngestionSchemaValidator.java", "diffHunk": "@@ -111,36 +112,56 @@ private void validateSchemas() {\n           }\n         }\n         if (nonNullSchema != null) {\n+          avroColumnSchema = nonNullSchema;\n           avroColumnType = nonNullSchema.getType();\n         }\n       }\n \n-      if (!fieldSpec.getDataType().name().equalsIgnoreCase(avroColumnType.toString())) {\n-        _dataTypeMismatch.addMismatchReason(String\n-            .format(\"The Pinot column: (%s: %s) doesn't match with the column (%s: %s) in input %s schema.\", columnName,\n-                fieldSpec.getDataType().name(), avroColumnSchema.getName(), avroColumnType.toString(),\n-                getInputSchemaType()));\n-      }\n-\n       if (fieldSpec.isSingleValueField()) {\n+        // check data type mismatch\n+        if (!fieldSpec.getDataType().name().equalsIgnoreCase(avroColumnType.toString())) {\n+          getDataTypeMismatchResult().addMismatchReason(String\n+              .format(\"The Pinot column: (%s: %s) doesn't match with the column (%s: %s) in input %s schema.\", columnName,\n+                  fieldSpec.getDataType().name(), avroColumnName, avroColumnType.toString(),\n+                  getInputSchemaType()));\n+        }\n+        // check single-value multi-value mismatch\n         if (avroColumnType.ordinal() < org.apache.avro.Schema.Type.STRING.ordinal()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f09ca9aecd95080949422b302d9f6870f8c033f0"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzU4MzcxMw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                              fieldSpec.getDataType().name(), avroColumnName, avroColumnType.toString(),\n          \n          \n            \n                              fieldSpec.getDataType().name(), avroColumnName, avroColumnType.name(),", "url": "https://github.com/apache/pinot/pull/6009#discussion_r487583713", "createdAt": "2020-09-13T22:12:42Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-plugins/pinot-input-format/pinot-avro-base/src/main/java/org/apache/pinot/plugin/inputformat/avro/AvroIngestionSchemaValidator.java", "diffHunk": "@@ -111,36 +112,56 @@ private void validateSchemas() {\n           }\n         }\n         if (nonNullSchema != null) {\n+          avroColumnSchema = nonNullSchema;\n           avroColumnType = nonNullSchema.getType();\n         }\n       }\n \n-      if (!fieldSpec.getDataType().name().equalsIgnoreCase(avroColumnType.toString())) {\n-        _dataTypeMismatch.addMismatchReason(String\n-            .format(\"The Pinot column: (%s: %s) doesn't match with the column (%s: %s) in input %s schema.\", columnName,\n-                fieldSpec.getDataType().name(), avroColumnSchema.getName(), avroColumnType.toString(),\n-                getInputSchemaType()));\n-      }\n-\n       if (fieldSpec.isSingleValueField()) {\n+        // check data type mismatch\n+        if (!fieldSpec.getDataType().name().equalsIgnoreCase(avroColumnType.toString())) {\n+          getDataTypeMismatchResult().addMismatchReason(String\n+              .format(\"The Pinot column: (%s: %s) doesn't match with the column (%s: %s) in input %s schema.\", columnName,\n+                  fieldSpec.getDataType().name(), avroColumnName, avroColumnType.toString(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f09ca9aecd95080949422b302d9f6870f8c033f0"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzU4Mzk3MA==", "bodyText": "Same here, check SV MV first, then based on that check the data type", "url": "https://github.com/apache/pinot/pull/6009#discussion_r487583970", "createdAt": "2020-09-13T22:15:03Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-plugins/pinot-input-format/pinot-avro-base/src/main/java/org/apache/pinot/plugin/inputformat/avro/AvroIngestionSchemaValidator.java", "diffHunk": "@@ -111,36 +112,56 @@ private void validateSchemas() {\n           }\n         }\n         if (nonNullSchema != null) {\n+          avroColumnSchema = nonNullSchema;\n           avroColumnType = nonNullSchema.getType();\n         }\n       }\n \n-      if (!fieldSpec.getDataType().name().equalsIgnoreCase(avroColumnType.toString())) {\n-        _dataTypeMismatch.addMismatchReason(String\n-            .format(\"The Pinot column: (%s: %s) doesn't match with the column (%s: %s) in input %s schema.\", columnName,\n-                fieldSpec.getDataType().name(), avroColumnSchema.getName(), avroColumnType.toString(),\n-                getInputSchemaType()));\n-      }\n-\n       if (fieldSpec.isSingleValueField()) {\n+        // check data type mismatch\n+        if (!fieldSpec.getDataType().name().equalsIgnoreCase(avroColumnType.toString())) {\n+          getDataTypeMismatchResult().addMismatchReason(String\n+              .format(\"The Pinot column: (%s: %s) doesn't match with the column (%s: %s) in input %s schema.\", columnName,\n+                  fieldSpec.getDataType().name(), avroColumnName, avroColumnType.toString(),\n+                  getInputSchemaType()));\n+        }\n+        // check single-value multi-value mismatch\n         if (avroColumnType.ordinal() < org.apache.avro.Schema.Type.STRING.ordinal()) {\n           // the column is a complex structure\n-          _singleValueMultiValueFieldMismatch.addMismatchReason(String.format(\n-              \"The Pinot column: %s is 'single-value' column but the column: %s from input %s is 'multi-value' column.\",\n-              columnName, avroColumnSchema.getName(), getInputSchemaType()));\n+          getSingleValueMultiValueFieldMismatchResult().addMismatchReason(String\n+              .format(\n+                  \"The Pinot column: %s is 'single-value' column but the column: %s from input %s is 'multi-value' column.\",\n+                  columnName, avroColumnName, getInputSchemaType()));\n         }\n       } else {\n+        // check data type mismatch", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f09ca9aecd95080949422b302d9f6870f8c033f0"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzU4NDE2Nw==", "bodyText": "(nit) cache avroColumnSchema.getElementType().getType() in a local variable?", "url": "https://github.com/apache/pinot/pull/6009#discussion_r487584167", "createdAt": "2020-09-13T22:17:09Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-plugins/pinot-input-format/pinot-avro-base/src/main/java/org/apache/pinot/plugin/inputformat/avro/AvroIngestionSchemaValidator.java", "diffHunk": "@@ -111,36 +112,56 @@ private void validateSchemas() {\n           }\n         }\n         if (nonNullSchema != null) {\n+          avroColumnSchema = nonNullSchema;\n           avroColumnType = nonNullSchema.getType();\n         }\n       }\n \n-      if (!fieldSpec.getDataType().name().equalsIgnoreCase(avroColumnType.toString())) {\n-        _dataTypeMismatch.addMismatchReason(String\n-            .format(\"The Pinot column: (%s: %s) doesn't match with the column (%s: %s) in input %s schema.\", columnName,\n-                fieldSpec.getDataType().name(), avroColumnSchema.getName(), avroColumnType.toString(),\n-                getInputSchemaType()));\n-      }\n-\n       if (fieldSpec.isSingleValueField()) {\n+        // check data type mismatch\n+        if (!fieldSpec.getDataType().name().equalsIgnoreCase(avroColumnType.toString())) {\n+          getDataTypeMismatchResult().addMismatchReason(String\n+              .format(\"The Pinot column: (%s: %s) doesn't match with the column (%s: %s) in input %s schema.\", columnName,\n+                  fieldSpec.getDataType().name(), avroColumnName, avroColumnType.toString(),\n+                  getInputSchemaType()));\n+        }\n+        // check single-value multi-value mismatch\n         if (avroColumnType.ordinal() < org.apache.avro.Schema.Type.STRING.ordinal()) {\n           // the column is a complex structure\n-          _singleValueMultiValueFieldMismatch.addMismatchReason(String.format(\n-              \"The Pinot column: %s is 'single-value' column but the column: %s from input %s is 'multi-value' column.\",\n-              columnName, avroColumnSchema.getName(), getInputSchemaType()));\n+          getSingleValueMultiValueFieldMismatchResult().addMismatchReason(String\n+              .format(\n+                  \"The Pinot column: %s is 'single-value' column but the column: %s from input %s is 'multi-value' column.\",\n+                  columnName, avroColumnName, getInputSchemaType()));\n         }\n       } else {\n+        // check data type mismatch\n+        FieldSpec.DataType dataTypeForMVColumn = AvroUtils.extractFieldDataType(avroColumnField);\n+        if (fieldSpec.getDataType() != dataTypeForMVColumn) {\n+          getDataTypeMismatchResult().addMismatchReason(String\n+              .format(\"The Pinot column: (%s: %s) doesn't match with the column (%s: %s) in input %s schema.\",\n+                  columnName, fieldSpec.getDataType().name(), avroColumnName, dataTypeForMVColumn.name(),\n+                  getInputSchemaType()));\n+        }\n+        // check single-value multi-value mismatch\n         if (avroColumnType.ordinal() >= org.apache.avro.Schema.Type.STRING.ordinal()) {\n           // the column is a complex structure\n-          _singleValueMultiValueFieldMismatch.addMismatchReason(String.format(\n-              \"The Pinot column: %s is 'multi-value' column but the column: %s from input %s schema is 'single-value' column.\",\n-              columnName, avroColumnSchema.getName(), getInputSchemaType()));\n+          getSingleValueMultiValueFieldMismatchResult().addMismatchReason(String\n+              .format(\n+                  \"The Pinot column: %s is 'multi-value' column but the column: %s from input %s schema is 'single-value' column.\",\n+                  columnName, avroColumnName, getInputSchemaType()));\n         }\n+        // check multi-value column structure mismatch\n         if (avroColumnType != org.apache.avro.Schema.Type.ARRAY) {\n           // multi-value column should use array structure for now.\n-          _multiValueStructureMismatch.addMismatchReason(String.format(\n+          getMultiValueStructureMismatchResult().addMismatchReason(String.format(\n               \"The Pinot column: %s is 'multi-value' column but the column: %s from input %s schema is of '%s' type, which should have been of 'array' type.\",\n-              columnName, avroColumnSchema.getName(), getInputSchemaType(), avroColumnType.getName()));\n+              columnName, avroColumnName, getInputSchemaType(), avroColumnType.getName()));\n+        } else if (avroColumnSchema.getElementType().getType().ordinal() < org.apache.avro.Schema.Type.STRING", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f09ca9aecd95080949422b302d9f6870f8c033f0"}, "originalPosition": 71}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg3OTYxNjk5", "url": "https://github.com/apache/pinot/pull/6009#pullrequestreview-487961699", "createdAt": "2020-09-14T16:48:11Z", "commit": {"oid": "f09ca9aecd95080949422b302d9f6870f8c033f0"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxNjo0ODoxMVrOHRd8eQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxNjo0ODoxMVrOHRd8eQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODA3ODQ1Nw==", "bodyText": "Can you update the comment in line 134 to be clearer, or just remove the comment, since the format string below says exactly what the mismatch is.", "url": "https://github.com/apache/pinot/pull/6009#discussion_r488078457", "createdAt": "2020-09-14T16:48:11Z", "author": {"login": "mcvsubbu"}, "path": "pinot-plugins/pinot-input-format/pinot-avro-base/src/main/java/org/apache/pinot/plugin/inputformat/avro/AvroIngestionSchemaValidator.java", "diffHunk": "@@ -111,36 +112,56 @@ private void validateSchemas() {\n           }\n         }\n         if (nonNullSchema != null) {\n+          avroColumnSchema = nonNullSchema;\n           avroColumnType = nonNullSchema.getType();\n         }\n       }\n \n-      if (!fieldSpec.getDataType().name().equalsIgnoreCase(avroColumnType.toString())) {\n-        _dataTypeMismatch.addMismatchReason(String\n-            .format(\"The Pinot column: (%s: %s) doesn't match with the column (%s: %s) in input %s schema.\", columnName,\n-                fieldSpec.getDataType().name(), avroColumnSchema.getName(), avroColumnType.toString(),\n-                getInputSchemaType()));\n-      }\n-\n       if (fieldSpec.isSingleValueField()) {\n+        // check data type mismatch\n+        if (!fieldSpec.getDataType().name().equalsIgnoreCase(avroColumnType.toString())) {\n+          getDataTypeMismatchResult().addMismatchReason(String\n+              .format(\"The Pinot column: (%s: %s) doesn't match with the column (%s: %s) in input %s schema.\", columnName,\n+                  fieldSpec.getDataType().name(), avroColumnName, avroColumnType.toString(),\n+                  getInputSchemaType()));\n+        }\n+        // check single-value multi-value mismatch\n         if (avroColumnType.ordinal() < org.apache.avro.Schema.Type.STRING.ordinal()) {\n           // the column is a complex structure\n-          _singleValueMultiValueFieldMismatch.addMismatchReason(String.format(\n-              \"The Pinot column: %s is 'single-value' column but the column: %s from input %s is 'multi-value' column.\",\n-              columnName, avroColumnSchema.getName(), getInputSchemaType()));\n+          getSingleValueMultiValueFieldMismatchResult().addMismatchReason(String\n+              .format(\n+                  \"The Pinot column: %s is 'single-value' column but the column: %s from input %s is 'multi-value' column.\",\n+                  columnName, avroColumnName, getInputSchemaType()));\n         }\n       } else {\n+        // check data type mismatch\n+        FieldSpec.DataType dataTypeForMVColumn = AvroUtils.extractFieldDataType(avroColumnField);\n+        if (fieldSpec.getDataType() != dataTypeForMVColumn) {\n+          getDataTypeMismatchResult().addMismatchReason(String\n+              .format(\"The Pinot column: (%s: %s) doesn't match with the column (%s: %s) in input %s schema.\",\n+                  columnName, fieldSpec.getDataType().name(), avroColumnName, dataTypeForMVColumn.name(),\n+                  getInputSchemaType()));\n+        }\n+        // check single-value multi-value mismatch\n         if (avroColumnType.ordinal() >= org.apache.avro.Schema.Type.STRING.ordinal()) {\n           // the column is a complex structure\n-          _singleValueMultiValueFieldMismatch.addMismatchReason(String.format(\n-              \"The Pinot column: %s is 'multi-value' column but the column: %s from input %s schema is 'single-value' column.\",\n-              columnName, avroColumnSchema.getName(), getInputSchemaType()));\n+          getSingleValueMultiValueFieldMismatchResult().addMismatchReason(String", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f09ca9aecd95080949422b302d9f6870f8c033f0"}, "originalPosition": 58}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8b4841efc1f793f365ff1437d2e4149d097de481", "author": {"user": null}, "url": "https://github.com/apache/pinot/commit/8b4841efc1f793f365ff1437d2e4149d097de481", "committedDate": "2020-09-14T20:01:11Z", "message": "Address PR comments"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "8dd07778075f9cf559ad6f9541b3479bf0a1155f", "author": {"user": null}, "url": "https://github.com/apache/pinot/commit/8dd07778075f9cf559ad6f9541b3479bf0a1155f", "committedDate": "2020-09-14T19:55:27Z", "message": "Address PR comments"}, "afterCommit": {"oid": "8b4841efc1f793f365ff1437d2e4149d097de481", "author": {"user": null}, "url": "https://github.com/apache/pinot/commit/8b4841efc1f793f365ff1437d2e4149d097de481", "committedDate": "2020-09-14T20:01:11Z", "message": "Address PR comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg4OTU2Mjgx", "url": "https://github.com/apache/pinot/pull/6009#pullrequestreview-488956281", "createdAt": "2020-09-15T18:33:08Z", "commit": {"oid": "8b4841efc1f793f365ff1437d2e4149d097de481"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 27, "cost": 1, "resetAt": "2021-10-28T18:00:02Z"}}}