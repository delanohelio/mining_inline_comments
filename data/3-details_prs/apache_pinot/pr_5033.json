{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY5MzY1ODQ0", "number": 5033, "title": "Set alias name in resultTable schema names", "bodyText": "Sample query\nselect event_name, count(*) as cnt from meetupRsvp group by event_name limit 1\n\nOld response:\n{\n    \"resultTable\": {\n        \"dataSchema\": {\n            \"columnNames\": [\"event_name\", \"count(*)\"],\n            \"columnDataTypes\": [\"STRING\", \"LONG\"]\n        },\n        \"rows\": [\n            [\"Remote Pair Programming Session: Callbacks, Closures, & Higher-Order Functions\", 1]\n        ]\n    },\n    ...\n}\n\nNew  response:\n{\n    \"resultTable\": {\n        \"dataSchema\": {\n            \"columnNames\": [\"event_name\", \"cnt\"],\n            \"columnDataTypes\": [\"STRING\", \"LONG\"]\n        },\n        \"rows\": [\n            [\"Remote Pair Programming Session: Callbacks, Closures, & Higher-Order Functions\", 1]\n        ]\n    },\n   ...\n}\n\nSample query and response:\nselect count(*) as cnt1, sum(rsvp_count) as sum_rsvp_count from meetupRsvp limit 10\n\n{\n    \"resultTable\": {\n        \"dataSchema\": {\n            \"columnDataTypes\": [\"LONG\", \"DOUBLE\"],\n            \"columnNames\": [\"cnt1\", \"sum_rsvp_count\"]\n        },\n        \"rows\": [\n            [1131, 1131.0]\n        ]\n    },\n...\n}", "createdAt": "2020-01-31T01:17:42Z", "url": "https://github.com/apache/pinot/pull/5033", "merged": true, "mergeCommit": {"oid": "f515ae4bdf7fc5b3974f6f477e1f95bedb93eeef"}, "closed": true, "closedAt": "2020-02-04T21:38:14Z", "author": {"login": "xiangfu0"}, "timelineItems": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABb_lpXvABqjI5OTU2MDEzMzU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcBHfB1AH2gAyMzY5MzY1ODQ0OjYxNzk3N2JjOTVmYmI3YWM4OTIwZjlhYjIxYzZlY2VlMGFhMzEyNzg=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "73fb1f64d3b15016cb04c83dfb8535cbabf4885d", "author": {"user": {"login": "xiangfu0", "name": "Xiang Fu"}}, "url": "https://github.com/apache/pinot/commit/73fb1f64d3b15016cb04c83dfb8535cbabf4885d", "committedDate": "2020-01-31T01:14:52Z", "message": "Set alias name in response schema names"}, "afterCommit": {"oid": "d10afbbc338ca16c51c3f4868580ee2b088110f3", "author": {"user": {"login": "xiangfu0", "name": "Xiang Fu"}}, "url": "https://github.com/apache/pinot/commit/d10afbbc338ca16c51c3f4868580ee2b088110f3", "committedDate": "2020-01-31T02:23:34Z", "message": "Set alias name in response schema names"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUyNDU4NTAz", "url": "https://github.com/apache/pinot/pull/5033#pullrequestreview-352458503", "createdAt": "2020-02-03T18:15:53Z", "commit": {"oid": "c4c49db77a41a9f6625a74b46de8d07974a3f73d"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QxODoxNTo1M1rOFk69bA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QxODoyMDo1NVrOFk7G7A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDI1OTA1Mg==", "bodyText": "How about SELECT *?", "url": "https://github.com/apache/pinot/pull/5033#discussion_r374259052", "createdAt": "2020-02-03T18:15:53Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/query/reduce/BrokerReduceService.java", "diffHunk": "@@ -178,7 +185,45 @@ public BrokerResponseNative reduceOnDataTable(BrokerRequest brokerRequest,\n     }\n \n     DataTableReducer dataTableReducer = ResultReducerFactory.getResultReducer(brokerRequest);\n-    dataTableReducer.reduceAndSetResults(tableName, cachedDataSchema, dataTableMap, brokerResponseNative, brokerMetrics);\n+    dataTableReducer\n+        .reduceAndSetResults(tableName, cachedDataSchema, dataTableMap, brokerResponseNative, brokerMetrics);\n+    updateAliasToSchemaName(brokerRequest, brokerResponseNative);\n     return brokerResponseNative;\n   }\n-}\n+\n+  private static void updateAliasToSchemaName(BrokerRequest brokerRequest, BrokerResponseNative brokerResponseNative) {\n+    if (brokerRequest.getPinotQuery() == null) {\n+      return;\n+    }\n+    QueryOptions queryOptions = new QueryOptions(brokerRequest.getQueryOptions());\n+    if (!queryOptions.isResponseFormatSQL()) {\n+      return;\n+    }\n+    DataSchema dataSchema = brokerResponseNative.getResultTable().getDataSchema();\n+    List<Expression> selectList = brokerRequest.getPinotQuery().getSelectList();\n+    String[] columnNames = dataSchema.getColumnNames();\n+    if (columnNames.length != selectList.size()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c4c49db77a41a9f6625a74b46de8d07974a3f73d"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDI1OTM4MA==", "bodyText": "Cache selectList.size()", "url": "https://github.com/apache/pinot/pull/5033#discussion_r374259380", "createdAt": "2020-02-03T18:16:36Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/query/reduce/BrokerReduceService.java", "diffHunk": "@@ -178,7 +185,45 @@ public BrokerResponseNative reduceOnDataTable(BrokerRequest brokerRequest,\n     }\n \n     DataTableReducer dataTableReducer = ResultReducerFactory.getResultReducer(brokerRequest);\n-    dataTableReducer.reduceAndSetResults(tableName, cachedDataSchema, dataTableMap, brokerResponseNative, brokerMetrics);\n+    dataTableReducer\n+        .reduceAndSetResults(tableName, cachedDataSchema, dataTableMap, brokerResponseNative, brokerMetrics);\n+    updateAliasToSchemaName(brokerRequest, brokerResponseNative);\n     return brokerResponseNative;\n   }\n-}\n+\n+  private static void updateAliasToSchemaName(BrokerRequest brokerRequest, BrokerResponseNative brokerResponseNative) {\n+    if (brokerRequest.getPinotQuery() == null) {\n+      return;\n+    }\n+    QueryOptions queryOptions = new QueryOptions(brokerRequest.getQueryOptions());\n+    if (!queryOptions.isResponseFormatSQL()) {\n+      return;\n+    }\n+    DataSchema dataSchema = brokerResponseNative.getResultTable().getDataSchema();\n+    List<Expression> selectList = brokerRequest.getPinotQuery().getSelectList();\n+    String[] columnNames = dataSchema.getColumnNames();\n+    if (columnNames.length != selectList.size()) {\n+      LOGGER.error(\"Response schema size {} is different from number of selection expressions {}\", columnNames.length,\n+          selectList.size());\n+      return;\n+    }\n+    for (int i = 0; i < selectList.size(); i++) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c4c49db77a41a9f6625a74b46de8d07974a3f73d"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDI1OTUwMg==", "bodyText": "Cache selectList.get(i).getFunctionCall(), same for other places", "url": "https://github.com/apache/pinot/pull/5033#discussion_r374259502", "createdAt": "2020-02-03T18:16:53Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/query/reduce/BrokerReduceService.java", "diffHunk": "@@ -178,7 +185,45 @@ public BrokerResponseNative reduceOnDataTable(BrokerRequest brokerRequest,\n     }\n \n     DataTableReducer dataTableReducer = ResultReducerFactory.getResultReducer(brokerRequest);\n-    dataTableReducer.reduceAndSetResults(tableName, cachedDataSchema, dataTableMap, brokerResponseNative, brokerMetrics);\n+    dataTableReducer\n+        .reduceAndSetResults(tableName, cachedDataSchema, dataTableMap, brokerResponseNative, brokerMetrics);\n+    updateAliasToSchemaName(brokerRequest, brokerResponseNative);\n     return brokerResponseNative;\n   }\n-}\n+\n+  private static void updateAliasToSchemaName(BrokerRequest brokerRequest, BrokerResponseNative brokerResponseNative) {\n+    if (brokerRequest.getPinotQuery() == null) {\n+      return;\n+    }\n+    QueryOptions queryOptions = new QueryOptions(brokerRequest.getQueryOptions());\n+    if (!queryOptions.isResponseFormatSQL()) {\n+      return;\n+    }\n+    DataSchema dataSchema = brokerResponseNative.getResultTable().getDataSchema();\n+    List<Expression> selectList = brokerRequest.getPinotQuery().getSelectList();\n+    String[] columnNames = dataSchema.getColumnNames();\n+    if (columnNames.length != selectList.size()) {\n+      LOGGER.error(\"Response schema size {} is different from number of selection expressions {}\", columnNames.length,\n+          selectList.size());\n+      return;\n+    }\n+    for (int i = 0; i < selectList.size(); i++) {\n+      if (selectList.get(i).getFunctionCall() != null && selectList.get(i).getFunctionCall().getOperator()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c4c49db77a41a9f6625a74b46de8d07974a3f73d"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDI2MTQ4NA==", "bodyText": "Can you simplify the logic here and add some comments? Can aliasName be null when AS keyword is found?", "url": "https://github.com/apache/pinot/pull/5033#discussion_r374261484", "createdAt": "2020-02-03T18:20:55Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/query/reduce/BrokerReduceService.java", "diffHunk": "@@ -178,7 +185,45 @@ public BrokerResponseNative reduceOnDataTable(BrokerRequest brokerRequest,\n     }\n \n     DataTableReducer dataTableReducer = ResultReducerFactory.getResultReducer(brokerRequest);\n-    dataTableReducer.reduceAndSetResults(tableName, cachedDataSchema, dataTableMap, brokerResponseNative, brokerMetrics);\n+    dataTableReducer\n+        .reduceAndSetResults(tableName, cachedDataSchema, dataTableMap, brokerResponseNative, brokerMetrics);\n+    updateAliasToSchemaName(brokerRequest, brokerResponseNative);\n     return brokerResponseNative;\n   }\n-}\n+\n+  private static void updateAliasToSchemaName(BrokerRequest brokerRequest, BrokerResponseNative brokerResponseNative) {\n+    if (brokerRequest.getPinotQuery() == null) {\n+      return;\n+    }\n+    QueryOptions queryOptions = new QueryOptions(brokerRequest.getQueryOptions());\n+    if (!queryOptions.isResponseFormatSQL()) {\n+      return;\n+    }\n+    DataSchema dataSchema = brokerResponseNative.getResultTable().getDataSchema();\n+    List<Expression> selectList = brokerRequest.getPinotQuery().getSelectList();\n+    String[] columnNames = dataSchema.getColumnNames();\n+    if (columnNames.length != selectList.size()) {\n+      LOGGER.error(\"Response schema size {} is different from number of selection expressions {}\", columnNames.length,\n+          selectList.size());\n+      return;\n+    }\n+    for (int i = 0; i < selectList.size(); i++) {\n+      if (selectList.get(i).getFunctionCall() != null && selectList.get(i).getFunctionCall().getOperator()\n+          .equalsIgnoreCase(\"AS\")) {\n+        String aliasName = null;\n+        if (selectList.get(i).getFunctionCall().getOperands().get(1).getIdentifier() != null) {\n+          aliasName = selectList.get(i).getFunctionCall().getOperands().get(1).getIdentifier().getName();\n+        }\n+        Literal aliasLiteral = selectList.get(i).getFunctionCall().getOperands().get(1).getLiteral();\n+        if (aliasLiteral != null) {\n+          if (aliasLiteral.isSetStringValue()) {\n+            aliasName = aliasLiteral.getStringValue();\n+          }\n+        }\n+        if (aliasName != null) {\n+          columnNames[i] = aliasName;\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c4c49db77a41a9f6625a74b46de8d07974a3f73d"}, "originalPosition": 69}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b9a92e9b8ff3996311002a1118b9dddb7390cd2b", "author": {"user": {"login": "xiangfu0", "name": "Xiang Fu"}}, "url": "https://github.com/apache/pinot/commit/b9a92e9b8ff3996311002a1118b9dddb7390cd2b", "committedDate": "2020-02-03T21:19:41Z", "message": "Address comments"}, "afterCommit": {"oid": "27b8f5c31e95a9e3eb8a4380021b8bf906472e54", "author": {"user": {"login": "xiangfu0", "name": "Xiang Fu"}}, "url": "https://github.com/apache/pinot/commit/27b8f5c31e95a9e3eb8a4380021b8bf906472e54", "committedDate": "2020-02-03T21:21:34Z", "message": "Address comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUyNjMyNTMx", "url": "https://github.com/apache/pinot/pull/5033#pullrequestreview-352632531", "createdAt": "2020-02-03T23:20:22Z", "commit": {"oid": "27b8f5c31e95a9e3eb8a4380021b8bf906472e54"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QyMzoyMDoyMlrOFlDZiA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QyMzoyNDoxNFrOFlDeuQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDM5NzMyMA==", "bodyText": "What is the SQL standard for AS keyword? Can it work on FUNCTION and LITERAL? If not, we should add sanity check here to block the query. The query should always to valid when it goes to the query engine.", "url": "https://github.com/apache/pinot/pull/5033#discussion_r374397320", "createdAt": "2020-02-03T23:20:22Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-common/src/main/java/org/apache/pinot/pql/parsers/PinotQuery2BrokerRequestConverter.java", "diffHunk": "@@ -120,6 +120,10 @@ private void convertSelectList(PinotQuery pinotQuery, BrokerRequest brokerReques\n     List<AggregationInfo> aggregationInfoList = null;\n     for (Expression expression : pinotQuery.getSelectList()) {\n       ExpressionType type = expression.getType();\n+      if (type == ExpressionType.FUNCTION && expression.getFunctionCall().getOperator().equalsIgnoreCase(SqlKind.AS.toString())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "27b8f5c31e95a9e3eb8a4380021b8bf906472e54"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDM5NzcyMw==", "bodyText": "Please add some comments explaining why this can happen", "url": "https://github.com/apache/pinot/pull/5033#discussion_r374397723", "createdAt": "2020-02-03T23:21:34Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/query/reduce/BrokerReduceService.java", "diffHunk": "@@ -178,7 +188,46 @@ public BrokerResponseNative reduceOnDataTable(BrokerRequest brokerRequest,\n     }\n \n     DataTableReducer dataTableReducer = ResultReducerFactory.getResultReducer(brokerRequest);\n-    dataTableReducer.reduceAndSetResults(tableName, cachedDataSchema, dataTableMap, brokerResponseNative, brokerMetrics);\n+    dataTableReducer\n+        .reduceAndSetResults(tableName, cachedDataSchema, dataTableMap, brokerResponseNative, brokerMetrics);\n+    updateAliasToSchemaName(brokerRequest, brokerResponseNative);\n     return brokerResponseNative;\n   }\n-}\n+\n+  private static void updateAliasToSchemaName(BrokerRequest brokerRequest, BrokerResponseNative brokerResponseNative) {\n+    if (brokerRequest.getPinotQuery() == null) {\n+      return;\n+    }\n+    QueryOptions queryOptions = new QueryOptions(brokerRequest.getQueryOptions());\n+    if (!queryOptions.isResponseFormatSQL()) {\n+      return;\n+    }\n+    DataSchema dataSchema = brokerResponseNative.getResultTable().getDataSchema();\n+    List<Expression> selectList = brokerRequest.getPinotQuery().getSelectList();\n+    String[] columnNames = dataSchema.getColumnNames();\n+    int selectListSize = selectList.size();\n+    if (columnNames.length != selectListSize) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "27b8f5c31e95a9e3eb8a4380021b8bf906472e54"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDM5ODY0OQ==", "bodyText": "We should not perform sanity check here, but when we compile the query. At this point, alias should always exist and should always be identifier.", "url": "https://github.com/apache/pinot/pull/5033#discussion_r374398649", "createdAt": "2020-02-03T23:24:14Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/query/reduce/BrokerReduceService.java", "diffHunk": "@@ -178,7 +188,46 @@ public BrokerResponseNative reduceOnDataTable(BrokerRequest brokerRequest,\n     }\n \n     DataTableReducer dataTableReducer = ResultReducerFactory.getResultReducer(brokerRequest);\n-    dataTableReducer.reduceAndSetResults(tableName, cachedDataSchema, dataTableMap, brokerResponseNative, brokerMetrics);\n+    dataTableReducer\n+        .reduceAndSetResults(tableName, cachedDataSchema, dataTableMap, brokerResponseNative, brokerMetrics);\n+    updateAliasToSchemaName(brokerRequest, brokerResponseNative);\n     return brokerResponseNative;\n   }\n-}\n+\n+  private static void updateAliasToSchemaName(BrokerRequest brokerRequest, BrokerResponseNative brokerResponseNative) {\n+    if (brokerRequest.getPinotQuery() == null) {\n+      return;\n+    }\n+    QueryOptions queryOptions = new QueryOptions(brokerRequest.getQueryOptions());\n+    if (!queryOptions.isResponseFormatSQL()) {\n+      return;\n+    }\n+    DataSchema dataSchema = brokerResponseNative.getResultTable().getDataSchema();\n+    List<Expression> selectList = brokerRequest.getPinotQuery().getSelectList();\n+    String[] columnNames = dataSchema.getColumnNames();\n+    int selectListSize = selectList.size();\n+    if (columnNames.length != selectListSize) {\n+      return;\n+    }\n+    for (int i = 0; i < selectListSize; i++) {\n+      Function selectFunc = selectList.get(i).getFunctionCall();\n+      if (selectFunc != null && selectFunc.getOperator()\n+          .equalsIgnoreCase(SqlKind.AS.toString())) {\n+        String aliasName = null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "27b8f5c31e95a9e3eb8a4380021b8bf906472e54"}, "originalPosition": 65}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "846b4d66884d1830abbc8e188b667a828e703114", "author": {"user": {"login": "xiangfu0", "name": "Xiang Fu"}}, "url": "https://github.com/apache/pinot/commit/846b4d66884d1830abbc8e188b667a828e703114", "committedDate": "2020-02-03T23:49:14Z", "message": "Set alias name in response schema names"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1ffad457fd993b225658039dd7d74161c042a593", "author": {"user": {"login": "xiangfu0", "name": "Xiang Fu"}}, "url": "https://github.com/apache/pinot/commit/1ffad457fd993b225658039dd7d74161c042a593", "committedDate": "2020-02-03T23:49:14Z", "message": "Adding test for cast with reduce"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5464c79118070fe0ccbf4b3712bc7cf47b1625d5", "author": {"user": {"login": "xiangfu0", "name": "Xiang Fu"}}, "url": "https://github.com/apache/pinot/commit/5464c79118070fe0ccbf4b3712bc7cf47b1625d5", "committedDate": "2020-02-03T23:50:27Z", "message": "Address comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c7c2c02a6d9005f024b302108556de8c145848b0", "author": {"user": {"login": "xiangfu0", "name": "Xiang Fu"}}, "url": "https://github.com/apache/pinot/commit/c7c2c02a6d9005f024b302108556de8c145848b0", "committedDate": "2020-02-03T23:52:23Z", "message": "Address comments"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "6cfbcaf924a9226dd3f719e036cd5d2c0edaa54c", "author": {"user": {"login": "xiangfu0", "name": "Xiang Fu"}}, "url": "https://github.com/apache/pinot/commit/6cfbcaf924a9226dd3f719e036cd5d2c0edaa54c", "committedDate": "2020-02-03T23:48:43Z", "message": "Address comments"}, "afterCommit": {"oid": "c7c2c02a6d9005f024b302108556de8c145848b0", "author": {"user": {"login": "xiangfu0", "name": "Xiang Fu"}}, "url": "https://github.com/apache/pinot/commit/c7c2c02a6d9005f024b302108556de8c145848b0", "committedDate": "2020-02-03T23:52:23Z", "message": "Address comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUzMTk1NjI4", "url": "https://github.com/apache/pinot/pull/5033#pullrequestreview-353195628", "createdAt": "2020-02-04T18:18:00Z", "commit": {"oid": "c7c2c02a6d9005f024b302108556de8c145848b0"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQxODoxODowMFrOFleZXA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQxODoxODowOFrOFleZkw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDgzOTY0NA==", "bodyText": "Remove the unused logger", "url": "https://github.com/apache/pinot/pull/5033#discussion_r374839644", "createdAt": "2020-02-04T18:18:00Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/query/reduce/BrokerReduceService.java", "diffHunk": "@@ -43,6 +51,8 @@\n @ThreadSafe\n public class BrokerReduceService {\n \n+  private static final Logger LOGGER = LoggerFactory.getLogger(BrokerReduceService.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c7c2c02a6d9005f024b302108556de8c145848b0"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDgzOTY5OQ==", "bodyText": "(nit) new line here", "url": "https://github.com/apache/pinot/pull/5033#discussion_r374839699", "createdAt": "2020-02-04T18:18:08Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/query/reduce/BrokerReduceService.java", "diffHunk": "@@ -178,7 +188,34 @@ public BrokerResponseNative reduceOnDataTable(BrokerRequest brokerRequest,\n     }\n \n     DataTableReducer dataTableReducer = ResultReducerFactory.getResultReducer(brokerRequest);\n-    dataTableReducer.reduceAndSetResults(tableName, cachedDataSchema, dataTableMap, brokerResponseNative, brokerMetrics);\n+    dataTableReducer\n+        .reduceAndSetResults(tableName, cachedDataSchema, dataTableMap, brokerResponseNative, brokerMetrics);\n+    updateAliasToSchemaName(brokerRequest, brokerResponseNative);\n     return brokerResponseNative;\n   }\n-}\n+\n+  private static void updateAliasToSchemaName(BrokerRequest brokerRequest, BrokerResponseNative brokerResponseNative) {\n+    if (brokerRequest.getPinotQuery() == null) {\n+      return;\n+    }\n+    QueryOptions queryOptions = new QueryOptions(brokerRequest.getQueryOptions());\n+    if (!queryOptions.isResponseFormatSQL()) {\n+      return;\n+    }\n+    DataSchema dataSchema = brokerResponseNative.getResultTable().getDataSchema();\n+    List<Expression> selectList = brokerRequest.getPinotQuery().getSelectList();\n+    String[] columnNames = dataSchema.getColumnNames();\n+    int selectListSize = selectList.size();\n+    // For query like `SELECT *`, we skip alias update.\n+    if (columnNames.length != selectListSize) {\n+      return;\n+    }\n+    for (int i = 0; i < selectListSize; i++) {\n+      Function selectFunc = selectList.get(i).getFunctionCall();\n+      if (selectFunc != null && selectFunc.getOperator()\n+          .equalsIgnoreCase(SqlKind.AS.toString())) {\n+        columnNames[i] = selectFunc.getOperands().get(1).getIdentifier().getName();\n+      }\n+    }\n+  }\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c7c2c02a6d9005f024b302108556de8c145848b0"}, "originalPosition": 70}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "617977bc95fbb7ac8920f9ab21c6ecee0aa31278", "author": {"user": {"login": "xiangfu0", "name": "Xiang Fu"}}, "url": "https://github.com/apache/pinot/commit/617977bc95fbb7ac8920f9ab21c6ecee0aa31278", "committedDate": "2020-02-04T20:23:14Z", "message": "Address comments"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1562, "cost": 1, "resetAt": "2021-10-28T18:00:02Z"}}}