{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc4MDgwOTI0", "number": 5086, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQyMzo1MDozMlrODjSO_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQyMzo1MDozMlrODjSO_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4MzI1NTAwOnYy", "diffSide": "LEFT", "path": "pinot-core/src/main/java/org/apache/pinot/core/segment/creator/impl/stats/StringColumnPreIndexStatsCollector.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQyMzo1MDozMlrOFvAk7g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQyMzo1Mjo1MFrOFvAnoQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDgzNjg0Ng==", "bodyText": "Why this change of not using getDefaultNullValue()?", "url": "https://github.com/apache/pinot/pull/5086#discussion_r384836846", "createdAt": "2020-02-26T23:50:32Z", "author": {"login": "siddharthteotia"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/segment/creator/impl/stats/StringColumnPreIndexStatsCollector.java", "diffHunk": "@@ -26,124 +26,82 @@\n \n \n public class StringColumnPreIndexStatsCollector extends AbstractColumnStatisticsCollector {\n-  private String min;\n-  private String max;\n+  private final ObjectSet<String> _values = new ObjectOpenHashSet<>(INITIAL_HASH_SET_SIZE);\n \n-  private int smallestStringLength = Integer.MAX_VALUE;\n-  private int longestStringLength = 0;\n-  private final ObjectSet<String> rawStringSet;\n-  private final ObjectSet<String> aggregatedStringSet;\n-  private String[] sortedStringList;\n-  private boolean sealed = false;\n+  private int _minLength = Integer.MAX_VALUE;\n+  private int _maxLength = 0;\n+  private String[] _sortedValues;\n+  private boolean _sealed = false;\n \n   public StringColumnPreIndexStatsCollector(String column, StatsCollectorConfig statsCollectorConfig) {\n     super(column, statsCollectorConfig);\n-    rawStringSet = new ObjectOpenHashSet<>(INITIAL_HASH_SET_SIZE);\n-    aggregatedStringSet = new ObjectOpenHashSet<>(INITIAL_HASH_SET_SIZE);\n   }\n \n-  /**\n-   * Collect statistics for the given entry.\n-   * - Add it to the passed in set (which could be raw or aggregated)\n-   * - Update maximum number of values for Multi-valued entries\n-   * - Update Total number of entries\n-   * - Check if entry is sorted.\n-   * @param entry\n-   * @param set\n-   */\n-  private void collectEntry(Object entry, ObjectSet<String> set) {\n-\n+  @Override\n+  public void collect(Object entry) {\n     if (entry instanceof Object[]) {\n-      for (final Object e : (Object[]) entry) {\n-        String value = e.toString();\n-        set.add(value);\n-\n-        int valueLength = StringUtil.encodeUtf8(value).length;\n-        smallestStringLength = Math.min(smallestStringLength, valueLength);\n-        longestStringLength = Math.max(longestStringLength, valueLength);\n-      }\n-      if (maxNumberOfMultiValues < ((Object[]) entry).length) {\n-        maxNumberOfMultiValues = ((Object[]) entry).length;\n+      Object[] values = (Object[]) entry;\n+      for (Object obj : values) {\n+        String value = (String) obj;\n+        _values.add(value);\n+\n+        int length = StringUtil.encodeUtf8(value).length;\n+        _minLength = Math.min(_minLength, length);\n+        _maxLength = Math.max(_maxLength, length);\n       }\n-      updateTotalNumberOfEntries((Object[]) entry);\n-    } else {\n \n-      String value;\n-      if (entry != null) {\n-        value = entry.toString();\n-      } else {\n-        value = fieldSpec.getDefaultNullValue().toString();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "feeaccc3a76e1c750bca2bf6885d385ed1743497"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDgzNzUzNw==", "bodyText": "Null values are handled by NullValueTransformer. Here we will never get null entries.", "url": "https://github.com/apache/pinot/pull/5086#discussion_r384837537", "createdAt": "2020-02-26T23:52:50Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/segment/creator/impl/stats/StringColumnPreIndexStatsCollector.java", "diffHunk": "@@ -26,124 +26,82 @@\n \n \n public class StringColumnPreIndexStatsCollector extends AbstractColumnStatisticsCollector {\n-  private String min;\n-  private String max;\n+  private final ObjectSet<String> _values = new ObjectOpenHashSet<>(INITIAL_HASH_SET_SIZE);\n \n-  private int smallestStringLength = Integer.MAX_VALUE;\n-  private int longestStringLength = 0;\n-  private final ObjectSet<String> rawStringSet;\n-  private final ObjectSet<String> aggregatedStringSet;\n-  private String[] sortedStringList;\n-  private boolean sealed = false;\n+  private int _minLength = Integer.MAX_VALUE;\n+  private int _maxLength = 0;\n+  private String[] _sortedValues;\n+  private boolean _sealed = false;\n \n   public StringColumnPreIndexStatsCollector(String column, StatsCollectorConfig statsCollectorConfig) {\n     super(column, statsCollectorConfig);\n-    rawStringSet = new ObjectOpenHashSet<>(INITIAL_HASH_SET_SIZE);\n-    aggregatedStringSet = new ObjectOpenHashSet<>(INITIAL_HASH_SET_SIZE);\n   }\n \n-  /**\n-   * Collect statistics for the given entry.\n-   * - Add it to the passed in set (which could be raw or aggregated)\n-   * - Update maximum number of values for Multi-valued entries\n-   * - Update Total number of entries\n-   * - Check if entry is sorted.\n-   * @param entry\n-   * @param set\n-   */\n-  private void collectEntry(Object entry, ObjectSet<String> set) {\n-\n+  @Override\n+  public void collect(Object entry) {\n     if (entry instanceof Object[]) {\n-      for (final Object e : (Object[]) entry) {\n-        String value = e.toString();\n-        set.add(value);\n-\n-        int valueLength = StringUtil.encodeUtf8(value).length;\n-        smallestStringLength = Math.min(smallestStringLength, valueLength);\n-        longestStringLength = Math.max(longestStringLength, valueLength);\n-      }\n-      if (maxNumberOfMultiValues < ((Object[]) entry).length) {\n-        maxNumberOfMultiValues = ((Object[]) entry).length;\n+      Object[] values = (Object[]) entry;\n+      for (Object obj : values) {\n+        String value = (String) obj;\n+        _values.add(value);\n+\n+        int length = StringUtil.encodeUtf8(value).length;\n+        _minLength = Math.min(_minLength, length);\n+        _maxLength = Math.max(_maxLength, length);\n       }\n-      updateTotalNumberOfEntries((Object[]) entry);\n-    } else {\n \n-      String value;\n-      if (entry != null) {\n-        value = entry.toString();\n-      } else {\n-        value = fieldSpec.getDefaultNullValue().toString();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDgzNjg0Ng=="}, "originalCommit": {"oid": "feeaccc3a76e1c750bca2bf6885d385ed1743497"}, "originalPosition": 65}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3472, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}