{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc1MzAxNjU4", "number": 5070, "title": "Support non-literal expressions for right-side operand in predicate comparison", "bodyText": "For operators:  =,<>, >, >=, <, <=, Pinot only supports literal on right side, but supports expressions on left side.\nSo this change overwrites the predicate by moving right side to left side with minus operator.\nE.g.,\nWHERE a > b =>WHERE a - b > 0\nWHERE a = b + 10 => WHERE a - (b + 10) = 0\nWHERE 10 = b => WHERE b=10\nCertain optimizations are not done:\nIdeally we should convert WHERE a -10 =0 => WHERE a =10 to leverage index.", "createdAt": "2020-02-14T09:53:39Z", "url": "https://github.com/apache/pinot/pull/5070", "merged": true, "mergeCommit": {"oid": "3126d56f7b4688f03bf1afdd9d13ff991376a762"}, "closed": true, "closedAt": "2020-02-26T19:27:10Z", "author": {"login": "xiangfu0"}, "timelineItems": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcEgs1pgBqjMwNDA3ODQ0NTE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcIJMCNAFqTM2NTA0MTk1Mg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "2c766fe92a069177437fc931bb2099f19c684ad2", "author": {"user": {"login": "xiangfu0", "name": "Xiang Fu"}}, "url": "https://github.com/apache/pinot/commit/2c766fe92a069177437fc931bb2099f19c684ad2", "committedDate": "2020-02-15T08:08:24Z", "message": "Adding more sql tests"}, "afterCommit": {"oid": "557ad7c290ce926e7af1ac356494f10cdf4c6761", "author": {"user": {"login": "xiangfu0", "name": "Xiang Fu"}}, "url": "https://github.com/apache/pinot/commit/557ad7c290ce926e7af1ac356494f10cdf4c6761", "committedDate": "2020-02-15T09:27:30Z", "message": "Adding more sql tests"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYzOTEyNjY0", "url": "https://github.com/apache/pinot/pull/5070#pullrequestreview-363912664", "createdAt": "2020-02-25T07:15:51Z", "commit": {"oid": "557ad7c290ce926e7af1ac356494f10cdf4c6761"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY0NDM1ODA0", "url": "https://github.com/apache/pinot/pull/5070#pullrequestreview-364435804", "createdAt": "2020-02-25T20:46:51Z", "commit": {"oid": "557ad7c290ce926e7af1ac356494f10cdf4c6761"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQyMDo0Njo1MVrOFuUniw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQyMTowMjowNVrOFuVDkw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDExNjYxOQ==", "bodyText": "Should opposite of GREATER_THAN be LESS_THAN_OR_EQUAL?", "url": "https://github.com/apache/pinot/pull/5070#discussion_r384116619", "createdAt": "2020-02-25T20:46:51Z", "author": {"login": "mayankshriv"}, "path": "pinot-common/src/main/java/org/apache/pinot/sql/parsers/CalciteSqlParser.java", "diffHunk": "@@ -289,6 +289,91 @@ private static PinotQuery compileCalciteSqlToPinotQuery(String sql) {\n     return pinotQuery;\n   }\n \n+  // This method converts a predicate expression to the what Pinot could evaluate.\n+  // For comparison expression, left operand could be any expression, but right operand only\n+  // supports literal.\n+  // E.g. 'WHERE a > b' will be updated to 'WHERE a - b > 0'\n+  private static Expression updateComparisonPredicate(Expression expression) {\n+    Function functionCall = expression.getFunctionCall();\n+    if (functionCall != null) {\n+      SqlKind sqlKind = SqlKind.OTHER_FUNCTION;\n+      try {\n+        sqlKind = SqlKind.valueOf(functionCall.getOperator().toUpperCase());\n+      } catch (Exception e) {\n+        // Do nothing\n+      }\n+      switch (sqlKind) {\n+        case EQUALS:\n+        case NOT_EQUALS:\n+        case GREATER_THAN:\n+        case GREATER_THAN_OR_EQUAL:\n+        case LESS_THAN:\n+        case LESS_THAN_OR_EQUAL:\n+          // Handle predicate like 'WHERE 10=a'\n+          if (functionCall.getOperands().get(0).getLiteral() != null) {\n+            functionCall.setOperator(getOppositeOperator(functionCall.getOperator()));\n+            List<Expression> oldOperands = functionCall.getOperands();\n+            Expression tempExpr = oldOperands.get(0);\n+            oldOperands.set(0, oldOperands.get(1));\n+            oldOperands.set(1, tempExpr);\n+          }\n+          if (functionCall.getOperands().get(1).getLiteral() != null) {\n+            return expression;\n+          }\n+          Expression comparisonFunction = RequestUtils.getFunctionExpression(functionCall.getOperator());\n+          List<Expression> exprList = new ArrayList<>();\n+          exprList.add(getLeftOperand(functionCall));\n+          exprList.add(RequestUtils.getLiteralExpression(0));\n+          comparisonFunction.getFunctionCall().setOperands(exprList);\n+          return comparisonFunction;\n+        default:\n+          List<Expression> operands = functionCall.getOperands();\n+          List<Expression> newOperands = new ArrayList<>();\n+          for (int i = 0; i < operands.size(); i++) {\n+            newOperands.add(updateComparisonPredicate(operands.get(i)));\n+          }\n+          functionCall.setOperands(newOperands);\n+      }\n+    }\n+    return expression;\n+  }\n+\n+  private static String getOppositeOperator(String operator) {\n+    switch (operator.toUpperCase()) {\n+      case \"GREATER_THAN\":", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "557ad7c290ce926e7af1ac356494f10cdf4c6761"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDExNzE1NQ==", "bodyText": "Probably better to model this as a query re-write phase, so all re-writes can be done in a standardized way?", "url": "https://github.com/apache/pinot/pull/5070#discussion_r384117155", "createdAt": "2020-02-25T20:47:56Z", "author": {"login": "mayankshriv"}, "path": "pinot-common/src/main/java/org/apache/pinot/sql/parsers/CalciteSqlParser.java", "diffHunk": "@@ -289,6 +289,91 @@ private static PinotQuery compileCalciteSqlToPinotQuery(String sql) {\n     return pinotQuery;\n   }\n \n+  // This method converts a predicate expression to the what Pinot could evaluate.\n+  // For comparison expression, left operand could be any expression, but right operand only\n+  // supports literal.\n+  // E.g. 'WHERE a > b' will be updated to 'WHERE a - b > 0'\n+  private static Expression updateComparisonPredicate(Expression expression) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "557ad7c290ce926e7af1ac356494f10cdf4c6761"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDEyMzc5NQ==", "bodyText": "Does the code handle more complex expressions such as foo1(bar1(a-b)) <= foo2(bar2(c/d-e)? If so, let's add tests for those. If not, what's the plan there? Would it ever support those cases?", "url": "https://github.com/apache/pinot/pull/5070#discussion_r384123795", "createdAt": "2020-02-25T21:02:05Z", "author": {"login": "mayankshriv"}, "path": "pinot-common/src/test/java/org/apache/pinot/sql/parsers/CalciteSqlCompilerTest.java", "diffHunk": "@@ -118,6 +118,56 @@ public void testFilterCaluses() {\n     Assert.assertEquals(func.getOperands().get(4).getLiteral().getLongValue(), 17L);\n   }\n \n+  @Test\n+  public void testFilterCalusesWithRightExpression() {\n+    PinotQuery pinotQuery = CalciteSqlParser.compileToPinotQuery(\"select * from vegetables where a > b\");\n+    Function func = pinotQuery.getFilterExpression().getFunctionCall();\n+    Assert.assertEquals(func.getOperator(), SqlKind.GREATER_THAN.name());\n+    Assert.assertEquals(func.getOperands().get(0).getFunctionCall().getOperator(), \"MINUS\");\n+    Assert.assertEquals(func.getOperands().get(0).getFunctionCall().getOperands().get(0).getIdentifier().getName(), \"a\");\n+    Assert.assertEquals(func.getOperands().get(0).getFunctionCall().getOperands().get(1).getIdentifier().getName(), \"b\");\n+    Assert.assertEquals(func.getOperands().get(1).getLiteral().getLongValue(), 0L);\n+    pinotQuery = CalciteSqlParser.compileToPinotQuery(\"select * from vegetables where 0 < a-b\");\n+    func = pinotQuery.getFilterExpression().getFunctionCall();\n+    Assert.assertEquals(func.getOperator(), SqlKind.GREATER_THAN.name());\n+    Assert.assertEquals(func.getOperands().get(0).getFunctionCall().getOperator(), \"MINUS\");\n+    Assert.assertEquals(func.getOperands().get(0).getFunctionCall().getOperands().get(0).getIdentifier().getName(), \"a\");\n+    Assert.assertEquals(func.getOperands().get(0).getFunctionCall().getOperands().get(1).getIdentifier().getName(), \"b\");\n+    Assert.assertEquals(func.getOperands().get(1).getLiteral().getLongValue(), 0L);\n+\n+\n+    pinotQuery = CalciteSqlParser.compileToPinotQuery(\"select * from vegetables where b < 100 + c\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "557ad7c290ce926e7af1ac356494f10cdf4c6761"}, "originalPosition": 43}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9f44cab6bcba490a269e1cee2fc90642181f32ff", "author": {"user": {"login": "xiangfu0", "name": "Xiang Fu"}}, "url": "https://github.com/apache/pinot/commit/9f44cab6bcba490a269e1cee2fc90642181f32ff", "committedDate": "2020-02-25T22:36:46Z", "message": "Update predicate expression"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fd9b886cf2e4e7032a8ac533af977d13135ae801", "author": {"user": {"login": "xiangfu0", "name": "Xiang Fu"}}, "url": "https://github.com/apache/pinot/commit/fd9b886cf2e4e7032a8ac533af977d13135ae801", "committedDate": "2020-02-25T22:36:46Z", "message": "Support non-literal expression in right side of comparison operators"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b0f6ec0f04918ca168ab6975297e188d1baa5192", "author": {"user": {"login": "xiangfu0", "name": "Xiang Fu"}}, "url": "https://github.com/apache/pinot/commit/b0f6ec0f04918ca168ab6975297e188d1baa5192", "committedDate": "2020-02-25T22:36:46Z", "message": "Support case like WHERE 0=b"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "65cac915407fc69af0ad425aca9f83c3312ce9ef", "author": {"user": {"login": "xiangfu0", "name": "Xiang Fu"}}, "url": "https://github.com/apache/pinot/commit/65cac915407fc69af0ad425aca9f83c3312ce9ef", "committedDate": "2020-02-25T22:36:46Z", "message": "Adding more sql tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b85abfd6e793f29be49a7a6ccf03d857e17340b8", "author": {"user": {"login": "xiangfu0", "name": "Xiang Fu"}}, "url": "https://github.com/apache/pinot/commit/b85abfd6e793f29be49a7a6ccf03d857e17340b8", "committedDate": "2020-02-25T22:36:46Z", "message": "Address comments"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "47f0e8b335ca25c284ad6d51fbb6a6783698d178", "author": {"user": {"login": "xiangfu0", "name": "Xiang Fu"}}, "url": "https://github.com/apache/pinot/commit/47f0e8b335ca25c284ad6d51fbb6a6783698d178", "committedDate": "2020-02-25T22:36:28Z", "message": "Address comments"}, "afterCommit": {"oid": "b85abfd6e793f29be49a7a6ccf03d857e17340b8", "author": {"user": {"login": "xiangfu0", "name": "Xiang Fu"}}, "url": "https://github.com/apache/pinot/commit/b85abfd6e793f29be49a7a6ccf03d857e17340b8", "committedDate": "2020-02-25T22:36:46Z", "message": "Address comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY1MDQxOTUy", "url": "https://github.com/apache/pinot/pull/5070#pullrequestreview-365041952", "createdAt": "2020-02-26T16:19:46Z", "commit": {"oid": "b85abfd6e793f29be49a7a6ccf03d857e17340b8"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1285, "cost": 1, "resetAt": "2021-10-28T18:00:02Z"}}}