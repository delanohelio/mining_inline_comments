{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY4NTkxODI4", "number": 5875, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxOTo0MToyN1rOEaH5Ww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxOTo0NDo0OVrOEaH9Zg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1ODI3ODAzOnYy", "diffSide": "RIGHT", "path": "pinot-controller/src/main/java/org/apache/pinot/controller/recommender/rules/impl/InvertedSortedIndexJointRule.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxOTo0MToyN1rOHDWbiA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQyMTowNTozM1rOHDZGLA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzI3NTI3Mg==", "bodyText": "Maybe we should remove this comments?", "url": "https://github.com/apache/pinot/pull/5875#discussion_r473275272", "createdAt": "2020-08-19T19:41:27Z", "author": {"login": "jackjlli"}, "path": "pinot-controller/src/main/java/org/apache/pinot/controller/recommender/rules/impl/InvertedSortedIndexJointRule.java", "diffHunk": "@@ -197,28 +194,48 @@ public PredicateParseResult findOptimalCombination(List<List<PredicateParseResul\n    * {@link PredicateParseResult#getnESI()} the nESI before applying any index\n    * {@link PredicateParseResult#getnESIWithIdx()} the estimated nESI after applying optimal indices\n    */\n-  public PredicateParseResult evaluateCombination(int n, int r, List<List<PredicateParseResult>> parsedQuery) {\n-    List<int[]> combinationIntArrays = generateCombinations(n, r);\n-    LOGGER.debug(\"combinationIntArrays {}\", combinationIntArrays);\n+  public PredicateParseResult evaluateCombination(final int n, final int r, List<List<PredicateParseResult>> parsedQuery) {\n+    FixedLenBitset usedCols = new FixedLenBitset(n);\n+    parsedQuery.forEach(list -> list.stream()\n+        .filter(predicateParseResult -> (predicateParseResult.getCandidateDims().getCardinality() <= r))\n+        .forEach(predicateParseResult -> usedCols.union(predicateParseResult.getCandidateDims())));\n+    LOGGER.debug(\"totalUsed {}\", usedCols.getCardinality());\n+\n+    List<Integer> usedColIDs = usedCols.getOffsets();\n+    int nCapped = usedColIDs.size();\n+    int rCapped = Math.min(r, nCapped);\n+\n+    int[] idToColID = new int[nCapped];\n+    for (int i = 0; i < nCapped; i++) {\n+      idToColID[i] = usedColIDs.get(i);\n+    }\n+\n \n     // Enumerate all possible combinations of r-sized set, which will be applied indices on\n-    List<FixedLenBitset> combinations = combinationIntArrays.parallelStream().map(combinationIntArray -> {\n-      FixedLenBitset indices = new FixedLenBitset(n);\n-      for (int j = 0; j < r; j++) {\n-        indices.add(combinationIntArray[j]);\n-      }\n-      return indices;\n-    }).collect(Collectors.toList());\n+    List<int[]> combinationIntArrays = generateCombinations(nCapped, rCapped);\n+\n+//     Enumerate all possible combinations of r-sized set, which will be applied indices on\n+//    List<FixedLenBitset> combinations = combinationIntArrays.parallelStream().map(combinationIntArray -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dc4e5fc19059f1f50ed6eca312dfe7599b6255ef"}, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzMxODk1Ng==", "bodyText": "Done", "url": "https://github.com/apache/pinot/pull/5875#discussion_r473318956", "createdAt": "2020-08-19T21:05:33Z", "author": {"login": "jasperjiaguo"}, "path": "pinot-controller/src/main/java/org/apache/pinot/controller/recommender/rules/impl/InvertedSortedIndexJointRule.java", "diffHunk": "@@ -197,28 +194,48 @@ public PredicateParseResult findOptimalCombination(List<List<PredicateParseResul\n    * {@link PredicateParseResult#getnESI()} the nESI before applying any index\n    * {@link PredicateParseResult#getnESIWithIdx()} the estimated nESI after applying optimal indices\n    */\n-  public PredicateParseResult evaluateCombination(int n, int r, List<List<PredicateParseResult>> parsedQuery) {\n-    List<int[]> combinationIntArrays = generateCombinations(n, r);\n-    LOGGER.debug(\"combinationIntArrays {}\", combinationIntArrays);\n+  public PredicateParseResult evaluateCombination(final int n, final int r, List<List<PredicateParseResult>> parsedQuery) {\n+    FixedLenBitset usedCols = new FixedLenBitset(n);\n+    parsedQuery.forEach(list -> list.stream()\n+        .filter(predicateParseResult -> (predicateParseResult.getCandidateDims().getCardinality() <= r))\n+        .forEach(predicateParseResult -> usedCols.union(predicateParseResult.getCandidateDims())));\n+    LOGGER.debug(\"totalUsed {}\", usedCols.getCardinality());\n+\n+    List<Integer> usedColIDs = usedCols.getOffsets();\n+    int nCapped = usedColIDs.size();\n+    int rCapped = Math.min(r, nCapped);\n+\n+    int[] idToColID = new int[nCapped];\n+    for (int i = 0; i < nCapped; i++) {\n+      idToColID[i] = usedColIDs.get(i);\n+    }\n+\n \n     // Enumerate all possible combinations of r-sized set, which will be applied indices on\n-    List<FixedLenBitset> combinations = combinationIntArrays.parallelStream().map(combinationIntArray -> {\n-      FixedLenBitset indices = new FixedLenBitset(n);\n-      for (int j = 0; j < r; j++) {\n-        indices.add(combinationIntArray[j]);\n-      }\n-      return indices;\n-    }).collect(Collectors.toList());\n+    List<int[]> combinationIntArrays = generateCombinations(nCapped, rCapped);\n+\n+//     Enumerate all possible combinations of r-sized set, which will be applied indices on\n+//    List<FixedLenBitset> combinations = combinationIntArrays.parallelStream().map(combinationIntArray -> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzI3NTI3Mg=="}, "originalCommit": {"oid": "dc4e5fc19059f1f50ed6eca312dfe7599b6255ef"}, "originalPosition": 88}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1ODI4NjEwOnYy", "diffSide": "RIGHT", "path": "pinot-controller/src/main/java/org/apache/pinot/controller/recommender/rules/io/params/RecommenderConstants.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxOTo0NDowNlrOHDWgjg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQyMTowNTozMFrOHDZF-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzI3NjU1OA==", "bodyText": "Can we add the link of this class to the doc so that we know this is the default values?", "url": "https://github.com/apache/pinot/pull/5875#discussion_r473276558", "createdAt": "2020-08-19T19:44:06Z", "author": {"login": "jackjlli"}, "path": "pinot-controller/src/main/java/org/apache/pinot/controller/recommender/rules/io/params/RecommenderConstants.java", "diffHunk": "@@ -32,7 +32,7 @@\n     public static final double DEFAULT_THRESHOLD_MIN_AND_PREDICATE_INCREMENTAL_VOTE = 0.6d;\n     public static final double DEFAULT_THRESHOLD_RATIO_MIN_AND_PREDICATE_TOP_CANDIDATES = 0.8d;\n     public static final double DEFAULT_THRESHOLD_RATIO_MIN_GAIN_DIFF_BETWEEN_ITERATION = 0.05d;\n-    public static final int DEFAULT_MAX_NUM_ITERATION_WITHOUT_GAIN = 3;\n+    public static final int DEFAULT_MAX_NUM_ITERATION_WITHOUT_GAIN = 2;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dc4e5fc19059f1f50ed6eca312dfe7599b6255ef"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzMxODkwNA==", "bodyText": "Sure", "url": "https://github.com/apache/pinot/pull/5875#discussion_r473318904", "createdAt": "2020-08-19T21:05:30Z", "author": {"login": "jasperjiaguo"}, "path": "pinot-controller/src/main/java/org/apache/pinot/controller/recommender/rules/io/params/RecommenderConstants.java", "diffHunk": "@@ -32,7 +32,7 @@\n     public static final double DEFAULT_THRESHOLD_MIN_AND_PREDICATE_INCREMENTAL_VOTE = 0.6d;\n     public static final double DEFAULT_THRESHOLD_RATIO_MIN_AND_PREDICATE_TOP_CANDIDATES = 0.8d;\n     public static final double DEFAULT_THRESHOLD_RATIO_MIN_GAIN_DIFF_BETWEEN_ITERATION = 0.05d;\n-    public static final int DEFAULT_MAX_NUM_ITERATION_WITHOUT_GAIN = 3;\n+    public static final int DEFAULT_MAX_NUM_ITERATION_WITHOUT_GAIN = 2;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzI3NjU1OA=="}, "originalCommit": {"oid": "dc4e5fc19059f1f50ed6eca312dfe7599b6255ef"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1ODI4ODM4OnYy", "diffSide": "RIGHT", "path": "pinot-controller/src/main/java/org/apache/pinot/controller/recommender/rules/utils/QueryInvertedSortedIndexRecommender.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxOTo0NDo0OVrOHDWh-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQyMTowNTozNlrOHDZGUA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzI3NjkyMA==", "bodyText": "should put a space between ) and {", "url": "https://github.com/apache/pinot/pull/5875#discussion_r473276920", "createdAt": "2020-08-19T19:44:49Z", "author": {"login": "jackjlli"}, "path": "pinot-controller/src/main/java/org/apache/pinot/controller/recommender/rules/utils/QueryInvertedSortedIndexRecommender.java", "diffHunk": "@@ -585,7 +573,9 @@ else if (type == Predicate.Type.IN || type == Predicate.Type.NOT_IN) {\n \n       boolean isFirst = false;\n       List<String> values = (type == Predicate.Type.IN)?((InPredicate) predicate).getValues():((NotInPredicate) predicate).getValues();\n-      if (values.get(RecommenderConstants.FIRST).equals(RecommenderConstants.IN_PREDICATE_ESTIMATE_LEN_FLAG) ||\n+      if(values.size()==1){", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dc4e5fc19059f1f50ed6eca312dfe7599b6255ef"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzMxODk5Mg==", "bodyText": "Reformatted", "url": "https://github.com/apache/pinot/pull/5875#discussion_r473318992", "createdAt": "2020-08-19T21:05:36Z", "author": {"login": "jasperjiaguo"}, "path": "pinot-controller/src/main/java/org/apache/pinot/controller/recommender/rules/utils/QueryInvertedSortedIndexRecommender.java", "diffHunk": "@@ -585,7 +573,9 @@ else if (type == Predicate.Type.IN || type == Predicate.Type.NOT_IN) {\n \n       boolean isFirst = false;\n       List<String> values = (type == Predicate.Type.IN)?((InPredicate) predicate).getValues():((NotInPredicate) predicate).getValues();\n-      if (values.get(RecommenderConstants.FIRST).equals(RecommenderConstants.IN_PREDICATE_ESTIMATE_LEN_FLAG) ||\n+      if(values.size()==1){", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzI3NjkyMA=="}, "originalCommit": {"oid": "dc4e5fc19059f1f50ed6eca312dfe7599b6255ef"}, "originalPosition": 48}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4016, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}