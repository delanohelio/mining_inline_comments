{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc1ODA5OTIx", "number": 5073, "title": "Adding PinotClusterConfig APIs in controller and corresponding Pinot Admin SubCommand: OperateClusterConfig", "bodyText": "Adding a PinotClusterConfig API resource\n\n\n\nAdding PinotAdmin SubCommand:OperateClusterConfig with operations like get/add/update/delete.\nSample Usage:\n\n\n\u279c bin/pinot-admin.sh OperateClusterConfig -operation get\nExecuting command: Executing command: Operate ClusterConfig -controllerHost 10.1.10.152 -controllerPort 9000 -operation get\nallowParticipantAutoJoin=true\npinot.broker.enable.query.limit.override=false\nenable.case.insensitive.pql=false\n\n\u279c bin/pinot-admin.sh OperateClusterConfig -operation Add -config pinot.broker.enable.query.limit.override=true\nExecuting command: Operate ClusterConfig -controllerHost 10.1.10.152 -controllerPort 9000 -operation Add -config pinot.broker.enable.query.limit.override=true\n{\"status\":\"Updated cluster config.\"}\n\n\u279c bin/pinot-admin.sh OperateClusterConfig -operation get\nExecuting command: Executing command: Operate ClusterConfig -controllerHost 10.1.10.152 -controllerPort 9000 -operation get\nallowParticipantAutoJoin=true\npinot.broker.enable.query.limit.override=true\nenable.case.insensitive.pql=false\n\nAdd then delete a cluster config\n\u279c bin/pinot-admin.sh OperateClusterConfig -operation add -config testConfig2=345\nExecuting command: Executing command: Operate ClusterConfig -controllerHost 10.1.10.152 -controllerPort 9000 -operation add -config testConfig2=345\n{\"status\":\"Updated cluster config.\"}\n\n\u279c bin/pinot-admin.sh OperateClusterConfig -operation get\nExecuting command: Operate ClusterConfig -controllerHost 10.1.10.152 -controllerPort 9000 -operation get\nallowParticipantAutoJoin=true\ntestConfig2=345\npinot.broker.enable.query.limit.override=true\nenable.case.insensitive.pql=false\n\n\u279c bin/pinot-admin.sh OperateClusterConfig -operation delete -config testConfig2=345\nExecuting command: Operate ClusterConfig -controllerHost 10.1.10.152 -controllerPort 9000 -operation delete -config testConfig2=345\n{\"status\":\"Deleted cluster config: testConfig2=345\"}\n\n\u279c bin/pinot-admin.sh OperateClusterConfig -operation get\nExecuting command: Operate ClusterConfig -controllerHost 10.1.10.152 -controllerPort 9000 -operation get\nallowParticipantAutoJoin=true\ntestConfig2=345\npinot.broker.enable.query.limit.override=true\nenable.case.insensitive.pql=false", "createdAt": "2020-02-16T10:32:13Z", "url": "https://github.com/apache/pinot/pull/5073", "merged": true, "mergeCommit": {"oid": "9abf0a4b105d624ec310273c2bd7f52c1f3ce12a"}, "closed": true, "closedAt": "2020-02-28T00:09:52Z", "author": {"login": "xiangfu0"}, "timelineItems": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcF-_FDgBqjMwNTM3ODU3ODU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcIkWMZAFqTM2NjA4MjMzNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "4a739b120f7c19fa441aa74adf88bbd47e2ff47e", "author": {"user": {"login": "xiangfu0", "name": "Xiang Fu"}}, "url": "https://github.com/apache/pinot/commit/4a739b120f7c19fa441aa74adf88bbd47e2ff47e", "committedDate": "2020-02-16T10:23:18Z", "message": "Adding Pinot Cluster Config API in controller and corresponding PinotAdmin Commands"}, "afterCommit": {"oid": "183d810494f0ac87f1ac14f85bb8e04dca3e99ec", "author": {"user": {"login": "xiangfu0", "name": "Xiang Fu"}}, "url": "https://github.com/apache/pinot/commit/183d810494f0ac87f1ac14f85bb8e04dca3e99ec", "committedDate": "2020-02-19T23:18:25Z", "message": "Adding Pinot Cluster Config API in controller and corresponding PinotAdmin Commands"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYyMzA5OTA4", "url": "https://github.com/apache/pinot/pull/5073#pullrequestreview-362309908", "createdAt": "2020-02-20T23:34:07Z", "commit": {"oid": "183d810494f0ac87f1ac14f85bb8e04dca3e99ec"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQyMzozNDowN1rOFsm3Ig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQyMzozNjo0OFrOFsm7sg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjMxODM3MA==", "bodyText": "why is it called getTableInstances?", "url": "https://github.com/apache/pinot/pull/5073#discussion_r382318370", "createdAt": "2020-02-20T23:34:07Z", "author": {"login": "kishoreg"}, "path": "pinot-controller/src/main/java/org/apache/pinot/controller/api/resources/PinotClusterConfigs.java", "diffHunk": "@@ -0,0 +1,100 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.controller.api.resources;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import io.swagger.annotations.Api;\n+import io.swagger.annotations.ApiOperation;\n+import io.swagger.annotations.ApiResponse;\n+import io.swagger.annotations.ApiResponses;\n+import java.io.IOException;\n+import java.util.Collections;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+import javax.inject.Inject;\n+import javax.ws.rs.GET;\n+import javax.ws.rs.POST;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.core.MediaType;\n+import javax.ws.rs.core.Response;\n+import org.apache.helix.HelixAdmin;\n+import org.apache.helix.model.HelixConfigScope;\n+import org.apache.helix.model.builder.HelixConfigScopeBuilder;\n+import org.apache.pinot.controller.helix.core.PinotHelixResourceManager;\n+import org.apache.pinot.spi.utils.JsonUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+\n+@Api(tags = Constants.CLUSTER_TAG)\n+@Path(\"/\")\n+public class PinotClusterConfigs {\n+  private static final Logger LOGGER = LoggerFactory.getLogger(PinotClusterConfigs.class);\n+\n+  @Inject\n+  PinotHelixResourceManager pinotHelixResourceManager;\n+\n+  @GET\n+  @Path(\"/cluster/configs\")\n+  @Produces(MediaType.APPLICATION_JSON)\n+  @ApiOperation(value = \"List cluster configurations\", notes = \"List cluster level configurations\")\n+  @ApiResponses(value = {@ApiResponse(code = 200, message = \"Success\"), @ApiResponse(code = 500, message = \"Internal server error\")})\n+  public String getTableInstances() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "183d810494f0ac87f1ac14f85bb8e04dca3e99ec"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjMxODQzNg==", "bodyText": "method name does not match the operation", "url": "https://github.com/apache/pinot/pull/5073#discussion_r382318436", "createdAt": "2020-02-20T23:34:23Z", "author": {"login": "kishoreg"}, "path": "pinot-controller/src/main/java/org/apache/pinot/controller/api/resources/PinotClusterConfigs.java", "diffHunk": "@@ -0,0 +1,100 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.controller.api.resources;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import io.swagger.annotations.Api;\n+import io.swagger.annotations.ApiOperation;\n+import io.swagger.annotations.ApiResponse;\n+import io.swagger.annotations.ApiResponses;\n+import java.io.IOException;\n+import java.util.Collections;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+import javax.inject.Inject;\n+import javax.ws.rs.GET;\n+import javax.ws.rs.POST;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.core.MediaType;\n+import javax.ws.rs.core.Response;\n+import org.apache.helix.HelixAdmin;\n+import org.apache.helix.model.HelixConfigScope;\n+import org.apache.helix.model.builder.HelixConfigScopeBuilder;\n+import org.apache.pinot.controller.helix.core.PinotHelixResourceManager;\n+import org.apache.pinot.spi.utils.JsonUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+\n+@Api(tags = Constants.CLUSTER_TAG)\n+@Path(\"/\")\n+public class PinotClusterConfigs {\n+  private static final Logger LOGGER = LoggerFactory.getLogger(PinotClusterConfigs.class);\n+\n+  @Inject\n+  PinotHelixResourceManager pinotHelixResourceManager;\n+\n+  @GET\n+  @Path(\"/cluster/configs\")\n+  @Produces(MediaType.APPLICATION_JSON)\n+  @ApiOperation(value = \"List cluster configurations\", notes = \"List cluster level configurations\")\n+  @ApiResponses(value = {@ApiResponse(code = 200, message = \"Success\"), @ApiResponse(code = 500, message = \"Internal server error\")})\n+  public String getTableInstances() {\n+    HelixAdmin helixAdmin = pinotHelixResourceManager.getHelixAdmin();\n+    HelixConfigScope configScope = new HelixConfigScopeBuilder(HelixConfigScope.ConfigScopeProperty.CLUSTER)\n+        .forCluster(pinotHelixResourceManager.getHelixClusterName()).build();\n+    List<String> configKeys = helixAdmin.getConfigKeys(configScope);\n+    ObjectNode ret = JsonUtils.newObjectNode();\n+    Map<String, String> configs = helixAdmin.getConfig(configScope, configKeys);\n+    for (String key : configs.keySet()) {\n+      ret.put(key, configs.get(key));\n+    }\n+    return ret.toString();\n+  }\n+\n+  @POST\n+  @Path(\"/cluster/configs\")\n+  @ApiOperation(value = \"Update cluster configuration\")\n+  @Produces(MediaType.APPLICATION_JSON)\n+  @ApiResponses(value = {@ApiResponse(code = 200, message = \"Success\"), @ApiResponse(code = 500, message = \"Server error updating configuration\")})\n+  public SuccessResponse updateIndexingConfig(String body) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "183d810494f0ac87f1ac14f85bb8e04dca3e99ec"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjMxOTUzOA==", "bodyText": "not sure if we should add support for api's that are available via controller rest api's. It will be hard to match all the apis", "url": "https://github.com/apache/pinot/pull/5073#discussion_r382319538", "createdAt": "2020-02-20T23:36:48Z", "author": {"login": "kishoreg"}, "path": "pinot-tools/src/main/java/org/apache/pinot/tools/admin/command/UpdateClusterConfigCommand.java", "diffHunk": "@@ -0,0 +1,107 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.tools.admin.command;\n+\n+import java.util.Collections;\n+import org.apache.pinot.common.utils.NetUtil;\n+import org.apache.pinot.spi.utils.JsonUtils;\n+import org.apache.pinot.tools.Command;\n+import org.kohsuke.args4j.Option;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+\n+public class UpdateClusterConfigCommand extends AbstractBaseAdminCommand implements Command {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "183d810494f0ac87f1ac14f85bb8e04dca3e99ec"}, "originalPosition": 30}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e1b6fdd71d5463a7e4b6f71c91aebf64e58dbebb", "author": {"user": {"login": "xiangfu0", "name": "Xiang Fu"}}, "url": "https://github.com/apache/pinot/commit/e1b6fdd71d5463a7e4b6f71c91aebf64e58dbebb", "committedDate": "2020-02-22T02:46:49Z", "message": "Adding delete cluster config cmd"}, "afterCommit": {"oid": "e5e002a95005ed401257a0620981c0f069614122", "author": {"user": {"login": "xiangfu0", "name": "Xiang Fu"}}, "url": "https://github.com/apache/pinot/commit/e5e002a95005ed401257a0620981c0f069614122", "committedDate": "2020-02-22T02:47:09Z", "message": "Adding delete cluster config cmd"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY1MzA1NDE1", "url": "https://github.com/apache/pinot/pull/5073#pullrequestreview-365305415", "createdAt": "2020-02-26T22:55:56Z", "commit": {"oid": "e5e002a95005ed401257a0620981c0f069614122"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQyMjo1NTo1NlrOFu_bVA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQyMjo1OToyOVrOFu_g-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDgxODAwNA==", "bodyText": "Any reason for using the errStr variable, as opposed to in-lining the message?", "url": "https://github.com/apache/pinot/pull/5073#discussion_r384818004", "createdAt": "2020-02-26T22:55:56Z", "author": {"login": "mayankshriv"}, "path": "pinot-controller/src/main/java/org/apache/pinot/controller/api/resources/PinotClusterConfigs.java", "diffHunk": "@@ -0,0 +1,123 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.controller.api.resources;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import io.swagger.annotations.Api;\n+import io.swagger.annotations.ApiOperation;\n+import io.swagger.annotations.ApiParam;\n+import io.swagger.annotations.ApiResponse;\n+import io.swagger.annotations.ApiResponses;\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+import javax.inject.Inject;\n+import javax.ws.rs.DELETE;\n+import javax.ws.rs.GET;\n+import javax.ws.rs.POST;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.PathParam;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.core.MediaType;\n+import javax.ws.rs.core.Response;\n+import org.apache.helix.HelixAdmin;\n+import org.apache.helix.model.HelixConfigScope;\n+import org.apache.helix.model.builder.HelixConfigScopeBuilder;\n+import org.apache.pinot.controller.helix.core.PinotHelixResourceManager;\n+import org.apache.pinot.spi.utils.JsonUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+\n+@Api(tags = Constants.CLUSTER_TAG)\n+@Path(\"/\")\n+public class PinotClusterConfigs {\n+  private static final Logger LOGGER = LoggerFactory.getLogger(PinotClusterConfigs.class);\n+\n+  @Inject\n+  PinotHelixResourceManager pinotHelixResourceManager;\n+\n+  @GET\n+  @Path(\"/cluster/configs\")\n+  @Produces(MediaType.APPLICATION_JSON)\n+  @ApiOperation(value = \"List cluster configurations\", notes = \"List cluster level configurations\")\n+  @ApiResponses(value = {@ApiResponse(code = 200, message = \"Success\"), @ApiResponse(code = 500, message = \"Internal server error\")})\n+  public String listClusterConfigs() {\n+    HelixAdmin helixAdmin = pinotHelixResourceManager.getHelixAdmin();\n+    HelixConfigScope configScope = new HelixConfigScopeBuilder(HelixConfigScope.ConfigScopeProperty.CLUSTER)\n+        .forCluster(pinotHelixResourceManager.getHelixClusterName()).build();\n+    List<String> configKeys = helixAdmin.getConfigKeys(configScope);\n+    ObjectNode ret = JsonUtils.newObjectNode();\n+    Map<String, String> configs = helixAdmin.getConfig(configScope, configKeys);\n+    for (String key : configs.keySet()) {\n+      ret.put(key, configs.get(key));\n+    }\n+    return ret.toString();\n+  }\n+\n+  @POST\n+  @Path(\"/cluster/configs\")\n+  @ApiOperation(value = \"Update cluster configuration\")\n+  @Produces(MediaType.APPLICATION_JSON)\n+  @ApiResponses(value = {@ApiResponse(code = 200, message = \"Success\"), @ApiResponse(code = 500, message = \"Server error updating configuration\")})\n+  public SuccessResponse updateClusterConfig(String body) {\n+    try {\n+      JsonNode jsonNode = JsonUtils.stringToJsonNode(body);\n+      HelixAdmin admin = pinotHelixResourceManager.getHelixAdmin();\n+      HelixConfigScope configScope = new HelixConfigScopeBuilder(HelixConfigScope.ConfigScopeProperty.CLUSTER)\n+          .forCluster(pinotHelixResourceManager.getHelixClusterName()).build();\n+      Iterator<String> fieldNamesIterator = jsonNode.fieldNames();\n+      while (fieldNamesIterator.hasNext()) {\n+        String key = fieldNamesIterator.next();\n+        String value = jsonNode.get(key).textValue();\n+        admin.setConfig(configScope, Collections.singletonMap(key, value));\n+      }\n+      return new SuccessResponse(\"Updated cluster config.\");\n+    } catch (IOException e) {\n+      String errStr = \"Error converting request to cluster config.\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e5e002a95005ed401257a0620981c0f069614122"}, "originalPosition": 97}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDgxODk3OQ==", "bodyText": "Should we allow DELETE?", "url": "https://github.com/apache/pinot/pull/5073#discussion_r384818979", "createdAt": "2020-02-26T22:58:15Z", "author": {"login": "mayankshriv"}, "path": "pinot-controller/src/main/java/org/apache/pinot/controller/api/resources/PinotClusterConfigs.java", "diffHunk": "@@ -0,0 +1,123 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.controller.api.resources;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import io.swagger.annotations.Api;\n+import io.swagger.annotations.ApiOperation;\n+import io.swagger.annotations.ApiParam;\n+import io.swagger.annotations.ApiResponse;\n+import io.swagger.annotations.ApiResponses;\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+import javax.inject.Inject;\n+import javax.ws.rs.DELETE;\n+import javax.ws.rs.GET;\n+import javax.ws.rs.POST;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.PathParam;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.core.MediaType;\n+import javax.ws.rs.core.Response;\n+import org.apache.helix.HelixAdmin;\n+import org.apache.helix.model.HelixConfigScope;\n+import org.apache.helix.model.builder.HelixConfigScopeBuilder;\n+import org.apache.pinot.controller.helix.core.PinotHelixResourceManager;\n+import org.apache.pinot.spi.utils.JsonUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+\n+@Api(tags = Constants.CLUSTER_TAG)\n+@Path(\"/\")\n+public class PinotClusterConfigs {\n+  private static final Logger LOGGER = LoggerFactory.getLogger(PinotClusterConfigs.class);\n+\n+  @Inject\n+  PinotHelixResourceManager pinotHelixResourceManager;\n+\n+  @GET\n+  @Path(\"/cluster/configs\")\n+  @Produces(MediaType.APPLICATION_JSON)\n+  @ApiOperation(value = \"List cluster configurations\", notes = \"List cluster level configurations\")\n+  @ApiResponses(value = {@ApiResponse(code = 200, message = \"Success\"), @ApiResponse(code = 500, message = \"Internal server error\")})\n+  public String listClusterConfigs() {\n+    HelixAdmin helixAdmin = pinotHelixResourceManager.getHelixAdmin();\n+    HelixConfigScope configScope = new HelixConfigScopeBuilder(HelixConfigScope.ConfigScopeProperty.CLUSTER)\n+        .forCluster(pinotHelixResourceManager.getHelixClusterName()).build();\n+    List<String> configKeys = helixAdmin.getConfigKeys(configScope);\n+    ObjectNode ret = JsonUtils.newObjectNode();\n+    Map<String, String> configs = helixAdmin.getConfig(configScope, configKeys);\n+    for (String key : configs.keySet()) {\n+      ret.put(key, configs.get(key));\n+    }\n+    return ret.toString();\n+  }\n+\n+  @POST\n+  @Path(\"/cluster/configs\")\n+  @ApiOperation(value = \"Update cluster configuration\")\n+  @Produces(MediaType.APPLICATION_JSON)\n+  @ApiResponses(value = {@ApiResponse(code = 200, message = \"Success\"), @ApiResponse(code = 500, message = \"Server error updating configuration\")})\n+  public SuccessResponse updateClusterConfig(String body) {\n+    try {\n+      JsonNode jsonNode = JsonUtils.stringToJsonNode(body);\n+      HelixAdmin admin = pinotHelixResourceManager.getHelixAdmin();\n+      HelixConfigScope configScope = new HelixConfigScopeBuilder(HelixConfigScope.ConfigScopeProperty.CLUSTER)\n+          .forCluster(pinotHelixResourceManager.getHelixClusterName()).build();\n+      Iterator<String> fieldNamesIterator = jsonNode.fieldNames();\n+      while (fieldNamesIterator.hasNext()) {\n+        String key = fieldNamesIterator.next();\n+        String value = jsonNode.get(key).textValue();\n+        admin.setConfig(configScope, Collections.singletonMap(key, value));\n+      }\n+      return new SuccessResponse(\"Updated cluster config.\");\n+    } catch (IOException e) {\n+      String errStr = \"Error converting request to cluster config.\";\n+      throw new ControllerApplicationException(LOGGER, errStr, Response.Status.BAD_REQUEST, e);\n+    } catch (Exception e) {\n+      String errStr = \"Failed to update cluster config.\";\n+      throw new ControllerApplicationException(LOGGER, errStr, Response.Status.INTERNAL_SERVER_ERROR, e);\n+    }\n+  }\n+\n+  @DELETE", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e5e002a95005ed401257a0620981c0f069614122"}, "originalPosition": 105}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDgxOTQ1MQ==", "bodyText": "Should we add one command with action = GET/UPDATE/DELETE, as opposed to three new commands?", "url": "https://github.com/apache/pinot/pull/5073#discussion_r384819451", "createdAt": "2020-02-26T22:59:29Z", "author": {"login": "mayankshriv"}, "path": "pinot-tools/src/main/java/org/apache/pinot/tools/admin/command/DeleteClusterConfigCommand.java", "diffHunk": "@@ -0,0 +1,105 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.tools.admin.command;\n+\n+import org.apache.commons.lang.StringUtils;\n+import org.apache.pinot.common.utils.NetUtil;\n+import org.apache.pinot.tools.Command;\n+import org.kohsuke.args4j.Option;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+\n+public class DeleteClusterConfigCommand extends AbstractBaseAdminCommand implements Command {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e5e002a95005ed401257a0620981c0f069614122"}, "originalPosition": 29}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "65b47e8c464e0341137a4b09f3f332cea667cee4", "author": {"user": {"login": "xiangfu0", "name": "Xiang Fu"}}, "url": "https://github.com/apache/pinot/commit/65b47e8c464e0341137a4b09f3f332cea667cee4", "committedDate": "2020-02-27T00:42:26Z", "message": "Adding Pinot Cluster Config API in controller and corresponding PinotAdmin Commands"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e54f33dcf1d794874b61f740e97ad99bab96f433", "author": {"user": {"login": "xiangfu0", "name": "Xiang Fu"}}, "url": "https://github.com/apache/pinot/commit/e54f33dcf1d794874b61f740e97ad99bab96f433", "committedDate": "2020-02-27T00:42:26Z", "message": "update method names"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "213af14808c7a9bbec43658c965bc9251cade0da", "author": {"user": {"login": "xiangfu0", "name": "Xiang Fu"}}, "url": "https://github.com/apache/pinot/commit/213af14808c7a9bbec43658c965bc9251cade0da", "committedDate": "2020-02-27T00:42:26Z", "message": "Adding delete cluster config cmd"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e5e002a95005ed401257a0620981c0f069614122", "author": {"user": {"login": "xiangfu0", "name": "Xiang Fu"}}, "url": "https://github.com/apache/pinot/commit/e5e002a95005ed401257a0620981c0f069614122", "committedDate": "2020-02-22T02:47:09Z", "message": "Adding delete cluster config cmd"}, "afterCommit": {"oid": "6d6a3e69d57584ce70373c77e8efaaee25eb1661", "author": {"user": {"login": "xiangfu0", "name": "Xiang Fu"}}, "url": "https://github.com/apache/pinot/commit/6d6a3e69d57584ce70373c77e8efaaee25eb1661", "committedDate": "2020-02-27T00:42:26Z", "message": "Address comments"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "6d6a3e69d57584ce70373c77e8efaaee25eb1661", "author": {"user": {"login": "xiangfu0", "name": "Xiang Fu"}}, "url": "https://github.com/apache/pinot/commit/6d6a3e69d57584ce70373c77e8efaaee25eb1661", "committedDate": "2020-02-27T00:42:26Z", "message": "Address comments"}, "afterCommit": {"oid": "fc5b785c53a3db33c11d20c9d793ed3c465380af", "author": {"user": {"login": "xiangfu0", "name": "Xiang Fu"}}, "url": "https://github.com/apache/pinot/commit/fc5b785c53a3db33c11d20c9d793ed3c465380af", "committedDate": "2020-02-27T19:24:31Z", "message": "Address comments"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "fc5b785c53a3db33c11d20c9d793ed3c465380af", "author": {"user": {"login": "xiangfu0", "name": "Xiang Fu"}}, "url": "https://github.com/apache/pinot/commit/fc5b785c53a3db33c11d20c9d793ed3c465380af", "committedDate": "2020-02-27T19:24:31Z", "message": "Address comments"}, "afterCommit": {"oid": "b3374fccb49552c3732c340f9303cb6816c3a292", "author": {"user": {"login": "xiangfu0", "name": "Xiang Fu"}}, "url": "https://github.com/apache/pinot/commit/b3374fccb49552c3732c340f9303cb6816c3a292", "committedDate": "2020-02-27T19:38:16Z", "message": "Address comments"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b3374fccb49552c3732c340f9303cb6816c3a292", "author": {"user": {"login": "xiangfu0", "name": "Xiang Fu"}}, "url": "https://github.com/apache/pinot/commit/b3374fccb49552c3732c340f9303cb6816c3a292", "committedDate": "2020-02-27T19:38:16Z", "message": "Address comments"}, "afterCommit": {"oid": "cd37ee157106f6705d7b371fbfaa1590ac79aa14", "author": {"user": {"login": "xiangfu0", "name": "Xiang Fu"}}, "url": "https://github.com/apache/pinot/commit/cd37ee157106f6705d7b371fbfaa1590ac79aa14", "committedDate": "2020-02-27T19:57:21Z", "message": "Address comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4dba4208e12e68d2f201e219f3023921842a2db0", "author": {"user": {"login": "xiangfu0", "name": "Xiang Fu"}}, "url": "https://github.com/apache/pinot/commit/4dba4208e12e68d2f201e219f3023921842a2db0", "committedDate": "2020-02-27T20:13:30Z", "message": "Address comments"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "cd37ee157106f6705d7b371fbfaa1590ac79aa14", "author": {"user": {"login": "xiangfu0", "name": "Xiang Fu"}}, "url": "https://github.com/apache/pinot/commit/cd37ee157106f6705d7b371fbfaa1590ac79aa14", "committedDate": "2020-02-27T19:57:21Z", "message": "Address comments"}, "afterCommit": {"oid": "4dba4208e12e68d2f201e219f3023921842a2db0", "author": {"user": {"login": "xiangfu0", "name": "Xiang Fu"}}, "url": "https://github.com/apache/pinot/commit/4dba4208e12e68d2f201e219f3023921842a2db0", "committedDate": "2020-02-27T20:13:30Z", "message": "Address comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY2MDgyMzM2", "url": "https://github.com/apache/pinot/pull/5073#pullrequestreview-366082336", "createdAt": "2020-02-27T23:58:18Z", "commit": {"oid": "4dba4208e12e68d2f201e219f3023921842a2db0"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1292, "cost": 1, "resetAt": "2021-10-28T18:00:02Z"}}}