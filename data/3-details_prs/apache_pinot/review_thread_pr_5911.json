{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDcyMDg1MTkx", "number": 5911, "reviewThreads": {"totalCount": 35, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxNjoxMTowOFrOEbpGnA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxNzowNzozM1rOEfjLPA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3NDIwNDQ0OnYy", "diffSide": "RIGHT", "path": "compatibility-verifier/build-release.sh", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxNjoxMTowOFrOHFsLXg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxNjoxMTowOFrOHFsLXg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTcyODczNA==", "bodyText": "Let us use this script to build one release, and invoke it as many times as needed", "url": "https://github.com/apache/pinot/pull/5911#discussion_r475728734", "createdAt": "2020-08-24T16:11:08Z", "author": {"login": "mcvsubbu"}, "path": "compatibility-verifier/build-release.sh", "diffHunk": "@@ -0,0 +1,59 @@\n+#!/bin/bash\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+#\n+\n+# A helper script that builds Pinot given a specific commit hash and target directory\n+# This script is intended to be called stand-alone or from comp-verifier.sh \n+# command syntax: ./comp-verifier.sh commitHash1 target_dir_1 commitHash2 target_dir_2", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "21f25428ff80b3bbe3b187389fad0b72ff4d5030"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3NDIwODc5OnYy", "diffSide": "RIGHT", "path": "compatibility-verifier/build-release.sh", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxNjoxMjoxNFrOHFsODg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxNjoxMjoxNFrOHFsODg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTcyOTQyMg==", "bodyText": "Introduce a function called usage() and print the usage in it. We can call that function from multiple points as necessary", "url": "https://github.com/apache/pinot/pull/5911#discussion_r475729422", "createdAt": "2020-08-24T16:12:14Z", "author": {"login": "mcvsubbu"}, "path": "compatibility-verifier/build-release.sh", "diffHunk": "@@ -0,0 +1,59 @@\n+#!/bin/bash\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+#\n+\n+# A helper script that builds Pinot given a specific commit hash and target directory\n+# This script is intended to be called stand-alone or from comp-verifier.sh \n+# command syntax: ./comp-verifier.sh commitHash1 target_dir_1 commitHash2 target_dir_2\n+\n+# verify correct usage of this script \n+if [[ $# -ne 2 ]]; then\n+    printf \"You used %s arguments \\n\" \"$#\"\n+    printf \"Usage: \\n ./build-release.sh commit_hash target_dir \\n\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "21f25428ff80b3bbe3b187389fad0b72ff4d5030"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3NDIxNzQ0OnYy", "diffSide": "RIGHT", "path": "compatibility-verifier/build-release.sh", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxNjoxNDoyNVrOHFsTSg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxNjoxNDoyNVrOHFsTSg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTczMDc2Mg==", "bodyText": "Please use '[' instead of '[['. Won't repeat for other instances further down in this file and other files", "url": "https://github.com/apache/pinot/pull/5911#discussion_r475730762", "createdAt": "2020-08-24T16:14:25Z", "author": {"login": "mcvsubbu"}, "path": "compatibility-verifier/build-release.sh", "diffHunk": "@@ -0,0 +1,59 @@\n+#!/bin/bash\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+#\n+\n+# A helper script that builds Pinot given a specific commit hash and target directory\n+# This script is intended to be called stand-alone or from comp-verifier.sh \n+# command syntax: ./comp-verifier.sh commitHash1 target_dir_1 commitHash2 target_dir_2\n+\n+# verify correct usage of this script \n+if [[ $# -ne 2 ]]; then", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "21f25428ff80b3bbe3b187389fad0b72ff4d5030"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3NDIxODE5OnYy", "diffSide": "RIGHT", "path": "compatibility-verifier/build-release.sh", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxNjoxNDozOVrOHFsTxg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxNjoxNDozOVrOHFsTxg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTczMDg4Ng==", "bodyText": "Remove this line", "url": "https://github.com/apache/pinot/pull/5911#discussion_r475730886", "createdAt": "2020-08-24T16:14:39Z", "author": {"login": "mcvsubbu"}, "path": "compatibility-verifier/build-release.sh", "diffHunk": "@@ -0,0 +1,59 @@\n+#!/bin/bash\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+#\n+\n+# A helper script that builds Pinot given a specific commit hash and target directory\n+# This script is intended to be called stand-alone or from comp-verifier.sh \n+# command syntax: ./comp-verifier.sh commitHash1 target_dir_1 commitHash2 target_dir_2\n+\n+# verify correct usage of this script \n+if [[ $# -ne 2 ]]; then\n+    printf \"You used %s arguments \\n\" \"$#\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "21f25428ff80b3bbe3b187389fad0b72ff4d5030"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3NDIyMDgzOnYy", "diffSide": "RIGHT", "path": "compatibility-verifier/build-release.sh", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxNjoxNToxOVrOHFsVaA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxNjoxNToxOVrOHFsVaA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTczMTMwNA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                printf \"Usage: \\n ./build-release.sh commit_hash target_dir \\n\"\n          \n          \n            \n                echo \"Usage:$0 commit_hash target_dir \"", "url": "https://github.com/apache/pinot/pull/5911#discussion_r475731304", "createdAt": "2020-08-24T16:15:19Z", "author": {"login": "mcvsubbu"}, "path": "compatibility-verifier/build-release.sh", "diffHunk": "@@ -0,0 +1,59 @@\n+#!/bin/bash\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+#\n+\n+# A helper script that builds Pinot given a specific commit hash and target directory\n+# This script is intended to be called stand-alone or from comp-verifier.sh \n+# command syntax: ./comp-verifier.sh commitHash1 target_dir_1 commitHash2 target_dir_2\n+\n+# verify correct usage of this script \n+if [[ $# -ne 2 ]]; then\n+    printf \"You used %s arguments \\n\" \"$#\"\n+    printf \"Usage: \\n ./build-release.sh commit_hash target_dir \\n\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "21f25428ff80b3bbe3b187389fad0b72ff4d5030"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3NDIyNDM0OnYy", "diffSide": "RIGHT", "path": "compatibility-verifier/build-release.sh", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxNjoxNjoxM1rOHFsXoA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxNjoxNjoxM1rOHFsXoA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTczMTg3Mg==", "bodyText": "exit if the directory exists. We can add a -f argument later or force", "url": "https://github.com/apache/pinot/pull/5911#discussion_r475731872", "createdAt": "2020-08-24T16:16:13Z", "author": {"login": "mcvsubbu"}, "path": "compatibility-verifier/build-release.sh", "diffHunk": "@@ -0,0 +1,59 @@\n+#!/bin/bash\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+#\n+\n+# A helper script that builds Pinot given a specific commit hash and target directory\n+# This script is intended to be called stand-alone or from comp-verifier.sh \n+# command syntax: ./comp-verifier.sh commitHash1 target_dir_1 commitHash2 target_dir_2\n+\n+# verify correct usage of this script \n+if [[ $# -ne 2 ]]; then\n+    printf \"You used %s arguments \\n\" \"$#\"\n+    printf \"Usage: \\n ./build-release.sh commit_hash target_dir \\n\"\n+    exit 1\n+fi\n+\n+# get arguments\n+commit_hash=$1\n+target_dir=$2\n+\n+# check if directory already exists and checkout  ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "21f25428ff80b3bbe3b187389fad0b72ff4d5030"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3NDIzMTA0OnYy", "diffSide": "RIGHT", "path": "compatibility-verifier/build-release.sh", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxNjoxNzo1OVrOHFsb2w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxNjoxNzo1OVrOHFsb2w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTczMjk1NQ==", "bodyText": "You will need to check the exit status of mkdir in case there were permission issues", "url": "https://github.com/apache/pinot/pull/5911#discussion_r475732955", "createdAt": "2020-08-24T16:17:59Z", "author": {"login": "mcvsubbu"}, "path": "compatibility-verifier/build-release.sh", "diffHunk": "@@ -0,0 +1,59 @@\n+#!/bin/bash\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+#\n+\n+# A helper script that builds Pinot given a specific commit hash and target directory\n+# This script is intended to be called stand-alone or from comp-verifier.sh \n+# command syntax: ./comp-verifier.sh commitHash1 target_dir_1 commitHash2 target_dir_2\n+\n+# verify correct usage of this script \n+if [[ $# -ne 2 ]]; then\n+    printf \"You used %s arguments \\n\" \"$#\"\n+    printf \"Usage: \\n ./build-release.sh commit_hash target_dir \\n\"\n+    exit 1\n+fi\n+\n+# get arguments\n+commit_hash=$1\n+target_dir=$2\n+\n+# check if directory already exists and checkout  \n+# using the given commit\n+if [[ ! -d $target_dir ]]; then\n+    mkdir -p \"$target_dir\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "21f25428ff80b3bbe3b187389fad0b72ff4d5030"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3NDI1MzkwOnYy", "diffSide": "RIGHT", "path": "compatibility-verifier/comp-verifier.sh", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxNjoyNDoxOVrOHFsqqw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxNjoyNDoxOVrOHFsqqw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTczNjc0Nw==", "bodyText": "Take a working dir as argument and mkdir two subdirs in it, one for each commit hash.", "url": "https://github.com/apache/pinot/pull/5911#discussion_r475736747", "createdAt": "2020-08-24T16:24:19Z", "author": {"login": "mcvsubbu"}, "path": "compatibility-verifier/comp-verifier.sh", "diffHunk": "@@ -0,0 +1,145 @@\n+#!/bin/bash\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+#\n+\n+# A script that does rolling upgrade of Pinot components\n+# from one version to the other given 2 commit hashes. It first builds  \n+# Pinot in the 2 given directories and then upgrades in the following order:\n+# Controller -> Broker -> Server\n+\n+# verify correct usage of this script \n+if [[ $# -ne 4 ]]; then\n+    printf \"You used %s arguments \\n\" \"$#\"\n+    printf \"Usage: \\n ./comp-verifier.sh commitHash1 target_dir_1 commitHash2 target_dir_2 \\n\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "21f25428ff80b3bbe3b187389fad0b72ff4d5030"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3NDI1NzM3OnYy", "diffSide": "RIGHT", "path": "compatibility-verifier/comp-verifier.sh", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxNjoyNTowOVrOHFss2Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQwMzoyNjozMVrOHGDqlQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTczNzMwNQ==", "bodyText": "Why read pinot versions? We have the commit hash, pick up whatever version or hash that is.", "url": "https://github.com/apache/pinot/pull/5911#discussion_r475737305", "createdAt": "2020-08-24T16:25:09Z", "author": {"login": "mcvsubbu"}, "path": "compatibility-verifier/comp-verifier.sh", "diffHunk": "@@ -0,0 +1,145 @@\n+#!/bin/bash\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+#\n+\n+# A script that does rolling upgrade of Pinot components\n+# from one version to the other given 2 commit hashes. It first builds  \n+# Pinot in the 2 given directories and then upgrades in the following order:\n+# Controller -> Broker -> Server\n+\n+# verify correct usage of this script \n+if [[ $# -ne 4 ]]; then\n+    printf \"You used %s arguments \\n\" \"$#\"\n+    printf \"Usage: \\n ./comp-verifier.sh commitHash1 target_dir_1 commitHash2 target_dir_2 \\n\"\n+    exit 1\n+fi\n+\n+# get arguments\n+commitHash1=$1\n+target_dir_1=$2\n+commitHash2=$3\n+target_dir_2=$4\n+pinot_version_1=\"0.5.0\"\n+pinot_version_2=\"0.5.0\"\n+\n+read -rep $'\\n' -p \"What is the Pinot version for first commitHash? [default: 0.5.0] \" -r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "21f25428ff80b3bbe3b187389fad0b72ff4d5030"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjEwNzY2MA==", "bodyText": "I required it because I'm using pinot-admin.sh to start the components and the path to pinot-admin.sh file is dependent on the Pinot version for e.g., pinot-distribution/target/apache-pinot-incubating-0.5.0-SNAPSHOT-bin/apache-pinot-incubating-0.5.0-SNAPSHOT-bin/bin/StartZookeeper. I'm not sure if I can get the Pinot version from the hash.", "url": "https://github.com/apache/pinot/pull/5911#discussion_r476107660", "createdAt": "2020-08-25T03:17:42Z", "author": {"login": "saileshnankani"}, "path": "compatibility-verifier/comp-verifier.sh", "diffHunk": "@@ -0,0 +1,145 @@\n+#!/bin/bash\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+#\n+\n+# A script that does rolling upgrade of Pinot components\n+# from one version to the other given 2 commit hashes. It first builds  \n+# Pinot in the 2 given directories and then upgrades in the following order:\n+# Controller -> Broker -> Server\n+\n+# verify correct usage of this script \n+if [[ $# -ne 4 ]]; then\n+    printf \"You used %s arguments \\n\" \"$#\"\n+    printf \"Usage: \\n ./comp-verifier.sh commitHash1 target_dir_1 commitHash2 target_dir_2 \\n\"\n+    exit 1\n+fi\n+\n+# get arguments\n+commitHash1=$1\n+target_dir_1=$2\n+commitHash2=$3\n+target_dir_2=$4\n+pinot_version_1=\"0.5.0\"\n+pinot_version_2=\"0.5.0\"\n+\n+read -rep $'\\n' -p \"What is the Pinot version for first commitHash? [default: 0.5.0] \" -r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTczNzMwNQ=="}, "originalCommit": {"oid": "21f25428ff80b3bbe3b187389fad0b72ff4d5030"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjExMzU1Nw==", "bodyText": "Never mind. I noticed there is also ./pinot-tools/target/pinot-tools-pkg/bin/pinot-admin.sh that I can use.", "url": "https://github.com/apache/pinot/pull/5911#discussion_r476113557", "createdAt": "2020-08-25T03:26:31Z", "author": {"login": "saileshnankani"}, "path": "compatibility-verifier/comp-verifier.sh", "diffHunk": "@@ -0,0 +1,145 @@\n+#!/bin/bash\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+#\n+\n+# A script that does rolling upgrade of Pinot components\n+# from one version to the other given 2 commit hashes. It first builds  \n+# Pinot in the 2 given directories and then upgrades in the following order:\n+# Controller -> Broker -> Server\n+\n+# verify correct usage of this script \n+if [[ $# -ne 4 ]]; then\n+    printf \"You used %s arguments \\n\" \"$#\"\n+    printf \"Usage: \\n ./comp-verifier.sh commitHash1 target_dir_1 commitHash2 target_dir_2 \\n\"\n+    exit 1\n+fi\n+\n+# get arguments\n+commitHash1=$1\n+target_dir_1=$2\n+commitHash2=$3\n+target_dir_2=$4\n+pinot_version_1=\"0.5.0\"\n+pinot_version_2=\"0.5.0\"\n+\n+read -rep $'\\n' -p \"What is the Pinot version for first commitHash? [default: 0.5.0] \" -r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTczNzMwNQ=="}, "originalCommit": {"oid": "21f25428ff80b3bbe3b187389fad0b72ff4d5030"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3NDI2MTY5OnYy", "diffSide": "RIGHT", "path": "compatibility-verifier/comp-verifier.sh", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxNjoyNjoxM1rOHFsvdQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxNjoyNjoxM1rOHFsvdQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTczNzk3Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                printf \"Usage: \\n ./comp-verifier.sh commitHash1 target_dir_1 commitHash2 target_dir_2 \\n\"\n          \n          \n            \n                echo \"Usage: $0 earlierCommitHash laterCommitHash workingDir\"", "url": "https://github.com/apache/pinot/pull/5911#discussion_r475737973", "createdAt": "2020-08-24T16:26:13Z", "author": {"login": "mcvsubbu"}, "path": "compatibility-verifier/comp-verifier.sh", "diffHunk": "@@ -0,0 +1,145 @@\n+#!/bin/bash\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+#\n+\n+# A script that does rolling upgrade of Pinot components\n+# from one version to the other given 2 commit hashes. It first builds  \n+# Pinot in the 2 given directories and then upgrades in the following order:\n+# Controller -> Broker -> Server\n+\n+# verify correct usage of this script \n+if [[ $# -ne 4 ]]; then\n+    printf \"You used %s arguments \\n\" \"$#\"\n+    printf \"Usage: \\n ./comp-verifier.sh commitHash1 target_dir_1 commitHash2 target_dir_2 \\n\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "21f25428ff80b3bbe3b187389fad0b72ff4d5030"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3NDI2NDA0OnYy", "diffSide": "RIGHT", "path": "compatibility-verifier/comp-verifier.sh", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxNjoyNjo1MFrOHFsw4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxNjoyNjo1MFrOHFsw4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTczODMzOQ==", "bodyText": "Mention clearly that the script assumes the first hash is the earlier one and the second is the later one. Change your variable names to indicate so", "url": "https://github.com/apache/pinot/pull/5911#discussion_r475738339", "createdAt": "2020-08-24T16:26:50Z", "author": {"login": "mcvsubbu"}, "path": "compatibility-verifier/comp-verifier.sh", "diffHunk": "@@ -0,0 +1,145 @@\n+#!/bin/bash\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+#\n+\n+# A script that does rolling upgrade of Pinot components\n+# from one version to the other given 2 commit hashes. It first builds  ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "21f25428ff80b3bbe3b187389fad0b72ff4d5030"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3NDI3MTE3OnYy", "diffSide": "RIGHT", "path": "compatibility-verifier/comp-verifier.sh", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxNjoyODo0MlrOHFs1XQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxNjoyODo0MlrOHFs1XQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTczOTQ4NQ==", "bodyText": "Do not kill existing processes. If the ports are not open, exit with an error saying so\nWe will add additional a config file for each component to fine-tune things. For now,\ndefault configs and ports are good enough to get things going.", "url": "https://github.com/apache/pinot/pull/5911#discussion_r475739485", "createdAt": "2020-08-24T16:28:42Z", "author": {"login": "mcvsubbu"}, "path": "compatibility-verifier/comp-verifier.sh", "diffHunk": "@@ -0,0 +1,145 @@\n+#!/bin/bash\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+#\n+\n+# A script that does rolling upgrade of Pinot components\n+# from one version to the other given 2 commit hashes. It first builds  \n+# Pinot in the 2 given directories and then upgrades in the following order:\n+# Controller -> Broker -> Server\n+\n+# verify correct usage of this script \n+if [[ $# -ne 4 ]]; then\n+    printf \"You used %s arguments \\n\" \"$#\"\n+    printf \"Usage: \\n ./comp-verifier.sh commitHash1 target_dir_1 commitHash2 target_dir_2 \\n\"\n+    exit 1\n+fi\n+\n+# get arguments\n+commitHash1=$1\n+target_dir_1=$2\n+commitHash2=$3\n+target_dir_2=$4\n+pinot_version_1=\"0.5.0\"\n+pinot_version_2=\"0.5.0\"\n+\n+read -rep $'\\n' -p \"What is the Pinot version for first commitHash? [default: 0.5.0] \" -r\n+if [[ ! $REPLY == \"\" ]]; then\n+  pinot_version_1=$REPLY\n+fi\n+read -rep $'\\n' -p \"What is the Pinot version for second commitHash? [default: 0.5.0] \" -r\n+if [[ ! $REPLY == \"\" ]]; then\n+  pinot_version_2=$REPLY\n+fi\n+\n+# Building targets\n+read -rep $'\\n' -p \"Do you want to build the first target? [default: no] \" -n 1 -r\n+if [[ $REPLY =~ ^[Yy]$ ]]; then\n+  printf \"Building the first target ... \\n\"\n+  ./build-release.sh \"$commitHash1\" \"$target_dir_1\"\n+fi\n+\n+read -rep $'\\n' -p \"Do you want to build the second target? [default: no] \" -n 1 -r\n+if [[ $REPLY =~ ^[Yy]$ ]]; then\n+  printf \"Building the second target ... \\n\"\n+  ./build-release.sh \"$commitHash2\" \"$target_dir_2\"\n+fi\n+\n+if [[ $(lsof -t -i:7001 -s TCP:LISTEN) || $(lsof -t -i:8001 -sTCP:LISTEN) || $(lsof -t -i:9001 -sTCP:LISTEN) || ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "21f25428ff80b3bbe3b187389fad0b72ff4d5030"}, "originalPosition": 63}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3NDI3Mjg2OnYy", "diffSide": "RIGHT", "path": "compatibility-verifier/comp-verifier.sh", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxNjoyOTowOVrOHFs2YQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQxNDowMDowN1rOHJHT4Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTczOTc0NQ==", "bodyText": "Not sure if lsof returns all ports even if you don't have permissions", "url": "https://github.com/apache/pinot/pull/5911#discussion_r475739745", "createdAt": "2020-08-24T16:29:09Z", "author": {"login": "mcvsubbu"}, "path": "compatibility-verifier/comp-verifier.sh", "diffHunk": "@@ -0,0 +1,145 @@\n+#!/bin/bash\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+#\n+\n+# A script that does rolling upgrade of Pinot components\n+# from one version to the other given 2 commit hashes. It first builds  \n+# Pinot in the 2 given directories and then upgrades in the following order:\n+# Controller -> Broker -> Server\n+\n+# verify correct usage of this script \n+if [[ $# -ne 4 ]]; then\n+    printf \"You used %s arguments \\n\" \"$#\"\n+    printf \"Usage: \\n ./comp-verifier.sh commitHash1 target_dir_1 commitHash2 target_dir_2 \\n\"\n+    exit 1\n+fi\n+\n+# get arguments\n+commitHash1=$1\n+target_dir_1=$2\n+commitHash2=$3\n+target_dir_2=$4\n+pinot_version_1=\"0.5.0\"\n+pinot_version_2=\"0.5.0\"\n+\n+read -rep $'\\n' -p \"What is the Pinot version for first commitHash? [default: 0.5.0] \" -r\n+if [[ ! $REPLY == \"\" ]]; then\n+  pinot_version_1=$REPLY\n+fi\n+read -rep $'\\n' -p \"What is the Pinot version for second commitHash? [default: 0.5.0] \" -r\n+if [[ ! $REPLY == \"\" ]]; then\n+  pinot_version_2=$REPLY\n+fi\n+\n+# Building targets\n+read -rep $'\\n' -p \"Do you want to build the first target? [default: no] \" -n 1 -r\n+if [[ $REPLY =~ ^[Yy]$ ]]; then\n+  printf \"Building the first target ... \\n\"\n+  ./build-release.sh \"$commitHash1\" \"$target_dir_1\"\n+fi\n+\n+read -rep $'\\n' -p \"Do you want to build the second target? [default: no] \" -n 1 -r\n+if [[ $REPLY =~ ^[Yy]$ ]]; then\n+  printf \"Building the second target ... \\n\"\n+  ./build-release.sh \"$commitHash2\" \"$target_dir_2\"\n+fi\n+\n+if [[ $(lsof -t -i:7001 -s TCP:LISTEN) || $(lsof -t -i:8001 -sTCP:LISTEN) || $(lsof -t -i:9001 -sTCP:LISTEN) || ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "21f25428ff80b3bbe3b187389fad0b72ff4d5030"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTMxOTAwOQ==", "bodyText": "I'm currently not sure how to circumvent this issue. I could try adding sudo, but that would prompt users with password.", "url": "https://github.com/apache/pinot/pull/5911#discussion_r479319009", "createdAt": "2020-08-28T14:00:07Z", "author": {"login": "saileshnankani"}, "path": "compatibility-verifier/comp-verifier.sh", "diffHunk": "@@ -0,0 +1,145 @@\n+#!/bin/bash\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+#\n+\n+# A script that does rolling upgrade of Pinot components\n+# from one version to the other given 2 commit hashes. It first builds  \n+# Pinot in the 2 given directories and then upgrades in the following order:\n+# Controller -> Broker -> Server\n+\n+# verify correct usage of this script \n+if [[ $# -ne 4 ]]; then\n+    printf \"You used %s arguments \\n\" \"$#\"\n+    printf \"Usage: \\n ./comp-verifier.sh commitHash1 target_dir_1 commitHash2 target_dir_2 \\n\"\n+    exit 1\n+fi\n+\n+# get arguments\n+commitHash1=$1\n+target_dir_1=$2\n+commitHash2=$3\n+target_dir_2=$4\n+pinot_version_1=\"0.5.0\"\n+pinot_version_2=\"0.5.0\"\n+\n+read -rep $'\\n' -p \"What is the Pinot version for first commitHash? [default: 0.5.0] \" -r\n+if [[ ! $REPLY == \"\" ]]; then\n+  pinot_version_1=$REPLY\n+fi\n+read -rep $'\\n' -p \"What is the Pinot version for second commitHash? [default: 0.5.0] \" -r\n+if [[ ! $REPLY == \"\" ]]; then\n+  pinot_version_2=$REPLY\n+fi\n+\n+# Building targets\n+read -rep $'\\n' -p \"Do you want to build the first target? [default: no] \" -n 1 -r\n+if [[ $REPLY =~ ^[Yy]$ ]]; then\n+  printf \"Building the first target ... \\n\"\n+  ./build-release.sh \"$commitHash1\" \"$target_dir_1\"\n+fi\n+\n+read -rep $'\\n' -p \"Do you want to build the second target? [default: no] \" -n 1 -r\n+if [[ $REPLY =~ ^[Yy]$ ]]; then\n+  printf \"Building the second target ... \\n\"\n+  ./build-release.sh \"$commitHash2\" \"$target_dir_2\"\n+fi\n+\n+if [[ $(lsof -t -i:7001 -s TCP:LISTEN) || $(lsof -t -i:8001 -sTCP:LISTEN) || $(lsof -t -i:9001 -sTCP:LISTEN) || ", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTczOTc0NQ=="}, "originalCommit": {"oid": "21f25428ff80b3bbe3b187389fad0b72ff4d5030"}, "originalPosition": 63}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3NDI3NTA1OnYy", "diffSide": "RIGHT", "path": "compatibility-verifier/comp-verifier.sh", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxNjoyOTo0NVrOHFs3vA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxNjoyOTo0NVrOHFs3vA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTc0MDA5Mg==", "bodyText": "remove this prompt. The user has entered the command, and is therefore ready to build the cluster.", "url": "https://github.com/apache/pinot/pull/5911#discussion_r475740092", "createdAt": "2020-08-24T16:29:45Z", "author": {"login": "mcvsubbu"}, "path": "compatibility-verifier/comp-verifier.sh", "diffHunk": "@@ -0,0 +1,145 @@\n+#!/bin/bash\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+#\n+\n+# A script that does rolling upgrade of Pinot components\n+# from one version to the other given 2 commit hashes. It first builds  \n+# Pinot in the 2 given directories and then upgrades in the following order:\n+# Controller -> Broker -> Server\n+\n+# verify correct usage of this script \n+if [[ $# -ne 4 ]]; then\n+    printf \"You used %s arguments \\n\" \"$#\"\n+    printf \"Usage: \\n ./comp-verifier.sh commitHash1 target_dir_1 commitHash2 target_dir_2 \\n\"\n+    exit 1\n+fi\n+\n+# get arguments\n+commitHash1=$1\n+target_dir_1=$2\n+commitHash2=$3\n+target_dir_2=$4\n+pinot_version_1=\"0.5.0\"\n+pinot_version_2=\"0.5.0\"\n+\n+read -rep $'\\n' -p \"What is the Pinot version for first commitHash? [default: 0.5.0] \" -r\n+if [[ ! $REPLY == \"\" ]]; then\n+  pinot_version_1=$REPLY\n+fi\n+read -rep $'\\n' -p \"What is the Pinot version for second commitHash? [default: 0.5.0] \" -r\n+if [[ ! $REPLY == \"\" ]]; then\n+  pinot_version_2=$REPLY\n+fi\n+\n+# Building targets\n+read -rep $'\\n' -p \"Do you want to build the first target? [default: no] \" -n 1 -r\n+if [[ $REPLY =~ ^[Yy]$ ]]; then\n+  printf \"Building the first target ... \\n\"\n+  ./build-release.sh \"$commitHash1\" \"$target_dir_1\"\n+fi\n+\n+read -rep $'\\n' -p \"Do you want to build the second target? [default: no] \" -n 1 -r\n+if [[ $REPLY =~ ^[Yy]$ ]]; then\n+  printf \"Building the second target ... \\n\"\n+  ./build-release.sh \"$commitHash2\" \"$target_dir_2\"\n+fi\n+\n+if [[ $(lsof -t -i:7001 -s TCP:LISTEN) || $(lsof -t -i:8001 -sTCP:LISTEN) || $(lsof -t -i:9001 -sTCP:LISTEN) || \n+      $(lsof -t -i:2181 -sTCP:LISTEN) || $(lsof -t -i:8011 -sTCP:LISTEN) ]]; then\n+  read -rep $'\\n' -p \"The ports need to be open. Do you want to kill existing processes on these ports? \" -n 1 -r\n+  if [[ $REPLY =~ ^[Yy]$ ]]; then\n+    ## Clean up the ports and kill any processes running on them\n+    if [[ $(lsof -t -i:7001 -s TCP:LISTEN) ]]; then\n+      kill -9 \"$(lsof -t -i:7001 -s TCP:LISTEN)\"\n+    fi\n+    if [[ $(lsof -t -i:8001 -s TCP:LISTEN) ]]; then\n+      kill -9 \"$(lsof -t -i:8001 -s TCP:LISTEN)\"\n+    fi\n+    if [[ $(lsof -t -i:9001 -s TCP:LISTEN) ]]; then\n+      kill -9 \"$(lsof -t -i:9001 -s TCP:LISTEN)\" \n+    fi\n+    if [[ $(lsof -t -i:2181 -s TCP:LISTEN) ]]; then\n+      kill -9 \"$(lsof -t -i:2181 -s TCP:LISTEN)\"\n+    fi\n+    if [[ $(lsof -t -i:8011 -s TCP:LISTEN) ]]; then\n+      kill -9 \"$(lsof -t -i:8011 -s TCP:LISTEN)\"\n+    fi\n+  fi\n+fi\n+\n+read -rep $'\\n' -p \"Do you want to build the cluster with first commit? [default: no] \" -n 1 -r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "21f25428ff80b3bbe3b187389fad0b72ff4d5030"}, "originalPosition": 86}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3NDI3NjQzOnYy", "diffSide": "RIGHT", "path": "compatibility-verifier/comp-verifier.sh", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxNjozMDowNFrOHFs4hg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxNjozMDowNFrOHFs4hg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTc0MDI5NA==", "bodyText": "You don't need these prompts.", "url": "https://github.com/apache/pinot/pull/5911#discussion_r475740294", "createdAt": "2020-08-24T16:30:04Z", "author": {"login": "mcvsubbu"}, "path": "compatibility-verifier/comp-verifier.sh", "diffHunk": "@@ -0,0 +1,145 @@\n+#!/bin/bash\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+#\n+\n+# A script that does rolling upgrade of Pinot components\n+# from one version to the other given 2 commit hashes. It first builds  \n+# Pinot in the 2 given directories and then upgrades in the following order:\n+# Controller -> Broker -> Server\n+\n+# verify correct usage of this script \n+if [[ $# -ne 4 ]]; then\n+    printf \"You used %s arguments \\n\" \"$#\"\n+    printf \"Usage: \\n ./comp-verifier.sh commitHash1 target_dir_1 commitHash2 target_dir_2 \\n\"\n+    exit 1\n+fi\n+\n+# get arguments\n+commitHash1=$1\n+target_dir_1=$2\n+commitHash2=$3\n+target_dir_2=$4\n+pinot_version_1=\"0.5.0\"\n+pinot_version_2=\"0.5.0\"\n+\n+read -rep $'\\n' -p \"What is the Pinot version for first commitHash? [default: 0.5.0] \" -r\n+if [[ ! $REPLY == \"\" ]]; then\n+  pinot_version_1=$REPLY\n+fi\n+read -rep $'\\n' -p \"What is the Pinot version for second commitHash? [default: 0.5.0] \" -r\n+if [[ ! $REPLY == \"\" ]]; then\n+  pinot_version_2=$REPLY\n+fi\n+\n+# Building targets\n+read -rep $'\\n' -p \"Do you want to build the first target? [default: no] \" -n 1 -r\n+if [[ $REPLY =~ ^[Yy]$ ]]; then\n+  printf \"Building the first target ... \\n\"\n+  ./build-release.sh \"$commitHash1\" \"$target_dir_1\"\n+fi\n+\n+read -rep $'\\n' -p \"Do you want to build the second target? [default: no] \" -n 1 -r\n+if [[ $REPLY =~ ^[Yy]$ ]]; then\n+  printf \"Building the second target ... \\n\"\n+  ./build-release.sh \"$commitHash2\" \"$target_dir_2\"\n+fi\n+\n+if [[ $(lsof -t -i:7001 -s TCP:LISTEN) || $(lsof -t -i:8001 -sTCP:LISTEN) || $(lsof -t -i:9001 -sTCP:LISTEN) || \n+      $(lsof -t -i:2181 -sTCP:LISTEN) || $(lsof -t -i:8011 -sTCP:LISTEN) ]]; then\n+  read -rep $'\\n' -p \"The ports need to be open. Do you want to kill existing processes on these ports? \" -n 1 -r\n+  if [[ $REPLY =~ ^[Yy]$ ]]; then\n+    ## Clean up the ports and kill any processes running on them\n+    if [[ $(lsof -t -i:7001 -s TCP:LISTEN) ]]; then\n+      kill -9 \"$(lsof -t -i:7001 -s TCP:LISTEN)\"\n+    fi\n+    if [[ $(lsof -t -i:8001 -s TCP:LISTEN) ]]; then\n+      kill -9 \"$(lsof -t -i:8001 -s TCP:LISTEN)\"\n+    fi\n+    if [[ $(lsof -t -i:9001 -s TCP:LISTEN) ]]; then\n+      kill -9 \"$(lsof -t -i:9001 -s TCP:LISTEN)\" \n+    fi\n+    if [[ $(lsof -t -i:2181 -s TCP:LISTEN) ]]; then\n+      kill -9 \"$(lsof -t -i:2181 -s TCP:LISTEN)\"\n+    fi\n+    if [[ $(lsof -t -i:8011 -s TCP:LISTEN) ]]; then\n+      kill -9 \"$(lsof -t -i:8011 -s TCP:LISTEN)\"\n+    fi\n+  fi\n+fi\n+\n+read -rep $'\\n' -p \"Do you want to build the cluster with first commit? [default: no] \" -n 1 -r\n+if [[ ! $REPLY =~ ^[Yy]$ ]]; then\n+  exit 0;\n+fi\n+\n+\n+# Setup initial cluster (with commit in target_dir_1)\n+\n+printf \"\\n\\nStarting Zookeeper ...\\n\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "21f25428ff80b3bbe3b187389fad0b72ff4d5030"}, "originalPosition": 94}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3NDI5MDE0OnYy", "diffSide": "RIGHT", "path": "compatibility-verifier/control-service.sh", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxNjozMzoyMVrOHFtA2Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxNjozMzoyMVrOHFtA2Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTc0MjQyNQ==", "bodyText": "You don't need pinot version", "url": "https://github.com/apache/pinot/pull/5911#discussion_r475742425", "createdAt": "2020-08-24T16:33:21Z", "author": {"login": "mcvsubbu"}, "path": "compatibility-verifier/control-service.sh", "diffHunk": "@@ -0,0 +1,104 @@\n+#!/bin/bash\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+#\n+\n+# A helper script that starts/stops given component for a given build of Pinot\n+# This script is intended to be called stand-alone or from comp-verifier.sh \n+# command syntax: ./control-service.sh command component target_dir pinot_version", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "21f25428ff80b3bbe3b187389fad0b72ff4d5030"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3NDI5OTU2OnYy", "diffSide": "RIGHT", "path": "compatibility-verifier/control-service.sh", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxNjozNDo0MlrOHFtH5A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxNjozNDo0MlrOHFtH5A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTc0NDIyOA==", "bodyText": "For now, just use the default ports on the service. Let us get a basic framework working. and then we can add the bells and whistles.", "url": "https://github.com/apache/pinot/pull/5911#discussion_r475744228", "createdAt": "2020-08-24T16:34:42Z", "author": {"login": "mcvsubbu"}, "path": "compatibility-verifier/control-service.sh", "diffHunk": "@@ -0,0 +1,104 @@\n+#!/bin/bash\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+#\n+\n+# A helper script that starts/stops given component for a given build of Pinot\n+# This script is intended to be called stand-alone or from comp-verifier.sh \n+# command syntax: ./control-service.sh command component target_dir pinot_version\n+\n+# verify correct usage of this script \n+if [[ $# -ne 4 ]]; then\n+  printf \"You used %s arguments \\n\" \"$#\"\n+  printf \"Usage: \\n ./control-service.sh command component target_dir pinot_version \\n\"\n+  exit 1\n+fi\n+\n+# get arguments\n+command=$1\n+component=$2\n+target_dir=$3\n+pinot_version=$4\n+\n+declare -a commands=(\"start\" \"stop\")\n+declare -a components=(\"controller\" \"broker\" \"server\" \"zookeeper\")\n+\n+if [[ ! -d \"$target_dir\"/incubator-pinot ]]; then\n+  printf \"%s/incubator-pinot does not exist \\n \" \"$target_dir\"\n+  exit 1\n+fi\n+\n+# Handle invalid arguments\n+if [[ ! \" ${commands[*]} \" =~ $command  ]]; then\n+  printf \"%s is not a valid command. Command must be one of: start and stop\\n\" \"$command\"\n+  printf \"Usage: \\n ./controlService.sh command component target_dir \\n\"\n+  exit 1\n+fi\n+if [[ ! \" ${components[*]} \" =~ $component  ]]; then\n+  printf \"Not a valid component. Needs to be one of: %s \\n\" \"${components[*]}\"\n+  exit 1\n+fi\n+\n+# Define ports for the test\n+zkPort=2181", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "21f25428ff80b3bbe3b187389fad0b72ff4d5030"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3NDMwMzc2OnYy", "diffSide": "RIGHT", "path": "compatibility-verifier/control-service.sh", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxNjozNToxNVrOHFtK5w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxNjozNToxNVrOHFtK5w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTc0NDk5OQ==", "bodyText": "Just start with default ports for now.", "url": "https://github.com/apache/pinot/pull/5911#discussion_r475744999", "createdAt": "2020-08-24T16:35:15Z", "author": {"login": "mcvsubbu"}, "path": "compatibility-verifier/control-service.sh", "diffHunk": "@@ -0,0 +1,104 @@\n+#!/bin/bash\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+#\n+\n+# A helper script that starts/stops given component for a given build of Pinot\n+# This script is intended to be called stand-alone or from comp-verifier.sh \n+# command syntax: ./control-service.sh command component target_dir pinot_version\n+\n+# verify correct usage of this script \n+if [[ $# -ne 4 ]]; then\n+  printf \"You used %s arguments \\n\" \"$#\"\n+  printf \"Usage: \\n ./control-service.sh command component target_dir pinot_version \\n\"\n+  exit 1\n+fi\n+\n+# get arguments\n+command=$1\n+component=$2\n+target_dir=$3\n+pinot_version=$4\n+\n+declare -a commands=(\"start\" \"stop\")\n+declare -a components=(\"controller\" \"broker\" \"server\" \"zookeeper\")\n+\n+if [[ ! -d \"$target_dir\"/incubator-pinot ]]; then\n+  printf \"%s/incubator-pinot does not exist \\n \" \"$target_dir\"\n+  exit 1\n+fi\n+\n+# Handle invalid arguments\n+if [[ ! \" ${commands[*]} \" =~ $command  ]]; then\n+  printf \"%s is not a valid command. Command must be one of: start and stop\\n\" \"$command\"\n+  printf \"Usage: \\n ./controlService.sh command component target_dir \\n\"\n+  exit 1\n+fi\n+if [[ ! \" ${components[*]} \" =~ $component  ]]; then\n+  printf \"Not a valid component. Needs to be one of: %s \\n\" \"${components[*]}\"\n+  exit 1\n+fi\n+\n+# Define ports for the test\n+zkPort=2181\n+localhost=2181\n+controllerPort=9001\n+brokerPort=7001\n+serverPort=8001\n+serverAdminPort=8011\n+\n+if [[ \"$command\" == \"start\" ]]; then\n+  # Navigate to the directory containing the scripts\n+  if [[ $pinot_version == \"0.3.0\" ]]; then\n+  pushd \"$target_dir\"/incubator-pinot/pinot-distribution/target/apache-pinot-incubating-\"$pinot_version\"-SNAPSHOT-bin/apache-pinot-incubating-\"$pinot_version\"-SNAPSHOT-bin/bin || exit 1\n+  elif [[ $pinot_version == \"0.4.0\" ]]; then\n+  pushd \"$target_dir\"/incubator-pinot/pinot-distribution/target/apache-pinot-incubating-\"$pinot_version\"-SNAPSHOT-bin/apache-pinot-incubating-\"$pinot_version\"-SNAPSHOT-bin/bin || exit 1\n+  else\n+  pushd \"$target_dir\"/incubator-pinot/pinot-distribution/target/apache-pinot-incubating-\"$pinot_version\"-SNAPSHOT-bin/apache-pinot-incubating-\"$pinot_version\"-SNAPSHOT-bin/bin || exit 1\n+  fi\n+\n+  # Start the desired component\n+  # Upon start, save the pid of the process for a component into a file in /tmp/{component}.pid, which is then used to stop it\n+  if [[ \"$component\" == \"controller\" ]]; then\n+    sh -c 'echo $$ > /tmp/controller.pid; exec ./pinot-admin.sh StartController -zkAddress localhost:$0 -clusterName PinotCluster -controllerPort $1 > /tmp/pinot-controller.log' ${localhost} \"${controllerPort}\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "21f25428ff80b3bbe3b187389fad0b72ff4d5030"}, "originalPosition": 78}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5Njg4MDQwOnYy", "diffSide": "RIGHT", "path": "compatibility-verifier/compCheck.sh", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQxNjowMTo0M1rOHJMCQA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQxNjowMTo0M1rOHJMCQA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTM5NjQxNg==", "bodyText": "Please move all the functions to the top and main code below the function defintions", "url": "https://github.com/apache/pinot/pull/5911#discussion_r479396416", "createdAt": "2020-08-28T16:01:43Z", "author": {"login": "mcvsubbu"}, "path": "compatibility-verifier/compCheck.sh", "diffHunk": "@@ -0,0 +1,210 @@\n+#!/bin/bash\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+#\n+\n+# A script that does rolling upgrade of Pinot components\n+# from one version to the other given 2 commit hashes. It first builds  \n+# Pinot in the 2 given directories and then upgrades in the following order:\n+# Controller -> Broker -> Server\n+\n+declare -a components=(\"controller\" \"broker\" \"server\" \"zookeeper\")\n+\n+# get usage of the script \n+function usage() {\n+  command=$1\n+  if [[ \"$command\" =~ compCheck.sh$ ]] ; then\n+    echo \"Usage: $command olderCommit newerCommit [workingDir]\"\n+  elif [[ \"$command\" =~ checkoutAndBuild$ ]]; then\n+    echo \"Usage: $command commitHash dirName\"\n+  elif [[ \"$command\" =~ startService$ ]]; then\n+    echo \"Usage: $command serviceName dirName\"\n+  elif [[ \"$command\" =~ stopService$ ]]; then\n+    echo \"Usage: $command serviceName\"\n+  fi\n+  exit 1\n+}\n+\n+# cleanup the temporary directory when exiting the script\n+function cleanup() {\n+  if [ -n \"$tmpDir\" ] && [ -d \"$tmpDir\" ]; then\n+    rm -rf \"$tmpDir\"\n+  fi\n+}\n+\n+# cleanp the temporary directory when the bash script exits \n+trap cleanup EXIT", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cf971ba04fb5b0ca2f2ac0dd115ae2d1836d62bd"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5Njg4MzI1OnYy", "diffSide": "RIGHT", "path": "compatibility-verifier/compCheck.sh", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQxNjowMjoyN1rOHJMD8A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQxNjowMjoyN1rOHJMD8A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTM5Njg0OA==", "bodyText": "Since these are internal function calls, you don't need to check for usage here", "url": "https://github.com/apache/pinot/pull/5911#discussion_r479396848", "createdAt": "2020-08-28T16:02:27Z", "author": {"login": "mcvsubbu"}, "path": "compatibility-verifier/compCheck.sh", "diffHunk": "@@ -0,0 +1,210 @@\n+#!/bin/bash\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+#\n+\n+# A script that does rolling upgrade of Pinot components\n+# from one version to the other given 2 commit hashes. It first builds  \n+# Pinot in the 2 given directories and then upgrades in the following order:\n+# Controller -> Broker -> Server\n+\n+declare -a components=(\"controller\" \"broker\" \"server\" \"zookeeper\")\n+\n+# get usage of the script \n+function usage() {\n+  command=$1\n+  if [[ \"$command\" =~ compCheck.sh$ ]] ; then\n+    echo \"Usage: $command olderCommit newerCommit [workingDir]\"\n+  elif [[ \"$command\" =~ checkoutAndBuild$ ]]; then\n+    echo \"Usage: $command commitHash dirName\"\n+  elif [[ \"$command\" =~ startService$ ]]; then\n+    echo \"Usage: $command serviceName dirName\"\n+  elif [[ \"$command\" =~ stopService$ ]]; then\n+    echo \"Usage: $command serviceName\"\n+  fi\n+  exit 1\n+}\n+\n+# cleanup the temporary directory when exiting the script\n+function cleanup() {\n+  if [ -n \"$tmpDir\" ] && [ -d \"$tmpDir\" ]; then\n+    rm -rf \"$tmpDir\"\n+  fi\n+}\n+\n+# cleanp the temporary directory when the bash script exits \n+trap cleanup EXIT\n+\n+if [ $# -lt 2 ] || [ $# -gt 3 ] ; then\n+  usage compCheck\n+fi\n+\n+# get arguments\n+olderCommit=$1\n+newerCommit=$2 \n+\n+if [ -n \"$3\" ]; then\n+  workingDir=$3\n+  if [ -d \"$workingDir\" ]; then\n+    echo \"Directory ${workingDir} already exists. Use a new directory.\"\n+    exit 1\n+  fi\n+else\n+  # use a temp directory in case workingDir is not provided\n+  tmpDir=$(mktemp -d 2>/dev/null || mktemp -d -t 'mytmpdir')\n+  workingDir=$tmpDir\n+fi\n+\n+\n+# This function builds Pinot given a specific commit hash and target directory\n+function checkoutAndBuild() {\n+  if [ $# -ne 2 ]; then ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cf971ba04fb5b0ca2f2ac0dd115ae2d1836d62bd"}, "originalPosition": 76}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5Njg4NDYyOnYy", "diffSide": "RIGHT", "path": "compatibility-verifier/compCheck.sh", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQxNjowMjo0OVrOHJMEuQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQxNjowMjo0OVrOHJMEuQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTM5NzA0OQ==", "bodyText": "dont need usage check", "url": "https://github.com/apache/pinot/pull/5911#discussion_r479397049", "createdAt": "2020-08-28T16:02:49Z", "author": {"login": "mcvsubbu"}, "path": "compatibility-verifier/compCheck.sh", "diffHunk": "@@ -0,0 +1,210 @@\n+#!/bin/bash\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+#\n+\n+# A script that does rolling upgrade of Pinot components\n+# from one version to the other given 2 commit hashes. It first builds  \n+# Pinot in the 2 given directories and then upgrades in the following order:\n+# Controller -> Broker -> Server\n+\n+declare -a components=(\"controller\" \"broker\" \"server\" \"zookeeper\")\n+\n+# get usage of the script \n+function usage() {\n+  command=$1\n+  if [[ \"$command\" =~ compCheck.sh$ ]] ; then\n+    echo \"Usage: $command olderCommit newerCommit [workingDir]\"\n+  elif [[ \"$command\" =~ checkoutAndBuild$ ]]; then\n+    echo \"Usage: $command commitHash dirName\"\n+  elif [[ \"$command\" =~ startService$ ]]; then\n+    echo \"Usage: $command serviceName dirName\"\n+  elif [[ \"$command\" =~ stopService$ ]]; then\n+    echo \"Usage: $command serviceName\"\n+  fi\n+  exit 1\n+}\n+\n+# cleanup the temporary directory when exiting the script\n+function cleanup() {\n+  if [ -n \"$tmpDir\" ] && [ -d \"$tmpDir\" ]; then\n+    rm -rf \"$tmpDir\"\n+  fi\n+}\n+\n+# cleanp the temporary directory when the bash script exits \n+trap cleanup EXIT\n+\n+if [ $# -lt 2 ] || [ $# -gt 3 ] ; then\n+  usage compCheck\n+fi\n+\n+# get arguments\n+olderCommit=$1\n+newerCommit=$2 \n+\n+if [ -n \"$3\" ]; then\n+  workingDir=$3\n+  if [ -d \"$workingDir\" ]; then\n+    echo \"Directory ${workingDir} already exists. Use a new directory.\"\n+    exit 1\n+  fi\n+else\n+  # use a temp directory in case workingDir is not provided\n+  tmpDir=$(mktemp -d 2>/dev/null || mktemp -d -t 'mytmpdir')\n+  workingDir=$tmpDir\n+fi\n+\n+\n+# This function builds Pinot given a specific commit hash and target directory\n+function checkoutAndBuild() {\n+  if [ $# -ne 2 ]; then \n+    usage checkoutAndBuild\n+  fi\n+  commitHash=$1\n+  targetDir=$2\n+  \n+  pushd \"$targetDir\" || exit 1\n+  git init\n+  git remote add origin https://github.com/apache/incubator-pinot\n+  git fetch --depth 1 origin \"$commitHash\"\n+  git checkout FETCH_HEAD\n+  mvn install package -DskipTests -Pbin-dist\n+  popd || exit 1\n+}\n+\n+# Given a component and directory, start that version of the specific component \n+function startService() {\n+  if [ $# -ne 2 ]; then ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cf971ba04fb5b0ca2f2ac0dd115ae2d1836d62bd"}, "originalPosition": 93}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5Njg4NjEyOnYy", "diffSide": "RIGHT", "path": "compatibility-verifier/compCheck.sh", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQxNjowMzoxMFrOHJMFiw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQxNjowMzoxMFrOHJMFiw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTM5NzI1OQ==", "bodyText": "dont need this check", "url": "https://github.com/apache/pinot/pull/5911#discussion_r479397259", "createdAt": "2020-08-28T16:03:10Z", "author": {"login": "mcvsubbu"}, "path": "compatibility-verifier/compCheck.sh", "diffHunk": "@@ -0,0 +1,210 @@\n+#!/bin/bash\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+#\n+\n+# A script that does rolling upgrade of Pinot components\n+# from one version to the other given 2 commit hashes. It first builds  \n+# Pinot in the 2 given directories and then upgrades in the following order:\n+# Controller -> Broker -> Server\n+\n+declare -a components=(\"controller\" \"broker\" \"server\" \"zookeeper\")\n+\n+# get usage of the script \n+function usage() {\n+  command=$1\n+  if [[ \"$command\" =~ compCheck.sh$ ]] ; then\n+    echo \"Usage: $command olderCommit newerCommit [workingDir]\"\n+  elif [[ \"$command\" =~ checkoutAndBuild$ ]]; then\n+    echo \"Usage: $command commitHash dirName\"\n+  elif [[ \"$command\" =~ startService$ ]]; then\n+    echo \"Usage: $command serviceName dirName\"\n+  elif [[ \"$command\" =~ stopService$ ]]; then\n+    echo \"Usage: $command serviceName\"\n+  fi\n+  exit 1\n+}\n+\n+# cleanup the temporary directory when exiting the script\n+function cleanup() {\n+  if [ -n \"$tmpDir\" ] && [ -d \"$tmpDir\" ]; then\n+    rm -rf \"$tmpDir\"\n+  fi\n+}\n+\n+# cleanp the temporary directory when the bash script exits \n+trap cleanup EXIT\n+\n+if [ $# -lt 2 ] || [ $# -gt 3 ] ; then\n+  usage compCheck\n+fi\n+\n+# get arguments\n+olderCommit=$1\n+newerCommit=$2 \n+\n+if [ -n \"$3\" ]; then\n+  workingDir=$3\n+  if [ -d \"$workingDir\" ]; then\n+    echo \"Directory ${workingDir} already exists. Use a new directory.\"\n+    exit 1\n+  fi\n+else\n+  # use a temp directory in case workingDir is not provided\n+  tmpDir=$(mktemp -d 2>/dev/null || mktemp -d -t 'mytmpdir')\n+  workingDir=$tmpDir\n+fi\n+\n+\n+# This function builds Pinot given a specific commit hash and target directory\n+function checkoutAndBuild() {\n+  if [ $# -ne 2 ]; then \n+    usage checkoutAndBuild\n+  fi\n+  commitHash=$1\n+  targetDir=$2\n+  \n+  pushd \"$targetDir\" || exit 1\n+  git init\n+  git remote add origin https://github.com/apache/incubator-pinot\n+  git fetch --depth 1 origin \"$commitHash\"\n+  git checkout FETCH_HEAD\n+  mvn install package -DskipTests -Pbin-dist\n+  popd || exit 1\n+}\n+\n+# Given a component and directory, start that version of the specific component \n+function startService() {\n+  if [ $# -ne 2 ]; then \n+    usage startService\n+  fi\n+  serviceName=$1\n+  dirName=$2\n+  if [[ ! \" ${components[*]} \" =~ $serviceName ]]; then", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cf971ba04fb5b0ca2f2ac0dd115ae2d1836d62bd"}, "originalPosition": 98}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5Njg4ODU1OnYy", "diffSide": "RIGHT", "path": "compatibility-verifier/compCheck.sh", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQxNjowMzo1NlrOHJMG_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQxNjowMzo1NlrOHJMG_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTM5NzYyOA==", "bodyText": "remove", "url": "https://github.com/apache/pinot/pull/5911#discussion_r479397628", "createdAt": "2020-08-28T16:03:56Z", "author": {"login": "mcvsubbu"}, "path": "compatibility-verifier/compCheck.sh", "diffHunk": "@@ -0,0 +1,210 @@\n+#!/bin/bash\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+#\n+\n+# A script that does rolling upgrade of Pinot components\n+# from one version to the other given 2 commit hashes. It first builds  \n+# Pinot in the 2 given directories and then upgrades in the following order:\n+# Controller -> Broker -> Server\n+\n+declare -a components=(\"controller\" \"broker\" \"server\" \"zookeeper\")\n+\n+# get usage of the script \n+function usage() {\n+  command=$1\n+  if [[ \"$command\" =~ compCheck.sh$ ]] ; then\n+    echo \"Usage: $command olderCommit newerCommit [workingDir]\"\n+  elif [[ \"$command\" =~ checkoutAndBuild$ ]]; then\n+    echo \"Usage: $command commitHash dirName\"\n+  elif [[ \"$command\" =~ startService$ ]]; then\n+    echo \"Usage: $command serviceName dirName\"\n+  elif [[ \"$command\" =~ stopService$ ]]; then\n+    echo \"Usage: $command serviceName\"\n+  fi\n+  exit 1\n+}\n+\n+# cleanup the temporary directory when exiting the script\n+function cleanup() {\n+  if [ -n \"$tmpDir\" ] && [ -d \"$tmpDir\" ]; then\n+    rm -rf \"$tmpDir\"\n+  fi\n+}\n+\n+# cleanp the temporary directory when the bash script exits \n+trap cleanup EXIT\n+\n+if [ $# -lt 2 ] || [ $# -gt 3 ] ; then\n+  usage compCheck\n+fi\n+\n+# get arguments\n+olderCommit=$1\n+newerCommit=$2 \n+\n+if [ -n \"$3\" ]; then\n+  workingDir=$3\n+  if [ -d \"$workingDir\" ]; then\n+    echo \"Directory ${workingDir} already exists. Use a new directory.\"\n+    exit 1\n+  fi\n+else\n+  # use a temp directory in case workingDir is not provided\n+  tmpDir=$(mktemp -d 2>/dev/null || mktemp -d -t 'mytmpdir')\n+  workingDir=$tmpDir\n+fi\n+\n+\n+# This function builds Pinot given a specific commit hash and target directory\n+function checkoutAndBuild() {\n+  if [ $# -ne 2 ]; then \n+    usage checkoutAndBuild\n+  fi\n+  commitHash=$1\n+  targetDir=$2\n+  \n+  pushd \"$targetDir\" || exit 1\n+  git init\n+  git remote add origin https://github.com/apache/incubator-pinot\n+  git fetch --depth 1 origin \"$commitHash\"\n+  git checkout FETCH_HEAD\n+  mvn install package -DskipTests -Pbin-dist\n+  popd || exit 1\n+}\n+\n+# Given a component and directory, start that version of the specific component \n+function startService() {\n+  if [ $# -ne 2 ]; then \n+    usage startService\n+  fi\n+  serviceName=$1\n+  dirName=$2\n+  if [[ ! \" ${components[*]} \" =~ $serviceName ]]; then\n+    printf \"Not a valid component. Needs to be one of: %s \\n\" \"${components[*]}\"\n+    exit 1\n+  fi\n+  # Upon start, save the pid of the process for a component into a file in /tmp/{component}.pid, which is then used to stop it\n+  pushd \"$dirName\"/pinot-tools/target/pinot-tools-pkg/bin  || exit 1\n+  if [ \"$serviceName\" = \"zookeeper\" ]; then\n+    sh -c 'echo $$ > /tmp/zookeeper.pid; exec ./pinot-admin.sh StartZookeeper' &\n+  elif [ \"$serviceName\" = \"controller\" ]; then \n+    sh -c 'echo $$ > /tmp/controller.pid; exec ./pinot-admin.sh StartController' &  \n+  elif [ \"$serviceName\" = \"broker\" ]; then\n+    sh -c 'echo $$ > /tmp/broker.pid; exec ./pinot-admin.sh StartBroker' &\n+  elif [ \"$serviceName\" = \"server\" ]; then\n+    sh -c 'echo $$ > /tmp/server.pid; exec ./pinot-admin.sh StartServer' &\n+  fi \n+  popd || exit 1\n+}\n+\n+# Given a component, check if it known to be running and stop that specific component\n+function stopService() {\n+  if [ $# -ne 1 ]; then ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cf971ba04fb5b0ca2f2ac0dd115ae2d1836d62bd"}, "originalPosition": 118}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5Njg4OTA1OnYy", "diffSide": "RIGHT", "path": "compatibility-verifier/compCheck.sh", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQxNjowNDowNFrOHJMHSQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQxNjowNDowNFrOHJMHSQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTM5NzcwNQ==", "bodyText": "remove", "url": "https://github.com/apache/pinot/pull/5911#discussion_r479397705", "createdAt": "2020-08-28T16:04:04Z", "author": {"login": "mcvsubbu"}, "path": "compatibility-verifier/compCheck.sh", "diffHunk": "@@ -0,0 +1,210 @@\n+#!/bin/bash\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+#\n+\n+# A script that does rolling upgrade of Pinot components\n+# from one version to the other given 2 commit hashes. It first builds  \n+# Pinot in the 2 given directories and then upgrades in the following order:\n+# Controller -> Broker -> Server\n+\n+declare -a components=(\"controller\" \"broker\" \"server\" \"zookeeper\")\n+\n+# get usage of the script \n+function usage() {\n+  command=$1\n+  if [[ \"$command\" =~ compCheck.sh$ ]] ; then\n+    echo \"Usage: $command olderCommit newerCommit [workingDir]\"\n+  elif [[ \"$command\" =~ checkoutAndBuild$ ]]; then\n+    echo \"Usage: $command commitHash dirName\"\n+  elif [[ \"$command\" =~ startService$ ]]; then\n+    echo \"Usage: $command serviceName dirName\"\n+  elif [[ \"$command\" =~ stopService$ ]]; then\n+    echo \"Usage: $command serviceName\"\n+  fi\n+  exit 1\n+}\n+\n+# cleanup the temporary directory when exiting the script\n+function cleanup() {\n+  if [ -n \"$tmpDir\" ] && [ -d \"$tmpDir\" ]; then\n+    rm -rf \"$tmpDir\"\n+  fi\n+}\n+\n+# cleanp the temporary directory when the bash script exits \n+trap cleanup EXIT\n+\n+if [ $# -lt 2 ] || [ $# -gt 3 ] ; then\n+  usage compCheck\n+fi\n+\n+# get arguments\n+olderCommit=$1\n+newerCommit=$2 \n+\n+if [ -n \"$3\" ]; then\n+  workingDir=$3\n+  if [ -d \"$workingDir\" ]; then\n+    echo \"Directory ${workingDir} already exists. Use a new directory.\"\n+    exit 1\n+  fi\n+else\n+  # use a temp directory in case workingDir is not provided\n+  tmpDir=$(mktemp -d 2>/dev/null || mktemp -d -t 'mytmpdir')\n+  workingDir=$tmpDir\n+fi\n+\n+\n+# This function builds Pinot given a specific commit hash and target directory\n+function checkoutAndBuild() {\n+  if [ $# -ne 2 ]; then \n+    usage checkoutAndBuild\n+  fi\n+  commitHash=$1\n+  targetDir=$2\n+  \n+  pushd \"$targetDir\" || exit 1\n+  git init\n+  git remote add origin https://github.com/apache/incubator-pinot\n+  git fetch --depth 1 origin \"$commitHash\"\n+  git checkout FETCH_HEAD\n+  mvn install package -DskipTests -Pbin-dist\n+  popd || exit 1\n+}\n+\n+# Given a component and directory, start that version of the specific component \n+function startService() {\n+  if [ $# -ne 2 ]; then \n+    usage startService\n+  fi\n+  serviceName=$1\n+  dirName=$2\n+  if [[ ! \" ${components[*]} \" =~ $serviceName ]]; then\n+    printf \"Not a valid component. Needs to be one of: %s \\n\" \"${components[*]}\"\n+    exit 1\n+  fi\n+  # Upon start, save the pid of the process for a component into a file in /tmp/{component}.pid, which is then used to stop it\n+  pushd \"$dirName\"/pinot-tools/target/pinot-tools-pkg/bin  || exit 1\n+  if [ \"$serviceName\" = \"zookeeper\" ]; then\n+    sh -c 'echo $$ > /tmp/zookeeper.pid; exec ./pinot-admin.sh StartZookeeper' &\n+  elif [ \"$serviceName\" = \"controller\" ]; then \n+    sh -c 'echo $$ > /tmp/controller.pid; exec ./pinot-admin.sh StartController' &  \n+  elif [ \"$serviceName\" = \"broker\" ]; then\n+    sh -c 'echo $$ > /tmp/broker.pid; exec ./pinot-admin.sh StartBroker' &\n+  elif [ \"$serviceName\" = \"server\" ]; then\n+    sh -c 'echo $$ > /tmp/server.pid; exec ./pinot-admin.sh StartServer' &\n+  fi \n+  popd || exit 1\n+}\n+\n+# Given a component, check if it known to be running and stop that specific component\n+function stopService() {\n+  if [ $# -ne 1 ]; then \n+    usage stopService\n+  fi\n+  serviceName=$1\n+  if [[ ! \" ${components[*]} \" =~ $serviceName ]]; then", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cf971ba04fb5b0ca2f2ac0dd115ae2d1836d62bd"}, "originalPosition": 122}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5Njg5NDMyOnYy", "diffSide": "RIGHT", "path": "compatibility-verifier/compCheck.sh", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQxNjowNToyMFrOHJMKNw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQxNjowNToyMFrOHJMKNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTM5ODQ1NQ==", "bodyText": "create the pid file inside $dirName for the release that we are working with.", "url": "https://github.com/apache/pinot/pull/5911#discussion_r479398455", "createdAt": "2020-08-28T16:05:20Z", "author": {"login": "mcvsubbu"}, "path": "compatibility-verifier/compCheck.sh", "diffHunk": "@@ -0,0 +1,210 @@\n+#!/bin/bash\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+#\n+\n+# A script that does rolling upgrade of Pinot components\n+# from one version to the other given 2 commit hashes. It first builds  \n+# Pinot in the 2 given directories and then upgrades in the following order:\n+# Controller -> Broker -> Server\n+\n+declare -a components=(\"controller\" \"broker\" \"server\" \"zookeeper\")\n+\n+# get usage of the script \n+function usage() {\n+  command=$1\n+  if [[ \"$command\" =~ compCheck.sh$ ]] ; then\n+    echo \"Usage: $command olderCommit newerCommit [workingDir]\"\n+  elif [[ \"$command\" =~ checkoutAndBuild$ ]]; then\n+    echo \"Usage: $command commitHash dirName\"\n+  elif [[ \"$command\" =~ startService$ ]]; then\n+    echo \"Usage: $command serviceName dirName\"\n+  elif [[ \"$command\" =~ stopService$ ]]; then\n+    echo \"Usage: $command serviceName\"\n+  fi\n+  exit 1\n+}\n+\n+# cleanup the temporary directory when exiting the script\n+function cleanup() {\n+  if [ -n \"$tmpDir\" ] && [ -d \"$tmpDir\" ]; then\n+    rm -rf \"$tmpDir\"\n+  fi\n+}\n+\n+# cleanp the temporary directory when the bash script exits \n+trap cleanup EXIT\n+\n+if [ $# -lt 2 ] || [ $# -gt 3 ] ; then\n+  usage compCheck\n+fi\n+\n+# get arguments\n+olderCommit=$1\n+newerCommit=$2 \n+\n+if [ -n \"$3\" ]; then\n+  workingDir=$3\n+  if [ -d \"$workingDir\" ]; then\n+    echo \"Directory ${workingDir} already exists. Use a new directory.\"\n+    exit 1\n+  fi\n+else\n+  # use a temp directory in case workingDir is not provided\n+  tmpDir=$(mktemp -d 2>/dev/null || mktemp -d -t 'mytmpdir')\n+  workingDir=$tmpDir\n+fi\n+\n+\n+# This function builds Pinot given a specific commit hash and target directory\n+function checkoutAndBuild() {\n+  if [ $# -ne 2 ]; then \n+    usage checkoutAndBuild\n+  fi\n+  commitHash=$1\n+  targetDir=$2\n+  \n+  pushd \"$targetDir\" || exit 1\n+  git init\n+  git remote add origin https://github.com/apache/incubator-pinot\n+  git fetch --depth 1 origin \"$commitHash\"\n+  git checkout FETCH_HEAD\n+  mvn install package -DskipTests -Pbin-dist\n+  popd || exit 1\n+}\n+\n+# Given a component and directory, start that version of the specific component \n+function startService() {\n+  if [ $# -ne 2 ]; then \n+    usage startService\n+  fi\n+  serviceName=$1\n+  dirName=$2\n+  if [[ ! \" ${components[*]} \" =~ $serviceName ]]; then\n+    printf \"Not a valid component. Needs to be one of: %s \\n\" \"${components[*]}\"\n+    exit 1\n+  fi\n+  # Upon start, save the pid of the process for a component into a file in /tmp/{component}.pid, which is then used to stop it\n+  pushd \"$dirName\"/pinot-tools/target/pinot-tools-pkg/bin  || exit 1\n+  if [ \"$serviceName\" = \"zookeeper\" ]; then\n+    sh -c 'echo $$ > /tmp/zookeeper.pid; exec ./pinot-admin.sh StartZookeeper' &", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cf971ba04fb5b0ca2f2ac0dd115ae2d1836d62bd"}, "originalPosition": 105}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5NjkwMDM4OnYy", "diffSide": "RIGHT", "path": "compatibility-verifier/compCheck.sh", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQxNjowNzowN1rOHJMODQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQxNjowNzowN1rOHJMODQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTM5OTQzNw==", "bodyText": "add the full path name to pid file in this message. \"Pid file {} not found. Failed to stop component {}\"", "url": "https://github.com/apache/pinot/pull/5911#discussion_r479399437", "createdAt": "2020-08-28T16:07:07Z", "author": {"login": "mcvsubbu"}, "path": "compatibility-verifier/compCheck.sh", "diffHunk": "@@ -0,0 +1,210 @@\n+#!/bin/bash\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+#\n+\n+# A script that does rolling upgrade of Pinot components\n+# from one version to the other given 2 commit hashes. It first builds  \n+# Pinot in the 2 given directories and then upgrades in the following order:\n+# Controller -> Broker -> Server\n+\n+declare -a components=(\"controller\" \"broker\" \"server\" \"zookeeper\")\n+\n+# get usage of the script \n+function usage() {\n+  command=$1\n+  if [[ \"$command\" =~ compCheck.sh$ ]] ; then\n+    echo \"Usage: $command olderCommit newerCommit [workingDir]\"\n+  elif [[ \"$command\" =~ checkoutAndBuild$ ]]; then\n+    echo \"Usage: $command commitHash dirName\"\n+  elif [[ \"$command\" =~ startService$ ]]; then\n+    echo \"Usage: $command serviceName dirName\"\n+  elif [[ \"$command\" =~ stopService$ ]]; then\n+    echo \"Usage: $command serviceName\"\n+  fi\n+  exit 1\n+}\n+\n+# cleanup the temporary directory when exiting the script\n+function cleanup() {\n+  if [ -n \"$tmpDir\" ] && [ -d \"$tmpDir\" ]; then\n+    rm -rf \"$tmpDir\"\n+  fi\n+}\n+\n+# cleanp the temporary directory when the bash script exits \n+trap cleanup EXIT\n+\n+if [ $# -lt 2 ] || [ $# -gt 3 ] ; then\n+  usage compCheck\n+fi\n+\n+# get arguments\n+olderCommit=$1\n+newerCommit=$2 \n+\n+if [ -n \"$3\" ]; then\n+  workingDir=$3\n+  if [ -d \"$workingDir\" ]; then\n+    echo \"Directory ${workingDir} already exists. Use a new directory.\"\n+    exit 1\n+  fi\n+else\n+  # use a temp directory in case workingDir is not provided\n+  tmpDir=$(mktemp -d 2>/dev/null || mktemp -d -t 'mytmpdir')\n+  workingDir=$tmpDir\n+fi\n+\n+\n+# This function builds Pinot given a specific commit hash and target directory\n+function checkoutAndBuild() {\n+  if [ $# -ne 2 ]; then \n+    usage checkoutAndBuild\n+  fi\n+  commitHash=$1\n+  targetDir=$2\n+  \n+  pushd \"$targetDir\" || exit 1\n+  git init\n+  git remote add origin https://github.com/apache/incubator-pinot\n+  git fetch --depth 1 origin \"$commitHash\"\n+  git checkout FETCH_HEAD\n+  mvn install package -DskipTests -Pbin-dist\n+  popd || exit 1\n+}\n+\n+# Given a component and directory, start that version of the specific component \n+function startService() {\n+  if [ $# -ne 2 ]; then \n+    usage startService\n+  fi\n+  serviceName=$1\n+  dirName=$2\n+  if [[ ! \" ${components[*]} \" =~ $serviceName ]]; then\n+    printf \"Not a valid component. Needs to be one of: %s \\n\" \"${components[*]}\"\n+    exit 1\n+  fi\n+  # Upon start, save the pid of the process for a component into a file in /tmp/{component}.pid, which is then used to stop it\n+  pushd \"$dirName\"/pinot-tools/target/pinot-tools-pkg/bin  || exit 1\n+  if [ \"$serviceName\" = \"zookeeper\" ]; then\n+    sh -c 'echo $$ > /tmp/zookeeper.pid; exec ./pinot-admin.sh StartZookeeper' &\n+  elif [ \"$serviceName\" = \"controller\" ]; then \n+    sh -c 'echo $$ > /tmp/controller.pid; exec ./pinot-admin.sh StartController' &  \n+  elif [ \"$serviceName\" = \"broker\" ]; then\n+    sh -c 'echo $$ > /tmp/broker.pid; exec ./pinot-admin.sh StartBroker' &\n+  elif [ \"$serviceName\" = \"server\" ]; then\n+    sh -c 'echo $$ > /tmp/server.pid; exec ./pinot-admin.sh StartServer' &\n+  fi \n+  popd || exit 1\n+}\n+\n+# Given a component, check if it known to be running and stop that specific component\n+function stopService() {\n+  if [ $# -ne 1 ]; then \n+    usage stopService\n+  fi\n+  serviceName=$1\n+  if [[ ! \" ${components[*]} \" =~ $serviceName ]]; then\n+    printf \"Not a valid component. Needs to be one of: %s \\n\" \"${components[*]}\"\n+    exit 1\n+  fi\n+  if [ -f /tmp/\"${serviceName}\".pid ]; then \n+    servicePid=$(</tmp/\"${serviceName}\".pid)\n+    rm /tmp/\"${serviceName}\".pid\n+    if [ -n \"$servicePid\" ]; then\n+      kill -9 \"$servicePid\"\n+    fi\n+  else\n+    echo \"Can't stop component ${serviceName} since can't component ${serviceName} is not known to have been started.\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cf971ba04fb5b0ca2f2ac0dd115ae2d1836d62bd"}, "originalPosition": 133}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5NjkwNTkzOnYy", "diffSide": "RIGHT", "path": "compatibility-verifier/compCheck.sh", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQxNjowOTowMlrOHJMRuQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQxNjowOTowMlrOHJMRuQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTQwMDM3Nw==", "bodyText": "We need to run tests before/after each step, so there will be a lot of code between each stop and start. Don't put this as a function as yet.. It can be in the main code for now.", "url": "https://github.com/apache/pinot/pull/5911#discussion_r479400377", "createdAt": "2020-08-28T16:09:02Z", "author": {"login": "mcvsubbu"}, "path": "compatibility-verifier/compCheck.sh", "diffHunk": "@@ -0,0 +1,210 @@\n+#!/bin/bash\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+#\n+\n+# A script that does rolling upgrade of Pinot components\n+# from one version to the other given 2 commit hashes. It first builds  \n+# Pinot in the 2 given directories and then upgrades in the following order:\n+# Controller -> Broker -> Server\n+\n+declare -a components=(\"controller\" \"broker\" \"server\" \"zookeeper\")\n+\n+# get usage of the script \n+function usage() {\n+  command=$1\n+  if [[ \"$command\" =~ compCheck.sh$ ]] ; then\n+    echo \"Usage: $command olderCommit newerCommit [workingDir]\"\n+  elif [[ \"$command\" =~ checkoutAndBuild$ ]]; then\n+    echo \"Usage: $command commitHash dirName\"\n+  elif [[ \"$command\" =~ startService$ ]]; then\n+    echo \"Usage: $command serviceName dirName\"\n+  elif [[ \"$command\" =~ stopService$ ]]; then\n+    echo \"Usage: $command serviceName\"\n+  fi\n+  exit 1\n+}\n+\n+# cleanup the temporary directory when exiting the script\n+function cleanup() {\n+  if [ -n \"$tmpDir\" ] && [ -d \"$tmpDir\" ]; then\n+    rm -rf \"$tmpDir\"\n+  fi\n+}\n+\n+# cleanp the temporary directory when the bash script exits \n+trap cleanup EXIT\n+\n+if [ $# -lt 2 ] || [ $# -gt 3 ] ; then\n+  usage compCheck\n+fi\n+\n+# get arguments\n+olderCommit=$1\n+newerCommit=$2 \n+\n+if [ -n \"$3\" ]; then\n+  workingDir=$3\n+  if [ -d \"$workingDir\" ]; then\n+    echo \"Directory ${workingDir} already exists. Use a new directory.\"\n+    exit 1\n+  fi\n+else\n+  # use a temp directory in case workingDir is not provided\n+  tmpDir=$(mktemp -d 2>/dev/null || mktemp -d -t 'mytmpdir')\n+  workingDir=$tmpDir\n+fi\n+\n+\n+# This function builds Pinot given a specific commit hash and target directory\n+function checkoutAndBuild() {\n+  if [ $# -ne 2 ]; then \n+    usage checkoutAndBuild\n+  fi\n+  commitHash=$1\n+  targetDir=$2\n+  \n+  pushd \"$targetDir\" || exit 1\n+  git init\n+  git remote add origin https://github.com/apache/incubator-pinot\n+  git fetch --depth 1 origin \"$commitHash\"\n+  git checkout FETCH_HEAD\n+  mvn install package -DskipTests -Pbin-dist\n+  popd || exit 1\n+}\n+\n+# Given a component and directory, start that version of the specific component \n+function startService() {\n+  if [ $# -ne 2 ]; then \n+    usage startService\n+  fi\n+  serviceName=$1\n+  dirName=$2\n+  if [[ ! \" ${components[*]} \" =~ $serviceName ]]; then\n+    printf \"Not a valid component. Needs to be one of: %s \\n\" \"${components[*]}\"\n+    exit 1\n+  fi\n+  # Upon start, save the pid of the process for a component into a file in /tmp/{component}.pid, which is then used to stop it\n+  pushd \"$dirName\"/pinot-tools/target/pinot-tools-pkg/bin  || exit 1\n+  if [ \"$serviceName\" = \"zookeeper\" ]; then\n+    sh -c 'echo $$ > /tmp/zookeeper.pid; exec ./pinot-admin.sh StartZookeeper' &\n+  elif [ \"$serviceName\" = \"controller\" ]; then \n+    sh -c 'echo $$ > /tmp/controller.pid; exec ./pinot-admin.sh StartController' &  \n+  elif [ \"$serviceName\" = \"broker\" ]; then\n+    sh -c 'echo $$ > /tmp/broker.pid; exec ./pinot-admin.sh StartBroker' &\n+  elif [ \"$serviceName\" = \"server\" ]; then\n+    sh -c 'echo $$ > /tmp/server.pid; exec ./pinot-admin.sh StartServer' &\n+  fi \n+  popd || exit 1\n+}\n+\n+# Given a component, check if it known to be running and stop that specific component\n+function stopService() {\n+  if [ $# -ne 1 ]; then \n+    usage stopService\n+  fi\n+  serviceName=$1\n+  if [[ ! \" ${components[*]} \" =~ $serviceName ]]; then\n+    printf \"Not a valid component. Needs to be one of: %s \\n\" \"${components[*]}\"\n+    exit 1\n+  fi\n+  if [ -f /tmp/\"${serviceName}\".pid ]; then \n+    servicePid=$(</tmp/\"${serviceName}\".pid)\n+    rm /tmp/\"${serviceName}\".pid\n+    if [ -n \"$servicePid\" ]; then\n+      kill -9 \"$servicePid\"\n+    fi\n+  else\n+    echo \"Can't stop component ${serviceName} since can't component ${serviceName} is not known to have been started.\"\n+  fi\n+}\n+\n+# Starts a Pinot cluster given a specific target directory\n+function startServices() {\n+  dirName=$1\n+  startService zookeeper \"$dirName\"\n+  startService controller \"$dirName\"\n+  startService broker \"$dirName\"\n+  startService server \"$dirName\"\n+  echo \"Cluster started.\"\n+}\n+\n+# Stops the currently running Pinot cluster\n+function stopServices() {\n+  stopService controller\n+  stopService broker\n+  stopService server\n+  stopService zookeeper\n+  echo \"Cluster stopped.\"\n+} \n+\n+# upgrades the cluster by upgrading components one by one (Controller -> Broker -> Server) ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cf971ba04fb5b0ca2f2ac0dd115ae2d1836d62bd"}, "originalPosition": 156}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5NjkxMTgyOnYy", "diffSide": "RIGHT", "path": "compatibility-verifier/compCheck.sh", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQxNjoxMDozOVrOHJMVcA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQxNjoxMDozOVrOHJMVcA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTQwMTMyOA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            echo \"Building the first target ... \"\n          \n          \n            \n            echo \"Building old version \"", "url": "https://github.com/apache/pinot/pull/5911#discussion_r479401328", "createdAt": "2020-08-28T16:10:39Z", "author": {"login": "mcvsubbu"}, "path": "compatibility-verifier/compCheck.sh", "diffHunk": "@@ -0,0 +1,210 @@\n+#!/bin/bash\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+#\n+\n+# A script that does rolling upgrade of Pinot components\n+# from one version to the other given 2 commit hashes. It first builds  \n+# Pinot in the 2 given directories and then upgrades in the following order:\n+# Controller -> Broker -> Server\n+\n+declare -a components=(\"controller\" \"broker\" \"server\" \"zookeeper\")\n+\n+# get usage of the script \n+function usage() {\n+  command=$1\n+  if [[ \"$command\" =~ compCheck.sh$ ]] ; then\n+    echo \"Usage: $command olderCommit newerCommit [workingDir]\"\n+  elif [[ \"$command\" =~ checkoutAndBuild$ ]]; then\n+    echo \"Usage: $command commitHash dirName\"\n+  elif [[ \"$command\" =~ startService$ ]]; then\n+    echo \"Usage: $command serviceName dirName\"\n+  elif [[ \"$command\" =~ stopService$ ]]; then\n+    echo \"Usage: $command serviceName\"\n+  fi\n+  exit 1\n+}\n+\n+# cleanup the temporary directory when exiting the script\n+function cleanup() {\n+  if [ -n \"$tmpDir\" ] && [ -d \"$tmpDir\" ]; then\n+    rm -rf \"$tmpDir\"\n+  fi\n+}\n+\n+# cleanp the temporary directory when the bash script exits \n+trap cleanup EXIT\n+\n+if [ $# -lt 2 ] || [ $# -gt 3 ] ; then\n+  usage compCheck\n+fi\n+\n+# get arguments\n+olderCommit=$1\n+newerCommit=$2 \n+\n+if [ -n \"$3\" ]; then\n+  workingDir=$3\n+  if [ -d \"$workingDir\" ]; then\n+    echo \"Directory ${workingDir} already exists. Use a new directory.\"\n+    exit 1\n+  fi\n+else\n+  # use a temp directory in case workingDir is not provided\n+  tmpDir=$(mktemp -d 2>/dev/null || mktemp -d -t 'mytmpdir')\n+  workingDir=$tmpDir\n+fi\n+\n+\n+# This function builds Pinot given a specific commit hash and target directory\n+function checkoutAndBuild() {\n+  if [ $# -ne 2 ]; then \n+    usage checkoutAndBuild\n+  fi\n+  commitHash=$1\n+  targetDir=$2\n+  \n+  pushd \"$targetDir\" || exit 1\n+  git init\n+  git remote add origin https://github.com/apache/incubator-pinot\n+  git fetch --depth 1 origin \"$commitHash\"\n+  git checkout FETCH_HEAD\n+  mvn install package -DskipTests -Pbin-dist\n+  popd || exit 1\n+}\n+\n+# Given a component and directory, start that version of the specific component \n+function startService() {\n+  if [ $# -ne 2 ]; then \n+    usage startService\n+  fi\n+  serviceName=$1\n+  dirName=$2\n+  if [[ ! \" ${components[*]} \" =~ $serviceName ]]; then\n+    printf \"Not a valid component. Needs to be one of: %s \\n\" \"${components[*]}\"\n+    exit 1\n+  fi\n+  # Upon start, save the pid of the process for a component into a file in /tmp/{component}.pid, which is then used to stop it\n+  pushd \"$dirName\"/pinot-tools/target/pinot-tools-pkg/bin  || exit 1\n+  if [ \"$serviceName\" = \"zookeeper\" ]; then\n+    sh -c 'echo $$ > /tmp/zookeeper.pid; exec ./pinot-admin.sh StartZookeeper' &\n+  elif [ \"$serviceName\" = \"controller\" ]; then \n+    sh -c 'echo $$ > /tmp/controller.pid; exec ./pinot-admin.sh StartController' &  \n+  elif [ \"$serviceName\" = \"broker\" ]; then\n+    sh -c 'echo $$ > /tmp/broker.pid; exec ./pinot-admin.sh StartBroker' &\n+  elif [ \"$serviceName\" = \"server\" ]; then\n+    sh -c 'echo $$ > /tmp/server.pid; exec ./pinot-admin.sh StartServer' &\n+  fi \n+  popd || exit 1\n+}\n+\n+# Given a component, check if it known to be running and stop that specific component\n+function stopService() {\n+  if [ $# -ne 1 ]; then \n+    usage stopService\n+  fi\n+  serviceName=$1\n+  if [[ ! \" ${components[*]} \" =~ $serviceName ]]; then\n+    printf \"Not a valid component. Needs to be one of: %s \\n\" \"${components[*]}\"\n+    exit 1\n+  fi\n+  if [ -f /tmp/\"${serviceName}\".pid ]; then \n+    servicePid=$(</tmp/\"${serviceName}\".pid)\n+    rm /tmp/\"${serviceName}\".pid\n+    if [ -n \"$servicePid\" ]; then\n+      kill -9 \"$servicePid\"\n+    fi\n+  else\n+    echo \"Can't stop component ${serviceName} since can't component ${serviceName} is not known to have been started.\"\n+  fi\n+}\n+\n+# Starts a Pinot cluster given a specific target directory\n+function startServices() {\n+  dirName=$1\n+  startService zookeeper \"$dirName\"\n+  startService controller \"$dirName\"\n+  startService broker \"$dirName\"\n+  startService server \"$dirName\"\n+  echo \"Cluster started.\"\n+}\n+\n+# Stops the currently running Pinot cluster\n+function stopServices() {\n+  stopService controller\n+  stopService broker\n+  stopService server\n+  stopService zookeeper\n+  echo \"Cluster stopped.\"\n+} \n+\n+# upgrades the cluster by upgrading components one by one (Controller -> Broker -> Server) \n+function switchComponents() {\n+  dirName=$1\n+  stopService controller\n+  startService controller \"$dirName\"\n+  stopService broker\n+  startService broker \"$dirName\"\n+  stopService server\n+  startService server \"$dirName\"\n+}\n+\n+# Do rolling upgrade from olderCommit to newerCommit\n+function upgradeAndTest() {\n+  switchComponents \"$newTargetDir\"\n+  echo \"Rolling upgrade complete.\"\n+}\n+\n+# Do rolling upgrade from newerCommit to olderCommit\n+function downgradeAndTest() {\n+  switchComponents \"$oldTargetDir\"\n+  echo \"Rolling downgrade complete.\"\n+}\n+\n+# create subdirectories for given commits\n+oldTargetDir=\"$workingDir\"/oldTargetDir\n+newTargetDir=\"$workingDir\"/newTargetDir\n+\n+if ! mkdir -p \"$oldTargetDir\" \"$newTargetDir\"; then\n+  echo \"Failed to create target directory\"\n+  exit 1\n+fi\n+\n+# Building targets\n+echo \"Building the first target ... \"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cf971ba04fb5b0ca2f2ac0dd115ae2d1836d62bd"}, "originalPosition": 189}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5NjkxMzM4OnYy", "diffSide": "RIGHT", "path": "compatibility-verifier/compCheck.sh", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQxNjoxMTowN1rOHJMWYQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQxNjoxMTowN1rOHJMWYQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTQwMTU2OQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            echo \"Building the second target ...\"\n          \n          \n            \n            echo \"Building new version\"", "url": "https://github.com/apache/pinot/pull/5911#discussion_r479401569", "createdAt": "2020-08-28T16:11:07Z", "author": {"login": "mcvsubbu"}, "path": "compatibility-verifier/compCheck.sh", "diffHunk": "@@ -0,0 +1,210 @@\n+#!/bin/bash\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+#\n+\n+# A script that does rolling upgrade of Pinot components\n+# from one version to the other given 2 commit hashes. It first builds  \n+# Pinot in the 2 given directories and then upgrades in the following order:\n+# Controller -> Broker -> Server\n+\n+declare -a components=(\"controller\" \"broker\" \"server\" \"zookeeper\")\n+\n+# get usage of the script \n+function usage() {\n+  command=$1\n+  if [[ \"$command\" =~ compCheck.sh$ ]] ; then\n+    echo \"Usage: $command olderCommit newerCommit [workingDir]\"\n+  elif [[ \"$command\" =~ checkoutAndBuild$ ]]; then\n+    echo \"Usage: $command commitHash dirName\"\n+  elif [[ \"$command\" =~ startService$ ]]; then\n+    echo \"Usage: $command serviceName dirName\"\n+  elif [[ \"$command\" =~ stopService$ ]]; then\n+    echo \"Usage: $command serviceName\"\n+  fi\n+  exit 1\n+}\n+\n+# cleanup the temporary directory when exiting the script\n+function cleanup() {\n+  if [ -n \"$tmpDir\" ] && [ -d \"$tmpDir\" ]; then\n+    rm -rf \"$tmpDir\"\n+  fi\n+}\n+\n+# cleanp the temporary directory when the bash script exits \n+trap cleanup EXIT\n+\n+if [ $# -lt 2 ] || [ $# -gt 3 ] ; then\n+  usage compCheck\n+fi\n+\n+# get arguments\n+olderCommit=$1\n+newerCommit=$2 \n+\n+if [ -n \"$3\" ]; then\n+  workingDir=$3\n+  if [ -d \"$workingDir\" ]; then\n+    echo \"Directory ${workingDir} already exists. Use a new directory.\"\n+    exit 1\n+  fi\n+else\n+  # use a temp directory in case workingDir is not provided\n+  tmpDir=$(mktemp -d 2>/dev/null || mktemp -d -t 'mytmpdir')\n+  workingDir=$tmpDir\n+fi\n+\n+\n+# This function builds Pinot given a specific commit hash and target directory\n+function checkoutAndBuild() {\n+  if [ $# -ne 2 ]; then \n+    usage checkoutAndBuild\n+  fi\n+  commitHash=$1\n+  targetDir=$2\n+  \n+  pushd \"$targetDir\" || exit 1\n+  git init\n+  git remote add origin https://github.com/apache/incubator-pinot\n+  git fetch --depth 1 origin \"$commitHash\"\n+  git checkout FETCH_HEAD\n+  mvn install package -DskipTests -Pbin-dist\n+  popd || exit 1\n+}\n+\n+# Given a component and directory, start that version of the specific component \n+function startService() {\n+  if [ $# -ne 2 ]; then \n+    usage startService\n+  fi\n+  serviceName=$1\n+  dirName=$2\n+  if [[ ! \" ${components[*]} \" =~ $serviceName ]]; then\n+    printf \"Not a valid component. Needs to be one of: %s \\n\" \"${components[*]}\"\n+    exit 1\n+  fi\n+  # Upon start, save the pid of the process for a component into a file in /tmp/{component}.pid, which is then used to stop it\n+  pushd \"$dirName\"/pinot-tools/target/pinot-tools-pkg/bin  || exit 1\n+  if [ \"$serviceName\" = \"zookeeper\" ]; then\n+    sh -c 'echo $$ > /tmp/zookeeper.pid; exec ./pinot-admin.sh StartZookeeper' &\n+  elif [ \"$serviceName\" = \"controller\" ]; then \n+    sh -c 'echo $$ > /tmp/controller.pid; exec ./pinot-admin.sh StartController' &  \n+  elif [ \"$serviceName\" = \"broker\" ]; then\n+    sh -c 'echo $$ > /tmp/broker.pid; exec ./pinot-admin.sh StartBroker' &\n+  elif [ \"$serviceName\" = \"server\" ]; then\n+    sh -c 'echo $$ > /tmp/server.pid; exec ./pinot-admin.sh StartServer' &\n+  fi \n+  popd || exit 1\n+}\n+\n+# Given a component, check if it known to be running and stop that specific component\n+function stopService() {\n+  if [ $# -ne 1 ]; then \n+    usage stopService\n+  fi\n+  serviceName=$1\n+  if [[ ! \" ${components[*]} \" =~ $serviceName ]]; then\n+    printf \"Not a valid component. Needs to be one of: %s \\n\" \"${components[*]}\"\n+    exit 1\n+  fi\n+  if [ -f /tmp/\"${serviceName}\".pid ]; then \n+    servicePid=$(</tmp/\"${serviceName}\".pid)\n+    rm /tmp/\"${serviceName}\".pid\n+    if [ -n \"$servicePid\" ]; then\n+      kill -9 \"$servicePid\"\n+    fi\n+  else\n+    echo \"Can't stop component ${serviceName} since can't component ${serviceName} is not known to have been started.\"\n+  fi\n+}\n+\n+# Starts a Pinot cluster given a specific target directory\n+function startServices() {\n+  dirName=$1\n+  startService zookeeper \"$dirName\"\n+  startService controller \"$dirName\"\n+  startService broker \"$dirName\"\n+  startService server \"$dirName\"\n+  echo \"Cluster started.\"\n+}\n+\n+# Stops the currently running Pinot cluster\n+function stopServices() {\n+  stopService controller\n+  stopService broker\n+  stopService server\n+  stopService zookeeper\n+  echo \"Cluster stopped.\"\n+} \n+\n+# upgrades the cluster by upgrading components one by one (Controller -> Broker -> Server) \n+function switchComponents() {\n+  dirName=$1\n+  stopService controller\n+  startService controller \"$dirName\"\n+  stopService broker\n+  startService broker \"$dirName\"\n+  stopService server\n+  startService server \"$dirName\"\n+}\n+\n+# Do rolling upgrade from olderCommit to newerCommit\n+function upgradeAndTest() {\n+  switchComponents \"$newTargetDir\"\n+  echo \"Rolling upgrade complete.\"\n+}\n+\n+# Do rolling upgrade from newerCommit to olderCommit\n+function downgradeAndTest() {\n+  switchComponents \"$oldTargetDir\"\n+  echo \"Rolling downgrade complete.\"\n+}\n+\n+# create subdirectories for given commits\n+oldTargetDir=\"$workingDir\"/oldTargetDir\n+newTargetDir=\"$workingDir\"/newTargetDir\n+\n+if ! mkdir -p \"$oldTargetDir\" \"$newTargetDir\"; then\n+  echo \"Failed to create target directory\"\n+  exit 1\n+fi\n+\n+# Building targets\n+echo \"Building the first target ... \"\n+checkoutAndBuild \"$olderCommit\" \"$oldTargetDir\"\n+echo \"Building the second target ...\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cf971ba04fb5b0ca2f2ac0dd115ae2d1836d62bd"}, "originalPosition": 191}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5NjkxNjMwOnYy", "diffSide": "RIGHT", "path": "compatibility-verifier/compCheck.sh", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQxNjoxMjowMlrOHJMYOg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQxNjoxMjowMlrOHJMYOg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTQwMjA0Mg==", "bodyText": "unroll the switchcomponents function here", "url": "https://github.com/apache/pinot/pull/5911#discussion_r479402042", "createdAt": "2020-08-28T16:12:02Z", "author": {"login": "mcvsubbu"}, "path": "compatibility-verifier/compCheck.sh", "diffHunk": "@@ -0,0 +1,210 @@\n+#!/bin/bash\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+#\n+\n+# A script that does rolling upgrade of Pinot components\n+# from one version to the other given 2 commit hashes. It first builds  \n+# Pinot in the 2 given directories and then upgrades in the following order:\n+# Controller -> Broker -> Server\n+\n+declare -a components=(\"controller\" \"broker\" \"server\" \"zookeeper\")\n+\n+# get usage of the script \n+function usage() {\n+  command=$1\n+  if [[ \"$command\" =~ compCheck.sh$ ]] ; then\n+    echo \"Usage: $command olderCommit newerCommit [workingDir]\"\n+  elif [[ \"$command\" =~ checkoutAndBuild$ ]]; then\n+    echo \"Usage: $command commitHash dirName\"\n+  elif [[ \"$command\" =~ startService$ ]]; then\n+    echo \"Usage: $command serviceName dirName\"\n+  elif [[ \"$command\" =~ stopService$ ]]; then\n+    echo \"Usage: $command serviceName\"\n+  fi\n+  exit 1\n+}\n+\n+# cleanup the temporary directory when exiting the script\n+function cleanup() {\n+  if [ -n \"$tmpDir\" ] && [ -d \"$tmpDir\" ]; then\n+    rm -rf \"$tmpDir\"\n+  fi\n+}\n+\n+# cleanp the temporary directory when the bash script exits \n+trap cleanup EXIT\n+\n+if [ $# -lt 2 ] || [ $# -gt 3 ] ; then\n+  usage compCheck\n+fi\n+\n+# get arguments\n+olderCommit=$1\n+newerCommit=$2 \n+\n+if [ -n \"$3\" ]; then\n+  workingDir=$3\n+  if [ -d \"$workingDir\" ]; then\n+    echo \"Directory ${workingDir} already exists. Use a new directory.\"\n+    exit 1\n+  fi\n+else\n+  # use a temp directory in case workingDir is not provided\n+  tmpDir=$(mktemp -d 2>/dev/null || mktemp -d -t 'mytmpdir')\n+  workingDir=$tmpDir\n+fi\n+\n+\n+# This function builds Pinot given a specific commit hash and target directory\n+function checkoutAndBuild() {\n+  if [ $# -ne 2 ]; then \n+    usage checkoutAndBuild\n+  fi\n+  commitHash=$1\n+  targetDir=$2\n+  \n+  pushd \"$targetDir\" || exit 1\n+  git init\n+  git remote add origin https://github.com/apache/incubator-pinot\n+  git fetch --depth 1 origin \"$commitHash\"\n+  git checkout FETCH_HEAD\n+  mvn install package -DskipTests -Pbin-dist\n+  popd || exit 1\n+}\n+\n+# Given a component and directory, start that version of the specific component \n+function startService() {\n+  if [ $# -ne 2 ]; then \n+    usage startService\n+  fi\n+  serviceName=$1\n+  dirName=$2\n+  if [[ ! \" ${components[*]} \" =~ $serviceName ]]; then\n+    printf \"Not a valid component. Needs to be one of: %s \\n\" \"${components[*]}\"\n+    exit 1\n+  fi\n+  # Upon start, save the pid of the process for a component into a file in /tmp/{component}.pid, which is then used to stop it\n+  pushd \"$dirName\"/pinot-tools/target/pinot-tools-pkg/bin  || exit 1\n+  if [ \"$serviceName\" = \"zookeeper\" ]; then\n+    sh -c 'echo $$ > /tmp/zookeeper.pid; exec ./pinot-admin.sh StartZookeeper' &\n+  elif [ \"$serviceName\" = \"controller\" ]; then \n+    sh -c 'echo $$ > /tmp/controller.pid; exec ./pinot-admin.sh StartController' &  \n+  elif [ \"$serviceName\" = \"broker\" ]; then\n+    sh -c 'echo $$ > /tmp/broker.pid; exec ./pinot-admin.sh StartBroker' &\n+  elif [ \"$serviceName\" = \"server\" ]; then\n+    sh -c 'echo $$ > /tmp/server.pid; exec ./pinot-admin.sh StartServer' &\n+  fi \n+  popd || exit 1\n+}\n+\n+# Given a component, check if it known to be running and stop that specific component\n+function stopService() {\n+  if [ $# -ne 1 ]; then \n+    usage stopService\n+  fi\n+  serviceName=$1\n+  if [[ ! \" ${components[*]} \" =~ $serviceName ]]; then\n+    printf \"Not a valid component. Needs to be one of: %s \\n\" \"${components[*]}\"\n+    exit 1\n+  fi\n+  if [ -f /tmp/\"${serviceName}\".pid ]; then \n+    servicePid=$(</tmp/\"${serviceName}\".pid)\n+    rm /tmp/\"${serviceName}\".pid\n+    if [ -n \"$servicePid\" ]; then\n+      kill -9 \"$servicePid\"\n+    fi\n+  else\n+    echo \"Can't stop component ${serviceName} since can't component ${serviceName} is not known to have been started.\"\n+  fi\n+}\n+\n+# Starts a Pinot cluster given a specific target directory\n+function startServices() {\n+  dirName=$1\n+  startService zookeeper \"$dirName\"\n+  startService controller \"$dirName\"\n+  startService broker \"$dirName\"\n+  startService server \"$dirName\"\n+  echo \"Cluster started.\"\n+}\n+\n+# Stops the currently running Pinot cluster\n+function stopServices() {\n+  stopService controller\n+  stopService broker\n+  stopService server\n+  stopService zookeeper\n+  echo \"Cluster stopped.\"\n+} \n+\n+# upgrades the cluster by upgrading components one by one (Controller -> Broker -> Server) \n+function switchComponents() {\n+  dirName=$1\n+  stopService controller\n+  startService controller \"$dirName\"\n+  stopService broker\n+  startService broker \"$dirName\"\n+  stopService server\n+  startService server \"$dirName\"\n+}\n+\n+# Do rolling upgrade from olderCommit to newerCommit\n+function upgradeAndTest() {\n+  switchComponents \"$newTargetDir\"\n+  echo \"Rolling upgrade complete.\"\n+}\n+\n+# Do rolling upgrade from newerCommit to olderCommit\n+function downgradeAndTest() {\n+  switchComponents \"$oldTargetDir\"\n+  echo \"Rolling downgrade complete.\"\n+}\n+\n+# create subdirectories for given commits\n+oldTargetDir=\"$workingDir\"/oldTargetDir\n+newTargetDir=\"$workingDir\"/newTargetDir\n+\n+if ! mkdir -p \"$oldTargetDir\" \"$newTargetDir\"; then\n+  echo \"Failed to create target directory\"\n+  exit 1\n+fi\n+\n+# Building targets\n+echo \"Building the first target ... \"\n+checkoutAndBuild \"$olderCommit\" \"$oldTargetDir\"\n+echo \"Building the second target ...\"\n+checkoutAndBuild \"$newerCommit\" \"$newTargetDir\"\n+\n+# check that the default ports are open\n+if [ \"$(lsof -t -i:8097 -s TCP:LISTEN)\" ] || [ \"$(lsof -t -i:8098 -sTCP:LISTEN)\" ] || [ \"$(lsof -t -i:8099 -sTCP:LISTEN)\" ] || \n+     [ \"$(lsof -t -i:9000 -sTCP:LISTEN)\" ] || [ \"$(lsof -t -i:2181 -sTCP:LISTEN)\" ]; then\n+  echo \"Cannot start the components since the default ports are not open. Check any existing process that may be using the default ports.\"\n+  exit 1\n+fi\n+\n+# Setup initial cluster with olderCommit and do rolling upgrade\n+startServices \"$oldTargetDir\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cf971ba04fb5b0ca2f2ac0dd115ae2d1836d62bd"}, "originalPosition": 202}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5NjkxNzcwOnYy", "diffSide": "RIGHT", "path": "compatibility-verifier/compCheck.sh", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQxNjoxMjoyOVrOHJMZJQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQxNjoxMjoyOVrOHJMZJQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTQwMjI3Nw==", "bodyText": "remove lines 167 to 171 for now, we will add tests later", "url": "https://github.com/apache/pinot/pull/5911#discussion_r479402277", "createdAt": "2020-08-28T16:12:29Z", "author": {"login": "mcvsubbu"}, "path": "compatibility-verifier/compCheck.sh", "diffHunk": "@@ -0,0 +1,210 @@\n+#!/bin/bash\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+#\n+\n+# A script that does rolling upgrade of Pinot components\n+# from one version to the other given 2 commit hashes. It first builds  \n+# Pinot in the 2 given directories and then upgrades in the following order:\n+# Controller -> Broker -> Server\n+\n+declare -a components=(\"controller\" \"broker\" \"server\" \"zookeeper\")\n+\n+# get usage of the script \n+function usage() {\n+  command=$1\n+  if [[ \"$command\" =~ compCheck.sh$ ]] ; then\n+    echo \"Usage: $command olderCommit newerCommit [workingDir]\"\n+  elif [[ \"$command\" =~ checkoutAndBuild$ ]]; then\n+    echo \"Usage: $command commitHash dirName\"\n+  elif [[ \"$command\" =~ startService$ ]]; then\n+    echo \"Usage: $command serviceName dirName\"\n+  elif [[ \"$command\" =~ stopService$ ]]; then\n+    echo \"Usage: $command serviceName\"\n+  fi\n+  exit 1\n+}\n+\n+# cleanup the temporary directory when exiting the script\n+function cleanup() {\n+  if [ -n \"$tmpDir\" ] && [ -d \"$tmpDir\" ]; then\n+    rm -rf \"$tmpDir\"\n+  fi\n+}\n+\n+# cleanp the temporary directory when the bash script exits \n+trap cleanup EXIT\n+\n+if [ $# -lt 2 ] || [ $# -gt 3 ] ; then\n+  usage compCheck\n+fi\n+\n+# get arguments\n+olderCommit=$1\n+newerCommit=$2 \n+\n+if [ -n \"$3\" ]; then\n+  workingDir=$3\n+  if [ -d \"$workingDir\" ]; then\n+    echo \"Directory ${workingDir} already exists. Use a new directory.\"\n+    exit 1\n+  fi\n+else\n+  # use a temp directory in case workingDir is not provided\n+  tmpDir=$(mktemp -d 2>/dev/null || mktemp -d -t 'mytmpdir')\n+  workingDir=$tmpDir\n+fi\n+\n+\n+# This function builds Pinot given a specific commit hash and target directory\n+function checkoutAndBuild() {\n+  if [ $# -ne 2 ]; then \n+    usage checkoutAndBuild\n+  fi\n+  commitHash=$1\n+  targetDir=$2\n+  \n+  pushd \"$targetDir\" || exit 1\n+  git init\n+  git remote add origin https://github.com/apache/incubator-pinot\n+  git fetch --depth 1 origin \"$commitHash\"\n+  git checkout FETCH_HEAD\n+  mvn install package -DskipTests -Pbin-dist\n+  popd || exit 1\n+}\n+\n+# Given a component and directory, start that version of the specific component \n+function startService() {\n+  if [ $# -ne 2 ]; then \n+    usage startService\n+  fi\n+  serviceName=$1\n+  dirName=$2\n+  if [[ ! \" ${components[*]} \" =~ $serviceName ]]; then\n+    printf \"Not a valid component. Needs to be one of: %s \\n\" \"${components[*]}\"\n+    exit 1\n+  fi\n+  # Upon start, save the pid of the process for a component into a file in /tmp/{component}.pid, which is then used to stop it\n+  pushd \"$dirName\"/pinot-tools/target/pinot-tools-pkg/bin  || exit 1\n+  if [ \"$serviceName\" = \"zookeeper\" ]; then\n+    sh -c 'echo $$ > /tmp/zookeeper.pid; exec ./pinot-admin.sh StartZookeeper' &\n+  elif [ \"$serviceName\" = \"controller\" ]; then \n+    sh -c 'echo $$ > /tmp/controller.pid; exec ./pinot-admin.sh StartController' &  \n+  elif [ \"$serviceName\" = \"broker\" ]; then\n+    sh -c 'echo $$ > /tmp/broker.pid; exec ./pinot-admin.sh StartBroker' &\n+  elif [ \"$serviceName\" = \"server\" ]; then\n+    sh -c 'echo $$ > /tmp/server.pid; exec ./pinot-admin.sh StartServer' &\n+  fi \n+  popd || exit 1\n+}\n+\n+# Given a component, check if it known to be running and stop that specific component\n+function stopService() {\n+  if [ $# -ne 1 ]; then \n+    usage stopService\n+  fi\n+  serviceName=$1\n+  if [[ ! \" ${components[*]} \" =~ $serviceName ]]; then\n+    printf \"Not a valid component. Needs to be one of: %s \\n\" \"${components[*]}\"\n+    exit 1\n+  fi\n+  if [ -f /tmp/\"${serviceName}\".pid ]; then \n+    servicePid=$(</tmp/\"${serviceName}\".pid)\n+    rm /tmp/\"${serviceName}\".pid\n+    if [ -n \"$servicePid\" ]; then\n+      kill -9 \"$servicePid\"\n+    fi\n+  else\n+    echo \"Can't stop component ${serviceName} since can't component ${serviceName} is not known to have been started.\"\n+  fi\n+}\n+\n+# Starts a Pinot cluster given a specific target directory\n+function startServices() {\n+  dirName=$1\n+  startService zookeeper \"$dirName\"\n+  startService controller \"$dirName\"\n+  startService broker \"$dirName\"\n+  startService server \"$dirName\"\n+  echo \"Cluster started.\"\n+}\n+\n+# Stops the currently running Pinot cluster\n+function stopServices() {\n+  stopService controller\n+  stopService broker\n+  stopService server\n+  stopService zookeeper\n+  echo \"Cluster stopped.\"\n+} \n+\n+# upgrades the cluster by upgrading components one by one (Controller -> Broker -> Server) \n+function switchComponents() {\n+  dirName=$1\n+  stopService controller\n+  startService controller \"$dirName\"\n+  stopService broker\n+  startService broker \"$dirName\"\n+  stopService server\n+  startService server \"$dirName\"\n+}\n+\n+# Do rolling upgrade from olderCommit to newerCommit", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cf971ba04fb5b0ca2f2ac0dd115ae2d1836d62bd"}, "originalPosition": 167}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxNTE1MzQ2OnYy", "diffSide": "RIGHT", "path": "compatibility-verifier/compCheck.sh", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxNzowMTo1M1rOHL4p9g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxNzo0MzoyMVrOHL6WYg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjIyNDYzMA==", "bodyText": "For now, let us just echo that this needs to be cleaned up.\nIn some cases, we would want to keep the dir to see the logs/results, so it may be useful to keep it.\nAlso, I would prefer that we set a variable called TMP_DIR up front to the results of mktemp. The use of TMP_DIR indicates that we don't modify it -- just a convention.", "url": "https://github.com/apache/pinot/pull/5911#discussion_r482224630", "createdAt": "2020-09-02T17:01:53Z", "author": {"login": "mcvsubbu"}, "path": "compatibility-verifier/compCheck.sh", "diffHunk": "@@ -0,0 +1,173 @@\n+#!/bin/bash\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+#\n+\n+# A script that does rolling upgrade of Pinot components\n+# from one version to the other given 2 commit hashes. It first builds  \n+# Pinot in the 2 given directories and then upgrades in the following order:\n+# Controller -> Broker -> Server\n+\n+# get usage of the script \n+function usage() {\n+  command=$1\n+  if [[ \"$command\" =~ compCheck.sh$ ]] ; then\n+    echo \"Usage: $command olderCommit newerCommit [workingDir]\"\n+  fi\n+  exit 1\n+}\n+\n+# cleanup the temporary directory when exiting the script\n+function cleanup() {\n+  if [ -n \"$tmpDir\" ] && [ -d \"$tmpDir\" ]; then", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "00da29849b9e8e2568f9e53982c0dd24d8920080"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjI0MzQ1MQ==", "bodyText": "Since I set the result of mktemp to tmpDir, do you mean just renaming tmpDir to TMP_DIR?", "url": "https://github.com/apache/pinot/pull/5911#discussion_r482243451", "createdAt": "2020-09-02T17:27:34Z", "author": {"login": "saileshnankani"}, "path": "compatibility-verifier/compCheck.sh", "diffHunk": "@@ -0,0 +1,173 @@\n+#!/bin/bash\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+#\n+\n+# A script that does rolling upgrade of Pinot components\n+# from one version to the other given 2 commit hashes. It first builds  \n+# Pinot in the 2 given directories and then upgrades in the following order:\n+# Controller -> Broker -> Server\n+\n+# get usage of the script \n+function usage() {\n+  command=$1\n+  if [[ \"$command\" =~ compCheck.sh$ ]] ; then\n+    echo \"Usage: $command olderCommit newerCommit [workingDir]\"\n+  fi\n+  exit 1\n+}\n+\n+# cleanup the temporary directory when exiting the script\n+function cleanup() {\n+  if [ -n \"$tmpDir\" ] && [ -d \"$tmpDir\" ]; then", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjIyNDYzMA=="}, "originalCommit": {"oid": "00da29849b9e8e2568f9e53982c0dd24d8920080"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjI1MjM4Ng==", "bodyText": "just move the assignment to tmpDir to be an assignment to TMP_DIR and move it to the top of the file. It does not create the dir anyway, only assigns a dir name. We can create the dir if needed (if working dir is not supplied)", "url": "https://github.com/apache/pinot/pull/5911#discussion_r482252386", "createdAt": "2020-09-02T17:43:21Z", "author": {"login": "mcvsubbu"}, "path": "compatibility-verifier/compCheck.sh", "diffHunk": "@@ -0,0 +1,173 @@\n+#!/bin/bash\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+#\n+\n+# A script that does rolling upgrade of Pinot components\n+# from one version to the other given 2 commit hashes. It first builds  \n+# Pinot in the 2 given directories and then upgrades in the following order:\n+# Controller -> Broker -> Server\n+\n+# get usage of the script \n+function usage() {\n+  command=$1\n+  if [[ \"$command\" =~ compCheck.sh$ ]] ; then\n+    echo \"Usage: $command olderCommit newerCommit [workingDir]\"\n+  fi\n+  exit 1\n+}\n+\n+# cleanup the temporary directory when exiting the script\n+function cleanup() {\n+  if [ -n \"$tmpDir\" ] && [ -d \"$tmpDir\" ]; then", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjIyNDYzMA=="}, "originalCommit": {"oid": "00da29849b9e8e2568f9e53982c0dd24d8920080"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxNTE1OTcyOnYy", "diffSide": "RIGHT", "path": "compatibility-verifier/compCheck.sh", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxNzowMzo0MVrOHL4t-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxNzowMzo0MVrOHL4t-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjIyNTY1OQ==", "bodyText": "Unfortunate, we need a better way to stop a service gracefully. For now, that is ok", "url": "https://github.com/apache/pinot/pull/5911#discussion_r482225659", "createdAt": "2020-09-02T17:03:41Z", "author": {"login": "mcvsubbu"}, "path": "compatibility-verifier/compCheck.sh", "diffHunk": "@@ -0,0 +1,173 @@\n+#!/bin/bash\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+#\n+\n+# A script that does rolling upgrade of Pinot components\n+# from one version to the other given 2 commit hashes. It first builds  \n+# Pinot in the 2 given directories and then upgrades in the following order:\n+# Controller -> Broker -> Server\n+\n+# get usage of the script \n+function usage() {\n+  command=$1\n+  if [[ \"$command\" =~ compCheck.sh$ ]] ; then\n+    echo \"Usage: $command olderCommit newerCommit [workingDir]\"\n+  fi\n+  exit 1\n+}\n+\n+# cleanup the temporary directory when exiting the script\n+function cleanup() {\n+  if [ -n \"$tmpDir\" ] && [ -d \"$tmpDir\" ]; then\n+    rm -rf \"$tmpDir\"\n+  fi\n+}\n+\n+# This function builds Pinot given a specific commit hash and target directory\n+function checkoutAndBuild() {\n+  commitHash=$1\n+  targetDir=$2\n+  \n+  pushd \"$targetDir\" || exit 1\n+  git init\n+  git remote add origin https://github.com/apache/incubator-pinot\n+  git fetch --depth 1 origin \"$commitHash\"\n+  git checkout FETCH_HEAD\n+  mvn install package -DskipTests -Pbin-dist\n+  popd || exit 1\n+}\n+\n+# Given a component and directory, start that version of the specific component \n+function startService() {\n+  serviceName=$1\n+  dirName=$2\n+  # Upon start, save the pid of the process for a component into a file in /tmp/{component}.pid, which is then used to stop it\n+  pushd \"$dirName\"/pinot-tools/target/pinot-tools-pkg/bin  || exit 1\n+  if [ \"$serviceName\" = \"zookeeper\" ]; then\n+    sh -c 'echo $$ > $0/zookeeper.pid; exec ./pinot-admin.sh StartZookeeper' \"${dirName}\" &\n+  elif [ \"$serviceName\" = \"controller\" ]; then \n+    sh -c 'echo $$ > $0/controller.pid; exec ./pinot-admin.sh StartController' \"${dirName}\" &\n+  elif [ \"$serviceName\" = \"broker\" ]; then\n+    sh -c 'echo $$ > $0/broker.pid; exec ./pinot-admin.sh StartBroker' \"${dirName}\" &\n+  elif [ \"$serviceName\" = \"server\" ]; then\n+    sh -c 'echo $$ > $0/server.pid; exec ./pinot-admin.sh StartServer' \"${dirName}\" &\n+  fi \n+  popd || exit 1\n+}\n+\n+# Given a component, check if it known to be running and stop that specific component\n+function stopService() {\n+  serviceName=$1\n+  dirName=$2\n+  if [ -f \"${dirName}/${serviceName}\".pid ]; then \n+    servicePid=$(<\"${dirName}/${serviceName}\".pid)\n+    rm \"${dirName}/${serviceName}\".pid\n+    if [ -n \"$servicePid\" ]; then\n+      kill -9 \"$servicePid\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "00da29849b9e8e2568f9e53982c0dd24d8920080"}, "originalPosition": 82}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxNTE2NTIwOnYy", "diffSide": "RIGHT", "path": "compatibility-verifier/compCheck.sh", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxNzowNTowOFrOHL4xjw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxNzowNTowOFrOHL4xjw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjIyNjU3NQ==", "bodyText": "Let us remove this if", "url": "https://github.com/apache/pinot/pull/5911#discussion_r482226575", "createdAt": "2020-09-02T17:05:08Z", "author": {"login": "mcvsubbu"}, "path": "compatibility-verifier/compCheck.sh", "diffHunk": "@@ -0,0 +1,173 @@\n+#!/bin/bash\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+#\n+\n+# A script that does rolling upgrade of Pinot components\n+# from one version to the other given 2 commit hashes. It first builds  \n+# Pinot in the 2 given directories and then upgrades in the following order:\n+# Controller -> Broker -> Server\n+\n+# get usage of the script \n+function usage() {\n+  command=$1\n+  if [[ \"$command\" =~ compCheck.sh$ ]] ; then", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "00da29849b9e8e2568f9e53982c0dd24d8920080"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxNTE3NjI4OnYy", "diffSide": "RIGHT", "path": "compatibility-verifier/compCheck.sh", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxNzowNzozM1rOHL45DQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxNzowNzozM1rOHL45DQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjIyODQ5Mw==", "bodyText": "include the name of the directory that failed to create", "url": "https://github.com/apache/pinot/pull/5911#discussion_r482228493", "createdAt": "2020-09-02T17:07:33Z", "author": {"login": "mcvsubbu"}, "path": "compatibility-verifier/compCheck.sh", "diffHunk": "@@ -0,0 +1,173 @@\n+#!/bin/bash\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+#\n+\n+# A script that does rolling upgrade of Pinot components\n+# from one version to the other given 2 commit hashes. It first builds  \n+# Pinot in the 2 given directories and then upgrades in the following order:\n+# Controller -> Broker -> Server\n+\n+# get usage of the script \n+function usage() {\n+  command=$1\n+  if [[ \"$command\" =~ compCheck.sh$ ]] ; then\n+    echo \"Usage: $command olderCommit newerCommit [workingDir]\"\n+  fi\n+  exit 1\n+}\n+\n+# cleanup the temporary directory when exiting the script\n+function cleanup() {\n+  if [ -n \"$tmpDir\" ] && [ -d \"$tmpDir\" ]; then\n+    rm -rf \"$tmpDir\"\n+  fi\n+}\n+\n+# This function builds Pinot given a specific commit hash and target directory\n+function checkoutAndBuild() {\n+  commitHash=$1\n+  targetDir=$2\n+  \n+  pushd \"$targetDir\" || exit 1\n+  git init\n+  git remote add origin https://github.com/apache/incubator-pinot\n+  git fetch --depth 1 origin \"$commitHash\"\n+  git checkout FETCH_HEAD\n+  mvn install package -DskipTests -Pbin-dist\n+  popd || exit 1\n+}\n+\n+# Given a component and directory, start that version of the specific component \n+function startService() {\n+  serviceName=$1\n+  dirName=$2\n+  # Upon start, save the pid of the process for a component into a file in /tmp/{component}.pid, which is then used to stop it\n+  pushd \"$dirName\"/pinot-tools/target/pinot-tools-pkg/bin  || exit 1\n+  if [ \"$serviceName\" = \"zookeeper\" ]; then\n+    sh -c 'echo $$ > $0/zookeeper.pid; exec ./pinot-admin.sh StartZookeeper' \"${dirName}\" &\n+  elif [ \"$serviceName\" = \"controller\" ]; then \n+    sh -c 'echo $$ > $0/controller.pid; exec ./pinot-admin.sh StartController' \"${dirName}\" &\n+  elif [ \"$serviceName\" = \"broker\" ]; then\n+    sh -c 'echo $$ > $0/broker.pid; exec ./pinot-admin.sh StartBroker' \"${dirName}\" &\n+  elif [ \"$serviceName\" = \"server\" ]; then\n+    sh -c 'echo $$ > $0/server.pid; exec ./pinot-admin.sh StartServer' \"${dirName}\" &\n+  fi \n+  popd || exit 1\n+}\n+\n+# Given a component, check if it known to be running and stop that specific component\n+function stopService() {\n+  serviceName=$1\n+  dirName=$2\n+  if [ -f \"${dirName}/${serviceName}\".pid ]; then \n+    servicePid=$(<\"${dirName}/${serviceName}\".pid)\n+    rm \"${dirName}/${serviceName}\".pid\n+    if [ -n \"$servicePid\" ]; then\n+      kill -9 \"$servicePid\"\n+    fi\n+  else\n+    echo \"Pid file ${dirName}/${serviceName}.pid  not found. Failed to stop component ${serviceName}\"\n+  fi\n+}\n+\n+# Starts a Pinot cluster given a specific target directory\n+function startServices() {\n+  dirName=$1\n+  startService zookeeper \"$dirName\"\n+  startService controller \"$dirName\"\n+  startService broker \"$dirName\"\n+  startService server \"$dirName\"\n+  echo \"Cluster started.\"\n+}\n+\n+# Stops the currently running Pinot cluster\n+function stopServices() {\n+  dirName=$1\n+  stopService controller \"$dirName\"\n+  stopService broker \"$dirName\"\n+  stopService server \"$dirName\"\n+  stopService zookeeper \"$dirName\"\n+  echo \"Cluster stopped.\"\n+} \n+\n+# cleanp the temporary directory when the bash script exits \n+trap cleanup EXIT\n+\n+if [ $# -lt 2 ] || [ $# -gt 3 ] ; then\n+  usage compCheck\n+fi\n+\n+# get arguments\n+olderCommit=$1\n+newerCommit=$2 \n+\n+if [ -n \"$3\" ]; then\n+  workingDir=$3\n+  if [ -d \"$workingDir\" ]; then\n+    echo \"Directory ${workingDir} already exists. Use a new directory.\"\n+    exit 1\n+  fi\n+else\n+  # use a temp directory in case workingDir is not provided\n+  tmpDir=$(mktemp -d 2>/dev/null || mktemp -d -t 'mytmpdir')\n+  workingDir=$tmpDir\n+fi\n+\n+# create subdirectories for given commits\n+oldTargetDir=\"$workingDir\"/oldTargetDir\n+newTargetDir=\"$workingDir\"/newTargetDir\n+\n+if ! mkdir -p \"$oldTargetDir\" \"$newTargetDir\"; then\n+  echo \"Failed to create target directory\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "00da29849b9e8e2568f9e53982c0dd24d8920080"}, "originalPosition": 137}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4046, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}