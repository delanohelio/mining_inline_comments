{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDczNjQzNjY0", "number": 5926, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQwNTowNjo1MlrOEcagJg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQwNToyNTo1OVrOEdeorg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4MjI5Nzk4OnYy", "diffSide": "RIGHT", "path": "pinot-core/src/main/java/org/apache/pinot/core/query/utils/IdSet.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQwNTowNjo1MlrOHG7_2Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQwNTowNjo1MlrOHG7_2Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzAzNjUwNQ==", "bodyText": "Do you think this constructor is the only thing we need? If not, We should make this private and add static builders", "url": "https://github.com/apache/pinot/pull/5926#discussion_r477036505", "createdAt": "2020-08-26T05:06:52Z", "author": {"login": "kishoreg"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/query/utils/IdSet.java", "diffHunk": "@@ -0,0 +1,326 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.core.query.utils;\n+\n+import com.google.common.base.Preconditions;\n+import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.io.DataInputStream;\n+import java.io.DataOutputStream;\n+import java.io.IOException;\n+import java.nio.ByteBuffer;\n+import java.util.Base64;\n+import java.util.Objects;\n+import javax.annotation.Nullable;\n+import org.apache.pinot.spi.data.FieldSpec.DataType;\n+import org.roaringbitmap.RoaringBitmap;\n+import org.roaringbitmap.longlong.Roaring64NavigableMap;\n+\n+\n+/**\n+ * The {@code IdSet} represents a collection of ids. It can be used to optimize the query with huge IN clause.\n+ */\n+public class IdSet implements Comparable<IdSet> {\n+  public static final IdSet EMPTY_ID_SET = new IdSet(Type.EMPTY, null, null);\n+\n+  // Throw exception when the serialized IdSet is exceeding this threshold (32MB)\n+  private static final int MAX_SIZE_IN_BYTES = 32 * 1024 * 1024;\n+\n+  private enum Type {\n+    // DO NOT change the index of the types as the ser/de relies on them\n+    EMPTY(0), ROARING_BITMAP(1), ROARING_64_NAVIGABLE_MAP(2);\n+\n+    private final int _index;\n+\n+    Type(int index) {\n+      _index = index;\n+    }\n+  }\n+\n+  private final Type _type;\n+  private final RoaringBitmap _bitmap;\n+  private final Roaring64NavigableMap _longBitmap;\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "de6eee3535d9aac026f3cd3f64465c68bac740a0"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4MjMwNjk0OnYy", "diffSide": "RIGHT", "path": "pinot-core/src/main/java/org/apache/pinot/core/query/utils/IdSet.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQwNToxMTo1OFrOHG8FGQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQwNToxMTo1OFrOHG8FGQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzAzNzg0OQ==", "bodyText": "Let\u2019s make this an interface with multiple implementations?", "url": "https://github.com/apache/pinot/pull/5926#discussion_r477037849", "createdAt": "2020-08-26T05:11:58Z", "author": {"login": "kishoreg"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/query/utils/IdSet.java", "diffHunk": "@@ -0,0 +1,326 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.core.query.utils;\n+\n+import com.google.common.base.Preconditions;\n+import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.io.DataInputStream;\n+import java.io.DataOutputStream;\n+import java.io.IOException;\n+import java.nio.ByteBuffer;\n+import java.util.Base64;\n+import java.util.Objects;\n+import javax.annotation.Nullable;\n+import org.apache.pinot.spi.data.FieldSpec.DataType;\n+import org.roaringbitmap.RoaringBitmap;\n+import org.roaringbitmap.longlong.Roaring64NavigableMap;\n+\n+\n+/**\n+ * The {@code IdSet} represents a collection of ids. It can be used to optimize the query with huge IN clause.\n+ */\n+public class IdSet implements Comparable<IdSet> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "de6eee3535d9aac026f3cd3f64465c68bac740a0"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5MzQ1ODMzOnYy", "diffSide": "RIGHT", "path": "pinot-core/src/main/java/org/apache/pinot/core/query/aggregation/function/IdSetAggregationFunction.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQwNToyNDozNlrOHIp4yQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQxODowMTo1OVrOHJPv8g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODgzNjkzNw==", "bodyText": "add a sample call", "url": "https://github.com/apache/pinot/pull/5926#discussion_r478836937", "createdAt": "2020-08-28T05:24:36Z", "author": {"login": "kishoreg"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/query/aggregation/function/IdSetAggregationFunction.java", "diffHunk": "@@ -0,0 +1,339 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.core.query.aggregation.function;\n+\n+import com.google.common.base.Preconditions;\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.Map;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.pinot.common.function.AggregationFunctionType;\n+import org.apache.pinot.common.utils.DataSchema.ColumnDataType;\n+import org.apache.pinot.core.common.BlockValSet;\n+import org.apache.pinot.core.query.aggregation.AggregationResultHolder;\n+import org.apache.pinot.core.query.aggregation.ObjectAggregationResultHolder;\n+import org.apache.pinot.core.query.aggregation.groupby.GroupByResultHolder;\n+import org.apache.pinot.core.query.aggregation.groupby.ObjectGroupByResultHolder;\n+import org.apache.pinot.core.query.request.context.ExpressionContext;\n+import org.apache.pinot.core.query.utils.idset.IdSet;\n+import org.apache.pinot.core.query.utils.idset.IdSets;\n+import org.apache.pinot.spi.data.FieldSpec.DataType;\n+\n+\n+/**\n+ * The {@code IdSetAggregationFunction} collects the values for a given single-value expression into an IdSet, which can\n+ * be used in the second query to optimize the query with huge IN clause generated from another query.\n+ */\n+public class IdSetAggregationFunction extends BaseSingleInputAggregationFunction<IdSet, String> {\n+  public static final char PARAMETER_DELIMITER = ';';\n+  public static final char PARAMETER_KEY_VALUE_SEPARATOR = '=';\n+  public static final String SIZE_THRESHOLD_IN_BYTES_KEY = \"SIZETHRESHOLDINBYTES\";\n+  public static final String EXPECTED_INSERTIONS_KEY = \"EXPECTEDINSERTIONS\";\n+  public static final String FPP_KEY = \"FPP\";\n+\n+  private final int _sizeThresholdInBytes;\n+  private final int _expectedInsertions;\n+  private final double _fpp;\n+\n+  /**", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fab464fcfa250f92bee4e897c62b69976a5bc0db"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTQ1NzI2Ng==", "bodyText": "Added", "url": "https://github.com/apache/pinot/pull/5926#discussion_r479457266", "createdAt": "2020-08-28T18:01:59Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/query/aggregation/function/IdSetAggregationFunction.java", "diffHunk": "@@ -0,0 +1,339 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.core.query.aggregation.function;\n+\n+import com.google.common.base.Preconditions;\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.Map;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.pinot.common.function.AggregationFunctionType;\n+import org.apache.pinot.common.utils.DataSchema.ColumnDataType;\n+import org.apache.pinot.core.common.BlockValSet;\n+import org.apache.pinot.core.query.aggregation.AggregationResultHolder;\n+import org.apache.pinot.core.query.aggregation.ObjectAggregationResultHolder;\n+import org.apache.pinot.core.query.aggregation.groupby.GroupByResultHolder;\n+import org.apache.pinot.core.query.aggregation.groupby.ObjectGroupByResultHolder;\n+import org.apache.pinot.core.query.request.context.ExpressionContext;\n+import org.apache.pinot.core.query.utils.idset.IdSet;\n+import org.apache.pinot.core.query.utils.idset.IdSets;\n+import org.apache.pinot.spi.data.FieldSpec.DataType;\n+\n+\n+/**\n+ * The {@code IdSetAggregationFunction} collects the values for a given single-value expression into an IdSet, which can\n+ * be used in the second query to optimize the query with huge IN clause generated from another query.\n+ */\n+public class IdSetAggregationFunction extends BaseSingleInputAggregationFunction<IdSet, String> {\n+  public static final char PARAMETER_DELIMITER = ';';\n+  public static final char PARAMETER_KEY_VALUE_SEPARATOR = '=';\n+  public static final String SIZE_THRESHOLD_IN_BYTES_KEY = \"SIZETHRESHOLDINBYTES\";\n+  public static final String EXPECTED_INSERTIONS_KEY = \"EXPECTEDINSERTIONS\";\n+  public static final String FPP_KEY = \"FPP\";\n+\n+  private final int _sizeThresholdInBytes;\n+  private final int _expectedInsertions;\n+  private final double _fpp;\n+\n+  /**", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODgzNjkzNw=="}, "originalCommit": {"oid": "fab464fcfa250f92bee4e897c62b69976a5bc0db"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5MzQ2MDk0OnYy", "diffSide": "RIGHT", "path": "pinot-core/src/main/java/org/apache/pinot/core/query/aggregation/function/IdSetAggregationFunction.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQwNToyNTo1OVrOHIp6QA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQxODowMjowM1rOHJPwCg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODgzNzMxMg==", "bodyText": "what are these? java docs", "url": "https://github.com/apache/pinot/pull/5926#discussion_r478837312", "createdAt": "2020-08-28T05:25:59Z", "author": {"login": "kishoreg"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/query/aggregation/function/IdSetAggregationFunction.java", "diffHunk": "@@ -0,0 +1,339 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.core.query.aggregation.function;\n+\n+import com.google.common.base.Preconditions;\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.Map;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.pinot.common.function.AggregationFunctionType;\n+import org.apache.pinot.common.utils.DataSchema.ColumnDataType;\n+import org.apache.pinot.core.common.BlockValSet;\n+import org.apache.pinot.core.query.aggregation.AggregationResultHolder;\n+import org.apache.pinot.core.query.aggregation.ObjectAggregationResultHolder;\n+import org.apache.pinot.core.query.aggregation.groupby.GroupByResultHolder;\n+import org.apache.pinot.core.query.aggregation.groupby.ObjectGroupByResultHolder;\n+import org.apache.pinot.core.query.request.context.ExpressionContext;\n+import org.apache.pinot.core.query.utils.idset.IdSet;\n+import org.apache.pinot.core.query.utils.idset.IdSets;\n+import org.apache.pinot.spi.data.FieldSpec.DataType;\n+\n+\n+/**\n+ * The {@code IdSetAggregationFunction} collects the values for a given single-value expression into an IdSet, which can\n+ * be used in the second query to optimize the query with huge IN clause generated from another query.\n+ */\n+public class IdSetAggregationFunction extends BaseSingleInputAggregationFunction<IdSet, String> {\n+  public static final char PARAMETER_DELIMITER = ';';\n+  public static final char PARAMETER_KEY_VALUE_SEPARATOR = '=';\n+  public static final String SIZE_THRESHOLD_IN_BYTES_KEY = \"SIZETHRESHOLDINBYTES\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fab464fcfa250f92bee4e897c62b69976a5bc0db"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTQ1NzI5MA==", "bodyText": "Added", "url": "https://github.com/apache/pinot/pull/5926#discussion_r479457290", "createdAt": "2020-08-28T18:02:03Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/query/aggregation/function/IdSetAggregationFunction.java", "diffHunk": "@@ -0,0 +1,339 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.core.query.aggregation.function;\n+\n+import com.google.common.base.Preconditions;\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.Map;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.pinot.common.function.AggregationFunctionType;\n+import org.apache.pinot.common.utils.DataSchema.ColumnDataType;\n+import org.apache.pinot.core.common.BlockValSet;\n+import org.apache.pinot.core.query.aggregation.AggregationResultHolder;\n+import org.apache.pinot.core.query.aggregation.ObjectAggregationResultHolder;\n+import org.apache.pinot.core.query.aggregation.groupby.GroupByResultHolder;\n+import org.apache.pinot.core.query.aggregation.groupby.ObjectGroupByResultHolder;\n+import org.apache.pinot.core.query.request.context.ExpressionContext;\n+import org.apache.pinot.core.query.utils.idset.IdSet;\n+import org.apache.pinot.core.query.utils.idset.IdSets;\n+import org.apache.pinot.spi.data.FieldSpec.DataType;\n+\n+\n+/**\n+ * The {@code IdSetAggregationFunction} collects the values for a given single-value expression into an IdSet, which can\n+ * be used in the second query to optimize the query with huge IN clause generated from another query.\n+ */\n+public class IdSetAggregationFunction extends BaseSingleInputAggregationFunction<IdSet, String> {\n+  public static final char PARAMETER_DELIMITER = ';';\n+  public static final char PARAMETER_KEY_VALUE_SEPARATOR = '=';\n+  public static final String SIZE_THRESHOLD_IN_BYTES_KEY = \"SIZETHRESHOLDINBYTES\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODgzNzMxMg=="}, "originalCommit": {"oid": "fab464fcfa250f92bee4e897c62b69976a5bc0db"}, "originalPosition": 46}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4067, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}