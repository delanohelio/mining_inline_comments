{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY4MjUyODU2", "number": 5870, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNlQwNjo0Nzo0MVrOEYxjgg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QxNzozODo1NlrOEZJm9Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0NDEzMTg2OnYy", "diffSide": "RIGHT", "path": "pinot-spi/src/main/java/org/apache/pinot/spi/utils/builder/TableConfigBuilder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNlQwNjo0Nzo0MVrOHBQFEw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNlQwNjo0Nzo0MVrOHBQFEw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTA3NDA2Nw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              public TableConfigBuilder setNullHandlingEnabledConfig(boolean nullHandlingEnabled) {\n          \n          \n            \n              public TableConfigBuilder setNullHandlingEnabled(boolean nullHandlingEnabled) {", "url": "https://github.com/apache/pinot/pull/5870#discussion_r471074067", "createdAt": "2020-08-16T06:47:41Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-spi/src/main/java/org/apache/pinot/spi/utils/builder/TableConfigBuilder.java", "diffHunk": "@@ -255,6 +256,11 @@ public TableConfigBuilder setSegmentPartitionConfig(SegmentPartitionConfig segme\n     return this;\n   }\n \n+  public TableConfigBuilder setNullHandlingEnabledConfig(boolean nullHandlingEnabled) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "54aa86d7ba0e6a206bf473c788794d642df0d301"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0NDEzMjc2OnYy", "diffSide": "RIGHT", "path": "pinot-integration-tests/src/test/java/org/apache/pinot/integration/tests/NullHandlingIntegrationTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNlQwNjo0OToyNFrOHBQFlA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNlQwNjo0OToyNFrOHBQFlA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTA3NDE5Ng==", "bodyText": "(nit) Simplify into the same string?\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                String pqlQuery = \"SELECT count(*) FROM \" + getTableName();\n          \n          \n            \n                String sqlQuery = \"SELECT count(*) FROM \" + getTableName();\n          \n          \n            \n                String query = \"SELECT count(*) FROM \" + getTableName();", "url": "https://github.com/apache/pinot/pull/5870#discussion_r471074196", "createdAt": "2020-08-16T06:49:24Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-integration-tests/src/test/java/org/apache/pinot/integration/tests/NullHandlingIntegrationTest.java", "diffHunk": "@@ -0,0 +1,149 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.integration.tests;\n+\n+import org.apache.commons.io.FileUtils;\n+import org.apache.pinot.util.TestUtils;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Test;\n+\n+import javax.annotation.Nullable;\n+import java.io.File;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Random;\n+\n+\n+/**\n+ * Integration test that creates a Kafka broker, creates a Pinot cluster that consumes from Kafka and queries Pinot.\n+ * The data pushed to Kafka includes null values.\n+ */\n+public class NullHandlingIntegrationTest extends BaseClusterIntegrationTestSet {\n+\n+  @BeforeClass\n+  public void setUp()\n+      throws Exception {\n+    TestUtils.ensureDirectoriesExistAndEmpty(_tempDir);\n+\n+    // Start the Pinot cluster\n+    startZk();\n+    startController();\n+    startBroker();\n+    startServer();\n+\n+    // Start Kafka\n+    startKafka();\n+\n+    // Unpack the Avro files\n+    List<File> avroFiles = unpackAvroData(_tempDir);\n+\n+    // Create and upload the schema and table config\n+    addSchema(createSchema());\n+    addTableConfig(createRealtimeTableConfig(avroFiles.get(0)));\n+\n+    // Push data into Kafka\n+    pushAvroIntoKafka(avroFiles);\n+\n+    // Set up the H2 connection\n+    setUpH2Connection(avroFiles);\n+\n+    // Initialize the query generator\n+    setUpQueryGenerator(avroFiles);\n+\n+    // Wait for all documents loaded\n+    waitForAllDocsLoaded(10_000L);\n+  }\n+\n+  @Override\n+  protected String getAvroTarFileName() {\n+    return \"avro_data_with_nulls.tar.gz\";\n+  }\n+\n+  @Override\n+  protected String getSchemaFileName() {\n+    return \"test_null_handling.schema\";\n+  }\n+\n+  @Override\n+  @Nullable\n+  protected String getSortedColumn() {\n+    return null;\n+  }\n+\n+  @Override\n+  @Nullable\n+  protected List<String> getInvertedIndexColumns() {\n+    return null;\n+  }\n+\n+  @Override\n+  @Nullable\n+  protected List<String> getNoDictionaryColumns() {\n+    return null;\n+  }\n+\n+  @Override\n+  @Nullable\n+  protected List<String> getRangeIndexColumns() {\n+    return null;\n+  }\n+\n+  @Override\n+  @Nullable\n+  protected List<String> getBloomFilterColumns() {\n+    return null;\n+  }\n+\n+  @Override\n+  @Nullable\n+  protected boolean getNullHandlingEnabledConfig() {\n+    return true;\n+  }\n+\n+  @Override\n+  protected long getCountStarResult() {\n+    return 100;\n+  }\n+\n+  @Test\n+  public void testTotalCount()\n+      throws Exception {\n+    String pqlQuery = \"SELECT count(*) FROM \" + getTableName();\n+    String sqlQuery = \"SELECT count(*) FROM \" + getTableName();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "54aa86d7ba0e6a206bf473c788794d642df0d301"}, "originalPosition": 130}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0NDEzMzExOnYy", "diffSide": "RIGHT", "path": "pinot-integration-tests/src/test/java/org/apache/pinot/integration/tests/BaseClusterIntegrationTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNlQwNjo0OTo0OFrOHBQFvg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNlQwNjo0OTo0OFrOHBQFvg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTA3NDIzOA==", "bodyText": "Remove this annotation", "url": "https://github.com/apache/pinot/pull/5870#discussion_r471074238", "createdAt": "2020-08-16T06:49:48Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-integration-tests/src/test/java/org/apache/pinot/integration/tests/BaseClusterIntegrationTest.java", "diffHunk": "@@ -241,6 +242,11 @@ protected IngestionConfig getIngestionConfig() {\n     return null;\n   }\n \n+  @Nullable", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "54aa86d7ba0e6a206bf473c788794d642df0d301"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0NDEzMzY5OnYy", "diffSide": "RIGHT", "path": "pinot-integration-tests/src/test/java/org/apache/pinot/integration/tests/NullHandlingIntegrationTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNlQwNjo1MDoyOFrOHBQGBQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNlQwNjo1MDoyOFrOHBQGBQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTA3NDMwOQ==", "bodyText": "Remove this annotation", "url": "https://github.com/apache/pinot/pull/5870#discussion_r471074309", "createdAt": "2020-08-16T06:50:28Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-integration-tests/src/test/java/org/apache/pinot/integration/tests/NullHandlingIntegrationTest.java", "diffHunk": "@@ -0,0 +1,149 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.integration.tests;\n+\n+import org.apache.commons.io.FileUtils;\n+import org.apache.pinot.util.TestUtils;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Test;\n+\n+import javax.annotation.Nullable;\n+import java.io.File;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Random;\n+\n+\n+/**\n+ * Integration test that creates a Kafka broker, creates a Pinot cluster that consumes from Kafka and queries Pinot.\n+ * The data pushed to Kafka includes null values.\n+ */\n+public class NullHandlingIntegrationTest extends BaseClusterIntegrationTestSet {\n+\n+  @BeforeClass\n+  public void setUp()\n+      throws Exception {\n+    TestUtils.ensureDirectoriesExistAndEmpty(_tempDir);\n+\n+    // Start the Pinot cluster\n+    startZk();\n+    startController();\n+    startBroker();\n+    startServer();\n+\n+    // Start Kafka\n+    startKafka();\n+\n+    // Unpack the Avro files\n+    List<File> avroFiles = unpackAvroData(_tempDir);\n+\n+    // Create and upload the schema and table config\n+    addSchema(createSchema());\n+    addTableConfig(createRealtimeTableConfig(avroFiles.get(0)));\n+\n+    // Push data into Kafka\n+    pushAvroIntoKafka(avroFiles);\n+\n+    // Set up the H2 connection\n+    setUpH2Connection(avroFiles);\n+\n+    // Initialize the query generator\n+    setUpQueryGenerator(avroFiles);\n+\n+    // Wait for all documents loaded\n+    waitForAllDocsLoaded(10_000L);\n+  }\n+\n+  @Override\n+  protected String getAvroTarFileName() {\n+    return \"avro_data_with_nulls.tar.gz\";\n+  }\n+\n+  @Override\n+  protected String getSchemaFileName() {\n+    return \"test_null_handling.schema\";\n+  }\n+\n+  @Override\n+  @Nullable\n+  protected String getSortedColumn() {\n+    return null;\n+  }\n+\n+  @Override\n+  @Nullable\n+  protected List<String> getInvertedIndexColumns() {\n+    return null;\n+  }\n+\n+  @Override\n+  @Nullable\n+  protected List<String> getNoDictionaryColumns() {\n+    return null;\n+  }\n+\n+  @Override\n+  @Nullable\n+  protected List<String> getRangeIndexColumns() {\n+    return null;\n+  }\n+\n+  @Override\n+  @Nullable\n+  protected List<String> getBloomFilterColumns() {\n+    return null;\n+  }\n+\n+  @Override\n+  @Nullable", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "54aa86d7ba0e6a206bf473c788794d642df0d301"}, "originalPosition": 116}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0ODA3Mjg1OnYy", "diffSide": "RIGHT", "path": "pinot-integration-tests/src/test/java/org/apache/pinot/integration/tests/BaseClusterIntegrationTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QxNzozODo1NlrOHBzbog==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QxNzozODo1NlrOHBzbog==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTY1MzI4Mg==", "bodyText": "(nit)\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              protected boolean getNullHandlingEnabledConfig() {\n          \n          \n            \n              protected boolean getNullHandlingEnabled() {", "url": "https://github.com/apache/pinot/pull/5870#discussion_r471653282", "createdAt": "2020-08-17T17:38:56Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-integration-tests/src/test/java/org/apache/pinot/integration/tests/BaseClusterIntegrationTest.java", "diffHunk": "@@ -241,6 +242,10 @@ protected IngestionConfig getIngestionConfig() {\n     return null;\n   }\n \n+  protected boolean getNullHandlingEnabledConfig() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2166fa971a4d61eb8f84e10e9b02de30993c9dbb"}, "originalPosition": 12}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4007, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}