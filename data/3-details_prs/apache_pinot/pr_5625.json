{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQwNzM4MzQ4", "number": 5625, "title": "Make DataSource independent of query execution (not extend Operator)", "bodyText": "Description\n\nMake DataSource independent of the query execution (not extend Operator).\nAdd interfaces for forward index.\nMake ForwardIndexReaderContext close-able so that resources (e.g. off-heap buffer) can be released.\nIn ForwardIndexReader', always read with ForwardIndexReaderContext` and close it when the reading is done to prevent resource leak.\nRemove SingleValueSet and MultiValueSet and change caller logic to directly use forward index and prevent resource leak.\nMake DataFetcher directly use forward index and handle the type conversion within the class. Similar to Dictionary convention, type conversion among INT, LONG, FLOAT, DOUBLE, STRING, and between STRING and BYTES are supported.\n\nMotivation:\nCurrently DataSource is modeled as an Operator, where values are returned as a block complying with the Operator interface.\nThis is confusing because of the following reasons:\n\nThe block contains all the documents in the segment, instead of a block of at most 10000 documents as in the Projection layer.\nThe values are always fetched with their document ids, instead of fetched as a block. Currently BlockValSet interface has 2 sets of APIs because of this, which is confusing.\nThe BlockValSet returned by the DataSource is not really a value set, but a value reader on top of the forward index.\nExtra BlockMetadata has to be maintained which can cause unexpected problems (e.g. the issue fixed in #5619)\n\nTODO:\nThere are 2 remaining places where ForwardIndexReaderContext needs to be closed:\n\nScanBasedDocIdIterator\nDataFetcher\n\nNew inheritance hierarchy for the forward index classes:\n\nForwardIndexReader\n\nDictionary-encoded unsorted SV: FixedBitSVForwardIndexReader\nDictionary-encoded sorted SV: SortedIndexReaderImpl\nDictionary-encoded MV: FixedBitMVForwardIndexReader\nRaw fixed-byte SV: FixedByteChunkSVForwardIndexReader\nRaw var-byte SV: VarByteChunkSVForwardIndexReader\n\n\nMutableForwardIndex extends ForwardIndexReader\n\nFixed-byte SV (for both dictionary-encoded and raw): FixedByteSVMutableForwardIndex\nVar-byte SV: VarByteSVMutableForwardIndex\nFixed-byte MV (for both dictionary-encoded and raw): FixedByteMVMutableForwardIndex\n\n\nForwardIndexCreator\n\nDictionary-encoded unsorted SV: SingleValueUnsortedForwardIndexCreator\nDictionary-encoded sorted SV: SingleValueSortedForwardIndexCreator\nDictionary-encoded MV: MultiValueUnsortedForwardIndexCreator\nRaw fixed-byte SV: SingleValueFixedByteRawIndexCreator\nRaw var-byte SV: SingleValueVarByteRawIndexCreator", "createdAt": "2020-06-26T18:55:49Z", "url": "https://github.com/apache/pinot/pull/5625", "merged": true, "mergeCommit": {"oid": "2d53876f669e34d8536461c52d5fe344ad1d1439"}, "closed": true, "closedAt": "2020-07-06T19:24:19Z", "author": {"login": "Jackie-Jiang"}, "timelineItems": {"totalCount": 21, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcvIw2LgBqjM0ODc5MzM1Mjc=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcyVGxfABqjM1MTcwNTc4ODM=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "61c9d58627f655f7bb45083ab226e61496c6f1ba", "author": {"user": {"login": "Jackie-Jiang", "name": "Xiaotian (Jackie) Jiang"}}, "url": "https://github.com/apache/pinot/commit/61c9d58627f655f7bb45083ab226e61496c6f1ba", "committedDate": "2020-06-26T18:34:06Z", "message": "Make DataSource independent of query execution (not extend Operator)\n\nMotivation:\nCurrently DataSource is modeled as an Operator, where values are returned\nas a block complying with the Operator interface. This is confusing because\nof the following reasons:\n- The block contains all the documents in the segment, instead of a block\n  of at most 10000 documents as in the Projection layer.\n- The values are always fetched with their document ids, instead of fetched\n  as a block. Currently BlockValSet interface has 2 set of APIs because of\n  this, which is confusing.\n- The BlockValSet returned by the DataSource is not really a value set, but\n  a value reader on top of the forward index.\n- Extra BlockMetadata has to be maintained which can cause unexpected\n  problems (e.g. the issue fixed in #5619)\n\nChanges:\n- Make DataSource standalong without implementing Operator\n- Add interfaces for forward index (ForwardIndexReader, ForwardIndexWriter,\n  ForwardIndexReaderWriter)\n- Add ColumnValueReader class to help read forward index from DataSource\n- Remove the docId based APIs from BlockValSet"}, "afterCommit": {"oid": "bedda3240d3dcfdb8995eba48f54ed20f594d465", "author": {"user": {"login": "Jackie-Jiang", "name": "Xiaotian (Jackie) Jiang"}}, "url": "https://github.com/apache/pinot/commit/bedda3240d3dcfdb8995eba48f54ed20f594d465", "committedDate": "2020-06-26T19:52:54Z", "message": "Make DataSource independent of query execution (not extend Operator)\n\nMotivation:\nCurrently DataSource is modeled as an Operator, where values are returned\nas a block complying with the Operator interface. This is confusing because\nof the following reasons:\n- The block contains all the documents in the segment, instead of a block\n  of at most 10000 documents as in the Projection layer.\n- The values are always fetched with their document ids, instead of fetched\n  as a block. Currently BlockValSet interface has 2 set of APIs because of\n  this, which is confusing.\n- The BlockValSet returned by the DataSource is not really a value set, but\n  a value reader on top of the forward index.\n- Extra BlockMetadata has to be maintained which can cause unexpected\n  problems (e.g. the issue fixed in #5619)\n\nChanges:\n- Make DataSource standalong without implementing Operator\n- Add interfaces for forward index (ForwardIndexReader, ForwardIndexWriter,\n  ForwardIndexReaderWriter)\n- Add ColumnValueReader class to help read forward index from DataSource\n- Remove the docId based APIs from BlockValSet"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM4Nzk5MTkz", "url": "https://github.com/apache/pinot/pull/5625#pullrequestreview-438799193", "createdAt": "2020-06-28T17:34:37Z", "commit": {"oid": "bedda3240d3dcfdb8995eba48f54ed20f594d465"}, "state": "COMMENTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQxNzozNDozN1rOGp_AHw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQxNzo1MjoxN1rOGp_Hxg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjY3NzAyMw==", "bodyText": "This should not be a TODO, but fixed in this PR itself? Or are you saying it happens in some corner case? If so, please describe when that might happen.", "url": "https://github.com/apache/pinot/pull/5625#discussion_r446677023", "createdAt": "2020-06-28T17:34:37Z", "author": {"login": "mayankshriv"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/common/ColumnValueReader.java", "diffHunk": "@@ -0,0 +1,248 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.core.common;\n+\n+import org.apache.pinot.core.io.reader.ForwardIndexReader;\n+import org.apache.pinot.core.io.reader.ReaderContext;\n+import org.apache.pinot.spi.data.FieldSpec.DataType;\n+\n+\n+/**\n+ * ColumnValueReader is a wrapper class on top of the forward index reader to read values from it.\n+ * <p>Batch value read APIs support the following data type conversions for numeric types:\n+ * <ul>\n+ *   <li>INT -> LONG</li>\n+ *   <li>INT, LONG -> FLOAT</li>\n+ *   <li>INT, LONG, FLOAT -> DOUBLE</li>\n+ * </ul>\n+ */\n+@SuppressWarnings({\"rawtypes\", \"unchecked\"})\n+public final class ColumnValueReader {\n+  private final ForwardIndexReader _forwardIndexReader;\n+  private final DataType _valueType;\n+  private final ReaderContext _readerContext;\n+\n+  public ColumnValueReader(ForwardIndexReader forwardIndexReader) {\n+    _forwardIndexReader = forwardIndexReader;\n+    _valueType = forwardIndexReader.getValueType();\n+    // TODO: Figure out a way to close the reader context. Currently it can cause direct memory leak.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bedda3240d3dcfdb8995eba48f54ed20f594d465"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjY3NzU1OQ==", "bodyText": "Should this extend forwardIndexReader, as it seems to be pass-through for several api's, and providing additional functionality?", "url": "https://github.com/apache/pinot/pull/5625#discussion_r446677559", "createdAt": "2020-06-28T17:39:14Z", "author": {"login": "mayankshriv"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/common/ColumnValueReader.java", "diffHunk": "@@ -0,0 +1,248 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.core.common;\n+\n+import org.apache.pinot.core.io.reader.ForwardIndexReader;\n+import org.apache.pinot.core.io.reader.ReaderContext;\n+import org.apache.pinot.spi.data.FieldSpec.DataType;\n+\n+\n+/**\n+ * ColumnValueReader is a wrapper class on top of the forward index reader to read values from it.\n+ * <p>Batch value read APIs support the following data type conversions for numeric types:\n+ * <ul>\n+ *   <li>INT -> LONG</li>\n+ *   <li>INT, LONG -> FLOAT</li>\n+ *   <li>INT, LONG, FLOAT -> DOUBLE</li>\n+ * </ul>\n+ */\n+@SuppressWarnings({\"rawtypes\", \"unchecked\"})\n+public final class ColumnValueReader {\n+  private final ForwardIndexReader _forwardIndexReader;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bedda3240d3dcfdb8995eba48f54ed20f594d465"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjY3Nzc1NA==", "bodyText": "Does it make sense to read strings as numbers (of course, assuming that these are numbers stored as strings)? Or that use case does not make sense?", "url": "https://github.com/apache/pinot/pull/5625#discussion_r446677754", "createdAt": "2020-06-28T17:40:57Z", "author": {"login": "mayankshriv"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/common/ColumnValueReader.java", "diffHunk": "@@ -0,0 +1,248 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.core.common;\n+\n+import org.apache.pinot.core.io.reader.ForwardIndexReader;\n+import org.apache.pinot.core.io.reader.ReaderContext;\n+import org.apache.pinot.spi.data.FieldSpec.DataType;\n+\n+\n+/**\n+ * ColumnValueReader is a wrapper class on top of the forward index reader to read values from it.\n+ * <p>Batch value read APIs support the following data type conversions for numeric types:\n+ * <ul>\n+ *   <li>INT -> LONG</li>\n+ *   <li>INT, LONG -> FLOAT</li>\n+ *   <li>INT, LONG, FLOAT -> DOUBLE</li>\n+ * </ul>\n+ */\n+@SuppressWarnings({\"rawtypes\", \"unchecked\"})\n+public final class ColumnValueReader {\n+  private final ForwardIndexReader _forwardIndexReader;\n+  private final DataType _valueType;\n+  private final ReaderContext _readerContext;\n+\n+  public ColumnValueReader(ForwardIndexReader forwardIndexReader) {\n+    _forwardIndexReader = forwardIndexReader;\n+    _valueType = forwardIndexReader.getValueType();\n+    // TODO: Figure out a way to close the reader context. Currently it can cause direct memory leak.\n+    _readerContext = forwardIndexReader.createContext();\n+  }\n+\n+  /**\n+   * Returns the data type of the values in the value reader.\n+   * <p>NOTE: Dictionary id is handled as INT type.\n+   */\n+  public DataType getValueType() {\n+    return _valueType;\n+  }\n+\n+  /**\n+   * Returns {@code true} if the value reader is for a single-value column, {@code false} otherwise.\n+   */\n+  public boolean isSingleValue() {\n+    return _forwardIndexReader.isSingleValue();\n+  }\n+\n+  /**\n+   * NOTE: The following single value read APIs do not handle the data type conversion for performance concern. Caller\n+   *       should always call the API that matches the value type.\n+   */\n+\n+  /**\n+   * Returns the INT type single-value at the given document id.\n+   * <p>NOTE: Dictionary id is handled as INT type.\n+   */\n+  public int getIntValue(int docId) {\n+    return _forwardIndexReader.getInt(docId, _readerContext);\n+  }\n+\n+  /**\n+   * Returns the LONG type single-value at the given document id.\n+   */\n+  public long getLongValue(int docId) {\n+    return _forwardIndexReader.getLong(docId, _readerContext);\n+  }\n+\n+  /**\n+   * Returns the FLOAT type single-value at the given document id.\n+   */\n+  public float getFloatValue(int docId) {\n+    return _forwardIndexReader.getFloat(docId, _readerContext);\n+  }\n+\n+  /**\n+   * Returns the DOUBLE type single-value at the given document id.\n+   */\n+  public double getDoubleValue(int docId) {\n+    return _forwardIndexReader.getDouble(docId, _readerContext);\n+  }\n+\n+  /**\n+   * Returns the STRING type single-value at the given document id.\n+   */\n+  public String getStringValue(int docId) {\n+    return _forwardIndexReader.getString(docId, _readerContext);\n+  }\n+\n+  /**\n+   * Returns the BYTES type single-value at the given document id.\n+   */\n+  public byte[] getBytesValue(int docId) {\n+    return _forwardIndexReader.getBytes(docId, _readerContext);\n+  }\n+\n+  /**\n+   * Reads the INT type multi-value at the given document id into the value buffer and returns the number of values in\n+   * the multi-value entry.\n+   * <p>The passed in value buffer should be large enough to hold all the values of a multi-value entry.\n+   * <p>NOTE: Dictionary id is handled as INT type.\n+   */\n+  public int getIntValues(int docId, int[] valueBuffer) {\n+    return _forwardIndexReader.getIntArray(docId, valueBuffer, _readerContext);\n+  }\n+\n+  // TODO: Support raw index for multi-value columns\n+\n+  /**\n+   * NOTE: The following batch value read APIs support data type conversions for numeric types. Caller can call any\n+   *       API regardless of the value type.\n+   * TODO: Consider letting the caller handle the data type conversion because for different use cases, we might need to\n+   *       convert data type differently.\n+   */\n+\n+  /**\n+   * Batch reads the INT type single-values at the given document ids of the given length into the value buffer.\n+   * <p>The passed in value buffer size should be larger than or equal to the length.\n+   * <p>NOTE: Dictionary id is handled as INT type.\n+   */\n+  public void getIntValues(int[] docIds, int length, int[] valueBuffer) {\n+    if (_valueType == DataType.INT) {\n+      _forwardIndexReader.readValues(docIds, length, valueBuffer, _readerContext);\n+    } else {\n+      throw new IllegalStateException(String.format(\"Cannot read %s as INT\", _valueType));\n+    }\n+  }\n+\n+  /**\n+   * Batch reads the LONG type single-values at the given document ids of the given length into the value buffer.\n+   * <p>The passed in value buffer size should be larger than or equal to the length.\n+   */\n+  public void getLongValues(int[] docIds, int length, long[] valueBuffer) {\n+    switch (_valueType) {\n+      case INT:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bedda3240d3dcfdb8995eba48f54ed20f594d465"}, "originalPosition": 149}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjY3ODYzMg==", "bodyText": "I am confused by this change:\n\nWhy is this diff showing as move of an unrelated class?\nThe name of the interface is ForwardIndexReaderWriter, but it has no read or write api's?", "url": "https://github.com/apache/pinot/pull/5625#discussion_r446678632", "createdAt": "2020-06-28T17:49:07Z", "author": {"login": "mayankshriv"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/io/readerwriter/ForwardIndexReaderWriter.java", "diffHunk": "@@ -16,11 +16,29 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-package org.apache.pinot.core.io.reader.impl;\n+package org.apache.pinot.core.io.readerwriter;\n \n+import org.apache.pinot.core.io.reader.ForwardIndexReader;\n import org.apache.pinot.core.io.reader.ReaderContext;\n+import org.apache.pinot.core.io.writer.ForwardIndexWriter;\n \n \n-public class UnSortedValueReaderContext implements ReaderContext {\n+/**\n+ * Interface for forward index reader-writer.\n+ */\n+public interface ForwardIndexReaderWriter extends ForwardIndexReader<ReaderContext>, ForwardIndexWriter {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bedda3240d3dcfdb8995eba48f54ed20f594d465"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjY3ODg0OA==", "bodyText": "Is the caller still expected to call these api's with incremental docId? If so, perhaps get rid of the docId arg, and write at current cursor position?", "url": "https://github.com/apache/pinot/pull/5625#discussion_r446678848", "createdAt": "2020-06-28T17:50:43Z", "author": {"login": "mayankshriv"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/io/readerwriter/impl/FixedByteMVForwardIndexReaderWriter.java", "diffHunk": "@@ -221,102 +222,63 @@ private int updateHeader(int row, int numValues) {\n   }\n \n   @Override\n-  public void setCharArray(int row, char[] charArray) {\n-    int newStartIndex = updateHeader(row, charArray.length);\n-    for (int i = 0; i < charArray.length; i++) {\n-      _currentDataWriter.setChar(newStartIndex + i, 0, charArray[i]);\n-    }\n+  public DataType getValueType() {\n+    // NOTE: Dictionary id is handled as INT type.\n+    // TODO: Currently we only support dictionary-encoded forward index on multi-value columns.\n+    return DataType.INT;\n   }\n \n   @Override\n-  public void setShortArray(int row, short[] shortsArray) {\n+  public boolean isSingleValue() {\n+    return false;\n+  }\n \n-    int newStartIndex = updateHeader(row, shortsArray.length);\n-    for (int i = 0; i < shortsArray.length; i++) {\n-      _currentDataWriter.setShort(newStartIndex + i, 0, shortsArray[i]);\n-    }\n+  @Override\n+  public int getLengthOfShortestElement() {\n+    return _columnSizeInBytes;\n+  }\n+\n+  @Override\n+  public int getLengthOfLongestElement() {\n+    return _columnSizeInBytes;\n   }\n \n   @Override\n-  public void setIntArray(int row, int[] intArray) {\n-    int newStartIndex = updateHeader(row, intArray.length);\n+  public void setIntArray(int docId, int[] intArray) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bedda3240d3dcfdb8995eba48f54ed20f594d465"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjY3ODk4Mg==", "bodyText": "If this is a new interface, why provide default here (as opposed to an abstract base class)?", "url": "https://github.com/apache/pinot/pull/5625#discussion_r446678982", "createdAt": "2020-06-28T17:52:17Z", "author": {"login": "mayankshriv"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/io/writer/ForwardIndexWriter.java", "diffHunk": "@@ -0,0 +1,148 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.core.io.writer;\n+\n+import java.io.Closeable;\n+\n+\n+/**\n+ * Interface for forward index writer.\n+ */\n+public interface ForwardIndexWriter extends Closeable {\n+\n+  /**\n+   * SINGLE-VALUE COLUMN APIs\n+   */\n+\n+  /**\n+   * Writes the INT type single-value into the given document id.\n+   * <p>NOTE: Dictionary id is handled as INT type.\n+   *\n+   * @param docId Document id\n+   * @param value Value to write\n+   */\n+  default void setInt(int docId, int value) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bedda3240d3dcfdb8995eba48f54ed20f594d465"}, "originalPosition": 40}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "bedda3240d3dcfdb8995eba48f54ed20f594d465", "author": {"user": {"login": "Jackie-Jiang", "name": "Xiaotian (Jackie) Jiang"}}, "url": "https://github.com/apache/pinot/commit/bedda3240d3dcfdb8995eba48f54ed20f594d465", "committedDate": "2020-06-26T19:52:54Z", "message": "Make DataSource independent of query execution (not extend Operator)\n\nMotivation:\nCurrently DataSource is modeled as an Operator, where values are returned\nas a block complying with the Operator interface. This is confusing because\nof the following reasons:\n- The block contains all the documents in the segment, instead of a block\n  of at most 10000 documents as in the Projection layer.\n- The values are always fetched with their document ids, instead of fetched\n  as a block. Currently BlockValSet interface has 2 set of APIs because of\n  this, which is confusing.\n- The BlockValSet returned by the DataSource is not really a value set, but\n  a value reader on top of the forward index.\n- Extra BlockMetadata has to be maintained which can cause unexpected\n  problems (e.g. the issue fixed in #5619)\n\nChanges:\n- Make DataSource standalong without implementing Operator\n- Add interfaces for forward index (ForwardIndexReader, ForwardIndexWriter,\n  ForwardIndexReaderWriter)\n- Add ColumnValueReader class to help read forward index from DataSource\n- Remove the docId based APIs from BlockValSet"}, "afterCommit": {"oid": "a01595b95b6a0f0fbab05c9f7f50f4297716e279", "author": {"user": {"login": "Jackie-Jiang", "name": "Xiaotian (Jackie) Jiang"}}, "url": "https://github.com/apache/pinot/commit/a01595b95b6a0f0fbab05c9f7f50f4297716e279", "committedDate": "2020-06-30T22:44:43Z", "message": "Address comment: Remove the docId from the ForwardIndexWriter"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a01595b95b6a0f0fbab05c9f7f50f4297716e279", "author": {"user": {"login": "Jackie-Jiang", "name": "Xiaotian (Jackie) Jiang"}}, "url": "https://github.com/apache/pinot/commit/a01595b95b6a0f0fbab05c9f7f50f4297716e279", "committedDate": "2020-06-30T22:44:43Z", "message": "Address comment: Remove the docId from the ForwardIndexWriter"}, "afterCommit": {"oid": "bfb03c71dc933fec2a389452b399b708680078a0", "author": {"user": {"login": "Jackie-Jiang", "name": "Xiaotian (Jackie) Jiang"}}, "url": "https://github.com/apache/pinot/commit/bfb03c71dc933fec2a389452b399b708680078a0", "committedDate": "2020-06-30T23:25:03Z", "message": "Address comment: Remove the docId from the ForwardIndexWriter"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQxMjcxODEy", "url": "https://github.com/apache/pinot/pull/5625#pullrequestreview-441271812", "createdAt": "2020-07-02T00:17:45Z", "commit": {"oid": "bfb03c71dc933fec2a389452b399b708680078a0"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQwMDoxNzo0NlrOGr5Sfg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQwMDoxNzo0NlrOGr5Sfg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODY4MDU3NA==", "bodyText": "Why do we need this facade over ForwardIndexReader?\nAlso, this is misleading since ColumnValue implies the actual value in the column whereas if it is passing the call to ForwardIndex, then for dictionary encoded columns you are essentially reading the dictionaryIds which will then be used by DataFetcher to fetch actual values from the dictionary.\nDataFetcher takes care of reading the forward index and if there is dictionary, it then reads the dictionary. So DataFetcher takes care of reading the actual column values in both cases. I don't think we need this.\nDataFetcher should directly use ForwardIndexReader and Dictionary (which it already does)\nHaving this class also adds to the unclear semantics -- should ForwardIndexReader be enough or should we wrap it around ColumnValueReader? For example, we are using ColumnValueReader in PinotSegmentColumnReader but directly using ForwardIndexReader in IndexSegmentUtils", "url": "https://github.com/apache/pinot/pull/5625#discussion_r448680574", "createdAt": "2020-07-02T00:17:46Z", "author": {"login": "siddharthteotia"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/common/ColumnValueReader.java", "diffHunk": "@@ -0,0 +1,248 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.core.common;\n+\n+import org.apache.pinot.core.io.reader.ForwardIndexReader;\n+import org.apache.pinot.core.io.reader.ReaderContext;\n+import org.apache.pinot.spi.data.FieldSpec.DataType;\n+\n+\n+/**\n+ * ColumnValueReader is a wrapper class on top of the forward index reader to read values from it.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bfb03c71dc933fec2a389452b399b708680078a0"}, "originalPosition": 27}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQxMjcxODY2", "url": "https://github.com/apache/pinot/pull/5625#pullrequestreview-441271866", "createdAt": "2020-07-02T00:17:57Z", "commit": {"oid": "bfb03c71dc933fec2a389452b399b708680078a0"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQwMDoxNzo1N1rOGr5Ssw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQwMDoxNzo1N1rOGr5Ssw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODY4MDYyNw==", "bodyText": "IMO, we should directly use the ForwardIndexReader here", "url": "https://github.com/apache/pinot/pull/5625#discussion_r448680627", "createdAt": "2020-07-02T00:17:57Z", "author": {"login": "siddharthteotia"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/common/DataFetcher.java", "diffHunk": "@@ -21,28 +21,24 @@\n import java.util.Arrays;\n import java.util.HashMap;\n import java.util.Map;\n-import org.apache.pinot.core.operator.docvalsets.MultiValueSet;\n-import org.apache.pinot.core.operator.docvalsets.SingleValueSet;\n import org.apache.pinot.core.plan.DocIdSetPlanNode;\n import org.apache.pinot.core.segment.index.readers.Dictionary;\n \n \n /**\n- * DataFetcher is a higher level abstraction for data fetching. Given an index segment, DataFetcher can manage the\n- * DataSource, Dictionary, BlockValSet and BlockValIterator for this segment, preventing redundant construction for\n- * these instances. DataFetcher can be used by both selection, aggregation and group-by data fetching process, reducing\n- * duplicate codes and garbage collection.\n+ * DataFetcher is a higher level abstraction for data fetching. Given the DataSource, DataFetcher can manage the\n+ * ColumnValueReader and Dictionary for the column, preventing redundant construction for these instances. DataFetcher", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bfb03c71dc933fec2a389452b399b708680078a0"}, "originalPosition": 16}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQxMjcxOTI1", "url": "https://github.com/apache/pinot/pull/5625#pullrequestreview-441271925", "createdAt": "2020-07-02T00:18:12Z", "commit": {"oid": "bfb03c71dc933fec2a389452b399b708680078a0"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQwMDoxODoxMlrOGr5S3w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQwMDoxODoxMlrOGr5S3w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODY4MDY3MQ==", "bodyText": "Consider changing to - Base implementation for chunk based single-value raw forward index reader.", "url": "https://github.com/apache/pinot/pull/5625#discussion_r448680671", "createdAt": "2020-07-02T00:18:12Z", "author": {"login": "siddharthteotia"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/io/reader/impl/BaseChunkSVForwardIndexReader.java", "diffHunk": "@@ -16,27 +16,24 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-package org.apache.pinot.core.io.reader.impl.v1;\n+package org.apache.pinot.core.io.reader.impl;\n \n import java.io.IOException;\n import java.nio.ByteBuffer;\n import org.apache.pinot.core.io.compression.ChunkCompressorFactory;\n import org.apache.pinot.core.io.compression.ChunkDecompressor;\n-import org.apache.pinot.core.io.reader.BaseSingleColumnSingleValueReader;\n-import org.apache.pinot.core.io.reader.impl.ChunkReaderContext;\n-import org.apache.pinot.core.io.writer.impl.v1.BaseChunkSingleValueWriter;\n+import org.apache.pinot.core.io.reader.ForwardIndexReader;\n+import org.apache.pinot.core.io.writer.impl.BaseChunkSVForwardIndexWriter;\n import org.apache.pinot.core.segment.memory.PinotDataBuffer;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n \n /**\n- * Abstract class implementation for {@link BaseSingleColumnSingleValueReader}.\n- * Base class for the fixed and variable byte reader implementations.\n- *\n+ * Base implementation for chunk based single-value forward index reader.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bfb03c71dc933fec2a389452b399b708680078a0"}, "originalPosition": 25}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQxMjcyMTA2", "url": "https://github.com/apache/pinot/pull/5625#pullrequestreview-441272106", "createdAt": "2020-07-02T00:18:49Z", "commit": {"oid": "bfb03c71dc933fec2a389452b399b708680078a0"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQwMDoxODo1MFrOGr5TZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQwMDoxODo1MFrOGr5TZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODY4MDgwNQ==", "bodyText": "For completeness, let's also say raw forward index reader in the javadoc", "url": "https://github.com/apache/pinot/pull/5625#discussion_r448680805", "createdAt": "2020-07-02T00:18:50Z", "author": {"login": "siddharthteotia"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/io/reader/impl/FixedByteChunkSVForwardIndexReader.java", "diffHunk": "@@ -16,123 +16,117 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-package org.apache.pinot.core.io.reader.impl.v1;\n+package org.apache.pinot.core.io.reader.impl;\n \n import java.io.IOException;\n import java.nio.ByteBuffer;\n-import org.apache.pinot.core.io.reader.impl.ChunkReaderContext;\n-import org.apache.pinot.core.io.writer.impl.v1.FixedByteChunkSingleValueWriter;\n+import org.apache.pinot.core.io.writer.impl.FixedByteChunkSVForwardIndexWriter;\n import org.apache.pinot.core.segment.memory.PinotDataBuffer;\n+import org.apache.pinot.spi.data.FieldSpec.DataType;\n \n \n /**\n- * Reader class for data written out by {@link FixedByteChunkSingleValueWriter}.\n- * For data layout, please refer to the documentation for {@link FixedByteChunkSingleValueReader}\n+ * Reader class for data written out by {@link FixedByteChunkSVForwardIndexWriter}.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bfb03c71dc933fec2a389452b399b708680078a0"}, "originalPosition": 19}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQxMjcyNDA5", "url": "https://github.com/apache/pinot/pull/5625#pullrequestreview-441272409", "createdAt": "2020-07-02T00:19:42Z", "commit": {"oid": "bfb03c71dc933fec2a389452b399b708680078a0"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQwMDoxOTo0MlrOGr5Udg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQwMDoxOTo0MlrOGr5Udg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODY4MTA3OA==", "bodyText": "This doesn't sound good. Why are we adding it now if we already know it will be deleted in the future?\nOn that note, why do we need ForwardIndexCreator and ForwardIndexWriter? We might as well use the writer directly. The segment generation code instantiates creators -> creators instantiate writer. Can we just use writer or one of them whichever is suitable?", "url": "https://github.com/apache/pinot/pull/5625#discussion_r448681078", "createdAt": "2020-07-02T00:19:42Z", "author": {"login": "siddharthteotia"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/io/writer/ForwardIndexWriter.java", "diffHunk": "@@ -0,0 +1,138 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.core.io.writer;\n+\n+import java.io.Closeable;\n+\n+\n+/**\n+ * Interface for forward index writer.\n+ * <p>TODO: Remove this interface and merge the writer implementations into the ForwardIndexCreator implementations.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bfb03c71dc933fec2a389452b399b708680078a0"}, "originalPosition": 26}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQxMjcyNDM2", "url": "https://github.com/apache/pinot/pull/5625#pullrequestreview-441272436", "createdAt": "2020-07-02T00:19:47Z", "commit": {"oid": "bfb03c71dc933fec2a389452b399b708680078a0"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQwMDoxOTo0OFrOGr5UkQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQwMDoxOTo0OFrOGr5UkQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODY4MTEwNQ==", "bodyText": "Consider adding \"raw\"  -- Base implementation for chunk based single-value raw forward index writer.", "url": "https://github.com/apache/pinot/pull/5625#discussion_r448681105", "createdAt": "2020-07-02T00:19:48Z", "author": {"login": "siddharthteotia"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/io/writer/impl/BaseChunkSVForwardIndexWriter.java", "diffHunk": "@@ -27,21 +27,20 @@\n import java.nio.channels.FileChannel;\n import org.apache.pinot.core.io.compression.ChunkCompressor;\n import org.apache.pinot.core.io.compression.ChunkCompressorFactory;\n-import org.apache.pinot.core.io.writer.SingleColumnSingleValueWriter;\n+import org.apache.pinot.core.io.writer.ForwardIndexWriter;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n \n /**\n- * Abstract implementation for {@link SingleColumnSingleValueWriter}\n- * Base class for fixed and variable byte writer implementations.\n+ * Base implementation for chunk based single-value forward index writer.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bfb03c71dc933fec2a389452b399b708680078a0"}, "originalPosition": 22}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQxMjcyNDU2", "url": "https://github.com/apache/pinot/pull/5625#pullrequestreview-441272456", "createdAt": "2020-07-02T00:19:52Z", "commit": {"oid": "bfb03c71dc933fec2a389452b399b708680078a0"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQwMDoxOTo1MlrOGr5UpQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQwMDoxOTo1MlrOGr5UpQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODY4MTEyNQ==", "bodyText": "Why not just change the name of existing file FixedBitSingleValueWriter and remove all the unsupported operations. ? You are already doing that for FixedBitMVForwardIndexWriter which was originally FixedBitMultiValueWriter", "url": "https://github.com/apache/pinot/pull/5625#discussion_r448681125", "createdAt": "2020-07-02T00:19:52Z", "author": {"login": "siddharthteotia"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/io/writer/impl/FixedBitSVForwardIndexWriter.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.core.io.writer.impl;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.ByteOrder;\n+import org.apache.pinot.core.io.util.FixedBitIntReaderWriter;\n+import org.apache.pinot.core.io.writer.ForwardIndexWriter;\n+import org.apache.pinot.core.segment.memory.PinotDataBuffer;\n+\n+\n+/**\n+ * Bit-compressed dictionary-encoded forward index writer for single-value columns. The values written are dictionary\n+ * ids.\n+ */\n+public class FixedBitSVForwardIndexWriter implements ForwardIndexWriter {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bfb03c71dc933fec2a389452b399b708680078a0"}, "originalPosition": 33}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQxMjcyNTEw", "url": "https://github.com/apache/pinot/pull/5625#pullrequestreview-441272510", "createdAt": "2020-07-02T00:20:03Z", "commit": {"oid": "bfb03c71dc933fec2a389452b399b708680078a0"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQwMDoyMDowM1rOGr5U1w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQwMDoyMDowM1rOGr5U1w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODY4MTE3NQ==", "bodyText": "Add a comment stating only dictionary encoded MV columns are supported", "url": "https://github.com/apache/pinot/pull/5625#discussion_r448681175", "createdAt": "2020-07-02T00:20:03Z", "author": {"login": "siddharthteotia"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/segment/creator/ForwardIndexCreator.java", "diffHunk": "@@ -19,7 +19,105 @@\n package org.apache.pinot.core.segment.creator;\n \n import java.io.Closeable;\n+import org.apache.pinot.spi.data.FieldSpec;\n \n \n+/**\n+ * Interface for forward index creator.\n+ */\n public interface ForwardIndexCreator extends Closeable {\n+\n+  /**\n+   * Returns the data type of the values in the forward index.\n+   * <p>NOTE: Dictionary id is handled as INT type.\n+   */\n+  FieldSpec.DataType getValueType();\n+\n+  /**\n+   * Returns {@code true} if the forward index is for a single-value column, {@code false} otherwise.\n+   */\n+  boolean isSingleValue();\n+\n+  /**\n+   * SINGLE-VALUE COLUMN APIs\n+   */\n+\n+  /**\n+   * Indexes the next INT type single-value into the forward index.\n+   * <p>NOTE: Dictionary id is handled as INT type.\n+   *\n+   * @param value Value to index\n+   */\n+  default void index(int value) {\n+    throw new UnsupportedOperationException();\n+  }\n+\n+  /**\n+   * Indexes the next LONG type single-value into the forward index.\n+   *\n+   * @param value Value to index\n+   */\n+  default void index(long value) {\n+    throw new UnsupportedOperationException();\n+  }\n+\n+  /**\n+   * Indexes the next FLOAT type single-value into the forward index.\n+   *\n+   * @param value Value to index\n+   */\n+  default void index(float value) {\n+    throw new UnsupportedOperationException();\n+  }\n+\n+  /**\n+   * Indexes the next DOUBLE type single-value into the forward index.\n+   *\n+   * @param value Value to index\n+   */\n+  default void index(double value) {\n+    throw new UnsupportedOperationException();\n+  }\n+\n+  /**\n+   * Indexes the next STRING type single-value into the forward index.\n+   *\n+   * @param value Value to index\n+   */\n+  default void index(String value) {\n+    throw new UnsupportedOperationException();\n+  }\n+\n+  /**\n+   * Indexes the next BYTES type single-value into the forward index.\n+   *\n+   * @param value Value to index\n+   */\n+  default void index(byte[] value) {\n+    throw new UnsupportedOperationException();\n+  }\n+\n+  /**\n+   * Indexes the next raw single-value (not dictionary id) into the forward index. The given value should be of the\n+   * forward index value type.\n+   *\n+   * @param value Value to index\n+   */\n+  default void index(Object value) {\n+    throw new UnsupportedOperationException();\n+  }\n+\n+  /**\n+   * MULTI-VALUE COLUMN APIs", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bfb03c71dc933fec2a389452b399b708680078a0"}, "originalPosition": 93}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQxMjcyNTU0", "url": "https://github.com/apache/pinot/pull/5625#pullrequestreview-441272554", "createdAt": "2020-07-02T00:20:09Z", "commit": {"oid": "bfb03c71dc933fec2a389452b399b708680078a0"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQwMDoyMDowOVrOGr5VAg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQwMDoyMDowOVrOGr5VAg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODY4MTIxOA==", "bodyText": "Can we add APIs for each raw value type so that this interface can also be used for non dictionary based inverted indexes? With the current change, we can probably still do but the raw value has to be converted to string?", "url": "https://github.com/apache/pinot/pull/5625#discussion_r448681218", "createdAt": "2020-07-02T00:20:09Z", "author": {"login": "siddharthteotia"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/segment/index/readers/InvertedIndexReader.java", "diffHunk": "@@ -24,13 +24,14 @@\n public interface InvertedIndexReader<T> extends Closeable {\n \n   /**\n-   * Get the document ids for the given dictionary id.\n-   * @param dictId dictionary ID\n+   * Returns the document ids for the given dictionary id.\n    */\n   T getDocIds(int dictId);\n \n   /**\n-   * Get the document ids for a given value\n+   * Returns the document ids for the given string representation of the value.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bfb03c71dc933fec2a389452b399b708680078a0"}, "originalPosition": 12}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQxMjcyNjEw", "url": "https://github.com/apache/pinot/pull/5625#pullrequestreview-441272610", "createdAt": "2020-07-02T00:20:20Z", "commit": {"oid": "bfb03c71dc933fec2a389452b399b708680078a0"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQwMDoyMDoyMFrOGr5VRw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQwMDoyMDoyMFrOGr5VRw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODY4MTI4Nw==", "bodyText": "This test was for fixed length bytes which for some reason FixedByteChunk writer also supported.", "url": "https://github.com/apache/pinot/pull/5625#discussion_r448681287", "createdAt": "2020-07-02T00:20:20Z", "author": {"login": "siddharthteotia"}, "path": "pinot-core/src/test/java/org/apache/pinot/index/readerwriter/FixedByteChunkSVForwardIndexReaderWriterTest.java", "diffHunk": "@@ -276,56 +257,6 @@ public void testDouble(ChunkCompressorFactory.CompressionType compressionType)\n     FileUtils.deleteQuietly(outFileEightByte);\n   }\n \n-  public void testBytes(ChunkCompressorFactory.CompressionType compressionType)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bfb03c71dc933fec2a389452b399b708680078a0"}, "originalPosition": 265}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQxMjcyNzQy", "url": "https://github.com/apache/pinot/pull/5625#pullrequestreview-441272742", "createdAt": "2020-07-02T00:20:46Z", "commit": {"oid": "bfb03c71dc933fec2a389452b399b708680078a0"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "4b6c09a6c713e2f09a4de5c48d818715e740107e", "author": {"user": {"login": "Jackie-Jiang", "name": "Xiaotian (Jackie) Jiang"}}, "url": "https://github.com/apache/pinot/commit/4b6c09a6c713e2f09a4de5c48d818715e740107e", "committedDate": "2020-07-05T19:57:31Z", "message": "Address comments:\n- Remove ColumnValueReader\n- Make ForwardIndexReaderContext closeable to release resource\n- Remove ForwardIndexWriter"}, "afterCommit": {"oid": "4159c0e2cf9ca8cdf47bbf788e720f8486d2b0fe", "author": {"user": {"login": "Jackie-Jiang", "name": "Xiaotian (Jackie) Jiang"}}, "url": "https://github.com/apache/pinot/commit/4159c0e2cf9ca8cdf47bbf788e720f8486d2b0fe", "committedDate": "2020-07-06T05:48:56Z", "message": "Address comments:\n- Remove ColumnValueReader\n- Make ForwardIndexReaderContext closeable to release resource\n- Remove ForwardIndexWriter"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQzMjIxNzc3", "url": "https://github.com/apache/pinot/pull/5625#pullrequestreview-443221777", "createdAt": "2020-07-06T16:17:41Z", "commit": {"oid": "4159c0e2cf9ca8cdf47bbf788e720f8486d2b0fe"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "835d5b4a9c866c7031e64116648c64921da188f7", "author": {"user": {"login": "Jackie-Jiang", "name": "Xiaotian (Jackie) Jiang"}}, "url": "https://github.com/apache/pinot/commit/835d5b4a9c866c7031e64116648c64921da188f7", "committedDate": "2020-07-06T17:55:34Z", "message": "Make DataSource independent of query execution (not extend Operator)\n\nMotivation:\nCurrently DataSource is modeled as an Operator, where values are returned\nas a block complying with the Operator interface. This is confusing because\nof the following reasons:\n- The block contains all the documents in the segment, instead of a block\n  of at most 10000 documents as in the Projection layer.\n- The values are always fetched with their document ids, instead of fetched\n  as a block. Currently BlockValSet interface has 2 set of APIs because of\n  this, which is confusing.\n- The BlockValSet returned by the DataSource is not really a value set, but\n  a value reader on top of the forward index.\n- Extra BlockMetadata has to be maintained which can cause unexpected\n  problems (e.g. the issue fixed in #5619)\n\nChanges:\n- Make DataSource standalong without implementing Operator\n- Add interfaces for forward index (ForwardIndexReader, ForwardIndexWriter,\n  ForwardIndexReaderWriter)\n- Add ColumnValueReader class to help read forward index from DataSource\n- Remove the docId based APIs from BlockValSet"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cf30535623fb42abc85830b33d8ca189ffce823e", "author": {"user": {"login": "Jackie-Jiang", "name": "Xiaotian (Jackie) Jiang"}}, "url": "https://github.com/apache/pinot/commit/cf30535623fb42abc85830b33d8ca189ffce823e", "committedDate": "2020-07-06T17:55:39Z", "message": "Address comment: Remove the docId from the ForwardIndexWriter"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2e397329637a7ffb067f16a2a5075723528ca6d5", "author": {"user": {"login": "Jackie-Jiang", "name": "Xiaotian (Jackie) Jiang"}}, "url": "https://github.com/apache/pinot/commit/2e397329637a7ffb067f16a2a5075723528ca6d5", "committedDate": "2020-07-06T17:56:12Z", "message": "Address comments:\n- Remove ColumnValueReader\n- Make ForwardIndexReaderContext closeable to release resource\n- Remove ForwardIndexWriter"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "4159c0e2cf9ca8cdf47bbf788e720f8486d2b0fe", "author": {"user": {"login": "Jackie-Jiang", "name": "Xiaotian (Jackie) Jiang"}}, "url": "https://github.com/apache/pinot/commit/4159c0e2cf9ca8cdf47bbf788e720f8486d2b0fe", "committedDate": "2020-07-06T05:48:56Z", "message": "Address comments:\n- Remove ColumnValueReader\n- Make ForwardIndexReaderContext closeable to release resource\n- Remove ForwardIndexWriter"}, "afterCommit": {"oid": "2e397329637a7ffb067f16a2a5075723528ca6d5", "author": {"user": {"login": "Jackie-Jiang", "name": "Xiaotian (Jackie) Jiang"}}, "url": "https://github.com/apache/pinot/commit/2e397329637a7ffb067f16a2a5075723528ca6d5", "committedDate": "2020-07-06T17:56:12Z", "message": "Address comments:\n- Remove ColumnValueReader\n- Make ForwardIndexReaderContext closeable to release resource\n- Remove ForwardIndexWriter"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 714, "cost": 1, "resetAt": "2021-10-28T18:00:02Z"}}}