{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY4MjMwODM1", "number": 5869, "title": "Roundup decimal points when compressing AnomalyTimelinesView", "bodyText": "Description\nPreviously it is found that many saved prediction results in AnomalyTimelinesView contain up to 14 decimal points. This is a waste of storage with little added information on the values. This pr first round up the time series to 3 decimal points before compressing.", "createdAt": "2020-08-15T00:15:58Z", "url": "https://github.com/apache/pinot/pull/5869", "merged": true, "mergeCommit": {"oid": "7a30a808d3885386b311a9c399bfc326dc68a316"}, "closed": true, "closedAt": "2020-08-18T20:24:36Z", "author": {"login": "Ruoyingw"}, "timelineItems": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc-9xyxgH2gAyNDY4MjMwODM1OmZjYTFiMmJlM2NmNDE2MzE3NzBkYTczYTVhYjFhMmIzYTE2NWI4MjA=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdAM-eSAFqTQ2OTgwNDEzNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "fca1b2be3cf41631770da73a5ab1a2b3a165b820", "author": {"user": {"login": "Ruoyingw", "name": "Ruoying Wang"}}, "url": "https://github.com/apache/pinot/commit/fca1b2be3cf41631770da73a5ab1a2b3a165b820", "committedDate": "2020-08-15T00:07:59Z", "message": "Roundup decimal points when compressing AnomlayTimeLinesView"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY4NzkyNjc1", "url": "https://github.com/apache/pinot/pull/5869#pullrequestreview-468792675", "createdAt": "2020-08-17T20:00:12Z", "commit": {"oid": "fca1b2be3cf41631770da73a5ab1a2b3a165b820"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QyMDowMDoxM1rOHB46Iw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QyMTowNToxM1rOHB61tA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTc0MzAxMQ==", "bodyText": "I think that the roundup logic is better added into compress(DEFAULT_MAX_LENGTH), because people can call either these two methods to compress and roundup should run in both cases.", "url": "https://github.com/apache/pinot/pull/5869#discussion_r471743011", "createdAt": "2020-08-17T20:00:13Z", "author": {"login": "vincentchenjl"}, "path": "thirdeye/thirdeye-pinot/src/main/java/org/apache/pinot/thirdeye/anomaly/views/CondensedAnomalyTimelinesView.java", "diffHunk": "@@ -182,9 +183,33 @@ public static CondensedAnomalyTimelinesView fromAnomalyTimelinesView(AnomalyTime\n    * @return a compressed CondensedAnomalyTimelinesView\n    */\n   public CondensedAnomalyTimelinesView compress() {\n+    if (timeStamps.size() == 0) {\n+      return this;\n+    }\n+    try {\n+      if (this.toJsonString().length() > DEFAULT_MAX_LENGTH) {\n+        // First try rounding up\n+        roundUp();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fca1b2be3cf41631770da73a5ab1a2b3a165b820"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTc3NDY0NA==", "bodyText": "Could we add another check to make sure that the JSON exported also has 3 decimal points? For example Assert.assertEquals(OBJECT_MAPPER.writeValueAsString(compressedView.getBaselineValues().get(i)), \"2.833\")", "url": "https://github.com/apache/pinot/pull/5869#discussion_r471774644", "createdAt": "2020-08-17T21:05:13Z", "author": {"login": "vincentchenjl"}, "path": "thirdeye/thirdeye-pinot/src/test/java/org/apache/pinot/thirdeye/anomaly/views/TestCondensedAnomalyTimelinesView.java", "diffHunk": "@@ -73,35 +74,46 @@ public void testFromJsonString() throws Exception{\n     }\n   }\n \n+  /** Compression Test case 1: anomaly view could satisfy requirement after rounding up the decimals.*/\n+  @Test\n+  public void testCompressWithRoundUp() throws Exception {\n+    int testNum = 500;\n+    CondensedAnomalyTimelinesView condensedView = CondensedAnomalyTimelinesView.fromAnomalyTimelinesView(getTestData(testNum));\n+    Assert.assertTrue(condensedView.toJsonString().length() > CondensedAnomalyTimelinesView.DEFAULT_MAX_LENGTH);\n+    CondensedAnomalyTimelinesView compressedView = condensedView.compress();\n+    Assert.assertTrue(compressedView.toJsonString().length() < CondensedAnomalyTimelinesView.DEFAULT_MAX_LENGTH);\n+    Assert.assertEquals(testNum, compressedView.timeStamps.size());\n+  }\n+\n+  /** Compression Test case 2:  The anomaly view is still too large after rounding up, and needed to be further compressed */\n   @Test\n   public void testCompress() throws Exception {\n-    int testNum = 1500;\n+    int testNum = 600;\n     long minBucketMillis = CondensedAnomalyTimelinesView.DEFAULT_MIN_BUCKET_UNIT;\n     CondensedAnomalyTimelinesView condensedView = CondensedAnomalyTimelinesView.fromAnomalyTimelinesView(getTestData(testNum));\n     Assert.assertTrue(condensedView.toJsonString().length() > CondensedAnomalyTimelinesView.DEFAULT_MAX_LENGTH);\n-\n     CondensedAnomalyTimelinesView compressedView = condensedView.compress();\n     Assert.assertTrue(compressedView.toJsonString().length() < CondensedAnomalyTimelinesView.DEFAULT_MAX_LENGTH);\n-    Assert.assertEquals(compressedView.bucketMillis.longValue(), 240l);\n+    Assert.assertEquals(300, compressedView.timeStamps.size());\n+    Assert.assertEquals(compressedView.bucketMillis.longValue(), 10);\n     DateTime date = new DateTime(2018, 1, 1, 0, 0, 0);\n     for (int i = 0; i < compressedView.getTimeStamps().size(); i++) {\n       Assert.assertEquals(compressedView.getTimeStamps().get(i).longValue(),\n           (date.getMillis() - condensedView.timestampOffset)/minBucketMillis);\n-      Assert.assertEquals(compressedView.getCurrentValues().get(i), i * 4 + 1.5, 0.000001);\n-      Assert.assertEquals(compressedView.getBaselineValues().get(i), i * 4 + 1.6, 0.000001);\n-      date = date.plusHours(4);\n+      Assert.assertEquals(compressedView.getCurrentValues().get(i), i * 2 + 0.5, 0.000001);\n+      Assert.assertEquals(compressedView.getBaselineValues().get(i), i * 2 + 0.833, 0.000001);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fca1b2be3cf41631770da73a5ab1a2b3a165b820"}, "originalPosition": 56}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f69e63cbcf578acbff813e2666433de59d04f125", "author": {"user": {"login": "Ruoyingw", "name": "Ruoying Wang"}}, "url": "https://github.com/apache/pinot/commit/f69e63cbcf578acbff813e2666433de59d04f125", "committedDate": "2020-08-17T21:11:21Z", "message": "Roundup decimal points when compressing AnomlayTimeLinesView"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "96ca06ffeeb16da90f16a3b46dca3875b12ca3d8", "author": {"user": {"login": "Ruoyingw", "name": "Ruoying Wang"}}, "url": "https://github.com/apache/pinot/commit/96ca06ffeeb16da90f16a3b46dca3875b12ca3d8", "committedDate": "2020-08-17T21:15:16Z", "message": "Merge remote-tracking branch 'ruowang/roundup' into roundup"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "599ba2af00b1dd7162cbae2b2c106de08b98e5e9", "author": {"user": {"login": "Ruoyingw", "name": "Ruoying Wang"}}, "url": "https://github.com/apache/pinot/commit/599ba2af00b1dd7162cbae2b2c106de08b98e5e9", "committedDate": "2020-08-17T21:21:26Z", "message": "Merge remote-tracking branch 'origin/master' into roundup"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1ef02bd53e8dba4d905fc77ca700c472c8c1d13b", "author": {"user": {"login": "Ruoyingw", "name": "Ruoying Wang"}}, "url": "https://github.com/apache/pinot/commit/1ef02bd53e8dba4d905fc77ca700c472c8c1d13b", "committedDate": "2020-08-17T23:37:23Z", "message": "move getRoundDouble() to utils and add more tests"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY4OTE5MTEx", "url": "https://github.com/apache/pinot/pull/5869#pullrequestreview-468919111", "createdAt": "2020-08-18T00:42:37Z", "commit": {"oid": "1ef02bd53e8dba4d905fc77ca700c472c8c1d13b"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY5ODA0MTM0", "url": "https://github.com/apache/pinot/pull/5869#pullrequestreview-469804134", "createdAt": "2020-08-18T20:24:20Z", "commit": {"oid": "1ef02bd53e8dba4d905fc77ca700c472c8c1d13b"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 201, "cost": 1, "resetAt": "2021-10-28T18:00:02Z"}}}