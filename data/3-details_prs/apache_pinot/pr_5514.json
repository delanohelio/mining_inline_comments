{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDMwNTQ5NDUz", "number": 5514, "title": "Add integration test for theta sketches", "bodyText": "#5316 introduces theta sketch aggregation function. Since the new aggregation function applies a different post aggregation logic which gets applied in the broker side, it's beneficial to test it end-to-end on all components in an integration test.", "createdAt": "2020-06-08T01:09:24Z", "url": "https://github.com/apache/pinot/pull/5514", "merged": true, "mergeCommit": {"oid": "1a420b2af2b2cdd2a4f2a37969e1b077a72201e1"}, "closed": true, "closedAt": "2020-07-09T16:02:29Z", "author": {"login": "sajjad-moradi"}, "timelineItems": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcpRVlEAFqTQyNjI5Njc3OQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABczRQOuAFqTQ0NTc1ODg4Nw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI2Mjk2Nzc5", "url": "https://github.com/apache/pinot/pull/5514#pullrequestreview-426296779", "createdAt": "2020-06-08T14:25:39Z", "commit": {"oid": "34ce461a7f9dc8277f062d485e545a8da00eec65"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxNDoyNTo0MFrOGghHUg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxNDoyNjoyOFrOGghKDw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjc1MDE2Mg==", "bodyText": "Can this be merged inside of OfflineClusterIntegrationTest, by creating a new table (once the original test is completed)? This way we avoid setting up the cluster for every new feature new add. Not sure, if there's a time limit on travis per test though (would need to check that first).", "url": "https://github.com/apache/pinot/pull/5514#discussion_r436750162", "createdAt": "2020-06-08T14:25:40Z", "author": {"login": "mayankshriv"}, "path": "pinot-integration-tests/src/test/java/org/apache/pinot/integration/tests/ThetaSketchIntegrationTest.java", "diffHunk": "@@ -0,0 +1,263 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.integration.tests;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.google.common.collect.ImmutableList;\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.ByteBuffer;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import org.apache.avro.Schema.Field;\n+import org.apache.avro.Schema.Type;\n+import org.apache.avro.file.DataFileWriter;\n+import org.apache.avro.generic.GenericData;\n+import org.apache.avro.generic.GenericDatumWriter;\n+import org.apache.commons.io.FileUtils;\n+import org.apache.commons.lang3.tuple.ImmutablePair;\n+import org.apache.commons.lang3.tuple.Pair;\n+import org.apache.datasketches.theta.UpdateSketch;\n+import org.apache.datasketches.theta.UpdateSketchBuilder;\n+import org.apache.pinot.spi.config.table.TableConfig;\n+import org.apache.pinot.spi.config.table.TableType;\n+import org.apache.pinot.spi.data.FieldSpec;\n+import org.apache.pinot.spi.data.Schema;\n+import org.apache.pinot.spi.utils.builder.TableConfigBuilder;\n+import org.apache.pinot.util.TestUtils;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Test;\n+\n+import static org.testng.Assert.assertEquals;\n+\n+\n+public class ThetaSketchIntegrationTest extends BaseClusterIntegrationTest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "34ce461a7f9dc8277f062d485e545a8da00eec65"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjc1MDg2Mw==", "bodyText": "Would be good to create a utility method that generates the query based on parameters. Also, would be good to cover SQL/PQL, selection and group by.", "url": "https://github.com/apache/pinot/pull/5514#discussion_r436750863", "createdAt": "2020-06-08T14:26:28Z", "author": {"login": "mayankshriv"}, "path": "pinot-integration-tests/src/test/java/org/apache/pinot/integration/tests/ThetaSketchIntegrationTest.java", "diffHunk": "@@ -0,0 +1,263 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.integration.tests;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.google.common.collect.ImmutableList;\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.ByteBuffer;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import org.apache.avro.Schema.Field;\n+import org.apache.avro.Schema.Type;\n+import org.apache.avro.file.DataFileWriter;\n+import org.apache.avro.generic.GenericData;\n+import org.apache.avro.generic.GenericDatumWriter;\n+import org.apache.commons.io.FileUtils;\n+import org.apache.commons.lang3.tuple.ImmutablePair;\n+import org.apache.commons.lang3.tuple.Pair;\n+import org.apache.datasketches.theta.UpdateSketch;\n+import org.apache.datasketches.theta.UpdateSketchBuilder;\n+import org.apache.pinot.spi.config.table.TableConfig;\n+import org.apache.pinot.spi.config.table.TableType;\n+import org.apache.pinot.spi.data.FieldSpec;\n+import org.apache.pinot.spi.data.Schema;\n+import org.apache.pinot.spi.utils.builder.TableConfigBuilder;\n+import org.apache.pinot.util.TestUtils;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Test;\n+\n+import static org.testng.Assert.assertEquals;\n+\n+\n+public class ThetaSketchIntegrationTest extends BaseClusterIntegrationTest {\n+\n+  private static final String DIM_NAME = \"dimName\";\n+  private static final String DIM_VALUE = \"dimValue\";\n+  private static final String SHARD_ID = \"shardId\";\n+  private static final String THETA_SKETCH = \"thetaSketchCol\";\n+\n+  @BeforeClass\n+  public void setup()\n+      throws Exception {\n+    TestUtils.ensureDirectoriesExistAndEmpty(_tempDir, _segmentDir, _tarDir);\n+\n+    // Start the Pinot cluster\n+    startZk();\n+    startController();\n+    startBroker();\n+    startServer();\n+\n+    // create & upload schema AND table config\n+    Schema schema = new Schema.SchemaBuilder().setSchemaName(DEFAULT_SCHEMA_NAME)\n+        .addSingleValueDimension(DIM_NAME, FieldSpec.DataType.STRING)\n+        .addSingleValueDimension(DIM_VALUE, FieldSpec.DataType.STRING)\n+        .addSingleValueDimension(SHARD_ID, FieldSpec.DataType.INT)\n+        .addSingleValueDimension(THETA_SKETCH, FieldSpec.DataType.BYTES).build();\n+    addSchema(schema);\n+    TableConfig tableConfig = new TableConfigBuilder(TableType.OFFLINE).setTableName(DEFAULT_TABLE_NAME).build();\n+    addTableConfig(tableConfig);\n+\n+    // create & upload segments\n+    File avroFile = createAvroFile();\n+    ClusterIntegrationTestUtils.buildSegmentFromAvro(avroFile, tableConfig, schema, 0, _segmentDir, _tarDir);\n+    uploadSegments(DEFAULT_TABLE_NAME, _tarDir);\n+\n+    waitForAllDocsLoaded(60_000);\n+  }\n+\n+  @Override\n+  protected long getCountStarResult() {\n+    /*\n+    Uploaded table content:\n+\n+    row#  dimName  dimValue  shardId  thetaSketchCol\n+    ----  =======  ========  =======  ==============\n+    1     country  US        1        ...\n+    2     country  CA        1        ...\n+    3     country  MX        1        ...\n+    4     title    Engineer  1        ...\n+    5     title    Manager   1        ...\n+    6     country  US        2        ...\n+    7     country  CA        2        ...\n+    8     country  MX        2        ...\n+    9     title    Engineer  2        ...\n+    10    title    Manager   2        ...\n+     */\n+    return 10;\n+  }\n+\n+  @Test\n+  public void testThetaSketchQuery()\n+      throws Exception {\n+    /*\n+    Original data:\n+\n+    Title     Country  Shard#1  Shard#2\n+    --------  -------  -------  -------\n+    Engineer  US       50       110\n+    Engineer  CA       60       120\n+    Engineer  MX       70       130\n+    Manager   US       80       140\n+    Manager   CA       90       150\n+    Manager   MX       100      160\n+     */\n+\n+    // title = engineer\n+    String query = \"select distinctCountThetaSketch(thetaSketchCol, '', \"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "34ce461a7f9dc8277f062d485e545a8da00eec65"}, "originalPosition": 127}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "295f5a209bfdabc7aa9d7e21271009b391265507", "author": {"user": null}, "url": "https://github.com/apache/pinot/commit/295f5a209bfdabc7aa9d7e21271009b391265507", "committedDate": "2020-07-01T23:24:11Z", "message": "Add integration test for theta sketches"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d351b0a14116e16b7e469384822898f54e0551bf", "author": {"user": {"login": "sajjad-moradi", "name": "Sajjad Moradi"}}, "url": "https://github.com/apache/pinot/commit/d351b0a14116e16b7e469384822898f54e0551bf", "committedDate": "2020-07-01T23:24:11Z", "message": "Change dim names and values"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c0d23ef60a36b7c00e16b2958d550f5499e4564d", "author": {"user": {"login": "sajjad-moradi", "name": "Sajjad Moradi"}}, "url": "https://github.com/apache/pinot/commit/c0d23ef60a36b7c00e16b2958d550f5499e4564d", "committedDate": "2020-07-01T23:24:11Z", "message": "Added groupby + sql/pql"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "1006391f4b9c34454a8f41c08879ad1e7c3a62ef", "author": {"user": {"login": "sajjad-moradi", "name": "Sajjad Moradi"}}, "url": "https://github.com/apache/pinot/commit/1006391f4b9c34454a8f41c08879ad1e7c3a62ef", "committedDate": "2020-06-08T18:31:54Z", "message": "Change dim names and values"}, "afterCommit": {"oid": "c0d23ef60a36b7c00e16b2958d550f5499e4564d", "author": {"user": {"login": "sajjad-moradi", "name": "Sajjad Moradi"}}, "url": "https://github.com/apache/pinot/commit/c0d23ef60a36b7c00e16b2958d550f5499e4564d", "committedDate": "2020-07-01T23:24:11Z", "message": "Added groupby + sql/pql"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f04d195129c9ad10e6747291b69fd95c3389c4e0", "author": {"user": {"login": "sajjad-moradi", "name": "Sajjad Moradi"}}, "url": "https://github.com/apache/pinot/commit/f04d195129c9ad10e6747291b69fd95c3389c4e0", "committedDate": "2020-07-02T20:45:10Z", "message": "Fix sql litral issue"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ1NzU4ODg3", "url": "https://github.com/apache/pinot/pull/5514#pullrequestreview-445758887", "createdAt": "2020-07-09T16:02:20Z", "commit": {"oid": "f04d195129c9ad10e6747291b69fd95c3389c4e0"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 553, "cost": 1, "resetAt": "2021-10-28T18:00:02Z"}}}