{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc0MDQyNjEy", "number": 5066, "title": "Refactor existing Message Handler to update query quota on broker (Part 1)", "bodyText": "This PR refactors existing Message Handler to update query quota on broker, so that when the query quota gets updated in table config, pinot controller will send the message to brokers, and brokers can update the rate of the rate limiter on the fly without restarting pinot-broker.\nReusing the exsiting message handler factory since one key can only register one factory.\nThe logic change of sending message from pinot-controller is in this PR: #5067", "createdAt": "2020-02-12T01:26:16Z", "url": "https://github.com/apache/pinot/pull/5066", "merged": true, "mergeCommit": {"oid": "67450decc72c0d89560a837a94bec7c50700b382"}, "closed": true, "closedAt": "2020-03-03T17:27:53Z", "author": {"login": "jackjlli"}, "timelineItems": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcEUXcKgFqTM1OTE0OTA0OA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcJ4drXAFqTM2NzY1NjMzOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU5MTQ5MDQ4", "url": "https://github.com/apache/pinot/pull/5066#pullrequestreview-359149048", "createdAt": "2020-02-14T18:53:33Z", "commit": {"oid": "b6e49a0d50d49536f00676b19e225ea3d6ae3232"}, "state": "COMMENTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQxODo1MzozM1rOFqAXCw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQxOTowMzoxN1rOFqAn4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTU5MDQxMQ==", "bodyText": "nit: Can you change this to _isShuttingDown\nthanks", "url": "https://github.com/apache/pinot/pull/5066#discussion_r379590411", "createdAt": "2020-02-14T18:53:33Z", "author": {"login": "mcvsubbu"}, "path": "pinot-broker/src/main/java/org/apache/pinot/broker/broker/helix/BrokerMessageHandlerFactory.java", "diffHunk": "@@ -19,53 +19,65 @@\n package org.apache.pinot.broker.broker.helix;\n \n import java.util.Iterator;\n+import java.util.Set;\n import java.util.concurrent.ConcurrentHashMap;\n import org.apache.helix.NotificationContext;\n import org.apache.helix.messaging.handling.HelixTaskResult;\n import org.apache.helix.messaging.handling.MessageHandler;\n import org.apache.helix.messaging.handling.MessageHandlerFactory;\n import org.apache.helix.model.Message;\n+import org.apache.pinot.broker.queryquota.HelixExternalViewBasedQueryQuotaManager;\n import org.apache.pinot.broker.routing.HelixExternalViewBasedRouting;\n import org.apache.pinot.common.messages.TimeboundaryRefreshMessage;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n \n-// Handle the TimeboundaryRefresh message. The Timeboundary refresh requests are handled asynchronously: i.e., they are\n-// first put into a request map first. The map dedups requests by their tables thus multiple requests for the same\n+// Handle the broker message, like TimeboundaryRefresh and UpdateQueryQuota.\n+// The Timeboundary refresh requests are handled asynchronously: i.e., they are first put into a request map first.\n+// The map dedups requests by their tables thus multiple requests for the same\n // table only needs to be executed once. A background thread periodically checks the map and performs refreshing for\n // all the tables in the map.\n-public class TimeboundaryRefreshMessageHandlerFactory implements MessageHandlerFactory {\n-  private static final Logger LOGGER = LoggerFactory.getLogger(TimeboundaryRefreshMessageHandlerFactory.class);\n+// The query quota update can be done synchronously, as the table config won't be changed frequently.\n+public class BrokerMessageHandlerFactory implements MessageHandlerFactory {\n+  private static final Logger LOGGER = LoggerFactory.getLogger(BrokerMessageHandlerFactory.class);\n   private final HelixExternalViewBasedRouting _helixExternalViewBasedRouting;\n-  // A map to store the unique requests (i.e., the table names) to refresh the TimeBoundaryInfo of a pinot table.\n-  // Ideally a Hashset will suffice but Java util currently does not have Hashset.\n-  private static ConcurrentHashMap<String, Boolean> _tablesToRefreshmap = new ConcurrentHashMap<>();\n-  private boolean shuttingDown;\n+  private final HelixExternalViewBasedQueryQuotaManager _helixExternalViewBasedQueryQuotaManager;\n+  // A set to store the unique requests (i.e., the table names) to refresh the TimeBoundaryInfo of a pinot table.\n+  private static Set<String> _tablesToRefreshSet = ConcurrentHashMap.newKeySet();\n+  private boolean _shuttingDown;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b6e49a0d50d49536f00676b19e225ea3d6ae3232"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTU5MDk3Ng==", "bodyText": "thanks for fixing this", "url": "https://github.com/apache/pinot/pull/5066#discussion_r379590976", "createdAt": "2020-02-14T18:54:48Z", "author": {"login": "mcvsubbu"}, "path": "pinot-broker/src/main/java/org/apache/pinot/broker/broker/helix/BrokerMessageHandlerFactory.java", "diffHunk": "@@ -19,53 +19,65 @@\n package org.apache.pinot.broker.broker.helix;\n \n import java.util.Iterator;\n+import java.util.Set;\n import java.util.concurrent.ConcurrentHashMap;\n import org.apache.helix.NotificationContext;\n import org.apache.helix.messaging.handling.HelixTaskResult;\n import org.apache.helix.messaging.handling.MessageHandler;\n import org.apache.helix.messaging.handling.MessageHandlerFactory;\n import org.apache.helix.model.Message;\n+import org.apache.pinot.broker.queryquota.HelixExternalViewBasedQueryQuotaManager;\n import org.apache.pinot.broker.routing.HelixExternalViewBasedRouting;\n import org.apache.pinot.common.messages.TimeboundaryRefreshMessage;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n \n-// Handle the TimeboundaryRefresh message. The Timeboundary refresh requests are handled asynchronously: i.e., they are\n-// first put into a request map first. The map dedups requests by their tables thus multiple requests for the same\n+// Handle the broker message, like TimeboundaryRefresh and UpdateQueryQuota.\n+// The Timeboundary refresh requests are handled asynchronously: i.e., they are first put into a request map first.\n+// The map dedups requests by their tables thus multiple requests for the same\n // table only needs to be executed once. A background thread periodically checks the map and performs refreshing for\n // all the tables in the map.\n-public class TimeboundaryRefreshMessageHandlerFactory implements MessageHandlerFactory {\n-  private static final Logger LOGGER = LoggerFactory.getLogger(TimeboundaryRefreshMessageHandlerFactory.class);\n+// The query quota update can be done synchronously, as the table config won't be changed frequently.\n+public class BrokerMessageHandlerFactory implements MessageHandlerFactory {\n+  private static final Logger LOGGER = LoggerFactory.getLogger(BrokerMessageHandlerFactory.class);\n   private final HelixExternalViewBasedRouting _helixExternalViewBasedRouting;\n-  // A map to store the unique requests (i.e., the table names) to refresh the TimeBoundaryInfo of a pinot table.\n-  // Ideally a Hashset will suffice but Java util currently does not have Hashset.\n-  private static ConcurrentHashMap<String, Boolean> _tablesToRefreshmap = new ConcurrentHashMap<>();\n-  private boolean shuttingDown;\n+  private final HelixExternalViewBasedQueryQuotaManager _helixExternalViewBasedQueryQuotaManager;\n+  // A set to store the unique requests (i.e., the table names) to refresh the TimeBoundaryInfo of a pinot table.\n+  private static Set<String> _tablesToRefreshSet = ConcurrentHashMap.newKeySet();\n+  private boolean _shuttingDown;\n \n   /**\n    *\n    * @param helixExternalViewBasedRouting The underlying Routing object to execute TimeboundaryInfo refreshing.\n+   * @param helixExternalViewBasedQueryQuotaManager The underlying object to update rate limiter.\n    * @param sleepTimeInMilliseconds The sleep time for the background thread to execute TimeboundaryInfo refreshing.\n    */\n-  public TimeboundaryRefreshMessageHandlerFactory(HelixExternalViewBasedRouting helixExternalViewBasedRouting,\n-      long sleepTimeInMilliseconds) {\n+  public BrokerMessageHandlerFactory(HelixExternalViewBasedRouting helixExternalViewBasedRouting,\n+      HelixExternalViewBasedQueryQuotaManager helixExternalViewBasedQueryQuotaManager, long sleepTimeInMilliseconds) {\n     _helixExternalViewBasedRouting = helixExternalViewBasedRouting;\n+    _helixExternalViewBasedQueryQuotaManager = helixExternalViewBasedQueryQuotaManager;\n+\n     // Start a background thread to execute the TimeboundaryInfo update requests.\n     Thread tbiUpdateThread = new Thread(new TimeboundaryRefreshMessageExecutor(sleepTimeInMilliseconds));\n     tbiUpdateThread.start();\n-    shuttingDown = false;\n+    _shuttingDown = false;\n   }\n \n   @Override\n   public MessageHandler createHandler(Message message, NotificationContext context) {\n     String msgSubType = message.getMsgSubType();\n     switch (msgSubType) {\n       case TimeboundaryRefreshMessage.REFRESH_TIME_BOUNDARY_MSG_SUB_TYPE:\n-        LOGGER.info(\"time refresh msg received {} for table {}\", message.getPartitionName());\n+        LOGGER.info(\"time refresh msg received for table {}\", message.getPartitionName());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b6e49a0d50d49536f00676b19e225ea3d6ae3232"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTU5MTE4Mw==", "bodyText": "Change this to warning, and print it in the default message handler, not here.", "url": "https://github.com/apache/pinot/pull/5066#discussion_r379591183", "createdAt": "2020-02-14T18:55:15Z", "author": {"login": "mcvsubbu"}, "path": "pinot-broker/src/main/java/org/apache/pinot/broker/broker/helix/BrokerMessageHandlerFactory.java", "diffHunk": "@@ -19,53 +19,65 @@\n package org.apache.pinot.broker.broker.helix;\n \n import java.util.Iterator;\n+import java.util.Set;\n import java.util.concurrent.ConcurrentHashMap;\n import org.apache.helix.NotificationContext;\n import org.apache.helix.messaging.handling.HelixTaskResult;\n import org.apache.helix.messaging.handling.MessageHandler;\n import org.apache.helix.messaging.handling.MessageHandlerFactory;\n import org.apache.helix.model.Message;\n+import org.apache.pinot.broker.queryquota.HelixExternalViewBasedQueryQuotaManager;\n import org.apache.pinot.broker.routing.HelixExternalViewBasedRouting;\n import org.apache.pinot.common.messages.TimeboundaryRefreshMessage;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n \n-// Handle the TimeboundaryRefresh message. The Timeboundary refresh requests are handled asynchronously: i.e., they are\n-// first put into a request map first. The map dedups requests by their tables thus multiple requests for the same\n+// Handle the broker message, like TimeboundaryRefresh and UpdateQueryQuota.\n+// The Timeboundary refresh requests are handled asynchronously: i.e., they are first put into a request map first.\n+// The map dedups requests by their tables thus multiple requests for the same\n // table only needs to be executed once. A background thread periodically checks the map and performs refreshing for\n // all the tables in the map.\n-public class TimeboundaryRefreshMessageHandlerFactory implements MessageHandlerFactory {\n-  private static final Logger LOGGER = LoggerFactory.getLogger(TimeboundaryRefreshMessageHandlerFactory.class);\n+// The query quota update can be done synchronously, as the table config won't be changed frequently.\n+public class BrokerMessageHandlerFactory implements MessageHandlerFactory {\n+  private static final Logger LOGGER = LoggerFactory.getLogger(BrokerMessageHandlerFactory.class);\n   private final HelixExternalViewBasedRouting _helixExternalViewBasedRouting;\n-  // A map to store the unique requests (i.e., the table names) to refresh the TimeBoundaryInfo of a pinot table.\n-  // Ideally a Hashset will suffice but Java util currently does not have Hashset.\n-  private static ConcurrentHashMap<String, Boolean> _tablesToRefreshmap = new ConcurrentHashMap<>();\n-  private boolean shuttingDown;\n+  private final HelixExternalViewBasedQueryQuotaManager _helixExternalViewBasedQueryQuotaManager;\n+  // A set to store the unique requests (i.e., the table names) to refresh the TimeBoundaryInfo of a pinot table.\n+  private static Set<String> _tablesToRefreshSet = ConcurrentHashMap.newKeySet();\n+  private boolean _shuttingDown;\n \n   /**\n    *\n    * @param helixExternalViewBasedRouting The underlying Routing object to execute TimeboundaryInfo refreshing.\n+   * @param helixExternalViewBasedQueryQuotaManager The underlying object to update rate limiter.\n    * @param sleepTimeInMilliseconds The sleep time for the background thread to execute TimeboundaryInfo refreshing.\n    */\n-  public TimeboundaryRefreshMessageHandlerFactory(HelixExternalViewBasedRouting helixExternalViewBasedRouting,\n-      long sleepTimeInMilliseconds) {\n+  public BrokerMessageHandlerFactory(HelixExternalViewBasedRouting helixExternalViewBasedRouting,\n+      HelixExternalViewBasedQueryQuotaManager helixExternalViewBasedQueryQuotaManager, long sleepTimeInMilliseconds) {\n     _helixExternalViewBasedRouting = helixExternalViewBasedRouting;\n+    _helixExternalViewBasedQueryQuotaManager = helixExternalViewBasedQueryQuotaManager;\n+\n     // Start a background thread to execute the TimeboundaryInfo update requests.\n     Thread tbiUpdateThread = new Thread(new TimeboundaryRefreshMessageExecutor(sleepTimeInMilliseconds));\n     tbiUpdateThread.start();\n-    shuttingDown = false;\n+    _shuttingDown = false;\n   }\n \n   @Override\n   public MessageHandler createHandler(Message message, NotificationContext context) {\n     String msgSubType = message.getMsgSubType();\n     switch (msgSubType) {\n       case TimeboundaryRefreshMessage.REFRESH_TIME_BOUNDARY_MSG_SUB_TYPE:\n-        LOGGER.info(\"time refresh msg received {} for table {}\", message.getPartitionName());\n+        LOGGER.info(\"time refresh msg received for table {}\", message.getPartitionName());\n         return new TimeboundaryRefreshMessageHandler(new TimeboundaryRefreshMessage(message), context);\n+      case TimeboundaryRefreshMessage.UPDATE_QUERY_QUOTA_MSG_SUB_TYPE:\n+        LOGGER.info(\"update query quota msg received for table {}\", message.getPartitionName());\n+        return new TableQueryQuotaUpdateMessageHandler(message, context);\n       default:\n-        throw new UnsupportedOperationException(\"Unsupported user defined message sub type: \" + msgSubType);\n+        LOGGER.error(\"Unsupported user defined message sub type: {} for table {}\", msgSubType,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b6e49a0d50d49536f00676b19e225ea3d6ae3232"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTU5MzMwOA==", "bodyText": "Can we create a differnt message type instead of query quota update being a subtype of time boundary update message?", "url": "https://github.com/apache/pinot/pull/5066#discussion_r379593308", "createdAt": "2020-02-14T18:59:56Z", "author": {"login": "mcvsubbu"}, "path": "pinot-broker/src/main/java/org/apache/pinot/broker/broker/helix/BrokerMessageHandlerFactory.java", "diffHunk": "@@ -19,53 +19,65 @@\n package org.apache.pinot.broker.broker.helix;\n \n import java.util.Iterator;\n+import java.util.Set;\n import java.util.concurrent.ConcurrentHashMap;\n import org.apache.helix.NotificationContext;\n import org.apache.helix.messaging.handling.HelixTaskResult;\n import org.apache.helix.messaging.handling.MessageHandler;\n import org.apache.helix.messaging.handling.MessageHandlerFactory;\n import org.apache.helix.model.Message;\n+import org.apache.pinot.broker.queryquota.HelixExternalViewBasedQueryQuotaManager;\n import org.apache.pinot.broker.routing.HelixExternalViewBasedRouting;\n import org.apache.pinot.common.messages.TimeboundaryRefreshMessage;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n \n-// Handle the TimeboundaryRefresh message. The Timeboundary refresh requests are handled asynchronously: i.e., they are\n-// first put into a request map first. The map dedups requests by their tables thus multiple requests for the same\n+// Handle the broker message, like TimeboundaryRefresh and UpdateQueryQuota.\n+// The Timeboundary refresh requests are handled asynchronously: i.e., they are first put into a request map first.\n+// The map dedups requests by their tables thus multiple requests for the same\n // table only needs to be executed once. A background thread periodically checks the map and performs refreshing for\n // all the tables in the map.\n-public class TimeboundaryRefreshMessageHandlerFactory implements MessageHandlerFactory {\n-  private static final Logger LOGGER = LoggerFactory.getLogger(TimeboundaryRefreshMessageHandlerFactory.class);\n+// The query quota update can be done synchronously, as the table config won't be changed frequently.\n+public class BrokerMessageHandlerFactory implements MessageHandlerFactory {\n+  private static final Logger LOGGER = LoggerFactory.getLogger(BrokerMessageHandlerFactory.class);\n   private final HelixExternalViewBasedRouting _helixExternalViewBasedRouting;\n-  // A map to store the unique requests (i.e., the table names) to refresh the TimeBoundaryInfo of a pinot table.\n-  // Ideally a Hashset will suffice but Java util currently does not have Hashset.\n-  private static ConcurrentHashMap<String, Boolean> _tablesToRefreshmap = new ConcurrentHashMap<>();\n-  private boolean shuttingDown;\n+  private final HelixExternalViewBasedQueryQuotaManager _helixExternalViewBasedQueryQuotaManager;\n+  // A set to store the unique requests (i.e., the table names) to refresh the TimeBoundaryInfo of a pinot table.\n+  private static Set<String> _tablesToRefreshSet = ConcurrentHashMap.newKeySet();\n+  private boolean _shuttingDown;\n \n   /**\n    *\n    * @param helixExternalViewBasedRouting The underlying Routing object to execute TimeboundaryInfo refreshing.\n+   * @param helixExternalViewBasedQueryQuotaManager The underlying object to update rate limiter.\n    * @param sleepTimeInMilliseconds The sleep time for the background thread to execute TimeboundaryInfo refreshing.\n    */\n-  public TimeboundaryRefreshMessageHandlerFactory(HelixExternalViewBasedRouting helixExternalViewBasedRouting,\n-      long sleepTimeInMilliseconds) {\n+  public BrokerMessageHandlerFactory(HelixExternalViewBasedRouting helixExternalViewBasedRouting,\n+      HelixExternalViewBasedQueryQuotaManager helixExternalViewBasedQueryQuotaManager, long sleepTimeInMilliseconds) {\n     _helixExternalViewBasedRouting = helixExternalViewBasedRouting;\n+    _helixExternalViewBasedQueryQuotaManager = helixExternalViewBasedQueryQuotaManager;\n+\n     // Start a background thread to execute the TimeboundaryInfo update requests.\n     Thread tbiUpdateThread = new Thread(new TimeboundaryRefreshMessageExecutor(sleepTimeInMilliseconds));\n     tbiUpdateThread.start();\n-    shuttingDown = false;\n+    _shuttingDown = false;\n   }\n \n   @Override\n   public MessageHandler createHandler(Message message, NotificationContext context) {\n     String msgSubType = message.getMsgSubType();\n     switch (msgSubType) {\n       case TimeboundaryRefreshMessage.REFRESH_TIME_BOUNDARY_MSG_SUB_TYPE:\n-        LOGGER.info(\"time refresh msg received {} for table {}\", message.getPartitionName());\n+        LOGGER.info(\"time refresh msg received for table {}\", message.getPartitionName());\n         return new TimeboundaryRefreshMessageHandler(new TimeboundaryRefreshMessage(message), context);\n+      case TimeboundaryRefreshMessage.UPDATE_QUERY_QUOTA_MSG_SUB_TYPE:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b6e49a0d50d49536f00676b19e225ea3d6ae3232"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTU5NDQ5OQ==", "bodyText": "Please declare a new message insetead of a subtype", "url": "https://github.com/apache/pinot/pull/5066#discussion_r379594499", "createdAt": "2020-02-14T19:02:45Z", "author": {"login": "mcvsubbu"}, "path": "pinot-common/src/main/java/org/apache/pinot/common/messages/TimeboundaryRefreshMessage.java", "diffHunk": "@@ -26,6 +26,7 @@\n // A message intended for a pinot Broker to ask it to refresh its Timeboundary Info.\n public class TimeboundaryRefreshMessage extends Message {\n   public static final String REFRESH_TIME_BOUNDARY_MSG_SUB_TYPE = \"REFRESH_TIME_BOUNDARY\";\n+  public static final String UPDATE_QUERY_QUOTA_MSG_SUB_TYPE = \"UPDATE_QUERY_QUOTA\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b6e49a0d50d49536f00676b19e225ea3d6ae3232"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTU5NDcyMg==", "bodyText": "change this to warning and log it in the deafult message handler", "url": "https://github.com/apache/pinot/pull/5066#discussion_r379594722", "createdAt": "2020-02-14T19:03:17Z", "author": {"login": "mcvsubbu"}, "path": "pinot-server/src/main/java/org/apache/pinot/server/starter/helix/SegmentMessageHandlerFactory.java", "diffHunk": "@@ -88,7 +88,9 @@ public MessageHandler createHandler(Message message, NotificationContext context\n       case SegmentReloadMessage.RELOAD_SEGMENT_MSG_SUB_TYPE:\n         return new SegmentReloadMessageHandler(new SegmentReloadMessage(message), _metrics, context);\n       default:\n-        throw new UnsupportedOperationException(\"Unsupported user defined message sub type: \" + msgSubType);\n+        LOGGER.error(\"Unsupported user defined message sub type: {} for segment: {}\", msgSubType,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b6e49a0d50d49536f00676b19e225ea3d6ae3232"}, "originalPosition": 5}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU5MTU4MjA1", "url": "https://github.com/apache/pinot/pull/5066#pullrequestreview-359158205", "createdAt": "2020-02-14T19:09:27Z", "commit": {"oid": "b6e49a0d50d49536f00676b19e225ea3d6ae3232"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQxOTowOToyN1rOFqAyGQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQxOTowOToyN1rOFqAyGQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTU5NzMzNw==", "bodyText": "you can check if we are shutting down, then dont handle this", "url": "https://github.com/apache/pinot/pull/5066#discussion_r379597337", "createdAt": "2020-02-14T19:09:27Z", "author": {"login": "mcvsubbu"}, "path": "pinot-broker/src/main/java/org/apache/pinot/broker/broker/helix/BrokerMessageHandlerFactory.java", "diffHunk": "@@ -80,26 +92,54 @@ public void reset() {\n   }\n \n   public void shutdown() {\n-    shuttingDown = true;\n+    _shuttingDown = true;\n   }\n \n-  private class TimeboundaryRefreshMessageHandler extends MessageHandler {\n-    private final String _tableNameWithType;\n-    private final Logger _logger;\n-\n-    public TimeboundaryRefreshMessageHandler(TimeboundaryRefreshMessage message, NotificationContext context) {\n+  private class TimeboundaryRefreshMessageHandler extends DefaultMessageHandler {\n+    TimeboundaryRefreshMessageHandler(Message message, NotificationContext context) {\n       super(message, context);\n-      // The partition name field stores the table name.\n-      _tableNameWithType = message.getPartitionName();\n-      _logger = LoggerFactory.getLogger(_tableNameWithType + \"-\" + TimeboundaryRefreshMessageHandler.class);\n     }\n \n     @Override\n     public HelixTaskResult handleMessage() {\n       HelixTaskResult result = new HelixTaskResult();\n       // Put the segment refresh request to a request queue instead of executing immediately. This will reduce the\n       // burst of requests when a large number of segments are updated in a short time span.\n-      _tablesToRefreshmap.put(_tableNameWithType, Boolean.TRUE);\n+      _tablesToRefreshSet.add(_tableNameWithType);\n+      result.setSuccess(true);\n+      return result;\n+    }\n+  }\n+\n+  private class TableQueryQuotaUpdateMessageHandler extends DefaultMessageHandler {\n+    TableQueryQuotaUpdateMessageHandler(Message message, NotificationContext context) {\n+      super(message, context);\n+    }\n+\n+    @Override\n+    public HelixTaskResult handleMessage() {\n+      HelixTaskResult result = new HelixTaskResult();\n+      _helixExternalViewBasedQueryQuotaManager.initOrUpdateTableQueryQuota(_tableNameWithType);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b6e49a0d50d49536f00676b19e225ea3d6ae3232"}, "originalPosition": 120}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "40c75a85d49a5a808aa3beae57ea0b24dff99a60", "author": {"user": {"login": "jackjlli", "name": "Jialiang Li"}}, "url": "https://github.com/apache/pinot/commit/40c75a85d49a5a808aa3beae57ea0b24dff99a60", "committedDate": "2020-02-14T19:16:14Z", "message": "Address PR comments"}, "afterCommit": {"oid": "418be91c2b6a74be654512a03b8dbaa3f731282f", "author": {"user": {"login": "jackjlli", "name": "Jialiang Li"}}, "url": "https://github.com/apache/pinot/commit/418be91c2b6a74be654512a03b8dbaa3f731282f", "committedDate": "2020-02-14T19:22:39Z", "message": "Address PR comments"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "418be91c2b6a74be654512a03b8dbaa3f731282f", "author": {"user": {"login": "jackjlli", "name": "Jialiang Li"}}, "url": "https://github.com/apache/pinot/commit/418be91c2b6a74be654512a03b8dbaa3f731282f", "committedDate": "2020-02-14T19:22:39Z", "message": "Address PR comments"}, "afterCommit": {"oid": "d66ac56bb01b32018ed87e433ba32399c1d3e611", "author": {"user": {"login": "jackjlli", "name": "Jialiang Li"}}, "url": "https://github.com/apache/pinot/commit/d66ac56bb01b32018ed87e433ba32399c1d3e611", "committedDate": "2020-02-14T20:47:58Z", "message": "Address PR comments"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d66ac56bb01b32018ed87e433ba32399c1d3e611", "author": {"user": {"login": "jackjlli", "name": "Jialiang Li"}}, "url": "https://github.com/apache/pinot/commit/d66ac56bb01b32018ed87e433ba32399c1d3e611", "committedDate": "2020-02-14T20:47:58Z", "message": "Address PR comments"}, "afterCommit": {"oid": "330a83a1491e46a6dfb14ea1076c3f8441e24498", "author": {"user": {"login": "jackjlli", "name": "Jialiang Li"}}, "url": "https://github.com/apache/pinot/commit/330a83a1491e46a6dfb14ea1076c3f8441e24498", "committedDate": "2020-02-14T21:57:22Z", "message": "Address PR comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d07a0b41aee6ab681a31470ca5326d7683b17f99", "author": {"user": {"login": "jackjlli", "name": "Jialiang Li"}}, "url": "https://github.com/apache/pinot/commit/d07a0b41aee6ab681a31470ca5326d7683b17f99", "committedDate": "2020-02-29T19:20:35Z", "message": "Refactor existing Message Handler to update query quota on broker"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f4c1a3a197cbdf9f4164491ff8d08d80afc42577", "author": {"user": {"login": "jackjlli", "name": "Jialiang Li"}}, "url": "https://github.com/apache/pinot/commit/f4c1a3a197cbdf9f4164491ff8d08d80afc42577", "committedDate": "2020-02-29T19:21:38Z", "message": "Adjust behavior for unknown subtype message"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6d2e420adb037a532e4736c91299ab7b9076de11", "author": {"user": {"login": "jackjlli", "name": "Jialiang Li"}}, "url": "https://github.com/apache/pinot/commit/6d2e420adb037a532e4736c91299ab7b9076de11", "committedDate": "2020-02-29T19:24:26Z", "message": "Address PR comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6c85da75184e54fbc01d0b78690c4e87671fd925", "author": {"user": {"login": "jackjlli", "name": "Jialiang Li"}}, "url": "https://github.com/apache/pinot/commit/6c85da75184e54fbc01d0b78690c4e87671fd925", "committedDate": "2020-02-29T19:41:47Z", "message": "Rebase from master branch"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "330a83a1491e46a6dfb14ea1076c3f8441e24498", "author": {"user": {"login": "jackjlli", "name": "Jialiang Li"}}, "url": "https://github.com/apache/pinot/commit/330a83a1491e46a6dfb14ea1076c3f8441e24498", "committedDate": "2020-02-14T21:57:22Z", "message": "Address PR comments"}, "afterCommit": {"oid": "6c85da75184e54fbc01d0b78690c4e87671fd925", "author": {"user": {"login": "jackjlli", "name": "Jialiang Li"}}, "url": "https://github.com/apache/pinot/commit/6c85da75184e54fbc01d0b78690c4e87671fd925", "committedDate": "2020-02-29T19:41:47Z", "message": "Rebase from master branch"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY3NDMwNzUy", "url": "https://github.com/apache/pinot/pull/5066#pullrequestreview-367430752", "createdAt": "2020-03-02T18:36:21Z", "commit": {"oid": "6c85da75184e54fbc01d0b78690c4e87671fd925"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxODozNjoyMVrOFwqkbg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxODozNjoyMVrOFwqkbg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjU3MzQyMg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              public BrokerUserDefineMessageHandlerFactory(RoutingManager routingManager,\n          \n          \n            \n              public BrokerUserDefinedMessageHandlerFactory(RoutingManager routingManager,", "url": "https://github.com/apache/pinot/pull/5066#discussion_r386573422", "createdAt": "2020-03-02T18:36:21Z", "author": {"login": "mcvsubbu"}, "path": "pinot-broker/src/main/java/org/apache/pinot/broker/broker/helix/BrokerUserDefineMessageHandlerFactory.java", "diffHunk": "@@ -40,9 +42,12 @@\n   private static final Logger LOGGER = LoggerFactory.getLogger(BrokerUserDefineMessageHandlerFactory.class);\n \n   private final RoutingManager _routingManager;\n+  private final HelixExternalViewBasedQueryQuotaManager _queryQuotaManager;\n \n-  public BrokerUserDefineMessageHandlerFactory(RoutingManager routingManager) {\n+  public BrokerUserDefineMessageHandlerFactory(RoutingManager routingManager,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6c85da75184e54fbc01d0b78690c4e87671fd925"}, "originalPosition": 17}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "13d426336eeef1db3bf37c1f2e049ca26160bc6d", "author": {"user": {"login": "jackjlli", "name": "Jialiang Li"}}, "url": "https://github.com/apache/pinot/commit/13d426336eeef1db3bf37c1f2e049ca26160bc6d", "committedDate": "2020-03-02T19:15:55Z", "message": "Address PR comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY3NjU2MzM4", "url": "https://github.com/apache/pinot/pull/5066#pullrequestreview-367656338", "createdAt": "2020-03-03T01:58:30Z", "commit": {"oid": "13d426336eeef1db3bf37c1f2e049ca26160bc6d"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1278, "cost": 1, "resetAt": "2021-10-28T18:00:02Z"}}}