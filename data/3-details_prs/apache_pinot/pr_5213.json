{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk5OTYzNDgy", "number": 5213, "title": "Support order-by on BYTES column", "bodyText": "In order to support order-by on BYTES column everywhere, inside the system we should always use ByteArray (comparable) to store the BYTES value.\nCurrently BYTES value are stored as byte[], ByteArray or String in different places, which is very confusing and could cause casting errors.\nChanges:\n\nFor DisctinctCount, fix the casting issue when ordering on BYTES column\nFor selection order-by, order BYTES column using ByteArray instead of String for performance improvement\nInside Record, always store BYTES as ByteArray for clarity and also performance improvement (avoid expensive deepEquals and deepHashCode)\nOn broker side, store BYTES column using ByteArray instead of String for performance improvement\nOn broker side, support type compatible merges for all selection queries\n\nNo format change on the query results.\nTODO: We are still returning String for BYTES column when preserving the type. Consider changing it to byte[].", "createdAt": "2020-04-06T23:53:34Z", "url": "https://github.com/apache/pinot/pull/5213", "merged": true, "mergeCommit": {"oid": "e84a3afe7212196f639fb3b4023e6799a1c2de28"}, "closed": true, "closedAt": "2020-04-08T03:39:19Z", "author": {"login": "Jackie-Jiang"}, "timelineItems": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcVd3wDAH2gAyMzk5OTYzNDgyOmI1ZTg2N2FlMzZhZTAyYzIxMWM4M2NkZTg2OTNkYjgxYWQyNjQzOTY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcVenDZAFqTM4OTYxMTQ0MQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "b5e867ae36ae02c211c83cde8693db81ad264396", "author": {"user": {"login": "Jackie-Jiang", "name": "Xiaotian (Jackie) Jiang"}}, "url": "https://github.com/apache/pinot/commit/b5e867ae36ae02c211c83cde8693db81ad264396", "committedDate": "2020-04-08T01:46:38Z", "message": "Support order-by on BYTES column\n\nIn order to support order-by on BYTES column everywhere, inside the system we should always use ByteArray (comparable) to store the BYTES value.\nCurrently BYTES value are stored as byte[], ByteArray or String in different places, which is very confusing and could cause casting errors.\n\nChanges:\n- For DisctinctCount, fix the casting issue when ordering on BYTES column\n- For selection order-by, order BYTES column using ByteArray instead of String for performance improvement\n- Inside Record, always store BYTES as ByteArray for clarity and also performance improvement (avoid expensive deepEquals and deepHashCode)\n- On broker side, store BYTES column using ByteArray instead of String for performance improvement\n- On broker side, support type compatible merges for all selection queries\n\nNo format change on the query results.\nTODO: We are still returning String for BYTES column when preserving the type. Consider changing it to byte[]."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "6999a95f85d9500a04b51758c40ee32c35d82eed", "author": {"user": {"login": "Jackie-Jiang", "name": "Xiaotian (Jackie) Jiang"}}, "url": "https://github.com/apache/pinot/commit/6999a95f85d9500a04b51758c40ee32c35d82eed", "committedDate": "2020-04-06T23:53:05Z", "message": "Support order-by on BYTES column\n\nIn order to support order-by on BYTES column everywhere, inside the system we should always use ByteArray (comparable) to store the BYTES value.\nCurrently BYTES value are stored as byte[], ByteArray or String in different places, which is very confusing and could cause casting errors.\n\nChanges:\n- For DisctinctCount, fix the casting issue when ordering on BYTES column\n- For selection order-by, order BYTES column using ByteArray instead of String for performance improvement\n- Inside Record, always store BYTES as ByteArray for clarity and also performance improvement (avoid expensive deepEquals and deepHashCode)\n- On broker side, store BYTES column using ByteArray instead of String for performance improvement\n- On broker side, support type compatible merges for all selection queries\n\nNo format change on the query results.\nTODO: We are still returning String for BYTES column when preserving the type. Consider changing it to byte[]."}, "afterCommit": {"oid": "b5e867ae36ae02c211c83cde8693db81ad264396", "author": {"user": {"login": "Jackie-Jiang", "name": "Xiaotian (Jackie) Jiang"}}, "url": "https://github.com/apache/pinot/commit/b5e867ae36ae02c211c83cde8693db81ad264396", "committedDate": "2020-04-08T01:46:38Z", "message": "Support order-by on BYTES column\n\nIn order to support order-by on BYTES column everywhere, inside the system we should always use ByteArray (comparable) to store the BYTES value.\nCurrently BYTES value are stored as byte[], ByteArray or String in different places, which is very confusing and could cause casting errors.\n\nChanges:\n- For DisctinctCount, fix the casting issue when ordering on BYTES column\n- For selection order-by, order BYTES column using ByteArray instead of String for performance improvement\n- Inside Record, always store BYTES as ByteArray for clarity and also performance improvement (avoid expensive deepEquals and deepHashCode)\n- On broker side, store BYTES column using ByteArray instead of String for performance improvement\n- On broker side, support type compatible merges for all selection queries\n\nNo format change on the query results.\nTODO: We are still returning String for BYTES column when preserving the type. Consider changing it to byte[]."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg5NjExNDQx", "url": "https://github.com/apache/pinot/pull/5213#pullrequestreview-389611441", "createdAt": "2020-04-08T02:21:50Z", "commit": {"oid": "6999a95f85d9500a04b51758c40ee32c35d82eed"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwMjoyNjoxNlrOGCcygA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwMjozNDoyNVrOGCc6ew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTIyMjAxNg==", "bodyText": "this is needed for intermediate aggregated object like HLL?", "url": "https://github.com/apache/pinot/pull/5213#discussion_r405222016", "createdAt": "2020-04-08T02:26:16Z", "author": {"login": "snleee"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/query/reduce/GroupByDataTableReducer.java", "diffHunk": "@@ -332,11 +330,14 @@ private IndexedTable getIndexedTable(DataSchema dataSchema, Collection<DataTable\n             function = dataTable::getString;\n             break;\n           case BYTES:\n-            // FIXME: support BYTES in DataTable instead of converting to string\n-            function = (row, col) -> BytesUtils.toByteArray(dataTable.getString(row, col));\n+            function = dataTable::getBytes;\n             break;\n-          default:\n+          case OBJECT:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b5e867ae36ae02c211c83cde8693db81ad264396"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTIyNDA1OQ==", "bodyText": "From IntermediateResultsBlock class, you kind of directly casted types to an object instead of casting to Number.  Can we use the same approach here?", "url": "https://github.com/apache/pinot/pull/5213#discussion_r405224059", "createdAt": "2020-04-08T02:34:25Z", "author": {"login": "snleee"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/query/selection/SelectionOperatorUtils.java", "diffHunk": "@@ -481,55 +510,81 @@ public static ResultTable renderResultTableWithoutOrdering(List<Serializable[]>\n   }\n \n   /**\n-   * Extract columns from the row based on the given column indices.\n-   * <p>The extracted row is used to build the {@link SelectionResults}.\n-   *\n-   * @param row selection row to be extracted.\n-   * @param columnIndices column indices.\n-   * @return selection row.\n+   * Converts a value into the given data type. (Broker side)\n+   * <p>Actual value type can be different with data type passed in, but they must be type compatible.\n    */\n-  public static Serializable[] extractColumns(Serializable[] row, int[] columnIndices,\n-      @Nullable DataSchema.ColumnDataType[] columnDataTypes) {\n-    int numColumns = columnIndices.length;\n-    Serializable[] extractedRow = new Serializable[numColumns];\n-    if (columnDataTypes == null) {\n-      for (int i = 0; i < numColumns; i++) {\n-        extractedRow[i] = row[columnIndices[i]];\n-      }\n-    } else {\n-      for (int i = 0; i < numColumns; i++) {\n-        extractedRow[i] = getFormattedValue(row[columnIndices[i]], columnDataTypes[i]);\n-      }\n-    }\n-    return extractedRow;\n-  }\n+  public static Serializable convertValueToType(Object value, DataSchema.ColumnDataType dataType) {\n+    switch (dataType) {\n+      // Single-value column\n+      case INT:\n+        return ((Number) value).intValue();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b5e867ae36ae02c211c83cde8693db81ad264396"}, "originalPosition": 206}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1163, "cost": 1, "resetAt": "2021-10-28T18:00:02Z"}}}