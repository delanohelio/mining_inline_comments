{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAwNTMwMTY3", "number": 5221, "title": "Add a new server api for download of segments.", "bodyText": "Add segment download api to the Pinot server as discussed in step 1 of deep store bypss for LLC as discussed in this POC.\nThe API supports download of both realtime and offline table segments.  The relevant unit tests are modified to reflect both realtime and offline segment downloads.\n@mcvsubbu", "createdAt": "2020-04-07T22:18:51Z", "url": "https://github.com/apache/pinot/pull/5221", "merged": true, "mergeCommit": {"oid": "c92d6773c3c1539f9e9ec533dbe980fbaaeee6b4"}, "closed": true, "closedAt": "2020-04-15T16:16:57Z", "author": {"login": "chenboat"}, "timelineItems": {"totalCount": 17, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcVazK_gH2gAyNDAwNTMwMTY3OmVjZjIwYTJiOTQxNTc0YzMwNzNhMmRiMmFlZDMyYWIwZDE2MDdiMzE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcXxMYqgH2gAyNDAwNTMwMTY3OmY4ODRiZGM4YjE5MGQ3NjBkNDg3NTU1YTRkNmVkNWJkMjZmNzk0N2Y=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "ecf20a2b941574c3073a2db2aed32ab0d1607b31", "author": {"user": {"login": "chenboat", "name": "Ting Chen"}}, "url": "https://github.com/apache/pinot/commit/ecf20a2b941574c3073a2db2aed32ab0d1607b31", "committedDate": "2020-04-07T22:11:55Z", "message": "Add a new server api for download of segments."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg5NTc2MzM3", "url": "https://github.com/apache/pinot/pull/5221#pullrequestreview-389576337", "createdAt": "2020-04-08T00:21:30Z", "commit": {"oid": "ecf20a2b941574c3073a2db2aed32ab0d1607b31"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwMDoyMTozMVrOGCavUA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwMDozMDozNlrOGCa6QA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTE4ODQzMg==", "bodyText": "tableName -> tableNameWithType?", "url": "https://github.com/apache/pinot/pull/5221#discussion_r405188432", "createdAt": "2020-04-08T00:21:31Z", "author": {"login": "snleee"}, "path": "pinot-server/src/main/java/org/apache/pinot/server/api/resources/TablesResource.java", "diffHunk": "@@ -175,4 +183,41 @@ public String getCrcMetadataForTable(\n       }\n     }\n   }\n+\n+  @GET\n+  @Produces(MediaType.APPLICATION_OCTET_STREAM)\n+  @Path(\"/tables/{tableName}/segments/{segmentName}\")\n+  @ApiOperation(value = \"Download a segment\", notes = \"Download a segment in zipped tar format\")\n+  public Response downloadSegment(\n+      @ApiParam(value = \"Name of the table with type REALTIME OR OFFLINE\", required = true, example = \"myTable_OFFLINE\") @PathParam(\"tableName\") String tableName,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ecf20a2b941574c3073a2db2aed32ab0d1607b31"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTE4ODc3Mw==", "bodyText": "/ -> File.separator", "url": "https://github.com/apache/pinot/pull/5221#discussion_r405188773", "createdAt": "2020-04-08T00:22:39Z", "author": {"login": "snleee"}, "path": "pinot-server/src/main/java/org/apache/pinot/server/api/resources/TablesResource.java", "diffHunk": "@@ -175,4 +183,41 @@ public String getCrcMetadataForTable(\n       }\n     }\n   }\n+\n+  @GET\n+  @Produces(MediaType.APPLICATION_OCTET_STREAM)\n+  @Path(\"/tables/{tableName}/segments/{segmentName}\")\n+  @ApiOperation(value = \"Download a segment\", notes = \"Download a segment in zipped tar format\")\n+  public Response downloadSegment(\n+      @ApiParam(value = \"Name of the table with type REALTIME OR OFFLINE\", required = true, example = \"myTable_OFFLINE\") @PathParam(\"tableName\") String tableName,\n+      @ApiParam(value = \"Name of the segment\", required = true) @PathParam(\"segmentName\") @Encoded String segmentName,\n+      @Context HttpHeaders httpHeaders)\n+      throws Exception {\n+    LOGGER.info(\"Get a request to download segment {} for table {}\", segmentName, tableName);\n+    TableDataManager tableDataManager = checkGetTableDataManager(tableName);\n+    SegmentDataManager segmentDataManager = tableDataManager.acquireSegment(segmentName);\n+    if (segmentDataManager == null) {\n+      throw new WebApplicationException(String.format(\"Table %s segments %s does not exist\", tableName, segmentName),\n+          Response.Status.NOT_FOUND);\n+    }\n+    try {\n+      String tableDir = tableDataManager.getTableDataDir();\n+      String tarFilePath = TarGzCompressionUtils.createTarGzOfDirectory(tableDir + \"/\" + segmentName);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ecf20a2b941574c3073a2db2aed32ab0d1607b31"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTE5MTIzMg==", "bodyText": "Current API behavior will compress the segment file every time we hit this API. It looks a bit expensive operation. Does TarGzCompressionUtils.createTarGzOfDirectory  use tar -cvf or tar -czvf? cvf will simply group the multiple files/directories into a single file while czvf will do the compression. I guess that TarGzCompressionUtils.createTarGzOfDirectory  probably try to compress the file.\nDepending on the use case, compression may become the performance bottleneck. Imagine that a single server gets the download request for multiple segment at the similar time. Compressing multiple files concurrently will consume a lot of CPU resource.\nOne way to improve this is simply using the tar cvf equivalent logic (no compression) and send the file. Another approach is to keep compressed files in some directory and use it as a cache (then we also needs to handle invalidation). We don't need to address this for now but let's add at least a comment on this in case someone faces the bottleneck here..", "url": "https://github.com/apache/pinot/pull/5221#discussion_r405191232", "createdAt": "2020-04-08T00:30:36Z", "author": {"login": "snleee"}, "path": "pinot-server/src/main/java/org/apache/pinot/server/api/resources/TablesResource.java", "diffHunk": "@@ -175,4 +183,41 @@ public String getCrcMetadataForTable(\n       }\n     }\n   }\n+\n+  @GET\n+  @Produces(MediaType.APPLICATION_OCTET_STREAM)\n+  @Path(\"/tables/{tableName}/segments/{segmentName}\")\n+  @ApiOperation(value = \"Download a segment\", notes = \"Download a segment in zipped tar format\")\n+  public Response downloadSegment(\n+      @ApiParam(value = \"Name of the table with type REALTIME OR OFFLINE\", required = true, example = \"myTable_OFFLINE\") @PathParam(\"tableName\") String tableName,\n+      @ApiParam(value = \"Name of the segment\", required = true) @PathParam(\"segmentName\") @Encoded String segmentName,\n+      @Context HttpHeaders httpHeaders)\n+      throws Exception {\n+    LOGGER.info(\"Get a request to download segment {} for table {}\", segmentName, tableName);\n+    TableDataManager tableDataManager = checkGetTableDataManager(tableName);\n+    SegmentDataManager segmentDataManager = tableDataManager.acquireSegment(segmentName);\n+    if (segmentDataManager == null) {\n+      throw new WebApplicationException(String.format(\"Table %s segments %s does not exist\", tableName, segmentName),\n+          Response.Status.NOT_FOUND);\n+    }\n+    try {\n+      String tableDir = tableDataManager.getTableDataDir();\n+      String tarFilePath = TarGzCompressionUtils.createTarGzOfDirectory(tableDir + \"/\" + segmentName);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTE4ODc3Mw=="}, "originalCommit": {"oid": "ecf20a2b941574c3073a2db2aed32ab0d1607b31"}, "originalPosition": 56}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg5NTc1MjAw", "url": "https://github.com/apache/pinot/pull/5221#pullrequestreview-389575200", "createdAt": "2020-04-08T00:18:03Z", "commit": {"oid": "ecf20a2b941574c3073a2db2aed32ab0d1607b31"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwMDoxODowNFrOGCargQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwMDoyOTowNVrOGCa4cw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTE4NzQ1Nw==", "bodyText": "this path is the deprecated one in the controller. Can we use the same as what the controller uses?\n/segments/{tableName}/{segmentName}. Please add this as a discussion point in your doc, and start an email discussion on this spec. Within a couple of days, we can get any feedback people may have", "url": "https://github.com/apache/pinot/pull/5221#discussion_r405187457", "createdAt": "2020-04-08T00:18:04Z", "author": {"login": "mcvsubbu"}, "path": "pinot-server/src/main/java/org/apache/pinot/server/api/resources/TablesResource.java", "diffHunk": "@@ -175,4 +183,41 @@ public String getCrcMetadataForTable(\n       }\n     }\n   }\n+\n+  @GET\n+  @Produces(MediaType.APPLICATION_OCTET_STREAM)\n+  @Path(\"/tables/{tableName}/segments/{segmentName}\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ecf20a2b941574c3073a2db2aed32ab0d1607b31"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTE4NzY0MA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                LOGGER.info(\"Get a request to download segment {} for table {}\", segmentName, tableName);\n          \n          \n            \n                LOGGER.info(\"Received request to download segment {} for table {}\", segmentName, tableName);", "url": "https://github.com/apache/pinot/pull/5221#discussion_r405187640", "createdAt": "2020-04-08T00:18:43Z", "author": {"login": "mcvsubbu"}, "path": "pinot-server/src/main/java/org/apache/pinot/server/api/resources/TablesResource.java", "diffHunk": "@@ -175,4 +183,41 @@ public String getCrcMetadataForTable(\n       }\n     }\n   }\n+\n+  @GET\n+  @Produces(MediaType.APPLICATION_OCTET_STREAM)\n+  @Path(\"/tables/{tableName}/segments/{segmentName}\")\n+  @ApiOperation(value = \"Download a segment\", notes = \"Download a segment in zipped tar format\")\n+  public Response downloadSegment(\n+      @ApiParam(value = \"Name of the table with type REALTIME OR OFFLINE\", required = true, example = \"myTable_OFFLINE\") @PathParam(\"tableName\") String tableName,\n+      @ApiParam(value = \"Name of the segment\", required = true) @PathParam(\"segmentName\") @Encoded String segmentName,\n+      @Context HttpHeaders httpHeaders)\n+      throws Exception {\n+    LOGGER.info(\"Get a request to download segment {} for table {}\", segmentName, tableName);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ecf20a2b941574c3073a2db2aed32ab0d1607b31"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTE4ODM4Mw==", "bodyText": "Until now, the only way to download a segment was via controller API. With this, we have introduced a new API to download segment. So, we need to add the access control here. See PinotSegmentUploadDownloadRestletResource\nThe general approach we have take is to have different AccessControl interface and factory declarations for each component, so you should add one for the server.\nI am ok if it is done in a different PR, just mark as a TODO here. and include another independent PR", "url": "https://github.com/apache/pinot/pull/5221#discussion_r405188383", "createdAt": "2020-04-08T00:21:22Z", "author": {"login": "mcvsubbu"}, "path": "pinot-server/src/main/java/org/apache/pinot/server/api/resources/TablesResource.java", "diffHunk": "@@ -175,4 +183,41 @@ public String getCrcMetadataForTable(\n       }\n     }\n   }\n+\n+  @GET\n+  @Produces(MediaType.APPLICATION_OCTET_STREAM)\n+  @Path(\"/tables/{tableName}/segments/{segmentName}\")\n+  @ApiOperation(value = \"Download a segment\", notes = \"Download a segment in zipped tar format\")\n+  public Response downloadSegment(\n+      @ApiParam(value = \"Name of the table with type REALTIME OR OFFLINE\", required = true, example = \"myTable_OFFLINE\") @PathParam(\"tableName\") String tableName,\n+      @ApiParam(value = \"Name of the segment\", required = true) @PathParam(\"segmentName\") @Encoded String segmentName,\n+      @Context HttpHeaders httpHeaders)\n+      throws Exception {\n+    LOGGER.info(\"Get a request to download segment {} for table {}\", segmentName, tableName);\n+    TableDataManager tableDataManager = checkGetTableDataManager(tableName);\n+    SegmentDataManager segmentDataManager = tableDataManager.acquireSegment(segmentName);\n+    if (segmentDataManager == null) {\n+      throw new WebApplicationException(String.format(\"Table %s segments %s does not exist\", tableName, segmentName),\n+          Response.Status.NOT_FOUND);\n+    }\n+    try {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ecf20a2b941574c3073a2db2aed32ab0d1607b31"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTE5MDM1MA==", "bodyText": "We may need to limit the number of simultaneous execution of this line. The server is serving queries, and can get overwhelmed and affect the response time if too many of these are execting.\nI am fine with noting this as a TODO here for now, and re-visiting if it becomes a problem.", "url": "https://github.com/apache/pinot/pull/5221#discussion_r405190350", "createdAt": "2020-04-08T00:28:02Z", "author": {"login": "mcvsubbu"}, "path": "pinot-server/src/main/java/org/apache/pinot/server/api/resources/TablesResource.java", "diffHunk": "@@ -175,4 +183,41 @@ public String getCrcMetadataForTable(\n       }\n     }\n   }\n+\n+  @GET\n+  @Produces(MediaType.APPLICATION_OCTET_STREAM)\n+  @Path(\"/tables/{tableName}/segments/{segmentName}\")\n+  @ApiOperation(value = \"Download a segment\", notes = \"Download a segment in zipped tar format\")\n+  public Response downloadSegment(\n+      @ApiParam(value = \"Name of the table with type REALTIME OR OFFLINE\", required = true, example = \"myTable_OFFLINE\") @PathParam(\"tableName\") String tableName,\n+      @ApiParam(value = \"Name of the segment\", required = true) @PathParam(\"segmentName\") @Encoded String segmentName,\n+      @Context HttpHeaders httpHeaders)\n+      throws Exception {\n+    LOGGER.info(\"Get a request to download segment {} for table {}\", segmentName, tableName);\n+    TableDataManager tableDataManager = checkGetTableDataManager(tableName);\n+    SegmentDataManager segmentDataManager = tableDataManager.acquireSegment(segmentName);\n+    if (segmentDataManager == null) {\n+      throw new WebApplicationException(String.format(\"Table %s segments %s does not exist\", tableName, segmentName),\n+          Response.Status.NOT_FOUND);\n+    }\n+    try {\n+      String tableDir = tableDataManager.getTableDataDir();\n+      String tarFilePath = TarGzCompressionUtils.createTarGzOfDirectory(tableDir + \"/\" + segmentName);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ecf20a2b941574c3073a2db2aed32ab0d1607b31"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTE5MDc3MQ==", "bodyText": "nit: Use the TableNameBuilder. let TABLE_NAME still be there, and you can use the builder to derive the other two", "url": "https://github.com/apache/pinot/pull/5221#discussion_r405190771", "createdAt": "2020-04-08T00:29:05Z", "author": {"login": "mcvsubbu"}, "path": "pinot-server/src/test/java/org/apache/pinot/server/api/BaseResourceTest.java", "diffHunk": "@@ -55,11 +56,12 @@\n public abstract class BaseResourceTest {\n   private static final String AVRO_DATA_PATH = \"data/test_data-mv.avro\";\n   private static final File INDEX_DIR = new File(FileUtils.getTempDirectory(), \"BaseResourceTest\");\n-  protected static final String TABLE_NAME = \"testTable\";\n+  protected static final String REALTIME_TABLE_NAME = \"testTable_REALTIME\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ecf20a2b941574c3073a2db2aed32ab0d1607b31"}, "originalPosition": 13}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg5NjI4Mzc3", "url": "https://github.com/apache/pinot/pull/5221#pullrequestreview-389628377", "createdAt": "2020-04-08T03:23:31Z", "commit": {"oid": "ecf20a2b941574c3073a2db2aed32ab0d1607b31"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwMzoyMzozMVrOGCdqpw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwMzoyMzozMVrOGCdqpw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTIzNjM5MQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  throw new WebApplicationException(String.format(\"Table %s segments %s does not exist\", tableName, segmentName),\n          \n          \n            \n                  throw new WebApplicationException(String.format(\"Table %s segment %s does not exist\", tableName, segmentName),", "url": "https://github.com/apache/pinot/pull/5221#discussion_r405236391", "createdAt": "2020-04-08T03:23:31Z", "author": {"login": "haibow"}, "path": "pinot-server/src/main/java/org/apache/pinot/server/api/resources/TablesResource.java", "diffHunk": "@@ -175,4 +183,41 @@ public String getCrcMetadataForTable(\n       }\n     }\n   }\n+\n+  @GET\n+  @Produces(MediaType.APPLICATION_OCTET_STREAM)\n+  @Path(\"/tables/{tableName}/segments/{segmentName}\")\n+  @ApiOperation(value = \"Download a segment\", notes = \"Download a segment in zipped tar format\")\n+  public Response downloadSegment(\n+      @ApiParam(value = \"Name of the table with type REALTIME OR OFFLINE\", required = true, example = \"myTable_OFFLINE\") @PathParam(\"tableName\") String tableName,\n+      @ApiParam(value = \"Name of the segment\", required = true) @PathParam(\"segmentName\") @Encoded String segmentName,\n+      @Context HttpHeaders httpHeaders)\n+      throws Exception {\n+    LOGGER.info(\"Get a request to download segment {} for table {}\", segmentName, tableName);\n+    TableDataManager tableDataManager = checkGetTableDataManager(tableName);\n+    SegmentDataManager segmentDataManager = tableDataManager.acquireSegment(segmentName);\n+    if (segmentDataManager == null) {\n+      throw new WebApplicationException(String.format(\"Table %s segments %s does not exist\", tableName, segmentName),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ecf20a2b941574c3073a2db2aed32ab0d1607b31"}, "originalPosition": 51}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg5NjI4NDA5", "url": "https://github.com/apache/pinot/pull/5221#pullrequestreview-389628409", "createdAt": "2020-04-08T03:23:38Z", "commit": {"oid": "ecf20a2b941574c3073a2db2aed32ab0d1607b31"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwMzoyMzozOFrOGCdqwg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwMzoyMzozOFrOGCdqwg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTIzNjQxOA==", "bodyText": "Could you try formatting this? Should not be in the same line.", "url": "https://github.com/apache/pinot/pull/5221#discussion_r405236418", "createdAt": "2020-04-08T03:23:38Z", "author": {"login": "haibow"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/data/manager/BaseTableDataManager.java", "diffHunk": "@@ -211,4 +211,7 @@ private void closeSegment(SegmentDataManager segmentDataManager) {\n   public String getTableName() {\n     return _tableNameWithType;\n   }\n+\n+  @Override\n+  public String getTableDataDir() { return _tableDataDir; }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ecf20a2b941574c3073a2db2aed32ab0d1607b31"}, "originalPosition": 6}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg5NjczMTMw", "url": "https://github.com/apache/pinot/pull/5221#pullrequestreview-389673130", "createdAt": "2020-04-08T06:02:22Z", "commit": {"oid": "ecf20a2b941574c3073a2db2aed32ab0d1607b31"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwNjowMjoyMlrOGCgJPg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwNjoxMjoyMVrOGCgXBw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTI3Njk5MA==", "bodyText": "+1", "url": "https://github.com/apache/pinot/pull/5221#discussion_r405276990", "createdAt": "2020-04-08T06:02:22Z", "author": {"login": "jackjlli"}, "path": "pinot-server/src/test/java/org/apache/pinot/server/api/BaseResourceTest.java", "diffHunk": "@@ -55,11 +56,12 @@\n public abstract class BaseResourceTest {\n   private static final String AVRO_DATA_PATH = \"data/test_data-mv.avro\";\n   private static final File INDEX_DIR = new File(FileUtils.getTempDirectory(), \"BaseResourceTest\");\n-  protected static final String TABLE_NAME = \"testTable\";\n+  protected static final String REALTIME_TABLE_NAME = \"testTable_REALTIME\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTE5MDc3MQ=="}, "originalCommit": {"oid": "ecf20a2b941574c3073a2db2aed32ab0d1607b31"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTI3OTQ4MQ==", "bodyText": "getTableSize() method is often used for offline table. Can you add the test for offline table as well?", "url": "https://github.com/apache/pinot/pull/5221#discussion_r405279481", "createdAt": "2020-04-08T06:09:23Z", "author": {"login": "jackjlli"}, "path": "pinot-server/src/test/java/org/apache/pinot/server/api/TableSizeResourceTest.java", "diffHunk": "@@ -37,9 +37,9 @@ public void testTableSizeNotFound() {\n   @Test\n   public void testTableSizeDetailed() {\n     TableSizeInfo tableSizeInfo = _webTarget.path(TABLE_SIZE_PATH).request().get(TableSizeInfo.class);\n-    ImmutableSegment defaultSegment = _indexSegments.get(0);\n+    ImmutableSegment defaultSegment = _realtimeIndexSegments.get(0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ecf20a2b941574c3073a2db2aed32ab0d1607b31"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTI4MDIyNA==", "bodyText": "import java.nio.file.Path;", "url": "https://github.com/apache/pinot/pull/5221#discussion_r405280224", "createdAt": "2020-04-08T06:11:37Z", "author": {"login": "jackjlli"}, "path": "pinot-server/src/test/java/org/apache/pinot/server/api/TablesResourceTest.java", "diffHunk": "@@ -149,4 +160,62 @@ public void testSegmentCrcMetadata()\n       Assert.assertEquals(segmentsCrc.get(segmentName).asText(), crc);\n     }\n   }\n+\n+  @Test\n+  public void testDownloadSegments()\n+      throws Exception {\n+    // Verify the content of the downloaded segment from a realtime table.\n+    Assert.assertTrue(downLoadAndVerifySegmentContent(REALTIME_TABLE_NAME, _realtimeIndexSegments.get(0)));\n+    // Verify the content of the downloaded segment from an offline table.\n+    Assert.assertTrue(downLoadAndVerifySegmentContent(OFFLINE_TABLE_NAME, _offlineIndexSegments.get(0)));\n+\n+    // Verify non-existent table and segment download return NOT_FOUND status.\n+    Response response = _webTarget.path(\"/tables/UNKNOWN_REALTIME/segments/segmentname\").request()\n+        .get(Response.class);\n+    Assert.assertEquals(response.getStatus(), Response.Status.NOT_FOUND.getStatusCode());\n+\n+    response = _webTarget.path(\"/tables/\" + REALTIME_TABLE_NAME + \"/segments/UNKNOWN_SEGMENT\").request().get(Response.class);\n+    Assert.assertEquals(response.getStatus(), Response.Status.NOT_FOUND.getStatusCode());\n+  }\n+\n+  // Verify metadata file from segments.\n+  private boolean downLoadAndVerifySegmentContent(String tableNameWithType, IndexSegment segment) {\n+    String segmentPath = \"/tables/\" + tableNameWithType + \"/segments/\" + segment.getSegmentName();\n+\n+    // Download the segment and save to a temp local file.\n+    Response response = _webTarget.path(segmentPath).request().get(Response.class);\n+    Assert.assertEquals(response.getStatus(), Response.Status.OK.getStatusCode());\n+    File segmentFile = response.readEntity(File.class);\n+\n+    File tempMetadataDir = new File(FileUtils.getTempDirectory(), \"segment_metadata\");\n+    try (// Extract metadata.properties\n+        InputStream metadataPropertiesInputStream = TarGzCompressionUtils\n+            .unTarOneFile(new FileInputStream(segmentFile), V1Constants.MetadataKeys.METADATA_FILE_NAME);\n+        // Extract creation.meta\n+        InputStream creationMetaInputStream = TarGzCompressionUtils\n+            .unTarOneFile(new FileInputStream(segmentFile), V1Constants.SEGMENT_CREATION_META)) {\n+      Preconditions\n+          .checkState(tempMetadataDir.mkdirs(), \"Failed to create directory: %s\", tempMetadataDir.getAbsolutePath());\n+\n+      Preconditions.checkNotNull(metadataPropertiesInputStream, \"%s does not exist\",\n+          V1Constants.MetadataKeys.METADATA_FILE_NAME);\n+      java.nio.file.Path metadataPropertiesPath = FileSystems.getDefault()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ecf20a2b941574c3073a2db2aed32ab0d1607b31"}, "originalPosition": 148}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTI4MDUxOQ==", "bodyText": "May be good to log the exception here?", "url": "https://github.com/apache/pinot/pull/5221#discussion_r405280519", "createdAt": "2020-04-08T06:12:21Z", "author": {"login": "jackjlli"}, "path": "pinot-server/src/test/java/org/apache/pinot/server/api/TablesResourceTest.java", "diffHunk": "@@ -149,4 +160,62 @@ public void testSegmentCrcMetadata()\n       Assert.assertEquals(segmentsCrc.get(segmentName).asText(), crc);\n     }\n   }\n+\n+  @Test\n+  public void testDownloadSegments()\n+      throws Exception {\n+    // Verify the content of the downloaded segment from a realtime table.\n+    Assert.assertTrue(downLoadAndVerifySegmentContent(REALTIME_TABLE_NAME, _realtimeIndexSegments.get(0)));\n+    // Verify the content of the downloaded segment from an offline table.\n+    Assert.assertTrue(downLoadAndVerifySegmentContent(OFFLINE_TABLE_NAME, _offlineIndexSegments.get(0)));\n+\n+    // Verify non-existent table and segment download return NOT_FOUND status.\n+    Response response = _webTarget.path(\"/tables/UNKNOWN_REALTIME/segments/segmentname\").request()\n+        .get(Response.class);\n+    Assert.assertEquals(response.getStatus(), Response.Status.NOT_FOUND.getStatusCode());\n+\n+    response = _webTarget.path(\"/tables/\" + REALTIME_TABLE_NAME + \"/segments/UNKNOWN_SEGMENT\").request().get(Response.class);\n+    Assert.assertEquals(response.getStatus(), Response.Status.NOT_FOUND.getStatusCode());\n+  }\n+\n+  // Verify metadata file from segments.\n+  private boolean downLoadAndVerifySegmentContent(String tableNameWithType, IndexSegment segment) {\n+    String segmentPath = \"/tables/\" + tableNameWithType + \"/segments/\" + segment.getSegmentName();\n+\n+    // Download the segment and save to a temp local file.\n+    Response response = _webTarget.path(segmentPath).request().get(Response.class);\n+    Assert.assertEquals(response.getStatus(), Response.Status.OK.getStatusCode());\n+    File segmentFile = response.readEntity(File.class);\n+\n+    File tempMetadataDir = new File(FileUtils.getTempDirectory(), \"segment_metadata\");\n+    try (// Extract metadata.properties\n+        InputStream metadataPropertiesInputStream = TarGzCompressionUtils\n+            .unTarOneFile(new FileInputStream(segmentFile), V1Constants.MetadataKeys.METADATA_FILE_NAME);\n+        // Extract creation.meta\n+        InputStream creationMetaInputStream = TarGzCompressionUtils\n+            .unTarOneFile(new FileInputStream(segmentFile), V1Constants.SEGMENT_CREATION_META)) {\n+      Preconditions\n+          .checkState(tempMetadataDir.mkdirs(), \"Failed to create directory: %s\", tempMetadataDir.getAbsolutePath());\n+\n+      Preconditions.checkNotNull(metadataPropertiesInputStream, \"%s does not exist\",\n+          V1Constants.MetadataKeys.METADATA_FILE_NAME);\n+      java.nio.file.Path metadataPropertiesPath = FileSystems.getDefault()\n+          .getPath(tempMetadataDir.getAbsolutePath(), V1Constants.MetadataKeys.METADATA_FILE_NAME);\n+      Files.copy(metadataPropertiesInputStream, metadataPropertiesPath);\n+\n+      Preconditions.checkNotNull(creationMetaInputStream, \"%s does not exist\", V1Constants.SEGMENT_CREATION_META);\n+      java.nio.file.Path creationMetaPath =\n+          FileSystems.getDefault().getPath(tempMetadataDir.getAbsolutePath(), V1Constants.SEGMENT_CREATION_META);\n+      Files.copy(creationMetaInputStream, creationMetaPath);\n+      // Load segment metadata\n+      SegmentMetadataImpl metadata = new SegmentMetadataImpl(tempMetadataDir);\n+\n+      Assert.assertEquals(tableNameWithType, metadata.getTableName());\n+      return true;\n+    } catch (Exception e) {\n+      return false;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ecf20a2b941574c3073a2db2aed32ab0d1607b31"}, "originalPosition": 162}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3739885588c270184420aa4aed59216607478637", "author": {"user": {"login": "chenboat", "name": "Ting Chen"}}, "url": "https://github.com/apache/pinot/commit/3739885588c270184420aa4aed59216607478637", "committedDate": "2020-04-09T00:34:24Z", "message": "Revise based on feedback."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkwNDM3NDg5", "url": "https://github.com/apache/pinot/pull/5221#pullrequestreview-390437489", "createdAt": "2020-04-09T01:36:18Z", "commit": {"oid": "3739885588c270184420aa4aed59216607478637"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwMTozNjoxOVrOGDGorQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwMTozNjoxOVrOGDGorQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTkwNzYyOQ==", "bodyText": "Recommend returning an File to avoid the edge case of trailing \\", "url": "https://github.com/apache/pinot/pull/5221#discussion_r405907629", "createdAt": "2020-04-09T01:36:19Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/data/manager/BaseTableDataManager.java", "diffHunk": "@@ -211,4 +211,9 @@ private void closeSegment(SegmentDataManager segmentDataManager) {\n   public String getTableName() {\n     return _tableNameWithType;\n   }\n+\n+  @Override\n+  public String getTableDataDir() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3739885588c270184420aa4aed59216607478637"}, "originalPosition": 6}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkwNDM3OTE4", "url": "https://github.com/apache/pinot/pull/5221#pullrequestreview-390437918", "createdAt": "2020-04-09T01:38:03Z", "commit": {"oid": "3739885588c270184420aa4aed59216607478637"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwMTozODowM1rOGDGqWw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwMTozODowM1rOGDGqWw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTkwODA1OQ==", "bodyText": "You should put all .tar.gz file in some temporary directory, and clean them up whenever server restarted. Otherwise, if the server shut down when downloading the segment, the segment will remain there forever", "url": "https://github.com/apache/pinot/pull/5221#discussion_r405908059", "createdAt": "2020-04-09T01:38:03Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-server/src/main/java/org/apache/pinot/server/api/resources/TablesResource.java", "diffHunk": "@@ -175,4 +183,43 @@ public String getCrcMetadataForTable(\n       }\n     }\n   }\n+\n+  // TODO Add access control similar to PinotSegmentUploadDownloadRestletResource for segment download.\n+  @GET\n+  @Produces(MediaType.APPLICATION_OCTET_STREAM)\n+  @Path(\"/segments/{tableNameWithType}/{segmentName}\")\n+  @ApiOperation(value = \"Download a segment\", notes = \"Download a segment in zipped tar format\")\n+  public Response downloadSegment(\n+      @ApiParam(value = \"Name of the table with type REALTIME OR OFFLINE\", required = true, example = \"myTable_OFFLINE\") @PathParam(\"tableNameWithType\") String tableNameWithType,\n+      @ApiParam(value = \"Name of the segment\", required = true) @PathParam(\"segmentName\") @Encoded String segmentName,\n+      @Context HttpHeaders httpHeaders)\n+      throws Exception {\n+    LOGGER.info(\"Received a request to download segment {} for table {}\", segmentName, tableNameWithType);\n+    TableDataManager tableDataManager = checkGetTableDataManager(tableNameWithType);\n+    SegmentDataManager segmentDataManager = tableDataManager.acquireSegment(segmentName);\n+    if (segmentDataManager == null) {\n+      throw new WebApplicationException(\n+          String.format(\"Table %s segment %s does not exist\", tableNameWithType, segmentName),\n+          Response.Status.NOT_FOUND);\n+    }\n+    try {\n+      String tableDir = tableDataManager.getTableDataDir();\n+      // TODO Limit the number of concurrent downloads of segments because compression is an expensive operation.\n+      String tarFilePath = TarGzCompressionUtils.createTarGzOfDirectory(tableDir + File.separator + segmentName);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3739885588c270184420aa4aed59216607478637"}, "originalPosition": 59}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8e37cc9eb057c03a647e773b12ff7f53b7b5c15a", "author": {"user": {"login": "chenboat", "name": "Ting Chen"}}, "url": "https://github.com/apache/pinot/commit/8e37cc9eb057c03a647e773b12ff7f53b7b5c15a", "committedDate": "2020-04-09T22:21:06Z", "message": "Revise the getTableDir and delete tar.gz files on exit."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5db84ce7dfb0929ffac5252682c6db058d271683", "author": {"user": {"login": "chenboat", "name": "Ting Chen"}}, "url": "https://github.com/apache/pinot/commit/5db84ce7dfb0929ffac5252682c6db058d271683", "committedDate": "2020-04-14T06:06:27Z", "message": "Store temp tar.gz file in the server's segment tar folder."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkzMTQ5ODYx", "url": "https://github.com/apache/pinot/pull/5221#pullrequestreview-393149861", "createdAt": "2020-04-14T17:36:19Z", "commit": {"oid": "5db84ce7dfb0929ffac5252682c6db058d271683"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxNzozNjoyMFrOGFZnBA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxNzozNjoyMFrOGFZnBA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODMxNTY1Mg==", "bodyText": "better to use UUID", "url": "https://github.com/apache/pinot/pull/5221#discussion_r408315652", "createdAt": "2020-04-14T17:36:20Z", "author": {"login": "mcvsubbu"}, "path": "pinot-server/src/main/java/org/apache/pinot/server/api/resources/TablesResource.java", "diffHunk": "@@ -175,4 +183,49 @@ public String getCrcMetadataForTable(\n       }\n     }\n   }\n+\n+  // TODO Add access control similar to PinotSegmentUploadDownloadRestletResource for segment download.\n+  @GET\n+  @Produces(MediaType.APPLICATION_OCTET_STREAM)\n+  @Path(\"/segments/{tableNameWithType}/{segmentName}\")\n+  @ApiOperation(value = \"Download a segment\", notes = \"Download a segment in zipped tar format\")\n+  public Response downloadSegment(\n+      @ApiParam(value = \"Name of the table with type REALTIME OR OFFLINE\", required = true, example = \"myTable_OFFLINE\") @PathParam(\"tableNameWithType\") String tableNameWithType,\n+      @ApiParam(value = \"Name of the segment\", required = true) @PathParam(\"segmentName\") @Encoded String segmentName,\n+      @Context HttpHeaders httpHeaders)\n+      throws Exception {\n+    LOGGER.info(\"Received a request to download segment {} for table {}\", segmentName, tableNameWithType);\n+    TableDataManager tableDataManager = checkGetTableDataManager(tableNameWithType);\n+    SegmentDataManager segmentDataManager = tableDataManager.acquireSegment(segmentName);\n+    if (segmentDataManager == null) {\n+      throw new WebApplicationException(\n+          String.format(\"Table %s segment %s does not exist\", tableNameWithType, segmentName),\n+          Response.Status.NOT_FOUND);\n+    }\n+    try {\n+      String tableDir = tableDataManager.getTableDataDir().getAbsolutePath();\n+      // TODO Limit the number of concurrent downloads of segments because compression is an expensive operation.\n+      // Store the tar.gz segment file in the server's segmentTarDir folder with a unique file name.\n+      // Note that two clients asking the same segment file will result in the same tar.gz files being created twice.\n+      // Will revisit for optimization if performance becomes an issue.\n+      String tarFilePath = TarGzCompressionUtils.createTarGzOfDirectory(tableDir + File.separator + segmentName,\n+          serverInstance.getInstanceDataManager().getSegmentFileDirectory() + File.separator + segmentName + \"-\"\n+              + System.currentTimeMillis());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5db84ce7dfb0929ffac5252682c6db058d271683"}, "originalPosition": 64}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkzMTc5Njc0", "url": "https://github.com/apache/pinot/pull/5221#pullrequestreview-393179674", "createdAt": "2020-04-14T18:16:54Z", "commit": {"oid": "5db84ce7dfb0929ffac5252682c6db058d271683"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxODoxNjo1NFrOGFbH_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxODozMzozNlrOGFbu9g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODM0MDQ3OQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                return new File(_tableDataDir);\n          \n          \n            \n                return _indexDir;", "url": "https://github.com/apache/pinot/pull/5221#discussion_r408340479", "createdAt": "2020-04-14T18:16:54Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/data/manager/BaseTableDataManager.java", "diffHunk": "@@ -211,4 +211,9 @@ private void closeSegment(SegmentDataManager segmentDataManager) {\n   public String getTableName() {\n     return _tableNameWithType;\n   }\n+\n+  @Override\n+  public File getTableDataDir() {\n+    return new File(_tableDataDir);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5db84ce7dfb0929ffac5252682c6db058d271683"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODM0MTg1NA==", "bodyText": "@chenboat I'm okay addressing it later", "url": "https://github.com/apache/pinot/pull/5221#discussion_r408341854", "createdAt": "2020-04-14T18:19:09Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-server/src/main/java/org/apache/pinot/server/api/resources/TablesResource.java", "diffHunk": "@@ -175,4 +183,41 @@ public String getCrcMetadataForTable(\n       }\n     }\n   }\n+\n+  @GET\n+  @Produces(MediaType.APPLICATION_OCTET_STREAM)\n+  @Path(\"/tables/{tableName}/segments/{segmentName}\")\n+  @ApiOperation(value = \"Download a segment\", notes = \"Download a segment in zipped tar format\")\n+  public Response downloadSegment(\n+      @ApiParam(value = \"Name of the table with type REALTIME OR OFFLINE\", required = true, example = \"myTable_OFFLINE\") @PathParam(\"tableName\") String tableName,\n+      @ApiParam(value = \"Name of the segment\", required = true) @PathParam(\"segmentName\") @Encoded String segmentName,\n+      @Context HttpHeaders httpHeaders)\n+      throws Exception {\n+    LOGGER.info(\"Get a request to download segment {} for table {}\", segmentName, tableName);\n+    TableDataManager tableDataManager = checkGetTableDataManager(tableName);\n+    SegmentDataManager segmentDataManager = tableDataManager.acquireSegment(segmentName);\n+    if (segmentDataManager == null) {\n+      throw new WebApplicationException(String.format(\"Table %s segments %s does not exist\", tableName, segmentName),\n+          Response.Status.NOT_FOUND);\n+    }\n+    try {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTE4ODM4Mw=="}, "originalCommit": {"oid": "ecf20a2b941574c3073a2db2aed32ab0d1607b31"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODM0MjUzMQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  String tarFilePath = TarGzCompressionUtils.createTarGzOfDirectory(tableDir + File.separator + segmentName,\n          \n          \n            \n                  String tarFilePath = TarGzCompressionUtils.createTarGzOfDirectory(new File(tableDataManager.getTableDataDir(), segmentName).getAbsolutePath(),", "url": "https://github.com/apache/pinot/pull/5221#discussion_r408342531", "createdAt": "2020-04-14T18:20:22Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-server/src/main/java/org/apache/pinot/server/api/resources/TablesResource.java", "diffHunk": "@@ -175,4 +183,49 @@ public String getCrcMetadataForTable(\n       }\n     }\n   }\n+\n+  // TODO Add access control similar to PinotSegmentUploadDownloadRestletResource for segment download.\n+  @GET\n+  @Produces(MediaType.APPLICATION_OCTET_STREAM)\n+  @Path(\"/segments/{tableNameWithType}/{segmentName}\")\n+  @ApiOperation(value = \"Download a segment\", notes = \"Download a segment in zipped tar format\")\n+  public Response downloadSegment(\n+      @ApiParam(value = \"Name of the table with type REALTIME OR OFFLINE\", required = true, example = \"myTable_OFFLINE\") @PathParam(\"tableNameWithType\") String tableNameWithType,\n+      @ApiParam(value = \"Name of the segment\", required = true) @PathParam(\"segmentName\") @Encoded String segmentName,\n+      @Context HttpHeaders httpHeaders)\n+      throws Exception {\n+    LOGGER.info(\"Received a request to download segment {} for table {}\", segmentName, tableNameWithType);\n+    TableDataManager tableDataManager = checkGetTableDataManager(tableNameWithType);\n+    SegmentDataManager segmentDataManager = tableDataManager.acquireSegment(segmentName);\n+    if (segmentDataManager == null) {\n+      throw new WebApplicationException(\n+          String.format(\"Table %s segment %s does not exist\", tableNameWithType, segmentName),\n+          Response.Status.NOT_FOUND);\n+    }\n+    try {\n+      String tableDir = tableDataManager.getTableDataDir().getAbsolutePath();\n+      // TODO Limit the number of concurrent downloads of segments because compression is an expensive operation.\n+      // Store the tar.gz segment file in the server's segmentTarDir folder with a unique file name.\n+      // Note that two clients asking the same segment file will result in the same tar.gz files being created twice.\n+      // Will revisit for optimization if performance becomes an issue.\n+      String tarFilePath = TarGzCompressionUtils.createTarGzOfDirectory(tableDir + File.separator + segmentName,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5db84ce7dfb0929ffac5252682c6db058d271683"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODM0NjcwNg==", "bodyText": "Make a separate directory (e.g. peerDownloadTemp) under segment file directory to hold all these files. Also good to keep the tableName for debugging purpose? You can refer to the name in SegmentFetcherAndLoader line 183", "url": "https://github.com/apache/pinot/pull/5221#discussion_r408346706", "createdAt": "2020-04-14T18:27:18Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-server/src/main/java/org/apache/pinot/server/api/resources/TablesResource.java", "diffHunk": "@@ -175,4 +183,49 @@ public String getCrcMetadataForTable(\n       }\n     }\n   }\n+\n+  // TODO Add access control similar to PinotSegmentUploadDownloadRestletResource for segment download.\n+  @GET\n+  @Produces(MediaType.APPLICATION_OCTET_STREAM)\n+  @Path(\"/segments/{tableNameWithType}/{segmentName}\")\n+  @ApiOperation(value = \"Download a segment\", notes = \"Download a segment in zipped tar format\")\n+  public Response downloadSegment(\n+      @ApiParam(value = \"Name of the table with type REALTIME OR OFFLINE\", required = true, example = \"myTable_OFFLINE\") @PathParam(\"tableNameWithType\") String tableNameWithType,\n+      @ApiParam(value = \"Name of the segment\", required = true) @PathParam(\"segmentName\") @Encoded String segmentName,\n+      @Context HttpHeaders httpHeaders)\n+      throws Exception {\n+    LOGGER.info(\"Received a request to download segment {} for table {}\", segmentName, tableNameWithType);\n+    TableDataManager tableDataManager = checkGetTableDataManager(tableNameWithType);\n+    SegmentDataManager segmentDataManager = tableDataManager.acquireSegment(segmentName);\n+    if (segmentDataManager == null) {\n+      throw new WebApplicationException(\n+          String.format(\"Table %s segment %s does not exist\", tableNameWithType, segmentName),\n+          Response.Status.NOT_FOUND);\n+    }\n+    try {\n+      String tableDir = tableDataManager.getTableDataDir().getAbsolutePath();\n+      // TODO Limit the number of concurrent downloads of segments because compression is an expensive operation.\n+      // Store the tar.gz segment file in the server's segmentTarDir folder with a unique file name.\n+      // Note that two clients asking the same segment file will result in the same tar.gz files being created twice.\n+      // Will revisit for optimization if performance becomes an issue.\n+      String tarFilePath = TarGzCompressionUtils.createTarGzOfDirectory(tableDir + File.separator + segmentName,\n+          serverInstance.getInstanceDataManager().getSegmentFileDirectory() + File.separator + segmentName + \"-\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5db84ce7dfb0929ffac5252682c6db058d271683"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODM1MDQ1NA==", "bodyText": "Why do you need to separate realtime and offline segments? They should be handled in the same way right?\nAlso the realtime index segments are not CONSUMING segment, but COMPLETED segment, which is a little bit confusing.", "url": "https://github.com/apache/pinot/pull/5221#discussion_r408350454", "createdAt": "2020-04-14T18:33:36Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-server/src/test/java/org/apache/pinot/server/api/BaseResourceTest.java", "diffHunk": "@@ -58,8 +59,8 @@\n   protected static final String TABLE_NAME = \"testTable\";\n \n   private final Map<String, TableDataManager> _tableDataManagerMap = new HashMap<>();\n-  protected final List<ImmutableSegment> _indexSegments = new ArrayList<>();\n-\n+  protected final List<ImmutableSegment> _realtimeIndexSegments = new ArrayList<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5db84ce7dfb0929ffac5252682c6db058d271683"}, "originalPosition": 14}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bae23b66c596aec3fe49e4914dbd41e6f7bcea25", "author": {"user": {"login": "chenboat", "name": "Ting Chen"}}, "url": "https://github.com/apache/pinot/commit/bae23b66c596aec3fe49e4914dbd41e6f7bcea25", "committedDate": "2020-04-14T23:12:17Z", "message": "Further revision based on feedbacks."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkzMzg5MDg4", "url": "https://github.com/apache/pinot/pull/5221#pullrequestreview-393389088", "createdAt": "2020-04-15T00:52:19Z", "commit": {"oid": "bae23b66c596aec3fe49e4914dbd41e6f7bcea25"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwMDo1MjoxOVrOGFmAOA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwMDo1MjozMFrOGFmAbA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODUxODcxMg==", "bodyText": "I agree the test setup should reflect the true cluster setup, where the table name should have the correct type suffix.\nMy concern about the CONSUMING segment is because the CONSUMING segment is not ImmutableSegment, so I'm not sure if adding separate realtime segments as a list of ImmutableSegment is the correct design.\nCurrently the test setup is mimicking a offline only table, so I would suggest introducing the realtime part as a separate PR (the fix for the table name is good).", "url": "https://github.com/apache/pinot/pull/5221#discussion_r408518712", "createdAt": "2020-04-15T00:52:19Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-server/src/test/java/org/apache/pinot/server/api/BaseResourceTest.java", "diffHunk": "@@ -58,8 +59,8 @@\n   protected static final String TABLE_NAME = \"testTable\";\n \n   private final Map<String, TableDataManager> _tableDataManagerMap = new HashMap<>();\n-  protected final List<ImmutableSegment> _indexSegments = new ArrayList<>();\n-\n+  protected final List<ImmutableSegment> _realtimeIndexSegments = new ArrayList<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODM1MDQ1NA=="}, "originalCommit": {"oid": "5db84ce7dfb0929ffac5252682c6db058d271683"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODUxODc2NA==", "bodyText": "What about offline segments?", "url": "https://github.com/apache/pinot/pull/5221#discussion_r408518764", "createdAt": "2020-04-15T00:52:30Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-server/src/test/java/org/apache/pinot/server/api/BaseResourceTest.java", "diffHunk": "@@ -96,46 +103,47 @@ public void setUp()\n   @AfterClass\n   public void tearDown() {\n     _adminApiApplication.stop();\n-    for (ImmutableSegment immutableSegment : _indexSegments) {\n+    for (ImmutableSegment immutableSegment : _realtimeIndexSegments) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bae23b66c596aec3fe49e4914dbd41e6f7bcea25"}, "originalPosition": 44}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "358d85ff973fedf129fb79235684aab95912517f", "author": {"user": {"login": "chenboat", "name": "Ting Chen"}}, "url": "https://github.com/apache/pinot/commit/358d85ff973fedf129fb79235684aab95912517f", "committedDate": "2020-04-15T05:20:59Z", "message": "Fix tests."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f884bdc8b190d760d487555a4d6ed5bd26f7947f", "author": {"user": {"login": "chenboat", "name": "Ting Chen"}}, "url": "https://github.com/apache/pinot/commit/f884bdc8b190d760d487555a4d6ed5bd26f7947f", "committedDate": "2020-04-15T05:25:13Z", "message": "Minor typo."}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1176, "cost": 1, "resetAt": "2021-10-28T18:00:02Z"}}}