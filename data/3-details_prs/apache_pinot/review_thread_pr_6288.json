{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI3MjQ5MTQ1", "number": 6288, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxOTowOTozNVrOE9XB1w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxOTowOTo1OVrOE9XCTg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyNzc1ODk1OnYy", "diffSide": "RIGHT", "path": "pinot-core/src/main/java/org/apache/pinot/core/operator/filter/FilterOperatorUtils.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxOTowOTozNVrOH6ArMQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxOTozNjowNlrOH8Kjhg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDU5MDUxMw==", "bodyText": "(nit)\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  if (dataSource.getDataSourceMetadata().isSorted() && (dataSource.getDictionary() != null)) {\n          \n          \n            \n                  if (dataSource.getDataSourceMetadata().isSorted() && dataSource.getDictionary() != null) {", "url": "https://github.com/apache/pinot/pull/6288#discussion_r530590513", "createdAt": "2020-11-25T19:09:35Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/operator/filter/FilterOperatorUtils.java", "diffHunk": "@@ -47,9 +47,15 @@ public static BaseFilterOperator getLeafFilterOperator(PredicateEvaluator predic\n       return new MatchAllFilterOperator(numDocs);\n     }\n \n+    // Currently sorted index based filtering is supported only for\n+    // dictionary encoded columns. The on-disk segment metadata\n+    // will indicate if the column is sorted or not regardless of\n+    // whether it is raw or dictionary encoded. Here when creating\n+    // the filter operator, we need to make sure that sort filter\n+    // operator is used only if the column is sorted and has dictionary.\n     Predicate.Type predicateType = predicateEvaluator.getPredicateType();\n     if (predicateType == Predicate.Type.RANGE) {\n-      if (dataSource.getDataSourceMetadata().isSorted()) {\n+      if (dataSource.getDataSourceMetadata().isSorted() && (dataSource.getDictionary() != null)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a6535ca2d3a774efae5c509be4773a317869dee3"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjg0OTU0Mg==", "bodyText": "done", "url": "https://github.com/apache/pinot/pull/6288#discussion_r532849542", "createdAt": "2020-11-30T19:36:06Z", "author": {"login": "siddharthteotia"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/operator/filter/FilterOperatorUtils.java", "diffHunk": "@@ -47,9 +47,15 @@ public static BaseFilterOperator getLeafFilterOperator(PredicateEvaluator predic\n       return new MatchAllFilterOperator(numDocs);\n     }\n \n+    // Currently sorted index based filtering is supported only for\n+    // dictionary encoded columns. The on-disk segment metadata\n+    // will indicate if the column is sorted or not regardless of\n+    // whether it is raw or dictionary encoded. Here when creating\n+    // the filter operator, we need to make sure that sort filter\n+    // operator is used only if the column is sorted and has dictionary.\n     Predicate.Type predicateType = predicateEvaluator.getPredicateType();\n     if (predicateType == Predicate.Type.RANGE) {\n-      if (dataSource.getDataSourceMetadata().isSorted()) {\n+      if (dataSource.getDataSourceMetadata().isSorted() && (dataSource.getDictionary() != null)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDU5MDUxMw=="}, "originalCommit": {"oid": "a6535ca2d3a774efae5c509be4773a317869dee3"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyNzc2MDE0OnYy", "diffSide": "RIGHT", "path": "pinot-core/src/main/java/org/apache/pinot/core/operator/filter/FilterOperatorUtils.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxOTowOTo1OVrOH6Ar7w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxOTozNjoxMlrOH8KjuA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDU5MDcwMw==", "bodyText": "(nit)\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  if (dataSource.getDataSourceMetadata().isSorted() && (dataSource.getDictionary() != null)) {\n          \n          \n            \n                  if (dataSource.getDataSourceMetadata().isSorted() && dataSource.getDictionary() != null) {", "url": "https://github.com/apache/pinot/pull/6288#discussion_r530590703", "createdAt": "2020-11-25T19:09:59Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/operator/filter/FilterOperatorUtils.java", "diffHunk": "@@ -59,7 +65,7 @@ public static BaseFilterOperator getLeafFilterOperator(PredicateEvaluator predic\n     } else if (predicateType == Predicate.Type.REGEXP_LIKE) {\n       return new ScanBasedFilterOperator(predicateEvaluator, dataSource, numDocs);\n     } else {\n-      if (dataSource.getDataSourceMetadata().isSorted()) {\n+      if (dataSource.getDataSourceMetadata().isSorted() && (dataSource.getDictionary() != null)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a6535ca2d3a774efae5c509be4773a317869dee3"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjg0OTU5Mg==", "bodyText": "done", "url": "https://github.com/apache/pinot/pull/6288#discussion_r532849592", "createdAt": "2020-11-30T19:36:12Z", "author": {"login": "siddharthteotia"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/operator/filter/FilterOperatorUtils.java", "diffHunk": "@@ -59,7 +65,7 @@ public static BaseFilterOperator getLeafFilterOperator(PredicateEvaluator predic\n     } else if (predicateType == Predicate.Type.REGEXP_LIKE) {\n       return new ScanBasedFilterOperator(predicateEvaluator, dataSource, numDocs);\n     } else {\n-      if (dataSource.getDataSourceMetadata().isSorted()) {\n+      if (dataSource.getDataSourceMetadata().isSorted() && (dataSource.getDictionary() != null)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDU5MDcwMw=="}, "originalCommit": {"oid": "a6535ca2d3a774efae5c509be4773a317869dee3"}, "originalPosition": 22}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3159, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}