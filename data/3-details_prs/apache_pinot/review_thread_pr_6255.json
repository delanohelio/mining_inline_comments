{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE4ODA3ODQ2", "number": 6255, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxNzoxNTo1MFrOE9Uv9Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxNzoyNTo1M1rOFDmDMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyNzM4NTQ5OnYy", "diffSide": "RIGHT", "path": "pinot-common/src/main/java/org/apache/pinot/common/config/tuner/TableConfigTunerRegistry.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxNzoxNTo1MFrOH59EaQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxNzoxNTo1MFrOH59EaQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDUzMTQzMw==", "bodyText": "Why are we measuring the time here? This should happen during startup, and should be fairly quick.", "url": "https://github.com/apache/pinot/pull/6255#discussion_r530531433", "createdAt": "2020-11-25T17:15:50Z", "author": {"login": "mcvsubbu"}, "path": "pinot-common/src/main/java/org/apache/pinot/common/config/tuner/TableConfigTunerRegistry.java", "diffHunk": "@@ -0,0 +1,97 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.common.config.tuner;\n+\n+import com.google.common.base.Preconditions;\n+import java.lang.reflect.Method;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Set;\n+import org.apache.pinot.common.function.FunctionInfo;\n+import org.apache.pinot.common.function.FunctionInvoker;\n+import org.apache.pinot.spi.config.table.TableConfig;\n+import org.apache.pinot.spi.config.table.tuner.TableConfigTuner;\n+import org.apache.pinot.spi.data.Schema;\n+import org.reflections.Reflections;\n+import org.reflections.scanners.MethodAnnotationsScanner;\n+import org.reflections.util.ClasspathHelper;\n+import org.reflections.util.ConfigurationBuilder;\n+import org.reflections.util.FilterBuilder;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+\n+/**\n+ * Helper class to dynamically register all annotated {@link TableConfigTuner} methods\n+ */\n+public class TableConfigTunerRegistry {\n+  private static final int NUM_PARAMETERS = 2;\n+\n+  private TableConfigTunerRegistry() {\n+  }\n+\n+  private static final Logger LOGGER = LoggerFactory.getLogger(TableConfigTunerRegistry.class);\n+  private static final Map<String, FunctionInfo> tunerFunctionInfoMap = new HashMap<>();\n+\n+  static {\n+    long startTimeMs = System.currentTimeMillis();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "76d6a43c91e3d8d32787d86cd7549efc655b8001"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyNzM4ODA0OnYy", "diffSide": "RIGHT", "path": "pinot-common/src/main/java/org/apache/pinot/common/config/tuner/RealTimeAutoIndexTuner.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxNzoxNjozMlrOH59GEA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxODoxMjoyNFrOIDWx-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDUzMTg1Ng==", "bodyText": "Should think of adding one column as sorted. I am not sure how to pick that column.", "url": "https://github.com/apache/pinot/pull/6255#discussion_r530531856", "createdAt": "2020-11-25T17:16:32Z", "author": {"login": "mcvsubbu"}, "path": "pinot-common/src/main/java/org/apache/pinot/common/config/tuner/RealTimeAutoIndexTuner.java", "diffHunk": "@@ -0,0 +1,42 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.common.config.tuner;\n+\n+import org.apache.pinot.spi.config.table.IndexingConfig;\n+import org.apache.pinot.spi.config.table.TableConfig;\n+import org.apache.pinot.spi.config.table.tuner.TableConfigTuner;\n+import org.apache.pinot.spi.data.Schema;\n+\n+\n+/**\n+ * Used to auto-tune the table indexing config. It takes the original table\n+ * config, table schema and adds the following to indexing config:\n+ * - Inverted indices for all dimensions\n+ * - No dictionary index for all metrics\n+ */\n+public class RealTimeAutoIndexTuner {\n+\n+  @TableConfigTuner(name = \"realtimeAutoIndexTuner\")\n+  public static TableConfig tuneTableConfig(TableConfig initialConfig, Schema schema) {\n+    IndexingConfig initialIndexingConfig = initialConfig.getIndexingConfig();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "76d6a43c91e3d8d32787d86cd7549efc655b8001"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDU4NzI5Mg==", "bodyText": "This is a very basic tuner. I will add more comprehensive ones in the follow up PRs.", "url": "https://github.com/apache/pinot/pull/6255#discussion_r530587292", "createdAt": "2020-11-25T19:02:20Z", "author": {"login": "icefury71"}, "path": "pinot-common/src/main/java/org/apache/pinot/common/config/tuner/RealTimeAutoIndexTuner.java", "diffHunk": "@@ -0,0 +1,42 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.common.config.tuner;\n+\n+import org.apache.pinot.spi.config.table.IndexingConfig;\n+import org.apache.pinot.spi.config.table.TableConfig;\n+import org.apache.pinot.spi.config.table.tuner.TableConfigTuner;\n+import org.apache.pinot.spi.data.Schema;\n+\n+\n+/**\n+ * Used to auto-tune the table indexing config. It takes the original table\n+ * config, table schema and adds the following to indexing config:\n+ * - Inverted indices for all dimensions\n+ * - No dictionary index for all metrics\n+ */\n+public class RealTimeAutoIndexTuner {\n+\n+  @TableConfigTuner(name = \"realtimeAutoIndexTuner\")\n+  public static TableConfig tuneTableConfig(TableConfig initialConfig, Schema schema) {\n+    IndexingConfig initialIndexingConfig = initialConfig.getIndexingConfig();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDUzMTg1Ng=="}, "originalCommit": {"oid": "76d6a43c91e3d8d32787d86cd7549efc655b8001"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDM3Mjc3Mw==", "bodyText": "It will be great to look at the existing tuner (RecommenderDriver) and improve/finetune it. We implemented it for recommending indexes and other parts of the config.", "url": "https://github.com/apache/pinot/pull/6255#discussion_r540372773", "createdAt": "2020-12-10T17:47:08Z", "author": {"login": "siddharthteotia"}, "path": "pinot-common/src/main/java/org/apache/pinot/common/config/tuner/RealTimeAutoIndexTuner.java", "diffHunk": "@@ -0,0 +1,42 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.common.config.tuner;\n+\n+import org.apache.pinot.spi.config.table.IndexingConfig;\n+import org.apache.pinot.spi.config.table.TableConfig;\n+import org.apache.pinot.spi.config.table.tuner.TableConfigTuner;\n+import org.apache.pinot.spi.data.Schema;\n+\n+\n+/**\n+ * Used to auto-tune the table indexing config. It takes the original table\n+ * config, table schema and adds the following to indexing config:\n+ * - Inverted indices for all dimensions\n+ * - No dictionary index for all metrics\n+ */\n+public class RealTimeAutoIndexTuner {\n+\n+  @TableConfigTuner(name = \"realtimeAutoIndexTuner\")\n+  public static TableConfig tuneTableConfig(TableConfig initialConfig, Schema schema) {\n+    IndexingConfig initialIndexingConfig = initialConfig.getIndexingConfig();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDUzMTg1Ng=="}, "originalCommit": {"oid": "76d6a43c91e3d8d32787d86cd7549efc655b8001"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDM4OTg4MA==", "bodyText": "Sounds good. I'll follow up in subsequent PRs. Thanks for the suggestion !", "url": "https://github.com/apache/pinot/pull/6255#discussion_r540389880", "createdAt": "2020-12-10T18:12:24Z", "author": {"login": "icefury71"}, "path": "pinot-common/src/main/java/org/apache/pinot/common/config/tuner/RealTimeAutoIndexTuner.java", "diffHunk": "@@ -0,0 +1,42 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.common.config.tuner;\n+\n+import org.apache.pinot.spi.config.table.IndexingConfig;\n+import org.apache.pinot.spi.config.table.TableConfig;\n+import org.apache.pinot.spi.config.table.tuner.TableConfigTuner;\n+import org.apache.pinot.spi.data.Schema;\n+\n+\n+/**\n+ * Used to auto-tune the table indexing config. It takes the original table\n+ * config, table schema and adds the following to indexing config:\n+ * - Inverted indices for all dimensions\n+ * - No dictionary index for all metrics\n+ */\n+public class RealTimeAutoIndexTuner {\n+\n+  @TableConfigTuner(name = \"realtimeAutoIndexTuner\")\n+  public static TableConfig tuneTableConfig(TableConfig initialConfig, Schema schema) {\n+    IndexingConfig initialIndexingConfig = initialConfig.getIndexingConfig();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDUzMTg1Ng=="}, "originalCommit": {"oid": "76d6a43c91e3d8d32787d86cd7549efc655b8001"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyNzM5NzQyOnYy", "diffSide": "RIGHT", "path": "pinot-common/src/main/java/org/apache/pinot/common/config/tuner/RealTimeAutoIndexTuner.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxNzoxOTowMVrOH59L1w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxODoxMzoxMlrOIDW0Fw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDUzMzMzNQ==", "bodyText": "I suggest adding a check in (perhaps some base class?) if there are already some columns configured for inv index, no dictionary, etc.  If so, then the configured items take precedence over what this method does.", "url": "https://github.com/apache/pinot/pull/6255#discussion_r530533335", "createdAt": "2020-11-25T17:19:01Z", "author": {"login": "mcvsubbu"}, "path": "pinot-common/src/main/java/org/apache/pinot/common/config/tuner/RealTimeAutoIndexTuner.java", "diffHunk": "@@ -0,0 +1,42 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.common.config.tuner;\n+\n+import org.apache.pinot.spi.config.table.IndexingConfig;\n+import org.apache.pinot.spi.config.table.TableConfig;\n+import org.apache.pinot.spi.config.table.tuner.TableConfigTuner;\n+import org.apache.pinot.spi.data.Schema;\n+\n+\n+/**\n+ * Used to auto-tune the table indexing config. It takes the original table\n+ * config, table schema and adds the following to indexing config:\n+ * - Inverted indices for all dimensions\n+ * - No dictionary index for all metrics\n+ */\n+public class RealTimeAutoIndexTuner {\n+\n+  @TableConfigTuner(name = \"realtimeAutoIndexTuner\")\n+  public static TableConfig tuneTableConfig(TableConfig initialConfig, Schema schema) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "76d6a43c91e3d8d32787d86cd7549efc655b8001"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDU4ODgyOQ==", "bodyText": "Again - this is just a sample tuner. I can handle this in the next PR.\nHowever, related question:  do we expect people to define a tuning strategy and also specify the indexing config ?", "url": "https://github.com/apache/pinot/pull/6255#discussion_r530588829", "createdAt": "2020-11-25T19:05:44Z", "author": {"login": "icefury71"}, "path": "pinot-common/src/main/java/org/apache/pinot/common/config/tuner/RealTimeAutoIndexTuner.java", "diffHunk": "@@ -0,0 +1,42 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.common.config.tuner;\n+\n+import org.apache.pinot.spi.config.table.IndexingConfig;\n+import org.apache.pinot.spi.config.table.TableConfig;\n+import org.apache.pinot.spi.config.table.tuner.TableConfigTuner;\n+import org.apache.pinot.spi.data.Schema;\n+\n+\n+/**\n+ * Used to auto-tune the table indexing config. It takes the original table\n+ * config, table schema and adds the following to indexing config:\n+ * - Inverted indices for all dimensions\n+ * - No dictionary index for all metrics\n+ */\n+public class RealTimeAutoIndexTuner {\n+\n+  @TableConfigTuner(name = \"realtimeAutoIndexTuner\")\n+  public static TableConfig tuneTableConfig(TableConfig initialConfig, Schema schema) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDUzMzMzNQ=="}, "originalCommit": {"oid": "76d6a43c91e3d8d32787d86cd7549efc655b8001"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDU5NDcxMw==", "bodyText": "Pinot supports a really wide variety of use cases. Even for a single use case, there are multiple questions to be answered before we can arrive at the right parameters to use. This being the case, I don't think we can automatically tune a use case just given schema and table config, except for the very basic of the basic use cases (where performance probably does not matter).\nWe need to have some sample data (or maybe a DataDescriptor class that may point to sample data, or in other way describe the data in some way -- I have even thought about including such a hint in the schema, for example -- with fields such as expected cardinality, average length of string columns, etc.),and also sample queries.\nWith this we can arrive at some automated code (as Jia has done) to come up with recommendations. The flag of applying those recommendations can be optional. In some cases, we can directly apply the recommendations. In others, we can let the admins decide.\nSimilarly, for realtime, we need to come up with an optimal segment size for the use case.\nThe problem of multi-tenant is yet another dimension, where the tuning we do for one table can be potentially bad for another one.\nOne thing we can do is to add a periodic task that tunes and rebalances tables, etc. The interface in that case is meaningless because the task has access to pretty much everything -- past segments, past queries, cardinality of columns, whatever. We could also add this as a minion task. There is no need of an interface in that case, other than a cluster-wide setting that says table must be auto-tuned, and maybe a flag within a table asking not to touch this one.\nI think the interface you are trying to define, and the problem you are trying to solve, is that of initial provisioning and not continuous tuning.\nWithout having visibility into the problem you are trying to solve, it gets a bit hard to review an interface.", "url": "https://github.com/apache/pinot/pull/6255#discussion_r530594713", "createdAt": "2020-11-25T19:18:47Z", "author": {"login": "mcvsubbu"}, "path": "pinot-common/src/main/java/org/apache/pinot/common/config/tuner/RealTimeAutoIndexTuner.java", "diffHunk": "@@ -0,0 +1,42 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.common.config.tuner;\n+\n+import org.apache.pinot.spi.config.table.IndexingConfig;\n+import org.apache.pinot.spi.config.table.TableConfig;\n+import org.apache.pinot.spi.config.table.tuner.TableConfigTuner;\n+import org.apache.pinot.spi.data.Schema;\n+\n+\n+/**\n+ * Used to auto-tune the table indexing config. It takes the original table\n+ * config, table schema and adds the following to indexing config:\n+ * - Inverted indices for all dimensions\n+ * - No dictionary index for all metrics\n+ */\n+public class RealTimeAutoIndexTuner {\n+\n+  @TableConfigTuner(name = \"realtimeAutoIndexTuner\")\n+  public static TableConfig tuneTableConfig(TableConfig initialConfig, Schema schema) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDUzMzMzNQ=="}, "originalCommit": {"oid": "76d6a43c91e3d8d32787d86cd7549efc655b8001"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDM5MDQyMw==", "bodyText": "Resolving conversation - the PR has been updated based on the suggestion", "url": "https://github.com/apache/pinot/pull/6255#discussion_r540390423", "createdAt": "2020-12-10T18:13:12Z", "author": {"login": "icefury71"}, "path": "pinot-common/src/main/java/org/apache/pinot/common/config/tuner/RealTimeAutoIndexTuner.java", "diffHunk": "@@ -0,0 +1,42 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.common.config.tuner;\n+\n+import org.apache.pinot.spi.config.table.IndexingConfig;\n+import org.apache.pinot.spi.config.table.TableConfig;\n+import org.apache.pinot.spi.config.table.tuner.TableConfigTuner;\n+import org.apache.pinot.spi.data.Schema;\n+\n+\n+/**\n+ * Used to auto-tune the table indexing config. It takes the original table\n+ * config, table schema and adds the following to indexing config:\n+ * - Inverted indices for all dimensions\n+ * - No dictionary index for all metrics\n+ */\n+public class RealTimeAutoIndexTuner {\n+\n+  @TableConfigTuner(name = \"realtimeAutoIndexTuner\")\n+  public static TableConfig tuneTableConfig(TableConfig initialConfig, Schema schema) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDUzMzMzNQ=="}, "originalCommit": {"oid": "76d6a43c91e3d8d32787d86cd7549efc655b8001"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5MzEzNDU4OnYy", "diffSide": "RIGHT", "path": "pinot-common/src/main/java/org/apache/pinot/common/config/tuner/NoOpTableTableConfigTuner.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxNzoyNTo1M1rOIDUwUw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxNzozNzoyMVrOIDVQag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDM1NjY5MQ==", "bodyText": "Is this the tuner registered by default with the TableConfigTunerRegistry?", "url": "https://github.com/apache/pinot/pull/6255#discussion_r540356691", "createdAt": "2020-12-10T17:25:53Z", "author": {"login": "siddharthteotia"}, "path": "pinot-common/src/main/java/org/apache/pinot/common/config/tuner/NoOpTableTableConfigTuner.java", "diffHunk": "@@ -0,0 +1,38 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.common.config.tuner;\n+\n+import org.apache.pinot.spi.config.table.TableConfig;\n+import org.apache.pinot.spi.config.table.TunerConfig;\n+import org.apache.pinot.spi.config.table.tuner.TableConfigTuner;\n+import org.apache.pinot.spi.config.table.tuner.Tuner;\n+import org.apache.pinot.spi.data.Schema;\n+\n+\n+@Tuner(name = \"noopConfigTuner\")\n+public class NoOpTableTableConfigTuner implements TableConfigTuner {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1312ea378a3933927ec5e07496a94326b7eac834"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDM1Njk5Mw==", "bodyText": "Or may be by default no tuner registered?", "url": "https://github.com/apache/pinot/pull/6255#discussion_r540356993", "createdAt": "2020-12-10T17:26:20Z", "author": {"login": "siddharthteotia"}, "path": "pinot-common/src/main/java/org/apache/pinot/common/config/tuner/NoOpTableTableConfigTuner.java", "diffHunk": "@@ -0,0 +1,38 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.common.config.tuner;\n+\n+import org.apache.pinot.spi.config.table.TableConfig;\n+import org.apache.pinot.spi.config.table.TunerConfig;\n+import org.apache.pinot.spi.config.table.tuner.TableConfigTuner;\n+import org.apache.pinot.spi.config.table.tuner.Tuner;\n+import org.apache.pinot.spi.data.Schema;\n+\n+\n+@Tuner(name = \"noopConfigTuner\")\n+public class NoOpTableTableConfigTuner implements TableConfigTuner {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDM1NjY5MQ=="}, "originalCommit": {"oid": "1312ea378a3933927ec5e07496a94326b7eac834"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDM2NDkwNg==", "bodyText": "This is simply a way to register the tuner implementations with the TableConfigTunerRegistry. So any class in the classpath with this annotation will automatically get registered. However, this doesn't mean the tuner is automatically applied to any table.\nTableConfig has to explicitly mention the name of the tuner to be applied. So by default, no tuner is applied. Hope this clears it up.", "url": "https://github.com/apache/pinot/pull/6255#discussion_r540364906", "createdAt": "2020-12-10T17:37:21Z", "author": {"login": "icefury71"}, "path": "pinot-common/src/main/java/org/apache/pinot/common/config/tuner/NoOpTableTableConfigTuner.java", "diffHunk": "@@ -0,0 +1,38 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.common.config.tuner;\n+\n+import org.apache.pinot.spi.config.table.TableConfig;\n+import org.apache.pinot.spi.config.table.TunerConfig;\n+import org.apache.pinot.spi.config.table.tuner.TableConfigTuner;\n+import org.apache.pinot.spi.config.table.tuner.Tuner;\n+import org.apache.pinot.spi.data.Schema;\n+\n+\n+@Tuner(name = \"noopConfigTuner\")\n+public class NoOpTableTableConfigTuner implements TableConfigTuner {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDM1NjY5MQ=="}, "originalCommit": {"oid": "1312ea378a3933927ec5e07496a94326b7eac834"}, "originalPosition": 29}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3114, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}