{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAyMDU5Njk0", "number": 5238, "reviewThreads": {"totalCount": 50, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQyMjozNzo0OVrODw4L5g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwMTo0ODoyNFrODx4jMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNTc4NzkwOnYy", "diffSide": "RIGHT", "path": "pinot-spi/src/main/java/org/apache/pinot/spi/data/function/evaluators/ExpressionEvaluatorFactory.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQyMjozNzo0OVrOGEHiJg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QxOToxNjoyM1rOGExzCw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjk3MDkxOA==", "bodyText": "include column name in the log", "url": "https://github.com/apache/pinot/pull/5238#discussion_r406970918", "createdAt": "2020-04-10T22:37:49Z", "author": {"login": "mcvsubbu"}, "path": "pinot-spi/src/main/java/org/apache/pinot/spi/data/function/evaluators/ExpressionEvaluatorFactory.java", "diffHunk": "@@ -0,0 +1,104 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.spi.data.function.evaluators;\n+\n+import org.apache.pinot.spi.data.FieldSpec;\n+import org.apache.pinot.spi.data.TimeFieldSpec;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+\n+/**\n+ * Factory class to create an {@link ExpressionEvaluator} for the field spec based on the {@link FieldSpec#getTransformFunction()}\n+ */\n+public class ExpressionEvaluatorFactory {\n+\n+  private static final Logger LOGGER = LoggerFactory.getLogger(ExpressionEvaluatorFactory.class);\n+\n+  private ExpressionEvaluatorFactory() {\n+\n+  }\n+\n+  /**\n+   * Creates the {@link ExpressionEvaluator} for the given field spec\n+   *\n+   * 1. If transform expression is defined, use it to create {@link ExpressionEvaluator}\n+   * 2. For TIME column, {@link DefaultTimeSpecEvaluator} for backward compatible handling of time spec. This is needed until we migrate to {@link org.apache.pinot.spi.data.DateTimeFieldSpec}\n+   * 3. For columns ending with __KEYS or __VALUES (used for interpreting Map column in Avro), create default functions for handing the Map\n+   * 4. Return null, if none of the above\n+   */\n+  public static ExpressionEvaluator getExpressionEvaluator(FieldSpec fieldSpec) {\n+    ExpressionEvaluator expressionEvaluator = null;\n+\n+    if (!fieldSpec.isVirtualColumn()) {\n+\n+      String columnName = fieldSpec.getName();\n+      String transformExpression = fieldSpec.getTransformFunction();\n+      if (transformExpression != null) {\n+\n+        // if transform function expression present, use it to generate function evaluator\n+        try {\n+          expressionEvaluator = getExpressionEvaluator(transformExpression);\n+        } catch (Exception e) {\n+          LOGGER.error(\"Caught exception while constructing expression evaluator for: {}, skipping\", transformExpression, e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "865922d017e139b54ab245b84e33d1a495f6f978"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzY2MzM3MQ==", "bodyText": "done", "url": "https://github.com/apache/pinot/pull/5238#discussion_r407663371", "createdAt": "2020-04-13T19:16:23Z", "author": {"login": "npawar"}, "path": "pinot-spi/src/main/java/org/apache/pinot/spi/data/function/evaluators/ExpressionEvaluatorFactory.java", "diffHunk": "@@ -0,0 +1,104 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.spi.data.function.evaluators;\n+\n+import org.apache.pinot.spi.data.FieldSpec;\n+import org.apache.pinot.spi.data.TimeFieldSpec;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+\n+/**\n+ * Factory class to create an {@link ExpressionEvaluator} for the field spec based on the {@link FieldSpec#getTransformFunction()}\n+ */\n+public class ExpressionEvaluatorFactory {\n+\n+  private static final Logger LOGGER = LoggerFactory.getLogger(ExpressionEvaluatorFactory.class);\n+\n+  private ExpressionEvaluatorFactory() {\n+\n+  }\n+\n+  /**\n+   * Creates the {@link ExpressionEvaluator} for the given field spec\n+   *\n+   * 1. If transform expression is defined, use it to create {@link ExpressionEvaluator}\n+   * 2. For TIME column, {@link DefaultTimeSpecEvaluator} for backward compatible handling of time spec. This is needed until we migrate to {@link org.apache.pinot.spi.data.DateTimeFieldSpec}\n+   * 3. For columns ending with __KEYS or __VALUES (used for interpreting Map column in Avro), create default functions for handing the Map\n+   * 4. Return null, if none of the above\n+   */\n+  public static ExpressionEvaluator getExpressionEvaluator(FieldSpec fieldSpec) {\n+    ExpressionEvaluator expressionEvaluator = null;\n+\n+    if (!fieldSpec.isVirtualColumn()) {\n+\n+      String columnName = fieldSpec.getName();\n+      String transformExpression = fieldSpec.getTransformFunction();\n+      if (transformExpression != null) {\n+\n+        // if transform function expression present, use it to generate function evaluator\n+        try {\n+          expressionEvaluator = getExpressionEvaluator(transformExpression);\n+        } catch (Exception e) {\n+          LOGGER.error(\"Caught exception while constructing expression evaluator for: {}, skipping\", transformExpression, e);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjk3MDkxOA=="}, "originalCommit": {"oid": "865922d017e139b54ab245b84e33d1a495f6f978"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNzkxMTQ1OnYy", "diffSide": "RIGHT", "path": "pinot-core/src/test/java/org/apache/pinot/core/data/recordtransformer/ExpressionTransformerTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMlQxODoyOTowNlrOGEXsFQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMlQxODoyOTowNlrOGEXsFQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzIzNTYwNQ==", "bodyText": "userId --> user_id we might make columns case insensitive at some point and this test case should still be valid.", "url": "https://github.com/apache/pinot/pull/5238#discussion_r407235605", "createdAt": "2020-04-12T18:29:06Z", "author": {"login": "kishoreg"}, "path": "pinot-core/src/test/java/org/apache/pinot/core/data/recordtransformer/ExpressionTransformerTest.java", "diffHunk": "@@ -0,0 +1,129 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.core.data.recordtransformer;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.net.URL;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import org.apache.pinot.spi.data.Schema;\n+import org.apache.pinot.spi.data.readers.AbstractRecordExtractorTest;\n+import org.apache.pinot.spi.data.readers.GenericRow;\n+import org.testng.Assert;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Test;\n+\n+\n+/**\n+ * Tests the evaluation of transform expressions by the ExpressionTransformer\n+ */\n+public class ExpressionTransformerTest {\n+\n+  private Schema _pinotSchema;\n+\n+  @BeforeClass\n+  public void setup()\n+      throws IOException {\n+    URL resource =\n+        AbstractRecordExtractorTest.class.getClassLoader().getResource(\"data/expression_transformer/groovy_expression_transformer.json\");\n+    File schemaFile = new File(resource.getFile());\n+    _pinotSchema = Schema.fromFile(schemaFile);\n+  }\n+\n+  @Test\n+  public void testGroovyExpressionTransformer() {\n+    ExpressionTransformer expressionTransformer = new ExpressionTransformer(_pinotSchema);\n+    DataTypeTransformer dataTypeTransformer = new DataTypeTransformer(_pinotSchema);\n+\n+    // test functions from schema\n+    GenericRow genericRow = new GenericRow();\n+    genericRow.putValue(\"userID\", 1L);\n+    genericRow.putValue(\"firstName\", \"John\");\n+    genericRow.putValue(\"lastName\", \"Denver\");\n+    genericRow.putValue(\"bids\", Arrays.asList(10, 20));\n+    HashMap<String, String> map1 = new HashMap<>(); // keys in Map from avro are always in STRING\n+    map1.put(\"30\", \"foo\");\n+    map1.put(\"200\", \"bar\");\n+    genericRow.putValue(\"map1\", map1);\n+    HashMap<String, Integer> map2 = new HashMap<>();\n+    map2.put(\"k1\", 10);\n+    map2.put(\"k2\", 20);\n+    genericRow.putValue(\"map2\", map2);\n+    genericRow.putValue(\"cost\", 1000.0);\n+    genericRow.putValue(\"timestamp\", 1574000000000L);\n+\n+    // expression transformer\n+    expressionTransformer.transform(genericRow);\n+\n+    // extract userId\n+    Assert.assertEquals(genericRow.getValue(\"userId\"), 1L);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "865922d017e139b54ab245b84e33d1a495f6f978"}, "originalPosition": 78}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNzkxMTcxOnYy", "diffSide": "RIGHT", "path": "pinot-core/src/test/resources/data/expression_transformer/groovy_expression_transformer.json", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMlQxODoyOToyMVrOGEXsOQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMlQxODoyOToyMVrOGEXsOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzIzNTY0MQ==", "bodyText": "user_id", "url": "https://github.com/apache/pinot/pull/5238#discussion_r407235641", "createdAt": "2020-04-12T18:29:21Z", "author": {"login": "kishoreg"}, "path": "pinot-core/src/test/resources/data/expression_transformer/groovy_expression_transformer.json", "diffHunk": "@@ -0,0 +1,62 @@\n+{\n+  \"schemaName\": \"events\",\n+  \"dimensionFieldSpecs\": [\n+    {\n+      \"name\": \"userId\",\n+      \"dataType\": \"LONG\",\n+      \"transformFunction\": \"Groovy({userID}, userID)\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "865922d017e139b54ab245b84e33d1a495f6f978"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNzkxNDczOnYy", "diffSide": "RIGHT", "path": "pinot-plugins/pinot-input-format/pinot-avro-base/src/main/java/org/apache/pinot/plugin/inputformat/avro/AvroRecordReader.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMlQxODozMzowMFrOGEXtvQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQwMjo1MTozMVrOGE8RCA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzIzNjAyOQ==", "bodyText": "should this be part of SchemaUtils?", "url": "https://github.com/apache/pinot/pull/5238#discussion_r407236029", "createdAt": "2020-04-12T18:33:00Z", "author": {"login": "kishoreg"}, "path": "pinot-plugins/pinot-input-format/pinot-avro-base/src/main/java/org/apache/pinot/plugin/inputformat/avro/AvroRecordReader.java", "diffHunk": "@@ -24,12 +24,11 @@\n import javax.annotation.Nullable;\n import org.apache.avro.file.DataFileStream;\n import org.apache.avro.generic.GenericRecord;\n-import org.apache.pinot.spi.data.FieldSpec;\n import org.apache.pinot.spi.data.Schema;\n import org.apache.pinot.spi.data.readers.GenericRow;\n import org.apache.pinot.spi.data.readers.RecordReader;\n import org.apache.pinot.spi.data.readers.RecordReaderConfig;\n-import org.apache.pinot.spi.data.readers.RecordReaderUtils;\n+import org.apache.pinot.spi.data.function.evaluators.SourceFieldNameExtractor;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "865922d017e139b54ab245b84e33d1a495f6f978"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzY0NzMzNQ==", "bodyText": "SchemaUtils is in pinot-common, which is not accessible to most of the places this is needed", "url": "https://github.com/apache/pinot/pull/5238#discussion_r407647335", "createdAt": "2020-04-13T18:46:58Z", "author": {"login": "npawar"}, "path": "pinot-plugins/pinot-input-format/pinot-avro-base/src/main/java/org/apache/pinot/plugin/inputformat/avro/AvroRecordReader.java", "diffHunk": "@@ -24,12 +24,11 @@\n import javax.annotation.Nullable;\n import org.apache.avro.file.DataFileStream;\n import org.apache.avro.generic.GenericRecord;\n-import org.apache.pinot.spi.data.FieldSpec;\n import org.apache.pinot.spi.data.Schema;\n import org.apache.pinot.spi.data.readers.GenericRow;\n import org.apache.pinot.spi.data.readers.RecordReader;\n import org.apache.pinot.spi.data.readers.RecordReaderConfig;\n-import org.apache.pinot.spi.data.readers.RecordReaderUtils;\n+import org.apache.pinot.spi.data.function.evaluators.SourceFieldNameExtractor;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzIzNjAyOQ=="}, "originalCommit": {"oid": "865922d017e139b54ab245b84e33d1a495f6f978"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzgwMDAzOQ==", "bodyText": "You may have another SchemaUtils in pinot-spi. I don't have preference for the exact name, but recommend making it ***Utils as it is a util class.", "url": "https://github.com/apache/pinot/pull/5238#discussion_r407800039", "createdAt": "2020-04-14T00:44:09Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-plugins/pinot-input-format/pinot-avro-base/src/main/java/org/apache/pinot/plugin/inputformat/avro/AvroRecordReader.java", "diffHunk": "@@ -24,12 +24,11 @@\n import javax.annotation.Nullable;\n import org.apache.avro.file.DataFileStream;\n import org.apache.avro.generic.GenericRecord;\n-import org.apache.pinot.spi.data.FieldSpec;\n import org.apache.pinot.spi.data.Schema;\n import org.apache.pinot.spi.data.readers.GenericRow;\n import org.apache.pinot.spi.data.readers.RecordReader;\n import org.apache.pinot.spi.data.readers.RecordReaderConfig;\n-import org.apache.pinot.spi.data.readers.RecordReaderUtils;\n+import org.apache.pinot.spi.data.function.evaluators.SourceFieldNameExtractor;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzIzNjAyOQ=="}, "originalCommit": {"oid": "865922d017e139b54ab245b84e33d1a495f6f978"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzgzNDg4OA==", "bodyText": "Done. Created SchemaFieldExtractorUtils in pinot-spi under utils", "url": "https://github.com/apache/pinot/pull/5238#discussion_r407834888", "createdAt": "2020-04-14T02:51:31Z", "author": {"login": "npawar"}, "path": "pinot-plugins/pinot-input-format/pinot-avro-base/src/main/java/org/apache/pinot/plugin/inputformat/avro/AvroRecordReader.java", "diffHunk": "@@ -24,12 +24,11 @@\n import javax.annotation.Nullable;\n import org.apache.avro.file.DataFileStream;\n import org.apache.avro.generic.GenericRecord;\n-import org.apache.pinot.spi.data.FieldSpec;\n import org.apache.pinot.spi.data.Schema;\n import org.apache.pinot.spi.data.readers.GenericRow;\n import org.apache.pinot.spi.data.readers.RecordReader;\n import org.apache.pinot.spi.data.readers.RecordReaderConfig;\n-import org.apache.pinot.spi.data.readers.RecordReaderUtils;\n+import org.apache.pinot.spi.data.function.evaluators.SourceFieldNameExtractor;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzIzNjAyOQ=="}, "originalCommit": {"oid": "865922d017e139b54ab245b84e33d1a495f6f978"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNzkxNjU4OnYy", "diffSide": "RIGHT", "path": "pinot-plugins/pinot-input-format/pinot-avro-base/src/main/java/org/apache/pinot/plugin/inputformat/avro/AvroUtils.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMlQxODozNDo0NFrOGEXunQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QxODo0Nzo0OVrOGEw2fA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzIzNjI1Mw==", "bodyText": "is this specific to Avro?", "url": "https://github.com/apache/pinot/pull/5238#discussion_r407236253", "createdAt": "2020-04-12T18:34:44Z", "author": {"login": "kishoreg"}, "path": "pinot-plugins/pinot-input-format/pinot-avro-base/src/main/java/org/apache/pinot/plugin/inputformat/avro/AvroUtils.java", "diffHunk": "@@ -368,6 +341,21 @@ public static Object handleMultiValue(@Nullable Collection values) {\n     for (Object value : values) {\n       list.add(handleSingleValue(value));\n     }\n-    return list;\n+    return RecordReaderUtils.convertMultiValue(list);\n+  }\n+\n+  /**\n+   * Converts the values withing the map to single-valued values\n+   */\n+  public static Object handleMap(@Nullable Map map) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "865922d017e139b54ab245b84e33d1a495f6f978"}, "originalPosition": 111}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzY0Nzg2OA==", "bodyText": "Right now, yes. It is designed based off what was done in AvroUtils to handle the map", "url": "https://github.com/apache/pinot/pull/5238#discussion_r407647868", "createdAt": "2020-04-13T18:47:49Z", "author": {"login": "npawar"}, "path": "pinot-plugins/pinot-input-format/pinot-avro-base/src/main/java/org/apache/pinot/plugin/inputformat/avro/AvroUtils.java", "diffHunk": "@@ -368,6 +341,21 @@ public static Object handleMultiValue(@Nullable Collection values) {\n     for (Object value : values) {\n       list.add(handleSingleValue(value));\n     }\n-    return list;\n+    return RecordReaderUtils.convertMultiValue(list);\n+  }\n+\n+  /**\n+   * Converts the values withing the map to single-valued values\n+   */\n+  public static Object handleMap(@Nullable Map map) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzIzNjI1Mw=="}, "originalCommit": {"oid": "865922d017e139b54ab245b84e33d1a495f6f978"}, "originalPosition": 111}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNzkyMTcwOnYy", "diffSide": "RIGHT", "path": "pinot-spi/src/main/java/org/apache/pinot/spi/data/function/evaluators/GroovyExpressionEvaluator.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMlQxODo0MTowM1rOGEXxIA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQwMjo1MTo1NVrOGE8Rhw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzIzNjg5Ng==", "bodyText": "will be nice to get perf on this and possibly optimize it by caching the compiled script. see this https://www.tothenew.com/blog/compile-groovyscript-at-runtime-allow-caching-of-compiled-source-to-avoid-recompilation-at-runtime-using-groovyclassloader/.\nWe can do this in another PR", "url": "https://github.com/apache/pinot/pull/5238#discussion_r407236896", "createdAt": "2020-04-12T18:41:03Z", "author": {"login": "kishoreg"}, "path": "pinot-spi/src/main/java/org/apache/pinot/spi/data/function/evaluators/GroovyExpressionEvaluator.java", "diffHunk": "@@ -0,0 +1,99 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.spi.data.function.evaluators;\n+\n+import com.google.common.base.Splitter;\n+import groovy.lang.Binding;\n+import groovy.lang.GroovyShell;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+import org.apache.pinot.spi.data.readers.GenericRow;\n+\n+\n+/**\n+ * An {@link ExpressionEvaluator} for evaluating schema transform expressions written in Groovy.\n+ * GroovyShell is used to execute expressions.\n+ *\n+ * The transform expression must follow the convention Groovy({expression}, arguments1, argument2...)\n+ * For example:\n+ * \"dimensionFieldSpecs\": [\n+ *     {\n+ *       \"name\": \"fullName\",\n+ *       \"dataType\": \"STRING\",\n+ *       \"transformFunction\": \"Groovy({firstName+' '+lastName}, firstName, lastName)\"\n+ *     }\n+ *  ]\n+ */\n+public class GroovyExpressionEvaluator implements ExpressionEvaluator {\n+\n+  private static final String GROOVY_EXPRESSION_PREFIX = \"Groovy\";\n+  private static final String GROOVY_FUNCTION_REGEX = \"Groovy\\\\(\\\\{(?<script>.+)}(,(?<arguments>.+))?\\\\)\";\n+  private static final Pattern GROOVY_FUNCTION_PATTERN = Pattern.compile(GROOVY_FUNCTION_REGEX, Pattern.CASE_INSENSITIVE);\n+  private static final String ARGUMENTS_GROUP_NAME = \"arguments\";\n+  private static final String SCRIPT_GROUP_NAME = \"script\";\n+  private static final String ARGUMENTS_SEPARATOR = \",\";\n+\n+  private List<String> _arguments;\n+  private String _script;\n+\n+  public GroovyExpressionEvaluator(String transformExpression) {\n+    Matcher matcher = GROOVY_FUNCTION_PATTERN.matcher(transformExpression);\n+    if (matcher.matches()) {\n+      _script = matcher.group(SCRIPT_GROUP_NAME);\n+\n+      String arguments = matcher.group(ARGUMENTS_GROUP_NAME);\n+      if (arguments != null) {\n+        _arguments = Splitter.on(ARGUMENTS_SEPARATOR).trimResults().splitToList(arguments);\n+      } else {\n+        _arguments = Collections.emptyList();\n+      }\n+    }\n+  }\n+\n+  public static String getGroovyExpressionPrefix() {\n+    return GROOVY_EXPRESSION_PREFIX;\n+  }\n+\n+  @Override\n+  public List<String> getArguments() {\n+    return _arguments;\n+  }\n+\n+  @Override\n+  public Object evaluate(GenericRow genericRow) {\n+    Map<String, Object> params = new HashMap<>();\n+    for (String argument : _arguments) {\n+      params.put(argument, genericRow.getValue(argument));\n+    }\n+    if (params.containsValue(null)) { // TODO: disallow evaluation of any of the params is null? Or give complete control to function?\n+      return null;\n+    } else {\n+      Binding binding = new Binding();\n+      for (String argument : _arguments) {\n+        binding.setVariable(argument, params.get(argument));\n+      }\n+      GroovyShell shell = new GroovyShell(binding);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "865922d017e139b54ab245b84e33d1a495f6f978"}, "originalPosition": 95}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzY4NTcwMA==", "bodyText": "+1", "url": "https://github.com/apache/pinot/pull/5238#discussion_r407685700", "createdAt": "2020-04-13T19:58:49Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-spi/src/main/java/org/apache/pinot/spi/data/function/evaluators/GroovyExpressionEvaluator.java", "diffHunk": "@@ -0,0 +1,99 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.spi.data.function.evaluators;\n+\n+import com.google.common.base.Splitter;\n+import groovy.lang.Binding;\n+import groovy.lang.GroovyShell;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+import org.apache.pinot.spi.data.readers.GenericRow;\n+\n+\n+/**\n+ * An {@link ExpressionEvaluator} for evaluating schema transform expressions written in Groovy.\n+ * GroovyShell is used to execute expressions.\n+ *\n+ * The transform expression must follow the convention Groovy({expression}, arguments1, argument2...)\n+ * For example:\n+ * \"dimensionFieldSpecs\": [\n+ *     {\n+ *       \"name\": \"fullName\",\n+ *       \"dataType\": \"STRING\",\n+ *       \"transformFunction\": \"Groovy({firstName+' '+lastName}, firstName, lastName)\"\n+ *     }\n+ *  ]\n+ */\n+public class GroovyExpressionEvaluator implements ExpressionEvaluator {\n+\n+  private static final String GROOVY_EXPRESSION_PREFIX = \"Groovy\";\n+  private static final String GROOVY_FUNCTION_REGEX = \"Groovy\\\\(\\\\{(?<script>.+)}(,(?<arguments>.+))?\\\\)\";\n+  private static final Pattern GROOVY_FUNCTION_PATTERN = Pattern.compile(GROOVY_FUNCTION_REGEX, Pattern.CASE_INSENSITIVE);\n+  private static final String ARGUMENTS_GROUP_NAME = \"arguments\";\n+  private static final String SCRIPT_GROUP_NAME = \"script\";\n+  private static final String ARGUMENTS_SEPARATOR = \",\";\n+\n+  private List<String> _arguments;\n+  private String _script;\n+\n+  public GroovyExpressionEvaluator(String transformExpression) {\n+    Matcher matcher = GROOVY_FUNCTION_PATTERN.matcher(transformExpression);\n+    if (matcher.matches()) {\n+      _script = matcher.group(SCRIPT_GROUP_NAME);\n+\n+      String arguments = matcher.group(ARGUMENTS_GROUP_NAME);\n+      if (arguments != null) {\n+        _arguments = Splitter.on(ARGUMENTS_SEPARATOR).trimResults().splitToList(arguments);\n+      } else {\n+        _arguments = Collections.emptyList();\n+      }\n+    }\n+  }\n+\n+  public static String getGroovyExpressionPrefix() {\n+    return GROOVY_EXPRESSION_PREFIX;\n+  }\n+\n+  @Override\n+  public List<String> getArguments() {\n+    return _arguments;\n+  }\n+\n+  @Override\n+  public Object evaluate(GenericRow genericRow) {\n+    Map<String, Object> params = new HashMap<>();\n+    for (String argument : _arguments) {\n+      params.put(argument, genericRow.getValue(argument));\n+    }\n+    if (params.containsValue(null)) { // TODO: disallow evaluation of any of the params is null? Or give complete control to function?\n+      return null;\n+    } else {\n+      Binding binding = new Binding();\n+      for (String argument : _arguments) {\n+        binding.setVariable(argument, params.get(argument));\n+      }\n+      GroovyShell shell = new GroovyShell(binding);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzIzNjg5Ng=="}, "originalCommit": {"oid": "865922d017e139b54ab245b84e33d1a495f6f978"}, "originalPosition": 95}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzgzNTAxNQ==", "bodyText": "Will do this in the immediate next step", "url": "https://github.com/apache/pinot/pull/5238#discussion_r407835015", "createdAt": "2020-04-14T02:51:55Z", "author": {"login": "npawar"}, "path": "pinot-spi/src/main/java/org/apache/pinot/spi/data/function/evaluators/GroovyExpressionEvaluator.java", "diffHunk": "@@ -0,0 +1,99 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.spi.data.function.evaluators;\n+\n+import com.google.common.base.Splitter;\n+import groovy.lang.Binding;\n+import groovy.lang.GroovyShell;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+import org.apache.pinot.spi.data.readers.GenericRow;\n+\n+\n+/**\n+ * An {@link ExpressionEvaluator} for evaluating schema transform expressions written in Groovy.\n+ * GroovyShell is used to execute expressions.\n+ *\n+ * The transform expression must follow the convention Groovy({expression}, arguments1, argument2...)\n+ * For example:\n+ * \"dimensionFieldSpecs\": [\n+ *     {\n+ *       \"name\": \"fullName\",\n+ *       \"dataType\": \"STRING\",\n+ *       \"transformFunction\": \"Groovy({firstName+' '+lastName}, firstName, lastName)\"\n+ *     }\n+ *  ]\n+ */\n+public class GroovyExpressionEvaluator implements ExpressionEvaluator {\n+\n+  private static final String GROOVY_EXPRESSION_PREFIX = \"Groovy\";\n+  private static final String GROOVY_FUNCTION_REGEX = \"Groovy\\\\(\\\\{(?<script>.+)}(,(?<arguments>.+))?\\\\)\";\n+  private static final Pattern GROOVY_FUNCTION_PATTERN = Pattern.compile(GROOVY_FUNCTION_REGEX, Pattern.CASE_INSENSITIVE);\n+  private static final String ARGUMENTS_GROUP_NAME = \"arguments\";\n+  private static final String SCRIPT_GROUP_NAME = \"script\";\n+  private static final String ARGUMENTS_SEPARATOR = \",\";\n+\n+  private List<String> _arguments;\n+  private String _script;\n+\n+  public GroovyExpressionEvaluator(String transformExpression) {\n+    Matcher matcher = GROOVY_FUNCTION_PATTERN.matcher(transformExpression);\n+    if (matcher.matches()) {\n+      _script = matcher.group(SCRIPT_GROUP_NAME);\n+\n+      String arguments = matcher.group(ARGUMENTS_GROUP_NAME);\n+      if (arguments != null) {\n+        _arguments = Splitter.on(ARGUMENTS_SEPARATOR).trimResults().splitToList(arguments);\n+      } else {\n+        _arguments = Collections.emptyList();\n+      }\n+    }\n+  }\n+\n+  public static String getGroovyExpressionPrefix() {\n+    return GROOVY_EXPRESSION_PREFIX;\n+  }\n+\n+  @Override\n+  public List<String> getArguments() {\n+    return _arguments;\n+  }\n+\n+  @Override\n+  public Object evaluate(GenericRow genericRow) {\n+    Map<String, Object> params = new HashMap<>();\n+    for (String argument : _arguments) {\n+      params.put(argument, genericRow.getValue(argument));\n+    }\n+    if (params.containsValue(null)) { // TODO: disallow evaluation of any of the params is null? Or give complete control to function?\n+      return null;\n+    } else {\n+      Binding binding = new Binding();\n+      for (String argument : _arguments) {\n+        binding.setVariable(argument, params.get(argument));\n+      }\n+      GroovyShell shell = new GroovyShell(binding);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzIzNjg5Ng=="}, "originalCommit": {"oid": "865922d017e139b54ab245b84e33d1a495f6f978"}, "originalPosition": 95}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNzkyMTkyOnYy", "diffSide": "RIGHT", "path": "pinot-spi/src/main/java/org/apache/pinot/spi/data/function/evaluators/SourceFieldNameExtractor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMlQxODo0MTozNFrOGEXxSA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMlQxODo0MTozNFrOGEXxSA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzIzNjkzNg==", "bodyText": "we can merge this into Schema utils?", "url": "https://github.com/apache/pinot/pull/5238#discussion_r407236936", "createdAt": "2020-04-12T18:41:34Z", "author": {"login": "kishoreg"}, "path": "pinot-spi/src/main/java/org/apache/pinot/spi/data/function/evaluators/SourceFieldNameExtractor.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.spi.data.function.evaluators;\n+\n+import com.google.common.collect.Lists;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+import org.apache.pinot.spi.data.FieldSpec;\n+import org.apache.pinot.spi.data.Schema;\n+\n+\n+/**\n+ * Extracts names of the source fields from the schema\n+ */\n+public class SourceFieldNameExtractor {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "865922d017e139b54ab245b84e33d1a495f6f978"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNzkyMjQzOnYy", "diffSide": "RIGHT", "path": "pinot-spi/src/main/java/org/apache/pinot/spi/data/function/evaluators/SourceFieldNameExtractor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMlQxODo0MjoxNFrOGEXxig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QyMToyMjo1OVrOGE11og==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzIzNzAwMg==", "bodyText": "is there a better place for this constant?", "url": "https://github.com/apache/pinot/pull/5238#discussion_r407237002", "createdAt": "2020-04-12T18:42:14Z", "author": {"login": "kishoreg"}, "path": "pinot-spi/src/main/java/org/apache/pinot/spi/data/function/evaluators/SourceFieldNameExtractor.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.spi.data.function.evaluators;\n+\n+import com.google.common.collect.Lists;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+import org.apache.pinot.spi.data.FieldSpec;\n+import org.apache.pinot.spi.data.Schema;\n+\n+\n+/**\n+ * Extracts names of the source fields from the schema\n+ */\n+public class SourceFieldNameExtractor {\n+  public static final String MAP_KEY_COLUMN_SUFFIX = \"__KEYS\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "865922d017e139b54ab245b84e33d1a495f6f978"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzcyOTU3MA==", "bodyText": "I felt this was the best place, as this is information needed to deduce the source column names", "url": "https://github.com/apache/pinot/pull/5238#discussion_r407729570", "createdAt": "2020-04-13T21:22:59Z", "author": {"login": "npawar"}, "path": "pinot-spi/src/main/java/org/apache/pinot/spi/data/function/evaluators/SourceFieldNameExtractor.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.spi.data.function.evaluators;\n+\n+import com.google.common.collect.Lists;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+import org.apache.pinot.spi.data.FieldSpec;\n+import org.apache.pinot.spi.data.Schema;\n+\n+\n+/**\n+ * Extracts names of the source fields from the schema\n+ */\n+public class SourceFieldNameExtractor {\n+  public static final String MAP_KEY_COLUMN_SUFFIX = \"__KEYS\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzIzNzAwMg=="}, "originalCommit": {"oid": "865922d017e139b54ab245b84e33d1a495f6f978"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNzkyMzMxOnYy", "diffSide": "RIGHT", "path": "pinot-spi/src/main/java/org/apache/pinot/spi/data/readers/RecordExtractor.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMlQxODo0MzoyMlrOGEXx_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQwMjo1MjoxM1rOGE8R4Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzIzNzExOA==", "bodyText": "Nice to extractor interface decoupled from Schema", "url": "https://github.com/apache/pinot/pull/5238#discussion_r407237118", "createdAt": "2020-04-12T18:43:22Z", "author": {"login": "kishoreg"}, "path": "pinot-spi/src/main/java/org/apache/pinot/spi/data/readers/RecordExtractor.java", "diffHunk": "@@ -18,16 +18,28 @@\n  */\n package org.apache.pinot.spi.data.readers;\n \n-import org.apache.pinot.spi.data.Schema;\n+import java.util.List;\n \n+\n+/**\n+ * Extracts fields from input records\n+ * @param <T> The format of the input record\n+ */\n public interface RecordExtractor<T> {\n+\n+  /**\n+   * Initialize the record extractor with its config\n+   */\n+  default void init(RecordExtractorConfig recordExtractorConfig) {\n+  }\n+\n   /**\n-   * TODO Add text to this javadoc\n+   * Extracts fields as listed in the sourceFieldNames from the given input record and sets them into the GenericRow\n    *\n-   * @param schema\n-   * @param from\n-   * @param to\n-   * @return\n+   * @param sourceFieldNames List of field names to extract from the provided input record\n+   * @param from The input record\n+   * @param to The output GenericRow\n+   * @return The output GenericRow\n    */\n-  GenericRow extract(Schema schema, T from, GenericRow to);\n+  GenericRow extract(List<String> sourceFieldNames, T from, GenericRow to);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "865922d017e139b54ab245b84e33d1a495f6f978"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzY3ODA5MA==", "bodyText": "I would recommend putting source fields into the init and rename it to fields for simplicity:\n  void init(List<String> fields, @Nullable RecordExtractorConfig recordExtractorConfig);", "url": "https://github.com/apache/pinot/pull/5238#discussion_r407678090", "createdAt": "2020-04-13T19:44:36Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-spi/src/main/java/org/apache/pinot/spi/data/readers/RecordExtractor.java", "diffHunk": "@@ -18,16 +18,28 @@\n  */\n package org.apache.pinot.spi.data.readers;\n \n-import org.apache.pinot.spi.data.Schema;\n+import java.util.List;\n \n+\n+/**\n+ * Extracts fields from input records\n+ * @param <T> The format of the input record\n+ */\n public interface RecordExtractor<T> {\n+\n+  /**\n+   * Initialize the record extractor with its config\n+   */\n+  default void init(RecordExtractorConfig recordExtractorConfig) {\n+  }\n+\n   /**\n-   * TODO Add text to this javadoc\n+   * Extracts fields as listed in the sourceFieldNames from the given input record and sets them into the GenericRow\n    *\n-   * @param schema\n-   * @param from\n-   * @param to\n-   * @return\n+   * @param sourceFieldNames List of field names to extract from the provided input record\n+   * @param from The input record\n+   * @param to The output GenericRow\n+   * @return The output GenericRow\n    */\n-  GenericRow extract(Schema schema, T from, GenericRow to);\n+  GenericRow extract(List<String> sourceFieldNames, T from, GenericRow to);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzIzNzExOA=="}, "originalCommit": {"oid": "865922d017e139b54ab245b84e33d1a495f6f978"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzgwNjAzOA==", "bodyText": "This comment is not addressed", "url": "https://github.com/apache/pinot/pull/5238#discussion_r407806038", "createdAt": "2020-04-14T01:05:55Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-spi/src/main/java/org/apache/pinot/spi/data/readers/RecordExtractor.java", "diffHunk": "@@ -18,16 +18,28 @@\n  */\n package org.apache.pinot.spi.data.readers;\n \n-import org.apache.pinot.spi.data.Schema;\n+import java.util.List;\n \n+\n+/**\n+ * Extracts fields from input records\n+ * @param <T> The format of the input record\n+ */\n public interface RecordExtractor<T> {\n+\n+  /**\n+   * Initialize the record extractor with its config\n+   */\n+  default void init(RecordExtractorConfig recordExtractorConfig) {\n+  }\n+\n   /**\n-   * TODO Add text to this javadoc\n+   * Extracts fields as listed in the sourceFieldNames from the given input record and sets them into the GenericRow\n    *\n-   * @param schema\n-   * @param from\n-   * @param to\n-   * @return\n+   * @param sourceFieldNames List of field names to extract from the provided input record\n+   * @param from The input record\n+   * @param to The output GenericRow\n+   * @return The output GenericRow\n    */\n-  GenericRow extract(Schema schema, T from, GenericRow to);\n+  GenericRow extract(List<String> sourceFieldNames, T from, GenericRow to);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzIzNzExOA=="}, "originalCommit": {"oid": "865922d017e139b54ab245b84e33d1a495f6f978"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzgzNTEwNQ==", "bodyText": "Done", "url": "https://github.com/apache/pinot/pull/5238#discussion_r407835105", "createdAt": "2020-04-14T02:52:13Z", "author": {"login": "npawar"}, "path": "pinot-spi/src/main/java/org/apache/pinot/spi/data/readers/RecordExtractor.java", "diffHunk": "@@ -18,16 +18,28 @@\n  */\n package org.apache.pinot.spi.data.readers;\n \n-import org.apache.pinot.spi.data.Schema;\n+import java.util.List;\n \n+\n+/**\n+ * Extracts fields from input records\n+ * @param <T> The format of the input record\n+ */\n public interface RecordExtractor<T> {\n+\n+  /**\n+   * Initialize the record extractor with its config\n+   */\n+  default void init(RecordExtractorConfig recordExtractorConfig) {\n+  }\n+\n   /**\n-   * TODO Add text to this javadoc\n+   * Extracts fields as listed in the sourceFieldNames from the given input record and sets them into the GenericRow\n    *\n-   * @param schema\n-   * @param from\n-   * @param to\n-   * @return\n+   * @param sourceFieldNames List of field names to extract from the provided input record\n+   * @param from The input record\n+   * @param to The output GenericRow\n+   * @return The output GenericRow\n    */\n-  GenericRow extract(Schema schema, T from, GenericRow to);\n+  GenericRow extract(List<String> sourceFieldNames, T from, GenericRow to);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzIzNzExOA=="}, "originalCommit": {"oid": "865922d017e139b54ab245b84e33d1a495f6f978"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzMDc0NDc4OnYy", "diffSide": "RIGHT", "path": "pinot-common/src/test/java/org/apache/pinot/common/utils/time/TimeConverterTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QxOTowNjoxMVrOGExeRg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QxOTowNjoxMVrOGExeRg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzY1ODA1NA==", "bodyText": "(nit) revert?", "url": "https://github.com/apache/pinot/pull/5238#discussion_r407658054", "createdAt": "2020-04-13T19:06:11Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-common/src/test/java/org/apache/pinot/common/utils/time/TimeConverterTest.java", "diffHunk": "@@ -21,6 +21,7 @@\n import java.util.concurrent.TimeUnit;\n import org.apache.pinot.spi.data.FieldSpec;\n import org.apache.pinot.spi.data.TimeGranularitySpec;\n+import org.apache.pinot.spi.utils.TimeConverter;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "865922d017e139b54ab245b84e33d1a495f6f978"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzMDc3Mzg5OnYy", "diffSide": "RIGHT", "path": "pinot-core/src/main/java/org/apache/pinot/core/data/recordtransformer/CompositeTransformer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QxOToxNDo1NlrOGExwMw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QyMToyMDo0NlrOGE1xbg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzY2MjY0Mw==", "bodyText": "Should be okay as we only extract the needed columns, then we can reuse the record", "url": "https://github.com/apache/pinot/pull/5238#discussion_r407662643", "createdAt": "2020-04-13T19:14:56Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/data/recordtransformer/CompositeTransformer.java", "diffHunk": "@@ -48,9 +47,11 @@\n    * </ul>\n    */\n   public static CompositeTransformer getDefaultTransformer(Schema schema) {\n+    // TODO: ExpressionTransformer contains record with source columns, and after transformation, the record has source + destination columns.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "865922d017e139b54ab245b84e33d1a495f6f978"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzcyODQ5NA==", "bodyText": "Thanks, removed the comment", "url": "https://github.com/apache/pinot/pull/5238#discussion_r407728494", "createdAt": "2020-04-13T21:20:46Z", "author": {"login": "npawar"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/data/recordtransformer/CompositeTransformer.java", "diffHunk": "@@ -48,9 +47,11 @@\n    * </ul>\n    */\n   public static CompositeTransformer getDefaultTransformer(Schema schema) {\n+    // TODO: ExpressionTransformer contains record with source columns, and after transformation, the record has source + destination columns.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzY2MjY0Mw=="}, "originalCommit": {"oid": "865922d017e139b54ab245b84e33d1a495f6f978"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzMDc4NzIwOnYy", "diffSide": "RIGHT", "path": "pinot-spi/src/main/java/org/apache/pinot/spi/data/function/evaluators/ExpressionEvaluatorFactory.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QxOToxODo1OVrOGEx4nQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QxOToxODo1OVrOGEx4nQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzY2NDc5Nw==", "bodyText": "Annotate as nullable for the return value", "url": "https://github.com/apache/pinot/pull/5238#discussion_r407664797", "createdAt": "2020-04-13T19:18:59Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-spi/src/main/java/org/apache/pinot/spi/data/function/evaluators/ExpressionEvaluatorFactory.java", "diffHunk": "@@ -0,0 +1,104 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.spi.data.function.evaluators;\n+\n+import org.apache.pinot.spi.data.FieldSpec;\n+import org.apache.pinot.spi.data.TimeFieldSpec;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+\n+/**\n+ * Factory class to create an {@link ExpressionEvaluator} for the field spec based on the {@link FieldSpec#getTransformFunction()}\n+ */\n+public class ExpressionEvaluatorFactory {\n+\n+  private static final Logger LOGGER = LoggerFactory.getLogger(ExpressionEvaluatorFactory.class);\n+\n+  private ExpressionEvaluatorFactory() {\n+\n+  }\n+\n+  /**\n+   * Creates the {@link ExpressionEvaluator} for the given field spec\n+   *\n+   * 1. If transform expression is defined, use it to create {@link ExpressionEvaluator}\n+   * 2. For TIME column, {@link DefaultTimeSpecEvaluator} for backward compatible handling of time spec. This is needed until we migrate to {@link org.apache.pinot.spi.data.DateTimeFieldSpec}\n+   * 3. For columns ending with __KEYS or __VALUES (used for interpreting Map column in Avro), create default functions for handing the Map\n+   * 4. Return null, if none of the above\n+   */\n+  public static ExpressionEvaluator getExpressionEvaluator(FieldSpec fieldSpec) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "276fba0688677fc04893d25d3fc237fd3cf6ea68"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzMDc5Njc2OnYy", "diffSide": "RIGHT", "path": "pinot-integration-tests/src/test/java/org/apache/pinot/integration/tests/ClusterTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QxOToyMTo0NVrOGEx-lA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QxOToyMTo0NVrOGEx-lA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzY2NjMyNA==", "bodyText": "(nit) private?", "url": "https://github.com/apache/pinot/pull/5238#discussion_r407666324", "createdAt": "2020-04-13T19:21:45Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-integration-tests/src/test/java/org/apache/pinot/integration/tests/ClusterTest.java", "diffHunk": "@@ -346,8 +347,8 @@ protected void dropOfflineTable(String tableName)\n     private static final Logger LOGGER = LoggerFactory.getLogger(AvroFileSchemaKafkaAvroMessageDecoder.class);\n     public static File avroFile;\n     private org.apache.avro.Schema _avroSchema;\n-    private Schema _pinotSchema;\n-    private RecordExtractor<GenericData.Record> _recordExtractor;\n+    List<String> _sourceFieldNames;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "276fba0688677fc04893d25d3fc237fd3cf6ea68"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzMDgxODI0OnYy", "diffSide": "RIGHT", "path": "pinot-spi/src/main/java/org/apache/pinot/spi/data/readers/RecordReaderUtils.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QxOToyODoxNVrOGEyL2w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QxOToyODoxNVrOGEyL2w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzY2OTcyMw==", "bodyText": "(nit) revert?", "url": "https://github.com/apache/pinot/pull/5238#discussion_r407669723", "createdAt": "2020-04-13T19:28:15Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-spi/src/main/java/org/apache/pinot/spi/data/readers/RecordReaderUtils.java", "diffHunk": "@@ -105,6 +136,8 @@ public static Object convert(FieldSpec fieldSpec, @Nullable Object value) {\n     }\n   }\n \n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "276fba0688677fc04893d25d3fc237fd3cf6ea68"}, "originalPosition": 110}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzMDgyMTQ0OnYy", "diffSide": "RIGHT", "path": "pinot-spi/src/main/java/org/apache/pinot/spi/data/readers/RecordReaderUtils.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QxOToyOToxNVrOGEyN0A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QxOToyOToxNVrOGEyN0A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzY3MDIyNA==", "bodyText": "Annotate both value and return as nullable, same for other methods", "url": "https://github.com/apache/pinot/pull/5238#discussion_r407670224", "createdAt": "2020-04-13T19:29:15Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-spi/src/main/java/org/apache/pinot/spi/data/readers/RecordReaderUtils.java", "diffHunk": "@@ -67,31 +63,66 @@ public static InputStream getInputStream(File dataFile)\n   }\n \n   /**\n-   * Extracts all field specs from the given schema.\n-   * <p>For time field spec:\n-   * <ul>\n-   *   <li>If incoming and outgoing time column name are the same, use incoming time field spec</li>\n-   *   <li>If incoming and outgoing time column name are different, put both of them as time field spec</li>\n-   *   <li>\n-   *     We keep both incoming and outgoing time column to handle cases where the input file contains time values that\n-   *     are already converted\n-   *   </li>\n-   * </ul>\n+   * Converts the value to a multi-values value or a single values value\n    */\n-  public static List<FieldSpec> extractFieldSpecs(Schema schema) {\n-    List<FieldSpec> fieldSpecs = new ArrayList<>();\n-    for (FieldSpec fieldSpec : schema.getAllFieldSpecs()) {\n-      if (fieldSpec.getFieldType() == FieldSpec.FieldType.TIME) {\n-        TimeFieldSpec timeFieldSpec = (TimeFieldSpec) fieldSpec;\n-        fieldSpecs.add(new TimeFieldSpec(timeFieldSpec.getIncomingGranularitySpec()));\n-        if (!timeFieldSpec.getOutgoingTimeColumnName().equals(timeFieldSpec.getIncomingTimeColumnName())) {\n-          fieldSpecs.add(new TimeFieldSpec(timeFieldSpec.getOutgoingGranularitySpec()));\n-        }\n-      } else {\n-        fieldSpecs.add(fieldSpec);\n+  public static Object convert(Object value) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "276fba0688677fc04893d25d3fc237fd3cf6ea68"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzMDgzMzIxOnYy", "diffSide": "RIGHT", "path": "pinot-spi/src/test/java/org/apache/pinot/spi/data/function/evaluators/GroovyExpressionEvaluatorTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QxOTozMjo0MlrOGEyVDw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QyMToyMToxOVrOGE1yhg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzY3MjA3OQ==", "bodyText": "(nit) Several new files are lacking the empty line", "url": "https://github.com/apache/pinot/pull/5238#discussion_r407672079", "createdAt": "2020-04-13T19:32:42Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-spi/src/test/java/org/apache/pinot/spi/data/function/evaluators/GroovyExpressionEvaluatorTest.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.spi.data.function.evaluators;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import org.apache.pinot.spi.data.readers.GenericRow;\n+import org.testng.Assert;\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Test;\n+import org.testng.collections.Lists;\n+\n+\n+/**\n+ * Tests Groovy functions for transforming schema columns\n+ */\n+public class GroovyExpressionEvaluatorTest {\n+\n+  @Test(dataProvider = \"groovyFunctionEvaluationDataProvider\")\n+  public void testGroovyFunctionEvaluation(String transformFunction, List<String> arguments, GenericRow genericRow, Object expectedResult) {\n+\n+    GroovyExpressionEvaluator groovyExpressionEvaluator = new GroovyExpressionEvaluator(transformFunction);\n+    Assert.assertEquals(groovyExpressionEvaluator.getArguments(), arguments);\n+\n+    Object result = groovyExpressionEvaluator.evaluate(genericRow);\n+    Assert.assertEquals(result, expectedResult);\n+  }\n+\n+  @DataProvider(name = \"groovyFunctionEvaluationDataProvider\")\n+  public Object[][] groovyFunctionEvaluationDataProvider() {\n+\n+    List<Object[]> entries = new ArrayList<>();\n+\n+    GenericRow genericRow1 = new GenericRow();\n+    genericRow1.putValue(\"userID\", 101);\n+    entries.add(new Object[]{\"Groovy({userID}, userID)\", Lists.newArrayList(\"userID\"), genericRow1, 101});\n+\n+    GenericRow genericRow2 = new GenericRow();\n+    Map<String, Integer> map1 = new HashMap<>();\n+    map1.put(\"def\", 10);\n+    map1.put(\"xyz\", 30);\n+    map1.put(\"abc\", 40);\n+    genericRow2.putValue(\"map1\", map1);\n+    entries.add(new Object[]{\"Groovy({map1.sort()*.value}, map1)\", Lists.newArrayList(\"map1\"), genericRow2, Lists.newArrayList(40, 10, 30)});\n+\n+    GenericRow genericRow3 = new GenericRow();\n+    genericRow3.putValue(\"campaigns\", new Object[]{3, 2});\n+    entries.add(new Object[]{\"Groovy({campaigns.max{ it.toBigDecimal() }}, campaigns)\", Lists.newArrayList(\"campaigns\"), genericRow3, 3});\n+\n+    GenericRow genericRow4 = new GenericRow();\n+    genericRow4.putValue(\"millis\", \"1584040201500\");\n+    entries.add(new Object[]{\"Groovy({(long)(Long.parseLong(millis)/(1000*60*60))}, millis)\", Lists.newArrayList(\"millis\"), genericRow4, 440011L});\n+\n+    GenericRow genericRow5 = new GenericRow();\n+    genericRow5.putValue(\"firstName\", \"John\");\n+    genericRow5.putValue(\"lastName\", \"Doe\");\n+    entries.add(new Object[]{\"Groovy({firstName + ' ' + lastName}, firstName, lastName)\", Lists.newArrayList(\"firstName\", \"lastName\"), genericRow5, \"John Doe\"});\n+\n+    GenericRow genericRow6 = new GenericRow();\n+    genericRow6.putValue(\"eventType\", \"IMPRESSION\");\n+    entries.add(new Object[]{\"Groovy({eventType == 'IMPRESSION' ? 1: 0}, eventType)\", Lists.newArrayList(\"eventType\"), genericRow6, 1});\n+\n+    GenericRow genericRow7 = new GenericRow();\n+    genericRow7.putValue(\"eventType\", \"CLICK\");\n+    entries.add(new Object[]{\"Groovy({eventType == 'IMPRESSION' ? 1: 0}, eventType)\", Lists.newArrayList(\"eventType\"), genericRow7, 0});\n+\n+    return entries.toArray(new Object[entries.size()][]);\n+  }\n+\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "276fba0688677fc04893d25d3fc237fd3cf6ea68"}, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzcyODc3NA==", "bodyText": "fixed all", "url": "https://github.com/apache/pinot/pull/5238#discussion_r407728774", "createdAt": "2020-04-13T21:21:19Z", "author": {"login": "npawar"}, "path": "pinot-spi/src/test/java/org/apache/pinot/spi/data/function/evaluators/GroovyExpressionEvaluatorTest.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.spi.data.function.evaluators;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import org.apache.pinot.spi.data.readers.GenericRow;\n+import org.testng.Assert;\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Test;\n+import org.testng.collections.Lists;\n+\n+\n+/**\n+ * Tests Groovy functions for transforming schema columns\n+ */\n+public class GroovyExpressionEvaluatorTest {\n+\n+  @Test(dataProvider = \"groovyFunctionEvaluationDataProvider\")\n+  public void testGroovyFunctionEvaluation(String transformFunction, List<String> arguments, GenericRow genericRow, Object expectedResult) {\n+\n+    GroovyExpressionEvaluator groovyExpressionEvaluator = new GroovyExpressionEvaluator(transformFunction);\n+    Assert.assertEquals(groovyExpressionEvaluator.getArguments(), arguments);\n+\n+    Object result = groovyExpressionEvaluator.evaluate(genericRow);\n+    Assert.assertEquals(result, expectedResult);\n+  }\n+\n+  @DataProvider(name = \"groovyFunctionEvaluationDataProvider\")\n+  public Object[][] groovyFunctionEvaluationDataProvider() {\n+\n+    List<Object[]> entries = new ArrayList<>();\n+\n+    GenericRow genericRow1 = new GenericRow();\n+    genericRow1.putValue(\"userID\", 101);\n+    entries.add(new Object[]{\"Groovy({userID}, userID)\", Lists.newArrayList(\"userID\"), genericRow1, 101});\n+\n+    GenericRow genericRow2 = new GenericRow();\n+    Map<String, Integer> map1 = new HashMap<>();\n+    map1.put(\"def\", 10);\n+    map1.put(\"xyz\", 30);\n+    map1.put(\"abc\", 40);\n+    genericRow2.putValue(\"map1\", map1);\n+    entries.add(new Object[]{\"Groovy({map1.sort()*.value}, map1)\", Lists.newArrayList(\"map1\"), genericRow2, Lists.newArrayList(40, 10, 30)});\n+\n+    GenericRow genericRow3 = new GenericRow();\n+    genericRow3.putValue(\"campaigns\", new Object[]{3, 2});\n+    entries.add(new Object[]{\"Groovy({campaigns.max{ it.toBigDecimal() }}, campaigns)\", Lists.newArrayList(\"campaigns\"), genericRow3, 3});\n+\n+    GenericRow genericRow4 = new GenericRow();\n+    genericRow4.putValue(\"millis\", \"1584040201500\");\n+    entries.add(new Object[]{\"Groovy({(long)(Long.parseLong(millis)/(1000*60*60))}, millis)\", Lists.newArrayList(\"millis\"), genericRow4, 440011L});\n+\n+    GenericRow genericRow5 = new GenericRow();\n+    genericRow5.putValue(\"firstName\", \"John\");\n+    genericRow5.putValue(\"lastName\", \"Doe\");\n+    entries.add(new Object[]{\"Groovy({firstName + ' ' + lastName}, firstName, lastName)\", Lists.newArrayList(\"firstName\", \"lastName\"), genericRow5, \"John Doe\"});\n+\n+    GenericRow genericRow6 = new GenericRow();\n+    genericRow6.putValue(\"eventType\", \"IMPRESSION\");\n+    entries.add(new Object[]{\"Groovy({eventType == 'IMPRESSION' ? 1: 0}, eventType)\", Lists.newArrayList(\"eventType\"), genericRow6, 1});\n+\n+    GenericRow genericRow7 = new GenericRow();\n+    genericRow7.putValue(\"eventType\", \"CLICK\");\n+    entries.add(new Object[]{\"Groovy({eventType == 'IMPRESSION' ? 1: 0}, eventType)\", Lists.newArrayList(\"eventType\"), genericRow7, 0});\n+\n+    return entries.toArray(new Object[entries.size()][]);\n+  }\n+\n+}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzY3MjA3OQ=="}, "originalCommit": {"oid": "276fba0688677fc04893d25d3fc237fd3cf6ea68"}, "originalPosition": 88}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzMDg3NjU4OnYy", "diffSide": "RIGHT", "path": "pinot-spi/src/main/java/org/apache/pinot/spi/data/readers/RecordReaderUtils.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QxOTo0NjoyMlrOGEywEg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QyMzoyMTo1MVrOGE4mfQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzY3ODk5NA==", "bodyText": "I don't think this logic can be shared among all the record readers. For different input format, we might need different utils for them", "url": "https://github.com/apache/pinot/pull/5238#discussion_r407678994", "createdAt": "2020-04-13T19:46:22Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-spi/src/main/java/org/apache/pinot/spi/data/readers/RecordReaderUtils.java", "diffHunk": "@@ -67,31 +63,66 @@ public static InputStream getInputStream(File dataFile)\n   }\n \n   /**\n-   * Extracts all field specs from the given schema.\n-   * <p>For time field spec:\n-   * <ul>\n-   *   <li>If incoming and outgoing time column name are the same, use incoming time field spec</li>\n-   *   <li>If incoming and outgoing time column name are different, put both of them as time field spec</li>\n-   *   <li>\n-   *     We keep both incoming and outgoing time column to handle cases where the input file contains time values that\n-   *     are already converted\n-   *   </li>\n-   * </ul>\n+   * Converts the value to a multi-values value or a single values value\n    */\n-  public static List<FieldSpec> extractFieldSpecs(Schema schema) {\n-    List<FieldSpec> fieldSpecs = new ArrayList<>();\n-    for (FieldSpec fieldSpec : schema.getAllFieldSpecs()) {\n-      if (fieldSpec.getFieldType() == FieldSpec.FieldType.TIME) {\n-        TimeFieldSpec timeFieldSpec = (TimeFieldSpec) fieldSpec;\n-        fieldSpecs.add(new TimeFieldSpec(timeFieldSpec.getIncomingGranularitySpec()));\n-        if (!timeFieldSpec.getOutgoingTimeColumnName().equals(timeFieldSpec.getIncomingTimeColumnName())) {\n-          fieldSpecs.add(new TimeFieldSpec(timeFieldSpec.getOutgoingGranularitySpec()));\n-        }\n-      } else {\n-        fieldSpecs.add(fieldSpec);\n+  public static Object convert(Object value) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "276fba0688677fc04893d25d3fc237fd3cf6ea68"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzc0MDQ2Mg==", "bodyText": "RecordReaderUtils contained method convert(FieldSpec fieldSpec, Object value) which was shared amongst many of the record readers. This method is a replacement to that one, w/o the fieldSpec. It is only used by those who need this exact logic.\nIs there any part in particular you think cannot be shared?", "url": "https://github.com/apache/pinot/pull/5238#discussion_r407740462", "createdAt": "2020-04-13T21:46:38Z", "author": {"login": "npawar"}, "path": "pinot-spi/src/main/java/org/apache/pinot/spi/data/readers/RecordReaderUtils.java", "diffHunk": "@@ -67,31 +63,66 @@ public static InputStream getInputStream(File dataFile)\n   }\n \n   /**\n-   * Extracts all field specs from the given schema.\n-   * <p>For time field spec:\n-   * <ul>\n-   *   <li>If incoming and outgoing time column name are the same, use incoming time field spec</li>\n-   *   <li>If incoming and outgoing time column name are different, put both of them as time field spec</li>\n-   *   <li>\n-   *     We keep both incoming and outgoing time column to handle cases where the input file contains time values that\n-   *     are already converted\n-   *   </li>\n-   * </ul>\n+   * Converts the value to a multi-values value or a single values value\n    */\n-  public static List<FieldSpec> extractFieldSpecs(Schema schema) {\n-    List<FieldSpec> fieldSpecs = new ArrayList<>();\n-    for (FieldSpec fieldSpec : schema.getAllFieldSpecs()) {\n-      if (fieldSpec.getFieldType() == FieldSpec.FieldType.TIME) {\n-        TimeFieldSpec timeFieldSpec = (TimeFieldSpec) fieldSpec;\n-        fieldSpecs.add(new TimeFieldSpec(timeFieldSpec.getIncomingGranularitySpec()));\n-        if (!timeFieldSpec.getOutgoingTimeColumnName().equals(timeFieldSpec.getIncomingTimeColumnName())) {\n-          fieldSpecs.add(new TimeFieldSpec(timeFieldSpec.getOutgoingGranularitySpec()));\n-        }\n-      } else {\n-        fieldSpecs.add(fieldSpec);\n+  public static Object convert(Object value) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzY3ODk5NA=="}, "originalCommit": {"oid": "276fba0688677fc04893d25d3fc237fd3cf6ea68"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzc1MTk1Mg==", "bodyText": "For different source format, the input value can only be some certain types. Current approach is to add all the possible types for all source formant into this methods, which IMO is not efficient and not easy to manage. For example, for Json, ByteBuffer is not possible; For Avro, List is not possible etc.", "url": "https://github.com/apache/pinot/pull/5238#discussion_r407751952", "createdAt": "2020-04-13T22:15:08Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-spi/src/main/java/org/apache/pinot/spi/data/readers/RecordReaderUtils.java", "diffHunk": "@@ -67,31 +63,66 @@ public static InputStream getInputStream(File dataFile)\n   }\n \n   /**\n-   * Extracts all field specs from the given schema.\n-   * <p>For time field spec:\n-   * <ul>\n-   *   <li>If incoming and outgoing time column name are the same, use incoming time field spec</li>\n-   *   <li>If incoming and outgoing time column name are different, put both of them as time field spec</li>\n-   *   <li>\n-   *     We keep both incoming and outgoing time column to handle cases where the input file contains time values that\n-   *     are already converted\n-   *   </li>\n-   * </ul>\n+   * Converts the value to a multi-values value or a single values value\n    */\n-  public static List<FieldSpec> extractFieldSpecs(Schema schema) {\n-    List<FieldSpec> fieldSpecs = new ArrayList<>();\n-    for (FieldSpec fieldSpec : schema.getAllFieldSpecs()) {\n-      if (fieldSpec.getFieldType() == FieldSpec.FieldType.TIME) {\n-        TimeFieldSpec timeFieldSpec = (TimeFieldSpec) fieldSpec;\n-        fieldSpecs.add(new TimeFieldSpec(timeFieldSpec.getIncomingGranularitySpec()));\n-        if (!timeFieldSpec.getOutgoingTimeColumnName().equals(timeFieldSpec.getIncomingTimeColumnName())) {\n-          fieldSpecs.add(new TimeFieldSpec(timeFieldSpec.getOutgoingGranularitySpec()));\n-        }\n-      } else {\n-        fieldSpecs.add(fieldSpec);\n+  public static Object convert(Object value) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzY3ODk5NA=="}, "originalCommit": {"oid": "276fba0688677fc04893d25d3fc237fd3cf6ea68"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzc3NDg0NQ==", "bodyText": "Separated it for JSONRecordExtractor. Now only Avro, Parquet and Thrift use this, and I think it applies to all 3 of them.", "url": "https://github.com/apache/pinot/pull/5238#discussion_r407774845", "createdAt": "2020-04-13T23:21:51Z", "author": {"login": "npawar"}, "path": "pinot-spi/src/main/java/org/apache/pinot/spi/data/readers/RecordReaderUtils.java", "diffHunk": "@@ -67,31 +63,66 @@ public static InputStream getInputStream(File dataFile)\n   }\n \n   /**\n-   * Extracts all field specs from the given schema.\n-   * <p>For time field spec:\n-   * <ul>\n-   *   <li>If incoming and outgoing time column name are the same, use incoming time field spec</li>\n-   *   <li>If incoming and outgoing time column name are different, put both of them as time field spec</li>\n-   *   <li>\n-   *     We keep both incoming and outgoing time column to handle cases where the input file contains time values that\n-   *     are already converted\n-   *   </li>\n-   * </ul>\n+   * Converts the value to a multi-values value or a single values value\n    */\n-  public static List<FieldSpec> extractFieldSpecs(Schema schema) {\n-    List<FieldSpec> fieldSpecs = new ArrayList<>();\n-    for (FieldSpec fieldSpec : schema.getAllFieldSpecs()) {\n-      if (fieldSpec.getFieldType() == FieldSpec.FieldType.TIME) {\n-        TimeFieldSpec timeFieldSpec = (TimeFieldSpec) fieldSpec;\n-        fieldSpecs.add(new TimeFieldSpec(timeFieldSpec.getIncomingGranularitySpec()));\n-        if (!timeFieldSpec.getOutgoingTimeColumnName().equals(timeFieldSpec.getIncomingTimeColumnName())) {\n-          fieldSpecs.add(new TimeFieldSpec(timeFieldSpec.getOutgoingGranularitySpec()));\n-        }\n-      } else {\n-        fieldSpecs.add(fieldSpec);\n+  public static Object convert(Object value) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzY3ODk5NA=="}, "originalCommit": {"oid": "276fba0688677fc04893d25d3fc237fd3cf6ea68"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzMDg5MTM3OnYy", "diffSide": "RIGHT", "path": "pinot-spi/src/main/java/org/apache/pinot/spi/data/function/evaluators/SourceFieldNameExtractor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QxOTo1MDo0MFrOGEy4_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QyMToyMTozOFrOGE1zJQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzY4MTI3Nw==", "bodyText": "(Critical) You should skip the virtual columns here instead of inside the ExpressionEvaluatorFactory. You don't want to put virtual column into the sourceFieldNames", "url": "https://github.com/apache/pinot/pull/5238#discussion_r407681277", "createdAt": "2020-04-13T19:50:40Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-spi/src/main/java/org/apache/pinot/spi/data/function/evaluators/SourceFieldNameExtractor.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.spi.data.function.evaluators;\n+\n+import com.google.common.collect.Lists;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+import org.apache.pinot.spi.data.FieldSpec;\n+import org.apache.pinot.spi.data.Schema;\n+\n+\n+/**\n+ * Extracts names of the source fields from the schema\n+ */\n+public class SourceFieldNameExtractor {\n+  public static final String MAP_KEY_COLUMN_SUFFIX = \"__KEYS\";\n+  public static final String MAP_VALUE_COLUMN_SUFFIX = \"__VALUES\";\n+\n+  /**\n+   * Extracts the source fields from the schema\n+   * For field specs with a transform expression defined, use the arguments provided to the function\n+   * Otherwise, use the column name as is\n+   * TODO: for now, we assume that arguments to transform function are in the source i.e. there's no columns which are derived from transformed columns\n+   */\n+  public static List<String> extract(Schema schema) {\n+    Set<String> sourceFieldNames = new HashSet<>();\n+    for (FieldSpec fieldSpec : schema.getAllFieldSpecs()) {\n+      String columnName = fieldSpec.getName();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "276fba0688677fc04893d25d3fc237fd3cf6ea68"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzcyODkzMw==", "bodyText": "Thanks for catching that. Fixed", "url": "https://github.com/apache/pinot/pull/5238#discussion_r407728933", "createdAt": "2020-04-13T21:21:38Z", "author": {"login": "npawar"}, "path": "pinot-spi/src/main/java/org/apache/pinot/spi/data/function/evaluators/SourceFieldNameExtractor.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.spi.data.function.evaluators;\n+\n+import com.google.common.collect.Lists;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+import org.apache.pinot.spi.data.FieldSpec;\n+import org.apache.pinot.spi.data.Schema;\n+\n+\n+/**\n+ * Extracts names of the source fields from the schema\n+ */\n+public class SourceFieldNameExtractor {\n+  public static final String MAP_KEY_COLUMN_SUFFIX = \"__KEYS\";\n+  public static final String MAP_VALUE_COLUMN_SUFFIX = \"__VALUES\";\n+\n+  /**\n+   * Extracts the source fields from the schema\n+   * For field specs with a transform expression defined, use the arguments provided to the function\n+   * Otherwise, use the column name as is\n+   * TODO: for now, we assume that arguments to transform function are in the source i.e. there's no columns which are derived from transformed columns\n+   */\n+  public static List<String> extract(Schema schema) {\n+    Set<String> sourceFieldNames = new HashSet<>();\n+    for (FieldSpec fieldSpec : schema.getAllFieldSpecs()) {\n+      String columnName = fieldSpec.getName();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzY4MTI3Nw=="}, "originalCommit": {"oid": "276fba0688677fc04893d25d3fc237fd3cf6ea68"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzMDg5MzE5OnYy", "diffSide": "RIGHT", "path": "pinot-spi/src/main/java/org/apache/pinot/spi/data/function/evaluators/SourceFieldNameExtractor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QxOTo1MToxMVrOGEy6Fg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QxOTo1MToxMVrOGEy6Fg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzY4MTU1OA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                return Lists.newArrayList(sourceFieldNames);\n          \n          \n            \n                return new ArrayList<>(sourceFieldNames);", "url": "https://github.com/apache/pinot/pull/5238#discussion_r407681558", "createdAt": "2020-04-13T19:51:11Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-spi/src/main/java/org/apache/pinot/spi/data/function/evaluators/SourceFieldNameExtractor.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.spi.data.function.evaluators;\n+\n+import com.google.common.collect.Lists;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+import org.apache.pinot.spi.data.FieldSpec;\n+import org.apache.pinot.spi.data.Schema;\n+\n+\n+/**\n+ * Extracts names of the source fields from the schema\n+ */\n+public class SourceFieldNameExtractor {\n+  public static final String MAP_KEY_COLUMN_SUFFIX = \"__KEYS\";\n+  public static final String MAP_VALUE_COLUMN_SUFFIX = \"__VALUES\";\n+\n+  /**\n+   * Extracts the source fields from the schema\n+   * For field specs with a transform expression defined, use the arguments provided to the function\n+   * Otherwise, use the column name as is\n+   * TODO: for now, we assume that arguments to transform function are in the source i.e. there's no columns which are derived from transformed columns\n+   */\n+  public static List<String> extract(Schema schema) {\n+    Set<String> sourceFieldNames = new HashSet<>();\n+    for (FieldSpec fieldSpec : schema.getAllFieldSpecs()) {\n+      String columnName = fieldSpec.getName();\n+      ExpressionEvaluator expressionEvaluator = ExpressionEvaluatorFactory.getExpressionEvaluator(fieldSpec);\n+\n+      if (expressionEvaluator != null) {\n+        sourceFieldNames.addAll(expressionEvaluator.getArguments());\n+      } else {\n+        sourceFieldNames.add(columnName);\n+      }\n+    }\n+    return Lists.newArrayList(sourceFieldNames);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "276fba0688677fc04893d25d3fc237fd3cf6ea68"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzMDkwNDE3OnYy", "diffSide": "RIGHT", "path": "pinot-spi/src/main/java/org/apache/pinot/spi/data/function/evaluators/ExpressionEvaluatorFactory.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QxOTo1NDoyNlrOGEzA3Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QxOTo1NDoyNlrOGEzA3Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzY4MzI5Mw==", "bodyText": "Handling the virtual column before calling this method?\nAllow calling this for virtual column and handle it inside can cause confusion. You cannot differentiate virtual column or column without transform.", "url": "https://github.com/apache/pinot/pull/5238#discussion_r407683293", "createdAt": "2020-04-13T19:54:26Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-spi/src/main/java/org/apache/pinot/spi/data/function/evaluators/ExpressionEvaluatorFactory.java", "diffHunk": "@@ -0,0 +1,104 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.spi.data.function.evaluators;\n+\n+import org.apache.pinot.spi.data.FieldSpec;\n+import org.apache.pinot.spi.data.TimeFieldSpec;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+\n+/**\n+ * Factory class to create an {@link ExpressionEvaluator} for the field spec based on the {@link FieldSpec#getTransformFunction()}\n+ */\n+public class ExpressionEvaluatorFactory {\n+\n+  private static final Logger LOGGER = LoggerFactory.getLogger(ExpressionEvaluatorFactory.class);\n+\n+  private ExpressionEvaluatorFactory() {\n+\n+  }\n+\n+  /**\n+   * Creates the {@link ExpressionEvaluator} for the given field spec\n+   *\n+   * 1. If transform expression is defined, use it to create {@link ExpressionEvaluator}\n+   * 2. For TIME column, {@link DefaultTimeSpecEvaluator} for backward compatible handling of time spec. This is needed until we migrate to {@link org.apache.pinot.spi.data.DateTimeFieldSpec}\n+   * 3. For columns ending with __KEYS or __VALUES (used for interpreting Map column in Avro), create default functions for handing the Map\n+   * 4. Return null, if none of the above\n+   */\n+  public static ExpressionEvaluator getExpressionEvaluator(FieldSpec fieldSpec) {\n+    ExpressionEvaluator expressionEvaluator = null;\n+\n+    if (!fieldSpec.isVirtualColumn()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "276fba0688677fc04893d25d3fc237fd3cf6ea68"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzMDkxNTg1OnYy", "diffSide": "RIGHT", "path": "pinot-spi/src/main/java/org/apache/pinot/spi/data/function/evaluators/GroovyExpressionEvaluator.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QxOTo1ODowMFrOGEzIfg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QxOTo1ODowMFrOGEzIfg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzY4NTI0Ng==", "bodyText": "For better performance, check it at line 86", "url": "https://github.com/apache/pinot/pull/5238#discussion_r407685246", "createdAt": "2020-04-13T19:58:00Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-spi/src/main/java/org/apache/pinot/spi/data/function/evaluators/GroovyExpressionEvaluator.java", "diffHunk": "@@ -0,0 +1,99 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.spi.data.function.evaluators;\n+\n+import com.google.common.base.Splitter;\n+import groovy.lang.Binding;\n+import groovy.lang.GroovyShell;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+import org.apache.pinot.spi.data.readers.GenericRow;\n+\n+\n+/**\n+ * An {@link ExpressionEvaluator} for evaluating schema transform expressions written in Groovy.\n+ * GroovyShell is used to execute expressions.\n+ *\n+ * The transform expression must follow the convention Groovy({expression}, arguments1, argument2...)\n+ * For example:\n+ * \"dimensionFieldSpecs\": [\n+ *     {\n+ *       \"name\": \"fullName\",\n+ *       \"dataType\": \"STRING\",\n+ *       \"transformFunction\": \"Groovy({firstName+' '+lastName}, firstName, lastName)\"\n+ *     }\n+ *  ]\n+ */\n+public class GroovyExpressionEvaluator implements ExpressionEvaluator {\n+\n+  private static final String GROOVY_EXPRESSION_PREFIX = \"Groovy\";\n+  private static final String GROOVY_FUNCTION_REGEX = \"Groovy\\\\(\\\\{(?<script>.+)}(,(?<arguments>.+))?\\\\)\";\n+  private static final Pattern GROOVY_FUNCTION_PATTERN = Pattern.compile(GROOVY_FUNCTION_REGEX, Pattern.CASE_INSENSITIVE);\n+  private static final String ARGUMENTS_GROUP_NAME = \"arguments\";\n+  private static final String SCRIPT_GROUP_NAME = \"script\";\n+  private static final String ARGUMENTS_SEPARATOR = \",\";\n+\n+  private List<String> _arguments;\n+  private String _script;\n+\n+  public GroovyExpressionEvaluator(String transformExpression) {\n+    Matcher matcher = GROOVY_FUNCTION_PATTERN.matcher(transformExpression);\n+    if (matcher.matches()) {\n+      _script = matcher.group(SCRIPT_GROUP_NAME);\n+\n+      String arguments = matcher.group(ARGUMENTS_GROUP_NAME);\n+      if (arguments != null) {\n+        _arguments = Splitter.on(ARGUMENTS_SEPARATOR).trimResults().splitToList(arguments);\n+      } else {\n+        _arguments = Collections.emptyList();\n+      }\n+    }\n+  }\n+\n+  public static String getGroovyExpressionPrefix() {\n+    return GROOVY_EXPRESSION_PREFIX;\n+  }\n+\n+  @Override\n+  public List<String> getArguments() {\n+    return _arguments;\n+  }\n+\n+  @Override\n+  public Object evaluate(GenericRow genericRow) {\n+    Map<String, Object> params = new HashMap<>();\n+    for (String argument : _arguments) {\n+      params.put(argument, genericRow.getValue(argument));\n+    }\n+    if (params.containsValue(null)) { // TODO: disallow evaluation of any of the params is null? Or give complete control to function?", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "276fba0688677fc04893d25d3fc237fd3cf6ea68"}, "originalPosition": 88}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzMDkyNzYzOnYy", "diffSide": "RIGHT", "path": "pinot-spi/src/main/java/org/apache/pinot/spi/data/function/evaluators/ExpressionEvaluator.java", "isResolved": true, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QyMDowMToxNlrOGEzPjQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxOToxODoyN1rOGGIEQg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzY4NzA1Mw==", "bodyText": "We should standardize what data types are allowed in the GenericRow so that RecordReader and RecordExtractor can always extract the row into the supported data types, and ExpressionEvaluator can only evaluate values into these types", "url": "https://github.com/apache/pinot/pull/5238#discussion_r407687053", "createdAt": "2020-04-13T20:01:16Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-spi/src/main/java/org/apache/pinot/spi/data/function/evaluators/ExpressionEvaluator.java", "diffHunk": "@@ -0,0 +1,43 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.spi.data.function.evaluators;\n+\n+import java.util.List;\n+import org.apache.pinot.spi.data.readers.GenericRow;\n+\n+\n+/**\n+ * Interface for evaluators of transform function expressions of schema field specs\n+ * They transformFunction follows the convention:\n+ *  \"transformFunction\": \"FunctionType({function}, argument1, argument2,...argumentN)\"\n+ *  For example,\n+ *  \"transformFunction\" : \"Groovy({firstName + ' ' + lastName}, firstName, lastName)\"\n+ */\n+public interface ExpressionEvaluator {\n+\n+  /**\n+   * Get the arguments of the function\n+   */\n+  List<String> getArguments();\n+\n+  /**\n+   * Evaluate the function on the generic row and return the result\n+   */\n+  Object evaluate(GenericRow genericRow);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "276fba0688677fc04893d25d3fc237fd3cf6ea68"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzc0MTUxMQ==", "bodyText": "Yes that sounds good. Do you think any of that is actionable in this PR?", "url": "https://github.com/apache/pinot/pull/5238#discussion_r407741511", "createdAt": "2020-04-13T21:49:00Z", "author": {"login": "npawar"}, "path": "pinot-spi/src/main/java/org/apache/pinot/spi/data/function/evaluators/ExpressionEvaluator.java", "diffHunk": "@@ -0,0 +1,43 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.spi.data.function.evaluators;\n+\n+import java.util.List;\n+import org.apache.pinot.spi.data.readers.GenericRow;\n+\n+\n+/**\n+ * Interface for evaluators of transform function expressions of schema field specs\n+ * They transformFunction follows the convention:\n+ *  \"transformFunction\": \"FunctionType({function}, argument1, argument2,...argumentN)\"\n+ *  For example,\n+ *  \"transformFunction\" : \"Groovy({firstName + ' ' + lastName}, firstName, lastName)\"\n+ */\n+public interface ExpressionEvaluator {\n+\n+  /**\n+   * Get the arguments of the function\n+   */\n+  List<String> getArguments();\n+\n+  /**\n+   * Evaluate the function on the generic row and return the result\n+   */\n+  Object evaluate(GenericRow genericRow);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzY4NzA1Mw=="}, "originalCommit": {"oid": "276fba0688677fc04893d25d3fc237fd3cf6ea68"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzc1MDg1OA==", "bodyText": "Adding some javadoc should be good (may be add them inside the GenericRow.class).\nInside generic row, I think we should standardize the data types as followings:\nInteger, Long, Float, Double, String, byte[], Object[] of the single-value types", "url": "https://github.com/apache/pinot/pull/5238#discussion_r407750858", "createdAt": "2020-04-13T22:12:26Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-spi/src/main/java/org/apache/pinot/spi/data/function/evaluators/ExpressionEvaluator.java", "diffHunk": "@@ -0,0 +1,43 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.spi.data.function.evaluators;\n+\n+import java.util.List;\n+import org.apache.pinot.spi.data.readers.GenericRow;\n+\n+\n+/**\n+ * Interface for evaluators of transform function expressions of schema field specs\n+ * They transformFunction follows the convention:\n+ *  \"transformFunction\": \"FunctionType({function}, argument1, argument2,...argumentN)\"\n+ *  For example,\n+ *  \"transformFunction\" : \"Groovy({firstName + ' ' + lastName}, firstName, lastName)\"\n+ */\n+public interface ExpressionEvaluator {\n+\n+  /**\n+   * Get the arguments of the function\n+   */\n+  List<String> getArguments();\n+\n+  /**\n+   * Evaluate the function on the generic row and return the result\n+   */\n+  Object evaluate(GenericRow genericRow);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzY4NzA1Mw=="}, "originalCommit": {"oid": "276fba0688677fc04893d25d3fc237fd3cf6ea68"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzc2OTAxNw==", "bodyText": "Added", "url": "https://github.com/apache/pinot/pull/5238#discussion_r407769017", "createdAt": "2020-04-13T23:03:53Z", "author": {"login": "npawar"}, "path": "pinot-spi/src/main/java/org/apache/pinot/spi/data/function/evaluators/ExpressionEvaluator.java", "diffHunk": "@@ -0,0 +1,43 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.spi.data.function.evaluators;\n+\n+import java.util.List;\n+import org.apache.pinot.spi.data.readers.GenericRow;\n+\n+\n+/**\n+ * Interface for evaluators of transform function expressions of schema field specs\n+ * They transformFunction follows the convention:\n+ *  \"transformFunction\": \"FunctionType({function}, argument1, argument2,...argumentN)\"\n+ *  For example,\n+ *  \"transformFunction\" : \"Groovy({firstName + ' ' + lastName}, firstName, lastName)\"\n+ */\n+public interface ExpressionEvaluator {\n+\n+  /**\n+   * Get the arguments of the function\n+   */\n+  List<String> getArguments();\n+\n+  /**\n+   * Evaluate the function on the generic row and return the result\n+   */\n+  Object evaluate(GenericRow genericRow);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzY4NzA1Mw=="}, "originalCommit": {"oid": "276fba0688677fc04893d25d3fc237fd3cf6ea68"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzgwNDIxMw==", "bodyText": "Just checked the code (DataTypeTransformer). Based on the current behavior, we support the following data types:\nSV: Boolean, Byte, Character, Short, Integer, Long, Float, Double, String, byte[]\nMV: Object[] or List of Byte, Character, Short, Integer, Long, Float, Double, String\nI vote for not using Boolean, Byte, Character and Short to keep it simple, but it is not done inside each RecordExtractor. We might want to track this issue somewhere.", "url": "https://github.com/apache/pinot/pull/5238#discussion_r407804213", "createdAt": "2020-04-14T00:59:04Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-spi/src/main/java/org/apache/pinot/spi/data/function/evaluators/ExpressionEvaluator.java", "diffHunk": "@@ -0,0 +1,43 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.spi.data.function.evaluators;\n+\n+import java.util.List;\n+import org.apache.pinot.spi.data.readers.GenericRow;\n+\n+\n+/**\n+ * Interface for evaluators of transform function expressions of schema field specs\n+ * They transformFunction follows the convention:\n+ *  \"transformFunction\": \"FunctionType({function}, argument1, argument2,...argumentN)\"\n+ *  For example,\n+ *  \"transformFunction\" : \"Groovy({firstName + ' ' + lastName}, firstName, lastName)\"\n+ */\n+public interface ExpressionEvaluator {\n+\n+  /**\n+   * Get the arguments of the function\n+   */\n+  List<String> getArguments();\n+\n+  /**\n+   * Evaluate the function on the generic row and return the result\n+   */\n+  Object evaluate(GenericRow genericRow);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzY4NzA1Mw=="}, "originalCommit": {"oid": "276fba0688677fc04893d25d3fc237fd3cf6ea68"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTA3NjgwMg==", "bodyText": "Added more details on these lines to the comment", "url": "https://github.com/apache/pinot/pull/5238#discussion_r409076802", "createdAt": "2020-04-15T19:18:27Z", "author": {"login": "npawar"}, "path": "pinot-spi/src/main/java/org/apache/pinot/spi/data/function/evaluators/ExpressionEvaluator.java", "diffHunk": "@@ -0,0 +1,43 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.spi.data.function.evaluators;\n+\n+import java.util.List;\n+import org.apache.pinot.spi.data.readers.GenericRow;\n+\n+\n+/**\n+ * Interface for evaluators of transform function expressions of schema field specs\n+ * They transformFunction follows the convention:\n+ *  \"transformFunction\": \"FunctionType({function}, argument1, argument2,...argumentN)\"\n+ *  For example,\n+ *  \"transformFunction\" : \"Groovy({firstName + ' ' + lastName}, firstName, lastName)\"\n+ */\n+public interface ExpressionEvaluator {\n+\n+  /**\n+   * Get the arguments of the function\n+   */\n+  List<String> getArguments();\n+\n+  /**\n+   * Evaluate the function on the generic row and return the result\n+   */\n+  Object evaluate(GenericRow genericRow);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzY4NzA1Mw=="}, "originalCommit": {"oid": "276fba0688677fc04893d25d3fc237fd3cf6ea68"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzMTE5Mzc5OnYy", "diffSide": "RIGHT", "path": "pinot-core/src/main/java/org/apache/pinot/core/data/recordtransformer/ExpressionTransformer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QyMToyMjozOVrOGE11Ag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QyMTo1MzoyNlrOGE2rlg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzcyOTQxMA==", "bodyText": "Shall we consider make this evaluators to be ordered? So we can derived a field based on another derived field?", "url": "https://github.com/apache/pinot/pull/5238#discussion_r407729410", "createdAt": "2020-04-13T21:22:39Z", "author": {"login": "xiangfu0"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/data/recordtransformer/ExpressionTransformer.java", "diffHunk": "@@ -34,33 +33,31 @@\n  * regular column for other record transformers.\n  */\n public class ExpressionTransformer implements RecordTransformer {\n-  private static final Logger LOGGER = LoggerFactory.getLogger(ExpressionTransformer.class);\n \n-  private final Map<String, FunctionExpressionEvaluator> _expressionEvaluators = new HashMap<>();\n+  private final Map<String, ExpressionEvaluator> _expressionEvaluators = new HashMap<>();\n+\n+  private final String _timeColumn;\n \n   public ExpressionTransformer(Schema schema) {\n+    _timeColumn = schema.getTimeColumnName();\n     for (FieldSpec fieldSpec : schema.getAllFieldSpecs()) {\n-      if (!fieldSpec.isVirtualColumn()) {\n-        String expression = fieldSpec.getTransformFunction();\n-        if (expression != null) {\n-          try {\n-            _expressionEvaluators.put(fieldSpec.getName(), new FunctionExpressionEvaluator(expression));\n-          } catch (Exception e) {\n-            LOGGER.error(\"Caught exception while constructing expression evaluator for: {}, skipping\", expression, e);\n-          }\n-        }\n+      ExpressionEvaluator expressionEvaluator = ExpressionEvaluatorFactory.getExpressionEvaluator(fieldSpec);\n+      if (expressionEvaluator != null) {\n+        _expressionEvaluators.put(fieldSpec.getName(), expressionEvaluator);\n       }\n     }\n   }\n \n   @Override\n   public GenericRow transform(GenericRow record) {\n-    for (Map.Entry<String, FunctionExpressionEvaluator> entry : _expressionEvaluators.entrySet()) {\n+    for (Map.Entry<String, ExpressionEvaluator> entry : _expressionEvaluators.entrySet()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "276fba0688677fc04893d25d3fc237fd3cf6ea68"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzc0MzM4Mg==", "bodyText": "In this iteration, I haven't considered derived fields. It's part of my next steps. Yes, can make this map ordered then. Will also have to include logic in the ExpressionTransformer constructor to come up with the ordering.\nThe next steps are:\n\nDerived fields\nCustom functions\nSome default time related functions\nUse all of the above to migrate to dateTimeFieldSpec\nAdvanced transformations - filter, flatten\nPluggable RecordTransformer", "url": "https://github.com/apache/pinot/pull/5238#discussion_r407743382", "createdAt": "2020-04-13T21:53:26Z", "author": {"login": "npawar"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/data/recordtransformer/ExpressionTransformer.java", "diffHunk": "@@ -34,33 +33,31 @@\n  * regular column for other record transformers.\n  */\n public class ExpressionTransformer implements RecordTransformer {\n-  private static final Logger LOGGER = LoggerFactory.getLogger(ExpressionTransformer.class);\n \n-  private final Map<String, FunctionExpressionEvaluator> _expressionEvaluators = new HashMap<>();\n+  private final Map<String, ExpressionEvaluator> _expressionEvaluators = new HashMap<>();\n+\n+  private final String _timeColumn;\n \n   public ExpressionTransformer(Schema schema) {\n+    _timeColumn = schema.getTimeColumnName();\n     for (FieldSpec fieldSpec : schema.getAllFieldSpecs()) {\n-      if (!fieldSpec.isVirtualColumn()) {\n-        String expression = fieldSpec.getTransformFunction();\n-        if (expression != null) {\n-          try {\n-            _expressionEvaluators.put(fieldSpec.getName(), new FunctionExpressionEvaluator(expression));\n-          } catch (Exception e) {\n-            LOGGER.error(\"Caught exception while constructing expression evaluator for: {}, skipping\", expression, e);\n-          }\n-        }\n+      ExpressionEvaluator expressionEvaluator = ExpressionEvaluatorFactory.getExpressionEvaluator(fieldSpec);\n+      if (expressionEvaluator != null) {\n+        _expressionEvaluators.put(fieldSpec.getName(), expressionEvaluator);\n       }\n     }\n   }\n \n   @Override\n   public GenericRow transform(GenericRow record) {\n-    for (Map.Entry<String, FunctionExpressionEvaluator> entry : _expressionEvaluators.entrySet()) {\n+    for (Map.Entry<String, ExpressionEvaluator> entry : _expressionEvaluators.entrySet()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzcyOTQxMA=="}, "originalCommit": {"oid": "276fba0688677fc04893d25d3fc237fd3cf6ea68"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzMTI2MjUwOnYy", "diffSide": "RIGHT", "path": "pinot-spi/src/test/java/org/apache/pinot/spi/utils/TimeConverterTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QyMTo0NjowM1rOGE2fMw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QyMTo0NjowM1rOGE2fMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzc0MDIxMQ==", "bodyText": "nit: move the package below license", "url": "https://github.com/apache/pinot/pull/5238#discussion_r407740211", "createdAt": "2020-04-13T21:46:03Z", "author": {"login": "xiangfu0"}, "path": "pinot-spi/src/test/java/org/apache/pinot/spi/utils/TimeConverterTest.java", "diffHunk": "@@ -1,3 +1,5 @@\n+package org.apache.pinot.spi.utils;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aa9584c853cdb1294e7f54bc629189618b69ad96"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzMTI4NTA2OnYy", "diffSide": "RIGHT", "path": "pinot-spi/src/main/java/org/apache/pinot/spi/data/readers/RecordReaderUtils.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QyMTo1NDoxM1rOGE2tEQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QyMzowMzoxOVrOGE4O_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzc0Mzc2MQ==", "bodyText": "Where we will do the conversion for dataType=bytes, and value is string.", "url": "https://github.com/apache/pinot/pull/5238#discussion_r407743761", "createdAt": "2020-04-13T21:54:13Z", "author": {"login": "xiangfu0"}, "path": "pinot-spi/src/main/java/org/apache/pinot/spi/data/readers/RecordReaderUtils.java", "diffHunk": "@@ -67,167 +59,65 @@ public static InputStream getInputStream(File dataFile)\n   }\n \n   /**\n-   * Extracts all field specs from the given schema.\n-   * <p>For time field spec:\n-   * <ul>\n-   *   <li>If incoming and outgoing time column name are the same, use incoming time field spec</li>\n-   *   <li>If incoming and outgoing time column name are different, put both of them as time field spec</li>\n-   *   <li>\n-   *     We keep both incoming and outgoing time column to handle cases where the input file contains time values that\n-   *     are already converted\n-   *   </li>\n-   * </ul>\n+   * Converts the value to a multi-values value or a single values value\n    */\n-  public static List<FieldSpec> extractFieldSpecs(Schema schema) {\n-    List<FieldSpec> fieldSpecs = new ArrayList<>();\n-    for (FieldSpec fieldSpec : schema.getAllFieldSpecs()) {\n-      if (fieldSpec.getFieldType() == FieldSpec.FieldType.TIME) {\n-        TimeFieldSpec timeFieldSpec = (TimeFieldSpec) fieldSpec;\n-        fieldSpecs.add(new TimeFieldSpec(timeFieldSpec.getIncomingGranularitySpec()));\n-        if (!timeFieldSpec.getOutgoingTimeColumnName().equals(timeFieldSpec.getIncomingTimeColumnName())) {\n-          fieldSpecs.add(new TimeFieldSpec(timeFieldSpec.getOutgoingGranularitySpec()));\n-        }\n-      } else {\n-        fieldSpecs.add(fieldSpec);\n-      }\n-    }\n-    return fieldSpecs;\n-  }\n+  public static @Nullable Object convert(@Nullable Object value) {\n \n-  /**\n-   * Converts the value based on the given field spec.\n-   */\n-  public static Object convert(FieldSpec fieldSpec, @Nullable Object value) {\n-    if (fieldSpec.isSingleValueField()) {\n-      return convertSingleValue(fieldSpec, value);\n+    if (value == null) {\n+      return null;\n+    }\n+    if (value instanceof Collection) {\n+      return convertMultiValue((Collection) value);\n     } else {\n-      return convertMultiValue(fieldSpec, (Collection) value);\n+      return convertSingleValue(value);\n     }\n   }\n \n   /**\n-   * Converts the value to a single-valued value based on the given field spec.\n+   * Converts the value to a single-valued value\n    */\n-  public static Object convertSingleValue(FieldSpec fieldSpec, @Nullable Object value) {\n+  public static @Nullable Object convertSingleValue(@Nullable Object value) {\n     if (value == null) {\n       return null;\n     }\n-    DataType dataType = fieldSpec.getDataType();\n-    if (dataType == FieldSpec.DataType.BYTES) {\n-      // Avro ByteBuffer maps to byte[]\n-      if (value instanceof ByteBuffer) {\n-        ByteBuffer byteBufferValue = (ByteBuffer) value;\n \n-        // Use byteBufferValue.remaining() instead of byteBufferValue.capacity() so that it still works when buffer is\n-        // over-sized\n-        byte[] bytesValue = new byte[byteBufferValue.remaining()];\n-        byteBufferValue.get(bytesValue);\n-        return bytesValue;\n-      } else {\n-        Preconditions\n-            .checkState(value instanceof byte[], \"For BYTES data type, value must be either ByteBuffer or byte[]\");\n-        return value;\n-      }\n-    }\n-    if (value instanceof Number) {\n-      Number numberValue = (Number) value;\n-      switch (dataType) {\n-        case INT:\n-          return numberValue.intValue();\n-        case LONG:\n-          return numberValue.longValue();\n-        case FLOAT:\n-          return numberValue.floatValue();\n-        case DOUBLE:\n-          return numberValue.doubleValue();\n-        case STRING:\n-          return numberValue.toString();\n-        default:\n-          throw new IllegalStateException(\"Illegal data type: \" + dataType);\n-      }\n-    }\n-    return convertSingleValue(fieldSpec, value.toString());\n-  }\n+    if (value instanceof ByteBuffer) {\n+      ByteBuffer byteBufferValue = (ByteBuffer) value;\n \n-  /**\n-   * Converts the string value to a single-valued value based on the given field spec.\n-   */\n-  public static Object convertSingleValue(FieldSpec fieldSpec, @Nullable String stringValue) {\n-    if (stringValue == null) {\n-      return null;\n-    }\n-    DataType dataType = fieldSpec.getDataType();\n-    // Treat empty string as null for data types other than STRING\n-    if (stringValue.isEmpty() && dataType != DataType.STRING) {\n-      return null;\n+      // Use byteBufferValue.remaining() instead of byteBufferValue.capacity() so that it still works when buffer is\n+      // over-sized\n+      byte[] bytesValue = new byte[byteBufferValue.remaining()];\n+      byteBufferValue.get(bytesValue);\n+      return bytesValue;\n     }\n-    switch (dataType) {\n-      case INT:\n-        return Integer.parseInt(stringValue);\n-      case LONG:\n-        return Long.parseLong(stringValue);\n-      case FLOAT:\n-        return Float.parseFloat(stringValue);\n-      case DOUBLE:\n-        return Double.parseDouble(stringValue);\n-      case STRING:\n-        return stringValue;\n-      case BYTES:\n-        return BytesUtils.toBytes(stringValue);\n-      default:\n-        throw new IllegalStateException(\"Illegal data type: \" + dataType);\n+    if (value instanceof Number) {\n+      return value;\n     }\n+    return value.toString();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aa9584c853cdb1294e7f54bc629189618b69ad96"}, "originalPosition": 159}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzc2ODgyOQ==", "bodyText": "I checked that this will be handled within DataTypeTransformer. There are tests for this in the PinotDataTypeTest", "url": "https://github.com/apache/pinot/pull/5238#discussion_r407768829", "createdAt": "2020-04-13T23:03:19Z", "author": {"login": "npawar"}, "path": "pinot-spi/src/main/java/org/apache/pinot/spi/data/readers/RecordReaderUtils.java", "diffHunk": "@@ -67,167 +59,65 @@ public static InputStream getInputStream(File dataFile)\n   }\n \n   /**\n-   * Extracts all field specs from the given schema.\n-   * <p>For time field spec:\n-   * <ul>\n-   *   <li>If incoming and outgoing time column name are the same, use incoming time field spec</li>\n-   *   <li>If incoming and outgoing time column name are different, put both of them as time field spec</li>\n-   *   <li>\n-   *     We keep both incoming and outgoing time column to handle cases where the input file contains time values that\n-   *     are already converted\n-   *   </li>\n-   * </ul>\n+   * Converts the value to a multi-values value or a single values value\n    */\n-  public static List<FieldSpec> extractFieldSpecs(Schema schema) {\n-    List<FieldSpec> fieldSpecs = new ArrayList<>();\n-    for (FieldSpec fieldSpec : schema.getAllFieldSpecs()) {\n-      if (fieldSpec.getFieldType() == FieldSpec.FieldType.TIME) {\n-        TimeFieldSpec timeFieldSpec = (TimeFieldSpec) fieldSpec;\n-        fieldSpecs.add(new TimeFieldSpec(timeFieldSpec.getIncomingGranularitySpec()));\n-        if (!timeFieldSpec.getOutgoingTimeColumnName().equals(timeFieldSpec.getIncomingTimeColumnName())) {\n-          fieldSpecs.add(new TimeFieldSpec(timeFieldSpec.getOutgoingGranularitySpec()));\n-        }\n-      } else {\n-        fieldSpecs.add(fieldSpec);\n-      }\n-    }\n-    return fieldSpecs;\n-  }\n+  public static @Nullable Object convert(@Nullable Object value) {\n \n-  /**\n-   * Converts the value based on the given field spec.\n-   */\n-  public static Object convert(FieldSpec fieldSpec, @Nullable Object value) {\n-    if (fieldSpec.isSingleValueField()) {\n-      return convertSingleValue(fieldSpec, value);\n+    if (value == null) {\n+      return null;\n+    }\n+    if (value instanceof Collection) {\n+      return convertMultiValue((Collection) value);\n     } else {\n-      return convertMultiValue(fieldSpec, (Collection) value);\n+      return convertSingleValue(value);\n     }\n   }\n \n   /**\n-   * Converts the value to a single-valued value based on the given field spec.\n+   * Converts the value to a single-valued value\n    */\n-  public static Object convertSingleValue(FieldSpec fieldSpec, @Nullable Object value) {\n+  public static @Nullable Object convertSingleValue(@Nullable Object value) {\n     if (value == null) {\n       return null;\n     }\n-    DataType dataType = fieldSpec.getDataType();\n-    if (dataType == FieldSpec.DataType.BYTES) {\n-      // Avro ByteBuffer maps to byte[]\n-      if (value instanceof ByteBuffer) {\n-        ByteBuffer byteBufferValue = (ByteBuffer) value;\n \n-        // Use byteBufferValue.remaining() instead of byteBufferValue.capacity() so that it still works when buffer is\n-        // over-sized\n-        byte[] bytesValue = new byte[byteBufferValue.remaining()];\n-        byteBufferValue.get(bytesValue);\n-        return bytesValue;\n-      } else {\n-        Preconditions\n-            .checkState(value instanceof byte[], \"For BYTES data type, value must be either ByteBuffer or byte[]\");\n-        return value;\n-      }\n-    }\n-    if (value instanceof Number) {\n-      Number numberValue = (Number) value;\n-      switch (dataType) {\n-        case INT:\n-          return numberValue.intValue();\n-        case LONG:\n-          return numberValue.longValue();\n-        case FLOAT:\n-          return numberValue.floatValue();\n-        case DOUBLE:\n-          return numberValue.doubleValue();\n-        case STRING:\n-          return numberValue.toString();\n-        default:\n-          throw new IllegalStateException(\"Illegal data type: \" + dataType);\n-      }\n-    }\n-    return convertSingleValue(fieldSpec, value.toString());\n-  }\n+    if (value instanceof ByteBuffer) {\n+      ByteBuffer byteBufferValue = (ByteBuffer) value;\n \n-  /**\n-   * Converts the string value to a single-valued value based on the given field spec.\n-   */\n-  public static Object convertSingleValue(FieldSpec fieldSpec, @Nullable String stringValue) {\n-    if (stringValue == null) {\n-      return null;\n-    }\n-    DataType dataType = fieldSpec.getDataType();\n-    // Treat empty string as null for data types other than STRING\n-    if (stringValue.isEmpty() && dataType != DataType.STRING) {\n-      return null;\n+      // Use byteBufferValue.remaining() instead of byteBufferValue.capacity() so that it still works when buffer is\n+      // over-sized\n+      byte[] bytesValue = new byte[byteBufferValue.remaining()];\n+      byteBufferValue.get(bytesValue);\n+      return bytesValue;\n     }\n-    switch (dataType) {\n-      case INT:\n-        return Integer.parseInt(stringValue);\n-      case LONG:\n-        return Long.parseLong(stringValue);\n-      case FLOAT:\n-        return Float.parseFloat(stringValue);\n-      case DOUBLE:\n-        return Double.parseDouble(stringValue);\n-      case STRING:\n-        return stringValue;\n-      case BYTES:\n-        return BytesUtils.toBytes(stringValue);\n-      default:\n-        throw new IllegalStateException(\"Illegal data type: \" + dataType);\n+    if (value instanceof Number) {\n+      return value;\n     }\n+    return value.toString();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzc0Mzc2MQ=="}, "originalCommit": {"oid": "aa9584c853cdb1294e7f54bc629189618b69ad96"}, "originalPosition": 159}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzMTYzNzgwOnYy", "diffSide": "RIGHT", "path": "pinot-core/src/main/java/org/apache/pinot/core/data/recordtransformer/ExpressionTransformer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQwMDozNTozN1rOGE5_nA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQwMDozNTozN1rOGE5_nA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzc5NzY2MA==", "bodyText": "Skip virtual columns here", "url": "https://github.com/apache/pinot/pull/5238#discussion_r407797660", "createdAt": "2020-04-14T00:35:37Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/data/recordtransformer/ExpressionTransformer.java", "diffHunk": "@@ -34,33 +33,31 @@\n  * regular column for other record transformers.\n  */\n public class ExpressionTransformer implements RecordTransformer {\n-  private static final Logger LOGGER = LoggerFactory.getLogger(ExpressionTransformer.class);\n \n-  private final Map<String, FunctionExpressionEvaluator> _expressionEvaluators = new HashMap<>();\n+  private final Map<String, ExpressionEvaluator> _expressionEvaluators = new HashMap<>();\n+\n+  private final String _timeColumn;\n \n   public ExpressionTransformer(Schema schema) {\n+    _timeColumn = schema.getTimeColumnName();\n     for (FieldSpec fieldSpec : schema.getAllFieldSpecs()) {\n-      if (!fieldSpec.isVirtualColumn()) {\n-        String expression = fieldSpec.getTransformFunction();\n-        if (expression != null) {\n-          try {\n-            _expressionEvaluators.put(fieldSpec.getName(), new FunctionExpressionEvaluator(expression));\n-          } catch (Exception e) {\n-            LOGGER.error(\"Caught exception while constructing expression evaluator for: {}, skipping\", expression, e);\n-          }\n-        }\n+      ExpressionEvaluator expressionEvaluator = ExpressionEvaluatorFactory.getExpressionEvaluator(fieldSpec);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3ad57c497e4ff89fd1130df08bcae46e9cc4f70a"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzMTYzOTk0OnYy", "diffSide": "RIGHT", "path": "pinot-spi/src/main/java/org/apache/pinot/spi/data/function/evaluators/ExpressionEvaluatorFactory.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQwMDozNjo0OVrOGE6Azg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQwMDozNjo0OVrOGE6Azg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzc5Nzk2Ng==", "bodyText": "(convention) Put nullable in front of public static as a separate line", "url": "https://github.com/apache/pinot/pull/5238#discussion_r407797966", "createdAt": "2020-04-14T00:36:49Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-spi/src/main/java/org/apache/pinot/spi/data/function/evaluators/ExpressionEvaluatorFactory.java", "diffHunk": "@@ -0,0 +1,103 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.spi.data.function.evaluators;\n+\n+import javax.annotation.Nullable;\n+import org.apache.pinot.spi.data.FieldSpec;\n+import org.apache.pinot.spi.data.TimeFieldSpec;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+\n+/**\n+ * Factory class to create an {@link ExpressionEvaluator} for the field spec based on the {@link FieldSpec#getTransformFunction()}\n+ */\n+public class ExpressionEvaluatorFactory {\n+\n+  private static final Logger LOGGER = LoggerFactory.getLogger(ExpressionEvaluatorFactory.class);\n+\n+  private ExpressionEvaluatorFactory() {\n+\n+  }\n+\n+  /**\n+   * Creates the {@link ExpressionEvaluator} for the given field spec\n+   *\n+   * 1. If transform expression is defined, use it to create {@link ExpressionEvaluator}\n+   * 2. For TIME column, {@link DefaultTimeSpecEvaluator} for backward compatible handling of time spec. This is needed until we migrate to {@link org.apache.pinot.spi.data.DateTimeFieldSpec}\n+   * 3. For columns ending with __KEYS or __VALUES (used for interpreting Map column in Avro), create default functions for handing the Map\n+   * 4. Return null, if none of the above\n+   */\n+  public static @Nullable", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3ad57c497e4ff89fd1130df08bcae46e9cc4f70a"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzMTY0ODY4OnYy", "diffSide": "RIGHT", "path": "pinot-core/src/main/java/org/apache/pinot/core/data/recordtransformer/ExpressionTransformer.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQwMDo0MToyM1rOGE6F4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQwMzowNTozNlrOGE8gQw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzc5OTI2Nw==", "bodyText": "Don't specialize time column here. When the dest column already exists, we should not evaluate the expression again.\nThe reason for this is that: for hybrid table, both realtime and offline side share the same schema, and usually the batch ingestion already pre-processed the data and finished all the expression evaluation.\nHere comes a limitation of maintaining this behavior: the source column name must be different from the dest column name, but I think this should be fine. We can also add a validation for that in the SourceFieldNameExtractor", "url": "https://github.com/apache/pinot/pull/5238#discussion_r407799267", "createdAt": "2020-04-14T00:41:23Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/data/recordtransformer/ExpressionTransformer.java", "diffHunk": "@@ -34,33 +33,31 @@\n  * regular column for other record transformers.\n  */\n public class ExpressionTransformer implements RecordTransformer {\n-  private static final Logger LOGGER = LoggerFactory.getLogger(ExpressionTransformer.class);\n \n-  private final Map<String, FunctionExpressionEvaluator> _expressionEvaluators = new HashMap<>();\n+  private final Map<String, ExpressionEvaluator> _expressionEvaluators = new HashMap<>();\n+\n+  private final String _timeColumn;\n \n   public ExpressionTransformer(Schema schema) {\n+    _timeColumn = schema.getTimeColumnName();\n     for (FieldSpec fieldSpec : schema.getAllFieldSpecs()) {\n-      if (!fieldSpec.isVirtualColumn()) {\n-        String expression = fieldSpec.getTransformFunction();\n-        if (expression != null) {\n-          try {\n-            _expressionEvaluators.put(fieldSpec.getName(), new FunctionExpressionEvaluator(expression));\n-          } catch (Exception e) {\n-            LOGGER.error(\"Caught exception while constructing expression evaluator for: {}, skipping\", expression, e);\n-          }\n-        }\n+      ExpressionEvaluator expressionEvaluator = ExpressionEvaluatorFactory.getExpressionEvaluator(fieldSpec);\n+      if (expressionEvaluator != null) {\n+        _expressionEvaluators.put(fieldSpec.getName(), expressionEvaluator);\n       }\n     }\n   }\n \n   @Override\n   public GenericRow transform(GenericRow record) {\n-    for (Map.Entry<String, FunctionExpressionEvaluator> entry : _expressionEvaluators.entrySet()) {\n+    for (Map.Entry<String, ExpressionEvaluator> entry : _expressionEvaluators.entrySet()) {\n       String column = entry.getKey();\n-      // Skip transformation if column value already exist\n+      ExpressionEvaluator transformExpressionEvaluator = entry.getValue();\n+      // Skip transformation if column value already exist. Value can exist for time transformation (incoming name = outgoing name)\n       // NOTE: column value might already exist for OFFLINE data\n-      if (record.getValue(column) == null) {\n-        record.putValue(column, entry.getValue().evaluate(record));\n+      if (record.getValue(column) == null || column.equals(_timeColumn)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3ad57c497e4ff89fd1130df08bcae46e9cc4f70a"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzgyNjY2Mw==", "bodyText": "I added that precisely to handle the case you mentioned - incoming and outgoing spec are different, but have the same name. If you're saying that we don't need to handle that case, then I can remove this", "url": "https://github.com/apache/pinot/pull/5238#discussion_r407826663", "createdAt": "2020-04-14T02:20:55Z", "author": {"login": "npawar"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/data/recordtransformer/ExpressionTransformer.java", "diffHunk": "@@ -34,33 +33,31 @@\n  * regular column for other record transformers.\n  */\n public class ExpressionTransformer implements RecordTransformer {\n-  private static final Logger LOGGER = LoggerFactory.getLogger(ExpressionTransformer.class);\n \n-  private final Map<String, FunctionExpressionEvaluator> _expressionEvaluators = new HashMap<>();\n+  private final Map<String, ExpressionEvaluator> _expressionEvaluators = new HashMap<>();\n+\n+  private final String _timeColumn;\n \n   public ExpressionTransformer(Schema schema) {\n+    _timeColumn = schema.getTimeColumnName();\n     for (FieldSpec fieldSpec : schema.getAllFieldSpecs()) {\n-      if (!fieldSpec.isVirtualColumn()) {\n-        String expression = fieldSpec.getTransformFunction();\n-        if (expression != null) {\n-          try {\n-            _expressionEvaluators.put(fieldSpec.getName(), new FunctionExpressionEvaluator(expression));\n-          } catch (Exception e) {\n-            LOGGER.error(\"Caught exception while constructing expression evaluator for: {}, skipping\", expression, e);\n-          }\n-        }\n+      ExpressionEvaluator expressionEvaluator = ExpressionEvaluatorFactory.getExpressionEvaluator(fieldSpec);\n+      if (expressionEvaluator != null) {\n+        _expressionEvaluators.put(fieldSpec.getName(), expressionEvaluator);\n       }\n     }\n   }\n \n   @Override\n   public GenericRow transform(GenericRow record) {\n-    for (Map.Entry<String, FunctionExpressionEvaluator> entry : _expressionEvaluators.entrySet()) {\n+    for (Map.Entry<String, ExpressionEvaluator> entry : _expressionEvaluators.entrySet()) {\n       String column = entry.getKey();\n-      // Skip transformation if column value already exist\n+      ExpressionEvaluator transformExpressionEvaluator = entry.getValue();\n+      // Skip transformation if column value already exist. Value can exist for time transformation (incoming name = outgoing name)\n       // NOTE: column value might already exist for OFFLINE data\n-      if (record.getValue(column) == null) {\n-        record.putValue(column, entry.getValue().evaluate(record));\n+      if (record.getValue(column) == null || column.equals(_timeColumn)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzc5OTI2Nw=="}, "originalCommit": {"oid": "3ad57c497e4ff89fd1130df08bcae46e9cc4f70a"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzgzODc4Nw==", "bodyText": "What I'm suggesting is to not force transformation for time column because of the scenario I described.", "url": "https://github.com/apache/pinot/pull/5238#discussion_r407838787", "createdAt": "2020-04-14T03:05:36Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/data/recordtransformer/ExpressionTransformer.java", "diffHunk": "@@ -34,33 +33,31 @@\n  * regular column for other record transformers.\n  */\n public class ExpressionTransformer implements RecordTransformer {\n-  private static final Logger LOGGER = LoggerFactory.getLogger(ExpressionTransformer.class);\n \n-  private final Map<String, FunctionExpressionEvaluator> _expressionEvaluators = new HashMap<>();\n+  private final Map<String, ExpressionEvaluator> _expressionEvaluators = new HashMap<>();\n+\n+  private final String _timeColumn;\n \n   public ExpressionTransformer(Schema schema) {\n+    _timeColumn = schema.getTimeColumnName();\n     for (FieldSpec fieldSpec : schema.getAllFieldSpecs()) {\n-      if (!fieldSpec.isVirtualColumn()) {\n-        String expression = fieldSpec.getTransformFunction();\n-        if (expression != null) {\n-          try {\n-            _expressionEvaluators.put(fieldSpec.getName(), new FunctionExpressionEvaluator(expression));\n-          } catch (Exception e) {\n-            LOGGER.error(\"Caught exception while constructing expression evaluator for: {}, skipping\", expression, e);\n-          }\n-        }\n+      ExpressionEvaluator expressionEvaluator = ExpressionEvaluatorFactory.getExpressionEvaluator(fieldSpec);\n+      if (expressionEvaluator != null) {\n+        _expressionEvaluators.put(fieldSpec.getName(), expressionEvaluator);\n       }\n     }\n   }\n \n   @Override\n   public GenericRow transform(GenericRow record) {\n-    for (Map.Entry<String, FunctionExpressionEvaluator> entry : _expressionEvaluators.entrySet()) {\n+    for (Map.Entry<String, ExpressionEvaluator> entry : _expressionEvaluators.entrySet()) {\n       String column = entry.getKey();\n-      // Skip transformation if column value already exist\n+      ExpressionEvaluator transformExpressionEvaluator = entry.getValue();\n+      // Skip transformation if column value already exist. Value can exist for time transformation (incoming name = outgoing name)\n       // NOTE: column value might already exist for OFFLINE data\n-      if (record.getValue(column) == null) {\n-        record.putValue(column, entry.getValue().evaluate(record));\n+      if (record.getValue(column) == null || column.equals(_timeColumn)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzc5OTI2Nw=="}, "originalCommit": {"oid": "3ad57c497e4ff89fd1130df08bcae46e9cc4f70a"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzMTY2MDc2OnYy", "diffSide": "RIGHT", "path": "pinot-plugins/pinot-input-format/pinot-confluent-avro/src/main/java/org/apache/pinot/plugin/inputformat/avro/confluent/KafkaConfluentSchemaRegistryAvroMessageDecoder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQwMDo0Nzo0M1rOGE6M1w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQwMDo0Nzo0M1rOGE6M1w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzgwMTA0Nw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    requireNonNull(indexingSchema, \"indexingSchema is null\");\n          \n          \n            \n                    Preconditions.checkState(indexingSchema != null, \"Schema must be provided\");\n          \n      \n    \n    \n  \n\nAlso remove the static import", "url": "https://github.com/apache/pinot/pull/5238#discussion_r407801047", "createdAt": "2020-04-14T00:47:43Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-plugins/pinot-input-format/pinot-confluent-avro/src/main/java/org/apache/pinot/plugin/inputformat/avro/confluent/KafkaConfluentSchemaRegistryAvroMessageDecoder.java", "diffHunk": "@@ -44,13 +46,14 @@\n     private KafkaAvroDeserializer deserializer;\n     private RecordExtractor<Record> avroRecordConverter;\n     private String topicName;\n-    private Schema pinotSchema;\n+    private List<String> _sourceFieldNames;\n \n     @Override\n     public void init(Map<String, String> props, Schema indexingSchema, String topicName) throws Exception {\n         checkState(props.containsKey(SCHEMA_REGISTRY_REST_URL), \"Missing required property '%s'\", SCHEMA_REGISTRY_REST_URL);\n         String schemaRegistryUrl = props.get(SCHEMA_REGISTRY_REST_URL);\n-        pinotSchema = requireNonNull(indexingSchema, \"indexingSchema is null\");\n+        requireNonNull(indexingSchema, \"indexingSchema is null\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3ad57c497e4ff89fd1130df08bcae46e9cc4f70a"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzMTY3MzE2OnYy", "diffSide": "RIGHT", "path": "pinot-plugins/pinot-input-format/pinot-orc/src/main/java/org/apache/pinot/plugin/inputformat/orc/ORCRecordExtractor.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQwMDo1NDoyMlrOGE6UBA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQwMjoxMjozNVrOGE7oWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzgwMjg4NA==", "bodyText": "(Critical) ORC might not work with the extractor model because it is not read row-by-row but batch-by-batch.\nI would recommend reverting the change on ORCRecordReader and leave it as is. I'm working on re-do this record reader.", "url": "https://github.com/apache/pinot/pull/5238#discussion_r407802884", "createdAt": "2020-04-14T00:54:22Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-plugins/pinot-input-format/pinot-orc/src/main/java/org/apache/pinot/plugin/inputformat/orc/ORCRecordExtractor.java", "diffHunk": "@@ -0,0 +1,144 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.plugin.inputformat.orc;\n+\n+import com.google.common.collect.ImmutableList;\n+import java.util.ArrayList;\n+import java.util.List;\n+import org.apache.hadoop.hive.ql.exec.vector.ColumnVector;\n+import org.apache.hadoop.hive.ql.exec.vector.VectorizedRowBatch;\n+import org.apache.hadoop.io.BooleanWritable;\n+import org.apache.hadoop.io.ByteWritable;\n+import org.apache.hadoop.io.BytesWritable;\n+import org.apache.hadoop.io.DoubleWritable;\n+import org.apache.hadoop.io.FloatWritable;\n+import org.apache.hadoop.io.IntWritable;\n+import org.apache.hadoop.io.LongWritable;\n+import org.apache.hadoop.io.NullWritable;\n+import org.apache.hadoop.io.ShortWritable;\n+import org.apache.hadoop.io.Text;\n+import org.apache.hadoop.io.WritableComparable;\n+import org.apache.orc.TypeDescription;\n+import org.apache.orc.mapred.OrcList;\n+import org.apache.orc.mapred.OrcMapredRecordReader;\n+import org.apache.pinot.spi.data.readers.GenericRow;\n+import org.apache.pinot.spi.data.readers.RecordExtractor;\n+import org.apache.pinot.spi.data.readers.RecordExtractorConfig;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+\n+/**\n+ * Extractor for ORC records\n+ */\n+public class ORCRecordExtractor implements RecordExtractor<VectorizedRowBatch> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3ad57c497e4ff89fd1130df08bcae46e9cc4f70a"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzgwOTA0NA==", "bodyText": "Wait... Seems we are always creating batch of one row... So it might work but just inefficient...\nStill, I think this model does not apply to ORC record reader", "url": "https://github.com/apache/pinot/pull/5238#discussion_r407809044", "createdAt": "2020-04-14T01:17:02Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-plugins/pinot-input-format/pinot-orc/src/main/java/org/apache/pinot/plugin/inputformat/orc/ORCRecordExtractor.java", "diffHunk": "@@ -0,0 +1,144 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.plugin.inputformat.orc;\n+\n+import com.google.common.collect.ImmutableList;\n+import java.util.ArrayList;\n+import java.util.List;\n+import org.apache.hadoop.hive.ql.exec.vector.ColumnVector;\n+import org.apache.hadoop.hive.ql.exec.vector.VectorizedRowBatch;\n+import org.apache.hadoop.io.BooleanWritable;\n+import org.apache.hadoop.io.ByteWritable;\n+import org.apache.hadoop.io.BytesWritable;\n+import org.apache.hadoop.io.DoubleWritable;\n+import org.apache.hadoop.io.FloatWritable;\n+import org.apache.hadoop.io.IntWritable;\n+import org.apache.hadoop.io.LongWritable;\n+import org.apache.hadoop.io.NullWritable;\n+import org.apache.hadoop.io.ShortWritable;\n+import org.apache.hadoop.io.Text;\n+import org.apache.hadoop.io.WritableComparable;\n+import org.apache.orc.TypeDescription;\n+import org.apache.orc.mapred.OrcList;\n+import org.apache.orc.mapred.OrcMapredRecordReader;\n+import org.apache.pinot.spi.data.readers.GenericRow;\n+import org.apache.pinot.spi.data.readers.RecordExtractor;\n+import org.apache.pinot.spi.data.readers.RecordExtractorConfig;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+\n+/**\n+ * Extractor for ORC records\n+ */\n+public class ORCRecordExtractor implements RecordExtractor<VectorizedRowBatch> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzgwMjg4NA=="}, "originalCommit": {"oid": "3ad57c497e4ff89fd1130df08bcae46e9cc4f70a"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzgyNDQ3Mw==", "bodyText": "It works i think because of this\n_reusableVectorizedRowBatch = _orcSchema.createRowBatch(1);\nThe row batch size is 1.\nORCRecordReader tests also pass. The tests I added have 4 records.\nI prefer to keep this change. When you refactor, you can change it as needed", "url": "https://github.com/apache/pinot/pull/5238#discussion_r407824473", "createdAt": "2020-04-14T02:12:35Z", "author": {"login": "npawar"}, "path": "pinot-plugins/pinot-input-format/pinot-orc/src/main/java/org/apache/pinot/plugin/inputformat/orc/ORCRecordExtractor.java", "diffHunk": "@@ -0,0 +1,144 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.plugin.inputformat.orc;\n+\n+import com.google.common.collect.ImmutableList;\n+import java.util.ArrayList;\n+import java.util.List;\n+import org.apache.hadoop.hive.ql.exec.vector.ColumnVector;\n+import org.apache.hadoop.hive.ql.exec.vector.VectorizedRowBatch;\n+import org.apache.hadoop.io.BooleanWritable;\n+import org.apache.hadoop.io.ByteWritable;\n+import org.apache.hadoop.io.BytesWritable;\n+import org.apache.hadoop.io.DoubleWritable;\n+import org.apache.hadoop.io.FloatWritable;\n+import org.apache.hadoop.io.IntWritable;\n+import org.apache.hadoop.io.LongWritable;\n+import org.apache.hadoop.io.NullWritable;\n+import org.apache.hadoop.io.ShortWritable;\n+import org.apache.hadoop.io.Text;\n+import org.apache.hadoop.io.WritableComparable;\n+import org.apache.orc.TypeDescription;\n+import org.apache.orc.mapred.OrcList;\n+import org.apache.orc.mapred.OrcMapredRecordReader;\n+import org.apache.pinot.spi.data.readers.GenericRow;\n+import org.apache.pinot.spi.data.readers.RecordExtractor;\n+import org.apache.pinot.spi.data.readers.RecordExtractorConfig;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+\n+/**\n+ * Extractor for ORC records\n+ */\n+public class ORCRecordExtractor implements RecordExtractor<VectorizedRowBatch> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzgwMjg4NA=="}, "originalCommit": {"oid": "3ad57c497e4ff89fd1130df08bcae46e9cc4f70a"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzMTY3NTYzOnYy", "diffSide": "RIGHT", "path": "pinot-plugins/pinot-input-format/pinot-orc/src/test/java/org/apache/pinot/plugin/inputformat/orc/ORCRecordExtractorTest.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQwMDo1NTo0MFrOGE6Vcg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQwMToyMToxMVrOGE6wfQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzgwMzI1MA==", "bodyText": "I think this test will fail if you create a file with more than 1 records.", "url": "https://github.com/apache/pinot/pull/5238#discussion_r407803250", "createdAt": "2020-04-14T00:55:40Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-plugins/pinot-input-format/pinot-orc/src/test/java/org/apache/pinot/plugin/inputformat/orc/ORCRecordExtractorTest.java", "diffHunk": "@@ -0,0 +1,101 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.plugin.inputformat.orc;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.Map;\n+import org.apache.hadoop.conf.Configuration;\n+import org.apache.hadoop.fs.Path;\n+import org.apache.hadoop.io.DoubleWritable;\n+import org.apache.hadoop.io.IntWritable;\n+import org.apache.hadoop.io.LongWritable;\n+import org.apache.hadoop.io.Text;\n+import org.apache.orc.OrcFile;\n+import org.apache.orc.TypeDescription;\n+import org.apache.orc.Writer;\n+import org.apache.orc.mapred.OrcList;\n+import org.apache.orc.mapred.OrcMapredRecordWriter;\n+import org.apache.orc.mapred.OrcStruct;\n+import org.apache.pinot.spi.data.readers.AbstractRecordExtractorTest;\n+import org.apache.pinot.spi.data.readers.RecordReader;\n+\n+\n+/**\n+ * Tests the {@link ORCRecordExtractor} using a schema containing groovy transform functions\n+ */\n+public class ORCRecordExtractorTest extends AbstractRecordExtractorTest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3ad57c497e4ff89fd1130df08bcae46e9cc4f70a"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzgwODU4Mg==", "bodyText": "The test uses 4 records. Which test are you referring to that uses just 1?", "url": "https://github.com/apache/pinot/pull/5238#discussion_r407808582", "createdAt": "2020-04-14T01:15:09Z", "author": {"login": "npawar"}, "path": "pinot-plugins/pinot-input-format/pinot-orc/src/test/java/org/apache/pinot/plugin/inputformat/orc/ORCRecordExtractorTest.java", "diffHunk": "@@ -0,0 +1,101 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.plugin.inputformat.orc;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.Map;\n+import org.apache.hadoop.conf.Configuration;\n+import org.apache.hadoop.fs.Path;\n+import org.apache.hadoop.io.DoubleWritable;\n+import org.apache.hadoop.io.IntWritable;\n+import org.apache.hadoop.io.LongWritable;\n+import org.apache.hadoop.io.Text;\n+import org.apache.orc.OrcFile;\n+import org.apache.orc.TypeDescription;\n+import org.apache.orc.Writer;\n+import org.apache.orc.mapred.OrcList;\n+import org.apache.orc.mapred.OrcMapredRecordWriter;\n+import org.apache.orc.mapred.OrcStruct;\n+import org.apache.pinot.spi.data.readers.AbstractRecordExtractorTest;\n+import org.apache.pinot.spi.data.readers.RecordReader;\n+\n+\n+/**\n+ * Tests the {@link ORCRecordExtractor} using a schema containing groovy transform functions\n+ */\n+public class ORCRecordExtractorTest extends AbstractRecordExtractorTest {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzgwMzI1MA=="}, "originalCommit": {"oid": "3ad57c497e4ff89fd1130df08bcae46e9cc4f70a"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzgxMDE3Mw==", "bodyText": "Sorry didn't notice the records are from the parent class, never mind.", "url": "https://github.com/apache/pinot/pull/5238#discussion_r407810173", "createdAt": "2020-04-14T01:21:11Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-plugins/pinot-input-format/pinot-orc/src/test/java/org/apache/pinot/plugin/inputformat/orc/ORCRecordExtractorTest.java", "diffHunk": "@@ -0,0 +1,101 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.plugin.inputformat.orc;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.Map;\n+import org.apache.hadoop.conf.Configuration;\n+import org.apache.hadoop.fs.Path;\n+import org.apache.hadoop.io.DoubleWritable;\n+import org.apache.hadoop.io.IntWritable;\n+import org.apache.hadoop.io.LongWritable;\n+import org.apache.hadoop.io.Text;\n+import org.apache.orc.OrcFile;\n+import org.apache.orc.TypeDescription;\n+import org.apache.orc.Writer;\n+import org.apache.orc.mapred.OrcList;\n+import org.apache.orc.mapred.OrcMapredRecordWriter;\n+import org.apache.orc.mapred.OrcStruct;\n+import org.apache.pinot.spi.data.readers.AbstractRecordExtractorTest;\n+import org.apache.pinot.spi.data.readers.RecordReader;\n+\n+\n+/**\n+ * Tests the {@link ORCRecordExtractor} using a schema containing groovy transform functions\n+ */\n+public class ORCRecordExtractorTest extends AbstractRecordExtractorTest {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzgwMzI1MA=="}, "originalCommit": {"oid": "3ad57c497e4ff89fd1130df08bcae46e9cc4f70a"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzMTcxNzgwOnYy", "diffSide": "RIGHT", "path": "pinot-plugins/pinot-input-format/pinot-orc/src/test/java/org/apache/pinot/plugin/inputformat/orc/ORCRecordExtractorTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQwMToxOTowMVrOGE6uLQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQwMToxOTowMVrOGE6uLQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzgwOTU4MQ==", "bodyText": "Wrong format", "url": "https://github.com/apache/pinot/pull/5238#discussion_r407809581", "createdAt": "2020-04-14T01:19:01Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-plugins/pinot-input-format/pinot-orc/src/test/java/org/apache/pinot/plugin/inputformat/orc/ORCRecordExtractorTest.java", "diffHunk": "@@ -0,0 +1,101 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.plugin.inputformat.orc;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.Map;\n+import org.apache.hadoop.conf.Configuration;\n+import org.apache.hadoop.fs.Path;\n+import org.apache.hadoop.io.DoubleWritable;\n+import org.apache.hadoop.io.IntWritable;\n+import org.apache.hadoop.io.LongWritable;\n+import org.apache.hadoop.io.Text;\n+import org.apache.orc.OrcFile;\n+import org.apache.orc.TypeDescription;\n+import org.apache.orc.Writer;\n+import org.apache.orc.mapred.OrcList;\n+import org.apache.orc.mapred.OrcMapredRecordWriter;\n+import org.apache.orc.mapred.OrcStruct;\n+import org.apache.pinot.spi.data.readers.AbstractRecordExtractorTest;\n+import org.apache.pinot.spi.data.readers.RecordReader;\n+\n+\n+/**\n+ * Tests the {@link ORCRecordExtractor} using a schema containing groovy transform functions\n+ */\n+public class ORCRecordExtractorTest extends AbstractRecordExtractorTest {\n+\n+  private final File _dataFile = new File(_tempDir, \"events.orc\");\n+\n+  /**\n+   * Create an ORCRecordReader\n+   */\n+  @Override\n+  protected RecordReader createRecordReader()\n+      throws IOException {\n+    ORCRecordReader orcRecordReader = new ORCRecordReader();\n+    orcRecordReader.init(_dataFile, _pinotSchema, null);\n+    return orcRecordReader;\n+  }\n+\n+  /**\n+   * Create an ORC input file using the input records\n+   */\n+  @Override\n+  protected void createInputFile()\n+      throws IOException {\n+    TypeDescription schema = TypeDescription.createStruct();\n+    schema.addField(\"userID\", TypeDescription.createInt());\n+    schema.addField(\"firstName\", TypeDescription.createString());\n+    schema.addField(\"lastName\", TypeDescription.createString());\n+    TypeDescription typeBids = TypeDescription.createList(TypeDescription.createInt());\n+    schema.addField(\"bids\", typeBids);\n+    schema.addField(\"campaignInfo\", TypeDescription.createString());\n+    schema.addField(\"cost\", TypeDescription.createDouble());\n+    schema.addField(\"timestamp\", TypeDescription.createLong());\n+\n+    Writer writer = OrcFile.createWriter(new Path(_dataFile.getAbsolutePath()),\n+        OrcFile.writerOptions(new Configuration()).setSchema(schema));\n+    OrcMapredRecordWriter mrRecordWriter = new OrcMapredRecordWriter(writer);\n+    for (Map<String, Object> inputRecord : _inputRecords) {\n+      OrcStruct struct = new OrcStruct(schema);\n+      Integer userID = (Integer) inputRecord.get(\"userID\");\n+      struct.setFieldValue(\"userID\", userID == null ? null : new IntWritable(userID));\n+      String firstName = (String) inputRecord.get(\"firstName\");\n+      struct.setFieldValue(\"firstName\", firstName == null ? null : new Text(firstName));\n+      struct.setFieldValue(\"lastName\", new Text((String) inputRecord.get(\"lastName\")));\n+      List<Integer> bids = (List<Integer>) inputRecord.get(\"bids\");\n+      if (bids != null) {\n+        OrcList<IntWritable> bidsList = new OrcList<>(typeBids);\n+        for (Integer bid : bids) {\n+          bidsList.add(new IntWritable(bid));\n+        }\n+        struct.setFieldValue(\"bids\", bidsList);\n+      } else {\n+        struct.setFieldValue(\"bids\", null);\n+      }\n+      struct.setFieldValue(\"campaignInfo\", new Text((String) inputRecord.get(\"campaignInfo\")));\n+      struct.setFieldValue(\"cost\", new DoubleWritable((Double) inputRecord.get(\"cost\")));\n+      struct.setFieldValue(\"timestamp\", new LongWritable((Long) inputRecord.get(\"timestamp\")));\n+      mrRecordWriter.write(null, struct);\n+    } mrRecordWriter.close(null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3ad57c497e4ff89fd1130df08bcae46e9cc4f70a"}, "originalPosition": 99}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzMTc0NTc2OnYy", "diffSide": "RIGHT", "path": "pinot-plugins/pinot-input-format/pinot-orc/src/main/java/org/apache/pinot/plugin/inputformat/orc/ORCRecordExtractor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQwMTozNDoxM1rOGE6-sA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQwMTozNDoxM1rOGE6-sA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzgxMzgwOA==", "bodyText": "Please remove this log message, it will show up in every input message.  We don't seem to be logging this in other extractors either", "url": "https://github.com/apache/pinot/pull/5238#discussion_r407813808", "createdAt": "2020-04-14T01:34:13Z", "author": {"login": "mcvsubbu"}, "path": "pinot-plugins/pinot-input-format/pinot-orc/src/main/java/org/apache/pinot/plugin/inputformat/orc/ORCRecordExtractor.java", "diffHunk": "@@ -0,0 +1,144 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.plugin.inputformat.orc;\n+\n+import com.google.common.collect.ImmutableList;\n+import java.util.ArrayList;\n+import java.util.List;\n+import org.apache.hadoop.hive.ql.exec.vector.ColumnVector;\n+import org.apache.hadoop.hive.ql.exec.vector.VectorizedRowBatch;\n+import org.apache.hadoop.io.BooleanWritable;\n+import org.apache.hadoop.io.ByteWritable;\n+import org.apache.hadoop.io.BytesWritable;\n+import org.apache.hadoop.io.DoubleWritable;\n+import org.apache.hadoop.io.FloatWritable;\n+import org.apache.hadoop.io.IntWritable;\n+import org.apache.hadoop.io.LongWritable;\n+import org.apache.hadoop.io.NullWritable;\n+import org.apache.hadoop.io.ShortWritable;\n+import org.apache.hadoop.io.Text;\n+import org.apache.hadoop.io.WritableComparable;\n+import org.apache.orc.TypeDescription;\n+import org.apache.orc.mapred.OrcList;\n+import org.apache.orc.mapred.OrcMapredRecordReader;\n+import org.apache.pinot.spi.data.readers.GenericRow;\n+import org.apache.pinot.spi.data.readers.RecordExtractor;\n+import org.apache.pinot.spi.data.readers.RecordExtractorConfig;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+\n+/**\n+ * Extractor for ORC records\n+ */\n+public class ORCRecordExtractor implements RecordExtractor<VectorizedRowBatch> {\n+\n+  private static final Logger LOGGER = LoggerFactory.getLogger(ORCRecordExtractor.class);\n+\n+  private TypeDescription _orcSchema;\n+\n+  @Override\n+  public void init(RecordExtractorConfig recordExtractorConfig) {\n+    _orcSchema = ((ORCRecordExtractorConfig) recordExtractorConfig).getOrcSchema();\n+  }\n+\n+  @Override\n+  public GenericRow extract(List<String> sourceFieldNames, VectorizedRowBatch from, GenericRow to) {\n+    // TODO: use Pinot schema to fill the values to handle missing column and default values properly\n+\n+    // ORC's TypeDescription is the equivalent of a schema. The way we will support ORC in Pinot\n+    // will be to get the top level struct that contains all our fields and look through its\n+    // children to determine the fields in our schemas.\n+    if (_orcSchema.getCategory().equals(TypeDescription.Category.STRUCT)) {\n+      List<TypeDescription> orcSchemaChildren = _orcSchema.getChildren();\n+      for (int i = 0; i < orcSchemaChildren.size(); i++) {\n+        // Get current column in schema\n+        String currColumnName = _orcSchema.getFieldNames().get(i);\n+        if (!sourceFieldNames.contains(currColumnName)) {\n+          LOGGER.warn(\"Skipping column {} because it is not in source columns\", currColumnName);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3ad57c497e4ff89fd1130df08bcae46e9cc4f70a"}, "originalPosition": 74}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzNDI5MzM2OnYy", "diffSide": "RIGHT", "path": "pinot-plugins/pinot-input-format/pinot-avro-base/src/main/java/org/apache/pinot/plugin/inputformat/avro/AvroUtils.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxNTowNDoyM1rOGFTKNQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxNzoyMjoxOVrOGFZEpw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODIwOTk3Mw==", "bodyText": "Can value be an instance of primitive array?", "url": "https://github.com/apache/pinot/pull/5238#discussion_r408209973", "createdAt": "2020-04-14T15:04:23Z", "author": {"login": "mayankshriv"}, "path": "pinot-plugins/pinot-input-format/pinot-avro-base/src/main/java/org/apache/pinot/plugin/inputformat/avro/AvroUtils.java", "diffHunk": "@@ -305,46 +301,23 @@ public static boolean isSingleValueField(Field field) {\n     }\n   }\n \n-  @SuppressWarnings(\"unchecked\")\n-  public static void extractField(FieldSpec fieldSpec, GenericRecord from, GenericRow to) {\n-    String fieldName = fieldSpec.getName();\n-\n-    // Handle the Map type\n-    if (fieldName.endsWith(MAP_KEY_COLUMN_SUFFIX)) {\n-      String avroFieldName = fieldName.substring(0, fieldName.length() - MAP_KEY_COLUMN_SUFFIX.length());\n-      Map map = (Map) from.get(avroFieldName);\n-      if (map != null) {\n-        // Sort the keys so that the order is deterministic\n-        TreeSet sortedKeys = new TreeSet(map.keySet());\n-        to.putField(fieldName, RecordReaderUtils.convert(fieldSpec, sortedKeys));\n-        return;\n-      }\n-    } else if (fieldName.endsWith(MAP_VALUE_COLUMN_SUFFIX)) {\n-      String avroFieldName = fieldName.substring(0, fieldName.length() - MAP_VALUE_COLUMN_SUFFIX.length());\n-      Map map = (Map) from.get(avroFieldName);\n-      if (map != null) {\n-        // Sort the keys so that the order is deterministic\n-        TreeMap sortedMap = new TreeMap<>(map);\n-        to.putField(fieldName, RecordReaderUtils.convert(fieldSpec, sortedMap.values()));\n-        return;\n-      }\n-    }\n-    to.putField(fieldName, RecordReaderUtils.convert(fieldSpec, convert(fieldSpec, from.get(fieldName))));\n-  }\n-\n   /**\n-   * Converts the value based on the given field spec.\n+   * Converts the value to a single-valued value or a multi-valued value\n    */\n-  public static Object convert(FieldSpec fieldSpec, @Nullable Object value) {\n-    if (fieldSpec.isSingleValueField()) {\n-      return handleSingleValue(value);\n+  public static Object convert(Object value) {\n+    Object convertedValue;\n+    if (value instanceof Collection) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e12c035a961305656393a4802bffc2c809155525"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODMwNjg1NQ==", "bodyText": "In avro, it cannot be", "url": "https://github.com/apache/pinot/pull/5238#discussion_r408306855", "createdAt": "2020-04-14T17:22:19Z", "author": {"login": "npawar"}, "path": "pinot-plugins/pinot-input-format/pinot-avro-base/src/main/java/org/apache/pinot/plugin/inputformat/avro/AvroUtils.java", "diffHunk": "@@ -305,46 +301,23 @@ public static boolean isSingleValueField(Field field) {\n     }\n   }\n \n-  @SuppressWarnings(\"unchecked\")\n-  public static void extractField(FieldSpec fieldSpec, GenericRecord from, GenericRow to) {\n-    String fieldName = fieldSpec.getName();\n-\n-    // Handle the Map type\n-    if (fieldName.endsWith(MAP_KEY_COLUMN_SUFFIX)) {\n-      String avroFieldName = fieldName.substring(0, fieldName.length() - MAP_KEY_COLUMN_SUFFIX.length());\n-      Map map = (Map) from.get(avroFieldName);\n-      if (map != null) {\n-        // Sort the keys so that the order is deterministic\n-        TreeSet sortedKeys = new TreeSet(map.keySet());\n-        to.putField(fieldName, RecordReaderUtils.convert(fieldSpec, sortedKeys));\n-        return;\n-      }\n-    } else if (fieldName.endsWith(MAP_VALUE_COLUMN_SUFFIX)) {\n-      String avroFieldName = fieldName.substring(0, fieldName.length() - MAP_VALUE_COLUMN_SUFFIX.length());\n-      Map map = (Map) from.get(avroFieldName);\n-      if (map != null) {\n-        // Sort the keys so that the order is deterministic\n-        TreeMap sortedMap = new TreeMap<>(map);\n-        to.putField(fieldName, RecordReaderUtils.convert(fieldSpec, sortedMap.values()));\n-        return;\n-      }\n-    }\n-    to.putField(fieldName, RecordReaderUtils.convert(fieldSpec, convert(fieldSpec, from.get(fieldName))));\n-  }\n-\n   /**\n-   * Converts the value based on the given field spec.\n+   * Converts the value to a single-valued value or a multi-valued value\n    */\n-  public static Object convert(FieldSpec fieldSpec, @Nullable Object value) {\n-    if (fieldSpec.isSingleValueField()) {\n-      return handleSingleValue(value);\n+  public static Object convert(Object value) {\n+    Object convertedValue;\n+    if (value instanceof Collection) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODIwOTk3Mw=="}, "originalCommit": {"oid": "e12c035a961305656393a4802bffc2c809155525"}, "originalPosition": 69}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzNDI5ODIxOnYy", "diffSide": "RIGHT", "path": "pinot-plugins/pinot-input-format/pinot-avro-base/src/main/java/org/apache/pinot/plugin/inputformat/avro/AvroRecordExtractor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxNTowNToyNFrOGFTNPA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxNzowMDoxM1rOGFYPvg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODIxMDc0OA==", "bodyText": "So we no longer need source schema?", "url": "https://github.com/apache/pinot/pull/5238#discussion_r408210748", "createdAt": "2020-04-14T15:05:24Z", "author": {"login": "mayankshriv"}, "path": "pinot-plugins/pinot-input-format/pinot-avro-base/src/main/java/org/apache/pinot/plugin/inputformat/avro/AvroRecordExtractor.java", "diffHunk": "@@ -18,18 +18,31 @@\n  */\n package org.apache.pinot.plugin.inputformat.avro;\n \n-import org.apache.avro.generic.GenericData;\n-import org.apache.pinot.spi.data.FieldSpec;\n-import org.apache.pinot.spi.data.Schema;\n-import org.apache.pinot.spi.data.readers.AbstractBaseRecordExtractor;\n+import java.util.List;\n+import javax.annotation.Nullable;\n+import org.apache.avro.generic.GenericRecord;\n import org.apache.pinot.spi.data.readers.GenericRow;\n+import org.apache.pinot.spi.data.readers.RecordExtractor;\n+import org.apache.pinot.spi.data.readers.RecordExtractorConfig;\n+\n+\n+/**\n+ * Extractor for Avro Records\n+ */\n+public class AvroRecordExtractor implements RecordExtractor<GenericRecord> {\n+  private List<String> _fields;\n+\n+  @Override\n+  public void init(List<String> fields, @Nullable RecordExtractorConfig recordExtractorConfig) {\n+    _fields = fields;\n+  }\n \n-public class AvroRecordExtractor extends AbstractBaseRecordExtractor<GenericData.Record> {\n   @Override\n-  public GenericRow extract(Schema schema, GenericData.Record from, GenericRow to) {\n-    for (FieldSpec fieldSpec : schema.getAllFieldSpecs()) {\n-      FieldSpec incomingFieldSpec = getFieldSpecToUse(schema, fieldSpec);\n-      AvroUtils.extractField(incomingFieldSpec, from, to);\n+  public GenericRow extract(GenericRecord from, GenericRow to) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e12c035a961305656393a4802bffc2c809155525"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODI5MzMxMA==", "bodyText": "That's right. The pinot schema represents the destination columns. We don't have schema for source anymore", "url": "https://github.com/apache/pinot/pull/5238#discussion_r408293310", "createdAt": "2020-04-14T17:00:13Z", "author": {"login": "npawar"}, "path": "pinot-plugins/pinot-input-format/pinot-avro-base/src/main/java/org/apache/pinot/plugin/inputformat/avro/AvroRecordExtractor.java", "diffHunk": "@@ -18,18 +18,31 @@\n  */\n package org.apache.pinot.plugin.inputformat.avro;\n \n-import org.apache.avro.generic.GenericData;\n-import org.apache.pinot.spi.data.FieldSpec;\n-import org.apache.pinot.spi.data.Schema;\n-import org.apache.pinot.spi.data.readers.AbstractBaseRecordExtractor;\n+import java.util.List;\n+import javax.annotation.Nullable;\n+import org.apache.avro.generic.GenericRecord;\n import org.apache.pinot.spi.data.readers.GenericRow;\n+import org.apache.pinot.spi.data.readers.RecordExtractor;\n+import org.apache.pinot.spi.data.readers.RecordExtractorConfig;\n+\n+\n+/**\n+ * Extractor for Avro Records\n+ */\n+public class AvroRecordExtractor implements RecordExtractor<GenericRecord> {\n+  private List<String> _fields;\n+\n+  @Override\n+  public void init(List<String> fields, @Nullable RecordExtractorConfig recordExtractorConfig) {\n+    _fields = fields;\n+  }\n \n-public class AvroRecordExtractor extends AbstractBaseRecordExtractor<GenericData.Record> {\n   @Override\n-  public GenericRow extract(Schema schema, GenericData.Record from, GenericRow to) {\n-    for (FieldSpec fieldSpec : schema.getAllFieldSpecs()) {\n-      FieldSpec incomingFieldSpec = getFieldSpecToUse(schema, fieldSpec);\n-      AvroUtils.extractField(incomingFieldSpec, from, to);\n+  public GenericRow extract(GenericRecord from, GenericRow to) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODIxMDc0OA=="}, "originalCommit": {"oid": "e12c035a961305656393a4802bffc2c809155525"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzNDMxMjg0OnYy", "diffSide": "RIGHT", "path": "pinot-plugins/pinot-input-format/pinot-avro-base/src/main/java/org/apache/pinot/plugin/inputformat/avro/AvroUtils.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxNTowODoyMFrOGFTWYQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxNTowODoyMFrOGFTWYQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODIxMzA4OQ==", "bodyText": "Probably a bit more description would help.", "url": "https://github.com/apache/pinot/pull/5238#discussion_r408213089", "createdAt": "2020-04-14T15:08:20Z", "author": {"login": "mayankshriv"}, "path": "pinot-plugins/pinot-input-format/pinot-avro-base/src/main/java/org/apache/pinot/plugin/inputformat/avro/AvroUtils.java", "diffHunk": "@@ -305,46 +301,23 @@ public static boolean isSingleValueField(Field field) {\n     }\n   }\n \n-  @SuppressWarnings(\"unchecked\")\n-  public static void extractField(FieldSpec fieldSpec, GenericRecord from, GenericRow to) {\n-    String fieldName = fieldSpec.getName();\n-\n-    // Handle the Map type\n-    if (fieldName.endsWith(MAP_KEY_COLUMN_SUFFIX)) {\n-      String avroFieldName = fieldName.substring(0, fieldName.length() - MAP_KEY_COLUMN_SUFFIX.length());\n-      Map map = (Map) from.get(avroFieldName);\n-      if (map != null) {\n-        // Sort the keys so that the order is deterministic\n-        TreeSet sortedKeys = new TreeSet(map.keySet());\n-        to.putField(fieldName, RecordReaderUtils.convert(fieldSpec, sortedKeys));\n-        return;\n-      }\n-    } else if (fieldName.endsWith(MAP_VALUE_COLUMN_SUFFIX)) {\n-      String avroFieldName = fieldName.substring(0, fieldName.length() - MAP_VALUE_COLUMN_SUFFIX.length());\n-      Map map = (Map) from.get(avroFieldName);\n-      if (map != null) {\n-        // Sort the keys so that the order is deterministic\n-        TreeMap sortedMap = new TreeMap<>(map);\n-        to.putField(fieldName, RecordReaderUtils.convert(fieldSpec, sortedMap.values()));\n-        return;\n-      }\n-    }\n-    to.putField(fieldName, RecordReaderUtils.convert(fieldSpec, convert(fieldSpec, from.get(fieldName))));\n-  }\n-\n   /**\n-   * Converts the value based on the given field spec.\n+   * Converts the value to a single-valued value or a multi-valued value\n    */\n-  public static Object convert(FieldSpec fieldSpec, @Nullable Object value) {\n-    if (fieldSpec.isSingleValueField()) {\n-      return handleSingleValue(value);\n+  public static Object convert(Object value) {\n+    Object convertedValue;\n+    if (value instanceof Collection) {\n+      convertedValue = handleMultiValue((Collection) value);\n+    } else if (value instanceof Map) {\n+      convertedValue = handleMap((Map) value);\n     } else {\n-      return handleMultiValue((Collection) value);\n+      convertedValue = handleSingleValue(value);\n     }\n+    return convertedValue;\n   }\n \n   /**\n-   * Converts the value based on the given field spec.\n+   * Converts the value to a single-valued value", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e12c035a961305656393a4802bffc2c809155525"}, "originalPosition": 82}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzNDMxNTI0OnYy", "diffSide": "RIGHT", "path": "pinot-plugins/pinot-input-format/pinot-avro-base/src/main/java/org/apache/pinot/plugin/inputformat/avro/AvroUtils.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxNTowODo0N1rOGFTX1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxNTowODo0N1rOGFTX1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODIxMzQ2MA==", "bodyText": "s/withing/within", "url": "https://github.com/apache/pinot/pull/5238#discussion_r408213460", "createdAt": "2020-04-14T15:08:47Z", "author": {"login": "mayankshriv"}, "path": "pinot-plugins/pinot-input-format/pinot-avro-base/src/main/java/org/apache/pinot/plugin/inputformat/avro/AvroUtils.java", "diffHunk": "@@ -368,6 +341,21 @@ public static Object handleMultiValue(@Nullable Collection values) {\n     for (Object value : values) {\n       list.add(handleSingleValue(value));\n     }\n-    return list;\n+    return RecordReaderUtils.convertMultiValue(list);\n+  }\n+\n+  /**\n+   * Converts the values withing the map to single-valued values", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e12c035a961305656393a4802bffc2c809155525"}, "originalPosition": 109}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzNDQ4NTE2OnYy", "diffSide": "RIGHT", "path": "pinot-spi/src/main/java/org/apache/pinot/spi/data/function/evaluators/ExpressionEvaluator.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxNTo0NToxMlrOGFVDmg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQyMjozOTo0NVrOGFjegg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODI0MTA1MA==", "bodyText": "Is genericRecord the right argument for this api, to make it more general purpose evaluator?", "url": "https://github.com/apache/pinot/pull/5238#discussion_r408241050", "createdAt": "2020-04-14T15:45:12Z", "author": {"login": "mayankshriv"}, "path": "pinot-spi/src/main/java/org/apache/pinot/spi/data/function/evaluators/ExpressionEvaluator.java", "diffHunk": "@@ -0,0 +1,43 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.spi.data.function.evaluators;\n+\n+import java.util.List;\n+import org.apache.pinot.spi.data.readers.GenericRow;\n+\n+\n+/**\n+ * Interface for evaluators of transform function expressions of schema field specs\n+ * They transformFunction follows the convention:\n+ *  \"transformFunction\": \"FunctionType({function}, argument1, argument2,...argumentN)\"\n+ *  For example,\n+ *  \"transformFunction\" : \"Groovy({firstName + ' ' + lastName}, firstName, lastName)\"\n+ */\n+public interface ExpressionEvaluator {\n+\n+  /**\n+   * Get the arguments of the function\n+   */\n+  List<String> getArguments();\n+\n+  /**\n+   * Evaluate the function on the generic row and return the result\n+   */\n+  Object evaluate(GenericRow genericRow);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e12c035a961305656393a4802bffc2c809155525"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODQ3NzMxNA==", "bodyText": "This is only invoked within ExpressionTransformers, which operates on GenericRow. We could change this to a Map with just the needed fields. But I thought better to avoid creating additional Map for every transformation of every row, and let the evaluator pull out whatever is needed", "url": "https://github.com/apache/pinot/pull/5238#discussion_r408477314", "createdAt": "2020-04-14T22:39:45Z", "author": {"login": "npawar"}, "path": "pinot-spi/src/main/java/org/apache/pinot/spi/data/function/evaluators/ExpressionEvaluator.java", "diffHunk": "@@ -0,0 +1,43 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.spi.data.function.evaluators;\n+\n+import java.util.List;\n+import org.apache.pinot.spi.data.readers.GenericRow;\n+\n+\n+/**\n+ * Interface for evaluators of transform function expressions of schema field specs\n+ * They transformFunction follows the convention:\n+ *  \"transformFunction\": \"FunctionType({function}, argument1, argument2,...argumentN)\"\n+ *  For example,\n+ *  \"transformFunction\" : \"Groovy({firstName + ' ' + lastName}, firstName, lastName)\"\n+ */\n+public interface ExpressionEvaluator {\n+\n+  /**\n+   * Get the arguments of the function\n+   */\n+  List<String> getArguments();\n+\n+  /**\n+   * Evaluate the function on the generic row and return the result\n+   */\n+  Object evaluate(GenericRow genericRow);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODI0MTA1MA=="}, "originalCommit": {"oid": "e12c035a961305656393a4802bffc2c809155525"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzNDUwNTI2OnYy", "diffSide": "RIGHT", "path": "pinot-spi/src/main/java/org/apache/pinot/spi/data/function/evaluators/ExpressionEvaluator.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxNTo0OToxOVrOGFVQEg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQyMjozNjozOFrOGFjZ8w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODI0NDI0Mg==", "bodyText": "Is this really expression evaluator, or more of a function evaluator? For example, the function could be a complex groovy script?  Also, how about nested functions?", "url": "https://github.com/apache/pinot/pull/5238#discussion_r408244242", "createdAt": "2020-04-14T15:49:19Z", "author": {"login": "mayankshriv"}, "path": "pinot-spi/src/main/java/org/apache/pinot/spi/data/function/evaluators/ExpressionEvaluator.java", "diffHunk": "@@ -0,0 +1,43 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.spi.data.function.evaluators;\n+\n+import java.util.List;\n+import org.apache.pinot.spi.data.readers.GenericRow;\n+\n+\n+/**\n+ * Interface for evaluators of transform function expressions of schema field specs\n+ * They transformFunction follows the convention:\n+ *  \"transformFunction\": \"FunctionType({function}, argument1, argument2,...argumentN)\"\n+ *  For example,\n+ *  \"transformFunction\" : \"Groovy({firstName + ' ' + lastName}, firstName, lastName)\"\n+ */\n+public interface ExpressionEvaluator {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e12c035a961305656393a4802bffc2c809155525"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODQ3NjE0Nw==", "bodyText": "Yes it can be several expressions, functions, nested functions.\nFunction was already quite overloaded. I didn't want this to be confused as an evaluator for TransformFunction. And we also have a FunctionExpressionEvaluator (which should go away).\nBesides, this is only invoked inside the ExpressionTransformer, hence thought ExpressionEvaluator makes sense.\nI don't have a strong preference. But just thought this was less confusing", "url": "https://github.com/apache/pinot/pull/5238#discussion_r408476147", "createdAt": "2020-04-14T22:36:38Z", "author": {"login": "npawar"}, "path": "pinot-spi/src/main/java/org/apache/pinot/spi/data/function/evaluators/ExpressionEvaluator.java", "diffHunk": "@@ -0,0 +1,43 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.spi.data.function.evaluators;\n+\n+import java.util.List;\n+import org.apache.pinot.spi.data.readers.GenericRow;\n+\n+\n+/**\n+ * Interface for evaluators of transform function expressions of schema field specs\n+ * They transformFunction follows the convention:\n+ *  \"transformFunction\": \"FunctionType({function}, argument1, argument2,...argumentN)\"\n+ *  For example,\n+ *  \"transformFunction\" : \"Groovy({firstName + ' ' + lastName}, firstName, lastName)\"\n+ */\n+public interface ExpressionEvaluator {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODI0NDI0Mg=="}, "originalCommit": {"oid": "e12c035a961305656393a4802bffc2c809155525"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzNDUxNjI3OnYy", "diffSide": "RIGHT", "path": "pinot-spi/src/main/java/org/apache/pinot/spi/data/function/evaluators/GroovyExpressionEvaluator.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxNTo1MTo0NVrOGFVXIg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxNjo1Mjo0MFrOGFX7rA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODI0NjA1MA==", "bodyText": "Is this the only syntax available for a groovy script?", "url": "https://github.com/apache/pinot/pull/5238#discussion_r408246050", "createdAt": "2020-04-14T15:51:45Z", "author": {"login": "mayankshriv"}, "path": "pinot-spi/src/main/java/org/apache/pinot/spi/data/function/evaluators/GroovyExpressionEvaluator.java", "diffHunk": "@@ -0,0 +1,102 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.spi.data.function.evaluators;\n+\n+import com.google.common.base.Splitter;\n+import groovy.lang.Binding;\n+import groovy.lang.GroovyShell;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+import org.apache.pinot.spi.data.readers.GenericRow;\n+\n+\n+/**\n+ * An {@link ExpressionEvaluator} for evaluating schema transform expressions written in Groovy.\n+ * GroovyShell is used to execute expressions.\n+ *\n+ * The transform expression must follow the convention Groovy({expression}, arguments1, argument2...)\n+ * For example:\n+ * \"dimensionFieldSpecs\": [\n+ *     {\n+ *       \"name\": \"fullName\",\n+ *       \"dataType\": \"STRING\",\n+ *       \"transformFunction\": \"Groovy({firstName+' '+lastName}, firstName, lastName)\"\n+ *     }\n+ *  ]\n+ */\n+public class GroovyExpressionEvaluator implements ExpressionEvaluator {\n+\n+  private static final String GROOVY_EXPRESSION_PREFIX = \"Groovy\";\n+  private static final String GROOVY_FUNCTION_REGEX = \"Groovy\\\\(\\\\{(?<script>.+)}(,(?<arguments>.+))?\\\\)\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e12c035a961305656393a4802bffc2c809155525"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODI4ODE3Mg==", "bodyText": "This is the convention we will follow\nFunctionType({script}, argument1, argument2...)\nFor Groovy that becomes\nGroovy({groovy script}, argument1, argument2)\nThis can be easily extended to other function types. I've put some more details in the PR description, and also in the design doc linked in the PR description", "url": "https://github.com/apache/pinot/pull/5238#discussion_r408288172", "createdAt": "2020-04-14T16:52:40Z", "author": {"login": "npawar"}, "path": "pinot-spi/src/main/java/org/apache/pinot/spi/data/function/evaluators/GroovyExpressionEvaluator.java", "diffHunk": "@@ -0,0 +1,102 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.spi.data.function.evaluators;\n+\n+import com.google.common.base.Splitter;\n+import groovy.lang.Binding;\n+import groovy.lang.GroovyShell;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+import org.apache.pinot.spi.data.readers.GenericRow;\n+\n+\n+/**\n+ * An {@link ExpressionEvaluator} for evaluating schema transform expressions written in Groovy.\n+ * GroovyShell is used to execute expressions.\n+ *\n+ * The transform expression must follow the convention Groovy({expression}, arguments1, argument2...)\n+ * For example:\n+ * \"dimensionFieldSpecs\": [\n+ *     {\n+ *       \"name\": \"fullName\",\n+ *       \"dataType\": \"STRING\",\n+ *       \"transformFunction\": \"Groovy({firstName+' '+lastName}, firstName, lastName)\"\n+ *     }\n+ *  ]\n+ */\n+public class GroovyExpressionEvaluator implements ExpressionEvaluator {\n+\n+  private static final String GROOVY_EXPRESSION_PREFIX = \"Groovy\";\n+  private static final String GROOVY_FUNCTION_REGEX = \"Groovy\\\\(\\\\{(?<script>.+)}(,(?<arguments>.+))?\\\\)\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODI0NjA1MA=="}, "originalCommit": {"oid": "e12c035a961305656393a4802bffc2c809155525"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzNDUyMzA4OnYy", "diffSide": "RIGHT", "path": "pinot-spi/src/main/java/org/apache/pinot/spi/data/function/evaluators/GroovyExpressionEvaluator.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxNTo1MzoxM1rOGFVbOg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxNjo1Mzo0NlrOGFX-hQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODI0NzA5OA==", "bodyText": "Checkout Groovy Binding for argument biniding.", "url": "https://github.com/apache/pinot/pull/5238#discussion_r408247098", "createdAt": "2020-04-14T15:53:13Z", "author": {"login": "mayankshriv"}, "path": "pinot-spi/src/main/java/org/apache/pinot/spi/data/function/evaluators/GroovyExpressionEvaluator.java", "diffHunk": "@@ -0,0 +1,102 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.spi.data.function.evaluators;\n+\n+import com.google.common.base.Splitter;\n+import groovy.lang.Binding;\n+import groovy.lang.GroovyShell;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+import org.apache.pinot.spi.data.readers.GenericRow;\n+\n+\n+/**\n+ * An {@link ExpressionEvaluator} for evaluating schema transform expressions written in Groovy.\n+ * GroovyShell is used to execute expressions.\n+ *\n+ * The transform expression must follow the convention Groovy({expression}, arguments1, argument2...)\n+ * For example:\n+ * \"dimensionFieldSpecs\": [\n+ *     {\n+ *       \"name\": \"fullName\",\n+ *       \"dataType\": \"STRING\",\n+ *       \"transformFunction\": \"Groovy({firstName+' '+lastName}, firstName, lastName)\"\n+ *     }\n+ *  ]\n+ */\n+public class GroovyExpressionEvaluator implements ExpressionEvaluator {\n+\n+  private static final String GROOVY_EXPRESSION_PREFIX = \"Groovy\";\n+  private static final String GROOVY_FUNCTION_REGEX = \"Groovy\\\\(\\\\{(?<script>.+)}(,(?<arguments>.+))?\\\\)\";\n+  private static final Pattern GROOVY_FUNCTION_PATTERN =\n+      Pattern.compile(GROOVY_FUNCTION_REGEX, Pattern.CASE_INSENSITIVE);\n+  private static final String ARGUMENTS_GROUP_NAME = \"arguments\";\n+  private static final String SCRIPT_GROUP_NAME = \"script\";\n+  private static final String ARGUMENTS_SEPARATOR = \",\";\n+\n+  private List<String> _arguments;\n+  private String _script;\n+\n+  public GroovyExpressionEvaluator(String transformExpression) {\n+    Matcher matcher = GROOVY_FUNCTION_PATTERN.matcher(transformExpression);\n+    if (matcher.matches()) {\n+      _script = matcher.group(SCRIPT_GROUP_NAME);\n+\n+      String arguments = matcher.group(ARGUMENTS_GROUP_NAME);\n+      if (arguments != null) {\n+        _arguments = Splitter.on(ARGUMENTS_SEPARATOR).trimResults().splitToList(arguments);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e12c035a961305656393a4802bffc2c809155525"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODI4ODkwMQ==", "bodyText": "That's exactly what we are using. Check in the evaluate method in GroovyExpressionEvaluator", "url": "https://github.com/apache/pinot/pull/5238#discussion_r408288901", "createdAt": "2020-04-14T16:53:46Z", "author": {"login": "npawar"}, "path": "pinot-spi/src/main/java/org/apache/pinot/spi/data/function/evaluators/GroovyExpressionEvaluator.java", "diffHunk": "@@ -0,0 +1,102 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.spi.data.function.evaluators;\n+\n+import com.google.common.base.Splitter;\n+import groovy.lang.Binding;\n+import groovy.lang.GroovyShell;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+import org.apache.pinot.spi.data.readers.GenericRow;\n+\n+\n+/**\n+ * An {@link ExpressionEvaluator} for evaluating schema transform expressions written in Groovy.\n+ * GroovyShell is used to execute expressions.\n+ *\n+ * The transform expression must follow the convention Groovy({expression}, arguments1, argument2...)\n+ * For example:\n+ * \"dimensionFieldSpecs\": [\n+ *     {\n+ *       \"name\": \"fullName\",\n+ *       \"dataType\": \"STRING\",\n+ *       \"transformFunction\": \"Groovy({firstName+' '+lastName}, firstName, lastName)\"\n+ *     }\n+ *  ]\n+ */\n+public class GroovyExpressionEvaluator implements ExpressionEvaluator {\n+\n+  private static final String GROOVY_EXPRESSION_PREFIX = \"Groovy\";\n+  private static final String GROOVY_FUNCTION_REGEX = \"Groovy\\\\(\\\\{(?<script>.+)}(,(?<arguments>.+))?\\\\)\";\n+  private static final Pattern GROOVY_FUNCTION_PATTERN =\n+      Pattern.compile(GROOVY_FUNCTION_REGEX, Pattern.CASE_INSENSITIVE);\n+  private static final String ARGUMENTS_GROUP_NAME = \"arguments\";\n+  private static final String SCRIPT_GROUP_NAME = \"script\";\n+  private static final String ARGUMENTS_SEPARATOR = \",\";\n+\n+  private List<String> _arguments;\n+  private String _script;\n+\n+  public GroovyExpressionEvaluator(String transformExpression) {\n+    Matcher matcher = GROOVY_FUNCTION_PATTERN.matcher(transformExpression);\n+    if (matcher.matches()) {\n+      _script = matcher.group(SCRIPT_GROUP_NAME);\n+\n+      String arguments = matcher.group(ARGUMENTS_GROUP_NAME);\n+      if (arguments != null) {\n+        _arguments = Splitter.on(ARGUMENTS_SEPARATOR).trimResults().splitToList(arguments);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODI0NzA5OA=="}, "originalCommit": {"oid": "e12c035a961305656393a4802bffc2c809155525"}, "originalPosition": 67}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzNTkzNzIyOnYy", "diffSide": "RIGHT", "path": "pinot-spi/src/main/java/org/apache/pinot/spi/data/function/evaluators/DefaultTimeSpecEvaluator.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQyMjoyOTowN1rOGFjPWw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwMDo0MzowOFrOGFl2Zg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODQ3MzQzNQ==", "bodyText": "Argument should only contain _incomingTimeColumn?", "url": "https://github.com/apache/pinot/pull/5238#discussion_r408473435", "createdAt": "2020-04-14T22:29:07Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-spi/src/main/java/org/apache/pinot/spi/data/function/evaluators/DefaultTimeSpecEvaluator.java", "diffHunk": "@@ -0,0 +1,72 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.spi.data.function.evaluators;\n+\n+import com.google.common.base.Preconditions;\n+import com.google.common.collect.Lists;\n+import java.util.List;\n+import org.apache.pinot.spi.data.TimeFieldSpec;\n+import org.apache.pinot.spi.data.TimeGranularitySpec;\n+import org.apache.pinot.spi.data.readers.GenericRow;\n+import org.apache.pinot.spi.utils.TimeConverter;\n+import org.apache.pinot.spi.utils.TimeUtils;\n+\n+\n+/**\n+ * The {@code DefaultTimeSpecEvaluator} class will convert the time value based on the {@link TimeFieldSpec}.\n+ */\n+public class DefaultTimeSpecEvaluator implements ExpressionEvaluator {\n+  private String _incomingTimeColumn;\n+  private String _outgoingTimeColumn;\n+  private TimeConverter _incomingTimeConverter;\n+  private TimeConverter _outgoingTimeConverter;\n+  private boolean _isValidated = false;\n+\n+  public DefaultTimeSpecEvaluator(TimeGranularitySpec incomingGranularitySpec,\n+      TimeGranularitySpec outgoingGranularitySpec) {\n+    Preconditions.checkState(!incomingGranularitySpec.equals(outgoingGranularitySpec));\n+    _incomingTimeColumn = incomingGranularitySpec.getName();\n+    _outgoingTimeColumn = outgoingGranularitySpec.getName();\n+    Preconditions.checkState(!_incomingTimeColumn.equals(_outgoingTimeColumn));\n+    _incomingTimeConverter = new TimeConverter(incomingGranularitySpec);\n+    _outgoingTimeConverter = new TimeConverter(outgoingGranularitySpec);\n+  }\n+\n+  @Override\n+  public List<String> getArguments() {\n+    return Lists.newArrayList(_incomingTimeColumn, _outgoingTimeColumn);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2570bf792aa94dca41909cdd3c9a09b223285b74"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODQ3OTU3OQ==", "bodyText": "No. If it contains only incoming, we will never read the outgoing in the record extractor. The ExpressionTransformer will not know about outgoing time value. This is necessary to handle the case where outgoing is already computed by user.", "url": "https://github.com/apache/pinot/pull/5238#discussion_r408479579", "createdAt": "2020-04-14T22:46:04Z", "author": {"login": "npawar"}, "path": "pinot-spi/src/main/java/org/apache/pinot/spi/data/function/evaluators/DefaultTimeSpecEvaluator.java", "diffHunk": "@@ -0,0 +1,72 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.spi.data.function.evaluators;\n+\n+import com.google.common.base.Preconditions;\n+import com.google.common.collect.Lists;\n+import java.util.List;\n+import org.apache.pinot.spi.data.TimeFieldSpec;\n+import org.apache.pinot.spi.data.TimeGranularitySpec;\n+import org.apache.pinot.spi.data.readers.GenericRow;\n+import org.apache.pinot.spi.utils.TimeConverter;\n+import org.apache.pinot.spi.utils.TimeUtils;\n+\n+\n+/**\n+ * The {@code DefaultTimeSpecEvaluator} class will convert the time value based on the {@link TimeFieldSpec}.\n+ */\n+public class DefaultTimeSpecEvaluator implements ExpressionEvaluator {\n+  private String _incomingTimeColumn;\n+  private String _outgoingTimeColumn;\n+  private TimeConverter _incomingTimeConverter;\n+  private TimeConverter _outgoingTimeConverter;\n+  private boolean _isValidated = false;\n+\n+  public DefaultTimeSpecEvaluator(TimeGranularitySpec incomingGranularitySpec,\n+      TimeGranularitySpec outgoingGranularitySpec) {\n+    Preconditions.checkState(!incomingGranularitySpec.equals(outgoingGranularitySpec));\n+    _incomingTimeColumn = incomingGranularitySpec.getName();\n+    _outgoingTimeColumn = outgoingGranularitySpec.getName();\n+    Preconditions.checkState(!_incomingTimeColumn.equals(_outgoingTimeColumn));\n+    _incomingTimeConverter = new TimeConverter(incomingGranularitySpec);\n+    _outgoingTimeConverter = new TimeConverter(outgoingGranularitySpec);\n+  }\n+\n+  @Override\n+  public List<String> getArguments() {\n+    return Lists.newArrayList(_incomingTimeColumn, _outgoingTimeColumn);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODQ3MzQzNQ=="}, "originalCommit": {"oid": "2570bf792aa94dca41909cdd3c9a09b223285b74"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODQ4NDM0Mg==", "bodyText": "I don't follow. Arguments should only contain the input columns. For time conversion, the input should always be the incoming time column, it should never be the outgoing time column.\nThe fields passed to the record extractor should be the outgoing column name, and the arguments for the evaluator should be the incoming column name right?", "url": "https://github.com/apache/pinot/pull/5238#discussion_r408484342", "createdAt": "2020-04-14T22:59:28Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-spi/src/main/java/org/apache/pinot/spi/data/function/evaluators/DefaultTimeSpecEvaluator.java", "diffHunk": "@@ -0,0 +1,72 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.spi.data.function.evaluators;\n+\n+import com.google.common.base.Preconditions;\n+import com.google.common.collect.Lists;\n+import java.util.List;\n+import org.apache.pinot.spi.data.TimeFieldSpec;\n+import org.apache.pinot.spi.data.TimeGranularitySpec;\n+import org.apache.pinot.spi.data.readers.GenericRow;\n+import org.apache.pinot.spi.utils.TimeConverter;\n+import org.apache.pinot.spi.utils.TimeUtils;\n+\n+\n+/**\n+ * The {@code DefaultTimeSpecEvaluator} class will convert the time value based on the {@link TimeFieldSpec}.\n+ */\n+public class DefaultTimeSpecEvaluator implements ExpressionEvaluator {\n+  private String _incomingTimeColumn;\n+  private String _outgoingTimeColumn;\n+  private TimeConverter _incomingTimeConverter;\n+  private TimeConverter _outgoingTimeConverter;\n+  private boolean _isValidated = false;\n+\n+  public DefaultTimeSpecEvaluator(TimeGranularitySpec incomingGranularitySpec,\n+      TimeGranularitySpec outgoingGranularitySpec) {\n+    Preconditions.checkState(!incomingGranularitySpec.equals(outgoingGranularitySpec));\n+    _incomingTimeColumn = incomingGranularitySpec.getName();\n+    _outgoingTimeColumn = outgoingGranularitySpec.getName();\n+    Preconditions.checkState(!_incomingTimeColumn.equals(_outgoingTimeColumn));\n+    _incomingTimeConverter = new TimeConverter(incomingGranularitySpec);\n+    _outgoingTimeConverter = new TimeConverter(outgoingGranularitySpec);\n+  }\n+\n+  @Override\n+  public List<String> getArguments() {\n+    return Lists.newArrayList(_incomingTimeColumn, _outgoingTimeColumn);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODQ3MzQzNQ=="}, "originalCommit": {"oid": "2570bf792aa94dca41909cdd3c9a09b223285b74"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODUxNjE5OA==", "bodyText": "Based on offline discussion, added support for case where transformed destination field already exists in the data.\nDefaultTimeSpecEvaluator looks right now i.e. only incoming in getArguments.", "url": "https://github.com/apache/pinot/pull/5238#discussion_r408516198", "createdAt": "2020-04-15T00:43:08Z", "author": {"login": "npawar"}, "path": "pinot-spi/src/main/java/org/apache/pinot/spi/data/function/evaluators/DefaultTimeSpecEvaluator.java", "diffHunk": "@@ -0,0 +1,72 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.spi.data.function.evaluators;\n+\n+import com.google.common.base.Preconditions;\n+import com.google.common.collect.Lists;\n+import java.util.List;\n+import org.apache.pinot.spi.data.TimeFieldSpec;\n+import org.apache.pinot.spi.data.TimeGranularitySpec;\n+import org.apache.pinot.spi.data.readers.GenericRow;\n+import org.apache.pinot.spi.utils.TimeConverter;\n+import org.apache.pinot.spi.utils.TimeUtils;\n+\n+\n+/**\n+ * The {@code DefaultTimeSpecEvaluator} class will convert the time value based on the {@link TimeFieldSpec}.\n+ */\n+public class DefaultTimeSpecEvaluator implements ExpressionEvaluator {\n+  private String _incomingTimeColumn;\n+  private String _outgoingTimeColumn;\n+  private TimeConverter _incomingTimeConverter;\n+  private TimeConverter _outgoingTimeConverter;\n+  private boolean _isValidated = false;\n+\n+  public DefaultTimeSpecEvaluator(TimeGranularitySpec incomingGranularitySpec,\n+      TimeGranularitySpec outgoingGranularitySpec) {\n+    Preconditions.checkState(!incomingGranularitySpec.equals(outgoingGranularitySpec));\n+    _incomingTimeColumn = incomingGranularitySpec.getName();\n+    _outgoingTimeColumn = outgoingGranularitySpec.getName();\n+    Preconditions.checkState(!_incomingTimeColumn.equals(_outgoingTimeColumn));\n+    _incomingTimeConverter = new TimeConverter(incomingGranularitySpec);\n+    _outgoingTimeConverter = new TimeConverter(outgoingGranularitySpec);\n+  }\n+\n+  @Override\n+  public List<String> getArguments() {\n+    return Lists.newArrayList(_incomingTimeColumn, _outgoingTimeColumn);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODQ3MzQzNQ=="}, "originalCommit": {"oid": "2570bf792aa94dca41909cdd3c9a09b223285b74"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzNTk0MTU1OnYy", "diffSide": "RIGHT", "path": "pinot-spi/src/main/java/org/apache/pinot/spi/data/function/evaluators/DefaultTimeSpecEvaluator.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQyMjozMTowMVrOGFjSAw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQyMjozMTowMVrOGFjSAw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODQ3NDExNQ==", "bodyText": "The first 4 variables can be final", "url": "https://github.com/apache/pinot/pull/5238#discussion_r408474115", "createdAt": "2020-04-14T22:31:01Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-spi/src/main/java/org/apache/pinot/spi/data/function/evaluators/DefaultTimeSpecEvaluator.java", "diffHunk": "@@ -0,0 +1,72 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.spi.data.function.evaluators;\n+\n+import com.google.common.base.Preconditions;\n+import com.google.common.collect.Lists;\n+import java.util.List;\n+import org.apache.pinot.spi.data.TimeFieldSpec;\n+import org.apache.pinot.spi.data.TimeGranularitySpec;\n+import org.apache.pinot.spi.data.readers.GenericRow;\n+import org.apache.pinot.spi.utils.TimeConverter;\n+import org.apache.pinot.spi.utils.TimeUtils;\n+\n+\n+/**\n+ * The {@code DefaultTimeSpecEvaluator} class will convert the time value based on the {@link TimeFieldSpec}.\n+ */\n+public class DefaultTimeSpecEvaluator implements ExpressionEvaluator {\n+  private String _incomingTimeColumn;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2570bf792aa94dca41909cdd3c9a09b223285b74"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzNTk0NzQ0OnYy", "diffSide": "RIGHT", "path": "pinot-spi/src/main/java/org/apache/pinot/spi/data/function/evaluators/ExpressionEvaluatorFactory.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQyMjozMzozMFrOGFjViA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQyMjozMzozMFrOGFjViA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODQ3NTAxNg==", "bodyText": "Directly throw the exception out to prevent unexpected data ingested", "url": "https://github.com/apache/pinot/pull/5238#discussion_r408475016", "createdAt": "2020-04-14T22:33:30Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-spi/src/main/java/org/apache/pinot/spi/data/function/evaluators/ExpressionEvaluatorFactory.java", "diffHunk": "@@ -0,0 +1,111 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.spi.data.function.evaluators;\n+\n+import javax.annotation.Nullable;\n+import org.apache.pinot.spi.data.FieldSpec;\n+import org.apache.pinot.spi.data.TimeFieldSpec;\n+import org.apache.pinot.spi.data.TimeGranularitySpec;\n+import org.apache.pinot.spi.utils.SchemaFieldExtractorUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+\n+/**\n+ * Factory class to create an {@link ExpressionEvaluator} for the field spec based on the {@link FieldSpec#getTransformFunction()}\n+ */\n+public class ExpressionEvaluatorFactory {\n+\n+  private static final Logger LOGGER = LoggerFactory.getLogger(ExpressionEvaluatorFactory.class);\n+\n+  private ExpressionEvaluatorFactory() {\n+\n+  }\n+\n+  /**\n+   * Creates the {@link ExpressionEvaluator} for the given field spec\n+   *\n+   * 1. If transform expression is defined, use it to create {@link ExpressionEvaluator}\n+   * 2. For TIME column, if conversion is needed, {@link DefaultTimeSpecEvaluator} for backward compatible handling of time spec. This is needed until we migrate to {@link org.apache.pinot.spi.data.DateTimeFieldSpec}\n+   * 3. For columns ending with __KEYS or __VALUES (used for interpreting Map column in Avro), create default functions for handing the Map\n+   * 4. Return null, if none of the above\n+   */\n+  @Nullable\n+  public static ExpressionEvaluator getExpressionEvaluator(FieldSpec fieldSpec) {\n+    ExpressionEvaluator expressionEvaluator = null;\n+\n+    String columnName = fieldSpec.getName();\n+    String transformExpression = fieldSpec.getTransformFunction();\n+    if (transformExpression != null) {\n+\n+      // if transform function expression present, use it to generate function evaluator\n+      try {\n+        expressionEvaluator = getExpressionEvaluator(transformExpression);\n+      } catch (Exception e) {\n+        LOGGER.error(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2570bf792aa94dca41909cdd3c9a09b223285b74"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzNTk0ODg2OnYy", "diffSide": "RIGHT", "path": "pinot-spi/src/main/java/org/apache/pinot/spi/data/function/evaluators/ExpressionEvaluatorFactory.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQyMjozNDowMVrOGFjWSQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwMTo0Mjo1M1rOGFm0Cg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODQ3NTIwOQ==", "bodyText": "Better to throw IllegalStateException when incoming and outgoing name are the same", "url": "https://github.com/apache/pinot/pull/5238#discussion_r408475209", "createdAt": "2020-04-14T22:34:01Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-spi/src/main/java/org/apache/pinot/spi/data/function/evaluators/ExpressionEvaluatorFactory.java", "diffHunk": "@@ -0,0 +1,111 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.spi.data.function.evaluators;\n+\n+import javax.annotation.Nullable;\n+import org.apache.pinot.spi.data.FieldSpec;\n+import org.apache.pinot.spi.data.TimeFieldSpec;\n+import org.apache.pinot.spi.data.TimeGranularitySpec;\n+import org.apache.pinot.spi.utils.SchemaFieldExtractorUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+\n+/**\n+ * Factory class to create an {@link ExpressionEvaluator} for the field spec based on the {@link FieldSpec#getTransformFunction()}\n+ */\n+public class ExpressionEvaluatorFactory {\n+\n+  private static final Logger LOGGER = LoggerFactory.getLogger(ExpressionEvaluatorFactory.class);\n+\n+  private ExpressionEvaluatorFactory() {\n+\n+  }\n+\n+  /**\n+   * Creates the {@link ExpressionEvaluator} for the given field spec\n+   *\n+   * 1. If transform expression is defined, use it to create {@link ExpressionEvaluator}\n+   * 2. For TIME column, if conversion is needed, {@link DefaultTimeSpecEvaluator} for backward compatible handling of time spec. This is needed until we migrate to {@link org.apache.pinot.spi.data.DateTimeFieldSpec}\n+   * 3. For columns ending with __KEYS or __VALUES (used for interpreting Map column in Avro), create default functions for handing the Map\n+   * 4. Return null, if none of the above\n+   */\n+  @Nullable\n+  public static ExpressionEvaluator getExpressionEvaluator(FieldSpec fieldSpec) {\n+    ExpressionEvaluator expressionEvaluator = null;\n+\n+    String columnName = fieldSpec.getName();\n+    String transformExpression = fieldSpec.getTransformFunction();\n+    if (transformExpression != null) {\n+\n+      // if transform function expression present, use it to generate function evaluator\n+      try {\n+        expressionEvaluator = getExpressionEvaluator(transformExpression);\n+      } catch (Exception e) {\n+        LOGGER.error(\n+            \"Caught exception while constructing expression evaluator for transform expression: {}, of column: {}, skipping\",\n+            transformExpression, columnName, e);\n+      }\n+    } else if (fieldSpec.getFieldType().equals(FieldSpec.FieldType.TIME)) {\n+\n+      // for backward compatible handling of TIME field conversion\n+      TimeFieldSpec timeFieldSpec = (TimeFieldSpec) fieldSpec;\n+      TimeGranularitySpec incomingGranularitySpec = timeFieldSpec.getIncomingGranularitySpec();\n+      TimeGranularitySpec outgoingGranularitySpec = timeFieldSpec.getOutgoingGranularitySpec();\n+      if (outgoingGranularitySpec != null && !incomingGranularitySpec.equals(outgoingGranularitySpec)\n+          && !incomingGranularitySpec.getName().equals(outgoingGranularitySpec.getName())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2570bf792aa94dca41909cdd3c9a09b223285b74"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODUzMTk3OA==", "bodyText": "Done, in both places", "url": "https://github.com/apache/pinot/pull/5238#discussion_r408531978", "createdAt": "2020-04-15T01:42:53Z", "author": {"login": "npawar"}, "path": "pinot-spi/src/main/java/org/apache/pinot/spi/data/function/evaluators/ExpressionEvaluatorFactory.java", "diffHunk": "@@ -0,0 +1,111 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.spi.data.function.evaluators;\n+\n+import javax.annotation.Nullable;\n+import org.apache.pinot.spi.data.FieldSpec;\n+import org.apache.pinot.spi.data.TimeFieldSpec;\n+import org.apache.pinot.spi.data.TimeGranularitySpec;\n+import org.apache.pinot.spi.utils.SchemaFieldExtractorUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+\n+/**\n+ * Factory class to create an {@link ExpressionEvaluator} for the field spec based on the {@link FieldSpec#getTransformFunction()}\n+ */\n+public class ExpressionEvaluatorFactory {\n+\n+  private static final Logger LOGGER = LoggerFactory.getLogger(ExpressionEvaluatorFactory.class);\n+\n+  private ExpressionEvaluatorFactory() {\n+\n+  }\n+\n+  /**\n+   * Creates the {@link ExpressionEvaluator} for the given field spec\n+   *\n+   * 1. If transform expression is defined, use it to create {@link ExpressionEvaluator}\n+   * 2. For TIME column, if conversion is needed, {@link DefaultTimeSpecEvaluator} for backward compatible handling of time spec. This is needed until we migrate to {@link org.apache.pinot.spi.data.DateTimeFieldSpec}\n+   * 3. For columns ending with __KEYS or __VALUES (used for interpreting Map column in Avro), create default functions for handing the Map\n+   * 4. Return null, if none of the above\n+   */\n+  @Nullable\n+  public static ExpressionEvaluator getExpressionEvaluator(FieldSpec fieldSpec) {\n+    ExpressionEvaluator expressionEvaluator = null;\n+\n+    String columnName = fieldSpec.getName();\n+    String transformExpression = fieldSpec.getTransformFunction();\n+    if (transformExpression != null) {\n+\n+      // if transform function expression present, use it to generate function evaluator\n+      try {\n+        expressionEvaluator = getExpressionEvaluator(transformExpression);\n+      } catch (Exception e) {\n+        LOGGER.error(\n+            \"Caught exception while constructing expression evaluator for transform expression: {}, of column: {}, skipping\",\n+            transformExpression, columnName, e);\n+      }\n+    } else if (fieldSpec.getFieldType().equals(FieldSpec.FieldType.TIME)) {\n+\n+      // for backward compatible handling of TIME field conversion\n+      TimeFieldSpec timeFieldSpec = (TimeFieldSpec) fieldSpec;\n+      TimeGranularitySpec incomingGranularitySpec = timeFieldSpec.getIncomingGranularitySpec();\n+      TimeGranularitySpec outgoingGranularitySpec = timeFieldSpec.getOutgoingGranularitySpec();\n+      if (outgoingGranularitySpec != null && !incomingGranularitySpec.equals(outgoingGranularitySpec)\n+          && !incomingGranularitySpec.getName().equals(outgoingGranularitySpec.getName())) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODQ3NTIwOQ=="}, "originalCommit": {"oid": "2570bf792aa94dca41909cdd3c9a09b223285b74"}, "originalPosition": 72}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzNTk1MTc4OnYy", "diffSide": "RIGHT", "path": "pinot-spi/src/main/java/org/apache/pinot/spi/data/function/evaluators/ExpressionEvaluatorFactory.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQyMjozNToxM1rOGFjX-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQyMjozNToxM1rOGFjX-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODQ3NTY0Mw==", "bodyText": "(nit) transformExpression can never be null. Suggest moving this check to the caller", "url": "https://github.com/apache/pinot/pull/5238#discussion_r408475643", "createdAt": "2020-04-14T22:35:13Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-spi/src/main/java/org/apache/pinot/spi/data/function/evaluators/ExpressionEvaluatorFactory.java", "diffHunk": "@@ -0,0 +1,111 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.spi.data.function.evaluators;\n+\n+import javax.annotation.Nullable;\n+import org.apache.pinot.spi.data.FieldSpec;\n+import org.apache.pinot.spi.data.TimeFieldSpec;\n+import org.apache.pinot.spi.data.TimeGranularitySpec;\n+import org.apache.pinot.spi.utils.SchemaFieldExtractorUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+\n+/**\n+ * Factory class to create an {@link ExpressionEvaluator} for the field spec based on the {@link FieldSpec#getTransformFunction()}\n+ */\n+public class ExpressionEvaluatorFactory {\n+\n+  private static final Logger LOGGER = LoggerFactory.getLogger(ExpressionEvaluatorFactory.class);\n+\n+  private ExpressionEvaluatorFactory() {\n+\n+  }\n+\n+  /**\n+   * Creates the {@link ExpressionEvaluator} for the given field spec\n+   *\n+   * 1. If transform expression is defined, use it to create {@link ExpressionEvaluator}\n+   * 2. For TIME column, if conversion is needed, {@link DefaultTimeSpecEvaluator} for backward compatible handling of time spec. This is needed until we migrate to {@link org.apache.pinot.spi.data.DateTimeFieldSpec}\n+   * 3. For columns ending with __KEYS or __VALUES (used for interpreting Map column in Avro), create default functions for handing the Map\n+   * 4. Return null, if none of the above\n+   */\n+  @Nullable\n+  public static ExpressionEvaluator getExpressionEvaluator(FieldSpec fieldSpec) {\n+    ExpressionEvaluator expressionEvaluator = null;\n+\n+    String columnName = fieldSpec.getName();\n+    String transformExpression = fieldSpec.getTransformFunction();\n+    if (transformExpression != null) {\n+\n+      // if transform function expression present, use it to generate function evaluator\n+      try {\n+        expressionEvaluator = getExpressionEvaluator(transformExpression);\n+      } catch (Exception e) {\n+        LOGGER.error(\n+            \"Caught exception while constructing expression evaluator for transform expression: {}, of column: {}, skipping\",\n+            transformExpression, columnName, e);\n+      }\n+    } else if (fieldSpec.getFieldType().equals(FieldSpec.FieldType.TIME)) {\n+\n+      // for backward compatible handling of TIME field conversion\n+      TimeFieldSpec timeFieldSpec = (TimeFieldSpec) fieldSpec;\n+      TimeGranularitySpec incomingGranularitySpec = timeFieldSpec.getIncomingGranularitySpec();\n+      TimeGranularitySpec outgoingGranularitySpec = timeFieldSpec.getOutgoingGranularitySpec();\n+      if (outgoingGranularitySpec != null && !incomingGranularitySpec.equals(outgoingGranularitySpec)\n+          && !incomingGranularitySpec.getName().equals(outgoingGranularitySpec.getName())) {\n+        expressionEvaluator = new DefaultTimeSpecEvaluator(incomingGranularitySpec, outgoingGranularitySpec);\n+      }\n+    } else if (columnName.endsWith(SchemaFieldExtractorUtils.MAP_KEY_COLUMN_SUFFIX)) {\n+\n+      // for backward compatible handling of Map type (currently only in Avro)\n+      String sourceMapName =\n+          columnName.substring(0, columnName.length() - SchemaFieldExtractorUtils.MAP_KEY_COLUMN_SUFFIX.length());\n+      String defaultMapKeysTransformExpression = getDefaultMapKeysTransformExpression(sourceMapName);\n+      expressionEvaluator = getExpressionEvaluator(defaultMapKeysTransformExpression);\n+    } else if (columnName.endsWith(SchemaFieldExtractorUtils.MAP_VALUE_COLUMN_SUFFIX)) {\n+\n+      // for backward compatible handling of Map type in avro (currently only in Avro)\n+      String sourceMapName =\n+          columnName.substring(0, columnName.length() - SchemaFieldExtractorUtils.MAP_VALUE_COLUMN_SUFFIX.length());\n+      String defaultMapValuesTransformExpression = getDefaultMapValuesTransformExpression(sourceMapName);\n+      expressionEvaluator = getExpressionEvaluator(defaultMapValuesTransformExpression);\n+    }\n+\n+    return expressionEvaluator;\n+  }\n+\n+  private static ExpressionEvaluator getExpressionEvaluator(String transformExpression) {\n+    ExpressionEvaluator expressionEvaluator = null;\n+    if (transformExpression != null && !transformExpression.isEmpty()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2570bf792aa94dca41909cdd3c9a09b223285b74"}, "originalPosition": 96}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzNTk1NDgxOnYy", "diffSide": "RIGHT", "path": "pinot-spi/src/main/java/org/apache/pinot/spi/data/function/evaluators/GroovyExpressionEvaluator.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQyMjozNjo0MVrOGFjZ_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQyMjo1MDoxOVrOGFjtVw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODQ3NjE1OQ==", "bodyText": "Is this possible? Should we throw exception here?", "url": "https://github.com/apache/pinot/pull/5238#discussion_r408476159", "createdAt": "2020-04-14T22:36:41Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-spi/src/main/java/org/apache/pinot/spi/data/function/evaluators/GroovyExpressionEvaluator.java", "diffHunk": "@@ -0,0 +1,102 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.spi.data.function.evaluators;\n+\n+import com.google.common.base.Splitter;\n+import groovy.lang.Binding;\n+import groovy.lang.GroovyShell;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+import org.apache.pinot.spi.data.readers.GenericRow;\n+\n+\n+/**\n+ * An {@link ExpressionEvaluator} for evaluating schema transform expressions written in Groovy.\n+ * GroovyShell is used to execute expressions.\n+ *\n+ * The transform expression must follow the convention Groovy({expression}, arguments1, argument2...)\n+ * For example:\n+ * \"dimensionFieldSpecs\": [\n+ *     {\n+ *       \"name\": \"fullName\",\n+ *       \"dataType\": \"STRING\",\n+ *       \"transformFunction\": \"Groovy({firstName+' '+lastName}, firstName, lastName)\"\n+ *     }\n+ *  ]\n+ */\n+public class GroovyExpressionEvaluator implements ExpressionEvaluator {\n+\n+  private static final String GROOVY_EXPRESSION_PREFIX = \"Groovy\";\n+  private static final String GROOVY_FUNCTION_REGEX = \"Groovy\\\\(\\\\{(?<script>.+)}(,(?<arguments>.+))?\\\\)\";\n+  private static final Pattern GROOVY_FUNCTION_PATTERN =\n+      Pattern.compile(GROOVY_FUNCTION_REGEX, Pattern.CASE_INSENSITIVE);\n+  private static final String ARGUMENTS_GROUP_NAME = \"arguments\";\n+  private static final String SCRIPT_GROUP_NAME = \"script\";\n+  private static final String ARGUMENTS_SEPARATOR = \",\";\n+\n+  private List<String> _arguments;\n+  private String _script;\n+\n+  public GroovyExpressionEvaluator(String transformExpression) {\n+    Matcher matcher = GROOVY_FUNCTION_PATTERN.matcher(transformExpression);\n+    if (matcher.matches()) {\n+      _script = matcher.group(SCRIPT_GROUP_NAME);\n+\n+      String arguments = matcher.group(ARGUMENTS_GROUP_NAME);\n+      if (arguments != null) {\n+        _arguments = Splitter.on(ARGUMENTS_SEPARATOR).trimResults().splitToList(arguments);\n+      } else {\n+        _arguments = Collections.emptyList();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2570bf792aa94dca41909cdd3c9a09b223285b74"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODQ4MTExMQ==", "bodyText": "I think it is possible. We could have a function that simply computes a value, like a default. Can be based on say current time.", "url": "https://github.com/apache/pinot/pull/5238#discussion_r408481111", "createdAt": "2020-04-14T22:50:19Z", "author": {"login": "npawar"}, "path": "pinot-spi/src/main/java/org/apache/pinot/spi/data/function/evaluators/GroovyExpressionEvaluator.java", "diffHunk": "@@ -0,0 +1,102 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.spi.data.function.evaluators;\n+\n+import com.google.common.base.Splitter;\n+import groovy.lang.Binding;\n+import groovy.lang.GroovyShell;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+import org.apache.pinot.spi.data.readers.GenericRow;\n+\n+\n+/**\n+ * An {@link ExpressionEvaluator} for evaluating schema transform expressions written in Groovy.\n+ * GroovyShell is used to execute expressions.\n+ *\n+ * The transform expression must follow the convention Groovy({expression}, arguments1, argument2...)\n+ * For example:\n+ * \"dimensionFieldSpecs\": [\n+ *     {\n+ *       \"name\": \"fullName\",\n+ *       \"dataType\": \"STRING\",\n+ *       \"transformFunction\": \"Groovy({firstName+' '+lastName}, firstName, lastName)\"\n+ *     }\n+ *  ]\n+ */\n+public class GroovyExpressionEvaluator implements ExpressionEvaluator {\n+\n+  private static final String GROOVY_EXPRESSION_PREFIX = \"Groovy\";\n+  private static final String GROOVY_FUNCTION_REGEX = \"Groovy\\\\(\\\\{(?<script>.+)}(,(?<arguments>.+))?\\\\)\";\n+  private static final Pattern GROOVY_FUNCTION_PATTERN =\n+      Pattern.compile(GROOVY_FUNCTION_REGEX, Pattern.CASE_INSENSITIVE);\n+  private static final String ARGUMENTS_GROUP_NAME = \"arguments\";\n+  private static final String SCRIPT_GROUP_NAME = \"script\";\n+  private static final String ARGUMENTS_SEPARATOR = \",\";\n+\n+  private List<String> _arguments;\n+  private String _script;\n+\n+  public GroovyExpressionEvaluator(String transformExpression) {\n+    Matcher matcher = GROOVY_FUNCTION_PATTERN.matcher(transformExpression);\n+    if (matcher.matches()) {\n+      _script = matcher.group(SCRIPT_GROUP_NAME);\n+\n+      String arguments = matcher.group(ARGUMENTS_GROUP_NAME);\n+      if (arguments != null) {\n+        _arguments = Splitter.on(ARGUMENTS_SEPARATOR).trimResults().splitToList(arguments);\n+      } else {\n+        _arguments = Collections.emptyList();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODQ3NjE1OQ=="}, "originalCommit": {"oid": "2570bf792aa94dca41909cdd3c9a09b223285b74"}, "originalPosition": 69}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzNTk2MTc3OnYy", "diffSide": "RIGHT", "path": "pinot-spi/src/main/java/org/apache/pinot/spi/utils/SchemaFieldExtractorUtils.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQyMjozOTo0MFrOGFjeaQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQyMjozOTo0MFrOGFjeaQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODQ3NzI4OQ==", "bodyText": "(nit) outgoingGranularitySpec will never be null because it will return incoming spec if outgoing is not set", "url": "https://github.com/apache/pinot/pull/5238#discussion_r408477289", "createdAt": "2020-04-14T22:39:40Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-spi/src/main/java/org/apache/pinot/spi/utils/SchemaFieldExtractorUtils.java", "diffHunk": "@@ -0,0 +1,105 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.spi.utils;\n+\n+import com.google.common.base.Preconditions;\n+import java.util.ArrayList;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+import org.apache.pinot.spi.data.FieldSpec;\n+import org.apache.pinot.spi.data.Schema;\n+import org.apache.pinot.spi.data.TimeFieldSpec;\n+import org.apache.pinot.spi.data.TimeGranularitySpec;\n+import org.apache.pinot.spi.data.function.evaluators.ExpressionEvaluator;\n+import org.apache.pinot.spi.data.function.evaluators.ExpressionEvaluatorFactory;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+\n+/**\n+ * Extracts names of the source fields from the schema\n+ */\n+public class SchemaFieldExtractorUtils {\n+  public static final String MAP_KEY_COLUMN_SUFFIX = \"__KEYS\";\n+  public static final String MAP_VALUE_COLUMN_SUFFIX = \"__VALUES\";\n+\n+  private static final Logger LOGGER = LoggerFactory.getLogger(SchemaFieldExtractorUtils.class);\n+\n+  /**\n+   * Extracts the source fields from the schema\n+   * For field specs with a transform expression defined, use the arguments provided to the function\n+   * Otherwise, use the column name as is\n+   * TODO: for now, we assume that arguments to transform function are in the source i.e. there's no columns which are derived from transformed columns\n+   */\n+  public static List<String> extract(Schema schema) {\n+    Set<String> sourceFieldNames = new HashSet<>();\n+    for (FieldSpec fieldSpec : schema.getAllFieldSpecs()) {\n+      if (!fieldSpec.isVirtualColumn()) {\n+        ExpressionEvaluator expressionEvaluator = ExpressionEvaluatorFactory.getExpressionEvaluator(fieldSpec);\n+\n+        if (expressionEvaluator != null) {\n+          sourceFieldNames.addAll(expressionEvaluator.getArguments());\n+        } else {\n+          sourceFieldNames.add(fieldSpec.getName());\n+        }\n+      }\n+    }\n+    return new ArrayList<>(sourceFieldNames);\n+  }\n+\n+  /**\n+   * Validates that for a field spec with transform function, the source column name and destination column name are exclusive\n+   * i.e. do not allow using source column name for destination column\n+   * 1. Transform function of a field spec should not use the destination column\n+   * 2. TimeFieldSpec - cannot have same name for incoming and outgoing field spec, if the specs are different\n+   */\n+  public static boolean validate(Schema schema) {\n+    for (FieldSpec fieldSpec : schema.getAllFieldSpecs()) {\n+      if (!fieldSpec.isVirtualColumn()) {\n+        String column = fieldSpec.getName();\n+        String transformFunction = fieldSpec.getTransformFunction();\n+        if (transformFunction != null) {\n+          ExpressionEvaluator expressionEvaluator = ExpressionEvaluatorFactory.getExpressionEvaluator(fieldSpec);\n+          if (expressionEvaluator != null) {\n+            List<String> arguments = expressionEvaluator.getArguments();\n+            // output column used as input\n+            if (arguments.contains(column)) {\n+              LOGGER.error(\"The arguments of transform function: {}, should not contain the destination column: {}\",\n+                  transformFunction, column);\n+              return false;\n+            }\n+          }\n+        } else if (fieldSpec.getFieldType().equals(FieldSpec.FieldType.TIME)) {\n+          TimeFieldSpec timeFieldSpec = (TimeFieldSpec) fieldSpec;\n+          TimeGranularitySpec incomingGranularitySpec = timeFieldSpec.getIncomingGranularitySpec();\n+          TimeGranularitySpec outgoingGranularitySpec = timeFieldSpec.getOutgoingGranularitySpec();\n+          // different incoming and outgoing spec, but same name\n+          if (outgoingGranularitySpec != null && !incomingGranularitySpec.equals(outgoingGranularitySpec)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2570bf792aa94dca41909cdd3c9a09b223285b74"}, "originalPosition": 94}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzNTk2MzU0OnYy", "diffSide": "RIGHT", "path": "pinot-spi/src/main/java/org/apache/pinot/spi/data/function/evaluators/ExpressionEvaluatorFactory.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQyMjo0MDoyNlrOGFjfhQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQyMjo0MDoyNlrOGFjfhQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODQ3NzU3Mw==", "bodyText": "(nit) outgoingGranularitySpec will never be null because it will return incoming spec if outgoing is not set", "url": "https://github.com/apache/pinot/pull/5238#discussion_r408477573", "createdAt": "2020-04-14T22:40:26Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-spi/src/main/java/org/apache/pinot/spi/data/function/evaluators/ExpressionEvaluatorFactory.java", "diffHunk": "@@ -0,0 +1,111 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.spi.data.function.evaluators;\n+\n+import javax.annotation.Nullable;\n+import org.apache.pinot.spi.data.FieldSpec;\n+import org.apache.pinot.spi.data.TimeFieldSpec;\n+import org.apache.pinot.spi.data.TimeGranularitySpec;\n+import org.apache.pinot.spi.utils.SchemaFieldExtractorUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+\n+/**\n+ * Factory class to create an {@link ExpressionEvaluator} for the field spec based on the {@link FieldSpec#getTransformFunction()}\n+ */\n+public class ExpressionEvaluatorFactory {\n+\n+  private static final Logger LOGGER = LoggerFactory.getLogger(ExpressionEvaluatorFactory.class);\n+\n+  private ExpressionEvaluatorFactory() {\n+\n+  }\n+\n+  /**\n+   * Creates the {@link ExpressionEvaluator} for the given field spec\n+   *\n+   * 1. If transform expression is defined, use it to create {@link ExpressionEvaluator}\n+   * 2. For TIME column, if conversion is needed, {@link DefaultTimeSpecEvaluator} for backward compatible handling of time spec. This is needed until we migrate to {@link org.apache.pinot.spi.data.DateTimeFieldSpec}\n+   * 3. For columns ending with __KEYS or __VALUES (used for interpreting Map column in Avro), create default functions for handing the Map\n+   * 4. Return null, if none of the above\n+   */\n+  @Nullable\n+  public static ExpressionEvaluator getExpressionEvaluator(FieldSpec fieldSpec) {\n+    ExpressionEvaluator expressionEvaluator = null;\n+\n+    String columnName = fieldSpec.getName();\n+    String transformExpression = fieldSpec.getTransformFunction();\n+    if (transformExpression != null) {\n+\n+      // if transform function expression present, use it to generate function evaluator\n+      try {\n+        expressionEvaluator = getExpressionEvaluator(transformExpression);\n+      } catch (Exception e) {\n+        LOGGER.error(\n+            \"Caught exception while constructing expression evaluator for transform expression: {}, of column: {}, skipping\",\n+            transformExpression, columnName, e);\n+      }\n+    } else if (fieldSpec.getFieldType().equals(FieldSpec.FieldType.TIME)) {\n+\n+      // for backward compatible handling of TIME field conversion\n+      TimeFieldSpec timeFieldSpec = (TimeFieldSpec) fieldSpec;\n+      TimeGranularitySpec incomingGranularitySpec = timeFieldSpec.getIncomingGranularitySpec();\n+      TimeGranularitySpec outgoingGranularitySpec = timeFieldSpec.getOutgoingGranularitySpec();\n+      if (outgoingGranularitySpec != null && !incomingGranularitySpec.equals(outgoingGranularitySpec)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2570bf792aa94dca41909cdd3c9a09b223285b74"}, "originalPosition": 71}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzNjMzMzMxOnYy", "diffSide": "RIGHT", "path": "pinot-spi/src/main/java/org/apache/pinot/spi/data/readers/RecordExtractor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwMTo0ODoyNFrOGFm6AA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwMTo0ODoyNFrOGFm6AA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODUzMzUwNA==", "bodyText": "This should also take a set", "url": "https://github.com/apache/pinot/pull/5238#discussion_r408533504", "createdAt": "2020-04-15T01:48:24Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-spi/src/main/java/org/apache/pinot/spi/data/readers/RecordExtractor.java", "diffHunk": "@@ -18,16 +18,29 @@\n  */\n package org.apache.pinot.spi.data.readers;\n \n-import org.apache.pinot.spi.data.Schema;\n+import java.util.List;\n \n+\n+/**\n+ * Extracts fields from input records\n+ * @param <T> The format of the input record\n+ */\n public interface RecordExtractor<T> {\n+\n+  /**\n+   * Initialize the record extractor with its config\n+   *\n+   * @param fields List of field names to extract from the provided input record\n+   * @param recordExtractorConfig The record extractor config\n+   */\n+  void init(List<String> fields, RecordExtractorConfig recordExtractorConfig);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3b81b7e5fc49833f5175bb07d2746589917737d"}, "originalPosition": 20}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3394, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}