{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDUxNTI3OTkx", "number": 5713, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxODo0MjoxNFrOEQwChw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQyMzozMjo0OVrOERQTYQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1OTk5NzUxOnYy", "diffSide": "RIGHT", "path": "thirdeye/thirdeye-pinot/src/main/java/org/apache/pinot/thirdeye/common/restclient/AbstractRestClient.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxODo0MjoxNFrOG1FHUQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQyMzoyNTo1N1rOG13nrQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODMxMTUwNQ==", "bodyText": "It would be nice if we rename or add comments to this class, saying that it is only used for short-lived HTTP connections. Developers should consider something else, if they need persistent HTTP connections for multiple calls.", "url": "https://github.com/apache/pinot/pull/5713#discussion_r458311505", "createdAt": "2020-07-21T18:42:14Z", "author": {"login": "vincentchenjl"}, "path": "thirdeye/thirdeye-pinot/src/main/java/org/apache/pinot/thirdeye/common/restclient/AbstractRestClient.java", "diffHunk": "@@ -0,0 +1,269 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.pinot.thirdeye.common.restclient;\n+\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.io.UnsupportedEncodingException;\n+import java.net.HttpURLConnection;\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.net.URLEncoder;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.SortedMap;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+\n+/**\n+ * A generic API Rest Client to perform GET and POST\n+ */\n+public abstract class AbstractRestClient {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c441419671b385443d4b1d88d2e8c582a28bc2a4"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTEzODk4OQ==", "bodyText": "Updated!", "url": "https://github.com/apache/pinot/pull/5713#discussion_r459138989", "createdAt": "2020-07-22T23:25:57Z", "author": {"login": "akshayrai"}, "path": "thirdeye/thirdeye-pinot/src/main/java/org/apache/pinot/thirdeye/common/restclient/AbstractRestClient.java", "diffHunk": "@@ -0,0 +1,269 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.pinot.thirdeye.common.restclient;\n+\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.io.UnsupportedEncodingException;\n+import java.net.HttpURLConnection;\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.net.URLEncoder;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.SortedMap;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+\n+/**\n+ * A generic API Rest Client to perform GET and POST\n+ */\n+public abstract class AbstractRestClient {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODMxMTUwNQ=="}, "originalCommit": {"oid": "c441419671b385443d4b1d88d2e8c582a28bc2a4"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2MDAxOTg3OnYy", "diffSide": "RIGHT", "path": "thirdeye/thirdeye-pinot/src/main/java/org/apache/pinot/thirdeye/common/restclient/ThirdEyeRcaRestClient.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxODo0ODo1NVrOG1FVuQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQyMzoyNTo1OVrOG13nuA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODMxNTE5Mw==", "bodyText": "Add comments to the public methods of this class.", "url": "https://github.com/apache/pinot/pull/5713#discussion_r458315193", "createdAt": "2020-07-21T18:48:55Z", "author": {"login": "vincentchenjl"}, "path": "thirdeye/thirdeye-pinot/src/main/java/org/apache/pinot/thirdeye/common/restclient/ThirdEyeRcaRestClient.java", "diffHunk": "@@ -0,0 +1,115 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.pinot.thirdeye.common.restclient;\n+\n+import java.io.IOException;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.TreeMap;\n+import java.util.concurrent.TimeUnit;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.pinot.thirdeye.auth.ThirdEyePrincipal;\n+import org.apache.pinot.thirdeye.dashboard.resources.v2.AuthResource;\n+import org.apache.pinot.thirdeye.datalayer.dto.MergedAnomalyResultDTO;\n+import org.apache.pinot.thirdeye.datasource.DAORegistry;\n+\n+import static org.apache.pinot.thirdeye.common.constants.rca.MultiDimensionalSummaryConstants.*;\n+import static org.apache.pinot.thirdeye.common.constants.rca.RootCauseResourceConstants.*;\n+\n+\n+/**\n+ * ThirdEye API Client to communicate with ThirdEye RCA services\n+ */\n+public class ThirdEyeRcaRestClient extends AbstractRestClient {\n+\n+  private final String DEFAULT_THIRDEYE_RCA_SERVICE_HOST = \"localhost:1426\";\n+  private final String THIRDEYE_RCA_CUBE_URI = \"/dashboard/summary/autoDimensionOrder\";\n+  private final String THIRDEYE_RCA_HIGHLIGHTS_URI = \"/rootcause/highlights\";\n+\n+  private ThirdEyePrincipal principal;\n+  private String thirdEyeHost;\n+\n+  public ThirdEyeRcaRestClient(ThirdEyePrincipal principal, String host) {\n+    super();\n+    this.principal = principal;\n+\n+    if (StringUtils.isEmpty(host)) {\n+      this.thirdEyeHost = DEFAULT_THIRDEYE_RCA_SERVICE_HOST;\n+    } else {\n+      this.thirdEyeHost = host;\n+    }\n+  }\n+\n+  /** For testing only, create a client with an alternate URLFactory. This constructor allows unit tests to mock server communication. */\n+  /* package private */  ThirdEyeRcaRestClient(HttpURLConnectionFactory connectionFactory, ThirdEyePrincipal principal) {\n+    super(connectionFactory);\n+    this.principal = principal;\n+    this.thirdEyeHost = DEFAULT_THIRDEYE_RCA_SERVICE_HOST;\n+  }\n+\n+  public Map<String, Object> getAllHighlights(long anomalyId) throws IOException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c441419671b385443d4b1d88d2e8c582a28bc2a4"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTEzOTAwMA==", "bodyText": "Added", "url": "https://github.com/apache/pinot/pull/5713#discussion_r459139000", "createdAt": "2020-07-22T23:25:59Z", "author": {"login": "akshayrai"}, "path": "thirdeye/thirdeye-pinot/src/main/java/org/apache/pinot/thirdeye/common/restclient/ThirdEyeRcaRestClient.java", "diffHunk": "@@ -0,0 +1,115 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.pinot.thirdeye.common.restclient;\n+\n+import java.io.IOException;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.TreeMap;\n+import java.util.concurrent.TimeUnit;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.pinot.thirdeye.auth.ThirdEyePrincipal;\n+import org.apache.pinot.thirdeye.dashboard.resources.v2.AuthResource;\n+import org.apache.pinot.thirdeye.datalayer.dto.MergedAnomalyResultDTO;\n+import org.apache.pinot.thirdeye.datasource.DAORegistry;\n+\n+import static org.apache.pinot.thirdeye.common.constants.rca.MultiDimensionalSummaryConstants.*;\n+import static org.apache.pinot.thirdeye.common.constants.rca.RootCauseResourceConstants.*;\n+\n+\n+/**\n+ * ThirdEye API Client to communicate with ThirdEye RCA services\n+ */\n+public class ThirdEyeRcaRestClient extends AbstractRestClient {\n+\n+  private final String DEFAULT_THIRDEYE_RCA_SERVICE_HOST = \"localhost:1426\";\n+  private final String THIRDEYE_RCA_CUBE_URI = \"/dashboard/summary/autoDimensionOrder\";\n+  private final String THIRDEYE_RCA_HIGHLIGHTS_URI = \"/rootcause/highlights\";\n+\n+  private ThirdEyePrincipal principal;\n+  private String thirdEyeHost;\n+\n+  public ThirdEyeRcaRestClient(ThirdEyePrincipal principal, String host) {\n+    super();\n+    this.principal = principal;\n+\n+    if (StringUtils.isEmpty(host)) {\n+      this.thirdEyeHost = DEFAULT_THIRDEYE_RCA_SERVICE_HOST;\n+    } else {\n+      this.thirdEyeHost = host;\n+    }\n+  }\n+\n+  /** For testing only, create a client with an alternate URLFactory. This constructor allows unit tests to mock server communication. */\n+  /* package private */  ThirdEyeRcaRestClient(HttpURLConnectionFactory connectionFactory, ThirdEyePrincipal principal) {\n+    super(connectionFactory);\n+    this.principal = principal;\n+    this.thirdEyeHost = DEFAULT_THIRDEYE_RCA_SERVICE_HOST;\n+  }\n+\n+  public Map<String, Object> getAllHighlights(long anomalyId) throws IOException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODMxNTE5Mw=="}, "originalCommit": {"oid": "c441419671b385443d4b1d88d2e8c582a28bc2a4"}, "originalPosition": 67}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2MDE2MTU2OnYy", "diffSide": "RIGHT", "path": "thirdeye/thirdeye-pinot/src/main/java/org/apache/pinot/thirdeye/common/restclient/ThirdEyeRcaRestClient.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxOTozMToxM1rOG1Gu-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQyMzoyNjowMVrOG13nxQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODMzODA0MA==", "bodyText": "Should we make these parameters configurable instead of hardcoding them in the method? ThirdEyeRcaRestClient should be a generally-purposed REST client for RCA.", "url": "https://github.com/apache/pinot/pull/5713#discussion_r458338040", "createdAt": "2020-07-21T19:31:13Z", "author": {"login": "vincentchenjl"}, "path": "thirdeye/thirdeye-pinot/src/main/java/org/apache/pinot/thirdeye/common/restclient/ThirdEyeRcaRestClient.java", "diffHunk": "@@ -0,0 +1,115 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.pinot.thirdeye.common.restclient;\n+\n+import java.io.IOException;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.TreeMap;\n+import java.util.concurrent.TimeUnit;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.pinot.thirdeye.auth.ThirdEyePrincipal;\n+import org.apache.pinot.thirdeye.dashboard.resources.v2.AuthResource;\n+import org.apache.pinot.thirdeye.datalayer.dto.MergedAnomalyResultDTO;\n+import org.apache.pinot.thirdeye.datasource.DAORegistry;\n+\n+import static org.apache.pinot.thirdeye.common.constants.rca.MultiDimensionalSummaryConstants.*;\n+import static org.apache.pinot.thirdeye.common.constants.rca.RootCauseResourceConstants.*;\n+\n+\n+/**\n+ * ThirdEye API Client to communicate with ThirdEye RCA services\n+ */\n+public class ThirdEyeRcaRestClient extends AbstractRestClient {\n+\n+  private final String DEFAULT_THIRDEYE_RCA_SERVICE_HOST = \"localhost:1426\";\n+  private final String THIRDEYE_RCA_CUBE_URI = \"/dashboard/summary/autoDimensionOrder\";\n+  private final String THIRDEYE_RCA_HIGHLIGHTS_URI = \"/rootcause/highlights\";\n+\n+  private ThirdEyePrincipal principal;\n+  private String thirdEyeHost;\n+\n+  public ThirdEyeRcaRestClient(ThirdEyePrincipal principal, String host) {\n+    super();\n+    this.principal = principal;\n+\n+    if (StringUtils.isEmpty(host)) {\n+      this.thirdEyeHost = DEFAULT_THIRDEYE_RCA_SERVICE_HOST;\n+    } else {\n+      this.thirdEyeHost = host;\n+    }\n+  }\n+\n+  /** For testing only, create a client with an alternate URLFactory. This constructor allows unit tests to mock server communication. */\n+  /* package private */  ThirdEyeRcaRestClient(HttpURLConnectionFactory connectionFactory, ThirdEyePrincipal principal) {\n+    super(connectionFactory);\n+    this.principal = principal;\n+    this.thirdEyeHost = DEFAULT_THIRDEYE_RCA_SERVICE_HOST;\n+  }\n+\n+  public Map<String, Object> getAllHighlights(long anomalyId) throws IOException {\n+    TreeMap<String, String> queryParameters = new TreeMap<String, String>();\n+    queryParameters.put(\"anomalyId\", String.valueOf(anomalyId));\n+\n+    Map<String, String> headers = new HashMap<>();\n+    headers.put(\"Cookie\", AuthResource.AUTH_TOKEN_NAME + \"=\" + principal.getSessionKey());\n+    return doGet(\n+        composeUrl(this.thirdEyeHost, THIRDEYE_RCA_HIGHLIGHTS_URI, queryParameters),\n+        this.thirdEyeHost,\n+        headers,\n+        new ResponseToMap());\n+  }\n+\n+  public Map<String, Object> getCubeHighlights(long anomalyId) throws IOException {\n+    MergedAnomalyResultDTO anomalyDTO = DAORegistry.getInstance().getMergedAnomalyResultDAO().findById(anomalyId);\n+\n+    long startTime = anomalyDTO.getStartTime();\n+    long endTime = anomalyDTO.getEndTime();\n+    TreeMap<String, String> queryParameters = new TreeMap<String, String>();\n+    queryParameters.put(METRIC_URN, anomalyDTO.getMetricUrn());\n+    queryParameters.put(BASELINE_START, String.valueOf(startTime - TimeUnit.DAYS.toMillis(7)));\n+    queryParameters.put(BASELINE_END, String.valueOf(endTime - TimeUnit.DAYS.toMillis(7)));\n+    queryParameters.put(CURRENT_START, String.valueOf(startTime));\n+    queryParameters.put(CURRENT_END, String.valueOf(endTime));\n+\n+    queryParameters.put(CUBE_DEPTH, \"3\");\n+    queryParameters.put(CUBE_ONE_SIDE_ERROR, \"false\");\n+    queryParameters.put(CUBE_ORDER_TYPE, \"auto\");\n+    queryParameters.put(CUBE_SUMMARY_SIZE, \"3\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c441419671b385443d4b1d88d2e8c582a28bc2a4"}, "originalPosition": 95}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTEzOTAxMw==", "bodyText": "Passed them as parameters. Thanks", "url": "https://github.com/apache/pinot/pull/5713#discussion_r459139013", "createdAt": "2020-07-22T23:26:01Z", "author": {"login": "akshayrai"}, "path": "thirdeye/thirdeye-pinot/src/main/java/org/apache/pinot/thirdeye/common/restclient/ThirdEyeRcaRestClient.java", "diffHunk": "@@ -0,0 +1,115 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.pinot.thirdeye.common.restclient;\n+\n+import java.io.IOException;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.TreeMap;\n+import java.util.concurrent.TimeUnit;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.pinot.thirdeye.auth.ThirdEyePrincipal;\n+import org.apache.pinot.thirdeye.dashboard.resources.v2.AuthResource;\n+import org.apache.pinot.thirdeye.datalayer.dto.MergedAnomalyResultDTO;\n+import org.apache.pinot.thirdeye.datasource.DAORegistry;\n+\n+import static org.apache.pinot.thirdeye.common.constants.rca.MultiDimensionalSummaryConstants.*;\n+import static org.apache.pinot.thirdeye.common.constants.rca.RootCauseResourceConstants.*;\n+\n+\n+/**\n+ * ThirdEye API Client to communicate with ThirdEye RCA services\n+ */\n+public class ThirdEyeRcaRestClient extends AbstractRestClient {\n+\n+  private final String DEFAULT_THIRDEYE_RCA_SERVICE_HOST = \"localhost:1426\";\n+  private final String THIRDEYE_RCA_CUBE_URI = \"/dashboard/summary/autoDimensionOrder\";\n+  private final String THIRDEYE_RCA_HIGHLIGHTS_URI = \"/rootcause/highlights\";\n+\n+  private ThirdEyePrincipal principal;\n+  private String thirdEyeHost;\n+\n+  public ThirdEyeRcaRestClient(ThirdEyePrincipal principal, String host) {\n+    super();\n+    this.principal = principal;\n+\n+    if (StringUtils.isEmpty(host)) {\n+      this.thirdEyeHost = DEFAULT_THIRDEYE_RCA_SERVICE_HOST;\n+    } else {\n+      this.thirdEyeHost = host;\n+    }\n+  }\n+\n+  /** For testing only, create a client with an alternate URLFactory. This constructor allows unit tests to mock server communication. */\n+  /* package private */  ThirdEyeRcaRestClient(HttpURLConnectionFactory connectionFactory, ThirdEyePrincipal principal) {\n+    super(connectionFactory);\n+    this.principal = principal;\n+    this.thirdEyeHost = DEFAULT_THIRDEYE_RCA_SERVICE_HOST;\n+  }\n+\n+  public Map<String, Object> getAllHighlights(long anomalyId) throws IOException {\n+    TreeMap<String, String> queryParameters = new TreeMap<String, String>();\n+    queryParameters.put(\"anomalyId\", String.valueOf(anomalyId));\n+\n+    Map<String, String> headers = new HashMap<>();\n+    headers.put(\"Cookie\", AuthResource.AUTH_TOKEN_NAME + \"=\" + principal.getSessionKey());\n+    return doGet(\n+        composeUrl(this.thirdEyeHost, THIRDEYE_RCA_HIGHLIGHTS_URI, queryParameters),\n+        this.thirdEyeHost,\n+        headers,\n+        new ResponseToMap());\n+  }\n+\n+  public Map<String, Object> getCubeHighlights(long anomalyId) throws IOException {\n+    MergedAnomalyResultDTO anomalyDTO = DAORegistry.getInstance().getMergedAnomalyResultDAO().findById(anomalyId);\n+\n+    long startTime = anomalyDTO.getStartTime();\n+    long endTime = anomalyDTO.getEndTime();\n+    TreeMap<String, String> queryParameters = new TreeMap<String, String>();\n+    queryParameters.put(METRIC_URN, anomalyDTO.getMetricUrn());\n+    queryParameters.put(BASELINE_START, String.valueOf(startTime - TimeUnit.DAYS.toMillis(7)));\n+    queryParameters.put(BASELINE_END, String.valueOf(endTime - TimeUnit.DAYS.toMillis(7)));\n+    queryParameters.put(CURRENT_START, String.valueOf(startTime));\n+    queryParameters.put(CURRENT_END, String.valueOf(endTime));\n+\n+    queryParameters.put(CUBE_DEPTH, \"3\");\n+    queryParameters.put(CUBE_ONE_SIDE_ERROR, \"false\");\n+    queryParameters.put(CUBE_ORDER_TYPE, \"auto\");\n+    queryParameters.put(CUBE_SUMMARY_SIZE, \"3\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODMzODA0MA=="}, "originalCommit": {"oid": "c441419671b385443d4b1d88d2e8c582a28bc2a4"}, "originalPosition": 95}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2MDI0OTQwOnYy", "diffSide": "RIGHT", "path": "thirdeye/thirdeye-pinot/src/main/java/org/apache/pinot/thirdeye/dashboard/resources/v2/RootCauseResource.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxOTo1Nzo1MFrOG1HllQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQyMzoyNjowNFrOG13nzw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODM1MjAyMQ==", "bodyText": "One thought on using REST client here. Although it makes sense to use REST calls to get information across different modules, for instance getting RCA info in notification module,  we should consider using method call directly rather than REST calls, since this endpoint is under RCA and all the following calls under this method are also going to RCA. Method calls can give us better performance and error handling.", "url": "https://github.com/apache/pinot/pull/5713#discussion_r458352021", "createdAt": "2020-07-21T19:57:50Z", "author": {"login": "vincentchenjl"}, "path": "thirdeye/thirdeye-pinot/src/main/java/org/apache/pinot/thirdeye/dashboard/resources/v2/RootCauseResource.java", "diffHunk": "@@ -60,12 +65,51 @@\n \n   private final List<RootCauseEntityFormatter> formatters;\n   private final Map<String, RCAFramework> frameworks;\n+  private final String dashboardHost;\n \n-  public RootCauseResource(Map<String, RCAFramework> frameworks, List<RootCauseEntityFormatter> formatters) {\n+  public RootCauseResource(String dashboardHost, Map<String, RCAFramework> frameworks, List<RootCauseEntityFormatter> formatters) {\n+    this.dashboardHost = dashboardHost;\n     this.frameworks = frameworks;\n     this.formatters = formatters;\n   }\n \n+  @GET\n+  @Path(\"/highlights\")\n+  @ApiOperation(value = \"Send query\")\n+  public Map<String, String> highlights(\n+      @ApiParam(value = \"internal id of the anomaly\")\n+      @QueryParam(\"anomalyId\") long anomalyId,\n+      @Auth ThirdEyePrincipal principal) {\n+    Map<String, String> responseMessage = new HashMap<>();\n+    ThirdEyeRcaRestClient rcaClient = new ThirdEyeRcaRestClient(principal, dashboardHost);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c441419671b385443d4b1d88d2e8c582a28bc2a4"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTEzOTAyMw==", "bodyText": "good point! I have updated accordingly.", "url": "https://github.com/apache/pinot/pull/5713#discussion_r459139023", "createdAt": "2020-07-22T23:26:04Z", "author": {"login": "akshayrai"}, "path": "thirdeye/thirdeye-pinot/src/main/java/org/apache/pinot/thirdeye/dashboard/resources/v2/RootCauseResource.java", "diffHunk": "@@ -60,12 +65,51 @@\n \n   private final List<RootCauseEntityFormatter> formatters;\n   private final Map<String, RCAFramework> frameworks;\n+  private final String dashboardHost;\n \n-  public RootCauseResource(Map<String, RCAFramework> frameworks, List<RootCauseEntityFormatter> formatters) {\n+  public RootCauseResource(String dashboardHost, Map<String, RCAFramework> frameworks, List<RootCauseEntityFormatter> formatters) {\n+    this.dashboardHost = dashboardHost;\n     this.frameworks = frameworks;\n     this.formatters = formatters;\n   }\n \n+  @GET\n+  @Path(\"/highlights\")\n+  @ApiOperation(value = \"Send query\")\n+  public Map<String, String> highlights(\n+      @ApiParam(value = \"internal id of the anomaly\")\n+      @QueryParam(\"anomalyId\") long anomalyId,\n+      @Auth ThirdEyePrincipal principal) {\n+    Map<String, String> responseMessage = new HashMap<>();\n+    ThirdEyeRcaRestClient rcaClient = new ThirdEyeRcaRestClient(principal, dashboardHost);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODM1MjAyMQ=="}, "originalCommit": {"oid": "c441419671b385443d4b1d88d2e8c582a28bc2a4"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2NTI3ODIyOnYy", "diffSide": "RIGHT", "path": "thirdeye/thirdeye-pinot/src/main/java/org/apache/pinot/thirdeye/common/restclient/AbstractRestClient.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQyMzozMDowOVrOG13s1g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQwMTo0MzozMlrOG2g6bw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTE0MDMxMA==", "bodyText": "Have we evaluated using the Jersey Client API library as the REST client? https://howtodoinjava.com/jersey/jersey-restful-client-examples/\nWe are already using it Jersy to write the service. It seems natural to use it on the client-side as well. It can help us abstract away the low-level details of the client-server communication and avoid potential bugs.", "url": "https://github.com/apache/pinot/pull/5713#discussion_r459140310", "createdAt": "2020-07-22T23:30:09Z", "author": {"login": "jihaozh"}, "path": "thirdeye/thirdeye-pinot/src/main/java/org/apache/pinot/thirdeye/common/restclient/AbstractRestClient.java", "diffHunk": "@@ -0,0 +1,269 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.pinot.thirdeye.common.restclient;\n+\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.io.UnsupportedEncodingException;\n+import java.net.HttpURLConnection;\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.net.URLEncoder;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.SortedMap;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+\n+/**\n+ * A generic API Rest Client to perform GET and POST\n+ */\n+public abstract class AbstractRestClient {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "444d71494af950680e6ba84375cc99e5727453fd"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTgxNTUzNQ==", "bodyText": "Good point! I have updated to use the Jersey Client API", "url": "https://github.com/apache/pinot/pull/5713#discussion_r459815535", "createdAt": "2020-07-24T01:43:32Z", "author": {"login": "akshayrai"}, "path": "thirdeye/thirdeye-pinot/src/main/java/org/apache/pinot/thirdeye/common/restclient/AbstractRestClient.java", "diffHunk": "@@ -0,0 +1,269 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.pinot.thirdeye.common.restclient;\n+\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.io.UnsupportedEncodingException;\n+import java.net.HttpURLConnection;\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.net.URLEncoder;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.SortedMap;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+\n+/**\n+ * A generic API Rest Client to perform GET and POST\n+ */\n+public abstract class AbstractRestClient {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTE0MDMxMA=="}, "originalCommit": {"oid": "444d71494af950680e6ba84375cc99e5727453fd"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2NTI4MzUzOnYy", "diffSide": "RIGHT", "path": "thirdeye/thirdeye-pinot/src/main/java/org/apache/pinot/thirdeye/common/restclient/AbstractRestClient.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQyMzozMjo0OVrOG13v7Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQwMTo0MzozMVrOG2g6bA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTE0MTEwMQ==", "bodyText": "shall the connection be put into a try-with-resources block? so that it can be closed whenever there is any exception.", "url": "https://github.com/apache/pinot/pull/5713#discussion_r459141101", "createdAt": "2020-07-22T23:32:49Z", "author": {"login": "jihaozh"}, "path": "thirdeye/thirdeye-pinot/src/main/java/org/apache/pinot/thirdeye/common/restclient/AbstractRestClient.java", "diffHunk": "@@ -0,0 +1,269 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.pinot.thirdeye.common.restclient;\n+\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.io.UnsupportedEncodingException;\n+import java.net.HttpURLConnection;\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.net.URLEncoder;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.SortedMap;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+\n+/**\n+ * A generic API Rest Client to perform GET and POST\n+ */\n+public abstract class AbstractRestClient {\n+  private final Logger LOG = LoggerFactory.getLogger(this.getClass());\n+\n+  private static final ObjectMapper OBJECT_MAPPER = new ObjectMapper();\n+  private final HttpURLConnectionFactory connectionFactory;\n+\n+  /**\n+   * Using a URLFactory to create URLs allows unit tests to mock out server communication.\n+   */\n+  public class HttpURLConnectionFactory {\n+    public HttpURLConnection openConnection(String url) throws MalformedURLException, IOException {\n+      return (HttpURLConnection) new URL(url).openConnection();\n+    }\n+  }\n+\n+  /**\n+   * Set up the client with a default URLFactory that creates real HTTP connections.\n+   * For unit tests, we use the alternate constructor to pass a mock.\n+   */\n+  public AbstractRestClient() {\n+    connectionFactory = new HttpURLConnectionFactory();\n+  }\n+\n+  /**\n+   * For testing only, create a client with an alternate URLFactory. This constructor allows\n+   * unit tests to mock server communication.\n+   */\n+  public AbstractRestClient(HttpURLConnectionFactory connectionFactory) {\n+    this.connectionFactory = connectionFactory;\n+  }\n+\n+  /**\n+   * Perform a GET request to the given URL, accepts a method that will parse the response as a parameter.\n+   * A timeout of zero is interpreted as an infinite timeout.\n+   * @param <T>  the type parameter defined as the return type of the response parser method\n+   * @param url the http url\n+   * @param host the host to connect to\n+   * @param headers the headers for communication\n+   */\n+  public <T> T doGet(String url, String host, Map<String, String> headers,\n+      ParseResponseFunction<InputStream, T> responseParserFunc) throws IOException {\n+    return doGet(url, host, headers, 0, 0, responseParserFunc);\n+  }\n+\n+  /**\n+   * Perform a GET request to the given URL, accepts a method that will parse the response as a parameter.\n+   * @param <T>  the type parameter defined as the return type of the response parser method\n+   * @param url the http url\n+   * @param host the host to connect to\n+   * @param connectTimeout timeout in milliseconds\n+   * @param readTimeout timeout in milliseconds\n+   */\n+  public <T> T doGet(String url, String host, Map<String, String> reqHeaders, int connectTimeout, int readTimeout,\n+      ParseResponseFunction<InputStream, T> responseParserFunc) throws IOException {\n+    Map<String, String> headers = new HashMap<>(reqHeaders);\n+    headers.put(\"User-Agent\", getClass().getName());\n+    headers.put(\"Host\", host);\n+    headers.put(\"Accept\", \"application/json\");\n+\n+    return doRequest(url, \"GET\", new byte[0], null, connectTimeout, readTimeout, headers,\n+        responseParserFunc);\n+  }\n+\n+  /**\n+   * Perform a POST request to the given URL, with a JSON or raw string as content.\n+   * If the payload is an object that will be serialized to JSON the isContentTypeJSON must be set to true\n+   * @param <T>  the type parameter defined as the return type of the response parser method\n+   * @param url the http url\n+   * @param host the host to connect to\n+   * @param postContent the post content\n+   * @param isContentTypeJson flag indicating if the content is json type or not\n+   */\n+  public <T> T doPost(String url, String host, Map<String, String> reqHeaders, Object postContent,\n+      boolean isContentTypeJson, ParseResponseFunction<InputStream, T> responseParserFunc) throws IOException {\n+    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n+    OBJECT_MAPPER.writeValue(baos, postContent);\n+    byte[] content = baos.toByteArray();\n+    String contentType = isContentTypeJson ? \"application/json\" : null;\n+\n+    Map<String, String> headers = new HashMap<>(reqHeaders);\n+    headers.put(\"User-Agent\", getClass().getName());\n+    headers.put(\"Host\", host);\n+    headers.put(\"Accept\", \"application/json\");\n+\n+    return doRequest(url, \"POST\", content, contentType, 0, 0, headers,\n+        responseParserFunc);\n+  }\n+\n+  /**\n+   * Send a request to the given URL with the given parameters.\n+   * @param <T> the type parameter defined as the return type of the response parser method\n+   * @param url server url.\n+   * @param method HTTP method.\n+   * @param content request content.\n+   * @param contentType request content type.\n+   * @param connectTimeoutMillis connection timeout.\n+   * @param readTimeoutMillis read timeout.\n+   * @param headers any additional request headers.\n+   * @return T the result of the parser functions applied to the response content.\n+   */\n+  private <T> T doRequest(String url, String method, byte[] content, String contentType, int connectTimeoutMillis,\n+      int readTimeoutMillis, Map<String, String> headers, ParseResponseFunction<InputStream, T> responseParserFunc)\n+      throws IOException {\n+    long startedMillis = System.currentTimeMillis();\n+\n+    HttpURLConnection conn = this.connectionFactory.openConnection(url);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "444d71494af950680e6ba84375cc99e5727453fd"}, "originalPosition": 148}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTgxNTUzMg==", "bodyText": "no longer applies", "url": "https://github.com/apache/pinot/pull/5713#discussion_r459815532", "createdAt": "2020-07-24T01:43:31Z", "author": {"login": "akshayrai"}, "path": "thirdeye/thirdeye-pinot/src/main/java/org/apache/pinot/thirdeye/common/restclient/AbstractRestClient.java", "diffHunk": "@@ -0,0 +1,269 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.pinot.thirdeye.common.restclient;\n+\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.io.UnsupportedEncodingException;\n+import java.net.HttpURLConnection;\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.net.URLEncoder;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.SortedMap;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+\n+/**\n+ * A generic API Rest Client to perform GET and POST\n+ */\n+public abstract class AbstractRestClient {\n+  private final Logger LOG = LoggerFactory.getLogger(this.getClass());\n+\n+  private static final ObjectMapper OBJECT_MAPPER = new ObjectMapper();\n+  private final HttpURLConnectionFactory connectionFactory;\n+\n+  /**\n+   * Using a URLFactory to create URLs allows unit tests to mock out server communication.\n+   */\n+  public class HttpURLConnectionFactory {\n+    public HttpURLConnection openConnection(String url) throws MalformedURLException, IOException {\n+      return (HttpURLConnection) new URL(url).openConnection();\n+    }\n+  }\n+\n+  /**\n+   * Set up the client with a default URLFactory that creates real HTTP connections.\n+   * For unit tests, we use the alternate constructor to pass a mock.\n+   */\n+  public AbstractRestClient() {\n+    connectionFactory = new HttpURLConnectionFactory();\n+  }\n+\n+  /**\n+   * For testing only, create a client with an alternate URLFactory. This constructor allows\n+   * unit tests to mock server communication.\n+   */\n+  public AbstractRestClient(HttpURLConnectionFactory connectionFactory) {\n+    this.connectionFactory = connectionFactory;\n+  }\n+\n+  /**\n+   * Perform a GET request to the given URL, accepts a method that will parse the response as a parameter.\n+   * A timeout of zero is interpreted as an infinite timeout.\n+   * @param <T>  the type parameter defined as the return type of the response parser method\n+   * @param url the http url\n+   * @param host the host to connect to\n+   * @param headers the headers for communication\n+   */\n+  public <T> T doGet(String url, String host, Map<String, String> headers,\n+      ParseResponseFunction<InputStream, T> responseParserFunc) throws IOException {\n+    return doGet(url, host, headers, 0, 0, responseParserFunc);\n+  }\n+\n+  /**\n+   * Perform a GET request to the given URL, accepts a method that will parse the response as a parameter.\n+   * @param <T>  the type parameter defined as the return type of the response parser method\n+   * @param url the http url\n+   * @param host the host to connect to\n+   * @param connectTimeout timeout in milliseconds\n+   * @param readTimeout timeout in milliseconds\n+   */\n+  public <T> T doGet(String url, String host, Map<String, String> reqHeaders, int connectTimeout, int readTimeout,\n+      ParseResponseFunction<InputStream, T> responseParserFunc) throws IOException {\n+    Map<String, String> headers = new HashMap<>(reqHeaders);\n+    headers.put(\"User-Agent\", getClass().getName());\n+    headers.put(\"Host\", host);\n+    headers.put(\"Accept\", \"application/json\");\n+\n+    return doRequest(url, \"GET\", new byte[0], null, connectTimeout, readTimeout, headers,\n+        responseParserFunc);\n+  }\n+\n+  /**\n+   * Perform a POST request to the given URL, with a JSON or raw string as content.\n+   * If the payload is an object that will be serialized to JSON the isContentTypeJSON must be set to true\n+   * @param <T>  the type parameter defined as the return type of the response parser method\n+   * @param url the http url\n+   * @param host the host to connect to\n+   * @param postContent the post content\n+   * @param isContentTypeJson flag indicating if the content is json type or not\n+   */\n+  public <T> T doPost(String url, String host, Map<String, String> reqHeaders, Object postContent,\n+      boolean isContentTypeJson, ParseResponseFunction<InputStream, T> responseParserFunc) throws IOException {\n+    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n+    OBJECT_MAPPER.writeValue(baos, postContent);\n+    byte[] content = baos.toByteArray();\n+    String contentType = isContentTypeJson ? \"application/json\" : null;\n+\n+    Map<String, String> headers = new HashMap<>(reqHeaders);\n+    headers.put(\"User-Agent\", getClass().getName());\n+    headers.put(\"Host\", host);\n+    headers.put(\"Accept\", \"application/json\");\n+\n+    return doRequest(url, \"POST\", content, contentType, 0, 0, headers,\n+        responseParserFunc);\n+  }\n+\n+  /**\n+   * Send a request to the given URL with the given parameters.\n+   * @param <T> the type parameter defined as the return type of the response parser method\n+   * @param url server url.\n+   * @param method HTTP method.\n+   * @param content request content.\n+   * @param contentType request content type.\n+   * @param connectTimeoutMillis connection timeout.\n+   * @param readTimeoutMillis read timeout.\n+   * @param headers any additional request headers.\n+   * @return T the result of the parser functions applied to the response content.\n+   */\n+  private <T> T doRequest(String url, String method, byte[] content, String contentType, int connectTimeoutMillis,\n+      int readTimeoutMillis, Map<String, String> headers, ParseResponseFunction<InputStream, T> responseParserFunc)\n+      throws IOException {\n+    long startedMillis = System.currentTimeMillis();\n+\n+    HttpURLConnection conn = this.connectionFactory.openConnection(url);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTE0MTEwMQ=="}, "originalCommit": {"oid": "444d71494af950680e6ba84375cc99e5727453fd"}, "originalPosition": 148}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4137, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}