{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzU4NzY5NTM4", "number": 4954, "reviewThreads": {"totalCount": 31, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wN1QwMTowMjoxMVrODWILMA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQyMjo0NDo0MVrODmfNpg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI0NTI5MjAwOnYy", "diffSide": "RIGHT", "path": "pinot-core/src/main/java/org/apache/pinot/core/indexsegment/IndexSegment.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wN1QwMTowMjoxMVrOFatdlg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQwMDo1NToyMlrOFoeghQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzU1MjE1MA==", "bodyText": "We have two APIs, one named getColumnNames() and the other named getPhysicalColumnNames().  select * should decide which one to use? Do we need a third one? Why can't getPhysicalColumnNames API return the right set of columns from the consuming segment?", "url": "https://github.com/apache/pinot/pull/4954#discussion_r363552150", "createdAt": "2020-01-07T01:02:11Z", "author": {"login": "mcvsubbu"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/indexsegment/IndexSegment.java", "diffHunk": "@@ -57,6 +58,13 @@\n    */\n   Set<String> getPhysicalColumnNames();\n \n+  /**\n+   * Returns all columns for the \"select *\" query\n+   *\n+   * @return Set of column names\n+   */\n+  Set<String> getColumnNamesForSelectStar();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9947e3d25d7863b7e6e4afc6e5d3a44fd8a4550e"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzU2MTI2OA==", "bodyText": "For the consuming segment, select * should return physical columns + newly added columns. Since the newly added columns are provided by the virtual column provider, I feel it a bit weird to include them in getPhysicalColumnNames method.\nBasically the columns are\n\nphysical column\nvirtual column\n2.1 built-in virtual columns (docId, segmentName, hostName)\n2.2 newly added columns in the consuming segment\n\ngetColumnNames should return 1+2.1+2.2\ngetPhysicalColumnNames should return 1\ngetColumnNamesForSelectStar should return 1+2.2", "url": "https://github.com/apache/pinot/pull/4954#discussion_r363561268", "createdAt": "2020-01-07T01:48:10Z", "author": {"login": "haibow"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/indexsegment/IndexSegment.java", "diffHunk": "@@ -57,6 +58,13 @@\n    */\n   Set<String> getPhysicalColumnNames();\n \n+  /**\n+   * Returns all columns for the \"select *\" query\n+   *\n+   * @return Set of column names\n+   */\n+  Set<String> getColumnNamesForSelectStar();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzU1MjE1MA=="}, "originalCommit": {"oid": "9947e3d25d7863b7e6e4afc6e5d3a44fd8a4550e"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODMyNDE5Nw==", "bodyText": "Newly added columns should not be included in virtual column provider. You need a new provider for these columns.", "url": "https://github.com/apache/pinot/pull/4954#discussion_r368324197", "createdAt": "2020-01-19T21:27:45Z", "author": {"login": "mcvsubbu"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/indexsegment/IndexSegment.java", "diffHunk": "@@ -57,6 +58,13 @@\n    */\n   Set<String> getPhysicalColumnNames();\n \n+  /**\n+   * Returns all columns for the \"select *\" query\n+   *\n+   * @return Set of column names\n+   */\n+  Set<String> getColumnNamesForSelectStar();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzU1MjE1MA=="}, "originalCommit": {"oid": "9947e3d25d7863b7e6e4afc6e5d3a44fd8a4550e"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzk4NzIwNQ==", "bodyText": "Why are we treating newly added columns as virtual?", "url": "https://github.com/apache/pinot/pull/4954#discussion_r377987205", "createdAt": "2020-02-12T00:55:22Z", "author": {"login": "mcvsubbu"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/indexsegment/IndexSegment.java", "diffHunk": "@@ -57,6 +58,13 @@\n    */\n   Set<String> getPhysicalColumnNames();\n \n+  /**\n+   * Returns all columns for the \"select *\" query\n+   *\n+   * @return Set of column names\n+   */\n+  Set<String> getColumnNamesForSelectStar();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzU1MjE1MA=="}, "originalCommit": {"oid": "9947e3d25d7863b7e6e4afc6e5d3a44fd8a4550e"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI0NTI5NzY4OnYy", "diffSide": "RIGHT", "path": "pinot-core/src/main/java/org/apache/pinot/core/indexsegment/mutable/MutableSegmentImpl.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wN1QwMTowNjo0OFrOFathLw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QwMToxNToyMVrOFesXQg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzU1MzA3MQ==", "bodyText": "Given that we dont have a member called _newSchema, why rename this? Can we keep it as _schema?", "url": "https://github.com/apache/pinot/pull/4954#discussion_r363553071", "createdAt": "2020-01-07T01:06:48Z", "author": {"login": "mcvsubbu"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/indexsegment/mutable/MutableSegmentImpl.java", "diffHunk": "@@ -80,9 +84,9 @@\n   private final long _startTimeMillis = System.currentTimeMillis();\n \n   private final String _segmentName;\n-  private final Schema _schema;\n+  private final Schema _originalSchema;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9947e3d25d7863b7e6e4afc6e5d3a44fd8a4550e"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzU2MjA0NQ==", "bodyText": "Would like to avoid any potential confusion. If a schema update happens on the consuming segment, segmentMetadata and schema are still the original ones, without including the newly added columns", "url": "https://github.com/apache/pinot/pull/4954#discussion_r363562045", "createdAt": "2020-01-07T01:52:10Z", "author": {"login": "haibow"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/indexsegment/mutable/MutableSegmentImpl.java", "diffHunk": "@@ -80,9 +84,9 @@\n   private final long _startTimeMillis = System.currentTimeMillis();\n \n   private final String _segmentName;\n-  private final Schema _schema;\n+  private final Schema _originalSchema;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzU1MzA3MQ=="}, "originalCommit": {"oid": "9947e3d25d7863b7e6e4afc6e5d3a44fd8a4550e"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzAxMjMzMw==", "bodyText": "nit: this feels like leaking information about very specific behavior into the MutableSegmentImpl. Instead, in the addExtraColumns method, the Schema param can be renamed to \"newSchema\". Besides, you already have _newColumnsFieldSpecMap", "url": "https://github.com/apache/pinot/pull/4954#discussion_r367012333", "createdAt": "2020-01-15T17:37:20Z", "author": {"login": "npawar"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/indexsegment/mutable/MutableSegmentImpl.java", "diffHunk": "@@ -80,9 +84,9 @@\n   private final long _startTimeMillis = System.currentTimeMillis();\n \n   private final String _segmentName;\n-  private final Schema _schema;\n+  private final Schema _originalSchema;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzU1MzA3MQ=="}, "originalCommit": {"oid": "9947e3d25d7863b7e6e4afc6e5d3a44fd8a4550e"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzcyODQ1MA==", "bodyText": "Thanks for the comment. Updated the diff accordingly.", "url": "https://github.com/apache/pinot/pull/4954#discussion_r367728450", "createdAt": "2020-01-17T01:15:21Z", "author": {"login": "haibow"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/indexsegment/mutable/MutableSegmentImpl.java", "diffHunk": "@@ -80,9 +84,9 @@\n   private final long _startTimeMillis = System.currentTimeMillis();\n \n   private final String _segmentName;\n-  private final Schema _schema;\n+  private final Schema _originalSchema;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzU1MzA3MQ=="}, "originalCommit": {"oid": "9947e3d25d7863b7e6e4afc6e5d3a44fd8a4550e"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI0NTI5ODI4OnYy", "diffSide": "RIGHT", "path": "pinot-core/src/main/java/org/apache/pinot/core/indexsegment/mutable/MutableSegmentImpl.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wN1QwMTowNzoyMVrOFathlA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQwMDo1Nzo0OFrOFgNtzA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzU1MzE3Mg==", "bodyText": "Same here. Why rename?", "url": "https://github.com/apache/pinot/pull/4954#discussion_r363553172", "createdAt": "2020-01-07T01:07:21Z", "author": {"login": "mcvsubbu"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/indexsegment/mutable/MutableSegmentImpl.java", "diffHunk": "@@ -80,9 +84,9 @@\n   private final long _startTimeMillis = System.currentTimeMillis();\n \n   private final String _segmentName;\n-  private final Schema _schema;\n+  private final Schema _originalSchema;\n   private final int _capacity;\n-  private final SegmentMetadata _segmentMetadata;\n+  private final SegmentMetadata _originalSegmentMetadata;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9947e3d25d7863b7e6e4afc6e5d3a44fd8a4550e"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzU2MjE1Mw==", "bodyText": "same above, segmentMetadata is immutable, just to be super clear it does not reflect the newly added columns.", "url": "https://github.com/apache/pinot/pull/4954#discussion_r363562153", "createdAt": "2020-01-07T01:52:42Z", "author": {"login": "haibow"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/indexsegment/mutable/MutableSegmentImpl.java", "diffHunk": "@@ -80,9 +84,9 @@\n   private final long _startTimeMillis = System.currentTimeMillis();\n \n   private final String _segmentName;\n-  private final Schema _schema;\n+  private final Schema _originalSchema;\n   private final int _capacity;\n-  private final SegmentMetadata _segmentMetadata;\n+  private final SegmentMetadata _originalSegmentMetadata;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzU1MzE3Mg=="}, "originalCommit": {"oid": "9947e3d25d7863b7e6e4afc6e5d3a44fd8a4550e"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDQ1NjM1MA==", "bodyText": "I would prefer to leave the names as is, and rename the new fields as _columnsAddedDuringConsumption or something like that. We can wait for others to chime in before we rename stuff", "url": "https://github.com/apache/pinot/pull/4954#discussion_r364456350", "createdAt": "2020-01-08T21:39:46Z", "author": {"login": "mcvsubbu"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/indexsegment/mutable/MutableSegmentImpl.java", "diffHunk": "@@ -80,9 +84,9 @@\n   private final long _startTimeMillis = System.currentTimeMillis();\n \n   private final String _segmentName;\n-  private final Schema _schema;\n+  private final Schema _originalSchema;\n   private final int _capacity;\n-  private final SegmentMetadata _segmentMetadata;\n+  private final SegmentMetadata _originalSegmentMetadata;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzU1MzE3Mg=="}, "originalCommit": {"oid": "9947e3d25d7863b7e6e4afc6e5d3a44fd8a4550e"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTMyMzQ2OA==", "bodyText": "Sounds good. I have reverted the rename", "url": "https://github.com/apache/pinot/pull/4954#discussion_r369323468", "createdAt": "2020-01-22T00:57:48Z", "author": {"login": "haibow"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/indexsegment/mutable/MutableSegmentImpl.java", "diffHunk": "@@ -80,9 +84,9 @@\n   private final long _startTimeMillis = System.currentTimeMillis();\n \n   private final String _segmentName;\n-  private final Schema _schema;\n+  private final Schema _originalSchema;\n   private final int _capacity;\n-  private final SegmentMetadata _segmentMetadata;\n+  private final SegmentMetadata _originalSegmentMetadata;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzU1MzE3Mg=="}, "originalCommit": {"oid": "9947e3d25d7863b7e6e4afc6e5d3a44fd8a4550e"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI0NTMwMTM1OnYy", "diffSide": "RIGHT", "path": "pinot-server/src/main/java/org/apache/pinot/server/starter/helix/HelixInstanceDataManager.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wN1QwMTowOTo1NVrOFatjdw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQyMTo0NDoyMlrOFgsCgg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzU1MzY1NQ==", "bodyText": "Just call the reload API on the segment, and let the segment decide if it is to be reloaded (i.e. depending on the config), and also how it should do it.", "url": "https://github.com/apache/pinot/pull/4954#discussion_r363553655", "createdAt": "2020-01-07T01:09:55Z", "author": {"login": "mcvsubbu"}, "path": "pinot-server/src/main/java/org/apache/pinot/server/starter/helix/HelixInstanceDataManager.java", "diffHunk": "@@ -194,7 +198,17 @@ private void reloadSegment(String tableNameWithType, SegmentMetadata segmentMeta\n \n     File indexDir = segmentMetadata.getIndexDir();\n     if (indexDir == null) {\n-      LOGGER.info(\"Skip reloading REALTIME consuming segment: {} in table: {}\", segmentName, tableNameWithType);\n+      if (!_instanceDataManagerConfig.shouldReloadConsumingSegment()) {\n+        LOGGER.info(\"Skip reloading REALTIME consuming segment: {} in table: {}\", segmentName, tableNameWithType);\n+        return;\n+      }\n+      LOGGER.info(\"Try reloading REALTIME consuming segment: {} in table: {}\", segmentName, tableNameWithType);\n+      SegmentMetadataImpl segmentMetadataImpl = (SegmentMetadataImpl) segmentMetadata;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9947e3d25d7863b7e6e4afc6e5d3a44fd8a4550e"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzkyNDg3NQ==", "bodyText": "Could you elaborate on what you mean? To me, this method is the implementation of reload API (i.e. \"how it should do it\"). The logics below indicate how immutable segments are reloaded. Here it's a bit different for consuming segments - we just compare the schema and update the newly added columns, without doing an actual segment reload/replace.", "url": "https://github.com/apache/pinot/pull/4954#discussion_r363924875", "createdAt": "2020-01-07T19:59:12Z", "author": {"login": "haibow"}, "path": "pinot-server/src/main/java/org/apache/pinot/server/starter/helix/HelixInstanceDataManager.java", "diffHunk": "@@ -194,7 +198,17 @@ private void reloadSegment(String tableNameWithType, SegmentMetadata segmentMeta\n \n     File indexDir = segmentMetadata.getIndexDir();\n     if (indexDir == null) {\n-      LOGGER.info(\"Skip reloading REALTIME consuming segment: {} in table: {}\", segmentName, tableNameWithType);\n+      if (!_instanceDataManagerConfig.shouldReloadConsumingSegment()) {\n+        LOGGER.info(\"Skip reloading REALTIME consuming segment: {} in table: {}\", segmentName, tableNameWithType);\n+        return;\n+      }\n+      LOGGER.info(\"Try reloading REALTIME consuming segment: {} in table: {}\", segmentName, tableNameWithType);\n+      SegmentMetadataImpl segmentMetadataImpl = (SegmentMetadataImpl) segmentMetadata;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzU1MzY1NQ=="}, "originalCommit": {"oid": "9947e3d25d7863b7e6e4afc6e5d3a44fd8a4550e"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODMyNzA1Mw==", "bodyText": "I would bypass the references to DefaultColumnAction class altogether. Since we have a handle to the mutable index, just call the addExtraColumns API with the new schema. Just make sure that API handles well if we call it multiple times, either with same set of columns or newer ones than the previous time.\nAgreed with your observation that this is the reload API. It makes me think that reload API should be implemented as a part of the segment API, but that is a HUGE change, and I am not sure what else is involved there (and why it was done this way as a static method like ImmutableSegment.reload()).  So, let us not go into that.", "url": "https://github.com/apache/pinot/pull/4954#discussion_r368327053", "createdAt": "2020-01-19T22:11:36Z", "author": {"login": "mcvsubbu"}, "path": "pinot-server/src/main/java/org/apache/pinot/server/starter/helix/HelixInstanceDataManager.java", "diffHunk": "@@ -194,7 +198,17 @@ private void reloadSegment(String tableNameWithType, SegmentMetadata segmentMeta\n \n     File indexDir = segmentMetadata.getIndexDir();\n     if (indexDir == null) {\n-      LOGGER.info(\"Skip reloading REALTIME consuming segment: {} in table: {}\", segmentName, tableNameWithType);\n+      if (!_instanceDataManagerConfig.shouldReloadConsumingSegment()) {\n+        LOGGER.info(\"Skip reloading REALTIME consuming segment: {} in table: {}\", segmentName, tableNameWithType);\n+        return;\n+      }\n+      LOGGER.info(\"Try reloading REALTIME consuming segment: {} in table: {}\", segmentName, tableNameWithType);\n+      SegmentMetadataImpl segmentMetadataImpl = (SegmentMetadataImpl) segmentMetadata;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzU1MzY1NQ=="}, "originalCommit": {"oid": "9947e3d25d7863b7e6e4afc6e5d3a44fd8a4550e"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTgyMDI5MA==", "bodyText": "Removed defaultColumnActionMap from the signature. Multiple calls to the same consuming segment is covered. It will always compare the new schema with the original schema (when the segment started consuming), and add the new columns to the new columns map.", "url": "https://github.com/apache/pinot/pull/4954#discussion_r369820290", "createdAt": "2020-01-22T21:44:22Z", "author": {"login": "haibow"}, "path": "pinot-server/src/main/java/org/apache/pinot/server/starter/helix/HelixInstanceDataManager.java", "diffHunk": "@@ -194,7 +198,17 @@ private void reloadSegment(String tableNameWithType, SegmentMetadata segmentMeta\n \n     File indexDir = segmentMetadata.getIndexDir();\n     if (indexDir == null) {\n-      LOGGER.info(\"Skip reloading REALTIME consuming segment: {} in table: {}\", segmentName, tableNameWithType);\n+      if (!_instanceDataManagerConfig.shouldReloadConsumingSegment()) {\n+        LOGGER.info(\"Skip reloading REALTIME consuming segment: {} in table: {}\", segmentName, tableNameWithType);\n+        return;\n+      }\n+      LOGGER.info(\"Try reloading REALTIME consuming segment: {} in table: {}\", segmentName, tableNameWithType);\n+      SegmentMetadataImpl segmentMetadataImpl = (SegmentMetadataImpl) segmentMetadata;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzU1MzY1NQ=="}, "originalCommit": {"oid": "9947e3d25d7863b7e6e4afc6e5d3a44fd8a4550e"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI0NTMwNjQ1OnYy", "diffSide": "RIGHT", "path": "pinot-core/src/main/java/org/apache/pinot/core/indexsegment/mutable/MutableSegmentImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wN1QwMToxNDowOFrOFatmtQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wN1QwMToxNDowOFrOFatmtQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzU1NDQ4NQ==", "bodyText": "remove this. We already have _logger", "url": "https://github.com/apache/pinot/pull/4954#discussion_r363554485", "createdAt": "2020-01-07T01:14:08Z", "author": {"login": "mcvsubbu"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/indexsegment/mutable/MutableSegmentImpl.java", "diffHunk": "@@ -68,6 +71,7 @@\n \n \n public class MutableSegmentImpl implements MutableSegment {\n+  private static final Logger LOGGER = LoggerFactory.getLogger(MutableSegmentImpl.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9947e3d25d7863b7e6e4afc6e5d3a44fd8a4550e"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI0NTMxMTczOnYy", "diffSide": "RIGHT", "path": "pinot-core/src/main/java/org/apache/pinot/core/io/reader/impl/SameMultiValueInvertedIndex.java", "isResolved": false, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wN1QwMToxNzo0NlrOFatp-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQyMTo0Nzo0NlrOFgsInA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzU1NTMyMQ==", "bodyText": "Let us think of a better name for this", "url": "https://github.com/apache/pinot/pull/4954#discussion_r363555321", "createdAt": "2020-01-07T01:17:46Z", "author": {"login": "mcvsubbu"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/io/reader/impl/SameMultiValueInvertedIndex.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.core.io.reader.impl;\n+\n+import java.io.IOException;\n+import org.apache.pinot.common.utils.Pairs;\n+import org.apache.pinot.core.io.reader.BaseSingleColumnMultiValueReader;\n+import org.apache.pinot.core.io.reader.impl.v1.FixedBitMultiValueReader;\n+\n+\n+/**\n+ * Reader for the multi-value column with the same value\n+ */\n+public class SameMultiValueInvertedIndex extends BaseSingleColumnMultiValueReader<FixedBitMultiValueReader.Context> implements SortedIndexMultiValueReader<FixedBitMultiValueReader.Context> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9947e3d25d7863b7e6e4afc6e5d3a44fd8a4550e"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDQzODY1Mg==", "bodyText": "I thought about using \"singlevalue\" to express \"same\", but there might be ambiguity since we already use single/multi-value in fieldtype. Any suggestions here?", "url": "https://github.com/apache/pinot/pull/4954#discussion_r364438652", "createdAt": "2020-01-08T20:54:58Z", "author": {"login": "haibow"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/io/reader/impl/SameMultiValueInvertedIndex.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.core.io.reader.impl;\n+\n+import java.io.IOException;\n+import org.apache.pinot.common.utils.Pairs;\n+import org.apache.pinot.core.io.reader.BaseSingleColumnMultiValueReader;\n+import org.apache.pinot.core.io.reader.impl.v1.FixedBitMultiValueReader;\n+\n+\n+/**\n+ * Reader for the multi-value column with the same value\n+ */\n+public class SameMultiValueInvertedIndex extends BaseSingleColumnMultiValueReader<FixedBitMultiValueReader.Context> implements SortedIndexMultiValueReader<FixedBitMultiValueReader.Context> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzU1NTMyMQ=="}, "originalCommit": {"oid": "9947e3d25d7863b7e6e4afc6e5d3a44fd8a4550e"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Njk5Mzk4Ng==", "bodyText": "How about Default or Extra instead of Same?", "url": "https://github.com/apache/pinot/pull/4954#discussion_r366993986", "createdAt": "2020-01-15T17:01:03Z", "author": {"login": "npawar"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/io/reader/impl/SameMultiValueInvertedIndex.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.core.io.reader.impl;\n+\n+import java.io.IOException;\n+import org.apache.pinot.common.utils.Pairs;\n+import org.apache.pinot.core.io.reader.BaseSingleColumnMultiValueReader;\n+import org.apache.pinot.core.io.reader.impl.v1.FixedBitMultiValueReader;\n+\n+\n+/**\n+ * Reader for the multi-value column with the same value\n+ */\n+public class SameMultiValueInvertedIndex extends BaseSingleColumnMultiValueReader<FixedBitMultiValueReader.Context> implements SortedIndexMultiValueReader<FixedBitMultiValueReader.Context> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzU1NTMyMQ=="}, "originalCommit": {"oid": "9947e3d25d7863b7e6e4afc6e5d3a44fd8a4550e"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzcyNTU5OQ==", "bodyText": "Default sounds good to me. I will make the change if there are no objections/other suggestions.", "url": "https://github.com/apache/pinot/pull/4954#discussion_r367725599", "createdAt": "2020-01-17T01:02:59Z", "author": {"login": "haibow"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/io/reader/impl/SameMultiValueInvertedIndex.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.core.io.reader.impl;\n+\n+import java.io.IOException;\n+import org.apache.pinot.common.utils.Pairs;\n+import org.apache.pinot.core.io.reader.BaseSingleColumnMultiValueReader;\n+import org.apache.pinot.core.io.reader.impl.v1.FixedBitMultiValueReader;\n+\n+\n+/**\n+ * Reader for the multi-value column with the same value\n+ */\n+public class SameMultiValueInvertedIndex extends BaseSingleColumnMultiValueReader<FixedBitMultiValueReader.Context> implements SortedIndexMultiValueReader<FixedBitMultiValueReader.Context> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzU1NTMyMQ=="}, "originalCommit": {"oid": "9947e3d25d7863b7e6e4afc6e5d3a44fd8a4550e"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODMyNjU1Mg==", "bodyText": "Constant is another alternative", "url": "https://github.com/apache/pinot/pull/4954#discussion_r368326552", "createdAt": "2020-01-19T22:04:30Z", "author": {"login": "mcvsubbu"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/io/reader/impl/SameMultiValueInvertedIndex.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.core.io.reader.impl;\n+\n+import java.io.IOException;\n+import org.apache.pinot.common.utils.Pairs;\n+import org.apache.pinot.core.io.reader.BaseSingleColumnMultiValueReader;\n+import org.apache.pinot.core.io.reader.impl.v1.FixedBitMultiValueReader;\n+\n+\n+/**\n+ * Reader for the multi-value column with the same value\n+ */\n+public class SameMultiValueInvertedIndex extends BaseSingleColumnMultiValueReader<FixedBitMultiValueReader.Context> implements SortedIndexMultiValueReader<FixedBitMultiValueReader.Context> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzU1NTMyMQ=="}, "originalCommit": {"oid": "9947e3d25d7863b7e6e4afc6e5d3a44fd8a4550e"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTgyMTg1Mg==", "bodyText": "Thanks for the suggestion. Renamed to Constant", "url": "https://github.com/apache/pinot/pull/4954#discussion_r369821852", "createdAt": "2020-01-22T21:47:46Z", "author": {"login": "haibow"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/io/reader/impl/SameMultiValueInvertedIndex.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.core.io.reader.impl;\n+\n+import java.io.IOException;\n+import org.apache.pinot.common.utils.Pairs;\n+import org.apache.pinot.core.io.reader.BaseSingleColumnMultiValueReader;\n+import org.apache.pinot.core.io.reader.impl.v1.FixedBitMultiValueReader;\n+\n+\n+/**\n+ * Reader for the multi-value column with the same value\n+ */\n+public class SameMultiValueInvertedIndex extends BaseSingleColumnMultiValueReader<FixedBitMultiValueReader.Context> implements SortedIndexMultiValueReader<FixedBitMultiValueReader.Context> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzU1NTMyMQ=="}, "originalCommit": {"oid": "9947e3d25d7863b7e6e4afc6e5d3a44fd8a4550e"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI0NTMyMTA3OnYy", "diffSide": "RIGHT", "path": "pinot-core/src/main/java/org/apache/pinot/core/query/pruner/SegmentPrunerService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wN1QwMToyNDozMFrOFatvwQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wN1QwMTo1Njo1N1rOFauHxw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzU1NjgwMQ==", "bodyText": "LOGGER  can be configured to log the class name, line number, etc. so we should not be logging class name", "url": "https://github.com/apache/pinot/pull/4954#discussion_r363556801", "createdAt": "2020-01-07T01:24:30Z", "author": {"login": "mcvsubbu"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/query/pruner/SegmentPrunerService.java", "diffHunk": "@@ -52,7 +52,7 @@ public SegmentPrunerService(SegmentPrunerConfig config) {\n   public boolean prune(IndexSegment segment, ServerQueryRequest queryRequest) {\n     for (SegmentPruner segmentPruner : _segmentPruners) {\n       if (segmentPruner.prune(segment, queryRequest)) {\n-        LOGGER.debug(\"Pruned segment: {}\", segment.getSegmentName());\n+        LOGGER.debug(\"{} pruned segment: {}\", segmentPruner.getClass().getName(), segment.getSegmentName());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9947e3d25d7863b7e6e4afc6e5d3a44fd8a4550e"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzU2Mjk1MQ==", "bodyText": "I'm trying to log the class name for each SegmentPruner class being called, not the main SegmentPrunerService class", "url": "https://github.com/apache/pinot/pull/4954#discussion_r363562951", "createdAt": "2020-01-07T01:56:57Z", "author": {"login": "haibow"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/query/pruner/SegmentPrunerService.java", "diffHunk": "@@ -52,7 +52,7 @@ public SegmentPrunerService(SegmentPrunerConfig config) {\n   public boolean prune(IndexSegment segment, ServerQueryRequest queryRequest) {\n     for (SegmentPruner segmentPruner : _segmentPruners) {\n       if (segmentPruner.prune(segment, queryRequest)) {\n-        LOGGER.debug(\"Pruned segment: {}\", segment.getSegmentName());\n+        LOGGER.debug(\"{} pruned segment: {}\", segmentPruner.getClass().getName(), segment.getSegmentName());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzU1NjgwMQ=="}, "originalCommit": {"oid": "9947e3d25d7863b7e6e4afc6e5d3a44fd8a4550e"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI0NTMyNjcyOnYy", "diffSide": "RIGHT", "path": "pinot-core/src/main/java/org/apache/pinot/core/segment/index/SegmentMetadataImpl.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wN1QwMToyOToyMFrOFatzOA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QwMTozOTozM1rOFmv7RA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzU1NzY4OA==", "bodyText": "no other changes here? why touch this file?", "url": "https://github.com/apache/pinot/pull/4954#discussion_r363557688", "createdAt": "2020-01-07T01:29:20Z", "author": {"login": "mcvsubbu"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/segment/index/SegmentMetadataImpl.java", "diffHunk": "@@ -43,19 +43,19 @@\n import org.apache.commons.configuration.ConfigurationException;\n import org.apache.commons.configuration.PropertiesConfiguration;\n import org.apache.commons.lang.StringEscapeUtils;\n-import org.apache.pinot.spi.data.MetricFieldSpec;\n-import org.apache.pinot.spi.data.Schema;\n import org.apache.pinot.common.metadata.segment.RealtimeSegmentZKMetadata;\n import org.apache.pinot.common.segment.SegmentMetadata;\n import org.apache.pinot.common.segment.StarTreeMetadata;\n-import org.apache.pinot.spi.utils.JsonUtils;\n-import org.apache.pinot.spi.utils.TimeUtils;\n import org.apache.pinot.core.indexsegment.generator.SegmentVersion;\n import org.apache.pinot.core.segment.creator.impl.V1Constants;\n import org.apache.pinot.core.segment.creator.impl.V1Constants.MetadataKeys;\n import org.apache.pinot.core.segment.store.SegmentDirectoryPaths;\n import org.apache.pinot.core.startree.v2.StarTreeV2Constants;\n import org.apache.pinot.core.startree.v2.StarTreeV2Metadata;\n+import org.apache.pinot.spi.data.MetricFieldSpec;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9947e3d25d7863b7e6e4afc6e5d3a44fd8a4550e"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzU2MzEzMA==", "bodyText": "The file is auto formatted - had the wrong import order (after spi refactor). I guess I happened to format it when reading it", "url": "https://github.com/apache/pinot/pull/4954#discussion_r363563130", "createdAt": "2020-01-07T01:58:03Z", "author": {"login": "haibow"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/segment/index/SegmentMetadataImpl.java", "diffHunk": "@@ -43,19 +43,19 @@\n import org.apache.commons.configuration.ConfigurationException;\n import org.apache.commons.configuration.PropertiesConfiguration;\n import org.apache.commons.lang.StringEscapeUtils;\n-import org.apache.pinot.spi.data.MetricFieldSpec;\n-import org.apache.pinot.spi.data.Schema;\n import org.apache.pinot.common.metadata.segment.RealtimeSegmentZKMetadata;\n import org.apache.pinot.common.segment.SegmentMetadata;\n import org.apache.pinot.common.segment.StarTreeMetadata;\n-import org.apache.pinot.spi.utils.JsonUtils;\n-import org.apache.pinot.spi.utils.TimeUtils;\n import org.apache.pinot.core.indexsegment.generator.SegmentVersion;\n import org.apache.pinot.core.segment.creator.impl.V1Constants;\n import org.apache.pinot.core.segment.creator.impl.V1Constants.MetadataKeys;\n import org.apache.pinot.core.segment.store.SegmentDirectoryPaths;\n import org.apache.pinot.core.startree.v2.StarTreeV2Constants;\n import org.apache.pinot.core.startree.v2.StarTreeV2Metadata;\n+import org.apache.pinot.spi.data.MetricFieldSpec;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzU1NzY4OA=="}, "originalCommit": {"oid": "9947e3d25d7863b7e6e4afc6e5d3a44fd8a4550e"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDk5NDgwNw==", "bodyText": "you can undo your checkout (or, checkout from master and re-populate it)", "url": "https://github.com/apache/pinot/pull/4954#discussion_r374994807", "createdAt": "2020-02-05T00:08:28Z", "author": {"login": "mcvsubbu"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/segment/index/SegmentMetadataImpl.java", "diffHunk": "@@ -43,19 +43,19 @@\n import org.apache.commons.configuration.ConfigurationException;\n import org.apache.commons.configuration.PropertiesConfiguration;\n import org.apache.commons.lang.StringEscapeUtils;\n-import org.apache.pinot.spi.data.MetricFieldSpec;\n-import org.apache.pinot.spi.data.Schema;\n import org.apache.pinot.common.metadata.segment.RealtimeSegmentZKMetadata;\n import org.apache.pinot.common.segment.SegmentMetadata;\n import org.apache.pinot.common.segment.StarTreeMetadata;\n-import org.apache.pinot.spi.utils.JsonUtils;\n-import org.apache.pinot.spi.utils.TimeUtils;\n import org.apache.pinot.core.indexsegment.generator.SegmentVersion;\n import org.apache.pinot.core.segment.creator.impl.V1Constants;\n import org.apache.pinot.core.segment.creator.impl.V1Constants.MetadataKeys;\n import org.apache.pinot.core.segment.store.SegmentDirectoryPaths;\n import org.apache.pinot.core.startree.v2.StarTreeV2Constants;\n import org.apache.pinot.core.startree.v2.StarTreeV2Metadata;\n+import org.apache.pinot.spi.data.MetricFieldSpec;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzU1NzY4OA=="}, "originalCommit": {"oid": "9947e3d25d7863b7e6e4afc6e5d3a44fd8a4550e"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjE3NTQyOA==", "bodyText": "Since the import order should be fixed and has been fixed, I would like to keep the change as is. Will avoid such changes in the future.", "url": "https://github.com/apache/pinot/pull/4954#discussion_r376175428", "createdAt": "2020-02-07T01:39:33Z", "author": {"login": "haibow"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/segment/index/SegmentMetadataImpl.java", "diffHunk": "@@ -43,19 +43,19 @@\n import org.apache.commons.configuration.ConfigurationException;\n import org.apache.commons.configuration.PropertiesConfiguration;\n import org.apache.commons.lang.StringEscapeUtils;\n-import org.apache.pinot.spi.data.MetricFieldSpec;\n-import org.apache.pinot.spi.data.Schema;\n import org.apache.pinot.common.metadata.segment.RealtimeSegmentZKMetadata;\n import org.apache.pinot.common.segment.SegmentMetadata;\n import org.apache.pinot.common.segment.StarTreeMetadata;\n-import org.apache.pinot.spi.utils.JsonUtils;\n-import org.apache.pinot.spi.utils.TimeUtils;\n import org.apache.pinot.core.indexsegment.generator.SegmentVersion;\n import org.apache.pinot.core.segment.creator.impl.V1Constants;\n import org.apache.pinot.core.segment.creator.impl.V1Constants.MetadataKeys;\n import org.apache.pinot.core.segment.store.SegmentDirectoryPaths;\n import org.apache.pinot.core.startree.v2.StarTreeV2Constants;\n import org.apache.pinot.core.startree.v2.StarTreeV2Metadata;\n+import org.apache.pinot.spi.data.MetricFieldSpec;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzU1NzY4OA=="}, "originalCommit": {"oid": "9947e3d25d7863b7e6e4afc6e5d3a44fd8a4550e"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3NjEzNDQ3OnYy", "diffSide": "RIGHT", "path": "pinot-core/src/main/java/org/apache/pinot/core/indexsegment/mutable/MutableSegmentImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xOVQyMTozMDowMlrOFfQu9A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xOVQyMTozMDowMlrOFfQu9A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODMyNDM0MA==", "bodyText": "Should be info log", "url": "https://github.com/apache/pinot/pull/4954#discussion_r368324340", "createdAt": "2020-01-19T21:30:02Z", "author": {"login": "mcvsubbu"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/indexsegment/mutable/MutableSegmentImpl.java", "diffHunk": "@@ -252,6 +258,16 @@ public long getMaxTime() {\n     return _maxTime;\n   }\n \n+  public void addExtraColumns(Schema newSchema,\n+      Map<String, BaseDefaultColumnHandler.DefaultColumnAction> defaultColumnActionMap) {\n+    defaultColumnActionMap.forEach(((columnName, defaultColumnAction) -> {\n+      if (defaultColumnAction.isAddAction() && !newSchema.getFieldSpecFor(columnName).isVirtualColumn()) {\n+        _newlyAddedColumnsFieldMap.put(columnName, newSchema.getFieldSpecFor(columnName));\n+      }\n+    }));\n+    _logger.debug(\"Newly added columns: \" + _newlyAddedColumnsFieldMap.toString());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "996893163cfabf2923a5cd48431f32ba36479866"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3NjE0MjM0OnYy", "diffSide": "RIGHT", "path": "pinot-core/src/main/java/org/apache/pinot/core/indexsegment/mutable/MutableSegmentImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xOVQyMTo0NjoxNVrOFfQzEg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQyMTo0NTo1NlrOFgsFUQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODMyNTM5NA==", "bodyText": "I think we should remove the DefaultColumnAction here. We know that there is only one thing we can do -- add columns with a default value. The only argument needed here is newSchema", "url": "https://github.com/apache/pinot/pull/4954#discussion_r368325394", "createdAt": "2020-01-19T21:46:15Z", "author": {"login": "mcvsubbu"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/indexsegment/mutable/MutableSegmentImpl.java", "diffHunk": "@@ -252,6 +258,16 @@ public long getMaxTime() {\n     return _maxTime;\n   }\n \n+  public void addExtraColumns(Schema newSchema,\n+      Map<String, BaseDefaultColumnHandler.DefaultColumnAction> defaultColumnActionMap) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "996893163cfabf2923a5cd48431f32ba36479866"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTgyMTAwOQ==", "bodyText": "Done", "url": "https://github.com/apache/pinot/pull/4954#discussion_r369821009", "createdAt": "2020-01-22T21:45:56Z", "author": {"login": "haibow"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/indexsegment/mutable/MutableSegmentImpl.java", "diffHunk": "@@ -252,6 +258,16 @@ public long getMaxTime() {\n     return _maxTime;\n   }\n \n+  public void addExtraColumns(Schema newSchema,\n+      Map<String, BaseDefaultColumnHandler.DefaultColumnAction> defaultColumnActionMap) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODMyNTM5NA=="}, "originalCommit": {"oid": "996893163cfabf2923a5cd48431f32ba36479866"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3NjE0OTM3OnYy", "diffSide": "RIGHT", "path": "pinot-core/src/main/java/org/apache/pinot/core/indexsegment/mutable/MutableSegmentImpl.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xOVQyMjowMToxNVrOFfQ2yg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QwODo0ODo0M1rOFg2eSg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODMyNjM0Ng==", "bodyText": "We should have a different column provider here that should be optimized better than the virtual column provider. The new column provider should not be built every time, but should stay in memory once built. What  may be updated is the number of rows. That will minimize additional allocation during query processing.\nAdd a new column provider factory (say, ConstantValueColumnProviderFactory) that has a map from the col name to the provider. The map is built lazily as columns are added to the query.", "url": "https://github.com/apache/pinot/pull/4954#discussion_r368326346", "createdAt": "2020-01-19T22:01:15Z", "author": {"login": "mcvsubbu"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/indexsegment/mutable/MutableSegmentImpl.java", "diffHunk": "@@ -467,13 +483,22 @@ public SegmentMetadata getSegmentMetadata() {\n     return physicalColumnNames;\n   }\n \n+  @Override\n+  public Set<String> getColumnNamesForSelectStar() {\n+    return Sets.union(getPhysicalColumnNames(), _newlyAddedColumnsFieldMap.keySet());\n+  }\n+\n   @Override\n   public ColumnDataSource getDataSource(String columnName) {\n     FieldSpec fieldSpec = _schema.getFieldSpecFor(columnName);\n-    if (fieldSpec.isVirtualColumn()) {\n+    if ((fieldSpec == null && _newlyAddedColumnsFieldMap.containsKey(columnName)) || fieldSpec.isVirtualColumn()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "996893163cfabf2923a5cd48431f32ba36479866"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODMyNjQ2OQ==", "bodyText": "In that case, this logic is best handled like:\nif (fieldSpec != null) {\n  if (fieldSpec.isVirtualColumn()) {\n    // process virtual column from schema\n  } else {\n    // process real column from schema\n  }\n} else {\n  // process newly added column using the new provider factory\n}", "url": "https://github.com/apache/pinot/pull/4954#discussion_r368326469", "createdAt": "2020-01-19T22:03:11Z", "author": {"login": "mcvsubbu"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/indexsegment/mutable/MutableSegmentImpl.java", "diffHunk": "@@ -467,13 +483,22 @@ public SegmentMetadata getSegmentMetadata() {\n     return physicalColumnNames;\n   }\n \n+  @Override\n+  public Set<String> getColumnNamesForSelectStar() {\n+    return Sets.union(getPhysicalColumnNames(), _newlyAddedColumnsFieldMap.keySet());\n+  }\n+\n   @Override\n   public ColumnDataSource getDataSource(String columnName) {\n     FieldSpec fieldSpec = _schema.getFieldSpecFor(columnName);\n-    if (fieldSpec.isVirtualColumn()) {\n+    if ((fieldSpec == null && _newlyAddedColumnsFieldMap.containsKey(columnName)) || fieldSpec.isVirtualColumn()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODMyNjM0Ng=="}, "originalCommit": {"oid": "996893163cfabf2923a5cd48431f32ba36479866"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTk5MTI0Mg==", "bodyText": "I don't see a strong reason to create another column provider factory just for this. I have updated the MutableSegmentImpl to cache the provider, and only initialize the provider or update row count when needed. This optimization will help other virtual columns ($segmentName and $hostName) too.", "url": "https://github.com/apache/pinot/pull/4954#discussion_r369991242", "createdAt": "2020-01-23T08:48:43Z", "author": {"login": "haibow"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/indexsegment/mutable/MutableSegmentImpl.java", "diffHunk": "@@ -467,13 +483,22 @@ public SegmentMetadata getSegmentMetadata() {\n     return physicalColumnNames;\n   }\n \n+  @Override\n+  public Set<String> getColumnNamesForSelectStar() {\n+    return Sets.union(getPhysicalColumnNames(), _newlyAddedColumnsFieldMap.keySet());\n+  }\n+\n   @Override\n   public ColumnDataSource getDataSource(String columnName) {\n     FieldSpec fieldSpec = _schema.getFieldSpecFor(columnName);\n-    if (fieldSpec.isVirtualColumn()) {\n+    if ((fieldSpec == null && _newlyAddedColumnsFieldMap.containsKey(columnName)) || fieldSpec.isVirtualColumn()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODMyNjM0Ng=="}, "originalCommit": {"oid": "996893163cfabf2923a5cd48431f32ba36479866"}, "originalPosition": 73}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzODQ4NDYzOnYy", "diffSide": "RIGHT", "path": "pinot-core/src/main/java/org/apache/pinot/core/indexsegment/mutable/MutableSegmentImpl.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQwMDo1Njo0OVrOFoeiTg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQwMDo1Njo0OVrOFoeiTg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzk4NzY2Mg==", "bodyText": "Not sure why DefaultColumnAction is needed here. We can just iterate through the schema and add a newly added column's FieldSpec if it is not there already. The FieldSpec can have the null value. There is no question of handling incompatible schema evolution at that point.", "url": "https://github.com/apache/pinot/pull/4954#discussion_r377987662", "createdAt": "2020-02-12T00:56:49Z", "author": {"login": "mcvsubbu"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/indexsegment/mutable/MutableSegmentImpl.java", "diffHunk": "@@ -299,6 +311,23 @@ public long getMaxTime() {\n     return _maxTime;\n   }\n \n+  public void addExtraColumns(Schema newSchema) {\n+    Map<String, BaseDefaultColumnHandler.DefaultColumnAction> defaultColumnActionMap =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0654400296c49a179840ed2cc935e646d447d466"}, "originalPosition": 92}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzODQ4NjIwOnYy", "diffSide": "RIGHT", "path": "pinot-core/src/main/java/org/apache/pinot/core/indexsegment/mutable/MutableSegmentImpl.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQwMDo1Nzo1MFrOFoejTQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQwMDo1Nzo1MFrOFoejTQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzk4NzkxNw==", "bodyText": "We need to do this only if the newly added column is a virtual column, right?", "url": "https://github.com/apache/pinot/pull/4954#discussion_r377987917", "createdAt": "2020-02-12T00:57:50Z", "author": {"login": "mcvsubbu"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/indexsegment/mutable/MutableSegmentImpl.java", "diffHunk": "@@ -521,15 +550,38 @@ public SegmentMetadata getSegmentMetadata() {\n     return physicalColumnNames;\n   }\n \n+  @Override\n+  public Set<String> getColumnNamesForSelectStar() {\n+    return Sets.union(getPhysicalColumnNames(), _newlyAddedColumnsFieldMap.keySet());\n+  }\n+\n   @Override\n   public ColumnDataSource getDataSource(String columnName) {\n     FieldSpec fieldSpec = _schema.getFieldSpecFor(columnName);\n-    if (fieldSpec.isVirtualColumn()) {\n+    if (fieldSpec == null || fieldSpec.isVirtualColumn()) {\n+      // Column is either added during ingestion, or was initiated with a virtual column provider\n+      if (fieldSpec == null) {\n+        // If the column was added during ingestion, we will construct the virtual column provider based on its fieldSpec\n+        fieldSpec = _newlyAddedColumnsFieldMap.get(columnName);\n+        Preconditions.checkNotNull(fieldSpec, \"FieldSpec for \" + columnName + \" should not be null\");\n+      }\n       VirtualColumnContext virtualColumnContext = new VirtualColumnContext(fieldSpec, _numDocsIndexed);\n-      VirtualColumnProvider virtualColumnProvider =\n-          VirtualColumnProviderFactory.buildProvider(_schema.getFieldSpecFor(columnName).getVirtualColumnProvider());\n-      return new ColumnDataSource(virtualColumnProvider.buildColumnIndexContainer(virtualColumnContext),\n-          virtualColumnProvider.buildMetadata(virtualColumnContext));\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0654400296c49a179840ed2cc935e646d447d466"}, "originalPosition": 145}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4MzI2NDUwOnYy", "diffSide": "RIGHT", "path": "pinot-core/src/main/java/org/apache/pinot/core/indexsegment/mutable/MutableSegmentImpl.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQyMzo1NToxMlrOFvAqnA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQwODowMTo1MVrOFvsXTw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDgzODMwMA==", "bodyText": "please update the comment, not always construct virtual column provider, but dependng on the new column type -- whether virtual or physical column", "url": "https://github.com/apache/pinot/pull/4954#discussion_r384838300", "createdAt": "2020-02-26T23:55:12Z", "author": {"login": "mcvsubbu"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/indexsegment/mutable/MutableSegmentImpl.java", "diffHunk": "@@ -555,12 +575,27 @@ public SegmentMetadata getSegmentMetadata() {\n   @Override\n   public ColumnDataSource getDataSource(String columnName) {\n     FieldSpec fieldSpec = _schema.getFieldSpecFor(columnName);\n-    if (fieldSpec.isVirtualColumn()) {\n-      VirtualColumnContext virtualColumnContext = new VirtualColumnContext(fieldSpec, _numDocsIndexed);\n-      VirtualColumnProvider virtualColumnProvider =\n-          VirtualColumnProviderFactory.buildProvider(_schema.getFieldSpecFor(columnName).getVirtualColumnProvider());\n-      return new ColumnDataSource(virtualColumnProvider.buildColumnIndexContainer(virtualColumnContext),\n-          virtualColumnProvider.buildMetadata(virtualColumnContext));\n+    if (fieldSpec == null || fieldSpec.isVirtualColumn()) {\n+      // Column is either added during ingestion, or was initiated with a virtual column provider\n+      if (fieldSpec == null) {\n+        // If the column was added during ingestion, we will construct the virtual column provider based on its fieldSpec", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e234e90c8da53d0daecf1f807f95d580bf3ee99c"}, "originalPosition": 123}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTU1NDI1NQ==", "bodyText": "updated", "url": "https://github.com/apache/pinot/pull/4954#discussion_r385554255", "createdAt": "2020-02-28T08:01:51Z", "author": {"login": "haibow"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/indexsegment/mutable/MutableSegmentImpl.java", "diffHunk": "@@ -555,12 +575,27 @@ public SegmentMetadata getSegmentMetadata() {\n   @Override\n   public ColumnDataSource getDataSource(String columnName) {\n     FieldSpec fieldSpec = _schema.getFieldSpecFor(columnName);\n-    if (fieldSpec.isVirtualColumn()) {\n-      VirtualColumnContext virtualColumnContext = new VirtualColumnContext(fieldSpec, _numDocsIndexed);\n-      VirtualColumnProvider virtualColumnProvider =\n-          VirtualColumnProviderFactory.buildProvider(_schema.getFieldSpecFor(columnName).getVirtualColumnProvider());\n-      return new ColumnDataSource(virtualColumnProvider.buildColumnIndexContainer(virtualColumnContext),\n-          virtualColumnProvider.buildMetadata(virtualColumnContext));\n+    if (fieldSpec == null || fieldSpec.isVirtualColumn()) {\n+      // Column is either added during ingestion, or was initiated with a virtual column provider\n+      if (fieldSpec == null) {\n+        // If the column was added during ingestion, we will construct the virtual column provider based on its fieldSpec", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDgzODMwMA=="}, "originalCommit": {"oid": "e234e90c8da53d0daecf1f807f95d580bf3ee99c"}, "originalPosition": 123}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4MzM5MjUyOnYy", "diffSide": "RIGHT", "path": "pinot-core/src/main/java/org/apache/pinot/core/segment/virtualcolumn/ColumnProviderFactory.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QwMDo1OToxMlrOFvB2wA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQwODowMjowN1rOFvsXog==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDg1Nzc5Mg==", "bodyText": "Should we be using PluginClassLoader here?", "url": "https://github.com/apache/pinot/pull/4954#discussion_r384857792", "createdAt": "2020-02-27T00:59:12Z", "author": {"login": "mcvsubbu"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/segment/virtualcolumn/ColumnProviderFactory.java", "diffHunk": "@@ -20,18 +20,29 @@\n \n import org.apache.pinot.common.utils.CommonConstants.Segment.BuiltInVirtualColumn;\n import org.apache.pinot.common.utils.NetUtil;\n+import org.apache.pinot.core.segment.index.column.ColumnContext;\n+import org.apache.pinot.core.segment.index.column.ColumnProvider;\n+import org.apache.pinot.core.segment.index.column.DefaultNullValueColumnProvider;\n import org.apache.pinot.spi.data.DimensionFieldSpec;\n import org.apache.pinot.spi.data.FieldSpec;\n import org.apache.pinot.spi.data.Schema;\n \n \n /**\n- * Factory for virtual column providers.\n+ * Factory for column providers.\n  */\n-public class VirtualColumnProviderFactory {\n-  public static VirtualColumnProvider buildProvider(String virtualColumnProvider) {\n+public class ColumnProviderFactory {\n+  public static ColumnProvider buildProvider(ColumnContext columnContext) {\n+    String virtualColumnProvider = columnContext.getFieldSpec().getVirtualColumnProvider();\n     try {\n-      return (VirtualColumnProvider) Class.forName(virtualColumnProvider).newInstance();\n+      // Use the preset virtualColumnProvider if available\n+      if (virtualColumnProvider != null && !virtualColumnProvider\n+          .equals(DefaultNullValueColumnProvider.class.getName())) {\n+        return (ColumnProvider) Class.forName(virtualColumnProvider).newInstance();\n+      }\n+      // Create the columnProvider that returns default null values based on the columnContext\n+      return DefaultNullValueColumnProvider.class.getDeclaredConstructor(ColumnContext.class)\n+          .newInstance(columnContext);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e234e90c8da53d0daecf1f807f95d580bf3ee99c"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTU1NDMzOA==", "bodyText": "Didn't know this. updated", "url": "https://github.com/apache/pinot/pull/4954#discussion_r385554338", "createdAt": "2020-02-28T08:02:07Z", "author": {"login": "haibow"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/segment/virtualcolumn/ColumnProviderFactory.java", "diffHunk": "@@ -20,18 +20,29 @@\n \n import org.apache.pinot.common.utils.CommonConstants.Segment.BuiltInVirtualColumn;\n import org.apache.pinot.common.utils.NetUtil;\n+import org.apache.pinot.core.segment.index.column.ColumnContext;\n+import org.apache.pinot.core.segment.index.column.ColumnProvider;\n+import org.apache.pinot.core.segment.index.column.DefaultNullValueColumnProvider;\n import org.apache.pinot.spi.data.DimensionFieldSpec;\n import org.apache.pinot.spi.data.FieldSpec;\n import org.apache.pinot.spi.data.Schema;\n \n \n /**\n- * Factory for virtual column providers.\n+ * Factory for column providers.\n  */\n-public class VirtualColumnProviderFactory {\n-  public static VirtualColumnProvider buildProvider(String virtualColumnProvider) {\n+public class ColumnProviderFactory {\n+  public static ColumnProvider buildProvider(ColumnContext columnContext) {\n+    String virtualColumnProvider = columnContext.getFieldSpec().getVirtualColumnProvider();\n     try {\n-      return (VirtualColumnProvider) Class.forName(virtualColumnProvider).newInstance();\n+      // Use the preset virtualColumnProvider if available\n+      if (virtualColumnProvider != null && !virtualColumnProvider\n+          .equals(DefaultNullValueColumnProvider.class.getName())) {\n+        return (ColumnProvider) Class.forName(virtualColumnProvider).newInstance();\n+      }\n+      // Create the columnProvider that returns default null values based on the columnContext\n+      return DefaultNullValueColumnProvider.class.getDeclaredConstructor(ColumnContext.class)\n+          .newInstance(columnContext);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDg1Nzc5Mg=="}, "originalCommit": {"oid": "e234e90c8da53d0daecf1f807f95d580bf3ee99c"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4MzM5OTQxOnYy", "diffSide": "RIGHT", "path": "pinot-core/src/main/java/org/apache/pinot/core/indexsegment/mutable/MutableSegmentImpl.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QwMTowMzoxNVrOFvB7Rw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQwMToyNzowNlrOFxdBHg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDg1ODk1MQ==", "bodyText": "Can we do theese things inside the Column ProviderFFactory so that we dont need to cast here?", "url": "https://github.com/apache/pinot/pull/4954#discussion_r384858951", "createdAt": "2020-02-27T01:03:15Z", "author": {"login": "mcvsubbu"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/indexsegment/mutable/MutableSegmentImpl.java", "diffHunk": "@@ -555,12 +575,27 @@ public SegmentMetadata getSegmentMetadata() {\n   @Override\n   public ColumnDataSource getDataSource(String columnName) {\n     FieldSpec fieldSpec = _schema.getFieldSpecFor(columnName);\n-    if (fieldSpec.isVirtualColumn()) {\n-      VirtualColumnContext virtualColumnContext = new VirtualColumnContext(fieldSpec, _numDocsIndexed);\n-      VirtualColumnProvider virtualColumnProvider =\n-          VirtualColumnProviderFactory.buildProvider(_schema.getFieldSpecFor(columnName).getVirtualColumnProvider());\n-      return new ColumnDataSource(virtualColumnProvider.buildColumnIndexContainer(virtualColumnContext),\n-          virtualColumnProvider.buildMetadata(virtualColumnContext));\n+    if (fieldSpec == null || fieldSpec.isVirtualColumn()) {\n+      // Column is either added during ingestion, or was initiated with a virtual column provider\n+      if (fieldSpec == null) {\n+        // If the column was added during ingestion, we will construct the virtual column provider based on its fieldSpec\n+        fieldSpec = _newlyAddedColumnsFieldMap.get(columnName);\n+        Preconditions.checkNotNull(fieldSpec, \"FieldSpec for \" + columnName + \" should not be null\");\n+      }\n+      ColumnContext columnContext = new ColumnContext(fieldSpec, _numDocsIndexed);\n+      ColumnProvider columnProvider = _newlyAddedColumnsProviderMap.getOrDefault(columnName, ColumnProviderFactory.buildProvider(columnContext));\n+      if (columnProvider instanceof DefaultNullValueColumnProvider) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e234e90c8da53d0daecf1f807f95d580bf3ee99c"}, "originalPosition": 129}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTU1NDc2MQ==", "bodyText": "updated a bit. kept one casting for updateInvertedIndex, since now we would like to cache the provider", "url": "https://github.com/apache/pinot/pull/4954#discussion_r385554761", "createdAt": "2020-02-28T08:03:20Z", "author": {"login": "haibow"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/indexsegment/mutable/MutableSegmentImpl.java", "diffHunk": "@@ -555,12 +575,27 @@ public SegmentMetadata getSegmentMetadata() {\n   @Override\n   public ColumnDataSource getDataSource(String columnName) {\n     FieldSpec fieldSpec = _schema.getFieldSpecFor(columnName);\n-    if (fieldSpec.isVirtualColumn()) {\n-      VirtualColumnContext virtualColumnContext = new VirtualColumnContext(fieldSpec, _numDocsIndexed);\n-      VirtualColumnProvider virtualColumnProvider =\n-          VirtualColumnProviderFactory.buildProvider(_schema.getFieldSpecFor(columnName).getVirtualColumnProvider());\n-      return new ColumnDataSource(virtualColumnProvider.buildColumnIndexContainer(virtualColumnContext),\n-          virtualColumnProvider.buildMetadata(virtualColumnContext));\n+    if (fieldSpec == null || fieldSpec.isVirtualColumn()) {\n+      // Column is either added during ingestion, or was initiated with a virtual column provider\n+      if (fieldSpec == null) {\n+        // If the column was added during ingestion, we will construct the virtual column provider based on its fieldSpec\n+        fieldSpec = _newlyAddedColumnsFieldMap.get(columnName);\n+        Preconditions.checkNotNull(fieldSpec, \"FieldSpec for \" + columnName + \" should not be null\");\n+      }\n+      ColumnContext columnContext = new ColumnContext(fieldSpec, _numDocsIndexed);\n+      ColumnProvider columnProvider = _newlyAddedColumnsProviderMap.getOrDefault(columnName, ColumnProviderFactory.buildProvider(columnContext));\n+      if (columnProvider instanceof DefaultNullValueColumnProvider) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDg1ODk1MQ=="}, "originalCommit": {"oid": "e234e90c8da53d0daecf1f807f95d580bf3ee99c"}, "originalPosition": 129}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzM5OTk2Ng==", "bodyText": "Why cache it? We construct it afresh for each query in the offline case, this should not be worse than that, right?", "url": "https://github.com/apache/pinot/pull/4954#discussion_r387399966", "createdAt": "2020-03-04T01:27:06Z", "author": {"login": "mcvsubbu"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/indexsegment/mutable/MutableSegmentImpl.java", "diffHunk": "@@ -555,12 +575,27 @@ public SegmentMetadata getSegmentMetadata() {\n   @Override\n   public ColumnDataSource getDataSource(String columnName) {\n     FieldSpec fieldSpec = _schema.getFieldSpecFor(columnName);\n-    if (fieldSpec.isVirtualColumn()) {\n-      VirtualColumnContext virtualColumnContext = new VirtualColumnContext(fieldSpec, _numDocsIndexed);\n-      VirtualColumnProvider virtualColumnProvider =\n-          VirtualColumnProviderFactory.buildProvider(_schema.getFieldSpecFor(columnName).getVirtualColumnProvider());\n-      return new ColumnDataSource(virtualColumnProvider.buildColumnIndexContainer(virtualColumnContext),\n-          virtualColumnProvider.buildMetadata(virtualColumnContext));\n+    if (fieldSpec == null || fieldSpec.isVirtualColumn()) {\n+      // Column is either added during ingestion, or was initiated with a virtual column provider\n+      if (fieldSpec == null) {\n+        // If the column was added during ingestion, we will construct the virtual column provider based on its fieldSpec\n+        fieldSpec = _newlyAddedColumnsFieldMap.get(columnName);\n+        Preconditions.checkNotNull(fieldSpec, \"FieldSpec for \" + columnName + \" should not be null\");\n+      }\n+      ColumnContext columnContext = new ColumnContext(fieldSpec, _numDocsIndexed);\n+      ColumnProvider columnProvider = _newlyAddedColumnsProviderMap.getOrDefault(columnName, ColumnProviderFactory.buildProvider(columnContext));\n+      if (columnProvider instanceof DefaultNullValueColumnProvider) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDg1ODk1MQ=="}, "originalCommit": {"oid": "e234e90c8da53d0daecf1f807f95d580bf3ee99c"}, "originalPosition": 129}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4MzQwNjA2OnYy", "diffSide": "RIGHT", "path": "pinot-core/src/main/java/org/apache/pinot/core/plan/TransformPlanNode.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QwMTowNzowOFrOFvB_YQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQwODowMzoyOVrOFvsZjQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDg2MDAwMQ==", "bodyText": "we can just get physical column names, right? Are we trying to say that virtual columns that do not start with dollar sign are ok?", "url": "https://github.com/apache/pinot/pull/4954#discussion_r384860001", "createdAt": "2020-02-27T01:07:08Z", "author": {"login": "mcvsubbu"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/plan/TransformPlanNode.java", "diffHunk": "@@ -83,7 +83,11 @@ private void extractColumnsAndTransforms(BrokerRequest brokerRequest, IndexSegme\n       // Extract selection expressions\n       List<String> selectionColumns = selection.getSelectionColumns();\n       if (selectionColumns.size() == 1 && selectionColumns.get(0).equals(\"*\")) {\n-        for (String column : indexSegment.getPhysicalColumnNames()) {\n+        for (String column : indexSegment.getColumnNames()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e234e90c8da53d0daecf1f807f95d580bf3ee99c"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTU1NDgyOQ==", "bodyText": "right. updated", "url": "https://github.com/apache/pinot/pull/4954#discussion_r385554829", "createdAt": "2020-02-28T08:03:29Z", "author": {"login": "haibow"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/plan/TransformPlanNode.java", "diffHunk": "@@ -83,7 +83,11 @@ private void extractColumnsAndTransforms(BrokerRequest brokerRequest, IndexSegme\n       // Extract selection expressions\n       List<String> selectionColumns = selection.getSelectionColumns();\n       if (selectionColumns.size() == 1 && selectionColumns.get(0).equals(\"*\")) {\n-        for (String column : indexSegment.getPhysicalColumnNames()) {\n+        for (String column : indexSegment.getColumnNames()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDg2MDAwMQ=="}, "originalCommit": {"oid": "e234e90c8da53d0daecf1f807f95d580bf3ee99c"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4MzQxMjAxOnYy", "diffSide": "RIGHT", "path": "pinot-core/src/main/java/org/apache/pinot/core/segment/index/column/DefaultNullValueColumnProvider.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QwMToxMDozOVrOFvCDcA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQwMTozMjozM1rOFxdHJQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDg2MTA0MA==", "bodyText": "Since column context already contains the number of rows, we can call update inverted index right here", "url": "https://github.com/apache/pinot/pull/4954#discussion_r384861040", "createdAt": "2020-02-27T01:10:39Z", "author": {"login": "mcvsubbu"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/segment/index/column/DefaultNullValueColumnProvider.java", "diffHunk": "@@ -0,0 +1,93 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.core.segment.index.column;\n+\n+import com.google.common.base.Preconditions;\n+import org.apache.pinot.core.io.reader.impl.ConstantMultiValueInvertedIndex;\n+import org.apache.pinot.core.io.reader.impl.ConstantSingleValueInvertedIndex;\n+import org.apache.pinot.core.segment.index.ColumnMetadata;\n+import org.apache.pinot.core.segment.index.readers.Dictionary;\n+import org.apache.pinot.core.segment.index.readers.SingleDoubleDictionary;\n+import org.apache.pinot.core.segment.index.readers.SingleFloatDictionary;\n+import org.apache.pinot.core.segment.index.readers.SingleIntDictionary;\n+import org.apache.pinot.core.segment.index.readers.SingleLongDictionary;\n+import org.apache.pinot.core.segment.index.readers.SingleStringDictionary;\n+import org.apache.pinot.spi.data.FieldSpec;\n+import org.apache.pinot.spi.data.FieldSpec.DataType;\n+\n+\n+/**\n+ * Provide the default null value.\n+ */\n+public class DefaultNullValueColumnProvider extends BaseColumnProvider {\n+\n+  Dictionary _dictionary;\n+  ColumnMetadata _columnMetadata;\n+\n+  public DefaultNullValueColumnProvider(ColumnContext columnContext) {\n+    buildDictionary(columnContext);\n+    buildMetadata(columnContext);\n+    buildColumnIndexContainer(columnContext);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e234e90c8da53d0daecf1f807f95d580bf3ee99c"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTU1NTY3MA==", "bodyText": "Not sure what you mean here. This is inside constructor, right? The current idea is to cache the provider when applicable and avoid rebuilding everything", "url": "https://github.com/apache/pinot/pull/4954#discussion_r385555670", "createdAt": "2020-02-28T08:05:57Z", "author": {"login": "haibow"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/segment/index/column/DefaultNullValueColumnProvider.java", "diffHunk": "@@ -0,0 +1,93 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.core.segment.index.column;\n+\n+import com.google.common.base.Preconditions;\n+import org.apache.pinot.core.io.reader.impl.ConstantMultiValueInvertedIndex;\n+import org.apache.pinot.core.io.reader.impl.ConstantSingleValueInvertedIndex;\n+import org.apache.pinot.core.segment.index.ColumnMetadata;\n+import org.apache.pinot.core.segment.index.readers.Dictionary;\n+import org.apache.pinot.core.segment.index.readers.SingleDoubleDictionary;\n+import org.apache.pinot.core.segment.index.readers.SingleFloatDictionary;\n+import org.apache.pinot.core.segment.index.readers.SingleIntDictionary;\n+import org.apache.pinot.core.segment.index.readers.SingleLongDictionary;\n+import org.apache.pinot.core.segment.index.readers.SingleStringDictionary;\n+import org.apache.pinot.spi.data.FieldSpec;\n+import org.apache.pinot.spi.data.FieldSpec.DataType;\n+\n+\n+/**\n+ * Provide the default null value.\n+ */\n+public class DefaultNullValueColumnProvider extends BaseColumnProvider {\n+\n+  Dictionary _dictionary;\n+  ColumnMetadata _columnMetadata;\n+\n+  public DefaultNullValueColumnProvider(ColumnContext columnContext) {\n+    buildDictionary(columnContext);\n+    buildMetadata(columnContext);\n+    buildColumnIndexContainer(columnContext);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDg2MTA0MA=="}, "originalCommit": {"oid": "e234e90c8da53d0daecf1f807f95d580bf3ee99c"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQwMTUwOQ==", "bodyText": "Hmm... ok, we rebuild this column provider everytime in the offline world, but yes. maybe caching can help (but, as you note, we need to update the inverted index, and later, any other auto-generated index if need be).", "url": "https://github.com/apache/pinot/pull/4954#discussion_r387401509", "createdAt": "2020-03-04T01:32:33Z", "author": {"login": "mcvsubbu"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/segment/index/column/DefaultNullValueColumnProvider.java", "diffHunk": "@@ -0,0 +1,93 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.core.segment.index.column;\n+\n+import com.google.common.base.Preconditions;\n+import org.apache.pinot.core.io.reader.impl.ConstantMultiValueInvertedIndex;\n+import org.apache.pinot.core.io.reader.impl.ConstantSingleValueInvertedIndex;\n+import org.apache.pinot.core.segment.index.ColumnMetadata;\n+import org.apache.pinot.core.segment.index.readers.Dictionary;\n+import org.apache.pinot.core.segment.index.readers.SingleDoubleDictionary;\n+import org.apache.pinot.core.segment.index.readers.SingleFloatDictionary;\n+import org.apache.pinot.core.segment.index.readers.SingleIntDictionary;\n+import org.apache.pinot.core.segment.index.readers.SingleLongDictionary;\n+import org.apache.pinot.core.segment.index.readers.SingleStringDictionary;\n+import org.apache.pinot.spi.data.FieldSpec;\n+import org.apache.pinot.spi.data.FieldSpec.DataType;\n+\n+\n+/**\n+ * Provide the default null value.\n+ */\n+public class DefaultNullValueColumnProvider extends BaseColumnProvider {\n+\n+  Dictionary _dictionary;\n+  ColumnMetadata _columnMetadata;\n+\n+  public DefaultNullValueColumnProvider(ColumnContext columnContext) {\n+    buildDictionary(columnContext);\n+    buildMetadata(columnContext);\n+    buildColumnIndexContainer(columnContext);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDg2MTA0MA=="}, "originalCommit": {"oid": "e234e90c8da53d0daecf1f807f95d580bf3ee99c"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4MzQxNzI0OnYy", "diffSide": "RIGHT", "path": "pinot-core/src/main/java/org/apache/pinot/core/segment/index/loader/defaultcolumn/BaseDefaultColumnHandler.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QwMToxMzozN1rOFvCGwQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQwODowNjo1MlrOFvseCQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDg2MTg4OQ==", "bodyText": "Not sure if we still need to modify this class. It should remain the same for the completed segments, right?", "url": "https://github.com/apache/pinot/pull/4954#discussion_r384861889", "createdAt": "2020-02-27T01:13:37Z", "author": {"login": "mcvsubbu"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/segment/index/loader/defaultcolumn/BaseDefaultColumnHandler.java", "diffHunk": "@@ -155,27 +155,37 @@ public void updateDefaultColumns()\n    *\n    * @return Action Map for each column.\n    */\n-  private Map<String, DefaultColumnAction> computeDefaultColumnActionMap() {\n+  public static Map<String, DefaultColumnAction> computeDefaultColumnActionMap(Schema schema,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e234e90c8da53d0daecf1f807f95d580bf3ee99c"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTU1NTk3Nw==", "bodyText": "Removed unused code for the consuming segment. I kept some changes for the unit tests that I added for the committed segment", "url": "https://github.com/apache/pinot/pull/4954#discussion_r385555977", "createdAt": "2020-02-28T08:06:52Z", "author": {"login": "haibow"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/segment/index/loader/defaultcolumn/BaseDefaultColumnHandler.java", "diffHunk": "@@ -155,27 +155,37 @@ public void updateDefaultColumns()\n    *\n    * @return Action Map for each column.\n    */\n-  private Map<String, DefaultColumnAction> computeDefaultColumnActionMap() {\n+  public static Map<String, DefaultColumnAction> computeDefaultColumnActionMap(Schema schema,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDg2MTg4OQ=="}, "originalCommit": {"oid": "e234e90c8da53d0daecf1f807f95d580bf3ee99c"}, "originalPosition": 65}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4MzQyMDY4OnYy", "diffSide": "RIGHT", "path": "pinot-core/src/main/java/org/apache/pinot/core/segment/index/readers/SingleDoubleDictionary.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QwMToxNTo1MlrOFvCJBw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQwODowNzowNFrOFvseOw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDg2MjQ3MQ==", "bodyText": "the name seems like oxymoron :), but I cannot think of a better name. @Jackie-Jiang ?\nConstantValueDoubleDictionary?", "url": "https://github.com/apache/pinot/pull/4954#discussion_r384862471", "createdAt": "2020-02-27T01:15:52Z", "author": {"login": "mcvsubbu"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/segment/index/readers/SingleDoubleDictionary.java", "diffHunk": "@@ -0,0 +1,68 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.core.segment.index.readers;\n+\n+/**\n+ * Dictionary for single-value double\n+ */\n+\n+public class SingleDoubleDictionary extends BaseImmutableDictionary {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e234e90c8da53d0daecf1f807f95d580bf3ee99c"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTU1NjAyNw==", "bodyText": "Renamed :)", "url": "https://github.com/apache/pinot/pull/4954#discussion_r385556027", "createdAt": "2020-02-28T08:07:04Z", "author": {"login": "haibow"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/segment/index/readers/SingleDoubleDictionary.java", "diffHunk": "@@ -0,0 +1,68 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.core.segment.index.readers;\n+\n+/**\n+ * Dictionary for single-value double\n+ */\n+\n+public class SingleDoubleDictionary extends BaseImmutableDictionary {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDg2MjQ3MQ=="}, "originalCommit": {"oid": "e234e90c8da53d0daecf1f807f95d580bf3ee99c"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4MzQyNjExOnYy", "diffSide": "RIGHT", "path": "pinot-server/src/main/java/org/apache/pinot/server/starter/helix/HelixInstanceDataManager.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QwMToxODo1M1rOFvCMOQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQwODowNzoxN1rOFvsekQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDg2MzI4OQ==", "bodyText": "Where are you releasing the segment?", "url": "https://github.com/apache/pinot/pull/4954#discussion_r384863289", "createdAt": "2020-02-27T01:18:53Z", "author": {"login": "mcvsubbu"}, "path": "pinot-server/src/main/java/org/apache/pinot/server/starter/helix/HelixInstanceDataManager.java", "diffHunk": "@@ -197,7 +201,15 @@ private void reloadSegment(String tableNameWithType, SegmentMetadata segmentMeta\n \n     File indexDir = segmentMetadata.getIndexDir();\n     if (indexDir == null) {\n-      LOGGER.info(\"Skip reloading REALTIME consuming segment: {} in table: {}\", segmentName, tableNameWithType);\n+      if (!_instanceDataManagerConfig.shouldReloadConsumingSegment()) {\n+        LOGGER.info(\"Skip reloading REALTIME consuming segment: {} in table: {}\", segmentName, tableNameWithType);\n+        return;\n+      }\n+      LOGGER.info(\"Try reloading REALTIME consuming segment: {} in table: {}\", segmentName, tableNameWithType);\n+      SegmentMetadataImpl segmentMetadataImpl = (SegmentMetadataImpl) segmentMetadata;\n+      MutableSegmentImpl mutableSegment = (MutableSegmentImpl) (_tableDataManagerMap.get(tableNameWithType)\n+          .acquireSegment(segmentMetadataImpl.getName()).getSegment());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e234e90c8da53d0daecf1f807f95d580bf3ee99c"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTU1NjExMw==", "bodyText": "Good catch. added the release logic.", "url": "https://github.com/apache/pinot/pull/4954#discussion_r385556113", "createdAt": "2020-02-28T08:07:17Z", "author": {"login": "haibow"}, "path": "pinot-server/src/main/java/org/apache/pinot/server/starter/helix/HelixInstanceDataManager.java", "diffHunk": "@@ -197,7 +201,15 @@ private void reloadSegment(String tableNameWithType, SegmentMetadata segmentMeta\n \n     File indexDir = segmentMetadata.getIndexDir();\n     if (indexDir == null) {\n-      LOGGER.info(\"Skip reloading REALTIME consuming segment: {} in table: {}\", segmentName, tableNameWithType);\n+      if (!_instanceDataManagerConfig.shouldReloadConsumingSegment()) {\n+        LOGGER.info(\"Skip reloading REALTIME consuming segment: {} in table: {}\", segmentName, tableNameWithType);\n+        return;\n+      }\n+      LOGGER.info(\"Try reloading REALTIME consuming segment: {} in table: {}\", segmentName, tableNameWithType);\n+      SegmentMetadataImpl segmentMetadataImpl = (SegmentMetadataImpl) segmentMetadata;\n+      MutableSegmentImpl mutableSegment = (MutableSegmentImpl) (_tableDataManagerMap.get(tableNameWithType)\n+          .acquireSegment(segmentMetadataImpl.getName()).getSegment());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDg2MzI4OQ=="}, "originalCommit": {"oid": "e234e90c8da53d0daecf1f807f95d580bf3ee99c"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5OTk3NzY3OnYy", "diffSide": "RIGHT", "path": "pinot-core/src/main/java/org/apache/pinot/core/indexsegment/mutable/MutableSegmentImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQwMToxODoyMFrOFxczYg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQwMToxODoyMFrOFxczYg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzM5NjQ1MA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              private volatile Map<String, FieldSpec> _newlyAddedColumnsFieldMap = new ConcurrentHashMap();\n          \n          \n            \n              private final Map<String, FieldSpec> _newlyAddedColumnsFieldMap = new ConcurrentHashMap();", "url": "https://github.com/apache/pinot/pull/4954#discussion_r387396450", "createdAt": "2020-03-04T01:18:20Z", "author": {"login": "mcvsubbu"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/indexsegment/mutable/MutableSegmentImpl.java", "diffHunk": "@@ -125,6 +128,9 @@\n   private volatile long _latestIngestionTimeMs = Long.MIN_VALUE;\n \n   private RealtimeLuceneReaders _realtimeLuceneReaders;\n+  // If the table schema is changed before the consuming segment is committed, newly added columns would appear in _newlyAddedColumnsFieldMap.\n+  private volatile Map<String, FieldSpec> _newlyAddedColumnsFieldMap = new ConcurrentHashMap();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0fb657b15fd0d0b6f791ba2ea11bf2c708659506"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5OTk3ODYyOnYy", "diffSide": "RIGHT", "path": "pinot-core/src/main/java/org/apache/pinot/core/indexsegment/mutable/MutableSegmentImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQwMToxODozM1rOFxcz7w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQwMToxODo0N1rOFxc0iA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzM5NjU5MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              private volatile Map<String, ColumnProvider> _newlyAddedColumnsProviderMap = new ConcurrentHashMap<>();\n          \n          \n            \n              private final Map<String, ColumnProvider> _newlyAddedColumnsProviderMap = new ConcurrentHashMap<>();", "url": "https://github.com/apache/pinot/pull/4954#discussion_r387396591", "createdAt": "2020-03-04T01:18:33Z", "author": {"login": "mcvsubbu"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/indexsegment/mutable/MutableSegmentImpl.java", "diffHunk": "@@ -125,6 +128,9 @@\n   private volatile long _latestIngestionTimeMs = Long.MIN_VALUE;\n \n   private RealtimeLuceneReaders _realtimeLuceneReaders;\n+  // If the table schema is changed before the consuming segment is committed, newly added columns would appear in _newlyAddedColumnsFieldMap.\n+  private volatile Map<String, FieldSpec> _newlyAddedColumnsFieldMap = new ConcurrentHashMap();\n+  private volatile Map<String, ColumnProvider> _newlyAddedColumnsProviderMap = new ConcurrentHashMap<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0fb657b15fd0d0b6f791ba2ea11bf2c708659506"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzM5Njc0NA==", "bodyText": "You don't need volatile. You never set these values again in the class.", "url": "https://github.com/apache/pinot/pull/4954#discussion_r387396744", "createdAt": "2020-03-04T01:18:47Z", "author": {"login": "mcvsubbu"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/indexsegment/mutable/MutableSegmentImpl.java", "diffHunk": "@@ -125,6 +128,9 @@\n   private volatile long _latestIngestionTimeMs = Long.MIN_VALUE;\n \n   private RealtimeLuceneReaders _realtimeLuceneReaders;\n+  // If the table schema is changed before the consuming segment is committed, newly added columns would appear in _newlyAddedColumnsFieldMap.\n+  private volatile Map<String, FieldSpec> _newlyAddedColumnsFieldMap = new ConcurrentHashMap();\n+  private volatile Map<String, ColumnProvider> _newlyAddedColumnsProviderMap = new ConcurrentHashMap<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzM5NjU5MQ=="}, "originalCommit": {"oid": "0fb657b15fd0d0b6f791ba2ea11bf2c708659506"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5OTk5MTI4OnYy", "diffSide": "RIGHT", "path": "pinot-core/src/main/java/org/apache/pinot/core/indexsegment/mutable/MutableSegmentImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQwMToyMTo0NVrOFxc7cw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQwNToyODo1MlrOFyG0rQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzM5ODUxNQ==", "bodyText": "What if newly introduced column is a virtual column?", "url": "https://github.com/apache/pinot/pull/4954#discussion_r387398515", "createdAt": "2020-03-04T01:21:45Z", "author": {"login": "mcvsubbu"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/indexsegment/mutable/MutableSegmentImpl.java", "diffHunk": "@@ -546,19 +561,32 @@ public SegmentMetadata getSegmentMetadata() {\n     for (FieldSpec fieldSpec : _physicalFieldSpecs) {\n       physicalColumnNames.add(fieldSpec.getName());\n     }\n-\n-    return physicalColumnNames;\n+    // We should include newly added columns in the physical columns", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0fb657b15fd0d0b6f791ba2ea11bf2c708659506"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODA4NDkwOQ==", "bodyText": "Good question. Updated the logic to handle virtual column", "url": "https://github.com/apache/pinot/pull/4954#discussion_r388084909", "createdAt": "2020-03-05T05:28:52Z", "author": {"login": "haibow"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/indexsegment/mutable/MutableSegmentImpl.java", "diffHunk": "@@ -546,19 +561,32 @@ public SegmentMetadata getSegmentMetadata() {\n     for (FieldSpec fieldSpec : _physicalFieldSpecs) {\n       physicalColumnNames.add(fieldSpec.getName());\n     }\n-\n-    return physicalColumnNames;\n+    // We should include newly added columns in the physical columns", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzM5ODUxNQ=="}, "originalCommit": {"oid": "0fb657b15fd0d0b6f791ba2ea11bf2c708659506"}, "originalPosition": 75}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwMDAwNjUyOnYy", "diffSide": "RIGHT", "path": "pinot-core/src/main/java/org/apache/pinot/core/segment/index/ColumnMetadata.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQwMTozMDoyN1rOFxdErA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQwNTowMjo0OVrOFyGfdQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQwMDg3Ng==", "bodyText": "Are these new imports needed?", "url": "https://github.com/apache/pinot/pull/4954#discussion_r387400876", "createdAt": "2020-03-04T01:30:27Z", "author": {"login": "mcvsubbu"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/segment/index/ColumnMetadata.java", "diffHunk": "@@ -39,7 +39,27 @@\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n-import static org.apache.pinot.core.segment.creator.impl.V1Constants.MetadataKeys.Column.*;\n+import static org.apache.pinot.core.segment.creator.impl.V1Constants.MetadataKeys.Column.BITS_PER_ELEMENT;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0fb657b15fd0d0b6f791ba2ea11bf2c708659506"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODA3OTQ3Nw==", "bodyText": "Yes they were all used before. Formatting removed the wildcard import", "url": "https://github.com/apache/pinot/pull/4954#discussion_r388079477", "createdAt": "2020-03-05T05:02:49Z", "author": {"login": "haibow"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/segment/index/ColumnMetadata.java", "diffHunk": "@@ -39,7 +39,27 @@\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n-import static org.apache.pinot.core.segment.creator.impl.V1Constants.MetadataKeys.Column.*;\n+import static org.apache.pinot.core.segment.creator.impl.V1Constants.MetadataKeys.Column.BITS_PER_ELEMENT;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQwMDg3Ng=="}, "originalCommit": {"oid": "0fb657b15fd0d0b6f791ba2ea11bf2c708659506"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNzUwNDc2OnYy", "diffSide": "RIGHT", "path": "pinot-core/src/main/java/org/apache/pinot/core/segment/index/ColumnMetadata.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQyMTo0NDo1OFrOFylSWw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQwMDozMDo0N1rOFyo8-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODU4NDAyNw==", "bodyText": "you need deeper equals definition, make sure that the inverted index obects are equal. etc.", "url": "https://github.com/apache/pinot/pull/4954#discussion_r388584027", "createdAt": "2020-03-05T21:44:58Z", "author": {"login": "mcvsubbu"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/segment/index/ColumnMetadata.java", "diffHunk": "@@ -540,4 +560,31 @@ public String toString() {\n \n     return result.toString();\n   }\n+\n+  @Override\n+  public boolean equals(Object object) {\n+    if (this == object) {\n+      return true;\n+    }\n+    if (object instanceof ColumnMetadata) {\n+      ColumnMetadata columnMetadata = (ColumnMetadata) object;\n+      return getColumnName() == columnMetadata.getColumnName() && getCardinality() == columnMetadata.getCardinality()\n+          && getTotalDocs() == columnMetadata.getTotalDocs() && getDataType().equals(columnMetadata.getDataType())\n+          && getBitsPerElement() == columnMetadata.getBitsPerElement() && getFieldSpec()\n+          .equals(columnMetadata.getFieldSpec()) && isSorted() == columnMetadata.isSorted()\n+          && hasNulls() == columnMetadata.hasNulls() && hasDictionary() == columnMetadata.hasDictionary()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c122eecb53150e9d6fe1d3f528fba28c01849de1"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODY0NDA4OA==", "bodyText": "This is metadata, with only boolean of hasInvertedIndex or not. No actual inverted index obj in this class.", "url": "https://github.com/apache/pinot/pull/4954#discussion_r388644088", "createdAt": "2020-03-06T00:30:47Z", "author": {"login": "haibow"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/segment/index/ColumnMetadata.java", "diffHunk": "@@ -540,4 +560,31 @@ public String toString() {\n \n     return result.toString();\n   }\n+\n+  @Override\n+  public boolean equals(Object object) {\n+    if (this == object) {\n+      return true;\n+    }\n+    if (object instanceof ColumnMetadata) {\n+      ColumnMetadata columnMetadata = (ColumnMetadata) object;\n+      return getColumnName() == columnMetadata.getColumnName() && getCardinality() == columnMetadata.getCardinality()\n+          && getTotalDocs() == columnMetadata.getTotalDocs() && getDataType().equals(columnMetadata.getDataType())\n+          && getBitsPerElement() == columnMetadata.getBitsPerElement() && getFieldSpec()\n+          .equals(columnMetadata.getFieldSpec()) && isSorted() == columnMetadata.isSorted()\n+          && hasNulls() == columnMetadata.hasNulls() && hasDictionary() == columnMetadata.hasDictionary()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODU4NDAyNw=="}, "originalCommit": {"oid": "c122eecb53150e9d6fe1d3f528fba28c01849de1"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxNjE2MzE0OnYy", "diffSide": "RIGHT", "path": "pinot-core/src/main/java/org/apache/pinot/core/data/manager/realtime/RealtimeTableDataManager.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxODo1NTozOVrOFz1Ugw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxOToxNToyOFrOFz18cQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTg5NTI5OQ==", "bodyText": "Can we revert this class name change? Seems it is not used in this pr?", "url": "https://github.com/apache/pinot/pull/4954#discussion_r389895299", "createdAt": "2020-03-09T18:55:39Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/data/manager/realtime/RealtimeTableDataManager.java", "diffHunk": "@@ -51,7 +51,7 @@\n import org.apache.pinot.core.realtime.impl.RealtimeSegmentStatsHistory;\n import org.apache.pinot.core.segment.index.loader.IndexLoadingConfig;\n import org.apache.pinot.core.segment.index.loader.LoaderUtils;\n-import org.apache.pinot.core.segment.virtualcolumn.VirtualColumnProviderFactory;\n+import org.apache.pinot.core.segment.virtualcolumn.ColumnProviderFactory;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c122eecb53150e9d6fe1d3f528fba28c01849de1"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTkwNTUyMQ==", "bodyText": "It is used in MutableSegmentImpl to create DefaultNullValueColumnProvider, for virtual and the extra columns", "url": "https://github.com/apache/pinot/pull/4954#discussion_r389905521", "createdAt": "2020-03-09T19:15:28Z", "author": {"login": "haibow"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/data/manager/realtime/RealtimeTableDataManager.java", "diffHunk": "@@ -51,7 +51,7 @@\n import org.apache.pinot.core.realtime.impl.RealtimeSegmentStatsHistory;\n import org.apache.pinot.core.segment.index.loader.IndexLoadingConfig;\n import org.apache.pinot.core.segment.index.loader.LoaderUtils;\n-import org.apache.pinot.core.segment.virtualcolumn.VirtualColumnProviderFactory;\n+import org.apache.pinot.core.segment.virtualcolumn.ColumnProviderFactory;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTg5NTI5OQ=="}, "originalCommit": {"oid": "c122eecb53150e9d6fe1d3f528fba28c01849de1"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxNjI2ODMwOnYy", "diffSide": "RIGHT", "path": "pinot-core/src/main/java/org/apache/pinot/core/io/reader/impl/ConstantMultiValueInvertedIndex.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxOToyODo0OFrOFz2WYg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxOToyODo0OFrOFz2WYg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTkxMjE2Mg==", "bodyText": "Multi-value column inverted index should be bitmap based, and it can never to sorted.", "url": "https://github.com/apache/pinot/pull/4954#discussion_r389912162", "createdAt": "2020-03-09T19:28:48Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/io/reader/impl/ConstantMultiValueInvertedIndex.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.core.io.reader.impl;\n+\n+import java.io.IOException;\n+import org.apache.pinot.common.utils.Pairs;\n+import org.apache.pinot.core.io.reader.BaseSingleColumnMultiValueReader;\n+import org.apache.pinot.core.io.reader.impl.v1.FixedBitMultiValueReader;\n+\n+\n+/**\n+ * Reader for the multi-value column with the constant value\n+ */\n+public class ConstantMultiValueInvertedIndex extends BaseSingleColumnMultiValueReader<FixedBitMultiValueReader.Context> implements SortedIndexMultiValueReader<FixedBitMultiValueReader.Context> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c122eecb53150e9d6fe1d3f528fba28c01849de1"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxNjI3MjY3OnYy", "diffSide": "RIGHT", "path": "pinot-core/src/main/java/org/apache/pinot/core/io/reader/impl/v1/SortedIndexSingleValueReader.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxOTozMDowOFrOFz2ZAw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxOTozMDowOFrOFz2ZAw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTkxMjgzNQ==", "bodyText": "Please revert this and all related renaming", "url": "https://github.com/apache/pinot/pull/4954#discussion_r389912835", "createdAt": "2020-03-09T19:30:08Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/io/reader/impl/v1/SortedIndexSingleValueReader.java", "diffHunk": "@@ -28,7 +28,7 @@\n /**\n  * Interface for sorted index readers.\n  */\n-public interface SortedIndexReader<T extends ReaderContext> extends SingleColumnSingleValueReader<T>, InvertedIndexReader<Pairs.IntPair> {\n+public interface SortedIndexSingleValueReader<T extends ReaderContext> extends SingleColumnSingleValueReader<T>, InvertedIndexReader<Pairs.IntPair> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c122eecb53150e9d6fe1d3f528fba28c01849de1"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxNjI3NDUzOnYy", "diffSide": "RIGHT", "path": "pinot-core/src/main/java/org/apache/pinot/core/io/reader/impl/SortedIndexMultiValueReader.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxOTozMDo0NlrOFz2aNQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxOTozMDo0NlrOFz2aNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTkxMzE0MQ==", "bodyText": "Please remove this as multi-value column can never be sorted", "url": "https://github.com/apache/pinot/pull/4954#discussion_r389913141", "createdAt": "2020-03-09T19:30:46Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/io/reader/impl/SortedIndexMultiValueReader.java", "diffHunk": "@@ -16,13 +16,32 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-package org.apache.pinot.core.segment.virtualcolumn;\n+package org.apache.pinot.core.io.reader.impl;\n+\n+import java.io.IOException;\n+import org.apache.pinot.common.utils.Pairs;\n+import org.apache.pinot.core.io.reader.ReaderContext;\n+import org.apache.pinot.core.io.reader.SingleColumnMultiValueReader;\n+import org.apache.pinot.core.segment.index.readers.InvertedIndexReader;\n+\n \n /**\n- * Provide the default null value as a single string.\n+ * Interface for sorted index multi-value readers.\n  */\n-public class DefaultNullValueSingleStringVirtualColumnProvider extends SingleStringVirtualColumnProvider {\n-  protected String getValue(VirtualColumnContext context) {\n-    return context.getFieldSpec().getDefaultNullValue().toString();\n-  }\n+public interface SortedIndexMultiValueReader<T extends ReaderContext> extends SingleColumnMultiValueReader<T>, InvertedIndexReader<Pairs.IntPair> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c122eecb53150e9d6fe1d3f528fba28c01849de1"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxNjgzODc4OnYy", "diffSide": "RIGHT", "path": "pinot-core/src/main/java/org/apache/pinot/core/segment/index/loader/defaultcolumn/BaseDefaultColumnHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQyMjo0NDo0MVrOFz71mw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQyMzo0OToyMVrOFz9EHQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDAwMjA3NQ==", "bodyText": "Can we revert this as well? Seems only used in the test", "url": "https://github.com/apache/pinot/pull/4954#discussion_r390002075", "createdAt": "2020-03-09T22:44:41Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/segment/index/loader/defaultcolumn/BaseDefaultColumnHandler.java", "diffHunk": "@@ -164,16 +164,16 @@ public void updateDefaultColumns(IndexLoadingConfig indexLoadingConfig)\n    *\n    * @return Action Map for each column.\n    */\n-  private Map<String, DefaultColumnAction> computeDefaultColumnActionMap() {\n+  static Map<String, DefaultColumnAction> computeDefaultColumnActionMap(Schema schema, SegmentMetadataImpl segmentMetadata) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "31d616533cc4f880604fc241d372762d97549481"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDAyMjE3Mw==", "bodyText": "reverted most changes. kept the unit test", "url": "https://github.com/apache/pinot/pull/4954#discussion_r390022173", "createdAt": "2020-03-09T23:49:21Z", "author": {"login": "haibow"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/segment/index/loader/defaultcolumn/BaseDefaultColumnHandler.java", "diffHunk": "@@ -164,16 +164,16 @@ public void updateDefaultColumns(IndexLoadingConfig indexLoadingConfig)\n    *\n    * @return Action Map for each column.\n    */\n-  private Map<String, DefaultColumnAction> computeDefaultColumnActionMap() {\n+  static Map<String, DefaultColumnAction> computeDefaultColumnActionMap(Schema schema, SegmentMetadataImpl segmentMetadata) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDAwMjA3NQ=="}, "originalCommit": {"oid": "31d616533cc4f880604fc241d372762d97549481"}, "originalPosition": 14}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3544, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}