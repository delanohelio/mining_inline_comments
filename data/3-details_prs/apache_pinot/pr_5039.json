{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY5OTMwODEy", "number": 5039, "title": "Close Kafka consumer before building or downloading immutable segment", "bodyText": "When realtime immutable segment needs to be built or downloaded, there is a short period of time that the new consuming segment has already started the Kafka consumption before the immutable segment finishes building or downloading.\nThis leads to a scenario that two unclosed consumers exist for the same partitionId at the same time. And this will also cause the metric system having two consumers with the same metric name.\nWhen an immutable segment needs to be built or downloaded, it means this segment has already done the Kafka consumption. Thus, it's ok to close the Kafka consumer.", "createdAt": "2020-02-01T19:27:39Z", "url": "https://github.com/apache/pinot/pull/5039", "merged": true, "mergeCommit": {"oid": "4665d8a012f4d6d7dc3ec5e8dabde8c0f8cb8e3c"}, "closed": true, "closedAt": "2020-02-10T19:32:04Z", "author": {"login": "jackjlli"}, "timelineItems": {"totalCount": 21, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcAOnNlgFqTM1MTkxNDQ5NQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcDCVtvgH2gAyMzY5OTMwODEyOjkzZDIyY2JjNjU3MDA3OTUxYjc4NTcwYzhhYTc4NDNlZjQ0OTYwNDA=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUxOTE0NDk1", "url": "https://github.com/apache/pinot/pull/5039#pullrequestreview-351914495", "createdAt": "2020-02-02T02:07:35Z", "commit": {"oid": "bd303a31e466dc5310989ce03b36d1900c9188d8"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "bd303a31e466dc5310989ce03b36d1900c9188d8", "author": {"user": {"login": "jackjlli", "name": "Jialiang Li"}}, "url": "https://github.com/apache/pinot/commit/bd303a31e466dc5310989ce03b36d1900c9188d8", "committedDate": "2020-02-01T19:17:28Z", "message": "Close Kafka consumer before building or downloading immutable segment"}, "afterCommit": {"oid": "1201aec79de1b182a645034468305341fbc30610", "author": {"user": {"login": "jackjlli", "name": "Jialiang Li"}}, "url": "https://github.com/apache/pinot/commit/1201aec79de1b182a645034468305341fbc30610", "committedDate": "2020-02-04T07:29:52Z", "message": "Close Kafka consumer before building or downloading immutable segment"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUzMTk1MDA3", "url": "https://github.com/apache/pinot/pull/5039#pullrequestreview-353195007", "createdAt": "2020-02-04T18:17:03Z", "commit": {"oid": "1201aec79de1b182a645034468305341fbc30610"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQxODoxNzowM1rOFleXbQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQxODoyNToxNFrOFleoTA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDgzOTE0OQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              private final Semaphore _partitionIdSemaphore;\n          \n          \n            \n              private final Semaphore _partitionConsumerSemaphore;", "url": "https://github.com/apache/pinot/pull/5039#discussion_r374839149", "createdAt": "2020-02-04T18:17:03Z", "author": {"login": "mcvsubbu"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/data/manager/realtime/LLRealtimeSegmentDataManager.java", "diffHunk": "@@ -203,6 +203,7 @@ public void deleteSegmentFile() {\n   private final String _resourceDataDir;\n   private final IndexLoadingConfig _indexLoadingConfig;\n   private final Schema _schema;\n+  private final Semaphore _partitionIdSemaphore;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1201aec79de1b182a645034468305341fbc30610"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDg0MTg0OQ==", "bodyText": "We should not stop the world if we cannot close the consumer.  If for any reason, the close fails, we should be able to continue, giving the gurantee that we will not call the consume methods on the same consumer. I am not opposed to changing the interface to support an explicit release() method (instead of just be auto-closeable). @npawar  can also comment on this.", "url": "https://github.com/apache/pinot/pull/5039#discussion_r374841849", "createdAt": "2020-02-04T18:22:04Z", "author": {"login": "mcvsubbu"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/data/manager/realtime/LLRealtimeSegmentDataManager.java", "diffHunk": "@@ -802,6 +803,11 @@ protected boolean commitSegment(String controllerVipUrl, boolean isSplitCommit)\n   }\n \n   protected boolean buildSegmentAndReplace() {\n+    if (!(closePartitionLevelConsumer() && closeStreamMetadataProvider())) {\n+      return false;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1201aec79de1b182a645034468305341fbc30610"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDg0MzA3MA==", "bodyText": "you do not need to pass the entire map. Just one semaphore should be enough. The caller can call getOrDefault()", "url": "https://github.com/apache/pinot/pull/5039#discussion_r374843070", "createdAt": "2020-02-04T18:24:25Z", "author": {"login": "mcvsubbu"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/data/manager/realtime/LLRealtimeSegmentDataManager.java", "diffHunk": "@@ -1008,7 +1030,8 @@ public void stop()\n   // If the transition is OFFLINE to ONLINE, the caller should have downloaded the segment and we don't reach here.\n   public LLRealtimeSegmentDataManager(RealtimeSegmentZKMetadata segmentZKMetadata, TableConfig tableConfig,\n       InstanceZKMetadata instanceZKMetadata, RealtimeTableDataManager realtimeTableDataManager, String resourceDataDir,\n-      IndexLoadingConfig indexLoadingConfig, Schema schema, ServerMetrics serverMetrics) {\n+      IndexLoadingConfig indexLoadingConfig, Schema schema, Map<Integer, Semaphore> partitionIdToSemaphoreMap,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1201aec79de1b182a645034468305341fbc30610"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDg0MzQ2OA==", "bodyText": "will this throw an exception and log an error when the service is being shutdown?", "url": "https://github.com/apache/pinot/pull/5039#discussion_r374843468", "createdAt": "2020-02-04T18:25:14Z", "author": {"login": "mcvsubbu"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/data/manager/realtime/LLRealtimeSegmentDataManager.java", "diffHunk": "@@ -1106,6 +1130,15 @@ public LLRealtimeSegmentDataManager(RealtimeSegmentZKMetadata segmentZKMetadata,\n \n     // Create record transformer\n     _recordTransformer = CompositeTransformer.getDefaultTransformer(schema);\n+\n+    // Acquire semaphore to create Kafka consumers\n+    try {\n+      _partitionIdSemaphore.acquire();\n+    } catch (InterruptedException e) {\n+      String errorMsg = \"InterruptedException when acquiring semaphore for Segment: \" + _segmentNameStr;\n+      segmentLogger.error(errorMsg);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1201aec79de1b182a645034468305341fbc30610"}, "originalPosition": 105}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "07164a3afdfd92c3bc0d29960dba5f60febac03c", "author": {"user": {"login": "jackjlli", "name": "Jialiang Li"}}, "url": "https://github.com/apache/pinot/commit/07164a3afdfd92c3bc0d29960dba5f60febac03c", "committedDate": "2020-02-04T22:01:23Z", "message": "Close Kafka consumer before building or downloading immutable segment"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "1201aec79de1b182a645034468305341fbc30610", "author": {"user": {"login": "jackjlli", "name": "Jialiang Li"}}, "url": "https://github.com/apache/pinot/commit/1201aec79de1b182a645034468305341fbc30610", "committedDate": "2020-02-04T07:29:52Z", "message": "Close Kafka consumer before building or downloading immutable segment"}, "afterCommit": {"oid": "07164a3afdfd92c3bc0d29960dba5f60febac03c", "author": {"user": {"login": "jackjlli", "name": "Jialiang Li"}}, "url": "https://github.com/apache/pinot/commit/07164a3afdfd92c3bc0d29960dba5f60febac03c", "committedDate": "2020-02-04T22:01:23Z", "message": "Close Kafka consumer before building or downloading immutable segment"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "973f23a5e114bd6f9377682c7e174a505be14efd", "author": {"user": {"login": "jackjlli", "name": "Jialiang Li"}}, "url": "https://github.com/apache/pinot/commit/973f23a5e114bd6f9377682c7e174a505be14efd", "committedDate": "2020-02-04T23:06:10Z", "message": "Add unit tests"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU0MDM5ODk4", "url": "https://github.com/apache/pinot/pull/5039#pullrequestreview-354039898", "createdAt": "2020-02-05T21:06:04Z", "commit": {"oid": "973f23a5e114bd6f9377682c7e174a505be14efd"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQyMTowNjowNFrOFmHKDw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQyMTowNjowNFrOFmHKDw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTUwNzQ3MQ==", "bodyText": "similar close and check is needed in buildSegmentFormCommit method?", "url": "https://github.com/apache/pinot/pull/5039#discussion_r375507471", "createdAt": "2020-02-05T21:06:04Z", "author": {"login": "npawar"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/data/manager/realtime/LLRealtimeSegmentDataManager.java", "diffHunk": "@@ -931,6 +972,11 @@ public void goOnlineFromConsuming(RealtimeSegmentZKMetadata metadata)\n   }\n \n   protected void downloadSegmentAndReplace(LLCRealtimeSegmentZKMetadata metadata) {\n+    closePartitionLevelConsumer();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "973f23a5e114bd6f9377682c7e174a505be14efd"}, "originalPosition": 89}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0e2b4a793c44cbbbe233e6ca3505b30809e7ae0a", "author": {"user": {"login": "jackjlli", "name": "Jialiang Li"}}, "url": "https://github.com/apache/pinot/commit/0e2b4a793c44cbbbe233e6ca3505b30809e7ae0a", "committedDate": "2020-02-05T21:27:45Z", "message": "Uniform the close method for building realtime immutable segment"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU0NjY5ODgz", "url": "https://github.com/apache/pinot/pull/5039#pullrequestreview-354669883", "createdAt": "2020-02-06T18:21:40Z", "commit": {"oid": "0e2b4a793c44cbbbe233e6ca3505b30809e7ae0a"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQxODoyMTo0MFrOFmlaSw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQxODoyODoyNFrOFmlnNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjAwMzE0Nw==", "bodyText": "You can get the partiitionId in the calling method from the SegmentName object. Passing the entire map into this object is not clean", "url": "https://github.com/apache/pinot/pull/5039#discussion_r376003147", "createdAt": "2020-02-06T18:21:40Z", "author": {"login": "mcvsubbu"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/data/manager/realtime/LLRealtimeSegmentDataManager.java", "diffHunk": "@@ -1008,7 +1030,8 @@ public void stop()\n   // If the transition is OFFLINE to ONLINE, the caller should have downloaded the segment and we don't reach here.\n   public LLRealtimeSegmentDataManager(RealtimeSegmentZKMetadata segmentZKMetadata, TableConfig tableConfig,\n       InstanceZKMetadata instanceZKMetadata, RealtimeTableDataManager realtimeTableDataManager, String resourceDataDir,\n-      IndexLoadingConfig indexLoadingConfig, Schema schema, ServerMetrics serverMetrics) {\n+      IndexLoadingConfig indexLoadingConfig, Schema schema, Map<Integer, Semaphore> partitionIdToSemaphoreMap,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDg0MzA3MA=="}, "originalCommit": {"oid": "1201aec79de1b182a645034468305341fbc30610"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjAwMzY1Nw==", "bodyText": "For now, this may be ok that we get an exception during shutdown (at times). Eventualy, we need a clean way of shutting down without throwing exceptions", "url": "https://github.com/apache/pinot/pull/5039#discussion_r376003657", "createdAt": "2020-02-06T18:22:49Z", "author": {"login": "mcvsubbu"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/data/manager/realtime/LLRealtimeSegmentDataManager.java", "diffHunk": "@@ -1106,6 +1130,15 @@ public LLRealtimeSegmentDataManager(RealtimeSegmentZKMetadata segmentZKMetadata,\n \n     // Create record transformer\n     _recordTransformer = CompositeTransformer.getDefaultTransformer(schema);\n+\n+    // Acquire semaphore to create Kafka consumers\n+    try {\n+      _partitionIdSemaphore.acquire();\n+    } catch (InterruptedException e) {\n+      String errorMsg = \"InterruptedException when acquiring semaphore for Segment: \" + _segmentNameStr;\n+      segmentLogger.error(errorMsg);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDg0MzQ2OA=="}, "originalCommit": {"oid": "1201aec79de1b182a645034468305341fbc30610"}, "originalPosition": 105}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjAwNDA4NA==", "bodyText": "Why is this returning a boolean, when the callers are not considering the return value?", "url": "https://github.com/apache/pinot/pull/5039#discussion_r376004084", "createdAt": "2020-02-06T18:23:38Z", "author": {"login": "mcvsubbu"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/data/manager/realtime/LLRealtimeSegmentDataManager.java", "diffHunk": "@@ -811,6 +826,34 @@ protected boolean buildSegmentAndReplace() {\n     return true;\n   }\n \n+  private void closeKafkaConsumers() {\n+    closePartitionLevelConsumer();\n+    closeStreamMetadataProvider();\n+    if (_acquireConsumerSemaphore.compareAndSet(true, false)) {\n+      _partitionConsumerSemaphore.release();\n+    }\n+  }\n+\n+  private boolean closePartitionLevelConsumer() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0e2b4a793c44cbbbe233e6ca3505b30809e7ae0a"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjAwNjQ1NA==", "bodyText": "Please write a block of comment before the declaration of this variable, describing what these semaphores are being used for.\nMake it private final.\nAlso document, that the semaphores will stay in the hash map even if the consuming partitions move to a different host. We expect that these will be a small number of semaphores, but that may be ok.\nIt may be useful to add a metric of how many semaphores are there in the map..", "url": "https://github.com/apache/pinot/pull/5039#discussion_r376006454", "createdAt": "2020-02-06T18:28:24Z", "author": {"login": "mcvsubbu"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/data/manager/realtime/RealtimeTableDataManager.java", "diffHunk": "@@ -60,6 +63,7 @@\n   private SegmentBuildTimeLeaseExtender _leaseExtender;\n   private RealtimeSegmentStatsHistory _statsHistory;\n   private final Semaphore _segmentBuildSemaphore;\n+  private Map<Integer, Semaphore> _partitionIdToSemaphoreMap = new ConcurrentHashMap<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0e2b4a793c44cbbbe233e6ca3505b30809e7ae0a"}, "originalPosition": 16}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "540b086154c2ab359d5544dc931f39deefaae622", "author": {"user": {"login": "jackjlli", "name": "Jialiang Li"}}, "url": "https://github.com/apache/pinot/commit/540b086154c2ab359d5544dc931f39deefaae622", "committedDate": "2020-02-06T22:47:49Z", "message": "Put partitionIdToSemaphoreMap to RealtimeTableDataManager"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "feb18d7f89ef91060af9b37467126c9b81dca184", "author": {"user": {"login": "jackjlli", "name": "Jialiang Li"}}, "url": "https://github.com/apache/pinot/commit/feb18d7f89ef91060af9b37467126c9b81dca184", "committedDate": "2020-02-06T22:50:51Z", "message": "Address PR comments"}, "afterCommit": {"oid": "be867aa4b9bb0e15ab19d3b007ff6e7a0ff9deb2", "author": {"user": {"login": "jackjlli", "name": "Jialiang Li"}}, "url": "https://github.com/apache/pinot/commit/be867aa4b9bb0e15ab19d3b007ff6e7a0ff9deb2", "committedDate": "2020-02-06T23:01:36Z", "message": "Address PR comments"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "be867aa4b9bb0e15ab19d3b007ff6e7a0ff9deb2", "author": {"user": {"login": "jackjlli", "name": "Jialiang Li"}}, "url": "https://github.com/apache/pinot/commit/be867aa4b9bb0e15ab19d3b007ff6e7a0ff9deb2", "committedDate": "2020-02-06T23:01:36Z", "message": "Address PR comments"}, "afterCommit": {"oid": "6909e4267b0306cede4c1c22d5f10e58021fee3f", "author": {"user": {"login": "jackjlli", "name": "Jialiang Li"}}, "url": "https://github.com/apache/pinot/commit/6909e4267b0306cede4c1c22d5f10e58021fee3f", "committedDate": "2020-02-06T23:15:19Z", "message": "Address PR comments"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "6909e4267b0306cede4c1c22d5f10e58021fee3f", "author": {"user": {"login": "jackjlli", "name": "Jialiang Li"}}, "url": "https://github.com/apache/pinot/commit/6909e4267b0306cede4c1c22d5f10e58021fee3f", "committedDate": "2020-02-06T23:15:19Z", "message": "Address PR comments"}, "afterCommit": {"oid": "64ed4fcb2c7163c4d6687109eb1baa01c884b30f", "author": {"user": {"login": "jackjlli", "name": "Jialiang Li"}}, "url": "https://github.com/apache/pinot/commit/64ed4fcb2c7163c4d6687109eb1baa01c884b30f", "committedDate": "2020-02-07T00:34:49Z", "message": "Address PR comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "20d82f0136c11238ef9ddffd23952b26cf2f63f6", "author": {"user": {"login": "jackjlli", "name": "Jialiang Li"}}, "url": "https://github.com/apache/pinot/commit/20d82f0136c11238ef9ddffd23952b26cf2f63f6", "committedDate": "2020-02-08T01:22:18Z", "message": "Address PR comments"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "64ed4fcb2c7163c4d6687109eb1baa01c884b30f", "author": {"user": {"login": "jackjlli", "name": "Jialiang Li"}}, "url": "https://github.com/apache/pinot/commit/64ed4fcb2c7163c4d6687109eb1baa01c884b30f", "committedDate": "2020-02-07T00:34:49Z", "message": "Address PR comments"}, "afterCommit": {"oid": "20d82f0136c11238ef9ddffd23952b26cf2f63f6", "author": {"user": {"login": "jackjlli", "name": "Jialiang Li"}}, "url": "https://github.com/apache/pinot/commit/20d82f0136c11238ef9ddffd23952b26cf2f63f6", "committedDate": "2020-02-08T01:22:18Z", "message": "Address PR comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU1Mzg5NTIz", "url": "https://github.com/apache/pinot/pull/5039#pullrequestreview-355389523", "createdAt": "2020-02-07T19:35:59Z", "commit": {"oid": "64ed4fcb2c7163c4d6687109eb1baa01c884b30f"}, "state": "COMMENTED", "comments": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxOTozNTo1OVrOFnIAeg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wOFQxNTozMDoxNlrOFnQ7vQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjU2OTk3OA==", "bodyText": "Can you please add a comment here as to why we need a boolean? thanks.", "url": "https://github.com/apache/pinot/pull/5039#discussion_r376569978", "createdAt": "2020-02-07T19:35:59Z", "author": {"login": "mcvsubbu"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/data/manager/realtime/LLRealtimeSegmentDataManager.java", "diffHunk": "@@ -203,6 +203,8 @@ public void deleteSegmentFile() {\n   private final String _resourceDataDir;\n   private final IndexLoadingConfig _indexLoadingConfig;\n   private final Schema _schema;\n+  private final Semaphore _partitionConsumerSemaphore;\n+  private final AtomicBoolean _acquireConsumerSemaphore;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "64ed4fcb2c7163c4d6687109eb1baa01c884b30f"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjU3MDEzMA==", "bodyText": "please add a comment here on what this semaphore protects/allows", "url": "https://github.com/apache/pinot/pull/5039#discussion_r376570130", "createdAt": "2020-02-07T19:36:18Z", "author": {"login": "mcvsubbu"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/data/manager/realtime/LLRealtimeSegmentDataManager.java", "diffHunk": "@@ -203,6 +203,8 @@ public void deleteSegmentFile() {\n   private final String _resourceDataDir;\n   private final IndexLoadingConfig _indexLoadingConfig;\n   private final Schema _schema;\n+  private final Semaphore _partitionConsumerSemaphore;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "64ed4fcb2c7163c4d6687109eb1baa01c884b30f"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjU3MTgyNQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              private final AtomicBoolean _acquireConsumerSemaphore;\n          \n          \n            \n              private final AtomicBoolean _acquiredConsumerSemaphore;", "url": "https://github.com/apache/pinot/pull/5039#discussion_r376571825", "createdAt": "2020-02-07T19:40:09Z", "author": {"login": "mcvsubbu"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/data/manager/realtime/LLRealtimeSegmentDataManager.java", "diffHunk": "@@ -203,6 +203,8 @@ public void deleteSegmentFile() {\n   private final String _resourceDataDir;\n   private final IndexLoadingConfig _indexLoadingConfig;\n   private final Schema _schema;\n+  private final Semaphore _partitionConsumerSemaphore;\n+  private final AtomicBoolean _acquireConsumerSemaphore;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "64ed4fcb2c7163c4d6687109eb1baa01c884b30f"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjcxNTQzMA==", "bodyText": "can incorporate this change?", "url": "https://github.com/apache/pinot/pull/5039#discussion_r376715430", "createdAt": "2020-02-08T15:15:01Z", "author": {"login": "mcvsubbu"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/data/manager/realtime/LLRealtimeSegmentDataManager.java", "diffHunk": "@@ -203,6 +203,8 @@ public void deleteSegmentFile() {\n   private final String _resourceDataDir;\n   private final IndexLoadingConfig _indexLoadingConfig;\n   private final Schema _schema;\n+  private final Semaphore _partitionConsumerSemaphore;\n+  private final AtomicBoolean _acquireConsumerSemaphore;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjU3MTgyNQ=="}, "originalCommit": {"oid": "64ed4fcb2c7163c4d6687109eb1baa01c884b30f"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjcxNTY2Nw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              // Maintains a map for the partitionIds and its related semaphores, which is to prevent two different Kafka consumers\n          \n          \n            \n              // Maintains a map of partitionIds to semaphores. The semaphore ensures that exactly one PartitionConsumer\n          \n          \n            \n              // instance consumes from any stream partition. In some streams, it is possible that having multiple consumers (with the same  consumer name on the same host)  consuming from the same stream partition can lead to bugs.", "url": "https://github.com/apache/pinot/pull/5039#discussion_r376715667", "createdAt": "2020-02-08T15:19:29Z", "author": {"login": "mcvsubbu"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/data/manager/realtime/RealtimeTableDataManager.java", "diffHunk": "@@ -60,6 +63,11 @@\n   private SegmentBuildTimeLeaseExtender _leaseExtender;\n   private RealtimeSegmentStatsHistory _statsHistory;\n   private final Semaphore _segmentBuildSemaphore;\n+  // Maintains a map for the partitionIds and its related semaphores, which is to prevent two different Kafka consumers", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "20d82f0136c11238ef9ddffd23952b26cf2f63f6"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjcxNTY3OQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              // from consuming with the same partitionId in parallel in the same host.", "url": "https://github.com/apache/pinot/pull/5039#discussion_r376715679", "createdAt": "2020-02-08T15:20:03Z", "author": {"login": "mcvsubbu"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/data/manager/realtime/RealtimeTableDataManager.java", "diffHunk": "@@ -60,6 +63,11 @@\n   private SegmentBuildTimeLeaseExtender _leaseExtender;\n   private RealtimeSegmentStatsHistory _statsHistory;\n   private final Semaphore _segmentBuildSemaphore;\n+  // Maintains a map for the partitionIds and its related semaphores, which is to prevent two different Kafka consumers\n+  // from consuming with the same partitionId in parallel in the same host.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "20d82f0136c11238ef9ddffd23952b26cf2f63f6"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjcxNjE2OQ==", "bodyText": "Perhaps I am missing something, but the second segment data manager should not have acquired the semaphore, so this should be asserted to false?", "url": "https://github.com/apache/pinot/pull/5039#discussion_r376716169", "createdAt": "2020-02-08T15:28:50Z", "author": {"login": "mcvsubbu"}, "path": "pinot-core/src/test/java/org/apache/pinot/core/data/manager/realtime/LLRealtimeSegmentDataManagerTest.java", "diffHunk": "@@ -609,6 +639,43 @@ public void testFileRemovedDuringOnlineTransition()\n     segmentDataManager._state.set(segmentDataManager, LLRealtimeSegmentDataManager.State.HOLDING);\n     segmentDataManager.goOnlineFromConsuming(metadata);\n     Assert.assertFalse(new File(segTarFileName).exists());\n+    segmentDataManager.destroy();\n+  }\n+\n+  @Test\n+  public void testOnlyOneSegmentHoldingTheSemaphoreForParticularPartition()\n+      throws Exception {\n+    long timeout = 2_000L;\n+    FakeLLRealtimeSegmentDataManager firstSegmentDataManager = createFakeSegmentManager();\n+    Assert.assertTrue(firstSegmentDataManager.getAcquireConsumerSemaphore().get());\n+    Assert.assertEquals(firstSegmentDataManager.getPartitionConsumerSemaphore().availablePermits(), 0);\n+\n+    // Release semaphore after timeout.\n+    Thread releaseSemaphore = new Thread(() -> {\n+      try {\n+        Thread.sleep(timeout);\n+      } catch (InterruptedException e) {\n+        throw new RuntimeException(\"InterruptedException when sleeping for \" + timeout + \"ms\");\n+      } finally {\n+        firstSegmentDataManager.destroy();\n+      }\n+    });\n+    releaseSemaphore.start();\n+\n+    // The second segment will be hanged until the semaphore gets released.\n+    FakeLLRealtimeSegmentDataManager secondSegmentDataManager = createFakeSegmentManager();\n+    Assert.assertEquals(firstSegmentDataManager.getPartitionConsumerSemaphore(),\n+        secondSegmentDataManager.getPartitionConsumerSemaphore());\n+    Assert.assertTrue(secondSegmentDataManager.getAcquireConsumerSemaphore().get());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "20d82f0136c11238ef9ddffd23952b26cf2f63f6"}, "originalPosition": 305}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjcxNjE5Mg==", "bodyText": "Can you use barriers and avoid the sleep ? Is this test prone to being flaky?", "url": "https://github.com/apache/pinot/pull/5039#discussion_r376716192", "createdAt": "2020-02-08T15:29:26Z", "author": {"login": "mcvsubbu"}, "path": "pinot-core/src/test/java/org/apache/pinot/core/data/manager/realtime/LLRealtimeSegmentDataManagerTest.java", "diffHunk": "@@ -609,6 +639,43 @@ public void testFileRemovedDuringOnlineTransition()\n     segmentDataManager._state.set(segmentDataManager, LLRealtimeSegmentDataManager.State.HOLDING);\n     segmentDataManager.goOnlineFromConsuming(metadata);\n     Assert.assertFalse(new File(segTarFileName).exists());\n+    segmentDataManager.destroy();\n+  }\n+\n+  @Test\n+  public void testOnlyOneSegmentHoldingTheSemaphoreForParticularPartition()\n+      throws Exception {\n+    long timeout = 2_000L;\n+    FakeLLRealtimeSegmentDataManager firstSegmentDataManager = createFakeSegmentManager();\n+    Assert.assertTrue(firstSegmentDataManager.getAcquireConsumerSemaphore().get());\n+    Assert.assertEquals(firstSegmentDataManager.getPartitionConsumerSemaphore().availablePermits(), 0);\n+\n+    // Release semaphore after timeout.\n+    Thread releaseSemaphore = new Thread(() -> {\n+      try {\n+        Thread.sleep(timeout);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "20d82f0136c11238ef9ddffd23952b26cf2f63f6"}, "originalPosition": 292}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjcxNjIyMQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              // A boolean flag to check whether the current thread acquires the semaphore, so that the semaphore be released only once within the same thread.\n          \n          \n            \n              // A boolean flag to check whether the current thread has acquired the semaphore, so that the semaphore be released only once within the same thread.", "url": "https://github.com/apache/pinot/pull/5039#discussion_r376716221", "createdAt": "2020-02-08T15:30:16Z", "author": {"login": "mcvsubbu"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/data/manager/realtime/LLRealtimeSegmentDataManager.java", "diffHunk": "@@ -203,6 +203,10 @@ public void deleteSegmentFile() {\n   private final String _resourceDataDir;\n   private final IndexLoadingConfig _indexLoadingConfig;\n   private final Schema _schema;\n+  // Semaphore for each partitionId only. See the comments in {@link RealtimeTableDataManager}.\n+  private final Semaphore _partitionConsumerSemaphore;\n+  // A boolean flag to check whether the current thread acquires the semaphore, so that the semaphore be released only once within the same thread.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "20d82f0136c11238ef9ddffd23952b26cf2f63f6"}, "originalPosition": 22}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "10038908d6cf04f2b544acfec0e354fa87aafaac", "author": {"user": {"login": "jackjlli", "name": "Jialiang Li"}}, "url": "https://github.com/apache/pinot/commit/10038908d6cf04f2b544acfec0e354fa87aafaac", "committedDate": "2020-02-09T20:42:41Z", "message": "Address PR comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU2MTIwNTQz", "url": "https://github.com/apache/pinot/pull/5039#pullrequestreview-356120543", "createdAt": "2020-02-10T17:22:22Z", "commit": {"oid": "10038908d6cf04f2b544acfec0e354fa87aafaac"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQxNzoyMjoyMlrOFnuuEQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQxNzozMjoyN1rOFnvDHw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzIwNDI0MQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              // modify the permit. This boolean make sure the semaphore gets released only once within the same thread.\n          \n          \n            \n              // modify the permit. This boolean make sure the semaphore gets released only once when the partition stops consuming.", "url": "https://github.com/apache/pinot/pull/5039#discussion_r377204241", "createdAt": "2020-02-10T17:22:22Z", "author": {"login": "mcvsubbu"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/data/manager/realtime/LLRealtimeSegmentDataManager.java", "diffHunk": "@@ -203,10 +203,14 @@ public void deleteSegmentFile() {\n   private final String _resourceDataDir;\n   private final IndexLoadingConfig _indexLoadingConfig;\n   private final Schema _schema;\n-  // Semaphore for each partitionId only. See the comments in {@link RealtimeTableDataManager}.\n+  // Semaphore for each partitionId only, which is to prevent two different Kafka consumers\n+  // from consuming with the same partitionId in parallel in the same host.\n+  // See the comments in {@link RealtimeTableDataManager}.\n   private final Semaphore _partitionConsumerSemaphore;\n-  // A boolean flag to check whether the current thread acquires the semaphore, so that the semaphore be released only once within the same thread.\n-  private final AtomicBoolean _acquireConsumerSemaphore;\n+  // A boolean flag to check whether the current thread has acquired the semaphore.\n+  // This boolean is needed because the semaphore is shared by threads; every thread holding this semaphore can\n+  // modify the permit. This boolean make sure the semaphore gets released only once within the same thread.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "10038908d6cf04f2b544acfec0e354fa87aafaac"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzIwNjEyMw==", "bodyText": "nit: segmentLogger already has segment name", "url": "https://github.com/apache/pinot/pull/5039#discussion_r377206123", "createdAt": "2020-02-10T17:25:44Z", "author": {"login": "mcvsubbu"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/data/manager/realtime/LLRealtimeSegmentDataManager.java", "diffHunk": "@@ -1097,15 +1135,24 @@ public LLRealtimeSegmentDataManager(RealtimeSegmentZKMetadata segmentZKMetadata,\n             .setInvertedIndexColumns(invertedIndexColumns).setRealtimeSegmentZKMetadata(segmentZKMetadata)\n             .setOffHeap(_isOffHeap).setMemoryManager(_memoryManager)\n             .setStatsHistory(realtimeTableDataManager.getStatsHistory())\n-            .setAggregateMetrics(indexingConfig.isAggregateMetrics())\n-            .setNullHandlingEnabled(_nullHandlingEnabled);\n+            .setAggregateMetrics(indexingConfig.isAggregateMetrics()).setNullHandlingEnabled(_nullHandlingEnabled);\n \n     // Create message decoder\n     _messageDecoder = StreamDecoderProvider.create(_partitionLevelStreamConfig, _schema);\n     _clientId = _streamTopic + \"-\" + _streamPartitionId;\n \n     // Create record transformer\n     _recordTransformer = CompositeTransformer.getDefaultTransformer(schema);\n+\n+    // Acquire semaphore to create Kafka consumers\n+    try {\n+      _partitionConsumerSemaphore.acquire();\n+      _acquiredConsumerSemaphore.set(true);\n+    } catch (InterruptedException e) {\n+      String errorMsg = \"InterruptedException when acquiring semaphore for Segment: \" + _segmentNameStr;\n+      segmentLogger.error(errorMsg);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "10038908d6cf04f2b544acfec0e354fa87aafaac"}, "originalPosition": 193}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzIwODE4Nw==", "bodyText": "Should you add this in the test setup method?", "url": "https://github.com/apache/pinot/pull/5039#discussion_r377208187", "createdAt": "2020-02-10T17:29:36Z", "author": {"login": "mcvsubbu"}, "path": "pinot-core/src/test/java/org/apache/pinot/core/data/manager/realtime/LLRealtimeSegmentDataManagerTest.java", "diffHunk": "@@ -137,11 +142,13 @@ private FakeLLRealtimeSegmentDataManager createFakeSegmentManager()\n     InstanceZKMetadata instanceZKMetadata = new InstanceZKMetadata();\n     RealtimeTableDataManager tableDataManager = createTableDataManager();\n     String resourceDir = _segmentDir;\n+    LLCSegmentName llcSegmentName = new LLCSegmentName(_segmentNameStr);\n+    _partitionIdToSemaphoreMap.putIfAbsent(_partitionId, new Semaphore(1));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "10038908d6cf04f2b544acfec0e354fa87aafaac"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzIwOTYzMQ==", "bodyText": "we have the global semaphore map right here in this test, so you can use that instead of adding getters that are visible for testing?", "url": "https://github.com/apache/pinot/pull/5039#discussion_r377209631", "createdAt": "2020-02-10T17:32:27Z", "author": {"login": "mcvsubbu"}, "path": "pinot-core/src/test/java/org/apache/pinot/core/data/manager/realtime/LLRealtimeSegmentDataManagerTest.java", "diffHunk": "@@ -609,6 +639,43 @@ public void testFileRemovedDuringOnlineTransition()\n     segmentDataManager._state.set(segmentDataManager, LLRealtimeSegmentDataManager.State.HOLDING);\n     segmentDataManager.goOnlineFromConsuming(metadata);\n     Assert.assertFalse(new File(segTarFileName).exists());\n+    segmentDataManager.destroy();\n+  }\n+\n+  @Test\n+  public void testOnlyOneSegmentHoldingTheSemaphoreForParticularPartition()\n+      throws Exception {\n+    long timeout = 2_000L;\n+    FakeLLRealtimeSegmentDataManager firstSegmentDataManager = createFakeSegmentManager();\n+    Assert.assertTrue(firstSegmentDataManager.getAcquiredConsumerSemaphore().get());\n+    Assert.assertEquals(firstSegmentDataManager.getPartitionConsumerSemaphore().availablePermits(), 0);\n+\n+    // Release semaphore after timeout.\n+    Thread releaseSemaphore = new Thread(() -> {\n+      try {\n+        Thread.sleep(timeout);\n+      } catch (InterruptedException e) {\n+        throw new RuntimeException(\"InterruptedException when sleeping for \" + timeout + \"ms\");\n+      } finally {\n+        firstSegmentDataManager.destroy();\n+      }\n+    });\n+    releaseSemaphore.start();\n+\n+    // The second segment will be hanged until the semaphore gets released.\n+    FakeLLRealtimeSegmentDataManager secondSegmentDataManager = createFakeSegmentManager();\n+    Assert.assertEquals(firstSegmentDataManager.getPartitionConsumerSemaphore(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "10038908d6cf04f2b544acfec0e354fa87aafaac"}, "originalPosition": 303}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "116a40bd313ecd7281606861974f12932af7bf89", "author": {"user": {"login": "jackjlli", "name": "Jialiang Li"}}, "url": "https://github.com/apache/pinot/commit/116a40bd313ecd7281606861974f12932af7bf89", "committedDate": "2020-02-10T18:46:53Z", "message": "Address PR comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU2MTk4MDU0", "url": "https://github.com/apache/pinot/pull/5039#pullrequestreview-356198054", "createdAt": "2020-02-10T19:22:24Z", "commit": {"oid": "116a40bd313ecd7281606861974f12932af7bf89"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQxOToyMjoyNFrOFnyfSA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQxOToyMjoyNFrOFnyfSA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzI2NTk5Mg==", "bodyText": "you should add the segment name to the error message in the exception, though", "url": "https://github.com/apache/pinot/pull/5039#discussion_r377265992", "createdAt": "2020-02-10T19:22:24Z", "author": {"login": "mcvsubbu"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/data/manager/realtime/LLRealtimeSegmentDataManager.java", "diffHunk": "@@ -1097,15 +1135,24 @@ public LLRealtimeSegmentDataManager(RealtimeSegmentZKMetadata segmentZKMetadata,\n             .setInvertedIndexColumns(invertedIndexColumns).setRealtimeSegmentZKMetadata(segmentZKMetadata)\n             .setOffHeap(_isOffHeap).setMemoryManager(_memoryManager)\n             .setStatsHistory(realtimeTableDataManager.getStatsHistory())\n-            .setAggregateMetrics(indexingConfig.isAggregateMetrics())\n-            .setNullHandlingEnabled(_nullHandlingEnabled);\n+            .setAggregateMetrics(indexingConfig.isAggregateMetrics()).setNullHandlingEnabled(_nullHandlingEnabled);\n \n     // Create message decoder\n     _messageDecoder = StreamDecoderProvider.create(_partitionLevelStreamConfig, _schema);\n     _clientId = _streamTopic + \"-\" + _streamPartitionId;\n \n     // Create record transformer\n     _recordTransformer = CompositeTransformer.getDefaultTransformer(schema);\n+\n+    // Acquire semaphore to create Kafka consumers\n+    try {\n+      _partitionConsumerSemaphore.acquire();\n+      _acquiredConsumerSemaphore.set(true);\n+    } catch (InterruptedException e) {\n+      String errorMsg = \"InterruptedException when acquiring the partitionConsumerSemaphore\";\n+      segmentLogger.error(errorMsg);\n+      throw new RuntimeException(errorMsg);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "116a40bd313ecd7281606861974f12932af7bf89"}, "originalPosition": 194}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "93d22cbc657007951b78570c8aa7843ef4496040", "author": {"user": {"login": "jackjlli", "name": "Jialiang Li"}}, "url": "https://github.com/apache/pinot/commit/93d22cbc657007951b78570c8aa7843ef4496040", "committedDate": "2020-02-10T19:31:23Z", "message": "Address PR comments"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1571, "cost": 1, "resetAt": "2021-10-28T18:00:02Z"}}}