{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTIwODU0ODY3", "number": 6262, "title": "Enhance forward index reader for better performance", "bodyText": "Description\nEnhance the forward index reader by specializing the case for each numBits (from 1 to 31) compression.\nThe int value reader has 3 methods:\n\nBulk read 32 values\nRead value without buffer boundary check\nRead value with buffer boundary check\n\nThe new forward index reader uses the 3 methods based on the passed in doc ids:\n\nFor sequential doc ids, use bulk read\nFor non-sequential doc ids, use unchecked read if possible, and only use checked read for the last few values\n\nWe observe up to 7x improvement for the reading, detailed perf number can be found here: https://docs.google.com/spreadsheets/d/1o66G7Jw_7K4swEcp1FYCzgr0MF9JBAAM6KMGOXBSdIA/edit?usp=sharing", "createdAt": "2020-11-13T21:13:58Z", "url": "https://github.com/apache/pinot/pull/6262", "merged": true, "mergeCommit": {"oid": "50df5cb9f3f87d6027474a9a5c25ec664f4d522b"}, "closed": true, "closedAt": "2020-11-24T19:17:52Z", "author": {"login": "Jackie-Jiang"}, "timelineItems": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdcOPSYgBqjM5OTU0ODIzNjU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdenlkpAFqTUzNTk1MDA4Ng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "1fa1685a9a8de5a6d7ea214e82dcacd1f6f81ddb", "author": {"user": {"login": "Jackie-Jiang", "name": "Xiaotian (Jackie) Jiang"}}, "url": "https://github.com/apache/pinot/commit/1fa1685a9a8de5a6d7ea214e82dcacd1f6f81ddb", "committedDate": "2020-11-13T21:10:27Z", "message": "Enhance forward index reader for better performance"}, "afterCommit": {"oid": "6d2a4bfead2849d0376b108734360ef629fae0c1", "author": {"user": {"login": "Jackie-Jiang", "name": "Xiaotian (Jackie) Jiang"}}, "url": "https://github.com/apache/pinot/commit/6d2a4bfead2849d0376b108734360ef629fae0c1", "committedDate": "2020-11-13T21:35:51Z", "message": "Enhance forward index reader for better performance"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMyNjk0MTcz", "url": "https://github.com/apache/pinot/pull/6262#pullrequestreview-532694173", "createdAt": "2020-11-17T19:00:33Z", "commit": {"oid": "6d2a4bfead2849d0376b108734360ef629fae0c1"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMyNjk3MDg4", "url": "https://github.com/apache/pinot/pull/6262#pullrequestreview-532697088", "createdAt": "2020-11-17T19:04:13Z", "commit": {"oid": "6d2a4bfead2849d0376b108734360ef629fae0c1"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QxOTowNDoxNFrOH1EsNw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QxOTowNzoyMVrOH1Ez3w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTQxMzQzMQ==", "bodyText": "Nit suggestion: Use prime numbers?", "url": "https://github.com/apache/pinot/pull/6262#discussion_r525413431", "createdAt": "2020-11-17T19:04:14Z", "author": {"login": "mayankshriv"}, "path": "pinot-core/src/test/java/org/apache/pinot/core/segment/index/readers/forward/FixedBitSVForwardIndexReaderV2Test.java", "diffHunk": "@@ -0,0 +1,102 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.core.segment.index.readers.forward;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.Random;\n+import org.apache.commons.io.FileUtils;\n+import org.apache.pinot.core.io.writer.impl.FixedBitSVForwardIndexWriter;\n+import org.apache.pinot.core.segment.memory.PinotDataBuffer;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Test;\n+\n+import static org.testng.Assert.assertEquals;\n+\n+\n+public class FixedBitSVForwardIndexReaderV2Test {\n+  private static final File INDEX_DIR = new File(FileUtils.getTempDirectory(), \"FixedBitIntReaderTest\");\n+  private static final int NUM_VALUES = 99999;\n+  private static final int NUM_DOC_IDS = 10000;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6d2a4bfead2849d0376b108734360ef629fae0c1"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTQxNTM5MQ==", "bodyText": "Would it be better to use explicit values instead of random?\nFor example, we know all the corner cases would be around bits being split across read boundaries. We can then programmatically generate all the splits. Given this is a fundamental change, I'd feel more comfortable with exhaustive testing on all corner cases explicitly tested.", "url": "https://github.com/apache/pinot/pull/6262#discussion_r525415391", "createdAt": "2020-11-17T19:07:21Z", "author": {"login": "mayankshriv"}, "path": "pinot-core/src/test/java/org/apache/pinot/core/segment/index/readers/forward/FixedBitSVForwardIndexReaderV2Test.java", "diffHunk": "@@ -0,0 +1,102 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.core.segment.index.readers.forward;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.Random;\n+import org.apache.commons.io.FileUtils;\n+import org.apache.pinot.core.io.writer.impl.FixedBitSVForwardIndexWriter;\n+import org.apache.pinot.core.segment.memory.PinotDataBuffer;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Test;\n+\n+import static org.testng.Assert.assertEquals;\n+\n+\n+public class FixedBitSVForwardIndexReaderV2Test {\n+  private static final File INDEX_DIR = new File(FileUtils.getTempDirectory(), \"FixedBitIntReaderTest\");\n+  private static final int NUM_VALUES = 99999;\n+  private static final int NUM_DOC_IDS = 10000;\n+  private static final Random RANDOM = new Random();\n+\n+  private final int[] _sequentialDocIds = new int[NUM_DOC_IDS];\n+  private final int[] _sparseDocIds = new int[NUM_DOC_IDS];\n+  private final int[] _lastSequentialDocIds = new int[NUM_DOC_IDS];\n+  private final int[] _dictIdBuffer = new int[NUM_DOC_IDS];\n+\n+  @BeforeClass\n+  public void setUp()\n+      throws IOException {\n+    FileUtils.forceMkdir(INDEX_DIR);\n+\n+    int sequentialDocId = RANDOM.nextInt(32);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6d2a4bfead2849d0376b108734360ef629fae0c1"}, "originalPosition": 50}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMyNjE3Mjgx", "url": "https://github.com/apache/pinot/pull/6262#pullrequestreview-532617281", "createdAt": "2020-11-17T17:29:48Z", "commit": {"oid": "6d2a4bfead2849d0376b108734360ef629fae0c1"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QxNzoyOTo0OFrOH1Ay_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QyMjo1OToxNVrOH1O-Lw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTM0OTYzMQ==", "bodyText": "do we need V1 V2?", "url": "https://github.com/apache/pinot/pull/6262#discussion_r525349631", "createdAt": "2020-11-17T17:29:48Z", "author": {"login": "kishoreg"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/segment/index/loader/invertedindex/TextIndexHandler.java", "diffHunk": "@@ -51,7 +51,7 @@\n import org.apache.pinot.core.segment.index.readers.ForwardIndexReaderContext;\n import org.apache.pinot.core.segment.index.readers.StringDictionary;\n import org.apache.pinot.core.segment.index.readers.forward.BaseChunkSVForwardIndexReader.ChunkReaderContext;\n-import org.apache.pinot.core.segment.index.readers.forward.FixedBitSVForwardIndexReader;\n+import org.apache.pinot.core.segment.index.readers.forward.FixedBitSVForwardIndexReaderV2;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6d2a4bfead2849d0376b108734360ef629fae0c1"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTU4MTg3MQ==", "bodyText": "should we use some cached int arrays here?", "url": "https://github.com/apache/pinot/pull/6262#discussion_r525581871", "createdAt": "2020-11-17T22:59:15Z", "author": {"login": "kishoreg"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/segment/index/readers/forward/FixedBitSVForwardIndexReaderV2.java", "diffHunk": "@@ -0,0 +1,103 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.core.segment.index.readers.forward;\n+\n+import org.apache.pinot.core.io.reader.impl.FixedBitIntReader;\n+import org.apache.pinot.core.segment.index.readers.ForwardIndexReader;\n+import org.apache.pinot.core.segment.index.readers.ForwardIndexReaderContext;\n+import org.apache.pinot.core.segment.memory.PinotDataBuffer;\n+import org.apache.pinot.spi.data.FieldSpec.DataType;\n+\n+\n+/**\n+ * Bit-compressed dictionary-encoded forward index reader for single-value columns. The values returned are dictionary\n+ * ids.\n+ */\n+public final class FixedBitSVForwardIndexReaderV2 implements ForwardIndexReader<ForwardIndexReaderContext> {\n+  private final FixedBitIntReader _reader;\n+  private final int _numDocs;\n+\n+  public FixedBitSVForwardIndexReaderV2(PinotDataBuffer dataBuffer, int numDocs, int numBitsPerValue) {\n+    _reader = FixedBitIntReader.getReader(dataBuffer, numBitsPerValue);\n+    _numDocs = numDocs;\n+  }\n+\n+  @Override\n+  public boolean isDictionaryEncoded() {\n+    return true;\n+  }\n+\n+  @Override\n+  public boolean isSingleValue() {\n+    return true;\n+  }\n+\n+  @Override\n+  public DataType getValueType() {\n+    return DataType.INT;\n+  }\n+\n+  @Override\n+  public int getDictId(int docId, ForwardIndexReaderContext context) {\n+    return _reader.read(docId);\n+  }\n+\n+  @Override\n+  public void readDictIds(int[] docIds, int length, int[] dictIdBuffer, ForwardIndexReaderContext context) {\n+    int firstDocId = docIds[0];\n+    int lastDocId = docIds[length - 1];\n+    int index = 0;\n+\n+    // Use bulk read if the doc ids are sequential\n+    if (lastDocId - firstDocId + 1 == length && length >= 64) {\n+      int[] buffer = new int[32];", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2553e72eece292795905fa221685bed6bef8ea11"}, "originalPosition": 69}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM0ODg1MzQz", "url": "https://github.com/apache/pinot/pull/6262#pullrequestreview-534885343", "createdAt": "2020-11-19T21:51:42Z", "commit": {"oid": "2553e72eece292795905fa221685bed6bef8ea11"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQyMTo1MTo0MlrOH2zVWw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQyMTo1MTo0MlrOH2zVWw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzIyNjIwMw==", "bodyText": "How is this covering all the numbits cases for new APIs?", "url": "https://github.com/apache/pinot/pull/6262#discussion_r527226203", "createdAt": "2020-11-19T21:51:42Z", "author": {"login": "siddharthteotia"}, "path": "pinot-core/src/test/java/org/apache/pinot/core/io/reader/impl/FixedBitIntReaderTest.java", "diffHunk": "@@ -0,0 +1,86 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.core.io.reader.impl;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.Random;\n+import org.apache.commons.io.FileUtils;\n+import org.apache.pinot.core.io.writer.impl.FixedBitSVForwardIndexWriter;\n+import org.apache.pinot.core.segment.memory.PinotDataBuffer;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Test;\n+\n+import static org.testng.Assert.assertEquals;\n+\n+\n+public class FixedBitIntReaderTest {\n+  private static final File INDEX_DIR = new File(FileUtils.getTempDirectory(), \"FixedBitIntReaderTest\");\n+  private static final int NUM_VALUES = 95;\n+  private static final Random RANDOM = new Random();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2553e72eece292795905fa221685bed6bef8ea11"}, "originalPosition": 37}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM0ODg2MTEz", "url": "https://github.com/apache/pinot/pull/6262#pullrequestreview-534886113", "createdAt": "2020-11-19T21:52:56Z", "commit": {"oid": "2553e72eece292795905fa221685bed6bef8ea11"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQyMTo1Mjo1NlrOH2zX6w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQyMTo1Mjo1NlrOH2zX6w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzIyNjg1OQ==", "bodyText": "We should add tests for all numBits and all possible docID ranges to ensure the new APIs are correctly decoding (and there is no possibility of segfault)", "url": "https://github.com/apache/pinot/pull/6262#discussion_r527226859", "createdAt": "2020-11-19T21:52:56Z", "author": {"login": "siddharthteotia"}, "path": "pinot-core/src/test/java/org/apache/pinot/core/segment/index/readers/forward/FixedBitSVForwardIndexReaderV2Test.java", "diffHunk": "@@ -0,0 +1,111 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.core.segment.index.readers.forward;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.Random;\n+import org.apache.commons.io.FileUtils;\n+import org.apache.pinot.core.io.writer.impl.FixedBitSVForwardIndexWriter;\n+import org.apache.pinot.core.plan.DocIdSetPlanNode;\n+import org.apache.pinot.core.segment.memory.PinotDataBuffer;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Test;\n+\n+import static org.testng.Assert.assertEquals;\n+\n+\n+public class FixedBitSVForwardIndexReaderV2Test {\n+  private static final File INDEX_DIR = new File(FileUtils.getTempDirectory(), \"FixedBitIntReaderTest\");\n+  private static final int NUM_VALUES = 99_999;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2553e72eece292795905fa221685bed6bef8ea11"}, "originalPosition": 37}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e15827b95036d7bbded59fdc70f83a272717086c", "author": {"user": {"login": "Jackie-Jiang", "name": "Xiaotian (Jackie) Jiang"}}, "url": "https://github.com/apache/pinot/commit/e15827b95036d7bbded59fdc70f83a272717086c", "committedDate": "2020-11-20T21:15:49Z", "message": "Enhance forward index reader for better performance"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "2553e72eece292795905fa221685bed6bef8ea11", "author": {"user": {"login": "Jackie-Jiang", "name": "Xiaotian (Jackie) Jiang"}}, "url": "https://github.com/apache/pinot/commit/2553e72eece292795905fa221685bed6bef8ea11", "committedDate": "2020-11-17T21:28:28Z", "message": "Address comments"}, "afterCommit": {"oid": "e15827b95036d7bbded59fdc70f83a272717086c", "author": {"user": {"login": "Jackie-Jiang", "name": "Xiaotian (Jackie) Jiang"}}, "url": "https://github.com/apache/pinot/commit/e15827b95036d7bbded59fdc70f83a272717086c", "committedDate": "2020-11-20T21:15:49Z", "message": "Enhance forward index reader for better performance"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM1OTUwMDg2", "url": "https://github.com/apache/pinot/pull/6262#pullrequestreview-535950086", "createdAt": "2020-11-21T08:22:18Z", "commit": {"oid": "e15827b95036d7bbded59fdc70f83a272717086c"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1791, "cost": 1, "resetAt": "2021-10-28T18:00:02Z"}}}