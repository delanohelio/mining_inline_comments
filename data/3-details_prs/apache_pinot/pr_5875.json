{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY4NTkxODI4", "number": 5875, "title": "Config recommender patch", "bodyText": "Fixed a few typos in the recommender\nAdded default values to avoid recommender accessing null values\nReduced the time complexity for index recommendation", "createdAt": "2020-08-17T05:35:24Z", "url": "https://github.com/apache/pinot/pull/5875", "merged": true, "mergeCommit": {"oid": "e7e9775bddedf650d1ff197506d43089aa5d4f53"}, "closed": true, "closedAt": "2020-08-21T21:00:38Z", "author": {"login": "jasperjiaguo"}, "timelineItems": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdAhBzGAFqTQ3MDc4NDAyNA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdBLSHRAFqTQ3MjgxNjUxMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDcwNzg0MDI0", "url": "https://github.com/apache/pinot/pull/5875#pullrequestreview-470784024", "createdAt": "2020-08-19T19:41:27Z", "commit": {"oid": "dc4e5fc19059f1f50ed6eca312dfe7599b6255ef"}, "state": "APPROVED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxOTo0MToyN1rOHDWbiA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxOTo0NDo0OVrOHDWh-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzI3NTI3Mg==", "bodyText": "Maybe we should remove this comments?", "url": "https://github.com/apache/pinot/pull/5875#discussion_r473275272", "createdAt": "2020-08-19T19:41:27Z", "author": {"login": "jackjlli"}, "path": "pinot-controller/src/main/java/org/apache/pinot/controller/recommender/rules/impl/InvertedSortedIndexJointRule.java", "diffHunk": "@@ -197,28 +194,48 @@ public PredicateParseResult findOptimalCombination(List<List<PredicateParseResul\n    * {@link PredicateParseResult#getnESI()} the nESI before applying any index\n    * {@link PredicateParseResult#getnESIWithIdx()} the estimated nESI after applying optimal indices\n    */\n-  public PredicateParseResult evaluateCombination(int n, int r, List<List<PredicateParseResult>> parsedQuery) {\n-    List<int[]> combinationIntArrays = generateCombinations(n, r);\n-    LOGGER.debug(\"combinationIntArrays {}\", combinationIntArrays);\n+  public PredicateParseResult evaluateCombination(final int n, final int r, List<List<PredicateParseResult>> parsedQuery) {\n+    FixedLenBitset usedCols = new FixedLenBitset(n);\n+    parsedQuery.forEach(list -> list.stream()\n+        .filter(predicateParseResult -> (predicateParseResult.getCandidateDims().getCardinality() <= r))\n+        .forEach(predicateParseResult -> usedCols.union(predicateParseResult.getCandidateDims())));\n+    LOGGER.debug(\"totalUsed {}\", usedCols.getCardinality());\n+\n+    List<Integer> usedColIDs = usedCols.getOffsets();\n+    int nCapped = usedColIDs.size();\n+    int rCapped = Math.min(r, nCapped);\n+\n+    int[] idToColID = new int[nCapped];\n+    for (int i = 0; i < nCapped; i++) {\n+      idToColID[i] = usedColIDs.get(i);\n+    }\n+\n \n     // Enumerate all possible combinations of r-sized set, which will be applied indices on\n-    List<FixedLenBitset> combinations = combinationIntArrays.parallelStream().map(combinationIntArray -> {\n-      FixedLenBitset indices = new FixedLenBitset(n);\n-      for (int j = 0; j < r; j++) {\n-        indices.add(combinationIntArray[j]);\n-      }\n-      return indices;\n-    }).collect(Collectors.toList());\n+    List<int[]> combinationIntArrays = generateCombinations(nCapped, rCapped);\n+\n+//     Enumerate all possible combinations of r-sized set, which will be applied indices on\n+//    List<FixedLenBitset> combinations = combinationIntArrays.parallelStream().map(combinationIntArray -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dc4e5fc19059f1f50ed6eca312dfe7599b6255ef"}, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzI3NjU1OA==", "bodyText": "Can we add the link of this class to the doc so that we know this is the default values?", "url": "https://github.com/apache/pinot/pull/5875#discussion_r473276558", "createdAt": "2020-08-19T19:44:06Z", "author": {"login": "jackjlli"}, "path": "pinot-controller/src/main/java/org/apache/pinot/controller/recommender/rules/io/params/RecommenderConstants.java", "diffHunk": "@@ -32,7 +32,7 @@\n     public static final double DEFAULT_THRESHOLD_MIN_AND_PREDICATE_INCREMENTAL_VOTE = 0.6d;\n     public static final double DEFAULT_THRESHOLD_RATIO_MIN_AND_PREDICATE_TOP_CANDIDATES = 0.8d;\n     public static final double DEFAULT_THRESHOLD_RATIO_MIN_GAIN_DIFF_BETWEEN_ITERATION = 0.05d;\n-    public static final int DEFAULT_MAX_NUM_ITERATION_WITHOUT_GAIN = 3;\n+    public static final int DEFAULT_MAX_NUM_ITERATION_WITHOUT_GAIN = 2;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dc4e5fc19059f1f50ed6eca312dfe7599b6255ef"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzI3NjkyMA==", "bodyText": "should put a space between ) and {", "url": "https://github.com/apache/pinot/pull/5875#discussion_r473276920", "createdAt": "2020-08-19T19:44:49Z", "author": {"login": "jackjlli"}, "path": "pinot-controller/src/main/java/org/apache/pinot/controller/recommender/rules/utils/QueryInvertedSortedIndexRecommender.java", "diffHunk": "@@ -585,7 +573,9 @@ else if (type == Predicate.Type.IN || type == Predicate.Type.NOT_IN) {\n \n       boolean isFirst = false;\n       List<String> values = (type == Predicate.Type.IN)?((InPredicate) predicate).getValues():((NotInPredicate) predicate).getValues();\n-      if (values.get(RecommenderConstants.FIRST).equals(RecommenderConstants.IN_PREDICATE_ESTIMATE_LEN_FLAG) ||\n+      if(values.size()==1){", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dc4e5fc19059f1f50ed6eca312dfe7599b6255ef"}, "originalPosition": 48}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "61874c0364a69b87cffadebc485e515ad031c808", "author": {"user": {"login": "jasperjiaguo", "name": "Jia Guo"}}, "url": "https://github.com/apache/pinot/commit/61874c0364a69b87cffadebc485e515ad031c808", "committedDate": "2020-08-21T00:16:52Z", "message": "Refactored code for overwritten configs\n\nfixed typos\n\nfixed naming mismatch\n\nFixed a issue where the engine may crash if empty query patterns are provided. Added test case for that.\n\nAddressed comments in PR\n\nrefactored code\n\nsonly recommend inverted indices if sorted index presents in the overwritten config\n\nreduced time complexity for combination generation\n\nreduced time complexity for combination generation\n\n1. fixed a bug that the engine will crash when parsing X NOT IN ('x')\n2. now the code will not complain even if no time spec appears in the schema\n\nfix typo in names\n\nreduced time complexity for combination generation\n\nreduced time complexity for combination generation\n\nreduced time complexity for combination generation"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ee8d0395855be5dee1eb5f59d9a6ee8b861a3240", "author": {"user": {"login": "jasperjiaguo", "name": "Jia Guo"}}, "url": "https://github.com/apache/pinot/commit/ee8d0395855be5dee1eb5f59d9a6ee8b861a3240", "committedDate": "2020-08-20T07:17:01Z", "message": "Refactored code for overwritten configs"}, "afterCommit": {"oid": "61874c0364a69b87cffadebc485e515ad031c808", "author": {"user": {"login": "jasperjiaguo", "name": "Jia Guo"}}, "url": "https://github.com/apache/pinot/commit/61874c0364a69b87cffadebc485e515ad031c808", "committedDate": "2020-08-21T00:16:52Z", "message": "Refactored code for overwritten configs\n\nfixed typos\n\nfixed naming mismatch\n\nFixed a issue where the engine may crash if empty query patterns are provided. Added test case for that.\n\nAddressed comments in PR\n\nrefactored code\n\nsonly recommend inverted indices if sorted index presents in the overwritten config\n\nreduced time complexity for combination generation\n\nreduced time complexity for combination generation\n\n1. fixed a bug that the engine will crash when parsing X NOT IN ('x')\n2. now the code will not complain even if no time spec appears in the schema\n\nfix typo in names\n\nreduced time complexity for combination generation\n\nreduced time complexity for combination generation\n\nreduced time complexity for combination generation"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDcyODE2NTEy", "url": "https://github.com/apache/pinot/pull/5875#pullrequestreview-472816512", "createdAt": "2020-08-21T20:59:54Z", "commit": {"oid": "61874c0364a69b87cffadebc485e515ad031c808"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 219, "cost": 1, "resetAt": "2021-10-28T18:00:02Z"}}}