{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk3OTM4Nzkx", "number": 6105, "reviewThreads": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxNjo0NzozM1rOEqZo4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMFQwMjoxOTo0M1rOEsPRyg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyODk1NzE0OnYy", "diffSide": "RIGHT", "path": "pinot-common/src/main/java/org/apache/pinot/common/function/FunctionUtils.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxNjo0NzozM1rOHcldOA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQyMDowNTo1NVrOHfXKkw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTczNTg2NA==", "bodyText": "Also, add non-primitive data types e.g. Integer[], Long[]", "url": "https://github.com/apache/pinot/pull/6105#discussion_r499735864", "createdAt": "2020-10-05T16:47:33Z", "author": {"login": "KKcorps"}, "path": "pinot-common/src/main/java/org/apache/pinot/common/function/FunctionUtils.java", "diffHunk": "@@ -42,6 +42,11 @@ private FunctionUtils() {\n     put(Double.class, PinotDataType.DOUBLE);\n     put(String.class, PinotDataType.STRING);\n     put(byte[].class, PinotDataType.BYTES);\n+    put(int[].class, PinotDataType.INTEGER_ARRAY);\n+    put(String[].class, PinotDataType.STRING_ARRAY);\n+    put(long[].class, PinotDataType.LONG_ARRAY);\n+    put(float[].class, PinotDataType.FLOAT_ARRAY);\n+    put(double[].class, PinotDataType.DOUBLE_ARRAY);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "83ecfb2fd5d3ef03228afadbcf3a9a76b9cd20d4"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjY0NzQ0Mw==", "bodyText": "noon-primitive data types been added", "url": "https://github.com/apache/pinot/pull/6105#discussion_r502647443", "createdAt": "2020-10-09T20:05:55Z", "author": {"login": "SandishKumarHN"}, "path": "pinot-common/src/main/java/org/apache/pinot/common/function/FunctionUtils.java", "diffHunk": "@@ -42,6 +42,11 @@ private FunctionUtils() {\n     put(Double.class, PinotDataType.DOUBLE);\n     put(String.class, PinotDataType.STRING);\n     put(byte[].class, PinotDataType.BYTES);\n+    put(int[].class, PinotDataType.INTEGER_ARRAY);\n+    put(String[].class, PinotDataType.STRING_ARRAY);\n+    put(long[].class, PinotDataType.LONG_ARRAY);\n+    put(float[].class, PinotDataType.FLOAT_ARRAY);\n+    put(double[].class, PinotDataType.DOUBLE_ARRAY);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTczNTg2NA=="}, "originalCommit": {"oid": "83ecfb2fd5d3ef03228afadbcf3a9a76b9cd20d4"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyODk2NTg0OnYy", "diffSide": "RIGHT", "path": "pinot-common/src/main/java/org/apache/pinot/common/function/scalar/ArrayFunctions.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxNjo0OTo1N1rOHclirg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxNjo0OTo1N1rOHclirg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTczNzI2Mg==", "bodyText": "Can we keep function names to match the https://prestodb.io/docs/current/functions/array.html\nAlso, please add any other possible functions from the link.", "url": "https://github.com/apache/pinot/pull/6105#discussion_r499737262", "createdAt": "2020-10-05T16:49:57Z", "author": {"login": "KKcorps"}, "path": "pinot-common/src/main/java/org/apache/pinot/common/function/scalar/ArrayFunctions.java", "diffHunk": "@@ -0,0 +1,133 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.common.function.scalar;\n+\n+import java.util.Arrays;\n+import org.apache.commons.lang3.ArrayUtils;\n+import org.apache.pinot.spi.annotations.ScalarFunction;\n+\n+/**\n+ * Inbuilt Array Transformation Functions\n+ * The functions can be used as UDFs in Query when added in the FunctionRegistry.\n+ * @ScalarFunction annotation is used with each method for the registration\n+ *\n+ * Example usage:\n+ * <code> SELECT reverseArray(array) FROM baseballStats LIMIT 10 </code>\n+ */\n+public class ArrayFunctions {\n+  private ArrayFunctions() {\n+\n+  }\n+\n+  /**\n+   * @see ArrayUtils#reverse(Object[])\n+   * @param value\n+   * @return reversed input array in from end to start\n+   */\n+  @ScalarFunction\n+  public static int[] reverseIntArray(int[] value) {\n+      ArrayUtils.reverse(value);\n+      return value;\n+  }\n+\n+  /**\n+   * @see ArrayUtils#reverse(Object[])\n+   * @param value\n+   * @return reversed input array in from end to start\n+   */\n+  @ScalarFunction\n+  public static String[] reverseStringArray(String[] value) {\n+    ArrayUtils.reverse(value);\n+    return value;\n+  }\n+\n+  /**\n+   * @see Arrays#stream(double[]).max()\n+   * @param value\n+   * @return find minimum value in input array\n+   */\n+  @ScalarFunction\n+  public static int[] arrayMax(int[] value) {\n+    return new int[] {Arrays.stream(value).max().getAsInt()};\n+  }\n+\n+  /**\n+   * @see Arrays#stream(double[]).min()\n+   * @param value\n+   * @return find maximum value in input array\n+   */\n+  @ScalarFunction\n+  public static int[] arrayMin(int[] value) {\n+    return new int[] {Arrays.stream(value).min().getAsInt()};\n+  }\n+\n+  /**\n+   * @see Arrays#stream(double[]).sum()\n+   * @param value\n+   * @return calculate sum of all values in input array\n+   */\n+  @ScalarFunction\n+  public static int[] arraySum(int[] value) {\n+    return new int[] {Arrays.stream(value).sum()};\n+  }\n+\n+  /**\n+   * @see ArrayUtils#indexOf(double[], double)\n+   * @param value\n+   * @param valueToFind\n+   * @return return position of value in input array\n+   */\n+  @ScalarFunction\n+  public static int[] arrayPosition(int[] value, int valueToFind) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "83ecfb2fd5d3ef03228afadbcf3a9a76b9cd20d4"}, "originalPosition": 97}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyOTQ5Mjc5OnYy", "diffSide": "RIGHT", "path": "pinot-common/src/main/java/org/apache/pinot/common/function/scalar/ArrayFunctions.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxOToyNzozMlrOHcqtKQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QxNToyNDoxNVrOHd44Rg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTgyMTg2NQ==", "bodyText": "for every function that we want to add, we'll have to always write fooLong, fooInt, fooDouble, fooFloat, fooString. In the presto-pinot connector we'll have to do additional mapping. Is there no way around that?", "url": "https://github.com/apache/pinot/pull/6105#discussion_r499821865", "createdAt": "2020-10-05T19:27:32Z", "author": {"login": "npawar"}, "path": "pinot-common/src/main/java/org/apache/pinot/common/function/scalar/ArrayFunctions.java", "diffHunk": "@@ -0,0 +1,133 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.common.function.scalar;\n+\n+import java.util.Arrays;\n+import org.apache.commons.lang3.ArrayUtils;\n+import org.apache.pinot.spi.annotations.ScalarFunction;\n+\n+/**\n+ * Inbuilt Array Transformation Functions\n+ * The functions can be used as UDFs in Query when added in the FunctionRegistry.\n+ * @ScalarFunction annotation is used with each method for the registration\n+ *\n+ * Example usage:\n+ * <code> SELECT reverseArray(array) FROM baseballStats LIMIT 10 </code>\n+ */\n+public class ArrayFunctions {\n+  private ArrayFunctions() {\n+\n+  }\n+\n+  /**\n+   * @see ArrayUtils#reverse(Object[])\n+   * @param value\n+   * @return reversed input array in from end to start\n+   */\n+  @ScalarFunction\n+  public static int[] reverseIntArray(int[] value) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "83ecfb2fd5d3ef03228afadbcf3a9a76b9cd20d4"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDIwMDE0Nw==", "bodyText": "@npawar I was going through the string, json, and date scalar functions. I don't see a way to make it generic function for all types. @KKcorps can you please comment.", "url": "https://github.com/apache/pinot/pull/6105#discussion_r500200147", "createdAt": "2020-10-06T11:27:29Z", "author": {"login": "SandishKumarHN"}, "path": "pinot-common/src/main/java/org/apache/pinot/common/function/scalar/ArrayFunctions.java", "diffHunk": "@@ -0,0 +1,133 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.common.function.scalar;\n+\n+import java.util.Arrays;\n+import org.apache.commons.lang3.ArrayUtils;\n+import org.apache.pinot.spi.annotations.ScalarFunction;\n+\n+/**\n+ * Inbuilt Array Transformation Functions\n+ * The functions can be used as UDFs in Query when added in the FunctionRegistry.\n+ * @ScalarFunction annotation is used with each method for the registration\n+ *\n+ * Example usage:\n+ * <code> SELECT reverseArray(array) FROM baseballStats LIMIT 10 </code>\n+ */\n+public class ArrayFunctions {\n+  private ArrayFunctions() {\n+\n+  }\n+\n+  /**\n+   * @see ArrayUtils#reverse(Object[])\n+   * @param value\n+   * @return reversed input array in from end to start\n+   */\n+  @ScalarFunction\n+  public static int[] reverseIntArray(int[] value) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTgyMTg2NQ=="}, "originalCommit": {"oid": "83ecfb2fd5d3ef03228afadbcf3a9a76b9cd20d4"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTEwMjY2Mg==", "bodyText": "Yes, currently that's not possible. We can resolve this in another PR.", "url": "https://github.com/apache/pinot/pull/6105#discussion_r501102662", "createdAt": "2020-10-07T15:24:15Z", "author": {"login": "KKcorps"}, "path": "pinot-common/src/main/java/org/apache/pinot/common/function/scalar/ArrayFunctions.java", "diffHunk": "@@ -0,0 +1,133 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.common.function.scalar;\n+\n+import java.util.Arrays;\n+import org.apache.commons.lang3.ArrayUtils;\n+import org.apache.pinot.spi.annotations.ScalarFunction;\n+\n+/**\n+ * Inbuilt Array Transformation Functions\n+ * The functions can be used as UDFs in Query when added in the FunctionRegistry.\n+ * @ScalarFunction annotation is used with each method for the registration\n+ *\n+ * Example usage:\n+ * <code> SELECT reverseArray(array) FROM baseballStats LIMIT 10 </code>\n+ */\n+public class ArrayFunctions {\n+  private ArrayFunctions() {\n+\n+  }\n+\n+  /**\n+   * @see ArrayUtils#reverse(Object[])\n+   * @param value\n+   * @return reversed input array in from end to start\n+   */\n+  @ScalarFunction\n+  public static int[] reverseIntArray(int[] value) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTgyMTg2NQ=="}, "originalCommit": {"oid": "83ecfb2fd5d3ef03228afadbcf3a9a76b9cd20d4"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzMDA0NTQ4OnYy", "diffSide": "RIGHT", "path": "pinot-common/src/main/java/org/apache/pinot/common/function/FunctionUtils.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQyMjozNToyOFrOHcwBmQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQyMDowODoxMFrOHfXOSg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTkwOTAxNw==", "bodyText": "Why do you need int here? The argument should always be Object", "url": "https://github.com/apache/pinot/pull/6105#discussion_r499909017", "createdAt": "2020-10-05T22:35:28Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-common/src/main/java/org/apache/pinot/common/function/FunctionUtils.java", "diffHunk": "@@ -56,6 +61,12 @@ private FunctionUtils() {\n     put(Double.class, PinotDataType.DOUBLE);\n     put(String.class, PinotDataType.STRING);\n     put(byte[].class, PinotDataType.BYTES);\n+    put(int[].class, PinotDataType.INTEGER_ARRAY);\n+    put(int.class, PinotDataType.INTEGER);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "83ecfb2fd5d3ef03228afadbcf3a9a76b9cd20d4"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjY0ODM5NA==", "bodyText": "int was not added for SV, so added int.", "url": "https://github.com/apache/pinot/pull/6105#discussion_r502648394", "createdAt": "2020-10-09T20:08:10Z", "author": {"login": "SandishKumarHN"}, "path": "pinot-common/src/main/java/org/apache/pinot/common/function/FunctionUtils.java", "diffHunk": "@@ -56,6 +61,12 @@ private FunctionUtils() {\n     put(Double.class, PinotDataType.DOUBLE);\n     put(String.class, PinotDataType.STRING);\n     put(byte[].class, PinotDataType.BYTES);\n+    put(int[].class, PinotDataType.INTEGER_ARRAY);\n+    put(int.class, PinotDataType.INTEGER);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTkwOTAxNw=="}, "originalCommit": {"oid": "83ecfb2fd5d3ef03228afadbcf3a9a76b9cd20d4"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzMDA0NzI4OnYy", "diffSide": "RIGHT", "path": "pinot-common/src/main/java/org/apache/pinot/common/function/FunctionUtils.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQyMjozNjoyMlrOHcwCtA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQyMDowNToyOFrOHfXJyw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTkwOTMwMA==", "bodyText": "Can we keep the same order as the SV ones (int, long, float, double, string), same for other places", "url": "https://github.com/apache/pinot/pull/6105#discussion_r499909300", "createdAt": "2020-10-05T22:36:22Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-common/src/main/java/org/apache/pinot/common/function/FunctionUtils.java", "diffHunk": "@@ -42,6 +42,11 @@ private FunctionUtils() {\n     put(Double.class, PinotDataType.DOUBLE);\n     put(String.class, PinotDataType.STRING);\n     put(byte[].class, PinotDataType.BYTES);\n+    put(int[].class, PinotDataType.INTEGER_ARRAY);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "83ecfb2fd5d3ef03228afadbcf3a9a76b9cd20d4"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjY0NzI0Mw==", "bodyText": "I have made the order same as SV(int, long, float, double, string)", "url": "https://github.com/apache/pinot/pull/6105#discussion_r502647243", "createdAt": "2020-10-09T20:05:28Z", "author": {"login": "SandishKumarHN"}, "path": "pinot-common/src/main/java/org/apache/pinot/common/function/FunctionUtils.java", "diffHunk": "@@ -42,6 +42,11 @@ private FunctionUtils() {\n     put(Double.class, PinotDataType.DOUBLE);\n     put(String.class, PinotDataType.STRING);\n     put(byte[].class, PinotDataType.BYTES);\n+    put(int[].class, PinotDataType.INTEGER_ARRAY);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTkwOTMwMA=="}, "originalCommit": {"oid": "83ecfb2fd5d3ef03228afadbcf3a9a76b9cd20d4"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzMDA1NjQxOnYy", "diffSide": "RIGHT", "path": "pinot-common/src/main/java/org/apache/pinot/common/function/FunctionUtils.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQyMjo0MDozMFrOHcwIIw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQyMDowNzozOFrOHfXNbw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTkxMDY5MQ==", "bodyText": "Don't add boolean here as DataType.BOOLEAN is not a valid internal DataType (we use STRING to represent boolean). All the unrecognized types will be handled as STRING", "url": "https://github.com/apache/pinot/pull/6105#discussion_r499910691", "createdAt": "2020-10-05T22:40:30Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-common/src/main/java/org/apache/pinot/common/function/FunctionUtils.java", "diffHunk": "@@ -69,6 +80,12 @@ private FunctionUtils() {\n     put(Double.class, DataType.DOUBLE);\n     put(String.class, DataType.STRING);\n     put(byte[].class, DataType.BYTES);\n+    put(int[].class, DataType.INT);\n+    put(String[].class, DataType.STRING);\n+    put(long[].class, DataType.LONG);\n+    put(float[].class, DataType.FLOAT);\n+    put(double[].class, DataType.DOUBLE);\n+    put(boolean.class, DataType.BOOLEAN);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "83ecfb2fd5d3ef03228afadbcf3a9a76b9cd20d4"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjY0ODE3NQ==", "bodyText": "boolean been removed", "url": "https://github.com/apache/pinot/pull/6105#discussion_r502648175", "createdAt": "2020-10-09T20:07:38Z", "author": {"login": "SandishKumarHN"}, "path": "pinot-common/src/main/java/org/apache/pinot/common/function/FunctionUtils.java", "diffHunk": "@@ -69,6 +80,12 @@ private FunctionUtils() {\n     put(Double.class, DataType.DOUBLE);\n     put(String.class, DataType.STRING);\n     put(byte[].class, DataType.BYTES);\n+    put(int[].class, DataType.INT);\n+    put(String[].class, DataType.STRING);\n+    put(long[].class, DataType.LONG);\n+    put(float[].class, DataType.FLOAT);\n+    put(double[].class, DataType.DOUBLE);\n+    put(boolean.class, DataType.BOOLEAN);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTkxMDY5MQ=="}, "originalCommit": {"oid": "83ecfb2fd5d3ef03228afadbcf3a9a76b9cd20d4"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzNzc4NTg1OnYy", "diffSide": "RIGHT", "path": "pinot-common/src/main/java/org/apache/pinot/common/function/scalar/ArrayFunctions.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QxNTo0NTowNVrOHd51TA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QxNjozMjozOFrOHd74Ug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTExODI4NA==", "bodyText": "why are most of these returning multi value int[] instead of just int? arraySum, arrayMax, arrayMin, arrayPosition and arrayContains", "url": "https://github.com/apache/pinot/pull/6105#discussion_r501118284", "createdAt": "2020-10-07T15:45:05Z", "author": {"login": "npawar"}, "path": "pinot-common/src/main/java/org/apache/pinot/common/function/scalar/ArrayFunctions.java", "diffHunk": "@@ -0,0 +1,133 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.common.function.scalar;\n+\n+import java.util.Arrays;\n+import org.apache.commons.lang3.ArrayUtils;\n+import org.apache.pinot.spi.annotations.ScalarFunction;\n+\n+/**\n+ * Inbuilt Array Transformation Functions\n+ * The functions can be used as UDFs in Query when added in the FunctionRegistry.\n+ * @ScalarFunction annotation is used with each method for the registration\n+ *\n+ * Example usage:\n+ * <code> SELECT reverseArray(array) FROM baseballStats LIMIT 10 </code>\n+ */\n+public class ArrayFunctions {\n+  private ArrayFunctions() {\n+\n+  }\n+\n+  /**\n+   * @see ArrayUtils#reverse(Object[])\n+   * @param value\n+   * @return reversed input array in from end to start\n+   */\n+  @ScalarFunction(name = \"array_reverse_int\")\n+  public static int[] arrayReverseInt(int[] value) {\n+      ArrayUtils.reverse(value);\n+      return value;\n+  }\n+\n+  /**\n+   * @see ArrayUtils#reverse(Object[])\n+   * @param value\n+   * @return reversed input array in from end to start\n+   */\n+  @ScalarFunction(name = \"array_reverse_string\")\n+  public static String[] arrayReverseString(String[] value) {\n+    ArrayUtils.reverse(value);\n+    return value;\n+  }\n+\n+  /**\n+   * @see Arrays#stream(double[]).max()\n+   * @param value\n+   * @return find minimum value in input array\n+   */\n+  @ScalarFunction(name = \"array_max\")\n+  public static int[] arrayMax(int[] value) {\n+    return new int[] {Arrays.stream(value).max().getAsInt()};\n+  }\n+\n+  /**\n+   * @see Arrays#stream(double[]).min()\n+   * @param value\n+   * @return find maximum value in input array\n+   */\n+  @ScalarFunction(name = \"array_min\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f79ff777cfda6f68c329c052529af29cd7cedec"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTE0MDg1Ng==", "bodyText": "as the input param column is a multivalued column and returning the same. should we keep it int??", "url": "https://github.com/apache/pinot/pull/6105#discussion_r501140856", "createdAt": "2020-10-07T16:16:29Z", "author": {"login": "SandishKumarHN"}, "path": "pinot-common/src/main/java/org/apache/pinot/common/function/scalar/ArrayFunctions.java", "diffHunk": "@@ -0,0 +1,133 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.common.function.scalar;\n+\n+import java.util.Arrays;\n+import org.apache.commons.lang3.ArrayUtils;\n+import org.apache.pinot.spi.annotations.ScalarFunction;\n+\n+/**\n+ * Inbuilt Array Transformation Functions\n+ * The functions can be used as UDFs in Query when added in the FunctionRegistry.\n+ * @ScalarFunction annotation is used with each method for the registration\n+ *\n+ * Example usage:\n+ * <code> SELECT reverseArray(array) FROM baseballStats LIMIT 10 </code>\n+ */\n+public class ArrayFunctions {\n+  private ArrayFunctions() {\n+\n+  }\n+\n+  /**\n+   * @see ArrayUtils#reverse(Object[])\n+   * @param value\n+   * @return reversed input array in from end to start\n+   */\n+  @ScalarFunction(name = \"array_reverse_int\")\n+  public static int[] arrayReverseInt(int[] value) {\n+      ArrayUtils.reverse(value);\n+      return value;\n+  }\n+\n+  /**\n+   * @see ArrayUtils#reverse(Object[])\n+   * @param value\n+   * @return reversed input array in from end to start\n+   */\n+  @ScalarFunction(name = \"array_reverse_string\")\n+  public static String[] arrayReverseString(String[] value) {\n+    ArrayUtils.reverse(value);\n+    return value;\n+  }\n+\n+  /**\n+   * @see Arrays#stream(double[]).max()\n+   * @param value\n+   * @return find minimum value in input array\n+   */\n+  @ScalarFunction(name = \"array_max\")\n+  public static int[] arrayMax(int[] value) {\n+    return new int[] {Arrays.stream(value).max().getAsInt()};\n+  }\n+\n+  /**\n+   * @see Arrays#stream(double[]).min()\n+   * @param value\n+   * @return find maximum value in input array\n+   */\n+  @ScalarFunction(name = \"array_min\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTExODI4NA=="}, "originalCommit": {"oid": "8f79ff777cfda6f68c329c052529af29cd7cedec"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTE1MTgyNg==", "bodyText": "Yes, lets return a single value. It is not intuitive to expect MV in these functions. Users might run into undesirable behaviors when nesting functions", "url": "https://github.com/apache/pinot/pull/6105#discussion_r501151826", "createdAt": "2020-10-07T16:32:38Z", "author": {"login": "npawar"}, "path": "pinot-common/src/main/java/org/apache/pinot/common/function/scalar/ArrayFunctions.java", "diffHunk": "@@ -0,0 +1,133 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.common.function.scalar;\n+\n+import java.util.Arrays;\n+import org.apache.commons.lang3.ArrayUtils;\n+import org.apache.pinot.spi.annotations.ScalarFunction;\n+\n+/**\n+ * Inbuilt Array Transformation Functions\n+ * The functions can be used as UDFs in Query when added in the FunctionRegistry.\n+ * @ScalarFunction annotation is used with each method for the registration\n+ *\n+ * Example usage:\n+ * <code> SELECT reverseArray(array) FROM baseballStats LIMIT 10 </code>\n+ */\n+public class ArrayFunctions {\n+  private ArrayFunctions() {\n+\n+  }\n+\n+  /**\n+   * @see ArrayUtils#reverse(Object[])\n+   * @param value\n+   * @return reversed input array in from end to start\n+   */\n+  @ScalarFunction(name = \"array_reverse_int\")\n+  public static int[] arrayReverseInt(int[] value) {\n+      ArrayUtils.reverse(value);\n+      return value;\n+  }\n+\n+  /**\n+   * @see ArrayUtils#reverse(Object[])\n+   * @param value\n+   * @return reversed input array in from end to start\n+   */\n+  @ScalarFunction(name = \"array_reverse_string\")\n+  public static String[] arrayReverseString(String[] value) {\n+    ArrayUtils.reverse(value);\n+    return value;\n+  }\n+\n+  /**\n+   * @see Arrays#stream(double[]).max()\n+   * @param value\n+   * @return find minimum value in input array\n+   */\n+  @ScalarFunction(name = \"array_max\")\n+  public static int[] arrayMax(int[] value) {\n+    return new int[] {Arrays.stream(value).max().getAsInt()};\n+  }\n+\n+  /**\n+   * @see Arrays#stream(double[]).min()\n+   * @param value\n+   * @return find maximum value in input array\n+   */\n+  @ScalarFunction(name = \"array_min\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTExODI4NA=="}, "originalCommit": {"oid": "8f79ff777cfda6f68c329c052529af29cd7cedec"}, "originalPosition": 75}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzNzc5MzUxOnYy", "diffSide": "RIGHT", "path": "pinot-common/src/main/java/org/apache/pinot/common/function/scalar/ArrayFunctions.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QxNTo0NjozN1rOHd55xw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QxNjoxNjo1N1rOHd7Oqw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTExOTQzMQ==", "bodyText": "if these are only going to work for int[], should these be called array_max_int ?", "url": "https://github.com/apache/pinot/pull/6105#discussion_r501119431", "createdAt": "2020-10-07T15:46:37Z", "author": {"login": "npawar"}, "path": "pinot-common/src/main/java/org/apache/pinot/common/function/scalar/ArrayFunctions.java", "diffHunk": "@@ -0,0 +1,133 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.common.function.scalar;\n+\n+import java.util.Arrays;\n+import org.apache.commons.lang3.ArrayUtils;\n+import org.apache.pinot.spi.annotations.ScalarFunction;\n+\n+/**\n+ * Inbuilt Array Transformation Functions\n+ * The functions can be used as UDFs in Query when added in the FunctionRegistry.\n+ * @ScalarFunction annotation is used with each method for the registration\n+ *\n+ * Example usage:\n+ * <code> SELECT reverseArray(array) FROM baseballStats LIMIT 10 </code>\n+ */\n+public class ArrayFunctions {\n+  private ArrayFunctions() {\n+\n+  }\n+\n+  /**\n+   * @see ArrayUtils#reverse(Object[])\n+   * @param value\n+   * @return reversed input array in from end to start\n+   */\n+  @ScalarFunction(name = \"array_reverse_int\")\n+  public static int[] arrayReverseInt(int[] value) {\n+      ArrayUtils.reverse(value);\n+      return value;\n+  }\n+\n+  /**\n+   * @see ArrayUtils#reverse(Object[])\n+   * @param value\n+   * @return reversed input array in from end to start\n+   */\n+  @ScalarFunction(name = \"array_reverse_string\")\n+  public static String[] arrayReverseString(String[] value) {\n+    ArrayUtils.reverse(value);\n+    return value;\n+  }\n+\n+  /**\n+   * @see Arrays#stream(double[]).max()\n+   * @param value\n+   * @return find minimum value in input array\n+   */\n+  @ScalarFunction(name = \"array_max\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f79ff777cfda6f68c329c052529af29cd7cedec"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTE0MTE2Mw==", "bodyText": "yeah, we could do that.", "url": "https://github.com/apache/pinot/pull/6105#discussion_r501141163", "createdAt": "2020-10-07T16:16:57Z", "author": {"login": "SandishKumarHN"}, "path": "pinot-common/src/main/java/org/apache/pinot/common/function/scalar/ArrayFunctions.java", "diffHunk": "@@ -0,0 +1,133 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.common.function.scalar;\n+\n+import java.util.Arrays;\n+import org.apache.commons.lang3.ArrayUtils;\n+import org.apache.pinot.spi.annotations.ScalarFunction;\n+\n+/**\n+ * Inbuilt Array Transformation Functions\n+ * The functions can be used as UDFs in Query when added in the FunctionRegistry.\n+ * @ScalarFunction annotation is used with each method for the registration\n+ *\n+ * Example usage:\n+ * <code> SELECT reverseArray(array) FROM baseballStats LIMIT 10 </code>\n+ */\n+public class ArrayFunctions {\n+  private ArrayFunctions() {\n+\n+  }\n+\n+  /**\n+   * @see ArrayUtils#reverse(Object[])\n+   * @param value\n+   * @return reversed input array in from end to start\n+   */\n+  @ScalarFunction(name = \"array_reverse_int\")\n+  public static int[] arrayReverseInt(int[] value) {\n+      ArrayUtils.reverse(value);\n+      return value;\n+  }\n+\n+  /**\n+   * @see ArrayUtils#reverse(Object[])\n+   * @param value\n+   * @return reversed input array in from end to start\n+   */\n+  @ScalarFunction(name = \"array_reverse_string\")\n+  public static String[] arrayReverseString(String[] value) {\n+    ArrayUtils.reverse(value);\n+    return value;\n+  }\n+\n+  /**\n+   * @see Arrays#stream(double[]).max()\n+   * @param value\n+   * @return find minimum value in input array\n+   */\n+  @ScalarFunction(name = \"array_max\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTExOTQzMQ=="}, "originalCommit": {"oid": "8f79ff777cfda6f68c329c052529af29cd7cedec"}, "originalPosition": 65}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzNzg1ODU1OnYy", "diffSide": "RIGHT", "path": "pinot-common/src/main/java/org/apache/pinot/common/function/scalar/ArrayFunctions.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QxNjowMDo1NVrOHd6inw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QxNjoxNDowN1rOHd7HEw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTEyOTg4Nw==", "bodyText": "@fx19880617 has already added min, max, sum as regular transform functions: https://github.com/apache/incubator-pinot/blob/master/pinot-core/src/main/java/org/apache/pinot/core/operator/transform/function/ArrayMaxTransformFunction.java\nDo we need them here again?", "url": "https://github.com/apache/pinot/pull/6105#discussion_r501129887", "createdAt": "2020-10-07T16:00:55Z", "author": {"login": "npawar"}, "path": "pinot-common/src/main/java/org/apache/pinot/common/function/scalar/ArrayFunctions.java", "diffHunk": "@@ -0,0 +1,133 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.common.function.scalar;\n+\n+import java.util.Arrays;\n+import org.apache.commons.lang3.ArrayUtils;\n+import org.apache.pinot.spi.annotations.ScalarFunction;\n+\n+/**\n+ * Inbuilt Array Transformation Functions\n+ * The functions can be used as UDFs in Query when added in the FunctionRegistry.\n+ * @ScalarFunction annotation is used with each method for the registration\n+ *\n+ * Example usage:\n+ * <code> SELECT reverseArray(array) FROM baseballStats LIMIT 10 </code>\n+ */\n+public class ArrayFunctions {\n+  private ArrayFunctions() {\n+\n+  }\n+\n+  /**\n+   * @see ArrayUtils#reverse(Object[])\n+   * @param value\n+   * @return reversed input array in from end to start\n+   */\n+  @ScalarFunction(name = \"array_reverse_int\")\n+  public static int[] arrayReverseInt(int[] value) {\n+      ArrayUtils.reverse(value);\n+      return value;\n+  }\n+\n+  /**\n+   * @see ArrayUtils#reverse(Object[])\n+   * @param value\n+   * @return reversed input array in from end to start\n+   */\n+  @ScalarFunction(name = \"array_reverse_string\")\n+  public static String[] arrayReverseString(String[] value) {\n+    ArrayUtils.reverse(value);\n+    return value;\n+  }\n+\n+  /**\n+   * @see Arrays#stream(double[]).max()\n+   * @param value\n+   * @return find minimum value in input array\n+   */\n+  @ScalarFunction(name = \"array_max\")\n+  public static int[] arrayMax(int[] value) {\n+    return new int[] {Arrays.stream(value).max().getAsInt()};\n+  }\n+\n+  /**\n+   * @see Arrays#stream(double[]).min()\n+   * @param value\n+   * @return find maximum value in input array\n+   */\n+  @ScalarFunction(name = \"array_min\")\n+  public static int[] arrayMin(int[] value) {\n+    return new int[] {Arrays.stream(value).min().getAsInt()};\n+  }\n+\n+  /**\n+   * @see Arrays#stream(double[]).sum()\n+   * @param value\n+   * @return calculate sum of all values in input array\n+   */\n+  @ScalarFunction(name = \"array_sum\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f79ff777cfda6f68c329c052529af29cd7cedec"}, "originalPosition": 85}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTEzOTIxOQ==", "bodyText": "@npawar yeah, looks like already there, but not in scalar functions. will remove from PR.", "url": "https://github.com/apache/pinot/pull/6105#discussion_r501139219", "createdAt": "2020-10-07T16:14:07Z", "author": {"login": "SandishKumarHN"}, "path": "pinot-common/src/main/java/org/apache/pinot/common/function/scalar/ArrayFunctions.java", "diffHunk": "@@ -0,0 +1,133 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.common.function.scalar;\n+\n+import java.util.Arrays;\n+import org.apache.commons.lang3.ArrayUtils;\n+import org.apache.pinot.spi.annotations.ScalarFunction;\n+\n+/**\n+ * Inbuilt Array Transformation Functions\n+ * The functions can be used as UDFs in Query when added in the FunctionRegistry.\n+ * @ScalarFunction annotation is used with each method for the registration\n+ *\n+ * Example usage:\n+ * <code> SELECT reverseArray(array) FROM baseballStats LIMIT 10 </code>\n+ */\n+public class ArrayFunctions {\n+  private ArrayFunctions() {\n+\n+  }\n+\n+  /**\n+   * @see ArrayUtils#reverse(Object[])\n+   * @param value\n+   * @return reversed input array in from end to start\n+   */\n+  @ScalarFunction(name = \"array_reverse_int\")\n+  public static int[] arrayReverseInt(int[] value) {\n+      ArrayUtils.reverse(value);\n+      return value;\n+  }\n+\n+  /**\n+   * @see ArrayUtils#reverse(Object[])\n+   * @param value\n+   * @return reversed input array in from end to start\n+   */\n+  @ScalarFunction(name = \"array_reverse_string\")\n+  public static String[] arrayReverseString(String[] value) {\n+    ArrayUtils.reverse(value);\n+    return value;\n+  }\n+\n+  /**\n+   * @see Arrays#stream(double[]).max()\n+   * @param value\n+   * @return find minimum value in input array\n+   */\n+  @ScalarFunction(name = \"array_max\")\n+  public static int[] arrayMax(int[] value) {\n+    return new int[] {Arrays.stream(value).max().getAsInt()};\n+  }\n+\n+  /**\n+   * @see Arrays#stream(double[]).min()\n+   * @param value\n+   * @return find maximum value in input array\n+   */\n+  @ScalarFunction(name = \"array_min\")\n+  public static int[] arrayMin(int[] value) {\n+    return new int[] {Arrays.stream(value).min().getAsInt()};\n+  }\n+\n+  /**\n+   * @see Arrays#stream(double[]).sum()\n+   * @param value\n+   * @return calculate sum of all values in input array\n+   */\n+  @ScalarFunction(name = \"array_sum\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTEyOTg4Nw=="}, "originalCommit": {"oid": "8f79ff777cfda6f68c329c052529af29cd7cedec"}, "originalPosition": 85}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0ODIyOTk4OnYy", "diffSide": "RIGHT", "path": "pinot-common/src/main/java/org/apache/pinot/common/function/FunctionUtils.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMFQwMjoxODoxMVrOHfccIg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMFQwMjoxODoxMVrOHfccIg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjczMzg1OA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                put(Long[].class, PinotDataType.INTEGER_ARRAY);\n          \n          \n            \n                put(Long[].class, PinotDataType. LONG_ARRAY);", "url": "https://github.com/apache/pinot/pull/6105#discussion_r502733858", "createdAt": "2020-10-10T02:18:11Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-common/src/main/java/org/apache/pinot/common/function/FunctionUtils.java", "diffHunk": "@@ -50,12 +59,22 @@ private FunctionUtils() {\n     put(Boolean.class, PinotDataType.BOOLEAN);\n     put(Character.class, PinotDataType.CHARACTER);\n     put(Short.class, PinotDataType.SHORT);\n+    put(int.class, PinotDataType.INTEGER);\n     put(Integer.class, PinotDataType.INTEGER);\n     put(Long.class, PinotDataType.LONG);\n     put(Float.class, PinotDataType.FLOAT);\n     put(Double.class, PinotDataType.DOUBLE);\n     put(String.class, PinotDataType.STRING);\n     put(byte[].class, PinotDataType.BYTES);\n+    put(int[].class, PinotDataType.INTEGER_ARRAY);\n+    put(Integer[].class, PinotDataType.INTEGER_ARRAY);\n+    put(long[].class, PinotDataType.LONG_ARRAY);\n+    put(Long[].class, PinotDataType.INTEGER_ARRAY);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5d27508bfbf21e4961f1b40baa19b2d7d85412d0"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0ODIzMDI0OnYy", "diffSide": "RIGHT", "path": "pinot-common/src/main/java/org/apache/pinot/common/function/FunctionUtils.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMFQwMjoxODoyN1rOHfccRg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMFQwMjoxODoyN1rOHfccRg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjczMzg5NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                put(long[].class, ColumnDataType.FLOAT);\n          \n          \n            \n                put(Long[].class, ColumnDataType.FLOAT);\n          \n          \n            \n                put(long[].class, ColumnDataType.LONG);\n          \n          \n            \n                put(Long[].class, ColumnDataType.LONG);", "url": "https://github.com/apache/pinot/pull/6105#discussion_r502733894", "createdAt": "2020-10-10T02:18:27Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-common/src/main/java/org/apache/pinot/common/function/FunctionUtils.java", "diffHunk": "@@ -82,6 +110,15 @@ private FunctionUtils() {\n     put(Double.class, ColumnDataType.DOUBLE);\n     put(String.class, ColumnDataType.STRING);\n     put(byte[].class, ColumnDataType.BYTES);\n+    put(int[].class, ColumnDataType.INT);\n+    put(Integer[].class, ColumnDataType.INT);\n+    put(long[].class, ColumnDataType.FLOAT);\n+    put(Long[].class, ColumnDataType.FLOAT);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5d27508bfbf21e4961f1b40baa19b2d7d85412d0"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0ODIzMTE0OnYy", "diffSide": "RIGHT", "path": "pinot-common/src/main/java/org/apache/pinot/common/function/FunctionUtils.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMFQwMjoxOTo0M1rOHfcctg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMFQwMjoxOTo0M1rOHfcctg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjczNDAwNg==", "bodyText": "Remove this one as argument is always an Object", "url": "https://github.com/apache/pinot/pull/6105#discussion_r502734006", "createdAt": "2020-10-10T02:19:43Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-common/src/main/java/org/apache/pinot/common/function/FunctionUtils.java", "diffHunk": "@@ -50,12 +59,22 @@ private FunctionUtils() {\n     put(Boolean.class, PinotDataType.BOOLEAN);\n     put(Character.class, PinotDataType.CHARACTER);\n     put(Short.class, PinotDataType.SHORT);\n+    put(int.class, PinotDataType.INTEGER);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5d27508bfbf21e4961f1b40baa19b2d7d85412d0"}, "originalPosition": 20}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3706, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}