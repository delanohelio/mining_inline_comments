{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkwMTU3Njg1", "number": 5163, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQwMjoyMjoxMlrODo8uHg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxODowNzoxMlrODpOTZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0MjY0NDc4OnYy", "diffSide": "RIGHT", "path": "pinot-core/src/main/java/org/apache/pinot/core/operator/CombineOperator.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQwMjoyMjoxMlrOF30Pdw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQwMjoyMjoxMlrOF30Pdw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDA3MTkyNw==", "bodyText": "Can we rename this method to something more intuitive? Like isQuerySatisfied()?", "url": "https://github.com/apache/pinot/pull/5163#discussion_r394071927", "createdAt": "2020-03-18T02:22:12Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/operator/CombineOperator.java", "diffHunk": "@@ -196,6 +202,17 @@ public IntermediateResultsBlock callJob()\n     return mergedBlock;\n   }\n \n+  // This will check if IntermediateResultsBlock already satisfying query, so there is no need to continue query processing.\n+  private boolean allowEarlyTermination(BrokerRequest brokerRequest, IntermediateResultsBlock mergedBlock) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c98b96efcbcbc70fe11502291f934b7ca85afd11"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0MjY1NTY2OnYy", "diffSide": "RIGHT", "path": "pinot-core/src/test/java/org/apache/pinot/queries/SelectionOnlyEarlyTerminationTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQwMjoyOTo0OFrOF30WdQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQwMjoyOTo0OFrOF30WdQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDA3MzcxNw==", "bodyText": "You can make CombineOperator. MAX_NUM_THREADS_PER_QUERY public to make this test easier to understand.", "url": "https://github.com/apache/pinot/pull/5163#discussion_r394073717", "createdAt": "2020-03-18T02:29:48Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-core/src/test/java/org/apache/pinot/queries/SelectionOnlyEarlyTerminationTest.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.queries;\n+\n+import java.io.IOException;\n+import org.apache.pinot.common.response.broker.BrokerResponseNative;\n+import org.testng.Assert;\n+import org.testng.annotations.Test;\n+\n+\n+/**\n+ * Tests selection only queries\n+ */\n+public class SelectionOnlyEarlyTerminationTest extends BaseSingleValueQueriesTest {\n+  private int numSegmentDataManagers = Math.max(1, Math.min(10, Runtime.getRuntime().availableProcessors() / 2)) * 2;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c98b96efcbcbc70fe11502291f934b7ca85afd11"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0MjY1NjAzOnYy", "diffSide": "RIGHT", "path": "pinot-core/src/test/java/org/apache/pinot/queries/SelectionOnlyEarlyTerminationTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQwMjozMDowNVrOF30Wrw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQwMjozMDowNVrOF30Wrw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDA3Mzc3NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \n          \n          \n            \n            @Override", "url": "https://github.com/apache/pinot/pull/5163#discussion_r394073775", "createdAt": "2020-03-18T02:30:05Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-core/src/test/java/org/apache/pinot/queries/SelectionOnlyEarlyTerminationTest.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.queries;\n+\n+import java.io.IOException;\n+import org.apache.pinot.common.response.broker.BrokerResponseNative;\n+import org.testng.Assert;\n+import org.testng.annotations.Test;\n+\n+\n+/**\n+ * Tests selection only queries\n+ */\n+public class SelectionOnlyEarlyTerminationTest extends BaseSingleValueQueriesTest {\n+  private int numSegmentDataManagers = Math.max(1, Math.min(10, Runtime.getRuntime().availableProcessors() / 2)) * 2;\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c98b96efcbcbc70fe11502291f934b7ca85afd11"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0MjY1NzQ1OnYy", "diffSide": "RIGHT", "path": "pinot-core/src/test/java/org/apache/pinot/queries/BaseSingleValueQueriesTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQwMjozMTowN1rOF30XpA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQwMjozMTowN1rOF30XpA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDA3NDAyMA==", "bodyText": "(nit) please reformat and cache getNumSegmentDataManagers()", "url": "https://github.com/apache/pinot/pull/5163#discussion_r394074020", "createdAt": "2020-03-18T02:31:07Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-core/src/test/java/org/apache/pinot/queries/BaseSingleValueQueriesTest.java", "diffHunk": "@@ -121,8 +122,14 @@ public void loadSegment()\n       throws Exception {\n     ImmutableSegment immutableSegment = ImmutableSegmentLoader.load(new File(INDEX_DIR, SEGMENT_NAME), ReadMode.heap);\n     _indexSegment = immutableSegment;\n-    _segmentDataManagers = Arrays\n-        .asList(new ImmutableSegmentDataManager(immutableSegment), new ImmutableSegmentDataManager(immutableSegment));\n+    _segmentDataManagers = new ArrayList<>();\n+    for (int i = 0; i< getNumSegmentDataManagers(); i++) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c98b96efcbcbc70fe11502291f934b7ca85afd11"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0MjY1OTA5OnYy", "diffSide": "RIGHT", "path": "pinot-core/src/test/java/org/apache/pinot/queries/SelectionOnlyEarlyTerminationTest.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQwMjozMjoyN1rOF30YwA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxODowNjoyNVrOF4RBGQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDA3NDMwNA==", "bodyText": "Why does numSegmentsMatched also change?", "url": "https://github.com/apache/pinot/pull/5163#discussion_r394074304", "createdAt": "2020-03-18T02:32:27Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-core/src/test/java/org/apache/pinot/queries/SelectionOnlyEarlyTerminationTest.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.queries;\n+\n+import java.io.IOException;\n+import org.apache.pinot.common.response.broker.BrokerResponseNative;\n+import org.testng.Assert;\n+import org.testng.annotations.Test;\n+\n+\n+/**\n+ * Tests selection only queries\n+ */\n+public class SelectionOnlyEarlyTerminationTest extends BaseSingleValueQueriesTest {\n+  private int numSegmentDataManagers = Math.max(1, Math.min(10, Runtime.getRuntime().availableProcessors() / 2)) * 2;\n+\n+  protected int getNumSegmentDataManagers() {\n+    return numSegmentDataManagers;\n+  }\n+\n+  /**\n+   * With early termination, Selection Only query is scheduled with ${numSegmentDataManagers} threads,\n+   * total segment processed is same at num threads.\n+   */\n+  @Test\n+  public void testSelectOnlyQuery() {\n+    String query = \"SELECT column1, column6 FROM testTable\";\n+    BrokerResponseNative brokerResponse = getBrokerResponseForPqlQuery(query);\n+    Assert.assertNotNull(brokerResponse.getSelectionResults());\n+    Assert.assertNull(brokerResponse.getResultTable());\n+    Assert.assertTrue(brokerResponse.getNumSegmentsMatched() == numSegmentDataManagers);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c98b96efcbcbc70fe11502291f934b7ca85afd11"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDEyMTg4NA==", "bodyText": "I think  this is because that we skipped the rest blocks to merge which don't have those information to be collected.", "url": "https://github.com/apache/pinot/pull/5163#discussion_r394121884", "createdAt": "2020-03-18T06:01:43Z", "author": {"login": "xiangfu0"}, "path": "pinot-core/src/test/java/org/apache/pinot/queries/SelectionOnlyEarlyTerminationTest.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.queries;\n+\n+import java.io.IOException;\n+import org.apache.pinot.common.response.broker.BrokerResponseNative;\n+import org.testng.Assert;\n+import org.testng.annotations.Test;\n+\n+\n+/**\n+ * Tests selection only queries\n+ */\n+public class SelectionOnlyEarlyTerminationTest extends BaseSingleValueQueriesTest {\n+  private int numSegmentDataManagers = Math.max(1, Math.min(10, Runtime.getRuntime().availableProcessors() / 2)) * 2;\n+\n+  protected int getNumSegmentDataManagers() {\n+    return numSegmentDataManagers;\n+  }\n+\n+  /**\n+   * With early termination, Selection Only query is scheduled with ${numSegmentDataManagers} threads,\n+   * total segment processed is same at num threads.\n+   */\n+  @Test\n+  public void testSelectOnlyQuery() {\n+    String query = \"SELECT column1, column6 FROM testTable\";\n+    BrokerResponseNative brokerResponse = getBrokerResponseForPqlQuery(query);\n+    Assert.assertNotNull(brokerResponse.getSelectionResults());\n+    Assert.assertNull(brokerResponse.getResultTable());\n+    Assert.assertTrue(brokerResponse.getNumSegmentsMatched() == numSegmentDataManagers);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDA3NDMwNA=="}, "originalCommit": {"oid": "c98b96efcbcbc70fe11502291f934b7ca85afd11"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDEyOTQ5OA==", "bodyText": "This is kind of like  a partial results but it's a valid one .", "url": "https://github.com/apache/pinot/pull/5163#discussion_r394129498", "createdAt": "2020-03-18T06:30:28Z", "author": {"login": "xiangfu0"}, "path": "pinot-core/src/test/java/org/apache/pinot/queries/SelectionOnlyEarlyTerminationTest.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.queries;\n+\n+import java.io.IOException;\n+import org.apache.pinot.common.response.broker.BrokerResponseNative;\n+import org.testng.Assert;\n+import org.testng.annotations.Test;\n+\n+\n+/**\n+ * Tests selection only queries\n+ */\n+public class SelectionOnlyEarlyTerminationTest extends BaseSingleValueQueriesTest {\n+  private int numSegmentDataManagers = Math.max(1, Math.min(10, Runtime.getRuntime().availableProcessors() / 2)) * 2;\n+\n+  protected int getNumSegmentDataManagers() {\n+    return numSegmentDataManagers;\n+  }\n+\n+  /**\n+   * With early termination, Selection Only query is scheduled with ${numSegmentDataManagers} threads,\n+   * total segment processed is same at num threads.\n+   */\n+  @Test\n+  public void testSelectOnlyQuery() {\n+    String query = \"SELECT column1, column6 FROM testTable\";\n+    BrokerResponseNative brokerResponse = getBrokerResponseForPqlQuery(query);\n+    Assert.assertNotNull(brokerResponse.getSelectionResults());\n+    Assert.assertNull(brokerResponse.getResultTable());\n+    Assert.assertTrue(brokerResponse.getNumSegmentsMatched() == numSegmentDataManagers);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDA3NDMwNA=="}, "originalCommit": {"oid": "c98b96efcbcbc70fe11502291f934b7ca85afd11"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDU0MzM4NQ==", "bodyText": "Never mind. Checked the definition. numSegmentsMatched are number of segments with non-zero numDocsScanned", "url": "https://github.com/apache/pinot/pull/5163#discussion_r394543385", "createdAt": "2020-03-18T18:06:25Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-core/src/test/java/org/apache/pinot/queries/SelectionOnlyEarlyTerminationTest.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.queries;\n+\n+import java.io.IOException;\n+import org.apache.pinot.common.response.broker.BrokerResponseNative;\n+import org.testng.Assert;\n+import org.testng.annotations.Test;\n+\n+\n+/**\n+ * Tests selection only queries\n+ */\n+public class SelectionOnlyEarlyTerminationTest extends BaseSingleValueQueriesTest {\n+  private int numSegmentDataManagers = Math.max(1, Math.min(10, Runtime.getRuntime().availableProcessors() / 2)) * 2;\n+\n+  protected int getNumSegmentDataManagers() {\n+    return numSegmentDataManagers;\n+  }\n+\n+  /**\n+   * With early termination, Selection Only query is scheduled with ${numSegmentDataManagers} threads,\n+   * total segment processed is same at num threads.\n+   */\n+  @Test\n+  public void testSelectOnlyQuery() {\n+    String query = \"SELECT column1, column6 FROM testTable\";\n+    BrokerResponseNative brokerResponse = getBrokerResponseForPqlQuery(query);\n+    Assert.assertNotNull(brokerResponse.getSelectionResults());\n+    Assert.assertNull(brokerResponse.getResultTable());\n+    Assert.assertTrue(brokerResponse.getNumSegmentsMatched() == numSegmentDataManagers);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDA3NDMwNA=="}, "originalCommit": {"oid": "c98b96efcbcbc70fe11502291f934b7ca85afd11"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0NTUyNTQ4OnYy", "diffSide": "RIGHT", "path": "pinot-core/src/test/java/org/apache/pinot/queries/SelectionOnlyEarlyTerminationTest.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxODowNzoxMlrOF4RCxg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxOToxMjowNVrOF4TR5A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDU0MzgxNA==", "bodyText": "Why numThreadsPerQuery != CombineOperator.MAX_NUM_THREADS_PER_QUERY?", "url": "https://github.com/apache/pinot/pull/5163#discussion_r394543814", "createdAt": "2020-03-18T18:07:12Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-core/src/test/java/org/apache/pinot/queries/SelectionOnlyEarlyTerminationTest.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.queries;\n+\n+import org.apache.pinot.common.response.broker.BrokerResponseNative;\n+import org.apache.pinot.core.operator.CombineOperator;\n+import org.testng.Assert;\n+import org.testng.annotations.Test;\n+\n+\n+/**\n+ * Tests selection only queries\n+ */\n+public class SelectionOnlyEarlyTerminationTest extends BaseSingleValueQueriesTest {\n+\n+  /**\n+   * In order to ensure each thread is executing more than 1 segment, this test is against\n+   * (2 * MAX_NUM_THREADS_PER_QUERY) segments.\n+   */\n+  @Override\n+  protected int getNumSegmentDataManagers() {\n+    return CombineOperator.MAX_NUM_THREADS_PER_QUERY * 2;\n+  }\n+\n+  /**\n+   * With early termination, Selection Only query is scheduled with getNumSegmentDataManagers() threads,\n+   * total segment processed is same at num threads.\n+   */\n+  @Test\n+  public void testSelectOnlyQuery() {\n+    int numThreadsPerQuery = getNumSegmentDataManagers();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a91e4550a39ff3c6a5c73edb05fb600aee6dfa77"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDU1MzU4OQ==", "bodyText": "Cause this test will put instance responses twice in dataTableMap for broker reduce, I will update the parameters to reflect this setup.", "url": "https://github.com/apache/pinot/pull/5163#discussion_r394553589", "createdAt": "2020-03-18T18:24:03Z", "author": {"login": "xiangfu0"}, "path": "pinot-core/src/test/java/org/apache/pinot/queries/SelectionOnlyEarlyTerminationTest.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.queries;\n+\n+import org.apache.pinot.common.response.broker.BrokerResponseNative;\n+import org.apache.pinot.core.operator.CombineOperator;\n+import org.testng.Assert;\n+import org.testng.annotations.Test;\n+\n+\n+/**\n+ * Tests selection only queries\n+ */\n+public class SelectionOnlyEarlyTerminationTest extends BaseSingleValueQueriesTest {\n+\n+  /**\n+   * In order to ensure each thread is executing more than 1 segment, this test is against\n+   * (2 * MAX_NUM_THREADS_PER_QUERY) segments.\n+   */\n+  @Override\n+  protected int getNumSegmentDataManagers() {\n+    return CombineOperator.MAX_NUM_THREADS_PER_QUERY * 2;\n+  }\n+\n+  /**\n+   * With early termination, Selection Only query is scheduled with getNumSegmentDataManagers() threads,\n+   * total segment processed is same at num threads.\n+   */\n+  @Test\n+  public void testSelectOnlyQuery() {\n+    int numThreadsPerQuery = getNumSegmentDataManagers();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDU0MzgxNA=="}, "originalCommit": {"oid": "a91e4550a39ff3c6a5c73edb05fb600aee6dfa77"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDU4MDQ1Mg==", "bodyText": "updated the PR", "url": "https://github.com/apache/pinot/pull/5163#discussion_r394580452", "createdAt": "2020-03-18T19:12:05Z", "author": {"login": "xiangfu0"}, "path": "pinot-core/src/test/java/org/apache/pinot/queries/SelectionOnlyEarlyTerminationTest.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.queries;\n+\n+import org.apache.pinot.common.response.broker.BrokerResponseNative;\n+import org.apache.pinot.core.operator.CombineOperator;\n+import org.testng.Assert;\n+import org.testng.annotations.Test;\n+\n+\n+/**\n+ * Tests selection only queries\n+ */\n+public class SelectionOnlyEarlyTerminationTest extends BaseSingleValueQueriesTest {\n+\n+  /**\n+   * In order to ensure each thread is executing more than 1 segment, this test is against\n+   * (2 * MAX_NUM_THREADS_PER_QUERY) segments.\n+   */\n+  @Override\n+  protected int getNumSegmentDataManagers() {\n+    return CombineOperator.MAX_NUM_THREADS_PER_QUERY * 2;\n+  }\n+\n+  /**\n+   * With early termination, Selection Only query is scheduled with getNumSegmentDataManagers() threads,\n+   * total segment processed is same at num threads.\n+   */\n+  @Test\n+  public void testSelectOnlyQuery() {\n+    int numThreadsPerQuery = getNumSegmentDataManagers();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDU0MzgxNA=="}, "originalCommit": {"oid": "a91e4550a39ff3c6a5c73edb05fb600aee6dfa77"}, "originalPosition": 47}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3288, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}