{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY0MzI2NjM5", "number": 5825, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QwMzoyMTo0NFrOEWEHGA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QwNzowNjo1MlrOEWGqJg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxNTcxNDgwOnYy", "diffSide": "RIGHT", "path": "pinot-common/src/main/java/org/apache/pinot/sql/parsers/CalciteSqlParser.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QwMzoyMTo0NFrOG9LJcg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wOFQwMjoyNjoyN1rOG9sy4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njc5ODk2Mg==", "bodyText": "@npawar I remember you had to relax the SQL parser to accept certain syntax. Was it Babel, or something else?", "url": "https://github.com/apache/pinot/pull/5825#discussion_r466798962", "createdAt": "2020-08-07T03:21:44Z", "author": {"login": "mayankshriv"}, "path": "pinot-common/src/main/java/org/apache/pinot/sql/parsers/CalciteSqlParser.java", "diffHunk": "@@ -74,6 +74,11 @@\n    * non-alphanumeric characters. */\n   private static final Lex PINOT_LEX = Lex.MYSQL_ANSI;\n \n+  // BABEL is a very liberal conformance value that allows anything supported by any dialect\n+  private static final SqlParser.Config PARSER_CONFIG =\n+      SqlParser.configBuilder().setLex(PINOT_LEX).setConformance(SqlConformanceEnum.BABEL)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a24010989d232de28c7eb0bb8371cc984b3c24b4"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjgzMDI0OA==", "bodyText": "This is the same as the current behavior. Not sure why we need BABEL over the default", "url": "https://github.com/apache/pinot/pull/5825#discussion_r466830248", "createdAt": "2020-08-07T05:34:38Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-common/src/main/java/org/apache/pinot/sql/parsers/CalciteSqlParser.java", "diffHunk": "@@ -74,6 +74,11 @@\n    * non-alphanumeric characters. */\n   private static final Lex PINOT_LEX = Lex.MYSQL_ANSI;\n \n+  // BABEL is a very liberal conformance value that allows anything supported by any dialect\n+  private static final SqlParser.Config PARSER_CONFIG =\n+      SqlParser.configBuilder().setLex(PINOT_LEX).setConformance(SqlConformanceEnum.BABEL)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njc5ODk2Mg=="}, "originalCommit": {"oid": "a24010989d232de28c7eb0bb8371cc984b3c24b4"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzM0ODIyNA==", "bodyText": "IIRC BABEL was able to parse some of the PQL's that the default won't. And the intent was to start off with a mode that makes for a smoother transition.", "url": "https://github.com/apache/pinot/pull/5825#discussion_r467348224", "createdAt": "2020-08-08T02:05:11Z", "author": {"login": "mayankshriv"}, "path": "pinot-common/src/main/java/org/apache/pinot/sql/parsers/CalciteSqlParser.java", "diffHunk": "@@ -74,6 +74,11 @@\n    * non-alphanumeric characters. */\n   private static final Lex PINOT_LEX = Lex.MYSQL_ANSI;\n \n+  // BABEL is a very liberal conformance value that allows anything supported by any dialect\n+  private static final SqlParser.Config PARSER_CONFIG =\n+      SqlParser.configBuilder().setLex(PINOT_LEX).setConformance(SqlConformanceEnum.BABEL)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njc5ODk2Mg=="}, "originalCommit": {"oid": "a24010989d232de28c7eb0bb8371cc984b3c24b4"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzM1MDI0Mw==", "bodyText": "DEFAULT flagged a lot more words as reserved keywords (such as language, module, position etc). BABEL reduced  that set to just the very basic ones (like timestamp, time, date etc).\nBut like Jackie said, this looks exactly like what it was", "url": "https://github.com/apache/pinot/pull/5825#discussion_r467350243", "createdAt": "2020-08-08T02:26:27Z", "author": {"login": "npawar"}, "path": "pinot-common/src/main/java/org/apache/pinot/sql/parsers/CalciteSqlParser.java", "diffHunk": "@@ -74,6 +74,11 @@\n    * non-alphanumeric characters. */\n   private static final Lex PINOT_LEX = Lex.MYSQL_ANSI;\n \n+  // BABEL is a very liberal conformance value that allows anything supported by any dialect\n+  private static final SqlParser.Config PARSER_CONFIG =\n+      SqlParser.configBuilder().setLex(PINOT_LEX).setConformance(SqlConformanceEnum.BABEL)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njc5ODk2Mg=="}, "originalCommit": {"oid": "a24010989d232de28c7eb0bb8371cc984b3c24b4"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxNTcxODM3OnYy", "diffSide": "RIGHT", "path": "pinot-common/src/main/java/org/apache/pinot/sql/parsers/CalciteSqlParser.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QwMzoyNDoxMVrOG9LLeg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QwNTozNDowN1rOG9NDLw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njc5OTQ4Mg==", "bodyText": "@siddharthteotia, fyi, does this break any of your use cases for PQL -> SQL migration?", "url": "https://github.com/apache/pinot/pull/5825#discussion_r466799482", "createdAt": "2020-08-07T03:24:11Z", "author": {"login": "mayankshriv"}, "path": "pinot-common/src/main/java/org/apache/pinot/sql/parsers/CalciteSqlParser.java", "diffHunk": "@@ -397,7 +403,8 @@ private static void rewriteNonAggregationGroupByToDistinct(PinotQuery pinotQuery\n         pinotQuery.setGroupByList(Collections.emptyList());\n       } else {\n         selectIdentifiers.removeAll(groupByIdentifiers);\n-        throw new SqlCompilationException(String.format(\"For non-aggregation group by query, all the identifiers in select clause should be in groupBys. Found identifier: %s\",\n+        throw new SqlCompilationException(String.format(\n+            \"For non-aggregation group by query, all the identifiers in select clause should be in groupBys. Found identifier: %s\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a24010989d232de28c7eb0bb8371cc984b3c24b4"}, "originalPosition": 210}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjgzMDEyNw==", "bodyText": "This line is just auto-format", "url": "https://github.com/apache/pinot/pull/5825#discussion_r466830127", "createdAt": "2020-08-07T05:34:07Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-common/src/main/java/org/apache/pinot/sql/parsers/CalciteSqlParser.java", "diffHunk": "@@ -397,7 +403,8 @@ private static void rewriteNonAggregationGroupByToDistinct(PinotQuery pinotQuery\n         pinotQuery.setGroupByList(Collections.emptyList());\n       } else {\n         selectIdentifiers.removeAll(groupByIdentifiers);\n-        throw new SqlCompilationException(String.format(\"For non-aggregation group by query, all the identifiers in select clause should be in groupBys. Found identifier: %s\",\n+        throw new SqlCompilationException(String.format(\n+            \"For non-aggregation group by query, all the identifiers in select clause should be in groupBys. Found identifier: %s\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njc5OTQ4Mg=="}, "originalCommit": {"oid": "a24010989d232de28c7eb0bb8371cc984b3c24b4"}, "originalPosition": 210}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxNjEyOTAyOnYy", "diffSide": "RIGHT", "path": "pinot-common/src/test/java/org/apache/pinot/sql/parsers/CalciteSqlCompilerTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QwNzowNTozOFrOG9O5bQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxODowNDozMFrOG9jG4Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njg2MDM5Nw==", "bodyText": "We can add A OR B ( C AND D) OR E for completeness.\nYou covered the following:\n\nA AND B ( C AND D) AND E\nA OR B ( C OR D) OR E\nA AND B ( C OR D) AND E", "url": "https://github.com/apache/pinot/pull/5825#discussion_r466860397", "createdAt": "2020-08-07T07:05:38Z", "author": {"login": "snleee"}, "path": "pinot-common/src/test/java/org/apache/pinot/sql/parsers/CalciteSqlCompilerTest.java", "diffHunk": "@@ -1804,4 +1819,199 @@ public void testInvalidNonAggregationGroupBy() {\n       throw e;\n     }\n   }\n-}\n\\ No newline at end of file\n+\n+  @Test\n+  public void testFlattenAndOr() {\n+    {\n+      String query = \"SELECT * FROM foo WHERE col1 > 0 AND (col2 > 0 AND col3 > 0) AND col4 > 0\";\n+      PinotQuery pinotQuery = CalciteSqlParser.compileToPinotQuery(query);\n+      Function functionCall = pinotQuery.getFilterExpression().getFunctionCall();\n+      Assert.assertEquals(functionCall.getOperator(), SqlKind.AND.name());\n+      List<Expression> operands = functionCall.getOperands();\n+      Assert.assertEquals(operands.size(), 4);\n+      for (Expression operand : operands) {\n+        Assert.assertEquals(operand.getFunctionCall().getOperator(), SqlKind.GREATER_THAN.name());\n+      }\n+\n+      BrokerRequest brokerRequest = BROKER_REQUEST_CONVERTER.convert(pinotQuery);\n+      FilterQueryTree filterQueryTree = RequestUtils.generateFilterQueryTree(brokerRequest);\n+      Assert.assertEquals(filterQueryTree.getOperator(), FilterOperator.AND);\n+      List<FilterQueryTree> children = filterQueryTree.getChildren();\n+      Assert.assertEquals(children.size(), 4);\n+      for (FilterQueryTree child : children) {\n+        Assert.assertEquals(child.getOperator(), FilterOperator.RANGE);\n+      }\n+    }\n+\n+    {\n+      String query = \"SELECT * FROM foo WHERE col1 <= 0 OR col2 <= 0 OR (col3 <= 0 OR col4 <= 0)\";\n+      PinotQuery pinotQuery = CalciteSqlParser.compileToPinotQuery(query);\n+      Function functionCall = pinotQuery.getFilterExpression().getFunctionCall();\n+      Assert.assertEquals(functionCall.getOperator(), SqlKind.OR.name());\n+      List<Expression> operands = functionCall.getOperands();\n+      Assert.assertEquals(operands.size(), 4);\n+      for (Expression operand : operands) {\n+        Assert.assertEquals(operand.getFunctionCall().getOperator(), SqlKind.LESS_THAN_OR_EQUAL.name());\n+      }\n+\n+      BrokerRequest brokerRequest = BROKER_REQUEST_CONVERTER.convert(pinotQuery);\n+      FilterQueryTree filterQueryTree = RequestUtils.generateFilterQueryTree(brokerRequest);\n+      Assert.assertEquals(filterQueryTree.getOperator(), FilterOperator.OR);\n+      List<FilterQueryTree> children = filterQueryTree.getChildren();\n+      Assert.assertEquals(children.size(), 4);\n+      for (FilterQueryTree child : children) {\n+        Assert.assertEquals(child.getOperator(), FilterOperator.RANGE);\n+      }\n+    }\n+\n+    {\n+      String query =\n+          \"SELECT * FROM foo WHERE col1 > 0 AND col2 > 0 AND col3 > 0 AND (col1 <= 0 OR col2 <= 0 OR (col3 <= 0 OR col4 <= 0)) AND col4 > 0\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "62c6ff4a253d1843286ed201ac9f4b78c63ef429"}, "originalPosition": 304}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzE5MTUyMQ==", "bodyText": "Modified the test to cover this", "url": "https://github.com/apache/pinot/pull/5825#discussion_r467191521", "createdAt": "2020-08-07T18:04:30Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-common/src/test/java/org/apache/pinot/sql/parsers/CalciteSqlCompilerTest.java", "diffHunk": "@@ -1804,4 +1819,199 @@ public void testInvalidNonAggregationGroupBy() {\n       throw e;\n     }\n   }\n-}\n\\ No newline at end of file\n+\n+  @Test\n+  public void testFlattenAndOr() {\n+    {\n+      String query = \"SELECT * FROM foo WHERE col1 > 0 AND (col2 > 0 AND col3 > 0) AND col4 > 0\";\n+      PinotQuery pinotQuery = CalciteSqlParser.compileToPinotQuery(query);\n+      Function functionCall = pinotQuery.getFilterExpression().getFunctionCall();\n+      Assert.assertEquals(functionCall.getOperator(), SqlKind.AND.name());\n+      List<Expression> operands = functionCall.getOperands();\n+      Assert.assertEquals(operands.size(), 4);\n+      for (Expression operand : operands) {\n+        Assert.assertEquals(operand.getFunctionCall().getOperator(), SqlKind.GREATER_THAN.name());\n+      }\n+\n+      BrokerRequest brokerRequest = BROKER_REQUEST_CONVERTER.convert(pinotQuery);\n+      FilterQueryTree filterQueryTree = RequestUtils.generateFilterQueryTree(brokerRequest);\n+      Assert.assertEquals(filterQueryTree.getOperator(), FilterOperator.AND);\n+      List<FilterQueryTree> children = filterQueryTree.getChildren();\n+      Assert.assertEquals(children.size(), 4);\n+      for (FilterQueryTree child : children) {\n+        Assert.assertEquals(child.getOperator(), FilterOperator.RANGE);\n+      }\n+    }\n+\n+    {\n+      String query = \"SELECT * FROM foo WHERE col1 <= 0 OR col2 <= 0 OR (col3 <= 0 OR col4 <= 0)\";\n+      PinotQuery pinotQuery = CalciteSqlParser.compileToPinotQuery(query);\n+      Function functionCall = pinotQuery.getFilterExpression().getFunctionCall();\n+      Assert.assertEquals(functionCall.getOperator(), SqlKind.OR.name());\n+      List<Expression> operands = functionCall.getOperands();\n+      Assert.assertEquals(operands.size(), 4);\n+      for (Expression operand : operands) {\n+        Assert.assertEquals(operand.getFunctionCall().getOperator(), SqlKind.LESS_THAN_OR_EQUAL.name());\n+      }\n+\n+      BrokerRequest brokerRequest = BROKER_REQUEST_CONVERTER.convert(pinotQuery);\n+      FilterQueryTree filterQueryTree = RequestUtils.generateFilterQueryTree(brokerRequest);\n+      Assert.assertEquals(filterQueryTree.getOperator(), FilterOperator.OR);\n+      List<FilterQueryTree> children = filterQueryTree.getChildren();\n+      Assert.assertEquals(children.size(), 4);\n+      for (FilterQueryTree child : children) {\n+        Assert.assertEquals(child.getOperator(), FilterOperator.RANGE);\n+      }\n+    }\n+\n+    {\n+      String query =\n+          \"SELECT * FROM foo WHERE col1 > 0 AND col2 > 0 AND col3 > 0 AND (col1 <= 0 OR col2 <= 0 OR (col3 <= 0 OR col4 <= 0)) AND col4 > 0\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njg2MDM5Nw=="}, "originalCommit": {"oid": "62c6ff4a253d1843286ed201ac9f4b78c63ef429"}, "originalPosition": 304}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxNjEzMjIyOnYy", "diffSide": "LEFT", "path": "pinot-core/src/test/java/org/apache/pinot/queries/InterSegmentAggregationMultiValueQueriesTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QwNzowNjo1MlrOG9O7Lg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxNzo1NjoxM1rOG9i3eA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njg2MDg0Ng==", "bodyText": "Why this value get changed? Did we change the underlying data or query?", "url": "https://github.com/apache/pinot/pull/5825#discussion_r466860846", "createdAt": "2020-08-07T07:06:52Z", "author": {"login": "snleee"}, "path": "pinot-core/src/test/java/org/apache/pinot/queries/InterSegmentAggregationMultiValueQueriesTest.java", "diffHunk": "@@ -157,7 +157,7 @@ public void testCastCountMV() {\n     Assert.assertEquals(brokerResponse.getResultTable().getDataSchema().getColumnName(0), \"cnt_column6\");\n \n     brokerResponse = getBrokerResponseForSqlQueryWithFilter(query);\n-    QueriesTestUtils.testInterSegmentResultTable(brokerResponse, 62480L, 874176L, 62480L, 400000L,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "62c6ff4a253d1843286ed201ac9f4b78c63ef429"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzE4NzU3Ng==", "bodyText": "This value changes because with the AND/OR flattening, the filter is compiled the same way in SQL and PQL, thus this value becomes the same as compiling with PQL. This value increases by chance, not always.", "url": "https://github.com/apache/pinot/pull/5825#discussion_r467187576", "createdAt": "2020-08-07T17:56:13Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-core/src/test/java/org/apache/pinot/queries/InterSegmentAggregationMultiValueQueriesTest.java", "diffHunk": "@@ -157,7 +157,7 @@ public void testCastCountMV() {\n     Assert.assertEquals(brokerResponse.getResultTable().getDataSchema().getColumnName(0), \"cnt_column6\");\n \n     brokerResponse = getBrokerResponseForSqlQueryWithFilter(query);\n-    QueriesTestUtils.testInterSegmentResultTable(brokerResponse, 62480L, 874176L, 62480L, 400000L,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njg2MDg0Ng=="}, "originalCommit": {"oid": "62c6ff4a253d1843286ed201ac9f4b78c63ef429"}, "originalPosition": 17}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3956, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}