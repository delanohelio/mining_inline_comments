{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQyNTExNzE1", "number": 5643, "title": "SQL Compilation Fixes", "bodyText": "Two fixes:\n\nMake in-built functions like TEXT_MATCH, REGEXP_LIKE case insensitive on SQL path. Should be converted to upper case since that is what is there in enum definitions and is also followed by Calcite for all functions/operators part of it's grammar.\nAdd support for converting PinotQuery to BrokerRequest for IS NULL and IS NOT NULL. Calcite supports these natively as part of it's grammar but we missed handling them when converting FilterExpression to FilterQuery.", "createdAt": "2020-07-01T07:51:44Z", "url": "https://github.com/apache/pinot/pull/5643", "merged": true, "mergeCommit": {"oid": "9678035115e3c9fb2e41a4f45176bedfb2f1af5c"}, "closed": true, "closedAt": "2020-07-02T04:02:33Z", "author": {"login": "siddharthteotia"}, "timelineItems": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcwlYUlAH2gAyNDQyNTExNzE1OmVjYmY5ODhlNWNlZjljYjE4OTA3ZDcxYWI4ZTc0NThhNzk3MGZhODA=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcwz40aAH2gAyNDQyNTExNzE1OjUwMGM3YzI2NmRjZWY3MjlhODcyYmFkNTFiN2QyYWZlYmVhNmQxZDA=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "ecbf988e5cef9cb18907d71ab8e7458a7970fa80", "author": {"user": null}, "url": "https://github.com/apache/pinot/commit/ecbf988e5cef9cb18907d71ab8e7458a7970fa80", "committedDate": "2020-07-01T07:47:30Z", "message": "SQL compilation fixes"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQxMDgyMzQ5", "url": "https://github.com/apache/pinot/pull/5643#pullrequestreview-441082349", "createdAt": "2020-07-01T17:54:02Z", "commit": {"oid": "ecbf988e5cef9cb18907d71ab8e7458a7970fa80"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxNzo1NDowMlrOGrv3Lw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxNzo1NzoyOFrOGrv-nA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODUyNjEyNw==", "bodyText": "(nit) empty line", "url": "https://github.com/apache/pinot/pull/5643#discussion_r448526127", "createdAt": "2020-07-01T17:54:02Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-common/src/test/java/org/apache/pinot/sql/parsers/CalciteSqlCompilerTest.java", "diffHunk": "@@ -1664,4 +1664,64 @@ public void testLiteralExpressionCheck() throws SqlParseException {\n     Assert.assertFalse(CalciteSqlParser.isLiteralOnlyExpression(CalciteSqlParser.compileToExpression(\"a+B\")));\n     Assert.assertFalse(CalciteSqlParser.isLiteralOnlyExpression(CalciteSqlParser.compileToExpression(\"c+1\")));\n   }\n+\n+  @Test\n+  public void testCaseInsensitiveFilter() {\n+    String query = \"SELECT count(*) FROM foo where text_match(col, 'expr')\";\n+    PinotQuery pinotQuery = CalciteSqlParser.compileToPinotQuery(query);\n+    PinotQuery2BrokerRequestConverter converter = new PinotQuery2BrokerRequestConverter();\n+    BrokerRequest brokerRequest = converter.convert(pinotQuery);\n+    Assert.assertEquals(pinotQuery.getFilterExpression().getFunctionCall().getOperator(), \"TEXT_MATCH\");\n+    Assert.assertEquals(brokerRequest.getFilterQuery().getOperator(), FilterOperator.TEXT_MATCH);\n+\n+    query = \"SELECT count(*) FROM foo where TEXT_MATCH(col, 'expr')\";\n+    pinotQuery = CalciteSqlParser.compileToPinotQuery(query);\n+    brokerRequest = converter.convert(pinotQuery);\n+    Assert.assertEquals(pinotQuery.getFilterExpression().getFunctionCall().getOperator(), \"TEXT_MATCH\");\n+    Assert.assertEquals(brokerRequest.getFilterQuery().getOperator(), FilterOperator.TEXT_MATCH);\n+\n+    query = \"SELECT count(*) FROM foo where regexp_like(col, 'expr')\";\n+    pinotQuery = CalciteSqlParser.compileToPinotQuery(query);\n+    brokerRequest = converter.convert(pinotQuery);\n+    Assert.assertEquals(pinotQuery.getFilterExpression().getFunctionCall().getOperator(), \"REGEXP_LIKE\");\n+    Assert.assertEquals(brokerRequest.getFilterQuery().getOperator(), FilterOperator.REGEXP_LIKE);\n+\n+    query = \"SELECT count(*) FROM foo where REGEXP_LIKE(col, 'expr')\";\n+    pinotQuery = CalciteSqlParser.compileToPinotQuery(query);\n+    brokerRequest = converter.convert(pinotQuery);\n+    Assert.assertEquals(pinotQuery.getFilterExpression().getFunctionCall().getOperator(), \"REGEXP_LIKE\");\n+    Assert.assertEquals(brokerRequest.getFilterQuery().getOperator(), FilterOperator.REGEXP_LIKE);\n+\n+    query = \"SELECT count(*) FROM foo where col is not null\";\n+    pinotQuery = CalciteSqlParser.compileToPinotQuery(query);\n+    brokerRequest = converter.convert(pinotQuery);\n+    Assert.assertEquals(pinotQuery.getFilterExpression().getFunctionCall().getOperator(), \"IS_NOT_NULL\");\n+    Assert.assertEquals(pinotQuery.getFilterExpression().getFunctionCall().getOperands().get(0).getIdentifier().getName(), \"col\");\n+    Assert.assertEquals(brokerRequest.getFilterQuery().getOperator(), FilterOperator.IS_NOT_NULL);\n+    Assert.assertEquals(brokerRequest.getFilterQuery().getColumn(), \"col\");\n+\n+    query = \"SELECT count(*) FROM foo where col IS NOT NULL\";\n+    pinotQuery = CalciteSqlParser.compileToPinotQuery(query);\n+    brokerRequest = converter.convert(pinotQuery);\n+    Assert.assertEquals(pinotQuery.getFilterExpression().getFunctionCall().getOperator(), \"IS_NOT_NULL\");\n+    Assert.assertEquals(pinotQuery.getFilterExpression().getFunctionCall().getOperands().get(0).getIdentifier().getName(), \"col\");\n+    Assert.assertEquals(brokerRequest.getFilterQuery().getOperator(), FilterOperator.IS_NOT_NULL);\n+    Assert.assertEquals(brokerRequest.getFilterQuery().getColumn(), \"col\");\n+\n+    query = \"SELECT count(*) FROM foo where col is null\";\n+    pinotQuery = CalciteSqlParser.compileToPinotQuery(query);\n+    brokerRequest = converter.convert(pinotQuery);\n+    Assert.assertEquals(pinotQuery.getFilterExpression().getFunctionCall().getOperator(), \"IS_NULL\");\n+    Assert.assertEquals(pinotQuery.getFilterExpression().getFunctionCall().getOperands().get(0).getIdentifier().getName(), \"col\");\n+    Assert.assertEquals(brokerRequest.getFilterQuery().getOperator(), FilterOperator.IS_NULL);\n+    Assert.assertEquals(brokerRequest.getFilterQuery().getColumn(), \"col\");\n+\n+    query = \"SELECT count(*) FROM foo where col IS NULL\";\n+    pinotQuery = CalciteSqlParser.compileToPinotQuery(query);\n+    brokerRequest = converter.convert(pinotQuery);\n+    Assert.assertEquals(pinotQuery.getFilterExpression().getFunctionCall().getOperator(), \"IS_NULL\");\n+    Assert.assertEquals(pinotQuery.getFilterExpression().getFunctionCall().getOperands().get(0).getIdentifier().getName(), \"col\");\n+    Assert.assertEquals(brokerRequest.getFilterQuery().getOperator(), FilterOperator.IS_NULL);\n+    Assert.assertEquals(brokerRequest.getFilterQuery().getColumn(), \"col\");\n+  }\n }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ecbf988e5cef9cb18907d71ab8e7458a7970fa80"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODUyODAyOA==", "bodyText": "(nit) Change line 270 as well\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        //first operand is the always the column\n          \n          \n            \n                        // First operand is the left-hand side column/expression of the predicate", "url": "https://github.com/apache/pinot/pull/5643#discussion_r448528028", "createdAt": "2020-07-01T17:57:28Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-common/src/main/java/org/apache/pinot/pql/parsers/PinotQuery2BrokerRequestConverter.java", "diffHunk": "@@ -272,7 +271,11 @@ private FilterQuery traverseFilterExpression(Expression filterExpression, Filter\n             filterQuery.setColumn(ParserUtils.standardizeExpression(operands.get(0), false));\n             filterQuery.setValue(ParserUtils.getFilterValues(filterKind, operands));\n             break;\n-\n+          case IS_NULL:\n+          case IS_NOT_NULL:\n+            //first operand is the always the column", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ecbf988e5cef9cb18907d71ab8e7458a7970fa80"}, "originalPosition": 21}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "500c7c266dcef729a872bad51b7d2afebea6d1d0", "author": {"user": null}, "url": "https://github.com/apache/pinot/commit/500c7c266dcef729a872bad51b7d2afebea6d1d0", "committedDate": "2020-07-02T00:41:40Z", "message": "Fix tests"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 747, "cost": 1, "resetAt": "2021-10-28T18:00:02Z"}}}