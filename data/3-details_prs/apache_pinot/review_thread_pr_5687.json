{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ3ODU4NzU2", "number": 5687, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxNzoxNDo0NFrOEN6W6Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxNzoyNDo1NFrOEN6mGw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzMDIzMDgxOnYy", "diffSide": "RIGHT", "path": "pinot-controller/src/main/java/org/apache/pinot/controller/api/resources/PinotClusterConfigs.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxNzoxNDo0NFrOGwx-gA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxNzoxNDo0NFrOGwx-gA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzgwMzY0OA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              @ApiOperation(value = \"Get cluster Ingo\", notes = \"Get cluster Info\")\n          \n          \n            \n              @ApiOperation(value = \"Get cluster Info\", notes = \"Get cluster Info\")", "url": "https://github.com/apache/pinot/pull/5687#discussion_r453803648", "createdAt": "2020-07-13T17:14:44Z", "author": {"login": "mcvsubbu"}, "path": "pinot-controller/src/main/java/org/apache/pinot/controller/api/resources/PinotClusterConfigs.java", "diffHunk": "@@ -57,6 +57,17 @@\n   @Inject\n   PinotHelixResourceManager pinotHelixResourceManager;\n \n+  @GET\n+  @Path(\"/cluster/info\")\n+  @Produces(MediaType.APPLICATION_JSON)\n+  @ApiOperation(value = \"Get cluster Ingo\", notes = \"Get cluster Info\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d29a7f6d0b449c1e15899607063577c27e14f961"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzMDI2MTY1OnYy", "diffSide": "RIGHT", "path": "pinot-controller/src/main/java/org/apache/pinot/controller/api/resources/PinotClusterConfigs.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxNzoyMjo0NVrOGwyR7A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQwNTozNDozM1rOGxEzkA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzgwODYyMA==", "bodyText": "Cluster info is just name?", "url": "https://github.com/apache/pinot/pull/5687#discussion_r453808620", "createdAt": "2020-07-13T17:22:45Z", "author": {"login": "mayankshriv"}, "path": "pinot-controller/src/main/java/org/apache/pinot/controller/api/resources/PinotClusterConfigs.java", "diffHunk": "@@ -57,6 +57,17 @@\n   @Inject\n   PinotHelixResourceManager pinotHelixResourceManager;\n \n+  @GET\n+  @Path(\"/cluster/info\")\n+  @Produces(MediaType.APPLICATION_JSON)\n+  @ApiOperation(value = \"Get cluster Ingo\", notes = \"Get cluster Info\")\n+  @ApiResponses(value = {@ApiResponse(code = 200, message = \"Success\"), @ApiResponse(code = 500, message = \"Internal server error\")})\n+  public String getClusterInfo() {\n+    ObjectNode ret = JsonUtils.newObjectNode();\n+    ret.put(\"clusterName\", pinotHelixResourceManager.getHelixClusterName());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d29a7f6d0b449c1e15899607063577c27e14f961"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDExMjE0NA==", "bodyText": "yes. We can enhance later. There was no way to get the cluster name", "url": "https://github.com/apache/pinot/pull/5687#discussion_r454112144", "createdAt": "2020-07-14T05:34:33Z", "author": {"login": "kishoreg"}, "path": "pinot-controller/src/main/java/org/apache/pinot/controller/api/resources/PinotClusterConfigs.java", "diffHunk": "@@ -57,6 +57,17 @@\n   @Inject\n   PinotHelixResourceManager pinotHelixResourceManager;\n \n+  @GET\n+  @Path(\"/cluster/info\")\n+  @Produces(MediaType.APPLICATION_JSON)\n+  @ApiOperation(value = \"Get cluster Ingo\", notes = \"Get cluster Info\")\n+  @ApiResponses(value = {@ApiResponse(code = 200, message = \"Success\"), @ApiResponse(code = 500, message = \"Internal server error\")})\n+  public String getClusterInfo() {\n+    ObjectNode ret = JsonUtils.newObjectNode();\n+    ret.put(\"clusterName\", pinotHelixResourceManager.getHelixClusterName());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzgwODYyMA=="}, "originalCommit": {"oid": "d29a7f6d0b449c1e15899607063577c27e14f961"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzMDI2OTcxOnYy", "diffSide": "RIGHT", "path": "pinot-controller/src/main/java/org/apache/pinot/controller/api/resources/ZookeeperResource.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxNzoyNDo1NFrOGwyW1w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQwMTowNTo0NFrOGxANSQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzgwOTg3OQ==", "bodyText": "Is using zookeeper the norm? Wondering if ok to use zk for lazy folks like me?", "url": "https://github.com/apache/pinot/pull/5687#discussion_r453809879", "createdAt": "2020-07-13T17:24:54Z", "author": {"login": "mayankshriv"}, "path": "pinot-controller/src/main/java/org/apache/pinot/controller/api/resources/ZookeeperResource.java", "diffHunk": "@@ -0,0 +1,165 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.controller.api.resources;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import io.swagger.annotations.Api;\n+import io.swagger.annotations.ApiOperation;\n+import io.swagger.annotations.ApiParam;\n+import io.swagger.annotations.ApiResponse;\n+import io.swagger.annotations.ApiResponses;\n+import java.nio.charset.StandardCharsets;\n+import java.util.List;\n+import java.util.Map;\n+import javax.inject.Inject;\n+import javax.ws.rs.DefaultValue;\n+import javax.ws.rs.GET;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.QueryParam;\n+import javax.ws.rs.core.MediaType;\n+import javax.ws.rs.core.Response;\n+import org.apache.helix.ZNRecord;\n+import org.apache.helix.manager.zk.ZNRecordSerializer;\n+import org.apache.pinot.controller.helix.core.PinotHelixResourceManager;\n+import org.apache.pinot.spi.utils.JsonUtils;\n+import org.apache.zookeeper.data.Stat;\n+import org.slf4j.LoggerFactory;\n+\n+\n+@Api(tags = Constants.ZOOKEEPER)\n+@Path(\"/\")\n+public class ZookeeperResource {\n+\n+  public static org.slf4j.Logger LOGGER = LoggerFactory.getLogger(ZookeeperResource.class);\n+\n+  @Inject\n+  PinotHelixResourceManager pinotHelixResourceManager;\n+\n+  ZNRecordSerializer _znRecordSerializer = new ZNRecordSerializer();\n+\n+  @GET\n+  @Path(\"/zookeeper/get\")\n+  @Produces(MediaType.TEXT_PLAIN)\n+  @ApiOperation(value = \"Get content of the znode\")\n+  @ApiResponses(value = { //\n+      @ApiResponse(code = 200, message = \"Success\"), //\n+      @ApiResponse(code = 404, message = \"ZK Path not found\"), //\n+      @ApiResponse(code = 204, message = \"No Content\"), //\n+      @ApiResponse(code = 500, message = \"Internal server error\")})\n+  public String getData(\n+      @ApiParam(value = \"Zookeeper Path, must start with /\", required = true, defaultValue = \"/\") @QueryParam(\"path\") @DefaultValue(\"\") String path) {\n+\n+    path = validateAndNormalizeZKPath(path);\n+\n+    ZNRecord znRecord = pinotHelixResourceManager.readZKData(path);\n+    if (znRecord != null) {\n+      return new String(_znRecordSerializer.serialize(znRecord), StandardCharsets.UTF_8);\n+    }\n+    return null;\n+  }\n+\n+  @GET\n+  @Path(\"/zookeeper/ls\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d29a7f6d0b449c1e15899607063577c27e14f961"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDAzNjgwOQ==", "bodyText": "Done!", "url": "https://github.com/apache/pinot/pull/5687#discussion_r454036809", "createdAt": "2020-07-14T01:05:44Z", "author": {"login": "kishoreg"}, "path": "pinot-controller/src/main/java/org/apache/pinot/controller/api/resources/ZookeeperResource.java", "diffHunk": "@@ -0,0 +1,165 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.controller.api.resources;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import io.swagger.annotations.Api;\n+import io.swagger.annotations.ApiOperation;\n+import io.swagger.annotations.ApiParam;\n+import io.swagger.annotations.ApiResponse;\n+import io.swagger.annotations.ApiResponses;\n+import java.nio.charset.StandardCharsets;\n+import java.util.List;\n+import java.util.Map;\n+import javax.inject.Inject;\n+import javax.ws.rs.DefaultValue;\n+import javax.ws.rs.GET;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.QueryParam;\n+import javax.ws.rs.core.MediaType;\n+import javax.ws.rs.core.Response;\n+import org.apache.helix.ZNRecord;\n+import org.apache.helix.manager.zk.ZNRecordSerializer;\n+import org.apache.pinot.controller.helix.core.PinotHelixResourceManager;\n+import org.apache.pinot.spi.utils.JsonUtils;\n+import org.apache.zookeeper.data.Stat;\n+import org.slf4j.LoggerFactory;\n+\n+\n+@Api(tags = Constants.ZOOKEEPER)\n+@Path(\"/\")\n+public class ZookeeperResource {\n+\n+  public static org.slf4j.Logger LOGGER = LoggerFactory.getLogger(ZookeeperResource.class);\n+\n+  @Inject\n+  PinotHelixResourceManager pinotHelixResourceManager;\n+\n+  ZNRecordSerializer _znRecordSerializer = new ZNRecordSerializer();\n+\n+  @GET\n+  @Path(\"/zookeeper/get\")\n+  @Produces(MediaType.TEXT_PLAIN)\n+  @ApiOperation(value = \"Get content of the znode\")\n+  @ApiResponses(value = { //\n+      @ApiResponse(code = 200, message = \"Success\"), //\n+      @ApiResponse(code = 404, message = \"ZK Path not found\"), //\n+      @ApiResponse(code = 204, message = \"No Content\"), //\n+      @ApiResponse(code = 500, message = \"Internal server error\")})\n+  public String getData(\n+      @ApiParam(value = \"Zookeeper Path, must start with /\", required = true, defaultValue = \"/\") @QueryParam(\"path\") @DefaultValue(\"\") String path) {\n+\n+    path = validateAndNormalizeZKPath(path);\n+\n+    ZNRecord znRecord = pinotHelixResourceManager.readZKData(path);\n+    if (znRecord != null) {\n+      return new String(_znRecordSerializer.serialize(znRecord), StandardCharsets.UTF_8);\n+    }\n+    return null;\n+  }\n+\n+  @GET\n+  @Path(\"/zookeeper/ls\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzgwOTg3OQ=="}, "originalCommit": {"oid": "d29a7f6d0b449c1e15899607063577c27e14f961"}, "originalPosition": 79}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4104, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}