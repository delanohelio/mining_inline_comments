{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYxMTkwMTU1", "number": 4968, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOVQyMjozMDo0NlrODXAKyg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOVQyMzo1MToxOFrODXBGTA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1NDQ2NjAyOnYy", "diffSide": "RIGHT", "path": "pinot-spi/src/main/java/org/apache/pinot/spi/data/readers/RecordExtractor.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOVQyMjozMDo0NlrOFcFV3w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOVQyMzowNTozNFrOFcGCyg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDk5MTk2Nw==", "bodyText": "I would keep this as an interface and add a base class if you want to add some default util methods.", "url": "https://github.com/apache/pinot/pull/4968#discussion_r364991967", "createdAt": "2020-01-09T22:30:46Z", "author": {"login": "kishoreg"}, "path": "pinot-spi/src/main/java/org/apache/pinot/spi/data/readers/RecordExtractor.java", "diffHunk": "@@ -0,0 +1,40 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.spi.data.readers;\n+\n+import com.google.common.base.Preconditions;\n+import org.apache.pinot.spi.data.FieldSpec;\n+import org.apache.pinot.spi.data.Schema;\n+import org.apache.pinot.spi.data.TimeFieldSpec;\n+\n+\n+public abstract class RecordExtractor<T> {\n+\n+  protected FieldSpec getFieldSpecToUse(Schema schema, FieldSpec incomingFieldSpec) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "05c4b787cc8ccbe7d8ef7daee4b47756027c24e1"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTAwMzQ2Ng==", "bodyText": "+1. This should be an interface for people to plug-in their own implementations", "url": "https://github.com/apache/pinot/pull/4968#discussion_r365003466", "createdAt": "2020-01-09T23:05:34Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-spi/src/main/java/org/apache/pinot/spi/data/readers/RecordExtractor.java", "diffHunk": "@@ -0,0 +1,40 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.spi.data.readers;\n+\n+import com.google.common.base.Preconditions;\n+import org.apache.pinot.spi.data.FieldSpec;\n+import org.apache.pinot.spi.data.Schema;\n+import org.apache.pinot.spi.data.TimeFieldSpec;\n+\n+\n+public abstract class RecordExtractor<T> {\n+\n+  protected FieldSpec getFieldSpecToUse(Schema schema, FieldSpec incomingFieldSpec) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDk5MTk2Nw=="}, "originalCommit": {"oid": "05c4b787cc8ccbe7d8ef7daee4b47756027c24e1"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1NDYxODM2OnYy", "diffSide": "RIGHT", "path": "pinot-spi/src/main/java/org/apache/pinot/spi/data/readers/RecordExtractor.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOVQyMzo1MToxOFrOFcGynQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMFQwMTo0MDoxOVrOFcIRdg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTAxNTcwOQ==", "bodyText": "this interface assumes T is self-describing (like thrift, avro, json) but it fails for format like csv, tsv etc where we get a comma separated line. This means it needs an init method :(.", "url": "https://github.com/apache/pinot/pull/4968#discussion_r365015709", "createdAt": "2020-01-09T23:51:18Z", "author": {"login": "kishoreg"}, "path": "pinot-spi/src/main/java/org/apache/pinot/spi/data/readers/RecordExtractor.java", "diffHunk": "@@ -0,0 +1,40 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.spi.data.readers;\n+\n+import com.google.common.base.Preconditions;\n+import org.apache.pinot.spi.data.FieldSpec;\n+import org.apache.pinot.spi.data.Schema;\n+import org.apache.pinot.spi.data.TimeFieldSpec;\n+\n+\n+public abstract class RecordExtractor<T> {\n+\n+  protected FieldSpec getFieldSpecToUse(Schema schema, FieldSpec incomingFieldSpec) {\n+    if (incomingFieldSpec.getFieldType() == FieldSpec.FieldType.TIME) {\n+      TimeFieldSpec timeFieldSpec = schema.getTimeFieldSpec();\n+      Preconditions.checkNotNull(timeFieldSpec);\n+      return new TimeFieldSpec(timeFieldSpec.getIncomingGranularitySpec());\n+    }\n+\n+    return incomingFieldSpec;\n+  }\n+\n+  abstract public GenericRow extract(Schema schema, T from, GenericRow to);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "05c4b787cc8ccbe7d8ef7daee4b47756027c24e1"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTAzOTgzMg==", "bodyText": "Can we add one when necessary? Should not be too hard to add.", "url": "https://github.com/apache/pinot/pull/4968#discussion_r365039832", "createdAt": "2020-01-10T01:39:29Z", "author": {"login": "mcvsubbu"}, "path": "pinot-spi/src/main/java/org/apache/pinot/spi/data/readers/RecordExtractor.java", "diffHunk": "@@ -0,0 +1,40 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.spi.data.readers;\n+\n+import com.google.common.base.Preconditions;\n+import org.apache.pinot.spi.data.FieldSpec;\n+import org.apache.pinot.spi.data.Schema;\n+import org.apache.pinot.spi.data.TimeFieldSpec;\n+\n+\n+public abstract class RecordExtractor<T> {\n+\n+  protected FieldSpec getFieldSpecToUse(Schema schema, FieldSpec incomingFieldSpec) {\n+    if (incomingFieldSpec.getFieldType() == FieldSpec.FieldType.TIME) {\n+      TimeFieldSpec timeFieldSpec = schema.getTimeFieldSpec();\n+      Preconditions.checkNotNull(timeFieldSpec);\n+      return new TimeFieldSpec(timeFieldSpec.getIncomingGranularitySpec());\n+    }\n+\n+    return incomingFieldSpec;\n+  }\n+\n+  abstract public GenericRow extract(Schema schema, T from, GenericRow to);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTAxNTcwOQ=="}, "originalCommit": {"oid": "05c4b787cc8ccbe7d8ef7daee4b47756027c24e1"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTAzOTk5MA==", "bodyText": "Also, it is not necessary for decoders to use record extractors. If it is trivial they can choose to extract the record with a statement like \"x = record.field\"", "url": "https://github.com/apache/pinot/pull/4968#discussion_r365039990", "createdAt": "2020-01-10T01:40:19Z", "author": {"login": "mcvsubbu"}, "path": "pinot-spi/src/main/java/org/apache/pinot/spi/data/readers/RecordExtractor.java", "diffHunk": "@@ -0,0 +1,40 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.spi.data.readers;\n+\n+import com.google.common.base.Preconditions;\n+import org.apache.pinot.spi.data.FieldSpec;\n+import org.apache.pinot.spi.data.Schema;\n+import org.apache.pinot.spi.data.TimeFieldSpec;\n+\n+\n+public abstract class RecordExtractor<T> {\n+\n+  protected FieldSpec getFieldSpecToUse(Schema schema, FieldSpec incomingFieldSpec) {\n+    if (incomingFieldSpec.getFieldType() == FieldSpec.FieldType.TIME) {\n+      TimeFieldSpec timeFieldSpec = schema.getTimeFieldSpec();\n+      Preconditions.checkNotNull(timeFieldSpec);\n+      return new TimeFieldSpec(timeFieldSpec.getIncomingGranularitySpec());\n+    }\n+\n+    return incomingFieldSpec;\n+  }\n+\n+  abstract public GenericRow extract(Schema schema, T from, GenericRow to);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTAxNTcwOQ=="}, "originalCommit": {"oid": "05c4b787cc8ccbe7d8ef7daee4b47756027c24e1"}, "originalPosition": 39}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3568, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}