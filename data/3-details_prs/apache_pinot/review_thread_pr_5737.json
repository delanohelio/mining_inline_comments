{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU1Mzk3NzI5", "number": 5737, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxOToxMjo1NFrOER78Wg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQyMzozMDoyNFrOER_gQQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3MjQzMzU0OnYy", "diffSide": "LEFT", "path": "pinot-tools/src/main/java/org/apache/pinot/tools/admin/command/RealtimeProvisioningHelperCommand.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxOToxMjo1NFrOG261Bg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNVQwMDoyOToyN1rOG3A6LQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDI0MDEzNA==", "bodyText": "setter for retentionHours is still needed rt?", "url": "https://github.com/apache/pinot/pull/5737#discussion_r460240134", "createdAt": "2020-07-24T19:12:54Z", "author": {"login": "npawar"}, "path": "pinot-tools/src/main/java/org/apache/pinot/tools/admin/command/RealtimeProvisioningHelperCommand.java", "diffHunk": "@@ -90,8 +91,8 @@ public RealtimeProvisioningHelperCommand setNumPartitions(int numPartitions) {\n     return this;\n   }\n \n-  public RealtimeProvisioningHelperCommand setRetentionHours(int retentionHours) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b898f4166950ba60e8ab64ea1bd0ec13ac9ea642"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDMzOTc1Nw==", "bodyText": "Yes, added back", "url": "https://github.com/apache/pinot/pull/5737#discussion_r460339757", "createdAt": "2020-07-25T00:29:27Z", "author": {"login": "mcvsubbu"}, "path": "pinot-tools/src/main/java/org/apache/pinot/tools/admin/command/RealtimeProvisioningHelperCommand.java", "diffHunk": "@@ -90,8 +91,8 @@ public RealtimeProvisioningHelperCommand setNumPartitions(int numPartitions) {\n     return this;\n   }\n \n-  public RealtimeProvisioningHelperCommand setRetentionHours(int retentionHours) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDI0MDEzNA=="}, "originalCommit": {"oid": "b898f4166950ba60e8ab64ea1bd0ec13ac9ea642"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3MjQzNTEzOnYy", "diffSide": "RIGHT", "path": "pinot-tools/src/main/java/org/apache/pinot/tools/admin/command/RealtimeProvisioningHelperCommand.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxOToxMzozMVrOG262BA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNVQwMDozMDoyOVrOG3A63g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDI0MDM4OA==", "bodyText": "setter name should be setIngestionRate() ?", "url": "https://github.com/apache/pinot/pull/5737#discussion_r460240388", "createdAt": "2020-07-24T19:13:31Z", "author": {"login": "npawar"}, "path": "pinot-tools/src/main/java/org/apache/pinot/tools/admin/command/RealtimeProvisioningHelperCommand.java", "diffHunk": "@@ -115,17 +116,17 @@ public RealtimeProvisioningHelperCommand setSampleCompletedSegmentDir(String sam\n     return this;\n   }\n \n-  public RealtimeProvisioningHelperCommand setPeriodSampleSegmentConsumed(String periodSampleSegmentConsumed) {\n-    _periodSampleSegmentConsumed = periodSampleSegmentConsumed;\n+  public RealtimeProvisioningHelperCommand setPeriodSampleSegmentConsumed(int ingestionRate) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b898f4166950ba60e8ab64ea1bd0ec13ac9ea642"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDMzOTkzNA==", "bodyText": "Yes, fixed", "url": "https://github.com/apache/pinot/pull/5737#discussion_r460339934", "createdAt": "2020-07-25T00:30:29Z", "author": {"login": "mcvsubbu"}, "path": "pinot-tools/src/main/java/org/apache/pinot/tools/admin/command/RealtimeProvisioningHelperCommand.java", "diffHunk": "@@ -115,17 +116,17 @@ public RealtimeProvisioningHelperCommand setSampleCompletedSegmentDir(String sam\n     return this;\n   }\n \n-  public RealtimeProvisioningHelperCommand setPeriodSampleSegmentConsumed(String periodSampleSegmentConsumed) {\n-    _periodSampleSegmentConsumed = periodSampleSegmentConsumed;\n+  public RealtimeProvisioningHelperCommand setPeriodSampleSegmentConsumed(int ingestionRate) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDI0MDM4OA=="}, "originalCommit": {"oid": "b898f4166950ba60e8ab64ea1bd0ec13ac9ea642"}, "originalPosition": 66}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3MjQ0MTk0OnYy", "diffSide": "RIGHT", "path": "pinot-tools/src/main/java/org/apache/pinot/tools/admin/command/RealtimeProvisioningHelperCommand.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxOToxNTo1N1rOG266Rw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQyMzo1MjowM1rOG3Ahxw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDI0MTQ3OQ==", "bodyText": "LOGGER instead of sout?", "url": "https://github.com/apache/pinot/pull/5737#discussion_r460241479", "createdAt": "2020-07-24T19:15:57Z", "author": {"login": "npawar"}, "path": "pinot-tools/src/main/java/org/apache/pinot/tools/admin/command/RealtimeProvisioningHelperCommand.java", "diffHunk": "@@ -145,6 +146,20 @@ public boolean getHelp() {\n     return _help;\n   }\n \n+  @Override\n+  public void printExamples() {\n+    StringBuilder builder = new StringBuilder();\n+    builder.append(\"\\n\\nThis command allows you to estimate the capacity needed for provisioning realtime hosts\")\n+        .append(\"It assumes that there is no upper limit to the amount of memory you can mmap\")\n+        .append(\"\\nIf you have a hybrid table, then consult the push frequency setting in your offline table specify it in the -pushFrequency argument\")\n+        .append(\"\\nIf you have a realtime-only table, then the default behavior is to assume that your queries need all data in memory all the time\")\n+        .append(\"\\nHowever, if most of your queries are going to be for (say) the last 96 hours, then you can specify that in -retentionHours\")\n+        .append(\"\\nDoing so will let this program assume that you are willing to take a page hit when querying older data\")\n+        .append(\"\\nand optimize memory and number of hosts accordingly.\")\n+        ;\n+    System.out.println(builder.toString());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b898f4166950ba60e8ab64ea1bd0ec13ac9ea642"}, "originalPosition": 98}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDMzMzUxMQ==", "bodyText": "No, sout. Think of this as a part of the result. When users cut/paste the results of the command, I found myself asking them : \"So, what arguments were provided to the command?\" We can now say \"cut-paste everything under the === line\" and get all information we want.", "url": "https://github.com/apache/pinot/pull/5737#discussion_r460333511", "createdAt": "2020-07-24T23:52:03Z", "author": {"login": "mcvsubbu"}, "path": "pinot-tools/src/main/java/org/apache/pinot/tools/admin/command/RealtimeProvisioningHelperCommand.java", "diffHunk": "@@ -145,6 +146,20 @@ public boolean getHelp() {\n     return _help;\n   }\n \n+  @Override\n+  public void printExamples() {\n+    StringBuilder builder = new StringBuilder();\n+    builder.append(\"\\n\\nThis command allows you to estimate the capacity needed for provisioning realtime hosts\")\n+        .append(\"It assumes that there is no upper limit to the amount of memory you can mmap\")\n+        .append(\"\\nIf you have a hybrid table, then consult the push frequency setting in your offline table specify it in the -pushFrequency argument\")\n+        .append(\"\\nIf you have a realtime-only table, then the default behavior is to assume that your queries need all data in memory all the time\")\n+        .append(\"\\nHowever, if most of your queries are going to be for (say) the last 96 hours, then you can specify that in -retentionHours\")\n+        .append(\"\\nDoing so will let this program assume that you are willing to take a page hit when querying older data\")\n+        .append(\"\\nand optimize memory and number of hosts accordingly.\")\n+        ;\n+    System.out.println(builder.toString());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDI0MTQ3OQ=="}, "originalCommit": {"oid": "b898f4166950ba60e8ab64ea1bd0ec13ac9ea642"}, "originalPosition": 98}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3MjQ2MDE5OnYy", "diffSide": "RIGHT", "path": "pinot-tools/src/main/java/org/apache/pinot/tools/admin/command/RealtimeProvisioningHelperCommand.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxOToyMjoxNlrOG27FlA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNVQwMDozNjo0OVrOG3A-cw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDI0NDM3Mg==", "bodyText": "thats over 3 weeks for a weekly push. SHould it instead be 7days + 72h for weekly and 31 days + 72h for monthly?", "url": "https://github.com/apache/pinot/pull/5737#discussion_r460244372", "createdAt": "2020-07-24T19:22:16Z", "author": {"login": "npawar"}, "path": "pinot-tools/src/main/java/org/apache/pinot/tools/admin/command/RealtimeProvisioningHelperCommand.java", "diffHunk": "@@ -158,17 +173,36 @@ public boolean execute()\n       throw new RuntimeException(\"Exception in reading table config from file \" + _tableConfigFile, e);\n     }\n \n+    StringBuilder note = new StringBuilder();\n+    note.append(\"\\nNote:\\n\");\n     int numReplicas = tableConfig.getValidationConfig().getReplicasPerPartitionNumber();\n-    if (_retentionHours == 0) {\n-      if (tableConfig.getValidationConfig().getSegmentPushFrequency().equalsIgnoreCase(\"hourly\")) {\n-        _retentionHours = DEFAULT_RETENTION_FOR_HOURLY_PUSH;\n+    int tableRetentionHours = (int) TimeUnit.valueOf(tableConfig.getValidationConfig().getRetentionTimeUnit())\n+            .toHours(Long.parseLong(tableConfig.getValidationConfig().getRetentionTimeValue()));\n+    if (_retentionHours > 0) {\n+      note.append(\"\\n* Table retention and push frequency ignored for determining retentionHours\");\n+    } else {\n+      if (_pushFrequency == null) {\n+        // This is a realtime-only table. Pick up the retention time\n+        _retentionHours = tableRetentionHours;\n+        note.append(\"\\n* Retention hours taken from tableConfig\");\n       } else {\n-        _retentionHours = DEFAULT_RETENTION_FOR_DAILY_PUSH;\n+        if (\"hourly\".equalsIgnoreCase(_pushFrequency)) {\n+          _retentionHours = DEFAULT_RETENTION_FOR_HOURLY_PUSH;\n+        } else if (\"daily\".equalsIgnoreCase(_pushFrequency)) {\n+          _retentionHours = DEFAULT_RETENTION_FOR_DAILY_PUSH;\n+        } else if (\"weekly\".equalsIgnoreCase(_pushFrequency)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b898f4166950ba60e8ab64ea1bd0ec13ac9ea642"}, "originalPosition": 129}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDM0MDg1MQ==", "bodyText": "Done", "url": "https://github.com/apache/pinot/pull/5737#discussion_r460340851", "createdAt": "2020-07-25T00:36:49Z", "author": {"login": "mcvsubbu"}, "path": "pinot-tools/src/main/java/org/apache/pinot/tools/admin/command/RealtimeProvisioningHelperCommand.java", "diffHunk": "@@ -158,17 +173,36 @@ public boolean execute()\n       throw new RuntimeException(\"Exception in reading table config from file \" + _tableConfigFile, e);\n     }\n \n+    StringBuilder note = new StringBuilder();\n+    note.append(\"\\nNote:\\n\");\n     int numReplicas = tableConfig.getValidationConfig().getReplicasPerPartitionNumber();\n-    if (_retentionHours == 0) {\n-      if (tableConfig.getValidationConfig().getSegmentPushFrequency().equalsIgnoreCase(\"hourly\")) {\n-        _retentionHours = DEFAULT_RETENTION_FOR_HOURLY_PUSH;\n+    int tableRetentionHours = (int) TimeUnit.valueOf(tableConfig.getValidationConfig().getRetentionTimeUnit())\n+            .toHours(Long.parseLong(tableConfig.getValidationConfig().getRetentionTimeValue()));\n+    if (_retentionHours > 0) {\n+      note.append(\"\\n* Table retention and push frequency ignored for determining retentionHours\");\n+    } else {\n+      if (_pushFrequency == null) {\n+        // This is a realtime-only table. Pick up the retention time\n+        _retentionHours = tableRetentionHours;\n+        note.append(\"\\n* Retention hours taken from tableConfig\");\n       } else {\n-        _retentionHours = DEFAULT_RETENTION_FOR_DAILY_PUSH;\n+        if (\"hourly\".equalsIgnoreCase(_pushFrequency)) {\n+          _retentionHours = DEFAULT_RETENTION_FOR_HOURLY_PUSH;\n+        } else if (\"daily\".equalsIgnoreCase(_pushFrequency)) {\n+          _retentionHours = DEFAULT_RETENTION_FOR_DAILY_PUSH;\n+        } else if (\"weekly\".equalsIgnoreCase(_pushFrequency)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDI0NDM3Mg=="}, "originalCommit": {"oid": "b898f4166950ba60e8ab64ea1bd0ec13ac9ea642"}, "originalPosition": 129}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3MjQ2MzkwOnYy", "diffSide": "RIGHT", "path": "pinot-tools/src/main/java/org/apache/pinot/tools/admin/command/RealtimeProvisioningHelperCommand.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxOToyMzozMVrOG27H4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQyMzo1MjoyN1rOG3AiDw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDI0NDk2Mw==", "bodyText": "use LOGGER in all these lines?", "url": "https://github.com/apache/pinot/pull/5737#discussion_r460244963", "createdAt": "2020-07-24T19:23:31Z", "author": {"login": "npawar"}, "path": "pinot-tools/src/main/java/org/apache/pinot/tools/admin/command/RealtimeProvisioningHelperCommand.java", "diffHunk": "@@ -177,25 +211,26 @@ public boolean execute()\n     // Completed: Use multiple (completedSize,numHours) data points to calculate completed size for our numHours\n     File sampleCompletedSegmentFile = new File(_sampleCompletedSegmentDir);\n \n-    long sampleSegmentConsumedSeconds =\n-        TimeUnit.SECONDS.convert(TimeUtils.convertPeriodToMillis(_periodSampleSegmentConsumed), TimeUnit.MILLISECONDS);\n-\n     long maxUsableHostMemBytes = DataSizeUtils.toBytes(_maxUsableHostMemory);\n \n     MemoryEstimator memoryEstimator =\n-        new MemoryEstimator(tableConfig, sampleCompletedSegmentFile, sampleSegmentConsumedSeconds,\n-            maxUsableHostMemBytes);\n+        new MemoryEstimator(tableConfig, sampleCompletedSegmentFile, _ingestionRate, maxUsableHostMemBytes, tableRetentionHours);\n     File sampleStatsHistory = memoryEstimator.initializeStatsHistory();\n     memoryEstimator\n         .estimateMemoryUsed(sampleStatsHistory, numHosts, numHours, totalConsumingPartitions, _retentionHours);\n \n+    note.append(\"\\n* See https://docs.pinot.apache.org/operators/operating-pinot/tuning/realtime\");\n     // TODO: Make a recommendation of what config to choose by considering more inputs such as qps\n-    LOGGER.info(\"\\nMemory used per host\");\n-    displayResults(memoryEstimator.getTotalMemoryPerHost(), numHosts, numHours);\n+    System.out.println(\"\\n============================================================\\n\" + toString());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b898f4166950ba60e8ab64ea1bd0ec13ac9ea642"}, "originalPosition": 168}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDMzMzU4Mw==", "bodyText": "No, it will be same as the existing  display() methods. So, sout it is.", "url": "https://github.com/apache/pinot/pull/5737#discussion_r460333583", "createdAt": "2020-07-24T23:52:27Z", "author": {"login": "mcvsubbu"}, "path": "pinot-tools/src/main/java/org/apache/pinot/tools/admin/command/RealtimeProvisioningHelperCommand.java", "diffHunk": "@@ -177,25 +211,26 @@ public boolean execute()\n     // Completed: Use multiple (completedSize,numHours) data points to calculate completed size for our numHours\n     File sampleCompletedSegmentFile = new File(_sampleCompletedSegmentDir);\n \n-    long sampleSegmentConsumedSeconds =\n-        TimeUnit.SECONDS.convert(TimeUtils.convertPeriodToMillis(_periodSampleSegmentConsumed), TimeUnit.MILLISECONDS);\n-\n     long maxUsableHostMemBytes = DataSizeUtils.toBytes(_maxUsableHostMemory);\n \n     MemoryEstimator memoryEstimator =\n-        new MemoryEstimator(tableConfig, sampleCompletedSegmentFile, sampleSegmentConsumedSeconds,\n-            maxUsableHostMemBytes);\n+        new MemoryEstimator(tableConfig, sampleCompletedSegmentFile, _ingestionRate, maxUsableHostMemBytes, tableRetentionHours);\n     File sampleStatsHistory = memoryEstimator.initializeStatsHistory();\n     memoryEstimator\n         .estimateMemoryUsed(sampleStatsHistory, numHosts, numHours, totalConsumingPartitions, _retentionHours);\n \n+    note.append(\"\\n* See https://docs.pinot.apache.org/operators/operating-pinot/tuning/realtime\");\n     // TODO: Make a recommendation of what config to choose by considering more inputs such as qps\n-    LOGGER.info(\"\\nMemory used per host\");\n-    displayResults(memoryEstimator.getTotalMemoryPerHost(), numHosts, numHours);\n+    System.out.println(\"\\n============================================================\\n\" + toString());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDI0NDk2Mw=="}, "originalCommit": {"oid": "b898f4166950ba60e8ab64ea1bd0ec13ac9ea642"}, "originalPosition": 168}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3MjQ2OTYwOnYy", "diffSide": "RIGHT", "path": "pinot-tools/src/main/java/org/apache/pinot/tools/admin/command/RealtimeProvisioningHelperCommand.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxOToyNTozMVrOG27Lcg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQyMzo1MzoyN1rOG3Aiqw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDI0NTg3NA==", "bodyText": "I don't follow what \"Number of segments queries per host\" means. Won't that depend on the specific query patterns? Some more info about this in the log might help", "url": "https://github.com/apache/pinot/pull/5737#discussion_r460245874", "createdAt": "2020-07-24T19:25:31Z", "author": {"login": "npawar"}, "path": "pinot-tools/src/main/java/org/apache/pinot/tools/admin/command/RealtimeProvisioningHelperCommand.java", "diffHunk": "@@ -177,25 +211,26 @@ public boolean execute()\n     // Completed: Use multiple (completedSize,numHours) data points to calculate completed size for our numHours\n     File sampleCompletedSegmentFile = new File(_sampleCompletedSegmentDir);\n \n-    long sampleSegmentConsumedSeconds =\n-        TimeUnit.SECONDS.convert(TimeUtils.convertPeriodToMillis(_periodSampleSegmentConsumed), TimeUnit.MILLISECONDS);\n-\n     long maxUsableHostMemBytes = DataSizeUtils.toBytes(_maxUsableHostMemory);\n \n     MemoryEstimator memoryEstimator =\n-        new MemoryEstimator(tableConfig, sampleCompletedSegmentFile, sampleSegmentConsumedSeconds,\n-            maxUsableHostMemBytes);\n+        new MemoryEstimator(tableConfig, sampleCompletedSegmentFile, _ingestionRate, maxUsableHostMemBytes, tableRetentionHours);\n     File sampleStatsHistory = memoryEstimator.initializeStatsHistory();\n     memoryEstimator\n         .estimateMemoryUsed(sampleStatsHistory, numHosts, numHours, totalConsumingPartitions, _retentionHours);\n \n+    note.append(\"\\n* See https://docs.pinot.apache.org/operators/operating-pinot/tuning/realtime\");\n     // TODO: Make a recommendation of what config to choose by considering more inputs such as qps\n-    LOGGER.info(\"\\nMemory used per host\");\n-    displayResults(memoryEstimator.getTotalMemoryPerHost(), numHosts, numHours);\n+    System.out.println(\"\\n============================================================\\n\" + toString());\n+    System.out.println(note.toString());\n+    LOGGER.info(\"\\nMemory used per host (Active/Mapped)\");\n+    displayResults(memoryEstimator.getActiveMemoryPerHost(), numHosts, numHours);\n     LOGGER.info(\"\\nOptimal segment size\");\n     displayResults(memoryEstimator.getOptimalSegmentSize(), numHosts, numHours);\n     LOGGER.info(\"\\nConsuming memory\");\n     displayResults(memoryEstimator.getConsumingMemoryPerHost(), numHosts, numHours);\n+    LOGGER.info(\"\\nNumber of segments queried per host\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b898f4166950ba60e8ab64ea1bd0ec13ac9ea642"}, "originalPosition": 176}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDMzMzczOQ==", "bodyText": "I will add that in gitbooks. This is the number of segments that that fall within the \"retentionHours\", if you will. We cannot document everyting in the command output, but I plan to add significant doc to gitbook.", "url": "https://github.com/apache/pinot/pull/5737#discussion_r460333739", "createdAt": "2020-07-24T23:53:27Z", "author": {"login": "mcvsubbu"}, "path": "pinot-tools/src/main/java/org/apache/pinot/tools/admin/command/RealtimeProvisioningHelperCommand.java", "diffHunk": "@@ -177,25 +211,26 @@ public boolean execute()\n     // Completed: Use multiple (completedSize,numHours) data points to calculate completed size for our numHours\n     File sampleCompletedSegmentFile = new File(_sampleCompletedSegmentDir);\n \n-    long sampleSegmentConsumedSeconds =\n-        TimeUnit.SECONDS.convert(TimeUtils.convertPeriodToMillis(_periodSampleSegmentConsumed), TimeUnit.MILLISECONDS);\n-\n     long maxUsableHostMemBytes = DataSizeUtils.toBytes(_maxUsableHostMemory);\n \n     MemoryEstimator memoryEstimator =\n-        new MemoryEstimator(tableConfig, sampleCompletedSegmentFile, sampleSegmentConsumedSeconds,\n-            maxUsableHostMemBytes);\n+        new MemoryEstimator(tableConfig, sampleCompletedSegmentFile, _ingestionRate, maxUsableHostMemBytes, tableRetentionHours);\n     File sampleStatsHistory = memoryEstimator.initializeStatsHistory();\n     memoryEstimator\n         .estimateMemoryUsed(sampleStatsHistory, numHosts, numHours, totalConsumingPartitions, _retentionHours);\n \n+    note.append(\"\\n* See https://docs.pinot.apache.org/operators/operating-pinot/tuning/realtime\");\n     // TODO: Make a recommendation of what config to choose by considering more inputs such as qps\n-    LOGGER.info(\"\\nMemory used per host\");\n-    displayResults(memoryEstimator.getTotalMemoryPerHost(), numHosts, numHours);\n+    System.out.println(\"\\n============================================================\\n\" + toString());\n+    System.out.println(note.toString());\n+    LOGGER.info(\"\\nMemory used per host (Active/Mapped)\");\n+    displayResults(memoryEstimator.getActiveMemoryPerHost(), numHosts, numHours);\n     LOGGER.info(\"\\nOptimal segment size\");\n     displayResults(memoryEstimator.getOptimalSegmentSize(), numHosts, numHours);\n     LOGGER.info(\"\\nConsuming memory\");\n     displayResults(memoryEstimator.getConsumingMemoryPerHost(), numHosts, numHours);\n+    LOGGER.info(\"\\nNumber of segments queried per host\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDI0NTg3NA=="}, "originalCommit": {"oid": "b898f4166950ba60e8ab64ea1bd0ec13ac9ea642"}, "originalPosition": 176}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3MzAxNjk3OnYy", "diffSide": "RIGHT", "path": "pinot-tools/src/main/java/org/apache/pinot/tools/admin/command/RealtimeProvisioningHelperCommand.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQyMzozMDoyNFrOG3ARRg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQyMzo1Mzo1N1rOG3AjDA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDMyOTI4Ng==", "bodyText": "can we add \"since retentionHours is provided\" to this message. Otherwise it looks like it is flagging something that went wrong", "url": "https://github.com/apache/pinot/pull/5737#discussion_r460329286", "createdAt": "2020-07-24T23:30:24Z", "author": {"login": "npawar"}, "path": "pinot-tools/src/main/java/org/apache/pinot/tools/admin/command/RealtimeProvisioningHelperCommand.java", "diffHunk": "@@ -158,17 +173,36 @@ public boolean execute()\n       throw new RuntimeException(\"Exception in reading table config from file \" + _tableConfigFile, e);\n     }\n \n+    StringBuilder note = new StringBuilder();\n+    note.append(\"\\nNote:\\n\");\n     int numReplicas = tableConfig.getValidationConfig().getReplicasPerPartitionNumber();\n-    if (_retentionHours == 0) {\n-      if (tableConfig.getValidationConfig().getSegmentPushFrequency().equalsIgnoreCase(\"hourly\")) {\n-        _retentionHours = DEFAULT_RETENTION_FOR_HOURLY_PUSH;\n+    int tableRetentionHours = (int) TimeUnit.valueOf(tableConfig.getValidationConfig().getRetentionTimeUnit())\n+            .toHours(Long.parseLong(tableConfig.getValidationConfig().getRetentionTimeValue()));\n+    if (_retentionHours > 0) {\n+      note.append(\"\\n* Table retention and push frequency ignored for determining retentionHours\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b898f4166950ba60e8ab64ea1bd0ec13ac9ea642"}, "originalPosition": 117}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDMzMzgzNg==", "bodyText": "ok", "url": "https://github.com/apache/pinot/pull/5737#discussion_r460333836", "createdAt": "2020-07-24T23:53:57Z", "author": {"login": "mcvsubbu"}, "path": "pinot-tools/src/main/java/org/apache/pinot/tools/admin/command/RealtimeProvisioningHelperCommand.java", "diffHunk": "@@ -158,17 +173,36 @@ public boolean execute()\n       throw new RuntimeException(\"Exception in reading table config from file \" + _tableConfigFile, e);\n     }\n \n+    StringBuilder note = new StringBuilder();\n+    note.append(\"\\nNote:\\n\");\n     int numReplicas = tableConfig.getValidationConfig().getReplicasPerPartitionNumber();\n-    if (_retentionHours == 0) {\n-      if (tableConfig.getValidationConfig().getSegmentPushFrequency().equalsIgnoreCase(\"hourly\")) {\n-        _retentionHours = DEFAULT_RETENTION_FOR_HOURLY_PUSH;\n+    int tableRetentionHours = (int) TimeUnit.valueOf(tableConfig.getValidationConfig().getRetentionTimeUnit())\n+            .toHours(Long.parseLong(tableConfig.getValidationConfig().getRetentionTimeValue()));\n+    if (_retentionHours > 0) {\n+      note.append(\"\\n* Table retention and push frequency ignored for determining retentionHours\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDMyOTI4Ng=="}, "originalCommit": {"oid": "b898f4166950ba60e8ab64ea1bd0ec13ac9ea642"}, "originalPosition": 117}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4190, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}