{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM4NjIwODAx", "number": 5608, "title": "Pinot Configuration Refactoring - Phase 1", "bodyText": "Description\nDISCLAIMER : This PR looks scarier than it is :)\nThis change introduces configuration externalization to work with different environments. Properties can now be loaded from properties files, YAML files, environment variables, and command-line arguments to externalize configuration independently.  Properties are now accessible from a PinotConfiguration class which act has an adapter to Apache Commons  Configuration. This initial phase does not change how services are started and how they are configured. A future commit will enable properties loaded from PINOT_X environment variables.\nMotivation\nIn order to ease cloud native deployments of Pinot, it is a general best practice to allow software to be configured with environment variables or CLI arguments. Config file based configuration is not considered best practice as it requires additional effort to mount volumes and maintain the property files. CLI arguments and environment variables are easily referred in an helm chart, a docker-compose manifest or simple docker run commands.\nFeatures:\nConfiguration overwrite priority:\nConstructing a PinotConfiguration instance offers the opportunity to provide base properties and environment variables. Properties will also be loaded from any config file referenced with a config.paths\u00a0property found in the base properties or  environment variables. The priority is established as follow: Base properties > Env variables > Config Files\nAs explained previously, this initial phase only loads properties from existing CLI commands and config files (Base properties > Config Files).\nProperty relaxed binding\nThe PinotConfiguration class introduces a relaxed property binding mechanism to help, as much as possible, to follow support different property naming conventions such as kebab case, camel case, snake case and system environment variables for operating system with strict rules. For example, Linux shell variables can contain only letters (a to z or A to Z), numbers (0 to 9) or the underscore character (_). By convention, Unix shell variables will also have their names in UPPERCASE.\nThe following table provides example of all valid combination to define the controller.submodule.alerts.emailaddress property. Any the supported naming convention can be used to define and retrieve properties.\n\n\n\nProperty\nNote\n\n\n\n\ncontroller.sub-module.alerts.email-address\nKebab case, which is recommended for use in\u00a0.properties\u00a0and\u00a0.yml\u00a0files.\n\n\ncontroller.subModule.alerts.emailAddress\nStandard camel case syntax.\n\n\ncontroller.sub_module.alerts.email_address\nSnake case notation, which is an alternative format for use in\u00a0.properties\u00a0and\u00a0.yml\u00a0files.\n\n\nPINOT_CONTROLLER_SUBMODULE_ALERTS_EMAILADDRESS\nUpper case format, which is recommended when using system environment variables.\n\n\n\nSide effects of the change:\nThis first phase of the refactoring only introduces the new PinotConfiguration\u00a0abstraction. The dependency  org.apache.commons.configuration.Configuration used to be to be referred in a big portion of the Pinot codebase. It has  been replaced by the Pinot specific PinotConfiguration class. This change will simplify a future upgrade of Apache Commons Configuration from 1.x to 2.x that introduces new package namespaces and breaking changes.\nBreaking change and upgrade notes\nNo impact or configuration changes on standard deployments. With Apache Commons Configuration, duplicate properties may be defined and will be made available as string array values. Prior to this change, retrieving a property with getString would return the first occurrences of the duplicate property. Using getStringArray would return all occurrences. With this new change, duplicate properties defined from multiple sources (eg: env variables and properties files) will be overwritten using the overwrite priority described earlier. Array properties now needs to be defined as a comma separated string from a single properties. Duplicate properties from difference sources will not be merged to an array property. Only the property highest priority source will be available from PinotConfiguration.getProperty.\nNotes for reviewers:\nThe change impacts a large portion of the codebase. While it can be scary, the changes represents mostly a replacement of org.apache.commons.configuration.Configuration to org.apache.pinot.spi.env.PinotConfiguration. The following classes should be the main area of attention for the review:\n\norg.apache.pinot.spi.env.PinotConfiguration\norg.apache.pinot.controller.ControllerConf\norg.apache.pinot.tools.utils.PinotConfigUtils\norg.apache.pinot.spi.env.CommonsConfigurationUtils\norg.apache.pinot.spi.env.Environment\norg.apache.pinot.spi.env.SystemEnvironment\n\nRelease Notes\nNo release note required since these changes are not user facing yet.\nDocumentation\nNo documentation change required since these changes are not user facing yet. Future phase of this refactoring will enable environment variables properties and include documentation changes to expose the relaxed binding mechanism.", "createdAt": "2020-06-23T14:44:57Z", "url": "https://github.com/apache/pinot/pull/5608", "merged": true, "mergeCommit": {"oid": "a7ad5870a8907647844755688d07ad6fe5cdff41"}, "closed": true, "closedAt": "2020-07-07T17:56:03Z", "author": {"login": "daniellavoie"}, "timelineItems": {"totalCount": 19, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcuGpwJABqjM0NzMzNTQwMDY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcyprfBAFqTQzNzc3MTQxOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e3e6af2df8d66cf0f0139ace2d355fb0397c4f93", "author": {"user": {"login": "daniellavoie", "name": "Daniel Lavoie"}}, "url": "https://github.com/apache/pinot/commit/e3e6af2df8d66cf0f0139ace2d355fb0397c4f93", "committedDate": "2020-06-23T14:05:43Z", "message": "Pinot Configuration Refactoring - Phase 1\n\nThis change introduces configuration externalization to work with\ndifferent environments. Properties can now be loaded from properties\nfiles, YAML files, environment variables, and command-line arguments to\nexternalize configuration independently. Properties are now accessible\nfrom a `PinotConfiguration` class which act has an adapter to Apache\nCommons Configuration. This initial phase does not change how services\nare started and how they are configurated. A future commit will\nintroduce property loaded from `PINOT_X` environment variables.\n\nFeatures:\n  Configuration overwrite priority:\n    Constructing a `PinotConfiguration` instance offers the opportunity\n    to provide base properties, environment variables. Properties\n    will also be loaded from any config file referenced with a\n    config.paths`\u00a0property found in the base properties or environment\n    variable. The priority is established as follow:\n      Base properties > Env variables > Config Files\n\n    As explained previously, this initial phase only loads properties\n    from existing CLI commands and config files\n    (Base properties > Config Files).\n\nSide effects of the change:\n  This first phase of the refactoring only introduces the new\n  `PinotConfiguration`\u00a0abstraction. The dependency\n  `org.apache.commons.configuration.Configuration` used\n  to be to be referred in a big portion of the Pinot codebase. It has\n  been replaced by the Pinot specific `PinotConfiguration` class. This\n  change will simplify the a future upgrade of Apache Commons\n  Configuration from 1.x to 2.x that new package namespaces and\n  breaking changes.\n\nBreaking change:\n  With Apache Commons Configuration, duplicate properties may be\n  defined and will be made available as string array values. Prior to\n  this change, retrieving a property with `getString` would return the\n  first occurrences of the duplicate property. Using `getStringArray`\n  would return all occurrences. With this new change, duplicate\n  properties defined from multiple sources (eg: env variables and\n  properties files) will be overwritten using the overwrite priority\n  described earlier. Array properties now needs to be defined as a comma\n  seperated string from a single properties. Duplicate properties from\n  difference sources will not be merged to an array property. Only the\n  property highest priority source will be available from\n  `PinotConfiguration.getProperty`\n\nNotes for reviewer:\n  The change impacts a large portion of the codebase. While it can be\n  scary, the changes represents mostly a replacement of\n  `org.apache.commons.configuration.Configuration` to\n  `org.apache.pinot.spi.env.PinotConfiguration`. The following classes\n  should be the main area of attention for the review:\n    `org.apache.pinot.spi.env.PinotConfiguration`\n    `org.apache.pinot.controller.ControllerConf`\n    `org.apache.pinot.tools.utils.PinotConfigUtils`\n    `org.apache.pinot.spi.env.CommonsConfigurationUtils`\n    `org.apache.pinot.spi.env.Environment`\n    `org.apache.pinot.spi.env.SystemEnvironment`"}, "afterCommit": {"oid": "d41fb36c0daec208c33e08edccb6550ee035b944", "author": {"user": {"login": "daniellavoie", "name": "Daniel Lavoie"}}, "url": "https://github.com/apache/pinot/commit/d41fb36c0daec208c33e08edccb6550ee035b944", "committedDate": "2020-06-23T14:51:22Z", "message": "Pinot Configuration Refactoring - Phase 1\n\nThis change introduces configuration externalization to work with\ndifferent environments. Properties can now be loaded from properties\nfiles, YAML files, environment variables, and command-line arguments to\nexternalize configuration independently. Properties are now accessible\nfrom a `PinotConfiguration` class which act has an adapter to Apache\nCommons Configuration. This initial phase does not change how services\nare started and how they are configurated. A future commit will\nintroduce property loaded from `PINOT_X` environment variables.\n\nFeatures:\n  Configuration overwrite priority:\n    Constructing a `PinotConfiguration` instance offers the opportunity\n    to provide base properties, environment variables. Properties\n    will also be loaded from any config file referenced with a\n    config.paths`\u00a0property found in the base properties or environment\n    variable. The priority is established as follow:\n      Base properties > Env variables > Config Files\n\n    As explained previously, this initial phase only loads properties\n    from existing CLI commands and config files\n    (Base properties > Config Files).\n\nSide effects of the change:\n  This first phase of the refactoring only introduces the new\n  `PinotConfiguration`\u00a0abstraction. The dependency\n  `org.apache.commons.configuration.Configuration` used\n  to be to be referred in a big portion of the Pinot codebase. It has\n  been replaced by the Pinot specific `PinotConfiguration` class. This\n  change will simplify the a future upgrade of Apache Commons\n  Configuration from 1.x to 2.x that new package namespaces and\n  breaking changes.\n\nBreaking change:\n  With Apache Commons Configuration, duplicate properties may be\n  defined and will be made available as string array values. Prior to\n  this change, retrieving a property with `getString` would return the\n  first occurrences of the duplicate property. Using `getStringArray`\n  would return all occurrences. With this new change, duplicate\n  properties defined from multiple sources (eg: env variables and\n  properties files) will be overwritten using the overwrite priority\n  described earlier. Array properties now needs to be defined as a comma\n  seperated string from a single properties. Duplicate properties from\n  difference sources will not be merged to an array property. Only the\n  property highest priority source will be available from\n  `PinotConfiguration.getProperty`\n\nNotes for reviewer:\n  The change impacts a large portion of the codebase. While it can be\n  scary, the changes represents mostly a replacement of\n  `org.apache.commons.configuration.Configuration` to\n  `org.apache.pinot.spi.env.PinotConfiguration`. The following classes\n  should be the main area of attention for the review:\n    `org.apache.pinot.spi.env.PinotConfiguration`\n    `org.apache.pinot.controller.ControllerConf`\n    `org.apache.pinot.tools.utils.PinotConfigUtils`\n    `org.apache.pinot.spi.env.CommonsConfigurationUtils`\n    `org.apache.pinot.spi.env.Environment`\n    `org.apache.pinot.spi.env.SystemEnvironment`"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d41fb36c0daec208c33e08edccb6550ee035b944", "author": {"user": {"login": "daniellavoie", "name": "Daniel Lavoie"}}, "url": "https://github.com/apache/pinot/commit/d41fb36c0daec208c33e08edccb6550ee035b944", "committedDate": "2020-06-23T14:51:22Z", "message": "Pinot Configuration Refactoring - Phase 1\n\nThis change introduces configuration externalization to work with\ndifferent environments. Properties can now be loaded from properties\nfiles, YAML files, environment variables, and command-line arguments to\nexternalize configuration independently. Properties are now accessible\nfrom a `PinotConfiguration` class which act has an adapter to Apache\nCommons Configuration. This initial phase does not change how services\nare started and how they are configurated. A future commit will\nintroduce property loaded from `PINOT_X` environment variables.\n\nFeatures:\n  Configuration overwrite priority:\n    Constructing a `PinotConfiguration` instance offers the opportunity\n    to provide base properties, environment variables. Properties\n    will also be loaded from any config file referenced with a\n    config.paths`\u00a0property found in the base properties or environment\n    variable. The priority is established as follow:\n      Base properties > Env variables > Config Files\n\n    As explained previously, this initial phase only loads properties\n    from existing CLI commands and config files\n    (Base properties > Config Files).\n\nSide effects of the change:\n  This first phase of the refactoring only introduces the new\n  `PinotConfiguration`\u00a0abstraction. The dependency\n  `org.apache.commons.configuration.Configuration` used\n  to be to be referred in a big portion of the Pinot codebase. It has\n  been replaced by the Pinot specific `PinotConfiguration` class. This\n  change will simplify the a future upgrade of Apache Commons\n  Configuration from 1.x to 2.x that new package namespaces and\n  breaking changes.\n\nBreaking change:\n  With Apache Commons Configuration, duplicate properties may be\n  defined and will be made available as string array values. Prior to\n  this change, retrieving a property with `getString` would return the\n  first occurrences of the duplicate property. Using `getStringArray`\n  would return all occurrences. With this new change, duplicate\n  properties defined from multiple sources (eg: env variables and\n  properties files) will be overwritten using the overwrite priority\n  described earlier. Array properties now needs to be defined as a comma\n  seperated string from a single properties. Duplicate properties from\n  difference sources will not be merged to an array property. Only the\n  property highest priority source will be available from\n  `PinotConfiguration.getProperty`\n\nNotes for reviewer:\n  The change impacts a large portion of the codebase. While it can be\n  scary, the changes represents mostly a replacement of\n  `org.apache.commons.configuration.Configuration` to\n  `org.apache.pinot.spi.env.PinotConfiguration`. The following classes\n  should be the main area of attention for the review:\n    `org.apache.pinot.spi.env.PinotConfiguration`\n    `org.apache.pinot.controller.ControllerConf`\n    `org.apache.pinot.tools.utils.PinotConfigUtils`\n    `org.apache.pinot.spi.env.CommonsConfigurationUtils`\n    `org.apache.pinot.spi.env.Environment`\n    `org.apache.pinot.spi.env.SystemEnvironment`"}, "afterCommit": {"oid": "f2c7d0cfb8c1e92d708bca13174c15bdeaa4ad5f", "author": {"user": {"login": "daniellavoie", "name": "Daniel Lavoie"}}, "url": "https://github.com/apache/pinot/commit/f2c7d0cfb8c1e92d708bca13174c15bdeaa4ad5f", "committedDate": "2020-06-23T14:59:19Z", "message": "Pinot Configuration Refactoring - Phase 1\n\nThis change introduces configuration externalization to work with\ndifferent environments. Properties can now be loaded from properties\nfiles, YAML files, environment variables, and command-line arguments to\nexternalize configuration independently. Properties are now accessible\nfrom a `PinotConfiguration` class which act has an adapter to Apache\nCommons Configuration. This initial phase does not change how services\nare started and how they are configurated. A future commit will\nintroduce property loaded from `PINOT_X` environment variables.\n\nFeatures:\n  Configuration overwrite priority:\n    Constructing a `PinotConfiguration` instance offers the opportunity\n    to provide base properties, environment variables. Properties\n    will also be loaded from any config file referenced with a\n    config.paths`\u00a0property found in the base properties or environment\n    variable. The priority is established as follow:\n      Base properties > Env variables > Config Files\n\n    As explained previously, this initial phase only loads properties\n    from existing CLI commands and config files\n    (Base properties > Config Files).\n\nSide effects of the change:\n  This first phase of the refactoring only introduces the new\n  `PinotConfiguration`\u00a0abstraction. The dependency\n  `org.apache.commons.configuration.Configuration` used\n  to be to be referred in a big portion of the Pinot codebase. It has\n  been replaced by the Pinot specific `PinotConfiguration` class. This\n  change will simplify the a future upgrade of Apache Commons\n  Configuration from 1.x to 2.x that new package namespaces and\n  breaking changes.\n\nBreaking change:\n  With Apache Commons Configuration, duplicate properties may be\n  defined and will be made available as string array values. Prior to\n  this change, retrieving a property with `getString` would return the\n  first occurrences of the duplicate property. Using `getStringArray`\n  would return all occurrences. With this new change, duplicate\n  properties defined from multiple sources (eg: env variables and\n  properties files) will be overwritten using the overwrite priority\n  described earlier. Array properties now needs to be defined as a comma\n  seperated string from a single properties. Duplicate properties from\n  difference sources will not be merged to an array property. Only the\n  property highest priority source will be available from\n  `PinotConfiguration.getProperty`\n\nNotes for reviewer:\n  The change impacts a large portion of the codebase. While it can be\n  scary, the changes represents mostly a replacement of\n  `org.apache.commons.configuration.Configuration` to\n  `org.apache.pinot.spi.env.PinotConfiguration`. The following classes\n  should be the main area of attention for the review:\n    `org.apache.pinot.spi.env.PinotConfiguration`\n    `org.apache.pinot.controller.ControllerConf`\n    `org.apache.pinot.tools.utils.PinotConfigUtils`\n    `org.apache.pinot.spi.env.CommonsConfigurationUtils`\n    `org.apache.pinot.spi.env.Environment`\n    `org.apache.pinot.spi.env.SystemEnvironment`"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f2c7d0cfb8c1e92d708bca13174c15bdeaa4ad5f", "author": {"user": {"login": "daniellavoie", "name": "Daniel Lavoie"}}, "url": "https://github.com/apache/pinot/commit/f2c7d0cfb8c1e92d708bca13174c15bdeaa4ad5f", "committedDate": "2020-06-23T14:59:19Z", "message": "Pinot Configuration Refactoring - Phase 1\n\nThis change introduces configuration externalization to work with\ndifferent environments. Properties can now be loaded from properties\nfiles, YAML files, environment variables, and command-line arguments to\nexternalize configuration independently. Properties are now accessible\nfrom a `PinotConfiguration` class which act has an adapter to Apache\nCommons Configuration. This initial phase does not change how services\nare started and how they are configurated. A future commit will\nintroduce property loaded from `PINOT_X` environment variables.\n\nFeatures:\n  Configuration overwrite priority:\n    Constructing a `PinotConfiguration` instance offers the opportunity\n    to provide base properties, environment variables. Properties\n    will also be loaded from any config file referenced with a\n    config.paths`\u00a0property found in the base properties or environment\n    variable. The priority is established as follow:\n      Base properties > Env variables > Config Files\n\n    As explained previously, this initial phase only loads properties\n    from existing CLI commands and config files\n    (Base properties > Config Files).\n\nSide effects of the change:\n  This first phase of the refactoring only introduces the new\n  `PinotConfiguration`\u00a0abstraction. The dependency\n  `org.apache.commons.configuration.Configuration` used\n  to be to be referred in a big portion of the Pinot codebase. It has\n  been replaced by the Pinot specific `PinotConfiguration` class. This\n  change will simplify the a future upgrade of Apache Commons\n  Configuration from 1.x to 2.x that new package namespaces and\n  breaking changes.\n\nBreaking change:\n  With Apache Commons Configuration, duplicate properties may be\n  defined and will be made available as string array values. Prior to\n  this change, retrieving a property with `getString` would return the\n  first occurrences of the duplicate property. Using `getStringArray`\n  would return all occurrences. With this new change, duplicate\n  properties defined from multiple sources (eg: env variables and\n  properties files) will be overwritten using the overwrite priority\n  described earlier. Array properties now needs to be defined as a comma\n  seperated string from a single properties. Duplicate properties from\n  difference sources will not be merged to an array property. Only the\n  property highest priority source will be available from\n  `PinotConfiguration.getProperty`\n\nNotes for reviewer:\n  The change impacts a large portion of the codebase. While it can be\n  scary, the changes represents mostly a replacement of\n  `org.apache.commons.configuration.Configuration` to\n  `org.apache.pinot.spi.env.PinotConfiguration`. The following classes\n  should be the main area of attention for the review:\n    `org.apache.pinot.spi.env.PinotConfiguration`\n    `org.apache.pinot.controller.ControllerConf`\n    `org.apache.pinot.tools.utils.PinotConfigUtils`\n    `org.apache.pinot.spi.env.CommonsConfigurationUtils`\n    `org.apache.pinot.spi.env.Environment`\n    `org.apache.pinot.spi.env.SystemEnvironment`"}, "afterCommit": {"oid": "f4a476d1c5d2d39de5269919922bc4b68ccb4fec", "author": {"user": {"login": "daniellavoie", "name": "Daniel Lavoie"}}, "url": "https://github.com/apache/pinot/commit/f4a476d1c5d2d39de5269919922bc4b68ccb4fec", "committedDate": "2020-06-23T15:05:32Z", "message": "Pinot Configuration Refactoring - Phase 1\n\nThis change introduces configuration externalization to work with\ndifferent environments. Properties can now be loaded from properties\nfiles, YAML files, environment variables, and command-line arguments to\nexternalize configuration independently. Properties are now accessible\nfrom a `PinotConfiguration` class which act has an adapter to Apache\nCommons Configuration. This initial phase does not change how services\nare started and how they are configurated. A future commit will\nintroduce property loaded from `PINOT_X` environment variables.\n\nFeatures:\n  Configuration overwrite priority:\n    Constructing a `PinotConfiguration` instance offers the opportunity\n    to provide base properties, environment variables. Properties\n    will also be loaded from any config file referenced with a\n    config.paths`\u00a0property found in the base properties or environment\n    variable. The priority is established as follow:\n      Base properties > Env variables > Config Files\n\n    As explained previously, this initial phase only loads properties\n    from existing CLI commands and config files\n    (Base properties > Config Files).\n\nSide effects of the change:\n  This first phase of the refactoring only introduces the new\n  `PinotConfiguration`\u00a0abstraction. The dependency\n  `org.apache.commons.configuration.Configuration` used\n  to be to be referred in a big portion of the Pinot codebase. It has\n  been replaced by the Pinot specific `PinotConfiguration` class. This\n  change will simplify the a future upgrade of Apache Commons\n  Configuration from 1.x to 2.x that new package namespaces and\n  breaking changes.\n\nBreaking change:\n  With Apache Commons Configuration, duplicate properties may be\n  defined and will be made available as string array values. Prior to\n  this change, retrieving a property with `getString` would return the\n  first occurrences of the duplicate property. Using `getStringArray`\n  would return all occurrences. With this new change, duplicate\n  properties defined from multiple sources (eg: env variables and\n  properties files) will be overwritten using the overwrite priority\n  described earlier. Array properties now needs to be defined as a comma\n  seperated string from a single properties. Duplicate properties from\n  difference sources will not be merged to an array property. Only the\n  property highest priority source will be available from\n  `PinotConfiguration.getProperty`\n\nNotes for reviewer:\n  The change impacts a large portion of the codebase. While it can be\n  scary, the changes represents mostly a replacement of\n  `org.apache.commons.configuration.Configuration` to\n  `org.apache.pinot.spi.env.PinotConfiguration`. The following classes\n  should be the main area of attention for the review:\n    `org.apache.pinot.spi.env.PinotConfiguration`\n    `org.apache.pinot.controller.ControllerConf`\n    `org.apache.pinot.tools.utils.PinotConfigUtils`\n    `org.apache.pinot.spi.env.CommonsConfigurationUtils`\n    `org.apache.pinot.spi.env.Environment`\n    `org.apache.pinot.spi.env.SystemEnvironment`"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f4a476d1c5d2d39de5269919922bc4b68ccb4fec", "author": {"user": {"login": "daniellavoie", "name": "Daniel Lavoie"}}, "url": "https://github.com/apache/pinot/commit/f4a476d1c5d2d39de5269919922bc4b68ccb4fec", "committedDate": "2020-06-23T15:05:32Z", "message": "Pinot Configuration Refactoring - Phase 1\n\nThis change introduces configuration externalization to work with\ndifferent environments. Properties can now be loaded from properties\nfiles, YAML files, environment variables, and command-line arguments to\nexternalize configuration independently. Properties are now accessible\nfrom a `PinotConfiguration` class which act has an adapter to Apache\nCommons Configuration. This initial phase does not change how services\nare started and how they are configurated. A future commit will\nintroduce property loaded from `PINOT_X` environment variables.\n\nFeatures:\n  Configuration overwrite priority:\n    Constructing a `PinotConfiguration` instance offers the opportunity\n    to provide base properties, environment variables. Properties\n    will also be loaded from any config file referenced with a\n    config.paths`\u00a0property found in the base properties or environment\n    variable. The priority is established as follow:\n      Base properties > Env variables > Config Files\n\n    As explained previously, this initial phase only loads properties\n    from existing CLI commands and config files\n    (Base properties > Config Files).\n\nSide effects of the change:\n  This first phase of the refactoring only introduces the new\n  `PinotConfiguration`\u00a0abstraction. The dependency\n  `org.apache.commons.configuration.Configuration` used\n  to be to be referred in a big portion of the Pinot codebase. It has\n  been replaced by the Pinot specific `PinotConfiguration` class. This\n  change will simplify the a future upgrade of Apache Commons\n  Configuration from 1.x to 2.x that new package namespaces and\n  breaking changes.\n\nBreaking change:\n  With Apache Commons Configuration, duplicate properties may be\n  defined and will be made available as string array values. Prior to\n  this change, retrieving a property with `getString` would return the\n  first occurrences of the duplicate property. Using `getStringArray`\n  would return all occurrences. With this new change, duplicate\n  properties defined from multiple sources (eg: env variables and\n  properties files) will be overwritten using the overwrite priority\n  described earlier. Array properties now needs to be defined as a comma\n  seperated string from a single properties. Duplicate properties from\n  difference sources will not be merged to an array property. Only the\n  property highest priority source will be available from\n  `PinotConfiguration.getProperty`\n\nNotes for reviewer:\n  The change impacts a large portion of the codebase. While it can be\n  scary, the changes represents mostly a replacement of\n  `org.apache.commons.configuration.Configuration` to\n  `org.apache.pinot.spi.env.PinotConfiguration`. The following classes\n  should be the main area of attention for the review:\n    `org.apache.pinot.spi.env.PinotConfiguration`\n    `org.apache.pinot.controller.ControllerConf`\n    `org.apache.pinot.tools.utils.PinotConfigUtils`\n    `org.apache.pinot.spi.env.CommonsConfigurationUtils`\n    `org.apache.pinot.spi.env.Environment`\n    `org.apache.pinot.spi.env.SystemEnvironment`"}, "afterCommit": {"oid": "e511c045d8d1e520c284fc47d236d3d737905590", "author": {"user": {"login": "daniellavoie", "name": "Daniel Lavoie"}}, "url": "https://github.com/apache/pinot/commit/e511c045d8d1e520c284fc47d236d3d737905590", "committedDate": "2020-06-23T15:29:10Z", "message": "Pinot Configuration Refactoring - Phase 1\n\nThis change introduces configuration externalization to work with\ndifferent environments. Properties can now be loaded from properties\nfiles, YAML files, environment variables, and command-line arguments to\nexternalize configuration independently. Properties are now accessible\nfrom a `PinotConfiguration` class which act has an adapter to Apache\nCommons Configuration. This initial phase does not change how services\nare started and how they are configurated. A future commit will\nintroduce property loaded from `PINOT_X` environment variables.\n\nFeatures:\n  Configuration overwrite priority:\n    Constructing a `PinotConfiguration` instance offers the opportunity\n    to provide base properties, environment variables. Properties\n    will also be loaded from any config file referenced with a\n    config.paths`\u00a0property found in the base properties or environment\n    variable. The priority is established as follow:\n      Base properties > Env variables > Config Files\n\n    As explained previously, this initial phase only loads properties\n    from existing CLI commands and config files\n    (Base properties > Config Files).\n\nSide effects of the change:\n  This first phase of the refactoring only introduces the new\n  `PinotConfiguration`\u00a0abstraction. The dependency\n  `org.apache.commons.configuration.Configuration` used\n  to be to be referred in a big portion of the Pinot codebase. It has\n  been replaced by the Pinot specific `PinotConfiguration` class. This\n  change will simplify the a future upgrade of Apache Commons\n  Configuration from 1.x to 2.x that new package namespaces and\n  breaking changes.\n\nBreaking change:\n  With Apache Commons Configuration, duplicate properties may be\n  defined and will be made available as string array values. Prior to\n  this change, retrieving a property with `getString` would return the\n  first occurrences of the duplicate property. Using `getStringArray`\n  would return all occurrences. With this new change, duplicate\n  properties defined from multiple sources (eg: env variables and\n  properties files) will be overwritten using the overwrite priority\n  described earlier. Array properties now needs to be defined as a comma\n  seperated string from a single properties. Duplicate properties from\n  difference sources will not be merged to an array property. Only the\n  property highest priority source will be available from\n  `PinotConfiguration.getProperty`\n\nNotes for reviewer:\n  The change impacts a large portion of the codebase. While it can be\n  scary, the changes represents mostly a replacement of\n  `org.apache.commons.configuration.Configuration` to\n  `org.apache.pinot.spi.env.PinotConfiguration`. The following classes\n  should be the main area of attention for the review:\n    `org.apache.pinot.spi.env.PinotConfiguration`\n    `org.apache.pinot.controller.ControllerConf`\n    `org.apache.pinot.tools.utils.PinotConfigUtils`\n    `org.apache.pinot.spi.env.CommonsConfigurationUtils`\n    `org.apache.pinot.spi.env.Environment`\n    `org.apache.pinot.spi.env.SystemEnvironment`"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e511c045d8d1e520c284fc47d236d3d737905590", "author": {"user": {"login": "daniellavoie", "name": "Daniel Lavoie"}}, "url": "https://github.com/apache/pinot/commit/e511c045d8d1e520c284fc47d236d3d737905590", "committedDate": "2020-06-23T15:29:10Z", "message": "Pinot Configuration Refactoring - Phase 1\n\nThis change introduces configuration externalization to work with\ndifferent environments. Properties can now be loaded from properties\nfiles, YAML files, environment variables, and command-line arguments to\nexternalize configuration independently. Properties are now accessible\nfrom a `PinotConfiguration` class which act has an adapter to Apache\nCommons Configuration. This initial phase does not change how services\nare started and how they are configurated. A future commit will\nintroduce property loaded from `PINOT_X` environment variables.\n\nFeatures:\n  Configuration overwrite priority:\n    Constructing a `PinotConfiguration` instance offers the opportunity\n    to provide base properties, environment variables. Properties\n    will also be loaded from any config file referenced with a\n    config.paths`\u00a0property found in the base properties or environment\n    variable. The priority is established as follow:\n      Base properties > Env variables > Config Files\n\n    As explained previously, this initial phase only loads properties\n    from existing CLI commands and config files\n    (Base properties > Config Files).\n\nSide effects of the change:\n  This first phase of the refactoring only introduces the new\n  `PinotConfiguration`\u00a0abstraction. The dependency\n  `org.apache.commons.configuration.Configuration` used\n  to be to be referred in a big portion of the Pinot codebase. It has\n  been replaced by the Pinot specific `PinotConfiguration` class. This\n  change will simplify the a future upgrade of Apache Commons\n  Configuration from 1.x to 2.x that new package namespaces and\n  breaking changes.\n\nBreaking change:\n  With Apache Commons Configuration, duplicate properties may be\n  defined and will be made available as string array values. Prior to\n  this change, retrieving a property with `getString` would return the\n  first occurrences of the duplicate property. Using `getStringArray`\n  would return all occurrences. With this new change, duplicate\n  properties defined from multiple sources (eg: env variables and\n  properties files) will be overwritten using the overwrite priority\n  described earlier. Array properties now needs to be defined as a comma\n  seperated string from a single properties. Duplicate properties from\n  difference sources will not be merged to an array property. Only the\n  property highest priority source will be available from\n  `PinotConfiguration.getProperty`\n\nNotes for reviewer:\n  The change impacts a large portion of the codebase. While it can be\n  scary, the changes represents mostly a replacement of\n  `org.apache.commons.configuration.Configuration` to\n  `org.apache.pinot.spi.env.PinotConfiguration`. The following classes\n  should be the main area of attention for the review:\n    `org.apache.pinot.spi.env.PinotConfiguration`\n    `org.apache.pinot.controller.ControllerConf`\n    `org.apache.pinot.tools.utils.PinotConfigUtils`\n    `org.apache.pinot.spi.env.CommonsConfigurationUtils`\n    `org.apache.pinot.spi.env.Environment`\n    `org.apache.pinot.spi.env.SystemEnvironment`"}, "afterCommit": {"oid": "d287a9fa0e342755ca9270d9ae4b0178c14219af", "author": {"user": {"login": "daniellavoie", "name": "Daniel Lavoie"}}, "url": "https://github.com/apache/pinot/commit/d287a9fa0e342755ca9270d9ae4b0178c14219af", "committedDate": "2020-06-23T19:58:06Z", "message": "Pinot Configuration Refactoring - Phase 1\n\nThis change introduces configuration externalization to work with\ndifferent environments. Properties can now be loaded from properties\nfiles, YAML files, environment variables, and command-line arguments to\nexternalize configuration independently. Properties are now accessible\nfrom a `PinotConfiguration` class which act has an adapter to Apache\nCommons Configuration. This initial phase does not change how services\nare started and how they are configurated. A future commit will\nintroduce property loaded from `PINOT_X` environment variables.\n\nFeatures:\n  Configuration overwrite priority:\n    Constructing a `PinotConfiguration` instance offers the opportunity\n    to provide base properties, environment variables. Properties\n    will also be loaded from any config file referenced with a\n    config.paths`\u00a0property found in the base properties or environment\n    variable. The priority is established as follow:\n      Base properties > Env variables > Config Files\n\n    As explained previously, this initial phase only loads properties\n    from existing CLI commands and config files\n    (Base properties > Config Files).\n\nSide effects of the change:\n  This first phase of the refactoring only introduces the new\n  `PinotConfiguration`\u00a0abstraction. The dependency\n  `org.apache.commons.configuration.Configuration` used\n  to be to be referred in a big portion of the Pinot codebase. It has\n  been replaced by the Pinot specific `PinotConfiguration` class. This\n  change will simplify the a future upgrade of Apache Commons\n  Configuration from 1.x to 2.x that new package namespaces and\n  breaking changes.\n\nBreaking change:\n  With Apache Commons Configuration, duplicate properties may be\n  defined and will be made available as string array values. Prior to\n  this change, retrieving a property with `getString` would return the\n  first occurrences of the duplicate property. Using `getStringArray`\n  would return all occurrences. With this new change, duplicate\n  properties defined from multiple sources (eg: env variables and\n  properties files) will be overwritten using the overwrite priority\n  described earlier. Array properties now needs to be defined as a comma\n  seperated string from a single properties. Duplicate properties from\n  difference sources will not be merged to an array property. Only the\n  property highest priority source will be available from\n  `PinotConfiguration.getProperty`\n\nNotes for reviewer:\n  The change impacts a large portion of the codebase. While it can be\n  scary, the changes represents mostly a replacement of\n  `org.apache.commons.configuration.Configuration` to\n  `org.apache.pinot.spi.env.PinotConfiguration`. The following classes\n  should be the main area of attention for the review:\n    `org.apache.pinot.spi.env.PinotConfiguration`\n    `org.apache.pinot.controller.ControllerConf`\n    `org.apache.pinot.tools.utils.PinotConfigUtils`\n    `org.apache.pinot.spi.env.CommonsConfigurationUtils`\n    `org.apache.pinot.spi.env.Environment`\n    `org.apache.pinot.spi.env.SystemEnvironment`"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d287a9fa0e342755ca9270d9ae4b0178c14219af", "author": {"user": {"login": "daniellavoie", "name": "Daniel Lavoie"}}, "url": "https://github.com/apache/pinot/commit/d287a9fa0e342755ca9270d9ae4b0178c14219af", "committedDate": "2020-06-23T19:58:06Z", "message": "Pinot Configuration Refactoring - Phase 1\n\nThis change introduces configuration externalization to work with\ndifferent environments. Properties can now be loaded from properties\nfiles, YAML files, environment variables, and command-line arguments to\nexternalize configuration independently. Properties are now accessible\nfrom a `PinotConfiguration` class which act has an adapter to Apache\nCommons Configuration. This initial phase does not change how services\nare started and how they are configurated. A future commit will\nintroduce property loaded from `PINOT_X` environment variables.\n\nFeatures:\n  Configuration overwrite priority:\n    Constructing a `PinotConfiguration` instance offers the opportunity\n    to provide base properties, environment variables. Properties\n    will also be loaded from any config file referenced with a\n    config.paths`\u00a0property found in the base properties or environment\n    variable. The priority is established as follow:\n      Base properties > Env variables > Config Files\n\n    As explained previously, this initial phase only loads properties\n    from existing CLI commands and config files\n    (Base properties > Config Files).\n\nSide effects of the change:\n  This first phase of the refactoring only introduces the new\n  `PinotConfiguration`\u00a0abstraction. The dependency\n  `org.apache.commons.configuration.Configuration` used\n  to be to be referred in a big portion of the Pinot codebase. It has\n  been replaced by the Pinot specific `PinotConfiguration` class. This\n  change will simplify the a future upgrade of Apache Commons\n  Configuration from 1.x to 2.x that new package namespaces and\n  breaking changes.\n\nBreaking change:\n  With Apache Commons Configuration, duplicate properties may be\n  defined and will be made available as string array values. Prior to\n  this change, retrieving a property with `getString` would return the\n  first occurrences of the duplicate property. Using `getStringArray`\n  would return all occurrences. With this new change, duplicate\n  properties defined from multiple sources (eg: env variables and\n  properties files) will be overwritten using the overwrite priority\n  described earlier. Array properties now needs to be defined as a comma\n  seperated string from a single properties. Duplicate properties from\n  difference sources will not be merged to an array property. Only the\n  property highest priority source will be available from\n  `PinotConfiguration.getProperty`\n\nNotes for reviewer:\n  The change impacts a large portion of the codebase. While it can be\n  scary, the changes represents mostly a replacement of\n  `org.apache.commons.configuration.Configuration` to\n  `org.apache.pinot.spi.env.PinotConfiguration`. The following classes\n  should be the main area of attention for the review:\n    `org.apache.pinot.spi.env.PinotConfiguration`\n    `org.apache.pinot.controller.ControllerConf`\n    `org.apache.pinot.tools.utils.PinotConfigUtils`\n    `org.apache.pinot.spi.env.CommonsConfigurationUtils`\n    `org.apache.pinot.spi.env.Environment`\n    `org.apache.pinot.spi.env.SystemEnvironment`"}, "afterCommit": {"oid": "bc971a4321c67a0867e50f5897626eb60cc5b59c", "author": {"user": {"login": "daniellavoie", "name": "Daniel Lavoie"}}, "url": "https://github.com/apache/pinot/commit/bc971a4321c67a0867e50f5897626eb60cc5b59c", "committedDate": "2020-06-23T22:48:26Z", "message": "Pinot Configuration Refactoring - Phase 1\n\nThis change introduces configuration externalization to work with\ndifferent environments. Properties can now be loaded from properties\nfiles, YAML files, environment variables, and command-line arguments to\nexternalize configuration independently. Properties are now accessible\nfrom a `PinotConfiguration` class which act has an adapter to Apache\nCommons Configuration. This initial phase does not change how services\nare started and how they are configurated. A future commit will\nintroduce property loaded from `PINOT_X` environment variables.\n\nFeatures:\n  Configuration overwrite priority:\n    Constructing a `PinotConfiguration` instance offers the opportunity\n    to provide base properties, environment variables. Properties\n    will also be loaded from any config file referenced with a\n    config.paths`\u00a0property found in the base properties or environment\n    variable. The priority is established as follow:\n      Base properties > Env variables > Config Files\n\n    As explained previously, this initial phase only loads properties\n    from existing CLI commands and config files\n    (Base properties > Config Files).\n\nSide effects of the change:\n  This first phase of the refactoring only introduces the new\n  `PinotConfiguration`\u00a0abstraction. The dependency\n  `org.apache.commons.configuration.Configuration` used\n  to be to be referred in a big portion of the Pinot codebase. It has\n  been replaced by the Pinot specific `PinotConfiguration` class. This\n  change will simplify the a future upgrade of Apache Commons\n  Configuration from 1.x to 2.x that new package namespaces and\n  breaking changes.\n\nBreaking change:\n  With Apache Commons Configuration, duplicate properties may be\n  defined and will be made available as string array values. Prior to\n  this change, retrieving a property with `getString` would return the\n  first occurrences of the duplicate property. Using `getStringArray`\n  would return all occurrences. With this new change, duplicate\n  properties defined from multiple sources (eg: env variables and\n  properties files) will be overwritten using the overwrite priority\n  described earlier. Array properties now needs to be defined as a comma\n  seperated string from a single properties. Duplicate properties from\n  difference sources will not be merged to an array property. Only the\n  property highest priority source will be available from\n  `PinotConfiguration.getProperty`\n\nNotes for reviewer:\n  The change impacts a large portion of the codebase. While it can be\n  scary, the changes represents mostly a replacement of\n  `org.apache.commons.configuration.Configuration` to\n  `org.apache.pinot.spi.env.PinotConfiguration`. The following classes\n  should be the main area of attention for the review:\n    `org.apache.pinot.spi.env.PinotConfiguration`\n    `org.apache.pinot.controller.ControllerConf`\n    `org.apache.pinot.tools.utils.PinotConfigUtils`\n    `org.apache.pinot.spi.env.CommonsConfigurationUtils`\n    `org.apache.pinot.spi.env.Environment`\n    `org.apache.pinot.spi.env.SystemEnvironment`"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "bc971a4321c67a0867e50f5897626eb60cc5b59c", "author": {"user": {"login": "daniellavoie", "name": "Daniel Lavoie"}}, "url": "https://github.com/apache/pinot/commit/bc971a4321c67a0867e50f5897626eb60cc5b59c", "committedDate": "2020-06-23T22:48:26Z", "message": "Pinot Configuration Refactoring - Phase 1\n\nThis change introduces configuration externalization to work with\ndifferent environments. Properties can now be loaded from properties\nfiles, YAML files, environment variables, and command-line arguments to\nexternalize configuration independently. Properties are now accessible\nfrom a `PinotConfiguration` class which act has an adapter to Apache\nCommons Configuration. This initial phase does not change how services\nare started and how they are configurated. A future commit will\nintroduce property loaded from `PINOT_X` environment variables.\n\nFeatures:\n  Configuration overwrite priority:\n    Constructing a `PinotConfiguration` instance offers the opportunity\n    to provide base properties, environment variables. Properties\n    will also be loaded from any config file referenced with a\n    config.paths`\u00a0property found in the base properties or environment\n    variable. The priority is established as follow:\n      Base properties > Env variables > Config Files\n\n    As explained previously, this initial phase only loads properties\n    from existing CLI commands and config files\n    (Base properties > Config Files).\n\nSide effects of the change:\n  This first phase of the refactoring only introduces the new\n  `PinotConfiguration`\u00a0abstraction. The dependency\n  `org.apache.commons.configuration.Configuration` used\n  to be to be referred in a big portion of the Pinot codebase. It has\n  been replaced by the Pinot specific `PinotConfiguration` class. This\n  change will simplify the a future upgrade of Apache Commons\n  Configuration from 1.x to 2.x that new package namespaces and\n  breaking changes.\n\nBreaking change:\n  With Apache Commons Configuration, duplicate properties may be\n  defined and will be made available as string array values. Prior to\n  this change, retrieving a property with `getString` would return the\n  first occurrences of the duplicate property. Using `getStringArray`\n  would return all occurrences. With this new change, duplicate\n  properties defined from multiple sources (eg: env variables and\n  properties files) will be overwritten using the overwrite priority\n  described earlier. Array properties now needs to be defined as a comma\n  seperated string from a single properties. Duplicate properties from\n  difference sources will not be merged to an array property. Only the\n  property highest priority source will be available from\n  `PinotConfiguration.getProperty`\n\nNotes for reviewer:\n  The change impacts a large portion of the codebase. While it can be\n  scary, the changes represents mostly a replacement of\n  `org.apache.commons.configuration.Configuration` to\n  `org.apache.pinot.spi.env.PinotConfiguration`. The following classes\n  should be the main area of attention for the review:\n    `org.apache.pinot.spi.env.PinotConfiguration`\n    `org.apache.pinot.controller.ControllerConf`\n    `org.apache.pinot.tools.utils.PinotConfigUtils`\n    `org.apache.pinot.spi.env.CommonsConfigurationUtils`\n    `org.apache.pinot.spi.env.Environment`\n    `org.apache.pinot.spi.env.SystemEnvironment`"}, "afterCommit": {"oid": "fb7322076c92dedb9e2975fd22ef3db99227e8df", "author": {"user": {"login": "daniellavoie", "name": "Daniel Lavoie"}}, "url": "https://github.com/apache/pinot/commit/fb7322076c92dedb9e2975fd22ef3db99227e8df", "committedDate": "2020-06-24T00:42:36Z", "message": "Pinot Configuration Refactoring - Phase 1\n\nThis change introduces configuration externalization to work with\ndifferent environments. Properties can now be loaded from properties\nfiles, YAML files, environment variables, and command-line arguments to\nexternalize configuration independently. Properties are now accessible\nfrom a `PinotConfiguration` class which act has an adapter to Apache\nCommons Configuration. This initial phase does not change how services\nare started and how they are configurated. A future commit will\nintroduce property loaded from `PINOT_X` environment variables.\n\nFeatures:\n  Upgrade Apache Commons Configuration to 1.10\n  Configuration overwrite priority:\n    Constructing a `PinotConfiguration` instance offers the opportunity\n    to provide base properties, environment variables. Properties\n    will also be loaded from any config file referenced with a\n    config.paths`\u00a0property found in the base properties or environment\n    variable. The priority is established as follow:\n      Base properties > Env variables > Config Files\n\n    As explained previously, this initial phase only loads properties\n    from existing CLI commands and config files\n    (Base properties > Config Files).\n\nSide effects of the change:\n  This first phase of the refactoring only introduces the new\n  `PinotConfiguration`\u00a0abstraction. The dependency\n  `org.apache.commons.configuration.Configuration` used\n  to be to be referred in a big portion of the Pinot codebase. It has\n  been replaced by the Pinot specific `PinotConfiguration` class. This\n  change will simplify the a future upgrade of Apache Commons\n  Configuration from 1.x to 2.x that new package namespaces and\n  breaking changes.\n\nBreaking change:\n  With Apache Commons Configuration, duplicate properties may be\n  defined and will be made available as string array values. Prior to\n  this change, retrieving a property with `getString` would return the\n  first occurrences of the duplicate property. Using `getStringArray`\n  would return all occurrences. With this new change, duplicate\n  properties defined from multiple sources (eg: env variables and\n  properties files) will be overwritten using the overwrite priority\n  described earlier. Array properties now needs to be defined as a comma\n  seperated string from a single properties. Duplicate properties from\n  difference sources will not be merged to an array property. Only the\n  property highest priority source will be available from\n  `PinotConfiguration.getProperty`\n\nNotes for reviewer:\n  The change impacts a large portion of the codebase. While it can be\n  scary, the changes represents mostly a replacement of\n  `org.apache.commons.configuration.Configuration` to\n  `org.apache.pinot.spi.env.PinotConfiguration`. The following classes\n  should be the main area of attention for the review:\n    `org.apache.pinot.spi.env.PinotConfiguration`\n    `org.apache.pinot.controller.ControllerConf`\n    `org.apache.pinot.tools.utils.PinotConfigUtils`\n    `org.apache.pinot.spi.env.CommonsConfigurationUtils`\n    `org.apache.pinot.spi.env.Environment`\n    `org.apache.pinot.spi.env.SystemEnvironment`"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM3NjU5NDY3", "url": "https://github.com/apache/pinot/pull/5608#pullrequestreview-437659467", "createdAt": "2020-06-25T16:25:01Z", "commit": {"oid": "fb7322076c92dedb9e2975fd22ef3db99227e8df"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQxNjoyNTowMVrOGpCXHQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQxNjoyNTowMVrOGpCXHQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTY4MzQ4NQ==", "bodyText": "java docs please", "url": "https://github.com/apache/pinot/pull/5608#discussion_r445683485", "createdAt": "2020-06-25T16:25:01Z", "author": {"login": "kishoreg"}, "path": "pinot-spi/src/main/java/org/apache/pinot/spi/env/PinotConfiguration.java", "diffHunk": "@@ -0,0 +1,250 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.spi.env;\n+\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import org.apache.commons.configuration.CompositeConfiguration;\n+import org.apache.commons.configuration.Configuration;\n+import org.apache.commons.configuration.ConfigurationException;\n+import org.apache.commons.configuration.ConfigurationUtils;\n+import org.apache.commons.configuration.MapConfiguration;\n+import org.apache.commons.configuration.PropertiesConfiguration;\n+import org.apache.pinot.spi.ingestion.batch.spec.PinotFSSpec;\n+\n+\n+public class PinotConfiguration {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fb7322076c92dedb9e2975fd22ef3db99227e8df"}, "originalPosition": 39}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQwNTI0NTA2", "url": "https://github.com/apache/pinot/pull/5608#pullrequestreview-440524506", "createdAt": "2020-07-01T03:36:54Z", "commit": {"oid": "fb7322076c92dedb9e2975fd22ef3db99227e8df"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQwMzozNjo1NFrOGrVqmQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQwMzo0MDo0MFrOGrVt3A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODA5NjkyMQ==", "bodyText": "I saw the property names would be converted to lower cases, that means e.g. controller.upload.onlineToOfflineTimeout will become controller.upload.onlinetoofflinetimeout. Is that intentional?", "url": "https://github.com/apache/pinot/pull/5608#discussion_r448096921", "createdAt": "2020-07-01T03:36:54Z", "author": {"login": "jackjlli"}, "path": "pinot-spi/src/main/java/org/apache/pinot/spi/env/PinotConfiguration.java", "diffHunk": "@@ -0,0 +1,250 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.spi.env;\n+\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import org.apache.commons.configuration.CompositeConfiguration;\n+import org.apache.commons.configuration.Configuration;\n+import org.apache.commons.configuration.ConfigurationException;\n+import org.apache.commons.configuration.ConfigurationUtils;\n+import org.apache.commons.configuration.MapConfiguration;\n+import org.apache.commons.configuration.PropertiesConfiguration;\n+import org.apache.pinot.spi.ingestion.batch.spec.PinotFSSpec;\n+\n+\n+public class PinotConfiguration {\n+  public static final String CONFIG_PATHS_KEY = \"config.paths\";\n+\n+  private final CompositeConfiguration configuration;\n+\n+  public PinotConfiguration() {\n+    this(new HashMap<>());\n+  }\n+\n+  public PinotConfiguration(Configuration baseConfiguration) {\n+    this.configuration =\n+        new CompositeConfiguration(computeConfigurationsFromSources(baseConfiguration, new HashMap<>()));\n+  }\n+\n+  public PinotConfiguration(Map<String, Object> baseProperties) {\n+    this(baseProperties, new HashMap<>());\n+  }\n+\n+  public PinotConfiguration(Map<String, Object> baseProperties, Map<String, String> environmentVariables) {\n+    this.configuration =\n+        new CompositeConfiguration(computeConfigurationsFromSources(baseProperties, environmentVariables));\n+  }\n+\n+  public PinotConfiguration(PinotFSSpec pinotFSSpec) {\n+    this(Optional.ofNullable(pinotFSSpec.getConfigs())\n+        .map(configs -> configs.entrySet().stream().collect(\n+            Collectors.<Entry<String, String>, String, Object> toMap(Entry::getKey, entry -> entry.getValue())))\n+        .orElseGet(() -> new HashMap<>()));\n+  }\n+\n+  /**\n+   * Overwrites a property value in memory.\n+   * \n+   * @param name of the property to append in memory. Applies relaxed binding on the property name.\n+   * @param value to overwrite in memory\n+   * \n+   * @deprecated Configurations should be immutable. Prefer creating a new {@link #PinotConfiguration} with base properties to overwrite properties.\n+   */\n+  public void addProperty(String name, Object value) {\n+    configuration.addProperty(relaxPropertyName(name), value);\n+  }\n+\n+  public PinotConfiguration clone() {\n+    return new PinotConfiguration(ConfigurationUtils.cloneConfiguration(configuration));\n+  }\n+\n+  private static List<Configuration> computeConfigurationsFromSources(Configuration baseConfiguration,\n+      Map<String, String> environmentVariables) {\n+    return computeConfigurationsFromSources(relaxConfigurationKeys(baseConfiguration), environmentVariables);\n+  }\n+\n+  private static List<Configuration> computeConfigurationsFromSources(Map<String, Object> baseProperties,\n+      Map<String, String> environmentVariables) {\n+    Map<String, Object> relaxedBaseProperties = relaxProperties(baseProperties);\n+    Map<String, String> relaxedEnvVariables = relaxEnvironmentVariables(environmentVariables);\n+\n+    Stream<Configuration> propertiesFromConfigPaths = Stream\n+        .of(Optional.ofNullable(relaxedBaseProperties.get(CONFIG_PATHS_KEY)).map(Object::toString),\n+            Optional.ofNullable(relaxedEnvVariables.get(CONFIG_PATHS_KEY)))\n+\n+        .filter(Optional::isPresent).map(Optional::get)\n+\n+        .flatMap(configPaths -> Arrays.stream(configPaths.split(\",\")))\n+\n+        .map(PinotConfiguration::loadProperties);\n+\n+    return Stream.concat(Stream.of(relaxedBaseProperties, relaxedEnvVariables).map(MapConfiguration::new),\n+        propertiesFromConfigPaths).collect(Collectors.toList());\n+  }\n+\n+  public boolean containsKey(String key) {\n+    return configuration.containsKey(relaxPropertyName(key));\n+  }\n+\n+  public List<String> getKeys() {\n+    return CommonsConfigurationUtils.getKeys(configuration);\n+  }\n+\n+  public String getProperty(String name) {\n+    return getProperty(name, configuration);\n+  }\n+\n+  private static String getProperty(String name, Configuration configuration) {\n+    return Optional.of(configuration.getStringArray(relaxPropertyName(name)))\n+\n+        .filter(values -> values.length > 0)\n+\n+        .map(Arrays::stream)\n+\n+        .map(stream -> stream.collect(Collectors.joining(\",\")))\n+\n+        .orElse(null);\n+  }\n+\n+  public <T> T getProperty(String name, Class<T> returnType) {\n+    return getProperty(name, null, returnType);\n+  }\n+\n+  public List<String> getProperty(String name, List<String> defaultValue) {\n+    return Optional\n+        .of(Arrays.stream(configuration.getStringArray(relaxPropertyName(name))).collect(Collectors.toList()))\n+        .filter(list -> !list.isEmpty()).orElse(defaultValue);\n+  }\n+\n+  public Object getRawProperty(String name) {\n+    return getRawProperty(name, null);\n+  }\n+\n+  public Object getRawProperty(String name, Object defaultValue) {\n+    String relaxedPropertyName = relaxPropertyName(name);\n+    if (!configuration.containsKey(relaxedPropertyName)) {\n+      return defaultValue;\n+    }\n+\n+    return configuration.getProperty(relaxedPropertyName);\n+  }\n+\n+  public String getProperty(String name, String defaultValue) {\n+    return getRawProperty(name, defaultValue).toString();\n+  }\n+\n+  private <T> T getProperty(String name, T defaultValue, Class<T> returnType) {\n+    String relaxedPropertyName = relaxPropertyName(name);\n+    if (!configuration.containsKey(relaxedPropertyName)) {\n+      return defaultValue;\n+    }\n+\n+    return PropertyConverter.convert(getRawProperty(name, defaultValue), returnType);\n+  }\n+\n+  public boolean getProperty(String name, boolean defaultValue) {\n+    return getProperty(name, defaultValue, Boolean.class);\n+  }\n+\n+  public int getProperty(String name, int defaultValue) {\n+    return getProperty(name, defaultValue, Integer.class);\n+  }\n+\n+  public long getProperty(String name, long defaultValue) {\n+    return getProperty(name, defaultValue, Long.class);\n+  }\n+\n+  public double getProperty(String name, double defaultValue) {\n+    return getProperty(name, defaultValue, Double.class);\n+  }\n+\n+  private static Configuration loadProperties(String configPath) {\n+    try {\n+      PropertiesConfiguration propertiesConfiguration = new PropertiesConfiguration();\n+\n+      propertiesConfiguration.setIOFactory(new ConfigFilePropertyReaderFactory());\n+      if (configPath.startsWith(\"classpath:\")) {\n+        propertiesConfiguration\n+            .load(PinotConfiguration.class.getResourceAsStream(configPath.substring(\"classpath:\".length())));\n+      } else {\n+        propertiesConfiguration.load(configPath);\n+      }\n+\n+      return propertiesConfiguration;\n+    } catch (ConfigurationException e) {\n+      throw new RuntimeException(\"Could not read properties from \" + configPath, e);\n+    }\n+  }\n+\n+  private static Map<String, Object> relaxConfigurationKeys(Configuration configuration) {\n+    return CommonsConfigurationUtils.getKeysStream(configuration)\n+\n+        .collect(Collectors.toMap(PinotConfiguration::relaxPropertyName, key -> getProperty(key, configuration)));\n+  }\n+\n+  private static Map<String, String> relaxEnvironmentVariables(Map<String, String> environmentVariables) {\n+    return environmentVariables.entrySet().stream().filter(entry -> entry.getKey().startsWith(\"PINOT_\"))\n+        .collect(Collectors.toMap(PinotConfiguration::relaxEnvVarName, Entry::getValue));\n+  }\n+\n+  private static String relaxEnvVarName(Entry<String, String> envVarEntry) {\n+    return envVarEntry.getKey().substring(6).replace(\"_\", \".\").toLowerCase();\n+  }\n+\n+  private static Map<String, Object> relaxProperties(Map<String, Object> properties) {\n+    return properties.entrySet().stream()\n+        .collect(Collectors.toMap(PinotConfiguration::relaxPropertyName, Entry::getValue));\n+  }\n+\n+  private static String relaxPropertyName(Entry<String, Object> propertyEntry) {\n+    return relaxPropertyName(propertyEntry.getKey());\n+  }\n+\n+  private static String relaxPropertyName(String propertyName) {\n+    return propertyName.replace(\"-\", \"\").toLowerCase();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fb7322076c92dedb9e2975fd22ef3db99227e8df"}, "originalPosition": 228}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODA5NzI3Nw==", "bodyText": "+1. @daniellavoie can you list out the new conventions in the java docs? Like what we will do for env variable, properties, etc.", "url": "https://github.com/apache/pinot/pull/5608#discussion_r448097277", "createdAt": "2020-07-01T03:38:31Z", "author": {"login": "jackjlli"}, "path": "pinot-spi/src/main/java/org/apache/pinot/spi/env/PinotConfiguration.java", "diffHunk": "@@ -0,0 +1,250 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.spi.env;\n+\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import org.apache.commons.configuration.CompositeConfiguration;\n+import org.apache.commons.configuration.Configuration;\n+import org.apache.commons.configuration.ConfigurationException;\n+import org.apache.commons.configuration.ConfigurationUtils;\n+import org.apache.commons.configuration.MapConfiguration;\n+import org.apache.commons.configuration.PropertiesConfiguration;\n+import org.apache.pinot.spi.ingestion.batch.spec.PinotFSSpec;\n+\n+\n+public class PinotConfiguration {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTY4MzQ4NQ=="}, "originalCommit": {"oid": "fb7322076c92dedb9e2975fd22ef3db99227e8df"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODA5Nzc1Ng==", "bodyText": "import static org.apache.pinot.common.utils.CommonConstants.Helix.*;", "url": "https://github.com/apache/pinot/pull/5608#discussion_r448097756", "createdAt": "2020-07-01T03:40:40Z", "author": {"login": "jackjlli"}, "path": "pinot-server/src/main/java/org/apache/pinot/server/starter/helix/HelixServerStarter.java", "diffHunk": "@@ -18,19 +18,54 @@\n  */\n package org.apache.pinot.server.starter.helix;\n \n-import com.google.common.base.Preconditions;\n-import com.google.common.collect.ImmutableList;\n+import static org.apache.pinot.common.utils.CommonConstants.Helix.CONFIG_OF_SERVER_FLAPPING_TIME_WINDOW_MS;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fb7322076c92dedb9e2975fd22ef3db99227e8df"}, "originalPosition": 6}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "fb7322076c92dedb9e2975fd22ef3db99227e8df", "author": {"user": {"login": "daniellavoie", "name": "Daniel Lavoie"}}, "url": "https://github.com/apache/pinot/commit/fb7322076c92dedb9e2975fd22ef3db99227e8df", "committedDate": "2020-06-24T00:42:36Z", "message": "Pinot Configuration Refactoring - Phase 1\n\nThis change introduces configuration externalization to work with\ndifferent environments. Properties can now be loaded from properties\nfiles, YAML files, environment variables, and command-line arguments to\nexternalize configuration independently. Properties are now accessible\nfrom a `PinotConfiguration` class which act has an adapter to Apache\nCommons Configuration. This initial phase does not change how services\nare started and how they are configurated. A future commit will\nintroduce property loaded from `PINOT_X` environment variables.\n\nFeatures:\n  Upgrade Apache Commons Configuration to 1.10\n  Configuration overwrite priority:\n    Constructing a `PinotConfiguration` instance offers the opportunity\n    to provide base properties, environment variables. Properties\n    will also be loaded from any config file referenced with a\n    config.paths`\u00a0property found in the base properties or environment\n    variable. The priority is established as follow:\n      Base properties > Env variables > Config Files\n\n    As explained previously, this initial phase only loads properties\n    from existing CLI commands and config files\n    (Base properties > Config Files).\n\nSide effects of the change:\n  This first phase of the refactoring only introduces the new\n  `PinotConfiguration`\u00a0abstraction. The dependency\n  `org.apache.commons.configuration.Configuration` used\n  to be to be referred in a big portion of the Pinot codebase. It has\n  been replaced by the Pinot specific `PinotConfiguration` class. This\n  change will simplify the a future upgrade of Apache Commons\n  Configuration from 1.x to 2.x that new package namespaces and\n  breaking changes.\n\nBreaking change:\n  With Apache Commons Configuration, duplicate properties may be\n  defined and will be made available as string array values. Prior to\n  this change, retrieving a property with `getString` would return the\n  first occurrences of the duplicate property. Using `getStringArray`\n  would return all occurrences. With this new change, duplicate\n  properties defined from multiple sources (eg: env variables and\n  properties files) will be overwritten using the overwrite priority\n  described earlier. Array properties now needs to be defined as a comma\n  seperated string from a single properties. Duplicate properties from\n  difference sources will not be merged to an array property. Only the\n  property highest priority source will be available from\n  `PinotConfiguration.getProperty`\n\nNotes for reviewer:\n  The change impacts a large portion of the codebase. While it can be\n  scary, the changes represents mostly a replacement of\n  `org.apache.commons.configuration.Configuration` to\n  `org.apache.pinot.spi.env.PinotConfiguration`. The following classes\n  should be the main area of attention for the review:\n    `org.apache.pinot.spi.env.PinotConfiguration`\n    `org.apache.pinot.controller.ControllerConf`\n    `org.apache.pinot.tools.utils.PinotConfigUtils`\n    `org.apache.pinot.spi.env.CommonsConfigurationUtils`\n    `org.apache.pinot.spi.env.Environment`\n    `org.apache.pinot.spi.env.SystemEnvironment`"}, "afterCommit": {"oid": "01ae67c4064d24df6fab921d26c23ad0990456b7", "author": {"user": {"login": "daniellavoie", "name": "Daniel Lavoie"}}, "url": "https://github.com/apache/pinot/commit/01ae67c4064d24df6fab921d26c23ad0990456b7", "committedDate": "2020-07-01T15:10:27Z", "message": "Pinot Configuration Refactoring - Phase 1\n\nThis change introduces configuration externalization to work with\ndifferent environments. Properties can now be loaded from properties\nfiles, YAML files, environment variables, and command-line arguments to\nexternalize configuration independently. Properties are now accessible\nfrom a `PinotConfiguration` class which act has an adapter to Apache\nCommons Configuration. This initial phase does not change how services\nare started and how they are configurated. A future commit will\nintroduce property loaded from `PINOT_X` environment variables.\n\nFeatures:\n  Upgrade Apache Commons Configuration to 1.10\n  Configuration overwrite priority:\n    Constructing a `PinotConfiguration` instance offers the opportunity\n    to provide base properties, environment variables. Properties\n    will also be loaded from any config file referenced with a\n    config.paths`\u00a0property found in the base properties or environment\n    variable. The priority is established as follow:\n      Base properties > Env variables > Config Files\n\n    As explained previously, this initial phase only loads properties\n    from existing CLI commands and config files\n    (Base properties > Config Files).\n\nSide effects of the change:\n  This first phase of the refactoring only introduces the new\n  `PinotConfiguration`\u00a0abstraction. The dependency\n  `org.apache.commons.configuration.Configuration` used\n  to be to be referred in a big portion of the Pinot codebase. It has\n  been replaced by the Pinot specific `PinotConfiguration` class. This\n  change will simplify the a future upgrade of Apache Commons\n  Configuration from 1.x to 2.x that new package namespaces and\n  breaking changes.\n\nBreaking change:\n  With Apache Commons Configuration, duplicate properties may be\n  defined and will be made available as string array values. Prior to\n  this change, retrieving a property with `getString` would return the\n  first occurrences of the duplicate property. Using `getStringArray`\n  would return all occurrences. With this new change, duplicate\n  properties defined from multiple sources (eg: env variables and\n  properties files) will be overwritten using the overwrite priority\n  described earlier. Array properties now needs to be defined as a comma\n  seperated string from a single properties. Duplicate properties from\n  difference sources will not be merged to an array property. Only the\n  property highest priority source will be available from\n  `PinotConfiguration.getProperty`\n\nNotes for reviewer:\n  The change impacts a large portion of the codebase. While it can be\n  scary, the changes represents mostly a replacement of\n  `org.apache.commons.configuration.Configuration` to\n  `org.apache.pinot.spi.env.PinotConfiguration`. The following classes\n  should be the main area of attention for the review:\n    `org.apache.pinot.spi.env.PinotConfiguration`\n    `org.apache.pinot.controller.ControllerConf`\n    `org.apache.pinot.tools.utils.PinotConfigUtils`\n    `org.apache.pinot.spi.env.CommonsConfigurationUtils`\n    `org.apache.pinot.spi.env.Environment`\n    `org.apache.pinot.spi.env.SystemEnvironment`"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQxMTg2Njk5", "url": "https://github.com/apache/pinot/pull/5608#pullrequestreview-441186699", "createdAt": "2020-07-01T20:48:29Z", "commit": {"oid": "01ae67c4064d24df6fab921d26c23ad0990456b7"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQyMDo0ODoyOVrOGr04CA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQyMDo1Mjo1MlrOGr0_2Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODYwODI2NA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * <pPinot services may retreived configurations from PinotConfiguration independently from any source of configuration. \n          \n          \n            \n             * <p>\n          \n          \n            \n             * Pinot services may retreived configurations from PinotConfiguration independently from any source of configuration.", "url": "https://github.com/apache/pinot/pull/5608#discussion_r448608264", "createdAt": "2020-07-01T20:48:29Z", "author": {"login": "jackjlli"}, "path": "pinot-spi/src/main/java/org/apache/pinot/spi/env/PinotConfiguration.java", "diffHunk": "@@ -0,0 +1,417 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.spi.env;\n+\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import org.apache.commons.configuration.CompositeConfiguration;\n+import org.apache.commons.configuration.Configuration;\n+import org.apache.commons.configuration.ConfigurationException;\n+import org.apache.commons.configuration.MapConfiguration;\n+import org.apache.commons.configuration.PropertiesConfiguration;\n+import org.apache.pinot.spi.ingestion.batch.spec.PinotFSSpec;\n+\n+\n+/**\n+ * <p>\n+ * Provides a configuration abstraction for Pinot to decouple services from configuration sources and frameworks.\n+ * </p>\n+ * <pPinot services may retreived configurations from PinotConfiguration independently from any source of configuration. ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "01ae67c4064d24df6fab921d26c23ad0990456b7"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODYxMDI2NQ==", "bodyText": "Thanks for adding this. It'd be good include the priority to this java docs as well, like the one you mentioned in the description:\nThe priority is established as follow: Base properties > Env variables > Config Files", "url": "https://github.com/apache/pinot/pull/5608#discussion_r448610265", "createdAt": "2020-07-01T20:52:52Z", "author": {"login": "jackjlli"}, "path": "pinot-spi/src/main/java/org/apache/pinot/spi/env/PinotConfiguration.java", "diffHunk": "@@ -0,0 +1,417 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.spi.env;\n+\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import org.apache.commons.configuration.CompositeConfiguration;\n+import org.apache.commons.configuration.Configuration;\n+import org.apache.commons.configuration.ConfigurationException;\n+import org.apache.commons.configuration.MapConfiguration;\n+import org.apache.commons.configuration.PropertiesConfiguration;\n+import org.apache.pinot.spi.ingestion.batch.spec.PinotFSSpec;\n+\n+\n+/**\n+ * <p>\n+ * Provides a configuration abstraction for Pinot to decouple services from configuration sources and frameworks.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "01ae67c4064d24df6fab921d26c23ad0990456b7"}, "originalPosition": 40}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "cdf8877dd1b05f708ca8d9ad68d13b83cc011004", "author": {"user": {"login": "daniellavoie", "name": "Daniel Lavoie"}}, "url": "https://github.com/apache/pinot/commit/cdf8877dd1b05f708ca8d9ad68d13b83cc011004", "committedDate": "2020-07-02T16:40:58Z", "message": "Javadoc formating for PinotConfiguration\n\nCo-authored-by: Jialiang Li <jlli@linkedin.com>"}, "afterCommit": {"oid": "b7a084f57098505630e8ecf9abba64e11935c40d", "author": {"user": {"login": "daniellavoie", "name": "Daniel Lavoie"}}, "url": "https://github.com/apache/pinot/commit/b7a084f57098505630e8ecf9abba64e11935c40d", "committedDate": "2020-07-02T16:43:09Z", "message": "Pinot Configuration Refactoring - Phase 1\n\nThis change introduces configuration externalization to work with\ndifferent environments. Properties can now be loaded from properties\nfiles, YAML files, environment variables, and command-line arguments to\nexternalize configuration independently. Properties are now accessible\nfrom a `PinotConfiguration` class which act has an adapter to Apache\nCommons Configuration. This initial phase does not change how services\nare started and how they are configurated. A future commit will\nintroduce property loaded from `PINOT_X` environment variables.\n\nFeatures:\n  Upgrade Apache Commons Configuration to 1.10\n  Configuration overwrite priority:\n    Constructing a `PinotConfiguration` instance offers the opportunity\n    to provide base properties, environment variables. Properties\n    will also be loaded from any config file referenced with a\n    config.paths`\u00a0property found in the base properties or environment\n    variable. The priority is established as follow:\n      Base properties > Env variables > Config Files\n\n    As explained previously, this initial phase only loads properties\n    from existing CLI commands and config files\n    (Base properties > Config Files).\n\nSide effects of the change:\n  This first phase of the refactoring only introduces the new\n  `PinotConfiguration`\u00a0abstraction. The dependency\n  `org.apache.commons.configuration.Configuration` used\n  to be to be referred in a big portion of the Pinot codebase. It has\n  been replaced by the Pinot specific `PinotConfiguration` class. This\n  change will simplify the a future upgrade of Apache Commons\n  Configuration from 1.x to 2.x that new package namespaces and\n  breaking changes.\n\nBreaking change:\n  With Apache Commons Configuration, duplicate properties may be\n  defined and will be made available as string array values. Prior to\n  this change, retrieving a property with `getString` would return the\n  first occurrences of the duplicate property. Using `getStringArray`\n  would return all occurrences. With this new change, duplicate\n  properties defined from multiple sources (eg: env variables and\n  properties files) will be overwritten using the overwrite priority\n  described earlier. Array properties now needs to be defined as a comma\n  seperated string from a single properties. Duplicate properties from\n  difference sources will not be merged to an array property. Only the\n  property highest priority source will be available from\n  `PinotConfiguration.getProperty`\n\nNotes for reviewer:\n  The change impacts a large portion of the codebase. While it can be\n  scary, the changes represents mostly a replacement of\n  `org.apache.commons.configuration.Configuration` to\n  `org.apache.pinot.spi.env.PinotConfiguration`. The following classes\n  should be the main area of attention for the review:\n    `org.apache.pinot.spi.env.PinotConfiguration`\n    `org.apache.pinot.controller.ControllerConf`\n    `org.apache.pinot.tools.utils.PinotConfigUtils`\n    `org.apache.pinot.spi.env.CommonsConfigurationUtils`\n    `org.apache.pinot.spi.env.Environment`\n    `org.apache.pinot.spi.env.SystemEnvironment`"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b7a084f57098505630e8ecf9abba64e11935c40d", "author": {"user": {"login": "daniellavoie", "name": "Daniel Lavoie"}}, "url": "https://github.com/apache/pinot/commit/b7a084f57098505630e8ecf9abba64e11935c40d", "committedDate": "2020-07-02T16:43:09Z", "message": "Pinot Configuration Refactoring - Phase 1\n\nThis change introduces configuration externalization to work with\ndifferent environments. Properties can now be loaded from properties\nfiles, YAML files, environment variables, and command-line arguments to\nexternalize configuration independently. Properties are now accessible\nfrom a `PinotConfiguration` class which act has an adapter to Apache\nCommons Configuration. This initial phase does not change how services\nare started and how they are configurated. A future commit will\nintroduce property loaded from `PINOT_X` environment variables.\n\nFeatures:\n  Upgrade Apache Commons Configuration to 1.10\n  Configuration overwrite priority:\n    Constructing a `PinotConfiguration` instance offers the opportunity\n    to provide base properties, environment variables. Properties\n    will also be loaded from any config file referenced with a\n    config.paths`\u00a0property found in the base properties or environment\n    variable. The priority is established as follow:\n      Base properties > Env variables > Config Files\n\n    As explained previously, this initial phase only loads properties\n    from existing CLI commands and config files\n    (Base properties > Config Files).\n\nSide effects of the change:\n  This first phase of the refactoring only introduces the new\n  `PinotConfiguration`\u00a0abstraction. The dependency\n  `org.apache.commons.configuration.Configuration` used\n  to be to be referred in a big portion of the Pinot codebase. It has\n  been replaced by the Pinot specific `PinotConfiguration` class. This\n  change will simplify the a future upgrade of Apache Commons\n  Configuration from 1.x to 2.x that new package namespaces and\n  breaking changes.\n\nBreaking change:\n  With Apache Commons Configuration, duplicate properties may be\n  defined and will be made available as string array values. Prior to\n  this change, retrieving a property with `getString` would return the\n  first occurrences of the duplicate property. Using `getStringArray`\n  would return all occurrences. With this new change, duplicate\n  properties defined from multiple sources (eg: env variables and\n  properties files) will be overwritten using the overwrite priority\n  described earlier. Array properties now needs to be defined as a comma\n  seperated string from a single properties. Duplicate properties from\n  difference sources will not be merged to an array property. Only the\n  property highest priority source will be available from\n  `PinotConfiguration.getProperty`\n\nNotes for reviewer:\n  The change impacts a large portion of the codebase. While it can be\n  scary, the changes represents mostly a replacement of\n  `org.apache.commons.configuration.Configuration` to\n  `org.apache.pinot.spi.env.PinotConfiguration`. The following classes\n  should be the main area of attention for the review:\n    `org.apache.pinot.spi.env.PinotConfiguration`\n    `org.apache.pinot.controller.ControllerConf`\n    `org.apache.pinot.tools.utils.PinotConfigUtils`\n    `org.apache.pinot.spi.env.CommonsConfigurationUtils`\n    `org.apache.pinot.spi.env.Environment`\n    `org.apache.pinot.spi.env.SystemEnvironment`"}, "afterCommit": {"oid": "394e7fedcf7f22f705227c6756f55e116dc6f74c", "author": {"user": {"login": "daniellavoie", "name": "Daniel Lavoie"}}, "url": "https://github.com/apache/pinot/commit/394e7fedcf7f22f705227c6756f55e116dc6f74c", "committedDate": "2020-07-02T17:08:10Z", "message": "Pinot Configuration Refactoring - Phase 1\n\nThis change introduces configuration externalization to work with\ndifferent environments. Properties can now be loaded from properties\nfiles, YAML files, environment variables, and command-line arguments to\nexternalize configuration independently. Properties are now accessible\nfrom a `PinotConfiguration` class which act has an adapter to Apache\nCommons Configuration. This initial phase does not change how services\nare started and how they are configurated. A future commit will\nintroduce property loaded from `PINOT_X` environment variables.\n\nFeatures:\n  Upgrade Apache Commons Configuration to 1.10\n  Configuration overwrite priority:\n    Constructing a `PinotConfiguration` instance offers the opportunity\n    to provide base properties, environment variables. Properties\n    will also be loaded from any config file referenced with a\n    config.paths`\u00a0property found in the base properties or environment\n    variable. The priority is established as follow:\n      Base properties > Env variables > Config Files\n\n    As explained previously, this initial phase only loads properties\n    from existing CLI commands and config files\n    (Base properties > Config Files).\n\nSide effects of the change:\n  This first phase of the refactoring only introduces the new\n  `PinotConfiguration`\u00a0abstraction. The dependency\n  `org.apache.commons.configuration.Configuration` used\n  to be to be referred in a big portion of the Pinot codebase. It has\n  been replaced by the Pinot specific `PinotConfiguration` class. This\n  change will simplify the a future upgrade of Apache Commons\n  Configuration from 1.x to 2.x that new package namespaces and\n  breaking changes.\n\nBreaking change:\n  With Apache Commons Configuration, duplicate properties may be\n  defined and will be made available as string array values. Prior to\n  this change, retrieving a property with `getString` would return the\n  first occurrences of the duplicate property. Using `getStringArray`\n  would return all occurrences. With this new change, duplicate\n  properties defined from multiple sources (eg: env variables and\n  properties files) will be overwritten using the overwrite priority\n  described earlier. Array properties now needs to be defined as a comma\n  seperated string from a single properties. Duplicate properties from\n  difference sources will not be merged to an array property. Only the\n  property highest priority source will be available from\n  `PinotConfiguration.getProperty`\n\nNotes for reviewer:\n  The change impacts a large portion of the codebase. While it can be\n  scary, the changes represents mostly a replacement of\n  `org.apache.commons.configuration.Configuration` to\n  `org.apache.pinot.spi.env.PinotConfiguration`. The following classes\n  should be the main area of attention for the review:\n    `org.apache.pinot.spi.env.PinotConfiguration`\n    `org.apache.pinot.controller.ControllerConf`\n    `org.apache.pinot.tools.utils.PinotConfigUtils`\n    `org.apache.pinot.spi.env.CommonsConfigurationUtils`\n    `org.apache.pinot.spi.env.Environment`\n    `org.apache.pinot.spi.env.SystemEnvironment`"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "394e7fedcf7f22f705227c6756f55e116dc6f74c", "author": {"user": {"login": "daniellavoie", "name": "Daniel Lavoie"}}, "url": "https://github.com/apache/pinot/commit/394e7fedcf7f22f705227c6756f55e116dc6f74c", "committedDate": "2020-07-02T17:08:10Z", "message": "Pinot Configuration Refactoring - Phase 1\n\nThis change introduces configuration externalization to work with\ndifferent environments. Properties can now be loaded from properties\nfiles, YAML files, environment variables, and command-line arguments to\nexternalize configuration independently. Properties are now accessible\nfrom a `PinotConfiguration` class which act has an adapter to Apache\nCommons Configuration. This initial phase does not change how services\nare started and how they are configurated. A future commit will\nintroduce property loaded from `PINOT_X` environment variables.\n\nFeatures:\n  Upgrade Apache Commons Configuration to 1.10\n  Configuration overwrite priority:\n    Constructing a `PinotConfiguration` instance offers the opportunity\n    to provide base properties, environment variables. Properties\n    will also be loaded from any config file referenced with a\n    config.paths`\u00a0property found in the base properties or environment\n    variable. The priority is established as follow:\n      Base properties > Env variables > Config Files\n\n    As explained previously, this initial phase only loads properties\n    from existing CLI commands and config files\n    (Base properties > Config Files).\n\nSide effects of the change:\n  This first phase of the refactoring only introduces the new\n  `PinotConfiguration`\u00a0abstraction. The dependency\n  `org.apache.commons.configuration.Configuration` used\n  to be to be referred in a big portion of the Pinot codebase. It has\n  been replaced by the Pinot specific `PinotConfiguration` class. This\n  change will simplify the a future upgrade of Apache Commons\n  Configuration from 1.x to 2.x that new package namespaces and\n  breaking changes.\n\nBreaking change:\n  With Apache Commons Configuration, duplicate properties may be\n  defined and will be made available as string array values. Prior to\n  this change, retrieving a property with `getString` would return the\n  first occurrences of the duplicate property. Using `getStringArray`\n  would return all occurrences. With this new change, duplicate\n  properties defined from multiple sources (eg: env variables and\n  properties files) will be overwritten using the overwrite priority\n  described earlier. Array properties now needs to be defined as a comma\n  seperated string from a single properties. Duplicate properties from\n  difference sources will not be merged to an array property. Only the\n  property highest priority source will be available from\n  `PinotConfiguration.getProperty`\n\nNotes for reviewer:\n  The change impacts a large portion of the codebase. While it can be\n  scary, the changes represents mostly a replacement of\n  `org.apache.commons.configuration.Configuration` to\n  `org.apache.pinot.spi.env.PinotConfiguration`. The following classes\n  should be the main area of attention for the review:\n    `org.apache.pinot.spi.env.PinotConfiguration`\n    `org.apache.pinot.controller.ControllerConf`\n    `org.apache.pinot.tools.utils.PinotConfigUtils`\n    `org.apache.pinot.spi.env.CommonsConfigurationUtils`\n    `org.apache.pinot.spi.env.Environment`\n    `org.apache.pinot.spi.env.SystemEnvironment`"}, "afterCommit": {"oid": "327b4a1af951048242044ba34f4bbbef167fec78", "author": {"user": {"login": "daniellavoie", "name": "Daniel Lavoie"}}, "url": "https://github.com/apache/pinot/commit/327b4a1af951048242044ba34f4bbbef167fec78", "committedDate": "2020-07-02T19:07:16Z", "message": "Pinot Configuration Refactoring - Phase 1\n\nThis change introduces configuration externalization to work with\ndifferent environments. Properties can now be loaded from properties\nfiles, YAML files, environment variables, and command-line arguments to\nexternalize configuration independently. Properties are now accessible\nfrom a `PinotConfiguration` class which act has an adapter to Apache\nCommons Configuration. This initial phase does not change how services\nare started and how they are configurated. A future commit will\nintroduce property loaded from `PINOT_X` environment variables.\n\nFeatures:\n  Upgrade Apache Commons Configuration to 1.10\n  Configuration overwrite priority:\n    Constructing a `PinotConfiguration` instance offers the opportunity\n    to provide base properties, environment variables. Properties\n    will also be loaded from any config file referenced with a\n    config.paths`\u00a0property found in the base properties or environment\n    variable. The priority is established as follow:\n      Base properties > Env variables > Config Files\n\n    As explained previously, this initial phase only loads properties\n    from existing CLI commands and config files\n    (Base properties > Config Files).\n\nSide effects of the change:\n  This first phase of the refactoring only introduces the new\n  `PinotConfiguration`\u00a0abstraction. The dependency\n  `org.apache.commons.configuration.Configuration` used\n  to be to be referred in a big portion of the Pinot codebase. It has\n  been replaced by the Pinot specific `PinotConfiguration` class. This\n  change will simplify the a future upgrade of Apache Commons\n  Configuration from 1.x to 2.x that new package namespaces and\n  breaking changes.\n\nBreaking change:\n  With Apache Commons Configuration, duplicate properties may be\n  defined and will be made available as string array values. Prior to\n  this change, retrieving a property with `getString` would return the\n  first occurrences of the duplicate property. Using `getStringArray`\n  would return all occurrences. With this new change, duplicate\n  properties defined from multiple sources (eg: env variables and\n  properties files) will be overwritten using the overwrite priority\n  described earlier. Array properties now needs to be defined as a comma\n  seperated string from a single properties. Duplicate properties from\n  difference sources will not be merged to an array property. Only the\n  property highest priority source will be available from\n  `PinotConfiguration.getProperty`\n\nNotes for reviewer:\n  The change impacts a large portion of the codebase. While it can be\n  scary, the changes represents mostly a replacement of\n  `org.apache.commons.configuration.Configuration` to\n  `org.apache.pinot.spi.env.PinotConfiguration`. The following classes\n  should be the main area of attention for the review:\n    `org.apache.pinot.spi.env.PinotConfiguration`\n    `org.apache.pinot.controller.ControllerConf`\n    `org.apache.pinot.tools.utils.PinotConfigUtils`\n    `org.apache.pinot.spi.env.CommonsConfigurationUtils`\n    `org.apache.pinot.spi.env.Environment`\n    `org.apache.pinot.spi.env.SystemEnvironment`"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "327b4a1af951048242044ba34f4bbbef167fec78", "author": {"user": {"login": "daniellavoie", "name": "Daniel Lavoie"}}, "url": "https://github.com/apache/pinot/commit/327b4a1af951048242044ba34f4bbbef167fec78", "committedDate": "2020-07-02T19:07:16Z", "message": "Pinot Configuration Refactoring - Phase 1\n\nThis change introduces configuration externalization to work with\ndifferent environments. Properties can now be loaded from properties\nfiles, YAML files, environment variables, and command-line arguments to\nexternalize configuration independently. Properties are now accessible\nfrom a `PinotConfiguration` class which act has an adapter to Apache\nCommons Configuration. This initial phase does not change how services\nare started and how they are configurated. A future commit will\nintroduce property loaded from `PINOT_X` environment variables.\n\nFeatures:\n  Upgrade Apache Commons Configuration to 1.10\n  Configuration overwrite priority:\n    Constructing a `PinotConfiguration` instance offers the opportunity\n    to provide base properties, environment variables. Properties\n    will also be loaded from any config file referenced with a\n    config.paths`\u00a0property found in the base properties or environment\n    variable. The priority is established as follow:\n      Base properties > Env variables > Config Files\n\n    As explained previously, this initial phase only loads properties\n    from existing CLI commands and config files\n    (Base properties > Config Files).\n\nSide effects of the change:\n  This first phase of the refactoring only introduces the new\n  `PinotConfiguration`\u00a0abstraction. The dependency\n  `org.apache.commons.configuration.Configuration` used\n  to be to be referred in a big portion of the Pinot codebase. It has\n  been replaced by the Pinot specific `PinotConfiguration` class. This\n  change will simplify the a future upgrade of Apache Commons\n  Configuration from 1.x to 2.x that new package namespaces and\n  breaking changes.\n\nBreaking change:\n  With Apache Commons Configuration, duplicate properties may be\n  defined and will be made available as string array values. Prior to\n  this change, retrieving a property with `getString` would return the\n  first occurrences of the duplicate property. Using `getStringArray`\n  would return all occurrences. With this new change, duplicate\n  properties defined from multiple sources (eg: env variables and\n  properties files) will be overwritten using the overwrite priority\n  described earlier. Array properties now needs to be defined as a comma\n  seperated string from a single properties. Duplicate properties from\n  difference sources will not be merged to an array property. Only the\n  property highest priority source will be available from\n  `PinotConfiguration.getProperty`\n\nNotes for reviewer:\n  The change impacts a large portion of the codebase. While it can be\n  scary, the changes represents mostly a replacement of\n  `org.apache.commons.configuration.Configuration` to\n  `org.apache.pinot.spi.env.PinotConfiguration`. The following classes\n  should be the main area of attention for the review:\n    `org.apache.pinot.spi.env.PinotConfiguration`\n    `org.apache.pinot.controller.ControllerConf`\n    `org.apache.pinot.tools.utils.PinotConfigUtils`\n    `org.apache.pinot.spi.env.CommonsConfigurationUtils`\n    `org.apache.pinot.spi.env.Environment`\n    `org.apache.pinot.spi.env.SystemEnvironment`"}, "afterCommit": {"oid": "40b0bc17c9e851fe6291631f6a622fe038ada3c7", "author": {"user": {"login": "daniellavoie", "name": "Daniel Lavoie"}}, "url": "https://github.com/apache/pinot/commit/40b0bc17c9e851fe6291631f6a622fe038ada3c7", "committedDate": "2020-07-03T13:52:39Z", "message": "Pinot Configuration Refactoring - Phase 1\n\nThis change introduces configuration externalization to work with\ndifferent environments. Properties can now be loaded from properties\nfiles, YAML files, environment variables, and command-line arguments to\nexternalize configuration independently. Properties are now accessible\nfrom a `PinotConfiguration` class which act has an adapter to Apache\nCommons Configuration. This initial phase does not change how services\nare started and how they are configurated. A future commit will\nintroduce property loaded from `PINOT_X` environment variables.\n\nFeatures:\n  Upgrade Apache Commons Configuration to 1.10\n  Configuration overwrite priority:\n    Constructing a `PinotConfiguration` instance offers the opportunity\n    to provide base properties, environment variables. Properties\n    will also be loaded from any config file referenced with a\n    config.paths`\u00a0property found in the base properties or environment\n    variable. The priority is established as follow:\n      Base properties > Env variables > Config Files\n\n    As explained previously, this initial phase only loads properties\n    from existing CLI commands and config files\n    (Base properties > Config Files).\n\nSide effects of the change:\n  This first phase of the refactoring only introduces the new\n  `PinotConfiguration`\u00a0abstraction. The dependency\n  `org.apache.commons.configuration.Configuration` used\n  to be to be referred in a big portion of the Pinot codebase. It has\n  been replaced by the Pinot specific `PinotConfiguration` class. This\n  change will simplify the a future upgrade of Apache Commons\n  Configuration from 1.x to 2.x that new package namespaces and\n  breaking changes.\n\nBreaking change:\n  With Apache Commons Configuration, duplicate properties may be\n  defined and will be made available as string array values. Prior to\n  this change, retrieving a property with `getString` would return the\n  first occurrences of the duplicate property. Using `getStringArray`\n  would return all occurrences. With this new change, duplicate\n  properties defined from multiple sources (eg: env variables and\n  properties files) will be overwritten using the overwrite priority\n  described earlier. Array properties now needs to be defined as a comma\n  seperated string from a single properties. Duplicate properties from\n  difference sources will not be merged to an array property. Only the\n  property highest priority source will be available from\n  `PinotConfiguration.getProperty`\n\nNotes for reviewer:\n  The change impacts a large portion of the codebase. While it can be\n  scary, the changes represents mostly a replacement of\n  `org.apache.commons.configuration.Configuration` to\n  `org.apache.pinot.spi.env.PinotConfiguration`. The following classes\n  should be the main area of attention for the review:\n    `org.apache.pinot.spi.env.PinotConfiguration`\n    `org.apache.pinot.controller.ControllerConf`\n    `org.apache.pinot.tools.utils.PinotConfigUtils`\n    `org.apache.pinot.spi.env.CommonsConfigurationUtils`\n    `org.apache.pinot.spi.env.Environment`\n    `org.apache.pinot.spi.env.SystemEnvironment`"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "40b0bc17c9e851fe6291631f6a622fe038ada3c7", "author": {"user": {"login": "daniellavoie", "name": "Daniel Lavoie"}}, "url": "https://github.com/apache/pinot/commit/40b0bc17c9e851fe6291631f6a622fe038ada3c7", "committedDate": "2020-07-03T13:52:39Z", "message": "Pinot Configuration Refactoring - Phase 1\n\nThis change introduces configuration externalization to work with\ndifferent environments. Properties can now be loaded from properties\nfiles, YAML files, environment variables, and command-line arguments to\nexternalize configuration independently. Properties are now accessible\nfrom a `PinotConfiguration` class which act has an adapter to Apache\nCommons Configuration. This initial phase does not change how services\nare started and how they are configurated. A future commit will\nintroduce property loaded from `PINOT_X` environment variables.\n\nFeatures:\n  Upgrade Apache Commons Configuration to 1.10\n  Configuration overwrite priority:\n    Constructing a `PinotConfiguration` instance offers the opportunity\n    to provide base properties, environment variables. Properties\n    will also be loaded from any config file referenced with a\n    config.paths`\u00a0property found in the base properties or environment\n    variable. The priority is established as follow:\n      Base properties > Env variables > Config Files\n\n    As explained previously, this initial phase only loads properties\n    from existing CLI commands and config files\n    (Base properties > Config Files).\n\nSide effects of the change:\n  This first phase of the refactoring only introduces the new\n  `PinotConfiguration`\u00a0abstraction. The dependency\n  `org.apache.commons.configuration.Configuration` used\n  to be to be referred in a big portion of the Pinot codebase. It has\n  been replaced by the Pinot specific `PinotConfiguration` class. This\n  change will simplify the a future upgrade of Apache Commons\n  Configuration from 1.x to 2.x that new package namespaces and\n  breaking changes.\n\nBreaking change:\n  With Apache Commons Configuration, duplicate properties may be\n  defined and will be made available as string array values. Prior to\n  this change, retrieving a property with `getString` would return the\n  first occurrences of the duplicate property. Using `getStringArray`\n  would return all occurrences. With this new change, duplicate\n  properties defined from multiple sources (eg: env variables and\n  properties files) will be overwritten using the overwrite priority\n  described earlier. Array properties now needs to be defined as a comma\n  seperated string from a single properties. Duplicate properties from\n  difference sources will not be merged to an array property. Only the\n  property highest priority source will be available from\n  `PinotConfiguration.getProperty`\n\nNotes for reviewer:\n  The change impacts a large portion of the codebase. While it can be\n  scary, the changes represents mostly a replacement of\n  `org.apache.commons.configuration.Configuration` to\n  `org.apache.pinot.spi.env.PinotConfiguration`. The following classes\n  should be the main area of attention for the review:\n    `org.apache.pinot.spi.env.PinotConfiguration`\n    `org.apache.pinot.controller.ControllerConf`\n    `org.apache.pinot.tools.utils.PinotConfigUtils`\n    `org.apache.pinot.spi.env.CommonsConfigurationUtils`\n    `org.apache.pinot.spi.env.Environment`\n    `org.apache.pinot.spi.env.SystemEnvironment`"}, "afterCommit": {"oid": "c6e4440ab7c939612ab0264958fb52b6bcd875ef", "author": {"user": {"login": "daniellavoie", "name": "Daniel Lavoie"}}, "url": "https://github.com/apache/pinot/commit/c6e4440ab7c939612ab0264958fb52b6bcd875ef", "committedDate": "2020-07-03T14:34:34Z", "message": "Pinot Configuration Refactoring - Phase 1\n\nThis change introduces configuration externalization to work with\ndifferent environments. Properties can now be loaded from properties\nfiles, YAML files, environment variables, and command-line arguments to\nexternalize configuration independently. Properties are now accessible\nfrom a `PinotConfiguration` class which act has an adapter to Apache\nCommons Configuration. This initial phase does not change how services\nare started and how they are configurated. A future commit will\nintroduce property loaded from `PINOT_X` environment variables.\n\nFeatures:\n  Upgrade Apache Commons Configuration to 1.10\n  Configuration overwrite priority:\n    Constructing a `PinotConfiguration` instance offers the opportunity\n    to provide base properties, environment variables. Properties\n    will also be loaded from any config file referenced with a\n    config.paths`\u00a0property found in the base properties or environment\n    variable. The priority is established as follow:\n      Base properties > Env variables > Config Files\n\n    As explained previously, this initial phase only loads properties\n    from existing CLI commands and config files\n    (Base properties > Config Files).\n\nSide effects of the change:\n  This first phase of the refactoring only introduces the new\n  `PinotConfiguration`\u00a0abstraction. The dependency\n  `org.apache.commons.configuration.Configuration` used\n  to be to be referred in a big portion of the Pinot codebase. It has\n  been replaced by the Pinot specific `PinotConfiguration` class. This\n  change will simplify the a future upgrade of Apache Commons\n  Configuration from 1.x to 2.x that new package namespaces and\n  breaking changes.\n\nBreaking change:\n  With Apache Commons Configuration, duplicate properties may be\n  defined and will be made available as string array values. Prior to\n  this change, retrieving a property with `getString` would return the\n  first occurrences of the duplicate property. Using `getStringArray`\n  would return all occurrences. With this new change, duplicate\n  properties defined from multiple sources (eg: env variables and\n  properties files) will be overwritten using the overwrite priority\n  described earlier. Array properties now needs to be defined as a comma\n  seperated string from a single properties. Duplicate properties from\n  difference sources will not be merged to an array property. Only the\n  property highest priority source will be available from\n  `PinotConfiguration.getProperty`\n\nNotes for reviewer:\n  The change impacts a large portion of the codebase. While it can be\n  scary, the changes represents mostly a replacement of\n  `org.apache.commons.configuration.Configuration` to\n  `org.apache.pinot.spi.env.PinotConfiguration`. The following classes\n  should be the main area of attention for the review:\n    `org.apache.pinot.spi.env.PinotConfiguration`\n    `org.apache.pinot.controller.ControllerConf`\n    `org.apache.pinot.tools.utils.PinotConfigUtils`\n    `org.apache.pinot.spi.env.CommonsConfigurationUtils`\n    `org.apache.pinot.spi.env.Environment`\n    `org.apache.pinot.spi.env.SystemEnvironment`"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "930d95240c0fa2d4b04fe1de0e00f9c3a4e6319a", "author": {"user": {"login": "daniellavoie", "name": "Daniel Lavoie"}}, "url": "https://github.com/apache/pinot/commit/930d95240c0fa2d4b04fe1de0e00f9c3a4e6319a", "committedDate": "2020-07-03T15:10:30Z", "message": "Pinot Configuration Refactoring - Phase 1\n\nThis change introduces configuration externalization to work with\ndifferent environments. Properties can now be loaded from properties\nfiles, YAML files, environment variables, and command-line arguments to\nexternalize configuration independently. Properties are now accessible\nfrom a `PinotConfiguration` class which act has an adapter to Apache\nCommons Configuration. This initial phase does not change how services\nare started and how they are configurated. A future commit will\nintroduce property loaded from `PINOT_X` environment variables.\n\nFeatures:\n  Upgrade Apache Commons Configuration to 1.10\n  Configuration overwrite priority:\n    Constructing a `PinotConfiguration` instance offers the opportunity\n    to provide base properties, environment variables. Properties\n    will also be loaded from any config file referenced with a\n    config.paths`\u00a0property found in the base properties or environment\n    variable. The priority is established as follow:\n      Base properties > Env variables > Config Files\n\n    As explained previously, this initial phase only loads properties\n    from existing CLI commands and config files\n    (Base properties > Config Files).\n\nSide effects of the change:\n  This first phase of the refactoring only introduces the new\n  `PinotConfiguration`\u00a0abstraction. The dependency\n  `org.apache.commons.configuration.Configuration` used\n  to be to be referred in a big portion of the Pinot codebase. It has\n  been replaced by the Pinot specific `PinotConfiguration` class. This\n  change will simplify the a future upgrade of Apache Commons\n  Configuration from 1.x to 2.x that new package namespaces and\n  breaking changes.\n\nBreaking change:\n  With Apache Commons Configuration, duplicate properties may be\n  defined and will be made available as string array values. Prior to\n  this change, retrieving a property with `getString` would return the\n  first occurrences of the duplicate property. Using `getStringArray`\n  would return all occurrences. With this new change, duplicate\n  properties defined from multiple sources (eg: env variables and\n  properties files) will be overwritten using the overwrite priority\n  described earlier. Array properties now needs to be defined as a comma\n  seperated string from a single properties. Duplicate properties from\n  difference sources will not be merged to an array property. Only the\n  property highest priority source will be available from\n  `PinotConfiguration.getProperty`\n\nNotes for reviewer:\n  The change impacts a large portion of the codebase. While it can be\n  scary, the changes represents mostly a replacement of\n  `org.apache.commons.configuration.Configuration` to\n  `org.apache.pinot.spi.env.PinotConfiguration`. The following classes\n  should be the main area of attention for the review:\n    `org.apache.pinot.spi.env.PinotConfiguration`\n    `org.apache.pinot.controller.ControllerConf`\n    `org.apache.pinot.tools.utils.PinotConfigUtils`\n    `org.apache.pinot.spi.env.CommonsConfigurationUtils`\n    `org.apache.pinot.spi.env.Environment`\n    `org.apache.pinot.spi.env.SystemEnvironment`"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c6e4440ab7c939612ab0264958fb52b6bcd875ef", "author": {"user": {"login": "daniellavoie", "name": "Daniel Lavoie"}}, "url": "https://github.com/apache/pinot/commit/c6e4440ab7c939612ab0264958fb52b6bcd875ef", "committedDate": "2020-07-03T14:34:34Z", "message": "Pinot Configuration Refactoring - Phase 1\n\nThis change introduces configuration externalization to work with\ndifferent environments. Properties can now be loaded from properties\nfiles, YAML files, environment variables, and command-line arguments to\nexternalize configuration independently. Properties are now accessible\nfrom a `PinotConfiguration` class which act has an adapter to Apache\nCommons Configuration. This initial phase does not change how services\nare started and how they are configurated. A future commit will\nintroduce property loaded from `PINOT_X` environment variables.\n\nFeatures:\n  Upgrade Apache Commons Configuration to 1.10\n  Configuration overwrite priority:\n    Constructing a `PinotConfiguration` instance offers the opportunity\n    to provide base properties, environment variables. Properties\n    will also be loaded from any config file referenced with a\n    config.paths`\u00a0property found in the base properties or environment\n    variable. The priority is established as follow:\n      Base properties > Env variables > Config Files\n\n    As explained previously, this initial phase only loads properties\n    from existing CLI commands and config files\n    (Base properties > Config Files).\n\nSide effects of the change:\n  This first phase of the refactoring only introduces the new\n  `PinotConfiguration`\u00a0abstraction. The dependency\n  `org.apache.commons.configuration.Configuration` used\n  to be to be referred in a big portion of the Pinot codebase. It has\n  been replaced by the Pinot specific `PinotConfiguration` class. This\n  change will simplify the a future upgrade of Apache Commons\n  Configuration from 1.x to 2.x that new package namespaces and\n  breaking changes.\n\nBreaking change:\n  With Apache Commons Configuration, duplicate properties may be\n  defined and will be made available as string array values. Prior to\n  this change, retrieving a property with `getString` would return the\n  first occurrences of the duplicate property. Using `getStringArray`\n  would return all occurrences. With this new change, duplicate\n  properties defined from multiple sources (eg: env variables and\n  properties files) will be overwritten using the overwrite priority\n  described earlier. Array properties now needs to be defined as a comma\n  seperated string from a single properties. Duplicate properties from\n  difference sources will not be merged to an array property. Only the\n  property highest priority source will be available from\n  `PinotConfiguration.getProperty`\n\nNotes for reviewer:\n  The change impacts a large portion of the codebase. While it can be\n  scary, the changes represents mostly a replacement of\n  `org.apache.commons.configuration.Configuration` to\n  `org.apache.pinot.spi.env.PinotConfiguration`. The following classes\n  should be the main area of attention for the review:\n    `org.apache.pinot.spi.env.PinotConfiguration`\n    `org.apache.pinot.controller.ControllerConf`\n    `org.apache.pinot.tools.utils.PinotConfigUtils`\n    `org.apache.pinot.spi.env.CommonsConfigurationUtils`\n    `org.apache.pinot.spi.env.Environment`\n    `org.apache.pinot.spi.env.SystemEnvironment`"}, "afterCommit": {"oid": "930d95240c0fa2d4b04fe1de0e00f9c3a4e6319a", "author": {"user": {"login": "daniellavoie", "name": "Daniel Lavoie"}}, "url": "https://github.com/apache/pinot/commit/930d95240c0fa2d4b04fe1de0e00f9c3a4e6319a", "committedDate": "2020-07-03T15:10:30Z", "message": "Pinot Configuration Refactoring - Phase 1\n\nThis change introduces configuration externalization to work with\ndifferent environments. Properties can now be loaded from properties\nfiles, YAML files, environment variables, and command-line arguments to\nexternalize configuration independently. Properties are now accessible\nfrom a `PinotConfiguration` class which act has an adapter to Apache\nCommons Configuration. This initial phase does not change how services\nare started and how they are configurated. A future commit will\nintroduce property loaded from `PINOT_X` environment variables.\n\nFeatures:\n  Upgrade Apache Commons Configuration to 1.10\n  Configuration overwrite priority:\n    Constructing a `PinotConfiguration` instance offers the opportunity\n    to provide base properties, environment variables. Properties\n    will also be loaded from any config file referenced with a\n    config.paths`\u00a0property found in the base properties or environment\n    variable. The priority is established as follow:\n      Base properties > Env variables > Config Files\n\n    As explained previously, this initial phase only loads properties\n    from existing CLI commands and config files\n    (Base properties > Config Files).\n\nSide effects of the change:\n  This first phase of the refactoring only introduces the new\n  `PinotConfiguration`\u00a0abstraction. The dependency\n  `org.apache.commons.configuration.Configuration` used\n  to be to be referred in a big portion of the Pinot codebase. It has\n  been replaced by the Pinot specific `PinotConfiguration` class. This\n  change will simplify the a future upgrade of Apache Commons\n  Configuration from 1.x to 2.x that new package namespaces and\n  breaking changes.\n\nBreaking change:\n  With Apache Commons Configuration, duplicate properties may be\n  defined and will be made available as string array values. Prior to\n  this change, retrieving a property with `getString` would return the\n  first occurrences of the duplicate property. Using `getStringArray`\n  would return all occurrences. With this new change, duplicate\n  properties defined from multiple sources (eg: env variables and\n  properties files) will be overwritten using the overwrite priority\n  described earlier. Array properties now needs to be defined as a comma\n  seperated string from a single properties. Duplicate properties from\n  difference sources will not be merged to an array property. Only the\n  property highest priority source will be available from\n  `PinotConfiguration.getProperty`\n\nNotes for reviewer:\n  The change impacts a large portion of the codebase. While it can be\n  scary, the changes represents mostly a replacement of\n  `org.apache.commons.configuration.Configuration` to\n  `org.apache.pinot.spi.env.PinotConfiguration`. The following classes\n  should be the main area of attention for the review:\n    `org.apache.pinot.spi.env.PinotConfiguration`\n    `org.apache.pinot.controller.ControllerConf`\n    `org.apache.pinot.tools.utils.PinotConfigUtils`\n    `org.apache.pinot.spi.env.CommonsConfigurationUtils`\n    `org.apache.pinot.spi.env.Environment`\n    `org.apache.pinot.spi.env.SystemEnvironment`"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM3NzcxNDE5", "url": "https://github.com/apache/pinot/pull/5608#pullrequestreview-437771419", "createdAt": "2020-06-25T18:53:29Z", "commit": {"oid": "fb7322076c92dedb9e2975fd22ef3db99227e8df"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQxODo1MzoyOVrOGpHutA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQxODo1MzoyOVrOGpHutA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTc3MTQ0NA==", "bodyText": "shouldn't this be returning pinotconfiguration?", "url": "https://github.com/apache/pinot/pull/5608#discussion_r445771444", "createdAt": "2020-06-25T18:53:29Z", "author": {"login": "kishoreg"}, "path": "pinot-tools/src/main/java/org/apache/pinot/tools/admin/command/StartBrokerCommand.java", "diffHunk": "@@ -120,7 +121,7 @@ public boolean execute()\n     }\n   }\n \n-  private Configuration getBrokerConf()\n+  private Map<String, Object> getBrokerConf()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fb7322076c92dedb9e2975fd22ef3db99227e8df"}, "originalPosition": 15}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 690, "cost": 1, "resetAt": "2021-10-28T18:00:02Z"}}}