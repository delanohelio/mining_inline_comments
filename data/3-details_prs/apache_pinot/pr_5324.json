{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDEyMjQwOTMx", "number": 5324, "title": "Timespec to datetimespec conversion utility", "bodyText": "This is an item of project: #2756\nWe plan to internally start treating timeFieldSpec as dateTimeFieldSpec. This PR adds a utility function which converts a timeFieldSpec to an equivalent dateTimeFieldSpec.\nNote that dateTimeFieldSpec doesn't have the concept of incoming/outgoing, and hence we add a transform function to convey the conversion.\nNOTE: the toEpochXXXBucket method is added to help with conversion from timeFieldSpec to dateTimeFieldSpec. Practically, we would only be using toEpochXXX and toEpochXXXRounded.", "createdAt": "2020-05-01T18:19:27Z", "url": "https://github.com/apache/pinot/pull/5324", "merged": true, "mergeCommit": {"oid": "2bda544f967e405a6aac20d2bb2abce430da9603"}, "closed": true, "closedAt": "2020-05-05T00:38:35Z", "author": {"login": "npawar"}, "timelineItems": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcc2F9ugH2gAyNDEyMjQwOTMxOjQ4MjE5ZGYwYzg4MTk5ODBkYTc1NGRjZThjYTE4YzYxMGM1NzI1YWQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABceW5-pgFqTQwNTk2OTQyNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "48219df0c8819980da754dce8ca18c610c5725ad", "author": {"user": {"login": "npawar", "name": "Neha Pawar"}}, "url": "https://github.com/apache/pinot/commit/48219df0c8819980da754dce8ca18c610c5725ad", "committedDate": "2020-04-30T23:57:21Z", "message": "Utility for conversion from timeFieldSpec to dateTimeFieldSpec"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "12655818f8acd9f24fab1e57012ccba57d5e7414", "author": {"user": {"login": "npawar", "name": "Neha Pawar"}}, "url": "https://github.com/apache/pinot/commit/12655818f8acd9f24fab1e57012ccba57d5e7414", "committedDate": "2020-05-01T17:53:47Z", "message": "Tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fcf8df1ecf2ca0fb77691afd2ac5b874495e4425", "author": {"user": {"login": "npawar", "name": "Neha Pawar"}}, "url": "https://github.com/apache/pinot/commit/fcf8df1ecf2ca0fb77691afd2ac5b874495e4425", "committedDate": "2020-05-01T18:07:21Z", "message": "Remove unused data provider"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6591331e4f7486deebbedeb97690ff5359a79f89", "author": {"user": {"login": "npawar", "name": "Neha Pawar"}}, "url": "https://github.com/apache/pinot/commit/6591331e4f7486deebbedeb97690ff5359a79f89", "committedDate": "2020-05-01T18:16:51Z", "message": "Remove unused method"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c0fb8a21d6b8b54e1bbdcabaecf9b7c9a781e077", "author": {"user": {"login": "npawar", "name": "Neha Pawar"}}, "url": "https://github.com/apache/pinot/commit/c0fb8a21d6b8b54e1bbdcabaecf9b7c9a781e077", "committedDate": "2020-05-01T19:50:23Z", "message": "Fix test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7a199c1eee51e4b9c57d5d8987404b1d156edb92", "author": {"user": {"login": "npawar", "name": "Neha Pawar"}}, "url": "https://github.com/apache/pinot/commit/7a199c1eee51e4b9c57d5d8987404b1d156edb92", "committedDate": "2020-05-04T17:26:06Z", "message": "Move conversion utility to Schema"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA1MjA1MjE3", "url": "https://github.com/apache/pinot/pull/5324#pullrequestreview-405205217", "createdAt": "2020-05-04T17:41:44Z", "commit": {"oid": "7a199c1eee51e4b9c57d5d8987404b1d156edb92"}, "state": "APPROVED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxNzo0MTo0NVrOGQLArw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxNzo1NDozNVrOGQLfqQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTYxMDc5OQ==", "bodyText": "The term 'bucket' is not intuitive to me (but that could be just me). You may think of using something like:\ntoEpochHoursRounded(Long millis, String granularity) {\n\nwith the comment that the method converts the milis to hours, and rounds it down to the nearest granularity specified.\nYou can decide, though.", "url": "https://github.com/apache/pinot/pull/5324#discussion_r419610799", "createdAt": "2020-05-04T17:41:45Z", "author": {"login": "mcvsubbu"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/data/function/DateTimeFunctions.java", "diffHunk": "@@ -35,9 +63,79 @@ static Long toEpochHours(Long millis) {\n   }\n \n   /**\n-   * Convert epoch millis to epoch minutes, bucketed by given bucket granularity\n+   * Convert epoch millis to epoch hours, bucketed by given bucket granularity\n    */\n-  static Long toEpochMinutes(Long millis, String bucket) {\n-    return TimeUnit.MILLISECONDS.toMinutes(millis) / Integer.parseInt(bucket);\n+  static Long toEpochHoursBucket(Long millis, String bucket) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7a199c1eee51e4b9c57d5d8987404b1d156edb92"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTYxMTUxNQ==", "bodyText": "Isnt it better to use Integer.valueOf()? Agreed it returns an object, but these objects are cached (for < 128 values, which is likely to be the case here). Otherwise, we will be parsing a string for every row ingested?", "url": "https://github.com/apache/pinot/pull/5324#discussion_r419611515", "createdAt": "2020-05-04T17:43:01Z", "author": {"login": "mcvsubbu"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/data/function/DateTimeFunctions.java", "diffHunk": "@@ -35,9 +63,79 @@ static Long toEpochHours(Long millis) {\n   }\n \n   /**\n-   * Convert epoch millis to epoch minutes, bucketed by given bucket granularity\n+   * Convert epoch millis to epoch hours, bucketed by given bucket granularity\n    */\n-  static Long toEpochMinutes(Long millis, String bucket) {\n-    return TimeUnit.MILLISECONDS.toMinutes(millis) / Integer.parseInt(bucket);\n+  static Long toEpochHoursBucket(Long millis, String bucket) {\n+    return TimeUnit.MILLISECONDS.toHours(millis) / Integer.parseInt(bucket);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7a199c1eee51e4b9c57d5d8987404b1d156edb92"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTYxODcyOQ==", "bodyText": "another way to do this is to keep it protected and let tests access it. Alternatively, keep it private and use introspection (makes it brittle, but we should discover very soon since the tests will fail).", "url": "https://github.com/apache/pinot/pull/5324#discussion_r419618729", "createdAt": "2020-05-04T17:54:35Z", "author": {"login": "mcvsubbu"}, "path": "pinot-spi/src/main/java/org/apache/pinot/spi/data/Schema.java", "diffHunk": "@@ -631,4 +632,130 @@ public int hashCode() {\n     result = EqualityUtils.hashCodeOf(result, _dateTimeFieldSpecs);\n     return result;\n   }\n+\n+  /**\n+   * Helper method that converts a {@link TimeFieldSpec} to {@link DateTimeFieldSpec}\n+   * 1) If timeFieldSpec contains only incoming granularity spec, directly convert it to a dateTimeFieldSpec\n+   * 2) If timeFieldSpec contains incoming aas well as outgoing granularity spec, use the outgoing spec to construct the dateTimeFieldSpec,\n+   *    and configure a transform function for the conversion from incoming\n+   */\n+  @VisibleForTesting\n+  static DateTimeFieldSpec convertToDateTimeFieldSpec(TimeFieldSpec timeFieldSpec) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7a199c1eee51e4b9c57d5d8987404b1d156edb92"}, "originalPosition": 20}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "935731f6dfdf01dc49063deec3987c68d9f45060", "author": {"user": {"login": "npawar", "name": "Neha Pawar"}}, "url": "https://github.com/apache/pinot/commit/935731f6dfdf01dc49063deec3987c68d9f45060", "committedDate": "2020-05-04T18:23:10Z", "message": "Change parseInt to valueOf"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "53f483b20c6be8e81dcaecbb7ca874af9b899ed9", "author": {"user": {"login": "npawar", "name": "Neha Pawar"}}, "url": "https://github.com/apache/pinot/commit/53f483b20c6be8e81dcaecbb7ca874af9b899ed9", "committedDate": "2020-05-04T20:41:53Z", "message": "Add epochToXXXRounded function"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "71dc5a827c2306dece93066de2502cd3b38d9400", "author": {"user": {"login": "npawar", "name": "Neha Pawar"}}, "url": "https://github.com/apache/pinot/commit/71dc5a827c2306dece93066de2502cd3b38d9400", "committedDate": "2020-05-04T22:41:19Z", "message": "Test input"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA1OTY5NDI2", "url": "https://github.com/apache/pinot/pull/5324#pullrequestreview-405969426", "createdAt": "2020-05-05T16:45:03Z", "commit": {"oid": "71dc5a827c2306dece93066de2502cd3b38d9400"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxNjo0NTowM1rOGQyO_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxNjo0NTowM1rOGQyO_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDI1MzQzNg==", "bodyText": "It will be nice if you also add here\n(1) an example of the use case in time-field-spec that needs bucketing in order to be backward compatible.\n(2) A comment that use of these bucket functions is discouraged unless you know what you are doing (e.g. 5-minutes-since-epoch does not make sense to someone looking at the timestamp, or writing queries. instead, Millis-since-epoch rounded to 5 minutes makes a lot more sense).", "url": "https://github.com/apache/pinot/pull/5324#discussion_r420253436", "createdAt": "2020-05-05T16:45:03Z", "author": {"login": "mcvsubbu"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/data/function/DateTimeFunctions.java", "diffHunk": "@@ -35,9 +53,127 @@ static Long toEpochHours(Long millis) {\n   }\n \n   /**\n-   * Convert epoch millis to epoch minutes, bucketed by given bucket granularity\n+   * Convert epoch millis to epoch days\n+   */\n+  static Long toEpochDays(Long millis) {\n+    return TimeUnit.MILLISECONDS.toDays(millis);\n+  }\n+\n+  /**\n+   * Convert epoch millis to epoch seconds, round to nearest rounding bucket\n+   */\n+  static Long toEpochSecondsRounded(Long millis, String roundingValue) {\n+    int roundToNearest = Integer.parseInt(roundingValue);\n+    return (TimeUnit.MILLISECONDS.toSeconds(millis) / roundToNearest) * roundToNearest;\n+  }\n+\n+  /**\n+   * Convert epoch millis to epoch minutes, round to nearest rounding bucket\n+   */\n+  static Long toEpochMinutesRounded(Long millis, String roundingValue) {\n+    int roundToNearest = Integer.parseInt(roundingValue);\n+    return (TimeUnit.MILLISECONDS.toMinutes(millis) / roundToNearest) * roundToNearest;\n+  }\n+\n+  /**\n+   * Convert epoch millis to epoch hours, round to nearest rounding bucket\n+   */\n+  static Long toEpochHoursRounded(Long millis, String roundingValue) {\n+    int roundToNearest = Integer.parseInt(roundingValue);\n+    return (TimeUnit.MILLISECONDS.toHours(millis) / roundToNearest) * roundToNearest;\n+  }\n+\n+  /**\n+   * Convert epoch millis to epoch days, round to nearest rounding bucket\n+   */\n+  static Long toEpochDaysRounded(Long millis, String roundingValue) {\n+    int roundToNearest = Integer.parseInt(roundingValue);\n+    return (TimeUnit.MILLISECONDS.toDays(millis) / roundToNearest) * roundToNearest;\n+  }\n+\n+  // TODO: toEpochXXXBucket methods are only needed to convert from TimeFieldSpec to DateTimeFieldSpec.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "71dc5a827c2306dece93066de2502cd3b38d9400"}, "originalPosition": 71}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 964, "cost": 1, "resetAt": "2021-10-28T18:00:02Z"}}}