{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzU4ODI3MTc0", "number": 4956, "reviewThreads": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wM1QwMDoxNDo1MlrODVkrBA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wM1QyMjo1MToxMVrODVxG7A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjIzOTQ3NTI0OnYy", "diffSide": "RIGHT", "path": "pinot-spi/src/main/java/org/apache/pinot/spi/plugin/PluginManager.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wM1QwMDoxNDo1MlrOFZ3-8Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wM1QwMDoxNDo1MlrOFZ3-8Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MjY3NTk1Mw==", "bodyText": "plugins.include", "url": "https://github.com/apache/pinot/pull/4956#discussion_r362675953", "createdAt": "2020-01-03T00:14:52Z", "author": {"login": "kishoreg"}, "path": "pinot-spi/src/main/java/org/apache/pinot/spi/plugin/PluginManager.java", "diffHunk": "@@ -28,19 +28,59 @@\n import java.util.Collection;\n import java.util.Collections;\n import java.util.HashMap;\n+import java.util.List;\n import java.util.Map;\n import org.apache.commons.io.FileUtils;\n+import org.apache.commons.lang.StringUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n \n \n public class PluginManager {\n \n+  private static final Logger LOGGER = LoggerFactory.getLogger(PluginManager.class);\n+  public static final String PLUGINS_ROOT_DIR_ENV_VAR = \"plugins.root.directory\";\n+  public static final String PLUGINS_LOADING_ENV_VAR = \"plugins.loading\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8059fdca93e4b4cd41716cc3278fc80fd3693acc"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjIzOTQ3NjQ4OnYy", "diffSide": "RIGHT", "path": "pinot-spi/src/main/java/org/apache/pinot/spi/plugin/PluginManager.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wM1QwMDoxNTo1N1rOFZ3_mw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wM1QwMDoxNTo1N1rOFZ3_mw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MjY3NjEyMw==", "bodyText": "plugins.dir", "url": "https://github.com/apache/pinot/pull/4956#discussion_r362676123", "createdAt": "2020-01-03T00:15:57Z", "author": {"login": "kishoreg"}, "path": "pinot-spi/src/main/java/org/apache/pinot/spi/plugin/PluginManager.java", "diffHunk": "@@ -28,19 +28,59 @@\n import java.util.Collection;\n import java.util.Collections;\n import java.util.HashMap;\n+import java.util.List;\n import java.util.Map;\n import org.apache.commons.io.FileUtils;\n+import org.apache.commons.lang.StringUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n \n \n public class PluginManager {\n \n+  private static final Logger LOGGER = LoggerFactory.getLogger(PluginManager.class);\n+  public static final String PLUGINS_ROOT_DIR_ENV_VAR = \"plugins.root.directory\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8059fdca93e4b4cd41716cc3278fc80fd3693acc"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjIzOTQ4MjUwOnYy", "diffSide": "RIGHT", "path": "pinot-spi/src/main/java/org/apache/pinot/spi/plugin/PluginManager.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wM1QwMDoyMjoxMFrOFZ4DJg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wM1QwMDoyMjoxMFrOFZ4DJg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MjY3NzAzMA==", "bodyText": "Add another log to say that the plugin was loaded successfully. Maybe do this in the caller and catch the exception.", "url": "https://github.com/apache/pinot/pull/4956#discussion_r362677030", "createdAt": "2020-01-03T00:22:10Z", "author": {"login": "kishoreg"}, "path": "pinot-spi/src/main/java/org/apache/pinot/spi/plugin/PluginManager.java", "diffHunk": "@@ -49,6 +89,7 @@ private PluginManager() {\n    * @param directory\n    */\n   public void load(String pluginName, File directory) {\n+    LOGGER.info(\"Trying to load plugin [{}] from location [{}]\", pluginName, directory);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8059fdca93e4b4cd41716cc3278fc80fd3693acc"}, "originalPosition": 64}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjIzOTQ4MzEzOnYy", "diffSide": "RIGHT", "path": "pinot-spi/src/main/java/org/apache/pinot/spi/plugin/PluginManager.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wM1QwMDoyMjo1MFrOFZ4DjQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wM1QwMDoyMjo1MFrOFZ4DjQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MjY3NzEzMw==", "bodyText": "try catch since the creating classloader might result in a runtime exception", "url": "https://github.com/apache/pinot/pull/4956#discussion_r362677133", "createdAt": "2020-01-03T00:22:50Z", "author": {"login": "kishoreg"}, "path": "pinot-spi/src/main/java/org/apache/pinot/spi/plugin/PluginManager.java", "diffHunk": "@@ -28,19 +28,59 @@\n import java.util.Collection;\n import java.util.Collections;\n import java.util.HashMap;\n+import java.util.List;\n import java.util.Map;\n import org.apache.commons.io.FileUtils;\n+import org.apache.commons.lang.StringUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n \n \n public class PluginManager {\n \n+  private static final Logger LOGGER = LoggerFactory.getLogger(PluginManager.class);\n+  public static final String PLUGINS_ROOT_DIR_ENV_VAR = \"plugins.root.directory\";\n+  public static final String PLUGINS_LOADING_ENV_VAR = \"plugins.loading\";\n   public static final String DEFAULT_PLUGIN_NAME = \"DEFAULT\";\n+  private static final String JAR_FILE_EXTENSION = \"jar\";\n   static PluginManager PLUGIN_MANAGER = new PluginManager();\n \n   Map<Plugin, PluginClassLoader> _registry = new HashMap<>();\n+  String pluginsRootDir;\n+  String pluginsLoading;\n \n   private PluginManager() {\n     _registry.put(new Plugin(DEFAULT_PLUGIN_NAME), createClassLoader(Collections.emptyList()));\n+    pluginsRootDir = System.getenv(PLUGINS_ROOT_DIR_ENV_VAR);\n+    pluginsLoading = System.getenv(PLUGINS_LOADING_ENV_VAR);\n+    init(pluginsRootDir, pluginsLoading);\n+  }\n+\n+  private void init(String pluginsRootDir, String pluginsLoading) {\n+    if (StringUtils.isEmpty(pluginsRootDir)) {\n+      LOGGER.info(\"No plugins root dir specified from environment variable\");\n+      return;\n+    } else {\n+      LOGGER.info(\"Plugins root dir is [{}]\", pluginsRootDir);\n+    }\n+    Collection<File> jarFiles = FileUtils.listFiles(new File(pluginsRootDir), new String[]{JAR_FILE_EXTENSION}, true);\n+    List<String> pluginsToLoad = null;\n+    if (!StringUtils.isEmpty(pluginsLoading)) {\n+      pluginsToLoad = Arrays.asList(pluginsLoading.split(\",\"));\n+      LOGGER.info(\"Trying to load plugins: [{}]\", Arrays.toString(pluginsToLoad.toArray()));\n+    } else {\n+      LOGGER.info(\"No pluginsLoading specified, trying to load all plugins: [{}]\", Arrays.toString(jarFiles.toArray()));\n+    }\n+    for (File jarFile : jarFiles) {\n+      File pluginDir = jarFile.getParentFile();\n+      String pluginName = pluginDir.getName();\n+      if (pluginsToLoad != null) {\n+        if (!pluginsToLoad.contains(pluginName)) {\n+          continue;\n+        }\n+      }\n+      load(pluginName, pluginDir);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8059fdca93e4b4cd41716cc3278fc80fd3693acc"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjIzOTUwMTYxOnYy", "diffSide": "RIGHT", "path": "pinot-spi/src/main/java/org/apache/pinot/spi/plugin/PluginManager.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wM1QwMDo0MjoyNFrOFZ4Ojg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wM1QwMDo0MjoyNFrOFZ4Ojg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MjY3OTk1MA==", "bodyText": "change to \"Env variable 'PLUGINS_ROOT_DIR_ENV_VAR' is not specified. Set this variable to load additional plugins\"", "url": "https://github.com/apache/pinot/pull/4956#discussion_r362679950", "createdAt": "2020-01-03T00:42:24Z", "author": {"login": "kishoreg"}, "path": "pinot-spi/src/main/java/org/apache/pinot/spi/plugin/PluginManager.java", "diffHunk": "@@ -28,19 +28,59 @@\n import java.util.Collection;\n import java.util.Collections;\n import java.util.HashMap;\n+import java.util.List;\n import java.util.Map;\n import org.apache.commons.io.FileUtils;\n+import org.apache.commons.lang.StringUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n \n \n public class PluginManager {\n \n+  private static final Logger LOGGER = LoggerFactory.getLogger(PluginManager.class);\n+  public static final String PLUGINS_ROOT_DIR_ENV_VAR = \"plugins.root.directory\";\n+  public static final String PLUGINS_LOADING_ENV_VAR = \"plugins.loading\";\n   public static final String DEFAULT_PLUGIN_NAME = \"DEFAULT\";\n+  private static final String JAR_FILE_EXTENSION = \"jar\";\n   static PluginManager PLUGIN_MANAGER = new PluginManager();\n \n   Map<Plugin, PluginClassLoader> _registry = new HashMap<>();\n+  String pluginsRootDir;\n+  String pluginsLoading;\n \n   private PluginManager() {\n     _registry.put(new Plugin(DEFAULT_PLUGIN_NAME), createClassLoader(Collections.emptyList()));\n+    pluginsRootDir = System.getenv(PLUGINS_ROOT_DIR_ENV_VAR);\n+    pluginsLoading = System.getenv(PLUGINS_LOADING_ENV_VAR);\n+    init(pluginsRootDir, pluginsLoading);\n+  }\n+\n+  private void init(String pluginsRootDir, String pluginsLoading) {\n+    if (StringUtils.isEmpty(pluginsRootDir)) {\n+      LOGGER.info(\"No plugins root dir specified from environment variable\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8059fdca93e4b4cd41716cc3278fc80fd3693acc"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjIzOTUwMjc2OnYy", "diffSide": "RIGHT", "path": "pinot-spi/src/main/java/org/apache/pinot/spi/plugin/PluginManager.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wM1QwMDo0MzozNFrOFZ4PNQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wM1QwMDo0MzozNFrOFZ4PNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MjY4MDExNw==", "bodyText": "Just say loading all plugins. use plugins.include to customize", "url": "https://github.com/apache/pinot/pull/4956#discussion_r362680117", "createdAt": "2020-01-03T00:43:34Z", "author": {"login": "kishoreg"}, "path": "pinot-spi/src/main/java/org/apache/pinot/spi/plugin/PluginManager.java", "diffHunk": "@@ -28,19 +28,59 @@\n import java.util.Collection;\n import java.util.Collections;\n import java.util.HashMap;\n+import java.util.List;\n import java.util.Map;\n import org.apache.commons.io.FileUtils;\n+import org.apache.commons.lang.StringUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n \n \n public class PluginManager {\n \n+  private static final Logger LOGGER = LoggerFactory.getLogger(PluginManager.class);\n+  public static final String PLUGINS_ROOT_DIR_ENV_VAR = \"plugins.root.directory\";\n+  public static final String PLUGINS_LOADING_ENV_VAR = \"plugins.loading\";\n   public static final String DEFAULT_PLUGIN_NAME = \"DEFAULT\";\n+  private static final String JAR_FILE_EXTENSION = \"jar\";\n   static PluginManager PLUGIN_MANAGER = new PluginManager();\n \n   Map<Plugin, PluginClassLoader> _registry = new HashMap<>();\n+  String pluginsRootDir;\n+  String pluginsLoading;\n \n   private PluginManager() {\n     _registry.put(new Plugin(DEFAULT_PLUGIN_NAME), createClassLoader(Collections.emptyList()));\n+    pluginsRootDir = System.getenv(PLUGINS_ROOT_DIR_ENV_VAR);\n+    pluginsLoading = System.getenv(PLUGINS_LOADING_ENV_VAR);\n+    init(pluginsRootDir, pluginsLoading);\n+  }\n+\n+  private void init(String pluginsRootDir, String pluginsLoading) {\n+    if (StringUtils.isEmpty(pluginsRootDir)) {\n+      LOGGER.info(\"No plugins root dir specified from environment variable\");\n+      return;\n+    } else {\n+      LOGGER.info(\"Plugins root dir is [{}]\", pluginsRootDir);\n+    }\n+    Collection<File> jarFiles = FileUtils.listFiles(new File(pluginsRootDir), new String[]{JAR_FILE_EXTENSION}, true);\n+    List<String> pluginsToLoad = null;\n+    if (!StringUtils.isEmpty(pluginsLoading)) {\n+      pluginsToLoad = Arrays.asList(pluginsLoading.split(\",\"));\n+      LOGGER.info(\"Trying to load plugins: [{}]\", Arrays.toString(pluginsToLoad.toArray()));\n+    } else {\n+      LOGGER.info(\"No pluginsLoading specified, trying to load all plugins: [{}]\", Arrays.toString(jarFiles.toArray()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8059fdca93e4b4cd41716cc3278fc80fd3693acc"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI0MTUwNjgxOnYy", "diffSide": "RIGHT", "path": "pinot-spi/src/main/java/org/apache/pinot/spi/plugin/PluginManager.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wM1QyMjo0NjowMVrOFaK5sA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wM1QyMjo0NjowMVrOFaK5sA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mjk4NTkwNA==", "bodyText": "we are looking for these in system property not env. Let's just call it PLUGINS_DIR_PROPERTY_NAME.", "url": "https://github.com/apache/pinot/pull/4956#discussion_r362985904", "createdAt": "2020-01-03T22:46:01Z", "author": {"login": "kishoreg"}, "path": "pinot-spi/src/main/java/org/apache/pinot/spi/plugin/PluginManager.java", "diffHunk": "@@ -28,19 +28,89 @@\n import java.util.Collection;\n import java.util.Collections;\n import java.util.HashMap;\n+import java.util.List;\n import java.util.Map;\n import org.apache.commons.io.FileUtils;\n+import org.apache.commons.lang.StringUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n \n \n public class PluginManager {\n \n+  public static final String PLUGINS_DIR_ENV_VAR = \"plugins.dir\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "98f5eb9759cfad90991644ad040a27e44be3e3c7"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI0MTUwODUwOnYy", "diffSide": "RIGHT", "path": "pinot-spi/src/main/java/org/apache/pinot/spi/plugin/PluginManager.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wM1QyMjo0NzozOFrOFaK61w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wM1QyMjo0NzozOFrOFaK61w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mjk4NjE5OQ==", "bodyText": "pluginsLoading -- > pluginsInclude", "url": "https://github.com/apache/pinot/pull/4956#discussion_r362986199", "createdAt": "2020-01-03T22:47:38Z", "author": {"login": "kishoreg"}, "path": "pinot-spi/src/main/java/org/apache/pinot/spi/plugin/PluginManager.java", "diffHunk": "@@ -28,19 +28,89 @@\n import java.util.Collection;\n import java.util.Collections;\n import java.util.HashMap;\n+import java.util.List;\n import java.util.Map;\n import org.apache.commons.io.FileUtils;\n+import org.apache.commons.lang.StringUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n \n \n public class PluginManager {\n \n+  public static final String PLUGINS_DIR_ENV_VAR = \"plugins.dir\";\n+  public static final String PLUGINS_INCLUDE_ENV_VAR = \"plugins.include\";\n   public static final String DEFAULT_PLUGIN_NAME = \"DEFAULT\";\n-  static PluginManager PLUGIN_MANAGER = new PluginManager();\n+  private static final Logger LOGGER = LoggerFactory.getLogger(PluginManager.class);\n+  private static final String JAR_FILE_EXTENSION = \"jar\";\n+  private static PluginManager PLUGIN_MANAGER = new PluginManager();\n \n-  Map<Plugin, PluginClassLoader> _registry = new HashMap<>();\n+  private Map<Plugin, PluginClassLoader> _registry = new HashMap<>();\n+  private String _pluginsRootDir;\n+  private String _pluginsInclude;\n+  private boolean _initialized = false;\n \n   private PluginManager() {\n     _registry.put(new Plugin(DEFAULT_PLUGIN_NAME), createClassLoader(Collections.emptyList()));\n+    init();\n+  }\n+\n+  public synchronized void init() {\n+    if (_initialized) {\n+      return;\n+    }\n+    try {\n+      _pluginsRootDir = System.getProperty(PLUGINS_DIR_ENV_VAR);\n+    } catch (Exception e) {\n+      LOGGER.error(\"Failed to load env variable {}\", PLUGINS_DIR_ENV_VAR, e);\n+      _pluginsRootDir = null;\n+    }\n+    try {\n+      _pluginsInclude = System.getProperty(PLUGINS_INCLUDE_ENV_VAR);\n+    } catch (Exception e) {\n+      LOGGER.error(\"Failed to load env variable {}\", PLUGINS_INCLUDE_ENV_VAR, e);\n+      _pluginsInclude = null;\n+    }\n+    init(_pluginsRootDir, _pluginsInclude);\n+    _initialized = true;\n+  }\n+\n+  private void init(String pluginsRootDir, String pluginsLoading) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "98f5eb9759cfad90991644ad040a27e44be3e3c7"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI0MTUxMTQyOnYy", "diffSide": "RIGHT", "path": "pinot-tools/pom.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wM1QyMjo1MDowNVrOFaK8zQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wM1QyMjo1MDowNVrOFaK8zQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mjk4NjcwMQ==", "bodyText": "can we make it absolute? I think there is a variable set in the script to get the basedir", "url": "https://github.com/apache/pinot/pull/4956#discussion_r362986701", "createdAt": "2020-01-03T22:50:05Z", "author": {"login": "kishoreg"}, "path": "pinot-tools/pom.xml", "diffHunk": "@@ -165,6 +163,7 @@\n                 <extraArguments>\n                   <extraArgument>-XX:MaxDirectMemorySize=30g</extraArgument>\n                   <extraArgument>-Dlog4j2.configurationFile=conf/pinot-tools-log4j2.xml</extraArgument>\n+                  <extraArgument>-Dplugins.dir=plugins</extraArgument>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "98f5eb9759cfad90991644ad040a27e44be3e3c7"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI0MTUxMjc2OnYy", "diffSide": "RIGHT", "path": "pinot-tools/src/main/java/org/apache/pinot/tools/HybridQuickstart.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wM1QyMjo1MToxMVrOFaK9pA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wM1QyMjo1MToxMVrOFaK9pA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mjk4NjkxNg==", "bodyText": "add a comment on why we need this for now and add a todo to delete this", "url": "https://github.com/apache/pinot/pull/4956#discussion_r362986916", "createdAt": "2020-01-03T22:51:11Z", "author": {"login": "kishoreg"}, "path": "pinot-tools/src/main/java/org/apache/pinot/tools/HybridQuickstart.java", "diffHunk": "@@ -50,6 +51,7 @@ private HybridQuickstart() {\n \n   public static void main(String[] args)\n       throws Exception {\n+    PluginManager.get().init();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "98f5eb9759cfad90991644ad040a27e44be3e3c7"}, "originalPosition": 19}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3551, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}