{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg0MDM4Mzc3", "number": 5115, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxOToxMDozNlrODljEGw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxOTo1MTowOVrODlj80Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNjk4Mzk1OnYy", "diffSide": "RIGHT", "path": "pinot-core/src/main/java/org/apache/pinot/core/common/DataSourceMetadata.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxOToxMDozNlrOFygVcw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxOTo0Mjo1M1rOF0eTbg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODUwMjg5OQ==", "bodyText": "might as well throw exception instead of returning an undefined value and getting an undefined behavior?", "url": "https://github.com/apache/pinot/pull/5115#discussion_r388502899", "createdAt": "2020-03-05T19:10:36Z", "author": {"login": "mcvsubbu"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/common/DataSourceMetadata.java", "diffHunk": "@@ -18,24 +18,79 @@\n  */\n package org.apache.pinot.core.common;\n \n-import org.apache.pinot.spi.data.FieldSpec.DataType;\n+import java.util.Set;\n+import javax.annotation.Nullable;\n+import org.apache.pinot.core.data.partition.PartitionFunction;\n+import org.apache.pinot.spi.data.FieldSpec;\n \n \n+/**\n+ * The {@code DataSourceMetadata} class contains all the metadata for a column for query execution purpose.\n+ */\n public interface DataSourceMetadata {\n \n-  DataType getDataType();\n+  /**\n+   * Returns the field spec of the column.\n+   */\n+  FieldSpec getFieldSpec();\n+\n+  /**\n+   * Returns the data type of the column.\n+   */\n+  default FieldSpec.DataType getDataType() {\n+    return getFieldSpec().getDataType();\n+  }\n \n-  boolean isSingleValue();\n+  /**\n+   * Returns {@code true} if the column is single-valued, {@code false} otherwise.\n+   */\n+  default boolean isSingleValue() {\n+    return getFieldSpec().isSingleValueField();\n+  }\n \n+  /**\n+   * Returns {@code true} if the column is sorted, {@code false} otherwise.\n+   */\n   boolean isSorted();\n \n+  /**\n+   * Returns the number of documents of the column.\n+   */\n   int getNumDocs();\n \n-  int getMaxNumMultiValues();\n+  /**\n+   * Returns the number of values of the column. For single-value column, number of values always equals to number of\n+   * documents; for multi-value column, each document (multi-value entry) may contain multiple values.\n+   */\n+  int getNumValues();\n+\n+  /**\n+   * Returns the maximum number of values for each multi-value entry of the multi-value column. For single-value column,\n+   * the value is undefined.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cd7ec3dcae6200dff12a62b1467731b9dfef2455"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDU2Njc2Ng==", "bodyText": "Want to avoid the if check for every call. Make it return -1 for single-value column", "url": "https://github.com/apache/pinot/pull/5115#discussion_r390566766", "createdAt": "2020-03-10T19:42:53Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/common/DataSourceMetadata.java", "diffHunk": "@@ -18,24 +18,79 @@\n  */\n package org.apache.pinot.core.common;\n \n-import org.apache.pinot.spi.data.FieldSpec.DataType;\n+import java.util.Set;\n+import javax.annotation.Nullable;\n+import org.apache.pinot.core.data.partition.PartitionFunction;\n+import org.apache.pinot.spi.data.FieldSpec;\n \n \n+/**\n+ * The {@code DataSourceMetadata} class contains all the metadata for a column for query execution purpose.\n+ */\n public interface DataSourceMetadata {\n \n-  DataType getDataType();\n+  /**\n+   * Returns the field spec of the column.\n+   */\n+  FieldSpec getFieldSpec();\n+\n+  /**\n+   * Returns the data type of the column.\n+   */\n+  default FieldSpec.DataType getDataType() {\n+    return getFieldSpec().getDataType();\n+  }\n \n-  boolean isSingleValue();\n+  /**\n+   * Returns {@code true} if the column is single-valued, {@code false} otherwise.\n+   */\n+  default boolean isSingleValue() {\n+    return getFieldSpec().isSingleValueField();\n+  }\n \n+  /**\n+   * Returns {@code true} if the column is sorted, {@code false} otherwise.\n+   */\n   boolean isSorted();\n \n+  /**\n+   * Returns the number of documents of the column.\n+   */\n   int getNumDocs();\n \n-  int getMaxNumMultiValues();\n+  /**\n+   * Returns the number of values of the column. For single-value column, number of values always equals to number of\n+   * documents; for multi-value column, each document (multi-value entry) may contain multiple values.\n+   */\n+  int getNumValues();\n+\n+  /**\n+   * Returns the maximum number of values for each multi-value entry of the multi-value column. For single-value column,\n+   * the value is undefined.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODUwMjg5OQ=="}, "originalCommit": {"oid": "cd7ec3dcae6200dff12a62b1467731b9dfef2455"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNzA0OTIyOnYy", "diffSide": "RIGHT", "path": "pinot-core/src/main/java/org/apache/pinot/core/indexsegment/mutable/MutableSegmentImpl.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxOToyNzo0NlrOFyg9ow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxOTo0MToyOFrOF0eQwQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODUxMzE4Nw==", "bodyText": "Can we re-use the NumValuesInfo object instance by adding a clear method? I know we have been really careful about minimizing gc impact in this path.", "url": "https://github.com/apache/pinot/pull/5115#discussion_r388513187", "createdAt": "2020-03-05T19:27:46Z", "author": {"login": "mcvsubbu"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/indexsegment/mutable/MutableSegmentImpl.java", "diffHunk": "@@ -188,7 +197,7 @@ public long getLatestIngestionTimestamp() {\n     // Initialize for each column\n     for (FieldSpec fieldSpec : _physicalFieldSpecs) {\n       String column = fieldSpec.getName();\n-      _maxNumValuesMap.put(column, 0);\n+      _numValuesInfoMap.put(column, new NumValuesInfo());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cd7ec3dcae6200dff12a62b1467731b9dfef2455"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDU2NjA4MQ==", "bodyText": "These are per segment objects, so no need to clear and reuse", "url": "https://github.com/apache/pinot/pull/5115#discussion_r390566081", "createdAt": "2020-03-10T19:41:28Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/indexsegment/mutable/MutableSegmentImpl.java", "diffHunk": "@@ -188,7 +197,7 @@ public long getLatestIngestionTimestamp() {\n     // Initialize for each column\n     for (FieldSpec fieldSpec : _physicalFieldSpecs) {\n       String column = fieldSpec.getName();\n-      _maxNumValuesMap.put(column, 0);\n+      _numValuesInfoMap.put(column, new NumValuesInfo());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODUxMzE4Nw=="}, "originalCommit": {"oid": "cd7ec3dcae6200dff12a62b1467731b9dfef2455"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNzEyOTEzOnYy", "diffSide": "RIGHT", "path": "pinot-core/src/main/java/org/apache/pinot/core/segment/index/datasource/ImmutableDataSource.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxOTo1MTowOVrOFyhvaA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxOTo0MDoxOVrOF0eOHg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODUyNTkyOA==", "bodyText": "Javadoc should indicate this is per column", "url": "https://github.com/apache/pinot/pull/5115#discussion_r388525928", "createdAt": "2020-03-05T19:51:09Z", "author": {"login": "siddharthteotia"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/segment/index/datasource/ImmutableDataSource.java", "diffHunk": "@@ -0,0 +1,112 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.core.segment.index.datasource;\n+\n+import java.util.Set;\n+import javax.annotation.Nullable;\n+import org.apache.pinot.core.common.DataSourceMetadata;\n+import org.apache.pinot.core.data.partition.PartitionFunction;\n+import org.apache.pinot.core.segment.index.ColumnMetadata;\n+import org.apache.pinot.core.segment.index.column.ColumnIndexContainer;\n+import org.apache.pinot.spi.data.FieldSpec;\n+\n+\n+public class ImmutableDataSource extends BaseDataSource {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cd7ec3dcae6200dff12a62b1467731b9dfef2455"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDU2NTQwNg==", "bodyText": "Added", "url": "https://github.com/apache/pinot/pull/5115#discussion_r390565406", "createdAt": "2020-03-10T19:40:19Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/segment/index/datasource/ImmutableDataSource.java", "diffHunk": "@@ -0,0 +1,112 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.core.segment.index.datasource;\n+\n+import java.util.Set;\n+import javax.annotation.Nullable;\n+import org.apache.pinot.core.common.DataSourceMetadata;\n+import org.apache.pinot.core.data.partition.PartitionFunction;\n+import org.apache.pinot.core.segment.index.ColumnMetadata;\n+import org.apache.pinot.core.segment.index.column.ColumnIndexContainer;\n+import org.apache.pinot.spi.data.FieldSpec;\n+\n+\n+public class ImmutableDataSource extends BaseDataSource {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODUyNTkyOA=="}, "originalCommit": {"oid": "cd7ec3dcae6200dff12a62b1467731b9dfef2455"}, "originalPosition": 30}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3489, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}