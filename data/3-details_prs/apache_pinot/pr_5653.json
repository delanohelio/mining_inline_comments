{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQzNDM4NDcy", "number": 5653, "title": "Enhance min/max value support in realtime segment creation", "bodyText": "Description\n\nAdding min/max value support in realtime segment.\nFixes the NPE issue when configure time column as a no-dictionary column.", "createdAt": "2020-07-02T10:54:11Z", "url": "https://github.com/apache/pinot/pull/5653", "merged": true, "mergeCommit": {"oid": "1a6915a417555478df8a72238657ea23e6fd6aee"}, "closed": true, "closedAt": "2020-07-06T11:26:52Z", "author": {"login": "xiangfu0"}, "timelineItems": {"totalCount": 16, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcw8ysFgBqjM1MDY1NzMxMDc=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcyJ0f5gH2gAyNDQzNDM4NDcyOmY5MjU0ODRlNjRlMmQyOTdlNTA4ZTM1MDY1NWVmYTMwOTU4ZjE5OGQ=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "02787c8fc5049f61aeff374135246646543889fa", "author": {"user": {"login": "xiangfu0", "name": "Xiang Fu"}}, "url": "https://github.com/apache/pinot/commit/02787c8fc5049f61aeff374135246646543889fa", "committedDate": "2020-07-02T10:52:07Z", "message": "Adding min/max value support in realtime segment"}, "afterCommit": {"oid": "e07118fa89b1db77de50e1eba374b907a9740a46", "author": {"user": {"login": "xiangfu0", "name": "Xiang Fu"}}, "url": "https://github.com/apache/pinot/commit/e07118fa89b1db77de50e1eba374b907a9740a46", "committedDate": "2020-07-02T11:03:55Z", "message": "Adding min/max value support in realtime segment"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e07118fa89b1db77de50e1eba374b907a9740a46", "author": {"user": {"login": "xiangfu0", "name": "Xiang Fu"}}, "url": "https://github.com/apache/pinot/commit/e07118fa89b1db77de50e1eba374b907a9740a46", "committedDate": "2020-07-02T11:03:55Z", "message": "Adding min/max value support in realtime segment"}, "afterCommit": {"oid": "1bc9f21aa90f5f26347a9412a33cfa09eaa677ad", "author": {"user": {"login": "xiangfu0", "name": "Xiang Fu"}}, "url": "https://github.com/apache/pinot/commit/1bc9f21aa90f5f26347a9412a33cfa09eaa677ad", "committedDate": "2020-07-02T11:48:15Z", "message": "Adding min/max value support in realtime segment"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "1bc9f21aa90f5f26347a9412a33cfa09eaa677ad", "author": {"user": {"login": "xiangfu0", "name": "Xiang Fu"}}, "url": "https://github.com/apache/pinot/commit/1bc9f21aa90f5f26347a9412a33cfa09eaa677ad", "committedDate": "2020-07-02T11:48:15Z", "message": "Adding min/max value support in realtime segment"}, "afterCommit": {"oid": "7f995dfca2f58c2b407895274ee62d94161ae75e", "author": {"user": {"login": "xiangfu0", "name": "Xiang Fu"}}, "url": "https://github.com/apache/pinot/commit/7f995dfca2f58c2b407895274ee62d94161ae75e", "committedDate": "2020-07-02T12:24:01Z", "message": "Adding min/max value support in realtime segment"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQxNzEzMTM5", "url": "https://github.com/apache/pinot/pull/5653#pullrequestreview-441713139", "createdAt": "2020-07-02T14:07:05Z", "commit": {"oid": "7f995dfca2f58c2b407895274ee62d94161ae75e"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxNDowNzowNVrOGsOfqQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxNDoxMTo1NlrOGsOsjA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTAyODAwOQ==", "bodyText": "Seems this is used only in HLRealtimeSegmentDataManager?", "url": "https://github.com/apache/pinot/pull/5653#discussion_r449028009", "createdAt": "2020-07-02T14:07:05Z", "author": {"login": "mayankshriv"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/indexsegment/mutable/MutableSegmentImpl.java", "diffHunk": "@@ -367,11 +366,33 @@ public SegmentPartitionConfig getSegmentPartitionConfig() {\n   }\n \n   public long getMinTime() {\n-    return _minTime;\n+    Long minTime = extractTimeValue(_minValueMap.get(_timeColumnName));\n+    if (minTime != null) {\n+      return minTime;\n+    }\n+    return Long.MAX_VALUE;\n   }\n \n   public long getMaxTime() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f995dfca2f58c2b407895274ee62d94161ae75e"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTAyOTc5Mw==", "bodyText": "Can this be done inline during index() (inside addForwardIndex)? Doing it separately may have several redundant operations, that may impact use cases with high ingestion rate.", "url": "https://github.com/apache/pinot/pull/5653#discussion_r449029793", "createdAt": "2020-07-02T14:09:47Z", "author": {"login": "mayankshriv"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/indexsegment/mutable/MutableSegmentImpl.java", "diffHunk": "@@ -425,6 +449,37 @@ public boolean index(GenericRow row, @Nullable RowMetadata rowMetadata) {\n     return canTakeMore;\n   }\n \n+  private void updateMinMaxValue(GenericRow row) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f995dfca2f58c2b407895274ee62d94161ae75e"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTAzMTMwOA==", "bodyText": "Will this be run as a separate integration test (as in setup/teardown the cluster)? If so, perhaps it can be merged into RealtimeClusterIntegrationTest by choosing some of the columns as noDictionary?", "url": "https://github.com/apache/pinot/pull/5653#discussion_r449031308", "createdAt": "2020-07-02T14:11:56Z", "author": {"login": "mayankshriv"}, "path": "pinot-integration-tests/src/test/java/org/apache/pinot/integration/tests/RealtimeNoDictionaryTimeColumnClusterIntegrationTest.java", "diffHunk": "@@ -0,0 +1,42 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.integration.tests;\n+\n+import java.io.File;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import org.apache.commons.io.FileUtils;\n+import org.apache.pinot.util.TestUtils;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Test;\n+\n+\n+/**\n+ * Extends RealtimeClusterIntegrationTest and configure time column to be a non-dictionary column.\n+ */\n+public class RealtimeNoDictionaryTimeColumnClusterIntegrationTest extends RealtimeClusterIntegrationTest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f995dfca2f58c2b407895274ee62d94161ae75e"}, "originalPosition": 35}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "7f995dfca2f58c2b407895274ee62d94161ae75e", "author": {"user": {"login": "xiangfu0", "name": "Xiang Fu"}}, "url": "https://github.com/apache/pinot/commit/7f995dfca2f58c2b407895274ee62d94161ae75e", "committedDate": "2020-07-02T12:24:01Z", "message": "Adding min/max value support in realtime segment"}, "afterCommit": {"oid": "804feb60fa86e0b8cb04232ee8a34bc192e61df8", "author": {"user": {"login": "xiangfu0", "name": "Xiang Fu"}}, "url": "https://github.com/apache/pinot/commit/804feb60fa86e0b8cb04232ee8a34bc192e61df8", "committedDate": "2020-07-02T18:04:59Z", "message": "Adding min/max value support in realtime segment"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQxOTM0MDkz", "url": "https://github.com/apache/pinot/pull/5653#pullrequestreview-441934093", "createdAt": "2020-07-02T18:33:01Z", "commit": {"oid": "804feb60fa86e0b8cb04232ee8a34bc192e61df8"}, "state": "COMMENTED", "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxODozMzowMVrOGsY_uQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxODo0NDozNVrOGsZUmQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTIwMDA1Nw==", "bodyText": "This has potential thread safety issue (expanding hashMap while reading). You can prevent that by putting null in the constructor.", "url": "https://github.com/apache/pinot/pull/5653#discussion_r449200057", "createdAt": "2020-07-02T18:33:01Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/indexsegment/mutable/MutableSegmentImpl.java", "diffHunk": "@@ -116,15 +116,14 @@\n   private final Map<String, InvertedIndexReader> _invertedIndexMap = new HashMap<>();\n   private final Map<String, InvertedIndexReader> _rangeIndexMap = new HashMap<>();\n   private final Map<String, BloomFilterReader> _bloomFilterMap = new HashMap<>();\n+  private final Map<String, Comparable> _minValueMap = new HashMap<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "804feb60fa86e0b8cb04232ee8a34bc192e61df8"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTIwMDMzMg==", "bodyText": "(nit) revert?", "url": "https://github.com/apache/pinot/pull/5653#discussion_r449200332", "createdAt": "2020-07-02T18:33:42Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/segment/creator/impl/SegmentColumnarIndexCreator.java", "diffHunk": "@@ -491,7 +491,6 @@ public static void addColumnMetadataInfo(PropertiesConfiguration properties, Str\n         String.valueOf(columnIndexCreationInfo.getTotalNumberOfEntries()));\n     properties.setProperty(V1Constants.MetadataKeys.Column.getKeyFor(column, IS_AUTO_GENERATED),\n         String.valueOf(columnIndexCreationInfo.isAutoGenerated()));\n-", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "804feb60fa86e0b8cb04232ee8a34bc192e61df8"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTIwMDU1NA==", "bodyText": "Annotate them as nullable", "url": "https://github.com/apache/pinot/pull/5653#discussion_r449200554", "createdAt": "2020-07-02T18:34:14Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/segment/index/datasource/MutableDataSource.java", "diffHunk": "@@ -39,11 +39,12 @@\n   private static final String OPERATOR_NAME_PREFIX = \"MutableDataSource:\";\n \n   public MutableDataSource(FieldSpec fieldSpec, int numDocs, int numValues, int maxNumValuesPerMVEntry,\n-      @Nullable PartitionFunction partitionFunction, int partitionId, DataFileReader forwardIndex,\n-      @Nullable Dictionary dictionary, @Nullable InvertedIndexReader invertedIndex, @Nullable InvertedIndexReader rangeIndex,\n-      @Nullable BloomFilterReader bloomFilter, @Nullable NullValueVectorReader nullValueVector) {\n+      @Nullable PartitionFunction partitionFunction, int partitionId, Comparable minValue, Comparable maxValue,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "804feb60fa86e0b8cb04232ee8a34bc192e61df8"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTIwMDU4NA==", "bodyText": "Annotate them as nullable", "url": "https://github.com/apache/pinot/pull/5653#discussion_r449200584", "createdAt": "2020-07-02T18:34:17Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/segment/index/datasource/MutableDataSource.java", "diffHunk": "@@ -54,9 +55,11 @@ public MutableDataSource(FieldSpec fieldSpec, int numDocs, int numValues, int ma\n     final int _maxNumValuesPerMVEntry;\n     final PartitionFunction _partitionFunction;\n     final Set<Integer> _partitions;\n+    final Comparable _minValue;\n+    final Comparable _maxValue;\n \n     MutableDataSourceMetadata(FieldSpec fieldSpec, int numDocs, int numValues, int maxNumValuesPerMVEntry,\n-        @Nullable PartitionFunction partitionFunction, int partitionId) {\n+        @Nullable PartitionFunction partitionFunction, int partitionId, Comparable minValue, Comparable maxValue) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "804feb60fa86e0b8cb04232ee8a34bc192e61df8"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTIwMDc2Mg==", "bodyText": "Revert", "url": "https://github.com/apache/pinot/pull/5653#discussion_r449200762", "createdAt": "2020-07-02T18:34:37Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-integration-tests/src/test/java/org/apache/pinot/integration/tests/RealtimeClusterIntegrationTest.java", "diffHunk": "@@ -19,8 +19,10 @@\n package org.apache.pinot.integration.tests;\n \n import java.io.File;\n+import java.util.Arrays;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "804feb60fa86e0b8cb04232ee8a34bc192e61df8"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTIwNDM0OA==", "bodyText": "Cache _minValueMap.get(column) here to save 2 extra map lookups", "url": "https://github.com/apache/pinot/pull/5653#discussion_r449204348", "createdAt": "2020-07-02T18:42:20Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/indexsegment/mutable/MutableSegmentImpl.java", "diffHunk": "@@ -514,6 +518,32 @@ private void addForwardIndex(GenericRow row, int docId, Map<String, Object> dict\n \n         numValuesInfo.updateMVEntry(dictIds.length);\n       }\n+\n+      // Update min/max value for columns\n+      BaseMutableDictionary dictionary = _dictionaryMap.get(column);\n+      if (dictionary != null) {\n+        _minValueMap.put(column, dictionary.getMinVal());\n+        _maxValueMap.put(column, dictionary.getMaxVal());\n+        continue;\n+      }\n+      if (value == null) {\n+        continue;\n+      }\n+      if (!(value instanceof Comparable)) {\n+        continue;\n+      }\n+      Comparable comparableValue = (Comparable) value;\n+      if (!_minValueMap.containsKey(column)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "804feb60fa86e0b8cb04232ee8a34bc192e61df8"}, "originalPosition": 98}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTIwNDkyOQ==", "bodyText": "This check is redundant (1. value cannot be null; 2. already handled in the instanceof check)", "url": "https://github.com/apache/pinot/pull/5653#discussion_r449204929", "createdAt": "2020-07-02T18:43:31Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/indexsegment/mutable/MutableSegmentImpl.java", "diffHunk": "@@ -514,6 +518,32 @@ private void addForwardIndex(GenericRow row, int docId, Map<String, Object> dict\n \n         numValuesInfo.updateMVEntry(dictIds.length);\n       }\n+\n+      // Update min/max value for columns\n+      BaseMutableDictionary dictionary = _dictionaryMap.get(column);\n+      if (dictionary != null) {\n+        _minValueMap.put(column, dictionary.getMinVal());\n+        _maxValueMap.put(column, dictionary.getMaxVal());\n+        continue;\n+      }\n+      if (value == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "804feb60fa86e0b8cb04232ee8a34bc192e61df8"}, "originalPosition": 91}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTIwNTQwMQ==", "bodyText": "One way to merge these 2 tests is by using a random boolean to decide the NoDictionaryColumns", "url": "https://github.com/apache/pinot/pull/5653#discussion_r449205401", "createdAt": "2020-07-02T18:44:35Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-integration-tests/src/test/java/org/apache/pinot/integration/tests/RealtimeNoDictionaryTimeColumnClusterIntegrationTest.java", "diffHunk": "@@ -0,0 +1,42 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.integration.tests;\n+\n+import java.io.File;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import org.apache.commons.io.FileUtils;\n+import org.apache.pinot.util.TestUtils;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Test;\n+\n+\n+/**\n+ * Extends RealtimeClusterIntegrationTest and configure time column to be a non-dictionary column.\n+ */\n+public class RealtimeNoDictionaryTimeColumnClusterIntegrationTest extends RealtimeClusterIntegrationTest {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTAzMTMwOA=="}, "originalCommit": {"oid": "7f995dfca2f58c2b407895274ee62d94161ae75e"}, "originalPosition": 35}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "804feb60fa86e0b8cb04232ee8a34bc192e61df8", "author": {"user": {"login": "xiangfu0", "name": "Xiang Fu"}}, "url": "https://github.com/apache/pinot/commit/804feb60fa86e0b8cb04232ee8a34bc192e61df8", "committedDate": "2020-07-02T18:04:59Z", "message": "Adding min/max value support in realtime segment"}, "afterCommit": {"oid": "6069186482161d317a884b28aef4fd8327e48990", "author": {"user": {"login": "xiangfu0", "name": "Xiang Fu"}}, "url": "https://github.com/apache/pinot/commit/6069186482161d317a884b28aef4fd8327e48990", "committedDate": "2020-07-02T19:50:16Z", "message": "Adding min/max value support in realtime segment"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "6069186482161d317a884b28aef4fd8327e48990", "author": {"user": {"login": "xiangfu0", "name": "Xiang Fu"}}, "url": "https://github.com/apache/pinot/commit/6069186482161d317a884b28aef4fd8327e48990", "committedDate": "2020-07-02T19:50:16Z", "message": "Adding min/max value support in realtime segment"}, "afterCommit": {"oid": "375d1516f368c0c5aa3ae2b671e986524dc21deb", "author": {"user": {"login": "xiangfu0", "name": "Xiang Fu"}}, "url": "https://github.com/apache/pinot/commit/375d1516f368c0c5aa3ae2b671e986524dc21deb", "committedDate": "2020-07-02T19:53:46Z", "message": "Adding min/max value support in realtime segment"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3a421a95312309772718c621ca1d761022c373fa", "author": {"user": {"login": "xiangfu0", "name": "Xiang Fu"}}, "url": "https://github.com/apache/pinot/commit/3a421a95312309772718c621ca1d761022c373fa", "committedDate": "2020-07-03T00:16:21Z", "message": "Adding min/max value support in realtime segment"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "375d1516f368c0c5aa3ae2b671e986524dc21deb", "author": {"user": {"login": "xiangfu0", "name": "Xiang Fu"}}, "url": "https://github.com/apache/pinot/commit/375d1516f368c0c5aa3ae2b671e986524dc21deb", "committedDate": "2020-07-02T19:53:46Z", "message": "Adding min/max value support in realtime segment"}, "afterCommit": {"oid": "3a421a95312309772718c621ca1d761022c373fa", "author": {"user": {"login": "xiangfu0", "name": "Xiang Fu"}}, "url": "https://github.com/apache/pinot/commit/3a421a95312309772718c621ca1d761022c373fa", "committedDate": "2020-07-03T00:16:21Z", "message": "Adding min/max value support in realtime segment"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQyNTQzNjQ4", "url": "https://github.com/apache/pinot/pull/5653#pullrequestreview-442543648", "createdAt": "2020-07-03T19:34:41Z", "commit": {"oid": "3a421a95312309772718c621ca1d761022c373fa"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QxOTozNDo0MVrOGs23ig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QxOTozNDo0MVrOGs23ig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTY4OTQ4Mg==", "bodyText": "why are we assuming time is always long?", "url": "https://github.com/apache/pinot/pull/5653#discussion_r449689482", "createdAt": "2020-07-03T19:34:41Z", "author": {"login": "kishoreg"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/indexsegment/mutable/MutableSegmentImpl.java", "diffHunk": "@@ -367,11 +370,33 @@ public SegmentPartitionConfig getSegmentPartitionConfig() {\n   }\n \n   public long getMinTime() {\n-    return _minTime;\n+    Long minTime = extractTimeValue(_minValueMap.get(_timeColumnName));\n+    if (minTime != null) {\n+      return minTime;\n+    }\n+    return Long.MAX_VALUE;\n   }\n \n   public long getMaxTime() {\n-    return _maxTime;\n+    Long maxTime = extractTimeValue(_maxValueMap.get(_timeColumnName));\n+    if (maxTime != null) {\n+      return maxTime;\n+    }\n+    return Long.MIN_VALUE;\n+  }\n+\n+  private Long extractTimeValue(Comparable time) {\n+    if (time != null) {\n+      if (time instanceof Number) {\n+        return ((Number) time).longValue();\n+      } else {\n+        String stringValue = time.toString();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3a421a95312309772718c621ca1d761022c373fa"}, "originalPosition": 56}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQyNTY2NjI1", "url": "https://github.com/apache/pinot/pull/5653#pullrequestreview-442566625", "createdAt": "2020-07-03T22:00:15Z", "commit": {"oid": "7f995dfca2f58c2b407895274ee62d94161ae75e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QyMjowMToyNFrOGs4K7Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QyMjowMToyNFrOGs4K7Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTcxMDgyOQ==", "bodyText": "In case of offheap string dictionary it will create a new string everytime from the serialized values. Why nnot just get the minvalue when needed from the dictionary?", "url": "https://github.com/apache/pinot/pull/5653#discussion_r449710829", "createdAt": "2020-07-03T22:01:24Z", "author": {"login": "mcvsubbu"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/indexsegment/mutable/MutableSegmentImpl.java", "diffHunk": "@@ -514,6 +522,30 @@ private void addForwardIndex(GenericRow row, int docId, Map<String, Object> dict\n \n         numValuesInfo.updateMVEntry(dictIds.length);\n       }\n+\n+      // Update min/max value for columns\n+      BaseMutableDictionary dictionary = _dictionaryMap.get(column);\n+      if (dictionary != null) {\n+        _minValueMap.put(column, dictionary.getMinVal());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3a421a95312309772718c621ca1d761022c373fa"}, "originalPosition": 98}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1393d5b80f1212b2e87e825e18e1fcc68b8dd2a0", "author": {"user": {"login": "xiangfu0", "name": "Xiang Fu"}}, "url": "https://github.com/apache/pinot/commit/1393d5b80f1212b2e87e825e18e1fcc68b8dd2a0", "committedDate": "2020-07-04T12:25:02Z", "message": "Only cache min/max values for non-dictionary columns in MutableSegmentImpl"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b58b112b2d441009017c642f868205ba49563502", "author": {"user": {"login": "xiangfu0", "name": "Xiang Fu"}}, "url": "https://github.com/apache/pinot/commit/b58b112b2d441009017c642f868205ba49563502", "committedDate": "2020-07-04T12:05:59Z", "message": "Only cache min/max values for non-dictionary columns in MutableSegmentImpl"}, "afterCommit": {"oid": "1393d5b80f1212b2e87e825e18e1fcc68b8dd2a0", "author": {"user": {"login": "xiangfu0", "name": "Xiang Fu"}}, "url": "https://github.com/apache/pinot/commit/1393d5b80f1212b2e87e825e18e1fcc68b8dd2a0", "committedDate": "2020-07-04T12:25:02Z", "message": "Only cache min/max values for non-dictionary columns in MutableSegmentImpl"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQyNzAxNzQ0", "url": "https://github.com/apache/pinot/pull/5653#pullrequestreview-442701744", "createdAt": "2020-07-05T19:44:57Z", "commit": {"oid": "1393d5b80f1212b2e87e825e18e1fcc68b8dd2a0"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNVQxOTo0NDo1N1rOGtEcTQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNVQxOTo0NjozNlrOGtEc4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTkxMTg4NQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    _minValueMap.put(fieldSpec.getName(), null);\n          \n          \n            \n                    _maxValueMap.put(fieldSpec.getName(), null);\n          \n          \n            \n                    _minValueMap.put(column, null);\n          \n          \n            \n                    _maxValueMap.put(column, null);", "url": "https://github.com/apache/pinot/pull/5653#discussion_r449911885", "createdAt": "2020-07-05T19:44:57Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/indexsegment/mutable/MutableSegmentImpl.java", "diffHunk": "@@ -227,6 +226,9 @@ public long getLatestIngestionTimestamp() {\n         if (isFixedWidthColumn) {\n           forwardIndexColumnSize = dataType.size();\n         }\n+        // Init min/max value map to avoid potential thread safety issue (expanding hashMap while reading).\n+        _minValueMap.put(fieldSpec.getName(), null);\n+        _maxValueMap.put(fieldSpec.getName(), null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1393d5b80f1212b2e87e825e18e1fcc68b8dd2a0"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTkxMjAzNA==", "bodyText": "Is numeric is not good enough, recommend put try-catch over Long.parseLong(stringValue)", "url": "https://github.com/apache/pinot/pull/5653#discussion_r449912034", "createdAt": "2020-07-05T19:46:36Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/indexsegment/mutable/MutableSegmentImpl.java", "diffHunk": "@@ -366,12 +368,68 @@ public SegmentPartitionConfig getSegmentPartitionConfig() {\n     }\n   }\n \n+  /**\n+   * Get min time from the segment, based on the time column, only used by Kafka HLC.\n+   */\n+  @Deprecated\n   public long getMinTime() {\n-    return _minTime;\n+    Long minTime = extractTimeValue(getMinVal(_timeColumnName));\n+    if (minTime != null) {\n+      return minTime;\n+    }\n+    return Long.MAX_VALUE;\n   }\n \n+  /**\n+   * Get max time from the segment, based on the time column, only used by Kafka HLC.\n+   */\n+  @Deprecated\n   public long getMaxTime() {\n-    return _maxTime;\n+    Long maxTime = extractTimeValue(getMaxVal(_timeColumnName));\n+    if (maxTime != null) {\n+      return maxTime;\n+    }\n+    return Long.MIN_VALUE;\n+  }\n+\n+  private Long extractTimeValue(Comparable time) {\n+    if (time != null) {\n+      if (time instanceof Number) {\n+        return ((Number) time).longValue();\n+      } else {\n+        String stringValue = time.toString();\n+        if (StringUtils.isNumeric(stringValue)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1393d5b80f1212b2e87e825e18e1fcc68b8dd2a0"}, "originalPosition": 74}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f925484e64e2d297e508e350655efa30958f198d", "author": {"user": {"login": "xiangfu0", "name": "Xiang Fu"}}, "url": "https://github.com/apache/pinot/commit/f925484e64e2d297e508e350655efa30958f198d", "committedDate": "2020-07-06T04:48:47Z", "message": "Update pinot-core/src/main/java/org/apache/pinot/core/indexsegment/mutable/MutableSegmentImpl.java\n\nCo-authored-by: Xiaotian (Jackie) Jiang <17555551+Jackie-Jiang@users.noreply.github.com>"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 756, "cost": 1, "resetAt": "2021-10-28T18:00:02Z"}}}