{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU1MDc3OTQx", "number": 5728, "reviewThreads": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxOTozMjoxNFrOERMHiw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQyMzo1Mjo0NVrOET4giw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2NDU5Nzg3OnYy", "diffSide": "RIGHT", "path": "pinot-broker/src/main/java/org/apache/pinot/broker/routing/segmentselector/OfflineSegmentSelector.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxOTozMjoxNFrOG1xL6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxOTozMjoxNFrOG1xL6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTAzMzU3OA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              private SegmentLineageBasedSegmentSelector _segmentLineageBasedSegmentSelector;\n          \n          \n            \n              private final SegmentLineageBasedSegmentSelector _segmentLineageBasedSegmentSelector;", "url": "https://github.com/apache/pinot/pull/5728#discussion_r459033578", "createdAt": "2020-07-22T19:32:14Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-broker/src/main/java/org/apache/pinot/broker/routing/segmentselector/OfflineSegmentSelector.java", "diffHunk": "@@ -30,10 +31,17 @@\n  * Segment selector for offline table.\n  */\n public class OfflineSegmentSelector implements SegmentSelector {\n+  private SegmentLineageBasedSegmentSelector _segmentLineageBasedSegmentSelector;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3a2938be4586a898b096e300cc60626e0ffd1ffa"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2NDY2MzM1OnYy", "diffSide": "RIGHT", "path": "pinot-broker/src/main/java/org/apache/pinot/broker/routing/segmentselector/SegmentLineageBasedSegmentSelector.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxOTo1MTo1M1rOG1x03g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxOTo1MTo1M1rOG1x03g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTA0NDA2Mg==", "bodyText": "Don't implement SegmentSelector because it is not actually a segment selector, but a component inside the segment selector.\nYou may re-design the methods for this class to make it easier to use, e.g. public Set<String> refreshLinage(Set<String> onlineSegments); which returns the candidate segments based on the linage", "url": "https://github.com/apache/pinot/pull/5728#discussion_r459044062", "createdAt": "2020-07-22T19:51:53Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-broker/src/main/java/org/apache/pinot/broker/routing/segmentselector/SegmentLineageBasedSegmentSelector.java", "diffHunk": "@@ -0,0 +1,80 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.broker.routing.segmentselector;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+import org.apache.helix.ZNRecord;\n+import org.apache.helix.model.ExternalView;\n+import org.apache.helix.store.zk.ZkHelixPropertyStore;\n+import org.apache.pinot.common.lineage.LineageEntry;\n+import org.apache.pinot.common.lineage.LineageEntryState;\n+import org.apache.pinot.common.lineage.SegmentLineage;\n+import org.apache.pinot.common.lineage.SegmentLineageAccessHelper;\n+import org.apache.pinot.common.request.BrokerRequest;\n+\n+\n+public class SegmentLineageBasedSegmentSelector implements SegmentSelector {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3a2938be4586a898b096e300cc60626e0ffd1ffa"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2NDY2NjU5OnYy", "diffSide": "RIGHT", "path": "pinot-broker/src/main/java/org/apache/pinot/broker/routing/segmentselector/SegmentSelectorFactory.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxOTo1Mjo0NlrOG1x2zA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQwNDoyNzo1MFrOG2izGw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTA0NDU1Ng==", "bodyText": "Table name in table config always have the suffix\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                String tableNameWithType =\n          \n          \n            \n                    TableNameBuilder.forType(tableConfig.getTableType()).tableNameWithType(tableConfig.getTableName());\n          \n          \n            \n                String tableNameWithType = tableConfig.getTableName();", "url": "https://github.com/apache/pinot/pull/5728#discussion_r459044556", "createdAt": "2020-07-22T19:52:46Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-broker/src/main/java/org/apache/pinot/broker/routing/segmentselector/SegmentSelectorFactory.java", "diffHunk": "@@ -17,19 +17,25 @@\n  * under the License.\n  */\n package org.apache.pinot.broker.routing.segmentselector;\n+import org.apache.helix.ZNRecord;\n+import org.apache.helix.store.zk.ZkHelixPropertyStore;\n import org.apache.pinot.spi.config.table.TableConfig;\n import org.apache.pinot.spi.config.table.TableType;\n+import org.apache.pinot.spi.utils.builder.TableNameBuilder;\n \n \n public class SegmentSelectorFactory {\n   private SegmentSelectorFactory() {\n   }\n \n-  public static SegmentSelector getSegmentSelector(TableConfig tableConfig) {\n+  public static SegmentSelector getSegmentSelector(TableConfig tableConfig,\n+      ZkHelixPropertyStore<ZNRecord> propertyStore) {\n+    String tableNameWithType =\n+        TableNameBuilder.forType(tableConfig.getTableType()).tableNameWithType(tableConfig.getTableName());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3a2938be4586a898b096e300cc60626e0ffd1ffa"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTg0NjQyNw==", "bodyText": "fixed", "url": "https://github.com/apache/pinot/pull/5728#discussion_r459846427", "createdAt": "2020-07-24T04:27:50Z", "author": {"login": "snleee"}, "path": "pinot-broker/src/main/java/org/apache/pinot/broker/routing/segmentselector/SegmentSelectorFactory.java", "diffHunk": "@@ -17,19 +17,25 @@\n  * under the License.\n  */\n package org.apache.pinot.broker.routing.segmentselector;\n+import org.apache.helix.ZNRecord;\n+import org.apache.helix.store.zk.ZkHelixPropertyStore;\n import org.apache.pinot.spi.config.table.TableConfig;\n import org.apache.pinot.spi.config.table.TableType;\n+import org.apache.pinot.spi.utils.builder.TableNameBuilder;\n \n \n public class SegmentSelectorFactory {\n   private SegmentSelectorFactory() {\n   }\n \n-  public static SegmentSelector getSegmentSelector(TableConfig tableConfig) {\n+  public static SegmentSelector getSegmentSelector(TableConfig tableConfig,\n+      ZkHelixPropertyStore<ZNRecord> propertyStore) {\n+    String tableNameWithType =\n+        TableNameBuilder.forType(tableConfig.getTableType()).tableNameWithType(tableConfig.getTableName());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTA0NDU1Ng=="}, "originalCommit": {"oid": "3a2938be4586a898b096e300cc60626e0ffd1ffa"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3MzY2MzUwOnYy", "diffSide": "RIGHT", "path": "pinot-broker/src/main/java/org/apache/pinot/broker/routing/segmentselector/OfflineSegmentSelector.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNVQxNDowNzoxMFrOG3FGCQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxMzoyMjowMlrOG5iv9A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDQwODMyOQ==", "bodyText": "This seems a bit confusing:\n\nOne segment selector class contains another segment segment selector.\nEven though both are named SegmentSelector, only one of them implements the SegmentSelector interface.\n\nI think SegmentLineageBasedSegmentSelector needs to be renamed, since it is not really implementing the interface.", "url": "https://github.com/apache/pinot/pull/5728#discussion_r460408329", "createdAt": "2020-07-25T14:07:10Z", "author": {"login": "mayankshriv"}, "path": "pinot-broker/src/main/java/org/apache/pinot/broker/routing/segmentselector/OfflineSegmentSelector.java", "diffHunk": "@@ -30,10 +30,17 @@\n  * Segment selector for offline table.\n  */\n public class OfflineSegmentSelector implements SegmentSelector {\n+  private final SegmentLineageBasedSegmentSelector _segmentLineageBasedSegmentSelector;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d0c35445fff3432b5bf76ef2cba4e015bdf05162"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTA2NDIwMA==", "bodyText": "+1", "url": "https://github.com/apache/pinot/pull/5728#discussion_r461064200", "createdAt": "2020-07-27T17:49:48Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-broker/src/main/java/org/apache/pinot/broker/routing/segmentselector/OfflineSegmentSelector.java", "diffHunk": "@@ -30,10 +30,17 @@\n  * Segment selector for offline table.\n  */\n public class OfflineSegmentSelector implements SegmentSelector {\n+  private final SegmentLineageBasedSegmentSelector _segmentLineageBasedSegmentSelector;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDQwODMyOQ=="}, "originalCommit": {"oid": "d0c35445fff3432b5bf76ef2cba4e015bdf05162"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjk5MTM0OA==", "bodyText": "I adopted the SegmentPreSelector model.", "url": "https://github.com/apache/pinot/pull/5728#discussion_r462991348", "createdAt": "2020-07-30T13:22:02Z", "author": {"login": "snleee"}, "path": "pinot-broker/src/main/java/org/apache/pinot/broker/routing/segmentselector/OfflineSegmentSelector.java", "diffHunk": "@@ -30,10 +30,17 @@\n  * Segment selector for offline table.\n  */\n public class OfflineSegmentSelector implements SegmentSelector {\n+  private final SegmentLineageBasedSegmentSelector _segmentLineageBasedSegmentSelector;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDQwODMyOQ=="}, "originalCommit": {"oid": "d0c35445fff3432b5bf76ef2cba4e015bdf05162"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3MzY2NzA2OnYy", "diffSide": "RIGHT", "path": "pinot-broker/src/main/java/org/apache/pinot/broker/routing/segmentselector/OfflineSegmentSelector.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNVQxNDoxMjo0MFrOG3FHsA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQxODozODoxMFrOG4ZiCw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDQwODc1Mg==", "bodyText": "I am unclear on the extensibility of the code in future. Will we add more selectors and cascade them in future, for example versionBasedSelector/Pruner?", "url": "https://github.com/apache/pinot/pull/5728#discussion_r460408752", "createdAt": "2020-07-25T14:12:40Z", "author": {"login": "mayankshriv"}, "path": "pinot-broker/src/main/java/org/apache/pinot/broker/routing/segmentselector/OfflineSegmentSelector.java", "diffHunk": "@@ -42,7 +49,14 @@ public void onExternalViewChange(ExternalView externalView, Set<String> onlineSe\n     // TODO: for new added segments, before all replicas are up, consider not selecting them to avoid causing\n     //       hotspot servers\n \n-    _segments = Collections.unmodifiableList(new ArrayList<>(onlineSegments));\n+\n+    // Update segment lineage based segment selector\n+    _segmentLineageBasedSegmentSelector.onExternalViewChange();\n+\n+    // Compute the intersection of segments to process from both offline and segment lineage based segment selectors.\n+    List<String> segmentsToProcess =\n+        new ArrayList<>(_segmentLineageBasedSegmentSelector.computeSegmentsToProcess(onlineSegments));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d0c35445fff3432b5bf76ef2cba4e015bdf05162"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTA4ODI5Ng==", "bodyText": "Another way is to model this as a SegmentPreselector which filters the onlineSegments before getting into the SegmentSelector", "url": "https://github.com/apache/pinot/pull/5728#discussion_r461088296", "createdAt": "2020-07-27T18:32:26Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-broker/src/main/java/org/apache/pinot/broker/routing/segmentselector/OfflineSegmentSelector.java", "diffHunk": "@@ -42,7 +49,14 @@ public void onExternalViewChange(ExternalView externalView, Set<String> onlineSe\n     // TODO: for new added segments, before all replicas are up, consider not selecting them to avoid causing\n     //       hotspot servers\n \n-    _segments = Collections.unmodifiableList(new ArrayList<>(onlineSegments));\n+\n+    // Update segment lineage based segment selector\n+    _segmentLineageBasedSegmentSelector.onExternalViewChange();\n+\n+    // Compute the intersection of segments to process from both offline and segment lineage based segment selectors.\n+    List<String> segmentsToProcess =\n+        new ArrayList<>(_segmentLineageBasedSegmentSelector.computeSegmentsToProcess(onlineSegments));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDQwODc1Mg=="}, "originalCommit": {"oid": "d0c35445fff3432b5bf76ef2cba4e015bdf05162"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTY2MTQ0MA==", "bodyText": "thinking out loud here, should we model them it as pruner?", "url": "https://github.com/apache/pinot/pull/5728#discussion_r461661440", "createdAt": "2020-07-28T15:13:28Z", "author": {"login": "kishoreg"}, "path": "pinot-broker/src/main/java/org/apache/pinot/broker/routing/segmentselector/OfflineSegmentSelector.java", "diffHunk": "@@ -42,7 +49,14 @@ public void onExternalViewChange(ExternalView externalView, Set<String> onlineSe\n     // TODO: for new added segments, before all replicas are up, consider not selecting them to avoid causing\n     //       hotspot servers\n \n-    _segments = Collections.unmodifiableList(new ArrayList<>(onlineSegments));\n+\n+    // Update segment lineage based segment selector\n+    _segmentLineageBasedSegmentSelector.onExternalViewChange();\n+\n+    // Compute the intersection of segments to process from both offline and segment lineage based segment selectors.\n+    List<String> segmentsToProcess =\n+        new ArrayList<>(_segmentLineageBasedSegmentSelector.computeSegmentsToProcess(onlineSegments));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDQwODc1Mg=="}, "originalCommit": {"oid": "d0c35445fff3432b5bf76ef2cba4e015bdf05162"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTc5MTc1NQ==", "bodyText": "@kishoreg Based on the interface definition, I feel it is better to model it as SegmentSelector (The segments selected should cover the whole dataset (table) without overlap). Another benefit of putting it in Selector/Preselector is to avoid the per-query calculation within the Pruner", "url": "https://github.com/apache/pinot/pull/5728#discussion_r461791755", "createdAt": "2020-07-28T18:38:10Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-broker/src/main/java/org/apache/pinot/broker/routing/segmentselector/OfflineSegmentSelector.java", "diffHunk": "@@ -42,7 +49,14 @@ public void onExternalViewChange(ExternalView externalView, Set<String> onlineSe\n     // TODO: for new added segments, before all replicas are up, consider not selecting them to avoid causing\n     //       hotspot servers\n \n-    _segments = Collections.unmodifiableList(new ArrayList<>(onlineSegments));\n+\n+    // Update segment lineage based segment selector\n+    _segmentLineageBasedSegmentSelector.onExternalViewChange();\n+\n+    // Compute the intersection of segments to process from both offline and segment lineage based segment selectors.\n+    List<String> segmentsToProcess =\n+        new ArrayList<>(_segmentLineageBasedSegmentSelector.computeSegmentsToProcess(onlineSegments));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDQwODc1Mg=="}, "originalCommit": {"oid": "d0c35445fff3432b5bf76ef2cba4e015bdf05162"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3ODM4MzQxOnYy", "diffSide": "RIGHT", "path": "pinot-broker/src/main/java/org/apache/pinot/broker/routing/segmentselector/SegmentLineageBasedSegmentSelector.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxODoyMDozNVrOG3uMZg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxMzoyMTo1NVrOG5ivwg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTA4MTcwMg==", "bodyText": "You don't need to follow the interface for SegmentSelector. This class can be simplified into one method computeSegmentsToProcess() which fetches the lineage and filters the online segments.", "url": "https://github.com/apache/pinot/pull/5728#discussion_r461081702", "createdAt": "2020-07-27T18:20:35Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-broker/src/main/java/org/apache/pinot/broker/routing/segmentselector/SegmentLineageBasedSegmentSelector.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.broker.routing.segmentselector;\n+\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.Set;\n+import org.apache.helix.ZNRecord;\n+import org.apache.helix.store.zk.ZkHelixPropertyStore;\n+import org.apache.pinot.common.lineage.LineageEntry;\n+import org.apache.pinot.common.lineage.LineageEntryState;\n+import org.apache.pinot.common.lineage.SegmentLineage;\n+import org.apache.pinot.common.lineage.SegmentLineageAccessHelper;\n+\n+\n+public class SegmentLineageBasedSegmentSelector {\n+  private final String _tableNameWithType;\n+  private final ZkHelixPropertyStore<ZNRecord> _propertyStore;\n+\n+  private volatile Set<String> _segmentsToRemove;\n+\n+  public SegmentLineageBasedSegmentSelector(String tableNameWithType, ZkHelixPropertyStore<ZNRecord> propertyStore) {\n+    _tableNameWithType = tableNameWithType;\n+    _propertyStore = propertyStore;\n+  }\n+\n+  public void init() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d0c35445fff3432b5bf76ef2cba4e015bdf05162"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjk5MTI5OA==", "bodyText": "I adopted the SegmentPreSelector model.", "url": "https://github.com/apache/pinot/pull/5728#discussion_r462991298", "createdAt": "2020-07-30T13:21:55Z", "author": {"login": "snleee"}, "path": "pinot-broker/src/main/java/org/apache/pinot/broker/routing/segmentselector/SegmentLineageBasedSegmentSelector.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.broker.routing.segmentselector;\n+\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.Set;\n+import org.apache.helix.ZNRecord;\n+import org.apache.helix.store.zk.ZkHelixPropertyStore;\n+import org.apache.pinot.common.lineage.LineageEntry;\n+import org.apache.pinot.common.lineage.LineageEntryState;\n+import org.apache.pinot.common.lineage.SegmentLineage;\n+import org.apache.pinot.common.lineage.SegmentLineageAccessHelper;\n+\n+\n+public class SegmentLineageBasedSegmentSelector {\n+  private final String _tableNameWithType;\n+  private final ZkHelixPropertyStore<ZNRecord> _propertyStore;\n+\n+  private volatile Set<String> _segmentsToRemove;\n+\n+  public SegmentLineageBasedSegmentSelector(String tableNameWithType, ZkHelixPropertyStore<ZNRecord> propertyStore) {\n+    _tableNameWithType = tableNameWithType;\n+    _propertyStore = propertyStore;\n+  }\n+\n+  public void init() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTA4MTcwMg=="}, "originalCommit": {"oid": "d0c35445fff3432b5bf76ef2cba4e015bdf05162"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3ODQxOTI4OnYy", "diffSide": "RIGHT", "path": "pinot-broker/src/main/java/org/apache/pinot/broker/routing/segmentselector/SegmentLineageBasedSegmentSelector.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxODozMDo0NlrOG3uitA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxMzoyMTozMFrOG5iung==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTA4NzQxMg==", "bodyText": "(Not related to this PR) Before updating lineage to COMPLETED, we might need to check whether all the segments on the right side has turned ONLINE in external view, or we might end up querying partial data", "url": "https://github.com/apache/pinot/pull/5728#discussion_r461087412", "createdAt": "2020-07-27T18:30:46Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-broker/src/main/java/org/apache/pinot/broker/routing/segmentselector/SegmentLineageBasedSegmentSelector.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.broker.routing.segmentselector;\n+\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.Set;\n+import org.apache.helix.ZNRecord;\n+import org.apache.helix.store.zk.ZkHelixPropertyStore;\n+import org.apache.pinot.common.lineage.LineageEntry;\n+import org.apache.pinot.common.lineage.LineageEntryState;\n+import org.apache.pinot.common.lineage.SegmentLineage;\n+import org.apache.pinot.common.lineage.SegmentLineageAccessHelper;\n+\n+\n+public class SegmentLineageBasedSegmentSelector {\n+  private final String _tableNameWithType;\n+  private final ZkHelixPropertyStore<ZNRecord> _propertyStore;\n+\n+  private volatile Set<String> _segmentsToRemove;\n+\n+  public SegmentLineageBasedSegmentSelector(String tableNameWithType, ZkHelixPropertyStore<ZNRecord> propertyStore) {\n+    _tableNameWithType = tableNameWithType;\n+    _propertyStore = propertyStore;\n+  }\n+\n+  public void init() {\n+    onExternalViewChange();\n+  }\n+\n+  public void onExternalViewChange() {\n+    // Fetch segment lineage\n+    SegmentLineage segmentLineage = SegmentLineageAccessHelper.getSegmentLineage(_propertyStore, _tableNameWithType);\n+    Set<String> segmentsToRemove = new HashSet<>();\n+    if (segmentLineage != null) {\n+      for (String lineageEntryId : segmentLineage.getLineageEntryIds()) {\n+        LineageEntry lineageEntry = segmentLineage.getLineageEntry(lineageEntryId);\n+        if (lineageEntry.getState() == LineageEntryState.COMPLETED) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d0c35445fff3432b5bf76ef2cba4e015bdf05162"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjk5MTAwNg==", "bodyText": "I fixed the if check like the following:\n        if (lineageEntry.getState() == LineageEntryState.COMPLETED && onlineSegments\n            .containsAll(lineageEntry.getSegmentsTo())) {\n          segmentsToRemove.addAll(lineageEntry.getSegmentsFrom());\n        }", "url": "https://github.com/apache/pinot/pull/5728#discussion_r462991006", "createdAt": "2020-07-30T13:21:30Z", "author": {"login": "snleee"}, "path": "pinot-broker/src/main/java/org/apache/pinot/broker/routing/segmentselector/SegmentLineageBasedSegmentSelector.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.broker.routing.segmentselector;\n+\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.Set;\n+import org.apache.helix.ZNRecord;\n+import org.apache.helix.store.zk.ZkHelixPropertyStore;\n+import org.apache.pinot.common.lineage.LineageEntry;\n+import org.apache.pinot.common.lineage.LineageEntryState;\n+import org.apache.pinot.common.lineage.SegmentLineage;\n+import org.apache.pinot.common.lineage.SegmentLineageAccessHelper;\n+\n+\n+public class SegmentLineageBasedSegmentSelector {\n+  private final String _tableNameWithType;\n+  private final ZkHelixPropertyStore<ZNRecord> _propertyStore;\n+\n+  private volatile Set<String> _segmentsToRemove;\n+\n+  public SegmentLineageBasedSegmentSelector(String tableNameWithType, ZkHelixPropertyStore<ZNRecord> propertyStore) {\n+    _tableNameWithType = tableNameWithType;\n+    _propertyStore = propertyStore;\n+  }\n+\n+  public void init() {\n+    onExternalViewChange();\n+  }\n+\n+  public void onExternalViewChange() {\n+    // Fetch segment lineage\n+    SegmentLineage segmentLineage = SegmentLineageAccessHelper.getSegmentLineage(_propertyStore, _tableNameWithType);\n+    Set<String> segmentsToRemove = new HashSet<>();\n+    if (segmentLineage != null) {\n+      for (String lineageEntryId : segmentLineage.getLineageEntryIds()) {\n+        LineageEntry lineageEntry = segmentLineage.getLineageEntry(lineageEntryId);\n+        if (lineageEntry.getState() == LineageEntryState.COMPLETED) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTA4NzQxMg=="}, "originalCommit": {"oid": "d0c35445fff3432b5bf76ef2cba4e015bdf05162"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5MTg4MDg4OnYy", "diffSide": "RIGHT", "path": "pinot-broker/src/main/java/org/apache/pinot/broker/routing/RoutingManager.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxODoxNDo0OVrOG5uccA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQyMzozMjoxMFrOG53Ozw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzE4Mjk2MA==", "bodyText": "Pre-select onlineSegments before calling init on other components", "url": "https://github.com/apache/pinot/pull/5728#discussion_r463182960", "createdAt": "2020-07-30T18:14:49Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-broker/src/main/java/org/apache/pinot/broker/routing/RoutingManager.java", "diffHunk": "@@ -312,6 +314,8 @@ public synchronized void buildRouting(String tableNameWithType) {\n \n     Set<String> enabledInstances = _enabledServerInstanceMap.keySet();\n \n+    SegmentPreSelector segmentPreSelector =\n+        SegmentPreSelectorFactory.getSegmentPreSelector(tableConfig, _propertyStore);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8e0fca5326d09eb1c4e27592d4f6829b090b8dab"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzMyNjkyNw==", "bodyText": "good catch :)", "url": "https://github.com/apache/pinot/pull/5728#discussion_r463326927", "createdAt": "2020-07-30T23:32:10Z", "author": {"login": "snleee"}, "path": "pinot-broker/src/main/java/org/apache/pinot/broker/routing/RoutingManager.java", "diffHunk": "@@ -312,6 +314,8 @@ public synchronized void buildRouting(String tableNameWithType) {\n \n     Set<String> enabledInstances = _enabledServerInstanceMap.keySet();\n \n+    SegmentPreSelector segmentPreSelector =\n+        SegmentPreSelectorFactory.getSegmentPreSelector(tableConfig, _propertyStore);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzE4Mjk2MA=="}, "originalCommit": {"oid": "8e0fca5326d09eb1c4e27592d4f6829b090b8dab"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5MTkwMzc3OnYy", "diffSide": "RIGHT", "path": "pinot-broker/src/main/java/org/apache/pinot/broker/routing/segmentselector/SegmentLineageBasedSegmentPreSelector.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxODoyMToxN1rOG5uqUw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQyMzozOToyN1rOG53XOw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzE4NjUxNQ==", "bodyText": "Check lineage before creating segmentsToProcess and segmentsToRemove. If lineage does not exist, directly return onlineSegments to prevent unnecessary overhead.\n(Optional) Consider modifying onlineSegments in-place?", "url": "https://github.com/apache/pinot/pull/5728#discussion_r463186515", "createdAt": "2020-07-30T18:21:17Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-broker/src/main/java/org/apache/pinot/broker/routing/segmentselector/SegmentLineageBasedSegmentPreSelector.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.broker.routing.segmentselector;\n+\n+import java.util.HashSet;\n+import java.util.Set;\n+import org.apache.helix.ZNRecord;\n+import org.apache.helix.store.zk.ZkHelixPropertyStore;\n+import org.apache.pinot.common.lineage.LineageEntry;\n+import org.apache.pinot.common.lineage.LineageEntryState;\n+import org.apache.pinot.common.lineage.SegmentLineage;\n+import org.apache.pinot.common.lineage.SegmentLineageAccessHelper;\n+\n+\n+/**\n+ * Segment lineage based segment pre-selector\n+ *\n+ * This pre-selector reads the segment lineage metadata and filters out either merged segments or original segments\n+ * to make sure that the final segments contain no duplicate data.\n+ */\n+public class SegmentLineageBasedSegmentPreSelector implements SegmentPreSelector {\n+  private final String _tableNameWithType;\n+  private final ZkHelixPropertyStore<ZNRecord> _propertyStore;\n+\n+  public SegmentLineageBasedSegmentPreSelector(String tableNameWithType, ZkHelixPropertyStore<ZNRecord> propertyStore) {\n+    _tableNameWithType = tableNameWithType;\n+    _propertyStore = propertyStore;\n+  }\n+\n+  @Override\n+  public Set<String> preSelect(Set<String> onlineSegments) {\n+    Set<String> segmentsToProcess = new HashSet<>(onlineSegments);\n+    SegmentLineage segmentLineage = SegmentLineageAccessHelper.getSegmentLineage(_propertyStore, _tableNameWithType);\n+    Set<String> segmentsToRemove = new HashSet<>();\n+    if (segmentLineage != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8e0fca5326d09eb1c4e27592d4f6829b090b8dab"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzMyOTA4Mw==", "bodyText": "changed to modify onlineSegments in-place and also changed the code to create segmentsToRemove only if the lineage entry is not null.", "url": "https://github.com/apache/pinot/pull/5728#discussion_r463329083", "createdAt": "2020-07-30T23:39:27Z", "author": {"login": "snleee"}, "path": "pinot-broker/src/main/java/org/apache/pinot/broker/routing/segmentselector/SegmentLineageBasedSegmentPreSelector.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.broker.routing.segmentselector;\n+\n+import java.util.HashSet;\n+import java.util.Set;\n+import org.apache.helix.ZNRecord;\n+import org.apache.helix.store.zk.ZkHelixPropertyStore;\n+import org.apache.pinot.common.lineage.LineageEntry;\n+import org.apache.pinot.common.lineage.LineageEntryState;\n+import org.apache.pinot.common.lineage.SegmentLineage;\n+import org.apache.pinot.common.lineage.SegmentLineageAccessHelper;\n+\n+\n+/**\n+ * Segment lineage based segment pre-selector\n+ *\n+ * This pre-selector reads the segment lineage metadata and filters out either merged segments or original segments\n+ * to make sure that the final segments contain no duplicate data.\n+ */\n+public class SegmentLineageBasedSegmentPreSelector implements SegmentPreSelector {\n+  private final String _tableNameWithType;\n+  private final ZkHelixPropertyStore<ZNRecord> _propertyStore;\n+\n+  public SegmentLineageBasedSegmentPreSelector(String tableNameWithType, ZkHelixPropertyStore<ZNRecord> propertyStore) {\n+    _tableNameWithType = tableNameWithType;\n+    _propertyStore = propertyStore;\n+  }\n+\n+  @Override\n+  public Set<String> preSelect(Set<String> onlineSegments) {\n+    Set<String> segmentsToProcess = new HashSet<>(onlineSegments);\n+    SegmentLineage segmentLineage = SegmentLineageAccessHelper.getSegmentLineage(_propertyStore, _tableNameWithType);\n+    Set<String> segmentsToRemove = new HashSet<>();\n+    if (segmentLineage != null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzE4NjUxNQ=="}, "originalCommit": {"oid": "8e0fca5326d09eb1c4e27592d4f6829b090b8dab"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5MjA0MDkxOnYy", "diffSide": "RIGHT", "path": "pinot-broker/src/main/java/org/apache/pinot/broker/routing/segmentselector/SegmentLineageBasedSegmentPreSelector.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxOTowMjoyM1rOG5v_5A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQyMzozODowOVrOG53Vpw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzIwODQyMA==", "bodyText": "This won't work because the onlineSegments are from the idealState instead of the externalView. Also, it  won't be able to handle some corner cases.\nE.g. the lineage is as following, and one segment in segmentsB is unavailable\nsegmentsA -> segmentsB -> segmentsC\nThis algorithm will select both segmentsA and segmentsC, which will cause wrong result.\nI still think we should handle this when updating the lineage. Before updating the lineage to COMPLETED, we check whether all segmentsTo are available in externalView. Also, the updater needs to notify the broker to rebuild the routing because there might be no externalView change to trigger the lineage update.", "url": "https://github.com/apache/pinot/pull/5728#discussion_r463208420", "createdAt": "2020-07-30T19:02:23Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-broker/src/main/java/org/apache/pinot/broker/routing/segmentselector/SegmentLineageBasedSegmentPreSelector.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.broker.routing.segmentselector;\n+\n+import java.util.HashSet;\n+import java.util.Set;\n+import org.apache.helix.ZNRecord;\n+import org.apache.helix.store.zk.ZkHelixPropertyStore;\n+import org.apache.pinot.common.lineage.LineageEntry;\n+import org.apache.pinot.common.lineage.LineageEntryState;\n+import org.apache.pinot.common.lineage.SegmentLineage;\n+import org.apache.pinot.common.lineage.SegmentLineageAccessHelper;\n+\n+\n+/**\n+ * Segment lineage based segment pre-selector\n+ *\n+ * This pre-selector reads the segment lineage metadata and filters out either merged segments or original segments\n+ * to make sure that the final segments contain no duplicate data.\n+ */\n+public class SegmentLineageBasedSegmentPreSelector implements SegmentPreSelector {\n+  private final String _tableNameWithType;\n+  private final ZkHelixPropertyStore<ZNRecord> _propertyStore;\n+\n+  public SegmentLineageBasedSegmentPreSelector(String tableNameWithType, ZkHelixPropertyStore<ZNRecord> propertyStore) {\n+    _tableNameWithType = tableNameWithType;\n+    _propertyStore = propertyStore;\n+  }\n+\n+  @Override\n+  public Set<String> preSelect(Set<String> onlineSegments) {\n+    Set<String> segmentsToProcess = new HashSet<>(onlineSegments);\n+    SegmentLineage segmentLineage = SegmentLineageAccessHelper.getSegmentLineage(_propertyStore, _tableNameWithType);\n+    Set<String> segmentsToRemove = new HashSet<>();\n+    if (segmentLineage != null) {\n+      for (String lineageEntryId : segmentLineage.getLineageEntryIds()) {\n+        LineageEntry lineageEntry = segmentLineage.getLineageEntry(lineageEntryId);\n+        if (lineageEntry.getState() == LineageEntryState.COMPLETED && onlineSegments\n+            .containsAll(lineageEntry.getSegmentsTo())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8e0fca5326d09eb1c4e27592d4f6829b090b8dab"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzMyMzc1NA==", "bodyText": "Sorry for the confusion. I somehow assumed that onlineSegments are from external view but it's actually from the idealstate. As you also said, I also think that it's better to check the external view in endReplaceSegments, which updates the segment lineage and keep the segment pre-selector as simple as possible. I will revert this change and file the separate PR for this.", "url": "https://github.com/apache/pinot/pull/5728#discussion_r463323754", "createdAt": "2020-07-30T23:21:04Z", "author": {"login": "snleee"}, "path": "pinot-broker/src/main/java/org/apache/pinot/broker/routing/segmentselector/SegmentLineageBasedSegmentPreSelector.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.broker.routing.segmentselector;\n+\n+import java.util.HashSet;\n+import java.util.Set;\n+import org.apache.helix.ZNRecord;\n+import org.apache.helix.store.zk.ZkHelixPropertyStore;\n+import org.apache.pinot.common.lineage.LineageEntry;\n+import org.apache.pinot.common.lineage.LineageEntryState;\n+import org.apache.pinot.common.lineage.SegmentLineage;\n+import org.apache.pinot.common.lineage.SegmentLineageAccessHelper;\n+\n+\n+/**\n+ * Segment lineage based segment pre-selector\n+ *\n+ * This pre-selector reads the segment lineage metadata and filters out either merged segments or original segments\n+ * to make sure that the final segments contain no duplicate data.\n+ */\n+public class SegmentLineageBasedSegmentPreSelector implements SegmentPreSelector {\n+  private final String _tableNameWithType;\n+  private final ZkHelixPropertyStore<ZNRecord> _propertyStore;\n+\n+  public SegmentLineageBasedSegmentPreSelector(String tableNameWithType, ZkHelixPropertyStore<ZNRecord> propertyStore) {\n+    _tableNameWithType = tableNameWithType;\n+    _propertyStore = propertyStore;\n+  }\n+\n+  @Override\n+  public Set<String> preSelect(Set<String> onlineSegments) {\n+    Set<String> segmentsToProcess = new HashSet<>(onlineSegments);\n+    SegmentLineage segmentLineage = SegmentLineageAccessHelper.getSegmentLineage(_propertyStore, _tableNameWithType);\n+    Set<String> segmentsToRemove = new HashSet<>();\n+    if (segmentLineage != null) {\n+      for (String lineageEntryId : segmentLineage.getLineageEntryIds()) {\n+        LineageEntry lineageEntry = segmentLineage.getLineageEntry(lineageEntryId);\n+        if (lineageEntry.getState() == LineageEntryState.COMPLETED && onlineSegments\n+            .containsAll(lineageEntry.getSegmentsTo())) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzIwODQyMA=="}, "originalCommit": {"oid": "8e0fca5326d09eb1c4e27592d4f6829b090b8dab"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzMyODY3OQ==", "bodyText": "As for the edge case that you mentioned, the edge case is correctly covered if we check external view when updating the lineage and segment pre-selector only checks COMPLETED.\nThis means that once the validation passes and the lineage entry gets updated to COMPLETED, we will never fall back to the original segments (which makes sense because original segments need to be deleted by the retention manager soon).", "url": "https://github.com/apache/pinot/pull/5728#discussion_r463328679", "createdAt": "2020-07-30T23:38:09Z", "author": {"login": "snleee"}, "path": "pinot-broker/src/main/java/org/apache/pinot/broker/routing/segmentselector/SegmentLineageBasedSegmentPreSelector.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.broker.routing.segmentselector;\n+\n+import java.util.HashSet;\n+import java.util.Set;\n+import org.apache.helix.ZNRecord;\n+import org.apache.helix.store.zk.ZkHelixPropertyStore;\n+import org.apache.pinot.common.lineage.LineageEntry;\n+import org.apache.pinot.common.lineage.LineageEntryState;\n+import org.apache.pinot.common.lineage.SegmentLineage;\n+import org.apache.pinot.common.lineage.SegmentLineageAccessHelper;\n+\n+\n+/**\n+ * Segment lineage based segment pre-selector\n+ *\n+ * This pre-selector reads the segment lineage metadata and filters out either merged segments or original segments\n+ * to make sure that the final segments contain no duplicate data.\n+ */\n+public class SegmentLineageBasedSegmentPreSelector implements SegmentPreSelector {\n+  private final String _tableNameWithType;\n+  private final ZkHelixPropertyStore<ZNRecord> _propertyStore;\n+\n+  public SegmentLineageBasedSegmentPreSelector(String tableNameWithType, ZkHelixPropertyStore<ZNRecord> propertyStore) {\n+    _tableNameWithType = tableNameWithType;\n+    _propertyStore = propertyStore;\n+  }\n+\n+  @Override\n+  public Set<String> preSelect(Set<String> onlineSegments) {\n+    Set<String> segmentsToProcess = new HashSet<>(onlineSegments);\n+    SegmentLineage segmentLineage = SegmentLineageAccessHelper.getSegmentLineage(_propertyStore, _tableNameWithType);\n+    Set<String> segmentsToRemove = new HashSet<>();\n+    if (segmentLineage != null) {\n+      for (String lineageEntryId : segmentLineage.getLineageEntryIds()) {\n+        LineageEntry lineageEntry = segmentLineage.getLineageEntry(lineageEntryId);\n+        if (lineageEntry.getState() == LineageEntryState.COMPLETED && onlineSegments\n+            .containsAll(lineageEntry.getSegmentsTo())) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzIwODQyMA=="}, "originalCommit": {"oid": "8e0fca5326d09eb1c4e27592d4f6829b090b8dab"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5Mjg0MjM1OnYy", "diffSide": "RIGHT", "path": "pinot-broker/src/main/java/org/apache/pinot/broker/routing/segmentselector/SegmentLineageBasedSegmentPreSelector.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQyMzo1Mjo0NVrOG53msQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQyMzo1Mjo0NVrOG53msQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzMzMzA0MQ==", "bodyText": "(nit) You can directly remove them from onlineSegments", "url": "https://github.com/apache/pinot/pull/5728#discussion_r463333041", "createdAt": "2020-07-30T23:52:45Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-broker/src/main/java/org/apache/pinot/broker/routing/segmentselector/SegmentLineageBasedSegmentPreSelector.java", "diffHunk": "@@ -0,0 +1,63 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.broker.routing.segmentselector;\n+\n+import java.util.HashSet;\n+import java.util.Set;\n+import org.apache.helix.ZNRecord;\n+import org.apache.helix.store.zk.ZkHelixPropertyStore;\n+import org.apache.pinot.common.lineage.LineageEntry;\n+import org.apache.pinot.common.lineage.LineageEntryState;\n+import org.apache.pinot.common.lineage.SegmentLineage;\n+import org.apache.pinot.common.lineage.SegmentLineageAccessHelper;\n+\n+\n+/**\n+ * Segment lineage based segment pre-selector\n+ *\n+ * This pre-selector reads the segment lineage metadata and filters out either merged segments or original segments\n+ * to make sure that the final segments contain no duplicate data.\n+ */\n+public class SegmentLineageBasedSegmentPreSelector implements SegmentPreSelector {\n+  private final String _tableNameWithType;\n+  private final ZkHelixPropertyStore<ZNRecord> _propertyStore;\n+\n+  public SegmentLineageBasedSegmentPreSelector(String tableNameWithType, ZkHelixPropertyStore<ZNRecord> propertyStore) {\n+    _tableNameWithType = tableNameWithType;\n+    _propertyStore = propertyStore;\n+  }\n+\n+  @Override\n+  public Set<String> preSelect(Set<String> onlineSegments) {\n+    SegmentLineage segmentLineage = SegmentLineageAccessHelper.getSegmentLineage(_propertyStore, _tableNameWithType);\n+    if (segmentLineage != null) {\n+      Set<String> segmentsToRemove = new HashSet<>();\n+      for (String lineageEntryId : segmentLineage.getLineageEntryIds()) {\n+        LineageEntry lineageEntry = segmentLineage.getLineageEntry(lineageEntryId);\n+        if (lineageEntry.getState() == LineageEntryState.COMPLETED) {\n+          segmentsToRemove.addAll(lineageEntry.getSegmentsFrom());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c929fd318626a9c2bf38c22557626b1585e581e0"}, "originalPosition": 54}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4168, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}