{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDEwMjU3OTM4", "number": 5314, "title": "[Part 3.1] Deepstore by-pass: Add a new best effort segment uploader with bounded upload time and d\u2026", "bodyText": "Add A segment uploader which does segment upload to a segment store (with store root dir configured as _segmentStoreUriStr) using PinotFS within a configurable timeout period. It is designed to enable by-passing the deep store requirement in LLC split commit.\nTwig the SegmentUploader interface to add table name and segment name. The reason is to make the PinotFSSegmentUploader as a singleton for sharing in a Pinot server.\n@mcvsubbu", "createdAt": "2020-04-28T17:28:03Z", "url": "https://github.com/apache/pinot/pull/5314", "merged": true, "mergeCommit": {"oid": "31c55afdb6a40f98189308ce6292587ead9d0dec"}, "closed": true, "closedAt": "2020-05-05T21:20:21Z", "author": {"login": "chenboat"}, "timelineItems": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABccHItygH2gAyNDEwMjU3OTM4OjIwOTI2MmYyNTQ1NTAzMWNmYjU3MjczNGRkNDU4NTUxNzU2NGVhNzI=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcea13vgFqTQwNjE2MzgyNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "209262f25455031cfb572734dd4585517564ea72", "author": {"user": {"login": "chenboat", "name": "Ting Chen"}}, "url": "https://github.com/apache/pinot/commit/209262f25455031cfb572734dd4585517564ea72", "committedDate": "2020-04-28T17:14:49Z", "message": "Add a new best effort segment uploader with bounded upload time and default segment location when upload fails."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAzNzg2NDQx", "url": "https://github.com/apache/pinot/pull/5314#pullrequestreview-403786441", "createdAt": "2020-04-30T18:47:01Z", "commit": {"oid": "209262f25455031cfb572734dd4585517564ea72"}, "state": "COMMENTED", "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxODo0ODo1NlrOGO2Acw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxODo1OToxNVrOGO2XGg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODIxODA5OQ==", "bodyText": "can u javadoc the arguments?  What is defaultSegment? Maybe call it defaultSegmentURI and define it as URI type?", "url": "https://github.com/apache/pinot/pull/5314#discussion_r418218099", "createdAt": "2020-04-30T18:48:56Z", "author": {"login": "mcvsubbu"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/data/manager/realtime/BestEffortSegmentUploader.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.core.data.manager.realtime;\n+\n+import java.io.File;\n+import java.net.URI;\n+import java.util.concurrent.Callable;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.Future;\n+import java.util.concurrent.TimeUnit;\n+import org.apache.pinot.common.utils.StringUtil;\n+import org.apache.pinot.spi.filesystem.PinotFS;\n+import org.apache.pinot.spi.filesystem.PinotFSFactory;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+\n+// A segment uploader which does best effort segment upload to a segment store (with store root dir configured as\n+// _segmentStoreUriStr). The upload is successful if it is done within a configurable timeout period.\n+// The final segment location would be in the URI _segmentStoreUriStr/_tableNameWithType/segmentName if\n+// successful. If a segment upload fails or there is no segment store uri configured, it sets the segment location as\n+// the default URI.\n+public class BestEffortSegmentUploader implements SegmentUploader {\n+  private Logger LOGGER = LoggerFactory.getLogger(BestEffortSegmentUploader.class);\n+  private String _segmentStoreUriStr;\n+  private ExecutorService _executorService = Executors.newCachedThreadPool();\n+  // The default segment location URI to return if the upload fails.\n+  private URI _defaultSegmentLocationURI;\n+  private int _timeoutInMs;\n+\n+  public BestEffortSegmentUploader(String segmentStoreUriStr, int timeoutInMs, String defaultSegment) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "209262f25455031cfb572734dd4585517564ea72"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODIxOTU0NQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            public class BestEffortSegmentUploader implements SegmentUploader {\n          \n          \n            \n            public class PinotFSSegmentUploader implements SegmentUploader {", "url": "https://github.com/apache/pinot/pull/5314#discussion_r418219545", "createdAt": "2020-04-30T18:51:33Z", "author": {"login": "mcvsubbu"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/data/manager/realtime/BestEffortSegmentUploader.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.core.data.manager.realtime;\n+\n+import java.io.File;\n+import java.net.URI;\n+import java.util.concurrent.Callable;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.Future;\n+import java.util.concurrent.TimeUnit;\n+import org.apache.pinot.common.utils.StringUtil;\n+import org.apache.pinot.spi.filesystem.PinotFS;\n+import org.apache.pinot.spi.filesystem.PinotFSFactory;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+\n+// A segment uploader which does best effort segment upload to a segment store (with store root dir configured as\n+// _segmentStoreUriStr). The upload is successful if it is done within a configurable timeout period.\n+// The final segment location would be in the URI _segmentStoreUriStr/_tableNameWithType/segmentName if\n+// successful. If a segment upload fails or there is no segment store uri configured, it sets the segment location as\n+// the default URI.\n+public class BestEffortSegmentUploader implements SegmentUploader {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "209262f25455031cfb572734dd4585517564ea72"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODIyMDQ0Nw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              public BestEffortSegmentUploader(String segmentStoreUriStr, int timeoutInMs, String defaultSegment) {\n          \n          \n            \n              public BestEffortSegmentUploader(String segmentStoreDirUri, int timeoutMillis, String defaultSegment) {", "url": "https://github.com/apache/pinot/pull/5314#discussion_r418220447", "createdAt": "2020-04-30T18:53:12Z", "author": {"login": "mcvsubbu"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/data/manager/realtime/BestEffortSegmentUploader.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.core.data.manager.realtime;\n+\n+import java.io.File;\n+import java.net.URI;\n+import java.util.concurrent.Callable;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.Future;\n+import java.util.concurrent.TimeUnit;\n+import org.apache.pinot.common.utils.StringUtil;\n+import org.apache.pinot.spi.filesystem.PinotFS;\n+import org.apache.pinot.spi.filesystem.PinotFSFactory;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+\n+// A segment uploader which does best effort segment upload to a segment store (with store root dir configured as\n+// _segmentStoreUriStr). The upload is successful if it is done within a configurable timeout period.\n+// The final segment location would be in the URI _segmentStoreUriStr/_tableNameWithType/segmentName if\n+// successful. If a segment upload fails or there is no segment store uri configured, it sets the segment location as\n+// the default URI.\n+public class BestEffortSegmentUploader implements SegmentUploader {\n+  private Logger LOGGER = LoggerFactory.getLogger(BestEffortSegmentUploader.class);\n+  private String _segmentStoreUriStr;\n+  private ExecutorService _executorService = Executors.newCachedThreadPool();\n+  // The default segment location URI to return if the upload fails.\n+  private URI _defaultSegmentLocationURI;\n+  private int _timeoutInMs;\n+\n+  public BestEffortSegmentUploader(String segmentStoreUriStr, int timeoutInMs, String defaultSegment) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "209262f25455031cfb572734dd4585517564ea72"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODIyMjM5NQ==", "bodyText": "Better to separate the default uri functionality. If the uploader.upload fails, it always returns null (have a consistent javaoc in SegmentUploader interface). The caller can decide whether default is needed. In this case, the split committer should decide that.", "url": "https://github.com/apache/pinot/pull/5314#discussion_r418222395", "createdAt": "2020-04-30T18:56:38Z", "author": {"login": "mcvsubbu"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/data/manager/realtime/BestEffortSegmentUploader.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.core.data.manager.realtime;\n+\n+import java.io.File;\n+import java.net.URI;\n+import java.util.concurrent.Callable;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.Future;\n+import java.util.concurrent.TimeUnit;\n+import org.apache.pinot.common.utils.StringUtil;\n+import org.apache.pinot.spi.filesystem.PinotFS;\n+import org.apache.pinot.spi.filesystem.PinotFSFactory;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+\n+// A segment uploader which does best effort segment upload to a segment store (with store root dir configured as", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "209262f25455031cfb572734dd4585517564ea72"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODIyMjk1Nw==", "bodyText": "InterruptedException should be OK, if the service is being shutdown", "url": "https://github.com/apache/pinot/pull/5314#discussion_r418222957", "createdAt": "2020-04-30T18:57:33Z", "author": {"login": "mcvsubbu"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/data/manager/realtime/BestEffortSegmentUploader.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.core.data.manager.realtime;\n+\n+import java.io.File;\n+import java.net.URI;\n+import java.util.concurrent.Callable;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.Future;\n+import java.util.concurrent.TimeUnit;\n+import org.apache.pinot.common.utils.StringUtil;\n+import org.apache.pinot.spi.filesystem.PinotFS;\n+import org.apache.pinot.spi.filesystem.PinotFSFactory;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+\n+// A segment uploader which does best effort segment upload to a segment store (with store root dir configured as\n+// _segmentStoreUriStr). The upload is successful if it is done within a configurable timeout period.\n+// The final segment location would be in the URI _segmentStoreUriStr/_tableNameWithType/segmentName if\n+// successful. If a segment upload fails or there is no segment store uri configured, it sets the segment location as\n+// the default URI.\n+public class BestEffortSegmentUploader implements SegmentUploader {\n+  private Logger LOGGER = LoggerFactory.getLogger(BestEffortSegmentUploader.class);\n+  private String _segmentStoreUriStr;\n+  private ExecutorService _executorService = Executors.newCachedThreadPool();\n+  // The default segment location URI to return if the upload fails.\n+  private URI _defaultSegmentLocationURI;\n+  private int _timeoutInMs;\n+\n+  public BestEffortSegmentUploader(String segmentStoreUriStr, int timeoutInMs, String defaultSegment) {\n+    _segmentStoreUriStr = segmentStoreUriStr;\n+    _timeoutInMs = timeoutInMs;\n+    _defaultSegmentLocationURI = URI.create(defaultSegment);\n+  }\n+\n+  public URI uploadSegment(File segmentFile, String tableNameWithType, String segmentName) {\n+    if (_segmentStoreUriStr == null || _segmentStoreUriStr.isEmpty()) {\n+      return _defaultSegmentLocationURI;\n+    }\n+\n+    Callable<URI> uploadTask = () -> {\n+      try {\n+        PinotFS pinotFS = PinotFSFactory.create(new URI(_segmentStoreUriStr).getScheme());\n+        URI destUri = new URI(StringUtil.join(File.separator, _segmentStoreUriStr, tableNameWithType, segmentName));\n+        // Check and delete any existing segment file.\n+        if (pinotFS.exists(destUri)) {\n+          pinotFS.delete(destUri, true);\n+        }\n+        pinotFS.copyFromLocalFile(segmentFile, destUri);\n+        return destUri;\n+      } catch (Exception e) {\n+        LOGGER.error(\"Failed copy segment tar file to segment store {}: {}\", segmentFile.getName(), e);\n+      }\n+      return _defaultSegmentLocationURI;\n+    };\n+    Future<URI> future = _executorService.submit(uploadTask);\n+    try {\n+      URI segmentLocation = future.get(_timeoutInMs, TimeUnit.MILLISECONDS);\n+      return segmentLocation;\n+    } catch (Exception e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "209262f25455031cfb572734dd4585517564ea72"}, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODIyMzI2Nw==", "bodyText": "Not sure if this should be logged as an error, since we have recovery mechanisms. Warning should be ok. We should log an error in higher layers if we just cannot recover from this", "url": "https://github.com/apache/pinot/pull/5314#discussion_r418223267", "createdAt": "2020-04-30T18:58:09Z", "author": {"login": "mcvsubbu"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/data/manager/realtime/BestEffortSegmentUploader.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.core.data.manager.realtime;\n+\n+import java.io.File;\n+import java.net.URI;\n+import java.util.concurrent.Callable;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.Future;\n+import java.util.concurrent.TimeUnit;\n+import org.apache.pinot.common.utils.StringUtil;\n+import org.apache.pinot.spi.filesystem.PinotFS;\n+import org.apache.pinot.spi.filesystem.PinotFSFactory;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+\n+// A segment uploader which does best effort segment upload to a segment store (with store root dir configured as\n+// _segmentStoreUriStr). The upload is successful if it is done within a configurable timeout period.\n+// The final segment location would be in the URI _segmentStoreUriStr/_tableNameWithType/segmentName if\n+// successful. If a segment upload fails or there is no segment store uri configured, it sets the segment location as\n+// the default URI.\n+public class BestEffortSegmentUploader implements SegmentUploader {\n+  private Logger LOGGER = LoggerFactory.getLogger(BestEffortSegmentUploader.class);\n+  private String _segmentStoreUriStr;\n+  private ExecutorService _executorService = Executors.newCachedThreadPool();\n+  // The default segment location URI to return if the upload fails.\n+  private URI _defaultSegmentLocationURI;\n+  private int _timeoutInMs;\n+\n+  public BestEffortSegmentUploader(String segmentStoreUriStr, int timeoutInMs, String defaultSegment) {\n+    _segmentStoreUriStr = segmentStoreUriStr;\n+    _timeoutInMs = timeoutInMs;\n+    _defaultSegmentLocationURI = URI.create(defaultSegment);\n+  }\n+\n+  public URI uploadSegment(File segmentFile, String tableNameWithType, String segmentName) {\n+    if (_segmentStoreUriStr == null || _segmentStoreUriStr.isEmpty()) {\n+      return _defaultSegmentLocationURI;\n+    }\n+\n+    Callable<URI> uploadTask = () -> {\n+      try {\n+        PinotFS pinotFS = PinotFSFactory.create(new URI(_segmentStoreUriStr).getScheme());\n+        URI destUri = new URI(StringUtil.join(File.separator, _segmentStoreUriStr, tableNameWithType, segmentName));\n+        // Check and delete any existing segment file.\n+        if (pinotFS.exists(destUri)) {\n+          pinotFS.delete(destUri, true);\n+        }\n+        pinotFS.copyFromLocalFile(segmentFile, destUri);\n+        return destUri;\n+      } catch (Exception e) {\n+        LOGGER.error(\"Failed copy segment tar file to segment store {}: {}\", segmentFile.getName(), e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "209262f25455031cfb572734dd4585517564ea72"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODIyMzQ2Mg==", "bodyText": "same comment here about error. Will we be logging 2 error messages?", "url": "https://github.com/apache/pinot/pull/5314#discussion_r418223462", "createdAt": "2020-04-30T18:58:29Z", "author": {"login": "mcvsubbu"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/data/manager/realtime/BestEffortSegmentUploader.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.core.data.manager.realtime;\n+\n+import java.io.File;\n+import java.net.URI;\n+import java.util.concurrent.Callable;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.Future;\n+import java.util.concurrent.TimeUnit;\n+import org.apache.pinot.common.utils.StringUtil;\n+import org.apache.pinot.spi.filesystem.PinotFS;\n+import org.apache.pinot.spi.filesystem.PinotFSFactory;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+\n+// A segment uploader which does best effort segment upload to a segment store (with store root dir configured as\n+// _segmentStoreUriStr). The upload is successful if it is done within a configurable timeout period.\n+// The final segment location would be in the URI _segmentStoreUriStr/_tableNameWithType/segmentName if\n+// successful. If a segment upload fails or there is no segment store uri configured, it sets the segment location as\n+// the default URI.\n+public class BestEffortSegmentUploader implements SegmentUploader {\n+  private Logger LOGGER = LoggerFactory.getLogger(BestEffortSegmentUploader.class);\n+  private String _segmentStoreUriStr;\n+  private ExecutorService _executorService = Executors.newCachedThreadPool();\n+  // The default segment location URI to return if the upload fails.\n+  private URI _defaultSegmentLocationURI;\n+  private int _timeoutInMs;\n+\n+  public BestEffortSegmentUploader(String segmentStoreUriStr, int timeoutInMs, String defaultSegment) {\n+    _segmentStoreUriStr = segmentStoreUriStr;\n+    _timeoutInMs = timeoutInMs;\n+    _defaultSegmentLocationURI = URI.create(defaultSegment);\n+  }\n+\n+  public URI uploadSegment(File segmentFile, String tableNameWithType, String segmentName) {\n+    if (_segmentStoreUriStr == null || _segmentStoreUriStr.isEmpty()) {\n+      return _defaultSegmentLocationURI;\n+    }\n+\n+    Callable<URI> uploadTask = () -> {\n+      try {\n+        PinotFS pinotFS = PinotFSFactory.create(new URI(_segmentStoreUriStr).getScheme());\n+        URI destUri = new URI(StringUtil.join(File.separator, _segmentStoreUriStr, tableNameWithType, segmentName));\n+        // Check and delete any existing segment file.\n+        if (pinotFS.exists(destUri)) {\n+          pinotFS.delete(destUri, true);\n+        }\n+        pinotFS.copyFromLocalFile(segmentFile, destUri);\n+        return destUri;\n+      } catch (Exception e) {\n+        LOGGER.error(\"Failed copy segment tar file to segment store {}: {}\", segmentFile.getName(), e);\n+      }\n+      return _defaultSegmentLocationURI;\n+    };\n+    Future<URI> future = _executorService.submit(uploadTask);\n+    try {\n+      URI segmentLocation = future.get(_timeoutInMs, TimeUnit.MILLISECONDS);\n+      return segmentLocation;\n+    } catch (Exception e) {\n+      LOGGER.error(\"Failed to upload file {} of segment {} for table {} \", segmentFile.getAbsolutePath(), segmentName,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "209262f25455031cfb572734dd4585517564ea72"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODIyMzg5OA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              public URI uploadSegment(File segmentFile, String tableName, String segmentName) {\n          \n          \n            \n              public URI uploadSegment(File segmentFile,  LLCSegmentName segmentName) {\n          \n      \n    \n    \n  \n\nsegmentName already has the (raw) tableName.", "url": "https://github.com/apache/pinot/pull/5314#discussion_r418223898", "createdAt": "2020-04-30T18:59:15Z", "author": {"login": "mcvsubbu"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/data/manager/realtime/Server2ControllerSegmentUploader.java", "diffHunk": "@@ -52,7 +52,7 @@ public Server2ControllerSegmentUploader(Logger segmentLogger, FileUploadDownload\n   }\n \n   @Override\n-  public URI uploadSegment(File segmentFile) {\n+  public URI uploadSegment(File segmentFile, String tableName, String segmentName) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "209262f25455031cfb572734dd4585517564ea72"}, "originalPosition": 5}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6133ed611a8f47300dfcaf17704eb7410d2fc0c3", "author": {"user": {"login": "chenboat", "name": "Ting Chen"}}, "url": "https://github.com/apache/pinot/commit/6133ed611a8f47300dfcaf17704eb7410d2fc0c3", "committedDate": "2020-04-30T21:35:15Z", "message": "Update pinot-core/src/main/java/org/apache/pinot/core/data/manager/realtime/BestEffortSegmentUploader.java\n\nCo-authored-by: Subbu Subramaniam <mcvsubbu@users.noreply.github.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1efa5e362929e9cad9ea097abfe2f9b1980f37ac", "author": {"user": {"login": "chenboat", "name": "Ting Chen"}}, "url": "https://github.com/apache/pinot/commit/1efa5e362929e9cad9ea097abfe2f9b1980f37ac", "committedDate": "2020-04-30T21:37:52Z", "message": "Update pinot-core/src/main/java/org/apache/pinot/core/data/manager/realtime/Server2ControllerSegmentUploader.java\n\nCo-authored-by: Subbu Subramaniam <mcvsubbu@users.noreply.github.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "138024eb90ce131c360c36fc129940abb7c781c1", "author": {"user": {"login": "chenboat", "name": "Ting Chen"}}, "url": "https://github.com/apache/pinot/commit/138024eb90ce131c360c36fc129940abb7c781c1", "committedDate": "2020-04-30T21:49:55Z", "message": "Update pinot-core/src/main/java/org/apache/pinot/core/data/manager/realtime/BestEffortSegmentUploader.java\n\nCo-authored-by: Subbu Subramaniam <mcvsubbu@users.noreply.github.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4f5e8557d014d57a18d8383c15d3cb6c209fa509", "author": {"user": {"login": "chenboat", "name": "Ting Chen"}}, "url": "https://github.com/apache/pinot/commit/4f5e8557d014d57a18d8383c15d3cb6c209fa509", "committedDate": "2020-05-01T07:01:34Z", "message": "Revised based on comments."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "226c0a47c4522ec16c016a4cf91af6400565596a", "author": {"user": {"login": "chenboat", "name": "Ting Chen"}}, "url": "https://github.com/apache/pinot/commit/226c0a47c4522ec16c016a4cf91af6400565596a", "committedDate": "2020-05-01T16:34:38Z", "message": "Change comments."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA0Mzk2MDcz", "url": "https://github.com/apache/pinot/pull/5314#pullrequestreview-404396073", "createdAt": "2020-05-01T20:55:04Z", "commit": {"oid": "226c0a47c4522ec16c016a4cf91af6400565596a"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQyMDo1NTowNFrOGPVfVA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQyMToyNTowNlrOGPWJHg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODczMzkwOA==", "bodyText": "Can you put this in javadoc format?", "url": "https://github.com/apache/pinot/pull/5314#discussion_r418733908", "createdAt": "2020-05-01T20:55:04Z", "author": {"login": "mcvsubbu"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/data/manager/realtime/PinotFSSegmentUploader.java", "diffHunk": "@@ -0,0 +1,84 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.core.data.manager.realtime;\n+\n+import java.io.File;\n+import java.net.URI;\n+import java.util.concurrent.Callable;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.Future;\n+import java.util.concurrent.TimeUnit;\n+import org.apache.pinot.common.utils.LLCSegmentName;\n+import org.apache.pinot.common.utils.StringUtil;\n+import org.apache.pinot.spi.filesystem.PinotFS;\n+import org.apache.pinot.spi.filesystem.PinotFSFactory;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+\n+// A segment uploader which does segment upload to a segment store (with store root dir configured as", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "226c0a47c4522ec16c016a4cf91af6400565596a"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODczNDU2Mw==", "bodyText": "include segment destUri in the log", "url": "https://github.com/apache/pinot/pull/5314#discussion_r418734563", "createdAt": "2020-05-01T20:56:52Z", "author": {"login": "mcvsubbu"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/data/manager/realtime/PinotFSSegmentUploader.java", "diffHunk": "@@ -0,0 +1,84 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.core.data.manager.realtime;\n+\n+import java.io.File;\n+import java.net.URI;\n+import java.util.concurrent.Callable;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.Future;\n+import java.util.concurrent.TimeUnit;\n+import org.apache.pinot.common.utils.LLCSegmentName;\n+import org.apache.pinot.common.utils.StringUtil;\n+import org.apache.pinot.spi.filesystem.PinotFS;\n+import org.apache.pinot.spi.filesystem.PinotFSFactory;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+\n+// A segment uploader which does segment upload to a segment store (with store root dir configured as\n+// _segmentStoreUriStr) using PinotFS within a configurable timeout period. The final segment location would be in the\n+// URI _segmentStoreUriStr/_tableNameWithType/segmentName if successful.\n+public class PinotFSSegmentUploader implements SegmentUploader {\n+  private Logger LOGGER = LoggerFactory.getLogger(PinotFSSegmentUploader.class);\n+  private String _segmentStoreUriStr;\n+  private ExecutorService _executorService = Executors.newCachedThreadPool();\n+  private int _timeoutInMs;\n+\n+  public PinotFSSegmentUploader(String segmentStoreDirUri, int timeoutMillis) {\n+    _segmentStoreUriStr = segmentStoreDirUri;\n+    _timeoutInMs = timeoutMillis;\n+  }\n+\n+  public URI uploadSegment(File segmentFile, LLCSegmentName segmentName) {\n+    if (_segmentStoreUriStr == null || _segmentStoreUriStr.isEmpty()) {\n+      return null;\n+    }\n+    Callable<URI> uploadTask = () -> {\n+      try {\n+        PinotFS pinotFS = PinotFSFactory.create(new URI(_segmentStoreUriStr).getScheme());\n+        URI destUri = new URI(StringUtil\n+            .join(File.separator, _segmentStoreUriStr, segmentName.getTableName(), segmentName.getSegmentName()));\n+        // Check and delete any existing segment file.\n+        if (pinotFS.exists(destUri)) {\n+          pinotFS.delete(destUri, true);\n+        }\n+        pinotFS.copyFromLocalFile(segmentFile, destUri);\n+        return destUri;\n+      } catch (Exception e) {\n+        LOGGER.warn(\"Failed copy segment tar file to segment store {}: {}\", segmentFile.getName(), e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "226c0a47c4522ec16c016a4cf91af6400565596a"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODc0NDYwNg==", "bodyText": "I think we can clean this up by not having the extra argument, but just taking TableConfig instead of indexLoadingConfig in the constructor. We can pull from tableconfig  whether the default (always a peer).  Construct the peer download URL in this class if the upload fails. For now, you can comment out that failure handling code.\nLet us float a discussion on how the table should be configured on upload failure. You can either do it in doc, or via email or a discsussion in the chat channel (and summarize in email).\nA few options come to mind, but best to discuss with the team before moving forward.\n\nIn  the SegmentValidationAndRetentionConfig set some variable to indicate that we are enabling peer download for segments. The variable can just indicate the scheme: e.g. \"http\".  The rest of the URL can be constructed easily since we know the value of the host, port. etc. I prefer this to having a boolean and then another one for the scheme somewhere else. Putting it here can also help in the case when deep store is down and we want to download offline table segments.\nIntroduce something in the streamConfig section, but that restricts the peer download to realtime only.\n\nIn the splitSegmentCommitter class, look at the table config to construct the URL.", "url": "https://github.com/apache/pinot/pull/5314#discussion_r418744606", "createdAt": "2020-05-01T21:25:06Z", "author": {"login": "mcvsubbu"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/data/manager/realtime/SplitSegmentCommitter.java", "diffHunk": "@@ -35,16 +38,34 @@\n   private final ServerSegmentCompletionProtocolHandler _protocolHandler;\n   private final IndexLoadingConfig _indexLoadingConfig;\n   private final SegmentUploader _segmentUploader;\n+  // The default segment location uri str, could be null.\n+  private final String _defaultSegmentLocation;\n \n   private final Logger _segmentLogger;\n \n   public SplitSegmentCommitter(Logger segmentLogger, ServerSegmentCompletionProtocolHandler protocolHandler,\n       IndexLoadingConfig indexLoadingConfig, SegmentCompletionProtocol.Request.Params params, SegmentUploader segmentUploader) {\n+    this(segmentLogger, protocolHandler, indexLoadingConfig, params, segmentUploader, null);\n+  }\n+\n+  /**\n+   *\n+   * @param segmentLogger\n+   * @param protocolHandler\n+   * @param indexLoadingConfig\n+   * @param params\n+   * @param segmentUploader\n+   * @param defaultSegmentLocation The default segment location uri str, could be null.\n+   */\n+  public SplitSegmentCommitter(Logger segmentLogger, ServerSegmentCompletionProtocolHandler protocolHandler,\n+      IndexLoadingConfig indexLoadingConfig, SegmentCompletionProtocol.Request.Params params, SegmentUploader segmentUploader,\n+      String defaultSegmentLocation) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "226c0a47c4522ec16c016a4cf91af6400565596a"}, "originalPosition": 37}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2d53c0d8eb27fba2eafc77990b3e4d6c8c39a771", "author": {"user": {"login": "chenboat", "name": "Ting Chen"}}, "url": "https://github.com/apache/pinot/commit/2d53c0d8eb27fba2eafc77990b3e4d6c8c39a771", "committedDate": "2020-05-02T01:14:10Z", "message": "Revised the splitcommiter."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA1MTQzMTg3", "url": "https://github.com/apache/pinot/pull/5314#pullrequestreview-405143187", "createdAt": "2020-05-04T16:20:46Z", "commit": {"oid": "2d53c0d8eb27fba2eafc77990b3e4d6c8c39a771"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxNjoyMDo0NlrOGQH2ug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxNjoyNjozNlrOGQIGEg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTU1OTA5OA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  LOGGER.info(\"Interrupted while waiting for segment upload.\");\n          \n          \n            \n                  LOGGER.info(\"Interrupted while waiting for segment upload of {} to {}.\", segmentName, _segmentStoreUriStr);", "url": "https://github.com/apache/pinot/pull/5314#discussion_r419559098", "createdAt": "2020-05-04T16:20:46Z", "author": {"login": "mcvsubbu"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/data/manager/realtime/PinotFSSegmentUploader.java", "diffHunk": "@@ -0,0 +1,86 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.core.data.manager.realtime;\n+\n+import java.io.File;\n+import java.net.URI;\n+import java.util.concurrent.Callable;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.Future;\n+import java.util.concurrent.TimeUnit;\n+import org.apache.pinot.common.utils.LLCSegmentName;\n+import org.apache.pinot.common.utils.StringUtil;\n+import org.apache.pinot.spi.filesystem.PinotFS;\n+import org.apache.pinot.spi.filesystem.PinotFSFactory;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+\n+/**\n+ * A segment uploader which does segment upload to a segment store (with store root dir configured as\n+ * _segmentStoreUriStr) using PinotFS within a configurable timeout period. The final segment location would be in the\n+ * URI _segmentStoreUriStr/_tableNameWithType/segmentName if successful.\n+ */\n+public class PinotFSSegmentUploader implements SegmentUploader {\n+  private Logger LOGGER = LoggerFactory.getLogger(PinotFSSegmentUploader.class);\n+  private String _segmentStoreUriStr;\n+  private ExecutorService _executorService = Executors.newCachedThreadPool();\n+  private int _timeoutInMs;\n+\n+  public PinotFSSegmentUploader(String segmentStoreDirUri, int timeoutMillis) {\n+    _segmentStoreUriStr = segmentStoreDirUri;\n+    _timeoutInMs = timeoutMillis;\n+  }\n+\n+  public URI uploadSegment(File segmentFile, LLCSegmentName segmentName) {\n+    if (_segmentStoreUriStr == null || _segmentStoreUriStr.isEmpty()) {\n+      return null;\n+    }\n+    Callable<URI> uploadTask = () -> {\n+      URI destUri = new URI(StringUtil\n+          .join(File.separator, _segmentStoreUriStr, segmentName.getTableName(), segmentName.getSegmentName()));\n+      try {\n+        PinotFS pinotFS = PinotFSFactory.create(new URI(_segmentStoreUriStr).getScheme());\n+        // Check and delete any existing segment file.\n+        if (pinotFS.exists(destUri)) {\n+          pinotFS.delete(destUri, true);\n+        }\n+        pinotFS.copyFromLocalFile(segmentFile, destUri);\n+        return destUri;\n+      } catch (Exception e) {\n+        LOGGER.warn(\"Failed copy segment tar file {} to segment store {}: {}\", segmentFile.getName(), destUri, e);\n+      }\n+      return null;\n+    };\n+    Future<URI> future = _executorService.submit(uploadTask);\n+    try {\n+      URI segmentLocation = future.get(_timeoutInMs, TimeUnit.MILLISECONDS);\n+      return segmentLocation;\n+    } catch (InterruptedException e) {\n+      LOGGER.info(\"Interrupted while waiting for segment upload.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2d53c0d8eb27fba2eafc77990b3e4d6c8c39a771"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTU2MTg4Nw==", "bodyText": "My bad, looks like tableConfig is not used, we can remove it.", "url": "https://github.com/apache/pinot/pull/5314#discussion_r419561887", "createdAt": "2020-05-04T16:24:55Z", "author": {"login": "mcvsubbu"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/data/manager/realtime/SegmentCommitterFactory.java", "diffHunk": "@@ -29,18 +29,20 @@\n  */\n public class SegmentCommitterFactory {\n   private static Logger LOGGER;\n-  private final IndexLoadingConfig _indexLoadingConfig;\n+  private final TableConfig _tableConfig;\n   private final ServerSegmentCompletionProtocolHandler _protocolHandler;\n \n-  public SegmentCommitterFactory(Logger segmentLogger, IndexLoadingConfig indexLoadingConfig,\n+  public SegmentCommitterFactory(Logger segmentLogger, TableConfig tableConfig,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2d53c0d8eb27fba2eafc77990b3e4d6c8c39a771"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTU2MzAyNg==", "bodyText": "In this class, we should not need the segment name argument anymore since we get it in the upload() call.", "url": "https://github.com/apache/pinot/pull/5314#discussion_r419563026", "createdAt": "2020-05-04T16:26:36Z", "author": {"login": "mcvsubbu"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/data/manager/realtime/Server2ControllerSegmentUploader.java", "diffHunk": "@@ -24,6 +24,7 @@\n import org.apache.pinot.common.metrics.ServerMetrics;\n import org.apache.pinot.common.protocols.SegmentCompletionProtocol;\n import org.apache.pinot.common.utils.FileUploadDownloadClient;\n+import org.apache.pinot.common.utils.LLCSegmentName;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2d53c0d8eb27fba2eafc77990b3e4d6c8c39a771"}, "originalPosition": 4}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "abe87f2c9b78f3af3bc309f01ba64055b7c7a2a2", "author": {"user": {"login": "chenboat", "name": "Ting Chen"}}, "url": "https://github.com/apache/pinot/commit/abe87f2c9b78f3af3bc309f01ba64055b7c7a2a2", "committedDate": "2020-05-04T20:26:56Z", "message": "Update pinot-core/src/main/java/org/apache/pinot/core/data/manager/realtime/PinotFSSegmentUploader.java\n\nCo-authored-by: Subbu Subramaniam <mcvsubbu@users.noreply.github.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e567f0d4c7ebb46ebdf597824bb7b140552dcc00", "author": {"user": {"login": "chenboat", "name": "Ting Chen"}}, "url": "https://github.com/apache/pinot/commit/e567f0d4c7ebb46ebdf597824bb7b140552dcc00", "committedDate": "2020-05-04T20:41:10Z", "message": "Further revise."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA2MTYzODI0", "url": "https://github.com/apache/pinot/pull/5314#pullrequestreview-406163824", "createdAt": "2020-05-05T21:20:11Z", "commit": {"oid": "e567f0d4c7ebb46ebdf597824bb7b140552dcc00"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 953, "cost": 1, "resetAt": "2021-10-28T18:00:02Z"}}}