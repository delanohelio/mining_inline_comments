{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM4MDY5Mzg1", "number": 5602, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxODo0NzoyM1rOEHsI6w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQxODoyNToxN1rOEI3_Gg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2NDk4NjY3OnYy", "diffSide": "RIGHT", "path": "pinot-clients/pinot-jdbc-client/src/main/java/org/apache/pinot/client/PinotResultSet.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxODo0NzoyM1rOGnM1Gw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQxNzoxNzoxOVrOGp-5Fw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzc1Nzg1MQ==", "bodyText": "Any reason why this has to use pinot.client.ResultSet (which seems like a really old class). We have ResultTable used for returning responses that is a more recent code, you may want to check it out.", "url": "https://github.com/apache/pinot/pull/5602#discussion_r443757851", "createdAt": "2020-06-22T18:47:23Z", "author": {"login": "mayankshriv"}, "path": "pinot-clients/pinot-jdbc-client/src/main/java/org/apache/pinot/client/PinotResultSet.java", "diffHunk": "@@ -0,0 +1,1227 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.client;\n+\n+import java.io.InputStream;\n+import java.io.Reader;\n+import java.math.BigDecimal;\n+import java.net.URL;\n+import java.sql.Array;\n+import java.sql.Blob;\n+import java.sql.Clob;\n+import java.sql.Date;\n+import java.sql.NClob;\n+import java.sql.Ref;\n+import java.sql.ResultSet;\n+import java.sql.ResultSetMetaData;\n+import java.sql.RowId;\n+import java.sql.SQLException;\n+import java.sql.SQLFeatureNotSupportedException;\n+import java.sql.SQLWarning;\n+import java.sql.SQLXML;\n+import java.sql.Statement;\n+import java.sql.Time;\n+import java.sql.Timestamp;\n+import java.util.Calendar;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+\n+public class PinotResultSet implements ResultSet {\n+  private final org.apache.pinot.client.ResultSet _resultSet;\n+  private int _totalRows;\n+  private int _currentRow;\n+  private Map<String, Integer> _columns = new HashMap<>();\n+\n+  public PinotResultSet(org.apache.pinot.client.ResultSet resultSet) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f33c79f1e6f8048ad90c6e806c0d8092b7f0037a"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTc1MDk3Mw==", "bodyText": "+1, lets use resultTable. Its ok to say we support jdbc only on SQL endpoint", "url": "https://github.com/apache/pinot/pull/5602#discussion_r445750973", "createdAt": "2020-06-25T18:20:43Z", "author": {"login": "kishoreg"}, "path": "pinot-clients/pinot-jdbc-client/src/main/java/org/apache/pinot/client/PinotResultSet.java", "diffHunk": "@@ -0,0 +1,1227 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.client;\n+\n+import java.io.InputStream;\n+import java.io.Reader;\n+import java.math.BigDecimal;\n+import java.net.URL;\n+import java.sql.Array;\n+import java.sql.Blob;\n+import java.sql.Clob;\n+import java.sql.Date;\n+import java.sql.NClob;\n+import java.sql.Ref;\n+import java.sql.ResultSet;\n+import java.sql.ResultSetMetaData;\n+import java.sql.RowId;\n+import java.sql.SQLException;\n+import java.sql.SQLFeatureNotSupportedException;\n+import java.sql.SQLWarning;\n+import java.sql.SQLXML;\n+import java.sql.Statement;\n+import java.sql.Time;\n+import java.sql.Timestamp;\n+import java.util.Calendar;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+\n+public class PinotResultSet implements ResultSet {\n+  private final org.apache.pinot.client.ResultSet _resultSet;\n+  private int _totalRows;\n+  private int _currentRow;\n+  private Map<String, Integer> _columns = new HashMap<>();\n+\n+  public PinotResultSet(org.apache.pinot.client.ResultSet resultSet) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzc1Nzg1MQ=="}, "originalCommit": {"oid": "f33c79f1e6f8048ad90c6e806c0d8092b7f0037a"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTgyMTMyNA==", "bodyText": "Since I am using Java client to run queries, it is currently returning ResultSet.\nShould I create a seperate PR making changes in the Java client first so that it returns ResultTable?", "url": "https://github.com/apache/pinot/pull/5602#discussion_r445821324", "createdAt": "2020-06-25T20:32:48Z", "author": {"login": "KKcorps"}, "path": "pinot-clients/pinot-jdbc-client/src/main/java/org/apache/pinot/client/PinotResultSet.java", "diffHunk": "@@ -0,0 +1,1227 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.client;\n+\n+import java.io.InputStream;\n+import java.io.Reader;\n+import java.math.BigDecimal;\n+import java.net.URL;\n+import java.sql.Array;\n+import java.sql.Blob;\n+import java.sql.Clob;\n+import java.sql.Date;\n+import java.sql.NClob;\n+import java.sql.Ref;\n+import java.sql.ResultSet;\n+import java.sql.ResultSetMetaData;\n+import java.sql.RowId;\n+import java.sql.SQLException;\n+import java.sql.SQLFeatureNotSupportedException;\n+import java.sql.SQLWarning;\n+import java.sql.SQLXML;\n+import java.sql.Statement;\n+import java.sql.Time;\n+import java.sql.Timestamp;\n+import java.util.Calendar;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+\n+public class PinotResultSet implements ResultSet {\n+  private final org.apache.pinot.client.ResultSet _resultSet;\n+  private int _totalRows;\n+  private int _currentRow;\n+  private Map<String, Integer> _columns = new HashMap<>();\n+\n+  public PinotResultSet(org.apache.pinot.client.ResultSet resultSet) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzc1Nzg1MQ=="}, "originalCommit": {"oid": "f33c79f1e6f8048ad90c6e806c0d8092b7f0037a"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjY3NTIyMw==", "bodyText": "sorry, my bad, ResultSet is still the right interface for the client. We need to deprecate few methods like\n  int getGroupKeyLength();\n  String getGroupKeyColumnName(int groupKeyColumnIndex);\n  int getGroupKeyInt(int rowIndex, int groupKeyColumnIndex);\n  long getGroupKeyLong(int rowIndex, int groupKeyColumnIndex);\n  float getGroupKeyFloat(int rowIndex, int groupKeyColumnIndex);\n  double getGroupKeyDouble(int rowIndex, int groupKeyColumnIndex);\n  String getGroupKeyString(int rowIndex, int groupKeyColumnIndex);\n\njdbc driver code is not using any of them. so we are good here.", "url": "https://github.com/apache/pinot/pull/5602#discussion_r446675223", "createdAt": "2020-06-28T17:17:19Z", "author": {"login": "kishoreg"}, "path": "pinot-clients/pinot-jdbc-client/src/main/java/org/apache/pinot/client/PinotResultSet.java", "diffHunk": "@@ -0,0 +1,1227 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.client;\n+\n+import java.io.InputStream;\n+import java.io.Reader;\n+import java.math.BigDecimal;\n+import java.net.URL;\n+import java.sql.Array;\n+import java.sql.Blob;\n+import java.sql.Clob;\n+import java.sql.Date;\n+import java.sql.NClob;\n+import java.sql.Ref;\n+import java.sql.ResultSet;\n+import java.sql.ResultSetMetaData;\n+import java.sql.RowId;\n+import java.sql.SQLException;\n+import java.sql.SQLFeatureNotSupportedException;\n+import java.sql.SQLWarning;\n+import java.sql.SQLXML;\n+import java.sql.Statement;\n+import java.sql.Time;\n+import java.sql.Timestamp;\n+import java.util.Calendar;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+\n+public class PinotResultSet implements ResultSet {\n+  private final org.apache.pinot.client.ResultSet _resultSet;\n+  private int _totalRows;\n+  private int _currentRow;\n+  private Map<String, Integer> _columns = new HashMap<>();\n+\n+  public PinotResultSet(org.apache.pinot.client.ResultSet resultSet) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzc1Nzg1MQ=="}, "originalCommit": {"oid": "f33c79f1e6f8048ad90c6e806c0d8092b7f0037a"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2NDk5MTU0OnYy", "diffSide": "RIGHT", "path": "pinot-clients/pinot-jdbc-client/src/main/java/org/apache/pinot/client/PinotStatement.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxODo0ODo1NFrOGnM4GQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxODo0ODo1NFrOGnM4GQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzc1ODYxNw==", "bodyText": "_queryFormat can be a static final, instead of initializing in constructor?", "url": "https://github.com/apache/pinot/pull/5602#discussion_r443758617", "createdAt": "2020-06-22T18:48:54Z", "author": {"login": "mayankshriv"}, "path": "pinot-clients/pinot-jdbc-client/src/main/java/org/apache/pinot/client/PinotStatement.java", "diffHunk": "@@ -0,0 +1,309 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.client;\n+\n+import java.sql.Connection;\n+import java.sql.ResultSet;\n+import java.sql.SQLException;\n+import java.sql.SQLFeatureNotSupportedException;\n+import java.sql.SQLWarning;\n+import java.sql.Statement;\n+\n+\n+public class PinotStatement implements Statement {\n+\n+  private final org.apache.pinot.client.Connection _connection;\n+  private final String _queryFormat;\n+  private ResultSetGroup _resultSetGroup;\n+\n+  public PinotStatement(org.apache.pinot.client.Connection connection) {\n+    _connection = connection;\n+    _queryFormat = \"sql\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f33c79f1e6f8048ad90c6e806c0d8092b7f0037a"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2NDk5NDgyOnYy", "diffSide": "RIGHT", "path": "pinot-clients/pinot-jdbc-client/src/main/java/org/apache/pinot/client/utils/DriverUtils.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxODo0OTo1MlrOGnM6MQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxODo0OTo1MlrOGnM6MQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzc1OTE1Mw==", "bodyText": "Does it make sense to make it case insensitive check?", "url": "https://github.com/apache/pinot/pull/5602#discussion_r443759153", "createdAt": "2020-06-22T18:49:52Z", "author": {"login": "mayankshriv"}, "path": "pinot-clients/pinot-jdbc-client/src/main/java/org/apache/pinot/client/utils/DriverUtils.java", "diffHunk": "@@ -0,0 +1,41 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.client.utils;\n+\n+import java.net.URI;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+\n+public class DriverUtils {\n+\n+  public static List<String> getBrokersFromURL(String url) {\n+    if (url.startsWith(\"jdbc:\")) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f33c79f1e6f8048ad90c6e806c0d8092b7f0037a"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2NDk5NzM3OnYy", "diffSide": "RIGHT", "path": "pinot-clients/pinot-jdbc-client/src/main/java/org/apache/pinot/client/utils/DriverUtils.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxODo1MDo0MlrOGnM72A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxODo1MDo0MlrOGnM72A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzc1OTU3Ng==", "bodyText": "Private constructor, if you don't want this class instantiated.", "url": "https://github.com/apache/pinot/pull/5602#discussion_r443759576", "createdAt": "2020-06-22T18:50:42Z", "author": {"login": "mayankshriv"}, "path": "pinot-clients/pinot-jdbc-client/src/main/java/org/apache/pinot/client/utils/DriverUtils.java", "diffHunk": "@@ -0,0 +1,41 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.client.utils;\n+\n+import java.net.URI;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+\n+public class DriverUtils {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f33c79f1e6f8048ad90c6e806c0d8092b7f0037a"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2NTAwMjg5OnYy", "diffSide": "RIGHT", "path": "pinot-clients/pinot-jdbc-client/src/main/java/org/apache/pinot/client/utils/DriverUtils.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxODo1MjoyOVrOGnM_Yg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxODo1MjoyOVrOGnM_Yg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzc2MDQ4Mg==", "bodyText": "Use Collections.singletonList() instead?", "url": "https://github.com/apache/pinot/pull/5602#discussion_r443760482", "createdAt": "2020-06-22T18:52:29Z", "author": {"login": "mayankshriv"}, "path": "pinot-clients/pinot-jdbc-client/src/main/java/org/apache/pinot/client/utils/DriverUtils.java", "diffHunk": "@@ -0,0 +1,41 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.client.utils;\n+\n+import java.net.URI;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+\n+public class DriverUtils {\n+\n+  public static List<String> getBrokersFromURL(String url) {\n+    if (url.startsWith(\"jdbc:\")) {\n+      url = url.substring(5);\n+    }\n+    URI uri = URI.create(url);\n+    return getBrokersFromURI(uri);\n+  }\n+\n+  public static List<String> getBrokersFromURI(URI uri) {\n+    List<String> brokerList = new ArrayList<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f33c79f1e6f8048ad90c6e806c0d8092b7f0037a"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3NzM5NTY0OnYy", "diffSide": "RIGHT", "path": "pinot-clients/pinot-jdbc-client/src/main/java/org/apache/pinot/client/PinotDriver.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQxODoxOTo1M1rOGpGc4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQxMTo0MDo0M1rOGp8uRQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTc1MDQ5OA==", "bodyText": "what should this return according to the spec", "url": "https://github.com/apache/pinot/pull/5602#discussion_r445750498", "createdAt": "2020-06-25T18:19:53Z", "author": {"login": "kishoreg"}, "path": "pinot-clients/pinot-jdbc-client/src/main/java/org/apache/pinot/client/PinotDriver.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.client;\n+\n+import java.net.URI;\n+import java.sql.Connection;\n+import java.sql.Driver;\n+import java.sql.DriverPropertyInfo;\n+import java.sql.SQLException;\n+import java.sql.SQLFeatureNotSupportedException;\n+import java.util.List;\n+import java.util.Properties;\n+import java.util.logging.Logger;\n+import org.apache.pinot.client.utils.DriverUtils;\n+import org.slf4j.LoggerFactory;\n+\n+\n+public class PinotDriver implements Driver {\n+  private static final org.slf4j.Logger LOGGER = LoggerFactory.getLogger(PinotDriver.class);\n+  private final String SCHEME = \"pinot\";\n+\n+  @Override\n+  public Connection connect(String url, Properties info)\n+      throws SQLException {\n+    try {\n+      PinotClientTransport pinotClientTransport = new JsonAsyncHttpPinotClientTransportFactory().buildTransport();\n+      List<String> brokerList = DriverUtils.getBrokersFromURL(url);\n+      return new PinotConnection(brokerList, pinotClientTransport);\n+    } catch (Exception e) {\n+      LOGGER.error(\"Failed to connect to url : {}\", url, e);\n+      throw new SQLException(\"Failed to connect to url : {}\", url, e);\n+    }\n+  }\n+\n+  @Override\n+  public boolean acceptsURL(String url)\n+      throws SQLException {\n+    String cleanURI = url.substring(5);\n+    URI uri = URI.create(cleanURI);\n+    return uri.getScheme().contentEquals(SCHEME);\n+  }\n+\n+  @Override\n+  public DriverPropertyInfo[] getPropertyInfo(String url, Properties info)\n+      throws SQLException {\n+    return new DriverPropertyInfo[0];\n+  }\n+\n+  @Override\n+  public int getMajorVersion() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4974a66a0efaea752da6aa10828383f4f0deca9e"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjYzOTY4NQ==", "bodyText": "It should return 1 only as per the spec. We can bump up the numbers in future releases of the driver.", "url": "https://github.com/apache/pinot/pull/5602#discussion_r446639685", "createdAt": "2020-06-28T11:40:43Z", "author": {"login": "KKcorps"}, "path": "pinot-clients/pinot-jdbc-client/src/main/java/org/apache/pinot/client/PinotDriver.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.client;\n+\n+import java.net.URI;\n+import java.sql.Connection;\n+import java.sql.Driver;\n+import java.sql.DriverPropertyInfo;\n+import java.sql.SQLException;\n+import java.sql.SQLFeatureNotSupportedException;\n+import java.util.List;\n+import java.util.Properties;\n+import java.util.logging.Logger;\n+import org.apache.pinot.client.utils.DriverUtils;\n+import org.slf4j.LoggerFactory;\n+\n+\n+public class PinotDriver implements Driver {\n+  private static final org.slf4j.Logger LOGGER = LoggerFactory.getLogger(PinotDriver.class);\n+  private final String SCHEME = \"pinot\";\n+\n+  @Override\n+  public Connection connect(String url, Properties info)\n+      throws SQLException {\n+    try {\n+      PinotClientTransport pinotClientTransport = new JsonAsyncHttpPinotClientTransportFactory().buildTransport();\n+      List<String> brokerList = DriverUtils.getBrokersFromURL(url);\n+      return new PinotConnection(brokerList, pinotClientTransport);\n+    } catch (Exception e) {\n+      LOGGER.error(\"Failed to connect to url : {}\", url, e);\n+      throw new SQLException(\"Failed to connect to url : {}\", url, e);\n+    }\n+  }\n+\n+  @Override\n+  public boolean acceptsURL(String url)\n+      throws SQLException {\n+    String cleanURI = url.substring(5);\n+    URI uri = URI.create(cleanURI);\n+    return uri.getScheme().contentEquals(SCHEME);\n+  }\n+\n+  @Override\n+  public DriverPropertyInfo[] getPropertyInfo(String url, Properties info)\n+      throws SQLException {\n+    return new DriverPropertyInfo[0];\n+  }\n+\n+  @Override\n+  public int getMajorVersion() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTc1MDQ5OA=="}, "originalCommit": {"oid": "4974a66a0efaea752da6aa10828383f4f0deca9e"}, "originalPosition": 66}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3NzQwNTI5OnYy", "diffSide": "RIGHT", "path": "pinot-clients/pinot-jdbc-client/src/main/java/org/apache/pinot/client/PinotResultSet.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQxODoyMjo1MlrOGpGjNA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQxMTo0MDo0OVrOGp8uTA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTc1MjExNg==", "bodyText": "better to cache this", "url": "https://github.com/apache/pinot/pull/5602#discussion_r445752116", "createdAt": "2020-06-25T18:22:52Z", "author": {"login": "kishoreg"}, "path": "pinot-clients/pinot-jdbc-client/src/main/java/org/apache/pinot/client/PinotResultSet.java", "diffHunk": "@@ -0,0 +1,1317 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.client;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.InputStream;\n+import java.io.InputStreamReader;\n+import java.io.Reader;\n+import java.math.BigDecimal;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n+import java.sql.Array;\n+import java.sql.Blob;\n+import java.sql.Clob;\n+import java.sql.Date;\n+import java.sql.NClob;\n+import java.sql.Ref;\n+import java.sql.ResultSet;\n+import java.sql.ResultSetMetaData;\n+import java.sql.RowId;\n+import java.sql.SQLException;\n+import java.sql.SQLFeatureNotSupportedException;\n+import java.sql.SQLType;\n+import java.sql.SQLWarning;\n+import java.sql.SQLXML;\n+import java.sql.Statement;\n+import java.sql.Time;\n+import java.sql.Timestamp;\n+import java.text.SimpleDateFormat;\n+import java.util.Calendar;\n+import java.util.HashMap;\n+import java.util.Map;\n+import org.apache.commons.codec.binary.Hex;\n+\n+\n+public class PinotResultSet implements ResultSet {\n+  public static final String TIMESTAMP_FORMAT = \"dd-mm-yyyy HH:MM:SS\";\n+  public static final String DATE_FORMAT = \"dd-mm-yyyy\";\n+  private org.apache.pinot.client.ResultSet _resultSet;\n+  private int _totalRows;\n+  private int _currentRow;\n+  private Map<String, Integer> _columns = new HashMap<>();\n+\n+  public PinotResultSet(org.apache.pinot.client.ResultSet resultSet) {\n+    _resultSet = resultSet;\n+    _totalRows = _resultSet.getRowCount();\n+    _currentRow = -1;\n+    for (int i = 0; i < _resultSet.getColumnCount(); i++) {\n+      _columns.put(_resultSet.getColumnName(i), i);\n+    }\n+  }\n+\n+  @Override\n+  public boolean absolute(int row)\n+      throws SQLException {\n+    if (row >= 0 && row < _totalRows) {\n+      _currentRow = row;\n+      return true;\n+    } else if (row < 0 && Math.abs(row) <= _totalRows) {\n+      _currentRow = _totalRows + row;\n+      return true;\n+    }\n+\n+    return false;\n+  }\n+\n+  @Override\n+  public void afterLast()\n+      throws SQLException {\n+    _currentRow = _totalRows;\n+  }\n+\n+  @Override\n+  public void beforeFirst()\n+      throws SQLException {\n+    _currentRow = -1;\n+  }\n+\n+  @Override\n+  public void cancelRowUpdates()\n+      throws SQLException {\n+    throw new SQLFeatureNotSupportedException();\n+  }\n+\n+  @Override\n+  public void clearWarnings()\n+      throws SQLException {\n+    throw new SQLFeatureNotSupportedException();\n+  }\n+\n+  @Override\n+  public void close()\n+      throws SQLException {\n+      _resultSet = null;\n+      _totalRows = 0;\n+      _currentRow = -1;\n+      _columns.clear();;\n+  }\n+\n+  @Override\n+  public void deleteRow()\n+      throws SQLException {\n+    throw new SQLFeatureNotSupportedException();\n+  }\n+\n+  @Override\n+  public int findColumn(String columnLabel)\n+      throws SQLException {\n+    if (_columns.containsKey(columnLabel)) {\n+      return _columns.get(columnLabel);\n+    } else {\n+      throw new SQLException(\"Column with label {} not found in ResultSet\", columnLabel);\n+    }\n+  }\n+\n+  @Override\n+  public boolean first()\n+      throws SQLException {\n+    _currentRow = 0;\n+    return true;\n+  }\n+\n+  @Override\n+  public Array getArray(int columnIndex)\n+      throws SQLException {\n+    throw new SQLFeatureNotSupportedException();\n+  }\n+\n+  @Override\n+  public Array getArray(String columnLabel)\n+      throws SQLException {\n+    throw new SQLFeatureNotSupportedException();\n+  }\n+\n+  @Override\n+  public InputStream getAsciiStream(int columnIndex)\n+      throws SQLException {\n+    String value = getString(columnIndex);\n+    InputStream in = new ByteArrayInputStream(value.getBytes(StandardCharsets.US_ASCII));\n+    return in;\n+  }\n+\n+  @Override\n+  public InputStream getAsciiStream(String columnLabel)\n+      throws SQLException {\n+    return getAsciiStream(findColumn(columnLabel));\n+  }\n+\n+  @Override\n+  public BigDecimal getBigDecimal(int columnIndex)\n+      throws SQLException {\n+    return getBigDecimal(columnIndex, 0);\n+  }\n+\n+  @Override\n+  public BigDecimal getBigDecimal(String columnLabel)\n+      throws SQLException {\n+    return getBigDecimal(findColumn(columnLabel));\n+  }\n+\n+  @Override\n+  public BigDecimal getBigDecimal(int columnIndex, int scale)\n+      throws SQLException {\n+    try {\n+      String value = getString(columnIndex);\n+      BigDecimal bigDecimal = new BigDecimal(value).setScale(scale);\n+      return bigDecimal;\n+    }catch (Exception e){\n+      throw new SQLException(\"Unable to fetch BigDecimal value\", e);\n+    }\n+  }\n+\n+  @Override\n+  public BigDecimal getBigDecimal(String columnLabel, int scale)\n+      throws SQLException {\n+    return getBigDecimal(findColumn(columnLabel), scale);\n+  }\n+\n+  @Override\n+  public InputStream getBinaryStream(int columnIndex)\n+      throws SQLException {\n+    throw new SQLFeatureNotSupportedException();\n+  }\n+\n+  @Override\n+  public InputStream getBinaryStream(String columnLabel)\n+      throws SQLException {\n+    throw new SQLFeatureNotSupportedException();\n+  }\n+\n+  @Override\n+  public Blob getBlob(int columnIndex)\n+      throws SQLException {\n+    throw new SQLFeatureNotSupportedException();\n+  }\n+\n+  @Override\n+  public Blob getBlob(String columnLabel)\n+      throws SQLException {\n+    throw new SQLFeatureNotSupportedException();\n+  }\n+\n+  @Override\n+  public boolean getBoolean(int columnIndex)\n+      throws SQLException {\n+    return Boolean.parseBoolean(_resultSet.getString(_currentRow, columnIndex));\n+  }\n+\n+  @Override\n+  public boolean getBoolean(String columnLabel)\n+      throws SQLException {\n+    return getBoolean(findColumn(columnLabel));\n+  }\n+\n+  @Override\n+  public byte getByte(String columnLabel)\n+      throws SQLException {\n+    throw new SQLFeatureNotSupportedException();\n+  }\n+\n+  @Override\n+  public byte getByte(int columnIndex)\n+      throws SQLException {\n+    throw new SQLFeatureNotSupportedException();\n+  }\n+\n+  @Override\n+  public byte[] getBytes(int columnIndex)\n+      throws SQLException {\n+    try {\n+      String value = _resultSet.getString(_currentRow, columnIndex);\n+      return Hex.decodeHex(value.toCharArray());\n+    } catch (Exception e) {\n+      throw new SQLException(String.format(\"Unable to fetch value for column %d\", columnIndex), e);\n+    }\n+  }\n+\n+  @Override\n+  public byte[] getBytes(String columnLabel)\n+      throws SQLException {\n+    return getBytes(findColumn(columnLabel));\n+  }\n+\n+  @Override\n+  public Reader getCharacterStream(int columnIndex)\n+      throws SQLException {\n+    InputStream in = getUnicodeStream(columnIndex);\n+    Reader reader = new InputStreamReader(in, StandardCharsets.UTF_8);\n+    return reader;\n+  }\n+\n+  @Override\n+  public Reader getCharacterStream(String columnLabel)\n+      throws SQLException {\n+    return getCharacterStream(findColumn(columnLabel));\n+  }\n+\n+  @Override\n+  public Clob getClob(int columnIndex)\n+      throws SQLException {\n+    throw new SQLFeatureNotSupportedException();\n+  }\n+\n+  @Override\n+  public Clob getClob(String columnLabel)\n+      throws SQLException {\n+    throw new SQLFeatureNotSupportedException();\n+  }\n+\n+  @Override\n+  public int getConcurrency()\n+      throws SQLException {\n+    throw new SQLFeatureNotSupportedException();\n+  }\n+\n+  @Override\n+  public String getCursorName()\n+      throws SQLException {\n+    throw new SQLFeatureNotSupportedException();\n+  }\n+\n+  @Override\n+  public Date getDate(int columnIndex)\n+      throws SQLException {\n+    return getDate(columnIndex, Calendar.getInstance());\n+  }\n+\n+  @Override\n+  public Date getDate(String columnLabel)\n+      throws SQLException {\n+    return getDate(findColumn(columnLabel), Calendar.getInstance());\n+  }\n+\n+  @Override\n+  public Date getDate(int columnIndex, Calendar cal)\n+      throws SQLException {\n+    try {\n+      String value = getString(columnIndex);\n+      SimpleDateFormat dateFormat = new SimpleDateFormat(DATE_FORMAT);\n+      java.util.Date date = dateFormat.parse(value);\n+      cal.setTime(date);\n+      Date sqlDate = new Date(cal.getTimeInMillis());\n+      return sqlDate;\n+    } catch (Exception e) {\n+      throw new SQLException(\"Unable to fetch date\", e);\n+    }\n+  }\n+\n+  @Override\n+  public Date getDate(String columnLabel, Calendar cal)\n+      throws SQLException {\n+    return getDate(findColumn(columnLabel), cal);\n+  }\n+\n+  @Override\n+  public double getDouble(int columnIndex)\n+      throws SQLException {\n+    return _resultSet.getDouble(_currentRow, columnIndex);\n+  }\n+\n+  @Override\n+  public double getDouble(String columnLabel)\n+      throws SQLException {\n+    return getDouble(findColumn(columnLabel));\n+  }\n+\n+  @Override\n+  public int getFetchDirection()\n+      throws SQLException {\n+    throw new SQLFeatureNotSupportedException();\n+  }\n+\n+  @Override\n+  public void setFetchDirection(int direction)\n+      throws SQLException {\n+    throw new SQLFeatureNotSupportedException();\n+  }\n+\n+  @Override\n+  public int getFetchSize()\n+      throws SQLException {\n+    throw new SQLFeatureNotSupportedException();\n+  }\n+\n+  @Override\n+  public void setFetchSize(int rows)\n+      throws SQLException {\n+    throw new SQLFeatureNotSupportedException();\n+  }\n+\n+  @Override\n+  public float getFloat(int columnIndex)\n+      throws SQLException {\n+    return _resultSet.getFloat(_currentRow, columnIndex);\n+  }\n+\n+  @Override\n+  public float getFloat(String columnLabel)\n+      throws SQLException {\n+    return getFloat(findColumn(columnLabel));\n+  }\n+\n+  @Override\n+  public int getHoldability()\n+      throws SQLException {\n+    return 0;\n+  }\n+\n+  @Override\n+  public int getInt(int columnIndex)\n+      throws SQLException {\n+    return _resultSet.getInt(_currentRow, columnIndex);\n+  }\n+\n+  @Override\n+  public int getInt(String columnLabel)\n+      throws SQLException {\n+    return getInt(findColumn(columnLabel));\n+  }\n+\n+  @Override\n+  public long getLong(int columnIndex)\n+      throws SQLException {\n+    return _resultSet.getLong(_currentRow, columnIndex);\n+  }\n+\n+  @Override\n+  public long getLong(String columnLabel)\n+      throws SQLException {\n+    return getLong(findColumn(columnLabel));\n+  }\n+\n+  @Override\n+  public ResultSetMetaData getMetaData()\n+      throws SQLException {\n+    throw new SQLFeatureNotSupportedException();\n+  }\n+\n+  @Override\n+  public Reader getNCharacterStream(int columnIndex)\n+      throws SQLException {\n+    throw new SQLFeatureNotSupportedException();\n+  }\n+\n+  @Override\n+  public Reader getNCharacterStream(String columnLabel)\n+      throws SQLException {\n+    throw new SQLFeatureNotSupportedException();\n+  }\n+\n+  @Override\n+  public NClob getNClob(int columnIndex)\n+      throws SQLException {\n+    throw new SQLFeatureNotSupportedException();\n+  }\n+\n+  @Override\n+  public NClob getNClob(String columnLabel)\n+      throws SQLException {\n+    throw new SQLFeatureNotSupportedException();\n+  }\n+\n+  @Override\n+  public String getNString(int columnIndex)\n+      throws SQLException {\n+    throw new SQLFeatureNotSupportedException();\n+  }\n+\n+  @Override\n+  public String getNString(String columnLabel)\n+      throws SQLException {\n+    throw new SQLFeatureNotSupportedException();\n+  }\n+\n+  @Override\n+  public Object getObject(int columnIndex)\n+      throws SQLException {\n+    throw new SQLFeatureNotSupportedException();\n+  }\n+\n+  @Override\n+  public Object getObject(String columnLabel)\n+      throws SQLException {\n+    throw new SQLFeatureNotSupportedException();\n+  }\n+\n+  @Override\n+  public Object getObject(int columnIndex, Map<String, Class<?>> map)\n+      throws SQLException {\n+    throw new SQLFeatureNotSupportedException();\n+  }\n+\n+  @Override\n+  public Object getObject(String columnLabel, Map<String, Class<?>> map)\n+      throws SQLException {\n+    throw new SQLFeatureNotSupportedException();\n+  }\n+\n+  @Override\n+  public <T> T getObject(int columnIndex, Class<T> type)\n+      throws SQLException {\n+    throw new SQLFeatureNotSupportedException();\n+  }\n+\n+  @Override\n+  public <T> T getObject(String columnLabel, Class<T> type)\n+      throws SQLException {\n+    throw new SQLFeatureNotSupportedException();\n+  }\n+\n+  @Override\n+  public Ref getRef(int columnIndex)\n+      throws SQLException {\n+    throw new SQLFeatureNotSupportedException();\n+  }\n+\n+  @Override\n+  public Ref getRef(String columnLabel)\n+      throws SQLException {\n+    throw new SQLFeatureNotSupportedException();\n+  }\n+\n+  @Override\n+  public int getRow()\n+      throws SQLException {\n+    return _currentRow;\n+  }\n+\n+  @Override\n+  public RowId getRowId(int columnIndex)\n+      throws SQLException {\n+    throw new SQLFeatureNotSupportedException();\n+  }\n+\n+  @Override\n+  public RowId getRowId(String columnLabel)\n+      throws SQLException {\n+    throw new SQLFeatureNotSupportedException();\n+  }\n+\n+  @Override\n+  public SQLXML getSQLXML(int columnIndex)\n+      throws SQLException {\n+    throw new SQLFeatureNotSupportedException();\n+  }\n+\n+  @Override\n+  public SQLXML getSQLXML(String columnLabel)\n+      throws SQLException {\n+    throw new SQLFeatureNotSupportedException();\n+  }\n+\n+  @Override\n+  public short getShort(String columnLabel)\n+      throws SQLException {\n+    return getShort(columnLabel);\n+  }\n+\n+  @Override\n+  public short getShort(int columnIndex)\n+      throws SQLException {\n+    Integer value = getInt(columnIndex);\n+    return value.shortValue();\n+  }\n+\n+  @Override\n+  public Statement getStatement()\n+      throws SQLException {\n+    throw new SQLFeatureNotSupportedException();\n+  }\n+\n+  @Override\n+  public String getString(int columnIndex)\n+      throws SQLException {\n+    return _resultSet.getString(_currentRow, columnIndex);\n+  }\n+\n+  @Override\n+  public String getString(String columnLabel)\n+      throws SQLException {\n+    return getString(findColumn(columnLabel));\n+  }\n+\n+  @Override\n+  public Time getTime(int columnIndex)\n+      throws SQLException {\n+    return getTime(columnIndex, Calendar.getInstance());\n+  }\n+\n+  @Override\n+  public Time getTime(String columnLabel)\n+      throws SQLException {\n+    return getTime(findColumn(columnLabel), Calendar.getInstance());\n+  }\n+\n+  @Override\n+  public Time getTime(int columnIndex, Calendar cal)\n+      throws SQLException {\n+    try {\n+      String value = getString(columnIndex);\n+      SimpleDateFormat dateFormat = new SimpleDateFormat(TIMESTAMP_FORMAT);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4974a66a0efaea752da6aa10828383f4f0deca9e"}, "originalPosition": 577}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjYzOTY5Mg==", "bodyText": "done", "url": "https://github.com/apache/pinot/pull/5602#discussion_r446639692", "createdAt": "2020-06-28T11:40:49Z", "author": {"login": "KKcorps"}, "path": "pinot-clients/pinot-jdbc-client/src/main/java/org/apache/pinot/client/PinotResultSet.java", "diffHunk": "@@ -0,0 +1,1317 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.client;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.InputStream;\n+import java.io.InputStreamReader;\n+import java.io.Reader;\n+import java.math.BigDecimal;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n+import java.sql.Array;\n+import java.sql.Blob;\n+import java.sql.Clob;\n+import java.sql.Date;\n+import java.sql.NClob;\n+import java.sql.Ref;\n+import java.sql.ResultSet;\n+import java.sql.ResultSetMetaData;\n+import java.sql.RowId;\n+import java.sql.SQLException;\n+import java.sql.SQLFeatureNotSupportedException;\n+import java.sql.SQLType;\n+import java.sql.SQLWarning;\n+import java.sql.SQLXML;\n+import java.sql.Statement;\n+import java.sql.Time;\n+import java.sql.Timestamp;\n+import java.text.SimpleDateFormat;\n+import java.util.Calendar;\n+import java.util.HashMap;\n+import java.util.Map;\n+import org.apache.commons.codec.binary.Hex;\n+\n+\n+public class PinotResultSet implements ResultSet {\n+  public static final String TIMESTAMP_FORMAT = \"dd-mm-yyyy HH:MM:SS\";\n+  public static final String DATE_FORMAT = \"dd-mm-yyyy\";\n+  private org.apache.pinot.client.ResultSet _resultSet;\n+  private int _totalRows;\n+  private int _currentRow;\n+  private Map<String, Integer> _columns = new HashMap<>();\n+\n+  public PinotResultSet(org.apache.pinot.client.ResultSet resultSet) {\n+    _resultSet = resultSet;\n+    _totalRows = _resultSet.getRowCount();\n+    _currentRow = -1;\n+    for (int i = 0; i < _resultSet.getColumnCount(); i++) {\n+      _columns.put(_resultSet.getColumnName(i), i);\n+    }\n+  }\n+\n+  @Override\n+  public boolean absolute(int row)\n+      throws SQLException {\n+    if (row >= 0 && row < _totalRows) {\n+      _currentRow = row;\n+      return true;\n+    } else if (row < 0 && Math.abs(row) <= _totalRows) {\n+      _currentRow = _totalRows + row;\n+      return true;\n+    }\n+\n+    return false;\n+  }\n+\n+  @Override\n+  public void afterLast()\n+      throws SQLException {\n+    _currentRow = _totalRows;\n+  }\n+\n+  @Override\n+  public void beforeFirst()\n+      throws SQLException {\n+    _currentRow = -1;\n+  }\n+\n+  @Override\n+  public void cancelRowUpdates()\n+      throws SQLException {\n+    throw new SQLFeatureNotSupportedException();\n+  }\n+\n+  @Override\n+  public void clearWarnings()\n+      throws SQLException {\n+    throw new SQLFeatureNotSupportedException();\n+  }\n+\n+  @Override\n+  public void close()\n+      throws SQLException {\n+      _resultSet = null;\n+      _totalRows = 0;\n+      _currentRow = -1;\n+      _columns.clear();;\n+  }\n+\n+  @Override\n+  public void deleteRow()\n+      throws SQLException {\n+    throw new SQLFeatureNotSupportedException();\n+  }\n+\n+  @Override\n+  public int findColumn(String columnLabel)\n+      throws SQLException {\n+    if (_columns.containsKey(columnLabel)) {\n+      return _columns.get(columnLabel);\n+    } else {\n+      throw new SQLException(\"Column with label {} not found in ResultSet\", columnLabel);\n+    }\n+  }\n+\n+  @Override\n+  public boolean first()\n+      throws SQLException {\n+    _currentRow = 0;\n+    return true;\n+  }\n+\n+  @Override\n+  public Array getArray(int columnIndex)\n+      throws SQLException {\n+    throw new SQLFeatureNotSupportedException();\n+  }\n+\n+  @Override\n+  public Array getArray(String columnLabel)\n+      throws SQLException {\n+    throw new SQLFeatureNotSupportedException();\n+  }\n+\n+  @Override\n+  public InputStream getAsciiStream(int columnIndex)\n+      throws SQLException {\n+    String value = getString(columnIndex);\n+    InputStream in = new ByteArrayInputStream(value.getBytes(StandardCharsets.US_ASCII));\n+    return in;\n+  }\n+\n+  @Override\n+  public InputStream getAsciiStream(String columnLabel)\n+      throws SQLException {\n+    return getAsciiStream(findColumn(columnLabel));\n+  }\n+\n+  @Override\n+  public BigDecimal getBigDecimal(int columnIndex)\n+      throws SQLException {\n+    return getBigDecimal(columnIndex, 0);\n+  }\n+\n+  @Override\n+  public BigDecimal getBigDecimal(String columnLabel)\n+      throws SQLException {\n+    return getBigDecimal(findColumn(columnLabel));\n+  }\n+\n+  @Override\n+  public BigDecimal getBigDecimal(int columnIndex, int scale)\n+      throws SQLException {\n+    try {\n+      String value = getString(columnIndex);\n+      BigDecimal bigDecimal = new BigDecimal(value).setScale(scale);\n+      return bigDecimal;\n+    }catch (Exception e){\n+      throw new SQLException(\"Unable to fetch BigDecimal value\", e);\n+    }\n+  }\n+\n+  @Override\n+  public BigDecimal getBigDecimal(String columnLabel, int scale)\n+      throws SQLException {\n+    return getBigDecimal(findColumn(columnLabel), scale);\n+  }\n+\n+  @Override\n+  public InputStream getBinaryStream(int columnIndex)\n+      throws SQLException {\n+    throw new SQLFeatureNotSupportedException();\n+  }\n+\n+  @Override\n+  public InputStream getBinaryStream(String columnLabel)\n+      throws SQLException {\n+    throw new SQLFeatureNotSupportedException();\n+  }\n+\n+  @Override\n+  public Blob getBlob(int columnIndex)\n+      throws SQLException {\n+    throw new SQLFeatureNotSupportedException();\n+  }\n+\n+  @Override\n+  public Blob getBlob(String columnLabel)\n+      throws SQLException {\n+    throw new SQLFeatureNotSupportedException();\n+  }\n+\n+  @Override\n+  public boolean getBoolean(int columnIndex)\n+      throws SQLException {\n+    return Boolean.parseBoolean(_resultSet.getString(_currentRow, columnIndex));\n+  }\n+\n+  @Override\n+  public boolean getBoolean(String columnLabel)\n+      throws SQLException {\n+    return getBoolean(findColumn(columnLabel));\n+  }\n+\n+  @Override\n+  public byte getByte(String columnLabel)\n+      throws SQLException {\n+    throw new SQLFeatureNotSupportedException();\n+  }\n+\n+  @Override\n+  public byte getByte(int columnIndex)\n+      throws SQLException {\n+    throw new SQLFeatureNotSupportedException();\n+  }\n+\n+  @Override\n+  public byte[] getBytes(int columnIndex)\n+      throws SQLException {\n+    try {\n+      String value = _resultSet.getString(_currentRow, columnIndex);\n+      return Hex.decodeHex(value.toCharArray());\n+    } catch (Exception e) {\n+      throw new SQLException(String.format(\"Unable to fetch value for column %d\", columnIndex), e);\n+    }\n+  }\n+\n+  @Override\n+  public byte[] getBytes(String columnLabel)\n+      throws SQLException {\n+    return getBytes(findColumn(columnLabel));\n+  }\n+\n+  @Override\n+  public Reader getCharacterStream(int columnIndex)\n+      throws SQLException {\n+    InputStream in = getUnicodeStream(columnIndex);\n+    Reader reader = new InputStreamReader(in, StandardCharsets.UTF_8);\n+    return reader;\n+  }\n+\n+  @Override\n+  public Reader getCharacterStream(String columnLabel)\n+      throws SQLException {\n+    return getCharacterStream(findColumn(columnLabel));\n+  }\n+\n+  @Override\n+  public Clob getClob(int columnIndex)\n+      throws SQLException {\n+    throw new SQLFeatureNotSupportedException();\n+  }\n+\n+  @Override\n+  public Clob getClob(String columnLabel)\n+      throws SQLException {\n+    throw new SQLFeatureNotSupportedException();\n+  }\n+\n+  @Override\n+  public int getConcurrency()\n+      throws SQLException {\n+    throw new SQLFeatureNotSupportedException();\n+  }\n+\n+  @Override\n+  public String getCursorName()\n+      throws SQLException {\n+    throw new SQLFeatureNotSupportedException();\n+  }\n+\n+  @Override\n+  public Date getDate(int columnIndex)\n+      throws SQLException {\n+    return getDate(columnIndex, Calendar.getInstance());\n+  }\n+\n+  @Override\n+  public Date getDate(String columnLabel)\n+      throws SQLException {\n+    return getDate(findColumn(columnLabel), Calendar.getInstance());\n+  }\n+\n+  @Override\n+  public Date getDate(int columnIndex, Calendar cal)\n+      throws SQLException {\n+    try {\n+      String value = getString(columnIndex);\n+      SimpleDateFormat dateFormat = new SimpleDateFormat(DATE_FORMAT);\n+      java.util.Date date = dateFormat.parse(value);\n+      cal.setTime(date);\n+      Date sqlDate = new Date(cal.getTimeInMillis());\n+      return sqlDate;\n+    } catch (Exception e) {\n+      throw new SQLException(\"Unable to fetch date\", e);\n+    }\n+  }\n+\n+  @Override\n+  public Date getDate(String columnLabel, Calendar cal)\n+      throws SQLException {\n+    return getDate(findColumn(columnLabel), cal);\n+  }\n+\n+  @Override\n+  public double getDouble(int columnIndex)\n+      throws SQLException {\n+    return _resultSet.getDouble(_currentRow, columnIndex);\n+  }\n+\n+  @Override\n+  public double getDouble(String columnLabel)\n+      throws SQLException {\n+    return getDouble(findColumn(columnLabel));\n+  }\n+\n+  @Override\n+  public int getFetchDirection()\n+      throws SQLException {\n+    throw new SQLFeatureNotSupportedException();\n+  }\n+\n+  @Override\n+  public void setFetchDirection(int direction)\n+      throws SQLException {\n+    throw new SQLFeatureNotSupportedException();\n+  }\n+\n+  @Override\n+  public int getFetchSize()\n+      throws SQLException {\n+    throw new SQLFeatureNotSupportedException();\n+  }\n+\n+  @Override\n+  public void setFetchSize(int rows)\n+      throws SQLException {\n+    throw new SQLFeatureNotSupportedException();\n+  }\n+\n+  @Override\n+  public float getFloat(int columnIndex)\n+      throws SQLException {\n+    return _resultSet.getFloat(_currentRow, columnIndex);\n+  }\n+\n+  @Override\n+  public float getFloat(String columnLabel)\n+      throws SQLException {\n+    return getFloat(findColumn(columnLabel));\n+  }\n+\n+  @Override\n+  public int getHoldability()\n+      throws SQLException {\n+    return 0;\n+  }\n+\n+  @Override\n+  public int getInt(int columnIndex)\n+      throws SQLException {\n+    return _resultSet.getInt(_currentRow, columnIndex);\n+  }\n+\n+  @Override\n+  public int getInt(String columnLabel)\n+      throws SQLException {\n+    return getInt(findColumn(columnLabel));\n+  }\n+\n+  @Override\n+  public long getLong(int columnIndex)\n+      throws SQLException {\n+    return _resultSet.getLong(_currentRow, columnIndex);\n+  }\n+\n+  @Override\n+  public long getLong(String columnLabel)\n+      throws SQLException {\n+    return getLong(findColumn(columnLabel));\n+  }\n+\n+  @Override\n+  public ResultSetMetaData getMetaData()\n+      throws SQLException {\n+    throw new SQLFeatureNotSupportedException();\n+  }\n+\n+  @Override\n+  public Reader getNCharacterStream(int columnIndex)\n+      throws SQLException {\n+    throw new SQLFeatureNotSupportedException();\n+  }\n+\n+  @Override\n+  public Reader getNCharacterStream(String columnLabel)\n+      throws SQLException {\n+    throw new SQLFeatureNotSupportedException();\n+  }\n+\n+  @Override\n+  public NClob getNClob(int columnIndex)\n+      throws SQLException {\n+    throw new SQLFeatureNotSupportedException();\n+  }\n+\n+  @Override\n+  public NClob getNClob(String columnLabel)\n+      throws SQLException {\n+    throw new SQLFeatureNotSupportedException();\n+  }\n+\n+  @Override\n+  public String getNString(int columnIndex)\n+      throws SQLException {\n+    throw new SQLFeatureNotSupportedException();\n+  }\n+\n+  @Override\n+  public String getNString(String columnLabel)\n+      throws SQLException {\n+    throw new SQLFeatureNotSupportedException();\n+  }\n+\n+  @Override\n+  public Object getObject(int columnIndex)\n+      throws SQLException {\n+    throw new SQLFeatureNotSupportedException();\n+  }\n+\n+  @Override\n+  public Object getObject(String columnLabel)\n+      throws SQLException {\n+    throw new SQLFeatureNotSupportedException();\n+  }\n+\n+  @Override\n+  public Object getObject(int columnIndex, Map<String, Class<?>> map)\n+      throws SQLException {\n+    throw new SQLFeatureNotSupportedException();\n+  }\n+\n+  @Override\n+  public Object getObject(String columnLabel, Map<String, Class<?>> map)\n+      throws SQLException {\n+    throw new SQLFeatureNotSupportedException();\n+  }\n+\n+  @Override\n+  public <T> T getObject(int columnIndex, Class<T> type)\n+      throws SQLException {\n+    throw new SQLFeatureNotSupportedException();\n+  }\n+\n+  @Override\n+  public <T> T getObject(String columnLabel, Class<T> type)\n+      throws SQLException {\n+    throw new SQLFeatureNotSupportedException();\n+  }\n+\n+  @Override\n+  public Ref getRef(int columnIndex)\n+      throws SQLException {\n+    throw new SQLFeatureNotSupportedException();\n+  }\n+\n+  @Override\n+  public Ref getRef(String columnLabel)\n+      throws SQLException {\n+    throw new SQLFeatureNotSupportedException();\n+  }\n+\n+  @Override\n+  public int getRow()\n+      throws SQLException {\n+    return _currentRow;\n+  }\n+\n+  @Override\n+  public RowId getRowId(int columnIndex)\n+      throws SQLException {\n+    throw new SQLFeatureNotSupportedException();\n+  }\n+\n+  @Override\n+  public RowId getRowId(String columnLabel)\n+      throws SQLException {\n+    throw new SQLFeatureNotSupportedException();\n+  }\n+\n+  @Override\n+  public SQLXML getSQLXML(int columnIndex)\n+      throws SQLException {\n+    throw new SQLFeatureNotSupportedException();\n+  }\n+\n+  @Override\n+  public SQLXML getSQLXML(String columnLabel)\n+      throws SQLException {\n+    throw new SQLFeatureNotSupportedException();\n+  }\n+\n+  @Override\n+  public short getShort(String columnLabel)\n+      throws SQLException {\n+    return getShort(columnLabel);\n+  }\n+\n+  @Override\n+  public short getShort(int columnIndex)\n+      throws SQLException {\n+    Integer value = getInt(columnIndex);\n+    return value.shortValue();\n+  }\n+\n+  @Override\n+  public Statement getStatement()\n+      throws SQLException {\n+    throw new SQLFeatureNotSupportedException();\n+  }\n+\n+  @Override\n+  public String getString(int columnIndex)\n+      throws SQLException {\n+    return _resultSet.getString(_currentRow, columnIndex);\n+  }\n+\n+  @Override\n+  public String getString(String columnLabel)\n+      throws SQLException {\n+    return getString(findColumn(columnLabel));\n+  }\n+\n+  @Override\n+  public Time getTime(int columnIndex)\n+      throws SQLException {\n+    return getTime(columnIndex, Calendar.getInstance());\n+  }\n+\n+  @Override\n+  public Time getTime(String columnLabel)\n+      throws SQLException {\n+    return getTime(findColumn(columnLabel), Calendar.getInstance());\n+  }\n+\n+  @Override\n+  public Time getTime(int columnIndex, Calendar cal)\n+      throws SQLException {\n+    try {\n+      String value = getString(columnIndex);\n+      SimpleDateFormat dateFormat = new SimpleDateFormat(TIMESTAMP_FORMAT);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTc1MjExNg=="}, "originalCommit": {"oid": "4974a66a0efaea752da6aa10828383f4f0deca9e"}, "originalPosition": 577}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3NzQxMzM4OnYy", "diffSide": "RIGHT", "path": "pinot-clients/pinot-jdbc-client/src/main/java/org/apache/pinot/client/PinotResultSet.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQxODoyNToxN1rOGpGocg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQxMTo0MDo1N1rOGp8uXA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTc1MzQ1OA==", "bodyText": "can we create AbstractBaseResultSet and implement all unsupported exceptions in that class. this will improve readability in this class", "url": "https://github.com/apache/pinot/pull/5602#discussion_r445753458", "createdAt": "2020-06-25T18:25:17Z", "author": {"login": "kishoreg"}, "path": "pinot-clients/pinot-jdbc-client/src/main/java/org/apache/pinot/client/PinotResultSet.java", "diffHunk": "@@ -0,0 +1,1317 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.client;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.InputStream;\n+import java.io.InputStreamReader;\n+import java.io.Reader;\n+import java.math.BigDecimal;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n+import java.sql.Array;\n+import java.sql.Blob;\n+import java.sql.Clob;\n+import java.sql.Date;\n+import java.sql.NClob;\n+import java.sql.Ref;\n+import java.sql.ResultSet;\n+import java.sql.ResultSetMetaData;\n+import java.sql.RowId;\n+import java.sql.SQLException;\n+import java.sql.SQLFeatureNotSupportedException;\n+import java.sql.SQLType;\n+import java.sql.SQLWarning;\n+import java.sql.SQLXML;\n+import java.sql.Statement;\n+import java.sql.Time;\n+import java.sql.Timestamp;\n+import java.text.SimpleDateFormat;\n+import java.util.Calendar;\n+import java.util.HashMap;\n+import java.util.Map;\n+import org.apache.commons.codec.binary.Hex;\n+\n+\n+public class PinotResultSet implements ResultSet {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4974a66a0efaea752da6aa10828383f4f0deca9e"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjYzOTcwOA==", "bodyText": "done", "url": "https://github.com/apache/pinot/pull/5602#discussion_r446639708", "createdAt": "2020-06-28T11:40:57Z", "author": {"login": "KKcorps"}, "path": "pinot-clients/pinot-jdbc-client/src/main/java/org/apache/pinot/client/PinotResultSet.java", "diffHunk": "@@ -0,0 +1,1317 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.client;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.InputStream;\n+import java.io.InputStreamReader;\n+import java.io.Reader;\n+import java.math.BigDecimal;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n+import java.sql.Array;\n+import java.sql.Blob;\n+import java.sql.Clob;\n+import java.sql.Date;\n+import java.sql.NClob;\n+import java.sql.Ref;\n+import java.sql.ResultSet;\n+import java.sql.ResultSetMetaData;\n+import java.sql.RowId;\n+import java.sql.SQLException;\n+import java.sql.SQLFeatureNotSupportedException;\n+import java.sql.SQLType;\n+import java.sql.SQLWarning;\n+import java.sql.SQLXML;\n+import java.sql.Statement;\n+import java.sql.Time;\n+import java.sql.Timestamp;\n+import java.text.SimpleDateFormat;\n+import java.util.Calendar;\n+import java.util.HashMap;\n+import java.util.Map;\n+import org.apache.commons.codec.binary.Hex;\n+\n+\n+public class PinotResultSet implements ResultSet {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTc1MzQ1OA=="}, "originalCommit": {"oid": "4974a66a0efaea752da6aa10828383f4f0deca9e"}, "originalPosition": 52}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4359, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}