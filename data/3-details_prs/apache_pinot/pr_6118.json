{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk5NjUyMjc5", "number": 6118, "title": "Implement off-heap bloom filter reader", "bodyText": "Description\nAdd BloomFilterCreator and BloomFilterReader interface (similar to other indexes)\nRe-implemented OnHeapGuavaBloomFilterCreator and OffHeapGuavaBloomFilterReader\nRemove the size limit of the bloom filter\nAdd BloomFilterConfig for custom fpp\nThe new OffHeapGuavaBloomFilterReader is compatible with the existing Guava bloom filter storage format, so it can read the bloom filter generated from the existing code.\nIn order to config fpp for a bloom filter, use the key bloomFilterConfigs under the tableIndexConfig in the table config.\nE.g.\n{\n  \"tableIndexConfig\": {\n    \"bloomFilterConfigs\": {\n      \"col1\": {\n        \"fpp\": 0.01\n      }\n    },\n    ...\n  },\n  ...\n}", "createdAt": "2020-10-08T04:43:29Z", "url": "https://github.com/apache/pinot/pull/6118", "merged": true, "mergeCommit": {"oid": "0e1d4586989800934669cf76dc9f41e63e213345"}, "closed": true, "closedAt": "2020-10-08T21:18:13Z", "author": {"login": "Jackie-Jiang"}, "timelineItems": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdQanzjAFqTUwNDQzNTg4MQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdQmTgFgFqTUwNTA3ODM2MA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA0NDM1ODgx", "url": "https://github.com/apache/pinot/pull/6118#pullrequestreview-504435881", "createdAt": "2020-10-08T05:21:02Z", "commit": {"oid": "979828bfbaaeb1a9d4707b53541782fee0bb4eec"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQwNToyMTowMlrOHeOWjg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQwNToyMTowMlrOHeOWjg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTQ1NDQ3OA==", "bodyText": "Not related to this topic, but somehow I feel we should allow creating bloomfilter for no-dictionary column ?", "url": "https://github.com/apache/pinot/pull/6118#discussion_r501454478", "createdAt": "2020-10-08T05:21:02Z", "author": {"login": "xiangfu0"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/util/TableConfigUtils.java", "diffHunk": "@@ -294,14 +293,19 @@ private static void validateIndexingConfig(@Nullable IndexingConfig indexingConf\n         noDictionaryColumnsSet.add(columnName);\n       }\n     }\n+    Set<String> bloomFilterColumns = new HashSet<>();\n     if (indexingConfig.getBloomFilterColumns() != null) {\n-      for (String columnName : indexingConfig.getBloomFilterColumns()) {\n-        if (noDictionaryColumnsSet.contains(columnName)) {\n-          throw new IllegalStateException(\n-              \"Cannot create a Bloom Filter on column \" + columnName + \" specified in the noDictionaryColumns config\");\n-        }\n-        columnNameToConfigMap.put(columnName, \"Bloom Filter Config\");\n+      bloomFilterColumns.addAll(indexingConfig.getBloomFilterColumns());\n+    }\n+    if (indexingConfig.getBloomFilterConfigs() != null) {\n+      bloomFilterColumns.addAll(indexingConfig.getBloomFilterConfigs().keySet());\n+    }\n+    for (String bloomFilterColumn : bloomFilterColumns) {\n+      if (noDictionaryColumnsSet.contains(bloomFilterColumn)) {\n+        throw new IllegalStateException(\"Cannot create a Bloom Filter on column \" + bloomFilterColumn", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "979828bfbaaeb1a9d4707b53541782fee0bb4eec"}, "originalPosition": 27}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA0NDM2Mjc1", "url": "https://github.com/apache/pinot/pull/6118#pullrequestreview-504436275", "createdAt": "2020-10-08T05:22:20Z", "commit": {"oid": "979828bfbaaeb1a9d4707b53541782fee0bb4eec"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQwNToyMjoyMFrOHeOXyQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQwNToyMjoyMFrOHeOXyQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTQ1NDc5Mw==", "bodyText": "%f", "url": "https://github.com/apache/pinot/pull/6118#discussion_r501454793", "createdAt": "2020-10-08T05:22:20Z", "author": {"login": "xiangfu0"}, "path": "pinot-spi/src/main/java/org/apache/pinot/spi/config/table/BloomFilterConfig.java", "diffHunk": "@@ -16,38 +16,26 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-package org.apache.pinot.core.bloom;\n+package org.apache.pinot.spi.config.table;\n \n-import java.util.HashMap;\n-import java.util.Map;\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.google.common.base.Preconditions;\n+import org.apache.pinot.spi.config.BaseJsonConfig;\n \n \n-/**\n- * Enum for bloom filter type\n- */\n-public enum BloomFilterType {\n-  // NOTE: Do not change the value of bloom filter type when adding a new type since we are writing/checking type value\n-  // when serializing/deserializing a bloom filter\n-  GUAVA_ON_HEAP(1);\n-\n-  private int _value;\n-  private static Map<Integer, BloomFilterType> _bloomFilterTypeMap = new HashMap<>();\n+public class BloomFilterConfig extends BaseJsonConfig {\n+  public static final double DEFAULT_FPP = 0.05;\n \n-  BloomFilterType(int value) {\n-    _value = value;\n-  }\n-\n-  static {\n-    for (BloomFilterType pageType : BloomFilterType.values()) {\n-      _bloomFilterTypeMap.put(pageType._value, pageType);\n-    }\n-  }\n+  private final double _fpp;\n \n-  public static BloomFilterType valueOf(int pageType) {\n-    return _bloomFilterTypeMap.get(pageType);\n+  @JsonCreator\n+  public BloomFilterConfig(@JsonProperty(value = \"fpp\", required = true) double fpp) {\n+    Preconditions.checkArgument(fpp > 0.0 && fpp < 1.0, \"Invalid fpp (false positive probability): %s\", fpp);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "979828bfbaaeb1a9d4707b53541782fee0bb4eec"}, "originalPosition": 43}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA0NDM3MTgy", "url": "https://github.com/apache/pinot/pull/6118#pullrequestreview-504437182", "createdAt": "2020-10-08T05:25:12Z", "commit": {"oid": "979828bfbaaeb1a9d4707b53541782fee0bb4eec"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA0OTcxMzQx", "url": "https://github.com/apache/pinot/pull/6118#pullrequestreview-504971341", "createdAt": "2020-10-08T16:42:09Z", "commit": {"oid": "979828bfbaaeb1a9d4707b53541782fee0bb4eec"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQxNjo0MjowOVrOHenPXQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQxNjo1NDo1NVrOHentew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTg2MjIzNw==", "bodyText": "Can you make 0, 4 as static final variable? e.g. TYPE_VALUE_OFFSET, VERSION_OFFSET", "url": "https://github.com/apache/pinot/pull/6118#discussion_r501862237", "createdAt": "2020-10-08T16:42:09Z", "author": {"login": "snleee"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/segment/index/readers/bloom/BloomFilterReaderFactory.java", "diffHunk": "@@ -0,0 +1,36 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.core.segment.index.readers.bloom;\n+\n+import com.google.common.base.Preconditions;\n+import org.apache.pinot.core.segment.index.readers.BloomFilterReader;\n+import org.apache.pinot.core.segment.memory.PinotDataBuffer;\n+\n+\n+public class BloomFilterReaderFactory {\n+  private BloomFilterReaderFactory() {\n+  }\n+\n+  public static BloomFilterReader getBloomFilterReader(PinotDataBuffer dataBuffer) {\n+    int typeValue = dataBuffer.getInt(0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "979828bfbaaeb1a9d4707b53541782fee0bb4eec"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTg2NDg4OA==", "bodyText": "Can we add some information for the failing state? We should add some information that the given bloom filter creator's type & value are not supported.", "url": "https://github.com/apache/pinot/pull/6118#discussion_r501864888", "createdAt": "2020-10-08T16:46:27Z", "author": {"login": "snleee"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/segment/index/readers/bloom/BloomFilterReaderFactory.java", "diffHunk": "@@ -0,0 +1,36 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.core.segment.index.readers.bloom;\n+\n+import com.google.common.base.Preconditions;\n+import org.apache.pinot.core.segment.index.readers.BloomFilterReader;\n+import org.apache.pinot.core.segment.memory.PinotDataBuffer;\n+\n+\n+public class BloomFilterReaderFactory {\n+  private BloomFilterReaderFactory() {\n+  }\n+\n+  public static BloomFilterReader getBloomFilterReader(PinotDataBuffer dataBuffer) {\n+    int typeValue = dataBuffer.getInt(0);\n+    int version = dataBuffer.getInt(4);\n+    Preconditions.checkState(typeValue == 1 && version == 1);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "979828bfbaaeb1a9d4707b53541782fee0bb4eec"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTg2OTk0Nw==", "bodyText": "So, our current implementation depends on com.google.common.hash.BloomFilter for bloom filter creation while we do have a custom offheap reader. This means that we need to adjust our offheap reader implementation if Guava changes the internal implementation details.\nI don't think that they will change the underlying behavior often (maybe will never happen); however, we should also consider having our own custom bloom filter creator whose behavior aligns with this reader (basically mimic the existing guava bloom filter creation logic) if the work is not too much. In that case, we won't need any external dependency and don't need to worry about aligning.", "url": "https://github.com/apache/pinot/pull/6118#discussion_r501869947", "createdAt": "2020-10-08T16:54:55Z", "author": {"login": "snleee"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/segment/index/readers/bloom/OffHeapGuavaBloomFilterReader.java", "diffHunk": "@@ -0,0 +1,81 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.core.segment.index.readers.bloom;\n+\n+import com.google.common.base.Preconditions;\n+import com.google.common.primitives.Longs;\n+import org.apache.pinot.core.segment.index.readers.BloomFilterReader;\n+import org.apache.pinot.core.segment.memory.PinotDataBuffer;\n+\n+\n+/**\n+ * Off-heap reader for guava bloom filter.\n+ * <p>The behavior should be aligned with {@link com.google.common.hash.BloomFilter}.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "979828bfbaaeb1a9d4707b53541782fee0bb4eec"}, "originalPosition": 29}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "35f45d8bd72ad58842e32093858cbdd2688b4660", "author": {"user": {"login": "Jackie-Jiang", "name": "Xiaotian (Jackie) Jiang"}}, "url": "https://github.com/apache/pinot/commit/35f45d8bd72ad58842e32093858cbdd2688b4660", "committedDate": "2020-10-08T17:55:17Z", "message": "Implement off-heap bloom filter reader"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "8de5be0a7a3b04f2acffb19f6b84a6712355d2cf", "author": {"user": {"login": "Jackie-Jiang", "name": "Xiaotian (Jackie) Jiang"}}, "url": "https://github.com/apache/pinot/commit/8de5be0a7a3b04f2acffb19f6b84a6712355d2cf", "committedDate": "2020-10-08T17:49:39Z", "message": "Address comments"}, "afterCommit": {"oid": "35f45d8bd72ad58842e32093858cbdd2688b4660", "author": {"user": {"login": "Jackie-Jiang", "name": "Xiaotian (Jackie) Jiang"}}, "url": "https://github.com/apache/pinot/commit/35f45d8bd72ad58842e32093858cbdd2688b4660", "committedDate": "2020-10-08T17:55:17Z", "message": "Implement off-heap bloom filter reader"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA1MDc4MzYw", "url": "https://github.com/apache/pinot/pull/6118#pullrequestreview-505078360", "createdAt": "2020-10-08T18:57:43Z", "commit": {"oid": "35f45d8bd72ad58842e32093858cbdd2688b4660"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1555, "cost": 1, "resetAt": "2021-10-28T17:48:14Z"}}}