{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDczMTk0NzYw", "number": 5917, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxMzoxOToxNVrOEcEJ_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQyMzowMjo1OVrOEcS9mg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3ODYzNjc3OnYy", "diffSide": "RIGHT", "path": "pinot-tools/src/main/java/org/apache/pinot/tools/admin/command/StartServiceManagerCommand.java", "isResolved": false, "comments": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxMzoxOToxNlrOHGXr0Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQwNDo1NjoyMlrOHG71Lg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjQ0MTU1Mw==", "bodyText": "intentionally left controller out of here as it seemed there was some reason to. Otherwise, I'd like to put it in :D", "url": "https://github.com/apache/pinot/pull/5917#discussion_r476441553", "createdAt": "2020-08-25T13:19:16Z", "author": {"login": "codefromthecrypt"}, "path": "pinot-tools/src/main/java/org/apache/pinot/tools/admin/command/StartServiceManagerCommand.java", "diffHunk": "@@ -192,7 +192,20 @@ public boolean execute()\n   }\n \n   private void startPinotService(Map<String, Object> properties) {\n-    startPinotService(ServiceRole.valueOf(properties.get(PINOT_SERVICE_ROLE).toString()), properties);\n+    ServiceRole role = ServiceRole.valueOf(properties.get(PINOT_SERVICE_ROLE).toString());\n+    switch (role) {\n+      // Broker and Server can be started in parallel always\n+      case BROKER:\n+      case SERVER:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "137180f55441295fa8032a0abc2dcf9f79dcac3a"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjgyNzU2MA==", "bodyText": "I dont think there is any reason to not add controller. @fx19880617", "url": "https://github.com/apache/pinot/pull/5917#discussion_r476827560", "createdAt": "2020-08-25T23:01:53Z", "author": {"login": "kishoreg"}, "path": "pinot-tools/src/main/java/org/apache/pinot/tools/admin/command/StartServiceManagerCommand.java", "diffHunk": "@@ -192,7 +192,20 @@ public boolean execute()\n   }\n \n   private void startPinotService(Map<String, Object> properties) {\n-    startPinotService(ServiceRole.valueOf(properties.get(PINOT_SERVICE_ROLE).toString()), properties);\n+    ServiceRole role = ServiceRole.valueOf(properties.get(PINOT_SERVICE_ROLE).toString());\n+    switch (role) {\n+      // Broker and Server can be started in parallel always\n+      case BROKER:\n+      case SERVER:", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjQ0MTU1Mw=="}, "originalCommit": {"oid": "137180f55441295fa8032a0abc2dcf9f79dcac3a"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjkwNDE0OA==", "bodyText": "If it's a new cluster, then controller has to be started first, otherwise broker and server will fail.\nProbably we can add a check to decide if the cluster is already there then start controller in parallel as well.", "url": "https://github.com/apache/pinot/pull/5917#discussion_r476904148", "createdAt": "2020-08-26T00:17:27Z", "author": {"login": "xiangfu0"}, "path": "pinot-tools/src/main/java/org/apache/pinot/tools/admin/command/StartServiceManagerCommand.java", "diffHunk": "@@ -192,7 +192,20 @@ public boolean execute()\n   }\n \n   private void startPinotService(Map<String, Object> properties) {\n-    startPinotService(ServiceRole.valueOf(properties.get(PINOT_SERVICE_ROLE).toString()), properties);\n+    ServiceRole role = ServiceRole.valueOf(properties.get(PINOT_SERVICE_ROLE).toString());\n+    switch (role) {\n+      // Broker and Server can be started in parallel always\n+      case BROKER:\n+      case SERVER:", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjQ0MTU1Mw=="}, "originalCommit": {"oid": "137180f55441295fa8032a0abc2dcf9f79dcac3a"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjkyODIzNw==", "bodyText": "hmm so in this case, if you have multiple CLI args, you can be in the wrong order subtly.. maybe they need to be sorted?", "url": "https://github.com/apache/pinot/pull/5917#discussion_r476928237", "createdAt": "2020-08-26T00:53:56Z", "author": {"login": "codefromthecrypt"}, "path": "pinot-tools/src/main/java/org/apache/pinot/tools/admin/command/StartServiceManagerCommand.java", "diffHunk": "@@ -192,7 +192,20 @@ public boolean execute()\n   }\n \n   private void startPinotService(Map<String, Object> properties) {\n-    startPinotService(ServiceRole.valueOf(properties.get(PINOT_SERVICE_ROLE).toString()), properties);\n+    ServiceRole role = ServiceRole.valueOf(properties.get(PINOT_SERVICE_ROLE).toString());\n+    switch (role) {\n+      // Broker and Server can be started in parallel always\n+      case BROKER:\n+      case SERVER:", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjQ0MTU1Mw=="}, "originalCommit": {"oid": "137180f55441295fa8032a0abc2dcf9f79dcac3a"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjkyOTEzMQ==", "bodyText": "also I don't know how we check if \"cluster is already\" so if you feed me a command I can...", "url": "https://github.com/apache/pinot/pull/5917#discussion_r476929131", "createdAt": "2020-08-26T00:55:16Z", "author": {"login": "codefromthecrypt"}, "path": "pinot-tools/src/main/java/org/apache/pinot/tools/admin/command/StartServiceManagerCommand.java", "diffHunk": "@@ -192,7 +192,20 @@ public boolean execute()\n   }\n \n   private void startPinotService(Map<String, Object> properties) {\n-    startPinotService(ServiceRole.valueOf(properties.get(PINOT_SERVICE_ROLE).toString()), properties);\n+    ServiceRole role = ServiceRole.valueOf(properties.get(PINOT_SERVICE_ROLE).toString());\n+    switch (role) {\n+      // Broker and Server can be started in parallel always\n+      case BROKER:\n+      case SERVER:", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjQ0MTU1Mw=="}, "originalCommit": {"oid": "137180f55441295fa8032a0abc2dcf9f79dcac3a"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Njk0MjI4NQ==", "bodyText": "If user starts broker/server first for a new cluster, then it will fail in-relevant to your changes.", "url": "https://github.com/apache/pinot/pull/5917#discussion_r476942285", "createdAt": "2020-08-26T01:14:32Z", "author": {"login": "xiangfu0"}, "path": "pinot-tools/src/main/java/org/apache/pinot/tools/admin/command/StartServiceManagerCommand.java", "diffHunk": "@@ -192,7 +192,20 @@ public boolean execute()\n   }\n \n   private void startPinotService(Map<String, Object> properties) {\n-    startPinotService(ServiceRole.valueOf(properties.get(PINOT_SERVICE_ROLE).toString()), properties);\n+    ServiceRole role = ServiceRole.valueOf(properties.get(PINOT_SERVICE_ROLE).toString());\n+    switch (role) {\n+      // Broker and Server can be started in parallel always\n+      case BROKER:\n+      case SERVER:", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjQ0MTU1Mw=="}, "originalCommit": {"oid": "137180f55441295fa8032a0abc2dcf9f79dcac3a"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Njk0NDk3OA==", "bodyText": "to check if a cluster is already there, you can create a spectator HelixManager by:\nHelixManager spectatorHelixManager = HelixManagerFactory.getZKHelixManager(_clusterName, instance_id, InstanceType.SPECTATOR, _zkServers);\nspectatorHelixManager.connect();\nspectatorHelixManager.disconnect();\n\nIf it throws exception, then it means the cluster is not there.", "url": "https://github.com/apache/pinot/pull/5917#discussion_r476944978", "createdAt": "2020-08-26T01:18:41Z", "author": {"login": "xiangfu0"}, "path": "pinot-tools/src/main/java/org/apache/pinot/tools/admin/command/StartServiceManagerCommand.java", "diffHunk": "@@ -192,7 +192,20 @@ public boolean execute()\n   }\n \n   private void startPinotService(Map<String, Object> properties) {\n-    startPinotService(ServiceRole.valueOf(properties.get(PINOT_SERVICE_ROLE).toString()), properties);\n+    ServiceRole role = ServiceRole.valueOf(properties.get(PINOT_SERVICE_ROLE).toString());\n+    switch (role) {\n+      // Broker and Server can be started in parallel always\n+      case BROKER:\n+      case SERVER:", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjQ0MTU1Mw=="}, "originalCommit": {"oid": "137180f55441295fa8032a0abc2dcf9f79dcac3a"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzAzMzQxNw==", "bodyText": "In the context of SM I don't know what to use as instance_id", "url": "https://github.com/apache/pinot/pull/5917#discussion_r477033417", "createdAt": "2020-08-26T04:54:59Z", "author": {"login": "codefromthecrypt"}, "path": "pinot-tools/src/main/java/org/apache/pinot/tools/admin/command/StartServiceManagerCommand.java", "diffHunk": "@@ -192,7 +192,20 @@ public boolean execute()\n   }\n \n   private void startPinotService(Map<String, Object> properties) {\n-    startPinotService(ServiceRole.valueOf(properties.get(PINOT_SERVICE_ROLE).toString()), properties);\n+    ServiceRole role = ServiceRole.valueOf(properties.get(PINOT_SERVICE_ROLE).toString());\n+    switch (role) {\n+      // Broker and Server can be started in parallel always\n+      case BROKER:\n+      case SERVER:", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjQ0MTU1Mw=="}, "originalCommit": {"oid": "137180f55441295fa8032a0abc2dcf9f79dcac3a"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzAzMzc3NA==", "bodyText": "nm", "url": "https://github.com/apache/pinot/pull/5917#discussion_r477033774", "createdAt": "2020-08-26T04:56:22Z", "author": {"login": "codefromthecrypt"}, "path": "pinot-tools/src/main/java/org/apache/pinot/tools/admin/command/StartServiceManagerCommand.java", "diffHunk": "@@ -192,7 +192,20 @@ public boolean execute()\n   }\n \n   private void startPinotService(Map<String, Object> properties) {\n-    startPinotService(ServiceRole.valueOf(properties.get(PINOT_SERVICE_ROLE).toString()), properties);\n+    ServiceRole role = ServiceRole.valueOf(properties.get(PINOT_SERVICE_ROLE).toString());\n+    switch (role) {\n+      // Broker and Server can be started in parallel always\n+      case BROKER:\n+      case SERVER:", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjQ0MTU1Mw=="}, "originalCommit": {"oid": "137180f55441295fa8032a0abc2dcf9f79dcac3a"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4MTA2MjY2OnYy", "diffSide": "RIGHT", "path": "pinot-tools/src/main/java/org/apache/pinot/tools/admin/command/StartServiceManagerCommand.java", "isResolved": false, "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQyMzowMjo1OVrOHGvUgg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQwMjo0NDo0OVrOHG5u_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjgyODgwMg==", "bodyText": "Add a log before starting the service and another one after the service is started and measure log the time it took to start", "url": "https://github.com/apache/pinot/pull/5917#discussion_r476828802", "createdAt": "2020-08-25T23:02:59Z", "author": {"login": "kishoreg"}, "path": "pinot-tools/src/main/java/org/apache/pinot/tools/admin/command/StartServiceManagerCommand.java", "diffHunk": "@@ -192,7 +192,20 @@ public boolean execute()\n   }\n \n   private void startPinotService(Map<String, Object> properties) {\n-    startPinotService(ServiceRole.valueOf(properties.get(PINOT_SERVICE_ROLE).toString()), properties);\n+    ServiceRole role = ServiceRole.valueOf(properties.get(PINOT_SERVICE_ROLE).toString());\n+    switch (role) {\n+      // Broker and Server can be started in parallel always\n+      case BROKER:\n+      case SERVER:\n+        new Thread(\"Starting \" + role) {\n+          @Override public void run() {\n+            startPinotService(role, properties);\n+          }\n+        }.start();\n+        break;\n+      default:\n+        startPinotService(role, properties);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "137180f55441295fa8032a0abc2dcf9f79dcac3a"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjkyODkyNw==", "bodyText": "I presume you mean inside startPinotService as it is a blocking command (then useful for both the parallel and sync paths)", "url": "https://github.com/apache/pinot/pull/5917#discussion_r476928927", "createdAt": "2020-08-26T00:54:57Z", "author": {"login": "codefromthecrypt"}, "path": "pinot-tools/src/main/java/org/apache/pinot/tools/admin/command/StartServiceManagerCommand.java", "diffHunk": "@@ -192,7 +192,20 @@ public boolean execute()\n   }\n \n   private void startPinotService(Map<String, Object> properties) {\n-    startPinotService(ServiceRole.valueOf(properties.get(PINOT_SERVICE_ROLE).toString()), properties);\n+    ServiceRole role = ServiceRole.valueOf(properties.get(PINOT_SERVICE_ROLE).toString());\n+    switch (role) {\n+      // Broker and Server can be started in parallel always\n+      case BROKER:\n+      case SERVER:\n+        new Thread(\"Starting \" + role) {\n+          @Override public void run() {\n+            startPinotService(role, properties);\n+          }\n+        }.start();\n+        break;\n+      default:\n+        startPinotService(role, properties);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjgyODgwMg=="}, "originalCommit": {"oid": "137180f55441295fa8032a0abc2dcf9f79dcac3a"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Njk0NjQ3MQ==", "bodyText": "Agreed, it's good to add logs to measure the startup time.", "url": "https://github.com/apache/pinot/pull/5917#discussion_r476946471", "createdAt": "2020-08-26T01:20:47Z", "author": {"login": "xiangfu0"}, "path": "pinot-tools/src/main/java/org/apache/pinot/tools/admin/command/StartServiceManagerCommand.java", "diffHunk": "@@ -192,7 +192,20 @@ public boolean execute()\n   }\n \n   private void startPinotService(Map<String, Object> properties) {\n-    startPinotService(ServiceRole.valueOf(properties.get(PINOT_SERVICE_ROLE).toString()), properties);\n+    ServiceRole role = ServiceRole.valueOf(properties.get(PINOT_SERVICE_ROLE).toString());\n+    switch (role) {\n+      // Broker and Server can be started in parallel always\n+      case BROKER:\n+      case SERVER:\n+        new Thread(\"Starting \" + role) {\n+          @Override public void run() {\n+            startPinotService(role, properties);\n+          }\n+        }.start();\n+        break;\n+      default:\n+        startPinotService(role, properties);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjgyODgwMg=="}, "originalCommit": {"oid": "137180f55441295fa8032a0abc2dcf9f79dcac3a"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Njk3NzI0Ng==", "bodyText": "you want to just time each service command here right? this would be different than composite startup time", "url": "https://github.com/apache/pinot/pull/5917#discussion_r476977246", "createdAt": "2020-08-26T02:06:19Z", "author": {"login": "codefromthecrypt"}, "path": "pinot-tools/src/main/java/org/apache/pinot/tools/admin/command/StartServiceManagerCommand.java", "diffHunk": "@@ -192,7 +192,20 @@ public boolean execute()\n   }\n \n   private void startPinotService(Map<String, Object> properties) {\n-    startPinotService(ServiceRole.valueOf(properties.get(PINOT_SERVICE_ROLE).toString()), properties);\n+    ServiceRole role = ServiceRole.valueOf(properties.get(PINOT_SERVICE_ROLE).toString());\n+    switch (role) {\n+      // Broker and Server can be started in parallel always\n+      case BROKER:\n+      case SERVER:\n+        new Thread(\"Starting \" + role) {\n+          @Override public void run() {\n+            startPinotService(role, properties);\n+          }\n+        }.start();\n+        break;\n+      default:\n+        startPinotService(role, properties);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjgyODgwMg=="}, "originalCommit": {"oid": "137180f55441295fa8032a0abc2dcf9f79dcac3a"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Njk4NDM5MQ==", "bodyText": "Yes, each service. Also log the wall clock time, that will help us understand what\u2019s debug slow starts", "url": "https://github.com/apache/pinot/pull/5917#discussion_r476984391", "createdAt": "2020-08-26T02:17:14Z", "author": {"login": "kishoreg"}, "path": "pinot-tools/src/main/java/org/apache/pinot/tools/admin/command/StartServiceManagerCommand.java", "diffHunk": "@@ -192,7 +192,20 @@ public boolean execute()\n   }\n \n   private void startPinotService(Map<String, Object> properties) {\n-    startPinotService(ServiceRole.valueOf(properties.get(PINOT_SERVICE_ROLE).toString()), properties);\n+    ServiceRole role = ServiceRole.valueOf(properties.get(PINOT_SERVICE_ROLE).toString());\n+    switch (role) {\n+      // Broker and Server can be started in parallel always\n+      case BROKER:\n+      case SERVER:\n+        new Thread(\"Starting \" + role) {\n+          @Override public void run() {\n+            startPinotService(role, properties);\n+          }\n+        }.start();\n+        break;\n+      default:\n+        startPinotService(role, properties);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjgyODgwMg=="}, "originalCommit": {"oid": "137180f55441295fa8032a0abc2dcf9f79dcac3a"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Njk5NTQwMg==", "bodyText": "ok FWIW what I used before was -verbose:gc for similar :P you can see time since startup for each GC event, which are often enough to figure out time like this.\n[0.012s][info][gc] Using G1\n[0.066s][info][gc] Periodic GC disabled\n[0.753s][info][gc] GC(0) Pause Young (Normal) (G1 Evacuation Pause) 12M->2M(256M) 7.433ms\n[1.108s][info][gc] GC(1) Pause Young (Normal) (G1 Evacuation Pause) 12M->3M(256M) 9.164ms\n[1.511s][info][gc] GC(2) Pause Young (Concurrent Start) (Metadata GC Threshold) 15M->4M(256M) 6.252ms\n[1.511s][info][gc] GC(3) Concurrent Cycle\n[1.520s][info][gc] GC(3) Pause Remark 4M->4M(256M) 1.834ms\n[1.523s][info][gc] GC(3) Pause Cleanup 4M->4M(256M) 0.172ms\n[1.525s][info][gc] GC(3) Concurrent Cycle 13.819ms\n\nEx.\n\"starting $role at N.NNNs since launch\"\n\"started/error starting $role at N.NNNs since launch\"", "url": "https://github.com/apache/pinot/pull/5917#discussion_r476995402", "createdAt": "2020-08-26T02:33:16Z", "author": {"login": "codefromthecrypt"}, "path": "pinot-tools/src/main/java/org/apache/pinot/tools/admin/command/StartServiceManagerCommand.java", "diffHunk": "@@ -192,7 +192,20 @@ public boolean execute()\n   }\n \n   private void startPinotService(Map<String, Object> properties) {\n-    startPinotService(ServiceRole.valueOf(properties.get(PINOT_SERVICE_ROLE).toString()), properties);\n+    ServiceRole role = ServiceRole.valueOf(properties.get(PINOT_SERVICE_ROLE).toString());\n+    switch (role) {\n+      // Broker and Server can be started in parallel always\n+      case BROKER:\n+      case SERVER:\n+        new Thread(\"Starting \" + role) {\n+          @Override public void run() {\n+            startPinotService(role, properties);\n+          }\n+        }.start();\n+        break;\n+      default:\n+        startPinotService(role, properties);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjgyODgwMg=="}, "originalCommit": {"oid": "137180f55441295fa8032a0abc2dcf9f79dcac3a"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Njk5OTQwNw==", "bodyText": "Ah nice idea. Go for it!", "url": "https://github.com/apache/pinot/pull/5917#discussion_r476999407", "createdAt": "2020-08-26T02:44:46Z", "author": {"login": "kishoreg"}, "path": "pinot-tools/src/main/java/org/apache/pinot/tools/admin/command/StartServiceManagerCommand.java", "diffHunk": "@@ -192,7 +192,20 @@ public boolean execute()\n   }\n \n   private void startPinotService(Map<String, Object> properties) {\n-    startPinotService(ServiceRole.valueOf(properties.get(PINOT_SERVICE_ROLE).toString()), properties);\n+    ServiceRole role = ServiceRole.valueOf(properties.get(PINOT_SERVICE_ROLE).toString());\n+    switch (role) {\n+      // Broker and Server can be started in parallel always\n+      case BROKER:\n+      case SERVER:\n+        new Thread(\"Starting \" + role) {\n+          @Override public void run() {\n+            startPinotService(role, properties);\n+          }\n+        }.start();\n+        break;\n+      default:\n+        startPinotService(role, properties);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjgyODgwMg=="}, "originalCommit": {"oid": "137180f55441295fa8032a0abc2dcf9f79dcac3a"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Njk5OTQyMA==", "bodyText": "Ah nice idea. Go for it!", "url": "https://github.com/apache/pinot/pull/5917#discussion_r476999420", "createdAt": "2020-08-26T02:44:49Z", "author": {"login": "kishoreg"}, "path": "pinot-tools/src/main/java/org/apache/pinot/tools/admin/command/StartServiceManagerCommand.java", "diffHunk": "@@ -192,7 +192,20 @@ public boolean execute()\n   }\n \n   private void startPinotService(Map<String, Object> properties) {\n-    startPinotService(ServiceRole.valueOf(properties.get(PINOT_SERVICE_ROLE).toString()), properties);\n+    ServiceRole role = ServiceRole.valueOf(properties.get(PINOT_SERVICE_ROLE).toString());\n+    switch (role) {\n+      // Broker and Server can be started in parallel always\n+      case BROKER:\n+      case SERVER:\n+        new Thread(\"Starting \" + role) {\n+          @Override public void run() {\n+            startPinotService(role, properties);\n+          }\n+        }.start();\n+        break;\n+      default:\n+        startPinotService(role, properties);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjgyODgwMg=="}, "originalCommit": {"oid": "137180f55441295fa8032a0abc2dcf9f79dcac3a"}, "originalPosition": 17}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4053, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}