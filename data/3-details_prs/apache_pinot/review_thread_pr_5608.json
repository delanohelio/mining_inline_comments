{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM4NjIwODAx", "number": 5608, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQxNjoyNTowMVrOEI1XPg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQyMDo1Mjo1MlrOEKqFeA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3Njk4MzY2OnYy", "diffSide": "RIGHT", "path": "pinot-spi/src/main/java/org/apache/pinot/spi/env/PinotConfiguration.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQxNjoyNTowMVrOGpCXHQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQwMzozODozMVrOGrVr_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTY4MzQ4NQ==", "bodyText": "java docs please", "url": "https://github.com/apache/pinot/pull/5608#discussion_r445683485", "createdAt": "2020-06-25T16:25:01Z", "author": {"login": "kishoreg"}, "path": "pinot-spi/src/main/java/org/apache/pinot/spi/env/PinotConfiguration.java", "diffHunk": "@@ -0,0 +1,250 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.spi.env;\n+\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import org.apache.commons.configuration.CompositeConfiguration;\n+import org.apache.commons.configuration.Configuration;\n+import org.apache.commons.configuration.ConfigurationException;\n+import org.apache.commons.configuration.ConfigurationUtils;\n+import org.apache.commons.configuration.MapConfiguration;\n+import org.apache.commons.configuration.PropertiesConfiguration;\n+import org.apache.pinot.spi.ingestion.batch.spec.PinotFSSpec;\n+\n+\n+public class PinotConfiguration {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fb7322076c92dedb9e2975fd22ef3db99227e8df"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODA5NzI3Nw==", "bodyText": "+1. @daniellavoie can you list out the new conventions in the java docs? Like what we will do for env variable, properties, etc.", "url": "https://github.com/apache/pinot/pull/5608#discussion_r448097277", "createdAt": "2020-07-01T03:38:31Z", "author": {"login": "jackjlli"}, "path": "pinot-spi/src/main/java/org/apache/pinot/spi/env/PinotConfiguration.java", "diffHunk": "@@ -0,0 +1,250 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.spi.env;\n+\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import org.apache.commons.configuration.CompositeConfiguration;\n+import org.apache.commons.configuration.Configuration;\n+import org.apache.commons.configuration.ConfigurationException;\n+import org.apache.commons.configuration.ConfigurationUtils;\n+import org.apache.commons.configuration.MapConfiguration;\n+import org.apache.commons.configuration.PropertiesConfiguration;\n+import org.apache.pinot.spi.ingestion.batch.spec.PinotFSSpec;\n+\n+\n+public class PinotConfiguration {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTY4MzQ4NQ=="}, "originalCommit": {"oid": "fb7322076c92dedb9e2975fd22ef3db99227e8df"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3NzUxOTU5OnYy", "diffSide": "RIGHT", "path": "pinot-tools/src/main/java/org/apache/pinot/tools/admin/command/StartBrokerCommand.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQxODo1MzoyOVrOGpHutA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQxODo1MzoyOVrOGpHutA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTc3MTQ0NA==", "bodyText": "shouldn't this be returning pinotconfiguration?", "url": "https://github.com/apache/pinot/pull/5608#discussion_r445771444", "createdAt": "2020-06-25T18:53:29Z", "author": {"login": "kishoreg"}, "path": "pinot-tools/src/main/java/org/apache/pinot/tools/admin/command/StartBrokerCommand.java", "diffHunk": "@@ -120,7 +121,7 @@ public boolean execute()\n     }\n   }\n \n-  private Configuration getBrokerConf()\n+  private Map<String, Object> getBrokerConf()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fb7322076c92dedb9e2975fd22ef3db99227e8df"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5Mjg4MzQ1OnYy", "diffSide": "RIGHT", "path": "pinot-spi/src/main/java/org/apache/pinot/spi/env/PinotConfiguration.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQwMzozNjo1NFrOGrVqmQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxMzoyNzo1M1rOGrl4PQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODA5NjkyMQ==", "bodyText": "I saw the property names would be converted to lower cases, that means e.g. controller.upload.onlineToOfflineTimeout will become controller.upload.onlinetoofflinetimeout. Is that intentional?", "url": "https://github.com/apache/pinot/pull/5608#discussion_r448096921", "createdAt": "2020-07-01T03:36:54Z", "author": {"login": "jackjlli"}, "path": "pinot-spi/src/main/java/org/apache/pinot/spi/env/PinotConfiguration.java", "diffHunk": "@@ -0,0 +1,250 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.spi.env;\n+\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import org.apache.commons.configuration.CompositeConfiguration;\n+import org.apache.commons.configuration.Configuration;\n+import org.apache.commons.configuration.ConfigurationException;\n+import org.apache.commons.configuration.ConfigurationUtils;\n+import org.apache.commons.configuration.MapConfiguration;\n+import org.apache.commons.configuration.PropertiesConfiguration;\n+import org.apache.pinot.spi.ingestion.batch.spec.PinotFSSpec;\n+\n+\n+public class PinotConfiguration {\n+  public static final String CONFIG_PATHS_KEY = \"config.paths\";\n+\n+  private final CompositeConfiguration configuration;\n+\n+  public PinotConfiguration() {\n+    this(new HashMap<>());\n+  }\n+\n+  public PinotConfiguration(Configuration baseConfiguration) {\n+    this.configuration =\n+        new CompositeConfiguration(computeConfigurationsFromSources(baseConfiguration, new HashMap<>()));\n+  }\n+\n+  public PinotConfiguration(Map<String, Object> baseProperties) {\n+    this(baseProperties, new HashMap<>());\n+  }\n+\n+  public PinotConfiguration(Map<String, Object> baseProperties, Map<String, String> environmentVariables) {\n+    this.configuration =\n+        new CompositeConfiguration(computeConfigurationsFromSources(baseProperties, environmentVariables));\n+  }\n+\n+  public PinotConfiguration(PinotFSSpec pinotFSSpec) {\n+    this(Optional.ofNullable(pinotFSSpec.getConfigs())\n+        .map(configs -> configs.entrySet().stream().collect(\n+            Collectors.<Entry<String, String>, String, Object> toMap(Entry::getKey, entry -> entry.getValue())))\n+        .orElseGet(() -> new HashMap<>()));\n+  }\n+\n+  /**\n+   * Overwrites a property value in memory.\n+   * \n+   * @param name of the property to append in memory. Applies relaxed binding on the property name.\n+   * @param value to overwrite in memory\n+   * \n+   * @deprecated Configurations should be immutable. Prefer creating a new {@link #PinotConfiguration} with base properties to overwrite properties.\n+   */\n+  public void addProperty(String name, Object value) {\n+    configuration.addProperty(relaxPropertyName(name), value);\n+  }\n+\n+  public PinotConfiguration clone() {\n+    return new PinotConfiguration(ConfigurationUtils.cloneConfiguration(configuration));\n+  }\n+\n+  private static List<Configuration> computeConfigurationsFromSources(Configuration baseConfiguration,\n+      Map<String, String> environmentVariables) {\n+    return computeConfigurationsFromSources(relaxConfigurationKeys(baseConfiguration), environmentVariables);\n+  }\n+\n+  private static List<Configuration> computeConfigurationsFromSources(Map<String, Object> baseProperties,\n+      Map<String, String> environmentVariables) {\n+    Map<String, Object> relaxedBaseProperties = relaxProperties(baseProperties);\n+    Map<String, String> relaxedEnvVariables = relaxEnvironmentVariables(environmentVariables);\n+\n+    Stream<Configuration> propertiesFromConfigPaths = Stream\n+        .of(Optional.ofNullable(relaxedBaseProperties.get(CONFIG_PATHS_KEY)).map(Object::toString),\n+            Optional.ofNullable(relaxedEnvVariables.get(CONFIG_PATHS_KEY)))\n+\n+        .filter(Optional::isPresent).map(Optional::get)\n+\n+        .flatMap(configPaths -> Arrays.stream(configPaths.split(\",\")))\n+\n+        .map(PinotConfiguration::loadProperties);\n+\n+    return Stream.concat(Stream.of(relaxedBaseProperties, relaxedEnvVariables).map(MapConfiguration::new),\n+        propertiesFromConfigPaths).collect(Collectors.toList());\n+  }\n+\n+  public boolean containsKey(String key) {\n+    return configuration.containsKey(relaxPropertyName(key));\n+  }\n+\n+  public List<String> getKeys() {\n+    return CommonsConfigurationUtils.getKeys(configuration);\n+  }\n+\n+  public String getProperty(String name) {\n+    return getProperty(name, configuration);\n+  }\n+\n+  private static String getProperty(String name, Configuration configuration) {\n+    return Optional.of(configuration.getStringArray(relaxPropertyName(name)))\n+\n+        .filter(values -> values.length > 0)\n+\n+        .map(Arrays::stream)\n+\n+        .map(stream -> stream.collect(Collectors.joining(\",\")))\n+\n+        .orElse(null);\n+  }\n+\n+  public <T> T getProperty(String name, Class<T> returnType) {\n+    return getProperty(name, null, returnType);\n+  }\n+\n+  public List<String> getProperty(String name, List<String> defaultValue) {\n+    return Optional\n+        .of(Arrays.stream(configuration.getStringArray(relaxPropertyName(name))).collect(Collectors.toList()))\n+        .filter(list -> !list.isEmpty()).orElse(defaultValue);\n+  }\n+\n+  public Object getRawProperty(String name) {\n+    return getRawProperty(name, null);\n+  }\n+\n+  public Object getRawProperty(String name, Object defaultValue) {\n+    String relaxedPropertyName = relaxPropertyName(name);\n+    if (!configuration.containsKey(relaxedPropertyName)) {\n+      return defaultValue;\n+    }\n+\n+    return configuration.getProperty(relaxedPropertyName);\n+  }\n+\n+  public String getProperty(String name, String defaultValue) {\n+    return getRawProperty(name, defaultValue).toString();\n+  }\n+\n+  private <T> T getProperty(String name, T defaultValue, Class<T> returnType) {\n+    String relaxedPropertyName = relaxPropertyName(name);\n+    if (!configuration.containsKey(relaxedPropertyName)) {\n+      return defaultValue;\n+    }\n+\n+    return PropertyConverter.convert(getRawProperty(name, defaultValue), returnType);\n+  }\n+\n+  public boolean getProperty(String name, boolean defaultValue) {\n+    return getProperty(name, defaultValue, Boolean.class);\n+  }\n+\n+  public int getProperty(String name, int defaultValue) {\n+    return getProperty(name, defaultValue, Integer.class);\n+  }\n+\n+  public long getProperty(String name, long defaultValue) {\n+    return getProperty(name, defaultValue, Long.class);\n+  }\n+\n+  public double getProperty(String name, double defaultValue) {\n+    return getProperty(name, defaultValue, Double.class);\n+  }\n+\n+  private static Configuration loadProperties(String configPath) {\n+    try {\n+      PropertiesConfiguration propertiesConfiguration = new PropertiesConfiguration();\n+\n+      propertiesConfiguration.setIOFactory(new ConfigFilePropertyReaderFactory());\n+      if (configPath.startsWith(\"classpath:\")) {\n+        propertiesConfiguration\n+            .load(PinotConfiguration.class.getResourceAsStream(configPath.substring(\"classpath:\".length())));\n+      } else {\n+        propertiesConfiguration.load(configPath);\n+      }\n+\n+      return propertiesConfiguration;\n+    } catch (ConfigurationException e) {\n+      throw new RuntimeException(\"Could not read properties from \" + configPath, e);\n+    }\n+  }\n+\n+  private static Map<String, Object> relaxConfigurationKeys(Configuration configuration) {\n+    return CommonsConfigurationUtils.getKeysStream(configuration)\n+\n+        .collect(Collectors.toMap(PinotConfiguration::relaxPropertyName, key -> getProperty(key, configuration)));\n+  }\n+\n+  private static Map<String, String> relaxEnvironmentVariables(Map<String, String> environmentVariables) {\n+    return environmentVariables.entrySet().stream().filter(entry -> entry.getKey().startsWith(\"PINOT_\"))\n+        .collect(Collectors.toMap(PinotConfiguration::relaxEnvVarName, Entry::getValue));\n+  }\n+\n+  private static String relaxEnvVarName(Entry<String, String> envVarEntry) {\n+    return envVarEntry.getKey().substring(6).replace(\"_\", \".\").toLowerCase();\n+  }\n+\n+  private static Map<String, Object> relaxProperties(Map<String, Object> properties) {\n+    return properties.entrySet().stream()\n+        .collect(Collectors.toMap(PinotConfiguration::relaxPropertyName, Entry::getValue));\n+  }\n+\n+  private static String relaxPropertyName(Entry<String, Object> propertyEntry) {\n+    return relaxPropertyName(propertyEntry.getKey());\n+  }\n+\n+  private static String relaxPropertyName(String propertyName) {\n+    return propertyName.replace(\"-\", \"\").toLowerCase();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fb7322076c92dedb9e2975fd22ef3db99227e8df"}, "originalPosition": 228}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODM2MjU1Nw==", "bodyText": "This is an intentional behaviour. To support properties provided through environment variables, the relaxed binding mechanism sanitize all properties inserted and extracted from PinotConfiguration. There is no breaking change since a value configured with controller.upload.onlineToOfflineTimeout will be resolvable with the any of the following configs key:\n\ncontroller.upload.onlineToOfflineTimeout\ncontroller.upload.onlinetoofflinetimeout\ncontroller.upload.online-to-offline-timeout\nPINOT_CONTROLLER_UPLOAD_ONLINETOOFFLINETIMEOUT", "url": "https://github.com/apache/pinot/pull/5608#discussion_r448362557", "createdAt": "2020-07-01T13:27:53Z", "author": {"login": "daniellavoie"}, "path": "pinot-spi/src/main/java/org/apache/pinot/spi/env/PinotConfiguration.java", "diffHunk": "@@ -0,0 +1,250 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.spi.env;\n+\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import org.apache.commons.configuration.CompositeConfiguration;\n+import org.apache.commons.configuration.Configuration;\n+import org.apache.commons.configuration.ConfigurationException;\n+import org.apache.commons.configuration.ConfigurationUtils;\n+import org.apache.commons.configuration.MapConfiguration;\n+import org.apache.commons.configuration.PropertiesConfiguration;\n+import org.apache.pinot.spi.ingestion.batch.spec.PinotFSSpec;\n+\n+\n+public class PinotConfiguration {\n+  public static final String CONFIG_PATHS_KEY = \"config.paths\";\n+\n+  private final CompositeConfiguration configuration;\n+\n+  public PinotConfiguration() {\n+    this(new HashMap<>());\n+  }\n+\n+  public PinotConfiguration(Configuration baseConfiguration) {\n+    this.configuration =\n+        new CompositeConfiguration(computeConfigurationsFromSources(baseConfiguration, new HashMap<>()));\n+  }\n+\n+  public PinotConfiguration(Map<String, Object> baseProperties) {\n+    this(baseProperties, new HashMap<>());\n+  }\n+\n+  public PinotConfiguration(Map<String, Object> baseProperties, Map<String, String> environmentVariables) {\n+    this.configuration =\n+        new CompositeConfiguration(computeConfigurationsFromSources(baseProperties, environmentVariables));\n+  }\n+\n+  public PinotConfiguration(PinotFSSpec pinotFSSpec) {\n+    this(Optional.ofNullable(pinotFSSpec.getConfigs())\n+        .map(configs -> configs.entrySet().stream().collect(\n+            Collectors.<Entry<String, String>, String, Object> toMap(Entry::getKey, entry -> entry.getValue())))\n+        .orElseGet(() -> new HashMap<>()));\n+  }\n+\n+  /**\n+   * Overwrites a property value in memory.\n+   * \n+   * @param name of the property to append in memory. Applies relaxed binding on the property name.\n+   * @param value to overwrite in memory\n+   * \n+   * @deprecated Configurations should be immutable. Prefer creating a new {@link #PinotConfiguration} with base properties to overwrite properties.\n+   */\n+  public void addProperty(String name, Object value) {\n+    configuration.addProperty(relaxPropertyName(name), value);\n+  }\n+\n+  public PinotConfiguration clone() {\n+    return new PinotConfiguration(ConfigurationUtils.cloneConfiguration(configuration));\n+  }\n+\n+  private static List<Configuration> computeConfigurationsFromSources(Configuration baseConfiguration,\n+      Map<String, String> environmentVariables) {\n+    return computeConfigurationsFromSources(relaxConfigurationKeys(baseConfiguration), environmentVariables);\n+  }\n+\n+  private static List<Configuration> computeConfigurationsFromSources(Map<String, Object> baseProperties,\n+      Map<String, String> environmentVariables) {\n+    Map<String, Object> relaxedBaseProperties = relaxProperties(baseProperties);\n+    Map<String, String> relaxedEnvVariables = relaxEnvironmentVariables(environmentVariables);\n+\n+    Stream<Configuration> propertiesFromConfigPaths = Stream\n+        .of(Optional.ofNullable(relaxedBaseProperties.get(CONFIG_PATHS_KEY)).map(Object::toString),\n+            Optional.ofNullable(relaxedEnvVariables.get(CONFIG_PATHS_KEY)))\n+\n+        .filter(Optional::isPresent).map(Optional::get)\n+\n+        .flatMap(configPaths -> Arrays.stream(configPaths.split(\",\")))\n+\n+        .map(PinotConfiguration::loadProperties);\n+\n+    return Stream.concat(Stream.of(relaxedBaseProperties, relaxedEnvVariables).map(MapConfiguration::new),\n+        propertiesFromConfigPaths).collect(Collectors.toList());\n+  }\n+\n+  public boolean containsKey(String key) {\n+    return configuration.containsKey(relaxPropertyName(key));\n+  }\n+\n+  public List<String> getKeys() {\n+    return CommonsConfigurationUtils.getKeys(configuration);\n+  }\n+\n+  public String getProperty(String name) {\n+    return getProperty(name, configuration);\n+  }\n+\n+  private static String getProperty(String name, Configuration configuration) {\n+    return Optional.of(configuration.getStringArray(relaxPropertyName(name)))\n+\n+        .filter(values -> values.length > 0)\n+\n+        .map(Arrays::stream)\n+\n+        .map(stream -> stream.collect(Collectors.joining(\",\")))\n+\n+        .orElse(null);\n+  }\n+\n+  public <T> T getProperty(String name, Class<T> returnType) {\n+    return getProperty(name, null, returnType);\n+  }\n+\n+  public List<String> getProperty(String name, List<String> defaultValue) {\n+    return Optional\n+        .of(Arrays.stream(configuration.getStringArray(relaxPropertyName(name))).collect(Collectors.toList()))\n+        .filter(list -> !list.isEmpty()).orElse(defaultValue);\n+  }\n+\n+  public Object getRawProperty(String name) {\n+    return getRawProperty(name, null);\n+  }\n+\n+  public Object getRawProperty(String name, Object defaultValue) {\n+    String relaxedPropertyName = relaxPropertyName(name);\n+    if (!configuration.containsKey(relaxedPropertyName)) {\n+      return defaultValue;\n+    }\n+\n+    return configuration.getProperty(relaxedPropertyName);\n+  }\n+\n+  public String getProperty(String name, String defaultValue) {\n+    return getRawProperty(name, defaultValue).toString();\n+  }\n+\n+  private <T> T getProperty(String name, T defaultValue, Class<T> returnType) {\n+    String relaxedPropertyName = relaxPropertyName(name);\n+    if (!configuration.containsKey(relaxedPropertyName)) {\n+      return defaultValue;\n+    }\n+\n+    return PropertyConverter.convert(getRawProperty(name, defaultValue), returnType);\n+  }\n+\n+  public boolean getProperty(String name, boolean defaultValue) {\n+    return getProperty(name, defaultValue, Boolean.class);\n+  }\n+\n+  public int getProperty(String name, int defaultValue) {\n+    return getProperty(name, defaultValue, Integer.class);\n+  }\n+\n+  public long getProperty(String name, long defaultValue) {\n+    return getProperty(name, defaultValue, Long.class);\n+  }\n+\n+  public double getProperty(String name, double defaultValue) {\n+    return getProperty(name, defaultValue, Double.class);\n+  }\n+\n+  private static Configuration loadProperties(String configPath) {\n+    try {\n+      PropertiesConfiguration propertiesConfiguration = new PropertiesConfiguration();\n+\n+      propertiesConfiguration.setIOFactory(new ConfigFilePropertyReaderFactory());\n+      if (configPath.startsWith(\"classpath:\")) {\n+        propertiesConfiguration\n+            .load(PinotConfiguration.class.getResourceAsStream(configPath.substring(\"classpath:\".length())));\n+      } else {\n+        propertiesConfiguration.load(configPath);\n+      }\n+\n+      return propertiesConfiguration;\n+    } catch (ConfigurationException e) {\n+      throw new RuntimeException(\"Could not read properties from \" + configPath, e);\n+    }\n+  }\n+\n+  private static Map<String, Object> relaxConfigurationKeys(Configuration configuration) {\n+    return CommonsConfigurationUtils.getKeysStream(configuration)\n+\n+        .collect(Collectors.toMap(PinotConfiguration::relaxPropertyName, key -> getProperty(key, configuration)));\n+  }\n+\n+  private static Map<String, String> relaxEnvironmentVariables(Map<String, String> environmentVariables) {\n+    return environmentVariables.entrySet().stream().filter(entry -> entry.getKey().startsWith(\"PINOT_\"))\n+        .collect(Collectors.toMap(PinotConfiguration::relaxEnvVarName, Entry::getValue));\n+  }\n+\n+  private static String relaxEnvVarName(Entry<String, String> envVarEntry) {\n+    return envVarEntry.getKey().substring(6).replace(\"_\", \".\").toLowerCase();\n+  }\n+\n+  private static Map<String, Object> relaxProperties(Map<String, Object> properties) {\n+    return properties.entrySet().stream()\n+        .collect(Collectors.toMap(PinotConfiguration::relaxPropertyName, Entry::getValue));\n+  }\n+\n+  private static String relaxPropertyName(Entry<String, Object> propertyEntry) {\n+    return relaxPropertyName(propertyEntry.getKey());\n+  }\n+\n+  private static String relaxPropertyName(String propertyName) {\n+    return propertyName.replace(\"-\", \"\").toLowerCase();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODA5NjkyMQ=="}, "originalCommit": {"oid": "fb7322076c92dedb9e2975fd22ef3db99227e8df"}, "originalPosition": 228}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5Mjg4OTAzOnYy", "diffSide": "RIGHT", "path": "pinot-server/src/main/java/org/apache/pinot/server/starter/helix/HelixServerStarter.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQwMzo0MDo0MFrOGrVt3A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxNToxNToxMlrOGrqTLg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODA5Nzc1Ng==", "bodyText": "import static org.apache.pinot.common.utils.CommonConstants.Helix.*;", "url": "https://github.com/apache/pinot/pull/5608#discussion_r448097756", "createdAt": "2020-07-01T03:40:40Z", "author": {"login": "jackjlli"}, "path": "pinot-server/src/main/java/org/apache/pinot/server/starter/helix/HelixServerStarter.java", "diffHunk": "@@ -18,19 +18,54 @@\n  */\n package org.apache.pinot.server.starter.helix;\n \n-import com.google.common.base.Preconditions;\n-import com.google.common.collect.ImmutableList;\n+import static org.apache.pinot.common.utils.CommonConstants.Helix.CONFIG_OF_SERVER_FLAPPING_TIME_WINDOW_MS;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fb7322076c92dedb9e2975fd22ef3db99227e8df"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODQzNDk5MA==", "bodyText": "I'm using our pinot code style for eclipse which replaces imports org.apache.pinot.common.utils.CommonConstants.Helix.* to the explicit constant. Should we update the code style template? I typically prefer to stay consistent to what can be automated.", "url": "https://github.com/apache/pinot/pull/5608#discussion_r448434990", "createdAt": "2020-07-01T15:15:12Z", "author": {"login": "daniellavoie"}, "path": "pinot-server/src/main/java/org/apache/pinot/server/starter/helix/HelixServerStarter.java", "diffHunk": "@@ -18,19 +18,54 @@\n  */\n package org.apache.pinot.server.starter.helix;\n \n-import com.google.common.base.Preconditions;\n-import com.google.common.collect.ImmutableList;\n+import static org.apache.pinot.common.utils.CommonConstants.Helix.CONFIG_OF_SERVER_FLAPPING_TIME_WINDOW_MS;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODA5Nzc1Ng=="}, "originalCommit": {"oid": "fb7322076c92dedb9e2975fd22ef3db99227e8df"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5NjA5NDcyOnYy", "diffSide": "RIGHT", "path": "pinot-spi/src/main/java/org/apache/pinot/spi/env/PinotConfiguration.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQyMDo0ODoyOVrOGr04CA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQyMDo0ODoyOVrOGr04CA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODYwODI2NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * <pPinot services may retreived configurations from PinotConfiguration independently from any source of configuration. \n          \n          \n            \n             * <p>\n          \n          \n            \n             * Pinot services may retreived configurations from PinotConfiguration independently from any source of configuration.", "url": "https://github.com/apache/pinot/pull/5608#discussion_r448608264", "createdAt": "2020-07-01T20:48:29Z", "author": {"login": "jackjlli"}, "path": "pinot-spi/src/main/java/org/apache/pinot/spi/env/PinotConfiguration.java", "diffHunk": "@@ -0,0 +1,417 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.spi.env;\n+\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import org.apache.commons.configuration.CompositeConfiguration;\n+import org.apache.commons.configuration.Configuration;\n+import org.apache.commons.configuration.ConfigurationException;\n+import org.apache.commons.configuration.MapConfiguration;\n+import org.apache.commons.configuration.PropertiesConfiguration;\n+import org.apache.pinot.spi.ingestion.batch.spec.PinotFSSpec;\n+\n+\n+/**\n+ * <p>\n+ * Provides a configuration abstraction for Pinot to decouple services from configuration sources and frameworks.\n+ * </p>\n+ * <pPinot services may retreived configurations from PinotConfiguration independently from any source of configuration. ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "01ae67c4064d24df6fab921d26c23ad0990456b7"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5NjEwNzQ0OnYy", "diffSide": "RIGHT", "path": "pinot-spi/src/main/java/org/apache/pinot/spi/env/PinotConfiguration.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQyMDo1Mjo1MlrOGr0_2Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxNjozOTowM1rOGsVaDQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODYxMDI2NQ==", "bodyText": "Thanks for adding this. It'd be good include the priority to this java docs as well, like the one you mentioned in the description:\nThe priority is established as follow: Base properties > Env variables > Config Files", "url": "https://github.com/apache/pinot/pull/5608#discussion_r448610265", "createdAt": "2020-07-01T20:52:52Z", "author": {"login": "jackjlli"}, "path": "pinot-spi/src/main/java/org/apache/pinot/spi/env/PinotConfiguration.java", "diffHunk": "@@ -0,0 +1,417 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.spi.env;\n+\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import org.apache.commons.configuration.CompositeConfiguration;\n+import org.apache.commons.configuration.Configuration;\n+import org.apache.commons.configuration.ConfigurationException;\n+import org.apache.commons.configuration.MapConfiguration;\n+import org.apache.commons.configuration.PropertiesConfiguration;\n+import org.apache.pinot.spi.ingestion.batch.spec.PinotFSSpec;\n+\n+\n+/**\n+ * <p>\n+ * Provides a configuration abstraction for Pinot to decouple services from configuration sources and frameworks.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "01ae67c4064d24df6fab921d26c23ad0990456b7"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTE0MTI2MQ==", "bodyText": "For Phase 1, env variables are not yet taken into account. I planed on introducing this in a future incremental change. I'll make sure to update the javadoc accordinly when it will be effective. Unless you feel this PR is solid enough to introduce env variables imediately.", "url": "https://github.com/apache/pinot/pull/5608#discussion_r449141261", "createdAt": "2020-07-02T16:39:03Z", "author": {"login": "daniellavoie"}, "path": "pinot-spi/src/main/java/org/apache/pinot/spi/env/PinotConfiguration.java", "diffHunk": "@@ -0,0 +1,417 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.spi.env;\n+\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import org.apache.commons.configuration.CompositeConfiguration;\n+import org.apache.commons.configuration.Configuration;\n+import org.apache.commons.configuration.ConfigurationException;\n+import org.apache.commons.configuration.MapConfiguration;\n+import org.apache.commons.configuration.PropertiesConfiguration;\n+import org.apache.pinot.spi.ingestion.batch.spec.PinotFSSpec;\n+\n+\n+/**\n+ * <p>\n+ * Provides a configuration abstraction for Pinot to decouple services from configuration sources and frameworks.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODYxMDI2NQ=="}, "originalCommit": {"oid": "01ae67c4064d24df6fab921d26c23ad0990456b7"}, "originalPosition": 40}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4375, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}