{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ4NTQ4MjI2", "number": 5700, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQyMzo0MDoyMVrOEOeGBA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxODowNjoxNVrOERjyQg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzNjA4NTgwOnYy", "diffSide": "RIGHT", "path": "pinot-core/src/main/java/org/apache/pinot/core/data/manager/realtime/LLRealtimeSegmentDataManager.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQyMzo0MDoyMVrOGxpEgw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQyMToxMzoxOVrOG1J-1w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDcwNjMwNw==", "bodyText": "Move this logic into the SegmentCommitterFactory class. Instantiate the class with tableConfig\nChange the factory to have a single call to create committer, with params and isSplit. The uploader can be constructed inside the factory (in the split case).", "url": "https://github.com/apache/pinot/pull/5700#discussion_r454706307", "createdAt": "2020-07-14T23:40:21Z", "author": {"login": "mcvsubbu"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/data/manager/realtime/LLRealtimeSegmentDataManager.java", "diffHunk": "@@ -846,16 +846,22 @@ protected boolean commitSegment(String controllerVipUrl, boolean isSplitCommit)\n     if (isSplitCommit) {\n       // TODO: make segment uploader used in the segment committer configurable.\n       SegmentUploader segmentUploader;\n-      try {\n-        segmentUploader =\n-            new Server2ControllerSegmentUploader(segmentLogger, _protocolHandler.getFileUploadDownloadClient(),\n-                _protocolHandler.getSegmentCommitUploadURL(params, controllerVipUrl), _segmentNameStr,\n-                ServerSegmentCompletionProtocolHandler.getSegmentUploadRequestTimeoutMs(), _serverMetrics);\n-      } catch (URISyntaxException e) {\n-        segmentLogger.error(\"Segment commit upload url error: \", e);\n-        return SegmentCompletionProtocol.RESP_NOT_SENT;\n+      if (this._tableConfig.getValidationConfig().getPeerSegmentDownloadScheme() != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "06b915c3813a098ffd58f921d7272fecdef609f0"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODM5MTI1NQ==", "bodyText": "Done. thanks for the suggestion.. Much cleaner codes now.", "url": "https://github.com/apache/pinot/pull/5700#discussion_r458391255", "createdAt": "2020-07-21T21:13:19Z", "author": {"login": "chenboat"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/data/manager/realtime/LLRealtimeSegmentDataManager.java", "diffHunk": "@@ -846,16 +846,22 @@ protected boolean commitSegment(String controllerVipUrl, boolean isSplitCommit)\n     if (isSplitCommit) {\n       // TODO: make segment uploader used in the segment committer configurable.\n       SegmentUploader segmentUploader;\n-      try {\n-        segmentUploader =\n-            new Server2ControllerSegmentUploader(segmentLogger, _protocolHandler.getFileUploadDownloadClient(),\n-                _protocolHandler.getSegmentCommitUploadURL(params, controllerVipUrl), _segmentNameStr,\n-                ServerSegmentCompletionProtocolHandler.getSegmentUploadRequestTimeoutMs(), _serverMetrics);\n-      } catch (URISyntaxException e) {\n-        segmentLogger.error(\"Segment commit upload url error: \", e);\n-        return SegmentCompletionProtocol.RESP_NOT_SENT;\n+      if (this._tableConfig.getValidationConfig().getPeerSegmentDownloadScheme() != null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDcwNjMwNw=="}, "originalCommit": {"oid": "06b915c3813a098ffd58f921d7272fecdef609f0"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzNjEwMTY1OnYy", "diffSide": "RIGHT", "path": "pinot-core/src/main/java/org/apache/pinot/core/data/manager/realtime/PeerSchemeSplitSegmentCommitter.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQyMzo0NzozNFrOGxpNMg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQyMToxMzoyNVrOG1J_DQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDcwODUzMA==", "bodyText": "Please put \"peer\" as a scheme in CommonConstants and refer to it everywhere. Please change PinotLLCRealtimeSegmentManager, and the tests SegmentCompletionTest, and PinotLLCRealtimeSegmentManagerTest", "url": "https://github.com/apache/pinot/pull/5700#discussion_r454708530", "createdAt": "2020-07-14T23:47:34Z", "author": {"login": "mcvsubbu"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/data/manager/realtime/PeerSchemeSplitSegmentCommitter.java", "diffHunk": "@@ -0,0 +1,48 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.core.data.manager.realtime;\n+\n+import java.io.File;\n+import java.net.URI;\n+import org.apache.pinot.common.protocols.SegmentCompletionProtocol;\n+import org.apache.pinot.common.utils.LLCSegmentName;\n+import org.apache.pinot.server.realtime.ServerSegmentCompletionProtocolHandler;\n+import org.slf4j.Logger;\n+\n+\n+public class PeerSchemeSplitSegmentCommitter extends SplitSegmentCommitter {\n+  public PeerSchemeSplitSegmentCommitter(Logger segmentLogger, ServerSegmentCompletionProtocolHandler protocolHandler,\n+      SegmentCompletionProtocol.Request.Params params, SegmentUploader segmentUploader) {\n+    super(segmentLogger, protocolHandler, params, segmentUploader);\n+  }\n+\n+  // Always return true even if the segment upload fails and return null uri.\n+  // If the segment upload fails, put peer:///segment_name in the segment location to notify the controller it is a\n+  // peer download scheme.\n+  protected boolean uploadSegment(File segmentTarFile, SegmentUploader segmentUploader,\n+      SegmentCompletionProtocol.Request.Params params) {\n+    URI segmentLocation = segmentUploader.uploadSegment(segmentTarFile, new LLCSegmentName(params.getSegmentName()));\n+    if (segmentLocation != null) {\n+      params.withSegmentLocation(segmentLocation.toString());\n+    } else {\n+      params.withSegmentLocation(\"peer:///\" + params.getSegmentName());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "06b915c3813a098ffd58f921d7272fecdef609f0"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODM5MTMwOQ==", "bodyText": "Done.", "url": "https://github.com/apache/pinot/pull/5700#discussion_r458391309", "createdAt": "2020-07-21T21:13:25Z", "author": {"login": "chenboat"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/data/manager/realtime/PeerSchemeSplitSegmentCommitter.java", "diffHunk": "@@ -0,0 +1,48 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.core.data.manager.realtime;\n+\n+import java.io.File;\n+import java.net.URI;\n+import org.apache.pinot.common.protocols.SegmentCompletionProtocol;\n+import org.apache.pinot.common.utils.LLCSegmentName;\n+import org.apache.pinot.server.realtime.ServerSegmentCompletionProtocolHandler;\n+import org.slf4j.Logger;\n+\n+\n+public class PeerSchemeSplitSegmentCommitter extends SplitSegmentCommitter {\n+  public PeerSchemeSplitSegmentCommitter(Logger segmentLogger, ServerSegmentCompletionProtocolHandler protocolHandler,\n+      SegmentCompletionProtocol.Request.Params params, SegmentUploader segmentUploader) {\n+    super(segmentLogger, protocolHandler, params, segmentUploader);\n+  }\n+\n+  // Always return true even if the segment upload fails and return null uri.\n+  // If the segment upload fails, put peer:///segment_name in the segment location to notify the controller it is a\n+  // peer download scheme.\n+  protected boolean uploadSegment(File segmentTarFile, SegmentUploader segmentUploader,\n+      SegmentCompletionProtocol.Request.Params params) {\n+    URI segmentLocation = segmentUploader.uploadSegment(segmentTarFile, new LLCSegmentName(params.getSegmentName()));\n+    if (segmentLocation != null) {\n+      params.withSegmentLocation(segmentLocation.toString());\n+    } else {\n+      params.withSegmentLocation(\"peer:///\" + params.getSegmentName());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDcwODUzMA=="}, "originalCommit": {"oid": "06b915c3813a098ffd58f921d7272fecdef609f0"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2NDk4MjA4OnYy", "diffSide": "RIGHT", "path": "pinot-core/src/main/java/org/apache/pinot/core/data/manager/realtime/SegmentCommitterFactory.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQyMToyOTozMFrOG106pw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxOTozNToyMVrOG2Yxiw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTA5NDY5NQ==", "bodyText": "Can you add a TODO here? It looks odd that we upload to PinotFS if peer download scheme is set.\nWe should have an independent config of where to upload segments.  I am not sure if this config should be:\n(a) A table config (b) A server level config (c) Upload to whatever the controller asks us to do (so then becomes a cluster or controller level config).\nI like (c) ,and definitely do not want (a) for this.\nI would like to hear from you and @npawar and others if they have an opinion.\nFor now, this is ok since you need to move along with your implementation.", "url": "https://github.com/apache/pinot/pull/5700#discussion_r459094695", "createdAt": "2020-07-22T21:29:30Z", "author": {"login": "mcvsubbu"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/data/manager/realtime/SegmentCommitterFactory.java", "diffHunk": "@@ -29,18 +33,35 @@\n public class SegmentCommitterFactory {\n   private static Logger LOGGER;\n   private final ServerSegmentCompletionProtocolHandler _protocolHandler;\n+  private final TableConfig _tableConfig;\n+  private final ServerMetrics _serverMetrics;\n+  private final IndexLoadingConfig _indexLoadingConfig;\n \n-  public SegmentCommitterFactory(Logger segmentLogger, ServerSegmentCompletionProtocolHandler protocolHandler) {\n+  public SegmentCommitterFactory(Logger segmentLogger, ServerSegmentCompletionProtocolHandler protocolHandler,\n+      TableConfig tableConfig, IndexLoadingConfig indexLoadingConfig, ServerMetrics serverMetrics) {\n     LOGGER = segmentLogger;\n     _protocolHandler = protocolHandler;\n+    _tableConfig = tableConfig;\n+    _indexLoadingConfig = indexLoadingConfig;\n+    _serverMetrics = serverMetrics;\n   }\n \n-  public SegmentCommitter createSplitSegmentCommitter(SegmentCompletionProtocol.Request.Params params,\n-      SegmentUploader segmentUploader) {\n-    return new SplitSegmentCommitter(LOGGER, _protocolHandler, params, segmentUploader);\n-  }\n+  public SegmentCommitter createSegmentCommitter(boolean isSplitCommit, SegmentCompletionProtocol.Request.Params params,\n+      String controllerVipUrl) throws URISyntaxException {\n+    if (!isSplitCommit) {\n+      return new DefaultSegmentCommitter(LOGGER, _protocolHandler, params);\n+    }\n+    SegmentUploader segmentUploader;\n+    if (_tableConfig.getValidationConfig().getPeerSegmentDownloadScheme() != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e4240e99189c2bd25e4bee48f8be15b50a74212a"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTY3MDcyOA==", "bodyText": "done.", "url": "https://github.com/apache/pinot/pull/5700#discussion_r459670728", "createdAt": "2020-07-23T19:13:46Z", "author": {"login": "chenboat"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/data/manager/realtime/SegmentCommitterFactory.java", "diffHunk": "@@ -29,18 +33,35 @@\n public class SegmentCommitterFactory {\n   private static Logger LOGGER;\n   private final ServerSegmentCompletionProtocolHandler _protocolHandler;\n+  private final TableConfig _tableConfig;\n+  private final ServerMetrics _serverMetrics;\n+  private final IndexLoadingConfig _indexLoadingConfig;\n \n-  public SegmentCommitterFactory(Logger segmentLogger, ServerSegmentCompletionProtocolHandler protocolHandler) {\n+  public SegmentCommitterFactory(Logger segmentLogger, ServerSegmentCompletionProtocolHandler protocolHandler,\n+      TableConfig tableConfig, IndexLoadingConfig indexLoadingConfig, ServerMetrics serverMetrics) {\n     LOGGER = segmentLogger;\n     _protocolHandler = protocolHandler;\n+    _tableConfig = tableConfig;\n+    _indexLoadingConfig = indexLoadingConfig;\n+    _serverMetrics = serverMetrics;\n   }\n \n-  public SegmentCommitter createSplitSegmentCommitter(SegmentCompletionProtocol.Request.Params params,\n-      SegmentUploader segmentUploader) {\n-    return new SplitSegmentCommitter(LOGGER, _protocolHandler, params, segmentUploader);\n-  }\n+  public SegmentCommitter createSegmentCommitter(boolean isSplitCommit, SegmentCompletionProtocol.Request.Params params,\n+      String controllerVipUrl) throws URISyntaxException {\n+    if (!isSplitCommit) {\n+      return new DefaultSegmentCommitter(LOGGER, _protocolHandler, params);\n+    }\n+    SegmentUploader segmentUploader;\n+    if (_tableConfig.getValidationConfig().getPeerSegmentDownloadScheme() != null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTA5NDY5NQ=="}, "originalCommit": {"oid": "e4240e99189c2bd25e4bee48f8be15b50a74212a"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTY4MjE4Nw==", "bodyText": "Yes. The current way is not done cleanly. I will think more about this and fix it in a follow up discussion and PR.\nWhat we talk about here is how to construct different types of split committers as well as segment loaders.  server level config is a viable option. For the controller response option, the downside is that it will affect all servers behavior in a cluster.", "url": "https://github.com/apache/pinot/pull/5700#discussion_r459682187", "createdAt": "2020-07-23T19:35:21Z", "author": {"login": "chenboat"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/data/manager/realtime/SegmentCommitterFactory.java", "diffHunk": "@@ -29,18 +33,35 @@\n public class SegmentCommitterFactory {\n   private static Logger LOGGER;\n   private final ServerSegmentCompletionProtocolHandler _protocolHandler;\n+  private final TableConfig _tableConfig;\n+  private final ServerMetrics _serverMetrics;\n+  private final IndexLoadingConfig _indexLoadingConfig;\n \n-  public SegmentCommitterFactory(Logger segmentLogger, ServerSegmentCompletionProtocolHandler protocolHandler) {\n+  public SegmentCommitterFactory(Logger segmentLogger, ServerSegmentCompletionProtocolHandler protocolHandler,\n+      TableConfig tableConfig, IndexLoadingConfig indexLoadingConfig, ServerMetrics serverMetrics) {\n     LOGGER = segmentLogger;\n     _protocolHandler = protocolHandler;\n+    _tableConfig = tableConfig;\n+    _indexLoadingConfig = indexLoadingConfig;\n+    _serverMetrics = serverMetrics;\n   }\n \n-  public SegmentCommitter createSplitSegmentCommitter(SegmentCompletionProtocol.Request.Params params,\n-      SegmentUploader segmentUploader) {\n-    return new SplitSegmentCommitter(LOGGER, _protocolHandler, params, segmentUploader);\n-  }\n+  public SegmentCommitter createSegmentCommitter(boolean isSplitCommit, SegmentCompletionProtocol.Request.Params params,\n+      String controllerVipUrl) throws URISyntaxException {\n+    if (!isSplitCommit) {\n+      return new DefaultSegmentCommitter(LOGGER, _protocolHandler, params);\n+    }\n+    SegmentUploader segmentUploader;\n+    if (_tableConfig.getValidationConfig().getPeerSegmentDownloadScheme() != null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTA5NDY5NQ=="}, "originalCommit": {"oid": "e4240e99189c2bd25e4bee48f8be15b50a74212a"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2NDk4OTQ2OnYy", "diffSide": "RIGHT", "path": "pinot-core/src/main/java/org/apache/pinot/core/data/manager/realtime/SplitSegmentCommitter.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQyMTozMTo1N1rOG10_Ww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxOToxMjo1MlrOG2YC6Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTA5NTg5OQ==", "bodyText": "Why are we changing request parameters while indicating response? Can we remove this?", "url": "https://github.com/apache/pinot/pull/5700#discussion_r459095899", "createdAt": "2020-07-22T21:31:57Z", "author": {"login": "mcvsubbu"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/data/manager/realtime/SplitSegmentCommitter.java", "diffHunk": "@@ -70,4 +68,15 @@ public SplitSegmentCommitter(Logger segmentLogger, ServerSegmentCompletionProtoc\n     }\n     return commitEndResponse;\n   }\n+\n+  // Return false iff the segment upload fails.\n+  protected boolean uploadSegment(File segmentTarFile, SegmentUploader segmentUploader,\n+      SegmentCompletionProtocol.Request.Params params) {\n+    URI segmentLocation = segmentUploader.uploadSegment(segmentTarFile, new LLCSegmentName(params.getSegmentName()));\n+    if (segmentLocation != null) {\n+      params.withSegmentLocation(segmentLocation.toString());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e4240e99189c2bd25e4bee48f8be15b50a74212a"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTYzMDIxNQ==", "bodyText": "done together with change with the method return type.", "url": "https://github.com/apache/pinot/pull/5700#discussion_r459630215", "createdAt": "2020-07-23T18:00:05Z", "author": {"login": "chenboat"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/data/manager/realtime/SplitSegmentCommitter.java", "diffHunk": "@@ -70,4 +68,15 @@ public SplitSegmentCommitter(Logger segmentLogger, ServerSegmentCompletionProtoc\n     }\n     return commitEndResponse;\n   }\n+\n+  // Return false iff the segment upload fails.\n+  protected boolean uploadSegment(File segmentTarFile, SegmentUploader segmentUploader,\n+      SegmentCompletionProtocol.Request.Params params) {\n+    URI segmentLocation = segmentUploader.uploadSegment(segmentTarFile, new LLCSegmentName(params.getSegmentName()));\n+    if (segmentLocation != null) {\n+      params.withSegmentLocation(segmentLocation.toString());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTA5NTg5OQ=="}, "originalCommit": {"oid": "e4240e99189c2bd25e4bee48f8be15b50a74212a"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTY3MDI0OQ==", "bodyText": "Done.", "url": "https://github.com/apache/pinot/pull/5700#discussion_r459670249", "createdAt": "2020-07-23T19:12:52Z", "author": {"login": "chenboat"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/data/manager/realtime/SplitSegmentCommitter.java", "diffHunk": "@@ -70,4 +68,15 @@ public SplitSegmentCommitter(Logger segmentLogger, ServerSegmentCompletionProtoc\n     }\n     return commitEndResponse;\n   }\n+\n+  // Return false iff the segment upload fails.\n+  protected boolean uploadSegment(File segmentTarFile, SegmentUploader segmentUploader,\n+      SegmentCompletionProtocol.Request.Params params) {\n+    URI segmentLocation = segmentUploader.uploadSegment(segmentTarFile, new LLCSegmentName(params.getSegmentName()));\n+    if (segmentLocation != null) {\n+      params.withSegmentLocation(segmentLocation.toString());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTA5NTg5OQ=="}, "originalCommit": {"oid": "e4240e99189c2bd25e4bee48f8be15b50a74212a"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2NDk5NjAzOnYy", "diffSide": "RIGHT", "path": "pinot-core/src/main/java/org/apache/pinot/core/data/manager/realtime/PeerSchemeSplitSegmentCommitter.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQyMTozNDoxOVrOG11DeA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxODowMTozNFrOG2VpoA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTA5Njk1Mg==", "bodyText": "Does returning URL here make sense? (null if failed)", "url": "https://github.com/apache/pinot/pull/5700#discussion_r459096952", "createdAt": "2020-07-22T21:34:19Z", "author": {"login": "mcvsubbu"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/data/manager/realtime/PeerSchemeSplitSegmentCommitter.java", "diffHunk": "@@ -0,0 +1,51 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.core.data.manager.realtime;\n+\n+import java.io.File;\n+import java.net.URI;\n+import org.apache.pinot.common.protocols.SegmentCompletionProtocol;\n+import org.apache.pinot.common.utils.CommonConstants;\n+import org.apache.pinot.common.utils.LLCSegmentName;\n+import org.apache.pinot.common.utils.StringUtil;\n+import org.apache.pinot.server.realtime.ServerSegmentCompletionProtocolHandler;\n+import org.slf4j.Logger;\n+\n+\n+public class PeerSchemeSplitSegmentCommitter extends SplitSegmentCommitter {\n+  public PeerSchemeSplitSegmentCommitter(Logger segmentLogger, ServerSegmentCompletionProtocolHandler protocolHandler,\n+      SegmentCompletionProtocol.Request.Params params, SegmentUploader segmentUploader) {\n+    super(segmentLogger, protocolHandler, params, segmentUploader);\n+  }\n+\n+  // Always return true even if the segment upload fails and return null uri.\n+  // If the segment upload fails, put peer:///segment_name in the segment location to notify the controller it is a\n+  // peer download scheme.\n+  protected boolean uploadSegment(File segmentTarFile, SegmentUploader segmentUploader,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e4240e99189c2bd25e4bee48f8be15b50a74212a"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTYzMTAwOA==", "bodyText": "returning a URL string is better imo. all the url construction has been done by the underlying segment uploader class.", "url": "https://github.com/apache/pinot/pull/5700#discussion_r459631008", "createdAt": "2020-07-23T18:01:34Z", "author": {"login": "chenboat"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/data/manager/realtime/PeerSchemeSplitSegmentCommitter.java", "diffHunk": "@@ -0,0 +1,51 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.core.data.manager.realtime;\n+\n+import java.io.File;\n+import java.net.URI;\n+import org.apache.pinot.common.protocols.SegmentCompletionProtocol;\n+import org.apache.pinot.common.utils.CommonConstants;\n+import org.apache.pinot.common.utils.LLCSegmentName;\n+import org.apache.pinot.common.utils.StringUtil;\n+import org.apache.pinot.server.realtime.ServerSegmentCompletionProtocolHandler;\n+import org.slf4j.Logger;\n+\n+\n+public class PeerSchemeSplitSegmentCommitter extends SplitSegmentCommitter {\n+  public PeerSchemeSplitSegmentCommitter(Logger segmentLogger, ServerSegmentCompletionProtocolHandler protocolHandler,\n+      SegmentCompletionProtocol.Request.Params params, SegmentUploader segmentUploader) {\n+    super(segmentLogger, protocolHandler, params, segmentUploader);\n+  }\n+\n+  // Always return true even if the segment upload fails and return null uri.\n+  // If the segment upload fails, put peer:///segment_name in the segment location to notify the controller it is a\n+  // peer download scheme.\n+  protected boolean uploadSegment(File segmentTarFile, SegmentUploader segmentUploader,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTA5Njk1Mg=="}, "originalCommit": {"oid": "e4240e99189c2bd25e4bee48f8be15b50a74212a"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2ODQ3NTU0OnYy", "diffSide": "RIGHT", "path": "pinot-common/src/main/java/org/apache/pinot/common/utils/CommonConstants.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxODowNjoxNVrOG2VzqA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxOTo1MToyM1rOG2ZQGA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTYzMzU3Ng==", "bodyText": "Unused, please remove", "url": "https://github.com/apache/pinot/pull/5700#discussion_r459633576", "createdAt": "2020-07-23T18:06:15Z", "author": {"login": "mcvsubbu"}, "path": "pinot-common/src/main/java/org/apache/pinot/common/utils/CommonConstants.java", "diffHunk": "@@ -187,6 +187,7 @@\n         \"pinot.server.instance.realtime.alloc.offheap.direct\";\n     public static final String PREFIX_OF_CONFIG_OF_PINOT_FS_FACTORY = \"pinot.server.storage.factory\";\n     public static final String PREFIX_OF_CONFIG_OF_PINOT_CRYPTER = \"pinot.server.crypter\";\n+    public static final String CONFIG_OF_SEGMENT_STORE_URI= \"pinot.server.instance.segment.store.uri\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a30553eed105c2a81b27d73d32e86140a9a132f7"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTY5MDAwOA==", "bodyText": "good catch. done.", "url": "https://github.com/apache/pinot/pull/5700#discussion_r459690008", "createdAt": "2020-07-23T19:51:23Z", "author": {"login": "chenboat"}, "path": "pinot-common/src/main/java/org/apache/pinot/common/utils/CommonConstants.java", "diffHunk": "@@ -187,6 +187,7 @@\n         \"pinot.server.instance.realtime.alloc.offheap.direct\";\n     public static final String PREFIX_OF_CONFIG_OF_PINOT_FS_FACTORY = \"pinot.server.storage.factory\";\n     public static final String PREFIX_OF_CONFIG_OF_PINOT_CRYPTER = \"pinot.server.crypter\";\n+    public static final String CONFIG_OF_SEGMENT_STORE_URI= \"pinot.server.instance.segment.store.uri\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTYzMzU3Ng=="}, "originalCommit": {"oid": "a30553eed105c2a81b27d73d32e86140a9a132f7"}, "originalPosition": 4}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4107, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}