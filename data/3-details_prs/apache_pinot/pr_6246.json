{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE2NTQ2MzI4", "number": 6246, "title": "Adding validation for jsonExtractKey and jsonExtractScalar functions", "bodyText": "Description\nAdding validation for json_extract_key and json_extract_scalar functions during sql compilation phase to avoid empty response\nIf user mistakenly put double quote on a the json key argument, say jsonExtractScalar(myMapStr,\"$.k1\", 'STRING'), then query parser recognizes the second argument $.k1 as an identifier.  Then during segment pruning phase, the DataSchemaSegmentPruner prunes all the segments as there is no column matches $.k1. Then user will get an empty results.\nThis also means that we cannot error out this inside the corresponding functions, as these function won't be initialized at all.\nAdding a function validation method during compilation time will allow us to find out the expression type mismatch then error out earlier and direct more comprehensive errors and guides to users.\nSample output would be:", "createdAt": "2020-11-06T06:51:33Z", "url": "https://github.com/apache/pinot/pull/6246", "merged": true, "mergeCommit": {"oid": "5225ce8d82f59afdcd56aba9bbe6ae4cfe021160"}, "closed": true, "closedAt": "2021-02-18T02:08:27Z", "author": {"login": "xiangfu0"}, "timelineItems": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdZzAyxABqjM5NjYxNjgyNzY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABd7KYE9gBqjQzNDQyMDg1NjA=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "1ba42e8f9ea4d96b3515776b7c1c573a9ebbe914", "author": {"user": {"login": "xiangfu0", "name": "Xiang Fu"}}, "url": "https://github.com/apache/pinot/commit/1ba42e8f9ea4d96b3515776b7c1c573a9ebbe914", "committedDate": "2020-11-06T06:45:49Z", "message": "Adding validation for json_extract_key and json_extract_scalar functions during sql compilation phase to avoid empty response"}, "afterCommit": {"oid": "53807b89a020adddefd5a0ffcf55345111b847b7", "author": {"user": {"login": "xiangfu0", "name": "Xiang Fu"}}, "url": "https://github.com/apache/pinot/commit/53807b89a020adddefd5a0ffcf55345111b847b7", "committedDate": "2020-11-06T08:51:11Z", "message": "Adding validation for json_extract_key and json_extract_scalar functions during sql compilation phase to avoid empty response"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI5NjQ0MzI1", "url": "https://github.com/apache/pinot/pull/6246#pullrequestreview-529644325", "createdAt": "2020-11-13T01:49:22Z", "commit": {"oid": "53807b89a020adddefd5a0ffcf55345111b847b7"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTkyNTg1NTg1", "url": "https://github.com/apache/pinot/pull/6246#pullrequestreview-592585585", "createdAt": "2021-02-17T20:09:14Z", "commit": {"oid": "53807b89a020adddefd5a0ffcf55345111b847b7"}, "state": "APPROVED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0xN1QyMDowOToxNFrOInI3Cw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0xN1QyMDoxNToxNVrOInJDhQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NzkxMDUzOQ==", "bodyText": "Remove underscore from the function name to match json_extract_scalar and json_extract_key. Please also add some test cases for function name with underscore", "url": "https://github.com/apache/pinot/pull/6246#discussion_r577910539", "createdAt": "2021-02-17T20:09:14Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-common/src/main/java/org/apache/pinot/sql/parsers/CalciteSqlParser.java", "diffHunk": "@@ -902,11 +902,47 @@ private static Expression compileFunctionExpression(SqlBasicCall functionNode) {\n         operands.add(toExpression(childNode));\n       }\n     }\n+    validateFunction(functionName, operands);\n     Expression functionExpression = RequestUtils.getFunctionExpression(functionName);\n     functionExpression.getFunctionCall().setOperands(operands);\n     return functionExpression;\n   }\n \n+  private static void validateFunction(String functionName, List<Expression> operands) {\n+    switch (functionName.toUpperCase()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "53807b89a020adddefd5a0ffcf55345111b847b7"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NzkxMTI5Mw==", "bodyText": "Also validate the optional fourth argument?", "url": "https://github.com/apache/pinot/pull/6246#discussion_r577911293", "createdAt": "2021-02-17T20:10:43Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-common/src/main/java/org/apache/pinot/sql/parsers/CalciteSqlParser.java", "diffHunk": "@@ -902,11 +902,47 @@ private static Expression compileFunctionExpression(SqlBasicCall functionNode) {\n         operands.add(toExpression(childNode));\n       }\n     }\n+    validateFunction(functionName, operands);\n     Expression functionExpression = RequestUtils.getFunctionExpression(functionName);\n     functionExpression.getFunctionCall().setOperands(operands);\n     return functionExpression;\n   }\n \n+  private static void validateFunction(String functionName, List<Expression> operands) {\n+    switch (functionName.toUpperCase()) {\n+      case \"JSONEXTRACTSCALAR\":\n+        validateJsonExtractScalarFunction(functionName, operands);\n+        break;\n+      case \"JSONEXTRACTKEY\":\n+        validateJsonExtractKeyFunction(functionName, operands);\n+        break;\n+    }\n+  }\n+\n+  private static void validateJsonExtractScalarFunction(String functionName, List<Expression> operands) {\n+    // Check that there are exactly 3 or 4 arguments\n+    if (operands.size() < 3 || operands.size() > 4) {\n+      throw new SqlCompilationException(\n+          \"Expected 3/4 arguments for transform function: jsonExtractScalar(jsonFieldName, 'jsonPath', 'resultsType', ['defaultValue'])\");\n+    }\n+    if (!operands.get(1).isSetLiteral() || !operands.get(2).isSetLiteral()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "53807b89a020adddefd5a0ffcf55345111b847b7"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NzkxMTY0Ng==", "bodyText": "(Critical)\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                if (!operands.get(1).isSetLiteral() || !operands.get(2).isSetLiteral()) {\n          \n          \n            \n                if (!operands.get(1).isSetLiteral()) {", "url": "https://github.com/apache/pinot/pull/6246#discussion_r577911646", "createdAt": "2021-02-17T20:11:22Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-common/src/main/java/org/apache/pinot/sql/parsers/CalciteSqlParser.java", "diffHunk": "@@ -902,11 +902,47 @@ private static Expression compileFunctionExpression(SqlBasicCall functionNode) {\n         operands.add(toExpression(childNode));\n       }\n     }\n+    validateFunction(functionName, operands);\n     Expression functionExpression = RequestUtils.getFunctionExpression(functionName);\n     functionExpression.getFunctionCall().setOperands(operands);\n     return functionExpression;\n   }\n \n+  private static void validateFunction(String functionName, List<Expression> operands) {\n+    switch (functionName.toUpperCase()) {\n+      case \"JSONEXTRACTSCALAR\":\n+        validateJsonExtractScalarFunction(functionName, operands);\n+        break;\n+      case \"JSONEXTRACTKEY\":\n+        validateJsonExtractKeyFunction(functionName, operands);\n+        break;\n+    }\n+  }\n+\n+  private static void validateJsonExtractScalarFunction(String functionName, List<Expression> operands) {\n+    // Check that there are exactly 3 or 4 arguments\n+    if (operands.size() < 3 || operands.size() > 4) {\n+      throw new SqlCompilationException(\n+          \"Expected 3/4 arguments for transform function: jsonExtractScalar(jsonFieldName, 'jsonPath', 'resultsType', ['defaultValue'])\");\n+    }\n+    if (!operands.get(1).isSetLiteral() || !operands.get(2).isSetLiteral()) {\n+      throw new SqlCompilationException(\n+          \"Expected the second or third argument for transform function: jsonExtractScalar(jsonFieldName, 'jsonPath', 'resultsType', ['defaultValue']) to be a single-quoted literal value.\");\n+    }\n+  }\n+\n+  private static void validateJsonExtractKeyFunction(String functionName, List<Expression> operands) {\n+    // Check that there are exactly 3 or 4 arguments\n+    if (operands.size() != 2) {\n+      throw new SqlCompilationException(\n+          \"Exactly 2 arguments are required for transform function: jsonExtractKey(jsonFieldName, 'jsonPath')\");\n+    }\n+    if (!operands.get(1).isSetLiteral() || !operands.get(2).isSetLiteral()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "53807b89a020adddefd5a0ffcf55345111b847b7"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NzkxMjQwMA==", "bodyText": "Update the comment", "url": "https://github.com/apache/pinot/pull/6246#discussion_r577912400", "createdAt": "2021-02-17T20:12:51Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-common/src/main/java/org/apache/pinot/sql/parsers/CalciteSqlParser.java", "diffHunk": "@@ -902,11 +902,47 @@ private static Expression compileFunctionExpression(SqlBasicCall functionNode) {\n         operands.add(toExpression(childNode));\n       }\n     }\n+    validateFunction(functionName, operands);\n     Expression functionExpression = RequestUtils.getFunctionExpression(functionName);\n     functionExpression.getFunctionCall().setOperands(operands);\n     return functionExpression;\n   }\n \n+  private static void validateFunction(String functionName, List<Expression> operands) {\n+    switch (functionName.toUpperCase()) {\n+      case \"JSONEXTRACTSCALAR\":\n+        validateJsonExtractScalarFunction(functionName, operands);\n+        break;\n+      case \"JSONEXTRACTKEY\":\n+        validateJsonExtractKeyFunction(functionName, operands);\n+        break;\n+    }\n+  }\n+\n+  private static void validateJsonExtractScalarFunction(String functionName, List<Expression> operands) {\n+    // Check that there are exactly 3 or 4 arguments\n+    if (operands.size() < 3 || operands.size() > 4) {\n+      throw new SqlCompilationException(\n+          \"Expected 3/4 arguments for transform function: jsonExtractScalar(jsonFieldName, 'jsonPath', 'resultsType', ['defaultValue'])\");\n+    }\n+    if (!operands.get(1).isSetLiteral() || !operands.get(2).isSetLiteral()) {\n+      throw new SqlCompilationException(\n+          \"Expected the second or third argument for transform function: jsonExtractScalar(jsonFieldName, 'jsonPath', 'resultsType', ['defaultValue']) to be a single-quoted literal value.\");\n+    }\n+  }\n+\n+  private static void validateJsonExtractKeyFunction(String functionName, List<Expression> operands) {\n+    // Check that there are exactly 3 or 4 arguments", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "53807b89a020adddefd5a0ffcf55345111b847b7"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NzkxMjk2MQ==", "bodyText": "(nit) For clarity\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                if (operands.size() < 3 || operands.size() > 4) {\n          \n          \n            \n                if (operands.size() != 3 && operands.size() != 4) {", "url": "https://github.com/apache/pinot/pull/6246#discussion_r577912961", "createdAt": "2021-02-17T20:13:53Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-common/src/main/java/org/apache/pinot/sql/parsers/CalciteSqlParser.java", "diffHunk": "@@ -902,11 +902,47 @@ private static Expression compileFunctionExpression(SqlBasicCall functionNode) {\n         operands.add(toExpression(childNode));\n       }\n     }\n+    validateFunction(functionName, operands);\n     Expression functionExpression = RequestUtils.getFunctionExpression(functionName);\n     functionExpression.getFunctionCall().setOperands(operands);\n     return functionExpression;\n   }\n \n+  private static void validateFunction(String functionName, List<Expression> operands) {\n+    switch (functionName.toUpperCase()) {\n+      case \"JSONEXTRACTSCALAR\":\n+        validateJsonExtractScalarFunction(functionName, operands);\n+        break;\n+      case \"JSONEXTRACTKEY\":\n+        validateJsonExtractKeyFunction(functionName, operands);\n+        break;\n+    }\n+  }\n+\n+  private static void validateJsonExtractScalarFunction(String functionName, List<Expression> operands) {\n+    // Check that there are exactly 3 or 4 arguments\n+    if (operands.size() < 3 || operands.size() > 4) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "53807b89a020adddefd5a0ffcf55345111b847b7"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NzkxMzczMw==", "bodyText": "\"Expect ...\", same for other exception message", "url": "https://github.com/apache/pinot/pull/6246#discussion_r577913733", "createdAt": "2021-02-17T20:15:15Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-common/src/main/java/org/apache/pinot/sql/parsers/CalciteSqlParser.java", "diffHunk": "@@ -902,11 +902,47 @@ private static Expression compileFunctionExpression(SqlBasicCall functionNode) {\n         operands.add(toExpression(childNode));\n       }\n     }\n+    validateFunction(functionName, operands);\n     Expression functionExpression = RequestUtils.getFunctionExpression(functionName);\n     functionExpression.getFunctionCall().setOperands(operands);\n     return functionExpression;\n   }\n \n+  private static void validateFunction(String functionName, List<Expression> operands) {\n+    switch (functionName.toUpperCase()) {\n+      case \"JSONEXTRACTSCALAR\":\n+        validateJsonExtractScalarFunction(functionName, operands);\n+        break;\n+      case \"JSONEXTRACTKEY\":\n+        validateJsonExtractKeyFunction(functionName, operands);\n+        break;\n+    }\n+  }\n+\n+  private static void validateJsonExtractScalarFunction(String functionName, List<Expression> operands) {\n+    // Check that there are exactly 3 or 4 arguments\n+    if (operands.size() < 3 || operands.size() > 4) {\n+      throw new SqlCompilationException(\n+          \"Expected 3/4 arguments for transform function: jsonExtractScalar(jsonFieldName, 'jsonPath', 'resultsType', ['defaultValue'])\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "53807b89a020adddefd5a0ffcf55345111b847b7"}, "originalPosition": 25}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "96113f821281075b13da07c6481ef6ceeaab096f", "author": {"user": {"login": "xiangfu0", "name": "Xiang Fu"}}, "url": "https://github.com/apache/pinot/commit/96113f821281075b13da07c6481ef6ceeaab096f", "committedDate": "2021-02-17T23:51:57Z", "message": "Adding validation for json_extract_key and json_extract_scalar functions during sql compilation phase to avoid empty response"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "53807b89a020adddefd5a0ffcf55345111b847b7", "author": {"user": {"login": "xiangfu0", "name": "Xiang Fu"}}, "url": "https://github.com/apache/pinot/commit/53807b89a020adddefd5a0ffcf55345111b847b7", "committedDate": "2020-11-06T08:51:11Z", "message": "Adding validation for json_extract_key and json_extract_scalar functions during sql compilation phase to avoid empty response"}, "afterCommit": {"oid": "8010929f6a140368ceebb2e357b7e238241ced4b", "author": {"user": {"login": "xiangfu0", "name": "Xiang Fu"}}, "url": "https://github.com/apache/pinot/commit/8010929f6a140368ceebb2e357b7e238241ced4b", "committedDate": "2021-02-18T00:12:41Z", "message": "Address comments"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "8010929f6a140368ceebb2e357b7e238241ced4b", "author": {"user": {"login": "xiangfu0", "name": "Xiang Fu"}}, "url": "https://github.com/apache/pinot/commit/8010929f6a140368ceebb2e357b7e238241ced4b", "committedDate": "2021-02-18T00:12:41Z", "message": "Address comments"}, "afterCommit": {"oid": "e8f56df97f56efb178699983614ea2134ce38f77", "author": {"user": {"login": "xiangfu0", "name": "Xiang Fu"}}, "url": "https://github.com/apache/pinot/commit/e8f56df97f56efb178699983614ea2134ce38f77", "committedDate": "2021-02-18T00:35:00Z", "message": "Address comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9caf8801e52bbf66d4e6b17b6f9a6702467e016d", "author": {"user": {"login": "xiangfu0", "name": "Xiang Fu"}}, "url": "https://github.com/apache/pinot/commit/9caf8801e52bbf66d4e6b17b6f9a6702467e016d", "committedDate": "2021-02-18T00:43:59Z", "message": "Address comments"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e8f56df97f56efb178699983614ea2134ce38f77", "author": {"user": {"login": "xiangfu0", "name": "Xiang Fu"}}, "url": "https://github.com/apache/pinot/commit/e8f56df97f56efb178699983614ea2134ce38f77", "committedDate": "2021-02-18T00:35:00Z", "message": "Address comments"}, "afterCommit": {"oid": "9caf8801e52bbf66d4e6b17b6f9a6702467e016d", "author": {"user": {"login": "xiangfu0", "name": "Xiang Fu"}}, "url": "https://github.com/apache/pinot/commit/9caf8801e52bbf66d4e6b17b6f9a6702467e016d", "committedDate": "2021-02-18T00:43:59Z", "message": "Address comments"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1750, "cost": 1, "resetAt": "2021-10-28T18:00:02Z"}}}