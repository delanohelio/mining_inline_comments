{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQzNDM4NDcy", "number": 5653, "reviewThreads": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxNDowNzowNVrOEK6YqQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNVQxOTo0NjozNlrOELfXQg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5ODc3ODAxOnYy", "diffSide": "RIGHT", "path": "pinot-core/src/main/java/org/apache/pinot/core/indexsegment/mutable/MutableSegmentImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxNDowNzowNVrOGsOfqQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxNzo0MTowMlrOGsXbdQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTAyODAwOQ==", "bodyText": "Seems this is used only in HLRealtimeSegmentDataManager?", "url": "https://github.com/apache/pinot/pull/5653#discussion_r449028009", "createdAt": "2020-07-02T14:07:05Z", "author": {"login": "mayankshriv"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/indexsegment/mutable/MutableSegmentImpl.java", "diffHunk": "@@ -367,11 +366,33 @@ public SegmentPartitionConfig getSegmentPartitionConfig() {\n   }\n \n   public long getMinTime() {\n-    return _minTime;\n+    Long minTime = extractTimeValue(_minValueMap.get(_timeColumnName));\n+    if (minTime != null) {\n+      return minTime;\n+    }\n+    return Long.MAX_VALUE;\n   }\n \n   public long getMaxTime() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f995dfca2f58c2b407895274ee62d94161ae75e"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTE3NDM4OQ==", "bodyText": "Yes.", "url": "https://github.com/apache/pinot/pull/5653#discussion_r449174389", "createdAt": "2020-07-02T17:41:02Z", "author": {"login": "xiangfu0"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/indexsegment/mutable/MutableSegmentImpl.java", "diffHunk": "@@ -367,11 +366,33 @@ public SegmentPartitionConfig getSegmentPartitionConfig() {\n   }\n \n   public long getMinTime() {\n-    return _minTime;\n+    Long minTime = extractTimeValue(_minValueMap.get(_timeColumnName));\n+    if (minTime != null) {\n+      return minTime;\n+    }\n+    return Long.MAX_VALUE;\n   }\n \n   public long getMaxTime() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTAyODAwOQ=="}, "originalCommit": {"oid": "7f995dfca2f58c2b407895274ee62d94161ae75e"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5ODc4ODU3OnYy", "diffSide": "RIGHT", "path": "pinot-core/src/main/java/org/apache/pinot/core/indexsegment/mutable/MutableSegmentImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxNDowOTo0N1rOGsOmoQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxNzo0MTozM1rOGsXcjw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTAyOTc5Mw==", "bodyText": "Can this be done inline during index() (inside addForwardIndex)? Doing it separately may have several redundant operations, that may impact use cases with high ingestion rate.", "url": "https://github.com/apache/pinot/pull/5653#discussion_r449029793", "createdAt": "2020-07-02T14:09:47Z", "author": {"login": "mayankshriv"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/indexsegment/mutable/MutableSegmentImpl.java", "diffHunk": "@@ -425,6 +449,37 @@ public boolean index(GenericRow row, @Nullable RowMetadata rowMetadata) {\n     return canTakeMore;\n   }\n \n+  private void updateMinMaxValue(GenericRow row) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f995dfca2f58c2b407895274ee62d94161ae75e"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTE3NDY3MQ==", "bodyText": "will do", "url": "https://github.com/apache/pinot/pull/5653#discussion_r449174671", "createdAt": "2020-07-02T17:41:33Z", "author": {"login": "xiangfu0"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/indexsegment/mutable/MutableSegmentImpl.java", "diffHunk": "@@ -425,6 +449,37 @@ public boolean index(GenericRow row, @Nullable RowMetadata rowMetadata) {\n     return canTakeMore;\n   }\n \n+  private void updateMinMaxValue(GenericRow row) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTAyOTc5Mw=="}, "originalCommit": {"oid": "7f995dfca2f58c2b407895274ee62d94161ae75e"}, "originalPosition": 69}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5ODc5NzgxOnYy", "diffSide": "RIGHT", "path": "pinot-integration-tests/src/test/java/org/apache/pinot/integration/tests/RealtimeNoDictionaryTimeColumnClusterIntegrationTest.java", "isResolved": true, "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxNDoxMTo1NlrOGsOsjA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QwMDoxNjo1MFrOGsgQmw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTAzMTMwOA==", "bodyText": "Will this be run as a separate integration test (as in setup/teardown the cluster)? If so, perhaps it can be merged into RealtimeClusterIntegrationTest by choosing some of the columns as noDictionary?", "url": "https://github.com/apache/pinot/pull/5653#discussion_r449031308", "createdAt": "2020-07-02T14:11:56Z", "author": {"login": "mayankshriv"}, "path": "pinot-integration-tests/src/test/java/org/apache/pinot/integration/tests/RealtimeNoDictionaryTimeColumnClusterIntegrationTest.java", "diffHunk": "@@ -0,0 +1,42 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.integration.tests;\n+\n+import java.io.File;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import org.apache.commons.io.FileUtils;\n+import org.apache.pinot.util.TestUtils;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Test;\n+\n+\n+/**\n+ * Extends RealtimeClusterIntegrationTest and configure time column to be a non-dictionary column.\n+ */\n+public class RealtimeNoDictionaryTimeColumnClusterIntegrationTest extends RealtimeClusterIntegrationTest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f995dfca2f58c2b407895274ee62d94161ae75e"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTE3NTk3Ng==", "bodyText": "Yes, wanna check if time column could be set as dictionary or no-dictionary. It's a bit hard to merge it as only one time column is used during segment creation for metadata/segment name etc.", "url": "https://github.com/apache/pinot/pull/5653#discussion_r449175976", "createdAt": "2020-07-02T17:44:06Z", "author": {"login": "xiangfu0"}, "path": "pinot-integration-tests/src/test/java/org/apache/pinot/integration/tests/RealtimeNoDictionaryTimeColumnClusterIntegrationTest.java", "diffHunk": "@@ -0,0 +1,42 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.integration.tests;\n+\n+import java.io.File;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import org.apache.commons.io.FileUtils;\n+import org.apache.pinot.util.TestUtils;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Test;\n+\n+\n+/**\n+ * Extends RealtimeClusterIntegrationTest and configure time column to be a non-dictionary column.\n+ */\n+public class RealtimeNoDictionaryTimeColumnClusterIntegrationTest extends RealtimeClusterIntegrationTest {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTAzMTMwOA=="}, "originalCommit": {"oid": "7f995dfca2f58c2b407895274ee62d94161ae75e"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTIwNTQwMQ==", "bodyText": "One way to merge these 2 tests is by using a random boolean to decide the NoDictionaryColumns", "url": "https://github.com/apache/pinot/pull/5653#discussion_r449205401", "createdAt": "2020-07-02T18:44:35Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-integration-tests/src/test/java/org/apache/pinot/integration/tests/RealtimeNoDictionaryTimeColumnClusterIntegrationTest.java", "diffHunk": "@@ -0,0 +1,42 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.integration.tests;\n+\n+import java.io.File;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import org.apache.commons.io.FileUtils;\n+import org.apache.pinot.util.TestUtils;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Test;\n+\n+\n+/**\n+ * Extends RealtimeClusterIntegrationTest and configure time column to be a non-dictionary column.\n+ */\n+public class RealtimeNoDictionaryTimeColumnClusterIntegrationTest extends RealtimeClusterIntegrationTest {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTAzMTMwOA=="}, "originalCommit": {"oid": "7f995dfca2f58c2b407895274ee62d94161ae75e"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTIzNjU0MA==", "bodyText": "Then we may not catch a potential issue in the corresponding PR?", "url": "https://github.com/apache/pinot/pull/5653#discussion_r449236540", "createdAt": "2020-07-02T19:55:07Z", "author": {"login": "xiangfu0"}, "path": "pinot-integration-tests/src/test/java/org/apache/pinot/integration/tests/RealtimeNoDictionaryTimeColumnClusterIntegrationTest.java", "diffHunk": "@@ -0,0 +1,42 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.integration.tests;\n+\n+import java.io.File;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import org.apache.commons.io.FileUtils;\n+import org.apache.pinot.util.TestUtils;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Test;\n+\n+\n+/**\n+ * Extends RealtimeClusterIntegrationTest and configure time column to be a non-dictionary column.\n+ */\n+public class RealtimeNoDictionaryTimeColumnClusterIntegrationTest extends RealtimeClusterIntegrationTest {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTAzMTMwOA=="}, "originalCommit": {"oid": "7f995dfca2f58c2b407895274ee62d94161ae75e"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTI0NjEwNw==", "bodyText": "is the main reason to merge the tests more about the time it takes to run the build?", "url": "https://github.com/apache/pinot/pull/5653#discussion_r449246107", "createdAt": "2020-07-02T20:18:01Z", "author": {"login": "kishoreg"}, "path": "pinot-integration-tests/src/test/java/org/apache/pinot/integration/tests/RealtimeNoDictionaryTimeColumnClusterIntegrationTest.java", "diffHunk": "@@ -0,0 +1,42 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.integration.tests;\n+\n+import java.io.File;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import org.apache.commons.io.FileUtils;\n+import org.apache.pinot.util.TestUtils;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Test;\n+\n+\n+/**\n+ * Extends RealtimeClusterIntegrationTest and configure time column to be a non-dictionary column.\n+ */\n+public class RealtimeNoDictionaryTimeColumnClusterIntegrationTest extends RealtimeClusterIntegrationTest {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTAzMTMwOA=="}, "originalCommit": {"oid": "7f995dfca2f58c2b407895274ee62d94161ae75e"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTI4NjA3Nw==", "bodyText": "Yes. Adding each new integration test will make the testing time roughly 3 minutes longer.", "url": "https://github.com/apache/pinot/pull/5653#discussion_r449286077", "createdAt": "2020-07-02T22:04:46Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-integration-tests/src/test/java/org/apache/pinot/integration/tests/RealtimeNoDictionaryTimeColumnClusterIntegrationTest.java", "diffHunk": "@@ -0,0 +1,42 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.integration.tests;\n+\n+import java.io.File;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import org.apache.commons.io.FileUtils;\n+import org.apache.pinot.util.TestUtils;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Test;\n+\n+\n+/**\n+ * Extends RealtimeClusterIntegrationTest and configure time column to be a non-dictionary column.\n+ */\n+public class RealtimeNoDictionaryTimeColumnClusterIntegrationTest extends RealtimeClusterIntegrationTest {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTAzMTMwOA=="}, "originalCommit": {"oid": "7f995dfca2f58c2b407895274ee62d94161ae75e"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTMxOTA2Nw==", "bodyText": "got it, added a random condition here.", "url": "https://github.com/apache/pinot/pull/5653#discussion_r449319067", "createdAt": "2020-07-03T00:16:50Z", "author": {"login": "xiangfu0"}, "path": "pinot-integration-tests/src/test/java/org/apache/pinot/integration/tests/RealtimeNoDictionaryTimeColumnClusterIntegrationTest.java", "diffHunk": "@@ -0,0 +1,42 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.integration.tests;\n+\n+import java.io.File;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import org.apache.commons.io.FileUtils;\n+import org.apache.pinot.util.TestUtils;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Test;\n+\n+\n+/**\n+ * Extends RealtimeClusterIntegrationTest and configure time column to be a non-dictionary column.\n+ */\n+public class RealtimeNoDictionaryTimeColumnClusterIntegrationTest extends RealtimeClusterIntegrationTest {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTAzMTMwOA=="}, "originalCommit": {"oid": "7f995dfca2f58c2b407895274ee62d94161ae75e"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5OTgzNzUzOnYy", "diffSide": "RIGHT", "path": "pinot-core/src/main/java/org/apache/pinot/core/indexsegment/mutable/MutableSegmentImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxODozMzowMVrOGsY_uQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxODozMzowMVrOGsY_uQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTIwMDA1Nw==", "bodyText": "This has potential thread safety issue (expanding hashMap while reading). You can prevent that by putting null in the constructor.", "url": "https://github.com/apache/pinot/pull/5653#discussion_r449200057", "createdAt": "2020-07-02T18:33:01Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/indexsegment/mutable/MutableSegmentImpl.java", "diffHunk": "@@ -116,15 +116,14 @@\n   private final Map<String, InvertedIndexReader> _invertedIndexMap = new HashMap<>();\n   private final Map<String, InvertedIndexReader> _rangeIndexMap = new HashMap<>();\n   private final Map<String, BloomFilterReader> _bloomFilterMap = new HashMap<>();\n+  private final Map<String, Comparable> _minValueMap = new HashMap<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "804feb60fa86e0b8cb04232ee8a34bc192e61df8"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5OTgzOTE1OnYy", "diffSide": "LEFT", "path": "pinot-core/src/main/java/org/apache/pinot/core/segment/creator/impl/SegmentColumnarIndexCreator.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxODozMzo0MlrOGsZAzA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxODozMzo0MlrOGsZAzA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTIwMDMzMg==", "bodyText": "(nit) revert?", "url": "https://github.com/apache/pinot/pull/5653#discussion_r449200332", "createdAt": "2020-07-02T18:33:42Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/segment/creator/impl/SegmentColumnarIndexCreator.java", "diffHunk": "@@ -491,7 +491,6 @@ public static void addColumnMetadataInfo(PropertiesConfiguration properties, Str\n         String.valueOf(columnIndexCreationInfo.getTotalNumberOfEntries()));\n     properties.setProperty(V1Constants.MetadataKeys.Column.getKeyFor(column, IS_AUTO_GENERATED),\n         String.valueOf(columnIndexCreationInfo.isAutoGenerated()));\n-", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "804feb60fa86e0b8cb04232ee8a34bc192e61df8"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5OTg0MDM4OnYy", "diffSide": "RIGHT", "path": "pinot-core/src/main/java/org/apache/pinot/core/segment/index/datasource/MutableDataSource.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxODozNDoxNFrOGsZBqg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxODozNDoxNFrOGsZBqg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTIwMDU1NA==", "bodyText": "Annotate them as nullable", "url": "https://github.com/apache/pinot/pull/5653#discussion_r449200554", "createdAt": "2020-07-02T18:34:14Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/segment/index/datasource/MutableDataSource.java", "diffHunk": "@@ -39,11 +39,12 @@\n   private static final String OPERATOR_NAME_PREFIX = \"MutableDataSource:\";\n \n   public MutableDataSource(FieldSpec fieldSpec, int numDocs, int numValues, int maxNumValuesPerMVEntry,\n-      @Nullable PartitionFunction partitionFunction, int partitionId, DataFileReader forwardIndex,\n-      @Nullable Dictionary dictionary, @Nullable InvertedIndexReader invertedIndex, @Nullable InvertedIndexReader rangeIndex,\n-      @Nullable BloomFilterReader bloomFilter, @Nullable NullValueVectorReader nullValueVector) {\n+      @Nullable PartitionFunction partitionFunction, int partitionId, Comparable minValue, Comparable maxValue,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "804feb60fa86e0b8cb04232ee8a34bc192e61df8"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5OTg0MDU4OnYy", "diffSide": "RIGHT", "path": "pinot-core/src/main/java/org/apache/pinot/core/segment/index/datasource/MutableDataSource.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxODozNDoxN1rOGsZByA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxODozNDoxN1rOGsZByA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTIwMDU4NA==", "bodyText": "Annotate them as nullable", "url": "https://github.com/apache/pinot/pull/5653#discussion_r449200584", "createdAt": "2020-07-02T18:34:17Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/segment/index/datasource/MutableDataSource.java", "diffHunk": "@@ -54,9 +55,11 @@ public MutableDataSource(FieldSpec fieldSpec, int numDocs, int numValues, int ma\n     final int _maxNumValuesPerMVEntry;\n     final PartitionFunction _partitionFunction;\n     final Set<Integer> _partitions;\n+    final Comparable _minValue;\n+    final Comparable _maxValue;\n \n     MutableDataSourceMetadata(FieldSpec fieldSpec, int numDocs, int numValues, int maxNumValuesPerMVEntry,\n-        @Nullable PartitionFunction partitionFunction, int partitionId) {\n+        @Nullable PartitionFunction partitionFunction, int partitionId, Comparable minValue, Comparable maxValue) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "804feb60fa86e0b8cb04232ee8a34bc192e61df8"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5OTg0MTcwOnYy", "diffSide": "RIGHT", "path": "pinot-integration-tests/src/test/java/org/apache/pinot/integration/tests/RealtimeClusterIntegrationTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxODozNDozN1rOGsZCeg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxODozNDozN1rOGsZCeg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTIwMDc2Mg==", "bodyText": "Revert", "url": "https://github.com/apache/pinot/pull/5653#discussion_r449200762", "createdAt": "2020-07-02T18:34:37Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-integration-tests/src/test/java/org/apache/pinot/integration/tests/RealtimeClusterIntegrationTest.java", "diffHunk": "@@ -19,8 +19,10 @@\n package org.apache.pinot.integration.tests;\n \n import java.io.File;\n+import java.util.Arrays;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "804feb60fa86e0b8cb04232ee8a34bc192e61df8"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5OTg2NDcyOnYy", "diffSide": "RIGHT", "path": "pinot-core/src/main/java/org/apache/pinot/core/indexsegment/mutable/MutableSegmentImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxODo0MjoyMFrOGsZQfA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxODo0MjoyMFrOGsZQfA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTIwNDM0OA==", "bodyText": "Cache _minValueMap.get(column) here to save 2 extra map lookups", "url": "https://github.com/apache/pinot/pull/5653#discussion_r449204348", "createdAt": "2020-07-02T18:42:20Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/indexsegment/mutable/MutableSegmentImpl.java", "diffHunk": "@@ -514,6 +518,32 @@ private void addForwardIndex(GenericRow row, int docId, Map<String, Object> dict\n \n         numValuesInfo.updateMVEntry(dictIds.length);\n       }\n+\n+      // Update min/max value for columns\n+      BaseMutableDictionary dictionary = _dictionaryMap.get(column);\n+      if (dictionary != null) {\n+        _minValueMap.put(column, dictionary.getMinVal());\n+        _maxValueMap.put(column, dictionary.getMaxVal());\n+        continue;\n+      }\n+      if (value == null) {\n+        continue;\n+      }\n+      if (!(value instanceof Comparable)) {\n+        continue;\n+      }\n+      Comparable comparableValue = (Comparable) value;\n+      if (!_minValueMap.containsKey(column)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "804feb60fa86e0b8cb04232ee8a34bc192e61df8"}, "originalPosition": 98}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5OTg2ODQyOnYy", "diffSide": "RIGHT", "path": "pinot-core/src/main/java/org/apache/pinot/core/indexsegment/mutable/MutableSegmentImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxODo0MzozMVrOGsZSwQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxODo0MzozMVrOGsZSwQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTIwNDkyOQ==", "bodyText": "This check is redundant (1. value cannot be null; 2. already handled in the instanceof check)", "url": "https://github.com/apache/pinot/pull/5653#discussion_r449204929", "createdAt": "2020-07-02T18:43:31Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/indexsegment/mutable/MutableSegmentImpl.java", "diffHunk": "@@ -514,6 +518,32 @@ private void addForwardIndex(GenericRow row, int docId, Map<String, Object> dict\n \n         numValuesInfo.updateMVEntry(dictIds.length);\n       }\n+\n+      // Update min/max value for columns\n+      BaseMutableDictionary dictionary = _dictionaryMap.get(column);\n+      if (dictionary != null) {\n+        _minValueMap.put(column, dictionary.getMinVal());\n+        _maxValueMap.put(column, dictionary.getMaxVal());\n+        continue;\n+      }\n+      if (value == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "804feb60fa86e0b8cb04232ee8a34bc192e61df8"}, "originalPosition": 91}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwMzAzMzgyOnYy", "diffSide": "RIGHT", "path": "pinot-core/src/main/java/org/apache/pinot/core/indexsegment/mutable/MutableSegmentImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QxOTozNDo0MVrOGs23ig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QyMToxMjoxM1rOGs3yxA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTY4OTQ4Mg==", "bodyText": "why are we assuming time is always long?", "url": "https://github.com/apache/pinot/pull/5653#discussion_r449689482", "createdAt": "2020-07-03T19:34:41Z", "author": {"login": "kishoreg"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/indexsegment/mutable/MutableSegmentImpl.java", "diffHunk": "@@ -367,11 +370,33 @@ public SegmentPartitionConfig getSegmentPartitionConfig() {\n   }\n \n   public long getMinTime() {\n-    return _minTime;\n+    Long minTime = extractTimeValue(_minValueMap.get(_timeColumnName));\n+    if (minTime != null) {\n+      return minTime;\n+    }\n+    return Long.MAX_VALUE;\n   }\n \n   public long getMaxTime() {\n-    return _maxTime;\n+    Long maxTime = extractTimeValue(_maxValueMap.get(_timeColumnName));\n+    if (maxTime != null) {\n+      return maxTime;\n+    }\n+    return Long.MIN_VALUE;\n+  }\n+\n+  private Long extractTimeValue(Comparable time) {\n+    if (time != null) {\n+      if (time instanceof Number) {\n+        return ((Number) time).longValue();\n+      } else {\n+        String stringValue = time.toString();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3a421a95312309772718c621ca1d761022c373fa"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTcwNDY0NA==", "bodyText": "This logic is only used for Kafka HLC. It assumes time field  is always some epoch value. Maybe we should mark this as Deprecated or at least put some comments.", "url": "https://github.com/apache/pinot/pull/5653#discussion_r449704644", "createdAt": "2020-07-03T21:12:13Z", "author": {"login": "xiangfu0"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/indexsegment/mutable/MutableSegmentImpl.java", "diffHunk": "@@ -367,11 +370,33 @@ public SegmentPartitionConfig getSegmentPartitionConfig() {\n   }\n \n   public long getMinTime() {\n-    return _minTime;\n+    Long minTime = extractTimeValue(_minValueMap.get(_timeColumnName));\n+    if (minTime != null) {\n+      return minTime;\n+    }\n+    return Long.MAX_VALUE;\n   }\n \n   public long getMaxTime() {\n-    return _maxTime;\n+    Long maxTime = extractTimeValue(_maxValueMap.get(_timeColumnName));\n+    if (maxTime != null) {\n+      return maxTime;\n+    }\n+    return Long.MIN_VALUE;\n+  }\n+\n+  private Long extractTimeValue(Comparable time) {\n+    if (time != null) {\n+      if (time instanceof Number) {\n+        return ((Number) time).longValue();\n+      } else {\n+        String stringValue = time.toString();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTY4OTQ4Mg=="}, "originalCommit": {"oid": "3a421a95312309772718c621ca1d761022c373fa"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwMzE4OTQ4OnYy", "diffSide": "RIGHT", "path": "pinot-core/src/main/java/org/apache/pinot/core/indexsegment/mutable/MutableSegmentImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QyMjowMToyNFrOGs4K7Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNFQwMjo1NDo0M1rOGs5elA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTcxMDgyOQ==", "bodyText": "In case of offheap string dictionary it will create a new string everytime from the serialized values. Why nnot just get the minvalue when needed from the dictionary?", "url": "https://github.com/apache/pinot/pull/5653#discussion_r449710829", "createdAt": "2020-07-03T22:01:24Z", "author": {"login": "mcvsubbu"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/indexsegment/mutable/MutableSegmentImpl.java", "diffHunk": "@@ -514,6 +522,30 @@ private void addForwardIndex(GenericRow row, int docId, Map<String, Object> dict\n \n         numValuesInfo.updateMVEntry(dictIds.length);\n       }\n+\n+      // Update min/max value for columns\n+      BaseMutableDictionary dictionary = _dictionaryMap.get(column);\n+      if (dictionary != null) {\n+        _minValueMap.put(column, dictionary.getMinVal());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3a421a95312309772718c621ca1d761022c373fa"}, "originalPosition": 98}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTczMjI0NA==", "bodyText": "Make sense, I will change to just store no-dictionary min/max values.", "url": "https://github.com/apache/pinot/pull/5653#discussion_r449732244", "createdAt": "2020-07-04T02:54:43Z", "author": {"login": "xiangfu0"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/indexsegment/mutable/MutableSegmentImpl.java", "diffHunk": "@@ -514,6 +522,30 @@ private void addForwardIndex(GenericRow row, int docId, Map<String, Object> dict\n \n         numValuesInfo.updateMVEntry(dictIds.length);\n       }\n+\n+      // Update min/max value for columns\n+      BaseMutableDictionary dictionary = _dictionaryMap.get(column);\n+      if (dictionary != null) {\n+        _minValueMap.put(column, dictionary.getMinVal());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTcxMDgyOQ=="}, "originalCommit": {"oid": "3a421a95312309772718c621ca1d761022c373fa"}, "originalPosition": 98}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwNDgzNTI2OnYy", "diffSide": "RIGHT", "path": "pinot-core/src/main/java/org/apache/pinot/core/indexsegment/mutable/MutableSegmentImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNVQxOTo0NDo1N1rOGtEcTQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNVQxOTo0NDo1N1rOGtEcTQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTkxMTg4NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    _minValueMap.put(fieldSpec.getName(), null);\n          \n          \n            \n                    _maxValueMap.put(fieldSpec.getName(), null);\n          \n          \n            \n                    _minValueMap.put(column, null);\n          \n          \n            \n                    _maxValueMap.put(column, null);", "url": "https://github.com/apache/pinot/pull/5653#discussion_r449911885", "createdAt": "2020-07-05T19:44:57Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/indexsegment/mutable/MutableSegmentImpl.java", "diffHunk": "@@ -227,6 +226,9 @@ public long getLatestIngestionTimestamp() {\n         if (isFixedWidthColumn) {\n           forwardIndexColumnSize = dataType.size();\n         }\n+        // Init min/max value map to avoid potential thread safety issue (expanding hashMap while reading).\n+        _minValueMap.put(fieldSpec.getName(), null);\n+        _maxValueMap.put(fieldSpec.getName(), null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1393d5b80f1212b2e87e825e18e1fcc68b8dd2a0"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwNDgzNjUwOnYy", "diffSide": "RIGHT", "path": "pinot-core/src/main/java/org/apache/pinot/core/indexsegment/mutable/MutableSegmentImpl.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNVQxOTo0NjozNlrOGtEc4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQwNTo1NToyNlrOGtJq1w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTkxMjAzNA==", "bodyText": "Is numeric is not good enough, recommend put try-catch over Long.parseLong(stringValue)", "url": "https://github.com/apache/pinot/pull/5653#discussion_r449912034", "createdAt": "2020-07-05T19:46:36Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/indexsegment/mutable/MutableSegmentImpl.java", "diffHunk": "@@ -366,12 +368,68 @@ public SegmentPartitionConfig getSegmentPartitionConfig() {\n     }\n   }\n \n+  /**\n+   * Get min time from the segment, based on the time column, only used by Kafka HLC.\n+   */\n+  @Deprecated\n   public long getMinTime() {\n-    return _minTime;\n+    Long minTime = extractTimeValue(getMinVal(_timeColumnName));\n+    if (minTime != null) {\n+      return minTime;\n+    }\n+    return Long.MAX_VALUE;\n   }\n \n+  /**\n+   * Get max time from the segment, based on the time column, only used by Kafka HLC.\n+   */\n+  @Deprecated\n   public long getMaxTime() {\n-    return _maxTime;\n+    Long maxTime = extractTimeValue(getMaxVal(_timeColumnName));\n+    if (maxTime != null) {\n+      return maxTime;\n+    }\n+    return Long.MIN_VALUE;\n+  }\n+\n+  private Long extractTimeValue(Comparable time) {\n+    if (time != null) {\n+      if (time instanceof Number) {\n+        return ((Number) time).longValue();\n+      } else {\n+        String stringValue = time.toString();\n+        if (StringUtils.isNumeric(stringValue)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1393d5b80f1212b2e87e825e18e1fcc68b8dd2a0"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTk4MTc1OQ==", "bodyText": "I keep the same logic as before, this is for legacy HLC usage which assumes time is epoch value.", "url": "https://github.com/apache/pinot/pull/5653#discussion_r449981759", "createdAt": "2020-07-06T04:48:43Z", "author": {"login": "xiangfu0"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/indexsegment/mutable/MutableSegmentImpl.java", "diffHunk": "@@ -366,12 +368,68 @@ public SegmentPartitionConfig getSegmentPartitionConfig() {\n     }\n   }\n \n+  /**\n+   * Get min time from the segment, based on the time column, only used by Kafka HLC.\n+   */\n+  @Deprecated\n   public long getMinTime() {\n-    return _minTime;\n+    Long minTime = extractTimeValue(getMinVal(_timeColumnName));\n+    if (minTime != null) {\n+      return minTime;\n+    }\n+    return Long.MAX_VALUE;\n   }\n \n+  /**\n+   * Get max time from the segment, based on the time column, only used by Kafka HLC.\n+   */\n+  @Deprecated\n   public long getMaxTime() {\n-    return _maxTime;\n+    Long maxTime = extractTimeValue(getMaxVal(_timeColumnName));\n+    if (maxTime != null) {\n+      return maxTime;\n+    }\n+    return Long.MIN_VALUE;\n+  }\n+\n+  private Long extractTimeValue(Comparable time) {\n+    if (time != null) {\n+      if (time instanceof Number) {\n+        return ((Number) time).longValue();\n+      } else {\n+        String stringValue = time.toString();\n+        if (StringUtils.isNumeric(stringValue)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTkxMjAzNA=="}, "originalCommit": {"oid": "1393d5b80f1212b2e87e825e18e1fcc68b8dd2a0"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTk5NzUyNw==", "bodyText": "nvm, I thought this is NumberUtils.isNumber(). This should be good", "url": "https://github.com/apache/pinot/pull/5653#discussion_r449997527", "createdAt": "2020-07-06T05:55:26Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/indexsegment/mutable/MutableSegmentImpl.java", "diffHunk": "@@ -366,12 +368,68 @@ public SegmentPartitionConfig getSegmentPartitionConfig() {\n     }\n   }\n \n+  /**\n+   * Get min time from the segment, based on the time column, only used by Kafka HLC.\n+   */\n+  @Deprecated\n   public long getMinTime() {\n-    return _minTime;\n+    Long minTime = extractTimeValue(getMinVal(_timeColumnName));\n+    if (minTime != null) {\n+      return minTime;\n+    }\n+    return Long.MAX_VALUE;\n   }\n \n+  /**\n+   * Get max time from the segment, based on the time column, only used by Kafka HLC.\n+   */\n+  @Deprecated\n   public long getMaxTime() {\n-    return _maxTime;\n+    Long maxTime = extractTimeValue(getMaxVal(_timeColumnName));\n+    if (maxTime != null) {\n+      return maxTime;\n+    }\n+    return Long.MIN_VALUE;\n+  }\n+\n+  private Long extractTimeValue(Comparable time) {\n+    if (time != null) {\n+      if (time instanceof Number) {\n+        return ((Number) time).longValue();\n+      } else {\n+        String stringValue = time.toString();\n+        if (StringUtils.isNumeric(stringValue)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTkxMjAzNA=="}, "originalCommit": {"oid": "1393d5b80f1212b2e87e825e18e1fcc68b8dd2a0"}, "originalPosition": 74}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4417, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}