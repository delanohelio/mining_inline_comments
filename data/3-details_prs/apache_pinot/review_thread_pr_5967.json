{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDc4NDI2MDQ0", "number": 5967, "reviewThreads": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQwNDoyMzozN1rOEoWR9w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxOTowMDoyMVrOEos71g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwNzQzNTQzOnYy", "diffSide": "RIGHT", "path": "pinot-controller/src/main/java/org/apache/pinot/controller/api/resources/PinotSegmentUploadDownloadRestletResource.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQwNDoyMzozN1rOHZYang==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxNzoxNToyN1rOHZ4yRA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjM3NjQ3OA==", "bodyText": "Should we add a new FileUploadType: METADATA instead of using this extra boolean flag?", "url": "https://github.com/apache/pinot/pull/5967#discussion_r496376478", "createdAt": "2020-09-29T04:23:37Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-controller/src/main/java/org/apache/pinot/controller/api/resources/PinotSegmentUploadDownloadRestletResource.java", "diffHunk": "@@ -182,7 +182,8 @@ public Response downloadSegment(\n   }\n \n   private SuccessResponse uploadSegment(@Nullable String tableName, FormDataMultiPart multiPart,\n-      boolean enableParallelPushProtection, HttpHeaders headers, Request request, boolean moveSegmentToFinalLocation) {\n+      boolean enableParallelPushProtection, HttpHeaders headers, Request request, boolean moveSegmentToFinalLocation,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "662b7b581942379896e01cbcd972bc815710d64b"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjkwNjgyMA==", "bodyText": "added.", "url": "https://github.com/apache/pinot/pull/5967#discussion_r496906820", "createdAt": "2020-09-29T17:15:27Z", "author": {"login": "xiangfu0"}, "path": "pinot-controller/src/main/java/org/apache/pinot/controller/api/resources/PinotSegmentUploadDownloadRestletResource.java", "diffHunk": "@@ -182,7 +182,8 @@ public Response downloadSegment(\n   }\n \n   private SuccessResponse uploadSegment(@Nullable String tableName, FormDataMultiPart multiPart,\n-      boolean enableParallelPushProtection, HttpHeaders headers, Request request, boolean moveSegmentToFinalLocation) {\n+      boolean enableParallelPushProtection, HttpHeaders headers, Request request, boolean moveSegmentToFinalLocation,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjM3NjQ3OA=="}, "originalCommit": {"oid": "662b7b581942379896e01cbcd972bc815710d64b"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwNzQ0NzQ1OnYy", "diffSide": "RIGHT", "path": "pinot-controller/src/main/java/org/apache/pinot/controller/api/resources/PinotSegmentUploadDownloadRestletResource.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQwNDoyNjozM1rOHZYizA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQwNDoyNjozM1rOHZYizA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjM3ODU3Mg==", "bodyText": "Suggest reusing the existing APIs and use headers to differentiate segment/metadata upload.\nUsing POST /segmentmetadata to upload segments seems counter-intuitive to me.", "url": "https://github.com/apache/pinot/pull/5967#discussion_r496378572", "createdAt": "2020-09-29T04:26:33Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-controller/src/main/java/org/apache/pinot/controller/api/resources/PinotSegmentUploadDownloadRestletResource.java", "diffHunk": "@@ -454,7 +465,41 @@ public void uploadSegmentAsMultiPartV2(FormDataMultiPart multiPart,\n       @ApiParam(value = \"Whether to enable parallel push protection\") @DefaultValue(\"false\") @QueryParam(FileUploadDownloadClient.QueryParameters.ENABLE_PARALLEL_PUSH_PROTECTION) boolean enableParallelPushProtection,\n       @Context HttpHeaders headers, @Context Request request, @Suspended final AsyncResponse asyncResponse) {\n     try {\n-      asyncResponse.resume(uploadSegment(tableName, multiPart, enableParallelPushProtection, headers, request, true));\n+      asyncResponse.resume(uploadSegment(tableName, multiPart, enableParallelPushProtection, headers, request, true, false));\n+    } catch (Throwable t) {\n+      asyncResponse.resume(t);\n+    }\n+  }\n+\n+  @POST\n+  @ManagedAsync\n+  @Produces(MediaType.APPLICATION_JSON)\n+  @Consumes(MediaType.APPLICATION_JSON)\n+  @Path(\"/segmentmetadata\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "662b7b581942379896e01cbcd972bc815710d64b"}, "originalPosition": 111}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwNzQ1MjM5OnYy", "diffSide": "RIGHT", "path": "pinot-plugins/pinot-batch-ingestion/pinot-batch-ingestion-common/src/main/java/org/apache/pinot/plugin/ingestion/batch/common/SegmentPushUtils.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQwNDoyNzo0NVrOHZYmSw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQwNDoyNzo0NVrOHZYmSw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjM3OTQ2Nw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                LOGGER.info(\"Start pushing segments: {}... to locations: {} for table {}\",\n          \n          \n            \n                LOGGER.info(\"Start pushing segment metadata: {} to locations: {} for table {}\",", "url": "https://github.com/apache/pinot/pull/5967#discussion_r496379467", "createdAt": "2020-09-29T04:27:45Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-plugins/pinot-batch-ingestion/pinot-batch-ingestion-common/src/main/java/org/apache/pinot/plugin/ingestion/batch/common/SegmentPushUtils.java", "diffHunk": "@@ -177,4 +187,125 @@ public static void sendSegmentUris(SegmentGenerationJobSpec spec, List<String> s\n       }\n     }\n   }\n+\n+  public static void sendSegmentUriToTarPathMap(SegmentGenerationJobSpec spec, PinotFS fileSystem, Map<String, String> segmentUriToTarPathMap)\n+      throws Exception {\n+    String tableName = spec.getTableSpec().getTableName();\n+    LOGGER.info(\"Start pushing segments: {}... to locations: {} for table {}\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "662b7b581942379896e01cbcd972bc815710d64b"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwNzQ1OTYwOnYy", "diffSide": "RIGHT", "path": "pinot-plugins/pinot-batch-ingestion/pinot-batch-ingestion-common/src/main/java/org/apache/pinot/plugin/ingestion/batch/common/SegmentPushUtils.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQwNDoyOTo0MlrOHZYrZg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQwNDoyOTo0MlrOHZYrZg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjM4MDc3NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    Arrays.toString(segmentUriToTarPathMap.entrySet().toArray()),\n          \n          \n            \n                    segmentUriToTarPathMap,", "url": "https://github.com/apache/pinot/pull/5967#discussion_r496380774", "createdAt": "2020-09-29T04:29:42Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-plugins/pinot-batch-ingestion/pinot-batch-ingestion-common/src/main/java/org/apache/pinot/plugin/ingestion/batch/common/SegmentPushUtils.java", "diffHunk": "@@ -177,4 +187,125 @@ public static void sendSegmentUris(SegmentGenerationJobSpec spec, List<String> s\n       }\n     }\n   }\n+\n+  public static void sendSegmentUriToTarPathMap(SegmentGenerationJobSpec spec, PinotFS fileSystem, Map<String, String> segmentUriToTarPathMap)\n+      throws Exception {\n+    String tableName = spec.getTableSpec().getTableName();\n+    LOGGER.info(\"Start pushing segments: {}... to locations: {} for table {}\",\n+        Arrays.toString(segmentUriToTarPathMap.entrySet().toArray()),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "662b7b581942379896e01cbcd972bc815710d64b"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwNzQ2MzkyOnYy", "diffSide": "RIGHT", "path": "pinot-plugins/pinot-batch-ingestion/pinot-batch-ingestion-common/src/main/java/org/apache/pinot/plugin/ingestion/batch/common/SegmentPushUtils.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQwNDozMDo1MFrOHZYuQw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQwNDozMDo1MFrOHZYuQw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjM4MTUwNw==", "bodyText": "Suggest using UUID", "url": "https://github.com/apache/pinot/pull/5967#discussion_r496381507", "createdAt": "2020-09-29T04:30:50Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-plugins/pinot-batch-ingestion/pinot-batch-ingestion-common/src/main/java/org/apache/pinot/plugin/ingestion/batch/common/SegmentPushUtils.java", "diffHunk": "@@ -177,4 +187,125 @@ public static void sendSegmentUris(SegmentGenerationJobSpec spec, List<String> s\n       }\n     }\n   }\n+\n+  public static void sendSegmentUriToTarPathMap(SegmentGenerationJobSpec spec, PinotFS fileSystem, Map<String, String> segmentUriToTarPathMap)\n+      throws Exception {\n+    String tableName = spec.getTableSpec().getTableName();\n+    LOGGER.info(\"Start pushing segments: {}... to locations: {} for table {}\",\n+        Arrays.toString(segmentUriToTarPathMap.entrySet().toArray()),\n+        Arrays.toString(spec.getPinotClusterSpecs()), tableName);\n+    for (String segmentUriPath : segmentUriToTarPathMap.keySet()) {\n+      String tarFilePath = segmentUriToTarPathMap.get(segmentUriPath);\n+      String fileName = new File(tarFilePath).getName();\n+      Preconditions.checkArgument(fileName.endsWith(Constants.TAR_GZ_FILE_EXT));\n+      String segmentName = fileName.substring(0, fileName.length() - Constants.TAR_GZ_FILE_EXT.length());\n+      File segmentMetadataFile = new File(FileUtils.getTempDirectory(), \"segmentMetadataFile-\" + System.nanoTime() + TarGzCompressionUtils.TAR_GZ_FILE_EXTENSION);\n+      generateSegmentMetadataFile(fileSystem, URI.create(tarFilePath), segmentMetadataFile);\n+      try {\n+        for (PinotClusterSpec pinotClusterSpec : spec.getPinotClusterSpecs()) {\n+          URI controllerURI;\n+          try {\n+            controllerURI = new URI(pinotClusterSpec.getControllerURI());\n+          } catch (URISyntaxException e) {\n+            throw new RuntimeException(\"Got invalid controller uri - '\" + pinotClusterSpec.getControllerURI() + \"'\");\n+          }\n+          LOGGER.info(\"Pushing segment: {} to location: {} for table {}\", segmentName, controllerURI, tableName);\n+          int attempts = 1;\n+          if (spec.getPushJobSpec() != null && spec.getPushJobSpec().getPushAttempts() > 0) {\n+            attempts = spec.getPushJobSpec().getPushAttempts();\n+          }\n+          long retryWaitMs = 1000L;\n+          if (spec.getPushJobSpec() != null && spec.getPushJobSpec().getPushRetryIntervalMillis() > 0) {\n+            retryWaitMs = spec.getPushJobSpec().getPushRetryIntervalMillis();\n+          }\n+          RetryPolicies.exponentialBackoffRetryPolicy(attempts, retryWaitMs, 5).attempt(() -> {\n+            try {\n+              List<Header> headers = ImmutableList.of(new BasicHeader(FileUploadDownloadClient.CustomHeaders.DOWNLOAD_URI, segmentUriPath));\n+              // Add table name as a request parameter\n+              NameValuePair tableNameValuePair =\n+                  new BasicNameValuePair(FileUploadDownloadClient.QueryParameters.TABLE_NAME, tableName);\n+              List<NameValuePair> parameters = Arrays.asList(tableNameValuePair);\n+              SimpleHttpResponse response = FILE_UPLOAD_DOWNLOAD_CLIENT.uploadSegmentMetadata(FileUploadDownloadClient.getUploadSegmentMetadataURI(controllerURI),\n+                  segmentName, segmentMetadataFile, headers, parameters, FILE_UPLOAD_DOWNLOAD_CLIENT.DEFAULT_SOCKET_TIMEOUT_MS);\n+              LOGGER.info(\"Response for pushing table {} segment {} to location {} - {}: {}\", tableName, segmentName,\n+                  controllerURI, response.getStatusCode(), response.getResponse());\n+              return true;\n+            } catch (HttpErrorStatusException e) {\n+              int statusCode = e.getStatusCode();\n+              if (statusCode >= 500) {\n+                // Temporary exception\n+                LOGGER\n+                    .warn(\"Caught temporary exception while pushing table: {} segment: {} to {}, will retry\", tableName,\n+                        segmentName, controllerURI, e);\n+                return false;\n+              } else {\n+                // Permanent exception\n+                LOGGER.error(\"Caught permanent exception while pushing table: {} segment: {} to {}, won't retry\",\n+                    tableName, segmentName, controllerURI, e);\n+                throw e;\n+              }\n+            }\n+          });\n+        }\n+      } finally {\n+        FileUtils.deleteQuietly(segmentMetadataFile);\n+      }\n+    }\n+  }\n+\n+  public static Map<String, String> getSegmentUriToTarPathMap(URI outputDirURI, String uriPrefix, String uriSuffix, String[] files) {\n+    Map<String, String> segmentUriToTarPathMap = new HashMap<>();\n+    for (String file : files) {\n+      URI uri = URI.create(file);\n+      if (uri.getPath().endsWith(Constants.TAR_GZ_FILE_EXT)) {\n+        URI updatedURI = SegmentPushUtils.generateSegmentTarURI(outputDirURI, uri, uriPrefix,uriSuffix);\n+        segmentUriToTarPathMap.put(updatedURI.toString(), file);\n+      }\n+    }\n+    return segmentUriToTarPathMap;\n+  }\n+\n+  /**\n+   * Generate a segment metadata only tar file, which contains only metadata.properties and creation.meta file.\n+   * The purpose of this is to create a lean tar to push to Pinot controller for adding segments without downloading\n+   * the complete segment and untar the segment tarball.\n+   *\n+   * 1. Download segment tar file to temp dir;\n+   * 2. Extract only metadata.properties and creation.meta files from the segment tar file;\n+   * 3. Tar both files into a segment metadata file.\n+   *\n+   */\n+  private static boolean generateSegmentMetadataFile(PinotFS fileSystem, URI tarFileURI, File segmentMetadataTarFile)\n+      throws Exception {\n+    long currentTime = System.nanoTime();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "662b7b581942379896e01cbcd972bc815710d64b"}, "originalPosition": 122}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwNzQ2NzgyOnYy", "diffSide": "RIGHT", "path": "pinot-plugins/pinot-batch-ingestion/pinot-batch-ingestion-common/src/main/java/org/apache/pinot/plugin/ingestion/batch/common/SegmentPushUtils.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQwNDozMTo1M1rOHZYw6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQwNDozMTo1M1rOHZYw6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjM4MjE4Ng==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                File tarFile = new File(FileUtils.getTempDirectory(), \"segmentTar-\" + currentTime + TarGzCompressionUtils.TAR_GZ_FILE_EXTENSION).getAbsoluteFile();\n          \n          \n            \n                File segmentMetadataDir = new File(FileUtils.getTempDirectory(), \"segmentMetadataDir-\" + currentTime).getAbsoluteFile();\n          \n          \n            \n                File tarFile = new File(FileUtils.getTempDirectory(), \"segmentTar-\" + currentTime + TarGzCompressionUtils.TAR_GZ_FILE_EXTENSION);\n          \n          \n            \n                File segmentMetadataDir = new File(FileUtils.getTempDirectory(), \"segmentMetadataDir-\" + currentTime);", "url": "https://github.com/apache/pinot/pull/5967#discussion_r496382186", "createdAt": "2020-09-29T04:31:53Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-plugins/pinot-batch-ingestion/pinot-batch-ingestion-common/src/main/java/org/apache/pinot/plugin/ingestion/batch/common/SegmentPushUtils.java", "diffHunk": "@@ -177,4 +187,125 @@ public static void sendSegmentUris(SegmentGenerationJobSpec spec, List<String> s\n       }\n     }\n   }\n+\n+  public static void sendSegmentUriToTarPathMap(SegmentGenerationJobSpec spec, PinotFS fileSystem, Map<String, String> segmentUriToTarPathMap)\n+      throws Exception {\n+    String tableName = spec.getTableSpec().getTableName();\n+    LOGGER.info(\"Start pushing segments: {}... to locations: {} for table {}\",\n+        Arrays.toString(segmentUriToTarPathMap.entrySet().toArray()),\n+        Arrays.toString(spec.getPinotClusterSpecs()), tableName);\n+    for (String segmentUriPath : segmentUriToTarPathMap.keySet()) {\n+      String tarFilePath = segmentUriToTarPathMap.get(segmentUriPath);\n+      String fileName = new File(tarFilePath).getName();\n+      Preconditions.checkArgument(fileName.endsWith(Constants.TAR_GZ_FILE_EXT));\n+      String segmentName = fileName.substring(0, fileName.length() - Constants.TAR_GZ_FILE_EXT.length());\n+      File segmentMetadataFile = new File(FileUtils.getTempDirectory(), \"segmentMetadataFile-\" + System.nanoTime() + TarGzCompressionUtils.TAR_GZ_FILE_EXTENSION);\n+      generateSegmentMetadataFile(fileSystem, URI.create(tarFilePath), segmentMetadataFile);\n+      try {\n+        for (PinotClusterSpec pinotClusterSpec : spec.getPinotClusterSpecs()) {\n+          URI controllerURI;\n+          try {\n+            controllerURI = new URI(pinotClusterSpec.getControllerURI());\n+          } catch (URISyntaxException e) {\n+            throw new RuntimeException(\"Got invalid controller uri - '\" + pinotClusterSpec.getControllerURI() + \"'\");\n+          }\n+          LOGGER.info(\"Pushing segment: {} to location: {} for table {}\", segmentName, controllerURI, tableName);\n+          int attempts = 1;\n+          if (spec.getPushJobSpec() != null && spec.getPushJobSpec().getPushAttempts() > 0) {\n+            attempts = spec.getPushJobSpec().getPushAttempts();\n+          }\n+          long retryWaitMs = 1000L;\n+          if (spec.getPushJobSpec() != null && spec.getPushJobSpec().getPushRetryIntervalMillis() > 0) {\n+            retryWaitMs = spec.getPushJobSpec().getPushRetryIntervalMillis();\n+          }\n+          RetryPolicies.exponentialBackoffRetryPolicy(attempts, retryWaitMs, 5).attempt(() -> {\n+            try {\n+              List<Header> headers = ImmutableList.of(new BasicHeader(FileUploadDownloadClient.CustomHeaders.DOWNLOAD_URI, segmentUriPath));\n+              // Add table name as a request parameter\n+              NameValuePair tableNameValuePair =\n+                  new BasicNameValuePair(FileUploadDownloadClient.QueryParameters.TABLE_NAME, tableName);\n+              List<NameValuePair> parameters = Arrays.asList(tableNameValuePair);\n+              SimpleHttpResponse response = FILE_UPLOAD_DOWNLOAD_CLIENT.uploadSegmentMetadata(FileUploadDownloadClient.getUploadSegmentMetadataURI(controllerURI),\n+                  segmentName, segmentMetadataFile, headers, parameters, FILE_UPLOAD_DOWNLOAD_CLIENT.DEFAULT_SOCKET_TIMEOUT_MS);\n+              LOGGER.info(\"Response for pushing table {} segment {} to location {} - {}: {}\", tableName, segmentName,\n+                  controllerURI, response.getStatusCode(), response.getResponse());\n+              return true;\n+            } catch (HttpErrorStatusException e) {\n+              int statusCode = e.getStatusCode();\n+              if (statusCode >= 500) {\n+                // Temporary exception\n+                LOGGER\n+                    .warn(\"Caught temporary exception while pushing table: {} segment: {} to {}, will retry\", tableName,\n+                        segmentName, controllerURI, e);\n+                return false;\n+              } else {\n+                // Permanent exception\n+                LOGGER.error(\"Caught permanent exception while pushing table: {} segment: {} to {}, won't retry\",\n+                    tableName, segmentName, controllerURI, e);\n+                throw e;\n+              }\n+            }\n+          });\n+        }\n+      } finally {\n+        FileUtils.deleteQuietly(segmentMetadataFile);\n+      }\n+    }\n+  }\n+\n+  public static Map<String, String> getSegmentUriToTarPathMap(URI outputDirURI, String uriPrefix, String uriSuffix, String[] files) {\n+    Map<String, String> segmentUriToTarPathMap = new HashMap<>();\n+    for (String file : files) {\n+      URI uri = URI.create(file);\n+      if (uri.getPath().endsWith(Constants.TAR_GZ_FILE_EXT)) {\n+        URI updatedURI = SegmentPushUtils.generateSegmentTarURI(outputDirURI, uri, uriPrefix,uriSuffix);\n+        segmentUriToTarPathMap.put(updatedURI.toString(), file);\n+      }\n+    }\n+    return segmentUriToTarPathMap;\n+  }\n+\n+  /**\n+   * Generate a segment metadata only tar file, which contains only metadata.properties and creation.meta file.\n+   * The purpose of this is to create a lean tar to push to Pinot controller for adding segments without downloading\n+   * the complete segment and untar the segment tarball.\n+   *\n+   * 1. Download segment tar file to temp dir;\n+   * 2. Extract only metadata.properties and creation.meta files from the segment tar file;\n+   * 3. Tar both files into a segment metadata file.\n+   *\n+   */\n+  private static boolean generateSegmentMetadataFile(PinotFS fileSystem, URI tarFileURI, File segmentMetadataTarFile)\n+      throws Exception {\n+    long currentTime = System.nanoTime();\n+    File tarFile = new File(FileUtils.getTempDirectory(), \"segmentTar-\" + currentTime + TarGzCompressionUtils.TAR_GZ_FILE_EXTENSION).getAbsoluteFile();\n+    File segmentMetadataDir = new File(FileUtils.getTempDirectory(), \"segmentMetadataDir-\" + currentTime).getAbsoluteFile();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "662b7b581942379896e01cbcd972bc815710d64b"}, "originalPosition": 124}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwNzQ4NTIxOnYy", "diffSide": "RIGHT", "path": "pinot-plugins/pinot-batch-ingestion/pinot-batch-ingestion-common/src/main/java/org/apache/pinot/plugin/ingestion/batch/common/SegmentPushUtils.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQwNDozNTo1OFrOHZY8YA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQwNDozNTo1OFrOHZY8YA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjM4NTEyMA==", "bodyText": "Returns the generated file path instead of passing in the file path?", "url": "https://github.com/apache/pinot/pull/5967#discussion_r496385120", "createdAt": "2020-09-29T04:35:58Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-plugins/pinot-batch-ingestion/pinot-batch-ingestion-common/src/main/java/org/apache/pinot/plugin/ingestion/batch/common/SegmentPushUtils.java", "diffHunk": "@@ -177,4 +187,125 @@ public static void sendSegmentUris(SegmentGenerationJobSpec spec, List<String> s\n       }\n     }\n   }\n+\n+  public static void sendSegmentUriToTarPathMap(SegmentGenerationJobSpec spec, PinotFS fileSystem, Map<String, String> segmentUriToTarPathMap)\n+      throws Exception {\n+    String tableName = spec.getTableSpec().getTableName();\n+    LOGGER.info(\"Start pushing segments: {}... to locations: {} for table {}\",\n+        Arrays.toString(segmentUriToTarPathMap.entrySet().toArray()),\n+        Arrays.toString(spec.getPinotClusterSpecs()), tableName);\n+    for (String segmentUriPath : segmentUriToTarPathMap.keySet()) {\n+      String tarFilePath = segmentUriToTarPathMap.get(segmentUriPath);\n+      String fileName = new File(tarFilePath).getName();\n+      Preconditions.checkArgument(fileName.endsWith(Constants.TAR_GZ_FILE_EXT));\n+      String segmentName = fileName.substring(0, fileName.length() - Constants.TAR_GZ_FILE_EXT.length());\n+      File segmentMetadataFile = new File(FileUtils.getTempDirectory(), \"segmentMetadataFile-\" + System.nanoTime() + TarGzCompressionUtils.TAR_GZ_FILE_EXTENSION);\n+      generateSegmentMetadataFile(fileSystem, URI.create(tarFilePath), segmentMetadataFile);\n+      try {\n+        for (PinotClusterSpec pinotClusterSpec : spec.getPinotClusterSpecs()) {\n+          URI controllerURI;\n+          try {\n+            controllerURI = new URI(pinotClusterSpec.getControllerURI());\n+          } catch (URISyntaxException e) {\n+            throw new RuntimeException(\"Got invalid controller uri - '\" + pinotClusterSpec.getControllerURI() + \"'\");\n+          }\n+          LOGGER.info(\"Pushing segment: {} to location: {} for table {}\", segmentName, controllerURI, tableName);\n+          int attempts = 1;\n+          if (spec.getPushJobSpec() != null && spec.getPushJobSpec().getPushAttempts() > 0) {\n+            attempts = spec.getPushJobSpec().getPushAttempts();\n+          }\n+          long retryWaitMs = 1000L;\n+          if (spec.getPushJobSpec() != null && spec.getPushJobSpec().getPushRetryIntervalMillis() > 0) {\n+            retryWaitMs = spec.getPushJobSpec().getPushRetryIntervalMillis();\n+          }\n+          RetryPolicies.exponentialBackoffRetryPolicy(attempts, retryWaitMs, 5).attempt(() -> {\n+            try {\n+              List<Header> headers = ImmutableList.of(new BasicHeader(FileUploadDownloadClient.CustomHeaders.DOWNLOAD_URI, segmentUriPath));\n+              // Add table name as a request parameter\n+              NameValuePair tableNameValuePair =\n+                  new BasicNameValuePair(FileUploadDownloadClient.QueryParameters.TABLE_NAME, tableName);\n+              List<NameValuePair> parameters = Arrays.asList(tableNameValuePair);\n+              SimpleHttpResponse response = FILE_UPLOAD_DOWNLOAD_CLIENT.uploadSegmentMetadata(FileUploadDownloadClient.getUploadSegmentMetadataURI(controllerURI),\n+                  segmentName, segmentMetadataFile, headers, parameters, FILE_UPLOAD_DOWNLOAD_CLIENT.DEFAULT_SOCKET_TIMEOUT_MS);\n+              LOGGER.info(\"Response for pushing table {} segment {} to location {} - {}: {}\", tableName, segmentName,\n+                  controllerURI, response.getStatusCode(), response.getResponse());\n+              return true;\n+            } catch (HttpErrorStatusException e) {\n+              int statusCode = e.getStatusCode();\n+              if (statusCode >= 500) {\n+                // Temporary exception\n+                LOGGER\n+                    .warn(\"Caught temporary exception while pushing table: {} segment: {} to {}, will retry\", tableName,\n+                        segmentName, controllerURI, e);\n+                return false;\n+              } else {\n+                // Permanent exception\n+                LOGGER.error(\"Caught permanent exception while pushing table: {} segment: {} to {}, won't retry\",\n+                    tableName, segmentName, controllerURI, e);\n+                throw e;\n+              }\n+            }\n+          });\n+        }\n+      } finally {\n+        FileUtils.deleteQuietly(segmentMetadataFile);\n+      }\n+    }\n+  }\n+\n+  public static Map<String, String> getSegmentUriToTarPathMap(URI outputDirURI, String uriPrefix, String uriSuffix, String[] files) {\n+    Map<String, String> segmentUriToTarPathMap = new HashMap<>();\n+    for (String file : files) {\n+      URI uri = URI.create(file);\n+      if (uri.getPath().endsWith(Constants.TAR_GZ_FILE_EXT)) {\n+        URI updatedURI = SegmentPushUtils.generateSegmentTarURI(outputDirURI, uri, uriPrefix,uriSuffix);\n+        segmentUriToTarPathMap.put(updatedURI.toString(), file);\n+      }\n+    }\n+    return segmentUriToTarPathMap;\n+  }\n+\n+  /**\n+   * Generate a segment metadata only tar file, which contains only metadata.properties and creation.meta file.\n+   * The purpose of this is to create a lean tar to push to Pinot controller for adding segments without downloading\n+   * the complete segment and untar the segment tarball.\n+   *\n+   * 1. Download segment tar file to temp dir;\n+   * 2. Extract only metadata.properties and creation.meta files from the segment tar file;\n+   * 3. Tar both files into a segment metadata file.\n+   *\n+   */\n+  private static boolean generateSegmentMetadataFile(PinotFS fileSystem, URI tarFileURI, File segmentMetadataTarFile)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "662b7b581942379896e01cbcd972bc815710d64b"}, "originalPosition": 120}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwNzQ5MzIyOnYy", "diffSide": "RIGHT", "path": "pinot-plugins/pinot-batch-ingestion/pinot-batch-ingestion-common/src/main/java/org/apache/pinot/plugin/ingestion/batch/common/SegmentPushUtils.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQwNDozNzo1MlrOHZZBxw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQwNDozNzo1MlrOHZZBxw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjM4NjUwMw==", "bodyText": "Rename this to reflect it is sending the segment metadata instead of the segments?", "url": "https://github.com/apache/pinot/pull/5967#discussion_r496386503", "createdAt": "2020-09-29T04:37:52Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-plugins/pinot-batch-ingestion/pinot-batch-ingestion-common/src/main/java/org/apache/pinot/plugin/ingestion/batch/common/SegmentPushUtils.java", "diffHunk": "@@ -177,4 +187,125 @@ public static void sendSegmentUris(SegmentGenerationJobSpec spec, List<String> s\n       }\n     }\n   }\n+\n+  public static void sendSegmentUriToTarPathMap(SegmentGenerationJobSpec spec, PinotFS fileSystem, Map<String, String> segmentUriToTarPathMap)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "662b7b581942379896e01cbcd972bc815710d64b"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExMTEzMDE4OnYy", "diffSide": "RIGHT", "path": "pinot-controller/src/main/java/org/apache/pinot/controller/api/resources/PinotSegmentUploadDownloadRestletResource.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxODo1NTozMlrOHZ8aBQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxOToxMTowNVrOHZ87jw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njk2NjE0OQ==", "bodyText": "I don't think we need to add these 2 new APIs, we can still use the existing segment upload API but with metadata upload in the header. I feel it is better to use the same path for segment upload.", "url": "https://github.com/apache/pinot/pull/5967#discussion_r496966149", "createdAt": "2020-09-29T18:55:32Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-controller/src/main/java/org/apache/pinot/controller/api/resources/PinotSegmentUploadDownloadRestletResource.java", "diffHunk": "@@ -460,6 +465,40 @@ public void uploadSegmentAsMultiPartV2(FormDataMultiPart multiPart,\n     }\n   }\n \n+  @POST\n+  @ManagedAsync\n+  @Produces(MediaType.APPLICATION_JSON)\n+  @Consumes(MediaType.APPLICATION_JSON)\n+  @Path(\"/segments/metadata\")\n+  @ApiOperation(value = \"Upload a segment with metadata\", notes = \"Upload a segment using segment metadata\")\n+  public void uploadSegmentMetadataAsJson(String segmentJsonStr,\n+      @ApiParam(value = \"Name of the table\") @QueryParam(FileUploadDownloadClient.QueryParameters.TABLE_NAME) String tableName,\n+      @ApiParam(value = \"Whether to enable parallel push protection\") @DefaultValue(\"false\") @QueryParam(FileUploadDownloadClient.QueryParameters.ENABLE_PARALLEL_PUSH_PROTECTION) boolean enableParallelPushProtection,\n+      @Context HttpHeaders headers, @Context Request request, @Suspended final AsyncResponse asyncResponse) {\n+    try {\n+      asyncResponse.resume(uploadSegment(tableName, null, enableParallelPushProtection, headers, request, false));\n+    } catch (Throwable t) {\n+      asyncResponse.resume(t);\n+    }\n+  }\n+\n+  @POST\n+  @ManagedAsync\n+  @Produces(MediaType.APPLICATION_JSON)\n+  @Consumes(MediaType.MULTIPART_FORM_DATA)\n+  @Path(\"/segments/metadata\")\n+  @ApiOperation(value = \"Upload a segment with metadata\", notes = \"Upload a segment using segment metadata\")\n+  public void uploadSegmentMetadataAsMultiPart(FormDataMultiPart multiPart,\n+      @ApiParam(value = \"Name of the table\") @QueryParam(FileUploadDownloadClient.QueryParameters.TABLE_NAME) String tableName,\n+      @ApiParam(value = \"Whether to enable parallel push protection\") @DefaultValue(\"false\") @QueryParam(FileUploadDownloadClient.QueryParameters.ENABLE_PARALLEL_PUSH_PROTECTION) boolean enableParallelPushProtection,\n+      @Context HttpHeaders headers, @Context Request request, @Suspended final AsyncResponse asyncResponse) {\n+    try {\n+      asyncResponse.resume(uploadSegment(tableName, multiPart, enableParallelPushProtection, headers, request, false));\n+    } catch (Throwable t) {\n+      asyncResponse.resume(t);\n+    }\n+  }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "02ad0df5401cb8ab24570d907a7a0acd8dce73db"}, "originalPosition": 85}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njk3NDczNQ==", "bodyText": "make sense.", "url": "https://github.com/apache/pinot/pull/5967#discussion_r496974735", "createdAt": "2020-09-29T19:11:05Z", "author": {"login": "xiangfu0"}, "path": "pinot-controller/src/main/java/org/apache/pinot/controller/api/resources/PinotSegmentUploadDownloadRestletResource.java", "diffHunk": "@@ -460,6 +465,40 @@ public void uploadSegmentAsMultiPartV2(FormDataMultiPart multiPart,\n     }\n   }\n \n+  @POST\n+  @ManagedAsync\n+  @Produces(MediaType.APPLICATION_JSON)\n+  @Consumes(MediaType.APPLICATION_JSON)\n+  @Path(\"/segments/metadata\")\n+  @ApiOperation(value = \"Upload a segment with metadata\", notes = \"Upload a segment using segment metadata\")\n+  public void uploadSegmentMetadataAsJson(String segmentJsonStr,\n+      @ApiParam(value = \"Name of the table\") @QueryParam(FileUploadDownloadClient.QueryParameters.TABLE_NAME) String tableName,\n+      @ApiParam(value = \"Whether to enable parallel push protection\") @DefaultValue(\"false\") @QueryParam(FileUploadDownloadClient.QueryParameters.ENABLE_PARALLEL_PUSH_PROTECTION) boolean enableParallelPushProtection,\n+      @Context HttpHeaders headers, @Context Request request, @Suspended final AsyncResponse asyncResponse) {\n+    try {\n+      asyncResponse.resume(uploadSegment(tableName, null, enableParallelPushProtection, headers, request, false));\n+    } catch (Throwable t) {\n+      asyncResponse.resume(t);\n+    }\n+  }\n+\n+  @POST\n+  @ManagedAsync\n+  @Produces(MediaType.APPLICATION_JSON)\n+  @Consumes(MediaType.MULTIPART_FORM_DATA)\n+  @Path(\"/segments/metadata\")\n+  @ApiOperation(value = \"Upload a segment with metadata\", notes = \"Upload a segment using segment metadata\")\n+  public void uploadSegmentMetadataAsMultiPart(FormDataMultiPart multiPart,\n+      @ApiParam(value = \"Name of the table\") @QueryParam(FileUploadDownloadClient.QueryParameters.TABLE_NAME) String tableName,\n+      @ApiParam(value = \"Whether to enable parallel push protection\") @DefaultValue(\"false\") @QueryParam(FileUploadDownloadClient.QueryParameters.ENABLE_PARALLEL_PUSH_PROTECTION) boolean enableParallelPushProtection,\n+      @Context HttpHeaders headers, @Context Request request, @Suspended final AsyncResponse asyncResponse) {\n+    try {\n+      asyncResponse.resume(uploadSegment(tableName, multiPart, enableParallelPushProtection, headers, request, false));\n+    } catch (Throwable t) {\n+      asyncResponse.resume(t);\n+    }\n+  }\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njk2NjE0OQ=="}, "originalCommit": {"oid": "02ad0df5401cb8ab24570d907a7a0acd8dce73db"}, "originalPosition": 85}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExMTEzMjAxOnYy", "diffSide": "RIGHT", "path": "pinot-plugins/pinot-batch-ingestion/pinot-batch-ingestion-common/src/main/java/org/apache/pinot/plugin/ingestion/batch/common/SegmentPushUtils.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxODo1NjowNVrOHZ8bLw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxODo1NjowNVrOHZ8bLw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njk2NjQ0Nw==", "bodyText": "Add some javadoc?", "url": "https://github.com/apache/pinot/pull/5967#discussion_r496966447", "createdAt": "2020-09-29T18:56:05Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-plugins/pinot-batch-ingestion/pinot-batch-ingestion-common/src/main/java/org/apache/pinot/plugin/ingestion/batch/common/SegmentPushUtils.java", "diffHunk": "@@ -177,4 +188,127 @@ public static void sendSegmentUris(SegmentGenerationJobSpec spec, List<String> s\n       }\n     }\n   }\n+\n+  public static void sendSegmentUriAndMetadata(SegmentGenerationJobSpec spec, PinotFS fileSystem, Map<String, String> segmentUriToTarPathMap)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "02ad0df5401cb8ab24570d907a7a0acd8dce73db"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExMTEzNzAyOnYy", "diffSide": "RIGHT", "path": "pinot-plugins/pinot-batch-ingestion/pinot-batch-ingestion-common/src/main/java/org/apache/pinot/plugin/ingestion/batch/common/SegmentPushUtils.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxODo1NzoyOFrOHZ8eNg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxOTowNzo1NlrOHZ81IQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njk2NzIyMg==", "bodyText": "(nit) Why having the ... here? We are not omitting any segment here", "url": "https://github.com/apache/pinot/pull/5967#discussion_r496967222", "createdAt": "2020-09-29T18:57:28Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-plugins/pinot-batch-ingestion/pinot-batch-ingestion-common/src/main/java/org/apache/pinot/plugin/ingestion/batch/common/SegmentPushUtils.java", "diffHunk": "@@ -177,4 +188,127 @@ public static void sendSegmentUris(SegmentGenerationJobSpec spec, List<String> s\n       }\n     }\n   }\n+\n+  public static void sendSegmentUriAndMetadata(SegmentGenerationJobSpec spec, PinotFS fileSystem, Map<String, String> segmentUriToTarPathMap)\n+      throws Exception {\n+    String tableName = spec.getTableSpec().getTableName();\n+    LOGGER.info(\"Start pushing segment metadata: {}... to locations: {} for table {}\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "02ad0df5401cb8ab24570d907a7a0acd8dce73db"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njk3MzA4OQ==", "bodyText": "Ah, I think the purpose of this log is to only put at most say 5 segments to avoid flushing the log.\nBut I feel it should be ok to list all the segments.", "url": "https://github.com/apache/pinot/pull/5967#discussion_r496973089", "createdAt": "2020-09-29T19:07:56Z", "author": {"login": "xiangfu0"}, "path": "pinot-plugins/pinot-batch-ingestion/pinot-batch-ingestion-common/src/main/java/org/apache/pinot/plugin/ingestion/batch/common/SegmentPushUtils.java", "diffHunk": "@@ -177,4 +188,127 @@ public static void sendSegmentUris(SegmentGenerationJobSpec spec, List<String> s\n       }\n     }\n   }\n+\n+  public static void sendSegmentUriAndMetadata(SegmentGenerationJobSpec spec, PinotFS fileSystem, Map<String, String> segmentUriToTarPathMap)\n+      throws Exception {\n+    String tableName = spec.getTableSpec().getTableName();\n+    LOGGER.info(\"Start pushing segment metadata: {}... to locations: {} for table {}\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njk2NzIyMg=="}, "originalCommit": {"oid": "02ad0df5401cb8ab24570d907a7a0acd8dce73db"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExMTE0NzEwOnYy", "diffSide": "RIGHT", "path": "pinot-plugins/pinot-batch-ingestion/pinot-batch-ingestion-common/src/main/java/org/apache/pinot/plugin/ingestion/batch/common/SegmentPushUtils.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxOTowMDoyMVrOHZ8kvg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxOToxMToxOVrOHZ88fg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njk2ODg5NA==", "bodyText": "(Critical) Shouldn't this be METADATA?", "url": "https://github.com/apache/pinot/pull/5967#discussion_r496968894", "createdAt": "2020-09-29T19:00:21Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-plugins/pinot-batch-ingestion/pinot-batch-ingestion-common/src/main/java/org/apache/pinot/plugin/ingestion/batch/common/SegmentPushUtils.java", "diffHunk": "@@ -177,4 +188,127 @@ public static void sendSegmentUris(SegmentGenerationJobSpec spec, List<String> s\n       }\n     }\n   }\n+\n+  public static void sendSegmentUriAndMetadata(SegmentGenerationJobSpec spec, PinotFS fileSystem, Map<String, String> segmentUriToTarPathMap)\n+      throws Exception {\n+    String tableName = spec.getTableSpec().getTableName();\n+    LOGGER.info(\"Start pushing segment metadata: {}... to locations: {} for table {}\",\n+        segmentUriToTarPathMap,\n+        Arrays.toString(spec.getPinotClusterSpecs()), tableName);\n+    for (String segmentUriPath : segmentUriToTarPathMap.keySet()) {\n+      String tarFilePath = segmentUriToTarPathMap.get(segmentUriPath);\n+      String fileName = new File(tarFilePath).getName();\n+      Preconditions.checkArgument(fileName.endsWith(Constants.TAR_GZ_FILE_EXT));\n+      String segmentName = fileName.substring(0, fileName.length() - Constants.TAR_GZ_FILE_EXT.length());\n+      File segmentMetadataFile = generateSegmentMetadataFile(fileSystem, URI.create(tarFilePath));\n+      try {\n+        for (PinotClusterSpec pinotClusterSpec : spec.getPinotClusterSpecs()) {\n+          URI controllerURI;\n+          try {\n+            controllerURI = new URI(pinotClusterSpec.getControllerURI());\n+          } catch (URISyntaxException e) {\n+            throw new RuntimeException(\"Got invalid controller uri - '\" + pinotClusterSpec.getControllerURI() + \"'\");\n+          }\n+          LOGGER.info(\"Pushing segment: {} to location: {} for table {}\", segmentName, controllerURI, tableName);\n+          int attempts = 1;\n+          if (spec.getPushJobSpec() != null && spec.getPushJobSpec().getPushAttempts() > 0) {\n+            attempts = spec.getPushJobSpec().getPushAttempts();\n+          }\n+          long retryWaitMs = 1000L;\n+          if (spec.getPushJobSpec() != null && spec.getPushJobSpec().getPushRetryIntervalMillis() > 0) {\n+            retryWaitMs = spec.getPushJobSpec().getPushRetryIntervalMillis();\n+          }\n+          RetryPolicies.exponentialBackoffRetryPolicy(attempts, retryWaitMs, 5).attempt(() -> {\n+            try {\n+              List<Header> headers = ImmutableList.of(\n+                  new BasicHeader(FileUploadDownloadClient.CustomHeaders.DOWNLOAD_URI, segmentUriPath),\n+                  new BasicHeader(FileUploadDownloadClient.CustomHeaders.UPLOAD_TYPE, FileUploadDownloadClient.FileUploadType.URI.toString()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "02ad0df5401cb8ab24570d907a7a0acd8dce73db"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njk3NDk3NA==", "bodyText": "good catch", "url": "https://github.com/apache/pinot/pull/5967#discussion_r496974974", "createdAt": "2020-09-29T19:11:19Z", "author": {"login": "xiangfu0"}, "path": "pinot-plugins/pinot-batch-ingestion/pinot-batch-ingestion-common/src/main/java/org/apache/pinot/plugin/ingestion/batch/common/SegmentPushUtils.java", "diffHunk": "@@ -177,4 +188,127 @@ public static void sendSegmentUris(SegmentGenerationJobSpec spec, List<String> s\n       }\n     }\n   }\n+\n+  public static void sendSegmentUriAndMetadata(SegmentGenerationJobSpec spec, PinotFS fileSystem, Map<String, String> segmentUriToTarPathMap)\n+      throws Exception {\n+    String tableName = spec.getTableSpec().getTableName();\n+    LOGGER.info(\"Start pushing segment metadata: {}... to locations: {} for table {}\",\n+        segmentUriToTarPathMap,\n+        Arrays.toString(spec.getPinotClusterSpecs()), tableName);\n+    for (String segmentUriPath : segmentUriToTarPathMap.keySet()) {\n+      String tarFilePath = segmentUriToTarPathMap.get(segmentUriPath);\n+      String fileName = new File(tarFilePath).getName();\n+      Preconditions.checkArgument(fileName.endsWith(Constants.TAR_GZ_FILE_EXT));\n+      String segmentName = fileName.substring(0, fileName.length() - Constants.TAR_GZ_FILE_EXT.length());\n+      File segmentMetadataFile = generateSegmentMetadataFile(fileSystem, URI.create(tarFilePath));\n+      try {\n+        for (PinotClusterSpec pinotClusterSpec : spec.getPinotClusterSpecs()) {\n+          URI controllerURI;\n+          try {\n+            controllerURI = new URI(pinotClusterSpec.getControllerURI());\n+          } catch (URISyntaxException e) {\n+            throw new RuntimeException(\"Got invalid controller uri - '\" + pinotClusterSpec.getControllerURI() + \"'\");\n+          }\n+          LOGGER.info(\"Pushing segment: {} to location: {} for table {}\", segmentName, controllerURI, tableName);\n+          int attempts = 1;\n+          if (spec.getPushJobSpec() != null && spec.getPushJobSpec().getPushAttempts() > 0) {\n+            attempts = spec.getPushJobSpec().getPushAttempts();\n+          }\n+          long retryWaitMs = 1000L;\n+          if (spec.getPushJobSpec() != null && spec.getPushJobSpec().getPushRetryIntervalMillis() > 0) {\n+            retryWaitMs = spec.getPushJobSpec().getPushRetryIntervalMillis();\n+          }\n+          RetryPolicies.exponentialBackoffRetryPolicy(attempts, retryWaitMs, 5).attempt(() -> {\n+            try {\n+              List<Header> headers = ImmutableList.of(\n+                  new BasicHeader(FileUploadDownloadClient.CustomHeaders.DOWNLOAD_URI, segmentUriPath),\n+                  new BasicHeader(FileUploadDownloadClient.CustomHeaders.UPLOAD_TYPE, FileUploadDownloadClient.FileUploadType.URI.toString()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njk2ODg5NA=="}, "originalCommit": {"oid": "02ad0df5401cb8ab24570d907a7a0acd8dce73db"}, "originalPosition": 67}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3839, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}