{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM3MjY2NTY5", "number": 5594, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQyMDo0NTo1MlrOEHO76w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQyMDo0NTo1MlrOEHO76w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2MDIwMjAzOnYy", "diffSide": "RIGHT", "path": "pinot-core/src/main/java/org/apache/pinot/core/query/request/context/utils/QueryContextConverterUtils.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQyMDo0NTo1MlrOGmg2Ug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQyMToxNjozMFrOGmhdJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzAzNzI2Ng==", "bodyText": "Checkout ParserUtils to see if there's any overlap.", "url": "https://github.com/apache/pinot/pull/5594#discussion_r443037266", "createdAt": "2020-06-19T20:45:52Z", "author": {"login": "mayankshriv"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/query/request/context/utils/QueryContextConverterUtils.java", "diffHunk": "@@ -0,0 +1,278 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.core.query.request.context.utils;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import org.apache.pinot.common.function.AggregationFunctionType;\n+import org.apache.pinot.common.function.FunctionDefinitionRegistry;\n+import org.apache.pinot.common.request.Expression;\n+import org.apache.pinot.common.request.ExpressionType;\n+import org.apache.pinot.common.request.FilterOperator;\n+import org.apache.pinot.common.request.Function;\n+import org.apache.pinot.common.utils.request.FilterQueryTree;\n+import org.apache.pinot.core.query.exception.BadQueryRequestException;\n+import org.apache.pinot.core.query.request.context.ExpressionContext;\n+import org.apache.pinot.core.query.request.context.FilterContext;\n+import org.apache.pinot.core.query.request.context.FunctionContext;\n+import org.apache.pinot.core.query.request.context.predicate.EqPredicate;\n+import org.apache.pinot.core.query.request.context.predicate.InPredicate;\n+import org.apache.pinot.core.query.request.context.predicate.IsNotNullPredicate;\n+import org.apache.pinot.core.query.request.context.predicate.IsNullPredicate;\n+import org.apache.pinot.core.query.request.context.predicate.NotEqPredicate;\n+import org.apache.pinot.core.query.request.context.predicate.NotInPredicate;\n+import org.apache.pinot.core.query.request.context.predicate.RangePredicate;\n+import org.apache.pinot.core.query.request.context.predicate.RegexpLikePredicate;\n+import org.apache.pinot.core.query.request.context.predicate.TextMatchPredicate;\n+import org.apache.pinot.pql.parsers.Pql2Compiler;\n+import org.apache.pinot.pql.parsers.pql2.ast.AstNode;\n+import org.apache.pinot.pql.parsers.pql2.ast.FilterKind;\n+import org.apache.pinot.pql.parsers.pql2.ast.FunctionCallAstNode;\n+import org.apache.pinot.pql.parsers.pql2.ast.IdentifierAstNode;\n+import org.apache.pinot.pql.parsers.pql2.ast.LiteralAstNode;\n+\n+\n+public class QueryContextConverterUtils {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e2e0bfca3b7f52c344840beb06446b410eaba083"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzA0NzIwNA==", "bodyText": "The method return value type of this class is always the new context classes, so there is no overlap. ParserUtils is mainly for PinotQuery to BrokerRequest.", "url": "https://github.com/apache/pinot/pull/5594#discussion_r443047204", "createdAt": "2020-06-19T21:16:30Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/query/request/context/utils/QueryContextConverterUtils.java", "diffHunk": "@@ -0,0 +1,278 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.core.query.request.context.utils;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import org.apache.pinot.common.function.AggregationFunctionType;\n+import org.apache.pinot.common.function.FunctionDefinitionRegistry;\n+import org.apache.pinot.common.request.Expression;\n+import org.apache.pinot.common.request.ExpressionType;\n+import org.apache.pinot.common.request.FilterOperator;\n+import org.apache.pinot.common.request.Function;\n+import org.apache.pinot.common.utils.request.FilterQueryTree;\n+import org.apache.pinot.core.query.exception.BadQueryRequestException;\n+import org.apache.pinot.core.query.request.context.ExpressionContext;\n+import org.apache.pinot.core.query.request.context.FilterContext;\n+import org.apache.pinot.core.query.request.context.FunctionContext;\n+import org.apache.pinot.core.query.request.context.predicate.EqPredicate;\n+import org.apache.pinot.core.query.request.context.predicate.InPredicate;\n+import org.apache.pinot.core.query.request.context.predicate.IsNotNullPredicate;\n+import org.apache.pinot.core.query.request.context.predicate.IsNullPredicate;\n+import org.apache.pinot.core.query.request.context.predicate.NotEqPredicate;\n+import org.apache.pinot.core.query.request.context.predicate.NotInPredicate;\n+import org.apache.pinot.core.query.request.context.predicate.RangePredicate;\n+import org.apache.pinot.core.query.request.context.predicate.RegexpLikePredicate;\n+import org.apache.pinot.core.query.request.context.predicate.TextMatchPredicate;\n+import org.apache.pinot.pql.parsers.Pql2Compiler;\n+import org.apache.pinot.pql.parsers.pql2.ast.AstNode;\n+import org.apache.pinot.pql.parsers.pql2.ast.FilterKind;\n+import org.apache.pinot.pql.parsers.pql2.ast.FunctionCallAstNode;\n+import org.apache.pinot.pql.parsers.pql2.ast.IdentifierAstNode;\n+import org.apache.pinot.pql.parsers.pql2.ast.LiteralAstNode;\n+\n+\n+public class QueryContextConverterUtils {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzAzNzI2Ng=="}, "originalCommit": {"oid": "e2e0bfca3b7f52c344840beb06446b410eaba083"}, "originalPosition": 52}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4346, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}