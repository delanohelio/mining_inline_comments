{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDc1ODc4ODM3", "number": 5949, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xM1QxNjozNjo0OFrOEi49AA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xM1QxNjo0MToyMVrOEi4-cg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1MDIwMTYwOnYy", "diffSide": "RIGHT", "path": "pinot-controller/src/main/java/org/apache/pinot/controller/api/resources/ZookeeperResource.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xM1QxNjozNjo0OFrOHQ9s2g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xM1QxNzoyODozNVrOHQ-A2Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzU1MDE3MA==", "bodyText": "Are the trailing // needed for formatting, or some other purpose?", "url": "https://github.com/apache/pinot/pull/5949#discussion_r487550170", "createdAt": "2020-09-13T16:36:48Z", "author": {"login": "mayankshriv"}, "path": "pinot-controller/src/main/java/org/apache/pinot/controller/api/resources/ZookeeperResource.java", "diffHunk": "@@ -75,6 +80,63 @@ public String getData(\n     return null;\n   }\n \n+  @DELETE\n+  @Path(\"/zk/delete\")\n+  @Produces(MediaType.TEXT_PLAIN)\n+  @ApiOperation(value = \"Get content of the znode\")\n+  @ApiResponses(value = { //", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d3e86ad05f373d319b9648263097bf28ee903e48"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzU1NTI4OQ==", "bodyText": "just formatting", "url": "https://github.com/apache/pinot/pull/5949#discussion_r487555289", "createdAt": "2020-09-13T17:28:35Z", "author": {"login": "kishoreg"}, "path": "pinot-controller/src/main/java/org/apache/pinot/controller/api/resources/ZookeeperResource.java", "diffHunk": "@@ -75,6 +80,63 @@ public String getData(\n     return null;\n   }\n \n+  @DELETE\n+  @Path(\"/zk/delete\")\n+  @Produces(MediaType.TEXT_PLAIN)\n+  @ApiOperation(value = \"Get content of the znode\")\n+  @ApiResponses(value = { //", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzU1MDE3MA=="}, "originalCommit": {"oid": "d3e86ad05f373d319b9648263097bf28ee903e48"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1MDIwMjU0OnYy", "diffSide": "RIGHT", "path": "pinot-controller/src/main/java/org/apache/pinot/controller/api/resources/ZookeeperResource.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xM1QxNjozNzo1MFrOHQ9tTg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xM1QxNzoyODoyMlrOHQ-AxA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzU1MDI4Ng==", "bodyText": "value should be delete and not Get?", "url": "https://github.com/apache/pinot/pull/5949#discussion_r487550286", "createdAt": "2020-09-13T16:37:50Z", "author": {"login": "mayankshriv"}, "path": "pinot-controller/src/main/java/org/apache/pinot/controller/api/resources/ZookeeperResource.java", "diffHunk": "@@ -75,6 +80,63 @@ public String getData(\n     return null;\n   }\n \n+  @DELETE\n+  @Path(\"/zk/delete\")\n+  @Produces(MediaType.TEXT_PLAIN)\n+  @ApiOperation(value = \"Get content of the znode\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d3e86ad05f373d319b9648263097bf28ee903e48"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzU1NTI2OA==", "bodyText": "fixed", "url": "https://github.com/apache/pinot/pull/5949#discussion_r487555268", "createdAt": "2020-09-13T17:28:22Z", "author": {"login": "kishoreg"}, "path": "pinot-controller/src/main/java/org/apache/pinot/controller/api/resources/ZookeeperResource.java", "diffHunk": "@@ -75,6 +80,63 @@ public String getData(\n     return null;\n   }\n \n+  @DELETE\n+  @Path(\"/zk/delete\")\n+  @Produces(MediaType.TEXT_PLAIN)\n+  @ApiOperation(value = \"Get content of the znode\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzU1MDI4Ng=="}, "originalCommit": {"oid": "d3e86ad05f373d319b9648263097bf28ee903e48"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1MDIwMzYwOnYy", "diffSide": "RIGHT", "path": "pinot-controller/src/main/java/org/apache/pinot/controller/api/resources/ZookeeperResource.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xM1QxNjozOTozOVrOHQ9t6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xM1QxNjozOTozOVrOHQ9t6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzU1MDQ0Mg==", "bodyText": "The delete api seems a bit dangerous. Should we protect it to only allow deleting certain paths? Seems this api will allow deleting the entire cluster?", "url": "https://github.com/apache/pinot/pull/5949#discussion_r487550442", "createdAt": "2020-09-13T16:39:39Z", "author": {"login": "mayankshriv"}, "path": "pinot-controller/src/main/java/org/apache/pinot/controller/api/resources/ZookeeperResource.java", "diffHunk": "@@ -75,6 +80,63 @@ public String getData(\n     return null;\n   }\n \n+  @DELETE\n+  @Path(\"/zk/delete\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d3e86ad05f373d319b9648263097bf28ee903e48"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1MDIwNTMwOnYy", "diffSide": "RIGHT", "path": "pinot-controller/src/main/java/org/apache/pinot/controller/api/resources/ZookeeperResource.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xM1QxNjo0MToyMVrOHQ9uuQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xM1QxNzozMDowOFrOHQ-BZg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzU1MDY0OQ==", "bodyText": "Will this allow any arbitrary path to be set with any arbitrary value (as-in possibly corrupt the cluster state)?", "url": "https://github.com/apache/pinot/pull/5949#discussion_r487550649", "createdAt": "2020-09-13T16:41:21Z", "author": {"login": "mayankshriv"}, "path": "pinot-controller/src/main/java/org/apache/pinot/controller/api/resources/ZookeeperResource.java", "diffHunk": "@@ -75,6 +80,63 @@ public String getData(\n     return null;\n   }\n \n+  @DELETE\n+  @Path(\"/zk/delete\")\n+  @Produces(MediaType.TEXT_PLAIN)\n+  @ApiOperation(value = \"Get content of the znode\")\n+  @ApiResponses(value = { //\n+      @ApiResponse(code = 200, message = \"Success\"), //\n+      @ApiResponse(code = 404, message = \"ZK Path not found\"), //\n+      @ApiResponse(code = 204, message = \"No Content\"), //\n+      @ApiResponse(code = 500, message = \"Internal server error\")})\n+  public SuccessResponse delete(\n+      @ApiParam(value = \"Zookeeper Path, must start with /\", required = true, defaultValue = \"/\") @QueryParam(\"path\") @DefaultValue(\"\") String path) {\n+\n+    path = validateAndNormalizeZKPath(path);\n+\n+    boolean success = pinotHelixResourceManager.deleteZKPath(path);\n+    if(success) {\n+      return new SuccessResponse(\"Successfully deleted path: \" + path);\n+    } else {\n+      throw new ControllerApplicationException(LOGGER, \"Failed to delete path: \" + path,\n+          Response.Status.INTERNAL_SERVER_ERROR);\n+    }\n+  }\n+\n+  @PUT\n+  @Path(\"/zk/put\")\n+  @Produces(MediaType.TEXT_PLAIN)\n+  @ApiOperation(value = \"Get content of the znode\")\n+  @ApiResponses(value = { //\n+      @ApiResponse(code = 200, message = \"Success\"), //\n+      @ApiResponse(code = 404, message = \"ZK Path not found\"), //\n+      @ApiResponse(code = 204, message = \"No Content\"), //\n+      @ApiResponse(code = 500, message = \"Internal server error\")})\n+  public SuccessResponse putData(\n+      @ApiParam(value = \"Zookeeper Path, must start with /\", required = true, defaultValue = \"/\") @QueryParam(\"path\") @DefaultValue(\"\") String path,\n+      @ApiParam(value = \"Content\", required = true) @QueryParam(\"data\") @DefaultValue(\"\") String content,\n+      @ApiParam(value = \"expectedVersion\", required = true, defaultValue = \"-1\") @QueryParam(\"expectedVersion\") @DefaultValue(\"-1\") String expectedVersion,\n+      @ApiParam(value = \"accessOption\", required = true, defaultValue = \"1\") @QueryParam(\"accessOption\") @DefaultValue(\"1\") String accessOption) {\n+    path = validateAndNormalizeZKPath(path);\n+    ZNRecord record = null;\n+    if (content != null) {\n+      record = (ZNRecord) _znRecordSerializer.deserialize(content.getBytes(Charsets.UTF_8));\n+    }\n+    try {\n+      boolean result = pinotHelixResourceManager", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d3e86ad05f373d319b9648263097bf28ee903e48"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzU1NTQzMA==", "bodyText": "yes. ZK does allow that. However, the UI will only allow updating the leaf node.", "url": "https://github.com/apache/pinot/pull/5949#discussion_r487555430", "createdAt": "2020-09-13T17:30:08Z", "author": {"login": "kishoreg"}, "path": "pinot-controller/src/main/java/org/apache/pinot/controller/api/resources/ZookeeperResource.java", "diffHunk": "@@ -75,6 +80,63 @@ public String getData(\n     return null;\n   }\n \n+  @DELETE\n+  @Path(\"/zk/delete\")\n+  @Produces(MediaType.TEXT_PLAIN)\n+  @ApiOperation(value = \"Get content of the znode\")\n+  @ApiResponses(value = { //\n+      @ApiResponse(code = 200, message = \"Success\"), //\n+      @ApiResponse(code = 404, message = \"ZK Path not found\"), //\n+      @ApiResponse(code = 204, message = \"No Content\"), //\n+      @ApiResponse(code = 500, message = \"Internal server error\")})\n+  public SuccessResponse delete(\n+      @ApiParam(value = \"Zookeeper Path, must start with /\", required = true, defaultValue = \"/\") @QueryParam(\"path\") @DefaultValue(\"\") String path) {\n+\n+    path = validateAndNormalizeZKPath(path);\n+\n+    boolean success = pinotHelixResourceManager.deleteZKPath(path);\n+    if(success) {\n+      return new SuccessResponse(\"Successfully deleted path: \" + path);\n+    } else {\n+      throw new ControllerApplicationException(LOGGER, \"Failed to delete path: \" + path,\n+          Response.Status.INTERNAL_SERVER_ERROR);\n+    }\n+  }\n+\n+  @PUT\n+  @Path(\"/zk/put\")\n+  @Produces(MediaType.TEXT_PLAIN)\n+  @ApiOperation(value = \"Get content of the znode\")\n+  @ApiResponses(value = { //\n+      @ApiResponse(code = 200, message = \"Success\"), //\n+      @ApiResponse(code = 404, message = \"ZK Path not found\"), //\n+      @ApiResponse(code = 204, message = \"No Content\"), //\n+      @ApiResponse(code = 500, message = \"Internal server error\")})\n+  public SuccessResponse putData(\n+      @ApiParam(value = \"Zookeeper Path, must start with /\", required = true, defaultValue = \"/\") @QueryParam(\"path\") @DefaultValue(\"\") String path,\n+      @ApiParam(value = \"Content\", required = true) @QueryParam(\"data\") @DefaultValue(\"\") String content,\n+      @ApiParam(value = \"expectedVersion\", required = true, defaultValue = \"-1\") @QueryParam(\"expectedVersion\") @DefaultValue(\"-1\") String expectedVersion,\n+      @ApiParam(value = \"accessOption\", required = true, defaultValue = \"1\") @QueryParam(\"accessOption\") @DefaultValue(\"1\") String accessOption) {\n+    path = validateAndNormalizeZKPath(path);\n+    ZNRecord record = null;\n+    if (content != null) {\n+      record = (ZNRecord) _znRecordSerializer.deserialize(content.getBytes(Charsets.UTF_8));\n+    }\n+    try {\n+      boolean result = pinotHelixResourceManager", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzU1MDY0OQ=="}, "originalCommit": {"oid": "d3e86ad05f373d319b9648263097bf28ee903e48"}, "originalPosition": 73}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3823, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}