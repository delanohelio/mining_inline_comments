{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDUyOTIxMjk3", "number": 5718, "reviewThreads": {"totalCount": 45, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxNTo1MjoxMlrOEQQ5JQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxNjoxNTo1NFrOEam2gg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1NDg5NDQ1OnYy", "diffSide": "RIGHT", "path": "pinot-controller/src/main/java/org/apache/pinot/controller/api/resources/PinotSegmentRestletResource.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxNTo1MjoxMlrOG0Ue1g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQyMDo0NzowMVrOG6Vy6w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzUxNDcxMA==", "bodyText": "Is your IDE set to pinot coding guidelines?", "url": "https://github.com/apache/pinot/pull/5718#discussion_r457514710", "createdAt": "2020-07-20T15:52:12Z", "author": {"login": "mcvsubbu"}, "path": "pinot-controller/src/main/java/org/apache/pinot/controller/api/resources/PinotSegmentRestletResource.java", "diffHunk": "@@ -176,23 +198,23 @@\n   @Produces(MediaType.APPLICATION_JSON)\n   @ApiOperation(value = \"Get a map from server to segments hosted by the server (deprecated, use 'GET /segments/{tableName}/servers' instead)\", notes = \"Get a map from server to segments hosted by the server (deprecated, use 'GET /segments/{tableName}/servers' instead)\")\n   public List<Map<String, String>> getServerToSegmentsMapDeprecated1(\n-      @ApiParam(value = \"Name of the table\", required = true) @PathParam(\"tableName\") String tableName,\n-      @ApiParam(value = \"MUST be null\") @QueryParam(\"state\") String stateStr,\n-      @ApiParam(value = \"OFFLINE|REALTIME\") @QueryParam(\"type\") String tableTypeStr)\n-      throws JsonProcessingException {\n+          @ApiParam(value = \"Name of the table\", required = true) @PathParam(\"tableName\") String tableName,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6914c3249a31572d29a6f00e5b8f378aabfca3e1"}, "originalPosition": 98}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzgyNzY5MQ==", "bodyText": "Yes, there was some issue with my IDE itself. I updated the coding guidelines again and reformatted the files.", "url": "https://github.com/apache/pinot/pull/5718#discussion_r463827691", "createdAt": "2020-07-31T20:47:01Z", "author": {"login": "guruguha"}, "path": "pinot-controller/src/main/java/org/apache/pinot/controller/api/resources/PinotSegmentRestletResource.java", "diffHunk": "@@ -176,23 +198,23 @@\n   @Produces(MediaType.APPLICATION_JSON)\n   @ApiOperation(value = \"Get a map from server to segments hosted by the server (deprecated, use 'GET /segments/{tableName}/servers' instead)\", notes = \"Get a map from server to segments hosted by the server (deprecated, use 'GET /segments/{tableName}/servers' instead)\")\n   public List<Map<String, String>> getServerToSegmentsMapDeprecated1(\n-      @ApiParam(value = \"Name of the table\", required = true) @PathParam(\"tableName\") String tableName,\n-      @ApiParam(value = \"MUST be null\") @QueryParam(\"state\") String stateStr,\n-      @ApiParam(value = \"OFFLINE|REALTIME\") @QueryParam(\"type\") String tableTypeStr)\n-      throws JsonProcessingException {\n+          @ApiParam(value = \"Name of the table\", required = true) @PathParam(\"tableName\") String tableName,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzUxNDcxMA=="}, "originalCommit": {"oid": "6914c3249a31572d29a6f00e5b8f378aabfca3e1"}, "originalPosition": 98}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1NDkxNTQzOnYy", "diffSide": "RIGHT", "path": "pinot-controller/src/main/java/org/apache/pinot/controller/api/resources/PinotSegmentRestletResource.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxNTo1NjowOFrOG0Urbg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wMVQwMDowNDoyMVrOG6ZuqQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzUxNzkzNA==", "bodyText": "If you are returning 404 (NOT_FOUND) then please do not use \"Failed\" in the exception message. Since the exception is invalid config, determine what is invalid and throw that exception, may be as 400 (BAD_REQUEST)", "url": "https://github.com/apache/pinot/pull/5718#discussion_r457517934", "createdAt": "2020-07-20T15:56:08Z", "author": {"login": "mcvsubbu"}, "path": "pinot-controller/src/main/java/org/apache/pinot/controller/api/resources/PinotSegmentRestletResource.java", "diffHunk": "@@ -485,4 +493,91 @@ private void deleteSegmentsInternal(String tableNameWithType, List<String> segme\n       throw new ControllerApplicationException(LOGGER, e.getMessage(), Response.Status.FORBIDDEN);\n     }\n   }\n+\n+  @GET\n+  @Path(\"segments/{tableName}/reload-status\")\n+  @Produces(MediaType.APPLICATION_JSON)\n+  @ApiOperation(value = \"Status of segment reload\", notes = \"Status of segment reload\")\n+  public Map<String, TableMetadataReader.TableReloadStatus> getReloadStatus(\n+          @ApiParam(value = \"Name of the table\", required = true) @PathParam(\"tableName\") String tableName,\n+          @ApiParam(value = \"OFFLINE|REALTIME\") @QueryParam(\"type\") String tableTypeStr) {\n+    List<String> tableNamesWithType = getExistingTableNamesWithType(tableName, Constants.validateTableType(tableTypeStr));\n+    Map<String, TableMetadataReader.TableReloadStatus> reloadStatusMap = new HashMap<>();\n+    for (String tableNameWithType : tableNamesWithType) {\n+      TableMetadataReader.TableReloadStatus tableReloadStatus = null;\n+      try {\n+        tableReloadStatus = getSegmentsReloadStatus(tableNameWithType);\n+      } catch (InvalidConfigException e) {\n+        throw new ControllerApplicationException(LOGGER,\n+                \"Failed to load segment reload status for table: \" + tableName, Status.NOT_FOUND);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6914c3249a31572d29a6f00e5b8f378aabfca3e1"}, "originalPosition": 377}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzg5MjEzNw==", "bodyText": "Updated in latest commit.", "url": "https://github.com/apache/pinot/pull/5718#discussion_r463892137", "createdAt": "2020-08-01T00:04:21Z", "author": {"login": "guruguha"}, "path": "pinot-controller/src/main/java/org/apache/pinot/controller/api/resources/PinotSegmentRestletResource.java", "diffHunk": "@@ -485,4 +493,91 @@ private void deleteSegmentsInternal(String tableNameWithType, List<String> segme\n       throw new ControllerApplicationException(LOGGER, e.getMessage(), Response.Status.FORBIDDEN);\n     }\n   }\n+\n+  @GET\n+  @Path(\"segments/{tableName}/reload-status\")\n+  @Produces(MediaType.APPLICATION_JSON)\n+  @ApiOperation(value = \"Status of segment reload\", notes = \"Status of segment reload\")\n+  public Map<String, TableMetadataReader.TableReloadStatus> getReloadStatus(\n+          @ApiParam(value = \"Name of the table\", required = true) @PathParam(\"tableName\") String tableName,\n+          @ApiParam(value = \"OFFLINE|REALTIME\") @QueryParam(\"type\") String tableTypeStr) {\n+    List<String> tableNamesWithType = getExistingTableNamesWithType(tableName, Constants.validateTableType(tableTypeStr));\n+    Map<String, TableMetadataReader.TableReloadStatus> reloadStatusMap = new HashMap<>();\n+    for (String tableNameWithType : tableNamesWithType) {\n+      TableMetadataReader.TableReloadStatus tableReloadStatus = null;\n+      try {\n+        tableReloadStatus = getSegmentsReloadStatus(tableNameWithType);\n+      } catch (InvalidConfigException e) {\n+        throw new ControllerApplicationException(LOGGER,\n+                \"Failed to load segment reload status for table: \" + tableName, Status.NOT_FOUND);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzUxNzkzNA=="}, "originalCommit": {"oid": "6914c3249a31572d29a6f00e5b8f378aabfca3e1"}, "originalPosition": 377}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1NDkyMDc2OnYy", "diffSide": "RIGHT", "path": "pinot-controller/src/main/java/org/apache/pinot/controller/api/resources/PinotSegmentRestletResource.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxNTo1NzowOFrOG0Uuog==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxNTo1NzowOFrOG0Uuog==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzUxODc1NA==", "bodyText": "The exception message reads as if the table is not found. That is not the case, right?", "url": "https://github.com/apache/pinot/pull/5718#discussion_r457518754", "createdAt": "2020-07-20T15:57:08Z", "author": {"login": "mcvsubbu"}, "path": "pinot-controller/src/main/java/org/apache/pinot/controller/api/resources/PinotSegmentRestletResource.java", "diffHunk": "@@ -485,4 +493,91 @@ private void deleteSegmentsInternal(String tableNameWithType, List<String> segme\n       throw new ControllerApplicationException(LOGGER, e.getMessage(), Response.Status.FORBIDDEN);\n     }\n   }\n+\n+  @GET\n+  @Path(\"segments/{tableName}/reload-status\")\n+  @Produces(MediaType.APPLICATION_JSON)\n+  @ApiOperation(value = \"Status of segment reload\", notes = \"Status of segment reload\")\n+  public Map<String, TableMetadataReader.TableReloadStatus> getReloadStatus(\n+          @ApiParam(value = \"Name of the table\", required = true) @PathParam(\"tableName\") String tableName,\n+          @ApiParam(value = \"OFFLINE|REALTIME\") @QueryParam(\"type\") String tableTypeStr) {\n+    List<String> tableNamesWithType = getExistingTableNamesWithType(tableName, Constants.validateTableType(tableTypeStr));\n+    Map<String, TableMetadataReader.TableReloadStatus> reloadStatusMap = new HashMap<>();\n+    for (String tableNameWithType : tableNamesWithType) {\n+      TableMetadataReader.TableReloadStatus tableReloadStatus = null;\n+      try {\n+        tableReloadStatus = getSegmentsReloadStatus(tableNameWithType);\n+      } catch (InvalidConfigException e) {\n+        throw new ControllerApplicationException(LOGGER,\n+                \"Failed to load segment reload status for table: \" + tableName, Status.NOT_FOUND);\n+      }\n+      if (Objects.isNull(tableReloadStatus))\n+        throw new ControllerApplicationException(LOGGER,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6914c3249a31572d29a6f00e5b8f378aabfca3e1"}, "originalPosition": 380}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1NDkyMTk1OnYy", "diffSide": "RIGHT", "path": "pinot-controller/src/main/java/org/apache/pinot/controller/api/resources/PinotSegmentRestletResource.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxNTo1NzoyNlrOG0UvcA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxNTo1NzoyNlrOG0UvcA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzUxODk2MA==", "bodyText": "If there are no tables found, then this is the place to throw 404", "url": "https://github.com/apache/pinot/pull/5718#discussion_r457518960", "createdAt": "2020-07-20T15:57:26Z", "author": {"login": "mcvsubbu"}, "path": "pinot-controller/src/main/java/org/apache/pinot/controller/api/resources/PinotSegmentRestletResource.java", "diffHunk": "@@ -485,4 +493,91 @@ private void deleteSegmentsInternal(String tableNameWithType, List<String> segme\n       throw new ControllerApplicationException(LOGGER, e.getMessage(), Response.Status.FORBIDDEN);\n     }\n   }\n+\n+  @GET\n+  @Path(\"segments/{tableName}/reload-status\")\n+  @Produces(MediaType.APPLICATION_JSON)\n+  @ApiOperation(value = \"Status of segment reload\", notes = \"Status of segment reload\")\n+  public Map<String, TableMetadataReader.TableReloadStatus> getReloadStatus(\n+          @ApiParam(value = \"Name of the table\", required = true) @PathParam(\"tableName\") String tableName,\n+          @ApiParam(value = \"OFFLINE|REALTIME\") @QueryParam(\"type\") String tableTypeStr) {\n+    List<String> tableNamesWithType = getExistingTableNamesWithType(tableName, Constants.validateTableType(tableTypeStr));\n+    Map<String, TableMetadataReader.TableReloadStatus> reloadStatusMap = new HashMap<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6914c3249a31572d29a6f00e5b8f378aabfca3e1"}, "originalPosition": 370}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1NDk0MDY4OnYy", "diffSide": "RIGHT", "path": "pinot-controller/src/main/java/org/apache/pinot/controller/api/resources/PinotSegmentRestletResource.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxNjowMDo0NlrOG0U57w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxNjowMDo0NlrOG0U57w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzUyMTY0Nw==", "bodyText": "remove these trace logs please", "url": "https://github.com/apache/pinot/pull/5718#discussion_r457521647", "createdAt": "2020-07-20T16:00:46Z", "author": {"login": "mcvsubbu"}, "path": "pinot-controller/src/main/java/org/apache/pinot/controller/api/resources/PinotSegmentRestletResource.java", "diffHunk": "@@ -485,4 +493,91 @@ private void deleteSegmentsInternal(String tableNameWithType, List<String> segme\n       throw new ControllerApplicationException(LOGGER, e.getMessage(), Response.Status.FORBIDDEN);\n     }\n   }\n+\n+  @GET\n+  @Path(\"segments/{tableName}/reload-status\")\n+  @Produces(MediaType.APPLICATION_JSON)\n+  @ApiOperation(value = \"Status of segment reload\", notes = \"Status of segment reload\")\n+  public Map<String, TableMetadataReader.TableReloadStatus> getReloadStatus(\n+          @ApiParam(value = \"Name of the table\", required = true) @PathParam(\"tableName\") String tableName,\n+          @ApiParam(value = \"OFFLINE|REALTIME\") @QueryParam(\"type\") String tableTypeStr) {\n+    List<String> tableNamesWithType = getExistingTableNamesWithType(tableName, Constants.validateTableType(tableTypeStr));\n+    Map<String, TableMetadataReader.TableReloadStatus> reloadStatusMap = new HashMap<>();\n+    for (String tableNameWithType : tableNamesWithType) {\n+      TableMetadataReader.TableReloadStatus tableReloadStatus = null;\n+      try {\n+        tableReloadStatus = getSegmentsReloadStatus(tableNameWithType);\n+      } catch (InvalidConfigException e) {\n+        throw new ControllerApplicationException(LOGGER,\n+                \"Failed to load segment reload status for table: \" + tableName, Status.NOT_FOUND);\n+      }\n+      if (Objects.isNull(tableReloadStatus))\n+        throw new ControllerApplicationException(LOGGER,\n+                \"Table: \" + tableName + \" not found.\", Status.NOT_FOUND);\n+      reloadStatusMap.put(tableNameWithType, tableReloadStatus);\n+    }\n+    return reloadStatusMap;\n+  }\n+\n+  private TableMetadataReader.TableReloadStatus getSegmentsReloadStatus(String tableNameWithType)\n+          throws InvalidConfigException {\n+    final Map<String, List<String>> serversToSegmentsMap =\n+            _pinotHelixResourceManager.getServerToSegmentsMap(tableNameWithType);\n+    TableMetadataReader tableMetadataReader =\n+            new TableMetadataReader(_executor, _connectionManager, _pinotHelixResourceManager);\n+    return tableMetadataReader.getReloadStatus(tableNameWithType, serversToSegmentsMap,\n+            _controllerConf.getServerAdminRequestTimeoutSeconds() * 1000);\n+  }\n+\n+  @GET\n+  @Path(\"segments/{tableName}/metadata\")\n+  @Produces(MediaType.APPLICATION_JSON)\n+  @ApiOperation(value = \"Get the metadata for a segment\", notes = \"Get the metadata for a segment\")\n+  public Map<String, String> getServerMetadata(@ApiParam(value = \"Name of the table\", required = true) @PathParam(\"tableName\") String tableName,\n+                                               @ApiParam(value = \"OFFLINE|REALTIME\") @QueryParam(\"type\") String tableTypeStr) {\n+    TableType tableType = Constants.validateTableType(tableTypeStr);\n+    if (tableType == TableType.REALTIME)\n+      throw new ControllerApplicationException(LOGGER,\n+              \"Table type : \" + tableTypeStr + \" not yet supported.\", Status.NOT_IMPLEMENTED);\n+\n+    List<String> tableNamesWithType = getExistingTableNamesWithType(tableName, Constants.validateTableType(tableTypeStr));\n+    Map<String, String> segmentsMetadata = null;\n+    try {\n+      segmentsMetadata = getSegmentsMetadataFromServer(tableNamesWithType.get(0));\n+    } catch (InvalidConfigException e) {\n+      throw new ControllerApplicationException(LOGGER,\n+              \"Failed to load segment reload status for table: \" + tableName, Status.NOT_FOUND);\n+    } catch (IOException ioe) {\n+      throw new ControllerApplicationException(LOGGER,\n+              \"Error parsing response to cluster config!\", Response.Status.BAD_REQUEST, ioe);\n+    }\n+    if (segmentsMetadata == null)\n+      throw new ControllerApplicationException(LOGGER,\n+              \"Table: \" + tableName + \" not found.\", Status.NOT_FOUND);\n+    return segmentsMetadata;\n+  }\n+\n+  private Map<String, String> getSegmentsMetadataFromServer(String tableNameWithType)\n+          throws InvalidConfigException, IOException {\n+    LOGGER.trace(\"Inside getSegmentsMetadataFromServer() entry\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6914c3249a31572d29a6f00e5b8f378aabfca3e1"}, "originalPosition": 427}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1NDk0OTM3OnYy", "diffSide": "RIGHT", "path": "pinot-controller/src/main/java/org/apache/pinot/controller/api/resources/ServerSegmentMetadataReader.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxNjowMjoyNlrOG0U--A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxNjowMjoyNlrOG0U--A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzUyMjkzNg==", "bodyText": "thy is this class in controller/api/resources? It should be inside controller/util", "url": "https://github.com/apache/pinot/pull/5718#discussion_r457522936", "createdAt": "2020-07-20T16:02:26Z", "author": {"login": "mcvsubbu"}, "path": "pinot-controller/src/main/java/org/apache/pinot/controller/api/resources/ServerSegmentMetadataReader.java", "diffHunk": "@@ -0,0 +1,121 @@\n+package org.apache.pinot.controller.api.resources;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.google.common.collect.BiMap;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.concurrent.CompletionService;\n+import java.util.concurrent.Executor;\n+import org.apache.commons.httpclient.HttpConnectionManager;\n+import org.apache.commons.httpclient.URI;\n+import org.apache.commons.httpclient.methods.GetMethod;\n+import org.apache.pinot.common.http.MultiGetRequest;\n+import org.apache.pinot.common.restlet.resources.SegmentStatus;\n+import org.apache.pinot.spi.utils.JsonUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class ServerSegmentMetadataReader {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6914c3249a31572d29a6f00e5b8f378aabfca3e1"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2NTQ0NjgwOnYy", "diffSide": "RIGHT", "path": "pinot-controller/src/main/java/org/apache/pinot/controller/api/resources/PinotSegmentRestletResource.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwMTowNDoxNVrOG15OPA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNlQwNzowNzoxMVrOG3KC_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTE2NTI0NA==", "bodyText": "there seems to be some unnecessary formatting/whitespaces on all methods of this file. Could you revert those? you should be able to auto-format using the IDE\nsame comment for TablesResourceTest file", "url": "https://github.com/apache/pinot/pull/5718#discussion_r459165244", "createdAt": "2020-07-23T01:04:15Z", "author": {"login": "npawar"}, "path": "pinot-controller/src/main/java/org/apache/pinot/controller/api/resources/PinotSegmentRestletResource.java", "diffHunk": "@@ -128,20 +137,33 @@\n @Api(tags = Constants.SEGMENT_TAG)\n @Path(\"/\")\n public class PinotSegmentRestletResource {\n-  private static Logger LOGGER = LoggerFactory.getLogger(PinotSegmentRestletResource.class);\n+  private static final Logger LOGGER = LoggerFactory.getLogger(PinotSegmentRestletResource.class);\n+\n+  @Inject\n+  ControllerConf _controllerConf;\n \n   @Inject\n   PinotHelixResourceManager _pinotHelixResourceManager;\n \n+  @Inject\n+  Executor _executor;\n+\n+  @Inject\n+  HttpConnectionManager _connectionManager;\n+\n+  @Inject\n+  ControllerMetrics _controllerMetrics;\n+\n+\n   @GET\n   @Produces(MediaType.APPLICATION_JSON)\n   @Path(\"/segments/{tableName}\")\n   @ApiOperation(value = \"List all segments\", notes = \"List all segments\")\n   public List<Map<TableType, List<String>>> getSegments(\n-      @ApiParam(value = \"Name of the table\", required = true) @PathParam(\"tableName\") String tableName,\n-      @ApiParam(value = \"OFFLINE|REALTIME\") @QueryParam(\"type\") String tableTypeStr) {\n+          @ApiParam(value = \"Name of the table\", required = true) @PathParam(\"tableName\") String tableName,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7e31c1136090a48823c1a159d8608f37375a0096"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDQ4OTQ2OQ==", "bodyText": "Some setting on my IDE got changed for the Pinot checkstyle. Have updated it again. Should be fixed in my next commit.", "url": "https://github.com/apache/pinot/pull/5718#discussion_r460489469", "createdAt": "2020-07-26T07:07:11Z", "author": {"login": "guruguha"}, "path": "pinot-controller/src/main/java/org/apache/pinot/controller/api/resources/PinotSegmentRestletResource.java", "diffHunk": "@@ -128,20 +137,33 @@\n @Api(tags = Constants.SEGMENT_TAG)\n @Path(\"/\")\n public class PinotSegmentRestletResource {\n-  private static Logger LOGGER = LoggerFactory.getLogger(PinotSegmentRestletResource.class);\n+  private static final Logger LOGGER = LoggerFactory.getLogger(PinotSegmentRestletResource.class);\n+\n+  @Inject\n+  ControllerConf _controllerConf;\n \n   @Inject\n   PinotHelixResourceManager _pinotHelixResourceManager;\n \n+  @Inject\n+  Executor _executor;\n+\n+  @Inject\n+  HttpConnectionManager _connectionManager;\n+\n+  @Inject\n+  ControllerMetrics _controllerMetrics;\n+\n+\n   @GET\n   @Produces(MediaType.APPLICATION_JSON)\n   @Path(\"/segments/{tableName}\")\n   @ApiOperation(value = \"List all segments\", notes = \"List all segments\")\n   public List<Map<TableType, List<String>>> getSegments(\n-      @ApiParam(value = \"Name of the table\", required = true) @PathParam(\"tableName\") String tableName,\n-      @ApiParam(value = \"OFFLINE|REALTIME\") @QueryParam(\"type\") String tableTypeStr) {\n+          @ApiParam(value = \"Name of the table\", required = true) @PathParam(\"tableName\") String tableName,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTE2NTI0NA=="}, "originalCommit": {"oid": "7e31c1136090a48823c1a159d8608f37375a0096"}, "originalPosition": 68}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2NTQ0OTM5OnYy", "diffSide": "LEFT", "path": "pinot-controller/src/main/java/org/apache/pinot/controller/api/resources/PinotSegmentRestletResource.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwMTowNTo0OFrOG15PnA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNlQwNzo0MDoxOVrOG3KPeA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTE2NTU5Ng==", "bodyText": "i could spot no change in this method vs same method moved at the bottom. can we keep it here, so that the scope of review stays limited to the actual changes?", "url": "https://github.com/apache/pinot/pull/5718#discussion_r459165596", "createdAt": "2020-07-23T01:05:48Z", "author": {"login": "npawar"}, "path": "pinot-controller/src/main/java/org/apache/pinot/controller/api/resources/PinotSegmentRestletResource.java", "diffHunk": "@@ -246,21 +268,7 @@\n       return segmentMetadata;\n     } else {\n       throw new ControllerApplicationException(LOGGER,\n-          \"Failed to find segment: \" + segmentName + \" in table: \" + tableName, Status.NOT_FOUND);\n-    }\n-  }\n-\n-  @Nullable", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7e31c1136090a48823c1a159d8608f37375a0096"}, "originalPosition": 172}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDQ5MjY2NA==", "bodyText": "my bad.", "url": "https://github.com/apache/pinot/pull/5718#discussion_r460492664", "createdAt": "2020-07-26T07:40:19Z", "author": {"login": "guruguha"}, "path": "pinot-controller/src/main/java/org/apache/pinot/controller/api/resources/PinotSegmentRestletResource.java", "diffHunk": "@@ -246,21 +268,7 @@\n       return segmentMetadata;\n     } else {\n       throw new ControllerApplicationException(LOGGER,\n-          \"Failed to find segment: \" + segmentName + \" in table: \" + tableName, Status.NOT_FOUND);\n-    }\n-  }\n-\n-  @Nullable", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTE2NTU5Ng=="}, "originalCommit": {"oid": "7e31c1136090a48823c1a159d8608f37375a0096"}, "originalPosition": 172}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3NDE4MTUxOnYy", "diffSide": "RIGHT", "path": "pinot-controller/src/main/java/org/apache/pinot/controller/api/resources/PinotSegmentRestletResource.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNlQwMjozODoyOVrOG3I03Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNlQwNzo0NTo1MFrOG3KRew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDQ2OTQ2OQ==", "bodyText": "is there a better return code for this? NOT_FOUND suggests that the table was not found", "url": "https://github.com/apache/pinot/pull/5718#discussion_r460469469", "createdAt": "2020-07-26T02:38:29Z", "author": {"login": "npawar"}, "path": "pinot-controller/src/main/java/org/apache/pinot/controller/api/resources/PinotSegmentRestletResource.java", "diffHunk": "@@ -485,4 +493,91 @@ private void deleteSegmentsInternal(String tableNameWithType, List<String> segme\n       throw new ControllerApplicationException(LOGGER, e.getMessage(), Response.Status.FORBIDDEN);\n     }\n   }\n+\n+  @GET\n+  @Path(\"segments/{tableName}/reload-status\")\n+  @Produces(MediaType.APPLICATION_JSON)\n+  @ApiOperation(value = \"Status of segment reload\", notes = \"Status of segment reload\")\n+  public Map<String, TableMetadataReader.TableReloadStatus> getReloadStatus(\n+          @ApiParam(value = \"Name of the table\", required = true) @PathParam(\"tableName\") String tableName,\n+          @ApiParam(value = \"OFFLINE|REALTIME\") @QueryParam(\"type\") String tableTypeStr) {\n+    List<String> tableNamesWithType = getExistingTableNamesWithType(tableName, Constants.validateTableType(tableTypeStr));\n+    Map<String, TableMetadataReader.TableReloadStatus> reloadStatusMap = new HashMap<>();\n+    for (String tableNameWithType : tableNamesWithType) {\n+      TableMetadataReader.TableReloadStatus tableReloadStatus = null;\n+      try {\n+        tableReloadStatus = getSegmentsReloadStatus(tableNameWithType);\n+      } catch (InvalidConfigException e) {\n+        throw new ControllerApplicationException(LOGGER,\n+                \"Failed to load segment reload status for table: \" + tableName, Status.NOT_FOUND);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7e31c1136090a48823c1a159d8608f37375a0096"}, "originalPosition": 377}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDQ5MzE3OQ==", "bodyText": "since it is a propagated exception, it is better to have the message originally thrown. Updating the same.", "url": "https://github.com/apache/pinot/pull/5718#discussion_r460493179", "createdAt": "2020-07-26T07:45:50Z", "author": {"login": "guruguha"}, "path": "pinot-controller/src/main/java/org/apache/pinot/controller/api/resources/PinotSegmentRestletResource.java", "diffHunk": "@@ -485,4 +493,91 @@ private void deleteSegmentsInternal(String tableNameWithType, List<String> segme\n       throw new ControllerApplicationException(LOGGER, e.getMessage(), Response.Status.FORBIDDEN);\n     }\n   }\n+\n+  @GET\n+  @Path(\"segments/{tableName}/reload-status\")\n+  @Produces(MediaType.APPLICATION_JSON)\n+  @ApiOperation(value = \"Status of segment reload\", notes = \"Status of segment reload\")\n+  public Map<String, TableMetadataReader.TableReloadStatus> getReloadStatus(\n+          @ApiParam(value = \"Name of the table\", required = true) @PathParam(\"tableName\") String tableName,\n+          @ApiParam(value = \"OFFLINE|REALTIME\") @QueryParam(\"type\") String tableTypeStr) {\n+    List<String> tableNamesWithType = getExistingTableNamesWithType(tableName, Constants.validateTableType(tableTypeStr));\n+    Map<String, TableMetadataReader.TableReloadStatus> reloadStatusMap = new HashMap<>();\n+    for (String tableNameWithType : tableNamesWithType) {\n+      TableMetadataReader.TableReloadStatus tableReloadStatus = null;\n+      try {\n+        tableReloadStatus = getSegmentsReloadStatus(tableNameWithType);\n+      } catch (InvalidConfigException e) {\n+        throw new ControllerApplicationException(LOGGER,\n+                \"Failed to load segment reload status for table: \" + tableName, Status.NOT_FOUND);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDQ2OTQ2OQ=="}, "originalCommit": {"oid": "7e31c1136090a48823c1a159d8608f37375a0096"}, "originalPosition": 377}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3NDE5NzYzOnYy", "diffSide": "RIGHT", "path": "pinot-controller/src/main/java/org/apache/pinot/controller/api/resources/ServerSegmentMetadataReader.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNlQwMzowNzowN1rOG3I8EA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNlQwMzowNzowN1rOG3I8EA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDQ3MTMxMg==", "bodyText": "nit: How about String.format for constructing these", "url": "https://github.com/apache/pinot/pull/5718#discussion_r460471312", "createdAt": "2020-07-26T03:07:07Z", "author": {"login": "npawar"}, "path": "pinot-controller/src/main/java/org/apache/pinot/controller/api/resources/ServerSegmentMetadataReader.java", "diffHunk": "@@ -0,0 +1,139 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.controller.api.resources;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.google.common.collect.BiMap;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.concurrent.CompletionService;\n+import java.util.concurrent.Executor;\n+import org.apache.commons.httpclient.HttpConnectionManager;\n+import org.apache.commons.httpclient.URI;\n+import org.apache.commons.httpclient.methods.GetMethod;\n+import org.apache.pinot.common.http.MultiGetRequest;\n+import org.apache.pinot.common.restlet.resources.SegmentStatus;\n+import org.apache.pinot.spi.utils.JsonUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class ServerSegmentMetadataReader {\n+  private static final Logger LOGGER = LoggerFactory.getLogger(ServerSegmentMetadataReader.class);\n+\n+  private final Executor _executor;\n+  private final HttpConnectionManager _connectionManager;\n+\n+  public ServerSegmentMetadataReader(Executor executor, HttpConnectionManager connectionManager) {\n+    _executor = executor;\n+    _connectionManager = connectionManager;\n+  }\n+\n+  public List<String> getSegmentMetadataFromServer(String tableNameWithType,\n+                                                   Map<String, List<String>> serversToSegmentsMap,\n+                                                   BiMap<String, String> endpoints, int timeoutMs) {\n+    LOGGER.info(\"Reading segment metadata from servers for table {}.\", tableNameWithType);\n+    List<String> serverURLs = new ArrayList<>();\n+    for (Map.Entry<String, List<String>> serverToSegments : serversToSegmentsMap.entrySet()) {\n+      List<String> segments = serverToSegments.getValue();\n+      for (String segment : segments) {\n+        serverURLs.add(generateSegmentMetadataServerURL(tableNameWithType, segment, endpoints.get(serverToSegments.getKey())));\n+      }\n+    }\n+    CompletionService<GetMethod> completionService =\n+            new MultiGetRequest(_executor, _connectionManager).execute(serverURLs, timeoutMs);\n+    List<String> segmentsMetadata = new ArrayList<>();\n+\n+    BiMap<String, String> endpointsToServers = endpoints.inverse();\n+    for (int i = 0; i < serverURLs.size(); i++) {\n+      GetMethod getMethod = null;\n+      try {\n+        getMethod = completionService.take().get();\n+        URI uri = getMethod.getURI();\n+        String instance = endpointsToServers.get(uri.getHost() + \":\" + uri.getPort());\n+        if (getMethod.getStatusCode() >= 300) {\n+          LOGGER.error(\"Server: {} returned error: {}\", instance, getMethod.getStatusCode());\n+          continue;\n+        }\n+        JsonNode segmentMetadata =\n+                JsonUtils.inputStreamToJsonNode(getMethod.getResponseBodyAsStream());\n+        segmentsMetadata.add(JsonUtils.objectToString(segmentMetadata));\n+        LOGGER.info(\"Updated segment metadata: {}\", segmentMetadata.size());\n+      } catch (Exception e) {\n+        // Ignore individual exceptions because the exception has been logged in MultiGetRequest\n+        // Log the number of failed servers after gathering all responses\n+      } finally {\n+        if (Objects.nonNull(getMethod)) {\n+          getMethod.releaseConnection();\n+        }\n+      }\n+    }\n+    return segmentsMetadata;\n+  }\n+\n+  private String generateSegmentMetadataServerURL(String tableNameWithType, String segmentName, String endpoint) {\n+    return \"http://\" + endpoint + \"/tables/\" + tableNameWithType + \"/segments/\" + segmentName + \"/metadata\";\n+  }\n+\n+  private String generateReloadStatusServerURL(String tableNameWithType, String segmentName, String endpoint) {\n+    return \"http://\" + endpoint + \"/tables/\" + tableNameWithType + \"/segments/\" + segmentName + \"/reload-status\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7e31c1136090a48823c1a159d8608f37375a0096"}, "originalPosition": 96}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3NDE5ODIxOnYy", "diffSide": "RIGHT", "path": "pinot-controller/src/main/java/org/apache/pinot/controller/api/resources/ServerSegmentMetadataReader.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNlQwMzowODoxN1rOG3I8Tw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNlQwMzowODoxN1rOG3I8Tw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDQ3MTM3NQ==", "bodyText": "nit: for readability\ns/serversToSegmentsMap/serverToSegments\ns/endpoints/serverToEndpoint", "url": "https://github.com/apache/pinot/pull/5718#discussion_r460471375", "createdAt": "2020-07-26T03:08:17Z", "author": {"login": "npawar"}, "path": "pinot-controller/src/main/java/org/apache/pinot/controller/api/resources/ServerSegmentMetadataReader.java", "diffHunk": "@@ -0,0 +1,139 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.controller.api.resources;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.google.common.collect.BiMap;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.concurrent.CompletionService;\n+import java.util.concurrent.Executor;\n+import org.apache.commons.httpclient.HttpConnectionManager;\n+import org.apache.commons.httpclient.URI;\n+import org.apache.commons.httpclient.methods.GetMethod;\n+import org.apache.pinot.common.http.MultiGetRequest;\n+import org.apache.pinot.common.restlet.resources.SegmentStatus;\n+import org.apache.pinot.spi.utils.JsonUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class ServerSegmentMetadataReader {\n+  private static final Logger LOGGER = LoggerFactory.getLogger(ServerSegmentMetadataReader.class);\n+\n+  private final Executor _executor;\n+  private final HttpConnectionManager _connectionManager;\n+\n+  public ServerSegmentMetadataReader(Executor executor, HttpConnectionManager connectionManager) {\n+    _executor = executor;\n+    _connectionManager = connectionManager;\n+  }\n+\n+  public List<String> getSegmentMetadataFromServer(String tableNameWithType,\n+                                                   Map<String, List<String>> serversToSegmentsMap,\n+                                                   BiMap<String, String> endpoints, int timeoutMs) {\n+    LOGGER.info(\"Reading segment metadata from servers for table {}.\", tableNameWithType);\n+    List<String> serverURLs = new ArrayList<>();\n+    for (Map.Entry<String, List<String>> serverToSegments : serversToSegmentsMap.entrySet()) {\n+      List<String> segments = serverToSegments.getValue();\n+      for (String segment : segments) {\n+        serverURLs.add(generateSegmentMetadataServerURL(tableNameWithType, segment, endpoints.get(serverToSegments.getKey())));\n+      }\n+    }\n+    CompletionService<GetMethod> completionService =\n+            new MultiGetRequest(_executor, _connectionManager).execute(serverURLs, timeoutMs);\n+    List<String> segmentsMetadata = new ArrayList<>();\n+\n+    BiMap<String, String> endpointsToServers = endpoints.inverse();\n+    for (int i = 0; i < serverURLs.size(); i++) {\n+      GetMethod getMethod = null;\n+      try {\n+        getMethod = completionService.take().get();\n+        URI uri = getMethod.getURI();\n+        String instance = endpointsToServers.get(uri.getHost() + \":\" + uri.getPort());\n+        if (getMethod.getStatusCode() >= 300) {\n+          LOGGER.error(\"Server: {} returned error: {}\", instance, getMethod.getStatusCode());\n+          continue;\n+        }\n+        JsonNode segmentMetadata =\n+                JsonUtils.inputStreamToJsonNode(getMethod.getResponseBodyAsStream());\n+        segmentsMetadata.add(JsonUtils.objectToString(segmentMetadata));\n+        LOGGER.info(\"Updated segment metadata: {}\", segmentMetadata.size());\n+      } catch (Exception e) {\n+        // Ignore individual exceptions because the exception has been logged in MultiGetRequest\n+        // Log the number of failed servers after gathering all responses\n+      } finally {\n+        if (Objects.nonNull(getMethod)) {\n+          getMethod.releaseConnection();\n+        }\n+      }\n+    }\n+    return segmentsMetadata;\n+  }\n+\n+  private String generateSegmentMetadataServerURL(String tableNameWithType, String segmentName, String endpoint) {\n+    return \"http://\" + endpoint + \"/tables/\" + tableNameWithType + \"/segments/\" + segmentName + \"/metadata\";\n+  }\n+\n+  private String generateReloadStatusServerURL(String tableNameWithType, String segmentName, String endpoint) {\n+    return \"http://\" + endpoint + \"/tables/\" + tableNameWithType + \"/segments/\" + segmentName + \"/reload-status\";\n+  }\n+\n+  public List<SegmentStatus> getSegmentReloadTime(String tableNameWithType,\n+                                                  Map<String, List<String>> serversToSegmentsMap,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7e31c1136090a48823c1a159d8608f37375a0096"}, "originalPosition": 100}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3NDIwMDMxOnYy", "diffSide": "RIGHT", "path": "pinot-controller/src/main/java/org/apache/pinot/controller/api/resources/ServerSegmentMetadataReader.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNlQwMzoxMjowN1rOG3I9Og==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNlQwNzoyMjozN1rOG3KIpg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDQ3MTYxMA==", "bodyText": "how about logging the message also here?", "url": "https://github.com/apache/pinot/pull/5718#discussion_r460471610", "createdAt": "2020-07-26T03:12:07Z", "author": {"login": "npawar"}, "path": "pinot-controller/src/main/java/org/apache/pinot/controller/api/resources/ServerSegmentMetadataReader.java", "diffHunk": "@@ -0,0 +1,139 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.controller.api.resources;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.google.common.collect.BiMap;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.concurrent.CompletionService;\n+import java.util.concurrent.Executor;\n+import org.apache.commons.httpclient.HttpConnectionManager;\n+import org.apache.commons.httpclient.URI;\n+import org.apache.commons.httpclient.methods.GetMethod;\n+import org.apache.pinot.common.http.MultiGetRequest;\n+import org.apache.pinot.common.restlet.resources.SegmentStatus;\n+import org.apache.pinot.spi.utils.JsonUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class ServerSegmentMetadataReader {\n+  private static final Logger LOGGER = LoggerFactory.getLogger(ServerSegmentMetadataReader.class);\n+\n+  private final Executor _executor;\n+  private final HttpConnectionManager _connectionManager;\n+\n+  public ServerSegmentMetadataReader(Executor executor, HttpConnectionManager connectionManager) {\n+    _executor = executor;\n+    _connectionManager = connectionManager;\n+  }\n+\n+  public List<String> getSegmentMetadataFromServer(String tableNameWithType,\n+                                                   Map<String, List<String>> serversToSegmentsMap,\n+                                                   BiMap<String, String> endpoints, int timeoutMs) {\n+    LOGGER.info(\"Reading segment metadata from servers for table {}.\", tableNameWithType);\n+    List<String> serverURLs = new ArrayList<>();\n+    for (Map.Entry<String, List<String>> serverToSegments : serversToSegmentsMap.entrySet()) {\n+      List<String> segments = serverToSegments.getValue();\n+      for (String segment : segments) {\n+        serverURLs.add(generateSegmentMetadataServerURL(tableNameWithType, segment, endpoints.get(serverToSegments.getKey())));\n+      }\n+    }\n+    CompletionService<GetMethod> completionService =\n+            new MultiGetRequest(_executor, _connectionManager).execute(serverURLs, timeoutMs);\n+    List<String> segmentsMetadata = new ArrayList<>();\n+\n+    BiMap<String, String> endpointsToServers = endpoints.inverse();\n+    for (int i = 0; i < serverURLs.size(); i++) {\n+      GetMethod getMethod = null;\n+      try {\n+        getMethod = completionService.take().get();\n+        URI uri = getMethod.getURI();\n+        String instance = endpointsToServers.get(uri.getHost() + \":\" + uri.getPort());\n+        if (getMethod.getStatusCode() >= 300) {\n+          LOGGER.error(\"Server: {} returned error: {}\", instance, getMethod.getStatusCode());\n+          continue;\n+        }\n+        JsonNode segmentMetadata =\n+                JsonUtils.inputStreamToJsonNode(getMethod.getResponseBodyAsStream());\n+        segmentsMetadata.add(JsonUtils.objectToString(segmentMetadata));\n+        LOGGER.info(\"Updated segment metadata: {}\", segmentMetadata.size());\n+      } catch (Exception e) {\n+        // Ignore individual exceptions because the exception has been logged in MultiGetRequest\n+        // Log the number of failed servers after gathering all responses\n+      } finally {\n+        if (Objects.nonNull(getMethod)) {\n+          getMethod.releaseConnection();\n+        }\n+      }\n+    }\n+    return segmentsMetadata;\n+  }\n+\n+  private String generateSegmentMetadataServerURL(String tableNameWithType, String segmentName, String endpoint) {\n+    return \"http://\" + endpoint + \"/tables/\" + tableNameWithType + \"/segments/\" + segmentName + \"/metadata\";\n+  }\n+\n+  private String generateReloadStatusServerURL(String tableNameWithType, String segmentName, String endpoint) {\n+    return \"http://\" + endpoint + \"/tables/\" + tableNameWithType + \"/segments/\" + segmentName + \"/reload-status\";\n+  }\n+\n+  public List<SegmentStatus> getSegmentReloadTime(String tableNameWithType,\n+                                                  Map<String, List<String>> serversToSegmentsMap,\n+                                                  BiMap<String, String> endpoints, int timeoutMs) {\n+    LOGGER.info(\"Reading segment reload status from servers for table {}.\", tableNameWithType);\n+    List<String> serverURLs = new ArrayList<>();\n+    for (Map.Entry<String, List<String>> serverToSegments : serversToSegmentsMap.entrySet()) {\n+      List<String> segments = serverToSegments.getValue();\n+      for (String segment : segments) {\n+        serverURLs.add(generateReloadStatusServerURL(tableNameWithType, segment, endpoints.get(serverToSegments.getKey())));\n+      }\n+    }\n+    CompletionService<GetMethod> completionService =\n+            new MultiGetRequest(_executor, _connectionManager).execute(serverURLs, timeoutMs);\n+    BiMap<String, String> endpointsToServers = endpoints.inverse();\n+    List<SegmentStatus> segmentsStatus = new ArrayList<>();\n+\n+    for (int i = 0; i < serverURLs.size(); i++) {\n+      GetMethod getMethod = null;\n+      try {\n+        getMethod = completionService.take().get();\n+        URI uri = getMethod.getURI();\n+        String instance = endpointsToServers.get(uri.getHost() + \":\" + uri.getPort());\n+        if (getMethod.getStatusCode() >= 300) {\n+          LOGGER.error(\"Server: {} returned error: {}\", instance, getMethod.getStatusCode());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7e31c1136090a48823c1a159d8608f37375a0096"}, "originalPosition": 122}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDQ5MDkxOA==", "bodyText": "Would the message be formatted in anyway or will it be a full stack trace?", "url": "https://github.com/apache/pinot/pull/5718#discussion_r460490918", "createdAt": "2020-07-26T07:22:37Z", "author": {"login": "guruguha"}, "path": "pinot-controller/src/main/java/org/apache/pinot/controller/api/resources/ServerSegmentMetadataReader.java", "diffHunk": "@@ -0,0 +1,139 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.controller.api.resources;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.google.common.collect.BiMap;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.concurrent.CompletionService;\n+import java.util.concurrent.Executor;\n+import org.apache.commons.httpclient.HttpConnectionManager;\n+import org.apache.commons.httpclient.URI;\n+import org.apache.commons.httpclient.methods.GetMethod;\n+import org.apache.pinot.common.http.MultiGetRequest;\n+import org.apache.pinot.common.restlet.resources.SegmentStatus;\n+import org.apache.pinot.spi.utils.JsonUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class ServerSegmentMetadataReader {\n+  private static final Logger LOGGER = LoggerFactory.getLogger(ServerSegmentMetadataReader.class);\n+\n+  private final Executor _executor;\n+  private final HttpConnectionManager _connectionManager;\n+\n+  public ServerSegmentMetadataReader(Executor executor, HttpConnectionManager connectionManager) {\n+    _executor = executor;\n+    _connectionManager = connectionManager;\n+  }\n+\n+  public List<String> getSegmentMetadataFromServer(String tableNameWithType,\n+                                                   Map<String, List<String>> serversToSegmentsMap,\n+                                                   BiMap<String, String> endpoints, int timeoutMs) {\n+    LOGGER.info(\"Reading segment metadata from servers for table {}.\", tableNameWithType);\n+    List<String> serverURLs = new ArrayList<>();\n+    for (Map.Entry<String, List<String>> serverToSegments : serversToSegmentsMap.entrySet()) {\n+      List<String> segments = serverToSegments.getValue();\n+      for (String segment : segments) {\n+        serverURLs.add(generateSegmentMetadataServerURL(tableNameWithType, segment, endpoints.get(serverToSegments.getKey())));\n+      }\n+    }\n+    CompletionService<GetMethod> completionService =\n+            new MultiGetRequest(_executor, _connectionManager).execute(serverURLs, timeoutMs);\n+    List<String> segmentsMetadata = new ArrayList<>();\n+\n+    BiMap<String, String> endpointsToServers = endpoints.inverse();\n+    for (int i = 0; i < serverURLs.size(); i++) {\n+      GetMethod getMethod = null;\n+      try {\n+        getMethod = completionService.take().get();\n+        URI uri = getMethod.getURI();\n+        String instance = endpointsToServers.get(uri.getHost() + \":\" + uri.getPort());\n+        if (getMethod.getStatusCode() >= 300) {\n+          LOGGER.error(\"Server: {} returned error: {}\", instance, getMethod.getStatusCode());\n+          continue;\n+        }\n+        JsonNode segmentMetadata =\n+                JsonUtils.inputStreamToJsonNode(getMethod.getResponseBodyAsStream());\n+        segmentsMetadata.add(JsonUtils.objectToString(segmentMetadata));\n+        LOGGER.info(\"Updated segment metadata: {}\", segmentMetadata.size());\n+      } catch (Exception e) {\n+        // Ignore individual exceptions because the exception has been logged in MultiGetRequest\n+        // Log the number of failed servers after gathering all responses\n+      } finally {\n+        if (Objects.nonNull(getMethod)) {\n+          getMethod.releaseConnection();\n+        }\n+      }\n+    }\n+    return segmentsMetadata;\n+  }\n+\n+  private String generateSegmentMetadataServerURL(String tableNameWithType, String segmentName, String endpoint) {\n+    return \"http://\" + endpoint + \"/tables/\" + tableNameWithType + \"/segments/\" + segmentName + \"/metadata\";\n+  }\n+\n+  private String generateReloadStatusServerURL(String tableNameWithType, String segmentName, String endpoint) {\n+    return \"http://\" + endpoint + \"/tables/\" + tableNameWithType + \"/segments/\" + segmentName + \"/reload-status\";\n+  }\n+\n+  public List<SegmentStatus> getSegmentReloadTime(String tableNameWithType,\n+                                                  Map<String, List<String>> serversToSegmentsMap,\n+                                                  BiMap<String, String> endpoints, int timeoutMs) {\n+    LOGGER.info(\"Reading segment reload status from servers for table {}.\", tableNameWithType);\n+    List<String> serverURLs = new ArrayList<>();\n+    for (Map.Entry<String, List<String>> serverToSegments : serversToSegmentsMap.entrySet()) {\n+      List<String> segments = serverToSegments.getValue();\n+      for (String segment : segments) {\n+        serverURLs.add(generateReloadStatusServerURL(tableNameWithType, segment, endpoints.get(serverToSegments.getKey())));\n+      }\n+    }\n+    CompletionService<GetMethod> completionService =\n+            new MultiGetRequest(_executor, _connectionManager).execute(serverURLs, timeoutMs);\n+    BiMap<String, String> endpointsToServers = endpoints.inverse();\n+    List<SegmentStatus> segmentsStatus = new ArrayList<>();\n+\n+    for (int i = 0; i < serverURLs.size(); i++) {\n+      GetMethod getMethod = null;\n+      try {\n+        getMethod = completionService.take().get();\n+        URI uri = getMethod.getURI();\n+        String instance = endpointsToServers.get(uri.getHost() + \":\" + uri.getPort());\n+        if (getMethod.getStatusCode() >= 300) {\n+          LOGGER.error(\"Server: {} returned error: {}\", instance, getMethod.getStatusCode());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDQ3MTYxMA=="}, "originalCommit": {"oid": "7e31c1136090a48823c1a159d8608f37375a0096"}, "originalPosition": 122}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3NDIwMjU3OnYy", "diffSide": "RIGHT", "path": "pinot-controller/src/main/java/org/apache/pinot/controller/api/resources/PinotSegmentRestletResource.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNlQwMzoxNTo0MVrOG3I-Ng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNlQwNzo1NjoxOFrOG3KVSQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDQ3MTg2Mg==", "bodyText": "can tableReloadStatus ever be null? you'll either catch exception above, or have a non-null reload status", "url": "https://github.com/apache/pinot/pull/5718#discussion_r460471862", "createdAt": "2020-07-26T03:15:41Z", "author": {"login": "npawar"}, "path": "pinot-controller/src/main/java/org/apache/pinot/controller/api/resources/PinotSegmentRestletResource.java", "diffHunk": "@@ -485,4 +493,91 @@ private void deleteSegmentsInternal(String tableNameWithType, List<String> segme\n       throw new ControllerApplicationException(LOGGER, e.getMessage(), Response.Status.FORBIDDEN);\n     }\n   }\n+\n+  @GET\n+  @Path(\"segments/{tableName}/reload-status\")\n+  @Produces(MediaType.APPLICATION_JSON)\n+  @ApiOperation(value = \"Status of segment reload\", notes = \"Status of segment reload\")\n+  public Map<String, TableMetadataReader.TableReloadStatus> getReloadStatus(\n+          @ApiParam(value = \"Name of the table\", required = true) @PathParam(\"tableName\") String tableName,\n+          @ApiParam(value = \"OFFLINE|REALTIME\") @QueryParam(\"type\") String tableTypeStr) {\n+    List<String> tableNamesWithType = getExistingTableNamesWithType(tableName, Constants.validateTableType(tableTypeStr));\n+    Map<String, TableMetadataReader.TableReloadStatus> reloadStatusMap = new HashMap<>();\n+    for (String tableNameWithType : tableNamesWithType) {\n+      TableMetadataReader.TableReloadStatus tableReloadStatus = null;\n+      try {\n+        tableReloadStatus = getSegmentsReloadStatus(tableNameWithType);\n+      } catch (InvalidConfigException e) {\n+        throw new ControllerApplicationException(LOGGER,\n+                \"Failed to load segment reload status for table: \" + tableName, Status.NOT_FOUND);\n+      }\n+      if (Objects.isNull(tableReloadStatus))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7e31c1136090a48823c1a159d8608f37375a0096"}, "originalPosition": 379}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDQ5NDE1Mw==", "bodyText": "That's true! Will remove the null check.", "url": "https://github.com/apache/pinot/pull/5718#discussion_r460494153", "createdAt": "2020-07-26T07:56:18Z", "author": {"login": "guruguha"}, "path": "pinot-controller/src/main/java/org/apache/pinot/controller/api/resources/PinotSegmentRestletResource.java", "diffHunk": "@@ -485,4 +493,91 @@ private void deleteSegmentsInternal(String tableNameWithType, List<String> segme\n       throw new ControllerApplicationException(LOGGER, e.getMessage(), Response.Status.FORBIDDEN);\n     }\n   }\n+\n+  @GET\n+  @Path(\"segments/{tableName}/reload-status\")\n+  @Produces(MediaType.APPLICATION_JSON)\n+  @ApiOperation(value = \"Status of segment reload\", notes = \"Status of segment reload\")\n+  public Map<String, TableMetadataReader.TableReloadStatus> getReloadStatus(\n+          @ApiParam(value = \"Name of the table\", required = true) @PathParam(\"tableName\") String tableName,\n+          @ApiParam(value = \"OFFLINE|REALTIME\") @QueryParam(\"type\") String tableTypeStr) {\n+    List<String> tableNamesWithType = getExistingTableNamesWithType(tableName, Constants.validateTableType(tableTypeStr));\n+    Map<String, TableMetadataReader.TableReloadStatus> reloadStatusMap = new HashMap<>();\n+    for (String tableNameWithType : tableNamesWithType) {\n+      TableMetadataReader.TableReloadStatus tableReloadStatus = null;\n+      try {\n+        tableReloadStatus = getSegmentsReloadStatus(tableNameWithType);\n+      } catch (InvalidConfigException e) {\n+        throw new ControllerApplicationException(LOGGER,\n+                \"Failed to load segment reload status for table: \" + tableName, Status.NOT_FOUND);\n+      }\n+      if (Objects.isNull(tableReloadStatus))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDQ3MTg2Mg=="}, "originalCommit": {"oid": "7e31c1136090a48823c1a159d8608f37375a0096"}, "originalPosition": 379}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3NDIwMzk1OnYy", "diffSide": "RIGHT", "path": "pinot-controller/src/main/java/org/apache/pinot/controller/api/resources/PinotSegmentRestletResource.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNlQwMzoxODoyMVrOG3I-0Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNlQwMzoxODoyMVrOG3I-0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDQ3MjAxNw==", "bodyText": "In the TableReloadStatus, can we also add a message telling the caller how many segments failed to report?", "url": "https://github.com/apache/pinot/pull/5718#discussion_r460472017", "createdAt": "2020-07-26T03:18:21Z", "author": {"login": "npawar"}, "path": "pinot-controller/src/main/java/org/apache/pinot/controller/api/resources/PinotSegmentRestletResource.java", "diffHunk": "@@ -485,4 +493,91 @@ private void deleteSegmentsInternal(String tableNameWithType, List<String> segme\n       throw new ControllerApplicationException(LOGGER, e.getMessage(), Response.Status.FORBIDDEN);\n     }\n   }\n+\n+  @GET\n+  @Path(\"segments/{tableName}/reload-status\")\n+  @Produces(MediaType.APPLICATION_JSON)\n+  @ApiOperation(value = \"Status of segment reload\", notes = \"Status of segment reload\")\n+  public Map<String, TableMetadataReader.TableReloadStatus> getReloadStatus(\n+          @ApiParam(value = \"Name of the table\", required = true) @PathParam(\"tableName\") String tableName,\n+          @ApiParam(value = \"OFFLINE|REALTIME\") @QueryParam(\"type\") String tableTypeStr) {\n+    List<String> tableNamesWithType = getExistingTableNamesWithType(tableName, Constants.validateTableType(tableTypeStr));\n+    Map<String, TableMetadataReader.TableReloadStatus> reloadStatusMap = new HashMap<>();\n+    for (String tableNameWithType : tableNamesWithType) {\n+      TableMetadataReader.TableReloadStatus tableReloadStatus = null;\n+      try {\n+        tableReloadStatus = getSegmentsReloadStatus(tableNameWithType);\n+      } catch (InvalidConfigException e) {\n+        throw new ControllerApplicationException(LOGGER,\n+                \"Failed to load segment reload status for table: \" + tableName, Status.NOT_FOUND);\n+      }\n+      if (Objects.isNull(tableReloadStatus))\n+        throw new ControllerApplicationException(LOGGER,\n+                \"Table: \" + tableName + \" not found.\", Status.NOT_FOUND);\n+      reloadStatusMap.put(tableNameWithType, tableReloadStatus);\n+    }\n+    return reloadStatusMap;\n+  }\n+\n+  private TableMetadataReader.TableReloadStatus getSegmentsReloadStatus(String tableNameWithType)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7e31c1136090a48823c1a159d8608f37375a0096"}, "originalPosition": 387}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3NDIwNTY1OnYy", "diffSide": "RIGHT", "path": "pinot-controller/src/main/java/org/apache/pinot/controller/api/resources/PinotSegmentRestletResource.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNlQwMzoyMToyMVrOG3I_mQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNlQwODoxNDo1NFrOG3KcKw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDQ3MjIxNw==", "bodyText": "Let's specify that this metadata includes metadata from server. Was this the api name that we finally settled on? It's too similar to the other \"metadata\" endpoint and bound to cause confusion", "url": "https://github.com/apache/pinot/pull/5718#discussion_r460472217", "createdAt": "2020-07-26T03:21:21Z", "author": {"login": "npawar"}, "path": "pinot-controller/src/main/java/org/apache/pinot/controller/api/resources/PinotSegmentRestletResource.java", "diffHunk": "@@ -485,4 +493,91 @@ private void deleteSegmentsInternal(String tableNameWithType, List<String> segme\n       throw new ControllerApplicationException(LOGGER, e.getMessage(), Response.Status.FORBIDDEN);\n     }\n   }\n+\n+  @GET\n+  @Path(\"segments/{tableName}/reload-status\")\n+  @Produces(MediaType.APPLICATION_JSON)\n+  @ApiOperation(value = \"Status of segment reload\", notes = \"Status of segment reload\")\n+  public Map<String, TableMetadataReader.TableReloadStatus> getReloadStatus(\n+          @ApiParam(value = \"Name of the table\", required = true) @PathParam(\"tableName\") String tableName,\n+          @ApiParam(value = \"OFFLINE|REALTIME\") @QueryParam(\"type\") String tableTypeStr) {\n+    List<String> tableNamesWithType = getExistingTableNamesWithType(tableName, Constants.validateTableType(tableTypeStr));\n+    Map<String, TableMetadataReader.TableReloadStatus> reloadStatusMap = new HashMap<>();\n+    for (String tableNameWithType : tableNamesWithType) {\n+      TableMetadataReader.TableReloadStatus tableReloadStatus = null;\n+      try {\n+        tableReloadStatus = getSegmentsReloadStatus(tableNameWithType);\n+      } catch (InvalidConfigException e) {\n+        throw new ControllerApplicationException(LOGGER,\n+                \"Failed to load segment reload status for table: \" + tableName, Status.NOT_FOUND);\n+      }\n+      if (Objects.isNull(tableReloadStatus))\n+        throw new ControllerApplicationException(LOGGER,\n+                \"Table: \" + tableName + \" not found.\", Status.NOT_FOUND);\n+      reloadStatusMap.put(tableNameWithType, tableReloadStatus);\n+    }\n+    return reloadStatusMap;\n+  }\n+\n+  private TableMetadataReader.TableReloadStatus getSegmentsReloadStatus(String tableNameWithType)\n+          throws InvalidConfigException {\n+    final Map<String, List<String>> serversToSegmentsMap =\n+            _pinotHelixResourceManager.getServerToSegmentsMap(tableNameWithType);\n+    TableMetadataReader tableMetadataReader =\n+            new TableMetadataReader(_executor, _connectionManager, _pinotHelixResourceManager);\n+    return tableMetadataReader.getReloadStatus(tableNameWithType, serversToSegmentsMap,\n+            _controllerConf.getServerAdminRequestTimeoutSeconds() * 1000);\n+  }\n+\n+  @GET\n+  @Path(\"segments/{tableName}/metadata\")\n+  @Produces(MediaType.APPLICATION_JSON)\n+  @ApiOperation(value = \"Get the metadata for a segment\", notes = \"Get the metadata for a segment\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7e31c1136090a48823c1a159d8608f37375a0096"}, "originalPosition": 400}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDQ5NTkxNQ==", "bodyText": "@kishoreg had mentioned that we will discuss further into the PR on this. So, we're yet to finalize on that.", "url": "https://github.com/apache/pinot/pull/5718#discussion_r460495915", "createdAt": "2020-07-26T08:14:54Z", "author": {"login": "guruguha"}, "path": "pinot-controller/src/main/java/org/apache/pinot/controller/api/resources/PinotSegmentRestletResource.java", "diffHunk": "@@ -485,4 +493,91 @@ private void deleteSegmentsInternal(String tableNameWithType, List<String> segme\n       throw new ControllerApplicationException(LOGGER, e.getMessage(), Response.Status.FORBIDDEN);\n     }\n   }\n+\n+  @GET\n+  @Path(\"segments/{tableName}/reload-status\")\n+  @Produces(MediaType.APPLICATION_JSON)\n+  @ApiOperation(value = \"Status of segment reload\", notes = \"Status of segment reload\")\n+  public Map<String, TableMetadataReader.TableReloadStatus> getReloadStatus(\n+          @ApiParam(value = \"Name of the table\", required = true) @PathParam(\"tableName\") String tableName,\n+          @ApiParam(value = \"OFFLINE|REALTIME\") @QueryParam(\"type\") String tableTypeStr) {\n+    List<String> tableNamesWithType = getExistingTableNamesWithType(tableName, Constants.validateTableType(tableTypeStr));\n+    Map<String, TableMetadataReader.TableReloadStatus> reloadStatusMap = new HashMap<>();\n+    for (String tableNameWithType : tableNamesWithType) {\n+      TableMetadataReader.TableReloadStatus tableReloadStatus = null;\n+      try {\n+        tableReloadStatus = getSegmentsReloadStatus(tableNameWithType);\n+      } catch (InvalidConfigException e) {\n+        throw new ControllerApplicationException(LOGGER,\n+                \"Failed to load segment reload status for table: \" + tableName, Status.NOT_FOUND);\n+      }\n+      if (Objects.isNull(tableReloadStatus))\n+        throw new ControllerApplicationException(LOGGER,\n+                \"Table: \" + tableName + \" not found.\", Status.NOT_FOUND);\n+      reloadStatusMap.put(tableNameWithType, tableReloadStatus);\n+    }\n+    return reloadStatusMap;\n+  }\n+\n+  private TableMetadataReader.TableReloadStatus getSegmentsReloadStatus(String tableNameWithType)\n+          throws InvalidConfigException {\n+    final Map<String, List<String>> serversToSegmentsMap =\n+            _pinotHelixResourceManager.getServerToSegmentsMap(tableNameWithType);\n+    TableMetadataReader tableMetadataReader =\n+            new TableMetadataReader(_executor, _connectionManager, _pinotHelixResourceManager);\n+    return tableMetadataReader.getReloadStatus(tableNameWithType, serversToSegmentsMap,\n+            _controllerConf.getServerAdminRequestTimeoutSeconds() * 1000);\n+  }\n+\n+  @GET\n+  @Path(\"segments/{tableName}/metadata\")\n+  @Produces(MediaType.APPLICATION_JSON)\n+  @ApiOperation(value = \"Get the metadata for a segment\", notes = \"Get the metadata for a segment\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDQ3MjIxNw=="}, "originalCommit": {"oid": "7e31c1136090a48823c1a159d8608f37375a0096"}, "originalPosition": 400}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3NDIwNzAwOnYy", "diffSide": "RIGHT", "path": "pinot-controller/src/main/java/org/apache/pinot/controller/api/resources/PinotSegmentRestletResource.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNlQwMzoyMzoyOVrOG3JAMQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNlQwMzoyMzoyOVrOG3JAMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDQ3MjM2OQ==", "bodyText": "nit: wrap this in {}", "url": "https://github.com/apache/pinot/pull/5718#discussion_r460472369", "createdAt": "2020-07-26T03:23:29Z", "author": {"login": "npawar"}, "path": "pinot-controller/src/main/java/org/apache/pinot/controller/api/resources/PinotSegmentRestletResource.java", "diffHunk": "@@ -485,4 +493,91 @@ private void deleteSegmentsInternal(String tableNameWithType, List<String> segme\n       throw new ControllerApplicationException(LOGGER, e.getMessage(), Response.Status.FORBIDDEN);\n     }\n   }\n+\n+  @GET\n+  @Path(\"segments/{tableName}/reload-status\")\n+  @Produces(MediaType.APPLICATION_JSON)\n+  @ApiOperation(value = \"Status of segment reload\", notes = \"Status of segment reload\")\n+  public Map<String, TableMetadataReader.TableReloadStatus> getReloadStatus(\n+          @ApiParam(value = \"Name of the table\", required = true) @PathParam(\"tableName\") String tableName,\n+          @ApiParam(value = \"OFFLINE|REALTIME\") @QueryParam(\"type\") String tableTypeStr) {\n+    List<String> tableNamesWithType = getExistingTableNamesWithType(tableName, Constants.validateTableType(tableTypeStr));\n+    Map<String, TableMetadataReader.TableReloadStatus> reloadStatusMap = new HashMap<>();\n+    for (String tableNameWithType : tableNamesWithType) {\n+      TableMetadataReader.TableReloadStatus tableReloadStatus = null;\n+      try {\n+        tableReloadStatus = getSegmentsReloadStatus(tableNameWithType);\n+      } catch (InvalidConfigException e) {\n+        throw new ControllerApplicationException(LOGGER,\n+                \"Failed to load segment reload status for table: \" + tableName, Status.NOT_FOUND);\n+      }\n+      if (Objects.isNull(tableReloadStatus))\n+        throw new ControllerApplicationException(LOGGER,\n+                \"Table: \" + tableName + \" not found.\", Status.NOT_FOUND);\n+      reloadStatusMap.put(tableNameWithType, tableReloadStatus);\n+    }\n+    return reloadStatusMap;\n+  }\n+\n+  private TableMetadataReader.TableReloadStatus getSegmentsReloadStatus(String tableNameWithType)\n+          throws InvalidConfigException {\n+    final Map<String, List<String>> serversToSegmentsMap =\n+            _pinotHelixResourceManager.getServerToSegmentsMap(tableNameWithType);\n+    TableMetadataReader tableMetadataReader =\n+            new TableMetadataReader(_executor, _connectionManager, _pinotHelixResourceManager);\n+    return tableMetadataReader.getReloadStatus(tableNameWithType, serversToSegmentsMap,\n+            _controllerConf.getServerAdminRequestTimeoutSeconds() * 1000);\n+  }\n+\n+  @GET\n+  @Path(\"segments/{tableName}/metadata\")\n+  @Produces(MediaType.APPLICATION_JSON)\n+  @ApiOperation(value = \"Get the metadata for a segment\", notes = \"Get the metadata for a segment\")\n+  public Map<String, String> getServerMetadata(@ApiParam(value = \"Name of the table\", required = true) @PathParam(\"tableName\") String tableName,\n+                                               @ApiParam(value = \"OFFLINE|REALTIME\") @QueryParam(\"type\") String tableTypeStr) {\n+    TableType tableType = Constants.validateTableType(tableTypeStr);\n+    if (tableType == TableType.REALTIME)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7e31c1136090a48823c1a159d8608f37375a0096"}, "originalPosition": 404}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3NDIwNzE4OnYy", "diffSide": "RIGHT", "path": "pinot-controller/src/main/java/org/apache/pinot/controller/api/resources/PinotSegmentRestletResource.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNlQwMzoyNDowMFrOG3JARw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNlQwMzoyNDowMFrOG3JARw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDQ3MjM5MQ==", "bodyText": "you already have tableType 3 lines above", "url": "https://github.com/apache/pinot/pull/5718#discussion_r460472391", "createdAt": "2020-07-26T03:24:00Z", "author": {"login": "npawar"}, "path": "pinot-controller/src/main/java/org/apache/pinot/controller/api/resources/PinotSegmentRestletResource.java", "diffHunk": "@@ -485,4 +493,91 @@ private void deleteSegmentsInternal(String tableNameWithType, List<String> segme\n       throw new ControllerApplicationException(LOGGER, e.getMessage(), Response.Status.FORBIDDEN);\n     }\n   }\n+\n+  @GET\n+  @Path(\"segments/{tableName}/reload-status\")\n+  @Produces(MediaType.APPLICATION_JSON)\n+  @ApiOperation(value = \"Status of segment reload\", notes = \"Status of segment reload\")\n+  public Map<String, TableMetadataReader.TableReloadStatus> getReloadStatus(\n+          @ApiParam(value = \"Name of the table\", required = true) @PathParam(\"tableName\") String tableName,\n+          @ApiParam(value = \"OFFLINE|REALTIME\") @QueryParam(\"type\") String tableTypeStr) {\n+    List<String> tableNamesWithType = getExistingTableNamesWithType(tableName, Constants.validateTableType(tableTypeStr));\n+    Map<String, TableMetadataReader.TableReloadStatus> reloadStatusMap = new HashMap<>();\n+    for (String tableNameWithType : tableNamesWithType) {\n+      TableMetadataReader.TableReloadStatus tableReloadStatus = null;\n+      try {\n+        tableReloadStatus = getSegmentsReloadStatus(tableNameWithType);\n+      } catch (InvalidConfigException e) {\n+        throw new ControllerApplicationException(LOGGER,\n+                \"Failed to load segment reload status for table: \" + tableName, Status.NOT_FOUND);\n+      }\n+      if (Objects.isNull(tableReloadStatus))\n+        throw new ControllerApplicationException(LOGGER,\n+                \"Table: \" + tableName + \" not found.\", Status.NOT_FOUND);\n+      reloadStatusMap.put(tableNameWithType, tableReloadStatus);\n+    }\n+    return reloadStatusMap;\n+  }\n+\n+  private TableMetadataReader.TableReloadStatus getSegmentsReloadStatus(String tableNameWithType)\n+          throws InvalidConfigException {\n+    final Map<String, List<String>> serversToSegmentsMap =\n+            _pinotHelixResourceManager.getServerToSegmentsMap(tableNameWithType);\n+    TableMetadataReader tableMetadataReader =\n+            new TableMetadataReader(_executor, _connectionManager, _pinotHelixResourceManager);\n+    return tableMetadataReader.getReloadStatus(tableNameWithType, serversToSegmentsMap,\n+            _controllerConf.getServerAdminRequestTimeoutSeconds() * 1000);\n+  }\n+\n+  @GET\n+  @Path(\"segments/{tableName}/metadata\")\n+  @Produces(MediaType.APPLICATION_JSON)\n+  @ApiOperation(value = \"Get the metadata for a segment\", notes = \"Get the metadata for a segment\")\n+  public Map<String, String> getServerMetadata(@ApiParam(value = \"Name of the table\", required = true) @PathParam(\"tableName\") String tableName,\n+                                               @ApiParam(value = \"OFFLINE|REALTIME\") @QueryParam(\"type\") String tableTypeStr) {\n+    TableType tableType = Constants.validateTableType(tableTypeStr);\n+    if (tableType == TableType.REALTIME)\n+      throw new ControllerApplicationException(LOGGER,\n+              \"Table type : \" + tableTypeStr + \" not yet supported.\", Status.NOT_IMPLEMENTED);\n+\n+    List<String> tableNamesWithType = getExistingTableNamesWithType(tableName, Constants.validateTableType(tableTypeStr));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7e31c1136090a48823c1a159d8608f37375a0096"}, "originalPosition": 408}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3NDIwODU1OnYy", "diffSide": "RIGHT", "path": "pinot-controller/src/main/java/org/apache/pinot/controller/api/resources/PinotSegmentRestletResource.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNlQwMzoyNTo0NVrOG3JA2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNlQyMToxNjowOFrOG3PPFA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDQ3MjUzNg==", "bodyText": "does this call return the CONSUMING (mutable) segments and do we need to skip them here?\nAlso how come we're supporting realtime table in reload-status, but not in metadata? I thought we're only planning to skip the CONSUMING segment in both endpoints", "url": "https://github.com/apache/pinot/pull/5718#discussion_r460472536", "createdAt": "2020-07-26T03:25:45Z", "author": {"login": "npawar"}, "path": "pinot-controller/src/main/java/org/apache/pinot/controller/api/resources/PinotSegmentRestletResource.java", "diffHunk": "@@ -485,4 +493,91 @@ private void deleteSegmentsInternal(String tableNameWithType, List<String> segme\n       throw new ControllerApplicationException(LOGGER, e.getMessage(), Response.Status.FORBIDDEN);\n     }\n   }\n+\n+  @GET\n+  @Path(\"segments/{tableName}/reload-status\")\n+  @Produces(MediaType.APPLICATION_JSON)\n+  @ApiOperation(value = \"Status of segment reload\", notes = \"Status of segment reload\")\n+  public Map<String, TableMetadataReader.TableReloadStatus> getReloadStatus(\n+          @ApiParam(value = \"Name of the table\", required = true) @PathParam(\"tableName\") String tableName,\n+          @ApiParam(value = \"OFFLINE|REALTIME\") @QueryParam(\"type\") String tableTypeStr) {\n+    List<String> tableNamesWithType = getExistingTableNamesWithType(tableName, Constants.validateTableType(tableTypeStr));\n+    Map<String, TableMetadataReader.TableReloadStatus> reloadStatusMap = new HashMap<>();\n+    for (String tableNameWithType : tableNamesWithType) {\n+      TableMetadataReader.TableReloadStatus tableReloadStatus = null;\n+      try {\n+        tableReloadStatus = getSegmentsReloadStatus(tableNameWithType);\n+      } catch (InvalidConfigException e) {\n+        throw new ControllerApplicationException(LOGGER,\n+                \"Failed to load segment reload status for table: \" + tableName, Status.NOT_FOUND);\n+      }\n+      if (Objects.isNull(tableReloadStatus))\n+        throw new ControllerApplicationException(LOGGER,\n+                \"Table: \" + tableName + \" not found.\", Status.NOT_FOUND);\n+      reloadStatusMap.put(tableNameWithType, tableReloadStatus);\n+    }\n+    return reloadStatusMap;\n+  }\n+\n+  private TableMetadataReader.TableReloadStatus getSegmentsReloadStatus(String tableNameWithType)\n+          throws InvalidConfigException {\n+    final Map<String, List<String>> serversToSegmentsMap =\n+            _pinotHelixResourceManager.getServerToSegmentsMap(tableNameWithType);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7e31c1136090a48823c1a159d8608f37375a0096"}, "originalPosition": 390}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDQ5NzQ4Mw==", "bodyText": "You're right, we're skipping CONSUMING segments in both endpoints. Added the check for both endpoints.", "url": "https://github.com/apache/pinot/pull/5718#discussion_r460497483", "createdAt": "2020-07-26T08:29:17Z", "author": {"login": "guruguha"}, "path": "pinot-controller/src/main/java/org/apache/pinot/controller/api/resources/PinotSegmentRestletResource.java", "diffHunk": "@@ -485,4 +493,91 @@ private void deleteSegmentsInternal(String tableNameWithType, List<String> segme\n       throw new ControllerApplicationException(LOGGER, e.getMessage(), Response.Status.FORBIDDEN);\n     }\n   }\n+\n+  @GET\n+  @Path(\"segments/{tableName}/reload-status\")\n+  @Produces(MediaType.APPLICATION_JSON)\n+  @ApiOperation(value = \"Status of segment reload\", notes = \"Status of segment reload\")\n+  public Map<String, TableMetadataReader.TableReloadStatus> getReloadStatus(\n+          @ApiParam(value = \"Name of the table\", required = true) @PathParam(\"tableName\") String tableName,\n+          @ApiParam(value = \"OFFLINE|REALTIME\") @QueryParam(\"type\") String tableTypeStr) {\n+    List<String> tableNamesWithType = getExistingTableNamesWithType(tableName, Constants.validateTableType(tableTypeStr));\n+    Map<String, TableMetadataReader.TableReloadStatus> reloadStatusMap = new HashMap<>();\n+    for (String tableNameWithType : tableNamesWithType) {\n+      TableMetadataReader.TableReloadStatus tableReloadStatus = null;\n+      try {\n+        tableReloadStatus = getSegmentsReloadStatus(tableNameWithType);\n+      } catch (InvalidConfigException e) {\n+        throw new ControllerApplicationException(LOGGER,\n+                \"Failed to load segment reload status for table: \" + tableName, Status.NOT_FOUND);\n+      }\n+      if (Objects.isNull(tableReloadStatus))\n+        throw new ControllerApplicationException(LOGGER,\n+                \"Table: \" + tableName + \" not found.\", Status.NOT_FOUND);\n+      reloadStatusMap.put(tableNameWithType, tableReloadStatus);\n+    }\n+    return reloadStatusMap;\n+  }\n+\n+  private TableMetadataReader.TableReloadStatus getSegmentsReloadStatus(String tableNameWithType)\n+          throws InvalidConfigException {\n+    final Map<String, List<String>> serversToSegmentsMap =\n+            _pinotHelixResourceManager.getServerToSegmentsMap(tableNameWithType);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDQ3MjUzNg=="}, "originalCommit": {"oid": "7e31c1136090a48823c1a159d8608f37375a0096"}, "originalPosition": 390}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDU3NDQ4NA==", "bodyText": "REALTIME tables have some CONSUMING segments (Mutable) and some ONLINE segments (Immutable). We want to still process the Immutable segments of the REALTIME table. The current implementation will skip REALTIME entirely. It's okay if you want to take that up in a follow-up. You can mention in description that this is only for OFFLINE as of now", "url": "https://github.com/apache/pinot/pull/5718#discussion_r460574484", "createdAt": "2020-07-26T21:16:08Z", "author": {"login": "npawar"}, "path": "pinot-controller/src/main/java/org/apache/pinot/controller/api/resources/PinotSegmentRestletResource.java", "diffHunk": "@@ -485,4 +493,91 @@ private void deleteSegmentsInternal(String tableNameWithType, List<String> segme\n       throw new ControllerApplicationException(LOGGER, e.getMessage(), Response.Status.FORBIDDEN);\n     }\n   }\n+\n+  @GET\n+  @Path(\"segments/{tableName}/reload-status\")\n+  @Produces(MediaType.APPLICATION_JSON)\n+  @ApiOperation(value = \"Status of segment reload\", notes = \"Status of segment reload\")\n+  public Map<String, TableMetadataReader.TableReloadStatus> getReloadStatus(\n+          @ApiParam(value = \"Name of the table\", required = true) @PathParam(\"tableName\") String tableName,\n+          @ApiParam(value = \"OFFLINE|REALTIME\") @QueryParam(\"type\") String tableTypeStr) {\n+    List<String> tableNamesWithType = getExistingTableNamesWithType(tableName, Constants.validateTableType(tableTypeStr));\n+    Map<String, TableMetadataReader.TableReloadStatus> reloadStatusMap = new HashMap<>();\n+    for (String tableNameWithType : tableNamesWithType) {\n+      TableMetadataReader.TableReloadStatus tableReloadStatus = null;\n+      try {\n+        tableReloadStatus = getSegmentsReloadStatus(tableNameWithType);\n+      } catch (InvalidConfigException e) {\n+        throw new ControllerApplicationException(LOGGER,\n+                \"Failed to load segment reload status for table: \" + tableName, Status.NOT_FOUND);\n+      }\n+      if (Objects.isNull(tableReloadStatus))\n+        throw new ControllerApplicationException(LOGGER,\n+                \"Table: \" + tableName + \" not found.\", Status.NOT_FOUND);\n+      reloadStatusMap.put(tableNameWithType, tableReloadStatus);\n+    }\n+    return reloadStatusMap;\n+  }\n+\n+  private TableMetadataReader.TableReloadStatus getSegmentsReloadStatus(String tableNameWithType)\n+          throws InvalidConfigException {\n+    final Map<String, List<String>> serversToSegmentsMap =\n+            _pinotHelixResourceManager.getServerToSegmentsMap(tableNameWithType);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDQ3MjUzNg=="}, "originalCommit": {"oid": "7e31c1136090a48823c1a159d8608f37375a0096"}, "originalPosition": 390}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3NDIwOTQ2OnYy", "diffSide": "RIGHT", "path": "pinot-controller/src/main/java/org/apache/pinot/controller/api/resources/PinotSegmentRestletResource.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNlQwMzoyNzo0NVrOG3JBPQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNlQwNzo1NDo0N1rOG3KUow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDQ3MjYzNw==", "bodyText": "some validation to check if table was not found?\nsame for the metadata endpoint", "url": "https://github.com/apache/pinot/pull/5718#discussion_r460472637", "createdAt": "2020-07-26T03:27:45Z", "author": {"login": "npawar"}, "path": "pinot-controller/src/main/java/org/apache/pinot/controller/api/resources/PinotSegmentRestletResource.java", "diffHunk": "@@ -485,4 +493,91 @@ private void deleteSegmentsInternal(String tableNameWithType, List<String> segme\n       throw new ControllerApplicationException(LOGGER, e.getMessage(), Response.Status.FORBIDDEN);\n     }\n   }\n+\n+  @GET\n+  @Path(\"segments/{tableName}/reload-status\")\n+  @Produces(MediaType.APPLICATION_JSON)\n+  @ApiOperation(value = \"Status of segment reload\", notes = \"Status of segment reload\")\n+  public Map<String, TableMetadataReader.TableReloadStatus> getReloadStatus(\n+          @ApiParam(value = \"Name of the table\", required = true) @PathParam(\"tableName\") String tableName,\n+          @ApiParam(value = \"OFFLINE|REALTIME\") @QueryParam(\"type\") String tableTypeStr) {\n+    List<String> tableNamesWithType = getExistingTableNamesWithType(tableName, Constants.validateTableType(tableTypeStr));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7e31c1136090a48823c1a159d8608f37375a0096"}, "originalPosition": 369}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDQ5Mzk4Nw==", "bodyText": "This is taken care in the getExistingTableNamesWithType method", "url": "https://github.com/apache/pinot/pull/5718#discussion_r460493987", "createdAt": "2020-07-26T07:54:47Z", "author": {"login": "guruguha"}, "path": "pinot-controller/src/main/java/org/apache/pinot/controller/api/resources/PinotSegmentRestletResource.java", "diffHunk": "@@ -485,4 +493,91 @@ private void deleteSegmentsInternal(String tableNameWithType, List<String> segme\n       throw new ControllerApplicationException(LOGGER, e.getMessage(), Response.Status.FORBIDDEN);\n     }\n   }\n+\n+  @GET\n+  @Path(\"segments/{tableName}/reload-status\")\n+  @Produces(MediaType.APPLICATION_JSON)\n+  @ApiOperation(value = \"Status of segment reload\", notes = \"Status of segment reload\")\n+  public Map<String, TableMetadataReader.TableReloadStatus> getReloadStatus(\n+          @ApiParam(value = \"Name of the table\", required = true) @PathParam(\"tableName\") String tableName,\n+          @ApiParam(value = \"OFFLINE|REALTIME\") @QueryParam(\"type\") String tableTypeStr) {\n+    List<String> tableNamesWithType = getExistingTableNamesWithType(tableName, Constants.validateTableType(tableTypeStr));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDQ3MjYzNw=="}, "originalCommit": {"oid": "7e31c1136090a48823c1a159d8608f37375a0096"}, "originalPosition": 369}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3NDIxMDcyOnYy", "diffSide": "RIGHT", "path": "pinot-controller/src/main/java/org/apache/pinot/controller/api/resources/PinotSegmentRestletResource.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNlQwMzozMDowMlrOG3JBxQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNlQwODowNzozMFrOG3KZhQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDQ3Mjc3Mw==", "bodyText": "if table is not found, line 546 itself will throw exception.", "url": "https://github.com/apache/pinot/pull/5718#discussion_r460472773", "createdAt": "2020-07-26T03:30:02Z", "author": {"login": "npawar"}, "path": "pinot-controller/src/main/java/org/apache/pinot/controller/api/resources/PinotSegmentRestletResource.java", "diffHunk": "@@ -485,4 +493,91 @@ private void deleteSegmentsInternal(String tableNameWithType, List<String> segme\n       throw new ControllerApplicationException(LOGGER, e.getMessage(), Response.Status.FORBIDDEN);\n     }\n   }\n+\n+  @GET\n+  @Path(\"segments/{tableName}/reload-status\")\n+  @Produces(MediaType.APPLICATION_JSON)\n+  @ApiOperation(value = \"Status of segment reload\", notes = \"Status of segment reload\")\n+  public Map<String, TableMetadataReader.TableReloadStatus> getReloadStatus(\n+          @ApiParam(value = \"Name of the table\", required = true) @PathParam(\"tableName\") String tableName,\n+          @ApiParam(value = \"OFFLINE|REALTIME\") @QueryParam(\"type\") String tableTypeStr) {\n+    List<String> tableNamesWithType = getExistingTableNamesWithType(tableName, Constants.validateTableType(tableTypeStr));\n+    Map<String, TableMetadataReader.TableReloadStatus> reloadStatusMap = new HashMap<>();\n+    for (String tableNameWithType : tableNamesWithType) {\n+      TableMetadataReader.TableReloadStatus tableReloadStatus = null;\n+      try {\n+        tableReloadStatus = getSegmentsReloadStatus(tableNameWithType);\n+      } catch (InvalidConfigException e) {\n+        throw new ControllerApplicationException(LOGGER,\n+                \"Failed to load segment reload status for table: \" + tableName, Status.NOT_FOUND);\n+      }\n+      if (Objects.isNull(tableReloadStatus))\n+        throw new ControllerApplicationException(LOGGER,\n+                \"Table: \" + tableName + \" not found.\", Status.NOT_FOUND);\n+      reloadStatusMap.put(tableNameWithType, tableReloadStatus);\n+    }\n+    return reloadStatusMap;\n+  }\n+\n+  private TableMetadataReader.TableReloadStatus getSegmentsReloadStatus(String tableNameWithType)\n+          throws InvalidConfigException {\n+    final Map<String, List<String>> serversToSegmentsMap =\n+            _pinotHelixResourceManager.getServerToSegmentsMap(tableNameWithType);\n+    TableMetadataReader tableMetadataReader =\n+            new TableMetadataReader(_executor, _connectionManager, _pinotHelixResourceManager);\n+    return tableMetadataReader.getReloadStatus(tableNameWithType, serversToSegmentsMap,\n+            _controllerConf.getServerAdminRequestTimeoutSeconds() * 1000);\n+  }\n+\n+  @GET\n+  @Path(\"segments/{tableName}/metadata\")\n+  @Produces(MediaType.APPLICATION_JSON)\n+  @ApiOperation(value = \"Get the metadata for a segment\", notes = \"Get the metadata for a segment\")\n+  public Map<String, String> getServerMetadata(@ApiParam(value = \"Name of the table\", required = true) @PathParam(\"tableName\") String tableName,\n+                                               @ApiParam(value = \"OFFLINE|REALTIME\") @QueryParam(\"type\") String tableTypeStr) {\n+    TableType tableType = Constants.validateTableType(tableTypeStr);\n+    if (tableType == TableType.REALTIME)\n+      throw new ControllerApplicationException(LOGGER,\n+              \"Table type : \" + tableTypeStr + \" not yet supported.\", Status.NOT_IMPLEMENTED);\n+\n+    List<String> tableNamesWithType = getExistingTableNamesWithType(tableName, Constants.validateTableType(tableTypeStr));\n+    Map<String, String> segmentsMetadata = null;\n+    try {\n+      segmentsMetadata = getSegmentsMetadataFromServer(tableNamesWithType.get(0));\n+    } catch (InvalidConfigException e) {\n+      throw new ControllerApplicationException(LOGGER,\n+              \"Failed to load segment reload status for table: \" + tableName, Status.NOT_FOUND);\n+    } catch (IOException ioe) {\n+      throw new ControllerApplicationException(LOGGER,\n+              \"Error parsing response to cluster config!\", Response.Status.BAD_REQUEST, ioe);\n+    }\n+    if (segmentsMetadata == null)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7e31c1136090a48823c1a159d8608f37375a0096"}, "originalPosition": 419}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDQ5NTIzNw==", "bodyText": "That exception has been updated to the propagated exception. Also, as mentioned before, the segmentsMetadata will not be null.", "url": "https://github.com/apache/pinot/pull/5718#discussion_r460495237", "createdAt": "2020-07-26T08:07:30Z", "author": {"login": "guruguha"}, "path": "pinot-controller/src/main/java/org/apache/pinot/controller/api/resources/PinotSegmentRestletResource.java", "diffHunk": "@@ -485,4 +493,91 @@ private void deleteSegmentsInternal(String tableNameWithType, List<String> segme\n       throw new ControllerApplicationException(LOGGER, e.getMessage(), Response.Status.FORBIDDEN);\n     }\n   }\n+\n+  @GET\n+  @Path(\"segments/{tableName}/reload-status\")\n+  @Produces(MediaType.APPLICATION_JSON)\n+  @ApiOperation(value = \"Status of segment reload\", notes = \"Status of segment reload\")\n+  public Map<String, TableMetadataReader.TableReloadStatus> getReloadStatus(\n+          @ApiParam(value = \"Name of the table\", required = true) @PathParam(\"tableName\") String tableName,\n+          @ApiParam(value = \"OFFLINE|REALTIME\") @QueryParam(\"type\") String tableTypeStr) {\n+    List<String> tableNamesWithType = getExistingTableNamesWithType(tableName, Constants.validateTableType(tableTypeStr));\n+    Map<String, TableMetadataReader.TableReloadStatus> reloadStatusMap = new HashMap<>();\n+    for (String tableNameWithType : tableNamesWithType) {\n+      TableMetadataReader.TableReloadStatus tableReloadStatus = null;\n+      try {\n+        tableReloadStatus = getSegmentsReloadStatus(tableNameWithType);\n+      } catch (InvalidConfigException e) {\n+        throw new ControllerApplicationException(LOGGER,\n+                \"Failed to load segment reload status for table: \" + tableName, Status.NOT_FOUND);\n+      }\n+      if (Objects.isNull(tableReloadStatus))\n+        throw new ControllerApplicationException(LOGGER,\n+                \"Table: \" + tableName + \" not found.\", Status.NOT_FOUND);\n+      reloadStatusMap.put(tableNameWithType, tableReloadStatus);\n+    }\n+    return reloadStatusMap;\n+  }\n+\n+  private TableMetadataReader.TableReloadStatus getSegmentsReloadStatus(String tableNameWithType)\n+          throws InvalidConfigException {\n+    final Map<String, List<String>> serversToSegmentsMap =\n+            _pinotHelixResourceManager.getServerToSegmentsMap(tableNameWithType);\n+    TableMetadataReader tableMetadataReader =\n+            new TableMetadataReader(_executor, _connectionManager, _pinotHelixResourceManager);\n+    return tableMetadataReader.getReloadStatus(tableNameWithType, serversToSegmentsMap,\n+            _controllerConf.getServerAdminRequestTimeoutSeconds() * 1000);\n+  }\n+\n+  @GET\n+  @Path(\"segments/{tableName}/metadata\")\n+  @Produces(MediaType.APPLICATION_JSON)\n+  @ApiOperation(value = \"Get the metadata for a segment\", notes = \"Get the metadata for a segment\")\n+  public Map<String, String> getServerMetadata(@ApiParam(value = \"Name of the table\", required = true) @PathParam(\"tableName\") String tableName,\n+                                               @ApiParam(value = \"OFFLINE|REALTIME\") @QueryParam(\"type\") String tableTypeStr) {\n+    TableType tableType = Constants.validateTableType(tableTypeStr);\n+    if (tableType == TableType.REALTIME)\n+      throw new ControllerApplicationException(LOGGER,\n+              \"Table type : \" + tableTypeStr + \" not yet supported.\", Status.NOT_IMPLEMENTED);\n+\n+    List<String> tableNamesWithType = getExistingTableNamesWithType(tableName, Constants.validateTableType(tableTypeStr));\n+    Map<String, String> segmentsMetadata = null;\n+    try {\n+      segmentsMetadata = getSegmentsMetadataFromServer(tableNamesWithType.get(0));\n+    } catch (InvalidConfigException e) {\n+      throw new ControllerApplicationException(LOGGER,\n+              \"Failed to load segment reload status for table: \" + tableName, Status.NOT_FOUND);\n+    } catch (IOException ioe) {\n+      throw new ControllerApplicationException(LOGGER,\n+              \"Error parsing response to cluster config!\", Response.Status.BAD_REQUEST, ioe);\n+    }\n+    if (segmentsMetadata == null)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDQ3Mjc3Mw=="}, "originalCommit": {"oid": "7e31c1136090a48823c1a159d8608f37375a0096"}, "originalPosition": 419}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3NDIxMTAyOnYy", "diffSide": "RIGHT", "path": "pinot-controller/src/main/java/org/apache/pinot/controller/api/resources/PinotSegmentRestletResource.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNlQwMzozMDoyN1rOG3JB5w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNlQwMzozMDoyN1rOG3JB5w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDQ3MjgwNw==", "bodyText": "nit: remove trace logs?", "url": "https://github.com/apache/pinot/pull/5718#discussion_r460472807", "createdAt": "2020-07-26T03:30:27Z", "author": {"login": "npawar"}, "path": "pinot-controller/src/main/java/org/apache/pinot/controller/api/resources/PinotSegmentRestletResource.java", "diffHunk": "@@ -485,4 +493,91 @@ private void deleteSegmentsInternal(String tableNameWithType, List<String> segme\n       throw new ControllerApplicationException(LOGGER, e.getMessage(), Response.Status.FORBIDDEN);\n     }\n   }\n+\n+  @GET\n+  @Path(\"segments/{tableName}/reload-status\")\n+  @Produces(MediaType.APPLICATION_JSON)\n+  @ApiOperation(value = \"Status of segment reload\", notes = \"Status of segment reload\")\n+  public Map<String, TableMetadataReader.TableReloadStatus> getReloadStatus(\n+          @ApiParam(value = \"Name of the table\", required = true) @PathParam(\"tableName\") String tableName,\n+          @ApiParam(value = \"OFFLINE|REALTIME\") @QueryParam(\"type\") String tableTypeStr) {\n+    List<String> tableNamesWithType = getExistingTableNamesWithType(tableName, Constants.validateTableType(tableTypeStr));\n+    Map<String, TableMetadataReader.TableReloadStatus> reloadStatusMap = new HashMap<>();\n+    for (String tableNameWithType : tableNamesWithType) {\n+      TableMetadataReader.TableReloadStatus tableReloadStatus = null;\n+      try {\n+        tableReloadStatus = getSegmentsReloadStatus(tableNameWithType);\n+      } catch (InvalidConfigException e) {\n+        throw new ControllerApplicationException(LOGGER,\n+                \"Failed to load segment reload status for table: \" + tableName, Status.NOT_FOUND);\n+      }\n+      if (Objects.isNull(tableReloadStatus))\n+        throw new ControllerApplicationException(LOGGER,\n+                \"Table: \" + tableName + \" not found.\", Status.NOT_FOUND);\n+      reloadStatusMap.put(tableNameWithType, tableReloadStatus);\n+    }\n+    return reloadStatusMap;\n+  }\n+\n+  private TableMetadataReader.TableReloadStatus getSegmentsReloadStatus(String tableNameWithType)\n+          throws InvalidConfigException {\n+    final Map<String, List<String>> serversToSegmentsMap =\n+            _pinotHelixResourceManager.getServerToSegmentsMap(tableNameWithType);\n+    TableMetadataReader tableMetadataReader =\n+            new TableMetadataReader(_executor, _connectionManager, _pinotHelixResourceManager);\n+    return tableMetadataReader.getReloadStatus(tableNameWithType, serversToSegmentsMap,\n+            _controllerConf.getServerAdminRequestTimeoutSeconds() * 1000);\n+  }\n+\n+  @GET\n+  @Path(\"segments/{tableName}/metadata\")\n+  @Produces(MediaType.APPLICATION_JSON)\n+  @ApiOperation(value = \"Get the metadata for a segment\", notes = \"Get the metadata for a segment\")\n+  public Map<String, String> getServerMetadata(@ApiParam(value = \"Name of the table\", required = true) @PathParam(\"tableName\") String tableName,\n+                                               @ApiParam(value = \"OFFLINE|REALTIME\") @QueryParam(\"type\") String tableTypeStr) {\n+    TableType tableType = Constants.validateTableType(tableTypeStr);\n+    if (tableType == TableType.REALTIME)\n+      throw new ControllerApplicationException(LOGGER,\n+              \"Table type : \" + tableTypeStr + \" not yet supported.\", Status.NOT_IMPLEMENTED);\n+\n+    List<String> tableNamesWithType = getExistingTableNamesWithType(tableName, Constants.validateTableType(tableTypeStr));\n+    Map<String, String> segmentsMetadata = null;\n+    try {\n+      segmentsMetadata = getSegmentsMetadataFromServer(tableNamesWithType.get(0));\n+    } catch (InvalidConfigException e) {\n+      throw new ControllerApplicationException(LOGGER,\n+              \"Failed to load segment reload status for table: \" + tableName, Status.NOT_FOUND);\n+    } catch (IOException ioe) {\n+      throw new ControllerApplicationException(LOGGER,\n+              \"Error parsing response to cluster config!\", Response.Status.BAD_REQUEST, ioe);\n+    }\n+    if (segmentsMetadata == null)\n+      throw new ControllerApplicationException(LOGGER,\n+              \"Table: \" + tableName + \" not found.\", Status.NOT_FOUND);\n+    return segmentsMetadata;\n+  }\n+\n+  private Map<String, String> getSegmentsMetadataFromServer(String tableNameWithType)\n+          throws InvalidConfigException, IOException {\n+    LOGGER.trace(\"Inside getSegmentsMetadataFromServer() entry\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7e31c1136090a48823c1a159d8608f37375a0096"}, "originalPosition": 427}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3NDIxMzUyOnYy", "diffSide": "RIGHT", "path": "pinot-controller/src/main/java/org/apache/pinot/controller/util/TableMetadataReader.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNlQwMzozNDo1N1rOG3JC9Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQwNDozNToyMlrOG38Q8A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDQ3MzA3Nw==", "bodyText": "can we move call to fetch serverToSegmentsMap inside this method, so that it's consistent with the getSegmentsMetadata Method?", "url": "https://github.com/apache/pinot/pull/5718#discussion_r460473077", "createdAt": "2020-07-26T03:34:57Z", "author": {"login": "npawar"}, "path": "pinot-controller/src/main/java/org/apache/pinot/controller/util/TableMetadataReader.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.controller.util;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.google.common.collect.BiMap;\n+import java.io.IOException;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.Executor;\n+import org.apache.commons.httpclient.HttpConnectionManager;\n+import org.apache.pinot.common.exception.InvalidConfigException;\n+import org.apache.pinot.common.restlet.resources.SegmentStatus;\n+import org.apache.pinot.controller.api.resources.ServerSegmentMetadataReader;\n+import org.apache.pinot.controller.helix.core.PinotHelixResourceManager;\n+import org.apache.pinot.spi.utils.JsonUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class TableMetadataReader {\n+  private static final Logger LOGGER = LoggerFactory.getLogger(TableMetadataReader.class);\n+\n+  private final Executor executor;\n+  private final HttpConnectionManager connectionManager;\n+  private final PinotHelixResourceManager pinotHelixResourceManager;\n+\n+  public TableMetadataReader(Executor executor, HttpConnectionManager connectionManager,\n+                             PinotHelixResourceManager helixResourceManager) {\n+    this.executor = executor;\n+    this.connectionManager = connectionManager;\n+    this.pinotHelixResourceManager = helixResourceManager;\n+  }\n+\n+  public TableReloadStatus getReloadStatus(String tableNameWithType, Map<String, List<String>> serverToSegmentsMap,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7e31c1136090a48823c1a159d8608f37375a0096"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDQ5MTQ2OQ==", "bodyText": "It is outside in both methods as the \"server side\" classes don't have the resourceManager object. If it is moved to server side classes then the resourceManager object needs to be passed on - which might be overkill?", "url": "https://github.com/apache/pinot/pull/5718#discussion_r460491469", "createdAt": "2020-07-26T07:28:44Z", "author": {"login": "guruguha"}, "path": "pinot-controller/src/main/java/org/apache/pinot/controller/util/TableMetadataReader.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.controller.util;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.google.common.collect.BiMap;\n+import java.io.IOException;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.Executor;\n+import org.apache.commons.httpclient.HttpConnectionManager;\n+import org.apache.pinot.common.exception.InvalidConfigException;\n+import org.apache.pinot.common.restlet.resources.SegmentStatus;\n+import org.apache.pinot.controller.api.resources.ServerSegmentMetadataReader;\n+import org.apache.pinot.controller.helix.core.PinotHelixResourceManager;\n+import org.apache.pinot.spi.utils.JsonUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class TableMetadataReader {\n+  private static final Logger LOGGER = LoggerFactory.getLogger(TableMetadataReader.class);\n+\n+  private final Executor executor;\n+  private final HttpConnectionManager connectionManager;\n+  private final PinotHelixResourceManager pinotHelixResourceManager;\n+\n+  public TableMetadataReader(Executor executor, HttpConnectionManager connectionManager,\n+                             PinotHelixResourceManager helixResourceManager) {\n+    this.executor = executor;\n+    this.connectionManager = connectionManager;\n+    this.pinotHelixResourceManager = helixResourceManager;\n+  }\n+\n+  public TableReloadStatus getReloadStatus(String tableNameWithType, Map<String, List<String>> serverToSegmentsMap,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDQ3MzA3Nw=="}, "originalCommit": {"oid": "7e31c1136090a48823c1a159d8608f37375a0096"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDU3MzIwNg==", "bodyText": "oh i meant this call\nfinal Map<String, List<String>> serverToSegments = _pinotHelixResourceManager.getServerToSegmentsMap(tableNameWithType);\n\nIt is called in the getSegmentsMetadata, but for getReloadStatus, it is being passed from caller", "url": "https://github.com/apache/pinot/pull/5718#discussion_r460573206", "createdAt": "2020-07-26T21:03:31Z", "author": {"login": "npawar"}, "path": "pinot-controller/src/main/java/org/apache/pinot/controller/util/TableMetadataReader.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.controller.util;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.google.common.collect.BiMap;\n+import java.io.IOException;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.Executor;\n+import org.apache.commons.httpclient.HttpConnectionManager;\n+import org.apache.pinot.common.exception.InvalidConfigException;\n+import org.apache.pinot.common.restlet.resources.SegmentStatus;\n+import org.apache.pinot.controller.api.resources.ServerSegmentMetadataReader;\n+import org.apache.pinot.controller.helix.core.PinotHelixResourceManager;\n+import org.apache.pinot.spi.utils.JsonUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class TableMetadataReader {\n+  private static final Logger LOGGER = LoggerFactory.getLogger(TableMetadataReader.class);\n+\n+  private final Executor executor;\n+  private final HttpConnectionManager connectionManager;\n+  private final PinotHelixResourceManager pinotHelixResourceManager;\n+\n+  public TableMetadataReader(Executor executor, HttpConnectionManager connectionManager,\n+                             PinotHelixResourceManager helixResourceManager) {\n+    this.executor = executor;\n+    this.connectionManager = connectionManager;\n+    this.pinotHelixResourceManager = helixResourceManager;\n+  }\n+\n+  public TableReloadStatus getReloadStatus(String tableNameWithType, Map<String, List<String>> serverToSegmentsMap,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDQ3MzA3Nw=="}, "originalCommit": {"oid": "7e31c1136090a48823c1a159d8608f37375a0096"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTMxMjI0MA==", "bodyText": "I see, got it. updated the same.", "url": "https://github.com/apache/pinot/pull/5718#discussion_r461312240", "createdAt": "2020-07-28T04:35:22Z", "author": {"login": "guruguha"}, "path": "pinot-controller/src/main/java/org/apache/pinot/controller/util/TableMetadataReader.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.controller.util;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.google.common.collect.BiMap;\n+import java.io.IOException;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.Executor;\n+import org.apache.commons.httpclient.HttpConnectionManager;\n+import org.apache.pinot.common.exception.InvalidConfigException;\n+import org.apache.pinot.common.restlet.resources.SegmentStatus;\n+import org.apache.pinot.controller.api.resources.ServerSegmentMetadataReader;\n+import org.apache.pinot.controller.helix.core.PinotHelixResourceManager;\n+import org.apache.pinot.spi.utils.JsonUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class TableMetadataReader {\n+  private static final Logger LOGGER = LoggerFactory.getLogger(TableMetadataReader.class);\n+\n+  private final Executor executor;\n+  private final HttpConnectionManager connectionManager;\n+  private final PinotHelixResourceManager pinotHelixResourceManager;\n+\n+  public TableMetadataReader(Executor executor, HttpConnectionManager connectionManager,\n+                             PinotHelixResourceManager helixResourceManager) {\n+    this.executor = executor;\n+    this.connectionManager = connectionManager;\n+    this.pinotHelixResourceManager = helixResourceManager;\n+  }\n+\n+  public TableReloadStatus getReloadStatus(String tableNameWithType, Map<String, List<String>> serverToSegmentsMap,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDQ3MzA3Nw=="}, "originalCommit": {"oid": "7e31c1136090a48823c1a159d8608f37375a0096"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3NDIxNDkyOnYy", "diffSide": "RIGHT", "path": "pinot-controller/src/main/java/org/apache/pinot/controller/util/TableMetadataReader.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNlQwMzozNjo1MFrOG3JDkg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNlQwNzozMDowN1rOG3KLZw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDQ3MzIzNA==", "bodyText": "didnt understand why this needs to be copied to another ObjectNode. Can we get it directly from JsonNode?", "url": "https://github.com/apache/pinot/pull/5718#discussion_r460473234", "createdAt": "2020-07-26T03:36:50Z", "author": {"login": "npawar"}, "path": "pinot-controller/src/main/java/org/apache/pinot/controller/util/TableMetadataReader.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.controller.util;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.google.common.collect.BiMap;\n+import java.io.IOException;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.Executor;\n+import org.apache.commons.httpclient.HttpConnectionManager;\n+import org.apache.pinot.common.exception.InvalidConfigException;\n+import org.apache.pinot.common.restlet.resources.SegmentStatus;\n+import org.apache.pinot.controller.api.resources.ServerSegmentMetadataReader;\n+import org.apache.pinot.controller.helix.core.PinotHelixResourceManager;\n+import org.apache.pinot.spi.utils.JsonUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class TableMetadataReader {\n+  private static final Logger LOGGER = LoggerFactory.getLogger(TableMetadataReader.class);\n+\n+  private final Executor executor;\n+  private final HttpConnectionManager connectionManager;\n+  private final PinotHelixResourceManager pinotHelixResourceManager;\n+\n+  public TableMetadataReader(Executor executor, HttpConnectionManager connectionManager,\n+                             PinotHelixResourceManager helixResourceManager) {\n+    this.executor = executor;\n+    this.connectionManager = connectionManager;\n+    this.pinotHelixResourceManager = helixResourceManager;\n+  }\n+\n+  public TableReloadStatus getReloadStatus(String tableNameWithType, Map<String, List<String>> serverToSegmentsMap,\n+                                           int timeoutMs)\n+          throws InvalidConfigException {\n+    BiMap<String, String> endpoints = pinotHelixResourceManager.getDataInstanceAdminEndpoints(serverToSegmentsMap.keySet());\n+    ServerSegmentMetadataReader serverSegmentMetadataReader = new ServerSegmentMetadataReader(executor, connectionManager);\n+\n+    List<SegmentStatus> segmentStatus = serverSegmentMetadataReader.getSegmentReloadTime(tableNameWithType, serverToSegmentsMap, endpoints, timeoutMs);\n+    TableReloadStatus tableReloadStatus = new TableReloadStatus();\n+    tableReloadStatus._tableName = tableNameWithType;\n+    tableReloadStatus._segmentStatus = segmentStatus;\n+    return tableReloadStatus;\n+  }\n+\n+  public Map<String, String> getSegmentsMetadata(String tableNameWithType, int timeoutMs) throws InvalidConfigException, IOException {\n+    final Map<String, List<String>> serversToSegmentsMap =\n+            pinotHelixResourceManager.getServerToSegmentsMap(tableNameWithType);\n+    BiMap<String, String> endpoints = pinotHelixResourceManager.getDataInstanceAdminEndpoints(serversToSegmentsMap.keySet());\n+    ServerSegmentMetadataReader serverSegmentMetadataReader = new ServerSegmentMetadataReader(executor, connectionManager);\n+\n+    List<String> segmentsMetadata = serverSegmentMetadataReader.getSegmentMetadataFromServer(tableNameWithType,\n+            serversToSegmentsMap, endpoints, timeoutMs);\n+\n+    Map<String, String> response = new HashMap<>();\n+    for (String segmentMetadata : segmentsMetadata) {\n+      JsonNode responseJson = JsonUtils.stringToJsonNode(segmentMetadata);\n+      ObjectNode objectNode = responseJson.deepCopy();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7e31c1136090a48823c1a159d8608f37375a0096"}, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDQ5MTYyMw==", "bodyText": "I had it for a different logic - will remove.", "url": "https://github.com/apache/pinot/pull/5718#discussion_r460491623", "createdAt": "2020-07-26T07:30:07Z", "author": {"login": "guruguha"}, "path": "pinot-controller/src/main/java/org/apache/pinot/controller/util/TableMetadataReader.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.controller.util;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.google.common.collect.BiMap;\n+import java.io.IOException;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.Executor;\n+import org.apache.commons.httpclient.HttpConnectionManager;\n+import org.apache.pinot.common.exception.InvalidConfigException;\n+import org.apache.pinot.common.restlet.resources.SegmentStatus;\n+import org.apache.pinot.controller.api.resources.ServerSegmentMetadataReader;\n+import org.apache.pinot.controller.helix.core.PinotHelixResourceManager;\n+import org.apache.pinot.spi.utils.JsonUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class TableMetadataReader {\n+  private static final Logger LOGGER = LoggerFactory.getLogger(TableMetadataReader.class);\n+\n+  private final Executor executor;\n+  private final HttpConnectionManager connectionManager;\n+  private final PinotHelixResourceManager pinotHelixResourceManager;\n+\n+  public TableMetadataReader(Executor executor, HttpConnectionManager connectionManager,\n+                             PinotHelixResourceManager helixResourceManager) {\n+    this.executor = executor;\n+    this.connectionManager = connectionManager;\n+    this.pinotHelixResourceManager = helixResourceManager;\n+  }\n+\n+  public TableReloadStatus getReloadStatus(String tableNameWithType, Map<String, List<String>> serverToSegmentsMap,\n+                                           int timeoutMs)\n+          throws InvalidConfigException {\n+    BiMap<String, String> endpoints = pinotHelixResourceManager.getDataInstanceAdminEndpoints(serverToSegmentsMap.keySet());\n+    ServerSegmentMetadataReader serverSegmentMetadataReader = new ServerSegmentMetadataReader(executor, connectionManager);\n+\n+    List<SegmentStatus> segmentStatus = serverSegmentMetadataReader.getSegmentReloadTime(tableNameWithType, serverToSegmentsMap, endpoints, timeoutMs);\n+    TableReloadStatus tableReloadStatus = new TableReloadStatus();\n+    tableReloadStatus._tableName = tableNameWithType;\n+    tableReloadStatus._segmentStatus = segmentStatus;\n+    return tableReloadStatus;\n+  }\n+\n+  public Map<String, String> getSegmentsMetadata(String tableNameWithType, int timeoutMs) throws InvalidConfigException, IOException {\n+    final Map<String, List<String>> serversToSegmentsMap =\n+            pinotHelixResourceManager.getServerToSegmentsMap(tableNameWithType);\n+    BiMap<String, String> endpoints = pinotHelixResourceManager.getDataInstanceAdminEndpoints(serversToSegmentsMap.keySet());\n+    ServerSegmentMetadataReader serverSegmentMetadataReader = new ServerSegmentMetadataReader(executor, connectionManager);\n+\n+    List<String> segmentsMetadata = serverSegmentMetadataReader.getSegmentMetadataFromServer(tableNameWithType,\n+            serversToSegmentsMap, endpoints, timeoutMs);\n+\n+    Map<String, String> response = new HashMap<>();\n+    for (String segmentMetadata : segmentsMetadata) {\n+      JsonNode responseJson = JsonUtils.stringToJsonNode(segmentMetadata);\n+      ObjectNode objectNode = responseJson.deepCopy();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDQ3MzIzNA=="}, "originalCommit": {"oid": "7e31c1136090a48823c1a159d8608f37375a0096"}, "originalPosition": 78}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3NDIxNTgyOnYy", "diffSide": "RIGHT", "path": "pinot-common/src/main/java/org/apache/pinot/common/restlet/resources/SegmentStatus.java", "isResolved": false, "comments": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNlQwMzozOTowM1rOG3JECA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMlQxNTozMDo1OVrOHFF6Cw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDQ3MzM1Mg==", "bodyText": "How about moving this also to TableReader just like TableReloadStatus? Also, if  you need the equals and hashcode, use EqualityUtils (look at Schema  class for example)", "url": "https://github.com/apache/pinot/pull/5718#discussion_r460473352", "createdAt": "2020-07-26T03:39:03Z", "author": {"login": "npawar"}, "path": "pinot-common/src/main/java/org/apache/pinot/common/restlet/resources/SegmentStatus.java", "diffHunk": "@@ -0,0 +1,64 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.common.restlet.resources;\n+\n+import java.util.Objects;\n+\n+public class SegmentStatus {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7e31c1136090a48823c1a159d8608f37375a0096"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDQ4OTc0NA==", "bodyText": "SegmentStatus is used in the server code as well. So, added a class to common for referencing.", "url": "https://github.com/apache/pinot/pull/5718#discussion_r460489744", "createdAt": "2020-07-26T07:10:01Z", "author": {"login": "guruguha"}, "path": "pinot-common/src/main/java/org/apache/pinot/common/restlet/resources/SegmentStatus.java", "diffHunk": "@@ -0,0 +1,64 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.common.restlet.resources;\n+\n+import java.util.Objects;\n+\n+public class SegmentStatus {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDQ3MzM1Mg=="}, "originalCommit": {"oid": "7e31c1136090a48823c1a159d8608f37375a0096"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDU3MjU1NQ==", "bodyText": "Could you change equals and hashcode to use EqualityUtils? Look at other classes in pinot-api for reference", "url": "https://github.com/apache/pinot/pull/5718#discussion_r460572555", "createdAt": "2020-07-26T20:56:27Z", "author": {"login": "npawar"}, "path": "pinot-common/src/main/java/org/apache/pinot/common/restlet/resources/SegmentStatus.java", "diffHunk": "@@ -0,0 +1,64 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.common.restlet.resources;\n+\n+import java.util.Objects;\n+\n+public class SegmentStatus {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDQ3MzM1Mg=="}, "originalCommit": {"oid": "7e31c1136090a48823c1a159d8608f37375a0096"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTMwMzkwNg==", "bodyText": "Working on changing the equals and hashcode. Will commit the changes.", "url": "https://github.com/apache/pinot/pull/5718#discussion_r461303906", "createdAt": "2020-07-28T04:01:51Z", "author": {"login": "guruguha"}, "path": "pinot-common/src/main/java/org/apache/pinot/common/restlet/resources/SegmentStatus.java", "diffHunk": "@@ -0,0 +1,64 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.common.restlet.resources;\n+\n+import java.util.Objects;\n+\n+public class SegmentStatus {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDQ3MzM1Mg=="}, "originalCommit": {"oid": "7e31c1136090a48823c1a159d8608f37375a0096"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTMxMDUzMQ==", "bodyText": "Actually, we may not need the equality methods yet, removing them.", "url": "https://github.com/apache/pinot/pull/5718#discussion_r461310531", "createdAt": "2020-07-28T04:28:43Z", "author": {"login": "guruguha"}, "path": "pinot-common/src/main/java/org/apache/pinot/common/restlet/resources/SegmentStatus.java", "diffHunk": "@@ -0,0 +1,64 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.common.restlet.resources;\n+\n+import java.util.Objects;\n+\n+public class SegmentStatus {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDQ3MzM1Mg=="}, "originalCommit": {"oid": "7e31c1136090a48823c1a159d8608f37375a0096"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQ0MTA3NQ==", "bodyText": "So, you are using this same class in both Controller as well as Server APIs. That is nice but has its pit falls. Imagine a case when we add a new field to this object. We cannot upgrade controllers and servers at the same time. So, there can exist a situation where servers are sending the old object (serialized) and the controller is trying to deserialize them using the new object. Or, vice versa.\nAt the minimum:\n\nWrite a block of comment at the top of the class that this class is upgrade sensitive explaining what may happen if it is changed without regard to upgrade consideration.\nSpecifically mention that fields cannot be removed from the class (I suppose, unless there are proper defaults)\nAdd an annotation to ignore unknown fields at the class level.", "url": "https://github.com/apache/pinot/pull/5718#discussion_r462441075", "createdAt": "2020-07-29T16:47:02Z", "author": {"login": "mcvsubbu"}, "path": "pinot-common/src/main/java/org/apache/pinot/common/restlet/resources/SegmentStatus.java", "diffHunk": "@@ -0,0 +1,64 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.common.restlet.resources;\n+\n+import java.util.Objects;\n+\n+public class SegmentStatus {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDQ3MzM1Mg=="}, "originalCommit": {"oid": "7e31c1136090a48823c1a159d8608f37375a0096"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQ1MzI1Nw==", "bodyText": "I strongly suggest we return a different object to the user instead of returning this one. It will enable us to evolve the internal interface independent of interface exposed to the user.\nAlso, the controller returned status could include other run-time status about a segment. For example:\n\nHelix externalview of the server so we know if it is online or not.\nThe crc, size, date uploaded/refreshed, etc. from segment metadata\nOther info as wee want to add later (e.g. number of times segment was hit/searched/selected since reboot, etc.)", "url": "https://github.com/apache/pinot/pull/5718#discussion_r462453257", "createdAt": "2020-07-29T17:07:04Z", "author": {"login": "mcvsubbu"}, "path": "pinot-common/src/main/java/org/apache/pinot/common/restlet/resources/SegmentStatus.java", "diffHunk": "@@ -0,0 +1,64 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.common.restlet.resources;\n+\n+import java.util.Objects;\n+\n+public class SegmentStatus {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDQ3MzM1Mg=="}, "originalCommit": {"oid": "7e31c1136090a48823c1a159d8608f37375a0096"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQ1NDk3NA==", "bodyText": "Please document each member in this object clearly, what it contains in various situations", "url": "https://github.com/apache/pinot/pull/5718#discussion_r462454974", "createdAt": "2020-07-29T17:09:52Z", "author": {"login": "mcvsubbu"}, "path": "pinot-common/src/main/java/org/apache/pinot/common/restlet/resources/SegmentStatus.java", "diffHunk": "@@ -0,0 +1,64 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.common.restlet.resources;\n+\n+import java.util.Objects;\n+\n+public class SegmentStatus {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDQ3MzM1Mg=="}, "originalCommit": {"oid": "7e31c1136090a48823c1a159d8608f37375a0096"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzgzODgwMw==", "bodyText": "Thanks for the suggestions! I will think about how to refactor my code and commit again.", "url": "https://github.com/apache/pinot/pull/5718#discussion_r463838803", "createdAt": "2020-07-31T21:02:10Z", "author": {"login": "guruguha"}, "path": "pinot-common/src/main/java/org/apache/pinot/common/restlet/resources/SegmentStatus.java", "diffHunk": "@@ -0,0 +1,64 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.common.restlet.resources;\n+\n+import java.util.Objects;\n+\n+public class SegmentStatus {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDQ3MzM1Mg=="}, "originalCommit": {"oid": "7e31c1136090a48823c1a159d8608f37375a0096"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDA5MzYwNQ==", "bodyText": "Not all comments have been addressed. Please justify the use of the same class to return values to the user. It makes upgrades bad. Add json ignore case so that the pain is at least reduced a bit.", "url": "https://github.com/apache/pinot/pull/5718#discussion_r474093605", "createdAt": "2020-08-20T15:57:04Z", "author": {"login": "mcvsubbu"}, "path": "pinot-common/src/main/java/org/apache/pinot/common/restlet/resources/SegmentStatus.java", "diffHunk": "@@ -0,0 +1,64 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.common.restlet.resources;\n+\n+import java.util.Objects;\n+\n+public class SegmentStatus {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDQ3MzM1Mg=="}, "originalCommit": {"oid": "7e31c1136090a48823c1a159d8608f37375a0096"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTEwMTcwNw==", "bodyText": "I think we do have that separation. We have a class TableReloadStatus in the controller that can be used to enhance any future requirements. The SegmentLoadStatus class can be then used for specific API - the loadStatus API.\nI have added JSON ignore to the SegmentLoadStatus class.", "url": "https://github.com/apache/pinot/pull/5718#discussion_r475101707", "createdAt": "2020-08-22T15:30:59Z", "author": {"login": "guruguha"}, "path": "pinot-common/src/main/java/org/apache/pinot/common/restlet/resources/SegmentStatus.java", "diffHunk": "@@ -0,0 +1,64 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.common.restlet.resources;\n+\n+import java.util.Objects;\n+\n+public class SegmentStatus {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDQ3MzM1Mg=="}, "originalCommit": {"oid": "7e31c1136090a48823c1a159d8608f37375a0096"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3NDIxNzQ1OnYy", "diffSide": "RIGHT", "path": "pinot-controller/src/main/java/org/apache/pinot/controller/api/resources/ServerSegmentMetadataReader.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNlQwMzo0MTozMFrOG3JEww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNlQwNzoxMzo0MFrOG3KFWg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDQ3MzUzOQ==", "bodyText": "nit: this log is misleading \"Updated metadata\"", "url": "https://github.com/apache/pinot/pull/5718#discussion_r460473539", "createdAt": "2020-07-26T03:41:30Z", "author": {"login": "npawar"}, "path": "pinot-controller/src/main/java/org/apache/pinot/controller/api/resources/ServerSegmentMetadataReader.java", "diffHunk": "@@ -0,0 +1,139 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.controller.api.resources;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.google.common.collect.BiMap;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.concurrent.CompletionService;\n+import java.util.concurrent.Executor;\n+import org.apache.commons.httpclient.HttpConnectionManager;\n+import org.apache.commons.httpclient.URI;\n+import org.apache.commons.httpclient.methods.GetMethod;\n+import org.apache.pinot.common.http.MultiGetRequest;\n+import org.apache.pinot.common.restlet.resources.SegmentStatus;\n+import org.apache.pinot.spi.utils.JsonUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class ServerSegmentMetadataReader {\n+  private static final Logger LOGGER = LoggerFactory.getLogger(ServerSegmentMetadataReader.class);\n+\n+  private final Executor _executor;\n+  private final HttpConnectionManager _connectionManager;\n+\n+  public ServerSegmentMetadataReader(Executor executor, HttpConnectionManager connectionManager) {\n+    _executor = executor;\n+    _connectionManager = connectionManager;\n+  }\n+\n+  public List<String> getSegmentMetadataFromServer(String tableNameWithType,\n+                                                   Map<String, List<String>> serversToSegmentsMap,\n+                                                   BiMap<String, String> endpoints, int timeoutMs) {\n+    LOGGER.info(\"Reading segment metadata from servers for table {}.\", tableNameWithType);\n+    List<String> serverURLs = new ArrayList<>();\n+    for (Map.Entry<String, List<String>> serverToSegments : serversToSegmentsMap.entrySet()) {\n+      List<String> segments = serverToSegments.getValue();\n+      for (String segment : segments) {\n+        serverURLs.add(generateSegmentMetadataServerURL(tableNameWithType, segment, endpoints.get(serverToSegments.getKey())));\n+      }\n+    }\n+    CompletionService<GetMethod> completionService =\n+            new MultiGetRequest(_executor, _connectionManager).execute(serverURLs, timeoutMs);\n+    List<String> segmentsMetadata = new ArrayList<>();\n+\n+    BiMap<String, String> endpointsToServers = endpoints.inverse();\n+    for (int i = 0; i < serverURLs.size(); i++) {\n+      GetMethod getMethod = null;\n+      try {\n+        getMethod = completionService.take().get();\n+        URI uri = getMethod.getURI();\n+        String instance = endpointsToServers.get(uri.getHost() + \":\" + uri.getPort());\n+        if (getMethod.getStatusCode() >= 300) {\n+          LOGGER.error(\"Server: {} returned error: {}\", instance, getMethod.getStatusCode());\n+          continue;\n+        }\n+        JsonNode segmentMetadata =\n+                JsonUtils.inputStreamToJsonNode(getMethod.getResponseBodyAsStream());\n+        segmentsMetadata.add(JsonUtils.objectToString(segmentMetadata));\n+        LOGGER.info(\"Updated segment metadata: {}\", segmentMetadata.size());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7e31c1136090a48823c1a159d8608f37375a0096"}, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDQ5MDA3NA==", "bodyText": "changed log message", "url": "https://github.com/apache/pinot/pull/5718#discussion_r460490074", "createdAt": "2020-07-26T07:13:40Z", "author": {"login": "guruguha"}, "path": "pinot-controller/src/main/java/org/apache/pinot/controller/api/resources/ServerSegmentMetadataReader.java", "diffHunk": "@@ -0,0 +1,139 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.controller.api.resources;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.google.common.collect.BiMap;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.concurrent.CompletionService;\n+import java.util.concurrent.Executor;\n+import org.apache.commons.httpclient.HttpConnectionManager;\n+import org.apache.commons.httpclient.URI;\n+import org.apache.commons.httpclient.methods.GetMethod;\n+import org.apache.pinot.common.http.MultiGetRequest;\n+import org.apache.pinot.common.restlet.resources.SegmentStatus;\n+import org.apache.pinot.spi.utils.JsonUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class ServerSegmentMetadataReader {\n+  private static final Logger LOGGER = LoggerFactory.getLogger(ServerSegmentMetadataReader.class);\n+\n+  private final Executor _executor;\n+  private final HttpConnectionManager _connectionManager;\n+\n+  public ServerSegmentMetadataReader(Executor executor, HttpConnectionManager connectionManager) {\n+    _executor = executor;\n+    _connectionManager = connectionManager;\n+  }\n+\n+  public List<String> getSegmentMetadataFromServer(String tableNameWithType,\n+                                                   Map<String, List<String>> serversToSegmentsMap,\n+                                                   BiMap<String, String> endpoints, int timeoutMs) {\n+    LOGGER.info(\"Reading segment metadata from servers for table {}.\", tableNameWithType);\n+    List<String> serverURLs = new ArrayList<>();\n+    for (Map.Entry<String, List<String>> serverToSegments : serversToSegmentsMap.entrySet()) {\n+      List<String> segments = serverToSegments.getValue();\n+      for (String segment : segments) {\n+        serverURLs.add(generateSegmentMetadataServerURL(tableNameWithType, segment, endpoints.get(serverToSegments.getKey())));\n+      }\n+    }\n+    CompletionService<GetMethod> completionService =\n+            new MultiGetRequest(_executor, _connectionManager).execute(serverURLs, timeoutMs);\n+    List<String> segmentsMetadata = new ArrayList<>();\n+\n+    BiMap<String, String> endpointsToServers = endpoints.inverse();\n+    for (int i = 0; i < serverURLs.size(); i++) {\n+      GetMethod getMethod = null;\n+      try {\n+        getMethod = completionService.take().get();\n+        URI uri = getMethod.getURI();\n+        String instance = endpointsToServers.get(uri.getHost() + \":\" + uri.getPort());\n+        if (getMethod.getStatusCode() >= 300) {\n+          LOGGER.error(\"Server: {} returned error: {}\", instance, getMethod.getStatusCode());\n+          continue;\n+        }\n+        JsonNode segmentMetadata =\n+                JsonUtils.inputStreamToJsonNode(getMethod.getResponseBodyAsStream());\n+        segmentsMetadata.add(JsonUtils.objectToString(segmentMetadata));\n+        LOGGER.info(\"Updated segment metadata: {}\", segmentMetadata.size());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDQ3MzUzOQ=="}, "originalCommit": {"oid": "7e31c1136090a48823c1a159d8608f37375a0096"}, "originalPosition": 78}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3NDIyNDY5OnYy", "diffSide": "RIGHT", "path": "pinot-server/src/main/java/org/apache/pinot/server/api/resources/SegmentColumnIndexesFetcher.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNlQwMzo1Mjo1OFrOG3JH1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNlQwMzo1Mjo1OFrOG3JH1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDQ3NDMyNA==", "bodyText": "remove comment", "url": "https://github.com/apache/pinot/pull/5718#discussion_r460474324", "createdAt": "2020-07-26T03:52:58Z", "author": {"login": "npawar"}, "path": "pinot-server/src/main/java/org/apache/pinot/server/api/resources/SegmentColumnIndexesFetcher.java", "diffHunk": "@@ -0,0 +1,83 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.server.api.resources;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.node.ArrayNode;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Set;\n+import org.apache.pinot.core.data.manager.SegmentDataManager;\n+import org.apache.pinot.core.data.manager.offline.ImmutableSegmentDataManager;\n+import org.apache.pinot.core.indexsegment.immutable.ImmutableSegment;\n+import org.apache.pinot.core.indexsegment.immutable.ImmutableSegmentImpl;\n+import org.apache.pinot.core.segment.index.column.ColumnIndexContainer;\n+import org.apache.pinot.spi.utils.JsonUtils;\n+\n+public class SegmentColumnIndexesFetcher {\n+  public static JsonNode getIndexesForSegmentColumns(SegmentDataManager segmentDataManager, Set<String> columnSet) {\n+    ArrayNode columnsIndexMetadata = JsonUtils.newArrayNode();\n+    if (segmentDataManager instanceof ImmutableSegmentDataManager) {\n+      ImmutableSegmentDataManager immutableSegmentDataManager = (ImmutableSegmentDataManager) segmentDataManager;\n+      ImmutableSegment immutableSegment = immutableSegmentDataManager.getSegment();\n+      if (immutableSegment instanceof ImmutableSegmentImpl) {\n+        ImmutableSegmentImpl immutableSegmentImpl = (ImmutableSegmentImpl) immutableSegment;\n+//        Set<String> columns = immutableSegmentImpl.getSegmentMetadata().getAllColumns();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7e31c1136090a48823c1a159d8608f37375a0096"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3NDIyNjQ1OnYy", "diffSide": "RIGHT", "path": "pinot-server/src/main/java/org/apache/pinot/server/api/resources/SegmentColumnIndexesFetcher.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNlQwMzo1NTo0OFrOG3JInQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNlQwMzo1NTo0OFrOG3JInQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDQ3NDUyNQ==", "bodyText": "nit: wrap all the if else using {}\ncreate private static final constants for the keys and values that are being put in indexesNode.", "url": "https://github.com/apache/pinot/pull/5718#discussion_r460474525", "createdAt": "2020-07-26T03:55:48Z", "author": {"login": "npawar"}, "path": "pinot-server/src/main/java/org/apache/pinot/server/api/resources/SegmentColumnIndexesFetcher.java", "diffHunk": "@@ -0,0 +1,83 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.server.api.resources;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.node.ArrayNode;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Set;\n+import org.apache.pinot.core.data.manager.SegmentDataManager;\n+import org.apache.pinot.core.data.manager.offline.ImmutableSegmentDataManager;\n+import org.apache.pinot.core.indexsegment.immutable.ImmutableSegment;\n+import org.apache.pinot.core.indexsegment.immutable.ImmutableSegmentImpl;\n+import org.apache.pinot.core.segment.index.column.ColumnIndexContainer;\n+import org.apache.pinot.spi.utils.JsonUtils;\n+\n+public class SegmentColumnIndexesFetcher {\n+  public static JsonNode getIndexesForSegmentColumns(SegmentDataManager segmentDataManager, Set<String> columnSet) {\n+    ArrayNode columnsIndexMetadata = JsonUtils.newArrayNode();\n+    if (segmentDataManager instanceof ImmutableSegmentDataManager) {\n+      ImmutableSegmentDataManager immutableSegmentDataManager = (ImmutableSegmentDataManager) segmentDataManager;\n+      ImmutableSegment immutableSegment = immutableSegmentDataManager.getSegment();\n+      if (immutableSegment instanceof ImmutableSegmentImpl) {\n+        ImmutableSegmentImpl immutableSegmentImpl = (ImmutableSegmentImpl) immutableSegment;\n+//        Set<String> columns = immutableSegmentImpl.getSegmentMetadata().getAllColumns();\n+        Map<String, ColumnIndexContainer> columnIndexContainerMap = immutableSegmentImpl.getIndexContainerMap();\n+        columnsIndexMetadata.add(getImmutableSegmentColumnIndexes(columnIndexContainerMap, columnSet));\n+      }\n+    }\n+    return columnsIndexMetadata;\n+  }\n+\n+  private static ObjectNode getImmutableSegmentColumnIndexes(Map<String, ColumnIndexContainer> columnIndexContainerMap,\n+                                                             Set<String> columnSet) {\n+    ObjectNode columnIndexMap = JsonUtils.newObjectNode();\n+\n+    for (Map.Entry<String, ColumnIndexContainer> e : columnIndexContainerMap.entrySet()) {\n+      if (columnSet != null && !columnSet.contains(e.getKey())) {\n+        continue;\n+      }\n+      ColumnIndexContainer columnIndexContainer = e.getValue();\n+      ObjectNode indexesNode = JsonUtils.newObjectNode();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7e31c1136090a48823c1a159d8608f37375a0096"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3NDIyNjczOnYy", "diffSide": "RIGHT", "path": "pinot-server/src/main/java/org/apache/pinot/server/api/resources/SegmentColumnIndexesFetcher.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNlQwMzo1NjoyNlrOG3JIvA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNlQwNzowNjoyN1rOG3KCwg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDQ3NDU1Ng==", "bodyText": "any reason you're using ObjectNode instead of Map?", "url": "https://github.com/apache/pinot/pull/5718#discussion_r460474556", "createdAt": "2020-07-26T03:56:26Z", "author": {"login": "npawar"}, "path": "pinot-server/src/main/java/org/apache/pinot/server/api/resources/SegmentColumnIndexesFetcher.java", "diffHunk": "@@ -0,0 +1,83 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.server.api.resources;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.node.ArrayNode;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Set;\n+import org.apache.pinot.core.data.manager.SegmentDataManager;\n+import org.apache.pinot.core.data.manager.offline.ImmutableSegmentDataManager;\n+import org.apache.pinot.core.indexsegment.immutable.ImmutableSegment;\n+import org.apache.pinot.core.indexsegment.immutable.ImmutableSegmentImpl;\n+import org.apache.pinot.core.segment.index.column.ColumnIndexContainer;\n+import org.apache.pinot.spi.utils.JsonUtils;\n+\n+public class SegmentColumnIndexesFetcher {\n+  public static JsonNode getIndexesForSegmentColumns(SegmentDataManager segmentDataManager, Set<String> columnSet) {\n+    ArrayNode columnsIndexMetadata = JsonUtils.newArrayNode();\n+    if (segmentDataManager instanceof ImmutableSegmentDataManager) {\n+      ImmutableSegmentDataManager immutableSegmentDataManager = (ImmutableSegmentDataManager) segmentDataManager;\n+      ImmutableSegment immutableSegment = immutableSegmentDataManager.getSegment();\n+      if (immutableSegment instanceof ImmutableSegmentImpl) {\n+        ImmutableSegmentImpl immutableSegmentImpl = (ImmutableSegmentImpl) immutableSegment;\n+//        Set<String> columns = immutableSegmentImpl.getSegmentMetadata().getAllColumns();\n+        Map<String, ColumnIndexContainer> columnIndexContainerMap = immutableSegmentImpl.getIndexContainerMap();\n+        columnsIndexMetadata.add(getImmutableSegmentColumnIndexes(columnIndexContainerMap, columnSet));\n+      }\n+    }\n+    return columnsIndexMetadata;\n+  }\n+\n+  private static ObjectNode getImmutableSegmentColumnIndexes(Map<String, ColumnIndexContainer> columnIndexContainerMap,\n+                                                             Set<String> columnSet) {\n+    ObjectNode columnIndexMap = JsonUtils.newObjectNode();\n+\n+    for (Map.Entry<String, ColumnIndexContainer> e : columnIndexContainerMap.entrySet()) {\n+      if (columnSet != null && !columnSet.contains(e.getKey())) {\n+        continue;\n+      }\n+      ColumnIndexContainer columnIndexContainer = e.getValue();\n+      ObjectNode indexesNode = JsonUtils.newObjectNode();\n+      if (Objects.isNull(columnIndexContainer.getBloomFilter())) indexesNode.put(\"bloom-filter\", \"NO\");\n+      else indexesNode.put(\"bloom-filter\", \"YES\");\n+\n+      if (Objects.isNull(columnIndexContainer.getDictionary())) indexesNode.put(\"dictionary\", \"NO\");\n+      else indexesNode.put(\"dictionary\", \"YES\");\n+\n+      if (Objects.isNull(columnIndexContainer.getForwardIndex())) indexesNode.put(\"forward-index\", \"NO\");\n+      else indexesNode.put(\"forward-index\", \"YES\");\n+\n+      if (Objects.isNull(columnIndexContainer.getInvertedIndex())) indexesNode.put(\"inverted-index\", \"NO\");\n+      else indexesNode.put(\"inverted-index\", \"YES\");\n+\n+      if (Objects.isNull(columnIndexContainer.getNullValueVector()))\n+        indexesNode.put(\"null-value-vector-reader\", \"NO\");\n+      else indexesNode.put(\"null-value-vector-reader\", \"YES\");\n+\n+      if (Objects.isNull(columnIndexContainer.getNullValueVector())) indexesNode.put(\"range-index\", \"NO\");\n+      else indexesNode.put(\"range-index\", \"YES\");\n+\n+      columnIndexMap.set(e.getKey(), indexesNode);\n+    }\n+    return columnIndexMap;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7e31c1136090a48823c1a159d8608f37375a0096"}, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDQ4OTQxMA==", "bodyText": "The segment metadata is a JsonNode converted to a json string. I thought of using the same object conversion so that it is kept consistent.", "url": "https://github.com/apache/pinot/pull/5718#discussion_r460489410", "createdAt": "2020-07-26T07:06:27Z", "author": {"login": "guruguha"}, "path": "pinot-server/src/main/java/org/apache/pinot/server/api/resources/SegmentColumnIndexesFetcher.java", "diffHunk": "@@ -0,0 +1,83 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.server.api.resources;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.node.ArrayNode;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Set;\n+import org.apache.pinot.core.data.manager.SegmentDataManager;\n+import org.apache.pinot.core.data.manager.offline.ImmutableSegmentDataManager;\n+import org.apache.pinot.core.indexsegment.immutable.ImmutableSegment;\n+import org.apache.pinot.core.indexsegment.immutable.ImmutableSegmentImpl;\n+import org.apache.pinot.core.segment.index.column.ColumnIndexContainer;\n+import org.apache.pinot.spi.utils.JsonUtils;\n+\n+public class SegmentColumnIndexesFetcher {\n+  public static JsonNode getIndexesForSegmentColumns(SegmentDataManager segmentDataManager, Set<String> columnSet) {\n+    ArrayNode columnsIndexMetadata = JsonUtils.newArrayNode();\n+    if (segmentDataManager instanceof ImmutableSegmentDataManager) {\n+      ImmutableSegmentDataManager immutableSegmentDataManager = (ImmutableSegmentDataManager) segmentDataManager;\n+      ImmutableSegment immutableSegment = immutableSegmentDataManager.getSegment();\n+      if (immutableSegment instanceof ImmutableSegmentImpl) {\n+        ImmutableSegmentImpl immutableSegmentImpl = (ImmutableSegmentImpl) immutableSegment;\n+//        Set<String> columns = immutableSegmentImpl.getSegmentMetadata().getAllColumns();\n+        Map<String, ColumnIndexContainer> columnIndexContainerMap = immutableSegmentImpl.getIndexContainerMap();\n+        columnsIndexMetadata.add(getImmutableSegmentColumnIndexes(columnIndexContainerMap, columnSet));\n+      }\n+    }\n+    return columnsIndexMetadata;\n+  }\n+\n+  private static ObjectNode getImmutableSegmentColumnIndexes(Map<String, ColumnIndexContainer> columnIndexContainerMap,\n+                                                             Set<String> columnSet) {\n+    ObjectNode columnIndexMap = JsonUtils.newObjectNode();\n+\n+    for (Map.Entry<String, ColumnIndexContainer> e : columnIndexContainerMap.entrySet()) {\n+      if (columnSet != null && !columnSet.contains(e.getKey())) {\n+        continue;\n+      }\n+      ColumnIndexContainer columnIndexContainer = e.getValue();\n+      ObjectNode indexesNode = JsonUtils.newObjectNode();\n+      if (Objects.isNull(columnIndexContainer.getBloomFilter())) indexesNode.put(\"bloom-filter\", \"NO\");\n+      else indexesNode.put(\"bloom-filter\", \"YES\");\n+\n+      if (Objects.isNull(columnIndexContainer.getDictionary())) indexesNode.put(\"dictionary\", \"NO\");\n+      else indexesNode.put(\"dictionary\", \"YES\");\n+\n+      if (Objects.isNull(columnIndexContainer.getForwardIndex())) indexesNode.put(\"forward-index\", \"NO\");\n+      else indexesNode.put(\"forward-index\", \"YES\");\n+\n+      if (Objects.isNull(columnIndexContainer.getInvertedIndex())) indexesNode.put(\"inverted-index\", \"NO\");\n+      else indexesNode.put(\"inverted-index\", \"YES\");\n+\n+      if (Objects.isNull(columnIndexContainer.getNullValueVector()))\n+        indexesNode.put(\"null-value-vector-reader\", \"NO\");\n+      else indexesNode.put(\"null-value-vector-reader\", \"YES\");\n+\n+      if (Objects.isNull(columnIndexContainer.getNullValueVector())) indexesNode.put(\"range-index\", \"NO\");\n+      else indexesNode.put(\"range-index\", \"YES\");\n+\n+      columnIndexMap.set(e.getKey(), indexesNode);\n+    }\n+    return columnIndexMap;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDQ3NDU1Ng=="}, "originalCommit": {"oid": "7e31c1136090a48823c1a159d8608f37375a0096"}, "originalPosition": 81}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3NDIyOTA1OnYy", "diffSide": "RIGHT", "path": "pinot-server/src/test/java/org/apache/pinot/server/api/TablesResourceTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNlQwNDowMDowMlrOG3JJwA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNlQwNDowMDowMlrOG3JJwA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDQ3NDgxNg==", "bodyText": "remove all the unnecessary whitespace additions in this file", "url": "https://github.com/apache/pinot/pull/5718#discussion_r460474816", "createdAt": "2020-07-26T04:00:02Z", "author": {"login": "npawar"}, "path": "pinot-server/src/test/java/org/apache/pinot/server/api/TablesResourceTest.java", "diffHunk": "@@ -44,7 +48,7 @@\n \n   @Test\n   public void getTables()\n-      throws Exception {\n+          throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7e31c1136090a48823c1a159d8608f37375a0096"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4NzIxOTg4OnYy", "diffSide": "RIGHT", "path": "pinot-common/src/main/java/org/apache/pinot/common/restlet/resources/SegmentStatus.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxNzowOTowNVrOG5B-ww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxNzowOTowNVrOG5B-ww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQ1NDQ2Nw==", "bodyText": "Why is this a \"String\"? Why not 'long'?\nPlease clearly indicate the time unit in the field name. e.g. segmentReloadTimeUTCMs\nWhat is the value in this field if the segment was never reloaded, or the server restarts after the reload? Or, the reload faced an error and failed?", "url": "https://github.com/apache/pinot/pull/5718#discussion_r462454467", "createdAt": "2020-07-29T17:09:05Z", "author": {"login": "mcvsubbu"}, "path": "pinot-common/src/main/java/org/apache/pinot/common/restlet/resources/SegmentStatus.java", "diffHunk": "@@ -0,0 +1,43 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.common.restlet.resources;\n+\n+/**\n+ * Holds segment last reload time status along with any errors for a segment with unsuccessful call to get reload times.\n+ */\n+public class SegmentStatus {\n+  public String _segmentName;\n+  public String _segmentReloadTime;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1cea905ee8f4343b2c7f50a0612a53dae6fa34b1"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4NzIyOTY0OnYy", "diffSide": "RIGHT", "path": "pinot-controller/src/main/java/org/apache/pinot/controller/api/resources/PinotSegmentRestletResource.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxNzoxMTozOFrOG5CE2g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxNzoxMTozOFrOG5CE2g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQ1NjAyNg==", "bodyText": "Let us call it \"loadStatus\" or \"runTimeStatus\" (I think all our APIs are in camel case). And change the comments/String below appropriately", "url": "https://github.com/apache/pinot/pull/5718#discussion_r462456026", "createdAt": "2020-07-29T17:11:38Z", "author": {"login": "mcvsubbu"}, "path": "pinot-controller/src/main/java/org/apache/pinot/controller/api/resources/PinotSegmentRestletResource.java", "diffHunk": "@@ -485,4 +503,80 @@ private void deleteSegmentsInternal(String tableNameWithType, List<String> segme\n       throw new ControllerApplicationException(LOGGER, e.getMessage(), Response.Status.FORBIDDEN);\n     }\n   }\n+\n+  @GET\n+  @Path(\"segments/{tableName}/reload-status\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1cea905ee8f4343b2c7f50a0612a53dae6fa34b1"}, "originalPosition": 80}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4NzIzNjgzOnYy", "diffSide": "RIGHT", "path": "pinot-controller/src/main/java/org/apache/pinot/controller/api/resources/PinotSegmentRestletResource.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxNzoxMzoyNFrOG5CJZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxNzoxMzoyNFrOG5CJZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQ1NzE4OA==", "bodyText": "Seems like a debug level log.", "url": "https://github.com/apache/pinot/pull/5718#discussion_r462457188", "createdAt": "2020-07-29T17:13:24Z", "author": {"login": "mcvsubbu"}, "path": "pinot-controller/src/main/java/org/apache/pinot/controller/api/resources/PinotSegmentRestletResource.java", "diffHunk": "@@ -485,4 +503,80 @@ private void deleteSegmentsInternal(String tableNameWithType, List<String> segme\n       throw new ControllerApplicationException(LOGGER, e.getMessage(), Response.Status.FORBIDDEN);\n     }\n   }\n+\n+  @GET\n+  @Path(\"segments/{tableName}/reload-status\")\n+  @Produces(MediaType.APPLICATION_JSON)\n+  @ApiOperation(value = \"Status of segment reload\", notes = \"Status of segment reload\")\n+  public Map<String, ServerSegmentMetadataReader.TableReloadStatus> getReloadStatus(\n+      @ApiParam(value = \"Name of the table\", required = true) @PathParam(\"tableName\") String tableName,\n+      @ApiParam(value = \"OFFLINE|REALTIME\") @QueryParam(\"type\") String tableTypeStr) {\n+    TableType tableType = Constants.validateTableType(tableTypeStr);\n+    if (tableType == TableType.REALTIME) {\n+      throw new ControllerApplicationException(LOGGER,\n+          \"Table type : \" + tableTypeStr + \" not yet supported.\", Status.NOT_IMPLEMENTED);\n+    }\n+\n+    List<String> tableNamesWithType = getExistingTableNamesWithType(tableName, Constants.validateTableType(tableTypeStr));\n+    Map<String, ServerSegmentMetadataReader.TableReloadStatus> reloadStatusMap = new HashMap<>();\n+    for (String tableNameWithType : tableNamesWithType) {\n+      ServerSegmentMetadataReader.TableReloadStatus tableReloadStatus;\n+      try {\n+        tableReloadStatus = getSegmentsReloadStatus(tableNameWithType);\n+      } catch (InvalidConfigException e) {\n+        throw new ControllerApplicationException(LOGGER, e.getMessage(), Status.BAD_REQUEST);\n+      }\n+      reloadStatusMap.put(tableNameWithType, tableReloadStatus);\n+    }\n+    return reloadStatusMap;\n+  }\n+\n+  private ServerSegmentMetadataReader.TableReloadStatus getSegmentsReloadStatus(String tableNameWithType)\n+      throws InvalidConfigException {\n+    TableMetadataReader tableMetadataReader =\n+        new TableMetadataReader(_executor, _connectionManager, _pinotHelixResourceManager);\n+    return tableMetadataReader.getReloadStatus(tableNameWithType,\n+        _controllerConf.getServerAdminRequestTimeoutSeconds() * 1000);\n+  }\n+\n+  @GET\n+  @Path(\"segments/{tableName}/metadata\")\n+  @Produces(MediaType.APPLICATION_JSON)\n+  @ApiOperation(value = \"Get the server metadata for all table segments\", notes = \"Get the server metadata for all table segments\")\n+  public Map<String, String> getServerMetadata(@ApiParam(value = \"Name of the table\", required = true) @PathParam(\"tableName\") String tableName,\n+                                               @ApiParam(value = \"OFFLINE|REALTIME\") @QueryParam(\"type\") String tableTypeStr) {\n+    LOGGER.info(\"Received a request to fetch metadata for all segments for table {}\", tableName);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1cea905ee8f4343b2c7f50a0612a53dae6fa34b1"}, "originalPosition": 120}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4NzI0MTUzOnYy", "diffSide": "RIGHT", "path": "pinot-controller/src/main/java/org/apache/pinot/controller/api/resources/PinotSegmentRestletResource.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxNzoxNDo0MVrOG5CMcQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wMVQwMDoyNjoxN1rOG6Z8yA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQ1Nzk2OQ==", "bodyText": "Indicate the server name here that caused the error (unless that is logged elsewhere)", "url": "https://github.com/apache/pinot/pull/5718#discussion_r462457969", "createdAt": "2020-07-29T17:14:41Z", "author": {"login": "mcvsubbu"}, "path": "pinot-controller/src/main/java/org/apache/pinot/controller/api/resources/PinotSegmentRestletResource.java", "diffHunk": "@@ -485,4 +503,80 @@ private void deleteSegmentsInternal(String tableNameWithType, List<String> segme\n       throw new ControllerApplicationException(LOGGER, e.getMessage(), Response.Status.FORBIDDEN);\n     }\n   }\n+\n+  @GET\n+  @Path(\"segments/{tableName}/reload-status\")\n+  @Produces(MediaType.APPLICATION_JSON)\n+  @ApiOperation(value = \"Status of segment reload\", notes = \"Status of segment reload\")\n+  public Map<String, ServerSegmentMetadataReader.TableReloadStatus> getReloadStatus(\n+      @ApiParam(value = \"Name of the table\", required = true) @PathParam(\"tableName\") String tableName,\n+      @ApiParam(value = \"OFFLINE|REALTIME\") @QueryParam(\"type\") String tableTypeStr) {\n+    TableType tableType = Constants.validateTableType(tableTypeStr);\n+    if (tableType == TableType.REALTIME) {\n+      throw new ControllerApplicationException(LOGGER,\n+          \"Table type : \" + tableTypeStr + \" not yet supported.\", Status.NOT_IMPLEMENTED);\n+    }\n+\n+    List<String> tableNamesWithType = getExistingTableNamesWithType(tableName, Constants.validateTableType(tableTypeStr));\n+    Map<String, ServerSegmentMetadataReader.TableReloadStatus> reloadStatusMap = new HashMap<>();\n+    for (String tableNameWithType : tableNamesWithType) {\n+      ServerSegmentMetadataReader.TableReloadStatus tableReloadStatus;\n+      try {\n+        tableReloadStatus = getSegmentsReloadStatus(tableNameWithType);\n+      } catch (InvalidConfigException e) {\n+        throw new ControllerApplicationException(LOGGER, e.getMessage(), Status.BAD_REQUEST);\n+      }\n+      reloadStatusMap.put(tableNameWithType, tableReloadStatus);\n+    }\n+    return reloadStatusMap;\n+  }\n+\n+  private ServerSegmentMetadataReader.TableReloadStatus getSegmentsReloadStatus(String tableNameWithType)\n+      throws InvalidConfigException {\n+    TableMetadataReader tableMetadataReader =\n+        new TableMetadataReader(_executor, _connectionManager, _pinotHelixResourceManager);\n+    return tableMetadataReader.getReloadStatus(tableNameWithType,\n+        _controllerConf.getServerAdminRequestTimeoutSeconds() * 1000);\n+  }\n+\n+  @GET\n+  @Path(\"segments/{tableName}/metadata\")\n+  @Produces(MediaType.APPLICATION_JSON)\n+  @ApiOperation(value = \"Get the server metadata for all table segments\", notes = \"Get the server metadata for all table segments\")\n+  public Map<String, String> getServerMetadata(@ApiParam(value = \"Name of the table\", required = true) @PathParam(\"tableName\") String tableName,\n+                                               @ApiParam(value = \"OFFLINE|REALTIME\") @QueryParam(\"type\") String tableTypeStr) {\n+    LOGGER.info(\"Received a request to fetch metadata for all segments for table {}\", tableName);\n+    TableType tableType = Constants.validateTableType(tableTypeStr);\n+    if (tableType == TableType.REALTIME) {\n+      throw new ControllerApplicationException(LOGGER,\n+          \"Table type : \" + tableTypeStr + \" not yet supported.\", Status.NOT_IMPLEMENTED);\n+    }\n+\n+    String tableNameWithType = getExistingTableNamesWithType(tableName, tableType).get(0);\n+    Map<String, String> segmentsMetadata;\n+    try {\n+      segmentsMetadata = getSegmentsMetadataFromServer(tableNameWithType);\n+    } catch (InvalidConfigException e) {\n+      throw new ControllerApplicationException(LOGGER, e.getMessage(), Status.BAD_REQUEST);\n+    } catch (IOException ioe) {\n+      throw new ControllerApplicationException(LOGGER,\n+          \"Error parsing Pinot server response: \" + ioe.getMessage(), Status.INTERNAL_SERVER_ERROR, ioe);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1cea905ee8f4343b2c7f50a0612a53dae6fa34b1"}, "originalPosition": 135}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzg5NTc1Mg==", "bodyText": "Yes, is logged in the helper class", "url": "https://github.com/apache/pinot/pull/5718#discussion_r463895752", "createdAt": "2020-08-01T00:26:17Z", "author": {"login": "guruguha"}, "path": "pinot-controller/src/main/java/org/apache/pinot/controller/api/resources/PinotSegmentRestletResource.java", "diffHunk": "@@ -485,4 +503,80 @@ private void deleteSegmentsInternal(String tableNameWithType, List<String> segme\n       throw new ControllerApplicationException(LOGGER, e.getMessage(), Response.Status.FORBIDDEN);\n     }\n   }\n+\n+  @GET\n+  @Path(\"segments/{tableName}/reload-status\")\n+  @Produces(MediaType.APPLICATION_JSON)\n+  @ApiOperation(value = \"Status of segment reload\", notes = \"Status of segment reload\")\n+  public Map<String, ServerSegmentMetadataReader.TableReloadStatus> getReloadStatus(\n+      @ApiParam(value = \"Name of the table\", required = true) @PathParam(\"tableName\") String tableName,\n+      @ApiParam(value = \"OFFLINE|REALTIME\") @QueryParam(\"type\") String tableTypeStr) {\n+    TableType tableType = Constants.validateTableType(tableTypeStr);\n+    if (tableType == TableType.REALTIME) {\n+      throw new ControllerApplicationException(LOGGER,\n+          \"Table type : \" + tableTypeStr + \" not yet supported.\", Status.NOT_IMPLEMENTED);\n+    }\n+\n+    List<String> tableNamesWithType = getExistingTableNamesWithType(tableName, Constants.validateTableType(tableTypeStr));\n+    Map<String, ServerSegmentMetadataReader.TableReloadStatus> reloadStatusMap = new HashMap<>();\n+    for (String tableNameWithType : tableNamesWithType) {\n+      ServerSegmentMetadataReader.TableReloadStatus tableReloadStatus;\n+      try {\n+        tableReloadStatus = getSegmentsReloadStatus(tableNameWithType);\n+      } catch (InvalidConfigException e) {\n+        throw new ControllerApplicationException(LOGGER, e.getMessage(), Status.BAD_REQUEST);\n+      }\n+      reloadStatusMap.put(tableNameWithType, tableReloadStatus);\n+    }\n+    return reloadStatusMap;\n+  }\n+\n+  private ServerSegmentMetadataReader.TableReloadStatus getSegmentsReloadStatus(String tableNameWithType)\n+      throws InvalidConfigException {\n+    TableMetadataReader tableMetadataReader =\n+        new TableMetadataReader(_executor, _connectionManager, _pinotHelixResourceManager);\n+    return tableMetadataReader.getReloadStatus(tableNameWithType,\n+        _controllerConf.getServerAdminRequestTimeoutSeconds() * 1000);\n+  }\n+\n+  @GET\n+  @Path(\"segments/{tableName}/metadata\")\n+  @Produces(MediaType.APPLICATION_JSON)\n+  @ApiOperation(value = \"Get the server metadata for all table segments\", notes = \"Get the server metadata for all table segments\")\n+  public Map<String, String> getServerMetadata(@ApiParam(value = \"Name of the table\", required = true) @PathParam(\"tableName\") String tableName,\n+                                               @ApiParam(value = \"OFFLINE|REALTIME\") @QueryParam(\"type\") String tableTypeStr) {\n+    LOGGER.info(\"Received a request to fetch metadata for all segments for table {}\", tableName);\n+    TableType tableType = Constants.validateTableType(tableTypeStr);\n+    if (tableType == TableType.REALTIME) {\n+      throw new ControllerApplicationException(LOGGER,\n+          \"Table type : \" + tableTypeStr + \" not yet supported.\", Status.NOT_IMPLEMENTED);\n+    }\n+\n+    String tableNameWithType = getExistingTableNamesWithType(tableName, tableType).get(0);\n+    Map<String, String> segmentsMetadata;\n+    try {\n+      segmentsMetadata = getSegmentsMetadataFromServer(tableNameWithType);\n+    } catch (InvalidConfigException e) {\n+      throw new ControllerApplicationException(LOGGER, e.getMessage(), Status.BAD_REQUEST);\n+    } catch (IOException ioe) {\n+      throw new ControllerApplicationException(LOGGER,\n+          \"Error parsing Pinot server response: \" + ioe.getMessage(), Status.INTERNAL_SERVER_ERROR, ioe);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQ1Nzk2OQ=="}, "originalCommit": {"oid": "1cea905ee8f4343b2c7f50a0612a53dae6fa34b1"}, "originalPosition": 135}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4NzI1NDc3OnYy", "diffSide": "RIGHT", "path": "pinot-controller/src/main/java/org/apache/pinot/controller/api/resources/PinotSegmentRestletResource.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxNzoxODoxMVrOG5CU0A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQwNTowMToyNVrOG_R3QQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQ2MDExMg==", "bodyText": "I strongly suggest adding a verbosity level and/or a limit here. Can be added later if you wish. Imagine a table with a million segments. Do we really want to kill the servers trying to query all the segments? Or, output them only to let the client time out?\nAn example could be: limit=100 by default, verbosity=5. A level of 4, 3, 2,1 will show less information for each segment. Maybe 0 will only show how many segments that are online/offline etc.?", "url": "https://github.com/apache/pinot/pull/5718#discussion_r462460112", "createdAt": "2020-07-29T17:18:11Z", "author": {"login": "mcvsubbu"}, "path": "pinot-controller/src/main/java/org/apache/pinot/controller/api/resources/PinotSegmentRestletResource.java", "diffHunk": "@@ -485,4 +503,80 @@ private void deleteSegmentsInternal(String tableNameWithType, List<String> segme\n       throw new ControllerApplicationException(LOGGER, e.getMessage(), Response.Status.FORBIDDEN);\n     }\n   }\n+\n+  @GET\n+  @Path(\"segments/{tableName}/reload-status\")\n+  @Produces(MediaType.APPLICATION_JSON)\n+  @ApiOperation(value = \"Status of segment reload\", notes = \"Status of segment reload\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1cea905ee8f4343b2c7f50a0612a53dae6fa34b1"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzgzMzc0Nw==", "bodyText": "Thanks for the suggestion. Makes sense to add limit. I did think about this, but then, the issue will be knowing the status of the remaining segments. For a table with say, 1000 segments, how do we let the user know of the status of the rest of the segments?", "url": "https://github.com/apache/pinot/pull/5718#discussion_r463833747", "createdAt": "2020-07-31T20:55:13Z", "author": {"login": "guruguha"}, "path": "pinot-controller/src/main/java/org/apache/pinot/controller/api/resources/PinotSegmentRestletResource.java", "diffHunk": "@@ -485,4 +503,80 @@ private void deleteSegmentsInternal(String tableNameWithType, List<String> segme\n       throw new ControllerApplicationException(LOGGER, e.getMessage(), Response.Status.FORBIDDEN);\n     }\n   }\n+\n+  @GET\n+  @Path(\"segments/{tableName}/reload-status\")\n+  @Produces(MediaType.APPLICATION_JSON)\n+  @ApiOperation(value = \"Status of segment reload\", notes = \"Status of segment reload\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQ2MDExMg=="}, "originalCommit": {"oid": "1cea905ee8f4343b2c7f50a0612a53dae6fa34b1"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzg5NTI4Mg==", "bodyText": "Add an API to get status for a range of segments, maybe? Or, add some sort of start/limit?", "url": "https://github.com/apache/pinot/pull/5718#discussion_r463895282", "createdAt": "2020-08-01T00:23:12Z", "author": {"login": "mcvsubbu"}, "path": "pinot-controller/src/main/java/org/apache/pinot/controller/api/resources/PinotSegmentRestletResource.java", "diffHunk": "@@ -485,4 +503,80 @@ private void deleteSegmentsInternal(String tableNameWithType, List<String> segme\n       throw new ControllerApplicationException(LOGGER, e.getMessage(), Response.Status.FORBIDDEN);\n     }\n   }\n+\n+  @GET\n+  @Path(\"segments/{tableName}/reload-status\")\n+  @Produces(MediaType.APPLICATION_JSON)\n+  @ApiOperation(value = \"Status of segment reload\", notes = \"Status of segment reload\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQ2MDExMg=="}, "originalCommit": {"oid": "1cea905ee8f4343b2c7f50a0612a53dae6fa34b1"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzg5NTYxNg==", "bodyText": "If you are adding one to get the status of one segment at a time, then the user can (if needed) iterate over the segments and get each segment. Let us evaluate the use case first. Are we talking about a full table reload or a segment reload? If full table reload, maybe we only want to return those segments that DID NOT reload properly?\nThe API definition leaves much discussion to be desired, and a PR is NOT the place to discuss API. If you have a design doc, we will discuss there.", "url": "https://github.com/apache/pinot/pull/5718#discussion_r463895616", "createdAt": "2020-08-01T00:25:13Z", "author": {"login": "mcvsubbu"}, "path": "pinot-controller/src/main/java/org/apache/pinot/controller/api/resources/PinotSegmentRestletResource.java", "diffHunk": "@@ -485,4 +503,80 @@ private void deleteSegmentsInternal(String tableNameWithType, List<String> segme\n       throw new ControllerApplicationException(LOGGER, e.getMessage(), Response.Status.FORBIDDEN);\n     }\n   }\n+\n+  @GET\n+  @Path(\"segments/{tableName}/reload-status\")\n+  @Produces(MediaType.APPLICATION_JSON)\n+  @ApiOperation(value = \"Status of segment reload\", notes = \"Status of segment reload\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQ2MDExMg=="}, "originalCommit": {"oid": "1cea905ee8f4343b2c7f50a0612a53dae6fa34b1"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTAwNjE0NQ==", "bodyText": "this can be done in another PR. Lets get this in and add the optimizations as we need them. Million segments in a table is not a common use case.", "url": "https://github.com/apache/pinot/pull/5718#discussion_r469006145", "createdAt": "2020-08-12T05:01:25Z", "author": {"login": "kishoreg"}, "path": "pinot-controller/src/main/java/org/apache/pinot/controller/api/resources/PinotSegmentRestletResource.java", "diffHunk": "@@ -485,4 +503,80 @@ private void deleteSegmentsInternal(String tableNameWithType, List<String> segme\n       throw new ControllerApplicationException(LOGGER, e.getMessage(), Response.Status.FORBIDDEN);\n     }\n   }\n+\n+  @GET\n+  @Path(\"segments/{tableName}/reload-status\")\n+  @Produces(MediaType.APPLICATION_JSON)\n+  @ApiOperation(value = \"Status of segment reload\", notes = \"Status of segment reload\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQ2MDExMg=="}, "originalCommit": {"oid": "1cea905ee8f4343b2c7f50a0612a53dae6fa34b1"}, "originalPosition": 82}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2MzI5ODg2OnYy", "diffSide": "RIGHT", "path": "pinot-controller/src/main/java/org/apache/pinot/controller/api/resources/ServerTableSizeReader.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxNjowMzoxNFrOHEInUw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxNjowMzoxNFrOHEInUw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDA5NzQ5MQ==", "bodyText": "Add the server name to this log", "url": "https://github.com/apache/pinot/pull/5718#discussion_r474097491", "createdAt": "2020-08-20T16:03:14Z", "author": {"login": "mcvsubbu"}, "path": "pinot-controller/src/main/java/org/apache/pinot/controller/api/resources/ServerTableSizeReader.java", "diffHunk": "@@ -64,40 +62,25 @@ public ServerTableSizeReader(Executor executor, HttpConnectionManager connection\n       serverUrls.add(tableSizeUri);\n     }\n \n-    // TODO: use some service other than completion service so that we know which server encounters the error\n-    CompletionService<GetMethod> completionService =\n-        new MultiGetRequest(_executor, _connectionManager).execute(serverUrls, timeoutMs);\n+    // Helper service to run a httpget call to the server\n+    CompletionServiceHelper completionServiceHelper = new CompletionServiceHelper(_executor, _connectionManager,\n+        endpointsToServers);\n+    CompletionServiceHelper.CompletionServiceResponse serviceResponse =\n+        completionServiceHelper.doMultiGetRequest(serverUrls, tableNameWithType, timeoutMs);\n     Map<String, List<SegmentSizeInfo>> serverToSegmentSizeInfoListMap = new HashMap<>();\n-\n-    for (int i = 0; i < numServers; i++) {\n-      GetMethod getMethod = null;\n+    int failedParses = 0;\n+    for (Map.Entry<String, String> streamResponse : serviceResponse._httpResponses.entrySet()) {\n       try {\n-        getMethod = completionService.take().get();\n-        URI uri = getMethod.getURI();\n-        String instance = endpointsToServers.get(uri.getHost() + \":\" + uri.getPort());\n-        if (getMethod.getStatusCode() >= 300) {\n-          LOGGER.error(\"Server: {} returned error: {}\", instance, getMethod.getStatusCode());\n-          continue;\n-        }\n         TableSizeInfo tableSizeInfo =\n-            JsonUtils.inputStreamToObject(getMethod.getResponseBodyAsStream(), TableSizeInfo.class);\n-        serverToSegmentSizeInfoListMap.put(instance, tableSizeInfo.segments);\n-      } catch (Exception e) {\n-        // Ignore individual exceptions because the exception has been logged in MultiGetRequest\n-        // Log the number of failed servers after gathering all responses\n-      } finally {\n-        if (getMethod != null) {\n-          getMethod.releaseConnection();\n-        }\n+            JsonUtils.stringToObject(streamResponse.getValue(), TableSizeInfo.class);\n+        serverToSegmentSizeInfoListMap.put(streamResponse.getKey(), tableSizeInfo.segments);\n+      } catch (IOException e) {\n+        failedParses++;\n+        LOGGER.error(\"Unable to parse server response due to an error: \", e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2198469a7609a94c8bb7f7f744fb9ecdb97f119c"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2MzMxMDEyOnYy", "diffSide": "RIGHT", "path": "pinot-controller/src/main/java/org/apache/pinot/controller/api/resources/ServerTableSizeReader.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxNjowNjowMFrOHEIufg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxNjowNjowMFrOHEIufg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDA5OTMyNg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  LOGGER.warn(\"Failed to parse {} segment size info responses from server.\", failedParses);\n          \n          \n            \n                  LOGGER.warn(\"Failed to parse segment size info responses from {} servers.\", failedParses);\n          \n      \n    \n    \n  \n\nIf possible, add the total number of servers to this message as well", "url": "https://github.com/apache/pinot/pull/5718#discussion_r474099326", "createdAt": "2020-08-20T16:06:00Z", "author": {"login": "mcvsubbu"}, "path": "pinot-controller/src/main/java/org/apache/pinot/controller/api/resources/ServerTableSizeReader.java", "diffHunk": "@@ -64,40 +62,25 @@ public ServerTableSizeReader(Executor executor, HttpConnectionManager connection\n       serverUrls.add(tableSizeUri);\n     }\n \n-    // TODO: use some service other than completion service so that we know which server encounters the error\n-    CompletionService<GetMethod> completionService =\n-        new MultiGetRequest(_executor, _connectionManager).execute(serverUrls, timeoutMs);\n+    // Helper service to run a httpget call to the server\n+    CompletionServiceHelper completionServiceHelper = new CompletionServiceHelper(_executor, _connectionManager,\n+        endpointsToServers);\n+    CompletionServiceHelper.CompletionServiceResponse serviceResponse =\n+        completionServiceHelper.doMultiGetRequest(serverUrls, tableNameWithType, timeoutMs);\n     Map<String, List<SegmentSizeInfo>> serverToSegmentSizeInfoListMap = new HashMap<>();\n-\n-    for (int i = 0; i < numServers; i++) {\n-      GetMethod getMethod = null;\n+    int failedParses = 0;\n+    for (Map.Entry<String, String> streamResponse : serviceResponse._httpResponses.entrySet()) {\n       try {\n-        getMethod = completionService.take().get();\n-        URI uri = getMethod.getURI();\n-        String instance = endpointsToServers.get(uri.getHost() + \":\" + uri.getPort());\n-        if (getMethod.getStatusCode() >= 300) {\n-          LOGGER.error(\"Server: {} returned error: {}\", instance, getMethod.getStatusCode());\n-          continue;\n-        }\n         TableSizeInfo tableSizeInfo =\n-            JsonUtils.inputStreamToObject(getMethod.getResponseBodyAsStream(), TableSizeInfo.class);\n-        serverToSegmentSizeInfoListMap.put(instance, tableSizeInfo.segments);\n-      } catch (Exception e) {\n-        // Ignore individual exceptions because the exception has been logged in MultiGetRequest\n-        // Log the number of failed servers after gathering all responses\n-      } finally {\n-        if (getMethod != null) {\n-          getMethod.releaseConnection();\n-        }\n+            JsonUtils.stringToObject(streamResponse.getValue(), TableSizeInfo.class);\n+        serverToSegmentSizeInfoListMap.put(streamResponse.getKey(), tableSizeInfo.segments);\n+      } catch (IOException e) {\n+        failedParses++;\n+        LOGGER.error(\"Unable to parse server response due to an error: \", e);\n       }\n     }\n-\n-    int numServersResponded = serverToSegmentSizeInfoListMap.size();\n-    if (numServersResponded != numServers) {\n-      LOGGER.warn(\"Finish reading segment sizes for table: {} with {}/{} servers responded\", tableNameWithType,\n-          numServersResponded, numServers);\n-    } else {\n-      LOGGER.info(\"Finish reading segment sizes for table: {}\", tableNameWithType);\n+    if (failedParses != 0) {\n+      LOGGER.warn(\"Failed to parse {} segment size info responses from server.\", failedParses);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2198469a7609a94c8bb7f7f744fb9ecdb97f119c"}, "originalPosition": 72}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2MzMxODg5OnYy", "diffSide": "RIGHT", "path": "pinot-controller/src/main/java/org/apache/pinot/controller/util/CompletionServiceHelper.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxNjowODoyMVrOHEI0OQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxNjowODoyMVrOHEI0OQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDEwMDc5Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                      numServersResponded, serverURLs);\n          \n          \n            \n                      numServersResponded, serverURLs.size());", "url": "https://github.com/apache/pinot/pull/5718#discussion_r474100793", "createdAt": "2020-08-20T16:08:21Z", "author": {"login": "mcvsubbu"}, "path": "pinot-controller/src/main/java/org/apache/pinot/controller/util/CompletionServiceHelper.java", "diffHunk": "@@ -0,0 +1,103 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.pinot.controller.util;\n+\n+import com.google.common.collect.BiMap;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.CompletionService;\n+import java.util.concurrent.Executor;\n+import org.apache.commons.httpclient.HttpConnectionManager;\n+import org.apache.commons.httpclient.URI;\n+import org.apache.commons.httpclient.methods.GetMethod;\n+import org.apache.pinot.common.http.MultiGetRequest;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * This is a helper class that can be used to make HttpGet (MultiGet) calls and get the responses back.\n+ * The responses are returned as a string.\n+ *\n+ * The helper also records number of failed responses so that the caller knows if any of the calls\n+ * failed to respond. The failed instance is logged for debugging.\n+ */\n+public class CompletionServiceHelper {\n+  private static final Logger LOGGER = LoggerFactory.getLogger(CompletionServiceHelper.class);\n+\n+  private final Executor _executor;\n+  private final HttpConnectionManager _httpConnectionManager;\n+  private final BiMap<String, String> _endpointsToServers;\n+\n+  public CompletionServiceHelper(Executor executor, HttpConnectionManager httpConnectionManager,\n+                                 BiMap<String, String> endpointsToServers) {\n+    _executor = executor;\n+    _httpConnectionManager = httpConnectionManager;\n+    _endpointsToServers = endpointsToServers;\n+  }\n+\n+  public CompletionServiceResponse doMultiGetRequest(List<String> serverURLs, String tableNameWithType, int timeoutMs) {\n+    CompletionServiceResponse completionServiceResponse = new CompletionServiceResponse();\n+\n+    // TODO: use some service other than completion service so that we know which server encounters the error\n+    CompletionService<GetMethod> completionService =\n+        new MultiGetRequest(_executor, _httpConnectionManager).execute(serverURLs, timeoutMs);\n+    for (int i = 0; i < serverURLs.size(); i++) {\n+      GetMethod getMethod = null;\n+      try {\n+        getMethod = completionService.take().get();\n+        URI uri = getMethod.getURI();\n+        String instance = _endpointsToServers.get(uri.getHost() + \":\" + uri.getPort());\n+        if (getMethod.getStatusCode() >= 300) {\n+          LOGGER.error(\"Server: {} returned error: {}\", instance, getMethod.getStatusCode());\n+          completionServiceResponse._failedResponseCount++;\n+          continue;\n+        }\n+        completionServiceResponse._httpResponses.put(instance, getMethod.getResponseBodyAsString());\n+      } catch (Exception e) {\n+        // Ignore individual exceptions because the exception has been logged in MultiGetRequest\n+        // Log the number of failed servers after gathering all responses\n+      } finally {\n+        if (getMethod != null) {\n+          getMethod.releaseConnection();\n+        }\n+      }\n+    }\n+\n+    int numServersResponded = completionServiceResponse._httpResponses.size();\n+    if (numServersResponded != serverURLs.size()) {\n+      LOGGER.warn(\"Finish reading information for table: {} with {}/{} server responses\", tableNameWithType,\n+          numServersResponded, serverURLs);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2198469a7609a94c8bb7f7f744fb9ecdb97f119c"}, "originalPosition": 87}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2MzMyMzYyOnYy", "diffSide": "RIGHT", "path": "pinot-controller/src/main/java/org/apache/pinot/controller/util/ServerSegmentMetadataReader.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxNjowOTozMFrOHEI3JQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxNjowOTozMFrOHEI3JQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDEwMTU0MQ==", "bodyText": "Add server name in the log", "url": "https://github.com/apache/pinot/pull/5718#discussion_r474101541", "createdAt": "2020-08-20T16:09:30Z", "author": {"login": "mcvsubbu"}, "path": "pinot-controller/src/main/java/org/apache/pinot/controller/util/ServerSegmentMetadataReader.java", "diffHunk": "@@ -0,0 +1,163 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.controller.util;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.google.common.collect.BiMap;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.Executor;\n+import org.apache.commons.httpclient.HttpConnectionManager;\n+import org.apache.pinot.common.restlet.resources.SegmentStatus;\n+import org.apache.pinot.spi.utils.JsonUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * This is a helper class that calls the server API endpoints to fetch server metadata and the segment reload status\n+ * Only the servers returning success are returned by the method. For servers returning errors (http error or otherwise),\n+ * no entry is created in the return list\n+ */\n+public class ServerSegmentMetadataReader {\n+  private static final Logger LOGGER = LoggerFactory.getLogger(ServerSegmentMetadataReader.class);\n+\n+  private final Executor _executor;\n+  private final HttpConnectionManager _connectionManager;\n+\n+  public ServerSegmentMetadataReader(Executor executor, HttpConnectionManager connectionManager) {\n+    _executor = executor;\n+    _connectionManager = connectionManager;\n+  }\n+\n+  /**\n+   * This method is called when the API request is to fetch segment metadata for all segments of the table.\n+   * This method makes a MultiGet call to all servers that host their respective segments and gets the results.\n+   * @param tableNameWithType\n+   * @param serversToSegmentsMap\n+   * @param endpoints\n+   * @param timeoutMs\n+   * @return list of segments and their metadata as a JSON string\n+   */\n+  public List<String> getSegmentMetadataFromServer(String tableNameWithType,\n+                                                   Map<String, List<String>> serversToSegmentsMap,\n+                                                   BiMap<String, String> endpoints, int timeoutMs) {\n+    LOGGER.debug(\"Reading segment metadata from servers for table {}.\", tableNameWithType);\n+    List<String> serverURLs = new ArrayList<>();\n+    for (Map.Entry<String, List<String>> serverToSegments : serversToSegmentsMap.entrySet()) {\n+      List<String> segments = serverToSegments.getValue();\n+      for (String segment : segments) {\n+        serverURLs.add(generateSegmentMetadataServerURL(tableNameWithType, segment, endpoints.get(serverToSegments.getKey())));\n+      }\n+    }\n+    BiMap<String, String> endpointsToServers = endpoints.inverse();\n+    CompletionServiceHelper completionServiceHelper = new CompletionServiceHelper(_executor, _connectionManager, endpointsToServers);\n+    CompletionServiceHelper.CompletionServiceResponse serviceResponse =\n+        completionServiceHelper.doMultiGetRequest(serverURLs, tableNameWithType, timeoutMs);\n+    List<String> segmentsMetadata = new ArrayList<>();\n+\n+    int failedParses = 0;\n+    for (Map.Entry<String, String> streamResponse : serviceResponse._httpResponses.entrySet()) {\n+      try {\n+        JsonNode segmentMetadata = JsonUtils.stringToJsonNode(streamResponse.getValue());\n+        segmentsMetadata.add(JsonUtils.objectToString(segmentMetadata));\n+      } catch (IOException e) {\n+        failedParses++;\n+        LOGGER.error(\"Unable to parse server response due to an error: \", e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2198469a7609a94c8bb7f7f744fb9ecdb97f119c"}, "originalPosition": 84}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2MzMyNzI2OnYy", "diffSide": "RIGHT", "path": "pinot-controller/src/main/java/org/apache/pinot/controller/util/ServerSegmentMetadataReader.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxNjoxMDoyMlrOHEI5fw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxNjoxMDoyMlrOHEI5fw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDEwMjE0Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  LOGGER.warn(\"Failed to parse {} segment metadata responses from server.\", failedParses);\n          \n          \n            \n                  LOGGER.warn(\"Failed to parse segment metadata responses from {} servers.\", failedParses);\n          \n      \n    \n    \n  \n\nIf possible add total number of servers to this message as well", "url": "https://github.com/apache/pinot/pull/5718#discussion_r474102143", "createdAt": "2020-08-20T16:10:22Z", "author": {"login": "mcvsubbu"}, "path": "pinot-controller/src/main/java/org/apache/pinot/controller/util/ServerSegmentMetadataReader.java", "diffHunk": "@@ -0,0 +1,163 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.controller.util;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.google.common.collect.BiMap;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.Executor;\n+import org.apache.commons.httpclient.HttpConnectionManager;\n+import org.apache.pinot.common.restlet.resources.SegmentStatus;\n+import org.apache.pinot.spi.utils.JsonUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * This is a helper class that calls the server API endpoints to fetch server metadata and the segment reload status\n+ * Only the servers returning success are returned by the method. For servers returning errors (http error or otherwise),\n+ * no entry is created in the return list\n+ */\n+public class ServerSegmentMetadataReader {\n+  private static final Logger LOGGER = LoggerFactory.getLogger(ServerSegmentMetadataReader.class);\n+\n+  private final Executor _executor;\n+  private final HttpConnectionManager _connectionManager;\n+\n+  public ServerSegmentMetadataReader(Executor executor, HttpConnectionManager connectionManager) {\n+    _executor = executor;\n+    _connectionManager = connectionManager;\n+  }\n+\n+  /**\n+   * This method is called when the API request is to fetch segment metadata for all segments of the table.\n+   * This method makes a MultiGet call to all servers that host their respective segments and gets the results.\n+   * @param tableNameWithType\n+   * @param serversToSegmentsMap\n+   * @param endpoints\n+   * @param timeoutMs\n+   * @return list of segments and their metadata as a JSON string\n+   */\n+  public List<String> getSegmentMetadataFromServer(String tableNameWithType,\n+                                                   Map<String, List<String>> serversToSegmentsMap,\n+                                                   BiMap<String, String> endpoints, int timeoutMs) {\n+    LOGGER.debug(\"Reading segment metadata from servers for table {}.\", tableNameWithType);\n+    List<String> serverURLs = new ArrayList<>();\n+    for (Map.Entry<String, List<String>> serverToSegments : serversToSegmentsMap.entrySet()) {\n+      List<String> segments = serverToSegments.getValue();\n+      for (String segment : segments) {\n+        serverURLs.add(generateSegmentMetadataServerURL(tableNameWithType, segment, endpoints.get(serverToSegments.getKey())));\n+      }\n+    }\n+    BiMap<String, String> endpointsToServers = endpoints.inverse();\n+    CompletionServiceHelper completionServiceHelper = new CompletionServiceHelper(_executor, _connectionManager, endpointsToServers);\n+    CompletionServiceHelper.CompletionServiceResponse serviceResponse =\n+        completionServiceHelper.doMultiGetRequest(serverURLs, tableNameWithType, timeoutMs);\n+    List<String> segmentsMetadata = new ArrayList<>();\n+\n+    int failedParses = 0;\n+    for (Map.Entry<String, String> streamResponse : serviceResponse._httpResponses.entrySet()) {\n+      try {\n+        JsonNode segmentMetadata = JsonUtils.stringToJsonNode(streamResponse.getValue());\n+        segmentsMetadata.add(JsonUtils.objectToString(segmentMetadata));\n+      } catch (IOException e) {\n+        failedParses++;\n+        LOGGER.error(\"Unable to parse server response due to an error: \", e);\n+      }\n+    }\n+    if (failedParses != 0) {\n+      LOGGER.warn(\"Failed to parse {} segment metadata responses from server.\", failedParses);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2198469a7609a94c8bb7f7f744fb9ecdb97f119c"}, "originalPosition": 88}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2MzMzMjU1OnYy", "diffSide": "RIGHT", "path": "pinot-controller/src/main/java/org/apache/pinot/controller/util/ServerSegmentMetadataReader.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxNjoxMTo0MFrOHEI8xQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxNjoxMTo0MFrOHEI8xQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDEwMjk4MQ==", "bodyText": "add the number of servers to this log message", "url": "https://github.com/apache/pinot/pull/5718#discussion_r474102981", "createdAt": "2020-08-20T16:11:40Z", "author": {"login": "mcvsubbu"}, "path": "pinot-controller/src/main/java/org/apache/pinot/controller/util/ServerSegmentMetadataReader.java", "diffHunk": "@@ -0,0 +1,163 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.controller.util;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.google.common.collect.BiMap;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.Executor;\n+import org.apache.commons.httpclient.HttpConnectionManager;\n+import org.apache.pinot.common.restlet.resources.SegmentStatus;\n+import org.apache.pinot.spi.utils.JsonUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * This is a helper class that calls the server API endpoints to fetch server metadata and the segment reload status\n+ * Only the servers returning success are returned by the method. For servers returning errors (http error or otherwise),\n+ * no entry is created in the return list\n+ */\n+public class ServerSegmentMetadataReader {\n+  private static final Logger LOGGER = LoggerFactory.getLogger(ServerSegmentMetadataReader.class);\n+\n+  private final Executor _executor;\n+  private final HttpConnectionManager _connectionManager;\n+\n+  public ServerSegmentMetadataReader(Executor executor, HttpConnectionManager connectionManager) {\n+    _executor = executor;\n+    _connectionManager = connectionManager;\n+  }\n+\n+  /**\n+   * This method is called when the API request is to fetch segment metadata for all segments of the table.\n+   * This method makes a MultiGet call to all servers that host their respective segments and gets the results.\n+   * @param tableNameWithType\n+   * @param serversToSegmentsMap\n+   * @param endpoints\n+   * @param timeoutMs\n+   * @return list of segments and their metadata as a JSON string\n+   */\n+  public List<String> getSegmentMetadataFromServer(String tableNameWithType,\n+                                                   Map<String, List<String>> serversToSegmentsMap,\n+                                                   BiMap<String, String> endpoints, int timeoutMs) {\n+    LOGGER.debug(\"Reading segment metadata from servers for table {}.\", tableNameWithType);\n+    List<String> serverURLs = new ArrayList<>();\n+    for (Map.Entry<String, List<String>> serverToSegments : serversToSegmentsMap.entrySet()) {\n+      List<String> segments = serverToSegments.getValue();\n+      for (String segment : segments) {\n+        serverURLs.add(generateSegmentMetadataServerURL(tableNameWithType, segment, endpoints.get(serverToSegments.getKey())));\n+      }\n+    }\n+    BiMap<String, String> endpointsToServers = endpoints.inverse();\n+    CompletionServiceHelper completionServiceHelper = new CompletionServiceHelper(_executor, _connectionManager, endpointsToServers);\n+    CompletionServiceHelper.CompletionServiceResponse serviceResponse =\n+        completionServiceHelper.doMultiGetRequest(serverURLs, tableNameWithType, timeoutMs);\n+    List<String> segmentsMetadata = new ArrayList<>();\n+\n+    int failedParses = 0;\n+    for (Map.Entry<String, String> streamResponse : serviceResponse._httpResponses.entrySet()) {\n+      try {\n+        JsonNode segmentMetadata = JsonUtils.stringToJsonNode(streamResponse.getValue());\n+        segmentsMetadata.add(JsonUtils.objectToString(segmentMetadata));\n+      } catch (IOException e) {\n+        failedParses++;\n+        LOGGER.error(\"Unable to parse server response due to an error: \", e);\n+      }\n+    }\n+    if (failedParses != 0) {\n+      LOGGER.warn(\"Failed to parse {} segment metadata responses from server.\", failedParses);\n+    }\n+\n+    LOGGER.debug(\"Retrieved segment metadata from servers.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2198469a7609a94c8bb7f7f744fb9ecdb97f119c"}, "originalPosition": 91}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2MzMzNTIxOnYy", "diffSide": "RIGHT", "path": "pinot-controller/src/main/java/org/apache/pinot/controller/util/ServerSegmentMetadataReader.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxNjoxMjoxNVrOHEI-Wg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxNjoxMjoxNVrOHEI-Wg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDEwMzM4Ng==", "bodyText": "add server name", "url": "https://github.com/apache/pinot/pull/5718#discussion_r474103386", "createdAt": "2020-08-20T16:12:15Z", "author": {"login": "mcvsubbu"}, "path": "pinot-controller/src/main/java/org/apache/pinot/controller/util/ServerSegmentMetadataReader.java", "diffHunk": "@@ -0,0 +1,163 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.controller.util;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.google.common.collect.BiMap;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.Executor;\n+import org.apache.commons.httpclient.HttpConnectionManager;\n+import org.apache.pinot.common.restlet.resources.SegmentStatus;\n+import org.apache.pinot.spi.utils.JsonUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * This is a helper class that calls the server API endpoints to fetch server metadata and the segment reload status\n+ * Only the servers returning success are returned by the method. For servers returning errors (http error or otherwise),\n+ * no entry is created in the return list\n+ */\n+public class ServerSegmentMetadataReader {\n+  private static final Logger LOGGER = LoggerFactory.getLogger(ServerSegmentMetadataReader.class);\n+\n+  private final Executor _executor;\n+  private final HttpConnectionManager _connectionManager;\n+\n+  public ServerSegmentMetadataReader(Executor executor, HttpConnectionManager connectionManager) {\n+    _executor = executor;\n+    _connectionManager = connectionManager;\n+  }\n+\n+  /**\n+   * This method is called when the API request is to fetch segment metadata for all segments of the table.\n+   * This method makes a MultiGet call to all servers that host their respective segments and gets the results.\n+   * @param tableNameWithType\n+   * @param serversToSegmentsMap\n+   * @param endpoints\n+   * @param timeoutMs\n+   * @return list of segments and their metadata as a JSON string\n+   */\n+  public List<String> getSegmentMetadataFromServer(String tableNameWithType,\n+                                                   Map<String, List<String>> serversToSegmentsMap,\n+                                                   BiMap<String, String> endpoints, int timeoutMs) {\n+    LOGGER.debug(\"Reading segment metadata from servers for table {}.\", tableNameWithType);\n+    List<String> serverURLs = new ArrayList<>();\n+    for (Map.Entry<String, List<String>> serverToSegments : serversToSegmentsMap.entrySet()) {\n+      List<String> segments = serverToSegments.getValue();\n+      for (String segment : segments) {\n+        serverURLs.add(generateSegmentMetadataServerURL(tableNameWithType, segment, endpoints.get(serverToSegments.getKey())));\n+      }\n+    }\n+    BiMap<String, String> endpointsToServers = endpoints.inverse();\n+    CompletionServiceHelper completionServiceHelper = new CompletionServiceHelper(_executor, _connectionManager, endpointsToServers);\n+    CompletionServiceHelper.CompletionServiceResponse serviceResponse =\n+        completionServiceHelper.doMultiGetRequest(serverURLs, tableNameWithType, timeoutMs);\n+    List<String> segmentsMetadata = new ArrayList<>();\n+\n+    int failedParses = 0;\n+    for (Map.Entry<String, String> streamResponse : serviceResponse._httpResponses.entrySet()) {\n+      try {\n+        JsonNode segmentMetadata = JsonUtils.stringToJsonNode(streamResponse.getValue());\n+        segmentsMetadata.add(JsonUtils.objectToString(segmentMetadata));\n+      } catch (IOException e) {\n+        failedParses++;\n+        LOGGER.error(\"Unable to parse server response due to an error: \", e);\n+      }\n+    }\n+    if (failedParses != 0) {\n+      LOGGER.warn(\"Failed to parse {} segment metadata responses from server.\", failedParses);\n+    }\n+\n+    LOGGER.debug(\"Retrieved segment metadata from servers.\");\n+    return segmentsMetadata;\n+  }\n+\n+  private String generateSegmentMetadataServerURL(String tableNameWithType, String segmentName, String endpoint) {\n+    return String.format(\"http://%s/tables/%s/segments/%s/metadata\", endpoint, tableNameWithType, segmentName);\n+  }\n+\n+  private String generateReloadStatusServerURL(String tableNameWithType, String segmentName, String endpoint) {\n+    return String.format(\"http://%s/tables/%s/segments/%s/loadStatus\", endpoint, tableNameWithType, segmentName);\n+  }\n+\n+  /**\n+   * This method is called when the API request is to fetch segment metadata for all segments of the table.\n+   * It makes a MultiGet call to all servers that host their respective segments and gets the results.\n+   * @param tableNameWithType\n+   * @param serverToSegments\n+   * @param serverToEndpoint\n+   * @param timeoutMs\n+   * @return list of segments along with their last reload times\n+   */\n+  public TableReloadStatus getSegmentReloadTime(String tableNameWithType,\n+                                                Map<String, List<String>> serverToSegments,\n+                                                BiMap<String, String> serverToEndpoint, int timeoutMs) {\n+    LOGGER.debug(\"Reading segment reload status from servers for table {}.\", tableNameWithType);\n+    List<String> serverURLs = new ArrayList<>();\n+    for (Map.Entry<String, List<String>> serverToSegmentsEntry : serverToSegments.entrySet()) {\n+      List<String> segments = serverToSegmentsEntry.getValue();\n+      for (String segment : segments) {\n+        serverURLs.add(generateReloadStatusServerURL(tableNameWithType, segment, serverToEndpoint.get(serverToSegmentsEntry.getKey())));\n+      }\n+    }\n+\n+    BiMap<String, String> endpointsToServers = serverToEndpoint.inverse();\n+    CompletionServiceHelper completionServiceHelper = new CompletionServiceHelper(_executor, _connectionManager, endpointsToServers);\n+    CompletionServiceHelper.CompletionServiceResponse serviceResponse =\n+        completionServiceHelper.doMultiGetRequest(serverURLs, tableNameWithType, timeoutMs);\n+    List<SegmentStatus> segmentsStatus = new ArrayList<>();\n+    int failedParses = 0;\n+    for (Map.Entry<String, String> streamResponse : serviceResponse._httpResponses.entrySet()) {\n+      try {\n+        SegmentStatus segmentStatus = JsonUtils.stringToObject(streamResponse.getValue(), SegmentStatus.class);\n+        segmentsStatus.add(segmentStatus);\n+      } catch (IOException e) {\n+        failedParses++;\n+        LOGGER.error(\"Unable to parse server response due to an error: \", e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2198469a7609a94c8bb7f7f744fb9ecdb97f119c"}, "originalPosition": 136}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2MzMzNjI3OnYy", "diffSide": "RIGHT", "path": "pinot-controller/src/main/java/org/apache/pinot/controller/util/ServerSegmentMetadataReader.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxNjoxMjozMlrOHEI_CQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxNjoxMjozMlrOHEI_CQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDEwMzU2MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  LOGGER.warn(\"Failed to parse {} segment load status responses from server.\", failedParses);\n          \n          \n            \n                  LOGGER.warn(\"Failed to parse segment load status responses from {} servers.\", failedParses);", "url": "https://github.com/apache/pinot/pull/5718#discussion_r474103561", "createdAt": "2020-08-20T16:12:32Z", "author": {"login": "mcvsubbu"}, "path": "pinot-controller/src/main/java/org/apache/pinot/controller/util/ServerSegmentMetadataReader.java", "diffHunk": "@@ -0,0 +1,163 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.controller.util;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.google.common.collect.BiMap;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.Executor;\n+import org.apache.commons.httpclient.HttpConnectionManager;\n+import org.apache.pinot.common.restlet.resources.SegmentStatus;\n+import org.apache.pinot.spi.utils.JsonUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * This is a helper class that calls the server API endpoints to fetch server metadata and the segment reload status\n+ * Only the servers returning success are returned by the method. For servers returning errors (http error or otherwise),\n+ * no entry is created in the return list\n+ */\n+public class ServerSegmentMetadataReader {\n+  private static final Logger LOGGER = LoggerFactory.getLogger(ServerSegmentMetadataReader.class);\n+\n+  private final Executor _executor;\n+  private final HttpConnectionManager _connectionManager;\n+\n+  public ServerSegmentMetadataReader(Executor executor, HttpConnectionManager connectionManager) {\n+    _executor = executor;\n+    _connectionManager = connectionManager;\n+  }\n+\n+  /**\n+   * This method is called when the API request is to fetch segment metadata for all segments of the table.\n+   * This method makes a MultiGet call to all servers that host their respective segments and gets the results.\n+   * @param tableNameWithType\n+   * @param serversToSegmentsMap\n+   * @param endpoints\n+   * @param timeoutMs\n+   * @return list of segments and their metadata as a JSON string\n+   */\n+  public List<String> getSegmentMetadataFromServer(String tableNameWithType,\n+                                                   Map<String, List<String>> serversToSegmentsMap,\n+                                                   BiMap<String, String> endpoints, int timeoutMs) {\n+    LOGGER.debug(\"Reading segment metadata from servers for table {}.\", tableNameWithType);\n+    List<String> serverURLs = new ArrayList<>();\n+    for (Map.Entry<String, List<String>> serverToSegments : serversToSegmentsMap.entrySet()) {\n+      List<String> segments = serverToSegments.getValue();\n+      for (String segment : segments) {\n+        serverURLs.add(generateSegmentMetadataServerURL(tableNameWithType, segment, endpoints.get(serverToSegments.getKey())));\n+      }\n+    }\n+    BiMap<String, String> endpointsToServers = endpoints.inverse();\n+    CompletionServiceHelper completionServiceHelper = new CompletionServiceHelper(_executor, _connectionManager, endpointsToServers);\n+    CompletionServiceHelper.CompletionServiceResponse serviceResponse =\n+        completionServiceHelper.doMultiGetRequest(serverURLs, tableNameWithType, timeoutMs);\n+    List<String> segmentsMetadata = new ArrayList<>();\n+\n+    int failedParses = 0;\n+    for (Map.Entry<String, String> streamResponse : serviceResponse._httpResponses.entrySet()) {\n+      try {\n+        JsonNode segmentMetadata = JsonUtils.stringToJsonNode(streamResponse.getValue());\n+        segmentsMetadata.add(JsonUtils.objectToString(segmentMetadata));\n+      } catch (IOException e) {\n+        failedParses++;\n+        LOGGER.error(\"Unable to parse server response due to an error: \", e);\n+      }\n+    }\n+    if (failedParses != 0) {\n+      LOGGER.warn(\"Failed to parse {} segment metadata responses from server.\", failedParses);\n+    }\n+\n+    LOGGER.debug(\"Retrieved segment metadata from servers.\");\n+    return segmentsMetadata;\n+  }\n+\n+  private String generateSegmentMetadataServerURL(String tableNameWithType, String segmentName, String endpoint) {\n+    return String.format(\"http://%s/tables/%s/segments/%s/metadata\", endpoint, tableNameWithType, segmentName);\n+  }\n+\n+  private String generateReloadStatusServerURL(String tableNameWithType, String segmentName, String endpoint) {\n+    return String.format(\"http://%s/tables/%s/segments/%s/loadStatus\", endpoint, tableNameWithType, segmentName);\n+  }\n+\n+  /**\n+   * This method is called when the API request is to fetch segment metadata for all segments of the table.\n+   * It makes a MultiGet call to all servers that host their respective segments and gets the results.\n+   * @param tableNameWithType\n+   * @param serverToSegments\n+   * @param serverToEndpoint\n+   * @param timeoutMs\n+   * @return list of segments along with their last reload times\n+   */\n+  public TableReloadStatus getSegmentReloadTime(String tableNameWithType,\n+                                                Map<String, List<String>> serverToSegments,\n+                                                BiMap<String, String> serverToEndpoint, int timeoutMs) {\n+    LOGGER.debug(\"Reading segment reload status from servers for table {}.\", tableNameWithType);\n+    List<String> serverURLs = new ArrayList<>();\n+    for (Map.Entry<String, List<String>> serverToSegmentsEntry : serverToSegments.entrySet()) {\n+      List<String> segments = serverToSegmentsEntry.getValue();\n+      for (String segment : segments) {\n+        serverURLs.add(generateReloadStatusServerURL(tableNameWithType, segment, serverToEndpoint.get(serverToSegmentsEntry.getKey())));\n+      }\n+    }\n+\n+    BiMap<String, String> endpointsToServers = serverToEndpoint.inverse();\n+    CompletionServiceHelper completionServiceHelper = new CompletionServiceHelper(_executor, _connectionManager, endpointsToServers);\n+    CompletionServiceHelper.CompletionServiceResponse serviceResponse =\n+        completionServiceHelper.doMultiGetRequest(serverURLs, tableNameWithType, timeoutMs);\n+    List<SegmentStatus> segmentsStatus = new ArrayList<>();\n+    int failedParses = 0;\n+    for (Map.Entry<String, String> streamResponse : serviceResponse._httpResponses.entrySet()) {\n+      try {\n+        SegmentStatus segmentStatus = JsonUtils.stringToObject(streamResponse.getValue(), SegmentStatus.class);\n+        segmentsStatus.add(segmentStatus);\n+      } catch (IOException e) {\n+        failedParses++;\n+        LOGGER.error(\"Unable to parse server response due to an error: \", e);\n+      }\n+    }\n+    if (failedParses != 0) {\n+      LOGGER.warn(\"Failed to parse {} segment load status responses from server.\", failedParses);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2198469a7609a94c8bb7f7f744fb9ecdb97f119c"}, "originalPosition": 140}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2MzMzNzI5OnYy", "diffSide": "RIGHT", "path": "pinot-controller/src/main/java/org/apache/pinot/controller/util/ServerSegmentMetadataReader.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxNjoxMjo0N1rOHEI_qA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxNjoxMjo0N1rOHEI_qA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDEwMzcyMA==", "bodyText": "nit: typo", "url": "https://github.com/apache/pinot/pull/5718#discussion_r474103720", "createdAt": "2020-08-20T16:12:47Z", "author": {"login": "mcvsubbu"}, "path": "pinot-controller/src/main/java/org/apache/pinot/controller/util/ServerSegmentMetadataReader.java", "diffHunk": "@@ -0,0 +1,163 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.controller.util;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.google.common.collect.BiMap;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.Executor;\n+import org.apache.commons.httpclient.HttpConnectionManager;\n+import org.apache.pinot.common.restlet.resources.SegmentStatus;\n+import org.apache.pinot.spi.utils.JsonUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * This is a helper class that calls the server API endpoints to fetch server metadata and the segment reload status\n+ * Only the servers returning success are returned by the method. For servers returning errors (http error or otherwise),\n+ * no entry is created in the return list\n+ */\n+public class ServerSegmentMetadataReader {\n+  private static final Logger LOGGER = LoggerFactory.getLogger(ServerSegmentMetadataReader.class);\n+\n+  private final Executor _executor;\n+  private final HttpConnectionManager _connectionManager;\n+\n+  public ServerSegmentMetadataReader(Executor executor, HttpConnectionManager connectionManager) {\n+    _executor = executor;\n+    _connectionManager = connectionManager;\n+  }\n+\n+  /**\n+   * This method is called when the API request is to fetch segment metadata for all segments of the table.\n+   * This method makes a MultiGet call to all servers that host their respective segments and gets the results.\n+   * @param tableNameWithType\n+   * @param serversToSegmentsMap\n+   * @param endpoints\n+   * @param timeoutMs\n+   * @return list of segments and their metadata as a JSON string\n+   */\n+  public List<String> getSegmentMetadataFromServer(String tableNameWithType,\n+                                                   Map<String, List<String>> serversToSegmentsMap,\n+                                                   BiMap<String, String> endpoints, int timeoutMs) {\n+    LOGGER.debug(\"Reading segment metadata from servers for table {}.\", tableNameWithType);\n+    List<String> serverURLs = new ArrayList<>();\n+    for (Map.Entry<String, List<String>> serverToSegments : serversToSegmentsMap.entrySet()) {\n+      List<String> segments = serverToSegments.getValue();\n+      for (String segment : segments) {\n+        serverURLs.add(generateSegmentMetadataServerURL(tableNameWithType, segment, endpoints.get(serverToSegments.getKey())));\n+      }\n+    }\n+    BiMap<String, String> endpointsToServers = endpoints.inverse();\n+    CompletionServiceHelper completionServiceHelper = new CompletionServiceHelper(_executor, _connectionManager, endpointsToServers);\n+    CompletionServiceHelper.CompletionServiceResponse serviceResponse =\n+        completionServiceHelper.doMultiGetRequest(serverURLs, tableNameWithType, timeoutMs);\n+    List<String> segmentsMetadata = new ArrayList<>();\n+\n+    int failedParses = 0;\n+    for (Map.Entry<String, String> streamResponse : serviceResponse._httpResponses.entrySet()) {\n+      try {\n+        JsonNode segmentMetadata = JsonUtils.stringToJsonNode(streamResponse.getValue());\n+        segmentsMetadata.add(JsonUtils.objectToString(segmentMetadata));\n+      } catch (IOException e) {\n+        failedParses++;\n+        LOGGER.error(\"Unable to parse server response due to an error: \", e);\n+      }\n+    }\n+    if (failedParses != 0) {\n+      LOGGER.warn(\"Failed to parse {} segment metadata responses from server.\", failedParses);\n+    }\n+\n+    LOGGER.debug(\"Retrieved segment metadata from servers.\");\n+    return segmentsMetadata;\n+  }\n+\n+  private String generateSegmentMetadataServerURL(String tableNameWithType, String segmentName, String endpoint) {\n+    return String.format(\"http://%s/tables/%s/segments/%s/metadata\", endpoint, tableNameWithType, segmentName);\n+  }\n+\n+  private String generateReloadStatusServerURL(String tableNameWithType, String segmentName, String endpoint) {\n+    return String.format(\"http://%s/tables/%s/segments/%s/loadStatus\", endpoint, tableNameWithType, segmentName);\n+  }\n+\n+  /**\n+   * This method is called when the API request is to fetch segment metadata for all segments of the table.\n+   * It makes a MultiGet call to all servers that host their respective segments and gets the results.\n+   * @param tableNameWithType\n+   * @param serverToSegments\n+   * @param serverToEndpoint\n+   * @param timeoutMs\n+   * @return list of segments along with their last reload times\n+   */\n+  public TableReloadStatus getSegmentReloadTime(String tableNameWithType,\n+                                                Map<String, List<String>> serverToSegments,\n+                                                BiMap<String, String> serverToEndpoint, int timeoutMs) {\n+    LOGGER.debug(\"Reading segment reload status from servers for table {}.\", tableNameWithType);\n+    List<String> serverURLs = new ArrayList<>();\n+    for (Map.Entry<String, List<String>> serverToSegmentsEntry : serverToSegments.entrySet()) {\n+      List<String> segments = serverToSegmentsEntry.getValue();\n+      for (String segment : segments) {\n+        serverURLs.add(generateReloadStatusServerURL(tableNameWithType, segment, serverToEndpoint.get(serverToSegmentsEntry.getKey())));\n+      }\n+    }\n+\n+    BiMap<String, String> endpointsToServers = serverToEndpoint.inverse();\n+    CompletionServiceHelper completionServiceHelper = new CompletionServiceHelper(_executor, _connectionManager, endpointsToServers);\n+    CompletionServiceHelper.CompletionServiceResponse serviceResponse =\n+        completionServiceHelper.doMultiGetRequest(serverURLs, tableNameWithType, timeoutMs);\n+    List<SegmentStatus> segmentsStatus = new ArrayList<>();\n+    int failedParses = 0;\n+    for (Map.Entry<String, String> streamResponse : serviceResponse._httpResponses.entrySet()) {\n+      try {\n+        SegmentStatus segmentStatus = JsonUtils.stringToObject(streamResponse.getValue(), SegmentStatus.class);\n+        segmentsStatus.add(segmentStatus);\n+      } catch (IOException e) {\n+        failedParses++;\n+        LOGGER.error(\"Unable to parse server response due to an error: \", e);\n+      }\n+    }\n+    if (failedParses != 0) {\n+      LOGGER.warn(\"Failed to parse {} segment load status responses from server.\", failedParses);\n+    }\n+\n+    TableReloadStatus tableReloadStatus = new TableReloadStatus();\n+    tableReloadStatus._tableName = tableNameWithType;\n+    tableReloadStatus._segmentStatus = segmentsStatus;\n+    tableReloadStatus._numSegmentsFailed = serviceResponse._failedResponseCount;\n+    return tableReloadStatus;\n+  }\n+\n+  /**\n+   * Structure to hold the reload statsus for all segments of a given table.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2198469a7609a94c8bb7f7f744fb9ecdb97f119c"}, "originalPosition": 151}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2MzM0NDcwOnYy", "diffSide": "RIGHT", "path": "pinot-common/src/main/java/org/apache/pinot/common/restlet/resources/SegmentStatus.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxNjoxNDo0MVrOHEJEKw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQyMDoyNToxMFrOHJTgNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDEwNDg3NQ==", "bodyText": "Why is this a String and not long?", "url": "https://github.com/apache/pinot/pull/5718#discussion_r474104875", "createdAt": "2020-08-20T16:14:41Z", "author": {"login": "mcvsubbu"}, "path": "pinot-common/src/main/java/org/apache/pinot/common/restlet/resources/SegmentStatus.java", "diffHunk": "@@ -0,0 +1,53 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.common.restlet.resources;\n+\n+/**\n+ * Holds segment last reload time status along with any errors for a segment with unsuccessful call to get reload times.\n+ *\n+ * NOTE: This class is being used in both the controller and the server. There is tight coupling between them.\n+ * So, the API contract cannot be changed without changing or refactoring this class.\n+ *\n+ * TODO: refactor this class to be handled better. Make sure to have an extensible design that helps add more\n+ */\n+public class SegmentStatus {\n+  // Name of the segment itself\n+  public String _segmentName;\n+  // The last segment reload time in ISO date format (yyyy-MM-dd HH:mm:ss:SSS UTC)\n+  // If the segment reload failed for a segment, then the value will be the previous segment reload was successful\n+  public String _segmentReloadTimeUTC;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2198469a7609a94c8bb7f7f744fb9ecdb97f119c"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTEwMTkwNA==", "bodyText": "The date is in string format: ISO date format (yyyy-MM-dd HH:mm:ss:SSS UTC)", "url": "https://github.com/apache/pinot/pull/5718#discussion_r475101904", "createdAt": "2020-08-22T15:33:44Z", "author": {"login": "guruguha"}, "path": "pinot-common/src/main/java/org/apache/pinot/common/restlet/resources/SegmentStatus.java", "diffHunk": "@@ -0,0 +1,53 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.common.restlet.resources;\n+\n+/**\n+ * Holds segment last reload time status along with any errors for a segment with unsuccessful call to get reload times.\n+ *\n+ * NOTE: This class is being used in both the controller and the server. There is tight coupling between them.\n+ * So, the API contract cannot be changed without changing or refactoring this class.\n+ *\n+ * TODO: refactor this class to be handled better. Make sure to have an extensible design that helps add more\n+ */\n+public class SegmentStatus {\n+  // Name of the segment itself\n+  public String _segmentName;\n+  // The last segment reload time in ISO date format (yyyy-MM-dd HH:mm:ss:SSS UTC)\n+  // If the segment reload failed for a segment, then the value will be the previous segment reload was successful\n+  public String _segmentReloadTimeUTC;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDEwNDg3NQ=="}, "originalCommit": {"oid": "2198469a7609a94c8bb7f7f744fb9ecdb97f119c"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTUxODc3Mg==", "bodyText": "I have updated the API to return long instead of String", "url": "https://github.com/apache/pinot/pull/5718#discussion_r479518772", "createdAt": "2020-08-28T20:25:10Z", "author": {"login": "guruguha"}, "path": "pinot-common/src/main/java/org/apache/pinot/common/restlet/resources/SegmentStatus.java", "diffHunk": "@@ -0,0 +1,53 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.common.restlet.resources;\n+\n+/**\n+ * Holds segment last reload time status along with any errors for a segment with unsuccessful call to get reload times.\n+ *\n+ * NOTE: This class is being used in both the controller and the server. There is tight coupling between them.\n+ * So, the API contract cannot be changed without changing or refactoring this class.\n+ *\n+ * TODO: refactor this class to be handled better. Make sure to have an extensible design that helps add more\n+ */\n+public class SegmentStatus {\n+  // Name of the segment itself\n+  public String _segmentName;\n+  // The last segment reload time in ISO date format (yyyy-MM-dd HH:mm:ss:SSS UTC)\n+  // If the segment reload failed for a segment, then the value will be the previous segment reload was successful\n+  public String _segmentReloadTimeUTC;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDEwNDg3NQ=="}, "originalCommit": {"oid": "2198469a7609a94c8bb7f7f744fb9ecdb97f119c"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2MzM0OTc4OnYy", "diffSide": "RIGHT", "path": "pinot-controller/src/main/java/org/apache/pinot/controller/api/resources/PinotSegmentRestletResource.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxNjoxNTo1NFrOHEJHHg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMlQxNTozNDozM1rOHFF7KQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDEwNTYzMA==", "bodyText": "Ideally we should have timeout declared in milliseconds, so that we can configure sub-second values for fast responses. I suppose you are re-using a previously declared config here?", "url": "https://github.com/apache/pinot/pull/5718#discussion_r474105630", "createdAt": "2020-08-20T16:15:54Z", "author": {"login": "mcvsubbu"}, "path": "pinot-controller/src/main/java/org/apache/pinot/controller/api/resources/PinotSegmentRestletResource.java", "diffHunk": "@@ -485,4 +504,80 @@ private void deleteSegmentsInternal(String tableNameWithType, List<String> segme\n       throw new ControllerApplicationException(LOGGER, e.getMessage(), Response.Status.FORBIDDEN);\n     }\n   }\n+\n+  @GET\n+  @Path(\"segments/{tableName}/loadStatus\")\n+  @Produces(MediaType.APPLICATION_JSON)\n+  @ApiOperation(value = \"Load status of a table segment\", notes = \"Load status of a table segment\")\n+  public Map<String, ServerSegmentMetadataReader.TableReloadStatus> getReloadStatus(\n+      @ApiParam(value = \"Name of the table\", required = true) @PathParam(\"tableName\") String tableName,\n+      @ApiParam(value = \"OFFLINE|REALTIME\") @QueryParam(\"type\") String tableTypeStr) {\n+    TableType tableType = Constants.validateTableType(tableTypeStr);\n+    if (tableType == TableType.REALTIME) {\n+      throw new ControllerApplicationException(LOGGER,\n+          \"Table type : \" + tableTypeStr + \" not yet supported.\", Status.NOT_IMPLEMENTED);\n+    }\n+\n+    List<String> tableNamesWithType = getExistingTableNamesWithType(tableName, Constants.validateTableType(tableTypeStr));\n+    Map<String, ServerSegmentMetadataReader.TableReloadStatus> reloadStatusMap = new HashMap<>();\n+    for (String tableNameWithType : tableNamesWithType) {\n+      ServerSegmentMetadataReader.TableReloadStatus tableReloadStatus;\n+      try {\n+        tableReloadStatus = getSegmentsReloadStatus(tableNameWithType);\n+      } catch (InvalidConfigException e) {\n+        throw new ControllerApplicationException(LOGGER, e.getMessage(), Status.BAD_REQUEST);\n+      }\n+      reloadStatusMap.put(tableNameWithType, tableReloadStatus);\n+    }\n+    return reloadStatusMap;\n+  }\n+\n+  private ServerSegmentMetadataReader.TableReloadStatus getSegmentsReloadStatus(String tableNameWithType)\n+      throws InvalidConfigException {\n+    TableMetadataReader tableMetadataReader =\n+        new TableMetadataReader(_executor, _connectionManager, _pinotHelixResourceManager);\n+    return tableMetadataReader.getReloadStatus(tableNameWithType,\n+        _controllerConf.getServerAdminRequestTimeoutSeconds() * 1000);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2198469a7609a94c8bb7f7f744fb9ecdb97f119c"}, "originalPosition": 112}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTEwMTk5Mw==", "bodyText": "Yes, it was previously used in another code segment. Referred the same here as well.", "url": "https://github.com/apache/pinot/pull/5718#discussion_r475101993", "createdAt": "2020-08-22T15:34:33Z", "author": {"login": "guruguha"}, "path": "pinot-controller/src/main/java/org/apache/pinot/controller/api/resources/PinotSegmentRestletResource.java", "diffHunk": "@@ -485,4 +504,80 @@ private void deleteSegmentsInternal(String tableNameWithType, List<String> segme\n       throw new ControllerApplicationException(LOGGER, e.getMessage(), Response.Status.FORBIDDEN);\n     }\n   }\n+\n+  @GET\n+  @Path(\"segments/{tableName}/loadStatus\")\n+  @Produces(MediaType.APPLICATION_JSON)\n+  @ApiOperation(value = \"Load status of a table segment\", notes = \"Load status of a table segment\")\n+  public Map<String, ServerSegmentMetadataReader.TableReloadStatus> getReloadStatus(\n+      @ApiParam(value = \"Name of the table\", required = true) @PathParam(\"tableName\") String tableName,\n+      @ApiParam(value = \"OFFLINE|REALTIME\") @QueryParam(\"type\") String tableTypeStr) {\n+    TableType tableType = Constants.validateTableType(tableTypeStr);\n+    if (tableType == TableType.REALTIME) {\n+      throw new ControllerApplicationException(LOGGER,\n+          \"Table type : \" + tableTypeStr + \" not yet supported.\", Status.NOT_IMPLEMENTED);\n+    }\n+\n+    List<String> tableNamesWithType = getExistingTableNamesWithType(tableName, Constants.validateTableType(tableTypeStr));\n+    Map<String, ServerSegmentMetadataReader.TableReloadStatus> reloadStatusMap = new HashMap<>();\n+    for (String tableNameWithType : tableNamesWithType) {\n+      ServerSegmentMetadataReader.TableReloadStatus tableReloadStatus;\n+      try {\n+        tableReloadStatus = getSegmentsReloadStatus(tableNameWithType);\n+      } catch (InvalidConfigException e) {\n+        throw new ControllerApplicationException(LOGGER, e.getMessage(), Status.BAD_REQUEST);\n+      }\n+      reloadStatusMap.put(tableNameWithType, tableReloadStatus);\n+    }\n+    return reloadStatusMap;\n+  }\n+\n+  private ServerSegmentMetadataReader.TableReloadStatus getSegmentsReloadStatus(String tableNameWithType)\n+      throws InvalidConfigException {\n+    TableMetadataReader tableMetadataReader =\n+        new TableMetadataReader(_executor, _connectionManager, _pinotHelixResourceManager);\n+    return tableMetadataReader.getReloadStatus(tableNameWithType,\n+        _controllerConf.getServerAdminRequestTimeoutSeconds() * 1000);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDEwNTYzMA=="}, "originalCommit": {"oid": "2198469a7609a94c8bb7f7f744fb9ecdb97f119c"}, "originalPosition": 112}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4154, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}