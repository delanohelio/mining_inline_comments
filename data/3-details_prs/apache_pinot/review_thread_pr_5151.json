{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg4MDM1NTA1", "number": 5151, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNFQwNTozNjoyNVrODoCHTA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNFQwNTozNjoyNVrODoCHTA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMzA0MjY4OnYy", "diffSide": "RIGHT", "path": "pinot-core/src/test/java/org/apache/pinot/core/common/datatable/DataTableUtilsTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNFQwNTozNjoyNVrOF2X6SA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNFQwNzoxNTowMFrOF2YODg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjU1OTE3Ng==", "bodyText": "new String[]{\"c\", \"d\", \"count(*)\", \"sum(a)\", \"max(b)\"}", "url": "https://github.com/apache/pinot/pull/5151#discussion_r392559176", "createdAt": "2020-03-14T05:36:25Z", "author": {"login": "xiangfu0"}, "path": "pinot-core/src/test/java/org/apache/pinot/core/common/datatable/DataTableUtilsTest.java", "diffHunk": "@@ -0,0 +1,86 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.core.common.datatable;\n+\n+import java.io.IOException;\n+import java.util.Collections;\n+import org.apache.pinot.common.request.BrokerRequest;\n+import org.apache.pinot.common.utils.CommonConstants.Broker.Request;\n+import org.apache.pinot.common.utils.DataSchema;\n+import org.apache.pinot.common.utils.DataTable;\n+import org.apache.pinot.pql.parsers.Pql2Compiler;\n+import org.testng.annotations.Test;\n+\n+import static org.testng.Assert.assertEquals;\n+\n+\n+public class DataTableUtilsTest {\n+  private static final Pql2Compiler COMPILER = new Pql2Compiler();\n+\n+  @Test\n+  public void testBuildEmptyDataTable()\n+      throws IOException {\n+    // Selection\n+    BrokerRequest brokerRequest = COMPILER.compileToBrokerRequest(\"SELECT * FROM table WHERE foo = 'bar'\");\n+    DataTable dataTable = DataTableUtils.buildEmptyDataTable(brokerRequest);\n+    DataSchema dataSchema = dataTable.getDataSchema();\n+    assertEquals(dataSchema.getColumnNames(), new String[]{\"*\"});\n+    assertEquals(dataSchema.getColumnDataTypes(), new DataSchema.ColumnDataType[]{DataSchema.ColumnDataType.STRING});\n+    assertEquals(dataTable.getNumberOfRows(), 0);\n+\n+    // Aggregation\n+    brokerRequest = COMPILER.compileToBrokerRequest(\"SELECT COUNT(*), SUM(a), MAX(b) FROM table WHERE foo = 'bar'\");\n+    dataTable = DataTableUtils.buildEmptyDataTable(brokerRequest);\n+    dataSchema = dataTable.getDataSchema();\n+    assertEquals(dataSchema.getColumnNames(), new String[]{\"count_star\", \"sum_a\", \"max_b\"});\n+    assertEquals(dataSchema.getColumnDataTypes(),\n+        new DataSchema.ColumnDataType[]{DataSchema.ColumnDataType.LONG, DataSchema.ColumnDataType.DOUBLE, DataSchema.ColumnDataType.DOUBLE});\n+    assertEquals(dataTable.getNumberOfRows(), 1);\n+    assertEquals(dataTable.getLong(0, 0), 0L);\n+    assertEquals(dataTable.getDouble(0, 1), 0.0);\n+    assertEquals(dataTable.getDouble(0, 2), Double.NEGATIVE_INFINITY);\n+\n+    // PQL group-by\n+    brokerRequest =\n+        COMPILER.compileToBrokerRequest(\"SELECT COUNT(*), SUM(a), MAX(b) FROM table WHERE foo = 'bar' GROUP BY c, d\");\n+    dataTable = DataTableUtils.buildEmptyDataTable(brokerRequest);\n+    dataSchema = dataTable.getDataSchema();\n+    assertEquals(dataSchema.getColumnNames(), new String[]{\"functionName\", \"GroupByResultMap\"});\n+    assertEquals(dataSchema.getColumnDataTypes(),\n+        new DataSchema.ColumnDataType[]{DataSchema.ColumnDataType.STRING, DataSchema.ColumnDataType.OBJECT});\n+    assertEquals(dataTable.getNumberOfRows(), 3);\n+    assertEquals(dataTable.getString(0, 0), \"count_star\");\n+    assertEquals(dataTable.getObject(0, 1), Collections.emptyMap());\n+    assertEquals(dataTable.getString(1, 0), \"sum_a\");\n+    assertEquals(dataTable.getObject(1, 1), Collections.emptyMap());\n+    assertEquals(dataTable.getString(2, 0), \"max_b\");\n+    assertEquals(dataTable.getObject(2, 1), Collections.emptyMap());\n+\n+    // SQL group-by\n+    brokerRequest = COMPILER\n+        .compileToBrokerRequest(\"SELECT c, d, COUNT(*), SUM(a), MAX(b) FROM table WHERE foo = 'bar' GROUP BY c, d\");\n+    brokerRequest.setQueryOptions(Collections.singletonMap(Request.QueryOptionKey.GROUP_BY_MODE, Request.SQL));\n+    dataTable = DataTableUtils.buildEmptyDataTable(brokerRequest);\n+    dataSchema = dataTable.getDataSchema();\n+    assertEquals(dataSchema.getColumnNames(), new String[]{\"c\", \"d\", \"count_star\", \"sum_a\", \"max_b\"});", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "38bca100ee87ff402560644ab5383d6b839618a5"}, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjU2NDIzOA==", "bodyText": "Good catch", "url": "https://github.com/apache/pinot/pull/5151#discussion_r392564238", "createdAt": "2020-03-14T07:15:00Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-core/src/test/java/org/apache/pinot/core/common/datatable/DataTableUtilsTest.java", "diffHunk": "@@ -0,0 +1,86 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.core.common.datatable;\n+\n+import java.io.IOException;\n+import java.util.Collections;\n+import org.apache.pinot.common.request.BrokerRequest;\n+import org.apache.pinot.common.utils.CommonConstants.Broker.Request;\n+import org.apache.pinot.common.utils.DataSchema;\n+import org.apache.pinot.common.utils.DataTable;\n+import org.apache.pinot.pql.parsers.Pql2Compiler;\n+import org.testng.annotations.Test;\n+\n+import static org.testng.Assert.assertEquals;\n+\n+\n+public class DataTableUtilsTest {\n+  private static final Pql2Compiler COMPILER = new Pql2Compiler();\n+\n+  @Test\n+  public void testBuildEmptyDataTable()\n+      throws IOException {\n+    // Selection\n+    BrokerRequest brokerRequest = COMPILER.compileToBrokerRequest(\"SELECT * FROM table WHERE foo = 'bar'\");\n+    DataTable dataTable = DataTableUtils.buildEmptyDataTable(brokerRequest);\n+    DataSchema dataSchema = dataTable.getDataSchema();\n+    assertEquals(dataSchema.getColumnNames(), new String[]{\"*\"});\n+    assertEquals(dataSchema.getColumnDataTypes(), new DataSchema.ColumnDataType[]{DataSchema.ColumnDataType.STRING});\n+    assertEquals(dataTable.getNumberOfRows(), 0);\n+\n+    // Aggregation\n+    brokerRequest = COMPILER.compileToBrokerRequest(\"SELECT COUNT(*), SUM(a), MAX(b) FROM table WHERE foo = 'bar'\");\n+    dataTable = DataTableUtils.buildEmptyDataTable(brokerRequest);\n+    dataSchema = dataTable.getDataSchema();\n+    assertEquals(dataSchema.getColumnNames(), new String[]{\"count_star\", \"sum_a\", \"max_b\"});\n+    assertEquals(dataSchema.getColumnDataTypes(),\n+        new DataSchema.ColumnDataType[]{DataSchema.ColumnDataType.LONG, DataSchema.ColumnDataType.DOUBLE, DataSchema.ColumnDataType.DOUBLE});\n+    assertEquals(dataTable.getNumberOfRows(), 1);\n+    assertEquals(dataTable.getLong(0, 0), 0L);\n+    assertEquals(dataTable.getDouble(0, 1), 0.0);\n+    assertEquals(dataTable.getDouble(0, 2), Double.NEGATIVE_INFINITY);\n+\n+    // PQL group-by\n+    brokerRequest =\n+        COMPILER.compileToBrokerRequest(\"SELECT COUNT(*), SUM(a), MAX(b) FROM table WHERE foo = 'bar' GROUP BY c, d\");\n+    dataTable = DataTableUtils.buildEmptyDataTable(brokerRequest);\n+    dataSchema = dataTable.getDataSchema();\n+    assertEquals(dataSchema.getColumnNames(), new String[]{\"functionName\", \"GroupByResultMap\"});\n+    assertEquals(dataSchema.getColumnDataTypes(),\n+        new DataSchema.ColumnDataType[]{DataSchema.ColumnDataType.STRING, DataSchema.ColumnDataType.OBJECT});\n+    assertEquals(dataTable.getNumberOfRows(), 3);\n+    assertEquals(dataTable.getString(0, 0), \"count_star\");\n+    assertEquals(dataTable.getObject(0, 1), Collections.emptyMap());\n+    assertEquals(dataTable.getString(1, 0), \"sum_a\");\n+    assertEquals(dataTable.getObject(1, 1), Collections.emptyMap());\n+    assertEquals(dataTable.getString(2, 0), \"max_b\");\n+    assertEquals(dataTable.getObject(2, 1), Collections.emptyMap());\n+\n+    // SQL group-by\n+    brokerRequest = COMPILER\n+        .compileToBrokerRequest(\"SELECT c, d, COUNT(*), SUM(a), MAX(b) FROM table WHERE foo = 'bar' GROUP BY c, d\");\n+    brokerRequest.setQueryOptions(Collections.singletonMap(Request.QueryOptionKey.GROUP_BY_MODE, Request.SQL));\n+    dataTable = DataTableUtils.buildEmptyDataTable(brokerRequest);\n+    dataSchema = dataTable.getDataSchema();\n+    assertEquals(dataSchema.getColumnNames(), new String[]{\"c\", \"d\", \"count_star\", \"sum_a\", \"max_b\"});", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjU1OTE3Ng=="}, "originalCommit": {"oid": "38bca100ee87ff402560644ab5383d6b839618a5"}, "originalPosition": 81}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3523, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}