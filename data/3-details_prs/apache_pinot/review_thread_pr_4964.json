{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYwMTA1MTc3", "number": 4964, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wN1QxODowODo0M1rODWU47Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOVQxNzoxNjowMVrODW7SRQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI0NzM3NTE3OnYy", "diffSide": "RIGHT", "path": "pinot-broker/src/main/java/org/apache/pinot/broker/api/resources/PinotClientRequest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wN1QxODowODo0M1rOFbBYaA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wN1QxODowODo0M1rOFbBYaA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mzg3ODUwNA==", "bodyText": "Nit: s/in/using?", "url": "https://github.com/apache/pinot/pull/4964#discussion_r363878504", "createdAt": "2020-01-07T18:08:43Z", "author": {"login": "mayankshriv"}, "path": "pinot-broker/src/main/java/org/apache/pinot/broker/api/resources/PinotClientRequest.java", "diffHunk": "@@ -103,4 +100,60 @@ public String processQueryPost(String query) {\n       throw new WebApplicationException(e, Response.Status.INTERNAL_SERVER_ERROR);\n     }\n   }\n+\n+  @GET\n+  @Produces(MediaType.APPLICATION_JSON)\n+  @Path(\"sql\")\n+  @ApiOperation(value = \"Querying pinot in sql\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "54f9bf9e19609f7ad3d0adf8d2df3159ce7ad291"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI0NzU3MTQwOnYy", "diffSide": "RIGHT", "path": "pinot-broker/src/main/java/org/apache/pinot/broker/api/resources/PinotClientRequest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wN1QxOToyNjowNVrOFbDWSQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wN1QyMTozODoxOVrOFbGj_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzkxMDcyOQ==", "bodyText": "Why not contain trace and debug_option in this endpoint?", "url": "https://github.com/apache/pinot/pull/4964#discussion_r363910729", "createdAt": "2020-01-07T19:26:05Z", "author": {"login": "jackjlli"}, "path": "pinot-broker/src/main/java/org/apache/pinot/broker/api/resources/PinotClientRequest.java", "diffHunk": "@@ -103,4 +100,60 @@ public String processQueryPost(String query) {\n       throw new WebApplicationException(e, Response.Status.INTERNAL_SERVER_ERROR);\n     }\n   }\n+\n+  @GET\n+  @Produces(MediaType.APPLICATION_JSON)\n+  @Path(\"sql\")\n+  @ApiOperation(value = \"Querying pinot in sql\")\n+  @ApiResponses(value = {@ApiResponse(code = 200, message = \"Query response\"), @ApiResponse(code = 500, message = \"Internal Server Error\")})\n+  public String processSqlQueryGet(@ApiParam(value = \"Query\", required = true) @QueryParam(\"sql\") String query,\n+      @ApiParam(value = \"Trace enabled\") @QueryParam(Request.TRACE) String traceEnabled,\n+      @ApiParam(value = \"Debug options\") @QueryParam(Request.DEBUG_OPTIONS) String debugOptions) {\n+    try {\n+      ObjectNode requestJson = JsonUtils.newObjectNode();\n+      requestJson.put(Request.SQL, query);\n+      String queryOptions = constructSqlQueryOptions();\n+      requestJson.put(Request.QUERY_OPTIONS, queryOptions);\n+      if (traceEnabled != null) {\n+        requestJson.put(Request.TRACE, traceEnabled);\n+      }\n+      if (debugOptions != null) {\n+        requestJson.put(Request.DEBUG_OPTIONS, debugOptions);\n+      }\n+      BrokerResponse brokerResponse = requestHandler.handleRequest(requestJson, null, new RequestStatistics());\n+      return brokerResponse.toJsonString();\n+    } catch (Exception e) {\n+      LOGGER.error(\"Caught exception while processing GET request\", e);\n+      brokerMetrics.addMeteredGlobalValue(BrokerMeter.UNCAUGHT_GET_EXCEPTIONS, 1L);\n+      throw new WebApplicationException(e, Response.Status.INTERNAL_SERVER_ERROR);\n+    }\n+  }\n+\n+  @POST\n+  @Produces(MediaType.APPLICATION_JSON)\n+  @Path(\"sql\")\n+  @ApiOperation(value = \"Querying pinot\")\n+  @ApiResponses(value = {@ApiResponse(code = 200, message = \"Query response\"), @ApiResponse(code = 500, message = \"Internal Server Error\")})\n+  public String processSqlQueryPost(String query) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "54f9bf9e19609f7ad3d0adf8d2df3159ce7ad291"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mzk2MzM4OQ==", "bodyText": "Everything is part of the payload in this one", "url": "https://github.com/apache/pinot/pull/4964#discussion_r363963389", "createdAt": "2020-01-07T21:38:19Z", "author": {"login": "npawar"}, "path": "pinot-broker/src/main/java/org/apache/pinot/broker/api/resources/PinotClientRequest.java", "diffHunk": "@@ -103,4 +100,60 @@ public String processQueryPost(String query) {\n       throw new WebApplicationException(e, Response.Status.INTERNAL_SERVER_ERROR);\n     }\n   }\n+\n+  @GET\n+  @Produces(MediaType.APPLICATION_JSON)\n+  @Path(\"sql\")\n+  @ApiOperation(value = \"Querying pinot in sql\")\n+  @ApiResponses(value = {@ApiResponse(code = 200, message = \"Query response\"), @ApiResponse(code = 500, message = \"Internal Server Error\")})\n+  public String processSqlQueryGet(@ApiParam(value = \"Query\", required = true) @QueryParam(\"sql\") String query,\n+      @ApiParam(value = \"Trace enabled\") @QueryParam(Request.TRACE) String traceEnabled,\n+      @ApiParam(value = \"Debug options\") @QueryParam(Request.DEBUG_OPTIONS) String debugOptions) {\n+    try {\n+      ObjectNode requestJson = JsonUtils.newObjectNode();\n+      requestJson.put(Request.SQL, query);\n+      String queryOptions = constructSqlQueryOptions();\n+      requestJson.put(Request.QUERY_OPTIONS, queryOptions);\n+      if (traceEnabled != null) {\n+        requestJson.put(Request.TRACE, traceEnabled);\n+      }\n+      if (debugOptions != null) {\n+        requestJson.put(Request.DEBUG_OPTIONS, debugOptions);\n+      }\n+      BrokerResponse brokerResponse = requestHandler.handleRequest(requestJson, null, new RequestStatistics());\n+      return brokerResponse.toJsonString();\n+    } catch (Exception e) {\n+      LOGGER.error(\"Caught exception while processing GET request\", e);\n+      brokerMetrics.addMeteredGlobalValue(BrokerMeter.UNCAUGHT_GET_EXCEPTIONS, 1L);\n+      throw new WebApplicationException(e, Response.Status.INTERNAL_SERVER_ERROR);\n+    }\n+  }\n+\n+  @POST\n+  @Produces(MediaType.APPLICATION_JSON)\n+  @Path(\"sql\")\n+  @ApiOperation(value = \"Querying pinot\")\n+  @ApiResponses(value = {@ApiResponse(code = 200, message = \"Query response\"), @ApiResponse(code = 500, message = \"Internal Server Error\")})\n+  public String processSqlQueryPost(String query) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzkxMDcyOQ=="}, "originalCommit": {"oid": "54f9bf9e19609f7ad3d0adf8d2df3159ce7ad291"}, "originalPosition": 72}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI0NzU3MzA2OnYy", "diffSide": "RIGHT", "path": "pinot-broker/src/main/java/org/apache/pinot/broker/api/resources/PinotClientRequest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wN1QxOToyNjo0MFrOFbDXQg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wN1QxOToyNjo0MFrOFbDXQg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzkxMDk3OA==", "bodyText": "\"Querying pinot using sql\"?", "url": "https://github.com/apache/pinot/pull/4964#discussion_r363910978", "createdAt": "2020-01-07T19:26:40Z", "author": {"login": "jackjlli"}, "path": "pinot-broker/src/main/java/org/apache/pinot/broker/api/resources/PinotClientRequest.java", "diffHunk": "@@ -103,4 +100,60 @@ public String processQueryPost(String query) {\n       throw new WebApplicationException(e, Response.Status.INTERNAL_SERVER_ERROR);\n     }\n   }\n+\n+  @GET\n+  @Produces(MediaType.APPLICATION_JSON)\n+  @Path(\"sql\")\n+  @ApiOperation(value = \"Querying pinot in sql\")\n+  @ApiResponses(value = {@ApiResponse(code = 200, message = \"Query response\"), @ApiResponse(code = 500, message = \"Internal Server Error\")})\n+  public String processSqlQueryGet(@ApiParam(value = \"Query\", required = true) @QueryParam(\"sql\") String query,\n+      @ApiParam(value = \"Trace enabled\") @QueryParam(Request.TRACE) String traceEnabled,\n+      @ApiParam(value = \"Debug options\") @QueryParam(Request.DEBUG_OPTIONS) String debugOptions) {\n+    try {\n+      ObjectNode requestJson = JsonUtils.newObjectNode();\n+      requestJson.put(Request.SQL, query);\n+      String queryOptions = constructSqlQueryOptions();\n+      requestJson.put(Request.QUERY_OPTIONS, queryOptions);\n+      if (traceEnabled != null) {\n+        requestJson.put(Request.TRACE, traceEnabled);\n+      }\n+      if (debugOptions != null) {\n+        requestJson.put(Request.DEBUG_OPTIONS, debugOptions);\n+      }\n+      BrokerResponse brokerResponse = requestHandler.handleRequest(requestJson, null, new RequestStatistics());\n+      return brokerResponse.toJsonString();\n+    } catch (Exception e) {\n+      LOGGER.error(\"Caught exception while processing GET request\", e);\n+      brokerMetrics.addMeteredGlobalValue(BrokerMeter.UNCAUGHT_GET_EXCEPTIONS, 1L);\n+      throw new WebApplicationException(e, Response.Status.INTERNAL_SERVER_ERROR);\n+    }\n+  }\n+\n+  @POST\n+  @Produces(MediaType.APPLICATION_JSON)\n+  @Path(\"sql\")\n+  @ApiOperation(value = \"Querying pinot\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "54f9bf9e19609f7ad3d0adf8d2df3159ce7ad291"}, "originalPosition": 70}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1MDc0NTU5OnYy", "diffSide": "RIGHT", "path": "pinot-clients/pinot-java-client/src/main/java/org/apache/pinot/client/ResultTableResultSet.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOFQxOTozNTozMlrOFbhoHQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOVQwMDoxMTowMlrOFbnqiA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDQwNjgxMw==", "bodyText": "Can we replace name and type with schema, and schema can be within metadata field. This way, we can add more metadata as needed.", "url": "https://github.com/apache/pinot/pull/4964#discussion_r364406813", "createdAt": "2020-01-08T19:35:32Z", "author": {"login": "mayankshriv"}, "path": "pinot-clients/pinot-java-client/src/main/java/org/apache/pinot/client/ResultTableResultSet.java", "diffHunk": "@@ -0,0 +1,106 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.client;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+\n+\n+/**\n+ * ResultSet which contains the ResultTable from the broker response of a sql query.\n+ */\n+class ResultTableResultSet extends AbstractResultSet {\n+  private JsonNode _rowsArray;\n+  private JsonNode _columnNamesArray;\n+  private JsonNode _columnDataTypesArray;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b4bbd995a084a0aff2461a510636a4046615492"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDUwNTczNg==", "bodyText": "I feel this is okay as is, because:\nThe purpose of these ResultSets is to get the fields. For a user using the pinot client, once the ResultTable gets wrapped into ResultSet, the ResultSet will be used directly for accessing data. It will not really be converted to other forms further. So this is just internal representation.\nFor metadata, this is easy to change later. That will only be necessary when more APIs are added to the ResultSet. The current set of APIs are answered fine with this structure.\nLmk if you think it's okay.", "url": "https://github.com/apache/pinot/pull/4964#discussion_r364505736", "createdAt": "2020-01-09T00:11:02Z", "author": {"login": "npawar"}, "path": "pinot-clients/pinot-java-client/src/main/java/org/apache/pinot/client/ResultTableResultSet.java", "diffHunk": "@@ -0,0 +1,106 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.client;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+\n+\n+/**\n+ * ResultSet which contains the ResultTable from the broker response of a sql query.\n+ */\n+class ResultTableResultSet extends AbstractResultSet {\n+  private JsonNode _rowsArray;\n+  private JsonNode _columnNamesArray;\n+  private JsonNode _columnDataTypesArray;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDQwNjgxMw=="}, "originalCommit": {"oid": "1b4bbd995a084a0aff2461a510636a4046615492"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1MzY0NTE2OnYy", "diffSide": "RIGHT", "path": "pinot-clients/pinot-java-client/src/main/java/org/apache/pinot/client/JsonAsyncHttpPinotClientTransport.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOVQxNzowOTowMVrOFb9POg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOVQxOToxMTo1MVrOFcAhpg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDg1OTE5NA==", "bodyText": "I feel this is not very intuitive as to why the url path has /query for PQL query format and /sql for SQL query format. May be both modes can have query prefix? I don't think we can change the current url format as that would be backward incompatible but for the SQL format, I think we should consider having /query/sql", "url": "https://github.com/apache/pinot/pull/4964#discussion_r364859194", "createdAt": "2020-01-09T17:09:01Z", "author": {"login": "siddharthteotia"}, "path": "pinot-clients/pinot-java-client/src/main/java/org/apache/pinot/client/JsonAsyncHttpPinotClientTransport.java", "diffHunk": "@@ -67,9 +67,16 @@ public BrokerResponse executeQuery(String brokerAddress, String query)\n   public Future<BrokerResponse> executePinotQueryAsync(String brokerAddress, final Request request) {\n     try {\n       ObjectNode json = JsonNodeFactory.instance.objectNode();\n-      json.put(request.getQueryFormat(), request.getQuery());\n-\n-      final String url = \"http://\" + brokerAddress + \"/query\";\n+      String queryFormat = request.getQueryFormat();\n+      json.put(queryFormat, request.getQuery());\n+\n+      final String url;\n+      if (queryFormat.equalsIgnoreCase(\"sql\")) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b4bbd995a084a0aff2461a510636a4046615492"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDg5MTUyOA==", "bodyText": "I had considered \"/query/sql\". But felt it was okay to go with just \"sql\", as we would eventually be getting rid of the \"/query\" endpoint.\nI don't have a strong preference either way. I can change it if majority think this one is better. I got a signoff on the issue #4962 for \"/sql\"", "url": "https://github.com/apache/pinot/pull/4964#discussion_r364891528", "createdAt": "2020-01-09T18:23:36Z", "author": {"login": "npawar"}, "path": "pinot-clients/pinot-java-client/src/main/java/org/apache/pinot/client/JsonAsyncHttpPinotClientTransport.java", "diffHunk": "@@ -67,9 +67,16 @@ public BrokerResponse executeQuery(String brokerAddress, String query)\n   public Future<BrokerResponse> executePinotQueryAsync(String brokerAddress, final Request request) {\n     try {\n       ObjectNode json = JsonNodeFactory.instance.objectNode();\n-      json.put(request.getQueryFormat(), request.getQuery());\n-\n-      final String url = \"http://\" + brokerAddress + \"/query\";\n+      String queryFormat = request.getQueryFormat();\n+      json.put(queryFormat, request.getQuery());\n+\n+      final String url;\n+      if (queryFormat.equalsIgnoreCase(\"sql\")) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDg1OTE5NA=="}, "originalCommit": {"oid": "1b4bbd995a084a0aff2461a510636a4046615492"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDkxMzA2Mg==", "bodyText": "changed thi to /query/sql", "url": "https://github.com/apache/pinot/pull/4964#discussion_r364913062", "createdAt": "2020-01-09T19:11:51Z", "author": {"login": "npawar"}, "path": "pinot-clients/pinot-java-client/src/main/java/org/apache/pinot/client/JsonAsyncHttpPinotClientTransport.java", "diffHunk": "@@ -67,9 +67,16 @@ public BrokerResponse executeQuery(String brokerAddress, String query)\n   public Future<BrokerResponse> executePinotQueryAsync(String brokerAddress, final Request request) {\n     try {\n       ObjectNode json = JsonNodeFactory.instance.objectNode();\n-      json.put(request.getQueryFormat(), request.getQuery());\n-\n-      final String url = \"http://\" + brokerAddress + \"/query\";\n+      String queryFormat = request.getQueryFormat();\n+      json.put(queryFormat, request.getQuery());\n+\n+      final String url;\n+      if (queryFormat.equalsIgnoreCase(\"sql\")) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDg1OTE5NA=="}, "originalCommit": {"oid": "1b4bbd995a084a0aff2461a510636a4046615492"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1MzY2NTk3OnYy", "diffSide": "RIGHT", "path": "pinot-clients/pinot-java-client/src/main/java/org/apache/pinot/client/ResultTableResultSet.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOVQxNzoxNjowMVrOFb9cJQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOVQxNzoxNjowMVrOFb9cJQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDg2MjUwMQ==", "bodyText": "(nit): should be final", "url": "https://github.com/apache/pinot/pull/4964#discussion_r364862501", "createdAt": "2020-01-09T17:16:01Z", "author": {"login": "siddharthteotia"}, "path": "pinot-clients/pinot-java-client/src/main/java/org/apache/pinot/client/ResultTableResultSet.java", "diffHunk": "@@ -0,0 +1,106 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.client;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+\n+\n+/**\n+ * ResultSet which contains the ResultTable from the broker response of a sql query.\n+ */\n+class ResultTableResultSet extends AbstractResultSet {\n+  private JsonNode _rowsArray;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b4bbd995a084a0aff2461a510636a4046615492"}, "originalPosition": 28}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3562, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}