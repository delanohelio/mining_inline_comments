{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTIyMTE0ODk4", "number": 6271, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QxODoyNjoxNlrOE6KHcA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QxODoyNjoxNlrOE6KHcA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5NDE4NjA4OnYy", "diffSide": "RIGHT", "path": "pinot-spi/src/main/java/org/apache/pinot/spi/config/ConfigUtils.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QxODoyNjoxNlrOH1DOXQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QyMTo0MjoxM1rOH1MoXQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTM4OTQwNQ==", "bodyText": "shall it be case insenstive or require all caps?", "url": "https://github.com/apache/pinot/pull/6271#discussion_r525389405", "createdAt": "2020-11-17T18:26:16Z", "author": {"login": "yupeng9"}, "path": "pinot-spi/src/main/java/org/apache/pinot/spi/config/ConfigUtils.java", "diffHunk": "@@ -0,0 +1,90 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.spi.config;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.node.ArrayNode;\n+import com.fasterxml.jackson.databind.node.JsonNodeFactory;\n+import com.fasterxml.jackson.databind.node.JsonNodeType;\n+import java.io.IOException;\n+import java.util.Iterator;\n+import java.util.Map;\n+import org.apache.pinot.spi.utils.JsonUtils;\n+\n+\n+public class ConfigUtils {\n+  private static final Map<String, String> ENVIRONMENT_VARIABLES = System.getenv();\n+\n+  /**\n+   * Apply environment variables to any given BaseJsonConfig.\n+   *\n+   * @return Config with environment variable applied.\n+   */\n+  public static <T extends BaseJsonConfig> T applyConfigWithEnvVariables(T config) {\n+    JsonNode jsonNode;\n+    try {\n+      jsonNode = applyConfigWithEnvVariables(config.toJsonNode());\n+    } catch (RuntimeException e) {\n+      throw new RuntimeException(String\n+          .format(\"Unable to apply environment variables on json config class [%s].\", config.getClass().getName()), e);\n+    }\n+    try {\n+      return (T) JsonUtils.jsonNodeToObject(jsonNode, config.getClass());\n+    } catch (IOException e) {\n+      throw new RuntimeException(String\n+          .format(\"Unable to read JsonConfig to class [%s] after applying environment variables, jsonConfig is: '%s'.\",\n+              config.getClass().getName(), jsonNode.toString()), e);\n+    }\n+  }\n+\n+  private static JsonNode applyConfigWithEnvVariables(JsonNode jsonNode) {\n+    final JsonNodeType nodeType = jsonNode.getNodeType();\n+    switch (nodeType) {\n+      case OBJECT:\n+        if (jsonNode.size() > 0) {\n+          Iterator<Map.Entry<String, JsonNode>> iterator = jsonNode.fields();\n+          while (iterator.hasNext()) {\n+            final Map.Entry<String, JsonNode> next = iterator.next();\n+            next.setValue(applyConfigWithEnvVariables(next.getValue()));\n+          }\n+        }\n+        break;\n+      case ARRAY:\n+        if (jsonNode.isArray()) {\n+          ArrayNode arrayNode = (ArrayNode) jsonNode;\n+          for (int i = 0; i < arrayNode.size(); i++) {\n+            JsonNode arrayElement = arrayNode.get(i);\n+            arrayNode.set(i, applyConfigWithEnvVariables(arrayElement));\n+          }\n+        }\n+        break;\n+      case STRING:\n+        final String field = jsonNode.asText();\n+        if (field.startsWith(\"${\") && field.endsWith(\"}\")) {\n+          final String envVarKey = field.substring(2, field.length() - 1);\n+          if (ENVIRONMENT_VARIABLES.containsKey(envVarKey)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "21dde94e7c639ec3b55fca73225834eb1dd885e1"}, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTQyOTc0OA==", "bodyText": "The names of environment variables are case-sensitive; by convention they are uppercase, so technically you can define env var: a and A with different values.", "url": "https://github.com/apache/pinot/pull/6271#discussion_r525429748", "createdAt": "2020-11-17T19:28:06Z", "author": {"login": "xiangfu0"}, "path": "pinot-spi/src/main/java/org/apache/pinot/spi/config/ConfigUtils.java", "diffHunk": "@@ -0,0 +1,90 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.spi.config;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.node.ArrayNode;\n+import com.fasterxml.jackson.databind.node.JsonNodeFactory;\n+import com.fasterxml.jackson.databind.node.JsonNodeType;\n+import java.io.IOException;\n+import java.util.Iterator;\n+import java.util.Map;\n+import org.apache.pinot.spi.utils.JsonUtils;\n+\n+\n+public class ConfigUtils {\n+  private static final Map<String, String> ENVIRONMENT_VARIABLES = System.getenv();\n+\n+  /**\n+   * Apply environment variables to any given BaseJsonConfig.\n+   *\n+   * @return Config with environment variable applied.\n+   */\n+  public static <T extends BaseJsonConfig> T applyConfigWithEnvVariables(T config) {\n+    JsonNode jsonNode;\n+    try {\n+      jsonNode = applyConfigWithEnvVariables(config.toJsonNode());\n+    } catch (RuntimeException e) {\n+      throw new RuntimeException(String\n+          .format(\"Unable to apply environment variables on json config class [%s].\", config.getClass().getName()), e);\n+    }\n+    try {\n+      return (T) JsonUtils.jsonNodeToObject(jsonNode, config.getClass());\n+    } catch (IOException e) {\n+      throw new RuntimeException(String\n+          .format(\"Unable to read JsonConfig to class [%s] after applying environment variables, jsonConfig is: '%s'.\",\n+              config.getClass().getName(), jsonNode.toString()), e);\n+    }\n+  }\n+\n+  private static JsonNode applyConfigWithEnvVariables(JsonNode jsonNode) {\n+    final JsonNodeType nodeType = jsonNode.getNodeType();\n+    switch (nodeType) {\n+      case OBJECT:\n+        if (jsonNode.size() > 0) {\n+          Iterator<Map.Entry<String, JsonNode>> iterator = jsonNode.fields();\n+          while (iterator.hasNext()) {\n+            final Map.Entry<String, JsonNode> next = iterator.next();\n+            next.setValue(applyConfigWithEnvVariables(next.getValue()));\n+          }\n+        }\n+        break;\n+      case ARRAY:\n+        if (jsonNode.isArray()) {\n+          ArrayNode arrayNode = (ArrayNode) jsonNode;\n+          for (int i = 0; i < arrayNode.size(); i++) {\n+            JsonNode arrayElement = arrayNode.get(i);\n+            arrayNode.set(i, applyConfigWithEnvVariables(arrayElement));\n+          }\n+        }\n+        break;\n+      case STRING:\n+        final String field = jsonNode.asText();\n+        if (field.startsWith(\"${\") && field.endsWith(\"}\")) {\n+          final String envVarKey = field.substring(2, field.length() - 1);\n+          if (ENVIRONMENT_VARIABLES.containsKey(envVarKey)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTM4OTQwNQ=="}, "originalCommit": {"oid": "21dde94e7c639ec3b55fca73225834eb1dd885e1"}, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTU0MzUxNw==", "bodyText": "yup, it makes sense to follow unix convention", "url": "https://github.com/apache/pinot/pull/6271#discussion_r525543517", "createdAt": "2020-11-17T21:42:13Z", "author": {"login": "yupeng9"}, "path": "pinot-spi/src/main/java/org/apache/pinot/spi/config/ConfigUtils.java", "diffHunk": "@@ -0,0 +1,90 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.spi.config;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.node.ArrayNode;\n+import com.fasterxml.jackson.databind.node.JsonNodeFactory;\n+import com.fasterxml.jackson.databind.node.JsonNodeType;\n+import java.io.IOException;\n+import java.util.Iterator;\n+import java.util.Map;\n+import org.apache.pinot.spi.utils.JsonUtils;\n+\n+\n+public class ConfigUtils {\n+  private static final Map<String, String> ENVIRONMENT_VARIABLES = System.getenv();\n+\n+  /**\n+   * Apply environment variables to any given BaseJsonConfig.\n+   *\n+   * @return Config with environment variable applied.\n+   */\n+  public static <T extends BaseJsonConfig> T applyConfigWithEnvVariables(T config) {\n+    JsonNode jsonNode;\n+    try {\n+      jsonNode = applyConfigWithEnvVariables(config.toJsonNode());\n+    } catch (RuntimeException e) {\n+      throw new RuntimeException(String\n+          .format(\"Unable to apply environment variables on json config class [%s].\", config.getClass().getName()), e);\n+    }\n+    try {\n+      return (T) JsonUtils.jsonNodeToObject(jsonNode, config.getClass());\n+    } catch (IOException e) {\n+      throw new RuntimeException(String\n+          .format(\"Unable to read JsonConfig to class [%s] after applying environment variables, jsonConfig is: '%s'.\",\n+              config.getClass().getName(), jsonNode.toString()), e);\n+    }\n+  }\n+\n+  private static JsonNode applyConfigWithEnvVariables(JsonNode jsonNode) {\n+    final JsonNodeType nodeType = jsonNode.getNodeType();\n+    switch (nodeType) {\n+      case OBJECT:\n+        if (jsonNode.size() > 0) {\n+          Iterator<Map.Entry<String, JsonNode>> iterator = jsonNode.fields();\n+          while (iterator.hasNext()) {\n+            final Map.Entry<String, JsonNode> next = iterator.next();\n+            next.setValue(applyConfigWithEnvVariables(next.getValue()));\n+          }\n+        }\n+        break;\n+      case ARRAY:\n+        if (jsonNode.isArray()) {\n+          ArrayNode arrayNode = (ArrayNode) jsonNode;\n+          for (int i = 0; i < arrayNode.size(); i++) {\n+            JsonNode arrayElement = arrayNode.get(i);\n+            arrayNode.set(i, applyConfigWithEnvVariables(arrayElement));\n+          }\n+        }\n+        break;\n+      case STRING:\n+        final String field = jsonNode.asText();\n+        if (field.startsWith(\"${\") && field.endsWith(\"}\")) {\n+          final String envVarKey = field.substring(2, field.length() - 1);\n+          if (ENVIRONMENT_VARIABLES.containsKey(envVarKey)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTM4OTQwNQ=="}, "originalCommit": {"oid": "21dde94e7c639ec3b55fca73225834eb1dd885e1"}, "originalPosition": 81}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3138, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}