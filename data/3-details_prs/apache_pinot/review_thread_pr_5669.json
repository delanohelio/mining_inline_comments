{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ2NTUzOTc1", "number": 5669, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQwMDo1MDo0N1rOEMs_Lg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQwMDo1MTowOFrOEMs_bg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxNzU1NDM4OnYy", "diffSide": "RIGHT", "path": "pinot-spi/src/main/java/org/apache/pinot/spi/filesystem/PinotFSFactory.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQwMDo1MDo0N1rOGu98-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQwNDoxNzoxOVrOGvBGYQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTkwMjcxNQ==", "bodyText": "I see all non-test callers of this api are calling it with fsConfig. Is that expected? Would be good to add javadoc based on what we find.", "url": "https://github.com/apache/pinot/pull/5669#discussion_r451902715", "createdAt": "2020-07-09T00:50:47Z", "author": {"login": "mayankshriv"}, "path": "pinot-spi/src/main/java/org/apache/pinot/spi/filesystem/PinotFSFactory.java", "diffHunk": "@@ -60,19 +60,19 @@ public static void register(String scheme, String fsClassName, PinotConfiguratio\n     }\n   }\n \n-  public static void init(PinotConfiguration fsConfig) {\n+  public static void init(PinotConfiguration config) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d9745c9a0f3f809bdeff7830be2ad92e28782367"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTk1NDI3Mw==", "bodyText": "its called with fsFactoryConfig, renamed the variable.", "url": "https://github.com/apache/pinot/pull/5669#discussion_r451954273", "createdAt": "2020-07-09T04:17:19Z", "author": {"login": "kishoreg"}, "path": "pinot-spi/src/main/java/org/apache/pinot/spi/filesystem/PinotFSFactory.java", "diffHunk": "@@ -60,19 +60,19 @@ public static void register(String scheme, String fsClassName, PinotConfiguratio\n     }\n   }\n \n-  public static void init(PinotConfiguration fsConfig) {\n+  public static void init(PinotConfiguration config) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTkwMjcxNQ=="}, "originalCommit": {"oid": "d9745c9a0f3f809bdeff7830be2ad92e28782367"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxNzU1NTAyOnYy", "diffSide": "RIGHT", "path": "pinot-spi/src/main/java/org/apache/pinot/spi/filesystem/PinotFSFactory.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQwMDo1MTowOFrOGu99Uw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQwNDoxNzozMVrOGvBGmQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTkwMjgwMw==", "bodyText": "Let's not log the configs probably as they might contain sensitive content (e.g. password)", "url": "https://github.com/apache/pinot/pull/5669#discussion_r451902803", "createdAt": "2020-07-09T00:51:08Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-spi/src/main/java/org/apache/pinot/spi/filesystem/PinotFSFactory.java", "diffHunk": "@@ -60,19 +60,19 @@ public static void register(String scheme, String fsClassName, PinotConfiguratio\n     }\n   }\n \n-  public static void init(PinotConfiguration fsConfig) {\n+  public static void init(PinotConfiguration config) {\n     // Get schemes and their respective classes\n-    PinotConfiguration schemesConfiguration = fsConfig.subset(CLASS);\n+    PinotConfiguration schemesConfiguration = config.subset(CLASS);\n     List<String> schemes = schemesConfiguration.getKeys();\n     if (!schemes.isEmpty()) {\n       LOGGER.info(\"Did not find any fs classes in the configuration\");\n     }\n     \n     for(String scheme : schemes){\n-      String fsClassName = (String) schemesConfiguration.getProperty(scheme);\n-      \n-      LOGGER.info(\"Got scheme {}, classname {}, starting to initialize\", scheme, fsClassName);\n-      register(scheme, fsClassName, schemesConfiguration.subset(scheme));\n+      String fsClassName = schemesConfiguration.getProperty(scheme);\n+      PinotConfiguration fsConfiguration = config.subset(scheme);\n+      LOGGER.info(\"Got scheme {}, initializing class {} with config : {} \", scheme, fsClassName, fsConfiguration.toMap());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d9745c9a0f3f809bdeff7830be2ad92e28782367"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTk1NDMyOQ==", "bodyText": "fixed", "url": "https://github.com/apache/pinot/pull/5669#discussion_r451954329", "createdAt": "2020-07-09T04:17:31Z", "author": {"login": "kishoreg"}, "path": "pinot-spi/src/main/java/org/apache/pinot/spi/filesystem/PinotFSFactory.java", "diffHunk": "@@ -60,19 +60,19 @@ public static void register(String scheme, String fsClassName, PinotConfiguratio\n     }\n   }\n \n-  public static void init(PinotConfiguration fsConfig) {\n+  public static void init(PinotConfiguration config) {\n     // Get schemes and their respective classes\n-    PinotConfiguration schemesConfiguration = fsConfig.subset(CLASS);\n+    PinotConfiguration schemesConfiguration = config.subset(CLASS);\n     List<String> schemes = schemesConfiguration.getKeys();\n     if (!schemes.isEmpty()) {\n       LOGGER.info(\"Did not find any fs classes in the configuration\");\n     }\n     \n     for(String scheme : schemes){\n-      String fsClassName = (String) schemesConfiguration.getProperty(scheme);\n-      \n-      LOGGER.info(\"Got scheme {}, classname {}, starting to initialize\", scheme, fsClassName);\n-      register(scheme, fsClassName, schemesConfiguration.subset(scheme));\n+      String fsClassName = schemesConfiguration.getProperty(scheme);\n+      PinotConfiguration fsConfiguration = config.subset(scheme);\n+      LOGGER.info(\"Got scheme {}, initializing class {} with config : {} \", scheme, fsClassName, fsConfiguration.toMap());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTkwMjgwMw=="}, "originalCommit": {"oid": "d9745c9a0f3f809bdeff7830be2ad92e28782367"}, "originalPosition": 21}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4082, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}