{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg3NjA0ODYw", "number": 6021, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQwMDoyMjo1OVrOEj1ySA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQwMDoyMjo1OVrOEj1ySA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2MDE2ODQwOnYy", "diffSide": "RIGHT", "path": "pinot-core/src/main/java/org/apache/pinot/core/segment/processing/framework/SegmentMapper.java", "isResolved": false, "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQwMDoyMjo1OVrOHSbrFQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxODo1ODoxMVrOHS_N8Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTA4OTgxMw==", "bodyText": "The \"_\" here is very significant, right? It cannot be changed, and has to be used the same way across multiple components. Could you please declare it as. a final string in some Constants class as a partition separator or something?\nAnd then re-use in tests\nthanks", "url": "https://github.com/apache/pinot/pull/6021#discussion_r489089813", "createdAt": "2020-09-16T00:22:59Z", "author": {"login": "mcvsubbu"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/segment/processing/framework/SegmentMapper.java", "diffHunk": "@@ -100,8 +110,11 @@ public void map()\n       }\n \n       // Partitioning\n-      // TODO: 2 step partitioner. 1) Apply custom partitioner 2) Apply table config partitioner. Combine both to get final partition.\n-      String partition = _partitioner.getPartition(reusableRow);\n+      int p = 0;\n+      for (Partitioner partitioner : _partitioners) {\n+        partitions[p++] = partitioner.getPartition(reusableRow);\n+      }\n+      String partition = StringUtil.join(\"_\", partitions);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "639c4c8b6f7e147365e7a18a088e26338f4d0e5f"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTA5MDk1Mw==", "bodyText": "I don't think the framework relies on this to extract the partition info. But agree on introducing a constant for it", "url": "https://github.com/apache/pinot/pull/6021#discussion_r489090953", "createdAt": "2020-09-16T00:27:12Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/segment/processing/framework/SegmentMapper.java", "diffHunk": "@@ -100,8 +110,11 @@ public void map()\n       }\n \n       // Partitioning\n-      // TODO: 2 step partitioner. 1) Apply custom partitioner 2) Apply table config partitioner. Combine both to get final partition.\n-      String partition = _partitioner.getPartition(reusableRow);\n+      int p = 0;\n+      for (Partitioner partitioner : _partitioners) {\n+        partitions[p++] = partitioner.getPartition(reusableRow);\n+      }\n+      String partition = StringUtil.join(\"_\", partitions);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTA4OTgxMw=="}, "originalCommit": {"oid": "639c4c8b6f7e147365e7a18a088e26338f4d0e5f"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTEwMjMxOA==", "bodyText": "Actually, it is not significant at all. It can be changed, and is not used by any other components. It won't even matter beyond the scope of that joiner line. And hence I don't think it needs to be scoped out of this class, or even out of this method.", "url": "https://github.com/apache/pinot/pull/6021#discussion_r489102318", "createdAt": "2020-09-16T01:09:31Z", "author": {"login": "npawar"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/segment/processing/framework/SegmentMapper.java", "diffHunk": "@@ -100,8 +110,11 @@ public void map()\n       }\n \n       // Partitioning\n-      // TODO: 2 step partitioner. 1) Apply custom partitioner 2) Apply table config partitioner. Combine both to get final partition.\n-      String partition = _partitioner.getPartition(reusableRow);\n+      int p = 0;\n+      for (Partitioner partitioner : _partitioners) {\n+        partitions[p++] = partitioner.getPartition(reusableRow);\n+      }\n+      String partition = StringUtil.join(\"_\", partitions);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTA4OTgxMw=="}, "originalCommit": {"oid": "639c4c8b6f7e147365e7a18a088e26338f4d0e5f"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTEzODAxMw==", "bodyText": "We are partitioning the data, and the brokers have to construct the same partition id in the same order of columns and  with the same partition function right?\nAlso, what is the use case for partitioning on more than one column?", "url": "https://github.com/apache/pinot/pull/6021#discussion_r489138013", "createdAt": "2020-09-16T03:22:57Z", "author": {"login": "mcvsubbu"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/segment/processing/framework/SegmentMapper.java", "diffHunk": "@@ -100,8 +110,11 @@ public void map()\n       }\n \n       // Partitioning\n-      // TODO: 2 step partitioner. 1) Apply custom partitioner 2) Apply table config partitioner. Combine both to get final partition.\n-      String partition = _partitioner.getPartition(reusableRow);\n+      int p = 0;\n+      for (Partitioner partitioner : _partitioners) {\n+        partitions[p++] = partitioner.getPartition(reusableRow);\n+      }\n+      String partition = StringUtil.join(\"_\", partitions);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTA4OTgxMw=="}, "originalCommit": {"oid": "639c4c8b6f7e147365e7a18a088e26338f4d0e5f"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTE4Mjc2Mw==", "bodyText": "Use case: say data in input segments is spread across 3 days. In the resulting segments, we want to create a segment for each day. Additionally, we want partitioning on some id column for query purposes.\nPartitioning by time column is first step. This doesn't affect segment metadata or broker routing. This is simply used by the framework, and it's scope ends with the framework. It's merely helping create date aligned input files for Segment generation stage.\nPartitioning by id column is second step. This is for queries. This will be whatever is in the table config. Only this partition will get set in the segment metadata. And even that will happen during segment creation.\nSee this comment and discussion:#5934 (comment)", "url": "https://github.com/apache/pinot/pull/6021#discussion_r489182763", "createdAt": "2020-09-16T06:02:01Z", "author": {"login": "npawar"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/segment/processing/framework/SegmentMapper.java", "diffHunk": "@@ -100,8 +110,11 @@ public void map()\n       }\n \n       // Partitioning\n-      // TODO: 2 step partitioner. 1) Apply custom partitioner 2) Apply table config partitioner. Combine both to get final partition.\n-      String partition = _partitioner.getPartition(reusableRow);\n+      int p = 0;\n+      for (Partitioner partitioner : _partitioners) {\n+        partitions[p++] = partitioner.getPartition(reusableRow);\n+      }\n+      String partition = StringUtil.join(\"_\", partitions);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTA4OTgxMw=="}, "originalCommit": {"oid": "639c4c8b6f7e147365e7a18a088e26338f4d0e5f"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTU1MTY0Ng==", "bodyText": "Maybe I am missing something, I will try to find it in the design document.\n\nIt seems to me that there may be at most 2 partitioners, so is making that a Pair better? Or, there should be a comment and an assert some place that the size is two.\nThe word partition confused me into thinking that we are somehow respecting partitioning of data using a partition key with underscores (with brokers constructing some partition keys). That is clearly not the case here. Maybe rename this as a splitKey instead of partition?", "url": "https://github.com/apache/pinot/pull/6021#discussion_r489551646", "createdAt": "2020-09-16T16:01:02Z", "author": {"login": "mcvsubbu"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/segment/processing/framework/SegmentMapper.java", "diffHunk": "@@ -100,8 +110,11 @@ public void map()\n       }\n \n       // Partitioning\n-      // TODO: 2 step partitioner. 1) Apply custom partitioner 2) Apply table config partitioner. Combine both to get final partition.\n-      String partition = _partitioner.getPartition(reusableRow);\n+      int p = 0;\n+      for (Partitioner partitioner : _partitioners) {\n+        partitions[p++] = partitioner.getPartition(reusableRow);\n+      }\n+      String partition = StringUtil.join(\"_\", partitions);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTA4OTgxMw=="}, "originalCommit": {"oid": "639c4c8b6f7e147365e7a18a088e26338f4d0e5f"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTY3MjE3Nw==", "bodyText": "Practically, for the use case I described, it will be 2. But it need not be (there could be more custom logic). Also the json config spec has List of partitions, so I just continued it as List.\nAll these things are not set in stone as of now. We will be continuosly re-evaluating, optimizing and editing this framework, as we begin using it (for minion, and merge). It is difficult to predict right now and I prefer to not introduce restrictions on number of partitioners.", "url": "https://github.com/apache/pinot/pull/6021#discussion_r489672177", "createdAt": "2020-09-16T18:58:11Z", "author": {"login": "npawar"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/segment/processing/framework/SegmentMapper.java", "diffHunk": "@@ -100,8 +110,11 @@ public void map()\n       }\n \n       // Partitioning\n-      // TODO: 2 step partitioner. 1) Apply custom partitioner 2) Apply table config partitioner. Combine both to get final partition.\n-      String partition = _partitioner.getPartition(reusableRow);\n+      int p = 0;\n+      for (Partitioner partitioner : _partitioners) {\n+        partitions[p++] = partitioner.getPartition(reusableRow);\n+      }\n+      String partition = StringUtil.join(\"_\", partitions);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTA4OTgxMw=="}, "originalCommit": {"oid": "639c4c8b6f7e147365e7a18a088e26338f4d0e5f"}, "originalPosition": 68}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3889, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}