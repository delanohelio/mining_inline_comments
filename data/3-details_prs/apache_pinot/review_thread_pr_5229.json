{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAxMDgzNjc2", "number": 5229, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQyMTo0MToxOVrODwLQ4Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQyMTo0MjozNlrODwLSLg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxODQyNzg1OnYy", "diffSide": "RIGHT", "path": "pinot-broker/src/main/java/org/apache/pinot/broker/api/resources/PinotClientRequest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQyMTo0MToxOVrOGDCApg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQyMTo0MToxOVrOGDCApg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTgzMTg0Ng==", "bodyText": "(format) re-order the imports", "url": "https://github.com/apache/pinot/pull/5229#discussion_r405831846", "createdAt": "2020-04-08T21:41:19Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-broker/src/main/java/org/apache/pinot/broker/api/resources/PinotClientRequest.java", "diffHunk": "@@ -32,18 +32,25 @@\n import javax.ws.rs.Produces;\n import javax.ws.rs.QueryParam;\n import javax.ws.rs.WebApplicationException;\n+import javax.ws.rs.container.AsyncResponse;\n+import javax.ws.rs.container.Suspended;\n import javax.ws.rs.core.MediaType;\n import javax.ws.rs.core.Response;\n import org.apache.pinot.broker.api.RequestStatistics;\n import org.apache.pinot.broker.requesthandler.BrokerRequestHandler;\n+import org.apache.pinot.broker.requesthandler.PinotQueryRequest;\n import org.apache.pinot.common.metrics.BrokerMeter;\n import org.apache.pinot.common.metrics.BrokerMetrics;\n import org.apache.pinot.common.response.BrokerResponse;\n+import org.apache.pinot.common.utils.CommonConstants;\n import org.apache.pinot.common.utils.CommonConstants.Broker.Request;\n import org.apache.pinot.spi.utils.JsonUtils;\n+import org.glassfish.jersey.server.ManagedAsync;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n+import java.util.concurrent.TimeUnit;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b90dec975ea6066ce84f89b039d53d01e615926d"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxODQyOTkyOnYy", "diffSide": "RIGHT", "path": "pinot-broker/src/main/java/org/apache/pinot/broker/api/resources/PinotClientRequest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQyMTo0MjowNlrOGDCCAg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQyMTo0MjowNlrOGDCCAg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTgzMjE5NA==", "bodyText": "(convention) remove the final key as we usually don't mark argument as final. Same for other methods.", "url": "https://github.com/apache/pinot/pull/5229#discussion_r405832194", "createdAt": "2020-04-08T21:42:06Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-broker/src/main/java/org/apache/pinot/broker/api/resources/PinotClientRequest.java", "diffHunk": "@@ -57,15 +64,17 @@\n   private BrokerMetrics brokerMetrics;\n \n   @GET\n+  @ManagedAsync\n   @Produces(MediaType.APPLICATION_JSON)\n   @Path(\"query\")\n   @ApiOperation(value = \"Querying pinot\")\n   @ApiResponses(value = {@ApiResponse(code = 200, message = \"Query response\"), @ApiResponse(code = 500, message = \"Internal Server Error\")})\n-  public String processQueryGet(\n+  public void processQueryGet(\n       // Query param \"bql\" is for backward compatibility\n       @ApiParam(value = \"Query\", required = true) @QueryParam(\"bql\") String query,\n       @ApiParam(value = \"Trace enabled\") @QueryParam(Request.TRACE) String traceEnabled,\n-      @ApiParam(value = \"Debug options\") @QueryParam(Request.DEBUG_OPTIONS) String debugOptions) {\n+      @ApiParam(value = \"Debug options\") @QueryParam(Request.DEBUG_OPTIONS) String debugOptions,\n+      @Suspended final AsyncResponse asyncResponse) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b90dec975ea6066ce84f89b039d53d01e615926d"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxODQzMTE4OnYy", "diffSide": "RIGHT", "path": "pinot-broker/src/main/java/org/apache/pinot/broker/api/resources/PinotClientRequest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQyMTo0MjozNlrOGDCCyA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQyMTo1NTozOVrOGDCZnw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTgzMjM5Mg==", "bodyText": "What is this sleep for?", "url": "https://github.com/apache/pinot/pull/5229#discussion_r405832392", "createdAt": "2020-04-08T21:42:36Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-broker/src/main/java/org/apache/pinot/broker/api/resources/PinotClientRequest.java", "diffHunk": "@@ -76,24 +85,28 @@ public String processQueryGet(\n         requestJson.put(Request.DEBUG_OPTIONS, debugOptions);\n       }\n       BrokerResponse brokerResponse = requestHandler.handleRequest(requestJson, null, new RequestStatistics());\n-      return brokerResponse.toJsonString();\n+      asyncResponse.resume(brokerResponse.toJsonString());\n     } catch (Exception e) {\n       LOGGER.error(\"Caught exception while processing GET request\", e);\n       brokerMetrics.addMeteredGlobalValue(BrokerMeter.UNCAUGHT_GET_EXCEPTIONS, 1L);\n-      throw new WebApplicationException(e, Response.Status.INTERNAL_SERVER_ERROR);\n+      asyncResponse.resume(new WebApplicationException(e, Response.Status.INTERNAL_SERVER_ERROR));\n     }\n   }\n \n   @POST\n+  @ManagedAsync\n   @Produces(MediaType.APPLICATION_JSON)\n   @Path(\"query\")\n   @ApiOperation(value = \"Querying pinot\")\n   @ApiResponses(value = {@ApiResponse(code = 200, message = \"Query response\"), @ApiResponse(code = 500, message = \"Internal Server Error\")})\n-  public String processQueryPost(String query) {\n+  public void processQueryPost(String query, @Suspended final AsyncResponse asyncResponse) {\n     try {\n       JsonNode requestJson = JsonUtils.stringToJsonNode(query);\n+      if (requestJson.has(\"trace\")) {\n+        TimeUnit.SECONDS.sleep(15);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b90dec975ea6066ce84f89b039d53d01e615926d"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTgzODIzOQ==", "bodyText": "ops, left over from my previous testing and it is supposed to be removed", "url": "https://github.com/apache/pinot/pull/5229#discussion_r405838239", "createdAt": "2020-04-08T21:55:39Z", "author": {"login": "jamesyfshao"}, "path": "pinot-broker/src/main/java/org/apache/pinot/broker/api/resources/PinotClientRequest.java", "diffHunk": "@@ -76,24 +85,28 @@ public String processQueryGet(\n         requestJson.put(Request.DEBUG_OPTIONS, debugOptions);\n       }\n       BrokerResponse brokerResponse = requestHandler.handleRequest(requestJson, null, new RequestStatistics());\n-      return brokerResponse.toJsonString();\n+      asyncResponse.resume(brokerResponse.toJsonString());\n     } catch (Exception e) {\n       LOGGER.error(\"Caught exception while processing GET request\", e);\n       brokerMetrics.addMeteredGlobalValue(BrokerMeter.UNCAUGHT_GET_EXCEPTIONS, 1L);\n-      throw new WebApplicationException(e, Response.Status.INTERNAL_SERVER_ERROR);\n+      asyncResponse.resume(new WebApplicationException(e, Response.Status.INTERNAL_SERVER_ERROR));\n     }\n   }\n \n   @POST\n+  @ManagedAsync\n   @Produces(MediaType.APPLICATION_JSON)\n   @Path(\"query\")\n   @ApiOperation(value = \"Querying pinot\")\n   @ApiResponses(value = {@ApiResponse(code = 200, message = \"Query response\"), @ApiResponse(code = 500, message = \"Internal Server Error\")})\n-  public String processQueryPost(String query) {\n+  public void processQueryPost(String query, @Suspended final AsyncResponse asyncResponse) {\n     try {\n       JsonNode requestJson = JsonUtils.stringToJsonNode(query);\n+      if (requestJson.has(\"trace\")) {\n+        TimeUnit.SECONDS.sleep(15);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTgzMjM5Mg=="}, "originalCommit": {"oid": "b90dec975ea6066ce84f89b039d53d01e615926d"}, "originalPosition": 71}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3375, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}