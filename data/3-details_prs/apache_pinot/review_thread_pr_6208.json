{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTExOTM1Njc0", "number": 6208, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQwMTo0NTowMlrOEzEX1w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMVQwMzoxMzozMlrOE0Gmdw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxOTg0NDcxOnYy", "diffSide": "RIGHT", "path": "pinot-broker/src/main/java/org/apache/pinot/broker/routing/RoutingManager.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQwMTo0NTowMlrOHqECyA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxOTo0NDowOVrOHqr0_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzg2ODQ4OA==", "bodyText": "noinspection -> No inspection", "url": "https://github.com/apache/pinot/pull/6208#discussion_r513868488", "createdAt": "2020-10-29T01:45:02Z", "author": {"login": "yupeng9"}, "path": "pinot-broker/src/main/java/org/apache/pinot/broker/routing/RoutingManager.java", "diffHunk": "@@ -284,6 +278,7 @@ private static boolean isInstanceEnabled(ZNRecord instanceConfigZNRecord) {\n     if (\"true\".equals(instanceConfigZNRecord.getSimpleField(CommonConstants.Helix.IS_SHUTDOWN_IN_PROGRESS))) {\n       return false;\n     }\n+    //noinspection RedundantIfStatement", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "06f959d11cc3544634beb7cc0d661bc3327fd627"}, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDUwNDI3OQ==", "bodyText": "This is the fixed comment to disable this IDE inspection", "url": "https://github.com/apache/pinot/pull/6208#discussion_r514504279", "createdAt": "2020-10-29T19:13:37Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-broker/src/main/java/org/apache/pinot/broker/routing/RoutingManager.java", "diffHunk": "@@ -284,6 +278,7 @@ private static boolean isInstanceEnabled(ZNRecord instanceConfigZNRecord) {\n     if (\"true\".equals(instanceConfigZNRecord.getSimpleField(CommonConstants.Helix.IS_SHUTDOWN_IN_PROGRESS))) {\n       return false;\n     }\n+    //noinspection RedundantIfStatement", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzg2ODQ4OA=="}, "originalCommit": {"oid": "06f959d11cc3544634beb7cc0d661bc3327fd627"}, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDUyMDMxNw==", "bodyText": "ohh, i see", "url": "https://github.com/apache/pinot/pull/6208#discussion_r514520317", "createdAt": "2020-10-29T19:44:09Z", "author": {"login": "yupeng9"}, "path": "pinot-broker/src/main/java/org/apache/pinot/broker/routing/RoutingManager.java", "diffHunk": "@@ -284,6 +278,7 @@ private static boolean isInstanceEnabled(ZNRecord instanceConfigZNRecord) {\n     if (\"true\".equals(instanceConfigZNRecord.getSimpleField(CommonConstants.Helix.IS_SHUTDOWN_IN_PROGRESS))) {\n       return false;\n     }\n+    //noinspection RedundantIfStatement", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzg2ODQ4OA=="}, "originalCommit": {"oid": "06f959d11cc3544634beb7cc0d661bc3327fd627"}, "originalPosition": 78}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxOTg1Mzc4OnYy", "diffSide": "RIGHT", "path": "pinot-broker/src/main/java/org/apache/pinot/broker/routing/instanceselector/BaseInstanceSelector.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQwMTo0ODo1OVrOHqEIsA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxOToxNDo1MlrOHqq5Dw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzg3MDAwMA==", "bodyText": "onlineSegments can be derived from idealState ?", "url": "https://github.com/apache/pinot/pull/6208#discussion_r513870000", "createdAt": "2020-10-29T01:48:59Z", "author": {"login": "yupeng9"}, "path": "pinot-broker/src/main/java/org/apache/pinot/broker/routing/instanceselector/BaseInstanceSelector.java", "diffHunk": "@@ -126,47 +128,28 @@ public void onInstancesChange(Set<String> enabledInstances, List<String> changed\n    * {@inheritDoc}\n    *\n    * <p>Updates the cached maps ({@code segmentToOnlineInstancesMap}, {@code segmentToOfflineInstancesMap} and\n-   * {@code instanceToSegmentsMap}) based on the given ExternalView and re-calculates\n-   * {@code segmentToEnabledInstancesMap} and {@code unavailableSegments} based on the cached states.\n+   * {@code instanceToSegmentsMap}) and re-calculates {@code segmentToEnabledInstancesMap} and\n+   * {@code unavailableSegments} based on the cached states.\n    */\n   @Override\n-  public void onExternalViewChange(ExternalView externalView, Set<String> onlineSegments) {\n-    Map<String, Map<String, String>> segmentAssignment = externalView.getRecord().getMapFields();\n-    int numSegments = segmentAssignment.size();\n-    _segmentToOnlineInstancesMap = new HashMap<>(HashUtil.getHashMapCapacity(numSegments));\n-    _segmentToOfflineInstancesMap = new HashMap<>(HashUtil.getHashMapCapacity(numSegments));\n+  public void onExternalViewChange(ExternalView externalView, IdealState idealState, Set<String> onlineSegments) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "06f959d11cc3544634beb7cc0d661bc3327fd627"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDUwNDk3NQ==", "bodyText": "onlineSegments are derived from the idealState, but also filtered by the pre-selector, so we need to pass both of them", "url": "https://github.com/apache/pinot/pull/6208#discussion_r514504975", "createdAt": "2020-10-29T19:14:52Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-broker/src/main/java/org/apache/pinot/broker/routing/instanceselector/BaseInstanceSelector.java", "diffHunk": "@@ -126,47 +128,28 @@ public void onInstancesChange(Set<String> enabledInstances, List<String> changed\n    * {@inheritDoc}\n    *\n    * <p>Updates the cached maps ({@code segmentToOnlineInstancesMap}, {@code segmentToOfflineInstancesMap} and\n-   * {@code instanceToSegmentsMap}) based on the given ExternalView and re-calculates\n-   * {@code segmentToEnabledInstancesMap} and {@code unavailableSegments} based on the cached states.\n+   * {@code instanceToSegmentsMap}) and re-calculates {@code segmentToEnabledInstancesMap} and\n+   * {@code unavailableSegments} based on the cached states.\n    */\n   @Override\n-  public void onExternalViewChange(ExternalView externalView, Set<String> onlineSegments) {\n-    Map<String, Map<String, String>> segmentAssignment = externalView.getRecord().getMapFields();\n-    int numSegments = segmentAssignment.size();\n-    _segmentToOnlineInstancesMap = new HashMap<>(HashUtil.getHashMapCapacity(numSegments));\n-    _segmentToOfflineInstancesMap = new HashMap<>(HashUtil.getHashMapCapacity(numSegments));\n+  public void onExternalViewChange(ExternalView externalView, IdealState idealState, Set<String> onlineSegments) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzg3MDAwMA=="}, "originalCommit": {"oid": "06f959d11cc3544634beb7cc0d661bc3327fd627"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyMDUzMTc5OnYy", "diffSide": "RIGHT", "path": "pinot-broker/src/main/java/org/apache/pinot/broker/routing/instanceselector/StrictReplicaGroupInstanceSelector.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQwNToyOToxNVrOHqLJJA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQwMDoxMzowNlrOHqy-nw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzk4NDgwNA==", "bodyText": "high-level comment, since this is to calculate the map based on the coarse-grained unit (i.e. replica group) instead of the segment, have you considered mapping the online segments to the replica groups first, and then use the groups for selection?", "url": "https://github.com/apache/pinot/pull/6208#discussion_r513984804", "createdAt": "2020-10-29T05:29:15Z", "author": {"login": "yupeng9"}, "path": "pinot-broker/src/main/java/org/apache/pinot/broker/routing/instanceselector/StrictReplicaGroupInstanceSelector.java", "diffHunk": "@@ -0,0 +1,179 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.broker.routing.instanceselector;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.TreeSet;\n+import org.apache.helix.model.ExternalView;\n+import org.apache.helix.model.IdealState;\n+import org.apache.pinot.common.metrics.BrokerMetrics;\n+import org.apache.pinot.common.utils.CommonConstants.Helix.StateModel.SegmentStateModel;\n+import org.apache.pinot.common.utils.HashUtil;\n+\n+\n+/**\n+ * Instance selector for strict replica-group routing strategy.\n+ *\n+ * <pre>\n+ * The strict replica-group routing strategy always routes the query to the instances within the same replica-group.\n+ * (Note that the replica-group information is derived from the ideal state of the table, where the instances are sorted\n+ * alphabetically in the instance state map, so the replica-groups in the instance selector might not match the\n+ * replica-groups in the instance partitions.) The instances in a replica-group should have all the online segments\n+ * (segments with ONLINE/CONSUMING instances in the ideal state and selected by the pre-selector) available\n+ * (ONLINE/CONSUMING in the external view) in order to serve queries. If any segment is unavailable in the\n+ * replica-group, we mark the whole replica-group down and not serve queries with this replica-group.\n+ *\n+ * The selection algorithm is the same as {@link ReplicaGroupInstanceSelector}, and will always evenly distribute the\n+ * traffic to all replica-groups that have all online segments available.\n+ *\n+ * The algorithm relies on the mirror segment assignment from replica-group segment assignment strategy. With mirror\n+ * segment assignment, any server in one replica-group will always have a corresponding server in other replica-groups\n+ * that have the same segments assigned. For example, if S1 is a server in replica-group 1, and it has mirror server\n+ * S2 in replica-group 2 and S3 in replica-group 3. All segments assigned to S1 will also be assigned to S2 and S3. In\n+ * stable scenario (external view matches ideal state), all segments assigned to S1 will have the same enabled instances\n+ * of [S1, S2, S3] sorted (in alphabetical order). If we always pick the same index of enabled instances for all\n+ * segments, only one of S1, S2, S3 will be picked, and all the segments are processed by the same server. In\n+ * transitioning/error scenario (external view does not match ideal state), if a segment is down on S1, we mark all\n+ * segments with the same assignment ([S1, S2, S3]) down on S1 to ensure that we always route the segments to the same\n+ * replica-group.\n+ * </pre>\n+ */\n+public class StrictReplicaGroupInstanceSelector extends ReplicaGroupInstanceSelector {\n+\n+  public StrictReplicaGroupInstanceSelector(String tableNameWithType, BrokerMetrics brokerMetrics) {\n+    super(tableNameWithType, brokerMetrics);\n+  }\n+\n+  /**\n+   * {@inheritDoc}\n+   *\n+   * <pre>\n+   * The maps are calculated in the following steps to meet the strict replica-group guarantee:\n+   *   1. Create a map from online segment to set of instances hosting the segment based on the ideal state\n+   *   2. Gather the online and offline instances for each online segment from the external view\n+   *   3. Compare the instances from the ideal state and the external view and gather the unavailable instances for each\n+   *      set of instances\n+   *   4. Exclude the unavailable instances from the online instances map\n+   * </pre>\n+   */\n+  @Override\n+  void updateSegmentMaps(ExternalView externalView, IdealState idealState, Set<String> onlineSegments,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "06f959d11cc3544634beb7cc0d661bc3327fd627"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDUwODc3Nw==", "bodyText": "Good question. The reason why we do not pre-group the instances but use the same index to pick the instance for each segment is because the replica-group derived from the ideal state might not be the same as the replica-group from the instance assignment. If we pre-group the instances, when we shut down all instances from a replica-group, these instances might fall into multiple replica-groups derived from the ideal state, and causing multiple replica-groups down in the routing.", "url": "https://github.com/apache/pinot/pull/6208#discussion_r514508777", "createdAt": "2020-10-29T19:22:03Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-broker/src/main/java/org/apache/pinot/broker/routing/instanceselector/StrictReplicaGroupInstanceSelector.java", "diffHunk": "@@ -0,0 +1,179 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.broker.routing.instanceselector;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.TreeSet;\n+import org.apache.helix.model.ExternalView;\n+import org.apache.helix.model.IdealState;\n+import org.apache.pinot.common.metrics.BrokerMetrics;\n+import org.apache.pinot.common.utils.CommonConstants.Helix.StateModel.SegmentStateModel;\n+import org.apache.pinot.common.utils.HashUtil;\n+\n+\n+/**\n+ * Instance selector for strict replica-group routing strategy.\n+ *\n+ * <pre>\n+ * The strict replica-group routing strategy always routes the query to the instances within the same replica-group.\n+ * (Note that the replica-group information is derived from the ideal state of the table, where the instances are sorted\n+ * alphabetically in the instance state map, so the replica-groups in the instance selector might not match the\n+ * replica-groups in the instance partitions.) The instances in a replica-group should have all the online segments\n+ * (segments with ONLINE/CONSUMING instances in the ideal state and selected by the pre-selector) available\n+ * (ONLINE/CONSUMING in the external view) in order to serve queries. If any segment is unavailable in the\n+ * replica-group, we mark the whole replica-group down and not serve queries with this replica-group.\n+ *\n+ * The selection algorithm is the same as {@link ReplicaGroupInstanceSelector}, and will always evenly distribute the\n+ * traffic to all replica-groups that have all online segments available.\n+ *\n+ * The algorithm relies on the mirror segment assignment from replica-group segment assignment strategy. With mirror\n+ * segment assignment, any server in one replica-group will always have a corresponding server in other replica-groups\n+ * that have the same segments assigned. For example, if S1 is a server in replica-group 1, and it has mirror server\n+ * S2 in replica-group 2 and S3 in replica-group 3. All segments assigned to S1 will also be assigned to S2 and S3. In\n+ * stable scenario (external view matches ideal state), all segments assigned to S1 will have the same enabled instances\n+ * of [S1, S2, S3] sorted (in alphabetical order). If we always pick the same index of enabled instances for all\n+ * segments, only one of S1, S2, S3 will be picked, and all the segments are processed by the same server. In\n+ * transitioning/error scenario (external view does not match ideal state), if a segment is down on S1, we mark all\n+ * segments with the same assignment ([S1, S2, S3]) down on S1 to ensure that we always route the segments to the same\n+ * replica-group.\n+ * </pre>\n+ */\n+public class StrictReplicaGroupInstanceSelector extends ReplicaGroupInstanceSelector {\n+\n+  public StrictReplicaGroupInstanceSelector(String tableNameWithType, BrokerMetrics brokerMetrics) {\n+    super(tableNameWithType, brokerMetrics);\n+  }\n+\n+  /**\n+   * {@inheritDoc}\n+   *\n+   * <pre>\n+   * The maps are calculated in the following steps to meet the strict replica-group guarantee:\n+   *   1. Create a map from online segment to set of instances hosting the segment based on the ideal state\n+   *   2. Gather the online and offline instances for each online segment from the external view\n+   *   3. Compare the instances from the ideal state and the external view and gather the unavailable instances for each\n+   *      set of instances\n+   *   4. Exclude the unavailable instances from the online instances map\n+   * </pre>\n+   */\n+  @Override\n+  void updateSegmentMaps(ExternalView externalView, IdealState idealState, Set<String> onlineSegments,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzk4NDgwNA=="}, "originalCommit": {"oid": "06f959d11cc3544634beb7cc0d661bc3327fd627"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDUyMTgzMw==", "bodyText": "I see. Does this mean the grouping is neither static nor deterministic? When you mentioned the mirroring above, I thought there is a pre-group concept.", "url": "https://github.com/apache/pinot/pull/6208#discussion_r514521833", "createdAt": "2020-10-29T19:46:54Z", "author": {"login": "yupeng9"}, "path": "pinot-broker/src/main/java/org/apache/pinot/broker/routing/instanceselector/StrictReplicaGroupInstanceSelector.java", "diffHunk": "@@ -0,0 +1,179 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.broker.routing.instanceselector;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.TreeSet;\n+import org.apache.helix.model.ExternalView;\n+import org.apache.helix.model.IdealState;\n+import org.apache.pinot.common.metrics.BrokerMetrics;\n+import org.apache.pinot.common.utils.CommonConstants.Helix.StateModel.SegmentStateModel;\n+import org.apache.pinot.common.utils.HashUtil;\n+\n+\n+/**\n+ * Instance selector for strict replica-group routing strategy.\n+ *\n+ * <pre>\n+ * The strict replica-group routing strategy always routes the query to the instances within the same replica-group.\n+ * (Note that the replica-group information is derived from the ideal state of the table, where the instances are sorted\n+ * alphabetically in the instance state map, so the replica-groups in the instance selector might not match the\n+ * replica-groups in the instance partitions.) The instances in a replica-group should have all the online segments\n+ * (segments with ONLINE/CONSUMING instances in the ideal state and selected by the pre-selector) available\n+ * (ONLINE/CONSUMING in the external view) in order to serve queries. If any segment is unavailable in the\n+ * replica-group, we mark the whole replica-group down and not serve queries with this replica-group.\n+ *\n+ * The selection algorithm is the same as {@link ReplicaGroupInstanceSelector}, and will always evenly distribute the\n+ * traffic to all replica-groups that have all online segments available.\n+ *\n+ * The algorithm relies on the mirror segment assignment from replica-group segment assignment strategy. With mirror\n+ * segment assignment, any server in one replica-group will always have a corresponding server in other replica-groups\n+ * that have the same segments assigned. For example, if S1 is a server in replica-group 1, and it has mirror server\n+ * S2 in replica-group 2 and S3 in replica-group 3. All segments assigned to S1 will also be assigned to S2 and S3. In\n+ * stable scenario (external view matches ideal state), all segments assigned to S1 will have the same enabled instances\n+ * of [S1, S2, S3] sorted (in alphabetical order). If we always pick the same index of enabled instances for all\n+ * segments, only one of S1, S2, S3 will be picked, and all the segments are processed by the same server. In\n+ * transitioning/error scenario (external view does not match ideal state), if a segment is down on S1, we mark all\n+ * segments with the same assignment ([S1, S2, S3]) down on S1 to ensure that we always route the segments to the same\n+ * replica-group.\n+ * </pre>\n+ */\n+public class StrictReplicaGroupInstanceSelector extends ReplicaGroupInstanceSelector {\n+\n+  public StrictReplicaGroupInstanceSelector(String tableNameWithType, BrokerMetrics brokerMetrics) {\n+    super(tableNameWithType, brokerMetrics);\n+  }\n+\n+  /**\n+   * {@inheritDoc}\n+   *\n+   * <pre>\n+   * The maps are calculated in the following steps to meet the strict replica-group guarantee:\n+   *   1. Create a map from online segment to set of instances hosting the segment based on the ideal state\n+   *   2. Gather the online and offline instances for each online segment from the external view\n+   *   3. Compare the instances from the ideal state and the external view and gather the unavailable instances for each\n+   *      set of instances\n+   *   4. Exclude the unavailable instances from the online instances map\n+   * </pre>\n+   */\n+  @Override\n+  void updateSegmentMaps(ExternalView externalView, IdealState idealState, Set<String> onlineSegments,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzk4NDgwNA=="}, "originalCommit": {"oid": "06f959d11cc3544634beb7cc0d661bc3327fd627"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDYxNDUxMg==", "bodyText": "The grouping is not static, but is deterministic for each query. The grouping is determined by the index of the instance for each segment.", "url": "https://github.com/apache/pinot/pull/6208#discussion_r514614512", "createdAt": "2020-10-29T22:58:11Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-broker/src/main/java/org/apache/pinot/broker/routing/instanceselector/StrictReplicaGroupInstanceSelector.java", "diffHunk": "@@ -0,0 +1,179 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.broker.routing.instanceselector;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.TreeSet;\n+import org.apache.helix.model.ExternalView;\n+import org.apache.helix.model.IdealState;\n+import org.apache.pinot.common.metrics.BrokerMetrics;\n+import org.apache.pinot.common.utils.CommonConstants.Helix.StateModel.SegmentStateModel;\n+import org.apache.pinot.common.utils.HashUtil;\n+\n+\n+/**\n+ * Instance selector for strict replica-group routing strategy.\n+ *\n+ * <pre>\n+ * The strict replica-group routing strategy always routes the query to the instances within the same replica-group.\n+ * (Note that the replica-group information is derived from the ideal state of the table, where the instances are sorted\n+ * alphabetically in the instance state map, so the replica-groups in the instance selector might not match the\n+ * replica-groups in the instance partitions.) The instances in a replica-group should have all the online segments\n+ * (segments with ONLINE/CONSUMING instances in the ideal state and selected by the pre-selector) available\n+ * (ONLINE/CONSUMING in the external view) in order to serve queries. If any segment is unavailable in the\n+ * replica-group, we mark the whole replica-group down and not serve queries with this replica-group.\n+ *\n+ * The selection algorithm is the same as {@link ReplicaGroupInstanceSelector}, and will always evenly distribute the\n+ * traffic to all replica-groups that have all online segments available.\n+ *\n+ * The algorithm relies on the mirror segment assignment from replica-group segment assignment strategy. With mirror\n+ * segment assignment, any server in one replica-group will always have a corresponding server in other replica-groups\n+ * that have the same segments assigned. For example, if S1 is a server in replica-group 1, and it has mirror server\n+ * S2 in replica-group 2 and S3 in replica-group 3. All segments assigned to S1 will also be assigned to S2 and S3. In\n+ * stable scenario (external view matches ideal state), all segments assigned to S1 will have the same enabled instances\n+ * of [S1, S2, S3] sorted (in alphabetical order). If we always pick the same index of enabled instances for all\n+ * segments, only one of S1, S2, S3 will be picked, and all the segments are processed by the same server. In\n+ * transitioning/error scenario (external view does not match ideal state), if a segment is down on S1, we mark all\n+ * segments with the same assignment ([S1, S2, S3]) down on S1 to ensure that we always route the segments to the same\n+ * replica-group.\n+ * </pre>\n+ */\n+public class StrictReplicaGroupInstanceSelector extends ReplicaGroupInstanceSelector {\n+\n+  public StrictReplicaGroupInstanceSelector(String tableNameWithType, BrokerMetrics brokerMetrics) {\n+    super(tableNameWithType, brokerMetrics);\n+  }\n+\n+  /**\n+   * {@inheritDoc}\n+   *\n+   * <pre>\n+   * The maps are calculated in the following steps to meet the strict replica-group guarantee:\n+   *   1. Create a map from online segment to set of instances hosting the segment based on the ideal state\n+   *   2. Gather the online and offline instances for each online segment from the external view\n+   *   3. Compare the instances from the ideal state and the external view and gather the unavailable instances for each\n+   *      set of instances\n+   *   4. Exclude the unavailable instances from the online instances map\n+   * </pre>\n+   */\n+  @Override\n+  void updateSegmentMaps(ExternalView externalView, IdealState idealState, Set<String> onlineSegments,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzk4NDgwNA=="}, "originalCommit": {"oid": "06f959d11cc3544634beb7cc0d661bc3327fd627"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDYzNzQ3MQ==", "bodyText": "Got it. Makes sense to me.", "url": "https://github.com/apache/pinot/pull/6208#discussion_r514637471", "createdAt": "2020-10-30T00:13:06Z", "author": {"login": "yupeng9"}, "path": "pinot-broker/src/main/java/org/apache/pinot/broker/routing/instanceselector/StrictReplicaGroupInstanceSelector.java", "diffHunk": "@@ -0,0 +1,179 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.broker.routing.instanceselector;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.TreeSet;\n+import org.apache.helix.model.ExternalView;\n+import org.apache.helix.model.IdealState;\n+import org.apache.pinot.common.metrics.BrokerMetrics;\n+import org.apache.pinot.common.utils.CommonConstants.Helix.StateModel.SegmentStateModel;\n+import org.apache.pinot.common.utils.HashUtil;\n+\n+\n+/**\n+ * Instance selector for strict replica-group routing strategy.\n+ *\n+ * <pre>\n+ * The strict replica-group routing strategy always routes the query to the instances within the same replica-group.\n+ * (Note that the replica-group information is derived from the ideal state of the table, where the instances are sorted\n+ * alphabetically in the instance state map, so the replica-groups in the instance selector might not match the\n+ * replica-groups in the instance partitions.) The instances in a replica-group should have all the online segments\n+ * (segments with ONLINE/CONSUMING instances in the ideal state and selected by the pre-selector) available\n+ * (ONLINE/CONSUMING in the external view) in order to serve queries. If any segment is unavailable in the\n+ * replica-group, we mark the whole replica-group down and not serve queries with this replica-group.\n+ *\n+ * The selection algorithm is the same as {@link ReplicaGroupInstanceSelector}, and will always evenly distribute the\n+ * traffic to all replica-groups that have all online segments available.\n+ *\n+ * The algorithm relies on the mirror segment assignment from replica-group segment assignment strategy. With mirror\n+ * segment assignment, any server in one replica-group will always have a corresponding server in other replica-groups\n+ * that have the same segments assigned. For example, if S1 is a server in replica-group 1, and it has mirror server\n+ * S2 in replica-group 2 and S3 in replica-group 3. All segments assigned to S1 will also be assigned to S2 and S3. In\n+ * stable scenario (external view matches ideal state), all segments assigned to S1 will have the same enabled instances\n+ * of [S1, S2, S3] sorted (in alphabetical order). If we always pick the same index of enabled instances for all\n+ * segments, only one of S1, S2, S3 will be picked, and all the segments are processed by the same server. In\n+ * transitioning/error scenario (external view does not match ideal state), if a segment is down on S1, we mark all\n+ * segments with the same assignment ([S1, S2, S3]) down on S1 to ensure that we always route the segments to the same\n+ * replica-group.\n+ * </pre>\n+ */\n+public class StrictReplicaGroupInstanceSelector extends ReplicaGroupInstanceSelector {\n+\n+  public StrictReplicaGroupInstanceSelector(String tableNameWithType, BrokerMetrics brokerMetrics) {\n+    super(tableNameWithType, brokerMetrics);\n+  }\n+\n+  /**\n+   * {@inheritDoc}\n+   *\n+   * <pre>\n+   * The maps are calculated in the following steps to meet the strict replica-group guarantee:\n+   *   1. Create a map from online segment to set of instances hosting the segment based on the ideal state\n+   *   2. Gather the online and offline instances for each online segment from the external view\n+   *   3. Compare the instances from the ideal state and the external view and gather the unavailable instances for each\n+   *      set of instances\n+   *   4. Exclude the unavailable instances from the online instances map\n+   * </pre>\n+   */\n+  @Override\n+  void updateSegmentMaps(ExternalView externalView, IdealState idealState, Set<String> onlineSegments,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzk4NDgwNA=="}, "originalCommit": {"oid": "06f959d11cc3544634beb7cc0d661bc3327fd627"}, "originalPosition": 80}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyOTc0NDgxOnYy", "diffSide": "RIGHT", "path": "pinot-broker/src/main/java/org/apache/pinot/broker/routing/instanceselector/StrictReplicaGroupInstanceSelector.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMVQwNDo0NzowN1rOHrk52Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMVQwNzozOTo0NlrOHrs_qA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTQ1NTQ0OQ==", "bodyText": "(1) Where do you utilize the fact instanceStateMap is a tree map? and why?\n(2) The ExternalView interface has the value type as a generic map. What happens if EV changes its implementation. Will it break the current impl?", "url": "https://github.com/apache/pinot/pull/6208#discussion_r515455449", "createdAt": "2020-10-31T04:47:07Z", "author": {"login": "chenboat"}, "path": "pinot-broker/src/main/java/org/apache/pinot/broker/routing/instanceselector/StrictReplicaGroupInstanceSelector.java", "diffHunk": "@@ -0,0 +1,179 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.broker.routing.instanceselector;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.TreeSet;\n+import org.apache.helix.model.ExternalView;\n+import org.apache.helix.model.IdealState;\n+import org.apache.pinot.common.metrics.BrokerMetrics;\n+import org.apache.pinot.common.utils.CommonConstants.Helix.StateModel.SegmentStateModel;\n+import org.apache.pinot.common.utils.HashUtil;\n+\n+\n+/**\n+ * Instance selector for strict replica-group routing strategy.\n+ *\n+ * <pre>\n+ * The strict replica-group routing strategy always routes the query to the instances within the same replica-group.\n+ * (Note that the replica-group information is derived from the ideal state of the table, where the instances are sorted\n+ * alphabetically in the instance state map, so the replica-groups in the instance selector might not match the\n+ * replica-groups in the instance partitions.) The instances in a replica-group should have all the online segments\n+ * (segments with ONLINE/CONSUMING instances in the ideal state and selected by the pre-selector) available\n+ * (ONLINE/CONSUMING in the external view) in order to serve queries. If any segment is unavailable in the\n+ * replica-group, we mark the whole replica-group down and not serve queries with this replica-group.\n+ *\n+ * The selection algorithm is the same as {@link ReplicaGroupInstanceSelector}, and will always evenly distribute the\n+ * traffic to all replica-groups that have all online segments available.\n+ *\n+ * The algorithm relies on the mirror segment assignment from replica-group segment assignment strategy. With mirror\n+ * segment assignment, any server in one replica-group will always have a corresponding server in other replica-groups\n+ * that have the same segments assigned. For example, if S1 is a server in replica-group 1, and it has mirror server\n+ * S2 in replica-group 2 and S3 in replica-group 3. All segments assigned to S1 will also be assigned to S2 and S3. In\n+ * stable scenario (external view matches ideal state), all segments assigned to S1 will have the same enabled instances\n+ * of [S1, S2, S3] sorted (in alphabetical order). If we always pick the same index of enabled instances for all\n+ * segments, only one of S1, S2, S3 will be picked, and all the segments are processed by the same server. In\n+ * transitioning/error scenario (external view does not match ideal state), if a segment is down on S1, we mark all\n+ * segments with the same assignment ([S1, S2, S3]) down on S1 to ensure that we always route the segments to the same\n+ * replica-group.\n+ * </pre>\n+ */\n+public class StrictReplicaGroupInstanceSelector extends ReplicaGroupInstanceSelector {\n+\n+  public StrictReplicaGroupInstanceSelector(String tableNameWithType, BrokerMetrics brokerMetrics) {\n+    super(tableNameWithType, brokerMetrics);\n+  }\n+\n+  /**\n+   * {@inheritDoc}\n+   *\n+   * <pre>\n+   * The maps are calculated in the following steps to meet the strict replica-group guarantee:\n+   *   1. Create a map from online segment to set of instances hosting the segment based on the ideal state\n+   *   2. Gather the online and offline instances for each online segment from the external view\n+   *   3. Compare the instances from the ideal state and the external view and gather the unavailable instances for each\n+   *      set of instances\n+   *   4. Exclude the unavailable instances from the online instances map\n+   * </pre>\n+   */\n+  @Override\n+  void updateSegmentMaps(ExternalView externalView, IdealState idealState, Set<String> onlineSegments,\n+      Map<String, List<String>> segmentToOnlineInstancesMap, Map<String, List<String>> segmentToOfflineInstancesMap,\n+      Map<String, List<String>> instanceToSegmentsMap) {\n+    // Iterate over the ideal state to fill up 'idealStateSegmentToInstancesMap' which is a map from segment to set of\n+    // instances hosting the segment in the ideal state\n+    int segmentMapCapacity = HashUtil.getHashMapCapacity(onlineSegments.size());\n+    Map<String, Set<String>> idealStateSegmentToInstancesMap = new HashMap<>(segmentMapCapacity);\n+    for (Map.Entry<String, Map<String, String>> entry : idealState.getRecord().getMapFields().entrySet()) {\n+      String segment = entry.getKey();\n+      // Only track online segments\n+      if (!onlineSegments.contains(segment)) {\n+        continue;\n+      }\n+      idealStateSegmentToInstancesMap.put(segment, entry.getValue().keySet());\n+    }\n+\n+    // Iterate over the external view to fill up 'tempSegmentToOnlineInstancesMap' and 'segmentToOfflineInstancesMap'.\n+    // 'tempSegmentToOnlineInstancesMap' is a temporary map from segment to set of instances that are in the ideal state\n+    // and also ONLINE/CONSUMING in the external view. This map does not have the strict replica-group guarantee, and\n+    // will be used to calculate the final 'segmentToOnlineInstancesMap'.\n+    Map<String, Set<String>> tempSegmentToOnlineInstancesMap = new HashMap<>(segmentMapCapacity);\n+    for (Map.Entry<String, Map<String, String>> entry : externalView.getRecord().getMapFields().entrySet()) {\n+      String segment = entry.getKey();\n+      Set<String> instancesInIdealState = idealStateSegmentToInstancesMap.get(segment);\n+      // Only track online segments\n+      if (instancesInIdealState == null) {\n+        continue;\n+      }\n+      // NOTE: Instances will be sorted here because 'instanceStateMap' is a TreeMap.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "06f959d11cc3544634beb7cc0d661bc3327fd627"}, "originalPosition": 108}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTU3NzA0Ng==", "bodyText": "Good question. Actually it is not utilized here. The onlineInstances needs to be sorted, and it relies on the fact that tempOnlineInstances is a TreeSet. The second point is also very good.\nI moved the comments, and added an assert to guard the case of EV changing implementation.", "url": "https://github.com/apache/pinot/pull/6208#discussion_r515577046", "createdAt": "2020-11-01T05:19:55Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-broker/src/main/java/org/apache/pinot/broker/routing/instanceselector/StrictReplicaGroupInstanceSelector.java", "diffHunk": "@@ -0,0 +1,179 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.broker.routing.instanceselector;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.TreeSet;\n+import org.apache.helix.model.ExternalView;\n+import org.apache.helix.model.IdealState;\n+import org.apache.pinot.common.metrics.BrokerMetrics;\n+import org.apache.pinot.common.utils.CommonConstants.Helix.StateModel.SegmentStateModel;\n+import org.apache.pinot.common.utils.HashUtil;\n+\n+\n+/**\n+ * Instance selector for strict replica-group routing strategy.\n+ *\n+ * <pre>\n+ * The strict replica-group routing strategy always routes the query to the instances within the same replica-group.\n+ * (Note that the replica-group information is derived from the ideal state of the table, where the instances are sorted\n+ * alphabetically in the instance state map, so the replica-groups in the instance selector might not match the\n+ * replica-groups in the instance partitions.) The instances in a replica-group should have all the online segments\n+ * (segments with ONLINE/CONSUMING instances in the ideal state and selected by the pre-selector) available\n+ * (ONLINE/CONSUMING in the external view) in order to serve queries. If any segment is unavailable in the\n+ * replica-group, we mark the whole replica-group down and not serve queries with this replica-group.\n+ *\n+ * The selection algorithm is the same as {@link ReplicaGroupInstanceSelector}, and will always evenly distribute the\n+ * traffic to all replica-groups that have all online segments available.\n+ *\n+ * The algorithm relies on the mirror segment assignment from replica-group segment assignment strategy. With mirror\n+ * segment assignment, any server in one replica-group will always have a corresponding server in other replica-groups\n+ * that have the same segments assigned. For example, if S1 is a server in replica-group 1, and it has mirror server\n+ * S2 in replica-group 2 and S3 in replica-group 3. All segments assigned to S1 will also be assigned to S2 and S3. In\n+ * stable scenario (external view matches ideal state), all segments assigned to S1 will have the same enabled instances\n+ * of [S1, S2, S3] sorted (in alphabetical order). If we always pick the same index of enabled instances for all\n+ * segments, only one of S1, S2, S3 will be picked, and all the segments are processed by the same server. In\n+ * transitioning/error scenario (external view does not match ideal state), if a segment is down on S1, we mark all\n+ * segments with the same assignment ([S1, S2, S3]) down on S1 to ensure that we always route the segments to the same\n+ * replica-group.\n+ * </pre>\n+ */\n+public class StrictReplicaGroupInstanceSelector extends ReplicaGroupInstanceSelector {\n+\n+  public StrictReplicaGroupInstanceSelector(String tableNameWithType, BrokerMetrics brokerMetrics) {\n+    super(tableNameWithType, brokerMetrics);\n+  }\n+\n+  /**\n+   * {@inheritDoc}\n+   *\n+   * <pre>\n+   * The maps are calculated in the following steps to meet the strict replica-group guarantee:\n+   *   1. Create a map from online segment to set of instances hosting the segment based on the ideal state\n+   *   2. Gather the online and offline instances for each online segment from the external view\n+   *   3. Compare the instances from the ideal state and the external view and gather the unavailable instances for each\n+   *      set of instances\n+   *   4. Exclude the unavailable instances from the online instances map\n+   * </pre>\n+   */\n+  @Override\n+  void updateSegmentMaps(ExternalView externalView, IdealState idealState, Set<String> onlineSegments,\n+      Map<String, List<String>> segmentToOnlineInstancesMap, Map<String, List<String>> segmentToOfflineInstancesMap,\n+      Map<String, List<String>> instanceToSegmentsMap) {\n+    // Iterate over the ideal state to fill up 'idealStateSegmentToInstancesMap' which is a map from segment to set of\n+    // instances hosting the segment in the ideal state\n+    int segmentMapCapacity = HashUtil.getHashMapCapacity(onlineSegments.size());\n+    Map<String, Set<String>> idealStateSegmentToInstancesMap = new HashMap<>(segmentMapCapacity);\n+    for (Map.Entry<String, Map<String, String>> entry : idealState.getRecord().getMapFields().entrySet()) {\n+      String segment = entry.getKey();\n+      // Only track online segments\n+      if (!onlineSegments.contains(segment)) {\n+        continue;\n+      }\n+      idealStateSegmentToInstancesMap.put(segment, entry.getValue().keySet());\n+    }\n+\n+    // Iterate over the external view to fill up 'tempSegmentToOnlineInstancesMap' and 'segmentToOfflineInstancesMap'.\n+    // 'tempSegmentToOnlineInstancesMap' is a temporary map from segment to set of instances that are in the ideal state\n+    // and also ONLINE/CONSUMING in the external view. This map does not have the strict replica-group guarantee, and\n+    // will be used to calculate the final 'segmentToOnlineInstancesMap'.\n+    Map<String, Set<String>> tempSegmentToOnlineInstancesMap = new HashMap<>(segmentMapCapacity);\n+    for (Map.Entry<String, Map<String, String>> entry : externalView.getRecord().getMapFields().entrySet()) {\n+      String segment = entry.getKey();\n+      Set<String> instancesInIdealState = idealStateSegmentToInstancesMap.get(segment);\n+      // Only track online segments\n+      if (instancesInIdealState == null) {\n+        continue;\n+      }\n+      // NOTE: Instances will be sorted here because 'instanceStateMap' is a TreeMap.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTQ1NTQ0OQ=="}, "originalCommit": {"oid": "06f959d11cc3544634beb7cc0d661bc3327fd627"}, "originalPosition": 108}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTU4ODAwOA==", "bodyText": "Actually the instanceStateMap is not always TreeMap, but can be LinkedHashMap as well. Explicitly sort the online instances to ensure it always work.", "url": "https://github.com/apache/pinot/pull/6208#discussion_r515588008", "createdAt": "2020-11-01T07:39:46Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-broker/src/main/java/org/apache/pinot/broker/routing/instanceselector/StrictReplicaGroupInstanceSelector.java", "diffHunk": "@@ -0,0 +1,179 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.broker.routing.instanceselector;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.TreeSet;\n+import org.apache.helix.model.ExternalView;\n+import org.apache.helix.model.IdealState;\n+import org.apache.pinot.common.metrics.BrokerMetrics;\n+import org.apache.pinot.common.utils.CommonConstants.Helix.StateModel.SegmentStateModel;\n+import org.apache.pinot.common.utils.HashUtil;\n+\n+\n+/**\n+ * Instance selector for strict replica-group routing strategy.\n+ *\n+ * <pre>\n+ * The strict replica-group routing strategy always routes the query to the instances within the same replica-group.\n+ * (Note that the replica-group information is derived from the ideal state of the table, where the instances are sorted\n+ * alphabetically in the instance state map, so the replica-groups in the instance selector might not match the\n+ * replica-groups in the instance partitions.) The instances in a replica-group should have all the online segments\n+ * (segments with ONLINE/CONSUMING instances in the ideal state and selected by the pre-selector) available\n+ * (ONLINE/CONSUMING in the external view) in order to serve queries. If any segment is unavailable in the\n+ * replica-group, we mark the whole replica-group down and not serve queries with this replica-group.\n+ *\n+ * The selection algorithm is the same as {@link ReplicaGroupInstanceSelector}, and will always evenly distribute the\n+ * traffic to all replica-groups that have all online segments available.\n+ *\n+ * The algorithm relies on the mirror segment assignment from replica-group segment assignment strategy. With mirror\n+ * segment assignment, any server in one replica-group will always have a corresponding server in other replica-groups\n+ * that have the same segments assigned. For example, if S1 is a server in replica-group 1, and it has mirror server\n+ * S2 in replica-group 2 and S3 in replica-group 3. All segments assigned to S1 will also be assigned to S2 and S3. In\n+ * stable scenario (external view matches ideal state), all segments assigned to S1 will have the same enabled instances\n+ * of [S1, S2, S3] sorted (in alphabetical order). If we always pick the same index of enabled instances for all\n+ * segments, only one of S1, S2, S3 will be picked, and all the segments are processed by the same server. In\n+ * transitioning/error scenario (external view does not match ideal state), if a segment is down on S1, we mark all\n+ * segments with the same assignment ([S1, S2, S3]) down on S1 to ensure that we always route the segments to the same\n+ * replica-group.\n+ * </pre>\n+ */\n+public class StrictReplicaGroupInstanceSelector extends ReplicaGroupInstanceSelector {\n+\n+  public StrictReplicaGroupInstanceSelector(String tableNameWithType, BrokerMetrics brokerMetrics) {\n+    super(tableNameWithType, brokerMetrics);\n+  }\n+\n+  /**\n+   * {@inheritDoc}\n+   *\n+   * <pre>\n+   * The maps are calculated in the following steps to meet the strict replica-group guarantee:\n+   *   1. Create a map from online segment to set of instances hosting the segment based on the ideal state\n+   *   2. Gather the online and offline instances for each online segment from the external view\n+   *   3. Compare the instances from the ideal state and the external view and gather the unavailable instances for each\n+   *      set of instances\n+   *   4. Exclude the unavailable instances from the online instances map\n+   * </pre>\n+   */\n+  @Override\n+  void updateSegmentMaps(ExternalView externalView, IdealState idealState, Set<String> onlineSegments,\n+      Map<String, List<String>> segmentToOnlineInstancesMap, Map<String, List<String>> segmentToOfflineInstancesMap,\n+      Map<String, List<String>> instanceToSegmentsMap) {\n+    // Iterate over the ideal state to fill up 'idealStateSegmentToInstancesMap' which is a map from segment to set of\n+    // instances hosting the segment in the ideal state\n+    int segmentMapCapacity = HashUtil.getHashMapCapacity(onlineSegments.size());\n+    Map<String, Set<String>> idealStateSegmentToInstancesMap = new HashMap<>(segmentMapCapacity);\n+    for (Map.Entry<String, Map<String, String>> entry : idealState.getRecord().getMapFields().entrySet()) {\n+      String segment = entry.getKey();\n+      // Only track online segments\n+      if (!onlineSegments.contains(segment)) {\n+        continue;\n+      }\n+      idealStateSegmentToInstancesMap.put(segment, entry.getValue().keySet());\n+    }\n+\n+    // Iterate over the external view to fill up 'tempSegmentToOnlineInstancesMap' and 'segmentToOfflineInstancesMap'.\n+    // 'tempSegmentToOnlineInstancesMap' is a temporary map from segment to set of instances that are in the ideal state\n+    // and also ONLINE/CONSUMING in the external view. This map does not have the strict replica-group guarantee, and\n+    // will be used to calculate the final 'segmentToOnlineInstancesMap'.\n+    Map<String, Set<String>> tempSegmentToOnlineInstancesMap = new HashMap<>(segmentMapCapacity);\n+    for (Map.Entry<String, Map<String, String>> entry : externalView.getRecord().getMapFields().entrySet()) {\n+      String segment = entry.getKey();\n+      Set<String> instancesInIdealState = idealStateSegmentToInstancesMap.get(segment);\n+      // Only track online segments\n+      if (instancesInIdealState == null) {\n+        continue;\n+      }\n+      // NOTE: Instances will be sorted here because 'instanceStateMap' is a TreeMap.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTQ1NTQ0OQ=="}, "originalCommit": {"oid": "06f959d11cc3544634beb7cc0d661bc3327fd627"}, "originalPosition": 108}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzMDY5NTU5OnYy", "diffSide": "RIGHT", "path": "pinot-broker/src/main/java/org/apache/pinot/broker/routing/instanceselector/StrictReplicaGroupInstanceSelector.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMVQwMzoxMzozMlrOHrr1MQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMVQwNToyNDoyNFrOHrsV-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTU2ODk0NQ==", "bodyText": "There is a need to introduce a new abstraction to simplify this class \u2014 note that the new abstraction can not be replicaGroup as it is now. We are talking about segment to replica group mapping. It should greatly simplify the codes in this class. At it current form, it looks correct to me but it is way too complex and hard to understand. We should refactor it in the next iteration.", "url": "https://github.com/apache/pinot/pull/6208#discussion_r515568945", "createdAt": "2020-11-01T03:13:32Z", "author": {"login": "chenboat"}, "path": "pinot-broker/src/main/java/org/apache/pinot/broker/routing/instanceselector/StrictReplicaGroupInstanceSelector.java", "diffHunk": "@@ -0,0 +1,179 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.broker.routing.instanceselector;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.TreeSet;\n+import org.apache.helix.model.ExternalView;\n+import org.apache.helix.model.IdealState;\n+import org.apache.pinot.common.metrics.BrokerMetrics;\n+import org.apache.pinot.common.utils.CommonConstants.Helix.StateModel.SegmentStateModel;\n+import org.apache.pinot.common.utils.HashUtil;\n+\n+\n+/**\n+ * Instance selector for strict replica-group routing strategy.\n+ *\n+ * <pre>\n+ * The strict replica-group routing strategy always routes the query to the instances within the same replica-group.\n+ * (Note that the replica-group information is derived from the ideal state of the table, where the instances are sorted\n+ * alphabetically in the instance state map, so the replica-groups in the instance selector might not match the\n+ * replica-groups in the instance partitions.) The instances in a replica-group should have all the online segments\n+ * (segments with ONLINE/CONSUMING instances in the ideal state and selected by the pre-selector) available\n+ * (ONLINE/CONSUMING in the external view) in order to serve queries. If any segment is unavailable in the\n+ * replica-group, we mark the whole replica-group down and not serve queries with this replica-group.\n+ *\n+ * The selection algorithm is the same as {@link ReplicaGroupInstanceSelector}, and will always evenly distribute the\n+ * traffic to all replica-groups that have all online segments available.\n+ *\n+ * The algorithm relies on the mirror segment assignment from replica-group segment assignment strategy. With mirror\n+ * segment assignment, any server in one replica-group will always have a corresponding server in other replica-groups\n+ * that have the same segments assigned. For example, if S1 is a server in replica-group 1, and it has mirror server\n+ * S2 in replica-group 2 and S3 in replica-group 3. All segments assigned to S1 will also be assigned to S2 and S3. In\n+ * stable scenario (external view matches ideal state), all segments assigned to S1 will have the same enabled instances\n+ * of [S1, S2, S3] sorted (in alphabetical order). If we always pick the same index of enabled instances for all\n+ * segments, only one of S1, S2, S3 will be picked, and all the segments are processed by the same server. In\n+ * transitioning/error scenario (external view does not match ideal state), if a segment is down on S1, we mark all\n+ * segments with the same assignment ([S1, S2, S3]) down on S1 to ensure that we always route the segments to the same\n+ * replica-group.\n+ * </pre>\n+ */\n+public class StrictReplicaGroupInstanceSelector extends ReplicaGroupInstanceSelector {\n+\n+  public StrictReplicaGroupInstanceSelector(String tableNameWithType, BrokerMetrics brokerMetrics) {\n+    super(tableNameWithType, brokerMetrics);\n+  }\n+\n+  /**\n+   * {@inheritDoc}\n+   *\n+   * <pre>\n+   * The maps are calculated in the following steps to meet the strict replica-group guarantee:\n+   *   1. Create a map from online segment to set of instances hosting the segment based on the ideal state\n+   *   2. Gather the online and offline instances for each online segment from the external view\n+   *   3. Compare the instances from the ideal state and the external view and gather the unavailable instances for each\n+   *      set of instances\n+   *   4. Exclude the unavailable instances from the online instances map\n+   * </pre>\n+   */\n+  @Override\n+  void updateSegmentMaps(ExternalView externalView, IdealState idealState, Set<String> onlineSegments,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "06f959d11cc3544634beb7cc0d661bc3327fd627"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTU3NzMzOQ==", "bodyText": "I think what you mean is to introduce a new algorithm for the replica-group routing. This part is quite tricky because the routing needs to still work when we change the replica-groups and run the rebalance, and the query time computation needs to be as fast as possible. If we can come up with a simpler and better algorithm, we can definitely re-implement this class.", "url": "https://github.com/apache/pinot/pull/6208#discussion_r515577339", "createdAt": "2020-11-01T05:24:24Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-broker/src/main/java/org/apache/pinot/broker/routing/instanceselector/StrictReplicaGroupInstanceSelector.java", "diffHunk": "@@ -0,0 +1,179 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.broker.routing.instanceselector;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.TreeSet;\n+import org.apache.helix.model.ExternalView;\n+import org.apache.helix.model.IdealState;\n+import org.apache.pinot.common.metrics.BrokerMetrics;\n+import org.apache.pinot.common.utils.CommonConstants.Helix.StateModel.SegmentStateModel;\n+import org.apache.pinot.common.utils.HashUtil;\n+\n+\n+/**\n+ * Instance selector for strict replica-group routing strategy.\n+ *\n+ * <pre>\n+ * The strict replica-group routing strategy always routes the query to the instances within the same replica-group.\n+ * (Note that the replica-group information is derived from the ideal state of the table, where the instances are sorted\n+ * alphabetically in the instance state map, so the replica-groups in the instance selector might not match the\n+ * replica-groups in the instance partitions.) The instances in a replica-group should have all the online segments\n+ * (segments with ONLINE/CONSUMING instances in the ideal state and selected by the pre-selector) available\n+ * (ONLINE/CONSUMING in the external view) in order to serve queries. If any segment is unavailable in the\n+ * replica-group, we mark the whole replica-group down and not serve queries with this replica-group.\n+ *\n+ * The selection algorithm is the same as {@link ReplicaGroupInstanceSelector}, and will always evenly distribute the\n+ * traffic to all replica-groups that have all online segments available.\n+ *\n+ * The algorithm relies on the mirror segment assignment from replica-group segment assignment strategy. With mirror\n+ * segment assignment, any server in one replica-group will always have a corresponding server in other replica-groups\n+ * that have the same segments assigned. For example, if S1 is a server in replica-group 1, and it has mirror server\n+ * S2 in replica-group 2 and S3 in replica-group 3. All segments assigned to S1 will also be assigned to S2 and S3. In\n+ * stable scenario (external view matches ideal state), all segments assigned to S1 will have the same enabled instances\n+ * of [S1, S2, S3] sorted (in alphabetical order). If we always pick the same index of enabled instances for all\n+ * segments, only one of S1, S2, S3 will be picked, and all the segments are processed by the same server. In\n+ * transitioning/error scenario (external view does not match ideal state), if a segment is down on S1, we mark all\n+ * segments with the same assignment ([S1, S2, S3]) down on S1 to ensure that we always route the segments to the same\n+ * replica-group.\n+ * </pre>\n+ */\n+public class StrictReplicaGroupInstanceSelector extends ReplicaGroupInstanceSelector {\n+\n+  public StrictReplicaGroupInstanceSelector(String tableNameWithType, BrokerMetrics brokerMetrics) {\n+    super(tableNameWithType, brokerMetrics);\n+  }\n+\n+  /**\n+   * {@inheritDoc}\n+   *\n+   * <pre>\n+   * The maps are calculated in the following steps to meet the strict replica-group guarantee:\n+   *   1. Create a map from online segment to set of instances hosting the segment based on the ideal state\n+   *   2. Gather the online and offline instances for each online segment from the external view\n+   *   3. Compare the instances from the ideal state and the external view and gather the unavailable instances for each\n+   *      set of instances\n+   *   4. Exclude the unavailable instances from the online instances map\n+   * </pre>\n+   */\n+  @Override\n+  void updateSegmentMaps(ExternalView externalView, IdealState idealState, Set<String> onlineSegments,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTU2ODk0NQ=="}, "originalCommit": {"oid": "06f959d11cc3544634beb7cc0d661bc3327fd627"}, "originalPosition": 80}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3802, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}