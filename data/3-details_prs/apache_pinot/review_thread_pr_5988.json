{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDgxODI5NzQx", "number": 5988, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQwNzoxNDoxMFrOEhHLnw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQwNzoxNjo0OVrOEhHPVA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzMTU2MTI3OnYy", "diffSide": "RIGHT", "path": "pinot-clients/pinot-jdbc-client/src/main/java/org/apache/pinot/client/PinotDriver.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQwNzoxNDoxMFrOHOPuEQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxNDo1Mzo0NVrOHWylmA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDY5OTY2NQ==", "bodyText": "not needed, you can use the default tenant name and go with it.", "url": "https://github.com/apache/pinot/pull/5988#discussion_r484699665", "createdAt": "2020-09-08T07:14:10Z", "author": {"login": "kishoreg"}, "path": "pinot-clients/pinot-jdbc-client/src/main/java/org/apache/pinot/client/PinotDriver.java", "diffHunk": "@@ -37,16 +38,18 @@\n public class PinotDriver implements Driver {\n   private static final org.slf4j.Logger LOGGER = LoggerFactory.getLogger(PinotDriver.class);\n   private final String SCHEME = \"pinot\";\n+  public static final String TENANT = \"tenant\";\n \n   @Override\n   public Connection connect(String url, Properties info)\n       throws SQLException {\n     try {\n       LOGGER.info(\"Initiating connection to database for url: \" + url);\n       PinotClientTransport pinotClientTransport = new JsonAsyncHttpPinotClientTransportFactory().buildTransport();\n-      List<String> brokerList = DriverUtils.getBrokersFromURL(url);\n       String controllerUrl = DriverUtils.getControllerFromURL(url);\n-      return new PinotConnection(brokerList, controllerUrl, pinotClientTransport);\n+      Preconditions.checkArgument(info.containsKey(TENANT), \"Pinot tenant missing in the properties\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "636d8937771d50f0bd5ecd83afbca01891152192"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzY1OTU0NA==", "bodyText": "done", "url": "https://github.com/apache/pinot/pull/5988#discussion_r493659544", "createdAt": "2020-09-23T14:53:45Z", "author": {"login": "KKcorps"}, "path": "pinot-clients/pinot-jdbc-client/src/main/java/org/apache/pinot/client/PinotDriver.java", "diffHunk": "@@ -37,16 +38,18 @@\n public class PinotDriver implements Driver {\n   private static final org.slf4j.Logger LOGGER = LoggerFactory.getLogger(PinotDriver.class);\n   private final String SCHEME = \"pinot\";\n+  public static final String TENANT = \"tenant\";\n \n   @Override\n   public Connection connect(String url, Properties info)\n       throws SQLException {\n     try {\n       LOGGER.info(\"Initiating connection to database for url: \" + url);\n       PinotClientTransport pinotClientTransport = new JsonAsyncHttpPinotClientTransportFactory().buildTransport();\n-      List<String> brokerList = DriverUtils.getBrokersFromURL(url);\n       String controllerUrl = DriverUtils.getControllerFromURL(url);\n-      return new PinotConnection(brokerList, controllerUrl, pinotClientTransport);\n+      Preconditions.checkArgument(info.containsKey(TENANT), \"Pinot tenant missing in the properties\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDY5OTY2NQ=="}, "originalCommit": {"oid": "636d8937771d50f0bd5ecd83afbca01891152192"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzMTU2NzU1OnYy", "diffSide": "RIGHT", "path": "pinot-clients/pinot-jdbc-client/src/main/java/org/apache/pinot/client/controller/PinotControllerTransport.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQwNzoxNTo1NFrOHOPx0Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxNDo1NDoxMVrOHWym_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDcwMDYyNQ==", "bodyText": "is this called for every connection creation or every query?", "url": "https://github.com/apache/pinot/pull/5988#discussion_r484700625", "createdAt": "2020-09-08T07:15:54Z", "author": {"login": "kishoreg"}, "path": "pinot-clients/pinot-jdbc-client/src/main/java/org/apache/pinot/client/controller/PinotControllerTransport.java", "diffHunk": "@@ -77,13 +76,31 @@ public SchemaResponse getTableSchema(String table, String controllerAddress) {\n       final Future<Response> response =\n           requestBuilder.addHeader(\"Content-Type\", \"application/json; charset=utf-8\").execute();\n \n-      SchemaResponseFuture schemaResponseFuture = new SchemaResponseFuture(response, url);\n+      SchemaResponse.SchemaResponseFuture schemaResponseFuture = new SchemaResponse.SchemaResponseFuture(response, url);\n       return schemaResponseFuture.get();\n     } catch (ExecutionException e) {\n       throw new PinotClientException(e);\n     }\n   }\n \n+  public ControllerTenantBrokerResponse getBrokersFromController(String controllerAddress, String tenant) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "636d8937771d50f0bd5ecd83afbca01891152192"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDcxMzUxNA==", "bodyText": "every connection creation.", "url": "https://github.com/apache/pinot/pull/5988#discussion_r484713514", "createdAt": "2020-09-08T07:38:40Z", "author": {"login": "KKcorps"}, "path": "pinot-clients/pinot-jdbc-client/src/main/java/org/apache/pinot/client/controller/PinotControllerTransport.java", "diffHunk": "@@ -77,13 +76,31 @@ public SchemaResponse getTableSchema(String table, String controllerAddress) {\n       final Future<Response> response =\n           requestBuilder.addHeader(\"Content-Type\", \"application/json; charset=utf-8\").execute();\n \n-      SchemaResponseFuture schemaResponseFuture = new SchemaResponseFuture(response, url);\n+      SchemaResponse.SchemaResponseFuture schemaResponseFuture = new SchemaResponse.SchemaResponseFuture(response, url);\n       return schemaResponseFuture.get();\n     } catch (ExecutionException e) {\n       throw new PinotClientException(e);\n     }\n   }\n \n+  public ControllerTenantBrokerResponse getBrokersFromController(String controllerAddress, String tenant) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDcwMDYyNQ=="}, "originalCommit": {"oid": "636d8937771d50f0bd5ecd83afbca01891152192"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzY1OTkwMQ==", "bodyText": "Resolved in #6020", "url": "https://github.com/apache/pinot/pull/5988#discussion_r493659901", "createdAt": "2020-09-23T14:54:11Z", "author": {"login": "KKcorps"}, "path": "pinot-clients/pinot-jdbc-client/src/main/java/org/apache/pinot/client/controller/PinotControllerTransport.java", "diffHunk": "@@ -77,13 +76,31 @@ public SchemaResponse getTableSchema(String table, String controllerAddress) {\n       final Future<Response> response =\n           requestBuilder.addHeader(\"Content-Type\", \"application/json; charset=utf-8\").execute();\n \n-      SchemaResponseFuture schemaResponseFuture = new SchemaResponseFuture(response, url);\n+      SchemaResponse.SchemaResponseFuture schemaResponseFuture = new SchemaResponse.SchemaResponseFuture(response, url);\n       return schemaResponseFuture.get();\n     } catch (ExecutionException e) {\n       throw new PinotClientException(e);\n     }\n   }\n \n+  public ControllerTenantBrokerResponse getBrokersFromController(String controllerAddress, String tenant) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDcwMDYyNQ=="}, "originalCommit": {"oid": "636d8937771d50f0bd5ecd83afbca01891152192"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzMTU3MDc2OnYy", "diffSide": "RIGHT", "path": "pinot-clients/pinot-jdbc-client/src/main/java/org/apache/pinot/client/controller/response/ControllerTenantBrokerResponse.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQwNzoxNjo0OVrOHOPzvA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQwNzoxNjo0OVrOHOPzvA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDcwMTExNg==", "bodyText": "better to get the host name port from instance config instead of the broker name", "url": "https://github.com/apache/pinot/pull/5988#discussion_r484701116", "createdAt": "2020-09-08T07:16:49Z", "author": {"login": "kishoreg"}, "path": "pinot-clients/pinot-jdbc-client/src/main/java/org/apache/pinot/client/controller/response/ControllerTenantBrokerResponse.java", "diffHunk": "@@ -0,0 +1,90 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.client.controller.response;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.ObjectReader;\n+import com.google.common.collect.Lists;\n+import com.ning.http.client.Response;\n+\n+import java.io.IOException;\n+import java.util.*;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.Future;\n+import java.util.concurrent.TimeUnit;\n+\n+\n+public class ControllerTenantBrokerResponse {\n+  private JsonNode _brokers;\n+\n+  private ControllerTenantBrokerResponse() {\n+\n+  }\n+\n+  private ControllerTenantBrokerResponse(JsonNode controllerTenantBrokerResponse) {\n+    _brokers = controllerTenantBrokerResponse;\n+  }\n+\n+  public static ControllerTenantBrokerResponse fromJson(JsonNode controllerTenantBrokerResponse) {\n+    return new ControllerTenantBrokerResponse(controllerTenantBrokerResponse);\n+  }\n+\n+  public static ControllerTenantBrokerResponse empty() {\n+    return new ControllerTenantBrokerResponse();\n+  }\n+\n+  public List<String> getBrokers() {\n+    List<String> brokerList = new ArrayList<>();\n+\n+    for (JsonNode broker : _brokers) {\n+      String[] brokerPath = broker.textValue().split(\"_\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "636d8937771d50f0bd5ecd83afbca01891152192"}, "originalPosition": 57}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3852, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}