{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQwODE1MDU5", "number": 6360, "reviewThreads": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQwMDo1NDoyOFrOFF4SdQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQwMjoxNzo1NFrOFH_1aA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxNzA5NDI5OnYy", "diffSide": "RIGHT", "path": "pinot-integration-tests/src/test/java/org/apache/pinot/compat/tests/TableOp.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQwMDo1NDoyOFrOIGmtzQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQwMDo1NDoyOFrOIGmtzQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mzc5NjY4NQ==", "bodyText": "pull this from the table config file", "url": "https://github.com/apache/pinot/pull/6360#discussion_r543796685", "createdAt": "2020-12-16T00:54:28Z", "author": {"login": "mcvsubbu"}, "path": "pinot-integration-tests/src/test/java/org/apache/pinot/compat/tests/TableOp.java", "diffHunk": "@@ -44,6 +45,9 @@\n   private String _schemaFileName;\n   private Op _op;\n   private String _tableConfigFileName;\n+  private String _tableName;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6359fb577d1cac1c38c840cae958039661304ef3"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxODU0ODQ5OnYy", "diffSide": "RIGHT", "path": "pinot-integration-tests/src/test/java/org/apache/pinot/compat/tests/TableOp.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQwNjozMTozNlrOIG0rZw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQwNjozMTozNlrOIG0rZw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDAyNTQ0Nw==", "bodyText": "You can use ControllerRequestURLBuilder.baseUrl(CONTROLLER_URL).forSchemaCreate()\nSame for table creation/deletion, the constructor should all inside ControllerRequestURLBuilder (If not, please add it there).", "url": "https://github.com/apache/pinot/pull/6360#discussion_r544025447", "createdAt": "2020-12-16T06:31:36Z", "author": {"login": "xiangfu0"}, "path": "pinot-integration-tests/src/test/java/org/apache/pinot/compat/tests/TableOp.java", "diffHunk": "@@ -92,4 +102,34 @@ boolean runOp() {\n     }\n     return true;\n   }\n+\n+  private boolean createSchema() {\n+    try {\n+      RequestProcessor.sendPostRequestWithFile(CONTROLLER_URL + \"/schemas\", new File(_schemaFileName));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6359fb577d1cac1c38c840cae958039661304ef3"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxODU2ODkzOnYy", "diffSide": "RIGHT", "path": "pinot-integration-tests/src/test/java/org/apache/pinot/compat/tests/RequestProcessor.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQwNjozNToxOFrOIG04eg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQxODoyNDozMlrOIIt2CA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDAyODc5NA==", "bodyText": "I somehow feel we should wrapper something in pinot-client for management APIs. So both users and devs can reuse the code.\n@mayankshriv @mcvsubbu @Jackie-Jiang", "url": "https://github.com/apache/pinot/pull/6360#discussion_r544028794", "createdAt": "2020-12-16T06:35:18Z", "author": {"login": "xiangfu0"}, "path": "pinot-integration-tests/src/test/java/org/apache/pinot/compat/tests/RequestProcessor.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.compat.tests;\n+\n+import java.io.File;\n+import java.net.URI;\n+import org.apache.http.HttpEntity;\n+import org.apache.http.HttpVersion;\n+import org.apache.http.StatusLine;\n+import org.apache.http.client.methods.CloseableHttpResponse;\n+import org.apache.http.client.methods.HttpDelete;\n+import org.apache.http.client.methods.HttpGet;\n+import org.apache.http.client.methods.HttpPost;\n+import org.apache.http.client.methods.HttpUriRequest;\n+import org.apache.http.client.methods.RequestBuilder;\n+import org.apache.http.entity.ContentType;\n+import org.apache.http.entity.mime.HttpMultipartMode;\n+import org.apache.http.entity.mime.MultipartEntityBuilder;\n+import org.apache.http.entity.mime.content.ContentBody;\n+import org.apache.http.entity.mime.content.FileBody;\n+import org.apache.http.impl.client.CloseableHttpClient;\n+import org.apache.http.impl.client.HttpClients;\n+import org.apache.http.util.EntityUtils;\n+import org.apache.pinot.spi.utils.JsonUtils;\n+\n+\n+public class RequestProcessor {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6359fb577d1cac1c38c840cae958039661304ef3"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDQ3NTgzMg==", "bodyText": "If we do expose management APIs, then instead of using the same jar, I feel like adding another jar is better. The management API may have more dependencies on other internal things that we may not want pinot-client to depend on.\nBut then most admins will not be coding in java, and may be just fine with a well-defined REST API. So, a management API may not add much value.", "url": "https://github.com/apache/pinot/pull/6360#discussion_r544475832", "createdAt": "2020-12-16T17:14:25Z", "author": {"login": "mcvsubbu"}, "path": "pinot-integration-tests/src/test/java/org/apache/pinot/compat/tests/RequestProcessor.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.compat.tests;\n+\n+import java.io.File;\n+import java.net.URI;\n+import org.apache.http.HttpEntity;\n+import org.apache.http.HttpVersion;\n+import org.apache.http.StatusLine;\n+import org.apache.http.client.methods.CloseableHttpResponse;\n+import org.apache.http.client.methods.HttpDelete;\n+import org.apache.http.client.methods.HttpGet;\n+import org.apache.http.client.methods.HttpPost;\n+import org.apache.http.client.methods.HttpUriRequest;\n+import org.apache.http.client.methods.RequestBuilder;\n+import org.apache.http.entity.ContentType;\n+import org.apache.http.entity.mime.HttpMultipartMode;\n+import org.apache.http.entity.mime.MultipartEntityBuilder;\n+import org.apache.http.entity.mime.content.ContentBody;\n+import org.apache.http.entity.mime.content.FileBody;\n+import org.apache.http.impl.client.CloseableHttpClient;\n+import org.apache.http.impl.client.HttpClients;\n+import org.apache.http.util.EntityUtils;\n+import org.apache.pinot.spi.utils.JsonUtils;\n+\n+\n+public class RequestProcessor {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDAyODc5NA=="}, "originalCommit": {"oid": "6359fb577d1cac1c38c840cae958039661304ef3"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTk5MjQ5Ng==", "bodyText": "In general, I tend to confirm with DRY principle. There can be modularization as well as packaging to expose the right library to the right audience. Whether it is worth it in this particular case (especially if it increases the scope of the changes drastically), I am unsure. My $0.02.", "url": "https://github.com/apache/pinot/pull/6360#discussion_r545992496", "createdAt": "2020-12-18T17:51:31Z", "author": {"login": "mayankshriv"}, "path": "pinot-integration-tests/src/test/java/org/apache/pinot/compat/tests/RequestProcessor.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.compat.tests;\n+\n+import java.io.File;\n+import java.net.URI;\n+import org.apache.http.HttpEntity;\n+import org.apache.http.HttpVersion;\n+import org.apache.http.StatusLine;\n+import org.apache.http.client.methods.CloseableHttpResponse;\n+import org.apache.http.client.methods.HttpDelete;\n+import org.apache.http.client.methods.HttpGet;\n+import org.apache.http.client.methods.HttpPost;\n+import org.apache.http.client.methods.HttpUriRequest;\n+import org.apache.http.client.methods.RequestBuilder;\n+import org.apache.http.entity.ContentType;\n+import org.apache.http.entity.mime.HttpMultipartMode;\n+import org.apache.http.entity.mime.MultipartEntityBuilder;\n+import org.apache.http.entity.mime.content.ContentBody;\n+import org.apache.http.entity.mime.content.FileBody;\n+import org.apache.http.impl.client.CloseableHttpClient;\n+import org.apache.http.impl.client.HttpClients;\n+import org.apache.http.util.EntityUtils;\n+import org.apache.pinot.spi.utils.JsonUtils;\n+\n+\n+public class RequestProcessor {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDAyODc5NA=="}, "originalCommit": {"oid": "6359fb577d1cac1c38c840cae958039661304ef3"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjAwNjA5OQ==", "bodyText": "I don't think (or, at least, I hope not) @fx19880617 is proposing to do it as a part of the testing scope. I think it was a general question. We should take that elsewhere, since it definitely does not fit into this scope (of compat tests)", "url": "https://github.com/apache/pinot/pull/6360#discussion_r546006099", "createdAt": "2020-12-18T18:17:21Z", "author": {"login": "mcvsubbu"}, "path": "pinot-integration-tests/src/test/java/org/apache/pinot/compat/tests/RequestProcessor.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.compat.tests;\n+\n+import java.io.File;\n+import java.net.URI;\n+import org.apache.http.HttpEntity;\n+import org.apache.http.HttpVersion;\n+import org.apache.http.StatusLine;\n+import org.apache.http.client.methods.CloseableHttpResponse;\n+import org.apache.http.client.methods.HttpDelete;\n+import org.apache.http.client.methods.HttpGet;\n+import org.apache.http.client.methods.HttpPost;\n+import org.apache.http.client.methods.HttpUriRequest;\n+import org.apache.http.client.methods.RequestBuilder;\n+import org.apache.http.entity.ContentType;\n+import org.apache.http.entity.mime.HttpMultipartMode;\n+import org.apache.http.entity.mime.MultipartEntityBuilder;\n+import org.apache.http.entity.mime.content.ContentBody;\n+import org.apache.http.entity.mime.content.FileBody;\n+import org.apache.http.impl.client.CloseableHttpClient;\n+import org.apache.http.impl.client.HttpClients;\n+import org.apache.http.util.EntityUtils;\n+import org.apache.pinot.spi.utils.JsonUtils;\n+\n+\n+public class RequestProcessor {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDAyODc5NA=="}, "originalCommit": {"oid": "6359fb577d1cac1c38c840cae958039661304ef3"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjAxMDYzMg==", "bodyText": "Yep, and that's why my response started with \"In general\" :-)", "url": "https://github.com/apache/pinot/pull/6360#discussion_r546010632", "createdAt": "2020-12-18T18:24:32Z", "author": {"login": "mayankshriv"}, "path": "pinot-integration-tests/src/test/java/org/apache/pinot/compat/tests/RequestProcessor.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.compat.tests;\n+\n+import java.io.File;\n+import java.net.URI;\n+import org.apache.http.HttpEntity;\n+import org.apache.http.HttpVersion;\n+import org.apache.http.StatusLine;\n+import org.apache.http.client.methods.CloseableHttpResponse;\n+import org.apache.http.client.methods.HttpDelete;\n+import org.apache.http.client.methods.HttpGet;\n+import org.apache.http.client.methods.HttpPost;\n+import org.apache.http.client.methods.HttpUriRequest;\n+import org.apache.http.client.methods.RequestBuilder;\n+import org.apache.http.entity.ContentType;\n+import org.apache.http.entity.mime.HttpMultipartMode;\n+import org.apache.http.entity.mime.MultipartEntityBuilder;\n+import org.apache.http.entity.mime.content.ContentBody;\n+import org.apache.http.entity.mime.content.FileBody;\n+import org.apache.http.impl.client.CloseableHttpClient;\n+import org.apache.http.impl.client.HttpClients;\n+import org.apache.http.util.EntityUtils;\n+import org.apache.pinot.spi.utils.JsonUtils;\n+\n+\n+public class RequestProcessor {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDAyODc5NA=="}, "originalCommit": {"oid": "6359fb577d1cac1c38c840cae958039661304ef3"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQyMTUzMzM0OnYy", "diffSide": "RIGHT", "path": "pinot-integration-tests/src/test/java/org/apache/pinot/compat/tests/TableOp.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxNzoxMTozNlrOIHQCQA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQyMzozMzoxMFrOII2GSw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDQ3MzY2NA==", "bodyText": "You may want to put this in another file, it will be needed in all the ops.", "url": "https://github.com/apache/pinot/pull/6360#discussion_r544473664", "createdAt": "2020-12-16T17:11:36Z", "author": {"login": "mcvsubbu"}, "path": "pinot-integration-tests/src/test/java/org/apache/pinot/compat/tests/TableOp.java", "diffHunk": "@@ -44,6 +45,9 @@\n   private String _schemaFileName;\n   private Op _op;\n   private String _tableConfigFileName;\n+  private String _tableName;\n+\n+  private static final String CONTROLLER_URL = \"localhost:9000\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6359fb577d1cac1c38c840cae958039661304ef3"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjE0NTg2Nw==", "bodyText": "Let me create a CompatTestConstants class, and put it in that file.", "url": "https://github.com/apache/pinot/pull/6360#discussion_r546145867", "createdAt": "2020-12-18T23:33:10Z", "author": {"login": "jtao15"}, "path": "pinot-integration-tests/src/test/java/org/apache/pinot/compat/tests/TableOp.java", "diffHunk": "@@ -44,6 +45,9 @@\n   private String _schemaFileName;\n   private Op _op;\n   private String _tableConfigFileName;\n+  private String _tableName;\n+\n+  private static final String CONTROLLER_URL = \"localhost:9000\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDQ3MzY2NA=="}, "originalCommit": {"oid": "6359fb577d1cac1c38c840cae958039661304ef3"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzMTcwMzg2OnYy", "diffSide": "RIGHT", "path": "pinot-integration-tests/src/test/java/org/apache/pinot/compat/tests/RequestProcessor.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQxNzoxNToxM1rOIIrhIw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOVQwMTowNjoxM1rOII3ZWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTk3MjUxNQ==", "bodyText": "RequestProcessor is too generic a name, can we use a more readable name? This is just a soft suggestion, and not a blocking comment.", "url": "https://github.com/apache/pinot/pull/6360#discussion_r545972515", "createdAt": "2020-12-18T17:15:13Z", "author": {"login": "mayankshriv"}, "path": "pinot-integration-tests/src/test/java/org/apache/pinot/compat/tests/RequestProcessor.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.compat.tests;\n+\n+import java.io.File;\n+import java.net.URI;\n+import org.apache.http.HttpEntity;\n+import org.apache.http.HttpVersion;\n+import org.apache.http.StatusLine;\n+import org.apache.http.client.methods.CloseableHttpResponse;\n+import org.apache.http.client.methods.HttpDelete;\n+import org.apache.http.client.methods.HttpGet;\n+import org.apache.http.client.methods.HttpPost;\n+import org.apache.http.client.methods.HttpUriRequest;\n+import org.apache.http.client.methods.RequestBuilder;\n+import org.apache.http.entity.ContentType;\n+import org.apache.http.entity.mime.HttpMultipartMode;\n+import org.apache.http.entity.mime.MultipartEntityBuilder;\n+import org.apache.http.entity.mime.content.ContentBody;\n+import org.apache.http.entity.mime.content.FileBody;\n+import org.apache.http.impl.client.CloseableHttpClient;\n+import org.apache.http.impl.client.HttpClients;\n+import org.apache.http.util.EntityUtils;\n+import org.apache.pinot.spi.utils.JsonUtils;\n+\n+\n+public class RequestProcessor {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6359fb577d1cac1c38c840cae958039661304ef3"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjE0NTUwNg==", "bodyText": "Let's call it CompatTestRequestProcessor then.", "url": "https://github.com/apache/pinot/pull/6360#discussion_r546145506", "createdAt": "2020-12-18T23:31:36Z", "author": {"login": "jtao15"}, "path": "pinot-integration-tests/src/test/java/org/apache/pinot/compat/tests/RequestProcessor.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.compat.tests;\n+\n+import java.io.File;\n+import java.net.URI;\n+import org.apache.http.HttpEntity;\n+import org.apache.http.HttpVersion;\n+import org.apache.http.StatusLine;\n+import org.apache.http.client.methods.CloseableHttpResponse;\n+import org.apache.http.client.methods.HttpDelete;\n+import org.apache.http.client.methods.HttpGet;\n+import org.apache.http.client.methods.HttpPost;\n+import org.apache.http.client.methods.HttpUriRequest;\n+import org.apache.http.client.methods.RequestBuilder;\n+import org.apache.http.entity.ContentType;\n+import org.apache.http.entity.mime.HttpMultipartMode;\n+import org.apache.http.entity.mime.MultipartEntityBuilder;\n+import org.apache.http.entity.mime.content.ContentBody;\n+import org.apache.http.entity.mime.content.FileBody;\n+import org.apache.http.impl.client.CloseableHttpClient;\n+import org.apache.http.impl.client.HttpClients;\n+import org.apache.http.util.EntityUtils;\n+import org.apache.pinot.spi.utils.JsonUtils;\n+\n+\n+public class RequestProcessor {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTk3MjUxNQ=="}, "originalCommit": {"oid": "6359fb577d1cac1c38c840cae958039661304ef3"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjE1NzU3OA==", "bodyText": "Perhaps HttpRequestProcessor but let us see if we can leverage the existing request processor code from tests , like @fx19880617  suggested", "url": "https://github.com/apache/pinot/pull/6360#discussion_r546157578", "createdAt": "2020-12-19T00:14:47Z", "author": {"login": "mcvsubbu"}, "path": "pinot-integration-tests/src/test/java/org/apache/pinot/compat/tests/RequestProcessor.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.compat.tests;\n+\n+import java.io.File;\n+import java.net.URI;\n+import org.apache.http.HttpEntity;\n+import org.apache.http.HttpVersion;\n+import org.apache.http.StatusLine;\n+import org.apache.http.client.methods.CloseableHttpResponse;\n+import org.apache.http.client.methods.HttpDelete;\n+import org.apache.http.client.methods.HttpGet;\n+import org.apache.http.client.methods.HttpPost;\n+import org.apache.http.client.methods.HttpUriRequest;\n+import org.apache.http.client.methods.RequestBuilder;\n+import org.apache.http.entity.ContentType;\n+import org.apache.http.entity.mime.HttpMultipartMode;\n+import org.apache.http.entity.mime.MultipartEntityBuilder;\n+import org.apache.http.entity.mime.content.ContentBody;\n+import org.apache.http.entity.mime.content.FileBody;\n+import org.apache.http.impl.client.CloseableHttpClient;\n+import org.apache.http.impl.client.HttpClients;\n+import org.apache.http.util.EntityUtils;\n+import org.apache.pinot.spi.utils.JsonUtils;\n+\n+\n+public class RequestProcessor {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTk3MjUxNQ=="}, "originalCommit": {"oid": "6359fb577d1cac1c38c840cae958039661304ef3"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjE2NzEyOQ==", "bodyText": "I see now, let me use ControllerTest functions instead.", "url": "https://github.com/apache/pinot/pull/6360#discussion_r546167129", "createdAt": "2020-12-19T01:06:13Z", "author": {"login": "jtao15"}, "path": "pinot-integration-tests/src/test/java/org/apache/pinot/compat/tests/RequestProcessor.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.compat.tests;\n+\n+import java.io.File;\n+import java.net.URI;\n+import org.apache.http.HttpEntity;\n+import org.apache.http.HttpVersion;\n+import org.apache.http.StatusLine;\n+import org.apache.http.client.methods.CloseableHttpResponse;\n+import org.apache.http.client.methods.HttpDelete;\n+import org.apache.http.client.methods.HttpGet;\n+import org.apache.http.client.methods.HttpPost;\n+import org.apache.http.client.methods.HttpUriRequest;\n+import org.apache.http.client.methods.RequestBuilder;\n+import org.apache.http.entity.ContentType;\n+import org.apache.http.entity.mime.HttpMultipartMode;\n+import org.apache.http.entity.mime.MultipartEntityBuilder;\n+import org.apache.http.entity.mime.content.ContentBody;\n+import org.apache.http.entity.mime.content.FileBody;\n+import org.apache.http.impl.client.CloseableHttpClient;\n+import org.apache.http.impl.client.HttpClients;\n+import org.apache.http.util.EntityUtils;\n+import org.apache.pinot.spi.utils.JsonUtils;\n+\n+\n+public class RequestProcessor {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTk3MjUxNQ=="}, "originalCommit": {"oid": "6359fb577d1cac1c38c840cae958039661304ef3"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzMjkyNDM3OnYy", "diffSide": "RIGHT", "path": "pinot-integration-tests/src/test/java/org/apache/pinot/compat/tests/CompatTestConstants.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOVQwMDoyMzoyN1rOII26xg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOVQwMDoyMzoyN1rOII26xg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjE1OTMwMg==", "bodyText": "We are already in compat.tests package, so let us not call it CompatTestConstants\nFor now, call it ClusterDescriptor we will evolve it as we add more operators. My thought is that eventually we will get these from env variables", "url": "https://github.com/apache/pinot/pull/6360#discussion_r546159302", "createdAt": "2020-12-19T00:23:27Z", "author": {"login": "mcvsubbu"}, "path": "pinot-integration-tests/src/test/java/org/apache/pinot/compat/tests/CompatTestConstants.java", "diffHunk": "@@ -0,0 +1,23 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.compat.tests;\n+\n+public class CompatTestConstants {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "92156f942d357781a3b6fa4adebec1089a047ed3"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzODQ4ODc4OnYy", "diffSide": "RIGHT", "path": "pinot-integration-tests/src/test/java/org/apache/pinot/compat/tests/TableOp.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQyMDoxMzozM1rOIJkqSA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQyMDoxMzozM1rOIJkqSA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjkwODc0NA==", "bodyText": "Use JsonUtils.fileToObject() method. Already there.", "url": "https://github.com/apache/pinot/pull/6360#discussion_r546908744", "createdAt": "2020-12-21T20:13:33Z", "author": {"login": "mcvsubbu"}, "path": "pinot-integration-tests/src/test/java/org/apache/pinot/compat/tests/TableOp.java", "diffHunk": "@@ -92,4 +101,45 @@ boolean runOp() {\n     }\n     return true;\n   }\n+\n+  private boolean createSchema() {\n+    try {\n+      ControllerTest.sendPostRequest(\n+          ControllerRequestURLBuilder.baseUrl(CONTROLLER_URL).forSchemaCreate(),\n+          FileUtils.readFileToString(new File(_schemaFileName)));\n+      return true;\n+    } catch (IOException e) {\n+      System.out.println(e.getMessage());\n+      return false;\n+    }\n+  }\n+\n+  private boolean createTable() {\n+    try {\n+      ControllerTest.sendPostRequest(\n+          ControllerRequestURLBuilder.baseUrl(CONTROLLER_URL).forSchemaCreate(),\n+          FileUtils.readFileToString(new File(_schemaFileName)));\n+      return true;\n+    } catch (IOException e) {\n+      System.out.println(e.getMessage());\n+      return false;\n+    }\n+  }\n+\n+  private boolean deleteTable() {\n+    try {\n+      ControllerTest.sendDeleteRequest(\n+          ControllerRequestURLBuilder.baseUrl(CONTROLLER_URL).forTableDelete(getTableNameFromTableConfigFile()));\n+      return true;\n+    } catch (IOException e) {\n+      System.out.println(e.getMessage());\n+      return false;\n+    }\n+  }\n+\n+  private String getTableNameFromTableConfigFile() throws IOException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1ae9ec0ad00ad430146b139a14ce43d31a6fb77b"}, "originalPosition": 81}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzOTA5Nzk2OnYy", "diffSide": "RIGHT", "path": "pinot-integration-tests/src/test/java/org/apache/pinot/compat/tests/TableOp.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQwMDoyNjoxM1rOIJqLyw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQwMDoyNjoxM1rOIJqLyw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Njk5OTI0Mw==", "bodyText": "Let us change this to an error log for now. We can then configure logs appropriately to get whatever we want on the console.\nAlso, include the  table config file path on all log messages", "url": "https://github.com/apache/pinot/pull/6360#discussion_r546999243", "createdAt": "2020-12-22T00:26:13Z", "author": {"login": "mcvsubbu"}, "path": "pinot-integration-tests/src/test/java/org/apache/pinot/compat/tests/TableOp.java", "diffHunk": "@@ -92,4 +101,40 @@ boolean runOp() {\n     }\n     return true;\n   }\n+\n+  private boolean createSchema() {\n+    try {\n+      ControllerTest.sendPostRequest(\n+          ControllerRequestURLBuilder.baseUrl(CONTROLLER_URL).forSchemaCreate(),\n+          FileUtils.readFileToString(new File(_schemaFileName)));\n+      return true;\n+    } catch (IOException e) {\n+      System.out.println(e.getMessage());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "52aa498eb04f784fda46d631e0cf097974a01a0f"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzOTA5ODMwOnYy", "diffSide": "RIGHT", "path": "pinot-integration-tests/src/test/java/org/apache/pinot/compat/tests/TableOp.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQwMDoyNjoyMVrOIJqL9g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQwMDoyNjoyMVrOIJqL9g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Njk5OTI4Ng==", "bodyText": "error log", "url": "https://github.com/apache/pinot/pull/6360#discussion_r546999286", "createdAt": "2020-12-22T00:26:21Z", "author": {"login": "mcvsubbu"}, "path": "pinot-integration-tests/src/test/java/org/apache/pinot/compat/tests/TableOp.java", "diffHunk": "@@ -92,4 +101,40 @@ boolean runOp() {\n     }\n     return true;\n   }\n+\n+  private boolean createSchema() {\n+    try {\n+      ControllerTest.sendPostRequest(\n+          ControllerRequestURLBuilder.baseUrl(CONTROLLER_URL).forSchemaCreate(),\n+          FileUtils.readFileToString(new File(_schemaFileName)));\n+      return true;\n+    } catch (IOException e) {\n+      System.out.println(e.getMessage());\n+      return false;\n+    }\n+  }\n+\n+  private boolean createTable() {\n+    try {\n+      ControllerTest.sendPostRequest(\n+          ControllerRequestURLBuilder.baseUrl(CONTROLLER_URL).forSchemaCreate(),\n+          FileUtils.readFileToString(new File(_schemaFileName)));\n+      return true;\n+    } catch (IOException e) {\n+      System.out.println(e.getMessage());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "52aa498eb04f784fda46d631e0cf097974a01a0f"}, "originalPosition": 65}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzOTA5OTAxOnYy", "diffSide": "RIGHT", "path": "pinot-integration-tests/src/test/java/org/apache/pinot/compat/tests/TableOp.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQwMDoyNjo0MFrOIJqMUQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQwMDoyNjo0MFrOIJqMUQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Njk5OTM3Nw==", "bodyText": "change to error log", "url": "https://github.com/apache/pinot/pull/6360#discussion_r546999377", "createdAt": "2020-12-22T00:26:40Z", "author": {"login": "mcvsubbu"}, "path": "pinot-integration-tests/src/test/java/org/apache/pinot/compat/tests/TableOp.java", "diffHunk": "@@ -92,4 +101,40 @@ boolean runOp() {\n     }\n     return true;\n   }\n+\n+  private boolean createSchema() {\n+    try {\n+      ControllerTest.sendPostRequest(\n+          ControllerRequestURLBuilder.baseUrl(CONTROLLER_URL).forSchemaCreate(),\n+          FileUtils.readFileToString(new File(_schemaFileName)));\n+      return true;\n+    } catch (IOException e) {\n+      System.out.println(e.getMessage());\n+      return false;\n+    }\n+  }\n+\n+  private boolean createTable() {\n+    try {\n+      ControllerTest.sendPostRequest(\n+          ControllerRequestURLBuilder.baseUrl(CONTROLLER_URL).forSchemaCreate(),\n+          FileUtils.readFileToString(new File(_schemaFileName)));\n+      return true;\n+    } catch (IOException e) {\n+      System.out.println(e.getMessage());\n+      return false;\n+    }\n+  }\n+\n+  private boolean deleteTable() {\n+    try {\n+      TableConfig tableConfig = JsonUtils.fileToObject(new File(_tableConfigFileName), TableConfig.class);\n+      ControllerTest.sendDeleteRequest(\n+          ControllerRequestURLBuilder.baseUrl(CONTROLLER_URL).forTableDelete(tableConfig.getTableName()));\n+      return true;\n+    } catch (IOException e) {\n+      System.out.println(e.getMessage());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "52aa498eb04f784fda46d631e0cf097974a01a0f"}, "originalPosition": 77}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzOTEwMjMwOnYy", "diffSide": "RIGHT", "path": "pinot-integration-tests/src/test/java/org/apache/pinot/compat/tests/TableOp.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQwMDoyODozNFrOIJqOIg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQwMDoyODozNFrOIJqOIg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Njk5OTg0Mg==", "bodyText": "dont need this anymore", "url": "https://github.com/apache/pinot/pull/6360#discussion_r546999842", "createdAt": "2020-12-22T00:28:34Z", "author": {"login": "mcvsubbu"}, "path": "pinot-integration-tests/src/test/java/org/apache/pinot/compat/tests/TableOp.java", "diffHunk": "@@ -45,6 +54,8 @@\n   private Op _op;\n   private String _tableConfigFileName;\n \n+  private static final String TABLE_NAME = \"tableName\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "52aa498eb04f784fda46d631e0cf097974a01a0f"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzOTMwMjE2OnYy", "diffSide": "RIGHT", "path": "pinot-integration-tests/src/test/java/org/apache/pinot/compat/tests/TableOp.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQwMjoxNzo1NFrOIJr_1g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQwMjoxNzo1NFrOIJr_1g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzAyODk1MA==", "bodyText": "Please avoid import static", "url": "https://github.com/apache/pinot/pull/6360#discussion_r547028950", "createdAt": "2020-12-22T02:17:54Z", "author": {"login": "mcvsubbu"}, "path": "pinot-integration-tests/src/test/java/org/apache/pinot/compat/tests/TableOp.java", "diffHunk": "@@ -19,6 +19,17 @@\n package org.apache.pinot.compat.tests;\n \n import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n+import java.io.File;\n+import java.io.IOException;\n+import org.apache.commons.io.FileUtils;\n+import org.apache.pinot.controller.helix.ControllerRequestURLBuilder;\n+import org.apache.pinot.controller.helix.ControllerTest;\n+import org.apache.pinot.spi.config.table.TableConfig;\n+import org.apache.pinot.spi.utils.JsonUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import static org.apache.pinot.compat.tests.ClusterDescriptor.CONTROLLER_URL;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1e632205207a504503659226b906525f8eeb59ed"}, "originalPosition": 14}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3044, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}