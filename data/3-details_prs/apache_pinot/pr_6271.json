{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTIyMTE0ODk4", "number": 6271, "title": "Adding config utils to apply environment variables and apply it to table config", "bodyText": "Description\nSupport using environment variables in the format of ${VAR_NAME:DEFAULT_VALUE} in Pinot table configs.\nThis feature allows users to hide the secret(AWS credential) or template cluster-based configs (Kafka broker list).\nSample Table config:\n{\n  \"tableName\": \"pullRequestMergedEvents\",\n  \"tableType\": \"REALTIME\",\n  \"segmentsConfig\": {\n    \"timeColumnName\": \"mergedTimeMillis\",\n    \"timeType\": \"MILLISECONDS\",\n    \"retentionTimeUnit\": \"DAYS\",\n    \"retentionTimeValue\": \"60\",\n    \"schemaName\": \"pullRequestMergedEvents\",\n    \"replication\": \"1\",\n    \"replicasPerPartition\": \"1\"\n  },\n  \"tenants\": {},\n  \"tableIndexConfig\": {\n    \"loadMode\": \"MMAP\",\n    \"invertedIndexColumns\": [\n      \"organization\",\n      \"repo\"\n    ],\n    \"streamConfigs\": {\n      \"streamType\": \"kafka\",\n      \"stream.kafka.consumer.type\": \"simple\",\n      \"stream.kafka.topic.name\": \"pullRequestMergedEvents\",\n      \"stream.kafka.decoder.class.name\": \"${KAFKA_DECODER_CLASS:org.apache.pinot.plugin.stream.kafka.KafkaJSONMessageDecoder}\",\n      \"stream.kafka.consumer.factory.class.name\": \"${KAFKA_CONSUMER_FACTORY_CLASS:org.apache.pinot.plugin.stream.kafka20.KafkaConsumerFactory}\",\n      \"stream.kafka.zk.broker.url\": \"${AWS_MSK_ZK}\",\n      \"stream.kafka.broker.list\": \"${AWS_MSK_KAFKA}\",\n      \"realtime.segment.flush.threshold.time\": \"${REALTIME_SEGMENT_FLUSH_THRESHOD_TIME:12h}\",\n      \"realtime.segment.flush.threshold.size\": \"${REALTIME_SEGMENT_FLUSH_THRESHOD_SIZE:100000}\",\n      \"stream.kafka.consumer.prop.auto.offset.reset\": \"smallest\"\n    }\n  },\n  \"metadata\": {\n    \"customConfigs\": {}\n  }\n}\n\nNext:\nSupport the same feature in all the Pinot components: Controller/Broker/Server/Minion when starting them with configuration files.\nRelease Notes\nSupport using environment variables in Pinot table configs with the format of ${VAR_NAME:DEFAULT_VALUE}.", "createdAt": "2020-11-17T03:33:24Z", "url": "https://github.com/apache/pinot/pull/6271", "merged": true, "mergeCommit": {"oid": "6d655f9bdc3c3934cdbe6e823823e84ab3acb02a"}, "closed": true, "closedAt": "2020-11-19T00:21:36Z", "author": {"login": "xiangfu0"}, "timelineItems": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABddRIIBAH2gAyNTIyMTE0ODk4OjIxZGRlOTRlN2M2MzllYzNiNTVmY2E3MzIyNTgzNGViMWRkODg1ZTE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdd1UHpgFqTUzMzkwNjIzMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "21dde94e7c639ec3b55fca73225834eb1dd885e1", "author": {"user": {"login": "xiangfu0", "name": "Xiang Fu"}}, "url": "https://github.com/apache/pinot/commit/21dde94e7c639ec3b55fca73225834eb1dd885e1", "committedDate": "2020-11-17T03:38:18Z", "message": "Adding config utils to apply environment variables and apply it to table config"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "4b44e3d853fa9aa4f1a65cbf9cd185bcf8c431d3", "author": {"user": {"login": "xiangfu0", "name": "Xiang Fu"}}, "url": "https://github.com/apache/pinot/commit/4b44e3d853fa9aa4f1a65cbf9cd185bcf8c431d3", "committedDate": "2020-11-17T03:25:17Z", "message": "Adding config utils to apply environment variables and apply it to table config"}, "afterCommit": {"oid": "21dde94e7c639ec3b55fca73225834eb1dd885e1", "author": {"user": {"login": "xiangfu0", "name": "Xiang Fu"}}, "url": "https://github.com/apache/pinot/commit/21dde94e7c639ec3b55fca73225834eb1dd885e1", "committedDate": "2020-11-17T03:38:18Z", "message": "Adding config utils to apply environment variables and apply it to table config"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMyNjY3MzYy", "url": "https://github.com/apache/pinot/pull/6271#pullrequestreview-532667362", "createdAt": "2020-11-17T18:26:16Z", "commit": {"oid": "21dde94e7c639ec3b55fca73225834eb1dd885e1"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QxODoyNjoxNlrOH1DOXQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QxODoyNjoxNlrOH1DOXQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTM4OTQwNQ==", "bodyText": "shall it be case insenstive or require all caps?", "url": "https://github.com/apache/pinot/pull/6271#discussion_r525389405", "createdAt": "2020-11-17T18:26:16Z", "author": {"login": "yupeng9"}, "path": "pinot-spi/src/main/java/org/apache/pinot/spi/config/ConfigUtils.java", "diffHunk": "@@ -0,0 +1,90 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.spi.config;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.node.ArrayNode;\n+import com.fasterxml.jackson.databind.node.JsonNodeFactory;\n+import com.fasterxml.jackson.databind.node.JsonNodeType;\n+import java.io.IOException;\n+import java.util.Iterator;\n+import java.util.Map;\n+import org.apache.pinot.spi.utils.JsonUtils;\n+\n+\n+public class ConfigUtils {\n+  private static final Map<String, String> ENVIRONMENT_VARIABLES = System.getenv();\n+\n+  /**\n+   * Apply environment variables to any given BaseJsonConfig.\n+   *\n+   * @return Config with environment variable applied.\n+   */\n+  public static <T extends BaseJsonConfig> T applyConfigWithEnvVariables(T config) {\n+    JsonNode jsonNode;\n+    try {\n+      jsonNode = applyConfigWithEnvVariables(config.toJsonNode());\n+    } catch (RuntimeException e) {\n+      throw new RuntimeException(String\n+          .format(\"Unable to apply environment variables on json config class [%s].\", config.getClass().getName()), e);\n+    }\n+    try {\n+      return (T) JsonUtils.jsonNodeToObject(jsonNode, config.getClass());\n+    } catch (IOException e) {\n+      throw new RuntimeException(String\n+          .format(\"Unable to read JsonConfig to class [%s] after applying environment variables, jsonConfig is: '%s'.\",\n+              config.getClass().getName(), jsonNode.toString()), e);\n+    }\n+  }\n+\n+  private static JsonNode applyConfigWithEnvVariables(JsonNode jsonNode) {\n+    final JsonNodeType nodeType = jsonNode.getNodeType();\n+    switch (nodeType) {\n+      case OBJECT:\n+        if (jsonNode.size() > 0) {\n+          Iterator<Map.Entry<String, JsonNode>> iterator = jsonNode.fields();\n+          while (iterator.hasNext()) {\n+            final Map.Entry<String, JsonNode> next = iterator.next();\n+            next.setValue(applyConfigWithEnvVariables(next.getValue()));\n+          }\n+        }\n+        break;\n+      case ARRAY:\n+        if (jsonNode.isArray()) {\n+          ArrayNode arrayNode = (ArrayNode) jsonNode;\n+          for (int i = 0; i < arrayNode.size(); i++) {\n+            JsonNode arrayElement = arrayNode.get(i);\n+            arrayNode.set(i, applyConfigWithEnvVariables(arrayElement));\n+          }\n+        }\n+        break;\n+      case STRING:\n+        final String field = jsonNode.asText();\n+        if (field.startsWith(\"${\") && field.endsWith(\"}\")) {\n+          final String envVarKey = field.substring(2, field.length() - 1);\n+          if (ENVIRONMENT_VARIABLES.containsKey(envVarKey)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "21dde94e7c639ec3b55fca73225834eb1dd885e1"}, "originalPosition": 81}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d32f3b027f0c0f1a5d2234e9b6889456c95b9e32", "author": {"user": {"login": "xiangfu0", "name": "Xiang Fu"}}, "url": "https://github.com/apache/pinot/commit/d32f3b027f0c0f1a5d2234e9b6889456c95b9e32", "committedDate": "2020-11-17T19:34:04Z", "message": "Support default value in env variable"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMyODM2NTIx", "url": "https://github.com/apache/pinot/pull/6271#pullrequestreview-532836521", "createdAt": "2020-11-17T21:42:12Z", "commit": {"oid": "d32f3b027f0c0f1a5d2234e9b6889456c95b9e32"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QyMTo0MjoxM1rOH1MoXQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QyMTo0MjoxM1rOH1MoXQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTU0MzUxNw==", "bodyText": "yup, it makes sense to follow unix convention", "url": "https://github.com/apache/pinot/pull/6271#discussion_r525543517", "createdAt": "2020-11-17T21:42:13Z", "author": {"login": "yupeng9"}, "path": "pinot-spi/src/main/java/org/apache/pinot/spi/config/ConfigUtils.java", "diffHunk": "@@ -0,0 +1,90 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.spi.config;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.node.ArrayNode;\n+import com.fasterxml.jackson.databind.node.JsonNodeFactory;\n+import com.fasterxml.jackson.databind.node.JsonNodeType;\n+import java.io.IOException;\n+import java.util.Iterator;\n+import java.util.Map;\n+import org.apache.pinot.spi.utils.JsonUtils;\n+\n+\n+public class ConfigUtils {\n+  private static final Map<String, String> ENVIRONMENT_VARIABLES = System.getenv();\n+\n+  /**\n+   * Apply environment variables to any given BaseJsonConfig.\n+   *\n+   * @return Config with environment variable applied.\n+   */\n+  public static <T extends BaseJsonConfig> T applyConfigWithEnvVariables(T config) {\n+    JsonNode jsonNode;\n+    try {\n+      jsonNode = applyConfigWithEnvVariables(config.toJsonNode());\n+    } catch (RuntimeException e) {\n+      throw new RuntimeException(String\n+          .format(\"Unable to apply environment variables on json config class [%s].\", config.getClass().getName()), e);\n+    }\n+    try {\n+      return (T) JsonUtils.jsonNodeToObject(jsonNode, config.getClass());\n+    } catch (IOException e) {\n+      throw new RuntimeException(String\n+          .format(\"Unable to read JsonConfig to class [%s] after applying environment variables, jsonConfig is: '%s'.\",\n+              config.getClass().getName(), jsonNode.toString()), e);\n+    }\n+  }\n+\n+  private static JsonNode applyConfigWithEnvVariables(JsonNode jsonNode) {\n+    final JsonNodeType nodeType = jsonNode.getNodeType();\n+    switch (nodeType) {\n+      case OBJECT:\n+        if (jsonNode.size() > 0) {\n+          Iterator<Map.Entry<String, JsonNode>> iterator = jsonNode.fields();\n+          while (iterator.hasNext()) {\n+            final Map.Entry<String, JsonNode> next = iterator.next();\n+            next.setValue(applyConfigWithEnvVariables(next.getValue()));\n+          }\n+        }\n+        break;\n+      case ARRAY:\n+        if (jsonNode.isArray()) {\n+          ArrayNode arrayNode = (ArrayNode) jsonNode;\n+          for (int i = 0; i < arrayNode.size(); i++) {\n+            JsonNode arrayElement = arrayNode.get(i);\n+            arrayNode.set(i, applyConfigWithEnvVariables(arrayElement));\n+          }\n+        }\n+        break;\n+      case STRING:\n+        final String field = jsonNode.asText();\n+        if (field.startsWith(\"${\") && field.endsWith(\"}\")) {\n+          final String envVarKey = field.substring(2, field.length() - 1);\n+          if (ENVIRONMENT_VARIABLES.containsKey(envVarKey)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTM4OTQwNQ=="}, "originalCommit": {"oid": "21dde94e7c639ec3b55fca73225834eb1dd885e1"}, "originalPosition": 81}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMzOTA2MjMz", "url": "https://github.com/apache/pinot/pull/6271#pullrequestreview-533906233", "createdAt": "2020-11-18T21:47:59Z", "commit": {"oid": "d32f3b027f0c0f1a5d2234e9b6889456c95b9e32"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1808, "cost": 1, "resetAt": "2021-10-28T18:00:02Z"}}}