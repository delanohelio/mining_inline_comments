{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA0OTUzMDc5", "number": 5266, "title": "Add PinotServiceManager to start Pinot components", "bodyText": "Updates\n\nDefines Enum ServiceRole: CONTROLLER/BROKER/SERVER/MINION for the Pinot Components to manage\nDefines interface: ServiceStartable, so each role could implement its own way to start/stop it.\nMake ControllerStarter,HelixBrokerStarter, HelixServerStarter, MinionStarter to implement interface ServiceStartable.\nImplement PinotServiceManagerStarter as a new entry point to manage all pinot roles lifecycles.\nMake ServiceStatus could handle multiple Pinot roles.\nProvide REST API to start/stop Pinot Roles with default configs.\nMove ControllerStarter/BrokerStarter/ServerStarter commands to use new ServiceManagerStarer command. Hence all Quickstarts will use it transparently.\n\nSample Usage:\n\nStart PinotServiceManager along with controller/broker/server by default.\n\nbin/start-service-manager.sh -zkAddress localhost:2181 -clusterName pinot-service-demo -port 8055\n\n\nStart PinotServiceManager along with Broker&Server with default configs\n\nbin/start-service-manager.sh -zkAddress localhost:2181 -clusterName pinot-service-demo -port 8055 -bootstrapServices BROKER SERVER\n\n\nStart PinotServiceManager along with Broker&Server with bootstrap configs.\n\nbin/start-service-manager.sh -zkAddress localhost:2181 -clusterName pinot-service-demo -port 8055 -bootstrapConfigPaths /path/to/pinot-broker.conf /path/to/pinot-server.conf\n\n\nOnce PinotServiceManager is up, it exposes APIs using swagger.\n\n\n\n\nMETHOD\nAPI\nDescription\n\n\n\n\nGET\n/health\nChecking Pinot Service health\n\n\nGET\n/health/services\nChecking all services health for a service\n\n\nGET\n/health/services/{instanceName}\nChecking service health for an instance\n\n\nGET\n/instances\nGet Pinot Instances Status\n\n\nGET\n/instances/{instanceName}\nGet Pinot Instance Status\n\n\nPOST\n/instances/{role}\nStart a Pinot instance\n\n\nDELETE\n/instances\nStop all Pinot Instances\n\n\nDELETE\n/instances/{instanceName}\nStop a Pinot Instance\n\n\nDELETE\n/instances/roles/{role}\nStop Pinot Instances for a Role\n\n\n\nNote: backward incompatible:\n\nHelixBrokerStarter, method shutdown() is replaced as stop()\nHelixServerStarter requires an explicitly call of start() to start it. In\nthe old behavior, there is no start() method and the constructor will also take care of start server.", "createdAt": "2020-04-17T06:46:12Z", "url": "https://github.com/apache/pinot/pull/5266", "merged": true, "mergeCommit": {"oid": "3514a1730a3c7e8607c731c5aee4a000d6959fdc"}, "closed": true, "closedAt": "2020-05-27T17:34:16Z", "author": {"login": "xiangfu0"}, "timelineItems": {"totalCount": 19, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcYb_J6gBqjMyNDMxMzA4MzY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABclUpbfABqjMzNzY4OTkyODA=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "be8ea27161d8f29f101f402d32707610930118d1", "author": {"user": {"login": "xiangfu0", "name": "Xiang Fu"}}, "url": "https://github.com/apache/pinot/commit/be8ea27161d8f29f101f402d32707610930118d1", "committedDate": "2020-04-17T06:35:54Z", "message": "Adding PinotServiceManager to manage Pinot Startable lifecycle"}, "afterCommit": {"oid": "ffed9d22afe0e751c3c8aea4e5fa9ce3a91a12bc", "author": {"user": {"login": "xiangfu0", "name": "Xiang Fu"}}, "url": "https://github.com/apache/pinot/commit/ffed9d22afe0e751c3c8aea4e5fa9ce3a91a12bc", "committedDate": "2020-04-17T07:16:31Z", "message": "Adding PinotServiceManager to manage Pinot Startable lifecycle"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ffed9d22afe0e751c3c8aea4e5fa9ce3a91a12bc", "author": {"user": {"login": "xiangfu0", "name": "Xiang Fu"}}, "url": "https://github.com/apache/pinot/commit/ffed9d22afe0e751c3c8aea4e5fa9ce3a91a12bc", "committedDate": "2020-04-17T07:16:31Z", "message": "Adding PinotServiceManager to manage Pinot Startable lifecycle"}, "afterCommit": {"oid": "c3663447abb9e9a774e7a1a7248fc1fd9dd34602", "author": {"user": {"login": "xiangfu0", "name": "Xiang Fu"}}, "url": "https://github.com/apache/pinot/commit/c3663447abb9e9a774e7a1a7248fc1fd9dd34602", "committedDate": "2020-04-17T07:45:10Z", "message": "Adding PinotServiceManager to manage Pinot Startable lifecycle"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b3f5b4ea58a839a1602de115028195f219807f3e", "author": {"user": {"login": "xiangfu0", "name": "Xiang Fu"}}, "url": "https://github.com/apache/pinot/commit/b3f5b4ea58a839a1602de115028195f219807f3e", "committedDate": "2020-04-21T05:49:58Z", "message": "Default to start controller/broker/server in StartServiceManagerCommand"}, "afterCommit": {"oid": "b44fe54949bd329b49c63d07430c902fce4f0284", "author": {"user": {"login": "xiangfu0", "name": "Xiang Fu"}}, "url": "https://github.com/apache/pinot/commit/b44fe54949bd329b49c63d07430c902fce4f0284", "committedDate": "2020-04-21T07:19:47Z", "message": "Adding PinotServiceManager to manage Pinot Startable lifecycle."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b44fe54949bd329b49c63d07430c902fce4f0284", "author": {"user": {"login": "xiangfu0", "name": "Xiang Fu"}}, "url": "https://github.com/apache/pinot/commit/b44fe54949bd329b49c63d07430c902fce4f0284", "committedDate": "2020-04-21T07:19:47Z", "message": "Adding PinotServiceManager to manage Pinot Startable lifecycle."}, "afterCommit": {"oid": "22d82374d2f42be9e27684a54d5d72ffb5fe70b8", "author": {"user": {"login": "xiangfu0", "name": "Xiang Fu"}}, "url": "https://github.com/apache/pinot/commit/22d82374d2f42be9e27684a54d5d72ffb5fe70b8", "committedDate": "2020-04-21T08:33:53Z", "message": "Adding PinotServiceManager to manage Pinot Startable lifecycle."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "22d82374d2f42be9e27684a54d5d72ffb5fe70b8", "author": {"user": {"login": "xiangfu0", "name": "Xiang Fu"}}, "url": "https://github.com/apache/pinot/commit/22d82374d2f42be9e27684a54d5d72ffb5fe70b8", "committedDate": "2020-04-21T08:33:53Z", "message": "Adding PinotServiceManager to manage Pinot Startable lifecycle."}, "afterCommit": {"oid": "31c6bf4210c511e0366d79c2164f993cce3dfde2", "author": {"user": {"login": "xiangfu0", "name": "Xiang Fu"}}, "url": "https://github.com/apache/pinot/commit/31c6bf4210c511e0366d79c2164f993cce3dfde2", "committedDate": "2020-04-22T01:07:53Z", "message": "Adding PinotServiceManager to manage Pinot Startable lifecycle."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "31c6bf4210c511e0366d79c2164f993cce3dfde2", "author": {"user": {"login": "xiangfu0", "name": "Xiang Fu"}}, "url": "https://github.com/apache/pinot/commit/31c6bf4210c511e0366d79c2164f993cce3dfde2", "committedDate": "2020-04-22T01:07:53Z", "message": "Adding PinotServiceManager to manage Pinot Startable lifecycle."}, "afterCommit": {"oid": "80a943501464d983396ae935b1ca7061d94ade37", "author": {"user": {"login": "xiangfu0", "name": "Xiang Fu"}}, "url": "https://github.com/apache/pinot/commit/80a943501464d983396ae935b1ca7061d94ade37", "committedDate": "2020-04-26T01:31:12Z", "message": "Adding PinotServiceManager to manage Pinot Startable lifecycle."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA3MDE5ODU0", "url": "https://github.com/apache/pinot/pull/5266#pullrequestreview-407019854", "createdAt": "2020-05-06T22:04:29Z", "commit": {"oid": "80a943501464d983396ae935b1ca7061d94ade37"}, "state": "APPROVED", "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQyMjowNDoyOVrOGRnFeA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQyMjo1NToyNlrOGRoSJw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTExOTM1Mg==", "bodyText": "remove static imports?", "url": "https://github.com/apache/pinot/pull/5266#discussion_r421119352", "createdAt": "2020-05-06T22:04:29Z", "author": {"login": "npawar"}, "path": "pinot-tools/src/main/java/org/apache/pinot/tools/service/api/resources/PinotServiceManagerInstanceResource.java", "diffHunk": "@@ -0,0 +1,241 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.pinot.tools.service.api.resources;\n+\n+import io.swagger.annotations.Api;\n+import io.swagger.annotations.ApiOperation;\n+import io.swagger.annotations.ApiParam;\n+import io.swagger.annotations.ApiResponse;\n+import io.swagger.annotations.ApiResponses;\n+import java.io.IOException;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import javax.inject.Inject;\n+import javax.ws.rs.DELETE;\n+import javax.ws.rs.GET;\n+import javax.ws.rs.POST;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.PathParam;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.QueryParam;\n+import javax.ws.rs.WebApplicationException;\n+import javax.ws.rs.core.MediaType;\n+import javax.ws.rs.core.Response;\n+import org.apache.commons.configuration.Configuration;\n+import org.apache.commons.configuration.PropertiesConfiguration;\n+import org.apache.pinot.common.utils.CommonConstants;\n+import org.apache.pinot.common.utils.NetUtil;\n+import org.apache.pinot.controller.ControllerConf;\n+import org.apache.pinot.spi.services.ServiceRole;\n+import org.apache.pinot.spi.utils.JsonUtils;\n+import org.apache.pinot.tools.service.PinotServiceManager;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import static org.apache.pinot.common.utils.CommonConstants.Controller.CONFIG_OF_CONTROLLER_METRICS_PREFIX;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "80a943501464d983396ae935b1ca7061d94ade37"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTEyMzU5NQ==", "bodyText": "Could you add an example in the description of how to run this command\n\nWhen providing multiple bootstrapConfigPath\nWhen starting multiple roles with default configs\n\nOr if there's any documentation, having the link here also works", "url": "https://github.com/apache/pinot/pull/5266#discussion_r421123595", "createdAt": "2020-05-06T22:14:40Z", "author": {"login": "npawar"}, "path": "pinot-tools/src/main/java/org/apache/pinot/tools/admin/command/StartServiceManagerCommand.java", "diffHunk": "@@ -0,0 +1,213 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.tools.admin.command;\n+\n+import java.io.File;\n+import java.net.SocketException;\n+import java.net.UnknownHostException;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import org.apache.commons.configuration.Configuration;\n+import org.apache.pinot.common.utils.CommonConstants;\n+import org.apache.pinot.controller.ControllerConf;\n+import org.apache.pinot.spi.services.ServiceRole;\n+import org.apache.pinot.tools.Command;\n+import org.apache.pinot.tools.service.PinotServiceManager;\n+import org.apache.pinot.tools.utils.PinotConfigUtils;\n+import org.kohsuke.args4j.Option;\n+import org.kohsuke.args4j.spi.StringArrayOptionHandler;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import static org.apache.pinot.common.utils.CommonConstants.Helix.PINOT_SERVICE_ROLE;\n+\n+\n+/**\n+ * Class to implement StartPinotService command.\n+ *\n+ */\n+public class StartServiceManagerCommand extends AbstractBaseAdminCommand implements Command {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "80a943501464d983396ae935b1ca7061d94ade37"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTEyNDk1MA==", "bodyText": "this description is not very clear. \"Starts the PinotServiceManager...\" ?", "url": "https://github.com/apache/pinot/pull/5266#discussion_r421124950", "createdAt": "2020-05-06T22:18:07Z", "author": {"login": "npawar"}, "path": "pinot-tools/src/main/java/org/apache/pinot/tools/admin/command/StartServiceManagerCommand.java", "diffHunk": "@@ -0,0 +1,213 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.tools.admin.command;\n+\n+import java.io.File;\n+import java.net.SocketException;\n+import java.net.UnknownHostException;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import org.apache.commons.configuration.Configuration;\n+import org.apache.pinot.common.utils.CommonConstants;\n+import org.apache.pinot.controller.ControllerConf;\n+import org.apache.pinot.spi.services.ServiceRole;\n+import org.apache.pinot.tools.Command;\n+import org.apache.pinot.tools.service.PinotServiceManager;\n+import org.apache.pinot.tools.utils.PinotConfigUtils;\n+import org.kohsuke.args4j.Option;\n+import org.kohsuke.args4j.spi.StringArrayOptionHandler;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import static org.apache.pinot.common.utils.CommonConstants.Helix.PINOT_SERVICE_ROLE;\n+\n+\n+/**\n+ * Class to implement StartPinotService command.\n+ *\n+ */\n+public class StartServiceManagerCommand extends AbstractBaseAdminCommand implements Command {\n+  private static final Logger LOGGER = LoggerFactory.getLogger(StartServiceManagerCommand.class);\n+  private final List<Configuration> _bootstrapConfigurations = new ArrayList<>();\n+  private final String[] BOOTSTRAP_SERVICES = new String[]{\"CONTROLLER\", \"BROKER\", \"SERVER\"};\n+\n+  @Option(name = \"-help\", required = false, help = true, aliases = {\"-h\", \"--h\", \"--help\"}, usage = \"Print this message.\")\n+  private boolean _help;\n+  @Option(name = \"-zkAddress\", required = true, metaVar = \"<http>\", usage = \"Http address of Zookeeper.\")\n+  private String _zkAddress = DEFAULT_ZK_ADDRESS;\n+  @Option(name = \"-clusterName\", required = true, metaVar = \"<String>\", usage = \"Pinot cluster name.\")\n+  private String _clusterName = DEFAULT_CLUSTER_NAME;\n+  @Option(name = \"-port\", required = true, metaVar = \"<int>\", usage = \"Pinot service manager admin port, -1 means disable, 0 means a random available port.\")\n+  private int _port;\n+  @Option(name = \"-bootstrapConfigPaths\", handler = StringArrayOptionHandler.class, required = false, usage = \"A list of Pinot service config file paths. Each config file requires an extra config: 'pinot.service.role' to indicate which service to start.\", forbids = {\"-bootstrapServices\"})\n+  private String[] _bootstrapConfigPaths;\n+  @Option(name = \"-bootstrapServices\", handler = StringArrayOptionHandler.class, required = false, usage = \"A list of Pinot service roles to start with default config. E.g. CONTROLLER/BROKER/SERVER\", forbids = {\"-bootstrapConfigPaths\"})\n+  private String[] _bootstrapServices = BOOTSTRAP_SERVICES;\n+\n+  private PinotServiceManager _pinotServiceManager;\n+\n+  public String getZkAddress() {\n+    return _zkAddress;\n+  }\n+\n+  public StartServiceManagerCommand setZkAddress(String zkAddress) {\n+    _zkAddress = zkAddress;\n+    return this;\n+  }\n+\n+  public String getClusterName() {\n+    return _clusterName;\n+  }\n+\n+  public StartServiceManagerCommand setClusterName(String clusterName) {\n+    _clusterName = clusterName;\n+    return this;\n+  }\n+\n+  public int getPort() {\n+    return _port;\n+  }\n+\n+  public StartServiceManagerCommand setPort(int port) {\n+    _port = port;\n+    return this;\n+  }\n+\n+  public String[] getBootstrapConfigPaths() {\n+    return _bootstrapConfigPaths;\n+  }\n+\n+  public StartServiceManagerCommand setBootstrapConfigPaths(String[] bootstrapConfigPaths) {\n+    _bootstrapConfigPaths = bootstrapConfigPaths;\n+    return this;\n+  }\n+\n+  public String[] getBootstrapServices() {\n+    return _bootstrapServices;\n+  }\n+\n+  public StartServiceManagerCommand setBootstrapServices(String[] bootstrapServices) {\n+    _bootstrapServices = bootstrapServices;\n+    return this;\n+  }\n+\n+  @Override\n+  public boolean getHelp() {\n+    return _help;\n+  }\n+\n+  public void setHelp(boolean help) {\n+    _help = help;\n+  }\n+\n+  @Override\n+  public String getName() {\n+    return \"StartPinotService\";\n+  }\n+\n+  @Override\n+  public String toString() {\n+    StringBuilder sb = new StringBuilder()\n+        .append(\"StartServiceManager -clusterName \" + _clusterName + \" -zkAddress \" + _zkAddress + \" -port \" + _port);\n+    if (_bootstrapConfigPaths != null) {\n+      sb.append(\" -bootstrapConfigPaths \" + Arrays.toString(_bootstrapConfigPaths));\n+    } else if (_bootstrapServices != null) {\n+      sb.append(\" -bootstrapServices \" + Arrays.toString(_bootstrapServices));\n+    }\n+\n+    return sb.toString();\n+  }\n+\n+  @Override\n+  public void cleanup() {\n+  }\n+\n+  @Override\n+  public String description() {\n+    return \"Start the Pinot Service Process at the specified port.\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "80a943501464d983396ae935b1ca7061d94ade37"}, "originalPosition": 144}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTEyODI5Mw==", "bodyText": "Some javadoc?", "url": "https://github.com/apache/pinot/pull/5266#discussion_r421128293", "createdAt": "2020-05-06T22:26:43Z", "author": {"login": "npawar"}, "path": "pinot-tools/src/main/java/org/apache/pinot/tools/service/PinotServiceManagerAdminApiApplication.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.pinot.tools.service;\n+\n+import com.google.common.base.Preconditions;\n+import io.swagger.jaxrs.config.BeanConfig;\n+import java.net.URI;\n+import java.net.URL;\n+import java.net.URLClassLoader;\n+import org.glassfish.grizzly.http.server.CLStaticHttpHandler;\n+import org.glassfish.grizzly.http.server.HttpHandler;\n+import org.glassfish.grizzly.http.server.HttpServer;\n+import org.glassfish.hk2.utilities.binding.AbstractBinder;\n+import org.glassfish.jersey.grizzly2.httpserver.GrizzlyHttpServerFactory;\n+import org.glassfish.jersey.jackson.JacksonFeature;\n+import org.glassfish.jersey.server.ResourceConfig;\n+\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "80a943501464d983396ae935b1ca7061d94ade37"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTEzMTI0NA==", "bodyText": "Some javadoc for this?\nAlso, where is it used?", "url": "https://github.com/apache/pinot/pull/5266#discussion_r421131244", "createdAt": "2020-05-06T22:34:33Z", "author": {"login": "npawar"}, "path": "pinot-tools/src/main/java/org/apache/pinot/tools/admin/command/EnumArrayOptionHandler.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.tools.admin.command;\n+\n+import org.kohsuke.args4j.CmdLineException;\n+import org.kohsuke.args4j.CmdLineParser;\n+import org.kohsuke.args4j.OptionDef;\n+import org.kohsuke.args4j.spi.OptionHandler;\n+import org.kohsuke.args4j.spi.Parameters;\n+import org.kohsuke.args4j.spi.Setter;\n+\n+\n+public class EnumArrayOptionHandler<T extends Enum<T>> extends OptionHandler<T> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "80a943501464d983396ae935b1ca7061d94ade37"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTEzMTM2OQ==", "bodyText": "new line", "url": "https://github.com/apache/pinot/pull/5266#discussion_r421131369", "createdAt": "2020-05-06T22:34:49Z", "author": {"login": "npawar"}, "path": "pinot-tools/src/main/java/org/apache/pinot/tools/admin/command/EnumArrayOptionHandler.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.tools.admin.command;\n+\n+import org.kohsuke.args4j.CmdLineException;\n+import org.kohsuke.args4j.CmdLineParser;\n+import org.kohsuke.args4j.OptionDef;\n+import org.kohsuke.args4j.spi.OptionHandler;\n+import org.kohsuke.args4j.spi.Parameters;\n+import org.kohsuke.args4j.spi.Setter;\n+\n+\n+public class EnumArrayOptionHandler<T extends Enum<T>> extends OptionHandler<T> {\n+\n+  public EnumArrayOptionHandler(CmdLineParser parser, OptionDef option, Setter<T> setter) {\n+    super(parser, option, setter);\n+  }\n+\n+  /**\n+   * Returns {@code \"T[]\"}.\n+   *\n+   * @return return \"T[]\";\n+   */\n+  @Override\n+  public String getDefaultMetaVariable() {\n+    return setter.getType().getName() + \"[]\";\n+  }\n+\n+  /**\n+   * Tries to parse {@code String[]} argument from {@link Parameters}.\n+   */\n+  @Override\n+  public int parseArguments(Parameters params)\n+      throws CmdLineException {\n+    int counter = 0;\n+    for (; counter < params.size(); counter++) {\n+      String param = params.getParameter(counter);\n+\n+      if (param.startsWith(\"-\")) {\n+        break;\n+      }\n+\n+      for (String p : param.split(\" \")) {\n+        Class<T> t = (Class<T>) setter.getType();\n+        setter.addValue(Enum.valueOf(t, p));\n+      }\n+    }\n+\n+    return counter;\n+  }\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "80a943501464d983396ae935b1ca7061d94ade37"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTEzNDk1Mg==", "bodyText": "I couldn't find the logic which handles port=-1.\nI see port being set as -1 in StartControllerCommnad, StartBrokerCommand etc. But in PinotServiceManager I didn't find any special handling for it?", "url": "https://github.com/apache/pinot/pull/5266#discussion_r421134952", "createdAt": "2020-05-06T22:44:33Z", "author": {"login": "npawar"}, "path": "pinot-tools/src/main/java/org/apache/pinot/tools/admin/command/StartServiceManagerCommand.java", "diffHunk": "@@ -0,0 +1,213 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.tools.admin.command;\n+\n+import java.io.File;\n+import java.net.SocketException;\n+import java.net.UnknownHostException;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import org.apache.commons.configuration.Configuration;\n+import org.apache.pinot.common.utils.CommonConstants;\n+import org.apache.pinot.controller.ControllerConf;\n+import org.apache.pinot.spi.services.ServiceRole;\n+import org.apache.pinot.tools.Command;\n+import org.apache.pinot.tools.service.PinotServiceManager;\n+import org.apache.pinot.tools.utils.PinotConfigUtils;\n+import org.kohsuke.args4j.Option;\n+import org.kohsuke.args4j.spi.StringArrayOptionHandler;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import static org.apache.pinot.common.utils.CommonConstants.Helix.PINOT_SERVICE_ROLE;\n+\n+\n+/**\n+ * Class to implement StartPinotService command.\n+ *\n+ */\n+public class StartServiceManagerCommand extends AbstractBaseAdminCommand implements Command {\n+  private static final Logger LOGGER = LoggerFactory.getLogger(StartServiceManagerCommand.class);\n+  private final List<Configuration> _bootstrapConfigurations = new ArrayList<>();\n+  private final String[] BOOTSTRAP_SERVICES = new String[]{\"CONTROLLER\", \"BROKER\", \"SERVER\"};\n+\n+  @Option(name = \"-help\", required = false, help = true, aliases = {\"-h\", \"--h\", \"--help\"}, usage = \"Print this message.\")\n+  private boolean _help;\n+  @Option(name = \"-zkAddress\", required = true, metaVar = \"<http>\", usage = \"Http address of Zookeeper.\")\n+  private String _zkAddress = DEFAULT_ZK_ADDRESS;\n+  @Option(name = \"-clusterName\", required = true, metaVar = \"<String>\", usage = \"Pinot cluster name.\")\n+  private String _clusterName = DEFAULT_CLUSTER_NAME;\n+  @Option(name = \"-port\", required = true, metaVar = \"<int>\", usage = \"Pinot service manager admin port, -1 means disable, 0 means a random available port.\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "80a943501464d983396ae935b1ca7061d94ade37"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTEzODk4Mw==", "bodyText": "is it possible to add \"stopAllServers\" \"stopAllBrokers\" etc, and \"stopAll\"", "url": "https://github.com/apache/pinot/pull/5266#discussion_r421138983", "createdAt": "2020-05-06T22:55:26Z", "author": {"login": "npawar"}, "path": "pinot-tools/src/main/java/org/apache/pinot/tools/service/api/resources/PinotServiceManagerInstanceResource.java", "diffHunk": "@@ -0,0 +1,241 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.pinot.tools.service.api.resources;\n+\n+import io.swagger.annotations.Api;\n+import io.swagger.annotations.ApiOperation;\n+import io.swagger.annotations.ApiParam;\n+import io.swagger.annotations.ApiResponse;\n+import io.swagger.annotations.ApiResponses;\n+import java.io.IOException;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import javax.inject.Inject;\n+import javax.ws.rs.DELETE;\n+import javax.ws.rs.GET;\n+import javax.ws.rs.POST;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.PathParam;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.QueryParam;\n+import javax.ws.rs.WebApplicationException;\n+import javax.ws.rs.core.MediaType;\n+import javax.ws.rs.core.Response;\n+import org.apache.commons.configuration.Configuration;\n+import org.apache.commons.configuration.PropertiesConfiguration;\n+import org.apache.pinot.common.utils.CommonConstants;\n+import org.apache.pinot.common.utils.NetUtil;\n+import org.apache.pinot.controller.ControllerConf;\n+import org.apache.pinot.spi.services.ServiceRole;\n+import org.apache.pinot.spi.utils.JsonUtils;\n+import org.apache.pinot.tools.service.PinotServiceManager;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import static org.apache.pinot.common.utils.CommonConstants.Controller.CONFIG_OF_CONTROLLER_METRICS_PREFIX;\n+import static org.apache.pinot.common.utils.CommonConstants.Controller.DEFAULT_METRICS_PREFIX;\n+import static org.apache.pinot.tools.utils.PinotConfigUtils.TMP_DIR;\n+import static org.apache.pinot.tools.utils.PinotConfigUtils.getAvailablePort;\n+\n+\n+@Api(tags = \"Startable\")\n+@Path(\"/\")\n+public class PinotServiceManagerInstanceResource {\n+\n+  private static final Logger LOGGER = LoggerFactory.getLogger(PinotServiceManagerInstanceResource.class);\n+\n+  @Inject\n+  private PinotServiceManager _pinotServiceManager;\n+\n+  @GET\n+  @Produces(MediaType.APPLICATION_JSON)\n+  @Path(\"/instances\")\n+  @ApiOperation(value = \"Get Pinot Instances Status\")\n+  @ApiResponses(value = {@ApiResponse(code = 200, message = \"Instance Status\"), @ApiResponse(code = 500, message = \"Internal server error\")})\n+  public Map<String, PinotInstanceStatus> getPinotAllInstancesStatus() {\n+    Map<String, PinotInstanceStatus> results = new HashMap<>();\n+    for (String instanceId : _pinotServiceManager.getRunningInstanceIds()) {\n+      results.put(instanceId, _pinotServiceManager.getInstanceStatus(instanceId));\n+    }\n+    return results;\n+  }\n+\n+  @GET\n+  @Produces(MediaType.APPLICATION_JSON)\n+  @Path(\"/instances/{instanceName}\")\n+  @ApiOperation(value = \"Get Pinot Instance Status\")\n+  @ApiResponses(value = {@ApiResponse(code = 200, message = \"Instance Status\"), @ApiResponse(code = 404, message = \"Instance Not Found\"), @ApiResponse(code = 500, message = \"Internal server error\")})\n+  public PinotInstanceStatus getPinotInstanceStatus(\n+      @ApiParam(value = \"Name of the instance\") @PathParam(\"instanceName\") String instanceName) {\n+    List<String> instanceIds = _pinotServiceManager.getRunningInstanceIds();\n+    if (instanceIds.contains(instanceName)) {\n+      return _pinotServiceManager.getInstanceStatus(instanceName);\n+    }\n+    throw new WebApplicationException(String.format(\"Instance [%s] not found.\", instanceName),\n+        Response.Status.NOT_FOUND);\n+  }\n+\n+  @DELETE", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "80a943501464d983396ae935b1ca7061d94ade37"}, "originalPosition": 96}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA4NzgzNjk4", "url": "https://github.com/apache/pinot/pull/5266#pullrequestreview-408783698", "createdAt": "2020-05-10T21:31:33Z", "commit": {"oid": "80a943501464d983396ae935b1ca7061d94ade37"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA5MzE3MzU3", "url": "https://github.com/apache/pinot/pull/5266#pullrequestreview-409317357", "createdAt": "2020-05-11T16:08:03Z", "commit": {"oid": "80a943501464d983396ae935b1ca7061d94ade37"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQxNjowODowM1rOGTjHhw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQxNjoxNTowMVrOGTjYrQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzE1MTQ5NQ==", "bodyText": "This should never happen. Can you add an error log here with the exception stack?\nAlso, please modify the return string to be \"Exception while getting service status: \" + e.getMessage()", "url": "https://github.com/apache/pinot/pull/5266#discussion_r423151495", "createdAt": "2020-05-11T16:08:03Z", "author": {"login": "mcvsubbu"}, "path": "pinot-common/src/main/java/org/apache/pinot/common/utils/ServiceStatus.java", "diffHunk": "@@ -43,17 +44,79 @@\n  */\n @SuppressWarnings(\"unused\")\n public class ServiceStatus {\n+  public static final String STATUS_DESCRIPTION_NONE = \"None\";\n+  public static final String STATUS_DESCRIPTION_INIT = \"Init\";\n+  public static final String STATUS_DESCRIPTION_STARTED = \"Started\";\n+  public static final String STATUS_DESCRIPTION_NO_HELIX_STATE = \"Helix state does not exist\";\n   private static final Logger LOGGER = LoggerFactory.getLogger(ServiceStatus.class);\n+  private static final int MAX_RESOURCE_NAMES_TO_LOG = 5;\n+  private static final Map<String, ServiceStatusCallback> serviceStatusCallbackMap = new ConcurrentHashMap<>();\n+  private static final ServiceStatusCallback serviceStatusCallback =\n+      new MapBasedMultipleCallbackServiceStatusCallback(serviceStatusCallbackMap);\n \n-  public enum Status {\n-    STARTING, GOOD, BAD\n+  public static void setServiceStatusCallback(String name, ServiceStatusCallback serviceStatusCallback) {\n+    ServiceStatus.serviceStatusCallbackMap.put(name, serviceStatusCallback);\n   }\n \n-  public static final String STATUS_DESCRIPTION_NONE = \"None\";\n-  public static final String STATUS_DESCRIPTION_INIT = \"Init\";\n-  public static final String STATUS_DESCRIPTION_NO_HELIX_STATE = \"Helix state does not exist\";\n+  public static void removeServiceStatusCallback(String name) {\n+    ServiceStatus.serviceStatusCallbackMap.remove(name);\n+  }\n \n-  private static final int MAX_RESOURCE_NAMES_TO_LOG = 5;\n+  public static Status getServiceStatus() {\n+    return getServiceStatus(serviceStatusCallback);\n+  }\n+\n+  public static Status getServiceStatus(String name) {\n+    if (serviceStatusCallbackMap.containsKey(name)) {\n+      return getServiceStatus(serviceStatusCallbackMap.get(name));\n+    } else {\n+      return Status.NOT_STARTED;\n+    }\n+  }\n+\n+  private static Status getServiceStatus(ServiceStatusCallback callback) {\n+    try {\n+      return callback.getServiceStatus();\n+    } catch (Exception e) {\n+      LOGGER.warn(\"Caught exception while reading the service status\", e);\n+      return Status.BAD;\n+    }\n+  }\n+\n+  public static String getStatusDescription() {\n+    return getStatusDescription(serviceStatusCallback);\n+  }\n+\n+  public static String getStatusDescription(String name) {\n+    if (serviceStatusCallbackMap.containsKey(name)) {\n+      return getStatusDescription(serviceStatusCallbackMap.get(name));\n+    } else {\n+      return STATUS_DESCRIPTION_NONE;\n+    }\n+  }\n+\n+  private static String getStatusDescription(ServiceStatusCallback callback) {\n+    try {\n+      return callback.getStatusDescription();\n+    } catch (Exception e) {\n+      return \"Exception: \" + e.getMessage();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "80a943501464d983396ae935b1ca7061d94ade37"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzE1NTg4NQ==", "bodyText": "We add it to the map when we call start() and remove it from the map when we call stop(). So,  the status here can either be NOT_STARTED, or SHUTTING_DOWN.\nI suggest you add it to the map in the constructor, and return SHUTTING_DOWN here once you remove from the map.", "url": "https://github.com/apache/pinot/pull/5266#discussion_r423155885", "createdAt": "2020-05-11T16:15:01Z", "author": {"login": "mcvsubbu"}, "path": "pinot-common/src/main/java/org/apache/pinot/common/utils/ServiceStatus.java", "diffHunk": "@@ -43,17 +44,79 @@\n  */\n @SuppressWarnings(\"unused\")\n public class ServiceStatus {\n+  public static final String STATUS_DESCRIPTION_NONE = \"None\";\n+  public static final String STATUS_DESCRIPTION_INIT = \"Init\";\n+  public static final String STATUS_DESCRIPTION_STARTED = \"Started\";\n+  public static final String STATUS_DESCRIPTION_NO_HELIX_STATE = \"Helix state does not exist\";\n   private static final Logger LOGGER = LoggerFactory.getLogger(ServiceStatus.class);\n+  private static final int MAX_RESOURCE_NAMES_TO_LOG = 5;\n+  private static final Map<String, ServiceStatusCallback> serviceStatusCallbackMap = new ConcurrentHashMap<>();\n+  private static final ServiceStatusCallback serviceStatusCallback =\n+      new MapBasedMultipleCallbackServiceStatusCallback(serviceStatusCallbackMap);\n \n-  public enum Status {\n-    STARTING, GOOD, BAD\n+  public static void setServiceStatusCallback(String name, ServiceStatusCallback serviceStatusCallback) {\n+    ServiceStatus.serviceStatusCallbackMap.put(name, serviceStatusCallback);\n   }\n \n-  public static final String STATUS_DESCRIPTION_NONE = \"None\";\n-  public static final String STATUS_DESCRIPTION_INIT = \"Init\";\n-  public static final String STATUS_DESCRIPTION_NO_HELIX_STATE = \"Helix state does not exist\";\n+  public static void removeServiceStatusCallback(String name) {\n+    ServiceStatus.serviceStatusCallbackMap.remove(name);\n+  }\n \n-  private static final int MAX_RESOURCE_NAMES_TO_LOG = 5;\n+  public static Status getServiceStatus() {\n+    return getServiceStatus(serviceStatusCallback);\n+  }\n+\n+  public static Status getServiceStatus(String name) {\n+    if (serviceStatusCallbackMap.containsKey(name)) {\n+      return getServiceStatus(serviceStatusCallbackMap.get(name));\n+    } else {\n+      return Status.NOT_STARTED;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "80a943501464d983396ae935b1ca7061d94ade37"}, "originalPosition": 44}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA5NjY5NDMy", "url": "https://github.com/apache/pinot/pull/5266#pullrequestreview-409669432", "createdAt": "2020-05-12T03:13:27Z", "commit": {"oid": "80a943501464d983396ae935b1ca7061d94ade37"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwMzoxMzoyN1rOGT0iQQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwMzoxMzoyN1rOGT0iQQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzQzNjg2NQ==", "bodyText": "Let's enhance this by saying these are the roles that a node in pinot cluster can take?", "url": "https://github.com/apache/pinot/pull/5266#discussion_r423436865", "createdAt": "2020-05-12T03:13:27Z", "author": {"login": "siddharthteotia"}, "path": "pinot-spi/src/main/java/org/apache/pinot/spi/services/ServiceRole.java", "diffHunk": "@@ -0,0 +1,26 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.spi.services;\n+\n+/**\n+ * ServiceRole defines a role that Pinot Service could start/stop.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "80a943501464d983396ae935b1ca7061d94ade37"}, "originalPosition": 22}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA5NjcxOTc3", "url": "https://github.com/apache/pinot/pull/5266#pullrequestreview-409671977", "createdAt": "2020-05-12T03:22:41Z", "commit": {"oid": "80a943501464d983396ae935b1ca7061d94ade37"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwMzoyMjo0MVrOGT0rAQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwMzoyMjo0MVrOGT0rAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzQzOTEwNQ==", "bodyText": "Can we just have this as Service or may be StartableService?", "url": "https://github.com/apache/pinot/pull/5266#discussion_r423439105", "createdAt": "2020-05-12T03:22:41Z", "author": {"login": "siddharthteotia"}, "path": "pinot-spi/src/main/java/org/apache/pinot/spi/services/ServiceStartable.java", "diffHunk": "@@ -0,0 +1,40 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.spi.services;\n+\n+import org.apache.commons.configuration.Configuration;\n+\n+\n+/**\n+ * ServiceStartable is the general interface to manage a Pinot instance lifecycle for a specific ServiceRole.\n+ * E.g. Controller/Broker/Server/Minion.\n+ *\n+ */\n+public interface ServiceStartable {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "80a943501464d983396ae935b1ca7061d94ade37"}, "originalPosition": 29}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "80a943501464d983396ae935b1ca7061d94ade37", "author": {"user": {"login": "xiangfu0", "name": "Xiang Fu"}}, "url": "https://github.com/apache/pinot/commit/80a943501464d983396ae935b1ca7061d94ade37", "committedDate": "2020-04-26T01:31:12Z", "message": "Adding PinotServiceManager to manage Pinot Startable lifecycle."}, "afterCommit": {"oid": "4e545cff9a2464b2b7802c54cab705c31edb633c", "author": {"user": {"login": "xiangfu0", "name": "Xiang Fu"}}, "url": "https://github.com/apache/pinot/commit/4e545cff9a2464b2b7802c54cab705c31edb633c", "committedDate": "2020-05-22T08:25:20Z", "message": "Address comments"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "4e545cff9a2464b2b7802c54cab705c31edb633c", "author": {"user": {"login": "xiangfu0", "name": "Xiang Fu"}}, "url": "https://github.com/apache/pinot/commit/4e545cff9a2464b2b7802c54cab705c31edb633c", "committedDate": "2020-05-22T08:25:20Z", "message": "Address comments"}, "afterCommit": {"oid": "167dfbae4fa6d47faa092d5177eba89096eaa0ea", "author": {"user": {"login": "xiangfu0", "name": "Xiang Fu"}}, "url": "https://github.com/apache/pinot/commit/167dfbae4fa6d47faa092d5177eba89096eaa0ea", "committedDate": "2020-05-22T08:52:15Z", "message": "Address comments"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "167dfbae4fa6d47faa092d5177eba89096eaa0ea", "author": {"user": {"login": "xiangfu0", "name": "Xiang Fu"}}, "url": "https://github.com/apache/pinot/commit/167dfbae4fa6d47faa092d5177eba89096eaa0ea", "committedDate": "2020-05-22T08:52:15Z", "message": "Address comments"}, "afterCommit": {"oid": "112870b84b484a4346db98510d5b66768d161714", "author": {"user": {"login": "xiangfu0", "name": "Xiang Fu"}}, "url": "https://github.com/apache/pinot/commit/112870b84b484a4346db98510d5b66768d161714", "committedDate": "2020-05-22T09:04:23Z", "message": "Address comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE4ODMzMDYy", "url": "https://github.com/apache/pinot/pull/5266#pullrequestreview-418833062", "createdAt": "2020-05-27T03:29:29Z", "commit": {"oid": "112870b84b484a4346db98510d5b66768d161714"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "112870b84b484a4346db98510d5b66768d161714", "author": {"user": {"login": "xiangfu0", "name": "Xiang Fu"}}, "url": "https://github.com/apache/pinot/commit/112870b84b484a4346db98510d5b66768d161714", "committedDate": "2020-05-22T09:04:23Z", "message": "Address comments"}, "afterCommit": {"oid": "723c2aeae0a631919d12c921709e55797789ce4e", "author": {"user": {"login": "xiangfu0", "name": "Xiang Fu"}}, "url": "https://github.com/apache/pinot/commit/723c2aeae0a631919d12c921709e55797789ce4e", "committedDate": "2020-05-27T08:02:20Z", "message": "Adding PinotServiceManager to manage Pinot Startable lifecycle."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dc7cc256525d0b323f7756961586998d21cc0f2a", "author": {"user": {"login": "xiangfu0", "name": "Xiang Fu"}}, "url": "https://github.com/apache/pinot/commit/dc7cc256525d0b323f7756961586998d21cc0f2a", "committedDate": "2020-05-27T08:03:23Z", "message": "Make ServiceStatus takes into account multiple services"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "93c5c9b38ebc1dcddc8d243f43bb649caafc9b6e", "author": {"user": {"login": "xiangfu0", "name": "Xiang Fu"}}, "url": "https://github.com/apache/pinot/commit/93c5c9b38ebc1dcddc8d243f43bb649caafc9b6e", "committedDate": "2020-05-27T08:04:10Z", "message": "Adding PinotServiceManager to manage Pinot Startable lifecycle."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "723c2aeae0a631919d12c921709e55797789ce4e", "author": {"user": {"login": "xiangfu0", "name": "Xiang Fu"}}, "url": "https://github.com/apache/pinot/commit/723c2aeae0a631919d12c921709e55797789ce4e", "committedDate": "2020-05-27T08:02:20Z", "message": "Adding PinotServiceManager to manage Pinot Startable lifecycle."}, "afterCommit": {"oid": "93c5c9b38ebc1dcddc8d243f43bb649caafc9b6e", "author": {"user": {"login": "xiangfu0", "name": "Xiang Fu"}}, "url": "https://github.com/apache/pinot/commit/93c5c9b38ebc1dcddc8d243f43bb649caafc9b6e", "committedDate": "2020-05-27T08:04:10Z", "message": "Adding PinotServiceManager to manage Pinot Startable lifecycle."}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1242, "cost": 1, "resetAt": "2021-10-28T18:00:02Z"}}}