{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg0NzExODA3", "number": 6002, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQwNjo1MjozNFrOEiZ7XQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQwNjo1MjozNFrOEiZ7XQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0NTExODM3OnYy", "diffSide": "RIGHT", "path": "pinot-plugins/pinot-file-system/pinot-s3/src/main/java/org/apache/pinot/plugin/filesystem/S3PinotFS.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQwNjo1MjozNFrOHQQjcw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQwNzowOToyMFrOHQRAKg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjgxMDQ4Mw==", "bodyText": "will be good to log the total number of files listed as info", "url": "https://github.com/apache/pinot/pull/6002#discussion_r486810483", "createdAt": "2020-09-11T06:52:34Z", "author": {"login": "kishoreg"}, "path": "pinot-plugins/pinot-file-system/pinot-s3/src/main/java/org/apache/pinot/plugin/filesystem/S3PinotFS.java", "diffHunk": "@@ -374,33 +375,39 @@ public long length(URI fileUri)\n       throws IOException {\n     try {\n       ImmutableList.Builder<String> builder = ImmutableList.builder();\n+      String continuationToken = null;\n+      boolean isDone = false;\n       String prefix = normalizeToDirectoryPrefix(fileUri);\n-\n-      ListObjectsV2Response listObjectsV2Response;\n-      ListObjectsV2Request.Builder listObjectsV2RequestBuilder =\n-          ListObjectsV2Request.builder().bucket(fileUri.getHost());\n-\n-      if (!prefix.equals(DELIMITER)) {\n-        listObjectsV2RequestBuilder = listObjectsV2RequestBuilder.prefix(prefix);\n-      }\n-\n-      if (!recursive) {\n-        listObjectsV2RequestBuilder = listObjectsV2RequestBuilder.delimiter(DELIMITER);\n-      }\n-\n-      ListObjectsV2Request listObjectsV2Request = listObjectsV2RequestBuilder.build();\n-      listObjectsV2Response = _s3Client.listObjectsV2(listObjectsV2Request);\n-\n-      listObjectsV2Response.contents().stream().forEach(object -> {\n-        //Only add files and not directories\n-        if (!object.key().equals(fileUri.getPath()) && !object.key().endsWith(DELIMITER)) {\n-          String fileKey = object.key();\n-          if (fileKey.startsWith(DELIMITER)) {\n-            fileKey = fileKey.substring(1);\n-          }\n-          builder.add(S3_SCHEME + fileUri.getHost() + DELIMITER + fileKey);\n+      while(!isDone) {\n+        ListObjectsV2Request.Builder listObjectsV2RequestBuilder =\n+            ListObjectsV2Request.builder().bucket(fileUri.getHost());\n+        if (!prefix.equals(DELIMITER)) {\n+          listObjectsV2RequestBuilder = listObjectsV2RequestBuilder.prefix(prefix);\n+        }\n+        if (!recursive) {\n+          listObjectsV2RequestBuilder = listObjectsV2RequestBuilder.delimiter(DELIMITER);\n         }\n-      });\n+        if (continuationToken != null) {\n+          listObjectsV2RequestBuilder.continuationToken(continuationToken);\n+        }\n+        ListObjectsV2Request listObjectsV2Request = listObjectsV2RequestBuilder.build();\n+        LOGGER.debug(\"Trying to send ListObjectsV2Request {}\", listObjectsV2Request);\n+        ListObjectsV2Response listObjectsV2Response = _s3Client.listObjectsV2(listObjectsV2Request);\n+        LOGGER.debug(\"Getting ListObjectsV2Response: {}\", listObjectsV2Response);\n+        List<S3Object> filesReturned = listObjectsV2Response.contents();\n+        filesReturned.stream().forEach(object -> {\n+          //Only add files and not directories\n+          if (!object.key().equals(fileUri.getPath()) && !object.key().endsWith(DELIMITER)) {\n+            String fileKey = object.key();\n+            if (fileKey.startsWith(DELIMITER)) {\n+              fileKey = fileKey.substring(1);\n+            }\n+            builder.add(S3_SCHEME + fileUri.getHost() + DELIMITER + fileKey);\n+          }\n+        });\n+        isDone = !listObjectsV2Response.isTruncated();\n+        continuationToken = listObjectsV2Response.nextContinuationToken();\n+      }\n       return builder.build().toArray(new String[0]);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "86659186e8e2196b199a5c2bb011dd560a5a524f"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjgxNzgzNA==", "bodyText": "added.", "url": "https://github.com/apache/pinot/pull/6002#discussion_r486817834", "createdAt": "2020-09-11T07:09:20Z", "author": {"login": "xiangfu0"}, "path": "pinot-plugins/pinot-file-system/pinot-s3/src/main/java/org/apache/pinot/plugin/filesystem/S3PinotFS.java", "diffHunk": "@@ -374,33 +375,39 @@ public long length(URI fileUri)\n       throws IOException {\n     try {\n       ImmutableList.Builder<String> builder = ImmutableList.builder();\n+      String continuationToken = null;\n+      boolean isDone = false;\n       String prefix = normalizeToDirectoryPrefix(fileUri);\n-\n-      ListObjectsV2Response listObjectsV2Response;\n-      ListObjectsV2Request.Builder listObjectsV2RequestBuilder =\n-          ListObjectsV2Request.builder().bucket(fileUri.getHost());\n-\n-      if (!prefix.equals(DELIMITER)) {\n-        listObjectsV2RequestBuilder = listObjectsV2RequestBuilder.prefix(prefix);\n-      }\n-\n-      if (!recursive) {\n-        listObjectsV2RequestBuilder = listObjectsV2RequestBuilder.delimiter(DELIMITER);\n-      }\n-\n-      ListObjectsV2Request listObjectsV2Request = listObjectsV2RequestBuilder.build();\n-      listObjectsV2Response = _s3Client.listObjectsV2(listObjectsV2Request);\n-\n-      listObjectsV2Response.contents().stream().forEach(object -> {\n-        //Only add files and not directories\n-        if (!object.key().equals(fileUri.getPath()) && !object.key().endsWith(DELIMITER)) {\n-          String fileKey = object.key();\n-          if (fileKey.startsWith(DELIMITER)) {\n-            fileKey = fileKey.substring(1);\n-          }\n-          builder.add(S3_SCHEME + fileUri.getHost() + DELIMITER + fileKey);\n+      while(!isDone) {\n+        ListObjectsV2Request.Builder listObjectsV2RequestBuilder =\n+            ListObjectsV2Request.builder().bucket(fileUri.getHost());\n+        if (!prefix.equals(DELIMITER)) {\n+          listObjectsV2RequestBuilder = listObjectsV2RequestBuilder.prefix(prefix);\n+        }\n+        if (!recursive) {\n+          listObjectsV2RequestBuilder = listObjectsV2RequestBuilder.delimiter(DELIMITER);\n         }\n-      });\n+        if (continuationToken != null) {\n+          listObjectsV2RequestBuilder.continuationToken(continuationToken);\n+        }\n+        ListObjectsV2Request listObjectsV2Request = listObjectsV2RequestBuilder.build();\n+        LOGGER.debug(\"Trying to send ListObjectsV2Request {}\", listObjectsV2Request);\n+        ListObjectsV2Response listObjectsV2Response = _s3Client.listObjectsV2(listObjectsV2Request);\n+        LOGGER.debug(\"Getting ListObjectsV2Response: {}\", listObjectsV2Response);\n+        List<S3Object> filesReturned = listObjectsV2Response.contents();\n+        filesReturned.stream().forEach(object -> {\n+          //Only add files and not directories\n+          if (!object.key().equals(fileUri.getPath()) && !object.key().endsWith(DELIMITER)) {\n+            String fileKey = object.key();\n+            if (fileKey.startsWith(DELIMITER)) {\n+              fileKey = fileKey.substring(1);\n+            }\n+            builder.add(S3_SCHEME + fileUri.getHost() + DELIMITER + fileKey);\n+          }\n+        });\n+        isDone = !listObjectsV2Response.isTruncated();\n+        continuationToken = listObjectsV2Response.nextContinuationToken();\n+      }\n       return builder.build().toArray(new String[0]);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjgxMDQ4Mw=="}, "originalCommit": {"oid": "86659186e8e2196b199a5c2bb011dd560a5a524f"}, "originalPosition": 70}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3863, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}