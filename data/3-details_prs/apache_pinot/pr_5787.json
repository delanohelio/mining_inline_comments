{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDYxMDgzMDA4", "number": 5787, "title": "[Feature] - Spark Pinot Connector", "bodyText": "Description\nrelated issue - 5598\nPinot is a great tool for OLAP queries in real-time. In many cases, users want to see aggregated results in realtime. In the real scenarios, all data do not come in real-time, or some data/reports should be calculated in batch(every hour, day etc).\nApache Spark is a great tool for batch computing, data preparation and etc in ETL processes. And a lot of companies are using Apache Spark for their purposes.\nApache Spark and Apache Pinot are great with together for data preparation, aggregation, and query for many cases. But integrations between tools(eg spark-pinot) are so important! Pinot has a spark-batch-ingestion module, but it requires some efforts, and i know many developers like me do not want to do these efforts. These efforts are;\n\nUser should analyze data with spark(eg), then it should save outputs to hdfs with parquet, orc or etc format.\nTrigger an spark-batch-ingestion job to convert analyzed results to offline segments. And wait for finish(also some trigger mechanisms and fail scenarios etc).\nspark-batch-ingestion reads input files analyzed above(each of these files represents one segment, and if user want to partition data in pinot, these input files must be partitioned), and creates segments, then writes it to the deep storage.\n\nUnnecessary step is so painful! But not finished!\nWhat happens we want to re-index data, or apply more aggregation in Pinot? For example, we want to re-index orders data by another dimension or etc. Or maybe another department in your company want to access your pinot data? Yes, all steps should be applied from zero.\nWhat is the suggested solution? A connector that read/write from/to pinot directly.\nIf we can read/write data to pinot from spark directly, we can;\n\nPinot(source) -> Spark(analyze) -> Pinot(sink)\nPinot(source) -> Spark(analyze) -> Somewhere(hdfs, cassandra, postgres etc)\nSomewhere(hdfs, cassandra, postgres etc) -> Spark(analyze) -> Pinot(sink)\n\nWe can solve some problems with spark connector.\nConnector supports only read for now. We are waiting new segment write API for write operation to prevent duplicate effort. This is the just initial version. In the future, streaming endpoints will applied for read, and write API will be added.\nFor this version, look the pinot-spark-connector README and read-model documentation for detailed info(I will move documentations https://docs.pinot.apache.org/developers/developers-and-contributors/update-document).\nNote: Presto is the powerful engine for joins or other operations, but it does not the same with spark! Uses cases are different. Just focus spark ecosystem and etl processes.\nPlease share your comments and improvements.", "createdAt": "2020-08-01T12:43:37Z", "url": "https://github.com/apache/pinot/pull/5787", "merged": true, "mergeCommit": {"oid": "d28c5cf4dcceb8ea90cb6fcc7b73b29ecc658d52"}, "closed": true, "closedAt": "2020-08-12T07:31:12Z", "author": {"login": "mangrrua"}, "timelineItems": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc6sQ-LgFqTQ1OTU5MTU5Mg==", "endCursor": "Y3Vyc29yOnYyOpPPAAABc994RSAFqTQ2NTQ0ODcwNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU5NTkxNTky", "url": "https://github.com/apache/pinot/pull/5787#pullrequestreview-459591592", "createdAt": "2020-08-01T17:18:04Z", "commit": {"oid": "59023484ef269d2d96726247b8221e0dbc040ded"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wMVQxNzoxODowNVrOG6fM9w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wMVQxNzoyNDowMlrOG6fOwA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzk4MTgxNQ==", "bodyText": "will be good to move all the versions to the properties", "url": "https://github.com/apache/pinot/pull/5787#discussion_r463981815", "createdAt": "2020-08-01T17:18:05Z", "author": {"login": "kishoreg"}, "path": "pinot-connectors/pinot-spark-connector/pom.xml", "diffHunk": "@@ -0,0 +1,246 @@\n+<?xml version=\"1.0\"?>\n+<!--\n+\n+    Licensed to the Apache Software Foundation (ASF) under one\n+    or more contributor license agreements.  See the NOTICE file\n+    distributed with this work for additional information\n+    regarding copyright ownership.  The ASF licenses this file\n+    to you under the Apache License, Version 2.0 (the\n+    \"License\"); you may not use this file except in compliance\n+    with the License.  You may obtain a copy of the License at\n+\n+      http://www.apache.org/licenses/LICENSE-2.0\n+\n+    Unless required by applicable law or agreed to in writing,\n+    software distributed under the License is distributed on an\n+    \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+    KIND, either express or implied.  See the License for the\n+    specific language governing permissions and limitations\n+    under the License.\n+\n+-->\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+    <modelVersion>4.0.0</modelVersion>\n+    <parent>\n+        <artifactId>pinot-connectors</artifactId>\n+        <groupId>org.apache.pinot</groupId>\n+        <version>${revision}${sha1}</version>\n+        <relativePath>..</relativePath>\n+    </parent>\n+    <artifactId>pinot-spark-connector</artifactId>\n+    <name>Pinot Spark Connector</name>\n+    <url>https://pinot.apache.org/</url>\n+    <properties>\n+        <pinot.root>${basedir}/../..</pinot.root>\n+        <spark.version>2.4.5</spark.version>\n+        <circe.version>0.13.0</circe.version>\n+    </properties>\n+\n+    <profiles>\n+        <profile>\n+            <id>scala-2.12</id>\n+            <activation>\n+                <activeByDefault>true</activeByDefault>\n+            </activation>\n+            <properties>\n+                <scala.version>2.12.11</scala.version>\n+                <scala.compat.version>2.12</scala.compat.version>\n+            </properties>\n+            <dependencies>\n+                <dependency>\n+                    <groupId>com.thoughtworks.paranamer</groupId>\n+                    <artifactId>paranamer</artifactId>\n+                    <version>2.8</version>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "59023484ef269d2d96726247b8221e0dbc040ded"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzk4MTg0NQ==", "bodyText": "what is V2?", "url": "https://github.com/apache/pinot/pull/5787#discussion_r463981845", "createdAt": "2020-08-01T17:18:37Z", "author": {"login": "kishoreg"}, "path": "pinot-connectors/pinot-spark-connector/src/main/resources/META-INF/services/org.apache.spark.sql.sources.DataSourceRegister", "diffHunk": "@@ -0,0 +1 @@\n+org.apache.pinot.connector.spark.datasource.PinotDataSourceV2", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "59023484ef269d2d96726247b8221e0dbc040ded"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzk4MTk4Ng==", "bodyText": "I think we have a new Controller API that provides this as one call cc @fx19880617", "url": "https://github.com/apache/pinot/pull/5787#discussion_r463981986", "createdAt": "2020-08-01T17:20:13Z", "author": {"login": "kishoreg"}, "path": "pinot-connectors/pinot-spark-connector/src/main/scala/org/apache/pinot/connector/spark/connector/PinotClusterClient.scala", "diffHunk": "@@ -0,0 +1,208 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.connector.spark.connector\n+\n+import java.net.{URI, URLEncoder}\n+import java.util.regex.Pattern\n+\n+import org.apache.pinot.connector.spark.decodeTo\n+import org.apache.pinot.connector.spark.exceptions.{HttpStatusCodeException, PinotException}\n+import org.apache.pinot.connector.spark.utils.{HttpUtils, Logging}\n+\n+import scala.util.{Failure, Success, Try}\n+import io.circe.generic.auto._\n+import org.apache.pinot.connector.spark.connector.Constants.PinotTableTypes\n+import org.apache.pinot.connector.spark.connector.query.GeneratedPQLs\n+import org.apache.pinot.spi.data.Schema\n+\n+/**\n+ * Client that read/write/prepare required data from/to Pinot.\n+ */\n+private[pinot] object PinotClusterClient extends Logging {\n+\n+  def getTableSchema(controllerUrl: String, tableName: String): Schema = {\n+    val rawTableName = PinotUtils.getRawTableName(tableName)\n+    Try {\n+      val uri = new URI(s\"http://$controllerUrl/tables/$rawTableName/schema\")\n+      val response = HttpUtils.sendGetRequest(uri)\n+      Schema.fromString(response)\n+    } match {\n+      case Success(response) =>\n+        logDebug(s\"Pinot schema received successfully for table '$rawTableName'\")\n+        response\n+      case Failure(exception) =>\n+        throw PinotException(\n+          s\"An error occurred while getting Pinot schema for table '$rawTableName'\",\n+          exception\n+        )\n+    }\n+  }\n+\n+  /**\n+   * Get available broker urls(host:port) for given table.\n+   * This method is used when if broker instances not defined in the datasource options.\n+   */\n+  def getBrokerInstances(controllerUrl: String, tableName: String): List[String] = {\n+    val brokerPattern = Pattern.compile(\"Broker_(.*)_(\\\\d+)\")\n+    val rawTableName = PinotUtils.getRawTableName(tableName)\n+    Try {\n+      val uri = new URI(s\"http://$controllerUrl/tables/$rawTableName/instances\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "59023484ef269d2d96726247b8221e0dbc040ded"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzk4MjE1NQ==", "bodyText": "should we move to SQL since we plan to deprecate the PQL?", "url": "https://github.com/apache/pinot/pull/5787#discussion_r463982155", "createdAt": "2020-08-01T17:22:18Z", "author": {"login": "kishoreg"}, "path": "pinot-connectors/pinot-spark-connector/src/main/scala/org/apache/pinot/connector/spark/connector/query/GeneratedPQLs.scala", "diffHunk": "@@ -0,0 +1,33 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.connector.spark.connector.query\n+\n+import org.apache.pinot.connector.spark.connector.Constants.{PinotTableType, PinotTableTypes}\n+\n+private[pinot] case class GeneratedPQLs(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "59023484ef269d2d96726247b8221e0dbc040ded"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzk4MjI3Mg==", "bodyText": "is there something special about v2 in spark? Trying to understand why we are naming PinotDataSourceV2 and not just PinotDataSource", "url": "https://github.com/apache/pinot/pull/5787#discussion_r463982272", "createdAt": "2020-08-01T17:24:02Z", "author": {"login": "kishoreg"}, "path": "pinot-connectors/pinot-spark-connector/src/main/scala/org/apache/pinot/connector/spark/datasource/PinotDataSourceV2.scala", "diffHunk": "@@ -0,0 +1,36 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.connector.spark.datasource\n+\n+import org.apache.spark.sql.sources.DataSourceRegister\n+import org.apache.spark.sql.sources.v2.reader.DataSourceReader\n+import org.apache.spark.sql.sources.v2.{DataSourceOptions, DataSourceV2, ReadSupport}\n+import org.apache.spark.sql.types.StructType\n+\n+class PinotDataSourceV2 extends DataSourceV2 with ReadSupport with DataSourceRegister {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "59023484ef269d2d96726247b8221e0dbc040ded"}, "originalPosition": 26}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU5NjMzNzk2", "url": "https://github.com/apache/pinot/pull/5787#pullrequestreview-459633796", "createdAt": "2020-08-02T09:16:30Z", "commit": {"oid": "504a63b9bc3ff9affffd87a4e97dadd2a1c890e4"}, "state": "COMMENTED", "comments": {"totalCount": 17, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wMlQwOToxNjozMVrOG6jmTQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wMlQyMTo1MTowNVrOG6oGtg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDA1MzgzNw==", "bodyText": "What's this file for?", "url": "https://github.com/apache/pinot/pull/5787#discussion_r464053837", "createdAt": "2020-08-02T09:16:31Z", "author": {"login": "xiangfu0"}, "path": "config/.scalafmt.conf", "diffHunk": "@@ -0,0 +1,17 @@\n+version = \"2.4.0\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "504a63b9bc3ff9affffd87a4e97dadd2a1c890e4"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDA1NDQwMA==", "bodyText": "Worth to mention that if the table is OFFLINE or REALTIME only table, user can also use tbl to query.", "url": "https://github.com/apache/pinot/pull/5787#discussion_r464054400", "createdAt": "2020-08-02T09:22:12Z", "author": {"login": "xiangfu0"}, "path": "pinot-connectors/pinot-spark-connector/documentation/read_model.md", "diffHunk": "@@ -0,0 +1,145 @@\n+<!--\n+\n+    Licensed to the Apache Software Foundation (ASF) under one\n+    or more contributor license agreements.  See the NOTICE file\n+    distributed with this work for additional information\n+    regarding copyright ownership.  The ASF licenses this file\n+    to you under the Apache License, Version 2.0 (the\n+    \"License\"); you may not use this file except in compliance\n+    with the License.  You may obtain a copy of the License at\n+\n+      http://www.apache.org/licenses/LICENSE-2.0\n+\n+    Unless required by applicable law or agreed to in writing,\n+    software distributed under the License is distributed on an\n+    \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+    KIND, either express or implied.  See the License for the\n+    specific language governing permissions and limitations\n+    under the License.\n+\n+-->\n+# Read Model\n+\n+Connector can scan offline, hybrid and realtime tables. `table` parameter have to given like below;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "504a63b9bc3ff9affffd87a4e97dadd2a1c890e4"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDA1ODU5OA==", "bodyText": "For filter push down do we support just column with filters like (columnA > 5) or we can support more like transform function on columns like (columnA > columnB, columnA * 10 > columnB)", "url": "https://github.com/apache/pinot/pull/5787#discussion_r464058598", "createdAt": "2020-08-02T10:08:07Z", "author": {"login": "xiangfu0"}, "path": "pinot-connectors/pinot-spark-connector/documentation/read_model.md", "diffHunk": "@@ -0,0 +1,145 @@\n+<!--\n+\n+    Licensed to the Apache Software Foundation (ASF) under one\n+    or more contributor license agreements.  See the NOTICE file\n+    distributed with this work for additional information\n+    regarding copyright ownership.  The ASF licenses this file\n+    to you under the Apache License, Version 2.0 (the\n+    \"License\"); you may not use this file except in compliance\n+    with the License.  You may obtain a copy of the License at\n+\n+      http://www.apache.org/licenses/LICENSE-2.0\n+\n+    Unless required by applicable law or agreed to in writing,\n+    software distributed under the License is distributed on an\n+    \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+    KIND, either express or implied.  See the License for the\n+    specific language governing permissions and limitations\n+    under the License.\n+\n+-->\n+# Read Model\n+\n+Connector can scan offline, hybrid and realtime tables. `table` parameter have to given like below;\n+- For offline table `tbl_OFFLINE`\n+- For realtime table `tbl_REALTIME`\n+- For hybrid table `tbl`\n+\n+An example scan;\n+\n+```scala\n+val df = spark.read\n+      .format(\"pinot\")\n+      .option(\"table\", \"airlineStats\")\n+      .load()\n+```\n+\n+Custom schema can be specified directly. If schema is not specified, connector read table schema from Pinot controller, and then convert to the Spark schema. \n+\n+\n+### Architecture\n+\n+Connector reads data from `Pinot Servers` directly. For this operation, firstly, connector creates query with given filters(if filter push down is enabled) and columns, then finds routing table for created query. It creates pinot splits that contains **ONE PINOT SERVER and ONE OR MORE SEGMENT per spark partition**, based on the routing table and `segmentsPerSplit`(detailed explain is defined below). Lastly, each partition read data from specified pinot server in parallel.\n+\n+![Spark-Pinot Connector Architecture](images/spark-pinot-connector-executor-server-interaction.jpg)\n+\n+\n+Each Spark partition open connection with Pinot server, and read data. For example, assume that routing table informations for specified query is like that:\n+\n+```\n+- realtime ->\n+   - realtimeServer1 -> (segment1, segment2, segment3)\n+   - realtimeServer2 -> (segment4)\n+- offline ->\n+   - offlineServer10 -> (segment10, segment20)\n+```\n+\n+If `segmentsPerSplit` is equal to 3, there will be created 3 Spark partition like below;\n+\n+| Spark Partition  | Queried Pinot Server/Segments |\n+| ------------- | ------------- |\n+| partition1  | realtimeServer1 / segment1, segment2, segment3  |\n+| partition2  | realtimeServer2 / segment4  |\n+| partition3  | offlineServer10 / segment10, segment20 |\n+\n+\n+If `segmentsPerSplit` is equal to 1, there will be created 6 Spark partition;\n+\n+| Spark Partition  | Queried Pinot Server/Segments |\n+| ------------- | ------------- |\n+| partition1  | realtimeServer1 / segment1 |\n+| partition2  | realtimeServer1 / segment2  |\n+| partition3  | realtimeServer1 / segment3 |\n+| partition4  | realtimeServer2 / segment4 |\n+| partition5  | offlineServer10 / segment10 |\n+| partition6  | offlineServer10 / segment20 |\n+\n+\n+If `segmentsPerSplit` value is too low, that means more parallelism. But this also mean that a lot of connection will be opened with Pinot servers, and will increase QPS on the Pinot servers. \n+\n+If `segmetnsPerSplit` value is too high, that means less parallelism. Each Pinot server will scan more segments per request.  \n+\n+**Note:** Pinot servers prunes segments based on the segment metadata when query comes. In some cases(for example filtering based on the some columns), some servers may not return data. Therefore, some Spark partitions will be empty. In this cases, `repartition()` may be applied for efficient data analysis after loading data to Spark.\n+\n+\n+### Filter And Column Push Down\n+Connector supports filter and column push down. Filters and columns are pushed to the pinot servers. Filter and column push down improves the performance while reading data because of its minimizing data transfer between Pinot and Spark. In default, filter push down enabled. If filters are desired to be applied in Spark, `usePushDownFilters` should be set as `false`.\n+\n+Connector supports `Equal, In, LessThan, LessThanOrEqual, Greater, GreaterThan, Not, TEXT_MATCH, And, Or` filters for now.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "504a63b9bc3ff9affffd87a4e97dadd2a1c890e4"}, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDA2MzEzMA==", "bodyText": "new line", "url": "https://github.com/apache/pinot/pull/5787#discussion_r464063130", "createdAt": "2020-08-02T10:59:28Z", "author": {"login": "xiangfu0"}, "path": "pinot-connectors/pinot-spark-connector/src/main/resources/META-INF/services/org.apache.spark.sql.sources.DataSourceRegister", "diffHunk": "@@ -0,0 +1 @@\n+org.apache.pinot.connector.spark.datasource.PinotDataSourceV2", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "504a63b9bc3ff9affffd87a4e97dadd2a1c890e4"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDA2Njg1OQ==", "bodyText": "pinot-spi has already defined enum: org.apache.pinot.spi.config.table.TableType\nAlso you may want to check some utils for table name: org.apache.pinot.spi.utils.builder.TableNameBuilder", "url": "https://github.com/apache/pinot/pull/5787#discussion_r464066859", "createdAt": "2020-08-02T11:39:34Z", "author": {"login": "xiangfu0"}, "path": "pinot-connectors/pinot-spark-connector/src/main/scala/org/apache/pinot/connector/spark/connector/Constants.scala", "diffHunk": "@@ -0,0 +1,28 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.connector.spark.connector\n+\n+private[pinot] object Constants {\n+  type PinotTableType = String\n+\n+  object PinotTableTypes {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "504a63b9bc3ff9affffd87a4e97dadd2a1c890e4"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDA3MTUzNg==", "bodyText": "If you can get schema name from the table config, then you can use method getSchema(host, port, schema) in org.apache.pinot.common.utils.SchemaUtils", "url": "https://github.com/apache/pinot/pull/5787#discussion_r464071536", "createdAt": "2020-08-02T12:29:50Z", "author": {"login": "xiangfu0"}, "path": "pinot-connectors/pinot-spark-connector/src/main/scala/org/apache/pinot/connector/spark/connector/PinotClusterClient.scala", "diffHunk": "@@ -0,0 +1,208 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.connector.spark.connector\n+\n+import java.net.{URI, URLEncoder}\n+import java.util.regex.Pattern\n+\n+import org.apache.pinot.connector.spark.decodeTo\n+import org.apache.pinot.connector.spark.exceptions.{HttpStatusCodeException, PinotException}\n+import org.apache.pinot.connector.spark.utils.{HttpUtils, Logging}\n+\n+import scala.util.{Failure, Success, Try}\n+import io.circe.generic.auto._\n+import org.apache.pinot.connector.spark.connector.Constants.PinotTableTypes\n+import org.apache.pinot.connector.spark.connector.query.GeneratedSQLs\n+import org.apache.pinot.spi.data.Schema\n+\n+/**\n+ * Client that read/write/prepare required data from/to Pinot.\n+ */\n+private[pinot] object PinotClusterClient extends Logging {\n+\n+  def getTableSchema(controllerUrl: String, tableName: String): Schema = {\n+    val rawTableName = PinotUtils.getRawTableName(tableName)\n+    Try {\n+      val uri = new URI(s\"http://$controllerUrl/tables/$rawTableName/schema\")\n+      val response = HttpUtils.sendGetRequest(uri)\n+      Schema.fromString(response)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "504a63b9bc3ff9affffd87a4e97dadd2a1c890e4"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDA3MTYyOA==", "bodyText": "here: #5685", "url": "https://github.com/apache/pinot/pull/5787#discussion_r464071628", "createdAt": "2020-08-02T12:30:35Z", "author": {"login": "xiangfu0"}, "path": "pinot-connectors/pinot-spark-connector/src/main/scala/org/apache/pinot/connector/spark/connector/PinotClusterClient.scala", "diffHunk": "@@ -0,0 +1,208 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.connector.spark.connector\n+\n+import java.net.{URI, URLEncoder}\n+import java.util.regex.Pattern\n+\n+import org.apache.pinot.connector.spark.decodeTo\n+import org.apache.pinot.connector.spark.exceptions.{HttpStatusCodeException, PinotException}\n+import org.apache.pinot.connector.spark.utils.{HttpUtils, Logging}\n+\n+import scala.util.{Failure, Success, Try}\n+import io.circe.generic.auto._\n+import org.apache.pinot.connector.spark.connector.Constants.PinotTableTypes\n+import org.apache.pinot.connector.spark.connector.query.GeneratedPQLs\n+import org.apache.pinot.spi.data.Schema\n+\n+/**\n+ * Client that read/write/prepare required data from/to Pinot.\n+ */\n+private[pinot] object PinotClusterClient extends Logging {\n+\n+  def getTableSchema(controllerUrl: String, tableName: String): Schema = {\n+    val rawTableName = PinotUtils.getRawTableName(tableName)\n+    Try {\n+      val uri = new URI(s\"http://$controllerUrl/tables/$rawTableName/schema\")\n+      val response = HttpUtils.sendGetRequest(uri)\n+      Schema.fromString(response)\n+    } match {\n+      case Success(response) =>\n+        logDebug(s\"Pinot schema received successfully for table '$rawTableName'\")\n+        response\n+      case Failure(exception) =>\n+        throw PinotException(\n+          s\"An error occurred while getting Pinot schema for table '$rawTableName'\",\n+          exception\n+        )\n+    }\n+  }\n+\n+  /**\n+   * Get available broker urls(host:port) for given table.\n+   * This method is used when if broker instances not defined in the datasource options.\n+   */\n+  def getBrokerInstances(controllerUrl: String, tableName: String): List[String] = {\n+    val brokerPattern = Pattern.compile(\"Broker_(.*)_(\\\\d+)\")\n+    val rawTableName = PinotUtils.getRawTableName(tableName)\n+    Try {\n+      val uri = new URI(s\"http://$controllerUrl/tables/$rawTableName/instances\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzk4MTk4Ng=="}, "originalCommit": {"oid": "59023484ef269d2d96726247b8221e0dbc040ded"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDA3MTk0Mw==", "bodyText": "Suggest to make all those URI patterns to be constant.", "url": "https://github.com/apache/pinot/pull/5787#discussion_r464071943", "createdAt": "2020-08-02T12:33:56Z", "author": {"login": "xiangfu0"}, "path": "pinot-connectors/pinot-spark-connector/src/main/scala/org/apache/pinot/connector/spark/connector/PinotClusterClient.scala", "diffHunk": "@@ -0,0 +1,208 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.connector.spark.connector\n+\n+import java.net.{URI, URLEncoder}\n+import java.util.regex.Pattern\n+\n+import org.apache.pinot.connector.spark.decodeTo\n+import org.apache.pinot.connector.spark.exceptions.{HttpStatusCodeException, PinotException}\n+import org.apache.pinot.connector.spark.utils.{HttpUtils, Logging}\n+\n+import scala.util.{Failure, Success, Try}\n+import io.circe.generic.auto._\n+import org.apache.pinot.connector.spark.connector.Constants.PinotTableTypes\n+import org.apache.pinot.connector.spark.connector.query.GeneratedSQLs\n+import org.apache.pinot.spi.data.Schema\n+\n+/**\n+ * Client that read/write/prepare required data from/to Pinot.\n+ */\n+private[pinot] object PinotClusterClient extends Logging {\n+\n+  def getTableSchema(controllerUrl: String, tableName: String): Schema = {\n+    val rawTableName = PinotUtils.getRawTableName(tableName)\n+    Try {\n+      val uri = new URI(s\"http://$controllerUrl/tables/$rawTableName/schema\")\n+      val response = HttpUtils.sendGetRequest(uri)\n+      Schema.fromString(response)\n+    } match {\n+      case Success(response) =>\n+        logDebug(s\"Pinot schema received successfully for table '$rawTableName'\")\n+        response\n+      case Failure(exception) =>\n+        throw PinotException(\n+          s\"An error occurred while getting Pinot schema for table '$rawTableName'\",\n+          exception\n+        )\n+    }\n+  }\n+\n+  /**\n+   * Get available broker urls(host:port) for given table.\n+   * This method is used when if broker instances not defined in the datasource options.\n+   */\n+  def getBrokerInstances(controllerUrl: String, tableName: String): List[String] = {\n+    val brokerPattern = Pattern.compile(\"Broker_(.*)_(\\\\d+)\")\n+    val rawTableName = PinotUtils.getRawTableName(tableName)\n+    Try {\n+      val uri = new URI(s\"http://$controllerUrl/tables/$rawTableName/instances\")\n+      val response = HttpUtils.sendGetRequest(uri)\n+      val brokerUrls = decodeTo[PinotInstances](response).brokers\n+        .flatMap(_.instances)\n+        .distinct\n+        .map(brokerPattern.matcher)\n+        .filter(matcher => matcher.matches() && matcher.groupCount() == 2)\n+        .map { matcher =>\n+          val host = matcher.group(1)\n+          val port = matcher.group(2)\n+          s\"$host:$port\"\n+        }\n+\n+      if (brokerUrls.isEmpty) {\n+        throw new IllegalStateException(s\"Not found broker instance for table '$rawTableName'\")\n+      }\n+\n+      brokerUrls\n+    } match {\n+      case Success(result) =>\n+        logDebug(s\"Broker instances received successfully for table '$tableName'\")\n+        result\n+      case Failure(exception) =>\n+        throw PinotException(\n+          s\"An error occurred while getting broker instances for table '$rawTableName'\",\n+          exception\n+        )\n+    }\n+  }\n+\n+  /**\n+   * Get time boundary info of specified table.\n+   * This method is used when table is hybrid to ensure that the overlap\n+   * between realtime and offline segment data is queried exactly once.\n+   *\n+   * @return time boundary info if table exist and segments push type is 'append' or None otherwise\n+   */\n+  def getTimeBoundaryInfo(brokerUrl: String, tableName: String): Option[TimeBoundaryInfo] = {\n+    val rawTableName = PinotUtils.getRawTableName(tableName)\n+    Try {\n+      // pinot converts the given table name to the offline table name automatically\n+      val uri = new URI(s\"http://$brokerUrl/debug/timeBoundary/$rawTableName\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "504a63b9bc3ff9affffd87a4e97dadd2a1c890e4"}, "originalPosition": 106}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDA3MjI1OQ==", "bodyText": "possible to get more granular info about the executor?", "url": "https://github.com/apache/pinot/pull/5787#discussion_r464072259", "createdAt": "2020-08-02T12:36:49Z", "author": {"login": "xiangfu0"}, "path": "pinot-connectors/pinot-spark-connector/src/main/scala/org/apache/pinot/connector/spark/connector/PinotServerDataFetcher.scala", "diffHunk": "@@ -0,0 +1,134 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.connector.spark.connector\n+\n+import java.util.{List => JList, Map => JMap}\n+\n+import com.yammer.metrics.core.MetricsRegistry\n+import org.apache.helix.model.InstanceConfig\n+import org.apache.pinot.common.metrics.BrokerMetrics\n+import org.apache.pinot.common.request.BrokerRequest\n+import org.apache.pinot.common.utils.DataTable\n+import org.apache.pinot.connector.spark.connector.Constants.PinotTableTypes\n+import org.apache.pinot.connector.spark.datasource.PinotDataSourceReadOptions\n+import org.apache.pinot.connector.spark.exceptions.PinotException\n+import org.apache.pinot.connector.spark.utils.Logging\n+import org.apache.pinot.core.transport.{AsyncQueryResponse, QueryRouter, ServerInstance}\n+import org.apache.pinot.sql.parsers.CalciteSqlCompiler\n+\n+import scala.collection.JavaConverters._\n+\n+/**\n+ * Fetch data from specified Pinot server.\n+ */\n+private[pinot] class PinotServerDataFetcher(\n+    partitionId: Int,\n+    pinotSplit: PinotSplit,\n+    dataSourceOptions: PinotDataSourceReadOptions)\n+  extends Logging {\n+  private val sqlCompiler = new CalciteSqlCompiler()\n+  private val brokerId = \"apache_spark\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "504a63b9bc3ff9affffd87a4e97dadd2a1c890e4"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDA3MjM3Mw==", "bodyText": "Since we are using CalciteSqlCompiler here, I assume we are always using new SQL endpoint, could you change all the PQL references  to SQL?", "url": "https://github.com/apache/pinot/pull/5787#discussion_r464072373", "createdAt": "2020-08-02T12:38:24Z", "author": {"login": "xiangfu0"}, "path": "pinot-connectors/pinot-spark-connector/src/main/scala/org/apache/pinot/connector/spark/connector/PinotServerDataFetcher.scala", "diffHunk": "@@ -0,0 +1,134 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.connector.spark.connector\n+\n+import java.util.{List => JList, Map => JMap}\n+\n+import com.yammer.metrics.core.MetricsRegistry\n+import org.apache.helix.model.InstanceConfig\n+import org.apache.pinot.common.metrics.BrokerMetrics\n+import org.apache.pinot.common.request.BrokerRequest\n+import org.apache.pinot.common.utils.DataTable\n+import org.apache.pinot.connector.spark.connector.Constants.PinotTableTypes\n+import org.apache.pinot.connector.spark.datasource.PinotDataSourceReadOptions\n+import org.apache.pinot.connector.spark.exceptions.PinotException\n+import org.apache.pinot.connector.spark.utils.Logging\n+import org.apache.pinot.core.transport.{AsyncQueryResponse, QueryRouter, ServerInstance}\n+import org.apache.pinot.sql.parsers.CalciteSqlCompiler\n+\n+import scala.collection.JavaConverters._\n+\n+/**\n+ * Fetch data from specified Pinot server.\n+ */\n+private[pinot] class PinotServerDataFetcher(\n+    partitionId: Int,\n+    pinotSplit: PinotSplit,\n+    dataSourceOptions: PinotDataSourceReadOptions)\n+  extends Logging {\n+  private val sqlCompiler = new CalciteSqlCompiler()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "504a63b9bc3ff9affffd87a4e97dadd2a1c890e4"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDA3MjY0OA==", "bodyText": "Why we need this ? Ideally it should just be inside the GeneratedSQLs? So we will send generated query to the given server for some segments.", "url": "https://github.com/apache/pinot/pull/5787#discussion_r464072648", "createdAt": "2020-08-02T12:41:12Z", "author": {"login": "xiangfu0"}, "path": "pinot-connectors/pinot-spark-connector/src/main/scala/org/apache/pinot/connector/spark/connector/PinotSplitter.scala", "diffHunk": "@@ -0,0 +1,85 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.connector.spark.connector\n+\n+import java.util.regex.{Matcher, Pattern}\n+\n+import org.apache.pinot.connector.spark.connector.Constants.PinotTableType\n+import org.apache.pinot.connector.spark.connector.query.GeneratedSQLs\n+import org.apache.pinot.connector.spark.exceptions.PinotException\n+import org.apache.pinot.connector.spark.utils.Logging\n+\n+private[pinot] object PinotSplitter extends Logging {\n+  private val PINOT_SERVER_PATTERN = Pattern.compile(\"Server_(.*)_(\\\\d+)\")\n+\n+  def generatePinotSplits(\n+      generatedSQLs: GeneratedSQLs,\n+      routingTable: Map[String, Map[String, List[String]]],\n+      segmentsPerSplit: Int): List[PinotSplit] = {\n+    routingTable.flatMap {\n+      case (tableType, serversToSegments) =>\n+        serversToSegments\n+          .map { case (server, segments) => parseServerInput(server, segments) }\n+          .flatMap {\n+            case (matcher, segments) =>\n+              createPinotSplitsFromSubSplits(\n+                tableType,\n+                generatedSQLs,\n+                matcher,\n+                segments,\n+                segmentsPerSplit\n+              )\n+          }\n+    }.toList\n+  }\n+\n+  private def parseServerInput(server: String, segments: List[String]): (Matcher, List[String]) = {\n+    val matcher = PINOT_SERVER_PATTERN.matcher(server)\n+    if (matcher.matches() && matcher.groupCount() == 2) matcher -> segments\n+    else throw PinotException(s\"'$server' did not match!?\")\n+  }\n+\n+  private def createPinotSplitsFromSubSplits(\n+      tableType: PinotTableType,\n+      generatedSQLs: GeneratedSQLs,\n+      serverMatcher: Matcher,\n+      segments: List[String],\n+      segmentsPerSplit: Int): Iterator[PinotSplit] = {\n+    val serverHost = serverMatcher.group(1)\n+    val serverPort = serverMatcher.group(2)\n+    val maxSegmentCount = Math.min(segments.size, segmentsPerSplit)\n+    segments.grouped(maxSegmentCount).map { subSegments =>\n+      val serverAndSegments =\n+        PinotServerAndSegments(serverHost, serverPort, subSegments, tableType)\n+      PinotSplit(generatedSQLs, serverAndSegments)\n+    }\n+  }\n+}\n+\n+private[pinot] case class PinotSplit(\n+    generatedSQLs: GeneratedSQLs,\n+    serverAndSegments: PinotServerAndSegments)\n+\n+private[pinot] case class PinotServerAndSegments(\n+    serverHost: String,\n+    serverPort: String,\n+    segments: List[String],\n+    serverType: PinotTableType) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "504a63b9bc3ff9affffd87a4e97dadd2a1c890e4"}, "originalPosition": 83}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDA3MzA2NQ==", "bodyText": "Try to see if you can reuse the methods in org.apache.pinot.spi.utils.builder.TableNameBuilder", "url": "https://github.com/apache/pinot/pull/5787#discussion_r464073065", "createdAt": "2020-08-02T12:45:16Z", "author": {"login": "xiangfu0"}, "path": "pinot-connectors/pinot-spark-connector/src/main/scala/org/apache/pinot/connector/spark/connector/PinotUtils.scala", "diffHunk": "@@ -0,0 +1,140 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.connector.spark.connector\n+\n+import org.apache.pinot.common.utils.DataSchema.ColumnDataType\n+import org.apache.pinot.common.utils.DataTable\n+import org.apache.pinot.connector.spark.connector.Constants.{PinotTableType, PinotTableTypes}\n+import org.apache.pinot.connector.spark.exceptions.PinotException\n+import org.apache.pinot.spi.data.{FieldSpec, Schema}\n+import org.apache.spark.sql.catalyst.InternalRow\n+import org.apache.spark.sql.catalyst.util.ArrayData\n+import org.apache.spark.sql.types._\n+import org.apache.spark.unsafe.types.UTF8String\n+\n+import scala.collection.JavaConverters._\n+\n+private[pinot] object PinotUtils {\n+  private val OFFLINE_TABLE_SUFFIX = s\"_${PinotTableTypes.OFFLINE}\"\n+  private val REALTIME_TABLE_SUFFIX = s\"_${PinotTableTypes.REALTIME}\"\n+\n+  /** Extract raw pinot table name. */\n+  def getRawTableName(tableName: String): String = {\n+    if (tableName.endsWith(OFFLINE_TABLE_SUFFIX)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "504a63b9bc3ff9affffd87a4e97dadd2a1c890e4"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDA3MzE2OA==", "bodyText": "This method is already implemented:\nTableNameBuilder.extractRawTableName()", "url": "https://github.com/apache/pinot/pull/5787#discussion_r464073168", "createdAt": "2020-08-02T12:46:24Z", "author": {"login": "xiangfu0"}, "path": "pinot-connectors/pinot-spark-connector/src/main/scala/org/apache/pinot/connector/spark/connector/PinotUtils.scala", "diffHunk": "@@ -0,0 +1,140 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.connector.spark.connector\n+\n+import org.apache.pinot.common.utils.DataSchema.ColumnDataType\n+import org.apache.pinot.common.utils.DataTable\n+import org.apache.pinot.connector.spark.connector.Constants.{PinotTableType, PinotTableTypes}\n+import org.apache.pinot.connector.spark.exceptions.PinotException\n+import org.apache.pinot.spi.data.{FieldSpec, Schema}\n+import org.apache.spark.sql.catalyst.InternalRow\n+import org.apache.spark.sql.catalyst.util.ArrayData\n+import org.apache.spark.sql.types._\n+import org.apache.spark.unsafe.types.UTF8String\n+\n+import scala.collection.JavaConverters._\n+\n+private[pinot] object PinotUtils {\n+  private val OFFLINE_TABLE_SUFFIX = s\"_${PinotTableTypes.OFFLINE}\"\n+  private val REALTIME_TABLE_SUFFIX = s\"_${PinotTableTypes.REALTIME}\"\n+\n+  /** Extract raw pinot table name. */\n+  def getRawTableName(tableName: String): String = {\n+    if (tableName.endsWith(OFFLINE_TABLE_SUFFIX)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDA3MzA2NQ=="}, "originalCommit": {"oid": "504a63b9bc3ff9affffd87a4e97dadd2a1c890e4"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDA3MzIwNQ==", "bodyText": "TableNameBuilder .getTableTypeFromTableName()", "url": "https://github.com/apache/pinot/pull/5787#discussion_r464073205", "createdAt": "2020-08-02T12:46:45Z", "author": {"login": "xiangfu0"}, "path": "pinot-connectors/pinot-spark-connector/src/main/scala/org/apache/pinot/connector/spark/connector/PinotUtils.scala", "diffHunk": "@@ -0,0 +1,140 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.connector.spark.connector\n+\n+import org.apache.pinot.common.utils.DataSchema.ColumnDataType\n+import org.apache.pinot.common.utils.DataTable\n+import org.apache.pinot.connector.spark.connector.Constants.{PinotTableType, PinotTableTypes}\n+import org.apache.pinot.connector.spark.exceptions.PinotException\n+import org.apache.pinot.spi.data.{FieldSpec, Schema}\n+import org.apache.spark.sql.catalyst.InternalRow\n+import org.apache.spark.sql.catalyst.util.ArrayData\n+import org.apache.spark.sql.types._\n+import org.apache.spark.unsafe.types.UTF8String\n+\n+import scala.collection.JavaConverters._\n+\n+private[pinot] object PinotUtils {\n+  private val OFFLINE_TABLE_SUFFIX = s\"_${PinotTableTypes.OFFLINE}\"\n+  private val REALTIME_TABLE_SUFFIX = s\"_${PinotTableTypes.REALTIME}\"\n+\n+  /** Extract raw pinot table name. */\n+  def getRawTableName(tableName: String): String = {\n+    if (tableName.endsWith(OFFLINE_TABLE_SUFFIX)) {\n+      tableName.substring(0, tableName.length - OFFLINE_TABLE_SUFFIX.length)\n+    } else if (tableName.endsWith(REALTIME_TABLE_SUFFIX)) {\n+      tableName.substring(0, tableName.length - REALTIME_TABLE_SUFFIX.length)\n+    } else {\n+      tableName\n+    }\n+  }\n+\n+  /** Return offline/realtime table type, or None if table is hybrid. */\n+  def getTableType(tableName: String): Option[PinotTableType] = {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "504a63b9bc3ff9affffd87a4e97dadd2a1c890e4"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDEyNjY5MA==", "bodyText": "what about BYTES?", "url": "https://github.com/apache/pinot/pull/5787#discussion_r464126690", "createdAt": "2020-08-02T21:41:16Z", "author": {"login": "xiangfu0"}, "path": "pinot-connectors/pinot-spark-connector/src/main/scala/org/apache/pinot/connector/spark/connector/PinotUtils.scala", "diffHunk": "@@ -0,0 +1,140 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.connector.spark.connector\n+\n+import org.apache.pinot.common.utils.DataSchema.ColumnDataType\n+import org.apache.pinot.common.utils.DataTable\n+import org.apache.pinot.connector.spark.connector.Constants.{PinotTableType, PinotTableTypes}\n+import org.apache.pinot.connector.spark.exceptions.PinotException\n+import org.apache.pinot.spi.data.{FieldSpec, Schema}\n+import org.apache.spark.sql.catalyst.InternalRow\n+import org.apache.spark.sql.catalyst.util.ArrayData\n+import org.apache.spark.sql.types._\n+import org.apache.spark.unsafe.types.UTF8String\n+\n+import scala.collection.JavaConverters._\n+\n+private[pinot] object PinotUtils {\n+  private val OFFLINE_TABLE_SUFFIX = s\"_${PinotTableTypes.OFFLINE}\"\n+  private val REALTIME_TABLE_SUFFIX = s\"_${PinotTableTypes.REALTIME}\"\n+\n+  /** Extract raw pinot table name. */\n+  def getRawTableName(tableName: String): String = {\n+    if (tableName.endsWith(OFFLINE_TABLE_SUFFIX)) {\n+      tableName.substring(0, tableName.length - OFFLINE_TABLE_SUFFIX.length)\n+    } else if (tableName.endsWith(REALTIME_TABLE_SUFFIX)) {\n+      tableName.substring(0, tableName.length - REALTIME_TABLE_SUFFIX.length)\n+    } else {\n+      tableName\n+    }\n+  }\n+\n+  /** Return offline/realtime table type, or None if table is hybrid. */\n+  def getTableType(tableName: String): Option[PinotTableType] = {\n+    if (tableName.endsWith(OFFLINE_TABLE_SUFFIX)) {\n+      Some(PinotTableTypes.OFFLINE)\n+    } else if (tableName.endsWith(REALTIME_TABLE_SUFFIX)) {\n+      Some(PinotTableTypes.REALTIME)\n+    } else {\n+      None\n+    }\n+  }\n+\n+  /** Convert a Pinot schema to Spark schema. */\n+  def pinotSchemaToSparkSchema(schema: Schema): StructType = {\n+    val structFields = schema.getAllFieldSpecs.asScala.map { field =>\n+      val sparkDataType = pinotDataTypeToSparkDataType(field.getDataType)\n+      if (field.isSingleValueField) {\n+        StructField(field.getName, sparkDataType)\n+      } else {\n+        StructField(field.getName, ArrayType(sparkDataType))\n+      }\n+    }\n+    StructType(structFields.toList)\n+  }\n+\n+  private def pinotDataTypeToSparkDataType(dataType: FieldSpec.DataType): DataType =\n+    dataType match {\n+      case FieldSpec.DataType.INT => IntegerType\n+      case FieldSpec.DataType.LONG => LongType\n+      case FieldSpec.DataType.FLOAT => FloatType\n+      case FieldSpec.DataType.DOUBLE => DoubleType\n+      case FieldSpec.DataType.STRING => StringType\n+      case _ =>\n+        throw PinotException(s\"Unsupported pinot data type '$dataType\")\n+    }\n+\n+  /** Convert Pinot DataTable to Seq of InternalRow */\n+  def pinotDataTableToInternalRows(\n+      dataTable: DataTable,\n+      sparkSchema: StructType): Seq[InternalRow] = {\n+    val dataTableColumnNames = dataTable.getDataSchema.getColumnNames\n+    (0 until dataTable.getNumberOfRows).map { rowIndex =>\n+      // spark schema is used to ensure columns order\n+      val columns = sparkSchema.fields.map { field =>\n+        val colIndex = dataTableColumnNames.indexOf(field.name)\n+        if (colIndex < 0) {\n+          throw PinotException(s\"'${field.name}' not found in Pinot server response\")\n+        } else {\n+          // pinot column data type can be used directly,\n+          // because all of them is supported in spark schema\n+          val columnDataType = dataTable.getDataSchema.getColumnDataType(colIndex)\n+          readPinotColumnData(dataTable, columnDataType, rowIndex, colIndex)\n+        }\n+      }\n+      InternalRow.fromSeq(columns)\n+    }\n+  }\n+\n+  private def readPinotColumnData(\n+      dataTable: DataTable,\n+      columnDataType: ColumnDataType,\n+      rowIndex: Int,\n+      colIndex: Int): Any = columnDataType match {\n+    // single column types\n+    case ColumnDataType.STRING =>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "504a63b9bc3ff9affffd87a4e97dadd2a1c890e4"}, "originalPosition": 111}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDEyNzA2NQ==", "bodyText": "generateSQLs?", "url": "https://github.com/apache/pinot/pull/5787#discussion_r464127065", "createdAt": "2020-08-02T21:45:41Z", "author": {"login": "xiangfu0"}, "path": "pinot-connectors/pinot-spark-connector/src/main/scala/org/apache/pinot/connector/spark/connector/query/SQLSelectionQueryGenerator.scala", "diffHunk": "@@ -0,0 +1,101 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.connector.spark.connector.query\n+\n+import org.apache.pinot.connector.spark.connector.Constants.{PinotTableType, PinotTableTypes}\n+import org.apache.pinot.connector.spark.connector.{PinotUtils, TimeBoundaryInfo}\n+\n+/**\n+ * Generate realtime and offline SQL queries for specified table with given columns and filters.\n+ */\n+private[pinot] class SQLSelectionQueryGenerator(\n+    tableNameWithType: String,\n+    timeBoundaryInfo: Option[TimeBoundaryInfo],\n+    columns: Array[String],\n+    whereClause: Option[String]) {\n+  private val columnsExpression = columnsAsExpression()\n+  private val rawTableName = PinotUtils.getRawTableName(tableNameWithType)\n+  private val tableType = PinotUtils.getTableType(tableNameWithType)\n+\n+  def generatePQLs(): GeneratedSQLs = {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "504a63b9bc3ff9affffd87a4e97dadd2a1c890e4"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDEyNzY3MA==", "bodyText": "shall we check if there is existing LIMIT?", "url": "https://github.com/apache/pinot/pull/5787#discussion_r464127670", "createdAt": "2020-08-02T21:51:05Z", "author": {"login": "xiangfu0"}, "path": "pinot-connectors/pinot-spark-connector/src/main/scala/org/apache/pinot/connector/spark/connector/query/SQLSelectionQueryGenerator.scala", "diffHunk": "@@ -0,0 +1,101 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.connector.spark.connector.query\n+\n+import org.apache.pinot.connector.spark.connector.Constants.{PinotTableType, PinotTableTypes}\n+import org.apache.pinot.connector.spark.connector.{PinotUtils, TimeBoundaryInfo}\n+\n+/**\n+ * Generate realtime and offline SQL queries for specified table with given columns and filters.\n+ */\n+private[pinot] class SQLSelectionQueryGenerator(\n+    tableNameWithType: String,\n+    timeBoundaryInfo: Option[TimeBoundaryInfo],\n+    columns: Array[String],\n+    whereClause: Option[String]) {\n+  private val columnsExpression = columnsAsExpression()\n+  private val rawTableName = PinotUtils.getRawTableName(tableNameWithType)\n+  private val tableType = PinotUtils.getTableType(tableNameWithType)\n+\n+  def generatePQLs(): GeneratedSQLs = {\n+    val offlineSelectQuery = buildSelectQuery(PinotTableTypes.OFFLINE)\n+    val realtimeSelectQuery = buildSelectQuery(PinotTableTypes.REALTIME)\n+    GeneratedSQLs(\n+      rawTableName,\n+      tableType,\n+      offlineSelectQuery,\n+      realtimeSelectQuery\n+    )\n+  }\n+\n+  /**\n+   * Get all columns if selecting columns empty(eg: resultDataFrame.count())\n+   */\n+  private def columnsAsExpression(): String = {\n+    if (columns.isEmpty) \"*\" else columns.mkString(\",\")\n+  }\n+\n+  /**\n+   * Build realtime or offline PQL selection query.\n+   */\n+  private def buildSelectQuery(tableType: PinotTableType): String = {\n+    val tableNameWithType = s\"${rawTableName}_$tableType\"\n+    val queryBuilder = new StringBuilder(s\"SELECT $columnsExpression FROM $tableNameWithType\")\n+\n+    // add where clause if exists\n+    whereClause.foreach { x =>\n+      queryBuilder.append(s\" WHERE $x\")\n+    }\n+\n+    // add time boundary filter if exists\n+    timeBoundaryInfo.foreach { tbi =>\n+      val timeBoundaryFilter =\n+        if (tableType == PinotTableTypes.OFFLINE) {\n+          tbi.getOfflinePredicate\n+        } else {\n+          tbi.getRealtimePredicate\n+        }\n+\n+      if (whereClause.isEmpty) {\n+        queryBuilder.append(s\" WHERE $timeBoundaryFilter\")\n+      } else {\n+        queryBuilder.append(s\" AND $timeBoundaryFilter\")\n+      }\n+    }\n+\n+    // query will be converted to Pinot 'BrokerRequest' with PQL compiler\n+    // pinot set limit to 10 automatically\n+    // to prevent this add limit to query\n+    queryBuilder.append(s\" LIMIT ${Int.MaxValue}\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "504a63b9bc3ff9affffd87a4e97dadd2a1c890e4"}, "originalPosition": 85}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYwMTA0OTUz", "url": "https://github.com/apache/pinot/pull/5787#pullrequestreview-460104953", "createdAt": "2020-08-03T15:05:56Z", "commit": {"oid": "504a63b9bc3ff9affffd87a4e97dadd2a1c890e4"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QxNTowNTo1NlrOG69QKw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QxNToyODoxN1rOG6-G5Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDQ3NDE1NQ==", "bodyText": "Perhaps we should have a PinotSchema <-> SparkSchema converter?", "url": "https://github.com/apache/pinot/pull/5787#discussion_r464474155", "createdAt": "2020-08-03T15:05:56Z", "author": {"login": "mayankshriv"}, "path": "pinot-connectors/pinot-spark-connector/src/test/resources/schema/pinot-schema.json", "diffHunk": "@@ -0,0 +1,57 @@\n+{", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "504a63b9bc3ff9affffd87a4e97dadd2a1c890e4"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDQ3NjAwMQ==", "bodyText": "Could we have docs on all classes?", "url": "https://github.com/apache/pinot/pull/5787#discussion_r464476001", "createdAt": "2020-08-03T15:08:53Z", "author": {"login": "mayankshriv"}, "path": "pinot-connectors/pinot-spark-connector/src/test/scala/org/apache/pinot/connector/spark/connector/PinotSplitterTest.scala", "diffHunk": "@@ -0,0 +1,95 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.connector.spark.connector\n+\n+import org.apache.pinot.connector.spark.BaseTest\n+import org.apache.pinot.connector.spark.connector.Constants.PinotTableTypes\n+import org.apache.pinot.connector.spark.connector.query.GeneratedSQLs\n+import org.apache.pinot.connector.spark.exceptions.PinotException\n+\n+class PinotSplitterTest extends BaseTest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "504a63b9bc3ff9affffd87a4e97dadd2a1c890e4"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDQ3ODU1Mg==", "bodyText": "Should this also go into https://docs.pinot.apache.org, after the PR is committed?", "url": "https://github.com/apache/pinot/pull/5787#discussion_r464478552", "createdAt": "2020-08-03T15:13:04Z", "author": {"login": "mayankshriv"}, "path": "pinot-connectors/pinot-spark-connector/documentation/read_model.md", "diffHunk": "@@ -0,0 +1,145 @@\n+<!--\n+\n+    Licensed to the Apache Software Foundation (ASF) under one\n+    or more contributor license agreements.  See the NOTICE file\n+    distributed with this work for additional information\n+    regarding copyright ownership.  The ASF licenses this file\n+    to you under the Apache License, Version 2.0 (the\n+    \"License\"); you may not use this file except in compliance\n+    with the License.  You may obtain a copy of the License at\n+\n+      http://www.apache.org/licenses/LICENSE-2.0\n+\n+    Unless required by applicable law or agreed to in writing,\n+    software distributed under the License is distributed on an\n+    \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+    KIND, either express or implied.  See the License for the\n+    specific language governing permissions and limitations\n+    under the License.\n+\n+-->\n+# Read Model", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "504a63b9bc3ff9affffd87a4e97dadd2a1c890e4"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDQ4NzQ5MA==", "bodyText": "Connecting to pinot server directly leads to querying routing-table / time-boundary, which the broker does. Wondering if there is plan to connect via the broker to avoid this? It may have the following advantages:\n\nNo need to query routing-table / time-boundary, and unlike in this approach.\nFilter push down\n\nOne issue I see though, it may not be feasible to stream data out of broker with the current code. I am trying to see what the general direction/approach is with these connectors.", "url": "https://github.com/apache/pinot/pull/5787#discussion_r464487490", "createdAt": "2020-08-03T15:27:18Z", "author": {"login": "mayankshriv"}, "path": "pinot-connectors/pinot-spark-connector/src/main/scala/org/apache/pinot/connector/spark/datasource/PinotDataSourceReader.scala", "diffHunk": "@@ -0,0 +1,124 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.connector.spark.datasource\n+\n+import java.util.{List => JList}\n+\n+import org.apache.pinot.connector.spark.connector.query.SQLSelectionQueryGenerator\n+import org.apache.pinot.connector.spark.connector.{\n+  FilterPushDown,\n+  PinotClusterClient,\n+  PinotSplitter,\n+  PinotUtils\n+}\n+import org.apache.spark.sql.catalyst.InternalRow\n+import org.apache.spark.sql.sources._\n+import org.apache.spark.sql.sources.v2.DataSourceOptions\n+import org.apache.spark.sql.sources.v2.reader.{\n+  DataSourceReader,\n+  InputPartition,\n+  SupportsPushDownFilters,\n+  SupportsPushDownRequiredColumns\n+}\n+import org.apache.spark.sql.types._\n+\n+import scala.collection.JavaConverters._\n+\n+class PinotDataSourceReader(options: DataSourceOptions, userSchema: Option[StructType] = None)\n+  extends DataSourceReader\n+  with SupportsPushDownFilters\n+  with SupportsPushDownRequiredColumns {\n+\n+  private val pinotDataSourceOptions = PinotDataSourceReadOptions.from(options)\n+  private var acceptedFilters: Array[Filter] = Array.empty\n+  private var currentSchema: StructType = _\n+\n+  override def readSchema(): StructType = {\n+    if (currentSchema == null) {\n+      currentSchema = userSchema.getOrElse {\n+        val pinotTableSchema = PinotClusterClient.getTableSchema(\n+          pinotDataSourceOptions.controller,\n+          pinotDataSourceOptions.tableName\n+        )\n+        PinotUtils.pinotSchemaToSparkSchema(pinotTableSchema)\n+      }\n+    }\n+    currentSchema\n+  }\n+\n+  override def planInputPartitions(): JList[InputPartition[InternalRow]] = {\n+    val schema = readSchema()\n+    val tableType = PinotUtils.getTableType(pinotDataSourceOptions.tableName)\n+\n+    // Time boundary is used when table is hybrid to ensure that the overlap\n+    // between realtime and offline segment data is queried exactly once\n+    val timeBoundaryInfo =\n+      if (tableType.isDefined) {\n+        None\n+      } else {\n+        PinotClusterClient.getTimeBoundaryInfo(\n+          pinotDataSourceOptions.broker,\n+          pinotDataSourceOptions.tableName\n+        )\n+      }\n+\n+    val whereCondition = FilterPushDown.compileFiltersToSqlWhereClause(this.acceptedFilters)\n+    val generatedSQLs = SQLSelectionQueryGenerator.generate(\n+      pinotDataSourceOptions.tableName,\n+      timeBoundaryInfo,\n+      schema.fieldNames,\n+      whereCondition\n+    )\n+\n+    val routingTable =\n+      PinotClusterClient.getRoutingTable(pinotDataSourceOptions.broker, generatedSQLs)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "504a63b9bc3ff9affffd87a4e97dadd2a1c890e4"}, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDQ4ODE2NQ==", "bodyText": "Adding docs will help, for folks not yet hands on with Scala.", "url": "https://github.com/apache/pinot/pull/5787#discussion_r464488165", "createdAt": "2020-08-03T15:28:17Z", "author": {"login": "mayankshriv"}, "path": "pinot-connectors/pinot-spark-connector/src/main/scala/org/apache/pinot/connector/spark/datasource/PinotDataSourceV2.scala", "diffHunk": "@@ -0,0 +1,36 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.connector.spark.datasource\n+\n+import org.apache.spark.sql.sources.DataSourceRegister\n+import org.apache.spark.sql.sources.v2.reader.DataSourceReader\n+import org.apache.spark.sql.sources.v2.{DataSourceOptions, DataSourceV2, ReadSupport}\n+import org.apache.spark.sql.types.StructType\n+\n+class PinotDataSourceV2 extends DataSourceV2 with ReadSupport with DataSourceRegister {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzk4MjI3Mg=="}, "originalCommit": {"oid": "59023484ef269d2d96726247b8221e0dbc040ded"}, "originalPosition": 26}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2388d968c8a0aeec8837e0dc496aa703d7b1627d", "author": {"user": {"login": "mangrrua", "name": "Oguzhan Mangir"}}, "url": "https://github.com/apache/pinot/commit/2388d968c8a0aeec8837e0dc496aa703d7b1627d", "committedDate": "2020-08-09T12:37:59Z", "message": "Add pinot-spark-connector"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "986187783a0291f80b80942a3bf4b40867c66ca7", "author": {"user": {"login": "mangrrua", "name": "Oguzhan Mangir"}}, "url": "https://github.com/apache/pinot/commit/986187783a0291f80b80942a3bf4b40867c66ca7", "committedDate": "2020-08-09T11:56:40Z", "message": "Add tableType as parameter"}, "afterCommit": {"oid": "2388d968c8a0aeec8837e0dc496aa703d7b1627d", "author": {"user": {"login": "mangrrua", "name": "Oguzhan Mangir"}}, "url": "https://github.com/apache/pinot/commit/2388d968c8a0aeec8837e0dc496aa703d7b1627d", "committedDate": "2020-08-09T12:37:59Z", "message": "Add pinot-spark-connector"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY1NDQ4NzA2", "url": "https://github.com/apache/pinot/pull/5787#pullrequestreview-465448706", "createdAt": "2020-08-11T21:41:08Z", "commit": {"oid": "2388d968c8a0aeec8837e0dc496aa703d7b1627d"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 528, "cost": 1, "resetAt": "2021-10-28T18:00:02Z"}}}