{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI2MDE0NDE1", "number": 6285, "title": "Improve performance for distinct queries", "bodyText": "Description\nCurrently the distinct queries are handled as aggregation, which has limitations on early termination and special type handling for better performance.\nThis PR adds new operators for distinct queries.\nThe new operators:\n\nEarly terminate the distinct only queries when enough distinct records are collected\nSpecialize the handling for different data types, using primitives if possible\nSpecialize the handling for single column distinct queries\nInner segment, the operator will calculate the distinct records using dictionary ids if possible, and only read the dictionary when returning the results\n\nFor a simple distinct query without filter: select distinct memberId from table limit 1000 where memberId is dictionary-encoded, we have observed over 10x latency improvement (from 17.4s -> 1.37s)", "createdAt": "2020-11-23T21:44:00Z", "url": "https://github.com/apache/pinot/pull/6285", "merged": true, "mergeCommit": {"oid": "66e9394e6d0dc3711ca8bd94d3297e49efba5d5d"}, "closed": true, "closedAt": "2020-12-02T18:37:10Z", "author": {"login": "Jackie-Jiang"}, "timelineItems": {"totalCount": 16, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdfuxjpgBqjQwMzQ0NDAyNzg=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdiS8RVgFqTU0MzEyNzU3OQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "69e4c39d35cdd2d7e9566ecece4c55e5d82b777a", "author": {"user": {"login": "Jackie-Jiang", "name": "Xiaotian (Jackie) Jiang"}}, "url": "https://github.com/apache/pinot/commit/69e4c39d35cdd2d7e9566ecece4c55e5d82b777a", "committedDate": "2020-11-23T21:34:53Z", "message": "Improve performance for distinct queries"}, "afterCommit": {"oid": "8c620e714928548ae4f095b91df626434480551a", "author": {"user": {"login": "Jackie-Jiang", "name": "Xiaotian (Jackie) Jiang"}}, "url": "https://github.com/apache/pinot/commit/8c620e714928548ae4f095b91df626434480551a", "committedDate": "2020-11-24T19:18:14Z", "message": "Improve performance for distinct queries"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQyMDk0NjA1", "url": "https://github.com/apache/pinot/pull/6285#pullrequestreview-542094605", "createdAt": "2020-12-01T16:45:40Z", "commit": {"oid": "8c620e714928548ae4f095b91df626434480551a"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQxNjo0NTo0MFrOH82Bhw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQxNjo0ODo0MFrOH82KFQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzU2MTczNQ==", "bodyText": "Common case (of aggr/group-by) should be first?", "url": "https://github.com/apache/pinot/pull/6285#discussion_r533561735", "createdAt": "2020-12-01T16:45:40Z", "author": {"login": "mayankshriv"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/plan/CombinePlanNode.java", "diffHunk": "@@ -172,7 +173,19 @@ public CombinePlanNode(List<PlanNode> planNodes, QueryContext queryContext, Exec\n       return new StreamingSelectionOnlyCombineOperator(operators, _queryContext, _executorService, _endTimeMs,\n           _streamObserver);\n     }\n-    if (QueryContextUtils.isAggregationQuery(_queryContext)) {\n+    if (QueryContextUtils.isSelectionQuery(_queryContext)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8c620e714928548ae4f095b91df626434480551a"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzU2MjQxMg==", "bodyText": "Same here, common case first?", "url": "https://github.com/apache/pinot/pull/6285#discussion_r533562412", "createdAt": "2020-12-01T16:46:35Z", "author": {"login": "mayankshriv"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/plan/maker/InstancePlanMakerImplV2.java", "diffHunk": "@@ -123,8 +124,13 @@ public Plan makeInstancePlan(List<IndexSegment> indexSegments, QueryContext quer\n \n   @Override\n   public PlanNode makeSegmentPlanNode(IndexSegment indexSegment, QueryContext queryContext) {\n-    if (QueryContextUtils.isAggregationQuery(queryContext)) {\n-      // Aggregation query\n+    if (QueryContextUtils.isSelectionQuery(queryContext)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8c620e714928548ae4f095b91df626434480551a"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzU2MzkyNQ==", "bodyText": "Seems this class does not implement any of the methods?", "url": "https://github.com/apache/pinot/pull/6285#discussion_r533563925", "createdAt": "2020-12-01T16:48:40Z", "author": {"login": "mayankshriv"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/query/aggregation/function/DistinctAggregationFunction.java", "diffHunk": "@@ -18,31 +18,25 @@\n  */\n package org.apache.pinot.core.query.aggregation.function;\n \n-import com.google.common.base.Preconditions;\n-import java.util.Arrays;\n import java.util.List;\n import java.util.Map;\n import javax.annotation.Nullable;\n import org.apache.pinot.common.function.AggregationFunctionType;\n-import org.apache.pinot.common.utils.DataSchema;\n import org.apache.pinot.common.utils.DataSchema.ColumnDataType;\n import org.apache.pinot.core.common.BlockValSet;\n-import org.apache.pinot.core.common.RowBasedBlockValueFetcher;\n-import org.apache.pinot.core.data.table.Record;\n import org.apache.pinot.core.query.aggregation.AggregationResultHolder;\n-import org.apache.pinot.core.query.aggregation.ObjectAggregationResultHolder;\n-import org.apache.pinot.core.query.aggregation.function.customobject.DistinctTable;\n import org.apache.pinot.core.query.aggregation.groupby.GroupByResultHolder;\n import org.apache.pinot.core.query.request.context.ExpressionContext;\n import org.apache.pinot.core.query.request.context.OrderByExpressionContext;\n \n \n /**\n- * The DISTINCT clause in SQL is executed as the DISTINCT aggregation function.\n- * TODO: Support group-by\n+ * The DISTINCT clause in SQL is represented as the DISTINCT aggregation function. Currently it is only used to wrap the\n+ * information for the distinct queries.\n+ * TODO: Use a separate way to represent DISTINCT instead of aggregation.\n  */\n @SuppressWarnings(\"rawtypes\")\n-public class DistinctAggregationFunction implements AggregationFunction<DistinctTable, Comparable> {\n+public class DistinctAggregationFunction implements AggregationFunction<Object, Comparable> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8c620e714928548ae4f095b91df626434480551a"}, "originalPosition": 32}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "8c620e714928548ae4f095b91df626434480551a", "author": {"user": {"login": "Jackie-Jiang", "name": "Xiaotian (Jackie) Jiang"}}, "url": "https://github.com/apache/pinot/commit/8c620e714928548ae4f095b91df626434480551a", "committedDate": "2020-11-24T19:18:14Z", "message": "Improve performance for distinct queries"}, "afterCommit": {"oid": "e5440b1578895f19fe34cc5f3ae58759ba254945", "author": {"user": {"login": "Jackie-Jiang", "name": "Xiaotian (Jackie) Jiang"}}, "url": "https://github.com/apache/pinot/commit/e5440b1578895f19fe34cc5f3ae58759ba254945", "committedDate": "2020-12-01T19:11:21Z", "message": "Improve performance for distinct queries"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQyMjI0MTUw", "url": "https://github.com/apache/pinot/pull/6285#pullrequestreview-542224150", "createdAt": "2020-12-01T19:25:27Z", "commit": {"oid": "e5440b1578895f19fe34cc5f3ae58759ba254945"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQxOToyNToyOFrOH88UdQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQxOToyNToyOFrOH88UdQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzY2NDg4NQ==", "bodyText": "Why not use Preconditions.checkState()? Are we moving away from them as a convention?", "url": "https://github.com/apache/pinot/pull/6285#discussion_r533664885", "createdAt": "2020-12-01T19:25:28Z", "author": {"login": "siddharthteotia"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/operator/combine/DistinctCombineOperator.java", "diffHunk": "@@ -0,0 +1,82 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.core.operator.combine;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.concurrent.ExecutorService;\n+import org.apache.pinot.core.common.Operator;\n+import org.apache.pinot.core.operator.blocks.IntermediateResultsBlock;\n+import org.apache.pinot.core.query.distinct.DistinctTable;\n+import org.apache.pinot.core.query.request.context.QueryContext;\n+\n+\n+/**\n+ * Combine operator for distinct queries.\n+ */\n+@SuppressWarnings(\"rawtypes\")\n+public class DistinctCombineOperator extends BaseCombineOperator {\n+  private static final String OPERATOR_NAME = \"DistinctCombineOperator\";\n+\n+  public DistinctCombineOperator(List<Operator> operators, QueryContext queryContext, ExecutorService executorService,\n+      long endTimeMs) {\n+    super(operators, queryContext, executorService, endTimeMs);\n+  }\n+\n+  @Override\n+  public String getOperatorName() {\n+    return OPERATOR_NAME;\n+  }\n+\n+  @Override\n+  protected boolean isQuerySatisfied(IntermediateResultsBlock resultsBlock) {\n+    if (_queryContext.getOrderByExpressions() == null) {\n+      List<Object> result = resultsBlock.getAggregationResult();\n+      assert result != null && result.size() == 1 && result.get(0) instanceof DistinctTable;\n+      DistinctTable distinctTable = (DistinctTable) result.get(0);\n+      return distinctTable.size() >= _queryContext.getLimit();\n+    } else {\n+      return false;\n+    }\n+  }\n+\n+  @Override\n+  protected void mergeResultsBlocks(IntermediateResultsBlock mergedBlock, IntermediateResultsBlock blockToMerge) {\n+    // TODO: Use a separate way to represent DISTINCT instead of aggregation.\n+    List<Object> mergedResults = mergedBlock.getAggregationResult();\n+    assert mergedResults != null && mergedResults.size() == 1 && mergedResults.get(0) instanceof DistinctTable;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e5440b1578895f19fe34cc5f3ae58759ba254945"}, "originalPosition": 63}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQyMjI0MTkw", "url": "https://github.com/apache/pinot/pull/6285#pullrequestreview-542224190", "createdAt": "2020-12-01T19:25:30Z", "commit": {"oid": "e5440b1578895f19fe34cc5f3ae58759ba254945"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQxOToyNTozMFrOH88Umw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQxOToyNTozMFrOH88Umw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzY2NDkyMw==", "bodyText": "You can probably stash away the order by presence in a boolean instance variable and avoid the method call to getOrderByExpressions() here since I believe it will be called by each combine thread for each segment it is processing in a loop. Simply check for the instance variable", "url": "https://github.com/apache/pinot/pull/6285#discussion_r533664923", "createdAt": "2020-12-01T19:25:30Z", "author": {"login": "siddharthteotia"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/operator/combine/DistinctCombineOperator.java", "diffHunk": "@@ -0,0 +1,82 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.core.operator.combine;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.concurrent.ExecutorService;\n+import org.apache.pinot.core.common.Operator;\n+import org.apache.pinot.core.operator.blocks.IntermediateResultsBlock;\n+import org.apache.pinot.core.query.distinct.DistinctTable;\n+import org.apache.pinot.core.query.request.context.QueryContext;\n+\n+\n+/**\n+ * Combine operator for distinct queries.\n+ */\n+@SuppressWarnings(\"rawtypes\")\n+public class DistinctCombineOperator extends BaseCombineOperator {\n+  private static final String OPERATOR_NAME = \"DistinctCombineOperator\";\n+\n+  public DistinctCombineOperator(List<Operator> operators, QueryContext queryContext, ExecutorService executorService,\n+      long endTimeMs) {\n+    super(operators, queryContext, executorService, endTimeMs);\n+  }\n+\n+  @Override\n+  public String getOperatorName() {\n+    return OPERATOR_NAME;\n+  }\n+\n+  @Override\n+  protected boolean isQuerySatisfied(IntermediateResultsBlock resultsBlock) {\n+    if (_queryContext.getOrderByExpressions() == null) {\n+      List<Object> result = resultsBlock.getAggregationResult();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e5440b1578895f19fe34cc5f3ae58759ba254945"}, "originalPosition": 50}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQyMjI3NjUx", "url": "https://github.com/apache/pinot/pull/6285#pullrequestreview-542227651", "createdAt": "2020-12-01T19:30:09Z", "commit": {"oid": "e5440b1578895f19fe34cc5f3ae58759ba254945"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQxOTozMDowOVrOH88fig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQxOTozMDowOVrOH88fig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzY2NzcyMg==", "bodyText": "please consider separating this into multiple private methods for better readability", "url": "https://github.com/apache/pinot/pull/6285#discussion_r533667722", "createdAt": "2020-12-01T19:30:09Z", "author": {"login": "siddharthteotia"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/query/distinct/DistinctExecutorFactory.java", "diffHunk": "@@ -0,0 +1,176 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.core.query.distinct;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import org.apache.pinot.core.operator.transform.TransformOperator;\n+import org.apache.pinot.core.query.aggregation.function.DistinctAggregationFunction;\n+import org.apache.pinot.core.query.distinct.dictionary.DictionaryBasedMultiColumnDistinctOnlyExecutor;\n+import org.apache.pinot.core.query.distinct.dictionary.DictionaryBasedMultiColumnDistinctOrderByExecutor;\n+import org.apache.pinot.core.query.distinct.dictionary.DictionaryBasedSingleColumnDistinctOnlyExecutor;\n+import org.apache.pinot.core.query.distinct.dictionary.DictionaryBasedSingleColumnDistinctOrderByExecutor;\n+import org.apache.pinot.core.query.distinct.raw.RawBytesSingleColumnDistinctOnlyExecutor;\n+import org.apache.pinot.core.query.distinct.raw.RawBytesSingleColumnDistinctOrderByExecutor;\n+import org.apache.pinot.core.query.distinct.raw.RawDoubleSingleColumnDistinctOnlyExecutor;\n+import org.apache.pinot.core.query.distinct.raw.RawDoubleSingleColumnDistinctOrderByExecutor;\n+import org.apache.pinot.core.query.distinct.raw.RawFloatSingleColumnDistinctOnlyExecutor;\n+import org.apache.pinot.core.query.distinct.raw.RawFloatSingleColumnDistinctOrderByExecutor;\n+import org.apache.pinot.core.query.distinct.raw.RawIntSingleColumnDistinctOnlyExecutor;\n+import org.apache.pinot.core.query.distinct.raw.RawIntSingleColumnDistinctOrderByExecutor;\n+import org.apache.pinot.core.query.distinct.raw.RawLongSingleColumnDistinctOnlyExecutor;\n+import org.apache.pinot.core.query.distinct.raw.RawLongSingleColumnDistinctOrderByExecutor;\n+import org.apache.pinot.core.query.distinct.raw.RawMultiColumnDistinctExecutor;\n+import org.apache.pinot.core.query.distinct.raw.RawStringSingleColumnDistinctOnlyExecutor;\n+import org.apache.pinot.core.query.distinct.raw.RawStringSingleColumnDistinctOrderByExecutor;\n+import org.apache.pinot.core.query.request.context.ExpressionContext;\n+import org.apache.pinot.core.query.request.context.OrderByExpressionContext;\n+import org.apache.pinot.core.segment.index.readers.Dictionary;\n+import org.apache.pinot.spi.data.FieldSpec.DataType;\n+\n+\n+public class DistinctExecutorFactory {\n+  private DistinctExecutorFactory() {\n+  }\n+\n+  public static DistinctExecutor getDistinctExecutor(DistinctAggregationFunction distinctAggregationFunction,\n+      TransformOperator transformOperator) {\n+    List<ExpressionContext> expressions = distinctAggregationFunction.getInputExpressions();\n+    List<OrderByExpressionContext> orderByExpressions = distinctAggregationFunction.getOrderByExpressions();\n+    int limit = distinctAggregationFunction.getLimit();\n+    if (orderByExpressions == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e5440b1578895f19fe34cc5f3ae58759ba254945"}, "originalPosition": 57}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQyMjQzOTU2", "url": "https://github.com/apache/pinot/pull/6285#pullrequestreview-542243956", "createdAt": "2020-12-01T19:52:37Z", "commit": {"oid": "e5440b1578895f19fe34cc5f3ae58759ba254945"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQxOTo1MjozN1rOH89Rhw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQxOTo1MjozN1rOH89Rhw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzY4MDUxOQ==", "bodyText": "javadoc please", "url": "https://github.com/apache/pinot/pull/6285#discussion_r533680519", "createdAt": "2020-12-01T19:52:37Z", "author": {"login": "siddharthteotia"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/query/distinct/dictionary/BaseDictionaryBasedMultiColumnDistinctExecutor.java", "diffHunk": "@@ -0,0 +1,95 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.core.query.distinct.dictionary;\n+\n+import it.unimi.dsi.fastutil.objects.ObjectOpenHashSet;\n+import it.unimi.dsi.fastutil.objects.ObjectSet;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import org.apache.pinot.common.utils.DataSchema;\n+import org.apache.pinot.common.utils.DataSchema.ColumnDataType;\n+import org.apache.pinot.core.data.table.Record;\n+import org.apache.pinot.core.query.distinct.DistinctTable;\n+import org.apache.pinot.core.query.distinct.DistinctExecutor;\n+import org.apache.pinot.core.query.request.context.ExpressionContext;\n+import org.apache.pinot.core.segment.index.readers.Dictionary;\n+import org.apache.pinot.spi.data.FieldSpec.DataType;\n+import org.apache.pinot.spi.utils.ByteArray;\n+\n+\n+abstract class BaseDictionaryBasedMultiColumnDistinctExecutor implements DistinctExecutor {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e5440b1578895f19fe34cc5f3ae58759ba254945"}, "originalPosition": 37}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQyMjQ0MDk3", "url": "https://github.com/apache/pinot/pull/6285#pullrequestreview-542244097", "createdAt": "2020-12-01T19:52:49Z", "commit": {"oid": "e5440b1578895f19fe34cc5f3ae58759ba254945"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQxOTo1Mjo0OVrOH89R7Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQxOTo1Mjo0OVrOH89R7Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzY4MDYyMQ==", "bodyText": "javadoc please", "url": "https://github.com/apache/pinot/pull/6285#discussion_r533680621", "createdAt": "2020-12-01T19:52:49Z", "author": {"login": "siddharthteotia"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/query/distinct/dictionary/BaseDictionaryBasedSingleColumnDistinctExecutor.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.core.query.distinct.dictionary;\n+\n+import it.unimi.dsi.fastutil.ints.IntIterator;\n+import it.unimi.dsi.fastutil.ints.IntOpenHashSet;\n+import it.unimi.dsi.fastutil.ints.IntSet;\n+import java.util.ArrayList;\n+import java.util.List;\n+import org.apache.pinot.common.utils.DataSchema;\n+import org.apache.pinot.common.utils.DataSchema.ColumnDataType;\n+import org.apache.pinot.core.data.table.Record;\n+import org.apache.pinot.core.query.distinct.DistinctTable;\n+import org.apache.pinot.core.query.distinct.DistinctExecutor;\n+import org.apache.pinot.core.query.request.context.ExpressionContext;\n+import org.apache.pinot.core.segment.index.readers.Dictionary;\n+import org.apache.pinot.spi.data.FieldSpec.DataType;\n+import org.apache.pinot.spi.utils.ByteArray;\n+\n+\n+abstract class BaseDictionaryBasedSingleColumnDistinctExecutor implements DistinctExecutor {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e5440b1578895f19fe34cc5f3ae58759ba254945"}, "originalPosition": 37}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQyMjQ1NjA2", "url": "https://github.com/apache/pinot/pull/6285#pullrequestreview-542245606", "createdAt": "2020-12-01T19:54:52Z", "commit": {"oid": "e5440b1578895f19fe34cc5f3ae58759ba254945"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQxOTo1NDo1MlrOH89Wcw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQxOTo1NDo1MlrOH89Wcw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzY4MTc3OQ==", "bodyText": "Please add javadocs to all classes", "url": "https://github.com/apache/pinot/pull/6285#discussion_r533681779", "createdAt": "2020-12-01T19:54:52Z", "author": {"login": "siddharthteotia"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/query/distinct/raw/RawMultiColumnDistinctExecutor.java", "diffHunk": "@@ -0,0 +1,83 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.core.query.distinct.raw;\n+\n+import java.util.List;\n+import javax.annotation.Nullable;\n+import org.apache.pinot.common.utils.DataSchema;\n+import org.apache.pinot.core.common.BlockValSet;\n+import org.apache.pinot.core.common.RowBasedBlockValueFetcher;\n+import org.apache.pinot.core.data.table.Record;\n+import org.apache.pinot.core.operator.blocks.TransformBlock;\n+import org.apache.pinot.core.query.distinct.DistinctTable;\n+import org.apache.pinot.core.query.distinct.DistinctExecutor;\n+import org.apache.pinot.core.query.request.context.ExpressionContext;\n+import org.apache.pinot.core.query.request.context.OrderByExpressionContext;\n+import org.apache.pinot.spi.data.FieldSpec.DataType;\n+\n+\n+public class RawMultiColumnDistinctExecutor implements DistinctExecutor {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e5440b1578895f19fe34cc5f3ae58759ba254945"}, "originalPosition": 35}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQyMjQ3MTgw", "url": "https://github.com/apache/pinot/pull/6285#pullrequestreview-542247180", "createdAt": "2020-12-01T19:56:53Z", "commit": {"oid": "e5440b1578895f19fe34cc5f3ae58759ba254945"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQxOTo1Njo1M1rOH89beQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQxOTo1Njo1M1rOH89beQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzY4MzA2NQ==", "bodyText": "Can we add another 2 similar tests for single and multi column distinct on dictionary encoded columns. Here both the tests are on raw columns (and so we use DistinctTable)", "url": "https://github.com/apache/pinot/pull/6285#discussion_r533683065", "createdAt": "2020-12-01T19:56:53Z", "author": {"login": "siddharthteotia"}, "path": "pinot-core/src/test/java/org/apache/pinot/queries/InnerSegmentAggregationSingleValueQueriesTest.java", "diffHunk": "@@ -175,26 +178,23 @@ public void testVeryLargeAggregationGroupBy() {\n   @Test\n   public void testSingleColumnDistinct() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e5440b1578895f19fe34cc5f3ae58759ba254945"}, "originalPosition": 25}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQyMjUzOTM5", "url": "https://github.com/apache/pinot/pull/6285#pullrequestreview-542253939", "createdAt": "2020-12-01T20:06:04Z", "commit": {"oid": "e5440b1578895f19fe34cc5f3ae58759ba254945"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQyMDowNjowNFrOH89wFA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQyMDowNjowNFrOH89wFA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzY4ODM0MA==", "bodyText": "We should separate this into multiple individual unit tests.", "url": "https://github.com/apache/pinot/pull/6285#discussion_r533688340", "createdAt": "2020-12-01T20:06:04Z", "author": {"login": "siddharthteotia"}, "path": "pinot-core/src/test/java/org/apache/pinot/queries/DistinctQueriesTest.java", "diffHunk": "@@ -170,163 +199,360 @@ private ImmutableSegment createSegment(int index, List<GenericRow> records)\n     return ImmutableSegmentLoader.load(new File(INDEX_DIR, segmentName), ReadMode.mmap);\n   }\n \n+  @Test\n+  public void testSingleColumnDistinctInnerSegment() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e5440b1578895f19fe34cc5f3ae58759ba254945"}, "originalPosition": 100}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQyMjU3MTE1", "url": "https://github.com/apache/pinot/pull/6285#pullrequestreview-542257115", "createdAt": "2020-12-01T20:10:28Z", "commit": {"oid": "e5440b1578895f19fe34cc5f3ae58759ba254945"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQyMDoxMDoyOFrOH8950Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQyMDoxMDoyOFrOH8950Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzY5MDgzMw==", "bodyText": "Unrelated to this PR - Can we please add another version of tests for SQL? Or may be just use getBrokerResponseForSqlQuery() instead of both PQL and SQL?", "url": "https://github.com/apache/pinot/pull/6285#discussion_r533690833", "createdAt": "2020-12-01T20:10:28Z", "author": {"login": "siddharthteotia"}, "path": "pinot-core/src/test/java/org/apache/pinot/queries/DistinctQueriesTest.java", "diffHunk": "@@ -394,285 +614,273 @@ private DistinctTable getDistinctTableInnerSegment(String query, boolean isPql)\n    *   </li>\n    * </ul>\n    */\n-  private void testDistinctInterSegmentHelper(String[] pqlQueries, String[] sqlQueries)\n-      throws Exception {\n-    ImmutableSegment segment0 = createSegment(0, generateRecords(0));\n-    ImmutableSegment segment1 = createSegment(1, generateRecords(1000));\n-    _indexSegments = Arrays.asList(segment0, segment1);\n-    try {\n-      {\n-        // Test selecting all columns\n-        String pqlQuery = pqlQueries[0];\n-        String sqlQuery = sqlQueries[0];\n-\n-        // Check data schema\n-        BrokerResponseNative pqlResponse = getBrokerResponseForPqlQuery(pqlQuery);\n-        SelectionResults selectionResults = pqlResponse.getSelectionResults();\n-        assertNotNull(selectionResults);\n-        assertEquals(selectionResults.getColumns(),\n-            Arrays.asList(\"intColumn\", \"longColumn\", \"floatColumn\", \"doubleColumn\", \"stringColumn\", \"bytesColumn\"));\n-        BrokerResponseNative sqlResponse = getBrokerResponseForSqlQuery(sqlQuery);\n-        ResultTable resultTable = sqlResponse.getResultTable();\n-        assertNotNull(resultTable);\n-        DataSchema dataSchema = resultTable.getDataSchema();\n-        assertEquals(dataSchema.getColumnNames(),\n-            new String[]{\"intColumn\", \"longColumn\", \"floatColumn\", \"doubleColumn\", \"stringColumn\", \"bytesColumn\"});\n-        assertEquals(dataSchema.getColumnDataTypes(),\n-            new ColumnDataType[]{ColumnDataType.INT, ColumnDataType.LONG, ColumnDataType.FLOAT, ColumnDataType.DOUBLE, ColumnDataType.STRING, ColumnDataType.BYTES});\n-\n-        // Check values, where all 200 unique values should be returned\n-        List<Serializable[]> pqlRows = selectionResults.getRows();\n-        assertEquals(pqlRows.size(), 2 * NUM_UNIQUE_RECORDS_PER_SEGMENT);\n-        List<Object[]> sqlRows = resultTable.getRows();\n-        assertEquals(sqlRows.size(), 2 * NUM_UNIQUE_RECORDS_PER_SEGMENT);\n-        Set<Integer> expectedValues = new HashSet<>();\n-        for (int i = 0; i < NUM_UNIQUE_RECORDS_PER_SEGMENT; i++) {\n+  private void testDistinctInterSegmentHelper(String[] pqlQueries, String[] sqlQueries) {\n+    {\n+      // Test selecting all columns\n+      String pqlQuery = pqlQueries[0];\n+      String sqlQuery = sqlQueries[0];\n+\n+      // Check data schema\n+      BrokerResponseNative pqlResponse = getBrokerResponseForPqlQuery(pqlQuery);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e5440b1578895f19fe34cc5f3ae58759ba254945"}, "originalPosition": 690}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c42ec6c3465e6e7774f5b172068650e8dd090e91", "author": {"user": {"login": "Jackie-Jiang", "name": "Xiaotian (Jackie) Jiang"}}, "url": "https://github.com/apache/pinot/commit/c42ec6c3465e6e7774f5b172068650e8dd090e91", "committedDate": "2020-12-01T21:00:49Z", "message": "Improve performance for distinct queries"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e5440b1578895f19fe34cc5f3ae58759ba254945", "author": {"user": {"login": "Jackie-Jiang", "name": "Xiaotian (Jackie) Jiang"}}, "url": "https://github.com/apache/pinot/commit/e5440b1578895f19fe34cc5f3ae58759ba254945", "committedDate": "2020-12-01T19:11:21Z", "message": "Improve performance for distinct queries"}, "afterCommit": {"oid": "c42ec6c3465e6e7774f5b172068650e8dd090e91", "author": {"user": {"login": "Jackie-Jiang", "name": "Xiaotian (Jackie) Jiang"}}, "url": "https://github.com/apache/pinot/commit/c42ec6c3465e6e7774f5b172068650e8dd090e91", "committedDate": "2020-12-01T21:00:49Z", "message": "Improve performance for distinct queries"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQzMDk2NTM4", "url": "https://github.com/apache/pinot/pull/6285#pullrequestreview-543096538", "createdAt": "2020-12-02T17:56:11Z", "commit": {"oid": "c42ec6c3465e6e7774f5b172068650e8dd090e91"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQzMTI3NTc5", "url": "https://github.com/apache/pinot/pull/6285#pullrequestreview-543127579", "createdAt": "2020-12-02T18:34:47Z", "commit": {"oid": "c42ec6c3465e6e7774f5b172068650e8dd090e91"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1824, "cost": 1, "resetAt": "2021-10-28T18:00:02Z"}}}