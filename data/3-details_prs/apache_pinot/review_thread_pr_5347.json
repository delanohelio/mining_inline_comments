{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE0NDA1NDc3", "number": 5347, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QxNzozNTowMVrOD6WaIQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QxNzozNTowMVrOD6WaIQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyNTExMTM3OnYy", "diffSide": "RIGHT", "path": "pinot-core/src/main/java/org/apache/pinot/core/segment/index/loader/columnminmaxvalue/ColumnMinMaxValueGenerator.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QxNzozNTowMVrOGSJDkw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QxODowMjoxNVrOGSKD1g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTY3NTkyMw==", "bodyText": "can u add a comment here that we intentionally fall through to next? thanks", "url": "https://github.com/apache/pinot/pull/5347#discussion_r421675923", "createdAt": "2020-05-07T17:35:01Z", "author": {"login": "mcvsubbu"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/segment/index/loader/columnminmaxvalue/ColumnMinMaxValueGenerator.java", "diffHunk": "@@ -56,32 +58,16 @@ public void addColumnMinMaxValue()\n     Preconditions.checkState(_columnMinMaxValueGeneratorMode != ColumnMinMaxValueGeneratorMode.NONE);\n \n     Schema schema = _segmentMetadata.getSchema();\n+    Set<String> columnsToAddMinMaxValue = new HashSet<>(schema.getPhysicalColumnNames());\n \n-    // Process time column\n-    String timeColumnName = schema.getTimeColumnName();\n-    if (timeColumnName != null) {\n-      addColumnMinMaxValueForColumn(timeColumnName);\n+    switch (_columnMinMaxValueGeneratorMode) {\n+      case TIME:\n+        columnsToAddMinMaxValue.removeAll(schema.getDimensionNames());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f9033486e27d334d6d70c9835d55cb46227a8742"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTY5MjM3NA==", "bodyText": "Done", "url": "https://github.com/apache/pinot/pull/5347#discussion_r421692374", "createdAt": "2020-05-07T18:02:15Z", "author": {"login": "npawar"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/segment/index/loader/columnminmaxvalue/ColumnMinMaxValueGenerator.java", "diffHunk": "@@ -56,32 +58,16 @@ public void addColumnMinMaxValue()\n     Preconditions.checkState(_columnMinMaxValueGeneratorMode != ColumnMinMaxValueGeneratorMode.NONE);\n \n     Schema schema = _segmentMetadata.getSchema();\n+    Set<String> columnsToAddMinMaxValue = new HashSet<>(schema.getPhysicalColumnNames());\n \n-    // Process time column\n-    String timeColumnName = schema.getTimeColumnName();\n-    if (timeColumnName != null) {\n-      addColumnMinMaxValueForColumn(timeColumnName);\n+    switch (_columnMinMaxValueGeneratorMode) {\n+      case TIME:\n+        columnsToAddMinMaxValue.removeAll(schema.getDimensionNames());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTY3NTkyMw=="}, "originalCommit": {"oid": "f9033486e27d334d6d70c9835d55cb46227a8742"}, "originalPosition": 21}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3247, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}