{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDIxNzIxODk0", "number": 5430, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxNzo1MTowMlrOEDj2gw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQyMDozNzowN1rOEDnkdQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyMTY4NTc5OnYy", "diffSide": "RIGHT", "path": "pinot-core/src/main/java/org/apache/pinot/core/data/manager/realtime/LLRealtimeSegmentDataManager.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxNzo1MTowMlrOGgpfXg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQwMjowODo1M1rOGg2UFg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjg4NzM5MA==", "bodyText": "is there a way to avoid creating this list. 99% will not have list.", "url": "https://github.com/apache/pinot/pull/5430#discussion_r436887390", "createdAt": "2020-06-08T17:51:02Z", "author": {"login": "kishoreg"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/data/manager/realtime/LLRealtimeSegmentDataManager.java", "diffHunk": "@@ -466,19 +469,28 @@ private void processStreamEvents(MessageBatch messagesAndOffsets, long idlePipeS\n               messagesAndOffsets.getMessageLengthAtIndex(index), reuse);\n       if (decodedRow != null) {\n         try {\n-          GenericRow transformedRow = _recordTransformer.transform(decodedRow);\n-\n-          if (transformedRow != null) {\n-            realtimeRowsConsumedMeter = _serverMetrics\n-                .addMeteredTableValue(_metricKeyName, ServerMeter.REALTIME_ROWS_CONSUMED, 1, realtimeRowsConsumedMeter);\n-            indexedMessageCount++;\n+          List<GenericRow> transformedRows;\n+          if (decodedRow.getValue(CommonConstants.Segment.MULTIPLE_RECORDS_KEY) != null) {\n+            transformedRows = new ArrayList<>();\n+            for (Object singleRow : (Collection) decodedRow.getValue(CommonConstants.Segment.MULTIPLE_RECORDS_KEY)) {\n+              transformedRows.add(_recordTransformer.transform((GenericRow) singleRow));\n+            }\n           } else {\n-            realtimeRowsDroppedMeter = _serverMetrics\n-                .addMeteredTableValue(_metricKeyName, ServerMeter.INVALID_REALTIME_ROWS_DROPPED, 1,\n-                    realtimeRowsDroppedMeter);\n+            transformedRows = Collections.singletonList(_recordTransformer.transform(decodedRow));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e61a40248200e89c5f39ba0f2cda04743287a0dc"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzA5NzQ5NA==", "bodyText": "avoided (at the cost of some code duplication in the if-else)", "url": "https://github.com/apache/pinot/pull/5430#discussion_r437097494", "createdAt": "2020-06-09T02:08:53Z", "author": {"login": "npawar"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/data/manager/realtime/LLRealtimeSegmentDataManager.java", "diffHunk": "@@ -466,19 +469,28 @@ private void processStreamEvents(MessageBatch messagesAndOffsets, long idlePipeS\n               messagesAndOffsets.getMessageLengthAtIndex(index), reuse);\n       if (decodedRow != null) {\n         try {\n-          GenericRow transformedRow = _recordTransformer.transform(decodedRow);\n-\n-          if (transformedRow != null) {\n-            realtimeRowsConsumedMeter = _serverMetrics\n-                .addMeteredTableValue(_metricKeyName, ServerMeter.REALTIME_ROWS_CONSUMED, 1, realtimeRowsConsumedMeter);\n-            indexedMessageCount++;\n+          List<GenericRow> transformedRows;\n+          if (decodedRow.getValue(CommonConstants.Segment.MULTIPLE_RECORDS_KEY) != null) {\n+            transformedRows = new ArrayList<>();\n+            for (Object singleRow : (Collection) decodedRow.getValue(CommonConstants.Segment.MULTIPLE_RECORDS_KEY)) {\n+              transformedRows.add(_recordTransformer.transform((GenericRow) singleRow));\n+            }\n           } else {\n-            realtimeRowsDroppedMeter = _serverMetrics\n-                .addMeteredTableValue(_metricKeyName, ServerMeter.INVALID_REALTIME_ROWS_DROPPED, 1,\n-                    realtimeRowsDroppedMeter);\n+            transformedRows = Collections.singletonList(_recordTransformer.transform(decodedRow));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjg4NzM5MA=="}, "originalCommit": {"oid": "e61a40248200e89c5f39ba0f2cda04743287a0dc"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyMTY5MDg4OnYy", "diffSide": "RIGHT", "path": "pinot-core/src/main/java/org/apache/pinot/core/data/manager/realtime/LLRealtimeSegmentDataManager.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxNzo1MjoyNlrOGgpipQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQwMjowMjoxOVrOGg2NJw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjg4ODIyOQ==", "bodyText": "maybe extract this method into collectRow similar to offline indexing and invoke it directly to avoid the penalty of creating a list", "url": "https://github.com/apache/pinot/pull/5430#discussion_r436888229", "createdAt": "2020-06-08T17:52:26Z", "author": {"login": "kishoreg"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/data/manager/realtime/LLRealtimeSegmentDataManager.java", "diffHunk": "@@ -466,19 +469,28 @@ private void processStreamEvents(MessageBatch messagesAndOffsets, long idlePipeS\n               messagesAndOffsets.getMessageLengthAtIndex(index), reuse);\n       if (decodedRow != null) {\n         try {\n-          GenericRow transformedRow = _recordTransformer.transform(decodedRow);\n-\n-          if (transformedRow != null) {\n-            realtimeRowsConsumedMeter = _serverMetrics\n-                .addMeteredTableValue(_metricKeyName, ServerMeter.REALTIME_ROWS_CONSUMED, 1, realtimeRowsConsumedMeter);\n-            indexedMessageCount++;\n+          List<GenericRow> transformedRows;\n+          if (decodedRow.getValue(CommonConstants.Segment.MULTIPLE_RECORDS_KEY) != null) {\n+            transformedRows = new ArrayList<>();\n+            for (Object singleRow : (Collection) decodedRow.getValue(CommonConstants.Segment.MULTIPLE_RECORDS_KEY)) {\n+              transformedRows.add(_recordTransformer.transform((GenericRow) singleRow));\n+            }\n           } else {\n-            realtimeRowsDroppedMeter = _serverMetrics\n-                .addMeteredTableValue(_metricKeyName, ServerMeter.INVALID_REALTIME_ROWS_DROPPED, 1,\n-                    realtimeRowsDroppedMeter);\n+            transformedRows = Collections.singletonList(_recordTransformer.transform(decodedRow));\n           }\n \n-          canTakeMore = _realtimeSegment.index(transformedRow, msgMetadata);\n+          for (GenericRow transformedRow : transformedRows) {\n+            if (transformedRow != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e61a40248200e89c5f39ba0f2cda04743287a0dc"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzA5NTcxOQ==", "bodyText": "that method would need to return indexedMessageCount, canTakeMore and 2 meters. Removed the list by immediately calling index and updating the counters, in both cases. Created some code duplication, but i dont see a better and simple way", "url": "https://github.com/apache/pinot/pull/5430#discussion_r437095719", "createdAt": "2020-06-09T02:02:19Z", "author": {"login": "npawar"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/data/manager/realtime/LLRealtimeSegmentDataManager.java", "diffHunk": "@@ -466,19 +469,28 @@ private void processStreamEvents(MessageBatch messagesAndOffsets, long idlePipeS\n               messagesAndOffsets.getMessageLengthAtIndex(index), reuse);\n       if (decodedRow != null) {\n         try {\n-          GenericRow transformedRow = _recordTransformer.transform(decodedRow);\n-\n-          if (transformedRow != null) {\n-            realtimeRowsConsumedMeter = _serverMetrics\n-                .addMeteredTableValue(_metricKeyName, ServerMeter.REALTIME_ROWS_CONSUMED, 1, realtimeRowsConsumedMeter);\n-            indexedMessageCount++;\n+          List<GenericRow> transformedRows;\n+          if (decodedRow.getValue(CommonConstants.Segment.MULTIPLE_RECORDS_KEY) != null) {\n+            transformedRows = new ArrayList<>();\n+            for (Object singleRow : (Collection) decodedRow.getValue(CommonConstants.Segment.MULTIPLE_RECORDS_KEY)) {\n+              transformedRows.add(_recordTransformer.transform((GenericRow) singleRow));\n+            }\n           } else {\n-            realtimeRowsDroppedMeter = _serverMetrics\n-                .addMeteredTableValue(_metricKeyName, ServerMeter.INVALID_REALTIME_ROWS_DROPPED, 1,\n-                    realtimeRowsDroppedMeter);\n+            transformedRows = Collections.singletonList(_recordTransformer.transform(decodedRow));\n           }\n \n-          canTakeMore = _realtimeSegment.index(transformedRow, msgMetadata);\n+          for (GenericRow transformedRow : transformedRows) {\n+            if (transformedRow != null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjg4ODIyOQ=="}, "originalCommit": {"oid": "e61a40248200e89c5f39ba0f2cda04743287a0dc"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyMjI5NDkzOnYy", "diffSide": "RIGHT", "path": "pinot-common/src/main/java/org/apache/pinot/common/utils/CommonConstants.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQyMDozNzowN1rOGgvf4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQyMDozNzowN1rOGgvf4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjk4NTgyNg==", "bodyText": "put this in GenericRow?\nmultiple.records.key -> $MULTIPLE_RECORDS_KEY$ avoid '.'", "url": "https://github.com/apache/pinot/pull/5430#discussion_r436985826", "createdAt": "2020-06-08T20:37:07Z", "author": {"login": "kishoreg"}, "path": "pinot-common/src/main/java/org/apache/pinot/common/utils/CommonConstants.java", "diffHunk": "@@ -363,5 +363,7 @@\n \n     @Deprecated\n     public static final String TABLE_NAME = \"segment.table.name\";\n+\n+    public static final String MULTIPLE_RECORDS_KEY = \"multiple.records.key\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e61a40248200e89c5f39ba0f2cda04743287a0dc"}, "originalPosition": 5}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4465, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}