{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDkxNzU0Nzk3", "number": 6053, "title": "Add support for Decimal with Precision Sum aggregation", "bodyText": "The PR addresses the issue #5904.\nIt adds the support for UDFs to convert hex presentation to big decimal and vice-versa and also allows user to perform addition with fixed precision.\nSELECT SUMPRECISION(colA, precision) FROM table\nSELECT SUMPRECISION(colA) FROM table", "createdAt": "2020-09-23T12:44:57Z", "url": "https://github.com/apache/pinot/pull/6053", "merged": true, "mergeCommit": {"oid": "deb389182209db4a18761be9e20d7dcbf037b16b"}, "closed": true, "closedAt": "2020-10-01T19:27:33Z", "author": {"login": "KKcorps"}, "timelineItems": {"totalCount": 32, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdLvA-GAFqTQ5NDgwNDM1Nw==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdOVm4ZgH2gAyNDkxNzU0Nzk3OmFjOTVlZmM4OTA5ODg1MWEwNzcyMzA0ZWJiNDI3MGNjY2JiMmViMzU=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk0ODA0MzU3", "url": "https://github.com/apache/pinot/pull/6053#pullrequestreview-494804357", "createdAt": "2020-09-23T15:48:25Z", "commit": {"oid": "e51ac6d33e0ada8a7e5fa69c95211780b259fe3a"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxNTo0ODoyNVrOHW1IZw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxNjoxNTowMFrOHW2RQg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzcwMTIyMw==", "bodyText": "call this sum_precision", "url": "https://github.com/apache/pinot/pull/6053#discussion_r493701223", "createdAt": "2020-09-23T15:48:25Z", "author": {"login": "kishoreg"}, "path": "pinot-common/src/main/java/org/apache/pinot/common/function/TransformFunctionType.java", "diffHunk": "@@ -79,7 +79,10 @@\n \n   // Geo relationship\n   ST_CONTAINS(\"ST_Contains\"),\n-  ST_EQUALS(\"ST_Equals\");\n+  ST_EQUALS(\"ST_Equals\"),\n+\n+  //Big decimal\n+  ADD_WITH_PRECISION(\"add_with_precision\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e51ac6d33e0ada8a7e5fa69c95211780b259fe3a"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzcxODM2MQ==", "bodyText": "add java docs with sample call", "url": "https://github.com/apache/pinot/pull/6053#discussion_r493718361", "createdAt": "2020-09-23T16:12:48Z", "author": {"login": "kishoreg"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/operator/transform/function/AdditionWithPrecisionTransformFunction.java", "diffHunk": "@@ -0,0 +1,103 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.core.operator.transform.function;\n+\n+import java.math.BigDecimal;\n+import java.math.MathContext;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Map;\n+import org.apache.pinot.common.function.scalar.DataTypeConversionFunctions;\n+import org.apache.pinot.core.common.DataSource;\n+import org.apache.pinot.core.operator.blocks.ProjectionBlock;\n+import org.apache.pinot.core.operator.transform.TransformResultMetadata;\n+import org.apache.pinot.core.plan.DocIdSetPlanNode;\n+\n+\n+public class AdditionWithPrecisionTransformFunction extends BaseTransformFunction {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e51ac6d33e0ada8a7e5fa69c95211780b259fe3a"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzcxOTg3NA==", "bodyText": "this is toBigDecimal transform function right and can be used for sum, min max etc", "url": "https://github.com/apache/pinot/pull/6053#discussion_r493719874", "createdAt": "2020-09-23T16:15:00Z", "author": {"login": "kishoreg"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/operator/transform/function/AdditionWithPrecisionTransformFunction.java", "diffHunk": "@@ -0,0 +1,103 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.core.operator.transform.function;\n+\n+import java.math.BigDecimal;\n+import java.math.MathContext;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Map;\n+import org.apache.pinot.common.function.scalar.DataTypeConversionFunctions;\n+import org.apache.pinot.core.common.DataSource;\n+import org.apache.pinot.core.operator.blocks.ProjectionBlock;\n+import org.apache.pinot.core.operator.transform.TransformResultMetadata;\n+import org.apache.pinot.core.plan.DocIdSetPlanNode;\n+\n+\n+public class AdditionWithPrecisionTransformFunction extends BaseTransformFunction {\n+\n+  public static final String FUNCTION_NAME = \"addWithPrecision\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e51ac6d33e0ada8a7e5fa69c95211780b259fe3a"}, "originalPosition": 36}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk0OTU2OTIz", "url": "https://github.com/apache/pinot/pull/6053#pullrequestreview-494956923", "createdAt": "2020-09-23T18:53:21Z", "commit": {"oid": "e51ac6d33e0ada8a7e5fa69c95211780b259fe3a"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxODo1MzoyMVrOHW8Z_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxODo1NzowMVrOHW8oYA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzgyMDQxNA==", "bodyText": "Parse the last argument as the precision instead of identifying LITERAL as precision? In certain cases user can add LITERAL to a column, e.g. addWithPrecision(col, BigDecimal(123), 0)", "url": "https://github.com/apache/pinot/pull/6053#discussion_r493820414", "createdAt": "2020-09-23T18:53:21Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/operator/transform/function/AdditionWithPrecisionTransformFunction.java", "diffHunk": "@@ -0,0 +1,103 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.core.operator.transform.function;\n+\n+import java.math.BigDecimal;\n+import java.math.MathContext;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Map;\n+import org.apache.pinot.common.function.scalar.DataTypeConversionFunctions;\n+import org.apache.pinot.core.common.DataSource;\n+import org.apache.pinot.core.operator.blocks.ProjectionBlock;\n+import org.apache.pinot.core.operator.transform.TransformResultMetadata;\n+import org.apache.pinot.core.plan.DocIdSetPlanNode;\n+\n+\n+public class AdditionWithPrecisionTransformFunction extends BaseTransformFunction {\n+\n+  public static final String FUNCTION_NAME = \"addWithPrecision\";\n+\n+  private List<TransformFunction> _transformFunctions = new ArrayList<>();\n+  private BigDecimal[] _sums;\n+  private Integer _precision = null;\n+\n+  @Override\n+  public String getName() {\n+    return FUNCTION_NAME;\n+  }\n+\n+  @Override\n+  public void init(List<TransformFunction> arguments, Map<String, DataSource> dataSourceMap) {\n+    // Check that there are more than 1 arguments\n+    if (arguments.size() < 3) {\n+      throw new IllegalArgumentException(\"At least 3 arguments are required for ADD transform function\");\n+    }\n+\n+    for (TransformFunction argument : arguments) {\n+      if (argument instanceof LiteralTransformFunction) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e51ac6d33e0ada8a7e5fa69c95211780b259fe3a"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzgyMjg3MQ==", "bodyText": "Function takes at least 3 arguments, and precision is mandatory?", "url": "https://github.com/apache/pinot/pull/6053#discussion_r493822871", "createdAt": "2020-09-23T18:55:48Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/operator/transform/function/AdditionWithPrecisionTransformFunction.java", "diffHunk": "@@ -0,0 +1,103 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.core.operator.transform.function;\n+\n+import java.math.BigDecimal;\n+import java.math.MathContext;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Map;\n+import org.apache.pinot.common.function.scalar.DataTypeConversionFunctions;\n+import org.apache.pinot.core.common.DataSource;\n+import org.apache.pinot.core.operator.blocks.ProjectionBlock;\n+import org.apache.pinot.core.operator.transform.TransformResultMetadata;\n+import org.apache.pinot.core.plan.DocIdSetPlanNode;\n+\n+\n+public class AdditionWithPrecisionTransformFunction extends BaseTransformFunction {\n+\n+  public static final String FUNCTION_NAME = \"addWithPrecision\";\n+\n+  private List<TransformFunction> _transformFunctions = new ArrayList<>();\n+  private BigDecimal[] _sums;\n+  private Integer _precision = null;\n+\n+  @Override\n+  public String getName() {\n+    return FUNCTION_NAME;\n+  }\n+\n+  @Override\n+  public void init(List<TransformFunction> arguments, Map<String, DataSource> dataSourceMap) {\n+    // Check that there are more than 1 arguments\n+    if (arguments.size() < 3) {\n+      throw new IllegalArgumentException(\"At least 3 arguments are required for ADD transform function\");\n+    }\n+\n+    for (TransformFunction argument : arguments) {\n+      if (argument instanceof LiteralTransformFunction) {\n+        if (_precision != null) {\n+          throw new IllegalArgumentException(\"Only one precision value can be specified in ADD transform function\");\n+        }\n+        _precision = Integer.parseInt(((LiteralTransformFunction) argument).getLiteral());\n+      } else {\n+        if (!argument.getResultMetadata().isSingleValue()) {\n+          throw new IllegalArgumentException(\"All the arguments of ADD transform function must be single-valued\");\n+        }\n+        _transformFunctions.add(argument);\n+      }\n+    }\n+  }\n+\n+  @Override\n+  public TransformResultMetadata getResultMetadata() {\n+    return BYTES_SV_NO_DICTIONARY_METADATA;\n+  }\n+\n+  @Override\n+  public byte[][] transformToBytesValuesSV(ProjectionBlock projectionBlock) {\n+    if (_sums == null) {\n+      _sums = new BigDecimal[DocIdSetPlanNode.MAX_DOC_PER_CALL];\n+    }\n+\n+    int length = projectionBlock.getNumDocs();\n+    Arrays.fill(_sums, 0, length, new BigDecimal(0));\n+    MathContext mathContext;\n+    if (_precision != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e51ac6d33e0ada8a7e5fa69c95211780b259fe3a"}, "originalPosition": 83}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzgyNDA5Ng==", "bodyText": "@kishoreg This is the transform, instead of the aggregation. We might want to use add_precision for transform and sum_precision for aggregation.", "url": "https://github.com/apache/pinot/pull/6053#discussion_r493824096", "createdAt": "2020-09-23T18:57:01Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-common/src/main/java/org/apache/pinot/common/function/TransformFunctionType.java", "diffHunk": "@@ -79,7 +79,10 @@\n \n   // Geo relationship\n   ST_CONTAINS(\"ST_Contains\"),\n-  ST_EQUALS(\"ST_Equals\");\n+  ST_EQUALS(\"ST_Equals\"),\n+\n+  //Big decimal\n+  ADD_WITH_PRECISION(\"add_with_precision\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzcwMTIyMw=="}, "originalCommit": {"oid": "e51ac6d33e0ada8a7e5fa69c95211780b259fe3a"}, "originalPosition": 8}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk2MTIzNjQ4", "url": "https://github.com/apache/pinot/pull/6053#pullrequestreview-496123648", "createdAt": "2020-09-25T05:41:55Z", "commit": {"oid": "042d31da4891d9642ca78d6cb1878f12283a3627"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQwNTo0MTo1NVrOHX1sHg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQwNTo0MTo1NVrOHX1sHg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDc1ODk0Mg==", "bodyText": "This should be in BIG ENDIAN byte order", "url": "https://github.com/apache/pinot/pull/6053#discussion_r494758942", "createdAt": "2020-09-25T05:41:55Z", "author": {"login": "siddharthteotia"}, "path": "pinot-common/src/main/java/org/apache/pinot/common/function/scalar/DataTypeConversionFunctions.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.common.function.scalar;\n+\n+import java.math.BigDecimal;\n+import java.math.BigInteger;\n+import org.apache.pinot.common.function.annotations.ScalarFunction;\n+\n+\n+public class DataTypeConversionFunctions {\n+  private DataTypeConversionFunctions() {\n+\n+  }\n+\n+  @ScalarFunction\n+  public static byte[] bigDecimalToBytes(BigDecimal number) {\n+    int scale = number.scale();\n+    BigInteger unscaled = number.unscaledValue();\n+    byte[] value = unscaled.toByteArray();\n+    byte[] bigDecimalBytesArray = new byte[value.length + 4];\n+    for (int i = 0; i < 4; i++) {\n+      bigDecimalBytesArray[i] = (byte) (scale >>> (8 * (3 - i)));\n+    }\n+    System.arraycopy(value, 0, bigDecimalBytesArray, 4, value.length);\n+    return bigDecimalBytesArray;\n+  }\n+\n+  @ScalarFunction\n+  public static String bytesToBigDecimal(byte[] bytes) {\n+    int scale = 0;\n+    for (int i = 0; i < 4; i++) {\n+      scale += (((int) bytes[i]) << (8 * (3 - i)));\n+    }\n+    byte[] vals = new byte[bytes.length - 4];", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "042d31da4891d9642ca78d6cb1878f12283a3627"}, "originalPosition": 50}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk2MTIzNzg1", "url": "https://github.com/apache/pinot/pull/6053#pullrequestreview-496123785", "createdAt": "2020-09-25T05:42:22Z", "commit": {"oid": "042d31da4891d9642ca78d6cb1878f12283a3627"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQwNTo0MjoyMlrOHX1siA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQwNTo0MjoyMlrOHX1siA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDc1OTA0OA==", "bodyText": "What is the format here? Are we saying that byte array is the 2's complement representation of the underlying unscaled value.\nHow is scale represented in the byte array?\nDo we have to take care of endianness here? The unscaled values is going to be BIG-ENDIAN. How's it working without swapping bytes?", "url": "https://github.com/apache/pinot/pull/6053#discussion_r494759048", "createdAt": "2020-09-25T05:42:22Z", "author": {"login": "siddharthteotia"}, "path": "pinot-common/src/main/java/org/apache/pinot/common/function/scalar/DataTypeConversionFunctions.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.common.function.scalar;\n+\n+import java.math.BigDecimal;\n+import java.math.BigInteger;\n+import org.apache.pinot.common.function.annotations.ScalarFunction;\n+\n+\n+public class DataTypeConversionFunctions {\n+  private DataTypeConversionFunctions() {\n+\n+  }\n+\n+  @ScalarFunction", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "042d31da4891d9642ca78d6cb1878f12283a3627"}, "originalPosition": 31}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk2MTIzODk0", "url": "https://github.com/apache/pinot/pull/6053#pullrequestreview-496123894", "createdAt": "2020-09-25T05:42:43Z", "commit": {"oid": "042d31da4891d9642ca78d6cb1878f12283a3627"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQwNTo0Mjo0M1rOHX1s-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQwNTo0Mjo0M1rOHX1s-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDc1OTE2MQ==", "bodyText": "Why not allow both precision and scale?", "url": "https://github.com/apache/pinot/pull/6053#discussion_r494759161", "createdAt": "2020-09-25T05:42:43Z", "author": {"login": "siddharthteotia"}, "path": "pinot-common/src/main/java/org/apache/pinot/common/function/AggregationFunctionType.java", "diffHunk": "@@ -30,6 +30,7 @@\n   MIN(\"min\"),\n   MAX(\"max\"),\n   SUM(\"sum\"),\n+  SUMPRECISION(\"sumPrecision\"),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "042d31da4891d9642ca78d6cb1878f12283a3627"}, "originalPosition": 4}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "042d31da4891d9642ca78d6cb1878f12283a3627", "author": {"user": null}, "url": "https://github.com/apache/pinot/commit/042d31da4891d9642ca78d6cb1878f12283a3627", "committedDate": "2020-09-24T16:46:56Z", "message": "Add license header"}, "afterCommit": {"oid": "a5d6762930714bf47a02cf49f3339e3efefae90f", "author": {"user": null}, "url": "https://github.com/apache/pinot/commit/a5d6762930714bf47a02cf49f3339e3efefae90f", "committedDate": "2020-09-28T12:53:37Z", "message": "Add test for big decimal"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk4NjQ4NTE2", "url": "https://github.com/apache/pinot/pull/6053#pullrequestreview-498648516", "createdAt": "2020-09-29T16:02:21Z", "commit": {"oid": "a57903c92b2a89d908ad6bd33b02f3773d4b8004"}, "state": "COMMENTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxNjowMjoyMVrOHZ1Xow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxNjoxMzowOVrOHZ2C1w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njg1MDg1MQ==", "bodyText": "rename to bytesToBigDecimalHex?", "url": "https://github.com/apache/pinot/pull/6053#discussion_r496850851", "createdAt": "2020-09-29T16:02:21Z", "author": {"login": "kishoreg"}, "path": "pinot-common/src/main/java/org/apache/pinot/common/function/scalar/DataTypeConversionFunctions.java", "diffHunk": "@@ -0,0 +1,81 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.common.function.scalar;\n+\n+import java.math.BigDecimal;\n+import java.math.BigInteger;\n+import org.apache.pinot.spi.annotations.ScalarFunction;\n+\n+\n+public class DataTypeConversionFunctions {\n+  private DataTypeConversionFunctions() {\n+\n+  }\n+\n+  @ScalarFunction\n+  public static byte[] bigDecimalToBytes(BigDecimal number) {\n+    int scale = number.scale();\n+    BigInteger unscaled = number.unscaledValue();\n+    byte[] value = unscaled.toByteArray();\n+    byte[] bigDecimalBytesArray = new byte[value.length + 4];\n+    for (int i = 0; i < 4; i++) {\n+      bigDecimalBytesArray[i] = (byte) (scale >>> (8 * (3 - i)));\n+    }\n+    System.arraycopy(value, 0, bigDecimalBytesArray, 4, value.length);\n+    return bigDecimalBytesArray;\n+  }\n+\n+  @ScalarFunction\n+  public static String bytesToBigDecimal(byte[] bytes) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a57903c92b2a89d908ad6bd33b02f3773d4b8004"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njg1MjMzNg==", "bodyText": "whats is happening inside number.toString? is it possible for us to generate the hex string without having to create big integer and big decimal?", "url": "https://github.com/apache/pinot/pull/6053#discussion_r496852336", "createdAt": "2020-09-29T16:03:50Z", "author": {"login": "kishoreg"}, "path": "pinot-common/src/main/java/org/apache/pinot/common/function/scalar/DataTypeConversionFunctions.java", "diffHunk": "@@ -0,0 +1,81 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.common.function.scalar;\n+\n+import java.math.BigDecimal;\n+import java.math.BigInteger;\n+import org.apache.pinot.spi.annotations.ScalarFunction;\n+\n+\n+public class DataTypeConversionFunctions {\n+  private DataTypeConversionFunctions() {\n+\n+  }\n+\n+  @ScalarFunction\n+  public static byte[] bigDecimalToBytes(BigDecimal number) {\n+    int scale = number.scale();\n+    BigInteger unscaled = number.unscaledValue();\n+    byte[] value = unscaled.toByteArray();\n+    byte[] bigDecimalBytesArray = new byte[value.length + 4];\n+    for (int i = 0; i < 4; i++) {\n+      bigDecimalBytesArray[i] = (byte) (scale >>> (8 * (3 - i)));\n+    }\n+    System.arraycopy(value, 0, bigDecimalBytesArray, 4, value.length);\n+    return bigDecimalBytesArray;\n+  }\n+\n+  @ScalarFunction\n+  public static String bytesToBigDecimal(byte[] bytes) {\n+    int scale = 0;\n+    for (int i = 0; i < 4; i++) {\n+      scale += (((int) bytes[i]) << (8 * (3 - i)));\n+    }\n+    byte[] vals = new byte[bytes.length - 4];\n+    System.arraycopy(bytes, 4, vals, 0, vals.length);\n+    BigInteger unscaled = new BigInteger(vals);\n+    BigDecimal number = new BigDecimal(unscaled, scale);\n+    return number.toString();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a57903c92b2a89d908ad6bd33b02f3773d4b8004"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njg1MzcwMg==", "bodyText": "while you are there can you also add base64encode decode?", "url": "https://github.com/apache/pinot/pull/6053#discussion_r496853702", "createdAt": "2020-09-29T16:05:11Z", "author": {"login": "kishoreg"}, "path": "pinot-common/src/main/java/org/apache/pinot/common/function/scalar/DataTypeConversionFunctions.java", "diffHunk": "@@ -0,0 +1,81 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.common.function.scalar;\n+\n+import java.math.BigDecimal;\n+import java.math.BigInteger;\n+import org.apache.pinot.spi.annotations.ScalarFunction;\n+\n+\n+public class DataTypeConversionFunctions {\n+  private DataTypeConversionFunctions() {\n+\n+  }\n+\n+  @ScalarFunction\n+  public static byte[] bigDecimalToBytes(BigDecimal number) {\n+    int scale = number.scale();\n+    BigInteger unscaled = number.unscaledValue();\n+    byte[] value = unscaled.toByteArray();\n+    byte[] bigDecimalBytesArray = new byte[value.length + 4];\n+    for (int i = 0; i < 4; i++) {\n+      bigDecimalBytesArray[i] = (byte) (scale >>> (8 * (3 - i)));\n+    }\n+    System.arraycopy(value, 0, bigDecimalBytesArray, 4, value.length);\n+    return bigDecimalBytesArray;\n+  }\n+\n+  @ScalarFunction\n+  public static String bytesToBigDecimal(byte[] bytes) {\n+    int scale = 0;\n+    for (int i = 0; i < 4; i++) {\n+      scale += (((int) bytes[i]) << (8 * (3 - i)));\n+    }\n+    byte[] vals = new byte[bytes.length - 4];\n+    System.arraycopy(bytes, 4, vals, 0, vals.length);\n+    BigInteger unscaled = new BigInteger(vals);\n+    BigDecimal number = new BigDecimal(unscaled, scale);\n+    return number.toString();\n+  }\n+\n+  @ScalarFunction\n+  public static byte[] bigDecimalFromString(String bigDecimal) {\n+    return bigDecimalToBytes(new BigDecimal(bigDecimal));\n+  }\n+\n+  @ScalarFunction\n+  public static byte[] hexToBytes(String hex) {\n+    int len = hex.length();\n+    byte[] data = new byte[len / 2];\n+    for (int i = 0; i < len; i += 2) {\n+      data[i / 2] = (byte) ((Character.digit(hex.charAt(i), 16) << 4) + Character.digit(hex.charAt(i + 1), 16));\n+    }\n+    return data;\n+  }\n+\n+  @ScalarFunction\n+  public static String bytesToHex(byte[] bytes) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a57903c92b2a89d908ad6bd33b02f3773d4b8004"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njg1NDcyMQ==", "bodyText": "check your IDE pref to honor @Formatter:off annotation", "url": "https://github.com/apache/pinot/pull/6053#discussion_r496854721", "createdAt": "2020-09-29T16:06:09Z", "author": {"login": "kishoreg"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/common/ObjectSerDeUtils.java", "diffHunk": "@@ -776,31 +781,30 @@ public IdSet deserialize(ByteBuffer byteBuffer) {\n     }\n   };\n \n+  public static final ObjectSerDe<BigDecimal> BIGDECIMAL_SER_DE = new ObjectSerDe<BigDecimal>() {\n+\n+    @Override\n+    public byte[] serialize(BigDecimal value) {\n+      return DataTypeConversionFunctions.bigDecimalToBytes(value);\n+    }\n+\n+    @Override\n+    public BigDecimal deserialize(byte[] bytes) {\n+      return new BigDecimal(DataTypeConversionFunctions.bytesToBigDecimal(bytes));\n+    }\n+\n+    @Override\n+    public BigDecimal deserialize(ByteBuffer byteBuffer) {\n+      byte[] bytes = new byte[byteBuffer.remaining()];\n+      byteBuffer.get(bytes);\n+      return deserialize(bytes);\n+    }\n+  };\n+\n   // NOTE: DO NOT change the order, it has to be the same order as the ObjectType\n   //@formatter:off\n-  private static final ObjectSerDe[] SER_DES = {\n-      STRING_SER_DE,\n-      LONG_SER_DE,\n-      DOUBLE_SER_DE,\n-      DOUBLE_ARRAY_LIST_SER_DE,\n-      AVG_PAIR_SER_DE,\n-      MIN_MAX_RANGE_PAIR_SER_DE,\n-      HYPER_LOG_LOG_SER_DE,\n-      QUANTILE_DIGEST_SER_DE,\n-      MAP_SER_DE,\n-      INT_SET_SER_DE,\n-      TDIGEST_SER_DE,\n-      DISTINCT_TABLE_SER_DE,\n-      DATA_SKETCH_SER_DE,\n-      GEOMETRY_SER_DE,\n-      ROARING_BITMAP_SER_DE,\n-      LONG_SET_SER_DE,\n-      FLOAT_SET_SER_DE,\n-      DOUBLE_SET_SER_DE,\n-      STRING_SET_SER_DE,\n-      BYTES_SET_SER_DE,\n-      ID_SET_SER_DE\n-  };\n+  private static final ObjectSerDe[] SER_DES =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a57903c92b2a89d908ad6bd33b02f3773d4b8004"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njg1NjI0NQ==", "bodyText": "its probably better to move this logic into SumPrecission(arguments) constructor. You can still keep the other two constructors", "url": "https://github.com/apache/pinot/pull/6053#discussion_r496856245", "createdAt": "2020-09-29T16:07:37Z", "author": {"login": "kishoreg"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/query/aggregation/function/AggregationFunctionFactory.java", "diffHunk": "@@ -117,6 +117,18 @@ public static AggregationFunction getAggregationFunction(FunctionContext functio\n             return new MaxAggregationFunction(firstArgument);\n           case SUM:\n             return new SumAggregationFunction(firstArgument);\n+          case SUMPRECISION:\n+            int numArguments = arguments.size();\n+            if (numArguments == 3) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a57903c92b2a89d908ad6bd33b02f3773d4b8004"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njg2MDkwMQ==", "bodyText": "if users dont use scale, will the results vary depending on the order of segment execution?", "url": "https://github.com/apache/pinot/pull/6053#discussion_r496860901", "createdAt": "2020-09-29T16:12:11Z", "author": {"login": "kishoreg"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/query/aggregation/function/SumWithPrecisionAggregationFunction.java", "diffHunk": "@@ -0,0 +1,174 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.core.query.aggregation.function;\n+\n+import java.math.BigDecimal;\n+import java.math.MathContext;\n+import java.util.Map;\n+import org.apache.pinot.common.function.AggregationFunctionType;\n+import org.apache.pinot.common.function.scalar.DataTypeConversionFunctions;\n+import org.apache.pinot.common.utils.DataSchema;\n+import org.apache.pinot.core.common.BlockValSet;\n+import org.apache.pinot.core.query.aggregation.AggregationResultHolder;\n+import org.apache.pinot.core.query.aggregation.ObjectAggregationResultHolder;\n+import org.apache.pinot.core.query.aggregation.groupby.GroupByResultHolder;\n+import org.apache.pinot.core.query.aggregation.groupby.ObjectGroupByResultHolder;\n+import org.apache.pinot.core.query.request.context.ExpressionContext;\n+\n+\n+public class SumWithPrecisionAggregationFunction extends BaseSingleInputAggregationFunction<BigDecimal, BigDecimal> {\n+  MathContext _mathContext = new MathContext(0);\n+  Integer _scale = null;\n+\n+  public SumWithPrecisionAggregationFunction(ExpressionContext expression, Integer precision) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a57903c92b2a89d908ad6bd33b02f3773d4b8004"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njg2MTkxMQ==", "bodyText": "this method is bit confusing, what is it trying to do. add some javadocs and maybe rename the function if possible", "url": "https://github.com/apache/pinot/pull/6053#discussion_r496861911", "createdAt": "2020-09-29T16:13:09Z", "author": {"login": "kishoreg"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/query/aggregation/function/SumWithPrecisionAggregationFunction.java", "diffHunk": "@@ -0,0 +1,174 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.core.query.aggregation.function;\n+\n+import java.math.BigDecimal;\n+import java.math.MathContext;\n+import java.util.Map;\n+import org.apache.pinot.common.function.AggregationFunctionType;\n+import org.apache.pinot.common.function.scalar.DataTypeConversionFunctions;\n+import org.apache.pinot.common.utils.DataSchema;\n+import org.apache.pinot.core.common.BlockValSet;\n+import org.apache.pinot.core.query.aggregation.AggregationResultHolder;\n+import org.apache.pinot.core.query.aggregation.ObjectAggregationResultHolder;\n+import org.apache.pinot.core.query.aggregation.groupby.GroupByResultHolder;\n+import org.apache.pinot.core.query.aggregation.groupby.ObjectGroupByResultHolder;\n+import org.apache.pinot.core.query.request.context.ExpressionContext;\n+\n+\n+public class SumWithPrecisionAggregationFunction extends BaseSingleInputAggregationFunction<BigDecimal, BigDecimal> {\n+  MathContext _mathContext = new MathContext(0);\n+  Integer _scale = null;\n+\n+  public SumWithPrecisionAggregationFunction(ExpressionContext expression, Integer precision) {\n+    super(expression);\n+    _mathContext = new MathContext(precision);\n+  }\n+\n+  public SumWithPrecisionAggregationFunction(ExpressionContext expression, Integer precision, Integer scale) {\n+    super(expression);\n+    _mathContext = new MathContext(precision);\n+    _scale = scale;\n+  }\n+\n+  public SumWithPrecisionAggregationFunction(ExpressionContext expression) {\n+    super(expression);\n+  }\n+\n+  @Override\n+  public AggregationFunctionType getType() {\n+    return AggregationFunctionType.SUMPRECISION;\n+  }\n+\n+  @Override\n+  public AggregationResultHolder createAggregationResultHolder() {\n+    return new ObjectAggregationResultHolder();\n+  }\n+\n+  @Override\n+  public GroupByResultHolder createGroupByResultHolder(int initialCapacity, int maxCapacity) {\n+    return new ObjectGroupByResultHolder(initialCapacity, maxCapacity);\n+  }\n+\n+  @Override\n+  public void aggregate(int length, AggregationResultHolder aggregationResultHolder,\n+      Map<ExpressionContext, BlockValSet> blockValSetMap) {\n+    byte[][] valueArray = blockValSetMap.get(_expression).getBytesValuesSV();\n+    BigDecimal sumValue = getDefaultResult(aggregationResultHolder);\n+    for (int i = 0; i < length; i++) {\n+      BigDecimal value = new BigDecimal(DataTypeConversionFunctions.bytesToBigDecimal(valueArray[i]));\n+      sumValue = sumValue.add(value, _mathContext);\n+    }\n+    aggregationResultHolder.setValue(setScale(sumValue));\n+  }\n+\n+  @Override\n+  public void aggregateGroupBySV(int length, int[] groupKeyArray, GroupByResultHolder groupByResultHolder,\n+      Map<ExpressionContext, BlockValSet> blockValSetMap) {\n+    byte[][] valueArray = blockValSetMap.get(_expression).getBytesValuesSV();\n+    for (int i = 0; i < length; i++) {\n+      int groupKey = groupKeyArray[i];\n+      BigDecimal groupByResultValue = getDefaultResult(groupByResultHolder, groupKey);\n+      BigDecimal value = new BigDecimal(DataTypeConversionFunctions.bytesToBigDecimal(valueArray[i]));\n+      groupByResultValue = groupByResultValue.add(value, _mathContext);\n+      groupByResultHolder.setValueForKey(groupKey, setScale(groupByResultValue));\n+    }\n+  }\n+\n+  @Override\n+  public void aggregateGroupByMV(int length, int[][] groupKeysArray, GroupByResultHolder groupByResultHolder,\n+      Map<ExpressionContext, BlockValSet> blockValSetMap) {\n+    byte[][] valueArray = blockValSetMap.get(_expression).getBytesValuesSV();\n+    for (int i = 0; i < length; i++) {\n+      byte[] value = valueArray[i];\n+      for (int groupKey : groupKeysArray[i]) {\n+        BigDecimal groupByResultValue = getDefaultResult(groupByResultHolder, groupKey);\n+        BigDecimal valueBigDecimal = new BigDecimal(DataTypeConversionFunctions.bytesToBigDecimal(value));\n+        groupByResultValue = groupByResultValue.add(valueBigDecimal, _mathContext);\n+        groupByResultHolder.setValueForKey(groupKey, setScale(groupByResultValue));\n+      }\n+    }\n+  }\n+\n+  @Override\n+  public BigDecimal extractAggregationResult(AggregationResultHolder aggregationResultHolder) {\n+    return getDefaultResult(aggregationResultHolder);\n+  }\n+\n+  @Override\n+  public BigDecimal extractGroupByResult(GroupByResultHolder groupByResultHolder, int groupKey) {\n+    return getDefaultResult(groupByResultHolder, groupKey);\n+  }\n+\n+  @Override\n+  public BigDecimal merge(BigDecimal intermediateResult1, BigDecimal intermediateResult2) {\n+    try {\n+      return setScale(intermediateResult1.add(intermediateResult2, _mathContext));\n+    } catch (Exception e) {\n+      throw new RuntimeException(\"Caught Exception while merging results in sum with precision function\", e);\n+    }\n+  }\n+\n+  @Override\n+  public boolean isIntermediateResultComparable() {\n+    return true;\n+  }\n+\n+  @Override\n+  public DataSchema.ColumnDataType getIntermediateResultColumnType() {\n+    return DataSchema.ColumnDataType.OBJECT;\n+  }\n+\n+  @Override\n+  public DataSchema.ColumnDataType getFinalResultColumnType() {\n+    return DataSchema.ColumnDataType.STRING;\n+  }\n+\n+  @Override\n+  public BigDecimal extractFinalResult(BigDecimal intermediateResult) {\n+    return intermediateResult;\n+  }\n+\n+  public BigDecimal getDefaultResult(AggregationResultHolder aggregationResultHolder) {\n+    BigDecimal result = aggregationResultHolder.getResult();\n+    if (result == null) {\n+      result = new BigDecimal(0, _mathContext);\n+      aggregationResultHolder.setValue(result);\n+    }\n+    result = setScale(result);\n+    return result;\n+  }\n+\n+  public BigDecimal getDefaultResult(GroupByResultHolder groupByResultHolder, int groupKey) {\n+    BigDecimal result = groupByResultHolder.getResult(groupKey);\n+    if (result == null) {\n+      result = new BigDecimal(0, _mathContext);\n+      groupByResultHolder.setValueForKey(groupKey, result);\n+    }\n+    result = setScale(result);\n+    return result;\n+  }\n+\n+  private BigDecimal setScale(BigDecimal value) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a57903c92b2a89d908ad6bd33b02f3773d4b8004"}, "originalPosition": 168}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk4ODg4MzM1", "url": "https://github.com/apache/pinot/pull/6053#pullrequestreview-498888335", "createdAt": "2020-09-29T20:59:33Z", "commit": {"oid": "d3add2ca32446c40a8cf2a81e88f05de324510a6"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQyMDo1OTozNFrOHaBvGw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQyMTowMTo0NlrOHaB27A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzA1MzQ2Nw==", "bodyText": "Got it. please add java docs", "url": "https://github.com/apache/pinot/pull/6053#discussion_r497053467", "createdAt": "2020-09-29T20:59:34Z", "author": {"login": "kishoreg"}, "path": "pinot-common/src/main/java/org/apache/pinot/common/function/scalar/DataTypeConversionFunctions.java", "diffHunk": "@@ -0,0 +1,81 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.common.function.scalar;\n+\n+import java.math.BigDecimal;\n+import java.math.BigInteger;\n+import org.apache.pinot.spi.annotations.ScalarFunction;\n+\n+\n+public class DataTypeConversionFunctions {\n+  private DataTypeConversionFunctions() {\n+\n+  }\n+\n+  @ScalarFunction\n+  public static byte[] bigDecimalToBytes(BigDecimal number) {\n+    int scale = number.scale();\n+    BigInteger unscaled = number.unscaledValue();\n+    byte[] value = unscaled.toByteArray();\n+    byte[] bigDecimalBytesArray = new byte[value.length + 4];\n+    for (int i = 0; i < 4; i++) {\n+      bigDecimalBytesArray[i] = (byte) (scale >>> (8 * (3 - i)));\n+    }\n+    System.arraycopy(value, 0, bigDecimalBytesArray, 4, value.length);\n+    return bigDecimalBytesArray;\n+  }\n+\n+  @ScalarFunction\n+  public static String bytesToBigDecimal(byte[] bytes) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njg1MDg1MQ=="}, "originalCommit": {"oid": "a57903c92b2a89d908ad6bd33b02f3773d4b8004"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzA1NTQ2OA==", "bodyText": "got it. I am assuming big decimal additions are idempotent -- bd1 + bd2 same as bd2 + bd1", "url": "https://github.com/apache/pinot/pull/6053#discussion_r497055468", "createdAt": "2020-09-29T21:01:46Z", "author": {"login": "kishoreg"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/query/aggregation/function/SumWithPrecisionAggregationFunction.java", "diffHunk": "@@ -0,0 +1,174 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.core.query.aggregation.function;\n+\n+import java.math.BigDecimal;\n+import java.math.MathContext;\n+import java.util.Map;\n+import org.apache.pinot.common.function.AggregationFunctionType;\n+import org.apache.pinot.common.function.scalar.DataTypeConversionFunctions;\n+import org.apache.pinot.common.utils.DataSchema;\n+import org.apache.pinot.core.common.BlockValSet;\n+import org.apache.pinot.core.query.aggregation.AggregationResultHolder;\n+import org.apache.pinot.core.query.aggregation.ObjectAggregationResultHolder;\n+import org.apache.pinot.core.query.aggregation.groupby.GroupByResultHolder;\n+import org.apache.pinot.core.query.aggregation.groupby.ObjectGroupByResultHolder;\n+import org.apache.pinot.core.query.request.context.ExpressionContext;\n+\n+\n+public class SumWithPrecisionAggregationFunction extends BaseSingleInputAggregationFunction<BigDecimal, BigDecimal> {\n+  MathContext _mathContext = new MathContext(0);\n+  Integer _scale = null;\n+\n+  public SumWithPrecisionAggregationFunction(ExpressionContext expression, Integer precision) {\n+    super(expression);\n+    _mathContext = new MathContext(precision);\n+  }\n+\n+  public SumWithPrecisionAggregationFunction(ExpressionContext expression, Integer precision, Integer scale) {\n+    super(expression);\n+    _mathContext = new MathContext(precision);\n+    _scale = scale;\n+  }\n+\n+  public SumWithPrecisionAggregationFunction(ExpressionContext expression) {\n+    super(expression);\n+  }\n+\n+  @Override\n+  public AggregationFunctionType getType() {\n+    return AggregationFunctionType.SUMPRECISION;\n+  }\n+\n+  @Override\n+  public AggregationResultHolder createAggregationResultHolder() {\n+    return new ObjectAggregationResultHolder();\n+  }\n+\n+  @Override\n+  public GroupByResultHolder createGroupByResultHolder(int initialCapacity, int maxCapacity) {\n+    return new ObjectGroupByResultHolder(initialCapacity, maxCapacity);\n+  }\n+\n+  @Override\n+  public void aggregate(int length, AggregationResultHolder aggregationResultHolder,\n+      Map<ExpressionContext, BlockValSet> blockValSetMap) {\n+    byte[][] valueArray = blockValSetMap.get(_expression).getBytesValuesSV();\n+    BigDecimal sumValue = getDefaultResult(aggregationResultHolder);\n+    for (int i = 0; i < length; i++) {\n+      BigDecimal value = new BigDecimal(DataTypeConversionFunctions.bytesToBigDecimal(valueArray[i]));\n+      sumValue = sumValue.add(value, _mathContext);\n+    }\n+    aggregationResultHolder.setValue(setScale(sumValue));\n+  }\n+\n+  @Override\n+  public void aggregateGroupBySV(int length, int[] groupKeyArray, GroupByResultHolder groupByResultHolder,\n+      Map<ExpressionContext, BlockValSet> blockValSetMap) {\n+    byte[][] valueArray = blockValSetMap.get(_expression).getBytesValuesSV();\n+    for (int i = 0; i < length; i++) {\n+      int groupKey = groupKeyArray[i];\n+      BigDecimal groupByResultValue = getDefaultResult(groupByResultHolder, groupKey);\n+      BigDecimal value = new BigDecimal(DataTypeConversionFunctions.bytesToBigDecimal(valueArray[i]));\n+      groupByResultValue = groupByResultValue.add(value, _mathContext);\n+      groupByResultHolder.setValueForKey(groupKey, setScale(groupByResultValue));\n+    }\n+  }\n+\n+  @Override\n+  public void aggregateGroupByMV(int length, int[][] groupKeysArray, GroupByResultHolder groupByResultHolder,\n+      Map<ExpressionContext, BlockValSet> blockValSetMap) {\n+    byte[][] valueArray = blockValSetMap.get(_expression).getBytesValuesSV();\n+    for (int i = 0; i < length; i++) {\n+      byte[] value = valueArray[i];\n+      for (int groupKey : groupKeysArray[i]) {\n+        BigDecimal groupByResultValue = getDefaultResult(groupByResultHolder, groupKey);\n+        BigDecimal valueBigDecimal = new BigDecimal(DataTypeConversionFunctions.bytesToBigDecimal(value));\n+        groupByResultValue = groupByResultValue.add(valueBigDecimal, _mathContext);\n+        groupByResultHolder.setValueForKey(groupKey, setScale(groupByResultValue));\n+      }\n+    }\n+  }\n+\n+  @Override\n+  public BigDecimal extractAggregationResult(AggregationResultHolder aggregationResultHolder) {\n+    return getDefaultResult(aggregationResultHolder);\n+  }\n+\n+  @Override\n+  public BigDecimal extractGroupByResult(GroupByResultHolder groupByResultHolder, int groupKey) {\n+    return getDefaultResult(groupByResultHolder, groupKey);\n+  }\n+\n+  @Override\n+  public BigDecimal merge(BigDecimal intermediateResult1, BigDecimal intermediateResult2) {\n+    try {\n+      return setScale(intermediateResult1.add(intermediateResult2, _mathContext));\n+    } catch (Exception e) {\n+      throw new RuntimeException(\"Caught Exception while merging results in sum with precision function\", e);\n+    }\n+  }\n+\n+  @Override\n+  public boolean isIntermediateResultComparable() {\n+    return true;\n+  }\n+\n+  @Override\n+  public DataSchema.ColumnDataType getIntermediateResultColumnType() {\n+    return DataSchema.ColumnDataType.OBJECT;\n+  }\n+\n+  @Override\n+  public DataSchema.ColumnDataType getFinalResultColumnType() {\n+    return DataSchema.ColumnDataType.STRING;\n+  }\n+\n+  @Override\n+  public BigDecimal extractFinalResult(BigDecimal intermediateResult) {\n+    return intermediateResult;\n+  }\n+\n+  public BigDecimal getDefaultResult(AggregationResultHolder aggregationResultHolder) {\n+    BigDecimal result = aggregationResultHolder.getResult();\n+    if (result == null) {\n+      result = new BigDecimal(0, _mathContext);\n+      aggregationResultHolder.setValue(result);\n+    }\n+    result = setScale(result);\n+    return result;\n+  }\n+\n+  public BigDecimal getDefaultResult(GroupByResultHolder groupByResultHolder, int groupKey) {\n+    BigDecimal result = groupByResultHolder.getResult(groupKey);\n+    if (result == null) {\n+      result = new BigDecimal(0, _mathContext);\n+      groupByResultHolder.setValueForKey(groupKey, result);\n+    }\n+    result = setScale(result);\n+    return result;\n+  }\n+\n+  private BigDecimal setScale(BigDecimal value) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njg2MTkxMQ=="}, "originalCommit": {"oid": "a57903c92b2a89d908ad6bd33b02f3773d4b8004"}, "originalPosition": 168}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk5MDM0NTIx", "url": "https://github.com/apache/pinot/pull/6053#pullrequestreview-499034521", "createdAt": "2020-09-30T01:51:43Z", "commit": {"oid": "d3add2ca32446c40a8cf2a81e88f05de324510a6"}, "state": "COMMENTED", "comments": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQwMTo1MTo0M1rOHaKoVQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQwMjozNToyNFrOHaLRVg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzE5OTE4OQ==", "bodyText": "For better performance, avoid the for loop\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                for (int i = 0; i < 4; i++) {\n          \n          \n            \n                  bigDecimalBytesArray[i] = (byte) (scale >>> (8 * (3 - i)));\n          \n          \n            \n                }\n          \n          \n            \n                bigDecimalBytesArray[0] = (byte) scale >>> 24;\n          \n          \n            \n                bigDecimalBytesArray[1] = (byte) scale >>> 16;\n          \n          \n            \n                bigDecimalBytesArray[2] = (byte) scale >>> 8;\n          \n          \n            \n                bigDecimalBytesArray[3] = (byte) scale;", "url": "https://github.com/apache/pinot/pull/6053#discussion_r497199189", "createdAt": "2020-09-30T01:51:43Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-common/src/main/java/org/apache/pinot/common/function/scalar/DataTypeConversionFunctions.java", "diffHunk": "@@ -0,0 +1,92 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.common.function.scalar;\n+\n+import java.math.BigDecimal;\n+import java.math.BigInteger;\n+import java.util.Base64;\n+import org.apache.pinot.spi.annotations.ScalarFunction;\n+\n+\n+public class DataTypeConversionFunctions {\n+  private DataTypeConversionFunctions() {\n+\n+  }\n+\n+  @ScalarFunction\n+  public static byte[] bigDecimalToBytes(BigDecimal number) {\n+    int scale = number.scale();\n+    BigInteger unscaled = number.unscaledValue();\n+    byte[] value = unscaled.toByteArray();\n+    byte[] bigDecimalBytesArray = new byte[value.length + 4];\n+    for (int i = 0; i < 4; i++) {\n+      bigDecimalBytesArray[i] = (byte) (scale >>> (8 * (3 - i)));\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d3add2ca32446c40a8cf2a81e88f05de324510a6"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzIwMTAxMA==", "bodyText": "Similarly here", "url": "https://github.com/apache/pinot/pull/6053#discussion_r497201010", "createdAt": "2020-09-30T01:59:09Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-common/src/main/java/org/apache/pinot/common/function/scalar/DataTypeConversionFunctions.java", "diffHunk": "@@ -0,0 +1,92 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.common.function.scalar;\n+\n+import java.math.BigDecimal;\n+import java.math.BigInteger;\n+import java.util.Base64;\n+import org.apache.pinot.spi.annotations.ScalarFunction;\n+\n+\n+public class DataTypeConversionFunctions {\n+  private DataTypeConversionFunctions() {\n+\n+  }\n+\n+  @ScalarFunction\n+  public static byte[] bigDecimalToBytes(BigDecimal number) {\n+    int scale = number.scale();\n+    BigInteger unscaled = number.unscaledValue();\n+    byte[] value = unscaled.toByteArray();\n+    byte[] bigDecimalBytesArray = new byte[value.length + 4];\n+    for (int i = 0; i < 4; i++) {\n+      bigDecimalBytesArray[i] = (byte) (scale >>> (8 * (3 - i)));\n+    }\n+    System.arraycopy(value, 0, bigDecimalBytesArray, 4, value.length);\n+    return bigDecimalBytesArray;\n+  }\n+\n+  @ScalarFunction\n+  public static String bytesToBigDecimal(byte[] bytes) {\n+    int scale = 0;\n+    for (int i = 0; i < 4; i++) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d3add2ca32446c40a8cf2a81e88f05de324510a6"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzIwMTU2NQ==", "bodyText": "Recommend passing in String instead of BigDecimal for symmetry with bytesToBigDecimal(). Also, scaler transform function won't work on BigDecimal objects.", "url": "https://github.com/apache/pinot/pull/6053#discussion_r497201565", "createdAt": "2020-09-30T02:01:35Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-common/src/main/java/org/apache/pinot/common/function/scalar/DataTypeConversionFunctions.java", "diffHunk": "@@ -0,0 +1,92 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.common.function.scalar;\n+\n+import java.math.BigDecimal;\n+import java.math.BigInteger;\n+import java.util.Base64;\n+import org.apache.pinot.spi.annotations.ScalarFunction;\n+\n+\n+public class DataTypeConversionFunctions {\n+  private DataTypeConversionFunctions() {\n+\n+  }\n+\n+  @ScalarFunction\n+  public static byte[] bigDecimalToBytes(BigDecimal number) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d3add2ca32446c40a8cf2a81e88f05de324510a6"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzIwMjEzMw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              public static String base64Encode(String input) {\n          \n          \n            \n                return Base64.getEncoder().encodeToString(input.getBytes());\n          \n          \n            \n              }\n          \n          \n            \n              public static byte[] base64Encode(byte[] bytes) {\n          \n          \n            \n                return Base64.getEncoder().encodeToString(bytes);\n          \n          \n            \n              }", "url": "https://github.com/apache/pinot/pull/6053#discussion_r497202133", "createdAt": "2020-09-30T02:04:04Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-common/src/main/java/org/apache/pinot/common/function/scalar/DataTypeConversionFunctions.java", "diffHunk": "@@ -0,0 +1,92 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.common.function.scalar;\n+\n+import java.math.BigDecimal;\n+import java.math.BigInteger;\n+import java.util.Base64;\n+import org.apache.pinot.spi.annotations.ScalarFunction;\n+\n+\n+public class DataTypeConversionFunctions {\n+  private DataTypeConversionFunctions() {\n+\n+  }\n+\n+  @ScalarFunction\n+  public static byte[] bigDecimalToBytes(BigDecimal number) {\n+    int scale = number.scale();\n+    BigInteger unscaled = number.unscaledValue();\n+    byte[] value = unscaled.toByteArray();\n+    byte[] bigDecimalBytesArray = new byte[value.length + 4];\n+    for (int i = 0; i < 4; i++) {\n+      bigDecimalBytesArray[i] = (byte) (scale >>> (8 * (3 - i)));\n+    }\n+    System.arraycopy(value, 0, bigDecimalBytesArray, 4, value.length);\n+    return bigDecimalBytesArray;\n+  }\n+\n+  @ScalarFunction\n+  public static String bytesToBigDecimal(byte[] bytes) {\n+    int scale = 0;\n+    for (int i = 0; i < 4; i++) {\n+      scale += (((int) bytes[i]) << (8 * (3 - i)));\n+    }\n+    byte[] vals = new byte[bytes.length - 4];\n+    System.arraycopy(bytes, 4, vals, 0, vals.length);\n+    BigInteger unscaled = new BigInteger(vals);\n+    BigDecimal number = new BigDecimal(unscaled, scale);\n+    return number.toString();\n+  }\n+\n+  @ScalarFunction\n+  public static byte[] bigDecimalFromString(String bigDecimal) {\n+    return bigDecimalToBytes(new BigDecimal(bigDecimal));\n+  }\n+\n+  @ScalarFunction\n+  public static byte[] hexToBytes(String hex) {\n+    int len = hex.length();\n+    byte[] data = new byte[len / 2];\n+    for (int i = 0; i < len; i += 2) {\n+      data[i / 2] = (byte) ((Character.digit(hex.charAt(i), 16) << 4) + Character.digit(hex.charAt(i + 1), 16));\n+    }\n+    return data;\n+  }\n+\n+  @ScalarFunction\n+  public static String bytesToHex(byte[] bytes) {\n+    StringBuilder sb = new StringBuilder();\n+    for (byte b : bytes) {\n+      sb.append(String.format(\"%02X \", b));\n+    }\n+\n+    return sb.toString();\n+  }\n+\n+  @ScalarFunction\n+  public static String base64Encode(String input) {\n+    return Base64.getEncoder().encodeToString(input.getBytes());\n+  }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d3add2ca32446c40a8cf2a81e88f05de324510a6"}, "originalPosition": 86}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzIwMjM4OQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              public static String base64Decode(String input) {\n          \n          \n            \n                return new String(Base64.getDecoder().decode(input.getBytes()));\n          \n          \n            \n              }\n          \n          \n            \n              public static byte[] base64Decode(String input) {\n          \n          \n            \n                return Base64.getDecoder().decode(input);\n          \n          \n            \n              }", "url": "https://github.com/apache/pinot/pull/6053#discussion_r497202389", "createdAt": "2020-09-30T02:05:16Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-common/src/main/java/org/apache/pinot/common/function/scalar/DataTypeConversionFunctions.java", "diffHunk": "@@ -0,0 +1,92 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.common.function.scalar;\n+\n+import java.math.BigDecimal;\n+import java.math.BigInteger;\n+import java.util.Base64;\n+import org.apache.pinot.spi.annotations.ScalarFunction;\n+\n+\n+public class DataTypeConversionFunctions {\n+  private DataTypeConversionFunctions() {\n+\n+  }\n+\n+  @ScalarFunction\n+  public static byte[] bigDecimalToBytes(BigDecimal number) {\n+    int scale = number.scale();\n+    BigInteger unscaled = number.unscaledValue();\n+    byte[] value = unscaled.toByteArray();\n+    byte[] bigDecimalBytesArray = new byte[value.length + 4];\n+    for (int i = 0; i < 4; i++) {\n+      bigDecimalBytesArray[i] = (byte) (scale >>> (8 * (3 - i)));\n+    }\n+    System.arraycopy(value, 0, bigDecimalBytesArray, 4, value.length);\n+    return bigDecimalBytesArray;\n+  }\n+\n+  @ScalarFunction\n+  public static String bytesToBigDecimal(byte[] bytes) {\n+    int scale = 0;\n+    for (int i = 0; i < 4; i++) {\n+      scale += (((int) bytes[i]) << (8 * (3 - i)));\n+    }\n+    byte[] vals = new byte[bytes.length - 4];\n+    System.arraycopy(bytes, 4, vals, 0, vals.length);\n+    BigInteger unscaled = new BigInteger(vals);\n+    BigDecimal number = new BigDecimal(unscaled, scale);\n+    return number.toString();\n+  }\n+\n+  @ScalarFunction\n+  public static byte[] bigDecimalFromString(String bigDecimal) {\n+    return bigDecimalToBytes(new BigDecimal(bigDecimal));\n+  }\n+\n+  @ScalarFunction\n+  public static byte[] hexToBytes(String hex) {\n+    int len = hex.length();\n+    byte[] data = new byte[len / 2];\n+    for (int i = 0; i < len; i += 2) {\n+      data[i / 2] = (byte) ((Character.digit(hex.charAt(i), 16) << 4) + Character.digit(hex.charAt(i + 1), 16));\n+    }\n+    return data;\n+  }\n+\n+  @ScalarFunction\n+  public static String bytesToHex(byte[] bytes) {\n+    StringBuilder sb = new StringBuilder();\n+    for (byte b : bytes) {\n+      sb.append(String.format(\"%02X \", b));\n+    }\n+\n+    return sb.toString();\n+  }\n+\n+  @ScalarFunction\n+  public static String base64Encode(String input) {\n+    return Base64.getEncoder().encodeToString(input.getBytes());\n+  }\n+\n+  @ScalarFunction\n+  public static String base64Decode(String input) {\n+    return new String(Base64.getDecoder().decode(input.getBytes()));\n+  }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d3add2ca32446c40a8cf2a81e88f05de324510a6"}, "originalPosition": 91}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzIwMjcyNA==", "bodyText": "You may use BytesUtils.toBytes(hex)", "url": "https://github.com/apache/pinot/pull/6053#discussion_r497202724", "createdAt": "2020-09-30T02:06:49Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-common/src/main/java/org/apache/pinot/common/function/scalar/DataTypeConversionFunctions.java", "diffHunk": "@@ -0,0 +1,92 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.common.function.scalar;\n+\n+import java.math.BigDecimal;\n+import java.math.BigInteger;\n+import java.util.Base64;\n+import org.apache.pinot.spi.annotations.ScalarFunction;\n+\n+\n+public class DataTypeConversionFunctions {\n+  private DataTypeConversionFunctions() {\n+\n+  }\n+\n+  @ScalarFunction\n+  public static byte[] bigDecimalToBytes(BigDecimal number) {\n+    int scale = number.scale();\n+    BigInteger unscaled = number.unscaledValue();\n+    byte[] value = unscaled.toByteArray();\n+    byte[] bigDecimalBytesArray = new byte[value.length + 4];\n+    for (int i = 0; i < 4; i++) {\n+      bigDecimalBytesArray[i] = (byte) (scale >>> (8 * (3 - i)));\n+    }\n+    System.arraycopy(value, 0, bigDecimalBytesArray, 4, value.length);\n+    return bigDecimalBytesArray;\n+  }\n+\n+  @ScalarFunction\n+  public static String bytesToBigDecimal(byte[] bytes) {\n+    int scale = 0;\n+    for (int i = 0; i < 4; i++) {\n+      scale += (((int) bytes[i]) << (8 * (3 - i)));\n+    }\n+    byte[] vals = new byte[bytes.length - 4];\n+    System.arraycopy(bytes, 4, vals, 0, vals.length);\n+    BigInteger unscaled = new BigInteger(vals);\n+    BigDecimal number = new BigDecimal(unscaled, scale);\n+    return number.toString();\n+  }\n+\n+  @ScalarFunction\n+  public static byte[] bigDecimalFromString(String bigDecimal) {\n+    return bigDecimalToBytes(new BigDecimal(bigDecimal));\n+  }\n+\n+  @ScalarFunction\n+  public static byte[] hexToBytes(String hex) {\n+    int len = hex.length();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d3add2ca32446c40a8cf2a81e88f05de324510a6"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzIwMjg3Mw==", "bodyText": "BytesUtils.toHexString(bytes)", "url": "https://github.com/apache/pinot/pull/6053#discussion_r497202873", "createdAt": "2020-09-30T02:07:24Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-common/src/main/java/org/apache/pinot/common/function/scalar/DataTypeConversionFunctions.java", "diffHunk": "@@ -0,0 +1,92 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.common.function.scalar;\n+\n+import java.math.BigDecimal;\n+import java.math.BigInteger;\n+import java.util.Base64;\n+import org.apache.pinot.spi.annotations.ScalarFunction;\n+\n+\n+public class DataTypeConversionFunctions {\n+  private DataTypeConversionFunctions() {\n+\n+  }\n+\n+  @ScalarFunction\n+  public static byte[] bigDecimalToBytes(BigDecimal number) {\n+    int scale = number.scale();\n+    BigInteger unscaled = number.unscaledValue();\n+    byte[] value = unscaled.toByteArray();\n+    byte[] bigDecimalBytesArray = new byte[value.length + 4];\n+    for (int i = 0; i < 4; i++) {\n+      bigDecimalBytesArray[i] = (byte) (scale >>> (8 * (3 - i)));\n+    }\n+    System.arraycopy(value, 0, bigDecimalBytesArray, 4, value.length);\n+    return bigDecimalBytesArray;\n+  }\n+\n+  @ScalarFunction\n+  public static String bytesToBigDecimal(byte[] bytes) {\n+    int scale = 0;\n+    for (int i = 0; i < 4; i++) {\n+      scale += (((int) bytes[i]) << (8 * (3 - i)));\n+    }\n+    byte[] vals = new byte[bytes.length - 4];\n+    System.arraycopy(bytes, 4, vals, 0, vals.length);\n+    BigInteger unscaled = new BigInteger(vals);\n+    BigDecimal number = new BigDecimal(unscaled, scale);\n+    return number.toString();\n+  }\n+\n+  @ScalarFunction\n+  public static byte[] bigDecimalFromString(String bigDecimal) {\n+    return bigDecimalToBytes(new BigDecimal(bigDecimal));\n+  }\n+\n+  @ScalarFunction\n+  public static byte[] hexToBytes(String hex) {\n+    int len = hex.length();\n+    byte[] data = new byte[len / 2];\n+    for (int i = 0; i < len; i += 2) {\n+      data[i / 2] = (byte) ((Character.digit(hex.charAt(i), 16) << 4) + Character.digit(hex.charAt(i + 1), 16));\n+    }\n+    return data;\n+  }\n+\n+  @ScalarFunction\n+  public static String bytesToHex(byte[] bytes) {\n+    StringBuilder sb = new StringBuilder();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d3add2ca32446c40a8cf2a81e88f05de324510a6"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzIwMzQ5MA==", "bodyText": "Make these 2 variables private final because the aggregation function can be shared among multiple segments, and needs to be stateless.", "url": "https://github.com/apache/pinot/pull/6053#discussion_r497203490", "createdAt": "2020-09-30T02:09:55Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/query/aggregation/function/SumWithPrecisionAggregationFunction.java", "diffHunk": "@@ -0,0 +1,174 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.core.query.aggregation.function;\n+\n+import java.math.BigDecimal;\n+import java.math.MathContext;\n+import java.util.List;\n+import java.util.Map;\n+import org.apache.pinot.common.function.AggregationFunctionType;\n+import org.apache.pinot.common.function.scalar.DataTypeConversionFunctions;\n+import org.apache.pinot.common.utils.DataSchema;\n+import org.apache.pinot.core.common.BlockValSet;\n+import org.apache.pinot.core.query.aggregation.AggregationResultHolder;\n+import org.apache.pinot.core.query.aggregation.ObjectAggregationResultHolder;\n+import org.apache.pinot.core.query.aggregation.groupby.GroupByResultHolder;\n+import org.apache.pinot.core.query.aggregation.groupby.ObjectGroupByResultHolder;\n+import org.apache.pinot.core.query.request.context.ExpressionContext;\n+\n+\n+public class SumWithPrecisionAggregationFunction extends BaseSingleInputAggregationFunction<BigDecimal, BigDecimal> {\n+  MathContext _mathContext = new MathContext(0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d3add2ca32446c40a8cf2a81e88f05de324510a6"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzIwNDA4Ng==", "bodyText": "Suggest adding a util class for BigDecimal (the scalar function can also call the util class). Here we should avoid converting BigDecimal to String and back again", "url": "https://github.com/apache/pinot/pull/6053#discussion_r497204086", "createdAt": "2020-09-30T02:12:13Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/query/aggregation/function/SumWithPrecisionAggregationFunction.java", "diffHunk": "@@ -0,0 +1,174 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.core.query.aggregation.function;\n+\n+import java.math.BigDecimal;\n+import java.math.MathContext;\n+import java.util.List;\n+import java.util.Map;\n+import org.apache.pinot.common.function.AggregationFunctionType;\n+import org.apache.pinot.common.function.scalar.DataTypeConversionFunctions;\n+import org.apache.pinot.common.utils.DataSchema;\n+import org.apache.pinot.core.common.BlockValSet;\n+import org.apache.pinot.core.query.aggregation.AggregationResultHolder;\n+import org.apache.pinot.core.query.aggregation.ObjectAggregationResultHolder;\n+import org.apache.pinot.core.query.aggregation.groupby.GroupByResultHolder;\n+import org.apache.pinot.core.query.aggregation.groupby.ObjectGroupByResultHolder;\n+import org.apache.pinot.core.query.request.context.ExpressionContext;\n+\n+\n+public class SumWithPrecisionAggregationFunction extends BaseSingleInputAggregationFunction<BigDecimal, BigDecimal> {\n+  MathContext _mathContext = new MathContext(0);\n+  Integer _scale = null;\n+\n+  public SumWithPrecisionAggregationFunction(ExpressionContext expression, List<ExpressionContext> arguments) {\n+    super(expression);\n+    int numArguments = arguments.size();\n+\n+    if (numArguments == 3) {\n+      Integer precision = Integer.parseInt(arguments.get(1).getLiteral());\n+      _scale = Integer.parseInt(arguments.get(2).getLiteral());\n+      _mathContext = new MathContext(precision);\n+    } else if (numArguments == 2) {\n+      Integer precision = Integer.parseInt(arguments.get(1).getLiteral());\n+      _mathContext = new MathContext(precision);\n+    }\n+  }\n+\n+  @Override\n+  public AggregationFunctionType getType() {\n+    return AggregationFunctionType.SUMPRECISION;\n+  }\n+\n+  @Override\n+  public AggregationResultHolder createAggregationResultHolder() {\n+    return new ObjectAggregationResultHolder();\n+  }\n+\n+  @Override\n+  public GroupByResultHolder createGroupByResultHolder(int initialCapacity, int maxCapacity) {\n+    return new ObjectGroupByResultHolder(initialCapacity, maxCapacity);\n+  }\n+\n+  @Override\n+  public void aggregate(int length, AggregationResultHolder aggregationResultHolder,\n+      Map<ExpressionContext, BlockValSet> blockValSetMap) {\n+    byte[][] valueArray = blockValSetMap.get(_expression).getBytesValuesSV();\n+    BigDecimal sumValue = getDefaultResult(aggregationResultHolder);\n+    for (int i = 0; i < length; i++) {\n+      BigDecimal value = new BigDecimal(DataTypeConversionFunctions.bytesToBigDecimal(valueArray[i]));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d3add2ca32446c40a8cf2a81e88f05de324510a6"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzIwNTE0MQ==", "bodyText": "Please add some javadoc on the arguments expected for the function.\nAlso recommend renaming it to SumPrecisionAggregationFunction to match the function name", "url": "https://github.com/apache/pinot/pull/6053#discussion_r497205141", "createdAt": "2020-09-30T02:16:39Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/query/aggregation/function/SumWithPrecisionAggregationFunction.java", "diffHunk": "@@ -0,0 +1,174 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.core.query.aggregation.function;\n+\n+import java.math.BigDecimal;\n+import java.math.MathContext;\n+import java.util.List;\n+import java.util.Map;\n+import org.apache.pinot.common.function.AggregationFunctionType;\n+import org.apache.pinot.common.function.scalar.DataTypeConversionFunctions;\n+import org.apache.pinot.common.utils.DataSchema;\n+import org.apache.pinot.core.common.BlockValSet;\n+import org.apache.pinot.core.query.aggregation.AggregationResultHolder;\n+import org.apache.pinot.core.query.aggregation.ObjectAggregationResultHolder;\n+import org.apache.pinot.core.query.aggregation.groupby.GroupByResultHolder;\n+import org.apache.pinot.core.query.aggregation.groupby.ObjectGroupByResultHolder;\n+import org.apache.pinot.core.query.request.context.ExpressionContext;\n+\n+\n+public class SumWithPrecisionAggregationFunction extends BaseSingleInputAggregationFunction<BigDecimal, BigDecimal> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d3add2ca32446c40a8cf2a81e88f05de324510a6"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzIwNTMyMg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              public SumWithPrecisionAggregationFunction(ExpressionContext expression, List<ExpressionContext> arguments) {\n          \n          \n            \n                super(expression);\n          \n          \n            \n              public SumWithPrecisionAggregationFunction(List<ExpressionContext> arguments) {\n          \n          \n            \n                super(arguments.get(0));", "url": "https://github.com/apache/pinot/pull/6053#discussion_r497205322", "createdAt": "2020-09-30T02:17:20Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/query/aggregation/function/SumWithPrecisionAggregationFunction.java", "diffHunk": "@@ -0,0 +1,174 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.core.query.aggregation.function;\n+\n+import java.math.BigDecimal;\n+import java.math.MathContext;\n+import java.util.List;\n+import java.util.Map;\n+import org.apache.pinot.common.function.AggregationFunctionType;\n+import org.apache.pinot.common.function.scalar.DataTypeConversionFunctions;\n+import org.apache.pinot.common.utils.DataSchema;\n+import org.apache.pinot.core.common.BlockValSet;\n+import org.apache.pinot.core.query.aggregation.AggregationResultHolder;\n+import org.apache.pinot.core.query.aggregation.ObjectAggregationResultHolder;\n+import org.apache.pinot.core.query.aggregation.groupby.GroupByResultHolder;\n+import org.apache.pinot.core.query.aggregation.groupby.ObjectGroupByResultHolder;\n+import org.apache.pinot.core.query.request.context.ExpressionContext;\n+\n+\n+public class SumWithPrecisionAggregationFunction extends BaseSingleInputAggregationFunction<BigDecimal, BigDecimal> {\n+  MathContext _mathContext = new MathContext(0);\n+  Integer _scale = null;\n+\n+  public SumWithPrecisionAggregationFunction(ExpressionContext expression, List<ExpressionContext> arguments) {\n+    super(expression);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d3add2ca32446c40a8cf2a81e88f05de324510a6"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzIwOTA0MQ==", "bodyText": "To get the consistent result, we should either set the scale at the end (in extractFinalResult) or for each value. I think setting it in extractFinalResult should give better performance.", "url": "https://github.com/apache/pinot/pull/6053#discussion_r497209041", "createdAt": "2020-09-30T02:32:42Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/query/aggregation/function/SumWithPrecisionAggregationFunction.java", "diffHunk": "@@ -0,0 +1,174 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.core.query.aggregation.function;\n+\n+import java.math.BigDecimal;\n+import java.math.MathContext;\n+import java.util.List;\n+import java.util.Map;\n+import org.apache.pinot.common.function.AggregationFunctionType;\n+import org.apache.pinot.common.function.scalar.DataTypeConversionFunctions;\n+import org.apache.pinot.common.utils.DataSchema;\n+import org.apache.pinot.core.common.BlockValSet;\n+import org.apache.pinot.core.query.aggregation.AggregationResultHolder;\n+import org.apache.pinot.core.query.aggregation.ObjectAggregationResultHolder;\n+import org.apache.pinot.core.query.aggregation.groupby.GroupByResultHolder;\n+import org.apache.pinot.core.query.aggregation.groupby.ObjectGroupByResultHolder;\n+import org.apache.pinot.core.query.request.context.ExpressionContext;\n+\n+\n+public class SumWithPrecisionAggregationFunction extends BaseSingleInputAggregationFunction<BigDecimal, BigDecimal> {\n+  MathContext _mathContext = new MathContext(0);\n+  Integer _scale = null;\n+\n+  public SumWithPrecisionAggregationFunction(ExpressionContext expression, List<ExpressionContext> arguments) {\n+    super(expression);\n+    int numArguments = arguments.size();\n+\n+    if (numArguments == 3) {\n+      Integer precision = Integer.parseInt(arguments.get(1).getLiteral());\n+      _scale = Integer.parseInt(arguments.get(2).getLiteral());\n+      _mathContext = new MathContext(precision);\n+    } else if (numArguments == 2) {\n+      Integer precision = Integer.parseInt(arguments.get(1).getLiteral());\n+      _mathContext = new MathContext(precision);\n+    }\n+  }\n+\n+  @Override\n+  public AggregationFunctionType getType() {\n+    return AggregationFunctionType.SUMPRECISION;\n+  }\n+\n+  @Override\n+  public AggregationResultHolder createAggregationResultHolder() {\n+    return new ObjectAggregationResultHolder();\n+  }\n+\n+  @Override\n+  public GroupByResultHolder createGroupByResultHolder(int initialCapacity, int maxCapacity) {\n+    return new ObjectGroupByResultHolder(initialCapacity, maxCapacity);\n+  }\n+\n+  @Override\n+  public void aggregate(int length, AggregationResultHolder aggregationResultHolder,\n+      Map<ExpressionContext, BlockValSet> blockValSetMap) {\n+    byte[][] valueArray = blockValSetMap.get(_expression).getBytesValuesSV();\n+    BigDecimal sumValue = getDefaultResult(aggregationResultHolder);\n+    for (int i = 0; i < length; i++) {\n+      BigDecimal value = new BigDecimal(DataTypeConversionFunctions.bytesToBigDecimal(valueArray[i]));\n+      sumValue = sumValue.add(value, _mathContext);\n+    }\n+    aggregationResultHolder.setValue(setScale(sumValue));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d3add2ca32446c40a8cf2a81e88f05de324510a6"}, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzIwOTE1OQ==", "bodyText": "We might also want to support string type as the BigDecimal values?", "url": "https://github.com/apache/pinot/pull/6053#discussion_r497209159", "createdAt": "2020-09-30T02:33:11Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/query/aggregation/function/SumWithPrecisionAggregationFunction.java", "diffHunk": "@@ -0,0 +1,174 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.core.query.aggregation.function;\n+\n+import java.math.BigDecimal;\n+import java.math.MathContext;\n+import java.util.List;\n+import java.util.Map;\n+import org.apache.pinot.common.function.AggregationFunctionType;\n+import org.apache.pinot.common.function.scalar.DataTypeConversionFunctions;\n+import org.apache.pinot.common.utils.DataSchema;\n+import org.apache.pinot.core.common.BlockValSet;\n+import org.apache.pinot.core.query.aggregation.AggregationResultHolder;\n+import org.apache.pinot.core.query.aggregation.ObjectAggregationResultHolder;\n+import org.apache.pinot.core.query.aggregation.groupby.GroupByResultHolder;\n+import org.apache.pinot.core.query.aggregation.groupby.ObjectGroupByResultHolder;\n+import org.apache.pinot.core.query.request.context.ExpressionContext;\n+\n+\n+public class SumWithPrecisionAggregationFunction extends BaseSingleInputAggregationFunction<BigDecimal, BigDecimal> {\n+  MathContext _mathContext = new MathContext(0);\n+  Integer _scale = null;\n+\n+  public SumWithPrecisionAggregationFunction(ExpressionContext expression, List<ExpressionContext> arguments) {\n+    super(expression);\n+    int numArguments = arguments.size();\n+\n+    if (numArguments == 3) {\n+      Integer precision = Integer.parseInt(arguments.get(1).getLiteral());\n+      _scale = Integer.parseInt(arguments.get(2).getLiteral());\n+      _mathContext = new MathContext(precision);\n+    } else if (numArguments == 2) {\n+      Integer precision = Integer.parseInt(arguments.get(1).getLiteral());\n+      _mathContext = new MathContext(precision);\n+    }\n+  }\n+\n+  @Override\n+  public AggregationFunctionType getType() {\n+    return AggregationFunctionType.SUMPRECISION;\n+  }\n+\n+  @Override\n+  public AggregationResultHolder createAggregationResultHolder() {\n+    return new ObjectAggregationResultHolder();\n+  }\n+\n+  @Override\n+  public GroupByResultHolder createGroupByResultHolder(int initialCapacity, int maxCapacity) {\n+    return new ObjectGroupByResultHolder(initialCapacity, maxCapacity);\n+  }\n+\n+  @Override\n+  public void aggregate(int length, AggregationResultHolder aggregationResultHolder,\n+      Map<ExpressionContext, BlockValSet> blockValSetMap) {\n+    byte[][] valueArray = blockValSetMap.get(_expression).getBytesValuesSV();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d3add2ca32446c40a8cf2a81e88f05de324510a6"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzIwOTY4Ng==", "bodyText": "Actually, after another thought, I don't think we need to use 4 bytes for the scale. Scale larger than 256 doesn't make lots of sense.", "url": "https://github.com/apache/pinot/pull/6053#discussion_r497209686", "createdAt": "2020-09-30T02:35:24Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-common/src/main/java/org/apache/pinot/common/function/scalar/DataTypeConversionFunctions.java", "diffHunk": "@@ -0,0 +1,92 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.common.function.scalar;\n+\n+import java.math.BigDecimal;\n+import java.math.BigInteger;\n+import java.util.Base64;\n+import org.apache.pinot.spi.annotations.ScalarFunction;\n+\n+\n+public class DataTypeConversionFunctions {\n+  private DataTypeConversionFunctions() {\n+\n+  }\n+\n+  @ScalarFunction\n+  public static byte[] bigDecimalToBytes(BigDecimal number) {\n+    int scale = number.scale();\n+    BigInteger unscaled = number.unscaledValue();\n+    byte[] value = unscaled.toByteArray();\n+    byte[] bigDecimalBytesArray = new byte[value.length + 4];\n+    for (int i = 0; i < 4; i++) {\n+      bigDecimalBytesArray[i] = (byte) (scale >>> (8 * (3 - i)));\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzE5OTE4OQ=="}, "originalCommit": {"oid": "d3add2ca32446c40a8cf2a81e88f05de324510a6"}, "originalPosition": 40}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5ce9d70fe3161fb7cd0b48ec593077d9813c88a2", "author": {"user": null}, "url": "https://github.com/apache/pinot/commit/5ce9d70fe3161fb7cd0b48ec593077d9813c88a2", "committedDate": "2020-09-30T14:41:59Z", "message": "Add support for big decimal"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "21e554affb0e3e49778498557015cfd82e3fd180", "author": {"user": null}, "url": "https://github.com/apache/pinot/commit/21e554affb0e3e49778498557015cfd82e3fd180", "committedDate": "2020-09-30T14:41:59Z", "message": "Add transform function to factory"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e657b4b01ac8b36f5ae43ceae189eddac966065a", "author": {"user": null}, "url": "https://github.com/apache/pinot/commit/e657b4b01ac8b36f5ae43ceae189eddac966065a", "committedDate": "2020-09-30T14:41:59Z", "message": "Add support for decimal with precision addition"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ff675d5c3a1ac3aa905653a2b3fbc199d7c47d66", "author": {"user": null}, "url": "https://github.com/apache/pinot/commit/ff675d5c3a1ac3aa905653a2b3fbc199d7c47d66", "committedDate": "2020-09-30T14:41:59Z", "message": "Add license header"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "39a7e8cbf52f9a41ac57f58b9d04564c7ba4881f", "author": {"user": null}, "url": "https://github.com/apache/pinot/commit/39a7e8cbf52f9a41ac57f58b9d04564c7ba4881f", "committedDate": "2020-09-30T14:49:40Z", "message": "Add Sum Precision aggregation function"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b37d215554fa9f5b25ad9154a3442f89567f04c2", "author": {"user": null}, "url": "https://github.com/apache/pinot/commit/b37d215554fa9f5b25ad9154a3442f89567f04c2", "committedDate": "2020-09-30T14:49:41Z", "message": "Remove add with precision transform function"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2c6ada3e46678a63e8ae13dc6d99375ce5c084a9", "author": {"user": null}, "url": "https://github.com/apache/pinot/commit/2c6ada3e46678a63e8ae13dc6d99375ce5c084a9", "committedDate": "2020-09-30T14:49:41Z", "message": "Add license header"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d1f6d4a55157fec896eb5cf24ef749b7abdf967c", "author": {"user": null}, "url": "https://github.com/apache/pinot/commit/d1f6d4a55157fec896eb5cf24ef749b7abdf967c", "committedDate": "2020-09-30T14:49:41Z", "message": "Refactor: Correct import of Scalar function"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "600f66e9e67de527ba9cf613b5de5aaa3d3d0ad9", "author": {"user": null}, "url": "https://github.com/apache/pinot/commit/600f66e9e67de527ba9cf613b5de5aaa3d3d0ad9", "committedDate": "2020-09-30T14:49:41Z", "message": "Add function to convert normal string to bigdecimal bytes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "77f4c9c8af7f196b096fe1307544f76971924a5a", "author": {"user": null}, "url": "https://github.com/apache/pinot/commit/77f4c9c8af7f196b096fe1307544f76971924a5a", "committedDate": "2020-09-30T14:49:41Z", "message": "Add test for big decimal"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ea2f2b8733a4d293dc17cb153cbaf05ec1e616a7", "author": {"user": null}, "url": "https://github.com/apache/pinot/commit/ea2f2b8733a4d293dc17cb153cbaf05ec1e616a7", "committedDate": "2020-09-30T14:49:41Z", "message": "Add test for big decimal precision"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "eab40e28de67f9062ec0667330ab218c66dc8512", "author": {"user": null}, "url": "https://github.com/apache/pinot/commit/eab40e28de67f9062ec0667330ab218c66dc8512", "committedDate": "2020-09-30T14:49:41Z", "message": "Add support for scale along with precision"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "90d32dc02aba9c24fe74ef1b5fefde0c78397326", "author": {"user": null}, "url": "https://github.com/apache/pinot/commit/90d32dc02aba9c24fe74ef1b5fefde0c78397326", "committedDate": "2020-09-30T14:49:41Z", "message": "Add license header"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "988117ebecbf0db5caba1476369c419513957221", "author": {"user": null}, "url": "https://github.com/apache/pinot/commit/988117ebecbf0db5caba1476369c419513957221", "committedDate": "2020-09-30T14:49:41Z", "message": "Add base64 encode functions"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "38e146e1375ee1efed8ab98a234867efd6f75203", "author": {"user": null}, "url": "https://github.com/apache/pinot/commit/38e146e1375ee1efed8ab98a234867efd6f75203", "committedDate": "2020-09-30T14:49:41Z", "message": "typo fix"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "74f1e556774c99a4260da2d310c9f6e48ebfffd6", "author": {"user": null}, "url": "https://github.com/apache/pinot/commit/74f1e556774c99a4260da2d310c9f6e48ebfffd6", "committedDate": "2020-09-30T14:49:41Z", "message": "Move arguments logic inside constructor"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ae39b94c0dd3bf0b2e4fce8e005fee9d72c86a69", "author": {"user": null}, "url": "https://github.com/apache/pinot/commit/ae39b94c0dd3bf0b2e4fce8e005fee9d72c86a69", "committedDate": "2020-09-30T14:51:17Z", "message": "set scale and precision only in final result"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d3552991857936582db1644c4b570f8fcd582edd", "author": {"user": null}, "url": "https://github.com/apache/pinot/commit/d3552991857936582db1644c4b570f8fcd582edd", "committedDate": "2020-09-30T14:51:17Z", "message": "Reduce scale bytes from 4 to 2"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ec686cfc09f4ec8aa760a121ca545f7b63e3637f", "author": {"user": null}, "url": "https://github.com/apache/pinot/commit/ec686cfc09f4ec8aa760a121ca545f7b63e3637f", "committedDate": "2020-09-30T14:51:17Z", "message": "Add java docs for sum with precision function"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a43d2d73fa0894e948a4da992f198feb972002f8", "author": {"user": null}, "url": "https://github.com/apache/pinot/commit/a43d2d73fa0894e948a4da992f198feb972002f8", "committedDate": "2020-09-30T14:51:17Z", "message": "Rename sumWithPrecision to sumPrecision"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "1e532d9e9b8295bf4f8649216865263d20d26872", "author": {"user": null}, "url": "https://github.com/apache/pinot/commit/1e532d9e9b8295bf4f8649216865263d20d26872", "committedDate": "2020-09-30T14:34:56Z", "message": "Rename sumWithPrecision to sumPrecision"}, "afterCommit": {"oid": "a43d2d73fa0894e948a4da992f198feb972002f8", "author": {"user": null}, "url": "https://github.com/apache/pinot/commit/a43d2d73fa0894e948a4da992f198feb972002f8", "committedDate": "2020-09-30T14:51:17Z", "message": "Rename sumWithPrecision to sumPrecision"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk5NzAwMDY2", "url": "https://github.com/apache/pinot/pull/6053#pullrequestreview-499700066", "createdAt": "2020-09-30T18:24:08Z", "commit": {"oid": "a43d2d73fa0894e948a4da992f198feb972002f8"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ac95efc89098851a0772304ebb4270cccbb2eb35", "author": {"user": null}, "url": "https://github.com/apache/pinot/commit/ac95efc89098851a0772304ebb4270cccbb2eb35", "committedDate": "2020-10-01T18:22:39Z", "message": "Adding methods to directly take big decimal input"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 102, "cost": 1, "resetAt": "2021-10-28T18:00:02Z"}}}