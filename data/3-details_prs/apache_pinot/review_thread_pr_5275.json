{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA1NTMzMDcy", "number": 5275, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOVQwNDo0MDozNVrODzUYUQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOVQyMDowMjo0MFrODzdRJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1MTM3ODczOnYy", "diffSide": "RIGHT", "path": "pinot-common/src/main/java/org/apache/pinot/parsers/utils/BrokerRequestComparisonUtils.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOVQwNDo0MDozNVrOGHyEnw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOVQyMDoyNTozM1rOGH8esQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDgxMzU5OQ==", "bodyText": "typo tGroupBy", "url": "https://github.com/apache/pinot/pull/5275#discussion_r410813599", "createdAt": "2020-04-19T04:40:35Z", "author": {"login": "kishoreg"}, "path": "pinot-common/src/main/java/org/apache/pinot/parsers/utils/BrokerRequestComparisonUtils.java", "diffHunk": "@@ -89,8 +89,7 @@ public static boolean validate(BrokerRequest br1, BrokerRequest br2, boolean ign\n           return false;\n         }\n       } else if (br2.getGroupBy() != null) {\n-        LOGGER.error(\"tGroupBy did not match, br1.getGroupBy() = null, br2.getGroupBy() = {}\",\n-            br2.getGroupBy());\n+        LOGGER.error(\"tGroupBy did not match, br1.getGroupBy() = null, br2.getGroupBy() = {}\", br2.getGroupBy());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ad3a38a998f1ce9ddd46853fa38849b973032a9c"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDk4NDExMw==", "bodyText": "Was in the original code that's why I missed it. Will fix.", "url": "https://github.com/apache/pinot/pull/5275#discussion_r410984113", "createdAt": "2020-04-19T20:25:33Z", "author": {"login": "mayankshriv"}, "path": "pinot-common/src/main/java/org/apache/pinot/parsers/utils/BrokerRequestComparisonUtils.java", "diffHunk": "@@ -89,8 +89,7 @@ public static boolean validate(BrokerRequest br1, BrokerRequest br2, boolean ign\n           return false;\n         }\n       } else if (br2.getGroupBy() != null) {\n-        LOGGER.error(\"tGroupBy did not match, br1.getGroupBy() = null, br2.getGroupBy() = {}\",\n-            br2.getGroupBy());\n+        LOGGER.error(\"tGroupBy did not match, br1.getGroupBy() = null, br2.getGroupBy() = {}\", br2.getGroupBy());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDgxMzU5OQ=="}, "originalCommit": {"oid": "ad3a38a998f1ce9ddd46853fa38849b973032a9c"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1MjgyODYzOnYy", "diffSide": "RIGHT", "path": "pinot-common/src/main/java/org/apache/pinot/pql/parsers/PinotQuery2BrokerRequestConverter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOVQxOTo1ODozNFrOGH8MIQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOVQyMDo1NTo0M1rOGH8znA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDk3OTM2MQ==", "bodyText": "maintain the order?", "url": "https://github.com/apache/pinot/pull/5275#discussion_r410979361", "createdAt": "2020-04-19T19:58:34Z", "author": {"login": "kishoreg"}, "path": "pinot-common/src/main/java/org/apache/pinot/pql/parsers/PinotQuery2BrokerRequestConverter.java", "diffHunk": "@@ -233,32 +232,32 @@ private AggregationInfo buildAggregationInfo(Function function) {\n       throw new Pql2CompilationException(\"Aggregation function expects non null argument\");\n     }\n \n-    String argumentString;\n+    List<String> args = new ArrayList<>(operands.size());\n     String functionName = function.getOperator();\n \n     if (functionName.equalsIgnoreCase(AggregationFunctionType.COUNT.getName())) {\n-      argumentString = \"*\";\n+      args = Collections.singletonList(\"*\");\n     } else {\n-      Set<String> expressions = new HashSet<>();\n-      StringBuilder sb = new StringBuilder();\n-      int numOperands = operands.size();\n-      for (int i = 0; i < numOperands; i++) {\n-        Expression expression = operands.get(i);\n-        String columnExpression = getColumnExpression(expression);\n-        if (expressions.add(columnExpression)) {\n-          // deduplicate the columns\n-          if (i != 0) {\n-            sb.append(CompilerConstants.AGGREGATION_FUNCTION_ARG_SEPARATOR);\n+      // Need to de-dup columns for distinct.\n+      if (functionName.equalsIgnoreCase(AggregationFunctionType.DISTINCT.getName())) {\n+        Set<String> expressionSet = new HashSet<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ad3a38a998f1ce9ddd46853fa38849b973032a9c"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDk4OTQ2OA==", "bodyText": "\ud83d\udc4d", "url": "https://github.com/apache/pinot/pull/5275#discussion_r410989468", "createdAt": "2020-04-19T20:55:43Z", "author": {"login": "mayankshriv"}, "path": "pinot-common/src/main/java/org/apache/pinot/pql/parsers/PinotQuery2BrokerRequestConverter.java", "diffHunk": "@@ -233,32 +232,32 @@ private AggregationInfo buildAggregationInfo(Function function) {\n       throw new Pql2CompilationException(\"Aggregation function expects non null argument\");\n     }\n \n-    String argumentString;\n+    List<String> args = new ArrayList<>(operands.size());\n     String functionName = function.getOperator();\n \n     if (functionName.equalsIgnoreCase(AggregationFunctionType.COUNT.getName())) {\n-      argumentString = \"*\";\n+      args = Collections.singletonList(\"*\");\n     } else {\n-      Set<String> expressions = new HashSet<>();\n-      StringBuilder sb = new StringBuilder();\n-      int numOperands = operands.size();\n-      for (int i = 0; i < numOperands; i++) {\n-        Expression expression = operands.get(i);\n-        String columnExpression = getColumnExpression(expression);\n-        if (expressions.add(columnExpression)) {\n-          // deduplicate the columns\n-          if (i != 0) {\n-            sb.append(CompilerConstants.AGGREGATION_FUNCTION_ARG_SEPARATOR);\n+      // Need to de-dup columns for distinct.\n+      if (functionName.equalsIgnoreCase(AggregationFunctionType.DISTINCT.getName())) {\n+        Set<String> expressionSet = new HashSet<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDk3OTM2MQ=="}, "originalCommit": {"oid": "ad3a38a998f1ce9ddd46853fa38849b973032a9c"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1MjgzMjg2OnYy", "diffSide": "RIGHT", "path": "pinot-common/src/thrift/request.thrift", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOVQyMDowMDo1MFrOGH8N8A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOVQyMDo1NTo1N1rOGH8zxg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDk3OTgyNA==", "bodyText": "too long args/argList/params/paramList/operands", "url": "https://github.com/apache/pinot/pull/5275#discussion_r410979824", "createdAt": "2020-04-19T20:00:50Z", "author": {"login": "kishoreg"}, "path": "pinot-common/src/thrift/request.thrift", "diffHunk": "@@ -102,6 +102,11 @@ struct AggregationInfo {\n   2: optional map<string,string> aggregationParams;\n   3: optional bool isInSelectList;\n \n+  // Backward compatible change to allow aggregation functions to take multiple arguments.\n+  // We could not reuse aggregationParams, as it requires argument name (as key), which may not be\n+  // available for aggregation functions with variable arguments.\n+  4: optional list<string> aggregationFunctionArgs;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ad3a38a998f1ce9ddd46853fa38849b973032a9c"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDk4OTUxMA==", "bodyText": "Replaced with expressions based on offline discussion.", "url": "https://github.com/apache/pinot/pull/5275#discussion_r410989510", "createdAt": "2020-04-19T20:55:57Z", "author": {"login": "mayankshriv"}, "path": "pinot-common/src/thrift/request.thrift", "diffHunk": "@@ -102,6 +102,11 @@ struct AggregationInfo {\n   2: optional map<string,string> aggregationParams;\n   3: optional bool isInSelectList;\n \n+  // Backward compatible change to allow aggregation functions to take multiple arguments.\n+  // We could not reuse aggregationParams, as it requires argument name (as key), which may not be\n+  // available for aggregation functions with variable arguments.\n+  4: optional list<string> aggregationFunctionArgs;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDk3OTgyNA=="}, "originalCommit": {"oid": "ad3a38a998f1ce9ddd46853fa38849b973032a9c"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1MjgzNDkyOnYy", "diffSide": "RIGHT", "path": "pinot-core/src/main/java/org/apache/pinot/core/query/aggregation/AggregationFunctionContext.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOVQyMDowMjo0MFrOGH8O8A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOVQyMTowNzowM1rOGH867w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDk4MDA4MA==", "bodyText": "+1", "url": "https://github.com/apache/pinot/pull/5275#discussion_r410980080", "createdAt": "2020-04-19T20:02:40Z", "author": {"login": "kishoreg"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/query/aggregation/AggregationFunctionContext.java", "diffHunk": "@@ -18,19 +18,28 @@\n  */\n package org.apache.pinot.core.query.aggregation;\n \n+import com.google.common.base.Preconditions;\n+import java.util.List;\n import org.apache.pinot.core.query.aggregation.function.AggregationFunction;\n+import org.apache.pinot.core.query.aggregation.function.AggregationFunctionUtils;\n \n \n /**\n  * This class caches miscellaneous data to perform efficient aggregation.\n+ *\n+ * TODO: Remove this class, as it no longer provides any value after aggregation functions now store", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ad3a38a998f1ce9ddd46853fa38849b973032a9c"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDk4MDIwNA==", "bodyText": "why not remove it in this PR itself?", "url": "https://github.com/apache/pinot/pull/5275#discussion_r410980204", "createdAt": "2020-04-19T20:03:10Z", "author": {"login": "kishoreg"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/query/aggregation/AggregationFunctionContext.java", "diffHunk": "@@ -18,19 +18,28 @@\n  */\n package org.apache.pinot.core.query.aggregation;\n \n+import com.google.common.base.Preconditions;\n+import java.util.List;\n import org.apache.pinot.core.query.aggregation.function.AggregationFunction;\n+import org.apache.pinot.core.query.aggregation.function.AggregationFunctionUtils;\n \n \n /**\n  * This class caches miscellaneous data to perform efficient aggregation.\n+ *\n+ * TODO: Remove this class, as it no longer provides any value after aggregation functions now store", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDk4MDA4MA=="}, "originalCommit": {"oid": "ad3a38a998f1ce9ddd46853fa38849b973032a9c"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDk5MTM0Mw==", "bodyText": "Seemed like a bit non-trivial, will address in the next PR.", "url": "https://github.com/apache/pinot/pull/5275#discussion_r410991343", "createdAt": "2020-04-19T21:07:03Z", "author": {"login": "mayankshriv"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/query/aggregation/AggregationFunctionContext.java", "diffHunk": "@@ -18,19 +18,28 @@\n  */\n package org.apache.pinot.core.query.aggregation;\n \n+import com.google.common.base.Preconditions;\n+import java.util.List;\n import org.apache.pinot.core.query.aggregation.function.AggregationFunction;\n+import org.apache.pinot.core.query.aggregation.function.AggregationFunctionUtils;\n \n \n /**\n  * This class caches miscellaneous data to perform efficient aggregation.\n+ *\n+ * TODO: Remove this class, as it no longer provides any value after aggregation functions now store", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDk4MDA4MA=="}, "originalCommit": {"oid": "ad3a38a998f1ce9ddd46853fa38849b973032a9c"}, "originalPosition": 13}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3426, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}