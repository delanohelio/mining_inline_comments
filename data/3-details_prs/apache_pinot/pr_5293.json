{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA4MDYzNjkx", "number": 5293, "title": "Adding support for Protobuf input format ", "bodyText": "Adding Protobuf Record Extractor and Record Reader\nUsing File Descriptor to infer ProtoBuf Schema instead of Generated Class\nUnit test included\n\nSample config for Ingestion\nexecutionFrameworkSpec:\n  name: 'standalone'\n  segmentGenerationJobRunnerClassName: 'org.apache.pinot.plugin.ingestion.batch.standalone.SegmentGenerationJobRunner'\n  segmentTarPushJobRunnerClassName: 'org.apache.pinot.plugin.ingestion.batch.standalone.SegmentTarPushJobRunner'\n  segmentUriPushJobRunnerClassName: 'org.apache.pinot.plugin.ingestion.batch.standalone.SegmentUriPushJobRunner'\njobType: SegmentCreationAndTarPush\ninputDirURI: 'file:///path/to/input'\nincludeFileNamePattern: 'glob:**/*.parquet'\nexcludeFileNamePattern: 'glob:**/*.avro'\noutputDirURI: 'file:///path/to/output'\noverwriteOutput: true\npinotFSSpecs:\n  - scheme: file\n    className: org.apache.pinot.spi.filesystem.LocalPinotFS\nrecordReaderSpec:\n  dataFormat: 'proto'\n  className: 'org.apache.pinot.plugin.inputformat.protobuf.ProtoBufRecordReader'\n  configClassName: 'org.apache.pinot.plugin.inputformat.protobuf.ProtoBufRecordReaderConfig'\n  configs:\n    descriptorFile: 'file:///path/to/sample.desc\ntableSpec:\n  tableName: 'myTable'\n  schemaURI: 'http://localhost:9000/tables/myTable/schema'\n  tableConfigURI: 'http://localhost:9000/tables/myTable'\npinotClusterSpecs:\n  - controllerURI: 'localhost:9000'\npushJobSpec:\n  pushAttempts: 2", "createdAt": "2020-04-23T17:23:33Z", "url": "https://github.com/apache/pinot/pull/5293", "merged": true, "mergeCommit": {"oid": "b69453e272b09314071183fc40a6516d64b0a412"}, "closed": true, "closedAt": "2020-05-27T18:20:15Z", "author": {"login": "KKcorps"}, "timelineItems": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcbgH0CAFqTQwMDU0MTgyNw==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcldDwnAFqTQxOTQ3Mjc3OQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAwNTQxODI3", "url": "https://github.com/apache/pinot/pull/5293#pullrequestreview-400541827", "createdAt": "2020-04-26T19:44:35Z", "commit": {"oid": "5927bffd191a00a49c3da463d7468c7dfa37cc76"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNlQxOTo0NDozNVrOGMJHQA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNlQxOTo0NDo1OFrOGMJHlw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTM4NTQwOA==", "bodyText": "extract this to a separate method, try to get it based on URI\n\nfile:<absolute_path>\nclasspath:\nhttp://uri\nThis function can be used in multiple places.", "url": "https://github.com/apache/pinot/pull/5293#discussion_r415385408", "createdAt": "2020-04-26T19:44:35Z", "author": {"login": "kishoreg"}, "path": "pinot-plugins/pinot-input-format/pinot-protobuf/src/main/java/org/apache/pinot/plugin/inputformat/protobuf/ProtoBufRecordReader.java", "diffHunk": "@@ -0,0 +1,136 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.plugin.inputformat.protobuf;\n+\n+import com.google.protobuf.DescriptorProtos;\n+import com.google.protobuf.Descriptors;\n+import com.google.protobuf.DynamicMessage;\n+import com.google.protobuf.Message;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.util.Set;\n+import javax.annotation.Nullable;\n+import org.apache.pinot.spi.data.Schema;\n+import org.apache.pinot.spi.data.readers.GenericRow;\n+import org.apache.pinot.spi.data.readers.RecordReader;\n+import org.apache.pinot.spi.data.readers.RecordReaderConfig;\n+import org.apache.pinot.spi.data.readers.RecordReaderUtils;\n+import org.apache.pinot.spi.utils.SchemaFieldExtractorUtils;\n+\n+\n+public class ProtoBufRecordReader implements RecordReader {\n+  private File _dataFile;\n+  private Schema _schema;\n+  private ProtoBufRecordExtractor _recordExtractor;\n+\n+  private InputStream _inputStream;\n+  private boolean _hasNext;\n+  private Descriptors.Descriptor _descriptor;\n+\n+  private boolean hasMoreToRead()\n+      throws IOException {\n+    _inputStream.mark(1);\n+    int nextByte = _inputStream.read();\n+    _inputStream.reset();\n+    return nextByte != -1;\n+  }\n+\n+  private void init()\n+      throws IOException {\n+    _inputStream = RecordReaderUtils.getBufferedInputStream(_dataFile);\n+    try {\n+      _hasNext = hasMoreToRead();\n+    } catch (Exception e) {\n+      _inputStream.close();\n+      throw e;\n+    }\n+  }\n+\n+  @Override\n+  public void init(File dataFile, Schema schema, @Nullable RecordReaderConfig recordReaderConfig)\n+      throws IOException {\n+    _dataFile = dataFile;\n+    _schema = schema;\n+    Set<String> sourceFields = SchemaFieldExtractorUtils.extract(schema);\n+    ProtoBufRecordExtractorConfig recordExtractorConfig = new ProtoBufRecordExtractorConfig();\n+    ProtoBufRecordReaderConfig protoBufRecordReaderConfig = (ProtoBufRecordReaderConfig) recordReaderConfig;\n+    String descriptorFile = protoBufRecordReaderConfig.getDescriptorFile();\n+    FileInputStream fin = new FileInputStream(descriptorFile);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5927bffd191a00a49c3da463d7468c7dfa37cc76"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTM4NTQ5NQ==", "bodyText": "URI instead of File?", "url": "https://github.com/apache/pinot/pull/5293#discussion_r415385495", "createdAt": "2020-04-26T19:44:58Z", "author": {"login": "kishoreg"}, "path": "pinot-plugins/pinot-input-format/pinot-protobuf/src/main/java/org/apache/pinot/plugin/inputformat/protobuf/ProtoBufRecordReaderConfig.java", "diffHunk": "@@ -0,0 +1,34 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.plugin.inputformat.protobuf;\n+\n+import org.apache.pinot.spi.data.readers.RecordReaderConfig;\n+\n+\n+public class ProtoBufRecordReaderConfig implements RecordReaderConfig {\n+  private String _descriptorFile;\n+\n+  public String getDescriptorFile() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5927bffd191a00a49c3da463d7468c7dfa37cc76"}, "originalPosition": 27}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDExMTA3Mzg5", "url": "https://github.com/apache/pinot/pull/5293#pullrequestreview-411107389", "createdAt": "2020-05-13T16:40:18Z", "commit": {"oid": "bb126bae0af31958022e751a8fdd8216abea61fe"}, "state": "COMMENTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNjo0MDoxOFrOGU6SWw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNjo1MTo0NFrOGU6utw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDU3OTY3NQ==", "bodyText": "This interface has changed", "url": "https://github.com/apache/pinot/pull/5293#discussion_r424579675", "createdAt": "2020-05-13T16:40:18Z", "author": {"login": "npawar"}, "path": "pinot-plugins/pinot-input-format/pinot-protobuf/src/main/java/org/apache/pinot/plugin/inputformat/protobuf/ProtoBufRecordReader.java", "diffHunk": "@@ -0,0 +1,147 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.plugin.inputformat.protobuf;\n+\n+import com.google.protobuf.DescriptorProtos;\n+import com.google.protobuf.Descriptors;\n+import com.google.protobuf.DynamicMessage;\n+import com.google.protobuf.Message;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.net.URI;\n+import java.util.Set;\n+import javax.annotation.Nullable;\n+import org.apache.pinot.spi.data.Schema;\n+import org.apache.pinot.spi.data.readers.GenericRow;\n+import org.apache.pinot.spi.data.readers.RecordReader;\n+import org.apache.pinot.spi.data.readers.RecordReaderConfig;\n+import org.apache.pinot.spi.data.readers.RecordReaderUtils;\n+import org.apache.pinot.spi.utils.ResourceFinder;\n+import org.apache.pinot.spi.utils.SchemaFieldExtractorUtils;\n+\n+\n+public class ProtoBufRecordReader implements RecordReader {\n+  private File _dataFile;\n+  private Schema _schema;\n+  private ProtoBufRecordExtractor _recordExtractor;\n+\n+  private InputStream _inputStream;\n+  private boolean _hasNext;\n+  private Descriptors.Descriptor _descriptor;\n+\n+  private boolean hasMoreToRead()\n+      throws IOException {\n+    _inputStream.mark(1);\n+    int nextByte = _inputStream.read();\n+    _inputStream.reset();\n+    return nextByte != -1;\n+  }\n+\n+  private void init()\n+      throws IOException {\n+    _inputStream = RecordReaderUtils.getBufferedInputStream(_dataFile);\n+    try {\n+      _hasNext = hasMoreToRead();\n+    } catch (Exception e) {\n+      _inputStream.close();\n+      throw e;\n+    }\n+  }\n+\n+  @Override\n+  public void init(File dataFile, Schema schema, @Nullable RecordReaderConfig recordReaderConfig)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bb126bae0af31958022e751a8fdd8216abea61fe"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDU4MDAzMQ==", "bodyText": "Why create empty class ProtoBufRecordExtractorConfig, you can just pass null here", "url": "https://github.com/apache/pinot/pull/5293#discussion_r424580031", "createdAt": "2020-05-13T16:40:49Z", "author": {"login": "npawar"}, "path": "pinot-plugins/pinot-input-format/pinot-protobuf/src/main/java/org/apache/pinot/plugin/inputformat/protobuf/ProtoBufRecordReader.java", "diffHunk": "@@ -0,0 +1,147 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.plugin.inputformat.protobuf;\n+\n+import com.google.protobuf.DescriptorProtos;\n+import com.google.protobuf.Descriptors;\n+import com.google.protobuf.DynamicMessage;\n+import com.google.protobuf.Message;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.net.URI;\n+import java.util.Set;\n+import javax.annotation.Nullable;\n+import org.apache.pinot.spi.data.Schema;\n+import org.apache.pinot.spi.data.readers.GenericRow;\n+import org.apache.pinot.spi.data.readers.RecordReader;\n+import org.apache.pinot.spi.data.readers.RecordReaderConfig;\n+import org.apache.pinot.spi.data.readers.RecordReaderUtils;\n+import org.apache.pinot.spi.utils.ResourceFinder;\n+import org.apache.pinot.spi.utils.SchemaFieldExtractorUtils;\n+\n+\n+public class ProtoBufRecordReader implements RecordReader {\n+  private File _dataFile;\n+  private Schema _schema;\n+  private ProtoBufRecordExtractor _recordExtractor;\n+\n+  private InputStream _inputStream;\n+  private boolean _hasNext;\n+  private Descriptors.Descriptor _descriptor;\n+\n+  private boolean hasMoreToRead()\n+      throws IOException {\n+    _inputStream.mark(1);\n+    int nextByte = _inputStream.read();\n+    _inputStream.reset();\n+    return nextByte != -1;\n+  }\n+\n+  private void init()\n+      throws IOException {\n+    _inputStream = RecordReaderUtils.getBufferedInputStream(_dataFile);\n+    try {\n+      _hasNext = hasMoreToRead();\n+    } catch (Exception e) {\n+      _inputStream.close();\n+      throw e;\n+    }\n+  }\n+\n+  @Override\n+  public void init(File dataFile, Schema schema, @Nullable RecordReaderConfig recordReaderConfig)\n+      throws IOException {\n+    _dataFile = dataFile;\n+    _schema = schema;\n+    Set<String> sourceFields = SchemaFieldExtractorUtils.extract(schema);\n+    ProtoBufRecordExtractorConfig recordExtractorConfig = new ProtoBufRecordExtractorConfig();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bb126bae0af31958022e751a8fdd8216abea61fe"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDU4MjI3NQ==", "bodyText": "s/tmp/tempDynamicMessage", "url": "https://github.com/apache/pinot/pull/5293#discussion_r424582275", "createdAt": "2020-05-13T16:44:27Z", "author": {"login": "npawar"}, "path": "pinot-plugins/pinot-input-format/pinot-protobuf/src/main/java/org/apache/pinot/plugin/inputformat/protobuf/ProtoBufRecordReader.java", "diffHunk": "@@ -0,0 +1,147 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.plugin.inputformat.protobuf;\n+\n+import com.google.protobuf.DescriptorProtos;\n+import com.google.protobuf.Descriptors;\n+import com.google.protobuf.DynamicMessage;\n+import com.google.protobuf.Message;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.net.URI;\n+import java.util.Set;\n+import javax.annotation.Nullable;\n+import org.apache.pinot.spi.data.Schema;\n+import org.apache.pinot.spi.data.readers.GenericRow;\n+import org.apache.pinot.spi.data.readers.RecordReader;\n+import org.apache.pinot.spi.data.readers.RecordReaderConfig;\n+import org.apache.pinot.spi.data.readers.RecordReaderUtils;\n+import org.apache.pinot.spi.utils.ResourceFinder;\n+import org.apache.pinot.spi.utils.SchemaFieldExtractorUtils;\n+\n+\n+public class ProtoBufRecordReader implements RecordReader {\n+  private File _dataFile;\n+  private Schema _schema;\n+  private ProtoBufRecordExtractor _recordExtractor;\n+\n+  private InputStream _inputStream;\n+  private boolean _hasNext;\n+  private Descriptors.Descriptor _descriptor;\n+\n+  private boolean hasMoreToRead()\n+      throws IOException {\n+    _inputStream.mark(1);\n+    int nextByte = _inputStream.read();\n+    _inputStream.reset();\n+    return nextByte != -1;\n+  }\n+\n+  private void init()\n+      throws IOException {\n+    _inputStream = RecordReaderUtils.getBufferedInputStream(_dataFile);\n+    try {\n+      _hasNext = hasMoreToRead();\n+    } catch (Exception e) {\n+      _inputStream.close();\n+      throw e;\n+    }\n+  }\n+\n+  @Override\n+  public void init(File dataFile, Schema schema, @Nullable RecordReaderConfig recordReaderConfig)\n+      throws IOException {\n+    _dataFile = dataFile;\n+    _schema = schema;\n+    Set<String> sourceFields = SchemaFieldExtractorUtils.extract(schema);\n+    ProtoBufRecordExtractorConfig recordExtractorConfig = new ProtoBufRecordExtractorConfig();\n+    ProtoBufRecordReaderConfig protoBufRecordReaderConfig = (ProtoBufRecordReaderConfig) recordReaderConfig;\n+    InputStream fin = getDescriptorFileInputStream(protoBufRecordReaderConfig);\n+    buildProtoBufDescriptor(fin);\n+    _recordExtractor = new ProtoBufRecordExtractor();\n+    _recordExtractor.init(sourceFields, recordExtractorConfig);\n+    init();\n+  }\n+\n+  private void buildProtoBufDescriptor(InputStream fin)\n+      throws IOException {\n+    try {\n+      DescriptorProtos.FileDescriptorSet set = DescriptorProtos.FileDescriptorSet.parseFrom(fin);\n+      Descriptors.FileDescriptor fileDescriptor =\n+          Descriptors.FileDescriptor.buildFrom(set.getFile(0), new Descriptors.FileDescriptor[]{});\n+      _descriptor = fileDescriptor.getMessageTypes().get(0);\n+    } catch (Descriptors.DescriptorValidationException e) {\n+      throw new IOException(\"Descriptor file validation failed\", e);\n+    }\n+  }\n+\n+  private InputStream getDescriptorFileInputStream(ProtoBufRecordReaderConfig protoBufRecordReaderConfig)\n+      throws IOException {\n+    URI descriptorFileURI = protoBufRecordReaderConfig.getDescriptorFile();\n+    return ResourceFinder.openResource(descriptorFileURI);\n+  }\n+\n+  @Override\n+  public boolean hasNext() {\n+    return _hasNext;\n+  }\n+\n+  @Override\n+  public GenericRow next()\n+      throws IOException {\n+    return next(new GenericRow());\n+  }\n+\n+  @Override\n+  public GenericRow next(GenericRow reuse)\n+      throws IOException {\n+    Message message = null;\n+    try {\n+      DynamicMessage tmp = DynamicMessage.getDefaultInstance(_descriptor);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bb126bae0af31958022e751a8fdd8216abea61fe"}, "originalPosition": 118}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDU4MzYyMQ==", "bodyText": "Can DynamicMessage and Builder instance also be reused across every call to next?", "url": "https://github.com/apache/pinot/pull/5293#discussion_r424583621", "createdAt": "2020-05-13T16:46:36Z", "author": {"login": "npawar"}, "path": "pinot-plugins/pinot-input-format/pinot-protobuf/src/main/java/org/apache/pinot/plugin/inputformat/protobuf/ProtoBufRecordReader.java", "diffHunk": "@@ -0,0 +1,147 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.plugin.inputformat.protobuf;\n+\n+import com.google.protobuf.DescriptorProtos;\n+import com.google.protobuf.Descriptors;\n+import com.google.protobuf.DynamicMessage;\n+import com.google.protobuf.Message;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.net.URI;\n+import java.util.Set;\n+import javax.annotation.Nullable;\n+import org.apache.pinot.spi.data.Schema;\n+import org.apache.pinot.spi.data.readers.GenericRow;\n+import org.apache.pinot.spi.data.readers.RecordReader;\n+import org.apache.pinot.spi.data.readers.RecordReaderConfig;\n+import org.apache.pinot.spi.data.readers.RecordReaderUtils;\n+import org.apache.pinot.spi.utils.ResourceFinder;\n+import org.apache.pinot.spi.utils.SchemaFieldExtractorUtils;\n+\n+\n+public class ProtoBufRecordReader implements RecordReader {\n+  private File _dataFile;\n+  private Schema _schema;\n+  private ProtoBufRecordExtractor _recordExtractor;\n+\n+  private InputStream _inputStream;\n+  private boolean _hasNext;\n+  private Descriptors.Descriptor _descriptor;\n+\n+  private boolean hasMoreToRead()\n+      throws IOException {\n+    _inputStream.mark(1);\n+    int nextByte = _inputStream.read();\n+    _inputStream.reset();\n+    return nextByte != -1;\n+  }\n+\n+  private void init()\n+      throws IOException {\n+    _inputStream = RecordReaderUtils.getBufferedInputStream(_dataFile);\n+    try {\n+      _hasNext = hasMoreToRead();\n+    } catch (Exception e) {\n+      _inputStream.close();\n+      throw e;\n+    }\n+  }\n+\n+  @Override\n+  public void init(File dataFile, Schema schema, @Nullable RecordReaderConfig recordReaderConfig)\n+      throws IOException {\n+    _dataFile = dataFile;\n+    _schema = schema;\n+    Set<String> sourceFields = SchemaFieldExtractorUtils.extract(schema);\n+    ProtoBufRecordExtractorConfig recordExtractorConfig = new ProtoBufRecordExtractorConfig();\n+    ProtoBufRecordReaderConfig protoBufRecordReaderConfig = (ProtoBufRecordReaderConfig) recordReaderConfig;\n+    InputStream fin = getDescriptorFileInputStream(protoBufRecordReaderConfig);\n+    buildProtoBufDescriptor(fin);\n+    _recordExtractor = new ProtoBufRecordExtractor();\n+    _recordExtractor.init(sourceFields, recordExtractorConfig);\n+    init();\n+  }\n+\n+  private void buildProtoBufDescriptor(InputStream fin)\n+      throws IOException {\n+    try {\n+      DescriptorProtos.FileDescriptorSet set = DescriptorProtos.FileDescriptorSet.parseFrom(fin);\n+      Descriptors.FileDescriptor fileDescriptor =\n+          Descriptors.FileDescriptor.buildFrom(set.getFile(0), new Descriptors.FileDescriptor[]{});\n+      _descriptor = fileDescriptor.getMessageTypes().get(0);\n+    } catch (Descriptors.DescriptorValidationException e) {\n+      throw new IOException(\"Descriptor file validation failed\", e);\n+    }\n+  }\n+\n+  private InputStream getDescriptorFileInputStream(ProtoBufRecordReaderConfig protoBufRecordReaderConfig)\n+      throws IOException {\n+    URI descriptorFileURI = protoBufRecordReaderConfig.getDescriptorFile();\n+    return ResourceFinder.openResource(descriptorFileURI);\n+  }\n+\n+  @Override\n+  public boolean hasNext() {\n+    return _hasNext;\n+  }\n+\n+  @Override\n+  public GenericRow next()\n+      throws IOException {\n+    return next(new GenericRow());\n+  }\n+\n+  @Override\n+  public GenericRow next(GenericRow reuse)\n+      throws IOException {\n+    Message message = null;\n+    try {\n+      DynamicMessage tmp = DynamicMessage.getDefaultInstance(_descriptor);\n+      Message.Builder builder = tmp.newBuilderForType();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bb126bae0af31958022e751a8fdd8216abea61fe"}, "originalPosition": 119}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDU4NDE2MA==", "bodyText": "remove this file", "url": "https://github.com/apache/pinot/pull/5293#discussion_r424584160", "createdAt": "2020-05-13T16:47:22Z", "author": {"login": "npawar"}, "path": "pinot-plugins/pinot-input-format/pinot-protobuf/src/main/java/org/apache/pinot/plugin/inputformat/protobuf/ProtoBufRecordExtractorConfig.java", "diffHunk": "@@ -0,0 +1,25 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bb126bae0af31958022e751a8fdd8216abea61fe"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDU4NjY4OA==", "bodyText": "javadocs", "url": "https://github.com/apache/pinot/pull/5293#discussion_r424586688", "createdAt": "2020-05-13T16:51:18Z", "author": {"login": "npawar"}, "path": "pinot-spi/src/main/java/org/apache/pinot/spi/utils/ResourceFinder.java", "diffHunk": "@@ -0,0 +1,53 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.spi.utils;\n+\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.net.URI;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+\n+\n+public class ResourceFinder {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bb126bae0af31958022e751a8fdd8216abea61fe"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDU4NjkzNQ==", "bodyText": "new line at end of both these sample.* files", "url": "https://github.com/apache/pinot/pull/5293#discussion_r424586935", "createdAt": "2020-05-13T16:51:44Z", "author": {"login": "npawar"}, "path": "pinot-plugins/pinot-input-format/pinot-protobuf/src/test/resources/sample.proto", "diffHunk": "@@ -0,0 +1,9 @@\n+syntax = \"proto3\";\n+package org.apache.pinot.plugin.inputformat.protobuf;\n+\n+message SampleRecord {\n+  string name = 1;\n+  int32 id = 2;\n+  string email = 3;\n+  repeated string friends = 4;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bb126bae0af31958022e751a8fdd8216abea61fe"}, "originalPosition": 8}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a5ad264eee52c436cf7b004bc7074323a7653680", "author": {"user": null}, "url": "https://github.com/apache/pinot/commit/a5ad264eee52c436cf7b004bc7074323a7653680", "committedDate": "2020-05-26T19:14:44Z", "message": "adding protobuf input format"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "49af90c2d2f121a1218091b84e0507c1a8d5a93f", "author": {"user": null}, "url": "https://github.com/apache/pinot/commit/49af90c2d2f121a1218091b84e0507c1a8d5a93f", "committedDate": "2020-05-26T19:14:44Z", "message": "adding support for proto config in Segment Creators"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ad2d04b90e2982f935e1a4fa46e9d05c730eb253", "author": {"user": null}, "url": "https://github.com/apache/pinot/commit/ad2d04b90e2982f935e1a4fa46e9d05c730eb253", "committedDate": "2020-05-26T19:14:44Z", "message": "exluding proto dependency"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "58cf022b8869d345e36c4ec91eba3a6fe1303be3", "author": {"user": null}, "url": "https://github.com/apache/pinot/commit/58cf022b8869d345e36c4ec91eba3a6fe1303be3", "committedDate": "2020-05-26T19:14:44Z", "message": "replacing descriptor file path with URI"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bf4dfe5286c1d9354343c055880064efd615f32d", "author": {"user": null}, "url": "https://github.com/apache/pinot/commit/bf4dfe5286c1d9354343c055880064efd615f32d", "committedDate": "2020-05-26T19:14:44Z", "message": "adding license"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6efa80d9abc75c17e0a8b351a877650f0ba1f646", "author": {"user": null}, "url": "https://github.com/apache/pinot/commit/6efa80d9abc75c17e0a8b351a877650f0ba1f646", "committedDate": "2020-05-26T19:14:44Z", "message": "refactoring"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "53aaf1467ea93603775be1503860f70a104066c3", "author": {"user": null}, "url": "https://github.com/apache/pinot/commit/53aaf1467ea93603775be1503860f70a104066c3", "committedDate": "2020-05-26T19:31:04Z", "message": "changing interface"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "bb126bae0af31958022e751a8fdd8216abea61fe", "author": {"user": null}, "url": "https://github.com/apache/pinot/commit/bb126bae0af31958022e751a8fdd8216abea61fe", "committedDate": "2020-05-09T20:17:18Z", "message": "adding license"}, "afterCommit": {"oid": "53aaf1467ea93603775be1503860f70a104066c3", "author": {"user": null}, "url": "https://github.com/apache/pinot/commit/53aaf1467ea93603775be1503860f70a104066c3", "committedDate": "2020-05-26T19:31:04Z", "message": "changing interface"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dc90d2cb85750b42f20f5a105ae6b96031c8f924", "author": {"user": null}, "url": "https://github.com/apache/pinot/commit/dc90d2cb85750b42f20f5a105ae6b96031c8f924", "committedDate": "2020-05-26T19:46:54Z", "message": "adding javadocs"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE5NDEyNDQ4", "url": "https://github.com/apache/pinot/pull/5293#pullrequestreview-419412448", "createdAt": "2020-05-27T16:39:24Z", "commit": {"oid": "dc90d2cb85750b42f20f5a105ae6b96031c8f924"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bb9337fa14af54d55fba1d2751f8d780c9fca5b2", "author": {"user": null}, "url": "https://github.com/apache/pinot/commit/bb9337fa14af54d55fba1d2751f8d780c9fca5b2", "committedDate": "2020-05-27T17:13:58Z", "message": "moving dynamic message to class variable"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a5292f977eaa266f5563f9e3042e52b9910879c1", "author": {"user": null}, "url": "https://github.com/apache/pinot/commit/a5292f977eaa266f5563f9e3042e52b9910879c1", "committedDate": "2020-05-27T17:21:33Z", "message": "removing descriptor variable from class"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE5NDcyNzc5", "url": "https://github.com/apache/pinot/pull/5293#pullrequestreview-419472779", "createdAt": "2020-05-27T17:52:38Z", "commit": {"oid": "a5292f977eaa266f5563f9e3042e52b9910879c1"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 927, "cost": 1, "resetAt": "2021-10-28T18:00:02Z"}}}