{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA1MzQ5NDc1", "number": 6152, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xN1QyMTozNzoyOFrOEu2o8Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xN1QyMTozNzoyOFrOEu2o8Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE3NTY1MTY5OnYy", "diffSide": "RIGHT", "path": "pinot-common/src/main/java/org/apache/pinot/sql/parsers/CalciteSqlParser.java", "isResolved": true, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xN1QyMTozNzoyOFrOHjgA3A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOFQwMjoyOToyOFrOHjhRTw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjk4NjcxNg==", "bodyText": "Would it be possible to make it all or nothing? For example, when you go over the group by expression list and to get the long literal for ordinal position, if the first group by expression doesn't happen to be ordinal then we simply break out of this function immediately rather than going over the rest of the expressions.\nIn other words, if the first group by expression is not an ordinal reference, then remaining one's aren't too", "url": "https://github.com/apache/pinot/pull/6152#discussion_r506986716", "createdAt": "2020-10-17T21:37:28Z", "author": {"login": "siddharthteotia"}, "path": "pinot-common/src/main/java/org/apache/pinot/sql/parsers/CalciteSqlParser.java", "diffHunk": "@@ -364,6 +367,42 @@ private static void queryRewrite(PinotQuery pinotQuery) {\n     validate(aliasMap, pinotQuery);\n   }\n \n+  private static void applyOrdinals(PinotQuery pinotQuery) {\n+    // handle GROUP BY clause\n+    for (int i = 0; i < pinotQuery.getGroupByListSize(); i++) {\n+      final Expression groupByExpr = pinotQuery.getGroupByList().get(i);\n+      if (groupByExpr.isSetLiteral() && groupByExpr.getLiteral().isSetLongValue()) {\n+        final int ordinal = (int) groupByExpr.getLiteral().getLongValue();\n+        pinotQuery.getGroupByList().set(i, getExpressionFromOrdinal(pinotQuery.getSelectList(), ordinal));\n+      }\n+    }\n+\n+    // handle ORDER BY clause\n+    for (int i = 0; i < pinotQuery.getOrderByListSize(); i++) {\n+      final Expression orderByExpr = pinotQuery.getOrderByList().get(i).getFunctionCall().getOperands().get(0);\n+      if (orderByExpr.isSetLiteral() && orderByExpr.getLiteral().isSetLongValue()) {\n+        final int ordinal = (int) orderByExpr.getLiteral().getLongValue();\n+        pinotQuery.getOrderByList().get(i).getFunctionCall()\n+            .setOperands(Arrays.asList(getExpressionFromOrdinal(pinotQuery.getSelectList(), ordinal)));\n+      }\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3ba0d7f665d5f626e27d686c9bd92635c53896ee"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjk4Njg0NQ==", "bodyText": "I am just trying to see how to fail fast (for some cases) out of these query rewrite methods since most of them are iterating on select, group by or order by expressions", "url": "https://github.com/apache/pinot/pull/6152#discussion_r506986845", "createdAt": "2020-10-17T21:39:21Z", "author": {"login": "siddharthteotia"}, "path": "pinot-common/src/main/java/org/apache/pinot/sql/parsers/CalciteSqlParser.java", "diffHunk": "@@ -364,6 +367,42 @@ private static void queryRewrite(PinotQuery pinotQuery) {\n     validate(aliasMap, pinotQuery);\n   }\n \n+  private static void applyOrdinals(PinotQuery pinotQuery) {\n+    // handle GROUP BY clause\n+    for (int i = 0; i < pinotQuery.getGroupByListSize(); i++) {\n+      final Expression groupByExpr = pinotQuery.getGroupByList().get(i);\n+      if (groupByExpr.isSetLiteral() && groupByExpr.getLiteral().isSetLongValue()) {\n+        final int ordinal = (int) groupByExpr.getLiteral().getLongValue();\n+        pinotQuery.getGroupByList().set(i, getExpressionFromOrdinal(pinotQuery.getSelectList(), ordinal));\n+      }\n+    }\n+\n+    // handle ORDER BY clause\n+    for (int i = 0; i < pinotQuery.getOrderByListSize(); i++) {\n+      final Expression orderByExpr = pinotQuery.getOrderByList().get(i).getFunctionCall().getOperands().get(0);\n+      if (orderByExpr.isSetLiteral() && orderByExpr.getLiteral().isSetLongValue()) {\n+        final int ordinal = (int) orderByExpr.getLiteral().getLongValue();\n+        pinotQuery.getOrderByList().get(i).getFunctionCall()\n+            .setOperands(Arrays.asList(getExpressionFromOrdinal(pinotQuery.getSelectList(), ordinal)));\n+      }\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjk4NjcxNg=="}, "originalCommit": {"oid": "3ba0d7f665d5f626e27d686c9bd92635c53896ee"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjk4ODA3Nw==", "bodyText": "Do you know if sql allows a combination of ordinal and alias or actual expression itself in order/ group by", "url": "https://github.com/apache/pinot/pull/6152#discussion_r506988077", "createdAt": "2020-10-17T21:55:30Z", "author": {"login": "kishoreg"}, "path": "pinot-common/src/main/java/org/apache/pinot/sql/parsers/CalciteSqlParser.java", "diffHunk": "@@ -364,6 +367,42 @@ private static void queryRewrite(PinotQuery pinotQuery) {\n     validate(aliasMap, pinotQuery);\n   }\n \n+  private static void applyOrdinals(PinotQuery pinotQuery) {\n+    // handle GROUP BY clause\n+    for (int i = 0; i < pinotQuery.getGroupByListSize(); i++) {\n+      final Expression groupByExpr = pinotQuery.getGroupByList().get(i);\n+      if (groupByExpr.isSetLiteral() && groupByExpr.getLiteral().isSetLongValue()) {\n+        final int ordinal = (int) groupByExpr.getLiteral().getLongValue();\n+        pinotQuery.getGroupByList().set(i, getExpressionFromOrdinal(pinotQuery.getSelectList(), ordinal));\n+      }\n+    }\n+\n+    // handle ORDER BY clause\n+    for (int i = 0; i < pinotQuery.getOrderByListSize(); i++) {\n+      final Expression orderByExpr = pinotQuery.getOrderByList().get(i).getFunctionCall().getOperands().get(0);\n+      if (orderByExpr.isSetLiteral() && orderByExpr.getLiteral().isSetLongValue()) {\n+        final int ordinal = (int) orderByExpr.getLiteral().getLongValue();\n+        pinotQuery.getOrderByList().get(i).getFunctionCall()\n+            .setOperands(Arrays.asList(getExpressionFromOrdinal(pinotQuery.getSelectList(), ordinal)));\n+      }\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjk4NjcxNg=="}, "originalCommit": {"oid": "3ba0d7f665d5f626e27d686c9bd92635c53896ee"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjk4OTYzMA==", "bodyText": "I thought we should support the case of mixing column name/ordinal/alias.\nE.g.\nselect a, b + 2, func(c) as func_c, count(*) from data group by a, 2, func_c;", "url": "https://github.com/apache/pinot/pull/6152#discussion_r506989630", "createdAt": "2020-10-17T22:16:05Z", "author": {"login": "xiangfu0"}, "path": "pinot-common/src/main/java/org/apache/pinot/sql/parsers/CalciteSqlParser.java", "diffHunk": "@@ -364,6 +367,42 @@ private static void queryRewrite(PinotQuery pinotQuery) {\n     validate(aliasMap, pinotQuery);\n   }\n \n+  private static void applyOrdinals(PinotQuery pinotQuery) {\n+    // handle GROUP BY clause\n+    for (int i = 0; i < pinotQuery.getGroupByListSize(); i++) {\n+      final Expression groupByExpr = pinotQuery.getGroupByList().get(i);\n+      if (groupByExpr.isSetLiteral() && groupByExpr.getLiteral().isSetLongValue()) {\n+        final int ordinal = (int) groupByExpr.getLiteral().getLongValue();\n+        pinotQuery.getGroupByList().set(i, getExpressionFromOrdinal(pinotQuery.getSelectList(), ordinal));\n+      }\n+    }\n+\n+    // handle ORDER BY clause\n+    for (int i = 0; i < pinotQuery.getOrderByListSize(); i++) {\n+      final Expression orderByExpr = pinotQuery.getOrderByList().get(i).getFunctionCall().getOperands().get(0);\n+      if (orderByExpr.isSetLiteral() && orderByExpr.getLiteral().isSetLongValue()) {\n+        final int ordinal = (int) orderByExpr.getLiteral().getLongValue();\n+        pinotQuery.getOrderByList().get(i).getFunctionCall()\n+            .setOperands(Arrays.asList(getExpressionFromOrdinal(pinotQuery.getSelectList(), ordinal)));\n+      }\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjk4NjcxNg=="}, "originalCommit": {"oid": "3ba0d7f665d5f626e27d686c9bd92635c53896ee"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjk5MDgyMA==", "bodyText": "added a test for this as well.", "url": "https://github.com/apache/pinot/pull/6152#discussion_r506990820", "createdAt": "2020-10-17T22:31:57Z", "author": {"login": "xiangfu0"}, "path": "pinot-common/src/main/java/org/apache/pinot/sql/parsers/CalciteSqlParser.java", "diffHunk": "@@ -364,6 +367,42 @@ private static void queryRewrite(PinotQuery pinotQuery) {\n     validate(aliasMap, pinotQuery);\n   }\n \n+  private static void applyOrdinals(PinotQuery pinotQuery) {\n+    // handle GROUP BY clause\n+    for (int i = 0; i < pinotQuery.getGroupByListSize(); i++) {\n+      final Expression groupByExpr = pinotQuery.getGroupByList().get(i);\n+      if (groupByExpr.isSetLiteral() && groupByExpr.getLiteral().isSetLongValue()) {\n+        final int ordinal = (int) groupByExpr.getLiteral().getLongValue();\n+        pinotQuery.getGroupByList().set(i, getExpressionFromOrdinal(pinotQuery.getSelectList(), ordinal));\n+      }\n+    }\n+\n+    // handle ORDER BY clause\n+    for (int i = 0; i < pinotQuery.getOrderByListSize(); i++) {\n+      final Expression orderByExpr = pinotQuery.getOrderByList().get(i).getFunctionCall().getOperands().get(0);\n+      if (orderByExpr.isSetLiteral() && orderByExpr.getLiteral().isSetLongValue()) {\n+        final int ordinal = (int) orderByExpr.getLiteral().getLongValue();\n+        pinotQuery.getOrderByList().get(i).getFunctionCall()\n+            .setOperands(Arrays.asList(getExpressionFromOrdinal(pinotQuery.getSelectList(), ordinal)));\n+      }\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjk4NjcxNg=="}, "originalCommit": {"oid": "3ba0d7f665d5f626e27d686c9bd92635c53896ee"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzAwNzMxMQ==", "bodyText": "Below is an example of query and results from mysql:", "url": "https://github.com/apache/pinot/pull/6152#discussion_r507007311", "createdAt": "2020-10-18T02:29:28Z", "author": {"login": "xiangfu0"}, "path": "pinot-common/src/main/java/org/apache/pinot/sql/parsers/CalciteSqlParser.java", "diffHunk": "@@ -364,6 +367,42 @@ private static void queryRewrite(PinotQuery pinotQuery) {\n     validate(aliasMap, pinotQuery);\n   }\n \n+  private static void applyOrdinals(PinotQuery pinotQuery) {\n+    // handle GROUP BY clause\n+    for (int i = 0; i < pinotQuery.getGroupByListSize(); i++) {\n+      final Expression groupByExpr = pinotQuery.getGroupByList().get(i);\n+      if (groupByExpr.isSetLiteral() && groupByExpr.getLiteral().isSetLongValue()) {\n+        final int ordinal = (int) groupByExpr.getLiteral().getLongValue();\n+        pinotQuery.getGroupByList().set(i, getExpressionFromOrdinal(pinotQuery.getSelectList(), ordinal));\n+      }\n+    }\n+\n+    // handle ORDER BY clause\n+    for (int i = 0; i < pinotQuery.getOrderByListSize(); i++) {\n+      final Expression orderByExpr = pinotQuery.getOrderByList().get(i).getFunctionCall().getOperands().get(0);\n+      if (orderByExpr.isSetLiteral() && orderByExpr.getLiteral().isSetLongValue()) {\n+        final int ordinal = (int) orderByExpr.getLiteral().getLongValue();\n+        pinotQuery.getOrderByList().get(i).getFunctionCall()\n+            .setOperands(Arrays.asList(getExpressionFromOrdinal(pinotQuery.getSelectList(), ordinal)));\n+      }\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjk4NjcxNg=="}, "originalCommit": {"oid": "3ba0d7f665d5f626e27d686c9bd92635c53896ee"}, "originalPosition": 32}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3757, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}