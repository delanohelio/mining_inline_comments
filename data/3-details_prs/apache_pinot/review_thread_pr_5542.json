{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDMzMjc3NjE4", "number": 5542, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQyMDo0NzozN1rOEE2B4A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQyMDo1MDo0NFrOEE2FFw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczNTE0OTc2OnYy", "diffSide": "RIGHT", "path": "pinot-controller/src/main/java/org/apache/pinot/controller/helix/core/realtime/PinotLLCRealtimeSegmentManager.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQyMDo0NzozN1rOGiuPFA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQyMTowMjozN1rOGiup8g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTA2MjI5Mg==", "bodyText": "We can drop Msg, StreamPartitionOffset", "url": "https://github.com/apache/pinot/pull/5542#discussion_r439062292", "createdAt": "2020-06-11T20:47:37Z", "author": {"login": "kishoreg"}, "path": "pinot-controller/src/main/java/org/apache/pinot/controller/helix/core/realtime/PinotLLCRealtimeSegmentManager.java", "diffHunk": "@@ -893,20 +891,19 @@ IdealState ensureAllPartitionsConsuming(TableConfig tableConfig, PartitionLevelS\n \n             // Create a new segment to re-consume from the previous start offset\n             LLCSegmentName newLLCSegmentName = getNextLLCSegmentName(latestLLCSegmentName, currentTimeMs);\n-            long startOffset = latestSegmentZKMetadata.getStartOffset();\n+            StreamPartitionMsgOffset startOffset = offsetFactory.create(latestSegmentZKMetadata.getStartOffset());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "200bb75c3c862c4d106ca11697b2e01cab3fdb26"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTA2OTE3MA==", "bodyText": "A bit late for this (you had your chance in PR#5360 :), it is already in the segment completion protocol, and also in config. I can probably change the class name without damaging compat (I think). I would let this be.", "url": "https://github.com/apache/pinot/pull/5542#discussion_r439069170", "createdAt": "2020-06-11T21:02:37Z", "author": {"login": "mcvsubbu"}, "path": "pinot-controller/src/main/java/org/apache/pinot/controller/helix/core/realtime/PinotLLCRealtimeSegmentManager.java", "diffHunk": "@@ -893,20 +891,19 @@ IdealState ensureAllPartitionsConsuming(TableConfig tableConfig, PartitionLevelS\n \n             // Create a new segment to re-consume from the previous start offset\n             LLCSegmentName newLLCSegmentName = getNextLLCSegmentName(latestLLCSegmentName, currentTimeMs);\n-            long startOffset = latestSegmentZKMetadata.getStartOffset();\n+            StreamPartitionMsgOffset startOffset = offsetFactory.create(latestSegmentZKMetadata.getStartOffset());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTA2MjI5Mg=="}, "originalCommit": {"oid": "200bb75c3c862c4d106ca11697b2e01cab3fdb26"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczNTE1MDM5OnYy", "diffSide": "RIGHT", "path": "pinot-controller/src/test/java/org/apache/pinot/controller/helix/core/realtime/PinotLLCRealtimeSegmentManagerTest.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQyMDo0Nzo1MFrOGiuPhQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQyMTo0ODozNVrOGiv16Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTA2MjQwNQ==", "bodyText": "LongOffset", "url": "https://github.com/apache/pinot/pull/5542#discussion_r439062405", "createdAt": "2020-06-11T20:47:50Z", "author": {"login": "kishoreg"}, "path": "pinot-controller/src/test/java/org/apache/pinot/controller/helix/core/realtime/PinotLLCRealtimeSegmentManagerTest.java", "diffHunk": "@@ -77,7 +79,7 @@\n \n   private static final long RANDOM_SEED = System.currentTimeMillis();\n   private static final Random RANDOM = new Random(RANDOM_SEED);\n-  static final long PARTITION_OFFSET = RANDOM.nextInt(Integer.MAX_VALUE);\n+  static final LongMsgOffset PARTITION_OFFSET = new LongMsgOffset(RANDOM.nextInt(Integer.MAX_VALUE));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "200bb75c3c862c4d106ca11697b2e01cab3fdb26"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTA2ODQxOA==", "bodyText": "I think I can change this without affecting compat", "url": "https://github.com/apache/pinot/pull/5542#discussion_r439068418", "createdAt": "2020-06-11T21:00:53Z", "author": {"login": "mcvsubbu"}, "path": "pinot-controller/src/test/java/org/apache/pinot/controller/helix/core/realtime/PinotLLCRealtimeSegmentManagerTest.java", "diffHunk": "@@ -77,7 +79,7 @@\n \n   private static final long RANDOM_SEED = System.currentTimeMillis();\n   private static final Random RANDOM = new Random(RANDOM_SEED);\n-  static final long PARTITION_OFFSET = RANDOM.nextInt(Integer.MAX_VALUE);\n+  static final LongMsgOffset PARTITION_OFFSET = new LongMsgOffset(RANDOM.nextInt(Integer.MAX_VALUE));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTA2MjQwNQ=="}, "originalCommit": {"oid": "200bb75c3c862c4d106ca11697b2e01cab3fdb26"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTA4ODYxNw==", "bodyText": "Discussed offline, we will leave it as is", "url": "https://github.com/apache/pinot/pull/5542#discussion_r439088617", "createdAt": "2020-06-11T21:48:35Z", "author": {"login": "mcvsubbu"}, "path": "pinot-controller/src/test/java/org/apache/pinot/controller/helix/core/realtime/PinotLLCRealtimeSegmentManagerTest.java", "diffHunk": "@@ -77,7 +79,7 @@\n \n   private static final long RANDOM_SEED = System.currentTimeMillis();\n   private static final Random RANDOM = new Random(RANDOM_SEED);\n-  static final long PARTITION_OFFSET = RANDOM.nextInt(Integer.MAX_VALUE);\n+  static final LongMsgOffset PARTITION_OFFSET = new LongMsgOffset(RANDOM.nextInt(Integer.MAX_VALUE));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTA2MjQwNQ=="}, "originalCommit": {"oid": "200bb75c3c862c4d106ca11697b2e01cab3fdb26"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczNTE1Nzk5OnYy", "diffSide": "RIGHT", "path": "pinot-spi/src/main/java/org/apache/pinot/spi/stream/PartitionLevelConsumer.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQyMDo1MDo0NFrOGiuUeA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQyMDo1MDo0NFrOGiuUeA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTA2MzY3Mg==", "bodyText": "Nicely done!", "url": "https://github.com/apache/pinot/pull/5542#discussion_r439063672", "createdAt": "2020-06-11T20:50:44Z", "author": {"login": "kishoreg"}, "path": "pinot-spi/src/main/java/org/apache/pinot/spi/stream/PartitionLevelConsumer.java", "diffHunk": "@@ -31,19 +31,35 @@\n public interface PartitionLevelConsumer extends Closeable {\n \n   /**\n+   * Is here for backward compatibility for a short time.\n+   * TODO Issue 5359 remove this API once external kafka consumers implements return of StreamPartitionMsgOffset\n    * Fetch messages from the stream between the specified offsets\n    * @param startOffset\n    * @param endOffset\n    * @param timeoutMillis\n    * @return\n    * @throws java.util.concurrent.TimeoutException\n    */\n+  @Deprecated\n   MessageBatch fetchMessages(long startOffset, long endOffset, int timeoutMillis)\n       throws java.util.concurrent.TimeoutException;\n \n+  /**\n+   * Fetch messages and the per-partition high watermark from Kafka between the specified offsets.\n+   *\n+   * @param startOffset The offset of the first message desired, inclusive\n+   * @param endOffset The offset of the last message desired, exclusive, or null\n+   * @param timeoutMillis Timeout in milliseconds\n+   * @throws java.util.concurrent.TimeoutException If the operation could not be completed within {@code timeoutMillis}\n+   * milliseconds\n+   * @return An iterable containing messages fetched from the stream partition and their offsets, as well as the\n+   * high watermark for this partition.\n+   */\n   default MessageBatch fetchMessages(StreamPartitionMsgOffset startOffset, StreamPartitionMsgOffset endOffset, int timeoutMillis)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "200bb75c3c862c4d106ca11697b2e01cab3fdb26"}, "originalPosition": 28}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4299, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}