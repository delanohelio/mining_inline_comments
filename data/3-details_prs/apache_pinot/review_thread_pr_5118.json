{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg0NDQ3MDI0", "number": 5118, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQyMzoyOTozMVrODln8gQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQyMzozOTo1NVrODloEbA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNzc4MzY5OnYy", "diffSide": "RIGHT", "path": "pinot-tools/src/main/java/org/apache/pinot/tools/data/generator/DataGenerator.java", "isResolved": true, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQyMzoyOTozMVrOFyn0Vw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQyMTo1MTowN1rOHqwAdA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODYyNTQ5NQ==", "bodyText": "Output file name should come from cli?", "url": "https://github.com/apache/pinot/pull/5118#discussion_r388625495", "createdAt": "2020-03-05T23:29:31Z", "author": {"login": "mayankshriv"}, "path": "pinot-tools/src/main/java/org/apache/pinot/tools/data/generator/DataGenerator.java", "diffHunk": "@@ -100,6 +110,23 @@ public void generate(long totalDocs, int numFiles)\n     }\n   }\n \n+  public void generateCsv(long totalDocs, int numFiles)\n+      throws IOException {\n+    final int numPerFiles = (int) (totalDocs / numFiles);\n+    for (int i = 0; i < numFiles; i++) {\n+      try (FileWriter writer = new FileWriter(outDir + \"/output.csv\")) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f7094572e4a3f2a86a001c5edc30568c923879e0"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODY4ODYyMg==", "bodyText": "cleaned up", "url": "https://github.com/apache/pinot/pull/5118#discussion_r388688622", "createdAt": "2020-03-06T02:51:47Z", "author": {"login": "apucher"}, "path": "pinot-tools/src/main/java/org/apache/pinot/tools/data/generator/DataGenerator.java", "diffHunk": "@@ -100,6 +110,23 @@ public void generate(long totalDocs, int numFiles)\n     }\n   }\n \n+  public void generateCsv(long totalDocs, int numFiles)\n+      throws IOException {\n+    final int numPerFiles = (int) (totalDocs / numFiles);\n+    for (int i = 0; i < numFiles; i++) {\n+      try (FileWriter writer = new FileWriter(outDir + \"/output.csv\")) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODYyNTQ5NQ=="}, "originalCommit": {"oid": "f7094572e4a3f2a86a001c5edc30568c923879e0"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODY5MDQzMQ==", "bodyText": "output is directory-based due to avro support above. imho doesn't add much value to support custom file names", "url": "https://github.com/apache/pinot/pull/5118#discussion_r388690431", "createdAt": "2020-03-06T02:59:36Z", "author": {"login": "apucher"}, "path": "pinot-tools/src/main/java/org/apache/pinot/tools/data/generator/DataGenerator.java", "diffHunk": "@@ -100,6 +110,23 @@ public void generate(long totalDocs, int numFiles)\n     }\n   }\n \n+  public void generateCsv(long totalDocs, int numFiles)\n+      throws IOException {\n+    final int numPerFiles = (int) (totalDocs / numFiles);\n+    for (int i = 0; i < numFiles; i++) {\n+      try (FileWriter writer = new FileWriter(outDir + \"/output.csv\")) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODYyNTQ5NQ=="}, "originalCommit": {"oid": "f7094572e4a3f2a86a001c5edc30568c923879e0"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDU4NjIyNA==", "bodyText": "Won't this always override the previous file?", "url": "https://github.com/apache/pinot/pull/5118#discussion_r514586224", "createdAt": "2020-10-29T21:45:08Z", "author": {"login": "JohnTortugo"}, "path": "pinot-tools/src/main/java/org/apache/pinot/tools/data/generator/DataGenerator.java", "diffHunk": "@@ -100,6 +110,23 @@ public void generate(long totalDocs, int numFiles)\n     }\n   }\n \n+  public void generateCsv(long totalDocs, int numFiles)\n+      throws IOException {\n+    final int numPerFiles = (int) (totalDocs / numFiles);\n+    for (int i = 0; i < numFiles; i++) {\n+      try (FileWriter writer = new FileWriter(outDir + \"/output.csv\")) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODYyNTQ5NQ=="}, "originalCommit": {"oid": "f7094572e4a3f2a86a001c5edc30568c923879e0"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDU4ODIxNg==", "bodyText": "the outDir is set as a cli arg", "url": "https://github.com/apache/pinot/pull/5118#discussion_r514588216", "createdAt": "2020-10-29T21:49:46Z", "author": {"login": "apucher"}, "path": "pinot-tools/src/main/java/org/apache/pinot/tools/data/generator/DataGenerator.java", "diffHunk": "@@ -100,6 +110,23 @@ public void generate(long totalDocs, int numFiles)\n     }\n   }\n \n+  public void generateCsv(long totalDocs, int numFiles)\n+      throws IOException {\n+    final int numPerFiles = (int) (totalDocs / numFiles);\n+    for (int i = 0; i < numFiles; i++) {\n+      try (FileWriter writer = new FileWriter(outDir + \"/output.csv\")) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODYyNTQ5NQ=="}, "originalCommit": {"oid": "f7094572e4a3f2a86a001c5edc30568c923879e0"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDU4ODc4OA==", "bodyText": "btw. here's the generator.sh script that uses the DataGenerator:\nhttps://github.com/apache/incubator-pinot/blob/master/docker/images/pinot/bin/generator.sh", "url": "https://github.com/apache/pinot/pull/5118#discussion_r514588788", "createdAt": "2020-10-29T21:51:07Z", "author": {"login": "apucher"}, "path": "pinot-tools/src/main/java/org/apache/pinot/tools/data/generator/DataGenerator.java", "diffHunk": "@@ -100,6 +110,23 @@ public void generate(long totalDocs, int numFiles)\n     }\n   }\n \n+  public void generateCsv(long totalDocs, int numFiles)\n+      throws IOException {\n+    final int numPerFiles = (int) (totalDocs / numFiles);\n+    for (int i = 0; i < numFiles; i++) {\n+      try (FileWriter writer = new FileWriter(outDir + \"/output.csv\")) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODYyNTQ5NQ=="}, "originalCommit": {"oid": "f7094572e4a3f2a86a001c5edc30568c923879e0"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNzc4NjUxOnYy", "diffSide": "RIGHT", "path": "pinot-tools/src/main/java/org/apache/pinot/tools/data/generator/DataGeneratorSpec.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQyMzozMDo1MlrOFyn1-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQwMjo1MjowM1rOFyrrMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODYyNTkxMg==", "bodyText": "System.getProperty(\"java.io.tmpdir\") instead of /tmp.", "url": "https://github.com/apache/pinot/pull/5118#discussion_r388625912", "createdAt": "2020-03-05T23:30:52Z", "author": {"login": "mayankshriv"}, "path": "pinot-tools/src/main/java/org/apache/pinot/tools/data/generator/DataGeneratorSpec.java", "diffHunk": "@@ -47,17 +48,19 @@\n   private final boolean overrideOutDir;\n \n   public DataGeneratorSpec() {\n-    this(new ArrayList<String>(), new HashMap<String, Integer>(), new HashMap<String, IntRange>(),\n-        new HashMap<String, DataType>(), new HashMap<String, FieldType>(), new HashMap<String, TimeUnit>(),\n+    this(new ArrayList<String>(), new HashMap<>(), new HashMap<>(), new HashMap<>(),\n+        new HashMap<>(), new HashMap<>(), new HashMap<>(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f7094572e4a3f2a86a001c5edc30568c923879e0"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODY4ODY5MQ==", "bodyText": "fixed", "url": "https://github.com/apache/pinot/pull/5118#discussion_r388688691", "createdAt": "2020-03-06T02:52:03Z", "author": {"login": "apucher"}, "path": "pinot-tools/src/main/java/org/apache/pinot/tools/data/generator/DataGeneratorSpec.java", "diffHunk": "@@ -47,17 +48,19 @@\n   private final boolean overrideOutDir;\n \n   public DataGeneratorSpec() {\n-    this(new ArrayList<String>(), new HashMap<String, Integer>(), new HashMap<String, IntRange>(),\n-        new HashMap<String, DataType>(), new HashMap<String, FieldType>(), new HashMap<String, TimeUnit>(),\n+    this(new ArrayList<String>(), new HashMap<>(), new HashMap<>(), new HashMap<>(),\n+        new HashMap<>(), new HashMap<>(), new HashMap<>(),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODYyNTkxMg=="}, "originalCommit": {"oid": "f7094572e4a3f2a86a001c5edc30568c923879e0"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNzgwMDA4OnYy", "diffSide": "RIGHT", "path": "pinot-tools/src/main/java/org/apache/pinot/tools/data/generator/TemplateSpikeGenerator.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQyMzozNzo0N1rOFyn96A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQwMjo1MTo1NlrOFyrrGQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODYyNzk0NA==", "bodyText": "Is this needed?", "url": "https://github.com/apache/pinot/pull/5118#discussion_r388627944", "createdAt": "2020-03-05T23:37:47Z", "author": {"login": "mayankshriv"}, "path": "pinot-tools/src/main/java/org/apache/pinot/tools/data/generator/TemplateSpikeGenerator.java", "diffHunk": "@@ -0,0 +1,108 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.tools.data.generator;\n+\n+import org.apache.commons.math3.distribution.LogNormalDistribution;\n+\n+import java.util.Map;\n+\n+/**\n+ * TemplateSpikeGenerator produces a series of log-normal spikes with log-normal arrival times, with optional smoothing.\n+ * This pattern is typical for rare even spikes, such as error counts. The generated values are sampled non-deterministically.\n+ *\n+ * Generator example:\n+ * <pre>\n+ *     baseline = 0\n+ *     arrivalMean = ?\n+ *     magnitudeMean = ?\n+ *\n+ *     returns [ 0, 0, 0, 0, 0, 0, 47, 15, 2, 1, 0, 0, ... ]\n+ * </pre>\n+ *\n+ * Configuration examples:\n+ * <ul>\n+ *     <li>./pinot-tools/src/main/resources/generator/simpleWebsite_generator.json</li>\n+ *     <li>./pinot-tools/src/main/resources/generator/complexWebsite_generator.json</li>\n+ * </ul>\n+ */\n+public class TemplateSpikeGenerator implements Generator {\n+    private final double baseline;\n+    private final double smoothing;\n+\n+    private final LogNormalDistribution arrivalGenerator;\n+    private final LogNormalDistribution magnitudeGenerator;\n+\n+    private long step = -1;\n+\n+    private long nextArrival;\n+    private double lastValue;\n+\n+    public TemplateSpikeGenerator(Map<String, Object> templateConfig) {\n+        this(toDouble(templateConfig.get(\"baseline\"), 0),\n+                toDouble(templateConfig.get(\"arrivalMean\"), 2),\n+                toDouble(templateConfig.get(\"arrivalSigma\"), 1),\n+                toDouble(templateConfig.get(\"magnitudeMean\"), 2),\n+                toDouble(templateConfig.get(\"magnitudeSigma\"), 1),\n+                toDouble(templateConfig.get(\"smoothing\"), 0));\n+    }\n+\n+    public TemplateSpikeGenerator(double baseline, double arrivalMean, double arrivalSigma, double magnitudeMean, double magnitudeSigma, double smoothing) {\n+        this.baseline = baseline;\n+        this.smoothing = smoothing;\n+\n+        this.arrivalGenerator = new LogNormalDistribution(arrivalMean, arrivalSigma);\n+        this.magnitudeGenerator = new LogNormalDistribution(magnitudeMean, magnitudeSigma);\n+\n+        this.nextArrival = (long) arrivalGenerator.sample();\n+        this.lastValue = baseline;\n+    }\n+\n+    @Override\n+    public void init() {\n+        // left blank\n+    }\n+\n+    @Override\n+    public Object next() {\n+        step++;\n+\n+        if (step < nextArrival) {\n+            lastValue = (1 - smoothing) * baseline + smoothing * lastValue;\n+            return (long) lastValue;\n+        }\n+\n+        nextArrival += (long) arrivalGenerator.sample();\n+        lastValue = baseline + this.magnitudeGenerator.sample();\n+        return (long) lastValue;\n+    }\n+\n+    private static double toDouble(Object obj, double defaultValue) {\n+        if (obj == null) {\n+            return defaultValue;\n+        }\n+        return Double.valueOf(obj.toString());\n+    }\n+\n+    public static void main(String[] args) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f7094572e4a3f2a86a001c5edc30568c923879e0"}, "originalPosition": 102}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODY4ODY2NQ==", "bodyText": "cleaned up", "url": "https://github.com/apache/pinot/pull/5118#discussion_r388688665", "createdAt": "2020-03-06T02:51:56Z", "author": {"login": "apucher"}, "path": "pinot-tools/src/main/java/org/apache/pinot/tools/data/generator/TemplateSpikeGenerator.java", "diffHunk": "@@ -0,0 +1,108 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.tools.data.generator;\n+\n+import org.apache.commons.math3.distribution.LogNormalDistribution;\n+\n+import java.util.Map;\n+\n+/**\n+ * TemplateSpikeGenerator produces a series of log-normal spikes with log-normal arrival times, with optional smoothing.\n+ * This pattern is typical for rare even spikes, such as error counts. The generated values are sampled non-deterministically.\n+ *\n+ * Generator example:\n+ * <pre>\n+ *     baseline = 0\n+ *     arrivalMean = ?\n+ *     magnitudeMean = ?\n+ *\n+ *     returns [ 0, 0, 0, 0, 0, 0, 47, 15, 2, 1, 0, 0, ... ]\n+ * </pre>\n+ *\n+ * Configuration examples:\n+ * <ul>\n+ *     <li>./pinot-tools/src/main/resources/generator/simpleWebsite_generator.json</li>\n+ *     <li>./pinot-tools/src/main/resources/generator/complexWebsite_generator.json</li>\n+ * </ul>\n+ */\n+public class TemplateSpikeGenerator implements Generator {\n+    private final double baseline;\n+    private final double smoothing;\n+\n+    private final LogNormalDistribution arrivalGenerator;\n+    private final LogNormalDistribution magnitudeGenerator;\n+\n+    private long step = -1;\n+\n+    private long nextArrival;\n+    private double lastValue;\n+\n+    public TemplateSpikeGenerator(Map<String, Object> templateConfig) {\n+        this(toDouble(templateConfig.get(\"baseline\"), 0),\n+                toDouble(templateConfig.get(\"arrivalMean\"), 2),\n+                toDouble(templateConfig.get(\"arrivalSigma\"), 1),\n+                toDouble(templateConfig.get(\"magnitudeMean\"), 2),\n+                toDouble(templateConfig.get(\"magnitudeSigma\"), 1),\n+                toDouble(templateConfig.get(\"smoothing\"), 0));\n+    }\n+\n+    public TemplateSpikeGenerator(double baseline, double arrivalMean, double arrivalSigma, double magnitudeMean, double magnitudeSigma, double smoothing) {\n+        this.baseline = baseline;\n+        this.smoothing = smoothing;\n+\n+        this.arrivalGenerator = new LogNormalDistribution(arrivalMean, arrivalSigma);\n+        this.magnitudeGenerator = new LogNormalDistribution(magnitudeMean, magnitudeSigma);\n+\n+        this.nextArrival = (long) arrivalGenerator.sample();\n+        this.lastValue = baseline;\n+    }\n+\n+    @Override\n+    public void init() {\n+        // left blank\n+    }\n+\n+    @Override\n+    public Object next() {\n+        step++;\n+\n+        if (step < nextArrival) {\n+            lastValue = (1 - smoothing) * baseline + smoothing * lastValue;\n+            return (long) lastValue;\n+        }\n+\n+        nextArrival += (long) arrivalGenerator.sample();\n+        lastValue = baseline + this.magnitudeGenerator.sample();\n+        return (long) lastValue;\n+    }\n+\n+    private static double toDouble(Object obj, double defaultValue) {\n+        if (obj == null) {\n+            return defaultValue;\n+        }\n+        return Double.valueOf(obj.toString());\n+    }\n+\n+    public static void main(String[] args) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODYyNzk0NA=="}, "originalCommit": {"oid": "f7094572e4a3f2a86a001c5edc30568c923879e0"}, "originalPosition": 102}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNzgwMDUzOnYy", "diffSide": "RIGHT", "path": "pinot-tools/src/main/java/org/apache/pinot/tools/data/generator/TemplateStringGenerator.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQyMzozODowMVrOFyn-MA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQwMjo1MjoxNFrOFyrrVw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODYyODAxNg==", "bodyText": "Same here.", "url": "https://github.com/apache/pinot/pull/5118#discussion_r388628016", "createdAt": "2020-03-05T23:38:01Z", "author": {"login": "mayankshriv"}, "path": "pinot-tools/src/main/java/org/apache/pinot/tools/data/generator/TemplateStringGenerator.java", "diffHunk": "@@ -0,0 +1,80 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.tools.data.generator;\n+\n+import java.util.List;\n+import java.util.Map;\n+\n+/**\n+ * TemplateStringGenerator produces series of strings by cycling through a predefined list of values, optionally with\n+ * a number of repetitions per value.\n+ *\n+ * Generator example:\n+ * <pre>\n+ *     values = [ \"hello\", \"world\" ]\n+ *     repetitions = 2\n+ *\n+ *     returns [ \"hello\", \"hello\", \"world\", \"world\", \"hello\", ... ]\n+ * </pre>\n+ *\n+ * Configuration examples:\n+ * <ul>\n+ *     <li>./pinot-tools/src/main/resources/generator/simpleWebsite_generator.json</li>\n+ *     <li>./pinot-tools/src/main/resources/generator/complexWebsite_generator.json</li>\n+ * </ul>\n+ */\n+public class TemplateStringGenerator implements Generator {\n+    private final String[] values;\n+    private final long repetitions;\n+\n+    private long step;\n+\n+    public TemplateStringGenerator(Map<String, Object> templateConfig) {\n+        this(((List<String>) templateConfig.get(\"values\")).toArray(new String[0]), toLong(templateConfig.get(\"repetitions\"), 1));\n+    }\n+\n+    public TemplateStringGenerator(String[] values, long repetitions) {\n+        this.values = values;\n+        this.repetitions = repetitions;\n+    }\n+\n+    @Override\n+    public void init() {\n+        // left blank\n+    }\n+\n+    @Override\n+    public Object next() {\n+        return values[(int) (step++ / repetitions) % values.length];\n+    }\n+\n+    private static long toLong(Object obj, long defaultValue) {\n+        if (obj == null) {\n+            return defaultValue;\n+        }\n+        return Long.valueOf(obj.toString());\n+    }\n+\n+    public static void main(String[] args) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f7094572e4a3f2a86a001c5edc30568c923879e0"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODY4ODcyNw==", "bodyText": "cleaned up", "url": "https://github.com/apache/pinot/pull/5118#discussion_r388688727", "createdAt": "2020-03-06T02:52:14Z", "author": {"login": "apucher"}, "path": "pinot-tools/src/main/java/org/apache/pinot/tools/data/generator/TemplateStringGenerator.java", "diffHunk": "@@ -0,0 +1,80 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.tools.data.generator;\n+\n+import java.util.List;\n+import java.util.Map;\n+\n+/**\n+ * TemplateStringGenerator produces series of strings by cycling through a predefined list of values, optionally with\n+ * a number of repetitions per value.\n+ *\n+ * Generator example:\n+ * <pre>\n+ *     values = [ \"hello\", \"world\" ]\n+ *     repetitions = 2\n+ *\n+ *     returns [ \"hello\", \"hello\", \"world\", \"world\", \"hello\", ... ]\n+ * </pre>\n+ *\n+ * Configuration examples:\n+ * <ul>\n+ *     <li>./pinot-tools/src/main/resources/generator/simpleWebsite_generator.json</li>\n+ *     <li>./pinot-tools/src/main/resources/generator/complexWebsite_generator.json</li>\n+ * </ul>\n+ */\n+public class TemplateStringGenerator implements Generator {\n+    private final String[] values;\n+    private final long repetitions;\n+\n+    private long step;\n+\n+    public TemplateStringGenerator(Map<String, Object> templateConfig) {\n+        this(((List<String>) templateConfig.get(\"values\")).toArray(new String[0]), toLong(templateConfig.get(\"repetitions\"), 1));\n+    }\n+\n+    public TemplateStringGenerator(String[] values, long repetitions) {\n+        this.values = values;\n+        this.repetitions = repetitions;\n+    }\n+\n+    @Override\n+    public void init() {\n+        // left blank\n+    }\n+\n+    @Override\n+    public Object next() {\n+        return values[(int) (step++ / repetitions) % values.length];\n+    }\n+\n+    private static long toLong(Object obj, long defaultValue) {\n+        if (obj == null) {\n+            return defaultValue;\n+        }\n+        return Long.valueOf(obj.toString());\n+    }\n+\n+    public static void main(String[] args) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODYyODAxNg=="}, "originalCommit": {"oid": "f7094572e4a3f2a86a001c5edc30568c923879e0"}, "originalPosition": 74}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNzgwMzk2OnYy", "diffSide": "RIGHT", "path": "pinot-tools/src/main/java/org/apache/pinot/tools/data/generator/TemplateType.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQyMzozOTo1NVrOFyoANw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQwMjo1NDowMlrOFyrs4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODYyODUzNQ==", "bodyText": "Apologies for my ignorance, is Template a generally accepted term here? If not, it is not intuitive enough, and may be PATTERN/DISTRIBUTION is a better word?\nAlso, would be good to add javadoc explaining each type.", "url": "https://github.com/apache/pinot/pull/5118#discussion_r388628535", "createdAt": "2020-03-05T23:39:55Z", "author": {"login": "mayankshriv"}, "path": "pinot-tools/src/main/java/org/apache/pinot/tools/data/generator/TemplateType.java", "diffHunk": "@@ -0,0 +1,27 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.tools.data.generator;\n+\n+public enum TemplateType {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f7094572e4a3f2a86a001c5edc30568c923879e0"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODY4OTEyMw==", "bodyText": "Renamed to \"Pattern\". Definitely more appropriate since those aren't physical \"templates\".\nEach type already explained in the generator module. Added javadoc referencing that information.", "url": "https://github.com/apache/pinot/pull/5118#discussion_r388689123", "createdAt": "2020-03-06T02:54:02Z", "author": {"login": "apucher"}, "path": "pinot-tools/src/main/java/org/apache/pinot/tools/data/generator/TemplateType.java", "diffHunk": "@@ -0,0 +1,27 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.tools.data.generator;\n+\n+public enum TemplateType {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODYyODUzNQ=="}, "originalCommit": {"oid": "f7094572e4a3f2a86a001c5edc30568c923879e0"}, "originalPosition": 21}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3496, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}