{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY0MTE1MzAw", "number": 4994, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QxNzowNDozN1rODY4Znw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQxNjo1OToyOFrODZkQpg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3NDE2NDc5OnYy", "diffSide": "RIGHT", "path": "pinot-controller/src/main/resources/static/js/init.js", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QxNzowNDozN1rOFe_dYQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQwMjoyNzo0NFrOFfs74g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODA0MTMxMw==", "bodyText": "Is the goal to invoke the new sql endpoint, or just set these options? If it's the former, we need a new endpoint on the controller \"/sql\", similar to \"pql\" which is in PqlQueryResource. Inside executeQuery method (called on line 83) we need to invoke \"sql\" endpoint accordingly.", "url": "https://github.com/apache/pinot/pull/4994#discussion_r368041313", "createdAt": "2020-01-17T17:04:37Z", "author": {"login": "npawar"}, "path": "pinot-controller/src/main/resources/static/js/init.js", "diffHunk": "@@ -67,13 +67,13 @@ $(document).ready(function() {\n     // execute query and draw the results\n     var query = EDITOR.getValue().trim();\n     var traceEnabled = document.getElementById('trace-enabled').checked;\n-    var groupByModeSQL = document.getElementById('group-by-mode-sql').checked;\n-    var responseFormatSQL = document.getElementById('response-format-sql').checked;\n+    var groupByModePQL = document.getElementById('group-by-mode-pql').checked;\n+    var responseFormatPQL = document.getElementById('response-format-pql').checked;\n     var queryOptions = undefined;\n-    if (groupByModeSQL === true) {\n+    if (groupByModePQL !== true) {\n       queryOptions = \"groupByMode=sql\";\n     }\n-    if (responseFormatSQL === true) {\n+    if (responseFormatPQL !== true) {\n       if (queryOptions === undefined) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "36303e5056fd340772e03940d2dc190a2515f193"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODc4NjQwMg==", "bodyText": "Provides a /sql endpoint now.", "url": "https://github.com/apache/pinot/pull/4994#discussion_r368786402", "createdAt": "2020-01-21T02:27:44Z", "author": {"login": "xiangfu0"}, "path": "pinot-controller/src/main/resources/static/js/init.js", "diffHunk": "@@ -67,13 +67,13 @@ $(document).ready(function() {\n     // execute query and draw the results\n     var query = EDITOR.getValue().trim();\n     var traceEnabled = document.getElementById('trace-enabled').checked;\n-    var groupByModeSQL = document.getElementById('group-by-mode-sql').checked;\n-    var responseFormatSQL = document.getElementById('response-format-sql').checked;\n+    var groupByModePQL = document.getElementById('group-by-mode-pql').checked;\n+    var responseFormatPQL = document.getElementById('response-format-pql').checked;\n     var queryOptions = undefined;\n-    if (groupByModeSQL === true) {\n+    if (groupByModePQL !== true) {\n       queryOptions = \"groupByMode=sql\";\n     }\n-    if (responseFormatSQL === true) {\n+    if (responseFormatPQL !== true) {\n       if (queryOptions === undefined) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODA0MTMxMw=="}, "originalCommit": {"oid": "36303e5056fd340772e03940d2dc190a2515f193"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3NDE3NzcxOnYy", "diffSide": "LEFT", "path": "pinot-controller/src/main/resources/static/query/index.html", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QxNzowOTowNVrOFe_lOw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xOFQwMDoyMDowN1rOFfIVDw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODA0MzMyMw==", "bodyText": "We need only 1 checkbox now for \"PQL\", which will go to the \"/pql\" endpoint. By default we go to \"sql\" endpoint", "url": "https://github.com/apache/pinot/pull/4994#discussion_r368043323", "createdAt": "2020-01-17T17:09:05Z", "author": {"login": "npawar"}, "path": "pinot-controller/src/main/resources/static/query/index.html", "diffHunk": "@@ -79,11 +79,11 @@ <h1><a href=\"#/\">Pinot Data Explorer</a></h1>\n           <div class=\"small-2 columns\" title=\"Enables tracing\">\n             <input type=checkbox id=\"trace-enabled\">&nbsp;&nbsp;Tracing</input>\n           </div>\n-          <div class=\"small-3 columns\" title=\"Sets groupByMode=sql in queryOptions (default pql)\">", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "36303e5056fd340772e03940d2dc190a2515f193"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODE4NjYzOQ==", "bodyText": "changed the ui to only show one check box of pql, which means to use pql syntax if checked.", "url": "https://github.com/apache/pinot/pull/4994#discussion_r368186639", "createdAt": "2020-01-18T00:20:07Z", "author": {"login": "xiangfu0"}, "path": "pinot-controller/src/main/resources/static/query/index.html", "diffHunk": "@@ -79,11 +79,11 @@ <h1><a href=\"#/\">Pinot Data Explorer</a></h1>\n           <div class=\"small-2 columns\" title=\"Enables tracing\">\n             <input type=checkbox id=\"trace-enabled\">&nbsp;&nbsp;Tracing</input>\n           </div>\n-          <div class=\"small-3 columns\" title=\"Sets groupByMode=sql in queryOptions (default pql)\">", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODA0MzMyMw=="}, "originalCommit": {"oid": "36303e5056fd340772e03940d2dc190a2515f193"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3OTE3MDQzOnYy", "diffSide": "RIGHT", "path": "pinot-controller/src/main/java/org/apache/pinot/controller/api/resources/PinotQueryResource.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQwMjoxMjowMFrOFfsxNQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQwMjoxMjowMFrOFfsxNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODc4MzY2OQ==", "bodyText": "please change all method names to handle<Get|Post><Sql|Pql>", "url": "https://github.com/apache/pinot/pull/4994#discussion_r368783669", "createdAt": "2020-01-21T02:12:00Z", "author": {"login": "kishoreg"}, "path": "pinot-controller/src/main/java/org/apache/pinot/controller/api/resources/PinotQueryResource.java", "diffHunk": "@@ -66,9 +67,10 @@\n   @Inject\n   AccessControlFactory _accessControlFactory;\n \n+  @Deprecated\n   @POST\n   @Path(\"pql\")\n-  public String post(String requestJsonStr, @Context HttpHeaders httpHeaders) {\n+  public String postPql(String requestJsonStr, @Context HttpHeaders httpHeaders) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0cca514b6e1b639906f6799def8f40807ee3cc2b"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3OTE3MzU4OnYy", "diffSide": "RIGHT", "path": "pinot-controller/src/main/java/org/apache/pinot/controller/api/resources/PinotQueryResource.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQwMjoxNDo1M1rOFfszMA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQwMjoxNDo1M1rOFfszMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODc4NDE3Ng==", "bodyText": "can we use a queryType enum instead of true/false for isSqlQuery", "url": "https://github.com/apache/pinot/pull/4994#discussion_r368784176", "createdAt": "2020-01-21T02:14:53Z", "author": {"login": "kishoreg"}, "path": "pinot-controller/src/main/java/org/apache/pinot/controller/api/resources/PinotQueryResource.java", "diffHunk": "@@ -81,37 +83,69 @@ public String post(String requestJsonStr, @Context HttpHeaders httpHeaders) {\n         queryOptions = requestJson.get(\"queryOptions\").asText();\n       }\n       LOGGER.debug(\"Trace: {}, Running query: {}\", traceEnabled, pqlQuery);\n-      return getQueryResponse(pqlQuery, traceEnabled, queryOptions, httpHeaders);\n+      return getQueryResponse(pqlQuery, traceEnabled, queryOptions, httpHeaders, false);\n     } catch (Exception e) {\n       LOGGER.error(\"Caught exception while processing post request\", e);\n       return QueryException.getException(QueryException.INTERNAL_ERROR, e).toString();\n     }\n   }\n \n+  @Deprecated\n   @GET\n   @Path(\"pql\")\n-  public String get(@QueryParam(\"pql\") String pqlQuery, @QueryParam(\"trace\") String traceEnabled,\n+  public String getPql(@QueryParam(\"pql\") String pqlQuery, @QueryParam(\"trace\") String traceEnabled,\n       @QueryParam(\"queryOptions\") String queryOptions,\n       @Context HttpHeaders httpHeaders) {\n     try {\n       LOGGER.debug(\"Trace: {}, Running query: {}\", traceEnabled, pqlQuery);\n-      return getQueryResponse(pqlQuery, traceEnabled, queryOptions, httpHeaders);\n+      return getQueryResponse(pqlQuery, traceEnabled, queryOptions, httpHeaders, false);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0cca514b6e1b639906f6799def8f40807ee3cc2b"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4MTM1MDc4OnYy", "diffSide": "RIGHT", "path": "pinot-controller/src/main/java/org/apache/pinot/controller/api/resources/PinotQueryResource.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQxNjo1OToyOFrOFgBmUw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQyMjoyODoxMFrOFgtOzw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTEyNDk0Nw==", "bodyText": "The /query/sql endpoint is full sql - SQL parser, sql execution and sql response format. I thought you are intending to have\n/pql - full pql endpoint\n/sql - sql execution, sql response, but pql parser.\nIn that case, we would need a query option in the /query/sql endpoint to switch between pql/sql parser.\nAnd essentially, we are ending up with 3 modes,\n\nfull pql - /pql endpoint\npartial sql with pql parser - default /sql endpoint\nfull sql - /sql endpoint, with query param", "url": "https://github.com/apache/pinot/pull/4994#discussion_r369124947", "createdAt": "2020-01-21T16:59:28Z", "author": {"login": "npawar"}, "path": "pinot-controller/src/main/java/org/apache/pinot/controller/api/resources/PinotQueryResource.java", "diffHunk": "@@ -143,9 +172,20 @@ public String getQueryResponse(String pqlQuery, String traceEnabled, String quer\n     }\n     String hostNameWithPrefix = instanceConfig.getHostName();\n     String url =\n-        \"http://\" + hostNameWithPrefix.substring(hostNameWithPrefix.indexOf(\"_\") + 1) + \":\" + instanceConfig.getPort()\n-            + \"/query\";\n-    return sendPQLRaw(url, pqlQuery, traceEnabled, queryOptions);\n+        getQueryURL(hostNameWithPrefix.substring(hostNameWithPrefix.indexOf(\"_\") + 1), instanceConfig.getPort(),\n+            querySyntax);\n+    return sendQueryRaw(url, query, traceEnabled);\n+  }\n+\n+  private String getQueryURL(String hostName, String port, String querySyntax) {\n+    switch (querySyntax) {\n+      case CommonConstants.Broker.Request.SQL:\n+        return String.format(\"http://%s:%s/query/sql\", hostName, port);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e474484a5b5cc4f031006c07ff4c26360797663a"}, "originalPosition": 140}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTgzOTgyMw==", "bodyText": "Current approach is to route SQL query from ui still to PQL endpoint, but with query options groupByMode=sql;responseFormat=sql.", "url": "https://github.com/apache/pinot/pull/4994#discussion_r369839823", "createdAt": "2020-01-22T22:28:10Z", "author": {"login": "xiangfu0"}, "path": "pinot-controller/src/main/java/org/apache/pinot/controller/api/resources/PinotQueryResource.java", "diffHunk": "@@ -143,9 +172,20 @@ public String getQueryResponse(String pqlQuery, String traceEnabled, String quer\n     }\n     String hostNameWithPrefix = instanceConfig.getHostName();\n     String url =\n-        \"http://\" + hostNameWithPrefix.substring(hostNameWithPrefix.indexOf(\"_\") + 1) + \":\" + instanceConfig.getPort()\n-            + \"/query\";\n-    return sendPQLRaw(url, pqlQuery, traceEnabled, queryOptions);\n+        getQueryURL(hostNameWithPrefix.substring(hostNameWithPrefix.indexOf(\"_\") + 1), instanceConfig.getPort(),\n+            querySyntax);\n+    return sendQueryRaw(url, query, traceEnabled);\n+  }\n+\n+  private String getQueryURL(String hostName, String port, String querySyntax) {\n+    switch (querySyntax) {\n+      case CommonConstants.Broker.Request.SQL:\n+        return String.format(\"http://%s:%s/query/sql\", hostName, port);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTEyNDk0Nw=="}, "originalCommit": {"oid": "e474484a5b5cc4f031006c07ff4c26360797663a"}, "originalPosition": 140}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3609, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}