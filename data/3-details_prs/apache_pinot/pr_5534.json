{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDMyMzk2MDU4", "number": 5534, "title": "Replace SegmentMergeLineage to SegmentLineage", "bodyText": "With the updated design (#2715) of segment merge, the metadata format\nfor segment lineage is changed.\n\nAdded segment lineage class which is a wrapper of ZNRecord\nAdded lineage entry class that represents m->n segment replacement\nAdded unit test\n\nDescription\nAdd a description of your PR here.\nA good description should include pointers to an issue or design document, etc.\nUpgrade Notes\nDoes this PR prevent a zero down-time upgrade? (Assume upgrade order: Controller, Broker, Server, Minion)\n\n Yes (Please label as backward-incompat, and complete the section below on Release Notes)\n\nDoes this PR fix a zero-downtime upgrade introduced earlier?\n\n Yes (Please label this as backward-incompat, and complete the section below on Release Notes)\n\nDoes this PR otherwise need attention when creating release notes? Things to consider:\n\nNew configuration options\nDeprecation of configurations\nSignature changes to public methods/interfaces\nNew plugins added or old plugins removed\n\n\n Yes (Please label this PR as release-notes and complete the section on Release Notes)\n\nRelease Notes\nIf you have tagged this as either backward-incompat or release-notes,\nyou MUST add text here that you would like to see appear in release notes of the\nnext release.\nIf you have a series of commits adding or enabling a feature, then\nadd this section only in final commit that marks the feature completed.\nRefer to earlier release notes to see examples of text\nDocumentation\nIf you have introduced a new feature or configuration, please add it to the documentation as well.\nSee https://docs.pinot.apache.org/developers/developers-and-contributors/update-document", "createdAt": "2020-06-10T11:36:32Z", "url": "https://github.com/apache/pinot/pull/5534", "merged": true, "mergeCommit": {"oid": "b3a83688e66e9522e54f81cb9872865db2d30e73"}, "closed": true, "closedAt": "2020-06-16T04:17:20Z", "author": {"login": "snleee"}, "timelineItems": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcqA3KMgBqjM0MzE1OTg0ODA=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcrrSzggBqjM0NDY4NzE3MDc=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "9f5bb773b44a85b03f1e2ef1913ea388a5fc8dcd", "author": {"user": {"login": "snleee", "name": "Seunghyun Lee"}}, "url": "https://github.com/apache/pinot/commit/9f5bb773b44a85b03f1e2ef1913ea388a5fc8dcd", "committedDate": "2020-06-10T11:35:46Z", "message": "Replace SegmentMergeLineage to SegmentLineage\n\nWith the updated design (#2715) of segment merge, the metadata format\nfor segment lineage is changed.\n\n1. Added segment lineage class which is a wrapper of ZNRecord\n2. Added lineage entry class that represents m->n segment replacement\n3. Added unit test"}, "afterCommit": {"oid": "ab42215291f3b390c31ad91dbefad74eb8d58c66", "author": {"user": {"login": "snleee", "name": "Seunghyun Lee"}}, "url": "https://github.com/apache/pinot/commit/ab42215291f3b390c31ad91dbefad74eb8d58c66", "committedDate": "2020-06-10T21:50:54Z", "message": "Replace SegmentMergeLineage to SegmentLineage\n\nWith the updated design (#2715) of segment merge, the metadata format\nfor segment lineage is changed.\n\n1. Added segment lineage class which is a wrapper of ZNRecord\n2. Added lineage entry class that represents m->n segment replacement\n3. Added unit test"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ab42215291f3b390c31ad91dbefad74eb8d58c66", "author": {"user": {"login": "snleee", "name": "Seunghyun Lee"}}, "url": "https://github.com/apache/pinot/commit/ab42215291f3b390c31ad91dbefad74eb8d58c66", "committedDate": "2020-06-10T21:50:54Z", "message": "Replace SegmentMergeLineage to SegmentLineage\n\nWith the updated design (#2715) of segment merge, the metadata format\nfor segment lineage is changed.\n\n1. Added segment lineage class which is a wrapper of ZNRecord\n2. Added lineage entry class that represents m->n segment replacement\n3. Added unit test"}, "afterCommit": {"oid": "0bd23172859fc60c73988dc9d04c61b7d41e9ecc", "author": {"user": {"login": "snleee", "name": "Seunghyun Lee"}}, "url": "https://github.com/apache/pinot/commit/0bd23172859fc60c73988dc9d04c61b7d41e9ecc", "committedDate": "2020-06-11T07:46:51Z", "message": "Replace SegmentMergeLineage to SegmentLineage\n\nWith the updated design (#2715) of segment merge, the metadata format\nfor segment lineage is changed.\n\n1. Added segment lineage class which is a wrapper of ZNRecord\n2. Added lineage entry class that represents m->n segment replacement\n3. Added unit test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5c589b6607c2963a56f1f25e304c2d26cdea0645", "author": {"user": {"login": "snleee", "name": "Seunghyun Lee"}}, "url": "https://github.com/apache/pinot/commit/5c589b6607c2963a56f1f25e304c2d26cdea0645", "committedDate": "2020-06-12T11:33:10Z", "message": "Replace SegmentMergeLineage to SegmentLineage\n\nWith the updated design (#2715) of segment merge, the metadata format\nfor segment lineage is changed.\n\n1. Added segment lineage class which is a wrapper of ZNRecord\n2. Added lineage entry class that represents m->n segment replacement\n3. Added unit test"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "0bd23172859fc60c73988dc9d04c61b7d41e9ecc", "author": {"user": {"login": "snleee", "name": "Seunghyun Lee"}}, "url": "https://github.com/apache/pinot/commit/0bd23172859fc60c73988dc9d04c61b7d41e9ecc", "committedDate": "2020-06-11T07:46:51Z", "message": "Replace SegmentMergeLineage to SegmentLineage\n\nWith the updated design (#2715) of segment merge, the metadata format\nfor segment lineage is changed.\n\n1. Added segment lineage class which is a wrapper of ZNRecord\n2. Added lineage entry class that represents m->n segment replacement\n3. Added unit test"}, "afterCommit": {"oid": "5c589b6607c2963a56f1f25e304c2d26cdea0645", "author": {"user": {"login": "snleee", "name": "Seunghyun Lee"}}, "url": "https://github.com/apache/pinot/commit/5c589b6607c2963a56f1f25e304c2d26cdea0645", "committedDate": "2020-06-12T11:33:10Z", "message": "Replace SegmentMergeLineage to SegmentLineage\n\nWith the updated design (#2715) of segment merge, the metadata format\nfor segment lineage is changed.\n\n1. Added segment lineage class which is a wrapper of ZNRecord\n2. Added lineage entry class that represents m->n segment replacement\n3. Added unit test"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMwMDU3ODEx", "url": "https://github.com/apache/pinot/pull/5534#pullrequestreview-430057811", "createdAt": "2020-06-12T21:56:42Z", "commit": {"oid": "5c589b6607c2963a56f1f25e304c2d26cdea0645"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQyMTo1Njo0MlrOGjSmuw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQyMTo1Njo0MlrOGjSmuw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTY1ODE3MQ==", "bodyText": "Do we need to worry about uniqueness guarantee?", "url": "https://github.com/apache/pinot/pull/5534#discussion_r439658171", "createdAt": "2020-06-12T21:56:42Z", "author": {"login": "mayankshriv"}, "path": "pinot-common/src/main/java/org/apache/pinot/common/lineage/SegmentLineage.java", "diffHunk": "@@ -0,0 +1,153 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.common.lineage;\n+\n+import com.google.common.base.Preconditions;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.UUID;\n+import org.apache.helix.ZNRecord;\n+import org.apache.pinot.spi.utils.EqualityUtils;\n+\n+\n+/**\n+ * Class to represent segment lineage information.\n+ *\n+ * Segment lineage keeps the metadata required for supporting m -> n segment replacement. Segment lineage is serialized\n+ * into a znode and stored in a helix property store (zookeeper). This metadata will be used by brokers to make sure\n+ * that the routing does not pick the segments with the duplicate data.\n+ *\n+ * NOTE: Update for the underlying segment lineage znode needs to happen with read-modify-write block to guarantee the\n+ * atomic update because this metadata can be modified concurrently (e.g. task scheduler tries to add entries after\n+ * scheduling new tasks while minion task tries to update the state of the existing entry)\n+ */\n+public class SegmentLineage {\n+  private static final String COMMA_SEPARATOR = \",\";\n+\n+  private String _tableNameWithType;\n+  private Map<String, LineageEntry> _lineageEntries;\n+\n+  public SegmentLineage(String tableNameWithType) {\n+    _tableNameWithType = tableNameWithType;\n+    _lineageEntries = new HashMap<>();\n+  }\n+\n+  public SegmentLineage(String tableNameWithType, Map<String, LineageEntry> lineageEntries) {\n+    _tableNameWithType = tableNameWithType;\n+    _lineageEntries = lineageEntries;\n+  }\n+\n+  public String getTableNameWithType() {\n+    return _tableNameWithType;\n+  }\n+\n+  /**\n+   * Add lineage entry to the segment lineage metadata\n+   * @param lineageEntry a lineage entry\n+   * @return the id for the input lineage entry for the access\n+   */\n+  public String addLineageEntry(LineageEntry lineageEntry) {\n+    String lineageId = generateLineageId();\n+    _lineageEntries.put(lineageId, lineageEntry);\n+    return lineageId;\n+  }\n+\n+  /**\n+   * Retrieve lineage entry\n+   * @param lineageEntryId the id for the lineage entry\n+   * @return the lineage entry for the given lineage entry id\n+   */\n+  public LineageEntry getLineageEntry(String lineageEntryId) {\n+    return _lineageEntries.get(lineageEntryId);\n+  }\n+\n+  /**\n+   * Delete lineage entry\n+   * @param lineageEntryId the id for the lineage entry\n+   */\n+  public void deleteLineageEntry(String lineageEntryId) {\n+    _lineageEntries.remove(lineageEntryId);\n+  }\n+\n+  /**\n+   * Convert ZNRecord to segment lineage\n+   * @param record ZNRecord representation of the segment lineage\n+   * @return the segment lineage object\n+   */\n+  public static SegmentLineage fromZNRecord(ZNRecord record) {\n+    String tableNameWithType = record.getId();\n+    Map<String, LineageEntry> lineageEntries = new HashMap<>();\n+    Map<String, List<String>> listFields = record.getListFields();\n+    for (Map.Entry<String, List<String>> listField : listFields.entrySet()) {\n+      String lineageId = listField.getKey();\n+      List<String> value = listField.getValue();\n+      Preconditions.checkState(value.size() == 4);\n+      List<String> segmentsFrom = Arrays.asList(value.get(0).split(COMMA_SEPARATOR));\n+      List<String> segmentsTo = Arrays.asList(value.get(1).split(COMMA_SEPARATOR));\n+      LineageEntryState state = LineageEntryState.valueOf(value.get(2));\n+      long timestamp = Long.parseLong(value.get(3));\n+      lineageEntries.put(lineageId, new LineageEntry(segmentsFrom, segmentsTo, state, timestamp));\n+    }\n+    return new SegmentLineage(tableNameWithType, lineageEntries);\n+  }\n+\n+  /**\n+   * Convert the segment lineage object to the ZNRecord\n+   * @return ZNRecord representation of the segment lineage\n+   */\n+  public ZNRecord toZNRecord() {\n+    ZNRecord znRecord = new ZNRecord(_tableNameWithType);\n+    for (Map.Entry<String, LineageEntry> entry : _lineageEntries.entrySet()) {\n+      LineageEntry lineageEntry = entry.getValue();\n+      String segmentsFrom = String.join(\",\", lineageEntry.getSegmentsFrom());\n+      String segmentsTo = String.join(\",\", lineageEntry.getSegmentsTo());\n+      String state = lineageEntry.getState().toString();\n+      String timestamp = Long.toString(lineageEntry.getTimestamp());\n+      List<String> listEntry = Arrays.asList(segmentsFrom, segmentsTo, state, timestamp);\n+      znRecord.setListField(entry.getKey(), listEntry);\n+    }\n+    return znRecord;\n+  }\n+\n+  private String generateLineageId() {\n+    return UUID.randomUUID().toString();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5c589b6607c2963a56f1f25e304c2d26cdea0645"}, "originalPosition": 131}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMxMDQ5NzM3", "url": "https://github.com/apache/pinot/pull/5534#pullrequestreview-431049737", "createdAt": "2020-06-15T23:02:40Z", "commit": {"oid": "5c589b6607c2963a56f1f25e304c2d26cdea0645"}, "state": "APPROVED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQyMzowMjo0MFrOGkFkcg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQyMzoxMDo1N1rOGkFuEg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDQ5MzE3MA==", "bodyText": "Make all of them final", "url": "https://github.com/apache/pinot/pull/5534#discussion_r440493170", "createdAt": "2020-06-15T23:02:40Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-common/src/main/java/org/apache/pinot/common/lineage/LineageEntry.java", "diffHunk": "@@ -0,0 +1,80 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.common.lineage;\n+\n+import java.util.List;\n+import org.apache.pinot.spi.utils.EqualityUtils;\n+\n+\n+/**\n+ * Class to represent the lineage entry.\n+ *\n+ */\n+public class LineageEntry {\n+  private List<String> _segmentsFrom;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5c589b6607c2963a56f1f25e304c2d26cdea0645"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDQ5MzQ0NA==", "bodyText": "Do we still need SCHEDULED in the latest design?", "url": "https://github.com/apache/pinot/pull/5534#discussion_r440493444", "createdAt": "2020-06-15T23:03:28Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-common/src/main/java/org/apache/pinot/common/lineage/LineageEntryState.java", "diffHunk": "@@ -0,0 +1,26 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.common.lineage;\n+\n+/**\n+ * Enum for represent the state of lineage entry\n+ */\n+public enum LineageEntryState {\n+  SCHEDULED, IN_PROGRESS, COMPLETED", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5c589b6607c2963a56f1f25e304c2d26cdea0645"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDQ5NDU3OQ==", "bodyText": "(nit) Replace with the IDE auto-generated code (use Objects.equals())\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                if (EqualityUtils.isSameReference(this, o)) {\n          \n          \n            \n                  return true;\n          \n          \n            \n                }\n          \n          \n            \n                if (EqualityUtils.isNullOrNotSameClass(this, o)) {\n          \n          \n            \n                  return false;\n          \n          \n            \n                }\n          \n          \n            \n                LineageEntry that = (LineageEntry) o;\n          \n          \n            \n                return EqualityUtils.isEqual(_segmentsFrom, that._segmentsFrom) && EqualityUtils.isEqual(_segmentsTo,\n          \n          \n            \n                    that._segmentsTo) && EqualityUtils.isEqual(_state, that._state) && EqualityUtils.isEqual(_timestamp,\n          \n          \n            \n                    that._timestamp);\n          \n          \n            \n                if (this == o) {\n          \n          \n            \n                  return true;\n          \n          \n            \n                }\n          \n          \n            \n                if (!(o instanceof LineageEntry)) {\n          \n          \n            \n                  return false;\n          \n          \n            \n                }\n          \n          \n            \n                LineageEntry that = (LineageEntry) o;\n          \n          \n            \n                return Objects.equals(_segmentsFrom, that._segmentsFrom) && Objects.equals(_segmentsTo, that._segmentsTo) && _state == that._state && _timestamp == that._timestamp;", "url": "https://github.com/apache/pinot/pull/5534#discussion_r440494579", "createdAt": "2020-06-15T23:07:17Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-common/src/main/java/org/apache/pinot/common/lineage/LineageEntry.java", "diffHunk": "@@ -0,0 +1,80 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.common.lineage;\n+\n+import java.util.List;\n+import org.apache.pinot.spi.utils.EqualityUtils;\n+\n+\n+/**\n+ * Class to represent the lineage entry.\n+ *\n+ */\n+public class LineageEntry {\n+  private List<String> _segmentsFrom;\n+  private List<String> _segmentsTo;\n+  private LineageEntryState _state;\n+  private long _timestamp;\n+\n+  public LineageEntry(List<String> segmentsFrom, List<String> segmentsTo, LineageEntryState state, long timestamp) {\n+    _segmentsFrom = segmentsFrom;\n+    _segmentsTo = segmentsTo;\n+    _state = state;\n+    _timestamp = timestamp;\n+  }\n+\n+  public List<String> getSegmentsFrom() {\n+    return _segmentsFrom;\n+  }\n+\n+  public List<String> getSegmentsTo() {\n+    return _segmentsTo;\n+  }\n+\n+  public LineageEntryState getState() {\n+    return _state;\n+  }\n+\n+  public long getTimestamp() {\n+    return _timestamp;\n+  }\n+\n+  @Override\n+  public boolean equals(Object o) {\n+    if (EqualityUtils.isSameReference(this, o)) {\n+      return true;\n+    }\n+    if (EqualityUtils.isNullOrNotSameClass(this, o)) {\n+      return false;\n+    }\n+    LineageEntry that = (LineageEntry) o;\n+    return EqualityUtils.isEqual(_segmentsFrom, that._segmentsFrom) && EqualityUtils.isEqual(_segmentsTo,\n+        that._segmentsTo) && EqualityUtils.isEqual(_state, that._state) && EqualityUtils.isEqual(_timestamp,\n+        that._timestamp);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5c589b6607c2963a56f1f25e304c2d26cdea0645"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDQ5NDc5MQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                int result = EqualityUtils.hashCodeOf(_segmentsFrom);\n          \n          \n            \n                result = EqualityUtils.hashCodeOf(result, _segmentsTo);\n          \n          \n            \n                result = EqualityUtils.hashCodeOf(result, _state);\n          \n          \n            \n                result = EqualityUtils.hashCodeOf(result, _timestamp);\n          \n          \n            \n                return result;\n          \n          \n            \n                return Objects.hash(_segmentsFrom, _segmentsTo, _state, _timestamp);", "url": "https://github.com/apache/pinot/pull/5534#discussion_r440494791", "createdAt": "2020-06-15T23:08:03Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-common/src/main/java/org/apache/pinot/common/lineage/LineageEntry.java", "diffHunk": "@@ -0,0 +1,80 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.common.lineage;\n+\n+import java.util.List;\n+import org.apache.pinot.spi.utils.EqualityUtils;\n+\n+\n+/**\n+ * Class to represent the lineage entry.\n+ *\n+ */\n+public class LineageEntry {\n+  private List<String> _segmentsFrom;\n+  private List<String> _segmentsTo;\n+  private LineageEntryState _state;\n+  private long _timestamp;\n+\n+  public LineageEntry(List<String> segmentsFrom, List<String> segmentsTo, LineageEntryState state, long timestamp) {\n+    _segmentsFrom = segmentsFrom;\n+    _segmentsTo = segmentsTo;\n+    _state = state;\n+    _timestamp = timestamp;\n+  }\n+\n+  public List<String> getSegmentsFrom() {\n+    return _segmentsFrom;\n+  }\n+\n+  public List<String> getSegmentsTo() {\n+    return _segmentsTo;\n+  }\n+\n+  public LineageEntryState getState() {\n+    return _state;\n+  }\n+\n+  public long getTimestamp() {\n+    return _timestamp;\n+  }\n+\n+  @Override\n+  public boolean equals(Object o) {\n+    if (EqualityUtils.isSameReference(this, o)) {\n+      return true;\n+    }\n+    if (EqualityUtils.isNullOrNotSameClass(this, o)) {\n+      return false;\n+    }\n+    LineageEntry that = (LineageEntry) o;\n+    return EqualityUtils.isEqual(_segmentsFrom, that._segmentsFrom) && EqualityUtils.isEqual(_segmentsTo,\n+        that._segmentsTo) && EqualityUtils.isEqual(_state, that._state) && EqualityUtils.isEqual(_timestamp,\n+        that._timestamp);\n+  }\n+\n+  @Override\n+  public int hashCode() {\n+    int result = EqualityUtils.hashCodeOf(_segmentsFrom);\n+    result = EqualityUtils.hashCodeOf(result, _segmentsTo);\n+    result = EqualityUtils.hashCodeOf(result, _state);\n+    result = EqualityUtils.hashCodeOf(result, _timestamp);\n+    return result;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5c589b6607c2963a56f1f25e304c2d26cdea0645"}, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDQ5NTAyNQ==", "bodyText": "Make them final", "url": "https://github.com/apache/pinot/pull/5534#discussion_r440495025", "createdAt": "2020-06-15T23:08:52Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-common/src/main/java/org/apache/pinot/common/lineage/SegmentLineage.java", "diffHunk": "@@ -0,0 +1,153 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.common.lineage;\n+\n+import com.google.common.base.Preconditions;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.UUID;\n+import org.apache.helix.ZNRecord;\n+import org.apache.pinot.spi.utils.EqualityUtils;\n+\n+\n+/**\n+ * Class to represent segment lineage information.\n+ *\n+ * Segment lineage keeps the metadata required for supporting m -> n segment replacement. Segment lineage is serialized\n+ * into a znode and stored in a helix property store (zookeeper). This metadata will be used by brokers to make sure\n+ * that the routing does not pick the segments with the duplicate data.\n+ *\n+ * NOTE: Update for the underlying segment lineage znode needs to happen with read-modify-write block to guarantee the\n+ * atomic update because this metadata can be modified concurrently (e.g. task scheduler tries to add entries after\n+ * scheduling new tasks while minion task tries to update the state of the existing entry)\n+ */\n+public class SegmentLineage {\n+  private static final String COMMA_SEPARATOR = \",\";\n+\n+  private String _tableNameWithType;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5c589b6607c2963a56f1f25e304c2d26cdea0645"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDQ5NTYzNA==", "bodyText": "I don't think equals() and hashCode() is required for this class.", "url": "https://github.com/apache/pinot/pull/5534#discussion_r440495634", "createdAt": "2020-06-15T23:10:57Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-common/src/main/java/org/apache/pinot/common/lineage/SegmentLineage.java", "diffHunk": "@@ -0,0 +1,153 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.common.lineage;\n+\n+import com.google.common.base.Preconditions;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.UUID;\n+import org.apache.helix.ZNRecord;\n+import org.apache.pinot.spi.utils.EqualityUtils;\n+\n+\n+/**\n+ * Class to represent segment lineage information.\n+ *\n+ * Segment lineage keeps the metadata required for supporting m -> n segment replacement. Segment lineage is serialized\n+ * into a znode and stored in a helix property store (zookeeper). This metadata will be used by brokers to make sure\n+ * that the routing does not pick the segments with the duplicate data.\n+ *\n+ * NOTE: Update for the underlying segment lineage znode needs to happen with read-modify-write block to guarantee the\n+ * atomic update because this metadata can be modified concurrently (e.g. task scheduler tries to add entries after\n+ * scheduling new tasks while minion task tries to update the state of the existing entry)\n+ */\n+public class SegmentLineage {\n+  private static final String COMMA_SEPARATOR = \",\";\n+\n+  private String _tableNameWithType;\n+  private Map<String, LineageEntry> _lineageEntries;\n+\n+  public SegmentLineage(String tableNameWithType) {\n+    _tableNameWithType = tableNameWithType;\n+    _lineageEntries = new HashMap<>();\n+  }\n+\n+  public SegmentLineage(String tableNameWithType, Map<String, LineageEntry> lineageEntries) {\n+    _tableNameWithType = tableNameWithType;\n+    _lineageEntries = lineageEntries;\n+  }\n+\n+  public String getTableNameWithType() {\n+    return _tableNameWithType;\n+  }\n+\n+  /**\n+   * Add lineage entry to the segment lineage metadata\n+   * @param lineageEntry a lineage entry\n+   * @return the id for the input lineage entry for the access\n+   */\n+  public String addLineageEntry(LineageEntry lineageEntry) {\n+    String lineageId = generateLineageId();\n+    _lineageEntries.put(lineageId, lineageEntry);\n+    return lineageId;\n+  }\n+\n+  /**\n+   * Retrieve lineage entry\n+   * @param lineageEntryId the id for the lineage entry\n+   * @return the lineage entry for the given lineage entry id\n+   */\n+  public LineageEntry getLineageEntry(String lineageEntryId) {\n+    return _lineageEntries.get(lineageEntryId);\n+  }\n+\n+  /**\n+   * Delete lineage entry\n+   * @param lineageEntryId the id for the lineage entry\n+   */\n+  public void deleteLineageEntry(String lineageEntryId) {\n+    _lineageEntries.remove(lineageEntryId);\n+  }\n+\n+  /**\n+   * Convert ZNRecord to segment lineage\n+   * @param record ZNRecord representation of the segment lineage\n+   * @return the segment lineage object\n+   */\n+  public static SegmentLineage fromZNRecord(ZNRecord record) {\n+    String tableNameWithType = record.getId();\n+    Map<String, LineageEntry> lineageEntries = new HashMap<>();\n+    Map<String, List<String>> listFields = record.getListFields();\n+    for (Map.Entry<String, List<String>> listField : listFields.entrySet()) {\n+      String lineageId = listField.getKey();\n+      List<String> value = listField.getValue();\n+      Preconditions.checkState(value.size() == 4);\n+      List<String> segmentsFrom = Arrays.asList(value.get(0).split(COMMA_SEPARATOR));\n+      List<String> segmentsTo = Arrays.asList(value.get(1).split(COMMA_SEPARATOR));\n+      LineageEntryState state = LineageEntryState.valueOf(value.get(2));\n+      long timestamp = Long.parseLong(value.get(3));\n+      lineageEntries.put(lineageId, new LineageEntry(segmentsFrom, segmentsTo, state, timestamp));\n+    }\n+    return new SegmentLineage(tableNameWithType, lineageEntries);\n+  }\n+\n+  /**\n+   * Convert the segment lineage object to the ZNRecord\n+   * @return ZNRecord representation of the segment lineage\n+   */\n+  public ZNRecord toZNRecord() {\n+    ZNRecord znRecord = new ZNRecord(_tableNameWithType);\n+    for (Map.Entry<String, LineageEntry> entry : _lineageEntries.entrySet()) {\n+      LineageEntry lineageEntry = entry.getValue();\n+      String segmentsFrom = String.join(\",\", lineageEntry.getSegmentsFrom());\n+      String segmentsTo = String.join(\",\", lineageEntry.getSegmentsTo());\n+      String state = lineageEntry.getState().toString();\n+      String timestamp = Long.toString(lineageEntry.getTimestamp());\n+      List<String> listEntry = Arrays.asList(segmentsFrom, segmentsTo, state, timestamp);\n+      znRecord.setListField(entry.getKey(), listEntry);\n+    }\n+    return znRecord;\n+  }\n+\n+  private String generateLineageId() {\n+    return UUID.randomUUID().toString();\n+  }\n+\n+  @Override\n+  public boolean equals(Object o) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5c589b6607c2963a56f1f25e304c2d26cdea0645"}, "originalPosition": 135}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e1e77aa6458833bc4e87bbb5818e3735f89c53dc", "author": {"user": {"login": "snleee", "name": "Seunghyun Lee"}}, "url": "https://github.com/apache/pinot/commit/e1e77aa6458833bc4e87bbb5818e3735f89c53dc", "committedDate": "2020-06-16T01:51:02Z", "message": "Addressed the comments"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "1e364c8f80ddd6e4e51e691cbabab5add39ef755", "author": {"user": {"login": "snleee", "name": "Seunghyun Lee"}}, "url": "https://github.com/apache/pinot/commit/1e364c8f80ddd6e4e51e691cbabab5add39ef755", "committedDate": "2020-06-15T23:49:40Z", "message": "Addressed the comments"}, "afterCommit": {"oid": "e1e77aa6458833bc4e87bbb5818e3735f89c53dc", "author": {"user": {"login": "snleee", "name": "Seunghyun Lee"}}, "url": "https://github.com/apache/pinot/commit/e1e77aa6458833bc4e87bbb5818e3735f89c53dc", "committedDate": "2020-06-16T01:51:02Z", "message": "Addressed the comments"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 574, "cost": 1, "resetAt": "2021-10-28T18:00:02Z"}}}