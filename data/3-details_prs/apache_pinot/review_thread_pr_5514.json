{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDMwNTQ5NDUz", "number": 5514, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxNDoyNTo0MFrOEDej8Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxNDoyNjoyOFrOEDelqQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyMDgxOTA1OnYy", "diffSide": "RIGHT", "path": "pinot-integration-tests/src/test/java/org/apache/pinot/integration/tests/ThetaSketchIntegrationTest.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxNDoyNTo0MFrOGghHUg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQyMTozMjo1N1rOGsdngQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjc1MDE2Mg==", "bodyText": "Can this be merged inside of OfflineClusterIntegrationTest, by creating a new table (once the original test is completed)? This way we avoid setting up the cluster for every new feature new add. Not sure, if there's a time limit on travis per test though (would need to check that first).", "url": "https://github.com/apache/pinot/pull/5514#discussion_r436750162", "createdAt": "2020-06-08T14:25:40Z", "author": {"login": "mayankshriv"}, "path": "pinot-integration-tests/src/test/java/org/apache/pinot/integration/tests/ThetaSketchIntegrationTest.java", "diffHunk": "@@ -0,0 +1,263 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.integration.tests;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.google.common.collect.ImmutableList;\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.ByteBuffer;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import org.apache.avro.Schema.Field;\n+import org.apache.avro.Schema.Type;\n+import org.apache.avro.file.DataFileWriter;\n+import org.apache.avro.generic.GenericData;\n+import org.apache.avro.generic.GenericDatumWriter;\n+import org.apache.commons.io.FileUtils;\n+import org.apache.commons.lang3.tuple.ImmutablePair;\n+import org.apache.commons.lang3.tuple.Pair;\n+import org.apache.datasketches.theta.UpdateSketch;\n+import org.apache.datasketches.theta.UpdateSketchBuilder;\n+import org.apache.pinot.spi.config.table.TableConfig;\n+import org.apache.pinot.spi.config.table.TableType;\n+import org.apache.pinot.spi.data.FieldSpec;\n+import org.apache.pinot.spi.data.Schema;\n+import org.apache.pinot.spi.utils.builder.TableConfigBuilder;\n+import org.apache.pinot.util.TestUtils;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Test;\n+\n+import static org.testng.Assert.assertEquals;\n+\n+\n+public class ThetaSketchIntegrationTest extends BaseClusterIntegrationTest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "34ce461a7f9dc8277f062d485e545a8da00eec65"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjgyMTA5OQ==", "bodyText": "On second thought, perhaps we should have a (single) separate integration test for specialized data structures such as TDigest, HLL, ThetaSketch, etc.", "url": "https://github.com/apache/pinot/pull/5514#discussion_r436821099", "createdAt": "2020-06-08T16:04:43Z", "author": {"login": "mayankshriv"}, "path": "pinot-integration-tests/src/test/java/org/apache/pinot/integration/tests/ThetaSketchIntegrationTest.java", "diffHunk": "@@ -0,0 +1,263 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.integration.tests;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.google.common.collect.ImmutableList;\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.ByteBuffer;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import org.apache.avro.Schema.Field;\n+import org.apache.avro.Schema.Type;\n+import org.apache.avro.file.DataFileWriter;\n+import org.apache.avro.generic.GenericData;\n+import org.apache.avro.generic.GenericDatumWriter;\n+import org.apache.commons.io.FileUtils;\n+import org.apache.commons.lang3.tuple.ImmutablePair;\n+import org.apache.commons.lang3.tuple.Pair;\n+import org.apache.datasketches.theta.UpdateSketch;\n+import org.apache.datasketches.theta.UpdateSketchBuilder;\n+import org.apache.pinot.spi.config.table.TableConfig;\n+import org.apache.pinot.spi.config.table.TableType;\n+import org.apache.pinot.spi.data.FieldSpec;\n+import org.apache.pinot.spi.data.Schema;\n+import org.apache.pinot.spi.utils.builder.TableConfigBuilder;\n+import org.apache.pinot.util.TestUtils;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Test;\n+\n+import static org.testng.Assert.assertEquals;\n+\n+\n+public class ThetaSketchIntegrationTest extends BaseClusterIntegrationTest {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjc1MDE2Mg=="}, "originalCommit": {"oid": "34ce461a7f9dc8277f062d485e545a8da00eec65"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTA0MDMzMA==", "bodyText": "To elaborate, I was suggesting to create one integration test for these specialized data structures such that:\n\nThe cluster is set up once at begining.\nFor each of these features, we can setup the table -> run queries -> delete the table, iteratively\n\nThis will avoid setting up the cluster multiple times, as we know this can lead to flakiness at times (if the cluster from test is not fully shutdown, before the next test starts).", "url": "https://github.com/apache/pinot/pull/5514#discussion_r449040330", "createdAt": "2020-07-02T14:24:46Z", "author": {"login": "mayankshriv"}, "path": "pinot-integration-tests/src/test/java/org/apache/pinot/integration/tests/ThetaSketchIntegrationTest.java", "diffHunk": "@@ -0,0 +1,263 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.integration.tests;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.google.common.collect.ImmutableList;\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.ByteBuffer;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import org.apache.avro.Schema.Field;\n+import org.apache.avro.Schema.Type;\n+import org.apache.avro.file.DataFileWriter;\n+import org.apache.avro.generic.GenericData;\n+import org.apache.avro.generic.GenericDatumWriter;\n+import org.apache.commons.io.FileUtils;\n+import org.apache.commons.lang3.tuple.ImmutablePair;\n+import org.apache.commons.lang3.tuple.Pair;\n+import org.apache.datasketches.theta.UpdateSketch;\n+import org.apache.datasketches.theta.UpdateSketchBuilder;\n+import org.apache.pinot.spi.config.table.TableConfig;\n+import org.apache.pinot.spi.config.table.TableType;\n+import org.apache.pinot.spi.data.FieldSpec;\n+import org.apache.pinot.spi.data.Schema;\n+import org.apache.pinot.spi.utils.builder.TableConfigBuilder;\n+import org.apache.pinot.util.TestUtils;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Test;\n+\n+import static org.testng.Assert.assertEquals;\n+\n+\n+public class ThetaSketchIntegrationTest extends BaseClusterIntegrationTest {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjc1MDE2Mg=="}, "originalCommit": {"oid": "34ce461a7f9dc8277f062d485e545a8da00eec65"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTI3NTc3Nw==", "bodyText": "I created an issue #5655 to do so in a separate RB.", "url": "https://github.com/apache/pinot/pull/5514#discussion_r449275777", "createdAt": "2020-07-02T21:32:57Z", "author": {"login": "sajjad-moradi"}, "path": "pinot-integration-tests/src/test/java/org/apache/pinot/integration/tests/ThetaSketchIntegrationTest.java", "diffHunk": "@@ -0,0 +1,263 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.integration.tests;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.google.common.collect.ImmutableList;\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.ByteBuffer;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import org.apache.avro.Schema.Field;\n+import org.apache.avro.Schema.Type;\n+import org.apache.avro.file.DataFileWriter;\n+import org.apache.avro.generic.GenericData;\n+import org.apache.avro.generic.GenericDatumWriter;\n+import org.apache.commons.io.FileUtils;\n+import org.apache.commons.lang3.tuple.ImmutablePair;\n+import org.apache.commons.lang3.tuple.Pair;\n+import org.apache.datasketches.theta.UpdateSketch;\n+import org.apache.datasketches.theta.UpdateSketchBuilder;\n+import org.apache.pinot.spi.config.table.TableConfig;\n+import org.apache.pinot.spi.config.table.TableType;\n+import org.apache.pinot.spi.data.FieldSpec;\n+import org.apache.pinot.spi.data.Schema;\n+import org.apache.pinot.spi.utils.builder.TableConfigBuilder;\n+import org.apache.pinot.util.TestUtils;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Test;\n+\n+import static org.testng.Assert.assertEquals;\n+\n+\n+public class ThetaSketchIntegrationTest extends BaseClusterIntegrationTest {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjc1MDE2Mg=="}, "originalCommit": {"oid": "34ce461a7f9dc8277f062d485e545a8da00eec65"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyMDgyMzQ1OnYy", "diffSide": "RIGHT", "path": "pinot-integration-tests/src/test/java/org/apache/pinot/integration/tests/ThetaSketchIntegrationTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxNDoyNjoyOFrOGghKDw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQyMzozMDoyM1rOGr4fMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjc1MDg2Mw==", "bodyText": "Would be good to create a utility method that generates the query based on parameters. Also, would be good to cover SQL/PQL, selection and group by.", "url": "https://github.com/apache/pinot/pull/5514#discussion_r436750863", "createdAt": "2020-06-08T14:26:28Z", "author": {"login": "mayankshriv"}, "path": "pinot-integration-tests/src/test/java/org/apache/pinot/integration/tests/ThetaSketchIntegrationTest.java", "diffHunk": "@@ -0,0 +1,263 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.integration.tests;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.google.common.collect.ImmutableList;\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.ByteBuffer;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import org.apache.avro.Schema.Field;\n+import org.apache.avro.Schema.Type;\n+import org.apache.avro.file.DataFileWriter;\n+import org.apache.avro.generic.GenericData;\n+import org.apache.avro.generic.GenericDatumWriter;\n+import org.apache.commons.io.FileUtils;\n+import org.apache.commons.lang3.tuple.ImmutablePair;\n+import org.apache.commons.lang3.tuple.Pair;\n+import org.apache.datasketches.theta.UpdateSketch;\n+import org.apache.datasketches.theta.UpdateSketchBuilder;\n+import org.apache.pinot.spi.config.table.TableConfig;\n+import org.apache.pinot.spi.config.table.TableType;\n+import org.apache.pinot.spi.data.FieldSpec;\n+import org.apache.pinot.spi.data.Schema;\n+import org.apache.pinot.spi.utils.builder.TableConfigBuilder;\n+import org.apache.pinot.util.TestUtils;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Test;\n+\n+import static org.testng.Assert.assertEquals;\n+\n+\n+public class ThetaSketchIntegrationTest extends BaseClusterIntegrationTest {\n+\n+  private static final String DIM_NAME = \"dimName\";\n+  private static final String DIM_VALUE = \"dimValue\";\n+  private static final String SHARD_ID = \"shardId\";\n+  private static final String THETA_SKETCH = \"thetaSketchCol\";\n+\n+  @BeforeClass\n+  public void setup()\n+      throws Exception {\n+    TestUtils.ensureDirectoriesExistAndEmpty(_tempDir, _segmentDir, _tarDir);\n+\n+    // Start the Pinot cluster\n+    startZk();\n+    startController();\n+    startBroker();\n+    startServer();\n+\n+    // create & upload schema AND table config\n+    Schema schema = new Schema.SchemaBuilder().setSchemaName(DEFAULT_SCHEMA_NAME)\n+        .addSingleValueDimension(DIM_NAME, FieldSpec.DataType.STRING)\n+        .addSingleValueDimension(DIM_VALUE, FieldSpec.DataType.STRING)\n+        .addSingleValueDimension(SHARD_ID, FieldSpec.DataType.INT)\n+        .addSingleValueDimension(THETA_SKETCH, FieldSpec.DataType.BYTES).build();\n+    addSchema(schema);\n+    TableConfig tableConfig = new TableConfigBuilder(TableType.OFFLINE).setTableName(DEFAULT_TABLE_NAME).build();\n+    addTableConfig(tableConfig);\n+\n+    // create & upload segments\n+    File avroFile = createAvroFile();\n+    ClusterIntegrationTestUtils.buildSegmentFromAvro(avroFile, tableConfig, schema, 0, _segmentDir, _tarDir);\n+    uploadSegments(DEFAULT_TABLE_NAME, _tarDir);\n+\n+    waitForAllDocsLoaded(60_000);\n+  }\n+\n+  @Override\n+  protected long getCountStarResult() {\n+    /*\n+    Uploaded table content:\n+\n+    row#  dimName  dimValue  shardId  thetaSketchCol\n+    ----  =======  ========  =======  ==============\n+    1     country  US        1        ...\n+    2     country  CA        1        ...\n+    3     country  MX        1        ...\n+    4     title    Engineer  1        ...\n+    5     title    Manager   1        ...\n+    6     country  US        2        ...\n+    7     country  CA        2        ...\n+    8     country  MX        2        ...\n+    9     title    Engineer  2        ...\n+    10    title    Manager   2        ...\n+     */\n+    return 10;\n+  }\n+\n+  @Test\n+  public void testThetaSketchQuery()\n+      throws Exception {\n+    /*\n+    Original data:\n+\n+    Title     Country  Shard#1  Shard#2\n+    --------  -------  -------  -------\n+    Engineer  US       50       110\n+    Engineer  CA       60       120\n+    Engineer  MX       70       130\n+    Manager   US       80       140\n+    Manager   CA       90       150\n+    Manager   MX       100      160\n+     */\n+\n+    // title = engineer\n+    String query = \"select distinctCountThetaSketch(thetaSketchCol, '', \"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "34ce461a7f9dc8277f062d485e545a8da00eec65"}, "originalPosition": 127}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODY2NzQ0MA==", "bodyText": "I just added the test case for groupby and also ran everything against sql endpoint as well.\nFor utility method, I intentionally didn't use it here because this is a slightly complicated aggregation function and I wanted to spell out the queries so the reader can easily see what the syntax is and what the differences are.", "url": "https://github.com/apache/pinot/pull/5514#discussion_r448667440", "createdAt": "2020-07-01T23:30:23Z", "author": {"login": "sajjad-moradi"}, "path": "pinot-integration-tests/src/test/java/org/apache/pinot/integration/tests/ThetaSketchIntegrationTest.java", "diffHunk": "@@ -0,0 +1,263 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.integration.tests;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.google.common.collect.ImmutableList;\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.ByteBuffer;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import org.apache.avro.Schema.Field;\n+import org.apache.avro.Schema.Type;\n+import org.apache.avro.file.DataFileWriter;\n+import org.apache.avro.generic.GenericData;\n+import org.apache.avro.generic.GenericDatumWriter;\n+import org.apache.commons.io.FileUtils;\n+import org.apache.commons.lang3.tuple.ImmutablePair;\n+import org.apache.commons.lang3.tuple.Pair;\n+import org.apache.datasketches.theta.UpdateSketch;\n+import org.apache.datasketches.theta.UpdateSketchBuilder;\n+import org.apache.pinot.spi.config.table.TableConfig;\n+import org.apache.pinot.spi.config.table.TableType;\n+import org.apache.pinot.spi.data.FieldSpec;\n+import org.apache.pinot.spi.data.Schema;\n+import org.apache.pinot.spi.utils.builder.TableConfigBuilder;\n+import org.apache.pinot.util.TestUtils;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Test;\n+\n+import static org.testng.Assert.assertEquals;\n+\n+\n+public class ThetaSketchIntegrationTest extends BaseClusterIntegrationTest {\n+\n+  private static final String DIM_NAME = \"dimName\";\n+  private static final String DIM_VALUE = \"dimValue\";\n+  private static final String SHARD_ID = \"shardId\";\n+  private static final String THETA_SKETCH = \"thetaSketchCol\";\n+\n+  @BeforeClass\n+  public void setup()\n+      throws Exception {\n+    TestUtils.ensureDirectoriesExistAndEmpty(_tempDir, _segmentDir, _tarDir);\n+\n+    // Start the Pinot cluster\n+    startZk();\n+    startController();\n+    startBroker();\n+    startServer();\n+\n+    // create & upload schema AND table config\n+    Schema schema = new Schema.SchemaBuilder().setSchemaName(DEFAULT_SCHEMA_NAME)\n+        .addSingleValueDimension(DIM_NAME, FieldSpec.DataType.STRING)\n+        .addSingleValueDimension(DIM_VALUE, FieldSpec.DataType.STRING)\n+        .addSingleValueDimension(SHARD_ID, FieldSpec.DataType.INT)\n+        .addSingleValueDimension(THETA_SKETCH, FieldSpec.DataType.BYTES).build();\n+    addSchema(schema);\n+    TableConfig tableConfig = new TableConfigBuilder(TableType.OFFLINE).setTableName(DEFAULT_TABLE_NAME).build();\n+    addTableConfig(tableConfig);\n+\n+    // create & upload segments\n+    File avroFile = createAvroFile();\n+    ClusterIntegrationTestUtils.buildSegmentFromAvro(avroFile, tableConfig, schema, 0, _segmentDir, _tarDir);\n+    uploadSegments(DEFAULT_TABLE_NAME, _tarDir);\n+\n+    waitForAllDocsLoaded(60_000);\n+  }\n+\n+  @Override\n+  protected long getCountStarResult() {\n+    /*\n+    Uploaded table content:\n+\n+    row#  dimName  dimValue  shardId  thetaSketchCol\n+    ----  =======  ========  =======  ==============\n+    1     country  US        1        ...\n+    2     country  CA        1        ...\n+    3     country  MX        1        ...\n+    4     title    Engineer  1        ...\n+    5     title    Manager   1        ...\n+    6     country  US        2        ...\n+    7     country  CA        2        ...\n+    8     country  MX        2        ...\n+    9     title    Engineer  2        ...\n+    10    title    Manager   2        ...\n+     */\n+    return 10;\n+  }\n+\n+  @Test\n+  public void testThetaSketchQuery()\n+      throws Exception {\n+    /*\n+    Original data:\n+\n+    Title     Country  Shard#1  Shard#2\n+    --------  -------  -------  -------\n+    Engineer  US       50       110\n+    Engineer  CA       60       120\n+    Engineer  MX       70       130\n+    Manager   US       80       140\n+    Manager   CA       90       150\n+    Manager   MX       100      160\n+     */\n+\n+    // title = engineer\n+    String query = \"select distinctCountThetaSketch(thetaSketchCol, '', \"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjc1MDg2Mw=="}, "originalCommit": {"oid": "34ce461a7f9dc8277f062d485e545a8da00eec65"}, "originalPosition": 127}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4279, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}