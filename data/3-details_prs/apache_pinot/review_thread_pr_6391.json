{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQ2MzU3MDU2", "number": 6391, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOVQxNjowNjo1N1rOFJzyew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOVQxNjoxMTo0NFrOFJz22Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ1ODMwMDExOnYy", "diffSide": "RIGHT", "path": "pinot-core/src/main/java/org/apache/pinot/core/operator/filter/H3IndexFilterOperator.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOVQxNjowNjo1OFrOIMSrow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOVQxNjo1NTozOFrOIMTq7A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTc1OTkwNw==", "bodyText": "better to add this logic in filter plan node and fallback to expressionbased filter operator", "url": "https://github.com/apache/pinot/pull/6391#discussion_r549759907", "createdAt": "2020-12-29T16:06:58Z", "author": {"login": "kishoreg"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/operator/filter/H3IndexFilterOperator.java", "diffHunk": "@@ -69,30 +76,16 @@ public H3IndexFilterOperator(Predicate predicate, IndexSegment indexSegment, int\n     } else {\n       throw new RuntimeException(\"Expecting one of the arguments of ST_DISTANCE to be an identifier\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "275e47ee0262be997287cb14607ccc65d8b724cd"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTc3NjEwOA==", "bodyText": "Yes, filter plan node has this logic, so this is defensive checking.", "url": "https://github.com/apache/pinot/pull/6391#discussion_r549776108", "createdAt": "2020-12-29T16:55:38Z", "author": {"login": "yupeng9"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/operator/filter/H3IndexFilterOperator.java", "diffHunk": "@@ -69,30 +76,16 @@ public H3IndexFilterOperator(Predicate predicate, IndexSegment indexSegment, int\n     } else {\n       throw new RuntimeException(\"Expecting one of the arguments of ST_DISTANCE to be an identifier\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTc1OTkwNw=="}, "originalCommit": {"oid": "275e47ee0262be997287cb14607ccc65d8b724cd"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ1ODMwODI0OnYy", "diffSide": "RIGHT", "path": "pinot-core/src/main/java/org/apache/pinot/core/plan/FilterPlanNode.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOVQxNjoxMDoyMVrOIMSwSA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOVQxNjoxMDoyMVrOIMSwSA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTc2MTA5Ng==", "bodyText": "add a check that the first argument is identifier", "url": "https://github.com/apache/pinot/pull/6391#discussion_r549761096", "createdAt": "2020-12-29T16:10:21Z", "author": {"login": "kishoreg"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/plan/FilterPlanNode.java", "diffHunk": "@@ -93,6 +89,25 @@ public BaseFilterOperator run() {\n     }\n   }\n \n+  private boolean canApplyH3Index(Predicate predicate, FunctionContext function) {\n+    if (function.getFunctionName().equalsIgnoreCase(StDistanceFunction.FUNCTION_NAME)) {\n+      Predicate.Type type = predicate.getType();\n+      if (type != Predicate.Type.RANGE) {\n+        return false;\n+      }\n+      RangePredicate rangePredicate = (RangePredicate) predicate;\n+      // TODO: support lower bound\n+      if (rangePredicate.getUpperBound().equals(RangePredicate.UNBOUNDED) || !rangePredicate.getLowerBound()\n+          .equals(RangePredicate.UNBOUNDED)) {\n+        return false;\n+      }\n+      String columnName = function.getArguments().get(0).getIdentifier();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "275e47ee0262be997287cb14607ccc65d8b724cd"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ1ODMxMTI5OnYy", "diffSide": "RIGHT", "path": "pinot-tools/src/main/java/org/apache/pinot/tools/GenericQuickstart.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOVQxNjoxMTo0NFrOIMSyEg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOVQxNjoxMTo0NFrOIMSyEg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTc2MTU1NA==", "bodyText": "GenericQuickstart ->  quickstart cluster or just QuickstartCluster", "url": "https://github.com/apache/pinot/pull/6391#discussion_r549761554", "createdAt": "2020-12-29T16:11:44Z", "author": {"login": "kishoreg"}, "path": "pinot-tools/src/main/java/org/apache/pinot/tools/GenericQuickstart.java", "diffHunk": "@@ -106,19 +106,19 @@ public void execute()\n \n     Runtime.getRuntime().addShutdownHook(new Thread(() -> {\n       try {\n-        printStatus(Color.GREEN, \"***** Shutting down GitHubEventsQuickStart *****\");\n+        printStatus(Color.GREEN, \"***** Shutting down GenericQuickStart *****\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "275e47ee0262be997287cb14607ccc65d8b724cd"}, "originalPosition": 5}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3063, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}