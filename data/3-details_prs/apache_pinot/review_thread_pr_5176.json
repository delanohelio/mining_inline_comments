{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkyNzkzMzE2", "number": 5176, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxNzo1MzozOVrODq6ADQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNFQwMjoxOTozMVrODupNgQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2MzE3MDY5OnYy", "diffSide": "RIGHT", "path": "pinot-core/src/main/java/org/apache/pinot/core/segment/index/readers/text/LuceneTextIndexReader.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxNzo1MzozOVrOF68Y7A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxNzozNzoyMFrOGAgK3Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzM1MTE0OA==", "bodyText": "I'll suggest using\n!textIndexProperties.get(FieldConfig.LUCENE_TEXT_INDEX_ENABLE_QUERY_CACHE).equalsIgnoreCase(\"true\") instead of false, in case someone mis-spells the value.", "url": "https://github.com/apache/pinot/pull/5176#discussion_r397351148", "createdAt": "2020-03-24T17:53:39Z", "author": {"login": "jackjlli"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/segment/index/readers/text/LuceneTextIndexReader.java", "diffHunk": "@@ -59,17 +62,22 @@\n    * similar to how it is done for other types of indexes.\n    * @param column column name\n    * @param segmentIndexDir segment index directory\n+   * @param textIndexProperties text index properties\n    */\n-  public LuceneTextIndexReader(String column, File segmentIndexDir) {\n+  public LuceneTextIndexReader(String column, File segmentIndexDir, @Nullable Map<String, String> textIndexProperties) {\n     _column = column;\n     try {\n       File indexFile = getTextIndexFile(segmentIndexDir);\n       _indexDirectory = FSDirectory.open(indexFile.toPath());\n       _indexReader = DirectoryReader.open(_indexDirectory);\n       _indexSearcher = new IndexSearcher(_indexReader);\n-      // Disable Lucene query result cache. While it helps a lot with performance for\n-      // repeated queries, on the downside it cause heap issues.\n-      _indexSearcher.setQueryCache(null);\n+      if (textIndexProperties == null ||\n+          textIndexProperties.get(FieldConfig.LUCENE_TEXT_INDEX_ENABLE_QUERY_CACHE) == null ||\n+          textIndexProperties.get(FieldConfig.LUCENE_TEXT_INDEX_ENABLE_QUERY_CACHE).equalsIgnoreCase(\"false\")) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6dcae80f3491216fefb94715b7119a5b45f70601"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzE4MDI1Mw==", "bodyText": "done", "url": "https://github.com/apache/pinot/pull/5176#discussion_r403180253", "createdAt": "2020-04-03T17:37:20Z", "author": {"login": "siddharthteotia"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/segment/index/readers/text/LuceneTextIndexReader.java", "diffHunk": "@@ -59,17 +62,22 @@\n    * similar to how it is done for other types of indexes.\n    * @param column column name\n    * @param segmentIndexDir segment index directory\n+   * @param textIndexProperties text index properties\n    */\n-  public LuceneTextIndexReader(String column, File segmentIndexDir) {\n+  public LuceneTextIndexReader(String column, File segmentIndexDir, @Nullable Map<String, String> textIndexProperties) {\n     _column = column;\n     try {\n       File indexFile = getTextIndexFile(segmentIndexDir);\n       _indexDirectory = FSDirectory.open(indexFile.toPath());\n       _indexReader = DirectoryReader.open(_indexDirectory);\n       _indexSearcher = new IndexSearcher(_indexReader);\n-      // Disable Lucene query result cache. While it helps a lot with performance for\n-      // repeated queries, on the downside it cause heap issues.\n-      _indexSearcher.setQueryCache(null);\n+      if (textIndexProperties == null ||\n+          textIndexProperties.get(FieldConfig.LUCENE_TEXT_INDEX_ENABLE_QUERY_CACHE) == null ||\n+          textIndexProperties.get(FieldConfig.LUCENE_TEXT_INDEX_ENABLE_QUERY_CACHE).equalsIgnoreCase(\"false\")) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzM1MTE0OA=="}, "originalCommit": {"oid": "6dcae80f3491216fefb94715b7119a5b45f70601"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2MzE3NDYyOnYy", "diffSide": "RIGHT", "path": "pinot-common/src/main/java/org/apache/pinot/common/config/FieldConfig.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxNzo1NDozOVrOF68bnw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxNzozNzoyNlrOGAgLEg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzM1MTgzOQ==", "bodyText": "Put a comment above this line on how this cached will be used.", "url": "https://github.com/apache/pinot/pull/5176#discussion_r397351839", "createdAt": "2020-03-24T17:54:39Z", "author": {"login": "jackjlli"}, "path": "pinot-common/src/main/java/org/apache/pinot/common/config/FieldConfig.java", "diffHunk": "@@ -32,9 +32,12 @@\n \n   public static String BLOOM_FILTER_COLUMN_KEY = \"field.config.bloom.filter\";\n   public static String ON_HEAP_DICTIONARY_COLUMN_KEY = \"field.config.onheap.dictionary\";\n-  public static String TEXT_INDEX_REALTIME_READER_REFRESH_KEY = \"field.config.realtime.reader.refresh\";\n   public static String VAR_LENGTH_DICTIONARY_COLUMN_KEY = \"field.config.var.length.dictionary\";\n \n+  // Lucene index properties\n+  public static String LUCENE_TEXT_INDEX_REALTIME_READER_REFRESH_KEY = \"field.config.text.index.realtime.reader.refresh\";\n+  public static String LUCENE_TEXT_INDEX_ENABLE_QUERY_CACHE = \"field.config.text.index.enable.query.cache\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6dcae80f3491216fefb94715b7119a5b45f70601"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzE4MDMwNg==", "bodyText": "done", "url": "https://github.com/apache/pinot/pull/5176#discussion_r403180306", "createdAt": "2020-04-03T17:37:26Z", "author": {"login": "siddharthteotia"}, "path": "pinot-common/src/main/java/org/apache/pinot/common/config/FieldConfig.java", "diffHunk": "@@ -32,9 +32,12 @@\n \n   public static String BLOOM_FILTER_COLUMN_KEY = \"field.config.bloom.filter\";\n   public static String ON_HEAP_DICTIONARY_COLUMN_KEY = \"field.config.onheap.dictionary\";\n-  public static String TEXT_INDEX_REALTIME_READER_REFRESH_KEY = \"field.config.realtime.reader.refresh\";\n   public static String VAR_LENGTH_DICTIONARY_COLUMN_KEY = \"field.config.var.length.dictionary\";\n \n+  // Lucene index properties\n+  public static String LUCENE_TEXT_INDEX_REALTIME_READER_REFRESH_KEY = \"field.config.text.index.realtime.reader.refresh\";\n+  public static String LUCENE_TEXT_INDEX_ENABLE_QUERY_CACHE = \"field.config.text.index.enable.query.cache\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzM1MTgzOQ=="}, "originalCommit": {"oid": "6dcae80f3491216fefb94715b7119a5b45f70601"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2MzE3OTAzOnYy", "diffSide": "RIGHT", "path": "pinot-core/src/test/java/org/apache/pinot/queries/TestTextSearchQueries.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxNzo1NTo0OVrOF68egQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxNzo0MDoyN1rOGAgVOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzM1MjU3Nw==", "bodyText": "putIfAbsent", "url": "https://github.com/apache/pinot/pull/5176#discussion_r397352577", "createdAt": "2020-03-24T17:55:49Z", "author": {"login": "jackjlli"}, "path": "pinot-core/src/test/java/org/apache/pinot/queries/TestTextSearchQueries.java", "diffHunk": "@@ -160,7 +162,11 @@ private void createSegment()\n   private void loadSegment()\n       throws Exception {\n     IndexLoadingConfig indexLoadingConfig = new IndexLoadingConfig();\n-    indexLoadingConfig.setTextIndexColumns(new HashSet<>(textIndexColumns));\n+    Map<String, Map<String, String>> textIndexColumnsWithProperties = new HashMap<>();\n+    for (String column : textIndexColumns) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6dcae80f3491216fefb94715b7119a5b45f70601"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzE4MjkwNA==", "bodyText": "this change not needed anymore", "url": "https://github.com/apache/pinot/pull/5176#discussion_r403182904", "createdAt": "2020-04-03T17:40:27Z", "author": {"login": "siddharthteotia"}, "path": "pinot-core/src/test/java/org/apache/pinot/queries/TestTextSearchQueries.java", "diffHunk": "@@ -160,7 +162,11 @@ private void createSegment()\n   private void loadSegment()\n       throws Exception {\n     IndexLoadingConfig indexLoadingConfig = new IndexLoadingConfig();\n-    indexLoadingConfig.setTextIndexColumns(new HashSet<>(textIndexColumns));\n+    Map<String, Map<String, String>> textIndexColumnsWithProperties = new HashMap<>();\n+    for (String column : textIndexColumns) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzM1MjU3Nw=="}, "originalCommit": {"oid": "6dcae80f3491216fefb94715b7119a5b45f70601"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2MzM0OTA2OnYy", "diffSide": "RIGHT", "path": "pinot-common/src/main/java/org/apache/pinot/common/config/FieldConfig.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxODo0MTo1NlrOF6-NhQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxNzozNzozNFrOGAgLgA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzM4MDk5Nw==", "bodyText": "Not related to this but can we remove the field.config. prefix from all these keys?", "url": "https://github.com/apache/pinot/pull/5176#discussion_r397380997", "createdAt": "2020-03-24T18:41:56Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-common/src/main/java/org/apache/pinot/common/config/FieldConfig.java", "diffHunk": "@@ -32,9 +32,12 @@\n \n   public static String BLOOM_FILTER_COLUMN_KEY = \"field.config.bloom.filter\";\n   public static String ON_HEAP_DICTIONARY_COLUMN_KEY = \"field.config.onheap.dictionary\";\n-  public static String TEXT_INDEX_REALTIME_READER_REFRESH_KEY = \"field.config.realtime.reader.refresh\";\n   public static String VAR_LENGTH_DICTIONARY_COLUMN_KEY = \"field.config.var.length.dictionary\";\n \n+  // Lucene index properties\n+  public static String LUCENE_TEXT_INDEX_REALTIME_READER_REFRESH_KEY = \"field.config.text.index.realtime.reader.refresh\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6dcae80f3491216fefb94715b7119a5b45f70601"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzE4MDQxNg==", "bodyText": "done", "url": "https://github.com/apache/pinot/pull/5176#discussion_r403180416", "createdAt": "2020-04-03T17:37:34Z", "author": {"login": "siddharthteotia"}, "path": "pinot-common/src/main/java/org/apache/pinot/common/config/FieldConfig.java", "diffHunk": "@@ -32,9 +32,12 @@\n \n   public static String BLOOM_FILTER_COLUMN_KEY = \"field.config.bloom.filter\";\n   public static String ON_HEAP_DICTIONARY_COLUMN_KEY = \"field.config.onheap.dictionary\";\n-  public static String TEXT_INDEX_REALTIME_READER_REFRESH_KEY = \"field.config.realtime.reader.refresh\";\n   public static String VAR_LENGTH_DICTIONARY_COLUMN_KEY = \"field.config.var.length.dictionary\";\n \n+  // Lucene index properties\n+  public static String LUCENE_TEXT_INDEX_REALTIME_READER_REFRESH_KEY = \"field.config.text.index.realtime.reader.refresh\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzM4MDk5Nw=="}, "originalCommit": {"oid": "6dcae80f3491216fefb94715b7119a5b45f70601"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2MzM2NjI4OnYy", "diffSide": "RIGHT", "path": "pinot-core/src/main/java/org/apache/pinot/core/segment/index/loader/IndexLoadingConfig.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxODo0NzowMVrOF6-ZDA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxNzozODoxM1rOGAgNqw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzM4Mzk0OA==", "bodyText": "Don't put the whole map here. The map contains all the properties, not for text column only. I think you can keep this config unchanged, but check the field config when loading the text index.", "url": "https://github.com/apache/pinot/pull/5176#discussion_r397383948", "createdAt": "2020-03-24T18:47:01Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/segment/index/loader/IndexLoadingConfig.java", "diffHunk": "@@ -45,7 +45,7 @@\n   private ReadMode _readMode = ReadMode.DEFAULT_MODE;\n   private List<String> _sortedColumns = Collections.emptyList();\n   private Set<String> _invertedIndexColumns = new HashSet<>();\n-  private Set<String> _textIndexColumns = new HashSet<>();\n+  private Map<String, Map<String, String>> _textIndexColumns = new HashMap<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6dcae80f3491216fefb94715b7119a5b45f70601"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzE4MDk3MQ==", "bodyText": "Done. Btw, FieldConfig contains a properties map Map<String, String> per column", "url": "https://github.com/apache/pinot/pull/5176#discussion_r403180971", "createdAt": "2020-04-03T17:38:13Z", "author": {"login": "siddharthteotia"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/segment/index/loader/IndexLoadingConfig.java", "diffHunk": "@@ -45,7 +45,7 @@\n   private ReadMode _readMode = ReadMode.DEFAULT_MODE;\n   private List<String> _sortedColumns = Collections.emptyList();\n   private Set<String> _invertedIndexColumns = new HashSet<>();\n-  private Set<String> _textIndexColumns = new HashSet<>();\n+  private Map<String, Map<String, String>> _textIndexColumns = new HashMap<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzM4Mzk0OA=="}, "originalCommit": {"oid": "6dcae80f3491216fefb94715b7119a5b45f70601"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwMjM1NjA3OnYy", "diffSide": "RIGHT", "path": "pinot-core/src/main/java/org/apache/pinot/core/segment/index/readers/text/LuceneTextIndexReader.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNFQwMjoxMToyOVrOGAuMnw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxNzo1NzowNFrOGBjbeg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQxMDA3OQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  if (textIndexProperties == null || textIndexProperties.get(FieldConfig.TEXT_INDEX_ENABLE_QUERY_CACHE) == null\n          \n          \n            \n                  if (textIndexProperties == null || !Boolean.parseBoolean(textIndexProperties.get(FieldConfig.TEXT_INDEX_ENABLE_QUERY_CACHE))) {", "url": "https://github.com/apache/pinot/pull/5176#discussion_r403410079", "createdAt": "2020-04-04T02:11:29Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/segment/index/readers/text/LuceneTextIndexReader.java", "diffHunk": "@@ -67,16 +69,20 @@\n    * @param indexDir segment index directory\n    * @param numDocs number of documents in the segment\n    */\n-  public LuceneTextIndexReader(String column, File indexDir, int numDocs) {\n+  public LuceneTextIndexReader(String column, File indexDir, int numDocs,\n+      @Nullable Map<String, String> textIndexProperties) {\n     _column = column;\n     try {\n       File indexFile = getTextIndexFile(indexDir);\n       _indexDirectory = FSDirectory.open(indexFile.toPath());\n       _indexReader = DirectoryReader.open(_indexDirectory);\n       _indexSearcher = new IndexSearcher(_indexReader);\n-      // Disable Lucene query result cache. While it helps a lot with performance for\n-      // repeated queries, on the downside it cause heap issues.\n-      _indexSearcher.setQueryCache(null);\n+      if (textIndexProperties == null || textIndexProperties.get(FieldConfig.TEXT_INDEX_ENABLE_QUERY_CACHE) == null", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "96a8d01e44e3beef62d7a30164268bd258b166c4"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDI4MjIzNA==", "bodyText": "done", "url": "https://github.com/apache/pinot/pull/5176#discussion_r404282234", "createdAt": "2020-04-06T17:57:04Z", "author": {"login": "siddharthteotia"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/segment/index/readers/text/LuceneTextIndexReader.java", "diffHunk": "@@ -67,16 +69,20 @@\n    * @param indexDir segment index directory\n    * @param numDocs number of documents in the segment\n    */\n-  public LuceneTextIndexReader(String column, File indexDir, int numDocs) {\n+  public LuceneTextIndexReader(String column, File indexDir, int numDocs,\n+      @Nullable Map<String, String> textIndexProperties) {\n     _column = column;\n     try {\n       File indexFile = getTextIndexFile(indexDir);\n       _indexDirectory = FSDirectory.open(indexFile.toPath());\n       _indexReader = DirectoryReader.open(_indexDirectory);\n       _indexSearcher = new IndexSearcher(_indexReader);\n-      // Disable Lucene query result cache. While it helps a lot with performance for\n-      // repeated queries, on the downside it cause heap issues.\n-      _indexSearcher.setQueryCache(null);\n+      if (textIndexProperties == null || textIndexProperties.get(FieldConfig.TEXT_INDEX_ENABLE_QUERY_CACHE) == null", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQxMDA3OQ=="}, "originalCommit": {"oid": "96a8d01e44e3beef62d7a30164268bd258b166c4"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwMjM2Mjg5OnYy", "diffSide": "RIGHT", "path": "pinot-core/src/main/java/org/apache/pinot/core/segment/index/loader/IndexLoadingConfig.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNFQwMjoxOTozMVrOGAuP4Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxNzo1NzowMlrOGBjbag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQxMDkxMw==", "bodyText": "Suggest renaming it to _columnProperties. Also don't set it inside the extractTextIndexColumnsFromTableConfig(), set it in extractFromTableConfig() so that other index type can also access it.", "url": "https://github.com/apache/pinot/pull/5176#discussion_r403410913", "createdAt": "2020-04-04T02:19:31Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/segment/index/loader/IndexLoadingConfig.java", "diffHunk": "@@ -60,6 +60,9 @@\n   private boolean _isDirectRealtimeOffheapAllocation;\n   private boolean _enableSplitCommitEndWithMetadata;\n \n+  // constructed from FieldConfig\n+  private Map<String, Map<String, String>> _columnsWithProperties;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "96a8d01e44e3beef62d7a30164268bd258b166c4"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDI4MjIxOA==", "bodyText": "done", "url": "https://github.com/apache/pinot/pull/5176#discussion_r404282218", "createdAt": "2020-04-06T17:57:02Z", "author": {"login": "siddharthteotia"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/segment/index/loader/IndexLoadingConfig.java", "diffHunk": "@@ -60,6 +60,9 @@\n   private boolean _isDirectRealtimeOffheapAllocation;\n   private boolean _enableSplitCommitEndWithMetadata;\n \n+  // constructed from FieldConfig\n+  private Map<String, Map<String, String>> _columnsWithProperties;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQxMDkxMw=="}, "originalCommit": {"oid": "96a8d01e44e3beef62d7a30164268bd258b166c4"}, "originalPosition": 5}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3314, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}