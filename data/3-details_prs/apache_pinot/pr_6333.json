{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTM0MjQ3MzQz", "number": 6333, "title": "[TE] frontend - harleyjj/rca - display metric funnel in metrics table\u2026", "bodyText": "\u2026 when forecast selected\nDescription\n\nWhen forecast baseline is selected, metric funnel will be displayed in metric table\nRequires metric/aggregate/chunk endpoint to support baselines: yoy, upper, lower\nFiles updated to comply with Prettier\n'git add' removed from config due to warning", "createdAt": "2020-12-08T08:13:22Z", "url": "https://github.com/apache/pinot/pull/6333", "merged": true, "mergeCommit": {"oid": "68fbb9cef617df6a34c86a344a570c474dbd1a37"}, "closed": true, "closedAt": "2021-01-13T21:14:51Z", "author": {"login": "harleyjj"}, "timelineItems": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdkPnkJAFqTU0NzU2ODMzNQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdv2ZtjAFqTU2NzY1NTQxMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ3NTY4MzM1", "url": "https://github.com/apache/pinot/pull/6333#pullrequestreview-547568335", "createdAt": "2020-12-08T19:38:51Z", "commit": {"oid": "129ecb6451a2737fb68f9f1f3307f08f0e705729"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxOTozODo1MVrOIBy3OA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxOTo0OTo0MVrOIBzRgQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODc1MjgyNA==", "bodyText": "So the funnel table shows up when the forecast is selected, correct?", "url": "https://github.com/apache/pinot/pull/6333#discussion_r538752824", "createdAt": "2020-12-08T19:38:51Z", "author": {"login": "jihaozh"}, "path": "thirdeye/thirdeye-frontend/app/pods/components/rootcause-metrics/component.js", "diffHunk": "@@ -65,10 +55,29 @@ export default Component.extend({\n    */\n   onSelection: null, // function (Set, state)\n \n+  context: null,\n+\n+  compareMode: null, // \"\"\n+\n+  didReceiveAttrs() {\n+    const context = get(this, 'context');\n+\n+    set(this, 'compareMode', (context || {}).compareMode);\n+  },\n+\n   //\n   // internal properties\n   //\n \n+  /**\n+   * Columns for metrics table\n+   * @type Object[]\n+   */\n+  metricsTableColumns: computed('compareMode', function () {\n+    const compareMode = get(this, 'compareMode');\n+    return compareMode === 'forecast' ? METRIC_FUNNEL_COLUMNS : METRICS_TABLE_COLUMNS;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "129ecb6451a2737fb68f9f1f3307f08f0e705729"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODc1OTU1Mw==", "bodyText": "Will the upper and lower make separate calls to get the boundary values? I would prefer to make the boundary values be returned with the forecast values in one call because they are generated by the forecast provider together. I think it is quite expensive to run it 3 times.", "url": "https://github.com/apache/pinot/pull/6333#discussion_r538759553", "createdAt": "2020-12-08T19:49:41Z", "author": {"login": "jihaozh"}, "path": "thirdeye/thirdeye-frontend/app/pods/rootcause/controller.js", "diffHunk": "@@ -305,140 +306,153 @@ export default Controller.extend({\n    * callgraph:        service call graph edges as ranked by the backend\n    *                   (typically displayed in call graph table)\n    */\n-  _contextObserver: observer(\n-    'context',\n-    'entities',\n-    'selectedUrns',\n-    'sizeMetricUrns',\n-    'activeTab',\n-    function () {\n-      const { context, selectedUrns, sizeMetricUrns, entitiesService, timeseriesService, aggregatesService, breakdownsService, scoresService, anomalyFunctionService, callgraphService, activeTab, setupMode } =\n-        getProperties(this, 'context', 'selectedUrns', 'sizeMetricUrns', 'entitiesService', 'timeseriesService', 'aggregatesService', 'breakdownsService', 'scoresService', 'anomalyFunctionService', 'callgraphService', 'activeTab', 'setupMode');\n-      if (!context || !selectedUrns) {\n-        return;\n-      }\n-\n-      if (setupMode === ROOTCAUSE_SETUP_MODE_CONTEXT) {\n-        return;\n-      }\n-\n-      //\n-      // entities\n-      //\n-      const entitiesUrns = new Set([...selectedUrns, ...context.urns, ...context.anomalyUrns]);\n-      entitiesService.request(context, entitiesUrns);\n-\n-      //\n-      // related metrics\n-      //\n-      const anomalyMetricUrns = new Set();\n-      const relatedMetricUrns = new Set();\n-\n-      if (activeTab === ROOTCAUSE_TAB_METRICS\n-          || activeTab === ROOTCAUSE_TAB_TREND) {\n-        const entities = get(this, 'entitiesService.entities'); // cache may be stale, fetch directly\n-        filterPrefix(Object.keys(entities), 'thirdeye:metric:').forEach(urn => relatedMetricUrns.add(urn));\n-      }\n+  _contextObserver: observer('context', 'entities', 'selectedUrns', 'sizeMetricUrns', 'activeTab', function () {\n+    const {\n+      context,\n+      selectedUrns,\n+      sizeMetricUrns,\n+      entitiesService,\n+      timeseriesService,\n+      aggregatesService,\n+      breakdownsService,\n+      scoresService,\n+      anomalyFunctionService,\n+      callgraphService,\n+      activeTab,\n+      setupMode\n+    } = getProperties(\n+      this,\n+      'context',\n+      'selectedUrns',\n+      'sizeMetricUrns',\n+      'entitiesService',\n+      'timeseriesService',\n+      'aggregatesService',\n+      'breakdownsService',\n+      'scoresService',\n+      'anomalyFunctionService',\n+      'callgraphService',\n+      'activeTab',\n+      'setupMode'\n+    );\n+    if (!context || !selectedUrns) {\n+      return;\n+    }\n \n-      if (context.anomalyUrns.size > 0) {\n-        filterPrefix(context.anomalyUrns, 'thirdeye:metric:').forEach(urn => anomalyMetricUrns.add(urn));\n-      }\n+    if (setupMode === ROOTCAUSE_SETUP_MODE_CONTEXT) {\n+      return;\n+    }\n \n-      //\n-      // timeseries\n-      //\n-      const timeseriesUrns = new Set(selectedUrns);\n+    //\n+    // entities\n+    //\n+    const entitiesUrns = new Set([...selectedUrns, ...context.urns, ...context.anomalyUrns]);\n+    entitiesService.request(context, entitiesUrns);\n+\n+    //\n+    // related metrics\n+    //\n+    const anomalyMetricUrns = new Set();\n+    const relatedMetricUrns = new Set();\n+\n+    if (activeTab === ROOTCAUSE_TAB_METRICS || activeTab === ROOTCAUSE_TAB_TREND) {\n+      const entities = get(this, 'entitiesService.entities'); // cache may be stale, fetch directly\n+      filterPrefix(Object.keys(entities), 'thirdeye:metric:').forEach((urn) => relatedMetricUrns.add(urn));\n+    }\n \n-      if (activeTab === ROOTCAUSE_TAB_TREND) {\n-        [...relatedMetricUrns].forEach(urn => {\n-          timeseriesUrns.add(toCurrentUrn(urn));\n-          timeseriesUrns.add(toBaselineUrn(urn));\n-        });\n-      }\n+    if (context.anomalyUrns.size > 0) {\n+      filterPrefix(context.anomalyUrns, 'thirdeye:metric:').forEach((urn) => anomalyMetricUrns.add(urn));\n+    }\n \n-      timeseriesService.request(context, timeseriesUrns);\n-\n-      //\n-      // anomaly function baselines\n-      //\n-      const anomalyFunctionUrns = filterPrefix(context.anomalyUrns, 'thirdeye:event:anomaly');\n-      anomalyFunctionService.request(context, new Set(anomalyFunctionUrns));\n-\n-      //\n-      // breakdowns\n-      //\n-      if (activeTab === ROOTCAUSE_TAB_DIMENSIONS) {\n-        const metricUrns = new Set(filterPrefix(context.urns, 'thirdeye:metric:'));\n-        const currentUrns = [...metricUrns].map(toCurrentUrn);\n-        const baselineUrns = [...metricUrns].map(toBaselineUrn);\n-        const sizeMetricCurrentUrns = [...sizeMetricUrns].map(toCurrentUrn);\n-        breakdownsService.request(context, new Set(currentUrns.concat(baselineUrns).concat(sizeMetricCurrentUrns)));\n-      }\n+    //\n+    // timeseries\n+    //\n+    const timeseriesUrns = new Set(selectedUrns);\n \n-      //\n-      // scores\n-      //\n-      if (activeTab === ROOTCAUSE_TAB_METRICS) {\n-        const scoresUrns = new Set(relatedMetricUrns);\n-        scoresService.request(context, new Set(scoresUrns));\n-      }\n+    if (activeTab === ROOTCAUSE_TAB_TREND) {\n+      [...relatedMetricUrns].forEach((urn) => {\n+        timeseriesUrns.add(toCurrentUrn(urn));\n+        timeseriesUrns.add(toBaselineUrn(urn));\n+      });\n+    }\n \n-      //\n-      // aggregates\n-      //\n-      const offsets = ['current', 'baseline', 'wo1w', 'wo2w'];\n-      const offsetUrns = [...relatedMetricUrns]\n-        .map(urn => [].concat(offsets.map(offset => toOffsetUrn(urn, offset))))\n-        .reduce((agg, l) => agg.concat(l), []);\n-\n-      const anomalyOffsets = ['current', 'baseline', 'wo1w', 'wo2w', 'wo3w', 'wo4w'];\n-      const anomalyOffsetUrns = [...anomalyMetricUrns]\n-        .map(urn => [].concat(anomalyOffsets.map(offset => toOffsetUrn(urn, offset))))\n-        .reduce((agg, l) => agg.concat(l), []);\n-\n-      //\n-      // call graph\n-      //\n-      if (activeTab === ROOTCAUSE_SERVICE_CALLGRAPH) {\n-        callgraphService.request(context, [...context.urns]);\n-      }\n+    timeseriesService.request(context, timeseriesUrns);\n+\n+    //\n+    // anomaly function baselines\n+    //\n+    const anomalyFunctionUrns = filterPrefix(context.anomalyUrns, 'thirdeye:event:anomaly');\n+    anomalyFunctionService.request(context, new Set(anomalyFunctionUrns));\n+\n+    //\n+    // breakdowns\n+    //\n+    if (activeTab === ROOTCAUSE_TAB_DIMENSIONS) {\n+      const metricUrns = new Set(filterPrefix(context.urns, 'thirdeye:metric:'));\n+      const currentUrns = [...metricUrns].map(toCurrentUrn);\n+      const baselineUrns = [...metricUrns].map(toBaselineUrn);\n+      const sizeMetricCurrentUrns = [...sizeMetricUrns].map(toCurrentUrn);\n+      breakdownsService.request(context, new Set(currentUrns.concat(baselineUrns).concat(sizeMetricCurrentUrns)));\n+    }\n \n-      aggregatesService.request(context, new Set([...offsetUrns, ...anomalyOffsetUrns]));\n+    //\n+    // scores\n+    //\n+    if (activeTab === ROOTCAUSE_TAB_METRICS) {\n+      const scoresUrns = new Set(relatedMetricUrns);\n+      scoresService.request(context, new Set(scoresUrns));\n+    }\n \n+    //\n+    // aggregates\n+    //\n+    const offsets =\n+      context.compareMode === 'forecast'\n+        ? ['current', 'baseline', 'yoy', 'upper', 'lower']", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "129ecb6451a2737fb68f9f1f3307f08f0e705729"}, "originalPosition": 243}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ3NjY4Njcz", "url": "https://github.com/apache/pinot/pull/6333#pullrequestreview-547668673", "createdAt": "2020-12-08T22:01:08Z", "commit": {"oid": "129ecb6451a2737fb68f9f1f3307f08f0e705729"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQyMjowMTowOFrOIB4K8g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQyMjowODozOFrOIB4cfQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODgzOTc5NA==", "bodyText": "This comparison is happening twice in this file; so it would be better to constantize forecast so any change to the string need to happen just once.\nconst FORECAST_MODE = 'forecast'", "url": "https://github.com/apache/pinot/pull/6333#discussion_r538839794", "createdAt": "2020-12-08T22:01:08Z", "author": {"login": "tejasajmera"}, "path": "thirdeye/thirdeye-frontend/app/pods/components/rootcause-metrics/component.js", "diffHunk": "@@ -82,74 +91,91 @@ export default Component.extend({\n    *  ]\n    * }\n    */\n-  links: computed(\n-    'entities',\n-    function() {\n-      const { entities } = getProperties(this, 'entities');\n-      let metricUrlMapping = {};\n-\n-      filterPrefix(Object.keys(entities), 'thirdeye:metric:')\n-        .forEach(urn => {\n-          const attributes = entities[urn].attributes;\n-          const { externalUrls = [] } = attributes;\n-          let urlArr = [];\n-\n-          // Add the list of urls for each url type\n-          externalUrls.forEach(urlLabel => {\n-            urlArr.push({\n-              [urlLabel]: attributes[urlLabel][0] // each type should only have 1 url\n-            });\n-          });\n-\n-          // Map all the url lists to a metric urn\n-          metricUrlMapping[urn] = urlArr;\n+  links: computed('entities', function () {\n+    const { entities } = getProperties(this, 'entities');\n+    let metricUrlMapping = {};\n+\n+    filterPrefix(Object.keys(entities), 'thirdeye:metric:').forEach((urn) => {\n+      const attributes = entities[urn].attributes;\n+      const { externalUrls = [] } = attributes;\n+      let urlArr = [];\n+\n+      // Add the list of urls for each url type\n+      externalUrls.forEach((urlLabel) => {\n+        urlArr.push({\n+          [urlLabel]: attributes[urlLabel][0] // each type should only have 1 url\n         });\n+      });\n \n-      return metricUrlMapping;\n-    }\n-  ),\n+      // Map all the url lists to a metric urn\n+      metricUrlMapping[urn] = urlArr;\n+    });\n+\n+    return metricUrlMapping;\n+  }),\n \n   /**\n    * Data for metrics table\n    * @type Object[] - array of objects, each corresponding to a row in the table\n    */\n-  metricsTableData: computed(\n-    'selectedUrns',\n-    'entities',\n-    'aggregates',\n-    'scores',\n-    'links',\n-    function() {\n-      const { selectedUrns, entities, aggregates, scores, links } =\n-        getProperties(this, 'selectedUrns', 'entities', 'aggregates', 'scores', 'links');\n-\n-      const rows = filterPrefix(Object.keys(entities), 'thirdeye:metric:')\n-        .map(urn => {\n-          return {\n-            urn,\n-            links: links[urn],\n-            isSelected: selectedUrns.has(urn),\n-            label: toMetricLabel(urn, entities),\n-            dataset: toMetricDataset(urn, entities),\n-            score: humanizeScore(scores[urn]),\n-            current: this._makeRecord(urn, 'current', entities, aggregates),\n-            baseline: this._makeRecord(urn, 'baseline', entities, aggregates),\n-            wo1w: this._makeRecord(urn, 'wo1w', entities, aggregates),\n-            wo2w: this._makeRecord(urn, 'wo2w', entities, aggregates),\n-            sortable_current: this._makeChange(urn, 'current', aggregates),\n-            sortable_baseline: this._makeChange(urn, 'baseline', aggregates),\n-            sortable_wo1w: this._makeChange(urn, 'wo1w', aggregates),\n-            sortable_wo2w: this._makeChange(urn, 'wo2w', aggregates),\n-            isExclusionWarning: isExclusionWarning(urn, entities)\n-          };\n-        });\n+  metricsTableData: computed('selectedUrns', 'entities', 'aggregates', 'scores', 'links', 'compareMode', function () {\n+    const { selectedUrns, entities, aggregates, scores, links, compareMode } = getProperties(\n+      this,\n+      'selectedUrns',\n+      'entities',\n+      'aggregates',\n+      'scores',\n+      'links',\n+      'compareMode'\n+    );\n+    let rows;\n \n-      return _.sortBy(rows, (row) => row.label);\n+    if (compareMode === 'forecast') {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "129ecb6451a2737fb68f9f1f3307f08f0e705729"}, "originalPosition": 161}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODg0NDI4NQ==", "bodyText": "urn, isSelected, label, dataset, score, current, baseline, isExclusionWarning properties are same in both the if and else sections. Lets pull those out into a common object before the if..else and destructure that object in return in both if..else before proceeding to add unique properties in each.", "url": "https://github.com/apache/pinot/pull/6333#discussion_r538844285", "createdAt": "2020-12-08T22:08:38Z", "author": {"login": "tejasajmera"}, "path": "thirdeye/thirdeye-frontend/app/pods/components/rootcause-metrics/component.js", "diffHunk": "@@ -82,74 +91,91 @@ export default Component.extend({\n    *  ]\n    * }\n    */\n-  links: computed(\n-    'entities',\n-    function() {\n-      const { entities } = getProperties(this, 'entities');\n-      let metricUrlMapping = {};\n-\n-      filterPrefix(Object.keys(entities), 'thirdeye:metric:')\n-        .forEach(urn => {\n-          const attributes = entities[urn].attributes;\n-          const { externalUrls = [] } = attributes;\n-          let urlArr = [];\n-\n-          // Add the list of urls for each url type\n-          externalUrls.forEach(urlLabel => {\n-            urlArr.push({\n-              [urlLabel]: attributes[urlLabel][0] // each type should only have 1 url\n-            });\n-          });\n-\n-          // Map all the url lists to a metric urn\n-          metricUrlMapping[urn] = urlArr;\n+  links: computed('entities', function () {\n+    const { entities } = getProperties(this, 'entities');\n+    let metricUrlMapping = {};\n+\n+    filterPrefix(Object.keys(entities), 'thirdeye:metric:').forEach((urn) => {\n+      const attributes = entities[urn].attributes;\n+      const { externalUrls = [] } = attributes;\n+      let urlArr = [];\n+\n+      // Add the list of urls for each url type\n+      externalUrls.forEach((urlLabel) => {\n+        urlArr.push({\n+          [urlLabel]: attributes[urlLabel][0] // each type should only have 1 url\n         });\n+      });\n \n-      return metricUrlMapping;\n-    }\n-  ),\n+      // Map all the url lists to a metric urn\n+      metricUrlMapping[urn] = urlArr;\n+    });\n+\n+    return metricUrlMapping;\n+  }),\n \n   /**\n    * Data for metrics table\n    * @type Object[] - array of objects, each corresponding to a row in the table\n    */\n-  metricsTableData: computed(\n-    'selectedUrns',\n-    'entities',\n-    'aggregates',\n-    'scores',\n-    'links',\n-    function() {\n-      const { selectedUrns, entities, aggregates, scores, links } =\n-        getProperties(this, 'selectedUrns', 'entities', 'aggregates', 'scores', 'links');\n-\n-      const rows = filterPrefix(Object.keys(entities), 'thirdeye:metric:')\n-        .map(urn => {\n-          return {\n-            urn,\n-            links: links[urn],\n-            isSelected: selectedUrns.has(urn),\n-            label: toMetricLabel(urn, entities),\n-            dataset: toMetricDataset(urn, entities),\n-            score: humanizeScore(scores[urn]),\n-            current: this._makeRecord(urn, 'current', entities, aggregates),\n-            baseline: this._makeRecord(urn, 'baseline', entities, aggregates),\n-            wo1w: this._makeRecord(urn, 'wo1w', entities, aggregates),\n-            wo2w: this._makeRecord(urn, 'wo2w', entities, aggregates),\n-            sortable_current: this._makeChange(urn, 'current', aggregates),\n-            sortable_baseline: this._makeChange(urn, 'baseline', aggregates),\n-            sortable_wo1w: this._makeChange(urn, 'wo1w', aggregates),\n-            sortable_wo2w: this._makeChange(urn, 'wo2w', aggregates),\n-            isExclusionWarning: isExclusionWarning(urn, entities)\n-          };\n-        });\n+  metricsTableData: computed('selectedUrns', 'entities', 'aggregates', 'scores', 'links', 'compareMode', function () {\n+    const { selectedUrns, entities, aggregates, scores, links, compareMode } = getProperties(\n+      this,\n+      'selectedUrns',\n+      'entities',\n+      'aggregates',\n+      'scores',\n+      'links',\n+      'compareMode'\n+    );\n+    let rows;\n \n-      return _.sortBy(rows, (row) => row.label);\n+    if (compareMode === 'forecast') {\n+      rows = filterPrefix(Object.keys(entities), 'thirdeye:metric:').map((urn) => {\n+        return {\n+          urn,\n+          isSelected: selectedUrns.has(urn),\n+          label: toMetricLabel(urn, entities),\n+          dataset: toMetricDataset(urn, entities),\n+          score: humanizeScore(scores[urn]),\n+          current: this._makeRecord(urn, 'current', entities, aggregates),\n+          baseline: this._makeRecord(urn, 'baseline', entities, aggregates),\n+          yoy: this._makeRecord(urn, 'yoy', entities, aggregates),\n+          interval: this._makeIntervalString(urn, aggregates),\n+          inInterval: this._isInInterval(urn, aggregates),\n+          sortable_current: this._makeChange(urn, 'current', aggregates),\n+          sortable_baseline: this._makeChange(urn, 'baseline', aggregates),\n+          sortable_yoy: this._makeChange(urn, 'yoy', aggregates),\n+          isExclusionWarning: isExclusionWarning(urn, entities)\n+        };\n+      });\n+    } else {\n+      rows = filterPrefix(Object.keys(entities), 'thirdeye:metric:').map((urn) => {\n+        return {\n+          urn,\n+          links: links[urn],\n+          isSelected: selectedUrns.has(urn),\n+          label: toMetricLabel(urn, entities),\n+          dataset: toMetricDataset(urn, entities),\n+          score: humanizeScore(scores[urn]),\n+          current: this._makeRecord(urn, 'current', entities, aggregates),\n+          baseline: this._makeRecord(urn, 'baseline', entities, aggregates),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "129ecb6451a2737fb68f9f1f3307f08f0e705729"}, "originalPosition": 190}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "129ecb6451a2737fb68f9f1f3307f08f0e705729", "author": {"user": {"login": "harleyjj", "name": "Harley Jackson"}}, "url": "https://github.com/apache/pinot/commit/129ecb6451a2737fb68f9f1f3307f08f0e705729", "committedDate": "2020-12-08T08:08:37Z", "message": "[TE] frontend - harleyjj/rca - display metric funnel in metrics table when forecast selected"}, "afterCommit": {"oid": "6cf391f723c04199cfbe8aeb3a866feac72d44d1", "author": {"user": {"login": "harleyjj", "name": "Harley Jackson"}}, "url": "https://github.com/apache/pinot/commit/6cf391f723c04199cfbe8aeb3a866feac72d44d1", "committedDate": "2020-12-13T05:26:23Z", "message": "[TE] frontend - harleyjj/rca - display metric funnel in metrics table when forecast selected"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "6cf391f723c04199cfbe8aeb3a866feac72d44d1", "author": {"user": {"login": "harleyjj", "name": "Harley Jackson"}}, "url": "https://github.com/apache/pinot/commit/6cf391f723c04199cfbe8aeb3a866feac72d44d1", "committedDate": "2020-12-13T05:26:23Z", "message": "[TE] frontend - harleyjj/rca - display metric funnel in metrics table when forecast selected"}, "afterCommit": {"oid": "1491808290da8a5c111b59b145c0f443c28b4aaf", "author": {"user": {"login": "harleyjj", "name": "Harley Jackson"}}, "url": "https://github.com/apache/pinot/commit/1491808290da8a5c111b59b145c0f443c28b4aaf", "committedDate": "2021-01-12T08:00:08Z", "message": "[TE] frontend - harleyjj/rca - display metric funnel in metrics table when forecast selected"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTY2ODEwNzA2", "url": "https://github.com/apache/pinot/pull/6333#pullrequestreview-566810706", "createdAt": "2021-01-13T00:36:54Z", "commit": {"oid": "1491808290da8a5c111b59b145c0f443c28b4aaf"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xM1QwMDozNjo1NFrOISa-GA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xM1QwMDo1MTowMlrOISbP4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjE4NzE2MA==", "bodyText": "It is better to add the type to avoid the type issue.", "url": "https://github.com/apache/pinot/pull/6333#discussion_r556187160", "createdAt": "2021-01-13T00:36:54Z", "author": {"login": "zhangloo333"}, "path": "thirdeye/thirdeye-frontend/app/pods/components/rootcause-metrics/component.js", "diffHunk": "@@ -65,10 +56,29 @@ export default Component.extend({\n    */\n   onSelection: null, // function (Set, state)\n \n+  context: null,\n+\n+  compareMode: null, // \"\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1491808290da8a5c111b59b145c0f443c28b4aaf"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjE4ODEyOQ==", "bodyText": "This seems like a map function.\nconst urlArr = externalUrls.map((urlLabel)=>{return [urlLabel]: attributes[urlLabel][0]})", "url": "https://github.com/apache/pinot/pull/6333#discussion_r556188129", "createdAt": "2021-01-13T00:39:51Z", "author": {"login": "zhangloo333"}, "path": "thirdeye/thirdeye-frontend/app/pods/components/rootcause-metrics/component.js", "diffHunk": "@@ -82,74 +92,91 @@ export default Component.extend({\n    *  ]\n    * }\n    */\n-  links: computed(\n-    'entities',\n-    function() {\n-      const { entities } = getProperties(this, 'entities');\n-      let metricUrlMapping = {};\n-\n-      filterPrefix(Object.keys(entities), 'thirdeye:metric:')\n-        .forEach(urn => {\n-          const attributes = entities[urn].attributes;\n-          const { externalUrls = [] } = attributes;\n-          let urlArr = [];\n-\n-          // Add the list of urls for each url type\n-          externalUrls.forEach(urlLabel => {\n-            urlArr.push({\n-              [urlLabel]: attributes[urlLabel][0] // each type should only have 1 url\n-            });\n-          });\n-\n-          // Map all the url lists to a metric urn\n-          metricUrlMapping[urn] = urlArr;\n+  links: computed('entities', function () {\n+    const { entities } = getProperties(this, 'entities');\n+    let metricUrlMapping = {};\n+\n+    filterPrefix(Object.keys(entities), 'thirdeye:metric:').forEach((urn) => {\n+      const attributes = entities[urn].attributes;\n+      const { externalUrls = [] } = attributes;\n+      let urlArr = [];\n+\n+      // Add the list of urls for each url type\n+      externalUrls.forEach((urlLabel) => {\n+        urlArr.push({\n+          [urlLabel]: attributes[urlLabel][0] // each type should only have 1 url\n         });\n+      });", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1491808290da8a5c111b59b145c0f443c28b4aaf"}, "originalPosition": 103}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjE4OTIyMg==", "bodyText": "it's better to add TODO and Jira Ticket to trace.", "url": "https://github.com/apache/pinot/pull/6333#discussion_r556189222", "createdAt": "2021-01-13T00:43:09Z", "author": {"login": "zhangloo333"}, "path": "thirdeye/thirdeye-frontend/app/pods/components/rootcause-metrics/component.js", "diffHunk": "@@ -189,10 +251,10 @@ export default Component.extend({\n    * @type {Array}\n    */\n   preselectedItems: computed({\n-    get () {\n+    get() {\n       return [];\n     },\n-    set () {\n+    set() {\n       // ignore\n     }\n   }),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1491808290da8a5c111b59b145c0f443c28b4aaf"}, "originalPosition": 267}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjE4OTk3OA==", "bodyText": "You can optimize the code.\nif(_.isEmpty(e.selectedItems) || !onSelection) return", "url": "https://github.com/apache/pinot/pull/6333#discussion_r556189978", "createdAt": "2021-01-13T00:45:31Z", "author": {"login": "zhangloo333"}, "path": "thirdeye/thirdeye-frontend/app/pods/components/rootcause-metrics/component.js", "diffHunk": "@@ -203,17 +265,21 @@ export default Component.extend({\n      * Updates the currently selected urns based on user selection on the table\n      * @param {Object} e\n      */\n-    displayDataChanged (e) {\n-      if (_.isEmpty(e.selectedItems)) { return; }\n+    displayDataChanged(e) {\n+      if (_.isEmpty(e.selectedItems)) {\n+        return;\n+      }\n \n       const { selectedUrns, onSelection } = getProperties(this, 'selectedUrns', 'onSelection');\n \n-      if (!onSelection) { return; }\n+      if (!onSelection) {\n+        return;\n+      }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1491808290da8a5c111b59b145c0f443c28b4aaf"}, "originalPosition": 284}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjE5MDY2OQ==", "bodyText": "Why not give aggregates value of {} property level?", "url": "https://github.com/apache/pinot/pull/6333#discussion_r556190669", "createdAt": "2021-01-13T00:47:44Z", "author": {"login": "zhangloo333"}, "path": "thirdeye/thirdeye-frontend/app/pods/services/rootcause-aggregates-cache/service.js", "diffHunk": "@@ -28,7 +23,7 @@ export default Service.extend({\n \n   init() {\n     this._super(...arguments);\n-    this.setProperties({aggregates: {}, context: {}, pending: new Set(), errors: new Set()});\n+    this.setProperties({ aggregates: {}, context: {}, pending: new Set(), errors: new Set() });", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1491808290da8a5c111b59b145c0f443c28b4aaf"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjE5MTcxNQ==", "bodyText": "Why use two maps function here? One map could finish the result and will increase efficiency.", "url": "https://github.com/apache/pinot/pull/6333#discussion_r556191715", "createdAt": "2021-01-13T00:51:02Z", "author": {"login": "zhangloo333"}, "path": "thirdeye/thirdeye-frontend/app/pods/services/rootcause-aggregates-cache/service.js", "diffHunk": "@@ -68,34 +67,34 @@ export default Service.extend({\n \n     // group by metrics and offsets\n     const groupedByUrn = [...missing]\n-      .map(urn => toAbsoluteUrn(urn, requestContext.compareMode))\n-      .map(urn => { return { urn, base: toMetricUrn(urn), offset: urn.split(':')[2] }; })\n+      .map((urn) => toAbsoluteUrn(urn, requestContext.compareMode))\n+      .map((urn) => {\n+        return { urn, base: toMetricUrn(urn), offset: urn.split(':')[2] };\n+      })", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1491808290da8a5c111b59b145c0f443c28b4aaf"}, "originalPosition": 65}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "1491808290da8a5c111b59b145c0f443c28b4aaf", "author": {"user": {"login": "harleyjj", "name": "Harley Jackson"}}, "url": "https://github.com/apache/pinot/commit/1491808290da8a5c111b59b145c0f443c28b4aaf", "committedDate": "2021-01-12T08:00:08Z", "message": "[TE] frontend - harleyjj/rca - display metric funnel in metrics table when forecast selected"}, "afterCommit": {"oid": "755df8f2660441acd57fe087f94d872bc4d60451", "author": {"user": {"login": "harleyjj", "name": "Harley Jackson"}}, "url": "https://github.com/apache/pinot/commit/755df8f2660441acd57fe087f94d872bc4d60451", "committedDate": "2021-01-13T04:21:45Z", "message": "[TE] frontend - harleyjj/rca - display metric funnel in metrics table when forecast selected"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTY3NDY2MDA3", "url": "https://github.com/apache/pinot/pull/6333#pullrequestreview-567466007", "createdAt": "2021-01-13T17:38:56Z", "commit": {"oid": "755df8f2660441acd57fe087f94d872bc4d60451"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6aef44789922b9b1fc9fc2fac2c571bb67a211ea", "author": {"user": {"login": "harleyjj", "name": "Harley Jackson"}}, "url": "https://github.com/apache/pinot/commit/6aef44789922b9b1fc9fc2fac2c571bb67a211ea", "committedDate": "2021-01-13T18:45:22Z", "message": "[TE] frontend - harleyjj/rca - display metric funnel in metrics table when forecast selected"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "755df8f2660441acd57fe087f94d872bc4d60451", "author": {"user": {"login": "harleyjj", "name": "Harley Jackson"}}, "url": "https://github.com/apache/pinot/commit/755df8f2660441acd57fe087f94d872bc4d60451", "committedDate": "2021-01-13T04:21:45Z", "message": "[TE] frontend - harleyjj/rca - display metric funnel in metrics table when forecast selected"}, "afterCommit": {"oid": "6aef44789922b9b1fc9fc2fac2c571bb67a211ea", "author": {"user": {"login": "harleyjj", "name": "Harley Jackson"}}, "url": "https://github.com/apache/pinot/commit/6aef44789922b9b1fc9fc2fac2c571bb67a211ea", "committedDate": "2021-01-13T18:45:22Z", "message": "[TE] frontend - harleyjj/rca - display metric funnel in metrics table when forecast selected"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTY3NjAxMzk0", "url": "https://github.com/apache/pinot/pull/6333#pullrequestreview-567601394", "createdAt": "2021-01-13T20:42:03Z", "commit": {"oid": "6aef44789922b9b1fc9fc2fac2c571bb67a211ea"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTY3NjU1NDEx", "url": "https://github.com/apache/pinot/pull/6333#pullrequestreview-567655411", "createdAt": "2021-01-13T21:14:38Z", "commit": {"oid": "6aef44789922b9b1fc9fc2fac2c571bb67a211ea"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1624, "cost": 1, "resetAt": "2021-10-28T18:00:02Z"}}}