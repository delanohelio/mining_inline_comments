{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM2MzM0NTQ1", "number": 5587, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQyMzoxMTowNlrOEIjvwg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQwNDozODozNFrOEJiCkA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3NDA5NzMwOnYy", "diffSide": "RIGHT", "path": "pinot-core/src/main/java/org/apache/pinot/core/minion/SegmentConverter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQyMzoxMTowNlrOGomG4Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQwMTowOTowNVrOGqn9xw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTIyMDU3Nw==", "bodyText": "Table config cannot be null, and we can remove this check", "url": "https://github.com/apache/pinot/pull/5587#discussion_r445220577", "createdAt": "2020-06-24T23:11:06Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/minion/SegmentConverter.java", "diffHunk": "@@ -121,9 +119,10 @@ public SegmentConverter(List<File> inputIndexDirs, File workingDir, String table\n       }\n \n       // Sorting on sorted column and creating indices\n-      if (_indexingConfig != null) {\n-        List<String> sortedColumn = _indexingConfig.getSortedColumn();\n-        List<String> invertedIndexColumns = _indexingConfig.getInvertedIndexColumns();\n+      if (_tableConfig != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "832e50b0c9cb018450d18049239cebb63d87ab4d"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzM0ODE2Nw==", "bodyText": "removed", "url": "https://github.com/apache/pinot/pull/5587#discussion_r447348167", "createdAt": "2020-06-30T01:09:05Z", "author": {"login": "snleee"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/minion/SegmentConverter.java", "diffHunk": "@@ -121,9 +119,10 @@ public SegmentConverter(List<File> inputIndexDirs, File workingDir, String table\n       }\n \n       // Sorting on sorted column and creating indices\n-      if (_indexingConfig != null) {\n-        List<String> sortedColumn = _indexingConfig.getSortedColumn();\n-        List<String> invertedIndexColumns = _indexingConfig.getInvertedIndexColumns();\n+      if (_tableConfig != null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTIyMDU3Nw=="}, "originalCommit": {"oid": "832e50b0c9cb018450d18049239cebb63d87ab4d"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3NDEwMDgzOnYy", "diffSide": "RIGHT", "path": "pinot-minion/src/main/java/org/apache/pinot/minion/executor/MergeRollupTaskExecutor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQyMzoxMzowMVrOGomJEg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQyMzoxMzowMVrOGomJEg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTIyMTEzOA==", "bodyText": "(nit) maxNumRowsPerSegment", "url": "https://github.com/apache/pinot/pull/5587#discussion_r445221138", "createdAt": "2020-06-24T23:13:01Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-minion/src/main/java/org/apache/pinot/minion/executor/MergeRollupTaskExecutor.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.minion.executor;\n+\n+import com.google.common.base.Preconditions;\n+import java.io.File;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.apache.pinot.common.metadata.ZKMetadataProvider;\n+import org.apache.pinot.core.common.MinionConstants;\n+import org.apache.pinot.core.minion.PinotTaskConfig;\n+import org.apache.pinot.core.minion.rollup.MergeRollupSegmentConverter;\n+import org.apache.pinot.core.minion.rollup.MergeType;\n+import org.apache.pinot.spi.config.table.TableConfig;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+\n+/**\n+ * Task executor that provides merge and rollup service\n+ *\n+ * TODO:\n+ *   1. Add the support for roll-up\n+ *   2. Add the support for time split to provide backfill support for merged segments\n+ *   3. Change the way to decide the number of output segments (explicit numPartition config -> maxRumRowsPerSegment)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "832e50b0c9cb018450d18049239cebb63d87ab4d"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3NDEwNDY5OnYy", "diffSide": "RIGHT", "path": "pinot-tools/src/main/java/org/apache/pinot/tools/segment/converter/SegmentMergeCommand.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQyMzoxNDo1OVrOGomLbw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQyMzoxNDo1OVrOGomLbw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTIyMTc0Mw==", "bodyText": "(nit) This does not comply with Pinot Style", "url": "https://github.com/apache/pinot/pull/5587#discussion_r445221743", "createdAt": "2020-06-24T23:14:59Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-tools/src/main/java/org/apache/pinot/tools/segment/converter/SegmentMergeCommand.java", "diffHunk": "@@ -194,9 +194,13 @@ public boolean execute()\n       // TODO: add support for rollup\n       String tableName = TableNameBuilder.extractRawTableName(tableConfig.getTableName());\n       MergeRollupSegmentConverter mergeRollupSegmentConverter =\n-          new MergeRollupSegmentConverter.Builder().setMergeType(_mergeType).setSegmentName(_outputSegmentName)\n-              .setInputIndexDirs(inputIndexDirs).setWorkingDir(workingDir).setTableName(tableName)\n-              .setTableConfig(tableConfig).build();\n+          new MergeRollupSegmentConverter.Builder().setMergeType(MergeType.fromString(_mergeType))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "832e50b0c9cb018450d18049239cebb63d87ab4d"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3NDExMzM4OnYy", "diffSide": "RIGHT", "path": "pinot-minion/src/main/java/org/apache/pinot/minion/executor/MergeRollupTaskExecutor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQyMzoxOToyM1rOGomQ0A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQwMTowNDo0NFrOGqn4gA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTIyMzEyMA==", "bodyText": "Auto-reformat the file?", "url": "https://github.com/apache/pinot/pull/5587#discussion_r445223120", "createdAt": "2020-06-24T23:19:23Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-minion/src/main/java/org/apache/pinot/minion/executor/MergeRollupTaskExecutor.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.minion.executor;\n+\n+import com.google.common.base.Preconditions;\n+import java.io.File;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.apache.pinot.common.metadata.ZKMetadataProvider;\n+import org.apache.pinot.core.common.MinionConstants;\n+import org.apache.pinot.core.minion.PinotTaskConfig;\n+import org.apache.pinot.core.minion.rollup.MergeRollupSegmentConverter;\n+import org.apache.pinot.core.minion.rollup.MergeType;\n+import org.apache.pinot.spi.config.table.TableConfig;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+\n+/**\n+ * Task executor that provides merge and rollup service\n+ *\n+ * TODO:\n+ *   1. Add the support for roll-up\n+ *   2. Add the support for time split to provide backfill support for merged segments\n+ *   3. Change the way to decide the number of output segments (explicit numPartition config -> maxRumRowsPerSegment)\n+ */\n+public class MergeRollupTaskExecutor extends BaseMultipleSegmentsConversionExecutor {\n+  private static final Logger LOGGER = LoggerFactory.getLogger(MergeRollupTaskExecutor.class);\n+\n+  @Override\n+  protected List<SegmentConversionResult> convert(PinotTaskConfig pinotTaskConfig, List<File> originalIndexDirs,\n+      File workingDir) throws Exception {\n+    Map<String, String> configs = pinotTaskConfig.getConfigs();\n+    String mergeTypeString = configs.get(MinionConstants.MergeRollupTask.MERGE_TYPE_KEY);\n+    // TODO: add the support for rollup\n+    Preconditions.checkNotNull(mergeTypeString, \"MergeType cannot be null\");\n+\n+    MergeType mergeType = MergeType.fromString(mergeTypeString);\n+    Preconditions.checkState(mergeType == MergeType.CONCATENATE, \"Only 'CONCATENATE' mode is currently supported.\");\n+\n+    String mergedSegmentName = configs.get(MinionConstants.MergeRollupTask.MERGED_SEGMENT_NAME_KEY);\n+    String tableNameWithType = configs.get(MinionConstants.TABLE_NAME_KEY);\n+\n+    TableConfig tableConfig =\n+        ZKMetadataProvider.getTableConfig(MINION_CONTEXT.getHelixPropertyStore(), tableNameWithType);\n+\n+    MergeRollupSegmentConverter rollupSegmentConverter =\n+        new MergeRollupSegmentConverter.Builder().setMergeType(mergeType)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "832e50b0c9cb018450d18049239cebb63d87ab4d"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzM0NjgxNg==", "bodyText": "Good catch. I updated my IntelliJ version recently and code style config got reset.", "url": "https://github.com/apache/pinot/pull/5587#discussion_r447346816", "createdAt": "2020-06-30T01:04:44Z", "author": {"login": "snleee"}, "path": "pinot-minion/src/main/java/org/apache/pinot/minion/executor/MergeRollupTaskExecutor.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.minion.executor;\n+\n+import com.google.common.base.Preconditions;\n+import java.io.File;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.apache.pinot.common.metadata.ZKMetadataProvider;\n+import org.apache.pinot.core.common.MinionConstants;\n+import org.apache.pinot.core.minion.PinotTaskConfig;\n+import org.apache.pinot.core.minion.rollup.MergeRollupSegmentConverter;\n+import org.apache.pinot.core.minion.rollup.MergeType;\n+import org.apache.pinot.spi.config.table.TableConfig;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+\n+/**\n+ * Task executor that provides merge and rollup service\n+ *\n+ * TODO:\n+ *   1. Add the support for roll-up\n+ *   2. Add the support for time split to provide backfill support for merged segments\n+ *   3. Change the way to decide the number of output segments (explicit numPartition config -> maxRumRowsPerSegment)\n+ */\n+public class MergeRollupTaskExecutor extends BaseMultipleSegmentsConversionExecutor {\n+  private static final Logger LOGGER = LoggerFactory.getLogger(MergeRollupTaskExecutor.class);\n+\n+  @Override\n+  protected List<SegmentConversionResult> convert(PinotTaskConfig pinotTaskConfig, List<File> originalIndexDirs,\n+      File workingDir) throws Exception {\n+    Map<String, String> configs = pinotTaskConfig.getConfigs();\n+    String mergeTypeString = configs.get(MinionConstants.MergeRollupTask.MERGE_TYPE_KEY);\n+    // TODO: add the support for rollup\n+    Preconditions.checkNotNull(mergeTypeString, \"MergeType cannot be null\");\n+\n+    MergeType mergeType = MergeType.fromString(mergeTypeString);\n+    Preconditions.checkState(mergeType == MergeType.CONCATENATE, \"Only 'CONCATENATE' mode is currently supported.\");\n+\n+    String mergedSegmentName = configs.get(MinionConstants.MergeRollupTask.MERGED_SEGMENT_NAME_KEY);\n+    String tableNameWithType = configs.get(MinionConstants.TABLE_NAME_KEY);\n+\n+    TableConfig tableConfig =\n+        ZKMetadataProvider.getTableConfig(MINION_CONTEXT.getHelixPropertyStore(), tableNameWithType);\n+\n+    MergeRollupSegmentConverter rollupSegmentConverter =\n+        new MergeRollupSegmentConverter.Builder().setMergeType(mergeType)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTIyMzEyMA=="}, "originalCommit": {"oid": "832e50b0c9cb018450d18049239cebb63d87ab4d"}, "originalPosition": 66}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4NDMwMzUyOnYy", "diffSide": "RIGHT", "path": "pinot-core/src/main/java/org/apache/pinot/core/minion/rollup/MergeRollupSegmentConverter.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQwNDozODozNFrOGqEirg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQwMDo1NDo1NVrOGqntHA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njc2Nzc5MA==", "bodyText": "what is rollupPreAggregateType?", "url": "https://github.com/apache/pinot/pull/5587#discussion_r446767790", "createdAt": "2020-06-29T04:38:34Z", "author": {"login": "kishoreg"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/minion/rollup/MergeRollupSegmentConverter.java", "diffHunk": "@@ -49,18 +46,17 @@\n   private String _tableName;\n   private String _segmentName;\n   private MergeType _mergeType;\n-  private Map<String, String> _rolllupPreAggregateType;\n+  private Map<String, String> _rollupPreAggregateType;\n \n-  private MergeRollupSegmentConverter(@Nonnull List<File> inputIndexDirs, @Nonnull File workingDir,\n-      @Nonnull String tableName, @Nonnull String segmentName, @Nonnull String mergeType,\n-      @Nullable Map<String, String> rollupPreAggregateType, TableConfig tableConfig) {\n+  private MergeRollupSegmentConverter(List<File> inputIndexDirs, File workingDir, String tableName, String segmentName,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "832e50b0c9cb018450d18049239cebb63d87ab4d"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzM0MzkwMA==", "bodyText": "rollupPreggregateType is the mapping for the rollup, column -> aggregation function. I plan to change this to something very similar to startree v2 config (AggregationFunctionColumnPair)", "url": "https://github.com/apache/pinot/pull/5587#discussion_r447343900", "createdAt": "2020-06-30T00:54:55Z", "author": {"login": "snleee"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/minion/rollup/MergeRollupSegmentConverter.java", "diffHunk": "@@ -49,18 +46,17 @@\n   private String _tableName;\n   private String _segmentName;\n   private MergeType _mergeType;\n-  private Map<String, String> _rolllupPreAggregateType;\n+  private Map<String, String> _rollupPreAggregateType;\n \n-  private MergeRollupSegmentConverter(@Nonnull List<File> inputIndexDirs, @Nonnull File workingDir,\n-      @Nonnull String tableName, @Nonnull String segmentName, @Nonnull String mergeType,\n-      @Nullable Map<String, String> rollupPreAggregateType, TableConfig tableConfig) {\n+  private MergeRollupSegmentConverter(List<File> inputIndexDirs, File workingDir, String tableName, String segmentName,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njc2Nzc5MA=="}, "originalCommit": {"oid": "832e50b0c9cb018450d18049239cebb63d87ab4d"}, "originalPosition": 29}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4336, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}