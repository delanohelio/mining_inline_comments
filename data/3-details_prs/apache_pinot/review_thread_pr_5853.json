{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY2NzkyMDE0", "number": 5853, "reviewThreads": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQwNToxNzo1NlrOEYVuhw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQyMzo0Njo0OVrOEc0Ahw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzOTU3MjU1OnYy", "diffSide": "RIGHT", "path": "pinot-core/src/main/java/org/apache/pinot/core/segment/index/loader/invertedindex/RangeIndexHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQwNToxNzo1NlrOHAn2SA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQwNzo1OTowNlrOHDyP4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDQxNDkyMA==", "bodyText": "move the switch outside of for loop", "url": "https://github.com/apache/pinot/pull/5853#discussion_r470414920", "createdAt": "2020-08-14T05:17:56Z", "author": {"login": "kishoreg"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/segment/index/loader/invertedindex/RangeIndexHandler.java", "diffHunk": "@@ -140,17 +145,64 @@ private void handleDictionaryBasedColumn(ColumnMetadata columnMetadata)\n     }\n   }\n \n+  private void handleNonDictionaryBasedColumn(ColumnMetadata columnMetadata)\n+          throws IOException {\n+    int numDocs = columnMetadata.getTotalDocs();\n+    try (RangeIndexCreator creator = new RangeIndexCreator(_indexDir, columnMetadata.getFieldSpec(),\n+            FieldSpec.DataType.INT, -1, -1, numDocs, columnMetadata.getTotalNumberOfEntries())) {\n+      try (ForwardIndexReader forwardIndexReader = getForwardIndexReader(columnMetadata, _segmentWriter);\n+           ForwardIndexReaderContext readerContext = forwardIndexReader.createContext()) {\n+        if (columnMetadata.isSingleValue()) {\n+          // Single-value column.\n+          for (int i = 0; i < numDocs; i++) {\n+            switch (columnMetadata.getDataType()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "41f39382f62443abce15925329559ed70e84f9fb"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzczMTA0Mw==", "bodyText": "done", "url": "https://github.com/apache/pinot/pull/5853#discussion_r473731043", "createdAt": "2020-08-20T07:59:06Z", "author": {"login": "KKcorps"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/segment/index/loader/invertedindex/RangeIndexHandler.java", "diffHunk": "@@ -140,17 +145,64 @@ private void handleDictionaryBasedColumn(ColumnMetadata columnMetadata)\n     }\n   }\n \n+  private void handleNonDictionaryBasedColumn(ColumnMetadata columnMetadata)\n+          throws IOException {\n+    int numDocs = columnMetadata.getTotalDocs();\n+    try (RangeIndexCreator creator = new RangeIndexCreator(_indexDir, columnMetadata.getFieldSpec(),\n+            FieldSpec.DataType.INT, -1, -1, numDocs, columnMetadata.getTotalNumberOfEntries())) {\n+      try (ForwardIndexReader forwardIndexReader = getForwardIndexReader(columnMetadata, _segmentWriter);\n+           ForwardIndexReaderContext readerContext = forwardIndexReader.createContext()) {\n+        if (columnMetadata.isSingleValue()) {\n+          // Single-value column.\n+          for (int i = 0; i < numDocs; i++) {\n+            switch (columnMetadata.getDataType()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDQxNDkyMA=="}, "originalCommit": {"oid": "41f39382f62443abce15925329559ed70e84f9fb"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3NTg5MjE2OnYy", "diffSide": "RIGHT", "path": "pinot-core/src/main/java/org/apache/pinot/core/segment/creator/DictionaryBasedInvertedIndexCreator.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQwMDoyODoxMlrOHF8rtQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxNDozMzo0NVrOHHPGTQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTk5OTE1Nw==", "bodyText": "(nit) unused import", "url": "https://github.com/apache/pinot/pull/5853#discussion_r475999157", "createdAt": "2020-08-25T00:28:12Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/segment/creator/DictionaryBasedInvertedIndexCreator.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.core.segment.creator;\n+\n+import java.io.Closeable;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "21cdcda75149c264a74cd1906272243bf19901ff"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzM0OTQ1Mw==", "bodyText": "done", "url": "https://github.com/apache/pinot/pull/5853#discussion_r477349453", "createdAt": "2020-08-26T14:33:45Z", "author": {"login": "KKcorps"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/segment/creator/DictionaryBasedInvertedIndexCreator.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.core.segment.creator;\n+\n+import java.io.Closeable;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTk5OTE1Nw=="}, "originalCommit": {"oid": "21cdcda75149c264a74cd1906272243bf19901ff"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3NTg5ODc5OnYy", "diffSide": "RIGHT", "path": "pinot-core/src/main/java/org/apache/pinot/core/segment/creator/impl/inv/RangeIndexCreator.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQwMDoyOTo1NVrOHF8v2g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxMzoyMjo1MVrOHHL0og==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjAwMDIxOA==", "bodyText": "This should implement both RawValueBasedInvertedIndexCreator and DictionaryBasedInvertedIndexCreator?", "url": "https://github.com/apache/pinot/pull/5853#discussion_r476000218", "createdAt": "2020-08-25T00:29:55Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/segment/creator/impl/inv/RangeIndexCreator.java", "diffHunk": "@@ -65,7 +66,7 @@\n  *   </li>\n  * </ul>\n  */\n-public final class RangeIndexCreator implements InvertedIndexCreator {\n+public final class RangeIndexCreator implements RawValueBasedInvertedIndexCreator {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "21cdcda75149c264a74cd1906272243bf19901ff"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzI5NTc3OA==", "bodyText": "done", "url": "https://github.com/apache/pinot/pull/5853#discussion_r477295778", "createdAt": "2020-08-26T13:22:51Z", "author": {"login": "KKcorps"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/segment/creator/impl/inv/RangeIndexCreator.java", "diffHunk": "@@ -65,7 +66,7 @@\n  *   </li>\n  * </ul>\n  */\n-public final class RangeIndexCreator implements InvertedIndexCreator {\n+public final class RangeIndexCreator implements RawValueBasedInvertedIndexCreator {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjAwMDIxOA=="}, "originalCommit": {"oid": "21cdcda75149c264a74cd1906272243bf19901ff"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3NTkwMjgwOnYy", "diffSide": "RIGHT", "path": "pinot-core/src/main/java/org/apache/pinot/core/segment/creator/impl/inv/RangeIndexCreator.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQwMDozMDo1OVrOHF8ykg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxMzoyMjowM1rOHHLydw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjAwMDkxNA==", "bodyText": "(CRITICAL) This is not correct. Here you should add to _nextValueId instead of _nextDocId", "url": "https://github.com/apache/pinot/pull/5853#discussion_r476000914", "createdAt": "2020-08-25T00:30:59Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/segment/creator/impl/inv/RangeIndexCreator.java", "diffHunk": "@@ -165,26 +166,63 @@ public RangeIndexCreator(File indexDir, FieldSpec fieldSpec, FieldSpec.DataType\n   }\n \n   @Override\n-  public void add(int dictId) {\n-    _numberValueBuffer.put(_nextDocId, dictId);\n-    _docIdBuffer.put(_nextDocId, _nextDocId);\n-    _nextDocId = _nextDocId + 1;\n+  public void add(int value) {\n+    addValueToBuffer(value);\n+    nextDoc();\n   }\n \n   @Override\n-  public void add(int[] dictIds, int length) {\n+  public void add(int[] values, int length) {\n     for (int i = 0; i < length; i++) {\n-      int dictId = dictIds[i];\n-      _numberValueBuffer.put(_nextValueId, dictId);\n-      _docIdBuffer.put(_nextValueId, _nextDocId);\n-      _nextValueId = _nextValueId + 1;\n+      addValueToBuffer(values[i]);\n+      nextDoc();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "21cdcda75149c264a74cd1906272243bf19901ff"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzI5NTIyMw==", "bodyText": "done", "url": "https://github.com/apache/pinot/pull/5853#discussion_r477295223", "createdAt": "2020-08-26T13:22:03Z", "author": {"login": "KKcorps"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/segment/creator/impl/inv/RangeIndexCreator.java", "diffHunk": "@@ -165,26 +166,63 @@ public RangeIndexCreator(File indexDir, FieldSpec fieldSpec, FieldSpec.DataType\n   }\n \n   @Override\n-  public void add(int dictId) {\n-    _numberValueBuffer.put(_nextDocId, dictId);\n-    _docIdBuffer.put(_nextDocId, _nextDocId);\n-    _nextDocId = _nextDocId + 1;\n+  public void add(int value) {\n+    addValueToBuffer(value);\n+    nextDoc();\n   }\n \n   @Override\n-  public void add(int[] dictIds, int length) {\n+  public void add(int[] values, int length) {\n     for (int i = 0; i < length; i++) {\n-      int dictId = dictIds[i];\n-      _numberValueBuffer.put(_nextValueId, dictId);\n-      _docIdBuffer.put(_nextValueId, _nextDocId);\n-      _nextValueId = _nextValueId + 1;\n+      addValueToBuffer(values[i]);\n+      nextDoc();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjAwMDkxNA=="}, "originalCommit": {"oid": "21cdcda75149c264a74cd1906272243bf19901ff"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3NTkwNjc5OnYy", "diffSide": "RIGHT", "path": "pinot-core/src/main/java/org/apache/pinot/core/segment/creator/impl/inv/RangeIndexCreator.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQwMDozMjowNlrOHF81KQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxMzoyMjoxMFrOHHLyvw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjAwMTU3Nw==", "bodyText": "Recommend inline these 2 methods for readability (as the existing code). Current way is not as readable", "url": "https://github.com/apache/pinot/pull/5853#discussion_r476001577", "createdAt": "2020-08-25T00:32:06Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/segment/creator/impl/inv/RangeIndexCreator.java", "diffHunk": "@@ -165,26 +166,63 @@ public RangeIndexCreator(File indexDir, FieldSpec fieldSpec, FieldSpec.DataType\n   }\n \n   @Override\n-  public void add(int dictId) {\n-    _numberValueBuffer.put(_nextDocId, dictId);\n-    _docIdBuffer.put(_nextDocId, _nextDocId);\n-    _nextDocId = _nextDocId + 1;\n+  public void add(int value) {\n+    addValueToBuffer(value);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "21cdcda75149c264a74cd1906272243bf19901ff"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzI5NTI5NQ==", "bodyText": "done", "url": "https://github.com/apache/pinot/pull/5853#discussion_r477295295", "createdAt": "2020-08-26T13:22:10Z", "author": {"login": "KKcorps"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/segment/creator/impl/inv/RangeIndexCreator.java", "diffHunk": "@@ -165,26 +166,63 @@ public RangeIndexCreator(File indexDir, FieldSpec fieldSpec, FieldSpec.DataType\n   }\n \n   @Override\n-  public void add(int dictId) {\n-    _numberValueBuffer.put(_nextDocId, dictId);\n-    _docIdBuffer.put(_nextDocId, _nextDocId);\n-    _nextDocId = _nextDocId + 1;\n+  public void add(int value) {\n+    addValueToBuffer(value);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjAwMTU3Nw=="}, "originalCommit": {"oid": "21cdcda75149c264a74cd1906272243bf19901ff"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3NTkyNzIzOnYy", "diffSide": "RIGHT", "path": "pinot-core/src/main/java/org/apache/pinot/core/segment/index/loader/invertedindex/RangeIndexHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQwMDozNzoyNVrOHF9CqA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxMzoyMjoxNlrOHHLy_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjAwNTAzMg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    throw new RuntimeException(\"Range indexing is not supported for multi value non-dictionary columns\");\n          \n          \n            \n                    throw new RuntimeException(\"Raw index on multi-value column is not supported\");", "url": "https://github.com/apache/pinot/pull/5853#discussion_r476005032", "createdAt": "2020-08-25T00:37:25Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/segment/index/loader/invertedindex/RangeIndexHandler.java", "diffHunk": "@@ -140,17 +145,70 @@ private void handleDictionaryBasedColumn(ColumnMetadata columnMetadata)\n     }\n   }\n \n+  private void handleNonDictionaryBasedColumn(ColumnMetadata columnMetadata)\n+          throws IOException {\n+    int numDocs = columnMetadata.getTotalDocs();\n+    try (RangeIndexCreator creator = new RangeIndexCreator(_indexDir, columnMetadata.getFieldSpec(),\n+            columnMetadata.getDataType(), -1, -1, numDocs, columnMetadata.getTotalNumberOfEntries())) {\n+      try (ForwardIndexReader forwardIndexReader = getForwardIndexReader(columnMetadata, _segmentWriter);\n+           ForwardIndexReaderContext readerContext = forwardIndexReader.createContext()) {\n+        if (columnMetadata.isSingleValue()) {\n+          // Single-value column.\n+          switch (columnMetadata.getDataType()) {\n+            case INT: {\n+              for (int i = 0; i < numDocs; i++) {\n+                creator.add(forwardIndexReader.getInt(i, readerContext));\n+              }\n+              break;\n+            }\n+            case LONG: {\n+              for (int i = 0; i < numDocs; i++) {\n+                creator.add(forwardIndexReader.getLong(i, readerContext));\n+              }\n+              break;\n+            }\n+            case FLOAT: {\n+              for (int i = 0; i < numDocs; i++) {\n+                creator.add(forwardIndexReader.getFloat(i, readerContext));\n+              }\n+              break;\n+            }\n+            case DOUBLE: {\n+              for (int i = 0; i < numDocs; i++) {\n+                creator.add(forwardIndexReader.getDouble(i, readerContext));\n+              }\n+              break;\n+            }\n+            default: {\n+              throw new RuntimeException(\"Range indexing is not supported\");\n+            }\n+          }\n+        }\n+        creator.seal();\n+      }\n+    }\n+  }\n+\n   private ForwardIndexReader<?> getForwardIndexReader(ColumnMetadata columnMetadata,\n       SegmentDirectory.Writer segmentWriter)\n       throws IOException {\n     PinotDataBuffer buffer = segmentWriter.getIndexFor(columnMetadata.getColumnName(), ColumnIndexType.FORWARD_INDEX);\n     int numRows = columnMetadata.getTotalDocs();\n     int numBitsPerValue = columnMetadata.getBitsPerElement();\n     if (columnMetadata.isSingleValue()) {\n-      return new FixedBitSVForwardIndexReader(buffer, numRows, numBitsPerValue);\n+      if (columnMetadata.hasDictionary()) {\n+        return new FixedBitSVForwardIndexReader(buffer, numRows, numBitsPerValue);\n+      } else {\n+        return new FixedByteChunkSVForwardIndexReader(buffer, columnMetadata.getDataType());\n+      }\n     } else {\n-      return new FixedBitMVForwardIndexReader(buffer, numRows, columnMetadata.getTotalNumberOfEntries(),\n-          numBitsPerValue);\n+      if (columnMetadata.hasDictionary()) {\n+        return new FixedBitMVForwardIndexReader(buffer, numRows, columnMetadata.getTotalNumberOfEntries(),\n+                numBitsPerValue);\n+      } else {\n+        throw new RuntimeException(\"Range indexing is not supported for multi value non-dictionary columns\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "21cdcda75149c264a74cd1906272243bf19901ff"}, "originalPosition": 98}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzI5NTM1Ng==", "bodyText": "done", "url": "https://github.com/apache/pinot/pull/5853#discussion_r477295356", "createdAt": "2020-08-26T13:22:16Z", "author": {"login": "KKcorps"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/segment/index/loader/invertedindex/RangeIndexHandler.java", "diffHunk": "@@ -140,17 +145,70 @@ private void handleDictionaryBasedColumn(ColumnMetadata columnMetadata)\n     }\n   }\n \n+  private void handleNonDictionaryBasedColumn(ColumnMetadata columnMetadata)\n+          throws IOException {\n+    int numDocs = columnMetadata.getTotalDocs();\n+    try (RangeIndexCreator creator = new RangeIndexCreator(_indexDir, columnMetadata.getFieldSpec(),\n+            columnMetadata.getDataType(), -1, -1, numDocs, columnMetadata.getTotalNumberOfEntries())) {\n+      try (ForwardIndexReader forwardIndexReader = getForwardIndexReader(columnMetadata, _segmentWriter);\n+           ForwardIndexReaderContext readerContext = forwardIndexReader.createContext()) {\n+        if (columnMetadata.isSingleValue()) {\n+          // Single-value column.\n+          switch (columnMetadata.getDataType()) {\n+            case INT: {\n+              for (int i = 0; i < numDocs; i++) {\n+                creator.add(forwardIndexReader.getInt(i, readerContext));\n+              }\n+              break;\n+            }\n+            case LONG: {\n+              for (int i = 0; i < numDocs; i++) {\n+                creator.add(forwardIndexReader.getLong(i, readerContext));\n+              }\n+              break;\n+            }\n+            case FLOAT: {\n+              for (int i = 0; i < numDocs; i++) {\n+                creator.add(forwardIndexReader.getFloat(i, readerContext));\n+              }\n+              break;\n+            }\n+            case DOUBLE: {\n+              for (int i = 0; i < numDocs; i++) {\n+                creator.add(forwardIndexReader.getDouble(i, readerContext));\n+              }\n+              break;\n+            }\n+            default: {\n+              throw new RuntimeException(\"Range indexing is not supported\");\n+            }\n+          }\n+        }\n+        creator.seal();\n+      }\n+    }\n+  }\n+\n   private ForwardIndexReader<?> getForwardIndexReader(ColumnMetadata columnMetadata,\n       SegmentDirectory.Writer segmentWriter)\n       throws IOException {\n     PinotDataBuffer buffer = segmentWriter.getIndexFor(columnMetadata.getColumnName(), ColumnIndexType.FORWARD_INDEX);\n     int numRows = columnMetadata.getTotalDocs();\n     int numBitsPerValue = columnMetadata.getBitsPerElement();\n     if (columnMetadata.isSingleValue()) {\n-      return new FixedBitSVForwardIndexReader(buffer, numRows, numBitsPerValue);\n+      if (columnMetadata.hasDictionary()) {\n+        return new FixedBitSVForwardIndexReader(buffer, numRows, numBitsPerValue);\n+      } else {\n+        return new FixedByteChunkSVForwardIndexReader(buffer, columnMetadata.getDataType());\n+      }\n     } else {\n-      return new FixedBitMVForwardIndexReader(buffer, numRows, columnMetadata.getTotalNumberOfEntries(),\n-          numBitsPerValue);\n+      if (columnMetadata.hasDictionary()) {\n+        return new FixedBitMVForwardIndexReader(buffer, numRows, columnMetadata.getTotalNumberOfEntries(),\n+                numBitsPerValue);\n+      } else {\n+        throw new RuntimeException(\"Range indexing is not supported for multi value non-dictionary columns\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjAwNTAzMg=="}, "originalCommit": {"oid": "21cdcda75149c264a74cd1906272243bf19901ff"}, "originalPosition": 98}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4NjQwMzE3OnYy", "diffSide": "RIGHT", "path": "pinot-core/src/main/java/org/apache/pinot/core/operator/filter/RangeIndexBasedFilterOperator.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQyMzozODoxNFrOHHjq2w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQyMzozODoxNFrOHHjq2w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzY4NjQ5MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                      lastRangeId = rangeIndexReader.findRangeId(((RangePredicateEvaluatorFactory.IntRawValueBasedRangePredicateEvaluator) _rangePredicateEvaluator).getUpperBound());\n          \n          \n            \n                      lastRangeId = rangeIndexReader.findRangeId(((IntRawValueBasedRangePredicateEvaluator) _rangePredicateEvaluator).getUpperBound());", "url": "https://github.com/apache/pinot/pull/5853#discussion_r477686491", "createdAt": "2020-08-26T23:38:14Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/operator/filter/RangeIndexBasedFilterOperator.java", "diffHunk": "@@ -49,9 +55,40 @@ public RangeIndexBasedFilterOperator(OfflineDictionaryBasedRangePredicateEvaluat\n   protected FilterBlock getNextBlock() {\n     RangeIndexReader rangeIndexReader = (RangeIndexReader) _dataSource.getRangeIndex();\n     assert rangeIndexReader != null;\n-    int firstRangeId = rangeIndexReader.findRangeId(_rangePredicateEvaluator.getStartDictId());\n-    // NOTE: End dictionary id is exclusive in OfflineDictionaryBasedRangePredicateEvaluator.\n-    int lastRangeId = rangeIndexReader.findRangeId(_rangePredicateEvaluator.getEndDictId() - 1);\n+\n+    int firstRangeId;\n+    int lastRangeId;\n+    if (_rangePredicateEvaluator instanceof OfflineDictionaryBasedRangePredicateEvaluator) {\n+      firstRangeId = rangeIndexReader.findRangeId(((OfflineDictionaryBasedRangePredicateEvaluator) _rangePredicateEvaluator).getStartDictId());\n+      // NOTE: End dictionary id is exclusive in OfflineDictionaryBasedRangePredicateEvaluator.\n+      lastRangeId = rangeIndexReader.findRangeId(((OfflineDictionaryBasedRangePredicateEvaluator) _rangePredicateEvaluator).getEndDictId() - 1);\n+    } else {\n+      switch (_rangePredicateEvaluator.getDataType()) {\n+        case INT: {\n+          firstRangeId = rangeIndexReader.findRangeId(((IntRawValueBasedRangePredicateEvaluator) _rangePredicateEvaluator).geLowerBound());\n+          lastRangeId = rangeIndexReader.findRangeId(((RangePredicateEvaluatorFactory.IntRawValueBasedRangePredicateEvaluator) _rangePredicateEvaluator).getUpperBound());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e70814f723368289f1e1e879b3479a8aa624b8b6"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4NjQ0NDMzOnYy", "diffSide": "RIGHT", "path": "pinot-core/src/main/java/org/apache/pinot/core/segment/creator/impl/SegmentColumnarIndexCreator.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQyMzo0MzowNFrOHHkGeA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQyMzo0MzowNFrOHHkGeA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzY5MzU2MA==", "bodyText": "Suggest not changing the variable name. We'll probably use the same map for raw index based inverted index in the future once supported", "url": "https://github.com/apache/pinot/pull/5853#discussion_r477693560", "createdAt": "2020-08-26T23:43:04Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/segment/creator/impl/SegmentColumnarIndexCreator.java", "diffHunk": "@@ -82,8 +82,8 @@\n   private Map<String, ColumnIndexCreationInfo> indexCreationInfoMap;\n   private Map<String, SegmentDictionaryCreator> _dictionaryCreatorMap = new HashMap<>();\n   private Map<String, ForwardIndexCreator> _forwardIndexCreatorMap = new HashMap<>();\n-  private Map<String, InvertedIndexCreator> _invertedIndexCreatorMap = new HashMap<>();\n-  private Map<String, InvertedIndexCreator> _textIndexCreatorMap = new HashMap<>();\n+  private Map<String, DictionaryBasedInvertedIndexCreator> _dictionaryBasedInvertedIndexCreatorMap = new HashMap<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e70814f723368289f1e1e879b3479a8aa624b8b6"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4NjQ0OTEwOnYy", "diffSide": "RIGHT", "path": "pinot-core/src/main/java/org/apache/pinot/core/segment/creator/impl/inv/RangeIndexCreator.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQyMzo0MzozNFrOHHkJng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQyMzo0MzozNFrOHHkJng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzY5NDM2Ng==", "bodyText": "Revise the javadoc?", "url": "https://github.com/apache/pinot/pull/5853#discussion_r477694366", "createdAt": "2020-08-26T23:43:34Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/segment/creator/impl/inv/RangeIndexCreator.java", "diffHunk": "@@ -45,7 +46,7 @@\n \n \n /**\n- * Implementation of {@link InvertedIndexCreator} that uses off-heap memory.\n+ * Implementation of {@link DictionaryBasedInvertedIndexCreator} that uses off-heap memory.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e70814f723368289f1e1e879b3479a8aa624b8b6"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4NjQ1MjMzOnYy", "diffSide": "RIGHT", "path": "pinot-core/src/main/java/org/apache/pinot/core/segment/creator/impl/inv/RangeIndexCreator.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQyMzo0Mzo1N1rOHHkLzw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQyMzo0Mzo1N1rOHHkLzw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzY5NDkyNw==", "bodyText": "(nit) reformat", "url": "https://github.com/apache/pinot/pull/5853#discussion_r477694927", "createdAt": "2020-08-26T23:43:57Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/segment/creator/impl/inv/RangeIndexCreator.java", "diffHunk": "@@ -65,7 +66,7 @@\n  *   </li>\n  * </ul>\n  */\n-public final class RangeIndexCreator implements InvertedIndexCreator {\n+public final class RangeIndexCreator implements RawValueBasedInvertedIndexCreator,DictionaryBasedInvertedIndexCreator {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e70814f723368289f1e1e879b3479a8aa624b8b6"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4NjQ3Njg3OnYy", "diffSide": "RIGHT", "path": "pinot-core/src/test/java/org/apache/pinot/core/segment/index/creator/RangeIndexCreatorTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQyMzo0Njo0OVrOHHkccQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQyMzo0Njo0OVrOHHkccQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzY5OTE4NQ==", "bodyText": "Please reformat this file, the indentation is not correct", "url": "https://github.com/apache/pinot/pull/5853#discussion_r477699185", "createdAt": "2020-08-26T23:46:49Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-core/src/test/java/org/apache/pinot/core/segment/index/creator/RangeIndexCreatorTest.java", "diffHunk": "@@ -18,16 +18,18 @@\n  */\n package org.apache.pinot.core.segment.index.creator;\n \n-import com.google.common.base.Preconditions;\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e70814f723368289f1e1e879b3479a8aa624b8b6"}, "originalPosition": 5}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3975, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}