{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY5Nzc4Njcz", "number": 5897, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQyMzo0NTowOFrOEZsqZw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQyMzo0Nzo0OFrOEZsseQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1MzgxNjA3OnYy", "diffSide": "RIGHT", "path": "pinot-plugins/pinot-batch-ingestion/pinot-batch-ingestion-common/src/test/java/org/apache/pinot/plugin/ingestion/batch/common/TestSegmentPushUtils.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQyMzo0NTowOFrOHCqZQQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQyMzo0NTowOFrOHCqZQQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjU1Mzc5Mw==", "bodyText": "Rename it to SegmentPushUtilsTest", "url": "https://github.com/apache/pinot/pull/5897#discussion_r472553793", "createdAt": "2020-08-18T23:45:08Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-plugins/pinot-batch-ingestion/pinot-batch-ingestion-common/src/test/java/org/apache/pinot/plugin/ingestion/batch/common/TestSegmentPushUtils.java", "diffHunk": "@@ -0,0 +1,79 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.pinot.plugin.ingestion.batch.common;\n+\n+import java.net.URI;\n+import org.testng.Assert;\n+import org.testng.annotations.Test;\n+\n+\n+public class TestSegmentPushUtils {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4874e7a478c1b809a4ccbc07a51940df9d1eb613"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1MzgxODkzOnYy", "diffSide": "RIGHT", "path": "pinot-plugins/pinot-file-system/pinot-s3/src/test/java/org/apache/pinot/plugin/filesystem/S3PinotFSTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQyMzo0NjozMlrOHCqazg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQyMzo1OTozMFrOHCqp4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjU1NDE5MA==", "bodyText": "Why do we change this in the test? This should be handled within the PinotFS", "url": "https://github.com/apache/pinot/pull/5897#discussion_r472554190", "createdAt": "2020-08-18T23:46:32Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-plugins/pinot-file-system/pinot-s3/src/test/java/org/apache/pinot/plugin/filesystem/S3PinotFSTest.java", "diffHunk": "@@ -287,7 +287,7 @@ public void testCopyFromAndToLocal()\n \n     Assert.assertEquals(headObjectResponse.contentLength(), (Long) fileToCopy.length());\n \n-    File fileToDownload = new File(\"copyFile_download.txt\");\n+    File fileToDownload = new File(\"copyFile_download.txt\").getAbsoluteFile();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4874e7a478c1b809a4ccbc07a51940df9d1eb613"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjU1ODA1MQ==", "bodyText": "because relative File.getParent will return null, which is not going to happen in the prod environment", "url": "https://github.com/apache/pinot/pull/5897#discussion_r472558051", "createdAt": "2020-08-18T23:59:30Z", "author": {"login": "xiangfu0"}, "path": "pinot-plugins/pinot-file-system/pinot-s3/src/test/java/org/apache/pinot/plugin/filesystem/S3PinotFSTest.java", "diffHunk": "@@ -287,7 +287,7 @@ public void testCopyFromAndToLocal()\n \n     Assert.assertEquals(headObjectResponse.contentLength(), (Long) fileToCopy.length());\n \n-    File fileToDownload = new File(\"copyFile_download.txt\");\n+    File fileToDownload = new File(\"copyFile_download.txt\").getAbsoluteFile();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjU1NDE5MA=="}, "originalCommit": {"oid": "4874e7a478c1b809a4ccbc07a51940df9d1eb613"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1MzgyMDE4OnYy", "diffSide": "RIGHT", "path": "pinot-plugins/pinot-file-system/pinot-s3/src/main/java/org/apache/pinot/plugin/filesystem/S3PinotFS.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQyMzo0NzoxNVrOHCqbiA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQyMzo1ODo1NFrOHCqpGQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjU1NDM3Ng==", "bodyText": "Should we handle this in the PinotFS?", "url": "https://github.com/apache/pinot/pull/5897#discussion_r472554376", "createdAt": "2020-08-18T23:47:15Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-plugins/pinot-file-system/pinot-s3/src/main/java/org/apache/pinot/plugin/filesystem/S3PinotFS.java", "diffHunk": "@@ -411,6 +412,7 @@ public void copyToLocalFile(URI srcUri, File dstFile)\n       throws Exception {\n     LOGGER.info(\"Copy {} to local {}\", srcUri, dstFile.getAbsolutePath());\n     URI base = getBase(srcUri);\n+    FileUtils.forceMkdir(dstFile.getParentFile());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4874e7a478c1b809a4ccbc07a51940df9d1eb613"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjU1Nzg0OQ==", "bodyText": "Per #5890 seems that this is expected behavior.", "url": "https://github.com/apache/pinot/pull/5897#discussion_r472557849", "createdAt": "2020-08-18T23:58:54Z", "author": {"login": "xiangfu0"}, "path": "pinot-plugins/pinot-file-system/pinot-s3/src/main/java/org/apache/pinot/plugin/filesystem/S3PinotFS.java", "diffHunk": "@@ -411,6 +412,7 @@ public void copyToLocalFile(URI srcUri, File dstFile)\n       throws Exception {\n     LOGGER.info(\"Copy {} to local {}\", srcUri, dstFile.getAbsolutePath());\n     URI base = getBase(srcUri);\n+    FileUtils.forceMkdir(dstFile.getParentFile());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjU1NDM3Ng=="}, "originalCommit": {"oid": "4874e7a478c1b809a4ccbc07a51940df9d1eb613"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1MzgyMTM3OnYy", "diffSide": "RIGHT", "path": "pinot-plugins/pinot-batch-ingestion/pinot-batch-ingestion-common/src/main/java/org/apache/pinot/plugin/ingestion/batch/common/SegmentPushUtils.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQyMzo0Nzo0OFrOHCqcNQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQyMzo0Nzo0OFrOHCqcNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjU1NDU0OQ==", "bodyText": "Log something here for debugging purpose?", "url": "https://github.com/apache/pinot/pull/5897#discussion_r472554549", "createdAt": "2020-08-18T23:47:48Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-plugins/pinot-batch-ingestion/pinot-batch-ingestion-common/src/main/java/org/apache/pinot/plugin/ingestion/batch/common/SegmentPushUtils.java", "diffHunk": "@@ -46,6 +47,27 @@\n \n   private static final FileUploadDownloadClient FILE_UPLOAD_DOWNLOAD_CLIENT = new FileUploadDownloadClient();\n \n+  public static URI generateSegmentTarURI(URI outputDirURI, URI fileURI, String prefix, String suffix) {\n+    if (StringUtils.isEmpty(prefix) && StringUtils.isEmpty(suffix)) {\n+      // In case the FS doesn't provide scheme or host, will fill it up from outputDirURI.\n+      String scheme = fileURI.getScheme();\n+      if (StringUtils.isEmpty(fileURI.getScheme())) {\n+        scheme = outputDirURI.getScheme();\n+      }\n+      String host = fileURI.getHost();\n+      if (StringUtils.isEmpty(fileURI.getHost())) {\n+        host = outputDirURI.getHost();\n+      }\n+      try {\n+        return new URI(scheme, fileURI.getUserInfo(), host, fileURI.getPort(), fileURI.getPath(), fileURI.getQuery(),\n+            fileURI.getFragment());\n+      } catch (URISyntaxException e) {\n+        return fileURI;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4874e7a478c1b809a4ccbc07a51940df9d1eb613"}, "originalPosition": 27}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4028, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}