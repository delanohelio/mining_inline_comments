{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI1NTM0OTU5", "number": 5470, "title": "Derive numDocsPerChunk for var byte raw index from metadata only if config is enabled.", "bodyText": "Description\n\nPR #5256 added support for deriving num docs per chunk for var byte raw index create from column length. This was specifically\ndone as part of supporting large text values. For use cases that don't want this feature and are high QPS, they see a negative impact since size of chunk increases (earlier value\nof numDocsPerChunk was hardcoded to 1000) and based on the access pattern we might end up uncompressing a bigger chunk to get values for a set of docIds. We have made this change configurable. So the default behavior is same as old (1000 docs per chunk. It can be enabled as follows. We will make the text search use cases specifically enable this if they are using blobs\n\nfieldConfigList\":[\n   {\n     \"name\":\"textCol\",\n     \"encodingType\":\"RAW\",\n     \"indexType\":\"TEXT\",\n     \"properties\":{\n        \"derive.num.docs.per.chunk.raw.index\":\"true\",\n      }\n    }\n\n\n\nPR #4791 added support for noDict for STRING/BYTES in consuming segments. Before PR 4791, even if user had STRING/BYTES as no dictionary in table config, consuming segment still created dictionary because of the lack of support for raw index.  There is a particular impact of this change on the use cases that have set noDict on their STRING dimension columns for other performance reasons and also want metricsAggregation. These use cases don't get to aggregateMetrics because the new implementation was able to honor their table config setting of noDict on STRING/BYTES and created a raw index. Without metrics aggregation, memory pressure increases. So to continue aggregating metrics for such cases, we will create dictionary for STRING/BYTES even if the column is part of noDictionary set from table config.\n\nUpgrade Notes\nDoes this PR prevent a zero down-time upgrade? (Assume upgrade order: Controller, Broker, Server, Minion)\n\n Yes (Please label as backward-incompat, and complete the section below on Release Notes)\n\nDoes this PR fix a zero-downtime upgrade introduced earlier?\n\n Yes (Please label this as backward-incompat, and complete the section below on Release Notes)\n\nDoes this PR otherwise need attention when creating release notes? Things to consider:\n\nNew configuration options\nDeprecation of configurations\nSignature changes to public methods/interfaces\nNew plugins added or old plugins removed\n\n\n Yes (Please label this PR as release-notes and complete the section on Release Notes)\n\nRelease Notes\nIf you have tagged this as either backward-incompat or release-notes,\nyou MUST add text here that you would like to see appear in release notes of the\nnext release.\nIf you have a series of commits adding or enabling a feature, then\nadd this section only in final commit that marks the feature completed.\nRefer to earlier release notes to see examples of text\nDocumentation\nIf you have introduced a new feature or configuration, please add it to the documentation as well.\nSee https://docs.pinot.apache.org/developers/developers-and-contributors/update-document", "createdAt": "2020-05-30T23:13:28Z", "url": "https://github.com/apache/pinot/pull/5470", "merged": true, "mergeCommit": {"oid": "ee21e793c0365f538bcb3b801f47122c59fc0e04"}, "closed": true, "closedAt": "2020-05-31T02:21:24Z", "author": {"login": "siddharthteotia"}, "timelineItems": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcmfn4EgBqjMzOTAxNDQ2ODY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcmg0AJABqjMzOTAxODM4MTQ=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "4ebfc1ba50e688a153f86b5b9cdf095d2f384aa2", "author": {"user": null}, "url": "https://github.com/apache/pinot/commit/4ebfc1ba50e688a153f86b5b9cdf095d2f384aa2", "committedDate": "2020-05-30T23:16:49Z", "message": "docs"}, "afterCommit": {"oid": "cadfcaee026d53bc603dea0b6806922e1eaafb19", "author": {"user": null}, "url": "https://github.com/apache/pinot/commit/cadfcaee026d53bc603dea0b6806922e1eaafb19", "committedDate": "2020-05-30T23:25:21Z", "message": "Two changes:\n\n(1) PR https://github.com/apache/incubator-pinot/pull/5256\nadded support for deriving num docs per chunk for var byte\nraw index create from column length. This was specifically\ndone as part of supporting text blobs. For use cases that\ndon't want this feature and are high QPS, see a negative\nimpact since size of chunk increases (earlier value\nof numDocsPerChunk was hardcoded to 1000) and based on the\naccess pattern we might end up uncompressing a bigger chunk to get values\nfor a set of docIds. We have made this change configurable.\nSo the default behaviour is same as old (1000 docs per chunk)\n\n(2) PR https://github.com/apache/incubator-pinot/pull/4791\nadded support for noDict for STRING/BYTES in consuming segments.\nThere is a particular impact of this change on the use cases\nthat have set noDict on their STRING dimension columns for other performance\nreasons and also want metricsAggregation. These use cases don't get to\naggregateMetrics because the new implementation was able to honor their\ntable config setting of noDict on STRING/BYTES. Without metrics aggregation,\nmemory pressure increases. So to continue aggregating metrics for such cases,\nwe will create dictionary even if the column is part of noDictionary set\nfrom table config."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIxNDUwMjQ3", "url": "https://github.com/apache/pinot/pull/5470#pullrequestreview-421450247", "createdAt": "2020-05-30T23:26:27Z", "commit": {"oid": "4ebfc1ba50e688a153f86b5b9cdf095d2f384aa2"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0zMFQyMzoyNjozNlrOGc11VQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0zMFQyMzoyODowOFrOGc11zA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjg5NTMxNw==", "bodyText": "deriveNumDocsPerChunk sounds more accurate? (applicable to all related config & variable names)", "url": "https://github.com/apache/pinot/pull/5470#discussion_r432895317", "createdAt": "2020-05-30T23:26:36Z", "author": {"login": "snleee"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/segment/creator/impl/SegmentColumnarIndexCreator.java", "diffHunk": "@@ -193,9 +194,10 @@ public void init(SegmentGeneratorConfig segmentCreationSpec, SegmentIndexCreatio\n             getColumnCompressionType(segmentCreationSpec, fieldSpec);\n \n         // Initialize forward index creator\n+        boolean deriveNumChunksForVarByteRawIndex = shouldDeriveNumChunksForRawIndex(columnName, segmentCreationSpec.getColumnProperties());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cadfcaee026d53bc603dea0b6806922e1eaafb19"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjg5NTQzNg==", "bodyText": "What was the original behavior before your recent change? Did we explicitly check STRING and BYTES types also?", "url": "https://github.com/apache/pinot/pull/5470#discussion_r432895436", "createdAt": "2020-05-30T23:28:08Z", "author": {"login": "snleee"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/indexsegment/mutable/MutableSegmentImpl.java", "diffHunk": "@@ -330,8 +330,32 @@ public long getLatestIngestionTimestamp() {\n    */\n   private boolean isNoDictionaryColumn(Set<String> noDictionaryColumns, Set<String> invertedIndexColumns,\n       Set<String> textIndexColumns, FieldSpec fieldSpec, String column) {\n-    return textIndexColumns.contains(column) || (noDictionaryColumns.contains(column) && fieldSpec.isSingleValueField()\n-        && !invertedIndexColumns.contains(column));\n+    if (textIndexColumns.contains(column)) {\n+      // text column is no dictionary currently\n+      return true;\n+    }\n+    FieldSpec.DataType dataType = fieldSpec.getDataType();\n+    if (noDictionaryColumns.contains(column)) {\n+      // Earlier we didn't support noDict in consuming segments for STRING and BYTES columns.\n+      // So even if the user had the column in noDictionaryColumns set in table config, we still\n+      // created dictionary in consuming segments.\n+      // Later on we added this support. There is a particular impact of this change on the use cases\n+      // that have set noDict on their STRING dimension columns for other performance\n+      // reasons and also want metricsAggregation. These use cases don't get to\n+      // aggregateMetrics because the new implementation is able to honor their table config setting\n+      // of noDict on STRING/BYTES. Without metrics aggregation, memory pressure increases.\n+      // So to continue aggregating metrics for such cases, we will create dictionary even\n+      // if the column is part of noDictionary set from table config\n+      if (fieldSpec instanceof DimensionFieldSpec && _aggregateMetrics && (dataType == FieldSpec.DataType.STRING ||", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cadfcaee026d53bc603dea0b6806922e1eaafb19"}, "originalPosition": 22}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIxNDUwNzc4", "url": "https://github.com/apache/pinot/pull/5470#pullrequestreview-421450778", "createdAt": "2020-05-30T23:41:23Z", "commit": {"oid": "cadfcaee026d53bc603dea0b6806922e1eaafb19"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0zMFQyMzo0MToyM1rOGc14Ew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0zMFQyMzo0MToyM1rOGc14Ew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjg5NjAxOQ==", "bodyText": "The description of textIndexColumns is missing in this method.", "url": "https://github.com/apache/pinot/pull/5470#discussion_r432896019", "createdAt": "2020-05-30T23:41:23Z", "author": {"login": "jackjlli"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/indexsegment/mutable/MutableSegmentImpl.java", "diffHunk": "@@ -330,8 +330,32 @@ public long getLatestIngestionTimestamp() {\n    */\n   private boolean isNoDictionaryColumn(Set<String> noDictionaryColumns, Set<String> invertedIndexColumns,\n       Set<String> textIndexColumns, FieldSpec fieldSpec, String column) {\n-    return textIndexColumns.contains(column) || (noDictionaryColumns.contains(column) && fieldSpec.isSingleValueField()\n-        && !invertedIndexColumns.contains(column));\n+    if (textIndexColumns.contains(column)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cadfcaee026d53bc603dea0b6806922e1eaafb19"}, "originalPosition": 6}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIxNDUxMTc2", "url": "https://github.com/apache/pinot/pull/5470#pullrequestreview-421451176", "createdAt": "2020-05-30T23:54:37Z", "commit": {"oid": "1b7c94560dad927561df2161edd085f6f8066dfc"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIxNDUxMjE5", "url": "https://github.com/apache/pinot/pull/5470#pullrequestreview-421451219", "createdAt": "2020-05-30T23:55:58Z", "commit": {"oid": "1b7c94560dad927561df2161edd085f6f8066dfc"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0zMFQyMzo1NTo1OFrOGc16lA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0zMVQwMDowMDowOFrOGc17Tg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjg5NjY2MA==", "bodyText": "Log message for this?", "url": "https://github.com/apache/pinot/pull/5470#discussion_r432896660", "createdAt": "2020-05-30T23:55:58Z", "author": {"login": "mayankshriv"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/indexsegment/mutable/MutableSegmentImpl.java", "diffHunk": "@@ -330,8 +330,32 @@ public long getLatestIngestionTimestamp() {\n    */\n   private boolean isNoDictionaryColumn(Set<String> noDictionaryColumns, Set<String> invertedIndexColumns,\n       Set<String> textIndexColumns, FieldSpec fieldSpec, String column) {\n-    return textIndexColumns.contains(column) || (noDictionaryColumns.contains(column) && fieldSpec.isSingleValueField()\n-        && !invertedIndexColumns.contains(column));\n+    if (textIndexColumns.contains(column)) {\n+      // text column is no dictionary currently\n+      return true;\n+    }\n+    FieldSpec.DataType dataType = fieldSpec.getDataType();\n+    if (noDictionaryColumns.contains(column)) {\n+      // Earlier we didn't support noDict in consuming segments for STRING and BYTES columns.\n+      // So even if the user had the column in noDictionaryColumns set in table config, we still\n+      // created dictionary in consuming segments.\n+      // Later on we added this support. There is a particular impact of this change on the use cases\n+      // that have set noDict on their STRING dimension columns for other performance\n+      // reasons and also want metricsAggregation. These use cases don't get to\n+      // aggregateMetrics because the new implementation is able to honor their table config setting\n+      // of noDict on STRING/BYTES. Without metrics aggregation, memory pressure increases.\n+      // So to continue aggregating metrics for such cases, we will create dictionary even\n+      // if the column is part of noDictionary set from table config\n+      if (fieldSpec instanceof DimensionFieldSpec && _aggregateMetrics && (dataType == FieldSpec.DataType.STRING ||", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjg5NTQzNg=="}, "originalCommit": {"oid": "cadfcaee026d53bc603dea0b6806922e1eaafb19"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjg5Njg0Ng==", "bodyText": "Defaults to false, right?", "url": "https://github.com/apache/pinot/pull/5470#discussion_r432896846", "createdAt": "2020-05-31T00:00:08Z", "author": {"login": "mayankshriv"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/segment/creator/impl/SegmentColumnarIndexCreator.java", "diffHunk": "@@ -213,6 +215,14 @@ public void init(SegmentGeneratorConfig segmentCreationSpec, SegmentIndexCreatio\n     }\n   }\n \n+  public static boolean shouldDeriveNumDocsPerChunk(String columnName, Map<String, Map<String, String>> columnProperties) {\n+    if (columnProperties != null) {\n+      Map<String, String> properties = columnProperties.get(columnName);\n+      return properties != null && Boolean.parseBoolean(properties.get(FieldConfig.DERIVE_NUM_DOCS_PER_CHUNK_RAW_INDEX_KEY));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b7c94560dad927561df2161edd085f6f8066dfc"}, "originalPosition": 27}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "af9bc3077ae4869aa02757a706cc89e0ebf4d953", "author": {"user": null}, "url": "https://github.com/apache/pinot/commit/af9bc3077ae4869aa02757a706cc89e0ebf4d953", "committedDate": "2020-05-31T00:48:30Z", "message": "Two changes:\n\n(1) PR https://github.com/apache/incubator-pinot/pull/5256\nadded support for deriving num docs per chunk for var byte\nraw index create from column length. This was specifically\ndone as part of supporting text blobs. For use cases that\ndon't want this feature and are high QPS, see a negative\nimpact since size of chunk increases (earlier value\nof numDocsPerChunk was hardcoded to 1000) and based on the\naccess pattern we might end up uncompressing a bigger chunk to get values\nfor a set of docIds. We have made this change configurable.\nSo the default behaviour is same as old (1000 docs per chunk)\n\n(2) PR https://github.com/apache/incubator-pinot/pull/4791\nadded support for noDict for STRING/BYTES in consuming segments.\nThere is a particular impact of this change on the use cases\nthat have set noDict on their STRING dimension columns for other performance\nreasons and also want metricsAggregation. These use cases don't get to\naggregateMetrics because the new implementation was able to honor their\ntable config setting of noDict on STRING/BYTES. Without metrics aggregation,\nmemory pressure increases. So to continue aggregating metrics for such cases,\nwe will create dictionary even if the column is part of noDictionary set\nfrom table config."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f56481d55f1c7b294629b4ed66f4b869f89036f0", "author": {"user": null}, "url": "https://github.com/apache/pinot/commit/f56481d55f1c7b294629b4ed66f4b869f89036f0", "committedDate": "2020-05-31T00:38:56Z", "message": "review comments"}, "afterCommit": {"oid": "af9bc3077ae4869aa02757a706cc89e0ebf4d953", "author": {"user": null}, "url": "https://github.com/apache/pinot/commit/af9bc3077ae4869aa02757a706cc89e0ebf4d953", "committedDate": "2020-05-31T00:48:30Z", "message": "Two changes:\n\n(1) PR https://github.com/apache/incubator-pinot/pull/5256\nadded support for deriving num docs per chunk for var byte\nraw index create from column length. This was specifically\ndone as part of supporting text blobs. For use cases that\ndon't want this feature and are high QPS, see a negative\nimpact since size of chunk increases (earlier value\nof numDocsPerChunk was hardcoded to 1000) and based on the\naccess pattern we might end up uncompressing a bigger chunk to get values\nfor a set of docIds. We have made this change configurable.\nSo the default behaviour is same as old (1000 docs per chunk)\n\n(2) PR https://github.com/apache/incubator-pinot/pull/4791\nadded support for noDict for STRING/BYTES in consuming segments.\nThere is a particular impact of this change on the use cases\nthat have set noDict on their STRING dimension columns for other performance\nreasons and also want metricsAggregation. These use cases don't get to\naggregateMetrics because the new implementation was able to honor their\ntable config setting of noDict on STRING/BYTES. Without metrics aggregation,\nmemory pressure increases. So to continue aggregating metrics for such cases,\nwe will create dictionary even if the column is part of noDictionary set\nfrom table config."}}]}}}, "rateLimit": {"limit": 5000, "remaining": 869, "cost": 1, "resetAt": "2021-10-28T18:00:02Z"}}}