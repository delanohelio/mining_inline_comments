{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDEzODg1Mjgy", "number": 5339, "title": "Add api in AggregationFunction to get its compiled input expressions.", "bodyText": "With aggregation functions now taking multiple agruments, only the functions themselves\nhave the knowledge on how to interpret these arguments. This poses a problem for the planning\nphase on what columns need to be projected and what expressions need to be computed.\nWith this change, AggregationFunction's are now responsible for providing what inputs they need.\n\n\nAdded a new api in AggregationFunction interface getInputExpressions(), that returns a list\nof compiled TransformExpressionTrees that the aggregation function needs as input to compute.\n\n\nCleaned up the chaining data dependency during planning phase. Before this PR, all planning nodes\nreceive the BrokerRequest (and pass to their child plan node) to extract out all information needed.\nWith this change:\n\nAggregation plan nodes only specify the expression trees they need from Transform plan nodes, and\nTransform plan nodes use that to specify what columns they need from projection plan nodes.\n\n\n\nTODO: Ideally we should completely eliminate passing of BrokerRequest throughout the chain plan nodes,\nand only pass minimal information instead. This change only does so for projection columns. A TODO here\nis to extend it to FilterPlanNode and deeper.", "createdAt": "2020-05-06T05:27:33Z", "url": "https://github.com/apache/pinot/pull/5339", "merged": true, "mergeCommit": {"oid": "347a97f8964ae1d4ae950b7dac1e8fda39805974"}, "closed": true, "closedAt": "2020-05-06T21:27:54Z", "author": {"login": "mayankshriv"}, "timelineItems": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcepHXnABqjMzMDg2MjkwNDA=", "endCursor": "Y3Vyc29yOnYyOpPPAAABceueGLgBqjMzMTAxMTQ2OTY=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c76629c899eaf1d1f3586697fbfe34d209373885", "author": {"user": {"login": "mayankshriv", "name": "Mayank Shrivastava"}}, "url": "https://github.com/apache/pinot/commit/c76629c899eaf1d1f3586697fbfe34d209373885", "committedDate": "2020-05-06T05:17:04Z", "message": "Add api in AggregationFunction to return the its compiled input expressions.\n\nWith aggregation functions now taking multiple agruments, only the functions themselves\nhave the knowledge on how to interpret these arguments. This poses a problem for the planning\nphase on what columns need to be projected and what expressions need to be computed.\nWith this change, AggregationFunction's are now responsible for providing what inputs they need.\n\n1. Added a new api in AggregationFunction interface `getInputExpressions()`, that returns a list\n   of compiled TransformExpressionTrees that the aggregation function needs as input to compute.\n\n2. Cleaned up the chaining data dependency during planning phase. Before this PR, all planning nodes\n   receive the BrokerRequest (and pass to their child plan node) to extract out all information needed.\n   With this change:\n   - Aggregation plan nodes only specify the expression trees they need from Transform plan nodes, and\n     Transform plan nodes use that to specify what columns they need from projection plan nodes.\n\nTODO: Ideally we should completely eliminate passing of BrokerRequest throughout the chain plan nodes,\nand only pass minimal information instead. This change only does so for projection columns. A TODO here\nis to extend it to FilterPlanNode and deeper."}, "afterCommit": {"oid": "37dc52cc5a8f38d795991ec9998ca397b1d02c4e", "author": {"user": {"login": "mayankshriv", "name": "Mayank Shrivastava"}}, "url": "https://github.com/apache/pinot/commit/37dc52cc5a8f38d795991ec9998ca397b1d02c4e", "committedDate": "2020-05-06T13:57:10Z", "message": "Add api in AggregationFunction to return the its compiled input expressions.\n\nWith aggregation functions now taking multiple agruments, only the functions themselves\nhave the knowledge on how to interpret these arguments. This poses a problem for the planning\nphase on what columns need to be projected and what expressions need to be computed.\nWith this change, AggregationFunction's are now responsible for providing what inputs they need.\n\n1. Added a new api in AggregationFunction interface `getInputExpressions()`, that returns a list\n   of compiled TransformExpressionTrees that the aggregation function needs as input to compute.\n\n2. Cleaned up the chaining data dependency during planning phase. Before this PR, all planning nodes\n   receive the BrokerRequest (and pass to their child plan node) to extract out all information needed.\n   With this change:\n   - Aggregation plan nodes only specify the expression trees they need from Transform plan nodes, and\n     Transform plan nodes use that to specify what columns they need from projection plan nodes.\n\nTODO: Ideally we should completely eliminate passing of BrokerRequest throughout the chain plan nodes,\nand only pass minimal information instead. This change only does so for projection columns. A TODO here\nis to extend it to FilterPlanNode and deeper."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "37dc52cc5a8f38d795991ec9998ca397b1d02c4e", "author": {"user": {"login": "mayankshriv", "name": "Mayank Shrivastava"}}, "url": "https://github.com/apache/pinot/commit/37dc52cc5a8f38d795991ec9998ca397b1d02c4e", "committedDate": "2020-05-06T13:57:10Z", "message": "Add api in AggregationFunction to return the its compiled input expressions.\n\nWith aggregation functions now taking multiple agruments, only the functions themselves\nhave the knowledge on how to interpret these arguments. This poses a problem for the planning\nphase on what columns need to be projected and what expressions need to be computed.\nWith this change, AggregationFunction's are now responsible for providing what inputs they need.\n\n1. Added a new api in AggregationFunction interface `getInputExpressions()`, that returns a list\n   of compiled TransformExpressionTrees that the aggregation function needs as input to compute.\n\n2. Cleaned up the chaining data dependency during planning phase. Before this PR, all planning nodes\n   receive the BrokerRequest (and pass to their child plan node) to extract out all information needed.\n   With this change:\n   - Aggregation plan nodes only specify the expression trees they need from Transform plan nodes, and\n     Transform plan nodes use that to specify what columns they need from projection plan nodes.\n\nTODO: Ideally we should completely eliminate passing of BrokerRequest throughout the chain plan nodes,\nand only pass minimal information instead. This change only does so for projection columns. A TODO here\nis to extend it to FilterPlanNode and deeper."}, "afterCommit": {"oid": "f02f5f382155389e847943e93aca915b0829bcd2", "author": {"user": {"login": "mayankshriv", "name": "Mayank Shrivastava"}}, "url": "https://github.com/apache/pinot/commit/f02f5f382155389e847943e93aca915b0829bcd2", "committedDate": "2020-05-06T13:59:54Z", "message": "Add api in AggregationFunction to get compiled input expressions.\n\nWith aggregation functions now taking multiple agruments, only the functions themselves\nhave the knowledge on how to interpret these arguments. This poses a problem for the planning\nphase on what columns need to be projected and what expressions need to be computed.\nWith this change, AggregationFunction's are now responsible for providing what inputs they need.\n\n1. Added a new api in AggregationFunction interface `getInputExpressions()`, that returns a list\n   of compiled TransformExpressionTrees that the aggregation function needs as input to compute.\n\n2. Cleaned up the chaining data dependency during planning phase. Before this PR, all planning nodes\n   receive the BrokerRequest (and pass to their child plan node) to extract out all information needed.\n   With this change:\n   - Aggregation plan nodes only specify the expression trees they need from Transform plan nodes, and\n     Transform plan nodes use that to specify what columns they need from projection plan nodes.\n\nTODO: Ideally we should completely eliminate passing of BrokerRequest throughout the chain plan nodes,\nand only pass minimal information instead. This change only does so for projection columns. A TODO here\nis to extend it to FilterPlanNode and deeper."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA2ODgyNjkz", "url": "https://github.com/apache/pinot/pull/5339#pullrequestreview-406882693", "createdAt": "2020-05-06T18:34:03Z", "commit": {"oid": "f02f5f382155389e847943e93aca915b0829bcd2"}, "state": "APPROVED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxODozNDowM1rOGRgMJw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxODozOTo1MFrOGRgZnQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTAwNjM3NQ==", "bodyText": "This logic should also be handle in the upper level (SelectionPlanNode) and passed to this class", "url": "https://github.com/apache/pinot/pull/5339#discussion_r421006375", "createdAt": "2020-05-06T18:34:03Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/plan/TransformPlanNode.java", "diffHunk": "@@ -43,76 +39,70 @@\n \n   private final String _segmentName;\n   private final ProjectionPlanNode _projectionPlanNode;\n-  private final Set<String> _projectionColumns = new HashSet<>();\n-  private final Set<TransformExpressionTree> _expressions = new HashSet<>();\n+  private final Set<TransformExpressionTree> _expressions;\n   private int _maxDocPerNextCall = DocIdSetPlanNode.MAX_DOC_PER_CALL;\n \n-  public TransformPlanNode(IndexSegment indexSegment, BrokerRequest brokerRequest) {\n+  public TransformPlanNode(IndexSegment indexSegment, BrokerRequest brokerRequest,\n+      Set<TransformExpressionTree> expressionsToPlan) {\n     _segmentName = indexSegment.getSegmentName();\n-    extractColumnsAndTransforms(brokerRequest, indexSegment);\n-    _projectionPlanNode = new ProjectionPlanNode(indexSegment, _projectionColumns,\n+\n+    setMaxDocsForSelection(brokerRequest);\n+    Set<String> projectionColumns = new HashSet<>();\n+    extractProjectionColumns(expressionsToPlan, projectionColumns);\n+\n+    _expressions = expressionsToPlan;\n+    _projectionPlanNode = new ProjectionPlanNode(indexSegment, projectionColumns,\n         new DocIdSetPlanNode(indexSegment, brokerRequest, _maxDocPerNextCall));\n   }\n \n+  private void extractProjectionColumns(Set<TransformExpressionTree> expressionsToPlan, Set<String> projectionColumns) {\n+    for (TransformExpressionTree expression : expressionsToPlan) {\n+      extractProjectionColumns(expression, projectionColumns);\n+    }\n+  }\n+\n+  private void extractProjectionColumns(TransformExpressionTree expression, Set<String> projectionColumns) {\n+    TransformExpressionTree.ExpressionType expressionType = expression.getExpressionType();\n+    switch (expressionType) {\n+      case FUNCTION:\n+        for (TransformExpressionTree child : expression.getChildren()) {\n+          extractProjectionColumns(child, projectionColumns);\n+        }\n+        break;\n+\n+      case IDENTIFIER:\n+        projectionColumns.add(expression.getValue());\n+        break;\n+\n+      case LITERAL:\n+        // Do nothing.\n+        break;\n+\n+      default:\n+        throw new UnsupportedOperationException(\"Unsupported expression type: \" + expressionType);\n+    }\n+  }\n+\n   /**\n-   * Helper method to extract projection columns and transform expressions from the given broker request.\n+   * Helper method to set the max number of docs to return for selection queries\n    */\n-  private void extractColumnsAndTransforms(BrokerRequest brokerRequest, IndexSegment indexSegment) {\n-    Set<String> columns = new HashSet<>();\n-    if (brokerRequest.isSetAggregationsInfo()) {\n-      // Extract aggregation expressions\n-      for (AggregationInfo aggregationInfo : brokerRequest.getAggregationsInfo()) {\n-        if (aggregationInfo.getAggregationType().equalsIgnoreCase(AggregationFunctionType.DISTINCT.getName())) {\n-          // 'DISTINCT(col1, col2 ...)' is modeled as one single aggregation function\n-          List<String> distinctColumns = AggregationFunctionUtils.getAggregationExpressions(aggregationInfo);\n-          columns.addAll(distinctColumns);\n-        } else if (!aggregationInfo.getAggregationType().equalsIgnoreCase(AggregationFunctionType.COUNT.getName())) {\n-          columns.addAll(AggregationFunctionUtils.getAggregationExpressions(aggregationInfo));\n-        }\n-      }\n-      // Extract group-by expressions\n-      if (brokerRequest.isSetGroupBy()) {\n-        columns.addAll(brokerRequest.getGroupBy().getExpressions());\n-      }\n-    } else {\n+  private void setMaxDocsForSelection(BrokerRequest brokerRequest) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f02f5f382155389e847943e93aca915b0829bcd2"}, "originalPosition": 92}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTAwNzYyMw==", "bodyText": "(nit) expressionsToPlan -> expressions?\nAlso pass maxDocsPerBlock from upper level?", "url": "https://github.com/apache/pinot/pull/5339#discussion_r421007623", "createdAt": "2020-05-06T18:36:13Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/plan/TransformPlanNode.java", "diffHunk": "@@ -43,76 +39,70 @@\n \n   private final String _segmentName;\n   private final ProjectionPlanNode _projectionPlanNode;\n-  private final Set<String> _projectionColumns = new HashSet<>();\n-  private final Set<TransformExpressionTree> _expressions = new HashSet<>();\n+  private final Set<TransformExpressionTree> _expressions;\n   private int _maxDocPerNextCall = DocIdSetPlanNode.MAX_DOC_PER_CALL;\n \n-  public TransformPlanNode(IndexSegment indexSegment, BrokerRequest brokerRequest) {\n+  public TransformPlanNode(IndexSegment indexSegment, BrokerRequest brokerRequest,\n+      Set<TransformExpressionTree> expressionsToPlan) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f02f5f382155389e847943e93aca915b0829bcd2"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTAwODcxNg==", "bodyText": "(nit) We don't have return argument documented in this file, maybe keep it consistent?", "url": "https://github.com/apache/pinot/pull/5339#discussion_r421008716", "createdAt": "2020-05-06T18:37:55Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/query/aggregation/function/AggregationFunction.java", "diffHunk": "@@ -49,6 +51,13 @@\n    */\n   String getResultColumnName();\n \n+  /**\n+   * Returns a list of input expressions needed for performing aggregation.\n+   *\n+   * @return List of input expressions", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f02f5f382155389e847943e93aca915b0829bcd2"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTAwOTM5OQ==", "bodyText": "No need to specialize this. Just make CountAggregationFunction return empty list", "url": "https://github.com/apache/pinot/pull/5339#discussion_r421009399", "createdAt": "2020-05-06T18:39:05Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/query/aggregation/function/AggregationFunctionUtils.java", "diffHunk": "@@ -182,4 +187,37 @@ public static String concatArgs(List<String> arguments) {\n     return (arguments.size() > 1) ? String.join(CompilerConstants.AGGREGATION_FUNCTION_ARG_SEPARATOR, arguments)\n         : arguments.get(0);\n   }\n+\n+  /**\n+   * Compiles and returns all transform expressions required for computing the aggregation, group-by\n+   * and order-by\n+   *\n+   * @param brokerRequest Broker Request\n+   * @param functionContexts Aggregation Function contexts\n+   * @return Set of compiled expressions in the aggregation, group-by and order-by clauses\n+   */\n+  public static Set<TransformExpressionTree> collectExpressionsToTransform(BrokerRequest brokerRequest,\n+      AggregationFunctionContext[] functionContexts) {\n+\n+    Set<TransformExpressionTree> expressionTrees = new LinkedHashSet<>();\n+    for (AggregationFunctionContext functionContext : functionContexts) {\n+      AggregationFunction function = functionContext.getAggregationFunction();\n+\n+      // Count is always treated as count(*) and does not need any columns to be projected.\n+      if (!function.getType().equals(AggregationFunctionType.COUNT)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f02f5f382155389e847943e93aca915b0829bcd2"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTAwOTgyMQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                return null;\n          \n          \n            \n                return Collections.emptyList();", "url": "https://github.com/apache/pinot/pull/5339#discussion_r421009821", "createdAt": "2020-05-06T18:39:50Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/query/aggregation/function/CountAggregationFunction.java", "diffHunk": "@@ -57,6 +59,11 @@ public String getResultColumnName() {\n     return AggregationFunctionType.COUNT.getName().toLowerCase() + \"(*)\";\n   }\n \n+  @Override\n+  public List<TransformExpressionTree> getInputExpressions() {\n+    return null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f02f5f382155389e847943e93aca915b0829bcd2"}, "originalPosition": 17}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f1cd04a6a4170273d98c8971d5e6ff6b01f72c4c", "author": {"user": {"login": "mayankshriv", "name": "Mayank Shrivastava"}}, "url": "https://github.com/apache/pinot/commit/f1cd04a6a4170273d98c8971d5e6ff6b01f72c4c", "committedDate": "2020-05-06T20:11:49Z", "message": "Add api in AggregationFunction to get compiled input expressions.\n\nWith aggregation functions now taking multiple agruments, only the functions themselves\nhave the knowledge on how to interpret these arguments. This poses a problem for the planning\nphase on what columns need to be projected and what expressions need to be computed.\nWith this change, AggregationFunction's are now responsible for providing what inputs they need.\n\n1. Added a new api in AggregationFunction interface `getInputExpressions()`, that returns a list\n   of compiled TransformExpressionTrees that the aggregation function needs as input to compute.\n\n2. Cleaned up the chaining data dependency during planning phase. Before this PR, all planning nodes\n   receive the BrokerRequest (and pass to their child plan node) to extract out all information needed.\n   With this change:\n   - Aggregation plan nodes only specify the expression trees they need from Transform plan nodes, and\n     Transform plan nodes use that to specify what columns they need from projection plan nodes.\n\nTODO: Ideally we should completely eliminate passing of BrokerRequest throughout the chain plan nodes,\nand only pass minimal information instead. This change only does so for projection columns. A TODO here\nis to extend it to FilterPlanNode and deeper."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f02f5f382155389e847943e93aca915b0829bcd2", "author": {"user": {"login": "mayankshriv", "name": "Mayank Shrivastava"}}, "url": "https://github.com/apache/pinot/commit/f02f5f382155389e847943e93aca915b0829bcd2", "committedDate": "2020-05-06T13:59:54Z", "message": "Add api in AggregationFunction to get compiled input expressions.\n\nWith aggregation functions now taking multiple agruments, only the functions themselves\nhave the knowledge on how to interpret these arguments. This poses a problem for the planning\nphase on what columns need to be projected and what expressions need to be computed.\nWith this change, AggregationFunction's are now responsible for providing what inputs they need.\n\n1. Added a new api in AggregationFunction interface `getInputExpressions()`, that returns a list\n   of compiled TransformExpressionTrees that the aggregation function needs as input to compute.\n\n2. Cleaned up the chaining data dependency during planning phase. Before this PR, all planning nodes\n   receive the BrokerRequest (and pass to their child plan node) to extract out all information needed.\n   With this change:\n   - Aggregation plan nodes only specify the expression trees they need from Transform plan nodes, and\n     Transform plan nodes use that to specify what columns they need from projection plan nodes.\n\nTODO: Ideally we should completely eliminate passing of BrokerRequest throughout the chain plan nodes,\nand only pass minimal information instead. This change only does so for projection columns. A TODO here\nis to extend it to FilterPlanNode and deeper."}, "afterCommit": {"oid": "f1cd04a6a4170273d98c8971d5e6ff6b01f72c4c", "author": {"user": {"login": "mayankshriv", "name": "Mayank Shrivastava"}}, "url": "https://github.com/apache/pinot/commit/f1cd04a6a4170273d98c8971d5e6ff6b01f72c4c", "committedDate": "2020-05-06T20:11:49Z", "message": "Add api in AggregationFunction to get compiled input expressions.\n\nWith aggregation functions now taking multiple agruments, only the functions themselves\nhave the knowledge on how to interpret these arguments. This poses a problem for the planning\nphase on what columns need to be projected and what expressions need to be computed.\nWith this change, AggregationFunction's are now responsible for providing what inputs they need.\n\n1. Added a new api in AggregationFunction interface `getInputExpressions()`, that returns a list\n   of compiled TransformExpressionTrees that the aggregation function needs as input to compute.\n\n2. Cleaned up the chaining data dependency during planning phase. Before this PR, all planning nodes\n   receive the BrokerRequest (and pass to their child plan node) to extract out all information needed.\n   With this change:\n   - Aggregation plan nodes only specify the expression trees they need from Transform plan nodes, and\n     Transform plan nodes use that to specify what columns they need from projection plan nodes.\n\nTODO: Ideally we should completely eliminate passing of BrokerRequest throughout the chain plan nodes,\nand only pass minimal information instead. This change only does so for projection columns. A TODO here\nis to extend it to FilterPlanNode and deeper."}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1000, "cost": 1, "resetAt": "2021-10-28T18:00:02Z"}}}