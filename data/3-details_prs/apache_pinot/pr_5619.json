{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM5NzQyNDQ3", "number": 5619, "title": "Fix double memory allocation during operator setup", "bodyText": "This is a fix for issue being seen in #5610\nThe call stack for the OOM is\n`Caused by: java.lang.OutOfMemoryError: Direct buffer memory\n\tat java.nio.Bits.reserveMemory(Bits.java:694) ~[?:1.8.0_252]\n\tat java.nio.DirectByteBuffer.<init>(DirectByteBuffer.java:123) ~[?:1.8.0_252]\n\tat java.nio.ByteBuffer.allocateDirect(ByteBuffer.java:311) ~[?:1.8.0_252]\n\tat org.apache.pinot.core.io.reader.impl.ChunkReaderContext.<init>(ChunkReaderContext.java:38)org.apache.pinot.core.io.reader.impl.v1.VarByteChunkSingleValueReader.createContext(VarByteChunkSingleValueReader.java:93) \norg.apache.pinot.core.io.reader.impl.v1.VarByteChunkSingleValueReader.createContext(VarByteChunkSingleValueReader.java:\n\tat org.apache.pinot.core.operator.docvalsets.SingleValueSet.<init>(SingleValueSet.java:35) ~[pinot-all-0.5.0-SNAPSHOT-jar-with-dependencies.jar:0.5.0-SNAPSHOT-01cdc55f514b10bee2d8108d9736d4b57c48b517]\n\tat org.apache.pinot.core.operator.blocks.SingleValueBlock.<init>(SingleValueBlock.java:41) ~[pinot-all-0.5.0-SNAPSHOT-jar-with-dependencies.jar:0.5.0-SNAPSHOT-01cdc55f514b10bee2d8108d9736d4b57c48b517]\n\tat org.apache.pinot.core.segment.index.datasource.BaseDataSource.getNextBlock(BaseDataSource.java:105) ~[pinot-all-0.5.0-SNAPSHOT-jar-with-dependencies.jar:0.5.0-SNAPSHOT-01cdc55f514b10bee2d8108d9736d4b57c48b517]\n\tat org.apache.pinot.core.operator.BaseOperator.nextBlock(BaseOperator.java:49) ~[pinot-all-0.5.0-SNAPSHOT-jar-with-dependencies.jar:0.5.0-SNAPSHOT-01cdc55f514b10bee2d8108d9736d4b57c48b517]\n\tat org.apache.pinot.core.common.DataFetcher.<init>(DataFetcher.java:65) ~[pinot-all-0.5.0-SNAPSHOT-jar-with-dependencies.jar:0.5.0-SNAPSHOT-01cdc55f514b10bee2d8108d9736d4b57c48b517]\n\tat org.apache.pinot.core.operator.ProjectionOperator.<init>(ProjectionOperator.java:46) ~[pinot-all-0.5.0-SNAPSHOT-jar-with-dependencies.jar:0.5.0-SNAPSHOT-01cdc55f514b10bee2d8108d9736d4b57c48b517]\n\tat org.apache.pinot.core.plan.ProjectionPlanNode.run(ProjectionPlanNode.java:51) ~[pinot-all-0.5.0-SNAPSHOT-jar-with-dependencies.jar:0.5.0-SNAPSHOT-01cdc55f514b10bee2d8108d9736d4b57c48b517]\n\tat org.apache.pinot.core.plan.TransformPlanNode.run(TransformPlanNode.java:103) ~[pinot-all-0.5.0-SNAPSHOT-jar-with-dependencies.jar:0.5.0-SNAPSHOT-01cdc55f514b10bee2d8108d9736d4b57c48b517]\n\tat org.apache.pinot.core.plan.SelectionPlanNode.run(SelectionPlanNode.java:55) ~[pinot-all-0.5.0-SNAPSHOT-jar-with-dependencies.jar:0.5.0-SNAPSHOT-01cdc55f514b10bee2d8108d9736d4b57c48b517]\n\tat org.apache.pinot.core.plan.CombinePlanNode$1.callJob(CombinePlanNode.java:122) ~[pinot-all-0.5.0-SNAPSHOT-jar-with-dependencies.jar:0.5.0-SNAPSHOT-01cdc55f514b10bee2d8108d9736d4b57c48b517]`\n\nThis implies that error happens essentially during execution setup phase when the operators are being setup and haven't begun the execution by passing data between them.\nAs per @fx19880617 , the call stack seems to be consistently reproducible as soon as the client upgrades to 0.4.0 in production and runs a SELECT * query on segments created in 0.3.0. At the top of the stack, there is ChunkReaderContext which allocates a chunk and fails with direct memory OOM. @fx19880617 verified that chunk size and numDocsPerChunk etc are same so it is the not case that in 0.4.0, we are suddenly allocating more memory in the ChunkReaderContext and thus failing.\nEither there is a leak or something else.\nAs part of PR #5510, one change made to SingleValueSet (also part of the call stack) was that reader context is now being created in the call to constructor as opposed to during every read call. There are two implications of this:\n\n\nEarlier since chunk reader context objects were created on a per call basis, they were essentially short lived and probably never made their way to perm gen. Thus were garbage collected thereby also leading to garbage collecting the direct byte buffer reference inside them and freeing up direct memory -- this is essentially how direct memory is freed up in JVM unless cleaner is called. Now since they are being allocated in the constructor, they have essentially become long-lived objects and are unlikely to be GCed as quickly as they were in the previous code. Thus, there will be memory pressure.\n\n\nThe second implication as explained below is worse and probably the actual root cause of the OOM reported by the customer.\n\n\nSee this code for creation of ProjectionOperator (note that it is part of call stack)\n`public ProjectionOperator(Map<String, DataSource> dataSourceMap, BaseOperator<DocIdSetBlock> docIdSetOperator) {\n    _dataSourceMap = dataSourceMap;\n    _dataBlockMap = new HashMap<>(dataSourceMap.size());\n    for (Map.Entry<String, DataSource> entry : dataSourceMap.entrySet()) {\n      _dataBlockMap.put(entry.getKey(), entry.getValue().nextBlock());\n    }\n    _docIdSetOperator = docIdSetOperator;\n    _dataBlockCache = new DataBlockCache(new DataFetcher(dataSourceMap));\n  }`\n\n_dataBlockMap.put(entry.getKey(), entry.getValue().nextBlock()); creates a block by going down the path of nextBlock() -> SingleValueBlock -> SingleValueSet -> constructor -> create reader context (direct memory allocated with the new PR)\nWe then create DataFetcher with dataSourceMap and this code again creates a block\ndataSourceMap.get(column).nextBlock().getBlockValueSet() thus essentially going down the same path again eventually creating SingleValueBlock -> SingleValueSet -> reader context. -> allocating direct memory\nSo the memory is being allocated twice and somewhere in the middle of doing this for the DataFetcher for a given column, we fail with OOM", "createdAt": "2020-06-25T07:13:30Z", "url": "https://github.com/apache/pinot/pull/5619", "merged": true, "mergeCommit": {"oid": "32feeb3e49821f10ffffa11bb4ffee0dc7fae2f8"}, "closed": true, "closedAt": "2020-06-25T22:13:09Z", "author": {"login": "siddharthteotia"}, "timelineItems": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcuqULVgFqTQzNzI3NDI3Nw==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcu1ZlrgBqjM0ODQxOTEwMjc=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM3Mjc0Mjc3", "url": "https://github.com/apache/pinot/pull/5619#pullrequestreview-437274277", "createdAt": "2020-06-25T08:24:39Z", "commit": {"oid": "7fa04f075f902d2e8346e79b6f337a3771fa3038"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM3ODIzMDM1", "url": "https://github.com/apache/pinot/pull/5619#pullrequestreview-437823035", "createdAt": "2020-06-25T20:11:20Z", "commit": {"oid": "f5c5660ca371d704c6cc11a9a3eed0dc3d42049f"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM3ODIyNDEx", "url": "https://github.com/apache/pinot/pull/5619#pullrequestreview-437822411", "createdAt": "2020-06-25T20:10:24Z", "commit": {"oid": "f5c5660ca371d704c6cc11a9a3eed0dc3d42049f"}, "state": "APPROVED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQyMDoxMDoyNFrOGpKGFQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQyMDoxMjozNlrOGpKKNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTgxMDE5Nw==", "bodyText": "Revert this line", "url": "https://github.com/apache/pinot/pull/5619#discussion_r445810197", "createdAt": "2020-06-25T20:10:24Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/common/DataFetcher.java", "diffHunk": "@@ -62,7 +62,7 @@ public DataFetcher(Map<String, DataSource> dataSourceMap) {\n       DataSource dataSource = entry.getValue();\n       _dictionaryMap.put(column, dataSource.getDictionary());\n       DataSourceMetadata dataSourceMetadata = dataSource.getDataSourceMetadata();\n-      BlockValSet blockValueSet = dataSource.nextBlock().getBlockValueSet();\n+      BlockValSet blockValueSet = dataSourceMap.get(column).nextBlock().getBlockValueSet();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f5c5660ca371d704c6cc11a9a3eed0dc3d42049f"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTgxMDk3NA==", "bodyText": "(nit) put this line after line 37", "url": "https://github.com/apache/pinot/pull/5619#discussion_r445810974", "createdAt": "2020-06-25T20:12:01Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/operator/blocks/MultiValueBlock.java", "diffHunk": "@@ -31,12 +31,15 @@\n \n @SuppressWarnings(\"rawtypes\")\n public final class MultiValueBlock implements Block {\n-  private final BlockValSet _blockValSet;\n+  private final SingleColumnMultiValueReader _reader;\n+  private final FieldSpec.DataType _dataType;\n+  private BlockValSet _blockValSet;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f5c5660ca371d704c6cc11a9a3eed0dc3d42049f"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTgxMTI1NA==", "bodyText": "(nit) Put this line after line 37", "url": "https://github.com/apache/pinot/pull/5619#discussion_r445811254", "createdAt": "2020-06-25T20:12:36Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/operator/blocks/SingleValueBlock.java", "diffHunk": "@@ -32,13 +32,14 @@\n @SuppressWarnings(\"rawtypes\")\n public final class SingleValueBlock implements Block {\n   private final SingleColumnSingleValueReader _reader;\n-  private final BlockValSet _blockValSet;\n+  private final FieldSpec.DataType _dataType;\n+  private BlockValSet _blockValSet;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f5c5660ca371d704c6cc11a9a3eed0dc3d42049f"}, "originalPosition": 6}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM3ODI4Mjg2", "url": "https://github.com/apache/pinot/pull/5619#pullrequestreview-437828286", "createdAt": "2020-06-25T20:19:13Z", "commit": {"oid": "f5c5660ca371d704c6cc11a9a3eed0dc3d42049f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQyMDoxOToxM1rOGpKXDQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQyMDoxOToxM1rOGpKXDQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTgxNDU0MQ==", "bodyText": "@Jackie-Jiang , I am concerned about the invocation of this in multi-threaded scenario. From the code, it doesn't look like it will happen since each query will create it's own. Thoughts?", "url": "https://github.com/apache/pinot/pull/5619#discussion_r445814541", "createdAt": "2020-06-25T20:19:13Z", "author": {"login": "siddharthteotia"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/operator/blocks/MultiValueBlock.java", "diffHunk": "@@ -47,6 +50,9 @@ public BlockDocIdSet getBlockDocIdSet() {\n \n   @Override\n   public BlockValSet getBlockValueSet() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f5c5660ca371d704c6cc11a9a3eed0dc3d42049f"}, "originalPosition": 21}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f5c5660ca371d704c6cc11a9a3eed0dc3d42049f", "author": {"user": null}, "url": "https://github.com/apache/pinot/commit/f5c5660ca371d704c6cc11a9a3eed0dc3d42049f", "committedDate": "2020-06-25T20:07:13Z", "message": "Address review comments"}, "afterCommit": {"oid": "af538002f92007992e94203959d7166656d111c7", "author": {"user": null}, "url": "https://github.com/apache/pinot/commit/af538002f92007992e94203959d7166656d111c7", "committedDate": "2020-06-25T20:38:12Z", "message": "Fix double memory allocation during operator setup"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cc2fa002f1fa78669e3c7f059c07b1fbda24065b", "author": {"user": null}, "url": "https://github.com/apache/pinot/commit/cc2fa002f1fa78669e3c7f059c07b1fbda24065b", "committedDate": "2020-06-25T21:19:14Z", "message": "Fix double memory allocation during operator setup"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "af538002f92007992e94203959d7166656d111c7", "author": {"user": null}, "url": "https://github.com/apache/pinot/commit/af538002f92007992e94203959d7166656d111c7", "committedDate": "2020-06-25T20:38:12Z", "message": "Fix double memory allocation during operator setup"}, "afterCommit": {"oid": "cc2fa002f1fa78669e3c7f059c07b1fbda24065b", "author": {"user": null}, "url": "https://github.com/apache/pinot/commit/cc2fa002f1fa78669e3c7f059c07b1fbda24065b", "committedDate": "2020-06-25T21:19:14Z", "message": "Fix double memory allocation during operator setup"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 706, "cost": 1, "resetAt": "2021-10-28T18:00:02Z"}}}