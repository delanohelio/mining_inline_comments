{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDEzODA4MDgx", "number": 5337, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxNjo0MzoyNFrOD55wYA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxODoyNToxOVrOD58OvQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyMDQxNjk2OnYy", "diffSide": "RIGHT", "path": "pinot-broker/src/main/java/org/apache/pinot/broker/routing/instanceselector/BaseInstanceSelector.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxNjo0MzoyNFrOGRb5WA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxODo1NDoxN1rOGRg8ew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDkzNjAyNA==", "bodyText": "we dont need this variable, we can use _unavailableSegments in line 110 right?", "url": "https://github.com/apache/pinot/pull/5337#discussion_r420936024", "createdAt": "2020-05-06T16:43:24Z", "author": {"login": "mcvsubbu"}, "path": "pinot-broker/src/main/java/org/apache/pinot/broker/routing/instanceselector/BaseInstanceSelector.java", "diffHunk": "@@ -85,94 +88,147 @@ public void onInstancesChange(Set<String> enabledInstances, List<String> changed\n       return;\n     }\n \n-    // Update the map from segment to enabled instances\n+    // Update the map from segment to enabled ONLINE/CONSUMING instances and set of unavailable segments (no enabled\n+    // instance or all enabled instances are in ERROR state)\n     // NOTE: We can directly modify the map because we will only update the values without changing the map entries.\n     // Because the map is marked as volatile, the running queries (already accessed the map) might use the enabled\n     // instances either before or after the change, which is okay; the following queries (not yet accessed the map) will\n     // get the updated value.\n-    Map<String, List<String>> segmentToInstancesMap = _segmentToInstancesMap;\n+    Map<String, List<String>> segmentToOnlineInstancesMap = _segmentToOnlineInstancesMap;\n+    Map<String, List<String>> segmentToOfflineInstancesMap = _segmentToOfflineInstancesMap;\n     Map<String, List<String>> segmentToEnabledInstancesMap = _segmentToEnabledInstancesMap;\n+    Set<String> currentUnavailableSegments = _unavailableSegments;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "584eea631d2b5aeed7df0ed2f6f31044fe795ac6"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDk5OTg5MA==", "bodyText": "It should be fine, it's just a reference.", "url": "https://github.com/apache/pinot/pull/5337#discussion_r420999890", "createdAt": "2020-05-06T18:23:22Z", "author": {"login": "jackjlli"}, "path": "pinot-broker/src/main/java/org/apache/pinot/broker/routing/instanceselector/BaseInstanceSelector.java", "diffHunk": "@@ -85,94 +88,147 @@ public void onInstancesChange(Set<String> enabledInstances, List<String> changed\n       return;\n     }\n \n-    // Update the map from segment to enabled instances\n+    // Update the map from segment to enabled ONLINE/CONSUMING instances and set of unavailable segments (no enabled\n+    // instance or all enabled instances are in ERROR state)\n     // NOTE: We can directly modify the map because we will only update the values without changing the map entries.\n     // Because the map is marked as volatile, the running queries (already accessed the map) might use the enabled\n     // instances either before or after the change, which is okay; the following queries (not yet accessed the map) will\n     // get the updated value.\n-    Map<String, List<String>> segmentToInstancesMap = _segmentToInstancesMap;\n+    Map<String, List<String>> segmentToOnlineInstancesMap = _segmentToOnlineInstancesMap;\n+    Map<String, List<String>> segmentToOfflineInstancesMap = _segmentToOfflineInstancesMap;\n     Map<String, List<String>> segmentToEnabledInstancesMap = _segmentToEnabledInstancesMap;\n+    Set<String> currentUnavailableSegments = _unavailableSegments;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDkzNjAyNA=="}, "originalCommit": {"oid": "584eea631d2b5aeed7df0ed2f6f31044fe795ac6"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTAxODc0Nw==", "bodyText": "_unavailableSegments is volatile, so I find get its reference for performance concern", "url": "https://github.com/apache/pinot/pull/5337#discussion_r421018747", "createdAt": "2020-05-06T18:54:17Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-broker/src/main/java/org/apache/pinot/broker/routing/instanceselector/BaseInstanceSelector.java", "diffHunk": "@@ -85,94 +88,147 @@ public void onInstancesChange(Set<String> enabledInstances, List<String> changed\n       return;\n     }\n \n-    // Update the map from segment to enabled instances\n+    // Update the map from segment to enabled ONLINE/CONSUMING instances and set of unavailable segments (no enabled\n+    // instance or all enabled instances are in ERROR state)\n     // NOTE: We can directly modify the map because we will only update the values without changing the map entries.\n     // Because the map is marked as volatile, the running queries (already accessed the map) might use the enabled\n     // instances either before or after the change, which is okay; the following queries (not yet accessed the map) will\n     // get the updated value.\n-    Map<String, List<String>> segmentToInstancesMap = _segmentToInstancesMap;\n+    Map<String, List<String>> segmentToOnlineInstancesMap = _segmentToOnlineInstancesMap;\n+    Map<String, List<String>> segmentToOfflineInstancesMap = _segmentToOfflineInstancesMap;\n     Map<String, List<String>> segmentToEnabledInstancesMap = _segmentToEnabledInstancesMap;\n+    Set<String> currentUnavailableSegments = _unavailableSegments;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDkzNjAyNA=="}, "originalCommit": {"oid": "584eea631d2b5aeed7df0ed2f6f31044fe795ac6"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyMDcwMDg1OnYy", "diffSide": "RIGHT", "path": "pinot-broker/src/test/java/org/apache/pinot/broker/routing/instanceselector/InstanceSelectorTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxNzo1Mzo0MVrOGRercw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxOToyMjo0MlrOGRh9Cg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDk4MTYxOQ==", "bodyText": "Good to iterate this test a few times, with realtime table and with CONSUMING segments as well", "url": "https://github.com/apache/pinot/pull/5337#discussion_r420981619", "createdAt": "2020-05-06T17:53:41Z", "author": {"login": "mcvsubbu"}, "path": "pinot-broker/src/test/java/org/apache/pinot/broker/routing/instanceselector/InstanceSelectorTest.java", "diffHunk": "@@ -394,13 +422,66 @@ public void testInstanceSelector() {\n     expectedBalancedInstanceSelectorResult.put(segment2, instance1);\n     expectedBalancedInstanceSelectorResult.put(segment3, instance3);\n     expectedBalancedInstanceSelectorResult.put(segment4, instance0);\n-    assertEquals(balancedInstanceSelector.select(brokerRequest, segments), expectedBalancedInstanceSelectorResult);\n+    selectionResult = balancedInstanceSelector.select(brokerRequest, segments);\n+    assertEquals(selectionResult.getSegmentToInstanceMap(), expectedBalancedInstanceSelectorResult);\n+    assertTrue(selectionResult.getUnavailableSegments().isEmpty());\n     expectedReplicaGroupInstanceSelectorResult = new HashMap<>();\n     expectedReplicaGroupInstanceSelectorResult.put(segment1, instance2);\n     expectedReplicaGroupInstanceSelectorResult.put(segment2, instance3);\n     expectedReplicaGroupInstanceSelectorResult.put(segment3, instance3);\n     expectedReplicaGroupInstanceSelectorResult.put(segment4, instance2);\n-    assertEquals(replicaGroupInstanceSelector.select(brokerRequest, segments),\n-        expectedReplicaGroupInstanceSelectorResult);\n+    selectionResult = replicaGroupInstanceSelector.select(brokerRequest, segments);\n+    assertEquals(selectionResult.getSegmentToInstanceMap(), expectedReplicaGroupInstanceSelectorResult);\n+    assertTrue(selectionResult.getUnavailableSegments().isEmpty());\n+  }\n+\n+  @Test\n+  public void testUnavailableSegments() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "584eea631d2b5aeed7df0ed2f6f31044fe795ac6"}, "originalPosition": 216}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTAzNTI3NA==", "bodyText": "Done", "url": "https://github.com/apache/pinot/pull/5337#discussion_r421035274", "createdAt": "2020-05-06T19:22:42Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-broker/src/test/java/org/apache/pinot/broker/routing/instanceselector/InstanceSelectorTest.java", "diffHunk": "@@ -394,13 +422,66 @@ public void testInstanceSelector() {\n     expectedBalancedInstanceSelectorResult.put(segment2, instance1);\n     expectedBalancedInstanceSelectorResult.put(segment3, instance3);\n     expectedBalancedInstanceSelectorResult.put(segment4, instance0);\n-    assertEquals(balancedInstanceSelector.select(brokerRequest, segments), expectedBalancedInstanceSelectorResult);\n+    selectionResult = balancedInstanceSelector.select(brokerRequest, segments);\n+    assertEquals(selectionResult.getSegmentToInstanceMap(), expectedBalancedInstanceSelectorResult);\n+    assertTrue(selectionResult.getUnavailableSegments().isEmpty());\n     expectedReplicaGroupInstanceSelectorResult = new HashMap<>();\n     expectedReplicaGroupInstanceSelectorResult.put(segment1, instance2);\n     expectedReplicaGroupInstanceSelectorResult.put(segment2, instance3);\n     expectedReplicaGroupInstanceSelectorResult.put(segment3, instance3);\n     expectedReplicaGroupInstanceSelectorResult.put(segment4, instance2);\n-    assertEquals(replicaGroupInstanceSelector.select(brokerRequest, segments),\n-        expectedReplicaGroupInstanceSelectorResult);\n+    selectionResult = replicaGroupInstanceSelector.select(brokerRequest, segments);\n+    assertEquals(selectionResult.getSegmentToInstanceMap(), expectedReplicaGroupInstanceSelectorResult);\n+    assertTrue(selectionResult.getUnavailableSegments().isEmpty());\n+  }\n+\n+  @Test\n+  public void testUnavailableSegments() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDk4MTYxOQ=="}, "originalCommit": {"oid": "584eea631d2b5aeed7df0ed2f6f31044fe795ac6"}, "originalPosition": 216}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyMDgyMjM3OnYy", "diffSide": "RIGHT", "path": "pinot-broker/src/main/java/org/apache/pinot/broker/routing/instanceselector/BaseInstanceSelector.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxODoyNToxOVrOGRf3Ww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxOTo0NjozMlrOGRiwzg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTAwMTA1MQ==", "bodyText": "It might be good to put some comments on what you're gonna do in this method, as the logic becomes complex.", "url": "https://github.com/apache/pinot/pull/5337#discussion_r421001051", "createdAt": "2020-05-06T18:25:19Z", "author": {"login": "jackjlli"}, "path": "pinot-broker/src/main/java/org/apache/pinot/broker/routing/instanceselector/BaseInstanceSelector.java", "diffHunk": "@@ -85,94 +88,147 @@ public void onInstancesChange(Set<String> enabledInstances, List<String> changed\n       return;\n     }\n \n-    // Update the map from segment to enabled instances\n+    // Update the map from segment to enabled ONLINE/CONSUMING instances and set of unavailable segments (no enabled\n+    // instance or all enabled instances are in ERROR state)\n     // NOTE: We can directly modify the map because we will only update the values without changing the map entries.\n     // Because the map is marked as volatile, the running queries (already accessed the map) might use the enabled\n     // instances either before or after the change, which is okay; the following queries (not yet accessed the map) will\n     // get the updated value.\n-    Map<String, List<String>> segmentToInstancesMap = _segmentToInstancesMap;\n+    Map<String, List<String>> segmentToOnlineInstancesMap = _segmentToOnlineInstancesMap;\n+    Map<String, List<String>> segmentToOfflineInstancesMap = _segmentToOfflineInstancesMap;\n     Map<String, List<String>> segmentToEnabledInstancesMap = _segmentToEnabledInstancesMap;\n+    Set<String> currentUnavailableSegments = _unavailableSegments;\n+    Set<String> newUnavailableSegments = new HashSet<>();\n     for (Map.Entry<String, List<String>> entry : segmentToEnabledInstancesMap.entrySet()) {\n       String segment = entry.getKey();\n       if (segmentsToUpdate.contains(segment)) {\n-        entry.setValue(\n-            calculateEnabledInstancesForSegment(segment, segmentToInstancesMap.get(segment), enabledInstances));\n+        List<String> enabledInstancesForSegment =\n+            calculateEnabledInstancesForSegment(segment, segmentToOnlineInstancesMap.get(segment),\n+                segmentToOfflineInstancesMap, enabledInstances, newUnavailableSegments);\n+        entry.setValue(enabledInstancesForSegment);\n+      } else {\n+        if (currentUnavailableSegments.contains(segment)) {\n+          newUnavailableSegments.add(segment);\n+        }\n       }\n     }\n+    _unavailableSegments = newUnavailableSegments;\n   }\n \n   @Override\n   public void onExternalViewChange(ExternalView externalView, Set<String> onlineSegments) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "584eea631d2b5aeed7df0ed2f6f31044fe795ac6"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTA0ODUyNg==", "bodyText": "Added", "url": "https://github.com/apache/pinot/pull/5337#discussion_r421048526", "createdAt": "2020-05-06T19:46:32Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-broker/src/main/java/org/apache/pinot/broker/routing/instanceselector/BaseInstanceSelector.java", "diffHunk": "@@ -85,94 +88,147 @@ public void onInstancesChange(Set<String> enabledInstances, List<String> changed\n       return;\n     }\n \n-    // Update the map from segment to enabled instances\n+    // Update the map from segment to enabled ONLINE/CONSUMING instances and set of unavailable segments (no enabled\n+    // instance or all enabled instances are in ERROR state)\n     // NOTE: We can directly modify the map because we will only update the values without changing the map entries.\n     // Because the map is marked as volatile, the running queries (already accessed the map) might use the enabled\n     // instances either before or after the change, which is okay; the following queries (not yet accessed the map) will\n     // get the updated value.\n-    Map<String, List<String>> segmentToInstancesMap = _segmentToInstancesMap;\n+    Map<String, List<String>> segmentToOnlineInstancesMap = _segmentToOnlineInstancesMap;\n+    Map<String, List<String>> segmentToOfflineInstancesMap = _segmentToOfflineInstancesMap;\n     Map<String, List<String>> segmentToEnabledInstancesMap = _segmentToEnabledInstancesMap;\n+    Set<String> currentUnavailableSegments = _unavailableSegments;\n+    Set<String> newUnavailableSegments = new HashSet<>();\n     for (Map.Entry<String, List<String>> entry : segmentToEnabledInstancesMap.entrySet()) {\n       String segment = entry.getKey();\n       if (segmentsToUpdate.contains(segment)) {\n-        entry.setValue(\n-            calculateEnabledInstancesForSegment(segment, segmentToInstancesMap.get(segment), enabledInstances));\n+        List<String> enabledInstancesForSegment =\n+            calculateEnabledInstancesForSegment(segment, segmentToOnlineInstancesMap.get(segment),\n+                segmentToOfflineInstancesMap, enabledInstances, newUnavailableSegments);\n+        entry.setValue(enabledInstancesForSegment);\n+      } else {\n+        if (currentUnavailableSegments.contains(segment)) {\n+          newUnavailableSegments.add(segment);\n+        }\n       }\n     }\n+    _unavailableSegments = newUnavailableSegments;\n   }\n \n   @Override\n   public void onExternalViewChange(ExternalView externalView, Set<String> onlineSegments) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTAwMTA1MQ=="}, "originalCommit": {"oid": "584eea631d2b5aeed7df0ed2f6f31044fe795ac6"}, "originalPosition": 57}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3234, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}