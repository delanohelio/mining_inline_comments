{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDczNTM5Nzcw", "number": 5922, "title": "Add max qps bucket count", "bodyText": "Description\nThis PR adds the ability of getting maximum qps count within a minute.\nIn some monitoring system, metrics are emitted in some certain frequency, e.g. every 1 minute. So if there is a burst of qps hitting to the cluster, there is no way to reflect on the metrics.\nThis PR introduces a counter to get the maximum counts among all the seconds within a minute, so that we always know the real circumstances of the cluster.", "createdAt": "2020-08-25T22:29:25Z", "url": "https://github.com/apache/pinot/pull/5922", "merged": true, "mergeCommit": {"oid": "6b78dcc465bc65c394f414f647493cb5d15ad15b"}, "closed": true, "closedAt": "2020-08-28T07:02:10Z", "author": {"login": "jackjlli"}, "timelineItems": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdCeYG1AH2gAyNDczNTM5NzcwOmI2NmI0MjBhNjg2ZWQ3YzYxYTQ4ODI0ZWE2MTQ4YmE5ZTNlNTBlYTM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdDJgc8ABqjM3MDE4MzQ4ODI=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "b66b420a686ed7c61a48824ea6148ba9e3e50ea3", "author": {"user": null}, "url": "https://github.com/apache/pinot/commit/b66b420a686ed7c61a48824ea6148ba9e3e50ea3", "committedDate": "2020-08-25T21:48:34Z", "message": "Add max qps bucket count"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc1MDczNzg5", "url": "https://github.com/apache/pinot/pull/5922#pullrequestreview-475073789", "createdAt": "2020-08-26T00:35:55Z", "commit": {"oid": "b66b420a686ed7c61a48824ea6148ba9e3e50ea3"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0569372a0269c3d9901efe6b63c1b807c8d7f111", "author": {"user": null}, "url": "https://github.com/apache/pinot/commit/0569372a0269c3d9901efe6b63c1b807c8d7f111", "committedDate": "2020-08-27T17:07:02Z", "message": "Introduce StatefulHitCounter"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "3b5b6e97f908e05dfa7023b59f6e3fa7283e7729", "author": {"user": null}, "url": "https://github.com/apache/pinot/commit/3b5b6e97f908e05dfa7023b59f6e3fa7283e7729", "committedDate": "2020-08-27T06:21:37Z", "message": "Introduce StatefulHitCounter"}, "afterCommit": {"oid": "0569372a0269c3d9901efe6b63c1b807c8d7f111", "author": {"user": null}, "url": "https://github.com/apache/pinot/commit/0569372a0269c3d9901efe6b63c1b807c8d7f111", "committedDate": "2020-08-27T17:07:02Z", "message": "Introduce StatefulHitCounter"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc2OTQ4NzI3", "url": "https://github.com/apache/pinot/pull/5922#pullrequestreview-476948727", "createdAt": "2020-08-27T17:47:16Z", "commit": {"oid": "0569372a0269c3d9901efe6b63c1b807c8d7f111"}, "state": "COMMENTED", "comments": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QxNzo0NzoxNlrOHIa7oQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QxODowNDowNFrOHIbgeQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODU5MTkwNQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              private StatefulHitCounter _hitCounterInMinute;\n          \n          \n            \n              private StatefulHitCounter _maxQpsTracker;", "url": "https://github.com/apache/pinot/pull/5922#discussion_r478591905", "createdAt": "2020-08-27T17:47:16Z", "author": {"login": "mcvsubbu"}, "path": "pinot-broker/src/main/java/org/apache/pinot/broker/queryquota/QueryQuotaEntity.java", "diffHunk": "@@ -24,15 +24,17 @@\n public class QueryQuotaEntity {\n \n   private RateLimiter _rateLimiter;\n-  private HitCounter _hitCounter;\n+  private HitCounter _hitCounterInSecond;\n+  private StatefulHitCounter _hitCounterInMinute;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0569372a0269c3d9901efe6b63c1b807c8d7f111"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODU5MjEyNg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              private HitCounter _hitCounterInSecond;\n          \n          \n            \n              private HitCounter _qpsTracker;", "url": "https://github.com/apache/pinot/pull/5922#discussion_r478592126", "createdAt": "2020-08-27T17:47:43Z", "author": {"login": "mcvsubbu"}, "path": "pinot-broker/src/main/java/org/apache/pinot/broker/queryquota/QueryQuotaEntity.java", "diffHunk": "@@ -24,15 +24,17 @@\n public class QueryQuotaEntity {\n \n   private RateLimiter _rateLimiter;\n-  private HitCounter _hitCounter;\n+  private HitCounter _hitCounterInSecond;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0569372a0269c3d9901efe6b63c1b807c8d7f111"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODU5NTk3Ng==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              public StatefulHitCounter(int timeRangeInSeconds, int bucketCount, int defaultQueriedTimeRangeInSeconds) {\n          \n          \n            \n              public StatefulHitCounter(int queriedTimeRangeInSeconds) {\n          \n      \n    \n    \n  \n\nDerive the other two locally. So, the timeRange we maintain could be 2*queriedTimeRangeInSeconds or even 1.5 times . the bucket count is also something that could be decided by the statefulHitCounter.", "url": "https://github.com/apache/pinot/pull/5922#discussion_r478595976", "createdAt": "2020-08-27T17:54:29Z", "author": {"login": "mcvsubbu"}, "path": "pinot-broker/src/main/java/org/apache/pinot/broker/queryquota/StatefulHitCounter.java", "diffHunk": "@@ -0,0 +1,73 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.broker.queryquota;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+\n+/**\n+ * A stateful version of hit counter. Similar to the default hit counter, it maintains a list of buckets.\n+ * Whereas it maintains an extra variable called _lastAccessTimestamp which tracks the last access time.\n+ * If the stateful hit counter gets queried, it firstly compares the current timestamp and the last access timestamp,\n+ * calculating the start index and end index among the buckets. Then, it traverses through all the valid candidate buckets.\n+ * If the current timestamp has exceeded the current time range of all the buckets, this hit counter will use\n+ * the current timestamp minus the default time queried time range to calculate the start time index.\n+ */\n+public class StatefulHitCounter extends HitCounter {\n+  private long _maxTimeRangeMs;\n+  private long _defaultQueriedTimeRangeMs;\n+  private long _lastAccessTimestamp;\n+\n+  public StatefulHitCounter(int timeRangeInSeconds, int bucketCount, int defaultQueriedTimeRangeInSeconds) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0569372a0269c3d9901efe6b63c1b807c8d7f111"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODU5NjM2Ng==", "bodyText": "Is StatefulHitCounter the right name? Should we call it maxHitRteTracker, since that is more specific?", "url": "https://github.com/apache/pinot/pull/5922#discussion_r478596366", "createdAt": "2020-08-27T17:55:11Z", "author": {"login": "mcvsubbu"}, "path": "pinot-broker/src/main/java/org/apache/pinot/broker/queryquota/StatefulHitCounter.java", "diffHunk": "@@ -0,0 +1,73 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.broker.queryquota;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+\n+/**\n+ * A stateful version of hit counter. Similar to the default hit counter, it maintains a list of buckets.\n+ * Whereas it maintains an extra variable called _lastAccessTimestamp which tracks the last access time.\n+ * If the stateful hit counter gets queried, it firstly compares the current timestamp and the last access timestamp,\n+ * calculating the start index and end index among the buckets. Then, it traverses through all the valid candidate buckets.\n+ * If the current timestamp has exceeded the current time range of all the buckets, this hit counter will use\n+ * the current timestamp minus the default time queried time range to calculate the start time index.\n+ */\n+public class StatefulHitCounter extends HitCounter {\n+  private long _maxTimeRangeMs;\n+  private long _defaultQueriedTimeRangeMs;\n+  private long _lastAccessTimestamp;\n+\n+  public StatefulHitCounter(int timeRangeInSeconds, int bucketCount, int defaultQueriedTimeRangeInSeconds) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0569372a0269c3d9901efe6b63c1b807c8d7f111"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODU5NzY3Mw==", "bodyText": "should be volatile", "url": "https://github.com/apache/pinot/pull/5922#discussion_r478597673", "createdAt": "2020-08-27T17:57:27Z", "author": {"login": "mcvsubbu"}, "path": "pinot-broker/src/main/java/org/apache/pinot/broker/queryquota/StatefulHitCounter.java", "diffHunk": "@@ -0,0 +1,73 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.broker.queryquota;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+\n+/**\n+ * A stateful version of hit counter. Similar to the default hit counter, it maintains a list of buckets.\n+ * Whereas it maintains an extra variable called _lastAccessTimestamp which tracks the last access time.\n+ * If the stateful hit counter gets queried, it firstly compares the current timestamp and the last access timestamp,\n+ * calculating the start index and end index among the buckets. Then, it traverses through all the valid candidate buckets.\n+ * If the current timestamp has exceeded the current time range of all the buckets, this hit counter will use\n+ * the current timestamp minus the default time queried time range to calculate the start time index.\n+ */\n+public class StatefulHitCounter extends HitCounter {\n+  private long _maxTimeRangeMs;\n+  private long _defaultQueriedTimeRangeMs;\n+  private long _lastAccessTimestamp;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0569372a0269c3d9901efe6b63c1b807c8d7f111"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODU5NzcyNw==", "bodyText": "final", "url": "https://github.com/apache/pinot/pull/5922#discussion_r478597727", "createdAt": "2020-08-27T17:57:33Z", "author": {"login": "mcvsubbu"}, "path": "pinot-broker/src/main/java/org/apache/pinot/broker/queryquota/StatefulHitCounter.java", "diffHunk": "@@ -0,0 +1,73 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.broker.queryquota;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+\n+/**\n+ * A stateful version of hit counter. Similar to the default hit counter, it maintains a list of buckets.\n+ * Whereas it maintains an extra variable called _lastAccessTimestamp which tracks the last access time.\n+ * If the stateful hit counter gets queried, it firstly compares the current timestamp and the last access timestamp,\n+ * calculating the start index and end index among the buckets. Then, it traverses through all the valid candidate buckets.\n+ * If the current timestamp has exceeded the current time range of all the buckets, this hit counter will use\n+ * the current timestamp minus the default time queried time range to calculate the start time index.\n+ */\n+public class StatefulHitCounter extends HitCounter {\n+  private long _maxTimeRangeMs;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0569372a0269c3d9901efe6b63c1b807c8d7f111"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODU5Nzc4MA==", "bodyText": "final", "url": "https://github.com/apache/pinot/pull/5922#discussion_r478597780", "createdAt": "2020-08-27T17:57:40Z", "author": {"login": "mcvsubbu"}, "path": "pinot-broker/src/main/java/org/apache/pinot/broker/queryquota/StatefulHitCounter.java", "diffHunk": "@@ -0,0 +1,73 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.broker.queryquota;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+\n+/**\n+ * A stateful version of hit counter. Similar to the default hit counter, it maintains a list of buckets.\n+ * Whereas it maintains an extra variable called _lastAccessTimestamp which tracks the last access time.\n+ * If the stateful hit counter gets queried, it firstly compares the current timestamp and the last access timestamp,\n+ * calculating the start index and end index among the buckets. Then, it traverses through all the valid candidate buckets.\n+ * If the current timestamp has exceeded the current time range of all the buckets, this hit counter will use\n+ * the current timestamp minus the default time queried time range to calculate the start time index.\n+ */\n+public class StatefulHitCounter extends HitCounter {\n+  private long _maxTimeRangeMs;\n+  private long _defaultQueriedTimeRangeMs;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0569372a0269c3d9901efe6b63c1b807c8d7f111"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODU5Nzk3NA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              int getMaxCountPerBucket(long timestamp) {\n          \n          \n            \n              int getMaxCountPerBucket(long now) {\n          \n      \n    \n    \n  \n\nMore intuitive name I think", "url": "https://github.com/apache/pinot/pull/5922#discussion_r478597974", "createdAt": "2020-08-27T17:58:01Z", "author": {"login": "mcvsubbu"}, "path": "pinot-broker/src/main/java/org/apache/pinot/broker/queryquota/StatefulHitCounter.java", "diffHunk": "@@ -0,0 +1,73 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.broker.queryquota;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+\n+/**\n+ * A stateful version of hit counter. Similar to the default hit counter, it maintains a list of buckets.\n+ * Whereas it maintains an extra variable called _lastAccessTimestamp which tracks the last access time.\n+ * If the stateful hit counter gets queried, it firstly compares the current timestamp and the last access timestamp,\n+ * calculating the start index and end index among the buckets. Then, it traverses through all the valid candidate buckets.\n+ * If the current timestamp has exceeded the current time range of all the buckets, this hit counter will use\n+ * the current timestamp minus the default time queried time range to calculate the start time index.\n+ */\n+public class StatefulHitCounter extends HitCounter {\n+  private long _maxTimeRangeMs;\n+  private long _defaultQueriedTimeRangeMs;\n+  private long _lastAccessTimestamp;\n+\n+  public StatefulHitCounter(int timeRangeInSeconds, int bucketCount, int defaultQueriedTimeRangeInSeconds) {\n+    super(timeRangeInSeconds, bucketCount);\n+    _maxTimeRangeMs = timeRangeInSeconds * 1000L;\n+    _defaultQueriedTimeRangeMs = defaultQueriedTimeRangeInSeconds * 1000L;\n+  }\n+\n+  /**\n+   * Get the maximum count among the buckets\n+   */\n+  public int getMaxCountPerBucket() {\n+    return getMaxCountPerBucket(System.currentTimeMillis());\n+  }\n+\n+  @VisibleForTesting\n+  int getMaxCountPerBucket(long timestamp) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0569372a0269c3d9901efe6b63c1b807c8d7f111"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODU5OTc0NA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                // Since the start index was accessed last time, there is no need to query its bucket this time.\n          \n          \n            \n                // Since the end index was accessed last time, there is no need to query its bucket this time.\n          \n      \n    \n    \n  \n\nWe are skipping the endIndex in the loop below, right?", "url": "https://github.com/apache/pinot/pull/5922#discussion_r478599744", "createdAt": "2020-08-27T18:01:09Z", "author": {"login": "mcvsubbu"}, "path": "pinot-broker/src/main/java/org/apache/pinot/broker/queryquota/StatefulHitCounter.java", "diffHunk": "@@ -0,0 +1,73 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.broker.queryquota;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+\n+/**\n+ * A stateful version of hit counter. Similar to the default hit counter, it maintains a list of buckets.\n+ * Whereas it maintains an extra variable called _lastAccessTimestamp which tracks the last access time.\n+ * If the stateful hit counter gets queried, it firstly compares the current timestamp and the last access timestamp,\n+ * calculating the start index and end index among the buckets. Then, it traverses through all the valid candidate buckets.\n+ * If the current timestamp has exceeded the current time range of all the buckets, this hit counter will use\n+ * the current timestamp minus the default time queried time range to calculate the start time index.\n+ */\n+public class StatefulHitCounter extends HitCounter {\n+  private long _maxTimeRangeMs;\n+  private long _defaultQueriedTimeRangeMs;\n+  private long _lastAccessTimestamp;\n+\n+  public StatefulHitCounter(int timeRangeInSeconds, int bucketCount, int defaultQueriedTimeRangeInSeconds) {\n+    super(timeRangeInSeconds, bucketCount);\n+    _maxTimeRangeMs = timeRangeInSeconds * 1000L;\n+    _defaultQueriedTimeRangeMs = defaultQueriedTimeRangeInSeconds * 1000L;\n+  }\n+\n+  /**\n+   * Get the maximum count among the buckets\n+   */\n+  public int getMaxCountPerBucket() {\n+    return getMaxCountPerBucket(System.currentTimeMillis());\n+  }\n+\n+  @VisibleForTesting\n+  int getMaxCountPerBucket(long timestamp) {\n+    // If the hit counter didn't get queried for more than _maxTimeRangeMs\n+    if (timestamp - _lastAccessTimestamp > _maxTimeRangeMs) {\n+      _lastAccessTimestamp = timestamp - _defaultQueriedTimeRangeMs;\n+    }\n+    long startTimeUnits = _lastAccessTimestamp / _timeBucketWidthMs;\n+    int startIndex = (int) (startTimeUnits % _bucketCount);\n+\n+    long numTimeUnits = timestamp / _timeBucketWidthMs;\n+    int endIndex = (int) (numTimeUnits % _bucketCount);\n+\n+    int maxCount = 0;\n+    // Since the start index was accessed last time, there is no need to query its bucket this time.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0569372a0269c3d9901efe6b63c1b807c8d7f111"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODYwMTMzNw==", "bodyText": "MAX_QPS_SINCE_LAST_CALL or better, MAX_BURST_QPS?", "url": "https://github.com/apache/pinot/pull/5922#discussion_r478601337", "createdAt": "2020-08-27T18:04:04Z", "author": {"login": "mcvsubbu"}, "path": "pinot-common/src/main/java/org/apache/pinot/common/metrics/BrokerGauge.java", "diffHunk": "@@ -27,6 +27,7 @@\n  */\n public enum BrokerGauge implements AbstractMetrics.Gauge {\n   QUERY_QUOTA_CAPACITY_UTILIZATION_RATE(\"tables\", false),\n+  MAX_QPS_IN_ONE_MINUTE(\"tables\", false),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0569372a0269c3d9901efe6b63c1b807c8d7f111"}, "originalPosition": 4}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a839d6bfe7d40607e04c32fb17711b9ade1c59fe", "author": {"user": null}, "url": "https://github.com/apache/pinot/commit/a839d6bfe7d40607e04c32fb17711b9ade1c59fe", "committedDate": "2020-08-27T20:48:32Z", "message": "Address PR comments"}, "afterCommit": {"oid": "9f3ada50f96cb68b05501356256092647fd002d2", "author": {"user": null}, "url": "https://github.com/apache/pinot/commit/9f3ada50f96cb68b05501356256092647fd002d2", "committedDate": "2020-08-27T20:50:31Z", "message": "Address PR comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc3MTMzNDMw", "url": "https://github.com/apache/pinot/pull/5922#pullrequestreview-477133430", "createdAt": "2020-08-27T22:44:47Z", "commit": {"oid": "9f3ada50f96cb68b05501356256092647fd002d2"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QyMjo0NDo0N1rOHIjt2w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QyMjo1MDoyMVrOHIj1MA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODczNTgzNQ==", "bodyText": "why do we need this constructor?", "url": "https://github.com/apache/pinot/pull/5922#discussion_r478735835", "createdAt": "2020-08-27T22:44:47Z", "author": {"login": "mcvsubbu"}, "path": "pinot-broker/src/main/java/org/apache/pinot/broker/queryquota/MaxHitRateTracker.java", "diffHunk": "@@ -0,0 +1,80 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.broker.queryquota;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+\n+/**\n+ * A stateful version of hit counter. Similar to the default hit counter, it maintains a list of buckets.\n+ * Whereas it maintains an extra variable called _lastAccessTimestamp which tracks the last access time.\n+ * If the stateful hit counter gets queried, it firstly compares the current timestamp and the last access timestamp,\n+ * calculating the start index and end index among the buckets. Then, it traverses through all the valid candidate buckets.\n+ * If the current timestamp has exceeded the current time range of all the buckets, this hit counter will use\n+ * the current timestamp minus the default time queried time range to calculate the start time index.\n+ */\n+public class MaxHitRateTracker extends HitCounter {\n+  private static int ONE_SECOND_BUCKET_WIDTH_MS = 1000;\n+  private static int MAX_TIME_RANGE_FACTOR = 2;\n+\n+  private final long _maxTimeRangeMs;\n+  private final long _defaultTimeRangeMs;\n+  private volatile long _lastAccessTimestamp;\n+\n+  public MaxHitRateTracker(int timeRangeInSeconds) {\n+    this(timeRangeInSeconds, timeRangeInSeconds * MAX_TIME_RANGE_FACTOR);\n+  }\n+\n+  public MaxHitRateTracker(int defaultTimeRangeInSeconds, int maxTimeRangeInSeconds) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9f3ada50f96cb68b05501356256092647fd002d2"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODczNjYzNA==", "bodyText": "should this method be synchronized?\nI would code the method like this:\n\nGet the value of _lastAccessTimeStamp in the beginning of the method (then = _lastAccessTimeStamp)\nUse then throughout the method\nSet the _lastAccessTimestamp to now at the end of the method\n\nThat will protect us against multiple calls, if any (just in case).\nit will also prevent us from accessing the volatile variable repeatedly.", "url": "https://github.com/apache/pinot/pull/5922#discussion_r478736634", "createdAt": "2020-08-27T22:47:07Z", "author": {"login": "mcvsubbu"}, "path": "pinot-broker/src/main/java/org/apache/pinot/broker/queryquota/MaxHitRateTracker.java", "diffHunk": "@@ -0,0 +1,80 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.broker.queryquota;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+\n+/**\n+ * A stateful version of hit counter. Similar to the default hit counter, it maintains a list of buckets.\n+ * Whereas it maintains an extra variable called _lastAccessTimestamp which tracks the last access time.\n+ * If the stateful hit counter gets queried, it firstly compares the current timestamp and the last access timestamp,\n+ * calculating the start index and end index among the buckets. Then, it traverses through all the valid candidate buckets.\n+ * If the current timestamp has exceeded the current time range of all the buckets, this hit counter will use\n+ * the current timestamp minus the default time queried time range to calculate the start time index.\n+ */\n+public class MaxHitRateTracker extends HitCounter {\n+  private static int ONE_SECOND_BUCKET_WIDTH_MS = 1000;\n+  private static int MAX_TIME_RANGE_FACTOR = 2;\n+\n+  private final long _maxTimeRangeMs;\n+  private final long _defaultTimeRangeMs;\n+  private volatile long _lastAccessTimestamp;\n+\n+  public MaxHitRateTracker(int timeRangeInSeconds) {\n+    this(timeRangeInSeconds, timeRangeInSeconds * MAX_TIME_RANGE_FACTOR);\n+  }\n+\n+  public MaxHitRateTracker(int defaultTimeRangeInSeconds, int maxTimeRangeInSeconds) {\n+    super(maxTimeRangeInSeconds, (int) (maxTimeRangeInSeconds * 1000L / ONE_SECOND_BUCKET_WIDTH_MS));\n+    _defaultTimeRangeMs = defaultTimeRangeInSeconds * 1000L;\n+    _maxTimeRangeMs = maxTimeRangeInSeconds * 1000L;\n+  }\n+\n+  /**\n+   * Get the maximum count among the buckets\n+   */\n+  public int getMaxCountPerBucket() {\n+    return getMaxCountPerBucket(System.currentTimeMillis());\n+  }\n+\n+  @VisibleForTesting\n+  int getMaxCountPerBucket(long now) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9f3ada50f96cb68b05501356256092647fd002d2"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODczNzcxMg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                if (now - _lastAccessTimestamp > _maxTimeRangeMs) {\n          \n          \n            \n                then = _lastAccessTimeStamp;\n          \n          \n            \n                if (now - then > _maxTimeRangeMs) {\n          \n          \n            \n                    then = now - _defaultTimeRangeMs;\n          \n          \n            \n                }\n          \n          \n            \n                long startTimeUnits = then / _timeBucketWidthMs;", "url": "https://github.com/apache/pinot/pull/5922#discussion_r478737712", "createdAt": "2020-08-27T22:50:21Z", "author": {"login": "mcvsubbu"}, "path": "pinot-broker/src/main/java/org/apache/pinot/broker/queryquota/MaxHitRateTracker.java", "diffHunk": "@@ -0,0 +1,80 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.broker.queryquota;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+\n+/**\n+ * A stateful version of hit counter. Similar to the default hit counter, it maintains a list of buckets.\n+ * Whereas it maintains an extra variable called _lastAccessTimestamp which tracks the last access time.\n+ * If the stateful hit counter gets queried, it firstly compares the current timestamp and the last access timestamp,\n+ * calculating the start index and end index among the buckets. Then, it traverses through all the valid candidate buckets.\n+ * If the current timestamp has exceeded the current time range of all the buckets, this hit counter will use\n+ * the current timestamp minus the default time queried time range to calculate the start time index.\n+ */\n+public class MaxHitRateTracker extends HitCounter {\n+  private static int ONE_SECOND_BUCKET_WIDTH_MS = 1000;\n+  private static int MAX_TIME_RANGE_FACTOR = 2;\n+\n+  private final long _maxTimeRangeMs;\n+  private final long _defaultTimeRangeMs;\n+  private volatile long _lastAccessTimestamp;\n+\n+  public MaxHitRateTracker(int timeRangeInSeconds) {\n+    this(timeRangeInSeconds, timeRangeInSeconds * MAX_TIME_RANGE_FACTOR);\n+  }\n+\n+  public MaxHitRateTracker(int defaultTimeRangeInSeconds, int maxTimeRangeInSeconds) {\n+    super(maxTimeRangeInSeconds, (int) (maxTimeRangeInSeconds * 1000L / ONE_SECOND_BUCKET_WIDTH_MS));\n+    _defaultTimeRangeMs = defaultTimeRangeInSeconds * 1000L;\n+    _maxTimeRangeMs = maxTimeRangeInSeconds * 1000L;\n+  }\n+\n+  /**\n+   * Get the maximum count among the buckets\n+   */\n+  public int getMaxCountPerBucket() {\n+    return getMaxCountPerBucket(System.currentTimeMillis());\n+  }\n+\n+  @VisibleForTesting\n+  int getMaxCountPerBucket(long now) {\n+    // Update the last access timestamp if the hit counter didn't get queried for more than _maxTimeRangeMs.\n+    if (now - _lastAccessTimestamp > _maxTimeRangeMs) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9f3ada50f96cb68b05501356256092647fd002d2"}, "originalPosition": 59}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc3MTU4ODU2", "url": "https://github.com/apache/pinot/pull/5922#pullrequestreview-477158856", "createdAt": "2020-08-27T23:59:48Z", "commit": {"oid": "9f3ada50f96cb68b05501356256092647fd002d2"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "30103ce52126d3a004aca3cb046d4d9118eeca06", "author": {"user": null}, "url": "https://github.com/apache/pinot/commit/30103ce52126d3a004aca3cb046d4d9118eeca06", "committedDate": "2020-08-28T00:03:19Z", "message": "Address PR comments"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "9f3ada50f96cb68b05501356256092647fd002d2", "author": {"user": null}, "url": "https://github.com/apache/pinot/commit/9f3ada50f96cb68b05501356256092647fd002d2", "committedDate": "2020-08-27T20:50:31Z", "message": "Address PR comments"}, "afterCommit": {"oid": "30103ce52126d3a004aca3cb046d4d9118eeca06", "author": {"user": null}, "url": "https://github.com/apache/pinot/commit/30103ce52126d3a004aca3cb046d4d9118eeca06", "committedDate": "2020-08-28T00:03:19Z", "message": "Address PR comments"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 273, "cost": 1, "resetAt": "2021-10-28T18:00:02Z"}}}