{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI3MjQ5MTQ1", "number": 6288, "title": "Use sorted index based filtering only for dictionary encoded column", "bodyText": "Currently we build sorted index only if the column is dictionary encoded. However, when we write isSorted in on-disk segment metadata, we write on the basis of pre-index stats collector. So, for a sorted column without dictionary, segment metadata will still indicate column as sorted\nproperties.setProperty(getKeyFor(column, IS_SORTED), String.valueOf(columnIndexCreationInfo.isSorted()));\nDuring query processing, when we create filter operator, we check the data source metadata to see if the column is sorted and create sorted index based filter operator. However, using this operator for any sorted raw column will lead to the following error stack since we end up using a raw value based predicate evaluator for a dictionary based filter operator.\nThe solution is to do the additional check on data source to see if the column is dictionary encoded or not\njava.lang.UnsupportedOperationException\n181762         at org.apache.pinot.core.operator.filter.predicate.BaseRawValueBasedPredicateEvaluator.getMatchingDictIds(BaseRawValueBasedPredicateEvaluator.java:40)\n181763         at org.apache.pinot.core.operator.filter.SortedIndexBasedFilterOperator.getNextBlock(SortedIndexBasedFilterOperator.java:68)\n181764         at org.apache.pinot.core.operator.filter.SortedIndexBasedFilterOperator.getNextBlock(SortedIndexBasedFilterOperator.java:35)\n181765         at org.apache.pinot.core.operator.BaseOperator.nextBlock(BaseOperator.java:49)\n181766         at org.apache.pinot.core.operator.DocIdSetOperator.getNextBlock(DocIdSetOperator.java:62)\n181767         at org.apache.pinot.core.operator.DocIdSetOperator.getNextBlock(DocIdSetOperator.java:35)\n181768         at org.apache.pinot.core.operator.BaseOperator.nextBlock(BaseOperator.java:49)\n181769         at org.apache.pinot.core.operator.ProjectionOperator.getNextBlock(ProjectionOperator.java:57)\n181770         at org.apache.pinot.core.operator.ProjectionOperator.getNextBlock(ProjectionOperator.java:30)`\n```", "createdAt": "2020-11-25T07:45:09Z", "url": "https://github.com/apache/pinot/pull/6288", "merged": true, "mergeCommit": {"oid": "3eb0f9c9daf3e176d41775af515eeb982ff2daeb"}, "closed": true, "closedAt": "2020-11-30T20:36:50Z", "author": {"login": "siddharthteotia"}, "timelineItems": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdf5XUmgH2gAyNTI3MjQ5MTQ1OmE2NTM1Y2EyZDNhNzc0ZWZhZTVjNTA5YmU0NzczYTMxNzg2OWRlZTM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdhqnBJAH2gAyNTI3MjQ5MTQ1OmUwY2Q4YWM4ZjNlMjNjMzE2OTM3MzZmNWY5YjQwYWNlNDAyYWIxZTI=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "a6535ca2d3a774efae5c509be4773a317869dee3", "author": {"user": null}, "url": "https://github.com/apache/pinot/commit/a6535ca2d3a774efae5c509be4773a317869dee3", "committedDate": "2020-11-25T07:38:57Z", "message": "Use sorted index based filtering\nonly for sorted column with dictionary"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM4NzAyODY0", "url": "https://github.com/apache/pinot/pull/6288#pullrequestreview-538702864", "createdAt": "2020-11-25T17:09:37Z", "commit": {"oid": "a6535ca2d3a774efae5c509be4773a317869dee3"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM4NzgyNDY2", "url": "https://github.com/apache/pinot/pull/6288#pullrequestreview-538782466", "createdAt": "2020-11-25T19:09:35Z", "commit": {"oid": "a6535ca2d3a774efae5c509be4773a317869dee3"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxOTowOTozNVrOH6ArMQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxOTowOTo1OVrOH6Ar7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDU5MDUxMw==", "bodyText": "(nit)\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  if (dataSource.getDataSourceMetadata().isSorted() && (dataSource.getDictionary() != null)) {\n          \n          \n            \n                  if (dataSource.getDataSourceMetadata().isSorted() && dataSource.getDictionary() != null) {", "url": "https://github.com/apache/pinot/pull/6288#discussion_r530590513", "createdAt": "2020-11-25T19:09:35Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/operator/filter/FilterOperatorUtils.java", "diffHunk": "@@ -47,9 +47,15 @@ public static BaseFilterOperator getLeafFilterOperator(PredicateEvaluator predic\n       return new MatchAllFilterOperator(numDocs);\n     }\n \n+    // Currently sorted index based filtering is supported only for\n+    // dictionary encoded columns. The on-disk segment metadata\n+    // will indicate if the column is sorted or not regardless of\n+    // whether it is raw or dictionary encoded. Here when creating\n+    // the filter operator, we need to make sure that sort filter\n+    // operator is used only if the column is sorted and has dictionary.\n     Predicate.Type predicateType = predicateEvaluator.getPredicateType();\n     if (predicateType == Predicate.Type.RANGE) {\n-      if (dataSource.getDataSourceMetadata().isSorted()) {\n+      if (dataSource.getDataSourceMetadata().isSorted() && (dataSource.getDictionary() != null)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a6535ca2d3a774efae5c509be4773a317869dee3"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDU5MDcwMw==", "bodyText": "(nit)\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  if (dataSource.getDataSourceMetadata().isSorted() && (dataSource.getDictionary() != null)) {\n          \n          \n            \n                  if (dataSource.getDataSourceMetadata().isSorted() && dataSource.getDictionary() != null) {", "url": "https://github.com/apache/pinot/pull/6288#discussion_r530590703", "createdAt": "2020-11-25T19:09:59Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/operator/filter/FilterOperatorUtils.java", "diffHunk": "@@ -59,7 +65,7 @@ public static BaseFilterOperator getLeafFilterOperator(PredicateEvaluator predic\n     } else if (predicateType == Predicate.Type.REGEXP_LIKE) {\n       return new ScanBasedFilterOperator(predicateEvaluator, dataSource, numDocs);\n     } else {\n-      if (dataSource.getDataSourceMetadata().isSorted()) {\n+      if (dataSource.getDataSourceMetadata().isSorted() && (dataSource.getDictionary() != null)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a6535ca2d3a774efae5c509be4773a317869dee3"}, "originalPosition": 22}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e0cd8ac8f3e23c31693736f5f9b40ace402ab1e2", "author": {"user": null}, "url": "https://github.com/apache/pinot/commit/e0cd8ac8f3e23c31693736f5f9b40ace402ab1e2", "committedDate": "2020-11-30T19:35:22Z", "message": "Address review comments"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1837, "cost": 1, "resetAt": "2021-10-28T18:00:02Z"}}}