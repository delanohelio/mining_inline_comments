{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE2NTQ2MzI4", "number": 6246, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0xN1QyMDowOToxNFrOFbjruw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0xN1QyMDoxNToxNVrOFbjzuA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzY0NDQwNTA3OnYy", "diffSide": "RIGHT", "path": "pinot-common/src/main/java/org/apache/pinot/sql/parsers/CalciteSqlParser.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0xN1QyMDowOToxNFrOInI3Cw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0xN1QyMDowOToxNFrOInI3Cw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NzkxMDUzOQ==", "bodyText": "Remove underscore from the function name to match json_extract_scalar and json_extract_key. Please also add some test cases for function name with underscore", "url": "https://github.com/apache/pinot/pull/6246#discussion_r577910539", "createdAt": "2021-02-17T20:09:14Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-common/src/main/java/org/apache/pinot/sql/parsers/CalciteSqlParser.java", "diffHunk": "@@ -902,11 +902,47 @@ private static Expression compileFunctionExpression(SqlBasicCall functionNode) {\n         operands.add(toExpression(childNode));\n       }\n     }\n+    validateFunction(functionName, operands);\n     Expression functionExpression = RequestUtils.getFunctionExpression(functionName);\n     functionExpression.getFunctionCall().setOperands(operands);\n     return functionExpression;\n   }\n \n+  private static void validateFunction(String functionName, List<Expression> operands) {\n+    switch (functionName.toUpperCase()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "53807b89a020adddefd5a0ffcf55345111b847b7"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzY0NDQxMDAxOnYy", "diffSide": "RIGHT", "path": "pinot-common/src/main/java/org/apache/pinot/sql/parsers/CalciteSqlParser.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0xN1QyMDoxMDo0M1rOInI5_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0xN1QyMDoxMDo0M1rOInI5_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NzkxMTI5Mw==", "bodyText": "Also validate the optional fourth argument?", "url": "https://github.com/apache/pinot/pull/6246#discussion_r577911293", "createdAt": "2021-02-17T20:10:43Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-common/src/main/java/org/apache/pinot/sql/parsers/CalciteSqlParser.java", "diffHunk": "@@ -902,11 +902,47 @@ private static Expression compileFunctionExpression(SqlBasicCall functionNode) {\n         operands.add(toExpression(childNode));\n       }\n     }\n+    validateFunction(functionName, operands);\n     Expression functionExpression = RequestUtils.getFunctionExpression(functionName);\n     functionExpression.getFunctionCall().setOperands(operands);\n     return functionExpression;\n   }\n \n+  private static void validateFunction(String functionName, List<Expression> operands) {\n+    switch (functionName.toUpperCase()) {\n+      case \"JSONEXTRACTSCALAR\":\n+        validateJsonExtractScalarFunction(functionName, operands);\n+        break;\n+      case \"JSONEXTRACTKEY\":\n+        validateJsonExtractKeyFunction(functionName, operands);\n+        break;\n+    }\n+  }\n+\n+  private static void validateJsonExtractScalarFunction(String functionName, List<Expression> operands) {\n+    // Check that there are exactly 3 or 4 arguments\n+    if (operands.size() < 3 || operands.size() > 4) {\n+      throw new SqlCompilationException(\n+          \"Expected 3/4 arguments for transform function: jsonExtractScalar(jsonFieldName, 'jsonPath', 'resultsType', ['defaultValue'])\");\n+    }\n+    if (!operands.get(1).isSetLiteral() || !operands.get(2).isSetLiteral()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "53807b89a020adddefd5a0ffcf55345111b847b7"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzY0NDQxMjExOnYy", "diffSide": "RIGHT", "path": "pinot-common/src/main/java/org/apache/pinot/sql/parsers/CalciteSqlParser.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0xN1QyMDoxMToyMlrOInI7Xg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0xN1QyMDoxMToyMlrOInI7Xg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NzkxMTY0Ng==", "bodyText": "(Critical)\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                if (!operands.get(1).isSetLiteral() || !operands.get(2).isSetLiteral()) {\n          \n          \n            \n                if (!operands.get(1).isSetLiteral()) {", "url": "https://github.com/apache/pinot/pull/6246#discussion_r577911646", "createdAt": "2021-02-17T20:11:22Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-common/src/main/java/org/apache/pinot/sql/parsers/CalciteSqlParser.java", "diffHunk": "@@ -902,11 +902,47 @@ private static Expression compileFunctionExpression(SqlBasicCall functionNode) {\n         operands.add(toExpression(childNode));\n       }\n     }\n+    validateFunction(functionName, operands);\n     Expression functionExpression = RequestUtils.getFunctionExpression(functionName);\n     functionExpression.getFunctionCall().setOperands(operands);\n     return functionExpression;\n   }\n \n+  private static void validateFunction(String functionName, List<Expression> operands) {\n+    switch (functionName.toUpperCase()) {\n+      case \"JSONEXTRACTSCALAR\":\n+        validateJsonExtractScalarFunction(functionName, operands);\n+        break;\n+      case \"JSONEXTRACTKEY\":\n+        validateJsonExtractKeyFunction(functionName, operands);\n+        break;\n+    }\n+  }\n+\n+  private static void validateJsonExtractScalarFunction(String functionName, List<Expression> operands) {\n+    // Check that there are exactly 3 or 4 arguments\n+    if (operands.size() < 3 || operands.size() > 4) {\n+      throw new SqlCompilationException(\n+          \"Expected 3/4 arguments for transform function: jsonExtractScalar(jsonFieldName, 'jsonPath', 'resultsType', ['defaultValue'])\");\n+    }\n+    if (!operands.get(1).isSetLiteral() || !operands.get(2).isSetLiteral()) {\n+      throw new SqlCompilationException(\n+          \"Expected the second or third argument for transform function: jsonExtractScalar(jsonFieldName, 'jsonPath', 'resultsType', ['defaultValue']) to be a single-quoted literal value.\");\n+    }\n+  }\n+\n+  private static void validateJsonExtractKeyFunction(String functionName, List<Expression> operands) {\n+    // Check that there are exactly 3 or 4 arguments\n+    if (operands.size() != 2) {\n+      throw new SqlCompilationException(\n+          \"Exactly 2 arguments are required for transform function: jsonExtractKey(jsonFieldName, 'jsonPath')\");\n+    }\n+    if (!operands.get(1).isSetLiteral() || !operands.get(2).isSetLiteral()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "53807b89a020adddefd5a0ffcf55345111b847b7"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzY0NDQxNzA3OnYy", "diffSide": "RIGHT", "path": "pinot-common/src/main/java/org/apache/pinot/sql/parsers/CalciteSqlParser.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0xN1QyMDoxMjo1MVrOInI-UA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0xN1QyMDoxMjo1MVrOInI-UA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NzkxMjQwMA==", "bodyText": "Update the comment", "url": "https://github.com/apache/pinot/pull/6246#discussion_r577912400", "createdAt": "2021-02-17T20:12:51Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-common/src/main/java/org/apache/pinot/sql/parsers/CalciteSqlParser.java", "diffHunk": "@@ -902,11 +902,47 @@ private static Expression compileFunctionExpression(SqlBasicCall functionNode) {\n         operands.add(toExpression(childNode));\n       }\n     }\n+    validateFunction(functionName, operands);\n     Expression functionExpression = RequestUtils.getFunctionExpression(functionName);\n     functionExpression.getFunctionCall().setOperands(operands);\n     return functionExpression;\n   }\n \n+  private static void validateFunction(String functionName, List<Expression> operands) {\n+    switch (functionName.toUpperCase()) {\n+      case \"JSONEXTRACTSCALAR\":\n+        validateJsonExtractScalarFunction(functionName, operands);\n+        break;\n+      case \"JSONEXTRACTKEY\":\n+        validateJsonExtractKeyFunction(functionName, operands);\n+        break;\n+    }\n+  }\n+\n+  private static void validateJsonExtractScalarFunction(String functionName, List<Expression> operands) {\n+    // Check that there are exactly 3 or 4 arguments\n+    if (operands.size() < 3 || operands.size() > 4) {\n+      throw new SqlCompilationException(\n+          \"Expected 3/4 arguments for transform function: jsonExtractScalar(jsonFieldName, 'jsonPath', 'resultsType', ['defaultValue'])\");\n+    }\n+    if (!operands.get(1).isSetLiteral() || !operands.get(2).isSetLiteral()) {\n+      throw new SqlCompilationException(\n+          \"Expected the second or third argument for transform function: jsonExtractScalar(jsonFieldName, 'jsonPath', 'resultsType', ['defaultValue']) to be a single-quoted literal value.\");\n+    }\n+  }\n+\n+  private static void validateJsonExtractKeyFunction(String functionName, List<Expression> operands) {\n+    // Check that there are exactly 3 or 4 arguments", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "53807b89a020adddefd5a0ffcf55345111b847b7"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzY0NDQyMDc0OnYy", "diffSide": "RIGHT", "path": "pinot-common/src/main/java/org/apache/pinot/sql/parsers/CalciteSqlParser.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0xN1QyMDoxMzo1M1rOInJAgQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0xN1QyMDoxMzo1M1rOInJAgQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NzkxMjk2MQ==", "bodyText": "(nit) For clarity\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                if (operands.size() < 3 || operands.size() > 4) {\n          \n          \n            \n                if (operands.size() != 3 && operands.size() != 4) {", "url": "https://github.com/apache/pinot/pull/6246#discussion_r577912961", "createdAt": "2021-02-17T20:13:53Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-common/src/main/java/org/apache/pinot/sql/parsers/CalciteSqlParser.java", "diffHunk": "@@ -902,11 +902,47 @@ private static Expression compileFunctionExpression(SqlBasicCall functionNode) {\n         operands.add(toExpression(childNode));\n       }\n     }\n+    validateFunction(functionName, operands);\n     Expression functionExpression = RequestUtils.getFunctionExpression(functionName);\n     functionExpression.getFunctionCall().setOperands(operands);\n     return functionExpression;\n   }\n \n+  private static void validateFunction(String functionName, List<Expression> operands) {\n+    switch (functionName.toUpperCase()) {\n+      case \"JSONEXTRACTSCALAR\":\n+        validateJsonExtractScalarFunction(functionName, operands);\n+        break;\n+      case \"JSONEXTRACTKEY\":\n+        validateJsonExtractKeyFunction(functionName, operands);\n+        break;\n+    }\n+  }\n+\n+  private static void validateJsonExtractScalarFunction(String functionName, List<Expression> operands) {\n+    // Check that there are exactly 3 or 4 arguments\n+    if (operands.size() < 3 || operands.size() > 4) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "53807b89a020adddefd5a0ffcf55345111b847b7"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzY0NDQyNTUyOnYy", "diffSide": "RIGHT", "path": "pinot-common/src/main/java/org/apache/pinot/sql/parsers/CalciteSqlParser.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0xN1QyMDoxNToxNVrOInJDhQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0xN1QyMDoxNToxNVrOInJDhQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NzkxMzczMw==", "bodyText": "\"Expect ...\", same for other exception message", "url": "https://github.com/apache/pinot/pull/6246#discussion_r577913733", "createdAt": "2021-02-17T20:15:15Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-common/src/main/java/org/apache/pinot/sql/parsers/CalciteSqlParser.java", "diffHunk": "@@ -902,11 +902,47 @@ private static Expression compileFunctionExpression(SqlBasicCall functionNode) {\n         operands.add(toExpression(childNode));\n       }\n     }\n+    validateFunction(functionName, operands);\n     Expression functionExpression = RequestUtils.getFunctionExpression(functionName);\n     functionExpression.getFunctionCall().setOperands(operands);\n     return functionExpression;\n   }\n \n+  private static void validateFunction(String functionName, List<Expression> operands) {\n+    switch (functionName.toUpperCase()) {\n+      case \"JSONEXTRACTSCALAR\":\n+        validateJsonExtractScalarFunction(functionName, operands);\n+        break;\n+      case \"JSONEXTRACTKEY\":\n+        validateJsonExtractKeyFunction(functionName, operands);\n+        break;\n+    }\n+  }\n+\n+  private static void validateJsonExtractScalarFunction(String functionName, List<Expression> operands) {\n+    // Check that there are exactly 3 or 4 arguments\n+    if (operands.size() < 3 || operands.size() > 4) {\n+      throw new SqlCompilationException(\n+          \"Expected 3/4 arguments for transform function: jsonExtractScalar(jsonFieldName, 'jsonPath', 'resultsType', ['defaultValue'])\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "53807b89a020adddefd5a0ffcf55345111b847b7"}, "originalPosition": 25}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3103, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}