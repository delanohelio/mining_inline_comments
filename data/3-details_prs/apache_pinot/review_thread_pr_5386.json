{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE4MTA2NTk5", "number": 5386, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQyMDowNDoxMFrOD8oVmw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQyMDowNDo1MFrOD8oWdw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0OTAyMDQzOnYy", "diffSide": "RIGHT", "path": "thirdeye/thirdeye-pinot/src/main/java/org/apache/pinot/thirdeye/detection/yaml/YamlResource.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQyMDowNDoxMFrOGVsPYA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQyMTozMzoyOVrOGVvBtQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTM5ODExMg==", "bodyText": "return the error message in the endpoint's response?", "url": "https://github.com/apache/pinot/pull/5386#discussion_r425398112", "createdAt": "2020-05-14T20:04:10Z", "author": {"login": "jihaozh"}, "path": "thirdeye/thirdeye-pinot/src/main/java/org/apache/pinot/thirdeye/detection/yaml/YamlResource.java", "diffHunk": "@@ -1107,4 +1115,33 @@ public Response listYamls(\n     LOG.info(\"Successfully returned \" + yamls.size() + \" detection configs.\");\n     return Response.ok(yamls).build();\n   }\n+\n+  /**\n+   * Api to trigger a notification alert. Mostly used for ad-hoc testing.\n+   * Alert will be sent only if there are new anomalies since the last watermark.\n+   * Watermarks will be updated after notifying anomalies if any.\n+   */\n+  @PUT\n+  @Path(\"/notify/{id}\")\n+  @ApiOperation(\"Send notification email for detection alert config\")\n+  public void test(\n+      @ApiParam(\"Subscription configuration id for the alert\") @NotNull @PathParam(\"id\") long detectionAlertConfigId) {\n+    LOG.info(\"Triggering subscription task with id \" + detectionAlertConfigId);\n+\n+    // Build the task context\n+    ThirdEyeAnomalyConfiguration config = new ThirdEyeAnomalyConfiguration();\n+    config.setAlerterConfiguration(alerterConfig);\n+    TaskContext taskContext = new TaskContext();\n+    taskContext.setThirdEyeAnomalyConfiguration(config);\n+\n+    // Run the notification task. This will update the subscription watermark as well.\n+    DetectionAlertTaskInfo taskInfo = new DetectionAlertTaskInfo(detectionAlertConfigId);\n+    TaskRunner taskRunner = new DetectionAlertTaskRunner();\n+    try {\n+      taskRunner.execute(taskInfo, taskContext);\n+    } catch (Exception e) {\n+      LOG.error(\"Exception while triggering the notification task with id \" + detectionAlertConfigId, e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "03e0a1071aff259bbf0994c7901e788fa86d10d9"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTQ0Mzc2NQ==", "bodyText": "Done", "url": "https://github.com/apache/pinot/pull/5386#discussion_r425443765", "createdAt": "2020-05-14T21:33:29Z", "author": {"login": "akshayrai"}, "path": "thirdeye/thirdeye-pinot/src/main/java/org/apache/pinot/thirdeye/detection/yaml/YamlResource.java", "diffHunk": "@@ -1107,4 +1115,33 @@ public Response listYamls(\n     LOG.info(\"Successfully returned \" + yamls.size() + \" detection configs.\");\n     return Response.ok(yamls).build();\n   }\n+\n+  /**\n+   * Api to trigger a notification alert. Mostly used for ad-hoc testing.\n+   * Alert will be sent only if there are new anomalies since the last watermark.\n+   * Watermarks will be updated after notifying anomalies if any.\n+   */\n+  @PUT\n+  @Path(\"/notify/{id}\")\n+  @ApiOperation(\"Send notification email for detection alert config\")\n+  public void test(\n+      @ApiParam(\"Subscription configuration id for the alert\") @NotNull @PathParam(\"id\") long detectionAlertConfigId) {\n+    LOG.info(\"Triggering subscription task with id \" + detectionAlertConfigId);\n+\n+    // Build the task context\n+    ThirdEyeAnomalyConfiguration config = new ThirdEyeAnomalyConfiguration();\n+    config.setAlerterConfiguration(alerterConfig);\n+    TaskContext taskContext = new TaskContext();\n+    taskContext.setThirdEyeAnomalyConfiguration(config);\n+\n+    // Run the notification task. This will update the subscription watermark as well.\n+    DetectionAlertTaskInfo taskInfo = new DetectionAlertTaskInfo(detectionAlertConfigId);\n+    TaskRunner taskRunner = new DetectionAlertTaskRunner();\n+    try {\n+      taskRunner.execute(taskInfo, taskContext);\n+    } catch (Exception e) {\n+      LOG.error(\"Exception while triggering the notification task with id \" + detectionAlertConfigId, e);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTM5ODExMg=="}, "originalCommit": {"oid": "03e0a1071aff259bbf0994c7901e788fa86d10d9"}, "originalPosition": 80}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0OTAyMjYzOnYy", "diffSide": "RIGHT", "path": "thirdeye/thirdeye-pinot/src/main/java/org/apache/pinot/thirdeye/detection/yaml/YamlResource.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQyMDowNDo1MFrOGVsQvg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQyMTozNToxNlrOGVvFDw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTM5ODQ2Mg==", "bodyText": "return a success response here?", "url": "https://github.com/apache/pinot/pull/5386#discussion_r425398462", "createdAt": "2020-05-14T20:04:50Z", "author": {"login": "jihaozh"}, "path": "thirdeye/thirdeye-pinot/src/main/java/org/apache/pinot/thirdeye/detection/yaml/YamlResource.java", "diffHunk": "@@ -1107,4 +1115,33 @@ public Response listYamls(\n     LOG.info(\"Successfully returned \" + yamls.size() + \" detection configs.\");\n     return Response.ok(yamls).build();\n   }\n+\n+  /**\n+   * Api to trigger a notification alert. Mostly used for ad-hoc testing.\n+   * Alert will be sent only if there are new anomalies since the last watermark.\n+   * Watermarks will be updated after notifying anomalies if any.\n+   */\n+  @PUT\n+  @Path(\"/notify/{id}\")\n+  @ApiOperation(\"Send notification email for detection alert config\")\n+  public void test(\n+      @ApiParam(\"Subscription configuration id for the alert\") @NotNull @PathParam(\"id\") long detectionAlertConfigId) {\n+    LOG.info(\"Triggering subscription task with id \" + detectionAlertConfigId);\n+\n+    // Build the task context\n+    ThirdEyeAnomalyConfiguration config = new ThirdEyeAnomalyConfiguration();\n+    config.setAlerterConfiguration(alerterConfig);\n+    TaskContext taskContext = new TaskContext();\n+    taskContext.setThirdEyeAnomalyConfiguration(config);\n+\n+    // Run the notification task. This will update the subscription watermark as well.\n+    DetectionAlertTaskInfo taskInfo = new DetectionAlertTaskInfo(detectionAlertConfigId);\n+    TaskRunner taskRunner = new DetectionAlertTaskRunner();\n+    try {\n+      taskRunner.execute(taskInfo, taskContext);\n+    } catch (Exception e) {\n+      LOG.error(\"Exception while triggering the notification task with id \" + detectionAlertConfigId, e);\n+    }\n+    LOG.info(\"Notification api triggered successfully\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "03e0a1071aff259bbf0994c7901e788fa86d10d9"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTQ0NDYyMw==", "bodyText": "done", "url": "https://github.com/apache/pinot/pull/5386#discussion_r425444623", "createdAt": "2020-05-14T21:35:16Z", "author": {"login": "akshayrai"}, "path": "thirdeye/thirdeye-pinot/src/main/java/org/apache/pinot/thirdeye/detection/yaml/YamlResource.java", "diffHunk": "@@ -1107,4 +1115,33 @@ public Response listYamls(\n     LOG.info(\"Successfully returned \" + yamls.size() + \" detection configs.\");\n     return Response.ok(yamls).build();\n   }\n+\n+  /**\n+   * Api to trigger a notification alert. Mostly used for ad-hoc testing.\n+   * Alert will be sent only if there are new anomalies since the last watermark.\n+   * Watermarks will be updated after notifying anomalies if any.\n+   */\n+  @PUT\n+  @Path(\"/notify/{id}\")\n+  @ApiOperation(\"Send notification email for detection alert config\")\n+  public void test(\n+      @ApiParam(\"Subscription configuration id for the alert\") @NotNull @PathParam(\"id\") long detectionAlertConfigId) {\n+    LOG.info(\"Triggering subscription task with id \" + detectionAlertConfigId);\n+\n+    // Build the task context\n+    ThirdEyeAnomalyConfiguration config = new ThirdEyeAnomalyConfiguration();\n+    config.setAlerterConfiguration(alerterConfig);\n+    TaskContext taskContext = new TaskContext();\n+    taskContext.setThirdEyeAnomalyConfiguration(config);\n+\n+    // Run the notification task. This will update the subscription watermark as well.\n+    DetectionAlertTaskInfo taskInfo = new DetectionAlertTaskInfo(detectionAlertConfigId);\n+    TaskRunner taskRunner = new DetectionAlertTaskRunner();\n+    try {\n+      taskRunner.execute(taskInfo, taskContext);\n+    } catch (Exception e) {\n+      LOG.error(\"Exception while triggering the notification task with id \" + detectionAlertConfigId, e);\n+    }\n+    LOG.info(\"Notification api triggered successfully\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTM5ODQ2Mg=="}, "originalCommit": {"oid": "03e0a1071aff259bbf0994c7901e788fa86d10d9"}, "originalPosition": 82}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3281, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}