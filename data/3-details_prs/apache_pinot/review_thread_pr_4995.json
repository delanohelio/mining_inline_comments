{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY0MzMxMjQ1", "number": 4995, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QyMjoyMDo1MFrODY8-fw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQwMjozNzoxOVrODbb59Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3NDkxNDU1OnYy", "diffSide": "RIGHT", "path": "pinot-integration-tests/src/test/java/org/apache/pinot/integration/tests/ServerStarterIntegrationTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QyMjoyMDo1MFrOFfGt1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QyMjo1ODoyNlrOFfHVrA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODE2MDIxMg==", "bodyText": "Following code looks like its repeated in every test. Consider refactoring ?", "url": "https://github.com/apache/pinot/pull/4995#discussion_r368160212", "createdAt": "2020-01-17T22:20:50Z", "author": {"login": "icefury71"}, "path": "pinot-integration-tests/src/test/java/org/apache/pinot/integration/tests/ServerStarterIntegrationTest.java", "diffHunk": "@@ -0,0 +1,179 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.integration.tests;\n+\n+\n+import org.apache.commons.configuration.Configuration;\n+import org.apache.commons.configuration.PropertiesConfiguration;\n+import org.apache.helix.HelixManager;\n+import org.apache.helix.PropertyKey;\n+import org.apache.helix.model.InstanceConfig;\n+import org.apache.pinot.common.utils.CommonConstants;\n+import org.apache.pinot.common.utils.ZkStarter;\n+import org.apache.pinot.controller.helix.ControllerTest;\n+import org.apache.pinot.server.starter.helix.HelixServerStarter;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Test;\n+\n+import static org.apache.pinot.common.utils.CommonConstants.Helix.KEY_OF_SERVER_NETTY_HOST;\n+import static org.apache.pinot.common.utils.CommonConstants.Helix.KEY_OF_SERVER_NETTY_PORT;\n+import static org.apache.pinot.common.utils.CommonConstants.Server.CONFIG_OF_INSTANCE_ID;\n+import static org.apache.pinot.common.utils.CommonConstants.Server.CONFIG_OF_USE_LOGICAL_INSTANCE_ID;\n+import static org.testng.Assert.assertEquals;\n+\n+\n+public class ServerStarterIntegrationTest extends ControllerTest {\n+  public static final String DEFAULT_SERVER_ID = \"Server_127.0.0.1_8098\";\n+  public static final String SERVER1 = \"Server1\";\n+  @BeforeClass\n+  public void setUp()\n+      throws Exception {\n+    startZk();\n+    startController();\n+  }\n+\n+  @AfterClass\n+  public void tearDown()\n+      throws Exception {\n+    stopController();\n+    stopZk();\n+  }\n+\n+  @Test\n+  public void testWithNoInstanceIdNoHostnamePort()\n+      throws Exception {\n+    // Test the behavior when no instance id nor hostname/port is specified in server conf.\n+    Configuration serverConf = new PropertiesConfiguration();\n+    // Start the server\n+    HelixServerStarter helixServerStarter =\n+        new HelixServerStarter(getHelixClusterName(), ZkStarter.DEFAULT_ZK_STR, serverConf);\n+\n+    // Verify the serverId, host and port are set correctly in Zk.\n+    HelixManager helixManager = helixServerStarter.getHelixManager();\n+    PropertyKey.Builder keyBuilder = helixManager.getHelixDataAccessor().keyBuilder();\n+    InstanceConfig config =  helixManager.getHelixDataAccessor().getProperty(keyBuilder.instanceConfig(DEFAULT_SERVER_ID));\n+    helixServerStarter.stop();\n+\n+    assertEquals(config.getInstanceName(), DEFAULT_SERVER_ID);\n+    // By default (auto joined instances), server instance name is of format: {@code Server_<hostname>_<port>}, e.g.\n+    // {@code Server_localhost_12345}, hostname is of format: {@code Server_<hostname>}, e.g. {@code Server_localhost}.\n+    // More details refer to the class ServerInstance.\n+    assertEquals(config.getHostName(), \"Server_127.0.0.1\");\n+    assertEquals(config.getPort(), \"8098\");\n+  }\n+\n+  @Test\n+  public void testWithNoInstanceIdButWithHostnamePort()\n+      throws Exception {\n+    // Test the behavior when no instance id specified but hostname/port is specified in server conf.\n+    Configuration serverConf = new PropertiesConfiguration();\n+    serverConf.setProperty(KEY_OF_SERVER_NETTY_HOST, \"host1\");\n+    serverConf.setProperty(KEY_OF_SERVER_NETTY_PORT, 10001);\n+    // Start the server\n+    HelixServerStarter helixServerStarter =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9a5d63c7e3aee1e43bbdaf8897ab50540a67f13e"}, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODE3MDQxMg==", "bodyText": "Code refactored to remove duplicate codes.", "url": "https://github.com/apache/pinot/pull/4995#discussion_r368170412", "createdAt": "2020-01-17T22:58:26Z", "author": {"login": "chenboat"}, "path": "pinot-integration-tests/src/test/java/org/apache/pinot/integration/tests/ServerStarterIntegrationTest.java", "diffHunk": "@@ -0,0 +1,179 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.integration.tests;\n+\n+\n+import org.apache.commons.configuration.Configuration;\n+import org.apache.commons.configuration.PropertiesConfiguration;\n+import org.apache.helix.HelixManager;\n+import org.apache.helix.PropertyKey;\n+import org.apache.helix.model.InstanceConfig;\n+import org.apache.pinot.common.utils.CommonConstants;\n+import org.apache.pinot.common.utils.ZkStarter;\n+import org.apache.pinot.controller.helix.ControllerTest;\n+import org.apache.pinot.server.starter.helix.HelixServerStarter;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Test;\n+\n+import static org.apache.pinot.common.utils.CommonConstants.Helix.KEY_OF_SERVER_NETTY_HOST;\n+import static org.apache.pinot.common.utils.CommonConstants.Helix.KEY_OF_SERVER_NETTY_PORT;\n+import static org.apache.pinot.common.utils.CommonConstants.Server.CONFIG_OF_INSTANCE_ID;\n+import static org.apache.pinot.common.utils.CommonConstants.Server.CONFIG_OF_USE_LOGICAL_INSTANCE_ID;\n+import static org.testng.Assert.assertEquals;\n+\n+\n+public class ServerStarterIntegrationTest extends ControllerTest {\n+  public static final String DEFAULT_SERVER_ID = \"Server_127.0.0.1_8098\";\n+  public static final String SERVER1 = \"Server1\";\n+  @BeforeClass\n+  public void setUp()\n+      throws Exception {\n+    startZk();\n+    startController();\n+  }\n+\n+  @AfterClass\n+  public void tearDown()\n+      throws Exception {\n+    stopController();\n+    stopZk();\n+  }\n+\n+  @Test\n+  public void testWithNoInstanceIdNoHostnamePort()\n+      throws Exception {\n+    // Test the behavior when no instance id nor hostname/port is specified in server conf.\n+    Configuration serverConf = new PropertiesConfiguration();\n+    // Start the server\n+    HelixServerStarter helixServerStarter =\n+        new HelixServerStarter(getHelixClusterName(), ZkStarter.DEFAULT_ZK_STR, serverConf);\n+\n+    // Verify the serverId, host and port are set correctly in Zk.\n+    HelixManager helixManager = helixServerStarter.getHelixManager();\n+    PropertyKey.Builder keyBuilder = helixManager.getHelixDataAccessor().keyBuilder();\n+    InstanceConfig config =  helixManager.getHelixDataAccessor().getProperty(keyBuilder.instanceConfig(DEFAULT_SERVER_ID));\n+    helixServerStarter.stop();\n+\n+    assertEquals(config.getInstanceName(), DEFAULT_SERVER_ID);\n+    // By default (auto joined instances), server instance name is of format: {@code Server_<hostname>_<port>}, e.g.\n+    // {@code Server_localhost_12345}, hostname is of format: {@code Server_<hostname>}, e.g. {@code Server_localhost}.\n+    // More details refer to the class ServerInstance.\n+    assertEquals(config.getHostName(), \"Server_127.0.0.1\");\n+    assertEquals(config.getPort(), \"8098\");\n+  }\n+\n+  @Test\n+  public void testWithNoInstanceIdButWithHostnamePort()\n+      throws Exception {\n+    // Test the behavior when no instance id specified but hostname/port is specified in server conf.\n+    Configuration serverConf = new PropertiesConfiguration();\n+    serverConf.setProperty(KEY_OF_SERVER_NETTY_HOST, \"host1\");\n+    serverConf.setProperty(KEY_OF_SERVER_NETTY_PORT, 10001);\n+    // Start the server\n+    HelixServerStarter helixServerStarter =", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODE2MDIxMg=="}, "originalCommit": {"oid": "9a5d63c7e3aee1e43bbdaf8897ab50540a67f13e"}, "originalPosition": 90}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3NDkxNjc4OnYy", "diffSide": "RIGHT", "path": "pinot-common/src/main/java/org/apache/pinot/common/utils/CommonConstants.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QyMjoyMTo1N1rOFfGvEw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QyMzowNjo1MFrOFfHdgg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODE2MDUzMQ==", "bodyText": "Why do we need this ? I think we will always use the Zk info to look up host and port (whether logical id is enabled or not).", "url": "https://github.com/apache/pinot/pull/4995#discussion_r368160531", "createdAt": "2020-01-17T22:21:57Z", "author": {"login": "icefury71"}, "path": "pinot-common/src/main/java/org/apache/pinot/common/utils/CommonConstants.java", "diffHunk": "@@ -192,6 +192,9 @@ public ServerType getServerType() {\n     public static final String CONFIG_OF_REQUEST_HANDLER_FACTORY_CLASS = \"pinot.server.requestHandlerFactory.class\";\n     public static final String CONFIG_OF_NETTY_PORT = \"pinot.server.netty.port\";\n     public static final String CONFIG_OF_ADMIN_API_PORT = \"pinot.server.adminapi.port\";\n+    // A logical instance id is one which does not contain server host name and/or port info. E.g., server1.\n+    // It is by default disabled.\n+    public static final String CONFIG_OF_USE_LOGICAL_INSTANCE_ID = \"pinot.server.logical.instance.id.enabled\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9a5d63c7e3aee1e43bbdaf8897ab50540a67f13e"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODE3MjQxOA==", "bodyText": "This config flag is used only for server start and  mainly used for backward compatibility. It controls if we want to overwrite the host/port info in zk using those found server config. The current behavior is to extract hostname from instance id if instance id is found in server config. We do not want to break these use cases for now.", "url": "https://github.com/apache/pinot/pull/4995#discussion_r368172418", "createdAt": "2020-01-17T23:06:50Z", "author": {"login": "chenboat"}, "path": "pinot-common/src/main/java/org/apache/pinot/common/utils/CommonConstants.java", "diffHunk": "@@ -192,6 +192,9 @@ public ServerType getServerType() {\n     public static final String CONFIG_OF_REQUEST_HANDLER_FACTORY_CLASS = \"pinot.server.requestHandlerFactory.class\";\n     public static final String CONFIG_OF_NETTY_PORT = \"pinot.server.netty.port\";\n     public static final String CONFIG_OF_ADMIN_API_PORT = \"pinot.server.adminapi.port\";\n+    // A logical instance id is one which does not contain server host name and/or port info. E.g., server1.\n+    // It is by default disabled.\n+    public static final String CONFIG_OF_USE_LOGICAL_INSTANCE_ID = \"pinot.server.logical.instance.id.enabled\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODE2MDUzMQ=="}, "originalCommit": {"oid": "9a5d63c7e3aee1e43bbdaf8897ab50540a67f13e"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3NDkxODU0OnYy", "diffSide": "RIGHT", "path": "pinot-server/src/main/java/org/apache/pinot/server/starter/helix/HelixServerStarter.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QyMjoyMjo0MVrOFfGwGQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QyMzowNzo0MVrOFfHeTw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODE2MDc5Mw==", "bodyText": "You could also simply look up if the server config has instance id set ?", "url": "https://github.com/apache/pinot/pull/4995#discussion_r368160793", "createdAt": "2020-01-17T22:22:41Z", "author": {"login": "icefury71"}, "path": "pinot-server/src/main/java/org/apache/pinot/server/starter/helix/HelixServerStarter.java", "diffHunk": "@@ -145,6 +146,11 @@ public HelixServerStarter(String helixClusterName, String zkServer, Configuratio\n \n     LOGGER.info(\"Connecting Helix manager\");\n     _helixManager.connect();\n+    // Overwrite the server netty host and port.\n+    if (_serverConf.getBoolean(CONFIG_OF_USE_LOGICAL_INSTANCE_ID, false)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9a5d63c7e3aee1e43bbdaf8897ab50540a67f13e"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODE3MjYyMw==", "bodyText": "Similar consideration as above.", "url": "https://github.com/apache/pinot/pull/4995#discussion_r368172623", "createdAt": "2020-01-17T23:07:41Z", "author": {"login": "chenboat"}, "path": "pinot-server/src/main/java/org/apache/pinot/server/starter/helix/HelixServerStarter.java", "diffHunk": "@@ -145,6 +146,11 @@ public HelixServerStarter(String helixClusterName, String zkServer, Configuratio\n \n     LOGGER.info(\"Connecting Helix manager\");\n     _helixManager.connect();\n+    // Overwrite the server netty host and port.\n+    if (_serverConf.getBoolean(CONFIG_OF_USE_LOGICAL_INSTANCE_ID, false)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODE2MDc5Mw=="}, "originalCommit": {"oid": "9a5d63c7e3aee1e43bbdaf8897ab50540a67f13e"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5NjQ1NjE0OnYy", "diffSide": "RIGHT", "path": "pinot-server/src/main/java/org/apache/pinot/server/starter/helix/HelixServerStarter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QyMDowNjoyNVrOFiP2Rg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QyMDowNjoyNVrOFiP2Rg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTQ1NTU1OA==", "bodyText": "Can you combine this with addInstanceTagIfNeeded() as both of them need to access the InstanceConfig to reduce the overhead?", "url": "https://github.com/apache/pinot/pull/4995#discussion_r371455558", "createdAt": "2020-01-27T20:06:25Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-server/src/main/java/org/apache/pinot/server/starter/helix/HelixServerStarter.java", "diffHunk": "@@ -186,6 +194,16 @@ public HelixServerStarter(String helixClusterName, String zkServer, Configuratio\n     serverMetrics.addCallbackGauge(\"memory.allocationFailureCount\", PinotDataBuffer::getAllocationFailureCount);\n   }\n \n+  private void overwriteServerHostInfo() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f87cd46ef0aced62d5e5741439a55452c1e91fc7"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5NzI5OTQ3OnYy", "diffSide": "RIGHT", "path": "pinot-server/src/main/java/org/apache/pinot/server/starter/helix/HelixServerStarter.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQwMjo0NDo1MlrOFiX4fw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQwMTozNTo1OVrOFi6OxA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTU4NzE5OQ==", "bodyText": "_helixAdmin.addInstanceTag() can be simplified to instanceTags.add()", "url": "https://github.com/apache/pinot/pull/4995#discussion_r371587199", "createdAt": "2020-01-28T02:44:52Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-server/src/main/java/org/apache/pinot/server/starter/helix/HelixServerStarter.java", "diffHunk": "@@ -266,7 +266,7 @@ private void updateInstanceConfigInHelix(Map<String, String> props) {\n     _helixAdmin.setConfig(scope, props);\n   }\n \n-  private void addInstanceTagIfNeeded(String clusterName, String instanceName) {\n+  private void updateInstanceConfigIfNeeded(String clusterName, String instanceName, Configuration serverConf) {\n     InstanceConfig instanceConfig = _helixAdmin.getInstanceConfig(clusterName, instanceName);\n     List<String> instanceTags = instanceConfig.getTags();\n     if (instanceTags == null || instanceTags.size() == 0) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "326560301f2cefeeb94e7b68971e036b63f19576"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjAwNTUwOA==", "bodyText": "_helixAdmin.addInstanceTag() writes to zk. InstanceTag.add() does not do that -- instanceTag is merely a reference. I do not think the former can be simplified to latter. Did I miss anything here?", "url": "https://github.com/apache/pinot/pull/4995#discussion_r372005508", "createdAt": "2020-01-28T19:20:35Z", "author": {"login": "chenboat"}, "path": "pinot-server/src/main/java/org/apache/pinot/server/starter/helix/HelixServerStarter.java", "diffHunk": "@@ -266,7 +266,7 @@ private void updateInstanceConfigInHelix(Map<String, String> props) {\n     _helixAdmin.setConfig(scope, props);\n   }\n \n-  private void addInstanceTagIfNeeded(String clusterName, String instanceName) {\n+  private void updateInstanceConfigIfNeeded(String clusterName, String instanceName, Configuration serverConf) {\n     InstanceConfig instanceConfig = _helixAdmin.getInstanceConfig(clusterName, instanceName);\n     List<String> instanceTags = instanceConfig.getTags();\n     if (instanceTags == null || instanceTags.size() == 0) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTU4NzE5OQ=="}, "originalCommit": {"oid": "326560301f2cefeeb94e7b68971e036b63f19576"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjEyMDA5NA==", "bodyText": "That is why I suggested adding a flag to track whether we need to update and write the instance config back to ZK. Each _helixAdmin.addInstanceTag() reads the instance config and writes it back, which can be saved with the flag. Overall we should only read the instance config once, and write it back once if it needs to be updated.", "url": "https://github.com/apache/pinot/pull/4995#discussion_r372120094", "createdAt": "2020-01-28T23:39:36Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-server/src/main/java/org/apache/pinot/server/starter/helix/HelixServerStarter.java", "diffHunk": "@@ -266,7 +266,7 @@ private void updateInstanceConfigInHelix(Map<String, String> props) {\n     _helixAdmin.setConfig(scope, props);\n   }\n \n-  private void addInstanceTagIfNeeded(String clusterName, String instanceName) {\n+  private void updateInstanceConfigIfNeeded(String clusterName, String instanceName, Configuration serverConf) {\n     InstanceConfig instanceConfig = _helixAdmin.getInstanceConfig(clusterName, instanceName);\n     List<String> instanceTags = instanceConfig.getTags();\n     if (instanceTags == null || instanceTags.size() == 0) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTU4NzE5OQ=="}, "originalCommit": {"oid": "326560301f2cefeeb94e7b68971e036b63f19576"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjE0OTk1Ng==", "bodyText": "Got it. Revised.", "url": "https://github.com/apache/pinot/pull/4995#discussion_r372149956", "createdAt": "2020-01-29T01:35:59Z", "author": {"login": "chenboat"}, "path": "pinot-server/src/main/java/org/apache/pinot/server/starter/helix/HelixServerStarter.java", "diffHunk": "@@ -266,7 +266,7 @@ private void updateInstanceConfigInHelix(Map<String, String> props) {\n     _helixAdmin.setConfig(scope, props);\n   }\n \n-  private void addInstanceTagIfNeeded(String clusterName, String instanceName) {\n+  private void updateInstanceConfigIfNeeded(String clusterName, String instanceName, Configuration serverConf) {\n     InstanceConfig instanceConfig = _helixAdmin.getInstanceConfig(clusterName, instanceName);\n     List<String> instanceTags = instanceConfig.getTags();\n     if (instanceTags == null || instanceTags.size() == 0) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTU4NzE5OQ=="}, "originalCommit": {"oid": "326560301f2cefeeb94e7b68971e036b63f19576"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5NzMwMDU5OnYy", "diffSide": "RIGHT", "path": "pinot-server/src/main/java/org/apache/pinot/server/starter/helix/HelixServerStarter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQwMjo0NTo0OFrOFiX5Lg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQxOToyNjowOVrOFixljQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTU4NzM3NA==", "bodyText": "Add a boolean flag to track whether the instance config needs to be updated", "url": "https://github.com/apache/pinot/pull/4995#discussion_r371587374", "createdAt": "2020-01-28T02:45:48Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-server/src/main/java/org/apache/pinot/server/starter/helix/HelixServerStarter.java", "diffHunk": "@@ -266,7 +266,7 @@ private void updateInstanceConfigInHelix(Map<String, String> props) {\n     _helixAdmin.setConfig(scope, props);\n   }\n \n-  private void addInstanceTagIfNeeded(String clusterName, String instanceName) {\n+  private void updateInstanceConfigIfNeeded(String clusterName, String instanceName, Configuration serverConf) {\n     InstanceConfig instanceConfig = _helixAdmin.getInstanceConfig(clusterName, instanceName);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "326560301f2cefeeb94e7b68971e036b63f19576"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjAwODMzMw==", "bodyText": "What is the use of a boolean flag here? We have to read from the zk anyway because to update tags needs to the current number of tags. As for writing to zk, the current boolean conditions already check for cases we do not need to write to zk.\nThere could be an optimization to combine two zk writes into one -- but there seems to be many logics specific to instance tag update already. I wonder if it is worthwhile to do this optimization. Instance updates to zk are start only events and the performance impact here should be fine, right?", "url": "https://github.com/apache/pinot/pull/4995#discussion_r372008333", "createdAt": "2020-01-28T19:26:09Z", "author": {"login": "chenboat"}, "path": "pinot-server/src/main/java/org/apache/pinot/server/starter/helix/HelixServerStarter.java", "diffHunk": "@@ -266,7 +266,7 @@ private void updateInstanceConfigInHelix(Map<String, String> props) {\n     _helixAdmin.setConfig(scope, props);\n   }\n \n-  private void addInstanceTagIfNeeded(String clusterName, String instanceName) {\n+  private void updateInstanceConfigIfNeeded(String clusterName, String instanceName, Configuration serverConf) {\n     InstanceConfig instanceConfig = _helixAdmin.getInstanceConfig(clusterName, instanceName);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTU4NzM3NA=="}, "originalCommit": {"oid": "326560301f2cefeeb94e7b68971e036b63f19576"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5NzMwMTk4OnYy", "diffSide": "RIGHT", "path": "pinot-server/src/main/java/org/apache/pinot/server/starter/helix/HelixServerStarter.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQwMjo0NzoxM1rOFiX6Dw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQxOToxNzowMlrOFixTtw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTU4NzU5OQ==", "bodyText": "Don't use System.exit() for production code. Throwing an exception is good enough to abort", "url": "https://github.com/apache/pinot/pull/4995#discussion_r371587599", "createdAt": "2020-01-28T02:47:13Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-server/src/main/java/org/apache/pinot/server/starter/helix/HelixServerStarter.java", "diffHunk": "@@ -277,6 +277,26 @@ private void addInstanceTagIfNeeded(String clusterName, String instanceName) {\n         _helixAdmin.addInstanceTag(clusterName, instanceName, UNTAGGED_SERVER_INSTANCE);\n       }\n     }\n+\n+    // If the server config has both instance_id and host/port info, overwrite the host/port info in zk. Without the\n+    // overwrite, Helix will extract host/port from the instance_id instead of use those in config.\n+    // Use serverConf instead of _serverConf as the latter has been modified.\n+    if (serverConf.containsKey(CONFIG_OF_INSTANCE_ID) && serverConf.containsKey(KEY_OF_SERVER_NETTY_HOST)) {\n+      // Internally, Helix use instanceId to derive Hostname and Port. To decouple them, explicitly set the hostname/port\n+      // field in zk.\n+      instanceConfig.setHostName(_serverConf.getString(KEY_OF_SERVER_NETTY_HOST));\n+      instanceConfig.setPort(Integer.toString(_serverConf.getInt(KEY_OF_SERVER_NETTY_PORT, DEFAULT_SERVER_NETTY_PORT)));\n+      // Use setProperty instead of _helixAdmin.setInstanceConfig because the latter explicitly forbids instance host\n+      // port modification.\n+      if(_helixManager.getHelixDataAccessor().setProperty(\n+          _helixManager.getHelixDataAccessor().keyBuilder().instanceConfig(instanceName), instanceConfig)) {\n+        LOGGER.info(\"Updated server hostname/port successfully for server id {} to {}:\", instanceName, instanceConfig);\n+      } else {\n+        LOGGER.error(\"Failed to update hostname/port for instance: {}\", instanceName);\n+        // Treat this is as a fatal error.\n+        System.exit(1);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "326560301f2cefeeb94e7b68971e036b63f19576"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjAwMzc2Nw==", "bodyText": "Done.Good point.", "url": "https://github.com/apache/pinot/pull/4995#discussion_r372003767", "createdAt": "2020-01-28T19:17:02Z", "author": {"login": "chenboat"}, "path": "pinot-server/src/main/java/org/apache/pinot/server/starter/helix/HelixServerStarter.java", "diffHunk": "@@ -277,6 +277,26 @@ private void addInstanceTagIfNeeded(String clusterName, String instanceName) {\n         _helixAdmin.addInstanceTag(clusterName, instanceName, UNTAGGED_SERVER_INSTANCE);\n       }\n     }\n+\n+    // If the server config has both instance_id and host/port info, overwrite the host/port info in zk. Without the\n+    // overwrite, Helix will extract host/port from the instance_id instead of use those in config.\n+    // Use serverConf instead of _serverConf as the latter has been modified.\n+    if (serverConf.containsKey(CONFIG_OF_INSTANCE_ID) && serverConf.containsKey(KEY_OF_SERVER_NETTY_HOST)) {\n+      // Internally, Helix use instanceId to derive Hostname and Port. To decouple them, explicitly set the hostname/port\n+      // field in zk.\n+      instanceConfig.setHostName(_serverConf.getString(KEY_OF_SERVER_NETTY_HOST));\n+      instanceConfig.setPort(Integer.toString(_serverConf.getInt(KEY_OF_SERVER_NETTY_PORT, DEFAULT_SERVER_NETTY_PORT)));\n+      // Use setProperty instead of _helixAdmin.setInstanceConfig because the latter explicitly forbids instance host\n+      // port modification.\n+      if(_helixManager.getHelixDataAccessor().setProperty(\n+          _helixManager.getHelixDataAccessor().keyBuilder().instanceConfig(instanceName), instanceConfig)) {\n+        LOGGER.info(\"Updated server hostname/port successfully for server id {} to {}:\", instanceName, instanceConfig);\n+      } else {\n+        LOGGER.error(\"Failed to update hostname/port for instance: {}\", instanceName);\n+        // Treat this is as a fatal error.\n+        System.exit(1);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTU4NzU5OQ=="}, "originalCommit": {"oid": "326560301f2cefeeb94e7b68971e036b63f19576"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwMDk1MzQ5OnYy", "diffSide": "RIGHT", "path": "pinot-server/src/main/java/org/apache/pinot/server/starter/helix/HelixServerStarter.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQwMjozNzoxOVrOFi7CvA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQwMjozNzoxOVrOFi7CvA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjE2MzI2MA==", "bodyText": "Compare then set:\nif (serverConf.containsKey(CONFIG_OF_INSTANCE_ID)) {\n  String hostName = _serverConf.getString(KEY_OF_SERVER_NETTY_HOST);\n  if (hostName != null && !hostName.equals(instanceConfig.getHostName())) {\n    instanceConfig.setHostName(hostName);\n    toUpdateHelixRecord = true;\n  }\n  String port = _serverConf.getString(KEY_OF_SERVER_NETTY_PORT);\n  if (port != null && !port.equals(instanceConfig.getPort())) {\n    instanceConfig.setPort(port);\n    toUpdateHelixRecord = true;\n  }\n}", "url": "https://github.com/apache/pinot/pull/4995#discussion_r372163260", "createdAt": "2020-01-29T02:37:19Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-server/src/main/java/org/apache/pinot/server/starter/helix/HelixServerStarter.java", "diffHunk": "@@ -266,16 +267,42 @@ private void updateInstanceConfigInHelix(Map<String, String> props) {\n     _helixAdmin.setConfig(scope, props);\n   }\n \n-  private void addInstanceTagIfNeeded(String clusterName, String instanceName) {\n+  private void updateInstanceConfigIfNeeded(String clusterName, String instanceName, Configuration serverConf) {\n     InstanceConfig instanceConfig = _helixAdmin.getInstanceConfig(clusterName, instanceName);\n     List<String> instanceTags = instanceConfig.getTags();\n+    boolean toUpdateHelixRecord = false;\n     if (instanceTags == null || instanceTags.size() == 0) {\n       if (ZKMetadataProvider.getClusterTenantIsolationEnabled(_helixManager.getHelixPropertyStore())) {\n-        _helixAdmin.addInstanceTag(clusterName, instanceName, TagNameUtils.getOfflineTagForTenant(null));\n-        _helixAdmin.addInstanceTag(clusterName, instanceName, TagNameUtils.getRealtimeTagForTenant(null));\n+        instanceConfig.addTag(TagNameUtils.getOfflineTagForTenant(null));\n+        instanceConfig.addTag(TagNameUtils.getRealtimeTagForTenant(null));\n       } else {\n-        _helixAdmin.addInstanceTag(clusterName, instanceName, UNTAGGED_SERVER_INSTANCE);\n+        instanceConfig.addTag(UNTAGGED_SERVER_INSTANCE);\n       }\n+      toUpdateHelixRecord = true;\n+    }\n+\n+    // If the server config has both instance_id and host/port info, overwrite the host/port info in zk. Without the\n+    // overwrite, Helix will extract host/port from the instance_id instead of use those in config.\n+    // Use serverConf instead of _serverConf as the latter has been modified.\n+    if (serverConf.containsKey(CONFIG_OF_INSTANCE_ID) && serverConf.containsKey(KEY_OF_SERVER_NETTY_HOST)) {\n+      toUpdateHelixRecord = true;\n+      // Internally, Helix use instanceId to derive Hostname and Port. To decouple them, explicitly set the hostname/port\n+      // field in zk.\n+      instanceConfig.setHostName(_serverConf.getString(KEY_OF_SERVER_NETTY_HOST));\n+      instanceConfig.setPort(Integer.toString(_serverConf.getInt(KEY_OF_SERVER_NETTY_PORT, DEFAULT_SERVER_NETTY_PORT)));\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a0ef497364c7593120b2173d59e8990f0be8c9e7"}, "originalPosition": 48}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3612, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}