{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ3NzEwMDQy", "number": 5685, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxNjozMjo1NFrOEN5YtA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQyMDoxMTozOVrOEOagdg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzMDA3MTU2OnYy", "diffSide": "RIGHT", "path": "pinot-controller/src/main/java/org/apache/pinot/controller/api/resources/PinotBrokerRestletResource.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxNjozMjo1NFrOGwwcEg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxNjozMjo1NFrOGwwcEg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzc3ODQ1MA==", "bodyText": "use the constant from statemodel", "url": "https://github.com/apache/pinot/pull/5685#discussion_r453778450", "createdAt": "2020-07-13T16:32:54Z", "author": {"login": "kishoreg"}, "path": "pinot-controller/src/main/java/org/apache/pinot/controller/api/resources/PinotBrokerRestletResource.java", "diffHunk": "@@ -0,0 +1,132 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.controller.api.resources;\n+\n+import com.google.common.collect.ImmutableList;\n+import io.swagger.annotations.Api;\n+import io.swagger.annotations.ApiOperation;\n+import io.swagger.annotations.ApiParam;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import javax.inject.Inject;\n+import javax.ws.rs.GET;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.PathParam;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.QueryParam;\n+import javax.ws.rs.core.MediaType;\n+import org.apache.pinot.controller.helix.core.PinotHelixResourceManager;\n+import org.apache.pinot.spi.config.table.TableType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+\n+@Api(tags = Constants.BROKER_TAG)\n+@Path(\"/\")\n+public class PinotBrokerRestletResource {\n+  public static final Logger LOGGER = LoggerFactory.getLogger(PinotBrokerRestletResource.class);\n+\n+  @Inject\n+  PinotHelixResourceManager _pinotHelixResourceManager;\n+\n+  @GET\n+  @Produces(MediaType.APPLICATION_JSON)\n+  @Path(\"/brokers\")\n+  @ApiOperation(value = \"List tenants and tables to brokers mappings\", notes = \"List tenants and tables to brokers mappings\")\n+  public Map<String, Map<String, List<String>>> listBrokersMapping(\n+      @ApiParam(value = \"ONLINE|OFFLINE\") @QueryParam(\"state\") String state) {\n+    Map<String, Map<String, List<String>>> resultMap = new HashMap<>();\n+    resultMap.put(\"tenants\", getTenantsToBrokersMapping(state));\n+    resultMap.put(\"tables\", getTablesToBrokersMapping(state));\n+    return resultMap;\n+  }\n+\n+  @GET\n+  @Produces(MediaType.APPLICATION_JSON)\n+  @Path(\"/brokers/tenants\")\n+  @ApiOperation(value = \"List tenants to brokers mappings\", notes = \"List tenants to brokers mappings\")\n+  public Map<String, List<String>> getTenantsToBrokersMapping(\n+      @ApiParam(value = \"ONLINE|OFFLINE\") @QueryParam(\"state\") String state) {\n+    Map<String, List<String>> resultMap = new HashMap<>();\n+    _pinotHelixResourceManager.getAllBrokerTenantNames().stream()\n+        .forEach(tenant -> resultMap.put(tenant, getBrokersForTenant(tenant, state)));\n+    return resultMap;\n+  }\n+\n+  @GET\n+  @Produces(MediaType.APPLICATION_JSON)\n+  @Path(\"/brokers/tenants/{tenantName}\")\n+  @ApiOperation(value = \"List brokers for a given tenant\", notes = \"List brokers for a given tenant\")\n+  public List<String> getBrokersForTenant(\n+      @ApiParam(value = \"Name of the tenant\", required = true) @PathParam(\"tenantName\") String tenantName,\n+      @ApiParam(value = \"ONLINE|OFFLINE\") @QueryParam(\"state\") String state) {\n+    Set<String> tenantBrokers = new HashSet<>();\n+    tenantBrokers.addAll(_pinotHelixResourceManager.getAllInstancesForBrokerTenant(tenantName));\n+    applyStateChanges(tenantBrokers, state);\n+    return ImmutableList.copyOf(tenantBrokers);\n+  }\n+\n+  @GET\n+  @Produces(MediaType.APPLICATION_JSON)\n+  @Path(\"/brokers/tables\")\n+  @ApiOperation(value = \"List tables to brokers mappings\", notes = \"List tables to brokers mappings\")\n+  public Map<String, List<String>> getTablesToBrokersMapping(\n+      @ApiParam(value = \"ONLINE|OFFLINE\") @QueryParam(\"state\") String state) {\n+    Map<String, List<String>> resultMap = new HashMap<>();\n+    _pinotHelixResourceManager.getAllTables().stream()\n+        .forEach(table -> resultMap.put(table, getBrokersForTable(table, state)));\n+    return resultMap;\n+  }\n+\n+  @GET\n+  @Produces(MediaType.APPLICATION_JSON)\n+  @Path(\"/brokers/tables/{tableName}\")\n+  @ApiOperation(value = \"List brokers for a given table\", notes = \"List brokers for a given table\")\n+  public List<String> getBrokersForTable(\n+      @ApiParam(value = \"Name of the table\", required = true) @PathParam(\"tableName\") String tableName,\n+      @ApiParam(value = \"ONLINE|OFFLINE\") @QueryParam(\"state\") String state) {\n+    String actualTableName = _pinotHelixResourceManager.getActualTableName(tableName);\n+    Set<String> tableBrokers = new HashSet<>();\n+    if (_pinotHelixResourceManager.hasOfflineTable(actualTableName)) {\n+      tableBrokers.addAll(_pinotHelixResourceManager.getBrokerInstancesForTable(actualTableName, TableType.OFFLINE));\n+    }\n+    if (_pinotHelixResourceManager.hasRealtimeTable(actualTableName)) {\n+      tableBrokers.addAll(_pinotHelixResourceManager.getBrokerInstancesForTable(actualTableName, TableType.REALTIME));\n+    }\n+    applyStateChanges(tableBrokers, state);\n+    return ImmutableList.copyOf(tableBrokers);\n+  }\n+\n+  private void applyStateChanges(Set<String> brokers, String state) {\n+    if (state == null) {\n+      return;\n+    }\n+    switch (state) {\n+      case \"ONLINE\":", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2f02d337e5daab135e899a4bdb9a4fba0e424a68"}, "originalPosition": 124}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzNTQ4NDczOnYy", "diffSide": "RIGHT", "path": "pinot-controller/src/main/java/org/apache/pinot/controller/api/resources/PinotBrokerRestletResource.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQyMDowNzo0NlrOGxjZRA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQyMDoxNzoxOFrOGxjsuA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDYxMzMxNg==", "bodyText": "these two definitions are not used anywhere right?", "url": "https://github.com/apache/pinot/pull/5685#discussion_r454613316", "createdAt": "2020-07-14T20:07:46Z", "author": {"login": "mcvsubbu"}, "path": "pinot-controller/src/main/java/org/apache/pinot/controller/api/resources/PinotBrokerRestletResource.java", "diffHunk": "@@ -0,0 +1,146 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.controller.api.resources;\n+\n+import com.google.common.collect.ImmutableList;\n+import io.swagger.annotations.Api;\n+import io.swagger.annotations.ApiOperation;\n+import io.swagger.annotations.ApiParam;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import javax.inject.Inject;\n+import javax.ws.rs.GET;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.PathParam;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.QueryParam;\n+import javax.ws.rs.core.MediaType;\n+import javax.ws.rs.core.Response;\n+import org.apache.pinot.common.exception.TableNotFoundException;\n+import org.apache.pinot.common.utils.CommonConstants;\n+import org.apache.pinot.controller.helix.core.PinotHelixResourceManager;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+\n+@Api(tags = Constants.BROKER_TAG)\n+@Path(\"/\")\n+public class PinotBrokerRestletResource {\n+  public static final Logger LOGGER = LoggerFactory.getLogger(PinotBrokerRestletResource.class);\n+  private static final String TYPE_REALTIME = \"_REALTIME\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c142f4917901dba45a5394424e9eb309d012e92e"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDYxODI5Ng==", "bodyText": "removed", "url": "https://github.com/apache/pinot/pull/5685#discussion_r454618296", "createdAt": "2020-07-14T20:17:18Z", "author": {"login": "xiangfu0"}, "path": "pinot-controller/src/main/java/org/apache/pinot/controller/api/resources/PinotBrokerRestletResource.java", "diffHunk": "@@ -0,0 +1,146 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.controller.api.resources;\n+\n+import com.google.common.collect.ImmutableList;\n+import io.swagger.annotations.Api;\n+import io.swagger.annotations.ApiOperation;\n+import io.swagger.annotations.ApiParam;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import javax.inject.Inject;\n+import javax.ws.rs.GET;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.PathParam;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.QueryParam;\n+import javax.ws.rs.core.MediaType;\n+import javax.ws.rs.core.Response;\n+import org.apache.pinot.common.exception.TableNotFoundException;\n+import org.apache.pinot.common.utils.CommonConstants;\n+import org.apache.pinot.controller.helix.core.PinotHelixResourceManager;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+\n+@Api(tags = Constants.BROKER_TAG)\n+@Path(\"/\")\n+public class PinotBrokerRestletResource {\n+  public static final Logger LOGGER = LoggerFactory.getLogger(PinotBrokerRestletResource.class);\n+  private static final String TYPE_REALTIME = \"_REALTIME\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDYxMzMxNg=="}, "originalCommit": {"oid": "c142f4917901dba45a5394424e9eb309d012e92e"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzNTQ5ODE0OnYy", "diffSide": "RIGHT", "path": "pinot-controller/src/main/java/org/apache/pinot/controller/api/resources/PinotBrokerRestletResource.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQyMDoxMTozOVrOGxjhTg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQyMDoxMTozOVrOGxjhTg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDYxNTM3NA==", "bodyText": "nit:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    throw new ControllerApplicationException(LOGGER, String.format(\"Table [%s] not found.\", tableName),\n          \n          \n            \n                    throw new ControllerApplicationException(LOGGER, String.format(\"Table '%s' not found.\", tableName),", "url": "https://github.com/apache/pinot/pull/5685#discussion_r454615374", "createdAt": "2020-07-14T20:11:39Z", "author": {"login": "mcvsubbu"}, "path": "pinot-controller/src/main/java/org/apache/pinot/controller/api/resources/PinotBrokerRestletResource.java", "diffHunk": "@@ -103,28 +110,35 @@\n   @ApiOperation(value = \"List brokers for a given table\", notes = \"List brokers for a given table\")\n   public List<String> getBrokersForTable(\n       @ApiParam(value = \"Name of the table\", required = true) @PathParam(\"tableName\") String tableName,\n+      @ApiParam(value = \"OFFLINE|REALTIME\") @QueryParam(\"type\") String tableTypeStr,\n       @ApiParam(value = \"ONLINE|OFFLINE\") @QueryParam(\"state\") String state) {\n-    String actualTableName = _pinotHelixResourceManager.getActualTableName(tableName);\n-    Set<String> tableBrokers = new HashSet<>();\n-    if (_pinotHelixResourceManager.hasOfflineTable(actualTableName)) {\n-      tableBrokers.addAll(_pinotHelixResourceManager.getBrokerInstancesForTable(actualTableName, TableType.OFFLINE));\n-    }\n-    if (_pinotHelixResourceManager.hasRealtimeTable(actualTableName)) {\n-      tableBrokers.addAll(_pinotHelixResourceManager.getBrokerInstancesForTable(actualTableName, TableType.REALTIME));\n+    try {\n+      List<String> tableNamesWithType = _pinotHelixResourceManager\n+          .getExistingTableNamesWithType(tableName, Constants.validateTableType(tableTypeStr));\n+      if (tableNamesWithType.isEmpty()) {\n+        throw new ControllerApplicationException(LOGGER, String.format(\"Table [%s] not found.\", tableName),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c142f4917901dba45a5394424e9eb309d012e92e"}, "originalPosition": 63}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4098, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}