{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY3NzI3NTkw", "number": 5862, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQwMjo1Njo0MVrOEYUVgA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQwMjo1ODo0NFrOEYUWmA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzOTM0NDY0OnYy", "diffSide": "RIGHT", "path": "pinot-core/src/main/java/org/apache/pinot/core/segment/creator/impl/SegmentColumnarIndexCreator.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQwMjo1Njo0MVrOHAl2qg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQwMzoyMzo0NVrOHAmOUw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDM4MjI1MA==", "bodyText": "Without doing toString is there any impact on non null values?", "url": "https://github.com/apache/pinot/pull/5862#discussion_r470382250", "createdAt": "2020-08-14T02:56:41Z", "author": {"login": "siddharthteotia"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/segment/creator/impl/SegmentColumnarIndexCreator.java", "diffHunk": "@@ -532,34 +532,36 @@ public static void addColumnMetadataInfo(PropertiesConfiguration properties, Str\n       properties.setProperty(getKeyFor(column, DATETIME_GRANULARITY), dateTimeFieldSpec.getGranularity());\n     }\n \n-    String minValue = columnIndexCreationInfo.getMin().toString();\n-    String maxValue = columnIndexCreationInfo.getMax().toString();\n+    // NOTE: Min/max could be null for real-time aggregate metrics.\n+    Object min = columnIndexCreationInfo.getMin();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0b40cc0ba0908a558834f6a9843a1aacfb06d359"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDM4ODMwNw==", "bodyText": "It is safest to put string instead of the object itself.\nE.g. the following statements will throw exception (although if the save the properties and load again, everything will be loaded as string)\nproperties.setProperty(\"a\", 1);\nproperties.getString(\"a\");", "url": "https://github.com/apache/pinot/pull/5862#discussion_r470388307", "createdAt": "2020-08-14T03:23:45Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/segment/creator/impl/SegmentColumnarIndexCreator.java", "diffHunk": "@@ -532,34 +532,36 @@ public static void addColumnMetadataInfo(PropertiesConfiguration properties, Str\n       properties.setProperty(getKeyFor(column, DATETIME_GRANULARITY), dateTimeFieldSpec.getGranularity());\n     }\n \n-    String minValue = columnIndexCreationInfo.getMin().toString();\n-    String maxValue = columnIndexCreationInfo.getMax().toString();\n+    // NOTE: Min/max could be null for real-time aggregate metrics.\n+    Object min = columnIndexCreationInfo.getMin();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDM4MjI1MA=="}, "originalCommit": {"oid": "0b40cc0ba0908a558834f6a9843a1aacfb06d359"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzOTM0NTcwOnYy", "diffSide": "RIGHT", "path": "pinot-core/src/main/java/org/apache/pinot/core/segment/creator/impl/SegmentColumnarIndexCreator.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQwMjo1NzozMVrOHAl3WA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQwMzoyNDo0NlrOHAmPXg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDM4MjQyNA==", "bodyText": "Why do we need to check for data type?", "url": "https://github.com/apache/pinot/pull/5862#discussion_r470382424", "createdAt": "2020-08-14T02:57:31Z", "author": {"login": "siddharthteotia"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/segment/creator/impl/SegmentColumnarIndexCreator.java", "diffHunk": "@@ -532,34 +532,36 @@ public static void addColumnMetadataInfo(PropertiesConfiguration properties, Str\n       properties.setProperty(getKeyFor(column, DATETIME_GRANULARITY), dateTimeFieldSpec.getGranularity());\n     }\n \n-    String minValue = columnIndexCreationInfo.getMin().toString();\n-    String maxValue = columnIndexCreationInfo.getMax().toString();\n+    // NOTE: Min/max could be null for real-time aggregate metrics.\n+    Object min = columnIndexCreationInfo.getMin();\n+    Object max = columnIndexCreationInfo.getMax();\n+    if (min != null && max != null) {\n+      addColumnMinMaxValueInfo(properties, column, dataType, min.toString(), max.toString());\n+    }\n+\n     String defaultNullValue = columnIndexCreationInfo.getDefaultNullValue().toString();\n     if (dataType == DataType.STRING) {\n       // Check special characters for STRING column\n-      if (isValidPropertyValue(minValue)) {\n-        properties.setProperty(getKeyFor(column, MIN_VALUE), minValue);\n-      }\n-      if (isValidPropertyValue(maxValue)) {\n-        properties.setProperty(getKeyFor(column, MAX_VALUE), maxValue);\n-      }\n       if (isValidPropertyValue(defaultNullValue)) {\n         properties.setProperty(getKeyFor(column, DEFAULT_NULL_VALUE), defaultNullValue);\n       }\n     } else {\n-      properties.setProperty(getKeyFor(column, MIN_VALUE), minValue);\n-      properties.setProperty(getKeyFor(column, MAX_VALUE), maxValue);\n       properties.setProperty(getKeyFor(column, DEFAULT_NULL_VALUE), defaultNullValue);\n     }\n   }\n \n-  public static void addColumnMinMaxValueInfo(PropertiesConfiguration properties, String column, String minValue,\n-      String maxValue) {\n-    // Check special characters for STRING column\n-    if (isValidPropertyValue(minValue)) {\n+  public static void addColumnMinMaxValueInfo(PropertiesConfiguration properties, String column, DataType dataType,\n+      String minValue, String maxValue) {\n+    if (dataType == DataType.STRING) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0b40cc0ba0908a558834f6a9843a1aacfb06d359"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDM4ODU3NA==", "bodyText": "To save the unnecessary checks for property value. But after reconsideration, since it is not in performance critical path, change it to always validate for simplicity and clarity.", "url": "https://github.com/apache/pinot/pull/5862#discussion_r470388574", "createdAt": "2020-08-14T03:24:46Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/segment/creator/impl/SegmentColumnarIndexCreator.java", "diffHunk": "@@ -532,34 +532,36 @@ public static void addColumnMetadataInfo(PropertiesConfiguration properties, Str\n       properties.setProperty(getKeyFor(column, DATETIME_GRANULARITY), dateTimeFieldSpec.getGranularity());\n     }\n \n-    String minValue = columnIndexCreationInfo.getMin().toString();\n-    String maxValue = columnIndexCreationInfo.getMax().toString();\n+    // NOTE: Min/max could be null for real-time aggregate metrics.\n+    Object min = columnIndexCreationInfo.getMin();\n+    Object max = columnIndexCreationInfo.getMax();\n+    if (min != null && max != null) {\n+      addColumnMinMaxValueInfo(properties, column, dataType, min.toString(), max.toString());\n+    }\n+\n     String defaultNullValue = columnIndexCreationInfo.getDefaultNullValue().toString();\n     if (dataType == DataType.STRING) {\n       // Check special characters for STRING column\n-      if (isValidPropertyValue(minValue)) {\n-        properties.setProperty(getKeyFor(column, MIN_VALUE), minValue);\n-      }\n-      if (isValidPropertyValue(maxValue)) {\n-        properties.setProperty(getKeyFor(column, MAX_VALUE), maxValue);\n-      }\n       if (isValidPropertyValue(defaultNullValue)) {\n         properties.setProperty(getKeyFor(column, DEFAULT_NULL_VALUE), defaultNullValue);\n       }\n     } else {\n-      properties.setProperty(getKeyFor(column, MIN_VALUE), minValue);\n-      properties.setProperty(getKeyFor(column, MAX_VALUE), maxValue);\n       properties.setProperty(getKeyFor(column, DEFAULT_NULL_VALUE), defaultNullValue);\n     }\n   }\n \n-  public static void addColumnMinMaxValueInfo(PropertiesConfiguration properties, String column, String minValue,\n-      String maxValue) {\n-    // Check special characters for STRING column\n-    if (isValidPropertyValue(minValue)) {\n+  public static void addColumnMinMaxValueInfo(PropertiesConfiguration properties, String column, DataType dataType,\n+      String minValue, String maxValue) {\n+    if (dataType == DataType.STRING) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDM4MjQyNA=="}, "originalCommit": {"oid": "0b40cc0ba0908a558834f6a9843a1aacfb06d359"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzOTM0NzQ0OnYy", "diffSide": "RIGHT", "path": "pinot-integration-tests/src/test/java/org/apache/pinot/integration/tests/AggregateMetricsClusterIntegrationTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQwMjo1ODo0NFrOHAl4Zg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQwMzowNzoxNFrOHAl_3w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDM4MjY5NA==", "bodyText": "Have we verified that without the fix, this test actually fails with the same call stack as seen in the original issue while committing the segment ?", "url": "https://github.com/apache/pinot/pull/5862#discussion_r470382694", "createdAt": "2020-08-14T02:58:44Z", "author": {"login": "siddharthteotia"}, "path": "pinot-integration-tests/src/test/java/org/apache/pinot/integration/tests/AggregateMetricsClusterIntegrationTest.java", "diffHunk": "@@ -0,0 +1,130 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.integration.tests;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import java.io.File;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import org.apache.commons.io.FileUtils;\n+import org.apache.pinot.spi.config.table.IndexingConfig;\n+import org.apache.pinot.spi.config.table.TableConfig;\n+import org.apache.pinot.spi.data.FieldSpec.DataType;\n+import org.apache.pinot.spi.data.Schema;\n+import org.apache.pinot.util.TestUtils;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Test;\n+\n+\n+/**\n+ * Integration test that enables aggregate metrics for the LLC real-time table.\n+ */\n+public class AggregateMetricsClusterIntegrationTest extends BaseClusterIntegrationTestSet {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0b40cc0ba0908a558834f6a9843a1aacfb06d359"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDM4NDYwNw==", "bodyText": "Yes, verified", "url": "https://github.com/apache/pinot/pull/5862#discussion_r470384607", "createdAt": "2020-08-14T03:07:14Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-integration-tests/src/test/java/org/apache/pinot/integration/tests/AggregateMetricsClusterIntegrationTest.java", "diffHunk": "@@ -0,0 +1,130 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.integration.tests;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import java.io.File;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import org.apache.commons.io.FileUtils;\n+import org.apache.pinot.spi.config.table.IndexingConfig;\n+import org.apache.pinot.spi.config.table.TableConfig;\n+import org.apache.pinot.spi.data.FieldSpec.DataType;\n+import org.apache.pinot.spi.data.Schema;\n+import org.apache.pinot.util.TestUtils;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Test;\n+\n+\n+/**\n+ * Integration test that enables aggregate metrics for the LLC real-time table.\n+ */\n+public class AggregateMetricsClusterIntegrationTest extends BaseClusterIntegrationTestSet {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDM4MjY5NA=="}, "originalCommit": {"oid": "0b40cc0ba0908a558834f6a9843a1aacfb06d359"}, "originalPosition": 40}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3990, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}