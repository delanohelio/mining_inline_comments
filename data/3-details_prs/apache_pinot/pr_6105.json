{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk3OTM4Nzkx", "number": 6105, "title": "scalar functions for array", "bodyText": "Inbuilt functions - Scalar funtions for array columns\nselect array_reverse_int(multi_value_int_field) from airlineStats;\nselect array_reverse_string(multi_value_string_field) from airlineStats;\nselect array_sort_int(multi_value_int_field) from airlineStats;\nselect array_sort_string(multi_value_string_field) from airlineStats;\nselect array_index_of_int(multi_value_int_field, 2) from airlineStats;\nselect array_index_of_string(multi_value_string_field, 'foo') from airlineStats;\nselect array_contains_int(multi_value_int_field, 3) from airlineStats;\nselect array_contains_string(multi_value_string_field, 'bar') from airlineStats;", "createdAt": "2020-10-05T15:31:01Z", "url": "https://github.com/apache/pinot/pull/6105", "merged": true, "mergeCommit": {"oid": "e3b0bfcdbd796db91a606d591e492741799244b5"}, "closed": true, "closedAt": "2020-11-03T04:54:23Z", "author": {"login": "SandishKumarHN"}, "timelineItems": {"totalCount": 17, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdPmpQIgFqTUwMjI0MDE0Ng==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdYvwMoABqjM5NTA4ODM4MDQ=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAyMjQwMTQ2", "url": "https://github.com/apache/pinot/pull/6105#pullrequestreview-502240146", "createdAt": "2020-10-05T16:47:32Z", "commit": {"oid": "83ecfb2fd5d3ef03228afadbcf3a9a76b9cd20d4"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxNjo0NzozM1rOHcldOA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxNjo0NzozM1rOHcldOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTczNTg2NA==", "bodyText": "Also, add non-primitive data types e.g. Integer[], Long[]", "url": "https://github.com/apache/pinot/pull/6105#discussion_r499735864", "createdAt": "2020-10-05T16:47:33Z", "author": {"login": "KKcorps"}, "path": "pinot-common/src/main/java/org/apache/pinot/common/function/FunctionUtils.java", "diffHunk": "@@ -42,6 +42,11 @@ private FunctionUtils() {\n     put(Double.class, PinotDataType.DOUBLE);\n     put(String.class, PinotDataType.STRING);\n     put(byte[].class, PinotDataType.BYTES);\n+    put(int[].class, PinotDataType.INTEGER_ARRAY);\n+    put(String[].class, PinotDataType.STRING_ARRAY);\n+    put(long[].class, PinotDataType.LONG_ARRAY);\n+    put(float[].class, PinotDataType.FLOAT_ARRAY);\n+    put(double[].class, PinotDataType.DOUBLE_ARRAY);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "83ecfb2fd5d3ef03228afadbcf3a9a76b9cd20d4"}, "originalPosition": 8}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAyMjQyMTE4", "url": "https://github.com/apache/pinot/pull/6105#pullrequestreview-502242118", "createdAt": "2020-10-05T16:49:57Z", "commit": {"oid": "83ecfb2fd5d3ef03228afadbcf3a9a76b9cd20d4"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxNjo0OTo1N1rOHclirg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxNjo0OTo1N1rOHclirg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTczNzI2Mg==", "bodyText": "Can we keep function names to match the https://prestodb.io/docs/current/functions/array.html\nAlso, please add any other possible functions from the link.", "url": "https://github.com/apache/pinot/pull/6105#discussion_r499737262", "createdAt": "2020-10-05T16:49:57Z", "author": {"login": "KKcorps"}, "path": "pinot-common/src/main/java/org/apache/pinot/common/function/scalar/ArrayFunctions.java", "diffHunk": "@@ -0,0 +1,133 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.common.function.scalar;\n+\n+import java.util.Arrays;\n+import org.apache.commons.lang3.ArrayUtils;\n+import org.apache.pinot.spi.annotations.ScalarFunction;\n+\n+/**\n+ * Inbuilt Array Transformation Functions\n+ * The functions can be used as UDFs in Query when added in the FunctionRegistry.\n+ * @ScalarFunction annotation is used with each method for the registration\n+ *\n+ * Example usage:\n+ * <code> SELECT reverseArray(array) FROM baseballStats LIMIT 10 </code>\n+ */\n+public class ArrayFunctions {\n+  private ArrayFunctions() {\n+\n+  }\n+\n+  /**\n+   * @see ArrayUtils#reverse(Object[])\n+   * @param value\n+   * @return reversed input array in from end to start\n+   */\n+  @ScalarFunction\n+  public static int[] reverseIntArray(int[] value) {\n+      ArrayUtils.reverse(value);\n+      return value;\n+  }\n+\n+  /**\n+   * @see ArrayUtils#reverse(Object[])\n+   * @param value\n+   * @return reversed input array in from end to start\n+   */\n+  @ScalarFunction\n+  public static String[] reverseStringArray(String[] value) {\n+    ArrayUtils.reverse(value);\n+    return value;\n+  }\n+\n+  /**\n+   * @see Arrays#stream(double[]).max()\n+   * @param value\n+   * @return find minimum value in input array\n+   */\n+  @ScalarFunction\n+  public static int[] arrayMax(int[] value) {\n+    return new int[] {Arrays.stream(value).max().getAsInt()};\n+  }\n+\n+  /**\n+   * @see Arrays#stream(double[]).min()\n+   * @param value\n+   * @return find maximum value in input array\n+   */\n+  @ScalarFunction\n+  public static int[] arrayMin(int[] value) {\n+    return new int[] {Arrays.stream(value).min().getAsInt()};\n+  }\n+\n+  /**\n+   * @see Arrays#stream(double[]).sum()\n+   * @param value\n+   * @return calculate sum of all values in input array\n+   */\n+  @ScalarFunction\n+  public static int[] arraySum(int[] value) {\n+    return new int[] {Arrays.stream(value).sum()};\n+  }\n+\n+  /**\n+   * @see ArrayUtils#indexOf(double[], double)\n+   * @param value\n+   * @param valueToFind\n+   * @return return position of value in input array\n+   */\n+  @ScalarFunction\n+  public static int[] arrayPosition(int[] value, int valueToFind) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "83ecfb2fd5d3ef03228afadbcf3a9a76b9cd20d4"}, "originalPosition": 97}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAyMzU0NjYz", "url": "https://github.com/apache/pinot/pull/6105#pullrequestreview-502354663", "createdAt": "2020-10-05T19:27:32Z", "commit": {"oid": "83ecfb2fd5d3ef03228afadbcf3a9a76b9cd20d4"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxOToyNzozMlrOHcqtKQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxOToyNzozMlrOHcqtKQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTgyMTg2NQ==", "bodyText": "for every function that we want to add, we'll have to always write fooLong, fooInt, fooDouble, fooFloat, fooString. In the presto-pinot connector we'll have to do additional mapping. Is there no way around that?", "url": "https://github.com/apache/pinot/pull/6105#discussion_r499821865", "createdAt": "2020-10-05T19:27:32Z", "author": {"login": "npawar"}, "path": "pinot-common/src/main/java/org/apache/pinot/common/function/scalar/ArrayFunctions.java", "diffHunk": "@@ -0,0 +1,133 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.common.function.scalar;\n+\n+import java.util.Arrays;\n+import org.apache.commons.lang3.ArrayUtils;\n+import org.apache.pinot.spi.annotations.ScalarFunction;\n+\n+/**\n+ * Inbuilt Array Transformation Functions\n+ * The functions can be used as UDFs in Query when added in the FunctionRegistry.\n+ * @ScalarFunction annotation is used with each method for the registration\n+ *\n+ * Example usage:\n+ * <code> SELECT reverseArray(array) FROM baseballStats LIMIT 10 </code>\n+ */\n+public class ArrayFunctions {\n+  private ArrayFunctions() {\n+\n+  }\n+\n+  /**\n+   * @see ArrayUtils#reverse(Object[])\n+   * @param value\n+   * @return reversed input array in from end to start\n+   */\n+  @ScalarFunction\n+  public static int[] reverseIntArray(int[] value) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "83ecfb2fd5d3ef03228afadbcf3a9a76b9cd20d4"}, "originalPosition": 44}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAyNDY3NDM5", "url": "https://github.com/apache/pinot/pull/6105#pullrequestreview-502467439", "createdAt": "2020-10-05T22:35:28Z", "commit": {"oid": "83ecfb2fd5d3ef03228afadbcf3a9a76b9cd20d4"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQyMjozNToyOFrOHcwBmQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQyMjo0MDozMFrOHcwIIw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTkwOTAxNw==", "bodyText": "Why do you need int here? The argument should always be Object", "url": "https://github.com/apache/pinot/pull/6105#discussion_r499909017", "createdAt": "2020-10-05T22:35:28Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-common/src/main/java/org/apache/pinot/common/function/FunctionUtils.java", "diffHunk": "@@ -56,6 +61,12 @@ private FunctionUtils() {\n     put(Double.class, PinotDataType.DOUBLE);\n     put(String.class, PinotDataType.STRING);\n     put(byte[].class, PinotDataType.BYTES);\n+    put(int[].class, PinotDataType.INTEGER_ARRAY);\n+    put(int.class, PinotDataType.INTEGER);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "83ecfb2fd5d3ef03228afadbcf3a9a76b9cd20d4"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTkwOTMwMA==", "bodyText": "Can we keep the same order as the SV ones (int, long, float, double, string), same for other places", "url": "https://github.com/apache/pinot/pull/6105#discussion_r499909300", "createdAt": "2020-10-05T22:36:22Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-common/src/main/java/org/apache/pinot/common/function/FunctionUtils.java", "diffHunk": "@@ -42,6 +42,11 @@ private FunctionUtils() {\n     put(Double.class, PinotDataType.DOUBLE);\n     put(String.class, PinotDataType.STRING);\n     put(byte[].class, PinotDataType.BYTES);\n+    put(int[].class, PinotDataType.INTEGER_ARRAY);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "83ecfb2fd5d3ef03228afadbcf3a9a76b9cd20d4"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTkxMDY5MQ==", "bodyText": "Don't add boolean here as DataType.BOOLEAN is not a valid internal DataType (we use STRING to represent boolean). All the unrecognized types will be handled as STRING", "url": "https://github.com/apache/pinot/pull/6105#discussion_r499910691", "createdAt": "2020-10-05T22:40:30Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-common/src/main/java/org/apache/pinot/common/function/FunctionUtils.java", "diffHunk": "@@ -69,6 +80,12 @@ private FunctionUtils() {\n     put(Double.class, DataType.DOUBLE);\n     put(String.class, DataType.STRING);\n     put(byte[].class, DataType.BYTES);\n+    put(int[].class, DataType.INT);\n+    put(String[].class, DataType.STRING);\n+    put(long[].class, DataType.LONG);\n+    put(float[].class, DataType.FLOAT);\n+    put(double[].class, DataType.DOUBLE);\n+    put(boolean.class, DataType.BOOLEAN);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "83ecfb2fd5d3ef03228afadbcf3a9a76b9cd20d4"}, "originalPosition": 34}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAyNTY5Mjgy", "url": "https://github.com/apache/pinot/pull/6105#pullrequestreview-502569282", "createdAt": "2020-10-06T04:07:45Z", "commit": {"oid": "83ecfb2fd5d3ef03228afadbcf3a9a76b9cd20d4"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "baa02f7ade608bb01dfe0300a2d2aa7e584cec7d", "author": {"user": {"login": "SandishKumarHN", "name": "SandishKumarHN"}}, "url": "https://github.com/apache/pinot/commit/baa02f7ade608bb01dfe0300a2d2aa7e584cec7d", "committedDate": "2020-10-06T21:13:59Z", "message": "unit test for scalar array functions"}, "afterCommit": {"oid": "0fe9f9e99c0ddb370f83ee9a580bfce8b85e5955", "author": {"user": {"login": "SandishKumarHN", "name": "SandishKumarHN"}}, "url": "https://github.com/apache/pinot/commit/0fe9f9e99c0ddb370f83ee9a580bfce8b85e5955", "committedDate": "2020-10-06T21:21:42Z", "message": "unit test for scalar array functions"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "0fe9f9e99c0ddb370f83ee9a580bfce8b85e5955", "author": {"user": {"login": "SandishKumarHN", "name": "SandishKumarHN"}}, "url": "https://github.com/apache/pinot/commit/0fe9f9e99c0ddb370f83ee9a580bfce8b85e5955", "committedDate": "2020-10-06T21:21:42Z", "message": "unit test for scalar array functions"}, "afterCommit": {"oid": "e31c730851d4372b7cae0ef9e95bde98a4db0e7d", "author": {"user": {"login": "SandishKumarHN", "name": "SandishKumarHN"}}, "url": "https://github.com/apache/pinot/commit/e31c730851d4372b7cae0ef9e95bde98a4db0e7d", "committedDate": "2020-10-07T15:04:39Z", "message": "unit test for scalar array functions"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e31c730851d4372b7cae0ef9e95bde98a4db0e7d", "author": {"user": {"login": "SandishKumarHN", "name": "SandishKumarHN"}}, "url": "https://github.com/apache/pinot/commit/e31c730851d4372b7cae0ef9e95bde98a4db0e7d", "committedDate": "2020-10-07T15:04:39Z", "message": "unit test for scalar array functions"}, "afterCommit": {"oid": "8f79ff777cfda6f68c329c052529af29cd7cedec", "author": {"user": {"login": "SandishKumarHN", "name": "SandishKumarHN"}}, "url": "https://github.com/apache/pinot/commit/8f79ff777cfda6f68c329c052529af29cd7cedec", "committedDate": "2020-10-07T15:34:17Z", "message": "unit test for scalar array functions"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA0MDEyMDEz", "url": "https://github.com/apache/pinot/pull/6105#pullrequestreview-504012013", "createdAt": "2020-10-07T15:35:40Z", "commit": {"oid": "8f79ff777cfda6f68c329c052529af29cd7cedec"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA0MDIxMTU3", "url": "https://github.com/apache/pinot/pull/6105#pullrequestreview-504021157", "createdAt": "2020-10-07T15:45:05Z", "commit": {"oid": "8f79ff777cfda6f68c329c052529af29cd7cedec"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QxNTo0NTowNVrOHd51TA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QxNTo0NjozN1rOHd55xw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTExODI4NA==", "bodyText": "why are most of these returning multi value int[] instead of just int? arraySum, arrayMax, arrayMin, arrayPosition and arrayContains", "url": "https://github.com/apache/pinot/pull/6105#discussion_r501118284", "createdAt": "2020-10-07T15:45:05Z", "author": {"login": "npawar"}, "path": "pinot-common/src/main/java/org/apache/pinot/common/function/scalar/ArrayFunctions.java", "diffHunk": "@@ -0,0 +1,133 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.common.function.scalar;\n+\n+import java.util.Arrays;\n+import org.apache.commons.lang3.ArrayUtils;\n+import org.apache.pinot.spi.annotations.ScalarFunction;\n+\n+/**\n+ * Inbuilt Array Transformation Functions\n+ * The functions can be used as UDFs in Query when added in the FunctionRegistry.\n+ * @ScalarFunction annotation is used with each method for the registration\n+ *\n+ * Example usage:\n+ * <code> SELECT reverseArray(array) FROM baseballStats LIMIT 10 </code>\n+ */\n+public class ArrayFunctions {\n+  private ArrayFunctions() {\n+\n+  }\n+\n+  /**\n+   * @see ArrayUtils#reverse(Object[])\n+   * @param value\n+   * @return reversed input array in from end to start\n+   */\n+  @ScalarFunction(name = \"array_reverse_int\")\n+  public static int[] arrayReverseInt(int[] value) {\n+      ArrayUtils.reverse(value);\n+      return value;\n+  }\n+\n+  /**\n+   * @see ArrayUtils#reverse(Object[])\n+   * @param value\n+   * @return reversed input array in from end to start\n+   */\n+  @ScalarFunction(name = \"array_reverse_string\")\n+  public static String[] arrayReverseString(String[] value) {\n+    ArrayUtils.reverse(value);\n+    return value;\n+  }\n+\n+  /**\n+   * @see Arrays#stream(double[]).max()\n+   * @param value\n+   * @return find minimum value in input array\n+   */\n+  @ScalarFunction(name = \"array_max\")\n+  public static int[] arrayMax(int[] value) {\n+    return new int[] {Arrays.stream(value).max().getAsInt()};\n+  }\n+\n+  /**\n+   * @see Arrays#stream(double[]).min()\n+   * @param value\n+   * @return find maximum value in input array\n+   */\n+  @ScalarFunction(name = \"array_min\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f79ff777cfda6f68c329c052529af29cd7cedec"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTExOTQzMQ==", "bodyText": "if these are only going to work for int[], should these be called array_max_int ?", "url": "https://github.com/apache/pinot/pull/6105#discussion_r501119431", "createdAt": "2020-10-07T15:46:37Z", "author": {"login": "npawar"}, "path": "pinot-common/src/main/java/org/apache/pinot/common/function/scalar/ArrayFunctions.java", "diffHunk": "@@ -0,0 +1,133 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.common.function.scalar;\n+\n+import java.util.Arrays;\n+import org.apache.commons.lang3.ArrayUtils;\n+import org.apache.pinot.spi.annotations.ScalarFunction;\n+\n+/**\n+ * Inbuilt Array Transformation Functions\n+ * The functions can be used as UDFs in Query when added in the FunctionRegistry.\n+ * @ScalarFunction annotation is used with each method for the registration\n+ *\n+ * Example usage:\n+ * <code> SELECT reverseArray(array) FROM baseballStats LIMIT 10 </code>\n+ */\n+public class ArrayFunctions {\n+  private ArrayFunctions() {\n+\n+  }\n+\n+  /**\n+   * @see ArrayUtils#reverse(Object[])\n+   * @param value\n+   * @return reversed input array in from end to start\n+   */\n+  @ScalarFunction(name = \"array_reverse_int\")\n+  public static int[] arrayReverseInt(int[] value) {\n+      ArrayUtils.reverse(value);\n+      return value;\n+  }\n+\n+  /**\n+   * @see ArrayUtils#reverse(Object[])\n+   * @param value\n+   * @return reversed input array in from end to start\n+   */\n+  @ScalarFunction(name = \"array_reverse_string\")\n+  public static String[] arrayReverseString(String[] value) {\n+    ArrayUtils.reverse(value);\n+    return value;\n+  }\n+\n+  /**\n+   * @see Arrays#stream(double[]).max()\n+   * @param value\n+   * @return find minimum value in input array\n+   */\n+  @ScalarFunction(name = \"array_max\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f79ff777cfda6f68c329c052529af29cd7cedec"}, "originalPosition": 65}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA0MDM2MTc4", "url": "https://github.com/apache/pinot/pull/6105#pullrequestreview-504036178", "createdAt": "2020-10-07T16:00:55Z", "commit": {"oid": "8f79ff777cfda6f68c329c052529af29cd7cedec"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QxNjowMDo1NVrOHd6inw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QxNjowMDo1NVrOHd6inw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTEyOTg4Nw==", "bodyText": "@fx19880617 has already added min, max, sum as regular transform functions: https://github.com/apache/incubator-pinot/blob/master/pinot-core/src/main/java/org/apache/pinot/core/operator/transform/function/ArrayMaxTransformFunction.java\nDo we need them here again?", "url": "https://github.com/apache/pinot/pull/6105#discussion_r501129887", "createdAt": "2020-10-07T16:00:55Z", "author": {"login": "npawar"}, "path": "pinot-common/src/main/java/org/apache/pinot/common/function/scalar/ArrayFunctions.java", "diffHunk": "@@ -0,0 +1,133 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.common.function.scalar;\n+\n+import java.util.Arrays;\n+import org.apache.commons.lang3.ArrayUtils;\n+import org.apache.pinot.spi.annotations.ScalarFunction;\n+\n+/**\n+ * Inbuilt Array Transformation Functions\n+ * The functions can be used as UDFs in Query when added in the FunctionRegistry.\n+ * @ScalarFunction annotation is used with each method for the registration\n+ *\n+ * Example usage:\n+ * <code> SELECT reverseArray(array) FROM baseballStats LIMIT 10 </code>\n+ */\n+public class ArrayFunctions {\n+  private ArrayFunctions() {\n+\n+  }\n+\n+  /**\n+   * @see ArrayUtils#reverse(Object[])\n+   * @param value\n+   * @return reversed input array in from end to start\n+   */\n+  @ScalarFunction(name = \"array_reverse_int\")\n+  public static int[] arrayReverseInt(int[] value) {\n+      ArrayUtils.reverse(value);\n+      return value;\n+  }\n+\n+  /**\n+   * @see ArrayUtils#reverse(Object[])\n+   * @param value\n+   * @return reversed input array in from end to start\n+   */\n+  @ScalarFunction(name = \"array_reverse_string\")\n+  public static String[] arrayReverseString(String[] value) {\n+    ArrayUtils.reverse(value);\n+    return value;\n+  }\n+\n+  /**\n+   * @see Arrays#stream(double[]).max()\n+   * @param value\n+   * @return find minimum value in input array\n+   */\n+  @ScalarFunction(name = \"array_max\")\n+  public static int[] arrayMax(int[] value) {\n+    return new int[] {Arrays.stream(value).max().getAsInt()};\n+  }\n+\n+  /**\n+   * @see Arrays#stream(double[]).min()\n+   * @param value\n+   * @return find maximum value in input array\n+   */\n+  @ScalarFunction(name = \"array_min\")\n+  public static int[] arrayMin(int[] value) {\n+    return new int[] {Arrays.stream(value).min().getAsInt()};\n+  }\n+\n+  /**\n+   * @see Arrays#stream(double[]).sum()\n+   * @param value\n+   * @return calculate sum of all values in input array\n+   */\n+  @ScalarFunction(name = \"array_sum\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f79ff777cfda6f68c329c052529af29cd7cedec"}, "originalPosition": 85}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c2a0e816b400b4ac3690d0224a16f343c950add7", "author": {"user": {"login": "SandishKumarHN", "name": "SandishKumarHN"}}, "url": "https://github.com/apache/pinot/commit/c2a0e816b400b4ac3690d0224a16f343c950add7", "committedDate": "2020-10-07T18:15:43Z", "message": "review changes tests to InbuiltFunctionsTest"}, "afterCommit": {"oid": "26b77bcd58ac45ad10b8de2d01850db7604e16a7", "author": {"user": {"login": "SandishKumarHN", "name": "SandishKumarHN"}}, "url": "https://github.com/apache/pinot/commit/26b77bcd58ac45ad10b8de2d01850db7604e16a7", "committedDate": "2020-10-07T20:27:31Z", "message": "review changes tests to InbuiltFunctionsTest"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "26b77bcd58ac45ad10b8de2d01850db7604e16a7", "author": {"user": {"login": "SandishKumarHN", "name": "SandishKumarHN"}}, "url": "https://github.com/apache/pinot/commit/26b77bcd58ac45ad10b8de2d01850db7604e16a7", "committedDate": "2020-10-07T20:27:31Z", "message": "review changes tests to InbuiltFunctionsTest"}, "afterCommit": {"oid": "5d27508bfbf21e4961f1b40baa19b2d7d85412d0", "author": {"user": {"login": "SandishKumarHN", "name": "SandishKumarHN"}}, "url": "https://github.com/apache/pinot/commit/5d27508bfbf21e4961f1b40baa19b2d7d85412d0", "committedDate": "2020-10-07T21:19:40Z", "message": "review changes tests to InbuiltFunctionsTest"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA2MDU2OTc1", "url": "https://github.com/apache/pinot/pull/6105#pullrequestreview-506056975", "createdAt": "2020-10-10T02:18:11Z", "commit": {"oid": "5d27508bfbf21e4961f1b40baa19b2d7d85412d0"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMFQwMjoxODoxMVrOHfccIg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMFQwMjoxOTo0M1rOHfcctg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjczMzg1OA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                put(Long[].class, PinotDataType.INTEGER_ARRAY);\n          \n          \n            \n                put(Long[].class, PinotDataType. LONG_ARRAY);", "url": "https://github.com/apache/pinot/pull/6105#discussion_r502733858", "createdAt": "2020-10-10T02:18:11Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-common/src/main/java/org/apache/pinot/common/function/FunctionUtils.java", "diffHunk": "@@ -50,12 +59,22 @@ private FunctionUtils() {\n     put(Boolean.class, PinotDataType.BOOLEAN);\n     put(Character.class, PinotDataType.CHARACTER);\n     put(Short.class, PinotDataType.SHORT);\n+    put(int.class, PinotDataType.INTEGER);\n     put(Integer.class, PinotDataType.INTEGER);\n     put(Long.class, PinotDataType.LONG);\n     put(Float.class, PinotDataType.FLOAT);\n     put(Double.class, PinotDataType.DOUBLE);\n     put(String.class, PinotDataType.STRING);\n     put(byte[].class, PinotDataType.BYTES);\n+    put(int[].class, PinotDataType.INTEGER_ARRAY);\n+    put(Integer[].class, PinotDataType.INTEGER_ARRAY);\n+    put(long[].class, PinotDataType.LONG_ARRAY);\n+    put(Long[].class, PinotDataType.INTEGER_ARRAY);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5d27508bfbf21e4961f1b40baa19b2d7d85412d0"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjczMzg5NA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                put(long[].class, ColumnDataType.FLOAT);\n          \n          \n            \n                put(Long[].class, ColumnDataType.FLOAT);\n          \n          \n            \n                put(long[].class, ColumnDataType.LONG);\n          \n          \n            \n                put(Long[].class, ColumnDataType.LONG);", "url": "https://github.com/apache/pinot/pull/6105#discussion_r502733894", "createdAt": "2020-10-10T02:18:27Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-common/src/main/java/org/apache/pinot/common/function/FunctionUtils.java", "diffHunk": "@@ -82,6 +110,15 @@ private FunctionUtils() {\n     put(Double.class, ColumnDataType.DOUBLE);\n     put(String.class, ColumnDataType.STRING);\n     put(byte[].class, ColumnDataType.BYTES);\n+    put(int[].class, ColumnDataType.INT);\n+    put(Integer[].class, ColumnDataType.INT);\n+    put(long[].class, ColumnDataType.FLOAT);\n+    put(Long[].class, ColumnDataType.FLOAT);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5d27508bfbf21e4961f1b40baa19b2d7d85412d0"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjczNDAwNg==", "bodyText": "Remove this one as argument is always an Object", "url": "https://github.com/apache/pinot/pull/6105#discussion_r502734006", "createdAt": "2020-10-10T02:19:43Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-common/src/main/java/org/apache/pinot/common/function/FunctionUtils.java", "diffHunk": "@@ -50,12 +59,22 @@ private FunctionUtils() {\n     put(Boolean.class, PinotDataType.BOOLEAN);\n     put(Character.class, PinotDataType.CHARACTER);\n     put(Short.class, PinotDataType.SHORT);\n+    put(int.class, PinotDataType.INTEGER);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5d27508bfbf21e4961f1b40baa19b2d7d85412d0"}, "originalPosition": 20}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "5d27508bfbf21e4961f1b40baa19b2d7d85412d0", "author": {"user": {"login": "SandishKumarHN", "name": "SandishKumarHN"}}, "url": "https://github.com/apache/pinot/commit/5d27508bfbf21e4961f1b40baa19b2d7d85412d0", "committedDate": "2020-10-07T21:19:40Z", "message": "review changes tests to InbuiltFunctionsTest"}, "afterCommit": {"oid": "ca28e3f53e64fbda9ae40e335f23e220fb4061ab", "author": {"user": {"login": "SandishKumarHN", "name": "SandishKumarHN"}}, "url": "https://github.com/apache/pinot/commit/ca28e3f53e64fbda9ae40e335f23e220fb4061ab", "committedDate": "2020-11-03T01:34:15Z", "message": "scalar functions for array"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "37aec3e0be8bfbb4933e60b7e9b0bd5ebfc9ec87", "author": {"user": {"login": "SandishKumarHN", "name": "SandishKumarHN"}}, "url": "https://github.com/apache/pinot/commit/37aec3e0be8bfbb4933e60b7e9b0bd5ebfc9ec87", "committedDate": "2020-11-03T02:29:24Z", "message": "scalar functions for array"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ca28e3f53e64fbda9ae40e335f23e220fb4061ab", "author": {"user": {"login": "SandishKumarHN", "name": "SandishKumarHN"}}, "url": "https://github.com/apache/pinot/commit/ca28e3f53e64fbda9ae40e335f23e220fb4061ab", "committedDate": "2020-11-03T01:34:15Z", "message": "scalar functions for array"}, "afterCommit": {"oid": "37aec3e0be8bfbb4933e60b7e9b0bd5ebfc9ec87", "author": {"user": {"login": "SandishKumarHN", "name": "SandishKumarHN"}}, "url": "https://github.com/apache/pinot/commit/37aec3e0be8bfbb4933e60b7e9b0bd5ebfc9ec87", "committedDate": "2020-11-03T02:29:24Z", "message": "scalar functions for array"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1538, "cost": 1, "resetAt": "2021-10-28T17:48:14Z"}}}