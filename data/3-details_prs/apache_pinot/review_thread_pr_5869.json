{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY4MjMwODM1", "number": 5869, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QyMDowMDoxM1rOEZM-vA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QyMTowNToxM1rOEZOORw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0ODYyNTI0OnYy", "diffSide": "RIGHT", "path": "thirdeye/thirdeye-pinot/src/main/java/org/apache/pinot/thirdeye/anomaly/views/CondensedAnomalyTimelinesView.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QyMDowMDoxM1rOHB46Iw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QyMTozMzoxMVrOHB7mvA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTc0MzAxMQ==", "bodyText": "I think that the roundup logic is better added into compress(DEFAULT_MAX_LENGTH), because people can call either these two methods to compress and roundup should run in both cases.", "url": "https://github.com/apache/pinot/pull/5869#discussion_r471743011", "createdAt": "2020-08-17T20:00:13Z", "author": {"login": "vincentchenjl"}, "path": "thirdeye/thirdeye-pinot/src/main/java/org/apache/pinot/thirdeye/anomaly/views/CondensedAnomalyTimelinesView.java", "diffHunk": "@@ -182,9 +183,33 @@ public static CondensedAnomalyTimelinesView fromAnomalyTimelinesView(AnomalyTime\n    * @return a compressed CondensedAnomalyTimelinesView\n    */\n   public CondensedAnomalyTimelinesView compress() {\n+    if (timeStamps.size() == 0) {\n+      return this;\n+    }\n+    try {\n+      if (this.toJsonString().length() > DEFAULT_MAX_LENGTH) {\n+        // First try rounding up\n+        roundUp();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fca1b2be3cf41631770da73a5ab1a2b3a165b820"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTc4NzE5Ng==", "bodyText": "Good suggestion. That also avoids some code duplications. At first I wanted to avoid putting it in compress(DEFAULT_MAX_LENGTH) since that one is called recursively. But now I think it is actually more robust to have this roundup every time we do compression. modified.", "url": "https://github.com/apache/pinot/pull/5869#discussion_r471787196", "createdAt": "2020-08-17T21:33:11Z", "author": {"login": "Ruoyingw"}, "path": "thirdeye/thirdeye-pinot/src/main/java/org/apache/pinot/thirdeye/anomaly/views/CondensedAnomalyTimelinesView.java", "diffHunk": "@@ -182,9 +183,33 @@ public static CondensedAnomalyTimelinesView fromAnomalyTimelinesView(AnomalyTime\n    * @return a compressed CondensedAnomalyTimelinesView\n    */\n   public CondensedAnomalyTimelinesView compress() {\n+    if (timeStamps.size() == 0) {\n+      return this;\n+    }\n+    try {\n+      if (this.toJsonString().length() > DEFAULT_MAX_LENGTH) {\n+        // First try rounding up\n+        roundUp();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTc0MzAxMQ=="}, "originalCommit": {"oid": "fca1b2be3cf41631770da73a5ab1a2b3a165b820"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0ODgyODg3OnYy", "diffSide": "RIGHT", "path": "thirdeye/thirdeye-pinot/src/test/java/org/apache/pinot/thirdeye/anomaly/views/TestCondensedAnomalyTimelinesView.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QyMTowNToxM1rOHB61tA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QyMTozMzozOFrOHB7ncg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTc3NDY0NA==", "bodyText": "Could we add another check to make sure that the JSON exported also has 3 decimal points? For example Assert.assertEquals(OBJECT_MAPPER.writeValueAsString(compressedView.getBaselineValues().get(i)), \"2.833\")", "url": "https://github.com/apache/pinot/pull/5869#discussion_r471774644", "createdAt": "2020-08-17T21:05:13Z", "author": {"login": "vincentchenjl"}, "path": "thirdeye/thirdeye-pinot/src/test/java/org/apache/pinot/thirdeye/anomaly/views/TestCondensedAnomalyTimelinesView.java", "diffHunk": "@@ -73,35 +74,46 @@ public void testFromJsonString() throws Exception{\n     }\n   }\n \n+  /** Compression Test case 1: anomaly view could satisfy requirement after rounding up the decimals.*/\n+  @Test\n+  public void testCompressWithRoundUp() throws Exception {\n+    int testNum = 500;\n+    CondensedAnomalyTimelinesView condensedView = CondensedAnomalyTimelinesView.fromAnomalyTimelinesView(getTestData(testNum));\n+    Assert.assertTrue(condensedView.toJsonString().length() > CondensedAnomalyTimelinesView.DEFAULT_MAX_LENGTH);\n+    CondensedAnomalyTimelinesView compressedView = condensedView.compress();\n+    Assert.assertTrue(compressedView.toJsonString().length() < CondensedAnomalyTimelinesView.DEFAULT_MAX_LENGTH);\n+    Assert.assertEquals(testNum, compressedView.timeStamps.size());\n+  }\n+\n+  /** Compression Test case 2:  The anomaly view is still too large after rounding up, and needed to be further compressed */\n   @Test\n   public void testCompress() throws Exception {\n-    int testNum = 1500;\n+    int testNum = 600;\n     long minBucketMillis = CondensedAnomalyTimelinesView.DEFAULT_MIN_BUCKET_UNIT;\n     CondensedAnomalyTimelinesView condensedView = CondensedAnomalyTimelinesView.fromAnomalyTimelinesView(getTestData(testNum));\n     Assert.assertTrue(condensedView.toJsonString().length() > CondensedAnomalyTimelinesView.DEFAULT_MAX_LENGTH);\n-\n     CondensedAnomalyTimelinesView compressedView = condensedView.compress();\n     Assert.assertTrue(compressedView.toJsonString().length() < CondensedAnomalyTimelinesView.DEFAULT_MAX_LENGTH);\n-    Assert.assertEquals(compressedView.bucketMillis.longValue(), 240l);\n+    Assert.assertEquals(300, compressedView.timeStamps.size());\n+    Assert.assertEquals(compressedView.bucketMillis.longValue(), 10);\n     DateTime date = new DateTime(2018, 1, 1, 0, 0, 0);\n     for (int i = 0; i < compressedView.getTimeStamps().size(); i++) {\n       Assert.assertEquals(compressedView.getTimeStamps().get(i).longValue(),\n           (date.getMillis() - condensedView.timestampOffset)/minBucketMillis);\n-      Assert.assertEquals(compressedView.getCurrentValues().get(i), i * 4 + 1.5, 0.000001);\n-      Assert.assertEquals(compressedView.getBaselineValues().get(i), i * 4 + 1.6, 0.000001);\n-      date = date.plusHours(4);\n+      Assert.assertEquals(compressedView.getCurrentValues().get(i), i * 2 + 0.5, 0.000001);\n+      Assert.assertEquals(compressedView.getBaselineValues().get(i), i * 2 + 0.833, 0.000001);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fca1b2be3cf41631770da73a5ab1a2b3a165b820"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTc4NzM3OA==", "bodyText": "right I should do that.", "url": "https://github.com/apache/pinot/pull/5869#discussion_r471787378", "createdAt": "2020-08-17T21:33:38Z", "author": {"login": "Ruoyingw"}, "path": "thirdeye/thirdeye-pinot/src/test/java/org/apache/pinot/thirdeye/anomaly/views/TestCondensedAnomalyTimelinesView.java", "diffHunk": "@@ -73,35 +74,46 @@ public void testFromJsonString() throws Exception{\n     }\n   }\n \n+  /** Compression Test case 1: anomaly view could satisfy requirement after rounding up the decimals.*/\n+  @Test\n+  public void testCompressWithRoundUp() throws Exception {\n+    int testNum = 500;\n+    CondensedAnomalyTimelinesView condensedView = CondensedAnomalyTimelinesView.fromAnomalyTimelinesView(getTestData(testNum));\n+    Assert.assertTrue(condensedView.toJsonString().length() > CondensedAnomalyTimelinesView.DEFAULT_MAX_LENGTH);\n+    CondensedAnomalyTimelinesView compressedView = condensedView.compress();\n+    Assert.assertTrue(compressedView.toJsonString().length() < CondensedAnomalyTimelinesView.DEFAULT_MAX_LENGTH);\n+    Assert.assertEquals(testNum, compressedView.timeStamps.size());\n+  }\n+\n+  /** Compression Test case 2:  The anomaly view is still too large after rounding up, and needed to be further compressed */\n   @Test\n   public void testCompress() throws Exception {\n-    int testNum = 1500;\n+    int testNum = 600;\n     long minBucketMillis = CondensedAnomalyTimelinesView.DEFAULT_MIN_BUCKET_UNIT;\n     CondensedAnomalyTimelinesView condensedView = CondensedAnomalyTimelinesView.fromAnomalyTimelinesView(getTestData(testNum));\n     Assert.assertTrue(condensedView.toJsonString().length() > CondensedAnomalyTimelinesView.DEFAULT_MAX_LENGTH);\n-\n     CondensedAnomalyTimelinesView compressedView = condensedView.compress();\n     Assert.assertTrue(compressedView.toJsonString().length() < CondensedAnomalyTimelinesView.DEFAULT_MAX_LENGTH);\n-    Assert.assertEquals(compressedView.bucketMillis.longValue(), 240l);\n+    Assert.assertEquals(300, compressedView.timeStamps.size());\n+    Assert.assertEquals(compressedView.bucketMillis.longValue(), 10);\n     DateTime date = new DateTime(2018, 1, 1, 0, 0, 0);\n     for (int i = 0; i < compressedView.getTimeStamps().size(); i++) {\n       Assert.assertEquals(compressedView.getTimeStamps().get(i).longValue(),\n           (date.getMillis() - condensedView.timestampOffset)/minBucketMillis);\n-      Assert.assertEquals(compressedView.getCurrentValues().get(i), i * 4 + 1.5, 0.000001);\n-      Assert.assertEquals(compressedView.getBaselineValues().get(i), i * 4 + 1.6, 0.000001);\n-      date = date.plusHours(4);\n+      Assert.assertEquals(compressedView.getCurrentValues().get(i), i * 2 + 0.5, 0.000001);\n+      Assert.assertEquals(compressedView.getBaselineValues().get(i), i * 2 + 0.833, 0.000001);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTc3NDY0NA=="}, "originalCommit": {"oid": "fca1b2be3cf41631770da73a5ab1a2b3a165b820"}, "originalPosition": 56}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4003, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}