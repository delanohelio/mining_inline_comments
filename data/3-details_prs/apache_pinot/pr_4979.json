{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYyNDEwODA3", "number": 4979, "title": "Update quota manager to reduce zk access", "bodyText": "This PR updates quota manager to reduce zk access.\nCurrently when a broker resource gets changed, all the tables which contains qps quota will be re-calculated. This PR reduces the zk reads.", "createdAt": "2020-01-14T02:17:08Z", "url": "https://github.com/apache/pinot/pull/4979", "merged": true, "mergeCommit": {"oid": "d7eeb44430c75b2684680fa09b6244f989368940"}, "closed": true, "closedAt": "2020-02-11T19:53:52Z", "author": {"login": "jackjlli"}, "timelineItems": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABb6IH2UgFqTM0MjI2NjI2Nw==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcDXMrPgFqTM1Njk0NjUwMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQyMjY2MjY3", "url": "https://github.com/apache/pinot/pull/4979#pullrequestreview-342266267", "createdAt": "2020-01-14T02:53:10Z", "commit": {"oid": "c2733c542c0b9a430baeae9a2173aa41ede5c2fb"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQwMjo1MzoxMVrOFdK5RA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQwMzowODoyNFrOFdLEcg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjEzMTUyNA==", "bodyText": "You may cache it at class level as a member variable", "url": "https://github.com/apache/pinot/pull/4979#discussion_r366131524", "createdAt": "2020-01-14T02:53:11Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-broker/src/main/java/org/apache/pinot/broker/queryquota/HelixExternalViewBasedQueryQuotaManager.java", "diffHunk": "@@ -78,17 +81,18 @@ public void initTableQueryQuota(TableConfig tableConfig, ExternalView brokerReso\n     String tableNameWithType = tableConfig.getTableName();\n     String rawTableName = TableNameBuilder.extractRawTableName(tableNameWithType);\n     LOGGER.info(\"Initializing rate limiter for table {}\", tableNameWithType);\n+    ZkHelixPropertyStore<ZNRecord> propertyStore = _helixManager.getHelixPropertyStore();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c2733c542c0b9a430baeae9a2173aa41ede5c2fb"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjEzMjM0Ng==", "bodyText": "Could this message flood the log?", "url": "https://github.com/apache/pinot/pull/4979#discussion_r366132346", "createdAt": "2020-01-14T02:56:35Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-broker/src/main/java/org/apache/pinot/broker/queryquota/HelixExternalViewBasedQueryQuotaManager.java", "diffHunk": "@@ -323,11 +322,34 @@ public void processQueryQuotaChange() {\n       }\n       int onlineBrokerCount = otherOnlineBrokerCount + 1;\n \n+      // Get stat from property store\n+      String tableConfigPath = constructTableConfigPath(rawTableName, tableType);\n+      Stat stat = propertyStore.getStat(tableConfigPath, AccessOption.PERSISTENT);\n+      if (onlineBrokerCount == queryQuotaConfig.getNumOnlineBrokers() && stat.getVersion() == queryQuotaConfig\n+          .getTableConfigStatVersion()) {\n+        LOGGER.info(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c2733c542c0b9a430baeae9a2173aa41ede5c2fb"}, "originalPosition": 116}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjEzMzk3MQ==", "bodyText": "This might be null if table got deleted", "url": "https://github.com/apache/pinot/pull/4979#discussion_r366133971", "createdAt": "2020-01-14T03:05:41Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-broker/src/main/java/org/apache/pinot/broker/queryquota/HelixExternalViewBasedQueryQuotaManager.java", "diffHunk": "@@ -323,11 +322,34 @@ public void processQueryQuotaChange() {\n       }\n       int onlineBrokerCount = otherOnlineBrokerCount + 1;\n \n+      // Get stat from property store\n+      String tableConfigPath = constructTableConfigPath(rawTableName, tableType);\n+      Stat stat = propertyStore.getStat(tableConfigPath, AccessOption.PERSISTENT);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c2733c542c0b9a430baeae9a2173aa41ede5c2fb"}, "originalPosition": 113}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjEzNDE4OA==", "bodyText": "You don't need to fetch a new quota config if version matches but numOnlineBrokers changed", "url": "https://github.com/apache/pinot/pull/4979#discussion_r366134188", "createdAt": "2020-01-14T03:06:56Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-broker/src/main/java/org/apache/pinot/broker/queryquota/HelixExternalViewBasedQueryQuotaManager.java", "diffHunk": "@@ -323,11 +322,34 @@ public void processQueryQuotaChange() {\n       }\n       int onlineBrokerCount = otherOnlineBrokerCount + 1;\n \n+      // Get stat from property store\n+      String tableConfigPath = constructTableConfigPath(rawTableName, tableType);\n+      Stat stat = propertyStore.getStat(tableConfigPath, AccessOption.PERSISTENT);\n+      if (onlineBrokerCount == queryQuotaConfig.getNumOnlineBrokers() && stat.getVersion() == queryQuotaConfig\n+          .getTableConfigStatVersion()) {\n+        LOGGER.info(\n+            \"Number of brokers remains the same. Table config remains the same. No need to update quota for Table {}.\",\n+            tableNameWithType);\n+        continue;\n+      }\n+\n+      // Get latest quota config for table.\n+      QuotaConfig quotaConfig = getQuotaConfigFromPropertyStore(propertyStore, rawTableName, tableType);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c2733c542c0b9a430baeae9a2173aa41ede5c2fb"}, "originalPosition": 123}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjEzNDM4Ng==", "bodyText": "(nit) remove the nonnull annotation", "url": "https://github.com/apache/pinot/pull/4979#discussion_r366134386", "createdAt": "2020-01-14T03:08:24Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-broker/src/main/java/org/apache/pinot/broker/queryquota/QueryQuotaConfig.java", "diffHunk": "@@ -20,16 +20,21 @@\n \n import com.google.common.util.concurrent.RateLimiter;\n import javax.annotation.Nonnull;\n+import org.apache.pinot.common.utils.CommonConstants;\n \n \n public class QueryQuotaConfig {\n \n   private RateLimiter _rateLimiter;\n   private HitCounter _hitCounter;\n+  private int _numOnlineBrokers;\n+  private int _tableConfigStatVersion;\n \n-  public QueryQuotaConfig(@Nonnull RateLimiter rateLimiter, @Nonnull HitCounter hitCounter) {\n+  public QueryQuotaConfig(@Nonnull RateLimiter rateLimiter, @Nonnull HitCounter hitCounter, @Nonnull int numOnlineBrokers, @Nonnull int tableConfigStatVersion) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c2733c542c0b9a430baeae9a2173aa41ede5c2fb"}, "originalPosition": 15}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e22b6091a11950b5b0122e536c64e8451793a07b", "author": {"user": {"login": "jackjlli", "name": "Jialiang Li"}}, "url": "https://github.com/apache/pinot/commit/e22b6091a11950b5b0122e536c64e8451793a07b", "committedDate": "2020-01-17T00:24:26Z", "message": "Update quota manager to reduce zk access"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c2733c542c0b9a430baeae9a2173aa41ede5c2fb", "author": {"user": {"login": "jackjlli", "name": "Jialiang Li"}}, "url": "https://github.com/apache/pinot/commit/c2733c542c0b9a430baeae9a2173aa41ede5c2fb", "committedDate": "2020-01-14T02:14:55Z", "message": "Update quota manager to reduce zk access"}, "afterCommit": {"oid": "e6972473860cd915e0bc93e4e763ee963932131d", "author": {"user": {"login": "jackjlli", "name": "Jialiang Li"}}, "url": "https://github.com/apache/pinot/commit/e6972473860cd915e0bc93e4e763ee963932131d", "committedDate": "2020-01-17T00:55:24Z", "message": "Address PR comments"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e6972473860cd915e0bc93e4e763ee963932131d", "author": {"user": {"login": "jackjlli", "name": "Jialiang Li"}}, "url": "https://github.com/apache/pinot/commit/e6972473860cd915e0bc93e4e763ee963932131d", "committedDate": "2020-01-17T00:55:24Z", "message": "Address PR comments"}, "afterCommit": {"oid": "8e4ab63c585078a656dcdc3071fc5604c8f1181f", "author": {"user": {"login": "jackjlli", "name": "Jialiang Li"}}, "url": "https://github.com/apache/pinot/commit/8e4ab63c585078a656dcdc3071fc5604c8f1181f", "committedDate": "2020-01-17T01:04:17Z", "message": "Address PR comments"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "8e4ab63c585078a656dcdc3071fc5604c8f1181f", "author": {"user": {"login": "jackjlli", "name": "Jialiang Li"}}, "url": "https://github.com/apache/pinot/commit/8e4ab63c585078a656dcdc3071fc5604c8f1181f", "committedDate": "2020-01-17T01:04:17Z", "message": "Address PR comments"}, "afterCommit": {"oid": "003d35ce828f1025a805704e3faf0d44bacbca1d", "author": {"user": {"login": "jackjlli", "name": "Jialiang Li"}}, "url": "https://github.com/apache/pinot/commit/003d35ce828f1025a805704e3faf0d44bacbca1d", "committedDate": "2020-01-17T01:31:29Z", "message": "Address PR comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ1MDMxMzQx", "url": "https://github.com/apache/pinot/pull/4979#pullrequestreview-345031341", "createdAt": "2020-01-19T22:33:58Z", "commit": {"oid": "003d35ce828f1025a805704e3faf0d44bacbca1d"}, "state": "COMMENTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xOVQyMjozMzo1OVrOFfQ_Lg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xOVQyMjo1NjowMFrOFfRFbA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODMyODQ5NA==", "bodyText": "I remember some discussions from before that the property store handle is stale if helix loses zk connection. Has that assumption changed (or is my recollection wrong)? Helix code seems to be resetting the handle on disconnect() as well.", "url": "https://github.com/apache/pinot/pull/4979#discussion_r368328494", "createdAt": "2020-01-19T22:33:59Z", "author": {"login": "mcvsubbu"}, "path": "pinot-broker/src/main/java/org/apache/pinot/broker/queryquota/HelixExternalViewBasedQueryQuotaManager.java", "diffHunk": "@@ -122,15 +133,11 @@ private void removeRateLimiter(String tableNameWithType) {\n \n   /**\n    * Get QuotaConfig from property store.\n-   * @param rawTableName table name without table type.\n-   * @param tableType table type: offline or real-time.\n+   * @param tableNameWithType table name with table type.\n    * @return QuotaConfig, which could be null.\n    */\n-  private QuotaConfig getQuotaConfigFromPropertyStore(String rawTableName, CommonConstants.Helix.TableType tableType) {\n-    ZkHelixPropertyStore<ZNRecord> propertyStore = _helixManager.getHelixPropertyStore();\n-\n-    String tableNameWithType = TableNameBuilder.forType(tableType).tableNameWithType(rawTableName);\n-    TableConfig tableConfig = ZKMetadataProvider.getTableConfig(propertyStore, tableNameWithType);\n+  private QuotaConfig getQuotaConfigFromPropertyStore(String tableNameWithType) {\n+    TableConfig tableConfig = ZKMetadataProvider.getTableConfig(_propertyStore, tableNameWithType);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "003d35ce828f1025a805704e3faf0d44bacbca1d"}, "originalPosition": 89}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODMyODY4OA==", "bodyText": "Add the version to the log line below", "url": "https://github.com/apache/pinot/pull/4979#discussion_r368328688", "createdAt": "2020-01-19T22:37:22Z", "author": {"login": "mcvsubbu"}, "path": "pinot-broker/src/main/java/org/apache/pinot/broker/queryquota/HelixExternalViewBasedQueryQuotaManager.java", "diffHunk": "@@ -180,10 +187,15 @@ private void createRateLimiter(String tableNameWithType, ExternalView brokerReso\n       return;\n     }\n \n+    // Get stat from property store\n+    String tableConfigPath = constructTableConfigPath(tableNameWithType);\n+    Stat stat = _propertyStore.getStat(tableConfigPath, AccessOption.PERSISTENT);\n+\n     double perBrokerRate = overallRate / onlineCount;\n-    QueryQuotaConfig queryQuotaConfig =\n-        new QueryQuotaConfig(RateLimiter.create(perBrokerRate), new HitCounter(TIME_RANGE_IN_SECOND));\n-    _rateLimiterMap.put(tableNameWithType, queryQuotaConfig);\n+    QueryQuotaEntity queryQuotaEntity =\n+        new QueryQuotaEntity(RateLimiter.create(perBrokerRate), new HitCounter(TIME_RANGE_IN_SECOND), onlineCount,\n+            overallRate, stat.getVersion());\n+    _rateLimiterMap.put(tableNameWithType, queryQuotaEntity);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "003d35ce828f1025a805704e3faf0d44bacbca1d"}, "originalPosition": 108}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODMyODk5Ng==", "bodyText": "suggest rename currentBrokerResource to brokerResourceEV", "url": "https://github.com/apache/pinot/pull/4979#discussion_r368328996", "createdAt": "2020-01-19T22:41:57Z", "author": {"login": "mcvsubbu"}, "path": "pinot-broker/src/main/java/org/apache/pinot/broker/queryquota/HelixExternalViewBasedQueryQuotaManager.java", "diffHunk": "@@ -39,34 +41,43 @@\n import org.apache.pinot.common.metrics.BrokerMetrics;\n import org.apache.pinot.common.utils.CommonConstants;\n import org.apache.pinot.common.utils.helix.HelixHelper;\n+import org.apache.zookeeper.data.Stat;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n-import static org.apache.pinot.common.utils.CommonConstants.Helix.BROKER_RESOURCE_INSTANCE;\n-import static org.apache.pinot.common.utils.CommonConstants.Helix.TableType;\n-\n \n+/**\n+ * This class is to support the qps quota feature.\n+ * It depends on the broker source change to update the dynamic rate limit,\n+ *  which means it only gets updated when a new table added or a broker restarted.\n+ * TODO: support adding new rate limiter for existing tables without restarting the broker.\n+ */\n public class HelixExternalViewBasedQueryQuotaManager implements ClusterChangeHandler, QueryQuotaManager {\n   private static final Logger LOGGER = LoggerFactory.getLogger(HelixExternalViewBasedQueryQuotaManager.class);\n   private static final int TIME_RANGE_IN_SECOND = 1;\n \n   private final AtomicInteger _lastKnownBrokerResourceVersion = new AtomicInteger(-1);\n-  private final Map<String, QueryQuotaConfig> _rateLimiterMap = new ConcurrentHashMap<>();\n+  private final Map<String, QueryQuotaEntity> _rateLimiterMap = new ConcurrentHashMap<>();\n \n   private HelixManager _helixManager;\n+  private ZkHelixPropertyStore<ZNRecord> _propertyStore;\n   private BrokerMetrics _brokerMetrics;\n \n   @Override\n   public void init(HelixManager helixManager) {\n     Preconditions.checkState(_helixManager == null, \"HelixExternalViewBasedQueryQuotaManager is already initialized\");\n     _helixManager = helixManager;\n+    _propertyStore = _helixManager.getHelixPropertyStore();\n   }\n \n   @Override\n   public void processClusterChange(HelixConstants.ChangeType changeType) {\n     Preconditions\n         .checkState(changeType == HelixConstants.ChangeType.EXTERNAL_VIEW, \"Illegal change type: \" + changeType);\n-    processQueryQuotaChange();\n+    ExternalView currentBrokerResource = HelixHelper", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "003d35ce828f1025a805704e3faf0d44bacbca1d"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODMyOTM3Nw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    LOGGER.info(\"Table {} gets deleted from property store. Removing its rate limit.\", tableNameWithType);\n          \n          \n            \n                    LOGGER.info(\"Table {} has been deleted from property store. Removing its rate limit.\", tableNameWithType);", "url": "https://github.com/apache/pinot/pull/4979#discussion_r368329377", "createdAt": "2020-01-19T22:47:10Z", "author": {"login": "mcvsubbu"}, "path": "pinot-broker/src/main/java/org/apache/pinot/broker/queryquota/HelixExternalViewBasedQueryQuotaManager.java", "diffHunk": "@@ -323,11 +321,43 @@ public void processQueryQuotaChange() {\n       }\n       int onlineBrokerCount = otherOnlineBrokerCount + 1;\n \n-      double overallRate = Double.parseDouble(quotaConfig.getMaxQueriesPerSecond());\n+      // Get stat from property store\n+      String tableConfigPath = constructTableConfigPath(tableNameWithType);\n+      Stat stat = _propertyStore.getStat(tableConfigPath, AccessOption.PERSISTENT);\n+      if (stat == null) {\n+        LOGGER.info(\"Table {} gets deleted from property store. Removing its rate limit.\", tableNameWithType);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "003d35ce828f1025a805704e3faf0d44bacbca1d"}, "originalPosition": 228}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODMyOTYzNw==", "bodyText": "It may be useful to add a log line here with the version", "url": "https://github.com/apache/pinot/pull/4979#discussion_r368329637", "createdAt": "2020-01-19T22:50:52Z", "author": {"login": "mcvsubbu"}, "path": "pinot-broker/src/main/java/org/apache/pinot/broker/queryquota/HelixExternalViewBasedQueryQuotaManager.java", "diffHunk": "@@ -323,11 +321,43 @@ public void processQueryQuotaChange() {\n       }\n       int onlineBrokerCount = otherOnlineBrokerCount + 1;\n \n-      double overallRate = Double.parseDouble(quotaConfig.getMaxQueriesPerSecond());\n+      // Get stat from property store\n+      String tableConfigPath = constructTableConfigPath(tableNameWithType);\n+      Stat stat = _propertyStore.getStat(tableConfigPath, AccessOption.PERSISTENT);\n+      if (stat == null) {\n+        LOGGER.info(\"Table {} gets deleted from property store. Removing its rate limit.\", tableNameWithType);\n+        it.remove();\n+        continue;\n+      }\n+\n+      // If number of online brokers and table config don't change, there is no need to re-calculate the dynamic rate.\n+      if (onlineBrokerCount == queryQuotaEntity.getNumOnlineBrokers() && stat.getVersion() == queryQuotaEntity\n+          .getTableConfigStatVersion()) {\n+        continue;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "003d35ce828f1025a805704e3faf0d44bacbca1d"}, "originalPosition": 236}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODMzMDA5Mg==", "bodyText": "Even if we don't update the rate due to small difference, should we not update the tableConfigStatVersion?", "url": "https://github.com/apache/pinot/pull/4979#discussion_r368330092", "createdAt": "2020-01-19T22:56:00Z", "author": {"login": "mcvsubbu"}, "path": "pinot-broker/src/main/java/org/apache/pinot/broker/queryquota/HelixExternalViewBasedQueryQuotaManager.java", "diffHunk": "@@ -323,11 +321,43 @@ public void processQueryQuotaChange() {\n       }\n       int onlineBrokerCount = otherOnlineBrokerCount + 1;\n \n-      double overallRate = Double.parseDouble(quotaConfig.getMaxQueriesPerSecond());\n+      // Get stat from property store\n+      String tableConfigPath = constructTableConfigPath(tableNameWithType);\n+      Stat stat = _propertyStore.getStat(tableConfigPath, AccessOption.PERSISTENT);\n+      if (stat == null) {\n+        LOGGER.info(\"Table {} gets deleted from property store. Removing its rate limit.\", tableNameWithType);\n+        it.remove();\n+        continue;\n+      }\n+\n+      // If number of online brokers and table config don't change, there is no need to re-calculate the dynamic rate.\n+      if (onlineBrokerCount == queryQuotaEntity.getNumOnlineBrokers() && stat.getVersion() == queryQuotaEntity\n+          .getTableConfigStatVersion()) {\n+        continue;\n+      }\n+\n+      double overallRate;\n+      // Get latest quota config only if stat don't match.\n+      if (stat.getVersion() != queryQuotaEntity.getTableConfigStatVersion()) {\n+        QuotaConfig quotaConfig = getQuotaConfigFromPropertyStore(tableNameWithType);\n+        if (quotaConfig == null || quotaConfig.getMaxQueriesPerSecond() == null || !quotaConfig\n+            .isMaxQueriesPerSecondValid()) {\n+          LOGGER.info(\"No query quota config or the config is invalid for Table {}. Removing its rate limit.\",\n+              tableNameWithType);\n+          it.remove();\n+          continue;\n+        }\n+        overallRate = Double.parseDouble(quotaConfig.getMaxQueriesPerSecond());\n+      } else {\n+        overallRate = queryQuotaEntity.getOverallRate();\n+      }\n       double latestRate = overallRate / onlineBrokerCount;\n-      double previousRate = queryQuotaConfig.getRateLimiter().getRate();\n+      double previousRate = queryQuotaEntity.getRateLimiter().getRate();\n       if (Math.abs(latestRate - previousRate) > 0.001) {\n-        queryQuotaConfig.getRateLimiter().setRate(latestRate);\n+        queryQuotaEntity.getRateLimiter().setRate(latestRate);\n+        queryQuotaEntity.setNumOnlineBrokers(onlineBrokerCount);\n+        queryQuotaEntity.setOverallRate(overallRate);\n+        queryQuotaEntity.setTableConfigStatVersion(stat.getVersion());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "003d35ce828f1025a805704e3faf0d44bacbca1d"}, "originalPosition": 262}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3d7b62294cb5ad855f12eb710a8f756223387662", "author": {"user": {"login": "jackjlli", "name": "Jialiang Li"}}, "url": "https://github.com/apache/pinot/commit/3d7b62294cb5ad855f12eb710a8f756223387662", "committedDate": "2020-01-21T01:24:08Z", "message": "Address PR comments"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "003d35ce828f1025a805704e3faf0d44bacbca1d", "author": {"user": {"login": "jackjlli", "name": "Jialiang Li"}}, "url": "https://github.com/apache/pinot/commit/003d35ce828f1025a805704e3faf0d44bacbca1d", "committedDate": "2020-01-17T01:31:29Z", "message": "Address PR comments"}, "afterCommit": {"oid": "3d7b62294cb5ad855f12eb710a8f756223387662", "author": {"user": {"login": "jackjlli", "name": "Jialiang Li"}}, "url": "https://github.com/apache/pinot/commit/3d7b62294cb5ad855f12eb710a8f756223387662", "committedDate": "2020-01-21T01:24:08Z", "message": "Address PR comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU2OTQ2MzUz", "url": "https://github.com/apache/pinot/pull/4979#pullrequestreview-356946353", "createdAt": "2020-02-11T19:49:15Z", "commit": {"oid": "3d7b62294cb5ad855f12eb710a8f756223387662"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU2OTQ2NTAx", "url": "https://github.com/apache/pinot/pull/4979#pullrequestreview-356946501", "createdAt": "2020-02-11T19:49:31Z", "commit": {"oid": "3d7b62294cb5ad855f12eb710a8f756223387662"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1460, "cost": 1, "resetAt": "2021-10-28T18:00:02Z"}}}