{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk0NTE4ODE5", "number": 5189, "title": "Stream github events demo", "bodyText": "A real world application demo of Pinot. This demo lets us query github events in realtime.\nSteps to run: https://apache-pinot.gitbook.io/apache-pinot-cookbook/getting-started/recipes/github-events-stream", "createdAt": "2020-03-27T02:38:55Z", "url": "https://github.com/apache/pinot/pull/5189", "merged": true, "mergeCommit": {"oid": "1baede8e760d593fcd539d61a147185816c44fc9"}, "closed": true, "closedAt": "2020-04-07T20:28:32Z", "author": {"login": "npawar"}, "timelineItems": {"totalCount": 16, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcO99mhgH2gAyMzk0NTE4ODE5OjQwMWYyYTI0ZTAxYmIxN2U2YTA5ZTRkMmMxYWIxNDJlZWJlYTA3M2M=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcVXtODAH2gAyMzk0NTE4ODE5OmY0MTZkMWVjMjc4MWU5NWRkYWNhYzNkMTY2Y2EyOWE0ODFhYzk4YTc=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "401f2a24e01bb17e6a09e4d2c1ab142eebea073c", "author": {"user": null}, "url": "https://github.com/apache/pinot/commit/401f2a24e01bb17e6a09e4d2c1ab142eebea073c", "committedDate": "2020-03-18T21:12:31Z", "message": "Realtime github events demo"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1cb51c369553bafc04a4cce6276b5477d9603355", "author": {"user": null}, "url": "https://github.com/apache/pinot/commit/1cb51c369553bafc04a4cce6276b5477d9603355", "committedDate": "2020-03-18T21:14:50Z", "message": "Remove sout"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9d7fc43979df6fa45961c62615fcfbcef07b765d", "author": {"user": null}, "url": "https://github.com/apache/pinot/commit/9d7fc43979df6fa45961c62615fcfbcef07b765d", "committedDate": "2020-03-18T21:37:37Z", "message": "Correct sample queries"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f6bab76102f3fa51556a2dc331fb34438dbae8bc", "author": {"user": null}, "url": "https://github.com/apache/pinot/commit/f6bab76102f3fa51556a2dc331fb34438dbae8bc", "committedDate": "2020-03-24T01:09:44Z", "message": "Add StreamGithubEventsCommand to decouple streaming events into topic from rest of the process (setting up cluster, setting up kafka, creating topic and adding table)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "87e8b02a811d76d84e2db15d0cc0c2f27a1f34e1", "author": {"user": null}, "url": "https://github.com/apache/pinot/commit/87e8b02a811d76d84e2db15d0cc0c2f27a1f34e1", "committedDate": "2020-03-24T01:17:40Z", "message": "DefaultNullValue of dimensions to empty string"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ed3847342ab9a4406d42b290258081135953be68", "author": {"user": null}, "url": "https://github.com/apache/pinot/commit/ed3847342ab9a4406d42b290258081135953be68", "committedDate": "2020-03-25T20:39:52Z", "message": "Make schema configurable"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "530443898902c148b4c670110b6d83d74c9a833d", "author": {"user": null}, "url": "https://github.com/apache/pinot/commit/530443898902c148b4c670110b6d83d74c9a833d", "committedDate": "2020-03-25T21:55:19Z", "message": "Increase retention"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1e5815e0058cc111e3902a70e052438e3b75d276", "author": {"user": null}, "url": "https://github.com/apache/pinot/commit/1e5815e0058cc111e3902a70e052438e3b75d276", "committedDate": "2020-03-25T22:59:54Z", "message": "Print"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "797fa77968c4f41579d5b674739aedf9c3957183", "author": {"user": null}, "url": "https://github.com/apache/pinot/commit/797fa77968c4f41579d5b674739aedf9c3957183", "committedDate": "2020-03-25T23:58:54Z", "message": "Print"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6a7d09603b812cdc6d8f259bf8ec38dd504b3e23", "author": {"user": null}, "url": "https://github.com/apache/pinot/commit/6a7d09603b812cdc6d8f259bf8ec38dd504b3e23", "committedDate": "2020-03-26T02:36:10Z", "message": "Print"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "58e173b141cf1b5495c47731a5cc307209be960d", "author": {"user": null}, "url": "https://github.com/apache/pinot/commit/58e173b141cf1b5495c47731a5cc307209be960d", "committedDate": "2020-03-26T17:11:22Z", "message": "Print"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d56c4ddfc57ea20c94381895cf45146ec8448a1b", "author": {"user": null}, "url": "https://github.com/apache/pinot/commit/d56c4ddfc57ea20c94381895cf45146ec8448a1b", "committedDate": "2020-03-26T21:28:36Z", "message": "Print"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fd4678c6cb2276556fbdd23cd26a8cfbabbcd83a", "author": {"user": null}, "url": "https://github.com/apache/pinot/commit/fd4678c6cb2276556fbdd23cd26a8cfbabbcd83a", "committedDate": "2020-03-27T02:32:08Z", "message": "Remove print statements"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fb439a47b59117691fe8a8cba0257117c73f62e5", "author": {"user": null}, "url": "https://github.com/apache/pinot/commit/fb439a47b59117691fe8a8cba0257117c73f62e5", "committedDate": "2020-03-30T18:23:03Z", "message": "Retry on exceptions"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg2OTU1MTI2", "url": "https://github.com/apache/pinot/pull/5189#pullrequestreview-386955126", "createdAt": "2020-04-03T06:00:40Z", "commit": {"oid": "fb439a47b59117691fe8a8cba0257117c73f62e5"}, "state": "APPROVED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QwNjowMDo0MFrOGAGF2Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QwNjowMzowMVrOGAGIfA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjc1Mjk4NQ==", "bodyText": "pull_request_merge_event", "url": "https://github.com/apache/pinot/pull/5189#discussion_r402752985", "createdAt": "2020-04-03T06:00:40Z", "author": {"login": "kishoreg"}, "path": "kubernetes/helm/pinot-github-events-setup.yml", "diffHunk": "@@ -0,0 +1,280 @@\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+#\n+\n+apiVersion: v1\n+kind: ConfigMap\n+metadata:\n+  name: examples\n+  namespace: pinot-quickstart\n+data:\n+  pullRequestMergedEvents_realtime_table_config.json: |-\n+    {\n+      \"tableName\": \"pullRequestMergedEvents\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fb439a47b59117691fe8a8cba0257117c73f62e5"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjc1MzI0OQ==", "bodyText": "/tmp --> System.gettemp dir or something like that", "url": "https://github.com/apache/pinot/pull/5189#discussion_r402753249", "createdAt": "2020-04-03T06:01:40Z", "author": {"login": "kishoreg"}, "path": "pinot-tools/src/main/java/org/apache/pinot/tools/GithubEventsQuickstart.java", "diffHunk": "@@ -0,0 +1,149 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.tools;\n+\n+import com.google.common.base.Preconditions;\n+import com.google.common.collect.Lists;\n+import java.io.File;\n+import java.net.URL;\n+import org.apache.commons.io.FileUtils;\n+import org.apache.pinot.common.utils.ZkStarter;\n+import org.apache.pinot.spi.plugin.PluginManager;\n+import org.apache.pinot.spi.stream.StreamDataProvider;\n+import org.apache.pinot.spi.stream.StreamDataServerStartable;\n+import org.apache.pinot.tools.Quickstart.Color;\n+import org.apache.pinot.tools.admin.command.QuickstartRunner;\n+import org.apache.pinot.tools.streams.githubevents.PullRequestMergedEventsStream;\n+import org.apache.pinot.tools.utils.KafkaStarterUtils;\n+\n+import static org.apache.pinot.tools.Quickstart.prettyPrintResponse;\n+import static org.apache.pinot.tools.Quickstart.printStatus;\n+\n+\n+/**\n+ * Sets up a demo Pinot cluster with 1 zookeeper, 1 controller, 1 broker and 1 server\n+ * Sets up a demo Kafka cluster, and creates a topic pullRequestMergedEvents\n+ * Creates a realtime table pullRequestMergedEvents\n+ * Starts the {@link PullRequestMergedEventsStream} to publish pullRequestMergedEvents into the topic\n+ */\n+public class GithubEventsQuickstart {\n+  private StreamDataServerStartable _kafkaStarter;\n+  private ZkStarter.ZookeeperInstance _zookeeperInstance;\n+\n+  private void startKafka() {\n+    _zookeeperInstance = ZkStarter.startLocalZkServer();\n+    try {\n+      _kafkaStarter = StreamDataProvider.getServerDataStartable(KafkaStarterUtils.KAFKA_SERVER_STARTABLE_CLASS_NAME,\n+          KafkaStarterUtils.getDefaultKafkaConfiguration());\n+    } catch (Exception e) {\n+      throw new RuntimeException(\"Failed to start \" + KafkaStarterUtils.KAFKA_SERVER_STARTABLE_CLASS_NAME, e);\n+    }\n+    _kafkaStarter.start();\n+    _kafkaStarter.createTopic(\"pullRequestMergedEvents\", KafkaStarterUtils.getTopicCreationProps(2));\n+  }\n+\n+  public void execute(String personalAccessToken)\n+      throws Exception {\n+    final File quickStartDataDir = new File(\"githubEvents\" + System.currentTimeMillis());\n+\n+    if (!quickStartDataDir.exists()) {\n+      Preconditions.checkState(quickStartDataDir.mkdirs());\n+    }\n+\n+    File schemaFile = new File(quickStartDataDir, \"pullRequestMergedEvents_schema.json\");\n+    File tableConfigFile = new File(quickStartDataDir, \"pullRequestMergedEvents_realtime_table_config.json\");\n+\n+    ClassLoader classLoader = Quickstart.class.getClassLoader();\n+    URL resource = classLoader.getResource(\"examples/stream/githubEvents/pullRequestMergedEvents_schema.json\");\n+    Preconditions.checkNotNull(resource);\n+    FileUtils.copyURLToFile(resource, schemaFile);\n+    resource =\n+        classLoader.getResource(\"examples/stream/githubEvents/pullRequestMergedEvents_realtime_table_config.json\");\n+    Preconditions.checkNotNull(resource);\n+    FileUtils.copyURLToFile(resource, tableConfigFile);\n+\n+    File tempDir = new File(\"/tmp\", String.valueOf(System.currentTimeMillis()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fb439a47b59117691fe8a8cba0257117c73f62e5"}, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjc1MzMzNA==", "bodyText": "logger?", "url": "https://github.com/apache/pinot/pull/5189#discussion_r402753334", "createdAt": "2020-04-03T06:01:58Z", "author": {"login": "kishoreg"}, "path": "pinot-tools/src/main/java/org/apache/pinot/tools/GithubEventsQuickstart.java", "diffHunk": "@@ -0,0 +1,149 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.tools;\n+\n+import com.google.common.base.Preconditions;\n+import com.google.common.collect.Lists;\n+import java.io.File;\n+import java.net.URL;\n+import org.apache.commons.io.FileUtils;\n+import org.apache.pinot.common.utils.ZkStarter;\n+import org.apache.pinot.spi.plugin.PluginManager;\n+import org.apache.pinot.spi.stream.StreamDataProvider;\n+import org.apache.pinot.spi.stream.StreamDataServerStartable;\n+import org.apache.pinot.tools.Quickstart.Color;\n+import org.apache.pinot.tools.admin.command.QuickstartRunner;\n+import org.apache.pinot.tools.streams.githubevents.PullRequestMergedEventsStream;\n+import org.apache.pinot.tools.utils.KafkaStarterUtils;\n+\n+import static org.apache.pinot.tools.Quickstart.prettyPrintResponse;\n+import static org.apache.pinot.tools.Quickstart.printStatus;\n+\n+\n+/**\n+ * Sets up a demo Pinot cluster with 1 zookeeper, 1 controller, 1 broker and 1 server\n+ * Sets up a demo Kafka cluster, and creates a topic pullRequestMergedEvents\n+ * Creates a realtime table pullRequestMergedEvents\n+ * Starts the {@link PullRequestMergedEventsStream} to publish pullRequestMergedEvents into the topic\n+ */\n+public class GithubEventsQuickstart {\n+  private StreamDataServerStartable _kafkaStarter;\n+  private ZkStarter.ZookeeperInstance _zookeeperInstance;\n+\n+  private void startKafka() {\n+    _zookeeperInstance = ZkStarter.startLocalZkServer();\n+    try {\n+      _kafkaStarter = StreamDataProvider.getServerDataStartable(KafkaStarterUtils.KAFKA_SERVER_STARTABLE_CLASS_NAME,\n+          KafkaStarterUtils.getDefaultKafkaConfiguration());\n+    } catch (Exception e) {\n+      throw new RuntimeException(\"Failed to start \" + KafkaStarterUtils.KAFKA_SERVER_STARTABLE_CLASS_NAME, e);\n+    }\n+    _kafkaStarter.start();\n+    _kafkaStarter.createTopic(\"pullRequestMergedEvents\", KafkaStarterUtils.getTopicCreationProps(2));\n+  }\n+\n+  public void execute(String personalAccessToken)\n+      throws Exception {\n+    final File quickStartDataDir = new File(\"githubEvents\" + System.currentTimeMillis());\n+\n+    if (!quickStartDataDir.exists()) {\n+      Preconditions.checkState(quickStartDataDir.mkdirs());\n+    }\n+\n+    File schemaFile = new File(quickStartDataDir, \"pullRequestMergedEvents_schema.json\");\n+    File tableConfigFile = new File(quickStartDataDir, \"pullRequestMergedEvents_realtime_table_config.json\");\n+\n+    ClassLoader classLoader = Quickstart.class.getClassLoader();\n+    URL resource = classLoader.getResource(\"examples/stream/githubEvents/pullRequestMergedEvents_schema.json\");\n+    Preconditions.checkNotNull(resource);\n+    FileUtils.copyURLToFile(resource, schemaFile);\n+    resource =\n+        classLoader.getResource(\"examples/stream/githubEvents/pullRequestMergedEvents_realtime_table_config.json\");\n+    Preconditions.checkNotNull(resource);\n+    FileUtils.copyURLToFile(resource, tableConfigFile);\n+\n+    File tempDir = new File(\"/tmp\", String.valueOf(System.currentTimeMillis()));\n+    Preconditions.checkState(tempDir.mkdirs());\n+    QuickstartTableRequest request = new QuickstartTableRequest(\"pullRequestMergedEvents\", schemaFile, tableConfigFile);\n+    final QuickstartRunner runner = new QuickstartRunner(Lists.newArrayList(request), 1, 1, 1, tempDir);\n+\n+    printStatus(Color.CYAN, \"***** Starting Kafka *****\");\n+    startKafka();\n+\n+    printStatus(Color.CYAN, \"***** Starting zookeeper, controller, server and broker *****\");\n+    runner.startAll();\n+\n+    printStatus(Color.CYAN, \"***** Adding pullRequestMergedEvents table *****\");\n+    runner.addTable();\n+\n+    printStatus(Color.CYAN, \"***** Starting pullRequestMergedEvents data stream and publishing to Kafka *****\");\n+    final PullRequestMergedEventsStream pullRequestMergedEventsStream =\n+        new PullRequestMergedEventsStream(schemaFile.getAbsolutePath(), \"pullRequestMergedEvents\",\n+            KafkaStarterUtils.DEFAULT_KAFKA_BROKER, personalAccessToken);\n+    pullRequestMergedEventsStream.execute();\n+    printStatus(Color.CYAN, \"***** Waiting for 10 seconds for a few events to get populated *****\");\n+    Thread.sleep(10000);\n+\n+    Runtime.getRuntime().addShutdownHook(new Thread(() -> {\n+      try {\n+        printStatus(Color.GREEN, \"***** Shutting down GithubEventsQuickStart *****\");\n+        runner.stop();\n+        _kafkaStarter.stop();\n+        ZkStarter.stopLocalZkServer(_zookeeperInstance);\n+        FileUtils.deleteDirectory(quickStartDataDir);\n+      } catch (Exception e) {\n+        e.printStackTrace();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fb439a47b59117691fe8a8cba0257117c73f62e5"}, "originalPosition": 111}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjc1MzY2MA==", "bodyText": "Github --> GitHub in multiple places", "url": "https://github.com/apache/pinot/pull/5189#discussion_r402753660", "createdAt": "2020-04-03T06:03:01Z", "author": {"login": "kishoreg"}, "path": "pinot-tools/src/main/java/org/apache/pinot/tools/admin/command/GithubEventsQuickStartCommand.java", "diffHunk": "@@ -0,0 +1,72 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.tools.admin.command;\n+\n+import org.apache.pinot.spi.plugin.PluginManager;\n+import org.apache.pinot.tools.Command;\n+import org.apache.pinot.tools.GithubEventsQuickstart;\n+import org.kohsuke.args4j.Option;\n+\n+/**\n+ * Command to run GithubEventsQuickStart\n+ */\n+public class GithubEventsQuickStartCommand extends AbstractBaseAdminCommand implements Command {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fb439a47b59117691fe8a8cba0257117c73f62e5"}, "originalPosition": 29}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f416d1ec2781e95ddacac3d166ca29a481ac98a7", "author": {"user": null}, "url": "https://github.com/apache/pinot/commit/f416d1ec2781e95ddacac3d166ca29a481ac98a7", "committedDate": "2020-04-07T18:35:42Z", "message": "Review comments"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1125, "cost": 1, "resetAt": "2021-10-28T18:00:02Z"}}}