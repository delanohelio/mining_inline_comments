{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE3NzAwNDAz", "number": 5382, "title": "Temporary work-around to bypass function arguments being treated as expressions with columns.", "bodyText": "Only aggregation functions have the knowledge on how to interpret their arguments.\nHowever, the assumption within ServerQueryRequest is that all expression arguments will contain\ncolumns to be collected. A clean fix would be to create aggregation functions upfront and let\nthem interpret the arguments. However, until that happens, working-around by assuming that first\nargument contains all the columns (to be used by DataSchemaPruner), which is true for all functions.\nA side effect would be that DataSchemaPruner won't work for DistinctCountThetaSketchAggregatinoFunction.\nBut since this pruner is only for schema mis-matches, and not for performance, there should not be\nan impact.", "createdAt": "2020-05-14T01:42:04Z", "url": "https://github.com/apache/pinot/pull/5382", "merged": true, "mergeCommit": {"oid": "753dd34a6fd3fd4c52fd7d0dc8123ed979ecf842"}, "closed": true, "closedAt": "2020-05-14T03:28:08Z", "author": {"login": "mayankshriv"}, "timelineItems": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABchDatGAFqTQxMTQxMDE0OA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABchDo2XgBqjMzMzQ1NDA5MDU=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDExNDEwMTQ4", "url": "https://github.com/apache/pinot/pull/5382#pullrequestreview-411410148", "createdAt": "2020-05-14T01:44:19Z", "commit": {"oid": "f93182326448f475873f15c94a043cda2e820a92"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQwMTo0NDoxOVrOGVJPNg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQwMTo0NDoxOVrOGVJPNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDgyNDYzMA==", "bodyText": "I would recommend specialize THETA_SKETCHES, so that it won't affect DISTINCT", "url": "https://github.com/apache/pinot/pull/5382#discussion_r424824630", "createdAt": "2020-05-14T01:44:19Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/query/request/ServerQueryRequest.java", "diffHunk": "@@ -94,10 +94,12 @@ public ServerQueryRequest(InstanceRequest instanceRequest, ServerMetrics serverM\n     if (aggregationsInfo != null) {\n       _aggregationExpressions = new HashSet<>();\n       for (AggregationInfo aggregationInfo : aggregationsInfo) {\n-        if (!aggregationInfo.getAggregationType().equalsIgnoreCase(AggregationFunctionType.COUNT.getName())) {\n-          for (String expressions : AggregationFunctionUtils.getArguments(aggregationInfo)) {\n-            _aggregationExpressions.add(TransformExpressionTree.compileToExpressionTree(expressions));\n-          }\n+        String aggregationType = aggregationInfo.getAggregationType();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f93182326448f475873f15c94a043cda2e820a92"}, "originalPosition": 8}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f93182326448f475873f15c94a043cda2e820a92", "author": {"user": {"login": "mayankshriv", "name": "Mayank Shrivastava"}}, "url": "https://github.com/apache/pinot/commit/f93182326448f475873f15c94a043cda2e820a92", "committedDate": "2020-05-14T01:35:21Z", "message": "Temporary work-around to bypass function arguments being treated as expressions with columns.\n\nOnly aggregation functions have the knowledge on how to interpret their arguments.\nHowever, the assumption within ServerQueryRequest is that all expression arguments will contain\ncolumns to be collected. A clean fix would be to create aggregation functions upfront and let\nthem interpret the arguments. However, until that happens, working-around by assuming that first\nargument contains all the columns (to be used by DataSchemaPruner), which is true for all functions.\n\nA side effect would be that DataSchemaPruner won't work for DistinctCountThetaSketchAggregatinoFunction.\nBut since this pruner is only for schema mis-matches, and not for performance, there should not be\nan impact."}, "afterCommit": {"oid": "6f7a8d212b3e983bfec9a692cd762dfce4614ce4", "author": {"user": {"login": "mayankshriv", "name": "Mayank Shrivastava"}}, "url": "https://github.com/apache/pinot/commit/6f7a8d212b3e983bfec9a692cd762dfce4614ce4", "committedDate": "2020-05-14T01:58:56Z", "message": "Temporary work-around to bypass function arguments being treated as expressions with columns.\n\nOnly aggregation functions have the knowledge on how to interpret their arguments.\nHowever, the assumption within ServerQueryRequest is that all expression arguments will contain\ncolumns to be collected. A clean fix would be to create aggregation functions upfront and let\nthem interpret the arguments. However, until that happens, working-around by assuming that first\nargument contains all the columns (to be used by DataSchemaPruner), which is true for all functions.\n\nA side effect would be that DataSchemaPruner won't work for DistinctCountThetaSketchAggregatinoFunction.\nBut since this pruner is only for schema mis-matches, and not for performance, there should not be\nan impact."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "364956757d9e284cdeaccde3091b1dd51c5deda7", "author": {"user": {"login": "mayankshriv", "name": "Mayank Shrivastava"}}, "url": "https://github.com/apache/pinot/commit/364956757d9e284cdeaccde3091b1dd51c5deda7", "committedDate": "2020-05-14T01:59:43Z", "message": "Temporary work-around to bypass function arguments being treated as expressions with columns.\n\nOnly aggregation functions have the knowledge on how to interpret their arguments.\nHowever, the assumption within ServerQueryRequest is that all expression arguments will contain\ncolumns to be collected. A clean fix would be to create aggregation functions upfront and let\nthem interpret the arguments. However, until that happens, working-around by assuming that first\nargument contains all the columns (to be used by DataSchemaPruner), which is true for all functions.\n\nA side effect would be that DataSchemaPruner won't work for DistinctCountThetaSketchAggregatinoFunction.\nBut since this pruner is only for schema mis-matches, and not for performance, there should not be\nan impact."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "6f7a8d212b3e983bfec9a692cd762dfce4614ce4", "author": {"user": {"login": "mayankshriv", "name": "Mayank Shrivastava"}}, "url": "https://github.com/apache/pinot/commit/6f7a8d212b3e983bfec9a692cd762dfce4614ce4", "committedDate": "2020-05-14T01:58:56Z", "message": "Temporary work-around to bypass function arguments being treated as expressions with columns.\n\nOnly aggregation functions have the knowledge on how to interpret their arguments.\nHowever, the assumption within ServerQueryRequest is that all expression arguments will contain\ncolumns to be collected. A clean fix would be to create aggregation functions upfront and let\nthem interpret the arguments. However, until that happens, working-around by assuming that first\nargument contains all the columns (to be used by DataSchemaPruner), which is true for all functions.\n\nA side effect would be that DataSchemaPruner won't work for DistinctCountThetaSketchAggregatinoFunction.\nBut since this pruner is only for schema mis-matches, and not for performance, there should not be\nan impact."}, "afterCommit": {"oid": "364956757d9e284cdeaccde3091b1dd51c5deda7", "author": {"user": {"login": "mayankshriv", "name": "Mayank Shrivastava"}}, "url": "https://github.com/apache/pinot/commit/364956757d9e284cdeaccde3091b1dd51c5deda7", "committedDate": "2020-05-14T01:59:43Z", "message": "Temporary work-around to bypass function arguments being treated as expressions with columns.\n\nOnly aggregation functions have the knowledge on how to interpret their arguments.\nHowever, the assumption within ServerQueryRequest is that all expression arguments will contain\ncolumns to be collected. A clean fix would be to create aggregation functions upfront and let\nthem interpret the arguments. However, until that happens, working-around by assuming that first\nargument contains all the columns (to be used by DataSchemaPruner), which is true for all functions.\n\nA side effect would be that DataSchemaPruner won't work for DistinctCountThetaSketchAggregatinoFunction.\nBut since this pruner is only for schema mis-matches, and not for performance, there should not be\nan impact."}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1043, "cost": 1, "resetAt": "2021-10-28T18:00:02Z"}}}