{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY4ODYxMzQ0", "number": 5027, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQxOToyNDo0NVrODcCDxw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQxOToyNDo0NVrODcCDxw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwNzIwNDU1OnYy", "diffSide": "RIGHT", "path": "pinot-integration-tests/src/test/java/org/apache/pinot/integration/tests/ServerStarterIntegrationTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQxOToyNDo0NVrOFj3Czw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQxOTo0ODoxMVrOFj3wig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzE0NjMxOQ==", "bodyText": "It is better to put stop() before assertion() to stop the HelixServerStarter. Otherwise, if the assertion fails, it will cause cascading failures to other tests as well: which just caused confusion to real issues.", "url": "https://github.com/apache/pinot/pull/5027#discussion_r373146319", "createdAt": "2020-01-30T19:24:45Z", "author": {"login": "chenboat"}, "path": "pinot-integration-tests/src/test/java/org/apache/pinot/integration/tests/ServerStarterIntegrationTest.java", "diffHunk": "@@ -33,119 +29,105 @@\n import org.testng.annotations.BeforeClass;\n import org.testng.annotations.Test;\n \n-import static org.apache.pinot.common.utils.CommonConstants.Helix.KEY_OF_SERVER_NETTY_HOST;\n-import static org.apache.pinot.common.utils.CommonConstants.Helix.KEY_OF_SERVER_NETTY_PORT;\n+import static org.apache.pinot.common.utils.CommonConstants.Helix.*;\n import static org.apache.pinot.common.utils.CommonConstants.Server.CONFIG_OF_INSTANCE_ID;\n import static org.testng.Assert.assertEquals;\n \n \n public class ServerStarterIntegrationTest extends ControllerTest {\n-  public static final String SERVER1 = \"Server1\";\n+  private static final String CUSTOM_INSTANCE_ID = \"CustomInstance\";\n+  private static final String CUSTOM_HOST = \"CustomHost\";\n+  private static final int CUSTOM_PORT = 10001;\n \n   @BeforeClass\n-  public void setUp()\n-      throws Exception {\n+  public void setUp() {\n     startZk();\n     startController();\n   }\n \n   @AfterClass\n-  public void tearDown()\n-      throws Exception {\n+  public void tearDown() {\n     stopController();\n     stopZk();\n   }\n \n-  private void verifyZkConfigData(HelixServerStarter helixServerStarter, String expectedInstanceName,\n-      String expectedHostname, String expectedPort) {\n-    // Verify the serverId, host and port are set correctly in Zk.\n-    HelixManager helixManager = helixServerStarter.getHelixManager();\n-    PropertyKey.Builder keyBuilder = helixManager.getHelixDataAccessor().keyBuilder();\n-    InstanceConfig config = helixManager.getHelixDataAccessor().\n-        getProperty(keyBuilder.instanceConfig(helixServerStarter.getHelixManager().getInstanceName()));\n-    helixServerStarter.stop();\n+  private void verifyInstanceConfig(HelixServerStarter helixServerStarter, String expectedInstanceId,\n+      String expectedHost, int expectedPort) {\n+    assertEquals(helixServerStarter.getInstanceId(), expectedInstanceId);\n+\n+    InstanceConfig instanceConfig =\n+        _helixDataAccessor.getProperty(_helixDataAccessor.keyBuilder().instanceConfig(expectedInstanceId));\n+    assertEquals(instanceConfig.getHostName(), expectedHost);\n+    assertEquals(Integer.parseInt(instanceConfig.getPort()), expectedPort);\n \n-    assertEquals(config.getInstanceName(), expectedInstanceName);\n-    // By default (auto joined instances), server instance name is of format: {@code Server_<hostname>_<port>}, e.g.\n-    // {@code Server_localhost_12345}, hostname is of format: {@code Server_<hostname>}, e.g. {@code Server_localhost}.\n-    // More details refer to the class ServerInstance.\n-    assertEquals(config.getHostName(), expectedHostname);\n-    assertEquals(config.getPort(), expectedPort);\n+    helixServerStarter.stop();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b4bef2f89e3ebde48202db0ef827f8700714d2bc"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzE1ODAyNg==", "bodyText": "Make sense, changed", "url": "https://github.com/apache/pinot/pull/5027#discussion_r373158026", "createdAt": "2020-01-30T19:48:11Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-integration-tests/src/test/java/org/apache/pinot/integration/tests/ServerStarterIntegrationTest.java", "diffHunk": "@@ -33,119 +29,105 @@\n import org.testng.annotations.BeforeClass;\n import org.testng.annotations.Test;\n \n-import static org.apache.pinot.common.utils.CommonConstants.Helix.KEY_OF_SERVER_NETTY_HOST;\n-import static org.apache.pinot.common.utils.CommonConstants.Helix.KEY_OF_SERVER_NETTY_PORT;\n+import static org.apache.pinot.common.utils.CommonConstants.Helix.*;\n import static org.apache.pinot.common.utils.CommonConstants.Server.CONFIG_OF_INSTANCE_ID;\n import static org.testng.Assert.assertEquals;\n \n \n public class ServerStarterIntegrationTest extends ControllerTest {\n-  public static final String SERVER1 = \"Server1\";\n+  private static final String CUSTOM_INSTANCE_ID = \"CustomInstance\";\n+  private static final String CUSTOM_HOST = \"CustomHost\";\n+  private static final int CUSTOM_PORT = 10001;\n \n   @BeforeClass\n-  public void setUp()\n-      throws Exception {\n+  public void setUp() {\n     startZk();\n     startController();\n   }\n \n   @AfterClass\n-  public void tearDown()\n-      throws Exception {\n+  public void tearDown() {\n     stopController();\n     stopZk();\n   }\n \n-  private void verifyZkConfigData(HelixServerStarter helixServerStarter, String expectedInstanceName,\n-      String expectedHostname, String expectedPort) {\n-    // Verify the serverId, host and port are set correctly in Zk.\n-    HelixManager helixManager = helixServerStarter.getHelixManager();\n-    PropertyKey.Builder keyBuilder = helixManager.getHelixDataAccessor().keyBuilder();\n-    InstanceConfig config = helixManager.getHelixDataAccessor().\n-        getProperty(keyBuilder.instanceConfig(helixServerStarter.getHelixManager().getInstanceName()));\n-    helixServerStarter.stop();\n+  private void verifyInstanceConfig(HelixServerStarter helixServerStarter, String expectedInstanceId,\n+      String expectedHost, int expectedPort) {\n+    assertEquals(helixServerStarter.getInstanceId(), expectedInstanceId);\n+\n+    InstanceConfig instanceConfig =\n+        _helixDataAccessor.getProperty(_helixDataAccessor.keyBuilder().instanceConfig(expectedInstanceId));\n+    assertEquals(instanceConfig.getHostName(), expectedHost);\n+    assertEquals(Integer.parseInt(instanceConfig.getPort()), expectedPort);\n \n-    assertEquals(config.getInstanceName(), expectedInstanceName);\n-    // By default (auto joined instances), server instance name is of format: {@code Server_<hostname>_<port>}, e.g.\n-    // {@code Server_localhost_12345}, hostname is of format: {@code Server_<hostname>}, e.g. {@code Server_localhost}.\n-    // More details refer to the class ServerInstance.\n-    assertEquals(config.getHostName(), expectedHostname);\n-    assertEquals(config.getPort(), expectedPort);\n+    helixServerStarter.stop();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzE0NjMxOQ=="}, "originalCommit": {"oid": "b4bef2f89e3ebde48202db0ef827f8700714d2bc"}, "originalPosition": 71}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3655, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}