{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkyODAwMzcy", "number": 5177, "reviewThreads": {"totalCount": 29, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxODozNDoyMlrODq67MQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQwMTowNDo1M1rODs6IHg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2MzMyMjA5OnYy", "diffSide": "RIGHT", "path": "pinot-core/src/main/java/org/apache/pinot/core/segment/index/readers/text/LuceneTextIndexReader.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxODozNDoyMlrOF698JQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxNzoxNToxN1rOF9z7pA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzM3NjU0OQ==", "bodyText": "Please use computeIfAbsent instead", "url": "https://github.com/apache/pinot/pull/5177#discussion_r397376549", "createdAt": "2020-03-24T18:34:22Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/segment/index/readers/text/LuceneTextIndexReader.java", "diffHunk": "@@ -148,8 +153,12 @@ private MutableRoaringBitmap getPinotDocIds(MutableRoaringBitmap luceneDocIds) {\n     try {\n       while (luceneDocIDIterator.hasNext()) {\n         int luceneDocId = luceneDocIDIterator.next();\n-        Document document = _indexSearcher.doc(luceneDocId);\n-        int pinotDocId = Integer.valueOf(document.get(LuceneTextIndexCreator.LUCENE_INDEX_DOC_ID_COLUMN_NAME));\n+        Integer pinotDocId = _luceneDocIDToPinotDocIDCache.get(luceneDocId);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a9d171a0a93a946fbf781f2cf541cb796f9950b5"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDM0NjY3Nw==", "bodyText": "I am not using this method anymore. The mapping is built once during segment load and memory mapped.", "url": "https://github.com/apache/pinot/pull/5177#discussion_r400346677", "createdAt": "2020-03-30T16:56:38Z", "author": {"login": "siddharthteotia"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/segment/index/readers/text/LuceneTextIndexReader.java", "diffHunk": "@@ -148,8 +153,12 @@ private MutableRoaringBitmap getPinotDocIds(MutableRoaringBitmap luceneDocIds) {\n     try {\n       while (luceneDocIDIterator.hasNext()) {\n         int luceneDocId = luceneDocIDIterator.next();\n-        Document document = _indexSearcher.doc(luceneDocId);\n-        int pinotDocId = Integer.valueOf(document.get(LuceneTextIndexCreator.LUCENE_INDEX_DOC_ID_COLUMN_NAME));\n+        Integer pinotDocId = _luceneDocIDToPinotDocIDCache.get(luceneDocId);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzM3NjU0OQ=="}, "originalCommit": {"oid": "a9d171a0a93a946fbf781f2cf541cb796f9950b5"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDM1ODMwOA==", "bodyText": "Also added a TODO to consider building mapping on-the-fly during query processing -- we can have two methods and make it configurable based on number of docs per segment.", "url": "https://github.com/apache/pinot/pull/5177#discussion_r400358308", "createdAt": "2020-03-30T17:15:17Z", "author": {"login": "siddharthteotia"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/segment/index/readers/text/LuceneTextIndexReader.java", "diffHunk": "@@ -148,8 +153,12 @@ private MutableRoaringBitmap getPinotDocIds(MutableRoaringBitmap luceneDocIds) {\n     try {\n       while (luceneDocIDIterator.hasNext()) {\n         int luceneDocId = luceneDocIDIterator.next();\n-        Document document = _indexSearcher.doc(luceneDocId);\n-        int pinotDocId = Integer.valueOf(document.get(LuceneTextIndexCreator.LUCENE_INDEX_DOC_ID_COLUMN_NAME));\n+        Integer pinotDocId = _luceneDocIDToPinotDocIDCache.get(luceneDocId);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzM3NjU0OQ=="}, "originalCommit": {"oid": "a9d171a0a93a946fbf781f2cf541cb796f9950b5"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4Mjc0OTAzOnYy", "diffSide": "RIGHT", "path": "pinot-core/src/test/java/org/apache/pinot/queries/TestTextSearchQueries.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxNzoxNzo0M1rOF90CBQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxNzo1MTo0N1rOF91Xpw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDM1OTk0MQ==", "bodyText": "Revert the change in this file?\nAlso suggesting rename the test to TextSearchQueriesTest for naming convention.", "url": "https://github.com/apache/pinot/pull/5177#discussion_r400359941", "createdAt": "2020-03-30T17:17:43Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-core/src/test/java/org/apache/pinot/queries/TestTextSearchQueries.java", "diffHunk": "@@ -89,7 +91,7 @@\n   private RecordReader _recordReader;\n   Schema _schema;\n \n-  private List<IndexSegment> _indexSegments = new ArrayList<>(1);\n+  private static List<IndexSegment> _indexSegments = new ArrayList<>(1);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0db1d2e4a3623f87297fd652c66d4b7600594f9d"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDM4MTg2Mw==", "bodyText": "oops. Sorry, this was due to local debugging. Will remove and also reformat", "url": "https://github.com/apache/pinot/pull/5177#discussion_r400381863", "createdAt": "2020-03-30T17:51:47Z", "author": {"login": "siddharthteotia"}, "path": "pinot-core/src/test/java/org/apache/pinot/queries/TestTextSearchQueries.java", "diffHunk": "@@ -89,7 +91,7 @@\n   private RecordReader _recordReader;\n   Schema _schema;\n \n-  private List<IndexSegment> _indexSegments = new ArrayList<>(1);\n+  private static List<IndexSegment> _indexSegments = new ArrayList<>(1);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDM1OTk0MQ=="}, "originalCommit": {"oid": "0db1d2e4a3623f87297fd652c66d4b7600594f9d"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4Mjc1MTM2OnYy", "diffSide": "RIGHT", "path": "pinot-core/src/main/java/org/apache/pinot/core/segment/index/readers/text/LuceneTextIndexReader.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxNzoxODoxM1rOF90DcA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQyMzoyNDozNVrOF9_1bw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDM2MDMwNA==", "bodyText": "private final", "url": "https://github.com/apache/pinot/pull/5177#discussion_r400360304", "createdAt": "2020-03-30T17:18:13Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/segment/index/readers/text/LuceneTextIndexReader.java", "diffHunk": "@@ -51,6 +54,9 @@\n   private final IndexSearcher _indexSearcher;\n   private final QueryParser _queryParser;\n   private final String _column;\n+  private DocIdReaderWriter _docIdReaderWriter;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0db1d2e4a3623f87297fd652c66d4b7600594f9d"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDU1MzMyNw==", "bodyText": "done", "url": "https://github.com/apache/pinot/pull/5177#discussion_r400553327", "createdAt": "2020-03-30T23:24:35Z", "author": {"login": "siddharthteotia"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/segment/index/readers/text/LuceneTextIndexReader.java", "diffHunk": "@@ -51,6 +54,9 @@\n   private final IndexSearcher _indexSearcher;\n   private final QueryParser _queryParser;\n   private final String _column;\n+  private DocIdReaderWriter _docIdReaderWriter;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDM2MDMwNA=="}, "originalCommit": {"oid": "0db1d2e4a3623f87297fd652c66d4b7600594f9d"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4Mjc5NTcwOnYy", "diffSide": "RIGHT", "path": "pinot-core/src/main/java/org/apache/pinot/core/segment/index/readers/text/LuceneTextIndexReader.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxNzoyOTowOVrOF90fDg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQyMzoyMjo1MVrOF9_zBA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDM2NzM3NA==", "bodyText": "We build the mapping every time we load the index? You saved the mapping into a file right?", "url": "https://github.com/apache/pinot/pull/5177#discussion_r400367374", "createdAt": "2020-03-30T17:29:09Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/segment/index/readers/text/LuceneTextIndexReader.java", "diffHunk": "@@ -70,6 +76,10 @@ public LuceneTextIndexReader(String column, File segmentIndexDir) {\n       // Disable Lucene query result cache. While it helps a lot with performance for\n       // repeated queries, on the downside it cause heap issues.\n       _indexSearcher.setQueryCache(null);\n+      // TODO: consider using a threshold of num docs per segment to decide between building\n+      // mapping file upfront on segment load v/s on-the-fly during query processing\n+      _docIdReaderWriter = new DocIdReaderWriter(segmentIndexDir, _column, numDocs);\n+      _docIdReaderWriter.buildDocIdMapping(numDocs);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0db1d2e4a3623f87297fd652c66d4b7600594f9d"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDU1MjI5OA==", "bodyText": "We check for existence and return.", "url": "https://github.com/apache/pinot/pull/5177#discussion_r400552298", "createdAt": "2020-03-30T23:21:32Z", "author": {"login": "siddharthteotia"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/segment/index/readers/text/LuceneTextIndexReader.java", "diffHunk": "@@ -70,6 +76,10 @@ public LuceneTextIndexReader(String column, File segmentIndexDir) {\n       // Disable Lucene query result cache. While it helps a lot with performance for\n       // repeated queries, on the downside it cause heap issues.\n       _indexSearcher.setQueryCache(null);\n+      // TODO: consider using a threshold of num docs per segment to decide between building\n+      // mapping file upfront on segment load v/s on-the-fly during query processing\n+      _docIdReaderWriter = new DocIdReaderWriter(segmentIndexDir, _column, numDocs);\n+      _docIdReaderWriter.buildDocIdMapping(numDocs);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDM2NzM3NA=="}, "originalCommit": {"oid": "0db1d2e4a3623f87297fd652c66d4b7600594f9d"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDU1MjcwOA==", "bodyText": "Also, I explored doing this in TextIndexHandler. But that is not good since it requires to open the lucene index, create searcher twice (both in handler and here anyway for query processing). I think it is better to avoid that and just open the lucene index reader and searcher just once per index.", "url": "https://github.com/apache/pinot/pull/5177#discussion_r400552708", "createdAt": "2020-03-30T23:22:51Z", "author": {"login": "siddharthteotia"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/segment/index/readers/text/LuceneTextIndexReader.java", "diffHunk": "@@ -70,6 +76,10 @@ public LuceneTextIndexReader(String column, File segmentIndexDir) {\n       // Disable Lucene query result cache. While it helps a lot with performance for\n       // repeated queries, on the downside it cause heap issues.\n       _indexSearcher.setQueryCache(null);\n+      // TODO: consider using a threshold of num docs per segment to decide between building\n+      // mapping file upfront on segment load v/s on-the-fly during query processing\n+      _docIdReaderWriter = new DocIdReaderWriter(segmentIndexDir, _column, numDocs);\n+      _docIdReaderWriter.buildDocIdMapping(numDocs);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDM2NzM3NA=="}, "originalCommit": {"oid": "0db1d2e4a3623f87297fd652c66d4b7600594f9d"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4MjgxMDA0OnYy", "diffSide": "RIGHT", "path": "pinot-core/src/main/java/org/apache/pinot/core/segment/index/readers/text/LuceneTextIndexReader.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxNzozMjo0M1rOF90oBA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxNzozMjo0M1rOF90oBA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDM2OTY2OA==", "bodyText": "For segment refresh, this file should not exist as we delete the old segment", "url": "https://github.com/apache/pinot/pull/5177#discussion_r400369668", "createdAt": "2020-03-30T17:32:43Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/segment/index/readers/text/LuceneTextIndexReader.java", "diffHunk": "@@ -169,5 +178,49 @@ public void close()\n       throws IOException {\n     _indexReader.close();\n     _indexDirectory.close();\n+    _docIdReaderWriter.close();\n+  }\n+\n+  private class DocIdReaderWriter implements Closeable {\n+    private PinotDataBuffer _buffer;\n+\n+    DocIdReaderWriter(File segmentIndexDir, String column, int numDocs) throws Exception {\n+      int length = Integer.BYTES * numDocs;\n+      File docIdMappingFile = new File(SegmentDirectoryPaths.findSegmentDirectory(segmentIndexDir),\n+          column + LUCENE_TEXT_INDEX_DOCID_MAPPING_FILE_EXTENSION);\n+      // For newly added segments, this file will not exist.\n+      // For segment refresh, segment reload and server restart, file will exist,\n+      // but we don't know if we are here for refresh v/s reload v/s restart.\n+      // In case of refresh, we have to build the mapping again, but in case of", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0db1d2e4a3623f87297fd652c66d4b7600594f9d"}, "originalPosition": 97}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4MjgxNTEwOnYy", "diffSide": "RIGHT", "path": "pinot-core/src/main/java/org/apache/pinot/core/segment/index/readers/text/LuceneTextIndexReader.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxNzozMzo0OFrOF90q_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQyMzoyNTozMlrOF9_2uQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDM3MDQyOQ==", "bodyText": "For better performance, I would probably choose native order as this index is always local to one instance?", "url": "https://github.com/apache/pinot/pull/5177#discussion_r400370429", "createdAt": "2020-03-30T17:33:48Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/segment/index/readers/text/LuceneTextIndexReader.java", "diffHunk": "@@ -169,5 +178,49 @@ public void close()\n       throws IOException {\n     _indexReader.close();\n     _indexDirectory.close();\n+    _docIdReaderWriter.close();\n+  }\n+\n+  private class DocIdReaderWriter implements Closeable {\n+    private PinotDataBuffer _buffer;\n+\n+    DocIdReaderWriter(File segmentIndexDir, String column, int numDocs) throws Exception {\n+      int length = Integer.BYTES * numDocs;\n+      File docIdMappingFile = new File(SegmentDirectoryPaths.findSegmentDirectory(segmentIndexDir),\n+          column + LUCENE_TEXT_INDEX_DOCID_MAPPING_FILE_EXTENSION);\n+      // For newly added segments, this file will not exist.\n+      // For segment refresh, segment reload and server restart, file will exist,\n+      // but we don't know if we are here for refresh v/s reload v/s restart.\n+      // In case of refresh, we have to build the mapping again, but in case of\n+      // reload and restart, we don't. Also, reload has a sub-case where this text index\n+      // was indeed created during reload (user enabled on existing or newly added column).\n+      // Since there is no way to distinguish why we are here, we build the mapping again\n+      // regardless.\n+      // TODO: see if we can prefetch the pages\n+      _buffer =\n+          PinotDataBuffer.mapFile(docIdMappingFile, false, 0, length, ByteOrder.BIG_ENDIAN, getClass().getSimpleName());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0db1d2e4a3623f87297fd652c66d4b7600594f9d"}, "originalPosition": 104}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDU1MzY1Nw==", "bodyText": "Yes, as discussed using Little Endian and indicated in the comments too. We are unlikely to run on Solaris/Sparc so using LE is fine which is the case on Linux/x86", "url": "https://github.com/apache/pinot/pull/5177#discussion_r400553657", "createdAt": "2020-03-30T23:25:32Z", "author": {"login": "siddharthteotia"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/segment/index/readers/text/LuceneTextIndexReader.java", "diffHunk": "@@ -169,5 +178,49 @@ public void close()\n       throws IOException {\n     _indexReader.close();\n     _indexDirectory.close();\n+    _docIdReaderWriter.close();\n+  }\n+\n+  private class DocIdReaderWriter implements Closeable {\n+    private PinotDataBuffer _buffer;\n+\n+    DocIdReaderWriter(File segmentIndexDir, String column, int numDocs) throws Exception {\n+      int length = Integer.BYTES * numDocs;\n+      File docIdMappingFile = new File(SegmentDirectoryPaths.findSegmentDirectory(segmentIndexDir),\n+          column + LUCENE_TEXT_INDEX_DOCID_MAPPING_FILE_EXTENSION);\n+      // For newly added segments, this file will not exist.\n+      // For segment refresh, segment reload and server restart, file will exist,\n+      // but we don't know if we are here for refresh v/s reload v/s restart.\n+      // In case of refresh, we have to build the mapping again, but in case of\n+      // reload and restart, we don't. Also, reload has a sub-case where this text index\n+      // was indeed created during reload (user enabled on existing or newly added column).\n+      // Since there is no way to distinguish why we are here, we build the mapping again\n+      // regardless.\n+      // TODO: see if we can prefetch the pages\n+      _buffer =\n+          PinotDataBuffer.mapFile(docIdMappingFile, false, 0, length, ByteOrder.BIG_ENDIAN, getClass().getSimpleName());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDM3MDQyOQ=="}, "originalCommit": {"oid": "0db1d2e4a3623f87297fd652c66d4b7600594f9d"}, "originalPosition": 104}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4MjgyNDk2OnYy", "diffSide": "RIGHT", "path": "pinot-core/src/main/java/org/apache/pinot/core/segment/index/readers/text/LuceneTextIndexReader.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxNzozNjoxNFrOF90xGQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQyMzoyNTozN1rOF9_20Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDM3MTk5Mw==", "bodyText": "Please include the column name into the description (last argument) to distinguish different columns", "url": "https://github.com/apache/pinot/pull/5177#discussion_r400371993", "createdAt": "2020-03-30T17:36:14Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/segment/index/readers/text/LuceneTextIndexReader.java", "diffHunk": "@@ -169,5 +178,49 @@ public void close()\n       throws IOException {\n     _indexReader.close();\n     _indexDirectory.close();\n+    _docIdReaderWriter.close();\n+  }\n+\n+  private class DocIdReaderWriter implements Closeable {\n+    private PinotDataBuffer _buffer;\n+\n+    DocIdReaderWriter(File segmentIndexDir, String column, int numDocs) throws Exception {\n+      int length = Integer.BYTES * numDocs;\n+      File docIdMappingFile = new File(SegmentDirectoryPaths.findSegmentDirectory(segmentIndexDir),\n+          column + LUCENE_TEXT_INDEX_DOCID_MAPPING_FILE_EXTENSION);\n+      // For newly added segments, this file will not exist.\n+      // For segment refresh, segment reload and server restart, file will exist,\n+      // but we don't know if we are here for refresh v/s reload v/s restart.\n+      // In case of refresh, we have to build the mapping again, but in case of\n+      // reload and restart, we don't. Also, reload has a sub-case where this text index\n+      // was indeed created during reload (user enabled on existing or newly added column).\n+      // Since there is no way to distinguish why we are here, we build the mapping again\n+      // regardless.\n+      // TODO: see if we can prefetch the pages\n+      _buffer =\n+          PinotDataBuffer.mapFile(docIdMappingFile, false, 0, length, ByteOrder.BIG_ENDIAN, getClass().getSimpleName());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0db1d2e4a3623f87297fd652c66d4b7600594f9d"}, "originalPosition": 104}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDU1MzY4MQ==", "bodyText": "done", "url": "https://github.com/apache/pinot/pull/5177#discussion_r400553681", "createdAt": "2020-03-30T23:25:37Z", "author": {"login": "siddharthteotia"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/segment/index/readers/text/LuceneTextIndexReader.java", "diffHunk": "@@ -169,5 +178,49 @@ public void close()\n       throws IOException {\n     _indexReader.close();\n     _indexDirectory.close();\n+    _docIdReaderWriter.close();\n+  }\n+\n+  private class DocIdReaderWriter implements Closeable {\n+    private PinotDataBuffer _buffer;\n+\n+    DocIdReaderWriter(File segmentIndexDir, String column, int numDocs) throws Exception {\n+      int length = Integer.BYTES * numDocs;\n+      File docIdMappingFile = new File(SegmentDirectoryPaths.findSegmentDirectory(segmentIndexDir),\n+          column + LUCENE_TEXT_INDEX_DOCID_MAPPING_FILE_EXTENSION);\n+      // For newly added segments, this file will not exist.\n+      // For segment refresh, segment reload and server restart, file will exist,\n+      // but we don't know if we are here for refresh v/s reload v/s restart.\n+      // In case of refresh, we have to build the mapping again, but in case of\n+      // reload and restart, we don't. Also, reload has a sub-case where this text index\n+      // was indeed created during reload (user enabled on existing or newly added column).\n+      // Since there is no way to distinguish why we are here, we build the mapping again\n+      // regardless.\n+      // TODO: see if we can prefetch the pages\n+      _buffer =\n+          PinotDataBuffer.mapFile(docIdMappingFile, false, 0, length, ByteOrder.BIG_ENDIAN, getClass().getSimpleName());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDM3MTk5Mw=="}, "originalCommit": {"oid": "0db1d2e4a3623f87297fd652c66d4b7600594f9d"}, "originalPosition": 104}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4MjgyODQ4OnYy", "diffSide": "RIGHT", "path": "pinot-core/src/main/java/org/apache/pinot/core/segment/index/readers/text/LuceneTextIndexReader.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxNzozNzowN1rOF90zPw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQyMzoyNTo0MVrOF9_27w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDM3MjU0Mw==", "bodyText": "Throw this exception out instead of logging an ERROR. If this step fails, JVM will crash when reading the buffer.", "url": "https://github.com/apache/pinot/pull/5177#discussion_r400372543", "createdAt": "2020-03-30T17:37:07Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/segment/index/readers/text/LuceneTextIndexReader.java", "diffHunk": "@@ -169,5 +178,49 @@ public void close()\n       throws IOException {\n     _indexReader.close();\n     _indexDirectory.close();\n+    _docIdReaderWriter.close();\n+  }\n+\n+  private class DocIdReaderWriter implements Closeable {\n+    private PinotDataBuffer _buffer;\n+\n+    DocIdReaderWriter(File segmentIndexDir, String column, int numDocs) throws Exception {\n+      int length = Integer.BYTES * numDocs;\n+      File docIdMappingFile = new File(SegmentDirectoryPaths.findSegmentDirectory(segmentIndexDir),\n+          column + LUCENE_TEXT_INDEX_DOCID_MAPPING_FILE_EXTENSION);\n+      // For newly added segments, this file will not exist.\n+      // For segment refresh, segment reload and server restart, file will exist,\n+      // but we don't know if we are here for refresh v/s reload v/s restart.\n+      // In case of refresh, we have to build the mapping again, but in case of\n+      // reload and restart, we don't. Also, reload has a sub-case where this text index\n+      // was indeed created during reload (user enabled on existing or newly added column).\n+      // Since there is no way to distinguish why we are here, we build the mapping again\n+      // regardless.\n+      // TODO: see if we can prefetch the pages\n+      _buffer =\n+          PinotDataBuffer.mapFile(docIdMappingFile, false, 0, length, ByteOrder.BIG_ENDIAN, getClass().getSimpleName());\n+    }\n+\n+    public void buildDocIdMapping(int numDocs) {\n+      for (int i = 0; i < numDocs; i++) {\n+        try {\n+          Document document = _indexSearcher.doc(i);\n+          int pinotDocId = Integer.valueOf(document.get(LuceneTextIndexCreator.LUCENE_INDEX_DOC_ID_COLUMN_NAME));\n+          _buffer.putInt(i * Integer.BYTES, pinotDocId);\n+        } catch (Exception e) {\n+          LOGGER.error(\"Failed to build doc id mapping during segment load for column:{},docID:{},error:{}. Will continue and build mapping on the fly\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0db1d2e4a3623f87297fd652c66d4b7600594f9d"}, "originalPosition": 114}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDU1MzcxMQ==", "bodyText": "done", "url": "https://github.com/apache/pinot/pull/5177#discussion_r400553711", "createdAt": "2020-03-30T23:25:41Z", "author": {"login": "siddharthteotia"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/segment/index/readers/text/LuceneTextIndexReader.java", "diffHunk": "@@ -169,5 +178,49 @@ public void close()\n       throws IOException {\n     _indexReader.close();\n     _indexDirectory.close();\n+    _docIdReaderWriter.close();\n+  }\n+\n+  private class DocIdReaderWriter implements Closeable {\n+    private PinotDataBuffer _buffer;\n+\n+    DocIdReaderWriter(File segmentIndexDir, String column, int numDocs) throws Exception {\n+      int length = Integer.BYTES * numDocs;\n+      File docIdMappingFile = new File(SegmentDirectoryPaths.findSegmentDirectory(segmentIndexDir),\n+          column + LUCENE_TEXT_INDEX_DOCID_MAPPING_FILE_EXTENSION);\n+      // For newly added segments, this file will not exist.\n+      // For segment refresh, segment reload and server restart, file will exist,\n+      // but we don't know if we are here for refresh v/s reload v/s restart.\n+      // In case of refresh, we have to build the mapping again, but in case of\n+      // reload and restart, we don't. Also, reload has a sub-case where this text index\n+      // was indeed created during reload (user enabled on existing or newly added column).\n+      // Since there is no way to distinguish why we are here, we build the mapping again\n+      // regardless.\n+      // TODO: see if we can prefetch the pages\n+      _buffer =\n+          PinotDataBuffer.mapFile(docIdMappingFile, false, 0, length, ByteOrder.BIG_ENDIAN, getClass().getSimpleName());\n+    }\n+\n+    public void buildDocIdMapping(int numDocs) {\n+      for (int i = 0; i < numDocs; i++) {\n+        try {\n+          Document document = _indexSearcher.doc(i);\n+          int pinotDocId = Integer.valueOf(document.get(LuceneTextIndexCreator.LUCENE_INDEX_DOC_ID_COLUMN_NAME));\n+          _buffer.putInt(i * Integer.BYTES, pinotDocId);\n+        } catch (Exception e) {\n+          LOGGER.error(\"Failed to build doc id mapping during segment load for column:{},docID:{},error:{}. Will continue and build mapping on the fly\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDM3MjU0Mw=="}, "originalCommit": {"oid": "0db1d2e4a3623f87297fd652c66d4b7600594f9d"}, "originalPosition": 114}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4Mzk5NTAwOnYy", "diffSide": "RIGHT", "path": "pinot-core/src/test/java/org/apache/pinot/queries/TextSearchQueriesTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQyMzozNzoxNlrOF-AF2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQwMDozNDozNVrOF-BJDw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDU1NzUyOA==", "bodyText": "Remove?", "url": "https://github.com/apache/pinot/pull/5177#discussion_r400557528", "createdAt": "2020-03-30T23:37:16Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-core/src/test/java/org/apache/pinot/queries/TextSearchQueriesTest.java", "diffHunk": "@@ -18,6 +18,7 @@\n  */\n package org.apache.pinot.queries;\n \n+import com.google.common.base.Stopwatch;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f6ad20cd28fafb5b63f9526b6b0a942c552ef4b"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDU3NDczNQ==", "bodyText": "Done", "url": "https://github.com/apache/pinot/pull/5177#discussion_r400574735", "createdAt": "2020-03-31T00:34:35Z", "author": {"login": "siddharthteotia"}, "path": "pinot-core/src/test/java/org/apache/pinot/queries/TextSearchQueriesTest.java", "diffHunk": "@@ -18,6 +18,7 @@\n  */\n package org.apache.pinot.queries;\n \n+import com.google.common.base.Stopwatch;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDU1NzUyOA=="}, "originalCommit": {"oid": "8f6ad20cd28fafb5b63f9526b6b0a942c552ef4b"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4NDAwMjI4OnYy", "diffSide": "RIGHT", "path": "pinot-core/src/main/java/org/apache/pinot/core/segment/index/loader/invertedindex/TextIndexHandler.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQyMzo0MDozOFrOF-AKRw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQwMDozNDozOVrOF-BJKQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDU1ODY2Mw==", "bodyText": "By convention, we use indexDir for top level directory, and segmentDirectory for the direct directory (indexDir for v1, or v3 for v3). If you follow the same naming convention, it will be clearer.", "url": "https://github.com/apache/pinot/pull/5177#discussion_r400558663", "createdAt": "2020-03-30T23:40:38Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/segment/index/loader/invertedindex/TextIndexHandler.java", "diffHunk": "@@ -154,6 +152,11 @@ private void createTextIndexForColumn(ColumnMetadata columnMetadata)\n     int numDocs = columnMetadata.getTotalDocs();\n     LOGGER.info(\"Creating new text index for column: {} in segment: {}\", column, _segmentName);\n     File segmentIndexDir = SegmentDirectoryPaths.segmentDirectoryFor(_indexDir, _segmentVersion);\n+    // The handlers are always invoked by the preprocessor. Before this ImmutableSegmentLoader would have already", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f6ad20cd28fafb5b63f9526b6b0a942c552ef4b"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDU3NDc2MQ==", "bodyText": "Done. Wasn't aware of this.", "url": "https://github.com/apache/pinot/pull/5177#discussion_r400574761", "createdAt": "2020-03-31T00:34:39Z", "author": {"login": "siddharthteotia"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/segment/index/loader/invertedindex/TextIndexHandler.java", "diffHunk": "@@ -154,6 +152,11 @@ private void createTextIndexForColumn(ColumnMetadata columnMetadata)\n     int numDocs = columnMetadata.getTotalDocs();\n     LOGGER.info(\"Creating new text index for column: {} in segment: {}\", column, _segmentName);\n     File segmentIndexDir = SegmentDirectoryPaths.segmentDirectoryFor(_indexDir, _segmentVersion);\n+    // The handlers are always invoked by the preprocessor. Before this ImmutableSegmentLoader would have already", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDU1ODY2Mw=="}, "originalCommit": {"oid": "8f6ad20cd28fafb5b63f9526b6b0a942c552ef4b"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4NDAwNTE5OnYy", "diffSide": "RIGHT", "path": "pinot-core/src/main/java/org/apache/pinot/core/segment/index/loader/invertedindex/TextIndexHandler.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQyMzo0MjoxMlrOF-AMEQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQwMDozNDo1MFrOF-BJWw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDU1OTEyMQ==", "bodyText": "Not related to this pr, but seems this file needs reformat", "url": "https://github.com/apache/pinot/pull/5177#discussion_r400559121", "createdAt": "2020-03-30T23:42:12Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/segment/index/loader/invertedindex/TextIndexHandler.java", "diffHunk": "@@ -61,8 +61,26 @@\n import static org.apache.pinot.core.segment.creator.impl.V1Constants.MetadataKeys.Column.getKeyFor;\n \n \n+/**\n+ * Helper class for text indexes used by {@link org.apache.pinot.core.segment.index.loader.SegmentPreProcessor}.\n+ * to create text index for column during segment load time. Currently text index is always\n+ * created (if enabled on a column) during segment generation\n+ *\n+ * (1) A new segment with text index is created/refreshed. Server loads the segment. The handler\n+ * detects the existence of text index and returns.\n+ *\n+ * (2) A reload is issued on an existing segment with existing text index. The handler\n+ * detects the existence of text index and returns.\n+ *\n+ * (3) A reload is issued on an existing segment after text index is enabled on an existing\n+ * column. Read the forward index to create text index.\n+ *\n+ * (4) A reload is issued on an existing segment after text index is enabled on a newly\n+ * added column. In this case, the default column handler would have taken care of adding\n+ * forward index for the new column. Read the forward index to create text index.\n+ */\n public class TextIndexHandler {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f6ad20cd28fafb5b63f9526b6b0a942c552ef4b"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDU3NDgxMQ==", "bodyText": "done", "url": "https://github.com/apache/pinot/pull/5177#discussion_r400574811", "createdAt": "2020-03-31T00:34:50Z", "author": {"login": "siddharthteotia"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/segment/index/loader/invertedindex/TextIndexHandler.java", "diffHunk": "@@ -61,8 +61,26 @@\n import static org.apache.pinot.core.segment.creator.impl.V1Constants.MetadataKeys.Column.getKeyFor;\n \n \n+/**\n+ * Helper class for text indexes used by {@link org.apache.pinot.core.segment.index.loader.SegmentPreProcessor}.\n+ * to create text index for column during segment load time. Currently text index is always\n+ * created (if enabled on a column) during segment generation\n+ *\n+ * (1) A new segment with text index is created/refreshed. Server loads the segment. The handler\n+ * detects the existence of text index and returns.\n+ *\n+ * (2) A reload is issued on an existing segment with existing text index. The handler\n+ * detects the existence of text index and returns.\n+ *\n+ * (3) A reload is issued on an existing segment after text index is enabled on an existing\n+ * column. Read the forward index to create text index.\n+ *\n+ * (4) A reload is issued on an existing segment after text index is enabled on a newly\n+ * added column. In this case, the default column handler would have taken care of adding\n+ * forward index for the new column. Read the forward index to create text index.\n+ */\n public class TextIndexHandler {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDU1OTEyMQ=="}, "originalCommit": {"oid": "8f6ad20cd28fafb5b63f9526b6b0a942c552ef4b"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4NDAxNDcxOnYy", "diffSide": "RIGHT", "path": "pinot-core/src/main/java/org/apache/pinot/core/segment/index/converter/SegmentV1V2ToV3FormatConverter.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQyMzo0Njo0OFrOF-ARrw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQwMDo1NDozNFrOF-BfSw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDU2MDU1OQ==", "bodyText": "Not related to this pr, but can you make this method similar to copyForwardIndex() and call it in copyIndexData() based on the metadata?", "url": "https://github.com/apache/pinot/pull/5177#discussion_r400560559", "createdAt": "2020-03-30T23:46:48Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/segment/index/converter/SegmentV1V2ToV3FormatConverter.java", "diffHunk": "@@ -241,6 +242,22 @@ public boolean accept(File dir, String name) {\n         Files.copy(indexFile.toPath(), v3LuceneIndexFile.toPath());\n       }\n     }\n+    // if segment reload is issued asking for up-conversion of", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f6ad20cd28fafb5b63f9526b6b0a942c552ef4b"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDU3Njg3Ng==", "bodyText": "Lucene index files (created by Lucene) can't be copied as done in copyForwardIndex\nPinotDataBuffer oldBuffer = reader.getIndexFor(column, indexType); long oldBufferSize = oldBuffer.size(); PinotDataBuffer newBuffer = writer.newIndexFor(column, indexType, oldBufferSize); oldBuffer.copyTo(0, newBuffer, 0, oldBufferSize);\nThe only thing that can be copied as buffer is the mapping file that we create. I just wanted to keep everything related to lucene in a single method. I can explore how to clean this up.", "url": "https://github.com/apache/pinot/pull/5177#discussion_r400576876", "createdAt": "2020-03-31T00:42:20Z", "author": {"login": "siddharthteotia"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/segment/index/converter/SegmentV1V2ToV3FormatConverter.java", "diffHunk": "@@ -241,6 +242,22 @@ public boolean accept(File dir, String name) {\n         Files.copy(indexFile.toPath(), v3LuceneIndexFile.toPath());\n       }\n     }\n+    // if segment reload is issued asking for up-conversion of", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDU2MDU1OQ=="}, "originalCommit": {"oid": "8f6ad20cd28fafb5b63f9526b6b0a942c552ef4b"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDU3ODg4MA==", "bodyText": "Added a TODO -- I have couple of more PRs coming up  shortly for text. Will address this", "url": "https://github.com/apache/pinot/pull/5177#discussion_r400578880", "createdAt": "2020-03-31T00:49:05Z", "author": {"login": "siddharthteotia"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/segment/index/converter/SegmentV1V2ToV3FormatConverter.java", "diffHunk": "@@ -241,6 +242,22 @@ public boolean accept(File dir, String name) {\n         Files.copy(indexFile.toPath(), v3LuceneIndexFile.toPath());\n       }\n     }\n+    // if segment reload is issued asking for up-conversion of", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDU2MDU1OQ=="}, "originalCommit": {"oid": "8f6ad20cd28fafb5b63f9526b6b0a942c552ef4b"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDU4MDQyNw==", "bodyText": "I was referring to the usage (check metadata and copy instead of filtering on file names). Not critical, you can address later", "url": "https://github.com/apache/pinot/pull/5177#discussion_r400580427", "createdAt": "2020-03-31T00:54:34Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/segment/index/converter/SegmentV1V2ToV3FormatConverter.java", "diffHunk": "@@ -241,6 +242,22 @@ public boolean accept(File dir, String name) {\n         Files.copy(indexFile.toPath(), v3LuceneIndexFile.toPath());\n       }\n     }\n+    // if segment reload is issued asking for up-conversion of", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDU2MDU1OQ=="}, "originalCommit": {"oid": "8f6ad20cd28fafb5b63f9526b6b0a942c552ef4b"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4NDA0MTY5OnYy", "diffSide": "RIGHT", "path": "pinot-core/src/main/java/org/apache/pinot/core/segment/index/readers/text/LuceneTextIndexReader.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQyMzo1OTo1N1rOF-AhwQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQwMDozNDo1M1rOF-BJcA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDU2NDY3Mw==", "bodyText": "final PinotDataBuffer _buffer (class itself is private)", "url": "https://github.com/apache/pinot/pull/5177#discussion_r400564673", "createdAt": "2020-03-30T23:59:57Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/segment/index/readers/text/LuceneTextIndexReader.java", "diffHunk": "@@ -169,5 +178,57 @@ public void close()\n       throws IOException {\n     _indexReader.close();\n     _indexDirectory.close();\n+    _docIdReaderWriter.close();\n+  }\n+\n+  private class DocIdReaderWriter implements Closeable {\n+    private PinotDataBuffer _buffer;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f6ad20cd28fafb5b63f9526b6b0a942c552ef4b"}, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDU3NDgzMg==", "bodyText": "done", "url": "https://github.com/apache/pinot/pull/5177#discussion_r400574832", "createdAt": "2020-03-31T00:34:53Z", "author": {"login": "siddharthteotia"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/segment/index/readers/text/LuceneTextIndexReader.java", "diffHunk": "@@ -169,5 +178,57 @@ public void close()\n       throws IOException {\n     _indexReader.close();\n     _indexDirectory.close();\n+    _docIdReaderWriter.close();\n+  }\n+\n+  private class DocIdReaderWriter implements Closeable {\n+    private PinotDataBuffer _buffer;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDU2NDY3Mw=="}, "originalCommit": {"oid": "8f6ad20cd28fafb5b63f9526b6b0a942c552ef4b"}, "originalPosition": 88}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4NDA0MjA0OnYy", "diffSide": "RIGHT", "path": "pinot-core/src/main/java/org/apache/pinot/core/segment/index/readers/text/LuceneTextIndexReader.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQwMDowMDowNlrOF-Ah-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQwMDozNDo1N1rOF-BJew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDU2NDcyOA==", "bodyText": "private static class", "url": "https://github.com/apache/pinot/pull/5177#discussion_r400564728", "createdAt": "2020-03-31T00:00:06Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/segment/index/readers/text/LuceneTextIndexReader.java", "diffHunk": "@@ -169,5 +178,57 @@ public void close()\n       throws IOException {\n     _indexReader.close();\n     _indexDirectory.close();\n+    _docIdReaderWriter.close();\n+  }\n+\n+  private class DocIdReaderWriter implements Closeable {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f6ad20cd28fafb5b63f9526b6b0a942c552ef4b"}, "originalPosition": 87}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDU3NDg0Mw==", "bodyText": "done", "url": "https://github.com/apache/pinot/pull/5177#discussion_r400574843", "createdAt": "2020-03-31T00:34:57Z", "author": {"login": "siddharthteotia"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/segment/index/readers/text/LuceneTextIndexReader.java", "diffHunk": "@@ -169,5 +178,57 @@ public void close()\n       throws IOException {\n     _indexReader.close();\n     _indexDirectory.close();\n+    _docIdReaderWriter.close();\n+  }\n+\n+  private class DocIdReaderWriter implements Closeable {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDU2NDcyOA=="}, "originalCommit": {"oid": "8f6ad20cd28fafb5b63f9526b6b0a942c552ef4b"}, "originalPosition": 87}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4NDA0NDA4OnYy", "diffSide": "RIGHT", "path": "pinot-core/src/main/java/org/apache/pinot/core/segment/index/readers/text/LuceneTextIndexReader.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQwMDowMToxMFrOF-AjLg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQwMDozNDo1OVrOF-BJgQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDU2NTAzOA==", "bodyText": "Integer.parseInt()", "url": "https://github.com/apache/pinot/pull/5177#discussion_r400565038", "createdAt": "2020-03-31T00:01:10Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/segment/index/readers/text/LuceneTextIndexReader.java", "diffHunk": "@@ -169,5 +178,57 @@ public void close()\n       throws IOException {\n     _indexReader.close();\n     _indexDirectory.close();\n+    _docIdReaderWriter.close();\n+  }\n+\n+  private class DocIdReaderWriter implements Closeable {\n+    private PinotDataBuffer _buffer;\n+    private final boolean _mappingExists;\n+\n+    DocIdReaderWriter(File segmentIndexDir, String column, int numDocs)\n+        throws Exception {\n+      int length = Integer.BYTES * numDocs;\n+      File docIdMappingFile = new File(SegmentDirectoryPaths.findSegmentDirectory(segmentIndexDir),\n+          column + LUCENE_TEXT_INDEX_DOCID_MAPPING_FILE_EXTENSION);\n+      // The mapping is local to a segment. It is created on the server during segment load.\n+      // Unless we are running Pinot on Solaris/SPARC, the underlying architecture is\n+      // LITTLE_ENDIAN (Linux/x86). So use that as byte order.\n+      if (docIdMappingFile.exists()) {\n+        // we will be here for segment reload and server restart\n+        // for refresh, we will not be here since segment is deleted/replaced\n+        // TODO: see if we can prefetch the pages\n+        _mappingExists = true;\n+        _buffer = PinotDataBuffer.mapFile(docIdMappingFile, /* readOnly */ true, 0, length, ByteOrder.LITTLE_ENDIAN,\n+            _column + getClass().getSimpleName());\n+      } else {\n+        _mappingExists = false;\n+        _buffer = PinotDataBuffer.mapFile(docIdMappingFile, /* readOnly */ false, 0, length, ByteOrder.LITTLE_ENDIAN,\n+            _column + getClass().getSimpleName());\n+      }\n+    }\n+\n+    public void buildDocIdMapping(int numDocs) {\n+      if (!_mappingExists) {\n+        for (int i = 0; i < numDocs; i++) {\n+          try {\n+            Document document = _indexSearcher.doc(i);\n+            int pinotDocId = Integer.valueOf(document.get(LuceneTextIndexCreator.LUCENE_INDEX_DOC_ID_COLUMN_NAME));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f6ad20cd28fafb5b63f9526b6b0a942c552ef4b"}, "originalPosition": 118}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDU3NDg0OQ==", "bodyText": "done", "url": "https://github.com/apache/pinot/pull/5177#discussion_r400574849", "createdAt": "2020-03-31T00:34:59Z", "author": {"login": "siddharthteotia"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/segment/index/readers/text/LuceneTextIndexReader.java", "diffHunk": "@@ -169,5 +178,57 @@ public void close()\n       throws IOException {\n     _indexReader.close();\n     _indexDirectory.close();\n+    _docIdReaderWriter.close();\n+  }\n+\n+  private class DocIdReaderWriter implements Closeable {\n+    private PinotDataBuffer _buffer;\n+    private final boolean _mappingExists;\n+\n+    DocIdReaderWriter(File segmentIndexDir, String column, int numDocs)\n+        throws Exception {\n+      int length = Integer.BYTES * numDocs;\n+      File docIdMappingFile = new File(SegmentDirectoryPaths.findSegmentDirectory(segmentIndexDir),\n+          column + LUCENE_TEXT_INDEX_DOCID_MAPPING_FILE_EXTENSION);\n+      // The mapping is local to a segment. It is created on the server during segment load.\n+      // Unless we are running Pinot on Solaris/SPARC, the underlying architecture is\n+      // LITTLE_ENDIAN (Linux/x86). So use that as byte order.\n+      if (docIdMappingFile.exists()) {\n+        // we will be here for segment reload and server restart\n+        // for refresh, we will not be here since segment is deleted/replaced\n+        // TODO: see if we can prefetch the pages\n+        _mappingExists = true;\n+        _buffer = PinotDataBuffer.mapFile(docIdMappingFile, /* readOnly */ true, 0, length, ByteOrder.LITTLE_ENDIAN,\n+            _column + getClass().getSimpleName());\n+      } else {\n+        _mappingExists = false;\n+        _buffer = PinotDataBuffer.mapFile(docIdMappingFile, /* readOnly */ false, 0, length, ByteOrder.LITTLE_ENDIAN,\n+            _column + getClass().getSimpleName());\n+      }\n+    }\n+\n+    public void buildDocIdMapping(int numDocs) {\n+      if (!_mappingExists) {\n+        for (int i = 0; i < numDocs; i++) {\n+          try {\n+            Document document = _indexSearcher.doc(i);\n+            int pinotDocId = Integer.valueOf(document.get(LuceneTextIndexCreator.LUCENE_INDEX_DOC_ID_COLUMN_NAME));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDU2NTAzOA=="}, "originalCommit": {"oid": "8f6ad20cd28fafb5b63f9526b6b0a942c552ef4b"}, "originalPosition": 118}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4NDA0NzM0OnYy", "diffSide": "RIGHT", "path": "pinot-core/src/main/java/org/apache/pinot/core/segment/index/readers/text/LuceneTextIndexReader.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQwMDowMjo1NlrOF-AlIg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQwMDozNTowM1rOF-BJkQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDU2NTUzOA==", "bodyText": "Merge this into the constructor, no need to track an extra boolean.", "url": "https://github.com/apache/pinot/pull/5177#discussion_r400565538", "createdAt": "2020-03-31T00:02:56Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/segment/index/readers/text/LuceneTextIndexReader.java", "diffHunk": "@@ -169,5 +178,57 @@ public void close()\n       throws IOException {\n     _indexReader.close();\n     _indexDirectory.close();\n+    _docIdReaderWriter.close();\n+  }\n+\n+  private class DocIdReaderWriter implements Closeable {\n+    private PinotDataBuffer _buffer;\n+    private final boolean _mappingExists;\n+\n+    DocIdReaderWriter(File segmentIndexDir, String column, int numDocs)\n+        throws Exception {\n+      int length = Integer.BYTES * numDocs;\n+      File docIdMappingFile = new File(SegmentDirectoryPaths.findSegmentDirectory(segmentIndexDir),\n+          column + LUCENE_TEXT_INDEX_DOCID_MAPPING_FILE_EXTENSION);\n+      // The mapping is local to a segment. It is created on the server during segment load.\n+      // Unless we are running Pinot on Solaris/SPARC, the underlying architecture is\n+      // LITTLE_ENDIAN (Linux/x86). So use that as byte order.\n+      if (docIdMappingFile.exists()) {\n+        // we will be here for segment reload and server restart\n+        // for refresh, we will not be here since segment is deleted/replaced\n+        // TODO: see if we can prefetch the pages\n+        _mappingExists = true;\n+        _buffer = PinotDataBuffer.mapFile(docIdMappingFile, /* readOnly */ true, 0, length, ByteOrder.LITTLE_ENDIAN,\n+            _column + getClass().getSimpleName());\n+      } else {\n+        _mappingExists = false;\n+        _buffer = PinotDataBuffer.mapFile(docIdMappingFile, /* readOnly */ false, 0, length, ByteOrder.LITTLE_ENDIAN,\n+            _column + getClass().getSimpleName());\n+      }\n+    }\n+\n+    public void buildDocIdMapping(int numDocs) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f6ad20cd28fafb5b63f9526b6b0a942c552ef4b"}, "originalPosition": 113}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDU3NDg2NQ==", "bodyText": "done", "url": "https://github.com/apache/pinot/pull/5177#discussion_r400574865", "createdAt": "2020-03-31T00:35:03Z", "author": {"login": "siddharthteotia"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/segment/index/readers/text/LuceneTextIndexReader.java", "diffHunk": "@@ -169,5 +178,57 @@ public void close()\n       throws IOException {\n     _indexReader.close();\n     _indexDirectory.close();\n+    _docIdReaderWriter.close();\n+  }\n+\n+  private class DocIdReaderWriter implements Closeable {\n+    private PinotDataBuffer _buffer;\n+    private final boolean _mappingExists;\n+\n+    DocIdReaderWriter(File segmentIndexDir, String column, int numDocs)\n+        throws Exception {\n+      int length = Integer.BYTES * numDocs;\n+      File docIdMappingFile = new File(SegmentDirectoryPaths.findSegmentDirectory(segmentIndexDir),\n+          column + LUCENE_TEXT_INDEX_DOCID_MAPPING_FILE_EXTENSION);\n+      // The mapping is local to a segment. It is created on the server during segment load.\n+      // Unless we are running Pinot on Solaris/SPARC, the underlying architecture is\n+      // LITTLE_ENDIAN (Linux/x86). So use that as byte order.\n+      if (docIdMappingFile.exists()) {\n+        // we will be here for segment reload and server restart\n+        // for refresh, we will not be here since segment is deleted/replaced\n+        // TODO: see if we can prefetch the pages\n+        _mappingExists = true;\n+        _buffer = PinotDataBuffer.mapFile(docIdMappingFile, /* readOnly */ true, 0, length, ByteOrder.LITTLE_ENDIAN,\n+            _column + getClass().getSimpleName());\n+      } else {\n+        _mappingExists = false;\n+        _buffer = PinotDataBuffer.mapFile(docIdMappingFile, /* readOnly */ false, 0, length, ByteOrder.LITTLE_ENDIAN,\n+            _column + getClass().getSimpleName());\n+      }\n+    }\n+\n+    public void buildDocIdMapping(int numDocs) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDU2NTUzOA=="}, "originalCommit": {"oid": "8f6ad20cd28fafb5b63f9526b6b0a942c552ef4b"}, "originalPosition": 113}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4NDA0OTY2OnYy", "diffSide": "RIGHT", "path": "pinot-core/src/main/java/org/apache/pinot/core/segment/index/readers/text/LuceneTextIndexReader.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQwMDowNDowM1rOF-AmcA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQwMDozNTowNVrOF-BJnQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDU2NTg3Mg==", "bodyText": "Recommend making second argument indexDir to denote that it is top level dir", "url": "https://github.com/apache/pinot/pull/5177#discussion_r400565872", "createdAt": "2020-03-31T00:04:03Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/segment/index/readers/text/LuceneTextIndexReader.java", "diffHunk": "@@ -60,7 +66,7 @@\n    * @param column column name\n    * @param segmentIndexDir segment index directory\n    */\n-  public LuceneTextIndexReader(String column, File segmentIndexDir) {\n+  public LuceneTextIndexReader(String column, File segmentIndexDir, int numDocs) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f6ad20cd28fafb5b63f9526b6b0a942c552ef4b"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDU3NDg3Nw==", "bodyText": "done", "url": "https://github.com/apache/pinot/pull/5177#discussion_r400574877", "createdAt": "2020-03-31T00:35:05Z", "author": {"login": "siddharthteotia"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/segment/index/readers/text/LuceneTextIndexReader.java", "diffHunk": "@@ -60,7 +66,7 @@\n    * @param column column name\n    * @param segmentIndexDir segment index directory\n    */\n-  public LuceneTextIndexReader(String column, File segmentIndexDir) {\n+  public LuceneTextIndexReader(String column, File segmentIndexDir, int numDocs) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDU2NTg3Mg=="}, "originalCommit": {"oid": "8f6ad20cd28fafb5b63f9526b6b0a942c552ef4b"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4NDA1MTMyOnYy", "diffSide": "RIGHT", "path": "pinot-core/src/main/java/org/apache/pinot/core/segment/index/readers/text/LuceneTextIndexReader.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQwMDowNDo0NVrOF-AnZg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQwMDozNToxMVrOF-BJtQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDU2NjExOA==", "bodyText": "I prefer the original name", "url": "https://github.com/apache/pinot/pull/5177#discussion_r400566118", "createdAt": "2020-03-31T00:04:45Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/segment/index/readers/text/LuceneTextIndexReader.java", "diffHunk": "@@ -121,7 +131,7 @@ public MutableRoaringBitmap getDocIds(Object value) {\n     try {\n       Query query = _queryParser.parse(searchQuery);\n       _indexSearcher.search(query, docIDCollector);\n-      return getPinotDocIds(docIDs);\n+      return getPinotDocIdsFromMappingFile(docIDs);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f6ad20cd28fafb5b63f9526b6b0a942c552ef4b"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDU3NDkwMQ==", "bodyText": "ohh yes, I was initially thinking of implementing two solutions. Reverted", "url": "https://github.com/apache/pinot/pull/5177#discussion_r400574901", "createdAt": "2020-03-31T00:35:11Z", "author": {"login": "siddharthteotia"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/segment/index/readers/text/LuceneTextIndexReader.java", "diffHunk": "@@ -121,7 +131,7 @@ public MutableRoaringBitmap getDocIds(Object value) {\n     try {\n       Query query = _queryParser.parse(searchQuery);\n       _indexSearcher.search(query, docIDCollector);\n-      return getPinotDocIds(docIDs);\n+      return getPinotDocIdsFromMappingFile(docIDs);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDU2NjExOA=="}, "originalCommit": {"oid": "8f6ad20cd28fafb5b63f9526b6b0a942c552ef4b"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4NDA1NDQ5OnYy", "diffSide": "RIGHT", "path": "pinot-core/src/main/java/org/apache/pinot/core/segment/index/readers/text/LuceneTextIndexReader.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQwMDowNjoyNVrOF-ApZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQwMDozNToxNlrOF-BJxA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDU2NjYyOA==", "bodyText": "You don't really need to log the error if you are going to throw out the exception. The catcher will log it with the stack trace", "url": "https://github.com/apache/pinot/pull/5177#discussion_r400566628", "createdAt": "2020-03-31T00:06:25Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/segment/index/readers/text/LuceneTextIndexReader.java", "diffHunk": "@@ -121,7 +131,7 @@ public MutableRoaringBitmap getDocIds(Object value) {\n     try {\n       Query query = _queryParser.parse(searchQuery);\n       _indexSearcher.search(query, docIDCollector);\n-      return getPinotDocIds(docIDs);\n+      return getPinotDocIdsFromMappingFile(docIDs);\n     } catch (Exception e) {\n       LOGGER.error(\"Failed while searching the text index for column {}, search query {}, exception {}\", _column,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f6ad20cd28fafb5b63f9526b6b0a942c552ef4b"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDU3NDkxNg==", "bodyText": "Removed the e.getMessage() from log. The log is still needed though since I want to capture column name and search expression for the failed query", "url": "https://github.com/apache/pinot/pull/5177#discussion_r400574916", "createdAt": "2020-03-31T00:35:16Z", "author": {"login": "siddharthteotia"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/segment/index/readers/text/LuceneTextIndexReader.java", "diffHunk": "@@ -121,7 +131,7 @@ public MutableRoaringBitmap getDocIds(Object value) {\n     try {\n       Query query = _queryParser.parse(searchQuery);\n       _indexSearcher.search(query, docIDCollector);\n-      return getPinotDocIds(docIDs);\n+      return getPinotDocIdsFromMappingFile(docIDs);\n     } catch (Exception e) {\n       LOGGER.error(\"Failed while searching the text index for column {}, search query {}, exception {}\", _column,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDU2NjYyOA=="}, "originalCommit": {"oid": "8f6ad20cd28fafb5b63f9526b6b0a942c552ef4b"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4NDA1NTI4OnYy", "diffSide": "RIGHT", "path": "pinot-core/src/main/java/org/apache/pinot/core/segment/index/readers/text/LuceneTextIndexReader.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQwMDowNjo1NFrOF-Ap5g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQwMDozNToyMVrOF-BJ1g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDU2Njc1OA==", "bodyText": "No need to catch, you can directly throw the exception", "url": "https://github.com/apache/pinot/pull/5177#discussion_r400566758", "createdAt": "2020-03-31T00:06:54Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/segment/index/readers/text/LuceneTextIndexReader.java", "diffHunk": "@@ -142,18 +152,17 @@ public MutableRoaringBitmap getDocIds(Object value) {\n    *\n    * TODO: Explore optimizing this path to avoid building the second bitmap\n    */\n-  private MutableRoaringBitmap getPinotDocIds(MutableRoaringBitmap luceneDocIds) {\n+  private MutableRoaringBitmap getPinotDocIdsFromMappingFile(MutableRoaringBitmap luceneDocIds) {\n     IntIterator luceneDocIDIterator = luceneDocIds.getIntIterator();\n     MutableRoaringBitmap actualDocIDs = new MutableRoaringBitmap();\n     try {\n       while (luceneDocIDIterator.hasNext()) {\n         int luceneDocId = luceneDocIDIterator.next();\n-        Document document = _indexSearcher.doc(luceneDocId);\n-        int pinotDocId = Integer.valueOf(document.get(LuceneTextIndexCreator.LUCENE_INDEX_DOC_ID_COLUMN_NAME));\n+        int pinotDocId = _docIdReaderWriter.getInt(luceneDocId * Integer.BYTES);\n         actualDocIDs.add(pinotDocId);\n       }\n     } catch (Exception e) {\n-      throw new RuntimeException(\"Error: failed while retrieving document from index: \" + e);\n+      throw new RuntimeException(\"Error: failed while retrieving pinot doc id from mapping file: \" + e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f6ad20cd28fafb5b63f9526b6b0a942c552ef4b"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDU3NDkzNA==", "bodyText": "done", "url": "https://github.com/apache/pinot/pull/5177#discussion_r400574934", "createdAt": "2020-03-31T00:35:21Z", "author": {"login": "siddharthteotia"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/segment/index/readers/text/LuceneTextIndexReader.java", "diffHunk": "@@ -142,18 +152,17 @@ public MutableRoaringBitmap getDocIds(Object value) {\n    *\n    * TODO: Explore optimizing this path to avoid building the second bitmap\n    */\n-  private MutableRoaringBitmap getPinotDocIds(MutableRoaringBitmap luceneDocIds) {\n+  private MutableRoaringBitmap getPinotDocIdsFromMappingFile(MutableRoaringBitmap luceneDocIds) {\n     IntIterator luceneDocIDIterator = luceneDocIds.getIntIterator();\n     MutableRoaringBitmap actualDocIDs = new MutableRoaringBitmap();\n     try {\n       while (luceneDocIDIterator.hasNext()) {\n         int luceneDocId = luceneDocIDIterator.next();\n-        Document document = _indexSearcher.doc(luceneDocId);\n-        int pinotDocId = Integer.valueOf(document.get(LuceneTextIndexCreator.LUCENE_INDEX_DOC_ID_COLUMN_NAME));\n+        int pinotDocId = _docIdReaderWriter.getInt(luceneDocId * Integer.BYTES);\n         actualDocIDs.add(pinotDocId);\n       }\n     } catch (Exception e) {\n-      throw new RuntimeException(\"Error: failed while retrieving document from index: \" + e);\n+      throw new RuntimeException(\"Error: failed while retrieving pinot doc id from mapping file: \" + e);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDU2Njc1OA=="}, "originalCommit": {"oid": "8f6ad20cd28fafb5b63f9526b6b0a942c552ef4b"}, "originalPosition": 76}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4NDA2MzM2OnYy", "diffSide": "RIGHT", "path": "pinot-core/src/main/java/org/apache/pinot/core/segment/index/readers/text/LuceneTextIndexReader.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQwMDoxMToxMFrOF-AvCA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQwMDozNToyNFrOF-BJ4A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDU2ODA3Mg==", "bodyText": "\"Text index docId mapping buffer: \" + _column", "url": "https://github.com/apache/pinot/pull/5177#discussion_r400568072", "createdAt": "2020-03-31T00:11:10Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/segment/index/readers/text/LuceneTextIndexReader.java", "diffHunk": "@@ -169,5 +178,57 @@ public void close()\n       throws IOException {\n     _indexReader.close();\n     _indexDirectory.close();\n+    _docIdReaderWriter.close();\n+  }\n+\n+  private class DocIdReaderWriter implements Closeable {\n+    private PinotDataBuffer _buffer;\n+    private final boolean _mappingExists;\n+\n+    DocIdReaderWriter(File segmentIndexDir, String column, int numDocs)\n+        throws Exception {\n+      int length = Integer.BYTES * numDocs;\n+      File docIdMappingFile = new File(SegmentDirectoryPaths.findSegmentDirectory(segmentIndexDir),\n+          column + LUCENE_TEXT_INDEX_DOCID_MAPPING_FILE_EXTENSION);\n+      // The mapping is local to a segment. It is created on the server during segment load.\n+      // Unless we are running Pinot on Solaris/SPARC, the underlying architecture is\n+      // LITTLE_ENDIAN (Linux/x86). So use that as byte order.\n+      if (docIdMappingFile.exists()) {\n+        // we will be here for segment reload and server restart\n+        // for refresh, we will not be here since segment is deleted/replaced\n+        // TODO: see if we can prefetch the pages\n+        _mappingExists = true;\n+        _buffer = PinotDataBuffer.mapFile(docIdMappingFile, /* readOnly */ true, 0, length, ByteOrder.LITTLE_ENDIAN,\n+            _column + getClass().getSimpleName());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f6ad20cd28fafb5b63f9526b6b0a942c552ef4b"}, "originalPosition": 105}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDU3NDk0NA==", "bodyText": "done", "url": "https://github.com/apache/pinot/pull/5177#discussion_r400574944", "createdAt": "2020-03-31T00:35:24Z", "author": {"login": "siddharthteotia"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/segment/index/readers/text/LuceneTextIndexReader.java", "diffHunk": "@@ -169,5 +178,57 @@ public void close()\n       throws IOException {\n     _indexReader.close();\n     _indexDirectory.close();\n+    _docIdReaderWriter.close();\n+  }\n+\n+  private class DocIdReaderWriter implements Closeable {\n+    private PinotDataBuffer _buffer;\n+    private final boolean _mappingExists;\n+\n+    DocIdReaderWriter(File segmentIndexDir, String column, int numDocs)\n+        throws Exception {\n+      int length = Integer.BYTES * numDocs;\n+      File docIdMappingFile = new File(SegmentDirectoryPaths.findSegmentDirectory(segmentIndexDir),\n+          column + LUCENE_TEXT_INDEX_DOCID_MAPPING_FILE_EXTENSION);\n+      // The mapping is local to a segment. It is created on the server during segment load.\n+      // Unless we are running Pinot on Solaris/SPARC, the underlying architecture is\n+      // LITTLE_ENDIAN (Linux/x86). So use that as byte order.\n+      if (docIdMappingFile.exists()) {\n+        // we will be here for segment reload and server restart\n+        // for refresh, we will not be here since segment is deleted/replaced\n+        // TODO: see if we can prefetch the pages\n+        _mappingExists = true;\n+        _buffer = PinotDataBuffer.mapFile(docIdMappingFile, /* readOnly */ true, 0, length, ByteOrder.LITTLE_ENDIAN,\n+            _column + getClass().getSimpleName());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDU2ODA3Mg=="}, "originalCommit": {"oid": "8f6ad20cd28fafb5b63f9526b6b0a942c552ef4b"}, "originalPosition": 105}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4NDA2NTM4OnYy", "diffSide": "RIGHT", "path": "pinot-core/src/main/java/org/apache/pinot/core/segment/index/readers/text/LuceneTextIndexReader.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQwMDoxMjoyNFrOF-AwVQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQwMDozNToyNlrOF-BJ6w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDU2ODQwNQ==", "bodyText": "int getPinotDocId(int luceneDocId) for better abstraction", "url": "https://github.com/apache/pinot/pull/5177#discussion_r400568405", "createdAt": "2020-03-31T00:12:24Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/segment/index/readers/text/LuceneTextIndexReader.java", "diffHunk": "@@ -169,5 +178,57 @@ public void close()\n       throws IOException {\n     _indexReader.close();\n     _indexDirectory.close();\n+    _docIdReaderWriter.close();\n+  }\n+\n+  private class DocIdReaderWriter implements Closeable {\n+    private PinotDataBuffer _buffer;\n+    private final boolean _mappingExists;\n+\n+    DocIdReaderWriter(File segmentIndexDir, String column, int numDocs)\n+        throws Exception {\n+      int length = Integer.BYTES * numDocs;\n+      File docIdMappingFile = new File(SegmentDirectoryPaths.findSegmentDirectory(segmentIndexDir),\n+          column + LUCENE_TEXT_INDEX_DOCID_MAPPING_FILE_EXTENSION);\n+      // The mapping is local to a segment. It is created on the server during segment load.\n+      // Unless we are running Pinot on Solaris/SPARC, the underlying architecture is\n+      // LITTLE_ENDIAN (Linux/x86). So use that as byte order.\n+      if (docIdMappingFile.exists()) {\n+        // we will be here for segment reload and server restart\n+        // for refresh, we will not be here since segment is deleted/replaced\n+        // TODO: see if we can prefetch the pages\n+        _mappingExists = true;\n+        _buffer = PinotDataBuffer.mapFile(docIdMappingFile, /* readOnly */ true, 0, length, ByteOrder.LITTLE_ENDIAN,\n+            _column + getClass().getSimpleName());\n+      } else {\n+        _mappingExists = false;\n+        _buffer = PinotDataBuffer.mapFile(docIdMappingFile, /* readOnly */ false, 0, length, ByteOrder.LITTLE_ENDIAN,\n+            _column + getClass().getSimpleName());\n+      }\n+    }\n+\n+    public void buildDocIdMapping(int numDocs) {\n+      if (!_mappingExists) {\n+        for (int i = 0; i < numDocs; i++) {\n+          try {\n+            Document document = _indexSearcher.doc(i);\n+            int pinotDocId = Integer.valueOf(document.get(LuceneTextIndexCreator.LUCENE_INDEX_DOC_ID_COLUMN_NAME));\n+            _buffer.putInt(i * Integer.BYTES, pinotDocId);\n+          } catch (Exception e) {\n+            throw new RuntimeException(\"Failed to build doc id mapping during segment load: \" + e);\n+          }\n+        }\n+      }\n+    }\n+\n+    int getInt(int offset) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f6ad20cd28fafb5b63f9526b6b0a942c552ef4b"}, "originalPosition": 127}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDU3NDk1NQ==", "bodyText": "done", "url": "https://github.com/apache/pinot/pull/5177#discussion_r400574955", "createdAt": "2020-03-31T00:35:26Z", "author": {"login": "siddharthteotia"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/segment/index/readers/text/LuceneTextIndexReader.java", "diffHunk": "@@ -169,5 +178,57 @@ public void close()\n       throws IOException {\n     _indexReader.close();\n     _indexDirectory.close();\n+    _docIdReaderWriter.close();\n+  }\n+\n+  private class DocIdReaderWriter implements Closeable {\n+    private PinotDataBuffer _buffer;\n+    private final boolean _mappingExists;\n+\n+    DocIdReaderWriter(File segmentIndexDir, String column, int numDocs)\n+        throws Exception {\n+      int length = Integer.BYTES * numDocs;\n+      File docIdMappingFile = new File(SegmentDirectoryPaths.findSegmentDirectory(segmentIndexDir),\n+          column + LUCENE_TEXT_INDEX_DOCID_MAPPING_FILE_EXTENSION);\n+      // The mapping is local to a segment. It is created on the server during segment load.\n+      // Unless we are running Pinot on Solaris/SPARC, the underlying architecture is\n+      // LITTLE_ENDIAN (Linux/x86). So use that as byte order.\n+      if (docIdMappingFile.exists()) {\n+        // we will be here for segment reload and server restart\n+        // for refresh, we will not be here since segment is deleted/replaced\n+        // TODO: see if we can prefetch the pages\n+        _mappingExists = true;\n+        _buffer = PinotDataBuffer.mapFile(docIdMappingFile, /* readOnly */ true, 0, length, ByteOrder.LITTLE_ENDIAN,\n+            _column + getClass().getSimpleName());\n+      } else {\n+        _mappingExists = false;\n+        _buffer = PinotDataBuffer.mapFile(docIdMappingFile, /* readOnly */ false, 0, length, ByteOrder.LITTLE_ENDIAN,\n+            _column + getClass().getSimpleName());\n+      }\n+    }\n+\n+    public void buildDocIdMapping(int numDocs) {\n+      if (!_mappingExists) {\n+        for (int i = 0; i < numDocs; i++) {\n+          try {\n+            Document document = _indexSearcher.doc(i);\n+            int pinotDocId = Integer.valueOf(document.get(LuceneTextIndexCreator.LUCENE_INDEX_DOC_ID_COLUMN_NAME));\n+            _buffer.putInt(i * Integer.BYTES, pinotDocId);\n+          } catch (Exception e) {\n+            throw new RuntimeException(\"Failed to build doc id mapping during segment load: \" + e);\n+          }\n+        }\n+      }\n+    }\n+\n+    int getInt(int offset) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDU2ODQwNQ=="}, "originalCommit": {"oid": "8f6ad20cd28fafb5b63f9526b6b0a942c552ef4b"}, "originalPosition": 127}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4NDA2OTA4OnYy", "diffSide": "RIGHT", "path": "pinot-core/src/main/java/org/apache/pinot/core/segment/index/readers/text/LuceneTextIndexReader.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQwMDoxNDowNlrOF-Ayhw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQwMDozNToyOVrOF-BJ_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDU2ODk2Nw==", "bodyText": "I would recommend renaming it to DocIdTranslator", "url": "https://github.com/apache/pinot/pull/5177#discussion_r400568967", "createdAt": "2020-03-31T00:14:06Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/segment/index/readers/text/LuceneTextIndexReader.java", "diffHunk": "@@ -169,5 +178,57 @@ public void close()\n       throws IOException {\n     _indexReader.close();\n     _indexDirectory.close();\n+    _docIdReaderWriter.close();\n+  }\n+\n+  private class DocIdReaderWriter implements Closeable {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f6ad20cd28fafb5b63f9526b6b0a942c552ef4b"}, "originalPosition": 87}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDU3NDk3Mg==", "bodyText": "done", "url": "https://github.com/apache/pinot/pull/5177#discussion_r400574972", "createdAt": "2020-03-31T00:35:29Z", "author": {"login": "siddharthteotia"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/segment/index/readers/text/LuceneTextIndexReader.java", "diffHunk": "@@ -169,5 +178,57 @@ public void close()\n       throws IOException {\n     _indexReader.close();\n     _indexDirectory.close();\n+    _docIdReaderWriter.close();\n+  }\n+\n+  private class DocIdReaderWriter implements Closeable {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDU2ODk2Nw=="}, "originalCommit": {"oid": "8f6ad20cd28fafb5b63f9526b6b0a942c552ef4b"}, "originalPosition": 87}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4NDA5MzY3OnYy", "diffSide": "RIGHT", "path": "pinot-core/src/main/java/org/apache/pinot/core/segment/index/readers/text/LuceneTextIndexReader.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQwMDoyNzoxNlrOF-BBWg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQwMDo0NjowOFrOF-BV2g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDU3Mjc2Mg==", "bodyText": "Can we reuse FixedByteReaderWriter?", "url": "https://github.com/apache/pinot/pull/5177#discussion_r400572762", "createdAt": "2020-03-31T00:27:16Z", "author": {"login": "kishoreg"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/segment/index/readers/text/LuceneTextIndexReader.java", "diffHunk": "@@ -169,5 +178,57 @@ public void close()\n       throws IOException {\n     _indexReader.close();\n     _indexDirectory.close();\n+    _docIdReaderWriter.close();\n+  }\n+\n+  private class DocIdReaderWriter implements Closeable {\n+    private PinotDataBuffer _buffer;\n+    private final boolean _mappingExists;\n+\n+    DocIdReaderWriter(File segmentIndexDir, String column, int numDocs)\n+        throws Exception {\n+      int length = Integer.BYTES * numDocs;\n+      File docIdMappingFile = new File(SegmentDirectoryPaths.findSegmentDirectory(segmentIndexDir),\n+          column + LUCENE_TEXT_INDEX_DOCID_MAPPING_FILE_EXTENSION);\n+      // The mapping is local to a segment. It is created on the server during segment load.\n+      // Unless we are running Pinot on Solaris/SPARC, the underlying architecture is\n+      // LITTLE_ENDIAN (Linux/x86). So use that as byte order.\n+      if (docIdMappingFile.exists()) {\n+        // we will be here for segment reload and server restart\n+        // for refresh, we will not be here since segment is deleted/replaced\n+        // TODO: see if we can prefetch the pages\n+        _mappingExists = true;\n+        _buffer = PinotDataBuffer.mapFile(docIdMappingFile, /* readOnly */ true, 0, length, ByteOrder.LITTLE_ENDIAN,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f6ad20cd28fafb5b63f9526b6b0a942c552ef4b"}, "originalPosition": 104}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDU3ODAxMA==", "bodyText": "I explored existing reader/writer. Didn't use for the following reasons:\nFixedByteChunkReaderWriter uses direct memory (ByteBuffer.allocateDirect). Memory mapping is better.\nThe FixedBitIntReaderWriter (used for dictionary encoded forward index) has additional bells and whistles due to bit-packing. The return type is an array. I wanted to keep this simple since we use it in exactly one place in lucene code.", "url": "https://github.com/apache/pinot/pull/5177#discussion_r400578010", "createdAt": "2020-03-31T00:46:08Z", "author": {"login": "siddharthteotia"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/segment/index/readers/text/LuceneTextIndexReader.java", "diffHunk": "@@ -169,5 +178,57 @@ public void close()\n       throws IOException {\n     _indexReader.close();\n     _indexDirectory.close();\n+    _docIdReaderWriter.close();\n+  }\n+\n+  private class DocIdReaderWriter implements Closeable {\n+    private PinotDataBuffer _buffer;\n+    private final boolean _mappingExists;\n+\n+    DocIdReaderWriter(File segmentIndexDir, String column, int numDocs)\n+        throws Exception {\n+      int length = Integer.BYTES * numDocs;\n+      File docIdMappingFile = new File(SegmentDirectoryPaths.findSegmentDirectory(segmentIndexDir),\n+          column + LUCENE_TEXT_INDEX_DOCID_MAPPING_FILE_EXTENSION);\n+      // The mapping is local to a segment. It is created on the server during segment load.\n+      // Unless we are running Pinot on Solaris/SPARC, the underlying architecture is\n+      // LITTLE_ENDIAN (Linux/x86). So use that as byte order.\n+      if (docIdMappingFile.exists()) {\n+        // we will be here for segment reload and server restart\n+        // for refresh, we will not be here since segment is deleted/replaced\n+        // TODO: see if we can prefetch the pages\n+        _mappingExists = true;\n+        _buffer = PinotDataBuffer.mapFile(docIdMappingFile, /* readOnly */ true, 0, length, ByteOrder.LITTLE_ENDIAN,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDU3Mjc2Mg=="}, "originalCommit": {"oid": "8f6ad20cd28fafb5b63f9526b6b0a942c552ef4b"}, "originalPosition": 104}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4NDA5NDY3OnYy", "diffSide": "RIGHT", "path": "pinot-core/src/main/java/org/apache/pinot/core/segment/index/readers/text/LuceneTextIndexReader.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQwMDoyNzo0M1rOF-BB3Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQwMDo0NjoxNFrOF-BV9g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDU3Mjg5Mw==", "bodyText": ", e", "url": "https://github.com/apache/pinot/pull/5177#discussion_r400572893", "createdAt": "2020-03-31T00:27:43Z", "author": {"login": "kishoreg"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/segment/index/readers/text/LuceneTextIndexReader.java", "diffHunk": "@@ -169,5 +178,57 @@ public void close()\n       throws IOException {\n     _indexReader.close();\n     _indexDirectory.close();\n+    _docIdReaderWriter.close();\n+  }\n+\n+  private class DocIdReaderWriter implements Closeable {\n+    private PinotDataBuffer _buffer;\n+    private final boolean _mappingExists;\n+\n+    DocIdReaderWriter(File segmentIndexDir, String column, int numDocs)\n+        throws Exception {\n+      int length = Integer.BYTES * numDocs;\n+      File docIdMappingFile = new File(SegmentDirectoryPaths.findSegmentDirectory(segmentIndexDir),\n+          column + LUCENE_TEXT_INDEX_DOCID_MAPPING_FILE_EXTENSION);\n+      // The mapping is local to a segment. It is created on the server during segment load.\n+      // Unless we are running Pinot on Solaris/SPARC, the underlying architecture is\n+      // LITTLE_ENDIAN (Linux/x86). So use that as byte order.\n+      if (docIdMappingFile.exists()) {\n+        // we will be here for segment reload and server restart\n+        // for refresh, we will not be here since segment is deleted/replaced\n+        // TODO: see if we can prefetch the pages\n+        _mappingExists = true;\n+        _buffer = PinotDataBuffer.mapFile(docIdMappingFile, /* readOnly */ true, 0, length, ByteOrder.LITTLE_ENDIAN,\n+            _column + getClass().getSimpleName());\n+      } else {\n+        _mappingExists = false;\n+        _buffer = PinotDataBuffer.mapFile(docIdMappingFile, /* readOnly */ false, 0, length, ByteOrder.LITTLE_ENDIAN,\n+            _column + getClass().getSimpleName());\n+      }\n+    }\n+\n+    public void buildDocIdMapping(int numDocs) {\n+      if (!_mappingExists) {\n+        for (int i = 0; i < numDocs; i++) {\n+          try {\n+            Document document = _indexSearcher.doc(i);\n+            int pinotDocId = Integer.valueOf(document.get(LuceneTextIndexCreator.LUCENE_INDEX_DOC_ID_COLUMN_NAME));\n+            _buffer.putInt(i * Integer.BYTES, pinotDocId);\n+          } catch (Exception e) {\n+            throw new RuntimeException(\"Failed to build doc id mapping during segment load: \" + e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f6ad20cd28fafb5b63f9526b6b0a942c552ef4b"}, "originalPosition": 121}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDU3ODAzOA==", "bodyText": "done", "url": "https://github.com/apache/pinot/pull/5177#discussion_r400578038", "createdAt": "2020-03-31T00:46:14Z", "author": {"login": "siddharthteotia"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/segment/index/readers/text/LuceneTextIndexReader.java", "diffHunk": "@@ -169,5 +178,57 @@ public void close()\n       throws IOException {\n     _indexReader.close();\n     _indexDirectory.close();\n+    _docIdReaderWriter.close();\n+  }\n+\n+  private class DocIdReaderWriter implements Closeable {\n+    private PinotDataBuffer _buffer;\n+    private final boolean _mappingExists;\n+\n+    DocIdReaderWriter(File segmentIndexDir, String column, int numDocs)\n+        throws Exception {\n+      int length = Integer.BYTES * numDocs;\n+      File docIdMappingFile = new File(SegmentDirectoryPaths.findSegmentDirectory(segmentIndexDir),\n+          column + LUCENE_TEXT_INDEX_DOCID_MAPPING_FILE_EXTENSION);\n+      // The mapping is local to a segment. It is created on the server during segment load.\n+      // Unless we are running Pinot on Solaris/SPARC, the underlying architecture is\n+      // LITTLE_ENDIAN (Linux/x86). So use that as byte order.\n+      if (docIdMappingFile.exists()) {\n+        // we will be here for segment reload and server restart\n+        // for refresh, we will not be here since segment is deleted/replaced\n+        // TODO: see if we can prefetch the pages\n+        _mappingExists = true;\n+        _buffer = PinotDataBuffer.mapFile(docIdMappingFile, /* readOnly */ true, 0, length, ByteOrder.LITTLE_ENDIAN,\n+            _column + getClass().getSimpleName());\n+      } else {\n+        _mappingExists = false;\n+        _buffer = PinotDataBuffer.mapFile(docIdMappingFile, /* readOnly */ false, 0, length, ByteOrder.LITTLE_ENDIAN,\n+            _column + getClass().getSimpleName());\n+      }\n+    }\n+\n+    public void buildDocIdMapping(int numDocs) {\n+      if (!_mappingExists) {\n+        for (int i = 0; i < numDocs; i++) {\n+          try {\n+            Document document = _indexSearcher.doc(i);\n+            int pinotDocId = Integer.valueOf(document.get(LuceneTextIndexCreator.LUCENE_INDEX_DOC_ID_COLUMN_NAME));\n+            _buffer.putInt(i * Integer.BYTES, pinotDocId);\n+          } catch (Exception e) {\n+            throw new RuntimeException(\"Failed to build doc id mapping during segment load: \" + e);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDU3Mjg5Mw=="}, "originalCommit": {"oid": "8f6ad20cd28fafb5b63f9526b6b0a942c552ef4b"}, "originalPosition": 121}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4NDE0OTAwOnYy", "diffSide": "RIGHT", "path": "pinot-core/src/main/java/org/apache/pinot/core/segment/index/readers/text/LuceneTextIndexReader.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQwMDo1Nzo0MVrOF-Bihg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQwMToyNTowN1rOF-CADQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDU4MTI1NA==", "bodyText": "If you want to keep the context of the exception, put it into the RuntimeException", "url": "https://github.com/apache/pinot/pull/5177#discussion_r400581254", "createdAt": "2020-03-31T00:57:41Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/segment/index/readers/text/LuceneTextIndexReader.java", "diffHunk": "@@ -123,8 +133,7 @@ public MutableRoaringBitmap getDocIds(Object value) {\n       _indexSearcher.search(query, docIDCollector);\n       return getPinotDocIds(docIDs);\n     } catch (Exception e) {\n-      LOGGER.error(\"Failed while searching the text index for column {}, search query {}, exception {}\", _column,\n-          searchQuery, e.getMessage());\n+      LOGGER.error(\"Failed while searching the text index for column {}, search query {},\", _column, searchQuery);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cf80eef3101b78c15ff4504e77c364324567b506"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDU4ODgxMw==", "bodyText": "used in message of RuntimeException", "url": "https://github.com/apache/pinot/pull/5177#discussion_r400588813", "createdAt": "2020-03-31T01:25:07Z", "author": {"login": "siddharthteotia"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/segment/index/readers/text/LuceneTextIndexReader.java", "diffHunk": "@@ -123,8 +133,7 @@ public MutableRoaringBitmap getDocIds(Object value) {\n       _indexSearcher.search(query, docIDCollector);\n       return getPinotDocIds(docIDs);\n     } catch (Exception e) {\n-      LOGGER.error(\"Failed while searching the text index for column {}, search query {}, exception {}\", _column,\n-          searchQuery, e.getMessage());\n+      LOGGER.error(\"Failed while searching the text index for column {}, search query {},\", _column, searchQuery);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDU4MTI1NA=="}, "originalCommit": {"oid": "cf80eef3101b78c15ff4504e77c364324567b506"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4NDE1MzQyOnYy", "diffSide": "RIGHT", "path": "pinot-core/src/main/java/org/apache/pinot/core/segment/index/readers/text/LuceneTextIndexReader.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQwMDo1OTo1M1rOF-Bk_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQwMToyNTowNVrOF-B__w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDU4MTg4Ng==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        throw new RuntimeException(\"Failed to build doc id mapping during segment load, \" + e);\n          \n          \n            \n                        throw new RuntimeException(\"Caught exception while building doc id mapping for text index column: \" + column, e);", "url": "https://github.com/apache/pinot/pull/5177#discussion_r400581886", "createdAt": "2020-03-31T00:59:53Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/segment/index/readers/text/LuceneTextIndexReader.java", "diffHunk": "@@ -169,5 +173,50 @@ public void close()\n       throws IOException {\n     _indexReader.close();\n     _indexDirectory.close();\n+    _docIdTranslator.close();\n+  }\n+\n+  private static class DocIdTranslator implements Closeable {\n+    final PinotDataBuffer _buffer;\n+\n+    DocIdTranslator(File segmentIndexDir, String column, int numDocs, IndexSearcher indexSearcher)\n+        throws Exception {\n+      int length = Integer.BYTES * numDocs;\n+      File docIdMappingFile = new File(SegmentDirectoryPaths.findSegmentDirectory(segmentIndexDir),\n+          column + LUCENE_TEXT_INDEX_DOCID_MAPPING_FILE_EXTENSION);\n+      // The mapping is local to a segment. It is created on the server during segment load.\n+      // Unless we are running Pinot on Solaris/SPARC, the underlying architecture is\n+      // LITTLE_ENDIAN (Linux/x86). So use that as byte order.\n+      String desc = \"Text index docId mapping buffer: \" + column;\n+      if (docIdMappingFile.exists()) {\n+        // we will be here for segment reload and server restart\n+        // for refresh, we will not be here since segment is deleted/replaced\n+        // TODO: see if we can prefetch the pages\n+        _buffer =\n+            PinotDataBuffer.mapFile(docIdMappingFile, /* readOnly */ true, 0, length, ByteOrder.LITTLE_ENDIAN, desc);\n+      } else {\n+        _buffer =\n+            PinotDataBuffer.mapFile(docIdMappingFile, /* readOnly */ false, 0, length, ByteOrder.LITTLE_ENDIAN, desc);\n+        for (int i = 0; i < numDocs; i++) {\n+          try {\n+            Document document = indexSearcher.doc(i);\n+            int pinotDocId = Integer.parseInt(document.get(LuceneTextIndexCreator.LUCENE_INDEX_DOC_ID_COLUMN_NAME));\n+            _buffer.putInt(i * Integer.BYTES, pinotDocId);\n+          } catch (Exception e) {\n+            throw new RuntimeException(\"Failed to build doc id mapping during segment load, \" + e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cf80eef3101b78c15ff4504e77c364324567b506"}, "originalPosition": 119}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDU4ODc5OQ==", "bodyText": "done", "url": "https://github.com/apache/pinot/pull/5177#discussion_r400588799", "createdAt": "2020-03-31T01:25:05Z", "author": {"login": "siddharthteotia"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/segment/index/readers/text/LuceneTextIndexReader.java", "diffHunk": "@@ -169,5 +173,50 @@ public void close()\n       throws IOException {\n     _indexReader.close();\n     _indexDirectory.close();\n+    _docIdTranslator.close();\n+  }\n+\n+  private static class DocIdTranslator implements Closeable {\n+    final PinotDataBuffer _buffer;\n+\n+    DocIdTranslator(File segmentIndexDir, String column, int numDocs, IndexSearcher indexSearcher)\n+        throws Exception {\n+      int length = Integer.BYTES * numDocs;\n+      File docIdMappingFile = new File(SegmentDirectoryPaths.findSegmentDirectory(segmentIndexDir),\n+          column + LUCENE_TEXT_INDEX_DOCID_MAPPING_FILE_EXTENSION);\n+      // The mapping is local to a segment. It is created on the server during segment load.\n+      // Unless we are running Pinot on Solaris/SPARC, the underlying architecture is\n+      // LITTLE_ENDIAN (Linux/x86). So use that as byte order.\n+      String desc = \"Text index docId mapping buffer: \" + column;\n+      if (docIdMappingFile.exists()) {\n+        // we will be here for segment reload and server restart\n+        // for refresh, we will not be here since segment is deleted/replaced\n+        // TODO: see if we can prefetch the pages\n+        _buffer =\n+            PinotDataBuffer.mapFile(docIdMappingFile, /* readOnly */ true, 0, length, ByteOrder.LITTLE_ENDIAN, desc);\n+      } else {\n+        _buffer =\n+            PinotDataBuffer.mapFile(docIdMappingFile, /* readOnly */ false, 0, length, ByteOrder.LITTLE_ENDIAN, desc);\n+        for (int i = 0; i < numDocs; i++) {\n+          try {\n+            Document document = indexSearcher.doc(i);\n+            int pinotDocId = Integer.parseInt(document.get(LuceneTextIndexCreator.LUCENE_INDEX_DOC_ID_COLUMN_NAME));\n+            _buffer.putInt(i * Integer.BYTES, pinotDocId);\n+          } catch (Exception e) {\n+            throw new RuntimeException(\"Failed to build doc id mapping during segment load, \" + e);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDU4MTg4Ng=="}, "originalCommit": {"oid": "cf80eef3101b78c15ff4504e77c364324567b506"}, "originalPosition": 119}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4NDE1OTUzOnYy", "diffSide": "RIGHT", "path": "pinot-core/src/main/java/org/apache/pinot/core/segment/index/readers/text/LuceneTextIndexReader.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQwMTowMzoxOFrOF-BouQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQwMTowMzoxOFrOF-BouQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDU4Mjg0MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  throw new RuntimeException(e);\n          \n          \n            \n                  throw new RuntimeException(\"Caught exception while searching the text index column: \" + _column + \" with query: \" + searchQuery, e);", "url": "https://github.com/apache/pinot/pull/5177#discussion_r400582841", "createdAt": "2020-03-31T01:03:18Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/segment/index/readers/text/LuceneTextIndexReader.java", "diffHunk": "@@ -123,8 +133,7 @@ public MutableRoaringBitmap getDocIds(Object value) {\n       _indexSearcher.search(query, docIDCollector);\n       return getPinotDocIds(docIDs);\n     } catch (Exception e) {\n-      LOGGER.error(\"Failed while searching the text index for column {}, search query {}, exception {}\", _column,\n-          searchQuery, e.getMessage());\n+      LOGGER.error(\"Failed while searching the text index for column {}, search query {},\", _column, searchQuery);\n       throw new RuntimeException(e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cf80eef3101b78c15ff4504e77c364324567b506"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4NDE2Mjg2OnYy", "diffSide": "RIGHT", "path": "pinot-core/src/main/java/org/apache/pinot/core/segment/index/readers/text/LuceneTextIndexReader.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQwMTowNDo1NFrOF-Bqmw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQwMToyNToxMFrOF-CAGA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDU4MzMyMw==", "bodyText": "Pass in luceneDocId and wrap the _buffer.getInt(luceneDocId * Integer.BYTES) logic inside", "url": "https://github.com/apache/pinot/pull/5177#discussion_r400583323", "createdAt": "2020-03-31T01:04:54Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/segment/index/readers/text/LuceneTextIndexReader.java", "diffHunk": "@@ -169,5 +173,50 @@ public void close()\n       throws IOException {\n     _indexReader.close();\n     _indexDirectory.close();\n+    _docIdTranslator.close();\n+  }\n+\n+  private static class DocIdTranslator implements Closeable {\n+    final PinotDataBuffer _buffer;\n+\n+    DocIdTranslator(File segmentIndexDir, String column, int numDocs, IndexSearcher indexSearcher)\n+        throws Exception {\n+      int length = Integer.BYTES * numDocs;\n+      File docIdMappingFile = new File(SegmentDirectoryPaths.findSegmentDirectory(segmentIndexDir),\n+          column + LUCENE_TEXT_INDEX_DOCID_MAPPING_FILE_EXTENSION);\n+      // The mapping is local to a segment. It is created on the server during segment load.\n+      // Unless we are running Pinot on Solaris/SPARC, the underlying architecture is\n+      // LITTLE_ENDIAN (Linux/x86). So use that as byte order.\n+      String desc = \"Text index docId mapping buffer: \" + column;\n+      if (docIdMappingFile.exists()) {\n+        // we will be here for segment reload and server restart\n+        // for refresh, we will not be here since segment is deleted/replaced\n+        // TODO: see if we can prefetch the pages\n+        _buffer =\n+            PinotDataBuffer.mapFile(docIdMappingFile, /* readOnly */ true, 0, length, ByteOrder.LITTLE_ENDIAN, desc);\n+      } else {\n+        _buffer =\n+            PinotDataBuffer.mapFile(docIdMappingFile, /* readOnly */ false, 0, length, ByteOrder.LITTLE_ENDIAN, desc);\n+        for (int i = 0; i < numDocs; i++) {\n+          try {\n+            Document document = indexSearcher.doc(i);\n+            int pinotDocId = Integer.parseInt(document.get(LuceneTextIndexCreator.LUCENE_INDEX_DOC_ID_COLUMN_NAME));\n+            _buffer.putInt(i * Integer.BYTES, pinotDocId);\n+          } catch (Exception e) {\n+            throw new RuntimeException(\"Failed to build doc id mapping during segment load, \" + e);\n+          }\n+        }\n+      }\n+    }\n+\n+    int getPinotDocId(int offset) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cf80eef3101b78c15ff4504e77c364324567b506"}, "originalPosition": 125}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDU4ODgyNA==", "bodyText": "Good catch. Done", "url": "https://github.com/apache/pinot/pull/5177#discussion_r400588824", "createdAt": "2020-03-31T01:25:10Z", "author": {"login": "siddharthteotia"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/segment/index/readers/text/LuceneTextIndexReader.java", "diffHunk": "@@ -169,5 +173,50 @@ public void close()\n       throws IOException {\n     _indexReader.close();\n     _indexDirectory.close();\n+    _docIdTranslator.close();\n+  }\n+\n+  private static class DocIdTranslator implements Closeable {\n+    final PinotDataBuffer _buffer;\n+\n+    DocIdTranslator(File segmentIndexDir, String column, int numDocs, IndexSearcher indexSearcher)\n+        throws Exception {\n+      int length = Integer.BYTES * numDocs;\n+      File docIdMappingFile = new File(SegmentDirectoryPaths.findSegmentDirectory(segmentIndexDir),\n+          column + LUCENE_TEXT_INDEX_DOCID_MAPPING_FILE_EXTENSION);\n+      // The mapping is local to a segment. It is created on the server during segment load.\n+      // Unless we are running Pinot on Solaris/SPARC, the underlying architecture is\n+      // LITTLE_ENDIAN (Linux/x86). So use that as byte order.\n+      String desc = \"Text index docId mapping buffer: \" + column;\n+      if (docIdMappingFile.exists()) {\n+        // we will be here for segment reload and server restart\n+        // for refresh, we will not be here since segment is deleted/replaced\n+        // TODO: see if we can prefetch the pages\n+        _buffer =\n+            PinotDataBuffer.mapFile(docIdMappingFile, /* readOnly */ true, 0, length, ByteOrder.LITTLE_ENDIAN, desc);\n+      } else {\n+        _buffer =\n+            PinotDataBuffer.mapFile(docIdMappingFile, /* readOnly */ false, 0, length, ByteOrder.LITTLE_ENDIAN, desc);\n+        for (int i = 0; i < numDocs; i++) {\n+          try {\n+            Document document = indexSearcher.doc(i);\n+            int pinotDocId = Integer.parseInt(document.get(LuceneTextIndexCreator.LUCENE_INDEX_DOC_ID_COLUMN_NAME));\n+            _buffer.putInt(i * Integer.BYTES, pinotDocId);\n+          } catch (Exception e) {\n+            throw new RuntimeException(\"Failed to build doc id mapping during segment load, \" + e);\n+          }\n+        }\n+      }\n+    }\n+\n+    int getPinotDocId(int offset) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDU4MzMyMw=="}, "originalCommit": {"oid": "cf80eef3101b78c15ff4504e77c364324567b506"}, "originalPosition": 125}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3318, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}