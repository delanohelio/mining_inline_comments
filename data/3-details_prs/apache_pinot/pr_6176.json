{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA4NTAxMzYw", "number": 6176, "title": "Merge common APIs for Dictionary", "bodyText": "Description\nMotivation:\nCurrently the APIs for Dictionary is split in 3 places: Dictionary, BaseImmutableDictionary, BaseMutableDictionary. In order to use them, we need to cast the dictionary first, which is hard to manage and can potentially cause casting error.\nE.g. #6174 is caused by casting an immutable dictionary to BaseMutableDictionary.\nWe should move the common read APIs to the root Dictionary interface to avoid the casting, and let all types of dictionary support these APIs.\nMerge the following common APIs from BaseImmutableDictionary and BaseMutableDictionary to Dictionary:\n\ninsertionIndexOf\ngetDictIdsInRange\ncompare\ngetMinVal\ngetMaxVal\ngetSortedValues", "createdAt": "2020-10-22T19:10:18Z", "url": "https://github.com/apache/pinot/pull/6176", "merged": true, "mergeCommit": {"oid": "73d2839ac1cd094072c3c031008d6335527c29da"}, "closed": true, "closedAt": "2020-10-23T01:42:38Z", "author": {"login": "Jackie-Jiang"}, "timelineItems": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdVGtnbAH2gAyNTA4NTAxMzYwOjliMWJhMGI1MDYyNzdkZWRkYzIyZjZhZTMxZDdiYTliODdkMzAwNTI=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdVLb-AgFqTUxNTIwNjI0Mw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "9b1ba0b506277deddc22f6ae31d7ba9b87d30052", "author": {"user": {"login": "Jackie-Jiang", "name": "Xiaotian (Jackie) Jiang"}}, "url": "https://github.com/apache/pinot/commit/9b1ba0b506277deddc22f6ae31d7ba9b87d30052", "committedDate": "2020-10-22T18:58:54Z", "message": "Merge common APIs for Dictionary"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE1MDUwNjkz", "url": "https://github.com/apache/pinot/pull/6176#pullrequestreview-515050693", "createdAt": "2020-10-22T19:27:32Z", "commit": {"oid": "9b1ba0b506277deddc22f6ae31d7ba9b87d30052"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQxOToyNzozM1rOHmwmzg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQxOTozMDowM1rOHmwsLg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDQwNDMwMg==", "bodyText": "why is this unsupported? since it returns true for isSorted", "url": "https://github.com/apache/pinot/pull/6176#discussion_r510404302", "createdAt": "2020-10-22T19:27:33Z", "author": {"login": "yupeng9"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/segment/index/readers/BaseImmutableDictionary.java", "diffHunk": "@@ -81,6 +80,31 @@ public int indexOf(String stringValue) {\n     return (index >= 0) ? index : NULL_VALUE_INDEX;\n   }\n \n+  @Override\n+  public IntSet getDictIdsInRange(String lower, String upper, boolean includeLower, boolean includeUpper) {\n+    throw new UnsupportedOperationException();\n+  }\n+\n+  @Override\n+  public int compare(int dictId1, int dictId2) {\n+    return Integer.compare(dictId1, dictId2);\n+  }\n+\n+  @Override\n+  public Comparable getMinVal() {\n+    return (Comparable) get(0);\n+  }\n+\n+  @Override\n+  public Comparable getMaxVal() {\n+    return (Comparable) get(_length - 1);\n+  }\n+\n+  @Override\n+  public Object getSortedValues() {\n+    throw new UnsupportedOperationException();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9b1ba0b506277deddc22f6ae31d7ba9b87d30052"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDQwNDU3Mg==", "bodyText": "why can this be supported?", "url": "https://github.com/apache/pinot/pull/6176#discussion_r510404572", "createdAt": "2020-10-22T19:28:06Z", "author": {"login": "yupeng9"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/segment/index/readers/BaseImmutableDictionary.java", "diffHunk": "@@ -81,6 +80,31 @@ public int indexOf(String stringValue) {\n     return (index >= 0) ? index : NULL_VALUE_INDEX;\n   }\n \n+  @Override\n+  public IntSet getDictIdsInRange(String lower, String upper, boolean includeLower, boolean includeUpper) {\n+    throw new UnsupportedOperationException();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9b1ba0b506277deddc22f6ae31d7ba9b87d30052"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDQwNTY3OA==", "bodyText": "If you want a default impl, then perhaps just remove it, so the subclass must implement it.", "url": "https://github.com/apache/pinot/pull/6176#discussion_r510405678", "createdAt": "2020-10-22T19:30:03Z", "author": {"login": "yupeng9"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/segment/index/readers/BaseImmutableDictionary.java", "diffHunk": "@@ -81,6 +80,31 @@ public int indexOf(String stringValue) {\n     return (index >= 0) ? index : NULL_VALUE_INDEX;\n   }\n \n+  @Override\n+  public IntSet getDictIdsInRange(String lower, String upper, boolean includeLower, boolean includeUpper) {\n+    throw new UnsupportedOperationException();\n+  }\n+\n+  @Override\n+  public int compare(int dictId1, int dictId2) {\n+    return Integer.compare(dictId1, dictId2);\n+  }\n+\n+  @Override\n+  public Comparable getMinVal() {\n+    return (Comparable) get(0);\n+  }\n+\n+  @Override\n+  public Comparable getMaxVal() {\n+    return (Comparable) get(_length - 1);\n+  }\n+\n+  @Override\n+  public Object getSortedValues() {\n+    throw new UnsupportedOperationException();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDQwNDMwMg=="}, "originalCommit": {"oid": "9b1ba0b506277deddc22f6ae31d7ba9b87d30052"}, "originalPosition": 64}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE1MDk2MzAy", "url": "https://github.com/apache/pinot/pull/6176#pullrequestreview-515096302", "createdAt": "2020-10-22T20:32:18Z", "commit": {"oid": "9b1ba0b506277deddc22f6ae31d7ba9b87d30052"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQyMDozMjoxOVrOHmyu6w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQyMDozMjoxOVrOHmyu6w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDQzOTE0Nw==", "bodyText": "NIT: dictionary-> dictionaries", "url": "https://github.com/apache/pinot/pull/6176#discussion_r510439147", "createdAt": "2020-10-22T20:32:19Z", "author": {"login": "chenboat"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/segment/index/readers/Dictionary.java", "diffHunk": "@@ -40,14 +42,52 @@\n    */\n   DataType getValueType();\n \n+  /**\n+   * Returns the number of values in the dictionary.\n+   */\n   int length();\n \n   /**\n    * Returns the index of the string representation of the value in the dictionary, or {@link #NULL_VALUE_INDEX} (-1) if\n-   * the value does not exist. This API is for cross-type predicate evaluation.\n+   * the value does not exist. This method is for the cross-type predicate evaluation.\n    */\n   int indexOf(String stringValue);\n \n+  /**\n+   * Returns the insertion index of the string representation of the value in the dictionary. This method follows the\n+   * same behavior as in {@link Arrays#binarySearch(Object[], Object)}. All sorted dictionary should support this", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9b1ba0b506277deddc22f6ae31d7ba9b87d30052"}, "originalPosition": 43}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE1MDk3Mzg2", "url": "https://github.com/apache/pinot/pull/6176#pullrequestreview-515097386", "createdAt": "2020-10-22T20:33:49Z", "commit": {"oid": "9b1ba0b506277deddc22f6ae31d7ba9b87d30052"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQyMDozMzo1MFrOHmyx-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQyMDozMzo1MFrOHmyx-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDQzOTkyOA==", "bodyText": "is it string value comparison?", "url": "https://github.com/apache/pinot/pull/6176#discussion_r510439928", "createdAt": "2020-10-22T20:33:50Z", "author": {"login": "chenboat"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/segment/index/readers/Dictionary.java", "diffHunk": "@@ -40,14 +42,52 @@\n    */\n   DataType getValueType();\n \n+  /**\n+   * Returns the number of values in the dictionary.\n+   */\n   int length();\n \n   /**\n    * Returns the index of the string representation of the value in the dictionary, or {@link #NULL_VALUE_INDEX} (-1) if\n-   * the value does not exist. This API is for cross-type predicate evaluation.\n+   * the value does not exist. This method is for the cross-type predicate evaluation.\n    */\n   int indexOf(String stringValue);\n \n+  /**\n+   * Returns the insertion index of the string representation of the value in the dictionary. This method follows the\n+   * same behavior as in {@link Arrays#binarySearch(Object[], Object)}. All sorted dictionary should support this\n+   * method. This method is for the range predicate evaluation.\n+   */\n+  int insertionIndexOf(String stringValue);\n+\n+  /**\n+   * Returns a set of dictIds in the given value range, where lower/upper bound can be \"*\" which indicates unbounded\n+   * range. All unsorted dictionary should support this method. This method is for the range predicate evaluation.\n+   */\n+  IntSet getDictIdsInRange(String lower, String upper, boolean includeLower, boolean includeUpper);\n+\n+  /**\n+   * Returns the comparison result of value for dictId 1 and dictId 2, i.e. {@code value1.compareTo(value2)}.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9b1ba0b506277deddc22f6ae31d7ba9b87d30052"}, "originalPosition": 55}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE1MDk4MDI2", "url": "https://github.com/apache/pinot/pull/6176#pullrequestreview-515098026", "createdAt": "2020-10-22T20:34:47Z", "commit": {"oid": "9b1ba0b506277deddc22f6ae31d7ba9b87d30052"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQyMDozNDo0N1rOHmy0Ag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQyMDozNDo0N1rOHmy0Ag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDQ0MDQ1MA==", "bodyText": "what happens if the dictionary is empty?", "url": "https://github.com/apache/pinot/pull/6176#discussion_r510440450", "createdAt": "2020-10-22T20:34:47Z", "author": {"login": "chenboat"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/segment/index/readers/Dictionary.java", "diffHunk": "@@ -40,14 +42,52 @@\n    */\n   DataType getValueType();\n \n+  /**\n+   * Returns the number of values in the dictionary.\n+   */\n   int length();\n \n   /**\n    * Returns the index of the string representation of the value in the dictionary, or {@link #NULL_VALUE_INDEX} (-1) if\n-   * the value does not exist. This API is for cross-type predicate evaluation.\n+   * the value does not exist. This method is for the cross-type predicate evaluation.\n    */\n   int indexOf(String stringValue);\n \n+  /**\n+   * Returns the insertion index of the string representation of the value in the dictionary. This method follows the\n+   * same behavior as in {@link Arrays#binarySearch(Object[], Object)}. All sorted dictionary should support this\n+   * method. This method is for the range predicate evaluation.\n+   */\n+  int insertionIndexOf(String stringValue);\n+\n+  /**\n+   * Returns a set of dictIds in the given value range, where lower/upper bound can be \"*\" which indicates unbounded\n+   * range. All unsorted dictionary should support this method. This method is for the range predicate evaluation.\n+   */\n+  IntSet getDictIdsInRange(String lower, String upper, boolean includeLower, boolean includeUpper);\n+\n+  /**\n+   * Returns the comparison result of value for dictId 1 and dictId 2, i.e. {@code value1.compareTo(value2)}.\n+   */\n+  int compare(int dictId1, int dictId2);\n+\n+  /**\n+   * Returns the minimum value in the dictionary. Note that for type BYTES, {@code ByteArray} will be returned.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9b1ba0b506277deddc22f6ae31d7ba9b87d30052"}, "originalPosition": 60}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1abcae59c963e3e6da0550febbe83f5b402be1f6", "author": {"user": {"login": "Jackie-Jiang", "name": "Xiaotian (Jackie) Jiang"}}, "url": "https://github.com/apache/pinot/commit/1abcae59c963e3e6da0550febbe83f5b402be1f6", "committedDate": "2020-10-22T20:46:25Z", "message": "Fix test and address comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE1MTA2NzAx", "url": "https://github.com/apache/pinot/pull/6176#pullrequestreview-515106701", "createdAt": "2020-10-22T20:48:14Z", "commit": {"oid": "9b1ba0b506277deddc22f6ae31d7ba9b87d30052"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQyMDo0ODoxNFrOHmzO6Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQyMDo0ODoxNFrOHmzO6Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDQ0NzMzNw==", "bodyText": "is this change related to this API refactoring? I did not see any change to OfflineDictionaryBasedRangePredicateEvaluator in this PR.", "url": "https://github.com/apache/pinot/pull/6176#discussion_r510447337", "createdAt": "2020-10-22T20:48:14Z", "author": {"login": "chenboat"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/operator/filter/RangeIndexBasedFilterOperator.java", "diffHunk": "@@ -56,12 +56,12 @@ protected FilterBlock getNextBlock() {\n \n     int firstRangeId;\n     int lastRangeId;\n-    if (_rangePredicateEvaluator instanceof OfflineDictionaryBasedRangePredicateEvaluator) {\n+    if (_rangePredicateEvaluator instanceof SortedDictionaryBasedRangePredicateEvaluator) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9b1ba0b506277deddc22f6ae31d7ba9b87d30052"}, "originalPosition": 14}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE1MTI3OTQ4", "url": "https://github.com/apache/pinot/pull/6176#pullrequestreview-515127948", "createdAt": "2020-10-22T21:20:24Z", "commit": {"oid": "1abcae59c963e3e6da0550febbe83f5b402be1f6"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE1MjA2MjQz", "url": "https://github.com/apache/pinot/pull/6176#pullrequestreview-515206243", "createdAt": "2020-10-23T00:29:09Z", "commit": {"oid": "1abcae59c963e3e6da0550febbe83f5b402be1f6"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1637, "cost": 1, "resetAt": "2021-10-28T17:48:14Z"}}}