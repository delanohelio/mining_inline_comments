{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA1NDI4Mjcw", "number": 5271, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxOTo0NzoyNlrODz5MQg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxOTo1MDozN1rODz5RIA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1NzQwOTk0OnYy", "diffSide": "RIGHT", "path": "pinot-tools/src/main/java/org/apache/pinot/tools/admin/command/CreateSegmentCommand.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxOTo0NzoyNlrOGIk1OQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQyMDowNTo1M1rOGIlgAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTY0NTI0MQ==", "bodyText": "Delete the local file after generating the segment? (Also recommend putting it into a temp dir)\nAlso, not sure if it is a good idea directly using the file name because there might be conflict for nested dir.", "url": "https://github.com/apache/pinot/pull/5271#discussion_r411645241", "createdAt": "2020-04-20T19:47:26Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-tools/src/main/java/org/apache/pinot/tools/admin/command/CreateSegmentCommand.java", "diffHunk": "@@ -334,10 +333,10 @@ public void run() {\n           for (int curr = 0; curr <= _retry; curr++) {\n             try {\n               SegmentGeneratorConfig config = new SegmentGeneratorConfig(segmentGeneratorConfig);\n-\n-              String localFile = dataFilePath.getName();\n-              Path localFilePath = new Path(localFile);\n-              dataDirPath.getFileSystem(new Configuration()).copyToLocalFile(dataFilePath, localFilePath);\n+              URI dataFileUri = URI.create(dataFilePath);\n+              String[] splits = dataFilePath.split(\"/\");\n+              String localFile = splits[splits.length - 1];", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "32674d0d286faaf269692af09999b5fd19fac83f"}, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTY1NjE5Mw==", "bodyText": "create a random local directory and copy file into it, then delete the directory after segment creation", "url": "https://github.com/apache/pinot/pull/5271#discussion_r411656193", "createdAt": "2020-04-20T20:05:53Z", "author": {"login": "xiangfu0"}, "path": "pinot-tools/src/main/java/org/apache/pinot/tools/admin/command/CreateSegmentCommand.java", "diffHunk": "@@ -334,10 +333,10 @@ public void run() {\n           for (int curr = 0; curr <= _retry; curr++) {\n             try {\n               SegmentGeneratorConfig config = new SegmentGeneratorConfig(segmentGeneratorConfig);\n-\n-              String localFile = dataFilePath.getName();\n-              Path localFilePath = new Path(localFile);\n-              dataDirPath.getFileSystem(new Configuration()).copyToLocalFile(dataFilePath, localFilePath);\n+              URI dataFileUri = URI.create(dataFilePath);\n+              String[] splits = dataFilePath.split(\"/\");\n+              String localFile = splits[splits.length - 1];", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTY0NTI0MQ=="}, "originalCommit": {"oid": "32674d0d286faaf269692af09999b5fd19fac83f"}, "originalPosition": 78}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1NzQyMjQwOnYy", "diffSide": "RIGHT", "path": "pinot-tools/src/main/java/org/apache/pinot/tools/streams/githubevents/PullRequestMergedEventsStream.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxOTo1MDozN1rOGIk8jw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQyMDowNToxMVrOGIleQA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTY0NzExOQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        commits = OBJECT_MAPPER.reader().readTree(commitsResponse.responseString);\n          \n          \n            \n                        commits = JsonUtils.stringToJsonNode(commitsResponse.responseString);\n          \n      \n    \n    \n  \n\nSame for other places. No need to construct another object mapper", "url": "https://github.com/apache/pinot/pull/5271#discussion_r411647119", "createdAt": "2020-04-20T19:50:37Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-tools/src/main/java/org/apache/pinot/tools/streams/githubevents/PullRequestMergedEventsStream.java", "diffHunk": "@@ -206,41 +215,41 @@ public void start() {\n    * Find commits, review comments, comments corresponding to this pull request event.\n    * Construct a PullRequestMergedEvent with the help of the event, commits, review comments and comments.\n    * Converts PullRequestMergedEvent to GenericRecord\n+   * @param event\n    */\n-  private GenericRecord convertToPullRequestMergedGenericRecord(JsonElement eventJson)\n+  private GenericRecord convertToPullRequestMergedGenericRecord(JsonNode event)\n       throws IOException {\n     GenericRecord genericRecord = null;\n-    JsonObject event = eventJson.getAsJsonObject();\n-    String type = event.get(\"type\").getAsString();\n+    String type = event.get(\"type\").asText();\n \n     if (\"PullRequestEvent\".equals(type)) {\n-      JsonObject payload = event.get(\"payload\").getAsJsonObject();\n+      JsonNode payload = event.get(\"payload\");\n       if (payload != null) {\n-        String action = payload.get(\"action\").getAsString();\n-        JsonObject pullRequest = payload.get(\"pull_request\").getAsJsonObject();\n-        String merged = pullRequest.get(\"merged\").getAsString();\n+        String action = payload.get(\"action\").asText();\n+        JsonNode pullRequest = payload.get(\"pull_request\");\n+        String merged = pullRequest.get(\"merged\").asText();\n         if (\"closed\".equals(action) && \"true\".equals(merged)) { // valid pull request merge event\n \n-          JsonArray commits = null;\n-          String commitsURL = pullRequest.get(\"commits_url\").getAsString();\n+          JsonNode commits = null;\n+          String commitsURL = pullRequest.get(\"commits_url\").asText();\n           GitHubAPICaller.GitHubAPIResponse commitsResponse = _gitHubAPICaller.callAPI(commitsURL);\n \n           if (commitsResponse.responseString != null) {\n-            commits = new JsonParser().parse(commitsResponse.responseString).getAsJsonArray();\n+            commits = OBJECT_MAPPER.reader().readTree(commitsResponse.responseString);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "32674d0d286faaf269692af09999b5fd19fac83f"}, "originalPosition": 96}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTY1NTc0NA==", "bodyText": "done", "url": "https://github.com/apache/pinot/pull/5271#discussion_r411655744", "createdAt": "2020-04-20T20:05:11Z", "author": {"login": "xiangfu0"}, "path": "pinot-tools/src/main/java/org/apache/pinot/tools/streams/githubevents/PullRequestMergedEventsStream.java", "diffHunk": "@@ -206,41 +215,41 @@ public void start() {\n    * Find commits, review comments, comments corresponding to this pull request event.\n    * Construct a PullRequestMergedEvent with the help of the event, commits, review comments and comments.\n    * Converts PullRequestMergedEvent to GenericRecord\n+   * @param event\n    */\n-  private GenericRecord convertToPullRequestMergedGenericRecord(JsonElement eventJson)\n+  private GenericRecord convertToPullRequestMergedGenericRecord(JsonNode event)\n       throws IOException {\n     GenericRecord genericRecord = null;\n-    JsonObject event = eventJson.getAsJsonObject();\n-    String type = event.get(\"type\").getAsString();\n+    String type = event.get(\"type\").asText();\n \n     if (\"PullRequestEvent\".equals(type)) {\n-      JsonObject payload = event.get(\"payload\").getAsJsonObject();\n+      JsonNode payload = event.get(\"payload\");\n       if (payload != null) {\n-        String action = payload.get(\"action\").getAsString();\n-        JsonObject pullRequest = payload.get(\"pull_request\").getAsJsonObject();\n-        String merged = pullRequest.get(\"merged\").getAsString();\n+        String action = payload.get(\"action\").asText();\n+        JsonNode pullRequest = payload.get(\"pull_request\");\n+        String merged = pullRequest.get(\"merged\").asText();\n         if (\"closed\".equals(action) && \"true\".equals(merged)) { // valid pull request merge event\n \n-          JsonArray commits = null;\n-          String commitsURL = pullRequest.get(\"commits_url\").getAsString();\n+          JsonNode commits = null;\n+          String commitsURL = pullRequest.get(\"commits_url\").asText();\n           GitHubAPICaller.GitHubAPIResponse commitsResponse = _gitHubAPICaller.callAPI(commitsURL);\n \n           if (commitsResponse.responseString != null) {\n-            commits = new JsonParser().parse(commitsResponse.responseString).getAsJsonArray();\n+            commits = OBJECT_MAPPER.reader().readTree(commitsResponse.responseString);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTY0NzExOQ=="}, "originalCommit": {"oid": "32674d0d286faaf269692af09999b5fd19fac83f"}, "originalPosition": 96}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3423, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}