{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY3MjAwNDgy", "number": 5858, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QyMzozNzozN1rOEZQfvw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QyMzozODo0NlrOEZQglg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0OTIwMTI3OnYy", "diffSide": "RIGHT", "path": "pinot-core/src/main/java/org/apache/pinot/core/operator/combine/GroupByOrderByCombineOperator.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QyMzozNzozN1rOHB-Ucg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QyMzo1MToxMFrOHB-j1w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTgzMTY2Ng==", "bodyText": "why we separate single groupby ? for performance ?", "url": "https://github.com/apache/pinot/pull/5858#discussion_r471831666", "createdAt": "2020-08-17T23:37:37Z", "author": {"login": "xiangfu0"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/operator/combine/GroupByOrderByCombineOperator.java", "diffHunk": "@@ -155,33 +155,53 @@ public void runJob() {\n             // Merge aggregation group-by result.\n             AggregationGroupByResult aggregationGroupByResult = intermediateResultsBlock.getAggregationGroupByResult();\n             if (aggregationGroupByResult != null) {\n-              // Get converter functions\n-              Function[] converterFunctions = new Function[numGroupByExpressions];\n-              for (int i = 0; i < numGroupByExpressions; i++) {\n-                converterFunctions[i] = getConverterFunction(_dataSchema.getColumnDataType(i));\n-              }\n+              if (numGroupByExpressions == 1) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1d6266c6d6d3f36c8d4da287404e6a13c41164a1"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTgzNTYwNw==", "bodyText": "Yes. For single group-by, we don't need to split the string for each group key", "url": "https://github.com/apache/pinot/pull/5858#discussion_r471835607", "createdAt": "2020-08-17T23:51:10Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/operator/combine/GroupByOrderByCombineOperator.java", "diffHunk": "@@ -155,33 +155,53 @@ public void runJob() {\n             // Merge aggregation group-by result.\n             AggregationGroupByResult aggregationGroupByResult = intermediateResultsBlock.getAggregationGroupByResult();\n             if (aggregationGroupByResult != null) {\n-              // Get converter functions\n-              Function[] converterFunctions = new Function[numGroupByExpressions];\n-              for (int i = 0; i < numGroupByExpressions; i++) {\n-                converterFunctions[i] = getConverterFunction(_dataSchema.getColumnDataType(i));\n-              }\n+              if (numGroupByExpressions == 1) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTgzMTY2Ng=="}, "originalCommit": {"oid": "1d6266c6d6d3f36c8d4da287404e6a13c41164a1"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0OTIwMzQyOnYy", "diffSide": "RIGHT", "path": "pinot-core/src/main/java/org/apache/pinot/core/query/aggregation/groupby/AggregationGroupByTrimmingService.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QyMzozODo0NlrOHB-VpQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQwMDowMTozNFrOHB-vGA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTgzMTk3Mw==", "bodyText": "shall we stick to Preconditions.checkArgument?", "url": "https://github.com/apache/pinot/pull/5858#discussion_r471831973", "createdAt": "2020-08-17T23:38:46Z", "author": {"login": "xiangfu0"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/query/aggregation/groupby/AggregationGroupByTrimmingService.java", "diffHunk": "@@ -29,34 +28,39 @@\n import java.util.Map;\n import java.util.PriorityQueue;\n import java.util.TreeMap;\n-import javax.annotation.Nonnull;\n import org.apache.commons.collections.comparators.ComparableComparator;\n+import org.apache.commons.lang3.StringUtils;\n import org.apache.commons.lang3.tuple.ImmutablePair;\n import org.apache.pinot.common.response.broker.GroupByResult;\n import org.apache.pinot.core.query.aggregation.function.AggregationFunction;\n import org.apache.pinot.core.query.aggregation.function.AggregationFunctionUtils;\n import org.apache.pinot.core.query.aggregation.function.MinAggregationFunction;\n+import org.apache.pinot.core.query.request.context.ExpressionContext;\n+import org.apache.pinot.core.query.request.context.QueryContext;\n import org.apache.pinot.core.util.GroupByUtils;\n \n \n /**\n  * The <code>AggregationGroupByTrimmingService</code> class provides trimming service for aggregation group-by queries.\n  */\n+@SuppressWarnings({\"rawtypes\", \"unchecked\"})\n public class AggregationGroupByTrimmingService {\n-\n   private final AggregationFunction[] _aggregationFunctions;\n-  private final int _groupByTopN;\n+  private final int _numGroupByExpressions;\n+  private final int _limit;\n   private final int _trimSize;\n   private final int _trimThreshold;\n \n-  public AggregationGroupByTrimmingService(@Nonnull AggregationFunction[] aggregationFunctions, int groupByTopN) {\n-    Preconditions.checkArgument(groupByTopN > 0);\n-\n-    _aggregationFunctions = aggregationFunctions;\n-    _groupByTopN = groupByTopN;\n+  public AggregationGroupByTrimmingService(QueryContext queryContext) {\n+    _aggregationFunctions = queryContext.getAggregationFunctions();\n+    List<ExpressionContext> groupByExpressions = queryContext.getGroupByExpressions();\n+    assert groupByExpressions != null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1d6266c6d6d3f36c8d4da287404e6a13c41164a1"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTgzODQ4OA==", "bodyText": "I usually use assert to indicate that it is not possible to be null for readability, which will be ignored in production environment.\nPreconditions are used for catching the illegal user input and throw exceptions", "url": "https://github.com/apache/pinot/pull/5858#discussion_r471838488", "createdAt": "2020-08-18T00:01:34Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/query/aggregation/groupby/AggregationGroupByTrimmingService.java", "diffHunk": "@@ -29,34 +28,39 @@\n import java.util.Map;\n import java.util.PriorityQueue;\n import java.util.TreeMap;\n-import javax.annotation.Nonnull;\n import org.apache.commons.collections.comparators.ComparableComparator;\n+import org.apache.commons.lang3.StringUtils;\n import org.apache.commons.lang3.tuple.ImmutablePair;\n import org.apache.pinot.common.response.broker.GroupByResult;\n import org.apache.pinot.core.query.aggregation.function.AggregationFunction;\n import org.apache.pinot.core.query.aggregation.function.AggregationFunctionUtils;\n import org.apache.pinot.core.query.aggregation.function.MinAggregationFunction;\n+import org.apache.pinot.core.query.request.context.ExpressionContext;\n+import org.apache.pinot.core.query.request.context.QueryContext;\n import org.apache.pinot.core.util.GroupByUtils;\n \n \n /**\n  * The <code>AggregationGroupByTrimmingService</code> class provides trimming service for aggregation group-by queries.\n  */\n+@SuppressWarnings({\"rawtypes\", \"unchecked\"})\n public class AggregationGroupByTrimmingService {\n-\n   private final AggregationFunction[] _aggregationFunctions;\n-  private final int _groupByTopN;\n+  private final int _numGroupByExpressions;\n+  private final int _limit;\n   private final int _trimSize;\n   private final int _trimThreshold;\n \n-  public AggregationGroupByTrimmingService(@Nonnull AggregationFunction[] aggregationFunctions, int groupByTopN) {\n-    Preconditions.checkArgument(groupByTopN > 0);\n-\n-    _aggregationFunctions = aggregationFunctions;\n-    _groupByTopN = groupByTopN;\n+  public AggregationGroupByTrimmingService(QueryContext queryContext) {\n+    _aggregationFunctions = queryContext.getAggregationFunctions();\n+    List<ExpressionContext> groupByExpressions = queryContext.getGroupByExpressions();\n+    assert groupByExpressions != null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTgzMTk3Mw=="}, "originalCommit": {"oid": "1d6266c6d6d3f36c8d4da287404e6a13c41164a1"}, "originalPosition": 46}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3983, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}