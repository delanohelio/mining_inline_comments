{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDIwNTQ1ODMw", "number": 5419, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQxNzozMjoyM1rOD-Uhfw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQxODoyNDoyNVrOD-VpoA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2Njc0NTU5OnYy", "diffSide": "RIGHT", "path": "pinot-core/src/main/java/org/apache/pinot/core/query/aggregation/groupby/DictionaryBasedGroupKeyGenerator.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQxNzozMjoyM1rOGYWgLA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQxODoyNzozOFrOGYYeqg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODE4NzY5Mg==", "bodyText": "Use computeIfAbsent() to save one extra map lookup.\nAlso, because you already know the type of key holders, maybe add a separate class to store different type of holders without map lookup?", "url": "https://github.com/apache/pinot/pull/5419#discussion_r428187692", "createdAt": "2020-05-20T17:32:23Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/query/aggregation/groupby/DictionaryBasedGroupKeyGenerator.java", "diffHunk": "@@ -106,18 +108,26 @@ public DictionaryBasedGroupKeyGenerator(TransformOperator transformOperator,\n \n       _isSingleValueColumn[i] = transformOperator.getResultMetadata(groupByExpression).isSingleValue();\n     }\n-\n     if (longOverflow) {\n       _globalGroupIdUpperBound = numGroupsLimit;\n-      _rawKeyHolder = new ArrayMapBasedHolder(_globalGroupIdUpperBound);\n+      if (!mapBasedRawKeyHolders.containsKey(ArrayMapBasedHolder.class.getName())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1655c27c50df07bfab6863386150be8eccd0ac50"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODIyMDA3NA==", "bodyText": "those types are internal and not exposed outside DictionaryBasedGroupKeyGenerator.java", "url": "https://github.com/apache/pinot/pull/5419#discussion_r428220074", "createdAt": "2020-05-20T18:27:38Z", "author": {"login": "xiangfu0"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/query/aggregation/groupby/DictionaryBasedGroupKeyGenerator.java", "diffHunk": "@@ -106,18 +108,26 @@ public DictionaryBasedGroupKeyGenerator(TransformOperator transformOperator,\n \n       _isSingleValueColumn[i] = transformOperator.getResultMetadata(groupByExpression).isSingleValue();\n     }\n-\n     if (longOverflow) {\n       _globalGroupIdUpperBound = numGroupsLimit;\n-      _rawKeyHolder = new ArrayMapBasedHolder(_globalGroupIdUpperBound);\n+      if (!mapBasedRawKeyHolders.containsKey(ArrayMapBasedHolder.class.getName())) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODE4NzY5Mg=="}, "originalCommit": {"oid": "1655c27c50df07bfab6863386150be8eccd0ac50"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2NjkzMDI0OnYy", "diffSide": "RIGHT", "path": "pinot-core/src/main/java/org/apache/pinot/core/query/aggregation/groupby/DictionaryBasedGroupKeyGenerator.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQxODoyNDoyNVrOGYYXLw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQxODozMTo0MFrOGYYpOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODIxODE1OQ==", "bodyText": "I think initializing to _globalGroupIdUpperBound got introduced in #5291. For many cases with multiple group by columns (high cardinality and/or MV columns) this number can be huge. Unclear to me if making this thread-local will protect against such cases that may require allocating huge chunk of memory upfornt.", "url": "https://github.com/apache/pinot/pull/5419#discussion_r428218159", "createdAt": "2020-05-20T18:24:25Z", "author": {"login": "mayankshriv"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/query/aggregation/groupby/DictionaryBasedGroupKeyGenerator.java", "diffHunk": "@@ -106,18 +108,26 @@ public DictionaryBasedGroupKeyGenerator(TransformOperator transformOperator,\n \n       _isSingleValueColumn[i] = transformOperator.getResultMetadata(groupByExpression).isSingleValue();\n     }\n-\n     if (longOverflow) {\n       _globalGroupIdUpperBound = numGroupsLimit;\n-      _rawKeyHolder = new ArrayMapBasedHolder(_globalGroupIdUpperBound);\n+      if (!mapBasedRawKeyHolders.containsKey(ArrayMapBasedHolder.class.getName())) {\n+        mapBasedRawKeyHolders.put(ArrayMapBasedHolder.class.getName(), new ArrayMapBasedHolder(_globalGroupIdUpperBound).getInternal());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1655c27c50df07bfab6863386150be8eccd0ac50"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODIyMjc3Ng==", "bodyText": "True. I feel we may need to have a range of groupIdBound, and only do thread local for them. if it's too small or too large, maybe just create new objects without and with initial size.", "url": "https://github.com/apache/pinot/pull/5419#discussion_r428222776", "createdAt": "2020-05-20T18:31:40Z", "author": {"login": "xiangfu0"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/query/aggregation/groupby/DictionaryBasedGroupKeyGenerator.java", "diffHunk": "@@ -106,18 +108,26 @@ public DictionaryBasedGroupKeyGenerator(TransformOperator transformOperator,\n \n       _isSingleValueColumn[i] = transformOperator.getResultMetadata(groupByExpression).isSingleValue();\n     }\n-\n     if (longOverflow) {\n       _globalGroupIdUpperBound = numGroupsLimit;\n-      _rawKeyHolder = new ArrayMapBasedHolder(_globalGroupIdUpperBound);\n+      if (!mapBasedRawKeyHolders.containsKey(ArrayMapBasedHolder.class.getName())) {\n+        mapBasedRawKeyHolders.put(ArrayMapBasedHolder.class.getName(), new ArrayMapBasedHolder(_globalGroupIdUpperBound).getInternal());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODIxODE1OQ=="}, "originalCommit": {"oid": "1655c27c50df07bfab6863386150be8eccd0ac50"}, "originalPosition": 27}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4462, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}