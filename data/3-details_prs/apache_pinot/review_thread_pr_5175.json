{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkyNzc1NTIy", "number": 5175, "reviewThreads": {"totalCount": 34, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQwNToxMDozNVrODqpRxw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQxODo1Njo1OFrOD16YOw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2MDQzMDc5OnYy", "diffSide": "RIGHT", "path": "pinot-common/src/main/java/org/apache/pinot/common/config/TableConfig.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQwNToxMDozNVrOF6hLgA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQwMTo0Nzo0OVrOF7JXig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjkwNTM0NA==", "bodyText": "rename to IngestMode or just have a boolean enableUpsert?", "url": "https://github.com/apache/pinot/pull/5175#discussion_r396905344", "createdAt": "2020-03-24T05:10:35Z", "author": {"login": "kishoreg"}, "path": "pinot-common/src/main/java/org/apache/pinot/common/config/TableConfig.java", "diffHunk": "@@ -75,6 +79,9 @@\n   private Map<InstancePartitionsType, InstanceAssignmentConfig> _instanceAssignmentConfigMap;\n   private List<FieldConfig> _fieldConfigList;\n \n+  @JsonPropertyDescription(value = \"The update semantic of the table, either append or upsert, default as append\")\n+  private UpdateSemantic _updateSemantic;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "723f08aa12074f83ac31fdfe09b8dc1f0254f942"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzM2MDIzMw==", "bodyText": "Is this for real-time? We already have push type of either APPEND or REFRESH for offline; aggregateMetrics for real-time. What does UPSERT stand for?", "url": "https://github.com/apache/pinot/pull/5175#discussion_r397360233", "createdAt": "2020-03-24T18:08:01Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-common/src/main/java/org/apache/pinot/common/config/TableConfig.java", "diffHunk": "@@ -75,6 +79,9 @@\n   private Map<InstancePartitionsType, InstanceAssignmentConfig> _instanceAssignmentConfigMap;\n   private List<FieldConfig> _fieldConfigList;\n \n+  @JsonPropertyDescription(value = \"The update semantic of the table, either append or upsert, default as append\")\n+  private UpdateSemantic _updateSemantic;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjkwNTM0NA=="}, "originalCommit": {"oid": "723f08aa12074f83ac31fdfe09b8dc1f0254f942"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzU2Mzc4Ng==", "bodyText": "@kishoreg I am thinking if using enum here will be more flexible in the case of future features changes or whatnot. Boolean seems to be only limiting two options and it might limit what other changes we might want to do with pinot. Please let me what you think. ingestionMode definitely sounds more explicit than what I am using here and I will definite consider about this.\n@Jackie-Jiang yes. So basically it is previous old design about we want to support update in pinot realtime ingestion by adding override by primary key (eg, a second message in Kafka with the same primary key represents the update of existing key instead of two records with the same primary key). Upsert stands for this new ingestion semantic (insert if no duplicated primary key, update if duplicate primary key). This feature will be applying to realtime table only", "url": "https://github.com/apache/pinot/pull/5175#discussion_r397563786", "createdAt": "2020-03-25T01:47:49Z", "author": {"login": "jamesyfshao"}, "path": "pinot-common/src/main/java/org/apache/pinot/common/config/TableConfig.java", "diffHunk": "@@ -75,6 +79,9 @@\n   private Map<InstancePartitionsType, InstanceAssignmentConfig> _instanceAssignmentConfigMap;\n   private List<FieldConfig> _fieldConfigList;\n \n+  @JsonPropertyDescription(value = \"The update semantic of the table, either append or upsert, default as append\")\n+  private UpdateSemantic _updateSemantic;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjkwNTM0NA=="}, "originalCommit": {"oid": "723f08aa12074f83ac31fdfe09b8dc1f0254f942"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2MDQzNDAyOnYy", "diffSide": "RIGHT", "path": "pinot-common/src/main/java/org/apache/pinot/common/config/TableNameBuilder.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQwNToxMjozM1rOF6hNSQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQyMjoxMzowOFrOF_UhbA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjkwNTgwMQ==", "bodyText": "where is this used?", "url": "https://github.com/apache/pinot/pull/5175#discussion_r396905801", "createdAt": "2020-03-24T05:12:33Z", "author": {"login": "kishoreg"}, "path": "pinot-common/src/main/java/org/apache/pinot/common/config/TableNameBuilder.java", "diffHunk": "@@ -132,4 +132,19 @@ public static boolean isOfflineTableResource(String resourceName) {\n   public static boolean isRealtimeTableResource(String resourceName) {\n     return REALTIME.tableHasTypeSuffix(resourceName);\n   }\n+\n+  /**\n+   * ensure that table name ends with type info, if no, create one with the given type\n+   * @param tableName the name of the table\n+   * @param type the type of the table for it to fill in if the type info is missing\n+   * @return the table type name with the type info\n+   */\n+  public static String ensureTableNameWithType(String tableName, TableType type) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "723f08aa12074f83ac31fdfe09b8dc1f0254f942"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzM2MTY5Mg==", "bodyText": "Please use TableNameBuilder.forType(type).tableNameWithType(tableName)", "url": "https://github.com/apache/pinot/pull/5175#discussion_r397361692", "createdAt": "2020-03-24T18:10:21Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-common/src/main/java/org/apache/pinot/common/config/TableNameBuilder.java", "diffHunk": "@@ -132,4 +132,19 @@ public static boolean isOfflineTableResource(String resourceName) {\n   public static boolean isRealtimeTableResource(String resourceName) {\n     return REALTIME.tableHasTypeSuffix(resourceName);\n   }\n+\n+  /**\n+   * ensure that table name ends with type info, if no, create one with the given type\n+   * @param tableName the name of the table\n+   * @param type the type of the table for it to fill in if the type info is missing\n+   * @return the table type name with the type info\n+   */\n+  public static String ensureTableNameWithType(String tableName, TableType type) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjkwNTgwMQ=="}, "originalCommit": {"oid": "723f08aa12074f83ac31fdfe09b8dc1f0254f942"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTk0MDg0NA==", "bodyText": "removed this method, @kishoreg this method is used in other components that I will submit PR later", "url": "https://github.com/apache/pinot/pull/5175#discussion_r401940844", "createdAt": "2020-04-01T22:13:08Z", "author": {"login": "jamesyfshao"}, "path": "pinot-common/src/main/java/org/apache/pinot/common/config/TableNameBuilder.java", "diffHunk": "@@ -132,4 +132,19 @@ public static boolean isOfflineTableResource(String resourceName) {\n   public static boolean isRealtimeTableResource(String resourceName) {\n     return REALTIME.tableHasTypeSuffix(resourceName);\n   }\n+\n+  /**\n+   * ensure that table name ends with type info, if no, create one with the given type\n+   * @param tableName the name of the table\n+   * @param type the type of the table for it to fill in if the type info is missing\n+   * @return the table type name with the type info\n+   */\n+  public static String ensureTableNameWithType(String tableName, TableType type) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjkwNTgwMQ=="}, "originalCommit": {"oid": "723f08aa12074f83ac31fdfe09b8dc1f0254f942"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2MDQzNTU3OnYy", "diffSide": "RIGHT", "path": "pinot-common/src/main/java/org/apache/pinot/common/metrics/BrokerGauge.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQwNToxMzoyMVrOF6hOFg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQwMTo1MDozM1rOF7JaZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjkwNjAwNg==", "bodyText": "what does this represent?", "url": "https://github.com/apache/pinot/pull/5175#discussion_r396906006", "createdAt": "2020-03-24T05:13:21Z", "author": {"login": "kishoreg"}, "path": "pinot-common/src/main/java/org/apache/pinot/common/metrics/BrokerGauge.java", "diffHunk": "@@ -26,7 +26,8 @@\n  *\n  */\n public enum BrokerGauge implements AbstractMetrics.Gauge {\n-  QUERY_QUOTA_CAPACITY_UTILIZATION_RATE(\"tables\", false), NETTY_CONNECTION_CONNECT_TIME_MS(\"nettyConnection\", true);\n+  QUERY_QUOTA_CAPACITY_UTILIZATION_RATE(\"tables\", false), NETTY_CONNECTION_CONNECT_TIME_MS(\"nettyConnection\", true),\n+  TABLE_MIN_LOW_WATER_MARK(\"tables\", false);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "723f08aa12074f83ac31fdfe09b8dc1f0254f942"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzU2NDUxNw==", "bodyText": "It represents how many table pinot broker is collecting the metrics for. The exact usage of the metrics will show up in later diffs", "url": "https://github.com/apache/pinot/pull/5175#discussion_r397564517", "createdAt": "2020-03-25T01:50:33Z", "author": {"login": "jamesyfshao"}, "path": "pinot-common/src/main/java/org/apache/pinot/common/metrics/BrokerGauge.java", "diffHunk": "@@ -26,7 +26,8 @@\n  *\n  */\n public enum BrokerGauge implements AbstractMetrics.Gauge {\n-  QUERY_QUOTA_CAPACITY_UTILIZATION_RATE(\"tables\", false), NETTY_CONNECTION_CONNECT_TIME_MS(\"nettyConnection\", true);\n+  QUERY_QUOTA_CAPACITY_UTILIZATION_RATE(\"tables\", false), NETTY_CONNECTION_CONNECT_TIME_MS(\"nettyConnection\", true),\n+  TABLE_MIN_LOW_WATER_MARK(\"tables\", false);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjkwNjAwNg=="}, "originalCommit": {"oid": "723f08aa12074f83ac31fdfe09b8dc1f0254f942"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2MDQ0NjY4OnYy", "diffSide": "RIGHT", "path": "pinot-spi/src/main/java/org/apache/pinot/spi/data/Schema.java", "isResolved": false, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQwNToyMToyMFrOF6hU_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQyMTo0NDoyMVrOF_9mNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjkwNzc3Mw==", "bodyText": "what if the primary key is made up of two columns?", "url": "https://github.com/apache/pinot/pull/5175#discussion_r396907773", "createdAt": "2020-03-24T05:21:20Z", "author": {"login": "kishoreg"}, "path": "pinot-spi/src/main/java/org/apache/pinot/spi/data/Schema.java", "diffHunk": "@@ -59,13 +65,28 @@\n   private static final Logger LOGGER = LoggerFactory.getLogger(Schema.class);\n \n   private String _schemaName;\n+\n+  // upsert related config\n+  // primary key refers to the column name that is the primary key of this upsert table\n+  private String _primaryKey;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "723f08aa12074f83ac31fdfe09b8dc1f0254f942"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjkxMzc3Mg==", "bodyText": "or multiple", "url": "https://github.com/apache/pinot/pull/5175#discussion_r396913772", "createdAt": "2020-03-24T05:45:00Z", "author": {"login": "kishoreg"}, "path": "pinot-spi/src/main/java/org/apache/pinot/spi/data/Schema.java", "diffHunk": "@@ -59,13 +65,28 @@\n   private static final Logger LOGGER = LoggerFactory.getLogger(Schema.class);\n \n   private String _schemaName;\n+\n+  // upsert related config\n+  // primary key refers to the column name that is the primary key of this upsert table\n+  private String _primaryKey;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjkwNzc3Mw=="}, "originalCommit": {"oid": "723f08aa12074f83ac31fdfe09b8dc1f0254f942"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzU2NDgxMw==", "bodyText": "right now we don't have support for multiple primary keys. Do you think it will be an important feature to add multiple primary key support right now or you think it is fine to postpone it to later diff?", "url": "https://github.com/apache/pinot/pull/5175#discussion_r397564813", "createdAt": "2020-03-25T01:51:41Z", "author": {"login": "jamesyfshao"}, "path": "pinot-spi/src/main/java/org/apache/pinot/spi/data/Schema.java", "diffHunk": "@@ -59,13 +65,28 @@\n   private static final Logger LOGGER = LoggerFactory.getLogger(Schema.class);\n \n   private String _schemaName;\n+\n+  // upsert related config\n+  // primary key refers to the column name that is the primary key of this upsert table\n+  private String _primaryKey;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjkwNzc3Mw=="}, "originalCommit": {"oid": "723f08aa12074f83ac31fdfe09b8dc1f0254f942"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzYzMzA5Nw==", "bodyText": "Better to design it for multiple, even if the implementation can handle only one primary key", "url": "https://github.com/apache/pinot/pull/5175#discussion_r397633097", "createdAt": "2020-03-25T06:31:19Z", "author": {"login": "kishoreg"}, "path": "pinot-spi/src/main/java/org/apache/pinot/spi/data/Schema.java", "diffHunk": "@@ -59,13 +65,28 @@\n   private static final Logger LOGGER = LoggerFactory.getLogger(Schema.class);\n \n   private String _schemaName;\n+\n+  // upsert related config\n+  // primary key refers to the column name that is the primary key of this upsert table\n+  private String _primaryKey;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjkwNzc3Mw=="}, "originalCommit": {"oid": "723f08aa12074f83ac31fdfe09b8dc1f0254f942"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODE1MzE4Ng==", "bodyText": "don't have support for multiple primary keys\n\nThere will be some cases where multiple keys make sense right? Like in clickstream: userId and timestamp\nWill support for multiple keys be added later on?", "url": "https://github.com/apache/pinot/pull/5175#discussion_r398153186", "createdAt": "2020-03-25T20:37:44Z", "author": {"login": "ChethanUK"}, "path": "pinot-spi/src/main/java/org/apache/pinot/spi/data/Schema.java", "diffHunk": "@@ -59,13 +65,28 @@\n   private static final Logger LOGGER = LoggerFactory.getLogger(Schema.class);\n \n   private String _schemaName;\n+\n+  // upsert related config\n+  // primary key refers to the column name that is the primary key of this upsert table\n+  private String _primaryKey;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjkwNzc3Mw=="}, "originalCommit": {"oid": "723f08aa12074f83ac31fdfe09b8dc1f0254f942"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjYxMzgxNQ==", "bodyText": "@kishoreg @ChethanUK I have changed the primary key in schema config to be a list instead of a single string. For now we are still performing check to ensure that primary key will be one and only one. However we should be able to change that once we have mulitple-primary-key support in place", "url": "https://github.com/apache/pinot/pull/5175#discussion_r402613815", "createdAt": "2020-04-02T21:44:21Z", "author": {"login": "jamesyfshao"}, "path": "pinot-spi/src/main/java/org/apache/pinot/spi/data/Schema.java", "diffHunk": "@@ -59,13 +65,28 @@\n   private static final Logger LOGGER = LoggerFactory.getLogger(Schema.class);\n \n   private String _schemaName;\n+\n+  // upsert related config\n+  // primary key refers to the column name that is the primary key of this upsert table\n+  private String _primaryKey;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjkwNzc3Mw=="}, "originalCommit": {"oid": "723f08aa12074f83ac31fdfe09b8dc1f0254f942"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2MDQ4ODg5OnYy", "diffSide": "RIGHT", "path": "pinot-spi/src/main/java/org/apache/pinot/spi/data/Schema.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQwNTo0NzoxOVrOF6hutw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQwMjowMTozNFrOF7JmDQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjkxNDM1OQ==", "bodyText": "do we need all these things in Schema? What if we create a UpsertConfig in TableConfig to provide all the necessary information.", "url": "https://github.com/apache/pinot/pull/5175#discussion_r396914359", "createdAt": "2020-03-24T05:47:19Z", "author": {"login": "kishoreg"}, "path": "pinot-spi/src/main/java/org/apache/pinot/spi/data/Schema.java", "diffHunk": "@@ -59,13 +65,28 @@\n   private static final Logger LOGGER = LoggerFactory.getLogger(Schema.class);\n \n   private String _schemaName;\n+\n+  // upsert related config\n+  // primary key refers to the column name that is the primary key of this upsert table\n+  private String _primaryKey;\n+  // offset key refers to the column name that we are going to store the offset value to\n+  private String _offsetKey;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "723f08aa12074f83ac31fdfe09b8dc1f0254f942"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzU2NzUwMQ==", "bodyText": "definitely would be better this way, will submit a change later to update this", "url": "https://github.com/apache/pinot/pull/5175#discussion_r397567501", "createdAt": "2020-03-25T02:01:34Z", "author": {"login": "jamesyfshao"}, "path": "pinot-spi/src/main/java/org/apache/pinot/spi/data/Schema.java", "diffHunk": "@@ -59,13 +65,28 @@\n   private static final Logger LOGGER = LoggerFactory.getLogger(Schema.class);\n \n   private String _schemaName;\n+\n+  // upsert related config\n+  // primary key refers to the column name that is the primary key of this upsert table\n+  private String _primaryKey;\n+  // offset key refers to the column name that we are going to store the offset value to\n+  private String _offsetKey;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjkxNDM1OQ=="}, "originalCommit": {"oid": "723f08aa12074f83ac31fdfe09b8dc1f0254f942"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2MDQ5MTYwOnYy", "diffSide": "RIGHT", "path": "pinot-spi/src/main/java/org/apache/pinot/spi/data/Schema.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQwNTo0ODo1MlrOF6hwSw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQwMjoxODowNVrOF7J21g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjkxNDc2Mw==", "bodyText": "why is this needed? it will be great if we can avoid static methods in config objects. We can probably move this SchemaUtil", "url": "https://github.com/apache/pinot/pull/5175#discussion_r396914763", "createdAt": "2020-03-24T05:48:52Z", "author": {"login": "kishoreg"}, "path": "pinot-spi/src/main/java/org/apache/pinot/spi/data/Schema.java", "diffHunk": "@@ -631,4 +751,50 @@ public int hashCode() {\n     result = EqualityUtils.hashCodeOf(result, _dateTimeFieldSpecs);\n     return result;\n   }\n+\n+  public boolean isVirtualColumn(String columnName) {\n+    return columnName.startsWith(\"$\") || (getFieldSpecFor(columnName).getVirtualColumnProvider() != null\n+        && !getFieldSpecFor(columnName).getVirtualColumnProvider().isEmpty());\n+  }\n+\n+\n+  @JsonIgnore\n+  public static byte[] getByteArrayFromField(Object value, DimensionFieldSpec fieldSpec) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "723f08aa12074f83ac31fdfe09b8dc1f0254f942"}, "originalPosition": 209}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzU3MTc5OA==", "bodyText": "done.\nIt is used for converting a pinot column value into the appropriate binary representation for upsert primary key field. (make sure all primary key will become a byte array)", "url": "https://github.com/apache/pinot/pull/5175#discussion_r397571798", "createdAt": "2020-03-25T02:18:05Z", "author": {"login": "jamesyfshao"}, "path": "pinot-spi/src/main/java/org/apache/pinot/spi/data/Schema.java", "diffHunk": "@@ -631,4 +751,50 @@ public int hashCode() {\n     result = EqualityUtils.hashCodeOf(result, _dateTimeFieldSpecs);\n     return result;\n   }\n+\n+  public boolean isVirtualColumn(String columnName) {\n+    return columnName.startsWith(\"$\") || (getFieldSpecFor(columnName).getVirtualColumnProvider() != null\n+        && !getFieldSpecFor(columnName).getVirtualColumnProvider().isEmpty());\n+  }\n+\n+\n+  @JsonIgnore\n+  public static byte[] getByteArrayFromField(Object value, DimensionFieldSpec fieldSpec) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjkxNDc2Mw=="}, "originalCommit": {"oid": "723f08aa12074f83ac31fdfe09b8dc1f0254f942"}, "originalPosition": 209}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2MDQ5MjgxOnYy", "diffSide": "RIGHT", "path": "pom.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQwNTo0OTo0NVrOF6hxJw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQwMjoyMzowM1rOF7J7pQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjkxNDk4Mw==", "bodyText": "Do we need this at compile time?", "url": "https://github.com/apache/pinot/pull/5175#discussion_r396914983", "createdAt": "2020-03-24T05:49:45Z", "author": {"login": "kishoreg"}, "path": "pom.xml", "diffHunk": "@@ -132,6 +132,9 @@\n     <log4j.version>2.11.2</log4j.version>\n     <netty.version>4.1.42.Final</netty.version>\n \n+    <!-- dependency for upsert component -->", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "723f08aa12074f83ac31fdfe09b8dc1f0254f942"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzU3MzAyOQ==", "bodyText": "moved to submodules, will be reflected in future prs", "url": "https://github.com/apache/pinot/pull/5175#discussion_r397573029", "createdAt": "2020-03-25T02:23:03Z", "author": {"login": "jamesyfshao"}, "path": "pom.xml", "diffHunk": "@@ -132,6 +132,9 @@\n     <log4j.version>2.11.2</log4j.version>\n     <netty.version>4.1.42.Final</netty.version>\n \n+    <!-- dependency for upsert component -->", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjkxNDk4Mw=="}, "originalCommit": {"oid": "723f08aa12074f83ac31fdfe09b8dc1f0254f942"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2MzE5NjgxOnYy", "diffSide": "RIGHT", "path": "pinot-common/src/main/java/org/apache/pinot/common/config/TableConfig.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxODowMDoyNVrOF68qRg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQwMjo0MDo0N1rOF7KNcA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzM1NTU5MA==", "bodyText": "Wrong import", "url": "https://github.com/apache/pinot/pull/5175#discussion_r397355590", "createdAt": "2020-03-24T18:00:25Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-common/src/main/java/org/apache/pinot/common/config/TableConfig.java", "diffHunk": "@@ -30,17 +30,21 @@\n import java.util.List;\n import java.util.Map;\n import javax.annotation.Nullable;\n+import javax.validation.constraints.Null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "723f08aa12074f83ac31fdfe09b8dc1f0254f942"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzU3NzU4NA==", "bodyText": "issue with merging, fixed. Thanks for pointing it out", "url": "https://github.com/apache/pinot/pull/5175#discussion_r397577584", "createdAt": "2020-03-25T02:40:47Z", "author": {"login": "jamesyfshao"}, "path": "pinot-common/src/main/java/org/apache/pinot/common/config/TableConfig.java", "diffHunk": "@@ -30,17 +30,21 @@\n import java.util.List;\n import java.util.Map;\n import javax.annotation.Nullable;\n+import javax.validation.constraints.Null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzM1NTU5MA=="}, "originalCommit": {"oid": "723f08aa12074f83ac31fdfe09b8dc1f0254f942"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2MzIxMDkyOnYy", "diffSide": "RIGHT", "path": "pinot-common/src/main/java/org/apache/pinot/common/config/TableConfig.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxODowNDoxMVrOF68ztA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQwMjo0MDoxOFrOF7KM2g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzM1ODAwNA==", "bodyText": "This can cause NPE", "url": "https://github.com/apache/pinot/pull/5175#discussion_r397358004", "createdAt": "2020-03-24T18:04:11Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-common/src/main/java/org/apache/pinot/common/config/TableConfig.java", "diffHunk": "@@ -354,6 +387,7 @@ public ZNRecord toZNRecord()\n     }\n \n     ZNRecord znRecord = new ZNRecord(_tableName);\n+    simpleFields.put(UPDATE_SEMANTIC_CONFIG_KEY, _updateSemantic.toString());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "723f08aa12074f83ac31fdfe09b8dc1f0254f942"}, "originalPosition": 103}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzU3NzQzNA==", "bodyText": "updated to follow the convention of rest of the code", "url": "https://github.com/apache/pinot/pull/5175#discussion_r397577434", "createdAt": "2020-03-25T02:40:18Z", "author": {"login": "jamesyfshao"}, "path": "pinot-common/src/main/java/org/apache/pinot/common/config/TableConfig.java", "diffHunk": "@@ -354,6 +387,7 @@ public ZNRecord toZNRecord()\n     }\n \n     ZNRecord znRecord = new ZNRecord(_tableName);\n+    simpleFields.put(UPDATE_SEMANTIC_CONFIG_KEY, _updateSemantic.toString());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzM1ODAwNA=="}, "originalCommit": {"oid": "723f08aa12074f83ac31fdfe09b8dc1f0254f942"}, "originalPosition": 103}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2MzIzNDcyOnYy", "diffSide": "RIGHT", "path": "pinot-common/src/main/java/org/apache/pinot/common/metrics/AbstractMetrics.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxODoxMDo1MFrOF69DSg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQwMjozNDowM1rOF7KG0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzM2MTk5NA==", "bodyText": "Wrong order, please revert", "url": "https://github.com/apache/pinot/pull/5175#discussion_r397361994", "createdAt": "2020-03-24T18:10:50Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-common/src/main/java/org/apache/pinot/common/metrics/AbstractMetrics.java", "diffHunk": "@@ -21,16 +21,17 @@\n import com.google.common.annotations.VisibleForTesting;\n import com.yammer.metrics.core.MetricName;\n import com.yammer.metrics.core.MetricsRegistry;\n+import org.apache.pinot.common.Utils;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "723f08aa12074f83ac31fdfe09b8dc1f0254f942"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzU3NTg4OQ==", "bodyText": "| Is this for real-time? We already have push type of either APPEND or REFRESH for offline; aggregateMetrics for real-time. What does UPSERT stand for?\nreplied in earlier comment, basically design for supporting update/insert in pinot realtime ingestion", "url": "https://github.com/apache/pinot/pull/5175#discussion_r397575889", "createdAt": "2020-03-25T02:34:03Z", "author": {"login": "jamesyfshao"}, "path": "pinot-common/src/main/java/org/apache/pinot/common/metrics/AbstractMetrics.java", "diffHunk": "@@ -21,16 +21,17 @@\n import com.google.common.annotations.VisibleForTesting;\n import com.yammer.metrics.core.MetricName;\n import com.yammer.metrics.core.MetricsRegistry;\n+import org.apache.pinot.common.Utils;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzM2MTk5NA=="}, "originalCommit": {"oid": "723f08aa12074f83ac31fdfe09b8dc1f0254f942"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5MzA4ODAxOnYy", "diffSide": "RIGHT", "path": "pinot-common/src/main/java/org/apache/pinot/common/utils/CommonConstants.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQwMTowNDoxM1rOF_X4-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQwMTowNDoxM1rOF_X4-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTk5NjAyNw==", "bodyText": "Can we change the name of this class like I had suggested before?", "url": "https://github.com/apache/pinot/pull/5175#discussion_r401996027", "createdAt": "2020-04-02T01:04:13Z", "author": {"login": "mcvsubbu"}, "path": "pinot-common/src/main/java/org/apache/pinot/common/utils/CommonConstants.java", "diffHunk": "@@ -308,6 +320,23 @@ public ServerType getServerType() {\n     public static final String PREFIX_OF_CONFIG_OF_PINOT_CRYPTER = \"crypter\";\n   }\n \n+  public static class Grigio {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a0f4fba2808b036d9a725deac9cad14b182b6bb2"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5MzA4OTYwOnYy", "diffSide": "RIGHT", "path": "pinot-common/src/main/java/org/apache/pinot/common/utils/CommonConstants.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQwMTowNTowNFrOF_X56Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQwMTowNTowNFrOF_X56Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTk5NjI2NQ==", "bodyText": "Please add comments on each of these. What does APPEND mean, vs what UPSERT means. Feel free to point to the design doc", "url": "https://github.com/apache/pinot/pull/5175#discussion_r401996265", "createdAt": "2020-04-02T01:05:04Z", "author": {"login": "mcvsubbu"}, "path": "pinot-common/src/main/java/org/apache/pinot/common/utils/CommonConstants.java", "diffHunk": "@@ -378,4 +407,23 @@ public ServerType getServerType() {\n     @Deprecated\n     public static final String TABLE_NAME = \"segment.table.name\";\n   }\n+\n+  public enum UpdateSemantic {\n+    APPEND,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a0f4fba2808b036d9a725deac9cad14b182b6bb2"}, "originalPosition": 79}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5Nzk1MzY1OnYy", "diffSide": "RIGHT", "path": "pinot-common/src/main/java/org/apache/pinot/common/config/TableConfig.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QwNjoyNzowNVrOGAGmmw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QwNjoyNzowNVrOGAGmmw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjc2MTM3MQ==", "bodyText": "let's avoid adding additional utility methods to config classes if possible", "url": "https://github.com/apache/pinot/pull/5175#discussion_r402761371", "createdAt": "2020-04-03T06:27:05Z", "author": {"login": "kishoreg"}, "path": "pinot-common/src/main/java/org/apache/pinot/common/config/TableConfig.java", "diffHunk": "@@ -470,6 +505,18 @@ public void setInstanceAssignmentConfigMap(\n     return _fieldConfigList;\n   }\n \n+  public UpdateSemantic getUpdateSemantic() {\n+    return _updateSemantic;\n+  }\n+\n+  public void setUpdateSemantic(UpdateSemantic updateSemantic) {\n+    _updateSemantic = updateSemantic;\n+  }\n+\n+  public boolean isTableForUpsert() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "553598e18953a0c5bc4b4ffad43c5e926ae03285"}, "originalPosition": 120}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0Nzk2NzY3OnYy", "diffSide": "RIGHT", "path": "pinot-spi/src/main/java/org/apache/pinot/spi/config/IngestionModeConfig.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QxNzo1NTowOVrOGHXqpQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QyMjozMzozM1rOGHe9-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDM4MDk2NQ==", "bodyText": "Can we call this UpsertConfig?", "url": "https://github.com/apache/pinot/pull/5175#discussion_r410380965", "createdAt": "2020-04-17T17:55:09Z", "author": {"login": "mcvsubbu"}, "path": "pinot-spi/src/main/java/org/apache/pinot/spi/config/IngestionModeConfig.java", "diffHunk": "@@ -0,0 +1,152 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.spi.config;\n+\n+\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonIgnore;\n+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.google.common.base.Preconditions;\n+import com.google.common.collect.ImmutableList;\n+import org.apache.commons.lang.StringUtils;\n+import org.apache.pinot.spi.utils.JsonUtils;\n+\n+import javax.annotation.Nullable;\n+import java.util.List;\n+\n+@SuppressWarnings(\"unused\")\n+@JsonIgnoreProperties(ignoreUnknown = true)\n+public class IngestionModeConfig {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d78868093be43c4d117c4ece5b976f0781df16fc"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDUwMDA3MQ==", "bodyText": "+1. I think this config is only for upsert feature, and not applicable for general ingestion. When this config exist, we can assume the upsert feature is on.", "url": "https://github.com/apache/pinot/pull/5175#discussion_r410500071", "createdAt": "2020-04-17T22:31:31Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-spi/src/main/java/org/apache/pinot/spi/config/IngestionModeConfig.java", "diffHunk": "@@ -0,0 +1,152 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.spi.config;\n+\n+\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonIgnore;\n+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.google.common.base.Preconditions;\n+import com.google.common.collect.ImmutableList;\n+import org.apache.commons.lang.StringUtils;\n+import org.apache.pinot.spi.utils.JsonUtils;\n+\n+import javax.annotation.Nullable;\n+import java.util.List;\n+\n+@SuppressWarnings(\"unused\")\n+@JsonIgnoreProperties(ignoreUnknown = true)\n+public class IngestionModeConfig {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDM4MDk2NQ=="}, "originalCommit": {"oid": "d78868093be43c4d117c4ece5b976f0781df16fc"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDUwMDYwMw==", "bodyText": "Also, please extends BaseJsonConfig, which handles the Json ser-de and common methods like hashCode(), equals() and toString(). You can refer to RoutingConfig which is similar to this one.", "url": "https://github.com/apache/pinot/pull/5175#discussion_r410500603", "createdAt": "2020-04-17T22:33:33Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-spi/src/main/java/org/apache/pinot/spi/config/IngestionModeConfig.java", "diffHunk": "@@ -0,0 +1,152 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.spi.config;\n+\n+\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonIgnore;\n+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.google.common.base.Preconditions;\n+import com.google.common.collect.ImmutableList;\n+import org.apache.commons.lang.StringUtils;\n+import org.apache.pinot.spi.utils.JsonUtils;\n+\n+import javax.annotation.Nullable;\n+import java.util.List;\n+\n+@SuppressWarnings(\"unused\")\n+@JsonIgnoreProperties(ignoreUnknown = true)\n+public class IngestionModeConfig {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDM4MDk2NQ=="}, "originalCommit": {"oid": "d78868093be43c4d117c4ece5b976f0781df16fc"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0Nzk3NjQ3OnYy", "diffSide": "RIGHT", "path": "pinot-spi/src/main/java/org/apache/pinot/spi/config/IngestionModeConfig.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QxNzo1Nzo1NFrOGHXwWg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QxNzo1Nzo1NFrOGHXwWg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDM4MjQyNg==", "bodyText": "Can we avoid adding this for now? We can treat the presence of UpsertConfig as enabling upsert for Reatltime-only use cases (that you are handling now). It is therefore implied that the table push style is APPEND.\nIf, in future, we add multiple types of handling upserts, we can always add an enum (", "url": "https://github.com/apache/pinot/pull/5175#discussion_r410382426", "createdAt": "2020-04-17T17:57:54Z", "author": {"login": "mcvsubbu"}, "path": "pinot-spi/src/main/java/org/apache/pinot/spi/config/IngestionModeConfig.java", "diffHunk": "@@ -0,0 +1,152 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.spi.config;\n+\n+\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonIgnore;\n+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.google.common.base.Preconditions;\n+import com.google.common.collect.ImmutableList;\n+import org.apache.commons.lang.StringUtils;\n+import org.apache.pinot.spi.utils.JsonUtils;\n+\n+import javax.annotation.Nullable;\n+import java.util.List;\n+\n+@SuppressWarnings(\"unused\")\n+@JsonIgnoreProperties(ignoreUnknown = true)\n+public class IngestionModeConfig {\n+  // new config key to indicate if a table is for upsert. If this is define as upsert, it would be an upsert table\n+  // for other value it would be append value for now\n+  private String _ingestionMode;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d78868093be43c4d117c4ece5b976f0781df16fc"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0Nzk3OTI2OnYy", "diffSide": "RIGHT", "path": "pinot-spi/src/main/java/org/apache/pinot/spi/config/IngestionModeConfig.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QxNzo1ODo0N1rOGHXyLQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QyMjozNDo0NVrOGHe_ag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDM4Mjg5Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              private List<String> _primaryKeys;\n          \n          \n            \n              private List<String> _primaryKeyColumns;", "url": "https://github.com/apache/pinot/pull/5175#discussion_r410382893", "createdAt": "2020-04-17T17:58:47Z", "author": {"login": "mcvsubbu"}, "path": "pinot-spi/src/main/java/org/apache/pinot/spi/config/IngestionModeConfig.java", "diffHunk": "@@ -0,0 +1,152 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.spi.config;\n+\n+\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonIgnore;\n+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.google.common.base.Preconditions;\n+import com.google.common.collect.ImmutableList;\n+import org.apache.commons.lang.StringUtils;\n+import org.apache.pinot.spi.utils.JsonUtils;\n+\n+import javax.annotation.Nullable;\n+import java.util.List;\n+\n+@SuppressWarnings(\"unused\")\n+@JsonIgnoreProperties(ignoreUnknown = true)\n+public class IngestionModeConfig {\n+  // new config key to indicate if a table is for upsert. If this is define as upsert, it would be an upsert table\n+  // for other value it would be append value for now\n+  private String _ingestionMode;\n+  // primary key refers to the column name that is the primary key of this upsert table\n+  private List<String> _primaryKeys;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d78868093be43c4d117c4ece5b976f0781df16fc"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDUwMDk3MA==", "bodyText": "+1. You can also make it final. Same for other places", "url": "https://github.com/apache/pinot/pull/5175#discussion_r410500970", "createdAt": "2020-04-17T22:34:45Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-spi/src/main/java/org/apache/pinot/spi/config/IngestionModeConfig.java", "diffHunk": "@@ -0,0 +1,152 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.spi.config;\n+\n+\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonIgnore;\n+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.google.common.base.Preconditions;\n+import com.google.common.collect.ImmutableList;\n+import org.apache.commons.lang.StringUtils;\n+import org.apache.pinot.spi.utils.JsonUtils;\n+\n+import javax.annotation.Nullable;\n+import java.util.List;\n+\n+@SuppressWarnings(\"unused\")\n+@JsonIgnoreProperties(ignoreUnknown = true)\n+public class IngestionModeConfig {\n+  // new config key to indicate if a table is for upsert. If this is define as upsert, it would be an upsert table\n+  // for other value it would be append value for now\n+  private String _ingestionMode;\n+  // primary key refers to the column name that is the primary key of this upsert table\n+  private List<String> _primaryKeys;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDM4Mjg5Mw=="}, "originalCommit": {"oid": "d78868093be43c4d117c4ece5b976f0781df16fc"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0Nzk4MDQxOnYy", "diffSide": "RIGHT", "path": "pinot-spi/src/main/java/org/apache/pinot/spi/config/IngestionModeConfig.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QxNzo1OTowNlrOGHXy6Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QxNzo1OTowNlrOGHXy6Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDM4MzA4MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              private String _offsetKey;\n          \n          \n            \n              private String _offsetColumn;", "url": "https://github.com/apache/pinot/pull/5175#discussion_r410383081", "createdAt": "2020-04-17T17:59:06Z", "author": {"login": "mcvsubbu"}, "path": "pinot-spi/src/main/java/org/apache/pinot/spi/config/IngestionModeConfig.java", "diffHunk": "@@ -0,0 +1,152 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.spi.config;\n+\n+\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonIgnore;\n+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.google.common.base.Preconditions;\n+import com.google.common.collect.ImmutableList;\n+import org.apache.commons.lang.StringUtils;\n+import org.apache.pinot.spi.utils.JsonUtils;\n+\n+import javax.annotation.Nullable;\n+import java.util.List;\n+\n+@SuppressWarnings(\"unused\")\n+@JsonIgnoreProperties(ignoreUnknown = true)\n+public class IngestionModeConfig {\n+  // new config key to indicate if a table is for upsert. If this is define as upsert, it would be an upsert table\n+  // for other value it would be append value for now\n+  private String _ingestionMode;\n+  // primary key refers to the column name that is the primary key of this upsert table\n+  private List<String> _primaryKeys;\n+  // offset key refers to the column name that we are going to store the offset value to\n+  private String _offsetKey;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d78868093be43c4d117c4ece5b976f0781df16fc"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0Nzk4MTMzOnYy", "diffSide": "RIGHT", "path": "pinot-spi/src/main/java/org/apache/pinot/spi/config/IngestionModeConfig.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QxNzo1OToyNFrOGHXzgw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QxNzo1OToyNFrOGHXzgw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDM4MzIzNQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              private String _validFromKey;\n          \n          \n            \n              private String _validFromColumn;", "url": "https://github.com/apache/pinot/pull/5175#discussion_r410383235", "createdAt": "2020-04-17T17:59:24Z", "author": {"login": "mcvsubbu"}, "path": "pinot-spi/src/main/java/org/apache/pinot/spi/config/IngestionModeConfig.java", "diffHunk": "@@ -0,0 +1,152 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.spi.config;\n+\n+\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonIgnore;\n+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.google.common.base.Preconditions;\n+import com.google.common.collect.ImmutableList;\n+import org.apache.commons.lang.StringUtils;\n+import org.apache.pinot.spi.utils.JsonUtils;\n+\n+import javax.annotation.Nullable;\n+import java.util.List;\n+\n+@SuppressWarnings(\"unused\")\n+@JsonIgnoreProperties(ignoreUnknown = true)\n+public class IngestionModeConfig {\n+  // new config key to indicate if a table is for upsert. If this is define as upsert, it would be an upsert table\n+  // for other value it would be append value for now\n+  private String _ingestionMode;\n+  // primary key refers to the column name that is the primary key of this upsert table\n+  private List<String> _primaryKeys;\n+  // offset key refers to the column name that we are going to store the offset value to\n+  private String _offsetKey;\n+  // validFrom key refers to the column name that we are going to store the validFrom value to\n+  private String _validFromKey;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d78868093be43c4d117c4ece5b976f0781df16fc"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0Nzk4MTg5OnYy", "diffSide": "RIGHT", "path": "pinot-spi/src/main/java/org/apache/pinot/spi/config/IngestionModeConfig.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QxNzo1OTozNVrOGHXz6Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QxNzo1OTozNVrOGHXz6Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDM4MzMzNw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              private String _validUntilKey;\n          \n          \n            \n              private String _validUntilColumn;", "url": "https://github.com/apache/pinot/pull/5175#discussion_r410383337", "createdAt": "2020-04-17T17:59:35Z", "author": {"login": "mcvsubbu"}, "path": "pinot-spi/src/main/java/org/apache/pinot/spi/config/IngestionModeConfig.java", "diffHunk": "@@ -0,0 +1,152 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.spi.config;\n+\n+\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonIgnore;\n+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.google.common.base.Preconditions;\n+import com.google.common.collect.ImmutableList;\n+import org.apache.commons.lang.StringUtils;\n+import org.apache.pinot.spi.utils.JsonUtils;\n+\n+import javax.annotation.Nullable;\n+import java.util.List;\n+\n+@SuppressWarnings(\"unused\")\n+@JsonIgnoreProperties(ignoreUnknown = true)\n+public class IngestionModeConfig {\n+  // new config key to indicate if a table is for upsert. If this is define as upsert, it would be an upsert table\n+  // for other value it would be append value for now\n+  private String _ingestionMode;\n+  // primary key refers to the column name that is the primary key of this upsert table\n+  private List<String> _primaryKeys;\n+  // offset key refers to the column name that we are going to store the offset value to\n+  private String _offsetKey;\n+  // validFrom key refers to the column name that we are going to store the validFrom value to\n+  private String _validFromKey;\n+  // validFrom key refers to the column name that we are going to store the validFrom value to\n+  private String _validUntilKey;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d78868093be43c4d117c4ece5b976f0781df16fc"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0Nzk4MzI1OnYy", "diffSide": "RIGHT", "path": "pinot-spi/src/main/java/org/apache/pinot/spi/config/IngestionModeConfig.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QxODowMDowMVrOGHX00w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QxODowMDowMVrOGHX00w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDM4MzU3MQ==", "bodyText": "we should not need these two for now", "url": "https://github.com/apache/pinot/pull/5175#discussion_r410383571", "createdAt": "2020-04-17T18:00:01Z", "author": {"login": "mcvsubbu"}, "path": "pinot-spi/src/main/java/org/apache/pinot/spi/config/IngestionModeConfig.java", "diffHunk": "@@ -0,0 +1,152 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.spi.config;\n+\n+\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonIgnore;\n+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.google.common.base.Preconditions;\n+import com.google.common.collect.ImmutableList;\n+import org.apache.commons.lang.StringUtils;\n+import org.apache.pinot.spi.utils.JsonUtils;\n+\n+import javax.annotation.Nullable;\n+import java.util.List;\n+\n+@SuppressWarnings(\"unused\")\n+@JsonIgnoreProperties(ignoreUnknown = true)\n+public class IngestionModeConfig {\n+  // new config key to indicate if a table is for upsert. If this is define as upsert, it would be an upsert table\n+  // for other value it would be append value for now\n+  private String _ingestionMode;\n+  // primary key refers to the column name that is the primary key of this upsert table\n+  private List<String> _primaryKeys;\n+  // offset key refers to the column name that we are going to store the offset value to\n+  private String _offsetKey;\n+  // validFrom key refers to the column name that we are going to store the validFrom value to\n+  private String _validFromKey;\n+  // validFrom key refers to the column name that we are going to store the validFrom value to\n+  private String _validUntilKey;\n+\n+  public static final String UPSERT_TABLE_CONFIG_VALUE = \"upsert\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d78868093be43c4d117c4ece5b976f0781df16fc"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0Nzk4NjIwOnYy", "diffSide": "RIGHT", "path": "pinot-spi/src/main/java/org/apache/pinot/spi/config/IngestionModeConfig.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QxODowMDo1OVrOGHX2qQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QxODowMDo1OVrOGHX2qQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDM4NDA0MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                      \"pinot upsert require one and only one primary key\");\n          \n          \n            \n                      \"Upsert feature supports only one primary key\");", "url": "https://github.com/apache/pinot/pull/5175#discussion_r410384041", "createdAt": "2020-04-17T18:00:59Z", "author": {"login": "mcvsubbu"}, "path": "pinot-spi/src/main/java/org/apache/pinot/spi/config/IngestionModeConfig.java", "diffHunk": "@@ -0,0 +1,152 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.spi.config;\n+\n+\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonIgnore;\n+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.google.common.base.Preconditions;\n+import com.google.common.collect.ImmutableList;\n+import org.apache.commons.lang.StringUtils;\n+import org.apache.pinot.spi.utils.JsonUtils;\n+\n+import javax.annotation.Nullable;\n+import java.util.List;\n+\n+@SuppressWarnings(\"unused\")\n+@JsonIgnoreProperties(ignoreUnknown = true)\n+public class IngestionModeConfig {\n+  // new config key to indicate if a table is for upsert. If this is define as upsert, it would be an upsert table\n+  // for other value it would be append value for now\n+  private String _ingestionMode;\n+  // primary key refers to the column name that is the primary key of this upsert table\n+  private List<String> _primaryKeys;\n+  // offset key refers to the column name that we are going to store the offset value to\n+  private String _offsetKey;\n+  // validFrom key refers to the column name that we are going to store the validFrom value to\n+  private String _validFromKey;\n+  // validFrom key refers to the column name that we are going to store the validFrom value to\n+  private String _validUntilKey;\n+\n+  public static final String UPSERT_TABLE_CONFIG_VALUE = \"upsert\";\n+  public static final String APPEND_TABLE_CONFIG_VALUE = \"append\";\n+\n+  public static final IngestionModeConfig DEFAULT_APPEND_INGESTION_MODE =\n+      new IngestionModeConfig(APPEND_TABLE_CONFIG_VALUE, null, null, null,\n+          null);\n+\n+  @JsonCreator\n+  public IngestionModeConfig(\n+      @JsonProperty(value=\"ingestionMode\") @Nullable String ingestionMode,\n+      @JsonProperty(value=\"primaryKeys\") @Nullable List<String> primaryKeys,\n+      @JsonProperty(value=\"offsetKey\") @Nullable String offsetKey,\n+      @JsonProperty(value=\"validFromKey\") @Nullable String validFromKey,\n+      @JsonProperty(value=\"validUntilKey\") @Nullable String validUntilKey) {\n+    if (StringUtils.isEmpty(ingestionMode)) {\n+      _ingestionMode = APPEND_TABLE_CONFIG_VALUE;\n+    } else {\n+      _ingestionMode = ingestionMode.toLowerCase();\n+    }\n+    if (primaryKeys == null) {\n+      _primaryKeys = ImmutableList.of();\n+    } else {\n+      _primaryKeys = primaryKeys;\n+    }\n+    _offsetKey = offsetKey;\n+    _validFromKey = validFromKey;\n+    _validUntilKey = validUntilKey;\n+\n+    if (UPSERT_TABLE_CONFIG_VALUE.equals(_ingestionMode)) {\n+      Preconditions.checkState(_primaryKeys.size() == 1,\n+          \"pinot upsert require one and only one primary key\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d78868093be43c4d117c4ece5b976f0781df16fc"}, "originalPosition": 80}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0Nzk4ODc5OnYy", "diffSide": "RIGHT", "path": "pinot-spi/src/main/java/org/apache/pinot/spi/config/IngestionModeConfig.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QxODowMTo1N1rOGHX4bw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QxODowMTo1N1rOGHX4bw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDM4NDQ5NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                      \"pinot upsert require one offset key\");\n          \n          \n            \n                      \"Upsert feature requires \\\"offsetColumn\\\" to be set\");", "url": "https://github.com/apache/pinot/pull/5175#discussion_r410384495", "createdAt": "2020-04-17T18:01:57Z", "author": {"login": "mcvsubbu"}, "path": "pinot-spi/src/main/java/org/apache/pinot/spi/config/IngestionModeConfig.java", "diffHunk": "@@ -0,0 +1,152 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.spi.config;\n+\n+\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonIgnore;\n+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.google.common.base.Preconditions;\n+import com.google.common.collect.ImmutableList;\n+import org.apache.commons.lang.StringUtils;\n+import org.apache.pinot.spi.utils.JsonUtils;\n+\n+import javax.annotation.Nullable;\n+import java.util.List;\n+\n+@SuppressWarnings(\"unused\")\n+@JsonIgnoreProperties(ignoreUnknown = true)\n+public class IngestionModeConfig {\n+  // new config key to indicate if a table is for upsert. If this is define as upsert, it would be an upsert table\n+  // for other value it would be append value for now\n+  private String _ingestionMode;\n+  // primary key refers to the column name that is the primary key of this upsert table\n+  private List<String> _primaryKeys;\n+  // offset key refers to the column name that we are going to store the offset value to\n+  private String _offsetKey;\n+  // validFrom key refers to the column name that we are going to store the validFrom value to\n+  private String _validFromKey;\n+  // validFrom key refers to the column name that we are going to store the validFrom value to\n+  private String _validUntilKey;\n+\n+  public static final String UPSERT_TABLE_CONFIG_VALUE = \"upsert\";\n+  public static final String APPEND_TABLE_CONFIG_VALUE = \"append\";\n+\n+  public static final IngestionModeConfig DEFAULT_APPEND_INGESTION_MODE =\n+      new IngestionModeConfig(APPEND_TABLE_CONFIG_VALUE, null, null, null,\n+          null);\n+\n+  @JsonCreator\n+  public IngestionModeConfig(\n+      @JsonProperty(value=\"ingestionMode\") @Nullable String ingestionMode,\n+      @JsonProperty(value=\"primaryKeys\") @Nullable List<String> primaryKeys,\n+      @JsonProperty(value=\"offsetKey\") @Nullable String offsetKey,\n+      @JsonProperty(value=\"validFromKey\") @Nullable String validFromKey,\n+      @JsonProperty(value=\"validUntilKey\") @Nullable String validUntilKey) {\n+    if (StringUtils.isEmpty(ingestionMode)) {\n+      _ingestionMode = APPEND_TABLE_CONFIG_VALUE;\n+    } else {\n+      _ingestionMode = ingestionMode.toLowerCase();\n+    }\n+    if (primaryKeys == null) {\n+      _primaryKeys = ImmutableList.of();\n+    } else {\n+      _primaryKeys = primaryKeys;\n+    }\n+    _offsetKey = offsetKey;\n+    _validFromKey = validFromKey;\n+    _validUntilKey = validUntilKey;\n+\n+    if (UPSERT_TABLE_CONFIG_VALUE.equals(_ingestionMode)) {\n+      Preconditions.checkState(_primaryKeys.size() == 1,\n+          \"pinot upsert require one and only one primary key\");\n+      Preconditions.checkState(StringUtils.isNotEmpty(_offsetKey),\n+          \"pinot upsert require one offset key\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d78868093be43c4d117c4ece5b976f0781df16fc"}, "originalPosition": 82}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0Nzk5NTc3OnYy", "diffSide": "RIGHT", "path": "pinot-spi/src/main/java/org/apache/pinot/spi/config/IngestionModeConfig.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QxODowNDowNFrOGHX9AQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QxODowNDowNFrOGHX9AQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDM4NTY2NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                      \"pinot upsert require one validFrom key\");\n          \n          \n            \n                      \"Upsert feature requires \\\"validFromColumn\\\" to be set\");", "url": "https://github.com/apache/pinot/pull/5175#discussion_r410385665", "createdAt": "2020-04-17T18:04:04Z", "author": {"login": "mcvsubbu"}, "path": "pinot-spi/src/main/java/org/apache/pinot/spi/config/IngestionModeConfig.java", "diffHunk": "@@ -0,0 +1,152 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.spi.config;\n+\n+\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonIgnore;\n+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.google.common.base.Preconditions;\n+import com.google.common.collect.ImmutableList;\n+import org.apache.commons.lang.StringUtils;\n+import org.apache.pinot.spi.utils.JsonUtils;\n+\n+import javax.annotation.Nullable;\n+import java.util.List;\n+\n+@SuppressWarnings(\"unused\")\n+@JsonIgnoreProperties(ignoreUnknown = true)\n+public class IngestionModeConfig {\n+  // new config key to indicate if a table is for upsert. If this is define as upsert, it would be an upsert table\n+  // for other value it would be append value for now\n+  private String _ingestionMode;\n+  // primary key refers to the column name that is the primary key of this upsert table\n+  private List<String> _primaryKeys;\n+  // offset key refers to the column name that we are going to store the offset value to\n+  private String _offsetKey;\n+  // validFrom key refers to the column name that we are going to store the validFrom value to\n+  private String _validFromKey;\n+  // validFrom key refers to the column name that we are going to store the validFrom value to\n+  private String _validUntilKey;\n+\n+  public static final String UPSERT_TABLE_CONFIG_VALUE = \"upsert\";\n+  public static final String APPEND_TABLE_CONFIG_VALUE = \"append\";\n+\n+  public static final IngestionModeConfig DEFAULT_APPEND_INGESTION_MODE =\n+      new IngestionModeConfig(APPEND_TABLE_CONFIG_VALUE, null, null, null,\n+          null);\n+\n+  @JsonCreator\n+  public IngestionModeConfig(\n+      @JsonProperty(value=\"ingestionMode\") @Nullable String ingestionMode,\n+      @JsonProperty(value=\"primaryKeys\") @Nullable List<String> primaryKeys,\n+      @JsonProperty(value=\"offsetKey\") @Nullable String offsetKey,\n+      @JsonProperty(value=\"validFromKey\") @Nullable String validFromKey,\n+      @JsonProperty(value=\"validUntilKey\") @Nullable String validUntilKey) {\n+    if (StringUtils.isEmpty(ingestionMode)) {\n+      _ingestionMode = APPEND_TABLE_CONFIG_VALUE;\n+    } else {\n+      _ingestionMode = ingestionMode.toLowerCase();\n+    }\n+    if (primaryKeys == null) {\n+      _primaryKeys = ImmutableList.of();\n+    } else {\n+      _primaryKeys = primaryKeys;\n+    }\n+    _offsetKey = offsetKey;\n+    _validFromKey = validFromKey;\n+    _validUntilKey = validUntilKey;\n+\n+    if (UPSERT_TABLE_CONFIG_VALUE.equals(_ingestionMode)) {\n+      Preconditions.checkState(_primaryKeys.size() == 1,\n+          \"pinot upsert require one and only one primary key\");\n+      Preconditions.checkState(StringUtils.isNotEmpty(_offsetKey),\n+          \"pinot upsert require one offset key\");\n+      Preconditions.checkState(StringUtils.isNotEmpty(_validFromKey),\n+          \"pinot upsert require one validFrom key\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d78868093be43c4d117c4ece5b976f0781df16fc"}, "originalPosition": 84}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0Nzk5NjUwOnYy", "diffSide": "RIGHT", "path": "pinot-spi/src/main/java/org/apache/pinot/spi/config/IngestionModeConfig.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QxODowNDoxNVrOGHX9cw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QxODowNDoxNVrOGHX9cw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDM4NTc3OQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                      \"pinot upsert require one validUntil key\");\n          \n          \n            \n                      \"Upsert feature requires \\\"validUntilColumn\\\"  to be set\");", "url": "https://github.com/apache/pinot/pull/5175#discussion_r410385779", "createdAt": "2020-04-17T18:04:15Z", "author": {"login": "mcvsubbu"}, "path": "pinot-spi/src/main/java/org/apache/pinot/spi/config/IngestionModeConfig.java", "diffHunk": "@@ -0,0 +1,152 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.spi.config;\n+\n+\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonIgnore;\n+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.google.common.base.Preconditions;\n+import com.google.common.collect.ImmutableList;\n+import org.apache.commons.lang.StringUtils;\n+import org.apache.pinot.spi.utils.JsonUtils;\n+\n+import javax.annotation.Nullable;\n+import java.util.List;\n+\n+@SuppressWarnings(\"unused\")\n+@JsonIgnoreProperties(ignoreUnknown = true)\n+public class IngestionModeConfig {\n+  // new config key to indicate if a table is for upsert. If this is define as upsert, it would be an upsert table\n+  // for other value it would be append value for now\n+  private String _ingestionMode;\n+  // primary key refers to the column name that is the primary key of this upsert table\n+  private List<String> _primaryKeys;\n+  // offset key refers to the column name that we are going to store the offset value to\n+  private String _offsetKey;\n+  // validFrom key refers to the column name that we are going to store the validFrom value to\n+  private String _validFromKey;\n+  // validFrom key refers to the column name that we are going to store the validFrom value to\n+  private String _validUntilKey;\n+\n+  public static final String UPSERT_TABLE_CONFIG_VALUE = \"upsert\";\n+  public static final String APPEND_TABLE_CONFIG_VALUE = \"append\";\n+\n+  public static final IngestionModeConfig DEFAULT_APPEND_INGESTION_MODE =\n+      new IngestionModeConfig(APPEND_TABLE_CONFIG_VALUE, null, null, null,\n+          null);\n+\n+  @JsonCreator\n+  public IngestionModeConfig(\n+      @JsonProperty(value=\"ingestionMode\") @Nullable String ingestionMode,\n+      @JsonProperty(value=\"primaryKeys\") @Nullable List<String> primaryKeys,\n+      @JsonProperty(value=\"offsetKey\") @Nullable String offsetKey,\n+      @JsonProperty(value=\"validFromKey\") @Nullable String validFromKey,\n+      @JsonProperty(value=\"validUntilKey\") @Nullable String validUntilKey) {\n+    if (StringUtils.isEmpty(ingestionMode)) {\n+      _ingestionMode = APPEND_TABLE_CONFIG_VALUE;\n+    } else {\n+      _ingestionMode = ingestionMode.toLowerCase();\n+    }\n+    if (primaryKeys == null) {\n+      _primaryKeys = ImmutableList.of();\n+    } else {\n+      _primaryKeys = primaryKeys;\n+    }\n+    _offsetKey = offsetKey;\n+    _validFromKey = validFromKey;\n+    _validUntilKey = validUntilKey;\n+\n+    if (UPSERT_TABLE_CONFIG_VALUE.equals(_ingestionMode)) {\n+      Preconditions.checkState(_primaryKeys.size() == 1,\n+          \"pinot upsert require one and only one primary key\");\n+      Preconditions.checkState(StringUtils.isNotEmpty(_offsetKey),\n+          \"pinot upsert require one offset key\");\n+      Preconditions.checkState(StringUtils.isNotEmpty(_validFromKey),\n+          \"pinot upsert require one validFrom key\");\n+      Preconditions.checkState(StringUtils.isNotEmpty(_validUntilKey),\n+          \"pinot upsert require one validUntil key\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d78868093be43c4d117c4ece5b976f0781df16fc"}, "originalPosition": 86}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0Nzk5OTA2OnYy", "diffSide": "RIGHT", "path": "pinot-spi/src/main/java/org/apache/pinot/spi/config/TableConfig.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QxODowNTowMVrOGHX_Gw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QxODowNTowMVrOGHX_Gw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDM4NjIwMw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              public static final String INGESTION_MODE_CONFIG_KEY = \"ingestionModeConfig\";\n          \n          \n            \n              public static final String UPSERT_CONFIG_KEY = \"upsertConfig\";", "url": "https://github.com/apache/pinot/pull/5175#discussion_r410386203", "createdAt": "2020-04-17T18:05:01Z", "author": {"login": "mcvsubbu"}, "path": "pinot-spi/src/main/java/org/apache/pinot/spi/config/TableConfig.java", "diffHunk": "@@ -44,6 +45,7 @@\n   public static final String QUERY_CONFIG_KEY = \"query\";\n   public static final String INSTANCE_ASSIGNMENT_CONFIG_MAP_KEY = \"instanceAssignmentConfigMap\";\n   public static final String FIELD_CONFIG_LIST_KEY = \"fieldConfigList\";\n+  public static final String INGESTION_MODE_CONFIG_KEY = \"ingestionModeConfig\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d78868093be43c4d117c4ece5b976f0781df16fc"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0ODcxMzI0OnYy", "diffSide": "RIGHT", "path": "pinot-spi/src/main/java/org/apache/pinot/spi/config/IngestionModeConfig.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QyMjozNToyN1rOGHfAIw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QyMjozNToyN1rOGHfAIw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDUwMTE1NQ==", "bodyText": "If this config is for upsert only, I think all arguments are required", "url": "https://github.com/apache/pinot/pull/5175#discussion_r410501155", "createdAt": "2020-04-17T22:35:27Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-spi/src/main/java/org/apache/pinot/spi/config/IngestionModeConfig.java", "diffHunk": "@@ -0,0 +1,152 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.spi.config;\n+\n+\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonIgnore;\n+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.google.common.base.Preconditions;\n+import com.google.common.collect.ImmutableList;\n+import org.apache.commons.lang.StringUtils;\n+import org.apache.pinot.spi.utils.JsonUtils;\n+\n+import javax.annotation.Nullable;\n+import java.util.List;\n+\n+@SuppressWarnings(\"unused\")\n+@JsonIgnoreProperties(ignoreUnknown = true)\n+public class IngestionModeConfig {\n+  // new config key to indicate if a table is for upsert. If this is define as upsert, it would be an upsert table\n+  // for other value it would be append value for now\n+  private String _ingestionMode;\n+  // primary key refers to the column name that is the primary key of this upsert table\n+  private List<String> _primaryKeys;\n+  // offset key refers to the column name that we are going to store the offset value to\n+  private String _offsetKey;\n+  // validFrom key refers to the column name that we are going to store the validFrom value to\n+  private String _validFromKey;\n+  // validFrom key refers to the column name that we are going to store the validFrom value to\n+  private String _validUntilKey;\n+\n+  public static final String UPSERT_TABLE_CONFIG_VALUE = \"upsert\";\n+  public static final String APPEND_TABLE_CONFIG_VALUE = \"append\";\n+\n+  public static final IngestionModeConfig DEFAULT_APPEND_INGESTION_MODE =\n+      new IngestionModeConfig(APPEND_TABLE_CONFIG_VALUE, null, null, null,\n+          null);\n+\n+  @JsonCreator\n+  public IngestionModeConfig(\n+      @JsonProperty(value=\"ingestionMode\") @Nullable String ingestionMode,\n+      @JsonProperty(value=\"primaryKeys\") @Nullable List<String> primaryKeys,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d78868093be43c4d117c4ece5b976f0781df16fc"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2Nzk5NjkxOnYy", "diffSide": "RIGHT", "path": "pinot-common/src/main/java/org/apache/pinot/common/utils/config/TableConfigUtils.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxODoyNzo0MFrOGKE3Sw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxODoyNzo0MFrOGKE3Sw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzIxODYzNQ==", "bodyText": "(nit) extra empty line", "url": "https://github.com/apache/pinot/pull/5175#discussion_r413218635", "createdAt": "2020-04-22T18:27:40Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-common/src/main/java/org/apache/pinot/common/utils/config/TableConfigUtils.java", "diffHunk": "@@ -116,8 +117,16 @@ public static TableConfig fromZNRecord(ZNRecord znRecord)\n       });\n     }\n \n+    UpsertConfig upsertConfig = null;\n+    String upsertConfigString = simpleFields.get(TableConfig.UPSERT_CONFIG_KEY);\n+    if (upsertConfigString != null) {\n+      upsertConfig = JsonUtils.stringToObject(upsertConfigString, UpsertConfig.class);\n+    }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0f7ce4bdf5cca63337a4076834076351a0337fa2"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2Nzk5OTgyOnYy", "diffSide": "RIGHT", "path": "pinot-common/src/test/java/org/apache/pinot/common/utils/config/TableConfigSerDeTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxODoyODoxN1rOGKE48w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxODoyODoxN1rOGKE48w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzIxOTA1OQ==", "bodyText": "Prefer using Collections.singletonList()", "url": "https://github.com/apache/pinot/pull/5175#discussion_r413219059", "createdAt": "2020-04-22T18:28:17Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-common/src/test/java/org/apache/pinot/common/utils/config/TableConfigSerDeTest.java", "diffHunk": "@@ -231,6 +234,17 @@ public void testSerDe()\n       assertEquals(tableConfigToCompare, tableConfig);\n       checkFieldConfig(tableConfigToCompare);\n     }\n+    {\n+      // with upsert config\n+      UpsertConfig upsertConfig = new UpsertConfig(ImmutableList.of(\"pk\"), \"offset\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0f7ce4bdf5cca63337a4076834076351a0337fa2"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2ODAxOTgxOnYy", "diffSide": "RIGHT", "path": "pinot-common/src/test/java/org/apache/pinot/common/utils/config/TableConfigSerDeTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxODozMjo1MFrOGKFFEg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxODozMjo1MFrOGKFFEg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzIyMjE2Mg==", "bodyText": "Can you make this similar to other config check? Pass in a  table config and check the actual value inside the config. Then serialize and deserialize (both string and ZNRecord) and check again", "url": "https://github.com/apache/pinot/pull/5175#discussion_r413222162", "createdAt": "2020-04-22T18:32:50Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-common/src/test/java/org/apache/pinot/common/utils/config/TableConfigSerDeTest.java", "diffHunk": "@@ -367,4 +381,12 @@ private void checkFieldConfig(TableConfig tableConfig) {\n     assertNull(secondFieldConfig.getIndexType());\n     assertNull(secondFieldConfig.getProperties());\n   }\n+\n+  private void checkTableConfigWithUpsertConfig(TableConfig tableConfig, TableConfig tableConfigToCompare) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0f7ce4bdf5cca63337a4076834076351a0337fa2"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2ODAyNTU2OnYy", "diffSide": "RIGHT", "path": "pinot-spi/src/test/java/org/apache/pinot/spi/config/UpsertConfigTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxODozNDowNlrOGKFIYQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxODozNDowNlrOGKFIYQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzIyMzAwOQ==", "bodyText": "(nit) empty line", "url": "https://github.com/apache/pinot/pull/5175#discussion_r413223009", "createdAt": "2020-04-22T18:34:06Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-spi/src/test/java/org/apache/pinot/spi/config/UpsertConfigTest.java", "diffHunk": "@@ -0,0 +1,72 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.spi.config;\n+\n+import com.google.common.collect.ImmutableList;\n+import org.testng.annotations.Test;\n+\n+import static org.testng.Assert.*;\n+\n+public class UpsertConfigTest {\n+\n+  @Test\n+  public void testUpsertConfig() {\n+    UpsertConfig upsertConfig;\n+\n+    // test regular upsert table\n+    upsertConfig = new UpsertConfig(ImmutableList.of(\"primaryKey\"), \"offset\", \"validFrom\",\n+        \"validUntil\");\n+    assertEquals(1, upsertConfig.getPrimaryKeyColumns().size());\n+    assertEquals(\"primaryKey\", upsertConfig.getPrimaryKeyColumns().get(0));\n+    assertEquals(\"offset\", upsertConfig.getOffsetColumn());\n+    assertEquals(\"validFrom\", upsertConfig.getValidFromColumn());\n+    assertEquals(\"validUntil\", upsertConfig.getValidUntilColumn());\n+\n+    // test sanity check\n+    try {\n+      upsertConfig = new UpsertConfig(null,\n+          \"offset\", \"validFrom\", \"validUntil\");\n+      fail();\n+    } catch (RuntimeException ex) {}\n+\n+    try {\n+      upsertConfig = new UpsertConfig(ImmutableList.of(\"pk1\", \"pk2\"),\n+          \"offset\", \"validFrom\", \"validUntil\");\n+      fail();\n+    } catch (RuntimeException ex) {}\n+\n+    try {\n+      upsertConfig = new UpsertConfig(ImmutableList.of(\"pk1\"),\n+          null, \"validFrom\", \"validUntil\");\n+      fail();\n+    } catch (RuntimeException ex) {}\n+\n+    try {\n+      upsertConfig = new UpsertConfig(ImmutableList.of(\"pk1\"),\n+          \"offset\", null, \"validUntil\");\n+      fail();\n+    } catch (RuntimeException ex) {}\n+\n+    try {\n+      upsertConfig = new UpsertConfig(ImmutableList.of(\"pk1\"),\n+          \"offset\", \"validFrom\", null);\n+      fail();\n+    } catch (RuntimeException ex) {}\n+  }\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0f7ce4bdf5cca63337a4076834076351a0337fa2"}, "originalPosition": 72}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3ODU3MjczOnYy", "diffSide": "RIGHT", "path": "pinot-spi/src/main/java/org/apache/pinot/spi/config/UpsertConfig.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQxODo1NjowOFrOGLlDMg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQxODo1NjowOFrOGLlDMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDc5NDU0Ng==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    \"upsert feature support only one primary key column\");\n          \n          \n            \n                    \"Upsert feature supports only one primary key column\");", "url": "https://github.com/apache/pinot/pull/5175#discussion_r414794546", "createdAt": "2020-04-24T18:56:08Z", "author": {"login": "mcvsubbu"}, "path": "pinot-spi/src/main/java/org/apache/pinot/spi/config/UpsertConfig.java", "diffHunk": "@@ -0,0 +1,82 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.spi.config;\n+\n+\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonIgnore;\n+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.google.common.base.Preconditions;\n+import com.google.common.collect.ImmutableList;\n+import org.apache.commons.lang.StringUtils;\n+\n+import javax.annotation.Nullable;\n+import java.util.List;\n+\n+@SuppressWarnings(\"unused\")\n+@JsonIgnoreProperties(ignoreUnknown = true)\n+public class UpsertConfig extends BaseJsonConfig {\n+  // names of the columns that used as primary keys of an upsert table\n+  private final List<String> _primaryKeyColumns;\n+  // name of the column that we are going to store the offset value to\n+  private final String _offsetColumn;\n+  // name of the virtual column that we are going to store the validFrom value to\n+  private final String _validFromColumn;\n+  // name of the virtual column that we are going to store the validUntil value to\n+  private final String _validUntilColumn;\n+\n+  @JsonCreator\n+  public UpsertConfig(\n+      @JsonProperty(value=\"primaryKeyColumns\") List<String> primaryKeyColumns,\n+      @JsonProperty(value=\"offsetColumn\") String offsetColumn,\n+      @JsonProperty(value=\"validFromColumn\") String validFromColumn,\n+      @JsonProperty(value=\"validUntilColumn\") String validUntilColumn) {\n+\n+    _primaryKeyColumns = primaryKeyColumns;\n+    _offsetColumn = offsetColumn;\n+    _validFromColumn = validFromColumn;\n+    _validUntilColumn = validUntilColumn;\n+\n+    Preconditions.checkState(_primaryKeyColumns.size() == 1,\n+        \"upsert feature support only one primary key column\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a5fd4b9dea816cea973e6ceaf19462a170af207b"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3ODU3NDE1OnYy", "diffSide": "RIGHT", "path": "pinot-spi/src/main/java/org/apache/pinot/spi/config/UpsertConfig.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQxODo1NjoyOFrOGLlD_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQxODo1NjoyOFrOGLlD_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDc5NDc0OQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    \"upsert feature requires \\\"offsetColumn\\\" to be set \");\n          \n          \n            \n                    \"Upsert feature requires \\\"offsetColumn\\\" to be set \");", "url": "https://github.com/apache/pinot/pull/5175#discussion_r414794749", "createdAt": "2020-04-24T18:56:28Z", "author": {"login": "mcvsubbu"}, "path": "pinot-spi/src/main/java/org/apache/pinot/spi/config/UpsertConfig.java", "diffHunk": "@@ -0,0 +1,82 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.spi.config;\n+\n+\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonIgnore;\n+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.google.common.base.Preconditions;\n+import com.google.common.collect.ImmutableList;\n+import org.apache.commons.lang.StringUtils;\n+\n+import javax.annotation.Nullable;\n+import java.util.List;\n+\n+@SuppressWarnings(\"unused\")\n+@JsonIgnoreProperties(ignoreUnknown = true)\n+public class UpsertConfig extends BaseJsonConfig {\n+  // names of the columns that used as primary keys of an upsert table\n+  private final List<String> _primaryKeyColumns;\n+  // name of the column that we are going to store the offset value to\n+  private final String _offsetColumn;\n+  // name of the virtual column that we are going to store the validFrom value to\n+  private final String _validFromColumn;\n+  // name of the virtual column that we are going to store the validUntil value to\n+  private final String _validUntilColumn;\n+\n+  @JsonCreator\n+  public UpsertConfig(\n+      @JsonProperty(value=\"primaryKeyColumns\") List<String> primaryKeyColumns,\n+      @JsonProperty(value=\"offsetColumn\") String offsetColumn,\n+      @JsonProperty(value=\"validFromColumn\") String validFromColumn,\n+      @JsonProperty(value=\"validUntilColumn\") String validUntilColumn) {\n+\n+    _primaryKeyColumns = primaryKeyColumns;\n+    _offsetColumn = offsetColumn;\n+    _validFromColumn = validFromColumn;\n+    _validUntilColumn = validUntilColumn;\n+\n+    Preconditions.checkState(_primaryKeyColumns.size() == 1,\n+        \"upsert feature support only one primary key column\");\n+    Preconditions.checkState(StringUtils.isNotEmpty(_offsetColumn),\n+        \"upsert feature requires \\\"offsetColumn\\\" to be set \");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a5fd4b9dea816cea973e6ceaf19462a170af207b"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3ODU3NDcwOnYy", "diffSide": "RIGHT", "path": "pinot-spi/src/main/java/org/apache/pinot/spi/config/UpsertConfig.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQxODo1NjozOFrOGLlETg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQxODo1NjozOFrOGLlETg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDc5NDgzMA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    \"upsert feature requires \\\"validFromColumn\\\" to be set\");\n          \n          \n            \n                    \"Upsert feature requires \\\"validFromColumn\\\" to be set\");", "url": "https://github.com/apache/pinot/pull/5175#discussion_r414794830", "createdAt": "2020-04-24T18:56:38Z", "author": {"login": "mcvsubbu"}, "path": "pinot-spi/src/main/java/org/apache/pinot/spi/config/UpsertConfig.java", "diffHunk": "@@ -0,0 +1,82 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.spi.config;\n+\n+\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonIgnore;\n+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.google.common.base.Preconditions;\n+import com.google.common.collect.ImmutableList;\n+import org.apache.commons.lang.StringUtils;\n+\n+import javax.annotation.Nullable;\n+import java.util.List;\n+\n+@SuppressWarnings(\"unused\")\n+@JsonIgnoreProperties(ignoreUnknown = true)\n+public class UpsertConfig extends BaseJsonConfig {\n+  // names of the columns that used as primary keys of an upsert table\n+  private final List<String> _primaryKeyColumns;\n+  // name of the column that we are going to store the offset value to\n+  private final String _offsetColumn;\n+  // name of the virtual column that we are going to store the validFrom value to\n+  private final String _validFromColumn;\n+  // name of the virtual column that we are going to store the validUntil value to\n+  private final String _validUntilColumn;\n+\n+  @JsonCreator\n+  public UpsertConfig(\n+      @JsonProperty(value=\"primaryKeyColumns\") List<String> primaryKeyColumns,\n+      @JsonProperty(value=\"offsetColumn\") String offsetColumn,\n+      @JsonProperty(value=\"validFromColumn\") String validFromColumn,\n+      @JsonProperty(value=\"validUntilColumn\") String validUntilColumn) {\n+\n+    _primaryKeyColumns = primaryKeyColumns;\n+    _offsetColumn = offsetColumn;\n+    _validFromColumn = validFromColumn;\n+    _validUntilColumn = validUntilColumn;\n+\n+    Preconditions.checkState(_primaryKeyColumns.size() == 1,\n+        \"upsert feature support only one primary key column\");\n+    Preconditions.checkState(StringUtils.isNotEmpty(_offsetColumn),\n+        \"upsert feature requires \\\"offsetColumn\\\" to be set \");\n+    Preconditions.checkState(StringUtils.isNotEmpty(_validFromColumn),\n+        \"upsert feature requires \\\"validFromColumn\\\" to be set\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a5fd4b9dea816cea973e6ceaf19462a170af207b"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3ODU3NTk1OnYy", "diffSide": "RIGHT", "path": "pinot-spi/src/main/java/org/apache/pinot/spi/config/UpsertConfig.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQxODo1Njo1OFrOGLlFBg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQxODo1Njo1OFrOGLlFBg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDc5NTAxNA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    \"upsert feature requires \\\"validUntilColumn\\\" to be set\");\n          \n          \n            \n                    \"Upsert feature requires \\\"validUntilColumn\\\" to be set\");", "url": "https://github.com/apache/pinot/pull/5175#discussion_r414795014", "createdAt": "2020-04-24T18:56:58Z", "author": {"login": "mcvsubbu"}, "path": "pinot-spi/src/main/java/org/apache/pinot/spi/config/UpsertConfig.java", "diffHunk": "@@ -0,0 +1,82 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.spi.config;\n+\n+\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonIgnore;\n+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.google.common.base.Preconditions;\n+import com.google.common.collect.ImmutableList;\n+import org.apache.commons.lang.StringUtils;\n+\n+import javax.annotation.Nullable;\n+import java.util.List;\n+\n+@SuppressWarnings(\"unused\")\n+@JsonIgnoreProperties(ignoreUnknown = true)\n+public class UpsertConfig extends BaseJsonConfig {\n+  // names of the columns that used as primary keys of an upsert table\n+  private final List<String> _primaryKeyColumns;\n+  // name of the column that we are going to store the offset value to\n+  private final String _offsetColumn;\n+  // name of the virtual column that we are going to store the validFrom value to\n+  private final String _validFromColumn;\n+  // name of the virtual column that we are going to store the validUntil value to\n+  private final String _validUntilColumn;\n+\n+  @JsonCreator\n+  public UpsertConfig(\n+      @JsonProperty(value=\"primaryKeyColumns\") List<String> primaryKeyColumns,\n+      @JsonProperty(value=\"offsetColumn\") String offsetColumn,\n+      @JsonProperty(value=\"validFromColumn\") String validFromColumn,\n+      @JsonProperty(value=\"validUntilColumn\") String validUntilColumn) {\n+\n+    _primaryKeyColumns = primaryKeyColumns;\n+    _offsetColumn = offsetColumn;\n+    _validFromColumn = validFromColumn;\n+    _validUntilColumn = validUntilColumn;\n+\n+    Preconditions.checkState(_primaryKeyColumns.size() == 1,\n+        \"upsert feature support only one primary key column\");\n+    Preconditions.checkState(StringUtils.isNotEmpty(_offsetColumn),\n+        \"upsert feature requires \\\"offsetColumn\\\" to be set \");\n+    Preconditions.checkState(StringUtils.isNotEmpty(_validFromColumn),\n+        \"upsert feature requires \\\"validFromColumn\\\" to be set\");\n+    Preconditions.checkState(StringUtils.isNotEmpty(_validUntilColumn),\n+        \"upsert feature requires \\\"validUntilColumn\\\" to be set\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a5fd4b9dea816cea973e6ceaf19462a170af207b"}, "originalPosition": 64}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3311, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}