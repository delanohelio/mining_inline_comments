{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDkyMjA5NDAx", "number": 6056, "title": "Add FilterOptimizer which supports optimizing query filter from both BrokerRequest and PinotQuery", "bodyText": "Description\nAdd FilterOptimizer which supports optimizing query filter from both BrokerRequest and PinotQuery.\nFilterOptimizer will replace FilterQueryTreeOptimizer which only works on BrokerRequest query filter.\nIn order to fully support SQL (#4219), the query optimizer should perform the same optimization to PinotQuery as BrokerRequest.\nAdd FlattenAndOrFilterOptimizer to replace FlattenNestedPredicatesFilterQueryTreeOptimizer, and removes the limitation of flatten depth\nAdd MergeEqInFilterOptimizer to replace MultipleOrEqualitiesToInClauseFilterQueryTreeOptimizer\nAdd MergeRangeFilterOptimizer to replace RangeMergeOptimizer, and supports merging range for all single-value columns (based on schema)\nThis PR only adds the new code. The following PR will wire the new code and remove the old code.", "createdAt": "2020-09-24T06:11:25Z", "url": "https://github.com/apache/pinot/pull/6056", "merged": true, "mergeCommit": {"oid": "009ab53d1943829803fe308205dd951be2caffcb"}, "closed": true, "closedAt": "2020-09-30T04:16:35Z", "author": {"login": "Jackie-Jiang"}, "timelineItems": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdL6-oDAH2gAyNDkyMjA5NDAxOmFmNjRjMGNmYTQwNzI2MWE1NTI2MGE3YTdhZjdhZWQxMWNmNTQ5Yjc=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdNwWRKgFqTQ5ODk4MjIwNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "af64c0cfa407261a55260a7a7af7aed11cf549b7", "author": {"user": {"login": "Jackie-Jiang", "name": "Xiaotian (Jackie) Jiang"}}, "url": "https://github.com/apache/pinot/commit/af64c0cfa407261a55260a7a7af7aed11cf549b7", "committedDate": "2020-09-24T06:13:18Z", "message": "Add FilterOptimizer which supports optimizing both PQL and SQL query filter"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "91bd26adddec1ffd016bffe449108eceea313d40", "author": {"user": {"login": "Jackie-Jiang", "name": "Xiaotian (Jackie) Jiang"}}, "url": "https://github.com/apache/pinot/commit/91bd26adddec1ffd016bffe449108eceea313d40", "committedDate": "2020-09-24T06:02:12Z", "message": "Add FilterOptimizer which support optimizing both PQL and SQL query filter"}, "afterCommit": {"oid": "af64c0cfa407261a55260a7a7af7aed11cf549b7", "author": {"user": {"login": "Jackie-Jiang", "name": "Xiaotian (Jackie) Jiang"}}, "url": "https://github.com/apache/pinot/commit/af64c0cfa407261a55260a7a7af7aed11cf549b7", "committedDate": "2020-09-24T06:13:18Z", "message": "Add FilterOptimizer which supports optimizing both PQL and SQL query filter"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk2MTg4MTAw", "url": "https://github.com/apache/pinot/pull/6056#pullrequestreview-496188100", "createdAt": "2020-09-25T07:51:11Z", "commit": {"oid": "af64c0cfa407261a55260a7a7af7aed11cf549b7"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk3OTg1ODg2", "url": "https://github.com/apache/pinot/pull/6056#pullrequestreview-497985886", "createdAt": "2020-09-29T00:35:26Z", "commit": {"oid": "af64c0cfa407261a55260a7a7af7aed11cf549b7"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQwMDozNToyNlrOHZUTGw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQwMDozNToyNlrOHZUTGw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjMwOTAxOQ==", "bodyText": "Why PinotQuery based signature for SQL? That is the end-state after getting rid of BrokerRequest right?\nBut for now, the optimizer will get BrokerRequest for both PQL (through PQL compiler) and for SQL (through calcite compiler -> PinotQuery -> converter -> BrokerRequest). The javadoc seems misleading", "url": "https://github.com/apache/pinot/pull/6056#discussion_r496309019", "createdAt": "2020-09-29T00:35:26Z", "author": {"login": "siddharthteotia"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/query/optimizer/QueryOptimizer.java", "diffHunk": "@@ -0,0 +1,68 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.core.query.optimizer;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import javax.annotation.Nullable;\n+import org.apache.pinot.common.request.BrokerRequest;\n+import org.apache.pinot.common.request.Expression;\n+import org.apache.pinot.common.request.FilterQuery;\n+import org.apache.pinot.common.request.PinotQuery;\n+import org.apache.pinot.common.utils.request.FilterQueryTree;\n+import org.apache.pinot.common.utils.request.RequestUtils;\n+import org.apache.pinot.core.query.optimizer.filter.FilterOptimizer;\n+import org.apache.pinot.core.query.optimizer.filter.FlattenAndOrFilterOptimizer;\n+import org.apache.pinot.core.query.optimizer.filter.MergeEqInFilterOptimizer;\n+import org.apache.pinot.core.query.optimizer.filter.MergeRangeFilterOptimizer;\n+import org.apache.pinot.spi.data.Schema;\n+\n+\n+public class QueryOptimizer {\n+  private static final List<FilterOptimizer> FILTER_OPTIMIZERS = Arrays\n+      .asList(new FlattenAndOrFilterOptimizer(), new MergeEqInFilterOptimizer(), new MergeRangeFilterOptimizer());\n+\n+  /**\n+   * Optimizes the given PQL query.\n+   */\n+  public void optimize(BrokerRequest brokerRequest, @Nullable Schema schema) {\n+    FilterQuery filterQuery = brokerRequest.getFilterQuery();\n+    if (filterQuery != null) {\n+      FilterQueryTree filterQueryTree =\n+          RequestUtils.buildFilterQuery(filterQuery.getId(), brokerRequest.getFilterSubQueryMap().getFilterQueryMap());\n+      for (FilterOptimizer filterOptimizer : FILTER_OPTIMIZERS) {\n+        filterQueryTree = filterOptimizer.optimize(filterQueryTree, schema);\n+      }\n+      RequestUtils.generateFilterFromTree(filterQueryTree, brokerRequest);\n+    }\n+  }\n+\n+  /**\n+   * Optimizes the given SQL query.\n+   */\n+  public void optimize(PinotQuery pinotQuery, @Nullable Schema schema) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "af64c0cfa407261a55260a7a7af7aed11cf549b7"}, "originalPosition": 59}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk3OTg3Mzcw", "url": "https://github.com/apache/pinot/pull/6056#pullrequestreview-497987370", "createdAt": "2020-09-29T00:40:30Z", "commit": {"oid": "af64c0cfa407261a55260a7a7af7aed11cf549b7"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQwMDo0MDozMVrOHZUYHw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQwMDo0MDozMVrOHZUYHw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjMxMDMwMw==", "bodyText": "Can we enhance the existing one instead of deleting it? I believe everything is same except for removing flatten depth restriction and optimize interface for FilterExpression", "url": "https://github.com/apache/pinot/pull/6056#discussion_r496310303", "createdAt": "2020-09-29T00:40:31Z", "author": {"login": "siddharthteotia"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/query/optimizer/filter/FlattenAndOrFilterOptimizer.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.core.query.optimizer.filter;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import javax.annotation.Nullable;\n+import org.apache.pinot.common.request.Expression;\n+import org.apache.pinot.common.request.FilterOperator;\n+import org.apache.pinot.common.request.Function;\n+import org.apache.pinot.common.utils.request.FilterQueryTree;\n+import org.apache.pinot.pql.parsers.pql2.ast.FilterKind;\n+import org.apache.pinot.spi.data.Schema;\n+\n+\n+/**\n+ * The {@code FlattenAndOrFilterOptimizer} flattens the nested AND/OR filters. For example, AND(a, AND(b, c)) can\n+ * be flattened to AND(a, b, c).\n+ */\n+public class FlattenAndOrFilterOptimizer implements FilterOptimizer {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "af64c0cfa407261a55260a7a7af7aed11cf549b7"}, "originalPosition": 36}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk3OTg3NTQ2", "url": "https://github.com/apache/pinot/pull/6056#pullrequestreview-497987546", "createdAt": "2020-09-29T00:41:07Z", "commit": {"oid": "af64c0cfa407261a55260a7a7af7aed11cf549b7"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQwMDo0MTowN1rOHZUYwQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQwMDo0MTowN1rOHZUYwQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjMxMDQ2NQ==", "bodyText": "Same as before. We should try to enhance the same code.", "url": "https://github.com/apache/pinot/pull/6056#discussion_r496310465", "createdAt": "2020-09-29T00:41:07Z", "author": {"login": "siddharthteotia"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/query/optimizer/filter/MergeEqInFilterOptimizer.java", "diffHunk": "@@ -0,0 +1,263 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.core.query.optimizer.filter;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import javax.annotation.Nullable;\n+import org.apache.pinot.common.request.Expression;\n+import org.apache.pinot.common.request.FilterOperator;\n+import org.apache.pinot.common.request.Function;\n+import org.apache.pinot.common.utils.request.FilterQueryTree;\n+import org.apache.pinot.common.utils.request.RequestUtils;\n+import org.apache.pinot.pql.parsers.pql2.ast.FilterKind;\n+import org.apache.pinot.spi.data.Schema;\n+\n+\n+/**\n+ * The {@code MergeEqualInFilterOptimizer} merges EQ and IN predicates on the same column joined by OR, and performs the", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "af64c0cfa407261a55260a7a7af7aed11cf549b7"}, "originalPosition": 39}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk4OTgyMjA1", "url": "https://github.com/apache/pinot/pull/6056#pullrequestreview-498982205", "createdAt": "2020-09-29T22:58:01Z", "commit": {"oid": "af64c0cfa407261a55260a7a7af7aed11cf549b7"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 107, "cost": 1, "resetAt": "2021-10-28T18:00:02Z"}}}