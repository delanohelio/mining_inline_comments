{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA1NTMzMDcy", "number": 5275, "title": "Issue 5261: Support AggregationFunctions with multiple arguments (contd).", "bodyText": "This PR is a continuation of #5259\nto address the issue #5261.\n\n\nAdded new field in request.thrift aggregationFunctionArgs as a list of String\narguments for the aggregation funciton.\n\nCould not use the existing aggregationParams as it is a Map, and functions with\nvariable arguments may not provide a name for the arg (to be used as key in Map).\nMaintain backward compatibility by first check for the new field, and fall back to\nthe existing one if it does not exist.\n\n\n\nEnsure that all calls to the old AggregationInfo.getAggregationParams() is replaced\nwith backward compatible AgguregationFunctionUtils.getAggregationArgs().\n\n\nSince most aggregation functions today have just one argument, added a separate api\nAggregationFuncitonContext.getFirstArgument() as an optimization.\n\n\nCleaned up getColumnName() and getResultColumnName() api's in AggregationFunctionContext\nclass to not require the column name argument, as this is already stored in the\nAggregationFunction.\n\n\nModified all tests to use aggregationFunctionArgs instead of aggregationParams.\n\n\nTODO:\nRemove the AggregationFunctionContext class as AggregationFunctions now store their arguments,\nand this class no longer provides any additional value.", "createdAt": "2020-04-18T17:32:58Z", "url": "https://github.com/apache/pinot/pull/5275", "merged": true, "mergeCommit": {"oid": "bd79861e7bca87406fc184ec70ce504667f76daf"}, "closed": true, "closedAt": "2020-04-19T23:51:21Z", "author": {"login": "mayankshriv"}, "timelineItems": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcZQKetgFqTM5NTk3NTIzOQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcZRJNXABqjMyNDk0ODQ5NDg=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk1OTc1MjM5", "url": "https://github.com/apache/pinot/pull/5275#pullrequestreview-395975239", "createdAt": "2020-04-19T04:40:34Z", "commit": {"oid": "ad3a38a998f1ce9ddd46853fa38849b973032a9c"}, "state": "APPROVED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOVQwNDo0MDozNVrOGHyEnw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOVQyMDowMzoxMFrOGH8PbA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDgxMzU5OQ==", "bodyText": "typo tGroupBy", "url": "https://github.com/apache/pinot/pull/5275#discussion_r410813599", "createdAt": "2020-04-19T04:40:35Z", "author": {"login": "kishoreg"}, "path": "pinot-common/src/main/java/org/apache/pinot/parsers/utils/BrokerRequestComparisonUtils.java", "diffHunk": "@@ -89,8 +89,7 @@ public static boolean validate(BrokerRequest br1, BrokerRequest br2, boolean ign\n           return false;\n         }\n       } else if (br2.getGroupBy() != null) {\n-        LOGGER.error(\"tGroupBy did not match, br1.getGroupBy() = null, br2.getGroupBy() = {}\",\n-            br2.getGroupBy());\n+        LOGGER.error(\"tGroupBy did not match, br1.getGroupBy() = null, br2.getGroupBy() = {}\", br2.getGroupBy());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ad3a38a998f1ce9ddd46853fa38849b973032a9c"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDk3OTM2MQ==", "bodyText": "maintain the order?", "url": "https://github.com/apache/pinot/pull/5275#discussion_r410979361", "createdAt": "2020-04-19T19:58:34Z", "author": {"login": "kishoreg"}, "path": "pinot-common/src/main/java/org/apache/pinot/pql/parsers/PinotQuery2BrokerRequestConverter.java", "diffHunk": "@@ -233,32 +232,32 @@ private AggregationInfo buildAggregationInfo(Function function) {\n       throw new Pql2CompilationException(\"Aggregation function expects non null argument\");\n     }\n \n-    String argumentString;\n+    List<String> args = new ArrayList<>(operands.size());\n     String functionName = function.getOperator();\n \n     if (functionName.equalsIgnoreCase(AggregationFunctionType.COUNT.getName())) {\n-      argumentString = \"*\";\n+      args = Collections.singletonList(\"*\");\n     } else {\n-      Set<String> expressions = new HashSet<>();\n-      StringBuilder sb = new StringBuilder();\n-      int numOperands = operands.size();\n-      for (int i = 0; i < numOperands; i++) {\n-        Expression expression = operands.get(i);\n-        String columnExpression = getColumnExpression(expression);\n-        if (expressions.add(columnExpression)) {\n-          // deduplicate the columns\n-          if (i != 0) {\n-            sb.append(CompilerConstants.AGGREGATION_FUNCTION_ARG_SEPARATOR);\n+      // Need to de-dup columns for distinct.\n+      if (functionName.equalsIgnoreCase(AggregationFunctionType.DISTINCT.getName())) {\n+        Set<String> expressionSet = new HashSet<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ad3a38a998f1ce9ddd46853fa38849b973032a9c"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDk3OTgyNA==", "bodyText": "too long args/argList/params/paramList/operands", "url": "https://github.com/apache/pinot/pull/5275#discussion_r410979824", "createdAt": "2020-04-19T20:00:50Z", "author": {"login": "kishoreg"}, "path": "pinot-common/src/thrift/request.thrift", "diffHunk": "@@ -102,6 +102,11 @@ struct AggregationInfo {\n   2: optional map<string,string> aggregationParams;\n   3: optional bool isInSelectList;\n \n+  // Backward compatible change to allow aggregation functions to take multiple arguments.\n+  // We could not reuse aggregationParams, as it requires argument name (as key), which may not be\n+  // available for aggregation functions with variable arguments.\n+  4: optional list<string> aggregationFunctionArgs;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ad3a38a998f1ce9ddd46853fa38849b973032a9c"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDk4MDA4MA==", "bodyText": "+1", "url": "https://github.com/apache/pinot/pull/5275#discussion_r410980080", "createdAt": "2020-04-19T20:02:40Z", "author": {"login": "kishoreg"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/query/aggregation/AggregationFunctionContext.java", "diffHunk": "@@ -18,19 +18,28 @@\n  */\n package org.apache.pinot.core.query.aggregation;\n \n+import com.google.common.base.Preconditions;\n+import java.util.List;\n import org.apache.pinot.core.query.aggregation.function.AggregationFunction;\n+import org.apache.pinot.core.query.aggregation.function.AggregationFunctionUtils;\n \n \n /**\n  * This class caches miscellaneous data to perform efficient aggregation.\n+ *\n+ * TODO: Remove this class, as it no longer provides any value after aggregation functions now store", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ad3a38a998f1ce9ddd46853fa38849b973032a9c"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDk4MDIwNA==", "bodyText": "why not remove it in this PR itself?", "url": "https://github.com/apache/pinot/pull/5275#discussion_r410980204", "createdAt": "2020-04-19T20:03:10Z", "author": {"login": "kishoreg"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/query/aggregation/AggregationFunctionContext.java", "diffHunk": "@@ -18,19 +18,28 @@\n  */\n package org.apache.pinot.core.query.aggregation;\n \n+import com.google.common.base.Preconditions;\n+import java.util.List;\n import org.apache.pinot.core.query.aggregation.function.AggregationFunction;\n+import org.apache.pinot.core.query.aggregation.function.AggregationFunctionUtils;\n \n \n /**\n  * This class caches miscellaneous data to perform efficient aggregation.\n+ *\n+ * TODO: Remove this class, as it no longer provides any value after aggregation functions now store", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDk4MDA4MA=="}, "originalCommit": {"oid": "ad3a38a998f1ce9ddd46853fa38849b973032a9c"}, "originalPosition": 13}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ad3a38a998f1ce9ddd46853fa38849b973032a9c", "author": {"user": {"login": "mayankshriv", "name": "Mayank Shrivastava"}}, "url": "https://github.com/apache/pinot/commit/ad3a38a998f1ce9ddd46853fa38849b973032a9c", "committedDate": "2020-04-18T17:24:56Z", "message": "Issue 5261: Support AggregationFunctions with multiple arguments (contd).\n\nThis PR is a continuation of https://github.com/apache/incubator-pinot/pull/5259\nto address the issue https://github.com/apache/incubator-pinot/issues/5261.\n\n1. Added new field in request.thrift `aggregationFunctionArgs` as a list of String\n   arguments for the aggregation funciton.\n   - Could not use the existing `aggregationParams` as it is a Map, and functions with\n     variable arguments may not provide a name for the arg (to be used as key in Map).\n   - Maintain backward compatibility by first check for the new field, and fall back to\n     the existing one if it does not exist.\n\n2. Ensure that all calls to the old AggregationInfo.getAggregationParams() is replaced\n   with backward compatible AgguregationFunctionUtils.getAggregationArgs().\n\n3. Since most aggregation functions today have just one argument, added a separate api\n   AggregationFuncitonContext.getFirstArgument() as an optimization.\n\n4. Cleaned up getColumnName() and getResultColumnName() api's in AggregationFunctionContext\n   class to not require the column name argument, as this is already stored in the\n   AggregationFunction.\n\n5. Modified all tests to use aggregationFunctionArgs instead of aggregationParams.\n\nTODO:\nRemove the AggregationFunctionContext class as AggregationFunctions now store their arguments,\nand this class no longer provides any additional value."}, "afterCommit": {"oid": "79feb907e970d467254d197599dbad2f6b34ddce", "author": {"user": {"login": "mayankshriv", "name": "Mayank Shrivastava"}}, "url": "https://github.com/apache/pinot/commit/79feb907e970d467254d197599dbad2f6b34ddce", "committedDate": "2020-04-19T20:55:21Z", "message": "Issue 5261: Support AggregationFunctions with multiple arguments (contd).\n\nThis PR is a continuation of https://github.com/apache/incubator-pinot/pull/5259\nto address the issue https://github.com/apache/incubator-pinot/issues/5261.\n\n1. Added new field in request.thrift `aggregationFunctionArgs` as a list of String\n   arguments for the aggregation funciton.\n   - Could not use the existing `aggregationParams` as it is a Map, and functions with\n     variable arguments may not provide a name for the arg (to be used as key in Map).\n   - Maintain backward compatibility by first check for the new field, and fall back to\n     the existing one if it does not exist.\n\n2. Ensure that all calls to the old AggregationInfo.getAggregationParams() is replaced\n   with backward compatible AgguregationFunctionUtils.getAggregationArgs().\n\n3. Since most aggregation functions today have just one argument, added a separate api\n   AggregationFuncitonContext.getFirstArgument() as an optimization.\n\n4. Cleaned up getColumnName() and getResultColumnName() api's in AggregationFunctionContext\n   class to not require the column name argument, as this is already stored in the\n   AggregationFunction.\n\n5. Modified all tests to use aggregationFunctionArgs instead of aggregationParams.\n\nTODO:\nRemove the AggregationFunctionContext class as AggregationFunctions now store their arguments,\nand this class no longer provides any additional value."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ae574964bc89301d43806eefd99e21324c1ec2bd", "author": {"user": {"login": "mayankshriv", "name": "Mayank Shrivastava"}}, "url": "https://github.com/apache/pinot/commit/ae574964bc89301d43806eefd99e21324c1ec2bd", "committedDate": "2020-04-19T21:12:06Z", "message": "Issue 5261: Support AggregationFunctions with multiple arguments (contd).\n\nThis PR is a continuation of https://github.com/apache/incubator-pinot/pull/5259\nto address the issue https://github.com/apache/incubator-pinot/issues/5261.\n\n1. Added new field in request.thrift `aggregationFunctionArgs` as a list of String\n   arguments for the aggregation funciton.\n   - Could not use the existing `aggregationParams` as it is a Map, and functions with\n     variable arguments may not provide a name for the arg (to be used as key in Map).\n   - Maintain backward compatibility by first check for the new field, and fall back to\n     the existing one if it does not exist.\n\n2. Ensure that all calls to the old AggregationInfo.getAggregationParams() is replaced\n   with backward compatible AgguregationFunctionUtils.getAggregationArgs().\n\n3. Since most aggregation functions today have just one argument, added a separate api\n   AggregationFuncitonContext.getFirstArgument() as an optimization.\n\n4. Cleaned up getColumnName() and getResultColumnName() api's in AggregationFunctionContext\n   class to not require the column name argument, as this is already stored in the\n   AggregationFunction.\n\n5. Modified all tests to use aggregationFunctionArgs instead of aggregationParams.\n\nTODO:\nRemove the AggregationFunctionContext class as AggregationFunctions now store their arguments,\nand this class no longer provides any additional value."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "79feb907e970d467254d197599dbad2f6b34ddce", "author": {"user": {"login": "mayankshriv", "name": "Mayank Shrivastava"}}, "url": "https://github.com/apache/pinot/commit/79feb907e970d467254d197599dbad2f6b34ddce", "committedDate": "2020-04-19T20:55:21Z", "message": "Issue 5261: Support AggregationFunctions with multiple arguments (contd).\n\nThis PR is a continuation of https://github.com/apache/incubator-pinot/pull/5259\nto address the issue https://github.com/apache/incubator-pinot/issues/5261.\n\n1. Added new field in request.thrift `aggregationFunctionArgs` as a list of String\n   arguments for the aggregation funciton.\n   - Could not use the existing `aggregationParams` as it is a Map, and functions with\n     variable arguments may not provide a name for the arg (to be used as key in Map).\n   - Maintain backward compatibility by first check for the new field, and fall back to\n     the existing one if it does not exist.\n\n2. Ensure that all calls to the old AggregationInfo.getAggregationParams() is replaced\n   with backward compatible AgguregationFunctionUtils.getAggregationArgs().\n\n3. Since most aggregation functions today have just one argument, added a separate api\n   AggregationFuncitonContext.getFirstArgument() as an optimization.\n\n4. Cleaned up getColumnName() and getResultColumnName() api's in AggregationFunctionContext\n   class to not require the column name argument, as this is already stored in the\n   AggregationFunction.\n\n5. Modified all tests to use aggregationFunctionArgs instead of aggregationParams.\n\nTODO:\nRemove the AggregationFunctionContext class as AggregationFunctions now store their arguments,\nand this class no longer provides any additional value."}, "afterCommit": {"oid": "ae574964bc89301d43806eefd99e21324c1ec2bd", "author": {"user": {"login": "mayankshriv", "name": "Mayank Shrivastava"}}, "url": "https://github.com/apache/pinot/commit/ae574964bc89301d43806eefd99e21324c1ec2bd", "committedDate": "2020-04-19T21:12:06Z", "message": "Issue 5261: Support AggregationFunctions with multiple arguments (contd).\n\nThis PR is a continuation of https://github.com/apache/incubator-pinot/pull/5259\nto address the issue https://github.com/apache/incubator-pinot/issues/5261.\n\n1. Added new field in request.thrift `aggregationFunctionArgs` as a list of String\n   arguments for the aggregation funciton.\n   - Could not use the existing `aggregationParams` as it is a Map, and functions with\n     variable arguments may not provide a name for the arg (to be used as key in Map).\n   - Maintain backward compatibility by first check for the new field, and fall back to\n     the existing one if it does not exist.\n\n2. Ensure that all calls to the old AggregationInfo.getAggregationParams() is replaced\n   with backward compatible AgguregationFunctionUtils.getAggregationArgs().\n\n3. Since most aggregation functions today have just one argument, added a separate api\n   AggregationFuncitonContext.getFirstArgument() as an optimization.\n\n4. Cleaned up getColumnName() and getResultColumnName() api's in AggregationFunctionContext\n   class to not require the column name argument, as this is already stored in the\n   AggregationFunction.\n\n5. Modified all tests to use aggregationFunctionArgs instead of aggregationParams.\n\nTODO:\nRemove the AggregationFunctionContext class as AggregationFunctions now store their arguments,\nand this class no longer provides any additional value."}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1254, "cost": 1, "resetAt": "2021-10-28T18:00:02Z"}}}