{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQyNTExNzE1", "number": 5643, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxNzo1NDowMlrOEKm4GQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxNzo1NzoyOFrOEKm9Jg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5NTU4MTY5OnYy", "diffSide": "RIGHT", "path": "pinot-common/src/test/java/org/apache/pinot/sql/parsers/CalciteSqlCompilerTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxNzo1NDowMlrOGrv3Lw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxNzo1NDowMlrOGrv3Lw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODUyNjEyNw==", "bodyText": "(nit) empty line", "url": "https://github.com/apache/pinot/pull/5643#discussion_r448526127", "createdAt": "2020-07-01T17:54:02Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-common/src/test/java/org/apache/pinot/sql/parsers/CalciteSqlCompilerTest.java", "diffHunk": "@@ -1664,4 +1664,64 @@ public void testLiteralExpressionCheck() throws SqlParseException {\n     Assert.assertFalse(CalciteSqlParser.isLiteralOnlyExpression(CalciteSqlParser.compileToExpression(\"a+B\")));\n     Assert.assertFalse(CalciteSqlParser.isLiteralOnlyExpression(CalciteSqlParser.compileToExpression(\"c+1\")));\n   }\n+\n+  @Test\n+  public void testCaseInsensitiveFilter() {\n+    String query = \"SELECT count(*) FROM foo where text_match(col, 'expr')\";\n+    PinotQuery pinotQuery = CalciteSqlParser.compileToPinotQuery(query);\n+    PinotQuery2BrokerRequestConverter converter = new PinotQuery2BrokerRequestConverter();\n+    BrokerRequest brokerRequest = converter.convert(pinotQuery);\n+    Assert.assertEquals(pinotQuery.getFilterExpression().getFunctionCall().getOperator(), \"TEXT_MATCH\");\n+    Assert.assertEquals(brokerRequest.getFilterQuery().getOperator(), FilterOperator.TEXT_MATCH);\n+\n+    query = \"SELECT count(*) FROM foo where TEXT_MATCH(col, 'expr')\";\n+    pinotQuery = CalciteSqlParser.compileToPinotQuery(query);\n+    brokerRequest = converter.convert(pinotQuery);\n+    Assert.assertEquals(pinotQuery.getFilterExpression().getFunctionCall().getOperator(), \"TEXT_MATCH\");\n+    Assert.assertEquals(brokerRequest.getFilterQuery().getOperator(), FilterOperator.TEXT_MATCH);\n+\n+    query = \"SELECT count(*) FROM foo where regexp_like(col, 'expr')\";\n+    pinotQuery = CalciteSqlParser.compileToPinotQuery(query);\n+    brokerRequest = converter.convert(pinotQuery);\n+    Assert.assertEquals(pinotQuery.getFilterExpression().getFunctionCall().getOperator(), \"REGEXP_LIKE\");\n+    Assert.assertEquals(brokerRequest.getFilterQuery().getOperator(), FilterOperator.REGEXP_LIKE);\n+\n+    query = \"SELECT count(*) FROM foo where REGEXP_LIKE(col, 'expr')\";\n+    pinotQuery = CalciteSqlParser.compileToPinotQuery(query);\n+    brokerRequest = converter.convert(pinotQuery);\n+    Assert.assertEquals(pinotQuery.getFilterExpression().getFunctionCall().getOperator(), \"REGEXP_LIKE\");\n+    Assert.assertEquals(brokerRequest.getFilterQuery().getOperator(), FilterOperator.REGEXP_LIKE);\n+\n+    query = \"SELECT count(*) FROM foo where col is not null\";\n+    pinotQuery = CalciteSqlParser.compileToPinotQuery(query);\n+    brokerRequest = converter.convert(pinotQuery);\n+    Assert.assertEquals(pinotQuery.getFilterExpression().getFunctionCall().getOperator(), \"IS_NOT_NULL\");\n+    Assert.assertEquals(pinotQuery.getFilterExpression().getFunctionCall().getOperands().get(0).getIdentifier().getName(), \"col\");\n+    Assert.assertEquals(brokerRequest.getFilterQuery().getOperator(), FilterOperator.IS_NOT_NULL);\n+    Assert.assertEquals(brokerRequest.getFilterQuery().getColumn(), \"col\");\n+\n+    query = \"SELECT count(*) FROM foo where col IS NOT NULL\";\n+    pinotQuery = CalciteSqlParser.compileToPinotQuery(query);\n+    brokerRequest = converter.convert(pinotQuery);\n+    Assert.assertEquals(pinotQuery.getFilterExpression().getFunctionCall().getOperator(), \"IS_NOT_NULL\");\n+    Assert.assertEquals(pinotQuery.getFilterExpression().getFunctionCall().getOperands().get(0).getIdentifier().getName(), \"col\");\n+    Assert.assertEquals(brokerRequest.getFilterQuery().getOperator(), FilterOperator.IS_NOT_NULL);\n+    Assert.assertEquals(brokerRequest.getFilterQuery().getColumn(), \"col\");\n+\n+    query = \"SELECT count(*) FROM foo where col is null\";\n+    pinotQuery = CalciteSqlParser.compileToPinotQuery(query);\n+    brokerRequest = converter.convert(pinotQuery);\n+    Assert.assertEquals(pinotQuery.getFilterExpression().getFunctionCall().getOperator(), \"IS_NULL\");\n+    Assert.assertEquals(pinotQuery.getFilterExpression().getFunctionCall().getOperands().get(0).getIdentifier().getName(), \"col\");\n+    Assert.assertEquals(brokerRequest.getFilterQuery().getOperator(), FilterOperator.IS_NULL);\n+    Assert.assertEquals(brokerRequest.getFilterQuery().getColumn(), \"col\");\n+\n+    query = \"SELECT count(*) FROM foo where col IS NULL\";\n+    pinotQuery = CalciteSqlParser.compileToPinotQuery(query);\n+    brokerRequest = converter.convert(pinotQuery);\n+    Assert.assertEquals(pinotQuery.getFilterExpression().getFunctionCall().getOperator(), \"IS_NULL\");\n+    Assert.assertEquals(pinotQuery.getFilterExpression().getFunctionCall().getOperands().get(0).getIdentifier().getName(), \"col\");\n+    Assert.assertEquals(brokerRequest.getFilterQuery().getOperator(), FilterOperator.IS_NULL);\n+    Assert.assertEquals(brokerRequest.getFilterQuery().getColumn(), \"col\");\n+  }\n }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ecbf988e5cef9cb18907d71ab8e7458a7970fa80"}, "originalPosition": 64}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5NTU5NDYyOnYy", "diffSide": "RIGHT", "path": "pinot-common/src/main/java/org/apache/pinot/pql/parsers/PinotQuery2BrokerRequestConverter.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxNzo1NzoyOFrOGrv-nA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxNzo1NzoyOFrOGrv-nA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODUyODAyOA==", "bodyText": "(nit) Change line 270 as well\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        //first operand is the always the column\n          \n          \n            \n                        // First operand is the left-hand side column/expression of the predicate", "url": "https://github.com/apache/pinot/pull/5643#discussion_r448528028", "createdAt": "2020-07-01T17:57:28Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-common/src/main/java/org/apache/pinot/pql/parsers/PinotQuery2BrokerRequestConverter.java", "diffHunk": "@@ -272,7 +271,11 @@ private FilterQuery traverseFilterExpression(Expression filterExpression, Filter\n             filterQuery.setColumn(ParserUtils.standardizeExpression(operands.get(0), false));\n             filterQuery.setValue(ParserUtils.getFilterValues(filterKind, operands));\n             break;\n-\n+          case IS_NULL:\n+          case IS_NOT_NULL:\n+            //first operand is the always the column", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ecbf988e5cef9cb18907d71ab8e7458a7970fa80"}, "originalPosition": 21}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4410, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}