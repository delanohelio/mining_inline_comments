{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDIwMzAwNTQy", "number": 5413, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQwMTozODozMlrOD-B4NQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQwMTozODozMlrOD-B4NQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2MzY5MDc3OnYy", "diffSide": "RIGHT", "path": "thirdeye/thirdeye-pinot/src/main/java/org/apache/pinot/thirdeye/datalayer/util/SqlQueryBuilder.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQwMTozODozMlrOGX4V2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQyMToxNToyNFrOGYeD8A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzY5MzUyOA==", "bodyText": "I understand that we might not need ordering by other columns. Could we pass these as parameters in case we need to do it?", "url": "https://github.com/apache/pinot/pull/5413#discussion_r427693528", "createdAt": "2020-05-20T01:38:32Z", "author": {"login": "vincentchenjl"}, "path": "thirdeye/thirdeye-pinot/src/main/java/org/apache/pinot/thirdeye/datalayer/util/SqlQueryBuilder.java", "diffHunk": "@@ -338,6 +338,46 @@ public PreparedStatement createFindByParamsStatement(Connection connection,\n     return prepareStatement;\n   }\n \n+  public PreparedStatement createfindByParamsStatementWithLimit(Connection connection,\n+      Class<? extends AbstractEntity> entityClass, Predicate predicate, Long limit, Long offset) throws Exception {\n+    String tableName = entityMappingHolder.tableToEntityNameMap.inverse().get(entityClass.getSimpleName());\n+    BiMap<String, String> entityNameToDBNameMapping =\n+        entityMappingHolder.columnMappingPerTable.get(tableName).inverse();\n+    StringBuilder sqlBuilder = new StringBuilder(\"SELECT * FROM \" + tableName);\n+    StringBuilder whereClause = new StringBuilder(\" WHERE \");\n+    List<Pair<String, Object>> parametersList = new ArrayList<>();\n+    generateWhereClause(entityNameToDBNameMapping, predicate, parametersList, whereClause);\n+    sqlBuilder.append(whereClause.toString());\n+    sqlBuilder.append(\" ORDER BY id DESC\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dc2e563ba91554146a577e36aabb28c79d707360"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODI4ODEzMA==", "bodyText": "Good point. I plan to add this and add the \"SORT BY\" functionality in the endpoint in a separate PR if needed.", "url": "https://github.com/apache/pinot/pull/5413#discussion_r428288130", "createdAt": "2020-05-20T20:28:05Z", "author": {"login": "jihaozh"}, "path": "thirdeye/thirdeye-pinot/src/main/java/org/apache/pinot/thirdeye/datalayer/util/SqlQueryBuilder.java", "diffHunk": "@@ -338,6 +338,46 @@ public PreparedStatement createFindByParamsStatement(Connection connection,\n     return prepareStatement;\n   }\n \n+  public PreparedStatement createfindByParamsStatementWithLimit(Connection connection,\n+      Class<? extends AbstractEntity> entityClass, Predicate predicate, Long limit, Long offset) throws Exception {\n+    String tableName = entityMappingHolder.tableToEntityNameMap.inverse().get(entityClass.getSimpleName());\n+    BiMap<String, String> entityNameToDBNameMapping =\n+        entityMappingHolder.columnMappingPerTable.get(tableName).inverse();\n+    StringBuilder sqlBuilder = new StringBuilder(\"SELECT * FROM \" + tableName);\n+    StringBuilder whereClause = new StringBuilder(\" WHERE \");\n+    List<Pair<String, Object>> parametersList = new ArrayList<>();\n+    generateWhereClause(entityNameToDBNameMapping, predicate, parametersList, whereClause);\n+    sqlBuilder.append(whereClause.toString());\n+    sqlBuilder.append(\" ORDER BY id DESC\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzY5MzUyOA=="}, "originalCommit": {"oid": "dc2e563ba91554146a577e36aabb28c79d707360"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODI5NDMxNw==", "bodyText": "Why we need to order by other columns? id is unique.", "url": "https://github.com/apache/pinot/pull/5413#discussion_r428294317", "createdAt": "2020-05-20T20:40:15Z", "author": {"login": "xiaohui-sun"}, "path": "thirdeye/thirdeye-pinot/src/main/java/org/apache/pinot/thirdeye/datalayer/util/SqlQueryBuilder.java", "diffHunk": "@@ -338,6 +338,46 @@ public PreparedStatement createFindByParamsStatement(Connection connection,\n     return prepareStatement;\n   }\n \n+  public PreparedStatement createfindByParamsStatementWithLimit(Connection connection,\n+      Class<? extends AbstractEntity> entityClass, Predicate predicate, Long limit, Long offset) throws Exception {\n+    String tableName = entityMappingHolder.tableToEntityNameMap.inverse().get(entityClass.getSimpleName());\n+    BiMap<String, String> entityNameToDBNameMapping =\n+        entityMappingHolder.columnMappingPerTable.get(tableName).inverse();\n+    StringBuilder sqlBuilder = new StringBuilder(\"SELECT * FROM \" + tableName);\n+    StringBuilder whereClause = new StringBuilder(\" WHERE \");\n+    List<Pair<String, Object>> parametersList = new ArrayList<>();\n+    generateWhereClause(entityNameToDBNameMapping, predicate, parametersList, whereClause);\n+    sqlBuilder.append(whereClause.toString());\n+    sqlBuilder.append(\" ORDER BY id DESC\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzY5MzUyOA=="}, "originalCommit": {"oid": "dc2e563ba91554146a577e36aabb28c79d707360"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODMxMDg0Mw==", "bodyText": "Yes. the id should be good enough for this. Unless we want to sort the result by other columns like names, etc.", "url": "https://github.com/apache/pinot/pull/5413#discussion_r428310843", "createdAt": "2020-05-20T21:13:53Z", "author": {"login": "jihaozh"}, "path": "thirdeye/thirdeye-pinot/src/main/java/org/apache/pinot/thirdeye/datalayer/util/SqlQueryBuilder.java", "diffHunk": "@@ -338,6 +338,46 @@ public PreparedStatement createFindByParamsStatement(Connection connection,\n     return prepareStatement;\n   }\n \n+  public PreparedStatement createfindByParamsStatementWithLimit(Connection connection,\n+      Class<? extends AbstractEntity> entityClass, Predicate predicate, Long limit, Long offset) throws Exception {\n+    String tableName = entityMappingHolder.tableToEntityNameMap.inverse().get(entityClass.getSimpleName());\n+    BiMap<String, String> entityNameToDBNameMapping =\n+        entityMappingHolder.columnMappingPerTable.get(tableName).inverse();\n+    StringBuilder sqlBuilder = new StringBuilder(\"SELECT * FROM \" + tableName);\n+    StringBuilder whereClause = new StringBuilder(\" WHERE \");\n+    List<Pair<String, Object>> parametersList = new ArrayList<>();\n+    generateWhereClause(entityNameToDBNameMapping, predicate, parametersList, whereClause);\n+    sqlBuilder.append(whereClause.toString());\n+    sqlBuilder.append(\" ORDER BY id DESC\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzY5MzUyOA=="}, "originalCommit": {"oid": "dc2e563ba91554146a577e36aabb28c79d707360"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODMxMTUzNg==", "bodyText": "sort by id desc would be a good default since it will show the latest created alerts in the first page by default.", "url": "https://github.com/apache/pinot/pull/5413#discussion_r428311536", "createdAt": "2020-05-20T21:15:24Z", "author": {"login": "xiaohui-sun"}, "path": "thirdeye/thirdeye-pinot/src/main/java/org/apache/pinot/thirdeye/datalayer/util/SqlQueryBuilder.java", "diffHunk": "@@ -338,6 +338,46 @@ public PreparedStatement createFindByParamsStatement(Connection connection,\n     return prepareStatement;\n   }\n \n+  public PreparedStatement createfindByParamsStatementWithLimit(Connection connection,\n+      Class<? extends AbstractEntity> entityClass, Predicate predicate, Long limit, Long offset) throws Exception {\n+    String tableName = entityMappingHolder.tableToEntityNameMap.inverse().get(entityClass.getSimpleName());\n+    BiMap<String, String> entityNameToDBNameMapping =\n+        entityMappingHolder.columnMappingPerTable.get(tableName).inverse();\n+    StringBuilder sqlBuilder = new StringBuilder(\"SELECT * FROM \" + tableName);\n+    StringBuilder whereClause = new StringBuilder(\" WHERE \");\n+    List<Pair<String, Object>> parametersList = new ArrayList<>();\n+    generateWhereClause(entityNameToDBNameMapping, predicate, parametersList, whereClause);\n+    sqlBuilder.append(whereClause.toString());\n+    sqlBuilder.append(\" ORDER BY id DESC\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzY5MzUyOA=="}, "originalCommit": {"oid": "dc2e563ba91554146a577e36aabb28c79d707360"}, "originalPosition": 14}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4460, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}