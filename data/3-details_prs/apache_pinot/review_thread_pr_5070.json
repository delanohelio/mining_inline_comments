{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc1MzAxNjU4", "number": 5070, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQyMDo0Njo1MVrODi2Jog==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQyMTowMjowNVrODi2biw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3ODY1Mzc4OnYy", "diffSide": "RIGHT", "path": "pinot-common/src/main/java/org/apache/pinot/sql/parsers/CalciteSqlParser.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQyMDo0Njo1MVrOFuUniw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQyMjoxNToxM1rOFuXO4Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDExNjYxOQ==", "bodyText": "Should opposite of GREATER_THAN be LESS_THAN_OR_EQUAL?", "url": "https://github.com/apache/pinot/pull/5070#discussion_r384116619", "createdAt": "2020-02-25T20:46:51Z", "author": {"login": "mayankshriv"}, "path": "pinot-common/src/main/java/org/apache/pinot/sql/parsers/CalciteSqlParser.java", "diffHunk": "@@ -289,6 +289,91 @@ private static PinotQuery compileCalciteSqlToPinotQuery(String sql) {\n     return pinotQuery;\n   }\n \n+  // This method converts a predicate expression to the what Pinot could evaluate.\n+  // For comparison expression, left operand could be any expression, but right operand only\n+  // supports literal.\n+  // E.g. 'WHERE a > b' will be updated to 'WHERE a - b > 0'\n+  private static Expression updateComparisonPredicate(Expression expression) {\n+    Function functionCall = expression.getFunctionCall();\n+    if (functionCall != null) {\n+      SqlKind sqlKind = SqlKind.OTHER_FUNCTION;\n+      try {\n+        sqlKind = SqlKind.valueOf(functionCall.getOperator().toUpperCase());\n+      } catch (Exception e) {\n+        // Do nothing\n+      }\n+      switch (sqlKind) {\n+        case EQUALS:\n+        case NOT_EQUALS:\n+        case GREATER_THAN:\n+        case GREATER_THAN_OR_EQUAL:\n+        case LESS_THAN:\n+        case LESS_THAN_OR_EQUAL:\n+          // Handle predicate like 'WHERE 10=a'\n+          if (functionCall.getOperands().get(0).getLiteral() != null) {\n+            functionCall.setOperator(getOppositeOperator(functionCall.getOperator()));\n+            List<Expression> oldOperands = functionCall.getOperands();\n+            Expression tempExpr = oldOperands.get(0);\n+            oldOperands.set(0, oldOperands.get(1));\n+            oldOperands.set(1, tempExpr);\n+          }\n+          if (functionCall.getOperands().get(1).getLiteral() != null) {\n+            return expression;\n+          }\n+          Expression comparisonFunction = RequestUtils.getFunctionExpression(functionCall.getOperator());\n+          List<Expression> exprList = new ArrayList<>();\n+          exprList.add(getLeftOperand(functionCall));\n+          exprList.add(RequestUtils.getLiteralExpression(0));\n+          comparisonFunction.getFunctionCall().setOperands(exprList);\n+          return comparisonFunction;\n+        default:\n+          List<Expression> operands = functionCall.getOperands();\n+          List<Expression> newOperands = new ArrayList<>();\n+          for (int i = 0; i < operands.size(); i++) {\n+            newOperands.add(updateComparisonPredicate(operands.get(i)));\n+          }\n+          functionCall.setOperands(newOperands);\n+      }\n+    }\n+    return expression;\n+  }\n+\n+  private static String getOppositeOperator(String operator) {\n+    switch (operator.toUpperCase()) {\n+      case \"GREATER_THAN\":", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "557ad7c290ce926e7af1ac356494f10cdf4c6761"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDE1OTQ1Nw==", "bodyText": "This is to handle expression of 0 < b to b > 0. Will add comments to this.", "url": "https://github.com/apache/pinot/pull/5070#discussion_r384159457", "createdAt": "2020-02-25T22:15:13Z", "author": {"login": "xiangfu0"}, "path": "pinot-common/src/main/java/org/apache/pinot/sql/parsers/CalciteSqlParser.java", "diffHunk": "@@ -289,6 +289,91 @@ private static PinotQuery compileCalciteSqlToPinotQuery(String sql) {\n     return pinotQuery;\n   }\n \n+  // This method converts a predicate expression to the what Pinot could evaluate.\n+  // For comparison expression, left operand could be any expression, but right operand only\n+  // supports literal.\n+  // E.g. 'WHERE a > b' will be updated to 'WHERE a - b > 0'\n+  private static Expression updateComparisonPredicate(Expression expression) {\n+    Function functionCall = expression.getFunctionCall();\n+    if (functionCall != null) {\n+      SqlKind sqlKind = SqlKind.OTHER_FUNCTION;\n+      try {\n+        sqlKind = SqlKind.valueOf(functionCall.getOperator().toUpperCase());\n+      } catch (Exception e) {\n+        // Do nothing\n+      }\n+      switch (sqlKind) {\n+        case EQUALS:\n+        case NOT_EQUALS:\n+        case GREATER_THAN:\n+        case GREATER_THAN_OR_EQUAL:\n+        case LESS_THAN:\n+        case LESS_THAN_OR_EQUAL:\n+          // Handle predicate like 'WHERE 10=a'\n+          if (functionCall.getOperands().get(0).getLiteral() != null) {\n+            functionCall.setOperator(getOppositeOperator(functionCall.getOperator()));\n+            List<Expression> oldOperands = functionCall.getOperands();\n+            Expression tempExpr = oldOperands.get(0);\n+            oldOperands.set(0, oldOperands.get(1));\n+            oldOperands.set(1, tempExpr);\n+          }\n+          if (functionCall.getOperands().get(1).getLiteral() != null) {\n+            return expression;\n+          }\n+          Expression comparisonFunction = RequestUtils.getFunctionExpression(functionCall.getOperator());\n+          List<Expression> exprList = new ArrayList<>();\n+          exprList.add(getLeftOperand(functionCall));\n+          exprList.add(RequestUtils.getLiteralExpression(0));\n+          comparisonFunction.getFunctionCall().setOperands(exprList);\n+          return comparisonFunction;\n+        default:\n+          List<Expression> operands = functionCall.getOperands();\n+          List<Expression> newOperands = new ArrayList<>();\n+          for (int i = 0; i < operands.size(); i++) {\n+            newOperands.add(updateComparisonPredicate(operands.get(i)));\n+          }\n+          functionCall.setOperands(newOperands);\n+      }\n+    }\n+    return expression;\n+  }\n+\n+  private static String getOppositeOperator(String operator) {\n+    switch (operator.toUpperCase()) {\n+      case \"GREATER_THAN\":", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDExNjYxOQ=="}, "originalCommit": {"oid": "557ad7c290ce926e7af1ac356494f10cdf4c6761"}, "originalPosition": 64}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3ODY1NzMyOnYy", "diffSide": "RIGHT", "path": "pinot-common/src/main/java/org/apache/pinot/sql/parsers/CalciteSqlParser.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQyMDo0Nzo1NlrOFuUpow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQyMjozNzozMVrOFuX1FQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDExNzE1NQ==", "bodyText": "Probably better to model this as a query re-write phase, so all re-writes can be done in a standardized way?", "url": "https://github.com/apache/pinot/pull/5070#discussion_r384117155", "createdAt": "2020-02-25T20:47:56Z", "author": {"login": "mayankshriv"}, "path": "pinot-common/src/main/java/org/apache/pinot/sql/parsers/CalciteSqlParser.java", "diffHunk": "@@ -289,6 +289,91 @@ private static PinotQuery compileCalciteSqlToPinotQuery(String sql) {\n     return pinotQuery;\n   }\n \n+  // This method converts a predicate expression to the what Pinot could evaluate.\n+  // For comparison expression, left operand could be any expression, but right operand only\n+  // supports literal.\n+  // E.g. 'WHERE a > b' will be updated to 'WHERE a - b > 0'\n+  private static Expression updateComparisonPredicate(Expression expression) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "557ad7c290ce926e7af1ac356494f10cdf4c6761"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDE2OTIzNw==", "bodyText": "Adding a queryRewrite method, also moved alias map into it.", "url": "https://github.com/apache/pinot/pull/5070#discussion_r384169237", "createdAt": "2020-02-25T22:37:31Z", "author": {"login": "xiangfu0"}, "path": "pinot-common/src/main/java/org/apache/pinot/sql/parsers/CalciteSqlParser.java", "diffHunk": "@@ -289,6 +289,91 @@ private static PinotQuery compileCalciteSqlToPinotQuery(String sql) {\n     return pinotQuery;\n   }\n \n+  // This method converts a predicate expression to the what Pinot could evaluate.\n+  // For comparison expression, left operand could be any expression, but right operand only\n+  // supports literal.\n+  // E.g. 'WHERE a > b' will be updated to 'WHERE a - b > 0'\n+  private static Expression updateComparisonPredicate(Expression expression) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDExNzE1NQ=="}, "originalCommit": {"oid": "557ad7c290ce926e7af1ac356494f10cdf4c6761"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3ODY5OTYzOnYy", "diffSide": "RIGHT", "path": "pinot-common/src/test/java/org/apache/pinot/sql/parsers/CalciteSqlCompilerTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQyMTowMjowNVrOFuVDkw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQyMjoyODo1MVrOFuXmOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDEyMzc5NQ==", "bodyText": "Does the code handle more complex expressions such as foo1(bar1(a-b)) <= foo2(bar2(c/d-e)? If so, let's add tests for those. If not, what's the plan there? Would it ever support those cases?", "url": "https://github.com/apache/pinot/pull/5070#discussion_r384123795", "createdAt": "2020-02-25T21:02:05Z", "author": {"login": "mayankshriv"}, "path": "pinot-common/src/test/java/org/apache/pinot/sql/parsers/CalciteSqlCompilerTest.java", "diffHunk": "@@ -118,6 +118,56 @@ public void testFilterCaluses() {\n     Assert.assertEquals(func.getOperands().get(4).getLiteral().getLongValue(), 17L);\n   }\n \n+  @Test\n+  public void testFilterCalusesWithRightExpression() {\n+    PinotQuery pinotQuery = CalciteSqlParser.compileToPinotQuery(\"select * from vegetables where a > b\");\n+    Function func = pinotQuery.getFilterExpression().getFunctionCall();\n+    Assert.assertEquals(func.getOperator(), SqlKind.GREATER_THAN.name());\n+    Assert.assertEquals(func.getOperands().get(0).getFunctionCall().getOperator(), \"MINUS\");\n+    Assert.assertEquals(func.getOperands().get(0).getFunctionCall().getOperands().get(0).getIdentifier().getName(), \"a\");\n+    Assert.assertEquals(func.getOperands().get(0).getFunctionCall().getOperands().get(1).getIdentifier().getName(), \"b\");\n+    Assert.assertEquals(func.getOperands().get(1).getLiteral().getLongValue(), 0L);\n+    pinotQuery = CalciteSqlParser.compileToPinotQuery(\"select * from vegetables where 0 < a-b\");\n+    func = pinotQuery.getFilterExpression().getFunctionCall();\n+    Assert.assertEquals(func.getOperator(), SqlKind.GREATER_THAN.name());\n+    Assert.assertEquals(func.getOperands().get(0).getFunctionCall().getOperator(), \"MINUS\");\n+    Assert.assertEquals(func.getOperands().get(0).getFunctionCall().getOperands().get(0).getIdentifier().getName(), \"a\");\n+    Assert.assertEquals(func.getOperands().get(0).getFunctionCall().getOperands().get(1).getIdentifier().getName(), \"b\");\n+    Assert.assertEquals(func.getOperands().get(1).getLiteral().getLongValue(), 0L);\n+\n+\n+    pinotQuery = CalciteSqlParser.compileToPinotQuery(\"select * from vegetables where b < 100 + c\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "557ad7c290ce926e7af1ac356494f10cdf4c6761"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDE2NTQzMg==", "bodyText": "This will be supported as foo1(bar1(a-b)) - foo2(bar2(c/d-e)) <= 0.\nWill add a test case for this.", "url": "https://github.com/apache/pinot/pull/5070#discussion_r384165432", "createdAt": "2020-02-25T22:28:51Z", "author": {"login": "xiangfu0"}, "path": "pinot-common/src/test/java/org/apache/pinot/sql/parsers/CalciteSqlCompilerTest.java", "diffHunk": "@@ -118,6 +118,56 @@ public void testFilterCaluses() {\n     Assert.assertEquals(func.getOperands().get(4).getLiteral().getLongValue(), 17L);\n   }\n \n+  @Test\n+  public void testFilterCalusesWithRightExpression() {\n+    PinotQuery pinotQuery = CalciteSqlParser.compileToPinotQuery(\"select * from vegetables where a > b\");\n+    Function func = pinotQuery.getFilterExpression().getFunctionCall();\n+    Assert.assertEquals(func.getOperator(), SqlKind.GREATER_THAN.name());\n+    Assert.assertEquals(func.getOperands().get(0).getFunctionCall().getOperator(), \"MINUS\");\n+    Assert.assertEquals(func.getOperands().get(0).getFunctionCall().getOperands().get(0).getIdentifier().getName(), \"a\");\n+    Assert.assertEquals(func.getOperands().get(0).getFunctionCall().getOperands().get(1).getIdentifier().getName(), \"b\");\n+    Assert.assertEquals(func.getOperands().get(1).getLiteral().getLongValue(), 0L);\n+    pinotQuery = CalciteSqlParser.compileToPinotQuery(\"select * from vegetables where 0 < a-b\");\n+    func = pinotQuery.getFilterExpression().getFunctionCall();\n+    Assert.assertEquals(func.getOperator(), SqlKind.GREATER_THAN.name());\n+    Assert.assertEquals(func.getOperands().get(0).getFunctionCall().getOperator(), \"MINUS\");\n+    Assert.assertEquals(func.getOperands().get(0).getFunctionCall().getOperands().get(0).getIdentifier().getName(), \"a\");\n+    Assert.assertEquals(func.getOperands().get(0).getFunctionCall().getOperands().get(1).getIdentifier().getName(), \"b\");\n+    Assert.assertEquals(func.getOperands().get(1).getLiteral().getLongValue(), 0L);\n+\n+\n+    pinotQuery = CalciteSqlParser.compileToPinotQuery(\"select * from vegetables where b < 100 + c\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDEyMzc5NQ=="}, "originalCommit": {"oid": "557ad7c290ce926e7af1ac356494f10cdf4c6761"}, "originalPosition": 43}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3448, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}