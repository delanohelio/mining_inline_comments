{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYwMTA1MTc3", "number": 4964, "title": "Sql query endpoint", "bodyText": "#4962\nQuery the port using\ncurl -H \"Content-Type: application/json\" -X POST -d '{\"sql\":\"select count(*) from testTable group by foo order by foo desc\"}' http://localhost:8099/sql\n\nPlease not: the functionality will be limited right now by what's accepted by the parsing layer.\nFor instance, TOP will not parse for group by queries, but LIMIT - which will parse - hasn't been wired in yet.", "createdAt": "2020-01-07T17:58:48Z", "url": "https://github.com/apache/pinot/pull/4964", "merged": true, "mergeCommit": {"oid": "17b23600b8023ccd3d9da5f2c3367b0fcd5c3c4a"}, "closed": true, "closedAt": "2020-01-09T20:53:50Z", "author": {"login": "npawar"}, "timelineItems": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABb4Ey4WgFqTMzOTQxMDU4Ng==", "endCursor": "Y3Vyc29yOnYyOpPPAAABb4u2XPAH2gAyMzYwMTA1MTc3OjA2NzMzNTA0Yzc2ZmNkNzM2NmUxZDFjZDMwNjg0ZThkNjI4NTI3NjM=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzM5NDEwNTg2", "url": "https://github.com/apache/pinot/pull/4964#pullrequestreview-339410586", "createdAt": "2020-01-07T18:08:43Z", "commit": {"oid": "54f9bf9e19609f7ad3d0adf8d2df3159ce7ad291"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wN1QxODowODo0M1rOFbBYaA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wN1QxODowODo0M1rOFbBYaA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mzg3ODUwNA==", "bodyText": "Nit: s/in/using?", "url": "https://github.com/apache/pinot/pull/4964#discussion_r363878504", "createdAt": "2020-01-07T18:08:43Z", "author": {"login": "mayankshriv"}, "path": "pinot-broker/src/main/java/org/apache/pinot/broker/api/resources/PinotClientRequest.java", "diffHunk": "@@ -103,4 +100,60 @@ public String processQueryPost(String query) {\n       throw new WebApplicationException(e, Response.Status.INTERNAL_SERVER_ERROR);\n     }\n   }\n+\n+  @GET\n+  @Produces(MediaType.APPLICATION_JSON)\n+  @Path(\"sql\")\n+  @ApiOperation(value = \"Querying pinot in sql\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "54f9bf9e19609f7ad3d0adf8d2df3159ce7ad291"}, "originalPosition": 42}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzM5NDUzNzcy", "url": "https://github.com/apache/pinot/pull/4964#pullrequestreview-339453772", "createdAt": "2020-01-07T19:26:05Z", "commit": {"oid": "54f9bf9e19609f7ad3d0adf8d2df3159ce7ad291"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wN1QxOToyNjowNVrOFbDWSQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wN1QxOToyNjo0MFrOFbDXQg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzkxMDcyOQ==", "bodyText": "Why not contain trace and debug_option in this endpoint?", "url": "https://github.com/apache/pinot/pull/4964#discussion_r363910729", "createdAt": "2020-01-07T19:26:05Z", "author": {"login": "jackjlli"}, "path": "pinot-broker/src/main/java/org/apache/pinot/broker/api/resources/PinotClientRequest.java", "diffHunk": "@@ -103,4 +100,60 @@ public String processQueryPost(String query) {\n       throw new WebApplicationException(e, Response.Status.INTERNAL_SERVER_ERROR);\n     }\n   }\n+\n+  @GET\n+  @Produces(MediaType.APPLICATION_JSON)\n+  @Path(\"sql\")\n+  @ApiOperation(value = \"Querying pinot in sql\")\n+  @ApiResponses(value = {@ApiResponse(code = 200, message = \"Query response\"), @ApiResponse(code = 500, message = \"Internal Server Error\")})\n+  public String processSqlQueryGet(@ApiParam(value = \"Query\", required = true) @QueryParam(\"sql\") String query,\n+      @ApiParam(value = \"Trace enabled\") @QueryParam(Request.TRACE) String traceEnabled,\n+      @ApiParam(value = \"Debug options\") @QueryParam(Request.DEBUG_OPTIONS) String debugOptions) {\n+    try {\n+      ObjectNode requestJson = JsonUtils.newObjectNode();\n+      requestJson.put(Request.SQL, query);\n+      String queryOptions = constructSqlQueryOptions();\n+      requestJson.put(Request.QUERY_OPTIONS, queryOptions);\n+      if (traceEnabled != null) {\n+        requestJson.put(Request.TRACE, traceEnabled);\n+      }\n+      if (debugOptions != null) {\n+        requestJson.put(Request.DEBUG_OPTIONS, debugOptions);\n+      }\n+      BrokerResponse brokerResponse = requestHandler.handleRequest(requestJson, null, new RequestStatistics());\n+      return brokerResponse.toJsonString();\n+    } catch (Exception e) {\n+      LOGGER.error(\"Caught exception while processing GET request\", e);\n+      brokerMetrics.addMeteredGlobalValue(BrokerMeter.UNCAUGHT_GET_EXCEPTIONS, 1L);\n+      throw new WebApplicationException(e, Response.Status.INTERNAL_SERVER_ERROR);\n+    }\n+  }\n+\n+  @POST\n+  @Produces(MediaType.APPLICATION_JSON)\n+  @Path(\"sql\")\n+  @ApiOperation(value = \"Querying pinot\")\n+  @ApiResponses(value = {@ApiResponse(code = 200, message = \"Query response\"), @ApiResponse(code = 500, message = \"Internal Server Error\")})\n+  public String processSqlQueryPost(String query) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "54f9bf9e19609f7ad3d0adf8d2df3159ce7ad291"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzkxMDk3OA==", "bodyText": "\"Querying pinot using sql\"?", "url": "https://github.com/apache/pinot/pull/4964#discussion_r363910978", "createdAt": "2020-01-07T19:26:40Z", "author": {"login": "jackjlli"}, "path": "pinot-broker/src/main/java/org/apache/pinot/broker/api/resources/PinotClientRequest.java", "diffHunk": "@@ -103,4 +100,60 @@ public String processQueryPost(String query) {\n       throw new WebApplicationException(e, Response.Status.INTERNAL_SERVER_ERROR);\n     }\n   }\n+\n+  @GET\n+  @Produces(MediaType.APPLICATION_JSON)\n+  @Path(\"sql\")\n+  @ApiOperation(value = \"Querying pinot in sql\")\n+  @ApiResponses(value = {@ApiResponse(code = 200, message = \"Query response\"), @ApiResponse(code = 500, message = \"Internal Server Error\")})\n+  public String processSqlQueryGet(@ApiParam(value = \"Query\", required = true) @QueryParam(\"sql\") String query,\n+      @ApiParam(value = \"Trace enabled\") @QueryParam(Request.TRACE) String traceEnabled,\n+      @ApiParam(value = \"Debug options\") @QueryParam(Request.DEBUG_OPTIONS) String debugOptions) {\n+    try {\n+      ObjectNode requestJson = JsonUtils.newObjectNode();\n+      requestJson.put(Request.SQL, query);\n+      String queryOptions = constructSqlQueryOptions();\n+      requestJson.put(Request.QUERY_OPTIONS, queryOptions);\n+      if (traceEnabled != null) {\n+        requestJson.put(Request.TRACE, traceEnabled);\n+      }\n+      if (debugOptions != null) {\n+        requestJson.put(Request.DEBUG_OPTIONS, debugOptions);\n+      }\n+      BrokerResponse brokerResponse = requestHandler.handleRequest(requestJson, null, new RequestStatistics());\n+      return brokerResponse.toJsonString();\n+    } catch (Exception e) {\n+      LOGGER.error(\"Caught exception while processing GET request\", e);\n+      brokerMetrics.addMeteredGlobalValue(BrokerMeter.UNCAUGHT_GET_EXCEPTIONS, 1L);\n+      throw new WebApplicationException(e, Response.Status.INTERNAL_SERVER_ERROR);\n+    }\n+  }\n+\n+  @POST\n+  @Produces(MediaType.APPLICATION_JSON)\n+  @Path(\"sql\")\n+  @ApiOperation(value = \"Querying pinot\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "54f9bf9e19609f7ad3d0adf8d2df3159ce7ad291"}, "originalPosition": 70}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9f875de28430318c8e6fa6f8eb5deeb7496d6540", "author": {"user": {"login": "npawar", "name": "Neha Pawar"}}, "url": "https://github.com/apache/pinot/commit/9f875de28430318c8e6fa6f8eb5deeb7496d6540", "committedDate": "2020-01-08T01:51:19Z", "message": "Sql query endpoint"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1b4bbd995a084a0aff2461a510636a4046615492", "author": {"user": {"login": "npawar", "name": "Neha Pawar"}}, "url": "https://github.com/apache/pinot/commit/1b4bbd995a084a0aff2461a510636a4046615492", "committedDate": "2020-01-08T01:53:16Z", "message": "Add integration test for sql endpoint"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "7f423b3117cc9146c4be1d7c56d69990afa8b94a", "author": {"user": {"login": "npawar", "name": "Neha Pawar"}}, "url": "https://github.com/apache/pinot/commit/7f423b3117cc9146c4be1d7c56d69990afa8b94a", "committedDate": "2020-01-08T01:47:07Z", "message": "Merge branch 'master' into sql_endpoint"}, "afterCommit": {"oid": "1b4bbd995a084a0aff2461a510636a4046615492", "author": {"user": {"login": "npawar", "name": "Neha Pawar"}}, "url": "https://github.com/apache/pinot/commit/1b4bbd995a084a0aff2461a510636a4046615492", "committedDate": "2020-01-08T01:53:16Z", "message": "Add integration test for sql endpoint"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQwMDk2MTYw", "url": "https://github.com/apache/pinot/pull/4964#pullrequestreview-340096160", "createdAt": "2020-01-08T19:35:32Z", "commit": {"oid": "1b4bbd995a084a0aff2461a510636a4046615492"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOFQxOTozNTozMlrOFbhoHQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOFQxOTozNTozMlrOFbhoHQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDQwNjgxMw==", "bodyText": "Can we replace name and type with schema, and schema can be within metadata field. This way, we can add more metadata as needed.", "url": "https://github.com/apache/pinot/pull/4964#discussion_r364406813", "createdAt": "2020-01-08T19:35:32Z", "author": {"login": "mayankshriv"}, "path": "pinot-clients/pinot-java-client/src/main/java/org/apache/pinot/client/ResultTableResultSet.java", "diffHunk": "@@ -0,0 +1,106 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.client;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+\n+\n+/**\n+ * ResultSet which contains the ResultTable from the broker response of a sql query.\n+ */\n+class ResultTableResultSet extends AbstractResultSet {\n+  private JsonNode _rowsArray;\n+  private JsonNode _columnNamesArray;\n+  private JsonNode _columnDataTypesArray;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b4bbd995a084a0aff2461a510636a4046615492"}, "originalPosition": 30}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQwMTU3MDQ4", "url": "https://github.com/apache/pinot/pull/4964#pullrequestreview-340157048", "createdAt": "2020-01-08T21:29:57Z", "commit": {"oid": "1b4bbd995a084a0aff2461a510636a4046615492"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQwNjc5NTE2", "url": "https://github.com/apache/pinot/pull/4964#pullrequestreview-340679516", "createdAt": "2020-01-09T17:09:01Z", "commit": {"oid": "1b4bbd995a084a0aff2461a510636a4046615492"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOVQxNzowOTowMVrOFb9POg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOVQxNzowOTowMVrOFb9POg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDg1OTE5NA==", "bodyText": "I feel this is not very intuitive as to why the url path has /query for PQL query format and /sql for SQL query format. May be both modes can have query prefix? I don't think we can change the current url format as that would be backward incompatible but for the SQL format, I think we should consider having /query/sql", "url": "https://github.com/apache/pinot/pull/4964#discussion_r364859194", "createdAt": "2020-01-09T17:09:01Z", "author": {"login": "siddharthteotia"}, "path": "pinot-clients/pinot-java-client/src/main/java/org/apache/pinot/client/JsonAsyncHttpPinotClientTransport.java", "diffHunk": "@@ -67,9 +67,16 @@ public BrokerResponse executeQuery(String brokerAddress, String query)\n   public Future<BrokerResponse> executePinotQueryAsync(String brokerAddress, final Request request) {\n     try {\n       ObjectNode json = JsonNodeFactory.instance.objectNode();\n-      json.put(request.getQueryFormat(), request.getQuery());\n-\n-      final String url = \"http://\" + brokerAddress + \"/query\";\n+      String queryFormat = request.getQueryFormat();\n+      json.put(queryFormat, request.getQuery());\n+\n+      final String url;\n+      if (queryFormat.equalsIgnoreCase(\"sql\")) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b4bbd995a084a0aff2461a510636a4046615492"}, "originalPosition": 11}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQwNjgzNzcy", "url": "https://github.com/apache/pinot/pull/4964#pullrequestreview-340683772", "createdAt": "2020-01-09T17:16:01Z", "commit": {"oid": "1b4bbd995a084a0aff2461a510636a4046615492"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOVQxNzoxNjowMVrOFb9cJQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOVQxNzoxNjowMVrOFb9cJQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDg2MjUwMQ==", "bodyText": "(nit): should be final", "url": "https://github.com/apache/pinot/pull/4964#discussion_r364862501", "createdAt": "2020-01-09T17:16:01Z", "author": {"login": "siddharthteotia"}, "path": "pinot-clients/pinot-java-client/src/main/java/org/apache/pinot/client/ResultTableResultSet.java", "diffHunk": "@@ -0,0 +1,106 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.client;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+\n+\n+/**\n+ * ResultSet which contains the ResultTable from the broker response of a sql query.\n+ */\n+class ResultTableResultSet extends AbstractResultSet {\n+  private JsonNode _rowsArray;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b4bbd995a084a0aff2461a510636a4046615492"}, "originalPosition": 28}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "06733504c76fcd7366e1d1cd30684e8d62852763", "author": {"user": {"login": "npawar", "name": "Neha Pawar"}}, "url": "https://github.com/apache/pinot/commit/06733504c76fcd7366e1d1cd30684e8d62852763", "committedDate": "2020-01-09T19:09:42Z", "message": "Change /sql to /query/sql"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1436, "cost": 1, "resetAt": "2021-10-28T18:00:02Z"}}}