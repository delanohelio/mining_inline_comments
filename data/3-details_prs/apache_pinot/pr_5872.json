{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY4NDIxNTAw", "number": 5872, "title": "Support for exact distinct count for non int data types", "bodyText": "Description\nCurrently in DistinctCount, we use IntOpenHashSet to store distinct ids even for non int types. While this is efficient, the accuracy drops as the cardinality increase. This PR sets up the right HashSet based on column data type.\nUpgrade Notes\nBrokers should be upgraded before servers in order to keep backward-compatible\nRelease Notes\nWith this change, the DistinctCount aggregation function will always return the exact distinct count regardless of the column data type. It might bring performance overhead for data types other than INT.\nFor use cases that is performance sensitive and not require the exact distinct count, use DistinctCountBitmap which has the same behavior as the current DistinctCount and better performance.\nProvide a new boolean Helix cluster config enable.distinct.count.bitmap.override to auto-rewrite DistinctCount to DistinctCountBitmap on broker.", "createdAt": "2020-08-16T09:31:41Z", "url": "https://github.com/apache/pinot/pull/5872", "merged": true, "mergeCommit": {"oid": "c223dfcfbda1ebbfcab5588e44fdfee4edec450f"}, "closed": true, "closedAt": "2020-08-20T20:07:06Z", "author": {"login": "kishoreg"}, "timelineItems": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc_sPdOgBqjM2NjAzMjUzMzg=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdA0k5aABqjM2NzY1OTY4MjM=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "dc1b19ec7f386bd42325cc32e0b8367c02c672d8", "author": {"user": {"login": "kishoreg", "name": "Kishore Gopalakrishna"}}, "url": "https://github.com/apache/pinot/commit/dc1b19ec7f386bd42325cc32e0b8367c02c672d8", "committedDate": "2020-08-17T02:48:43Z", "message": "Deleting file unrelated to this PR"}, "afterCommit": {"oid": "ef30e07e696bb80f5fb31f6557676768cf4ad457", "author": {"user": {"login": "kishoreg", "name": "Kishore Gopalakrishna"}}, "url": "https://github.com/apache/pinot/commit/ef30e07e696bb80f5fb31f6557676768cf4ad457", "committedDate": "2020-08-17T05:55:27Z", "message": "Fixing serde for  bytesset"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY4MjAyMjM0", "url": "https://github.com/apache/pinot/pull/5872#pullrequestreview-468202234", "createdAt": "2020-08-17T06:49:48Z", "commit": {"oid": "ef30e07e696bb80f5fb31f6557676768cf4ad457"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QwNjo0OTo0OFrOHBbqDw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QwNjo0OTo0OFrOHBbqDw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTI2Mzc1OQ==", "bodyText": "Float.BYTES", "url": "https://github.com/apache/pinot/pull/5872#discussion_r471263759", "createdAt": "2020-08-17T06:49:48Z", "author": {"login": "xiangfu0"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/common/ObjectSerDeUtils.java", "diffHunk": "@@ -452,6 +478,142 @@ public IntSet deserialize(ByteBuffer byteBuffer) {\n     }\n   };\n \n+  public static final ObjectSerDe<LongSet> LONG_SET_SER_DE = new ObjectSerDe<LongSet>() {\n+\n+    @Override\n+    public byte[] serialize(LongSet longSet) {\n+      int size = longSet.size();\n+      byte[] bytes = new byte[Integer.BYTES + size * Long.BYTES];\n+      ByteBuffer byteBuffer = ByteBuffer.wrap(bytes);\n+      byteBuffer.putInt(size);\n+      LongIterator iterator = longSet.iterator();\n+      while (iterator.hasNext()) {\n+        byteBuffer.putLong(iterator.nextLong());\n+      }\n+      return bytes;\n+    }\n+\n+    @Override\n+    public LongSet deserialize(byte[] bytes) {\n+      return deserialize(ByteBuffer.wrap(bytes));\n+    }\n+\n+    @Override\n+    public LongSet deserialize(ByteBuffer byteBuffer) {\n+      int size = byteBuffer.getInt();\n+      LongSet longSet = new LongOpenHashSet(size);\n+      for (int i = 0; i < size; i++) {\n+        longSet.add(byteBuffer.getLong());\n+      }\n+      return longSet;\n+    }\n+  };\n+\n+  public static final ObjectSerDe<FloatSet> FLOAT_SET_SER_DE = new ObjectSerDe<FloatSet>() {\n+\n+    @Override\n+    public byte[] serialize(FloatSet floatSet) {\n+      int size = floatSet.size();\n+      byte[] bytes = new byte[Integer.BYTES + size * Long.BYTES];", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ef30e07e696bb80f5fb31f6557676768cf4ad457"}, "originalPosition": 100}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY4MjAyNDUz", "url": "https://github.com/apache/pinot/pull/5872#pullrequestreview-468202453", "createdAt": "2020-08-17T06:50:17Z", "commit": {"oid": "ef30e07e696bb80f5fb31f6557676768cf4ad457"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QwNjo1MDoxN1rOHBbqtA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QwNjo1MDoxN1rOHBbqtA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTI2MzkyNA==", "bodyText": "byteBuffer.getFloat()", "url": "https://github.com/apache/pinot/pull/5872#discussion_r471263924", "createdAt": "2020-08-17T06:50:17Z", "author": {"login": "xiangfu0"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/common/ObjectSerDeUtils.java", "diffHunk": "@@ -452,6 +478,142 @@ public IntSet deserialize(ByteBuffer byteBuffer) {\n     }\n   };\n \n+  public static final ObjectSerDe<LongSet> LONG_SET_SER_DE = new ObjectSerDe<LongSet>() {\n+\n+    @Override\n+    public byte[] serialize(LongSet longSet) {\n+      int size = longSet.size();\n+      byte[] bytes = new byte[Integer.BYTES + size * Long.BYTES];\n+      ByteBuffer byteBuffer = ByteBuffer.wrap(bytes);\n+      byteBuffer.putInt(size);\n+      LongIterator iterator = longSet.iterator();\n+      while (iterator.hasNext()) {\n+        byteBuffer.putLong(iterator.nextLong());\n+      }\n+      return bytes;\n+    }\n+\n+    @Override\n+    public LongSet deserialize(byte[] bytes) {\n+      return deserialize(ByteBuffer.wrap(bytes));\n+    }\n+\n+    @Override\n+    public LongSet deserialize(ByteBuffer byteBuffer) {\n+      int size = byteBuffer.getInt();\n+      LongSet longSet = new LongOpenHashSet(size);\n+      for (int i = 0; i < size; i++) {\n+        longSet.add(byteBuffer.getLong());\n+      }\n+      return longSet;\n+    }\n+  };\n+\n+  public static final ObjectSerDe<FloatSet> FLOAT_SET_SER_DE = new ObjectSerDe<FloatSet>() {\n+\n+    @Override\n+    public byte[] serialize(FloatSet floatSet) {\n+      int size = floatSet.size();\n+      byte[] bytes = new byte[Integer.BYTES + size * Long.BYTES];\n+      ByteBuffer byteBuffer = ByteBuffer.wrap(bytes);\n+      byteBuffer.putInt(size);\n+      FloatIterator iterator = floatSet.iterator();\n+      while (iterator.hasNext()) {\n+        byteBuffer.putFloat(iterator.nextFloat());\n+      }\n+      return bytes;\n+    }\n+\n+    @Override\n+    public FloatSet deserialize(byte[] bytes) {\n+      return deserialize(ByteBuffer.wrap(bytes));\n+    }\n+\n+    @Override\n+    public FloatSet deserialize(ByteBuffer byteBuffer) {\n+      int size = byteBuffer.getInt();\n+      FloatSet floatSet = new FloatOpenHashSet(size);\n+      for (int i = 0; i < size; i++) {\n+        floatSet.add(byteBuffer.getLong());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ef30e07e696bb80f5fb31f6557676768cf4ad457"}, "originalPosition": 120}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY4MjAyNTUw", "url": "https://github.com/apache/pinot/pull/5872#pullrequestreview-468202550", "createdAt": "2020-08-17T06:50:28Z", "commit": {"oid": "ef30e07e696bb80f5fb31f6557676768cf4ad457"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QwNjo1MDoyOFrOHBbq-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QwNjo1MDoyOFrOHBbq-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTI2Mzk5NQ==", "bodyText": "Double.BYTES", "url": "https://github.com/apache/pinot/pull/5872#discussion_r471263995", "createdAt": "2020-08-17T06:50:28Z", "author": {"login": "xiangfu0"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/common/ObjectSerDeUtils.java", "diffHunk": "@@ -452,6 +478,142 @@ public IntSet deserialize(ByteBuffer byteBuffer) {\n     }\n   };\n \n+  public static final ObjectSerDe<LongSet> LONG_SET_SER_DE = new ObjectSerDe<LongSet>() {\n+\n+    @Override\n+    public byte[] serialize(LongSet longSet) {\n+      int size = longSet.size();\n+      byte[] bytes = new byte[Integer.BYTES + size * Long.BYTES];\n+      ByteBuffer byteBuffer = ByteBuffer.wrap(bytes);\n+      byteBuffer.putInt(size);\n+      LongIterator iterator = longSet.iterator();\n+      while (iterator.hasNext()) {\n+        byteBuffer.putLong(iterator.nextLong());\n+      }\n+      return bytes;\n+    }\n+\n+    @Override\n+    public LongSet deserialize(byte[] bytes) {\n+      return deserialize(ByteBuffer.wrap(bytes));\n+    }\n+\n+    @Override\n+    public LongSet deserialize(ByteBuffer byteBuffer) {\n+      int size = byteBuffer.getInt();\n+      LongSet longSet = new LongOpenHashSet(size);\n+      for (int i = 0; i < size; i++) {\n+        longSet.add(byteBuffer.getLong());\n+      }\n+      return longSet;\n+    }\n+  };\n+\n+  public static final ObjectSerDe<FloatSet> FLOAT_SET_SER_DE = new ObjectSerDe<FloatSet>() {\n+\n+    @Override\n+    public byte[] serialize(FloatSet floatSet) {\n+      int size = floatSet.size();\n+      byte[] bytes = new byte[Integer.BYTES + size * Long.BYTES];\n+      ByteBuffer byteBuffer = ByteBuffer.wrap(bytes);\n+      byteBuffer.putInt(size);\n+      FloatIterator iterator = floatSet.iterator();\n+      while (iterator.hasNext()) {\n+        byteBuffer.putFloat(iterator.nextFloat());\n+      }\n+      return bytes;\n+    }\n+\n+    @Override\n+    public FloatSet deserialize(byte[] bytes) {\n+      return deserialize(ByteBuffer.wrap(bytes));\n+    }\n+\n+    @Override\n+    public FloatSet deserialize(ByteBuffer byteBuffer) {\n+      int size = byteBuffer.getInt();\n+      FloatSet floatSet = new FloatOpenHashSet(size);\n+      for (int i = 0; i < size; i++) {\n+        floatSet.add(byteBuffer.getLong());\n+      }\n+      return floatSet;\n+    }\n+  };\n+\n+  public static final ObjectSerDe<DoubleSet> DOUBLE_SET_SER_DE = new ObjectSerDe<DoubleSet>() {\n+\n+    @Override\n+    public byte[] serialize(DoubleSet doubleSet) {\n+      int size = doubleSet.size();\n+      byte[] bytes = new byte[Integer.BYTES + size * Long.BYTES];", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ef30e07e696bb80f5fb31f6557676768cf4ad457"}, "originalPosition": 131}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY4Njk0NTQz", "url": "https://github.com/apache/pinot/pull/5872#pullrequestreview-468694543", "createdAt": "2020-08-17T17:53:32Z", "commit": {"oid": "3c531f32b734be6004add1f3e138f42bf9e7c1f6"}, "state": "COMMENTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QxNzo1MzozM1rOHBz6tA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QxODowNzoyN1rOHB0Yyg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTY2MTIzNg==", "bodyText": "What is this for?", "url": "https://github.com/apache/pinot/pull/5872#discussion_r471661236", "createdAt": "2020-08-17T17:53:33Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-common/src/main/java/org/apache/pinot/common/function/AggregationFunctionType.java", "diffHunk": "@@ -61,7 +61,8 @@\n   PERCENTILEMV(\"percentileMV\"),\n   PERCENTILEESTMV(\"percentileEstMV\"),\n   PERCENTILETDIGESTMV(\"percentileTDigestMV\"),\n-  DISTINCT(\"distinct\");\n+  DISTINCT(\"distinct\"),\n+  DISTINCTRAWBLOOMFILTER(\"distinctRawBloomFilter\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3c531f32b734be6004add1f3e138f42bf9e7c1f6"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTY2Mzk0NA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  } else if (value instanceof it.unimi.dsi.fastutil.floats.FloatSet) {\n          \n          \n            \n                  } else if (value instanceof FloatSet) {", "url": "https://github.com/apache/pinot/pull/5872#discussion_r471663944", "createdAt": "2020-08-17T17:58:19Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/common/ObjectSerDeUtils.java", "diffHunk": "@@ -111,6 +127,14 @@ public static ObjectType getObjectType(Object value) {\n         return ObjectType.Geometry;\n       } else if (value instanceof RoaringBitmap) {\n         return ObjectType.RoaringBitmap;\n+      } else if (value instanceof LongSet) {\n+        return ObjectType.LongSet;\n+      } else if (value instanceof it.unimi.dsi.fastutil.floats.FloatSet) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3c531f32b734be6004add1f3e138f42bf9e7c1f6"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTY2NDAyNw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  } else if (value instanceof it.unimi.dsi.fastutil.doubles.DoubleSet) {\n          \n          \n            \n                  } else if (value instanceof DoubleSet) {", "url": "https://github.com/apache/pinot/pull/5872#discussion_r471664027", "createdAt": "2020-08-17T17:58:29Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/common/ObjectSerDeUtils.java", "diffHunk": "@@ -111,6 +127,14 @@ public static ObjectType getObjectType(Object value) {\n         return ObjectType.Geometry;\n       } else if (value instanceof RoaringBitmap) {\n         return ObjectType.RoaringBitmap;\n+      } else if (value instanceof LongSet) {\n+        return ObjectType.LongSet;\n+      } else if (value instanceof it.unimi.dsi.fastutil.floats.FloatSet) {\n+        return ObjectType.FloatSet;\n+      } else if (value instanceof it.unimi.dsi.fastutil.doubles.DoubleSet) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3c531f32b734be6004add1f3e138f42bf9e7c1f6"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTY2NDk3MQ==", "bodyText": "Revert this reformat (you may want to enable formatter markers in comments in your IDE)", "url": "https://github.com/apache/pinot/pull/5872#discussion_r471664971", "createdAt": "2020-08-17T18:00:12Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/common/ObjectSerDeUtils.java", "diffHunk": "@@ -538,23 +695,8 @@ public RoaringBitmap deserialize(ByteBuffer byteBuffer) {\n \n   // NOTE: DO NOT change the order, it has to be the same order as the ObjectType\n   //@formatter:off\n-  private static final ObjectSerDe[] SER_DES = {\n-      STRING_SER_DE,\n-      LONG_SER_DE,\n-      DOUBLE_SER_DE,\n-      DOUBLE_ARRAY_LIST_SER_DE,\n-      AVG_PAIR_SER_DE,\n-      MIN_MAX_RANGE_PAIR_SER_DE,\n-      HYPER_LOG_LOG_SER_DE,\n-      QUANTILE_DIGEST_SER_DE,\n-      MAP_SER_DE,\n-      INT_SET_SER_DE,\n-      TDIGEST_SER_DE,\n-      DISTINCT_TABLE_SER_DE,\n-      DATA_SKETCH_SER_DE,\n-      GEOMETRY_SER_DE,\n-      ROARING_BITMAP_SER_DE\n-  };\n+  private static final ObjectSerDe[] SER_DES =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3c531f32b734be6004add1f3e138f42bf9e7c1f6"}, "originalPosition": 211}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTY2NTc1NQ==", "bodyText": "Suggest using ByteArray instead of ByteBuffer to store bytes", "url": "https://github.com/apache/pinot/pull/5872#discussion_r471665755", "createdAt": "2020-08-17T18:01:38Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/operator/query/DictionaryBasedAggregationOperator.java", "diffHunk": "@@ -77,36 +83,42 @@ protected IntermediateResultsBlock getNextBlock() {\n               .add(new MinMaxRangePair(dictionary.getDoubleValue(0), dictionary.getDoubleValue(dictionarySize - 1)));\n           break;\n         case DISTINCTCOUNT:\n-          IntOpenHashSet set = new IntOpenHashSet(dictionarySize);\n+          AbstractCollection set;\n           switch (dictionary.getValueType()) {\n             case INT:\n+              set = new IntOpenHashSet(dictionarySize);\n               for (int dictId = 0; dictId < dictionarySize; dictId++) {\n                 set.add(dictionary.getIntValue(dictId));\n               }\n               break;\n             case LONG:\n+              set = new LongOpenHashSet(dictionarySize);\n               for (int dictId = 0; dictId < dictionarySize; dictId++) {\n-                set.add(Long.hashCode(dictionary.getLongValue(dictId)));\n+                set.add(dictionary.getLongValue(dictId));\n               }\n               break;\n             case FLOAT:\n+              set = new FloatOpenHashSet(dictionarySize);\n               for (int dictId = 0; dictId < dictionarySize; dictId++) {\n-                set.add(Float.hashCode(dictionary.getFloatValue(dictId)));\n+                set.add(dictionary.getFloatValue(dictId));\n               }\n               break;\n             case DOUBLE:\n+              set = new DoubleOpenHashSet(dictionarySize);\n               for (int dictId = 0; dictId < dictionarySize; dictId++) {\n-                set.add(Double.hashCode(dictionary.getDoubleValue(dictId)));\n+                set.add(dictionary.getDoubleValue(dictId));\n               }\n               break;\n             case STRING:\n+              set = new ObjectOpenHashSet<ByteBuffer>(dictionarySize);\n               for (int dictId = 0; dictId < dictionarySize; dictId++) {\n-                set.add(dictionary.getStringValue(dictId).hashCode());\n+                set.add(ByteBuffer.wrap(dictionary.getStringValue(dictId).getBytes(Charsets.UTF_8)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3c531f32b734be6004add1f3e138f42bf9e7c1f6"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTY2NjIwMQ==", "bodyText": "Use StringUtils.encodeUtf8() to encode string for better performance", "url": "https://github.com/apache/pinot/pull/5872#discussion_r471666201", "createdAt": "2020-08-17T18:02:33Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/operator/query/DictionaryBasedAggregationOperator.java", "diffHunk": "@@ -77,36 +83,42 @@ protected IntermediateResultsBlock getNextBlock() {\n               .add(new MinMaxRangePair(dictionary.getDoubleValue(0), dictionary.getDoubleValue(dictionarySize - 1)));\n           break;\n         case DISTINCTCOUNT:\n-          IntOpenHashSet set = new IntOpenHashSet(dictionarySize);\n+          AbstractCollection set;\n           switch (dictionary.getValueType()) {\n             case INT:\n+              set = new IntOpenHashSet(dictionarySize);\n               for (int dictId = 0; dictId < dictionarySize; dictId++) {\n                 set.add(dictionary.getIntValue(dictId));\n               }\n               break;\n             case LONG:\n+              set = new LongOpenHashSet(dictionarySize);\n               for (int dictId = 0; dictId < dictionarySize; dictId++) {\n-                set.add(Long.hashCode(dictionary.getLongValue(dictId)));\n+                set.add(dictionary.getLongValue(dictId));\n               }\n               break;\n             case FLOAT:\n+              set = new FloatOpenHashSet(dictionarySize);\n               for (int dictId = 0; dictId < dictionarySize; dictId++) {\n-                set.add(Float.hashCode(dictionary.getFloatValue(dictId)));\n+                set.add(dictionary.getFloatValue(dictId));\n               }\n               break;\n             case DOUBLE:\n+              set = new DoubleOpenHashSet(dictionarySize);\n               for (int dictId = 0; dictId < dictionarySize; dictId++) {\n-                set.add(Double.hashCode(dictionary.getDoubleValue(dictId)));\n+                set.add(dictionary.getDoubleValue(dictId));\n               }\n               break;\n             case STRING:\n+              set = new ObjectOpenHashSet<ByteBuffer>(dictionarySize);\n               for (int dictId = 0; dictId < dictionarySize; dictId++) {\n-                set.add(dictionary.getStringValue(dictId).hashCode());\n+                set.add(ByteBuffer.wrap(dictionary.getStringValue(dictId).getBytes(Charsets.UTF_8)));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTY2NTc1NQ=="}, "originalCommit": {"oid": "3c531f32b734be6004add1f3e138f42bf9e7c1f6"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTY2ODkzOA==", "bodyText": "I don't think this works for ser/de. You need to construct a type specific set based on the data type", "url": "https://github.com/apache/pinot/pull/5872#discussion_r471668938", "createdAt": "2020-08-17T18:07:27Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/query/aggregation/function/DistinctCountAggregationFunction.java", "diffHunk": "@@ -233,41 +241,103 @@ public void aggregateGroupByMV(int length, int[][] groupKeysArray, GroupByResult\n   }\n \n   @Override\n-  public IntOpenHashSet extractAggregationResult(AggregationResultHolder aggregationResultHolder) {\n+  public AbstractCollection extractAggregationResult(AggregationResultHolder aggregationResultHolder) {\n     Object result = aggregationResultHolder.getResult();\n     if (result == null) {\n-      return new IntOpenHashSet();\n+      return emptyCollection();\n     }\n \n     if (result instanceof DictIdsWrapper) {\n       // For dictionary-encoded expression, convert dictionary ids to hash code of the values\n       return convertToValueSet((DictIdsWrapper) result);\n     } else {\n       // For non-dictionary-encoded expression, directly return the value set\n-      return (IntOpenHashSet) result;\n+      return (AbstractCollection) result;\n     }\n   }\n \n+  private AbstractCollection emptyCollection() {\n+    return new AbstractCollection() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3c531f32b734be6004add1f3e138f42bf9e7c1f6"}, "originalPosition": 187}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY4ODU5MTIx", "url": "https://github.com/apache/pinot/pull/5872#pullrequestreview-468859121", "createdAt": "2020-08-17T21:56:16Z", "commit": {"oid": "e5fd3a07afc50ea06daf3b379b534be3e28cdb8d"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QyMTo1NjoxN1rOHB8Myw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QyMTo1OToxN1rOHB8RiQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTc5NjkzOQ==", "bodyText": "Wondering if we should have a single ser/de for different data types, by writing the data type as part of header. Not sure if the iterators share the same interface to be able to share the same serialize().", "url": "https://github.com/apache/pinot/pull/5872#discussion_r471796939", "createdAt": "2020-08-17T21:56:17Z", "author": {"login": "mayankshriv"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/common/ObjectSerDeUtils.java", "diffHunk": "@@ -452,6 +476,139 @@ public IntSet deserialize(ByteBuffer byteBuffer) {\n     }\n   };\n \n+  public static final ObjectSerDe<LongSet> LONG_SET_SER_DE = new ObjectSerDe<LongSet>() {\n+\n+    @Override\n+    public byte[] serialize(LongSet longSet) {\n+      int size = longSet.size();\n+      byte[] bytes = new byte[Integer.BYTES + size * Long.BYTES];\n+      ByteBuffer byteBuffer = ByteBuffer.wrap(bytes);\n+      byteBuffer.putInt(size);\n+      LongIterator iterator = longSet.iterator();\n+      while (iterator.hasNext()) {\n+        byteBuffer.putLong(iterator.nextLong());\n+      }\n+      return bytes;\n+    }\n+\n+    @Override\n+    public LongSet deserialize(byte[] bytes) {\n+      return deserialize(ByteBuffer.wrap(bytes));\n+    }\n+\n+    @Override\n+    public LongSet deserialize(ByteBuffer byteBuffer) {\n+      int size = byteBuffer.getInt();\n+      LongSet longSet = new LongOpenHashSet(size);\n+      for (int i = 0; i < size; i++) {\n+        longSet.add(byteBuffer.getLong());\n+      }\n+      return longSet;\n+    }\n+  };\n+\n+  public static final ObjectSerDe<FloatSet> FLOAT_SET_SER_DE = new ObjectSerDe<FloatSet>() {\n+\n+    @Override\n+    public byte[] serialize(FloatSet floatSet) {\n+      int size = floatSet.size();\n+      byte[] bytes = new byte[Integer.BYTES + size * Float.BYTES];\n+      ByteBuffer byteBuffer = ByteBuffer.wrap(bytes);\n+      byteBuffer.putInt(size);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e5fd3a07afc50ea06daf3b379b534be3e28cdb8d"}, "originalPosition": 92}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTc5ODE1Mw==", "bodyText": "why not byte[]?", "url": "https://github.com/apache/pinot/pull/5872#discussion_r471798153", "createdAt": "2020-08-17T21:59:17Z", "author": {"login": "mayankshriv"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/operator/query/DictionaryBasedAggregationOperator.java", "diffHunk": "@@ -77,36 +83,42 @@ protected IntermediateResultsBlock getNextBlock() {\n               .add(new MinMaxRangePair(dictionary.getDoubleValue(0), dictionary.getDoubleValue(dictionarySize - 1)));\n           break;\n         case DISTINCTCOUNT:\n-          IntOpenHashSet set = new IntOpenHashSet(dictionarySize);\n+          AbstractCollection set;\n           switch (dictionary.getValueType()) {\n             case INT:\n+              set = new IntOpenHashSet(dictionarySize);\n               for (int dictId = 0; dictId < dictionarySize; dictId++) {\n                 set.add(dictionary.getIntValue(dictId));\n               }\n               break;\n             case LONG:\n+              set = new LongOpenHashSet(dictionarySize);\n               for (int dictId = 0; dictId < dictionarySize; dictId++) {\n-                set.add(Long.hashCode(dictionary.getLongValue(dictId)));\n+                set.add(dictionary.getLongValue(dictId));\n               }\n               break;\n             case FLOAT:\n+              set = new FloatOpenHashSet(dictionarySize);\n               for (int dictId = 0; dictId < dictionarySize; dictId++) {\n-                set.add(Float.hashCode(dictionary.getFloatValue(dictId)));\n+                set.add(dictionary.getFloatValue(dictId));\n               }\n               break;\n             case DOUBLE:\n+              set = new DoubleOpenHashSet(dictionarySize);\n               for (int dictId = 0; dictId < dictionarySize; dictId++) {\n-                set.add(Double.hashCode(dictionary.getDoubleValue(dictId)));\n+                set.add(dictionary.getDoubleValue(dictId));\n               }\n               break;\n             case STRING:\n+              set = new ObjectOpenHashSet<ByteBuffer>(dictionarySize);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e5fd3a07afc50ea06daf3b379b534be3e28cdb8d"}, "originalPosition": 52}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY4ODY2NTQ0", "url": "https://github.com/apache/pinot/pull/5872#pullrequestreview-468866544", "createdAt": "2020-08-17T22:11:52Z", "commit": {"oid": "e5fd3a07afc50ea06daf3b379b534be3e28cdb8d"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "8f2dff44407b433ef39a916d04c55fa5386d3854", "author": {"user": {"login": "kishoreg", "name": "Kishore Gopalakrishna"}}, "url": "https://github.com/apache/pinot/commit/8f2dff44407b433ef39a916d04c55fa5386d3854", "committedDate": "2020-08-18T21:52:58Z", "message": "addressing review comments"}, "afterCommit": {"oid": "18105504b22008b45a585cd592b4e10cd4bf337a", "author": {"user": {"login": "Jackie-Jiang", "name": "Xiaotian (Jackie) Jiang"}}, "url": "https://github.com/apache/pinot/commit/18105504b22008b45a585cd592b4e10cd4bf337a", "committedDate": "2020-08-19T23:45:15Z", "message": "Support exact distinct count"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDcxMDU5NzIz", "url": "https://github.com/apache/pinot/pull/5872#pullrequestreview-471059723", "createdAt": "2020-08-20T01:02:01Z", "commit": {"oid": "18105504b22008b45a585cd592b4e10cd4bf337a"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQwMTowMjowMVrOHDjwyQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQwMTowMjowMVrOHDjwyQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzQ5MzcwNQ==", "bodyText": "will this be a problem as we always return StringSet for empty value?", "url": "https://github.com/apache/pinot/pull/5872#discussion_r473493705", "createdAt": "2020-08-20T01:02:01Z", "author": {"login": "xiangfu0"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/common/ObjectSerDeUtils.java", "diffHunk": "@@ -111,6 +131,19 @@ public static ObjectType getObjectType(Object value) {\n         return ObjectType.Geometry;\n       } else if (value instanceof RoaringBitmap) {\n         return ObjectType.RoaringBitmap;\n+      } else if (value instanceof LongSet) {\n+        return ObjectType.LongSet;\n+      } else if (value instanceof FloatSet) {\n+        return ObjectType.FloatSet;\n+      } else if (value instanceof DoubleSet) {\n+        return ObjectType.DoubleSet;\n+      } else if (value instanceof ObjectSet) {\n+        ObjectSet objectSet = (ObjectSet) value;\n+        if (objectSet.isEmpty() || objectSet.iterator().next() instanceof String) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "18105504b22008b45a585cd592b4e10cd4bf337a"}, "originalPosition": 72}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1159f79a88b6727e50db9cc50e3a71f400d9d3cc", "author": {"user": {"login": "Jackie-Jiang", "name": "Xiaotian (Jackie) Jiang"}}, "url": "https://github.com/apache/pinot/commit/1159f79a88b6727e50db9cc50e3a71f400d9d3cc", "committedDate": "2020-08-20T18:28:02Z", "message": "Support exact distinct count"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "18105504b22008b45a585cd592b4e10cd4bf337a", "author": {"user": {"login": "Jackie-Jiang", "name": "Xiaotian (Jackie) Jiang"}}, "url": "https://github.com/apache/pinot/commit/18105504b22008b45a585cd592b4e10cd4bf337a", "committedDate": "2020-08-19T23:45:15Z", "message": "Support exact distinct count"}, "afterCommit": {"oid": "a6836284047eb98f4c4c8aa2832310945f31efeb", "author": {"user": {"login": "Jackie-Jiang", "name": "Xiaotian (Jackie) Jiang"}}, "url": "https://github.com/apache/pinot/commit/a6836284047eb98f4c4c8aa2832310945f31efeb", "committedDate": "2020-08-20T18:28:02Z", "message": "Add DistinctCountBitmap query override"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4fdf4cdbb24c468cb4d4ecf465551b485df38f4c", "author": {"user": {"login": "Jackie-Jiang", "name": "Xiaotian (Jackie) Jiang"}}, "url": "https://github.com/apache/pinot/commit/4fdf4cdbb24c468cb4d4ecf465551b485df38f4c", "committedDate": "2020-08-20T18:32:22Z", "message": "Add DistinctCountBitmap query override"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a6836284047eb98f4c4c8aa2832310945f31efeb", "author": {"user": {"login": "Jackie-Jiang", "name": "Xiaotian (Jackie) Jiang"}}, "url": "https://github.com/apache/pinot/commit/a6836284047eb98f4c4c8aa2832310945f31efeb", "committedDate": "2020-08-20T18:28:02Z", "message": "Add DistinctCountBitmap query override"}, "afterCommit": {"oid": "4fdf4cdbb24c468cb4d4ecf465551b485df38f4c", "author": {"user": {"login": "Jackie-Jiang", "name": "Xiaotian (Jackie) Jiang"}}, "url": "https://github.com/apache/pinot/commit/4fdf4cdbb24c468cb4d4ecf465551b485df38f4c", "committedDate": "2020-08-20T18:32:22Z", "message": "Add DistinctCountBitmap query override"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 211, "cost": 1, "resetAt": "2021-10-28T18:00:02Z"}}}