{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU3NDQ2NDM5", "number": 5760, "title": "Enhance DataTypeTransformer to handle nested Map/List/Object[]", "bodyText": "Description\nEnhance DataTypeTransformer to handle nested Collection/Map/Object[]\n\nEmpty Collection/Map/Object[] will be treated as null\nSingle-entry Collection/Map/Object[] will be treated as single-value (map key is ignored)\nMulti-entry Collection/Map/Object[] will be treated as multi-value (map key is ignored)\nMove NullValueTransformer after DataTypeTransformer to handle the null from empty Collection/Map/Object[]\n\nNOTE:\nMulti-entry Collection/Map/Object[] will no longer be accepted for single-value column (instead of using the first value because that will cause data loss)", "createdAt": "2020-07-27T23:04:20Z", "url": "https://github.com/apache/pinot/pull/5760", "merged": true, "mergeCommit": {"oid": "cd26b2499ee227131917019eeb886b634184fe26"}, "closed": true, "closedAt": "2020-07-28T19:15:46Z", "author": {"login": "Jackie-Jiang"}, "timelineItems": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc5KA5qAH2gAyNDU3NDQ2NDM5OmRkZjdmMzJkZGVlYTlmMmY2NmUyNjkyMzVmOGNiNzUwNThmYTgyY2U=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc5a0pUAFqTQ1NjkwMzMyNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "ddf7f32ddeea9f2f66e269235f8cb75058fa82ce", "author": {"user": {"login": "Jackie-Jiang", "name": "Xiaotian (Jackie) Jiang"}}, "url": "https://github.com/apache/pinot/commit/ddf7f32ddeea9f2f66e269235f8cb75058fa82ce", "committedDate": "2020-07-27T22:59:48Z", "message": "Enhance DataTypeTransformer to handle nested Map/List/Object[]"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU2MjExMjky", "url": "https://github.com/apache/pinot/pull/5760#pullrequestreview-456211292", "createdAt": "2020-07-27T23:52:56Z", "commit": {"oid": "ddf7f32ddeea9f2f66e269235f8cb75058fa82ce"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QyMzo1Mjo1NlrOG33lQQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QyMzo1Mjo1NlrOG33lQQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTIzNTUyMQ==", "bodyText": "Can we please add tests for the exact case where we were seeing the problem? The AvroRecorExtractor extracted the column as Object[] where each value in the array is a Map of single KV pair and this is what is passed to DataTypeTransformer.  The actual type of column in the schema is MV STRING and the transformer should just convert it into Object[] where each value is a String and is the corresponding value from each Map.\nLooking at the code in standardize and standardizeCollection, it looks the above scenario is well taken care of but want to make sure that in future when this code is changed for either handling map properly or something else, we don't regress again.\n@jackjlli , is there any other case that we were seeing when the problem was original reproduced. Good to share a sample of original data so that we can use it in tests here,", "url": "https://github.com/apache/pinot/pull/5760#discussion_r461235521", "createdAt": "2020-07-27T23:52:56Z", "author": {"login": "siddharthteotia"}, "path": "pinot-core/src/test/java/org/apache/pinot/core/data/recordtransformer/DataTypeTransformerTest.java", "diffHunk": "@@ -0,0 +1,149 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.core.data.recordtransformer;\n+\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import org.testng.annotations.Test;\n+\n+import static org.testng.Assert.assertEquals;\n+import static org.testng.Assert.assertEqualsNoOrder;\n+import static org.testng.Assert.assertNull;\n+import static org.testng.Assert.fail;\n+\n+\n+public class DataTypeTransformerTest {\n+  private static final String COLUMN = \"testColumn\";\n+\n+  @Test\n+  public void testStandardize() {\n+    // Tests for Map", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ddf7f32ddeea9f2f66e269235f8cb75058fa82ce"}, "originalPosition": 39}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "376bd20435b3a9d58ac85c97311237c4cad8d861", "author": {"user": {"login": "Jackie-Jiang", "name": "Xiaotian (Jackie) Jiang"}}, "url": "https://github.com/apache/pinot/commit/376bd20435b3a9d58ac85c97311237c4cad8d861", "committedDate": "2020-07-27T23:57:43Z", "message": "Add test case for Object[] of multiple single-entry Maps"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU2MjIyMTQ5", "url": "https://github.com/apache/pinot/pull/5760#pullrequestreview-456222149", "createdAt": "2020-07-28T00:25:27Z", "commit": {"oid": "376bd20435b3a9d58ac85c97311237c4cad8d861"}, "state": "COMMENTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQwMDoyNToyN1rOG34NOQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQwMDozNjoyMlrOG34Zmw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTI0NTc1Mw==", "bodyText": "Can you add a simple comment here on why it should fail (because of single value column)?", "url": "https://github.com/apache/pinot/pull/5760#discussion_r461245753", "createdAt": "2020-07-28T00:25:27Z", "author": {"login": "jackjlli"}, "path": "pinot-core/src/test/java/org/apache/pinot/core/data/recordtransformer/DataTypeTransformerTest.java", "diffHunk": "@@ -0,0 +1,159 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.core.data.recordtransformer;\n+\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import org.testng.annotations.Test;\n+\n+import static org.testng.Assert.assertEquals;\n+import static org.testng.Assert.assertEqualsNoOrder;\n+import static org.testng.Assert.assertNull;\n+import static org.testng.Assert.fail;\n+\n+\n+public class DataTypeTransformerTest {\n+  private static final String COLUMN = \"testColumn\";\n+\n+  @Test\n+  public void testStandardize() {\n+    // Tests for Map\n+    Map<String, Object> map = Collections.emptyMap();\n+    assertNull(DataTypeTransformer.standardize(COLUMN, map, true));\n+    assertNull(DataTypeTransformer.standardize(COLUMN, map, false));\n+    String expectedValue = \"testValue\";\n+    map = Collections.singletonMap(\"testKey\", expectedValue);\n+    assertEquals(DataTypeTransformer.standardize(COLUMN, map, true), expectedValue);\n+    assertEquals(DataTypeTransformer.standardize(COLUMN, map, false), expectedValue);\n+    Object[] expectedValues = new Object[]{\"testValue1\", \"testValue2\"};\n+    map = new HashMap<>();\n+    map.put(\"testKey1\", \"testValue1\");\n+    map.put(\"testKey2\", \"testValue2\");\n+    try {\n+      DataTypeTransformer.standardize(COLUMN, map, true);\n+      fail();\n+    } catch (Exception e) {\n+      // Expected\n+    }\n+    assertEqualsNoOrder((Object[]) DataTypeTransformer.standardize(COLUMN, map, false), expectedValues);\n+\n+    // Tests for List\n+    List<Object> list = Collections.emptyList();\n+    assertNull(DataTypeTransformer.standardize(COLUMN, list, true));\n+    assertNull(DataTypeTransformer.standardize(COLUMN, list, false));\n+    list = Collections.singletonList(expectedValue);\n+    assertEquals(DataTypeTransformer.standardize(COLUMN, list, true), expectedValue);\n+    assertEquals(DataTypeTransformer.standardize(COLUMN, list, false), expectedValue);\n+    list = Arrays.asList(expectedValues);\n+    try {\n+      DataTypeTransformer.standardize(COLUMN, list, true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "376bd20435b3a9d58ac85c97311237c4cad8d861"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTI0NTg5MQ==", "bodyText": "Same here", "url": "https://github.com/apache/pinot/pull/5760#discussion_r461245891", "createdAt": "2020-07-28T00:25:56Z", "author": {"login": "jackjlli"}, "path": "pinot-core/src/test/java/org/apache/pinot/core/data/recordtransformer/DataTypeTransformerTest.java", "diffHunk": "@@ -0,0 +1,159 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.core.data.recordtransformer;\n+\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import org.testng.annotations.Test;\n+\n+import static org.testng.Assert.assertEquals;\n+import static org.testng.Assert.assertEqualsNoOrder;\n+import static org.testng.Assert.assertNull;\n+import static org.testng.Assert.fail;\n+\n+\n+public class DataTypeTransformerTest {\n+  private static final String COLUMN = \"testColumn\";\n+\n+  @Test\n+  public void testStandardize() {\n+    // Tests for Map\n+    Map<String, Object> map = Collections.emptyMap();\n+    assertNull(DataTypeTransformer.standardize(COLUMN, map, true));\n+    assertNull(DataTypeTransformer.standardize(COLUMN, map, false));\n+    String expectedValue = \"testValue\";\n+    map = Collections.singletonMap(\"testKey\", expectedValue);\n+    assertEquals(DataTypeTransformer.standardize(COLUMN, map, true), expectedValue);\n+    assertEquals(DataTypeTransformer.standardize(COLUMN, map, false), expectedValue);\n+    Object[] expectedValues = new Object[]{\"testValue1\", \"testValue2\"};\n+    map = new HashMap<>();\n+    map.put(\"testKey1\", \"testValue1\");\n+    map.put(\"testKey2\", \"testValue2\");\n+    try {\n+      DataTypeTransformer.standardize(COLUMN, map, true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "376bd20435b3a9d58ac85c97311237c4cad8d861"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTI0Njk2NQ==", "bodyText": "Can we add more description on what this method does and what should be the expected behavior?", "url": "https://github.com/apache/pinot/pull/5760#discussion_r461246965", "createdAt": "2020-07-28T00:29:35Z", "author": {"login": "jackjlli"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/data/recordtransformer/DataTypeTransformer.java", "diffHunk": "@@ -104,4 +115,76 @@ public GenericRow transform(GenericRow record) {\n     }\n     return record;\n   }\n+\n+  /**\n+   * Standardize the value into supported types.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "376bd20435b3a9d58ac85c97311237c4cad8d861"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTI0NzIwNw==", "bodyText": "There is no need to have an extra check here since it's been covered in Line 89.", "url": "https://github.com/apache/pinot/pull/5760#discussion_r461247207", "createdAt": "2020-07-28T00:30:21Z", "author": {"login": "jackjlli"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/data/recordtransformer/DataTypeTransformer.java", "diffHunk": "@@ -73,10 +80,15 @@ public GenericRow transform(GenericRow record) {\n     for (Map.Entry<String, PinotDataType> entry : _dataTypes.entrySet()) {\n       String column = entry.getKey();\n       Object value = record.getValue(column);\n-\n-      // Convert List value to Object[]\n-      if (value instanceof List) {\n-        value = ((List) value).toArray();\n+      if (value == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "376bd20435b3a9d58ac85c97311237c4cad8d861"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTI0ODI4NQ==", "bodyText": "It'd be good to include test which value can be converted to other type like 100, 200 to make sure the output converted value should be the correct one.", "url": "https://github.com/apache/pinot/pull/5760#discussion_r461248285", "createdAt": "2020-07-28T00:34:13Z", "author": {"login": "jackjlli"}, "path": "pinot-core/src/test/java/org/apache/pinot/core/data/recordtransformer/DataTypeTransformerTest.java", "diffHunk": "@@ -0,0 +1,159 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.core.data.recordtransformer;\n+\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import org.testng.annotations.Test;\n+\n+import static org.testng.Assert.assertEquals;\n+import static org.testng.Assert.assertEqualsNoOrder;\n+import static org.testng.Assert.assertNull;\n+import static org.testng.Assert.fail;\n+\n+\n+public class DataTypeTransformerTest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "376bd20435b3a9d58ac85c97311237c4cad8d861"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTI0ODkyMw==", "bodyText": "I think Line 138 in DataTypeTransformerTest.java is the example that we expect.", "url": "https://github.com/apache/pinot/pull/5760#discussion_r461248923", "createdAt": "2020-07-28T00:36:22Z", "author": {"login": "jackjlli"}, "path": "pinot-core/src/test/java/org/apache/pinot/core/data/recordtransformer/DataTypeTransformerTest.java", "diffHunk": "@@ -0,0 +1,149 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.core.data.recordtransformer;\n+\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import org.testng.annotations.Test;\n+\n+import static org.testng.Assert.assertEquals;\n+import static org.testng.Assert.assertEqualsNoOrder;\n+import static org.testng.Assert.assertNull;\n+import static org.testng.Assert.fail;\n+\n+\n+public class DataTypeTransformerTest {\n+  private static final String COLUMN = \"testColumn\";\n+\n+  @Test\n+  public void testStandardize() {\n+    // Tests for Map", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTIzNTUyMQ=="}, "originalCommit": {"oid": "ddf7f32ddeea9f2f66e269235f8cb75058fa82ce"}, "originalPosition": 39}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU2ODg3NTIy", "url": "https://github.com/apache/pinot/pull/5760#pullrequestreview-456887522", "createdAt": "2020-07-28T18:12:58Z", "commit": {"oid": "376bd20435b3a9d58ac85c97311237c4cad8d861"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5e366e5227e88c19b5b3266d8214975ae73be3e5", "author": {"user": {"login": "Jackie-Jiang", "name": "Xiaotian (Jackie) Jiang"}}, "url": "https://github.com/apache/pinot/commit/5e366e5227e88c19b5b3266d8214975ae73be3e5", "committedDate": "2020-07-28T18:29:18Z", "message": "Address comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU2OTAzMzI2", "url": "https://github.com/apache/pinot/pull/5760#pullrequestreview-456903326", "createdAt": "2020-07-28T18:34:48Z", "commit": {"oid": "5e366e5227e88c19b5b3266d8214975ae73be3e5"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 475, "cost": 1, "resetAt": "2021-10-28T18:00:02Z"}}}