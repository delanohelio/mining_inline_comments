{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI2MDQzMDM0", "number": 6286, "title": "Adding offline dimension table creation and segment assignment", "bodyText": "This PR adds creation and segment assignment of a dim table. Following are the high level changes:\n\nWe are adding a new configuration property isDimTable to identify a dim table.\nIf the table is identified as a dim table the segments will be assigned to all the hosts.\nAdding a new TableDataManagerType which will be used to create a DimTableDataManager if the following PRs\nAdding a JoinQuickStart to be used to demo an example dim table and join functinality.\n\nDesign doc for lookup join: https://docs.google.com/document/d/1InWmxbRqwcqIakzvoEWHLxtX4XR9H5L01256EbAUHV8/edit", "createdAt": "2020-11-23T22:48:02Z", "url": "https://github.com/apache/pinot/pull/6286", "merged": true, "mergeCommit": {"oid": "64d1054e9f2d6f616fd1baee678a35ec60d5bcf5"}, "closed": true, "closedAt": "2020-12-10T20:17:14Z", "author": {"login": "dharakk"}, "timelineItems": {"totalCount": 17, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdfdnbYABqjQwMzAwNDkxNDc=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdknWRaABqjQwOTI0NDAwMDc=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "2a60f6e924b5b0655b940386050ad8efdc7288ff", "author": {"user": {"login": "dharakk", "name": "Dharak Kharod"}}, "url": "https://github.com/apache/pinot/commit/2a60f6e924b5b0655b940386050ad8efdc7288ff", "committedDate": "2020-11-20T18:35:56Z", "message": "Adding offline dim table creation and assignment"}, "afterCommit": {"oid": "a13ebf2ce03e2d5216371e86620ecb1506a4bf3a", "author": {"user": {"login": "dharakk", "name": "Dharak Kharod"}}, "url": "https://github.com/apache/pinot/commit/a13ebf2ce03e2d5216371e86620ecb1506a4bf3a", "committedDate": "2020-11-23T23:18:56Z", "message": "Adding offline dim table creation and assignment"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM3NzYwMDYz", "url": "https://github.com/apache/pinot/pull/6286#pullrequestreview-537760063", "createdAt": "2020-11-24T17:44:18Z", "commit": {"oid": "a13ebf2ce03e2d5216371e86620ecb1506a4bf3a"}, "state": "COMMENTED", "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxNzo0NDoxOFrOH5OKhA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxNzo1MzowNVrOH5OgDA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTc2Mjk0OA==", "bodyText": "empty line", "url": "https://github.com/apache/pinot/pull/6286#discussion_r529762948", "createdAt": "2020-11-24T17:44:18Z", "author": {"login": "yupeng9"}, "path": "pinot-controller/src/main/java/org/apache/pinot/controller/helix/core/assignment/segment/OfflineSegmentAssignment.java", "diffHunk": "@@ -133,6 +135,10 @@ private void checkReplication(InstancePartitions instancePartitions) {\n   private List<String> assignSegment(String segmentName, Map<String, Map<String, String>> currentAssignment,\n       InstancePartitions instancePartitions) {\n     int numReplicaGroups = instancePartitions.getNumReplicaGroups();\n+    if (_isDimTable) {\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a13ebf2ce03e2d5216371e86620ecb1506a4bf3a"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTc2NDI1NA==", "bodyText": "why only 1 replica? I thought it will be on every host, so it shall be as many as the hosts?", "url": "https://github.com/apache/pinot/pull/6286#discussion_r529764254", "createdAt": "2020-11-24T17:46:23Z", "author": {"login": "yupeng9"}, "path": "pinot-controller/src/main/java/org/apache/pinot/controller/helix/core/assignment/segment/SegmentAssignmentUtils.java", "diffHunk": "@@ -87,6 +87,15 @@ private SegmentAssignmentUtils() {\n     return instances;\n   }\n \n+  static List<String> getInstancesForDimTable(InstancePartitions instancePartitions) {\n+    Preconditions\n+            .checkState(instancePartitions.getNumReplicaGroups() == 1 && instancePartitions.getNumPartitions() == 1,\n+                    \"Instance partitions: %s should contain 1 replica and 1 partition for a dim table\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a13ebf2ce03e2d5216371e86620ecb1506a4bf3a"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTc2NDkxMg==", "bodyText": "add some javadoc explaining that DIMENSION is a special type of OFFLINE", "url": "https://github.com/apache/pinot/pull/6286#discussion_r529764912", "createdAt": "2020-11-24T17:47:27Z", "author": {"login": "yupeng9"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/data/manager/TableDataManagerType.java", "diffHunk": "@@ -0,0 +1,23 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.core.data.manager;\n+\n+public enum TableDataManagerType {\n+    OFFLINE, REALTIME, DIMENSION", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a13ebf2ce03e2d5216371e86620ecb1506a4bf3a"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTc2NTQ0OA==", "bodyText": "equalsIgnoreCase", "url": "https://github.com/apache/pinot/pull/6286#discussion_r529765448", "createdAt": "2020-11-24T17:48:17Z", "author": {"login": "yupeng9"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/data/manager/config/TableDataManagerConfig.java", "diffHunk": "@@ -79,7 +81,10 @@ public static TableDataManagerConfig getDefaultHelixTableDataManagerConfig(\n   public void overrideConfigs(@Nonnull TableConfig tableConfig) {\n     // Override table level configs\n \n-    // Currently we do not override any table level configs into TableDataManagerConfig\n+    if (tableConfig.getIsDimTable() != null && tableConfig.getIsDimTable().equals(\"true\")) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a13ebf2ce03e2d5216371e86620ecb1506a4bf3a"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTc2NjA0NQ==", "bodyText": "do we need DimTableDataManager? or enhance OfflineTableDataManager", "url": "https://github.com/apache/pinot/pull/6286#discussion_r529766045", "createdAt": "2020-11-24T17:49:11Z", "author": {"login": "yupeng9"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/data/manager/offline/TableDataManagerProvider.java", "diffHunk": "@@ -51,13 +52,17 @@ public static TableDataManager getTableDataManager(@Nonnull TableDataManagerConf\n       @Nonnull String instanceId, @Nonnull ZkHelixPropertyStore<ZNRecord> propertyStore,\n       @Nonnull ServerMetrics serverMetrics, @Nonnull HelixManager helixManager) {\n     TableDataManager tableDataManager;\n-    switch (TableType.valueOf(tableDataManagerConfig.getTableDataManagerType())) {\n+    switch (TableDataManagerType.valueOf(tableDataManagerConfig.getTableDataManagerType())) {\n       case OFFLINE:\n         tableDataManager = new OfflineTableDataManager();\n         break;\n       case REALTIME:\n         tableDataManager = new RealtimeTableDataManager(_segmentBuildSemaphore);\n         break;\n+      case DIMENSION:\n+        // TODO: Create a DimTableDataManager here when available", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a13ebf2ce03e2d5216371e86620ecb1506a4bf3a"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTc2NjIxMA==", "bodyText": "whether", "url": "https://github.com/apache/pinot/pull/6286#discussion_r529766210", "createdAt": "2020-11-24T17:49:26Z", "author": {"login": "yupeng9"}, "path": "pinot-spi/src/main/java/org/apache/pinot/spi/config/table/TableConfig.java", "diffHunk": "@@ -62,6 +63,9 @@\n   @JsonPropertyDescription(value = \"The type of the table (OFFLINE|REALTIME) (mandatory)\")\n   private final TableType _tableType;\n \n+  @JsonPropertyDescription(\"Indicates weather the table is a dimension table or not\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a13ebf2ce03e2d5216371e86620ecb1506a4bf3a"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTc2NzIxNQ==", "bodyText": "newline", "url": "https://github.com/apache/pinot/pull/6286#discussion_r529767215", "createdAt": "2020-11-24T17:51:01Z", "author": {"login": "yupeng9"}, "path": "pinot-tools/src/main/resources/examples/batch/dimBaseballTeams/rawdata/dimBaseballTeams_data.csv", "diffHunk": "@@ -0,0 +1,52 @@\n+teamID,teamName\n+ANA,Anaheim Angels\n+ARI,Arizona Diamondbacks\n+ATL,Atlanta Braves\n+BAL,Baltimore Orioles (original- 1901\u20131902 current- since 1954)\n+BOS,Boston Red Caps/Beaneaters (from 1876\u20131900) or Boston Red Sox (since 1953)\n+BOA,Boston Americans (1901\u20131907)\n+BOB,Boston Beaneaters (1901\u20131906) or Boston Braves/Bees (1912\u20131952)\n+BOD,Boston Doves (1907\u20131910)\n+BOR,Boston Red Sox (1908\u20131952)\n+BOU,Boston Rustlers (1911)\n+BKN,Brooklyn Dodgers/Robins/Superbas/Bridegrooms/Grooms/Grays/Atlantics\n+CAL,California Angels\n+CHC,Chicago Cubs (since 1903)\n+CHO,Chicago Orphans (1901\u20131902)\n+CHI,Chicago Orphans/Colts/White Stockings (1876\u20131900)\n+CWS,Chicago White Sox\n+CIN,Cincinnati Reds/Red Stockings\n+CLE,Cleveland Indians/Naps/Broncos/Bluebirds/Lake Shores\n+COL,Colorado Rockies\n+DET,Detroit Tigers\n+FLA,Florida Marlins\n+HOU,Houston Astros/Colt .45s\n+KC,Kansas City Athletics (1955\u20131967) or Kansas City Royals (since 1969)\n+LAA,Los Angeles Angels (of Anaheim)\n+LAD,Los Angeles Dodgers\n+LA,Los Angeles Dodgers (1958\u20131961 1965\u20132004)\n+MIA,Miami Marlins\n+MIL,Milwaukee Brewers (original 1901) or Milwaukee Braves or Milwaukee Brewers (current since 1970)\n+MIN,Minnesota Twins\n+MTL,Montreal Expos\n+NY,New York Gothams/Giants (1883\u20131902) or New York Yankees (1958\u20131961)\n+NYG,New York Giants/Gothams\n+NYM,New York Mets\n+NYY,New York Yankees\n+NYH,New York Highlanders\n+OAK,Oakland Athletics\n+PHA,Philadelphia Athletics\n+PHI,Philadelphia Phillies/Quakers (1883\u20131900 1955\u2013present)\n+PHP,Philadelphia Phillies (1901\u20131942 1945\u20131954)\n+PHB,Philadelphia Blue Jays (1943\u20131944)\n+PIT,Pittsburgh Pirates/Alleghenys\n+SD,San Diego Padres\n+SEA,Seattle Mariners (since 1977) or Seattle Pilots (1969)\n+SF,San Francisco Giants\n+SLB,St. Louis Browns (AL)\n+SLC,St. Louis Cardinals (1902\u20131953)\n+STL,St. Louis Cardinals/Perfectos/Browns/Brown Stockings\n+TB,Tampa Bay (Devil) Rays\n+TEX,Texas Rangers\n+TOR,Toronto Blue Jays\n+WSH,Washington Senators (original- 1901\u20131960) expansion- 1961\u20131971) or Washington Nationals (since 2005)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a13ebf2ce03e2d5216371e86620ecb1506a4bf3a"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTc2ODQ2MA==", "bodyText": "I think we either have tableType:DIMENSION or \"isDimTable\": \"true\", to be consistent with your TableDataManagerType", "url": "https://github.com/apache/pinot/pull/6286#discussion_r529768460", "createdAt": "2020-11-24T17:53:05Z", "author": {"login": "yupeng9"}, "path": "pinot-tools/src/main/resources/examples/batch/dimBaseballTeams/dimBaseballTeams_offline_table_config.json", "diffHunk": "@@ -0,0 +1,23 @@\n+{\n+  \"tableName\": \"dimBaseballTeams\",\n+  \"tableType\": \"OFFLINE\",\n+  \"isDimTable\": \"true\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a13ebf2ce03e2d5216371e86620ecb1506a4bf3a"}, "originalPosition": 4}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM3ODEyMzY2", "url": "https://github.com/apache/pinot/pull/6286#pullrequestreview-537812366", "createdAt": "2020-11-24T18:52:45Z", "commit": {"oid": "a13ebf2ce03e2d5216371e86620ecb1506a4bf3a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxODo1Mjo0NVrOH5QwMw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxODo1Mjo0NVrOH5QwMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTgwNTM2Mw==", "bodyText": "We don't need instance partitions for dimTable. It should be assigned to all the instances under the given tag", "url": "https://github.com/apache/pinot/pull/6286#discussion_r529805363", "createdAt": "2020-11-24T18:52:45Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-controller/src/main/java/org/apache/pinot/controller/helix/core/assignment/segment/SegmentAssignmentUtils.java", "diffHunk": "@@ -87,6 +87,15 @@ private SegmentAssignmentUtils() {\n     return instances;\n   }\n \n+  static List<String> getInstancesForDimTable(InstancePartitions instancePartitions) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a13ebf2ce03e2d5216371e86620ecb1506a4bf3a"}, "originalPosition": 4}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM3ODE5MzA2", "url": "https://github.com/apache/pinot/pull/6286#pullrequestreview-537819306", "createdAt": "2020-11-24T19:02:03Z", "commit": {"oid": "a13ebf2ce03e2d5216371e86620ecb1506a4bf3a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxOTowMjowM1rOH5RGDQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxOTowMjowM1rOH5RGDQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTgxMDk1Nw==", "bodyText": "If possible, let's not introduce this new type. One option is to add the DIMENSION as a TableType, but I'm not sure if we are going to support real-time dimTable in the future (we can add another REALTIME_DIMENSION maybe)", "url": "https://github.com/apache/pinot/pull/6286#discussion_r529810957", "createdAt": "2020-11-24T19:02:03Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/data/manager/TableDataManagerType.java", "diffHunk": "@@ -0,0 +1,23 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.core.data.manager;\n+\n+public enum TableDataManagerType {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a13ebf2ce03e2d5216371e86620ecb1506a4bf3a"}, "originalPosition": 21}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM4MTc0NTk5", "url": "https://github.com/apache/pinot/pull/6286#pullrequestreview-538174599", "createdAt": "2020-11-25T05:51:11Z", "commit": {"oid": "a13ebf2ce03e2d5216371e86620ecb1506a4bf3a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQwNTo1MToxMVrOH5kIGg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQwNTo1MToxMVrOH5kIGg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDEyMjc3OA==", "bodyText": "can we add a new subclass of OfflineSegmentAssignment instead of using a boolean check?", "url": "https://github.com/apache/pinot/pull/6286#discussion_r530122778", "createdAt": "2020-11-25T05:51:11Z", "author": {"login": "chenboat"}, "path": "pinot-controller/src/main/java/org/apache/pinot/controller/helix/core/assignment/segment/OfflineSegmentAssignment.java", "diffHunk": "@@ -133,6 +135,10 @@ private void checkReplication(InstancePartitions instancePartitions) {\n   private List<String> assignSegment(String segmentName, Map<String, Map<String, String>> currentAssignment,\n       InstancePartitions instancePartitions) {\n     int numReplicaGroups = instancePartitions.getNumReplicaGroups();\n+    if (_isDimTable) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a13ebf2ce03e2d5216371e86620ecb1506a4bf3a"}, "originalPosition": 19}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM4MTc0NzEz", "url": "https://github.com/apache/pinot/pull/6286#pullrequestreview-538174713", "createdAt": "2020-11-25T05:51:27Z", "commit": {"oid": "a13ebf2ce03e2d5216371e86620ecb1506a4bf3a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQwNTo1MToyN1rOH5kIbQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQwNTo1MToyN1rOH5kIbQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDEyMjg2MQ==", "bodyText": "Add a test?", "url": "https://github.com/apache/pinot/pull/6286#discussion_r530122861", "createdAt": "2020-11-25T05:51:27Z", "author": {"login": "chenboat"}, "path": "pinot-controller/src/main/java/org/apache/pinot/controller/helix/core/assignment/segment/SegmentAssignmentUtils.java", "diffHunk": "@@ -87,6 +87,15 @@ private SegmentAssignmentUtils() {\n     return instances;\n   }\n \n+  static List<String> getInstancesForDimTable(InstancePartitions instancePartitions) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a13ebf2ce03e2d5216371e86620ecb1506a4bf3a"}, "originalPosition": 4}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a13ebf2ce03e2d5216371e86620ecb1506a4bf3a", "author": {"user": {"login": "dharakk", "name": "Dharak Kharod"}}, "url": "https://github.com/apache/pinot/commit/a13ebf2ce03e2d5216371e86620ecb1506a4bf3a", "committedDate": "2020-11-23T23:18:56Z", "message": "Adding offline dim table creation and assignment"}, "afterCommit": {"oid": "33dd715ce48acb3d081dd18c6f852a66d6ff09f8", "author": {"user": {"login": "dharakk", "name": "Dharak Kharod"}}, "url": "https://github.com/apache/pinot/commit/33dd715ce48acb3d081dd18c6f852a66d6ff09f8", "committedDate": "2020-12-01T08:43:25Z", "message": "Adding offline dim table creation and assignment"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQyMTE2NDI4", "url": "https://github.com/apache/pinot/pull/6286#pullrequestreview-542116428", "createdAt": "2020-12-01T17:08:32Z", "commit": {"oid": "33dd715ce48acb3d081dd18c6f852a66d6ff09f8"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQxNzowODozMlrOH83CaQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQxNzowOTozN1rOH83FPQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzU3ODM0NQ==", "bodyText": "I don't understand why we sort the instances and rotate if we are returning all instances for assignment. Can you add some comments as to why this is being done?", "url": "https://github.com/apache/pinot/pull/6286#discussion_r533578345", "createdAt": "2020-12-01T17:08:32Z", "author": {"login": "mcvsubbu"}, "path": "pinot-controller/src/main/java/org/apache/pinot/controller/helix/core/assignment/segment/OfflineDimTableSegmentAssignment.java", "diffHunk": "@@ -0,0 +1,80 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.controller.helix.core.assignment.segment;\n+\n+import com.google.common.base.Preconditions;\n+import org.apache.commons.configuration.Configuration;\n+import org.apache.helix.HelixManager;\n+import org.apache.pinot.common.assignment.InstancePartitions;\n+import org.apache.pinot.common.tier.Tier;\n+import org.apache.pinot.common.utils.CommonConstants;\n+import org.apache.pinot.common.utils.config.TagNameUtils;\n+import org.apache.pinot.common.utils.helix.HelixHelper;\n+import org.apache.pinot.spi.config.table.TableConfig;\n+import org.apache.pinot.spi.config.table.TenantConfig;\n+import org.apache.pinot.spi.config.table.assignment.InstancePartitionsType;\n+\n+import javax.annotation.Nullable;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.TreeMap;\n+\n+public class OfflineDimTableSegmentAssignment implements SegmentAssignment {\n+\n+    private HelixManager _helixManager;\n+    private String _offlineTableName;\n+    private boolean _isDimTable;\n+    private TenantConfig _tenantConfig;\n+\n+    @Override\n+    public void init(HelixManager helixManager, TableConfig tableConfig) {\n+        _helixManager = helixManager;\n+        _offlineTableName = tableConfig.getTableName();\n+        _tenantConfig = tableConfig.getTenantConfig();\n+        _isDimTable = Boolean.parseBoolean(tableConfig.getIsDimTable());\n+        Preconditions.checkState(_isDimTable, \"Not a dimension table: %s\" + _offlineTableName);\n+    }\n+\n+    @Override\n+    public List<String> assignSegment(String segmentName, Map<String, Map<String, String>> currentAssignment, Map<InstancePartitionsType, InstancePartitions> instancePartitionsMap) {\n+        String serverTag = TagNameUtils.extractOfflineServerTag(_tenantConfig);\n+\n+        List<String> instances = HelixHelper.getInstancesWithTag(_helixManager, serverTag);\n+        int numInstances = instances.size();\n+        Preconditions.checkState(numInstances > 0, \"No instance found with tag: %s\", serverTag);\n+\n+        // Sort the instances and rotate the list based on the table name", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "33dd715ce48acb3d081dd18c6f852a66d6ff09f8"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzU3OTA2OQ==", "bodyText": "Your indentation is off. Can you please import pinot coding conventions?", "url": "https://github.com/apache/pinot/pull/6286#discussion_r533579069", "createdAt": "2020-12-01T17:09:37Z", "author": {"login": "mcvsubbu"}, "path": "pinot-controller/src/main/java/org/apache/pinot/controller/helix/core/assignment/segment/OfflineDimTableSegmentAssignment.java", "diffHunk": "@@ -0,0 +1,80 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.controller.helix.core.assignment.segment;\n+\n+import com.google.common.base.Preconditions;\n+import org.apache.commons.configuration.Configuration;\n+import org.apache.helix.HelixManager;\n+import org.apache.pinot.common.assignment.InstancePartitions;\n+import org.apache.pinot.common.tier.Tier;\n+import org.apache.pinot.common.utils.CommonConstants;\n+import org.apache.pinot.common.utils.config.TagNameUtils;\n+import org.apache.pinot.common.utils.helix.HelixHelper;\n+import org.apache.pinot.spi.config.table.TableConfig;\n+import org.apache.pinot.spi.config.table.TenantConfig;\n+import org.apache.pinot.spi.config.table.assignment.InstancePartitionsType;\n+\n+import javax.annotation.Nullable;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.TreeMap;\n+\n+public class OfflineDimTableSegmentAssignment implements SegmentAssignment {\n+\n+    private HelixManager _helixManager;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "33dd715ce48acb3d081dd18c6f852a66d6ff09f8"}, "originalPosition": 42}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQzMTY1NTYy", "url": "https://github.com/apache/pinot/pull/6286#pullrequestreview-543165562", "createdAt": "2020-12-02T19:25:05Z", "commit": {"oid": "33dd715ce48acb3d081dd18c6f852a66d6ff09f8"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQxOToyNTowNlrOH9qqfQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQxOToyNTowNlrOH9qqfQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDQyNDE4OQ==", "bodyText": "Can you add javadoc to this new class? It should explain what is the property of the new DimTableSegmentAssignment? Also its differences with other SegmentAssignment strategies.", "url": "https://github.com/apache/pinot/pull/6286#discussion_r534424189", "createdAt": "2020-12-02T19:25:06Z", "author": {"login": "chenboat"}, "path": "pinot-controller/src/main/java/org/apache/pinot/controller/helix/core/assignment/segment/OfflineDimTableSegmentAssignment.java", "diffHunk": "@@ -0,0 +1,80 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.controller.helix.core.assignment.segment;\n+\n+import com.google.common.base.Preconditions;\n+import org.apache.commons.configuration.Configuration;\n+import org.apache.helix.HelixManager;\n+import org.apache.pinot.common.assignment.InstancePartitions;\n+import org.apache.pinot.common.tier.Tier;\n+import org.apache.pinot.common.utils.CommonConstants;\n+import org.apache.pinot.common.utils.config.TagNameUtils;\n+import org.apache.pinot.common.utils.helix.HelixHelper;\n+import org.apache.pinot.spi.config.table.TableConfig;\n+import org.apache.pinot.spi.config.table.TenantConfig;\n+import org.apache.pinot.spi.config.table.assignment.InstancePartitionsType;\n+\n+import javax.annotation.Nullable;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.TreeMap;\n+\n+public class OfflineDimTableSegmentAssignment implements SegmentAssignment {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "33dd715ce48acb3d081dd18c6f852a66d6ff09f8"}, "originalPosition": 40}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "33dd715ce48acb3d081dd18c6f852a66d6ff09f8", "author": {"user": {"login": "dharakk", "name": "Dharak Kharod"}}, "url": "https://github.com/apache/pinot/commit/33dd715ce48acb3d081dd18c6f852a66d6ff09f8", "committedDate": "2020-12-01T08:43:25Z", "message": "Adding offline dim table creation and assignment"}, "afterCommit": {"oid": "f0071f18a6834f65ed0c0137d3a222a0205ed9c4", "author": {"user": {"login": "dharakk", "name": "Dharak Kharod"}}, "url": "https://github.com/apache/pinot/commit/f0071f18a6834f65ed0c0137d3a222a0205ed9c4", "committedDate": "2020-12-03T03:42:16Z", "message": "Adding offline dim table creation and assignment"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ2NDkzNjk0", "url": "https://github.com/apache/pinot/pull/6286#pullrequestreview-546493694", "createdAt": "2020-12-07T20:05:14Z", "commit": {"oid": "f0071f18a6834f65ed0c0137d3a222a0205ed9c4"}, "state": "COMMENTED", "comments": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QyMDowNToxNFrOIA4bsA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QyMDoxNTo0NVrOIA40aw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzc5NTUwNA==", "bodyText": "Store as boolean for clarity?", "url": "https://github.com/apache/pinot/pull/6286#discussion_r537795504", "createdAt": "2020-12-07T20:05:14Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-common/src/main/java/org/apache/pinot/common/utils/config/TableConfigUtils.java", "diffHunk": "@@ -58,6 +58,7 @@ public static TableConfig fromZNRecord(ZNRecord znRecord)\n     String tableName = znRecord.getId();\n \n     String tableType = simpleFields.get(TableConfig.TABLE_TYPE_KEY);\n+    String isDimTable = simpleFields.get(TableConfig.IS_DIM_TABLE_KEY);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f0071f18a6834f65ed0c0137d3a222a0205ed9c4"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzc5Nzg4Ng==", "bodyText": "No need to assign per segment. Fetch the instances with the tag once, and construct the new assignment", "url": "https://github.com/apache/pinot/pull/6286#discussion_r537797886", "createdAt": "2020-12-07T20:09:15Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-controller/src/main/java/org/apache/pinot/controller/helix/core/assignment/segment/OfflineDimTableSegmentAssignment.java", "diffHunk": "@@ -0,0 +1,94 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.controller.helix.core.assignment.segment;\n+\n+import com.google.common.base.Preconditions;\n+import org.apache.commons.configuration.Configuration;\n+import org.apache.helix.HelixManager;\n+import org.apache.pinot.common.assignment.InstancePartitions;\n+import org.apache.pinot.common.tier.Tier;\n+import org.apache.pinot.common.utils.CommonConstants;\n+import org.apache.pinot.common.utils.config.TagNameUtils;\n+import org.apache.pinot.common.utils.helix.HelixHelper;\n+import org.apache.pinot.spi.config.table.TableConfig;\n+import org.apache.pinot.spi.config.table.TenantConfig;\n+import org.apache.pinot.spi.config.table.assignment.InstancePartitionsType;\n+\n+import javax.annotation.Nullable;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.TreeMap;\n+\n+\n+/**\n+ * Segment assignment for an offline dimension table.\n+ * <ul>\n+ *   <li>\n+ *     <p>This segment assignment strategy is used when {@link TableConfig#IS_DIM_TABLE_KEY}is\n+ *     set to \"true\".</p>\n+ *   </li>\n+ *   <li>\n+ *     <p>For a dimension table we assign the segment to all the hosts Thus for this assignment\n+ *     strategy we simply return all the hosts under a given tag as the assigned hosts for\n+ *     a given segment.</p>\n+ *   </li>\n+ * </ul>\n+ */\n+public class OfflineDimTableSegmentAssignment implements SegmentAssignment {\n+\n+  private HelixManager _helixManager;\n+  private String _offlineTableName;\n+  private boolean _isDimTable;\n+  private TenantConfig _tenantConfig;\n+\n+  @Override\n+  public void init(HelixManager helixManager, TableConfig tableConfig) {\n+    _helixManager = helixManager;\n+    _offlineTableName = tableConfig.getTableName();\n+    _tenantConfig = tableConfig.getTenantConfig();\n+    _isDimTable = Boolean.parseBoolean(tableConfig.getIsDimTable());\n+    Preconditions.checkState(_isDimTable, \"Not a dimension table: %s\" + _offlineTableName);\n+  }\n+\n+  @Override\n+  public List<String> assignSegment(String segmentName, Map<String, Map<String, String>> currentAssignment,\n+      Map<InstancePartitionsType, InstancePartitions> instancePartitionsMap) {\n+    String serverTag = TagNameUtils.extractOfflineServerTag(_tenantConfig);\n+\n+    List<String> instances = HelixHelper.getInstancesWithTag(_helixManager, serverTag);\n+    int numInstances = instances.size();\n+    Preconditions.checkState(numInstances > 0, \"No instance found with tag: %s\", serverTag);\n+\n+    return instances;\n+  }\n+\n+  @Override\n+  public Map<String, Map<String, String>> rebalanceTable(Map<String, Map<String, String>> currentAssignment,\n+      Map<InstancePartitionsType, InstancePartitions> instancePartitionsMap, @Nullable List<Tier> sortedTiers,\n+      @Nullable Map<String, InstancePartitions> tierInstancePartitionsMap, Configuration config) {\n+    Map<String, Map<String, String>> newAssignment = new TreeMap<>();\n+    for (String segment : currentAssignment.keySet()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f0071f18a6834f65ed0c0137d3a222a0205ed9c4"}, "originalPosition": 87}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzc5ODEzNw==", "bodyText": "No need to keep this member variable", "url": "https://github.com/apache/pinot/pull/6286#discussion_r537798137", "createdAt": "2020-12-07T20:09:33Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-controller/src/main/java/org/apache/pinot/controller/helix/core/assignment/segment/OfflineDimTableSegmentAssignment.java", "diffHunk": "@@ -0,0 +1,94 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.controller.helix.core.assignment.segment;\n+\n+import com.google.common.base.Preconditions;\n+import org.apache.commons.configuration.Configuration;\n+import org.apache.helix.HelixManager;\n+import org.apache.pinot.common.assignment.InstancePartitions;\n+import org.apache.pinot.common.tier.Tier;\n+import org.apache.pinot.common.utils.CommonConstants;\n+import org.apache.pinot.common.utils.config.TagNameUtils;\n+import org.apache.pinot.common.utils.helix.HelixHelper;\n+import org.apache.pinot.spi.config.table.TableConfig;\n+import org.apache.pinot.spi.config.table.TenantConfig;\n+import org.apache.pinot.spi.config.table.assignment.InstancePartitionsType;\n+\n+import javax.annotation.Nullable;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.TreeMap;\n+\n+\n+/**\n+ * Segment assignment for an offline dimension table.\n+ * <ul>\n+ *   <li>\n+ *     <p>This segment assignment strategy is used when {@link TableConfig#IS_DIM_TABLE_KEY}is\n+ *     set to \"true\".</p>\n+ *   </li>\n+ *   <li>\n+ *     <p>For a dimension table we assign the segment to all the hosts Thus for this assignment\n+ *     strategy we simply return all the hosts under a given tag as the assigned hosts for\n+ *     a given segment.</p>\n+ *   </li>\n+ * </ul>\n+ */\n+public class OfflineDimTableSegmentAssignment implements SegmentAssignment {\n+\n+  private HelixManager _helixManager;\n+  private String _offlineTableName;\n+  private boolean _isDimTable;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f0071f18a6834f65ed0c0137d3a222a0205ed9c4"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzc5ODg0Mw==", "bodyText": "(nit)\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                if (tableConfig.getTableType() == TableType.OFFLINE && Boolean.parseBoolean(tableConfig.getIsDimTable())) {\n          \n          \n            \n                  segmentAssignment = new OfflineDimTableSegmentAssignment();\n          \n          \n            \n                } else if (tableConfig.getTableType() == TableType.OFFLINE) {\n          \n          \n            \n                if (tableConfig.getTableType() == TableType.OFFLINE) {\n          \n          \n            \n                  return tableConfig.isDimTable() ? new OfflineDimTableSegmentAssignment() : new OfflineSegmentAssignment();\n          \n          \n            \n                }", "url": "https://github.com/apache/pinot/pull/6286#discussion_r537798843", "createdAt": "2020-12-07T20:10:44Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-controller/src/main/java/org/apache/pinot/controller/helix/core/assignment/segment/SegmentAssignmentFactory.java", "diffHunk": "@@ -32,7 +32,9 @@ private SegmentAssignmentFactory() {\n \n   public static SegmentAssignment getSegmentAssignment(HelixManager helixManager, TableConfig tableConfig) {\n     SegmentAssignment segmentAssignment;\n-    if (tableConfig.getTableType() == TableType.OFFLINE) {\n+    if (tableConfig.getTableType() == TableType.OFFLINE && Boolean.parseBoolean(tableConfig.getIsDimTable())) {\n+      segmentAssignment = new OfflineDimTableSegmentAssignment();\n+    } else if (tableConfig.getTableType() == TableType.OFFLINE) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f0071f18a6834f65ed0c0137d3a222a0205ed9c4"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzgwMDQ0NQ==", "bodyText": "We should not have this config on instance level. It does not make sense for a server to only serve dimension table", "url": "https://github.com/apache/pinot/pull/6286#discussion_r537800445", "createdAt": "2020-12-07T20:13:19Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/data/manager/config/TableDataManagerConfig.java", "diffHunk": "@@ -35,6 +35,7 @@\n   private static final String TABLE_DATA_MANAGER_DATA_DIRECTORY = \"directory\";\n   private static final String TABLE_DATA_MANAGER_CONSUMER_DIRECTORY = \"consumerDirectory\";\n   private static final String TABLE_DATA_MANAGER_NAME = \"name\";\n+  private static final String TABLE_IS_DIMENSION = \"isDimTable\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f0071f18a6834f65ed0c0137d3a222a0205ed9c4"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzgwMDYxMg==", "bodyText": "Store boolean instead of String", "url": "https://github.com/apache/pinot/pull/6286#discussion_r537800612", "createdAt": "2020-12-07T20:13:38Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-spi/src/main/java/org/apache/pinot/spi/config/table/TableConfig.java", "diffHunk": "@@ -62,6 +63,9 @@\n   @JsonPropertyDescription(value = \"The type of the table (OFFLINE|REALTIME) (mandatory)\")\n   private final TableType _tableType;\n \n+  @JsonPropertyDescription(\"Indicates whether the table is a dimension table or not\")\n+  private final String _isDimTable;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f0071f18a6834f65ed0c0137d3a222a0205ed9c4"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzgwMDc5Mw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              public String getIsDimTable() {\n          \n          \n            \n              public boolean isDimTable() {", "url": "https://github.com/apache/pinot/pull/6286#discussion_r537800793", "createdAt": "2020-12-07T20:13:57Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-spi/src/main/java/org/apache/pinot/spi/config/table/TableConfig.java", "diffHunk": "@@ -142,6 +148,11 @@ public TableType getTableType() {\n     return _tableType;\n   }\n \n+  @JsonProperty(IS_DIM_TABLE_KEY)\n+  public String getIsDimTable() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f0071f18a6834f65ed0c0137d3a222a0205ed9c4"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzgwMDkxNw==", "bodyText": "Store boolean", "url": "https://github.com/apache/pinot/pull/6286#discussion_r537800917", "createdAt": "2020-12-07T20:14:14Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-spi/src/main/java/org/apache/pinot/spi/utils/builder/TableConfigBuilder.java", "diffHunk": "@@ -55,6 +55,7 @@\n \n   private final TableType _tableType;\n   private String _tableName;\n+  private String _isDimTable;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f0071f18a6834f65ed0c0137d3a222a0205ed9c4"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzgwMTgzNQ==", "bodyText": "Don't add this quick start yet. We can add it along with the lookup feature support", "url": "https://github.com/apache/pinot/pull/6286#discussion_r537801835", "createdAt": "2020-12-07T20:15:45Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-tools/src/main/java/org/apache/pinot/tools/JoinQuickStart.java", "diffHunk": "@@ -0,0 +1,127 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.tools;\n+\n+import com.google.common.base.Preconditions;\n+import com.google.common.collect.Lists;\n+import org.apache.commons.io.FileUtils;\n+import org.apache.pinot.spi.plugin.PluginManager;\n+import org.apache.pinot.tools.admin.command.QuickstartRunner;\n+\n+import java.io.File;\n+import java.net.URL;\n+\n+import static org.apache.pinot.tools.Quickstart.prettyPrintResponse;\n+import static org.apache.pinot.tools.Quickstart.printStatus;\n+\n+\n+public class JoinQuickStart {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f0071f18a6834f65ed0c0137d3a222a0205ed9c4"}, "originalPosition": 34}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f0071f18a6834f65ed0c0137d3a222a0205ed9c4", "author": {"user": {"login": "dharakk", "name": "Dharak Kharod"}}, "url": "https://github.com/apache/pinot/commit/f0071f18a6834f65ed0c0137d3a222a0205ed9c4", "committedDate": "2020-12-03T03:42:16Z", "message": "Adding offline dim table creation and assignment"}, "afterCommit": {"oid": "31e352220fb05a2466ab123215e741939f4b44bb", "author": {"user": {"login": "dharakk", "name": "Dharak Kharod"}}, "url": "https://github.com/apache/pinot/commit/31e352220fb05a2466ab123215e741939f4b44bb", "committedDate": "2020-12-09T08:21:19Z", "message": "Adding offline dim table creation and assignment"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ4NDk5ODM5", "url": "https://github.com/apache/pinot/pull/6286#pullrequestreview-548499839", "createdAt": "2020-12-09T18:48:05Z", "commit": {"oid": "31e352220fb05a2466ab123215e741939f4b44bb"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxODo0ODowNVrOICkEAQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxODo1NDoyOFrOICkUUw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTU1ODkxMw==", "bodyText": "Wrong import", "url": "https://github.com/apache/pinot/pull/6286#discussion_r539558913", "createdAt": "2020-12-09T18:48:05Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-common/src/main/java/org/apache/pinot/common/utils/config/TableConfigUtils.java", "diffHunk": "@@ -21,6 +21,7 @@\n import com.fasterxml.jackson.core.JsonProcessingException;\n import com.fasterxml.jackson.core.type.TypeReference;\n import com.google.common.base.Preconditions;\n+import com.sun.org.apache.xpath.internal.operations.Bool;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "31e352220fb05a2466ab123215e741939f4b44bb"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTU2MzA5MQ==", "bodyText": "The config in this class is for server specific config (the location of the data directory etc.). We should not keep the isDimTable() info in this class, it should be in table config only. Also, I don't think isDimTable() is used", "url": "https://github.com/apache/pinot/pull/6286#discussion_r539563091", "createdAt": "2020-12-09T18:54:28Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/data/manager/config/TableDataManagerConfig.java", "diffHunk": "@@ -35,6 +35,7 @@\n   private static final String TABLE_DATA_MANAGER_DATA_DIRECTORY = \"directory\";\n   private static final String TABLE_DATA_MANAGER_CONSUMER_DIRECTORY = \"consumerDirectory\";\n   private static final String TABLE_DATA_MANAGER_NAME = \"name\";\n+  private static final String TABLE_IS_DIMENSION = \"isDimTable\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzgwMDQ0NQ=="}, "originalCommit": {"oid": "f0071f18a6834f65ed0c0137d3a222a0205ed9c4"}, "originalPosition": 4}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "31e352220fb05a2466ab123215e741939f4b44bb", "author": {"user": {"login": "dharakk", "name": "Dharak Kharod"}}, "url": "https://github.com/apache/pinot/commit/31e352220fb05a2466ab123215e741939f4b44bb", "committedDate": "2020-12-09T08:21:19Z", "message": "Adding offline dim table creation and assignment"}, "afterCommit": {"oid": "2a0eb3703133c2cb3eacade83d3e4cfbae73e19f", "author": {"user": {"login": "dharakk", "name": "Dharak Kharod"}}, "url": "https://github.com/apache/pinot/commit/2a0eb3703133c2cb3eacade83d3e4cfbae73e19f", "committedDate": "2020-12-09T20:43:45Z", "message": "Adding offline dim table creation and assignment"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ4NjU2MDIw", "url": "https://github.com/apache/pinot/pull/6286#pullrequestreview-548656020", "createdAt": "2020-12-09T22:11:07Z", "commit": {"oid": "2a0eb3703133c2cb3eacade83d3e4cfbae73e19f"}, "state": "COMMENTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQyMjoxMTowOFrOICr0aA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQyMjozMjo1MFrOICslKQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTY4NTk5Mg==", "bodyText": "Thus -> . Thus", "url": "https://github.com/apache/pinot/pull/6286#discussion_r539685992", "createdAt": "2020-12-09T22:11:08Z", "author": {"login": "yupeng9"}, "path": "pinot-controller/src/main/java/org/apache/pinot/controller/helix/core/assignment/segment/OfflineDimTableSegmentAssignment.java", "diffHunk": "@@ -0,0 +1,93 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.controller.helix.core.assignment.segment;\n+\n+import com.google.common.base.Preconditions;\n+import org.apache.commons.configuration.Configuration;\n+import org.apache.helix.HelixManager;\n+import org.apache.pinot.common.assignment.InstancePartitions;\n+import org.apache.pinot.common.tier.Tier;\n+import org.apache.pinot.common.utils.CommonConstants;\n+import org.apache.pinot.common.utils.config.TagNameUtils;\n+import org.apache.pinot.common.utils.helix.HelixHelper;\n+import org.apache.pinot.spi.config.table.TableConfig;\n+import org.apache.pinot.spi.config.table.TenantConfig;\n+import org.apache.pinot.spi.config.table.assignment.InstancePartitionsType;\n+\n+import javax.annotation.Nullable;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.TreeMap;\n+\n+\n+/**\n+ * Segment assignment for an offline dimension table.\n+ * <ul>\n+ *   <li>\n+ *     <p>This segment assignment strategy is used when {@link TableConfig#IS_DIM_TABLE_KEY}is\n+ *     set to \"true\".</p>\n+ *   </li>\n+ *   <li>\n+ *     <p>For a dimension table we assign the segment to all the hosts Thus for this assignment", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2a0eb3703133c2cb3eacade83d3e4cfbae73e19f"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTY4NjcxMA==", "bodyText": "final", "url": "https://github.com/apache/pinot/pull/6286#discussion_r539686710", "createdAt": "2020-12-09T22:12:21Z", "author": {"login": "yupeng9"}, "path": "pinot-controller/src/main/java/org/apache/pinot/controller/helix/core/assignment/segment/OfflineDimTableSegmentAssignment.java", "diffHunk": "@@ -0,0 +1,93 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.controller.helix.core.assignment.segment;\n+\n+import com.google.common.base.Preconditions;\n+import org.apache.commons.configuration.Configuration;\n+import org.apache.helix.HelixManager;\n+import org.apache.pinot.common.assignment.InstancePartitions;\n+import org.apache.pinot.common.tier.Tier;\n+import org.apache.pinot.common.utils.CommonConstants;\n+import org.apache.pinot.common.utils.config.TagNameUtils;\n+import org.apache.pinot.common.utils.helix.HelixHelper;\n+import org.apache.pinot.spi.config.table.TableConfig;\n+import org.apache.pinot.spi.config.table.TenantConfig;\n+import org.apache.pinot.spi.config.table.assignment.InstancePartitionsType;\n+\n+import javax.annotation.Nullable;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.TreeMap;\n+\n+\n+/**\n+ * Segment assignment for an offline dimension table.\n+ * <ul>\n+ *   <li>\n+ *     <p>This segment assignment strategy is used when {@link TableConfig#IS_DIM_TABLE_KEY}is\n+ *     set to \"true\".</p>\n+ *   </li>\n+ *   <li>\n+ *     <p>For a dimension table we assign the segment to all the hosts Thus for this assignment\n+ *     strategy we simply return all the hosts under a given tag as the assigned hosts for\n+ *     a given segment.</p>\n+ *   </li>\n+ * </ul>\n+ */\n+public class OfflineDimTableSegmentAssignment implements SegmentAssignment {\n+\n+  private HelixManager _helixManager;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2a0eb3703133c2cb3eacade83d3e4cfbae73e19f"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTY4Njc3MA==", "bodyText": "final", "url": "https://github.com/apache/pinot/pull/6286#discussion_r539686770", "createdAt": "2020-12-09T22:12:27Z", "author": {"login": "yupeng9"}, "path": "pinot-controller/src/main/java/org/apache/pinot/controller/helix/core/assignment/segment/OfflineDimTableSegmentAssignment.java", "diffHunk": "@@ -0,0 +1,93 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.controller.helix.core.assignment.segment;\n+\n+import com.google.common.base.Preconditions;\n+import org.apache.commons.configuration.Configuration;\n+import org.apache.helix.HelixManager;\n+import org.apache.pinot.common.assignment.InstancePartitions;\n+import org.apache.pinot.common.tier.Tier;\n+import org.apache.pinot.common.utils.CommonConstants;\n+import org.apache.pinot.common.utils.config.TagNameUtils;\n+import org.apache.pinot.common.utils.helix.HelixHelper;\n+import org.apache.pinot.spi.config.table.TableConfig;\n+import org.apache.pinot.spi.config.table.TenantConfig;\n+import org.apache.pinot.spi.config.table.assignment.InstancePartitionsType;\n+\n+import javax.annotation.Nullable;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.TreeMap;\n+\n+\n+/**\n+ * Segment assignment for an offline dimension table.\n+ * <ul>\n+ *   <li>\n+ *     <p>This segment assignment strategy is used when {@link TableConfig#IS_DIM_TABLE_KEY}is\n+ *     set to \"true\".</p>\n+ *   </li>\n+ *   <li>\n+ *     <p>For a dimension table we assign the segment to all the hosts Thus for this assignment\n+ *     strategy we simply return all the hosts under a given tag as the assigned hosts for\n+ *     a given segment.</p>\n+ *   </li>\n+ * </ul>\n+ */\n+public class OfflineDimTableSegmentAssignment implements SegmentAssignment {\n+\n+  private HelixManager _helixManager;\n+  private String _offlineTableName;\n+  private TenantConfig _tenantConfig;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2a0eb3703133c2cb3eacade83d3e4cfbae73e19f"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTY4Njk1Nw==", "bodyText": "nit: precondition goes to the top", "url": "https://github.com/apache/pinot/pull/6286#discussion_r539686957", "createdAt": "2020-12-09T22:12:48Z", "author": {"login": "yupeng9"}, "path": "pinot-controller/src/main/java/org/apache/pinot/controller/helix/core/assignment/segment/OfflineDimTableSegmentAssignment.java", "diffHunk": "@@ -0,0 +1,93 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.controller.helix.core.assignment.segment;\n+\n+import com.google.common.base.Preconditions;\n+import org.apache.commons.configuration.Configuration;\n+import org.apache.helix.HelixManager;\n+import org.apache.pinot.common.assignment.InstancePartitions;\n+import org.apache.pinot.common.tier.Tier;\n+import org.apache.pinot.common.utils.CommonConstants;\n+import org.apache.pinot.common.utils.config.TagNameUtils;\n+import org.apache.pinot.common.utils.helix.HelixHelper;\n+import org.apache.pinot.spi.config.table.TableConfig;\n+import org.apache.pinot.spi.config.table.TenantConfig;\n+import org.apache.pinot.spi.config.table.assignment.InstancePartitionsType;\n+\n+import javax.annotation.Nullable;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.TreeMap;\n+\n+\n+/**\n+ * Segment assignment for an offline dimension table.\n+ * <ul>\n+ *   <li>\n+ *     <p>This segment assignment strategy is used when {@link TableConfig#IS_DIM_TABLE_KEY}is\n+ *     set to \"true\".</p>\n+ *   </li>\n+ *   <li>\n+ *     <p>For a dimension table we assign the segment to all the hosts Thus for this assignment\n+ *     strategy we simply return all the hosts under a given tag as the assigned hosts for\n+ *     a given segment.</p>\n+ *   </li>\n+ * </ul>\n+ */\n+public class OfflineDimTableSegmentAssignment implements SegmentAssignment {\n+\n+  private HelixManager _helixManager;\n+  private String _offlineTableName;\n+  private TenantConfig _tenantConfig;\n+\n+  @Override\n+  public void init(HelixManager helixManager, TableConfig tableConfig) {\n+    _helixManager = helixManager;\n+    _offlineTableName = tableConfig.getTableName();\n+    _tenantConfig = tableConfig.getTenantConfig();\n+    Preconditions.checkState(tableConfig.isDimTable(), \"Not a dimension table: %s\" + _offlineTableName);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2a0eb3703133c2cb3eacade83d3e4cfbae73e19f"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTY4NzYzNw==", "bodyText": "I think empty instance is valid? Shall this be a warning?", "url": "https://github.com/apache/pinot/pull/6286#discussion_r539687637", "createdAt": "2020-12-09T22:14:06Z", "author": {"login": "yupeng9"}, "path": "pinot-controller/src/main/java/org/apache/pinot/controller/helix/core/assignment/segment/OfflineDimTableSegmentAssignment.java", "diffHunk": "@@ -0,0 +1,93 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.controller.helix.core.assignment.segment;\n+\n+import com.google.common.base.Preconditions;\n+import org.apache.commons.configuration.Configuration;\n+import org.apache.helix.HelixManager;\n+import org.apache.pinot.common.assignment.InstancePartitions;\n+import org.apache.pinot.common.tier.Tier;\n+import org.apache.pinot.common.utils.CommonConstants;\n+import org.apache.pinot.common.utils.config.TagNameUtils;\n+import org.apache.pinot.common.utils.helix.HelixHelper;\n+import org.apache.pinot.spi.config.table.TableConfig;\n+import org.apache.pinot.spi.config.table.TenantConfig;\n+import org.apache.pinot.spi.config.table.assignment.InstancePartitionsType;\n+\n+import javax.annotation.Nullable;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.TreeMap;\n+\n+\n+/**\n+ * Segment assignment for an offline dimension table.\n+ * <ul>\n+ *   <li>\n+ *     <p>This segment assignment strategy is used when {@link TableConfig#IS_DIM_TABLE_KEY}is\n+ *     set to \"true\".</p>\n+ *   </li>\n+ *   <li>\n+ *     <p>For a dimension table we assign the segment to all the hosts Thus for this assignment\n+ *     strategy we simply return all the hosts under a given tag as the assigned hosts for\n+ *     a given segment.</p>\n+ *   </li>\n+ * </ul>\n+ */\n+public class OfflineDimTableSegmentAssignment implements SegmentAssignment {\n+\n+  private HelixManager _helixManager;\n+  private String _offlineTableName;\n+  private TenantConfig _tenantConfig;\n+\n+  @Override\n+  public void init(HelixManager helixManager, TableConfig tableConfig) {\n+    _helixManager = helixManager;\n+    _offlineTableName = tableConfig.getTableName();\n+    _tenantConfig = tableConfig.getTenantConfig();\n+    Preconditions.checkState(tableConfig.isDimTable(), \"Not a dimension table: %s\" + _offlineTableName);\n+  }\n+\n+  @Override\n+  public List<String> assignSegment(String segmentName, Map<String, Map<String, String>> currentAssignment,\n+      Map<InstancePartitionsType, InstancePartitions> instancePartitionsMap) {\n+    String serverTag = TagNameUtils.extractOfflineServerTag(_tenantConfig);\n+\n+    List<String> instances = HelixHelper.getInstancesWithTag(_helixManager, serverTag);\n+    int numInstances = instances.size();\n+    Preconditions.checkState(numInstances > 0, \"No instance found with tag: %s\", serverTag);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2a0eb3703133c2cb3eacade83d3e4cfbae73e19f"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTY5ODQ3Mw==", "bodyText": "What do we do about the offline ones? Will we assign segments to them once they are back online?", "url": "https://github.com/apache/pinot/pull/6286#discussion_r539698473", "createdAt": "2020-12-09T22:32:50Z", "author": {"login": "yupeng9"}, "path": "pinot-controller/src/main/java/org/apache/pinot/controller/helix/core/assignment/segment/OfflineDimTableSegmentAssignment.java", "diffHunk": "@@ -0,0 +1,93 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.controller.helix.core.assignment.segment;\n+\n+import com.google.common.base.Preconditions;\n+import org.apache.commons.configuration.Configuration;\n+import org.apache.helix.HelixManager;\n+import org.apache.pinot.common.assignment.InstancePartitions;\n+import org.apache.pinot.common.tier.Tier;\n+import org.apache.pinot.common.utils.CommonConstants;\n+import org.apache.pinot.common.utils.config.TagNameUtils;\n+import org.apache.pinot.common.utils.helix.HelixHelper;\n+import org.apache.pinot.spi.config.table.TableConfig;\n+import org.apache.pinot.spi.config.table.TenantConfig;\n+import org.apache.pinot.spi.config.table.assignment.InstancePartitionsType;\n+\n+import javax.annotation.Nullable;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.TreeMap;\n+\n+\n+/**\n+ * Segment assignment for an offline dimension table.\n+ * <ul>\n+ *   <li>\n+ *     <p>This segment assignment strategy is used when {@link TableConfig#IS_DIM_TABLE_KEY}is\n+ *     set to \"true\".</p>\n+ *   </li>\n+ *   <li>\n+ *     <p>For a dimension table we assign the segment to all the hosts Thus for this assignment\n+ *     strategy we simply return all the hosts under a given tag as the assigned hosts for\n+ *     a given segment.</p>\n+ *   </li>\n+ * </ul>\n+ */\n+public class OfflineDimTableSegmentAssignment implements SegmentAssignment {\n+\n+  private HelixManager _helixManager;\n+  private String _offlineTableName;\n+  private TenantConfig _tenantConfig;\n+\n+  @Override\n+  public void init(HelixManager helixManager, TableConfig tableConfig) {\n+    _helixManager = helixManager;\n+    _offlineTableName = tableConfig.getTableName();\n+    _tenantConfig = tableConfig.getTenantConfig();\n+    Preconditions.checkState(tableConfig.isDimTable(), \"Not a dimension table: %s\" + _offlineTableName);\n+  }\n+\n+  @Override\n+  public List<String> assignSegment(String segmentName, Map<String, Map<String, String>> currentAssignment,\n+      Map<InstancePartitionsType, InstancePartitions> instancePartitionsMap) {\n+    String serverTag = TagNameUtils.extractOfflineServerTag(_tenantConfig);\n+\n+    List<String> instances = HelixHelper.getInstancesWithTag(_helixManager, serverTag);\n+    int numInstances = instances.size();\n+    Preconditions.checkState(numInstances > 0, \"No instance found with tag: %s\", serverTag);\n+\n+    return instances;\n+  }\n+\n+  @Override\n+  public Map<String, Map<String, String>> rebalanceTable(Map<String, Map<String, String>> currentAssignment,\n+      Map<InstancePartitionsType, InstancePartitions> instancePartitionsMap, @Nullable List<Tier> sortedTiers,\n+      @Nullable Map<String, InstancePartitions> tierInstancePartitionsMap, Configuration config) {\n+    String serverTag = TagNameUtils.extractOfflineServerTag(_tenantConfig);\n+    List<String> instances = HelixHelper.getInstancesWithTag(_helixManager, serverTag);\n+    Map<String, Map<String, String>> newAssignment = new TreeMap<>();\n+    for (String segment : currentAssignment.keySet()) {\n+      newAssignment.put(segment, SegmentAssignmentUtils\n+          .getInstanceStateMap(instances, CommonConstants.Helix.StateModel.SegmentStateModel.ONLINE));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2a0eb3703133c2cb3eacade83d3e4cfbae73e19f"}, "originalPosition": 89}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f63074429aedae31e97bcbd00a412b418fc71a94", "author": {"user": {"login": "dharakk", "name": "Dharak Kharod"}}, "url": "https://github.com/apache/pinot/commit/f63074429aedae31e97bcbd00a412b418fc71a94", "committedDate": "2020-12-09T23:28:18Z", "message": "Adding offline dim table creation and assignment"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "2a0eb3703133c2cb3eacade83d3e4cfbae73e19f", "author": {"user": {"login": "dharakk", "name": "Dharak Kharod"}}, "url": "https://github.com/apache/pinot/commit/2a0eb3703133c2cb3eacade83d3e4cfbae73e19f", "committedDate": "2020-12-09T20:43:45Z", "message": "Adding offline dim table creation and assignment"}, "afterCommit": {"oid": "f63074429aedae31e97bcbd00a412b418fc71a94", "author": {"user": {"login": "dharakk", "name": "Dharak Kharod"}}, "url": "https://github.com/apache/pinot/commit/f63074429aedae31e97bcbd00a412b418fc71a94", "committedDate": "2020-12-09T23:28:18Z", "message": "Adding offline dim table creation and assignment"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1830, "cost": 1, "resetAt": "2021-10-28T18:00:02Z"}}}