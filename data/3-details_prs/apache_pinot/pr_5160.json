{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg5NjM1NzQ3", "number": 5160, "title": "Add a simple PinotFS benchmark driver", "bodyText": "This benchmark tests the performance of pinotFS operations.", "createdAt": "2020-03-17T05:41:44Z", "url": "https://github.com/apache/pinot/pull/5160", "merged": true, "mergeCommit": {"oid": "ed235d208d16d1e2a3f03c461f40bbc0df379f6c"}, "closed": true, "closedAt": "2020-03-26T01:10:08Z", "author": {"login": "snleee"}, "timelineItems": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcOcAx-gH2gAyMzg5NjM1NzQ3OjIyNjJhMDA2MjU2ZGRiMDI4ODY5N2NkNjkxZTI3YmE3MTE1YjlkNWI=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcRQjg6ABqjMxNjYxOTAxOTI=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "2262a006256ddb0288697cd691e27ba7115b9d5b", "author": {"user": {"login": "snleee", "name": "Seunghyun Lee"}}, "url": "https://github.com/apache/pinot/commit/2262a006256ddb0288697cd691e27ba7115b9d5b", "committedDate": "2020-03-17T05:39:13Z", "message": "Add a simple PinotFS benchmark driver\n\nThis benchmark tests the performance of pinotFS operations."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc2MjExODg3", "url": "https://github.com/apache/pinot/pull/5160#pullrequestreview-376211887", "createdAt": "2020-03-17T16:41:00Z", "commit": {"oid": "2262a006256ddb0288697cd691e27ba7115b9d5b"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxNjo0MTowMFrOF3ktNQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxNjo1NjoxOVrOF3lXpw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzgxNzM5Nw==", "bodyText": "Good to include the names of the directories that have been cleaned up", "url": "https://github.com/apache/pinot/pull/5160#discussion_r393817397", "createdAt": "2020-03-17T16:41:00Z", "author": {"login": "mcvsubbu"}, "path": "pinot-tools/src/main/java/org/apache/pinot/tools/filesystem/PinotFSBenchmarkDriver.java", "diffHunk": "@@ -0,0 +1,252 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.tools.filesystem;\n+\n+import com.google.common.base.Preconditions;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.RandomAccessFile;\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.security.MessageDigest;\n+import org.apache.commons.configuration.Configuration;\n+import org.apache.commons.configuration.ConfigurationException;\n+import org.apache.commons.configuration.PropertiesConfiguration;\n+import org.apache.commons.io.FileUtils;\n+import org.apache.pinot.spi.filesystem.PinotFS;\n+import org.apache.pinot.spi.filesystem.PinotFSFactory;\n+import org.apache.pinot.spi.plugin.PluginManager;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+\n+public class PinotFSBenchmarkDriver {\n+  private static final Logger LOGGER = LoggerFactory.getLogger(PinotFSBenchmarkDriver.class);\n+\n+  private static final int DEFAULT_NUM_SEGMENTS_FOR_LIST_TEST = 1000;\n+  private static final int DEFAULT_DATA_SIZE_IN_MB_FOR_COPY_TEST = 1024; // 1GB\n+  private static final int DEFAULT_RETRY = 5; // 5\n+\n+  private String _mode;\n+  private PinotFS _pinotFS;\n+  private URI _baseDirectoryUri;\n+  private File _localTempDir;\n+  private int _numSegmentsForListFilesTest;\n+  private int _dataSizeInMBsForCopyTest;\n+\n+  public PinotFSBenchmarkDriver(String mode, String configFilePath, String baseDirectoryUri, String localTempDir,\n+      Integer numSegmentsForListFilesTest, Integer dataSizeInMBsForCopyTest) throws ConfigurationException {\n+    Configuration configuration = new PropertiesConfiguration(new File(configFilePath));\n+    PinotFSFactory.init(configuration);\n+    _mode = mode;\n+    _baseDirectoryUri = URI.create(baseDirectoryUri);\n+    _pinotFS = PinotFSFactory.create(_baseDirectoryUri.getScheme());\n+    _localTempDir =\n+        (localTempDir != null) ? new File(localTempDir) : new File(FileUtils.getTempDirectory(), \"benchmark\");\n+    _numSegmentsForListFilesTest =\n+        (numSegmentsForListFilesTest != null) ? numSegmentsForListFilesTest : DEFAULT_NUM_SEGMENTS_FOR_LIST_TEST;\n+    _dataSizeInMBsForCopyTest =\n+        (dataSizeInMBsForCopyTest != null) ? dataSizeInMBsForCopyTest : DEFAULT_DATA_SIZE_IN_MB_FOR_COPY_TEST;\n+    LOGGER.info(\"PinotFS has been initialized sucessfully. (mode = {}, pinotFSClass = {}, configFile = {}, \"\n+            + \"baseDirectoryUri = {}, localTempDir = {}, numSegmentsForListFilesTest = {}, \"\n+            + \"dataSizeInMBsForCopyTest = {})\", _mode, _pinotFS.getClass().getSimpleName(), configFilePath,\n+        baseDirectoryUri, _localTempDir, _numSegmentsForListFilesTest, _dataSizeInMBsForCopyTest);\n+  }\n+\n+  public void run() throws Exception {\n+    prepareBenchmark();\n+\n+    switch (_mode.toUpperCase()) {\n+      case \"ALL\":\n+        testListFilesInMultipleDirectories();\n+        testListFiles();\n+        testCopies();\n+        break;\n+      case \"LISTFILES\":\n+        testListFiles();\n+        break;\n+      case \"COPY\":\n+        testCopies();\n+        break;\n+      default:\n+        throw new RuntimeException(\"Not Supported Mode: \" + _mode);\n+    }\n+    cleanUpBenchmark();\n+  }\n+\n+  private void prepareBenchmark() throws IOException {\n+    // Clean up base directory\n+    if (_pinotFS.exists(_baseDirectoryUri)) {\n+      _pinotFS.delete(_baseDirectoryUri, true);\n+    }\n+\n+    if (_localTempDir.exists()) {\n+      _localTempDir.delete();\n+    }\n+\n+    // Set up the base directory\n+    _pinotFS.mkdir(_baseDirectoryUri);\n+    _localTempDir.mkdir();\n+  }\n+\n+  private void cleanUpBenchmark() throws IOException {\n+    _pinotFS.delete(_baseDirectoryUri, true);\n+    FileUtils.deleteQuietly(_localTempDir);\n+    LOGGER.info(\"Working directories have been cleaned up successfully.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2262a006256ddb0288697cd691e27ba7115b9d5b"}, "originalPosition": 113}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzgyMjkwMg==", "bodyText": "why do we have these empty log messages?", "url": "https://github.com/apache/pinot/pull/5160#discussion_r393822902", "createdAt": "2020-03-17T16:48:38Z", "author": {"login": "mcvsubbu"}, "path": "pinot-tools/src/main/java/org/apache/pinot/tools/filesystem/PinotFSBenchmarkDriver.java", "diffHunk": "@@ -0,0 +1,252 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.tools.filesystem;\n+\n+import com.google.common.base.Preconditions;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.RandomAccessFile;\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.security.MessageDigest;\n+import org.apache.commons.configuration.Configuration;\n+import org.apache.commons.configuration.ConfigurationException;\n+import org.apache.commons.configuration.PropertiesConfiguration;\n+import org.apache.commons.io.FileUtils;\n+import org.apache.pinot.spi.filesystem.PinotFS;\n+import org.apache.pinot.spi.filesystem.PinotFSFactory;\n+import org.apache.pinot.spi.plugin.PluginManager;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+\n+public class PinotFSBenchmarkDriver {\n+  private static final Logger LOGGER = LoggerFactory.getLogger(PinotFSBenchmarkDriver.class);\n+\n+  private static final int DEFAULT_NUM_SEGMENTS_FOR_LIST_TEST = 1000;\n+  private static final int DEFAULT_DATA_SIZE_IN_MB_FOR_COPY_TEST = 1024; // 1GB\n+  private static final int DEFAULT_RETRY = 5; // 5\n+\n+  private String _mode;\n+  private PinotFS _pinotFS;\n+  private URI _baseDirectoryUri;\n+  private File _localTempDir;\n+  private int _numSegmentsForListFilesTest;\n+  private int _dataSizeInMBsForCopyTest;\n+\n+  public PinotFSBenchmarkDriver(String mode, String configFilePath, String baseDirectoryUri, String localTempDir,\n+      Integer numSegmentsForListFilesTest, Integer dataSizeInMBsForCopyTest) throws ConfigurationException {\n+    Configuration configuration = new PropertiesConfiguration(new File(configFilePath));\n+    PinotFSFactory.init(configuration);\n+    _mode = mode;\n+    _baseDirectoryUri = URI.create(baseDirectoryUri);\n+    _pinotFS = PinotFSFactory.create(_baseDirectoryUri.getScheme());\n+    _localTempDir =\n+        (localTempDir != null) ? new File(localTempDir) : new File(FileUtils.getTempDirectory(), \"benchmark\");\n+    _numSegmentsForListFilesTest =\n+        (numSegmentsForListFilesTest != null) ? numSegmentsForListFilesTest : DEFAULT_NUM_SEGMENTS_FOR_LIST_TEST;\n+    _dataSizeInMBsForCopyTest =\n+        (dataSizeInMBsForCopyTest != null) ? dataSizeInMBsForCopyTest : DEFAULT_DATA_SIZE_IN_MB_FOR_COPY_TEST;\n+    LOGGER.info(\"PinotFS has been initialized sucessfully. (mode = {}, pinotFSClass = {}, configFile = {}, \"\n+            + \"baseDirectoryUri = {}, localTempDir = {}, numSegmentsForListFilesTest = {}, \"\n+            + \"dataSizeInMBsForCopyTest = {})\", _mode, _pinotFS.getClass().getSimpleName(), configFilePath,\n+        baseDirectoryUri, _localTempDir, _numSegmentsForListFilesTest, _dataSizeInMBsForCopyTest);\n+  }\n+\n+  public void run() throws Exception {\n+    prepareBenchmark();\n+\n+    switch (_mode.toUpperCase()) {\n+      case \"ALL\":\n+        testListFilesInMultipleDirectories();\n+        testListFiles();\n+        testCopies();\n+        break;\n+      case \"LISTFILES\":\n+        testListFiles();\n+        break;\n+      case \"COPY\":\n+        testCopies();\n+        break;\n+      default:\n+        throw new RuntimeException(\"Not Supported Mode: \" + _mode);\n+    }\n+    cleanUpBenchmark();\n+  }\n+\n+  private void prepareBenchmark() throws IOException {\n+    // Clean up base directory\n+    if (_pinotFS.exists(_baseDirectoryUri)) {\n+      _pinotFS.delete(_baseDirectoryUri, true);\n+    }\n+\n+    if (_localTempDir.exists()) {\n+      _localTempDir.delete();\n+    }\n+\n+    // Set up the base directory\n+    _pinotFS.mkdir(_baseDirectoryUri);\n+    _localTempDir.mkdir();\n+  }\n+\n+  private void cleanUpBenchmark() throws IOException {\n+    _pinotFS.delete(_baseDirectoryUri, true);\n+    FileUtils.deleteQuietly(_localTempDir);\n+    LOGGER.info(\"Working directories have been cleaned up successfully.\");\n+  }\n+\n+  private void testListFilesInMultipleDirectories() throws Exception {\n+    LOGGER.info(\"========= List Files in Multiple Directories ==========\");\n+    long prepareTime = System.currentTimeMillis();\n+    URI listTestUri = combinePath(_baseDirectoryUri, \"listTestMultipleFile\");\n+    _pinotFS.mkdir(listTestUri);\n+    LOGGER.info(\"Created {} for list test...\", listTestUri);\n+\n+    int numDirectories = 5;\n+    int numSegments = 1;\n+    for (int i = 0; i < numDirectories; i++) {\n+      String directoryPath = \"directory_\" + i;\n+      File tmpDirectory = new File(_localTempDir.getPath(), directoryPath);\n+      URI directoryUri = combinePath(listTestUri, directoryPath);\n+      tmpDirectory.mkdir();\n+\n+      for (int j = 0; j < numSegments; j++) {\n+        String relativePath = \"segment_\" + j;\n+        File tmpFile = new File(tmpDirectory, relativePath);\n+        tmpFile.createNewFile();\n+        _pinotFS.copyFromLocalFile(tmpFile, combinePath(directoryUri, relativePath));\n+      }\n+      LOGGER.info(\"Took {} ms to create {} segments for directory_{}\",\n+          System.currentTimeMillis() - prepareTime, numSegments, i);\n+      numSegments *= 10;\n+    }\n+\n+    // reset numSegments\n+    numSegments = 1;\n+    for (int i = 0; i < numDirectories; i++) {\n+      for (int j = 0; j < DEFAULT_RETRY; j++) {\n+        URI directoryUri = combinePath(listTestUri, \"directory_\" + i);\n+        long listFilesStart = System.currentTimeMillis();\n+        String[] lists = _pinotFS.listFiles(directoryUri, true);\n+        LOGGER.info(\"{}: took {} ms to listFiles. directory_{} ({} segments)\", j,\n+            System.currentTimeMillis() - listFilesStart, i, lists.length);\n+        Preconditions.checkState(lists.length == numSegments);\n+      }\n+      numSegments *= 10;\n+      LOGGER.info(\"\");\n+    }\n+  }\n+\n+  private void testListFiles() throws Exception {\n+    LOGGER.info(\"========= List Files ==========\");\n+    long prepareTime = System.currentTimeMillis();\n+    URI listTestUri = combinePath(_baseDirectoryUri, \"listTest\");\n+    _pinotFS.mkdir(listTestUri);\n+    LOGGER.info(\"Created {} for list test...\", listTestUri);\n+\n+    for (int i = 0; i < _numSegmentsForListFilesTest; i++) {\n+      String relativePath = \"segment_\" + i;\n+      File tmpFile = new File(_localTempDir.getPath(), relativePath);\n+      tmpFile.createNewFile();\n+      _pinotFS.copyFromLocalFile(tmpFile, combinePath(listTestUri, relativePath));\n+    }\n+    LOGGER.info(\"Took {} ms to create {} segments.\",\n+        System.currentTimeMillis() - prepareTime, _numSegmentsForListFilesTest);\n+\n+    for (int i = 0; i < DEFAULT_RETRY; i++) {\n+      long listFilesStart = System.currentTimeMillis();\n+      String[] lists = _pinotFS.listFiles(listTestUri, true);\n+      LOGGER.info(\"{}: took {} ms to listFiles.\", i, System.currentTimeMillis() - listFilesStart);\n+      Preconditions.checkState(lists.length == _numSegmentsForListFilesTest);\n+    }\n+  }\n+\n+  private void testCopies() throws Exception {\n+    LOGGER.info(\"\\n========= Uploads and Downloads ==========\");\n+    URI copyTestUri = combinePath(_baseDirectoryUri, \"copyFiles\");\n+    _pinotFS.mkdir(copyTestUri);\n+    LOGGER.info(\"Created {} for copy test...\", copyTestUri);\n+\n+    long fileSizeInBytes = _dataSizeInMBsForCopyTest * 1024 * 1024;\n+    File largeTmpFile = createFileWithSize(\"largeFile\", fileSizeInBytes);\n+    for (int i = 0; i < DEFAULT_RETRY; i++) {\n+      URI largeFileDstUri = combinePath(copyTestUri, largeTmpFile.getName() + \"_\" + i);\n+      long copyStart = System.currentTimeMillis();\n+      _pinotFS.copyFromLocalFile(largeTmpFile, largeFileDstUri);\n+      LOGGER.info(\"{}: took {} ms to copyFromLocal, fileSize: {} MB.\", i, System.currentTimeMillis() - copyStart,\n+          _dataSizeInMBsForCopyTest);\n+    }\n+\n+    LOGGER.info(\"\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2262a006256ddb0288697cd691e27ba7115b9d5b"}, "originalPosition": 198}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzgyNDYwMQ==", "bodyText": "This does not seem to be retry count (I was associating the term retry with failures). DEFAULT_NUM_OPS?", "url": "https://github.com/apache/pinot/pull/5160#discussion_r393824601", "createdAt": "2020-03-17T16:51:00Z", "author": {"login": "mcvsubbu"}, "path": "pinot-tools/src/main/java/org/apache/pinot/tools/filesystem/PinotFSBenchmarkDriver.java", "diffHunk": "@@ -0,0 +1,252 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.tools.filesystem;\n+\n+import com.google.common.base.Preconditions;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.RandomAccessFile;\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.security.MessageDigest;\n+import org.apache.commons.configuration.Configuration;\n+import org.apache.commons.configuration.ConfigurationException;\n+import org.apache.commons.configuration.PropertiesConfiguration;\n+import org.apache.commons.io.FileUtils;\n+import org.apache.pinot.spi.filesystem.PinotFS;\n+import org.apache.pinot.spi.filesystem.PinotFSFactory;\n+import org.apache.pinot.spi.plugin.PluginManager;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+\n+public class PinotFSBenchmarkDriver {\n+  private static final Logger LOGGER = LoggerFactory.getLogger(PinotFSBenchmarkDriver.class);\n+\n+  private static final int DEFAULT_NUM_SEGMENTS_FOR_LIST_TEST = 1000;\n+  private static final int DEFAULT_DATA_SIZE_IN_MB_FOR_COPY_TEST = 1024; // 1GB\n+  private static final int DEFAULT_RETRY = 5; // 5", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2262a006256ddb0288697cd691e27ba7115b9d5b"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzgyNzEwNA==", "bodyText": "I suppose eventually we want to take these as an argument or config?  Otherwise maybe a static final int", "url": "https://github.com/apache/pinot/pull/5160#discussion_r393827104", "createdAt": "2020-03-17T16:54:36Z", "author": {"login": "mcvsubbu"}, "path": "pinot-tools/src/main/java/org/apache/pinot/tools/filesystem/PinotFSBenchmarkDriver.java", "diffHunk": "@@ -0,0 +1,252 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.tools.filesystem;\n+\n+import com.google.common.base.Preconditions;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.RandomAccessFile;\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.security.MessageDigest;\n+import org.apache.commons.configuration.Configuration;\n+import org.apache.commons.configuration.ConfigurationException;\n+import org.apache.commons.configuration.PropertiesConfiguration;\n+import org.apache.commons.io.FileUtils;\n+import org.apache.pinot.spi.filesystem.PinotFS;\n+import org.apache.pinot.spi.filesystem.PinotFSFactory;\n+import org.apache.pinot.spi.plugin.PluginManager;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+\n+public class PinotFSBenchmarkDriver {\n+  private static final Logger LOGGER = LoggerFactory.getLogger(PinotFSBenchmarkDriver.class);\n+\n+  private static final int DEFAULT_NUM_SEGMENTS_FOR_LIST_TEST = 1000;\n+  private static final int DEFAULT_DATA_SIZE_IN_MB_FOR_COPY_TEST = 1024; // 1GB\n+  private static final int DEFAULT_RETRY = 5; // 5\n+\n+  private String _mode;\n+  private PinotFS _pinotFS;\n+  private URI _baseDirectoryUri;\n+  private File _localTempDir;\n+  private int _numSegmentsForListFilesTest;\n+  private int _dataSizeInMBsForCopyTest;\n+\n+  public PinotFSBenchmarkDriver(String mode, String configFilePath, String baseDirectoryUri, String localTempDir,\n+      Integer numSegmentsForListFilesTest, Integer dataSizeInMBsForCopyTest) throws ConfigurationException {\n+    Configuration configuration = new PropertiesConfiguration(new File(configFilePath));\n+    PinotFSFactory.init(configuration);\n+    _mode = mode;\n+    _baseDirectoryUri = URI.create(baseDirectoryUri);\n+    _pinotFS = PinotFSFactory.create(_baseDirectoryUri.getScheme());\n+    _localTempDir =\n+        (localTempDir != null) ? new File(localTempDir) : new File(FileUtils.getTempDirectory(), \"benchmark\");\n+    _numSegmentsForListFilesTest =\n+        (numSegmentsForListFilesTest != null) ? numSegmentsForListFilesTest : DEFAULT_NUM_SEGMENTS_FOR_LIST_TEST;\n+    _dataSizeInMBsForCopyTest =\n+        (dataSizeInMBsForCopyTest != null) ? dataSizeInMBsForCopyTest : DEFAULT_DATA_SIZE_IN_MB_FOR_COPY_TEST;\n+    LOGGER.info(\"PinotFS has been initialized sucessfully. (mode = {}, pinotFSClass = {}, configFile = {}, \"\n+            + \"baseDirectoryUri = {}, localTempDir = {}, numSegmentsForListFilesTest = {}, \"\n+            + \"dataSizeInMBsForCopyTest = {})\", _mode, _pinotFS.getClass().getSimpleName(), configFilePath,\n+        baseDirectoryUri, _localTempDir, _numSegmentsForListFilesTest, _dataSizeInMBsForCopyTest);\n+  }\n+\n+  public void run() throws Exception {\n+    prepareBenchmark();\n+\n+    switch (_mode.toUpperCase()) {\n+      case \"ALL\":\n+        testListFilesInMultipleDirectories();\n+        testListFiles();\n+        testCopies();\n+        break;\n+      case \"LISTFILES\":\n+        testListFiles();\n+        break;\n+      case \"COPY\":\n+        testCopies();\n+        break;\n+      default:\n+        throw new RuntimeException(\"Not Supported Mode: \" + _mode);\n+    }\n+    cleanUpBenchmark();\n+  }\n+\n+  private void prepareBenchmark() throws IOException {\n+    // Clean up base directory\n+    if (_pinotFS.exists(_baseDirectoryUri)) {\n+      _pinotFS.delete(_baseDirectoryUri, true);\n+    }\n+\n+    if (_localTempDir.exists()) {\n+      _localTempDir.delete();\n+    }\n+\n+    // Set up the base directory\n+    _pinotFS.mkdir(_baseDirectoryUri);\n+    _localTempDir.mkdir();\n+  }\n+\n+  private void cleanUpBenchmark() throws IOException {\n+    _pinotFS.delete(_baseDirectoryUri, true);\n+    FileUtils.deleteQuietly(_localTempDir);\n+    LOGGER.info(\"Working directories have been cleaned up successfully.\");\n+  }\n+\n+  private void testListFilesInMultipleDirectories() throws Exception {\n+    LOGGER.info(\"========= List Files in Multiple Directories ==========\");\n+    long prepareTime = System.currentTimeMillis();\n+    URI listTestUri = combinePath(_baseDirectoryUri, \"listTestMultipleFile\");\n+    _pinotFS.mkdir(listTestUri);\n+    LOGGER.info(\"Created {} for list test...\", listTestUri);\n+\n+    int numDirectories = 5;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2262a006256ddb0288697cd691e27ba7115b9d5b"}, "originalPosition": 123}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzgyODI2Mw==", "bodyText": "can we call this testStartTime?", "url": "https://github.com/apache/pinot/pull/5160#discussion_r393828263", "createdAt": "2020-03-17T16:56:19Z", "author": {"login": "mcvsubbu"}, "path": "pinot-tools/src/main/java/org/apache/pinot/tools/filesystem/PinotFSBenchmarkDriver.java", "diffHunk": "@@ -0,0 +1,252 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.tools.filesystem;\n+\n+import com.google.common.base.Preconditions;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.RandomAccessFile;\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.security.MessageDigest;\n+import org.apache.commons.configuration.Configuration;\n+import org.apache.commons.configuration.ConfigurationException;\n+import org.apache.commons.configuration.PropertiesConfiguration;\n+import org.apache.commons.io.FileUtils;\n+import org.apache.pinot.spi.filesystem.PinotFS;\n+import org.apache.pinot.spi.filesystem.PinotFSFactory;\n+import org.apache.pinot.spi.plugin.PluginManager;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+\n+public class PinotFSBenchmarkDriver {\n+  private static final Logger LOGGER = LoggerFactory.getLogger(PinotFSBenchmarkDriver.class);\n+\n+  private static final int DEFAULT_NUM_SEGMENTS_FOR_LIST_TEST = 1000;\n+  private static final int DEFAULT_DATA_SIZE_IN_MB_FOR_COPY_TEST = 1024; // 1GB\n+  private static final int DEFAULT_RETRY = 5; // 5\n+\n+  private String _mode;\n+  private PinotFS _pinotFS;\n+  private URI _baseDirectoryUri;\n+  private File _localTempDir;\n+  private int _numSegmentsForListFilesTest;\n+  private int _dataSizeInMBsForCopyTest;\n+\n+  public PinotFSBenchmarkDriver(String mode, String configFilePath, String baseDirectoryUri, String localTempDir,\n+      Integer numSegmentsForListFilesTest, Integer dataSizeInMBsForCopyTest) throws ConfigurationException {\n+    Configuration configuration = new PropertiesConfiguration(new File(configFilePath));\n+    PinotFSFactory.init(configuration);\n+    _mode = mode;\n+    _baseDirectoryUri = URI.create(baseDirectoryUri);\n+    _pinotFS = PinotFSFactory.create(_baseDirectoryUri.getScheme());\n+    _localTempDir =\n+        (localTempDir != null) ? new File(localTempDir) : new File(FileUtils.getTempDirectory(), \"benchmark\");\n+    _numSegmentsForListFilesTest =\n+        (numSegmentsForListFilesTest != null) ? numSegmentsForListFilesTest : DEFAULT_NUM_SEGMENTS_FOR_LIST_TEST;\n+    _dataSizeInMBsForCopyTest =\n+        (dataSizeInMBsForCopyTest != null) ? dataSizeInMBsForCopyTest : DEFAULT_DATA_SIZE_IN_MB_FOR_COPY_TEST;\n+    LOGGER.info(\"PinotFS has been initialized sucessfully. (mode = {}, pinotFSClass = {}, configFile = {}, \"\n+            + \"baseDirectoryUri = {}, localTempDir = {}, numSegmentsForListFilesTest = {}, \"\n+            + \"dataSizeInMBsForCopyTest = {})\", _mode, _pinotFS.getClass().getSimpleName(), configFilePath,\n+        baseDirectoryUri, _localTempDir, _numSegmentsForListFilesTest, _dataSizeInMBsForCopyTest);\n+  }\n+\n+  public void run() throws Exception {\n+    prepareBenchmark();\n+\n+    switch (_mode.toUpperCase()) {\n+      case \"ALL\":\n+        testListFilesInMultipleDirectories();\n+        testListFiles();\n+        testCopies();\n+        break;\n+      case \"LISTFILES\":\n+        testListFiles();\n+        break;\n+      case \"COPY\":\n+        testCopies();\n+        break;\n+      default:\n+        throw new RuntimeException(\"Not Supported Mode: \" + _mode);\n+    }\n+    cleanUpBenchmark();\n+  }\n+\n+  private void prepareBenchmark() throws IOException {\n+    // Clean up base directory\n+    if (_pinotFS.exists(_baseDirectoryUri)) {\n+      _pinotFS.delete(_baseDirectoryUri, true);\n+    }\n+\n+    if (_localTempDir.exists()) {\n+      _localTempDir.delete();\n+    }\n+\n+    // Set up the base directory\n+    _pinotFS.mkdir(_baseDirectoryUri);\n+    _localTempDir.mkdir();\n+  }\n+\n+  private void cleanUpBenchmark() throws IOException {\n+    _pinotFS.delete(_baseDirectoryUri, true);\n+    FileUtils.deleteQuietly(_localTempDir);\n+    LOGGER.info(\"Working directories have been cleaned up successfully.\");\n+  }\n+\n+  private void testListFilesInMultipleDirectories() throws Exception {\n+    LOGGER.info(\"========= List Files in Multiple Directories ==========\");\n+    long prepareTime = System.currentTimeMillis();\n+    URI listTestUri = combinePath(_baseDirectoryUri, \"listTestMultipleFile\");\n+    _pinotFS.mkdir(listTestUri);\n+    LOGGER.info(\"Created {} for list test...\", listTestUri);\n+\n+    int numDirectories = 5;\n+    int numSegments = 1;\n+    for (int i = 0; i < numDirectories; i++) {\n+      String directoryPath = \"directory_\" + i;\n+      File tmpDirectory = new File(_localTempDir.getPath(), directoryPath);\n+      URI directoryUri = combinePath(listTestUri, directoryPath);\n+      tmpDirectory.mkdir();\n+\n+      for (int j = 0; j < numSegments; j++) {\n+        String relativePath = \"segment_\" + j;\n+        File tmpFile = new File(tmpDirectory, relativePath);\n+        tmpFile.createNewFile();\n+        _pinotFS.copyFromLocalFile(tmpFile, combinePath(directoryUri, relativePath));\n+      }\n+      LOGGER.info(\"Took {} ms to create {} segments for directory_{}\",\n+          System.currentTimeMillis() - prepareTime, numSegments, i);\n+      numSegments *= 10;\n+    }\n+\n+    // reset numSegments\n+    numSegments = 1;\n+    for (int i = 0; i < numDirectories; i++) {\n+      for (int j = 0; j < DEFAULT_RETRY; j++) {\n+        URI directoryUri = combinePath(listTestUri, \"directory_\" + i);\n+        long listFilesStart = System.currentTimeMillis();\n+        String[] lists = _pinotFS.listFiles(directoryUri, true);\n+        LOGGER.info(\"{}: took {} ms to listFiles. directory_{} ({} segments)\", j,\n+            System.currentTimeMillis() - listFilesStart, i, lists.length);\n+        Preconditions.checkState(lists.length == numSegments);\n+      }\n+      numSegments *= 10;\n+      LOGGER.info(\"\");\n+    }\n+  }\n+\n+  private void testListFiles() throws Exception {\n+    LOGGER.info(\"========= List Files ==========\");\n+    long prepareTime = System.currentTimeMillis();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2262a006256ddb0288697cd691e27ba7115b9d5b"}, "originalPosition": 160}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc4ODYwNTc2", "url": "https://github.com/apache/pinot/pull/5160#pullrequestreview-378860576", "createdAt": "2020-03-20T23:24:58Z", "commit": {"oid": "fd80bac23d4bee0329f7240da7428e22d37b5ec4"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ca924cfff6c9aedadab3babe6b9d3a8a99e6ed33", "author": {"user": {"login": "snleee", "name": "Seunghyun Lee"}}, "url": "https://github.com/apache/pinot/commit/ca924cfff6c9aedadab3babe6b9d3a8a99e6ed33", "committedDate": "2020-03-25T23:59:47Z", "message": "addressing comments"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "fd80bac23d4bee0329f7240da7428e22d37b5ec4", "author": {"user": {"login": "snleee", "name": "Seunghyun Lee"}}, "url": "https://github.com/apache/pinot/commit/fd80bac23d4bee0329f7240da7428e22d37b5ec4", "committedDate": "2020-03-19T03:50:53Z", "message": "addressing comments"}, "afterCommit": {"oid": "ca924cfff6c9aedadab3babe6b9d3a8a99e6ed33", "author": {"user": {"login": "snleee", "name": "Seunghyun Lee"}}, "url": "https://github.com/apache/pinot/commit/ca924cfff6c9aedadab3babe6b9d3a8a99e6ed33", "committedDate": "2020-03-25T23:59:47Z", "message": "addressing comments"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1408, "cost": 1, "resetAt": "2021-10-28T18:00:02Z"}}}