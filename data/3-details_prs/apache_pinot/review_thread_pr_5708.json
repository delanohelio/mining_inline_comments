{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ5NzA0MTI4", "number": 5708, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QyMDoyMDoyN1rOEPqiFA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QyMDoyMDoyN1rOEPqiFA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0ODYwOTQ4OnYy", "diffSide": "RIGHT", "path": "pinot-core/src/main/java/org/apache/pinot/core/query/aggregation/groupby/NoDictionarySingleColumnGroupKeyGenerator.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QyMDoyMDoyN1rOGzgE7w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QyMzoyODoxNVrOGzjlsQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjY1NjExMQ==", "bodyText": "This may sound like an over-optimization but adding type specific GroupKeyGenerator has the potential to add overhead for runtime dispatch which Java doesn't handle well.\nWhat is the advantage of having a type specific next method like the following for Double\n@Override\n    public GroupKey next() {\n      Double2IntMap.Entry entry = _iterator.next();\n      _groupKey._groupId = entry.getIntValue();\n      _groupKey._stringKey = Double.toString(entry.getDoubleKey());\n      return _groupKey;\n    }\n\nv/s the existing generic method\n@Override\n    public GroupKey next() {\n      Map.Entry<Object, Integer> entry = _iterator.next();\n      _groupKey._groupId = entry.getValue();\n      _groupKey._stringKey = entry.getKey().toString();\n      return _groupKey;\n    }\n\nBoth are doing toString()", "url": "https://github.com/apache/pinot/pull/5708#discussion_r456656111", "createdAt": "2020-07-17T20:20:27Z", "author": {"login": "siddharthteotia"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/query/aggregation/groupby/NoDictionarySingleColumnGroupKeyGenerator.java", "diffHunk": "@@ -163,84 +164,201 @@ public int getCurrentGroupKeyUpperBound() {\n \n   @Override\n   public Iterator<GroupKey> getUniqueGroupKeys() {\n-    return new GroupKeyIterator(_groupKeyMap);\n+    switch (_dataType) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9c693c4030b06d4408413ccf46fe4e714521557d"}, "originalPosition": 102}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjcxMzY0OQ==", "bodyText": "The main difference is from the entry-set and iterator implementation of the fastutil maps. For an example, Int2IntMap.entrySet() is marked deprecated and the class suggest using the type-specific method instead. Also, we are able to use the fastIterator() provided by the FastEntrySet, and also the unboxed values to reduce the garbage, and the unnecessary boxing/unboxing.", "url": "https://github.com/apache/pinot/pull/5708#discussion_r456713649", "createdAt": "2020-07-17T23:28:15Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/query/aggregation/groupby/NoDictionarySingleColumnGroupKeyGenerator.java", "diffHunk": "@@ -163,84 +164,201 @@ public int getCurrentGroupKeyUpperBound() {\n \n   @Override\n   public Iterator<GroupKey> getUniqueGroupKeys() {\n-    return new GroupKeyIterator(_groupKeyMap);\n+    switch (_dataType) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjY1NjExMQ=="}, "originalCommit": {"oid": "9c693c4030b06d4408413ccf46fe4e714521557d"}, "originalPosition": 102}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4123, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}