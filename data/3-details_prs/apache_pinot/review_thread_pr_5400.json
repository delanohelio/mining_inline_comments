{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE4ODk0NzUy", "number": 5400, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQyMDowMzo1MlrOD9iRdA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQwMToyMzo0M1rOD9msHQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1ODUxMjUyOnYy", "diffSide": "RIGHT", "path": "pinot-core/src/test/java/org/apache/pinot/core/segment/store/ColumnIndexDirectoryTestHelper.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQyMDowMzo1MlrOGXFuOg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQyMzoxODo1MlrOGXKjJQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjg2NDE4Ng==", "bodyText": "Might be good to rename the index variable?", "url": "https://github.com/apache/pinot/pull/5400#discussion_r426864186", "createdAt": "2020-05-18T20:03:52Z", "author": {"login": "jackjlli"}, "path": "pinot-core/src/test/java/org/apache/pinot/core/segment/store/ColumnIndexDirectoryTestHelper.java", "diffHunk": "@@ -60,11 +60,11 @@ static PinotDataBuffer getIndexBuffer(ColumnIndexDirectory columnDirectory, Stri\n   static void verifyMultipleReads(ColumnIndexDirectory columnDirectory, String column, int numIter)\n       throws Exception {\n     for (int ii = 0; ii < numIter; ii++) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f4704ae5bbabfd0a6af44cc301090af1e0a0e6d4"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjk0MzI2OQ==", "bodyText": "Done lol", "url": "https://github.com/apache/pinot/pull/5400#discussion_r426943269", "createdAt": "2020-05-18T23:18:52Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-core/src/test/java/org/apache/pinot/core/segment/store/ColumnIndexDirectoryTestHelper.java", "diffHunk": "@@ -60,11 +60,11 @@ static PinotDataBuffer getIndexBuffer(ColumnIndexDirectory columnDirectory, Stri\n   static void verifyMultipleReads(ColumnIndexDirectory columnDirectory, String column, int numIter)\n       throws Exception {\n     for (int ii = 0; ii < numIter; ii++) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjg2NDE4Ng=="}, "originalCommit": {"oid": "f4704ae5bbabfd0a6af44cc301090af1e0a0e6d4"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1OTIxMDE1OnYy", "diffSide": "RIGHT", "path": "pinot-core/src/main/java/org/apache/pinot/core/io/reader/impl/v1/BaseChunkSingleValueReader.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQwMTowODozM1rOGXMYzA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQwMjoyNDoxNVrOGXNlCQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjk3MzM4OA==", "bodyText": "The version was made into a member variable so that when we add or bump the version it is available to derived classes. Not sure why you removed it.\nRecently we made a version bump and it was painful  and re-factoring had to be done. Some background in PR #5285", "url": "https://github.com/apache/pinot/pull/5400#discussion_r426973388", "createdAt": "2020-05-19T01:08:33Z", "author": {"login": "mcvsubbu"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/io/reader/impl/v1/BaseChunkSingleValueReader.java", "diffHunk": "@@ -75,7 +67,7 @@ public BaseChunkSingleValueReader(PinotDataBuffer pinotDataBuffer) {\n     headerOffset += Integer.BYTES;\n \n     int dataHeaderStart = headerOffset;\n-    if (_version > 1) {\n+    if (version > 1) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "91d46b5af7eb663c2df323d24307703af2211db4"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjk5MjkwNQ==", "bodyText": "It is not used anywhere, and IDE will have warning and can auto convert it to local.\nI don't see why this can affect version bump as long as you have the version information inside the data buffer.", "url": "https://github.com/apache/pinot/pull/5400#discussion_r426992905", "createdAt": "2020-05-19T02:24:15Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/io/reader/impl/v1/BaseChunkSingleValueReader.java", "diffHunk": "@@ -75,7 +67,7 @@ public BaseChunkSingleValueReader(PinotDataBuffer pinotDataBuffer) {\n     headerOffset += Integer.BYTES;\n \n     int dataHeaderStart = headerOffset;\n-    if (_version > 1) {\n+    if (version > 1) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjk3MzM4OA=="}, "originalCommit": {"oid": "91d46b5af7eb663c2df323d24307703af2211db4"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1OTIyOTAyOnYy", "diffSide": "RIGHT", "path": "pinot-core/src/main/java/org/apache/pinot/core/io/readerwriter/impl/FixedByteSingleColumnMultiValueReaderWriter.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQwMToxOTo0MVrOGXMkEg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQwMjoyNDo0NFrOGXNlZw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjk3NjI3NA==", "bodyText": "Not sure I understand this. is headerBuffer(s) alllocated here closed anywhere? Same q with databBuffers . The reader and writer classes we construct here do not close these buffers, right?", "url": "https://github.com/apache/pinot/pull/5400#discussion_r426976274", "createdAt": "2020-05-19T01:19:41Z", "author": {"login": "mcvsubbu"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/io/readerwriter/impl/FixedByteSingleColumnMultiValueReaderWriter.java", "diffHunk": "@@ -132,47 +129,40 @@ public FixedByteSingleColumnMultiValueReaderWriter(int maxNumberOfMultiValuesPer\n     _maxNumberOfMultiValuesPerRow = maxNumberOfMultiValuesPerRow;\n     _headerSize = rowCountPerChunk * SIZE_OF_INT * NUM_COLS_IN_HEADER;\n     _rowCountPerChunk = rowCountPerChunk;\n-    addHeaderBuffers();\n+    addHeaderBuffer();\n     //at least create space for million entries, which for INT translates into 4mb buffer\n     _incrementalCapacity = incrementalCapacity;\n-    addDataBuffers(initialCapacity);\n+    addDataBuffer(initialCapacity);\n     //init(_rowCountPerChunk, _columnSizeInBytes, _maxNumberOfMultiValuesPerRow, initialCapacity, _incrementalCapacity);\n   }\n \n-  private void addHeaderBuffers() {\n+  private void addHeaderBuffer() {\n     LOGGER.info(\"Allocating header buffer of size {} for: {}\", _headerSize, _context);\n-    _headerBuffer = _memoryManager.allocate(_headerSize, _context);\n+    // NOTE: PinotDataBuffer is tracked in the PinotDataBufferMemoryManager. No need to track it inside the class.\n+    PinotDataBuffer headerBuffer = _memoryManager.allocate(_headerSize, _context);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "91d46b5af7eb663c2df323d24307703af2211db4"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjk5Mjk5OQ==", "bodyText": "MemoryManager allocates and tracks all the buffers. It releases them when the segment is closed.", "url": "https://github.com/apache/pinot/pull/5400#discussion_r426992999", "createdAt": "2020-05-19T02:24:44Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/io/readerwriter/impl/FixedByteSingleColumnMultiValueReaderWriter.java", "diffHunk": "@@ -132,47 +129,40 @@ public FixedByteSingleColumnMultiValueReaderWriter(int maxNumberOfMultiValuesPer\n     _maxNumberOfMultiValuesPerRow = maxNumberOfMultiValuesPerRow;\n     _headerSize = rowCountPerChunk * SIZE_OF_INT * NUM_COLS_IN_HEADER;\n     _rowCountPerChunk = rowCountPerChunk;\n-    addHeaderBuffers();\n+    addHeaderBuffer();\n     //at least create space for million entries, which for INT translates into 4mb buffer\n     _incrementalCapacity = incrementalCapacity;\n-    addDataBuffers(initialCapacity);\n+    addDataBuffer(initialCapacity);\n     //init(_rowCountPerChunk, _columnSizeInBytes, _maxNumberOfMultiValuesPerRow, initialCapacity, _incrementalCapacity);\n   }\n \n-  private void addHeaderBuffers() {\n+  private void addHeaderBuffer() {\n     LOGGER.info(\"Allocating header buffer of size {} for: {}\", _headerSize, _context);\n-    _headerBuffer = _memoryManager.allocate(_headerSize, _context);\n+    // NOTE: PinotDataBuffer is tracked in the PinotDataBufferMemoryManager. No need to track it inside the class.\n+    PinotDataBuffer headerBuffer = _memoryManager.allocate(_headerSize, _context);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjk3NjI3NA=="}, "originalCommit": {"oid": "91d46b5af7eb663c2df323d24307703af2211db4"}, "originalPosition": 64}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1OTIzNjEzOnYy", "diffSide": "RIGHT", "path": "pinot-core/src/main/java/org/apache/pinot/core/io/readerwriter/impl/FixedByteSingleColumnSingleValueReaderWriter.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQwMToyMzo0M1rOGXMoQw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQwMjoyNTo1OVrOGXNm2w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjk3NzM0Nw==", "bodyText": "when are these closed?", "url": "https://github.com/apache/pinot/pull/5400#discussion_r426977347", "createdAt": "2020-05-19T01:23:43Z", "author": {"login": "mcvsubbu"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/io/readerwriter/impl/FixedByteSingleColumnSingleValueReaderWriter.java", "diffHunk": "@@ -176,18 +173,15 @@ private int getBufferId(int row) {\n \n   private void addBuffer() {\n     LOGGER.info(\"Allocating {} bytes for: {}\", _chunkSizeInBytes, _allocationContext);\n+    // NOTE: PinotDataBuffer is tracked in the PinotDataBufferMemoryManager. No need to track it inside the class.\n     PinotDataBuffer buffer = _memoryManager.allocate(_chunkSizeInBytes, _allocationContext);\n-    _dataBuffers.add(buffer);\n+    _writers.add(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "91d46b5af7eb663c2df323d24307703af2211db4"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjk5MzM3MQ==", "bodyText": "In MutableSegmentImpl.destroy() where memory manager is closed as the last step.", "url": "https://github.com/apache/pinot/pull/5400#discussion_r426993371", "createdAt": "2020-05-19T02:25:59Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/io/readerwriter/impl/FixedByteSingleColumnSingleValueReaderWriter.java", "diffHunk": "@@ -176,18 +173,15 @@ private int getBufferId(int row) {\n \n   private void addBuffer() {\n     LOGGER.info(\"Allocating {} bytes for: {}\", _chunkSizeInBytes, _allocationContext);\n+    // NOTE: PinotDataBuffer is tracked in the PinotDataBufferMemoryManager. No need to track it inside the class.\n     PinotDataBuffer buffer = _memoryManager.allocate(_chunkSizeInBytes, _allocationContext);\n-    _dataBuffers.add(buffer);\n+    _writers.add(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjk3NzM0Nw=="}, "originalCommit": {"oid": "91d46b5af7eb663c2df323d24307703af2211db4"}, "originalPosition": 40}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4443, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}