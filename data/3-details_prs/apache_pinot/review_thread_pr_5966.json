{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDc4MzExMDQz", "number": 5966, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxNzoyNDo0OVrOEhyA8g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQxODo0NzoxOFrOEiP64w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzODU3OTA2OnYy", "diffSide": "RIGHT", "path": "pinot-controller/src/main/java/org/apache/pinot/controller/api/resources/PinotSchemaRestletResource.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxNzoyNDo0OVrOHPSaQA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQxNzoyNjo1M1rOHP-XJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTc5MjMyMA==", "bodyText": "I wonder if this (along with the getTableConfigsForSchema function) can be moved inside validate ? So that the caller doesn't have to do this every single time (and can be done implicitly)", "url": "https://github.com/apache/pinot/pull/5966#discussion_r485792320", "createdAt": "2020-09-09T17:24:49Z", "author": {"login": "icefury71"}, "path": "pinot-controller/src/main/java/org/apache/pinot/controller/api/resources/PinotSchemaRestletResource.java", "diffHunk": "@@ -171,7 +173,8 @@ public SuccessResponse addSchema(\n   public String validateSchema(FormDataMultiPart multiPart) {\n     Schema schema = getSchemaFromMultiPart(multiPart);\n     try {\n-      SchemaUtils.validate(schema);\n+      List<TableConfig> tableConfigs = getTableConfigsForSchema(schema.getSchemaName());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6607291a6cf0f58cedbc9e275003147cde055b90"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjQ4ODk3Mg==", "bodyText": "i thought about that. I was just trying to avoid passing pinotHelixResourceManager to the utils methods. I can change it to that if you think that's better. I was going back and forth about it", "url": "https://github.com/apache/pinot/pull/5966#discussion_r486488972", "createdAt": "2020-09-10T16:47:25Z", "author": {"login": "npawar"}, "path": "pinot-controller/src/main/java/org/apache/pinot/controller/api/resources/PinotSchemaRestletResource.java", "diffHunk": "@@ -171,7 +173,8 @@ public SuccessResponse addSchema(\n   public String validateSchema(FormDataMultiPart multiPart) {\n     Schema schema = getSchemaFromMultiPart(multiPart);\n     try {\n-      SchemaUtils.validate(schema);\n+      List<TableConfig> tableConfigs = getTableConfigsForSchema(schema.getSchemaName());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTc5MjMyMA=="}, "originalCommit": {"oid": "6607291a6cf0f58cedbc9e275003147cde055b90"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjQ5NzQ3MQ==", "bodyText": "Actually, as I tried to do this, I realized that PinotHelixResourceManager is in pinot-controller, and the utils (which are in pinot-core) do not have access to it. We'd have to pass propertyStore, or change the design of SchemaUtils so we can inject and keep state.\nNow I think it's better that the caller fetches what it needs. Practically,  PinotTableRestletResource and PinotSchemaRestletResource should be the only places adding/modifying table/schema.", "url": "https://github.com/apache/pinot/pull/5966#discussion_r486497471", "createdAt": "2020-09-10T17:01:21Z", "author": {"login": "npawar"}, "path": "pinot-controller/src/main/java/org/apache/pinot/controller/api/resources/PinotSchemaRestletResource.java", "diffHunk": "@@ -171,7 +173,8 @@ public SuccessResponse addSchema(\n   public String validateSchema(FormDataMultiPart multiPart) {\n     Schema schema = getSchemaFromMultiPart(multiPart);\n     try {\n-      SchemaUtils.validate(schema);\n+      List<TableConfig> tableConfigs = getTableConfigsForSchema(schema.getSchemaName());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTc5MjMyMA=="}, "originalCommit": {"oid": "6607291a6cf0f58cedbc9e275003147cde055b90"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjUxMjQyMA==", "bodyText": "Understood. Thanks for looking into this.", "url": "https://github.com/apache/pinot/pull/5966#discussion_r486512420", "createdAt": "2020-09-10T17:26:53Z", "author": {"login": "icefury71"}, "path": "pinot-controller/src/main/java/org/apache/pinot/controller/api/resources/PinotSchemaRestletResource.java", "diffHunk": "@@ -171,7 +173,8 @@ public SuccessResponse addSchema(\n   public String validateSchema(FormDataMultiPart multiPart) {\n     Schema schema = getSchemaFromMultiPart(multiPart);\n     try {\n-      SchemaUtils.validate(schema);\n+      List<TableConfig> tableConfigs = getTableConfigsForSchema(schema.getSchemaName());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTc5MjMyMA=="}, "originalCommit": {"oid": "6607291a6cf0f58cedbc9e275003147cde055b90"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzODU4NDcxOnYy", "diffSide": "RIGHT", "path": "pinot-controller/src/main/java/org/apache/pinot/controller/api/resources/PinotTableIndexingConfigs.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxNzoyNjoyMFrOHPSd0Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxNzoyNjoyMFrOHPSd0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTc5MzIzMw==", "bodyText": "Same here", "url": "https://github.com/apache/pinot/pull/5966#discussion_r485793233", "createdAt": "2020-09-09T17:26:20Z", "author": {"login": "icefury71"}, "path": "pinot-controller/src/main/java/org/apache/pinot/controller/api/resources/PinotTableIndexingConfigs.java", "diffHunk": "@@ -58,7 +59,8 @@ public SuccessResponse updateIndexingConfig(\n     TableConfig tableConfig;\n     try {\n       tableConfig = JsonUtils.stringToObject(tableConfigString, TableConfig.class);\n-      TableConfigUtils.validate(tableConfig);\n+      Schema schema = pinotHelixResourceManager.getSchemaForTableConfig(tableConfig);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6607291a6cf0f58cedbc9e275003147cde055b90"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzODYwMzUyOnYy", "diffSide": "RIGHT", "path": "pinot-core/src/main/java/org/apache/pinot/core/util/TableConfigUtils.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxNzozMToyNVrOHPSp4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQxNjozNDowNlrOHP8bOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTc5NjMyMg==", "bodyText": "Curious - how is this related to time column field validation ?", "url": "https://github.com/apache/pinot/pull/5966#discussion_r485796322", "createdAt": "2020-09-09T17:31:25Z", "author": {"login": "icefury71"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/util/TableConfigUtils.java", "diffHunk": "@@ -74,19 +80,37 @@ public static void validateTableName(TableConfig tableConfig) {\n     }\n   }\n \n-  private static void validateValidationConfig(TableConfig tableConfig) {\n+  /**\n+   * Validates the following in the validationConfig of the table\n+   * 1. For REALTIME table\n+   * - checks for non-null timeColumnName\n+   * - checks for valid field spec for timeColumnName in schema\n+   *\n+   * 2. For OFFLINE table\n+   * - checks for valid field spec for timeColumnName in schema, if timeColumnName and schema re non-null\n+   *\n+   * 3. Checks peerDownloadSchema\n+   */\n+  private static void validateValidationConfig(TableConfig tableConfig, @Nullable Schema schema) {\n     SegmentsValidationAndRetentionConfig validationConfig = tableConfig.getValidationConfig();\n-    if (validationConfig != null) {\n-      if (tableConfig.getTableType() == TableType.REALTIME && validationConfig.getTimeColumnName() == null) {\n-        throw new IllegalStateException(\"Must provide time column in real-time table config\");\n-      }\n-      String peerSegmentDownloadScheme = validationConfig.getPeerSegmentDownloadScheme();\n-      if (peerSegmentDownloadScheme != null) {\n-        if (!CommonConstants.HTTP_PROTOCOL.equalsIgnoreCase(peerSegmentDownloadScheme)\n-            && !CommonConstants.HTTPS_PROTOCOL.equalsIgnoreCase(peerSegmentDownloadScheme)) {\n-          throw new IllegalStateException(\"Invalid value '\" + peerSegmentDownloadScheme\n-              + \"' for peerSegmentDownloadScheme. Must be one of http nor https\");\n-        }\n+    String timeColumnName = validationConfig.getTimeColumnName();\n+    if (tableConfig.getTableType() == TableType.REALTIME) {\n+      // For REALTIME table, must have a non-null timeColumnName\n+      Preconditions.checkState(timeColumnName != null, \"'timeColumnName' cannot be null in REALTIME table config\");\n+    }\n+    // timeColumnName can be null in OFFLINE table\n+    if (timeColumnName != null && schema != null) {\n+      Preconditions.checkState(schema.getSpecForTimeColumn(timeColumnName) != null,\n+          \"Cannot find valid fieldSpec for timeColumn: %s from the table config, in the schema: %s\", timeColumnName,\n+          schema.getSchemaName());\n+    }\n+\n+    String peerSegmentDownloadScheme = validationConfig.getPeerSegmentDownloadScheme();\n+    if (peerSegmentDownloadScheme != null) {\n+      if (!CommonConstants.HTTP_PROTOCOL.equalsIgnoreCase(peerSegmentDownloadScheme) && !CommonConstants.HTTPS_PROTOCOL", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6607291a6cf0f58cedbc9e275003147cde055b90"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjQ4MDY5Nw==", "bodyText": "This part was already present in the validateValidationConfig method (line 84 in the before diff)", "url": "https://github.com/apache/pinot/pull/5966#discussion_r486480697", "createdAt": "2020-09-10T16:34:06Z", "author": {"login": "npawar"}, "path": "pinot-core/src/main/java/org/apache/pinot/core/util/TableConfigUtils.java", "diffHunk": "@@ -74,19 +80,37 @@ public static void validateTableName(TableConfig tableConfig) {\n     }\n   }\n \n-  private static void validateValidationConfig(TableConfig tableConfig) {\n+  /**\n+   * Validates the following in the validationConfig of the table\n+   * 1. For REALTIME table\n+   * - checks for non-null timeColumnName\n+   * - checks for valid field spec for timeColumnName in schema\n+   *\n+   * 2. For OFFLINE table\n+   * - checks for valid field spec for timeColumnName in schema, if timeColumnName and schema re non-null\n+   *\n+   * 3. Checks peerDownloadSchema\n+   */\n+  private static void validateValidationConfig(TableConfig tableConfig, @Nullable Schema schema) {\n     SegmentsValidationAndRetentionConfig validationConfig = tableConfig.getValidationConfig();\n-    if (validationConfig != null) {\n-      if (tableConfig.getTableType() == TableType.REALTIME && validationConfig.getTimeColumnName() == null) {\n-        throw new IllegalStateException(\"Must provide time column in real-time table config\");\n-      }\n-      String peerSegmentDownloadScheme = validationConfig.getPeerSegmentDownloadScheme();\n-      if (peerSegmentDownloadScheme != null) {\n-        if (!CommonConstants.HTTP_PROTOCOL.equalsIgnoreCase(peerSegmentDownloadScheme)\n-            && !CommonConstants.HTTPS_PROTOCOL.equalsIgnoreCase(peerSegmentDownloadScheme)) {\n-          throw new IllegalStateException(\"Invalid value '\" + peerSegmentDownloadScheme\n-              + \"' for peerSegmentDownloadScheme. Must be one of http nor https\");\n-        }\n+    String timeColumnName = validationConfig.getTimeColumnName();\n+    if (tableConfig.getTableType() == TableType.REALTIME) {\n+      // For REALTIME table, must have a non-null timeColumnName\n+      Preconditions.checkState(timeColumnName != null, \"'timeColumnName' cannot be null in REALTIME table config\");\n+    }\n+    // timeColumnName can be null in OFFLINE table\n+    if (timeColumnName != null && schema != null) {\n+      Preconditions.checkState(schema.getSpecForTimeColumn(timeColumnName) != null,\n+          \"Cannot find valid fieldSpec for timeColumn: %s from the table config, in the schema: %s\", timeColumnName,\n+          schema.getSchemaName());\n+    }\n+\n+    String peerSegmentDownloadScheme = validationConfig.getPeerSegmentDownloadScheme();\n+    if (peerSegmentDownloadScheme != null) {\n+      if (!CommonConstants.HTTP_PROTOCOL.equalsIgnoreCase(peerSegmentDownloadScheme) && !CommonConstants.HTTPS_PROTOCOL", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTc5NjMyMg=="}, "originalCommit": {"oid": "6607291a6cf0f58cedbc9e275003147cde055b90"}, "originalPosition": 70}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzODYyNTAyOnYy", "diffSide": "RIGHT", "path": "pinot-core/src/test/java/org/apache/pinot/core/util/SchemaUtilsTest.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxNzozODowMFrOHPS31A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQxOTozNjowMlrOHQC-gw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTc5OTg5Mg==", "bodyText": "nit: wrap with try-catch for future proofing ?", "url": "https://github.com/apache/pinot/pull/5966#discussion_r485799892", "createdAt": "2020-09-09T17:38:00Z", "author": {"login": "icefury71"}, "path": "pinot-core/src/test/java/org/apache/pinot/core/util/SchemaUtilsTest.java", "diffHunk": "@@ -35,6 +43,115 @@\n  */\n public class SchemaUtilsTest {\n \n+  private static final String TABLE_NAME = \"testTable\";\n+  private static final String TIME_COLUMN = \"timeColumn\";\n+\n+  @Test\n+  public void testCompatibilityWithTableConfig() {\n+    // empty list\n+    List<TableConfig> tableConfigs = new ArrayList<>();\n+    Schema schema = new Schema.SchemaBuilder().setSchemaName(TABLE_NAME).build();\n+    SchemaUtils.validate(schema, tableConfigs);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6607291a6cf0f58cedbc9e275003147cde055b90"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjQ4NDM2NQ==", "bodyText": "do you mean a case where the schema becomes invalid, but we pass the test anyway because of not having a try-catch?\nJust to be sure, I tried this out. The test fails if there's any exception in the should-pass cases.\nLmk if you were referring to something else.", "url": "https://github.com/apache/pinot/pull/5966#discussion_r486484365", "createdAt": "2020-09-10T16:39:56Z", "author": {"login": "npawar"}, "path": "pinot-core/src/test/java/org/apache/pinot/core/util/SchemaUtilsTest.java", "diffHunk": "@@ -35,6 +43,115 @@\n  */\n public class SchemaUtilsTest {\n \n+  private static final String TABLE_NAME = \"testTable\";\n+  private static final String TIME_COLUMN = \"timeColumn\";\n+\n+  @Test\n+  public void testCompatibilityWithTableConfig() {\n+    // empty list\n+    List<TableConfig> tableConfigs = new ArrayList<>();\n+    Schema schema = new Schema.SchemaBuilder().setSchemaName(TABLE_NAME).build();\n+    SchemaUtils.validate(schema, tableConfigs);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTc5OTg5Mg=="}, "originalCommit": {"oid": "6607291a6cf0f58cedbc9e275003147cde055b90"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjU4ODAzNQ==", "bodyText": "I meant catching exception and explicitly 'fail'ing. It's fine though - just a nit.", "url": "https://github.com/apache/pinot/pull/5966#discussion_r486588035", "createdAt": "2020-09-10T19:36:02Z", "author": {"login": "icefury71"}, "path": "pinot-core/src/test/java/org/apache/pinot/core/util/SchemaUtilsTest.java", "diffHunk": "@@ -35,6 +43,115 @@\n  */\n public class SchemaUtilsTest {\n \n+  private static final String TABLE_NAME = \"testTable\";\n+  private static final String TIME_COLUMN = \"timeColumn\";\n+\n+  @Test\n+  public void testCompatibilityWithTableConfig() {\n+    // empty list\n+    List<TableConfig> tableConfigs = new ArrayList<>();\n+    Schema schema = new Schema.SchemaBuilder().setSchemaName(TABLE_NAME).build();\n+    SchemaUtils.validate(schema, tableConfigs);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTc5OTg5Mg=="}, "originalCommit": {"oid": "6607291a6cf0f58cedbc9e275003147cde055b90"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzODYyNTk3OnYy", "diffSide": "RIGHT", "path": "pinot-core/src/test/java/org/apache/pinot/core/util/SchemaUtilsTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxNzozODoxN1rOHPS4bA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxNzozODoxN1rOHPS4bA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTgwMDA0NA==", "bodyText": "Same here", "url": "https://github.com/apache/pinot/pull/5966#discussion_r485800044", "createdAt": "2020-09-09T17:38:17Z", "author": {"login": "icefury71"}, "path": "pinot-core/src/test/java/org/apache/pinot/core/util/SchemaUtilsTest.java", "diffHunk": "@@ -35,6 +43,115 @@\n  */\n public class SchemaUtilsTest {\n \n+  private static final String TABLE_NAME = \"testTable\";\n+  private static final String TIME_COLUMN = \"timeColumn\";\n+\n+  @Test\n+  public void testCompatibilityWithTableConfig() {\n+    // empty list\n+    List<TableConfig> tableConfigs = new ArrayList<>();\n+    Schema schema = new Schema.SchemaBuilder().setSchemaName(TABLE_NAME).build();\n+    SchemaUtils.validate(schema, tableConfigs);\n+\n+    // offline table\n+    // null timeColumnName\n+    TableConfig tableConfig = new TableConfigBuilder(TableType.OFFLINE).setTableName(TABLE_NAME).build();\n+    SchemaUtils.validate(schema, Lists.newArrayList(tableConfig));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6607291a6cf0f58cedbc9e275003147cde055b90"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0MzQ3ODc1OnYy", "diffSide": "RIGHT", "path": "pinot-controller/src/main/java/org/apache/pinot/controller/api/resources/PinotSchemaRestletResource.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQxODo0NzoxOFrOHQBZSQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQyMDowMzoxMFrOHQDy6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjU2MjEyMQ==", "bodyText": "schemaName should never be null", "url": "https://github.com/apache/pinot/pull/5966#discussion_r486562121", "createdAt": "2020-09-10T18:47:18Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-controller/src/main/java/org/apache/pinot/controller/api/resources/PinotSchemaRestletResource.java", "diffHunk": "@@ -318,4 +324,19 @@ private void deleteSchemaInternal(String schemaName) {\n           Response.Status.INTERNAL_SERVER_ERROR);\n     }\n   }\n+\n+  private List<TableConfig> getTableConfigsForSchema(@Nullable String schemaName) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6607291a6cf0f58cedbc9e275003147cde055b90"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjU2Mzg3NQ==", "bodyText": "Wondering if we can move this method into PinotHelixResourceManager?", "url": "https://github.com/apache/pinot/pull/5966#discussion_r486563875", "createdAt": "2020-09-10T18:50:30Z", "author": {"login": "Jackie-Jiang"}, "path": "pinot-controller/src/main/java/org/apache/pinot/controller/api/resources/PinotSchemaRestletResource.java", "diffHunk": "@@ -318,4 +324,19 @@ private void deleteSchemaInternal(String schemaName) {\n           Response.Status.INTERNAL_SERVER_ERROR);\n     }\n   }\n+\n+  private List<TableConfig> getTableConfigsForSchema(@Nullable String schemaName) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjU2MjEyMQ=="}, "originalCommit": {"oid": "6607291a6cf0f58cedbc9e275003147cde055b90"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjYwMTQ1MA==", "bodyText": "yes, done", "url": "https://github.com/apache/pinot/pull/5966#discussion_r486601450", "createdAt": "2020-09-10T20:03:10Z", "author": {"login": "npawar"}, "path": "pinot-controller/src/main/java/org/apache/pinot/controller/api/resources/PinotSchemaRestletResource.java", "diffHunk": "@@ -318,4 +324,19 @@ private void deleteSchemaInternal(String schemaName) {\n           Response.Status.INTERNAL_SERVER_ERROR);\n     }\n   }\n+\n+  private List<TableConfig> getTableConfigsForSchema(@Nullable String schemaName) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjU2MjEyMQ=="}, "originalCommit": {"oid": "6607291a6cf0f58cedbc9e275003147cde055b90"}, "originalPosition": 79}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3835, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}