{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA4MDYzNjkx", "number": 5293, "reviewThreads": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNlQxOTo0NDozNVrOD2YwxA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNjo1MTo0NFrOD8JxUw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4MzU1Mzk2OnYy", "diffSide": "RIGHT", "path": "pinot-plugins/pinot-input-format/pinot-protobuf/src/main/java/org/apache/pinot/plugin/inputformat/protobuf/ProtoBufRecordReader.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNlQxOTo0NDozNVrOGMJHQA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOVQwNzozMDowNlrOGS5KKQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTM4NTQwOA==", "bodyText": "extract this to a separate method, try to get it based on URI\n\nfile:<absolute_path>\nclasspath:\nhttp://uri\nThis function can be used in multiple places.", "url": "https://github.com/apache/pinot/pull/5293#discussion_r415385408", "createdAt": "2020-04-26T19:44:35Z", "author": {"login": "kishoreg"}, "path": "pinot-plugins/pinot-input-format/pinot-protobuf/src/main/java/org/apache/pinot/plugin/inputformat/protobuf/ProtoBufRecordReader.java", "diffHunk": "@@ -0,0 +1,136 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.plugin.inputformat.protobuf;\n+\n+import com.google.protobuf.DescriptorProtos;\n+import com.google.protobuf.Descriptors;\n+import com.google.protobuf.DynamicMessage;\n+import com.google.protobuf.Message;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.util.Set;\n+import javax.annotation.Nullable;\n+import org.apache.pinot.spi.data.Schema;\n+import org.apache.pinot.spi.data.readers.GenericRow;\n+import org.apache.pinot.spi.data.readers.RecordReader;\n+import org.apache.pinot.spi.data.readers.RecordReaderConfig;\n+import org.apache.pinot.spi.data.readers.RecordReaderUtils;\n+import org.apache.pinot.spi.utils.SchemaFieldExtractorUtils;\n+\n+\n+public class ProtoBufRecordReader implements RecordReader {\n+  private File _dataFile;\n+  private Schema _schema;\n+  private ProtoBufRecordExtractor _recordExtractor;\n+\n+  private InputStream _inputStream;\n+  private boolean _hasNext;\n+  private Descriptors.Descriptor _descriptor;\n+\n+  private boolean hasMoreToRead()\n+      throws IOException {\n+    _inputStream.mark(1);\n+    int nextByte = _inputStream.read();\n+    _inputStream.reset();\n+    return nextByte != -1;\n+  }\n+\n+  private void init()\n+      throws IOException {\n+    _inputStream = RecordReaderUtils.getBufferedInputStream(_dataFile);\n+    try {\n+      _hasNext = hasMoreToRead();\n+    } catch (Exception e) {\n+      _inputStream.close();\n+      throw e;\n+    }\n+  }\n+\n+  @Override\n+  public void init(File dataFile, Schema schema, @Nullable RecordReaderConfig recordReaderConfig)\n+      throws IOException {\n+    _dataFile = dataFile;\n+    _schema = schema;\n+    Set<String> sourceFields = SchemaFieldExtractorUtils.extract(schema);\n+    ProtoBufRecordExtractorConfig recordExtractorConfig = new ProtoBufRecordExtractorConfig();\n+    ProtoBufRecordReaderConfig protoBufRecordReaderConfig = (ProtoBufRecordReaderConfig) recordReaderConfig;\n+    String descriptorFile = protoBufRecordReaderConfig.getDescriptorFile();\n+    FileInputStream fin = new FileInputStream(descriptorFile);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5927bffd191a00a49c3da463d7468c7dfa37cc76"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTkzNjkxMA==", "bodyText": "What is the need for classpath?", "url": "https://github.com/apache/pinot/pull/5293#discussion_r415936910", "createdAt": "2020-04-27T15:55:40Z", "author": {"login": "KKcorps"}, "path": "pinot-plugins/pinot-input-format/pinot-protobuf/src/main/java/org/apache/pinot/plugin/inputformat/protobuf/ProtoBufRecordReader.java", "diffHunk": "@@ -0,0 +1,136 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.plugin.inputformat.protobuf;\n+\n+import com.google.protobuf.DescriptorProtos;\n+import com.google.protobuf.Descriptors;\n+import com.google.protobuf.DynamicMessage;\n+import com.google.protobuf.Message;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.util.Set;\n+import javax.annotation.Nullable;\n+import org.apache.pinot.spi.data.Schema;\n+import org.apache.pinot.spi.data.readers.GenericRow;\n+import org.apache.pinot.spi.data.readers.RecordReader;\n+import org.apache.pinot.spi.data.readers.RecordReaderConfig;\n+import org.apache.pinot.spi.data.readers.RecordReaderUtils;\n+import org.apache.pinot.spi.utils.SchemaFieldExtractorUtils;\n+\n+\n+public class ProtoBufRecordReader implements RecordReader {\n+  private File _dataFile;\n+  private Schema _schema;\n+  private ProtoBufRecordExtractor _recordExtractor;\n+\n+  private InputStream _inputStream;\n+  private boolean _hasNext;\n+  private Descriptors.Descriptor _descriptor;\n+\n+  private boolean hasMoreToRead()\n+      throws IOException {\n+    _inputStream.mark(1);\n+    int nextByte = _inputStream.read();\n+    _inputStream.reset();\n+    return nextByte != -1;\n+  }\n+\n+  private void init()\n+      throws IOException {\n+    _inputStream = RecordReaderUtils.getBufferedInputStream(_dataFile);\n+    try {\n+      _hasNext = hasMoreToRead();\n+    } catch (Exception e) {\n+      _inputStream.close();\n+      throw e;\n+    }\n+  }\n+\n+  @Override\n+  public void init(File dataFile, Schema schema, @Nullable RecordReaderConfig recordReaderConfig)\n+      throws IOException {\n+    _dataFile = dataFile;\n+    _schema = schema;\n+    Set<String> sourceFields = SchemaFieldExtractorUtils.extract(schema);\n+    ProtoBufRecordExtractorConfig recordExtractorConfig = new ProtoBufRecordExtractorConfig();\n+    ProtoBufRecordReaderConfig protoBufRecordReaderConfig = (ProtoBufRecordReaderConfig) recordReaderConfig;\n+    String descriptorFile = protoBufRecordReaderConfig.getDescriptorFile();\n+    FileInputStream fin = new FileInputStream(descriptorFile);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTM4NTQwOA=="}, "originalCommit": {"oid": "5927bffd191a00a49c3da463d7468c7dfa37cc76"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDYwMDU2OQ==", "bodyText": "that allows them to provide relative path in the config", "url": "https://github.com/apache/pinot/pull/5293#discussion_r420600569", "createdAt": "2020-05-06T07:42:21Z", "author": {"login": "kishoreg"}, "path": "pinot-plugins/pinot-input-format/pinot-protobuf/src/main/java/org/apache/pinot/plugin/inputformat/protobuf/ProtoBufRecordReader.java", "diffHunk": "@@ -0,0 +1,136 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.plugin.inputformat.protobuf;\n+\n+import com.google.protobuf.DescriptorProtos;\n+import com.google.protobuf.Descriptors;\n+import com.google.protobuf.DynamicMessage;\n+import com.google.protobuf.Message;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.util.Set;\n+import javax.annotation.Nullable;\n+import org.apache.pinot.spi.data.Schema;\n+import org.apache.pinot.spi.data.readers.GenericRow;\n+import org.apache.pinot.spi.data.readers.RecordReader;\n+import org.apache.pinot.spi.data.readers.RecordReaderConfig;\n+import org.apache.pinot.spi.data.readers.RecordReaderUtils;\n+import org.apache.pinot.spi.utils.SchemaFieldExtractorUtils;\n+\n+\n+public class ProtoBufRecordReader implements RecordReader {\n+  private File _dataFile;\n+  private Schema _schema;\n+  private ProtoBufRecordExtractor _recordExtractor;\n+\n+  private InputStream _inputStream;\n+  private boolean _hasNext;\n+  private Descriptors.Descriptor _descriptor;\n+\n+  private boolean hasMoreToRead()\n+      throws IOException {\n+    _inputStream.mark(1);\n+    int nextByte = _inputStream.read();\n+    _inputStream.reset();\n+    return nextByte != -1;\n+  }\n+\n+  private void init()\n+      throws IOException {\n+    _inputStream = RecordReaderUtils.getBufferedInputStream(_dataFile);\n+    try {\n+      _hasNext = hasMoreToRead();\n+    } catch (Exception e) {\n+      _inputStream.close();\n+      throw e;\n+    }\n+  }\n+\n+  @Override\n+  public void init(File dataFile, Schema schema, @Nullable RecordReaderConfig recordReaderConfig)\n+      throws IOException {\n+    _dataFile = dataFile;\n+    _schema = schema;\n+    Set<String> sourceFields = SchemaFieldExtractorUtils.extract(schema);\n+    ProtoBufRecordExtractorConfig recordExtractorConfig = new ProtoBufRecordExtractorConfig();\n+    ProtoBufRecordReaderConfig protoBufRecordReaderConfig = (ProtoBufRecordReaderConfig) recordReaderConfig;\n+    String descriptorFile = protoBufRecordReaderConfig.getDescriptorFile();\n+    FileInputStream fin = new FileInputStream(descriptorFile);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTM4NTQwOA=="}, "originalCommit": {"oid": "5927bffd191a00a49c3da463d7468c7dfa37cc76"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQ2NDA0MQ==", "bodyText": "done", "url": "https://github.com/apache/pinot/pull/5293#discussion_r422464041", "createdAt": "2020-05-09T07:30:06Z", "author": {"login": "KKcorps"}, "path": "pinot-plugins/pinot-input-format/pinot-protobuf/src/main/java/org/apache/pinot/plugin/inputformat/protobuf/ProtoBufRecordReader.java", "diffHunk": "@@ -0,0 +1,136 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.plugin.inputformat.protobuf;\n+\n+import com.google.protobuf.DescriptorProtos;\n+import com.google.protobuf.Descriptors;\n+import com.google.protobuf.DynamicMessage;\n+import com.google.protobuf.Message;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.util.Set;\n+import javax.annotation.Nullable;\n+import org.apache.pinot.spi.data.Schema;\n+import org.apache.pinot.spi.data.readers.GenericRow;\n+import org.apache.pinot.spi.data.readers.RecordReader;\n+import org.apache.pinot.spi.data.readers.RecordReaderConfig;\n+import org.apache.pinot.spi.data.readers.RecordReaderUtils;\n+import org.apache.pinot.spi.utils.SchemaFieldExtractorUtils;\n+\n+\n+public class ProtoBufRecordReader implements RecordReader {\n+  private File _dataFile;\n+  private Schema _schema;\n+  private ProtoBufRecordExtractor _recordExtractor;\n+\n+  private InputStream _inputStream;\n+  private boolean _hasNext;\n+  private Descriptors.Descriptor _descriptor;\n+\n+  private boolean hasMoreToRead()\n+      throws IOException {\n+    _inputStream.mark(1);\n+    int nextByte = _inputStream.read();\n+    _inputStream.reset();\n+    return nextByte != -1;\n+  }\n+\n+  private void init()\n+      throws IOException {\n+    _inputStream = RecordReaderUtils.getBufferedInputStream(_dataFile);\n+    try {\n+      _hasNext = hasMoreToRead();\n+    } catch (Exception e) {\n+      _inputStream.close();\n+      throw e;\n+    }\n+  }\n+\n+  @Override\n+  public void init(File dataFile, Schema schema, @Nullable RecordReaderConfig recordReaderConfig)\n+      throws IOException {\n+    _dataFile = dataFile;\n+    _schema = schema;\n+    Set<String> sourceFields = SchemaFieldExtractorUtils.extract(schema);\n+    ProtoBufRecordExtractorConfig recordExtractorConfig = new ProtoBufRecordExtractorConfig();\n+    ProtoBufRecordReaderConfig protoBufRecordReaderConfig = (ProtoBufRecordReaderConfig) recordReaderConfig;\n+    String descriptorFile = protoBufRecordReaderConfig.getDescriptorFile();\n+    FileInputStream fin = new FileInputStream(descriptorFile);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTM4NTQwOA=="}, "originalCommit": {"oid": "5927bffd191a00a49c3da463d7468c7dfa37cc76"}, "originalPosition": 76}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4MzU1NDc0OnYy", "diffSide": "RIGHT", "path": "pinot-plugins/pinot-input-format/pinot-protobuf/src/main/java/org/apache/pinot/plugin/inputformat/protobuf/ProtoBufRecordReaderConfig.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNlQxOTo0NDo1OFrOGMJHlw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOVQwNzoyOTo1OVrOGS5KIQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTM4NTQ5NQ==", "bodyText": "URI instead of File?", "url": "https://github.com/apache/pinot/pull/5293#discussion_r415385495", "createdAt": "2020-04-26T19:44:58Z", "author": {"login": "kishoreg"}, "path": "pinot-plugins/pinot-input-format/pinot-protobuf/src/main/java/org/apache/pinot/plugin/inputformat/protobuf/ProtoBufRecordReaderConfig.java", "diffHunk": "@@ -0,0 +1,34 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.plugin.inputformat.protobuf;\n+\n+import org.apache.pinot.spi.data.readers.RecordReaderConfig;\n+\n+\n+public class ProtoBufRecordReaderConfig implements RecordReaderConfig {\n+  private String _descriptorFile;\n+\n+  public String getDescriptorFile() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5927bffd191a00a49c3da463d7468c7dfa37cc76"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQ2NDAzMw==", "bodyText": "done", "url": "https://github.com/apache/pinot/pull/5293#discussion_r422464033", "createdAt": "2020-05-09T07:29:59Z", "author": {"login": "KKcorps"}, "path": "pinot-plugins/pinot-input-format/pinot-protobuf/src/main/java/org/apache/pinot/plugin/inputformat/protobuf/ProtoBufRecordReaderConfig.java", "diffHunk": "@@ -0,0 +1,34 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.plugin.inputformat.protobuf;\n+\n+import org.apache.pinot.spi.data.readers.RecordReaderConfig;\n+\n+\n+public class ProtoBufRecordReaderConfig implements RecordReaderConfig {\n+  private String _descriptorFile;\n+\n+  public String getDescriptorFile() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTM4NTQ5NQ=="}, "originalCommit": {"oid": "5927bffd191a00a49c3da463d7468c7dfa37cc76"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0Mzk2ODY0OnYy", "diffSide": "RIGHT", "path": "pinot-plugins/pinot-input-format/pinot-protobuf/src/main/java/org/apache/pinot/plugin/inputformat/protobuf/ProtoBufRecordReader.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNjo0MDoxOFrOGU6SWw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNjo0MDoxOFrOGU6SWw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDU3OTY3NQ==", "bodyText": "This interface has changed", "url": "https://github.com/apache/pinot/pull/5293#discussion_r424579675", "createdAt": "2020-05-13T16:40:18Z", "author": {"login": "npawar"}, "path": "pinot-plugins/pinot-input-format/pinot-protobuf/src/main/java/org/apache/pinot/plugin/inputformat/protobuf/ProtoBufRecordReader.java", "diffHunk": "@@ -0,0 +1,147 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.plugin.inputformat.protobuf;\n+\n+import com.google.protobuf.DescriptorProtos;\n+import com.google.protobuf.Descriptors;\n+import com.google.protobuf.DynamicMessage;\n+import com.google.protobuf.Message;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.net.URI;\n+import java.util.Set;\n+import javax.annotation.Nullable;\n+import org.apache.pinot.spi.data.Schema;\n+import org.apache.pinot.spi.data.readers.GenericRow;\n+import org.apache.pinot.spi.data.readers.RecordReader;\n+import org.apache.pinot.spi.data.readers.RecordReaderConfig;\n+import org.apache.pinot.spi.data.readers.RecordReaderUtils;\n+import org.apache.pinot.spi.utils.ResourceFinder;\n+import org.apache.pinot.spi.utils.SchemaFieldExtractorUtils;\n+\n+\n+public class ProtoBufRecordReader implements RecordReader {\n+  private File _dataFile;\n+  private Schema _schema;\n+  private ProtoBufRecordExtractor _recordExtractor;\n+\n+  private InputStream _inputStream;\n+  private boolean _hasNext;\n+  private Descriptors.Descriptor _descriptor;\n+\n+  private boolean hasMoreToRead()\n+      throws IOException {\n+    _inputStream.mark(1);\n+    int nextByte = _inputStream.read();\n+    _inputStream.reset();\n+    return nextByte != -1;\n+  }\n+\n+  private void init()\n+      throws IOException {\n+    _inputStream = RecordReaderUtils.getBufferedInputStream(_dataFile);\n+    try {\n+      _hasNext = hasMoreToRead();\n+    } catch (Exception e) {\n+      _inputStream.close();\n+      throw e;\n+    }\n+  }\n+\n+  @Override\n+  public void init(File dataFile, Schema schema, @Nullable RecordReaderConfig recordReaderConfig)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bb126bae0af31958022e751a8fdd8216abea61fe"}, "originalPosition": 70}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0Mzk3MDY3OnYy", "diffSide": "RIGHT", "path": "pinot-plugins/pinot-input-format/pinot-protobuf/src/main/java/org/apache/pinot/plugin/inputformat/protobuf/ProtoBufRecordReader.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNjo0MDo0OVrOGU6Tvw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNjo0MDo0OVrOGU6Tvw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDU4MDAzMQ==", "bodyText": "Why create empty class ProtoBufRecordExtractorConfig, you can just pass null here", "url": "https://github.com/apache/pinot/pull/5293#discussion_r424580031", "createdAt": "2020-05-13T16:40:49Z", "author": {"login": "npawar"}, "path": "pinot-plugins/pinot-input-format/pinot-protobuf/src/main/java/org/apache/pinot/plugin/inputformat/protobuf/ProtoBufRecordReader.java", "diffHunk": "@@ -0,0 +1,147 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.plugin.inputformat.protobuf;\n+\n+import com.google.protobuf.DescriptorProtos;\n+import com.google.protobuf.Descriptors;\n+import com.google.protobuf.DynamicMessage;\n+import com.google.protobuf.Message;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.net.URI;\n+import java.util.Set;\n+import javax.annotation.Nullable;\n+import org.apache.pinot.spi.data.Schema;\n+import org.apache.pinot.spi.data.readers.GenericRow;\n+import org.apache.pinot.spi.data.readers.RecordReader;\n+import org.apache.pinot.spi.data.readers.RecordReaderConfig;\n+import org.apache.pinot.spi.data.readers.RecordReaderUtils;\n+import org.apache.pinot.spi.utils.ResourceFinder;\n+import org.apache.pinot.spi.utils.SchemaFieldExtractorUtils;\n+\n+\n+public class ProtoBufRecordReader implements RecordReader {\n+  private File _dataFile;\n+  private Schema _schema;\n+  private ProtoBufRecordExtractor _recordExtractor;\n+\n+  private InputStream _inputStream;\n+  private boolean _hasNext;\n+  private Descriptors.Descriptor _descriptor;\n+\n+  private boolean hasMoreToRead()\n+      throws IOException {\n+    _inputStream.mark(1);\n+    int nextByte = _inputStream.read();\n+    _inputStream.reset();\n+    return nextByte != -1;\n+  }\n+\n+  private void init()\n+      throws IOException {\n+    _inputStream = RecordReaderUtils.getBufferedInputStream(_dataFile);\n+    try {\n+      _hasNext = hasMoreToRead();\n+    } catch (Exception e) {\n+      _inputStream.close();\n+      throw e;\n+    }\n+  }\n+\n+  @Override\n+  public void init(File dataFile, Schema schema, @Nullable RecordReaderConfig recordReaderConfig)\n+      throws IOException {\n+    _dataFile = dataFile;\n+    _schema = schema;\n+    Set<String> sourceFields = SchemaFieldExtractorUtils.extract(schema);\n+    ProtoBufRecordExtractorConfig recordExtractorConfig = new ProtoBufRecordExtractorConfig();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bb126bae0af31958022e751a8fdd8216abea61fe"}, "originalPosition": 75}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0Mzk4Mzg1OnYy", "diffSide": "RIGHT", "path": "pinot-plugins/pinot-input-format/pinot-protobuf/src/main/java/org/apache/pinot/plugin/inputformat/protobuf/ProtoBufRecordReader.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNjo0NDoyN1rOGU6cgw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNjo0NDoyN1rOGU6cgw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDU4MjI3NQ==", "bodyText": "s/tmp/tempDynamicMessage", "url": "https://github.com/apache/pinot/pull/5293#discussion_r424582275", "createdAt": "2020-05-13T16:44:27Z", "author": {"login": "npawar"}, "path": "pinot-plugins/pinot-input-format/pinot-protobuf/src/main/java/org/apache/pinot/plugin/inputformat/protobuf/ProtoBufRecordReader.java", "diffHunk": "@@ -0,0 +1,147 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.plugin.inputformat.protobuf;\n+\n+import com.google.protobuf.DescriptorProtos;\n+import com.google.protobuf.Descriptors;\n+import com.google.protobuf.DynamicMessage;\n+import com.google.protobuf.Message;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.net.URI;\n+import java.util.Set;\n+import javax.annotation.Nullable;\n+import org.apache.pinot.spi.data.Schema;\n+import org.apache.pinot.spi.data.readers.GenericRow;\n+import org.apache.pinot.spi.data.readers.RecordReader;\n+import org.apache.pinot.spi.data.readers.RecordReaderConfig;\n+import org.apache.pinot.spi.data.readers.RecordReaderUtils;\n+import org.apache.pinot.spi.utils.ResourceFinder;\n+import org.apache.pinot.spi.utils.SchemaFieldExtractorUtils;\n+\n+\n+public class ProtoBufRecordReader implements RecordReader {\n+  private File _dataFile;\n+  private Schema _schema;\n+  private ProtoBufRecordExtractor _recordExtractor;\n+\n+  private InputStream _inputStream;\n+  private boolean _hasNext;\n+  private Descriptors.Descriptor _descriptor;\n+\n+  private boolean hasMoreToRead()\n+      throws IOException {\n+    _inputStream.mark(1);\n+    int nextByte = _inputStream.read();\n+    _inputStream.reset();\n+    return nextByte != -1;\n+  }\n+\n+  private void init()\n+      throws IOException {\n+    _inputStream = RecordReaderUtils.getBufferedInputStream(_dataFile);\n+    try {\n+      _hasNext = hasMoreToRead();\n+    } catch (Exception e) {\n+      _inputStream.close();\n+      throw e;\n+    }\n+  }\n+\n+  @Override\n+  public void init(File dataFile, Schema schema, @Nullable RecordReaderConfig recordReaderConfig)\n+      throws IOException {\n+    _dataFile = dataFile;\n+    _schema = schema;\n+    Set<String> sourceFields = SchemaFieldExtractorUtils.extract(schema);\n+    ProtoBufRecordExtractorConfig recordExtractorConfig = new ProtoBufRecordExtractorConfig();\n+    ProtoBufRecordReaderConfig protoBufRecordReaderConfig = (ProtoBufRecordReaderConfig) recordReaderConfig;\n+    InputStream fin = getDescriptorFileInputStream(protoBufRecordReaderConfig);\n+    buildProtoBufDescriptor(fin);\n+    _recordExtractor = new ProtoBufRecordExtractor();\n+    _recordExtractor.init(sourceFields, recordExtractorConfig);\n+    init();\n+  }\n+\n+  private void buildProtoBufDescriptor(InputStream fin)\n+      throws IOException {\n+    try {\n+      DescriptorProtos.FileDescriptorSet set = DescriptorProtos.FileDescriptorSet.parseFrom(fin);\n+      Descriptors.FileDescriptor fileDescriptor =\n+          Descriptors.FileDescriptor.buildFrom(set.getFile(0), new Descriptors.FileDescriptor[]{});\n+      _descriptor = fileDescriptor.getMessageTypes().get(0);\n+    } catch (Descriptors.DescriptorValidationException e) {\n+      throw new IOException(\"Descriptor file validation failed\", e);\n+    }\n+  }\n+\n+  private InputStream getDescriptorFileInputStream(ProtoBufRecordReaderConfig protoBufRecordReaderConfig)\n+      throws IOException {\n+    URI descriptorFileURI = protoBufRecordReaderConfig.getDescriptorFile();\n+    return ResourceFinder.openResource(descriptorFileURI);\n+  }\n+\n+  @Override\n+  public boolean hasNext() {\n+    return _hasNext;\n+  }\n+\n+  @Override\n+  public GenericRow next()\n+      throws IOException {\n+    return next(new GenericRow());\n+  }\n+\n+  @Override\n+  public GenericRow next(GenericRow reuse)\n+      throws IOException {\n+    Message message = null;\n+    try {\n+      DynamicMessage tmp = DynamicMessage.getDefaultInstance(_descriptor);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bb126bae0af31958022e751a8fdd8216abea61fe"}, "originalPosition": 118}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0Mzk5MjE1OnYy", "diffSide": "RIGHT", "path": "pinot-plugins/pinot-input-format/pinot-protobuf/src/main/java/org/apache/pinot/plugin/inputformat/protobuf/ProtoBufRecordReader.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNjo0NjozNlrOGU6hxQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxNzoxNToyOVrOGbVDcg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDU4MzYyMQ==", "bodyText": "Can DynamicMessage and Builder instance also be reused across every call to next?", "url": "https://github.com/apache/pinot/pull/5293#discussion_r424583621", "createdAt": "2020-05-13T16:46:36Z", "author": {"login": "npawar"}, "path": "pinot-plugins/pinot-input-format/pinot-protobuf/src/main/java/org/apache/pinot/plugin/inputformat/protobuf/ProtoBufRecordReader.java", "diffHunk": "@@ -0,0 +1,147 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.plugin.inputformat.protobuf;\n+\n+import com.google.protobuf.DescriptorProtos;\n+import com.google.protobuf.Descriptors;\n+import com.google.protobuf.DynamicMessage;\n+import com.google.protobuf.Message;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.net.URI;\n+import java.util.Set;\n+import javax.annotation.Nullable;\n+import org.apache.pinot.spi.data.Schema;\n+import org.apache.pinot.spi.data.readers.GenericRow;\n+import org.apache.pinot.spi.data.readers.RecordReader;\n+import org.apache.pinot.spi.data.readers.RecordReaderConfig;\n+import org.apache.pinot.spi.data.readers.RecordReaderUtils;\n+import org.apache.pinot.spi.utils.ResourceFinder;\n+import org.apache.pinot.spi.utils.SchemaFieldExtractorUtils;\n+\n+\n+public class ProtoBufRecordReader implements RecordReader {\n+  private File _dataFile;\n+  private Schema _schema;\n+  private ProtoBufRecordExtractor _recordExtractor;\n+\n+  private InputStream _inputStream;\n+  private boolean _hasNext;\n+  private Descriptors.Descriptor _descriptor;\n+\n+  private boolean hasMoreToRead()\n+      throws IOException {\n+    _inputStream.mark(1);\n+    int nextByte = _inputStream.read();\n+    _inputStream.reset();\n+    return nextByte != -1;\n+  }\n+\n+  private void init()\n+      throws IOException {\n+    _inputStream = RecordReaderUtils.getBufferedInputStream(_dataFile);\n+    try {\n+      _hasNext = hasMoreToRead();\n+    } catch (Exception e) {\n+      _inputStream.close();\n+      throw e;\n+    }\n+  }\n+\n+  @Override\n+  public void init(File dataFile, Schema schema, @Nullable RecordReaderConfig recordReaderConfig)\n+      throws IOException {\n+    _dataFile = dataFile;\n+    _schema = schema;\n+    Set<String> sourceFields = SchemaFieldExtractorUtils.extract(schema);\n+    ProtoBufRecordExtractorConfig recordExtractorConfig = new ProtoBufRecordExtractorConfig();\n+    ProtoBufRecordReaderConfig protoBufRecordReaderConfig = (ProtoBufRecordReaderConfig) recordReaderConfig;\n+    InputStream fin = getDescriptorFileInputStream(protoBufRecordReaderConfig);\n+    buildProtoBufDescriptor(fin);\n+    _recordExtractor = new ProtoBufRecordExtractor();\n+    _recordExtractor.init(sourceFields, recordExtractorConfig);\n+    init();\n+  }\n+\n+  private void buildProtoBufDescriptor(InputStream fin)\n+      throws IOException {\n+    try {\n+      DescriptorProtos.FileDescriptorSet set = DescriptorProtos.FileDescriptorSet.parseFrom(fin);\n+      Descriptors.FileDescriptor fileDescriptor =\n+          Descriptors.FileDescriptor.buildFrom(set.getFile(0), new Descriptors.FileDescriptor[]{});\n+      _descriptor = fileDescriptor.getMessageTypes().get(0);\n+    } catch (Descriptors.DescriptorValidationException e) {\n+      throw new IOException(\"Descriptor file validation failed\", e);\n+    }\n+  }\n+\n+  private InputStream getDescriptorFileInputStream(ProtoBufRecordReaderConfig protoBufRecordReaderConfig)\n+      throws IOException {\n+    URI descriptorFileURI = protoBufRecordReaderConfig.getDescriptorFile();\n+    return ResourceFinder.openResource(descriptorFileURI);\n+  }\n+\n+  @Override\n+  public boolean hasNext() {\n+    return _hasNext;\n+  }\n+\n+  @Override\n+  public GenericRow next()\n+      throws IOException {\n+    return next(new GenericRow());\n+  }\n+\n+  @Override\n+  public GenericRow next(GenericRow reuse)\n+      throws IOException {\n+    Message message = null;\n+    try {\n+      DynamicMessage tmp = DynamicMessage.getDefaultInstance(_descriptor);\n+      Message.Builder builder = tmp.newBuilderForType();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bb126bae0af31958022e751a8fdd8216abea61fe"}, "originalPosition": 119}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDY1Nzg4Nw==", "bodyText": "not sure.", "url": "https://github.com/apache/pinot/pull/5293#discussion_r430657887", "createdAt": "2020-05-26T19:34:50Z", "author": {"login": "KKcorps"}, "path": "pinot-plugins/pinot-input-format/pinot-protobuf/src/main/java/org/apache/pinot/plugin/inputformat/protobuf/ProtoBufRecordReader.java", "diffHunk": "@@ -0,0 +1,147 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.plugin.inputformat.protobuf;\n+\n+import com.google.protobuf.DescriptorProtos;\n+import com.google.protobuf.Descriptors;\n+import com.google.protobuf.DynamicMessage;\n+import com.google.protobuf.Message;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.net.URI;\n+import java.util.Set;\n+import javax.annotation.Nullable;\n+import org.apache.pinot.spi.data.Schema;\n+import org.apache.pinot.spi.data.readers.GenericRow;\n+import org.apache.pinot.spi.data.readers.RecordReader;\n+import org.apache.pinot.spi.data.readers.RecordReaderConfig;\n+import org.apache.pinot.spi.data.readers.RecordReaderUtils;\n+import org.apache.pinot.spi.utils.ResourceFinder;\n+import org.apache.pinot.spi.utils.SchemaFieldExtractorUtils;\n+\n+\n+public class ProtoBufRecordReader implements RecordReader {\n+  private File _dataFile;\n+  private Schema _schema;\n+  private ProtoBufRecordExtractor _recordExtractor;\n+\n+  private InputStream _inputStream;\n+  private boolean _hasNext;\n+  private Descriptors.Descriptor _descriptor;\n+\n+  private boolean hasMoreToRead()\n+      throws IOException {\n+    _inputStream.mark(1);\n+    int nextByte = _inputStream.read();\n+    _inputStream.reset();\n+    return nextByte != -1;\n+  }\n+\n+  private void init()\n+      throws IOException {\n+    _inputStream = RecordReaderUtils.getBufferedInputStream(_dataFile);\n+    try {\n+      _hasNext = hasMoreToRead();\n+    } catch (Exception e) {\n+      _inputStream.close();\n+      throw e;\n+    }\n+  }\n+\n+  @Override\n+  public void init(File dataFile, Schema schema, @Nullable RecordReaderConfig recordReaderConfig)\n+      throws IOException {\n+    _dataFile = dataFile;\n+    _schema = schema;\n+    Set<String> sourceFields = SchemaFieldExtractorUtils.extract(schema);\n+    ProtoBufRecordExtractorConfig recordExtractorConfig = new ProtoBufRecordExtractorConfig();\n+    ProtoBufRecordReaderConfig protoBufRecordReaderConfig = (ProtoBufRecordReaderConfig) recordReaderConfig;\n+    InputStream fin = getDescriptorFileInputStream(protoBufRecordReaderConfig);\n+    buildProtoBufDescriptor(fin);\n+    _recordExtractor = new ProtoBufRecordExtractor();\n+    _recordExtractor.init(sourceFields, recordExtractorConfig);\n+    init();\n+  }\n+\n+  private void buildProtoBufDescriptor(InputStream fin)\n+      throws IOException {\n+    try {\n+      DescriptorProtos.FileDescriptorSet set = DescriptorProtos.FileDescriptorSet.parseFrom(fin);\n+      Descriptors.FileDescriptor fileDescriptor =\n+          Descriptors.FileDescriptor.buildFrom(set.getFile(0), new Descriptors.FileDescriptor[]{});\n+      _descriptor = fileDescriptor.getMessageTypes().get(0);\n+    } catch (Descriptors.DescriptorValidationException e) {\n+      throw new IOException(\"Descriptor file validation failed\", e);\n+    }\n+  }\n+\n+  private InputStream getDescriptorFileInputStream(ProtoBufRecordReaderConfig protoBufRecordReaderConfig)\n+      throws IOException {\n+    URI descriptorFileURI = protoBufRecordReaderConfig.getDescriptorFile();\n+    return ResourceFinder.openResource(descriptorFileURI);\n+  }\n+\n+  @Override\n+  public boolean hasNext() {\n+    return _hasNext;\n+  }\n+\n+  @Override\n+  public GenericRow next()\n+      throws IOException {\n+    return next(new GenericRow());\n+  }\n+\n+  @Override\n+  public GenericRow next(GenericRow reuse)\n+      throws IOException {\n+    Message message = null;\n+    try {\n+      DynamicMessage tmp = DynamicMessage.getDefaultInstance(_descriptor);\n+      Message.Builder builder = tmp.newBuilderForType();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDU4MzYyMQ=="}, "originalCommit": {"oid": "bb126bae0af31958022e751a8fdd8216abea61fe"}, "originalPosition": 119}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTI4NTg2OA==", "bodyText": "can you check with the help of your test? If they can be reused, make them class fields?", "url": "https://github.com/apache/pinot/pull/5293#discussion_r431285868", "createdAt": "2020-05-27T16:38:53Z", "author": {"login": "npawar"}, "path": "pinot-plugins/pinot-input-format/pinot-protobuf/src/main/java/org/apache/pinot/plugin/inputformat/protobuf/ProtoBufRecordReader.java", "diffHunk": "@@ -0,0 +1,147 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.plugin.inputformat.protobuf;\n+\n+import com.google.protobuf.DescriptorProtos;\n+import com.google.protobuf.Descriptors;\n+import com.google.protobuf.DynamicMessage;\n+import com.google.protobuf.Message;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.net.URI;\n+import java.util.Set;\n+import javax.annotation.Nullable;\n+import org.apache.pinot.spi.data.Schema;\n+import org.apache.pinot.spi.data.readers.GenericRow;\n+import org.apache.pinot.spi.data.readers.RecordReader;\n+import org.apache.pinot.spi.data.readers.RecordReaderConfig;\n+import org.apache.pinot.spi.data.readers.RecordReaderUtils;\n+import org.apache.pinot.spi.utils.ResourceFinder;\n+import org.apache.pinot.spi.utils.SchemaFieldExtractorUtils;\n+\n+\n+public class ProtoBufRecordReader implements RecordReader {\n+  private File _dataFile;\n+  private Schema _schema;\n+  private ProtoBufRecordExtractor _recordExtractor;\n+\n+  private InputStream _inputStream;\n+  private boolean _hasNext;\n+  private Descriptors.Descriptor _descriptor;\n+\n+  private boolean hasMoreToRead()\n+      throws IOException {\n+    _inputStream.mark(1);\n+    int nextByte = _inputStream.read();\n+    _inputStream.reset();\n+    return nextByte != -1;\n+  }\n+\n+  private void init()\n+      throws IOException {\n+    _inputStream = RecordReaderUtils.getBufferedInputStream(_dataFile);\n+    try {\n+      _hasNext = hasMoreToRead();\n+    } catch (Exception e) {\n+      _inputStream.close();\n+      throw e;\n+    }\n+  }\n+\n+  @Override\n+  public void init(File dataFile, Schema schema, @Nullable RecordReaderConfig recordReaderConfig)\n+      throws IOException {\n+    _dataFile = dataFile;\n+    _schema = schema;\n+    Set<String> sourceFields = SchemaFieldExtractorUtils.extract(schema);\n+    ProtoBufRecordExtractorConfig recordExtractorConfig = new ProtoBufRecordExtractorConfig();\n+    ProtoBufRecordReaderConfig protoBufRecordReaderConfig = (ProtoBufRecordReaderConfig) recordReaderConfig;\n+    InputStream fin = getDescriptorFileInputStream(protoBufRecordReaderConfig);\n+    buildProtoBufDescriptor(fin);\n+    _recordExtractor = new ProtoBufRecordExtractor();\n+    _recordExtractor.init(sourceFields, recordExtractorConfig);\n+    init();\n+  }\n+\n+  private void buildProtoBufDescriptor(InputStream fin)\n+      throws IOException {\n+    try {\n+      DescriptorProtos.FileDescriptorSet set = DescriptorProtos.FileDescriptorSet.parseFrom(fin);\n+      Descriptors.FileDescriptor fileDescriptor =\n+          Descriptors.FileDescriptor.buildFrom(set.getFile(0), new Descriptors.FileDescriptor[]{});\n+      _descriptor = fileDescriptor.getMessageTypes().get(0);\n+    } catch (Descriptors.DescriptorValidationException e) {\n+      throw new IOException(\"Descriptor file validation failed\", e);\n+    }\n+  }\n+\n+  private InputStream getDescriptorFileInputStream(ProtoBufRecordReaderConfig protoBufRecordReaderConfig)\n+      throws IOException {\n+    URI descriptorFileURI = protoBufRecordReaderConfig.getDescriptorFile();\n+    return ResourceFinder.openResource(descriptorFileURI);\n+  }\n+\n+  @Override\n+  public boolean hasNext() {\n+    return _hasNext;\n+  }\n+\n+  @Override\n+  public GenericRow next()\n+      throws IOException {\n+    return next(new GenericRow());\n+  }\n+\n+  @Override\n+  public GenericRow next(GenericRow reuse)\n+      throws IOException {\n+    Message message = null;\n+    try {\n+      DynamicMessage tmp = DynamicMessage.getDefaultInstance(_descriptor);\n+      Message.Builder builder = tmp.newBuilderForType();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDU4MzYyMQ=="}, "originalCommit": {"oid": "bb126bae0af31958022e751a8fdd8216abea61fe"}, "originalPosition": 119}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTMwOTY4Mg==", "bodyText": "Done.  Temp DynamicMessage can be reused but reusing builder is not possible.\nMoved the temp Dyanmic message to class variable.", "url": "https://github.com/apache/pinot/pull/5293#discussion_r431309682", "createdAt": "2020-05-27T17:15:29Z", "author": {"login": "KKcorps"}, "path": "pinot-plugins/pinot-input-format/pinot-protobuf/src/main/java/org/apache/pinot/plugin/inputformat/protobuf/ProtoBufRecordReader.java", "diffHunk": "@@ -0,0 +1,147 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.plugin.inputformat.protobuf;\n+\n+import com.google.protobuf.DescriptorProtos;\n+import com.google.protobuf.Descriptors;\n+import com.google.protobuf.DynamicMessage;\n+import com.google.protobuf.Message;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.net.URI;\n+import java.util.Set;\n+import javax.annotation.Nullable;\n+import org.apache.pinot.spi.data.Schema;\n+import org.apache.pinot.spi.data.readers.GenericRow;\n+import org.apache.pinot.spi.data.readers.RecordReader;\n+import org.apache.pinot.spi.data.readers.RecordReaderConfig;\n+import org.apache.pinot.spi.data.readers.RecordReaderUtils;\n+import org.apache.pinot.spi.utils.ResourceFinder;\n+import org.apache.pinot.spi.utils.SchemaFieldExtractorUtils;\n+\n+\n+public class ProtoBufRecordReader implements RecordReader {\n+  private File _dataFile;\n+  private Schema _schema;\n+  private ProtoBufRecordExtractor _recordExtractor;\n+\n+  private InputStream _inputStream;\n+  private boolean _hasNext;\n+  private Descriptors.Descriptor _descriptor;\n+\n+  private boolean hasMoreToRead()\n+      throws IOException {\n+    _inputStream.mark(1);\n+    int nextByte = _inputStream.read();\n+    _inputStream.reset();\n+    return nextByte != -1;\n+  }\n+\n+  private void init()\n+      throws IOException {\n+    _inputStream = RecordReaderUtils.getBufferedInputStream(_dataFile);\n+    try {\n+      _hasNext = hasMoreToRead();\n+    } catch (Exception e) {\n+      _inputStream.close();\n+      throw e;\n+    }\n+  }\n+\n+  @Override\n+  public void init(File dataFile, Schema schema, @Nullable RecordReaderConfig recordReaderConfig)\n+      throws IOException {\n+    _dataFile = dataFile;\n+    _schema = schema;\n+    Set<String> sourceFields = SchemaFieldExtractorUtils.extract(schema);\n+    ProtoBufRecordExtractorConfig recordExtractorConfig = new ProtoBufRecordExtractorConfig();\n+    ProtoBufRecordReaderConfig protoBufRecordReaderConfig = (ProtoBufRecordReaderConfig) recordReaderConfig;\n+    InputStream fin = getDescriptorFileInputStream(protoBufRecordReaderConfig);\n+    buildProtoBufDescriptor(fin);\n+    _recordExtractor = new ProtoBufRecordExtractor();\n+    _recordExtractor.init(sourceFields, recordExtractorConfig);\n+    init();\n+  }\n+\n+  private void buildProtoBufDescriptor(InputStream fin)\n+      throws IOException {\n+    try {\n+      DescriptorProtos.FileDescriptorSet set = DescriptorProtos.FileDescriptorSet.parseFrom(fin);\n+      Descriptors.FileDescriptor fileDescriptor =\n+          Descriptors.FileDescriptor.buildFrom(set.getFile(0), new Descriptors.FileDescriptor[]{});\n+      _descriptor = fileDescriptor.getMessageTypes().get(0);\n+    } catch (Descriptors.DescriptorValidationException e) {\n+      throw new IOException(\"Descriptor file validation failed\", e);\n+    }\n+  }\n+\n+  private InputStream getDescriptorFileInputStream(ProtoBufRecordReaderConfig protoBufRecordReaderConfig)\n+      throws IOException {\n+    URI descriptorFileURI = protoBufRecordReaderConfig.getDescriptorFile();\n+    return ResourceFinder.openResource(descriptorFileURI);\n+  }\n+\n+  @Override\n+  public boolean hasNext() {\n+    return _hasNext;\n+  }\n+\n+  @Override\n+  public GenericRow next()\n+      throws IOException {\n+    return next(new GenericRow());\n+  }\n+\n+  @Override\n+  public GenericRow next(GenericRow reuse)\n+      throws IOException {\n+    Message message = null;\n+    try {\n+      DynamicMessage tmp = DynamicMessage.getDefaultInstance(_descriptor);\n+      Message.Builder builder = tmp.newBuilderForType();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDU4MzYyMQ=="}, "originalCommit": {"oid": "bb126bae0af31958022e751a8fdd8216abea61fe"}, "originalPosition": 119}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0Mzk5NTQ4OnYy", "diffSide": "RIGHT", "path": "pinot-plugins/pinot-input-format/pinot-protobuf/src/main/java/org/apache/pinot/plugin/inputformat/protobuf/ProtoBufRecordExtractorConfig.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNjo0NzoyMlrOGU6j4A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNjo0NzoyMlrOGU6j4A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDU4NDE2MA==", "bodyText": "remove this file", "url": "https://github.com/apache/pinot/pull/5293#discussion_r424584160", "createdAt": "2020-05-13T16:47:22Z", "author": {"login": "npawar"}, "path": "pinot-plugins/pinot-input-format/pinot-protobuf/src/main/java/org/apache/pinot/plugin/inputformat/protobuf/ProtoBufRecordExtractorConfig.java", "diffHunk": "@@ -0,0 +1,25 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bb126bae0af31958022e751a8fdd8216abea61fe"}, "originalPosition": 2}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0NDAxMDk1OnYy", "diffSide": "RIGHT", "path": "pinot-spi/src/main/java/org/apache/pinot/spi/utils/ResourceFinder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNjo1MToxOFrOGU6twA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNjo1MToxOFrOGU6twA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDU4NjY4OA==", "bodyText": "javadocs", "url": "https://github.com/apache/pinot/pull/5293#discussion_r424586688", "createdAt": "2020-05-13T16:51:18Z", "author": {"login": "npawar"}, "path": "pinot-spi/src/main/java/org/apache/pinot/spi/utils/ResourceFinder.java", "diffHunk": "@@ -0,0 +1,53 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.spi.utils;\n+\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.net.URI;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+\n+\n+public class ResourceFinder {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bb126bae0af31958022e751a8fdd8216abea61fe"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0NDAxMjM1OnYy", "diffSide": "RIGHT", "path": "pinot-plugins/pinot-input-format/pinot-protobuf/src/test/resources/sample.proto", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNjo1MTo0NFrOGU6utw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNjo1MTo0NFrOGU6utw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDU4NjkzNQ==", "bodyText": "new line at end of both these sample.* files", "url": "https://github.com/apache/pinot/pull/5293#discussion_r424586935", "createdAt": "2020-05-13T16:51:44Z", "author": {"login": "npawar"}, "path": "pinot-plugins/pinot-input-format/pinot-protobuf/src/test/resources/sample.proto", "diffHunk": "@@ -0,0 +1,9 @@\n+syntax = \"proto3\";\n+package org.apache.pinot.plugin.inputformat.protobuf;\n+\n+message SampleRecord {\n+  string name = 1;\n+  int32 id = 2;\n+  string email = 3;\n+  repeated string friends = 4;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bb126bae0af31958022e751a8fdd8216abea61fe"}, "originalPosition": 8}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3181, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}